
Tacho2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013650  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b18  08013708  08013708  00023708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016220  08016220  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016220  08016220  00026220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016228  08016228  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016228  08016228  00026228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801622c  0801622c  0002622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08016230  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200000ec  0801631c  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0801631c  000305bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279a4  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000470e  00000000  00000000  00057ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  0005c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  0005da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c065  00000000  00000000  0005f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022937  00000000  00000000  0007b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b49  00000000  00000000  0009d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  0013e558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000ec 	.word	0x200000ec
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080136f0 	.word	0x080136f0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000f0 	.word	0x200000f0
 80000fc:	080136f0 	.word	0x080136f0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c10      	adds	r0, r2, #0
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	1c19      	adds	r1, r3, #0
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 fef7 	bl	8002204 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe41 	bl	80020a8 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fee9 	bl	8002204 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fedf 	bl	8002204 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe63 	bl	8002120 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe59 	bl	8002120 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	1c08      	adds	r0, r1, #0
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000486:	f000 fbef 	bl	8000c68 <__lesf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	d401      	bmi.n	8000492 <__aeabi_cfcmpeq+0xe>
 800048e:	2100      	movs	r1, #0
 8000490:	42c8      	cmn	r0, r1
 8000492:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb73 	bl	8000b80 <__eqsf2>
 800049a:	4240      	negs	r0, r0
 800049c:	3001      	adds	r0, #1
 800049e:	bd10      	pop	{r4, pc}

080004a0 <__aeabi_fcmplt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fbe1 	bl	8000c68 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fcmplt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmple>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fbd7 	bl	8000c68 <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dd01      	ble.n	80004c2 <__aeabi_fcmple+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpgt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb81 	bl	8000bd0 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dc01      	bgt.n	80004d6 <__aeabi_fcmpgt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmpge>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb77 	bl	8000bd0 <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	da01      	bge.n	80004ea <__aeabi_fcmpge+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_ldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d113      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	db06      	blt.n	800050a <__aeabi_ldivmod+0x1a>
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_ldivmod+0x12>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d006      	beq.n	8000510 <__aeabi_ldivmod+0x20>
 8000502:	2000      	movs	r0, #0
 8000504:	43c0      	mvns	r0, r0
 8000506:	0841      	lsrs	r1, r0, #1
 8000508:	e002      	b.n	8000510 <__aeabi_ldivmod+0x20>
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0609      	lsls	r1, r1, #24
 800050e:	2000      	movs	r0, #0
 8000510:	b407      	push	{r0, r1, r2}
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <__aeabi_ldivmod+0x2c>)
 8000514:	a101      	add	r1, pc, #4	; (adr r1, 800051c <__aeabi_ldivmod+0x2c>)
 8000516:	1840      	adds	r0, r0, r1
 8000518:	9002      	str	r0, [sp, #8]
 800051a:	bd03      	pop	{r0, r1, pc}
 800051c:	fffffee1 	.word	0xfffffee1
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f864 	bl	80005f4 <__gnu_ldivmod_helper>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			; (mov r8, r8)

08000538 <__aeabi_lmul>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	0415      	lsls	r5, r2, #16
 800053c:	0c2d      	lsrs	r5, r5, #16
 800053e:	000f      	movs	r7, r1
 8000540:	0001      	movs	r1, r0
 8000542:	002e      	movs	r6, r5
 8000544:	46c6      	mov	lr, r8
 8000546:	4684      	mov	ip, r0
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	0c14      	lsrs	r4, r2, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	0c09      	lsrs	r1, r1, #16
 8000550:	4346      	muls	r6, r0
 8000552:	434d      	muls	r5, r1
 8000554:	4360      	muls	r0, r4
 8000556:	4361      	muls	r1, r4
 8000558:	1940      	adds	r0, r0, r5
 800055a:	0c34      	lsrs	r4, r6, #16
 800055c:	1824      	adds	r4, r4, r0
 800055e:	b500      	push	{lr}
 8000560:	42a5      	cmp	r5, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x34>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4680      	mov	r8, r0
 800056a:	4441      	add	r1, r8
 800056c:	0c25      	lsrs	r5, r4, #16
 800056e:	186d      	adds	r5, r5, r1
 8000570:	4661      	mov	r1, ip
 8000572:	4359      	muls	r1, r3
 8000574:	437a      	muls	r2, r7
 8000576:	0430      	lsls	r0, r6, #16
 8000578:	1949      	adds	r1, r1, r5
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	0c00      	lsrs	r0, r0, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	1889      	adds	r1, r1, r2
 8000582:	bc80      	pop	{r7}
 8000584:	46b8      	mov	r8, r7
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000588 <__aeabi_f2uiz>:
 8000588:	219e      	movs	r1, #158	; 0x9e
 800058a:	b510      	push	{r4, lr}
 800058c:	05c9      	lsls	r1, r1, #23
 800058e:	1c04      	adds	r4, r0, #0
 8000590:	f7ff ffa4 	bl	80004dc <__aeabi_fcmpge>
 8000594:	2800      	cmp	r0, #0
 8000596:	d103      	bne.n	80005a0 <__aeabi_f2uiz+0x18>
 8000598:	1c20      	adds	r0, r4, #0
 800059a:	f000 fe91 	bl	80012c0 <__aeabi_f2iz>
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	219e      	movs	r1, #158	; 0x9e
 80005a2:	1c20      	adds	r0, r4, #0
 80005a4:	05c9      	lsls	r1, r1, #23
 80005a6:	f000 fcc3 	bl	8000f30 <__aeabi_fsub>
 80005aa:	f000 fe89 	bl	80012c0 <__aeabi_f2iz>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	469c      	mov	ip, r3
 80005b4:	4460      	add	r0, ip
 80005b6:	e7f2      	b.n	800059e <__aeabi_f2uiz+0x16>

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff51 	bl	8000468 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fca5 	bl	8002f1c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8ee 	bl	80027bc <__aeabi_dsub>
 80005e0:	f002 fc9c 	bl	8002f1c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__gnu_ldivmod_helper>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	46ce      	mov	lr, r9
 80005f8:	4647      	mov	r7, r8
 80005fa:	b580      	push	{r7, lr}
 80005fc:	4691      	mov	r9, r2
 80005fe:	4698      	mov	r8, r3
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	f002 fe04 	bl	8003210 <__divdi3>
 8000608:	0007      	movs	r7, r0
 800060a:	000e      	movs	r6, r1
 800060c:	0002      	movs	r2, r0
 800060e:	000b      	movs	r3, r1
 8000610:	4648      	mov	r0, r9
 8000612:	4641      	mov	r1, r8
 8000614:	f7ff ff90 	bl	8000538 <__aeabi_lmul>
 8000618:	1a24      	subs	r4, r4, r0
 800061a:	418d      	sbcs	r5, r1
 800061c:	9b08      	ldr	r3, [sp, #32]
 800061e:	0038      	movs	r0, r7
 8000620:	0031      	movs	r1, r6
 8000622:	601c      	str	r4, [r3, #0]
 8000624:	605d      	str	r5, [r3, #4]
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fadd>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4646      	mov	r6, r8
 8000634:	46d6      	mov	lr, sl
 8000636:	464f      	mov	r7, r9
 8000638:	024d      	lsls	r5, r1, #9
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	0a52      	lsrs	r2, r2, #9
 8000640:	0a6e      	lsrs	r6, r5, #9
 8000642:	0047      	lsls	r7, r0, #1
 8000644:	46b0      	mov	r8, r6
 8000646:	0e3f      	lsrs	r7, r7, #24
 8000648:	004e      	lsls	r6, r1, #1
 800064a:	0fc4      	lsrs	r4, r0, #31
 800064c:	00d0      	lsls	r0, r2, #3
 800064e:	4694      	mov	ip, r2
 8000650:	003b      	movs	r3, r7
 8000652:	4682      	mov	sl, r0
 8000654:	0e36      	lsrs	r6, r6, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09ad      	lsrs	r5, r5, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d06d      	beq.n	800073a <__aeabi_fadd+0x10a>
 800065e:	1bb8      	subs	r0, r7, r6
 8000660:	4681      	mov	r9, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	dd4d      	ble.n	8000702 <__aeabi_fadd+0xd2>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x3c>
 800066a:	e088      	b.n	800077e <__aeabi_fadd+0x14e>
 800066c:	2fff      	cmp	r7, #255	; 0xff
 800066e:	d05a      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	04db      	lsls	r3, r3, #19
 8000674:	431d      	orrs	r5, r3
 8000676:	464b      	mov	r3, r9
 8000678:	2201      	movs	r2, #1
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dc0a      	bgt.n	8000694 <__aeabi_fadd+0x64>
 800067e:	002b      	movs	r3, r5
 8000680:	464a      	mov	r2, r9
 8000682:	4649      	mov	r1, r9
 8000684:	40d3      	lsrs	r3, r2
 8000686:	2220      	movs	r2, #32
 8000688:	1a52      	subs	r2, r2, r1
 800068a:	4095      	lsls	r5, r2
 800068c:	002a      	movs	r2, r5
 800068e:	1e55      	subs	r5, r2, #1
 8000690:	41aa      	sbcs	r2, r5
 8000692:	431a      	orrs	r2, r3
 8000694:	4653      	mov	r3, sl
 8000696:	1a9a      	subs	r2, r3, r2
 8000698:	0153      	lsls	r3, r2, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x6e>
 800069c:	e0b9      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	0996      	lsrs	r6, r2, #6
 80006a2:	0030      	movs	r0, r6
 80006a4:	f002 fd96 	bl	80031d4 <__clzsi2>
 80006a8:	3805      	subs	r0, #5
 80006aa:	4086      	lsls	r6, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_fadd+0x82>
 80006b0:	e0d4      	b.n	800085c <__aeabi_fadd+0x22c>
 80006b2:	0033      	movs	r3, r6
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	2020      	movs	r0, #32
 80006b8:	3701      	adds	r7, #1
 80006ba:	40fb      	lsrs	r3, r7
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1e56      	subs	r6, r2, #1
 80006c4:	41b2      	sbcs	r2, r6
 80006c6:	2700      	movs	r7, #0
 80006c8:	431a      	orrs	r2, r3
 80006ca:	0753      	lsls	r3, r2, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006ce:	230f      	movs	r3, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fadd+0xae>
 80006dc:	e09c      	b.n	8000818 <__aeabi_fadd+0x1e8>
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	2ffe      	cmp	r7, #254	; 0xfe
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xb6>
 80006e4:	e09a      	b.n	800081c <__aeabi_fadd+0x1ec>
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	4694      	mov	ip, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	05d8      	lsls	r0, r3, #23
 80006f0:	4663      	mov	r3, ip
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4318      	orrs	r0, r3
 80006f6:	4320      	orrs	r0, r4
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	2800      	cmp	r0, #0
 8000704:	d049      	beq.n	800079a <__aeabi_fadd+0x16a>
 8000706:	1bf3      	subs	r3, r6, r7
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fadd+0x24c>
 800070e:	4652      	mov	r2, sl
 8000710:	2a00      	cmp	r2, #0
 8000712:	d060      	beq.n	80007d6 <__aeabi_fadd+0x1a6>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0xec>
 800071a:	e0fc      	b.n	8000916 <__aeabi_fadd+0x2e6>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xf2>
 8000720:	e0b4      	b.n	800088c <__aeabi_fadd+0x25c>
 8000722:	000c      	movs	r4, r1
 8000724:	4642      	mov	r2, r8
 8000726:	2a00      	cmp	r2, #0
 8000728:	d078      	beq.n	800081c <__aeabi_fadd+0x1ec>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4310      	orrs	r0, r2
 8000730:	0242      	lsls	r2, r0, #9
 8000732:	0a53      	lsrs	r3, r2, #9
 8000734:	469c      	mov	ip, r3
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	e7d9      	b.n	80006ee <__aeabi_fadd+0xbe>
 800073a:	1bb9      	subs	r1, r7, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	dd71      	ble.n	8000824 <__aeabi_fadd+0x1f4>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d03f      	beq.n	80007c4 <__aeabi_fadd+0x194>
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d0ee      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2201      	movs	r2, #1
 8000750:	291b      	cmp	r1, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x134>
 8000754:	002a      	movs	r2, r5
 8000756:	2320      	movs	r3, #32
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	408d      	lsls	r5, r1
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	432a      	orrs	r2, r5
 8000764:	4452      	add	r2, sl
 8000766:	0153      	lsls	r3, r2, #5
 8000768:	d553      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800076a:	3701      	adds	r7, #1
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d055      	beq.n	800081c <__aeabi_fadd+0x1ec>
 8000770:	2301      	movs	r3, #1
 8000772:	497b      	ldr	r1, [pc, #492]	; (8000960 <__aeabi_fadd+0x330>)
 8000774:	4013      	ands	r3, r2
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	e7a5      	b.n	80006ca <__aeabi_fadd+0x9a>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d02c      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	469c      	mov	ip, r3
 8000788:	44e1      	add	r9, ip
 800078a:	464b      	mov	r3, r9
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x162>
 8000790:	e0ad      	b.n	80008ee <__aeabi_fadd+0x2be>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x168>
 8000796:	e76e      	b.n	8000676 <__aeabi_fadd+0x46>
 8000798:	e7c5      	b.n	8000726 <__aeabi_fadd+0xf6>
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c7e      	adds	r6, r7, #1
 800079e:	4230      	tst	r0, r6
 80007a0:	d160      	bne.n	8000864 <__aeabi_fadd+0x234>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x178>
 80007a6:	e093      	b.n	80008d0 <__aeabi_fadd+0x2a0>
 80007a8:	4652      	mov	r2, sl
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x180>
 80007ae:	e0b6      	b.n	800091e <__aeabi_fadd+0x2ee>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d09c      	beq.n	80006ee <__aeabi_fadd+0xbe>
 80007b4:	1b52      	subs	r2, r2, r5
 80007b6:	0150      	lsls	r0, r2, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x18c>
 80007ba:	e0c3      	b.n	8000944 <__aeabi_fadd+0x314>
 80007bc:	4653      	mov	r3, sl
 80007be:	000c      	movs	r4, r1
 80007c0:	1aea      	subs	r2, r5, r3
 80007c2:	e782      	b.n	80006ca <__aeabi_fadd+0x9a>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d009      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 80007c8:	3901      	subs	r1, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x1a0>
 80007ce:	e08b      	b.n	80008e8 <__aeabi_fadd+0x2b8>
 80007d0:	2fff      	cmp	r7, #255	; 0xff
 80007d2:	d1bc      	bne.n	800074e <__aeabi_fadd+0x11e>
 80007d4:	e7a7      	b.n	8000726 <__aeabi_fadd+0xf6>
 80007d6:	000c      	movs	r4, r1
 80007d8:	4642      	mov	r2, r8
 80007da:	0037      	movs	r7, r6
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d0a2      	beq.n	8000726 <__aeabi_fadd+0xf6>
 80007e0:	0252      	lsls	r2, r2, #9
 80007e2:	0a53      	lsrs	r3, r2, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2fb      	uxtb	r3, r7
 80007e8:	e781      	b.n	80006ee <__aeabi_fadd+0xbe>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	3701      	adds	r7, #1
 80007ee:	4239      	tst	r1, r7
 80007f0:	d165      	bne.n	80008be <__aeabi_fadd+0x28e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17e      	bne.n	80008f4 <__aeabi_fadd+0x2c4>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1cc>
 80007fa:	e0aa      	b.n	8000952 <__aeabi_fadd+0x322>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x1d2>
 8000800:	e775      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000802:	002a      	movs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	2700      	movs	r7, #0
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d502      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <__aeabi_fadd+0x334>)
 800080e:	3701      	adds	r7, #1
 8000810:	401a      	ands	r2, r3
 8000812:	0753      	lsls	r3, r2, #29
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x1e8>
 8000816:	e75a      	b.n	80006ce <__aeabi_fadd+0x9e>
 8000818:	08d2      	lsrs	r2, r2, #3
 800081a:	e7df      	b.n	80007dc <__aeabi_fadd+0x1ac>
 800081c:	2200      	movs	r2, #0
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	4694      	mov	ip, r2
 8000822:	e764      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000824:	2900      	cmp	r1, #0
 8000826:	d0e0      	beq.n	80007ea <__aeabi_fadd+0x1ba>
 8000828:	1bf3      	subs	r3, r6, r7
 800082a:	2f00      	cmp	r7, #0
 800082c:	d03e      	beq.n	80008ac <__aeabi_fadd+0x27c>
 800082e:	2eff      	cmp	r6, #255	; 0xff
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x204>
 8000832:	e777      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0001      	movs	r1, r0
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4311      	orrs	r1, r2
 800083c:	468a      	mov	sl, r1
 800083e:	2201      	movs	r2, #1
 8000840:	2b1b      	cmp	r3, #27
 8000842:	dc08      	bgt.n	8000856 <__aeabi_fadd+0x226>
 8000844:	4652      	mov	r2, sl
 8000846:	2120      	movs	r1, #32
 8000848:	4650      	mov	r0, sl
 800084a:	40da      	lsrs	r2, r3
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	4098      	lsls	r0, r3
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4302      	orrs	r2, r0
 8000856:	0037      	movs	r7, r6
 8000858:	1952      	adds	r2, r2, r5
 800085a:	e784      	b.n	8000766 <__aeabi_fadd+0x136>
 800085c:	4a41      	ldr	r2, [pc, #260]	; (8000964 <__aeabi_fadd+0x334>)
 800085e:	1a3f      	subs	r7, r7, r0
 8000860:	4032      	ands	r2, r6
 8000862:	e732      	b.n	80006ca <__aeabi_fadd+0x9a>
 8000864:	4653      	mov	r3, sl
 8000866:	1b5e      	subs	r6, r3, r5
 8000868:	0173      	lsls	r3, r6, #5
 800086a:	d42d      	bmi.n	80008c8 <__aeabi_fadd+0x298>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fadd+0x242>
 8000870:	e717      	b.n	80006a2 <__aeabi_fadd+0x72>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	2300      	movs	r3, #0
 8000878:	4694      	mov	ip, r2
 800087a:	e738      	b.n	80006ee <__aeabi_fadd+0xbe>
 800087c:	2eff      	cmp	r6, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x252>
 8000880:	e74f      	b.n	8000722 <__aeabi_fadd+0xf2>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4650      	mov	r0, sl
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	4310      	orrs	r0, r2
 800088a:	4682      	mov	sl, r0
 800088c:	2201      	movs	r2, #1
 800088e:	2b1b      	cmp	r3, #27
 8000890:	dc08      	bgt.n	80008a4 <__aeabi_fadd+0x274>
 8000892:	4652      	mov	r2, sl
 8000894:	2420      	movs	r4, #32
 8000896:	4650      	mov	r0, sl
 8000898:	40da      	lsrs	r2, r3
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	4098      	lsls	r0, r3
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4302      	orrs	r2, r0
 80008a4:	000c      	movs	r4, r1
 80008a6:	0037      	movs	r7, r6
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	e6f5      	b.n	8000698 <__aeabi_fadd+0x68>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d093      	beq.n	80007d8 <__aeabi_fadd+0x1a8>
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04f      	beq.n	8000956 <__aeabi_fadd+0x326>
 80008b6:	2eff      	cmp	r6, #255	; 0xff
 80008b8:	d1c1      	bne.n	800083e <__aeabi_fadd+0x20e>
 80008ba:	4642      	mov	r2, r8
 80008bc:	e733      	b.n	8000726 <__aeabi_fadd+0xf6>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d0ac      	beq.n	800081c <__aeabi_fadd+0x1ec>
 80008c2:	4455      	add	r5, sl
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	e7a4      	b.n	8000812 <__aeabi_fadd+0x1e2>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aee      	subs	r6, r5, r3
 80008ce:	e6e8      	b.n	80006a2 <__aeabi_fadd+0x72>
 80008d0:	4653      	mov	r3, sl
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d128      	bne.n	8000928 <__aeabi_fadd+0x2f8>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x2ac>
 80008da:	e722      	b.n	8000722 <__aeabi_fadd+0xf2>
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	469c      	mov	ip, r3
 80008e2:	2400      	movs	r4, #0
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	e702      	b.n	80006ee <__aeabi_fadd+0xbe>
 80008e8:	002a      	movs	r2, r5
 80008ea:	4452      	add	r2, sl
 80008ec:	e73b      	b.n	8000766 <__aeabi_fadd+0x136>
 80008ee:	4653      	mov	r3, sl
 80008f0:	1b5a      	subs	r2, r3, r5
 80008f2:	e6d1      	b.n	8000698 <__aeabi_fadd+0x68>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x2ca>
 80008f8:	e714      	b.n	8000724 <__aeabi_fadd+0xf4>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2d0>
 80008fe:	e712      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	03db      	lsls	r3, r3, #15
 8000904:	421a      	tst	r2, r3
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x2da>
 8000908:	e70d      	b.n	8000726 <__aeabi_fadd+0xf6>
 800090a:	4641      	mov	r1, r8
 800090c:	4219      	tst	r1, r3
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x2e2>
 8000910:	e709      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000912:	4642      	mov	r2, r8
 8000914:	e707      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000916:	000c      	movs	r4, r1
 8000918:	0037      	movs	r7, r6
 800091a:	1aaa      	subs	r2, r5, r2
 800091c:	e6bc      	b.n	8000698 <__aeabi_fadd+0x68>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d013      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000922:	000c      	movs	r4, r1
 8000924:	46c4      	mov	ip, r8
 8000926:	e6e2      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2fe>
 800092c:	e6fb      	b.n	8000726 <__aeabi_fadd+0xf6>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	03db      	lsls	r3, r3, #15
 8000932:	421a      	tst	r2, r3
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x308>
 8000936:	e6f6      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000938:	4640      	mov	r0, r8
 800093a:	4218      	tst	r0, r3
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x310>
 800093e:	e6f2      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000940:	000c      	movs	r4, r1
 8000942:	e6ef      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000944:	2a00      	cmp	r2, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000948:	e763      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	4694      	mov	ip, r2
 8000950:	e6cd      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000952:	46c4      	mov	ip, r8
 8000954:	e6cb      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000956:	002a      	movs	r2, r5
 8000958:	0037      	movs	r7, r6
 800095a:	4452      	add	r2, sl
 800095c:	e703      	b.n	8000766 <__aeabi_fadd+0x136>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fdiv>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	464f      	mov	r7, r9
 800096c:	4646      	mov	r6, r8
 800096e:	46d6      	mov	lr, sl
 8000970:	0245      	lsls	r5, r0, #9
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	0047      	lsls	r7, r0, #1
 8000976:	1c0c      	adds	r4, r1, #0
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e3f      	lsrs	r7, r7, #24
 800097c:	0fc6      	lsrs	r6, r0, #31
 800097e:	2f00      	cmp	r7, #0
 8000980:	d066      	beq.n	8000a50 <__aeabi_fdiv+0xe8>
 8000982:	2fff      	cmp	r7, #255	; 0xff
 8000984:	d06c      	beq.n	8000a60 <__aeabi_fdiv+0xf8>
 8000986:	2300      	movs	r3, #0
 8000988:	00ea      	lsls	r2, r5, #3
 800098a:	2580      	movs	r5, #128	; 0x80
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	04ed      	lsls	r5, r5, #19
 8000992:	4315      	orrs	r5, r2
 8000994:	3f7f      	subs	r7, #127	; 0x7f
 8000996:	0260      	lsls	r0, r4, #9
 8000998:	0061      	lsls	r1, r4, #1
 800099a:	0a43      	lsrs	r3, r0, #9
 800099c:	4698      	mov	r8, r3
 800099e:	0e09      	lsrs	r1, r1, #24
 80009a0:	0fe4      	lsrs	r4, r4, #31
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d048      	beq.n	8000a38 <__aeabi_fdiv+0xd0>
 80009a6:	29ff      	cmp	r1, #255	; 0xff
 80009a8:	d010      	beq.n	80009cc <__aeabi_fdiv+0x64>
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	00d8      	lsls	r0, r3, #3
 80009ae:	04d2      	lsls	r2, r2, #19
 80009b0:	4302      	orrs	r2, r0
 80009b2:	4690      	mov	r8, r2
 80009b4:	2000      	movs	r0, #0
 80009b6:	397f      	subs	r1, #127	; 0x7f
 80009b8:	464a      	mov	r2, r9
 80009ba:	0033      	movs	r3, r6
 80009bc:	1a7f      	subs	r7, r7, r1
 80009be:	4302      	orrs	r2, r0
 80009c0:	496c      	ldr	r1, [pc, #432]	; (8000b74 <__aeabi_fdiv+0x20c>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	588a      	ldr	r2, [r1, r2]
 80009c6:	4063      	eors	r3, r4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4697      	mov	pc, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d16d      	bne.n	8000aac <__aeabi_fdiv+0x144>
 80009d0:	2002      	movs	r0, #2
 80009d2:	3fff      	subs	r7, #255	; 0xff
 80009d4:	e033      	b.n	8000a3e <__aeabi_fdiv+0xd6>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4698      	mov	r8, r3
 80009da:	0026      	movs	r6, r4
 80009dc:	4645      	mov	r5, r8
 80009de:	4682      	mov	sl, r0
 80009e0:	4653      	mov	r3, sl
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fdiv+0x80>
 80009e6:	e07f      	b.n	8000ae8 <__aeabi_fdiv+0x180>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d100      	bne.n	80009ee <__aeabi_fdiv+0x86>
 80009ec:	e094      	b.n	8000b18 <__aeabi_fdiv+0x1b0>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d017      	beq.n	8000a22 <__aeabi_fdiv+0xba>
 80009f2:	0038      	movs	r0, r7
 80009f4:	307f      	adds	r0, #127	; 0x7f
 80009f6:	2800      	cmp	r0, #0
 80009f8:	dd5f      	ble.n	8000aba <__aeabi_fdiv+0x152>
 80009fa:	076b      	lsls	r3, r5, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 80009fe:	230f      	movs	r3, #15
 8000a00:	402b      	ands	r3, r5
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 8000a06:	3504      	adds	r5, #4
 8000a08:	012b      	lsls	r3, r5, #4
 8000a0a:	d503      	bpl.n	8000a14 <__aeabi_fdiv+0xac>
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <__aeabi_fdiv+0x210>)
 8000a10:	3080      	adds	r0, #128	; 0x80
 8000a12:	401d      	ands	r5, r3
 8000a14:	28fe      	cmp	r0, #254	; 0xfe
 8000a16:	dc67      	bgt.n	8000ae8 <__aeabi_fdiv+0x180>
 8000a18:	01ad      	lsls	r5, r5, #6
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	b2c0      	uxtb	r0, r0
 8000a1e:	e002      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a20:	001e      	movs	r6, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	2500      	movs	r5, #0
 8000a26:	05c0      	lsls	r0, r0, #23
 8000a28:	4328      	orrs	r0, r5
 8000a2a:	07f6      	lsls	r6, r6, #31
 8000a2c:	4330      	orrs	r0, r6
 8000a2e:	bce0      	pop	{r5, r6, r7}
 8000a30:	46ba      	mov	sl, r7
 8000a32:	46b1      	mov	r9, r6
 8000a34:	46a8      	mov	r8, r5
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <__aeabi_fdiv+0x12c>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	464a      	mov	r2, r9
 8000a40:	0033      	movs	r3, r6
 8000a42:	494e      	ldr	r1, [pc, #312]	; (8000b7c <__aeabi_fdiv+0x214>)
 8000a44:	4302      	orrs	r2, r0
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	588a      	ldr	r2, [r1, r2]
 8000a4a:	4063      	eors	r3, r4
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4697      	mov	pc, r2
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d113      	bne.n	8000a7c <__aeabi_fdiv+0x114>
 8000a54:	2304      	movs	r3, #4
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e79a      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d105      	bne.n	8000a70 <__aeabi_fdiv+0x108>
 8000a64:	2308      	movs	r3, #8
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e792      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a70:	230c      	movs	r3, #12
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b09      	subs	r3, #9
 8000a76:	27ff      	movs	r7, #255	; 0xff
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e78c      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	f002 fba9 	bl	80031d4 <__clzsi2>
 8000a82:	2776      	movs	r7, #118	; 0x76
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409d      	lsls	r5, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	427f      	negs	r7, r7
 8000a8c:	4699      	mov	r9, r3
 8000a8e:	469a      	mov	sl, r3
 8000a90:	1a3f      	subs	r7, r7, r0
 8000a92:	e780      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fb9d 	bl	80031d4 <__clzsi2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	1f43      	subs	r3, r0, #5
 8000a9e:	2176      	movs	r1, #118	; 0x76
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	4690      	mov	r8, r2
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e785      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000aac:	21ff      	movs	r1, #255	; 0xff
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	20ff      	movs	r0, #255	; 0xff
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	e7b5      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aba:	2301      	movs	r3, #1
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	dcaf      	bgt.n	8000a22 <__aeabi_fdiv+0xba>
 8000ac2:	379e      	adds	r7, #158	; 0x9e
 8000ac4:	0029      	movs	r1, r5
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	1e6a      	subs	r2, r5, #1
 8000acc:	4195      	sbcs	r5, r2
 8000ace:	430d      	orrs	r5, r1
 8000ad0:	076b      	lsls	r3, r5, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	402b      	ands	r3, r5
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000adc:	3504      	adds	r5, #4
 8000ade:	016b      	lsls	r3, r5, #5
 8000ae0:	d544      	bpl.n	8000b6c <__aeabi_fdiv+0x204>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e79e      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	2500      	movs	r5, #0
 8000aec:	e79b      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aee:	2580      	movs	r5, #128	; 0x80
 8000af0:	2600      	movs	r6, #0
 8000af2:	20ff      	movs	r0, #255	; 0xff
 8000af4:	03ed      	lsls	r5, r5, #15
 8000af6:	e796      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000af8:	2300      	movs	r3, #0
 8000afa:	4698      	mov	r8, r3
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	03c0      	lsls	r0, r0, #15
 8000b00:	4205      	tst	r5, r0
 8000b02:	d009      	beq.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b04:	4643      	mov	r3, r8
 8000b06:	4203      	tst	r3, r0
 8000b08:	d106      	bne.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	4305      	orrs	r5, r0
 8000b0e:	026d      	lsls	r5, r5, #9
 8000b10:	0026      	movs	r6, r4
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e786      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b18:	2080      	movs	r0, #128	; 0x80
 8000b1a:	03c0      	lsls	r0, r0, #15
 8000b1c:	4305      	orrs	r5, r0
 8000b1e:	026d      	lsls	r5, r5, #9
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	0a6d      	lsrs	r5, r5, #9
 8000b24:	e77f      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b26:	4641      	mov	r1, r8
 8000b28:	016a      	lsls	r2, r5, #5
 8000b2a:	0148      	lsls	r0, r1, #5
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	d219      	bcs.n	8000b64 <__aeabi_fdiv+0x1fc>
 8000b30:	211b      	movs	r1, #27
 8000b32:	2500      	movs	r5, #0
 8000b34:	3f01      	subs	r7, #1
 8000b36:	2601      	movs	r6, #1
 8000b38:	0014      	movs	r4, r2
 8000b3a:	006d      	lsls	r5, r5, #1
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	db01      	blt.n	8000b46 <__aeabi_fdiv+0x1de>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d801      	bhi.n	8000b4a <__aeabi_fdiv+0x1e2>
 8000b46:	1a12      	subs	r2, r2, r0
 8000b48:	4335      	orrs	r5, r6
 8000b4a:	3901      	subs	r1, #1
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d1f3      	bne.n	8000b38 <__aeabi_fdiv+0x1d0>
 8000b50:	1e50      	subs	r0, r2, #1
 8000b52:	4182      	sbcs	r2, r0
 8000b54:	0038      	movs	r0, r7
 8000b56:	307f      	adds	r0, #127	; 0x7f
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4315      	orrs	r5, r2
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_fdiv+0x1fa>
 8000b60:	e74b      	b.n	80009fa <__aeabi_fdiv+0x92>
 8000b62:	e7aa      	b.n	8000aba <__aeabi_fdiv+0x152>
 8000b64:	211a      	movs	r1, #26
 8000b66:	2501      	movs	r5, #1
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	e7e4      	b.n	8000b36 <__aeabi_fdiv+0x1ce>
 8000b6c:	01ad      	lsls	r5, r5, #6
 8000b6e:	2000      	movs	r0, #0
 8000b70:	0a6d      	lsrs	r5, r5, #9
 8000b72:	e758      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b74:	08013bb4 	.word	0x08013bb4
 8000b78:	f7ffffff 	.word	0xf7ffffff
 8000b7c:	08013bf4 	.word	0x08013bf4

08000b80 <__eqsf2>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	024e      	lsls	r6, r1, #9
 8000b86:	004c      	lsls	r4, r1, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__eqsf2+0x3a>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d011      	beq.n	8000bc2 <__eqsf2+0x42>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	d000      	beq.n	8000ba6 <__eqsf2+0x26>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x24>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d00d      	beq.n	8000bca <__eqsf2+0x4a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1e45      	subs	r5, r0, #1
 8000bb6:	41a8      	sbcs	r0, r5
 8000bb8:	e7f4      	b.n	8000ba4 <__eqsf2+0x24>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc0:	e7eb      	b.n	8000b9a <__eqsf2+0x1a>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc8:	e7e9      	b.n	8000b9e <__eqsf2+0x1e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__eqsf2+0x24>
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__gesf2>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0246      	lsls	r6, r0, #9
 8000bd6:	024d      	lsls	r5, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01f      	beq.n	8000c2a <__gesf2+0x5a>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d010      	beq.n	8000c10 <__gesf2+0x40>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11f      	bne.n	8000c32 <__gesf2+0x62>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d101      	bne.n	8000bfe <__gesf2+0x2e>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d01e      	beq.n	8000c3c <__gesf2+0x6c>
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d10e      	bne.n	8000c20 <__gesf2+0x50>
 8000c02:	4283      	cmp	r3, r0
 8000c04:	d01e      	beq.n	8000c44 <__gesf2+0x74>
 8000c06:	2102      	movs	r1, #2
 8000c08:	1e58      	subs	r0, r3, #1
 8000c0a:	4008      	ands	r0, r1
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d126      	bne.n	8000c62 <__gesf2+0x92>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f4      	bne.n	8000c02 <__gesf2+0x32>
 8000c18:	4271      	negs	r1, r6
 8000c1a:	4171      	adcs	r1, r6
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d0f0      	beq.n	8000c02 <__gesf2+0x32>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f4      	bne.n	8000c0e <__gesf2+0x3e>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f1      	b.n	8000c0e <__gesf2+0x3e>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d119      	bne.n	8000c62 <__gesf2+0x92>
 8000c2e:	2cff      	cmp	r4, #255	; 0xff
 8000c30:	d0ee      	beq.n	8000c10 <__gesf2+0x40>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d1e5      	bne.n	8000c02 <__gesf2+0x32>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d1e3      	bne.n	8000c02 <__gesf2+0x32>
 8000c3a:	e7e4      	b.n	8000c06 <__gesf2+0x36>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0e5      	beq.n	8000c0e <__gesf2+0x3e>
 8000c42:	e7e0      	b.n	8000c06 <__gesf2+0x36>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__gesf2+0x84>
 8000c48:	dbea      	blt.n	8000c20 <__gesf2+0x50>
 8000c4a:	42ae      	cmp	r6, r5
 8000c4c:	d802      	bhi.n	8000c54 <__gesf2+0x84>
 8000c4e:	d3e7      	bcc.n	8000c20 <__gesf2+0x50>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7dc      	b.n	8000c0e <__gesf2+0x3e>
 8000c54:	4241      	negs	r1, r0
 8000c56:	4141      	adcs	r1, r0
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4008      	ands	r0, r1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7d5      	b.n	8000c0e <__gesf2+0x3e>
 8000c62:	2002      	movs	r0, #2
 8000c64:	4240      	negs	r0, r0
 8000c66:	e7d2      	b.n	8000c0e <__gesf2+0x3e>

08000c68 <__lesf2>:
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	0246      	lsls	r6, r0, #9
 8000c6e:	024d      	lsls	r5, r1, #9
 8000c70:	004c      	lsls	r4, r1, #1
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	0a6d      	lsrs	r5, r5, #9
 8000c7a:	0e24      	lsrs	r4, r4, #24
 8000c7c:	0fc8      	lsrs	r0, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	; 0xff
 8000c80:	d00d      	beq.n	8000c9e <__lesf2+0x36>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d00f      	beq.n	8000ca6 <__lesf2+0x3e>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d123      	bne.n	8000cd2 <__lesf2+0x6a>
 8000c8a:	4271      	negs	r1, r6
 8000c8c:	4171      	adcs	r1, r6
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d10f      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d10d      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c96:	2000      	movs	r0, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d014      	beq.n	8000cc6 <__lesf2+0x5e>
 8000c9c:	e00d      	b.n	8000cba <__lesf2+0x52>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d110      	bne.n	8000cc4 <__lesf2+0x5c>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d115      	bne.n	8000cd2 <__lesf2+0x6a>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d10c      	bne.n	8000cc4 <__lesf2+0x5c>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d103      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cae:	4271      	negs	r1, r6
 8000cb0:	4171      	adcs	r1, r6
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d108      	bne.n	8000cc8 <__lesf2+0x60>
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	d010      	beq.n	8000cdc <__lesf2+0x74>
 8000cba:	2102      	movs	r1, #2
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	4008      	ands	r0, r1
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e000      	b.n	8000cc6 <__lesf2+0x5e>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d1fc      	bne.n	8000cc6 <__lesf2+0x5e>
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4240      	negs	r0, r0
 8000cd0:	e7f9      	b.n	8000cc6 <__lesf2+0x5e>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d1ef      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d1ed      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cda:	e7ee      	b.n	8000cba <__lesf2+0x52>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	dc05      	bgt.n	8000cec <__lesf2+0x84>
 8000ce0:	dbf2      	blt.n	8000cc8 <__lesf2+0x60>
 8000ce2:	42ae      	cmp	r6, r5
 8000ce4:	d802      	bhi.n	8000cec <__lesf2+0x84>
 8000ce6:	d3ef      	bcc.n	8000cc8 <__lesf2+0x60>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7ec      	b.n	8000cc6 <__lesf2+0x5e>
 8000cec:	4241      	negs	r1, r0
 8000cee:	4141      	adcs	r1, r0
 8000cf0:	4248      	negs	r0, r1
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4008      	ands	r0, r1
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	e7e5      	b.n	8000cc6 <__lesf2+0x5e>
 8000cfa:	46c0      	nop			; (mov r8, r8)

08000cfc <__aeabi_fmul>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	0244      	lsls	r4, r0, #9
 8000d08:	b5e0      	push	{r5, r6, r7, lr}
 8000d0a:	0045      	lsls	r5, r0, #1
 8000d0c:	1c0f      	adds	r7, r1, #0
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	0e2d      	lsrs	r5, r5, #24
 8000d12:	0fc6      	lsrs	r6, r0, #31
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d047      	beq.n	8000da8 <__aeabi_fmul+0xac>
 8000d18:	2dff      	cmp	r5, #255	; 0xff
 8000d1a:	d04d      	beq.n	8000db8 <__aeabi_fmul+0xbc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	469a      	mov	sl, r3
 8000d22:	469b      	mov	fp, r3
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	04c0      	lsls	r0, r0, #19
 8000d28:	4304      	orrs	r4, r0
 8000d2a:	3d7f      	subs	r5, #127	; 0x7f
 8000d2c:	0278      	lsls	r0, r7, #9
 8000d2e:	0a43      	lsrs	r3, r0, #9
 8000d30:	4699      	mov	r9, r3
 8000d32:	007a      	lsls	r2, r7, #1
 8000d34:	0ffb      	lsrs	r3, r7, #31
 8000d36:	4698      	mov	r8, r3
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	d044      	beq.n	8000dc8 <__aeabi_fmul+0xcc>
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d011      	beq.n	8000d66 <__aeabi_fmul+0x6a>
 8000d42:	00d8      	lsls	r0, r3, #3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	04db      	lsls	r3, r3, #19
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	18ad      	adds	r5, r5, r2
 8000d52:	4647      	mov	r7, r8
 8000d54:	4653      	mov	r3, sl
 8000d56:	4077      	eors	r7, r6
 8000d58:	1c69      	adds	r1, r5, #1
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d83f      	bhi.n	8000dde <__aeabi_fmul+0xe2>
 8000d5e:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <__aeabi_fmul+0x22c>)
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	58d3      	ldr	r3, [r2, r3]
 8000d64:	469f      	mov	pc, r3
 8000d66:	35ff      	adds	r5, #255	; 0xff
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x72>
 8000d6c:	e079      	b.n	8000e62 <__aeabi_fmul+0x166>
 8000d6e:	4652      	mov	r2, sl
 8000d70:	2302      	movs	r3, #2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	4692      	mov	sl, r2
 8000d76:	2002      	movs	r0, #2
 8000d78:	e7eb      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	4683      	mov	fp, r0
 8000d80:	465b      	mov	r3, fp
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d028      	beq.n	8000dd8 <__aeabi_fmul+0xdc>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x90>
 8000d8a:	e0c6      	b.n	8000f1a <__aeabi_fmul+0x21e>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d14f      	bne.n	8000e30 <__aeabi_fmul+0x134>
 8000d90:	2000      	movs	r0, #0
 8000d92:	2400      	movs	r4, #0
 8000d94:	05c0      	lsls	r0, r0, #23
 8000d96:	07ff      	lsls	r7, r7, #31
 8000d98:	4320      	orrs	r0, r4
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9e:	46bb      	mov	fp, r7
 8000da0:	46b2      	mov	sl, r6
 8000da2:	46a9      	mov	r9, r5
 8000da4:	46a0      	mov	r8, r4
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d171      	bne.n	8000e90 <__aeabi_fmul+0x194>
 8000dac:	2304      	movs	r3, #4
 8000dae:	469a      	mov	sl, r3
 8000db0:	3b03      	subs	r3, #3
 8000db2:	2500      	movs	r5, #0
 8000db4:	469b      	mov	fp, r3
 8000db6:	e7b9      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d163      	bne.n	8000e84 <__aeabi_fmul+0x188>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	3b06      	subs	r3, #6
 8000dc2:	25ff      	movs	r5, #255	; 0xff
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e7b1      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d150      	bne.n	8000e6e <__aeabi_fmul+0x172>
 8000dcc:	4652      	mov	r2, sl
 8000dce:	3301      	adds	r3, #1
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7bc      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	2400      	movs	r4, #0
 8000ddc:	e7da      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000dde:	4648      	mov	r0, r9
 8000de0:	0c26      	lsrs	r6, r4, #16
 8000de2:	0424      	lsls	r4, r4, #16
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	0404      	lsls	r4, r0, #16
 8000de8:	0c24      	lsrs	r4, r4, #16
 8000dea:	464b      	mov	r3, r9
 8000dec:	0020      	movs	r0, r4
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4350      	muls	r0, r2
 8000df2:	4374      	muls	r4, r6
 8000df4:	435a      	muls	r2, r3
 8000df6:	435e      	muls	r6, r3
 8000df8:	1912      	adds	r2, r2, r4
 8000dfa:	0c03      	lsrs	r3, r0, #16
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	d903      	bls.n	8000e0a <__aeabi_fmul+0x10e>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0252      	lsls	r2, r2, #9
 8000e06:	4694      	mov	ip, r2
 8000e08:	4466      	add	r6, ip
 8000e0a:	0400      	lsls	r0, r0, #16
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	0c00      	lsrs	r0, r0, #16
 8000e10:	1812      	adds	r2, r2, r0
 8000e12:	0194      	lsls	r4, r2, #6
 8000e14:	1e60      	subs	r0, r4, #1
 8000e16:	4184      	sbcs	r4, r0
 8000e18:	0c1b      	lsrs	r3, r3, #16
 8000e1a:	0e92      	lsrs	r2, r2, #26
 8000e1c:	199b      	adds	r3, r3, r6
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	d572      	bpl.n	8000f0e <__aeabi_fmul+0x212>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	0863      	lsrs	r3, r4, #1
 8000e2c:	4004      	ands	r4, r0
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0008      	movs	r0, r1
 8000e32:	307f      	adds	r0, #127	; 0x7f
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dd3c      	ble.n	8000eb2 <__aeabi_fmul+0x1b6>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x156>
 8000e4a:	3180      	adds	r1, #128	; 0x80
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <__aeabi_fmul+0x230>)
 8000e50:	401c      	ands	r4, r3
 8000e52:	28fe      	cmp	r0, #254	; 0xfe
 8000e54:	dcc0      	bgt.n	8000dd8 <__aeabi_fmul+0xdc>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2c0      	uxtb	r0, r0
 8000e5c:	e79a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000e5e:	0037      	movs	r7, r6
 8000e60:	e78e      	b.n	8000d80 <__aeabi_fmul+0x84>
 8000e62:	4652      	mov	r2, sl
 8000e64:	2303      	movs	r3, #3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	4692      	mov	sl, r2
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e771      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e6e:	4648      	mov	r0, r9
 8000e70:	f002 f9b0 	bl	80031d4 <__clzsi2>
 8000e74:	464a      	mov	r2, r9
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	1a2d      	subs	r5, r5, r0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	2000      	movs	r0, #0
 8000e80:	3d76      	subs	r5, #118	; 0x76
 8000e82:	e766      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e84:	230c      	movs	r3, #12
 8000e86:	469a      	mov	sl, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f002 f99f 	bl	80031d4 <__clzsi2>
 8000e96:	2576      	movs	r5, #118	; 0x76
 8000e98:	1f43      	subs	r3, r0, #5
 8000e9a:	409c      	lsls	r4, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	1a2d      	subs	r5, r5, r0
 8000ea6:	e741      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	2700      	movs	r7, #0
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	03e4      	lsls	r4, r4, #15
 8000eb0:	e770      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	1a1b      	subs	r3, r3, r0
 8000eb6:	2b1b      	cmp	r3, #27
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_fmul+0x1c0>
 8000eba:	e769      	b.n	8000d90 <__aeabi_fmul+0x94>
 8000ebc:	319e      	adds	r1, #158	; 0x9e
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	0763      	lsls	r3, r4, #29
 8000ecc:	d004      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ece:	230f      	movs	r3, #15
 8000ed0:	4023      	ands	r3, r4
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ed6:	3404      	adds	r4, #4
 8000ed8:	0163      	lsls	r3, r4, #5
 8000eda:	d51a      	bpl.n	8000f12 <__aeabi_fmul+0x216>
 8000edc:	2001      	movs	r0, #1
 8000ede:	2400      	movs	r4, #0
 8000ee0:	e758      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	03c0      	lsls	r0, r0, #15
 8000ee6:	4204      	tst	r4, r0
 8000ee8:	d009      	beq.n	8000efe <__aeabi_fmul+0x202>
 8000eea:	464b      	mov	r3, r9
 8000eec:	4203      	tst	r3, r0
 8000eee:	d106      	bne.n	8000efe <__aeabi_fmul+0x202>
 8000ef0:	464c      	mov	r4, r9
 8000ef2:	4304      	orrs	r4, r0
 8000ef4:	0264      	lsls	r4, r4, #9
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	20ff      	movs	r0, #255	; 0xff
 8000efa:	0a64      	lsrs	r4, r4, #9
 8000efc:	e74a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	03c0      	lsls	r0, r0, #15
 8000f02:	4304      	orrs	r4, r0
 8000f04:	0264      	lsls	r4, r4, #9
 8000f06:	0037      	movs	r7, r6
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	e742      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f0e:	0029      	movs	r1, r5
 8000f10:	e78e      	b.n	8000e30 <__aeabi_fmul+0x134>
 8000f12:	01a4      	lsls	r4, r4, #6
 8000f14:	2000      	movs	r0, #0
 8000f16:	0a64      	lsrs	r4, r4, #9
 8000f18:	e73c      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	03c0      	lsls	r0, r0, #15
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	0a64      	lsrs	r4, r4, #9
 8000f26:	e735      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f28:	08013c34 	.word	0x08013c34
 8000f2c:	f7ffffff 	.word	0xf7ffffff

08000f30 <__aeabi_fsub>:
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	4646      	mov	r6, r8
 8000f34:	46d6      	mov	lr, sl
 8000f36:	464f      	mov	r7, r9
 8000f38:	0243      	lsls	r3, r0, #9
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4694      	mov	ip, r2
 8000f40:	024a      	lsls	r2, r1, #9
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	0044      	lsls	r4, r0, #1
 8000f46:	0a56      	lsrs	r6, r2, #9
 8000f48:	1c05      	adds	r5, r0, #0
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	0e24      	lsrs	r4, r4, #24
 8000f4e:	004e      	lsls	r6, r1, #1
 8000f50:	0992      	lsrs	r2, r2, #6
 8000f52:	001f      	movs	r7, r3
 8000f54:	0020      	movs	r0, r4
 8000f56:	4692      	mov	sl, r2
 8000f58:	0fed      	lsrs	r5, r5, #31
 8000f5a:	0e36      	lsrs	r6, r6, #24
 8000f5c:	0fc9      	lsrs	r1, r1, #31
 8000f5e:	2eff      	cmp	r6, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x34>
 8000f62:	e07f      	b.n	8001064 <__aeabi_fsub+0x134>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4051      	eors	r1, r2
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d051      	beq.n	8001010 <__aeabi_fsub+0xe0>
 8000f6c:	1ba2      	subs	r2, r4, r6
 8000f6e:	4691      	mov	r9, r2
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_fsub+0x46>
 8000f74:	e07e      	b.n	8001074 <__aeabi_fsub+0x144>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x4c>
 8000f7a:	e099      	b.n	80010b0 <__aeabi_fsub+0x180>
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x52>
 8000f80:	e08c      	b.n	800109c <__aeabi_fsub+0x16c>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4652      	mov	r2, sl
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4692      	mov	sl, r2
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2a1b      	cmp	r2, #27
 8000f92:	dc08      	bgt.n	8000fa6 <__aeabi_fsub+0x76>
 8000f94:	4653      	mov	r3, sl
 8000f96:	2120      	movs	r1, #32
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	408a      	lsls	r2, r1
 8000fa0:	1e51      	subs	r1, r2, #1
 8000fa2:	418a      	sbcs	r2, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	d400      	bmi.n	8000fb0 <__aeabi_fsub+0x80>
 8000fae:	e0f3      	b.n	8001198 <__aeabi_fsub+0x268>
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	099e      	lsrs	r6, r3, #6
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	f002 f90d 	bl	80031d4 <__clzsi2>
 8000fba:	3805      	subs	r0, #5
 8000fbc:	4086      	lsls	r6, r0
 8000fbe:	4284      	cmp	r4, r0
 8000fc0:	dd00      	ble.n	8000fc4 <__aeabi_fsub+0x94>
 8000fc2:	e0f7      	b.n	80011b4 <__aeabi_fsub+0x284>
 8000fc4:	0032      	movs	r2, r6
 8000fc6:	1b04      	subs	r4, r0, r4
 8000fc8:	2020      	movs	r0, #32
 8000fca:	3401      	adds	r4, #1
 8000fcc:	40e2      	lsrs	r2, r4
 8000fce:	1b04      	subs	r4, r0, r4
 8000fd0:	40a6      	lsls	r6, r4
 8000fd2:	0033      	movs	r3, r6
 8000fd4:	1e5e      	subs	r6, r3, #1
 8000fd6:	41b3      	sbcs	r3, r6
 8000fd8:	2400      	movs	r4, #0
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	d004      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	2a04      	cmp	r2, #4
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe8:	3304      	adds	r3, #4
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0xc0>
 8000fee:	e0d6      	b.n	800119e <__aeabi_fsub+0x26e>
 8000ff0:	1c62      	adds	r2, r4, #1
 8000ff2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0xc8>
 8000ff6:	e0da      	b.n	80011ae <__aeabi_fsub+0x27e>
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	0a5f      	lsrs	r7, r3, #9
 8000ffc:	b2d0      	uxtb	r0, r2
 8000ffe:	05c0      	lsls	r0, r0, #23
 8001000:	4338      	orrs	r0, r7
 8001002:	07ed      	lsls	r5, r5, #31
 8001004:	4328      	orrs	r0, r5
 8001006:	bce0      	pop	{r5, r6, r7}
 8001008:	46ba      	mov	sl, r7
 800100a:	46b1      	mov	r9, r6
 800100c:	46a8      	mov	r8, r5
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1ba2      	subs	r2, r4, r6
 8001012:	4691      	mov	r9, r2
 8001014:	2a00      	cmp	r2, #0
 8001016:	dd63      	ble.n	80010e0 <__aeabi_fsub+0x1b0>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0xee>
 800101c:	e099      	b.n	8001152 <__aeabi_fsub+0x222>
 800101e:	2cff      	cmp	r4, #255	; 0xff
 8001020:	d03c      	beq.n	800109c <__aeabi_fsub+0x16c>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4652      	mov	r2, sl
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	431a      	orrs	r2, r3
 800102a:	4692      	mov	sl, r2
 800102c:	464a      	mov	r2, r9
 800102e:	2301      	movs	r3, #1
 8001030:	2a1b      	cmp	r2, #27
 8001032:	dc08      	bgt.n	8001046 <__aeabi_fsub+0x116>
 8001034:	4653      	mov	r3, sl
 8001036:	2120      	movs	r1, #32
 8001038:	40d3      	lsrs	r3, r2
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4652      	mov	r2, sl
 800103e:	408a      	lsls	r2, r1
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	418a      	sbcs	r2, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	4463      	add	r3, ip
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	d400      	bmi.n	800104e <__aeabi_fsub+0x11e>
 800104c:	e0a4      	b.n	8001198 <__aeabi_fsub+0x268>
 800104e:	3401      	adds	r4, #1
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x126>
 8001054:	e0ab      	b.n	80011ae <__aeabi_fsub+0x27e>
 8001056:	2201      	movs	r2, #1
 8001058:	4997      	ldr	r1, [pc, #604]	; (80012b8 <__aeabi_fsub+0x388>)
 800105a:	401a      	ands	r2, r3
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	400b      	ands	r3, r1
 8001060:	4313      	orrs	r3, r2
 8001062:	e7bb      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d032      	beq.n	80010ce <__aeabi_fsub+0x19e>
 8001068:	428d      	cmp	r5, r1
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	4252      	negs	r2, r2
 8001070:	4691      	mov	r9, r2
 8001072:	44a1      	add	r9, r4
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d051      	beq.n	800111e <__aeabi_fsub+0x1ee>
 800107a:	1b30      	subs	r0, r6, r4
 800107c:	2c00      	cmp	r4, #0
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x152>
 8001080:	e09c      	b.n	80011bc <__aeabi_fsub+0x28c>
 8001082:	4663      	mov	r3, ip
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x15a>
 8001088:	e0df      	b.n	800124a <__aeabi_fsub+0x31a>
 800108a:	3801      	subs	r0, #1
 800108c:	2800      	cmp	r0, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x162>
 8001090:	e0f7      	b.n	8001282 <__aeabi_fsub+0x352>
 8001092:	2eff      	cmp	r6, #255	; 0xff
 8001094:	d000      	beq.n	8001098 <__aeabi_fsub+0x168>
 8001096:	e099      	b.n	80011cc <__aeabi_fsub+0x29c>
 8001098:	000d      	movs	r5, r1
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x172>
 80010a0:	e085      	b.n	80011ae <__aeabi_fsub+0x27e>
 80010a2:	2780      	movs	r7, #128	; 0x80
 80010a4:	03ff      	lsls	r7, r7, #15
 80010a6:	431f      	orrs	r7, r3
 80010a8:	027f      	lsls	r7, r7, #9
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a7f      	lsrs	r7, r7, #9
 80010ae:	e7a6      	b.n	8000ffe <__aeabi_fsub+0xce>
 80010b0:	4652      	mov	r2, sl
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d074      	beq.n	80011a0 <__aeabi_fsub+0x270>
 80010b6:	2201      	movs	r2, #1
 80010b8:	4252      	negs	r2, r2
 80010ba:	4690      	mov	r8, r2
 80010bc:	44c1      	add	r9, r8
 80010be:	464a      	mov	r2, r9
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x196>
 80010c4:	e0c8      	b.n	8001258 <__aeabi_fsub+0x328>
 80010c6:	2cff      	cmp	r4, #255	; 0xff
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x19c>
 80010ca:	e75f      	b.n	8000f8c <__aeabi_fsub+0x5c>
 80010cc:	e7e6      	b.n	800109c <__aeabi_fsub+0x16c>
 80010ce:	2201      	movs	r2, #1
 80010d0:	4051      	eors	r1, r2
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x3c>
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	4252      	negs	r2, r2
 80010dc:	4691      	mov	r9, r2
 80010de:	44a1      	add	r9, r4
 80010e0:	464a      	mov	r2, r9
 80010e2:	2a00      	cmp	r2, #0
 80010e4:	d043      	beq.n	800116e <__aeabi_fsub+0x23e>
 80010e6:	1b31      	subs	r1, r6, r4
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x1be>
 80010ec:	e08c      	b.n	8001208 <__aeabi_fsub+0x2d8>
 80010ee:	2eff      	cmp	r6, #255	; 0xff
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1c4>
 80010f2:	e092      	b.n	800121a <__aeabi_fsub+0x2ea>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	4662      	mov	r2, ip
 80010f8:	04db      	lsls	r3, r3, #19
 80010fa:	431a      	orrs	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	2301      	movs	r3, #1
 8001100:	291b      	cmp	r1, #27
 8001102:	dc09      	bgt.n	8001118 <__aeabi_fsub+0x1e8>
 8001104:	2020      	movs	r0, #32
 8001106:	4663      	mov	r3, ip
 8001108:	4662      	mov	r2, ip
 800110a:	40cb      	lsrs	r3, r1
 800110c:	1a41      	subs	r1, r0, r1
 800110e:	408a      	lsls	r2, r1
 8001110:	0011      	movs	r1, r2
 8001112:	1e48      	subs	r0, r1, #1
 8001114:	4181      	sbcs	r1, r0
 8001116:	430b      	orrs	r3, r1
 8001118:	0034      	movs	r4, r6
 800111a:	4453      	add	r3, sl
 800111c:	e794      	b.n	8001048 <__aeabi_fsub+0x118>
 800111e:	22fe      	movs	r2, #254	; 0xfe
 8001120:	1c66      	adds	r6, r4, #1
 8001122:	4232      	tst	r2, r6
 8001124:	d164      	bne.n	80011f0 <__aeabi_fsub+0x2c0>
 8001126:	2c00      	cmp	r4, #0
 8001128:	d000      	beq.n	800112c <__aeabi_fsub+0x1fc>
 800112a:	e082      	b.n	8001232 <__aeabi_fsub+0x302>
 800112c:	4663      	mov	r3, ip
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x204>
 8001132:	e0ab      	b.n	800128c <__aeabi_fsub+0x35c>
 8001134:	4653      	mov	r3, sl
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x20c>
 800113a:	e760      	b.n	8000ffe <__aeabi_fsub+0xce>
 800113c:	4663      	mov	r3, ip
 800113e:	4652      	mov	r2, sl
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d400      	bmi.n	8001148 <__aeabi_fsub+0x218>
 8001146:	e0aa      	b.n	800129e <__aeabi_fsub+0x36e>
 8001148:	4663      	mov	r3, ip
 800114a:	4652      	mov	r2, sl
 800114c:	000d      	movs	r5, r1
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	e744      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001152:	4652      	mov	r2, sl
 8001154:	2a00      	cmp	r2, #0
 8001156:	d023      	beq.n	80011a0 <__aeabi_fsub+0x270>
 8001158:	2201      	movs	r2, #1
 800115a:	4252      	negs	r2, r2
 800115c:	4690      	mov	r8, r2
 800115e:	44c1      	add	r9, r8
 8001160:	464a      	mov	r2, r9
 8001162:	2a00      	cmp	r2, #0
 8001164:	d075      	beq.n	8001252 <__aeabi_fsub+0x322>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x23c>
 800116a:	e75f      	b.n	800102c <__aeabi_fsub+0xfc>
 800116c:	e796      	b.n	800109c <__aeabi_fsub+0x16c>
 800116e:	26fe      	movs	r6, #254	; 0xfe
 8001170:	3401      	adds	r4, #1
 8001172:	4226      	tst	r6, r4
 8001174:	d153      	bne.n	800121e <__aeabi_fsub+0x2ee>
 8001176:	2800      	cmp	r0, #0
 8001178:	d172      	bne.n	8001260 <__aeabi_fsub+0x330>
 800117a:	4663      	mov	r3, ip
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x252>
 8001180:	e093      	b.n	80012aa <__aeabi_fsub+0x37a>
 8001182:	4653      	mov	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x25a>
 8001188:	e739      	b.n	8000ffe <__aeabi_fsub+0xce>
 800118a:	4463      	add	r3, ip
 800118c:	2400      	movs	r4, #0
 800118e:	015a      	lsls	r2, r3, #5
 8001190:	d502      	bpl.n	8001198 <__aeabi_fsub+0x268>
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <__aeabi_fsub+0x38c>)
 8001194:	3401      	adds	r4, #1
 8001196:	4013      	ands	r3, r2
 8001198:	075a      	lsls	r2, r3, #29
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0x26e>
 800119c:	e720      	b.n	8000fe0 <__aeabi_fsub+0xb0>
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	2cff      	cmp	r4, #255	; 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x276>
 80011a4:	e77a      	b.n	800109c <__aeabi_fsub+0x16c>
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	0a5f      	lsrs	r7, r3, #9
 80011aa:	b2e0      	uxtb	r0, r4
 80011ac:	e727      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	2700      	movs	r7, #0
 80011b2:	e724      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <__aeabi_fsub+0x38c>)
 80011b6:	1a24      	subs	r4, r4, r0
 80011b8:	4033      	ands	r3, r6
 80011ba:	e70f      	b.n	8000fdc <__aeabi_fsub+0xac>
 80011bc:	2eff      	cmp	r6, #255	; 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x292>
 80011c0:	e76a      	b.n	8001098 <__aeabi_fsub+0x168>
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	4662      	mov	r2, ip
 80011c6:	04db      	lsls	r3, r3, #19
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4694      	mov	ip, r2
 80011cc:	2301      	movs	r3, #1
 80011ce:	281b      	cmp	r0, #27
 80011d0:	dc09      	bgt.n	80011e6 <__aeabi_fsub+0x2b6>
 80011d2:	2420      	movs	r4, #32
 80011d4:	4663      	mov	r3, ip
 80011d6:	4662      	mov	r2, ip
 80011d8:	40c3      	lsrs	r3, r0
 80011da:	1a20      	subs	r0, r4, r0
 80011dc:	4082      	lsls	r2, r0
 80011de:	0010      	movs	r0, r2
 80011e0:	1e44      	subs	r4, r0, #1
 80011e2:	41a0      	sbcs	r0, r4
 80011e4:	4303      	orrs	r3, r0
 80011e6:	4652      	mov	r2, sl
 80011e8:	000d      	movs	r5, r1
 80011ea:	0034      	movs	r4, r6
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	e6dc      	b.n	8000faa <__aeabi_fsub+0x7a>
 80011f0:	4663      	mov	r3, ip
 80011f2:	4652      	mov	r2, sl
 80011f4:	1a9e      	subs	r6, r3, r2
 80011f6:	0173      	lsls	r3, r6, #5
 80011f8:	d417      	bmi.n	800122a <__aeabi_fsub+0x2fa>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d000      	beq.n	8001200 <__aeabi_fsub+0x2d0>
 80011fe:	e6d9      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001200:	2500      	movs	r5, #0
 8001202:	2000      	movs	r0, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e6fa      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <__aeabi_fsub+0x368>
 800120e:	3901      	subs	r1, #1
 8001210:	2900      	cmp	r1, #0
 8001212:	d04c      	beq.n	80012ae <__aeabi_fsub+0x37e>
 8001214:	2eff      	cmp	r6, #255	; 0xff
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001218:	e771      	b.n	80010fe <__aeabi_fsub+0x1ce>
 800121a:	4643      	mov	r3, r8
 800121c:	e73e      	b.n	800109c <__aeabi_fsub+0x16c>
 800121e:	2cff      	cmp	r4, #255	; 0xff
 8001220:	d0c5      	beq.n	80011ae <__aeabi_fsub+0x27e>
 8001222:	4652      	mov	r2, sl
 8001224:	4462      	add	r2, ip
 8001226:	0853      	lsrs	r3, r2, #1
 8001228:	e7b6      	b.n	8001198 <__aeabi_fsub+0x268>
 800122a:	4663      	mov	r3, ip
 800122c:	000d      	movs	r5, r1
 800122e:	1ad6      	subs	r6, r2, r3
 8001230:	e6c0      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001232:	4662      	mov	r2, ip
 8001234:	2a00      	cmp	r2, #0
 8001236:	d116      	bne.n	8001266 <__aeabi_fsub+0x336>
 8001238:	4653      	mov	r3, sl
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x310>
 800123e:	e72b      	b.n	8001098 <__aeabi_fsub+0x168>
 8001240:	2780      	movs	r7, #128	; 0x80
 8001242:	2500      	movs	r5, #0
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	03ff      	lsls	r7, r7, #15
 8001248:	e6d9      	b.n	8000ffe <__aeabi_fsub+0xce>
 800124a:	000d      	movs	r5, r1
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e7a6      	b.n	80011a0 <__aeabi_fsub+0x270>
 8001252:	4653      	mov	r3, sl
 8001254:	4463      	add	r3, ip
 8001256:	e6f7      	b.n	8001048 <__aeabi_fsub+0x118>
 8001258:	4663      	mov	r3, ip
 800125a:	4652      	mov	r2, sl
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	e6a4      	b.n	8000faa <__aeabi_fsub+0x7a>
 8001260:	4662      	mov	r2, ip
 8001262:	2a00      	cmp	r2, #0
 8001264:	d0d9      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001266:	4652      	mov	r2, sl
 8001268:	2a00      	cmp	r2, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x33e>
 800126c:	e716      	b.n	800109c <__aeabi_fsub+0x16c>
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	03d2      	lsls	r2, r2, #15
 8001272:	4213      	tst	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x348>
 8001276:	e711      	b.n	800109c <__aeabi_fsub+0x16c>
 8001278:	4640      	mov	r0, r8
 800127a:	4210      	tst	r0, r2
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x350>
 800127e:	e70d      	b.n	800109c <__aeabi_fsub+0x16c>
 8001280:	e70a      	b.n	8001098 <__aeabi_fsub+0x168>
 8001282:	4652      	mov	r2, sl
 8001284:	000d      	movs	r5, r1
 8001286:	0034      	movs	r4, r6
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	e68e      	b.n	8000faa <__aeabi_fsub+0x7a>
 800128c:	4653      	mov	r3, sl
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <__aeabi_fsub+0x374>
 8001292:	000d      	movs	r5, r1
 8001294:	4647      	mov	r7, r8
 8001296:	e6b2      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001298:	4643      	mov	r3, r8
 800129a:	0034      	movs	r4, r6
 800129c:	e780      	b.n	80011a0 <__aeabi_fsub+0x270>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <__aeabi_fsub+0x374>
 80012a2:	e779      	b.n	8001198 <__aeabi_fsub+0x268>
 80012a4:	2500      	movs	r5, #0
 80012a6:	2700      	movs	r7, #0
 80012a8:	e6a9      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012aa:	4647      	mov	r7, r8
 80012ac:	e6a7      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012ae:	4653      	mov	r3, sl
 80012b0:	0034      	movs	r4, r6
 80012b2:	4463      	add	r3, ip
 80012b4:	e6c8      	b.n	8001048 <__aeabi_fsub+0x118>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	7dffffff 	.word	0x7dffffff
 80012bc:	fbffffff 	.word	0xfbffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	d903      	bls.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	d902      	bls.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ff60 	bl	80031d4 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	dd01      	ble.n	8001326 <__aeabi_i2f+0x26>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0b      	ble.n	800135a <__aeabi_i2f+0x5a>
 8001342:	2205      	movs	r2, #5
 8001344:	002e      	movs	r6, r5
 8001346:	1a12      	subs	r2, r2, r0
 8001348:	40d6      	lsrs	r6, r2
 800134a:	0002      	movs	r2, r0
 800134c:	321b      	adds	r2, #27
 800134e:	4095      	lsls	r5, r2
 8001350:	0028      	movs	r0, r5
 8001352:	1e45      	subs	r5, r0, #1
 8001354:	41a8      	sbcs	r0, r5
 8001356:	0035      	movs	r5, r6
 8001358:	4305      	orrs	r5, r0
 800135a:	2905      	cmp	r1, #5
 800135c:	dd01      	ble.n	8001362 <__aeabi_i2f+0x62>
 800135e:	1f4a      	subs	r2, r1, #5
 8001360:	4095      	lsls	r5, r2
 8001362:	002a      	movs	r2, r5
 8001364:	4e08      	ldr	r6, [pc, #32]	; (8001388 <__aeabi_i2f+0x88>)
 8001366:	4032      	ands	r2, r6
 8001368:	0768      	lsls	r0, r5, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_i2f+0x80>
 800136c:	200f      	movs	r0, #15
 800136e:	4028      	ands	r0, r5
 8001370:	2804      	cmp	r0, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_i2f+0x80>
 8001374:	3204      	adds	r2, #4
 8001376:	0150      	lsls	r0, r2, #5
 8001378:	d502      	bpl.n	8001380 <__aeabi_i2f+0x80>
 800137a:	239f      	movs	r3, #159	; 0x9f
 800137c:	4032      	ands	r2, r6
 800137e:	1a5b      	subs	r3, r3, r1
 8001380:	0192      	lsls	r2, r2, #6
 8001382:	0a55      	lsrs	r5, r2, #9
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	e7d5      	b.n	8001334 <__aeabi_i2f+0x34>
 8001388:	fbffffff 	.word	0xfbffffff

0800138c <__aeabi_ui2f>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	1e05      	subs	r5, r0, #0
 8001390:	d00e      	beq.n	80013b0 <__aeabi_ui2f+0x24>
 8001392:	f001 ff1f 	bl	80031d4 <__clzsi2>
 8001396:	239e      	movs	r3, #158	; 0x9e
 8001398:	0004      	movs	r4, r0
 800139a:	1a1b      	subs	r3, r3, r0
 800139c:	2b96      	cmp	r3, #150	; 0x96
 800139e:	dc0c      	bgt.n	80013ba <__aeabi_ui2f+0x2e>
 80013a0:	2808      	cmp	r0, #8
 80013a2:	dd01      	ble.n	80013a8 <__aeabi_ui2f+0x1c>
 80013a4:	3c08      	subs	r4, #8
 80013a6:	40a5      	lsls	r5, r4
 80013a8:	026d      	lsls	r5, r5, #9
 80013aa:	0a6d      	lsrs	r5, r5, #9
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	e001      	b.n	80013b4 <__aeabi_ui2f+0x28>
 80013b0:	2000      	movs	r0, #0
 80013b2:	2500      	movs	r5, #0
 80013b4:	05c0      	lsls	r0, r0, #23
 80013b6:	4328      	orrs	r0, r5
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	2b99      	cmp	r3, #153	; 0x99
 80013bc:	dd09      	ble.n	80013d2 <__aeabi_ui2f+0x46>
 80013be:	0002      	movs	r2, r0
 80013c0:	0029      	movs	r1, r5
 80013c2:	321b      	adds	r2, #27
 80013c4:	4091      	lsls	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	2205      	movs	r2, #5
 80013cc:	1a12      	subs	r2, r2, r0
 80013ce:	40d5      	lsrs	r5, r2
 80013d0:	430d      	orrs	r5, r1
 80013d2:	2c05      	cmp	r4, #5
 80013d4:	dd01      	ble.n	80013da <__aeabi_ui2f+0x4e>
 80013d6:	1f62      	subs	r2, r4, #5
 80013d8:	4095      	lsls	r5, r2
 80013da:	0029      	movs	r1, r5
 80013dc:	4e08      	ldr	r6, [pc, #32]	; (8001400 <__aeabi_ui2f+0x74>)
 80013de:	4031      	ands	r1, r6
 80013e0:	076a      	lsls	r2, r5, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013e4:	200f      	movs	r0, #15
 80013e6:	4028      	ands	r0, r5
 80013e8:	2804      	cmp	r0, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013ec:	3104      	adds	r1, #4
 80013ee:	014a      	lsls	r2, r1, #5
 80013f0:	d502      	bpl.n	80013f8 <__aeabi_ui2f+0x6c>
 80013f2:	239f      	movs	r3, #159	; 0x9f
 80013f4:	4031      	ands	r1, r6
 80013f6:	1b1b      	subs	r3, r3, r4
 80013f8:	0189      	lsls	r1, r1, #6
 80013fa:	0a4d      	lsrs	r5, r1, #9
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	e7d9      	b.n	80013b4 <__aeabi_ui2f+0x28>
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_dadd>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	46d6      	mov	lr, sl
 800140a:	4646      	mov	r6, r8
 800140c:	000d      	movs	r5, r1
 800140e:	0001      	movs	r1, r0
 8001410:	0018      	movs	r0, r3
 8001412:	b5c0      	push	{r6, r7, lr}
 8001414:	0017      	movs	r7, r2
 8001416:	032b      	lsls	r3, r5, #12
 8001418:	0a5a      	lsrs	r2, r3, #9
 800141a:	0f4b      	lsrs	r3, r1, #29
 800141c:	4313      	orrs	r3, r2
 800141e:	00ca      	lsls	r2, r1, #3
 8001420:	4691      	mov	r9, r2
 8001422:	0302      	lsls	r2, r0, #12
 8001424:	006e      	lsls	r6, r5, #1
 8001426:	0041      	lsls	r1, r0, #1
 8001428:	0a52      	lsrs	r2, r2, #9
 800142a:	0fec      	lsrs	r4, r5, #31
 800142c:	0f7d      	lsrs	r5, r7, #29
 800142e:	4315      	orrs	r5, r2
 8001430:	0d76      	lsrs	r6, r6, #21
 8001432:	0d49      	lsrs	r1, r1, #21
 8001434:	0fc0      	lsrs	r0, r0, #31
 8001436:	4682      	mov	sl, r0
 8001438:	46ac      	mov	ip, r5
 800143a:	00ff      	lsls	r7, r7, #3
 800143c:	1a72      	subs	r2, r6, r1
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x40>
 8001442:	e098      	b.n	8001576 <__aeabi_dadd+0x172>
 8001444:	2a00      	cmp	r2, #0
 8001446:	dc00      	bgt.n	800144a <__aeabi_dadd+0x46>
 8001448:	e081      	b.n	800154e <__aeabi_dadd+0x14a>
 800144a:	2900      	cmp	r1, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x4c>
 800144e:	e0b6      	b.n	80015be <__aeabi_dadd+0x1ba>
 8001450:	49c9      	ldr	r1, [pc, #804]	; (8001778 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x54>
 8001456:	e172      	b.n	800173e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x64>
 8001466:	e15e      	b.n	8001726 <__aeabi_dadd+0x322>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dd00      	ble.n	800146e <__aeabi_dadd+0x6a>
 800146c:	e1ee      	b.n	800184c <__aeabi_dadd+0x448>
 800146e:	2020      	movs	r0, #32
 8001470:	0039      	movs	r1, r7
 8001472:	4665      	mov	r5, ip
 8001474:	1a80      	subs	r0, r0, r2
 8001476:	4087      	lsls	r7, r0
 8001478:	40d1      	lsrs	r1, r2
 800147a:	4085      	lsls	r5, r0
 800147c:	430d      	orrs	r5, r1
 800147e:	0039      	movs	r1, r7
 8001480:	1e4f      	subs	r7, r1, #1
 8001482:	41b9      	sbcs	r1, r7
 8001484:	4667      	mov	r7, ip
 8001486:	40d7      	lsrs	r7, r2
 8001488:	4329      	orrs	r1, r5
 800148a:	1bdb      	subs	r3, r3, r7
 800148c:	464a      	mov	r2, r9
 800148e:	1a55      	subs	r5, r2, r1
 8001490:	45a9      	cmp	r9, r5
 8001492:	4189      	sbcs	r1, r1
 8001494:	4249      	negs	r1, r1
 8001496:	1a5b      	subs	r3, r3, r1
 8001498:	4698      	mov	r8, r3
 800149a:	4643      	mov	r3, r8
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x9e>
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x238>
 80014a2:	4643      	mov	r3, r8
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	0a5b      	lsrs	r3, r3, #9
 80014a8:	4698      	mov	r8, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0xae>
 80014b0:	e12c      	b.n	800170c <__aeabi_dadd+0x308>
 80014b2:	4640      	mov	r0, r8
 80014b4:	f001 fe8e 	bl	80031d4 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	3908      	subs	r1, #8
 80014bc:	2220      	movs	r2, #32
 80014be:	0028      	movs	r0, r5
 80014c0:	4643      	mov	r3, r8
 80014c2:	1a52      	subs	r2, r2, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	40d0      	lsrs	r0, r2
 80014c8:	408d      	lsls	r5, r1
 80014ca:	4303      	orrs	r3, r0
 80014cc:	428e      	cmp	r6, r1
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dadd+0xce>
 80014d0:	e117      	b.n	8001702 <__aeabi_dadd+0x2fe>
 80014d2:	1b8e      	subs	r6, r1, r6
 80014d4:	1c72      	adds	r2, r6, #1
 80014d6:	2a1f      	cmp	r2, #31
 80014d8:	dd00      	ble.n	80014dc <__aeabi_dadd+0xd8>
 80014da:	e1a7      	b.n	800182c <__aeabi_dadd+0x428>
 80014dc:	2120      	movs	r1, #32
 80014de:	0018      	movs	r0, r3
 80014e0:	002e      	movs	r6, r5
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	408d      	lsls	r5, r1
 80014e6:	4088      	lsls	r0, r1
 80014e8:	40d6      	lsrs	r6, r2
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	1e69      	subs	r1, r5, #1
 80014ee:	418d      	sbcs	r5, r1
 80014f0:	4330      	orrs	r0, r6
 80014f2:	4698      	mov	r8, r3
 80014f4:	2600      	movs	r6, #0
 80014f6:	4305      	orrs	r5, r0
 80014f8:	076b      	lsls	r3, r5, #29
 80014fa:	d009      	beq.n	8001510 <__aeabi_dadd+0x10c>
 80014fc:	230f      	movs	r3, #15
 80014fe:	402b      	ands	r3, r5
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <__aeabi_dadd+0x10c>
 8001504:	1d2b      	adds	r3, r5, #4
 8001506:	42ab      	cmp	r3, r5
 8001508:	41ad      	sbcs	r5, r5
 800150a:	426d      	negs	r5, r5
 800150c:	44a8      	add	r8, r5
 800150e:	001d      	movs	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	d400      	bmi.n	8001518 <__aeabi_dadd+0x114>
 8001516:	e094      	b.n	8001642 <__aeabi_dadd+0x23e>
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <__aeabi_dadd+0x374>)
 800151a:	1c72      	adds	r2, r6, #1
 800151c:	429a      	cmp	r2, r3
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x11e>
 8001520:	e09d      	b.n	800165e <__aeabi_dadd+0x25a>
 8001522:	4641      	mov	r1, r8
 8001524:	4b95      	ldr	r3, [pc, #596]	; (800177c <__aeabi_dadd+0x378>)
 8001526:	08ed      	lsrs	r5, r5, #3
 8001528:	4019      	ands	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	0749      	lsls	r1, r1, #29
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4329      	orrs	r1, r5
 8001534:	0b1b      	lsrs	r3, r3, #12
 8001536:	0d52      	lsrs	r2, r2, #21
 8001538:	0512      	lsls	r2, r2, #20
 800153a:	4313      	orrs	r3, r2
 800153c:	07e4      	lsls	r4, r4, #31
 800153e:	4323      	orrs	r3, r4
 8001540:	0008      	movs	r0, r1
 8001542:	0019      	movs	r1, r3
 8001544:	bce0      	pop	{r5, r6, r7}
 8001546:	46ba      	mov	sl, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	2a00      	cmp	r2, #0
 8001550:	d043      	beq.n	80015da <__aeabi_dadd+0x1d6>
 8001552:	1b8a      	subs	r2, r1, r6
 8001554:	2e00      	cmp	r6, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x156>
 8001558:	e12a      	b.n	80017b0 <__aeabi_dadd+0x3ac>
 800155a:	464c      	mov	r4, r9
 800155c:	431c      	orrs	r4, r3
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x15e>
 8001560:	e1d1      	b.n	8001906 <__aeabi_dadd+0x502>
 8001562:	1e54      	subs	r4, r2, #1
 8001564:	2a01      	cmp	r2, #1
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x166>
 8001568:	e21f      	b.n	80019aa <__aeabi_dadd+0x5a6>
 800156a:	4d83      	ldr	r5, [pc, #524]	; (8001778 <__aeabi_dadd+0x374>)
 800156c:	42aa      	cmp	r2, r5
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x16e>
 8001570:	e272      	b.n	8001a58 <__aeabi_dadd+0x654>
 8001572:	0022      	movs	r2, r4
 8001574:	e123      	b.n	80017be <__aeabi_dadd+0x3ba>
 8001576:	2a00      	cmp	r2, #0
 8001578:	dc00      	bgt.n	800157c <__aeabi_dadd+0x178>
 800157a:	e098      	b.n	80016ae <__aeabi_dadd+0x2aa>
 800157c:	2900      	cmp	r1, #0
 800157e:	d042      	beq.n	8001606 <__aeabi_dadd+0x202>
 8001580:	497d      	ldr	r1, [pc, #500]	; (8001778 <__aeabi_dadd+0x374>)
 8001582:	428e      	cmp	r6, r1
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x184>
 8001586:	e0da      	b.n	800173e <__aeabi_dadd+0x33a>
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0028      	movs	r0, r5
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	4308      	orrs	r0, r1
 8001590:	4684      	mov	ip, r0
 8001592:	2a38      	cmp	r2, #56	; 0x38
 8001594:	dd00      	ble.n	8001598 <__aeabi_dadd+0x194>
 8001596:	e129      	b.n	80017ec <__aeabi_dadd+0x3e8>
 8001598:	2a1f      	cmp	r2, #31
 800159a:	dc00      	bgt.n	800159e <__aeabi_dadd+0x19a>
 800159c:	e187      	b.n	80018ae <__aeabi_dadd+0x4aa>
 800159e:	0011      	movs	r1, r2
 80015a0:	4665      	mov	r5, ip
 80015a2:	3920      	subs	r1, #32
 80015a4:	40cd      	lsrs	r5, r1
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d004      	beq.n	80015b4 <__aeabi_dadd+0x1b0>
 80015aa:	2040      	movs	r0, #64	; 0x40
 80015ac:	4661      	mov	r1, ip
 80015ae:	1a82      	subs	r2, r0, r2
 80015b0:	4091      	lsls	r1, r2
 80015b2:	430f      	orrs	r7, r1
 80015b4:	0039      	movs	r1, r7
 80015b6:	1e4f      	subs	r7, r1, #1
 80015b8:	41b9      	sbcs	r1, r7
 80015ba:	430d      	orrs	r5, r1
 80015bc:	e11b      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80015be:	0029      	movs	r1, r5
 80015c0:	4339      	orrs	r1, r7
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x1c2>
 80015c4:	e0b5      	b.n	8001732 <__aeabi_dadd+0x32e>
 80015c6:	1e51      	subs	r1, r2, #1
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1ca>
 80015cc:	e1ab      	b.n	8001926 <__aeabi_dadd+0x522>
 80015ce:	486a      	ldr	r0, [pc, #424]	; (8001778 <__aeabi_dadd+0x374>)
 80015d0:	4282      	cmp	r2, r0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x1d2>
 80015d4:	e1b2      	b.n	800193c <__aeabi_dadd+0x538>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e743      	b.n	8001462 <__aeabi_dadd+0x5e>
 80015da:	4969      	ldr	r1, [pc, #420]	; (8001780 <__aeabi_dadd+0x37c>)
 80015dc:	1c75      	adds	r5, r6, #1
 80015de:	420d      	tst	r5, r1
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x1e0>
 80015e2:	e0cf      	b.n	8001784 <__aeabi_dadd+0x380>
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d000      	beq.n	80015ea <__aeabi_dadd+0x1e6>
 80015e8:	e193      	b.n	8001912 <__aeabi_dadd+0x50e>
 80015ea:	4649      	mov	r1, r9
 80015ec:	4319      	orrs	r1, r3
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x1ee>
 80015f0:	e1d1      	b.n	8001996 <__aeabi_dadd+0x592>
 80015f2:	4661      	mov	r1, ip
 80015f4:	4339      	orrs	r1, r7
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x1f6>
 80015f8:	e1e3      	b.n	80019c2 <__aeabi_dadd+0x5be>
 80015fa:	4649      	mov	r1, r9
 80015fc:	0758      	lsls	r0, r3, #29
 80015fe:	08c9      	lsrs	r1, r1, #3
 8001600:	4301      	orrs	r1, r0
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	e026      	b.n	8001654 <__aeabi_dadd+0x250>
 8001606:	0029      	movs	r1, r5
 8001608:	4339      	orrs	r1, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x20a>
 800160c:	e091      	b.n	8001732 <__aeabi_dadd+0x32e>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d005      	beq.n	8001620 <__aeabi_dadd+0x21c>
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <__aeabi_dadd+0x374>)
 8001616:	4282      	cmp	r2, r0
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x218>
 800161a:	e18f      	b.n	800193c <__aeabi_dadd+0x538>
 800161c:	000a      	movs	r2, r1
 800161e:	e7b8      	b.n	8001592 <__aeabi_dadd+0x18e>
 8001620:	003d      	movs	r5, r7
 8001622:	444d      	add	r5, r9
 8001624:	454d      	cmp	r5, r9
 8001626:	4189      	sbcs	r1, r1
 8001628:	4463      	add	r3, ip
 800162a:	4698      	mov	r8, r3
 800162c:	4249      	negs	r1, r1
 800162e:	4488      	add	r8, r1
 8001630:	4643      	mov	r3, r8
 8001632:	2602      	movs	r6, #2
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d500      	bpl.n	800163a <__aeabi_dadd+0x236>
 8001638:	e0eb      	b.n	8001812 <__aeabi_dadd+0x40e>
 800163a:	3e01      	subs	r6, #1
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x23e>
 8001640:	e75c      	b.n	80014fc <__aeabi_dadd+0xf8>
 8001642:	4643      	mov	r3, r8
 8001644:	08e9      	lsrs	r1, r5, #3
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	4311      	orrs	r1, r2
 800164a:	0032      	movs	r2, r6
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	484a      	ldr	r0, [pc, #296]	; (8001778 <__aeabi_dadd+0x374>)
 8001650:	4282      	cmp	r2, r0
 8001652:	d021      	beq.n	8001698 <__aeabi_dadd+0x294>
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	0552      	lsls	r2, r2, #21
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	e76c      	b.n	8001538 <__aeabi_dadd+0x134>
 800165e:	2300      	movs	r3, #0
 8001660:	2100      	movs	r1, #0
 8001662:	e769      	b.n	8001538 <__aeabi_dadd+0x134>
 8001664:	002a      	movs	r2, r5
 8001666:	433a      	orrs	r2, r7
 8001668:	d069      	beq.n	800173e <__aeabi_dadd+0x33a>
 800166a:	464a      	mov	r2, r9
 800166c:	0758      	lsls	r0, r3, #29
 800166e:	08d1      	lsrs	r1, r2, #3
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	4308      	orrs	r0, r1
 8001678:	421a      	tst	r2, r3
 800167a:	d007      	beq.n	800168c <__aeabi_dadd+0x288>
 800167c:	0029      	movs	r1, r5
 800167e:	08ed      	lsrs	r5, r5, #3
 8001680:	421d      	tst	r5, r3
 8001682:	d103      	bne.n	800168c <__aeabi_dadd+0x288>
 8001684:	002a      	movs	r2, r5
 8001686:	08ff      	lsrs	r7, r7, #3
 8001688:	0748      	lsls	r0, r1, #29
 800168a:	4338      	orrs	r0, r7
 800168c:	0f43      	lsrs	r3, r0, #29
 800168e:	00c1      	lsls	r1, r0, #3
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	4319      	orrs	r1, r3
 8001696:	0013      	movs	r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x29c>
 800169e:	e213      	b.n	8001ac8 <__aeabi_dadd+0x6c4>
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0312      	lsls	r2, r2, #12
 80016a4:	4313      	orrs	r3, r2
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <__aeabi_dadd+0x374>)
 80016aa:	0b1b      	lsrs	r3, r3, #12
 80016ac:	e744      	b.n	8001538 <__aeabi_dadd+0x134>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d04b      	beq.n	800174a <__aeabi_dadd+0x346>
 80016b2:	1b8a      	subs	r2, r1, r6
 80016b4:	2e00      	cmp	r6, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2b6>
 80016b8:	e0e7      	b.n	800188a <__aeabi_dadd+0x486>
 80016ba:	482f      	ldr	r0, [pc, #188]	; (8001778 <__aeabi_dadd+0x374>)
 80016bc:	4281      	cmp	r1, r0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x2be>
 80016c0:	e195      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80016c2:	2080      	movs	r0, #128	; 0x80
 80016c4:	0400      	lsls	r0, r0, #16
 80016c6:	4303      	orrs	r3, r0
 80016c8:	2a38      	cmp	r2, #56	; 0x38
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dadd+0x2ca>
 80016cc:	e143      	b.n	8001956 <__aeabi_dadd+0x552>
 80016ce:	2a1f      	cmp	r2, #31
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dadd+0x2d0>
 80016d2:	e1db      	b.n	8001a8c <__aeabi_dadd+0x688>
 80016d4:	2020      	movs	r0, #32
 80016d6:	001d      	movs	r5, r3
 80016d8:	464e      	mov	r6, r9
 80016da:	1a80      	subs	r0, r0, r2
 80016dc:	4085      	lsls	r5, r0
 80016de:	40d6      	lsrs	r6, r2
 80016e0:	4335      	orrs	r5, r6
 80016e2:	464e      	mov	r6, r9
 80016e4:	4086      	lsls	r6, r0
 80016e6:	0030      	movs	r0, r6
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	1e46      	subs	r6, r0, #1
 80016ec:	41b0      	sbcs	r0, r6
 80016ee:	449c      	add	ip, r3
 80016f0:	4305      	orrs	r5, r0
 80016f2:	19ed      	adds	r5, r5, r7
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	419b      	sbcs	r3, r3
 80016f8:	425b      	negs	r3, r3
 80016fa:	4463      	add	r3, ip
 80016fc:	4698      	mov	r8, r3
 80016fe:	000e      	movs	r6, r1
 8001700:	e07f      	b.n	8001802 <__aeabi_dadd+0x3fe>
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <__aeabi_dadd+0x378>)
 8001704:	1a76      	subs	r6, r6, r1
 8001706:	4013      	ands	r3, r2
 8001708:	4698      	mov	r8, r3
 800170a:	e6f5      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800170c:	0028      	movs	r0, r5
 800170e:	f001 fd61 	bl	80031d4 <__clzsi2>
 8001712:	0001      	movs	r1, r0
 8001714:	3118      	adds	r1, #24
 8001716:	291f      	cmp	r1, #31
 8001718:	dc00      	bgt.n	800171c <__aeabi_dadd+0x318>
 800171a:	e6cf      	b.n	80014bc <__aeabi_dadd+0xb8>
 800171c:	002b      	movs	r3, r5
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	e6d2      	b.n	80014cc <__aeabi_dadd+0xc8>
 8001726:	4662      	mov	r2, ip
 8001728:	433a      	orrs	r2, r7
 800172a:	0011      	movs	r1, r2
 800172c:	1e4f      	subs	r7, r1, #1
 800172e:	41b9      	sbcs	r1, r7
 8001730:	e6ac      	b.n	800148c <__aeabi_dadd+0x88>
 8001732:	4649      	mov	r1, r9
 8001734:	0758      	lsls	r0, r3, #29
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	4301      	orrs	r1, r0
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	e787      	b.n	800164e <__aeabi_dadd+0x24a>
 800173e:	4649      	mov	r1, r9
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	4311      	orrs	r1, r2
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	e7a6      	b.n	8001698 <__aeabi_dadd+0x294>
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <__aeabi_dadd+0x37c>)
 800174c:	1c70      	adds	r0, r6, #1
 800174e:	4208      	tst	r0, r1
 8001750:	d000      	beq.n	8001754 <__aeabi_dadd+0x350>
 8001752:	e0bb      	b.n	80018cc <__aeabi_dadd+0x4c8>
 8001754:	2e00      	cmp	r6, #0
 8001756:	d000      	beq.n	800175a <__aeabi_dadd+0x356>
 8001758:	e114      	b.n	8001984 <__aeabi_dadd+0x580>
 800175a:	4649      	mov	r1, r9
 800175c:	4319      	orrs	r1, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x35e>
 8001760:	e175      	b.n	8001a4e <__aeabi_dadd+0x64a>
 8001762:	0029      	movs	r1, r5
 8001764:	4339      	orrs	r1, r7
 8001766:	d000      	beq.n	800176a <__aeabi_dadd+0x366>
 8001768:	e17e      	b.n	8001a68 <__aeabi_dadd+0x664>
 800176a:	4649      	mov	r1, r9
 800176c:	0758      	lsls	r0, r3, #29
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	4301      	orrs	r1, r0
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	e76e      	b.n	8001654 <__aeabi_dadd+0x250>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	000007ff 	.word	0x000007ff
 800177c:	ff7fffff 	.word	0xff7fffff
 8001780:	000007fe 	.word	0x000007fe
 8001784:	4649      	mov	r1, r9
 8001786:	1bcd      	subs	r5, r1, r7
 8001788:	4661      	mov	r1, ip
 800178a:	1a58      	subs	r0, r3, r1
 800178c:	45a9      	cmp	r9, r5
 800178e:	4189      	sbcs	r1, r1
 8001790:	4249      	negs	r1, r1
 8001792:	4688      	mov	r8, r1
 8001794:	0001      	movs	r1, r0
 8001796:	4640      	mov	r0, r8
 8001798:	1a09      	subs	r1, r1, r0
 800179a:	4688      	mov	r8, r1
 800179c:	0209      	lsls	r1, r1, #8
 800179e:	d500      	bpl.n	80017a2 <__aeabi_dadd+0x39e>
 80017a0:	e0a6      	b.n	80018f0 <__aeabi_dadd+0x4ec>
 80017a2:	4641      	mov	r1, r8
 80017a4:	4329      	orrs	r1, r5
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x3a6>
 80017a8:	e67f      	b.n	80014aa <__aeabi_dadd+0xa6>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2400      	movs	r4, #0
 80017ae:	e751      	b.n	8001654 <__aeabi_dadd+0x250>
 80017b0:	4cc7      	ldr	r4, [pc, #796]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80017b2:	42a1      	cmp	r1, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x3b4>
 80017b6:	e0c7      	b.n	8001948 <__aeabi_dadd+0x544>
 80017b8:	2480      	movs	r4, #128	; 0x80
 80017ba:	0424      	lsls	r4, r4, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	2a38      	cmp	r2, #56	; 0x38
 80017c0:	dc54      	bgt.n	800186c <__aeabi_dadd+0x468>
 80017c2:	2a1f      	cmp	r2, #31
 80017c4:	dd00      	ble.n	80017c8 <__aeabi_dadd+0x3c4>
 80017c6:	e0cc      	b.n	8001962 <__aeabi_dadd+0x55e>
 80017c8:	2420      	movs	r4, #32
 80017ca:	4648      	mov	r0, r9
 80017cc:	1aa4      	subs	r4, r4, r2
 80017ce:	001d      	movs	r5, r3
 80017d0:	464e      	mov	r6, r9
 80017d2:	40a0      	lsls	r0, r4
 80017d4:	40d6      	lsrs	r6, r2
 80017d6:	40a5      	lsls	r5, r4
 80017d8:	0004      	movs	r4, r0
 80017da:	40d3      	lsrs	r3, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	4335      	orrs	r5, r6
 80017e0:	1e66      	subs	r6, r4, #1
 80017e2:	41b4      	sbcs	r4, r6
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	469c      	mov	ip, r3
 80017e8:	4325      	orrs	r5, r4
 80017ea:	e044      	b.n	8001876 <__aeabi_dadd+0x472>
 80017ec:	4662      	mov	r2, ip
 80017ee:	433a      	orrs	r2, r7
 80017f0:	0015      	movs	r5, r2
 80017f2:	1e6f      	subs	r7, r5, #1
 80017f4:	41bd      	sbcs	r5, r7
 80017f6:	444d      	add	r5, r9
 80017f8:	454d      	cmp	r5, r9
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	4249      	negs	r1, r1
 80017fe:	4688      	mov	r8, r1
 8001800:	4498      	add	r8, r3
 8001802:	4643      	mov	r3, r8
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	d400      	bmi.n	800180a <__aeabi_dadd+0x406>
 8001808:	e718      	b.n	800163c <__aeabi_dadd+0x238>
 800180a:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800180c:	3601      	adds	r6, #1
 800180e:	429e      	cmp	r6, r3
 8001810:	d049      	beq.n	80018a6 <__aeabi_dadd+0x4a2>
 8001812:	4642      	mov	r2, r8
 8001814:	4baf      	ldr	r3, [pc, #700]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001816:	2101      	movs	r1, #1
 8001818:	401a      	ands	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	400d      	ands	r5, r1
 8001820:	4315      	orrs	r5, r2
 8001822:	07d9      	lsls	r1, r3, #31
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	4698      	mov	r8, r3
 8001828:	430d      	orrs	r5, r1
 800182a:	e665      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800182c:	0018      	movs	r0, r3
 800182e:	3e1f      	subs	r6, #31
 8001830:	40f0      	lsrs	r0, r6
 8001832:	2a20      	cmp	r2, #32
 8001834:	d003      	beq.n	800183e <__aeabi_dadd+0x43a>
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	1a8a      	subs	r2, r1, r2
 800183a:	4093      	lsls	r3, r2
 800183c:	431d      	orrs	r5, r3
 800183e:	1e69      	subs	r1, r5, #1
 8001840:	418d      	sbcs	r5, r1
 8001842:	2300      	movs	r3, #0
 8001844:	2600      	movs	r6, #0
 8001846:	4698      	mov	r8, r3
 8001848:	4305      	orrs	r5, r0
 800184a:	e6f7      	b.n	800163c <__aeabi_dadd+0x238>
 800184c:	0011      	movs	r1, r2
 800184e:	4665      	mov	r5, ip
 8001850:	3920      	subs	r1, #32
 8001852:	40cd      	lsrs	r5, r1
 8001854:	2a20      	cmp	r2, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_dadd+0x45e>
 8001858:	2040      	movs	r0, #64	; 0x40
 800185a:	4661      	mov	r1, ip
 800185c:	1a82      	subs	r2, r0, r2
 800185e:	4091      	lsls	r1, r2
 8001860:	430f      	orrs	r7, r1
 8001862:	0039      	movs	r1, r7
 8001864:	1e4f      	subs	r7, r1, #1
 8001866:	41b9      	sbcs	r1, r7
 8001868:	4329      	orrs	r1, r5
 800186a:	e60f      	b.n	800148c <__aeabi_dadd+0x88>
 800186c:	464a      	mov	r2, r9
 800186e:	4313      	orrs	r3, r2
 8001870:	001d      	movs	r5, r3
 8001872:	1e6b      	subs	r3, r5, #1
 8001874:	419d      	sbcs	r5, r3
 8001876:	1b7d      	subs	r5, r7, r5
 8001878:	42af      	cmp	r7, r5
 800187a:	419b      	sbcs	r3, r3
 800187c:	4662      	mov	r2, ip
 800187e:	425b      	negs	r3, r3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4698      	mov	r8, r3
 8001884:	4654      	mov	r4, sl
 8001886:	000e      	movs	r6, r1
 8001888:	e607      	b.n	800149a <__aeabi_dadd+0x96>
 800188a:	4648      	mov	r0, r9
 800188c:	4318      	orrs	r0, r3
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x48e>
 8001890:	e0b3      	b.n	80019fa <__aeabi_dadd+0x5f6>
 8001892:	1e50      	subs	r0, r2, #1
 8001894:	2a01      	cmp	r2, #1
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x496>
 8001898:	e10d      	b.n	8001ab6 <__aeabi_dadd+0x6b2>
 800189a:	4d8d      	ldr	r5, [pc, #564]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800189c:	42aa      	cmp	r2, r5
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x49e>
 80018a0:	e0a5      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80018a2:	0002      	movs	r2, r0
 80018a4:	e710      	b.n	80016c8 <__aeabi_dadd+0x2c4>
 80018a6:	0032      	movs	r2, r6
 80018a8:	2300      	movs	r3, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	e644      	b.n	8001538 <__aeabi_dadd+0x134>
 80018ae:	2120      	movs	r1, #32
 80018b0:	0038      	movs	r0, r7
 80018b2:	1a89      	subs	r1, r1, r2
 80018b4:	4665      	mov	r5, ip
 80018b6:	408f      	lsls	r7, r1
 80018b8:	408d      	lsls	r5, r1
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	1e79      	subs	r1, r7, #1
 80018be:	418f      	sbcs	r7, r1
 80018c0:	4305      	orrs	r5, r0
 80018c2:	433d      	orrs	r5, r7
 80018c4:	4667      	mov	r7, ip
 80018c6:	40d7      	lsrs	r7, r2
 80018c8:	19db      	adds	r3, r3, r7
 80018ca:	e794      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80018ce:	4290      	cmp	r0, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x4d0>
 80018d2:	e0ec      	b.n	8001aae <__aeabi_dadd+0x6aa>
 80018d4:	0039      	movs	r1, r7
 80018d6:	4449      	add	r1, r9
 80018d8:	4549      	cmp	r1, r9
 80018da:	4192      	sbcs	r2, r2
 80018dc:	4463      	add	r3, ip
 80018de:	4252      	negs	r2, r2
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	07dd      	lsls	r5, r3, #31
 80018e4:	0849      	lsrs	r1, r1, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	4698      	mov	r8, r3
 80018ea:	0006      	movs	r6, r0
 80018ec:	430d      	orrs	r5, r1
 80018ee:	e6a5      	b.n	800163c <__aeabi_dadd+0x238>
 80018f0:	464a      	mov	r2, r9
 80018f2:	1abd      	subs	r5, r7, r2
 80018f4:	42af      	cmp	r7, r5
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	4662      	mov	r2, ip
 80018fa:	4249      	negs	r1, r1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	4698      	mov	r8, r3
 8001902:	4654      	mov	r4, sl
 8001904:	e5d1      	b.n	80014aa <__aeabi_dadd+0xa6>
 8001906:	076c      	lsls	r4, r5, #29
 8001908:	08f9      	lsrs	r1, r7, #3
 800190a:	4321      	orrs	r1, r4
 800190c:	08eb      	lsrs	r3, r5, #3
 800190e:	0004      	movs	r4, r0
 8001910:	e69d      	b.n	800164e <__aeabi_dadd+0x24a>
 8001912:	464a      	mov	r2, r9
 8001914:	431a      	orrs	r2, r3
 8001916:	d175      	bne.n	8001a04 <__aeabi_dadd+0x600>
 8001918:	4661      	mov	r1, ip
 800191a:	4339      	orrs	r1, r7
 800191c:	d114      	bne.n	8001948 <__aeabi_dadd+0x544>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	2400      	movs	r4, #0
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	e6bc      	b.n	80016a0 <__aeabi_dadd+0x29c>
 8001926:	464a      	mov	r2, r9
 8001928:	1bd5      	subs	r5, r2, r7
 800192a:	45a9      	cmp	r9, r5
 800192c:	4189      	sbcs	r1, r1
 800192e:	4662      	mov	r2, ip
 8001930:	4249      	negs	r1, r1
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	1a5b      	subs	r3, r3, r1
 8001936:	4698      	mov	r8, r3
 8001938:	2601      	movs	r6, #1
 800193a:	e5ae      	b.n	800149a <__aeabi_dadd+0x96>
 800193c:	464a      	mov	r2, r9
 800193e:	08d1      	lsrs	r1, r2, #3
 8001940:	075a      	lsls	r2, r3, #29
 8001942:	4311      	orrs	r1, r2
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	e6a7      	b.n	8001698 <__aeabi_dadd+0x294>
 8001948:	4663      	mov	r3, ip
 800194a:	08f9      	lsrs	r1, r7, #3
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	4654      	mov	r4, sl
 8001950:	4311      	orrs	r1, r2
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	e6a0      	b.n	8001698 <__aeabi_dadd+0x294>
 8001956:	464a      	mov	r2, r9
 8001958:	4313      	orrs	r3, r2
 800195a:	001d      	movs	r5, r3
 800195c:	1e6b      	subs	r3, r5, #1
 800195e:	419d      	sbcs	r5, r3
 8001960:	e6c7      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001962:	0014      	movs	r4, r2
 8001964:	001e      	movs	r6, r3
 8001966:	3c20      	subs	r4, #32
 8001968:	40e6      	lsrs	r6, r4
 800196a:	2a20      	cmp	r2, #32
 800196c:	d005      	beq.n	800197a <__aeabi_dadd+0x576>
 800196e:	2440      	movs	r4, #64	; 0x40
 8001970:	1aa2      	subs	r2, r4, r2
 8001972:	4093      	lsls	r3, r2
 8001974:	464a      	mov	r2, r9
 8001976:	431a      	orrs	r2, r3
 8001978:	4691      	mov	r9, r2
 800197a:	464d      	mov	r5, r9
 800197c:	1e6b      	subs	r3, r5, #1
 800197e:	419d      	sbcs	r5, r3
 8001980:	4335      	orrs	r5, r6
 8001982:	e778      	b.n	8001876 <__aeabi_dadd+0x472>
 8001984:	464a      	mov	r2, r9
 8001986:	431a      	orrs	r2, r3
 8001988:	d000      	beq.n	800198c <__aeabi_dadd+0x588>
 800198a:	e66b      	b.n	8001664 <__aeabi_dadd+0x260>
 800198c:	076b      	lsls	r3, r5, #29
 800198e:	08f9      	lsrs	r1, r7, #3
 8001990:	4319      	orrs	r1, r3
 8001992:	08eb      	lsrs	r3, r5, #3
 8001994:	e680      	b.n	8001698 <__aeabi_dadd+0x294>
 8001996:	4661      	mov	r1, ip
 8001998:	4339      	orrs	r1, r7
 800199a:	d054      	beq.n	8001a46 <__aeabi_dadd+0x642>
 800199c:	4663      	mov	r3, ip
 800199e:	08f9      	lsrs	r1, r7, #3
 80019a0:	075c      	lsls	r4, r3, #29
 80019a2:	4321      	orrs	r1, r4
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0004      	movs	r4, r0
 80019a8:	e654      	b.n	8001654 <__aeabi_dadd+0x250>
 80019aa:	464a      	mov	r2, r9
 80019ac:	1abd      	subs	r5, r7, r2
 80019ae:	42af      	cmp	r7, r5
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	4662      	mov	r2, ip
 80019b4:	4249      	negs	r1, r1
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	1a5b      	subs	r3, r3, r1
 80019ba:	4698      	mov	r8, r3
 80019bc:	0004      	movs	r4, r0
 80019be:	2601      	movs	r6, #1
 80019c0:	e56b      	b.n	800149a <__aeabi_dadd+0x96>
 80019c2:	464a      	mov	r2, r9
 80019c4:	1bd5      	subs	r5, r2, r7
 80019c6:	45a9      	cmp	r9, r5
 80019c8:	4189      	sbcs	r1, r1
 80019ca:	4662      	mov	r2, ip
 80019cc:	4249      	negs	r1, r1
 80019ce:	1a9a      	subs	r2, r3, r2
 80019d0:	1a52      	subs	r2, r2, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	d532      	bpl.n	8001a3e <__aeabi_dadd+0x63a>
 80019d8:	464a      	mov	r2, r9
 80019da:	1abd      	subs	r5, r7, r2
 80019dc:	42af      	cmp	r7, r5
 80019de:	4189      	sbcs	r1, r1
 80019e0:	4662      	mov	r2, ip
 80019e2:	4249      	negs	r1, r1
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	1a5b      	subs	r3, r3, r1
 80019e8:	4698      	mov	r8, r3
 80019ea:	0004      	movs	r4, r0
 80019ec:	e584      	b.n	80014f8 <__aeabi_dadd+0xf4>
 80019ee:	4663      	mov	r3, ip
 80019f0:	08f9      	lsrs	r1, r7, #3
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	4311      	orrs	r1, r2
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	e64e      	b.n	8001698 <__aeabi_dadd+0x294>
 80019fa:	08f9      	lsrs	r1, r7, #3
 80019fc:	0768      	lsls	r0, r5, #29
 80019fe:	4301      	orrs	r1, r0
 8001a00:	08eb      	lsrs	r3, r5, #3
 8001a02:	e624      	b.n	800164e <__aeabi_dadd+0x24a>
 8001a04:	4662      	mov	r2, ip
 8001a06:	433a      	orrs	r2, r7
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dadd+0x608>
 8001a0a:	e698      	b.n	800173e <__aeabi_dadd+0x33a>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	08d1      	lsrs	r1, r2, #3
 8001a10:	075a      	lsls	r2, r3, #29
 8001a12:	4311      	orrs	r1, r2
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d008      	beq.n	8001a30 <__aeabi_dadd+0x62c>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	08c5      	lsrs	r5, r0, #3
 8001a22:	421d      	tst	r5, r3
 8001a24:	d104      	bne.n	8001a30 <__aeabi_dadd+0x62c>
 8001a26:	4654      	mov	r4, sl
 8001a28:	002a      	movs	r2, r5
 8001a2a:	08f9      	lsrs	r1, r7, #3
 8001a2c:	0743      	lsls	r3, r0, #29
 8001a2e:	4319      	orrs	r1, r3
 8001a30:	0f4b      	lsrs	r3, r1, #29
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	08c9      	lsrs	r1, r1, #3
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	e62c      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4329      	orrs	r1, r5
 8001a42:	d000      	beq.n	8001a46 <__aeabi_dadd+0x642>
 8001a44:	e5fa      	b.n	800163c <__aeabi_dadd+0x238>
 8001a46:	2300      	movs	r3, #0
 8001a48:	000a      	movs	r2, r1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	e602      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a4e:	076b      	lsls	r3, r5, #29
 8001a50:	08f9      	lsrs	r1, r7, #3
 8001a52:	4319      	orrs	r1, r3
 8001a54:	08eb      	lsrs	r3, r5, #3
 8001a56:	e5fd      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	08f9      	lsrs	r1, r7, #3
 8001a5c:	075b      	lsls	r3, r3, #29
 8001a5e:	4319      	orrs	r1, r3
 8001a60:	4663      	mov	r3, ip
 8001a62:	0004      	movs	r4, r0
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	e617      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a68:	003d      	movs	r5, r7
 8001a6a:	444d      	add	r5, r9
 8001a6c:	4463      	add	r3, ip
 8001a6e:	454d      	cmp	r5, r9
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	4249      	negs	r1, r1
 8001a76:	4488      	add	r8, r1
 8001a78:	4643      	mov	r3, r8
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dadd+0x67c>
 8001a7e:	e5dd      	b.n	800163c <__aeabi_dadd+0x238>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e5d7      	b.n	800163c <__aeabi_dadd+0x238>
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	001e      	movs	r6, r3
 8001a90:	3820      	subs	r0, #32
 8001a92:	40c6      	lsrs	r6, r0
 8001a94:	2a20      	cmp	r2, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dadd+0x6a0>
 8001a98:	2040      	movs	r0, #64	; 0x40
 8001a9a:	1a82      	subs	r2, r0, r2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	464d      	mov	r5, r9
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	419d      	sbcs	r5, r3
 8001aaa:	4335      	orrs	r5, r6
 8001aac:	e621      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e540      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	19d5      	adds	r5, r2, r7
 8001aba:	42bd      	cmp	r5, r7
 8001abc:	4189      	sbcs	r1, r1
 8001abe:	4463      	add	r3, ip
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4249      	negs	r1, r1
 8001ac4:	4488      	add	r8, r1
 8001ac6:	e5b3      	b.n	8001630 <__aeabi_dadd+0x22c>
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 8001acc:	000b      	movs	r3, r1
 8001ace:	e533      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff

08001ad8 <__aeabi_ddiv>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	4657      	mov	r7, sl
 8001adc:	464e      	mov	r6, r9
 8001ade:	4645      	mov	r5, r8
 8001ae0:	46de      	mov	lr, fp
 8001ae2:	b5e0      	push	{r5, r6, r7, lr}
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	0048      	lsls	r0, r1, #1
 8001aec:	4692      	mov	sl, r2
 8001aee:	001f      	movs	r7, r3
 8001af0:	b085      	sub	sp, #20
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d40      	lsrs	r0, r0, #21
 8001af6:	0fce      	lsrs	r6, r1, #31
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d059      	beq.n	8001bb0 <__aeabi_ddiv+0xd8>
 8001afc:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x2c>
 8001b02:	e098      	b.n	8001c36 <__aeabi_ddiv+0x15e>
 8001b04:	0f6b      	lsrs	r3, r5, #29
 8001b06:	00e4      	lsls	r4, r4, #3
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	4698      	mov	r8, r3
 8001b12:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b14:	00ed      	lsls	r5, r5, #3
 8001b16:	469b      	mov	fp, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	4483      	add	fp, r0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	033c      	lsls	r4, r7, #12
 8001b22:	007b      	lsls	r3, r7, #1
 8001b24:	4650      	mov	r0, sl
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	0d5b      	lsrs	r3, r3, #21
 8001b2a:	0fff      	lsrs	r7, r7, #31
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d067      	beq.n	8001c00 <__aeabi_ddiv+0x128>
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <__aeabi_ddiv+0x90>
 8001b36:	497a      	ldr	r1, [pc, #488]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b38:	0f42      	lsrs	r2, r0, #29
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	00e4      	lsls	r4, r4, #3
 8001b3e:	4659      	mov	r1, fp
 8001b40:	4314      	orrs	r4, r2
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4463      	add	r3, ip
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	00c2      	lsls	r2, r0, #3
 8001b50:	2000      	movs	r0, #0
 8001b52:	0033      	movs	r3, r6
 8001b54:	407b      	eors	r3, r7
 8001b56:	469a      	mov	sl, r3
 8001b58:	464b      	mov	r3, r9
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x88>
 8001b5e:	e0ef      	b.n	8001d40 <__aeabi_ddiv+0x268>
 8001b60:	4970      	ldr	r1, [pc, #448]	; (8001d24 <__aeabi_ddiv+0x24c>)
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	58cb      	ldr	r3, [r1, r3]
 8001b66:	469f      	mov	pc, r3
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <__aeabi_ddiv+0x250>)
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	4322      	orrs	r2, r4
 8001b70:	44e3      	add	fp, ip
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0xa0>
 8001b76:	e095      	b.n	8001ca4 <__aeabi_ddiv+0x1cc>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2400      	movs	r4, #0
 8001b82:	2002      	movs	r0, #2
 8001b84:	e7e5      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4323      	orrs	r3, r4
 8001b92:	07d2      	lsls	r2, r2, #31
 8001b94:	4313      	orrs	r3, r2
 8001b96:	0028      	movs	r0, r5
 8001b98:	0019      	movs	r1, r3
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2500      	movs	r5, #0
 8001bac:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001bae:	e7ed      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0xe2>
 8001bb8:	e089      	b.n	8001cce <__aeabi_ddiv+0x1f6>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0xe8>
 8001bbe:	e1e0      	b.n	8001f82 <__aeabi_ddiv+0x4aa>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb07 	bl	80031d4 <__clzsi2>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	0002      	movs	r2, r0
 8001bca:	390b      	subs	r1, #11
 8001bcc:	231d      	movs	r3, #29
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	3808      	subs	r0, #8
 8001bd8:	4084      	lsls	r4, r0
 8001bda:	000b      	movs	r3, r1
 8001bdc:	464d      	mov	r5, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4698      	mov	r8, r3
 8001be2:	4085      	lsls	r5, r0
 8001be4:	4851      	ldr	r0, [pc, #324]	; (8001d2c <__aeabi_ddiv+0x254>)
 8001be6:	033c      	lsls	r4, r7, #12
 8001be8:	1a83      	subs	r3, r0, r2
 8001bea:	469b      	mov	fp, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	007b      	lsls	r3, r7, #1
 8001bf4:	4650      	mov	r0, sl
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	0fff      	lsrs	r7, r7, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d197      	bne.n	8001b30 <__aeabi_ddiv+0x58>
 8001c00:	4652      	mov	r2, sl
 8001c02:	4322      	orrs	r2, r4
 8001c04:	d055      	beq.n	8001cb2 <__aeabi_ddiv+0x1da>
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x134>
 8001c0a:	e1ca      	b.n	8001fa2 <__aeabi_ddiv+0x4ca>
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f001 fae1 	bl	80031d4 <__clzsi2>
 8001c12:	0002      	movs	r2, r0
 8001c14:	3a0b      	subs	r2, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	0001      	movs	r1, r0
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	3908      	subs	r1, #8
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	408c      	lsls	r4, r1
 8001c24:	4314      	orrs	r4, r2
 8001c26:	4652      	mov	r2, sl
 8001c28:	408a      	lsls	r2, r1
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <__aeabi_ddiv+0x258>)
 8001c2c:	4458      	add	r0, fp
 8001c2e:	469b      	mov	fp, r3
 8001c30:	4483      	add	fp, r0
 8001c32:	2000      	movs	r0, #0
 8001c34:	e78d      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001c36:	464b      	mov	r3, r9
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	d140      	bne.n	8001cc0 <__aeabi_ddiv+0x1e8>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	4699      	mov	r9, r3
 8001c42:	3b06      	subs	r3, #6
 8001c44:	2500      	movs	r5, #0
 8001c46:	4683      	mov	fp, r0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	e769      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001c4c:	46b2      	mov	sl, r6
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d0a9      	beq.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x182>
 8001c58:	e211      	b.n	800207e <__aeabi_ddiv+0x5a6>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d093      	beq.n	8001b86 <__aeabi_ddiv+0xae>
 8001c5e:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <__aeabi_ddiv+0x25c>)
 8001c60:	445a      	add	r2, fp
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_ddiv+0x190>
 8001c66:	e13c      	b.n	8001ee2 <__aeabi_ddiv+0x40a>
 8001c68:	076b      	lsls	r3, r5, #29
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_ddiv+0x196>
 8001c6c:	e1a7      	b.n	8001fbe <__aeabi_ddiv+0x4e6>
 8001c6e:	08ed      	lsrs	r5, r5, #3
 8001c70:	4643      	mov	r3, r8
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	d506      	bpl.n	8001c84 <__aeabi_ddiv+0x1ac>
 8001c76:	4642      	mov	r2, r8
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <__aeabi_ddiv+0x260>)
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	00d2      	lsls	r2, r2, #3
 8001c82:	445a      	add	r2, fp
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <__aeabi_ddiv+0x264>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dc8e      	bgt.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	0552      	lsls	r2, r2, #21
 8001c8e:	0758      	lsls	r0, r3, #29
 8001c90:	025c      	lsls	r4, r3, #9
 8001c92:	4305      	orrs	r5, r0
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d53      	lsrs	r3, r2, #21
 8001c98:	e778      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001c9a:	46ba      	mov	sl, r7
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	0015      	movs	r5, r2
 8001ca0:	9000      	str	r0, [sp, #0]
 8001ca2:	e7d4      	b.n	8001c4e <__aeabi_ddiv+0x176>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4691      	mov	r9, r2
 8001cac:	2003      	movs	r0, #3
 8001cae:	4652      	mov	r2, sl
 8001cb0:	e74f      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	4689      	mov	r9, r1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e748      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	3b09      	subs	r3, #9
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	4683      	mov	fp, r0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	e728      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2500      	movs	r5, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	e720      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	469a      	mov	sl, r3
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	e74f      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	4641      	mov	r1, r8
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	4219      	tst	r1, r3
 8001cf4:	d008      	beq.n	8001d08 <__aeabi_ddiv+0x230>
 8001cf6:	421c      	tst	r4, r3
 8001cf8:	d106      	bne.n	8001d08 <__aeabi_ddiv+0x230>
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	0324      	lsls	r4, r4, #12
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	0015      	movs	r5, r2
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e741      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	46b2      	mov	sl, r6
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e738      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	08013c74 	.word	0x08013c74
 8001d28:	fffff801 	.word	0xfffff801
 8001d2c:	fffffc0d 	.word	0xfffffc0d
 8001d30:	000003f3 	.word	0x000003f3
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	4544      	cmp	r4, r8
 8001d42:	d200      	bcs.n	8001d46 <__aeabi_ddiv+0x26e>
 8001d44:	e116      	b.n	8001f74 <__aeabi_ddiv+0x49c>
 8001d46:	d100      	bne.n	8001d4a <__aeabi_ddiv+0x272>
 8001d48:	e111      	b.n	8001f6e <__aeabi_ddiv+0x496>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	469c      	mov	ip, r3
 8001d50:	002e      	movs	r6, r5
 8001d52:	4640      	mov	r0, r8
 8001d54:	2500      	movs	r5, #0
 8001d56:	44e3      	add	fp, ip
 8001d58:	0223      	lsls	r3, r4, #8
 8001d5a:	0e14      	lsrs	r4, r2, #24
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	4699      	mov	r9, r3
 8001d62:	0423      	lsls	r3, r4, #16
 8001d64:	0c1f      	lsrs	r7, r3, #16
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	9701      	str	r7, [sp, #4]
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_uidivmod>
 8001d72:	0002      	movs	r2, r0
 8001d74:	437a      	muls	r2, r7
 8001d76:	040b      	lsls	r3, r1, #16
 8001d78:	0c31      	lsrs	r1, r6, #16
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	d90b      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d82:	2301      	movs	r3, #1
 8001d84:	425b      	negs	r3, r3
 8001d86:	469c      	mov	ip, r3
 8001d88:	1909      	adds	r1, r1, r4
 8001d8a:	44e0      	add	r8, ip
 8001d8c:	428c      	cmp	r4, r1
 8001d8e:	d804      	bhi.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d902      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	4698      	mov	r8, r3
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	1a88      	subs	r0, r1, r2
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	f7fe fa3f 	bl	8000220 <__aeabi_uidivmod>
 8001da2:	0409      	lsls	r1, r1, #16
 8001da4:	468c      	mov	ip, r1
 8001da6:	0431      	lsls	r1, r6, #16
 8001da8:	4666      	mov	r6, ip
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	0c09      	lsrs	r1, r1, #16
 8001dae:	4342      	muls	r2, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	4331      	orrs	r1, r6
 8001db4:	428a      	cmp	r2, r1
 8001db6:	d904      	bls.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001db8:	1909      	adds	r1, r1, r4
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	428c      	cmp	r4, r1
 8001dbe:	d800      	bhi.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001dc0:	e111      	b.n	8001fe6 <__aeabi_ddiv+0x50e>
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	9e00      	ldr	r6, [sp, #0]
 8001dc8:	0412      	lsls	r2, r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	0c33      	lsrs	r3, r6, #16
 8001dce:	001f      	movs	r7, r3
 8001dd0:	0c10      	lsrs	r0, r2, #16
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	0413      	lsls	r3, r2, #16
 8001dd8:	0432      	lsls	r2, r6, #16
 8001dda:	0c16      	lsrs	r6, r2, #16
 8001ddc:	0032      	movs	r2, r6
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	435a      	muls	r2, r3
 8001de2:	9603      	str	r6, [sp, #12]
 8001de4:	437b      	muls	r3, r7
 8001de6:	4346      	muls	r6, r0
 8001de8:	4378      	muls	r0, r7
 8001dea:	0c17      	lsrs	r7, r2, #16
 8001dec:	46bc      	mov	ip, r7
 8001dee:	199b      	adds	r3, r3, r6
 8001df0:	4463      	add	r3, ip
 8001df2:	429e      	cmp	r6, r3
 8001df4:	d903      	bls.n	8001dfe <__aeabi_ddiv+0x326>
 8001df6:	2680      	movs	r6, #128	; 0x80
 8001df8:	0276      	lsls	r6, r6, #9
 8001dfa:	46b4      	mov	ip, r6
 8001dfc:	4460      	add	r0, ip
 8001dfe:	0c1e      	lsrs	r6, r3, #16
 8001e00:	1830      	adds	r0, r6, r0
 8001e02:	0416      	lsls	r6, r2, #16
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c36      	lsrs	r6, r6, #16
 8001e08:	199e      	adds	r6, r3, r6
 8001e0a:	4281      	cmp	r1, r0
 8001e0c:	d200      	bcs.n	8001e10 <__aeabi_ddiv+0x338>
 8001e0e:	e09c      	b.n	8001f4a <__aeabi_ddiv+0x472>
 8001e10:	d100      	bne.n	8001e14 <__aeabi_ddiv+0x33c>
 8001e12:	e097      	b.n	8001f44 <__aeabi_ddiv+0x46c>
 8001e14:	1bae      	subs	r6, r5, r6
 8001e16:	1a09      	subs	r1, r1, r0
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	4180      	sbcs	r0, r0
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	1a08      	subs	r0, r1, r0
 8001e20:	4284      	cmp	r4, r0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x34e>
 8001e24:	e111      	b.n	800204a <__aeabi_ddiv+0x572>
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe f9fa 	bl	8000220 <__aeabi_uidivmod>
 8001e2c:	9a01      	ldr	r2, [sp, #4]
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0c31      	lsrs	r1, r6, #16
 8001e34:	0005      	movs	r5, r0
 8001e36:	4319      	orrs	r1, r3
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d907      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e3c:	1909      	adds	r1, r1, r4
 8001e3e:	3d01      	subs	r5, #1
 8001e40:	428c      	cmp	r4, r1
 8001e42:	d803      	bhi.n	8001e4c <__aeabi_ddiv+0x374>
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d901      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e48:	1e85      	subs	r5, r0, #2
 8001e4a:	1909      	adds	r1, r1, r4
 8001e4c:	1a88      	subs	r0, r1, r2
 8001e4e:	4649      	mov	r1, r9
 8001e50:	f7fe f9e6 	bl	8000220 <__aeabi_uidivmod>
 8001e54:	0409      	lsls	r1, r1, #16
 8001e56:	468c      	mov	ip, r1
 8001e58:	0431      	lsls	r1, r6, #16
 8001e5a:	4666      	mov	r6, ip
 8001e5c:	9a01      	ldr	r2, [sp, #4]
 8001e5e:	0c09      	lsrs	r1, r1, #16
 8001e60:	4342      	muls	r2, r0
 8001e62:	0003      	movs	r3, r0
 8001e64:	4331      	orrs	r1, r6
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d907      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e6a:	1909      	adds	r1, r1, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	428c      	cmp	r4, r1
 8001e70:	d803      	bhi.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d901      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e76:	1e83      	subs	r3, r0, #2
 8001e78:	1909      	adds	r1, r1, r4
 8001e7a:	9e03      	ldr	r6, [sp, #12]
 8001e7c:	1a89      	subs	r1, r1, r2
 8001e7e:	0032      	movs	r2, r6
 8001e80:	042d      	lsls	r5, r5, #16
 8001e82:	431d      	orrs	r5, r3
 8001e84:	9f02      	ldr	r7, [sp, #8]
 8001e86:	042b      	lsls	r3, r5, #16
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	435a      	muls	r2, r3
 8001e8c:	437b      	muls	r3, r7
 8001e8e:	469c      	mov	ip, r3
 8001e90:	0c28      	lsrs	r0, r5, #16
 8001e92:	4346      	muls	r6, r0
 8001e94:	0c13      	lsrs	r3, r2, #16
 8001e96:	44b4      	add	ip, r6
 8001e98:	4463      	add	r3, ip
 8001e9a:	4378      	muls	r0, r7
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d903      	bls.n	8001ea8 <__aeabi_ddiv+0x3d0>
 8001ea0:	2680      	movs	r6, #128	; 0x80
 8001ea2:	0276      	lsls	r6, r6, #9
 8001ea4:	46b4      	mov	ip, r6
 8001ea6:	4460      	add	r0, ip
 8001ea8:	0c1e      	lsrs	r6, r3, #16
 8001eaa:	0412      	lsls	r2, r2, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c12      	lsrs	r2, r2, #16
 8001eb0:	1830      	adds	r0, r6, r0
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	d306      	bcc.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001eb8:	d002      	beq.n	8001ec0 <__aeabi_ddiv+0x3e8>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	431d      	orrs	r5, r3
 8001ebe:	e6ce      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001ec4:	e6cb      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec6:	1861      	adds	r1, r4, r1
 8001ec8:	1e6e      	subs	r6, r5, #1
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	d200      	bcs.n	8001ed0 <__aeabi_ddiv+0x3f8>
 8001ece:	e0a4      	b.n	800201a <__aeabi_ddiv+0x542>
 8001ed0:	4281      	cmp	r1, r0
 8001ed2:	d200      	bcs.n	8001ed6 <__aeabi_ddiv+0x3fe>
 8001ed4:	e0c9      	b.n	800206a <__aeabi_ddiv+0x592>
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x402>
 8001ed8:	e0d9      	b.n	800208e <__aeabi_ddiv+0x5b6>
 8001eda:	0035      	movs	r5, r6
 8001edc:	e7ed      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8001ede:	2501      	movs	r5, #1
 8001ee0:	426d      	negs	r5, r5
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	1a89      	subs	r1, r1, r2
 8001ee6:	2938      	cmp	r1, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_ddiv+0x414>
 8001eea:	e64c      	b.n	8001b86 <__aeabi_ddiv+0xae>
 8001eec:	291f      	cmp	r1, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x41a>
 8001ef0:	e07f      	b.n	8001ff2 <__aeabi_ddiv+0x51a>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	1a9a      	subs	r2, r3, r2
 8001ef8:	4643      	mov	r3, r8
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	2920      	cmp	r1, #32
 8001efe:	d004      	beq.n	8001f0a <__aeabi_ddiv+0x432>
 8001f00:	4644      	mov	r4, r8
 8001f02:	4a65      	ldr	r2, [pc, #404]	; (8002098 <__aeabi_ddiv+0x5c0>)
 8001f04:	445a      	add	r2, fp
 8001f06:	4094      	lsls	r4, r2
 8001f08:	4325      	orrs	r5, r4
 8001f0a:	1e6a      	subs	r2, r5, #1
 8001f0c:	4195      	sbcs	r5, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	432b      	orrs	r3, r5
 8001f12:	0015      	movs	r5, r2
 8001f14:	2400      	movs	r4, #0
 8001f16:	401d      	ands	r5, r3
 8001f18:	421a      	tst	r2, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x446>
 8001f1c:	e0a1      	b.n	8002062 <__aeabi_ddiv+0x58a>
 8001f1e:	220f      	movs	r2, #15
 8001f20:	2400      	movs	r4, #0
 8001f22:	401a      	ands	r2, r3
 8001f24:	2a04      	cmp	r2, #4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8001f28:	e098      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	0222      	lsls	r2, r4, #8
 8001f38:	d400      	bmi.n	8001f3c <__aeabi_ddiv+0x464>
 8001f3a:	e08f      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2500      	movs	r5, #0
 8001f42:	e623      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001f44:	42b5      	cmp	r5, r6
 8001f46:	d300      	bcc.n	8001f4a <__aeabi_ddiv+0x472>
 8001f48:	e764      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	9b00      	ldr	r3, [sp, #0]
 8001f50:	469c      	mov	ip, r3
 8001f52:	4465      	add	r5, ip
 8001f54:	001f      	movs	r7, r3
 8001f56:	429d      	cmp	r5, r3
 8001f58:	419b      	sbcs	r3, r3
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	191b      	adds	r3, r3, r4
 8001f5e:	18c9      	adds	r1, r1, r3
 8001f60:	428c      	cmp	r4, r1
 8001f62:	d23a      	bcs.n	8001fda <__aeabi_ddiv+0x502>
 8001f64:	4288      	cmp	r0, r1
 8001f66:	d863      	bhi.n	8002030 <__aeabi_ddiv+0x558>
 8001f68:	d060      	beq.n	800202c <__aeabi_ddiv+0x554>
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	e752      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f6e:	42aa      	cmp	r2, r5
 8001f70:	d900      	bls.n	8001f74 <__aeabi_ddiv+0x49c>
 8001f72:	e6ea      	b.n	8001d4a <__aeabi_ddiv+0x272>
 8001f74:	4643      	mov	r3, r8
 8001f76:	07de      	lsls	r6, r3, #31
 8001f78:	0858      	lsrs	r0, r3, #1
 8001f7a:	086b      	lsrs	r3, r5, #1
 8001f7c:	431e      	orrs	r6, r3
 8001f7e:	07ed      	lsls	r5, r5, #31
 8001f80:	e6ea      	b.n	8001d58 <__aeabi_ddiv+0x280>
 8001f82:	4648      	mov	r0, r9
 8001f84:	f001 f926 	bl	80031d4 <__clzsi2>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	3115      	adds	r1, #21
 8001f8e:	3220      	adds	r2, #32
 8001f90:	291c      	cmp	r1, #28
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x4be>
 8001f94:	e61a      	b.n	8001bcc <__aeabi_ddiv+0xf4>
 8001f96:	464b      	mov	r3, r9
 8001f98:	3808      	subs	r0, #8
 8001f9a:	4083      	lsls	r3, r0
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	e620      	b.n	8001be4 <__aeabi_ddiv+0x10c>
 8001fa2:	f001 f917 	bl	80031d4 <__clzsi2>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	3215      	adds	r2, #21
 8001fac:	3020      	adds	r0, #32
 8001fae:	2a1c      	cmp	r2, #28
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_ddiv+0x4dc>
 8001fb2:	e630      	b.n	8001c16 <__aeabi_ddiv+0x13e>
 8001fb4:	4654      	mov	r4, sl
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	2200      	movs	r2, #0
 8001fba:	409c      	lsls	r4, r3
 8001fbc:	e635      	b.n	8001c2a <__aeabi_ddiv+0x152>
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	402b      	ands	r3, r5
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_ddiv+0x4f0>
 8001fc6:	e652      	b.n	8001c6e <__aeabi_ddiv+0x196>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	425b      	negs	r3, r3
 8001fcc:	42ab      	cmp	r3, r5
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	3504      	adds	r5, #4
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	08ed      	lsrs	r5, r5, #3
 8001fd6:	4498      	add	r8, r3
 8001fd8:	e64a      	b.n	8001c70 <__aeabi_ddiv+0x198>
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d1c5      	bne.n	8001f6a <__aeabi_ddiv+0x492>
 8001fde:	42af      	cmp	r7, r5
 8001fe0:	d9c0      	bls.n	8001f64 <__aeabi_ddiv+0x48c>
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	e716      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x514>
 8001fea:	e6ea      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001fec:	1e83      	subs	r3, r0, #2
 8001fee:	1909      	adds	r1, r1, r4
 8001ff0:	e6e7      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <__aeabi_ddiv+0x5c4>)
 8001ff4:	0028      	movs	r0, r5
 8001ff6:	445a      	add	r2, fp
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	4095      	lsls	r5, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	1e6a      	subs	r2, r5, #1
 8002002:	4195      	sbcs	r5, r2
 8002004:	4644      	mov	r4, r8
 8002006:	4303      	orrs	r3, r0
 8002008:	432b      	orrs	r3, r5
 800200a:	40cc      	lsrs	r4, r1
 800200c:	075a      	lsls	r2, r3, #29
 800200e:	d092      	beq.n	8001f36 <__aeabi_ddiv+0x45e>
 8002010:	220f      	movs	r2, #15
 8002012:	401a      	ands	r2, r3
 8002014:	2a04      	cmp	r2, #4
 8002016:	d188      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8002018:	e78d      	b.n	8001f36 <__aeabi_ddiv+0x45e>
 800201a:	0035      	movs	r5, r6
 800201c:	4281      	cmp	r1, r0
 800201e:	d000      	beq.n	8002022 <__aeabi_ddiv+0x54a>
 8002020:	e74b      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	4293      	cmp	r3, r2
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x552>
 8002028:	e747      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 800202a:	e618      	b.n	8001c5e <__aeabi_ddiv+0x186>
 800202c:	42ae      	cmp	r6, r5
 800202e:	d99c      	bls.n	8001f6a <__aeabi_ddiv+0x492>
 8002030:	2302      	movs	r3, #2
 8002032:	425b      	negs	r3, r3
 8002034:	469c      	mov	ip, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	44e0      	add	r8, ip
 800203a:	469c      	mov	ip, r3
 800203c:	4465      	add	r5, ip
 800203e:	429d      	cmp	r5, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	425b      	negs	r3, r3
 8002044:	191b      	adds	r3, r3, r4
 8002046:	18c9      	adds	r1, r1, r3
 8002048:	e6e4      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <__aeabi_ddiv+0x5c8>)
 800204c:	445a      	add	r2, fp
 800204e:	2a00      	cmp	r2, #0
 8002050:	dc00      	bgt.n	8002054 <__aeabi_ddiv+0x57c>
 8002052:	e744      	b.n	8001ede <__aeabi_ddiv+0x406>
 8002054:	2301      	movs	r3, #1
 8002056:	2500      	movs	r5, #0
 8002058:	4498      	add	r8, r3
 800205a:	e609      	b.n	8001c70 <__aeabi_ddiv+0x198>
 800205c:	0765      	lsls	r5, r4, #29
 800205e:	0264      	lsls	r4, r4, #9
 8002060:	0b24      	lsrs	r4, r4, #12
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	431d      	orrs	r5, r3
 8002066:	2300      	movs	r3, #0
 8002068:	e590      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800206a:	9e00      	ldr	r6, [sp, #0]
 800206c:	3d02      	subs	r5, #2
 800206e:	0072      	lsls	r2, r6, #1
 8002070:	42b2      	cmp	r2, r6
 8002072:	41bf      	sbcs	r7, r7
 8002074:	427f      	negs	r7, r7
 8002076:	193c      	adds	r4, r7, r4
 8002078:	1909      	adds	r1, r1, r4
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	e7ce      	b.n	800201c <__aeabi_ddiv+0x544>
 800207e:	2480      	movs	r4, #128	; 0x80
 8002080:	4643      	mov	r3, r8
 8002082:	0324      	lsls	r4, r4, #12
 8002084:	431c      	orrs	r4, r3
 8002086:	0324      	lsls	r4, r4, #12
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__aeabi_ddiv+0x5cc>)
 800208a:	0b24      	lsrs	r4, r4, #12
 800208c:	e57e      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ea      	bcc.n	800206a <__aeabi_ddiv+0x592>
 8002094:	0035      	movs	r5, r6
 8002096:	e7c4      	b.n	8002022 <__aeabi_ddiv+0x54a>
 8002098:	0000043e 	.word	0x0000043e
 800209c:	0000041e 	.word	0x0000041e
 80020a0:	000003ff 	.word	0x000003ff
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__eqdf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	464f      	mov	r7, r9
 80020ac:	4646      	mov	r6, r8
 80020ae:	46d6      	mov	lr, sl
 80020b0:	4694      	mov	ip, r2
 80020b2:	4691      	mov	r9, r2
 80020b4:	031a      	lsls	r2, r3, #12
 80020b6:	0b12      	lsrs	r2, r2, #12
 80020b8:	4d18      	ldr	r5, [pc, #96]	; (800211c <__eqdf2+0x74>)
 80020ba:	b5c0      	push	{r6, r7, lr}
 80020bc:	004c      	lsls	r4, r1, #1
 80020be:	030f      	lsls	r7, r1, #12
 80020c0:	4692      	mov	sl, r2
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	0006      	movs	r6, r0
 80020c6:	4680      	mov	r8, r0
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	2001      	movs	r0, #1
 80020cc:	0d64      	lsrs	r4, r4, #21
 80020ce:	0fc9      	lsrs	r1, r1, #31
 80020d0:	0d52      	lsrs	r2, r2, #21
 80020d2:	0fdb      	lsrs	r3, r3, #31
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d00a      	beq.n	80020ee <__eqdf2+0x46>
 80020d8:	42aa      	cmp	r2, r5
 80020da:	d003      	beq.n	80020e4 <__eqdf2+0x3c>
 80020dc:	4294      	cmp	r4, r2
 80020de:	d101      	bne.n	80020e4 <__eqdf2+0x3c>
 80020e0:	4557      	cmp	r7, sl
 80020e2:	d00d      	beq.n	8002100 <__eqdf2+0x58>
 80020e4:	bce0      	pop	{r5, r6, r7}
 80020e6:	46ba      	mov	sl, r7
 80020e8:	46b1      	mov	r9, r6
 80020ea:	46a8      	mov	r8, r5
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	003d      	movs	r5, r7
 80020f0:	4335      	orrs	r5, r6
 80020f2:	d1f7      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f4:	42a2      	cmp	r2, r4
 80020f6:	d1f5      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f8:	4652      	mov	r2, sl
 80020fa:	4665      	mov	r5, ip
 80020fc:	432a      	orrs	r2, r5
 80020fe:	d1f1      	bne.n	80020e4 <__eqdf2+0x3c>
 8002100:	2001      	movs	r0, #1
 8002102:	45c8      	cmp	r8, r9
 8002104:	d1ee      	bne.n	80020e4 <__eqdf2+0x3c>
 8002106:	4299      	cmp	r1, r3
 8002108:	d006      	beq.n	8002118 <__eqdf2+0x70>
 800210a:	2c00      	cmp	r4, #0
 800210c:	d1ea      	bne.n	80020e4 <__eqdf2+0x3c>
 800210e:	433e      	orrs	r6, r7
 8002110:	0030      	movs	r0, r6
 8002112:	1e46      	subs	r6, r0, #1
 8002114:	41b0      	sbcs	r0, r6
 8002116:	e7e5      	b.n	80020e4 <__eqdf2+0x3c>
 8002118:	2000      	movs	r0, #0
 800211a:	e7e3      	b.n	80020e4 <__eqdf2+0x3c>
 800211c:	000007ff 	.word	0x000007ff

08002120 <__gedf2>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	464e      	mov	r6, r9
 8002124:	4645      	mov	r5, r8
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	0004      	movs	r4, r0
 800212c:	0018      	movs	r0, r3
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0016      	movs	r6, r2
 8002132:	031b      	lsls	r3, r3, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	4d32      	ldr	r5, [pc, #200]	; (8002200 <__gedf2+0xe0>)
 8002138:	030f      	lsls	r7, r1, #12
 800213a:	004a      	lsls	r2, r1, #1
 800213c:	4699      	mov	r9, r3
 800213e:	0043      	lsls	r3, r0, #1
 8002140:	46a4      	mov	ip, r4
 8002142:	46b0      	mov	r8, r6
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	0d5b      	lsrs	r3, r3, #21
 800214c:	0fc0      	lsrs	r0, r0, #31
 800214e:	42aa      	cmp	r2, r5
 8002150:	d029      	beq.n	80021a6 <__gedf2+0x86>
 8002152:	42ab      	cmp	r3, r5
 8002154:	d018      	beq.n	8002188 <__gedf2+0x68>
 8002156:	2a00      	cmp	r2, #0
 8002158:	d12a      	bne.n	80021b0 <__gedf2+0x90>
 800215a:	433c      	orrs	r4, r7
 800215c:	46a3      	mov	fp, r4
 800215e:	4265      	negs	r5, r4
 8002160:	4165      	adcs	r5, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <__gedf2+0x4c>
 8002166:	464c      	mov	r4, r9
 8002168:	4326      	orrs	r6, r4
 800216a:	d027      	beq.n	80021bc <__gedf2+0x9c>
 800216c:	2d00      	cmp	r5, #0
 800216e:	d115      	bne.n	800219c <__gedf2+0x7c>
 8002170:	4281      	cmp	r1, r0
 8002172:	d028      	beq.n	80021c6 <__gedf2+0xa6>
 8002174:	2002      	movs	r0, #2
 8002176:	3901      	subs	r1, #1
 8002178:	4008      	ands	r0, r1
 800217a:	3801      	subs	r0, #1
 800217c:	bcf0      	pop	{r4, r5, r6, r7}
 800217e:	46bb      	mov	fp, r7
 8002180:	46b2      	mov	sl, r6
 8002182:	46a9      	mov	r9, r5
 8002184:	46a0      	mov	r8, r4
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d12f      	bne.n	80021ee <__gedf2+0xce>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ee      	bne.n	8002170 <__gedf2+0x50>
 8002192:	433c      	orrs	r4, r7
 8002194:	4265      	negs	r5, r4
 8002196:	4165      	adcs	r5, r4
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e9      	beq.n	8002170 <__gedf2+0x50>
 800219c:	2800      	cmp	r0, #0
 800219e:	d1ed      	bne.n	800217c <__gedf2+0x5c>
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7ea      	b.n	800217c <__gedf2+0x5c>
 80021a6:	003d      	movs	r5, r7
 80021a8:	4325      	orrs	r5, r4
 80021aa:	d120      	bne.n	80021ee <__gedf2+0xce>
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d0eb      	beq.n	8002188 <__gedf2+0x68>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1dd      	bne.n	8002170 <__gedf2+0x50>
 80021b4:	464c      	mov	r4, r9
 80021b6:	4326      	orrs	r6, r4
 80021b8:	d1da      	bne.n	8002170 <__gedf2+0x50>
 80021ba:	e7db      	b.n	8002174 <__gedf2+0x54>
 80021bc:	465b      	mov	r3, fp
 80021be:	2000      	movs	r0, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0db      	beq.n	800217c <__gedf2+0x5c>
 80021c4:	e7d6      	b.n	8002174 <__gedf2+0x54>
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc0a      	bgt.n	80021e0 <__gedf2+0xc0>
 80021ca:	dbe7      	blt.n	800219c <__gedf2+0x7c>
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d8d1      	bhi.n	8002174 <__gedf2+0x54>
 80021d0:	d010      	beq.n	80021f4 <__gedf2+0xd4>
 80021d2:	2000      	movs	r0, #0
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d2d1      	bcs.n	800217c <__gedf2+0x5c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	d0e1      	beq.n	80021a0 <__gedf2+0x80>
 80021dc:	0008      	movs	r0, r1
 80021de:	e7cd      	b.n	800217c <__gedf2+0x5c>
 80021e0:	4243      	negs	r3, r0
 80021e2:	4158      	adcs	r0, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	4240      	negs	r0, r0
 80021e8:	4018      	ands	r0, r3
 80021ea:	3801      	subs	r0, #1
 80021ec:	e7c6      	b.n	800217c <__gedf2+0x5c>
 80021ee:	2002      	movs	r0, #2
 80021f0:	4240      	negs	r0, r0
 80021f2:	e7c3      	b.n	800217c <__gedf2+0x5c>
 80021f4:	45c4      	cmp	ip, r8
 80021f6:	d8bd      	bhi.n	8002174 <__gedf2+0x54>
 80021f8:	2000      	movs	r0, #0
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d2be      	bcs.n	800217c <__gedf2+0x5c>
 80021fe:	e7eb      	b.n	80021d8 <__gedf2+0xb8>
 8002200:	000007ff 	.word	0x000007ff

08002204 <__ledf2>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	464e      	mov	r6, r9
 8002208:	4645      	mov	r5, r8
 800220a:	4657      	mov	r7, sl
 800220c:	46de      	mov	lr, fp
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	b5e0      	push	{r5, r6, r7, lr}
 8002214:	0016      	movs	r6, r2
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	0b1b      	lsrs	r3, r3, #12
 800221a:	4d31      	ldr	r5, [pc, #196]	; (80022e0 <__ledf2+0xdc>)
 800221c:	030f      	lsls	r7, r1, #12
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	0043      	lsls	r3, r0, #1
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d011      	beq.n	800225a <__ledf2+0x56>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d014      	beq.n	8002264 <__ledf2+0x60>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d12f      	bne.n	800229e <__ledf2+0x9a>
 800223e:	433c      	orrs	r4, r7
 8002240:	46a3      	mov	fp, r4
 8002242:	4265      	negs	r5, r4
 8002244:	4165      	adcs	r5, r4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__ledf2+0x70>
 800224a:	464c      	mov	r4, r9
 800224c:	4326      	orrs	r6, r4
 800224e:	d111      	bne.n	8002274 <__ledf2+0x70>
 8002250:	465b      	mov	r3, fp
 8002252:	2000      	movs	r0, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <__ledf2+0x84>
 8002258:	e010      	b.n	800227c <__ledf2+0x78>
 800225a:	003d      	movs	r5, r7
 800225c:	4325      	orrs	r5, r4
 800225e:	d112      	bne.n	8002286 <__ledf2+0x82>
 8002260:	4293      	cmp	r3, r2
 8002262:	d11c      	bne.n	800229e <__ledf2+0x9a>
 8002264:	464d      	mov	r5, r9
 8002266:	432e      	orrs	r6, r5
 8002268:	d10d      	bne.n	8002286 <__ledf2+0x82>
 800226a:	2a00      	cmp	r2, #0
 800226c:	d104      	bne.n	8002278 <__ledf2+0x74>
 800226e:	433c      	orrs	r4, r7
 8002270:	4265      	negs	r5, r4
 8002272:	4165      	adcs	r5, r4
 8002274:	2d00      	cmp	r5, #0
 8002276:	d10d      	bne.n	8002294 <__ledf2+0x90>
 8002278:	4281      	cmp	r1, r0
 800227a:	d016      	beq.n	80022aa <__ledf2+0xa6>
 800227c:	2002      	movs	r0, #2
 800227e:	3901      	subs	r1, #1
 8002280:	4008      	ands	r0, r1
 8002282:	3801      	subs	r0, #1
 8002284:	e000      	b.n	8002288 <__ledf2+0x84>
 8002286:	2002      	movs	r0, #2
 8002288:	bcf0      	pop	{r4, r5, r6, r7}
 800228a:	46bb      	mov	fp, r7
 800228c:	46b2      	mov	sl, r6
 800228e:	46a9      	mov	r9, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f7      	bne.n	8002288 <__ledf2+0x84>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f4      	b.n	8002288 <__ledf2+0x84>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ea      	bne.n	8002278 <__ledf2+0x74>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e7      	bne.n	8002278 <__ledf2+0x74>
 80022a8:	e7e8      	b.n	800227c <__ledf2+0x78>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd06      	ble.n	80022bc <__ledf2+0xb8>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	2302      	movs	r3, #2
 80022b4:	4240      	negs	r0, r0
 80022b6:	4018      	ands	r0, r3
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7e5      	b.n	8002288 <__ledf2+0x84>
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbe9      	blt.n	8002294 <__ledf2+0x90>
 80022c0:	454f      	cmp	r7, r9
 80022c2:	d8db      	bhi.n	800227c <__ledf2+0x78>
 80022c4:	d006      	beq.n	80022d4 <__ledf2+0xd0>
 80022c6:	2000      	movs	r0, #0
 80022c8:	454f      	cmp	r7, r9
 80022ca:	d2dd      	bcs.n	8002288 <__ledf2+0x84>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d0e3      	beq.n	8002298 <__ledf2+0x94>
 80022d0:	0008      	movs	r0, r1
 80022d2:	e7d9      	b.n	8002288 <__ledf2+0x84>
 80022d4:	45c4      	cmp	ip, r8
 80022d6:	d8d1      	bhi.n	800227c <__ledf2+0x78>
 80022d8:	2000      	movs	r0, #0
 80022da:	45c4      	cmp	ip, r8
 80022dc:	d2d4      	bcs.n	8002288 <__ledf2+0x84>
 80022de:	e7f5      	b.n	80022cc <__ledf2+0xc8>
 80022e0:	000007ff 	.word	0x000007ff

080022e4 <__aeabi_dmul>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	464e      	mov	r6, r9
 80022ea:	4645      	mov	r5, r8
 80022ec:	46de      	mov	lr, fp
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	4698      	mov	r8, r3
 80022f2:	030c      	lsls	r4, r1, #12
 80022f4:	004b      	lsls	r3, r1, #1
 80022f6:	0006      	movs	r6, r0
 80022f8:	4692      	mov	sl, r2
 80022fa:	b087      	sub	sp, #28
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d5b      	lsrs	r3, r3, #21
 8002300:	0fcf      	lsrs	r7, r1, #31
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <__aeabi_dmul+0xfc>
 8002306:	4add      	ldr	r2, [pc, #884]	; (800267c <__aeabi_dmul+0x398>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x2a>
 800230c:	e086      	b.n	800241c <__aeabi_dmul+0x138>
 800230e:	0f42      	lsrs	r2, r0, #29
 8002310:	00e4      	lsls	r4, r4, #3
 8002312:	4314      	orrs	r4, r2
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0412      	lsls	r2, r2, #16
 8002318:	4314      	orrs	r4, r2
 800231a:	4ad9      	ldr	r2, [pc, #868]	; (8002680 <__aeabi_dmul+0x39c>)
 800231c:	00c5      	lsls	r5, r0, #3
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	4699      	mov	r9, r3
 8002328:	469b      	mov	fp, r3
 800232a:	4643      	mov	r3, r8
 800232c:	4642      	mov	r2, r8
 800232e:	031e      	lsls	r6, r3, #12
 8002330:	0fd2      	lsrs	r2, r2, #31
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4650      	mov	r0, sl
 8002336:	4690      	mov	r8, r2
 8002338:	0b36      	lsrs	r6, r6, #12
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x5c>
 800233e:	e078      	b.n	8002432 <__aeabi_dmul+0x14e>
 8002340:	4ace      	ldr	r2, [pc, #824]	; (800267c <__aeabi_dmul+0x398>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <__aeabi_dmul+0x9e>
 8002346:	49ce      	ldr	r1, [pc, #824]	; (8002680 <__aeabi_dmul+0x39c>)
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	468c      	mov	ip, r1
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	4463      	add	r3, ip
 8002350:	00f6      	lsls	r6, r6, #3
 8002352:	468c      	mov	ip, r1
 8002354:	4316      	orrs	r6, r2
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	449c      	add	ip, r3
 800235a:	0412      	lsls	r2, r2, #16
 800235c:	4663      	mov	r3, ip
 800235e:	4316      	orrs	r6, r2
 8002360:	00c2      	lsls	r2, r0, #3
 8002362:	2000      	movs	r0, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	9900      	ldr	r1, [sp, #0]
 8002368:	4643      	mov	r3, r8
 800236a:	3101      	adds	r1, #1
 800236c:	468c      	mov	ip, r1
 800236e:	4649      	mov	r1, r9
 8002370:	407b      	eors	r3, r7
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	290f      	cmp	r1, #15
 8002376:	d900      	bls.n	800237a <__aeabi_dmul+0x96>
 8002378:	e07e      	b.n	8002478 <__aeabi_dmul+0x194>
 800237a:	4bc2      	ldr	r3, [pc, #776]	; (8002684 <__aeabi_dmul+0x3a0>)
 800237c:	0089      	lsls	r1, r1, #2
 800237e:	5859      	ldr	r1, [r3, r1]
 8002380:	468f      	mov	pc, r1
 8002382:	4652      	mov	r2, sl
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4332      	orrs	r2, r6
 8002388:	d000      	beq.n	800238c <__aeabi_dmul+0xa8>
 800238a:	e156      	b.n	800263a <__aeabi_dmul+0x356>
 800238c:	49bb      	ldr	r1, [pc, #748]	; (800267c <__aeabi_dmul+0x398>)
 800238e:	2600      	movs	r6, #0
 8002390:	468c      	mov	ip, r1
 8002392:	4463      	add	r3, ip
 8002394:	4649      	mov	r1, r9
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	4319      	orrs	r1, r3
 800239c:	4689      	mov	r9, r1
 800239e:	2002      	movs	r0, #2
 80023a0:	e7e1      	b.n	8002366 <__aeabi_dmul+0x82>
 80023a2:	4643      	mov	r3, r8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	0034      	movs	r4, r6
 80023a8:	0015      	movs	r5, r2
 80023aa:	4683      	mov	fp, r0
 80023ac:	465b      	mov	r3, fp
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d05e      	beq.n	8002470 <__aeabi_dmul+0x18c>
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dmul+0xd4>
 80023b6:	e1f3      	b.n	80027a0 <__aeabi_dmul+0x4bc>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0xda>
 80023bc:	e118      	b.n	80025f0 <__aeabi_dmul+0x30c>
 80023be:	2200      	movs	r2, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2500      	movs	r5, #0
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	0512      	lsls	r2, r2, #20
 80023c8:	4322      	orrs	r2, r4
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0028      	movs	r0, r5
 80023d0:	0011      	movs	r1, r2
 80023d2:	b007      	add	sp, #28
 80023d4:	bcf0      	pop	{r4, r5, r6, r7}
 80023d6:	46bb      	mov	fp, r7
 80023d8:	46b2      	mov	sl, r6
 80023da:	46a9      	mov	r9, r5
 80023dc:	46a0      	mov	r8, r4
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e0:	0025      	movs	r5, r4
 80023e2:	4305      	orrs	r5, r0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x104>
 80023e6:	e141      	b.n	800266c <__aeabi_dmul+0x388>
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x10a>
 80023ec:	e1ad      	b.n	800274a <__aeabi_dmul+0x466>
 80023ee:	0020      	movs	r0, r4
 80023f0:	f000 fef0 	bl	80031d4 <__clzsi2>
 80023f4:	0001      	movs	r1, r0
 80023f6:	0002      	movs	r2, r0
 80023f8:	390b      	subs	r1, #11
 80023fa:	231d      	movs	r3, #29
 80023fc:	0010      	movs	r0, r2
 80023fe:	1a5b      	subs	r3, r3, r1
 8002400:	0031      	movs	r1, r6
 8002402:	0035      	movs	r5, r6
 8002404:	3808      	subs	r0, #8
 8002406:	4084      	lsls	r4, r0
 8002408:	40d9      	lsrs	r1, r3
 800240a:	4085      	lsls	r5, r0
 800240c:	430c      	orrs	r4, r1
 800240e:	489e      	ldr	r0, [pc, #632]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002410:	1a83      	subs	r3, r0, r2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	4699      	mov	r9, r3
 8002418:	469b      	mov	fp, r3
 800241a:	e786      	b.n	800232a <__aeabi_dmul+0x46>
 800241c:	0005      	movs	r5, r0
 800241e:	4325      	orrs	r5, r4
 8002420:	d000      	beq.n	8002424 <__aeabi_dmul+0x140>
 8002422:	e11c      	b.n	800265e <__aeabi_dmul+0x37a>
 8002424:	2208      	movs	r2, #8
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	2400      	movs	r4, #0
 800242c:	4691      	mov	r9, r2
 800242e:	469b      	mov	fp, r3
 8002430:	e77b      	b.n	800232a <__aeabi_dmul+0x46>
 8002432:	4652      	mov	r2, sl
 8002434:	4332      	orrs	r2, r6
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x156>
 8002438:	e10a      	b.n	8002650 <__aeabi_dmul+0x36c>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dmul+0x15c>
 800243e:	e176      	b.n	800272e <__aeabi_dmul+0x44a>
 8002440:	0030      	movs	r0, r6
 8002442:	f000 fec7 	bl	80031d4 <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	3a0b      	subs	r2, #11
 800244a:	231d      	movs	r3, #29
 800244c:	0001      	movs	r1, r0
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	4652      	mov	r2, sl
 8002452:	3908      	subs	r1, #8
 8002454:	40da      	lsrs	r2, r3
 8002456:	408e      	lsls	r6, r1
 8002458:	4316      	orrs	r6, r2
 800245a:	4652      	mov	r2, sl
 800245c:	408a      	lsls	r2, r1
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	4989      	ldr	r1, [pc, #548]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002462:	1a18      	subs	r0, r3, r0
 8002464:	0003      	movs	r3, r0
 8002466:	468c      	mov	ip, r1
 8002468:	4463      	add	r3, ip
 800246a:	2000      	movs	r0, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	e77a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002470:	2400      	movs	r4, #0
 8002472:	2500      	movs	r5, #0
 8002474:	4a81      	ldr	r2, [pc, #516]	; (800267c <__aeabi_dmul+0x398>)
 8002476:	e7a5      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002478:	0c2f      	lsrs	r7, r5, #16
 800247a:	042d      	lsls	r5, r5, #16
 800247c:	0c2d      	lsrs	r5, r5, #16
 800247e:	002b      	movs	r3, r5
 8002480:	0c11      	lsrs	r1, r2, #16
 8002482:	0412      	lsls	r2, r2, #16
 8002484:	0c12      	lsrs	r2, r2, #16
 8002486:	4353      	muls	r3, r2
 8002488:	4698      	mov	r8, r3
 800248a:	0013      	movs	r3, r2
 800248c:	0028      	movs	r0, r5
 800248e:	437b      	muls	r3, r7
 8002490:	4699      	mov	r9, r3
 8002492:	4348      	muls	r0, r1
 8002494:	4448      	add	r0, r9
 8002496:	4683      	mov	fp, r0
 8002498:	4640      	mov	r0, r8
 800249a:	000b      	movs	r3, r1
 800249c:	0c00      	lsrs	r0, r0, #16
 800249e:	4682      	mov	sl, r0
 80024a0:	4658      	mov	r0, fp
 80024a2:	437b      	muls	r3, r7
 80024a4:	4450      	add	r0, sl
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	4581      	cmp	r9, r0
 80024aa:	d906      	bls.n	80024ba <__aeabi_dmul+0x1d6>
 80024ac:	469a      	mov	sl, r3
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4699      	mov	r9, r3
 80024b4:	44ca      	add	sl, r9
 80024b6:	4653      	mov	r3, sl
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	0c03      	lsrs	r3, r0, #16
 80024bc:	469b      	mov	fp, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0400      	lsls	r0, r0, #16
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	4698      	mov	r8, r3
 80024c8:	0003      	movs	r3, r0
 80024ca:	4443      	add	r3, r8
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	0c33      	lsrs	r3, r6, #16
 80024d0:	4699      	mov	r9, r3
 80024d2:	002b      	movs	r3, r5
 80024d4:	0436      	lsls	r6, r6, #16
 80024d6:	0c36      	lsrs	r6, r6, #16
 80024d8:	4373      	muls	r3, r6
 80024da:	4698      	mov	r8, r3
 80024dc:	0033      	movs	r3, r6
 80024de:	437b      	muls	r3, r7
 80024e0:	469a      	mov	sl, r3
 80024e2:	464b      	mov	r3, r9
 80024e4:	435d      	muls	r5, r3
 80024e6:	435f      	muls	r7, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	4455      	add	r5, sl
 80024ec:	0c18      	lsrs	r0, r3, #16
 80024ee:	1940      	adds	r0, r0, r5
 80024f0:	4582      	cmp	sl, r0
 80024f2:	d903      	bls.n	80024fc <__aeabi_dmul+0x218>
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	469a      	mov	sl, r3
 80024fa:	4457      	add	r7, sl
 80024fc:	0c05      	lsrs	r5, r0, #16
 80024fe:	19eb      	adds	r3, r5, r7
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	4643      	mov	r3, r8
 8002504:	041d      	lsls	r5, r3, #16
 8002506:	0c2d      	lsrs	r5, r5, #16
 8002508:	0400      	lsls	r0, r0, #16
 800250a:	1940      	adds	r0, r0, r5
 800250c:	0c25      	lsrs	r5, r4, #16
 800250e:	0424      	lsls	r4, r4, #16
 8002510:	0c24      	lsrs	r4, r4, #16
 8002512:	0027      	movs	r7, r4
 8002514:	4357      	muls	r7, r2
 8002516:	436a      	muls	r2, r5
 8002518:	4690      	mov	r8, r2
 800251a:	002a      	movs	r2, r5
 800251c:	0c3b      	lsrs	r3, r7, #16
 800251e:	469a      	mov	sl, r3
 8002520:	434a      	muls	r2, r1
 8002522:	4361      	muls	r1, r4
 8002524:	4441      	add	r1, r8
 8002526:	4451      	add	r1, sl
 8002528:	4483      	add	fp, r0
 800252a:	4588      	cmp	r8, r1
 800252c:	d903      	bls.n	8002536 <__aeabi_dmul+0x252>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	4698      	mov	r8, r3
 8002534:	4442      	add	r2, r8
 8002536:	043f      	lsls	r7, r7, #16
 8002538:	0c0b      	lsrs	r3, r1, #16
 800253a:	0c3f      	lsrs	r7, r7, #16
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	19c9      	adds	r1, r1, r7
 8002540:	0027      	movs	r7, r4
 8002542:	4698      	mov	r8, r3
 8002544:	464b      	mov	r3, r9
 8002546:	4377      	muls	r7, r6
 8002548:	435c      	muls	r4, r3
 800254a:	436e      	muls	r6, r5
 800254c:	435d      	muls	r5, r3
 800254e:	0c3b      	lsrs	r3, r7, #16
 8002550:	4699      	mov	r9, r3
 8002552:	19a4      	adds	r4, r4, r6
 8002554:	444c      	add	r4, r9
 8002556:	4442      	add	r2, r8
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	42a6      	cmp	r6, r4
 800255c:	d904      	bls.n	8002568 <__aeabi_dmul+0x284>
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4698      	mov	r8, r3
 8002564:	4445      	add	r5, r8
 8002566:	9503      	str	r5, [sp, #12]
 8002568:	9b02      	ldr	r3, [sp, #8]
 800256a:	043f      	lsls	r7, r7, #16
 800256c:	445b      	add	r3, fp
 800256e:	001e      	movs	r6, r3
 8002570:	4283      	cmp	r3, r0
 8002572:	4180      	sbcs	r0, r0
 8002574:	0423      	lsls	r3, r4, #16
 8002576:	4698      	mov	r8, r3
 8002578:	9b05      	ldr	r3, [sp, #20]
 800257a:	0c3f      	lsrs	r7, r7, #16
 800257c:	4447      	add	r7, r8
 800257e:	4698      	mov	r8, r3
 8002580:	1876      	adds	r6, r6, r1
 8002582:	428e      	cmp	r6, r1
 8002584:	4189      	sbcs	r1, r1
 8002586:	4447      	add	r7, r8
 8002588:	4240      	negs	r0, r0
 800258a:	183d      	adds	r5, r7, r0
 800258c:	46a8      	mov	r8, r5
 800258e:	4693      	mov	fp, r2
 8002590:	4249      	negs	r1, r1
 8002592:	468a      	mov	sl, r1
 8002594:	44c3      	add	fp, r8
 8002596:	429f      	cmp	r7, r3
 8002598:	41bf      	sbcs	r7, r7
 800259a:	4580      	cmp	r8, r0
 800259c:	4180      	sbcs	r0, r0
 800259e:	9b03      	ldr	r3, [sp, #12]
 80025a0:	44da      	add	sl, fp
 80025a2:	4698      	mov	r8, r3
 80025a4:	4653      	mov	r3, sl
 80025a6:	4240      	negs	r0, r0
 80025a8:	427f      	negs	r7, r7
 80025aa:	4307      	orrs	r7, r0
 80025ac:	0c24      	lsrs	r4, r4, #16
 80025ae:	4593      	cmp	fp, r2
 80025b0:	4192      	sbcs	r2, r2
 80025b2:	458a      	cmp	sl, r1
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	193f      	adds	r7, r7, r4
 80025b8:	0ddc      	lsrs	r4, r3, #23
 80025ba:	9b04      	ldr	r3, [sp, #16]
 80025bc:	0275      	lsls	r5, r6, #9
 80025be:	431d      	orrs	r5, r3
 80025c0:	1e68      	subs	r0, r5, #1
 80025c2:	4185      	sbcs	r5, r0
 80025c4:	4653      	mov	r3, sl
 80025c6:	4252      	negs	r2, r2
 80025c8:	4249      	negs	r1, r1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	18bf      	adds	r7, r7, r2
 80025ce:	4447      	add	r7, r8
 80025d0:	0df6      	lsrs	r6, r6, #23
 80025d2:	027f      	lsls	r7, r7, #9
 80025d4:	4335      	orrs	r5, r6
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	433c      	orrs	r4, r7
 80025da:	4315      	orrs	r5, r2
 80025dc:	01fb      	lsls	r3, r7, #7
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dmul+0x2fe>
 80025e0:	e0c1      	b.n	8002766 <__aeabi_dmul+0x482>
 80025e2:	2101      	movs	r1, #1
 80025e4:	086a      	lsrs	r2, r5, #1
 80025e6:	400d      	ands	r5, r1
 80025e8:	4315      	orrs	r5, r2
 80025ea:	07e2      	lsls	r2, r4, #31
 80025ec:	4315      	orrs	r5, r2
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	4926      	ldr	r1, [pc, #152]	; (800268c <__aeabi_dmul+0x3a8>)
 80025f2:	4461      	add	r1, ip
 80025f4:	2900      	cmp	r1, #0
 80025f6:	dd56      	ble.n	80026a6 <__aeabi_dmul+0x3c2>
 80025f8:	076b      	lsls	r3, r5, #29
 80025fa:	d009      	beq.n	8002610 <__aeabi_dmul+0x32c>
 80025fc:	220f      	movs	r2, #15
 80025fe:	402a      	ands	r2, r5
 8002600:	2a04      	cmp	r2, #4
 8002602:	d005      	beq.n	8002610 <__aeabi_dmul+0x32c>
 8002604:	1d2a      	adds	r2, r5, #4
 8002606:	42aa      	cmp	r2, r5
 8002608:	41ad      	sbcs	r5, r5
 800260a:	426d      	negs	r5, r5
 800260c:	1964      	adds	r4, r4, r5
 800260e:	0015      	movs	r5, r2
 8002610:	01e3      	lsls	r3, r4, #7
 8002612:	d504      	bpl.n	800261e <__aeabi_dmul+0x33a>
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <__aeabi_dmul+0x3ac>)
 8002618:	00c9      	lsls	r1, r1, #3
 800261a:	4014      	ands	r4, r2
 800261c:	4461      	add	r1, ip
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <__aeabi_dmul+0x3b0>)
 8002620:	4291      	cmp	r1, r2
 8002622:	dd00      	ble.n	8002626 <__aeabi_dmul+0x342>
 8002624:	e724      	b.n	8002470 <__aeabi_dmul+0x18c>
 8002626:	0762      	lsls	r2, r4, #29
 8002628:	08ed      	lsrs	r5, r5, #3
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	0549      	lsls	r1, r1, #21
 800262e:	4315      	orrs	r5, r2
 8002630:	0b24      	lsrs	r4, r4, #12
 8002632:	0d4a      	lsrs	r2, r1, #21
 8002634:	e6c6      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002636:	9701      	str	r7, [sp, #4]
 8002638:	e6b8      	b.n	80023ac <__aeabi_dmul+0xc8>
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <__aeabi_dmul+0x398>)
 800263c:	2003      	movs	r0, #3
 800263e:	4694      	mov	ip, r2
 8002640:	4463      	add	r3, ip
 8002642:	464a      	mov	r2, r9
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2303      	movs	r3, #3
 8002648:	431a      	orrs	r2, r3
 800264a:	4691      	mov	r9, r2
 800264c:	4652      	mov	r2, sl
 800264e:	e68a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002650:	4649      	mov	r1, r9
 8002652:	2301      	movs	r3, #1
 8002654:	4319      	orrs	r1, r3
 8002656:	4689      	mov	r9, r1
 8002658:	2600      	movs	r6, #0
 800265a:	2001      	movs	r0, #1
 800265c:	e683      	b.n	8002366 <__aeabi_dmul+0x82>
 800265e:	220c      	movs	r2, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2303      	movs	r3, #3
 8002664:	0005      	movs	r5, r0
 8002666:	4691      	mov	r9, r2
 8002668:	469b      	mov	fp, r3
 800266a:	e65e      	b.n	800232a <__aeabi_dmul+0x46>
 800266c:	2304      	movs	r3, #4
 800266e:	4699      	mov	r9, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	2400      	movs	r4, #0
 8002678:	469b      	mov	fp, r3
 800267a:	e656      	b.n	800232a <__aeabi_dmul+0x46>
 800267c:	000007ff 	.word	0x000007ff
 8002680:	fffffc01 	.word	0xfffffc01
 8002684:	08013cb4 	.word	0x08013cb4
 8002688:	fffffc0d 	.word	0xfffffc0d
 800268c:	000003ff 	.word	0x000003ff
 8002690:	feffffff 	.word	0xfeffffff
 8002694:	000007fe 	.word	0x000007fe
 8002698:	2300      	movs	r3, #0
 800269a:	2480      	movs	r4, #128	; 0x80
 800269c:	2500      	movs	r5, #0
 800269e:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	0324      	lsls	r4, r4, #12
 80026a4:	e68e      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80026a6:	2001      	movs	r0, #1
 80026a8:	1a40      	subs	r0, r0, r1
 80026aa:	2838      	cmp	r0, #56	; 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x3cc>
 80026ae:	e686      	b.n	80023be <__aeabi_dmul+0xda>
 80026b0:	281f      	cmp	r0, #31
 80026b2:	dd5b      	ble.n	800276c <__aeabi_dmul+0x488>
 80026b4:	221f      	movs	r2, #31
 80026b6:	0023      	movs	r3, r4
 80026b8:	4252      	negs	r2, r2
 80026ba:	1a51      	subs	r1, r2, r1
 80026bc:	40cb      	lsrs	r3, r1
 80026be:	0019      	movs	r1, r3
 80026c0:	2820      	cmp	r0, #32
 80026c2:	d003      	beq.n	80026cc <__aeabi_dmul+0x3e8>
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <__aeabi_dmul+0x4d0>)
 80026c6:	4462      	add	r2, ip
 80026c8:	4094      	lsls	r4, r2
 80026ca:	4325      	orrs	r5, r4
 80026cc:	1e6a      	subs	r2, r5, #1
 80026ce:	4195      	sbcs	r5, r2
 80026d0:	002a      	movs	r2, r5
 80026d2:	430a      	orrs	r2, r1
 80026d4:	2107      	movs	r1, #7
 80026d6:	000d      	movs	r5, r1
 80026d8:	2400      	movs	r4, #0
 80026da:	4015      	ands	r5, r2
 80026dc:	4211      	tst	r1, r2
 80026de:	d05b      	beq.n	8002798 <__aeabi_dmul+0x4b4>
 80026e0:	210f      	movs	r1, #15
 80026e2:	2400      	movs	r4, #0
 80026e4:	4011      	ands	r1, r2
 80026e6:	2904      	cmp	r1, #4
 80026e8:	d053      	beq.n	8002792 <__aeabi_dmul+0x4ae>
 80026ea:	1d11      	adds	r1, r2, #4
 80026ec:	4291      	cmp	r1, r2
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	4252      	negs	r2, r2
 80026f2:	18a4      	adds	r4, r4, r2
 80026f4:	000a      	movs	r2, r1
 80026f6:	0223      	lsls	r3, r4, #8
 80026f8:	d54b      	bpl.n	8002792 <__aeabi_dmul+0x4ae>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2400      	movs	r4, #0
 80026fe:	2500      	movs	r5, #0
 8002700:	e660      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	421c      	tst	r4, r3
 8002708:	d009      	beq.n	800271e <__aeabi_dmul+0x43a>
 800270a:	421e      	tst	r6, r3
 800270c:	d107      	bne.n	800271e <__aeabi_dmul+0x43a>
 800270e:	4333      	orrs	r3, r6
 8002710:	031c      	lsls	r4, r3, #12
 8002712:	4643      	mov	r3, r8
 8002714:	0015      	movs	r5, r2
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <__aeabi_dmul+0x4cc>)
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	e652      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	4314      	orrs	r4, r2
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <__aeabi_dmul+0x4cc>)
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	9701      	str	r7, [sp, #4]
 800272c:	e64a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800272e:	f000 fd51 	bl	80031d4 <__clzsi2>
 8002732:	0003      	movs	r3, r0
 8002734:	001a      	movs	r2, r3
 8002736:	3215      	adds	r2, #21
 8002738:	3020      	adds	r0, #32
 800273a:	2a1c      	cmp	r2, #28
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dmul+0x45c>
 800273e:	e684      	b.n	800244a <__aeabi_dmul+0x166>
 8002740:	4656      	mov	r6, sl
 8002742:	3b08      	subs	r3, #8
 8002744:	2200      	movs	r2, #0
 8002746:	409e      	lsls	r6, r3
 8002748:	e689      	b.n	800245e <__aeabi_dmul+0x17a>
 800274a:	f000 fd43 	bl	80031d4 <__clzsi2>
 800274e:	0001      	movs	r1, r0
 8002750:	0002      	movs	r2, r0
 8002752:	3115      	adds	r1, #21
 8002754:	3220      	adds	r2, #32
 8002756:	291c      	cmp	r1, #28
 8002758:	dc00      	bgt.n	800275c <__aeabi_dmul+0x478>
 800275a:	e64e      	b.n	80023fa <__aeabi_dmul+0x116>
 800275c:	0034      	movs	r4, r6
 800275e:	3808      	subs	r0, #8
 8002760:	2500      	movs	r5, #0
 8002762:	4084      	lsls	r4, r0
 8002764:	e653      	b.n	800240e <__aeabi_dmul+0x12a>
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	469c      	mov	ip, r3
 800276a:	e741      	b.n	80025f0 <__aeabi_dmul+0x30c>
 800276c:	4912      	ldr	r1, [pc, #72]	; (80027b8 <__aeabi_dmul+0x4d4>)
 800276e:	0022      	movs	r2, r4
 8002770:	4461      	add	r1, ip
 8002772:	002e      	movs	r6, r5
 8002774:	408d      	lsls	r5, r1
 8002776:	408a      	lsls	r2, r1
 8002778:	40c6      	lsrs	r6, r0
 800277a:	1e69      	subs	r1, r5, #1
 800277c:	418d      	sbcs	r5, r1
 800277e:	4332      	orrs	r2, r6
 8002780:	432a      	orrs	r2, r5
 8002782:	40c4      	lsrs	r4, r0
 8002784:	0753      	lsls	r3, r2, #29
 8002786:	d0b6      	beq.n	80026f6 <__aeabi_dmul+0x412>
 8002788:	210f      	movs	r1, #15
 800278a:	4011      	ands	r1, r2
 800278c:	2904      	cmp	r1, #4
 800278e:	d1ac      	bne.n	80026ea <__aeabi_dmul+0x406>
 8002790:	e7b1      	b.n	80026f6 <__aeabi_dmul+0x412>
 8002792:	0765      	lsls	r5, r4, #29
 8002794:	0264      	lsls	r4, r4, #9
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	4315      	orrs	r5, r2
 800279c:	2200      	movs	r2, #0
 800279e:	e611      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	4314      	orrs	r4, r2
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4a01      	ldr	r2, [pc, #4]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e60a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007ff 	.word	0x000007ff
 80027b4:	0000043e 	.word	0x0000043e
 80027b8:	0000041e 	.word	0x0000041e

080027bc <__aeabi_dsub>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4657      	mov	r7, sl
 80027c0:	464e      	mov	r6, r9
 80027c2:	4645      	mov	r5, r8
 80027c4:	46de      	mov	lr, fp
 80027c6:	0004      	movs	r4, r0
 80027c8:	b5e0      	push	{r5, r6, r7, lr}
 80027ca:	001f      	movs	r7, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	030b      	lsls	r3, r1, #12
 80027d0:	0f62      	lsrs	r2, r4, #29
 80027d2:	004e      	lsls	r6, r1, #1
 80027d4:	0fcd      	lsrs	r5, r1, #31
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	0339      	lsls	r1, r7, #12
 80027da:	4313      	orrs	r3, r2
 80027dc:	0a49      	lsrs	r1, r1, #9
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	0f44      	lsrs	r4, r0, #29
 80027e2:	4321      	orrs	r1, r4
 80027e4:	4cc2      	ldr	r4, [pc, #776]	; (8002af0 <__aeabi_dsub+0x334>)
 80027e6:	4691      	mov	r9, r2
 80027e8:	4692      	mov	sl, r2
 80027ea:	00c0      	lsls	r0, r0, #3
 80027ec:	007a      	lsls	r2, r7, #1
 80027ee:	4680      	mov	r8, r0
 80027f0:	0d76      	lsrs	r6, r6, #21
 80027f2:	0d52      	lsrs	r2, r2, #21
 80027f4:	0fff      	lsrs	r7, r7, #31
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x40>
 80027fa:	e0b4      	b.n	8002966 <__aeabi_dsub+0x1aa>
 80027fc:	2401      	movs	r4, #1
 80027fe:	4067      	eors	r7, r4
 8002800:	46bb      	mov	fp, r7
 8002802:	42bd      	cmp	r5, r7
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x4c>
 8002806:	e088      	b.n	800291a <__aeabi_dsub+0x15e>
 8002808:	1ab4      	subs	r4, r6, r2
 800280a:	46a4      	mov	ip, r4
 800280c:	2c00      	cmp	r4, #0
 800280e:	dc00      	bgt.n	8002812 <__aeabi_dsub+0x56>
 8002810:	e0b2      	b.n	8002978 <__aeabi_dsub+0x1bc>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x5c>
 8002816:	e0c5      	b.n	80029a4 <__aeabi_dsub+0x1e8>
 8002818:	4ab5      	ldr	r2, [pc, #724]	; (8002af0 <__aeabi_dsub+0x334>)
 800281a:	4296      	cmp	r6, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x64>
 800281e:	e28b      	b.n	8002d38 <__aeabi_dsub+0x57c>
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	4311      	orrs	r1, r2
 8002826:	4662      	mov	r2, ip
 8002828:	2a38      	cmp	r2, #56	; 0x38
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0x72>
 800282c:	e1a1      	b.n	8002b72 <__aeabi_dsub+0x3b6>
 800282e:	2a1f      	cmp	r2, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x78>
 8002832:	e216      	b.n	8002c62 <__aeabi_dsub+0x4a6>
 8002834:	2720      	movs	r7, #32
 8002836:	000c      	movs	r4, r1
 8002838:	1abf      	subs	r7, r7, r2
 800283a:	40bc      	lsls	r4, r7
 800283c:	0002      	movs	r2, r0
 800283e:	46a0      	mov	r8, r4
 8002840:	4664      	mov	r4, ip
 8002842:	40b8      	lsls	r0, r7
 8002844:	40e2      	lsrs	r2, r4
 8002846:	4644      	mov	r4, r8
 8002848:	4314      	orrs	r4, r2
 800284a:	0002      	movs	r2, r0
 800284c:	1e50      	subs	r0, r2, #1
 800284e:	4182      	sbcs	r2, r0
 8002850:	4660      	mov	r0, ip
 8002852:	40c1      	lsrs	r1, r0
 8002854:	4322      	orrs	r2, r4
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	4649      	mov	r1, r9
 800285a:	1a8c      	subs	r4, r1, r2
 800285c:	45a1      	cmp	r9, r4
 800285e:	4192      	sbcs	r2, r2
 8002860:	4252      	negs	r2, r2
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	4698      	mov	r8, r3
 8002866:	4643      	mov	r3, r8
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	d400      	bmi.n	800286e <__aeabi_dsub+0xb2>
 800286c:	e117      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 800286e:	4643      	mov	r3, r8
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	4698      	mov	r8, r3
 8002876:	4643      	mov	r3, r8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0xc2>
 800287c:	e16c      	b.n	8002b58 <__aeabi_dsub+0x39c>
 800287e:	4640      	mov	r0, r8
 8002880:	f000 fca8 	bl	80031d4 <__clzsi2>
 8002884:	0002      	movs	r2, r0
 8002886:	3a08      	subs	r2, #8
 8002888:	2120      	movs	r1, #32
 800288a:	0020      	movs	r0, r4
 800288c:	4643      	mov	r3, r8
 800288e:	1a89      	subs	r1, r1, r2
 8002890:	4093      	lsls	r3, r2
 8002892:	40c8      	lsrs	r0, r1
 8002894:	4094      	lsls	r4, r2
 8002896:	4303      	orrs	r3, r0
 8002898:	4296      	cmp	r6, r2
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0xe2>
 800289c:	e157      	b.n	8002b4e <__aeabi_dsub+0x392>
 800289e:	1b96      	subs	r6, r2, r6
 80028a0:	1c71      	adds	r1, r6, #1
 80028a2:	291f      	cmp	r1, #31
 80028a4:	dd00      	ble.n	80028a8 <__aeabi_dsub+0xec>
 80028a6:	e1cb      	b.n	8002c40 <__aeabi_dsub+0x484>
 80028a8:	2220      	movs	r2, #32
 80028aa:	0018      	movs	r0, r3
 80028ac:	0026      	movs	r6, r4
 80028ae:	1a52      	subs	r2, r2, r1
 80028b0:	4094      	lsls	r4, r2
 80028b2:	4090      	lsls	r0, r2
 80028b4:	40ce      	lsrs	r6, r1
 80028b6:	40cb      	lsrs	r3, r1
 80028b8:	1e62      	subs	r2, r4, #1
 80028ba:	4194      	sbcs	r4, r2
 80028bc:	4330      	orrs	r0, r6
 80028be:	4698      	mov	r8, r3
 80028c0:	2600      	movs	r6, #0
 80028c2:	4304      	orrs	r4, r0
 80028c4:	0763      	lsls	r3, r4, #29
 80028c6:	d009      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028c8:	230f      	movs	r3, #15
 80028ca:	4023      	ands	r3, r4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028d0:	1d23      	adds	r3, r4, #4
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	41a4      	sbcs	r4, r4
 80028d6:	4264      	negs	r4, r4
 80028d8:	44a0      	add	r8, r4
 80028da:	001c      	movs	r4, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	d400      	bmi.n	80028e4 <__aeabi_dsub+0x128>
 80028e2:	e0df      	b.n	8002aa4 <__aeabi_dsub+0x2e8>
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <__aeabi_dsub+0x334>)
 80028e6:	3601      	adds	r6, #1
 80028e8:	429e      	cmp	r6, r3
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x132>
 80028ec:	e0fb      	b.n	8002ae6 <__aeabi_dsub+0x32a>
 80028ee:	4642      	mov	r2, r8
 80028f0:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <__aeabi_dsub+0x338>)
 80028f2:	08e4      	lsrs	r4, r4, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	0571      	lsls	r1, r6, #21
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4322      	orrs	r2, r4
 8002900:	0b1b      	lsrs	r3, r3, #12
 8002902:	0d49      	lsrs	r1, r1, #21
 8002904:	0509      	lsls	r1, r1, #20
 8002906:	07ed      	lsls	r5, r5, #31
 8002908:	4319      	orrs	r1, r3
 800290a:	4329      	orrs	r1, r5
 800290c:	0010      	movs	r0, r2
 800290e:	bcf0      	pop	{r4, r5, r6, r7}
 8002910:	46bb      	mov	fp, r7
 8002912:	46b2      	mov	sl, r6
 8002914:	46a9      	mov	r9, r5
 8002916:	46a0      	mov	r8, r4
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	1ab4      	subs	r4, r6, r2
 800291c:	46a4      	mov	ip, r4
 800291e:	2c00      	cmp	r4, #0
 8002920:	dd58      	ble.n	80029d4 <__aeabi_dsub+0x218>
 8002922:	2a00      	cmp	r2, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x16c>
 8002926:	e09e      	b.n	8002a66 <__aeabi_dsub+0x2aa>
 8002928:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <__aeabi_dsub+0x334>)
 800292a:	4296      	cmp	r6, r2
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x174>
 800292e:	e13b      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	4311      	orrs	r1, r2
 8002936:	4662      	mov	r2, ip
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x182>
 800293c:	e0c1      	b.n	8002ac2 <__aeabi_dsub+0x306>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dc00      	bgt.n	8002944 <__aeabi_dsub+0x188>
 8002942:	e1bb      	b.n	8002cbc <__aeabi_dsub+0x500>
 8002944:	000c      	movs	r4, r1
 8002946:	3a20      	subs	r2, #32
 8002948:	40d4      	lsrs	r4, r2
 800294a:	0022      	movs	r2, r4
 800294c:	4664      	mov	r4, ip
 800294e:	2c20      	cmp	r4, #32
 8002950:	d004      	beq.n	800295c <__aeabi_dsub+0x1a0>
 8002952:	2740      	movs	r7, #64	; 0x40
 8002954:	1b3f      	subs	r7, r7, r4
 8002956:	40b9      	lsls	r1, r7
 8002958:	4308      	orrs	r0, r1
 800295a:	4680      	mov	r8, r0
 800295c:	4644      	mov	r4, r8
 800295e:	1e61      	subs	r1, r4, #1
 8002960:	418c      	sbcs	r4, r1
 8002962:	4314      	orrs	r4, r2
 8002964:	e0b1      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002966:	000c      	movs	r4, r1
 8002968:	4304      	orrs	r4, r0
 800296a:	d02a      	beq.n	80029c2 <__aeabi_dsub+0x206>
 800296c:	46bb      	mov	fp, r7
 800296e:	42bd      	cmp	r5, r7
 8002970:	d02d      	beq.n	80029ce <__aeabi_dsub+0x212>
 8002972:	4c61      	ldr	r4, [pc, #388]	; (8002af8 <__aeabi_dsub+0x33c>)
 8002974:	46a4      	mov	ip, r4
 8002976:	44b4      	add	ip, r6
 8002978:	4664      	mov	r4, ip
 800297a:	2c00      	cmp	r4, #0
 800297c:	d05c      	beq.n	8002a38 <__aeabi_dsub+0x27c>
 800297e:	1b94      	subs	r4, r2, r6
 8002980:	46a4      	mov	ip, r4
 8002982:	2e00      	cmp	r6, #0
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x1cc>
 8002986:	e115      	b.n	8002bb4 <__aeabi_dsub+0x3f8>
 8002988:	464d      	mov	r5, r9
 800298a:	431d      	orrs	r5, r3
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x1d4>
 800298e:	e1c3      	b.n	8002d18 <__aeabi_dsub+0x55c>
 8002990:	1e65      	subs	r5, r4, #1
 8002992:	2c01      	cmp	r4, #1
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1dc>
 8002996:	e20c      	b.n	8002db2 <__aeabi_dsub+0x5f6>
 8002998:	4e55      	ldr	r6, [pc, #340]	; (8002af0 <__aeabi_dsub+0x334>)
 800299a:	42b4      	cmp	r4, r6
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1e4>
 800299e:	e1f8      	b.n	8002d92 <__aeabi_dsub+0x5d6>
 80029a0:	46ac      	mov	ip, r5
 80029a2:	e10e      	b.n	8002bc2 <__aeabi_dsub+0x406>
 80029a4:	000a      	movs	r2, r1
 80029a6:	4302      	orrs	r2, r0
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x1f0>
 80029aa:	e136      	b.n	8002c1a <__aeabi_dsub+0x45e>
 80029ac:	0022      	movs	r2, r4
 80029ae:	3a01      	subs	r2, #1
 80029b0:	2c01      	cmp	r4, #1
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x1fa>
 80029b4:	e1c6      	b.n	8002d44 <__aeabi_dsub+0x588>
 80029b6:	4c4e      	ldr	r4, [pc, #312]	; (8002af0 <__aeabi_dsub+0x334>)
 80029b8:	45a4      	cmp	ip, r4
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x202>
 80029bc:	e0f4      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 80029be:	4694      	mov	ip, r2
 80029c0:	e731      	b.n	8002826 <__aeabi_dsub+0x6a>
 80029c2:	2401      	movs	r4, #1
 80029c4:	4067      	eors	r7, r4
 80029c6:	46bb      	mov	fp, r7
 80029c8:	42bd      	cmp	r5, r7
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x212>
 80029cc:	e71c      	b.n	8002808 <__aeabi_dsub+0x4c>
 80029ce:	4c4a      	ldr	r4, [pc, #296]	; (8002af8 <__aeabi_dsub+0x33c>)
 80029d0:	46a4      	mov	ip, r4
 80029d2:	44b4      	add	ip, r6
 80029d4:	4664      	mov	r4, ip
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x220>
 80029da:	e0cf      	b.n	8002b7c <__aeabi_dsub+0x3c0>
 80029dc:	1b94      	subs	r4, r2, r6
 80029de:	46a4      	mov	ip, r4
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x22a>
 80029e4:	e15c      	b.n	8002ca0 <__aeabi_dsub+0x4e4>
 80029e6:	4e42      	ldr	r6, [pc, #264]	; (8002af0 <__aeabi_dsub+0x334>)
 80029e8:	42b2      	cmp	r2, r6
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x232>
 80029ec:	e1ec      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 80029ee:	2680      	movs	r6, #128	; 0x80
 80029f0:	0436      	lsls	r6, r6, #16
 80029f2:	4333      	orrs	r3, r6
 80029f4:	4664      	mov	r4, ip
 80029f6:	2c38      	cmp	r4, #56	; 0x38
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x240>
 80029fa:	e1b3      	b.n	8002d64 <__aeabi_dsub+0x5a8>
 80029fc:	2c1f      	cmp	r4, #31
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x246>
 8002a00:	e238      	b.n	8002e74 <__aeabi_dsub+0x6b8>
 8002a02:	2620      	movs	r6, #32
 8002a04:	1b36      	subs	r6, r6, r4
 8002a06:	001c      	movs	r4, r3
 8002a08:	40b4      	lsls	r4, r6
 8002a0a:	464f      	mov	r7, r9
 8002a0c:	46a0      	mov	r8, r4
 8002a0e:	4664      	mov	r4, ip
 8002a10:	40e7      	lsrs	r7, r4
 8002a12:	4644      	mov	r4, r8
 8002a14:	433c      	orrs	r4, r7
 8002a16:	464f      	mov	r7, r9
 8002a18:	40b7      	lsls	r7, r6
 8002a1a:	003e      	movs	r6, r7
 8002a1c:	1e77      	subs	r7, r6, #1
 8002a1e:	41be      	sbcs	r6, r7
 8002a20:	4334      	orrs	r4, r6
 8002a22:	4666      	mov	r6, ip
 8002a24:	40f3      	lsrs	r3, r6
 8002a26:	18c9      	adds	r1, r1, r3
 8002a28:	1824      	adds	r4, r4, r0
 8002a2a:	4284      	cmp	r4, r0
 8002a2c:	419b      	sbcs	r3, r3
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4698      	mov	r8, r3
 8002a32:	0016      	movs	r6, r2
 8002a34:	4488      	add	r8, r1
 8002a36:	e04e      	b.n	8002ad6 <__aeabi_dsub+0x31a>
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <__aeabi_dsub+0x340>)
 8002a3a:	1c74      	adds	r4, r6, #1
 8002a3c:	4214      	tst	r4, r2
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_dsub+0x286>
 8002a40:	e0d6      	b.n	8002bf0 <__aeabi_dsub+0x434>
 8002a42:	464a      	mov	r2, r9
 8002a44:	431a      	orrs	r2, r3
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d000      	beq.n	8002a4c <__aeabi_dsub+0x290>
 8002a4a:	e15b      	b.n	8002d04 <__aeabi_dsub+0x548>
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d100      	bne.n	8002a52 <__aeabi_dsub+0x296>
 8002a50:	e1a5      	b.n	8002d9e <__aeabi_dsub+0x5e2>
 8002a52:	000a      	movs	r2, r1
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d000      	beq.n	8002a5a <__aeabi_dsub+0x29e>
 8002a58:	e1bb      	b.n	8002dd2 <__aeabi_dsub+0x616>
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08d2      	lsrs	r2, r2, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	e027      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002a66:	000a      	movs	r2, r1
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x2b2>
 8002a6c:	e174      	b.n	8002d58 <__aeabi_dsub+0x59c>
 8002a6e:	0022      	movs	r2, r4
 8002a70:	3a01      	subs	r2, #1
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d005      	beq.n	8002a82 <__aeabi_dsub+0x2c6>
 8002a76:	4c1e      	ldr	r4, [pc, #120]	; (8002af0 <__aeabi_dsub+0x334>)
 8002a78:	45a4      	cmp	ip, r4
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x2c2>
 8002a7c:	e094      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002a7e:	4694      	mov	ip, r2
 8002a80:	e759      	b.n	8002936 <__aeabi_dsub+0x17a>
 8002a82:	4448      	add	r0, r9
 8002a84:	4548      	cmp	r0, r9
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	4252      	negs	r2, r2
 8002a90:	4490      	add	r8, r2
 8002a92:	4643      	mov	r3, r8
 8002a94:	2602      	movs	r6, #2
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	d500      	bpl.n	8002a9c <__aeabi_dsub+0x2e0>
 8002a9a:	e0c4      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002a9c:	3e01      	subs	r6, #1
 8002a9e:	0763      	lsls	r3, r4, #29
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x2e8>
 8002aa2:	e711      	b.n	80028c8 <__aeabi_dsub+0x10c>
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	46b4      	mov	ip, r6
 8002aa8:	0759      	lsls	r1, r3, #29
 8002aaa:	08e2      	lsrs	r2, r4, #3
 8002aac:	430a      	orrs	r2, r1
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ab2:	458c      	cmp	ip, r1
 8002ab4:	d040      	beq.n	8002b38 <__aeabi_dsub+0x37c>
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	0b1b      	lsrs	r3, r3, #12
 8002abe:	0d49      	lsrs	r1, r1, #21
 8002ac0:	e720      	b.n	8002904 <__aeabi_dsub+0x148>
 8002ac2:	4301      	orrs	r1, r0
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	1e61      	subs	r1, r4, #1
 8002ac8:	418c      	sbcs	r4, r1
 8002aca:	444c      	add	r4, r9
 8002acc:	454c      	cmp	r4, r9
 8002ace:	4192      	sbcs	r2, r2
 8002ad0:	4252      	negs	r2, r2
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4498      	add	r8, r3
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	d5e0      	bpl.n	8002a9e <__aeabi_dsub+0x2e2>
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ade:	3601      	adds	r6, #1
 8002ae0:	429e      	cmp	r6, r3
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x32a>
 8002ae4:	e09f      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002ae6:	0031      	movs	r1, r6
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	e70a      	b.n	8002904 <__aeabi_dsub+0x148>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x34a>
 8002b04:	e160      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 8002b06:	000a      	movs	r2, r1
 8002b08:	4302      	orrs	r2, r0
 8002b0a:	d04d      	beq.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	075c      	lsls	r4, r3, #29
 8002b10:	08d2      	lsrs	r2, r2, #3
 8002b12:	4322      	orrs	r2, r4
 8002b14:	2480      	movs	r4, #128	; 0x80
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	0324      	lsls	r4, r4, #12
 8002b1a:	4223      	tst	r3, r4
 8002b1c:	d007      	beq.n	8002b2e <__aeabi_dsub+0x372>
 8002b1e:	08ce      	lsrs	r6, r1, #3
 8002b20:	4226      	tst	r6, r4
 8002b22:	d104      	bne.n	8002b2e <__aeabi_dsub+0x372>
 8002b24:	465d      	mov	r5, fp
 8002b26:	0033      	movs	r3, r6
 8002b28:	08c2      	lsrs	r2, r0, #3
 8002b2a:	0749      	lsls	r1, r1, #29
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	0f51      	lsrs	r1, r2, #29
 8002b30:	00d2      	lsls	r2, r2, #3
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	0749      	lsls	r1, r1, #29
 8002b36:	430a      	orrs	r2, r1
 8002b38:	0011      	movs	r1, r2
 8002b3a:	4319      	orrs	r1, r3
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x384>
 8002b3e:	e1c8      	b.n	8002ed2 <__aeabi_dsub+0x716>
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0309      	lsls	r1, r1, #12
 8002b44:	430b      	orrs	r3, r1
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	49d5      	ldr	r1, [pc, #852]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002b4a:	0b1b      	lsrs	r3, r3, #12
 8002b4c:	e6da      	b.n	8002904 <__aeabi_dsub+0x148>
 8002b4e:	49d5      	ldr	r1, [pc, #852]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002b50:	1ab6      	subs	r6, r6, r2
 8002b52:	400b      	ands	r3, r1
 8002b54:	4698      	mov	r8, r3
 8002b56:	e6b5      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 fb3b 	bl	80031d4 <__clzsi2>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	3218      	adds	r2, #24
 8002b62:	2a1f      	cmp	r2, #31
 8002b64:	dc00      	bgt.n	8002b68 <__aeabi_dsub+0x3ac>
 8002b66:	e68f      	b.n	8002888 <__aeabi_dsub+0xcc>
 8002b68:	0023      	movs	r3, r4
 8002b6a:	3808      	subs	r0, #8
 8002b6c:	4083      	lsls	r3, r0
 8002b6e:	2400      	movs	r4, #0
 8002b70:	e692      	b.n	8002898 <__aeabi_dsub+0xdc>
 8002b72:	4308      	orrs	r0, r1
 8002b74:	0002      	movs	r2, r0
 8002b76:	1e50      	subs	r0, r2, #1
 8002b78:	4182      	sbcs	r2, r0
 8002b7a:	e66d      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002b7c:	4cca      	ldr	r4, [pc, #808]	; (8002ea8 <__aeabi_dsub+0x6ec>)
 8002b7e:	1c72      	adds	r2, r6, #1
 8002b80:	4222      	tst	r2, r4
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x3ca>
 8002b84:	e0ad      	b.n	8002ce2 <__aeabi_dsub+0x526>
 8002b86:	464a      	mov	r2, r9
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d1b8      	bne.n	8002b00 <__aeabi_dsub+0x344>
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x3d8>
 8002b92:	e158      	b.n	8002e46 <__aeabi_dsub+0x68a>
 8002b94:	000a      	movs	r2, r1
 8002b96:	4302      	orrs	r2, r0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x3e0>
 8002b9a:	e159      	b.n	8002e50 <__aeabi_dsub+0x694>
 8002b9c:	464a      	mov	r2, r9
 8002b9e:	0759      	lsls	r1, r3, #29
 8002ba0:	08d2      	lsrs	r2, r2, #3
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	e786      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	0759      	lsls	r1, r3, #29
 8002bac:	08d2      	lsrs	r2, r2, #3
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	e7c1      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002bb4:	4dba      	ldr	r5, [pc, #744]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002bb6:	42aa      	cmp	r2, r5
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x400>
 8002bba:	e11e      	b.n	8002dfa <__aeabi_dsub+0x63e>
 8002bbc:	2580      	movs	r5, #128	; 0x80
 8002bbe:	042d      	lsls	r5, r5, #16
 8002bc0:	432b      	orrs	r3, r5
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	2c38      	cmp	r4, #56	; 0x38
 8002bc6:	dc5d      	bgt.n	8002c84 <__aeabi_dsub+0x4c8>
 8002bc8:	2c1f      	cmp	r4, #31
 8002bca:	dd00      	ble.n	8002bce <__aeabi_dsub+0x412>
 8002bcc:	e0d0      	b.n	8002d70 <__aeabi_dsub+0x5b4>
 8002bce:	2520      	movs	r5, #32
 8002bd0:	4667      	mov	r7, ip
 8002bd2:	1b2d      	subs	r5, r5, r4
 8002bd4:	464e      	mov	r6, r9
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	40fe      	lsrs	r6, r7
 8002bda:	40ac      	lsls	r4, r5
 8002bdc:	4334      	orrs	r4, r6
 8002bde:	464e      	mov	r6, r9
 8002be0:	40ae      	lsls	r6, r5
 8002be2:	0035      	movs	r5, r6
 8002be4:	40fb      	lsrs	r3, r7
 8002be6:	1e6e      	subs	r6, r5, #1
 8002be8:	41b5      	sbcs	r5, r6
 8002bea:	1ac9      	subs	r1, r1, r3
 8002bec:	432c      	orrs	r4, r5
 8002bee:	e04e      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	1a14      	subs	r4, r2, r0
 8002bf4:	45a1      	cmp	r9, r4
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	4252      	negs	r2, r2
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	1a5f      	subs	r7, r3, r1
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4647      	mov	r7, r8
 8002c02:	1bd2      	subs	r2, r2, r7
 8002c04:	4690      	mov	r8, r2
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	d500      	bpl.n	8002c0c <__aeabi_dsub+0x450>
 8002c0a:	e08b      	b.n	8002d24 <__aeabi_dsub+0x568>
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	d000      	beq.n	8002c14 <__aeabi_dsub+0x458>
 8002c12:	e630      	b.n	8002876 <__aeabi_dsub+0xba>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2500      	movs	r5, #0
 8002c18:	e74d      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	0759      	lsls	r1, r3, #29
 8002c1e:	08d2      	lsrs	r2, r2, #3
 8002c20:	430a      	orrs	r2, r1
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	e744      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002c26:	4642      	mov	r2, r8
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002c2a:	0861      	lsrs	r1, r4, #1
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	4014      	ands	r4, r2
 8002c34:	430c      	orrs	r4, r1
 8002c36:	07da      	lsls	r2, r3, #31
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	4314      	orrs	r4, r2
 8002c3e:	e641      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002c40:	001a      	movs	r2, r3
 8002c42:	3e1f      	subs	r6, #31
 8002c44:	40f2      	lsrs	r2, r6
 8002c46:	0016      	movs	r6, r2
 8002c48:	2920      	cmp	r1, #32
 8002c4a:	d003      	beq.n	8002c54 <__aeabi_dsub+0x498>
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	1a51      	subs	r1, r2, r1
 8002c50:	408b      	lsls	r3, r1
 8002c52:	431c      	orrs	r4, r3
 8002c54:	1e62      	subs	r2, r4, #1
 8002c56:	4194      	sbcs	r4, r2
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4334      	orrs	r4, r6
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	2600      	movs	r6, #0
 8002c60:	e71d      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002c62:	000c      	movs	r4, r1
 8002c64:	3a20      	subs	r2, #32
 8002c66:	40d4      	lsrs	r4, r2
 8002c68:	0022      	movs	r2, r4
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2c20      	cmp	r4, #32
 8002c6e:	d004      	beq.n	8002c7a <__aeabi_dsub+0x4be>
 8002c70:	2740      	movs	r7, #64	; 0x40
 8002c72:	1b3f      	subs	r7, r7, r4
 8002c74:	40b9      	lsls	r1, r7
 8002c76:	4308      	orrs	r0, r1
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4644      	mov	r4, r8
 8002c7c:	1e61      	subs	r1, r4, #1
 8002c7e:	418c      	sbcs	r4, r1
 8002c80:	4322      	orrs	r2, r4
 8002c82:	e5e9      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002c84:	464c      	mov	r4, r9
 8002c86:	4323      	orrs	r3, r4
 8002c88:	001c      	movs	r4, r3
 8002c8a:	1e63      	subs	r3, r4, #1
 8002c8c:	419c      	sbcs	r4, r3
 8002c8e:	1b04      	subs	r4, r0, r4
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	419b      	sbcs	r3, r3
 8002c94:	425b      	negs	r3, r3
 8002c96:	1acb      	subs	r3, r1, r3
 8002c98:	4698      	mov	r8, r3
 8002c9a:	465d      	mov	r5, fp
 8002c9c:	0016      	movs	r6, r2
 8002c9e:	e5e2      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002ca0:	464e      	mov	r6, r9
 8002ca2:	431e      	orrs	r6, r3
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x4ec>
 8002ca6:	e0ae      	b.n	8002e06 <__aeabi_dsub+0x64a>
 8002ca8:	1e66      	subs	r6, r4, #1
 8002caa:	2c01      	cmp	r4, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4f4>
 8002cae:	e0fd      	b.n	8002eac <__aeabi_dsub+0x6f0>
 8002cb0:	4f7b      	ldr	r7, [pc, #492]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x4fc>
 8002cb6:	e107      	b.n	8002ec8 <__aeabi_dsub+0x70c>
 8002cb8:	46b4      	mov	ip, r6
 8002cba:	e69b      	b.n	80029f4 <__aeabi_dsub+0x238>
 8002cbc:	4664      	mov	r4, ip
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	1b12      	subs	r2, r2, r4
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	4094      	lsls	r4, r2
 8002cc6:	0007      	movs	r7, r0
 8002cc8:	4090      	lsls	r0, r2
 8002cca:	46a0      	mov	r8, r4
 8002ccc:	4664      	mov	r4, ip
 8002cce:	1e42      	subs	r2, r0, #1
 8002cd0:	4190      	sbcs	r0, r2
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	40e7      	lsrs	r7, r4
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	40d1      	lsrs	r1, r2
 8002cda:	433c      	orrs	r4, r7
 8002cdc:	4304      	orrs	r4, r0
 8002cde:	185b      	adds	r3, r3, r1
 8002ce0:	e6f3      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002ce2:	4c6f      	ldr	r4, [pc, #444]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x52e>
 8002ce8:	e0d5      	b.n	8002e96 <__aeabi_dsub+0x6da>
 8002cea:	4448      	add	r0, r9
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	4548      	cmp	r0, r9
 8002cf0:	4189      	sbcs	r1, r1
 8002cf2:	4249      	negs	r1, r1
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	07dc      	lsls	r4, r3, #31
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	0016      	movs	r6, r2
 8002d00:	4304      	orrs	r4, r0
 8002d02:	e6cc      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x54e>
 8002d08:	e082      	b.n	8002e10 <__aeabi_dsub+0x654>
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	d140      	bne.n	8002d92 <__aeabi_dsub+0x5d6>
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	e713      	b.n	8002b40 <__aeabi_dsub+0x384>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08c2      	lsrs	r2, r0, #3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	465d      	mov	r5, fp
 8002d20:	08cb      	lsrs	r3, r1, #3
 8002d22:	e6c5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d24:	464a      	mov	r2, r9
 8002d26:	1a84      	subs	r4, r0, r2
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	4192      	sbcs	r2, r2
 8002d2c:	1acb      	subs	r3, r1, r3
 8002d2e:	4252      	negs	r2, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	4698      	mov	r8, r3
 8002d34:	465d      	mov	r5, fp
 8002d36:	e59e      	b.n	8002876 <__aeabi_dsub+0xba>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	0759      	lsls	r1, r3, #29
 8002d3c:	08d2      	lsrs	r2, r2, #3
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	e6f9      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d44:	464a      	mov	r2, r9
 8002d46:	1a14      	subs	r4, r2, r0
 8002d48:	45a1      	cmp	r9, r4
 8002d4a:	4192      	sbcs	r2, r2
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	4252      	negs	r2, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	4698      	mov	r8, r3
 8002d54:	2601      	movs	r6, #1
 8002d56:	e586      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	0759      	lsls	r1, r3, #29
 8002d5c:	08d2      	lsrs	r2, r2, #3
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	e6a5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d64:	464c      	mov	r4, r9
 8002d66:	4323      	orrs	r3, r4
 8002d68:	001c      	movs	r4, r3
 8002d6a:	1e63      	subs	r3, r4, #1
 8002d6c:	419c      	sbcs	r4, r3
 8002d6e:	e65b      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002d70:	4665      	mov	r5, ip
 8002d72:	001e      	movs	r6, r3
 8002d74:	3d20      	subs	r5, #32
 8002d76:	40ee      	lsrs	r6, r5
 8002d78:	2c20      	cmp	r4, #32
 8002d7a:	d005      	beq.n	8002d88 <__aeabi_dsub+0x5cc>
 8002d7c:	2540      	movs	r5, #64	; 0x40
 8002d7e:	1b2d      	subs	r5, r5, r4
 8002d80:	40ab      	lsls	r3, r5
 8002d82:	464c      	mov	r4, r9
 8002d84:	431c      	orrs	r4, r3
 8002d86:	46a2      	mov	sl, r4
 8002d88:	4654      	mov	r4, sl
 8002d8a:	1e63      	subs	r3, r4, #1
 8002d8c:	419c      	sbcs	r4, r3
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	e77d      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002d92:	074b      	lsls	r3, r1, #29
 8002d94:	08c2      	lsrs	r2, r0, #3
 8002d96:	431a      	orrs	r2, r3
 8002d98:	465d      	mov	r5, fp
 8002d9a:	08cb      	lsrs	r3, r1, #3
 8002d9c:	e6cc      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d9e:	000a      	movs	r2, r1
 8002da0:	4302      	orrs	r2, r0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x5ea>
 8002da4:	e736      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002da6:	074b      	lsls	r3, r1, #29
 8002da8:	08c2      	lsrs	r2, r0, #3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	465d      	mov	r5, fp
 8002dae:	08cb      	lsrs	r3, r1, #3
 8002db0:	e681      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002db2:	464a      	mov	r2, r9
 8002db4:	1a84      	subs	r4, r0, r2
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	4192      	sbcs	r2, r2
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	4252      	negs	r2, r2
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	2601      	movs	r6, #1
 8002dc6:	e54e      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	08c2      	lsrs	r2, r0, #3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	08cb      	lsrs	r3, r1, #3
 8002dd0:	e6b2      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	1a14      	subs	r4, r2, r0
 8002dd6:	45a1      	cmp	r9, r4
 8002dd8:	4192      	sbcs	r2, r2
 8002dda:	1a5f      	subs	r7, r3, r1
 8002ddc:	4252      	negs	r2, r2
 8002dde:	1aba      	subs	r2, r7, r2
 8002de0:	4690      	mov	r8, r2
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	d56b      	bpl.n	8002ebe <__aeabi_dsub+0x702>
 8002de6:	464a      	mov	r2, r9
 8002de8:	1a84      	subs	r4, r0, r2
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	4192      	sbcs	r2, r2
 8002dee:	1acb      	subs	r3, r1, r3
 8002df0:	4252      	negs	r2, r2
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	4698      	mov	r8, r3
 8002df6:	465d      	mov	r5, fp
 8002df8:	e564      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	465d      	mov	r5, fp
 8002e02:	08cb      	lsrs	r3, r1, #3
 8002e04:	e698      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e06:	074b      	lsls	r3, r1, #29
 8002e08:	08c2      	lsrs	r2, r0, #3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	08cb      	lsrs	r3, r1, #3
 8002e0e:	e64f      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002e10:	000a      	movs	r2, r1
 8002e12:	4302      	orrs	r2, r0
 8002e14:	d090      	beq.n	8002d38 <__aeabi_dsub+0x57c>
 8002e16:	464a      	mov	r2, r9
 8002e18:	075c      	lsls	r4, r3, #29
 8002e1a:	08d2      	lsrs	r2, r2, #3
 8002e1c:	4314      	orrs	r4, r2
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	0312      	lsls	r2, r2, #12
 8002e24:	4213      	tst	r3, r2
 8002e26:	d008      	beq.n	8002e3a <__aeabi_dsub+0x67e>
 8002e28:	08ce      	lsrs	r6, r1, #3
 8002e2a:	4216      	tst	r6, r2
 8002e2c:	d105      	bne.n	8002e3a <__aeabi_dsub+0x67e>
 8002e2e:	08c0      	lsrs	r0, r0, #3
 8002e30:	0749      	lsls	r1, r1, #29
 8002e32:	4308      	orrs	r0, r1
 8002e34:	0004      	movs	r4, r0
 8002e36:	465d      	mov	r5, fp
 8002e38:	0033      	movs	r3, r6
 8002e3a:	0f61      	lsrs	r1, r4, #29
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	0749      	lsls	r1, r1, #29
 8002e40:	08d2      	lsrs	r2, r2, #3
 8002e42:	430a      	orrs	r2, r1
 8002e44:	e678      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e46:	074b      	lsls	r3, r1, #29
 8002e48:	08c2      	lsrs	r2, r0, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	08cb      	lsrs	r3, r1, #3
 8002e4e:	e632      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002e50:	4448      	add	r0, r9
 8002e52:	185b      	adds	r3, r3, r1
 8002e54:	4548      	cmp	r0, r9
 8002e56:	4192      	sbcs	r2, r2
 8002e58:	4698      	mov	r8, r3
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	4490      	add	r8, r2
 8002e5e:	4643      	mov	r3, r8
 8002e60:	0004      	movs	r4, r0
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	d400      	bmi.n	8002e68 <__aeabi_dsub+0x6ac>
 8002e66:	e61a      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e68:	4642      	mov	r2, r8
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	401a      	ands	r2, r3
 8002e70:	4690      	mov	r8, r2
 8002e72:	e614      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e74:	4666      	mov	r6, ip
 8002e76:	001f      	movs	r7, r3
 8002e78:	3e20      	subs	r6, #32
 8002e7a:	40f7      	lsrs	r7, r6
 8002e7c:	2c20      	cmp	r4, #32
 8002e7e:	d005      	beq.n	8002e8c <__aeabi_dsub+0x6d0>
 8002e80:	2640      	movs	r6, #64	; 0x40
 8002e82:	1b36      	subs	r6, r6, r4
 8002e84:	40b3      	lsls	r3, r6
 8002e86:	464c      	mov	r4, r9
 8002e88:	431c      	orrs	r4, r3
 8002e8a:	46a2      	mov	sl, r4
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	1e63      	subs	r3, r4, #1
 8002e90:	419c      	sbcs	r4, r3
 8002e92:	433c      	orrs	r4, r7
 8002e94:	e5c8      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002e96:	0011      	movs	r1, r2
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e532      	b.n	8002904 <__aeabi_dsub+0x148>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	000007fe 	.word	0x000007fe
 8002eac:	464a      	mov	r2, r9
 8002eae:	1814      	adds	r4, r2, r0
 8002eb0:	4284      	cmp	r4, r0
 8002eb2:	4192      	sbcs	r2, r2
 8002eb4:	185b      	adds	r3, r3, r1
 8002eb6:	4698      	mov	r8, r3
 8002eb8:	4252      	negs	r2, r2
 8002eba:	4490      	add	r8, r2
 8002ebc:	e5e9      	b.n	8002a92 <__aeabi_dsub+0x2d6>
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	4322      	orrs	r2, r4
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x70a>
 8002ec4:	e6a6      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002ec6:	e5ea      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08c2      	lsrs	r2, r0, #3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	08cb      	lsrs	r3, r1, #3
 8002ed0:	e632      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <__aeabi_dsub+0x720>)
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	e514      	b.n	8002904 <__aeabi_dsub+0x148>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002ee6:	030c      	lsls	r4, r1, #12
 8002ee8:	0016      	movs	r6, r2
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	031a      	lsls	r2, r3, #12
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b12      	lsrs	r2, r2, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d008      	beq.n	8002f0e <__aeabi_dcmpun+0x2e>
 8002efc:	4906      	ldr	r1, [pc, #24]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d103      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f04:	4332      	orrs	r2, r6
 8002f06:	0010      	movs	r0, r2
 8002f08:	1e42      	subs	r2, r0, #1
 8002f0a:	4190      	sbcs	r0, r2
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	432c      	orrs	r4, r5
 8002f12:	d1fb      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f14:	e7f2      	b.n	8002efc <__aeabi_dcmpun+0x1c>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	000007ff 	.word	0x000007ff

08002f1c <__aeabi_d2iz>:
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	b530      	push	{r4, r5, lr}
 8002f20:	4c13      	ldr	r4, [pc, #76]	; (8002f70 <__aeabi_d2iz+0x54>)
 8002f22:	0053      	lsls	r3, r2, #1
 8002f24:	0309      	lsls	r1, r1, #12
 8002f26:	0005      	movs	r5, r0
 8002f28:	0b09      	lsrs	r1, r1, #12
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	0fd2      	lsrs	r2, r2, #31
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd04      	ble.n	8002f3e <__aeabi_d2iz+0x22>
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x58>)
 8002f36:	4283      	cmp	r3, r0
 8002f38:	dd02      	ble.n	8002f40 <__aeabi_d2iz+0x24>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x5c>)
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0340      	lsls	r0, r0, #13
 8002f44:	4301      	orrs	r1, r0
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <__aeabi_d2iz+0x60>)
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	281f      	cmp	r0, #31
 8002f4c:	dd08      	ble.n	8002f60 <__aeabi_d2iz+0x44>
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x64>)
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
 8002f56:	4258      	negs	r0, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f0      	bne.n	8002f3e <__aeabi_d2iz+0x22>
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_d2iz+0x22>
 8002f60:	4c08      	ldr	r4, [pc, #32]	; (8002f84 <__aeabi_d2iz+0x68>)
 8002f62:	40c5      	lsrs	r5, r0
 8002f64:	46a4      	mov	ip, r4
 8002f66:	4463      	add	r3, ip
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	432b      	orrs	r3, r5
 8002f6e:	e7f2      	b.n	8002f56 <__aeabi_d2iz+0x3a>
 8002f70:	000003fe 	.word	0x000003fe
 8002f74:	0000041d 	.word	0x0000041d
 8002f78:	7fffffff 	.word	0x7fffffff
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	fffffbed 	.word	0xfffffbed

08002f88 <__aeabi_i2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d016      	beq.n	8002fbc <__aeabi_i2d+0x34>
 8002f8e:	17c3      	asrs	r3, r0, #31
 8002f90:	18c5      	adds	r5, r0, r3
 8002f92:	405d      	eors	r5, r3
 8002f94:	0fc4      	lsrs	r4, r0, #31
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f91c 	bl	80031d4 <__clzsi2>
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <__aeabi_i2d+0x5c>)
 8002f9e:	1a12      	subs	r2, r2, r0
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc16      	bgt.n	8002fd2 <__aeabi_i2d+0x4a>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	3315      	adds	r3, #21
 8002faa:	409e      	lsls	r6, r3
 8002fac:	230b      	movs	r3, #11
 8002fae:	1a18      	subs	r0, r3, r0
 8002fb0:	40c5      	lsrs	r5, r0
 8002fb2:	0553      	lsls	r3, r2, #21
 8002fb4:	032d      	lsls	r5, r5, #12
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	e003      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	380b      	subs	r0, #11
 8002fd4:	4085      	lsls	r5, r0
 8002fd6:	0553      	lsls	r3, r2, #21
 8002fd8:	032d      	lsls	r5, r5, #12
 8002fda:	2600      	movs	r6, #0
 8002fdc:	0b2d      	lsrs	r5, r5, #12
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	e7f0      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_ui2d>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e04      	subs	r4, r0, #0
 8002fec:	d010      	beq.n	8003010 <__aeabi_ui2d+0x28>
 8002fee:	f000 f8f1 	bl	80031d4 <__clzsi2>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_ui2d+0x48>)
 8002ff4:	1a1b      	subs	r3, r3, r0
 8002ff6:	280a      	cmp	r0, #10
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_ui2d+0x36>
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	40d1      	lsrs	r1, r2
 8003002:	3015      	adds	r0, #21
 8003004:	030a      	lsls	r2, r1, #12
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4084      	lsls	r4, r0
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e001      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	0020      	movs	r0, r4
 800301a:	0019      	movs	r1, r3
 800301c:	bd10      	pop	{r4, pc}
 800301e:	0022      	movs	r2, r4
 8003020:	380b      	subs	r0, #11
 8003022:	4082      	lsls	r2, r0
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	2400      	movs	r4, #0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e7f1      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003030:	0000041e 	.word	0x0000041e

08003034 <__aeabi_f2d>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0043      	lsls	r3, r0, #1
 8003038:	0246      	lsls	r6, r0, #9
 800303a:	0fc4      	lsrs	r4, r0, #31
 800303c:	20fe      	movs	r0, #254	; 0xfe
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	0a75      	lsrs	r5, r6, #9
 8003044:	4208      	tst	r0, r1
 8003046:	d00c      	beq.n	8003062 <__aeabi_f2d+0x2e>
 8003048:	22e0      	movs	r2, #224	; 0xe0
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4694      	mov	ip, r2
 800304e:	076d      	lsls	r5, r5, #29
 8003050:	0b36      	lsrs	r6, r6, #12
 8003052:	4463      	add	r3, ip
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	4333      	orrs	r3, r6
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0028      	movs	r0, r5
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x5c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01b      	beq.n	80030a2 <__aeabi_f2d+0x6e>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8b2 	bl	80031d4 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x7a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <__aeabi_f2d+0x88>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b16      	lsrs	r6, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7e1      	b.n	8003054 <__aeabi_f2d+0x20>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d009      	beq.n	80030a8 <__aeabi_f2d+0x74>
 8003094:	0b32      	lsrs	r2, r6, #12
 8003096:	2680      	movs	r6, #128	; 0x80
 8003098:	0336      	lsls	r6, r6, #12
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__aeabi_f2d+0x8c>)
 800309c:	076d      	lsls	r5, r5, #29
 800309e:	4316      	orrs	r6, r2
 80030a0:	e7d8      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2600      	movs	r6, #0
 80030a6:	e7d5      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030ac:	e7d2      	b.n	8003054 <__aeabi_f2d+0x20>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x4e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00000389 	.word	0x00000389
 80030c0:	000007ff 	.word	0x000007ff

080030c4 <__aeabi_d2f>:
 80030c4:	0002      	movs	r2, r0
 80030c6:	004b      	lsls	r3, r1, #1
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	0308      	lsls	r0, r1, #12
 80030cc:	0d5b      	lsrs	r3, r3, #21
 80030ce:	4e3d      	ldr	r6, [pc, #244]	; (80031c4 <__aeabi_d2f+0x100>)
 80030d0:	0fcc      	lsrs	r4, r1, #31
 80030d2:	0a40      	lsrs	r0, r0, #9
 80030d4:	0f51      	lsrs	r1, r2, #29
 80030d6:	1c5f      	adds	r7, r3, #1
 80030d8:	4308      	orrs	r0, r1
 80030da:	00d5      	lsls	r5, r2, #3
 80030dc:	4237      	tst	r7, r6
 80030de:	d00a      	beq.n	80030f6 <__aeabi_d2f+0x32>
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <__aeabi_d2f+0x104>)
 80030e2:	185e      	adds	r6, r3, r1
 80030e4:	2efe      	cmp	r6, #254	; 0xfe
 80030e6:	dd16      	ble.n	8003116 <__aeabi_d2f+0x52>
 80030e8:	23ff      	movs	r3, #255	; 0xff
 80030ea:	2100      	movs	r1, #0
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	430b      	orrs	r3, r1
 80030f0:	07e0      	lsls	r0, r4, #31
 80030f2:	4318      	orrs	r0, r3
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <__aeabi_d2f+0x44>
 80030fa:	4328      	orrs	r0, r5
 80030fc:	d027      	beq.n	800314e <__aeabi_d2f+0x8a>
 80030fe:	2105      	movs	r1, #5
 8003100:	0189      	lsls	r1, r1, #6
 8003102:	0a49      	lsrs	r1, r1, #9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e7f1      	b.n	80030ec <__aeabi_d2f+0x28>
 8003108:	4305      	orrs	r5, r0
 800310a:	d0ed      	beq.n	80030e8 <__aeabi_d2f+0x24>
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	03c9      	lsls	r1, r1, #15
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	4301      	orrs	r1, r0
 8003114:	e7ea      	b.n	80030ec <__aeabi_d2f+0x28>
 8003116:	2e00      	cmp	r6, #0
 8003118:	dd1c      	ble.n	8003154 <__aeabi_d2f+0x90>
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	0011      	movs	r1, r2
 800311e:	1e4a      	subs	r2, r1, #1
 8003120:	4191      	sbcs	r1, r2
 8003122:	00c0      	lsls	r0, r0, #3
 8003124:	0f6d      	lsrs	r5, r5, #29
 8003126:	4301      	orrs	r1, r0
 8003128:	4329      	orrs	r1, r5
 800312a:	074b      	lsls	r3, r1, #29
 800312c:	d048      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 800312e:	230f      	movs	r3, #15
 8003130:	400b      	ands	r3, r1
 8003132:	2b04      	cmp	r3, #4
 8003134:	d000      	beq.n	8003138 <__aeabi_d2f+0x74>
 8003136:	3104      	adds	r1, #4
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	04db      	lsls	r3, r3, #19
 800313c:	400b      	ands	r3, r1
 800313e:	d03f      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 8003140:	1c72      	adds	r2, r6, #1
 8003142:	2efe      	cmp	r6, #254	; 0xfe
 8003144:	d0d0      	beq.n	80030e8 <__aeabi_d2f+0x24>
 8003146:	0189      	lsls	r1, r1, #6
 8003148:	0a49      	lsrs	r1, r1, #9
 800314a:	b2d3      	uxtb	r3, r2
 800314c:	e7ce      	b.n	80030ec <__aeabi_d2f+0x28>
 800314e:	2300      	movs	r3, #0
 8003150:	2100      	movs	r1, #0
 8003152:	e7cb      	b.n	80030ec <__aeabi_d2f+0x28>
 8003154:	0032      	movs	r2, r6
 8003156:	3217      	adds	r2, #23
 8003158:	db22      	blt.n	80031a0 <__aeabi_d2f+0xdc>
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	221e      	movs	r2, #30
 800315e:	0409      	lsls	r1, r1, #16
 8003160:	4308      	orrs	r0, r1
 8003162:	1b92      	subs	r2, r2, r6
 8003164:	2a1f      	cmp	r2, #31
 8003166:	dd1d      	ble.n	80031a4 <__aeabi_d2f+0xe0>
 8003168:	2102      	movs	r1, #2
 800316a:	4249      	negs	r1, r1
 800316c:	1b8e      	subs	r6, r1, r6
 800316e:	0001      	movs	r1, r0
 8003170:	40f1      	lsrs	r1, r6
 8003172:	000e      	movs	r6, r1
 8003174:	2a20      	cmp	r2, #32
 8003176:	d004      	beq.n	8003182 <__aeabi_d2f+0xbe>
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <__aeabi_d2f+0x108>)
 800317a:	4694      	mov	ip, r2
 800317c:	4463      	add	r3, ip
 800317e:	4098      	lsls	r0, r3
 8003180:	4305      	orrs	r5, r0
 8003182:	0029      	movs	r1, r5
 8003184:	1e4d      	subs	r5, r1, #1
 8003186:	41a9      	sbcs	r1, r5
 8003188:	4331      	orrs	r1, r6
 800318a:	2600      	movs	r6, #0
 800318c:	074b      	lsls	r3, r1, #29
 800318e:	d1ce      	bne.n	800312e <__aeabi_d2f+0x6a>
 8003190:	2080      	movs	r0, #128	; 0x80
 8003192:	000b      	movs	r3, r1
 8003194:	04c0      	lsls	r0, r0, #19
 8003196:	2201      	movs	r2, #1
 8003198:	4003      	ands	r3, r0
 800319a:	4201      	tst	r1, r0
 800319c:	d1d3      	bne.n	8003146 <__aeabi_d2f+0x82>
 800319e:	e7af      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e7ac      	b.n	80030fe <__aeabi_d2f+0x3a>
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <__aeabi_d2f+0x10c>)
 80031a6:	468c      	mov	ip, r1
 80031a8:	0029      	movs	r1, r5
 80031aa:	4463      	add	r3, ip
 80031ac:	40d1      	lsrs	r1, r2
 80031ae:	409d      	lsls	r5, r3
 80031b0:	000a      	movs	r2, r1
 80031b2:	0029      	movs	r1, r5
 80031b4:	4098      	lsls	r0, r3
 80031b6:	1e4d      	subs	r5, r1, #1
 80031b8:	41a9      	sbcs	r1, r5
 80031ba:	4301      	orrs	r1, r0
 80031bc:	4311      	orrs	r1, r2
 80031be:	e7e4      	b.n	800318a <__aeabi_d2f+0xc6>
 80031c0:	0033      	movs	r3, r6
 80031c2:	e79d      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031c4:	000007fe 	.word	0x000007fe
 80031c8:	fffffc80 	.word	0xfffffc80
 80031cc:	fffffca2 	.word	0xfffffca2
 80031d0:	fffffc82 	.word	0xfffffc82

080031d4 <__clzsi2>:
 80031d4:	211c      	movs	r1, #28
 80031d6:	2301      	movs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	4298      	cmp	r0, r3
 80031dc:	d301      	bcc.n	80031e2 <__clzsi2+0xe>
 80031de:	0c00      	lsrs	r0, r0, #16
 80031e0:	3910      	subs	r1, #16
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	4298      	cmp	r0, r3
 80031e6:	d301      	bcc.n	80031ec <__clzsi2+0x18>
 80031e8:	0a00      	lsrs	r0, r0, #8
 80031ea:	3908      	subs	r1, #8
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d301      	bcc.n	80031f6 <__clzsi2+0x22>
 80031f2:	0900      	lsrs	r0, r0, #4
 80031f4:	3904      	subs	r1, #4
 80031f6:	a202      	add	r2, pc, #8	; (adr r2, 8003200 <__clzsi2+0x2c>)
 80031f8:	5c10      	ldrb	r0, [r2, r0]
 80031fa:	1840      	adds	r0, r0, r1
 80031fc:	4770      	bx	lr
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	02020304 	.word	0x02020304
 8003204:	01010101 	.word	0x01010101
	...

08003210 <__divdi3>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	4657      	mov	r7, sl
 8003214:	464e      	mov	r6, r9
 8003216:	4645      	mov	r5, r8
 8003218:	46de      	mov	lr, fp
 800321a:	b5e0      	push	{r5, r6, r7, lr}
 800321c:	000f      	movs	r7, r1
 800321e:	0019      	movs	r1, r3
 8003220:	2300      	movs	r3, #0
 8003222:	0006      	movs	r6, r0
 8003224:	4698      	mov	r8, r3
 8003226:	0010      	movs	r0, r2
 8003228:	b083      	sub	sp, #12
 800322a:	2f00      	cmp	r7, #0
 800322c:	da07      	bge.n	800323e <__divdi3+0x2e>
 800322e:	0033      	movs	r3, r6
 8003230:	003c      	movs	r4, r7
 8003232:	2700      	movs	r7, #0
 8003234:	425e      	negs	r6, r3
 8003236:	41a7      	sbcs	r7, r4
 8003238:	2301      	movs	r3, #1
 800323a:	425b      	negs	r3, r3
 800323c:	4698      	mov	r8, r3
 800323e:	2900      	cmp	r1, #0
 8003240:	da07      	bge.n	8003252 <__divdi3+0x42>
 8003242:	4643      	mov	r3, r8
 8003244:	43db      	mvns	r3, r3
 8003246:	000c      	movs	r4, r1
 8003248:	4698      	mov	r8, r3
 800324a:	0003      	movs	r3, r0
 800324c:	2100      	movs	r1, #0
 800324e:	4258      	negs	r0, r3
 8003250:	41a1      	sbcs	r1, r4
 8003252:	0034      	movs	r4, r6
 8003254:	003d      	movs	r5, r7
 8003256:	4682      	mov	sl, r0
 8003258:	4689      	mov	r9, r1
 800325a:	42b9      	cmp	r1, r7
 800325c:	d86a      	bhi.n	8003334 <__divdi3+0x124>
 800325e:	d067      	beq.n	8003330 <__divdi3+0x120>
 8003260:	4649      	mov	r1, r9
 8003262:	4650      	mov	r0, sl
 8003264:	f000 f8ba 	bl	80033dc <__clzdi2>
 8003268:	4683      	mov	fp, r0
 800326a:	0039      	movs	r1, r7
 800326c:	0030      	movs	r0, r6
 800326e:	f000 f8b5 	bl	80033dc <__clzdi2>
 8003272:	465b      	mov	r3, fp
 8003274:	1a1b      	subs	r3, r3, r0
 8003276:	469c      	mov	ip, r3
 8003278:	3b20      	subs	r3, #32
 800327a:	469b      	mov	fp, r3
 800327c:	d46b      	bmi.n	8003356 <__divdi3+0x146>
 800327e:	4658      	mov	r0, fp
 8003280:	4651      	mov	r1, sl
 8003282:	4081      	lsls	r1, r0
 8003284:	4660      	mov	r0, ip
 8003286:	000b      	movs	r3, r1
 8003288:	4651      	mov	r1, sl
 800328a:	4081      	lsls	r1, r0
 800328c:	000a      	movs	r2, r1
 800328e:	42bb      	cmp	r3, r7
 8003290:	d900      	bls.n	8003294 <__divdi3+0x84>
 8003292:	e072      	b.n	800337a <__divdi3+0x16a>
 8003294:	42bb      	cmp	r3, r7
 8003296:	d100      	bne.n	800329a <__divdi3+0x8a>
 8003298:	e079      	b.n	800338e <__divdi3+0x17e>
 800329a:	0034      	movs	r4, r6
 800329c:	003d      	movs	r5, r7
 800329e:	4659      	mov	r1, fp
 80032a0:	1aa4      	subs	r4, r4, r2
 80032a2:	419d      	sbcs	r5, r3
 80032a4:	2900      	cmp	r1, #0
 80032a6:	da00      	bge.n	80032aa <__divdi3+0x9a>
 80032a8:	e074      	b.n	8003394 <__divdi3+0x184>
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	2601      	movs	r6, #1
 80032b0:	9000      	str	r0, [sp, #0]
 80032b2:	9101      	str	r1, [sp, #4]
 80032b4:	4659      	mov	r1, fp
 80032b6:	408e      	lsls	r6, r1
 80032b8:	9601      	str	r6, [sp, #4]
 80032ba:	4661      	mov	r1, ip
 80032bc:	2601      	movs	r6, #1
 80032be:	408e      	lsls	r6, r1
 80032c0:	4661      	mov	r1, ip
 80032c2:	9600      	str	r6, [sp, #0]
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d05f      	beq.n	8003388 <__divdi3+0x178>
 80032c8:	07d9      	lsls	r1, r3, #31
 80032ca:	0856      	lsrs	r6, r2, #1
 80032cc:	430e      	orrs	r6, r1
 80032ce:	085f      	lsrs	r7, r3, #1
 80032d0:	4661      	mov	r1, ip
 80032d2:	2201      	movs	r2, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	e00c      	b.n	80032f2 <__divdi3+0xe2>
 80032d8:	42af      	cmp	r7, r5
 80032da:	d101      	bne.n	80032e0 <__divdi3+0xd0>
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d80a      	bhi.n	80032f6 <__divdi3+0xe6>
 80032e0:	1ba4      	subs	r4, r4, r6
 80032e2:	41bd      	sbcs	r5, r7
 80032e4:	1924      	adds	r4, r4, r4
 80032e6:	416d      	adcs	r5, r5
 80032e8:	3901      	subs	r1, #1
 80032ea:	18a4      	adds	r4, r4, r2
 80032ec:	415d      	adcs	r5, r3
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d006      	beq.n	8003300 <__divdi3+0xf0>
 80032f2:	42af      	cmp	r7, r5
 80032f4:	d9f0      	bls.n	80032d8 <__divdi3+0xc8>
 80032f6:	3901      	subs	r1, #1
 80032f8:	1924      	adds	r4, r4, r4
 80032fa:	416d      	adcs	r5, r5
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d1f8      	bne.n	80032f2 <__divdi3+0xe2>
 8003300:	9800      	ldr	r0, [sp, #0]
 8003302:	9901      	ldr	r1, [sp, #4]
 8003304:	465b      	mov	r3, fp
 8003306:	1900      	adds	r0, r0, r4
 8003308:	4169      	adcs	r1, r5
 800330a:	2b00      	cmp	r3, #0
 800330c:	db4d      	blt.n	80033aa <__divdi3+0x19a>
 800330e:	002e      	movs	r6, r5
 8003310:	002c      	movs	r4, r5
 8003312:	40de      	lsrs	r6, r3
 8003314:	4663      	mov	r3, ip
 8003316:	40dc      	lsrs	r4, r3
 8003318:	465b      	mov	r3, fp
 800331a:	2b00      	cmp	r3, #0
 800331c:	db55      	blt.n	80033ca <__divdi3+0x1ba>
 800331e:	0034      	movs	r4, r6
 8003320:	409c      	lsls	r4, r3
 8003322:	0023      	movs	r3, r4
 8003324:	4664      	mov	r4, ip
 8003326:	40a6      	lsls	r6, r4
 8003328:	0032      	movs	r2, r6
 800332a:	1a80      	subs	r0, r0, r2
 800332c:	4199      	sbcs	r1, r3
 800332e:	e003      	b.n	8003338 <__divdi3+0x128>
 8003330:	42b0      	cmp	r0, r6
 8003332:	d995      	bls.n	8003260 <__divdi3+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	2100      	movs	r1, #0
 8003338:	4643      	mov	r3, r8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <__divdi3+0x138>
 800333e:	0003      	movs	r3, r0
 8003340:	000c      	movs	r4, r1
 8003342:	2100      	movs	r1, #0
 8003344:	4258      	negs	r0, r3
 8003346:	41a1      	sbcs	r1, r4
 8003348:	b003      	add	sp, #12
 800334a:	bcf0      	pop	{r4, r5, r6, r7}
 800334c:	46bb      	mov	fp, r7
 800334e:	46b2      	mov	sl, r6
 8003350:	46a9      	mov	r9, r5
 8003352:	46a0      	mov	r8, r4
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	4662      	mov	r2, ip
 8003358:	4648      	mov	r0, r9
 800335a:	2320      	movs	r3, #32
 800335c:	4651      	mov	r1, sl
 800335e:	4090      	lsls	r0, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	40d9      	lsrs	r1, r3
 8003364:	0003      	movs	r3, r0
 8003366:	9100      	str	r1, [sp, #0]
 8003368:	9900      	ldr	r1, [sp, #0]
 800336a:	4660      	mov	r0, ip
 800336c:	430b      	orrs	r3, r1
 800336e:	4651      	mov	r1, sl
 8003370:	4081      	lsls	r1, r0
 8003372:	000a      	movs	r2, r1
 8003374:	42bb      	cmp	r3, r7
 8003376:	d800      	bhi.n	800337a <__divdi3+0x16a>
 8003378:	e78c      	b.n	8003294 <__divdi3+0x84>
 800337a:	2100      	movs	r1, #0
 800337c:	2000      	movs	r0, #0
 800337e:	9000      	str	r0, [sp, #0]
 8003380:	9101      	str	r1, [sp, #4]
 8003382:	4661      	mov	r1, ip
 8003384:	2900      	cmp	r1, #0
 8003386:	d19f      	bne.n	80032c8 <__divdi3+0xb8>
 8003388:	9800      	ldr	r0, [sp, #0]
 800338a:	9901      	ldr	r1, [sp, #4]
 800338c:	e7d4      	b.n	8003338 <__divdi3+0x128>
 800338e:	42b1      	cmp	r1, r6
 8003390:	d8f3      	bhi.n	800337a <__divdi3+0x16a>
 8003392:	e782      	b.n	800329a <__divdi3+0x8a>
 8003394:	4661      	mov	r1, ip
 8003396:	2620      	movs	r6, #32
 8003398:	2701      	movs	r7, #1
 800339a:	1a76      	subs	r6, r6, r1
 800339c:	2000      	movs	r0, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	40f7      	lsrs	r7, r6
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	9101      	str	r1, [sp, #4]
 80033a6:	9701      	str	r7, [sp, #4]
 80033a8:	e787      	b.n	80032ba <__divdi3+0xaa>
 80033aa:	4662      	mov	r2, ip
 80033ac:	2320      	movs	r3, #32
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	002a      	movs	r2, r5
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0026      	movs	r6, r4
 80033b6:	0013      	movs	r3, r2
 80033b8:	4662      	mov	r2, ip
 80033ba:	40d6      	lsrs	r6, r2
 80033bc:	002c      	movs	r4, r5
 80033be:	431e      	orrs	r6, r3
 80033c0:	4663      	mov	r3, ip
 80033c2:	40dc      	lsrs	r4, r3
 80033c4:	465b      	mov	r3, fp
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	daa9      	bge.n	800331e <__divdi3+0x10e>
 80033ca:	4662      	mov	r2, ip
 80033cc:	2320      	movs	r3, #32
 80033ce:	0035      	movs	r5, r6
 80033d0:	4094      	lsls	r4, r2
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	40dd      	lsrs	r5, r3
 80033d6:	0023      	movs	r3, r4
 80033d8:	432b      	orrs	r3, r5
 80033da:	e7a3      	b.n	8003324 <__divdi3+0x114>

080033dc <__clzdi2>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d103      	bne.n	80033ea <__clzdi2+0xe>
 80033e2:	f7ff fef7 	bl	80031d4 <__clzsi2>
 80033e6:	3020      	adds	r0, #32
 80033e8:	e002      	b.n	80033f0 <__clzdi2+0x14>
 80033ea:	1c08      	adds	r0, r1, #0
 80033ec:	f7ff fef2 	bl	80031d4 <__clzsi2>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)

080033f4 <HAL_GPIO_EXTI_Falling_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	0002      	movs	r2, r0
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	801a      	strh	r2, [r3, #0]

	flagClockConfig = 1;
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_GPIO_EXTI_Falling_Callback+0x210>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]

	//reset settings counter
	if (flagSettings == FLAG_SETTINGS_ON) {
 8003406:	4b80      	ldr	r3, [pc, #512]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counterSettings = SETTINGS_TIME
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_GPIO_EXTI_Falling_Callback+0x218>)
 8003412:	2205      	movs	r2, #5
 8003414:	701a      	strb	r2, [r3, #0]
		;
	}

	//set full update flag, when both reset and set pin was pressed

	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	2110      	movs	r1, #16
 800341c:	0018      	movs	r0, r3
 800341e:	f003 fe2b 	bl	8007078 <HAL_GPIO_ReadPin>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d118      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
			== 0&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0 && HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1 && flagLocked == UNLOCKED) {
 8003426:	23a0      	movs	r3, #160	; 0xa0
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	2108      	movs	r1, #8
 800342c:	0018      	movs	r0, r3
 800342e:	f003 fe23 	bl	8007078 <HAL_GPIO_ReadPin>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d110      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	2104      	movs	r1, #4
 800343c:	0018      	movs	r0, r3
 800343e:	f003 fe1b 	bl	8007078 <HAL_GPIO_ReadPin>
 8003442:	0003      	movs	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
 8003448:	4b71      	ldr	r3, [pc, #452]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
		interfaceFullUpdateFlag = 1;
 8003452:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
	}

	//lock watch when underwater
	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 8003458:	23a0      	movs	r3, #160	; 0xa0
 800345a:	05db      	lsls	r3, r3, #23
 800345c:	2110      	movs	r1, #16
 800345e:	0018      	movs	r0, r3
 8003460:	f003 fe0a 	bl	8007078 <HAL_GPIO_ReadPin>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d152      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 8003468:	23a0      	movs	r3, #160	; 0xa0
 800346a:	05db      	lsls	r3, r3, #23
 800346c:	2108      	movs	r1, #8
 800346e:	0018      	movs	r0, r3
 8003470:	f003 fe02 	bl	8007078 <HAL_GPIO_ReadPin>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d14a      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 0) {
 8003478:	23a0      	movs	r3, #160	; 0xa0
 800347a:	05db      	lsls	r3, r3, #23
 800347c:	2104      	movs	r1, #4
 800347e:	0018      	movs	r0, r3
 8003480:	f003 fdfa 	bl	8007078 <HAL_GPIO_ReadPin>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d142      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
		flagLocked = LOCKED;
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
		flagSettings = FLAG_SETTINGS_OFF;
 800348e:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]

		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8003494:	4b60      	ldr	r3, [pc, #384]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 800349e:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d001      	beq.n	80034ac <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 80034a8:	f000 fd2d 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034ac:	4b5b      	ldr	r3, [pc, #364]	; (800361c <HAL_GPIO_EXTI_Falling_Callback+0x228>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_GPIO_EXTI_Falling_Callback+0xc6>
 80034b6:	f000 fd26 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
				&& chronoMonth == 0 && chronoDay == 0 && chronoHours == 0
 80034ba:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
 80034c4:	f000 fd1f 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034c8:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_GPIO_EXTI_Falling_Callback+0xe2>
 80034d2:	f000 fd18 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_GPIO_EXTI_Falling_Callback+0xf0>
 80034e0:	f000 fd11 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
				&& chronoMinutes == 0 && chronoSeconds < 5) {
 80034e4:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
 80034ee:	f000 fd0a 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_GPIO_EXTI_Falling_Callback+0x23c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	dd01      	ble.n	8003500 <HAL_GPIO_EXTI_Falling_Callback+0x10c>
 80034fc:	f000 fd03 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
			mode = MODE_NORMAL;
 8003500:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
			rtcResetChrono();
 8003506:	f00a ffb1 	bl	800e46c <rtcResetChrono>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 800350a:	f000 fcfc 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>

		}

	} else {

		flagDontSleep = 1;
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_GPIO_EXTI_Falling_Callback+0x240>)
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]

		//										START BUTTON
		if (GPIO_Pin == START_Pin
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d001      	beq.n	8003520 <HAL_GPIO_EXTI_Falling_Callback+0x12c>
 800351c:	f000 fbea 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 8003520:	23a0      	movs	r3, #160	; 0xa0
 8003522:	05db      	lsls	r3, r3, #23
 8003524:	2104      	movs	r1, #4
 8003526:	0018      	movs	r0, r3
 8003528:	f003 fda6 	bl	8007078 <HAL_GPIO_ReadPin>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d001      	beq.n	8003534 <HAL_GPIO_EXTI_Falling_Callback+0x140>
 8003530:	f000 fbe0 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2110      	movs	r1, #16
 800353a:	0018      	movs	r0, r3
 800353c:	f003 fd9c 	bl	8007078 <HAL_GPIO_ReadPin>
 8003540:	0003      	movs	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_GPIO_EXTI_Falling_Callback+0x156>
 8003546:	f000 fbd5 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_GPIO_EXTI_Falling_Callback+0x164>
 8003554:	f000 fcd9 	bl	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

				if (flagSettings == FLAG_SETTINGS_OFF) {
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d000      	beq.n	8003564 <HAL_GPIO_EXTI_Falling_Callback+0x170>
 8003562:	e1b1      	b.n	80038c8 <HAL_GPIO_EXTI_Falling_Callback+0x4d4>

					if (mode == MODE_NORMAL) { // start chrono if mode is set as normal
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d000      	beq.n	8003570 <HAL_GPIO_EXTI_Falling_Callback+0x17c>
 800356e:	e07d      	b.n	800366c <HAL_GPIO_EXTI_Falling_Callback+0x278>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <HAL_GPIO_EXTI_Falling_Callback+0x244>)
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8003574:	2200      	movs	r2, #0
 8003576:	0018      	movs	r0, r3
 8003578:	f005 fd82 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
						RTC_WAKEUPCLOCK_RTCCLK_DIV16);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800357c:	4930      	ldr	r1, [pc, #192]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8003580:	2200      	movs	r2, #0
 8003582:	0018      	movs	r0, r3
 8003584:	f005 fb4c 	bl	8008c20 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003588:	492e      	ldr	r1, [pc, #184]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 800358c:	2200      	movs	r2, #0
 800358e:	0018      	movs	r0, r3
 8003590:	f005 fc34 	bl	8008dfc <HAL_RTC_GetDate>

						chronoStartSeconds = sTime.Seconds;
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	b25a      	sxtb	r2, r3
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_GPIO_EXTI_Falling_Callback+0x254>)
 800359c:	701a      	strb	r2, [r3, #0]
						chronoStartMinutes = sTime.Minutes;
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_GPIO_EXTI_Falling_Callback+0x258>)
 80035a6:	801a      	strh	r2, [r3, #0]
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	0013      	movs	r3, r2
 80035ae:	065b      	lsls	r3, r3, #25
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <HAL_GPIO_EXTI_Falling_Callback+0x25c>)
 80035be:	4694      	mov	ip, r2
 80035c0:	4463      	add	r3, ip
								/ 255) / 10;
 80035c2:	4924      	ldr	r1, [pc, #144]	; (8003654 <HAL_GPIO_EXTI_Falling_Callback+0x260>)
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fc fda5 	bl	8000114 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	001a      	movs	r2, r3
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_GPIO_EXTI_Falling_Callback+0x264>)
 80035d0:	601a      	str	r2, [r3, #0]
						chronoStartHours = sTime.Hours;
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b25a      	sxtb	r2, r3
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_GPIO_EXTI_Falling_Callback+0x268>)
 80035da:	701a      	strb	r2, [r3, #0]
						chronoStartDay = sDate.Date;
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035de:	789b      	ldrb	r3, [r3, #2]
 80035e0:	b25a      	sxtb	r2, r3
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_GPIO_EXTI_Falling_Callback+0x26c>)
 80035e4:	701a      	strb	r2, [r3, #0]
						chronoStartMonth = sDate.Month;
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	b25a      	sxtb	r2, r3
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_GPIO_EXTI_Falling_Callback+0x270>)
 80035ee:	701a      	strb	r2, [r3, #0]
						chronoStartYear = sDate.Year;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035f2:	78db      	ldrb	r3, [r3, #3]
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_GPIO_EXTI_Falling_Callback+0x274>)
 80035f8:	701a      	strb	r2, [r3, #0]

						mode = MODE_CHRONO;
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003600:	f000 fc83 	bl	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>
 8003604:	200003bd 	.word	0x200003bd
 8003608:	20000335 	.word	0x20000335
 800360c:	2000043c 	.word	0x2000043c
 8003610:	20000333 	.word	0x20000333
 8003614:	20000478 	.word	0x20000478
 8003618:	20000334 	.word	0x20000334
 800361c:	20000338 	.word	0x20000338
 8003620:	200001f4 	.word	0x200001f4
 8003624:	20000472 	.word	0x20000472
 8003628:	20000235 	.word	0x20000235
 800362c:	20000484 	.word	0x20000484
 8003630:	2000044a 	.word	0x2000044a
 8003634:	20000469 	.word	0x20000469
 8003638:	0000f7b7 	.word	0x0000f7b7
 800363c:	2000051c 	.word	0x2000051c
 8003640:	2000019c 	.word	0x2000019c
 8003644:	200003dc 	.word	0x200003dc
 8003648:	20000136 	.word	0x20000136
 800364c:	20000226 	.word	0x20000226
 8003650:	0000639c 	.word	0x0000639c
 8003654:	000009f6 	.word	0x000009f6
 8003658:	2000012c 	.word	0x2000012c
 800365c:	200003e8 	.word	0x200003e8
 8003660:	2000044b 	.word	0x2000044b
 8003664:	200001ba 	.word	0x200001ba
 8003668:	200003bc 	.word	0x200003bc
					}

					else if (mode == MODE_CHRONO) { //stop chrono if chrono is working
 800366c:	4bda      	ldr	r3, [pc, #872]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d000      	beq.n	8003678 <HAL_GPIO_EXTI_Falling_Callback+0x284>
 8003676:	e11d      	b.n	80038b4 <HAL_GPIO_EXTI_Falling_Callback+0x4c0>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003678:	49d8      	ldr	r1, [pc, #864]	; (80039dc <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800367a:	4bd9      	ldr	r3, [pc, #868]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800367c:	2200      	movs	r2, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f005 fcfe 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
						RTC_WAKEUPCLOCK_RTCCLK_DIV16);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003684:	49d7      	ldr	r1, [pc, #860]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8003686:	4bd6      	ldr	r3, [pc, #856]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8003688:	2200      	movs	r2, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f005 fac8 	bl	8008c20 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003690:	49d5      	ldr	r1, [pc, #852]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 8003692:	4bd3      	ldr	r3, [pc, #844]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8003694:	2200      	movs	r2, #0
 8003696:	0018      	movs	r0, r3
 8003698:	f005 fbb0 	bl	8008dfc <HAL_RTC_GetDate>

						minutes = sTime.Minutes;
 800369c:	4bd1      	ldr	r3, [pc, #836]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4bd2      	ldr	r3, [pc, #840]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80036a4:	801a      	strh	r2, [r3, #0]
						seconds = sTime.Seconds;
 80036a6:	4bcf      	ldr	r3, [pc, #828]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036a8:	789b      	ldrb	r3, [r3, #2]
 80036aa:	b25a      	sxtb	r2, r3
 80036ac:	4bd0      	ldr	r3, [pc, #832]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 80036ae:	701a      	strb	r2, [r3, #0]
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 80036b0:	4bcc      	ldr	r3, [pc, #816]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	0013      	movs	r3, r2
 80036b6:	065b      	lsls	r3, r3, #25
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4acb      	ldr	r2, [pc, #812]	; (80039f4 <HAL_GPIO_EXTI_Falling_Callback+0x600>)
 80036c6:	4694      	mov	ip, r2
 80036c8:	4463      	add	r3, ip
								/ 10;
 80036ca:	49cb      	ldr	r1, [pc, #812]	; (80039f8 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fc fd21 	bl	8000114 <__udivsi3>
 80036d2:	0003      	movs	r3, r0
 80036d4:	001a      	movs	r2, r3
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 80036d6:	4bc9      	ldr	r3, [pc, #804]	; (80039fc <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 80036d8:	601a      	str	r2, [r3, #0]
						hours = sTime.Hours;
 80036da:	4bc2      	ldr	r3, [pc, #776]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	4bc7      	ldr	r3, [pc, #796]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 80036e2:	701a      	strb	r2, [r3, #0]
						day = sDate.Date;
 80036e4:	4bc0      	ldr	r3, [pc, #768]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036e6:	789a      	ldrb	r2, [r3, #2]
 80036e8:	4bc6      	ldr	r3, [pc, #792]	; (8003a04 <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 80036ea:	701a      	strb	r2, [r3, #0]
						month = sDate.Month;
 80036ec:	4bbe      	ldr	r3, [pc, #760]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036ee:	785a      	ldrb	r2, [r3, #1]
 80036f0:	4bc5      	ldr	r3, [pc, #788]	; (8003a08 <HAL_GPIO_EXTI_Falling_Callback+0x614>)
 80036f2:	701a      	strb	r2, [r3, #0]
						year = sDate.Year;
 80036f4:	4bbc      	ldr	r3, [pc, #752]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036f6:	78da      	ldrb	r2, [r3, #3]
 80036f8:	4bc4      	ldr	r3, [pc, #784]	; (8003a0c <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 80036fa:	701a      	strb	r2, [r3, #0]

						chronoDecimals = decimals - chronoStartDecimals;
 80036fc:	4bbf      	ldr	r3, [pc, #764]	; (80039fc <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4bc3      	ldr	r3, [pc, #780]	; (8003a10 <HAL_GPIO_EXTI_Falling_Callback+0x61c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1ad2      	subs	r2, r2, r3
 8003706:	4bc3      	ldr	r3, [pc, #780]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 8003708:	601a      	str	r2, [r3, #0]
						chronoSeconds = seconds - chronoStartSeconds;
 800370a:	4bb9      	ldr	r3, [pc, #740]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b25b      	sxtb	r3, r3
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4bc1      	ldr	r3, [pc, #772]	; (8003a18 <HAL_GPIO_EXTI_Falling_Callback+0x624>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b25a      	sxtb	r2, r3
 8003720:	4bbe      	ldr	r3, [pc, #760]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 8003722:	701a      	strb	r2, [r3, #0]
						chronoMinutes = minutes - chronoStartMinutes;
 8003724:	4bb1      	ldr	r3, [pc, #708]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b21b      	sxth	r3, r3
 800372a:	b29a      	uxth	r2, r3
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <HAL_GPIO_EXTI_Falling_Callback+0x62c>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b21b      	sxth	r3, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	b21a      	sxth	r2, r3
 800373a:	4bba      	ldr	r3, [pc, #744]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 800373c:	801a      	strh	r2, [r3, #0]
						chronoHours = hours - chronoStartHours;
 800373e:	4bb0      	ldr	r3, [pc, #704]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b25b      	sxtb	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4bb8      	ldr	r3, [pc, #736]	; (8003a28 <HAL_GPIO_EXTI_Falling_Callback+0x634>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b25b      	sxtb	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	b25a      	sxtb	r2, r3
 8003754:	4bb5      	ldr	r3, [pc, #724]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003756:	701a      	strb	r2, [r3, #0]
						chronoDay = day - chronoStartDay;
 8003758:	4baa      	ldr	r3, [pc, #680]	; (8003a04 <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4bb4      	ldr	r3, [pc, #720]	; (8003a30 <HAL_GPIO_EXTI_Falling_Callback+0x63c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	b25a      	sxtb	r2, r3
 800376c:	4bb1      	ldr	r3, [pc, #708]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800376e:	701a      	strb	r2, [r3, #0]
						chronoMonth = month - chronoStartMonth;
 8003770:	4ba5      	ldr	r3, [pc, #660]	; (8003a08 <HAL_GPIO_EXTI_Falling_Callback+0x614>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4bb0      	ldr	r3, [pc, #704]	; (8003a38 <HAL_GPIO_EXTI_Falling_Callback+0x644>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b25b      	sxtb	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	b25a      	sxtb	r2, r3
 8003784:	4bad      	ldr	r3, [pc, #692]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 8003786:	701a      	strb	r2, [r3, #0]
						chronoYear = year - chronoStartYear;
 8003788:	4ba0      	ldr	r3, [pc, #640]	; (8003a0c <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4bac      	ldr	r3, [pc, #688]	; (8003a40 <HAL_GPIO_EXTI_Falling_Callback+0x64c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	b25a      	sxtb	r2, r3
 800379c:	4ba9      	ldr	r3, [pc, #676]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 800379e:	701a      	strb	r2, [r3, #0]

						if (chronoDecimals < 0) {
 80037a0:	4b9c      	ldr	r3, [pc, #624]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0e      	bge.n	80037c6 <HAL_GPIO_EXTI_Falling_Callback+0x3d2>
							chronoSeconds--;
 80037a8:	4b9c      	ldr	r3, [pc, #624]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	4b99      	ldr	r3, [pc, #612]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037b8:	701a      	strb	r2, [r3, #0]
							chronoDecimals = chronoDecimals + 10;
 80037ba:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330a      	adds	r3, #10
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037c4:	601a      	str	r2, [r3, #0]
						}

						if (chronoSeconds < 0) {
 80037c6:	4b95      	ldr	r3, [pc, #596]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da11      	bge.n	80037f4 <HAL_GPIO_EXTI_Falling_Callback+0x400>
							chronoMinutes--;
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	b21a      	sxth	r2, r3
 80037de:	4b91      	ldr	r3, [pc, #580]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037e0:	801a      	strh	r2, [r3, #0]
							chronoSeconds = chronoSeconds + 60;
 80037e2:	4b8e      	ldr	r3, [pc, #568]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	333c      	adds	r3, #60	; 0x3c
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	b25a      	sxtb	r2, r3
 80037f0:	4b8a      	ldr	r3, [pc, #552]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037f2:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMinutes < 0) {
 80037f4:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b21b      	sxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da11      	bge.n	8003822 <HAL_GPIO_EXTI_Falling_Callback+0x42e>
							chronoHours--;
 80037fe:	4b8b      	ldr	r3, [pc, #556]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b25b      	sxtb	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	b25a      	sxtb	r2, r3
 800380c:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 800380e:	701a      	strb	r2, [r3, #0]
							chronoMinutes = chronoMinutes + 60;
 8003810:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b21b      	sxth	r3, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	333c      	adds	r3, #60	; 0x3c
 800381a:	b29b      	uxth	r3, r3
 800381c:	b21a      	sxth	r2, r3
 800381e:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 8003820:	801a      	strh	r2, [r3, #0]
						}

						if (chronoHours < 0) {
 8003822:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	da11      	bge.n	8003850 <HAL_GPIO_EXTI_Falling_Callback+0x45c>
							chronoDay--;
 800382c:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	b25a      	sxtb	r2, r3
 800383a:	4b7e      	ldr	r3, [pc, #504]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800383c:	701a      	strb	r2, [r3, #0]
							chronoHours = chronoHours + 24;
 800383e:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3318      	adds	r3, #24
 8003848:	b2db      	uxtb	r3, r3
 800384a:	b25a      	sxtb	r2, r3
 800384c:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 800384e:	701a      	strb	r2, [r3, #0]
						}

						if (chronoDay < 0) {
 8003850:	4b78      	ldr	r3, [pc, #480]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b25b      	sxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	da11      	bge.n	800387e <HAL_GPIO_EXTI_Falling_Callback+0x48a>
							chronoMonth--;
 800385a:	4b78      	ldr	r3, [pc, #480]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b25b      	sxtb	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	b25a      	sxtb	r2, r3
 8003868:	4b74      	ldr	r3, [pc, #464]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800386a:	701a      	strb	r2, [r3, #0]
							chronoDay = chronoDay + 30;
 800386c:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	331e      	adds	r3, #30
 8003876:	b2db      	uxtb	r3, r3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800387c:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMonth < 0) {
 800387e:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b25b      	sxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	da11      	bge.n	80038ac <HAL_GPIO_EXTI_Falling_Callback+0x4b8>
							chronoYear--;
 8003888:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b25b      	sxtb	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	b25a      	sxtb	r2, r3
 8003896:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 8003898:	701a      	strb	r2, [r3, #0]
							chronoMonth = chronoMonth + 12;
 800389a:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	330c      	adds	r3, #12
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 80038aa:	701a      	strb	r2, [r3, #0]
						}

						mode = MODE_STOP;
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038ae:	2202      	movs	r2, #2
 80038b0:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80038b2:	e32a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

					}

					else if (mode == MODE_STOP) { //start chrono if was stopped
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d000      	beq.n	80038c0 <HAL_GPIO_EXTI_Falling_Callback+0x4cc>
 80038be:	e324      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

						mode = MODE_CHRONO;
 80038c0:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80038c6:	e320      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

					}

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 80038c8:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_GPIO_EXTI_Falling_Callback+0x654>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d000      	beq.n	80038d4 <HAL_GPIO_EXTI_Falling_Callback+0x4e0>
 80038d2:	e31a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>
					// if start was pressed in settings, add value
					switch (settingsPointer) {
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_GPIO_EXTI_Falling_Callback+0x658>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d900      	bls.n	80038e0 <HAL_GPIO_EXTI_Falling_Callback+0x4ec>
 80038de:	e206      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_GPIO_EXTI_Falling_Callback+0x65c>)
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	469f      	mov	pc, r3
					case SETTINGS_HOURS:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80038ea:	23a0      	movs	r3, #160	; 0xa0
 80038ec:	05db      	lsls	r3, r3, #23
 80038ee:	2108      	movs	r1, #8
 80038f0:	0018      	movs	r0, r3
 80038f2:	f003 fbc1 	bl	8007078 <HAL_GPIO_ReadPin>
 80038f6:	0003      	movs	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d112      	bne.n	8003922 <HAL_GPIO_EXTI_Falling_Callback+0x52e>
							hours++;
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b25b      	sxtb	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	b25a      	sxtb	r2, r3
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 800390c:	701a      	strb	r2, [r3, #0]
							if (hours > 23)
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	2b17      	cmp	r3, #23
 8003916:	dc00      	bgt.n	800391a <HAL_GPIO_EXTI_Falling_Callback+0x526>
 8003918:	e1d8      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								hours = 0;
 800391a:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
								hours = 23;

						}

						break;
 8003920:	e1d4      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003922:	23a0      	movs	r3, #160	; 0xa0
 8003924:	05db      	lsls	r3, r3, #23
 8003926:	2108      	movs	r1, #8
 8003928:	0018      	movs	r0, r3
 800392a:	f003 fba5 	bl	8007078 <HAL_GPIO_ReadPin>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d000      	beq.n	8003934 <HAL_GPIO_EXTI_Falling_Callback+0x540>
 8003932:	e1cb      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
							hours--;
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b25b      	sxtb	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	b25a      	sxtb	r2, r3
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003944:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b25b      	sxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	db00      	blt.n	8003952 <HAL_GPIO_EXTI_Falling_Callback+0x55e>
 8003950:	e1bc      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								hours = 23;
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003954:	2217      	movs	r2, #23
 8003956:	701a      	strb	r2, [r3, #0]
						break;
 8003958:	e1b8      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>

					case SETTINGS_MINUTES:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800395a:	23a0      	movs	r3, #160	; 0xa0
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	2108      	movs	r1, #8
 8003960:	0018      	movs	r0, r3
 8003962:	f003 fb89 	bl	8007078 <HAL_GPIO_ReadPin>
 8003966:	0003      	movs	r3, r0
 8003968:	2b01      	cmp	r3, #1
 800396a:	d112      	bne.n	8003992 <HAL_GPIO_EXTI_Falling_Callback+0x59e>
							minutes++;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b21b      	sxth	r3, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	b21a      	sxth	r2, r3
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800397c:	801a      	strh	r2, [r3, #0]
							if (minutes > 59)
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b21b      	sxth	r3, r3
 8003984:	2b3b      	cmp	r3, #59	; 0x3b
 8003986:	dc00      	bgt.n	800398a <HAL_GPIO_EXTI_Falling_Callback+0x596>
 8003988:	e1a2      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								minutes = 0;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
								== 0) {
							minutes--;
							if (minutes < 0)
								minutes = 59;
						}
						break;
 8003990:	e19e      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003992:	23a0      	movs	r3, #160	; 0xa0
 8003994:	05db      	lsls	r3, r3, #23
 8003996:	2108      	movs	r1, #8
 8003998:	0018      	movs	r0, r3
 800399a:	f003 fb6d 	bl	8007078 <HAL_GPIO_ReadPin>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d000      	beq.n	80039a4 <HAL_GPIO_EXTI_Falling_Callback+0x5b0>
 80039a2:	e195      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
							minutes--;
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039b4:	801a      	strh	r2, [r3, #0]
							if (minutes < 0)
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db00      	blt.n	80039c2 <HAL_GPIO_EXTI_Falling_Callback+0x5ce>
 80039c0:	e186      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								minutes = 59;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039c4:	223b      	movs	r2, #59	; 0x3b
 80039c6:	801a      	strh	r2, [r3, #0]
						break;
 80039c8:	e182      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>

					case SETTINGS_SECONDS:
						seconds = 0;
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
						sTime.SubSeconds = 0;
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
						break;
 80039d6:	e18a      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
 80039d8:	20000334 	.word	0x20000334
 80039dc:	0000f7b7 	.word	0x0000f7b7
 80039e0:	2000051c 	.word	0x2000051c
 80039e4:	2000019c 	.word	0x2000019c
 80039e8:	200003dc 	.word	0x200003dc
 80039ec:	20000486 	.word	0x20000486
 80039f0:	2000043e 	.word	0x2000043e
 80039f4:	0000639c 	.word	0x0000639c
 80039f8:	000009f6 	.word	0x000009f6
 80039fc:	2000048c 	.word	0x2000048c
 8003a00:	2000049b 	.word	0x2000049b
 8003a04:	2000044c 	.word	0x2000044c
 8003a08:	20000231 	.word	0x20000231
 8003a0c:	20000448 	.word	0x20000448
 8003a10:	2000012c 	.word	0x2000012c
 8003a14:	20000144 	.word	0x20000144
 8003a18:	20000136 	.word	0x20000136
 8003a1c:	2000044a 	.word	0x2000044a
 8003a20:	20000226 	.word	0x20000226
 8003a24:	20000484 	.word	0x20000484
 8003a28:	200003e8 	.word	0x200003e8
 8003a2c:	20000235 	.word	0x20000235
 8003a30:	2000044b 	.word	0x2000044b
 8003a34:	20000472 	.word	0x20000472
 8003a38:	200001ba 	.word	0x200001ba
 8003a3c:	200001f4 	.word	0x200001f4
 8003a40:	200003bc 	.word	0x200003bc
 8003a44:	20000338 	.word	0x20000338
 8003a48:	20000335 	.word	0x20000335
 8003a4c:	20000241 	.word	0x20000241
 8003a50:	08013cf4 	.word	0x08013cf4

					case SETTINGS_DAYS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003a54:	23a0      	movs	r3, #160	; 0xa0
 8003a56:	05db      	lsls	r3, r3, #23
 8003a58:	2108      	movs	r1, #8
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f003 fb0c 	bl	8007078 <HAL_GPIO_ReadPin>
 8003a60:	0003      	movs	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d110      	bne.n	8003a88 <HAL_GPIO_EXTI_Falling_Callback+0x694>
							day++;
 8003a66:	4bc3      	ldr	r3, [pc, #780]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4bc0      	ldr	r3, [pc, #768]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a72:	701a      	strb	r2, [r3, #0]
							if (day > 31)
 8003a74:	4bbf      	ldr	r3, [pc, #764]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b1f      	cmp	r3, #31
 8003a7c:	d800      	bhi.n	8003a80 <HAL_GPIO_EXTI_Falling_Callback+0x68c>
 8003a7e:	e129      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								day = 1;
 8003a80:	4bbc      	ldr	r3, [pc, #752]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
							day--;
							if (day < 1)
								day = 31;
						}

						break;
 8003a86:	e125      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003a88:	23a0      	movs	r3, #160	; 0xa0
 8003a8a:	05db      	lsls	r3, r3, #23
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f003 faf2 	bl	8007078 <HAL_GPIO_ReadPin>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d000      	beq.n	8003a9a <HAL_GPIO_EXTI_Falling_Callback+0x6a6>
 8003a98:	e11c      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
							day--;
 8003a9a:	4bb6      	ldr	r3, [pc, #728]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4bb3      	ldr	r3, [pc, #716]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003aa6:	701a      	strb	r2, [r3, #0]
							if (day < 1)
 8003aa8:	4bb2      	ldr	r3, [pc, #712]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d000      	beq.n	8003ab4 <HAL_GPIO_EXTI_Falling_Callback+0x6c0>
 8003ab2:	e10f      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								day = 31;
 8003ab4:	4baf      	ldr	r3, [pc, #700]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003ab6:	221f      	movs	r2, #31
 8003ab8:	701a      	strb	r2, [r3, #0]
						break;
 8003aba:	e10b      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>

					case SETTINGS_MONTHS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003abc:	23a0      	movs	r3, #160	; 0xa0
 8003abe:	05db      	lsls	r3, r3, #23
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f003 fad8 	bl	8007078 <HAL_GPIO_ReadPin>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d110      	bne.n	8003af0 <HAL_GPIO_EXTI_Falling_Callback+0x6fc>
							month++;
 8003ace:	4baa      	ldr	r3, [pc, #680]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	4ba7      	ldr	r3, [pc, #668]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ada:	701a      	strb	r2, [r3, #0]
							if (month > 12)
 8003adc:	4ba6      	ldr	r3, [pc, #664]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d800      	bhi.n	8003ae8 <HAL_GPIO_EXTI_Falling_Callback+0x6f4>
 8003ae6:	e0f7      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
								month = 1;
 8003ae8:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
							month--;
							if (month < 1)
								month = 12;
						}

						break;
 8003aee:	e0f3      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003af0:	23a0      	movs	r3, #160	; 0xa0
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	2108      	movs	r1, #8
 8003af6:	0018      	movs	r0, r3
 8003af8:	f003 fabe 	bl	8007078 <HAL_GPIO_ReadPin>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d000      	beq.n	8003b02 <HAL_GPIO_EXTI_Falling_Callback+0x70e>
 8003b00:	e0ea      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
							month--;
 8003b02:	4b9d      	ldr	r3, [pc, #628]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b0e:	701a      	strb	r2, [r3, #0]
							if (month < 1)
 8003b10:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d000      	beq.n	8003b1c <HAL_GPIO_EXTI_Falling_Callback+0x728>
 8003b1a:	e0dd      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
								month = 12;
 8003b1c:	4b96      	ldr	r3, [pc, #600]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	701a      	strb	r2, [r3, #0]
						break;
 8003b22:	e0d9      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>

					case SETTINGS_YEARS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003b24:	23a0      	movs	r3, #160	; 0xa0
 8003b26:	05db      	lsls	r3, r3, #23
 8003b28:	2108      	movs	r1, #8
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f003 faa4 	bl	8007078 <HAL_GPIO_ReadPin>
 8003b30:	0003      	movs	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d110      	bne.n	8003b58 <HAL_GPIO_EXTI_Falling_Callback+0x764>
							year++;
 8003b36:	4b91      	ldr	r3, [pc, #580]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b42:	701a      	strb	r2, [r3, #0]
							if (year > 99)
 8003b44:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b63      	cmp	r3, #99	; 0x63
 8003b4c:	d800      	bhi.n	8003b50 <HAL_GPIO_EXTI_Falling_Callback+0x75c>
 8003b4e:	e0c5      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
								year = 1;
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
							year--;
							if (year < 1)
								year = 99;
						}

						break;
 8003b56:	e0c1      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003b58:	23a0      	movs	r3, #160	; 0xa0
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f003 fa8a 	bl	8007078 <HAL_GPIO_ReadPin>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d000      	beq.n	8003b6a <HAL_GPIO_EXTI_Falling_Callback+0x776>
 8003b68:	e0b8      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
							year--;
 8003b6a:	4b84      	ldr	r3, [pc, #528]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b76:	701a      	strb	r2, [r3, #0]
							if (year < 1)
 8003b78:	4b80      	ldr	r3, [pc, #512]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d000      	beq.n	8003b84 <HAL_GPIO_EXTI_Falling_Callback+0x790>
 8003b82:	e0ab      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
								year = 99;
 8003b84:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b86:	2263      	movs	r2, #99	; 0x63
 8003b88:	701a      	strb	r2, [r3, #0]
						break;
 8003b8a:	e0a7      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>

					case SETTINGS_LAYOUT:
						if (layout < layoutsCounter)
 8003b8c:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d207      	bcs.n	8003baa <HAL_GPIO_EXTI_Falling_Callback+0x7b6>
							layout++;
 8003b9a:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003ba6:	701a      	strb	r2, [r3, #0]
						else if (layout >= layoutsCounter)
							layout = 1;
						break;
 8003ba8:	e09a      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
						else if (layout >= layoutsCounter)
 8003baa:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d200      	bcs.n	8003bba <HAL_GPIO_EXTI_Falling_Callback+0x7c6>
 8003bb8:	e092      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
							layout = 1;
 8003bba:	4b71      	ldr	r3, [pc, #452]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
						break;
 8003bc0:	e08e      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>

					case SETTINGS_COLOR:
						if (colorScheme < 2)
 8003bc2:	4b71      	ldr	r3, [pc, #452]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d807      	bhi.n	8003bdc <HAL_GPIO_EXTI_Falling_Callback+0x7e8>
							colorScheme++;
 8003bcc:	4b6e      	ldr	r3, [pc, #440]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bd8:	701a      	strb	r2, [r3, #0]
						else if (colorScheme >= 2)
							colorScheme = 1;
						break;
 8003bda:	e083      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
						else if (colorScheme >= 2)
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d800      	bhi.n	8003be8 <HAL_GPIO_EXTI_Falling_Callback+0x7f4>
 8003be6:	e07d      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
							colorScheme = 1;
 8003be8:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
						break;
 8003bee:	e079      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>

					case SETTINGS_PRESS_REF:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003bf0:	23a0      	movs	r3, #160	; 0xa0
 8003bf2:	05db      	lsls	r3, r3, #23
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f003 fa3e 	bl	8007078 <HAL_GPIO_ReadPin>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d113      	bne.n	8003c2a <HAL_GPIO_EXTI_Falling_Callback+0x836>
							pressureReference++;
 8003c02:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b21a      	sxth	r2, r3
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c12:	801a      	strh	r2, [r3, #0]
							if (pressureReference > 1100)
 8003c14:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x99c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	dd63      	ble.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
								pressureReference = 900;
 8003c20:	4b5a      	ldr	r3, [pc, #360]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c22:	22e1      	movs	r2, #225	; 0xe1
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	801a      	strh	r2, [r3, #0]
								== 0) {
							pressureReference--;
							if (pressureReference < 900)
								pressureReference = 1100;
						}
						break;
 8003c28:	e05e      	b.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003c2a:	23a0      	movs	r3, #160	; 0xa0
 8003c2c:	05db      	lsls	r3, r3, #23
 8003c2e:	2108      	movs	r1, #8
 8003c30:	0018      	movs	r0, r3
 8003c32:	f003 fa21 	bl	8007078 <HAL_GPIO_ReadPin>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d156      	bne.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
							pressureReference--;
 8003c3a:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b21a      	sxth	r2, r3
 8003c48:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c4a:	801a      	strh	r2, [r3, #0]
							if (pressureReference < 900)
 8003c4c:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b21a      	sxth	r2, r3
 8003c52:	23e1      	movs	r3, #225	; 0xe1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	429a      	cmp	r2, r3
 8003c58:	da46      	bge.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
								pressureReference = 1100;
 8003c5a:	4b4c      	ldr	r3, [pc, #304]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c5c:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x99c>)
 8003c5e:	801a      	strh	r2, [r3, #0]
						break;
 8003c60:	e042      	b.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>

					case SETTINGS_TEMP_CMP:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003c62:	23a0      	movs	r3, #160	; 0xa0
 8003c64:	05db      	lsls	r3, r3, #23
 8003c66:	2108      	movs	r1, #8
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f003 fa05 	bl	8007078 <HAL_GPIO_ReadPin>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d111      	bne.n	8003c98 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
							temperatureCompensation++;
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c84:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation > 20)
 8003c86:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	dd2d      	ble.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
								temperatureCompensation = -20;
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c92:	22ec      	movs	r2, #236	; 0xec
 8003c94:	701a      	strb	r2, [r3, #0]
							temperatureCompensation--;
							if (temperatureCompensation < -20)
								temperatureCompensation = 20;
						}

						break;
 8003c96:	e029      	b.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003c98:	23a0      	movs	r3, #160	; 0xa0
 8003c9a:	05db      	lsls	r3, r3, #23
 8003c9c:	2108      	movs	r1, #8
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f003 f9ea 	bl	8007078 <HAL_GPIO_ReadPin>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
							temperatureCompensation--;
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cb8:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation < -20)
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	da13      	bge.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
								temperatureCompensation = 20;
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cc6:	2214      	movs	r2, #20
 8003cc8:	701a      	strb	r2, [r3, #0]
						break;
 8003cca:	e00f      	b.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						break;
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	e00e      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	e00c      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	e00a      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	e008      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	e006      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	e004      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	e002      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	e000      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cec:	46c0      	nop			; (mov r8, r8)

					}

					rtcSetTime();
 8003cee:	f00a fb79 	bl	800e3e4 <rtcSetTime>
			if (flagLocked == UNLOCKED) {
 8003cf2:	e10a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

				}
			}
			//										RESET BUTTON

		} else if (GPIO_Pin == RESET_Pin
 8003cf4:	1dbb      	adds	r3, r7, #6
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d000      	beq.n	8003cfe <HAL_GPIO_EXTI_Falling_Callback+0x90a>
 8003cfc:	e09b      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003cfe:	23a0      	movs	r3, #160	; 0xa0
 8003d00:	05db      	lsls	r3, r3, #23
 8003d02:	2110      	movs	r1, #16
 8003d04:	0018      	movs	r0, r3
 8003d06:	f003 f9b7 	bl	8007078 <HAL_GPIO_ReadPin>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d000      	beq.n	8003d10 <HAL_GPIO_EXTI_Falling_Callback+0x91c>
 8003d0e:	e092      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_SET
 8003d10:	23a0      	movs	r3, #160	; 0xa0
 8003d12:	05db      	lsls	r3, r3, #23
 8003d14:	2108      	movs	r1, #8
 8003d16:	0018      	movs	r0, r3
 8003d18:	f003 f9ae 	bl	8007078 <HAL_GPIO_ReadPin>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d000      	beq.n	8003d24 <HAL_GPIO_EXTI_Falling_Callback+0x930>
 8003d22:	e088      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 8003d24:	23a0      	movs	r3, #160	; 0xa0
 8003d26:	05db      	lsls	r3, r3, #23
 8003d28:	2104      	movs	r1, #4
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f003 f9a4 	bl	8007078 <HAL_GPIO_ReadPin>
 8003d30:	0003      	movs	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d000      	beq.n	8003d38 <HAL_GPIO_EXTI_Falling_Callback+0x944>
 8003d36:	e07e      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
						== GPIO_PIN_SET) {

			counterForce = 0;
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <HAL_GPIO_EXTI_Falling_Callback+0x9a4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
			counterMultiplePress++;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d4a:	701a      	strb	r2, [r3, #0]

			if (flagSettings == FLAG_SETTINGS_OFF) {
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_GPIO_EXTI_Falling_Callback+0x9ac>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d12b      	bne.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
				if (counterMultiplePress >= MULTIPLE_PRESS) {
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d926      	bls.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
					if (flagLocked == LOCKED) {
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_GPIO_EXTI_Falling_Callback+0x9b0>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11e      	bne.n	8003da8 <HAL_GPIO_EXTI_Falling_Callback+0x9b4>
						flagLocked = UNLOCKED;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_GPIO_EXTI_Falling_Callback+0x9b0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e01d      	b.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	2000044c 	.word	0x2000044c
 8003d78:	20000231 	.word	0x20000231
 8003d7c:	20000448 	.word	0x20000448
 8003d80:	20000481 	.word	0x20000481
 8003d84:	20000025 	.word	0x20000025
 8003d88:	20000468 	.word	0x20000468
 8003d8c:	2000002a 	.word	0x2000002a
 8003d90:	0000044c 	.word	0x0000044c
 8003d94:	20000029 	.word	0x20000029
 8003d98:	2000046a 	.word	0x2000046a
 8003d9c:	20000470 	.word	0x20000470
 8003da0:	20000335 	.word	0x20000335
 8003da4:	20000333 	.word	0x20000333
					} else {
						flagLocked = LOCKED;
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (flagLocked == UNLOCKED) {
 8003dae:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d000      	beq.n	8003dba <HAL_GPIO_EXTI_Falling_Callback+0x9c6>
 8003db8:	e0a9      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

				if (mode == MODE_NORMAL && flagSettings == FLAG_SETTINGS_OFF) {
 8003dba:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_GPIO_EXTI_Falling_Callback+0x9da>
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d032      	beq.n	8003e34 <HAL_GPIO_EXTI_Falling_Callback+0xa40>
//			interfaceFullUpdateFlag = 1; //legacy
				}

				else if (mode == MODE_STOP && flagSettings == FLAG_SETTINGS_OFF) {
 8003dce:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d110      	bne.n	8003dfa <HAL_GPIO_EXTI_Falling_Callback+0xa06>
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_GPIO_EXTI_Falling_Callback+0xa06>

					mode = MODE_NORMAL;
 8003de2:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
					rtcResetChrono();
 8003de8:	f00a fb40 	bl	800e46c <rtcResetChrono>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003dee:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	0018      	movs	r0, r3
 8003df4:	f005 f944 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003df8:	e01c      	b.n	8003e34 <HAL_GPIO_EXTI_Falling_Callback+0xa40>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d000      	beq.n	8003e06 <HAL_GPIO_EXTI_Falling_Callback+0xa12>
 8003e04:	e083      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

					if (settingsPointer < 10) {
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d807      	bhi.n	8003e20 <HAL_GPIO_EXTI_Falling_Callback+0xa2c>
						settingsPointer++; // if reset was pressed in settings, forward pointer
 8003e10:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e1c:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003e1e:	e076      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
					} else if (settingsPointer >= 10) {
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d800      	bhi.n	8003e2c <HAL_GPIO_EXTI_Falling_Callback+0xa38>
 8003e2a:	e070      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
						settingsPointer = 1;
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003e32:	e06c      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
 8003e34:	e06b      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

				}
			}
			//										SET BUTTON

		} else if (GPIO_Pin == SET_Pin
 8003e36:	1dbb      	adds	r3, r7, #6
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d168      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_RESET
 8003e3e:	23a0      	movs	r3, #160	; 0xa0
 8003e40:	05db      	lsls	r3, r3, #23
 8003e42:	2108      	movs	r1, #8
 8003e44:	0018      	movs	r0, r3
 8003e46:	f003 f917 	bl	8007078 <HAL_GPIO_ReadPin>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d160      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_SET
 8003e4e:	23a0      	movs	r3, #160	; 0xa0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	2104      	movs	r1, #4
 8003e54:	0018      	movs	r0, r3
 8003e56:	f003 f90f 	bl	8007078 <HAL_GPIO_ReadPin>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d157      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003e60:	23a0      	movs	r3, #160	; 0xa0
 8003e62:	05db      	lsls	r3, r3, #23
 8003e64:	2110      	movs	r1, #16
 8003e66:	0018      	movs	r0, r3
 8003e68:	f003 f906 	bl	8007078 <HAL_GPIO_ReadPin>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d14e      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d149      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>

				if (flagSettings == FLAG_SETTINGS_OFF
 8003e7c:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d118      	bne.n	8003eb8 <HAL_GPIO_EXTI_Falling_Callback+0xac4>
						&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) { //go to settings only when Reset button is released
 8003e86:	23a0      	movs	r3, #160	; 0xa0
 8003e88:	05db      	lsls	r3, r3, #23
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f003 f8f3 	bl	8007078 <HAL_GPIO_ReadPin>
 8003e92:	0003      	movs	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10f      	bne.n	8003eb8 <HAL_GPIO_EXTI_Falling_Callback+0xac4>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003e98:	4922      	ldr	r1, [pc, #136]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f005 f8ee 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
//					modeBackup = mode;// legacy, fot keep chrono
					flagSettings = FLAG_SETTINGS_ON;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
					counterSettings = SETTINGS_TIME
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_GPIO_EXTI_Falling_Callback+0xb3c>)
 8003eac:	2205      	movs	r2, #5
 8003eae:	701a      	strb	r2, [r3, #0]
					;
					settingsPointer = 7;
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e02b      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>

				} else if (flagSettings == FLAG_SETTINGS_ON
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d126      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
						&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1) {
 8003ec2:	23a0      	movs	r3, #160	; 0xa0
 8003ec4:	05db      	lsls	r3, r3, #23
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f003 f8d5 	bl	8007078 <HAL_GPIO_ReadPin>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11d      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8003ed4:	4913      	ldr	r1, [pc, #76]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	0018      	movs	r0, r3
 8003edc:	f005 f8d0 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
//					mode = modeBackup; /legacy, for keep chrono
					flagSettings = FLAG_SETTINGS_OFF;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
					counterSettings = 0;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_GPIO_EXTI_Falling_Callback+0xb3c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
					interfaceSelectColorScheme(colorScheme);
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_GPIO_EXTI_Falling_Callback+0xb40>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f006 fd6e 	bl	800a9d4 <interfaceSelectColorScheme>
					interfaceSelectLayout(layout);
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_GPIO_EXTI_Falling_Callback+0xb44>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	0018      	movs	r0, r3
 8003f00:	f006 f956 	bl	800a1b0 <interfaceSelectLayout>
				}

			}
		}
	}
}
 8003f04:	e004      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
			if (flagLocked == UNLOCKED) {
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	e000      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
			if (flagLocked == UNLOCKED) {
 8003f0e:	46c0      	nop			; (mov r8, r8)
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000333 	.word	0x20000333
 8003f1c:	20000334 	.word	0x20000334
 8003f20:	20000335 	.word	0x20000335
 8003f24:	0000f7b7 	.word	0x0000f7b7
 8003f28:	2000051c 	.word	0x2000051c
 8003f2c:	20000241 	.word	0x20000241
 8003f30:	2000043c 	.word	0x2000043c
 8003f34:	20000468 	.word	0x20000468
 8003f38:	20000481 	.word	0x20000481

08003f3c <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	0002      	movs	r2, r0
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8003f48:	23fa      	movs	r3, #250	; 0xfa
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	1df9      	adds	r1, r7, #7
 8003f4e:	4804      	ldr	r0, [pc, #16]	; (8003f60 <DEV_SPI_WriteByte+0x24>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	f005 fa0d 	bl	8009370 <HAL_SPI_Transmit>
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	20000548 	.word	0x20000548

08003f64 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	23a0      	movs	r3, #160	; 0xa0
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	2200      	movs	r2, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f003 f89d 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	0059      	lsls	r1, r3, #1
 8003f7c:	23a0      	movs	r3, #160	; 0xa0
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	2200      	movs	r2, #0
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 f895 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	00d9      	lsls	r1, r3, #3
 8003f8c:	23a0      	movs	r3, #160	; 0xa0
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	2201      	movs	r2, #1
 8003f92:	0018      	movs	r0, r3
 8003f94:	f003 f88d 	bl	80070b2 <HAL_GPIO_WritePin>
		return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	000c      	movs	r4, r1
 8003faa:	0010      	movs	r0, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	250a      	movs	r5, #10
 8003fb0:	197b      	adds	r3, r7, r5
 8003fb2:	1c22      	adds	r2, r4, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	2408      	movs	r4, #8
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	1c02      	adds	r2, r0, #0
 8003fbc:	801a      	strh	r2, [r3, #0]
 8003fbe:	1dbb      	adds	r3, r7, #6
 8003fc0:	1c0a      	adds	r2, r1, #0
 8003fc2:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <Paint_NewImage+0xd8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <Paint_NewImage+0xd8>)
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <Paint_NewImage+0xd8>)
 8003fd2:	0029      	movs	r1, r5
 8003fd4:	187a      	adds	r2, r7, r1
 8003fd6:	8812      	ldrh	r2, [r2, #0]
 8003fd8:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <Paint_NewImage+0xd8>)
 8003fdc:	193a      	adds	r2, r7, r4
 8003fde:	8812      	ldrh	r2, [r2, #0]
 8003fe0:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <Paint_NewImage+0xd8>)
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <Paint_NewImage+0xd8>)
 8003fee:	2202      	movs	r2, #2
 8003ff0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <Paint_NewImage+0x6a>
 8004000:	187b      	adds	r3, r7, r1
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	b29b      	uxth	r3, r3
 8004008:	e006      	b.n	8004018 <Paint_NewImage+0x78>
 800400a:	230a      	movs	r3, #10
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	b29b      	uxth	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <Paint_NewImage+0xd8>)
 800401a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <Paint_NewImage+0xd8>)
 800401e:	2208      	movs	r2, #8
 8004020:	18ba      	adds	r2, r7, r2
 8004022:	8812      	ldrh	r2, [r2, #0]
 8004024:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <Paint_NewImage+0xd8>)
 8004028:	1dba      	adds	r2, r7, #6
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <Paint_NewImage+0xd8>)
 8004030:	2200      	movs	r2, #0
 8004032:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <Paint_NewImage+0xa4>
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2bb4      	cmp	r3, #180	; 0xb4
 8004042:	d10a      	bne.n	800405a <Paint_NewImage+0xba>
        Paint.Width = Width;
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <Paint_NewImage+0xd8>)
 8004046:	220a      	movs	r2, #10
 8004048:	18ba      	adds	r2, r7, r2
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <Paint_NewImage+0xd8>)
 8004050:	2208      	movs	r2, #8
 8004052:	18ba      	adds	r2, r7, r2
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	80da      	strh	r2, [r3, #6]
 8004058:	e00a      	b.n	8004070 <Paint_NewImage+0xd0>
    } else {
        Paint.Width = Height;
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <Paint_NewImage+0xd8>)
 800405c:	2208      	movs	r2, #8
 800405e:	18ba      	adds	r2, r7, r2
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <Paint_NewImage+0xd8>)
 8004066:	220a      	movs	r2, #10
 8004068:	18ba      	adds	r2, r7, r2
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	80da      	strh	r2, [r3, #6]
    }
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bdb0      	pop	{r4, r5, r7, pc}
 8004078:	200004a4 	.word	0x200004a4

0800407c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <Paint_SelectImage+0x18>)
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	200004a4 	.word	0x200004a4

08004098 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b08b      	sub	sp, #44	; 0x2c
 800409c:	af00      	add	r7, sp, #0
 800409e:	0004      	movs	r4, r0
 80040a0:	0008      	movs	r0, r1
 80040a2:	0011      	movs	r1, r2
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	1c22      	adds	r2, r4, #0
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	1c02      	adds	r2, r0, #0
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	1cbb      	adds	r3, r7, #2
 80040b2:	1c0a      	adds	r2, r1, #0
 80040b4:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80040b6:	4bc6      	ldr	r3, [pc, #792]	; (80043d0 <Paint_SetPixel+0x338>)
 80040b8:	889b      	ldrh	r3, [r3, #4]
 80040ba:	1dba      	adds	r2, r7, #6
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d805      	bhi.n	80040ce <Paint_SetPixel+0x36>
 80040c2:	4bc3      	ldr	r3, [pc, #780]	; (80043d0 <Paint_SetPixel+0x338>)
 80040c4:	88db      	ldrh	r3, [r3, #6]
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d904      	bls.n	80040d8 <Paint_SetPixel+0x40>
        Debug("Exceeding display boundaries\r\n");
 80040ce:	4bc1      	ldr	r3, [pc, #772]	; (80043d4 <Paint_SetPixel+0x33c>)
 80040d0:	0018      	movs	r0, r3
 80040d2:	f00d f80f 	bl	80110f4 <puts>
        return;
 80040d6:	e180      	b.n	80043da <Paint_SetPixel+0x342>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80040d8:	4bbd      	ldr	r3, [pc, #756]	; (80043d0 <Paint_SetPixel+0x338>)
 80040da:	89db      	ldrh	r3, [r3, #14]
 80040dc:	2287      	movs	r2, #135	; 0x87
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03d      	beq.n	8004160 <Paint_SetPixel+0xc8>
 80040e4:	2287      	movs	r2, #135	; 0x87
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dd00      	ble.n	80040ee <Paint_SetPixel+0x56>
 80040ec:	e16e      	b.n	80043cc <Paint_SetPixel+0x334>
 80040ee:	2bb4      	cmp	r3, #180	; 0xb4
 80040f0:	d021      	beq.n	8004136 <Paint_SetPixel+0x9e>
 80040f2:	dd00      	ble.n	80040f6 <Paint_SetPixel+0x5e>
 80040f4:	e16a      	b.n	80043cc <Paint_SetPixel+0x334>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <Paint_SetPixel+0x68>
 80040fa:	2b5a      	cmp	r3, #90	; 0x5a
 80040fc:	d00b      	beq.n	8004116 <Paint_SetPixel+0x7e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80040fe:	e165      	b.n	80043cc <Paint_SetPixel+0x334>
        X = Xpoint;
 8004100:	2326      	movs	r3, #38	; 0x26
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	1dba      	adds	r2, r7, #6
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 800410a:	2324      	movs	r3, #36	; 0x24
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	1d3a      	adds	r2, r7, #4
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	801a      	strh	r2, [r3, #0]
        break;
 8004114:	e034      	b.n	8004180 <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Ypoint - 1;
 8004116:	4bae      	ldr	r3, [pc, #696]	; (80043d0 <Paint_SetPixel+0x338>)
 8004118:	891a      	ldrh	r2, [r3, #8]
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	b29a      	uxth	r2, r3
 8004122:	2326      	movs	r3, #38	; 0x26
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	3a01      	subs	r2, #1
 8004128:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 800412a:	2324      	movs	r3, #36	; 0x24
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	1dba      	adds	r2, r7, #6
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	801a      	strh	r2, [r3, #0]
        break;
 8004134:	e024      	b.n	8004180 <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Xpoint - 1;
 8004136:	4ba6      	ldr	r3, [pc, #664]	; (80043d0 <Paint_SetPixel+0x338>)
 8004138:	891a      	ldrh	r2, [r3, #8]
 800413a:	1dbb      	adds	r3, r7, #6
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b29a      	uxth	r2, r3
 8004142:	2326      	movs	r3, #38	; 0x26
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	3a01      	subs	r2, #1
 8004148:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 800414a:	4ba1      	ldr	r3, [pc, #644]	; (80043d0 <Paint_SetPixel+0x338>)
 800414c:	895a      	ldrh	r2, [r3, #10]
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	b29a      	uxth	r2, r3
 8004156:	2324      	movs	r3, #36	; 0x24
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	3a01      	subs	r2, #1
 800415c:	801a      	strh	r2, [r3, #0]
        break;
 800415e:	e00f      	b.n	8004180 <Paint_SetPixel+0xe8>
        X = Ypoint;
 8004160:	2326      	movs	r3, #38	; 0x26
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	1d3a      	adds	r2, r7, #4
 8004166:	8812      	ldrh	r2, [r2, #0]
 8004168:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800416a:	4b99      	ldr	r3, [pc, #612]	; (80043d0 <Paint_SetPixel+0x338>)
 800416c:	895a      	ldrh	r2, [r3, #10]
 800416e:	1dbb      	adds	r3, r7, #6
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	b29a      	uxth	r2, r3
 8004176:	2324      	movs	r3, #36	; 0x24
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	3a01      	subs	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
        break;
 800417e:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8004180:	4b93      	ldr	r3, [pc, #588]	; (80043d0 <Paint_SetPixel+0x338>)
 8004182:	8a1b      	ldrh	r3, [r3, #16]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d020      	beq.n	80041ca <Paint_SetPixel+0x132>
 8004188:	dd00      	ble.n	800418c <Paint_SetPixel+0xf4>
 800418a:	e125      	b.n	80043d8 <Paint_SetPixel+0x340>
 800418c:	2b02      	cmp	r3, #2
 800418e:	d011      	beq.n	80041b4 <Paint_SetPixel+0x11c>
 8004190:	dd00      	ble.n	8004194 <Paint_SetPixel+0xfc>
 8004192:	e121      	b.n	80043d8 <Paint_SetPixel+0x340>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02d      	beq.n	80041f4 <Paint_SetPixel+0x15c>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d000      	beq.n	800419e <Paint_SetPixel+0x106>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800419c:	e11c      	b.n	80043d8 <Paint_SetPixel+0x340>
        X = Paint.WidthMemory - X - 1;
 800419e:	4b8c      	ldr	r3, [pc, #560]	; (80043d0 <Paint_SetPixel+0x338>)
 80041a0:	891a      	ldrh	r2, [r3, #8]
 80041a2:	2126      	movs	r1, #38	; 0x26
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	801a      	strh	r2, [r3, #0]
        break;
 80041b2:	e020      	b.n	80041f6 <Paint_SetPixel+0x15e>
        Y = Paint.HeightMemory - Y - 1;
 80041b4:	4b86      	ldr	r3, [pc, #536]	; (80043d0 <Paint_SetPixel+0x338>)
 80041b6:	895a      	ldrh	r2, [r3, #10]
 80041b8:	2124      	movs	r1, #36	; 0x24
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	801a      	strh	r2, [r3, #0]
        break;
 80041c8:	e015      	b.n	80041f6 <Paint_SetPixel+0x15e>
        X = Paint.WidthMemory - X - 1;
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <Paint_SetPixel+0x338>)
 80041cc:	891a      	ldrh	r2, [r3, #8]
 80041ce:	2126      	movs	r1, #38	; 0x26
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	3a01      	subs	r2, #1
 80041dc:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <Paint_SetPixel+0x338>)
 80041e0:	895a      	ldrh	r2, [r3, #10]
 80041e2:	2124      	movs	r1, #36	; 0x24
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	801a      	strh	r2, [r3, #0]
        break;
 80041f2:	e000      	b.n	80041f6 <Paint_SetPixel+0x15e>
        break;
 80041f4:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <Paint_SetPixel+0x338>)
 80041f8:	891b      	ldrh	r3, [r3, #8]
 80041fa:	2226      	movs	r2, #38	; 0x26
 80041fc:	18ba      	adds	r2, r7, r2
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d806      	bhi.n	8004212 <Paint_SetPixel+0x17a>
 8004204:	4b72      	ldr	r3, [pc, #456]	; (80043d0 <Paint_SetPixel+0x338>)
 8004206:	895b      	ldrh	r3, [r3, #10]
 8004208:	2224      	movs	r2, #36	; 0x24
 800420a:	18ba      	adds	r2, r7, r2
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d904      	bls.n	800421c <Paint_SetPixel+0x184>
        Debug("Exceeding display boundaries\r\n");
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <Paint_SetPixel+0x33c>)
 8004214:	0018      	movs	r0, r3
 8004216:	f00c ff6d 	bl	80110f4 <puts>
        return;
 800421a:	e0de      	b.n	80043da <Paint_SetPixel+0x342>
    }
    
    if(Paint.Scale == 2){
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <Paint_SetPixel+0x338>)
 800421e:	8adb      	ldrh	r3, [r3, #22]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d145      	bne.n	80042b0 <Paint_SetPixel+0x218>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004224:	2026      	movs	r0, #38	; 0x26
 8004226:	183b      	adds	r3, r7, r0
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	b29b      	uxth	r3, r3
 800422e:	0019      	movs	r1, r3
 8004230:	2324      	movs	r3, #36	; 0x24
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4a66      	ldr	r2, [pc, #408]	; (80043d0 <Paint_SetPixel+0x338>)
 8004238:	8a52      	ldrh	r2, [r2, #18]
 800423a:	4353      	muls	r3, r2
 800423c:	18cb      	adds	r3, r1, r3
 800423e:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8004240:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <Paint_SetPixel+0x338>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	18d2      	adds	r2, r2, r3
 8004248:	210f      	movs	r1, #15
 800424a:	187b      	adds	r3, r7, r1
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
        if(Color == BLACK)
 8004250:	1cbb      	adds	r3, r7, #2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <Paint_SetPixel+0x1ec>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004258:	183b      	adds	r3, r7, r0
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	411a      	asrs	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	b25b      	sxtb	r3, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	b25b      	sxtb	r3, r3
 800426c:	187a      	adds	r2, r7, r1
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	b252      	sxtb	r2, r2
 8004272:	4013      	ands	r3, r2
 8004274:	b259      	sxtb	r1, r3
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <Paint_SetPixel+0x338>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e0aa      	b.n	80043da <Paint_SetPixel+0x342>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8004284:	2326      	movs	r3, #38	; 0x26
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	2207      	movs	r2, #7
 800428c:	4013      	ands	r3, r2
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	411a      	asrs	r2, r3
 8004292:	0013      	movs	r3, r2
 8004294:	b25a      	sxtb	r2, r3
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b25b      	sxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b259      	sxtb	r1, r3
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <Paint_SetPixel+0x338>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	b2ca      	uxtb	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e094      	b.n	80043da <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 4){
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <Paint_SetPixel+0x338>)
 80042b2:	8adb      	ldrh	r3, [r3, #22]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d145      	bne.n	8004344 <Paint_SetPixel+0x2ac>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80042b8:	2426      	movs	r4, #38	; 0x26
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	0019      	movs	r1, r3
 80042c4:	2324      	movs	r3, #36	; 0x24
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <Paint_SetPixel+0x338>)
 80042cc:	8a52      	ldrh	r2, [r2, #18]
 80042ce:	4353      	muls	r3, r2
 80042d0:	18cb      	adds	r3, r1, r3
 80042d2:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 80042d4:	1cbb      	adds	r3, r7, #2
 80042d6:	1cba      	adds	r2, r7, #2
 80042d8:	8812      	ldrh	r2, [r2, #0]
 80042da:	2103      	movs	r1, #3
 80042dc:	400a      	ands	r2, r1
 80042de:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <Paint_SetPixel+0x338>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	18d2      	adds	r2, r2, r3
 80042e8:	2017      	movs	r0, #23
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	701a      	strb	r2, [r3, #0]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 80042f0:	0021      	movs	r1, r4
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	22c0      	movs	r2, #192	; 0xc0
 80042fe:	411a      	asrs	r2, r3
 8004300:	0013      	movs	r3, r2
 8004302:	b25b      	sxtb	r3, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	b25b      	sxtb	r3, r3
 8004308:	183a      	adds	r2, r7, r0
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	b252      	sxtb	r2, r2
 800430e:	4013      	ands	r3, r2
 8004310:	b25a      	sxtb	r2, r3
 8004312:	183b      	adds	r3, r7, r0
 8004314:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004316:	1cbb      	adds	r3, r7, #2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	187b      	adds	r3, r7, r1
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	2103      	movs	r1, #3
 8004322:	400b      	ands	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	411a      	asrs	r2, r3
 8004328:	0013      	movs	r3, r2
 800432a:	b25a      	sxtb	r2, r3
 800432c:	183b      	adds	r3, r7, r0
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b25b      	sxtb	r3, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	b259      	sxtb	r1, r3
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <Paint_SetPixel+0x338>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	b2ca      	uxtb	r2, r1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e04a      	b.n	80043da <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 7){
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <Paint_SetPixel+0x338>)
 8004346:	8adb      	ldrh	r3, [r3, #22]
 8004348:	2b07      	cmp	r3, #7
 800434a:	d146      	bne.n	80043da <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800434c:	2426      	movs	r4, #38	; 0x26
 800434e:	193b      	adds	r3, r7, r4
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	0019      	movs	r1, r3
 8004358:	2324      	movs	r3, #36	; 0x24
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <Paint_SetPixel+0x338>)
 8004360:	8a52      	ldrh	r2, [r2, #18]
 8004362:	4353      	muls	r3, r2
 8004364:	18cb      	adds	r3, r1, r3
 8004366:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <Paint_SetPixel+0x338>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	18d2      	adds	r2, r2, r3
 8004370:	201f      	movs	r0, #31
 8004372:	183b      	adds	r3, r7, r0
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8004378:	0021      	movs	r1, r4
 800437a:	187b      	adds	r3, r7, r1
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	22f0      	movs	r2, #240	; 0xf0
 8004386:	411a      	asrs	r2, r3
 8004388:	0013      	movs	r3, r2
 800438a:	b25b      	sxtb	r3, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	b25b      	sxtb	r3, r3
 8004390:	183a      	adds	r2, r7, r0
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	b252      	sxtb	r2, r2
 8004396:	4013      	ands	r3, r2
 8004398:	b25a      	sxtb	r2, r3
 800439a:	183b      	adds	r3, r7, r0
 800439c:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800439e:	1cbb      	adds	r3, r7, #2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	011a      	lsls	r2, r3, #4
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	400b      	ands	r3, r1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	411a      	asrs	r2, r3
 80043b0:	0013      	movs	r3, r2
 80043b2:	b25a      	sxtb	r2, r3
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b259      	sxtb	r1, r3
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <Paint_SetPixel+0x338>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	b2ca      	uxtb	r2, r1
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e006      	b.n	80043da <Paint_SetPixel+0x342>
        return;
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	e004      	b.n	80043da <Paint_SetPixel+0x342>
 80043d0:	200004a4 	.word	0x200004a4
 80043d4:	08013830 	.word	0x08013830
        return;
 80043d8:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80043da:	46bd      	mov	sp, r7
 80043dc:	b00b      	add	sp, #44	; 0x2c
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	0002      	movs	r2, r0
 80043e8:	1dbb      	adds	r3, r7, #6
 80043ea:	801a      	strh	r2, [r3, #0]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <Paint_Clear+0x118>)
 80043ee:	8adb      	ldrh	r3, [r3, #22]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d003      	beq.n	80043fc <Paint_Clear+0x1c>
 80043f4:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <Paint_Clear+0x118>)
 80043f6:	8adb      	ldrh	r3, [r3, #22]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d136      	bne.n	800446a <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80043fc:	2316      	movs	r3, #22
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e029      	b.n	800445a <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8004406:	2314      	movs	r3, #20
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2200      	movs	r2, #0
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e017      	b.n	8004440 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004410:	2014      	movs	r0, #20
 8004412:	183b      	adds	r3, r7, r0
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	2316      	movs	r3, #22
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	4936      	ldr	r1, [pc, #216]	; (80044f8 <Paint_Clear+0x118>)
 800441e:	8a49      	ldrh	r1, [r1, #18]
 8004420:	434b      	muls	r3, r1
 8004422:	18d3      	adds	r3, r2, r3
 8004424:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <Paint_Clear+0x118>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	1dba      	adds	r2, r7, #6
 8004430:	8812      	ldrh	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8004436:	183b      	adds	r3, r7, r0
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	183b      	adds	r3, r7, r0
 800443c:	3201      	adds	r2, #1
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <Paint_Clear+0x118>)
 8004442:	8a5b      	ldrh	r3, [r3, #18]
 8004444:	2214      	movs	r2, #20
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3e0      	bcc.n	8004410 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800444e:	2116      	movs	r1, #22
 8004450:	187b      	adds	r3, r7, r1
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	187b      	adds	r3, r7, r1
 8004456:	3201      	adds	r2, #1
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <Paint_Clear+0x118>)
 800445c:	8a9b      	ldrh	r3, [r3, #20]
 800445e:	2216      	movs	r2, #22
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3ce      	bcc.n	8004406 <Paint_Clear+0x26>
 8004468:	e041      	b.n	80044ee <Paint_Clear+0x10e>
			}
		}		
	}else if(Paint.Scale == 7){
 800446a:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <Paint_Clear+0x118>)
 800446c:	8adb      	ldrh	r3, [r3, #22]
 800446e:	2b07      	cmp	r3, #7
 8004470:	d13d      	bne.n	80044ee <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004472:	2312      	movs	r3, #18
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2200      	movs	r2, #0
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e030      	b.n	80044de <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800447c:	2310      	movs	r3, #16
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e01e      	b.n	80044c4 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004486:	2010      	movs	r0, #16
 8004488:	183b      	adds	r3, r7, r0
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	2312      	movs	r3, #18
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	4919      	ldr	r1, [pc, #100]	; (80044f8 <Paint_Clear+0x118>)
 8004494:	8a49      	ldrh	r1, [r1, #18]
 8004496:	434b      	muls	r3, r1
 8004498:	18d3      	adds	r3, r2, r3
 800449a:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b259      	sxtb	r1, r3
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <Paint_Clear+0x118>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	b2ca      	uxtb	r2, r1
 80044b8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80044ba:	183b      	adds	r3, r7, r0
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	3201      	adds	r2, #1
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <Paint_Clear+0x118>)
 80044c6:	8a5b      	ldrh	r3, [r3, #18]
 80044c8:	2210      	movs	r2, #16
 80044ca:	18ba      	adds	r2, r7, r2
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3d9      	bcc.n	8004486 <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80044d2:	2112      	movs	r1, #18
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	881a      	ldrh	r2, [r3, #0]
 80044d8:	187b      	adds	r3, r7, r1
 80044da:	3201      	adds	r2, #1
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <Paint_Clear+0x118>)
 80044e0:	8a9b      	ldrh	r3, [r3, #20]
 80044e2:	2212      	movs	r2, #18
 80044e4:	18ba      	adds	r2, r7, r2
 80044e6:	8812      	ldrh	r2, [r2, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3c7      	bcc.n	800447c <Paint_Clear+0x9c>
			}
		}		
	}
}
 80044ec:	e7ff      	b.n	80044ee <Paint_Clear+0x10e>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b006      	add	sp, #24
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200004a4 	.word	0x200004a4

080044fc <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	0005      	movs	r5, r0
 8004504:	000c      	movs	r4, r1
 8004506:	0010      	movs	r0, r2
 8004508:	0019      	movs	r1, r3
 800450a:	1dbb      	adds	r3, r7, #6
 800450c:	1c2a      	adds	r2, r5, #0
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	1c22      	adds	r2, r4, #0
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	1cbb      	adds	r3, r7, #2
 8004518:	1c02      	adds	r2, r0, #0
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	1c7b      	adds	r3, r7, #1
 800451e:	1c0a      	adds	r2, r1, #0
 8004520:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004522:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004524:	889b      	ldrh	r3, [r3, #4]
 8004526:	1dba      	adds	r2, r7, #6
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d805      	bhi.n	800453a <Paint_DrawPoint+0x3e>
 800452e:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004530:	88db      	ldrh	r3, [r3, #6]
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d916      	bls.n	8004568 <Paint_DrawPoint+0x6c>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <Paint_DrawPoint+0x1c8>)
 800453c:	0018      	movs	r0, r3
 800453e:	f00c fdd9 	bl	80110f4 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8004542:	1dbb      	adds	r3, r7, #6
 8004544:	8819      	ldrh	r1, [r3, #0]
 8004546:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004548:	889b      	ldrh	r3, [r3, #4]
 800454a:	001a      	movs	r2, r3
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <Paint_DrawPoint+0x1cc>)
 800454e:	0018      	movs	r0, r3
 8004550:	f00c fd44 	bl	8010fdc <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	8819      	ldrh	r1, [r3, #0]
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 800455a:	88db      	ldrh	r3, [r3, #6]
 800455c:	001a      	movs	r2, r3
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <Paint_DrawPoint+0x1d0>)
 8004560:	0018      	movs	r0, r3
 8004562:	f00c fd3b 	bl	8010fdc <iprintf>
        return;
 8004566:	e0a8      	b.n	80046ba <Paint_DrawPoint+0x1be>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8004568:	2320      	movs	r3, #32
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d161      	bne.n	8004636 <Paint_DrawPoint+0x13a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8004572:	230e      	movs	r3, #14
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	2200      	movs	r2, #0
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	e051      	b.n	8004620 <Paint_DrawPoint+0x124>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800457c:	230c      	movs	r3, #12
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e039      	b.n	80045fa <Paint_DrawPoint+0xfe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	200e      	movs	r0, #14
 800458c:	183b      	adds	r3, r7, r0
 800458e:	2100      	movs	r1, #0
 8004590:	5e5b      	ldrsh	r3, [r3, r1]
 8004592:	18d2      	adds	r2, r2, r3
 8004594:	1c7b      	adds	r3, r7, #1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	d438      	bmi.n	800460e <Paint_DrawPoint+0x112>
 800459c:	1d3b      	adds	r3, r7, #4
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	210c      	movs	r1, #12
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2400      	movs	r4, #0
 80045a6:	5f1b      	ldrsh	r3, [r3, r4]
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	1c7b      	adds	r3, r7, #1
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	d42d      	bmi.n	800460e <Paint_DrawPoint+0x112>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	18d3      	adds	r3, r2, r3
 80045bc:	b29a      	uxth	r2, r3
 80045be:	1c7b      	adds	r3, r7, #1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	b298      	uxth	r0, r3
 80045c8:	000c      	movs	r4, r1
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	1c7b      	adds	r3, r7, #1
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	b299      	uxth	r1, r3
 80045e0:	1cbb      	adds	r3, r7, #2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	001a      	movs	r2, r3
 80045e6:	f7ff fd57 	bl	8004098 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80045ea:	193b      	adds	r3, r7, r4
 80045ec:	2200      	movs	r2, #0
 80045ee:	5e9b      	ldrsh	r3, [r3, r2]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3301      	adds	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	230c      	movs	r3, #12
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2200      	movs	r2, #0
 8004600:	5e9a      	ldrsh	r2, [r3, r2]
 8004602:	1c7b      	adds	r3, r7, #1
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	429a      	cmp	r2, r3
 800460c:	dbbb      	blt.n	8004586 <Paint_DrawPoint+0x8a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800460e:	210e      	movs	r1, #14
 8004610:	187b      	adds	r3, r7, r1
 8004612:	2200      	movs	r2, #0
 8004614:	5e9b      	ldrsh	r3, [r3, r2]
 8004616:	b29b      	uxth	r3, r3
 8004618:	3301      	adds	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	187b      	adds	r3, r7, r1
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	230e      	movs	r3, #14
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	5e9a      	ldrsh	r2, [r3, r2]
 8004628:	1c7b      	adds	r3, r7, #1
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	429a      	cmp	r2, r3
 8004632:	dba3      	blt.n	800457c <Paint_DrawPoint+0x80>
 8004634:	e041      	b.n	80046ba <Paint_DrawPoint+0x1be>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004636:	230e      	movs	r3, #14
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	e034      	b.n	80046aa <Paint_DrawPoint+0x1ae>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004640:	230c      	movs	r3, #12
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2200      	movs	r2, #0
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e01e      	b.n	8004688 <Paint_DrawPoint+0x18c>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800464a:	230e      	movs	r3, #14
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	1dbb      	adds	r3, r7, #6
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b298      	uxth	r0, r3
 800465c:	240c      	movs	r4, #12
 800465e:	193b      	adds	r3, r7, r4
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b299      	uxth	r1, r3
 800466e:	1cbb      	adds	r3, r7, #2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	001a      	movs	r2, r3
 8004674:	f7ff fd10 	bl	8004098 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004678:	193b      	adds	r3, r7, r4
 800467a:	2200      	movs	r2, #0
 800467c:	5e9b      	ldrsh	r3, [r3, r2]
 800467e:	b29b      	uxth	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	193b      	adds	r3, r7, r4
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	230c      	movs	r3, #12
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	5e9a      	ldrsh	r2, [r3, r2]
 8004690:	1c7b      	adds	r3, r7, #1
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	dbd8      	blt.n	800464a <Paint_DrawPoint+0x14e>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004698:	210e      	movs	r1, #14
 800469a:	187b      	adds	r3, r7, r1
 800469c:	2200      	movs	r2, #0
 800469e:	5e9b      	ldrsh	r3, [r3, r2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	230e      	movs	r3, #14
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2200      	movs	r2, #0
 80046b0:	5e9a      	ldrsh	r2, [r3, r2]
 80046b2:	1c7b      	adds	r3, r7, #1
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbc2      	blt.n	8004640 <Paint_DrawPoint+0x144>
            }
        }
    }
}
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b004      	add	sp, #16
 80046be:	bdb0      	pop	{r4, r5, r7, pc}
 80046c0:	200004a4 	.word	0x200004a4
 80046c4:	08013858 	.word	0x08013858
 80046c8:	08013898 	.word	0x08013898
 80046cc:	080138bc 	.word	0x080138bc

080046d0 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	0005      	movs	r5, r0
 80046d8:	000c      	movs	r4, r1
 80046da:	0010      	movs	r0, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	1dbb      	adds	r3, r7, #6
 80046e0:	1c2a      	adds	r2, r5, #0
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	1c22      	adds	r2, r4, #0
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	1cbb      	adds	r3, r7, #2
 80046ec:	1c02      	adds	r2, r0, #0
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	003b      	movs	r3, r7
 80046f2:	1c0a      	adds	r2, r1, #0
 80046f4:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80046f6:	4b63      	ldr	r3, [pc, #396]	; (8004884 <Paint_DrawLine+0x1b4>)
 80046f8:	889b      	ldrh	r3, [r3, #4]
 80046fa:	1dba      	adds	r2, r7, #6
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d811      	bhi.n	8004726 <Paint_DrawLine+0x56>
 8004702:	4b60      	ldr	r3, [pc, #384]	; (8004884 <Paint_DrawLine+0x1b4>)
 8004704:	88db      	ldrh	r3, [r3, #6]
 8004706:	1d3a      	adds	r2, r7, #4
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d80b      	bhi.n	8004726 <Paint_DrawLine+0x56>
        Xend > Paint.Width || Yend > Paint.Height) {
 800470e:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <Paint_DrawLine+0x1b4>)
 8004710:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004712:	1cba      	adds	r2, r7, #2
 8004714:	8812      	ldrh	r2, [r2, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d805      	bhi.n	8004726 <Paint_DrawLine+0x56>
        Xend > Paint.Width || Yend > Paint.Height) {
 800471a:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <Paint_DrawLine+0x1b4>)
 800471c:	88db      	ldrh	r3, [r3, #6]
 800471e:	003a      	movs	r2, r7
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d904      	bls.n	8004730 <Paint_DrawLine+0x60>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8004726:	4b58      	ldr	r3, [pc, #352]	; (8004888 <Paint_DrawLine+0x1b8>)
 8004728:	0018      	movs	r0, r3
 800472a:	f00c fce3 	bl	80110f4 <puts>
        return;
 800472e:	e0a5      	b.n	800487c <Paint_DrawLine+0x1ac>
    }

    UWORD Xpoint = Xstart;
 8004730:	2326      	movs	r3, #38	; 0x26
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	1dba      	adds	r2, r7, #6
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800473a:	2324      	movs	r3, #36	; 0x24
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	1d3a      	adds	r2, r7, #4
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004744:	1cbb      	adds	r3, r7, #2
 8004746:	881a      	ldrh	r2, [r3, #0]
 8004748:	1dbb      	adds	r3, r7, #6
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	17da      	asrs	r2, r3, #31
 8004750:	189b      	adds	r3, r3, r2
 8004752:	4053      	eors	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8004756:	003b      	movs	r3, r7
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	17da      	asrs	r2, r3, #31
 8004762:	189b      	adds	r3, r3, r2
 8004764:	4053      	eors	r3, r2
 8004766:	425b      	negs	r3, r3
 8004768:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800476a:	1dba      	adds	r2, r7, #6
 800476c:	1cbb      	adds	r3, r7, #2
 800476e:	8812      	ldrh	r2, [r2, #0]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d201      	bcs.n	800477a <Paint_DrawLine+0xaa>
 8004776:	2301      	movs	r3, #1
 8004778:	e001      	b.n	800477e <Paint_DrawLine+0xae>
 800477a:	2301      	movs	r3, #1
 800477c:	425b      	negs	r3, r3
 800477e:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8004780:	1d3a      	adds	r2, r7, #4
 8004782:	003b      	movs	r3, r7
 8004784:	8812      	ldrh	r2, [r2, #0]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d201      	bcs.n	8004790 <Paint_DrawLine+0xc0>
 800478c:	2301      	movs	r3, #1
 800478e:	e001      	b.n	8004794 <Paint_DrawLine+0xc4>
 8004790:	2301      	movs	r3, #1
 8004792:	425b      	negs	r3, r3
 8004794:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800479e:	231f      	movs	r3, #31
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 80047a6:	241f      	movs	r4, #31
 80047a8:	193b      	adds	r3, r7, r4
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	3201      	adds	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11c      	bne.n	80047f6 <Paint_DrawLine+0x126>
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2103      	movs	r1, #3
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fb fd2c 	bl	8000220 <__aeabi_uidivmod>
 80047c8:	000b      	movs	r3, r1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d112      	bne.n	80047f6 <Paint_DrawLine+0x126>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80047d0:	233c      	movs	r3, #60	; 0x3c
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	2324      	movs	r3, #36	; 0x24
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	8819      	ldrh	r1, [r3, #0]
 80047dc:	2326      	movs	r3, #38	; 0x26
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	8818      	ldrh	r0, [r3, #0]
 80047e2:	2301      	movs	r3, #1
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	0013      	movs	r3, r2
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	f7ff fe87 	bl	80044fc <Paint_DrawPoint>
            Dotted_Len = 0;
 80047ee:	193b      	adds	r3, r7, r4
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e010      	b.n	8004818 <Paint_DrawLine+0x148>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80047f6:	233c      	movs	r3, #60	; 0x3c
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	781c      	ldrb	r4, [r3, #0]
 80047fc:	2338      	movs	r3, #56	; 0x38
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	2324      	movs	r3, #36	; 0x24
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	8819      	ldrh	r1, [r3, #0]
 8004808:	2326      	movs	r3, #38	; 0x26
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	8818      	ldrh	r0, [r3, #0]
 800480e:	2301      	movs	r3, #1
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	0023      	movs	r3, r4
 8004814:	f7ff fe72 	bl	80044fc <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	429a      	cmp	r2, r3
 8004820:	dc11      	bgt.n	8004846 <Paint_DrawLine+0x176>
            if (Xpoint == Xend)
 8004822:	2026      	movs	r0, #38	; 0x26
 8004824:	183a      	adds	r2, r7, r0
 8004826:	1cbb      	adds	r3, r7, #2
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d022      	beq.n	8004876 <Paint_DrawLine+0x1a6>
                break;
            Esp += dy;
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	b299      	uxth	r1, r3
 800483c:	183b      	adds	r3, r7, r0
 800483e:	183a      	adds	r2, r7, r0
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	188a      	adds	r2, r1, r2
 8004844:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	429a      	cmp	r2, r3
 800484e:	dbaa      	blt.n	80047a6 <Paint_DrawLine+0xd6>
            if (Ypoint == Yend)
 8004850:	2024      	movs	r0, #36	; 0x24
 8004852:	183a      	adds	r2, r7, r0
 8004854:	003b      	movs	r3, r7
 8004856:	8812      	ldrh	r2, [r2, #0]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d00d      	beq.n	800487a <Paint_DrawLine+0x1aa>
                break;
            Esp += dx;
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	b299      	uxth	r1, r3
 800486a:	183b      	adds	r3, r7, r0
 800486c:	183a      	adds	r2, r7, r0
 800486e:	8812      	ldrh	r2, [r2, #0]
 8004870:	188a      	adds	r2, r1, r2
 8004872:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 8004874:	e797      	b.n	80047a6 <Paint_DrawLine+0xd6>
                break;
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	e000      	b.n	800487c <Paint_DrawLine+0x1ac>
                break;
 800487a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800487c:	46bd      	mov	sp, r7
 800487e:	b00a      	add	sp, #40	; 0x28
 8004880:	bdb0      	pop	{r4, r5, r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	200004a4 	.word	0x200004a4
 8004888:	080138e4 	.word	0x080138e4

0800488c <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af04      	add	r7, sp, #16
 8004892:	0005      	movs	r5, r0
 8004894:	000c      	movs	r4, r1
 8004896:	0010      	movs	r0, r2
 8004898:	0019      	movs	r1, r3
 800489a:	1dbb      	adds	r3, r7, #6
 800489c:	1c2a      	adds	r2, r5, #0
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	1c22      	adds	r2, r4, #0
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	1cbb      	adds	r3, r7, #2
 80048a8:	1c02      	adds	r2, r0, #0
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	003b      	movs	r3, r7
 80048ae:	1c0a      	adds	r2, r1, #0
 80048b0:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80048b2:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <Paint_DrawRectangle+0x190>)
 80048b4:	889b      	ldrh	r3, [r3, #4]
 80048b6:	1dba      	adds	r2, r7, #6
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d811      	bhi.n	80048e2 <Paint_DrawRectangle+0x56>
 80048be:	4b57      	ldr	r3, [pc, #348]	; (8004a1c <Paint_DrawRectangle+0x190>)
 80048c0:	88db      	ldrh	r3, [r3, #6]
 80048c2:	1d3a      	adds	r2, r7, #4
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d80b      	bhi.n	80048e2 <Paint_DrawRectangle+0x56>
        Xend > Paint.Width || Yend > Paint.Height) {
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <Paint_DrawRectangle+0x190>)
 80048cc:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80048ce:	1cba      	adds	r2, r7, #2
 80048d0:	8812      	ldrh	r2, [r2, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d805      	bhi.n	80048e2 <Paint_DrawRectangle+0x56>
        Xend > Paint.Width || Yend > Paint.Height) {
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <Paint_DrawRectangle+0x190>)
 80048d8:	88db      	ldrh	r3, [r3, #6]
 80048da:	003a      	movs	r2, r7
 80048dc:	8812      	ldrh	r2, [r2, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d904      	bls.n	80048ec <Paint_DrawRectangle+0x60>
        Debug("Input exceeds the normal display range\r\n");
 80048e2:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <Paint_DrawRectangle+0x194>)
 80048e4:	0018      	movs	r0, r3
 80048e6:	f00c fc05 	bl	80110f4 <puts>
        return;
 80048ea:	e094      	b.n	8004a16 <Paint_DrawRectangle+0x18a>
    }

    if (Draw_Fill) {
 80048ec:	2328      	movs	r3, #40	; 0x28
 80048ee:	2208      	movs	r2, #8
 80048f0:	4694      	mov	ip, r2
 80048f2:	44bc      	add	ip, r7
 80048f4:	4463      	add	r3, ip
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02e      	beq.n	800495a <Paint_DrawRectangle+0xce>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80048fc:	230e      	movs	r3, #14
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	1d3a      	adds	r2, r7, #4
 8004902:	8812      	ldrh	r2, [r2, #0]
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	e020      	b.n	800494a <Paint_DrawRectangle+0xbe>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 8004908:	250e      	movs	r5, #14
 800490a:	197b      	adds	r3, r7, r5
 800490c:	881c      	ldrh	r4, [r3, #0]
 800490e:	1cbb      	adds	r3, r7, #2
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	197b      	adds	r3, r7, r5
 8004914:	8819      	ldrh	r1, [r3, #0]
 8004916:	1dbb      	adds	r3, r7, #6
 8004918:	8818      	ldrh	r0, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	9302      	str	r3, [sp, #8]
 800491e:	2324      	movs	r3, #36	; 0x24
 8004920:	2608      	movs	r6, #8
 8004922:	46b4      	mov	ip, r6
 8004924:	44bc      	add	ip, r7
 8004926:	4463      	add	r3, ip
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	2320      	movs	r3, #32
 800492e:	2608      	movs	r6, #8
 8004930:	46b4      	mov	ip, r6
 8004932:	44bc      	add	ip, r7
 8004934:	4463      	add	r3, ip
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	0023      	movs	r3, r4
 800493c:	f7ff fec8 	bl	80046d0 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8004940:	197b      	adds	r3, r7, r5
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	197b      	adds	r3, r7, r5
 8004946:	3201      	adds	r2, #1
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	230e      	movs	r3, #14
 800494c:	18fa      	adds	r2, r7, r3
 800494e:	003b      	movs	r3, r7
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3d7      	bcc.n	8004908 <Paint_DrawRectangle+0x7c>
 8004958:	e05d      	b.n	8004a16 <Paint_DrawRectangle+0x18a>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	881c      	ldrh	r4, [r3, #0]
 800495e:	1cbb      	adds	r3, r7, #2
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	8819      	ldrh	r1, [r3, #0]
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	8818      	ldrh	r0, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	9302      	str	r3, [sp, #8]
 800496e:	2524      	movs	r5, #36	; 0x24
 8004970:	2308      	movs	r3, #8
 8004972:	18fe      	adds	r6, r7, r3
 8004974:	1973      	adds	r3, r6, r5
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2620      	movs	r6, #32
 800497c:	2308      	movs	r3, #8
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	199b      	adds	r3, r3, r6
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	0023      	movs	r3, r4
 8004988:	f7ff fea2 	bl	80046d0 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800498c:	003b      	movs	r3, r7
 800498e:	881c      	ldrh	r4, [r3, #0]
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	8819      	ldrh	r1, [r3, #0]
 8004998:	1dbb      	adds	r3, r7, #6
 800499a:	8818      	ldrh	r0, [r3, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	2308      	movs	r3, #8
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	195b      	adds	r3, r3, r5
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	2308      	movs	r3, #8
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	199b      	adds	r3, r3, r6
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	0023      	movs	r3, r4
 80049b6:	f7ff fe8b 	bl	80046d0 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	881c      	ldrh	r4, [r3, #0]
 80049be:	1cbb      	adds	r3, r7, #2
 80049c0:	881a      	ldrh	r2, [r3, #0]
 80049c2:	003b      	movs	r3, r7
 80049c4:	8819      	ldrh	r1, [r3, #0]
 80049c6:	1cbb      	adds	r3, r7, #2
 80049c8:	8818      	ldrh	r0, [r3, #0]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9302      	str	r3, [sp, #8]
 80049ce:	2308      	movs	r3, #8
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	195b      	adds	r3, r3, r5
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	2308      	movs	r3, #8
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	199b      	adds	r3, r3, r6
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	0023      	movs	r3, r4
 80049e4:	f7ff fe74 	bl	80046d0 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80049e8:	003b      	movs	r3, r7
 80049ea:	881c      	ldrh	r4, [r3, #0]
 80049ec:	1dbb      	adds	r3, r7, #6
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	003b      	movs	r3, r7
 80049f2:	8819      	ldrh	r1, [r3, #0]
 80049f4:	1cbb      	adds	r3, r7, #2
 80049f6:	8818      	ldrh	r0, [r3, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	2308      	movs	r3, #8
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	195b      	adds	r3, r3, r5
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	2308      	movs	r3, #8
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	199b      	adds	r3, r3, r6
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	0023      	movs	r3, r4
 8004a12:	f7ff fe5d 	bl	80046d0 <Paint_DrawLine>
    }
}
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b005      	add	sp, #20
 8004a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1c:	200004a4 	.word	0x200004a4
 8004a20:	08013924 	.word	0x08013924

08004a24 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	0005      	movs	r5, r0
 8004a2c:	000c      	movs	r4, r1
 8004a2e:	0010      	movs	r0, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	1dbb      	adds	r3, r7, #6
 8004a34:	1c2a      	adds	r2, r5, #0
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	1c22      	adds	r2, r4, #0
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	1cbb      	adds	r3, r7, #2
 8004a40:	1c02      	adds	r2, r0, #0
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	003b      	movs	r3, r7
 8004a46:	1c0a      	adds	r2, r1, #0
 8004a48:	801a      	strh	r2, [r3, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8004a4a:	4b94      	ldr	r3, [pc, #592]	; (8004c9c <Paint_DrawCircle+0x278>)
 8004a4c:	889b      	ldrh	r3, [r3, #4]
 8004a4e:	1dba      	adds	r2, r7, #6
 8004a50:	8812      	ldrh	r2, [r2, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d805      	bhi.n	8004a62 <Paint_DrawCircle+0x3e>
 8004a56:	4b91      	ldr	r3, [pc, #580]	; (8004c9c <Paint_DrawCircle+0x278>)
 8004a58:	88db      	ldrh	r3, [r3, #6]
 8004a5a:	1d3a      	adds	r2, r7, #4
 8004a5c:	8812      	ldrh	r2, [r2, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d304      	bcc.n	8004a6c <Paint_DrawCircle+0x48>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8004a62:	4b8f      	ldr	r3, [pc, #572]	; (8004ca0 <Paint_DrawCircle+0x27c>)
 8004a64:	0018      	movs	r0, r3
 8004a66:	f00c fb45 	bl	80110f4 <puts>
        return;
 8004a6a:	e229      	b.n	8004ec0 <Paint_DrawCircle+0x49c>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8004a6c:	230e      	movs	r3, #14
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	801a      	strh	r2, [r3, #0]
    YCurrent = Radius;
 8004a74:	230c      	movs	r3, #12
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	1cba      	adds	r2, r7, #2
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	801a      	strh	r2, [r3, #0]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8004a7e:	1cbb      	adds	r3, r7, #2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2203      	movs	r2, #3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	801a      	strh	r2, [r3, #0]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8004a92:	2324      	movs	r3, #36	; 0x24
 8004a94:	2208      	movs	r2, #8
 8004a96:	4694      	mov	ip, r2
 8004a98:	44bc      	add	ip, r7
 8004a9a:	4463      	add	r3, ip
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d000      	beq.n	8004aa4 <Paint_DrawCircle+0x80>
 8004aa2:	e202      	b.n	8004eaa <Paint_DrawCircle+0x486>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8004aa4:	e0ed      	b.n	8004c82 <Paint_DrawCircle+0x25e>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	220e      	movs	r2, #14
 8004aac:	18ba      	adds	r2, r7, r2
 8004aae:	8812      	ldrh	r2, [r2, #0]
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	e0a1      	b.n	8004bf8 <Paint_DrawCircle+0x1d4>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8004ab4:	250e      	movs	r5, #14
 8004ab6:	197b      	adds	r3, r7, r5
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	1dbb      	adds	r3, r7, #6
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	18d3      	adds	r3, r2, r3
 8004ac0:	b298      	uxth	r0, r3
 8004ac2:	2408      	movs	r4, #8
 8004ac4:	193b      	adds	r3, r7, r4
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	003b      	movs	r3, r7
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f7ff fd0f 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	1dba      	adds	r2, r7, #6
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	b298      	uxth	r0, r3
 8004aea:	193b      	adds	r3, r7, r4
 8004aec:	881a      	ldrh	r2, [r3, #0]
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	18d3      	adds	r3, r2, r3
 8004af4:	b299      	uxth	r1, r3
 8004af6:	003b      	movs	r3, r7
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2301      	movs	r3, #1
 8004b00:	f7ff fcfc 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	1dba      	adds	r2, r7, #6
 8004b0a:	8812      	ldrh	r2, [r2, #0]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	b298      	uxth	r0, r3
 8004b10:	197b      	adds	r3, r7, r5
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	18d3      	adds	r3, r2, r3
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	003b      	movs	r3, r7
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	2301      	movs	r3, #1
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	2301      	movs	r3, #1
 8004b26:	f7ff fce9 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8004b2a:	193b      	adds	r3, r7, r4
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	1dba      	adds	r2, r7, #6
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	b298      	uxth	r0, r3
 8004b36:	197b      	adds	r3, r7, r5
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b299      	uxth	r1, r3
 8004b42:	003b      	movs	r3, r7
 8004b44:	881a      	ldrh	r2, [r3, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f7ff fcd6 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8004b50:	197b      	adds	r3, r7, r5
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	1dba      	adds	r2, r7, #6
 8004b56:	8812      	ldrh	r2, [r2, #0]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	b298      	uxth	r0, r3
 8004b5c:	193b      	adds	r3, r7, r4
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	1d3a      	adds	r2, r7, #4
 8004b62:	8812      	ldrh	r2, [r2, #0]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b299      	uxth	r1, r3
 8004b68:	003b      	movs	r3, r7
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2301      	movs	r3, #1
 8004b72:	f7ff fcc3 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8004b76:	197b      	adds	r3, r7, r5
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	1dbb      	adds	r3, r7, #6
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	18d3      	adds	r3, r2, r3
 8004b80:	b298      	uxth	r0, r3
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	b299      	uxth	r1, r3
 8004b8e:	003b      	movs	r3, r7
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	2301      	movs	r3, #1
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2301      	movs	r3, #1
 8004b98:	f7ff fcb0 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8004b9c:	193b      	adds	r3, r7, r4
 8004b9e:	881a      	ldrh	r2, [r3, #0]
 8004ba0:	1dbb      	adds	r3, r7, #6
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	18d3      	adds	r3, r2, r3
 8004ba6:	b298      	uxth	r0, r3
 8004ba8:	197b      	adds	r3, r7, r5
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	1d3a      	adds	r2, r7, #4
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b299      	uxth	r1, r3
 8004bb4:	003b      	movs	r3, r7
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f7ff fc9d 	bl	80044fc <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	1dbb      	adds	r3, r7, #6
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	b298      	uxth	r0, r3
 8004bce:	197b      	adds	r3, r7, r5
 8004bd0:	881a      	ldrh	r2, [r3, #0]
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	003b      	movs	r3, r7
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	2301      	movs	r3, #1
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2301      	movs	r3, #1
 8004be4:	f7ff fc8a 	bl	80044fc <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8004be8:	193b      	adds	r3, r7, r4
 8004bea:	2200      	movs	r2, #0
 8004bec:	5e9b      	ldrsh	r3, [r3, r2]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	193b      	adds	r3, r7, r4
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	18fa      	adds	r2, r7, r3
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2100      	movs	r1, #0
 8004c02:	5e52      	ldrsh	r2, [r2, r1]
 8004c04:	2100      	movs	r1, #0
 8004c06:	5e5b      	ldrsh	r3, [r3, r1]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dc00      	bgt.n	8004c0e <Paint_DrawCircle+0x1ea>
 8004c0c:	e752      	b.n	8004ab4 <Paint_DrawCircle+0x90>
            }
            if (Esp < 0 )
 8004c0e:	210a      	movs	r1, #10
 8004c10:	187b      	adds	r3, r7, r1
 8004c12:	2200      	movs	r2, #0
 8004c14:	5e9b      	ldrsh	r3, [r3, r2]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da0d      	bge.n	8004c36 <Paint_DrawCircle+0x212>
                Esp += 4 * XCurrent + 6;
 8004c1a:	230e      	movs	r3, #14
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	18d3      	adds	r3, r2, r3
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3306      	adds	r3, #6
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e01c      	b.n	8004c70 <Paint_DrawCircle+0x24c>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8004c36:	230e      	movs	r3, #14
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	5e9a      	ldrsh	r2, [r3, r2]
 8004c3e:	210c      	movs	r1, #12
 8004c40:	187b      	adds	r3, r7, r1
 8004c42:	2000      	movs	r0, #0
 8004c44:	5e1b      	ldrsh	r3, [r3, r0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	200a      	movs	r0, #10
 8004c50:	183b      	adds	r3, r7, r0
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	18d3      	adds	r3, r2, r3
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	330a      	adds	r3, #10
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	183b      	adds	r3, r7, r0
 8004c5e:	801a      	strh	r2, [r3, #0]
                YCurrent --;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	2200      	movs	r2, #0
 8004c64:	5e9b      	ldrsh	r3, [r3, r2]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	801a      	strh	r2, [r3, #0]
            }
            XCurrent ++;
 8004c70:	210e      	movs	r1, #14
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	2200      	movs	r2, #0
 8004c76:	5e9b      	ldrsh	r3, [r3, r2]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	801a      	strh	r2, [r3, #0]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8004c82:	230e      	movs	r3, #14
 8004c84:	18fa      	adds	r2, r7, r3
 8004c86:	230c      	movs	r3, #12
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5e52      	ldrsh	r2, [r2, r1]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5e5b      	ldrsh	r3, [r3, r1]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	dc00      	bgt.n	8004c98 <Paint_DrawCircle+0x274>
 8004c96:	e706      	b.n	8004aa6 <Paint_DrawCircle+0x82>
 8004c98:	e112      	b.n	8004ec0 <Paint_DrawCircle+0x49c>
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	200004a4 	.word	0x200004a4
 8004ca0:	08013954 	.word	0x08013954
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8004ca4:	250e      	movs	r5, #14
 8004ca6:	197b      	adds	r3, r7, r5
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	b298      	uxth	r0, r3
 8004cb2:	260c      	movs	r6, #12
 8004cb4:	19bb      	adds	r3, r7, r6
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	b299      	uxth	r1, r3
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4694      	mov	ip, r2
 8004cc6:	44bc      	add	ip, r7
 8004cc8:	4463      	add	r3, ip
 8004cca:	781c      	ldrb	r4, [r3, #0]
 8004ccc:	003b      	movs	r3, r7
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	0023      	movs	r3, r4
 8004cd6:	f7ff fc11 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8004cda:	197b      	adds	r3, r7, r5
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	1dba      	adds	r2, r7, #6
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b298      	uxth	r0, r3
 8004ce6:	19bb      	adds	r3, r7, r6
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	1d3b      	adds	r3, r7, #4
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	b299      	uxth	r1, r3
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	4694      	mov	ip, r2
 8004cf8:	44bc      	add	ip, r7
 8004cfa:	4463      	add	r3, ip
 8004cfc:	781c      	ldrb	r4, [r3, #0]
 8004cfe:	003b      	movs	r3, r7
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	2301      	movs	r3, #1
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	0023      	movs	r3, r4
 8004d08:	f7ff fbf8 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8004d0c:	19bb      	adds	r3, r7, r6
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	1dba      	adds	r2, r7, #6
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	b298      	uxth	r0, r3
 8004d18:	197b      	adds	r3, r7, r5
 8004d1a:	881a      	ldrh	r2, [r3, #0]
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	18d3      	adds	r3, r2, r3
 8004d22:	b299      	uxth	r1, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	2208      	movs	r2, #8
 8004d28:	4694      	mov	ip, r2
 8004d2a:	44bc      	add	ip, r7
 8004d2c:	4463      	add	r3, ip
 8004d2e:	781c      	ldrb	r4, [r3, #0]
 8004d30:	003b      	movs	r3, r7
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	0023      	movs	r3, r4
 8004d3a:	f7ff fbdf 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8004d3e:	19bb      	adds	r3, r7, r6
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	1dba      	adds	r2, r7, #6
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	b298      	uxth	r0, r3
 8004d4a:	197b      	adds	r3, r7, r5
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	1d3a      	adds	r2, r7, #4
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	b299      	uxth	r1, r3
 8004d56:	2320      	movs	r3, #32
 8004d58:	2208      	movs	r2, #8
 8004d5a:	4694      	mov	ip, r2
 8004d5c:	44bc      	add	ip, r7
 8004d5e:	4463      	add	r3, ip
 8004d60:	781c      	ldrb	r4, [r3, #0]
 8004d62:	003b      	movs	r3, r7
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	2301      	movs	r3, #1
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	0023      	movs	r3, r4
 8004d6c:	f7ff fbc6 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8004d70:	197b      	adds	r3, r7, r5
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	1dba      	adds	r2, r7, #6
 8004d76:	8812      	ldrh	r2, [r2, #0]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	19bb      	adds	r3, r7, r6
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	1d3a      	adds	r2, r7, #4
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b299      	uxth	r1, r3
 8004d88:	2320      	movs	r3, #32
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4694      	mov	ip, r2
 8004d8e:	44bc      	add	ip, r7
 8004d90:	4463      	add	r3, ip
 8004d92:	781c      	ldrb	r4, [r3, #0]
 8004d94:	003b      	movs	r3, r7
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	0023      	movs	r3, r4
 8004d9e:	f7ff fbad 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8004da2:	197b      	adds	r3, r7, r5
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	1dbb      	adds	r3, r7, #6
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	b298      	uxth	r0, r3
 8004dae:	19bb      	adds	r3, r7, r6
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	1d3a      	adds	r2, r7, #4
 8004db4:	8812      	ldrh	r2, [r2, #0]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b299      	uxth	r1, r3
 8004dba:	2320      	movs	r3, #32
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	4694      	mov	ip, r2
 8004dc0:	44bc      	add	ip, r7
 8004dc2:	4463      	add	r3, ip
 8004dc4:	781c      	ldrb	r4, [r3, #0]
 8004dc6:	003b      	movs	r3, r7
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	0023      	movs	r3, r4
 8004dd0:	f7ff fb94 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8004dd4:	19bb      	adds	r3, r7, r6
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	1dbb      	adds	r3, r7, #6
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	b298      	uxth	r0, r3
 8004de0:	197b      	adds	r3, r7, r5
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	1d3a      	adds	r2, r7, #4
 8004de6:	8812      	ldrh	r2, [r2, #0]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	b299      	uxth	r1, r3
 8004dec:	2320      	movs	r3, #32
 8004dee:	2208      	movs	r2, #8
 8004df0:	4694      	mov	ip, r2
 8004df2:	44bc      	add	ip, r7
 8004df4:	4463      	add	r3, ip
 8004df6:	781c      	ldrb	r4, [r3, #0]
 8004df8:	003b      	movs	r3, r7
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	0023      	movs	r3, r4
 8004e02:	f7ff fb7b 	bl	80044fc <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8004e06:	19bb      	adds	r3, r7, r6
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	1dbb      	adds	r3, r7, #6
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	18d3      	adds	r3, r2, r3
 8004e10:	b298      	uxth	r0, r3
 8004e12:	197b      	adds	r3, r7, r5
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	b299      	uxth	r1, r3
 8004e1e:	2320      	movs	r3, #32
 8004e20:	2208      	movs	r2, #8
 8004e22:	4694      	mov	ip, r2
 8004e24:	44bc      	add	ip, r7
 8004e26:	4463      	add	r3, ip
 8004e28:	781c      	ldrb	r4, [r3, #0]
 8004e2a:	003b      	movs	r3, r7
 8004e2c:	881a      	ldrh	r2, [r3, #0]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	0023      	movs	r3, r4
 8004e34:	f7ff fb62 	bl	80044fc <Paint_DrawPoint>

            if (Esp < 0 )
 8004e38:	210a      	movs	r1, #10
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da0c      	bge.n	8004e5e <Paint_DrawCircle+0x43a>
                Esp += 4 * XCurrent + 6;
 8004e44:	197b      	adds	r3, r7, r5
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	18d3      	adds	r3, r2, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3306      	adds	r3, #6
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e01c      	b.n	8004e98 <Paint_DrawCircle+0x474>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8004e5e:	230e      	movs	r3, #14
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2200      	movs	r2, #0
 8004e64:	5e9a      	ldrsh	r2, [r3, r2]
 8004e66:	210c      	movs	r1, #12
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	5e1b      	ldrsh	r3, [r3, r0]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	200a      	movs	r0, #10
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	18d3      	adds	r3, r2, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	330a      	adds	r3, #10
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	801a      	strh	r2, [r3, #0]
                YCurrent --;
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	5e9b      	ldrsh	r3, [r3, r2]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	801a      	strh	r2, [r3, #0]
            }
            XCurrent ++;
 8004e98:	210e      	movs	r1, #14
 8004e9a:	187b      	adds	r3, r7, r1
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	5e9b      	ldrsh	r3, [r3, r2]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	801a      	strh	r2, [r3, #0]
        while (XCurrent <= YCurrent ) {
 8004eaa:	230e      	movs	r3, #14
 8004eac:	18fa      	adds	r2, r7, r3
 8004eae:	230c      	movs	r3, #12
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	5e52      	ldrsh	r2, [r2, r1]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5e5b      	ldrsh	r3, [r3, r1]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	dc00      	bgt.n	8004ec0 <Paint_DrawCircle+0x49c>
 8004ebe:	e6f1      	b.n	8004ca4 <Paint_DrawCircle+0x280>
        }
    }
}
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b005      	add	sp, #20
 8004ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)

08004ec8 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004ec8:	b5b0      	push	{r4, r5, r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	0004      	movs	r4, r0
 8004ed0:	0008      	movs	r0, r1
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	250e      	movs	r5, #14
 8004ed8:	197b      	adds	r3, r7, r5
 8004eda:	1c22      	adds	r2, r4, #0
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	240c      	movs	r4, #12
 8004ee0:	193b      	adds	r3, r7, r4
 8004ee2:	1c02      	adds	r2, r0, #0
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	230b      	movs	r3, #11
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	1c0a      	adds	r2, r1, #0
 8004eec:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004eee:	4b66      	ldr	r3, [pc, #408]	; (8005088 <Paint_DrawChar+0x1c0>)
 8004ef0:	889b      	ldrh	r3, [r3, #4]
 8004ef2:	197a      	adds	r2, r7, r5
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d805      	bhi.n	8004f06 <Paint_DrawChar+0x3e>
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <Paint_DrawChar+0x1c0>)
 8004efc:	88db      	ldrh	r3, [r3, #6]
 8004efe:	193a      	adds	r2, r7, r4
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d904      	bls.n	8004f10 <Paint_DrawChar+0x48>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8004f06:	4b61      	ldr	r3, [pc, #388]	; (800508c <Paint_DrawChar+0x1c4>)
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f00c f8f3 	bl	80110f4 <puts>
        return;
 8004f0e:	e0b7      	b.n	8005080 <Paint_DrawChar+0x1b8>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004f10:	230b      	movs	r3, #11
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	3b20      	subs	r3, #32
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	88d2      	ldrh	r2, [r2, #6]
 8004f1c:	4353      	muls	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	8892      	ldrh	r2, [r2, #4]
 8004f22:	08d2      	lsrs	r2, r2, #3
 8004f24:	b292      	uxth	r2, r2
 8004f26:	0010      	movs	r0, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	8892      	ldrh	r2, [r2, #4]
 8004f2c:	2107      	movs	r1, #7
 8004f2e:	400a      	ands	r2, r1
 8004f30:	b292      	uxth	r2, r2
 8004f32:	1e51      	subs	r1, r2, #1
 8004f34:	418a      	sbcs	r2, r1
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	1882      	adds	r2, r0, r2
 8004f3a:	4353      	muls	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	18d3      	adds	r3, r2, r3
 8004f46:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004f48:	231e      	movs	r3, #30
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e08e      	b.n	8005070 <Paint_DrawChar+0x1a8>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004f52:	231c      	movs	r3, #28
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	2200      	movs	r2, #0
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e071      	b.n	8005040 <Paint_DrawChar+0x178>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8004f5c:	2334      	movs	r3, #52	; 0x34
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2bff      	cmp	r3, #255	; 0xff
 8004f64:	d122      	bne.n	8004fac <Paint_DrawChar+0xe4>
                if (*ptr & (0x80 >> (Column % 8)))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	201c      	movs	r0, #28
 8004f6e:	183b      	adds	r3, r7, r0
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	2207      	movs	r2, #7
 8004f74:	4013      	ands	r3, r2
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	411a      	asrs	r2, r3
 8004f7a:	0013      	movs	r3, r2
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	d04e      	beq.n	800501e <Paint_DrawChar+0x156>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004f80:	230e      	movs	r3, #14
 8004f82:	18fa      	adds	r2, r7, r3
 8004f84:	183b      	adds	r3, r7, r0
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	18d3      	adds	r3, r2, r3
 8004f8c:	b298      	uxth	r0, r3
 8004f8e:	230c      	movs	r3, #12
 8004f90:	18fa      	adds	r2, r7, r3
 8004f92:	231e      	movs	r3, #30
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	18d3      	adds	r3, r2, r3
 8004f9c:	b299      	uxth	r1, r3
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	f7ff f877 	bl	8004098 <Paint_SetPixel>
 8004faa:	e038      	b.n	800501e <Paint_DrawChar+0x156>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	201c      	movs	r0, #28
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	2207      	movs	r2, #7
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	411a      	asrs	r2, r3
 8004fc0:	0013      	movs	r3, r2
 8004fc2:	400b      	ands	r3, r1
 8004fc4:	d015      	beq.n	8004ff2 <Paint_DrawChar+0x12a>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004fc6:	230e      	movs	r3, #14
 8004fc8:	18fa      	adds	r2, r7, r3
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	18d3      	adds	r3, r2, r3
 8004fd2:	b298      	uxth	r0, r3
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	18fa      	adds	r2, r7, r3
 8004fd8:	231e      	movs	r3, #30
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	8812      	ldrh	r2, [r2, #0]
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	2330      	movs	r3, #48	; 0x30
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	001a      	movs	r2, r3
 8004fec:	f7ff f854 	bl	8004098 <Paint_SetPixel>
 8004ff0:	e015      	b.n	800501e <Paint_DrawChar+0x156>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004ff2:	230e      	movs	r3, #14
 8004ff4:	18fa      	adds	r2, r7, r3
 8004ff6:	231c      	movs	r3, #28
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	8812      	ldrh	r2, [r2, #0]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	18d3      	adds	r3, r2, r3
 8005000:	b298      	uxth	r0, r3
 8005002:	230c      	movs	r3, #12
 8005004:	18fa      	adds	r2, r7, r3
 8005006:	231e      	movs	r3, #30
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	b299      	uxth	r1, r3
 8005012:	2334      	movs	r3, #52	; 0x34
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	001a      	movs	r2, r3
 800501a:	f7ff f83d 	bl	8004098 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800501e:	231c      	movs	r3, #28
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	2207      	movs	r2, #7
 8005026:	4013      	ands	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b07      	cmp	r3, #7
 800502c:	d102      	bne.n	8005034 <Paint_DrawChar+0x16c>
                ptr++;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	3301      	adds	r3, #1
 8005032:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8005034:	211c      	movs	r1, #28
 8005036:	187b      	adds	r3, r7, r1
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	187b      	adds	r3, r7, r1
 800503c:	3201      	adds	r2, #1
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	889b      	ldrh	r3, [r3, #4]
 8005044:	221c      	movs	r2, #28
 8005046:	18ba      	adds	r2, r7, r2
 8005048:	8812      	ldrh	r2, [r2, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d200      	bcs.n	8005050 <Paint_DrawChar+0x188>
 800504e:	e785      	b.n	8004f5c <Paint_DrawChar+0x94>
        }// Write a line
        if (Font->Width % 8 != 0)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	889b      	ldrh	r3, [r3, #4]
 8005054:	2207      	movs	r2, #7
 8005056:	4013      	ands	r3, r2
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <Paint_DrawChar+0x19c>
            ptr++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3301      	adds	r3, #1
 8005062:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005064:	211e      	movs	r1, #30
 8005066:	187b      	adds	r3, r7, r1
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	187b      	adds	r3, r7, r1
 800506c:	3201      	adds	r2, #1
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	88db      	ldrh	r3, [r3, #6]
 8005074:	221e      	movs	r2, #30
 8005076:	18ba      	adds	r2, r7, r2
 8005078:	8812      	ldrh	r2, [r2, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d200      	bcs.n	8005080 <Paint_DrawChar+0x1b8>
 800507e:	e768      	b.n	8004f52 <Paint_DrawChar+0x8a>
    }// Write all
}
 8005080:	46bd      	mov	sp, r7
 8005082:	b008      	add	sp, #32
 8005084:	bdb0      	pop	{r4, r5, r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	200004a4 	.word	0x200004a4
 800508c:	08013994 	.word	0x08013994

08005090 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8005090:	b5b0      	push	{r4, r5, r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60ba      	str	r2, [r7, #8]
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	240e      	movs	r4, #14
 800509c:	193b      	adds	r3, r7, r4
 800509e:	1c02      	adds	r2, r0, #0
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	200c      	movs	r0, #12
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	1c0a      	adds	r2, r1, #0
 80050a8:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 80050aa:	2316      	movs	r3, #22
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	0021      	movs	r1, r4
 80050b0:	187a      	adds	r2, r7, r1
 80050b2:	8812      	ldrh	r2, [r2, #0]
 80050b4:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 80050b6:	2314      	movs	r3, #20
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	183a      	adds	r2, r7, r0
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80050c0:	4b30      	ldr	r3, [pc, #192]	; (8005184 <Paint_DrawString_EN+0xf4>)
 80050c2:	889b      	ldrh	r3, [r3, #4]
 80050c4:	187a      	adds	r2, r7, r1
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d805      	bhi.n	80050d8 <Paint_DrawString_EN+0x48>
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <Paint_DrawString_EN+0xf4>)
 80050ce:	88db      	ldrh	r3, [r3, #6]
 80050d0:	183a      	adds	r2, r7, r0
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d94e      	bls.n	8005176 <Paint_DrawString_EN+0xe6>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <Paint_DrawString_EN+0xf8>)
 80050da:	0018      	movs	r0, r3
 80050dc:	f00c f80a 	bl	80110f4 <puts>
        return;
 80050e0:	e04d      	b.n	800517e <Paint_DrawString_EN+0xee>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80050e2:	2116      	movs	r1, #22
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	8892      	ldrh	r2, [r2, #4]
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	4a25      	ldr	r2, [pc, #148]	; (8005184 <Paint_DrawString_EN+0xf4>)
 80050f0:	8892      	ldrh	r2, [r2, #4]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	dd0c      	ble.n	8005110 <Paint_DrawString_EN+0x80>
            Xpoint = Xstart;
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	220e      	movs	r2, #14
 80050fa:	18ba      	adds	r2, r7, r2
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	88d9      	ldrh	r1, [r3, #6]
 8005104:	2214      	movs	r2, #20
 8005106:	18bb      	adds	r3, r7, r2
 8005108:	18ba      	adds	r2, r7, r2
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	188a      	adds	r2, r1, r2
 800510e:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8005110:	2114      	movs	r1, #20
 8005112:	187b      	adds	r3, r7, r1
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	88d2      	ldrh	r2, [r2, #6]
 800511a:	189b      	adds	r3, r3, r2
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <Paint_DrawString_EN+0xf4>)
 800511e:	88d2      	ldrh	r2, [r2, #6]
 8005120:	4293      	cmp	r3, r2
 8005122:	dd0a      	ble.n	800513a <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 8005124:	2316      	movs	r3, #22
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	220e      	movs	r2, #14
 800512a:	18ba      	adds	r2, r7, r2
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 8005130:	187b      	adds	r3, r7, r1
 8005132:	220c      	movs	r2, #12
 8005134:	18ba      	adds	r2, r7, r2
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Foreground, Color_Background); //edited by Bart
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	687c      	ldr	r4, [r7, #4]
 8005140:	2314      	movs	r3, #20
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	8819      	ldrh	r1, [r3, #0]
 8005146:	2516      	movs	r5, #22
 8005148:	197b      	adds	r3, r7, r5
 800514a:	8818      	ldrh	r0, [r3, #0]
 800514c:	232c      	movs	r3, #44	; 0x2c
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2328      	movs	r3, #40	; 0x28
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	0023      	movs	r3, r4
 800515e:	f7ff feb3 	bl	8004ec8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3301      	adds	r3, #1
 8005166:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8899      	ldrh	r1, [r3, #4]
 800516c:	197b      	adds	r3, r7, r5
 800516e:	197a      	adds	r2, r7, r5
 8005170:	8812      	ldrh	r2, [r2, #0]
 8005172:	188a      	adds	r2, r1, r2
 8005174:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1b1      	bne.n	80050e2 <Paint_DrawString_EN+0x52>
    }
}
 800517e:	46bd      	mov	sp, r7
 8005180:	b006      	add	sp, #24
 8005182:	bdb0      	pop	{r4, r5, r7, pc}
 8005184:	200004a4 	.word	0x200004a4
 8005188:	080139d4 	.word	0x080139d4

0800518c <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	4c6b      	ldr	r4, [pc, #428]	; (800533c <Paint_DrawNum+0x1b0>)
 8005190:	44a5      	add	sp, r4
 8005192:	af02      	add	r7, sp, #8
 8005194:	60ba      	str	r2, [r7, #8]
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	4b69      	ldr	r3, [pc, #420]	; (8005340 <Paint_DrawNum+0x1b4>)
 800519a:	2286      	movs	r2, #134	; 0x86
 800519c:	0092      	lsls	r2, r2, #2
 800519e:	4694      	mov	ip, r2
 80051a0:	44bc      	add	ip, r7
 80051a2:	4463      	add	r3, ip
 80051a4:	1c02      	adds	r2, r0, #0
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	4b66      	ldr	r3, [pc, #408]	; (8005344 <Paint_DrawNum+0x1b8>)
 80051aa:	2286      	movs	r2, #134	; 0x86
 80051ac:	0092      	lsls	r2, r2, #2
 80051ae:	4694      	mov	ip, r2
 80051b0:	44bc      	add	ip, r7
 80051b2:	4463      	add	r3, ip
 80051b4:	1c0a      	adds	r2, r1, #0
 80051b6:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 80051b8:	4b63      	ldr	r3, [pc, #396]	; (8005348 <Paint_DrawNum+0x1bc>)
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	2200      	movs	r2, #0
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	2385      	movs	r3, #133	; 0x85
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	801a      	strh	r2, [r3, #0]
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80051ca:	4b60      	ldr	r3, [pc, #384]	; (800534c <Paint_DrawNum+0x1c0>)
 80051cc:	2286      	movs	r2, #134	; 0x86
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	4694      	mov	ip, r2
 80051d2:	44bc      	add	ip, r7
 80051d4:	4463      	add	r3, ip
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	3304      	adds	r3, #4
 80051dc:	22fb      	movs	r2, #251	; 0xfb
 80051de:	2100      	movs	r1, #0
 80051e0:	0018      	movs	r0, r3
 80051e2:	f00b fe4b 	bl	8010e7c <memset>
 80051e6:	4b5a      	ldr	r3, [pc, #360]	; (8005350 <Paint_DrawNum+0x1c4>)
 80051e8:	2286      	movs	r2, #134	; 0x86
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	4694      	mov	ip, r2
 80051ee:	44bc      	add	ip, r7
 80051f0:	4463      	add	r3, ip
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	3304      	adds	r3, #4
 80051f8:	22fb      	movs	r2, #251	; 0xfb
 80051fa:	2100      	movs	r1, #0
 80051fc:	0018      	movs	r0, r3
 80051fe:	f00b fe3d 	bl	8010e7c <memset>
    uint8_t *pStr = Str_Array;
 8005202:	2388      	movs	r3, #136	; 0x88
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2284      	movs	r2, #132	; 0x84
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	18ba      	adds	r2, r7, r2
 800520e:	6013      	str	r3, [r2, #0]

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8005210:	4b50      	ldr	r3, [pc, #320]	; (8005354 <Paint_DrawNum+0x1c8>)
 8005212:	889b      	ldrh	r3, [r3, #4]
 8005214:	4a4a      	ldr	r2, [pc, #296]	; (8005340 <Paint_DrawNum+0x1b4>)
 8005216:	2186      	movs	r1, #134	; 0x86
 8005218:	0089      	lsls	r1, r1, #2
 800521a:	468c      	mov	ip, r1
 800521c:	44bc      	add	ip, r7
 800521e:	4462      	add	r2, ip
 8005220:	8812      	ldrh	r2, [r2, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d80a      	bhi.n	800523c <Paint_DrawNum+0xb0>
 8005226:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <Paint_DrawNum+0x1c8>)
 8005228:	88db      	ldrh	r3, [r3, #6]
 800522a:	4a46      	ldr	r2, [pc, #280]	; (8005344 <Paint_DrawNum+0x1b8>)
 800522c:	2186      	movs	r1, #134	; 0x86
 800522e:	0089      	lsls	r1, r1, #2
 8005230:	468c      	mov	ip, r1
 8005232:	44bc      	add	ip, r7
 8005234:	4462      	add	r2, ip
 8005236:	8812      	ldrh	r2, [r2, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d927      	bls.n	800528c <Paint_DrawNum+0x100>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <Paint_DrawNum+0x1cc>)
 800523e:	0018      	movs	r0, r3
 8005240:	f00b ff58 	bl	80110f4 <puts>
 8005244:	e074      	b.n	8005330 <Paint_DrawNum+0x1a4>
        return;
    }

    //Converts a number to a string
    while (Nummber) {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	210a      	movs	r1, #10
 800524a:	0018      	movs	r0, r3
 800524c:	f7fb f8d2 	bl	80003f4 <__aeabi_idivmod>
 8005250:	000b      	movs	r3, r1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	483c      	ldr	r0, [pc, #240]	; (8005348 <Paint_DrawNum+0x1bc>)
 8005256:	183b      	adds	r3, r7, r0
 8005258:	2100      	movs	r1, #0
 800525a:	5e5b      	ldrsh	r3, [r3, r1]
 800525c:	3230      	adds	r2, #48	; 0x30
 800525e:	b2d1      	uxtb	r1, r2
 8005260:	4a3b      	ldr	r2, [pc, #236]	; (8005350 <Paint_DrawNum+0x1c4>)
 8005262:	2486      	movs	r4, #134	; 0x86
 8005264:	00a4      	lsls	r4, r4, #2
 8005266:	46a4      	mov	ip, r4
 8005268:	44bc      	add	ip, r7
 800526a:	4462      	add	r2, ip
 800526c:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 800526e:	183b      	adds	r3, r7, r0
 8005270:	2200      	movs	r2, #0
 8005272:	5e9b      	ldrsh	r3, [r3, r2]
 8005274:	b29b      	uxth	r3, r3
 8005276:	3301      	adds	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	183b      	adds	r3, r7, r0
 800527c:	801a      	strh	r2, [r3, #0]
        Nummber /= 10;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	210a      	movs	r1, #10
 8005282:	0018      	movs	r0, r3
 8005284:	f7fa ffd0 	bl	8000228 <__divsi3>
 8005288:	0003      	movs	r3, r0
 800528a:	60bb      	str	r3, [r7, #8]
    while (Nummber) {
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1d9      	bne.n	8005246 <Paint_DrawNum+0xba>
    }

    //The string is inverted
    while (Num_Bit > 0) {
 8005292:	e027      	b.n	80052e4 <Paint_DrawNum+0x158>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8005294:	482c      	ldr	r0, [pc, #176]	; (8005348 <Paint_DrawNum+0x1bc>)
 8005296:	183b      	adds	r3, r7, r0
 8005298:	2200      	movs	r2, #0
 800529a:	5e9b      	ldrsh	r3, [r3, r2]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	2485      	movs	r4, #133	; 0x85
 80052a0:	00a4      	lsls	r4, r4, #2
 80052a2:	193b      	adds	r3, r7, r4
 80052a4:	2100      	movs	r1, #0
 80052a6:	5e5b      	ldrsh	r3, [r3, r1]
 80052a8:	4929      	ldr	r1, [pc, #164]	; (8005350 <Paint_DrawNum+0x1c4>)
 80052aa:	2586      	movs	r5, #134	; 0x86
 80052ac:	00ad      	lsls	r5, r5, #2
 80052ae:	46ac      	mov	ip, r5
 80052b0:	44bc      	add	ip, r7
 80052b2:	4461      	add	r1, ip
 80052b4:	5c89      	ldrb	r1, [r1, r2]
 80052b6:	4a25      	ldr	r2, [pc, #148]	; (800534c <Paint_DrawNum+0x1c0>)
 80052b8:	2586      	movs	r5, #134	; 0x86
 80052ba:	00ad      	lsls	r5, r5, #2
 80052bc:	46ac      	mov	ip, r5
 80052be:	44bc      	add	ip, r7
 80052c0:	4462      	add	r2, ip
 80052c2:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	2200      	movs	r2, #0
 80052c8:	5e9b      	ldrsh	r3, [r3, r2]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3301      	adds	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	801a      	strh	r2, [r3, #0]
        Num_Bit --;
 80052d4:	183b      	adds	r3, r7, r0
 80052d6:	2200      	movs	r2, #0
 80052d8:	5e9b      	ldrsh	r3, [r3, r2]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	183b      	adds	r3, r7, r0
 80052e2:	801a      	strh	r2, [r3, #0]
    while (Num_Bit > 0) {
 80052e4:	4b18      	ldr	r3, [pc, #96]	; (8005348 <Paint_DrawNum+0x1bc>)
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2200      	movs	r2, #0
 80052ea:	5e9b      	ldrsh	r3, [r3, r2]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dcd1      	bgt.n	8005294 <Paint_DrawNum+0x108>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background); //edited by Bart
 80052f0:	687c      	ldr	r4, [r7, #4]
 80052f2:	2384      	movs	r3, #132	; 0x84
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <Paint_DrawNum+0x1b8>)
 80052fc:	2186      	movs	r1, #134	; 0x86
 80052fe:	0089      	lsls	r1, r1, #2
 8005300:	468c      	mov	ip, r1
 8005302:	44bc      	add	ip, r7
 8005304:	4463      	add	r3, ip
 8005306:	8819      	ldrh	r1, [r3, #0]
 8005308:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <Paint_DrawNum+0x1b4>)
 800530a:	2086      	movs	r0, #134	; 0x86
 800530c:	0080      	lsls	r0, r0, #2
 800530e:	4684      	mov	ip, r0
 8005310:	44bc      	add	ip, r7
 8005312:	4463      	add	r3, ip
 8005314:	8818      	ldrh	r0, [r3, #0]
 8005316:	238b      	movs	r3, #139	; 0x8b
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	238a      	movs	r3, #138	; 0x8a
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	0023      	movs	r3, r4
 800532c:	f7ff feb0 	bl	8005090 <Paint_DrawString_EN>
}
 8005330:	46bd      	mov	sp, r7
 8005332:	2386      	movs	r3, #134	; 0x86
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	449d      	add	sp, r3
 8005338:	bdb0      	pop	{r4, r5, r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	fffffde0 	.word	0xfffffde0
 8005340:	fffffdf6 	.word	0xfffffdf6
 8005344:	fffffdf4 	.word	0xfffffdf4
 8005348:	00000216 	.word	0x00000216
 800534c:	fffffef8 	.word	0xfffffef8
 8005350:	fffffdf8 	.word	0xfffffdf8
 8005354:	200004a4 	.word	0x200004a4
 8005358:	08013a18 	.word	0x08013a18

0800535c <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	00d9      	lsls	r1, r3, #3
 8005364:	23a0      	movs	r3, #160	; 0xa0
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	2201      	movs	r2, #1
 800536a:	0018      	movs	r0, r3
 800536c:	f001 fea1 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8005370:	20c8      	movs	r0, #200	; 0xc8
 8005372:	f000 fb03 	bl	800597c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	00d9      	lsls	r1, r3, #3
 800537a:	23a0      	movs	r3, #160	; 0xa0
 800537c:	05db      	lsls	r3, r3, #23
 800537e:	2200      	movs	r2, #0
 8005380:	0018      	movs	r0, r3
 8005382:	f001 fe96 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8005386:	2002      	movs	r0, #2
 8005388:	f000 faf8 	bl	800597c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	00d9      	lsls	r1, r3, #3
 8005390:	23a0      	movs	r3, #160	; 0xa0
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	2201      	movs	r2, #1
 8005396:	0018      	movs	r0, r3
 8005398:	f001 fe8b 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800539c:	20c8      	movs	r0, #200	; 0xc8
 800539e:	f000 faed 	bl	800597c <HAL_Delay>
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	0002      	movs	r2, r0
 80053b0:	1dfb      	adds	r3, r7, #7
 80053b2:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	0099      	lsls	r1, r3, #2
 80053b8:	23a0      	movs	r3, #160	; 0xa0
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	2200      	movs	r2, #0
 80053be:	0018      	movs	r0, r3
 80053c0:	f001 fe77 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	0059      	lsls	r1, r3, #1
 80053c8:	23a0      	movs	r3, #160	; 0xa0
 80053ca:	05db      	lsls	r3, r3, #23
 80053cc:	2200      	movs	r2, #0
 80053ce:	0018      	movs	r0, r3
 80053d0:	f001 fe6f 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fe fdaf 	bl	8003f3c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	0059      	lsls	r1, r3, #1
 80053e2:	23a0      	movs	r3, #160	; 0xa0
 80053e4:	05db      	lsls	r3, r3, #23
 80053e6:	2201      	movs	r2, #1
 80053e8:	0018      	movs	r0, r3
 80053ea:	f001 fe62 	bl	80070b2 <HAL_GPIO_WritePin>
}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b002      	add	sp, #8
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	0002      	movs	r2, r0
 80053fe:	1dfb      	adds	r3, r7, #7
 8005400:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	0099      	lsls	r1, r3, #2
 8005406:	23a0      	movs	r3, #160	; 0xa0
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	2201      	movs	r2, #1
 800540c:	0018      	movs	r0, r3
 800540e:	f001 fe50 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	0059      	lsls	r1, r3, #1
 8005416:	23a0      	movs	r3, #160	; 0xa0
 8005418:	05db      	lsls	r3, r3, #23
 800541a:	2200      	movs	r2, #0
 800541c:	0018      	movs	r0, r3
 800541e:	f001 fe48 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005422:	1dfb      	adds	r3, r7, #7
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	0018      	movs	r0, r3
 8005428:	f7fe fd88 	bl	8003f3c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	0059      	lsls	r1, r3, #1
 8005430:	23a0      	movs	r3, #160	; 0xa0
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	2201      	movs	r2, #1
 8005436:	0018      	movs	r0, r3
 8005438:	f001 fe3b 	bl	80070b2 <HAL_GPIO_WritePin>
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <EPD_1IN54_V2_ReadBusy+0x38>)
 800544a:	0018      	movs	r0, r3
 800544c:	f00b fe52 	bl	80110f4 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8005450:	e002      	b.n	8005458 <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8005452:	2064      	movs	r0, #100	; 0x64
 8005454:	f000 fa92 	bl	800597c <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	23a0      	movs	r3, #160	; 0xa0
 800545e:	05db      	lsls	r3, r3, #23
 8005460:	0011      	movs	r1, r2
 8005462:	0018      	movs	r0, r3
 8005464:	f001 fe08 	bl	8007078 <HAL_GPIO_ReadPin>
 8005468:	0003      	movs	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d0f1      	beq.n	8005452 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8005470:	0018      	movs	r0, r3
 8005472:	f00b fe3f 	bl	80110f4 <puts>
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08013a60 	.word	0x08013a60
 8005480:	08013a78 	.word	0x08013a78

08005484 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8005488:	2022      	movs	r0, #34	; 0x22
 800548a:	f7ff ff8d 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 800548e:	20f7      	movs	r0, #247	; 0xf7
 8005490:	f7ff ffb1 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8005494:	2020      	movs	r0, #32
 8005496:	f7ff ff87 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800549a:	f7ff ffd3 	bl	8005444 <EPD_1IN54_V2_ReadBusy>
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 80054a8:	2022      	movs	r0, #34	; 0x22
 80054aa:	f7ff ff7d 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 80054ae:	20ff      	movs	r0, #255	; 0xff
 80054b0:	f7ff ffa1 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80054b4:	2020      	movs	r0, #32
 80054b6:	f7ff ff77 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80054ba:	f7ff ffc3 	bl	8005444 <EPD_1IN54_V2_ReadBusy>
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 80054c8:	f7ff ff48 	bl	800535c <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 80054cc:	f7ff ffba 	bl	8005444 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 80054d0:	2012      	movs	r0, #18
 80054d2:	f7ff ff69 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80054d6:	f7ff ffb5 	bl	8005444 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 80054da:	2001      	movs	r0, #1
 80054dc:	f7ff ff64 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 80054e0:	20c7      	movs	r0, #199	; 0xc7
 80054e2:	f7ff ff88 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7ff ff85 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 80054ec:	2001      	movs	r0, #1
 80054ee:	f7ff ff82 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 80054f2:	2011      	movs	r0, #17
 80054f4:	f7ff ff58 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f7ff ff7c 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 80054fe:	2044      	movs	r0, #68	; 0x44
 8005500:	f7ff ff52 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8005504:	2000      	movs	r0, #0
 8005506:	f7ff ff76 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 800550a:	2018      	movs	r0, #24
 800550c:	f7ff ff73 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8005510:	2045      	movs	r0, #69	; 0x45
 8005512:	f7ff ff49 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 8005516:	20c7      	movs	r0, #199	; 0xc7
 8005518:	f7ff ff6d 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800551c:	2000      	movs	r0, #0
 800551e:	f7ff ff6a 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8005522:	2000      	movs	r0, #0
 8005524:	f7ff ff67 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8005528:	2000      	movs	r0, #0
 800552a:	f7ff ff64 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 800552e:	203c      	movs	r0, #60	; 0x3c
 8005530:	f7ff ff3a 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8005534:	2001      	movs	r0, #1
 8005536:	f7ff ff5e 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800553a:	2018      	movs	r0, #24
 800553c:	f7ff ff34 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8005540:	2080      	movs	r0, #128	; 0x80
 8005542:	f7ff ff58 	bl	80053f6 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 8005546:	2022      	movs	r0, #34	; 0x22
 8005548:	f7ff ff2e 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800554c:	20b1      	movs	r0, #177	; 0xb1
 800554e:	f7ff ff52 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8005552:	2020      	movs	r0, #32
 8005554:	f7ff ff28 	bl	80053a8 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8005558:	204e      	movs	r0, #78	; 0x4e
 800555a:	f7ff ff25 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800555e:	2000      	movs	r0, #0
 8005560:	f7ff ff49 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8005564:	204f      	movs	r0, #79	; 0x4f
 8005566:	f7ff ff1f 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800556a:	20c7      	movs	r0, #199	; 0xc7
 800556c:	f7ff ff43 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8005570:	2000      	movs	r0, #0
 8005572:	f7ff ff40 	bl	80053f6 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 8005576:	f7ff ff65 	bl	8005444 <EPD_1IN54_V2_ReadBusy>
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8005586:	1cbb      	adds	r3, r7, #2
 8005588:	2219      	movs	r2, #25
 800558a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800558c:	003b      	movs	r3, r7
 800558e:	22c8      	movs	r2, #200	; 0xc8
 8005590:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 8005592:	2024      	movs	r0, #36	; 0x24
 8005594:	f7ff ff08 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005598:	1dbb      	adds	r3, r7, #6
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e016      	b.n	80055ce <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e007      	b.n	80055b8 <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 80055a8:	20ff      	movs	r0, #255	; 0xff
 80055aa:	f7ff ff24 	bl	80053f6 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	881a      	ldrh	r2, [r3, #0]
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	3201      	adds	r2, #1
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	1d3a      	adds	r2, r7, #4
 80055ba:	1cbb      	adds	r3, r7, #2
 80055bc:	8812      	ldrh	r2, [r2, #0]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3f1      	bcc.n	80055a8 <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 80055c4:	1dbb      	adds	r3, r7, #6
 80055c6:	881a      	ldrh	r2, [r3, #0]
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	3201      	adds	r2, #1
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	1dba      	adds	r2, r7, #6
 80055d0:	003b      	movs	r3, r7
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3e2      	bcc.n	80055a0 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80055da:	f7ff ff53 	bl	8005484 <EPD_1IN54_V2_TurnOnDisplay>
}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b002      	add	sp, #8
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80055e6:	b590      	push	{r4, r7, lr}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80055ee:	2312      	movs	r3, #18
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	2219      	movs	r2, #25
 80055f4:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80055f6:	2310      	movs	r3, #16
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	22c8      	movs	r2, #200	; 0xc8
 80055fc:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8005602:	2024      	movs	r0, #36	; 0x24
 8005604:	f7ff fed0 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8005608:	2316      	movs	r3, #22
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	2200      	movs	r2, #0
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e02a      	b.n	8005668 <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8005612:	2314      	movs	r3, #20
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	2200      	movs	r2, #0
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e017      	b.n	800564c <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 800561c:	2414      	movs	r4, #20
 800561e:	193b      	adds	r3, r7, r4
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	2316      	movs	r3, #22
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	2112      	movs	r1, #18
 800562a:	1879      	adds	r1, r7, r1
 800562c:	8809      	ldrh	r1, [r1, #0]
 800562e:	434b      	muls	r3, r1
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff feda 	bl	80053f6 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005642:	193b      	adds	r3, r7, r4
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	193b      	adds	r3, r7, r4
 8005648:	3201      	adds	r2, #1
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	2314      	movs	r3, #20
 800564e:	18fa      	adds	r2, r7, r3
 8005650:	2312      	movs	r3, #18
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	8812      	ldrh	r2, [r2, #0]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d3df      	bcc.n	800561c <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 800565c:	2116      	movs	r1, #22
 800565e:	187b      	adds	r3, r7, r1
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	187b      	adds	r3, r7, r1
 8005664:	3201      	adds	r2, #1
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	2316      	movs	r3, #22
 800566a:	18fa      	adds	r2, r7, r3
 800566c:	2310      	movs	r3, #16
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	8812      	ldrh	r2, [r2, #0]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d3cc      	bcc.n	8005612 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8005678:	f7ff ff04 	bl	8005484 <EPD_1IN54_V2_TurnOnDisplay>
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b007      	add	sp, #28
 8005682:	bd90      	pop	{r4, r7, pc}

08005684 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800568c:	230e      	movs	r3, #14
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2219      	movs	r2, #25
 8005692:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8005694:	230c      	movs	r3, #12
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	22c8      	movs	r2, #200	; 0xc8
 800569a:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 80056a0:	2024      	movs	r0, #36	; 0x24
 80056a2:	f7ff fe81 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80056a6:	2316      	movs	r3, #22
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2200      	movs	r2, #0
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e02a      	b.n	8005706 <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80056b0:	2314      	movs	r3, #20
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2200      	movs	r2, #0
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e017      	b.n	80056ea <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 80056ba:	2414      	movs	r4, #20
 80056bc:	193b      	adds	r3, r7, r4
 80056be:	881a      	ldrh	r2, [r3, #0]
 80056c0:	2316      	movs	r3, #22
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	210e      	movs	r1, #14
 80056c8:	1879      	adds	r1, r7, r1
 80056ca:	8809      	ldrh	r1, [r1, #0]
 80056cc:	434b      	muls	r3, r1
 80056ce:	18d3      	adds	r3, r2, r3
 80056d0:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	18d3      	adds	r3, r2, r3
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	0018      	movs	r0, r3
 80056dc:	f7ff fe8b 	bl	80053f6 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	193b      	adds	r3, r7, r4
 80056e6:	3201      	adds	r2, #1
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	2314      	movs	r3, #20
 80056ec:	18fa      	adds	r2, r7, r3
 80056ee:	230e      	movs	r3, #14
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	8812      	ldrh	r2, [r2, #0]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3df      	bcc.n	80056ba <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 80056fa:	2116      	movs	r1, #22
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	881a      	ldrh	r2, [r3, #0]
 8005700:	187b      	adds	r3, r7, r1
 8005702:	3201      	adds	r2, #1
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	2316      	movs	r3, #22
 8005708:	18fa      	adds	r2, r7, r3
 800570a:	230c      	movs	r3, #12
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	8812      	ldrh	r2, [r2, #0]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d3cc      	bcc.n	80056b0 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 8005716:	2026      	movs	r0, #38	; 0x26
 8005718:	f7ff fe46 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800571c:	2312      	movs	r3, #18
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2200      	movs	r2, #0
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e02a      	b.n	800577c <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 8005726:	2310      	movs	r3, #16
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e017      	b.n	8005760 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8005730:	2410      	movs	r4, #16
 8005732:	193b      	adds	r3, r7, r4
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	2312      	movs	r3, #18
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	210e      	movs	r1, #14
 800573e:	1879      	adds	r1, r7, r1
 8005740:	8809      	ldrh	r1, [r1, #0]
 8005742:	434b      	muls	r3, r1
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	18d3      	adds	r3, r2, r3
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	0018      	movs	r0, r3
 8005752:	f7ff fe50 	bl	80053f6 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005756:	193b      	adds	r3, r7, r4
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	193b      	adds	r3, r7, r4
 800575c:	3201      	adds	r2, #1
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	2310      	movs	r3, #16
 8005762:	18fa      	adds	r2, r7, r3
 8005764:	230e      	movs	r3, #14
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	8812      	ldrh	r2, [r2, #0]
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d3df      	bcc.n	8005730 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8005770:	2112      	movs	r1, #18
 8005772:	187b      	adds	r3, r7, r1
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	187b      	adds	r3, r7, r1
 8005778:	3201      	adds	r2, #1
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	2312      	movs	r3, #18
 800577e:	18fa      	adds	r2, r7, r3
 8005780:	230c      	movs	r3, #12
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	8812      	ldrh	r2, [r2, #0]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3cc      	bcc.n	8005726 <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800578c:	f7ff fe8a 	bl	80054a4 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b007      	add	sp, #28
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80057a0:	2312      	movs	r3, #18
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	2219      	movs	r2, #25
 80057a6:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80057a8:	2310      	movs	r3, #16
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	22c8      	movs	r2, #200	; 0xc8
 80057ae:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	00d9      	lsls	r1, r3, #3
 80057b4:	23a0      	movs	r3, #160	; 0xa0
 80057b6:	05db      	lsls	r3, r3, #23
 80057b8:	2200      	movs	r2, #0
 80057ba:	0018      	movs	r0, r3
 80057bc:	f001 fc79 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 80057c0:	200a      	movs	r0, #10
 80057c2:	f000 f8db 	bl	800597c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	00d9      	lsls	r1, r3, #3
 80057ca:	23a0      	movs	r3, #160	; 0xa0
 80057cc:	05db      	lsls	r3, r3, #23
 80057ce:	2201      	movs	r2, #1
 80057d0:	0018      	movs	r0, r3
 80057d2:	f001 fc6e 	bl	80070b2 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80057d6:	200a      	movs	r0, #10
 80057d8:	f000 f8d0 	bl	800597c <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80057dc:	203c      	movs	r0, #60	; 0x3c
 80057de:	f7ff fde3 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80057e2:	2080      	movs	r0, #128	; 0x80
 80057e4:	f7ff fe07 	bl	80053f6 <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80057ec:	2024      	movs	r0, #36	; 0x24
 80057ee:	f7ff fddb 	bl	80053a8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80057f2:	2316      	movs	r3, #22
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2200      	movs	r2, #0
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e02a      	b.n	8005852 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 80057fc:	2314      	movs	r3, #20
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e017      	b.n	8005836 <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 8005806:	2414      	movs	r4, #20
 8005808:	193b      	adds	r3, r7, r4
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	2316      	movs	r3, #22
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	2112      	movs	r1, #18
 8005814:	1879      	adds	r1, r7, r1
 8005816:	8809      	ldrh	r1, [r1, #0]
 8005818:	434b      	muls	r3, r1
 800581a:	18d3      	adds	r3, r2, r3
 800581c:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	18d3      	adds	r3, r2, r3
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fde5 	bl	80053f6 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800582c:	193b      	adds	r3, r7, r4
 800582e:	881a      	ldrh	r2, [r3, #0]
 8005830:	193b      	adds	r3, r7, r4
 8005832:	3201      	adds	r2, #1
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	2314      	movs	r3, #20
 8005838:	18fa      	adds	r2, r7, r3
 800583a:	2312      	movs	r3, #18
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	8812      	ldrh	r2, [r2, #0]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3df      	bcc.n	8005806 <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 8005846:	2116      	movs	r1, #22
 8005848:	187b      	adds	r3, r7, r1
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	187b      	adds	r3, r7, r1
 800584e:	3201      	adds	r2, #1
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	2316      	movs	r3, #22
 8005854:	18fa      	adds	r2, r7, r3
 8005856:	2310      	movs	r3, #16
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3cc      	bcc.n	80057fc <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8005862:	f7ff fe1f 	bl	80054a4 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	46bd      	mov	sp, r7
 800586a:	b007      	add	sp, #28
 800586c:	bd90      	pop	{r4, r7, pc}
	...

08005870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_Init+0x3c>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_Init+0x3c>)
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	0049      	lsls	r1, r1, #1
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800588a:	2000      	movs	r0, #0
 800588c:	f000 f810 	bl	80058b0 <HAL_InitTick>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d003      	beq.n	800589c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005894:	1dfb      	adds	r3, r7, #7
 8005896:	2201      	movs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e001      	b.n	80058a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800589c:	f00a ff80 	bl	80107a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	781b      	ldrb	r3, [r3, #0]
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40022000 	.word	0x40022000

080058b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058b8:	230f      	movs	r3, #15
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_InitTick+0x88>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02b      	beq.n	8005920 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_InitTick+0x8c>)
 80058ca:	681c      	ldr	r4, [r3, #0]
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <HAL_InitTick+0x88>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	0019      	movs	r1, r3
 80058d2:	23fa      	movs	r3, #250	; 0xfa
 80058d4:	0098      	lsls	r0, r3, #2
 80058d6:	f7fa fc1d 	bl	8000114 <__udivsi3>
 80058da:	0003      	movs	r3, r0
 80058dc:	0019      	movs	r1, r3
 80058de:	0020      	movs	r0, r4
 80058e0:	f7fa fc18 	bl	8000114 <__udivsi3>
 80058e4:	0003      	movs	r3, r0
 80058e6:	0018      	movs	r0, r3
 80058e8:	f001 f803 	bl	80068f2 <HAL_SYSTICK_Config>
 80058ec:	1e03      	subs	r3, r0, #0
 80058ee:	d112      	bne.n	8005916 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d80a      	bhi.n	800590c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	2301      	movs	r3, #1
 80058fa:	425b      	negs	r3, r3
 80058fc:	2200      	movs	r2, #0
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 ffd2 	bl	80068a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <HAL_InitTick+0x90>)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e00d      	b.n	8005928 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800590c:	230f      	movs	r3, #15
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e008      	b.n	8005928 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005916:	230f      	movs	r3, #15
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e003      	b.n	8005928 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005920:	230f      	movs	r3, #15
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005928:	230f      	movs	r3, #15
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	781b      	ldrb	r3, [r3, #0]
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b005      	add	sp, #20
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	20000024 	.word	0x20000024
 800593c:	20000080 	.word	0x20000080
 8005940:	20000020 	.word	0x20000020

08005944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <HAL_IncTick+0x1c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	001a      	movs	r2, r3
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_IncTick+0x20>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	18d2      	adds	r2, r2, r3
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <HAL_IncTick+0x20>)
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	20000024 	.word	0x20000024
 8005964:	200004bc 	.word	0x200004bc

08005968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  return uwTick;
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <HAL_GetTick+0x10>)
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	200004bc 	.word	0x200004bc

0800597c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005984:	f7ff fff0 	bl	8005968 <HAL_GetTick>
 8005988:	0003      	movs	r3, r0
 800598a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	d005      	beq.n	80059a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_Delay+0x44>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	001a      	movs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	f7ff ffe0 	bl	8005968 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d8f7      	bhi.n	80059a4 <HAL_Delay+0x28>
  {
  }
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	20000024 	.word	0x20000024

080059c4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <HAL_SuspendTick+0x18>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <HAL_SuspendTick+0x18>)
 80059ce:	2102      	movs	r1, #2
 80059d0:	438a      	bics	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	e000e010 	.word	0xe000e010

080059e0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <HAL_ResumeTick+0x18>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_ResumeTick+0x18>)
 80059ea:	2102      	movs	r1, #2
 80059ec:	430a      	orrs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	e000e010 	.word	0xe000e010

080059fc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	40010000 	.word	0x40010000
 8005a24:	fffff9ff 	.word	0xfffff9ff

08005a28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005a38:	401a      	ands	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b002      	add	sp, #8
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	fe3fffff 	.word	0xfe3fffff

08005a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	23e0      	movs	r3, #224	; 0xe0
 8005a5e:	045b      	lsls	r3, r3, #17
 8005a60:	4013      	ands	r3, r2
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b002      	add	sp, #8
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	400a      	ands	r2, r1
 8005a80:	2107      	movs	r1, #7
 8005a82:	4091      	lsls	r1, r2
 8005a84:	000a      	movs	r2, r1
 8005a86:	43d2      	mvns	r2, r2
 8005a88:	401a      	ands	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	400b      	ands	r3, r1
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4099      	lsls	r1, r3
 8005a94:	000b      	movs	r3, r1
 8005a96:	431a      	orrs	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	23c0      	movs	r3, #192	; 0xc0
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d101      	bne.n	8005abc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	211f      	movs	r1, #31
 8005ada:	400a      	ands	r2, r1
 8005adc:	210f      	movs	r1, #15
 8005ade:	4091      	lsls	r1, r2
 8005ae0:	000a      	movs	r2, r1
 8005ae2:	43d2      	mvns	r2, r2
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0e9b      	lsrs	r3, r3, #26
 8005aea:	210f      	movs	r1, #15
 8005aec:	4019      	ands	r1, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	201f      	movs	r0, #31
 8005af2:	4003      	ands	r3, r0
 8005af4:	4099      	lsls	r1, r3
 8005af6:	000b      	movs	r3, r1
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	035b      	lsls	r3, r3, #13
 8005b18:	0b5b      	lsrs	r3, r3, #13
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	0352      	lsls	r2, r2, #13
 8005b3a:	0b52      	lsrs	r2, r2, #13
 8005b3c:	43d2      	mvns	r2, r2
 8005b3e:	401a      	ands	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b44:	46c0      	nop			; (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	0212      	lsls	r2, r2, #8
 8005b60:	43d2      	mvns	r2, r2
 8005b62:	401a      	ands	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	4904      	ldr	r1, [pc, #16]	; (8005b80 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005b6e:	400b      	ands	r3, r1
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b004      	add	sp, #16
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	07ffff00 	.word	0x07ffff00

08005b84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <LL_ADC_EnableInternalRegulator+0x24>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	0552      	lsls	r2, r2, #21
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b002      	add	sp, #8
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	6fffffe8 	.word	0x6fffffe8

08005bac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	055b      	lsls	r3, r3, #21
 8005bbc:	401a      	ands	r2, r3
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	055b      	lsls	r3, r3, #21
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d101      	bne.n	8005bca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <LL_ADC_Enable+0x20>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	2201      	movs	r2, #1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	7fffffe8 	.word	0x7fffffe8

08005bf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <LL_ADC_Disable+0x20>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	2202      	movs	r2, #2
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	7fffffe8 	.word	0x7fffffe8

08005c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <LL_ADC_IsEnabled+0x18>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <LL_ADC_IsEnabled+0x1a>
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <LL_ADC_REG_StartConversion+0x20>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2204      	movs	r2, #4
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	7fffffe8 	.word	0x7fffffe8

08005c64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2204      	movs	r2, #4
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d101      	bne.n	8005c7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b002      	add	sp, #8
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c90:	231f      	movs	r3, #31
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e1ab      	b.n	8006006 <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f00a fd99 	bl	80107f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2254      	movs	r2, #84	; 0x54
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7ff ff6b 	bl	8005bac <LL_ADC_IsInternalRegulatorEnabled>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d114      	bne.n	8005d04 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7ff ff50 	bl	8005b84 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005ce4:	4bca      	ldr	r3, [pc, #808]	; (8006010 <HAL_ADC_Init+0x388>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	49ca      	ldr	r1, [pc, #808]	; (8006014 <HAL_ADC_Init+0x38c>)
 8005cea:	0018      	movs	r0, r3
 8005cec:	f7fa fa12 	bl	8000114 <__udivsi3>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cf6:	e002      	b.n	8005cfe <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f9      	bne.n	8005cf8 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff ff4f 	bl	8005bac <LL_ADC_IsInternalRegulatorEnabled>
 8005d0e:	1e03      	subs	r3, r0, #0
 8005d10:	d10f      	bne.n	8005d32 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	2210      	movs	r2, #16
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	2201      	movs	r2, #1
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d2a:	231f      	movs	r3, #31
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7ff ff94 	bl	8005c64 <LL_ADC_REG_IsConversionOngoing>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	2210      	movs	r2, #16
 8005d46:	4013      	ands	r3, r2
 8005d48:	d000      	beq.n	8005d4c <HAL_ADC_Init+0xc4>
 8005d4a:	e14f      	b.n	8005fec <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d000      	beq.n	8005d54 <HAL_ADC_Init+0xcc>
 8005d52:	e14b      	b.n	8005fec <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	4aaf      	ldr	r2, [pc, #700]	; (8006018 <HAL_ADC_Init+0x390>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7ff ff57 	bl	8005c1c <LL_ADC_IsEnabled>
 8005d6e:	1e03      	subs	r3, r0, #0
 8005d70:	d151      	bne.n	8005e16 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2218      	movs	r2, #24
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	0f9b      	lsrs	r3, r3, #30
 8005d90:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005d96:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8005d9c:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8005da2:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8005da8:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	223c      	movs	r2, #60	; 0x3c
 8005db4:	5c9b      	ldrb	r3, [r3, r2]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d103      	bne.n	8005dc2 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4a94      	ldr	r2, [pc, #592]	; (800601c <HAL_ADC_Init+0x394>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	23c0      	movs	r3, #192	; 0xc0
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d018      	beq.n	8005e16 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d012      	beq.n	8005e16 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	061b      	lsls	r3, r3, #24
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d00c      	beq.n	8005e16 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005dfc:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_ADC_Init+0x398>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a88      	ldr	r2, [pc, #544]	; (8006024 <HAL_ADC_Init+0x39c>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	23f0      	movs	r3, #240	; 0xf0
 8005e0c:	039b      	lsls	r3, r3, #14
 8005e0e:	401a      	ands	r2, r3
 8005e10:	4b83      	ldr	r3, [pc, #524]	; (8006020 <HAL_ADC_Init+0x398>)
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7e1b      	ldrb	r3, [r3, #24]
 8005e1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7e5b      	ldrb	r3, [r3, #25]
 8005e20:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e22:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7e9b      	ldrb	r3, [r3, #26]
 8005e28:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_ADC_Init+0x1b2>
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	015b      	lsls	r3, r3, #5
 8005e38:	e000      	b.n	8005e3c <HAL_ADC_Init+0x1b4>
 8005e3a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e42:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da04      	bge.n	8005e56 <HAL_ADC_Init+0x1ce>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	e001      	b.n	8005e5a <HAL_ADC_Init+0x1d2>
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8005e5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	212c      	movs	r1, #44	; 0x2c
 8005e60:	5c5b      	ldrb	r3, [r3, r1]
 8005e62:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d115      	bne.n	8005ea2 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7e9b      	ldrb	r3, [r3, #26]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d105      	bne.n	8005e8a <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	0252      	lsls	r2, r2, #9
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e00b      	b.n	8005ea2 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	2220      	movs	r2, #32
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eae:	23e0      	movs	r3, #224	; 0xe0
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4a58      	ldr	r2, [pc, #352]	; (8006028 <HAL_ADC_Init+0x3a0>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	4a53      	ldr	r2, [pc, #332]	; (800602c <HAL_ADC_Init+0x3a4>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	0019      	movs	r1, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f7ff fdb7 	bl	8005a6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	494a      	ldr	r1, [pc, #296]	; (8006030 <HAL_ADC_Init+0x3a8>)
 8005f06:	001a      	movs	r2, r3
 8005f08:	f7ff fdaf 	bl	8005a6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2110      	movs	r1, #16
 8005f20:	4249      	negs	r1, r1
 8005f22:	430a      	orrs	r2, r1
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
 8005f26:	e03a      	b.n	8005f9e <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	039b      	lsls	r3, r3, #14
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d134      	bne.n	8005f9e <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	e00c      	b.n	8005f54 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	40da      	lsrs	r2, r3
 8005f44:	0013      	movs	r3, r2
 8005f46:	220f      	movs	r2, #15
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	d006      	beq.n	8005f5c <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3301      	adds	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d9ef      	bls.n	8005f3a <HAL_ADC_Init+0x2b2>
 8005f5a:	e000      	b.n	8005f5e <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8005f5c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d109      	bne.n	8005f78 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2110      	movs	r1, #16
 8005f70:	4249      	negs	r1, r1
 8005f72:	430a      	orrs	r2, r1
 8005f74:	629a      	str	r2, [r3, #40]	; 0x28
 8005f76:	e012      	b.n	8005f9e <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	221c      	movs	r2, #28
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	4252      	negs	r2, r2
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	0011      	movs	r1, r2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <HAL_ADC_Init+0x3ac>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d10b      	bne.n	8005fc6 <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb8:	2203      	movs	r2, #3
 8005fba:	4393      	bics	r3, r2
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005fc4:	e01c      	b.n	8006000 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	2212      	movs	r2, #18
 8005fcc:	4393      	bics	r3, r2
 8005fce:	2210      	movs	r2, #16
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	2201      	movs	r2, #1
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005fe2:	231f      	movs	r3, #31
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005fea:	e009      	b.n	8006000 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ff8:	231f      	movs	r3, #31
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006000:	231f      	movs	r3, #31
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	781b      	ldrb	r3, [r3, #0]
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b008      	add	sp, #32
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20000080 	.word	0x20000080
 8006014:	00030d40 	.word	0x00030d40
 8006018:	fffffefd 	.word	0xfffffefd
 800601c:	1ffffc02 	.word	0x1ffffc02
 8006020:	40012708 	.word	0x40012708
 8006024:	ffc3ffff 	.word	0xffc3ffff
 8006028:	fffe0219 	.word	0xfffe0219
 800602c:	dffffc02 	.word	0xdffffc02
 8006030:	07ffff04 	.word	0x07ffff04
 8006034:	833fffe7 	.word	0x833fffe7

08006038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006038:	b5b0      	push	{r4, r5, r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0018      	movs	r0, r3
 800604a:	f7ff fe0b 	bl	8005c64 <LL_ADC_REG_IsConversionOngoing>
 800604e:	1e03      	subs	r3, r0, #0
 8006050:	d16c      	bne.n	800612c <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2254      	movs	r2, #84	; 0x54
 8006056:	5c9b      	ldrb	r3, [r3, r2]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_ADC_Start_DMA+0x28>
 800605c:	2302      	movs	r3, #2
 800605e:	e06c      	b.n	800613a <HAL_ADC_Start_DMA+0x102>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2254      	movs	r2, #84	; 0x54
 8006064:	2101      	movs	r1, #1
 8006066:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	4013      	ands	r3, r2
 8006072:	d113      	bne.n	800609c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	0018      	movs	r0, r3
 800607a:	f7ff fdcf 	bl	8005c1c <LL_ADC_IsEnabled>
 800607e:	1e03      	subs	r3, r0, #0
 8006080:	d004      	beq.n	800608c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff fdb6 	bl	8005bf8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2101      	movs	r1, #1
 8006098:	430a      	orrs	r2, r1
 800609a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800609c:	2517      	movs	r5, #23
 800609e:	197c      	adds	r4, r7, r5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	0018      	movs	r0, r3
 80060a4:	f000 fa48 	bl	8006538 <ADC_Enable>
 80060a8:	0003      	movs	r3, r0
 80060aa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80060ac:	002c      	movs	r4, r5
 80060ae:	193b      	adds	r3, r7, r4
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d13e      	bne.n	8006134 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	4a22      	ldr	r2, [pc, #136]	; (8006144 <HAL_ADC_Start_DMA+0x10c>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	0052      	lsls	r2, r2, #1
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <HAL_ADC_Start_DMA+0x110>)
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_ADC_Start_DMA+0x114>)
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_ADC_Start_DMA+0x118>)
 80060e4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	221c      	movs	r2, #28
 80060ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2254      	movs	r2, #84	; 0x54
 80060f2:	2100      	movs	r1, #0
 80060f4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2110      	movs	r1, #16
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3340      	adds	r3, #64	; 0x40
 8006110:	0019      	movs	r1, r3
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	193c      	adds	r4, r7, r4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f000 fc82 	bl	8006a20 <HAL_DMA_Start_IT>
 800611c:	0003      	movs	r3, r0
 800611e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0018      	movs	r0, r3
 8006126:	f7ff fd8b 	bl	8005c40 <LL_ADC_REG_StartConversion>
 800612a:	e003      	b.n	8006134 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800612c:	2317      	movs	r3, #23
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	2202      	movs	r2, #2
 8006132:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006134:	2317      	movs	r3, #23
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	781b      	ldrb	r3, [r3, #0]
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b006      	add	sp, #24
 8006140:	bdb0      	pop	{r4, r5, r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	fffff0fe 	.word	0xfffff0fe
 8006148:	08006635 	.word	0x08006635
 800614c:	080066fd 	.word	0x080066fd
 8006150:	0800671b 	.word	0x0800671b

08006154 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	46bd      	mov	sp, r7
 8006160:	b002      	add	sp, #8
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800616c:	46c0      	nop			; (mov r8, r8)
 800616e:	46bd      	mov	sp, r7
 8006170:	b002      	add	sp, #8
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800618e:	2317      	movs	r3, #23
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2254      	movs	r2, #84	; 0x54
 800619e:	5c9b      	ldrb	r3, [r3, r2]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x24>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e1c2      	b.n	800652e <HAL_ADC_ConfigChannel+0x3aa>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2254      	movs	r2, #84	; 0x54
 80061ac:	2101      	movs	r1, #1
 80061ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff fd55 	bl	8005c64 <LL_ADC_REG_IsConversionOngoing>
 80061ba:	1e03      	subs	r3, r0, #0
 80061bc:	d000      	beq.n	80061c0 <HAL_ADC_ConfigChannel+0x3c>
 80061be:	e1a5      	b.n	800650c <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d100      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x46>
 80061c8:	e144      	b.n	8006454 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d004      	beq.n	80061e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80061da:	4ac2      	ldr	r2, [pc, #776]	; (80064e4 <HAL_ADC_ConfigChannel+0x360>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	0019      	movs	r1, r3
 80061ea:	0010      	movs	r0, r2
 80061ec:	f7ff fc8b 	bl	8005b06 <LL_ADC_REG_SetSequencerChAdd>
 80061f0:	e0c9      	b.n	8006386 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	211f      	movs	r1, #31
 80061fc:	400b      	ands	r3, r1
 80061fe:	210f      	movs	r1, #15
 8006200:	4099      	lsls	r1, r3
 8006202:	000b      	movs	r3, r1
 8006204:	43db      	mvns	r3, r3
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	035b      	lsls	r3, r3, #13
 8006210:	0b5b      	lsrs	r3, r3, #13
 8006212:	d105      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x9c>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	0e9b      	lsrs	r3, r3, #26
 800621a:	221f      	movs	r2, #31
 800621c:	4013      	ands	r3, r2
 800621e:	e098      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2201      	movs	r2, #1
 8006226:	4013      	ands	r3, r2
 8006228:	d000      	beq.n	800622c <HAL_ADC_ConfigChannel+0xa8>
 800622a:	e091      	b.n	8006350 <HAL_ADC_ConfigChannel+0x1cc>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2202      	movs	r2, #2
 8006232:	4013      	ands	r3, r2
 8006234:	d000      	beq.n	8006238 <HAL_ADC_ConfigChannel+0xb4>
 8006236:	e089      	b.n	800634c <HAL_ADC_ConfigChannel+0x1c8>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2204      	movs	r2, #4
 800623e:	4013      	ands	r3, r2
 8006240:	d000      	beq.n	8006244 <HAL_ADC_ConfigChannel+0xc0>
 8006242:	e081      	b.n	8006348 <HAL_ADC_ConfigChannel+0x1c4>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	4013      	ands	r3, r2
 800624c:	d000      	beq.n	8006250 <HAL_ADC_ConfigChannel+0xcc>
 800624e:	e079      	b.n	8006344 <HAL_ADC_ConfigChannel+0x1c0>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2210      	movs	r2, #16
 8006256:	4013      	ands	r3, r2
 8006258:	d000      	beq.n	800625c <HAL_ADC_ConfigChannel+0xd8>
 800625a:	e071      	b.n	8006340 <HAL_ADC_ConfigChannel+0x1bc>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2220      	movs	r2, #32
 8006262:	4013      	ands	r3, r2
 8006264:	d000      	beq.n	8006268 <HAL_ADC_ConfigChannel+0xe4>
 8006266:	e069      	b.n	800633c <HAL_ADC_ConfigChannel+0x1b8>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2240      	movs	r2, #64	; 0x40
 800626e:	4013      	ands	r3, r2
 8006270:	d000      	beq.n	8006274 <HAL_ADC_ConfigChannel+0xf0>
 8006272:	e061      	b.n	8006338 <HAL_ADC_ConfigChannel+0x1b4>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2280      	movs	r2, #128	; 0x80
 800627a:	4013      	ands	r3, r2
 800627c:	d000      	beq.n	8006280 <HAL_ADC_ConfigChannel+0xfc>
 800627e:	e059      	b.n	8006334 <HAL_ADC_ConfigChannel+0x1b0>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d151      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x1ac>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4013      	ands	r3, r2
 8006296:	d149      	bne.n	800632c <HAL_ADC_ConfigChannel+0x1a8>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4013      	ands	r3, r2
 80062a2:	d141      	bne.n	8006328 <HAL_ADC_ConfigChannel+0x1a4>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	4013      	ands	r3, r2
 80062ae:	d139      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x1a0>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	015b      	lsls	r3, r3, #5
 80062b8:	4013      	ands	r3, r2
 80062ba:	d131      	bne.n	8006320 <HAL_ADC_ConfigChannel+0x19c>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	019b      	lsls	r3, r3, #6
 80062c4:	4013      	ands	r3, r2
 80062c6:	d129      	bne.n	800631c <HAL_ADC_ConfigChannel+0x198>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4013      	ands	r3, r2
 80062d2:	d121      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x194>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	4013      	ands	r3, r2
 80062de:	d119      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x190>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	025b      	lsls	r3, r3, #9
 80062e8:	4013      	ands	r3, r2
 80062ea:	d111      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x18c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	4013      	ands	r3, r2
 80062f6:	d109      	bne.n	800630c <HAL_ADC_ConfigChannel+0x188>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	02db      	lsls	r3, r3, #11
 8006300:	4013      	ands	r3, r2
 8006302:	d001      	beq.n	8006308 <HAL_ADC_ConfigChannel+0x184>
 8006304:	2312      	movs	r3, #18
 8006306:	e024      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006308:	2300      	movs	r3, #0
 800630a:	e022      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 800630c:	2311      	movs	r3, #17
 800630e:	e020      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006310:	2310      	movs	r3, #16
 8006312:	e01e      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006314:	230f      	movs	r3, #15
 8006316:	e01c      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006318:	230e      	movs	r3, #14
 800631a:	e01a      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 800631c:	230d      	movs	r3, #13
 800631e:	e018      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006320:	230c      	movs	r3, #12
 8006322:	e016      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006324:	230b      	movs	r3, #11
 8006326:	e014      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006328:	230a      	movs	r3, #10
 800632a:	e012      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 800632c:	2309      	movs	r3, #9
 800632e:	e010      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006330:	2308      	movs	r3, #8
 8006332:	e00e      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006334:	2307      	movs	r3, #7
 8006336:	e00c      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006338:	2306      	movs	r3, #6
 800633a:	e00a      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 800633c:	2305      	movs	r3, #5
 800633e:	e008      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006340:	2304      	movs	r3, #4
 8006342:	e006      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006344:	2303      	movs	r3, #3
 8006346:	e004      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006348:	2302      	movs	r3, #2
 800634a:	e002      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1ce>
 8006350:	2300      	movs	r3, #0
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	6852      	ldr	r2, [r2, #4]
 8006356:	201f      	movs	r0, #31
 8006358:	4002      	ands	r2, r0
 800635a:	4093      	lsls	r3, r2
 800635c:	000a      	movs	r2, r1
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	429a      	cmp	r2, r3
 8006372:	d808      	bhi.n	8006386 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6859      	ldr	r1, [r3, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	001a      	movs	r2, r3
 8006382:	f7ff fba0 	bl	8005ac6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6819      	ldr	r1, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	001a      	movs	r2, r3
 8006394:	f7ff fbda 	bl	8005b4c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db00      	blt.n	80063a2 <HAL_ADC_ConfigChannel+0x21e>
 80063a0:	e0be      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7ff fb53 	bl	8005a50 <LL_ADC_GetCommonPathInternalCh>
 80063aa:	0003      	movs	r3, r0
 80063ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a4e      	ldr	r2, [pc, #312]	; (80064ec <HAL_ADC_ConfigChannel+0x368>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d123      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80063c0:	d11e      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	0412      	lsls	r2, r2, #16
 80063c8:	4313      	orrs	r3, r2
 80063ca:	4a47      	ldr	r2, [pc, #284]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 80063cc:	0019      	movs	r1, r3
 80063ce:	0010      	movs	r0, r2
 80063d0:	f7ff fb2a 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80063d4:	4b46      	ldr	r3, [pc, #280]	; (80064f0 <HAL_ADC_ConfigChannel+0x36c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4946      	ldr	r1, [pc, #280]	; (80064f4 <HAL_ADC_ConfigChannel+0x370>)
 80063da:	0018      	movs	r0, r3
 80063dc:	f7f9 fe9a 	bl	8000114 <__udivsi3>
 80063e0:	0003      	movs	r3, r0
 80063e2:	001a      	movs	r2, r3
 80063e4:	0013      	movs	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	189b      	adds	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063f0:	e002      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f9      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80063fe:	e08f      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a3c      	ldr	r2, [pc, #240]	; (80064f8 <HAL_ADC_ConfigChannel+0x374>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d10e      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x2a4>
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	045b      	lsls	r3, r3, #17
 8006410:	4013      	ands	r3, r2
 8006412:	d109      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2280      	movs	r2, #128	; 0x80
 8006418:	0452      	lsls	r2, r2, #17
 800641a:	4313      	orrs	r3, r2
 800641c:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 800641e:	0019      	movs	r1, r3
 8006420:	0010      	movs	r0, r2
 8006422:	f7ff fb01 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
 8006426:	e07b      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a33      	ldr	r2, [pc, #204]	; (80064fc <HAL_ADC_ConfigChannel+0x378>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d000      	beq.n	8006434 <HAL_ADC_ConfigChannel+0x2b0>
 8006432:	e075      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	03db      	lsls	r3, r3, #15
 800643a:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800643c:	d000      	beq.n	8006440 <HAL_ADC_ConfigChannel+0x2bc>
 800643e:	e06f      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	03d2      	lsls	r2, r2, #15
 8006446:	4313      	orrs	r3, r2
 8006448:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 800644a:	0019      	movs	r1, r3
 800644c:	0010      	movs	r0, r2
 800644e:	f7ff faeb 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
 8006452:	e065      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	429a      	cmp	r2, r3
 800645e:	d004      	beq.n	800646a <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006464:	4a1f      	ldr	r2, [pc, #124]	; (80064e4 <HAL_ADC_ConfigChannel+0x360>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d107      	bne.n	800647a <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	0019      	movs	r1, r3
 8006474:	0010      	movs	r0, r2
 8006476:	f7ff fb57 	bl	8005b28 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da4e      	bge.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006482:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 8006484:	0018      	movs	r0, r3
 8006486:	f7ff fae3 	bl	8005a50 <LL_ADC_GetCommonPathInternalCh>
 800648a:	0003      	movs	r3, r0
 800648c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a16      	ldr	r2, [pc, #88]	; (80064ec <HAL_ADC_ConfigChannel+0x368>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4a19      	ldr	r2, [pc, #100]	; (8006500 <HAL_ADC_ConfigChannel+0x37c>)
 800649c:	4013      	ands	r3, r2
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 80064a0:	0019      	movs	r1, r3
 80064a2:	0010      	movs	r0, r2
 80064a4:	f7ff fac0 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
 80064a8:	e03a      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <HAL_ADC_ConfigChannel+0x374>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <HAL_ADC_ConfigChannel+0x380>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	4a0b      	ldr	r2, [pc, #44]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 80064bc:	0019      	movs	r1, r3
 80064be:	0010      	movs	r0, r2
 80064c0:	f7ff fab2 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
 80064c4:	e02c      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <HAL_ADC_ConfigChannel+0x378>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d127      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4a0d      	ldr	r2, [pc, #52]	; (8006508 <HAL_ADC_ConfigChannel+0x384>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <HAL_ADC_ConfigChannel+0x364>)
 80064d8:	0019      	movs	r1, r3
 80064da:	0010      	movs	r0, r2
 80064dc:	f7ff faa4 	bl	8005a28 <LL_ADC_SetCommonPathInternalCh>
 80064e0:	e01e      	b.n	8006520 <HAL_ADC_ConfigChannel+0x39c>
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	80000004 	.word	0x80000004
 80064e8:	40012708 	.word	0x40012708
 80064ec:	b0001000 	.word	0xb0001000
 80064f0:	20000080 	.word	0x20000080
 80064f4:	00030d40 	.word	0x00030d40
 80064f8:	b8004000 	.word	0xb8004000
 80064fc:	b4002000 	.word	0xb4002000
 8006500:	ff7fffff 	.word	0xff7fffff
 8006504:	feffffff 	.word	0xfeffffff
 8006508:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006510:	2220      	movs	r2, #32
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006518:	2317      	movs	r3, #23
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2254      	movs	r2, #84	; 0x54
 8006524:	2100      	movs	r1, #0
 8006526:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8006528:	2317      	movs	r3, #23
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	781b      	ldrb	r3, [r3, #0]
}
 800652e:	0018      	movs	r0, r3
 8006530:	46bd      	mov	sp, r7
 8006532:	b006      	add	sp, #24
 8006534:	bd80      	pop	{r7, pc}
 8006536:	46c0      	nop			; (mov r8, r8)

08006538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006540:	2300      	movs	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff fb67 	bl	8005c1c <LL_ADC_IsEnabled>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d162      	bne.n	8006618 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a32      	ldr	r2, [pc, #200]	; (8006624 <ADC_Enable+0xec>)
 800655a:	4013      	ands	r3, r2
 800655c:	d00d      	beq.n	800657a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006562:	2210      	movs	r2, #16
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	2201      	movs	r2, #1
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e04f      	b.n	800661a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	0018      	movs	r0, r3
 8006580:	f7ff fb28 	bl	8005bd4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006584:	4b28      	ldr	r3, [pc, #160]	; (8006628 <ADC_Enable+0xf0>)
 8006586:	0018      	movs	r0, r3
 8006588:	f7ff fa62 	bl	8005a50 <LL_ADC_GetCommonPathInternalCh>
 800658c:	0002      	movs	r2, r0
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	4013      	ands	r3, r2
 8006594:	d00f      	beq.n	80065b6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8006596:	4b25      	ldr	r3, [pc, #148]	; (800662c <ADC_Enable+0xf4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4925      	ldr	r1, [pc, #148]	; (8006630 <ADC_Enable+0xf8>)
 800659c:	0018      	movs	r0, r3
 800659e:	f7f9 fdb9 	bl	8000114 <__udivsi3>
 80065a2:	0003      	movs	r3, r0
 80065a4:	3301      	adds	r3, #1
 80065a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065a8:	e002      	b.n	80065b0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f9      	bne.n	80065aa <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7e5b      	ldrb	r3, [r3, #25]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d02c      	beq.n	8006618 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80065be:	f7ff f9d3 	bl	8005968 <HAL_GetTick>
 80065c2:	0003      	movs	r3, r0
 80065c4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065c6:	e020      	b.n	800660a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff fb25 	bl	8005c1c <LL_ADC_IsEnabled>
 80065d2:	1e03      	subs	r3, r0, #0
 80065d4:	d104      	bne.n	80065e0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	0018      	movs	r0, r3
 80065dc:	f7ff fafa 	bl	8005bd4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065e0:	f7ff f9c2 	bl	8005968 <HAL_GetTick>
 80065e4:	0002      	movs	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d90d      	bls.n	800660a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f2:	2210      	movs	r2, #16
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	2201      	movs	r2, #1
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e007      	b.n	800661a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2201      	movs	r2, #1
 8006612:	4013      	ands	r3, r2
 8006614:	2b01      	cmp	r3, #1
 8006616:	d1d7      	bne.n	80065c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b004      	add	sp, #16
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	80000017 	.word	0x80000017
 8006628:	40012708 	.word	0x40012708
 800662c:	20000080 	.word	0x20000080
 8006630:	00030d40 	.word	0x00030d40

08006634 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	2250      	movs	r2, #80	; 0x50
 8006648:	4013      	ands	r3, r2
 800664a:	d141      	bne.n	80066d0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	0092      	lsls	r2, r2, #2
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0018      	movs	r0, r3
 8006660:	f7ff fa20 	bl	8005aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d02e      	beq.n	80066c6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	7e9b      	ldrb	r3, [r3, #26]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d12a      	bne.n	80066c6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2208      	movs	r2, #8
 8006678:	4013      	ands	r3, r2
 800667a:	2b08      	cmp	r3, #8
 800667c:	d123      	bne.n	80066c6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	0018      	movs	r0, r3
 8006684:	f7ff faee 	bl	8005c64 <LL_ADC_REG_IsConversionOngoing>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d110      	bne.n	80066ae <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	210c      	movs	r1, #12
 8006698:	438a      	bics	r2, r1
 800669a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <ADC_DMAConvCplt+0xc4>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	2201      	movs	r2, #1
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	659a      	str	r2, [r3, #88]	; 0x58
 80066ac:	e00b      	b.n	80066c6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	2220      	movs	r2, #32
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066be:	2201      	movs	r2, #1
 80066c0:	431a      	orrs	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f7ff fd43 	bl	8006154 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80066ce:	e00f      	b.n	80066f0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d4:	2210      	movs	r2, #16
 80066d6:	4013      	ands	r3, r2
 80066d8:	d004      	beq.n	80066e4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	0018      	movs	r0, r3
 80066de:	f7ff fd49 	bl	8006174 <HAL_ADC_ErrorCallback>
}
 80066e2:	e005      	b.n	80066f0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	0010      	movs	r0, r2
 80066ee:	4798      	blx	r3
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	fffffefe 	.word	0xfffffefe

080066fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff fd29 	bl	8006164 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	46bd      	mov	sp, r7
 8006716:	b004      	add	sp, #16
 8006718:	bd80      	pop	{r7, pc}

0800671a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	2240      	movs	r2, #64	; 0x40
 800672e:	431a      	orrs	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	2204      	movs	r2, #4
 800673a:	431a      	orrs	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff fd16 	bl	8006174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b004      	add	sp, #16
 800674e:	bd80      	pop	{r7, pc}

08006750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	0002      	movs	r2, r0
 8006758:	1dfb      	adds	r3, r7, #7
 800675a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800675c:	1dfb      	adds	r3, r7, #7
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b7f      	cmp	r3, #127	; 0x7f
 8006762:	d809      	bhi.n	8006778 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006764:	1dfb      	adds	r3, r7, #7
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	001a      	movs	r2, r3
 800676a:	231f      	movs	r3, #31
 800676c:	401a      	ands	r2, r3
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <__NVIC_EnableIRQ+0x30>)
 8006770:	2101      	movs	r1, #1
 8006772:	4091      	lsls	r1, r2
 8006774:	000a      	movs	r2, r1
 8006776:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b002      	add	sp, #8
 800677e:	bd80      	pop	{r7, pc}
 8006780:	e000e100 	.word	0xe000e100

08006784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	0002      	movs	r2, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	1dfb      	adds	r3, r7, #7
 8006790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006792:	1dfb      	adds	r3, r7, #7
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b7f      	cmp	r3, #127	; 0x7f
 8006798:	d828      	bhi.n	80067ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800679a:	4a2f      	ldr	r2, [pc, #188]	; (8006858 <__NVIC_SetPriority+0xd4>)
 800679c:	1dfb      	adds	r3, r7, #7
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	33c0      	adds	r3, #192	; 0xc0
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	589b      	ldr	r3, [r3, r2]
 80067aa:	1dfa      	adds	r2, r7, #7
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	0011      	movs	r1, r2
 80067b0:	2203      	movs	r2, #3
 80067b2:	400a      	ands	r2, r1
 80067b4:	00d2      	lsls	r2, r2, #3
 80067b6:	21ff      	movs	r1, #255	; 0xff
 80067b8:	4091      	lsls	r1, r2
 80067ba:	000a      	movs	r2, r1
 80067bc:	43d2      	mvns	r2, r2
 80067be:	401a      	ands	r2, r3
 80067c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	019b      	lsls	r3, r3, #6
 80067c6:	22ff      	movs	r2, #255	; 0xff
 80067c8:	401a      	ands	r2, r3
 80067ca:	1dfb      	adds	r3, r7, #7
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	0018      	movs	r0, r3
 80067d0:	2303      	movs	r3, #3
 80067d2:	4003      	ands	r3, r0
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067d8:	481f      	ldr	r0, [pc, #124]	; (8006858 <__NVIC_SetPriority+0xd4>)
 80067da:	1dfb      	adds	r3, r7, #7
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	089b      	lsrs	r3, r3, #2
 80067e2:	430a      	orrs	r2, r1
 80067e4:	33c0      	adds	r3, #192	; 0xc0
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80067ea:	e031      	b.n	8006850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067ec:	4a1b      	ldr	r2, [pc, #108]	; (800685c <__NVIC_SetPriority+0xd8>)
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	0019      	movs	r1, r3
 80067f4:	230f      	movs	r3, #15
 80067f6:	400b      	ands	r3, r1
 80067f8:	3b08      	subs	r3, #8
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	3306      	adds	r3, #6
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	18d3      	adds	r3, r2, r3
 8006802:	3304      	adds	r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	1dfa      	adds	r2, r7, #7
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	0011      	movs	r1, r2
 800680c:	2203      	movs	r2, #3
 800680e:	400a      	ands	r2, r1
 8006810:	00d2      	lsls	r2, r2, #3
 8006812:	21ff      	movs	r1, #255	; 0xff
 8006814:	4091      	lsls	r1, r2
 8006816:	000a      	movs	r2, r1
 8006818:	43d2      	mvns	r2, r2
 800681a:	401a      	ands	r2, r3
 800681c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	22ff      	movs	r2, #255	; 0xff
 8006824:	401a      	ands	r2, r3
 8006826:	1dfb      	adds	r3, r7, #7
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	0018      	movs	r0, r3
 800682c:	2303      	movs	r3, #3
 800682e:	4003      	ands	r3, r0
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006834:	4809      	ldr	r0, [pc, #36]	; (800685c <__NVIC_SetPriority+0xd8>)
 8006836:	1dfb      	adds	r3, r7, #7
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	001c      	movs	r4, r3
 800683c:	230f      	movs	r3, #15
 800683e:	4023      	ands	r3, r4
 8006840:	3b08      	subs	r3, #8
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	430a      	orrs	r2, r1
 8006846:	3306      	adds	r3, #6
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	18c3      	adds	r3, r0, r3
 800684c:	3304      	adds	r3, #4
 800684e:	601a      	str	r2, [r3, #0]
}
 8006850:	46c0      	nop			; (mov r8, r8)
 8006852:	46bd      	mov	sp, r7
 8006854:	b003      	add	sp, #12
 8006856:	bd90      	pop	{r4, r7, pc}
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	045b      	lsls	r3, r3, #17
 8006870:	429a      	cmp	r2, r3
 8006872:	d301      	bcc.n	8006878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006874:	2301      	movs	r3, #1
 8006876:	e010      	b.n	800689a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <SysTick_Config+0x44>)
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	3a01      	subs	r2, #1
 800687e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006880:	2301      	movs	r3, #1
 8006882:	425b      	negs	r3, r3
 8006884:	2103      	movs	r1, #3
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff ff7c 	bl	8006784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <SysTick_Config+0x44>)
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <SysTick_Config+0x44>)
 8006894:	2207      	movs	r2, #7
 8006896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006898:	2300      	movs	r3, #0
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	e000e010 	.word	0xe000e010

080068a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	210f      	movs	r1, #15
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	1c02      	adds	r2, r0, #0
 80068b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	187b      	adds	r3, r7, r1
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	0011      	movs	r1, r2
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ff5d 	bl	8006784 <__NVIC_SetPriority>
}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b004      	add	sp, #16
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	0002      	movs	r2, r0
 80068da:	1dfb      	adds	r3, r7, #7
 80068dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068de:	1dfb      	adds	r3, r7, #7
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7ff ff33 	bl	8006750 <__NVIC_EnableIRQ>
}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7ff ffaf 	bl	8006860 <SysTick_Config>
 8006902:	0003      	movs	r3, r0
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e077      	b.n	8006a0e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a3d      	ldr	r2, [pc, #244]	; (8006a18 <HAL_DMA_Init+0x10c>)
 8006924:	4694      	mov	ip, r2
 8006926:	4463      	add	r3, ip
 8006928:	2114      	movs	r1, #20
 800692a:	0018      	movs	r0, r3
 800692c:	f7f9 fbf2 	bl	8000114 <__udivsi3>
 8006930:	0003      	movs	r3, r0
 8006932:	009a      	lsls	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2225      	movs	r2, #37	; 0x25
 800693c:	2102      	movs	r1, #2
 800693e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4934      	ldr	r1, [pc, #208]	; (8006a1c <HAL_DMA_Init+0x110>)
 800694c:	400a      	ands	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f9c1 	bl	8006d10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	01db      	lsls	r3, r3, #7
 8006996:	429a      	cmp	r2, r3
 8006998:	d102      	bne.n	80069a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	213f      	movs	r1, #63	; 0x3f
 80069aa:	400a      	ands	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80069b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d011      	beq.n	80069e4 <HAL_DMA_Init+0xd8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d80d      	bhi.n	80069e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0018      	movs	r0, r3
 80069cc:	f000 f9cc 	bl	8006d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069e0:	605a      	str	r2, [r3, #4]
 80069e2:	e008      	b.n	80069f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2225      	movs	r2, #37	; 0x25
 8006a00:	2101      	movs	r1, #1
 8006a02:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	; 0x24
 8006a08:	2100      	movs	r1, #0
 8006a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	0018      	movs	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	bffdfff8 	.word	0xbffdfff8
 8006a1c:	ffff800f 	.word	0xffff800f

08006a20 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2317      	movs	r3, #23
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2224      	movs	r2, #36	; 0x24
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_DMA_Start_IT+0x24>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e06f      	b.n	8006b24 <HAL_DMA_Start_IT+0x104>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2225      	movs	r2, #37	; 0x25
 8006a50:	5c9b      	ldrb	r3, [r3, r2]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d157      	bne.n	8006b08 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2225      	movs	r2, #37	; 0x25
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2101      	movs	r1, #1
 8006a72:	438a      	bics	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f907 	bl	8006c90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	210e      	movs	r1, #14
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e00f      	b.n	8006abc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	438a      	bics	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	210a      	movs	r1, #10
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	025b      	lsls	r3, r3, #9
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d008      	beq.n	8006adc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	0049      	lsls	r1, r1, #1
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	2180      	movs	r1, #128	; 0x80
 8006af0:	0049      	lsls	r1, r1, #1
 8006af2:	430a      	orrs	r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2101      	movs	r1, #1
 8006b02:	430a      	orrs	r2, r1
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e00a      	b.n	8006b1e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2280      	movs	r2, #128	; 0x80
 8006b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2224      	movs	r2, #36	; 0x24
 8006b12:	2100      	movs	r1, #0
 8006b14:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006b16:	2317      	movs	r3, #23
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006b1e:	2317      	movs	r3, #23
 8006b20:	18fb      	adds	r3, r7, r3
 8006b22:	781b      	ldrb	r3, [r3, #0]
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b006      	add	sp, #24
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006b34:	4b55      	ldr	r3, [pc, #340]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	221c      	movs	r2, #28
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	0013      	movs	r3, r2
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4013      	ands	r3, r2
 8006b54:	d027      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x7a>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d023      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2220      	movs	r2, #32
 8006b66:	4013      	ands	r3, r2
 8006b68:	d107      	bne.n	8006b7a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2104      	movs	r1, #4
 8006b76:	438a      	bics	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006b7a:	4b44      	ldr	r3, [pc, #272]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	221c      	movs	r2, #28
 8006b84:	4013      	ands	r3, r2
 8006b86:	2204      	movs	r2, #4
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d100      	bne.n	8006b9a <HAL_DMA_IRQHandler+0x6e>
 8006b98:	e073      	b.n	8006c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	0010      	movs	r0, r2
 8006ba2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006ba4:	e06d      	b.n	8006c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	221c      	movs	r2, #28
 8006bac:	4013      	ands	r3, r2
 8006bae:	2202      	movs	r2, #2
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	0013      	movs	r3, r2
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d02e      	beq.n	8006c18 <HAL_DMA_IRQHandler+0xec>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d02a      	beq.n	8006c18 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d10b      	bne.n	8006be6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	210a      	movs	r1, #10
 8006bda:	438a      	bics	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2225      	movs	r2, #37	; 0x25
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006be8:	6859      	ldr	r1, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	221c      	movs	r2, #28
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	; 0x24
 8006c00:	2100      	movs	r1, #0
 8006c02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d03a      	beq.n	8006c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	0010      	movs	r0, r2
 8006c14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006c16:	e034      	b.n	8006c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	221c      	movs	r2, #28
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2208      	movs	r2, #8
 8006c22:	409a      	lsls	r2, r3
 8006c24:	0013      	movs	r3, r2
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d02b      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x158>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	4013      	ands	r3, r2
 8006c32:	d027      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	210e      	movs	r1, #14
 8006c40:	438a      	bics	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	221c      	movs	r2, #28
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2201      	movs	r2, #1
 8006c52:	409a      	lsls	r2, r3
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <HAL_DMA_IRQHandler+0x160>)
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2225      	movs	r2, #37	; 0x25
 8006c64:	2101      	movs	r1, #1
 8006c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	0010      	movs	r0, r2
 8006c80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46c0      	nop			; (mov r8, r8)
}
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b004      	add	sp, #16
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40020000 	.word	0x40020000

08006c90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ca6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <DMA_SetConfig+0x7c>)
 8006cbc:	6859      	ldr	r1, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	221c      	movs	r2, #28
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <DMA_SetConfig+0x7c>)
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d108      	bne.n	8006cf2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006cf0:	e007      	b.n	8006d02 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	60da      	str	r2, [r3, #12]
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b004      	add	sp, #16
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	40020000 	.word	0x40020000

08006d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006d20:	4694      	mov	ip, r2
 8006d22:	4463      	add	r3, ip
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	001a      	movs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	001a      	movs	r2, r3
 8006d32:	23ff      	movs	r3, #255	; 0xff
 8006d34:	4013      	ands	r3, r2
 8006d36:	3b08      	subs	r3, #8
 8006d38:	2114      	movs	r1, #20
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7f9 f9ea 	bl	8000114 <__udivsi3>
 8006d40:	0003      	movs	r3, r0
 8006d42:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a07      	ldr	r2, [pc, #28]	; (8006d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006d48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	221f      	movs	r2, #31
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2201      	movs	r2, #1
 8006d52:	409a      	lsls	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b004      	add	sp, #16
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	10008200 	.word	0x10008200
 8006d64:	40020880 	.word	0x40020880

08006d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	223f      	movs	r2, #63	; 0x3f
 8006d76:	4013      	ands	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a0a      	ldr	r2, [pc, #40]	; (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	001a      	movs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a07      	ldr	r2, [pc, #28]	; (8006dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2203      	movs	r2, #3
 8006d96:	4013      	ands	r3, r2
 8006d98:	2201      	movs	r2, #1
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b004      	add	sp, #16
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	1000823f 	.word	0x1000823f
 8006dac:	40020940 	.word	0x40020940

08006db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dbe:	e147      	b.n	8007050 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4091      	lsls	r1, r2
 8006dca:	000a      	movs	r2, r1
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d100      	bne.n	8006dd8 <HAL_GPIO_Init+0x28>
 8006dd6:	e138      	b.n	800704a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d00b      	beq.n	8006df8 <HAL_GPIO_Init+0x48>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d007      	beq.n	8006df8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dec:	2b11      	cmp	r3, #17
 8006dee:	d003      	beq.n	8006df8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b12      	cmp	r3, #18
 8006df6:	d130      	bne.n	8006e5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	2203      	movs	r2, #3
 8006e04:	409a      	lsls	r2, r3
 8006e06:	0013      	movs	r3, r2
 8006e08:	43da      	mvns	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	409a      	lsls	r2, r3
 8006e1a:	0013      	movs	r3, r2
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e2e:	2201      	movs	r2, #1
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	409a      	lsls	r2, r3
 8006e34:	0013      	movs	r3, r2
 8006e36:	43da      	mvns	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	091b      	lsrs	r3, r3, #4
 8006e44:	2201      	movs	r2, #1
 8006e46:	401a      	ands	r2, r3
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	0013      	movs	r3, r2
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	2203      	movs	r2, #3
 8006e66:	409a      	lsls	r2, r3
 8006e68:	0013      	movs	r3, r2
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	0013      	movs	r3, r2
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0xea>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b12      	cmp	r3, #18
 8006e98:	d123      	bne.n	8006ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	08da      	lsrs	r2, r3, #3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3208      	adds	r2, #8
 8006ea2:	0092      	lsls	r2, r2, #2
 8006ea4:	58d3      	ldr	r3, [r2, r3]
 8006ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2207      	movs	r2, #7
 8006eac:	4013      	ands	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	0013      	movs	r3, r2
 8006eb6:	43da      	mvns	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2107      	movs	r1, #7
 8006ec6:	400b      	ands	r3, r1
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	0013      	movs	r3, r2
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	08da      	lsrs	r2, r3, #3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3208      	adds	r2, #8
 8006edc:	0092      	lsls	r2, r2, #2
 8006ede:	6939      	ldr	r1, [r7, #16]
 8006ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	2203      	movs	r2, #3
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	0013      	movs	r3, r2
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2203      	movs	r2, #3
 8006f00:	401a      	ands	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	409a      	lsls	r2, r3
 8006f08:	0013      	movs	r3, r2
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	055b      	lsls	r3, r3, #21
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d100      	bne.n	8006f24 <HAL_GPIO_Init+0x174>
 8006f22:	e092      	b.n	800704a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006f24:	4a50      	ldr	r2, [pc, #320]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	089b      	lsrs	r3, r3, #2
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	589b      	ldr	r3, [r3, r2]
 8006f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2203      	movs	r2, #3
 8006f36:	4013      	ands	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	220f      	movs	r2, #15
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	0013      	movs	r3, r2
 8006f40:	43da      	mvns	r2, r3
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4013      	ands	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	23a0      	movs	r3, #160	; 0xa0
 8006f4c:	05db      	lsls	r3, r3, #23
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d013      	beq.n	8006f7a <HAL_GPIO_Init+0x1ca>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a45      	ldr	r2, [pc, #276]	; (800706c <HAL_GPIO_Init+0x2bc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00d      	beq.n	8006f76 <HAL_GPIO_Init+0x1c6>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a44      	ldr	r2, [pc, #272]	; (8007070 <HAL_GPIO_Init+0x2c0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <HAL_GPIO_Init+0x1c2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a43      	ldr	r2, [pc, #268]	; (8007074 <HAL_GPIO_Init+0x2c4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d101      	bne.n	8006f6e <HAL_GPIO_Init+0x1be>
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e006      	b.n	8006f7c <HAL_GPIO_Init+0x1cc>
 8006f6e:	2305      	movs	r3, #5
 8006f70:	e004      	b.n	8006f7c <HAL_GPIO_Init+0x1cc>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e002      	b.n	8006f7c <HAL_GPIO_Init+0x1cc>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_GPIO_Init+0x1cc>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	2103      	movs	r1, #3
 8006f80:	400a      	ands	r2, r1
 8006f82:	00d2      	lsls	r2, r2, #3
 8006f84:	4093      	lsls	r3, r2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006f8c:	4936      	ldr	r1, [pc, #216]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	3318      	adds	r3, #24
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f9a:	4a33      	ldr	r2, [pc, #204]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	58d3      	ldr	r3, [r2, r3]
 8006fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	43da      	mvns	r2, r3
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	025b      	lsls	r3, r3, #9
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006fc0:	4929      	ldr	r1, [pc, #164]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006fca:	2384      	movs	r3, #132	; 0x84
 8006fcc:	58d3      	ldr	r3, [r2, r3]
 8006fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	43da      	mvns	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	2380      	movs	r3, #128	; 0x80
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fee:	491e      	ldr	r1, [pc, #120]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006ff0:	2284      	movs	r2, #132	; 0x84
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ff6:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	43da      	mvns	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4013      	ands	r3, r2
 8007004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	035b      	lsls	r3, r3, #13
 800700e:	4013      	ands	r3, r2
 8007010:	d003      	beq.n	800701a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	43da      	mvns	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4013      	ands	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	039b      	lsls	r3, r3, #14
 8007038:	4013      	ands	r3, r2
 800703a:	d003      	beq.n	8007044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <HAL_GPIO_Init+0x2b8>)
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	3301      	adds	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	40da      	lsrs	r2, r3
 8007058:	1e13      	subs	r3, r2, #0
 800705a:	d000      	beq.n	800705e <HAL_GPIO_Init+0x2ae>
 800705c:	e6b0      	b.n	8006dc0 <HAL_GPIO_Init+0x10>
  }
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46c0      	nop			; (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b006      	add	sp, #24
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40021800 	.word	0x40021800
 800706c:	50000400 	.word	0x50000400
 8007070:	50000800 	.word	0x50000800
 8007074:	50000c00 	.word	0x50000c00

08007078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	000a      	movs	r2, r1
 8007082:	1cbb      	adds	r3, r7, #2
 8007084:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	1cba      	adds	r2, r7, #2
 800708c:	8812      	ldrh	r2, [r2, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007092:	230f      	movs	r3, #15
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	2201      	movs	r2, #1
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e003      	b.n	80070a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800709c:	230f      	movs	r3, #15
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80070a4:	230f      	movs	r3, #15
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	781b      	ldrb	r3, [r3, #0]
}
 80070aa:	0018      	movs	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b004      	add	sp, #16
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	0008      	movs	r0, r1
 80070bc:	0011      	movs	r1, r2
 80070be:	1cbb      	adds	r3, r7, #2
 80070c0:	1c02      	adds	r2, r0, #0
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	1c7b      	adds	r3, r7, #1
 80070c6:	1c0a      	adds	r2, r1, #0
 80070c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070ca:	1c7b      	adds	r3, r7, #1
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070d2:	1cbb      	adds	r3, r7, #2
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070da:	e003      	b.n	80070e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070dc:	1cbb      	adds	r3, r7, #2
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b002      	add	sp, #8
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	0002      	movs	r2, r0
 80070f4:	1dbb      	adds	r3, r7, #6
 80070f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	1dba      	adds	r2, r7, #6
 80070fe:	8812      	ldrh	r2, [r2, #0]
 8007100:	4013      	ands	r3, r2
 8007102:	d008      	beq.n	8007116 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007106:	1dba      	adds	r2, r7, #6
 8007108:	8812      	ldrh	r2, [r2, #0]
 800710a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800710c:	1dbb      	adds	r3, r7, #6
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	0018      	movs	r0, r3
 8007112:	f000 f815 	bl	8007140 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	1dba      	adds	r2, r7, #6
 800711c:	8812      	ldrh	r2, [r2, #0]
 800711e:	4013      	ands	r3, r2
 8007120:	d008      	beq.n	8007134 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007124:	1dba      	adds	r2, r7, #6
 8007126:	8812      	ldrh	r2, [r2, #0]
 8007128:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800712a:	1dbb      	adds	r3, r7, #6
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	0018      	movs	r0, r3
 8007130:	f7fc f960 	bl	80033f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b002      	add	sp, #8
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021800 	.word	0x40021800

08007140 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	0002      	movs	r2, r0
 8007148:	1dbb      	adds	r3, r7, #6
 800714a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e082      	b.n	800726c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2241      	movs	r2, #65	; 0x41
 800716a:	5c9b      	ldrb	r3, [r3, r2]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	2100      	movs	r1, #0
 8007178:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0018      	movs	r0, r3
 800717e:	f009 fba9 	bl	80108d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2241      	movs	r2, #65	; 0x41
 8007186:	2124      	movs	r1, #36	; 0x24
 8007188:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2101      	movs	r1, #1
 8007196:	438a      	bics	r2, r1
 8007198:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4934      	ldr	r1, [pc, #208]	; (8007274 <HAL_I2C_Init+0x120>)
 80071a4:	400a      	ands	r2, r1
 80071a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4931      	ldr	r1, [pc, #196]	; (8007278 <HAL_I2C_Init+0x124>)
 80071b4:	400a      	ands	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d108      	bne.n	80071d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2180      	movs	r1, #128	; 0x80
 80071ca:	0209      	lsls	r1, r1, #8
 80071cc:	430a      	orrs	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	e007      	b.n	80071e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2184      	movs	r1, #132	; 0x84
 80071dc:	0209      	lsls	r1, r1, #8
 80071de:	430a      	orrs	r2, r1
 80071e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d104      	bne.n	80071f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	0112      	lsls	r2, r2, #4
 80071f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	491f      	ldr	r1, [pc, #124]	; (800727c <HAL_I2C_Init+0x128>)
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	491a      	ldr	r1, [pc, #104]	; (8007278 <HAL_I2C_Init+0x124>)
 8007210:	400a      	ands	r2, r1
 8007212:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	431a      	orrs	r2, r3
 800721e:	0011      	movs	r1, r2
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69d9      	ldr	r1, [r3, #28]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	430a      	orrs	r2, r1
 800724c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2241      	movs	r2, #65	; 0x41
 8007258:	2120      	movs	r1, #32
 800725a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2242      	movs	r2, #66	; 0x42
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bd80      	pop	{r7, pc}
 8007274:	f0ffffff 	.word	0xf0ffffff
 8007278:	ffff7fff 	.word	0xffff7fff
 800727c:	02008000 	.word	0x02008000

08007280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b089      	sub	sp, #36	; 0x24
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	000c      	movs	r4, r1
 800728a:	0010      	movs	r0, r2
 800728c:	0019      	movs	r1, r3
 800728e:	230a      	movs	r3, #10
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	1c22      	adds	r2, r4, #0
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	2308      	movs	r3, #8
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	1c02      	adds	r2, r0, #0
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	1dbb      	adds	r3, r7, #6
 80072a0:	1c0a      	adds	r2, r1, #0
 80072a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2241      	movs	r2, #65	; 0x41
 80072a8:	5c9b      	ldrb	r3, [r3, r2]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d000      	beq.n	80072b2 <HAL_I2C_Mem_Write+0x32>
 80072b0:	e10c      	b.n	80074cc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <HAL_I2C_Mem_Write+0x42>
 80072b8:	232c      	movs	r3, #44	; 0x2c
 80072ba:	18fb      	adds	r3, r7, r3
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2280      	movs	r2, #128	; 0x80
 80072c6:	0092      	lsls	r2, r2, #2
 80072c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e0ff      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2240      	movs	r2, #64	; 0x40
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_I2C_Mem_Write+0x5c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0f8      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	2101      	movs	r1, #1
 80072e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072e4:	f7fe fb40 	bl	8005968 <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	0219      	lsls	r1, r3, #8
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	2319      	movs	r3, #25
 80072f8:	2201      	movs	r2, #1
 80072fa:	f000 fb0b 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80072fe:	1e03      	subs	r3, r0, #0
 8007300:	d001      	beq.n	8007306 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e0e3      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2241      	movs	r2, #65	; 0x41
 800730a:	2121      	movs	r1, #33	; 0x21
 800730c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2242      	movs	r2, #66	; 0x42
 8007312:	2140      	movs	r1, #64	; 0x40
 8007314:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	222c      	movs	r2, #44	; 0x2c
 8007326:	18ba      	adds	r2, r7, r2
 8007328:	8812      	ldrh	r2, [r2, #0]
 800732a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007332:	1dbb      	adds	r3, r7, #6
 8007334:	881c      	ldrh	r4, [r3, #0]
 8007336:	2308      	movs	r3, #8
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	881a      	ldrh	r2, [r3, #0]
 800733c:	230a      	movs	r3, #10
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	8819      	ldrh	r1, [r3, #0]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	0023      	movs	r3, r4
 800734e:	f000 f9f9 	bl	8007744 <I2C_RequestMemoryWrite>
 8007352:	1e03      	subs	r3, r0, #0
 8007354:	d005      	beq.n	8007362 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2240      	movs	r2, #64	; 0x40
 800735a:	2100      	movs	r1, #0
 800735c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e0b5      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2bff      	cmp	r3, #255	; 0xff
 800736a:	d911      	bls.n	8007390 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007376:	b2da      	uxtb	r2, r3
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	045c      	lsls	r4, r3, #17
 800737c:	230a      	movs	r3, #10
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	8819      	ldrh	r1, [r3, #0]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	0023      	movs	r3, r4
 800738a:	f000 fbe3 	bl	8007b54 <I2C_TransferConfig>
 800738e:	e012      	b.n	80073b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	049c      	lsls	r4, r3, #18
 80073a4:	230a      	movs	r3, #10
 80073a6:	18fb      	adds	r3, r7, r3
 80073a8:	8819      	ldrh	r1, [r3, #0]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	2300      	movs	r3, #0
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	0023      	movs	r3, r4
 80073b2:	f000 fbcf 	bl	8007b54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 fae8 	bl	8007992 <I2C_WaitOnTXISFlagUntilTimeout>
 80073c2:	1e03      	subs	r3, r0, #0
 80073c4:	d001      	beq.n	80073ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e081      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d03a      	beq.n	800747a <HAL_I2C_Mem_Write+0x1fa>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d136      	bne.n	800747a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800740c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	0013      	movs	r3, r2
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	; 0x80
 800741a:	f000 fa7b 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 800741e:	1e03      	subs	r3, r0, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e053      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	2bff      	cmp	r3, #255	; 0xff
 800742e:	d911      	bls.n	8007454 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	22ff      	movs	r2, #255	; 0xff
 8007434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743a:	b2da      	uxtb	r2, r3
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	045c      	lsls	r4, r3, #17
 8007440:	230a      	movs	r3, #10
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	8819      	ldrh	r1, [r3, #0]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	2300      	movs	r3, #0
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	0023      	movs	r3, r4
 800744e:	f000 fb81 	bl	8007b54 <I2C_TransferConfig>
 8007452:	e012      	b.n	800747a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007462:	b2da      	uxtb	r2, r3
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	049c      	lsls	r4, r3, #18
 8007468:	230a      	movs	r3, #10
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	8819      	ldrh	r1, [r3, #0]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	0023      	movs	r3, r4
 8007476:	f000 fb6d 	bl	8007b54 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d198      	bne.n	80073b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	0018      	movs	r0, r3
 800748c:	f000 fac0 	bl	8007a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007490:	1e03      	subs	r3, r0, #0
 8007492:	d001      	beq.n	8007498 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e01a      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2220      	movs	r2, #32
 800749e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	490b      	ldr	r1, [pc, #44]	; (80074d8 <HAL_I2C_Mem_Write+0x258>)
 80074ac:	400a      	ands	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2241      	movs	r2, #65	; 0x41
 80074b4:	2120      	movs	r1, #32
 80074b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2242      	movs	r2, #66	; 0x42
 80074bc:	2100      	movs	r1, #0
 80074be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	2100      	movs	r1, #0
 80074c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e000      	b.n	80074ce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	0018      	movs	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b007      	add	sp, #28
 80074d4:	bd90      	pop	{r4, r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	fe00e800 	.word	0xfe00e800

080074dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	000c      	movs	r4, r1
 80074e6:	0010      	movs	r0, r2
 80074e8:	0019      	movs	r1, r3
 80074ea:	230a      	movs	r3, #10
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	1c22      	adds	r2, r4, #0
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	2308      	movs	r3, #8
 80074f4:	18fb      	adds	r3, r7, r3
 80074f6:	1c02      	adds	r2, r0, #0
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	1dbb      	adds	r3, r7, #6
 80074fc:	1c0a      	adds	r2, r1, #0
 80074fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2241      	movs	r2, #65	; 0x41
 8007504:	5c9b      	ldrb	r3, [r3, r2]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b20      	cmp	r3, #32
 800750a:	d000      	beq.n	800750e <HAL_I2C_Mem_Read+0x32>
 800750c:	e110      	b.n	8007730 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <HAL_I2C_Mem_Read+0x42>
 8007514:	232c      	movs	r3, #44	; 0x2c
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	0092      	lsls	r2, r2, #2
 8007524:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e103      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2240      	movs	r2, #64	; 0x40
 800752e:	5c9b      	ldrb	r3, [r3, r2]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_I2C_Mem_Read+0x5c>
 8007534:	2302      	movs	r3, #2
 8007536:	e0fc      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	2101      	movs	r1, #1
 800753e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007540:	f7fe fa12 	bl	8005968 <HAL_GetTick>
 8007544:	0003      	movs	r3, r0
 8007546:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	0219      	lsls	r1, r3, #8
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	2319      	movs	r3, #25
 8007554:	2201      	movs	r2, #1
 8007556:	f000 f9dd 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 800755a:	1e03      	subs	r3, r0, #0
 800755c:	d001      	beq.n	8007562 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e0e7      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2241      	movs	r2, #65	; 0x41
 8007566:	2122      	movs	r1, #34	; 0x22
 8007568:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2242      	movs	r2, #66	; 0x42
 800756e:	2140      	movs	r1, #64	; 0x40
 8007570:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	222c      	movs	r2, #44	; 0x2c
 8007582:	18ba      	adds	r2, r7, r2
 8007584:	8812      	ldrh	r2, [r2, #0]
 8007586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800758e:	1dbb      	adds	r3, r7, #6
 8007590:	881c      	ldrh	r4, [r3, #0]
 8007592:	2308      	movs	r3, #8
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	230a      	movs	r3, #10
 800759a:	18fb      	adds	r3, r7, r3
 800759c:	8819      	ldrh	r1, [r3, #0]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	0023      	movs	r3, r4
 80075aa:	f000 f92f 	bl	800780c <I2C_RequestMemoryRead>
 80075ae:	1e03      	subs	r3, r0, #0
 80075b0:	d005      	beq.n	80075be <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2240      	movs	r2, #64	; 0x40
 80075b6:	2100      	movs	r1, #0
 80075b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e0b9      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2bff      	cmp	r3, #255	; 0xff
 80075c6:	d911      	bls.n	80075ec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	22ff      	movs	r2, #255	; 0xff
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	045c      	lsls	r4, r3, #17
 80075d8:	230a      	movs	r3, #10
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	8819      	ldrh	r1, [r3, #0]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	4b56      	ldr	r3, [pc, #344]	; (800773c <HAL_I2C_Mem_Read+0x260>)
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	0023      	movs	r3, r4
 80075e6:	f000 fab5 	bl	8007b54 <I2C_TransferConfig>
 80075ea:	e012      	b.n	8007612 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	049c      	lsls	r4, r3, #18
 8007600:	230a      	movs	r3, #10
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	8819      	ldrh	r1, [r3, #0]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4b4c      	ldr	r3, [pc, #304]	; (800773c <HAL_I2C_Mem_Read+0x260>)
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	0023      	movs	r3, r4
 800760e:	f000 faa1 	bl	8007b54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	0013      	movs	r3, r2
 800761c:	2200      	movs	r2, #0
 800761e:	2104      	movs	r1, #4
 8007620:	f000 f978 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007624:	1e03      	subs	r3, r0, #0
 8007626:	d001      	beq.n	800762c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e082      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03a      	beq.n	80076de <HAL_I2C_Mem_Read+0x202>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d136      	bne.n	80076de <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	0013      	movs	r3, r2
 800767a:	2200      	movs	r2, #0
 800767c:	2180      	movs	r1, #128	; 0x80
 800767e:	f000 f949 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007682:	1e03      	subs	r3, r0, #0
 8007684:	d001      	beq.n	800768a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e053      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	2bff      	cmp	r3, #255	; 0xff
 8007692:	d911      	bls.n	80076b8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	2380      	movs	r3, #128	; 0x80
 80076a2:	045c      	lsls	r4, r3, #17
 80076a4:	230a      	movs	r3, #10
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	8819      	ldrh	r1, [r3, #0]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	0023      	movs	r3, r4
 80076b2:	f000 fa4f 	bl	8007b54 <I2C_TransferConfig>
 80076b6:	e012      	b.n	80076de <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	049c      	lsls	r4, r3, #18
 80076cc:	230a      	movs	r3, #10
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	8819      	ldrh	r1, [r3, #0]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	2300      	movs	r3, #0
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	0023      	movs	r3, r4
 80076da:	f000 fa3b 	bl	8007b54 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d194      	bne.n	8007612 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 f98e 	bl	8007a10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076f4:	1e03      	subs	r3, r0, #0
 80076f6:	d001      	beq.n	80076fc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e01a      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2220      	movs	r2, #32
 8007702:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	490c      	ldr	r1, [pc, #48]	; (8007740 <HAL_I2C_Mem_Read+0x264>)
 8007710:	400a      	ands	r2, r1
 8007712:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2241      	movs	r2, #65	; 0x41
 8007718:	2120      	movs	r1, #32
 800771a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2242      	movs	r2, #66	; 0x42
 8007720:	2100      	movs	r1, #0
 8007722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	2100      	movs	r1, #0
 800772a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e000      	b.n	8007732 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b007      	add	sp, #28
 8007738:	bd90      	pop	{r4, r7, pc}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	80002400 	.word	0x80002400
 8007740:	fe00e800 	.word	0xfe00e800

08007744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	000c      	movs	r4, r1
 800774e:	0010      	movs	r0, r2
 8007750:	0019      	movs	r1, r3
 8007752:	250a      	movs	r5, #10
 8007754:	197b      	adds	r3, r7, r5
 8007756:	1c22      	adds	r2, r4, #0
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	2308      	movs	r3, #8
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	1c02      	adds	r2, r0, #0
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	1dbb      	adds	r3, r7, #6
 8007764:	1c0a      	adds	r2, r1, #0
 8007766:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007768:	1dbb      	adds	r3, r7, #6
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	2380      	movs	r3, #128	; 0x80
 8007770:	045c      	lsls	r4, r3, #17
 8007772:	197b      	adds	r3, r7, r5
 8007774:	8819      	ldrh	r1, [r3, #0]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	4b23      	ldr	r3, [pc, #140]	; (8007808 <I2C_RequestMemoryWrite+0xc4>)
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	0023      	movs	r3, r4
 800777e:	f000 f9e9 	bl	8007b54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007784:	6a39      	ldr	r1, [r7, #32]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	0018      	movs	r0, r3
 800778a:	f000 f902 	bl	8007992 <I2C_WaitOnTXISFlagUntilTimeout>
 800778e:	1e03      	subs	r3, r0, #0
 8007790:	d001      	beq.n	8007796 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e033      	b.n	80077fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007796:	1dbb      	adds	r3, r7, #6
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800779e:	2308      	movs	r3, #8
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28
 80077ac:	e019      	b.n	80077e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077ae:	2308      	movs	r3, #8
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	6a39      	ldr	r1, [r7, #32]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 f8e3 	bl	8007992 <I2C_WaitOnTXISFlagUntilTimeout>
 80077cc:	1e03      	subs	r3, r0, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e014      	b.n	80077fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d4:	2308      	movs	r3, #8
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80077e2:	6a3a      	ldr	r2, [r7, #32]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	0013      	movs	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	f000 f890 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d001      	beq.n	80077fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b004      	add	sp, #16
 8007804:	bdb0      	pop	{r4, r5, r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	80002000 	.word	0x80002000

0800780c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800780c:	b5b0      	push	{r4, r5, r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	000c      	movs	r4, r1
 8007816:	0010      	movs	r0, r2
 8007818:	0019      	movs	r1, r3
 800781a:	250a      	movs	r5, #10
 800781c:	197b      	adds	r3, r7, r5
 800781e:	1c22      	adds	r2, r4, #0
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	2308      	movs	r3, #8
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	1c02      	adds	r2, r0, #0
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	1dbb      	adds	r3, r7, #6
 800782c:	1c0a      	adds	r2, r1, #0
 800782e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007830:	1dbb      	adds	r3, r7, #6
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	197b      	adds	r3, r7, r5
 8007838:	8819      	ldrh	r1, [r3, #0]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <I2C_RequestMemoryRead+0xc0>)
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2300      	movs	r3, #0
 8007842:	f000 f987 	bl	8007b54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007848:	6a39      	ldr	r1, [r7, #32]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	0018      	movs	r0, r3
 800784e:	f000 f8a0 	bl	8007992 <I2C_WaitOnTXISFlagUntilTimeout>
 8007852:	1e03      	subs	r3, r0, #0
 8007854:	d001      	beq.n	800785a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e033      	b.n	80078c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800785a:	1dbb      	adds	r3, r7, #6
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d107      	bne.n	8007872 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007862:	2308      	movs	r3, #8
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	629a      	str	r2, [r3, #40]	; 0x28
 8007870:	e019      	b.n	80078a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007872:	2308      	movs	r3, #8
 8007874:	18fb      	adds	r3, r7, r3
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	0a1b      	lsrs	r3, r3, #8
 800787a:	b29b      	uxth	r3, r3
 800787c:	b2da      	uxtb	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007886:	6a39      	ldr	r1, [r7, #32]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 f881 	bl	8007992 <I2C_WaitOnTXISFlagUntilTimeout>
 8007890:	1e03      	subs	r3, r0, #0
 8007892:	d001      	beq.n	8007898 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e014      	b.n	80078c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007898:	2308      	movs	r3, #8
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	0013      	movs	r3, r2
 80078b0:	2200      	movs	r2, #0
 80078b2:	2140      	movs	r1, #64	; 0x40
 80078b4:	f000 f82e 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80078b8:	1e03      	subs	r3, r0, #0
 80078ba:	d001      	beq.n	80078c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	0018      	movs	r0, r3
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b004      	add	sp, #16
 80078c8:	bdb0      	pop	{r4, r5, r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	80002000 	.word	0x80002000

080078d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2202      	movs	r2, #2
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d103      	bne.n	80078ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2201      	movs	r2, #1
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d007      	beq.n	800790c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2101      	movs	r1, #1
 8007908:	430a      	orrs	r2, r1
 800790a:	619a      	str	r2, [r3, #24]
  }
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b002      	add	sp, #8
 8007912:	bd80      	pop	{r7, pc}

08007914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	1dfb      	adds	r3, r7, #7
 8007922:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007924:	e021      	b.n	800796a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	d01e      	beq.n	800796a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792c:	f7fe f81c 	bl	8005968 <HAL_GetTick>
 8007930:	0002      	movs	r2, r0
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d302      	bcc.n	8007942 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d113      	bne.n	800796a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	2220      	movs	r2, #32
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2241      	movs	r2, #65	; 0x41
 8007952:	2120      	movs	r1, #32
 8007954:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2242      	movs	r2, #66	; 0x42
 800795a:	2100      	movs	r1, #0
 800795c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2240      	movs	r2, #64	; 0x40
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e00f      	b.n	800798a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4013      	ands	r3, r2
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	425a      	negs	r2, r3
 800797a:	4153      	adcs	r3, r2
 800797c:	b2db      	uxtb	r3, r3
 800797e:	001a      	movs	r2, r3
 8007980:	1dfb      	adds	r3, r7, #7
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d0ce      	beq.n	8007926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	0018      	movs	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	b004      	add	sp, #16
 8007990:	bd80      	pop	{r7, pc}

08007992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800799e:	e02b      	b.n	80079f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	0018      	movs	r0, r3
 80079a8:	f000 f86e 	bl	8007a88 <I2C_IsAcknowledgeFailed>
 80079ac:	1e03      	subs	r3, r0, #0
 80079ae:	d001      	beq.n	80079b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e029      	b.n	8007a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3301      	adds	r3, #1
 80079b8:	d01e      	beq.n	80079f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ba:	f7fd ffd5 	bl	8005968 <HAL_GetTick>
 80079be:	0002      	movs	r2, r0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d302      	bcc.n	80079d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d113      	bne.n	80079f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d4:	2220      	movs	r2, #32
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2241      	movs	r2, #65	; 0x41
 80079e0:	2120      	movs	r1, #32
 80079e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2242      	movs	r2, #66	; 0x42
 80079e8:	2100      	movs	r1, #0
 80079ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2240      	movs	r2, #64	; 0x40
 80079f0:	2100      	movs	r1, #0
 80079f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e007      	b.n	8007a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2202      	movs	r2, #2
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d1cc      	bne.n	80079a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	0018      	movs	r0, r3
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	b004      	add	sp, #16
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a1c:	e028      	b.n	8007a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 f82f 	bl	8007a88 <I2C_IsAcknowledgeFailed>
 8007a2a:	1e03      	subs	r3, r0, #0
 8007a2c:	d001      	beq.n	8007a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e026      	b.n	8007a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a32:	f7fd ff99 	bl	8005968 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d113      	bne.n	8007a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2241      	movs	r2, #65	; 0x41
 8007a58:	2120      	movs	r1, #32
 8007a5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2242      	movs	r2, #66	; 0x42
 8007a60:	2100      	movs	r1, #0
 8007a62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	2100      	movs	r1, #0
 8007a6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e007      	b.n	8007a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	2220      	movs	r2, #32
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d1cf      	bne.n	8007a1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	0018      	movs	r0, r3
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b004      	add	sp, #16
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b10      	cmp	r3, #16
 8007aa0:	d151      	bne.n	8007b46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aa2:	e021      	b.n	8007ae8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	d01e      	beq.n	8007ae8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aaa:	f7fd ff5d 	bl	8005968 <HAL_GetTick>
 8007aae:	0002      	movs	r2, r0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d302      	bcc.n	8007ac0 <I2C_IsAcknowledgeFailed+0x38>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d113      	bne.n	8007ae8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2241      	movs	r2, #65	; 0x41
 8007ad0:	2120      	movs	r1, #32
 8007ad2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2242      	movs	r2, #66	; 0x42
 8007ad8:	2100      	movs	r1, #0
 8007ada:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e02f      	b.n	8007b48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2220      	movs	r2, #32
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d1d6      	bne.n	8007aa4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2210      	movs	r2, #16
 8007afc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2220      	movs	r2, #32
 8007b04:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	0018      	movs	r0, r3
 8007b0a:	f7ff fee1 	bl	80078d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	490d      	ldr	r1, [pc, #52]	; (8007b50 <I2C_IsAcknowledgeFailed+0xc8>)
 8007b1a:	400a      	ands	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	2204      	movs	r2, #4
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2241      	movs	r2, #65	; 0x41
 8007b2e:	2120      	movs	r1, #32
 8007b30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2242      	movs	r2, #66	; 0x42
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2240      	movs	r2, #64	; 0x40
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b004      	add	sp, #16
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	fe00e800 	.word	0xfe00e800

08007b54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	0008      	movs	r0, r1
 8007b5e:	0011      	movs	r1, r2
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	240a      	movs	r4, #10
 8007b64:	193b      	adds	r3, r7, r4
 8007b66:	1c02      	adds	r2, r0, #0
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	2009      	movs	r0, #9
 8007b6c:	183b      	adds	r3, r7, r0
 8007b6e:	1c0a      	adds	r2, r1, #0
 8007b70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	6a3a      	ldr	r2, [r7, #32]
 8007b7a:	0d51      	lsrs	r1, r2, #21
 8007b7c:	2280      	movs	r2, #128	; 0x80
 8007b7e:	00d2      	lsls	r2, r2, #3
 8007b80:	400a      	ands	r2, r1
 8007b82:	490e      	ldr	r1, [pc, #56]	; (8007bbc <I2C_TransferConfig+0x68>)
 8007b84:	430a      	orrs	r2, r1
 8007b86:	43d2      	mvns	r2, r2
 8007b88:	401a      	ands	r2, r3
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	193b      	adds	r3, r7, r4
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	059b      	lsls	r3, r3, #22
 8007b92:	0d9a      	lsrs	r2, r3, #22
 8007b94:	183b      	adds	r3, r7, r0
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	0418      	lsls	r0, r3, #16
 8007b9a:	23ff      	movs	r3, #255	; 0xff
 8007b9c:	041b      	lsls	r3, r3, #16
 8007b9e:	4003      	ands	r3, r0
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b005      	add	sp, #20
 8007bb8:	bd90      	pop	{r4, r7, pc}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	03ff63ff 	.word	0x03ff63ff

08007bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2241      	movs	r2, #65	; 0x41
 8007bce:	5c9b      	ldrb	r3, [r3, r2]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d138      	bne.n	8007c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2240      	movs	r2, #64	; 0x40
 8007bda:	5c9b      	ldrb	r3, [r3, r2]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e032      	b.n	8007c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	2101      	movs	r1, #1
 8007bea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2241      	movs	r2, #65	; 0x41
 8007bf0:	2124      	movs	r1, #36	; 0x24
 8007bf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2101      	movs	r1, #1
 8007c00:	438a      	bics	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4911      	ldr	r1, [pc, #68]	; (8007c54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007c10:	400a      	ands	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	430a      	orrs	r2, r1
 8007c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2241      	movs	r2, #65	; 0x41
 8007c38:	2120      	movs	r1, #32
 8007c3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2240      	movs	r2, #64	; 0x40
 8007c40:	2100      	movs	r1, #0
 8007c42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	ffffefff 	.word	0xffffefff

08007c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2241      	movs	r2, #65	; 0x41
 8007c66:	5c9b      	ldrb	r3, [r3, r2]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d139      	bne.n	8007ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	; 0x40
 8007c72:	5c9b      	ldrb	r3, [r3, r2]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e033      	b.n	8007ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2240      	movs	r2, #64	; 0x40
 8007c80:	2101      	movs	r1, #1
 8007c82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2241      	movs	r2, #65	; 0x41
 8007c88:	2124      	movs	r1, #36	; 0x24
 8007c8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2101      	movs	r1, #1
 8007c98:	438a      	bics	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a11      	ldr	r2, [pc, #68]	; (8007cec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2101      	movs	r1, #1
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2241      	movs	r2, #65	; 0x41
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2240      	movs	r2, #64	; 0x40
 8007cda:	2100      	movs	r1, #0
 8007cdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b004      	add	sp, #16
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	fffff0ff 	.word	0xfffff0ff

08007cf0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	0049      	lsls	r1, r1, #1
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]
}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40007000 	.word	0x40007000

08007d0c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	000a      	movs	r2, r1
 8007d16:	1cfb      	adds	r3, r7, #3
 8007d18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d009      	beq.n	8007d34 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <HAL_PWR_EnterSTOPMode+0x68>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2207      	movs	r2, #7
 8007d26:	4393      	bics	r3, r2
 8007d28:	001a      	movs	r2, r3
 8007d2a:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <HAL_PWR_EnterSTOPMode+0x68>)
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e005      	b.n	8007d40 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <HAL_PWR_EnterSTOPMode+0x68>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <HAL_PWR_EnterSTOPMode+0x68>)
 8007d3a:	2107      	movs	r1, #7
 8007d3c:	438a      	bics	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d40:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <HAL_PWR_EnterSTOPMode+0x6c>)
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <HAL_PWR_EnterSTOPMode+0x6c>)
 8007d46:	2104      	movs	r1, #4
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007d4c:	1cfb      	adds	r3, r7, #3
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007d54:	bf30      	wfi
 8007d56:	e002      	b.n	8007d5e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007d58:	bf40      	sev
    __WFE();
 8007d5a:	bf20      	wfe
    __WFE();
 8007d5c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <HAL_PWR_EnterSTOPMode+0x6c>)
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <HAL_PWR_EnterSTOPMode+0x6c>)
 8007d64:	2104      	movs	r1, #4
 8007d66:	438a      	bics	r2, r1
 8007d68:	611a      	str	r2, [r3, #16]
}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	b002      	add	sp, #8
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	40007000 	.word	0x40007000
 8007d78:	e000ed00 	.word	0xe000ed00

08007d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007d84:	4b19      	ldr	r3, [pc, #100]	; (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	4b17      	ldr	r3, [pc, #92]	; (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d11f      	bne.n	8007de0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8007da0:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	0013      	movs	r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	189b      	adds	r3, r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4912      	ldr	r1, [pc, #72]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007dae:	0018      	movs	r0, r3
 8007db0:	f7f8 f9b0 	bl	8000114 <__udivsi3>
 8007db4:	0003      	movs	r3, r0
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dba:	e008      	b.n	8007dce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e009      	b.n	8007de2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dce:	4b07      	ldr	r3, [pc, #28]	; (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	2380      	movs	r3, #128	; 0x80
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	401a      	ands	r2, r3
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d0ed      	beq.n	8007dbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	40007000 	.word	0x40007000
 8007df0:	fffff9ff 	.word	0xfffff9ff
 8007df4:	20000080 	.word	0x20000080
 8007df8:	000f4240 	.word	0x000f4240

08007dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e2f9      	b.n	8008402 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2201      	movs	r2, #1
 8007e14:	4013      	ands	r3, r2
 8007e16:	d100      	bne.n	8007e1a <HAL_RCC_OscConfig+0x1e>
 8007e18:	e07c      	b.n	8007f14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e1a:	4bc3      	ldr	r3, [pc, #780]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2238      	movs	r2, #56	; 0x38
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e24:	4bc0      	ldr	r3, [pc, #768]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d102      	bne.n	8007e3a <HAL_RCC_OscConfig+0x3e>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d002      	beq.n	8007e40 <HAL_RCC_OscConfig+0x44>
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d10b      	bne.n	8007e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e40:	4bb9      	ldr	r3, [pc, #740]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d062      	beq.n	8007f12 <HAL_RCC_OscConfig+0x116>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d15e      	bne.n	8007f12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e2d4      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	2380      	movs	r3, #128	; 0x80
 8007e5e:	025b      	lsls	r3, r3, #9
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d107      	bne.n	8007e74 <HAL_RCC_OscConfig+0x78>
 8007e64:	4bb0      	ldr	r3, [pc, #704]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4baf      	ldr	r3, [pc, #700]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	0249      	lsls	r1, r1, #9
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	e020      	b.n	8007eb6 <HAL_RCC_OscConfig+0xba>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	23a0      	movs	r3, #160	; 0xa0
 8007e7a:	02db      	lsls	r3, r3, #11
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d10e      	bne.n	8007e9e <HAL_RCC_OscConfig+0xa2>
 8007e80:	4ba9      	ldr	r3, [pc, #676]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	4ba8      	ldr	r3, [pc, #672]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e86:	2180      	movs	r1, #128	; 0x80
 8007e88:	02c9      	lsls	r1, r1, #11
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	4ba6      	ldr	r3, [pc, #664]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4ba5      	ldr	r3, [pc, #660]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007e94:	2180      	movs	r1, #128	; 0x80
 8007e96:	0249      	lsls	r1, r1, #9
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e00b      	b.n	8007eb6 <HAL_RCC_OscConfig+0xba>
 8007e9e:	4ba2      	ldr	r3, [pc, #648]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4ba1      	ldr	r3, [pc, #644]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007ea4:	49a1      	ldr	r1, [pc, #644]	; (800812c <HAL_RCC_OscConfig+0x330>)
 8007ea6:	400a      	ands	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	4b9f      	ldr	r3, [pc, #636]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b9e      	ldr	r3, [pc, #632]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007eb0:	499f      	ldr	r1, [pc, #636]	; (8008130 <HAL_RCC_OscConfig+0x334>)
 8007eb2:	400a      	ands	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d014      	beq.n	8007ee8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebe:	f7fd fd53 	bl	8005968 <HAL_GetTick>
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec8:	f7fd fd4e 	bl	8005968 <HAL_GetTick>
 8007ecc:	0002      	movs	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	; 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e293      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eda:	4b93      	ldr	r3, [pc, #588]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	2380      	movs	r3, #128	; 0x80
 8007ee0:	029b      	lsls	r3, r3, #10
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0xcc>
 8007ee6:	e015      	b.n	8007f14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fd fd3e 	bl	8005968 <HAL_GetTick>
 8007eec:	0003      	movs	r3, r0
 8007eee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ef2:	f7fd fd39 	bl	8005968 <HAL_GetTick>
 8007ef6:	0002      	movs	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b64      	cmp	r3, #100	; 0x64
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e27e      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f04:	4b88      	ldr	r3, [pc, #544]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0xf6>
 8007f10:	e000      	b.n	8007f14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	d100      	bne.n	8007f20 <HAL_RCC_OscConfig+0x124>
 8007f1e:	e099      	b.n	8008054 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f20:	4b81      	ldr	r3, [pc, #516]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	2238      	movs	r2, #56	; 0x38
 8007f26:	4013      	ands	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f2a:	4b7f      	ldr	r3, [pc, #508]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2203      	movs	r2, #3
 8007f30:	4013      	ands	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d102      	bne.n	8007f40 <HAL_RCC_OscConfig+0x144>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d002      	beq.n	8007f46 <HAL_RCC_OscConfig+0x14a>
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d135      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f46:	4b78      	ldr	r3, [pc, #480]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	2380      	movs	r3, #128	; 0x80
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	4013      	ands	r3, r2
 8007f50:	d005      	beq.n	8007f5e <HAL_RCC_OscConfig+0x162>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e251      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5e:	4b72      	ldr	r3, [pc, #456]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4a74      	ldr	r2, [pc, #464]	; (8008134 <HAL_RCC_OscConfig+0x338>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	0019      	movs	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	021a      	lsls	r2, r3, #8
 8007f6e:	4b6e      	ldr	r3, [pc, #440]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d112      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f7a:	4b6b      	ldr	r3, [pc, #428]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6e      	ldr	r2, [pc, #440]	; (8008138 <HAL_RCC_OscConfig+0x33c>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	0019      	movs	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691a      	ldr	r2, [r3, #16]
 8007f88:	4b67      	ldr	r3, [pc, #412]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f8e:	4b66      	ldr	r3, [pc, #408]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	0adb      	lsrs	r3, r3, #11
 8007f94:	2207      	movs	r2, #7
 8007f96:	4013      	ands	r3, r2
 8007f98:	4a68      	ldr	r2, [pc, #416]	; (800813c <HAL_RCC_OscConfig+0x340>)
 8007f9a:	40da      	lsrs	r2, r3
 8007f9c:	4b68      	ldr	r3, [pc, #416]	; (8008140 <HAL_RCC_OscConfig+0x344>)
 8007f9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fa0:	4b68      	ldr	r3, [pc, #416]	; (8008144 <HAL_RCC_OscConfig+0x348>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f7fd fc83 	bl	80058b0 <HAL_InitTick>
 8007faa:	1e03      	subs	r3, r0, #0
 8007fac:	d051      	beq.n	8008052 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e227      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d030      	beq.n	800801c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fba:	4b5b      	ldr	r3, [pc, #364]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a5e      	ldr	r2, [pc, #376]	; (8008138 <HAL_RCC_OscConfig+0x33c>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	4b57      	ldr	r3, [pc, #348]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007fce:	4b56      	ldr	r3, [pc, #344]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b55      	ldr	r3, [pc, #340]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007fd4:	2180      	movs	r1, #128	; 0x80
 8007fd6:	0049      	lsls	r1, r1, #1
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fd fcc4 	bl	8005968 <HAL_GetTick>
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fe6:	f7fd fcbf 	bl	8005968 <HAL_GetTick>
 8007fea:	0002      	movs	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e204      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ff8:	4b4b      	ldr	r3, [pc, #300]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4013      	ands	r3, r2
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008004:	4b48      	ldr	r3, [pc, #288]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a4a      	ldr	r2, [pc, #296]	; (8008134 <HAL_RCC_OscConfig+0x338>)
 800800a:	4013      	ands	r3, r2
 800800c:	0019      	movs	r1, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	021a      	lsls	r2, r3, #8
 8008014:	4b44      	ldr	r3, [pc, #272]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	e01b      	b.n	8008054 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800801c:	4b42      	ldr	r3, [pc, #264]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	4b41      	ldr	r3, [pc, #260]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008022:	4949      	ldr	r1, [pc, #292]	; (8008148 <HAL_RCC_OscConfig+0x34c>)
 8008024:	400a      	ands	r2, r1
 8008026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fd fc9e 	bl	8005968 <HAL_GetTick>
 800802c:	0003      	movs	r3, r0
 800802e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008032:	f7fd fc99 	bl	8005968 <HAL_GetTick>
 8008036:	0002      	movs	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e1de      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008044:	4b38      	ldr	r3, [pc, #224]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4013      	ands	r3, r2
 800804e:	d1f0      	bne.n	8008032 <HAL_RCC_OscConfig+0x236>
 8008050:	e000      	b.n	8008054 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008052:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2208      	movs	r2, #8
 800805a:	4013      	ands	r3, r2
 800805c:	d047      	beq.n	80080ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800805e:	4b32      	ldr	r3, [pc, #200]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	2238      	movs	r2, #56	; 0x38
 8008064:	4013      	ands	r3, r2
 8008066:	2b18      	cmp	r3, #24
 8008068:	d10a      	bne.n	8008080 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800806a:	4b2f      	ldr	r3, [pc, #188]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 800806c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806e:	2202      	movs	r2, #2
 8008070:	4013      	ands	r3, r2
 8008072:	d03c      	beq.n	80080ee <HAL_RCC_OscConfig+0x2f2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d138      	bne.n	80080ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e1c0      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d019      	beq.n	80080bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008088:	4b27      	ldr	r3, [pc, #156]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 800808a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800808c:	4b26      	ldr	r3, [pc, #152]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 800808e:	2101      	movs	r1, #1
 8008090:	430a      	orrs	r2, r1
 8008092:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008094:	f7fd fc68 	bl	8005968 <HAL_GetTick>
 8008098:	0003      	movs	r3, r0
 800809a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809e:	f7fd fc63 	bl	8005968 <HAL_GetTick>
 80080a2:	0002      	movs	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e1a8      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080b0:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 80080b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b4:	2202      	movs	r2, #2
 80080b6:	4013      	ands	r3, r2
 80080b8:	d0f1      	beq.n	800809e <HAL_RCC_OscConfig+0x2a2>
 80080ba:	e018      	b.n	80080ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80080bc:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 80080be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c0:	4b19      	ldr	r3, [pc, #100]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 80080c2:	2101      	movs	r1, #1
 80080c4:	438a      	bics	r2, r1
 80080c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fd fc4e 	bl	8005968 <HAL_GetTick>
 80080cc:	0003      	movs	r3, r0
 80080ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d2:	f7fd fc49 	bl	8005968 <HAL_GetTick>
 80080d6:	0002      	movs	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e18e      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 80080e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e8:	2202      	movs	r2, #2
 80080ea:	4013      	ands	r3, r2
 80080ec:	d1f1      	bne.n	80080d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2204      	movs	r2, #4
 80080f4:	4013      	ands	r3, r2
 80080f6:	d100      	bne.n	80080fa <HAL_RCC_OscConfig+0x2fe>
 80080f8:	e0c6      	b.n	8008288 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080fa:	231f      	movs	r3, #31
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2238      	movs	r2, #56	; 0x38
 8008108:	4013      	ands	r3, r2
 800810a:	2b20      	cmp	r3, #32
 800810c:	d11e      	bne.n	800814c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCC_OscConfig+0x32c>)
 8008110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008112:	2202      	movs	r2, #2
 8008114:	4013      	ands	r3, r2
 8008116:	d100      	bne.n	800811a <HAL_RCC_OscConfig+0x31e>
 8008118:	e0b6      	b.n	8008288 <HAL_RCC_OscConfig+0x48c>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d000      	beq.n	8008124 <HAL_RCC_OscConfig+0x328>
 8008122:	e0b1      	b.n	8008288 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e16c      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
 8008128:	40021000 	.word	0x40021000
 800812c:	fffeffff 	.word	0xfffeffff
 8008130:	fffbffff 	.word	0xfffbffff
 8008134:	ffff80ff 	.word	0xffff80ff
 8008138:	ffffc7ff 	.word	0xffffc7ff
 800813c:	00f42400 	.word	0x00f42400
 8008140:	20000080 	.word	0x20000080
 8008144:	20000020 	.word	0x20000020
 8008148:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800814c:	4baf      	ldr	r3, [pc, #700]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800814e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008150:	2380      	movs	r3, #128	; 0x80
 8008152:	055b      	lsls	r3, r3, #21
 8008154:	4013      	ands	r3, r2
 8008156:	d101      	bne.n	800815c <HAL_RCC_OscConfig+0x360>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <HAL_RCC_OscConfig+0x362>
 800815c:	2300      	movs	r3, #0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008162:	4baa      	ldr	r3, [pc, #680]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008166:	4ba9      	ldr	r3, [pc, #676]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	0549      	lsls	r1, r1, #21
 800816c:	430a      	orrs	r2, r1
 800816e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008170:	4ba6      	ldr	r3, [pc, #664]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008174:	2380      	movs	r3, #128	; 0x80
 8008176:	055b      	lsls	r3, r3, #21
 8008178:	4013      	ands	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800817e:	231f      	movs	r3, #31
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008186:	4ba2      	ldr	r3, [pc, #648]	; (8008410 <HAL_RCC_OscConfig+0x614>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	2380      	movs	r3, #128	; 0x80
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4013      	ands	r3, r2
 8008190:	d11a      	bne.n	80081c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008192:	4b9f      	ldr	r3, [pc, #636]	; (8008410 <HAL_RCC_OscConfig+0x614>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4b9e      	ldr	r3, [pc, #632]	; (8008410 <HAL_RCC_OscConfig+0x614>)
 8008198:	2180      	movs	r1, #128	; 0x80
 800819a:	0049      	lsls	r1, r1, #1
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081a0:	f7fd fbe2 	bl	8005968 <HAL_GetTick>
 80081a4:	0003      	movs	r3, r0
 80081a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081aa:	f7fd fbdd 	bl	8005968 <HAL_GetTick>
 80081ae:	0002      	movs	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e122      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081bc:	4b94      	ldr	r3, [pc, #592]	; (8008410 <HAL_RCC_OscConfig+0x614>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	4013      	ands	r3, r2
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d106      	bne.n	80081de <HAL_RCC_OscConfig+0x3e2>
 80081d0:	4b8e      	ldr	r3, [pc, #568]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081d4:	4b8d      	ldr	r3, [pc, #564]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081d6:	2101      	movs	r1, #1
 80081d8:	430a      	orrs	r2, r1
 80081da:	65da      	str	r2, [r3, #92]	; 0x5c
 80081dc:	e01c      	b.n	8008218 <HAL_RCC_OscConfig+0x41c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	d10c      	bne.n	8008200 <HAL_RCC_OscConfig+0x404>
 80081e6:	4b89      	ldr	r3, [pc, #548]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081ea:	4b88      	ldr	r3, [pc, #544]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081ec:	2104      	movs	r1, #4
 80081ee:	430a      	orrs	r2, r1
 80081f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80081f2:	4b86      	ldr	r3, [pc, #536]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081f6:	4b85      	ldr	r3, [pc, #532]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80081f8:	2101      	movs	r1, #1
 80081fa:	430a      	orrs	r2, r1
 80081fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80081fe:	e00b      	b.n	8008218 <HAL_RCC_OscConfig+0x41c>
 8008200:	4b82      	ldr	r3, [pc, #520]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008202:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008204:	4b81      	ldr	r3, [pc, #516]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008206:	2101      	movs	r1, #1
 8008208:	438a      	bics	r2, r1
 800820a:	65da      	str	r2, [r3, #92]	; 0x5c
 800820c:	4b7f      	ldr	r3, [pc, #508]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800820e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008210:	4b7e      	ldr	r3, [pc, #504]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008212:	2104      	movs	r1, #4
 8008214:	438a      	bics	r2, r1
 8008216:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d014      	beq.n	800824a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fd fba2 	bl	8005968 <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008228:	e009      	b.n	800823e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822a:	f7fd fb9d 	bl	8005968 <HAL_GetTick>
 800822e:	0002      	movs	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	4a77      	ldr	r2, [pc, #476]	; (8008414 <HAL_RCC_OscConfig+0x618>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e0e1      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800823e:	4b73      	ldr	r3, [pc, #460]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008242:	2202      	movs	r2, #2
 8008244:	4013      	ands	r3, r2
 8008246:	d0f0      	beq.n	800822a <HAL_RCC_OscConfig+0x42e>
 8008248:	e013      	b.n	8008272 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800824a:	f7fd fb8d 	bl	8005968 <HAL_GetTick>
 800824e:	0003      	movs	r3, r0
 8008250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008252:	e009      	b.n	8008268 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008254:	f7fd fb88 	bl	8005968 <HAL_GetTick>
 8008258:	0002      	movs	r2, r0
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	4a6d      	ldr	r2, [pc, #436]	; (8008414 <HAL_RCC_OscConfig+0x618>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e0cc      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008268:	4b68      	ldr	r3, [pc, #416]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800826a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826c:	2202      	movs	r2, #2
 800826e:	4013      	ands	r3, r2
 8008270:	d1f0      	bne.n	8008254 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008272:	231f      	movs	r3, #31
 8008274:	18fb      	adds	r3, r7, r3
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d105      	bne.n	8008288 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800827c:	4b63      	ldr	r3, [pc, #396]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800827e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008280:	4b62      	ldr	r3, [pc, #392]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008282:	4965      	ldr	r1, [pc, #404]	; (8008418 <HAL_RCC_OscConfig+0x61c>)
 8008284:	400a      	ands	r2, r1
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d100      	bne.n	8008292 <HAL_RCC_OscConfig+0x496>
 8008290:	e0b6      	b.n	8008400 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008292:	4b5e      	ldr	r3, [pc, #376]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2238      	movs	r2, #56	; 0x38
 8008298:	4013      	ands	r3, r2
 800829a:	2b10      	cmp	r3, #16
 800829c:	d100      	bne.n	80082a0 <HAL_RCC_OscConfig+0x4a4>
 800829e:	e07e      	b.n	800839e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d153      	bne.n	8008350 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a8:	4b58      	ldr	r3, [pc, #352]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b57      	ldr	r3, [pc, #348]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80082ae:	495b      	ldr	r1, [pc, #364]	; (800841c <HAL_RCC_OscConfig+0x620>)
 80082b0:	400a      	ands	r2, r1
 80082b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b4:	f7fd fb58 	bl	8005968 <HAL_GetTick>
 80082b8:	0003      	movs	r3, r0
 80082ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082be:	f7fd fb53 	bl	8005968 <HAL_GetTick>
 80082c2:	0002      	movs	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e098      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d0:	4b4e      	ldr	r3, [pc, #312]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	049b      	lsls	r3, r3, #18
 80082d8:	4013      	ands	r3, r2
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082dc:	4b4b      	ldr	r3, [pc, #300]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4a4f      	ldr	r2, [pc, #316]	; (8008420 <HAL_RCC_OscConfig+0x624>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	0019      	movs	r1, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	431a      	orrs	r2, r3
 8008304:	4b41      	ldr	r3, [pc, #260]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008306:	430a      	orrs	r2, r1
 8008308:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800830a:	4b40      	ldr	r3, [pc, #256]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b3f      	ldr	r3, [pc, #252]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	0449      	lsls	r1, r1, #17
 8008314:	430a      	orrs	r2, r1
 8008316:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008318:	4b3c      	ldr	r3, [pc, #240]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	4b3b      	ldr	r3, [pc, #236]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800831e:	2180      	movs	r1, #128	; 0x80
 8008320:	0549      	lsls	r1, r1, #21
 8008322:	430a      	orrs	r2, r1
 8008324:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008326:	f7fd fb1f 	bl	8005968 <HAL_GetTick>
 800832a:	0003      	movs	r3, r0
 800832c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008330:	f7fd fb1a 	bl	8005968 <HAL_GetTick>
 8008334:	0002      	movs	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e05f      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	2380      	movs	r3, #128	; 0x80
 8008348:	049b      	lsls	r3, r3, #18
 800834a:	4013      	ands	r3, r2
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0x534>
 800834e:	e057      	b.n	8008400 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008350:	4b2e      	ldr	r3, [pc, #184]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4b2d      	ldr	r3, [pc, #180]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008356:	4931      	ldr	r1, [pc, #196]	; (800841c <HAL_RCC_OscConfig+0x620>)
 8008358:	400a      	ands	r2, r1
 800835a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800835c:	4b2b      	ldr	r3, [pc, #172]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	4b2a      	ldr	r3, [pc, #168]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008362:	2103      	movs	r1, #3
 8008364:	438a      	bics	r2, r1
 8008366:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008368:	4b28      	ldr	r3, [pc, #160]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	4b27      	ldr	r3, [pc, #156]	; (800840c <HAL_RCC_OscConfig+0x610>)
 800836e:	492d      	ldr	r1, [pc, #180]	; (8008424 <HAL_RCC_OscConfig+0x628>)
 8008370:	400a      	ands	r2, r1
 8008372:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fd faf8 	bl	8005968 <HAL_GetTick>
 8008378:	0003      	movs	r3, r0
 800837a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837e:	f7fd faf3 	bl	8005968 <HAL_GetTick>
 8008382:	0002      	movs	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e038      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008390:	4b1e      	ldr	r3, [pc, #120]	; (800840c <HAL_RCC_OscConfig+0x610>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	049b      	lsls	r3, r3, #18
 8008398:	4013      	ands	r3, r2
 800839a:	d1f0      	bne.n	800837e <HAL_RCC_OscConfig+0x582>
 800839c:	e030      	b.n	8008400 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e02b      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083aa:	4b18      	ldr	r3, [pc, #96]	; (800840c <HAL_RCC_OscConfig+0x610>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2203      	movs	r2, #3
 80083b4:	401a      	ands	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d11e      	bne.n	80083fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2270      	movs	r2, #112	; 0x70
 80083c2:	401a      	ands	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d117      	bne.n	80083fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	23fe      	movs	r3, #254	; 0xfe
 80083d0:	01db      	lsls	r3, r3, #7
 80083d2:	401a      	ands	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083da:	429a      	cmp	r2, r3
 80083dc:	d10e      	bne.n	80083fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	23f8      	movs	r3, #248	; 0xf8
 80083e2:	039b      	lsls	r3, r3, #14
 80083e4:	401a      	ands	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d106      	bne.n	80083fc <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	0f5b      	lsrs	r3, r3, #29
 80083f2:	075a      	lsls	r2, r3, #29
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	0018      	movs	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	b008      	add	sp, #32
 8008408:	bd80      	pop	{r7, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	40021000 	.word	0x40021000
 8008410:	40007000 	.word	0x40007000
 8008414:	00001388 	.word	0x00001388
 8008418:	efffffff 	.word	0xefffffff
 800841c:	feffffff 	.word	0xfeffffff
 8008420:	1fc1808c 	.word	0x1fc1808c
 8008424:	effeffff 	.word	0xeffeffff

08008428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0e9      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800843c:	4b76      	ldr	r3, [pc, #472]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2207      	movs	r2, #7
 8008442:	4013      	ands	r3, r2
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d91e      	bls.n	8008488 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844a:	4b73      	ldr	r3, [pc, #460]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2207      	movs	r2, #7
 8008450:	4393      	bics	r3, r2
 8008452:	0019      	movs	r1, r3
 8008454:	4b70      	ldr	r3, [pc, #448]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800845c:	f7fd fa84 	bl	8005968 <HAL_GetTick>
 8008460:	0003      	movs	r3, r0
 8008462:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008464:	e009      	b.n	800847a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008466:	f7fd fa7f 	bl	8005968 <HAL_GetTick>
 800846a:	0002      	movs	r2, r0
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	4a6a      	ldr	r2, [pc, #424]	; (800861c <HAL_RCC_ClockConfig+0x1f4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0ca      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800847a:	4b67      	ldr	r3, [pc, #412]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2207      	movs	r2, #7
 8008480:	4013      	ands	r3, r2
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d1ee      	bne.n	8008466 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2202      	movs	r2, #2
 800848e:	4013      	ands	r3, r2
 8008490:	d015      	beq.n	80084be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2204      	movs	r2, #4
 8008498:	4013      	ands	r3, r2
 800849a:	d006      	beq.n	80084aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800849c:	4b60      	ldr	r3, [pc, #384]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	4b5f      	ldr	r3, [pc, #380]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80084a2:	21e0      	movs	r1, #224	; 0xe0
 80084a4:	01c9      	lsls	r1, r1, #7
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084aa:	4b5d      	ldr	r3, [pc, #372]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	4a5d      	ldr	r2, [pc, #372]	; (8008624 <HAL_RCC_ClockConfig+0x1fc>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	0019      	movs	r1, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	4b59      	ldr	r3, [pc, #356]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	4013      	ands	r3, r2
 80084c6:	d057      	beq.n	8008578 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d107      	bne.n	80084e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084d0:	4b53      	ldr	r3, [pc, #332]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	029b      	lsls	r3, r3, #10
 80084d8:	4013      	ands	r3, r2
 80084da:	d12b      	bne.n	8008534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e097      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d107      	bne.n	80084f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084e8:	4b4d      	ldr	r3, [pc, #308]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	049b      	lsls	r3, r3, #18
 80084f0:	4013      	ands	r3, r2
 80084f2:	d11f      	bne.n	8008534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e08b      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d107      	bne.n	8008510 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008500:	4b47      	ldr	r3, [pc, #284]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	4013      	ands	r3, r2
 800850a:	d113      	bne.n	8008534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e07f      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d106      	bne.n	8008526 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008518:	4b41      	ldr	r3, [pc, #260]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 800851a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851c:	2202      	movs	r2, #2
 800851e:	4013      	ands	r3, r2
 8008520:	d108      	bne.n	8008534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e074      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008526:	4b3e      	ldr	r3, [pc, #248]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 8008528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852a:	2202      	movs	r2, #2
 800852c:	4013      	ands	r3, r2
 800852e:	d101      	bne.n	8008534 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e06d      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008534:	4b3a      	ldr	r3, [pc, #232]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2207      	movs	r2, #7
 800853a:	4393      	bics	r3, r2
 800853c:	0019      	movs	r1, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4b37      	ldr	r3, [pc, #220]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008548:	f7fd fa0e 	bl	8005968 <HAL_GetTick>
 800854c:	0003      	movs	r3, r0
 800854e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008550:	e009      	b.n	8008566 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008552:	f7fd fa09 	bl	8005968 <HAL_GetTick>
 8008556:	0002      	movs	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	4a2f      	ldr	r2, [pc, #188]	; (800861c <HAL_RCC_ClockConfig+0x1f4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e054      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008566:	4b2e      	ldr	r3, [pc, #184]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2238      	movs	r2, #56	; 0x38
 800856c:	401a      	ands	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	429a      	cmp	r2, r3
 8008576:	d1ec      	bne.n	8008552 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008578:	4b27      	ldr	r3, [pc, #156]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2207      	movs	r2, #7
 800857e:	4013      	ands	r3, r2
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d21e      	bcs.n	80085c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008586:	4b24      	ldr	r3, [pc, #144]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2207      	movs	r2, #7
 800858c:	4393      	bics	r3, r2
 800858e:	0019      	movs	r1, r3
 8008590:	4b21      	ldr	r3, [pc, #132]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008598:	f7fd f9e6 	bl	8005968 <HAL_GetTick>
 800859c:	0003      	movs	r3, r0
 800859e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085a0:	e009      	b.n	80085b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a2:	f7fd f9e1 	bl	8005968 <HAL_GetTick>
 80085a6:	0002      	movs	r2, r0
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	4a1b      	ldr	r2, [pc, #108]	; (800861c <HAL_RCC_ClockConfig+0x1f4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e02c      	b.n	8008610 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085b6:	4b18      	ldr	r3, [pc, #96]	; (8008618 <HAL_RCC_ClockConfig+0x1f0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2207      	movs	r2, #7
 80085bc:	4013      	ands	r3, r2
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d1ee      	bne.n	80085a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2204      	movs	r2, #4
 80085ca:	4013      	ands	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80085ce:	4b14      	ldr	r3, [pc, #80]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <HAL_RCC_ClockConfig+0x200>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	0019      	movs	r1, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	4b10      	ldr	r3, [pc, #64]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80085de:	430a      	orrs	r2, r1
 80085e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80085e2:	f000 f829 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 80085e6:	0001      	movs	r1, r0
 80085e8:	4b0d      	ldr	r3, [pc, #52]	; (8008620 <HAL_RCC_ClockConfig+0x1f8>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	0a1b      	lsrs	r3, r3, #8
 80085ee:	220f      	movs	r2, #15
 80085f0:	401a      	ands	r2, r3
 80085f2:	4b0e      	ldr	r3, [pc, #56]	; (800862c <HAL_RCC_ClockConfig+0x204>)
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	58d3      	ldr	r3, [r2, r3]
 80085f8:	221f      	movs	r2, #31
 80085fa:	4013      	ands	r3, r2
 80085fc:	000a      	movs	r2, r1
 80085fe:	40da      	lsrs	r2, r3
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <HAL_RCC_ClockConfig+0x208>)
 8008602:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008604:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <HAL_RCC_ClockConfig+0x20c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	0018      	movs	r0, r3
 800860a:	f7fd f951 	bl	80058b0 <HAL_InitTick>
 800860e:	0003      	movs	r3, r0
}
 8008610:	0018      	movs	r0, r3
 8008612:	46bd      	mov	sp, r7
 8008614:	b004      	add	sp, #16
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40022000 	.word	0x40022000
 800861c:	00001388 	.word	0x00001388
 8008620:	40021000 	.word	0x40021000
 8008624:	fffff0ff 	.word	0xfffff0ff
 8008628:	ffff8fff 	.word	0xffff8fff
 800862c:	08015f70 	.word	0x08015f70
 8008630:	20000080 	.word	0x20000080
 8008634:	20000020 	.word	0x20000020

08008638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800863e:	4b3c      	ldr	r3, [pc, #240]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2238      	movs	r2, #56	; 0x38
 8008644:	4013      	ands	r3, r2
 8008646:	d10f      	bne.n	8008668 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008648:	4b39      	ldr	r3, [pc, #228]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	0adb      	lsrs	r3, r3, #11
 800864e:	2207      	movs	r2, #7
 8008650:	4013      	ands	r3, r2
 8008652:	2201      	movs	r2, #1
 8008654:	409a      	lsls	r2, r3
 8008656:	0013      	movs	r3, r2
 8008658:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	4835      	ldr	r0, [pc, #212]	; (8008734 <HAL_RCC_GetSysClockFreq+0xfc>)
 800865e:	f7f7 fd59 	bl	8000114 <__udivsi3>
 8008662:	0003      	movs	r3, r0
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	e05d      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008668:	4b31      	ldr	r3, [pc, #196]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2238      	movs	r2, #56	; 0x38
 800866e:	4013      	ands	r3, r2
 8008670:	2b08      	cmp	r3, #8
 8008672:	d102      	bne.n	800867a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008674:	4b30      	ldr	r3, [pc, #192]	; (8008738 <HAL_RCC_GetSysClockFreq+0x100>)
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	e054      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800867a:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2238      	movs	r2, #56	; 0x38
 8008680:	4013      	ands	r3, r2
 8008682:	2b10      	cmp	r3, #16
 8008684:	d138      	bne.n	80086f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2203      	movs	r2, #3
 800868c:	4013      	ands	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008690:	4b27      	ldr	r3, [pc, #156]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	091b      	lsrs	r3, r3, #4
 8008696:	2207      	movs	r2, #7
 8008698:	4013      	ands	r3, r2
 800869a:	3301      	adds	r3, #1
 800869c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d10d      	bne.n	80086c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	4824      	ldr	r0, [pc, #144]	; (8008738 <HAL_RCC_GetSysClockFreq+0x100>)
 80086a8:	f7f7 fd34 	bl	8000114 <__udivsi3>
 80086ac:	0003      	movs	r3, r0
 80086ae:	0019      	movs	r1, r3
 80086b0:	4b1f      	ldr	r3, [pc, #124]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	0a1b      	lsrs	r3, r3, #8
 80086b6:	227f      	movs	r2, #127	; 0x7f
 80086b8:	4013      	ands	r3, r2
 80086ba:	434b      	muls	r3, r1
 80086bc:	617b      	str	r3, [r7, #20]
        break;
 80086be:	e00d      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	481c      	ldr	r0, [pc, #112]	; (8008734 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086c4:	f7f7 fd26 	bl	8000114 <__udivsi3>
 80086c8:	0003      	movs	r3, r0
 80086ca:	0019      	movs	r1, r3
 80086cc:	4b18      	ldr	r3, [pc, #96]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	0a1b      	lsrs	r3, r3, #8
 80086d2:	227f      	movs	r2, #127	; 0x7f
 80086d4:	4013      	ands	r3, r2
 80086d6:	434b      	muls	r3, r1
 80086d8:	617b      	str	r3, [r7, #20]
        break;
 80086da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80086dc:	4b14      	ldr	r3, [pc, #80]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	0f5b      	lsrs	r3, r3, #29
 80086e2:	2207      	movs	r2, #7
 80086e4:	4013      	ands	r3, r2
 80086e6:	3301      	adds	r3, #1
 80086e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	6978      	ldr	r0, [r7, #20]
 80086ee:	f7f7 fd11 	bl	8000114 <__udivsi3>
 80086f2:	0003      	movs	r3, r0
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	e015      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2238      	movs	r2, #56	; 0x38
 80086fe:	4013      	ands	r3, r2
 8008700:	2b20      	cmp	r3, #32
 8008702:	d103      	bne.n	800870c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008704:	2380      	movs	r3, #128	; 0x80
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	e00b      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800870c:	4b08      	ldr	r3, [pc, #32]	; (8008730 <HAL_RCC_GetSysClockFreq+0xf8>)
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2238      	movs	r2, #56	; 0x38
 8008712:	4013      	ands	r3, r2
 8008714:	2b18      	cmp	r3, #24
 8008716:	d103      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008718:	23fa      	movs	r3, #250	; 0xfa
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e001      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008724:	693b      	ldr	r3, [r7, #16]
}
 8008726:	0018      	movs	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	b006      	add	sp, #24
 800872c:	bd80      	pop	{r7, pc}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	40021000 	.word	0x40021000
 8008734:	00f42400 	.word	0x00f42400
 8008738:	007a1200 	.word	0x007a1200

0800873c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008744:	2313      	movs	r3, #19
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800874c:	2312      	movs	r3, #18
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	2380      	movs	r3, #128	; 0x80
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	4013      	ands	r3, r2
 800875e:	d100      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008760:	e0a3      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008762:	2011      	movs	r0, #17
 8008764:	183b      	adds	r3, r7, r0
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800876a:	4b86      	ldr	r3, [pc, #536]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800876c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800876e:	2380      	movs	r3, #128	; 0x80
 8008770:	055b      	lsls	r3, r3, #21
 8008772:	4013      	ands	r3, r2
 8008774:	d110      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008776:	4b83      	ldr	r3, [pc, #524]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800877a:	4b82      	ldr	r3, [pc, #520]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800877c:	2180      	movs	r1, #128	; 0x80
 800877e:	0549      	lsls	r1, r1, #21
 8008780:	430a      	orrs	r2, r1
 8008782:	63da      	str	r2, [r3, #60]	; 0x3c
 8008784:	4b7f      	ldr	r3, [pc, #508]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008788:	2380      	movs	r3, #128	; 0x80
 800878a:	055b      	lsls	r3, r3, #21
 800878c:	4013      	ands	r3, r2
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008792:	183b      	adds	r3, r7, r0
 8008794:	2201      	movs	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008798:	4b7b      	ldr	r3, [pc, #492]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	4b7a      	ldr	r3, [pc, #488]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800879e:	2180      	movs	r1, #128	; 0x80
 80087a0:	0049      	lsls	r1, r1, #1
 80087a2:	430a      	orrs	r2, r1
 80087a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087a6:	f7fd f8df 	bl	8005968 <HAL_GetTick>
 80087aa:	0003      	movs	r3, r0
 80087ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087ae:	e00b      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087b0:	f7fd f8da 	bl	8005968 <HAL_GetTick>
 80087b4:	0002      	movs	r2, r0
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d904      	bls.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80087be:	2313      	movs	r3, #19
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	2203      	movs	r2, #3
 80087c4:	701a      	strb	r2, [r3, #0]
        break;
 80087c6:	e005      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087c8:	4b6f      	ldr	r3, [pc, #444]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4013      	ands	r3, r2
 80087d2:	d0ed      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80087d4:	2313      	movs	r3, #19
 80087d6:	18fb      	adds	r3, r7, r3
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d154      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087de:	4b69      	ldr	r3, [pc, #420]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087e2:	23c0      	movs	r3, #192	; 0xc0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4013      	ands	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d019      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d014      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087fa:	4b62      	ldr	r3, [pc, #392]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fe:	4a63      	ldr	r2, [pc, #396]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008800:	4013      	ands	r3, r2
 8008802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008804:	4b5f      	ldr	r3, [pc, #380]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008808:	4b5e      	ldr	r3, [pc, #376]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800880a:	2180      	movs	r1, #128	; 0x80
 800880c:	0249      	lsls	r1, r1, #9
 800880e:	430a      	orrs	r2, r1
 8008810:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008812:	4b5c      	ldr	r3, [pc, #368]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008814:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008816:	4b5b      	ldr	r3, [pc, #364]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008818:	495d      	ldr	r1, [pc, #372]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800881a:	400a      	ands	r2, r1
 800881c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800881e:	4b59      	ldr	r3, [pc, #356]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2201      	movs	r2, #1
 8008828:	4013      	ands	r3, r2
 800882a:	d016      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fd f89c 	bl	8005968 <HAL_GetTick>
 8008830:	0003      	movs	r3, r0
 8008832:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008834:	e00c      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008836:	f7fd f897 	bl	8005968 <HAL_GetTick>
 800883a:	0002      	movs	r2, r0
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	4a54      	ldr	r2, [pc, #336]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d904      	bls.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008846:	2313      	movs	r3, #19
 8008848:	18fb      	adds	r3, r7, r3
 800884a:	2203      	movs	r2, #3
 800884c:	701a      	strb	r2, [r3, #0]
            break;
 800884e:	e004      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008850:	4b4c      	ldr	r3, [pc, #304]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008854:	2202      	movs	r2, #2
 8008856:	4013      	ands	r3, r2
 8008858:	d0ed      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800885a:	2313      	movs	r3, #19
 800885c:	18fb      	adds	r3, r7, r3
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008864:	4b47      	ldr	r3, [pc, #284]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008868:	4a48      	ldr	r2, [pc, #288]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800886a:	4013      	ands	r3, r2
 800886c:	0019      	movs	r1, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	4b44      	ldr	r3, [pc, #272]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008874:	430a      	orrs	r2, r1
 8008876:	65da      	str	r2, [r3, #92]	; 0x5c
 8008878:	e00c      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800887a:	2312      	movs	r3, #18
 800887c:	18fb      	adds	r3, r7, r3
 800887e:	2213      	movs	r2, #19
 8008880:	18ba      	adds	r2, r7, r2
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e005      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008888:	2312      	movs	r3, #18
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	2213      	movs	r2, #19
 800888e:	18ba      	adds	r2, r7, r2
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008894:	2311      	movs	r3, #17
 8008896:	18fb      	adds	r3, r7, r3
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d105      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800889e:	4b39      	ldr	r3, [pc, #228]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a2:	4b38      	ldr	r3, [pc, #224]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088a4:	493c      	ldr	r1, [pc, #240]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80088a6:	400a      	ands	r2, r1
 80088a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	4013      	ands	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088b4:	4b33      	ldr	r3, [pc, #204]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b8:	2203      	movs	r2, #3
 80088ba:	4393      	bics	r3, r2
 80088bc:	0019      	movs	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	4b30      	ldr	r3, [pc, #192]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088c4:	430a      	orrs	r2, r1
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2202      	movs	r2, #2
 80088ce:	4013      	ands	r3, r2
 80088d0:	d009      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088d2:	4b2c      	ldr	r3, [pc, #176]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	220c      	movs	r2, #12
 80088d8:	4393      	bics	r3, r2
 80088da:	0019      	movs	r1, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	4b28      	ldr	r3, [pc, #160]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088e2:	430a      	orrs	r2, r1
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2220      	movs	r2, #32
 80088ec:	4013      	ands	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088f0:	4b24      	ldr	r3, [pc, #144]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f4:	4a29      	ldr	r2, [pc, #164]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	0019      	movs	r1, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	4b21      	ldr	r3, [pc, #132]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008900:	430a      	orrs	r2, r1
 8008902:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	2380      	movs	r3, #128	; 0x80
 800890a:	01db      	lsls	r3, r3, #7
 800890c:	4013      	ands	r3, r2
 800890e:	d015      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008910:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	0899      	lsrs	r1, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695a      	ldr	r2, [r3, #20]
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800891e:	430a      	orrs	r2, r1
 8008920:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695a      	ldr	r2, [r3, #20]
 8008926:	2380      	movs	r3, #128	; 0x80
 8008928:	05db      	lsls	r3, r3, #23
 800892a:	429a      	cmp	r2, r3
 800892c:	d106      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008934:	2180      	movs	r1, #128	; 0x80
 8008936:	0249      	lsls	r1, r1, #9
 8008938:	430a      	orrs	r2, r1
 800893a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	2380      	movs	r3, #128	; 0x80
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	4013      	ands	r3, r2
 8008946:	d016      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800894e:	4013      	ands	r3, r2
 8008950:	0019      	movs	r1, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008958:	430a      	orrs	r2, r1
 800895a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	01db      	lsls	r3, r3, #7
 8008964:	429a      	cmp	r2, r3
 8008966:	d106      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800896e:	2180      	movs	r1, #128	; 0x80
 8008970:	0249      	lsls	r1, r1, #9
 8008972:	430a      	orrs	r2, r1
 8008974:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008976:	2312      	movs	r3, #18
 8008978:	18fb      	adds	r3, r7, r3
 800897a:	781b      	ldrb	r3, [r3, #0]
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b006      	add	sp, #24
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40021000 	.word	0x40021000
 8008988:	40007000 	.word	0x40007000
 800898c:	fffffcff 	.word	0xfffffcff
 8008990:	fffeffff 	.word	0xfffeffff
 8008994:	00001388 	.word	0x00001388
 8008998:	efffffff 	.word	0xefffffff
 800899c:	ffffcfff 	.word	0xffffcfff
 80089a0:	ffff3fff 	.word	0xffff3fff

080089a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089a4:	b5b0      	push	{r4, r5, r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80089ac:	230f      	movs	r3, #15
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d100      	bne.n	80089bc <HAL_RTC_Init+0x18>
 80089ba:	e080      	b.n	8008abe <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2229      	movs	r2, #41	; 0x29
 80089c0:	5c9b      	ldrb	r3, [r3, r2]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10b      	bne.n	80089e0 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2228      	movs	r2, #40	; 0x28
 80089cc:	2100      	movs	r1, #0
 80089ce:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2288      	movs	r2, #136	; 0x88
 80089d4:	0212      	lsls	r2, r2, #8
 80089d6:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	0018      	movs	r0, r3
 80089dc:	f007 ffc6 	bl	801096c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2229      	movs	r2, #41	; 0x29
 80089e4:	2102      	movs	r1, #2
 80089e6:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	22ca      	movs	r2, #202	; 0xca
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2253      	movs	r2, #83	; 0x53
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80089f8:	250f      	movs	r5, #15
 80089fa:	197c      	adds	r4, r7, r5
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0018      	movs	r0, r3
 8008a00:	f000 fa71 	bl	8008ee6 <RTC_EnterInitMode>
 8008a04:	0003      	movs	r3, r0
 8008a06:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8008a08:	0028      	movs	r0, r5
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d148      	bne.n	8008aa4 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	492b      	ldr	r1, [pc, #172]	; (8008acc <HAL_RTC_Init+0x128>)
 8008a1e:	400a      	ands	r2, r1
 8008a20:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6999      	ldr	r1, [r3, #24]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6912      	ldr	r2, [r2, #16]
 8008a48:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6919      	ldr	r1, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	041a      	lsls	r2, r3, #16
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a5e:	0005      	movs	r5, r0
 8008a60:	183c      	adds	r4, r7, r0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f000 fa81 	bl	8008f6c <RTC_ExitInitMode>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8008a6e:	197b      	adds	r3, r7, r5
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d116      	bne.n	8008aa4 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	00d2      	lsls	r2, r2, #3
 8008a82:	08d2      	lsrs	r2, r2, #3
 8008a84:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6999      	ldr	r1, [r3, #24]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	22ff      	movs	r2, #255	; 0xff
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8008aac:	230f      	movs	r3, #15
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2229      	movs	r2, #41	; 0x29
 8008aba:	2101      	movs	r1, #1
 8008abc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8008abe:	230f      	movs	r3, #15
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	781b      	ldrb	r3, [r3, #0]
}
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b004      	add	sp, #16
 8008aca:	bdb0      	pop	{r4, r5, r7, pc}
 8008acc:	fb8fffbf 	.word	0xfb8fffbf

08008ad0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2228      	movs	r2, #40	; 0x28
 8008ae0:	5c9b      	ldrb	r3, [r3, r2]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_RTC_SetTime+0x1a>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e092      	b.n	8008c10 <HAL_RTC_SetTime+0x140>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2228      	movs	r2, #40	; 0x28
 8008aee:	2101      	movs	r1, #1
 8008af0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2229      	movs	r2, #41	; 0x29
 8008af6:	2102      	movs	r1, #2
 8008af8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ca      	movs	r2, #202	; 0xca
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2253      	movs	r2, #83	; 0x53
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b0a:	2513      	movs	r5, #19
 8008b0c:	197c      	adds	r4, r7, r5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	0018      	movs	r0, r3
 8008b12:	f000 f9e8 	bl	8008ee6 <RTC_EnterInitMode>
 8008b16:	0003      	movs	r3, r0
 8008b18:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008b1a:	197b      	adds	r3, r7, r5
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d162      	bne.n	8008be8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d125      	bne.n	8008b74 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	2240      	movs	r2, #64	; 0x40
 8008b30:	4013      	ands	r3, r2
 8008b32:	d102      	bne.n	8008b3a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2200      	movs	r2, #0
 8008b38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f000 fa58 	bl	8008ff4 <RTC_ByteToBcd2>
 8008b44:	0003      	movs	r3, r0
 8008b46:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f000 fa51 	bl	8008ff4 <RTC_ByteToBcd2>
 8008b52:	0003      	movs	r3, r0
 8008b54:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b56:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	789b      	ldrb	r3, [r3, #2]
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f000 fa49 	bl	8008ff4 <RTC_ByteToBcd2>
 8008b62:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b64:	0022      	movs	r2, r4
 8008b66:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	78db      	ldrb	r3, [r3, #3]
 8008b6c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	e017      	b.n	8008ba4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	2240      	movs	r2, #64	; 0x40
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d102      	bne.n	8008b86 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b92:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b98:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	491b      	ldr	r1, [pc, #108]	; (8008c18 <HAL_RTC_SetTime+0x148>)
 8008bac:	400a      	ands	r2, r1
 8008bae:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4918      	ldr	r1, [pc, #96]	; (8008c1c <HAL_RTC_SetTime+0x14c>)
 8008bbc:	400a      	ands	r2, r1
 8008bbe:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6999      	ldr	r1, [r3, #24]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bd8:	2313      	movs	r3, #19
 8008bda:	18fc      	adds	r4, r7, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	0018      	movs	r0, r3
 8008be0:	f000 f9c4 	bl	8008f6c <RTC_ExitInitMode>
 8008be4:	0003      	movs	r3, r0
 8008be6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	22ff      	movs	r2, #255	; 0xff
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8008bf0:	2313      	movs	r3, #19
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2229      	movs	r2, #41	; 0x29
 8008bfe:	2101      	movs	r1, #1
 8008c00:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2228      	movs	r2, #40	; 0x28
 8008c06:	2100      	movs	r1, #0
 8008c08:	5499      	strb	r1, [r3, r2]

  return status;
 8008c0a:	2313      	movs	r3, #19
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
}
 8008c10:	0018      	movs	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b006      	add	sp, #24
 8008c16:	bdb0      	pop	{r4, r5, r7, pc}
 8008c18:	007f7f7f 	.word	0x007f7f7f
 8008c1c:	fffbffff 	.word	0xfffbffff

08008c20 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	045b      	lsls	r3, r3, #17
 8008c3e:	0c5a      	lsrs	r2, r3, #17
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a22      	ldr	r2, [pc, #136]	; (8008cd4 <HAL_RTC_GetTime+0xb4>)
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	0c1b      	lsrs	r3, r3, #16
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	223f      	movs	r2, #63	; 0x3f
 8008c58:	4013      	ands	r3, r2
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	227f      	movs	r2, #127	; 0x7f
 8008c68:	4013      	ands	r3, r2
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	227f      	movs	r2, #127	; 0x7f
 8008c76:	4013      	ands	r3, r2
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	0d9b      	lsrs	r3, r3, #22
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2201      	movs	r2, #1
 8008c86:	4013      	ands	r3, r2
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11a      	bne.n	8008cca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f000 f9d3 	bl	8009044 <RTC_Bcd2ToByte>
 8008c9e:	0003      	movs	r3, r0
 8008ca0:	001a      	movs	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	0018      	movs	r0, r3
 8008cac:	f000 f9ca 	bl	8009044 <RTC_Bcd2ToByte>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	001a      	movs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	789b      	ldrb	r3, [r3, #2]
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 f9c1 	bl	8009044 <RTC_Bcd2ToByte>
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	001a      	movs	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	0018      	movs	r0, r3
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b006      	add	sp, #24
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	007f7f7f 	.word	0x007f7f7f

08008cd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cd8:	b5b0      	push	{r4, r5, r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2228      	movs	r2, #40	; 0x28
 8008ce8:	5c9b      	ldrb	r3, [r3, r2]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_RTC_SetDate+0x1a>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e07e      	b.n	8008df0 <HAL_RTC_SetDate+0x118>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2228      	movs	r2, #40	; 0x28
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2229      	movs	r2, #41	; 0x29
 8008cfe:	2102      	movs	r1, #2
 8008d00:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10e      	bne.n	8008d26 <HAL_RTC_SetDate+0x4e>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	001a      	movs	r2, r3
 8008d0e:	2310      	movs	r3, #16
 8008d10:	4013      	ands	r3, r2
 8008d12:	d008      	beq.n	8008d26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2210      	movs	r2, #16
 8008d1a:	4393      	bics	r3, r2
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	330a      	adds	r3, #10
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11c      	bne.n	8008d66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	78db      	ldrb	r3, [r3, #3]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 f95f 	bl	8008ff4 <RTC_ByteToBcd2>
 8008d36:	0003      	movs	r3, r0
 8008d38:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f000 f958 	bl	8008ff4 <RTC_ByteToBcd2>
 8008d44:	0003      	movs	r3, r0
 8008d46:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d48:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	789b      	ldrb	r3, [r3, #2]
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f000 f950 	bl	8008ff4 <RTC_ByteToBcd2>
 8008d54:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d56:	0022      	movs	r2, r4
 8008d58:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	e00e      	b.n	8008d84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	78db      	ldrb	r3, [r3, #3]
 8008d6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008d72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008d78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	22ca      	movs	r2, #202	; 0xca
 8008d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2253      	movs	r2, #83	; 0x53
 8008d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d94:	2513      	movs	r5, #19
 8008d96:	197c      	adds	r4, r7, r5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f000 f8a3 	bl	8008ee6 <RTC_EnterInitMode>
 8008da0:	0003      	movs	r3, r0
 8008da2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008da4:	0028      	movs	r0, r5
 8008da6:	183b      	adds	r3, r7, r0
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4910      	ldr	r1, [pc, #64]	; (8008df8 <HAL_RTC_SetDate+0x120>)
 8008db6:	400a      	ands	r2, r1
 8008db8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008dba:	183c      	adds	r4, r7, r0
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 f8d4 	bl	8008f6c <RTC_ExitInitMode>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	22ff      	movs	r2, #255	; 0xff
 8008dce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008dd0:	2313      	movs	r3, #19
 8008dd2:	18fb      	adds	r3, r7, r3
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2229      	movs	r2, #41	; 0x29
 8008dde:	2101      	movs	r1, #1
 8008de0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2228      	movs	r2, #40	; 0x28
 8008de6:	2100      	movs	r1, #0
 8008de8:	5499      	strb	r1, [r3, r2]

  return status;
 8008dea:	2313      	movs	r3, #19
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	781b      	ldrb	r3, [r3, #0]
}
 8008df0:	0018      	movs	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b006      	add	sp, #24
 8008df6:	bdb0      	pop	{r4, r5, r7, pc}
 8008df8:	00ffff3f 	.word	0x00ffff3f

08008dfc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <HAL_RTC_GetDate+0x98>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	0c1b      	lsrs	r3, r3, #16
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	221f      	movs	r2, #31
 8008e26:	4013      	ands	r3, r2
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	223f      	movs	r2, #63	; 0x3f
 8008e34:	4013      	ands	r3, r2
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	0b5b      	lsrs	r3, r3, #13
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2207      	movs	r2, #7
 8008e44:	4013      	ands	r3, r2
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d11a      	bne.n	8008e88 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	78db      	ldrb	r3, [r3, #3]
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f8f4 	bl	8009044 <RTC_Bcd2ToByte>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	001a      	movs	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f000 f8eb 	bl	8009044 <RTC_Bcd2ToByte>
 8008e6e:	0003      	movs	r3, r0
 8008e70:	001a      	movs	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	789b      	ldrb	r3, [r3, #2]
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f000 f8e2 	bl	8009044 <RTC_Bcd2ToByte>
 8008e80:	0003      	movs	r3, r0
 8008e82:	001a      	movs	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b006      	add	sp, #24
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	00ffff3f 	.word	0x00ffff3f

08008e98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	21a0      	movs	r1, #160	; 0xa0
 8008eac:	438a      	bics	r2, r1
 8008eae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008eb0:	f7fc fd5a 	bl	8005968 <HAL_GetTick>
 8008eb4:	0003      	movs	r3, r0
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008eb8:	e00a      	b.n	8008ed0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eba:	f7fc fd55 	bl	8005968 <HAL_GetTick>
 8008ebe:	0002      	movs	r2, r0
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	23fa      	movs	r3, #250	; 0xfa
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d901      	bls.n	8008ed0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e006      	b.n	8008ede <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d0ee      	beq.n	8008eba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	0018      	movs	r0, r3
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b004      	add	sp, #16
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8008eee:	230f      	movs	r3, #15
 8008ef0:	18fb      	adds	r3, r7, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2240      	movs	r2, #64	; 0x40
 8008efe:	4013      	ands	r3, r2
 8008f00:	d12c      	bne.n	8008f5c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2180      	movs	r1, #128	; 0x80
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f12:	f7fc fd29 	bl	8005968 <HAL_GetTick>
 8008f16:	0003      	movs	r3, r0
 8008f18:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f1a:	e014      	b.n	8008f46 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f1c:	f7fc fd24 	bl	8005968 <HAL_GetTick>
 8008f20:	0002      	movs	r2, r0
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	200f      	movs	r0, #15
 8008f28:	183b      	adds	r3, r7, r0
 8008f2a:	1839      	adds	r1, r7, r0
 8008f2c:	7809      	ldrb	r1, [r1, #0]
 8008f2e:	7019      	strb	r1, [r3, #0]
 8008f30:	23fa      	movs	r3, #250	; 0xfa
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d906      	bls.n	8008f46 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8008f38:	183b      	adds	r3, r7, r0
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2229      	movs	r2, #41	; 0x29
 8008f42:	2103      	movs	r1, #3
 8008f44:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2240      	movs	r2, #64	; 0x40
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d104      	bne.n	8008f5c <RTC_EnterInitMode+0x76>
 8008f52:	230f      	movs	r3, #15
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d1df      	bne.n	8008f1c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f5c:	230f      	movs	r3, #15
 8008f5e:	18fb      	adds	r3, r7, r3
 8008f60:	781b      	ldrb	r3, [r3, #0]
}
 8008f62:	0018      	movs	r0, r3
 8008f64:	46bd      	mov	sp, r7
 8008f66:	b004      	add	sp, #16
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f74:	240f      	movs	r4, #15
 8008f76:	193b      	adds	r3, r7, r4
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008f7c:	4b1c      	ldr	r3, [pc, #112]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	438a      	bics	r2, r1
 8008f86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	4013      	ands	r3, r2
 8008f90:	d10d      	bne.n	8008fae <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	0018      	movs	r0, r3
 8008f96:	f7ff ff7f 	bl	8008e98 <HAL_RTC_WaitForSynchro>
 8008f9a:	1e03      	subs	r3, r0, #0
 8008f9c:	d021      	beq.n	8008fe2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2229      	movs	r2, #41	; 0x29
 8008fa2:	2103      	movs	r1, #3
 8008fa4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8008fa6:	193b      	adds	r3, r7, r4
 8008fa8:	2203      	movs	r2, #3
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	e019      	b.n	8008fe2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fae:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008fb4:	2120      	movs	r1, #32
 8008fb6:	438a      	bics	r2, r1
 8008fb8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f7ff ff6b 	bl	8008e98 <HAL_RTC_WaitForSynchro>
 8008fc2:	1e03      	subs	r3, r0, #0
 8008fc4:	d007      	beq.n	8008fd6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2229      	movs	r2, #41	; 0x29
 8008fca:	2103      	movs	r1, #3
 8008fcc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8008fce:	230f      	movs	r3, #15
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <RTC_ExitInitMode+0x84>)
 8008fdc:	2120      	movs	r1, #32
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8008fe2:	230f      	movs	r3, #15
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	781b      	ldrb	r3, [r3, #0]
}
 8008fe8:	0018      	movs	r0, r3
 8008fea:	46bd      	mov	sp, r7
 8008fec:	b005      	add	sp, #20
 8008fee:	bd90      	pop	{r4, r7, pc}
 8008ff0:	40002800 	.word	0x40002800

08008ff4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	0002      	movs	r2, r0
 8008ffc:	1dfb      	adds	r3, r7, #7
 8008ffe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009004:	230b      	movs	r3, #11
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	1dfa      	adds	r2, r7, #7
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800900e:	e008      	b.n	8009022 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009016:	220b      	movs	r2, #11
 8009018:	18bb      	adds	r3, r7, r2
 800901a:	18ba      	adds	r2, r7, r2
 800901c:	7812      	ldrb	r2, [r2, #0]
 800901e:	3a0a      	subs	r2, #10
 8009020:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8009022:	210b      	movs	r1, #11
 8009024:	187b      	adds	r3, r7, r1
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b09      	cmp	r3, #9
 800902a:	d8f1      	bhi.n	8009010 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	b2da      	uxtb	r2, r3
 8009034:	187b      	adds	r3, r7, r1
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	4313      	orrs	r3, r2
 800903a:	b2db      	uxtb	r3, r3
}
 800903c:	0018      	movs	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	b004      	add	sp, #16
 8009042:	bd80      	pop	{r7, pc}

08009044 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	0002      	movs	r2, r0
 800904c:	1dfb      	adds	r3, r7, #7
 800904e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	091b      	lsrs	r3, r3, #4
 8009056:	b2db      	uxtb	r3, r3
 8009058:	001a      	movs	r2, r3
 800905a:	0013      	movs	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	189b      	adds	r3, r3, r2
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	b2da      	uxtb	r2, r3
 8009068:	1dfb      	adds	r3, r7, #7
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	210f      	movs	r1, #15
 800906e:	400b      	ands	r3, r1
 8009070:	b2db      	uxtb	r3, r3
 8009072:	18d3      	adds	r3, r2, r3
 8009074:	b2db      	uxtb	r3, r3
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b004      	add	sp, #16
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2228      	movs	r2, #40	; 0x28
 8009090:	5c9b      	ldrb	r3, [r3, r2]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009096:	2302      	movs	r3, #2
 8009098:	e082      	b.n	80091a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2228      	movs	r2, #40	; 0x28
 800909e:	2101      	movs	r1, #1
 80090a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2229      	movs	r2, #41	; 0x29
 80090a6:	2102      	movs	r1, #2
 80090a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	22ca      	movs	r2, #202	; 0xca
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2253      	movs	r2, #83	; 0x53
 80090b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	699a      	ldr	r2, [r3, #24]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4938      	ldr	r1, [pc, #224]	; (80091a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80090c6:	400a      	ands	r2, r1
 80090c8:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2104      	movs	r1, #4
 80090d6:	430a      	orrs	r2, r1
 80090d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80090da:	4b34      	ldr	r3, [pc, #208]	; (80091ac <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	2240      	movs	r2, #64	; 0x40
 80090e0:	4013      	ands	r3, r2
 80090e2:	d121      	bne.n	8009128 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80090e4:	f7fc fc40 	bl	8005968 <HAL_GetTick>
 80090e8:	0003      	movs	r3, r0
 80090ea:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80090ec:	e016      	b.n	800911c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090ee:	f7fc fc3b 	bl	8005968 <HAL_GetTick>
 80090f2:	0002      	movs	r2, r0
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	23fa      	movs	r3, #250	; 0xfa
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d90d      	bls.n	800911c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	22ff      	movs	r2, #255	; 0xff
 8009106:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2229      	movs	r2, #41	; 0x29
 800910c:	2103      	movs	r1, #3
 800910e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2228      	movs	r2, #40	; 0x28
 8009114:	2100      	movs	r1, #0
 8009116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e041      	b.n	80091a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	2204      	movs	r2, #4
 8009124:	4013      	ands	r3, r2
 8009126:	d0e2      	beq.n	80090ee <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2107      	movs	r1, #7
 800913c:	438a      	bics	r2, r1
 800913e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6999      	ldr	r1, [r3, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	430a      	orrs	r2, r1
 800914e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009150:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8009152:	2380      	movs	r3, #128	; 0x80
 8009154:	58d3      	ldr	r3, [r2, r3]
 8009156:	4916      	ldr	r1, [pc, #88]	; (80091b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8009158:	2280      	movs	r2, #128	; 0x80
 800915a:	0312      	lsls	r2, r2, #12
 800915c:	4313      	orrs	r3, r2
 800915e:	2280      	movs	r2, #128	; 0x80
 8009160:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2180      	movs	r1, #128	; 0x80
 800916e:	01c9      	lsls	r1, r1, #7
 8009170:	430a      	orrs	r2, r1
 8009172:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2180      	movs	r1, #128	; 0x80
 8009180:	00c9      	lsls	r1, r1, #3
 8009182:	430a      	orrs	r2, r1
 8009184:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	22ff      	movs	r2, #255	; 0xff
 800918c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2229      	movs	r2, #41	; 0x29
 8009192:	2101      	movs	r1, #1
 8009194:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2228      	movs	r2, #40	; 0x28
 800919a:	2100      	movs	r1, #0
 800919c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b006      	add	sp, #24
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	fffffbff 	.word	0xfffffbff
 80091ac:	40002800 	.word	0x40002800
 80091b0:	40021800 	.word	0x40021800

080091b4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c2:	2204      	movs	r2, #4
 80091c4:	4013      	ands	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2104      	movs	r1, #4
 80091d4:	430a      	orrs	r2, r1
 80091d6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	0018      	movs	r0, r3
 80091dc:	f000 f808 	bl	80091f0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2229      	movs	r2, #41	; 0x29
 80091e4:	2101      	movs	r1, #1
 80091e6:	5499      	strb	r1, [r3, r2]
}
 80091e8:	46c0      	nop			; (mov r8, r8)
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b002      	add	sp, #8
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80091f8:	46c0      	nop			; (mov r8, r8)
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b002      	add	sp, #8
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e0a8      	b.n	8009364 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	2382      	movs	r3, #130	; 0x82
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	429a      	cmp	r2, r3
 8009224:	d009      	beq.n	800923a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	61da      	str	r2, [r3, #28]
 800922c:	e005      	b.n	800923a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	225d      	movs	r2, #93	; 0x5d
 8009244:	5c9b      	ldrb	r3, [r3, r2]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d107      	bne.n	800925c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	225c      	movs	r2, #92	; 0x5c
 8009250:	2100      	movs	r1, #0
 8009252:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	0018      	movs	r0, r3
 8009258:	f007 fbb6 	bl	80109c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	225d      	movs	r2, #93	; 0x5d
 8009260:	2102      	movs	r1, #2
 8009262:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2140      	movs	r1, #64	; 0x40
 8009270:	438a      	bics	r2, r1
 8009272:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	23e0      	movs	r3, #224	; 0xe0
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	429a      	cmp	r2, r3
 800927e:	d902      	bls.n	8009286 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e002      	b.n	800928c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009286:	2380      	movs	r3, #128	; 0x80
 8009288:	015b      	lsls	r3, r3, #5
 800928a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	23f0      	movs	r3, #240	; 0xf0
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	429a      	cmp	r2, r3
 8009296:	d008      	beq.n	80092aa <HAL_SPI_Init+0xaa>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	23e0      	movs	r3, #224	; 0xe0
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	2382      	movs	r3, #130	; 0x82
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	401a      	ands	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6899      	ldr	r1, [r3, #8]
 80092b8:	2384      	movs	r3, #132	; 0x84
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	400b      	ands	r3, r1
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	2102      	movs	r1, #2
 80092c6:	400b      	ands	r3, r1
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	2101      	movs	r1, #1
 80092d0:	400b      	ands	r3, r1
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6999      	ldr	r1, [r3, #24]
 80092d8:	2380      	movs	r3, #128	; 0x80
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	400b      	ands	r3, r1
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2138      	movs	r1, #56	; 0x38
 80092e6:	400b      	ands	r3, r1
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	400b      	ands	r3, r1
 80092f2:	431a      	orrs	r2, r3
 80092f4:	0011      	movs	r1, r2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	019b      	lsls	r3, r3, #6
 80092fe:	401a      	ands	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	0c1b      	lsrs	r3, r3, #16
 800930e:	2204      	movs	r2, #4
 8009310:	401a      	ands	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	2110      	movs	r1, #16
 8009318:	400b      	ands	r3, r1
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009320:	2108      	movs	r1, #8
 8009322:	400b      	ands	r3, r1
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68d9      	ldr	r1, [r3, #12]
 800932a:	23f0      	movs	r3, #240	; 0xf0
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	400b      	ands	r3, r1
 8009330:	431a      	orrs	r2, r3
 8009332:	0011      	movs	r1, r2
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	2380      	movs	r3, #128	; 0x80
 8009338:	015b      	lsls	r3, r3, #5
 800933a:	401a      	ands	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	69da      	ldr	r2, [r3, #28]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4907      	ldr	r1, [pc, #28]	; (800936c <HAL_SPI_Init+0x16c>)
 8009350:	400a      	ands	r2, r1
 8009352:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	225d      	movs	r2, #93	; 0x5d
 800935e:	2101      	movs	r1, #1
 8009360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	0018      	movs	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	b004      	add	sp, #16
 800936a:	bd80      	pop	{r7, pc}
 800936c:	fffff7ff 	.word	0xfffff7ff

08009370 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	1dbb      	adds	r3, r7, #6
 800937e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009380:	231f      	movs	r3, #31
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	2200      	movs	r2, #0
 8009386:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	225c      	movs	r2, #92	; 0x5c
 800938c:	5c9b      	ldrb	r3, [r3, r2]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_SPI_Transmit+0x26>
 8009392:	2302      	movs	r3, #2
 8009394:	e140      	b.n	8009618 <HAL_SPI_Transmit+0x2a8>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	225c      	movs	r2, #92	; 0x5c
 800939a:	2101      	movs	r1, #1
 800939c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800939e:	f7fc fae3 	bl	8005968 <HAL_GetTick>
 80093a2:	0003      	movs	r3, r0
 80093a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80093a6:	2316      	movs	r3, #22
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	1dba      	adds	r2, r7, #6
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	225d      	movs	r2, #93	; 0x5d
 80093b4:	5c9b      	ldrb	r3, [r3, r2]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d004      	beq.n	80093c6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80093bc:	231f      	movs	r3, #31
 80093be:	18fb      	adds	r3, r7, r3
 80093c0:	2202      	movs	r2, #2
 80093c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80093c4:	e11d      	b.n	8009602 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <HAL_SPI_Transmit+0x64>
 80093cc:	1dbb      	adds	r3, r7, #6
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80093d4:	231f      	movs	r3, #31
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	2201      	movs	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
    goto error;
 80093dc:	e111      	b.n	8009602 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	225d      	movs	r2, #93	; 0x5d
 80093e2:	2103      	movs	r1, #3
 80093e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1dba      	adds	r2, r7, #6
 80093f6:	8812      	ldrh	r2, [r2, #0]
 80093f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1dba      	adds	r2, r7, #6
 80093fe:	8812      	ldrh	r2, [r2, #0]
 8009400:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2244      	movs	r2, #68	; 0x44
 800940c:	2100      	movs	r1, #0
 800940e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2246      	movs	r2, #70	; 0x46
 8009414:	2100      	movs	r1, #0
 8009416:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	429a      	cmp	r2, r3
 800942e:	d110      	bne.n	8009452 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2140      	movs	r1, #64	; 0x40
 800943c:	438a      	bics	r2, r1
 800943e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	01c9      	lsls	r1, r1, #7
 800944e:	430a      	orrs	r2, r1
 8009450:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2240      	movs	r2, #64	; 0x40
 800945a:	4013      	ands	r3, r2
 800945c:	2b40      	cmp	r3, #64	; 0x40
 800945e:	d007      	beq.n	8009470 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2140      	movs	r1, #64	; 0x40
 800946c:	430a      	orrs	r2, r1
 800946e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	23e0      	movs	r3, #224	; 0xe0
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	429a      	cmp	r2, r3
 800947a:	d94e      	bls.n	800951a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <HAL_SPI_Transmit+0x11e>
 8009484:	2316      	movs	r3, #22
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d13f      	bne.n	800950e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	881a      	ldrh	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	1c9a      	adds	r2, r3, #2
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094b2:	e02c      	b.n	800950e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	2202      	movs	r2, #2
 80094bc:	4013      	ands	r3, r2
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d112      	bne.n	80094e8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	881a      	ldrh	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	1c9a      	adds	r2, r3, #2
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094e6:	e012      	b.n	800950e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094e8:	f7fc fa3e 	bl	8005968 <HAL_GetTick>
 80094ec:	0002      	movs	r2, r0
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d802      	bhi.n	80094fe <HAL_SPI_Transmit+0x18e>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	3301      	adds	r3, #1
 80094fc:	d102      	bne.n	8009504 <HAL_SPI_Transmit+0x194>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009504:	231f      	movs	r3, #31
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	2203      	movs	r2, #3
 800950a:	701a      	strb	r2, [r3, #0]
          goto error;
 800950c:	e079      	b.n	8009602 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009512:	b29b      	uxth	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1cd      	bne.n	80094b4 <HAL_SPI_Transmit+0x144>
 8009518:	e04f      	b.n	80095ba <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <HAL_SPI_Transmit+0x1bc>
 8009522:	2316      	movs	r3, #22
 8009524:	18fb      	adds	r3, r7, r3
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d141      	bne.n	80095b0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	7812      	ldrb	r2, [r2, #0]
 8009538:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8009552:	e02d      	b.n	80095b0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2202      	movs	r2, #2
 800955c:	4013      	ands	r3, r2
 800955e:	2b02      	cmp	r3, #2
 8009560:	d113      	bne.n	800958a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	330c      	adds	r3, #12
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009588:	e012      	b.n	80095b0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800958a:	f7fc f9ed 	bl	8005968 <HAL_GetTick>
 800958e:	0002      	movs	r2, r0
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d802      	bhi.n	80095a0 <HAL_SPI_Transmit+0x230>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	d102      	bne.n	80095a6 <HAL_SPI_Transmit+0x236>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80095a6:	231f      	movs	r3, #31
 80095a8:	18fb      	adds	r3, r7, r3
 80095aa:	2203      	movs	r2, #3
 80095ac:	701a      	strb	r2, [r3, #0]
          goto error;
 80095ae:	e028      	b.n	8009602 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1cc      	bne.n	8009554 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	0018      	movs	r0, r3
 80095c2:	f000 f951 	bl	8009868 <SPI_EndRxTxTransaction>
 80095c6:	1e03      	subs	r3, r0, #0
 80095c8:	d002      	beq.n	80095d0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80095f6:	231f      	movs	r3, #31
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	2201      	movs	r2, #1
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	e000      	b.n	8009602 <HAL_SPI_Transmit+0x292>
  }

error:
 8009600:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	225d      	movs	r2, #93	; 0x5d
 8009606:	2101      	movs	r1, #1
 8009608:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	225c      	movs	r2, #92	; 0x5c
 800960e:	2100      	movs	r1, #0
 8009610:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009612:	231f      	movs	r3, #31
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	781b      	ldrb	r3, [r3, #0]
}
 8009618:	0018      	movs	r0, r3
 800961a:	46bd      	mov	sp, r7
 800961c:	b008      	add	sp, #32
 800961e:	bd80      	pop	{r7, pc}

08009620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	1dfb      	adds	r3, r7, #7
 800962e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009630:	f7fc f99a 	bl	8005968 <HAL_GetTick>
 8009634:	0002      	movs	r2, r0
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	18d3      	adds	r3, r2, r3
 800963e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009640:	f7fc f992 	bl	8005968 <HAL_GetTick>
 8009644:	0003      	movs	r3, r0
 8009646:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009648:	4b3a      	ldr	r3, [pc, #232]	; (8009734 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	015b      	lsls	r3, r3, #5
 800964e:	0d1b      	lsrs	r3, r3, #20
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	4353      	muls	r3, r2
 8009654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009656:	e058      	b.n	800970a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	d055      	beq.n	800970a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800965e:	f7fc f983 	bl	8005968 <HAL_GetTick>
 8009662:	0002      	movs	r2, r0
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	69fa      	ldr	r2, [r7, #28]
 800966a:	429a      	cmp	r2, r3
 800966c:	d902      	bls.n	8009674 <SPI_WaitFlagStateUntilTimeout+0x54>
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d142      	bne.n	80096fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	21e0      	movs	r1, #224	; 0xe0
 8009680:	438a      	bics	r2, r1
 8009682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	2382      	movs	r3, #130	; 0x82
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	429a      	cmp	r2, r3
 800968e:	d113      	bne.n	80096b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	2380      	movs	r3, #128	; 0x80
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	429a      	cmp	r2, r3
 800969a:	d005      	beq.n	80096a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d107      	bne.n	80096b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2140      	movs	r1, #64	; 0x40
 80096b4:	438a      	bics	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	019b      	lsls	r3, r3, #6
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d110      	bne.n	80096e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	491a      	ldr	r1, [pc, #104]	; (8009738 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80096d0:	400a      	ands	r2, r1
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2180      	movs	r1, #128	; 0x80
 80096e0:	0189      	lsls	r1, r1, #6
 80096e2:	430a      	orrs	r2, r1
 80096e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	225d      	movs	r2, #93	; 0x5d
 80096ea:	2101      	movs	r1, #1
 80096ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	225c      	movs	r2, #92	; 0x5c
 80096f2:	2100      	movs	r1, #0
 80096f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e017      	b.n	800972a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3b01      	subs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	4013      	ands	r3, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	425a      	negs	r2, r3
 800971a:	4153      	adcs	r3, r2
 800971c:	b2db      	uxtb	r3, r3
 800971e:	001a      	movs	r2, r3
 8009720:	1dfb      	adds	r3, r7, #7
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d197      	bne.n	8009658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	0018      	movs	r0, r3
 800972c:	46bd      	mov	sp, r7
 800972e:	b008      	add	sp, #32
 8009730:	bd80      	pop	{r7, pc}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	20000080 	.word	0x20000080
 8009738:	ffffdfff 	.word	0xffffdfff

0800973c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800974a:	f7fc f90d 	bl	8005968 <HAL_GetTick>
 800974e:	0002      	movs	r2, r0
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	1a9b      	subs	r3, r3, r2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	18d3      	adds	r3, r2, r3
 8009758:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800975a:	f7fc f905 	bl	8005968 <HAL_GetTick>
 800975e:	0003      	movs	r3, r0
 8009760:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009762:	4b3f      	ldr	r3, [pc, #252]	; (8009860 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	0013      	movs	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	189b      	adds	r3, r3, r2
 800976c:	00da      	lsls	r2, r3, #3
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	0d1b      	lsrs	r3, r3, #20
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	4353      	muls	r3, r2
 8009776:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8009778:	e064      	b.n	8009844 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	23c0      	movs	r3, #192	; 0xc0
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	429a      	cmp	r2, r3
 8009782:	d106      	bne.n	8009792 <SPI_WaitFifoStateUntilTimeout+0x56>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	330c      	adds	r3, #12
 8009790:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	d055      	beq.n	8009844 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009798:	f7fc f8e6 	bl	8005968 <HAL_GetTick>
 800979c:	0002      	movs	r2, r0
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d902      	bls.n	80097ae <SPI_WaitFifoStateUntilTimeout+0x72>
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d142      	bne.n	8009834 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	21e0      	movs	r1, #224	; 0xe0
 80097ba:	438a      	bics	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	2382      	movs	r3, #130	; 0x82
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d113      	bne.n	80097f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	2380      	movs	r3, #128	; 0x80
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d005      	beq.n	80097e2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	2380      	movs	r3, #128	; 0x80
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	429a      	cmp	r2, r3
 80097e0:	d107      	bne.n	80097f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2140      	movs	r1, #64	; 0x40
 80097ee:	438a      	bics	r2, r1
 80097f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097f6:	2380      	movs	r3, #128	; 0x80
 80097f8:	019b      	lsls	r3, r3, #6
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d110      	bne.n	8009820 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4916      	ldr	r1, [pc, #88]	; (8009864 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800980a:	400a      	ands	r2, r1
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2180      	movs	r1, #128	; 0x80
 800981a:	0189      	lsls	r1, r1, #6
 800981c:	430a      	orrs	r2, r1
 800981e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	225d      	movs	r2, #93	; 0x5d
 8009824:	2101      	movs	r1, #1
 8009826:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	225c      	movs	r2, #92	; 0x5c
 800982c:	2100      	movs	r1, #0
 800982e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e010      	b.n	8009856 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	3b01      	subs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	4013      	ands	r3, r2
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d192      	bne.n	800977a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	0018      	movs	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	b008      	add	sp, #32
 800985c:	bd80      	pop	{r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000080 	.word	0x20000080
 8009864:	ffffdfff 	.word	0xffffdfff

08009868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	23c0      	movs	r3, #192	; 0xc0
 8009878:	0159      	lsls	r1, r3, #5
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	0013      	movs	r3, r2
 8009882:	2200      	movs	r2, #0
 8009884:	f7ff ff5a 	bl	800973c <SPI_WaitFifoStateUntilTimeout>
 8009888:	1e03      	subs	r3, r0, #0
 800988a:	d007      	beq.n	800989c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009890:	2220      	movs	r2, #32
 8009892:	431a      	orrs	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e027      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	0013      	movs	r3, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	2180      	movs	r1, #128	; 0x80
 80098aa:	f7ff feb9 	bl	8009620 <SPI_WaitFlagStateUntilTimeout>
 80098ae:	1e03      	subs	r3, r0, #0
 80098b0:	d007      	beq.n	80098c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b6:	2220      	movs	r2, #32
 80098b8:	431a      	orrs	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e014      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	23c0      	movs	r3, #192	; 0xc0
 80098c6:	00d9      	lsls	r1, r3, #3
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	0013      	movs	r3, r2
 80098d0:	2200      	movs	r2, #0
 80098d2:	f7ff ff33 	bl	800973c <SPI_WaitFifoStateUntilTimeout>
 80098d6:	1e03      	subs	r3, r0, #0
 80098d8:	d007      	beq.n	80098ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	2220      	movs	r2, #32
 80098e0:	431a      	orrs	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e000      	b.n	80098ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	0018      	movs	r0, r3
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b004      	add	sp, #16
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e04a      	b.n	800999c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	223d      	movs	r2, #61	; 0x3d
 800990a:	5c9b      	ldrb	r3, [r3, r2]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	223c      	movs	r2, #60	; 0x3c
 8009916:	2100      	movs	r1, #0
 8009918:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0018      	movs	r0, r3
 800991e:	f007 f8c1 	bl	8010aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	223d      	movs	r2, #61	; 0x3d
 8009926:	2102      	movs	r1, #2
 8009928:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3304      	adds	r3, #4
 8009932:	0019      	movs	r1, r3
 8009934:	0010      	movs	r0, r2
 8009936:	f000 faa9 	bl	8009e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2248      	movs	r2, #72	; 0x48
 800993e:	2101      	movs	r1, #1
 8009940:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	223e      	movs	r2, #62	; 0x3e
 8009946:	2101      	movs	r1, #1
 8009948:	5499      	strb	r1, [r3, r2]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	223f      	movs	r2, #63	; 0x3f
 800994e:	2101      	movs	r1, #1
 8009950:	5499      	strb	r1, [r3, r2]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2240      	movs	r2, #64	; 0x40
 8009956:	2101      	movs	r1, #1
 8009958:	5499      	strb	r1, [r3, r2]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2241      	movs	r2, #65	; 0x41
 800995e:	2101      	movs	r1, #1
 8009960:	5499      	strb	r1, [r3, r2]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2242      	movs	r2, #66	; 0x42
 8009966:	2101      	movs	r1, #1
 8009968:	5499      	strb	r1, [r3, r2]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2243      	movs	r2, #67	; 0x43
 800996e:	2101      	movs	r1, #1
 8009970:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2244      	movs	r2, #68	; 0x44
 8009976:	2101      	movs	r1, #1
 8009978:	5499      	strb	r1, [r3, r2]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2245      	movs	r2, #69	; 0x45
 800997e:	2101      	movs	r1, #1
 8009980:	5499      	strb	r1, [r3, r2]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2246      	movs	r2, #70	; 0x46
 8009986:	2101      	movs	r1, #1
 8009988:	5499      	strb	r1, [r3, r2]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2247      	movs	r2, #71	; 0x47
 800998e:	2101      	movs	r1, #1
 8009990:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	223d      	movs	r2, #61	; 0x3d
 8009996:	2101      	movs	r1, #1
 8009998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	0018      	movs	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	b002      	add	sp, #8
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	223d      	movs	r2, #61	; 0x3d
 80099b0:	5c9b      	ldrb	r3, [r3, r2]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d001      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e03c      	b.n	8009a36 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	223d      	movs	r2, #61	; 0x3d
 80099c0:	2102      	movs	r1, #2
 80099c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2101      	movs	r1, #1
 80099d0:	430a      	orrs	r2, r1
 80099d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d009      	beq.n	80099f2 <HAL_TIM_Base_Start_IT+0x4e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_TIM_Base_Start_IT+0x4e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <HAL_TIM_Base_Start_IT+0xa4>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d116      	bne.n	8009a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	4a14      	ldr	r2, [pc, #80]	; (8009a4c <HAL_TIM_Base_Start_IT+0xa8>)
 80099fa:	4013      	ands	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b06      	cmp	r3, #6
 8009a02:	d016      	beq.n	8009a32 <HAL_TIM_Base_Start_IT+0x8e>
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	2380      	movs	r3, #128	; 0x80
 8009a08:	025b      	lsls	r3, r3, #9
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d011      	beq.n	8009a32 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2101      	movs	r1, #1
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a1e:	e008      	b.n	8009a32 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e000      	b.n	8009a34 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a32:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	0018      	movs	r0, r3
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	b004      	add	sp, #16
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	46c0      	nop			; (mov r8, r8)
 8009a40:	40012c00 	.word	0x40012c00
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40014000 	.word	0x40014000
 8009a4c:	00010007 	.word	0x00010007

08009a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4013      	ands	r3, r2
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d124      	bne.n	8009ab0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d11d      	bne.n	8009ab0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2203      	movs	r2, #3
 8009a7a:	4252      	negs	r2, r2
 8009a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	d004      	beq.n	8009a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	0018      	movs	r0, r3
 8009a94:	f000 f9e2 	bl	8009e5c <HAL_TIM_IC_CaptureCallback>
 8009a98:	e007      	b.n	8009aaa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f000 f9d5 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	f000 f9e1 	bl	8009e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	4013      	ands	r3, r2
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d125      	bne.n	8009b0a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d11e      	bne.n	8009b0a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2205      	movs	r2, #5
 8009ad2:	4252      	negs	r2, r2
 8009ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	23c0      	movs	r3, #192	; 0xc0
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 f9b5 	bl	8009e5c <HAL_TIM_IC_CaptureCallback>
 8009af2:	e007      	b.n	8009b04 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0018      	movs	r0, r3
 8009af8:	f000 f9a8 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0018      	movs	r0, r3
 8009b00:	f000 f9b4 	bl	8009e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2208      	movs	r2, #8
 8009b12:	4013      	ands	r3, r2
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d124      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	2208      	movs	r2, #8
 8009b20:	4013      	ands	r3, r2
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d11d      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2209      	movs	r2, #9
 8009b2c:	4252      	negs	r2, r2
 8009b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2204      	movs	r2, #4
 8009b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	4013      	ands	r3, r2
 8009b40:	d004      	beq.n	8009b4c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	0018      	movs	r0, r3
 8009b46:	f000 f989 	bl	8009e5c <HAL_TIM_IC_CaptureCallback>
 8009b4a:	e007      	b.n	8009b5c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f000 f97c 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	0018      	movs	r0, r3
 8009b58:	f000 f988 	bl	8009e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	2210      	movs	r2, #16
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	2b10      	cmp	r3, #16
 8009b6e:	d125      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2210      	movs	r2, #16
 8009b78:	4013      	ands	r3, r2
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d11e      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2211      	movs	r2, #17
 8009b84:	4252      	negs	r2, r2
 8009b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2208      	movs	r2, #8
 8009b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	23c0      	movs	r3, #192	; 0xc0
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4013      	ands	r3, r2
 8009b9a:	d004      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f000 f95c 	bl	8009e5c <HAL_TIM_IC_CaptureCallback>
 8009ba4:	e007      	b.n	8009bb6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 f94f 	bl	8009e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f000 f95b 	bl	8009e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d10f      	bne.n	8009bea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d108      	bne.n	8009bea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	4252      	negs	r2, r2
 8009be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	0018      	movs	r0, r3
 8009be6:	f007 f8c5 	bl	8010d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2280      	movs	r2, #128	; 0x80
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	2b80      	cmp	r3, #128	; 0x80
 8009bf6:	d10f      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2280      	movs	r2, #128	; 0x80
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b80      	cmp	r3, #128	; 0x80
 8009c04:	d108      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2281      	movs	r2, #129	; 0x81
 8009c0c:	4252      	negs	r2, r2
 8009c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f000 fabc 	bl	800a190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	2380      	movs	r3, #128	; 0x80
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	401a      	ands	r2, r3
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d10e      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	2280      	movs	r2, #128	; 0x80
 8009c34:	4013      	ands	r3, r2
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d107      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1c      	ldr	r2, [pc, #112]	; (8009cb0 <HAL_TIM_IRQHandler+0x260>)
 8009c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	0018      	movs	r0, r3
 8009c46:	f000 faab 	bl	800a1a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2240      	movs	r2, #64	; 0x40
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b40      	cmp	r3, #64	; 0x40
 8009c56:	d10f      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	2240      	movs	r2, #64	; 0x40
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d108      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2241      	movs	r2, #65	; 0x41
 8009c6c:	4252      	negs	r2, r2
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f000 f902 	bl	8009e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	4013      	ands	r3, r2
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d10f      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d108      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2221      	movs	r2, #33	; 0x21
 8009c9a:	4252      	negs	r2, r2
 8009c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	f000 fa6d 	bl	800a180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	b002      	add	sp, #8
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	fffffeff 	.word	0xfffffeff

08009cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	223c      	movs	r2, #60	; 0x3c
 8009cc2:	5c9b      	ldrb	r3, [r3, r2]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_TIM_ConfigClockSource+0x18>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e0b7      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x188>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	223c      	movs	r2, #60	; 0x3c
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	223d      	movs	r2, #61	; 0x3d
 8009cd8:	2102      	movs	r1, #2
 8009cda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a57      	ldr	r2, [pc, #348]	; (8009e44 <HAL_TIM_ConfigClockSource+0x190>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4a56      	ldr	r2, [pc, #344]	; (8009e48 <HAL_TIM_ConfigClockSource+0x194>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2280      	movs	r2, #128	; 0x80
 8009d02:	0192      	lsls	r2, r2, #6
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d040      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0xd6>
 8009d08:	2280      	movs	r2, #128	; 0x80
 8009d0a:	0192      	lsls	r2, r2, #6
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d900      	bls.n	8009d12 <HAL_TIM_ConfigClockSource+0x5e>
 8009d10:	e088      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d12:	2280      	movs	r2, #128	; 0x80
 8009d14:	0152      	lsls	r2, r2, #5
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d100      	bne.n	8009d1c <HAL_TIM_ConfigClockSource+0x68>
 8009d1a:	e085      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x174>
 8009d1c:	2280      	movs	r2, #128	; 0x80
 8009d1e:	0152      	lsls	r2, r2, #5
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d900      	bls.n	8009d26 <HAL_TIM_ConfigClockSource+0x72>
 8009d24:	e07e      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d26:	2b70      	cmp	r3, #112	; 0x70
 8009d28:	d018      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0xa8>
 8009d2a:	d900      	bls.n	8009d2e <HAL_TIM_ConfigClockSource+0x7a>
 8009d2c:	e07a      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d2e:	2b60      	cmp	r3, #96	; 0x60
 8009d30:	d04f      	beq.n	8009dd2 <HAL_TIM_ConfigClockSource+0x11e>
 8009d32:	d900      	bls.n	8009d36 <HAL_TIM_ConfigClockSource+0x82>
 8009d34:	e076      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d36:	2b50      	cmp	r3, #80	; 0x50
 8009d38:	d03b      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0xfe>
 8009d3a:	d900      	bls.n	8009d3e <HAL_TIM_ConfigClockSource+0x8a>
 8009d3c:	e072      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d3e:	2b40      	cmp	r3, #64	; 0x40
 8009d40:	d057      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x13e>
 8009d42:	d900      	bls.n	8009d46 <HAL_TIM_ConfigClockSource+0x92>
 8009d44:	e06e      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d46:	2b30      	cmp	r3, #48	; 0x30
 8009d48:	d063      	beq.n	8009e12 <HAL_TIM_ConfigClockSource+0x15e>
 8009d4a:	d86b      	bhi.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d060      	beq.n	8009e12 <HAL_TIM_ConfigClockSource+0x15e>
 8009d50:	d868      	bhi.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d05d      	beq.n	8009e12 <HAL_TIM_ConfigClockSource+0x15e>
 8009d56:	2b10      	cmp	r3, #16
 8009d58:	d05b      	beq.n	8009e12 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009d5a:	e063      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	6899      	ldr	r1, [r3, #8]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f000 f980 	bl	800a070 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2277      	movs	r2, #119	; 0x77
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	609a      	str	r2, [r3, #8]
      break;
 8009d88:	e04f      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6818      	ldr	r0, [r3, #0]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	6899      	ldr	r1, [r3, #8]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	f000 f969 	bl	800a070 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689a      	ldr	r2, [r3, #8]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2180      	movs	r1, #128	; 0x80
 8009daa:	01c9      	lsls	r1, r1, #7
 8009dac:	430a      	orrs	r2, r1
 8009dae:	609a      	str	r2, [r3, #8]
      break;
 8009db0:	e03b      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6859      	ldr	r1, [r3, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	f000 f8da 	bl	8009f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2150      	movs	r1, #80	; 0x50
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f000 f934 	bl	800a038 <TIM_ITRx_SetConfig>
      break;
 8009dd0:	e02b      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6859      	ldr	r1, [r3, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	001a      	movs	r2, r3
 8009de0:	f000 f8f8 	bl	8009fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2160      	movs	r1, #96	; 0x60
 8009dea:	0018      	movs	r0, r3
 8009dec:	f000 f924 	bl	800a038 <TIM_ITRx_SetConfig>
      break;
 8009df0:	e01b      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	6859      	ldr	r1, [r3, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	001a      	movs	r2, r3
 8009e00:	f000 f8ba 	bl	8009f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2140      	movs	r1, #64	; 0x40
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f000 f914 	bl	800a038 <TIM_ITRx_SetConfig>
      break;
 8009e10:	e00b      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	0010      	movs	r0, r2
 8009e1e:	f000 f90b 	bl	800a038 <TIM_ITRx_SetConfig>
        break;
 8009e22:	e002      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009e24:	46c0      	nop			; (mov r8, r8)
 8009e26:	e000      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009e28:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	223d      	movs	r2, #61	; 0x3d
 8009e2e:	2101      	movs	r1, #1
 8009e30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	223c      	movs	r2, #60	; 0x3c
 8009e36:	2100      	movs	r1, #0
 8009e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b004      	add	sp, #16
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	ffceff88 	.word	0xffceff88
 8009e48:	ffff00ff 	.word	0xffff00ff

08009e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e54:	46c0      	nop			; (mov r8, r8)
 8009e56:	46bd      	mov	sp, r7
 8009e58:	b002      	add	sp, #8
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e64:	46c0      	nop			; (mov r8, r8)
 8009e66:	46bd      	mov	sp, r7
 8009e68:	b002      	add	sp, #8
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e74:	46c0      	nop			; (mov r8, r8)
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b002      	add	sp, #8
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a2f      	ldr	r2, [pc, #188]	; (8009f5c <TIM_Base_SetConfig+0xd0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d003      	beq.n	8009eac <TIM_Base_SetConfig+0x20>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a2e      	ldr	r2, [pc, #184]	; (8009f60 <TIM_Base_SetConfig+0xd4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d108      	bne.n	8009ebe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2270      	movs	r2, #112	; 0x70
 8009eb0:	4393      	bics	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <TIM_Base_SetConfig+0xd0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <TIM_Base_SetConfig+0x62>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <TIM_Base_SetConfig+0xd4>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00f      	beq.n	8009eee <TIM_Base_SetConfig+0x62>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <TIM_Base_SetConfig+0xd8>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00b      	beq.n	8009eee <TIM_Base_SetConfig+0x62>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a23      	ldr	r2, [pc, #140]	; (8009f68 <TIM_Base_SetConfig+0xdc>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d007      	beq.n	8009eee <TIM_Base_SetConfig+0x62>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a22      	ldr	r2, [pc, #136]	; (8009f6c <TIM_Base_SetConfig+0xe0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d003      	beq.n	8009eee <TIM_Base_SetConfig+0x62>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a21      	ldr	r2, [pc, #132]	; (8009f70 <TIM_Base_SetConfig+0xe4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d108      	bne.n	8009f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a20      	ldr	r2, [pc, #128]	; (8009f74 <TIM_Base_SetConfig+0xe8>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2280      	movs	r2, #128	; 0x80
 8009f04:	4393      	bics	r3, r2
 8009f06:	001a      	movs	r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <TIM_Base_SetConfig+0xd0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00b      	beq.n	8009f46 <TIM_Base_SetConfig+0xba>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a0d      	ldr	r2, [pc, #52]	; (8009f68 <TIM_Base_SetConfig+0xdc>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d007      	beq.n	8009f46 <TIM_Base_SetConfig+0xba>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a0c      	ldr	r2, [pc, #48]	; (8009f6c <TIM_Base_SetConfig+0xe0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d003      	beq.n	8009f46 <TIM_Base_SetConfig+0xba>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a0b      	ldr	r2, [pc, #44]	; (8009f70 <TIM_Base_SetConfig+0xe4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d103      	bne.n	8009f4e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	615a      	str	r2, [r3, #20]
}
 8009f54:	46c0      	nop			; (mov r8, r8)
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b004      	add	sp, #16
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40000400 	.word	0x40000400
 8009f64:	40002000 	.word	0x40002000
 8009f68:	40014000 	.word	0x40014000
 8009f6c:	40014400 	.word	0x40014400
 8009f70:	40014800 	.word	0x40014800
 8009f74:	fffffcff 	.word	0xfffffcff

08009f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4393      	bics	r3, r2
 8009f92:	001a      	movs	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	22f0      	movs	r2, #240	; 0xf0
 8009fa2:	4393      	bics	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	220a      	movs	r2, #10
 8009fb4:	4393      	bics	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	621a      	str	r2, [r3, #32]
}
 8009fcc:	46c0      	nop			; (mov r8, r8)
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	b006      	add	sp, #24
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	2210      	movs	r2, #16
 8009fe6:	4393      	bics	r3, r2
 8009fe8:	001a      	movs	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <TIM_TI2_ConfigInputStage+0x60>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	031b      	lsls	r3, r3, #12
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	22a0      	movs	r2, #160	; 0xa0
 800a010:	4393      	bics	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b006      	add	sp, #24
 800a030:	bd80      	pop	{r7, pc}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	ffff0fff 	.word	0xffff0fff

0800a038 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4a08      	ldr	r2, [pc, #32]	; (800a06c <TIM_ITRx_SetConfig+0x34>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	2207      	movs	r2, #7
 800a058:	4313      	orrs	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	609a      	str	r2, [r3, #8]
}
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	b004      	add	sp, #16
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	ffcfff8f 	.word	0xffcfff8f

0800a070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <TIM_ETR_SetConfig+0x3c>)
 800a088:	4013      	ands	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	021a      	lsls	r2, r3, #8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	431a      	orrs	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	4313      	orrs	r3, r2
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	609a      	str	r2, [r3, #8]
}
 800a0a4:	46c0      	nop			; (mov r8, r8)
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b006      	add	sp, #24
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	ffff00ff 	.word	0xffff00ff

0800a0b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	223c      	movs	r2, #60	; 0x3c
 800a0be:	5c9b      	ldrb	r3, [r3, r2]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d101      	bne.n	800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e04f      	b.n	800a168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	223c      	movs	r2, #60	; 0x3c
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	223d      	movs	r2, #61	; 0x3d
 800a0d4:	2102      	movs	r1, #2
 800a0d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a20      	ldr	r2, [pc, #128]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d108      	bne.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2270      	movs	r2, #112	; 0x70
 800a108:	4393      	bics	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a13      	ldr	r2, [pc, #76]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d009      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a12      	ldr	r2, [pc, #72]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d004      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a11      	ldr	r2, [pc, #68]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d10c      	bne.n	800a156 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2280      	movs	r2, #128	; 0x80
 800a140:	4393      	bics	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	223d      	movs	r2, #61	; 0x3d
 800a15a:	2101      	movs	r1, #1
 800a15c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	223c      	movs	r2, #60	; 0x3c
 800a162:	2100      	movs	r1, #0
 800a164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	0018      	movs	r0, r3
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	40012c00 	.word	0x40012c00
 800a174:	ff0fffff 	.word	0xff0fffff
 800a178:	40000400 	.word	0x40000400
 800a17c:	40014000 	.word	0x40014000

0800a180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a188:	46c0      	nop			; (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b002      	add	sp, #8
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a198:	46c0      	nop			; (mov r8, r8)
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b002      	add	sp, #8
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1a8:	46c0      	nop			; (mov r8, r8)
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <interfaceSelectLayout>:
//#include <math.h>
#include <stdlib.h>

uint8_t layoutsCounter = 5; //how many layouts are programmed

void interfaceSelectLayout(uint8_t l) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	0002      	movs	r2, r0
 800a1b8:	1dfb      	adds	r3, r7, #7
 800a1ba:	701a      	strb	r2, [r3, #0]

	if (l == 1) { //simple
 800a1bc:	1dfb      	adds	r3, r7, #7
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d000      	beq.n	800a1c6 <interfaceSelectLayout+0x16>
 800a1c4:	e09f      	b.n	800a306 <interfaceSelectLayout+0x156>

		showBarometer = 1;
 800a1c6:	4bf3      	ldr	r3, [pc, #972]	; (800a594 <interfaceSelectLayout+0x3e4>)
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	701a      	strb	r2, [r3, #0]
		showBatteryState = 0;
 800a1cc:	4bf2      	ldr	r3, [pc, #968]	; (800a598 <interfaceSelectLayout+0x3e8>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800a1d2:	4bf2      	ldr	r3, [pc, #968]	; (800a59c <interfaceSelectLayout+0x3ec>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a1d8:	4bf1      	ldr	r3, [pc, #964]	; (800a5a0 <interfaceSelectLayout+0x3f0>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a1de:	4bf1      	ldr	r3, [pc, #964]	; (800a5a4 <interfaceSelectLayout+0x3f4>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a1e4:	4bf0      	ldr	r3, [pc, #960]	; (800a5a8 <interfaceSelectLayout+0x3f8>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a1ea:	4bf0      	ldr	r3, [pc, #960]	; (800a5ac <interfaceSelectLayout+0x3fc>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a1f0:	4bef      	ldr	r3, [pc, #956]	; (800a5b0 <interfaceSelectLayout+0x400>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a1f6:	4bef      	ldr	r3, [pc, #956]	; (800a5b4 <interfaceSelectLayout+0x404>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a1fc:	4bee      	ldr	r3, [pc, #952]	; (800a5b8 <interfaceSelectLayout+0x408>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a202:	4bee      	ldr	r3, [pc, #952]	; (800a5bc <interfaceSelectLayout+0x40c>)
 800a204:	2201      	movs	r2, #1
 800a206:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a208:	4bed      	ldr	r3, [pc, #948]	; (800a5c0 <interfaceSelectLayout+0x410>)
 800a20a:	2201      	movs	r2, #1
 800a20c:	701a      	strb	r2, [r3, #0]

		//sensor readings positions

		temperatureX = 38;
 800a20e:	4bed      	ldr	r3, [pc, #948]	; (800a5c4 <interfaceSelectLayout+0x414>)
 800a210:	2226      	movs	r2, #38	; 0x26
 800a212:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a214:	4bec      	ldr	r3, [pc, #944]	; (800a5c8 <interfaceSelectLayout+0x418>)
 800a216:	222c      	movs	r2, #44	; 0x2c
 800a218:	701a      	strb	r2, [r3, #0]

		humidityX = 130;
 800a21a:	4bec      	ldr	r3, [pc, #944]	; (800a5cc <interfaceSelectLayout+0x41c>)
 800a21c:	2282      	movs	r2, #130	; 0x82
 800a21e:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a220:	4beb      	ldr	r3, [pc, #940]	; (800a5d0 <interfaceSelectLayout+0x420>)
 800a222:	224b      	movs	r2, #75	; 0x4b
 800a224:	701a      	strb	r2, [r3, #0]

		pressureX = 17;
 800a226:	4beb      	ldr	r3, [pc, #940]	; (800a5d4 <interfaceSelectLayout+0x424>)
 800a228:	2211      	movs	r2, #17
 800a22a:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a22c:	4bea      	ldr	r3, [pc, #936]	; (800a5d8 <interfaceSelectLayout+0x428>)
 800a22e:	2232      	movs	r2, #50	; 0x32
 800a230:	701a      	strb	r2, [r3, #0]

		//compass and altitude
		compassX = 30;
 800a232:	4bea      	ldr	r3, [pc, #936]	; (800a5dc <interfaceSelectLayout+0x42c>)
 800a234:	221e      	movs	r2, #30
 800a236:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a238:	4be9      	ldr	r3, [pc, #932]	; (800a5e0 <interfaceSelectLayout+0x430>)
 800a23a:	224e      	movs	r2, #78	; 0x4e
 800a23c:	701a      	strb	r2, [r3, #0]

		//date position
		dateX = 153;
 800a23e:	4be9      	ldr	r3, [pc, #932]	; (800a5e4 <interfaceSelectLayout+0x434>)
 800a240:	2299      	movs	r2, #153	; 0x99
 800a242:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a244:	4be8      	ldr	r3, [pc, #928]	; (800a5e8 <interfaceSelectLayout+0x438>)
 800a246:	225f      	movs	r2, #95	; 0x5f
 800a248:	701a      	strb	r2, [r3, #0]

		batteryStateStartX = 135;
 800a24a:	4be8      	ldr	r3, [pc, #928]	; (800a5ec <interfaceSelectLayout+0x43c>)
 800a24c:	2287      	movs	r2, #135	; 0x87
 800a24e:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a250:	4be7      	ldr	r3, [pc, #924]	; (800a5f0 <interfaceSelectLayout+0x440>)
 800a252:	2287      	movs	r2, #135	; 0x87
 800a254:	701a      	strb	r2, [r3, #0]

		pointerShadowShift = 2;
 800a256:	4be7      	ldr	r3, [pc, #924]	; (800a5f4 <interfaceSelectLayout+0x444>)
 800a258:	2202      	movs	r2, #2
 800a25a:	701a      	strb	r2, [r3, #0]

		chronoDecimalsStartX = 100;
 800a25c:	4be6      	ldr	r3, [pc, #920]	; (800a5f8 <interfaceSelectLayout+0x448>)
 800a25e:	2264      	movs	r2, #100	; 0x64
 800a260:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a262:	4be6      	ldr	r3, [pc, #920]	; (800a5fc <interfaceSelectLayout+0x44c>)
 800a264:	2232      	movs	r2, #50	; 0x32
 800a266:	701a      	strb	r2, [r3, #0]

		chronoMinutesStartX = 100;
 800a268:	4be5      	ldr	r3, [pc, #916]	; (800a600 <interfaceSelectLayout+0x450>)
 800a26a:	2264      	movs	r2, #100	; 0x64
 800a26c:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a26e:	4be5      	ldr	r3, [pc, #916]	; (800a604 <interfaceSelectLayout+0x454>)
 800a270:	2296      	movs	r2, #150	; 0x96
 800a272:	701a      	strb	r2, [r3, #0]

		secondsStartX = 100;
 800a274:	4be4      	ldr	r3, [pc, #912]	; (800a608 <interfaceSelectLayout+0x458>)
 800a276:	2264      	movs	r2, #100	; 0x64
 800a278:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a27a:	4be4      	ldr	r3, [pc, #912]	; (800a60c <interfaceSelectLayout+0x45c>)
 800a27c:	2296      	movs	r2, #150	; 0x96
 800a27e:	701a      	strb	r2, [r3, #0]

		mainStartX = 100;
 800a280:	4be3      	ldr	r3, [pc, #908]	; (800a610 <interfaceSelectLayout+0x460>)
 800a282:	2264      	movs	r2, #100	; 0x64
 800a284:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a286:	4be3      	ldr	r3, [pc, #908]	; (800a614 <interfaceSelectLayout+0x464>)
 800a288:	2264      	movs	r2, #100	; 0x64
 800a28a:	701a      	strb	r2, [r3, #0]

		mainBoardRadius = 97;
 800a28c:	4be2      	ldr	r3, [pc, #904]	; (800a618 <interfaceSelectLayout+0x468>)
 800a28e:	2261      	movs	r2, #97	; 0x61
 800a290:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a292:	4be2      	ldr	r3, [pc, #904]	; (800a61c <interfaceSelectLayout+0x46c>)
 800a294:	221c      	movs	r2, #28
 800a296:	701a      	strb	r2, [r3, #0]

		//pointers lengths

		hourPointerLength = 45;
 800a298:	4be1      	ldr	r3, [pc, #900]	; (800a620 <interfaceSelectLayout+0x470>)
 800a29a:	222d      	movs	r2, #45	; 0x2d
 800a29c:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 70;
 800a29e:	4be1      	ldr	r3, [pc, #900]	; (800a624 <interfaceSelectLayout+0x474>)
 800a2a0:	2246      	movs	r2, #70	; 0x46
 800a2a2:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a2a4:	4be0      	ldr	r3, [pc, #896]	; (800a628 <interfaceSelectLayout+0x478>)
 800a2a6:	2214      	movs	r2, #20
 800a2a8:	701a      	strb	r2, [r3, #0]

		chronoDecimalsPointerLength = 20;
 800a2aa:	4be0      	ldr	r3, [pc, #896]	; (800a62c <interfaceSelectLayout+0x47c>)
 800a2ac:	2214      	movs	r2, #20
 800a2ae:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a2b0:	4bdf      	ldr	r3, [pc, #892]	; (800a630 <interfaceSelectLayout+0x480>)
 800a2b2:	2214      	movs	r2, #20
 800a2b4:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a2b6:	4bdf      	ldr	r3, [pc, #892]	; (800a634 <interfaceSelectLayout+0x484>)
 800a2b8:	2250      	movs	r2, #80	; 0x50
 800a2ba:	701a      	strb	r2, [r3, #0]

		batteryStatePointerLength = 35;
 800a2bc:	4bde      	ldr	r3, [pc, #888]	; (800a638 <interfaceSelectLayout+0x488>)
 800a2be:	2223      	movs	r2, #35	; 0x23
 800a2c0:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a2c2:	4bde      	ldr	r3, [pc, #888]	; (800a63c <interfaceSelectLayout+0x48c>)
 800a2c4:	2264      	movs	r2, #100	; 0x64
 800a2c6:	701a      	strb	r2, [r3, #0]

		//index lengths
		secondsIndexLength = 4;
 800a2c8:	4bdd      	ldr	r3, [pc, #884]	; (800a640 <interfaceSelectLayout+0x490>)
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a2ce:	4bdd      	ldr	r3, [pc, #884]	; (800a644 <interfaceSelectLayout+0x494>)
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a2d4:	4bdc      	ldr	r3, [pc, #880]	; (800a648 <interfaceSelectLayout+0x498>)
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a2da:	4bdc      	ldr	r3, [pc, #880]	; (800a64c <interfaceSelectLayout+0x49c>)
 800a2dc:	220a      	movs	r2, #10
 800a2de:	701a      	strb	r2, [r3, #0]

		batteryStateIndexLength = 15;
 800a2e0:	4bdb      	ldr	r3, [pc, #876]	; (800a650 <interfaceSelectLayout+0x4a0>)
 800a2e2:	220f      	movs	r2, #15
 800a2e4:	701a      	strb	r2, [r3, #0]

		//pointer shifts
		batteryPointerShift = 20;
 800a2e6:	4bdb      	ldr	r3, [pc, #876]	; (800a654 <interfaceSelectLayout+0x4a4>)
 800a2e8:	2214      	movs	r2, #20
 800a2ea:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a2ec:	4bda      	ldr	r3, [pc, #872]	; (800a658 <interfaceSelectLayout+0x4a8>)
 800a2ee:	2255      	movs	r2, #85	; 0x55
 800a2f0:	701a      	strb	r2, [r3, #0]

		//moon Phase
		moonPhaseX = 100;
 800a2f2:	4bda      	ldr	r3, [pc, #872]	; (800a65c <interfaceSelectLayout+0x4ac>)
 800a2f4:	2264      	movs	r2, #100	; 0x64
 800a2f6:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a2f8:	4bd9      	ldr	r3, [pc, #868]	; (800a660 <interfaceSelectLayout+0x4b0>)
 800a2fa:	2232      	movs	r2, #50	; 0x32
 800a2fc:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 15;
 800a2fe:	4bd9      	ldr	r3, [pc, #868]	; (800a664 <interfaceSelectLayout+0x4b4>)
 800a300:	220f      	movs	r2, #15
 800a302:	701a      	strb	r2, [r3, #0]
		//pointer shifts
		batteryPointerShift = 20;
		pressurePointerShift = 85;
	}

}
 800a304:	e2f4      	b.n	800a8f0 <interfaceSelectLayout+0x740>
	else if (l == 2) { //navi
 800a306:	1dfb      	adds	r3, r7, #7
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d000      	beq.n	800a310 <interfaceSelectLayout+0x160>
 800a30e:	e09f      	b.n	800a450 <interfaceSelectLayout+0x2a0>
		showBarometer = 1;
 800a310:	4ba0      	ldr	r3, [pc, #640]	; (800a594 <interfaceSelectLayout+0x3e4>)
 800a312:	2201      	movs	r2, #1
 800a314:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a316:	4ba0      	ldr	r3, [pc, #640]	; (800a598 <interfaceSelectLayout+0x3e8>)
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a31c:	4b9f      	ldr	r3, [pc, #636]	; (800a59c <interfaceSelectLayout+0x3ec>)
 800a31e:	2201      	movs	r2, #1
 800a320:	701a      	strb	r2, [r3, #0]
		showNavi = 1;
 800a322:	4b9f      	ldr	r3, [pc, #636]	; (800a5a0 <interfaceSelectLayout+0x3f0>)
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a328:	4b9e      	ldr	r3, [pc, #632]	; (800a5a4 <interfaceSelectLayout+0x3f4>)
 800a32a:	2201      	movs	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a32e:	4b9e      	ldr	r3, [pc, #632]	; (800a5a8 <interfaceSelectLayout+0x3f8>)
 800a330:	2201      	movs	r2, #1
 800a332:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a334:	4b9d      	ldr	r3, [pc, #628]	; (800a5ac <interfaceSelectLayout+0x3fc>)
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a33a:	4b9d      	ldr	r3, [pc, #628]	; (800a5b0 <interfaceSelectLayout+0x400>)
 800a33c:	2201      	movs	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a340:	4b9c      	ldr	r3, [pc, #624]	; (800a5b4 <interfaceSelectLayout+0x404>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a346:	4b9c      	ldr	r3, [pc, #624]	; (800a5b8 <interfaceSelectLayout+0x408>)
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a34c:	4b9b      	ldr	r3, [pc, #620]	; (800a5bc <interfaceSelectLayout+0x40c>)
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a352:	4b9b      	ldr	r3, [pc, #620]	; (800a5c0 <interfaceSelectLayout+0x410>)
 800a354:	2201      	movs	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a358:	4b9a      	ldr	r3, [pc, #616]	; (800a5c4 <interfaceSelectLayout+0x414>)
 800a35a:	2226      	movs	r2, #38	; 0x26
 800a35c:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a35e:	4b9a      	ldr	r3, [pc, #616]	; (800a5c8 <interfaceSelectLayout+0x418>)
 800a360:	222c      	movs	r2, #44	; 0x2c
 800a362:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a364:	4b99      	ldr	r3, [pc, #612]	; (800a5cc <interfaceSelectLayout+0x41c>)
 800a366:	2282      	movs	r2, #130	; 0x82
 800a368:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a36a:	4b99      	ldr	r3, [pc, #612]	; (800a5d0 <interfaceSelectLayout+0x420>)
 800a36c:	224b      	movs	r2, #75	; 0x4b
 800a36e:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a370:	4b98      	ldr	r3, [pc, #608]	; (800a5d4 <interfaceSelectLayout+0x424>)
 800a372:	2211      	movs	r2, #17
 800a374:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a376:	4b98      	ldr	r3, [pc, #608]	; (800a5d8 <interfaceSelectLayout+0x428>)
 800a378:	2232      	movs	r2, #50	; 0x32
 800a37a:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a37c:	4b97      	ldr	r3, [pc, #604]	; (800a5dc <interfaceSelectLayout+0x42c>)
 800a37e:	221e      	movs	r2, #30
 800a380:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a382:	4b97      	ldr	r3, [pc, #604]	; (800a5e0 <interfaceSelectLayout+0x430>)
 800a384:	224e      	movs	r2, #78	; 0x4e
 800a386:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a388:	4b96      	ldr	r3, [pc, #600]	; (800a5e4 <interfaceSelectLayout+0x434>)
 800a38a:	2299      	movs	r2, #153	; 0x99
 800a38c:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a38e:	4b96      	ldr	r3, [pc, #600]	; (800a5e8 <interfaceSelectLayout+0x438>)
 800a390:	225f      	movs	r2, #95	; 0x5f
 800a392:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a394:	4b95      	ldr	r3, [pc, #596]	; (800a5ec <interfaceSelectLayout+0x43c>)
 800a396:	2287      	movs	r2, #135	; 0x87
 800a398:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a39a:	4b95      	ldr	r3, [pc, #596]	; (800a5f0 <interfaceSelectLayout+0x440>)
 800a39c:	2287      	movs	r2, #135	; 0x87
 800a39e:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a3a0:	4b94      	ldr	r3, [pc, #592]	; (800a5f4 <interfaceSelectLayout+0x444>)
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a3a6:	4b94      	ldr	r3, [pc, #592]	; (800a5f8 <interfaceSelectLayout+0x448>)
 800a3a8:	2264      	movs	r2, #100	; 0x64
 800a3aa:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a3ac:	4b93      	ldr	r3, [pc, #588]	; (800a5fc <interfaceSelectLayout+0x44c>)
 800a3ae:	2232      	movs	r2, #50	; 0x32
 800a3b0:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a3b2:	4b93      	ldr	r3, [pc, #588]	; (800a600 <interfaceSelectLayout+0x450>)
 800a3b4:	2264      	movs	r2, #100	; 0x64
 800a3b6:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a3b8:	4b92      	ldr	r3, [pc, #584]	; (800a604 <interfaceSelectLayout+0x454>)
 800a3ba:	2296      	movs	r2, #150	; 0x96
 800a3bc:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a3be:	4b92      	ldr	r3, [pc, #584]	; (800a608 <interfaceSelectLayout+0x458>)
 800a3c0:	2264      	movs	r2, #100	; 0x64
 800a3c2:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a3c4:	4b91      	ldr	r3, [pc, #580]	; (800a60c <interfaceSelectLayout+0x45c>)
 800a3c6:	2296      	movs	r2, #150	; 0x96
 800a3c8:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a3ca:	4b91      	ldr	r3, [pc, #580]	; (800a610 <interfaceSelectLayout+0x460>)
 800a3cc:	2264      	movs	r2, #100	; 0x64
 800a3ce:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a3d0:	4b90      	ldr	r3, [pc, #576]	; (800a614 <interfaceSelectLayout+0x464>)
 800a3d2:	2264      	movs	r2, #100	; 0x64
 800a3d4:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a3d6:	4b90      	ldr	r3, [pc, #576]	; (800a618 <interfaceSelectLayout+0x468>)
 800a3d8:	2261      	movs	r2, #97	; 0x61
 800a3da:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a3dc:	4b8f      	ldr	r3, [pc, #572]	; (800a61c <interfaceSelectLayout+0x46c>)
 800a3de:	221c      	movs	r2, #28
 800a3e0:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 45;
 800a3e2:	4b8f      	ldr	r3, [pc, #572]	; (800a620 <interfaceSelectLayout+0x470>)
 800a3e4:	222d      	movs	r2, #45	; 0x2d
 800a3e6:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 70;
 800a3e8:	4b8e      	ldr	r3, [pc, #568]	; (800a624 <interfaceSelectLayout+0x474>)
 800a3ea:	2246      	movs	r2, #70	; 0x46
 800a3ec:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a3ee:	4b8e      	ldr	r3, [pc, #568]	; (800a628 <interfaceSelectLayout+0x478>)
 800a3f0:	2214      	movs	r2, #20
 800a3f2:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a3f4:	4b8d      	ldr	r3, [pc, #564]	; (800a62c <interfaceSelectLayout+0x47c>)
 800a3f6:	2214      	movs	r2, #20
 800a3f8:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a3fa:	4b8d      	ldr	r3, [pc, #564]	; (800a630 <interfaceSelectLayout+0x480>)
 800a3fc:	2214      	movs	r2, #20
 800a3fe:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a400:	4b8c      	ldr	r3, [pc, #560]	; (800a634 <interfaceSelectLayout+0x484>)
 800a402:	2250      	movs	r2, #80	; 0x50
 800a404:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a406:	4b8c      	ldr	r3, [pc, #560]	; (800a638 <interfaceSelectLayout+0x488>)
 800a408:	2223      	movs	r2, #35	; 0x23
 800a40a:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a40c:	4b8b      	ldr	r3, [pc, #556]	; (800a63c <interfaceSelectLayout+0x48c>)
 800a40e:	2264      	movs	r2, #100	; 0x64
 800a410:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a412:	4b8b      	ldr	r3, [pc, #556]	; (800a640 <interfaceSelectLayout+0x490>)
 800a414:	2204      	movs	r2, #4
 800a416:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a418:	4b8a      	ldr	r3, [pc, #552]	; (800a644 <interfaceSelectLayout+0x494>)
 800a41a:	2202      	movs	r2, #2
 800a41c:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a41e:	4b8a      	ldr	r3, [pc, #552]	; (800a648 <interfaceSelectLayout+0x498>)
 800a420:	2204      	movs	r2, #4
 800a422:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a424:	4b89      	ldr	r3, [pc, #548]	; (800a64c <interfaceSelectLayout+0x49c>)
 800a426:	220a      	movs	r2, #10
 800a428:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a42a:	4b89      	ldr	r3, [pc, #548]	; (800a650 <interfaceSelectLayout+0x4a0>)
 800a42c:	220f      	movs	r2, #15
 800a42e:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a430:	4b88      	ldr	r3, [pc, #544]	; (800a654 <interfaceSelectLayout+0x4a4>)
 800a432:	2214      	movs	r2, #20
 800a434:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a436:	4b88      	ldr	r3, [pc, #544]	; (800a658 <interfaceSelectLayout+0x4a8>)
 800a438:	2255      	movs	r2, #85	; 0x55
 800a43a:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a43c:	4b87      	ldr	r3, [pc, #540]	; (800a65c <interfaceSelectLayout+0x4ac>)
 800a43e:	2296      	movs	r2, #150	; 0x96
 800a440:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a442:	4b87      	ldr	r3, [pc, #540]	; (800a660 <interfaceSelectLayout+0x4b0>)
 800a444:	2232      	movs	r2, #50	; 0x32
 800a446:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800a448:	4b86      	ldr	r3, [pc, #536]	; (800a664 <interfaceSelectLayout+0x4b4>)
 800a44a:	220a      	movs	r2, #10
 800a44c:	701a      	strb	r2, [r3, #0]
}
 800a44e:	e24f      	b.n	800a8f0 <interfaceSelectLayout+0x740>
	else if (l == 3) { //digital
 800a450:	1dfb      	adds	r3, r7, #7
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b03      	cmp	r3, #3
 800a456:	d000      	beq.n	800a45a <interfaceSelectLayout+0x2aa>
 800a458:	e10a      	b.n	800a670 <interfaceSelectLayout+0x4c0>
		showBarometer = 0;
 800a45a:	4b4e      	ldr	r3, [pc, #312]	; (800a594 <interfaceSelectLayout+0x3e4>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a460:	4b4d      	ldr	r3, [pc, #308]	; (800a598 <interfaceSelectLayout+0x3e8>)
 800a462:	2201      	movs	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a466:	4b4d      	ldr	r3, [pc, #308]	; (800a59c <interfaceSelectLayout+0x3ec>)
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a46c:	4b4c      	ldr	r3, [pc, #304]	; (800a5a0 <interfaceSelectLayout+0x3f0>)
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a472:	4b4c      	ldr	r3, [pc, #304]	; (800a5a4 <interfaceSelectLayout+0x3f4>)
 800a474:	2201      	movs	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a478:	4b4b      	ldr	r3, [pc, #300]	; (800a5a8 <interfaceSelectLayout+0x3f8>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a47e:	4b4b      	ldr	r3, [pc, #300]	; (800a5ac <interfaceSelectLayout+0x3fc>)
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a484:	4b4a      	ldr	r3, [pc, #296]	; (800a5b0 <interfaceSelectLayout+0x400>)
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 1;
 800a48a:	4b4a      	ldr	r3, [pc, #296]	; (800a5b4 <interfaceSelectLayout+0x404>)
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a490:	4b49      	ldr	r3, [pc, #292]	; (800a5b8 <interfaceSelectLayout+0x408>)
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800a496:	4b49      	ldr	r3, [pc, #292]	; (800a5bc <interfaceSelectLayout+0x40c>)
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a49c:	4b48      	ldr	r3, [pc, #288]	; (800a5c0 <interfaceSelectLayout+0x410>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	701a      	strb	r2, [r3, #0]
		digitalX = 60;
 800a4a2:	4b71      	ldr	r3, [pc, #452]	; (800a668 <interfaceSelectLayout+0x4b8>)
 800a4a4:	223c      	movs	r2, #60	; 0x3c
 800a4a6:	701a      	strb	r2, [r3, #0]
		digitalY = 25;
 800a4a8:	4b70      	ldr	r3, [pc, #448]	; (800a66c <interfaceSelectLayout+0x4bc>)
 800a4aa:	2219      	movs	r2, #25
 800a4ac:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800a4ae:	4b45      	ldr	r3, [pc, #276]	; (800a5c4 <interfaceSelectLayout+0x414>)
 800a4b0:	2255      	movs	r2, #85	; 0x55
 800a4b2:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800a4b4:	4b44      	ldr	r3, [pc, #272]	; (800a5c8 <interfaceSelectLayout+0x418>)
 800a4b6:	221e      	movs	r2, #30
 800a4b8:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a4ba:	4b44      	ldr	r3, [pc, #272]	; (800a5cc <interfaceSelectLayout+0x41c>)
 800a4bc:	2282      	movs	r2, #130	; 0x82
 800a4be:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a4c0:	4b43      	ldr	r3, [pc, #268]	; (800a5d0 <interfaceSelectLayout+0x420>)
 800a4c2:	224b      	movs	r2, #75	; 0x4b
 800a4c4:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a4c6:	4b43      	ldr	r3, [pc, #268]	; (800a5d4 <interfaceSelectLayout+0x424>)
 800a4c8:	2211      	movs	r2, #17
 800a4ca:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a4cc:	4b42      	ldr	r3, [pc, #264]	; (800a5d8 <interfaceSelectLayout+0x428>)
 800a4ce:	2232      	movs	r2, #50	; 0x32
 800a4d0:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a4d2:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <interfaceSelectLayout+0x42c>)
 800a4d4:	221e      	movs	r2, #30
 800a4d6:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a4d8:	4b41      	ldr	r3, [pc, #260]	; (800a5e0 <interfaceSelectLayout+0x430>)
 800a4da:	224e      	movs	r2, #78	; 0x4e
 800a4dc:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a4de:	4b41      	ldr	r3, [pc, #260]	; (800a5e4 <interfaceSelectLayout+0x434>)
 800a4e0:	2299      	movs	r2, #153	; 0x99
 800a4e2:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a4e4:	4b40      	ldr	r3, [pc, #256]	; (800a5e8 <interfaceSelectLayout+0x438>)
 800a4e6:	225f      	movs	r2, #95	; 0x5f
 800a4e8:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a4ea:	4b40      	ldr	r3, [pc, #256]	; (800a5ec <interfaceSelectLayout+0x43c>)
 800a4ec:	2287      	movs	r2, #135	; 0x87
 800a4ee:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a4f0:	4b3f      	ldr	r3, [pc, #252]	; (800a5f0 <interfaceSelectLayout+0x440>)
 800a4f2:	2287      	movs	r2, #135	; 0x87
 800a4f4:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a4f6:	4b3f      	ldr	r3, [pc, #252]	; (800a5f4 <interfaceSelectLayout+0x444>)
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800a4fc:	4b3e      	ldr	r3, [pc, #248]	; (800a5f8 <interfaceSelectLayout+0x448>)
 800a4fe:	2232      	movs	r2, #50	; 0x32
 800a500:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800a502:	4b3e      	ldr	r3, [pc, #248]	; (800a5fc <interfaceSelectLayout+0x44c>)
 800a504:	2264      	movs	r2, #100	; 0x64
 800a506:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a508:	4b3d      	ldr	r3, [pc, #244]	; (800a600 <interfaceSelectLayout+0x450>)
 800a50a:	2264      	movs	r2, #100	; 0x64
 800a50c:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a50e:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <interfaceSelectLayout+0x454>)
 800a510:	2296      	movs	r2, #150	; 0x96
 800a512:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a514:	4b3c      	ldr	r3, [pc, #240]	; (800a608 <interfaceSelectLayout+0x458>)
 800a516:	2264      	movs	r2, #100	; 0x64
 800a518:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a51a:	4b3c      	ldr	r3, [pc, #240]	; (800a60c <interfaceSelectLayout+0x45c>)
 800a51c:	2296      	movs	r2, #150	; 0x96
 800a51e:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a520:	4b3b      	ldr	r3, [pc, #236]	; (800a610 <interfaceSelectLayout+0x460>)
 800a522:	2264      	movs	r2, #100	; 0x64
 800a524:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a526:	4b3b      	ldr	r3, [pc, #236]	; (800a614 <interfaceSelectLayout+0x464>)
 800a528:	2264      	movs	r2, #100	; 0x64
 800a52a:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a52c:	4b3a      	ldr	r3, [pc, #232]	; (800a618 <interfaceSelectLayout+0x468>)
 800a52e:	2261      	movs	r2, #97	; 0x61
 800a530:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a532:	4b3a      	ldr	r3, [pc, #232]	; (800a61c <interfaceSelectLayout+0x46c>)
 800a534:	221c      	movs	r2, #28
 800a536:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 45;
 800a538:	4b39      	ldr	r3, [pc, #228]	; (800a620 <interfaceSelectLayout+0x470>)
 800a53a:	222d      	movs	r2, #45	; 0x2d
 800a53c:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 70;
 800a53e:	4b39      	ldr	r3, [pc, #228]	; (800a624 <interfaceSelectLayout+0x474>)
 800a540:	2246      	movs	r2, #70	; 0x46
 800a542:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a544:	4b38      	ldr	r3, [pc, #224]	; (800a628 <interfaceSelectLayout+0x478>)
 800a546:	2214      	movs	r2, #20
 800a548:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a54a:	4b38      	ldr	r3, [pc, #224]	; (800a62c <interfaceSelectLayout+0x47c>)
 800a54c:	2214      	movs	r2, #20
 800a54e:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a550:	4b37      	ldr	r3, [pc, #220]	; (800a630 <interfaceSelectLayout+0x480>)
 800a552:	2214      	movs	r2, #20
 800a554:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a556:	4b37      	ldr	r3, [pc, #220]	; (800a634 <interfaceSelectLayout+0x484>)
 800a558:	2250      	movs	r2, #80	; 0x50
 800a55a:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a55c:	4b36      	ldr	r3, [pc, #216]	; (800a638 <interfaceSelectLayout+0x488>)
 800a55e:	2223      	movs	r2, #35	; 0x23
 800a560:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a562:	4b36      	ldr	r3, [pc, #216]	; (800a63c <interfaceSelectLayout+0x48c>)
 800a564:	2264      	movs	r2, #100	; 0x64
 800a566:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a568:	4b35      	ldr	r3, [pc, #212]	; (800a640 <interfaceSelectLayout+0x490>)
 800a56a:	2204      	movs	r2, #4
 800a56c:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a56e:	4b35      	ldr	r3, [pc, #212]	; (800a644 <interfaceSelectLayout+0x494>)
 800a570:	2202      	movs	r2, #2
 800a572:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a574:	4b34      	ldr	r3, [pc, #208]	; (800a648 <interfaceSelectLayout+0x498>)
 800a576:	2204      	movs	r2, #4
 800a578:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a57a:	4b34      	ldr	r3, [pc, #208]	; (800a64c <interfaceSelectLayout+0x49c>)
 800a57c:	220a      	movs	r2, #10
 800a57e:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a580:	4b33      	ldr	r3, [pc, #204]	; (800a650 <interfaceSelectLayout+0x4a0>)
 800a582:	220f      	movs	r2, #15
 800a584:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a586:	4b33      	ldr	r3, [pc, #204]	; (800a654 <interfaceSelectLayout+0x4a4>)
 800a588:	2214      	movs	r2, #20
 800a58a:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a58c:	4b32      	ldr	r3, [pc, #200]	; (800a658 <interfaceSelectLayout+0x4a8>)
 800a58e:	2255      	movs	r2, #85	; 0x55
 800a590:	701a      	strb	r2, [r3, #0]
}
 800a592:	e1ad      	b.n	800a8f0 <interfaceSelectLayout+0x740>
 800a594:	20000149 	.word	0x20000149
 800a598:	20000238 	.word	0x20000238
 800a59c:	20000230 	.word	0x20000230
 800a5a0:	200001ed 	.word	0x200001ed
 800a5a4:	20000142 	.word	0x20000142
 800a5a8:	200003ea 	.word	0x200003ea
 800a5ac:	20000132 	.word	0x20000132
 800a5b0:	20000440 	.word	0x20000440
 800a5b4:	20000490 	.word	0x20000490
 800a5b8:	2000047a 	.word	0x2000047a
 800a5bc:	20000240 	.word	0x20000240
 800a5c0:	200003be 	.word	0x200003be
 800a5c4:	200003d1 	.word	0x200003d1
 800a5c8:	200001ec 	.word	0x200001ec
 800a5cc:	2000049a 	.word	0x2000049a
 800a5d0:	200002c6 	.word	0x200002c6
 800a5d4:	20000242 	.word	0x20000242
 800a5d8:	2000014a 	.word	0x2000014a
 800a5dc:	20000479 	.word	0x20000479
 800a5e0:	200002c8 	.word	0x200002c8
 800a5e4:	20000482 	.word	0x20000482
 800a5e8:	200001b0 	.word	0x200001b0
 800a5ec:	20000449 	.word	0x20000449
 800a5f0:	200004a0 	.word	0x200004a0
 800a5f4:	20000141 	.word	0x20000141
 800a5f8:	200003ec 	.word	0x200003ec
 800a5fc:	200003ed 	.word	0x200003ed
 800a600:	20000480 	.word	0x20000480
 800a604:	2000045a 	.word	0x2000045a
 800a608:	2000047b 	.word	0x2000047b
 800a60c:	200001fa 	.word	0x200001fa
 800a610:	200002c7 	.word	0x200002c7
 800a614:	2000013a 	.word	0x2000013a
 800a618:	200003cc 	.word	0x200003cc
 800a61c:	20000120 	.word	0x20000120
 800a620:	20000143 	.word	0x20000143
 800a624:	2000043f 	.word	0x2000043f
 800a628:	2000043d 	.word	0x2000043d
 800a62c:	20000492 	.word	0x20000492
 800a630:	20000140 	.word	0x20000140
 800a634:	20000239 	.word	0x20000239
 800a638:	20000331 	.word	0x20000331
 800a63c:	20000460 	.word	0x20000460
 800a640:	20000128 	.word	0x20000128
 800a644:	20000234 	.word	0x20000234
 800a648:	200003bf 	.word	0x200003bf
 800a64c:	200002c2 	.word	0x200002c2
 800a650:	200003eb 	.word	0x200003eb
 800a654:	20000148 	.word	0x20000148
 800a658:	200003d0 	.word	0x200003d0
 800a65c:	20000491 	.word	0x20000491
 800a660:	20000458 	.word	0x20000458
 800a664:	2000014c 	.word	0x2000014c
 800a668:	200003e9 	.word	0x200003e9
 800a66c:	20000232 	.word	0x20000232
	else if (l == 4) { //seconds
 800a670:	1dfb      	adds	r3, r7, #7
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b04      	cmp	r3, #4
 800a676:	d000      	beq.n	800a67a <interfaceSelectLayout+0x4ca>
 800a678:	e099      	b.n	800a7ae <interfaceSelectLayout+0x5fe>
		showBarometer = 1;
 800a67a:	4b9f      	ldr	r3, [pc, #636]	; (800a8f8 <interfaceSelectLayout+0x748>)
 800a67c:	2201      	movs	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a680:	4b9e      	ldr	r3, [pc, #632]	; (800a8fc <interfaceSelectLayout+0x74c>)
 800a682:	2201      	movs	r2, #1
 800a684:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a686:	4b9e      	ldr	r3, [pc, #632]	; (800a900 <interfaceSelectLayout+0x750>)
 800a688:	2201      	movs	r2, #1
 800a68a:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a68c:	4b9d      	ldr	r3, [pc, #628]	; (800a904 <interfaceSelectLayout+0x754>)
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a692:	4b9d      	ldr	r3, [pc, #628]	; (800a908 <interfaceSelectLayout+0x758>)
 800a694:	2201      	movs	r2, #1
 800a696:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a698:	4b9c      	ldr	r3, [pc, #624]	; (800a90c <interfaceSelectLayout+0x75c>)
 800a69a:	2201      	movs	r2, #1
 800a69c:	701a      	strb	r2, [r3, #0]
		showSeconds = 1;
 800a69e:	4b9c      	ldr	r3, [pc, #624]	; (800a910 <interfaceSelectLayout+0x760>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a6a4:	4b9b      	ldr	r3, [pc, #620]	; (800a914 <interfaceSelectLayout+0x764>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a6aa:	4b9b      	ldr	r3, [pc, #620]	; (800a918 <interfaceSelectLayout+0x768>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a6b0:	4b9a      	ldr	r3, [pc, #616]	; (800a91c <interfaceSelectLayout+0x76c>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a6b6:	4b9a      	ldr	r3, [pc, #616]	; (800a920 <interfaceSelectLayout+0x770>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a6bc:	4b99      	ldr	r3, [pc, #612]	; (800a924 <interfaceSelectLayout+0x774>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a6c2:	4b99      	ldr	r3, [pc, #612]	; (800a928 <interfaceSelectLayout+0x778>)
 800a6c4:	2226      	movs	r2, #38	; 0x26
 800a6c6:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a6c8:	4b98      	ldr	r3, [pc, #608]	; (800a92c <interfaceSelectLayout+0x77c>)
 800a6ca:	222c      	movs	r2, #44	; 0x2c
 800a6cc:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a6ce:	4b98      	ldr	r3, [pc, #608]	; (800a930 <interfaceSelectLayout+0x780>)
 800a6d0:	2282      	movs	r2, #130	; 0x82
 800a6d2:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a6d4:	4b97      	ldr	r3, [pc, #604]	; (800a934 <interfaceSelectLayout+0x784>)
 800a6d6:	224b      	movs	r2, #75	; 0x4b
 800a6d8:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a6da:	4b97      	ldr	r3, [pc, #604]	; (800a938 <interfaceSelectLayout+0x788>)
 800a6dc:	2211      	movs	r2, #17
 800a6de:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a6e0:	4b96      	ldr	r3, [pc, #600]	; (800a93c <interfaceSelectLayout+0x78c>)
 800a6e2:	2232      	movs	r2, #50	; 0x32
 800a6e4:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a6e6:	4b96      	ldr	r3, [pc, #600]	; (800a940 <interfaceSelectLayout+0x790>)
 800a6e8:	2299      	movs	r2, #153	; 0x99
 800a6ea:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a6ec:	4b95      	ldr	r3, [pc, #596]	; (800a944 <interfaceSelectLayout+0x794>)
 800a6ee:	225f      	movs	r2, #95	; 0x5f
 800a6f0:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a6f2:	4b95      	ldr	r3, [pc, #596]	; (800a948 <interfaceSelectLayout+0x798>)
 800a6f4:	2287      	movs	r2, #135	; 0x87
 800a6f6:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a6f8:	4b94      	ldr	r3, [pc, #592]	; (800a94c <interfaceSelectLayout+0x79c>)
 800a6fa:	2287      	movs	r2, #135	; 0x87
 800a6fc:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a6fe:	4b94      	ldr	r3, [pc, #592]	; (800a950 <interfaceSelectLayout+0x7a0>)
 800a700:	2202      	movs	r2, #2
 800a702:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a704:	4b93      	ldr	r3, [pc, #588]	; (800a954 <interfaceSelectLayout+0x7a4>)
 800a706:	2264      	movs	r2, #100	; 0x64
 800a708:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a70a:	4b93      	ldr	r3, [pc, #588]	; (800a958 <interfaceSelectLayout+0x7a8>)
 800a70c:	2232      	movs	r2, #50	; 0x32
 800a70e:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 55;
 800a710:	4b92      	ldr	r3, [pc, #584]	; (800a95c <interfaceSelectLayout+0x7ac>)
 800a712:	2237      	movs	r2, #55	; 0x37
 800a714:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 100;
 800a716:	4b92      	ldr	r3, [pc, #584]	; (800a960 <interfaceSelectLayout+0x7b0>)
 800a718:	2264      	movs	r2, #100	; 0x64
 800a71a:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a71c:	4b91      	ldr	r3, [pc, #580]	; (800a964 <interfaceSelectLayout+0x7b4>)
 800a71e:	2264      	movs	r2, #100	; 0x64
 800a720:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a722:	4b91      	ldr	r3, [pc, #580]	; (800a968 <interfaceSelectLayout+0x7b8>)
 800a724:	2296      	movs	r2, #150	; 0x96
 800a726:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a728:	4b90      	ldr	r3, [pc, #576]	; (800a96c <interfaceSelectLayout+0x7bc>)
 800a72a:	2264      	movs	r2, #100	; 0x64
 800a72c:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a72e:	4b90      	ldr	r3, [pc, #576]	; (800a970 <interfaceSelectLayout+0x7c0>)
 800a730:	2264      	movs	r2, #100	; 0x64
 800a732:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a734:	4b8f      	ldr	r3, [pc, #572]	; (800a974 <interfaceSelectLayout+0x7c4>)
 800a736:	2261      	movs	r2, #97	; 0x61
 800a738:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a73a:	4b8f      	ldr	r3, [pc, #572]	; (800a978 <interfaceSelectLayout+0x7c8>)
 800a73c:	221c      	movs	r2, #28
 800a73e:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 45;
 800a740:	4b8e      	ldr	r3, [pc, #568]	; (800a97c <interfaceSelectLayout+0x7cc>)
 800a742:	222d      	movs	r2, #45	; 0x2d
 800a744:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 70;
 800a746:	4b8e      	ldr	r3, [pc, #568]	; (800a980 <interfaceSelectLayout+0x7d0>)
 800a748:	2246      	movs	r2, #70	; 0x46
 800a74a:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a74c:	4b8d      	ldr	r3, [pc, #564]	; (800a984 <interfaceSelectLayout+0x7d4>)
 800a74e:	2214      	movs	r2, #20
 800a750:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a752:	4b8d      	ldr	r3, [pc, #564]	; (800a988 <interfaceSelectLayout+0x7d8>)
 800a754:	2214      	movs	r2, #20
 800a756:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a758:	4b8c      	ldr	r3, [pc, #560]	; (800a98c <interfaceSelectLayout+0x7dc>)
 800a75a:	2214      	movs	r2, #20
 800a75c:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a75e:	4b8c      	ldr	r3, [pc, #560]	; (800a990 <interfaceSelectLayout+0x7e0>)
 800a760:	2250      	movs	r2, #80	; 0x50
 800a762:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a764:	4b8b      	ldr	r3, [pc, #556]	; (800a994 <interfaceSelectLayout+0x7e4>)
 800a766:	2223      	movs	r2, #35	; 0x23
 800a768:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a76a:	4b8b      	ldr	r3, [pc, #556]	; (800a998 <interfaceSelectLayout+0x7e8>)
 800a76c:	2264      	movs	r2, #100	; 0x64
 800a76e:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a770:	4b8a      	ldr	r3, [pc, #552]	; (800a99c <interfaceSelectLayout+0x7ec>)
 800a772:	2204      	movs	r2, #4
 800a774:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a776:	4b8a      	ldr	r3, [pc, #552]	; (800a9a0 <interfaceSelectLayout+0x7f0>)
 800a778:	2202      	movs	r2, #2
 800a77a:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a77c:	4b89      	ldr	r3, [pc, #548]	; (800a9a4 <interfaceSelectLayout+0x7f4>)
 800a77e:	2204      	movs	r2, #4
 800a780:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a782:	4b89      	ldr	r3, [pc, #548]	; (800a9a8 <interfaceSelectLayout+0x7f8>)
 800a784:	220a      	movs	r2, #10
 800a786:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a788:	4b88      	ldr	r3, [pc, #544]	; (800a9ac <interfaceSelectLayout+0x7fc>)
 800a78a:	220f      	movs	r2, #15
 800a78c:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a78e:	4b88      	ldr	r3, [pc, #544]	; (800a9b0 <interfaceSelectLayout+0x800>)
 800a790:	2214      	movs	r2, #20
 800a792:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a794:	4b87      	ldr	r3, [pc, #540]	; (800a9b4 <interfaceSelectLayout+0x804>)
 800a796:	2255      	movs	r2, #85	; 0x55
 800a798:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a79a:	4b87      	ldr	r3, [pc, #540]	; (800a9b8 <interfaceSelectLayout+0x808>)
 800a79c:	2296      	movs	r2, #150	; 0x96
 800a79e:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a7a0:	4b86      	ldr	r3, [pc, #536]	; (800a9bc <interfaceSelectLayout+0x80c>)
 800a7a2:	2232      	movs	r2, #50	; 0x32
 800a7a4:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800a7a6:	4b86      	ldr	r3, [pc, #536]	; (800a9c0 <interfaceSelectLayout+0x810>)
 800a7a8:	220a      	movs	r2, #10
 800a7aa:	701a      	strb	r2, [r3, #0]
}
 800a7ac:	e0a0      	b.n	800a8f0 <interfaceSelectLayout+0x740>
	else if (l == 5) { //meter
 800a7ae:	1dfb      	adds	r3, r7, #7
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b05      	cmp	r3, #5
 800a7b4:	d000      	beq.n	800a7b8 <interfaceSelectLayout+0x608>
 800a7b6:	e09b      	b.n	800a8f0 <interfaceSelectLayout+0x740>
		showBarometer = 0;
 800a7b8:	4b4f      	ldr	r3, [pc, #316]	; (800a8f8 <interfaceSelectLayout+0x748>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a7be:	4b4f      	ldr	r3, [pc, #316]	; (800a8fc <interfaceSelectLayout+0x74c>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800a7c4:	4b4e      	ldr	r3, [pc, #312]	; (800a900 <interfaceSelectLayout+0x750>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a7ca:	4b4e      	ldr	r3, [pc, #312]	; (800a904 <interfaceSelectLayout+0x754>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	701a      	strb	r2, [r3, #0]
		showDate = 0;
 800a7d0:	4b4d      	ldr	r3, [pc, #308]	; (800a908 <interfaceSelectLayout+0x758>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a7d6:	4b4d      	ldr	r3, [pc, #308]	; (800a90c <interfaceSelectLayout+0x75c>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a7dc:	4b4c      	ldr	r3, [pc, #304]	; (800a910 <interfaceSelectLayout+0x760>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a7e2:	4b4c      	ldr	r3, [pc, #304]	; (800a914 <interfaceSelectLayout+0x764>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a7e8:	4b4b      	ldr	r3, [pc, #300]	; (800a918 <interfaceSelectLayout+0x768>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
		showMeter = 1;
 800a7ee:	4b4b      	ldr	r3, [pc, #300]	; (800a91c <interfaceSelectLayout+0x76c>)
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800a7f4:	4b4a      	ldr	r3, [pc, #296]	; (800a920 <interfaceSelectLayout+0x770>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
		LPMode = 0;
 800a7fa:	4b4a      	ldr	r3, [pc, #296]	; (800a924 <interfaceSelectLayout+0x774>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	701a      	strb	r2, [r3, #0]
		meterX = 59;
 800a800:	4b70      	ldr	r3, [pc, #448]	; (800a9c4 <interfaceSelectLayout+0x814>)
 800a802:	223b      	movs	r2, #59	; 0x3b
 800a804:	701a      	strb	r2, [r3, #0]
		meterY = 20;
 800a806:	4b70      	ldr	r3, [pc, #448]	; (800a9c8 <interfaceSelectLayout+0x818>)
 800a808:	2214      	movs	r2, #20
 800a80a:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800a80c:	4b46      	ldr	r3, [pc, #280]	; (800a928 <interfaceSelectLayout+0x778>)
 800a80e:	2255      	movs	r2, #85	; 0x55
 800a810:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800a812:	4b46      	ldr	r3, [pc, #280]	; (800a92c <interfaceSelectLayout+0x77c>)
 800a814:	221e      	movs	r2, #30
 800a816:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a818:	4b45      	ldr	r3, [pc, #276]	; (800a930 <interfaceSelectLayout+0x780>)
 800a81a:	2282      	movs	r2, #130	; 0x82
 800a81c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a81e:	4b45      	ldr	r3, [pc, #276]	; (800a934 <interfaceSelectLayout+0x784>)
 800a820:	224b      	movs	r2, #75	; 0x4b
 800a822:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a824:	4b44      	ldr	r3, [pc, #272]	; (800a938 <interfaceSelectLayout+0x788>)
 800a826:	2211      	movs	r2, #17
 800a828:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a82a:	4b44      	ldr	r3, [pc, #272]	; (800a93c <interfaceSelectLayout+0x78c>)
 800a82c:	2232      	movs	r2, #50	; 0x32
 800a82e:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a830:	4b66      	ldr	r3, [pc, #408]	; (800a9cc <interfaceSelectLayout+0x81c>)
 800a832:	221e      	movs	r2, #30
 800a834:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a836:	4b66      	ldr	r3, [pc, #408]	; (800a9d0 <interfaceSelectLayout+0x820>)
 800a838:	224e      	movs	r2, #78	; 0x4e
 800a83a:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a83c:	4b40      	ldr	r3, [pc, #256]	; (800a940 <interfaceSelectLayout+0x790>)
 800a83e:	2299      	movs	r2, #153	; 0x99
 800a840:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a842:	4b40      	ldr	r3, [pc, #256]	; (800a944 <interfaceSelectLayout+0x794>)
 800a844:	225f      	movs	r2, #95	; 0x5f
 800a846:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a848:	4b3f      	ldr	r3, [pc, #252]	; (800a948 <interfaceSelectLayout+0x798>)
 800a84a:	2287      	movs	r2, #135	; 0x87
 800a84c:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a84e:	4b3f      	ldr	r3, [pc, #252]	; (800a94c <interfaceSelectLayout+0x79c>)
 800a850:	2287      	movs	r2, #135	; 0x87
 800a852:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a854:	4b3e      	ldr	r3, [pc, #248]	; (800a950 <interfaceSelectLayout+0x7a0>)
 800a856:	2202      	movs	r2, #2
 800a858:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800a85a:	4b3e      	ldr	r3, [pc, #248]	; (800a954 <interfaceSelectLayout+0x7a4>)
 800a85c:	2232      	movs	r2, #50	; 0x32
 800a85e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800a860:	4b3d      	ldr	r3, [pc, #244]	; (800a958 <interfaceSelectLayout+0x7a8>)
 800a862:	2264      	movs	r2, #100	; 0x64
 800a864:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a866:	4b3d      	ldr	r3, [pc, #244]	; (800a95c <interfaceSelectLayout+0x7ac>)
 800a868:	2264      	movs	r2, #100	; 0x64
 800a86a:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a86c:	4b3c      	ldr	r3, [pc, #240]	; (800a960 <interfaceSelectLayout+0x7b0>)
 800a86e:	2296      	movs	r2, #150	; 0x96
 800a870:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a872:	4b3c      	ldr	r3, [pc, #240]	; (800a964 <interfaceSelectLayout+0x7b4>)
 800a874:	2264      	movs	r2, #100	; 0x64
 800a876:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a878:	4b3b      	ldr	r3, [pc, #236]	; (800a968 <interfaceSelectLayout+0x7b8>)
 800a87a:	2296      	movs	r2, #150	; 0x96
 800a87c:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a87e:	4b3b      	ldr	r3, [pc, #236]	; (800a96c <interfaceSelectLayout+0x7bc>)
 800a880:	2264      	movs	r2, #100	; 0x64
 800a882:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a884:	4b3a      	ldr	r3, [pc, #232]	; (800a970 <interfaceSelectLayout+0x7c0>)
 800a886:	2264      	movs	r2, #100	; 0x64
 800a888:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a88a:	4b3a      	ldr	r3, [pc, #232]	; (800a974 <interfaceSelectLayout+0x7c4>)
 800a88c:	2261      	movs	r2, #97	; 0x61
 800a88e:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a890:	4b39      	ldr	r3, [pc, #228]	; (800a978 <interfaceSelectLayout+0x7c8>)
 800a892:	221c      	movs	r2, #28
 800a894:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 45;
 800a896:	4b39      	ldr	r3, [pc, #228]	; (800a97c <interfaceSelectLayout+0x7cc>)
 800a898:	222d      	movs	r2, #45	; 0x2d
 800a89a:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 70;
 800a89c:	4b38      	ldr	r3, [pc, #224]	; (800a980 <interfaceSelectLayout+0x7d0>)
 800a89e:	2246      	movs	r2, #70	; 0x46
 800a8a0:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a8a2:	4b38      	ldr	r3, [pc, #224]	; (800a984 <interfaceSelectLayout+0x7d4>)
 800a8a4:	2214      	movs	r2, #20
 800a8a6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a8a8:	4b37      	ldr	r3, [pc, #220]	; (800a988 <interfaceSelectLayout+0x7d8>)
 800a8aa:	2214      	movs	r2, #20
 800a8ac:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a8ae:	4b37      	ldr	r3, [pc, #220]	; (800a98c <interfaceSelectLayout+0x7dc>)
 800a8b0:	2214      	movs	r2, #20
 800a8b2:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a8b4:	4b36      	ldr	r3, [pc, #216]	; (800a990 <interfaceSelectLayout+0x7e0>)
 800a8b6:	2250      	movs	r2, #80	; 0x50
 800a8b8:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a8ba:	4b36      	ldr	r3, [pc, #216]	; (800a994 <interfaceSelectLayout+0x7e4>)
 800a8bc:	2223      	movs	r2, #35	; 0x23
 800a8be:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a8c0:	4b35      	ldr	r3, [pc, #212]	; (800a998 <interfaceSelectLayout+0x7e8>)
 800a8c2:	2264      	movs	r2, #100	; 0x64
 800a8c4:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a8c6:	4b35      	ldr	r3, [pc, #212]	; (800a99c <interfaceSelectLayout+0x7ec>)
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a8cc:	4b34      	ldr	r3, [pc, #208]	; (800a9a0 <interfaceSelectLayout+0x7f0>)
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a8d2:	4b34      	ldr	r3, [pc, #208]	; (800a9a4 <interfaceSelectLayout+0x7f4>)
 800a8d4:	2204      	movs	r2, #4
 800a8d6:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a8d8:	4b33      	ldr	r3, [pc, #204]	; (800a9a8 <interfaceSelectLayout+0x7f8>)
 800a8da:	220a      	movs	r2, #10
 800a8dc:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a8de:	4b33      	ldr	r3, [pc, #204]	; (800a9ac <interfaceSelectLayout+0x7fc>)
 800a8e0:	220f      	movs	r2, #15
 800a8e2:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a8e4:	4b32      	ldr	r3, [pc, #200]	; (800a9b0 <interfaceSelectLayout+0x800>)
 800a8e6:	2214      	movs	r2, #20
 800a8e8:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a8ea:	4b32      	ldr	r3, [pc, #200]	; (800a9b4 <interfaceSelectLayout+0x804>)
 800a8ec:	2255      	movs	r2, #85	; 0x55
 800a8ee:	701a      	strb	r2, [r3, #0]
}
 800a8f0:	46c0      	nop			; (mov r8, r8)
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b002      	add	sp, #8
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000149 	.word	0x20000149
 800a8fc:	20000238 	.word	0x20000238
 800a900:	20000230 	.word	0x20000230
 800a904:	200001ed 	.word	0x200001ed
 800a908:	20000142 	.word	0x20000142
 800a90c:	200003ea 	.word	0x200003ea
 800a910:	20000132 	.word	0x20000132
 800a914:	20000440 	.word	0x20000440
 800a918:	20000490 	.word	0x20000490
 800a91c:	2000047a 	.word	0x2000047a
 800a920:	20000240 	.word	0x20000240
 800a924:	200003be 	.word	0x200003be
 800a928:	200003d1 	.word	0x200003d1
 800a92c:	200001ec 	.word	0x200001ec
 800a930:	2000049a 	.word	0x2000049a
 800a934:	200002c6 	.word	0x200002c6
 800a938:	20000242 	.word	0x20000242
 800a93c:	2000014a 	.word	0x2000014a
 800a940:	20000482 	.word	0x20000482
 800a944:	200001b0 	.word	0x200001b0
 800a948:	20000449 	.word	0x20000449
 800a94c:	200004a0 	.word	0x200004a0
 800a950:	20000141 	.word	0x20000141
 800a954:	200003ec 	.word	0x200003ec
 800a958:	200003ed 	.word	0x200003ed
 800a95c:	20000480 	.word	0x20000480
 800a960:	2000045a 	.word	0x2000045a
 800a964:	2000047b 	.word	0x2000047b
 800a968:	200001fa 	.word	0x200001fa
 800a96c:	200002c7 	.word	0x200002c7
 800a970:	2000013a 	.word	0x2000013a
 800a974:	200003cc 	.word	0x200003cc
 800a978:	20000120 	.word	0x20000120
 800a97c:	20000143 	.word	0x20000143
 800a980:	2000043f 	.word	0x2000043f
 800a984:	2000043d 	.word	0x2000043d
 800a988:	20000492 	.word	0x20000492
 800a98c:	20000140 	.word	0x20000140
 800a990:	20000239 	.word	0x20000239
 800a994:	20000331 	.word	0x20000331
 800a998:	20000460 	.word	0x20000460
 800a99c:	20000128 	.word	0x20000128
 800a9a0:	20000234 	.word	0x20000234
 800a9a4:	200003bf 	.word	0x200003bf
 800a9a8:	200002c2 	.word	0x200002c2
 800a9ac:	200003eb 	.word	0x200003eb
 800a9b0:	20000148 	.word	0x20000148
 800a9b4:	200003d0 	.word	0x200003d0
 800a9b8:	20000491 	.word	0x20000491
 800a9bc:	20000458 	.word	0x20000458
 800a9c0:	2000014c 	.word	0x2000014c
 800a9c4:	20000236 	.word	0x20000236
 800a9c8:	20000330 	.word	0x20000330
 800a9cc:	20000479 	.word	0x20000479
 800a9d0:	200002c8 	.word	0x200002c8

0800a9d4 <interfaceSelectColorScheme>:

void interfaceSelectColorScheme(uint8_t cs) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	0002      	movs	r2, r0
 800a9dc:	1dfb      	adds	r3, r7, #7
 800a9de:	701a      	strb	r2, [r3, #0]
	if (cs == COLOR_SCHEME_BLACK) {
 800a9e0:	1dfb      	adds	r3, r7, #7
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d106      	bne.n	800a9f6 <interfaceSelectColorScheme+0x22>
		colorMain = BLACK;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <interfaceSelectColorScheme+0x40>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
		colorSecond = WHITE;
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <interfaceSelectColorScheme+0x44>)
 800a9f0:	22ff      	movs	r2, #255	; 0xff
 800a9f2:	701a      	strb	r2, [r3, #0]
	} else if (cs == COLOR_SCHEME_WHITE) {
		colorMain = WHITE;
		colorSecond = BLACK;
	}
}
 800a9f4:	e009      	b.n	800aa0a <interfaceSelectColorScheme+0x36>
	} else if (cs == COLOR_SCHEME_WHITE) {
 800a9f6:	1dfb      	adds	r3, r7, #7
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d105      	bne.n	800aa0a <interfaceSelectColorScheme+0x36>
		colorMain = WHITE;
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <interfaceSelectColorScheme+0x40>)
 800aa00:	22ff      	movs	r2, #255	; 0xff
 800aa02:	701a      	strb	r2, [r3, #0]
		colorSecond = BLACK;
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <interfaceSelectColorScheme+0x44>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]
}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	b002      	add	sp, #8
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	200001bb 	.word	0x200001bb
 800aa18:	20000459 	.word	0x20000459

0800aa1c <interfaceInit>:

void interfaceInit() {
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af02      	add	r7, sp, #8

	//										COUNT INDEXES ANGLES

	for (uint8_t i = 0; i < 10; i++) {
 800aa22:	1dfb      	adds	r3, r7, #7
 800aa24:	2200      	movs	r2, #0
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e021      	b.n	800aa6e <interfaceInit+0x52>
		chronoDecimalsIndexAngle[i] = 2 * 3.14 / 10 * (i - 2.5);
 800aa2a:	1dfb      	adds	r3, r7, #7
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f7f8 faaa 	bl	8002f88 <__aeabi_i2d>
 800aa34:	2200      	movs	r2, #0
 800aa36:	4b77      	ldr	r3, [pc, #476]	; (800ac14 <interfaceInit+0x1f8>)
 800aa38:	f7f7 fec0 	bl	80027bc <__aeabi_dsub>
 800aa3c:	0002      	movs	r2, r0
 800aa3e:	000b      	movs	r3, r1
 800aa40:	0010      	movs	r0, r2
 800aa42:	0019      	movs	r1, r3
 800aa44:	4a74      	ldr	r2, [pc, #464]	; (800ac18 <interfaceInit+0x1fc>)
 800aa46:	4b75      	ldr	r3, [pc, #468]	; (800ac1c <interfaceInit+0x200>)
 800aa48:	f7f7 fc4c 	bl	80022e4 <__aeabi_dmul>
 800aa4c:	0002      	movs	r2, r0
 800aa4e:	000b      	movs	r3, r1
 800aa50:	1df9      	adds	r1, r7, #7
 800aa52:	780c      	ldrb	r4, [r1, #0]
 800aa54:	0010      	movs	r0, r2
 800aa56:	0019      	movs	r1, r3
 800aa58:	f7f8 fb34 	bl	80030c4 <__aeabi_d2f>
 800aa5c:	1c01      	adds	r1, r0, #0
 800aa5e:	4b70      	ldr	r3, [pc, #448]	; (800ac20 <interfaceInit+0x204>)
 800aa60:	00a2      	lsls	r2, r4, #2
 800aa62:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; i++) {
 800aa64:	1dfb      	adds	r3, r7, #7
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	1dfb      	adds	r3, r7, #7
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	1dfb      	adds	r3, r7, #7
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b09      	cmp	r3, #9
 800aa74:	d9d9      	bls.n	800aa2a <interfaceInit+0xe>
	}
	for (uint8_t i = 0; i < 30; i++) {
 800aa76:	1dbb      	adds	r3, r7, #6
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	e021      	b.n	800aac2 <interfaceInit+0xa6>
		chronoMinutesIndexAngle[i] = 2 * 3.14 / 30 * (i - 7.5);
 800aa7e:	1dbb      	adds	r3, r7, #6
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	0018      	movs	r0, r3
 800aa84:	f7f8 fa80 	bl	8002f88 <__aeabi_i2d>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4b66      	ldr	r3, [pc, #408]	; (800ac24 <interfaceInit+0x208>)
 800aa8c:	f7f7 fe96 	bl	80027bc <__aeabi_dsub>
 800aa90:	0002      	movs	r2, r0
 800aa92:	000b      	movs	r3, r1
 800aa94:	0010      	movs	r0, r2
 800aa96:	0019      	movs	r1, r3
 800aa98:	4a63      	ldr	r2, [pc, #396]	; (800ac28 <interfaceInit+0x20c>)
 800aa9a:	4b64      	ldr	r3, [pc, #400]	; (800ac2c <interfaceInit+0x210>)
 800aa9c:	f7f7 fc22 	bl	80022e4 <__aeabi_dmul>
 800aaa0:	0002      	movs	r2, r0
 800aaa2:	000b      	movs	r3, r1
 800aaa4:	1db9      	adds	r1, r7, #6
 800aaa6:	780c      	ldrb	r4, [r1, #0]
 800aaa8:	0010      	movs	r0, r2
 800aaaa:	0019      	movs	r1, r3
 800aaac:	f7f8 fb0a 	bl	80030c4 <__aeabi_d2f>
 800aab0:	1c01      	adds	r1, r0, #0
 800aab2:	4b5f      	ldr	r3, [pc, #380]	; (800ac30 <interfaceInit+0x214>)
 800aab4:	00a2      	lsls	r2, r4, #2
 800aab6:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 30; i++) {
 800aab8:	1dbb      	adds	r3, r7, #6
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	1dbb      	adds	r3, r7, #6
 800aabe:	3201      	adds	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
 800aac2:	1dbb      	adds	r3, r7, #6
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b1d      	cmp	r3, #29
 800aac8:	d9d9      	bls.n	800aa7e <interfaceInit+0x62>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800aaca:	1d7b      	adds	r3, r7, #5
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	e01a      	b.n	800ab08 <interfaceInit+0xec>
		secondsIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800aad2:	1d7b      	adds	r3, r7, #5
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	3b03      	subs	r3, #3
 800aad8:	0018      	movs	r0, r3
 800aada:	f7f8 fa55 	bl	8002f88 <__aeabi_i2d>
 800aade:	4a55      	ldr	r2, [pc, #340]	; (800ac34 <interfaceInit+0x218>)
 800aae0:	4b55      	ldr	r3, [pc, #340]	; (800ac38 <interfaceInit+0x21c>)
 800aae2:	f7f7 fbff 	bl	80022e4 <__aeabi_dmul>
 800aae6:	0002      	movs	r2, r0
 800aae8:	000b      	movs	r3, r1
 800aaea:	1d79      	adds	r1, r7, #5
 800aaec:	780c      	ldrb	r4, [r1, #0]
 800aaee:	0010      	movs	r0, r2
 800aaf0:	0019      	movs	r1, r3
 800aaf2:	f7f8 fae7 	bl	80030c4 <__aeabi_d2f>
 800aaf6:	1c01      	adds	r1, r0, #0
 800aaf8:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <interfaceInit+0x220>)
 800aafa:	00a2      	lsls	r2, r4, #2
 800aafc:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800aafe:	1d7b      	adds	r3, r7, #5
 800ab00:	781a      	ldrb	r2, [r3, #0]
 800ab02:	1d7b      	adds	r3, r7, #5
 800ab04:	3201      	adds	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	1d7b      	adds	r3, r7, #5
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b0b      	cmp	r3, #11
 800ab0e:	d9e0      	bls.n	800aad2 <interfaceInit+0xb6>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ab10:	1d3b      	adds	r3, r7, #4
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	e01a      	b.n	800ab4e <interfaceInit+0x132>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ab18:	1d3b      	adds	r3, r7, #4
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	3b03      	subs	r3, #3
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f7f8 fa32 	bl	8002f88 <__aeabi_i2d>
 800ab24:	4a43      	ldr	r2, [pc, #268]	; (800ac34 <interfaceInit+0x218>)
 800ab26:	4b44      	ldr	r3, [pc, #272]	; (800ac38 <interfaceInit+0x21c>)
 800ab28:	f7f7 fbdc 	bl	80022e4 <__aeabi_dmul>
 800ab2c:	0002      	movs	r2, r0
 800ab2e:	000b      	movs	r3, r1
 800ab30:	1d39      	adds	r1, r7, #4
 800ab32:	780c      	ldrb	r4, [r1, #0]
 800ab34:	0010      	movs	r0, r2
 800ab36:	0019      	movs	r1, r3
 800ab38:	f7f8 fac4 	bl	80030c4 <__aeabi_d2f>
 800ab3c:	1c01      	adds	r1, r0, #0
 800ab3e:	4b40      	ldr	r3, [pc, #256]	; (800ac40 <interfaceInit+0x224>)
 800ab40:	00a2      	lsls	r2, r4, #2
 800ab42:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ab44:	1d3b      	adds	r3, r7, #4
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	1d3b      	adds	r3, r7, #4
 800ab4a:	3201      	adds	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	1d3b      	adds	r3, r7, #4
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b0b      	cmp	r3, #11
 800ab54:	d9e0      	bls.n	800ab18 <interfaceInit+0xfc>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ab56:	1cfb      	adds	r3, r7, #3
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
 800ab5c:	e01a      	b.n	800ab94 <interfaceInit+0x178>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ab5e:	1cfb      	adds	r3, r7, #3
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	3b03      	subs	r3, #3
 800ab64:	0018      	movs	r0, r3
 800ab66:	f7f8 fa0f 	bl	8002f88 <__aeabi_i2d>
 800ab6a:	4a32      	ldr	r2, [pc, #200]	; (800ac34 <interfaceInit+0x218>)
 800ab6c:	4b32      	ldr	r3, [pc, #200]	; (800ac38 <interfaceInit+0x21c>)
 800ab6e:	f7f7 fbb9 	bl	80022e4 <__aeabi_dmul>
 800ab72:	0002      	movs	r2, r0
 800ab74:	000b      	movs	r3, r1
 800ab76:	1cf9      	adds	r1, r7, #3
 800ab78:	780c      	ldrb	r4, [r1, #0]
 800ab7a:	0010      	movs	r0, r2
 800ab7c:	0019      	movs	r1, r3
 800ab7e:	f7f8 faa1 	bl	80030c4 <__aeabi_d2f>
 800ab82:	1c01      	adds	r1, r0, #0
 800ab84:	4b2e      	ldr	r3, [pc, #184]	; (800ac40 <interfaceInit+0x224>)
 800ab86:	00a2      	lsls	r2, r4, #2
 800ab88:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ab8a:	1cfb      	adds	r3, r7, #3
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	1cfb      	adds	r3, r7, #3
 800ab90:	3201      	adds	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	1cfb      	adds	r3, r7, #3
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b0b      	cmp	r3, #11
 800ab9a:	d9e0      	bls.n	800ab5e <interfaceInit+0x142>
	}

	//										DISPLAY INITIALISATION

	printf("EPD_1in54_V2_test Demo\r\n");
 800ab9c:	4b29      	ldr	r3, [pc, #164]	; (800ac44 <interfaceInit+0x228>)
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f006 faa8 	bl	80110f4 <puts>
	DEV_Module_Init();
 800aba4:	f7f9 f9de 	bl	8003f64 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800aba8:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <interfaceInit+0x22c>)
 800abaa:	0018      	movs	r0, r3
 800abac:	f006 faa2 	bl	80110f4 <puts>
	EPD_1IN54_V2_Init();
 800abb0:	f7fa fc88 	bl	80054c4 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800abb4:	f7fa fce4 	bl	8005580 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800abb8:	23fa      	movs	r3, #250	; 0xfa
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	0018      	movs	r0, r3
 800abbe:	f7fa fedd 	bl	800597c <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UWORD Imagesize = (
 800abc2:	003b      	movs	r3, r7
 800abc4:	4a21      	ldr	r2, [pc, #132]	; (800ac4c <interfaceInit+0x230>)
 800abc6:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((BlackImage = (UBYTE*) malloc(Imagesize)) == NULL) {
 800abc8:	003b      	movs	r3, r7
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	0018      	movs	r0, r3
 800abce:	f006 f94b 	bl	8010e68 <malloc>
 800abd2:	0003      	movs	r3, r0
 800abd4:	001a      	movs	r2, r3
 800abd6:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <interfaceInit+0x234>)
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <interfaceInit+0x234>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d103      	bne.n	800abea <interfaceInit+0x1ce>
		printf("Failed to apply for black memory...\r\n");
 800abe2:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <interfaceInit+0x238>)
 800abe4:	0018      	movs	r0, r3
 800abe6:	f006 fa85 	bl	80110f4 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800abea:	4b1b      	ldr	r3, [pc, #108]	; (800ac58 <interfaceInit+0x23c>)
 800abec:	0018      	movs	r0, r3
 800abee:	f006 fa81 	bl	80110f4 <puts>
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0,
 800abf2:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <interfaceInit+0x234>)
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	4b19      	ldr	r3, [pc, #100]	; (800ac5c <interfaceInit+0x240>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	22c8      	movs	r2, #200	; 0xc8
 800ac04:	21c8      	movs	r1, #200	; 0xc8
 800ac06:	f7f9 f9cb 	bl	8003fa0 <Paint_NewImage>
//		//burn image
//		EPD_1IN54_V2_DisplayPart(BlackImage);
//		DEV_Delay_ms(50);
//	}

}
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b003      	add	sp, #12
 800ac10:	bd90      	pop	{r4, r7, pc}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	40040000 	.word	0x40040000
 800ac18:	74bc6a7f 	.word	0x74bc6a7f
 800ac1c:	3fe41893 	.word	0x3fe41893
 800ac20:	200001fc 	.word	0x200001fc
 800ac24:	401e0000 	.word	0x401e0000
 800ac28:	46508dff 	.word	0x46508dff
 800ac2c:	3fcacb6f 	.word	0x3fcacb6f
 800ac30:	20000344 	.word	0x20000344
 800ac34:	8bf258bf 	.word	0x8bf258bf
 800ac38:	3fe0bf25 	.word	0x3fe0bf25
 800ac3c:	20000290 	.word	0x20000290
 800ac40:	200001bc 	.word	0x200001bc
 800ac44:	08013a98 	.word	0x08013a98
 800ac48:	08013ab0 	.word	0x08013ab0
 800ac4c:	00001388 	.word	0x00001388
 800ac50:	200003d4 	.word	0x200003d4
 800ac54:	08013acc 	.word	0x08013acc
 800ac58:	08013af4 	.word	0x08013af4
 800ac5c:	200001bb 	.word	0x200001bb

0800ac60 <interfaceUpdate>:

void interfaceUpdate(uint8_t mode) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	0002      	movs	r2, r0
 800ac68:	1dfb      	adds	r3, r7, #7
 800ac6a:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_FULL) {
 800ac6c:	1dfb      	adds	r3, r7, #7
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <interfaceUpdate+0x2a>

		EPD_1IN54_V2_Init();
 800ac74:	f7fa fc26 	bl	80054c4 <EPD_1IN54_V2_Init>
		Paint_SelectImage(BlackImage);
 800ac78:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <interfaceUpdate+0x58>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f7f9 f9fd 	bl	800407c <Paint_SelectImage>

		interfaceUpdateMode = INTERFACE_UPDATE_FULL;
 800ac82:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <interfaceUpdate+0x5c>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	701a      	strb	r2, [r3, #0]
		Paint_SelectImage(BlackImage);

		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
	}

}
 800ac88:	e012      	b.n	800acb0 <interfaceUpdate+0x50>
	} else if (mode == INTERFACE_UPDATE_PARTIAL) {
 800ac8a:	1dfb      	adds	r3, r7, #7
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d10e      	bne.n	800acb0 <interfaceUpdate+0x50>
		EPD_1IN54_V2_Init();
 800ac92:	f7fa fc17 	bl	80054c4 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800ac96:	4b08      	ldr	r3, [pc, #32]	; (800acb8 <interfaceUpdate+0x58>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f7fa fcf2 	bl	8005684 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(BlackImage);
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <interfaceUpdate+0x58>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	0018      	movs	r0, r3
 800aca6:	f7f9 f9e9 	bl	800407c <Paint_SelectImage>
		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
 800acaa:	4b04      	ldr	r3, [pc, #16]	; (800acbc <interfaceUpdate+0x5c>)
 800acac:	2201      	movs	r2, #1
 800acae:	701a      	strb	r2, [r3, #0]
}
 800acb0:	46c0      	nop			; (mov r8, r8)
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b002      	add	sp, #8
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	200003d4 	.word	0x200003d4
 800acbc:	200003e0 	.word	0x200003e0

0800acc0 <interfaceWrite>:

void interfaceWrite() {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0

	if (interfaceUpdateMode == INTERFACE_UPDATE_PARTIAL) {
 800acc4:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <interfaceWrite+0x34>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b01      	cmp	r3, #1
 800accc:	d105      	bne.n	800acda <interfaceWrite+0x1a>

		EPD_1IN54_V2_DisplayPart(BlackImage);
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <interfaceWrite+0x38>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	0018      	movs	r0, r3
 800acd4:	f7fa fd60 	bl	8005798 <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(BlackImage);

	}

}
 800acd8:	e009      	b.n	800acee <interfaceWrite+0x2e>
	} else if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {
 800acda:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <interfaceWrite+0x34>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d104      	bne.n	800acee <interfaceWrite+0x2e>
		EPD_1IN54_V2_Display(BlackImage);
 800ace4:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <interfaceWrite+0x38>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	0018      	movs	r0, r3
 800acea:	f7fa fc7c 	bl	80055e6 <EPD_1IN54_V2_Display>
}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	200003e0 	.word	0x200003e0
 800acf8:	200003d4 	.word	0x200003d4

0800acfc <interfaceClear>:

void interfaceClear() {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
	Paint_Clear(colorMain);
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <interfaceClear+0x18>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	0018      	movs	r0, r3
 800ad0a:	f7f9 fb69 	bl	80043e0 <Paint_Clear>
}
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	200001bb 	.word	0x200001bb

0800ad18 <interfaceDrawIndex>:

void interfaceDrawIndex() {
 800ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1a:	46ce      	mov	lr, r9
 800ad1c:	4647      	mov	r7, r8
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b087      	sub	sp, #28
 800ad22:	af04      	add	r7, sp, #16

	//										METER INDEX

	if (showMeter == 1) {
 800ad24:	4b7b      	ldr	r3, [pc, #492]	; (800af14 <interfaceDrawIndex+0x1fc>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d14d      	bne.n	800adc8 <interfaceDrawIndex+0xb0>
		Paint_DrawString_EN(meterX + 65, meterY + 2, "V", &Font16, colorSecond,
 800ad2c:	4b7a      	ldr	r3, [pc, #488]	; (800af18 <interfaceDrawIndex+0x200>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	3341      	adds	r3, #65	; 0x41
 800ad34:	b298      	uxth	r0, r3
 800ad36:	4b79      	ldr	r3, [pc, #484]	; (800af1c <interfaceDrawIndex+0x204>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	b299      	uxth	r1, r3
 800ad40:	4b77      	ldr	r3, [pc, #476]	; (800af20 <interfaceDrawIndex+0x208>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	4a76      	ldr	r2, [pc, #472]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ad4a:	7812      	ldrb	r2, [r2, #0]
 800ad4c:	b2d2      	uxtb	r2, r2
 800ad4e:	b292      	uxth	r2, r2
 800ad50:	4d75      	ldr	r5, [pc, #468]	; (800af28 <interfaceDrawIndex+0x210>)
 800ad52:	4c76      	ldr	r4, [pc, #472]	; (800af2c <interfaceDrawIndex+0x214>)
 800ad54:	9201      	str	r2, [sp, #4]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	002b      	movs	r3, r5
 800ad5a:	0022      	movs	r2, r4
 800ad5c:	f7fa f998 	bl	8005090 <Paint_DrawString_EN>
				colorMain);
		Paint_DrawString_EN(meterX + 56, meterY + 18, "Vd", &Font16,
 800ad60:	4b6d      	ldr	r3, [pc, #436]	; (800af18 <interfaceDrawIndex+0x200>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	3338      	adds	r3, #56	; 0x38
 800ad68:	b298      	uxth	r0, r3
 800ad6a:	4b6c      	ldr	r3, [pc, #432]	; (800af1c <interfaceDrawIndex+0x204>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	3312      	adds	r3, #18
 800ad72:	b299      	uxth	r1, r3
 800ad74:	4b6a      	ldr	r3, [pc, #424]	; (800af20 <interfaceDrawIndex+0x208>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	4a69      	ldr	r2, [pc, #420]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ad7e:	7812      	ldrb	r2, [r2, #0]
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	b292      	uxth	r2, r2
 800ad84:	4d68      	ldr	r5, [pc, #416]	; (800af28 <interfaceDrawIndex+0x210>)
 800ad86:	4c6a      	ldr	r4, [pc, #424]	; (800af30 <interfaceDrawIndex+0x218>)
 800ad88:	9201      	str	r2, [sp, #4]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	002b      	movs	r3, r5
 800ad8e:	0022      	movs	r2, r4
 800ad90:	f7fa f97e 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);
		Paint_DrawString_EN(meterX + 56, meterY + 34, "kR", &Font16,
 800ad94:	4b60      	ldr	r3, [pc, #384]	; (800af18 <interfaceDrawIndex+0x200>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	3338      	adds	r3, #56	; 0x38
 800ad9c:	b298      	uxth	r0, r3
 800ad9e:	4b5f      	ldr	r3, [pc, #380]	; (800af1c <interfaceDrawIndex+0x204>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	3322      	adds	r3, #34	; 0x22
 800ada6:	b299      	uxth	r1, r3
 800ada8:	4b5d      	ldr	r3, [pc, #372]	; (800af20 <interfaceDrawIndex+0x208>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4a5c      	ldr	r2, [pc, #368]	; (800af24 <interfaceDrawIndex+0x20c>)
 800adb2:	7812      	ldrb	r2, [r2, #0]
 800adb4:	b2d2      	uxtb	r2, r2
 800adb6:	b292      	uxth	r2, r2
 800adb8:	4d5b      	ldr	r5, [pc, #364]	; (800af28 <interfaceDrawIndex+0x210>)
 800adba:	4c5e      	ldr	r4, [pc, #376]	; (800af34 <interfaceDrawIndex+0x21c>)
 800adbc:	9201      	str	r2, [sp, #4]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	002b      	movs	r3, r5
 800adc2:	0022      	movs	r2, r4
 800adc4:	f7fa f964 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);
	}

	//										DIGITAL INTERFACE INDEX

	if (showDigitalInterface == 1) {
 800adc8:	4b5b      	ldr	r3, [pc, #364]	; (800af38 <interfaceDrawIndex+0x220>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d14b      	bne.n	800ae68 <interfaceDrawIndex+0x150>
		Paint_DrawString_EN(digitalX + 55, digitalY, "hPa", &Font12, colorMain,
 800add0:	4b5a      	ldr	r3, [pc, #360]	; (800af3c <interfaceDrawIndex+0x224>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b29b      	uxth	r3, r3
 800add6:	3337      	adds	r3, #55	; 0x37
 800add8:	b298      	uxth	r0, r3
 800adda:	4b59      	ldr	r3, [pc, #356]	; (800af40 <interfaceDrawIndex+0x228>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b299      	uxth	r1, r3
 800ade0:	4b50      	ldr	r3, [pc, #320]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4a4d      	ldr	r2, [pc, #308]	; (800af20 <interfaceDrawIndex+0x208>)
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	b2d2      	uxtb	r2, r2
 800adee:	b292      	uxth	r2, r2
 800adf0:	4d54      	ldr	r5, [pc, #336]	; (800af44 <interfaceDrawIndex+0x22c>)
 800adf2:	4c55      	ldr	r4, [pc, #340]	; (800af48 <interfaceDrawIndex+0x230>)
 800adf4:	9201      	str	r2, [sp, #4]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	002b      	movs	r3, r5
 800adfa:	0022      	movs	r2, r4
 800adfc:	f7fa f948 	bl	8005090 <Paint_DrawString_EN>
				colorSecond);
		Paint_DrawString_EN(digitalX + 55, digitalY + 12, "%RH", &Font12,
 800ae00:	4b4e      	ldr	r3, [pc, #312]	; (800af3c <interfaceDrawIndex+0x224>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3337      	adds	r3, #55	; 0x37
 800ae08:	b298      	uxth	r0, r3
 800ae0a:	4b4d      	ldr	r3, [pc, #308]	; (800af40 <interfaceDrawIndex+0x228>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	330c      	adds	r3, #12
 800ae12:	b299      	uxth	r1, r3
 800ae14:	4b43      	ldr	r3, [pc, #268]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4a40      	ldr	r2, [pc, #256]	; (800af20 <interfaceDrawIndex+0x208>)
 800ae1e:	7812      	ldrb	r2, [r2, #0]
 800ae20:	b2d2      	uxtb	r2, r2
 800ae22:	b292      	uxth	r2, r2
 800ae24:	4d47      	ldr	r5, [pc, #284]	; (800af44 <interfaceDrawIndex+0x22c>)
 800ae26:	4c49      	ldr	r4, [pc, #292]	; (800af4c <interfaceDrawIndex+0x234>)
 800ae28:	9201      	str	r2, [sp, #4]
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	002b      	movs	r3, r5
 800ae2e:	0022      	movs	r2, r4
 800ae30:	f7fa f92e 	bl	8005090 <Paint_DrawString_EN>
				colorMain, colorSecond);
		Paint_DrawString_EN(digitalX + 42, digitalY + 24, "deg C", &Font12,
 800ae34:	4b41      	ldr	r3, [pc, #260]	; (800af3c <interfaceDrawIndex+0x224>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	332a      	adds	r3, #42	; 0x2a
 800ae3c:	b298      	uxth	r0, r3
 800ae3e:	4b40      	ldr	r3, [pc, #256]	; (800af40 <interfaceDrawIndex+0x228>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	3318      	adds	r3, #24
 800ae46:	b299      	uxth	r1, r3
 800ae48:	4b36      	ldr	r3, [pc, #216]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	4a33      	ldr	r2, [pc, #204]	; (800af20 <interfaceDrawIndex+0x208>)
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	b292      	uxth	r2, r2
 800ae58:	4d3a      	ldr	r5, [pc, #232]	; (800af44 <interfaceDrawIndex+0x22c>)
 800ae5a:	4c3d      	ldr	r4, [pc, #244]	; (800af50 <interfaceDrawIndex+0x238>)
 800ae5c:	9201      	str	r2, [sp, #4]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	002b      	movs	r3, r5
 800ae62:	0022      	movs	r2, r4
 800ae64:	f7fa f914 	bl	8005090 <Paint_DrawString_EN>
				colorMain, colorSecond);
	}

	//										BAROMETER INDEX

	if (showBarometer == 1) {
 800ae68:	4b3a      	ldr	r3, [pc, #232]	; (800af54 <interfaceDrawIndex+0x23c>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d148      	bne.n	800af02 <interfaceDrawIndex+0x1ea>
		Paint_DrawNum(177, 102, 975, &Font8, colorSecond, colorMain);
 800ae70:	4b2b      	ldr	r3, [pc, #172]	; (800af20 <interfaceDrawIndex+0x208>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	4a2a      	ldr	r2, [pc, #168]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	b292      	uxth	r2, r2
 800ae80:	4935      	ldr	r1, [pc, #212]	; (800af58 <interfaceDrawIndex+0x240>)
 800ae82:	4836      	ldr	r0, [pc, #216]	; (800af5c <interfaceDrawIndex+0x244>)
 800ae84:	9201      	str	r2, [sp, #4]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	000b      	movs	r3, r1
 800ae8a:	0002      	movs	r2, r0
 800ae8c:	2166      	movs	r1, #102	; 0x66
 800ae8e:	20b1      	movs	r0, #177	; 0xb1
 800ae90:	f7fa f97c 	bl	800518c <Paint_DrawNum>
		Paint_DrawString_EN(177, 111, "hPa", &Font8, colorSecond, colorMain);
 800ae94:	4b22      	ldr	r3, [pc, #136]	; (800af20 <interfaceDrawIndex+0x208>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	4a21      	ldr	r2, [pc, #132]	; (800af24 <interfaceDrawIndex+0x20c>)
 800ae9e:	7812      	ldrb	r2, [r2, #0]
 800aea0:	b2d2      	uxtb	r2, r2
 800aea2:	b292      	uxth	r2, r2
 800aea4:	482c      	ldr	r0, [pc, #176]	; (800af58 <interfaceDrawIndex+0x240>)
 800aea6:	4928      	ldr	r1, [pc, #160]	; (800af48 <interfaceDrawIndex+0x230>)
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	0003      	movs	r3, r0
 800aeae:	000a      	movs	r2, r1
 800aeb0:	216f      	movs	r1, #111	; 0x6f
 800aeb2:	20b1      	movs	r0, #177	; 0xb1
 800aeb4:	f7fa f8ec 	bl	8005090 <Paint_DrawString_EN>
		Paint_DrawNum(102, 185, 1000, &Font8, colorSecond, colorMain);
 800aeb8:	4b19      	ldr	r3, [pc, #100]	; (800af20 <interfaceDrawIndex+0x208>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	4a18      	ldr	r2, [pc, #96]	; (800af24 <interfaceDrawIndex+0x20c>)
 800aec2:	7812      	ldrb	r2, [r2, #0]
 800aec4:	b2d2      	uxtb	r2, r2
 800aec6:	b292      	uxth	r2, r2
 800aec8:	4823      	ldr	r0, [pc, #140]	; (800af58 <interfaceDrawIndex+0x240>)
 800aeca:	21fa      	movs	r1, #250	; 0xfa
 800aecc:	0089      	lsls	r1, r1, #2
 800aece:	9201      	str	r2, [sp, #4]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	0003      	movs	r3, r0
 800aed4:	000a      	movs	r2, r1
 800aed6:	21b9      	movs	r1, #185	; 0xb9
 800aed8:	2066      	movs	r0, #102	; 0x66
 800aeda:	f7fa f957 	bl	800518c <Paint_DrawNum>
		Paint_DrawNum(5, 102, 1025, &Font8, colorSecond, colorMain);
 800aede:	4b10      	ldr	r3, [pc, #64]	; (800af20 <interfaceDrawIndex+0x208>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4a0f      	ldr	r2, [pc, #60]	; (800af24 <interfaceDrawIndex+0x20c>)
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	b2d2      	uxtb	r2, r2
 800aeec:	b292      	uxth	r2, r2
 800aeee:	491a      	ldr	r1, [pc, #104]	; (800af58 <interfaceDrawIndex+0x240>)
 800aef0:	481b      	ldr	r0, [pc, #108]	; (800af60 <interfaceDrawIndex+0x248>)
 800aef2:	9201      	str	r2, [sp, #4]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	000b      	movs	r3, r1
 800aef8:	0002      	movs	r2, r0
 800aefa:	2166      	movs	r1, #102	; 0x66
 800aefc:	2005      	movs	r0, #5
 800aefe:	f7fa f945 	bl	800518c <Paint_DrawNum>
	}

	//										HUMIDITY INDEX

	if (showHigrometer == 1) {
 800af02:	4b18      	ldr	r3, [pc, #96]	; (800af64 <interfaceDrawIndex+0x24c>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d000      	beq.n	800af0c <interfaceDrawIndex+0x1f4>
 800af0a:	e08d      	b.n	800b028 <interfaceDrawIndex+0x310>
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800af0c:	1dfb      	adds	r3, r7, #7
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	e053      	b.n	800afbc <interfaceDrawIndex+0x2a4>
 800af14:	2000047a 	.word	0x2000047a
 800af18:	20000236 	.word	0x20000236
 800af1c:	20000330 	.word	0x20000330
 800af20:	20000459 	.word	0x20000459
 800af24:	200001bb 	.word	0x200001bb
 800af28:	20000008 	.word	0x20000008
 800af2c:	08013b04 	.word	0x08013b04
 800af30:	08013b08 	.word	0x08013b08
 800af34:	08013b0c 	.word	0x08013b0c
 800af38:	20000490 	.word	0x20000490
 800af3c:	200003e9 	.word	0x200003e9
 800af40:	20000232 	.word	0x20000232
 800af44:	20000000 	.word	0x20000000
 800af48:	08013b10 	.word	0x08013b10
 800af4c:	08013b14 	.word	0x08013b14
 800af50:	08013b18 	.word	0x08013b18
 800af54:	20000149 	.word	0x20000149
 800af58:	20000018 	.word	0x20000018
 800af5c:	000003cf 	.word	0x000003cf
 800af60:	00000401 	.word	0x00000401
 800af64:	200003ea 	.word	0x200003ea
			Paint_DrawLine(humidityX, humidityY + i, humidityX - 2,
 800af68:	4bb9      	ldr	r3, [pc, #740]	; (800b250 <interfaceDrawIndex+0x538>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	b298      	uxth	r0, r3
 800af6e:	4bb9      	ldr	r3, [pc, #740]	; (800b254 <interfaceDrawIndex+0x53c>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	b29a      	uxth	r2, r3
 800af74:	1dfb      	adds	r3, r7, #7
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	18d3      	adds	r3, r2, r3
 800af7c:	b299      	uxth	r1, r3
 800af7e:	4bb4      	ldr	r3, [pc, #720]	; (800b250 <interfaceDrawIndex+0x538>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	3b02      	subs	r3, #2
 800af86:	b29c      	uxth	r4, r3
 800af88:	4bb2      	ldr	r3, [pc, #712]	; (800b254 <interfaceDrawIndex+0x53c>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	1dfb      	adds	r3, r7, #7
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	18d3      	adds	r3, r2, r3
 800af96:	b29a      	uxth	r2, r3
 800af98:	4baf      	ldr	r3, [pc, #700]	; (800b258 <interfaceDrawIndex+0x540>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	2500      	movs	r5, #0
 800afa2:	9502      	str	r5, [sp, #8]
 800afa4:	2501      	movs	r5, #1
 800afa6:	9501      	str	r5, [sp, #4]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	0013      	movs	r3, r2
 800afac:	0022      	movs	r2, r4
 800afae:	f7f9 fb8f 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800afb2:	1dfb      	adds	r3, r7, #7
 800afb4:	1dfa      	adds	r2, r7, #7
 800afb6:	7812      	ldrb	r2, [r2, #0]
 800afb8:	3205      	adds	r2, #5
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	1dfb      	adds	r3, r7, #7
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b32      	cmp	r3, #50	; 0x32
 800afc2:	d9d1      	bls.n	800af68 <interfaceDrawIndex+0x250>
					humidityY + i, colorSecond, DOT_PIXEL_1X1,
					LINE_STYLE_SOLID);
		}

		Paint_DrawString_EN(humidityX + 6, humidityY, "0%RH", &Font8,
 800afc4:	4ba2      	ldr	r3, [pc, #648]	; (800b250 <interfaceDrawIndex+0x538>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	3306      	adds	r3, #6
 800afcc:	b298      	uxth	r0, r3
 800afce:	4ba1      	ldr	r3, [pc, #644]	; (800b254 <interfaceDrawIndex+0x53c>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b299      	uxth	r1, r3
 800afd4:	4ba0      	ldr	r3, [pc, #640]	; (800b258 <interfaceDrawIndex+0x540>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4a9f      	ldr	r2, [pc, #636]	; (800b25c <interfaceDrawIndex+0x544>)
 800afde:	7812      	ldrb	r2, [r2, #0]
 800afe0:	b2d2      	uxtb	r2, r2
 800afe2:	b292      	uxth	r2, r2
 800afe4:	4d9e      	ldr	r5, [pc, #632]	; (800b260 <interfaceDrawIndex+0x548>)
 800afe6:	4c9f      	ldr	r4, [pc, #636]	; (800b264 <interfaceDrawIndex+0x54c>)
 800afe8:	9201      	str	r2, [sp, #4]
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	002b      	movs	r3, r5
 800afee:	0022      	movs	r2, r4
 800aff0:	f7fa f84e 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);
		Paint_DrawString_EN(humidityX + 6, humidityY + 43, "100", &Font8,
 800aff4:	4b96      	ldr	r3, [pc, #600]	; (800b250 <interfaceDrawIndex+0x538>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3306      	adds	r3, #6
 800affc:	b298      	uxth	r0, r3
 800affe:	4b95      	ldr	r3, [pc, #596]	; (800b254 <interfaceDrawIndex+0x53c>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	b29b      	uxth	r3, r3
 800b004:	332b      	adds	r3, #43	; 0x2b
 800b006:	b299      	uxth	r1, r3
 800b008:	4b93      	ldr	r3, [pc, #588]	; (800b258 <interfaceDrawIndex+0x540>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	b29b      	uxth	r3, r3
 800b010:	4a92      	ldr	r2, [pc, #584]	; (800b25c <interfaceDrawIndex+0x544>)
 800b012:	7812      	ldrb	r2, [r2, #0]
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	b292      	uxth	r2, r2
 800b018:	4d91      	ldr	r5, [pc, #580]	; (800b260 <interfaceDrawIndex+0x548>)
 800b01a:	4c93      	ldr	r4, [pc, #588]	; (800b268 <interfaceDrawIndex+0x550>)
 800b01c:	9201      	str	r2, [sp, #4]
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	002b      	movs	r3, r5
 800b022:	0022      	movs	r2, r4
 800b024:	f7fa f834 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);
	}

	//										ALTIMETER UNIT
	if (showNavi == 1) {
 800b028:	4b90      	ldr	r3, [pc, #576]	; (800b26c <interfaceDrawIndex+0x554>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d118      	bne.n	800b062 <interfaceDrawIndex+0x34a>
		Paint_DrawChar(compassX + 38, compassY + 31, 'm', &Font12, colorSecond,
 800b030:	4b8f      	ldr	r3, [pc, #572]	; (800b270 <interfaceDrawIndex+0x558>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b29b      	uxth	r3, r3
 800b036:	3326      	adds	r3, #38	; 0x26
 800b038:	b298      	uxth	r0, r3
 800b03a:	4b8e      	ldr	r3, [pc, #568]	; (800b274 <interfaceDrawIndex+0x55c>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	331f      	adds	r3, #31
 800b042:	b299      	uxth	r1, r3
 800b044:	4b84      	ldr	r3, [pc, #528]	; (800b258 <interfaceDrawIndex+0x540>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4a83      	ldr	r2, [pc, #524]	; (800b25c <interfaceDrawIndex+0x544>)
 800b04e:	7812      	ldrb	r2, [r2, #0]
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	b292      	uxth	r2, r2
 800b054:	4c88      	ldr	r4, [pc, #544]	; (800b278 <interfaceDrawIndex+0x560>)
 800b056:	9201      	str	r2, [sp, #4]
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	0023      	movs	r3, r4
 800b05c:	226d      	movs	r2, #109	; 0x6d
 800b05e:	f7f9 ff33 	bl	8004ec8 <Paint_DrawChar>
				colorMain);
	}

	//										COMPASS INDEX

	if (showNavi == 1) {
 800b062:	4b82      	ldr	r3, [pc, #520]	; (800b26c <interfaceDrawIndex+0x554>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d163      	bne.n	800b132 <interfaceDrawIndex+0x41a>

		Paint_DrawChar(compassX + 22, compassY + 1, 'N', &Font8, colorSecond,
 800b06a:	4b81      	ldr	r3, [pc, #516]	; (800b270 <interfaceDrawIndex+0x558>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	3316      	adds	r3, #22
 800b072:	b298      	uxth	r0, r3
 800b074:	4b7f      	ldr	r3, [pc, #508]	; (800b274 <interfaceDrawIndex+0x55c>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3301      	adds	r3, #1
 800b07c:	b299      	uxth	r1, r3
 800b07e:	4b76      	ldr	r3, [pc, #472]	; (800b258 <interfaceDrawIndex+0x540>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	b29b      	uxth	r3, r3
 800b086:	4a75      	ldr	r2, [pc, #468]	; (800b25c <interfaceDrawIndex+0x544>)
 800b088:	7812      	ldrb	r2, [r2, #0]
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	b292      	uxth	r2, r2
 800b08e:	4c74      	ldr	r4, [pc, #464]	; (800b260 <interfaceDrawIndex+0x548>)
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	0023      	movs	r3, r4
 800b096:	224e      	movs	r2, #78	; 0x4e
 800b098:	f7f9 ff16 	bl	8004ec8 <Paint_DrawChar>
				colorMain);
		Paint_DrawChar(compassX + 22, compassY + 20, 'S', &Font8, colorSecond,
 800b09c:	4b74      	ldr	r3, [pc, #464]	; (800b270 <interfaceDrawIndex+0x558>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3316      	adds	r3, #22
 800b0a4:	b298      	uxth	r0, r3
 800b0a6:	4b73      	ldr	r3, [pc, #460]	; (800b274 <interfaceDrawIndex+0x55c>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	3314      	adds	r3, #20
 800b0ae:	b299      	uxth	r1, r3
 800b0b0:	4b69      	ldr	r3, [pc, #420]	; (800b258 <interfaceDrawIndex+0x540>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	4a68      	ldr	r2, [pc, #416]	; (800b25c <interfaceDrawIndex+0x544>)
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	b2d2      	uxtb	r2, r2
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	4c67      	ldr	r4, [pc, #412]	; (800b260 <interfaceDrawIndex+0x548>)
 800b0c2:	9201      	str	r2, [sp, #4]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	0023      	movs	r3, r4
 800b0c8:	2253      	movs	r2, #83	; 0x53
 800b0ca:	f7f9 fefd 	bl	8004ec8 <Paint_DrawChar>
				colorMain);
		Paint_DrawChar(compassX + 2, compassY + 11, 'W', &Font8, colorSecond,
 800b0ce:	4b68      	ldr	r3, [pc, #416]	; (800b270 <interfaceDrawIndex+0x558>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3302      	adds	r3, #2
 800b0d6:	b298      	uxth	r0, r3
 800b0d8:	4b66      	ldr	r3, [pc, #408]	; (800b274 <interfaceDrawIndex+0x55c>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	330b      	adds	r3, #11
 800b0e0:	b299      	uxth	r1, r3
 800b0e2:	4b5d      	ldr	r3, [pc, #372]	; (800b258 <interfaceDrawIndex+0x540>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	4a5c      	ldr	r2, [pc, #368]	; (800b25c <interfaceDrawIndex+0x544>)
 800b0ec:	7812      	ldrb	r2, [r2, #0]
 800b0ee:	b2d2      	uxtb	r2, r2
 800b0f0:	b292      	uxth	r2, r2
 800b0f2:	4c5b      	ldr	r4, [pc, #364]	; (800b260 <interfaceDrawIndex+0x548>)
 800b0f4:	9201      	str	r2, [sp, #4]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	0023      	movs	r3, r4
 800b0fa:	2257      	movs	r2, #87	; 0x57
 800b0fc:	f7f9 fee4 	bl	8004ec8 <Paint_DrawChar>
				colorMain);
		Paint_DrawChar(compassX + 40, compassY + 11, 'E', &Font8, colorSecond,
 800b100:	4b5b      	ldr	r3, [pc, #364]	; (800b270 <interfaceDrawIndex+0x558>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b29b      	uxth	r3, r3
 800b106:	3328      	adds	r3, #40	; 0x28
 800b108:	b298      	uxth	r0, r3
 800b10a:	4b5a      	ldr	r3, [pc, #360]	; (800b274 <interfaceDrawIndex+0x55c>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	330b      	adds	r3, #11
 800b112:	b299      	uxth	r1, r3
 800b114:	4b50      	ldr	r3, [pc, #320]	; (800b258 <interfaceDrawIndex+0x540>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	4a4f      	ldr	r2, [pc, #316]	; (800b25c <interfaceDrawIndex+0x544>)
 800b11e:	7812      	ldrb	r2, [r2, #0]
 800b120:	b2d2      	uxtb	r2, r2
 800b122:	b292      	uxth	r2, r2
 800b124:	4c4e      	ldr	r4, [pc, #312]	; (800b260 <interfaceDrawIndex+0x548>)
 800b126:	9201      	str	r2, [sp, #4]
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	0023      	movs	r3, r4
 800b12c:	2245      	movs	r2, #69	; 0x45
 800b12e:	f7f9 fecb 	bl	8004ec8 <Paint_DrawChar>

	}

	//										BATTERY STATE INDEX

	if (showBatteryState == 1) {
 800b132:	4b52      	ldr	r3, [pc, #328]	; (800b27c <interfaceDrawIndex+0x564>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d14e      	bne.n	800b1d8 <interfaceDrawIndex+0x4c0>
		Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800b13a:	4b51      	ldr	r3, [pc, #324]	; (800b280 <interfaceDrawIndex+0x568>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	b29a      	uxth	r2, r3
 800b140:	4b50      	ldr	r3, [pc, #320]	; (800b284 <interfaceDrawIndex+0x56c>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	b29b      	uxth	r3, r3
 800b146:	18d3      	adds	r3, r2, r3
 800b148:	b298      	uxth	r0, r3
 800b14a:	4b4f      	ldr	r3, [pc, #316]	; (800b288 <interfaceDrawIndex+0x570>)
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	b299      	uxth	r1, r3
				batteryStateStartY,
				batteryStateStartX + batteryPointerShift
 800b150:	4b4b      	ldr	r3, [pc, #300]	; (800b280 <interfaceDrawIndex+0x568>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	b29a      	uxth	r2, r3
 800b156:	4b4b      	ldr	r3, [pc, #300]	; (800b284 <interfaceDrawIndex+0x56c>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	18d3      	adds	r3, r2, r3
 800b15e:	b29a      	uxth	r2, r3
		Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800b160:	4b4a      	ldr	r3, [pc, #296]	; (800b28c <interfaceDrawIndex+0x574>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	b29b      	uxth	r3, r3
 800b166:	18d3      	adds	r3, r2, r3
 800b168:	b29a      	uxth	r2, r3
 800b16a:	4b47      	ldr	r3, [pc, #284]	; (800b288 <interfaceDrawIndex+0x570>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b29c      	uxth	r4, r3
 800b170:	4b39      	ldr	r3, [pc, #228]	; (800b258 <interfaceDrawIndex+0x540>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b2db      	uxtb	r3, r3
 800b176:	b29b      	uxth	r3, r3
 800b178:	2500      	movs	r5, #0
 800b17a:	9502      	str	r5, [sp, #8]
 800b17c:	2502      	movs	r5, #2
 800b17e:	9501      	str	r5, [sp, #4]
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	0023      	movs	r3, r4
 800b184:	f7f9 faa4 	bl	80046d0 <Paint_DrawLine>
						+ batteryStateIndexLength, batteryStateStartY,
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		Paint_DrawLine(batteryStateStartX,
 800b188:	4b3d      	ldr	r3, [pc, #244]	; (800b280 <interfaceDrawIndex+0x568>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	b298      	uxth	r0, r3
 800b18e:	4b3e      	ldr	r3, [pc, #248]	; (800b288 <interfaceDrawIndex+0x570>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	b29a      	uxth	r2, r3
 800b194:	4b3b      	ldr	r3, [pc, #236]	; (800b284 <interfaceDrawIndex+0x56c>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	18d3      	adds	r3, r2, r3
 800b19c:	b299      	uxth	r1, r3
 800b19e:	4b38      	ldr	r3, [pc, #224]	; (800b280 <interfaceDrawIndex+0x568>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b29c      	uxth	r4, r3
				batteryStateStartY + batteryPointerShift, batteryStateStartX,
				batteryStateStartY + batteryPointerShift
 800b1a4:	4b38      	ldr	r3, [pc, #224]	; (800b288 <interfaceDrawIndex+0x570>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	4b36      	ldr	r3, [pc, #216]	; (800b284 <interfaceDrawIndex+0x56c>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	18d3      	adds	r3, r2, r3
 800b1b2:	b29a      	uxth	r2, r3
		Paint_DrawLine(batteryStateStartX,
 800b1b4:	4b35      	ldr	r3, [pc, #212]	; (800b28c <interfaceDrawIndex+0x574>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	18d3      	adds	r3, r2, r3
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	4b26      	ldr	r3, [pc, #152]	; (800b258 <interfaceDrawIndex+0x540>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	9502      	str	r5, [sp, #8]
 800b1ca:	2502      	movs	r5, #2
 800b1cc:	9501      	str	r5, [sp, #4]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	0013      	movs	r3, r2
 800b1d2:	0022      	movs	r2, r4
 800b1d4:	f7f9 fa7c 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}

	//										TEMPERATURE UNIT

	if (showThermometer == 1) {
 800b1d8:	4b2d      	ldr	r3, [pc, #180]	; (800b290 <interfaceDrawIndex+0x578>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d12c      	bne.n	800b23a <interfaceDrawIndex+0x522>
		Paint_DrawCircle(temperatureX + 21, temperatureY + 4, 2, colorMain,
 800b1e0:	4b2c      	ldr	r3, [pc, #176]	; (800b294 <interfaceDrawIndex+0x57c>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	3315      	adds	r3, #21
 800b1e8:	b298      	uxth	r0, r3
 800b1ea:	4b2b      	ldr	r3, [pc, #172]	; (800b298 <interfaceDrawIndex+0x580>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	b299      	uxth	r1, r3
 800b1f4:	4b19      	ldr	r3, [pc, #100]	; (800b25c <interfaceDrawIndex+0x544>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	9200      	str	r2, [sp, #0]
 800b204:	2202      	movs	r2, #2
 800b206:	f7f9 fc0d 	bl	8004a24 <Paint_DrawCircle>
				DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
		Paint_DrawString_EN(temperatureX + 24, temperatureY, "C", &Font12,
 800b20a:	4b22      	ldr	r3, [pc, #136]	; (800b294 <interfaceDrawIndex+0x57c>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	3318      	adds	r3, #24
 800b212:	b298      	uxth	r0, r3
 800b214:	4b20      	ldr	r3, [pc, #128]	; (800b298 <interfaceDrawIndex+0x580>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	b299      	uxth	r1, r3
 800b21a:	4b10      	ldr	r3, [pc, #64]	; (800b25c <interfaceDrawIndex+0x544>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	b29b      	uxth	r3, r3
 800b222:	4a0d      	ldr	r2, [pc, #52]	; (800b258 <interfaceDrawIndex+0x540>)
 800b224:	7812      	ldrb	r2, [r2, #0]
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	b292      	uxth	r2, r2
 800b22a:	4d13      	ldr	r5, [pc, #76]	; (800b278 <interfaceDrawIndex+0x560>)
 800b22c:	4c1b      	ldr	r4, [pc, #108]	; (800b29c <interfaceDrawIndex+0x584>)
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	002b      	movs	r3, r5
 800b234:	0022      	movs	r2, r4
 800b236:	f7f9 ff2b 	bl	8005090 <Paint_DrawString_EN>
				colorMain, colorSecond);
	}

	//										CHRONO DECIMALS INDEX

	if (showChrono == 1) {
 800b23a:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <interfaceDrawIndex+0x588>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d001      	beq.n	800b246 <interfaceDrawIndex+0x52e>
 800b242:	f000 fbf6 	bl	800ba32 <interfaceDrawIndex+0xd1a>
		for (uint8_t i = 0; i < 10; i++) {
 800b246:	1dbb      	adds	r3, r7, #6
 800b248:	2200      	movs	r2, #0
 800b24a:	701a      	strb	r2, [r3, #0]
 800b24c:	e110      	b.n	800b470 <interfaceDrawIndex+0x758>
 800b24e:	46c0      	nop			; (mov r8, r8)
 800b250:	2000049a 	.word	0x2000049a
 800b254:	200002c6 	.word	0x200002c6
 800b258:	20000459 	.word	0x20000459
 800b25c:	200001bb 	.word	0x200001bb
 800b260:	20000018 	.word	0x20000018
 800b264:	08013b20 	.word	0x08013b20
 800b268:	08013b28 	.word	0x08013b28
 800b26c:	200001ed 	.word	0x200001ed
 800b270:	20000479 	.word	0x20000479
 800b274:	200002c8 	.word	0x200002c8
 800b278:	20000000 	.word	0x20000000
 800b27c:	20000238 	.word	0x20000238
 800b280:	20000449 	.word	0x20000449
 800b284:	20000148 	.word	0x20000148
 800b288:	200004a0 	.word	0x200004a0
 800b28c:	200003eb 	.word	0x200003eb
 800b290:	20000440 	.word	0x20000440
 800b294:	200003d1 	.word	0x200003d1
 800b298:	200001ec 	.word	0x200001ec
 800b29c:	08013b2c 	.word	0x08013b2c
 800b2a0:	20000230 	.word	0x20000230

			Paint_DrawLine(
					cos(chronoDecimalsIndexAngle[i])
 800b2a4:	1dbb      	adds	r3, r7, #6
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	4bb7      	ldr	r3, [pc, #732]	; (800b588 <interfaceDrawIndex+0x870>)
 800b2aa:	0092      	lsls	r2, r2, #2
 800b2ac:	58d3      	ldr	r3, [r2, r3]
 800b2ae:	1c18      	adds	r0, r3, #0
 800b2b0:	f7f7 fec0 	bl	8003034 <__aeabi_f2d>
 800b2b4:	0002      	movs	r2, r0
 800b2b6:	000b      	movs	r3, r1
 800b2b8:	0010      	movs	r0, r2
 800b2ba:	0019      	movs	r1, r3
 800b2bc:	f006 ffcc 	bl	8012258 <cos>
 800b2c0:	0004      	movs	r4, r0
 800b2c2:	000d      	movs	r5, r1
							* (smallBoardRadius - chronoDecimalsIndexLength)
 800b2c4:	4bb1      	ldr	r3, [pc, #708]	; (800b58c <interfaceDrawIndex+0x874>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	001a      	movs	r2, r3
 800b2ca:	4bb1      	ldr	r3, [pc, #708]	; (800b590 <interfaceDrawIndex+0x878>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	f7f7 fe59 	bl	8002f88 <__aeabi_i2d>
 800b2d6:	0002      	movs	r2, r0
 800b2d8:	000b      	movs	r3, r1
 800b2da:	0020      	movs	r0, r4
 800b2dc:	0029      	movs	r1, r5
 800b2de:	f7f7 f801 	bl	80022e4 <__aeabi_dmul>
 800b2e2:	0002      	movs	r2, r0
 800b2e4:	000b      	movs	r3, r1
 800b2e6:	0014      	movs	r4, r2
 800b2e8:	001d      	movs	r5, r3
							+ chronoDecimalsStartX,
 800b2ea:	4baa      	ldr	r3, [pc, #680]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f7f7 fe4a 	bl	8002f88 <__aeabi_i2d>
 800b2f4:	0002      	movs	r2, r0
 800b2f6:	000b      	movs	r3, r1
 800b2f8:	0020      	movs	r0, r4
 800b2fa:	0029      	movs	r1, r5
 800b2fc:	f7f6 f882 	bl	8001404 <__aeabi_dadd>
 800b300:	0002      	movs	r2, r0
 800b302:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b304:	0010      	movs	r0, r2
 800b306:	0019      	movs	r1, r3
 800b308:	f7f5 f956 	bl	80005b8 <__aeabi_d2uiz>
 800b30c:	0003      	movs	r3, r0
 800b30e:	b29e      	uxth	r6, r3
					sin(chronoDecimalsIndexAngle[i])
 800b310:	1dbb      	adds	r3, r7, #6
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	4b9c      	ldr	r3, [pc, #624]	; (800b588 <interfaceDrawIndex+0x870>)
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	58d3      	ldr	r3, [r2, r3]
 800b31a:	1c18      	adds	r0, r3, #0
 800b31c:	f7f7 fe8a 	bl	8003034 <__aeabi_f2d>
 800b320:	0002      	movs	r2, r0
 800b322:	000b      	movs	r3, r1
 800b324:	0010      	movs	r0, r2
 800b326:	0019      	movs	r1, r3
 800b328:	f006 ffd8 	bl	80122dc <sin>
 800b32c:	0004      	movs	r4, r0
 800b32e:	000d      	movs	r5, r1
							* (smallBoardRadius - chronoDecimalsIndexLength)
 800b330:	4b96      	ldr	r3, [pc, #600]	; (800b58c <interfaceDrawIndex+0x874>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	001a      	movs	r2, r3
 800b336:	4b96      	ldr	r3, [pc, #600]	; (800b590 <interfaceDrawIndex+0x878>)
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	0018      	movs	r0, r3
 800b33e:	f7f7 fe23 	bl	8002f88 <__aeabi_i2d>
 800b342:	0002      	movs	r2, r0
 800b344:	000b      	movs	r3, r1
 800b346:	0020      	movs	r0, r4
 800b348:	0029      	movs	r1, r5
 800b34a:	f7f6 ffcb 	bl	80022e4 <__aeabi_dmul>
 800b34e:	0002      	movs	r2, r0
 800b350:	000b      	movs	r3, r1
 800b352:	0014      	movs	r4, r2
 800b354:	001d      	movs	r5, r3
							+ chronoDecimalsStartY,
 800b356:	4b90      	ldr	r3, [pc, #576]	; (800b598 <interfaceDrawIndex+0x880>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	0018      	movs	r0, r3
 800b35c:	f7f7 fe14 	bl	8002f88 <__aeabi_i2d>
 800b360:	0002      	movs	r2, r0
 800b362:	000b      	movs	r3, r1
 800b364:	0020      	movs	r0, r4
 800b366:	0029      	movs	r1, r5
 800b368:	f7f6 f84c 	bl	8001404 <__aeabi_dadd>
 800b36c:	0002      	movs	r2, r0
 800b36e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b370:	0010      	movs	r0, r2
 800b372:	0019      	movs	r1, r3
 800b374:	f7f5 f920 	bl	80005b8 <__aeabi_d2uiz>
 800b378:	0003      	movs	r3, r0
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	4698      	mov	r8, r3

					cos(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800b37e:	1dbb      	adds	r3, r7, #6
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	4b81      	ldr	r3, [pc, #516]	; (800b588 <interfaceDrawIndex+0x870>)
 800b384:	0092      	lsls	r2, r2, #2
 800b386:	58d3      	ldr	r3, [r2, r3]
 800b388:	1c18      	adds	r0, r3, #0
 800b38a:	f7f7 fe53 	bl	8003034 <__aeabi_f2d>
 800b38e:	0002      	movs	r2, r0
 800b390:	000b      	movs	r3, r1
 800b392:	0010      	movs	r0, r2
 800b394:	0019      	movs	r1, r3
 800b396:	f006 ff5f 	bl	8012258 <cos>
 800b39a:	0004      	movs	r4, r0
 800b39c:	000d      	movs	r5, r1
 800b39e:	4b7b      	ldr	r3, [pc, #492]	; (800b58c <interfaceDrawIndex+0x874>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	f7f7 fdf0 	bl	8002f88 <__aeabi_i2d>
 800b3a8:	0002      	movs	r2, r0
 800b3aa:	000b      	movs	r3, r1
 800b3ac:	0020      	movs	r0, r4
 800b3ae:	0029      	movs	r1, r5
 800b3b0:	f7f6 ff98 	bl	80022e4 <__aeabi_dmul>
 800b3b4:	0002      	movs	r2, r0
 800b3b6:	000b      	movs	r3, r1
 800b3b8:	0014      	movs	r4, r2
 800b3ba:	001d      	movs	r5, r3
							+ chronoDecimalsStartX,
 800b3bc:	4b75      	ldr	r3, [pc, #468]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f7f7 fde1 	bl	8002f88 <__aeabi_i2d>
 800b3c6:	0002      	movs	r2, r0
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	0020      	movs	r0, r4
 800b3cc:	0029      	movs	r1, r5
 800b3ce:	f7f6 f819 	bl	8001404 <__aeabi_dadd>
 800b3d2:	0002      	movs	r2, r0
 800b3d4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b3d6:	0010      	movs	r0, r2
 800b3d8:	0019      	movs	r1, r3
 800b3da:	f7f5 f8ed 	bl	80005b8 <__aeabi_d2uiz>
 800b3de:	0003      	movs	r3, r0
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4699      	mov	r9, r3
					sin(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800b3e4:	1dbb      	adds	r3, r7, #6
 800b3e6:	781a      	ldrb	r2, [r3, #0]
 800b3e8:	4b67      	ldr	r3, [pc, #412]	; (800b588 <interfaceDrawIndex+0x870>)
 800b3ea:	0092      	lsls	r2, r2, #2
 800b3ec:	58d3      	ldr	r3, [r2, r3]
 800b3ee:	1c18      	adds	r0, r3, #0
 800b3f0:	f7f7 fe20 	bl	8003034 <__aeabi_f2d>
 800b3f4:	0002      	movs	r2, r0
 800b3f6:	000b      	movs	r3, r1
 800b3f8:	0010      	movs	r0, r2
 800b3fa:	0019      	movs	r1, r3
 800b3fc:	f006 ff6e 	bl	80122dc <sin>
 800b400:	0004      	movs	r4, r0
 800b402:	000d      	movs	r5, r1
 800b404:	4b61      	ldr	r3, [pc, #388]	; (800b58c <interfaceDrawIndex+0x874>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	0018      	movs	r0, r3
 800b40a:	f7f7 fdbd 	bl	8002f88 <__aeabi_i2d>
 800b40e:	0002      	movs	r2, r0
 800b410:	000b      	movs	r3, r1
 800b412:	0020      	movs	r0, r4
 800b414:	0029      	movs	r1, r5
 800b416:	f7f6 ff65 	bl	80022e4 <__aeabi_dmul>
 800b41a:	0002      	movs	r2, r0
 800b41c:	000b      	movs	r3, r1
 800b41e:	0014      	movs	r4, r2
 800b420:	001d      	movs	r5, r3
							+ chronoDecimalsStartY, colorMain, DOT_PIXEL_1X1,
 800b422:	4b5d      	ldr	r3, [pc, #372]	; (800b598 <interfaceDrawIndex+0x880>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	0018      	movs	r0, r3
 800b428:	f7f7 fdae 	bl	8002f88 <__aeabi_i2d>
 800b42c:	0002      	movs	r2, r0
 800b42e:	000b      	movs	r3, r1
 800b430:	0020      	movs	r0, r4
 800b432:	0029      	movs	r1, r5
 800b434:	f7f5 ffe6 	bl	8001404 <__aeabi_dadd>
 800b438:	0002      	movs	r2, r0
 800b43a:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b43c:	0010      	movs	r0, r2
 800b43e:	0019      	movs	r1, r3
 800b440:	f7f5 f8ba 	bl	80005b8 <__aeabi_d2uiz>
 800b444:	0003      	movs	r3, r0
 800b446:	b29a      	uxth	r2, r3
 800b448:	4b54      	ldr	r3, [pc, #336]	; (800b59c <interfaceDrawIndex+0x884>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2100      	movs	r1, #0
 800b452:	9102      	str	r1, [sp, #8]
 800b454:	2101      	movs	r1, #1
 800b456:	9101      	str	r1, [sp, #4]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	0013      	movs	r3, r2
 800b45c:	464a      	mov	r2, r9
 800b45e:	4641      	mov	r1, r8
 800b460:	0030      	movs	r0, r6
 800b462:	f7f9 f935 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = 0; i < 10; i++) {
 800b466:	1dbb      	adds	r3, r7, #6
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	1dbb      	adds	r3, r7, #6
 800b46c:	3201      	adds	r2, #1
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	1dbb      	adds	r3, r7, #6
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b09      	cmp	r3, #9
 800b476:	d800      	bhi.n	800b47a <interfaceDrawIndex+0x762>
 800b478:	e714      	b.n	800b2a4 <interfaceDrawIndex+0x58c>
					LINE_STYLE_SOLID);

		}

		//										CHRONO DECIMALS DIGITS
		Paint_DrawString_EN(chronoDecimalsStartX - 4, chronoDecimalsStartY - 24,
 800b47a:	4b46      	ldr	r3, [pc, #280]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b04      	subs	r3, #4
 800b482:	b298      	uxth	r0, r3
 800b484:	4b44      	ldr	r3, [pc, #272]	; (800b598 <interfaceDrawIndex+0x880>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b18      	subs	r3, #24
 800b48c:	b299      	uxth	r1, r3
 800b48e:	4b43      	ldr	r3, [pc, #268]	; (800b59c <interfaceDrawIndex+0x884>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	b29b      	uxth	r3, r3
 800b496:	4a42      	ldr	r2, [pc, #264]	; (800b5a0 <interfaceDrawIndex+0x888>)
 800b498:	7812      	ldrb	r2, [r2, #0]
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	b292      	uxth	r2, r2
 800b49e:	4d41      	ldr	r5, [pc, #260]	; (800b5a4 <interfaceDrawIndex+0x88c>)
 800b4a0:	4c41      	ldr	r4, [pc, #260]	; (800b5a8 <interfaceDrawIndex+0x890>)
 800b4a2:	9201      	str	r2, [sp, #4]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	002b      	movs	r3, r5
 800b4a8:	0022      	movs	r2, r4
 800b4aa:	f7f9 fdf1 	bl	8005090 <Paint_DrawString_EN>
				"0", &Font12, colorMain, colorSecond);
		Paint_DrawString_EN(chronoDecimalsStartX + 12,
 800b4ae:	4b39      	ldr	r3, [pc, #228]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	330c      	adds	r3, #12
 800b4b6:	b298      	uxth	r0, r3
 800b4b8:	4b37      	ldr	r3, [pc, #220]	; (800b598 <interfaceDrawIndex+0x880>)
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	3b0c      	subs	r3, #12
 800b4c0:	b299      	uxth	r1, r3
 800b4c2:	4b36      	ldr	r3, [pc, #216]	; (800b59c <interfaceDrawIndex+0x884>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	4a35      	ldr	r2, [pc, #212]	; (800b5a0 <interfaceDrawIndex+0x888>)
 800b4cc:	7812      	ldrb	r2, [r2, #0]
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	b292      	uxth	r2, r2
 800b4d2:	4d34      	ldr	r5, [pc, #208]	; (800b5a4 <interfaceDrawIndex+0x88c>)
 800b4d4:	4c35      	ldr	r4, [pc, #212]	; (800b5ac <interfaceDrawIndex+0x894>)
 800b4d6:	9201      	str	r2, [sp, #4]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	002b      	movs	r3, r5
 800b4dc:	0022      	movs	r2, r4
 800b4de:	f7f9 fdd7 	bl	8005090 <Paint_DrawString_EN>
				chronoDecimalsStartY - 12, "2", &Font12, colorMain,
				colorSecond);
		Paint_DrawString_EN(chronoDecimalsStartX + 6, chronoDecimalsStartY + 6,
 800b4e2:	4b2c      	ldr	r3, [pc, #176]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	3306      	adds	r3, #6
 800b4ea:	b298      	uxth	r0, r3
 800b4ec:	4b2a      	ldr	r3, [pc, #168]	; (800b598 <interfaceDrawIndex+0x880>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3306      	adds	r3, #6
 800b4f4:	b299      	uxth	r1, r3
 800b4f6:	4b29      	ldr	r3, [pc, #164]	; (800b59c <interfaceDrawIndex+0x884>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4a28      	ldr	r2, [pc, #160]	; (800b5a0 <interfaceDrawIndex+0x888>)
 800b500:	7812      	ldrb	r2, [r2, #0]
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	b292      	uxth	r2, r2
 800b506:	4d27      	ldr	r5, [pc, #156]	; (800b5a4 <interfaceDrawIndex+0x88c>)
 800b508:	4c29      	ldr	r4, [pc, #164]	; (800b5b0 <interfaceDrawIndex+0x898>)
 800b50a:	9201      	str	r2, [sp, #4]
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	002b      	movs	r3, r5
 800b510:	0022      	movs	r2, r4
 800b512:	f7f9 fdbd 	bl	8005090 <Paint_DrawString_EN>
				"4", &Font12, colorMain, colorSecond);
		Paint_DrawString_EN(chronoDecimalsStartX - 14, chronoDecimalsStartY + 6,
 800b516:	4b1f      	ldr	r3, [pc, #124]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	3b0e      	subs	r3, #14
 800b51e:	b298      	uxth	r0, r3
 800b520:	4b1d      	ldr	r3, [pc, #116]	; (800b598 <interfaceDrawIndex+0x880>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	b29b      	uxth	r3, r3
 800b526:	3306      	adds	r3, #6
 800b528:	b299      	uxth	r1, r3
 800b52a:	4b1c      	ldr	r3, [pc, #112]	; (800b59c <interfaceDrawIndex+0x884>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	b29b      	uxth	r3, r3
 800b532:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <interfaceDrawIndex+0x888>)
 800b534:	7812      	ldrb	r2, [r2, #0]
 800b536:	b2d2      	uxtb	r2, r2
 800b538:	b292      	uxth	r2, r2
 800b53a:	4d1a      	ldr	r5, [pc, #104]	; (800b5a4 <interfaceDrawIndex+0x88c>)
 800b53c:	4c1d      	ldr	r4, [pc, #116]	; (800b5b4 <interfaceDrawIndex+0x89c>)
 800b53e:	9201      	str	r2, [sp, #4]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	002b      	movs	r3, r5
 800b544:	0022      	movs	r2, r4
 800b546:	f7f9 fda3 	bl	8005090 <Paint_DrawString_EN>
				"6", &Font12, colorMain, colorSecond);
		Paint_DrawString_EN(chronoDecimalsStartX - 18,
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <interfaceDrawIndex+0x87c>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b12      	subs	r3, #18
 800b552:	b298      	uxth	r0, r3
 800b554:	4b10      	ldr	r3, [pc, #64]	; (800b598 <interfaceDrawIndex+0x880>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	3b0c      	subs	r3, #12
 800b55c:	b299      	uxth	r1, r3
 800b55e:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <interfaceDrawIndex+0x884>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	b29b      	uxth	r3, r3
 800b566:	4a0e      	ldr	r2, [pc, #56]	; (800b5a0 <interfaceDrawIndex+0x888>)
 800b568:	7812      	ldrb	r2, [r2, #0]
 800b56a:	b2d2      	uxtb	r2, r2
 800b56c:	b292      	uxth	r2, r2
 800b56e:	4d0d      	ldr	r5, [pc, #52]	; (800b5a4 <interfaceDrawIndex+0x88c>)
 800b570:	4c11      	ldr	r4, [pc, #68]	; (800b5b8 <interfaceDrawIndex+0x8a0>)
 800b572:	9201      	str	r2, [sp, #4]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	002b      	movs	r3, r5
 800b578:	0022      	movs	r2, r4
 800b57a:	f7f9 fd89 	bl	8005090 <Paint_DrawString_EN>
				chronoDecimalsStartY - 12, "8", &Font12, colorMain,
				colorSecond);

		//										CHRONO MINUTES INDEX
		for (uint8_t i = 0; i < 30; i++) {
 800b57e:	1d7b      	adds	r3, r7, #5
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e1ee      	b.n	800b964 <interfaceDrawIndex+0xc4c>
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	200001fc 	.word	0x200001fc
 800b58c:	20000120 	.word	0x20000120
 800b590:	200003bf 	.word	0x200003bf
 800b594:	200003ec 	.word	0x200003ec
 800b598:	200003ed 	.word	0x200003ed
 800b59c:	200001bb 	.word	0x200001bb
 800b5a0:	20000459 	.word	0x20000459
 800b5a4:	20000000 	.word	0x20000000
 800b5a8:	08013b30 	.word	0x08013b30
 800b5ac:	08013b34 	.word	0x08013b34
 800b5b0:	08013b38 	.word	0x08013b38
 800b5b4:	08013b3c 	.word	0x08013b3c
 800b5b8:	08013b40 	.word	0x08013b40

			Paint_DrawLine(
					cos(chronoMinutesIndexAngle[i])
 800b5bc:	1d7b      	adds	r3, r7, #5
 800b5be:	781a      	ldrb	r2, [r3, #0]
 800b5c0:	4bfd      	ldr	r3, [pc, #1012]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b5c2:	0092      	lsls	r2, r2, #2
 800b5c4:	58d3      	ldr	r3, [r2, r3]
 800b5c6:	1c18      	adds	r0, r3, #0
 800b5c8:	f7f7 fd34 	bl	8003034 <__aeabi_f2d>
 800b5cc:	0002      	movs	r2, r0
 800b5ce:	000b      	movs	r3, r1
 800b5d0:	0010      	movs	r0, r2
 800b5d2:	0019      	movs	r1, r3
 800b5d4:	f006 fe40 	bl	8012258 <cos>
 800b5d8:	0004      	movs	r4, r0
 800b5da:	000d      	movs	r5, r1
							* (smallBoardRadius - chronoMinutesIndexLength)
 800b5dc:	4bf7      	ldr	r3, [pc, #988]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	001a      	movs	r2, r3
 800b5e2:	4bf7      	ldr	r3, [pc, #988]	; (800b9c0 <interfaceDrawIndex+0xca8>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f7f7 fccd 	bl	8002f88 <__aeabi_i2d>
 800b5ee:	0002      	movs	r2, r0
 800b5f0:	000b      	movs	r3, r1
 800b5f2:	0020      	movs	r0, r4
 800b5f4:	0029      	movs	r1, r5
 800b5f6:	f7f6 fe75 	bl	80022e4 <__aeabi_dmul>
 800b5fa:	0002      	movs	r2, r0
 800b5fc:	000b      	movs	r3, r1
 800b5fe:	0014      	movs	r4, r2
 800b600:	001d      	movs	r5, r3
							+ chronoMinutesStartX,
 800b602:	4bf0      	ldr	r3, [pc, #960]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	0018      	movs	r0, r3
 800b608:	f7f7 fcbe 	bl	8002f88 <__aeabi_i2d>
 800b60c:	0002      	movs	r2, r0
 800b60e:	000b      	movs	r3, r1
 800b610:	0020      	movs	r0, r4
 800b612:	0029      	movs	r1, r5
 800b614:	f7f5 fef6 	bl	8001404 <__aeabi_dadd>
 800b618:	0002      	movs	r2, r0
 800b61a:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b61c:	0010      	movs	r0, r2
 800b61e:	0019      	movs	r1, r3
 800b620:	f7f4 ffca 	bl	80005b8 <__aeabi_d2uiz>
 800b624:	0003      	movs	r3, r0
 800b626:	b29e      	uxth	r6, r3
					sin(chronoMinutesIndexAngle[i])
 800b628:	1d7b      	adds	r3, r7, #5
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	4be2      	ldr	r3, [pc, #904]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	58d3      	ldr	r3, [r2, r3]
 800b632:	1c18      	adds	r0, r3, #0
 800b634:	f7f7 fcfe 	bl	8003034 <__aeabi_f2d>
 800b638:	0002      	movs	r2, r0
 800b63a:	000b      	movs	r3, r1
 800b63c:	0010      	movs	r0, r2
 800b63e:	0019      	movs	r1, r3
 800b640:	f006 fe4c 	bl	80122dc <sin>
 800b644:	0004      	movs	r4, r0
 800b646:	000d      	movs	r5, r1
							* (smallBoardRadius - chronoMinutesIndexLength)
 800b648:	4bdc      	ldr	r3, [pc, #880]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	001a      	movs	r2, r3
 800b64e:	4bdc      	ldr	r3, [pc, #880]	; (800b9c0 <interfaceDrawIndex+0xca8>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	0018      	movs	r0, r3
 800b656:	f7f7 fc97 	bl	8002f88 <__aeabi_i2d>
 800b65a:	0002      	movs	r2, r0
 800b65c:	000b      	movs	r3, r1
 800b65e:	0020      	movs	r0, r4
 800b660:	0029      	movs	r1, r5
 800b662:	f7f6 fe3f 	bl	80022e4 <__aeabi_dmul>
 800b666:	0002      	movs	r2, r0
 800b668:	000b      	movs	r3, r1
 800b66a:	0014      	movs	r4, r2
 800b66c:	001d      	movs	r5, r3
							+ chronoMinutesStartY,
 800b66e:	4bd6      	ldr	r3, [pc, #856]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	0018      	movs	r0, r3
 800b674:	f7f7 fc88 	bl	8002f88 <__aeabi_i2d>
 800b678:	0002      	movs	r2, r0
 800b67a:	000b      	movs	r3, r1
 800b67c:	0020      	movs	r0, r4
 800b67e:	0029      	movs	r1, r5
 800b680:	f7f5 fec0 	bl	8001404 <__aeabi_dadd>
 800b684:	0002      	movs	r2, r0
 800b686:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b688:	0010      	movs	r0, r2
 800b68a:	0019      	movs	r1, r3
 800b68c:	f7f4 ff94 	bl	80005b8 <__aeabi_d2uiz>
 800b690:	0003      	movs	r3, r0
 800b692:	b29b      	uxth	r3, r3
 800b694:	4698      	mov	r8, r3

					cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800b696:	1d7b      	adds	r3, r7, #5
 800b698:	781a      	ldrb	r2, [r3, #0]
 800b69a:	4bc7      	ldr	r3, [pc, #796]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b69c:	0092      	lsls	r2, r2, #2
 800b69e:	58d3      	ldr	r3, [r2, r3]
 800b6a0:	1c18      	adds	r0, r3, #0
 800b6a2:	f7f7 fcc7 	bl	8003034 <__aeabi_f2d>
 800b6a6:	0002      	movs	r2, r0
 800b6a8:	000b      	movs	r3, r1
 800b6aa:	0010      	movs	r0, r2
 800b6ac:	0019      	movs	r1, r3
 800b6ae:	f006 fdd3 	bl	8012258 <cos>
 800b6b2:	0004      	movs	r4, r0
 800b6b4:	000d      	movs	r5, r1
 800b6b6:	4bc1      	ldr	r3, [pc, #772]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f7f7 fc64 	bl	8002f88 <__aeabi_i2d>
 800b6c0:	0002      	movs	r2, r0
 800b6c2:	000b      	movs	r3, r1
 800b6c4:	0020      	movs	r0, r4
 800b6c6:	0029      	movs	r1, r5
 800b6c8:	f7f6 fe0c 	bl	80022e4 <__aeabi_dmul>
 800b6cc:	0002      	movs	r2, r0
 800b6ce:	000b      	movs	r3, r1
 800b6d0:	0014      	movs	r4, r2
 800b6d2:	001d      	movs	r5, r3
							+ chronoMinutesStartX,
 800b6d4:	4bbb      	ldr	r3, [pc, #748]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f7f7 fc55 	bl	8002f88 <__aeabi_i2d>
 800b6de:	0002      	movs	r2, r0
 800b6e0:	000b      	movs	r3, r1
 800b6e2:	0020      	movs	r0, r4
 800b6e4:	0029      	movs	r1, r5
 800b6e6:	f7f5 fe8d 	bl	8001404 <__aeabi_dadd>
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b6ee:	0010      	movs	r0, r2
 800b6f0:	0019      	movs	r1, r3
 800b6f2:	f7f4 ff61 	bl	80005b8 <__aeabi_d2uiz>
 800b6f6:	0003      	movs	r3, r0
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	4699      	mov	r9, r3
					sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800b6fc:	1d7b      	adds	r3, r7, #5
 800b6fe:	781a      	ldrb	r2, [r3, #0]
 800b700:	4bad      	ldr	r3, [pc, #692]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	58d3      	ldr	r3, [r2, r3]
 800b706:	1c18      	adds	r0, r3, #0
 800b708:	f7f7 fc94 	bl	8003034 <__aeabi_f2d>
 800b70c:	0002      	movs	r2, r0
 800b70e:	000b      	movs	r3, r1
 800b710:	0010      	movs	r0, r2
 800b712:	0019      	movs	r1, r3
 800b714:	f006 fde2 	bl	80122dc <sin>
 800b718:	0004      	movs	r4, r0
 800b71a:	000d      	movs	r5, r1
 800b71c:	4ba7      	ldr	r3, [pc, #668]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	0018      	movs	r0, r3
 800b722:	f7f7 fc31 	bl	8002f88 <__aeabi_i2d>
 800b726:	0002      	movs	r2, r0
 800b728:	000b      	movs	r3, r1
 800b72a:	0020      	movs	r0, r4
 800b72c:	0029      	movs	r1, r5
 800b72e:	f7f6 fdd9 	bl	80022e4 <__aeabi_dmul>
 800b732:	0002      	movs	r2, r0
 800b734:	000b      	movs	r3, r1
 800b736:	0014      	movs	r4, r2
 800b738:	001d      	movs	r5, r3
							+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800b73a:	4ba3      	ldr	r3, [pc, #652]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	0018      	movs	r0, r3
 800b740:	f7f7 fc22 	bl	8002f88 <__aeabi_i2d>
 800b744:	0002      	movs	r2, r0
 800b746:	000b      	movs	r3, r1
 800b748:	0020      	movs	r0, r4
 800b74a:	0029      	movs	r1, r5
 800b74c:	f7f5 fe5a 	bl	8001404 <__aeabi_dadd>
 800b750:	0002      	movs	r2, r0
 800b752:	000b      	movs	r3, r1
			Paint_DrawLine(
 800b754:	0010      	movs	r0, r2
 800b756:	0019      	movs	r1, r3
 800b758:	f7f4 ff2e 	bl	80005b8 <__aeabi_d2uiz>
 800b75c:	0003      	movs	r3, r0
 800b75e:	b29a      	uxth	r2, r3
 800b760:	4b9a      	ldr	r3, [pc, #616]	; (800b9cc <interfaceDrawIndex+0xcb4>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	b29b      	uxth	r3, r3
 800b768:	2100      	movs	r1, #0
 800b76a:	9102      	str	r1, [sp, #8]
 800b76c:	2101      	movs	r1, #1
 800b76e:	9101      	str	r1, [sp, #4]
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	0013      	movs	r3, r2
 800b774:	464a      	mov	r2, r9
 800b776:	4641      	mov	r1, r8
 800b778:	0030      	movs	r0, r6
 800b77a:	f7f8 ffa9 	bl	80046d0 <Paint_DrawLine>
					LINE_STYLE_SOLID);

			if (i % 5 == 0) {
 800b77e:	1d7b      	adds	r3, r7, #5
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2105      	movs	r1, #5
 800b784:	0018      	movs	r0, r3
 800b786:	f7f4 fd4b 	bl	8000220 <__aeabi_uidivmod>
 800b78a:	000b      	movs	r3, r1
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d000      	beq.n	800b794 <interfaceDrawIndex+0xa7c>
 800b792:	e0e2      	b.n	800b95a <interfaceDrawIndex+0xc42>
				Paint_DrawLine(
						cos(chronoMinutesIndexAngle[i])
 800b794:	1d7b      	adds	r3, r7, #5
 800b796:	781a      	ldrb	r2, [r3, #0]
 800b798:	4b87      	ldr	r3, [pc, #540]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b79a:	0092      	lsls	r2, r2, #2
 800b79c:	58d3      	ldr	r3, [r2, r3]
 800b79e:	1c18      	adds	r0, r3, #0
 800b7a0:	f7f7 fc48 	bl	8003034 <__aeabi_f2d>
 800b7a4:	0002      	movs	r2, r0
 800b7a6:	000b      	movs	r3, r1
 800b7a8:	0010      	movs	r0, r2
 800b7aa:	0019      	movs	r1, r3
 800b7ac:	f006 fd54 	bl	8012258 <cos>
 800b7b0:	0004      	movs	r4, r0
 800b7b2:	000d      	movs	r5, r1
								* (smallBoardRadius
										- (chronoMinutesIndexLength + 5))
 800b7b4:	4b81      	ldr	r3, [pc, #516]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	001a      	movs	r2, r3
 800b7ba:	4b81      	ldr	r3, [pc, #516]	; (800b9c0 <interfaceDrawIndex+0xca8>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	3305      	adds	r3, #5
 800b7c0:	1ad3      	subs	r3, r2, r3
								* (smallBoardRadius
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	f7f7 fbe0 	bl	8002f88 <__aeabi_i2d>
 800b7c8:	0002      	movs	r2, r0
 800b7ca:	000b      	movs	r3, r1
 800b7cc:	0020      	movs	r0, r4
 800b7ce:	0029      	movs	r1, r5
 800b7d0:	f7f6 fd88 	bl	80022e4 <__aeabi_dmul>
 800b7d4:	0002      	movs	r2, r0
 800b7d6:	000b      	movs	r3, r1
 800b7d8:	0014      	movs	r4, r2
 800b7da:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800b7dc:	4b79      	ldr	r3, [pc, #484]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f7f7 fbd1 	bl	8002f88 <__aeabi_i2d>
 800b7e6:	0002      	movs	r2, r0
 800b7e8:	000b      	movs	r3, r1
 800b7ea:	0020      	movs	r0, r4
 800b7ec:	0029      	movs	r1, r5
 800b7ee:	f7f5 fe09 	bl	8001404 <__aeabi_dadd>
 800b7f2:	0002      	movs	r2, r0
 800b7f4:	000b      	movs	r3, r1
				Paint_DrawLine(
 800b7f6:	0010      	movs	r0, r2
 800b7f8:	0019      	movs	r1, r3
 800b7fa:	f7f4 fedd 	bl	80005b8 <__aeabi_d2uiz>
 800b7fe:	0003      	movs	r3, r0
 800b800:	b29e      	uxth	r6, r3
						sin(chronoMinutesIndexAngle[i])
 800b802:	1d7b      	adds	r3, r7, #5
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	4b6c      	ldr	r3, [pc, #432]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	58d3      	ldr	r3, [r2, r3]
 800b80c:	1c18      	adds	r0, r3, #0
 800b80e:	f7f7 fc11 	bl	8003034 <__aeabi_f2d>
 800b812:	0002      	movs	r2, r0
 800b814:	000b      	movs	r3, r1
 800b816:	0010      	movs	r0, r2
 800b818:	0019      	movs	r1, r3
 800b81a:	f006 fd5f 	bl	80122dc <sin>
 800b81e:	0004      	movs	r4, r0
 800b820:	000d      	movs	r5, r1
								* (smallBoardRadius
										- (chronoMinutesIndexLength + 5))
 800b822:	4b66      	ldr	r3, [pc, #408]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	001a      	movs	r2, r3
 800b828:	4b65      	ldr	r3, [pc, #404]	; (800b9c0 <interfaceDrawIndex+0xca8>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	3305      	adds	r3, #5
 800b82e:	1ad3      	subs	r3, r2, r3
								* (smallBoardRadius
 800b830:	0018      	movs	r0, r3
 800b832:	f7f7 fba9 	bl	8002f88 <__aeabi_i2d>
 800b836:	0002      	movs	r2, r0
 800b838:	000b      	movs	r3, r1
 800b83a:	0020      	movs	r0, r4
 800b83c:	0029      	movs	r1, r5
 800b83e:	f7f6 fd51 	bl	80022e4 <__aeabi_dmul>
 800b842:	0002      	movs	r2, r0
 800b844:	000b      	movs	r3, r1
 800b846:	0014      	movs	r4, r2
 800b848:	001d      	movs	r5, r3
								+ chronoMinutesStartY,
 800b84a:	4b5f      	ldr	r3, [pc, #380]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	0018      	movs	r0, r3
 800b850:	f7f7 fb9a 	bl	8002f88 <__aeabi_i2d>
 800b854:	0002      	movs	r2, r0
 800b856:	000b      	movs	r3, r1
 800b858:	0020      	movs	r0, r4
 800b85a:	0029      	movs	r1, r5
 800b85c:	f7f5 fdd2 	bl	8001404 <__aeabi_dadd>
 800b860:	0002      	movs	r2, r0
 800b862:	000b      	movs	r3, r1
				Paint_DrawLine(
 800b864:	0010      	movs	r0, r2
 800b866:	0019      	movs	r1, r3
 800b868:	f7f4 fea6 	bl	80005b8 <__aeabi_d2uiz>
 800b86c:	0003      	movs	r3, r0
 800b86e:	b29b      	uxth	r3, r3
 800b870:	4698      	mov	r8, r3

						cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800b872:	1d7b      	adds	r3, r7, #5
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	4b50      	ldr	r3, [pc, #320]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b878:	0092      	lsls	r2, r2, #2
 800b87a:	58d3      	ldr	r3, [r2, r3]
 800b87c:	1c18      	adds	r0, r3, #0
 800b87e:	f7f7 fbd9 	bl	8003034 <__aeabi_f2d>
 800b882:	0002      	movs	r2, r0
 800b884:	000b      	movs	r3, r1
 800b886:	0010      	movs	r0, r2
 800b888:	0019      	movs	r1, r3
 800b88a:	f006 fce5 	bl	8012258 <cos>
 800b88e:	0004      	movs	r4, r0
 800b890:	000d      	movs	r5, r1
 800b892:	4b4a      	ldr	r3, [pc, #296]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	0018      	movs	r0, r3
 800b898:	f7f7 fb76 	bl	8002f88 <__aeabi_i2d>
 800b89c:	0002      	movs	r2, r0
 800b89e:	000b      	movs	r3, r1
 800b8a0:	0020      	movs	r0, r4
 800b8a2:	0029      	movs	r1, r5
 800b8a4:	f7f6 fd1e 	bl	80022e4 <__aeabi_dmul>
 800b8a8:	0002      	movs	r2, r0
 800b8aa:	000b      	movs	r3, r1
 800b8ac:	0014      	movs	r4, r2
 800b8ae:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800b8b0:	4b44      	ldr	r3, [pc, #272]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f7f7 fb67 	bl	8002f88 <__aeabi_i2d>
 800b8ba:	0002      	movs	r2, r0
 800b8bc:	000b      	movs	r3, r1
 800b8be:	0020      	movs	r0, r4
 800b8c0:	0029      	movs	r1, r5
 800b8c2:	f7f5 fd9f 	bl	8001404 <__aeabi_dadd>
 800b8c6:	0002      	movs	r2, r0
 800b8c8:	000b      	movs	r3, r1
				Paint_DrawLine(
 800b8ca:	0010      	movs	r0, r2
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	f7f4 fe73 	bl	80005b8 <__aeabi_d2uiz>
 800b8d2:	0003      	movs	r3, r0
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	4699      	mov	r9, r3
						sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800b8d8:	1d7b      	adds	r3, r7, #5
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	4b36      	ldr	r3, [pc, #216]	; (800b9b8 <interfaceDrawIndex+0xca0>)
 800b8de:	0092      	lsls	r2, r2, #2
 800b8e0:	58d3      	ldr	r3, [r2, r3]
 800b8e2:	1c18      	adds	r0, r3, #0
 800b8e4:	f7f7 fba6 	bl	8003034 <__aeabi_f2d>
 800b8e8:	0002      	movs	r2, r0
 800b8ea:	000b      	movs	r3, r1
 800b8ec:	0010      	movs	r0, r2
 800b8ee:	0019      	movs	r1, r3
 800b8f0:	f006 fcf4 	bl	80122dc <sin>
 800b8f4:	0004      	movs	r4, r0
 800b8f6:	000d      	movs	r5, r1
 800b8f8:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <interfaceDrawIndex+0xca4>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7f7 fb43 	bl	8002f88 <__aeabi_i2d>
 800b902:	0002      	movs	r2, r0
 800b904:	000b      	movs	r3, r1
 800b906:	0020      	movs	r0, r4
 800b908:	0029      	movs	r1, r5
 800b90a:	f7f6 fceb 	bl	80022e4 <__aeabi_dmul>
 800b90e:	0002      	movs	r2, r0
 800b910:	000b      	movs	r3, r1
 800b912:	0014      	movs	r4, r2
 800b914:	001d      	movs	r5, r3
								+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800b916:	4b2c      	ldr	r3, [pc, #176]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	0018      	movs	r0, r3
 800b91c:	f7f7 fb34 	bl	8002f88 <__aeabi_i2d>
 800b920:	0002      	movs	r2, r0
 800b922:	000b      	movs	r3, r1
 800b924:	0020      	movs	r0, r4
 800b926:	0029      	movs	r1, r5
 800b928:	f7f5 fd6c 	bl	8001404 <__aeabi_dadd>
 800b92c:	0002      	movs	r2, r0
 800b92e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800b930:	0010      	movs	r0, r2
 800b932:	0019      	movs	r1, r3
 800b934:	f7f4 fe40 	bl	80005b8 <__aeabi_d2uiz>
 800b938:	0003      	movs	r3, r0
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <interfaceDrawIndex+0xcb4>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	b2db      	uxtb	r3, r3
 800b942:	b29b      	uxth	r3, r3
 800b944:	2100      	movs	r1, #0
 800b946:	9102      	str	r1, [sp, #8]
 800b948:	2101      	movs	r1, #1
 800b94a:	9101      	str	r1, [sp, #4]
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	0013      	movs	r3, r2
 800b950:	464a      	mov	r2, r9
 800b952:	4641      	mov	r1, r8
 800b954:	0030      	movs	r0, r6
 800b956:	f7f8 febb 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = 0; i < 30; i++) {
 800b95a:	1d7b      	adds	r3, r7, #5
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	1d7b      	adds	r3, r7, #5
 800b960:	3201      	adds	r2, #1
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	1d7b      	adds	r3, r7, #5
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	2b1d      	cmp	r3, #29
 800b96a:	d800      	bhi.n	800b96e <interfaceDrawIndex+0xc56>
 800b96c:	e626      	b.n	800b5bc <interfaceDrawIndex+0x8a4>
			}
		}

		//										CHRONO MINUTES DIGITS

		Paint_DrawString_EN(chronoMinutesStartX - 8, chronoMinutesStartY - 20,
 800b96e:	4b15      	ldr	r3, [pc, #84]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b29b      	uxth	r3, r3
 800b974:	3b08      	subs	r3, #8
 800b976:	b298      	uxth	r0, r3
 800b978:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	3b14      	subs	r3, #20
 800b980:	b299      	uxth	r1, r3
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <interfaceDrawIndex+0xcb4>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	b29b      	uxth	r3, r3
 800b98a:	4a11      	ldr	r2, [pc, #68]	; (800b9d0 <interfaceDrawIndex+0xcb8>)
 800b98c:	7812      	ldrb	r2, [r2, #0]
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	b292      	uxth	r2, r2
 800b992:	4d10      	ldr	r5, [pc, #64]	; (800b9d4 <interfaceDrawIndex+0xcbc>)
 800b994:	4c10      	ldr	r4, [pc, #64]	; (800b9d8 <interfaceDrawIndex+0xcc0>)
 800b996:	9201      	str	r2, [sp, #4]
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	002b      	movs	r3, r5
 800b99c:	0022      	movs	r2, r4
 800b99e:	f7f9 fb77 	bl	8005090 <Paint_DrawString_EN>
				"30", &Font12, colorMain, colorSecond);
		Paint_DrawString_EN(chronoMinutesStartX + 2, chronoMinutesStartY + 2,
 800b9a2:	4b08      	ldr	r3, [pc, #32]	; (800b9c4 <interfaceDrawIndex+0xcac>)
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	b298      	uxth	r0, r3
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <interfaceDrawIndex+0xcb0>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	e012      	b.n	800b9dc <interfaceDrawIndex+0xcc4>
 800b9b6:	46c0      	nop			; (mov r8, r8)
 800b9b8:	20000344 	.word	0x20000344
 800b9bc:	20000120 	.word	0x20000120
 800b9c0:	20000234 	.word	0x20000234
 800b9c4:	20000480 	.word	0x20000480
 800b9c8:	2000045a 	.word	0x2000045a
 800b9cc:	200001bb 	.word	0x200001bb
 800b9d0:	20000459 	.word	0x20000459
 800b9d4:	20000000 	.word	0x20000000
 800b9d8:	08013b44 	.word	0x08013b44
 800b9dc:	b299      	uxth	r1, r3
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <interfaceDrawIndex+0xd2c>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	4a18      	ldr	r2, [pc, #96]	; (800ba48 <interfaceDrawIndex+0xd30>)
 800b9e8:	7812      	ldrb	r2, [r2, #0]
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	b292      	uxth	r2, r2
 800b9ee:	4d17      	ldr	r5, [pc, #92]	; (800ba4c <interfaceDrawIndex+0xd34>)
 800b9f0:	4c17      	ldr	r4, [pc, #92]	; (800ba50 <interfaceDrawIndex+0xd38>)
 800b9f2:	9201      	str	r2, [sp, #4]
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	002b      	movs	r3, r5
 800b9f8:	0022      	movs	r2, r4
 800b9fa:	f7f9 fb49 	bl	8005090 <Paint_DrawString_EN>
				"10", &Font12, colorMain, colorSecond);
		Paint_DrawString_EN(chronoMinutesStartX - 18, chronoMinutesStartY + 2,
 800b9fe:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <interfaceDrawIndex+0xd3c>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3b12      	subs	r3, #18
 800ba06:	b298      	uxth	r0, r3
 800ba08:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <interfaceDrawIndex+0xd40>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3302      	adds	r3, #2
 800ba10:	b299      	uxth	r1, r3
 800ba12:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <interfaceDrawIndex+0xd2c>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	4a0b      	ldr	r2, [pc, #44]	; (800ba48 <interfaceDrawIndex+0xd30>)
 800ba1c:	7812      	ldrb	r2, [r2, #0]
 800ba1e:	b2d2      	uxtb	r2, r2
 800ba20:	b292      	uxth	r2, r2
 800ba22:	4d0a      	ldr	r5, [pc, #40]	; (800ba4c <interfaceDrawIndex+0xd34>)
 800ba24:	4c0d      	ldr	r4, [pc, #52]	; (800ba5c <interfaceDrawIndex+0xd44>)
 800ba26:	9201      	str	r2, [sp, #4]
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	002b      	movs	r3, r5
 800ba2c:	0022      	movs	r2, r4
 800ba2e:	f7f9 fb2f 	bl	8005090 <Paint_DrawString_EN>
				"20", &Font12, colorMain, colorSecond);
	}

	//										SECONDS INDEX

	if (showSeconds == 1) {
 800ba32:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <interfaceDrawIndex+0xd48>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d000      	beq.n	800ba3c <interfaceDrawIndex+0xd24>
 800ba3a:	e24e      	b.n	800beda <interfaceDrawIndex+0x11c2>
		for (uint8_t i = 0; i < 12; i++) {
 800ba3c:	1d3b      	adds	r3, r7, #4
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	e1e3      	b.n	800be0c <interfaceDrawIndex+0x10f4>
 800ba44:	200001bb 	.word	0x200001bb
 800ba48:	20000459 	.word	0x20000459
 800ba4c:	20000000 	.word	0x20000000
 800ba50:	08013b48 	.word	0x08013b48
 800ba54:	20000480 	.word	0x20000480
 800ba58:	2000045a 	.word	0x2000045a
 800ba5c:	08013b4c 	.word	0x08013b4c
 800ba60:	20000132 	.word	0x20000132

			Paint_DrawLine(
					cos(secondsIndexAngle[i])
 800ba64:	1d3b      	adds	r3, r7, #4
 800ba66:	781a      	ldrb	r2, [r3, #0]
 800ba68:	4bfd      	ldr	r3, [pc, #1012]	; (800be60 <interfaceDrawIndex+0x1148>)
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	58d3      	ldr	r3, [r2, r3]
 800ba6e:	1c18      	adds	r0, r3, #0
 800ba70:	f7f7 fae0 	bl	8003034 <__aeabi_f2d>
 800ba74:	0002      	movs	r2, r0
 800ba76:	000b      	movs	r3, r1
 800ba78:	0010      	movs	r0, r2
 800ba7a:	0019      	movs	r1, r3
 800ba7c:	f006 fbec 	bl	8012258 <cos>
 800ba80:	0004      	movs	r4, r0
 800ba82:	000d      	movs	r5, r1
							* (smallBoardRadius - secondsIndexLength)
 800ba84:	4bf7      	ldr	r3, [pc, #988]	; (800be64 <interfaceDrawIndex+0x114c>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	001a      	movs	r2, r3
 800ba8a:	4bf7      	ldr	r3, [pc, #988]	; (800be68 <interfaceDrawIndex+0x1150>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	0018      	movs	r0, r3
 800ba92:	f7f7 fa79 	bl	8002f88 <__aeabi_i2d>
 800ba96:	0002      	movs	r2, r0
 800ba98:	000b      	movs	r3, r1
 800ba9a:	0020      	movs	r0, r4
 800ba9c:	0029      	movs	r1, r5
 800ba9e:	f7f6 fc21 	bl	80022e4 <__aeabi_dmul>
 800baa2:	0002      	movs	r2, r0
 800baa4:	000b      	movs	r3, r1
 800baa6:	0014      	movs	r4, r2
 800baa8:	001d      	movs	r5, r3
							+ secondsStartX,
 800baaa:	4bf0      	ldr	r3, [pc, #960]	; (800be6c <interfaceDrawIndex+0x1154>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	0018      	movs	r0, r3
 800bab0:	f7f7 fa6a 	bl	8002f88 <__aeabi_i2d>
 800bab4:	0002      	movs	r2, r0
 800bab6:	000b      	movs	r3, r1
 800bab8:	0020      	movs	r0, r4
 800baba:	0029      	movs	r1, r5
 800babc:	f7f5 fca2 	bl	8001404 <__aeabi_dadd>
 800bac0:	0002      	movs	r2, r0
 800bac2:	000b      	movs	r3, r1
			Paint_DrawLine(
 800bac4:	0010      	movs	r0, r2
 800bac6:	0019      	movs	r1, r3
 800bac8:	f7f4 fd76 	bl	80005b8 <__aeabi_d2uiz>
 800bacc:	0003      	movs	r3, r0
 800bace:	b29e      	uxth	r6, r3
					sin(secondsIndexAngle[i])
 800bad0:	1d3b      	adds	r3, r7, #4
 800bad2:	781a      	ldrb	r2, [r3, #0]
 800bad4:	4be2      	ldr	r3, [pc, #904]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	58d3      	ldr	r3, [r2, r3]
 800bada:	1c18      	adds	r0, r3, #0
 800badc:	f7f7 faaa 	bl	8003034 <__aeabi_f2d>
 800bae0:	0002      	movs	r2, r0
 800bae2:	000b      	movs	r3, r1
 800bae4:	0010      	movs	r0, r2
 800bae6:	0019      	movs	r1, r3
 800bae8:	f006 fbf8 	bl	80122dc <sin>
 800baec:	0004      	movs	r4, r0
 800baee:	000d      	movs	r5, r1
							* (smallBoardRadius - secondsIndexLength)
 800baf0:	4bdc      	ldr	r3, [pc, #880]	; (800be64 <interfaceDrawIndex+0x114c>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	001a      	movs	r2, r3
 800baf6:	4bdc      	ldr	r3, [pc, #880]	; (800be68 <interfaceDrawIndex+0x1150>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7f7 fa43 	bl	8002f88 <__aeabi_i2d>
 800bb02:	0002      	movs	r2, r0
 800bb04:	000b      	movs	r3, r1
 800bb06:	0020      	movs	r0, r4
 800bb08:	0029      	movs	r1, r5
 800bb0a:	f7f6 fbeb 	bl	80022e4 <__aeabi_dmul>
 800bb0e:	0002      	movs	r2, r0
 800bb10:	000b      	movs	r3, r1
 800bb12:	0014      	movs	r4, r2
 800bb14:	001d      	movs	r5, r3
							+ secondsStartY,
 800bb16:	4bd6      	ldr	r3, [pc, #856]	; (800be70 <interfaceDrawIndex+0x1158>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	f7f7 fa34 	bl	8002f88 <__aeabi_i2d>
 800bb20:	0002      	movs	r2, r0
 800bb22:	000b      	movs	r3, r1
 800bb24:	0020      	movs	r0, r4
 800bb26:	0029      	movs	r1, r5
 800bb28:	f7f5 fc6c 	bl	8001404 <__aeabi_dadd>
 800bb2c:	0002      	movs	r2, r0
 800bb2e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800bb30:	0010      	movs	r0, r2
 800bb32:	0019      	movs	r1, r3
 800bb34:	f7f4 fd40 	bl	80005b8 <__aeabi_d2uiz>
 800bb38:	0003      	movs	r3, r0
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4698      	mov	r8, r3

					cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800bb3e:	1d3b      	adds	r3, r7, #4
 800bb40:	781a      	ldrb	r2, [r3, #0]
 800bb42:	4bc7      	ldr	r3, [pc, #796]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bb44:	0092      	lsls	r2, r2, #2
 800bb46:	58d3      	ldr	r3, [r2, r3]
 800bb48:	1c18      	adds	r0, r3, #0
 800bb4a:	f7f7 fa73 	bl	8003034 <__aeabi_f2d>
 800bb4e:	0002      	movs	r2, r0
 800bb50:	000b      	movs	r3, r1
 800bb52:	0010      	movs	r0, r2
 800bb54:	0019      	movs	r1, r3
 800bb56:	f006 fb7f 	bl	8012258 <cos>
 800bb5a:	0004      	movs	r4, r0
 800bb5c:	000d      	movs	r5, r1
 800bb5e:	4bc1      	ldr	r3, [pc, #772]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7f7 fa10 	bl	8002f88 <__aeabi_i2d>
 800bb68:	0002      	movs	r2, r0
 800bb6a:	000b      	movs	r3, r1
 800bb6c:	0020      	movs	r0, r4
 800bb6e:	0029      	movs	r1, r5
 800bb70:	f7f6 fbb8 	bl	80022e4 <__aeabi_dmul>
 800bb74:	0002      	movs	r2, r0
 800bb76:	000b      	movs	r3, r1
 800bb78:	0014      	movs	r4, r2
 800bb7a:	001d      	movs	r5, r3
							+ secondsStartX,
 800bb7c:	4bbb      	ldr	r3, [pc, #748]	; (800be6c <interfaceDrawIndex+0x1154>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	0018      	movs	r0, r3
 800bb82:	f7f7 fa01 	bl	8002f88 <__aeabi_i2d>
 800bb86:	0002      	movs	r2, r0
 800bb88:	000b      	movs	r3, r1
 800bb8a:	0020      	movs	r0, r4
 800bb8c:	0029      	movs	r1, r5
 800bb8e:	f7f5 fc39 	bl	8001404 <__aeabi_dadd>
 800bb92:	0002      	movs	r2, r0
 800bb94:	000b      	movs	r3, r1
			Paint_DrawLine(
 800bb96:	0010      	movs	r0, r2
 800bb98:	0019      	movs	r1, r3
 800bb9a:	f7f4 fd0d 	bl	80005b8 <__aeabi_d2uiz>
 800bb9e:	0003      	movs	r3, r0
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	4699      	mov	r9, r3
					sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800bba4:	1d3b      	adds	r3, r7, #4
 800bba6:	781a      	ldrb	r2, [r3, #0]
 800bba8:	4bad      	ldr	r3, [pc, #692]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bbaa:	0092      	lsls	r2, r2, #2
 800bbac:	58d3      	ldr	r3, [r2, r3]
 800bbae:	1c18      	adds	r0, r3, #0
 800bbb0:	f7f7 fa40 	bl	8003034 <__aeabi_f2d>
 800bbb4:	0002      	movs	r2, r0
 800bbb6:	000b      	movs	r3, r1
 800bbb8:	0010      	movs	r0, r2
 800bbba:	0019      	movs	r1, r3
 800bbbc:	f006 fb8e 	bl	80122dc <sin>
 800bbc0:	0004      	movs	r4, r0
 800bbc2:	000d      	movs	r5, r1
 800bbc4:	4ba7      	ldr	r3, [pc, #668]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f7f7 f9dd 	bl	8002f88 <__aeabi_i2d>
 800bbce:	0002      	movs	r2, r0
 800bbd0:	000b      	movs	r3, r1
 800bbd2:	0020      	movs	r0, r4
 800bbd4:	0029      	movs	r1, r5
 800bbd6:	f7f6 fb85 	bl	80022e4 <__aeabi_dmul>
 800bbda:	0002      	movs	r2, r0
 800bbdc:	000b      	movs	r3, r1
 800bbde:	0014      	movs	r4, r2
 800bbe0:	001d      	movs	r5, r3
							+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800bbe2:	4ba3      	ldr	r3, [pc, #652]	; (800be70 <interfaceDrawIndex+0x1158>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	f7f7 f9ce 	bl	8002f88 <__aeabi_i2d>
 800bbec:	0002      	movs	r2, r0
 800bbee:	000b      	movs	r3, r1
 800bbf0:	0020      	movs	r0, r4
 800bbf2:	0029      	movs	r1, r5
 800bbf4:	f7f5 fc06 	bl	8001404 <__aeabi_dadd>
 800bbf8:	0002      	movs	r2, r0
 800bbfa:	000b      	movs	r3, r1
			Paint_DrawLine(
 800bbfc:	0010      	movs	r0, r2
 800bbfe:	0019      	movs	r1, r3
 800bc00:	f7f4 fcda 	bl	80005b8 <__aeabi_d2uiz>
 800bc04:	0003      	movs	r3, r0
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	4b9a      	ldr	r3, [pc, #616]	; (800be74 <interfaceDrawIndex+0x115c>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	2100      	movs	r1, #0
 800bc12:	9102      	str	r1, [sp, #8]
 800bc14:	2101      	movs	r1, #1
 800bc16:	9101      	str	r1, [sp, #4]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	0013      	movs	r3, r2
 800bc1c:	464a      	mov	r2, r9
 800bc1e:	4641      	mov	r1, r8
 800bc20:	0030      	movs	r0, r6
 800bc22:	f7f8 fd55 	bl	80046d0 <Paint_DrawLine>
					LINE_STYLE_SOLID);

			if (i % 3 == 0) {
 800bc26:	1d3b      	adds	r3, r7, #4
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2103      	movs	r1, #3
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f7f4 faf7 	bl	8000220 <__aeabi_uidivmod>
 800bc32:	000b      	movs	r3, r1
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d000      	beq.n	800bc3c <interfaceDrawIndex+0xf24>
 800bc3a:	e0e2      	b.n	800be02 <interfaceDrawIndex+0x10ea>
				Paint_DrawLine(
						cos(secondsIndexAngle[i])
 800bc3c:	1d3b      	adds	r3, r7, #4
 800bc3e:	781a      	ldrb	r2, [r3, #0]
 800bc40:	4b87      	ldr	r3, [pc, #540]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	58d3      	ldr	r3, [r2, r3]
 800bc46:	1c18      	adds	r0, r3, #0
 800bc48:	f7f7 f9f4 	bl	8003034 <__aeabi_f2d>
 800bc4c:	0002      	movs	r2, r0
 800bc4e:	000b      	movs	r3, r1
 800bc50:	0010      	movs	r0, r2
 800bc52:	0019      	movs	r1, r3
 800bc54:	f006 fb00 	bl	8012258 <cos>
 800bc58:	0004      	movs	r4, r0
 800bc5a:	000d      	movs	r5, r1
								* (smallBoardRadius - (secondsIndexLength + 5))
 800bc5c:	4b81      	ldr	r3, [pc, #516]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	001a      	movs	r2, r3
 800bc62:	4b81      	ldr	r3, [pc, #516]	; (800be68 <interfaceDrawIndex+0x1150>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	3305      	adds	r3, #5
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f7f7 f98c 	bl	8002f88 <__aeabi_i2d>
 800bc70:	0002      	movs	r2, r0
 800bc72:	000b      	movs	r3, r1
 800bc74:	0020      	movs	r0, r4
 800bc76:	0029      	movs	r1, r5
 800bc78:	f7f6 fb34 	bl	80022e4 <__aeabi_dmul>
 800bc7c:	0002      	movs	r2, r0
 800bc7e:	000b      	movs	r3, r1
 800bc80:	0014      	movs	r4, r2
 800bc82:	001d      	movs	r5, r3
								+ secondsStartX,
 800bc84:	4b79      	ldr	r3, [pc, #484]	; (800be6c <interfaceDrawIndex+0x1154>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	0018      	movs	r0, r3
 800bc8a:	f7f7 f97d 	bl	8002f88 <__aeabi_i2d>
 800bc8e:	0002      	movs	r2, r0
 800bc90:	000b      	movs	r3, r1
 800bc92:	0020      	movs	r0, r4
 800bc94:	0029      	movs	r1, r5
 800bc96:	f7f5 fbb5 	bl	8001404 <__aeabi_dadd>
 800bc9a:	0002      	movs	r2, r0
 800bc9c:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bc9e:	0010      	movs	r0, r2
 800bca0:	0019      	movs	r1, r3
 800bca2:	f7f4 fc89 	bl	80005b8 <__aeabi_d2uiz>
 800bca6:	0003      	movs	r3, r0
 800bca8:	b29e      	uxth	r6, r3
						sin(secondsIndexAngle[i])
 800bcaa:	1d3b      	adds	r3, r7, #4
 800bcac:	781a      	ldrb	r2, [r3, #0]
 800bcae:	4b6c      	ldr	r3, [pc, #432]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bcb0:	0092      	lsls	r2, r2, #2
 800bcb2:	58d3      	ldr	r3, [r2, r3]
 800bcb4:	1c18      	adds	r0, r3, #0
 800bcb6:	f7f7 f9bd 	bl	8003034 <__aeabi_f2d>
 800bcba:	0002      	movs	r2, r0
 800bcbc:	000b      	movs	r3, r1
 800bcbe:	0010      	movs	r0, r2
 800bcc0:	0019      	movs	r1, r3
 800bcc2:	f006 fb0b 	bl	80122dc <sin>
 800bcc6:	0004      	movs	r4, r0
 800bcc8:	000d      	movs	r5, r1
								* (smallBoardRadius - (secondsIndexLength + 5))
 800bcca:	4b66      	ldr	r3, [pc, #408]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	001a      	movs	r2, r3
 800bcd0:	4b65      	ldr	r3, [pc, #404]	; (800be68 <interfaceDrawIndex+0x1150>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	3305      	adds	r3, #5
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	0018      	movs	r0, r3
 800bcda:	f7f7 f955 	bl	8002f88 <__aeabi_i2d>
 800bcde:	0002      	movs	r2, r0
 800bce0:	000b      	movs	r3, r1
 800bce2:	0020      	movs	r0, r4
 800bce4:	0029      	movs	r1, r5
 800bce6:	f7f6 fafd 	bl	80022e4 <__aeabi_dmul>
 800bcea:	0002      	movs	r2, r0
 800bcec:	000b      	movs	r3, r1
 800bcee:	0014      	movs	r4, r2
 800bcf0:	001d      	movs	r5, r3
								+ secondsStartY,
 800bcf2:	4b5f      	ldr	r3, [pc, #380]	; (800be70 <interfaceDrawIndex+0x1158>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	f7f7 f946 	bl	8002f88 <__aeabi_i2d>
 800bcfc:	0002      	movs	r2, r0
 800bcfe:	000b      	movs	r3, r1
 800bd00:	0020      	movs	r0, r4
 800bd02:	0029      	movs	r1, r5
 800bd04:	f7f5 fb7e 	bl	8001404 <__aeabi_dadd>
 800bd08:	0002      	movs	r2, r0
 800bd0a:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bd0c:	0010      	movs	r0, r2
 800bd0e:	0019      	movs	r1, r3
 800bd10:	f7f4 fc52 	bl	80005b8 <__aeabi_d2uiz>
 800bd14:	0003      	movs	r3, r0
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4698      	mov	r8, r3

						cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800bd1a:	1d3b      	adds	r3, r7, #4
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	4b50      	ldr	r3, [pc, #320]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bd20:	0092      	lsls	r2, r2, #2
 800bd22:	58d3      	ldr	r3, [r2, r3]
 800bd24:	1c18      	adds	r0, r3, #0
 800bd26:	f7f7 f985 	bl	8003034 <__aeabi_f2d>
 800bd2a:	0002      	movs	r2, r0
 800bd2c:	000b      	movs	r3, r1
 800bd2e:	0010      	movs	r0, r2
 800bd30:	0019      	movs	r1, r3
 800bd32:	f006 fa91 	bl	8012258 <cos>
 800bd36:	0004      	movs	r4, r0
 800bd38:	000d      	movs	r5, r1
 800bd3a:	4b4a      	ldr	r3, [pc, #296]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f7f7 f922 	bl	8002f88 <__aeabi_i2d>
 800bd44:	0002      	movs	r2, r0
 800bd46:	000b      	movs	r3, r1
 800bd48:	0020      	movs	r0, r4
 800bd4a:	0029      	movs	r1, r5
 800bd4c:	f7f6 faca 	bl	80022e4 <__aeabi_dmul>
 800bd50:	0002      	movs	r2, r0
 800bd52:	000b      	movs	r3, r1
 800bd54:	0014      	movs	r4, r2
 800bd56:	001d      	movs	r5, r3
								+ secondsStartX,
 800bd58:	4b44      	ldr	r3, [pc, #272]	; (800be6c <interfaceDrawIndex+0x1154>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f7f7 f913 	bl	8002f88 <__aeabi_i2d>
 800bd62:	0002      	movs	r2, r0
 800bd64:	000b      	movs	r3, r1
 800bd66:	0020      	movs	r0, r4
 800bd68:	0029      	movs	r1, r5
 800bd6a:	f7f5 fb4b 	bl	8001404 <__aeabi_dadd>
 800bd6e:	0002      	movs	r2, r0
 800bd70:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bd72:	0010      	movs	r0, r2
 800bd74:	0019      	movs	r1, r3
 800bd76:	f7f4 fc1f 	bl	80005b8 <__aeabi_d2uiz>
 800bd7a:	0003      	movs	r3, r0
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	4699      	mov	r9, r3
						sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800bd80:	1d3b      	adds	r3, r7, #4
 800bd82:	781a      	ldrb	r2, [r3, #0]
 800bd84:	4b36      	ldr	r3, [pc, #216]	; (800be60 <interfaceDrawIndex+0x1148>)
 800bd86:	0092      	lsls	r2, r2, #2
 800bd88:	58d3      	ldr	r3, [r2, r3]
 800bd8a:	1c18      	adds	r0, r3, #0
 800bd8c:	f7f7 f952 	bl	8003034 <__aeabi_f2d>
 800bd90:	0002      	movs	r2, r0
 800bd92:	000b      	movs	r3, r1
 800bd94:	0010      	movs	r0, r2
 800bd96:	0019      	movs	r1, r3
 800bd98:	f006 faa0 	bl	80122dc <sin>
 800bd9c:	0004      	movs	r4, r0
 800bd9e:	000d      	movs	r5, r1
 800bda0:	4b30      	ldr	r3, [pc, #192]	; (800be64 <interfaceDrawIndex+0x114c>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7f7 f8ef 	bl	8002f88 <__aeabi_i2d>
 800bdaa:	0002      	movs	r2, r0
 800bdac:	000b      	movs	r3, r1
 800bdae:	0020      	movs	r0, r4
 800bdb0:	0029      	movs	r1, r5
 800bdb2:	f7f6 fa97 	bl	80022e4 <__aeabi_dmul>
 800bdb6:	0002      	movs	r2, r0
 800bdb8:	000b      	movs	r3, r1
 800bdba:	0014      	movs	r4, r2
 800bdbc:	001d      	movs	r5, r3
								+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800bdbe:	4b2c      	ldr	r3, [pc, #176]	; (800be70 <interfaceDrawIndex+0x1158>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f7f7 f8e0 	bl	8002f88 <__aeabi_i2d>
 800bdc8:	0002      	movs	r2, r0
 800bdca:	000b      	movs	r3, r1
 800bdcc:	0020      	movs	r0, r4
 800bdce:	0029      	movs	r1, r5
 800bdd0:	f7f5 fb18 	bl	8001404 <__aeabi_dadd>
 800bdd4:	0002      	movs	r2, r0
 800bdd6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bdd8:	0010      	movs	r0, r2
 800bdda:	0019      	movs	r1, r3
 800bddc:	f7f4 fbec 	bl	80005b8 <__aeabi_d2uiz>
 800bde0:	0003      	movs	r3, r0
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	4b23      	ldr	r3, [pc, #140]	; (800be74 <interfaceDrawIndex+0x115c>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2100      	movs	r1, #0
 800bdee:	9102      	str	r1, [sp, #8]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	9101      	str	r1, [sp, #4]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	0013      	movs	r3, r2
 800bdf8:	464a      	mov	r2, r9
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	0030      	movs	r0, r6
 800bdfe:	f7f8 fc67 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = 0; i < 12; i++) {
 800be02:	1d3b      	adds	r3, r7, #4
 800be04:	781a      	ldrb	r2, [r3, #0]
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	3201      	adds	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]
 800be0c:	1d3b      	adds	r3, r7, #4
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2b0b      	cmp	r3, #11
 800be12:	d800      	bhi.n	800be16 <interfaceDrawIndex+0x10fe>
 800be14:	e626      	b.n	800ba64 <interfaceDrawIndex+0xd4c>
			}
		}

		//										SECONDS DIGITS

		Paint_DrawString_EN(secondsStartX - 8, secondsStartY - 20, "60",
 800be16:	4b15      	ldr	r3, [pc, #84]	; (800be6c <interfaceDrawIndex+0x1154>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b08      	subs	r3, #8
 800be1e:	b298      	uxth	r0, r3
 800be20:	4b13      	ldr	r3, [pc, #76]	; (800be70 <interfaceDrawIndex+0x1158>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	b29b      	uxth	r3, r3
 800be26:	3b14      	subs	r3, #20
 800be28:	b299      	uxth	r1, r3
 800be2a:	4b12      	ldr	r3, [pc, #72]	; (800be74 <interfaceDrawIndex+0x115c>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	b29b      	uxth	r3, r3
 800be32:	4a11      	ldr	r2, [pc, #68]	; (800be78 <interfaceDrawIndex+0x1160>)
 800be34:	7812      	ldrb	r2, [r2, #0]
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	b292      	uxth	r2, r2
 800be3a:	4d10      	ldr	r5, [pc, #64]	; (800be7c <interfaceDrawIndex+0x1164>)
 800be3c:	4c10      	ldr	r4, [pc, #64]	; (800be80 <interfaceDrawIndex+0x1168>)
 800be3e:	9201      	str	r2, [sp, #4]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	002b      	movs	r3, r5
 800be44:	0022      	movs	r2, r4
 800be46:	f7f9 f923 	bl	8005090 <Paint_DrawString_EN>
				&Font12, colorMain, colorSecond);
		Paint_DrawString_EN(secondsStartX + 2, secondsStartY + 2, "20", &Font12,
 800be4a:	4b08      	ldr	r3, [pc, #32]	; (800be6c <interfaceDrawIndex+0x1154>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	3302      	adds	r3, #2
 800be52:	b298      	uxth	r0, r3
 800be54:	4b06      	ldr	r3, [pc, #24]	; (800be70 <interfaceDrawIndex+0x1158>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	3302      	adds	r3, #2
 800be5c:	e012      	b.n	800be84 <interfaceDrawIndex+0x116c>
 800be5e:	46c0      	nop			; (mov r8, r8)
 800be60:	20000290 	.word	0x20000290
 800be64:	20000120 	.word	0x20000120
 800be68:	20000128 	.word	0x20000128
 800be6c:	2000047b 	.word	0x2000047b
 800be70:	200001fa 	.word	0x200001fa
 800be74:	200001bb 	.word	0x200001bb
 800be78:	20000459 	.word	0x20000459
 800be7c:	20000000 	.word	0x20000000
 800be80:	08013b50 	.word	0x08013b50
 800be84:	b299      	uxth	r1, r3
 800be86:	4b90      	ldr	r3, [pc, #576]	; (800c0c8 <interfaceDrawIndex+0x13b0>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	4a8f      	ldr	r2, [pc, #572]	; (800c0cc <interfaceDrawIndex+0x13b4>)
 800be90:	7812      	ldrb	r2, [r2, #0]
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	b292      	uxth	r2, r2
 800be96:	4d8e      	ldr	r5, [pc, #568]	; (800c0d0 <interfaceDrawIndex+0x13b8>)
 800be98:	4c8e      	ldr	r4, [pc, #568]	; (800c0d4 <interfaceDrawIndex+0x13bc>)
 800be9a:	9201      	str	r2, [sp, #4]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	002b      	movs	r3, r5
 800bea0:	0022      	movs	r2, r4
 800bea2:	f7f9 f8f5 	bl	8005090 <Paint_DrawString_EN>
				colorMain, colorSecond);
		Paint_DrawString_EN(secondsStartX - 18, secondsStartY + 2, "40",
 800bea6:	4b8c      	ldr	r3, [pc, #560]	; (800c0d8 <interfaceDrawIndex+0x13c0>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	3b12      	subs	r3, #18
 800beae:	b298      	uxth	r0, r3
 800beb0:	4b8a      	ldr	r3, [pc, #552]	; (800c0dc <interfaceDrawIndex+0x13c4>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	3302      	adds	r3, #2
 800beb8:	b299      	uxth	r1, r3
 800beba:	4b83      	ldr	r3, [pc, #524]	; (800c0c8 <interfaceDrawIndex+0x13b0>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	4a82      	ldr	r2, [pc, #520]	; (800c0cc <interfaceDrawIndex+0x13b4>)
 800bec4:	7812      	ldrb	r2, [r2, #0]
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	b292      	uxth	r2, r2
 800beca:	4d81      	ldr	r5, [pc, #516]	; (800c0d0 <interfaceDrawIndex+0x13b8>)
 800becc:	4c84      	ldr	r4, [pc, #528]	; (800c0e0 <interfaceDrawIndex+0x13c8>)
 800bece:	9201      	str	r2, [sp, #4]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	002b      	movs	r3, r5
 800bed4:	0022      	movs	r2, r4
 800bed6:	f7f9 f8db 	bl	8005090 <Paint_DrawString_EN>

	}

	//										MAIN INDEX

	for (uint8_t i = 1; i < 12; i++) {
 800beda:	1cfb      	adds	r3, r7, #3
 800bedc:	2201      	movs	r2, #1
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e0e5      	b.n	800c0ae <interfaceDrawIndex+0x1396>

		Paint_DrawLine(
				cos(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800bee2:	1cfb      	adds	r3, r7, #3
 800bee4:	781a      	ldrb	r2, [r3, #0]
 800bee6:	4b7f      	ldr	r3, [pc, #508]	; (800c0e4 <interfaceDrawIndex+0x13cc>)
 800bee8:	0092      	lsls	r2, r2, #2
 800beea:	58d3      	ldr	r3, [r2, r3]
 800beec:	1c18      	adds	r0, r3, #0
 800beee:	f7f7 f8a1 	bl	8003034 <__aeabi_f2d>
 800bef2:	0002      	movs	r2, r0
 800bef4:	000b      	movs	r3, r1
 800bef6:	0010      	movs	r0, r2
 800bef8:	0019      	movs	r1, r3
 800befa:	f006 f9ad 	bl	8012258 <cos>
 800befe:	0004      	movs	r4, r0
 800bf00:	000d      	movs	r5, r1
 800bf02:	4b79      	ldr	r3, [pc, #484]	; (800c0e8 <interfaceDrawIndex+0x13d0>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	001a      	movs	r2, r3
 800bf08:	4b78      	ldr	r3, [pc, #480]	; (800c0ec <interfaceDrawIndex+0x13d4>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	0018      	movs	r0, r3
 800bf10:	f7f7 f83a 	bl	8002f88 <__aeabi_i2d>
 800bf14:	0002      	movs	r2, r0
 800bf16:	000b      	movs	r3, r1
 800bf18:	0020      	movs	r0, r4
 800bf1a:	0029      	movs	r1, r5
 800bf1c:	f7f6 f9e2 	bl	80022e4 <__aeabi_dmul>
 800bf20:	0002      	movs	r2, r0
 800bf22:	000b      	movs	r3, r1
 800bf24:	0014      	movs	r4, r2
 800bf26:	001d      	movs	r5, r3
						+ mainStartX,
 800bf28:	4b71      	ldr	r3, [pc, #452]	; (800c0f0 <interfaceDrawIndex+0x13d8>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	0018      	movs	r0, r3
 800bf2e:	f7f7 f82b 	bl	8002f88 <__aeabi_i2d>
 800bf32:	0002      	movs	r2, r0
 800bf34:	000b      	movs	r3, r1
 800bf36:	0020      	movs	r0, r4
 800bf38:	0029      	movs	r1, r5
 800bf3a:	f7f5 fa63 	bl	8001404 <__aeabi_dadd>
 800bf3e:	0002      	movs	r2, r0
 800bf40:	000b      	movs	r3, r1
		Paint_DrawLine(
 800bf42:	0010      	movs	r0, r2
 800bf44:	0019      	movs	r1, r3
 800bf46:	f7f4 fb37 	bl	80005b8 <__aeabi_d2uiz>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	b29e      	uxth	r6, r3
				sin(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800bf4e:	1cfb      	adds	r3, r7, #3
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	4b64      	ldr	r3, [pc, #400]	; (800c0e4 <interfaceDrawIndex+0x13cc>)
 800bf54:	0092      	lsls	r2, r2, #2
 800bf56:	58d3      	ldr	r3, [r2, r3]
 800bf58:	1c18      	adds	r0, r3, #0
 800bf5a:	f7f7 f86b 	bl	8003034 <__aeabi_f2d>
 800bf5e:	0002      	movs	r2, r0
 800bf60:	000b      	movs	r3, r1
 800bf62:	0010      	movs	r0, r2
 800bf64:	0019      	movs	r1, r3
 800bf66:	f006 f9b9 	bl	80122dc <sin>
 800bf6a:	0004      	movs	r4, r0
 800bf6c:	000d      	movs	r5, r1
 800bf6e:	4b5e      	ldr	r3, [pc, #376]	; (800c0e8 <interfaceDrawIndex+0x13d0>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	001a      	movs	r2, r3
 800bf74:	4b5d      	ldr	r3, [pc, #372]	; (800c0ec <interfaceDrawIndex+0x13d4>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f7f7 f804 	bl	8002f88 <__aeabi_i2d>
 800bf80:	0002      	movs	r2, r0
 800bf82:	000b      	movs	r3, r1
 800bf84:	0020      	movs	r0, r4
 800bf86:	0029      	movs	r1, r5
 800bf88:	f7f6 f9ac 	bl	80022e4 <__aeabi_dmul>
 800bf8c:	0002      	movs	r2, r0
 800bf8e:	000b      	movs	r3, r1
 800bf90:	0014      	movs	r4, r2
 800bf92:	001d      	movs	r5, r3
						+ mainStartY,
 800bf94:	4b57      	ldr	r3, [pc, #348]	; (800c0f4 <interfaceDrawIndex+0x13dc>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f7f6 fff5 	bl	8002f88 <__aeabi_i2d>
 800bf9e:	0002      	movs	r2, r0
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	0020      	movs	r0, r4
 800bfa4:	0029      	movs	r1, r5
 800bfa6:	f7f5 fa2d 	bl	8001404 <__aeabi_dadd>
 800bfaa:	0002      	movs	r2, r0
 800bfac:	000b      	movs	r3, r1
		Paint_DrawLine(
 800bfae:	0010      	movs	r0, r2
 800bfb0:	0019      	movs	r1, r3
 800bfb2:	f7f4 fb01 	bl	80005b8 <__aeabi_d2uiz>
 800bfb6:	0003      	movs	r3, r0
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	4698      	mov	r8, r3

				cos(mainIndexAngle[i]) * (mainBoardRadius) + mainStartX,
 800bfbc:	1cfb      	adds	r3, r7, #3
 800bfbe:	781a      	ldrb	r2, [r3, #0]
 800bfc0:	4b48      	ldr	r3, [pc, #288]	; (800c0e4 <interfaceDrawIndex+0x13cc>)
 800bfc2:	0092      	lsls	r2, r2, #2
 800bfc4:	58d3      	ldr	r3, [r2, r3]
 800bfc6:	1c18      	adds	r0, r3, #0
 800bfc8:	f7f7 f834 	bl	8003034 <__aeabi_f2d>
 800bfcc:	0002      	movs	r2, r0
 800bfce:	000b      	movs	r3, r1
 800bfd0:	0010      	movs	r0, r2
 800bfd2:	0019      	movs	r1, r3
 800bfd4:	f006 f940 	bl	8012258 <cos>
 800bfd8:	0004      	movs	r4, r0
 800bfda:	000d      	movs	r5, r1
 800bfdc:	4b42      	ldr	r3, [pc, #264]	; (800c0e8 <interfaceDrawIndex+0x13d0>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	0018      	movs	r0, r3
 800bfe2:	f7f6 ffd1 	bl	8002f88 <__aeabi_i2d>
 800bfe6:	0002      	movs	r2, r0
 800bfe8:	000b      	movs	r3, r1
 800bfea:	0020      	movs	r0, r4
 800bfec:	0029      	movs	r1, r5
 800bfee:	f7f6 f979 	bl	80022e4 <__aeabi_dmul>
 800bff2:	0002      	movs	r2, r0
 800bff4:	000b      	movs	r3, r1
 800bff6:	0014      	movs	r4, r2
 800bff8:	001d      	movs	r5, r3
 800bffa:	4b3d      	ldr	r3, [pc, #244]	; (800c0f0 <interfaceDrawIndex+0x13d8>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	0018      	movs	r0, r3
 800c000:	f7f6 ffc2 	bl	8002f88 <__aeabi_i2d>
 800c004:	0002      	movs	r2, r0
 800c006:	000b      	movs	r3, r1
 800c008:	0020      	movs	r0, r4
 800c00a:	0029      	movs	r1, r5
 800c00c:	f7f5 f9fa 	bl	8001404 <__aeabi_dadd>
 800c010:	0002      	movs	r2, r0
 800c012:	000b      	movs	r3, r1
		Paint_DrawLine(
 800c014:	0010      	movs	r0, r2
 800c016:	0019      	movs	r1, r3
 800c018:	f7f4 face 	bl	80005b8 <__aeabi_d2uiz>
 800c01c:	0003      	movs	r3, r0
 800c01e:	b29b      	uxth	r3, r3
 800c020:	4699      	mov	r9, r3
				sin(mainIndexAngle[i]) * (mainBoardRadius) + mainStartY,
 800c022:	1cfb      	adds	r3, r7, #3
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	4b2f      	ldr	r3, [pc, #188]	; (800c0e4 <interfaceDrawIndex+0x13cc>)
 800c028:	0092      	lsls	r2, r2, #2
 800c02a:	58d3      	ldr	r3, [r2, r3]
 800c02c:	1c18      	adds	r0, r3, #0
 800c02e:	f7f7 f801 	bl	8003034 <__aeabi_f2d>
 800c032:	0002      	movs	r2, r0
 800c034:	000b      	movs	r3, r1
 800c036:	0010      	movs	r0, r2
 800c038:	0019      	movs	r1, r3
 800c03a:	f006 f94f 	bl	80122dc <sin>
 800c03e:	0004      	movs	r4, r0
 800c040:	000d      	movs	r5, r1
 800c042:	4b29      	ldr	r3, [pc, #164]	; (800c0e8 <interfaceDrawIndex+0x13d0>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	0018      	movs	r0, r3
 800c048:	f7f6 ff9e 	bl	8002f88 <__aeabi_i2d>
 800c04c:	0002      	movs	r2, r0
 800c04e:	000b      	movs	r3, r1
 800c050:	0020      	movs	r0, r4
 800c052:	0029      	movs	r1, r5
 800c054:	f7f6 f946 	bl	80022e4 <__aeabi_dmul>
 800c058:	0002      	movs	r2, r0
 800c05a:	000b      	movs	r3, r1
 800c05c:	0014      	movs	r4, r2
 800c05e:	001d      	movs	r5, r3
 800c060:	4b24      	ldr	r3, [pc, #144]	; (800c0f4 <interfaceDrawIndex+0x13dc>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	0018      	movs	r0, r3
 800c066:	f7f6 ff8f 	bl	8002f88 <__aeabi_i2d>
 800c06a:	0002      	movs	r2, r0
 800c06c:	000b      	movs	r3, r1
 800c06e:	0020      	movs	r0, r4
 800c070:	0029      	movs	r1, r5
 800c072:	f7f5 f9c7 	bl	8001404 <__aeabi_dadd>
 800c076:	0002      	movs	r2, r0
 800c078:	000b      	movs	r3, r1
		Paint_DrawLine(
 800c07a:	0010      	movs	r0, r2
 800c07c:	0019      	movs	r1, r3
 800c07e:	f7f4 fa9b 	bl	80005b8 <__aeabi_d2uiz>
 800c082:	0003      	movs	r3, r0
 800c084:	b29a      	uxth	r2, r3
 800c086:	4b11      	ldr	r3, [pc, #68]	; (800c0cc <interfaceDrawIndex+0x13b4>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2100      	movs	r1, #0
 800c090:	9102      	str	r1, [sp, #8]
 800c092:	2101      	movs	r1, #1
 800c094:	9101      	str	r1, [sp, #4]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	0013      	movs	r3, r2
 800c09a:	464a      	mov	r2, r9
 800c09c:	4641      	mov	r1, r8
 800c09e:	0030      	movs	r0, r6
 800c0a0:	f7f8 fb16 	bl	80046d0 <Paint_DrawLine>
	for (uint8_t i = 1; i < 12; i++) {
 800c0a4:	1cfb      	adds	r3, r7, #3
 800c0a6:	781a      	ldrb	r2, [r3, #0]
 800c0a8:	1cfb      	adds	r3, r7, #3
 800c0aa:	3201      	adds	r2, #1
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	1cfb      	adds	r3, r7, #3
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b0b      	cmp	r3, #11
 800c0b4:	d800      	bhi.n	800c0b8 <interfaceDrawIndex+0x13a0>
 800c0b6:	e714      	b.n	800bee2 <interfaceDrawIndex+0x11ca>
				colorSecond, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

	}

}
 800c0b8:	46c0      	nop			; (mov r8, r8)
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b003      	add	sp, #12
 800c0c0:	bcc0      	pop	{r6, r7}
 800c0c2:	46b9      	mov	r9, r7
 800c0c4:	46b0      	mov	r8, r6
 800c0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c8:	200001bb 	.word	0x200001bb
 800c0cc:	20000459 	.word	0x20000459
 800c0d0:	20000000 	.word	0x20000000
 800c0d4:	08013b4c 	.word	0x08013b4c
 800c0d8:	2000047b 	.word	0x2000047b
 800c0dc:	200001fa 	.word	0x200001fa
 800c0e0:	08013b54 	.word	0x08013b54
 800c0e4:	200001bc 	.word	0x200001bc
 800c0e8:	200003cc 	.word	0x200003cc
 800c0ec:	200002c2 	.word	0x200002c2
 800c0f0:	200002c7 	.word	0x200002c7
 800c0f4:	2000013a 	.word	0x2000013a

0800c0f8 <interfaceDrawPointers>:

void interfaceDrawPointers() {
 800c0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0fa:	46ce      	mov	lr, r9
 800c0fc:	4647      	mov	r7, r8
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b087      	sub	sp, #28
 800c102:	af04      	add	r7, sp, #16

	//										COUNT ANGLES

	hourAngle = 2 * 3.14 / 60 * ((hours12 * 5 + (minutes / 10)) - 15);
 800c104:	4bf3      	ldr	r3, [pc, #972]	; (800c4d4 <interfaceDrawPointers+0x3dc>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	b25b      	sxtb	r3, r3
 800c10a:	001a      	movs	r2, r3
 800c10c:	0013      	movs	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	189c      	adds	r4, r3, r2
 800c112:	4bf1      	ldr	r3, [pc, #964]	; (800c4d8 <interfaceDrawPointers+0x3e0>)
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	b21b      	sxth	r3, r3
 800c118:	210a      	movs	r1, #10
 800c11a:	0018      	movs	r0, r3
 800c11c:	f7f4 f884 	bl	8000228 <__divsi3>
 800c120:	0003      	movs	r3, r0
 800c122:	b21b      	sxth	r3, r3
 800c124:	18e3      	adds	r3, r4, r3
 800c126:	3b0f      	subs	r3, #15
 800c128:	0018      	movs	r0, r3
 800c12a:	f7f6 ff2d 	bl	8002f88 <__aeabi_i2d>
 800c12e:	4aeb      	ldr	r2, [pc, #940]	; (800c4dc <interfaceDrawPointers+0x3e4>)
 800c130:	4beb      	ldr	r3, [pc, #940]	; (800c4e0 <interfaceDrawPointers+0x3e8>)
 800c132:	f7f6 f8d7 	bl	80022e4 <__aeabi_dmul>
 800c136:	0002      	movs	r2, r0
 800c138:	000b      	movs	r3, r1
 800c13a:	0010      	movs	r0, r2
 800c13c:	0019      	movs	r1, r3
 800c13e:	f7f6 ffc1 	bl	80030c4 <__aeabi_d2f>
 800c142:	1c02      	adds	r2, r0, #0
 800c144:	4be7      	ldr	r3, [pc, #924]	; (800c4e4 <interfaceDrawPointers+0x3ec>)
 800c146:	601a      	str	r2, [r3, #0]
	minuteAngle = 2 * 3.14 / 60 * (minutes - 15);
 800c148:	4be3      	ldr	r3, [pc, #908]	; (800c4d8 <interfaceDrawPointers+0x3e0>)
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b21b      	sxth	r3, r3
 800c14e:	3b0f      	subs	r3, #15
 800c150:	0018      	movs	r0, r3
 800c152:	f7f6 ff19 	bl	8002f88 <__aeabi_i2d>
 800c156:	4ae1      	ldr	r2, [pc, #900]	; (800c4dc <interfaceDrawPointers+0x3e4>)
 800c158:	4be1      	ldr	r3, [pc, #900]	; (800c4e0 <interfaceDrawPointers+0x3e8>)
 800c15a:	f7f6 f8c3 	bl	80022e4 <__aeabi_dmul>
 800c15e:	0002      	movs	r2, r0
 800c160:	000b      	movs	r3, r1
 800c162:	0010      	movs	r0, r2
 800c164:	0019      	movs	r1, r3
 800c166:	f7f6 ffad 	bl	80030c4 <__aeabi_d2f>
 800c16a:	1c02      	adds	r2, r0, #0
 800c16c:	4bde      	ldr	r3, [pc, #888]	; (800c4e8 <interfaceDrawPointers+0x3f0>)
 800c16e:	601a      	str	r2, [r3, #0]
	secondAngle = 2 * 3.14 / 60 * (seconds - 15);
 800c170:	4bde      	ldr	r3, [pc, #888]	; (800c4ec <interfaceDrawPointers+0x3f4>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	b25b      	sxtb	r3, r3
 800c176:	3b0f      	subs	r3, #15
 800c178:	0018      	movs	r0, r3
 800c17a:	f7f6 ff05 	bl	8002f88 <__aeabi_i2d>
 800c17e:	4ad7      	ldr	r2, [pc, #860]	; (800c4dc <interfaceDrawPointers+0x3e4>)
 800c180:	4bd7      	ldr	r3, [pc, #860]	; (800c4e0 <interfaceDrawPointers+0x3e8>)
 800c182:	f7f6 f8af 	bl	80022e4 <__aeabi_dmul>
 800c186:	0002      	movs	r2, r0
 800c188:	000b      	movs	r3, r1
 800c18a:	0010      	movs	r0, r2
 800c18c:	0019      	movs	r1, r3
 800c18e:	f7f6 ff99 	bl	80030c4 <__aeabi_d2f>
 800c192:	1c02      	adds	r2, r0, #0
 800c194:	4bd6      	ldr	r3, [pc, #856]	; (800c4f0 <interfaceDrawPointers+0x3f8>)
 800c196:	601a      	str	r2, [r3, #0]

	batteryStateAngle = 2 * 3.14 / 28 * (batteryState);
 800c198:	4bd6      	ldr	r3, [pc, #856]	; (800c4f4 <interfaceDrawPointers+0x3fc>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	0018      	movs	r0, r3
 800c19e:	f7f6 fef3 	bl	8002f88 <__aeabi_i2d>
 800c1a2:	4ad5      	ldr	r2, [pc, #852]	; (800c4f8 <interfaceDrawPointers+0x400>)
 800c1a4:	4bd5      	ldr	r3, [pc, #852]	; (800c4fc <interfaceDrawPointers+0x404>)
 800c1a6:	f7f6 f89d 	bl	80022e4 <__aeabi_dmul>
 800c1aa:	0002      	movs	r2, r0
 800c1ac:	000b      	movs	r3, r1
 800c1ae:	0010      	movs	r0, r2
 800c1b0:	0019      	movs	r1, r3
 800c1b2:	f7f6 ff87 	bl	80030c4 <__aeabi_d2f>
 800c1b6:	1c02      	adds	r2, r0, #0
 800c1b8:	4bd1      	ldr	r3, [pc, #836]	; (800c500 <interfaceDrawPointers+0x408>)
 800c1ba:	601a      	str	r2, [r3, #0]

	chronoMinutesAngle = 2 * 3.14 / 30 * (chronoMinutes - 7.5);
 800c1bc:	4bd1      	ldr	r3, [pc, #836]	; (800c504 <interfaceDrawPointers+0x40c>)
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	b21b      	sxth	r3, r3
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f7f6 fee0 	bl	8002f88 <__aeabi_i2d>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4bcf      	ldr	r3, [pc, #828]	; (800c508 <interfaceDrawPointers+0x410>)
 800c1cc:	f7f6 faf6 	bl	80027bc <__aeabi_dsub>
 800c1d0:	0002      	movs	r2, r0
 800c1d2:	000b      	movs	r3, r1
 800c1d4:	0010      	movs	r0, r2
 800c1d6:	0019      	movs	r1, r3
 800c1d8:	4ac0      	ldr	r2, [pc, #768]	; (800c4dc <interfaceDrawPointers+0x3e4>)
 800c1da:	4bcc      	ldr	r3, [pc, #816]	; (800c50c <interfaceDrawPointers+0x414>)
 800c1dc:	f7f6 f882 	bl	80022e4 <__aeabi_dmul>
 800c1e0:	0002      	movs	r2, r0
 800c1e2:	000b      	movs	r3, r1
 800c1e4:	0010      	movs	r0, r2
 800c1e6:	0019      	movs	r1, r3
 800c1e8:	f7f6 ff6c 	bl	80030c4 <__aeabi_d2f>
 800c1ec:	1c02      	adds	r2, r0, #0
 800c1ee:	4bc8      	ldr	r3, [pc, #800]	; (800c510 <interfaceDrawPointers+0x418>)
 800c1f0:	601a      	str	r2, [r3, #0]
	chronoSecondsAngle = 2 * 3.14 / 60 * (chronoSeconds - 15);
 800c1f2:	4bc8      	ldr	r3, [pc, #800]	; (800c514 <interfaceDrawPointers+0x41c>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	3b0f      	subs	r3, #15
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f7f6 fec4 	bl	8002f88 <__aeabi_i2d>
 800c200:	4ab6      	ldr	r2, [pc, #728]	; (800c4dc <interfaceDrawPointers+0x3e4>)
 800c202:	4bb7      	ldr	r3, [pc, #732]	; (800c4e0 <interfaceDrawPointers+0x3e8>)
 800c204:	f7f6 f86e 	bl	80022e4 <__aeabi_dmul>
 800c208:	0002      	movs	r2, r0
 800c20a:	000b      	movs	r3, r1
 800c20c:	0010      	movs	r0, r2
 800c20e:	0019      	movs	r1, r3
 800c210:	f7f6 ff58 	bl	80030c4 <__aeabi_d2f>
 800c214:	1c02      	adds	r2, r0, #0
 800c216:	4bc0      	ldr	r3, [pc, #768]	; (800c518 <interfaceDrawPointers+0x420>)
 800c218:	601a      	str	r2, [r3, #0]
	chronoDecimalsAngle = 2 * 3.14 / 10 * (chronoDecimals - 2.5);
 800c21a:	4bc0      	ldr	r3, [pc, #768]	; (800c51c <interfaceDrawPointers+0x424>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	0018      	movs	r0, r3
 800c220:	f7f6 feb2 	bl	8002f88 <__aeabi_i2d>
 800c224:	2200      	movs	r2, #0
 800c226:	4bbe      	ldr	r3, [pc, #760]	; (800c520 <interfaceDrawPointers+0x428>)
 800c228:	f7f6 fac8 	bl	80027bc <__aeabi_dsub>
 800c22c:	0002      	movs	r2, r0
 800c22e:	000b      	movs	r3, r1
 800c230:	0010      	movs	r0, r2
 800c232:	0019      	movs	r1, r3
 800c234:	4abb      	ldr	r2, [pc, #748]	; (800c524 <interfaceDrawPointers+0x42c>)
 800c236:	4bbc      	ldr	r3, [pc, #752]	; (800c528 <interfaceDrawPointers+0x430>)
 800c238:	f7f6 f854 	bl	80022e4 <__aeabi_dmul>
 800c23c:	0002      	movs	r2, r0
 800c23e:	000b      	movs	r3, r1
 800c240:	0010      	movs	r0, r2
 800c242:	0019      	movs	r1, r3
 800c244:	f7f6 ff3e 	bl	80030c4 <__aeabi_d2f>
 800c248:	1c02      	adds	r2, r0, #0
 800c24a:	4bb8      	ldr	r3, [pc, #736]	; (800c52c <interfaceDrawPointers+0x434>)
 800c24c:	601a      	str	r2, [r3, #0]
	pressureAngle = 2 * 3.14 / 100 * (pressureValue - 950 - 25);
 800c24e:	4bb8      	ldr	r3, [pc, #736]	; (800c530 <interfaceDrawPointers+0x438>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4ab8      	ldr	r2, [pc, #736]	; (800c534 <interfaceDrawPointers+0x43c>)
 800c254:	4694      	mov	ip, r2
 800c256:	4463      	add	r3, ip
 800c258:	0018      	movs	r0, r3
 800c25a:	f7f6 fec5 	bl	8002fe8 <__aeabi_ui2d>
 800c25e:	4ab6      	ldr	r2, [pc, #728]	; (800c538 <interfaceDrawPointers+0x440>)
 800c260:	4bb6      	ldr	r3, [pc, #728]	; (800c53c <interfaceDrawPointers+0x444>)
 800c262:	f7f6 f83f 	bl	80022e4 <__aeabi_dmul>
 800c266:	0002      	movs	r2, r0
 800c268:	000b      	movs	r3, r1
 800c26a:	0010      	movs	r0, r2
 800c26c:	0019      	movs	r1, r3
 800c26e:	f7f6 ff29 	bl	80030c4 <__aeabi_d2f>
 800c272:	1c02      	adds	r2, r0, #0
 800c274:	4bb2      	ldr	r3, [pc, #712]	; (800c540 <interfaceDrawPointers+0x448>)
 800c276:	601a      	str	r2, [r3, #0]

	//										LOCK INDICATOR
	if (flagLocked == LOCKED) {
 800c278:	4bb2      	ldr	r3, [pc, #712]	; (800c544 <interfaceDrawPointers+0x44c>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d110      	bne.n	800c2a4 <interfaceDrawPointers+0x1ac>
		Paint_DrawCircle(mainStartX, mainStartY, 10, colorSecond, DOT_PIXEL_2X2,
 800c282:	4bb1      	ldr	r3, [pc, #708]	; (800c548 <interfaceDrawPointers+0x450>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	b298      	uxth	r0, r3
 800c288:	4bb0      	ldr	r3, [pc, #704]	; (800c54c <interfaceDrawPointers+0x454>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b299      	uxth	r1, r3
 800c28e:	4bb0      	ldr	r3, [pc, #704]	; (800c550 <interfaceDrawPointers+0x458>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	b29b      	uxth	r3, r3
 800c296:	2200      	movs	r2, #0
 800c298:	9201      	str	r2, [sp, #4]
 800c29a:	2202      	movs	r2, #2
 800c29c:	9200      	str	r2, [sp, #0]
 800c29e:	220a      	movs	r2, #10
 800c2a0:	f7f8 fbc0 	bl	8004a24 <Paint_DrawCircle>
				DRAW_FILL_EMPTY);
	}

	//										METER

	if (showMeter == 1) {
 800c2a4:	4bab      	ldr	r3, [pc, #684]	; (800c554 <interfaceDrawPointers+0x45c>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d14d      	bne.n	800c348 <interfaceDrawPointers+0x250>
		Paint_DrawString_EN(meterX + 2, meterY + 2, voltagePassive, &Font16,
 800c2ac:	4baa      	ldr	r3, [pc, #680]	; (800c558 <interfaceDrawPointers+0x460>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3302      	adds	r3, #2
 800c2b4:	b298      	uxth	r0, r3
 800c2b6:	4ba9      	ldr	r3, [pc, #676]	; (800c55c <interfaceDrawPointers+0x464>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	3302      	adds	r3, #2
 800c2be:	b299      	uxth	r1, r3
 800c2c0:	4ba3      	ldr	r3, [pc, #652]	; (800c550 <interfaceDrawPointers+0x458>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	4aa5      	ldr	r2, [pc, #660]	; (800c560 <interfaceDrawPointers+0x468>)
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	b2d2      	uxtb	r2, r2
 800c2ce:	b292      	uxth	r2, r2
 800c2d0:	4da4      	ldr	r5, [pc, #656]	; (800c564 <interfaceDrawPointers+0x46c>)
 800c2d2:	4ca5      	ldr	r4, [pc, #660]	; (800c568 <interfaceDrawPointers+0x470>)
 800c2d4:	9201      	str	r2, [sp, #4]
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	002b      	movs	r3, r5
 800c2da:	0022      	movs	r2, r4
 800c2dc:	f7f8 fed8 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);

		Paint_DrawString_EN(meterX + 2, meterY + 18, voltageDrop, &Font16,
 800c2e0:	4b9d      	ldr	r3, [pc, #628]	; (800c558 <interfaceDrawPointers+0x460>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3302      	adds	r3, #2
 800c2e8:	b298      	uxth	r0, r3
 800c2ea:	4b9c      	ldr	r3, [pc, #624]	; (800c55c <interfaceDrawPointers+0x464>)
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	3312      	adds	r3, #18
 800c2f2:	b299      	uxth	r1, r3
 800c2f4:	4b96      	ldr	r3, [pc, #600]	; (800c550 <interfaceDrawPointers+0x458>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4a98      	ldr	r2, [pc, #608]	; (800c560 <interfaceDrawPointers+0x468>)
 800c2fe:	7812      	ldrb	r2, [r2, #0]
 800c300:	b2d2      	uxtb	r2, r2
 800c302:	b292      	uxth	r2, r2
 800c304:	4d97      	ldr	r5, [pc, #604]	; (800c564 <interfaceDrawPointers+0x46c>)
 800c306:	4c99      	ldr	r4, [pc, #612]	; (800c56c <interfaceDrawPointers+0x474>)
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	002b      	movs	r3, r5
 800c30e:	0022      	movs	r2, r4
 800c310:	f7f8 febe 	bl	8005090 <Paint_DrawString_EN>
				colorSecond, colorMain);

		Paint_DrawString_EN(meterX + 2, meterY + 34, resistance, &Font16,
 800c314:	4b90      	ldr	r3, [pc, #576]	; (800c558 <interfaceDrawPointers+0x460>)
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3302      	adds	r3, #2
 800c31c:	b298      	uxth	r0, r3
 800c31e:	4b8f      	ldr	r3, [pc, #572]	; (800c55c <interfaceDrawPointers+0x464>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
 800c324:	3322      	adds	r3, #34	; 0x22
 800c326:	b299      	uxth	r1, r3
 800c328:	4b89      	ldr	r3, [pc, #548]	; (800c550 <interfaceDrawPointers+0x458>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4a8b      	ldr	r2, [pc, #556]	; (800c560 <interfaceDrawPointers+0x468>)
 800c332:	7812      	ldrb	r2, [r2, #0]
 800c334:	b2d2      	uxtb	r2, r2
 800c336:	b292      	uxth	r2, r2
 800c338:	4d8a      	ldr	r5, [pc, #552]	; (800c564 <interfaceDrawPointers+0x46c>)
 800c33a:	4c8d      	ldr	r4, [pc, #564]	; (800c570 <interfaceDrawPointers+0x478>)
 800c33c:	9201      	str	r2, [sp, #4]
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	002b      	movs	r3, r5
 800c342:	0022      	movs	r2, r4
 800c344:	f7f8 fea4 	bl	8005090 <Paint_DrawString_EN>

	}

	//										DIGITAL INTERFACE

	if (showDigitalInterface == 1) {
 800c348:	4b8a      	ldr	r3, [pc, #552]	; (800c574 <interfaceDrawPointers+0x47c>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d000      	beq.n	800c352 <interfaceDrawPointers+0x25a>
 800c350:	e084      	b.n	800c45c <interfaceDrawPointers+0x364>
		Paint_DrawNum(digitalX, digitalY, pressureValue, &Font12, colorMain,
 800c352:	4b89      	ldr	r3, [pc, #548]	; (800c578 <interfaceDrawPointers+0x480>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b298      	uxth	r0, r3
 800c358:	4b88      	ldr	r3, [pc, #544]	; (800c57c <interfaceDrawPointers+0x484>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	b299      	uxth	r1, r3
 800c35e:	4b74      	ldr	r3, [pc, #464]	; (800c530 <interfaceDrawPointers+0x438>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	001d      	movs	r5, r3
 800c364:	4b7e      	ldr	r3, [pc, #504]	; (800c560 <interfaceDrawPointers+0x468>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4a78      	ldr	r2, [pc, #480]	; (800c550 <interfaceDrawPointers+0x458>)
 800c36e:	7812      	ldrb	r2, [r2, #0]
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	b292      	uxth	r2, r2
 800c374:	4c82      	ldr	r4, [pc, #520]	; (800c580 <interfaceDrawPointers+0x488>)
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	0023      	movs	r3, r4
 800c37c:	002a      	movs	r2, r5
 800c37e:	f7f8 ff05 	bl	800518c <Paint_DrawNum>
				colorSecond);
		Paint_DrawNum(digitalX, digitalY + 12, humidityValue, &Font12,
 800c382:	4b7d      	ldr	r3, [pc, #500]	; (800c578 <interfaceDrawPointers+0x480>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	b298      	uxth	r0, r3
 800c388:	4b7c      	ldr	r3, [pc, #496]	; (800c57c <interfaceDrawPointers+0x484>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	330c      	adds	r3, #12
 800c390:	b299      	uxth	r1, r3
 800c392:	4b7c      	ldr	r3, [pc, #496]	; (800c584 <interfaceDrawPointers+0x48c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	001d      	movs	r5, r3
 800c398:	4b71      	ldr	r3, [pc, #452]	; (800c560 <interfaceDrawPointers+0x468>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	4a6b      	ldr	r2, [pc, #428]	; (800c550 <interfaceDrawPointers+0x458>)
 800c3a2:	7812      	ldrb	r2, [r2, #0]
 800c3a4:	b2d2      	uxtb	r2, r2
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	4c75      	ldr	r4, [pc, #468]	; (800c580 <interfaceDrawPointers+0x488>)
 800c3aa:	9201      	str	r2, [sp, #4]
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	0023      	movs	r3, r4
 800c3b0:	002a      	movs	r2, r5
 800c3b2:	f7f8 feeb 	bl	800518c <Paint_DrawNum>
				colorMain, colorSecond);

		if (temperatureValue < 0) {
 800c3b6:	4b74      	ldr	r3, [pc, #464]	; (800c588 <interfaceDrawPointers+0x490>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da35      	bge.n	800c42a <interfaceDrawPointers+0x332>

			Paint_DrawChar(digitalX, digitalY + 24, '-', &Font12, colorMain,
 800c3be:	4b6e      	ldr	r3, [pc, #440]	; (800c578 <interfaceDrawPointers+0x480>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	b298      	uxth	r0, r3
 800c3c4:	4b6d      	ldr	r3, [pc, #436]	; (800c57c <interfaceDrawPointers+0x484>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	3318      	adds	r3, #24
 800c3cc:	b299      	uxth	r1, r3
 800c3ce:	4b64      	ldr	r3, [pc, #400]	; (800c560 <interfaceDrawPointers+0x468>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	4a5e      	ldr	r2, [pc, #376]	; (800c550 <interfaceDrawPointers+0x458>)
 800c3d8:	7812      	ldrb	r2, [r2, #0]
 800c3da:	b2d2      	uxtb	r2, r2
 800c3dc:	b292      	uxth	r2, r2
 800c3de:	4c68      	ldr	r4, [pc, #416]	; (800c580 <interfaceDrawPointers+0x488>)
 800c3e0:	9201      	str	r2, [sp, #4]
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	0023      	movs	r3, r4
 800c3e6:	222d      	movs	r2, #45	; 0x2d
 800c3e8:	f7f8 fd6e 	bl	8004ec8 <Paint_DrawChar>
					colorSecond);
			Paint_DrawNum(digitalX + 8, digitalY + 24, abs(temperatureValue),
 800c3ec:	4b62      	ldr	r3, [pc, #392]	; (800c578 <interfaceDrawPointers+0x480>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	b298      	uxth	r0, r3
 800c3f6:	4b61      	ldr	r3, [pc, #388]	; (800c57c <interfaceDrawPointers+0x484>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	3318      	adds	r3, #24
 800c3fe:	b299      	uxth	r1, r3
 800c400:	4b61      	ldr	r3, [pc, #388]	; (800c588 <interfaceDrawPointers+0x490>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	17da      	asrs	r2, r3, #31
 800c406:	189c      	adds	r4, r3, r2
 800c408:	4054      	eors	r4, r2
 800c40a:	4b55      	ldr	r3, [pc, #340]	; (800c560 <interfaceDrawPointers+0x468>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	b29b      	uxth	r3, r3
 800c412:	4a4f      	ldr	r2, [pc, #316]	; (800c550 <interfaceDrawPointers+0x458>)
 800c414:	7812      	ldrb	r2, [r2, #0]
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	b292      	uxth	r2, r2
 800c41a:	4d59      	ldr	r5, [pc, #356]	; (800c580 <interfaceDrawPointers+0x488>)
 800c41c:	9201      	str	r2, [sp, #4]
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	002b      	movs	r3, r5
 800c422:	0022      	movs	r2, r4
 800c424:	f7f8 feb2 	bl	800518c <Paint_DrawNum>
 800c428:	e018      	b.n	800c45c <interfaceDrawPointers+0x364>
					&Font12, colorMain, colorSecond);
		} else {
			Paint_DrawNum(digitalX, digitalY + 24, temperatureValue, &Font12,
 800c42a:	4b53      	ldr	r3, [pc, #332]	; (800c578 <interfaceDrawPointers+0x480>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b298      	uxth	r0, r3
 800c430:	4b52      	ldr	r3, [pc, #328]	; (800c57c <interfaceDrawPointers+0x484>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	3318      	adds	r3, #24
 800c438:	b299      	uxth	r1, r3
 800c43a:	4b53      	ldr	r3, [pc, #332]	; (800c588 <interfaceDrawPointers+0x490>)
 800c43c:	681c      	ldr	r4, [r3, #0]
 800c43e:	4b48      	ldr	r3, [pc, #288]	; (800c560 <interfaceDrawPointers+0x468>)
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	b2db      	uxtb	r3, r3
 800c444:	b29b      	uxth	r3, r3
 800c446:	4a42      	ldr	r2, [pc, #264]	; (800c550 <interfaceDrawPointers+0x458>)
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	b292      	uxth	r2, r2
 800c44e:	4d4c      	ldr	r5, [pc, #304]	; (800c580 <interfaceDrawPointers+0x488>)
 800c450:	9201      	str	r2, [sp, #4]
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	002b      	movs	r3, r5
 800c456:	0022      	movs	r2, r4
 800c458:	f7f8 fe98 	bl	800518c <Paint_DrawNum>

	}

	//										TEMPERATURE READING

	if (showThermometer == 1) {
 800c45c:	4b4b      	ldr	r3, [pc, #300]	; (800c58c <interfaceDrawPointers+0x494>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d000      	beq.n	800c466 <interfaceDrawPointers+0x36e>
 800c464:	e0af      	b.n	800c5c6 <interfaceDrawPointers+0x4ce>
		if (temperatureValue < 0) {
 800c466:	4b48      	ldr	r3, [pc, #288]	; (800c588 <interfaceDrawPointers+0x490>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	db00      	blt.n	800c470 <interfaceDrawPointers+0x378>
 800c46e:	e093      	b.n	800c598 <interfaceDrawPointers+0x4a0>

			Paint_DrawChar(temperatureX - 8, temperatureY, '-', &Font12,
 800c470:	4b47      	ldr	r3, [pc, #284]	; (800c590 <interfaceDrawPointers+0x498>)
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	b29b      	uxth	r3, r3
 800c476:	3b08      	subs	r3, #8
 800c478:	b298      	uxth	r0, r3
 800c47a:	4b46      	ldr	r3, [pc, #280]	; (800c594 <interfaceDrawPointers+0x49c>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b299      	uxth	r1, r3
 800c480:	4b37      	ldr	r3, [pc, #220]	; (800c560 <interfaceDrawPointers+0x468>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	b29b      	uxth	r3, r3
 800c488:	4a31      	ldr	r2, [pc, #196]	; (800c550 <interfaceDrawPointers+0x458>)
 800c48a:	7812      	ldrb	r2, [r2, #0]
 800c48c:	b2d2      	uxtb	r2, r2
 800c48e:	b292      	uxth	r2, r2
 800c490:	4c3b      	ldr	r4, [pc, #236]	; (800c580 <interfaceDrawPointers+0x488>)
 800c492:	9201      	str	r2, [sp, #4]
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	0023      	movs	r3, r4
 800c498:	222d      	movs	r2, #45	; 0x2d
 800c49a:	f7f8 fd15 	bl	8004ec8 <Paint_DrawChar>
					colorMain, colorSecond);
			Paint_DrawNum(temperatureX, temperatureY, abs(temperatureValue),
 800c49e:	4b3c      	ldr	r3, [pc, #240]	; (800c590 <interfaceDrawPointers+0x498>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	b298      	uxth	r0, r3
 800c4a4:	4b3b      	ldr	r3, [pc, #236]	; (800c594 <interfaceDrawPointers+0x49c>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	b299      	uxth	r1, r3
 800c4aa:	4b37      	ldr	r3, [pc, #220]	; (800c588 <interfaceDrawPointers+0x490>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	17da      	asrs	r2, r3, #31
 800c4b0:	189c      	adds	r4, r3, r2
 800c4b2:	4054      	eors	r4, r2
 800c4b4:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <interfaceDrawPointers+0x468>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	4a24      	ldr	r2, [pc, #144]	; (800c550 <interfaceDrawPointers+0x458>)
 800c4be:	7812      	ldrb	r2, [r2, #0]
 800c4c0:	b2d2      	uxtb	r2, r2
 800c4c2:	b292      	uxth	r2, r2
 800c4c4:	4d2e      	ldr	r5, [pc, #184]	; (800c580 <interfaceDrawPointers+0x488>)
 800c4c6:	9201      	str	r2, [sp, #4]
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	002b      	movs	r3, r5
 800c4cc:	0022      	movs	r2, r4
 800c4ce:	f7f8 fe5d 	bl	800518c <Paint_DrawNum>
 800c4d2:	e078      	b.n	800c5c6 <interfaceDrawPointers+0x4ce>
 800c4d4:	2000013b 	.word	0x2000013b
 800c4d8:	20000486 	.word	0x20000486
 800c4dc:	46508dff 	.word	0x46508dff
 800c4e0:	3fbacb6f 	.word	0x3fbacb6f
 800c4e4:	2000046c 	.word	0x2000046c
 800c4e8:	200003c0 	.word	0x200003c0
 800c4ec:	2000043e 	.word	0x2000043e
 800c4f0:	20000474 	.word	0x20000474
 800c4f4:	20000228 	.word	0x20000228
 800c4f8:	efe89823 	.word	0xefe89823
 800c4fc:	3fccb564 	.word	0x3fccb564
 800c500:	20000124 	.word	0x20000124
 800c504:	20000484 	.word	0x20000484
 800c508:	401e0000 	.word	0x401e0000
 800c50c:	3fcacb6f 	.word	0x3fcacb6f
 800c510:	20000464 	.word	0x20000464
 800c514:	2000044a 	.word	0x2000044a
 800c518:	2000045c 	.word	0x2000045c
 800c51c:	20000144 	.word	0x20000144
 800c520:	40040000 	.word	0x40040000
 800c524:	74bc6a7f 	.word	0x74bc6a7f
 800c528:	3fe41893 	.word	0x3fe41893
 800c52c:	200001f0 	.word	0x200001f0
 800c530:	200003d8 	.word	0x200003d8
 800c534:	fffffc31 	.word	0xfffffc31
 800c538:	2a305533 	.word	0x2a305533
 800c53c:	3fb013a9 	.word	0x3fb013a9
 800c540:	20000494 	.word	0x20000494
 800c544:	20000333 	.word	0x20000333
 800c548:	200002c7 	.word	0x200002c7
 800c54c:	2000013a 	.word	0x2000013a
 800c550:	20000459 	.word	0x20000459
 800c554:	2000047a 	.word	0x2000047a
 800c558:	20000236 	.word	0x20000236
 800c55c:	20000330 	.word	0x20000330
 800c560:	200001bb 	.word	0x200001bb
 800c564:	20000008 	.word	0x20000008
 800c568:	2000033c 	.word	0x2000033c
 800c56c:	200003c4 	.word	0x200003c4
 800c570:	20000450 	.word	0x20000450
 800c574:	20000490 	.word	0x20000490
 800c578:	200003e9 	.word	0x200003e9
 800c57c:	20000232 	.word	0x20000232
 800c580:	20000000 	.word	0x20000000
 800c584:	2000013c 	.word	0x2000013c
 800c588:	2000022c 	.word	0x2000022c
 800c58c:	20000440 	.word	0x20000440
 800c590:	200003d1 	.word	0x200003d1
 800c594:	200001ec 	.word	0x200001ec
					&Font12, colorMain, colorSecond);
		} else {
			Paint_DrawNum(temperatureX, temperatureY, temperatureValue, &Font12,
 800c598:	4b3c      	ldr	r3, [pc, #240]	; (800c68c <interfaceDrawPointers+0x594>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	b298      	uxth	r0, r3
 800c59e:	4b3c      	ldr	r3, [pc, #240]	; (800c690 <interfaceDrawPointers+0x598>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b299      	uxth	r1, r3
 800c5a4:	4b3b      	ldr	r3, [pc, #236]	; (800c694 <interfaceDrawPointers+0x59c>)
 800c5a6:	681c      	ldr	r4, [r3, #0]
 800c5a8:	4b3b      	ldr	r3, [pc, #236]	; (800c698 <interfaceDrawPointers+0x5a0>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4a3a      	ldr	r2, [pc, #232]	; (800c69c <interfaceDrawPointers+0x5a4>)
 800c5b2:	7812      	ldrb	r2, [r2, #0]
 800c5b4:	b2d2      	uxtb	r2, r2
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	4d39      	ldr	r5, [pc, #228]	; (800c6a0 <interfaceDrawPointers+0x5a8>)
 800c5ba:	9201      	str	r2, [sp, #4]
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	002b      	movs	r3, r5
 800c5c0:	0022      	movs	r2, r4
 800c5c2:	f7f8 fde3 	bl	800518c <Paint_DrawNum>
		}
	}

	//										HUMIDITY READING

	if (showHigrometer == 1) {
 800c5c6:	4b37      	ldr	r3, [pc, #220]	; (800c6a4 <interfaceDrawPointers+0x5ac>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d120      	bne.n	800c610 <interfaceDrawPointers+0x518>
		Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800c5ce:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <interfaceDrawPointers+0x5b0>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	b298      	uxth	r0, r3
 800c5d4:	4b35      	ldr	r3, [pc, #212]	; (800c6ac <interfaceDrawPointers+0x5b4>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b299      	uxth	r1, r3
 800c5da:	4b33      	ldr	r3, [pc, #204]	; (800c6a8 <interfaceDrawPointers+0x5b0>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3305      	adds	r3, #5
 800c5e2:	b29c      	uxth	r4, r3
 800c5e4:	4b31      	ldr	r3, [pc, #196]	; (800c6ac <interfaceDrawPointers+0x5b4>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	b29a      	uxth	r2, r3
				humidityY + (humidityValue / 2), colorSecond, DOT_PIXEL_1X1,
 800c5ea:	4b31      	ldr	r3, [pc, #196]	; (800c6b0 <interfaceDrawPointers+0x5b8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	085b      	lsrs	r3, r3, #1
		Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	18d3      	adds	r3, r2, r3
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	4b29      	ldr	r3, [pc, #164]	; (800c69c <interfaceDrawPointers+0x5a4>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	2501      	movs	r5, #1
 800c600:	9502      	str	r5, [sp, #8]
 800c602:	2501      	movs	r5, #1
 800c604:	9501      	str	r5, [sp, #4]
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	0013      	movs	r3, r2
 800c60a:	0022      	movs	r2, r4
 800c60c:	f7f8 f93e 	bl	800488c <Paint_DrawRectangle>
				DRAW_FILL_FULL);
	}

	//										ALTITUDE READING

	if (showNavi == 1) {
 800c610:	4b28      	ldr	r3, [pc, #160]	; (800c6b4 <interfaceDrawPointers+0x5bc>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d16e      	bne.n	800c6f6 <interfaceDrawPointers+0x5fe>
		if (altitudeValue < 0) {
 800c618:	4b27      	ldr	r3, [pc, #156]	; (800c6b8 <interfaceDrawPointers+0x5c0>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	da51      	bge.n	800c6c4 <interfaceDrawPointers+0x5cc>
			Paint_DrawChar(compassX, compassY + 31, '-', &Font12, colorSecond,
 800c620:	4b26      	ldr	r3, [pc, #152]	; (800c6bc <interfaceDrawPointers+0x5c4>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	b298      	uxth	r0, r3
 800c626:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <interfaceDrawPointers+0x5c8>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	331f      	adds	r3, #31
 800c62e:	b299      	uxth	r1, r3
 800c630:	4b1a      	ldr	r3, [pc, #104]	; (800c69c <interfaceDrawPointers+0x5a4>)
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	b2db      	uxtb	r3, r3
 800c636:	b29b      	uxth	r3, r3
 800c638:	4a17      	ldr	r2, [pc, #92]	; (800c698 <interfaceDrawPointers+0x5a0>)
 800c63a:	7812      	ldrb	r2, [r2, #0]
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	b292      	uxth	r2, r2
 800c640:	4c17      	ldr	r4, [pc, #92]	; (800c6a0 <interfaceDrawPointers+0x5a8>)
 800c642:	9201      	str	r2, [sp, #4]
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	0023      	movs	r3, r4
 800c648:	222d      	movs	r2, #45	; 0x2d
 800c64a:	f7f8 fc3d 	bl	8004ec8 <Paint_DrawChar>
					colorMain);
			Paint_DrawNum(compassX + 8, compassY + 31, abs(altitudeValue),
 800c64e:	4b1b      	ldr	r3, [pc, #108]	; (800c6bc <interfaceDrawPointers+0x5c4>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	3308      	adds	r3, #8
 800c656:	b298      	uxth	r0, r3
 800c658:	4b19      	ldr	r3, [pc, #100]	; (800c6c0 <interfaceDrawPointers+0x5c8>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	331f      	adds	r3, #31
 800c660:	b299      	uxth	r1, r3
 800c662:	4b15      	ldr	r3, [pc, #84]	; (800c6b8 <interfaceDrawPointers+0x5c0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	17da      	asrs	r2, r3, #31
 800c668:	189c      	adds	r4, r3, r2
 800c66a:	4054      	eors	r4, r2
 800c66c:	4b0b      	ldr	r3, [pc, #44]	; (800c69c <interfaceDrawPointers+0x5a4>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	b2db      	uxtb	r3, r3
 800c672:	b29b      	uxth	r3, r3
 800c674:	4a08      	ldr	r2, [pc, #32]	; (800c698 <interfaceDrawPointers+0x5a0>)
 800c676:	7812      	ldrb	r2, [r2, #0]
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	b292      	uxth	r2, r2
 800c67c:	4d08      	ldr	r5, [pc, #32]	; (800c6a0 <interfaceDrawPointers+0x5a8>)
 800c67e:	9201      	str	r2, [sp, #4]
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	002b      	movs	r3, r5
 800c684:	0022      	movs	r2, r4
 800c686:	f7f8 fd81 	bl	800518c <Paint_DrawNum>
 800c68a:	e034      	b.n	800c6f6 <interfaceDrawPointers+0x5fe>
 800c68c:	200003d1 	.word	0x200003d1
 800c690:	200001ec 	.word	0x200001ec
 800c694:	2000022c 	.word	0x2000022c
 800c698:	200001bb 	.word	0x200001bb
 800c69c:	20000459 	.word	0x20000459
 800c6a0:	20000000 	.word	0x20000000
 800c6a4:	200003ea 	.word	0x200003ea
 800c6a8:	2000049a 	.word	0x2000049a
 800c6ac:	200002c6 	.word	0x200002c6
 800c6b0:	2000013c 	.word	0x2000013c
 800c6b4:	200001ed 	.word	0x200001ed
 800c6b8:	200003e4 	.word	0x200003e4
 800c6bc:	20000479 	.word	0x20000479
 800c6c0:	200002c8 	.word	0x200002c8
					&Font12, colorSecond, colorMain);
		} else {
			Paint_DrawNum(compassX, compassY + 31, altitudeValue, &Font12,
 800c6c4:	4be8      	ldr	r3, [pc, #928]	; (800ca68 <interfaceDrawPointers+0x970>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	b298      	uxth	r0, r3
 800c6ca:	4be8      	ldr	r3, [pc, #928]	; (800ca6c <interfaceDrawPointers+0x974>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	331f      	adds	r3, #31
 800c6d2:	b299      	uxth	r1, r3
 800c6d4:	4be6      	ldr	r3, [pc, #920]	; (800ca70 <interfaceDrawPointers+0x978>)
 800c6d6:	681c      	ldr	r4, [r3, #0]
 800c6d8:	4be6      	ldr	r3, [pc, #920]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	4ae5      	ldr	r2, [pc, #916]	; (800ca78 <interfaceDrawPointers+0x980>)
 800c6e2:	7812      	ldrb	r2, [r2, #0]
 800c6e4:	b2d2      	uxtb	r2, r2
 800c6e6:	b292      	uxth	r2, r2
 800c6e8:	4de4      	ldr	r5, [pc, #912]	; (800ca7c <interfaceDrawPointers+0x984>)
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	002b      	movs	r3, r5
 800c6f0:	0022      	movs	r2, r4
 800c6f2:	f7f8 fd4b 	bl	800518c <Paint_DrawNum>
		}
	}

	//										MAGNETOMETER READING

	if (showNavi == 1) {
 800c6f6:	4be2      	ldr	r3, [pc, #904]	; (800ca80 <interfaceDrawPointers+0x988>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d16d      	bne.n	800c7da <interfaceDrawPointers+0x6e2>

		uint16_t compassCenterX = compassX + 24;
 800c6fe:	4bda      	ldr	r3, [pc, #872]	; (800ca68 <interfaceDrawPointers+0x970>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	b29a      	uxth	r2, r3
 800c704:	1d3b      	adds	r3, r7, #4
 800c706:	3218      	adds	r2, #24
 800c708:	801a      	strh	r2, [r3, #0]
		uint16_t compassCenterY = compassY + 14;
 800c70a:	4bd8      	ldr	r3, [pc, #864]	; (800ca6c <interfaceDrawPointers+0x974>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b29a      	uxth	r2, r3
 800c710:	1cbb      	adds	r3, r7, #2
 800c712:	320e      	adds	r2, #14
 800c714:	801a      	strh	r2, [r3, #0]

		Paint_DrawPoint(compassCenterX + magneticFieldX,
 800c716:	4bdb      	ldr	r3, [pc, #876]	; (800ca84 <interfaceDrawPointers+0x98c>)
 800c718:	2200      	movs	r2, #0
 800c71a:	5e9b      	ldrsh	r3, [r3, r2]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	1d3b      	adds	r3, r7, #4
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	18d3      	adds	r3, r2, r3
 800c724:	b298      	uxth	r0, r3
 800c726:	4bd8      	ldr	r3, [pc, #864]	; (800ca88 <interfaceDrawPointers+0x990>)
 800c728:	2200      	movs	r2, #0
 800c72a:	5e9b      	ldrsh	r3, [r3, r2]
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	1cbb      	adds	r3, r7, #2
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	18d3      	adds	r3, r2, r3
 800c734:	b299      	uxth	r1, r3
 800c736:	4bcf      	ldr	r3, [pc, #828]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	2301      	movs	r3, #1
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	2303      	movs	r3, #3
 800c744:	f7f7 feda 	bl	80044fc <Paint_DrawPoint>
				compassCenterY + magneticFieldY, colorSecond, DOT_PIXEL_3X3,
				DOT_STYLE_DFT);

		Paint_DrawLine(compassX, compassCenterY + magneticFieldY, compassX + 48,
 800c748:	4bc7      	ldr	r3, [pc, #796]	; (800ca68 <interfaceDrawPointers+0x970>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b298      	uxth	r0, r3
 800c74e:	4bce      	ldr	r3, [pc, #824]	; (800ca88 <interfaceDrawPointers+0x990>)
 800c750:	2200      	movs	r2, #0
 800c752:	5e9b      	ldrsh	r3, [r3, r2]
 800c754:	b29a      	uxth	r2, r3
 800c756:	1cbb      	adds	r3, r7, #2
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	18d3      	adds	r3, r2, r3
 800c75c:	b299      	uxth	r1, r3
 800c75e:	4bc2      	ldr	r3, [pc, #776]	; (800ca68 <interfaceDrawPointers+0x970>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	3330      	adds	r3, #48	; 0x30
 800c766:	b29c      	uxth	r4, r3
 800c768:	4bc7      	ldr	r3, [pc, #796]	; (800ca88 <interfaceDrawPointers+0x990>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	5e9b      	ldrsh	r3, [r3, r2]
 800c76e:	b29a      	uxth	r2, r3
 800c770:	1cbb      	adds	r3, r7, #2
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	18d3      	adds	r3, r2, r3
 800c776:	b29a      	uxth	r2, r3
 800c778:	4bbe      	ldr	r3, [pc, #760]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	b29b      	uxth	r3, r3
 800c780:	2500      	movs	r5, #0
 800c782:	9502      	str	r5, [sp, #8]
 800c784:	2501      	movs	r5, #1
 800c786:	9501      	str	r5, [sp, #4]
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	0013      	movs	r3, r2
 800c78c:	0022      	movs	r2, r4
 800c78e:	f7f7 ff9f 	bl	80046d0 <Paint_DrawLine>
				compassCenterY + magneticFieldY, colorSecond, DOT_PIXEL_1X1,
				LINE_STYLE_SOLID);

		Paint_DrawLine(compassCenterX + magneticFieldX, compassY,
 800c792:	4bbc      	ldr	r3, [pc, #752]	; (800ca84 <interfaceDrawPointers+0x98c>)
 800c794:	2200      	movs	r2, #0
 800c796:	5e9b      	ldrsh	r3, [r3, r2]
 800c798:	b29a      	uxth	r2, r3
 800c79a:	1d3b      	adds	r3, r7, #4
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	18d3      	adds	r3, r2, r3
 800c7a0:	b298      	uxth	r0, r3
 800c7a2:	4bb2      	ldr	r3, [pc, #712]	; (800ca6c <interfaceDrawPointers+0x974>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	b299      	uxth	r1, r3
 800c7a8:	4bb6      	ldr	r3, [pc, #728]	; (800ca84 <interfaceDrawPointers+0x98c>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	5e9b      	ldrsh	r3, [r3, r2]
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	1d3b      	adds	r3, r7, #4
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	18d3      	adds	r3, r2, r3
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	4bac      	ldr	r3, [pc, #688]	; (800ca6c <interfaceDrawPointers+0x974>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	331d      	adds	r3, #29
 800c7c0:	b29c      	uxth	r4, r3
 800c7c2:	4bac      	ldr	r3, [pc, #688]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	2500      	movs	r5, #0
 800c7cc:	9502      	str	r5, [sp, #8]
 800c7ce:	2501      	movs	r5, #1
 800c7d0:	9501      	str	r5, [sp, #4]
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	0023      	movs	r3, r4
 800c7d6:	f7f7 ff7b 	bl	80046d0 <Paint_DrawLine>

	}

	//										PRESSURE POINTER

	if (showBarometer == 1) {
 800c7da:	4bac      	ldr	r3, [pc, #688]	; (800ca8c <interfaceDrawPointers+0x994>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d000      	beq.n	800c7e4 <interfaceDrawPointers+0x6ec>
 800c7e2:	e136      	b.n	800ca52 <interfaceDrawPointers+0x95a>
		Paint_DrawLine((cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800c7e4:	4baa      	ldr	r3, [pc, #680]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	1c18      	adds	r0, r3, #0
 800c7ea:	f7f6 fc23 	bl	8003034 <__aeabi_f2d>
 800c7ee:	0002      	movs	r2, r0
 800c7f0:	000b      	movs	r3, r1
 800c7f2:	0010      	movs	r0, r2
 800c7f4:	0019      	movs	r1, r3
 800c7f6:	f005 fd2f 	bl	8012258 <cos>
 800c7fa:	0004      	movs	r4, r0
 800c7fc:	000d      	movs	r5, r1
 800c7fe:	4ba5      	ldr	r3, [pc, #660]	; (800ca94 <interfaceDrawPointers+0x99c>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	0018      	movs	r0, r3
 800c804:	f7f6 fbc0 	bl	8002f88 <__aeabi_i2d>
 800c808:	0002      	movs	r2, r0
 800c80a:	000b      	movs	r3, r1
 800c80c:	0020      	movs	r0, r4
 800c80e:	0029      	movs	r1, r5
 800c810:	f7f5 fd68 	bl	80022e4 <__aeabi_dmul>
 800c814:	0002      	movs	r2, r0
 800c816:	000b      	movs	r3, r1
 800c818:	0014      	movs	r4, r2
 800c81a:	001d      	movs	r5, r3
 800c81c:	4b9e      	ldr	r3, [pc, #632]	; (800ca98 <interfaceDrawPointers+0x9a0>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	0018      	movs	r0, r3
 800c822:	f7f6 fbb1 	bl	8002f88 <__aeabi_i2d>
 800c826:	0002      	movs	r2, r0
 800c828:	000b      	movs	r3, r1
 800c82a:	0020      	movs	r0, r4
 800c82c:	0029      	movs	r1, r5
 800c82e:	f7f4 fde9 	bl	8001404 <__aeabi_dadd>
 800c832:	0002      	movs	r2, r0
 800c834:	000b      	movs	r3, r1
 800c836:	0010      	movs	r0, r2
 800c838:	0019      	movs	r1, r3
 800c83a:	f7f3 febd 	bl	80005b8 <__aeabi_d2uiz>
 800c83e:	0003      	movs	r3, r0
 800c840:	b29e      	uxth	r6, r3
				(sin(pressureAngle) * pressurePointerShift) + mainStartY,
 800c842:	4b93      	ldr	r3, [pc, #588]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	1c18      	adds	r0, r3, #0
 800c848:	f7f6 fbf4 	bl	8003034 <__aeabi_f2d>
 800c84c:	0002      	movs	r2, r0
 800c84e:	000b      	movs	r3, r1
 800c850:	0010      	movs	r0, r2
 800c852:	0019      	movs	r1, r3
 800c854:	f005 fd42 	bl	80122dc <sin>
 800c858:	0004      	movs	r4, r0
 800c85a:	000d      	movs	r5, r1
 800c85c:	4b8d      	ldr	r3, [pc, #564]	; (800ca94 <interfaceDrawPointers+0x99c>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	0018      	movs	r0, r3
 800c862:	f7f6 fb91 	bl	8002f88 <__aeabi_i2d>
 800c866:	0002      	movs	r2, r0
 800c868:	000b      	movs	r3, r1
 800c86a:	0020      	movs	r0, r4
 800c86c:	0029      	movs	r1, r5
 800c86e:	f7f5 fd39 	bl	80022e4 <__aeabi_dmul>
 800c872:	0002      	movs	r2, r0
 800c874:	000b      	movs	r3, r1
 800c876:	0014      	movs	r4, r2
 800c878:	001d      	movs	r5, r3
 800c87a:	4b88      	ldr	r3, [pc, #544]	; (800ca9c <interfaceDrawPointers+0x9a4>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	0018      	movs	r0, r3
 800c880:	f7f6 fb82 	bl	8002f88 <__aeabi_i2d>
 800c884:	0002      	movs	r2, r0
 800c886:	000b      	movs	r3, r1
 800c888:	0020      	movs	r0, r4
 800c88a:	0029      	movs	r1, r5
 800c88c:	f7f4 fdba 	bl	8001404 <__aeabi_dadd>
 800c890:	0002      	movs	r2, r0
 800c892:	000b      	movs	r3, r1
		Paint_DrawLine((cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800c894:	0010      	movs	r0, r2
 800c896:	0019      	movs	r1, r3
 800c898:	f7f3 fe8e 	bl	80005b8 <__aeabi_d2uiz>
 800c89c:	0003      	movs	r3, r0
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	4698      	mov	r8, r3
				(cos(pressureAngle) * pressurePointerLength) + mainStartX,
 800c8a2:	4b7b      	ldr	r3, [pc, #492]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	1c18      	adds	r0, r3, #0
 800c8a8:	f7f6 fbc4 	bl	8003034 <__aeabi_f2d>
 800c8ac:	0002      	movs	r2, r0
 800c8ae:	000b      	movs	r3, r1
 800c8b0:	0010      	movs	r0, r2
 800c8b2:	0019      	movs	r1, r3
 800c8b4:	f005 fcd0 	bl	8012258 <cos>
 800c8b8:	0004      	movs	r4, r0
 800c8ba:	000d      	movs	r5, r1
 800c8bc:	4b78      	ldr	r3, [pc, #480]	; (800caa0 <interfaceDrawPointers+0x9a8>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f7f6 fb61 	bl	8002f88 <__aeabi_i2d>
 800c8c6:	0002      	movs	r2, r0
 800c8c8:	000b      	movs	r3, r1
 800c8ca:	0020      	movs	r0, r4
 800c8cc:	0029      	movs	r1, r5
 800c8ce:	f7f5 fd09 	bl	80022e4 <__aeabi_dmul>
 800c8d2:	0002      	movs	r2, r0
 800c8d4:	000b      	movs	r3, r1
 800c8d6:	0014      	movs	r4, r2
 800c8d8:	001d      	movs	r5, r3
 800c8da:	4b6f      	ldr	r3, [pc, #444]	; (800ca98 <interfaceDrawPointers+0x9a0>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	0018      	movs	r0, r3
 800c8e0:	f7f6 fb52 	bl	8002f88 <__aeabi_i2d>
 800c8e4:	0002      	movs	r2, r0
 800c8e6:	000b      	movs	r3, r1
 800c8e8:	0020      	movs	r0, r4
 800c8ea:	0029      	movs	r1, r5
 800c8ec:	f7f4 fd8a 	bl	8001404 <__aeabi_dadd>
 800c8f0:	0002      	movs	r2, r0
 800c8f2:	000b      	movs	r3, r1
		Paint_DrawLine((cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800c8f4:	0010      	movs	r0, r2
 800c8f6:	0019      	movs	r1, r3
 800c8f8:	f7f3 fe5e 	bl	80005b8 <__aeabi_d2uiz>
 800c8fc:	0003      	movs	r3, r0
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	4699      	mov	r9, r3
				(sin(pressureAngle) * pressurePointerLength) + mainStartY,
 800c902:	4b63      	ldr	r3, [pc, #396]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	1c18      	adds	r0, r3, #0
 800c908:	f7f6 fb94 	bl	8003034 <__aeabi_f2d>
 800c90c:	0002      	movs	r2, r0
 800c90e:	000b      	movs	r3, r1
 800c910:	0010      	movs	r0, r2
 800c912:	0019      	movs	r1, r3
 800c914:	f005 fce2 	bl	80122dc <sin>
 800c918:	0004      	movs	r4, r0
 800c91a:	000d      	movs	r5, r1
 800c91c:	4b60      	ldr	r3, [pc, #384]	; (800caa0 <interfaceDrawPointers+0x9a8>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	0018      	movs	r0, r3
 800c922:	f7f6 fb31 	bl	8002f88 <__aeabi_i2d>
 800c926:	0002      	movs	r2, r0
 800c928:	000b      	movs	r3, r1
 800c92a:	0020      	movs	r0, r4
 800c92c:	0029      	movs	r1, r5
 800c92e:	f7f5 fcd9 	bl	80022e4 <__aeabi_dmul>
 800c932:	0002      	movs	r2, r0
 800c934:	000b      	movs	r3, r1
 800c936:	0014      	movs	r4, r2
 800c938:	001d      	movs	r5, r3
 800c93a:	4b58      	ldr	r3, [pc, #352]	; (800ca9c <interfaceDrawPointers+0x9a4>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	0018      	movs	r0, r3
 800c940:	f7f6 fb22 	bl	8002f88 <__aeabi_i2d>
 800c944:	0002      	movs	r2, r0
 800c946:	000b      	movs	r3, r1
 800c948:	0020      	movs	r0, r4
 800c94a:	0029      	movs	r1, r5
 800c94c:	f7f4 fd5a 	bl	8001404 <__aeabi_dadd>
 800c950:	0002      	movs	r2, r0
 800c952:	000b      	movs	r3, r1
		Paint_DrawLine((cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800c954:	0010      	movs	r0, r2
 800c956:	0019      	movs	r1, r3
 800c958:	f7f3 fe2e 	bl	80005b8 <__aeabi_d2uiz>
 800c95c:	0003      	movs	r3, r0
 800c95e:	b29a      	uxth	r2, r3
 800c960:	4b44      	ldr	r3, [pc, #272]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	b29b      	uxth	r3, r3
 800c968:	2100      	movs	r1, #0
 800c96a:	9102      	str	r1, [sp, #8]
 800c96c:	2102      	movs	r1, #2
 800c96e:	9101      	str	r1, [sp, #4]
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	0013      	movs	r3, r2
 800c974:	464a      	mov	r2, r9
 800c976:	4641      	mov	r1, r8
 800c978:	0030      	movs	r0, r6
 800c97a:	f7f7 fea9 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		Paint_DrawCircle(
				(cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800c97e:	4b44      	ldr	r3, [pc, #272]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	1c18      	adds	r0, r3, #0
 800c984:	f7f6 fb56 	bl	8003034 <__aeabi_f2d>
 800c988:	0002      	movs	r2, r0
 800c98a:	000b      	movs	r3, r1
 800c98c:	0010      	movs	r0, r2
 800c98e:	0019      	movs	r1, r3
 800c990:	f005 fc62 	bl	8012258 <cos>
 800c994:	0004      	movs	r4, r0
 800c996:	000d      	movs	r5, r1
 800c998:	4b3e      	ldr	r3, [pc, #248]	; (800ca94 <interfaceDrawPointers+0x99c>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	0018      	movs	r0, r3
 800c99e:	f7f6 faf3 	bl	8002f88 <__aeabi_i2d>
 800c9a2:	0002      	movs	r2, r0
 800c9a4:	000b      	movs	r3, r1
 800c9a6:	0020      	movs	r0, r4
 800c9a8:	0029      	movs	r1, r5
 800c9aa:	f7f5 fc9b 	bl	80022e4 <__aeabi_dmul>
 800c9ae:	0002      	movs	r2, r0
 800c9b0:	000b      	movs	r3, r1
 800c9b2:	0014      	movs	r4, r2
 800c9b4:	001d      	movs	r5, r3
 800c9b6:	4b38      	ldr	r3, [pc, #224]	; (800ca98 <interfaceDrawPointers+0x9a0>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f7f6 fae4 	bl	8002f88 <__aeabi_i2d>
 800c9c0:	0002      	movs	r2, r0
 800c9c2:	000b      	movs	r3, r1
 800c9c4:	0020      	movs	r0, r4
 800c9c6:	0029      	movs	r1, r5
 800c9c8:	f7f4 fd1c 	bl	8001404 <__aeabi_dadd>
 800c9cc:	0002      	movs	r2, r0
 800c9ce:	000b      	movs	r3, r1
		Paint_DrawCircle(
 800c9d0:	0010      	movs	r0, r2
 800c9d2:	0019      	movs	r1, r3
 800c9d4:	f7f3 fdf0 	bl	80005b8 <__aeabi_d2uiz>
 800c9d8:	0003      	movs	r3, r0
 800c9da:	b29e      	uxth	r6, r3
				(sin(pressureAngle) * pressurePointerShift) + mainStartY, 4,
 800c9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <interfaceDrawPointers+0x998>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	1c18      	adds	r0, r3, #0
 800c9e2:	f7f6 fb27 	bl	8003034 <__aeabi_f2d>
 800c9e6:	0002      	movs	r2, r0
 800c9e8:	000b      	movs	r3, r1
 800c9ea:	0010      	movs	r0, r2
 800c9ec:	0019      	movs	r1, r3
 800c9ee:	f005 fc75 	bl	80122dc <sin>
 800c9f2:	0004      	movs	r4, r0
 800c9f4:	000d      	movs	r5, r1
 800c9f6:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <interfaceDrawPointers+0x99c>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f7f6 fac4 	bl	8002f88 <__aeabi_i2d>
 800ca00:	0002      	movs	r2, r0
 800ca02:	000b      	movs	r3, r1
 800ca04:	0020      	movs	r0, r4
 800ca06:	0029      	movs	r1, r5
 800ca08:	f7f5 fc6c 	bl	80022e4 <__aeabi_dmul>
 800ca0c:	0002      	movs	r2, r0
 800ca0e:	000b      	movs	r3, r1
 800ca10:	0014      	movs	r4, r2
 800ca12:	001d      	movs	r5, r3
 800ca14:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <interfaceDrawPointers+0x9a4>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	0018      	movs	r0, r3
 800ca1a:	f7f6 fab5 	bl	8002f88 <__aeabi_i2d>
 800ca1e:	0002      	movs	r2, r0
 800ca20:	000b      	movs	r3, r1
 800ca22:	0020      	movs	r0, r4
 800ca24:	0029      	movs	r1, r5
 800ca26:	f7f4 fced 	bl	8001404 <__aeabi_dadd>
 800ca2a:	0002      	movs	r2, r0
 800ca2c:	000b      	movs	r3, r1
		Paint_DrawCircle(
 800ca2e:	0010      	movs	r0, r2
 800ca30:	0019      	movs	r1, r3
 800ca32:	f7f3 fdc1 	bl	80005b8 <__aeabi_d2uiz>
 800ca36:	0003      	movs	r3, r0
 800ca38:	b299      	uxth	r1, r3
 800ca3a:	4b0e      	ldr	r3, [pc, #56]	; (800ca74 <interfaceDrawPointers+0x97c>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	2200      	movs	r2, #0
 800ca44:	9201      	str	r2, [sp, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	9200      	str	r2, [sp, #0]
 800ca4a:	2204      	movs	r2, #4
 800ca4c:	0030      	movs	r0, r6
 800ca4e:	f7f7 ffe9 	bl	8004a24 <Paint_DrawCircle>
		//^ pointer
	}

	//										BATTERY STATE POINTER

	if (showBatteryState) {
 800ca52:	4b14      	ldr	r3, [pc, #80]	; (800caa4 <interfaceDrawPointers+0x9ac>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d100      	bne.n	800ca5c <interfaceDrawPointers+0x964>
 800ca5a:	e1dd      	b.n	800ce18 <interfaceDrawPointers+0xd20>
		for (uint8_t i = batteryState; i <= 7; i++) {
 800ca5c:	1dfb      	adds	r3, r7, #7
 800ca5e:	4a12      	ldr	r2, [pc, #72]	; (800caa8 <interfaceDrawPointers+0x9b0>)
 800ca60:	7812      	ldrb	r2, [r2, #0]
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	e106      	b.n	800cc74 <interfaceDrawPointers+0xb7c>
 800ca66:	46c0      	nop			; (mov r8, r8)
 800ca68:	20000479 	.word	0x20000479
 800ca6c:	200002c8 	.word	0x200002c8
 800ca70:	200003e4 	.word	0x200003e4
 800ca74:	20000459 	.word	0x20000459
 800ca78:	200001bb 	.word	0x200001bb
 800ca7c:	20000000 	.word	0x20000000
 800ca80:	200001ed 	.word	0x200001ed
 800ca84:	200003ce 	.word	0x200003ce
 800ca88:	20000336 	.word	0x20000336
 800ca8c:	20000149 	.word	0x20000149
 800ca90:	20000494 	.word	0x20000494
 800ca94:	200003d0 	.word	0x200003d0
 800ca98:	200002c7 	.word	0x200002c7
 800ca9c:	2000013a 	.word	0x2000013a
 800caa0:	20000460 	.word	0x20000460
 800caa4:	20000238 	.word	0x20000238
 800caa8:	20000228 	.word	0x20000228
			batteryStateAngle = 2 * 3.14 / 28 * (i);
 800caac:	1dfb      	adds	r3, r7, #7
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	0018      	movs	r0, r3
 800cab2:	f7f6 fa69 	bl	8002f88 <__aeabi_i2d>
 800cab6:	4afd      	ldr	r2, [pc, #1012]	; (800ceac <interfaceDrawPointers+0xdb4>)
 800cab8:	4bfd      	ldr	r3, [pc, #1012]	; (800ceb0 <interfaceDrawPointers+0xdb8>)
 800caba:	f7f5 fc13 	bl	80022e4 <__aeabi_dmul>
 800cabe:	0002      	movs	r2, r0
 800cac0:	000b      	movs	r3, r1
 800cac2:	0010      	movs	r0, r2
 800cac4:	0019      	movs	r1, r3
 800cac6:	f7f6 fafd 	bl	80030c4 <__aeabi_d2f>
 800caca:	1c02      	adds	r2, r0, #0
 800cacc:	4bf9      	ldr	r3, [pc, #996]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cace:	601a      	str	r2, [r3, #0]

			Paint_DrawLine(
					(cos(batteryStateAngle) * batteryPointerShift)
 800cad0:	4bf8      	ldr	r3, [pc, #992]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	1c18      	adds	r0, r3, #0
 800cad6:	f7f6 faad 	bl	8003034 <__aeabi_f2d>
 800cada:	0002      	movs	r2, r0
 800cadc:	000b      	movs	r3, r1
 800cade:	0010      	movs	r0, r2
 800cae0:	0019      	movs	r1, r3
 800cae2:	f005 fbb9 	bl	8012258 <cos>
 800cae6:	0004      	movs	r4, r0
 800cae8:	000d      	movs	r5, r1
 800caea:	4bf3      	ldr	r3, [pc, #972]	; (800ceb8 <interfaceDrawPointers+0xdc0>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	0018      	movs	r0, r3
 800caf0:	f7f6 fa4a 	bl	8002f88 <__aeabi_i2d>
 800caf4:	0002      	movs	r2, r0
 800caf6:	000b      	movs	r3, r1
 800caf8:	0020      	movs	r0, r4
 800cafa:	0029      	movs	r1, r5
 800cafc:	f7f5 fbf2 	bl	80022e4 <__aeabi_dmul>
 800cb00:	0002      	movs	r2, r0
 800cb02:	000b      	movs	r3, r1
 800cb04:	0014      	movs	r4, r2
 800cb06:	001d      	movs	r5, r3
							+ batteryStateStartX,
 800cb08:	4bec      	ldr	r3, [pc, #944]	; (800cebc <interfaceDrawPointers+0xdc4>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f7f6 fa3b 	bl	8002f88 <__aeabi_i2d>
 800cb12:	0002      	movs	r2, r0
 800cb14:	000b      	movs	r3, r1
 800cb16:	0020      	movs	r0, r4
 800cb18:	0029      	movs	r1, r5
 800cb1a:	f7f4 fc73 	bl	8001404 <__aeabi_dadd>
 800cb1e:	0002      	movs	r2, r0
 800cb20:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cb22:	0010      	movs	r0, r2
 800cb24:	0019      	movs	r1, r3
 800cb26:	f7f3 fd47 	bl	80005b8 <__aeabi_d2uiz>
 800cb2a:	0003      	movs	r3, r0
 800cb2c:	b29e      	uxth	r6, r3
					(sin(batteryStateAngle) * batteryPointerShift)
 800cb2e:	4be1      	ldr	r3, [pc, #900]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	1c18      	adds	r0, r3, #0
 800cb34:	f7f6 fa7e 	bl	8003034 <__aeabi_f2d>
 800cb38:	0002      	movs	r2, r0
 800cb3a:	000b      	movs	r3, r1
 800cb3c:	0010      	movs	r0, r2
 800cb3e:	0019      	movs	r1, r3
 800cb40:	f005 fbcc 	bl	80122dc <sin>
 800cb44:	0004      	movs	r4, r0
 800cb46:	000d      	movs	r5, r1
 800cb48:	4bdb      	ldr	r3, [pc, #876]	; (800ceb8 <interfaceDrawPointers+0xdc0>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f7f6 fa1b 	bl	8002f88 <__aeabi_i2d>
 800cb52:	0002      	movs	r2, r0
 800cb54:	000b      	movs	r3, r1
 800cb56:	0020      	movs	r0, r4
 800cb58:	0029      	movs	r1, r5
 800cb5a:	f7f5 fbc3 	bl	80022e4 <__aeabi_dmul>
 800cb5e:	0002      	movs	r2, r0
 800cb60:	000b      	movs	r3, r1
 800cb62:	0014      	movs	r4, r2
 800cb64:	001d      	movs	r5, r3
							+ batteryStateStartY,
 800cb66:	4bd6      	ldr	r3, [pc, #856]	; (800cec0 <interfaceDrawPointers+0xdc8>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f7f6 fa0c 	bl	8002f88 <__aeabi_i2d>
 800cb70:	0002      	movs	r2, r0
 800cb72:	000b      	movs	r3, r1
 800cb74:	0020      	movs	r0, r4
 800cb76:	0029      	movs	r1, r5
 800cb78:	f7f4 fc44 	bl	8001404 <__aeabi_dadd>
 800cb7c:	0002      	movs	r2, r0
 800cb7e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cb80:	0010      	movs	r0, r2
 800cb82:	0019      	movs	r1, r3
 800cb84:	f7f3 fd18 	bl	80005b8 <__aeabi_d2uiz>
 800cb88:	0003      	movs	r3, r0
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4698      	mov	r8, r3
					(cos(batteryStateAngle) * batteryStatePointerLength)
 800cb8e:	4bc9      	ldr	r3, [pc, #804]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	1c18      	adds	r0, r3, #0
 800cb94:	f7f6 fa4e 	bl	8003034 <__aeabi_f2d>
 800cb98:	0002      	movs	r2, r0
 800cb9a:	000b      	movs	r3, r1
 800cb9c:	0010      	movs	r0, r2
 800cb9e:	0019      	movs	r1, r3
 800cba0:	f005 fb5a 	bl	8012258 <cos>
 800cba4:	0004      	movs	r4, r0
 800cba6:	000d      	movs	r5, r1
 800cba8:	4bc6      	ldr	r3, [pc, #792]	; (800cec4 <interfaceDrawPointers+0xdcc>)
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	0018      	movs	r0, r3
 800cbae:	f7f6 f9eb 	bl	8002f88 <__aeabi_i2d>
 800cbb2:	0002      	movs	r2, r0
 800cbb4:	000b      	movs	r3, r1
 800cbb6:	0020      	movs	r0, r4
 800cbb8:	0029      	movs	r1, r5
 800cbba:	f7f5 fb93 	bl	80022e4 <__aeabi_dmul>
 800cbbe:	0002      	movs	r2, r0
 800cbc0:	000b      	movs	r3, r1
 800cbc2:	0014      	movs	r4, r2
 800cbc4:	001d      	movs	r5, r3
							+ batteryStateStartX,
 800cbc6:	4bbd      	ldr	r3, [pc, #756]	; (800cebc <interfaceDrawPointers+0xdc4>)
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f7f6 f9dc 	bl	8002f88 <__aeabi_i2d>
 800cbd0:	0002      	movs	r2, r0
 800cbd2:	000b      	movs	r3, r1
 800cbd4:	0020      	movs	r0, r4
 800cbd6:	0029      	movs	r1, r5
 800cbd8:	f7f4 fc14 	bl	8001404 <__aeabi_dadd>
 800cbdc:	0002      	movs	r2, r0
 800cbde:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cbe0:	0010      	movs	r0, r2
 800cbe2:	0019      	movs	r1, r3
 800cbe4:	f7f3 fce8 	bl	80005b8 <__aeabi_d2uiz>
 800cbe8:	0003      	movs	r3, r0
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	4699      	mov	r9, r3
					(sin(batteryStateAngle) * batteryStatePointerLength)
 800cbee:	4bb1      	ldr	r3, [pc, #708]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	1c18      	adds	r0, r3, #0
 800cbf4:	f7f6 fa1e 	bl	8003034 <__aeabi_f2d>
 800cbf8:	0002      	movs	r2, r0
 800cbfa:	000b      	movs	r3, r1
 800cbfc:	0010      	movs	r0, r2
 800cbfe:	0019      	movs	r1, r3
 800cc00:	f005 fb6c 	bl	80122dc <sin>
 800cc04:	0004      	movs	r4, r0
 800cc06:	000d      	movs	r5, r1
 800cc08:	4bae      	ldr	r3, [pc, #696]	; (800cec4 <interfaceDrawPointers+0xdcc>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f7f6 f9bb 	bl	8002f88 <__aeabi_i2d>
 800cc12:	0002      	movs	r2, r0
 800cc14:	000b      	movs	r3, r1
 800cc16:	0020      	movs	r0, r4
 800cc18:	0029      	movs	r1, r5
 800cc1a:	f7f5 fb63 	bl	80022e4 <__aeabi_dmul>
 800cc1e:	0002      	movs	r2, r0
 800cc20:	000b      	movs	r3, r1
 800cc22:	0014      	movs	r4, r2
 800cc24:	001d      	movs	r5, r3
							+ batteryStateStartY, colorSecond, DOT_PIXEL_1X1,
 800cc26:	4ba6      	ldr	r3, [pc, #664]	; (800cec0 <interfaceDrawPointers+0xdc8>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f7f6 f9ac 	bl	8002f88 <__aeabi_i2d>
 800cc30:	0002      	movs	r2, r0
 800cc32:	000b      	movs	r3, r1
 800cc34:	0020      	movs	r0, r4
 800cc36:	0029      	movs	r1, r5
 800cc38:	f7f4 fbe4 	bl	8001404 <__aeabi_dadd>
 800cc3c:	0002      	movs	r2, r0
 800cc3e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cc40:	0010      	movs	r0, r2
 800cc42:	0019      	movs	r1, r3
 800cc44:	f7f3 fcb8 	bl	80005b8 <__aeabi_d2uiz>
 800cc48:	0003      	movs	r3, r0
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	4b9e      	ldr	r3, [pc, #632]	; (800cec8 <interfaceDrawPointers+0xdd0>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	2100      	movs	r1, #0
 800cc56:	9102      	str	r1, [sp, #8]
 800cc58:	2101      	movs	r1, #1
 800cc5a:	9101      	str	r1, [sp, #4]
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	0013      	movs	r3, r2
 800cc60:	464a      	mov	r2, r9
 800cc62:	4641      	mov	r1, r8
 800cc64:	0030      	movs	r0, r6
 800cc66:	f7f7 fd33 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = batteryState; i <= 7; i++) {
 800cc6a:	1dfb      	adds	r3, r7, #7
 800cc6c:	781a      	ldrb	r2, [r3, #0]
 800cc6e:	1dfb      	adds	r3, r7, #7
 800cc70:	3201      	adds	r2, #1
 800cc72:	701a      	strb	r2, [r3, #0]
 800cc74:	1dfb      	adds	r3, r7, #7
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b07      	cmp	r3, #7
 800cc7a:	d800      	bhi.n	800cc7e <interfaceDrawPointers+0xb86>
 800cc7c:	e716      	b.n	800caac <interfaceDrawPointers+0x9b4>
					LINE_STYLE_SOLID);

		}

		Paint_DrawLine(
				(cos(batteryStateAngle) * batteryPointerShift)
 800cc7e:	4b8d      	ldr	r3, [pc, #564]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	1c18      	adds	r0, r3, #0
 800cc84:	f7f6 f9d6 	bl	8003034 <__aeabi_f2d>
 800cc88:	0002      	movs	r2, r0
 800cc8a:	000b      	movs	r3, r1
 800cc8c:	0010      	movs	r0, r2
 800cc8e:	0019      	movs	r1, r3
 800cc90:	f005 fae2 	bl	8012258 <cos>
 800cc94:	0004      	movs	r4, r0
 800cc96:	000d      	movs	r5, r1
 800cc98:	4b87      	ldr	r3, [pc, #540]	; (800ceb8 <interfaceDrawPointers+0xdc0>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	f7f6 f973 	bl	8002f88 <__aeabi_i2d>
 800cca2:	0002      	movs	r2, r0
 800cca4:	000b      	movs	r3, r1
 800cca6:	0020      	movs	r0, r4
 800cca8:	0029      	movs	r1, r5
 800ccaa:	f7f5 fb1b 	bl	80022e4 <__aeabi_dmul>
 800ccae:	0002      	movs	r2, r0
 800ccb0:	000b      	movs	r3, r1
 800ccb2:	0014      	movs	r4, r2
 800ccb4:	001d      	movs	r5, r3
						+ batteryStateStartX,
 800ccb6:	4b81      	ldr	r3, [pc, #516]	; (800cebc <interfaceDrawPointers+0xdc4>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	0018      	movs	r0, r3
 800ccbc:	f7f6 f964 	bl	8002f88 <__aeabi_i2d>
 800ccc0:	0002      	movs	r2, r0
 800ccc2:	000b      	movs	r3, r1
 800ccc4:	0020      	movs	r0, r4
 800ccc6:	0029      	movs	r1, r5
 800ccc8:	f7f4 fb9c 	bl	8001404 <__aeabi_dadd>
 800cccc:	0002      	movs	r2, r0
 800ccce:	000b      	movs	r3, r1
		Paint_DrawLine(
 800ccd0:	0010      	movs	r0, r2
 800ccd2:	0019      	movs	r1, r3
 800ccd4:	f7f3 fc70 	bl	80005b8 <__aeabi_d2uiz>
 800ccd8:	0003      	movs	r3, r0
 800ccda:	b29e      	uxth	r6, r3
				(sin(batteryStateAngle) * batteryPointerShift)
 800ccdc:	4b75      	ldr	r3, [pc, #468]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	1c18      	adds	r0, r3, #0
 800cce2:	f7f6 f9a7 	bl	8003034 <__aeabi_f2d>
 800cce6:	0002      	movs	r2, r0
 800cce8:	000b      	movs	r3, r1
 800ccea:	0010      	movs	r0, r2
 800ccec:	0019      	movs	r1, r3
 800ccee:	f005 faf5 	bl	80122dc <sin>
 800ccf2:	0004      	movs	r4, r0
 800ccf4:	000d      	movs	r5, r1
 800ccf6:	4b70      	ldr	r3, [pc, #448]	; (800ceb8 <interfaceDrawPointers+0xdc0>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f7f6 f944 	bl	8002f88 <__aeabi_i2d>
 800cd00:	0002      	movs	r2, r0
 800cd02:	000b      	movs	r3, r1
 800cd04:	0020      	movs	r0, r4
 800cd06:	0029      	movs	r1, r5
 800cd08:	f7f5 faec 	bl	80022e4 <__aeabi_dmul>
 800cd0c:	0002      	movs	r2, r0
 800cd0e:	000b      	movs	r3, r1
 800cd10:	0014      	movs	r4, r2
 800cd12:	001d      	movs	r5, r3
						+ batteryStateStartY,
 800cd14:	4b6a      	ldr	r3, [pc, #424]	; (800cec0 <interfaceDrawPointers+0xdc8>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f7f6 f935 	bl	8002f88 <__aeabi_i2d>
 800cd1e:	0002      	movs	r2, r0
 800cd20:	000b      	movs	r3, r1
 800cd22:	0020      	movs	r0, r4
 800cd24:	0029      	movs	r1, r5
 800cd26:	f7f4 fb6d 	bl	8001404 <__aeabi_dadd>
 800cd2a:	0002      	movs	r2, r0
 800cd2c:	000b      	movs	r3, r1
		Paint_DrawLine(
 800cd2e:	0010      	movs	r0, r2
 800cd30:	0019      	movs	r1, r3
 800cd32:	f7f3 fc41 	bl	80005b8 <__aeabi_d2uiz>
 800cd36:	0003      	movs	r3, r0
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4698      	mov	r8, r3
				(cos(batteryStateAngle) * batteryStatePointerLength)
 800cd3c:	4b5d      	ldr	r3, [pc, #372]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	1c18      	adds	r0, r3, #0
 800cd42:	f7f6 f977 	bl	8003034 <__aeabi_f2d>
 800cd46:	0002      	movs	r2, r0
 800cd48:	000b      	movs	r3, r1
 800cd4a:	0010      	movs	r0, r2
 800cd4c:	0019      	movs	r1, r3
 800cd4e:	f005 fa83 	bl	8012258 <cos>
 800cd52:	0004      	movs	r4, r0
 800cd54:	000d      	movs	r5, r1
 800cd56:	4b5b      	ldr	r3, [pc, #364]	; (800cec4 <interfaceDrawPointers+0xdcc>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f7f6 f914 	bl	8002f88 <__aeabi_i2d>
 800cd60:	0002      	movs	r2, r0
 800cd62:	000b      	movs	r3, r1
 800cd64:	0020      	movs	r0, r4
 800cd66:	0029      	movs	r1, r5
 800cd68:	f7f5 fabc 	bl	80022e4 <__aeabi_dmul>
 800cd6c:	0002      	movs	r2, r0
 800cd6e:	000b      	movs	r3, r1
 800cd70:	0014      	movs	r4, r2
 800cd72:	001d      	movs	r5, r3
						+ batteryStateStartX,
 800cd74:	4b51      	ldr	r3, [pc, #324]	; (800cebc <interfaceDrawPointers+0xdc4>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f7f6 f905 	bl	8002f88 <__aeabi_i2d>
 800cd7e:	0002      	movs	r2, r0
 800cd80:	000b      	movs	r3, r1
 800cd82:	0020      	movs	r0, r4
 800cd84:	0029      	movs	r1, r5
 800cd86:	f7f4 fb3d 	bl	8001404 <__aeabi_dadd>
 800cd8a:	0002      	movs	r2, r0
 800cd8c:	000b      	movs	r3, r1
		Paint_DrawLine(
 800cd8e:	0010      	movs	r0, r2
 800cd90:	0019      	movs	r1, r3
 800cd92:	f7f3 fc11 	bl	80005b8 <__aeabi_d2uiz>
 800cd96:	0003      	movs	r3, r0
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	4699      	mov	r9, r3
				(sin(batteryStateAngle) * batteryStatePointerLength)
 800cd9c:	4b45      	ldr	r3, [pc, #276]	; (800ceb4 <interfaceDrawPointers+0xdbc>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	1c18      	adds	r0, r3, #0
 800cda2:	f7f6 f947 	bl	8003034 <__aeabi_f2d>
 800cda6:	0002      	movs	r2, r0
 800cda8:	000b      	movs	r3, r1
 800cdaa:	0010      	movs	r0, r2
 800cdac:	0019      	movs	r1, r3
 800cdae:	f005 fa95 	bl	80122dc <sin>
 800cdb2:	0004      	movs	r4, r0
 800cdb4:	000d      	movs	r5, r1
 800cdb6:	4b43      	ldr	r3, [pc, #268]	; (800cec4 <interfaceDrawPointers+0xdcc>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	0018      	movs	r0, r3
 800cdbc:	f7f6 f8e4 	bl	8002f88 <__aeabi_i2d>
 800cdc0:	0002      	movs	r2, r0
 800cdc2:	000b      	movs	r3, r1
 800cdc4:	0020      	movs	r0, r4
 800cdc6:	0029      	movs	r1, r5
 800cdc8:	f7f5 fa8c 	bl	80022e4 <__aeabi_dmul>
 800cdcc:	0002      	movs	r2, r0
 800cdce:	000b      	movs	r3, r1
 800cdd0:	0014      	movs	r4, r2
 800cdd2:	001d      	movs	r5, r3
						+ batteryStateStartY, colorSecond, DOT_PIXEL_1X1,
 800cdd4:	4b3a      	ldr	r3, [pc, #232]	; (800cec0 <interfaceDrawPointers+0xdc8>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f7f6 f8d5 	bl	8002f88 <__aeabi_i2d>
 800cdde:	0002      	movs	r2, r0
 800cde0:	000b      	movs	r3, r1
 800cde2:	0020      	movs	r0, r4
 800cde4:	0029      	movs	r1, r5
 800cde6:	f7f4 fb0d 	bl	8001404 <__aeabi_dadd>
 800cdea:	0002      	movs	r2, r0
 800cdec:	000b      	movs	r3, r1
		Paint_DrawLine(
 800cdee:	0010      	movs	r0, r2
 800cdf0:	0019      	movs	r1, r3
 800cdf2:	f7f3 fbe1 	bl	80005b8 <__aeabi_d2uiz>
 800cdf6:	0003      	movs	r3, r0
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	4b33      	ldr	r3, [pc, #204]	; (800cec8 <interfaceDrawPointers+0xdd0>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	2100      	movs	r1, #0
 800ce04:	9102      	str	r1, [sp, #8]
 800ce06:	2101      	movs	r1, #1
 800ce08:	9101      	str	r1, [sp, #4]
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	0013      	movs	r3, r2
 800ce0e:	464a      	mov	r2, r9
 800ce10:	4641      	mov	r1, r8
 800ce12:	0030      	movs	r0, r6
 800ce14:	f7f7 fc5c 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}

	//										HOUR POINTER

	Paint_DrawLine(mainStartX + pointerShadowShift,
 800ce18:	4b2c      	ldr	r3, [pc, #176]	; (800cecc <interfaceDrawPointers+0xdd4>)
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	4b2c      	ldr	r3, [pc, #176]	; (800ced0 <interfaceDrawPointers+0xdd8>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	18d3      	adds	r3, r2, r3
 800ce26:	b29e      	uxth	r6, r3
 800ce28:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <interfaceDrawPointers+0xddc>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	4b28      	ldr	r3, [pc, #160]	; (800ced0 <interfaceDrawPointers+0xdd8>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	18d3      	adds	r3, r2, r3
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	4698      	mov	r8, r3
			mainStartY + pointerShadowShift,
			(cos(hourAngle) * hourPointerLength) + mainStartX
 800ce3a:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <interfaceDrawPointers+0xde0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	1c18      	adds	r0, r3, #0
 800ce40:	f7f6 f8f8 	bl	8003034 <__aeabi_f2d>
 800ce44:	0002      	movs	r2, r0
 800ce46:	000b      	movs	r3, r1
 800ce48:	0010      	movs	r0, r2
 800ce4a:	0019      	movs	r1, r3
 800ce4c:	f005 fa04 	bl	8012258 <cos>
 800ce50:	0004      	movs	r4, r0
 800ce52:	000d      	movs	r5, r1
 800ce54:	4b21      	ldr	r3, [pc, #132]	; (800cedc <interfaceDrawPointers+0xde4>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f7f6 f895 	bl	8002f88 <__aeabi_i2d>
 800ce5e:	0002      	movs	r2, r0
 800ce60:	000b      	movs	r3, r1
 800ce62:	0020      	movs	r0, r4
 800ce64:	0029      	movs	r1, r5
 800ce66:	f7f5 fa3d 	bl	80022e4 <__aeabi_dmul>
 800ce6a:	0002      	movs	r2, r0
 800ce6c:	000b      	movs	r3, r1
 800ce6e:	0014      	movs	r4, r2
 800ce70:	001d      	movs	r5, r3
 800ce72:	4b16      	ldr	r3, [pc, #88]	; (800cecc <interfaceDrawPointers+0xdd4>)
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	0018      	movs	r0, r3
 800ce78:	f7f6 f886 	bl	8002f88 <__aeabi_i2d>
 800ce7c:	0002      	movs	r2, r0
 800ce7e:	000b      	movs	r3, r1
 800ce80:	0020      	movs	r0, r4
 800ce82:	0029      	movs	r1, r5
 800ce84:	f7f4 fabe 	bl	8001404 <__aeabi_dadd>
 800ce88:	0002      	movs	r2, r0
 800ce8a:	000b      	movs	r3, r1
 800ce8c:	0014      	movs	r4, r2
 800ce8e:	001d      	movs	r5, r3
					+ pointerShadowShift,
 800ce90:	4b0f      	ldr	r3, [pc, #60]	; (800ced0 <interfaceDrawPointers+0xdd8>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	0018      	movs	r0, r3
 800ce96:	f7f6 f877 	bl	8002f88 <__aeabi_i2d>
 800ce9a:	0002      	movs	r2, r0
 800ce9c:	000b      	movs	r3, r1
 800ce9e:	0020      	movs	r0, r4
 800cea0:	0029      	movs	r1, r5
 800cea2:	f7f4 faaf 	bl	8001404 <__aeabi_dadd>
 800cea6:	0002      	movs	r2, r0
 800cea8:	000b      	movs	r3, r1
 800ceaa:	e019      	b.n	800cee0 <interfaceDrawPointers+0xde8>
 800ceac:	efe89823 	.word	0xefe89823
 800ceb0:	3fccb564 	.word	0x3fccb564
 800ceb4:	20000124 	.word	0x20000124
 800ceb8:	20000148 	.word	0x20000148
 800cebc:	20000449 	.word	0x20000449
 800cec0:	200004a0 	.word	0x200004a0
 800cec4:	20000331 	.word	0x20000331
 800cec8:	20000459 	.word	0x20000459
 800cecc:	200002c7 	.word	0x200002c7
 800ced0:	20000141 	.word	0x20000141
 800ced4:	2000013a 	.word	0x2000013a
 800ced8:	2000046c 	.word	0x2000046c
 800cedc:	20000143 	.word	0x20000143
	Paint_DrawLine(mainStartX + pointerShadowShift,
 800cee0:	0010      	movs	r0, r2
 800cee2:	0019      	movs	r1, r3
 800cee4:	f7f3 fb68 	bl	80005b8 <__aeabi_d2uiz>
 800cee8:	0003      	movs	r3, r0
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	4699      	mov	r9, r3
			(sin(hourAngle) * hourPointerLength) + mainStartY
 800ceee:	4bfe      	ldr	r3, [pc, #1016]	; (800d2e8 <interfaceDrawPointers+0x11f0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	1c18      	adds	r0, r3, #0
 800cef4:	f7f6 f89e 	bl	8003034 <__aeabi_f2d>
 800cef8:	0002      	movs	r2, r0
 800cefa:	000b      	movs	r3, r1
 800cefc:	0010      	movs	r0, r2
 800cefe:	0019      	movs	r1, r3
 800cf00:	f005 f9ec 	bl	80122dc <sin>
 800cf04:	0004      	movs	r4, r0
 800cf06:	000d      	movs	r5, r1
 800cf08:	4bf8      	ldr	r3, [pc, #992]	; (800d2ec <interfaceDrawPointers+0x11f4>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f7f6 f83b 	bl	8002f88 <__aeabi_i2d>
 800cf12:	0002      	movs	r2, r0
 800cf14:	000b      	movs	r3, r1
 800cf16:	0020      	movs	r0, r4
 800cf18:	0029      	movs	r1, r5
 800cf1a:	f7f5 f9e3 	bl	80022e4 <__aeabi_dmul>
 800cf1e:	0002      	movs	r2, r0
 800cf20:	000b      	movs	r3, r1
 800cf22:	0014      	movs	r4, r2
 800cf24:	001d      	movs	r5, r3
 800cf26:	4bf2      	ldr	r3, [pc, #968]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	f7f6 f82c 	bl	8002f88 <__aeabi_i2d>
 800cf30:	0002      	movs	r2, r0
 800cf32:	000b      	movs	r3, r1
 800cf34:	0020      	movs	r0, r4
 800cf36:	0029      	movs	r1, r5
 800cf38:	f7f4 fa64 	bl	8001404 <__aeabi_dadd>
 800cf3c:	0002      	movs	r2, r0
 800cf3e:	000b      	movs	r3, r1
 800cf40:	0014      	movs	r4, r2
 800cf42:	001d      	movs	r5, r3
					+ pointerShadowShift, colorMain, DOT_PIXEL_3X3,
 800cf44:	4beb      	ldr	r3, [pc, #940]	; (800d2f4 <interfaceDrawPointers+0x11fc>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	0018      	movs	r0, r3
 800cf4a:	f7f6 f81d 	bl	8002f88 <__aeabi_i2d>
 800cf4e:	0002      	movs	r2, r0
 800cf50:	000b      	movs	r3, r1
 800cf52:	0020      	movs	r0, r4
 800cf54:	0029      	movs	r1, r5
 800cf56:	f7f4 fa55 	bl	8001404 <__aeabi_dadd>
 800cf5a:	0002      	movs	r2, r0
 800cf5c:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX + pointerShadowShift,
 800cf5e:	0010      	movs	r0, r2
 800cf60:	0019      	movs	r1, r3
 800cf62:	f7f3 fb29 	bl	80005b8 <__aeabi_d2uiz>
 800cf66:	0003      	movs	r3, r0
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	4be3      	ldr	r3, [pc, #908]	; (800d2f8 <interfaceDrawPointers+0x1200>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	2100      	movs	r1, #0
 800cf74:	9102      	str	r1, [sp, #8]
 800cf76:	2103      	movs	r1, #3
 800cf78:	9101      	str	r1, [sp, #4]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	0013      	movs	r3, r2
 800cf7e:	464a      	mov	r2, r9
 800cf80:	4641      	mov	r1, r8
 800cf82:	0030      	movs	r0, r6
 800cf84:	f7f7 fba4 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	//^shadow

	Paint_DrawLine(mainStartX, mainStartY,
 800cf88:	4bdc      	ldr	r3, [pc, #880]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	b29e      	uxth	r6, r3
 800cf8e:	4bd8      	ldr	r3, [pc, #864]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	4698      	mov	r8, r3
			(cos(hourAngle) * hourPointerLength) + mainStartX,
 800cf96:	4bd4      	ldr	r3, [pc, #848]	; (800d2e8 <interfaceDrawPointers+0x11f0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	1c18      	adds	r0, r3, #0
 800cf9c:	f7f6 f84a 	bl	8003034 <__aeabi_f2d>
 800cfa0:	0002      	movs	r2, r0
 800cfa2:	000b      	movs	r3, r1
 800cfa4:	0010      	movs	r0, r2
 800cfa6:	0019      	movs	r1, r3
 800cfa8:	f005 f956 	bl	8012258 <cos>
 800cfac:	0004      	movs	r4, r0
 800cfae:	000d      	movs	r5, r1
 800cfb0:	4bce      	ldr	r3, [pc, #824]	; (800d2ec <interfaceDrawPointers+0x11f4>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f7f5 ffe7 	bl	8002f88 <__aeabi_i2d>
 800cfba:	0002      	movs	r2, r0
 800cfbc:	000b      	movs	r3, r1
 800cfbe:	0020      	movs	r0, r4
 800cfc0:	0029      	movs	r1, r5
 800cfc2:	f7f5 f98f 	bl	80022e4 <__aeabi_dmul>
 800cfc6:	0002      	movs	r2, r0
 800cfc8:	000b      	movs	r3, r1
 800cfca:	0014      	movs	r4, r2
 800cfcc:	001d      	movs	r5, r3
 800cfce:	4bcb      	ldr	r3, [pc, #812]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f7f5 ffd8 	bl	8002f88 <__aeabi_i2d>
 800cfd8:	0002      	movs	r2, r0
 800cfda:	000b      	movs	r3, r1
 800cfdc:	0020      	movs	r0, r4
 800cfde:	0029      	movs	r1, r5
 800cfe0:	f7f4 fa10 	bl	8001404 <__aeabi_dadd>
 800cfe4:	0002      	movs	r2, r0
 800cfe6:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX, mainStartY,
 800cfe8:	0010      	movs	r0, r2
 800cfea:	0019      	movs	r1, r3
 800cfec:	f7f3 fae4 	bl	80005b8 <__aeabi_d2uiz>
 800cff0:	0003      	movs	r3, r0
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	4699      	mov	r9, r3
			(sin(hourAngle) * hourPointerLength) + mainStartY, colorSecond,
 800cff6:	4bbc      	ldr	r3, [pc, #752]	; (800d2e8 <interfaceDrawPointers+0x11f0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	1c18      	adds	r0, r3, #0
 800cffc:	f7f6 f81a 	bl	8003034 <__aeabi_f2d>
 800d000:	0002      	movs	r2, r0
 800d002:	000b      	movs	r3, r1
 800d004:	0010      	movs	r0, r2
 800d006:	0019      	movs	r1, r3
 800d008:	f005 f968 	bl	80122dc <sin>
 800d00c:	0004      	movs	r4, r0
 800d00e:	000d      	movs	r5, r1
 800d010:	4bb6      	ldr	r3, [pc, #728]	; (800d2ec <interfaceDrawPointers+0x11f4>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	0018      	movs	r0, r3
 800d016:	f7f5 ffb7 	bl	8002f88 <__aeabi_i2d>
 800d01a:	0002      	movs	r2, r0
 800d01c:	000b      	movs	r3, r1
 800d01e:	0020      	movs	r0, r4
 800d020:	0029      	movs	r1, r5
 800d022:	f7f5 f95f 	bl	80022e4 <__aeabi_dmul>
 800d026:	0002      	movs	r2, r0
 800d028:	000b      	movs	r3, r1
 800d02a:	0014      	movs	r4, r2
 800d02c:	001d      	movs	r5, r3
 800d02e:	4bb0      	ldr	r3, [pc, #704]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	0018      	movs	r0, r3
 800d034:	f7f5 ffa8 	bl	8002f88 <__aeabi_i2d>
 800d038:	0002      	movs	r2, r0
 800d03a:	000b      	movs	r3, r1
 800d03c:	0020      	movs	r0, r4
 800d03e:	0029      	movs	r1, r5
 800d040:	f7f4 f9e0 	bl	8001404 <__aeabi_dadd>
 800d044:	0002      	movs	r2, r0
 800d046:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX, mainStartY,
 800d048:	0010      	movs	r0, r2
 800d04a:	0019      	movs	r1, r3
 800d04c:	f7f3 fab4 	bl	80005b8 <__aeabi_d2uiz>
 800d050:	0003      	movs	r3, r0
 800d052:	b29a      	uxth	r2, r3
 800d054:	4baa      	ldr	r3, [pc, #680]	; (800d300 <interfaceDrawPointers+0x1208>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	2100      	movs	r1, #0
 800d05e:	9102      	str	r1, [sp, #8]
 800d060:	2103      	movs	r1, #3
 800d062:	9101      	str	r1, [sp, #4]
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	0013      	movs	r3, r2
 800d068:	464a      	mov	r2, r9
 800d06a:	4641      	mov	r1, r8
 800d06c:	0030      	movs	r0, r6
 800d06e:	f7f7 fb2f 	bl	80046d0 <Paint_DrawLine>
			DOT_PIXEL_3X3, LINE_STYLE_SOLID);
	//^ pointer

	//										MINUTE POINTER
	Paint_DrawLine(mainStartX + pointerShadowShift,
 800d072:	4ba2      	ldr	r3, [pc, #648]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	b29a      	uxth	r2, r3
 800d078:	4b9e      	ldr	r3, [pc, #632]	; (800d2f4 <interfaceDrawPointers+0x11fc>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	18d3      	adds	r3, r2, r3
 800d080:	b29e      	uxth	r6, r3
 800d082:	4b9b      	ldr	r3, [pc, #620]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	b29a      	uxth	r2, r3
 800d088:	4b9a      	ldr	r3, [pc, #616]	; (800d2f4 <interfaceDrawPointers+0x11fc>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	18d3      	adds	r3, r2, r3
 800d090:	b29b      	uxth	r3, r3
 800d092:	4698      	mov	r8, r3
			mainStartY + pointerShadowShift,
			(cos(minuteAngle) * minutePointerLength) + mainStartX
 800d094:	4b9b      	ldr	r3, [pc, #620]	; (800d304 <interfaceDrawPointers+0x120c>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	1c18      	adds	r0, r3, #0
 800d09a:	f7f5 ffcb 	bl	8003034 <__aeabi_f2d>
 800d09e:	0002      	movs	r2, r0
 800d0a0:	000b      	movs	r3, r1
 800d0a2:	0010      	movs	r0, r2
 800d0a4:	0019      	movs	r1, r3
 800d0a6:	f005 f8d7 	bl	8012258 <cos>
 800d0aa:	0004      	movs	r4, r0
 800d0ac:	000d      	movs	r5, r1
 800d0ae:	4b96      	ldr	r3, [pc, #600]	; (800d308 <interfaceDrawPointers+0x1210>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	f7f5 ff68 	bl	8002f88 <__aeabi_i2d>
 800d0b8:	0002      	movs	r2, r0
 800d0ba:	000b      	movs	r3, r1
 800d0bc:	0020      	movs	r0, r4
 800d0be:	0029      	movs	r1, r5
 800d0c0:	f7f5 f910 	bl	80022e4 <__aeabi_dmul>
 800d0c4:	0002      	movs	r2, r0
 800d0c6:	000b      	movs	r3, r1
 800d0c8:	0014      	movs	r4, r2
 800d0ca:	001d      	movs	r5, r3
 800d0cc:	4b8b      	ldr	r3, [pc, #556]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f7f5 ff59 	bl	8002f88 <__aeabi_i2d>
 800d0d6:	0002      	movs	r2, r0
 800d0d8:	000b      	movs	r3, r1
 800d0da:	0020      	movs	r0, r4
 800d0dc:	0029      	movs	r1, r5
 800d0de:	f7f4 f991 	bl	8001404 <__aeabi_dadd>
 800d0e2:	0002      	movs	r2, r0
 800d0e4:	000b      	movs	r3, r1
 800d0e6:	0014      	movs	r4, r2
 800d0e8:	001d      	movs	r5, r3
					+ pointerShadowShift,
 800d0ea:	4b82      	ldr	r3, [pc, #520]	; (800d2f4 <interfaceDrawPointers+0x11fc>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	0018      	movs	r0, r3
 800d0f0:	f7f5 ff4a 	bl	8002f88 <__aeabi_i2d>
 800d0f4:	0002      	movs	r2, r0
 800d0f6:	000b      	movs	r3, r1
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	0029      	movs	r1, r5
 800d0fc:	f7f4 f982 	bl	8001404 <__aeabi_dadd>
 800d100:	0002      	movs	r2, r0
 800d102:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX + pointerShadowShift,
 800d104:	0010      	movs	r0, r2
 800d106:	0019      	movs	r1, r3
 800d108:	f7f3 fa56 	bl	80005b8 <__aeabi_d2uiz>
 800d10c:	0003      	movs	r3, r0
 800d10e:	b29b      	uxth	r3, r3
 800d110:	4699      	mov	r9, r3
			(sin(minuteAngle) * minutePointerLength) + mainStartY
 800d112:	4b7c      	ldr	r3, [pc, #496]	; (800d304 <interfaceDrawPointers+0x120c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1c18      	adds	r0, r3, #0
 800d118:	f7f5 ff8c 	bl	8003034 <__aeabi_f2d>
 800d11c:	0002      	movs	r2, r0
 800d11e:	000b      	movs	r3, r1
 800d120:	0010      	movs	r0, r2
 800d122:	0019      	movs	r1, r3
 800d124:	f005 f8da 	bl	80122dc <sin>
 800d128:	0004      	movs	r4, r0
 800d12a:	000d      	movs	r5, r1
 800d12c:	4b76      	ldr	r3, [pc, #472]	; (800d308 <interfaceDrawPointers+0x1210>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	0018      	movs	r0, r3
 800d132:	f7f5 ff29 	bl	8002f88 <__aeabi_i2d>
 800d136:	0002      	movs	r2, r0
 800d138:	000b      	movs	r3, r1
 800d13a:	0020      	movs	r0, r4
 800d13c:	0029      	movs	r1, r5
 800d13e:	f7f5 f8d1 	bl	80022e4 <__aeabi_dmul>
 800d142:	0002      	movs	r2, r0
 800d144:	000b      	movs	r3, r1
 800d146:	0014      	movs	r4, r2
 800d148:	001d      	movs	r5, r3
 800d14a:	4b69      	ldr	r3, [pc, #420]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	0018      	movs	r0, r3
 800d150:	f7f5 ff1a 	bl	8002f88 <__aeabi_i2d>
 800d154:	0002      	movs	r2, r0
 800d156:	000b      	movs	r3, r1
 800d158:	0020      	movs	r0, r4
 800d15a:	0029      	movs	r1, r5
 800d15c:	f7f4 f952 	bl	8001404 <__aeabi_dadd>
 800d160:	0002      	movs	r2, r0
 800d162:	000b      	movs	r3, r1
 800d164:	0014      	movs	r4, r2
 800d166:	001d      	movs	r5, r3
					+ pointerShadowShift, colorMain, DOT_PIXEL_2X2,
 800d168:	4b62      	ldr	r3, [pc, #392]	; (800d2f4 <interfaceDrawPointers+0x11fc>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	0018      	movs	r0, r3
 800d16e:	f7f5 ff0b 	bl	8002f88 <__aeabi_i2d>
 800d172:	0002      	movs	r2, r0
 800d174:	000b      	movs	r3, r1
 800d176:	0020      	movs	r0, r4
 800d178:	0029      	movs	r1, r5
 800d17a:	f7f4 f943 	bl	8001404 <__aeabi_dadd>
 800d17e:	0002      	movs	r2, r0
 800d180:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX + pointerShadowShift,
 800d182:	0010      	movs	r0, r2
 800d184:	0019      	movs	r1, r3
 800d186:	f7f3 fa17 	bl	80005b8 <__aeabi_d2uiz>
 800d18a:	0003      	movs	r3, r0
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	4b5a      	ldr	r3, [pc, #360]	; (800d2f8 <interfaceDrawPointers+0x1200>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	b29b      	uxth	r3, r3
 800d196:	2100      	movs	r1, #0
 800d198:	9102      	str	r1, [sp, #8]
 800d19a:	2102      	movs	r1, #2
 800d19c:	9101      	str	r1, [sp, #4]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	0013      	movs	r3, r2
 800d1a2:	464a      	mov	r2, r9
 800d1a4:	4641      	mov	r1, r8
 800d1a6:	0030      	movs	r0, r6
 800d1a8:	f7f7 fa92 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	//^shadow

	Paint_DrawLine(mainStartX, mainStartY,
 800d1ac:	4b53      	ldr	r3, [pc, #332]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	b29e      	uxth	r6, r3
 800d1b2:	4b4f      	ldr	r3, [pc, #316]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	4698      	mov	r8, r3
			(cos(minuteAngle) * minutePointerLength) + mainStartX,
 800d1ba:	4b52      	ldr	r3, [pc, #328]	; (800d304 <interfaceDrawPointers+0x120c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	1c18      	adds	r0, r3, #0
 800d1c0:	f7f5 ff38 	bl	8003034 <__aeabi_f2d>
 800d1c4:	0002      	movs	r2, r0
 800d1c6:	000b      	movs	r3, r1
 800d1c8:	0010      	movs	r0, r2
 800d1ca:	0019      	movs	r1, r3
 800d1cc:	f005 f844 	bl	8012258 <cos>
 800d1d0:	0004      	movs	r4, r0
 800d1d2:	000d      	movs	r5, r1
 800d1d4:	4b4c      	ldr	r3, [pc, #304]	; (800d308 <interfaceDrawPointers+0x1210>)
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	0018      	movs	r0, r3
 800d1da:	f7f5 fed5 	bl	8002f88 <__aeabi_i2d>
 800d1de:	0002      	movs	r2, r0
 800d1e0:	000b      	movs	r3, r1
 800d1e2:	0020      	movs	r0, r4
 800d1e4:	0029      	movs	r1, r5
 800d1e6:	f7f5 f87d 	bl	80022e4 <__aeabi_dmul>
 800d1ea:	0002      	movs	r2, r0
 800d1ec:	000b      	movs	r3, r1
 800d1ee:	0014      	movs	r4, r2
 800d1f0:	001d      	movs	r5, r3
 800d1f2:	4b42      	ldr	r3, [pc, #264]	; (800d2fc <interfaceDrawPointers+0x1204>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f7f5 fec6 	bl	8002f88 <__aeabi_i2d>
 800d1fc:	0002      	movs	r2, r0
 800d1fe:	000b      	movs	r3, r1
 800d200:	0020      	movs	r0, r4
 800d202:	0029      	movs	r1, r5
 800d204:	f7f4 f8fe 	bl	8001404 <__aeabi_dadd>
 800d208:	0002      	movs	r2, r0
 800d20a:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX, mainStartY,
 800d20c:	0010      	movs	r0, r2
 800d20e:	0019      	movs	r1, r3
 800d210:	f7f3 f9d2 	bl	80005b8 <__aeabi_d2uiz>
 800d214:	0003      	movs	r3, r0
 800d216:	b29b      	uxth	r3, r3
 800d218:	4699      	mov	r9, r3
			(sin(minuteAngle) * minutePointerLength) + mainStartY, colorSecond,
 800d21a:	4b3a      	ldr	r3, [pc, #232]	; (800d304 <interfaceDrawPointers+0x120c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	1c18      	adds	r0, r3, #0
 800d220:	f7f5 ff08 	bl	8003034 <__aeabi_f2d>
 800d224:	0002      	movs	r2, r0
 800d226:	000b      	movs	r3, r1
 800d228:	0010      	movs	r0, r2
 800d22a:	0019      	movs	r1, r3
 800d22c:	f005 f856 	bl	80122dc <sin>
 800d230:	0004      	movs	r4, r0
 800d232:	000d      	movs	r5, r1
 800d234:	4b34      	ldr	r3, [pc, #208]	; (800d308 <interfaceDrawPointers+0x1210>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	0018      	movs	r0, r3
 800d23a:	f7f5 fea5 	bl	8002f88 <__aeabi_i2d>
 800d23e:	0002      	movs	r2, r0
 800d240:	000b      	movs	r3, r1
 800d242:	0020      	movs	r0, r4
 800d244:	0029      	movs	r1, r5
 800d246:	f7f5 f84d 	bl	80022e4 <__aeabi_dmul>
 800d24a:	0002      	movs	r2, r0
 800d24c:	000b      	movs	r3, r1
 800d24e:	0014      	movs	r4, r2
 800d250:	001d      	movs	r5, r3
 800d252:	4b27      	ldr	r3, [pc, #156]	; (800d2f0 <interfaceDrawPointers+0x11f8>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	0018      	movs	r0, r3
 800d258:	f7f5 fe96 	bl	8002f88 <__aeabi_i2d>
 800d25c:	0002      	movs	r2, r0
 800d25e:	000b      	movs	r3, r1
 800d260:	0020      	movs	r0, r4
 800d262:	0029      	movs	r1, r5
 800d264:	f7f4 f8ce 	bl	8001404 <__aeabi_dadd>
 800d268:	0002      	movs	r2, r0
 800d26a:	000b      	movs	r3, r1
	Paint_DrawLine(mainStartX, mainStartY,
 800d26c:	0010      	movs	r0, r2
 800d26e:	0019      	movs	r1, r3
 800d270:	f7f3 f9a2 	bl	80005b8 <__aeabi_d2uiz>
 800d274:	0003      	movs	r3, r0
 800d276:	b29a      	uxth	r2, r3
 800d278:	4b21      	ldr	r3, [pc, #132]	; (800d300 <interfaceDrawPointers+0x1208>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	b29b      	uxth	r3, r3
 800d280:	2100      	movs	r1, #0
 800d282:	9102      	str	r1, [sp, #8]
 800d284:	2102      	movs	r1, #2
 800d286:	9101      	str	r1, [sp, #4]
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	0013      	movs	r3, r2
 800d28c:	464a      	mov	r2, r9
 800d28e:	4641      	mov	r1, r8
 800d290:	0030      	movs	r0, r6
 800d292:	f7f7 fa1d 	bl	80046d0 <Paint_DrawLine>
			DOT_PIXEL_2X2, LINE_STYLE_SOLID);
	//^ pointer

	//										CHRONO MINUTE POINTER

	if (showChrono == 1) {
 800d296:	4b1d      	ldr	r3, [pc, #116]	; (800d30c <interfaceDrawPointers+0x1214>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d000      	beq.n	800d2a0 <interfaceDrawPointers+0x11a8>
 800d29e:	e0db      	b.n	800d458 <interfaceDrawPointers+0x1360>
		Paint_DrawLine(chronoMinutesStartX, chronoMinutesStartY,
 800d2a0:	4b1b      	ldr	r3, [pc, #108]	; (800d310 <interfaceDrawPointers+0x1218>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	b29e      	uxth	r6, r3
 800d2a6:	4b1b      	ldr	r3, [pc, #108]	; (800d314 <interfaceDrawPointers+0x121c>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	4698      	mov	r8, r3
				(cos(chronoMinutesAngle) * chronoMinutesPointerLength)
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <interfaceDrawPointers+0x1220>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	1c18      	adds	r0, r3, #0
 800d2b4:	f7f5 febe 	bl	8003034 <__aeabi_f2d>
 800d2b8:	0002      	movs	r2, r0
 800d2ba:	000b      	movs	r3, r1
 800d2bc:	0010      	movs	r0, r2
 800d2be:	0019      	movs	r1, r3
 800d2c0:	f004 ffca 	bl	8012258 <cos>
 800d2c4:	0004      	movs	r4, r0
 800d2c6:	000d      	movs	r5, r1
 800d2c8:	4b14      	ldr	r3, [pc, #80]	; (800d31c <interfaceDrawPointers+0x1224>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	0018      	movs	r0, r3
 800d2ce:	f7f5 fe5b 	bl	8002f88 <__aeabi_i2d>
 800d2d2:	0002      	movs	r2, r0
 800d2d4:	000b      	movs	r3, r1
 800d2d6:	0020      	movs	r0, r4
 800d2d8:	0029      	movs	r1, r5
 800d2da:	f7f5 f803 	bl	80022e4 <__aeabi_dmul>
 800d2de:	0002      	movs	r2, r0
 800d2e0:	000b      	movs	r3, r1
 800d2e2:	0014      	movs	r4, r2
 800d2e4:	e01c      	b.n	800d320 <interfaceDrawPointers+0x1228>
 800d2e6:	46c0      	nop			; (mov r8, r8)
 800d2e8:	2000046c 	.word	0x2000046c
 800d2ec:	20000143 	.word	0x20000143
 800d2f0:	2000013a 	.word	0x2000013a
 800d2f4:	20000141 	.word	0x20000141
 800d2f8:	200001bb 	.word	0x200001bb
 800d2fc:	200002c7 	.word	0x200002c7
 800d300:	20000459 	.word	0x20000459
 800d304:	200003c0 	.word	0x200003c0
 800d308:	2000043f 	.word	0x2000043f
 800d30c:	20000230 	.word	0x20000230
 800d310:	20000480 	.word	0x20000480
 800d314:	2000045a 	.word	0x2000045a
 800d318:	20000464 	.word	0x20000464
 800d31c:	20000140 	.word	0x20000140
 800d320:	001d      	movs	r5, r3
						+ chronoMinutesStartX,
 800d322:	4b33      	ldr	r3, [pc, #204]	; (800d3f0 <interfaceDrawPointers+0x12f8>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	0018      	movs	r0, r3
 800d328:	f7f5 fe2e 	bl	8002f88 <__aeabi_i2d>
 800d32c:	0002      	movs	r2, r0
 800d32e:	000b      	movs	r3, r1
 800d330:	0020      	movs	r0, r4
 800d332:	0029      	movs	r1, r5
 800d334:	f7f4 f866 	bl	8001404 <__aeabi_dadd>
 800d338:	0002      	movs	r2, r0
 800d33a:	000b      	movs	r3, r1
		Paint_DrawLine(chronoMinutesStartX, chronoMinutesStartY,
 800d33c:	0010      	movs	r0, r2
 800d33e:	0019      	movs	r1, r3
 800d340:	f7f3 f93a 	bl	80005b8 <__aeabi_d2uiz>
 800d344:	0003      	movs	r3, r0
 800d346:	b29b      	uxth	r3, r3
 800d348:	4699      	mov	r9, r3
				(sin(chronoMinutesAngle) * chronoMinutesPointerLength)
 800d34a:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <interfaceDrawPointers+0x12fc>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	1c18      	adds	r0, r3, #0
 800d350:	f7f5 fe70 	bl	8003034 <__aeabi_f2d>
 800d354:	0002      	movs	r2, r0
 800d356:	000b      	movs	r3, r1
 800d358:	0010      	movs	r0, r2
 800d35a:	0019      	movs	r1, r3
 800d35c:	f004 ffbe 	bl	80122dc <sin>
 800d360:	0004      	movs	r4, r0
 800d362:	000d      	movs	r5, r1
 800d364:	4b24      	ldr	r3, [pc, #144]	; (800d3f8 <interfaceDrawPointers+0x1300>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	0018      	movs	r0, r3
 800d36a:	f7f5 fe0d 	bl	8002f88 <__aeabi_i2d>
 800d36e:	0002      	movs	r2, r0
 800d370:	000b      	movs	r3, r1
 800d372:	0020      	movs	r0, r4
 800d374:	0029      	movs	r1, r5
 800d376:	f7f4 ffb5 	bl	80022e4 <__aeabi_dmul>
 800d37a:	0002      	movs	r2, r0
 800d37c:	000b      	movs	r3, r1
 800d37e:	0014      	movs	r4, r2
 800d380:	001d      	movs	r5, r3
						+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800d382:	4b1e      	ldr	r3, [pc, #120]	; (800d3fc <interfaceDrawPointers+0x1304>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	0018      	movs	r0, r3
 800d388:	f7f5 fdfe 	bl	8002f88 <__aeabi_i2d>
 800d38c:	0002      	movs	r2, r0
 800d38e:	000b      	movs	r3, r1
 800d390:	0020      	movs	r0, r4
 800d392:	0029      	movs	r1, r5
 800d394:	f7f4 f836 	bl	8001404 <__aeabi_dadd>
 800d398:	0002      	movs	r2, r0
 800d39a:	000b      	movs	r3, r1
		Paint_DrawLine(chronoMinutesStartX, chronoMinutesStartY,
 800d39c:	0010      	movs	r0, r2
 800d39e:	0019      	movs	r1, r3
 800d3a0:	f7f3 f90a 	bl	80005b8 <__aeabi_d2uiz>
 800d3a4:	0003      	movs	r3, r0
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	4b15      	ldr	r3, [pc, #84]	; (800d400 <interfaceDrawPointers+0x1308>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	9102      	str	r1, [sp, #8]
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	9101      	str	r1, [sp, #4]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	0013      	movs	r3, r2
 800d3bc:	464a      	mov	r2, r9
 800d3be:	4641      	mov	r1, r8
 800d3c0:	0030      	movs	r0, r6
 800d3c2:	f7f7 f985 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);

		//										CHRONO HALF HOURS DOTS

		for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <interfaceDrawPointers+0x130c>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	18db      	adds	r3, r3, r3
 800d3d0:	b2dc      	uxtb	r4, r3
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	; (800d408 <interfaceDrawPointers+0x1310>)
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	b21b      	sxth	r3, r3
 800d3d8:	211e      	movs	r1, #30
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f7f2 ff24 	bl	8000228 <__divsi3>
 800d3e0:	0003      	movs	r3, r0
 800d3e2:	b21b      	sxth	r3, r3
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	1dbb      	adds	r3, r7, #6
 800d3e8:	18a2      	adds	r2, r4, r2
 800d3ea:	701a      	strb	r2, [r3, #0]
 800d3ec:	e030      	b.n	800d450 <interfaceDrawPointers+0x1358>
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	20000480 	.word	0x20000480
 800d3f4:	20000464 	.word	0x20000464
 800d3f8:	20000140 	.word	0x20000140
 800d3fc:	2000045a 	.word	0x2000045a
 800d400:	200001bb 	.word	0x200001bb
 800d404:	20000235 	.word	0x20000235
 800d408:	20000484 	.word	0x20000484
				halfHours > 0; halfHours--) {
			Paint_DrawPoint(
					chronoMinutesStartX - chronoMinutesPointerLength
 800d40c:	4bfa      	ldr	r3, [pc, #1000]	; (800d7f8 <interfaceDrawPointers+0x1700>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	b29a      	uxth	r2, r3
 800d412:	4bfa      	ldr	r3, [pc, #1000]	; (800d7fc <interfaceDrawPointers+0x1704>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	b29a      	uxth	r2, r3
			Paint_DrawPoint(
 800d41c:	1dbb      	adds	r3, r7, #6
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	b29b      	uxth	r3, r3
 800d426:	18d3      	adds	r3, r2, r3
 800d428:	b298      	uxth	r0, r3
 800d42a:	4bf5      	ldr	r3, [pc, #980]	; (800d800 <interfaceDrawPointers+0x1708>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	3b05      	subs	r3, #5
 800d432:	b299      	uxth	r1, r3
 800d434:	4bf3      	ldr	r3, [pc, #972]	; (800d804 <interfaceDrawPointers+0x170c>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	2301      	movs	r3, #1
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2302      	movs	r3, #2
 800d442:	f7f7 f85b 	bl	80044fc <Paint_DrawPoint>
				halfHours > 0; halfHours--) {
 800d446:	1dbb      	adds	r3, r7, #6
 800d448:	781a      	ldrb	r2, [r3, #0]
 800d44a:	1dbb      	adds	r3, r7, #6
 800d44c:	3a01      	subs	r2, #1
 800d44e:	701a      	strb	r2, [r3, #0]
		for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d450:	1dbb      	adds	r3, r7, #6
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1d9      	bne.n	800d40c <interfaceDrawPointers+0x1314>

	}

	//										SECONDS POINTER

	if (showSeconds == 1) {
 800d458:	4beb      	ldr	r3, [pc, #940]	; (800d808 <interfaceDrawPointers+0x1710>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d174      	bne.n	800d54a <interfaceDrawPointers+0x1452>
		Paint_DrawLine(secondsStartX, secondsStartY,
 800d460:	4bea      	ldr	r3, [pc, #936]	; (800d80c <interfaceDrawPointers+0x1714>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b29e      	uxth	r6, r3
 800d466:	4bea      	ldr	r3, [pc, #936]	; (800d810 <interfaceDrawPointers+0x1718>)
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4698      	mov	r8, r3
				(cos(secondAngle) * secondPointerLength) + secondsStartX,
 800d46e:	4be9      	ldr	r3, [pc, #932]	; (800d814 <interfaceDrawPointers+0x171c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	1c18      	adds	r0, r3, #0
 800d474:	f7f5 fdde 	bl	8003034 <__aeabi_f2d>
 800d478:	0002      	movs	r2, r0
 800d47a:	000b      	movs	r3, r1
 800d47c:	0010      	movs	r0, r2
 800d47e:	0019      	movs	r1, r3
 800d480:	f004 feea 	bl	8012258 <cos>
 800d484:	0004      	movs	r4, r0
 800d486:	000d      	movs	r5, r1
 800d488:	4be3      	ldr	r3, [pc, #908]	; (800d818 <interfaceDrawPointers+0x1720>)
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	0018      	movs	r0, r3
 800d48e:	f7f5 fd7b 	bl	8002f88 <__aeabi_i2d>
 800d492:	0002      	movs	r2, r0
 800d494:	000b      	movs	r3, r1
 800d496:	0020      	movs	r0, r4
 800d498:	0029      	movs	r1, r5
 800d49a:	f7f4 ff23 	bl	80022e4 <__aeabi_dmul>
 800d49e:	0002      	movs	r2, r0
 800d4a0:	000b      	movs	r3, r1
 800d4a2:	0014      	movs	r4, r2
 800d4a4:	001d      	movs	r5, r3
 800d4a6:	4bd9      	ldr	r3, [pc, #868]	; (800d80c <interfaceDrawPointers+0x1714>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f7f5 fd6c 	bl	8002f88 <__aeabi_i2d>
 800d4b0:	0002      	movs	r2, r0
 800d4b2:	000b      	movs	r3, r1
 800d4b4:	0020      	movs	r0, r4
 800d4b6:	0029      	movs	r1, r5
 800d4b8:	f7f3 ffa4 	bl	8001404 <__aeabi_dadd>
 800d4bc:	0002      	movs	r2, r0
 800d4be:	000b      	movs	r3, r1
		Paint_DrawLine(secondsStartX, secondsStartY,
 800d4c0:	0010      	movs	r0, r2
 800d4c2:	0019      	movs	r1, r3
 800d4c4:	f7f3 f878 	bl	80005b8 <__aeabi_d2uiz>
 800d4c8:	0003      	movs	r3, r0
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4699      	mov	r9, r3
				(sin(secondAngle) * secondPointerLength) + secondsStartY,
 800d4ce:	4bd1      	ldr	r3, [pc, #836]	; (800d814 <interfaceDrawPointers+0x171c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	1c18      	adds	r0, r3, #0
 800d4d4:	f7f5 fdae 	bl	8003034 <__aeabi_f2d>
 800d4d8:	0002      	movs	r2, r0
 800d4da:	000b      	movs	r3, r1
 800d4dc:	0010      	movs	r0, r2
 800d4de:	0019      	movs	r1, r3
 800d4e0:	f004 fefc 	bl	80122dc <sin>
 800d4e4:	0004      	movs	r4, r0
 800d4e6:	000d      	movs	r5, r1
 800d4e8:	4bcb      	ldr	r3, [pc, #812]	; (800d818 <interfaceDrawPointers+0x1720>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	f7f5 fd4b 	bl	8002f88 <__aeabi_i2d>
 800d4f2:	0002      	movs	r2, r0
 800d4f4:	000b      	movs	r3, r1
 800d4f6:	0020      	movs	r0, r4
 800d4f8:	0029      	movs	r1, r5
 800d4fa:	f7f4 fef3 	bl	80022e4 <__aeabi_dmul>
 800d4fe:	0002      	movs	r2, r0
 800d500:	000b      	movs	r3, r1
 800d502:	0014      	movs	r4, r2
 800d504:	001d      	movs	r5, r3
 800d506:	4bc2      	ldr	r3, [pc, #776]	; (800d810 <interfaceDrawPointers+0x1718>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	0018      	movs	r0, r3
 800d50c:	f7f5 fd3c 	bl	8002f88 <__aeabi_i2d>
 800d510:	0002      	movs	r2, r0
 800d512:	000b      	movs	r3, r1
 800d514:	0020      	movs	r0, r4
 800d516:	0029      	movs	r1, r5
 800d518:	f7f3 ff74 	bl	8001404 <__aeabi_dadd>
 800d51c:	0002      	movs	r2, r0
 800d51e:	000b      	movs	r3, r1
		Paint_DrawLine(secondsStartX, secondsStartY,
 800d520:	0010      	movs	r0, r2
 800d522:	0019      	movs	r1, r3
 800d524:	f7f3 f848 	bl	80005b8 <__aeabi_d2uiz>
 800d528:	0003      	movs	r3, r0
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	4bb5      	ldr	r3, [pc, #724]	; (800d804 <interfaceDrawPointers+0x170c>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	b2db      	uxtb	r3, r3
 800d532:	b29b      	uxth	r3, r3
 800d534:	2100      	movs	r1, #0
 800d536:	9102      	str	r1, [sp, #8]
 800d538:	2101      	movs	r1, #1
 800d53a:	9101      	str	r1, [sp, #4]
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	0013      	movs	r3, r2
 800d540:	464a      	mov	r2, r9
 800d542:	4641      	mov	r1, r8
 800d544:	0030      	movs	r0, r6
 800d546:	f7f7 f8c3 	bl	80046d0 <Paint_DrawLine>
		//^pointer
	}

	//										CHRONO SECOND POINTER

	if (showChrono == 1) {
 800d54a:	4bb4      	ldr	r3, [pc, #720]	; (800d81c <interfaceDrawPointers+0x1724>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d000      	beq.n	800d554 <interfaceDrawPointers+0x145c>
 800d552:	e111      	b.n	800d778 <interfaceDrawPointers+0x1680>
		Paint_DrawLine(mainStartX, mainStartY,
 800d554:	4bb2      	ldr	r3, [pc, #712]	; (800d820 <interfaceDrawPointers+0x1728>)
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	b29e      	uxth	r6, r3
 800d55a:	4bb2      	ldr	r3, [pc, #712]	; (800d824 <interfaceDrawPointers+0x172c>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	b29b      	uxth	r3, r3
 800d560:	4698      	mov	r8, r3
				(cos(chronoSecondsAngle) * chronoSecondsPointerLength)
 800d562:	4bb1      	ldr	r3, [pc, #708]	; (800d828 <interfaceDrawPointers+0x1730>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	1c18      	adds	r0, r3, #0
 800d568:	f7f5 fd64 	bl	8003034 <__aeabi_f2d>
 800d56c:	0002      	movs	r2, r0
 800d56e:	000b      	movs	r3, r1
 800d570:	0010      	movs	r0, r2
 800d572:	0019      	movs	r1, r3
 800d574:	f004 fe70 	bl	8012258 <cos>
 800d578:	0004      	movs	r4, r0
 800d57a:	000d      	movs	r5, r1
 800d57c:	4bab      	ldr	r3, [pc, #684]	; (800d82c <interfaceDrawPointers+0x1734>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	0018      	movs	r0, r3
 800d582:	f7f5 fd01 	bl	8002f88 <__aeabi_i2d>
 800d586:	0002      	movs	r2, r0
 800d588:	000b      	movs	r3, r1
 800d58a:	0020      	movs	r0, r4
 800d58c:	0029      	movs	r1, r5
 800d58e:	f7f4 fea9 	bl	80022e4 <__aeabi_dmul>
 800d592:	0002      	movs	r2, r0
 800d594:	000b      	movs	r3, r1
 800d596:	0014      	movs	r4, r2
 800d598:	001d      	movs	r5, r3
						+ mainStartX,
 800d59a:	4ba1      	ldr	r3, [pc, #644]	; (800d820 <interfaceDrawPointers+0x1728>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	0018      	movs	r0, r3
 800d5a0:	f7f5 fcf2 	bl	8002f88 <__aeabi_i2d>
 800d5a4:	0002      	movs	r2, r0
 800d5a6:	000b      	movs	r3, r1
 800d5a8:	0020      	movs	r0, r4
 800d5aa:	0029      	movs	r1, r5
 800d5ac:	f7f3 ff2a 	bl	8001404 <__aeabi_dadd>
 800d5b0:	0002      	movs	r2, r0
 800d5b2:	000b      	movs	r3, r1
		Paint_DrawLine(mainStartX, mainStartY,
 800d5b4:	0010      	movs	r0, r2
 800d5b6:	0019      	movs	r1, r3
 800d5b8:	f7f2 fffe 	bl	80005b8 <__aeabi_d2uiz>
 800d5bc:	0003      	movs	r3, r0
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	4699      	mov	r9, r3
				(sin(chronoSecondsAngle) * chronoSecondsPointerLength)
 800d5c2:	4b99      	ldr	r3, [pc, #612]	; (800d828 <interfaceDrawPointers+0x1730>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	1c18      	adds	r0, r3, #0
 800d5c8:	f7f5 fd34 	bl	8003034 <__aeabi_f2d>
 800d5cc:	0002      	movs	r2, r0
 800d5ce:	000b      	movs	r3, r1
 800d5d0:	0010      	movs	r0, r2
 800d5d2:	0019      	movs	r1, r3
 800d5d4:	f004 fe82 	bl	80122dc <sin>
 800d5d8:	0004      	movs	r4, r0
 800d5da:	000d      	movs	r5, r1
 800d5dc:	4b93      	ldr	r3, [pc, #588]	; (800d82c <interfaceDrawPointers+0x1734>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	f7f5 fcd1 	bl	8002f88 <__aeabi_i2d>
 800d5e6:	0002      	movs	r2, r0
 800d5e8:	000b      	movs	r3, r1
 800d5ea:	0020      	movs	r0, r4
 800d5ec:	0029      	movs	r1, r5
 800d5ee:	f7f4 fe79 	bl	80022e4 <__aeabi_dmul>
 800d5f2:	0002      	movs	r2, r0
 800d5f4:	000b      	movs	r3, r1
 800d5f6:	0014      	movs	r4, r2
 800d5f8:	001d      	movs	r5, r3
						+ mainStartY, colorSecond, DOT_PIXEL_1X1,
 800d5fa:	4b8a      	ldr	r3, [pc, #552]	; (800d824 <interfaceDrawPointers+0x172c>)
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	0018      	movs	r0, r3
 800d600:	f7f5 fcc2 	bl	8002f88 <__aeabi_i2d>
 800d604:	0002      	movs	r2, r0
 800d606:	000b      	movs	r3, r1
 800d608:	0020      	movs	r0, r4
 800d60a:	0029      	movs	r1, r5
 800d60c:	f7f3 fefa 	bl	8001404 <__aeabi_dadd>
 800d610:	0002      	movs	r2, r0
 800d612:	000b      	movs	r3, r1
		Paint_DrawLine(mainStartX, mainStartY,
 800d614:	0010      	movs	r0, r2
 800d616:	0019      	movs	r1, r3
 800d618:	f7f2 ffce 	bl	80005b8 <__aeabi_d2uiz>
 800d61c:	0003      	movs	r3, r0
 800d61e:	b29a      	uxth	r2, r3
 800d620:	4b83      	ldr	r3, [pc, #524]	; (800d830 <interfaceDrawPointers+0x1738>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	b29b      	uxth	r3, r3
 800d628:	2100      	movs	r1, #0
 800d62a:	9102      	str	r1, [sp, #8]
 800d62c:	2101      	movs	r1, #1
 800d62e:	9101      	str	r1, [sp, #4]
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	0013      	movs	r3, r2
 800d634:	464a      	mov	r2, r9
 800d636:	4641      	mov	r1, r8
 800d638:	0030      	movs	r0, r6
 800d63a:	f7f7 f849 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(mainStartX + pointerShadowShift,
 800d63e:	4b78      	ldr	r3, [pc, #480]	; (800d820 <interfaceDrawPointers+0x1728>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	b29a      	uxth	r2, r3
 800d644:	4b7b      	ldr	r3, [pc, #492]	; (800d834 <interfaceDrawPointers+0x173c>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	18d3      	adds	r3, r2, r3
 800d64c:	b29e      	uxth	r6, r3
 800d64e:	4b75      	ldr	r3, [pc, #468]	; (800d824 <interfaceDrawPointers+0x172c>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	b29a      	uxth	r2, r3
 800d654:	4b77      	ldr	r3, [pc, #476]	; (800d834 <interfaceDrawPointers+0x173c>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	18d3      	adds	r3, r2, r3
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4698      	mov	r8, r3
				mainStartY + pointerShadowShift,
				(cos(chronoSecondsAngle) * chronoSecondsPointerLength)
 800d660:	4b71      	ldr	r3, [pc, #452]	; (800d828 <interfaceDrawPointers+0x1730>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	1c18      	adds	r0, r3, #0
 800d666:	f7f5 fce5 	bl	8003034 <__aeabi_f2d>
 800d66a:	0002      	movs	r2, r0
 800d66c:	000b      	movs	r3, r1
 800d66e:	0010      	movs	r0, r2
 800d670:	0019      	movs	r1, r3
 800d672:	f004 fdf1 	bl	8012258 <cos>
 800d676:	0004      	movs	r4, r0
 800d678:	000d      	movs	r5, r1
 800d67a:	4b6c      	ldr	r3, [pc, #432]	; (800d82c <interfaceDrawPointers+0x1734>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	0018      	movs	r0, r3
 800d680:	f7f5 fc82 	bl	8002f88 <__aeabi_i2d>
 800d684:	0002      	movs	r2, r0
 800d686:	000b      	movs	r3, r1
 800d688:	0020      	movs	r0, r4
 800d68a:	0029      	movs	r1, r5
 800d68c:	f7f4 fe2a 	bl	80022e4 <__aeabi_dmul>
 800d690:	0002      	movs	r2, r0
 800d692:	000b      	movs	r3, r1
 800d694:	0014      	movs	r4, r2
 800d696:	001d      	movs	r5, r3
						+ mainStartX + pointerShadowShift,
 800d698:	4b61      	ldr	r3, [pc, #388]	; (800d820 <interfaceDrawPointers+0x1728>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	0018      	movs	r0, r3
 800d69e:	f7f5 fc73 	bl	8002f88 <__aeabi_i2d>
 800d6a2:	0002      	movs	r2, r0
 800d6a4:	000b      	movs	r3, r1
 800d6a6:	0020      	movs	r0, r4
 800d6a8:	0029      	movs	r1, r5
 800d6aa:	f7f3 feab 	bl	8001404 <__aeabi_dadd>
 800d6ae:	0002      	movs	r2, r0
 800d6b0:	000b      	movs	r3, r1
 800d6b2:	0014      	movs	r4, r2
 800d6b4:	001d      	movs	r5, r3
 800d6b6:	4b5f      	ldr	r3, [pc, #380]	; (800d834 <interfaceDrawPointers+0x173c>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	0018      	movs	r0, r3
 800d6bc:	f7f5 fc64 	bl	8002f88 <__aeabi_i2d>
 800d6c0:	0002      	movs	r2, r0
 800d6c2:	000b      	movs	r3, r1
 800d6c4:	0020      	movs	r0, r4
 800d6c6:	0029      	movs	r1, r5
 800d6c8:	f7f3 fe9c 	bl	8001404 <__aeabi_dadd>
 800d6cc:	0002      	movs	r2, r0
 800d6ce:	000b      	movs	r3, r1
		Paint_DrawLine(mainStartX + pointerShadowShift,
 800d6d0:	0010      	movs	r0, r2
 800d6d2:	0019      	movs	r1, r3
 800d6d4:	f7f2 ff70 	bl	80005b8 <__aeabi_d2uiz>
 800d6d8:	0003      	movs	r3, r0
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	4699      	mov	r9, r3
				(sin(chronoSecondsAngle) * chronoSecondsPointerLength)
 800d6de:	4b52      	ldr	r3, [pc, #328]	; (800d828 <interfaceDrawPointers+0x1730>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	1c18      	adds	r0, r3, #0
 800d6e4:	f7f5 fca6 	bl	8003034 <__aeabi_f2d>
 800d6e8:	0002      	movs	r2, r0
 800d6ea:	000b      	movs	r3, r1
 800d6ec:	0010      	movs	r0, r2
 800d6ee:	0019      	movs	r1, r3
 800d6f0:	f004 fdf4 	bl	80122dc <sin>
 800d6f4:	0004      	movs	r4, r0
 800d6f6:	000d      	movs	r5, r1
 800d6f8:	4b4c      	ldr	r3, [pc, #304]	; (800d82c <interfaceDrawPointers+0x1734>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	f7f5 fc43 	bl	8002f88 <__aeabi_i2d>
 800d702:	0002      	movs	r2, r0
 800d704:	000b      	movs	r3, r1
 800d706:	0020      	movs	r0, r4
 800d708:	0029      	movs	r1, r5
 800d70a:	f7f4 fdeb 	bl	80022e4 <__aeabi_dmul>
 800d70e:	0002      	movs	r2, r0
 800d710:	000b      	movs	r3, r1
 800d712:	0014      	movs	r4, r2
 800d714:	001d      	movs	r5, r3
						+ mainStartY + pointerShadowShift, colorMain,
 800d716:	4b43      	ldr	r3, [pc, #268]	; (800d824 <interfaceDrawPointers+0x172c>)
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7f5 fc34 	bl	8002f88 <__aeabi_i2d>
 800d720:	0002      	movs	r2, r0
 800d722:	000b      	movs	r3, r1
 800d724:	0020      	movs	r0, r4
 800d726:	0029      	movs	r1, r5
 800d728:	f7f3 fe6c 	bl	8001404 <__aeabi_dadd>
 800d72c:	0002      	movs	r2, r0
 800d72e:	000b      	movs	r3, r1
 800d730:	0014      	movs	r4, r2
 800d732:	001d      	movs	r5, r3
 800d734:	4b3f      	ldr	r3, [pc, #252]	; (800d834 <interfaceDrawPointers+0x173c>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	0018      	movs	r0, r3
 800d73a:	f7f5 fc25 	bl	8002f88 <__aeabi_i2d>
 800d73e:	0002      	movs	r2, r0
 800d740:	000b      	movs	r3, r1
 800d742:	0020      	movs	r0, r4
 800d744:	0029      	movs	r1, r5
 800d746:	f7f3 fe5d 	bl	8001404 <__aeabi_dadd>
 800d74a:	0002      	movs	r2, r0
 800d74c:	000b      	movs	r3, r1
		Paint_DrawLine(mainStartX + pointerShadowShift,
 800d74e:	0010      	movs	r0, r2
 800d750:	0019      	movs	r1, r3
 800d752:	f7f2 ff31 	bl	80005b8 <__aeabi_d2uiz>
 800d756:	0003      	movs	r3, r0
 800d758:	b29a      	uxth	r2, r3
 800d75a:	4b2a      	ldr	r3, [pc, #168]	; (800d804 <interfaceDrawPointers+0x170c>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	b29b      	uxth	r3, r3
 800d762:	2100      	movs	r1, #0
 800d764:	9102      	str	r1, [sp, #8]
 800d766:	2101      	movs	r1, #1
 800d768:	9101      	str	r1, [sp, #4]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	0013      	movs	r3, r2
 800d76e:	464a      	mov	r2, r9
 800d770:	4641      	mov	r1, r8
 800d772:	0030      	movs	r0, r6
 800d774:	f7f6 ffac 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_1X1, LINE_STYLE_SOLID);
	}

	//										CHRONO DECIMAL POINTER

	if (showChrono == 1) {
 800d778:	4b28      	ldr	r3, [pc, #160]	; (800d81c <interfaceDrawPointers+0x1724>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d000      	beq.n	800d782 <interfaceDrawPointers+0x168a>
 800d780:	e09d      	b.n	800d8be <interfaceDrawPointers+0x17c6>
		Paint_DrawLine(chronoDecimalsStartX, chronoDecimalsStartY,
 800d782:	4b2d      	ldr	r3, [pc, #180]	; (800d838 <interfaceDrawPointers+0x1740>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b29e      	uxth	r6, r3
 800d788:	4b2c      	ldr	r3, [pc, #176]	; (800d83c <interfaceDrawPointers+0x1744>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	4698      	mov	r8, r3
				(cos(chronoDecimalsAngle) * chronoDecimalsPointerLength)
 800d790:	4b2b      	ldr	r3, [pc, #172]	; (800d840 <interfaceDrawPointers+0x1748>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	1c18      	adds	r0, r3, #0
 800d796:	f7f5 fc4d 	bl	8003034 <__aeabi_f2d>
 800d79a:	0002      	movs	r2, r0
 800d79c:	000b      	movs	r3, r1
 800d79e:	0010      	movs	r0, r2
 800d7a0:	0019      	movs	r1, r3
 800d7a2:	f004 fd59 	bl	8012258 <cos>
 800d7a6:	0004      	movs	r4, r0
 800d7a8:	000d      	movs	r5, r1
 800d7aa:	4b26      	ldr	r3, [pc, #152]	; (800d844 <interfaceDrawPointers+0x174c>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	0018      	movs	r0, r3
 800d7b0:	f7f5 fbea 	bl	8002f88 <__aeabi_i2d>
 800d7b4:	0002      	movs	r2, r0
 800d7b6:	000b      	movs	r3, r1
 800d7b8:	0020      	movs	r0, r4
 800d7ba:	0029      	movs	r1, r5
 800d7bc:	f7f4 fd92 	bl	80022e4 <__aeabi_dmul>
 800d7c0:	0002      	movs	r2, r0
 800d7c2:	000b      	movs	r3, r1
 800d7c4:	0014      	movs	r4, r2
 800d7c6:	001d      	movs	r5, r3
						+ chronoDecimalsStartX,
 800d7c8:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <interfaceDrawPointers+0x1740>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	0018      	movs	r0, r3
 800d7ce:	f7f5 fbdb 	bl	8002f88 <__aeabi_i2d>
 800d7d2:	0002      	movs	r2, r0
 800d7d4:	000b      	movs	r3, r1
 800d7d6:	0020      	movs	r0, r4
 800d7d8:	0029      	movs	r1, r5
 800d7da:	f7f3 fe13 	bl	8001404 <__aeabi_dadd>
 800d7de:	0002      	movs	r2, r0
 800d7e0:	000b      	movs	r3, r1
		Paint_DrawLine(chronoDecimalsStartX, chronoDecimalsStartY,
 800d7e2:	0010      	movs	r0, r2
 800d7e4:	0019      	movs	r1, r3
 800d7e6:	f7f2 fee7 	bl	80005b8 <__aeabi_d2uiz>
 800d7ea:	0003      	movs	r3, r0
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	4699      	mov	r9, r3
				(sin(chronoDecimalsAngle) * chronoDecimalsPointerLength)
 800d7f0:	4b13      	ldr	r3, [pc, #76]	; (800d840 <interfaceDrawPointers+0x1748>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	1c18      	adds	r0, r3, #0
 800d7f6:	e027      	b.n	800d848 <interfaceDrawPointers+0x1750>
 800d7f8:	20000480 	.word	0x20000480
 800d7fc:	20000140 	.word	0x20000140
 800d800:	2000045a 	.word	0x2000045a
 800d804:	200001bb 	.word	0x200001bb
 800d808:	20000132 	.word	0x20000132
 800d80c:	2000047b 	.word	0x2000047b
 800d810:	200001fa 	.word	0x200001fa
 800d814:	20000474 	.word	0x20000474
 800d818:	2000043d 	.word	0x2000043d
 800d81c:	20000230 	.word	0x20000230
 800d820:	200002c7 	.word	0x200002c7
 800d824:	2000013a 	.word	0x2000013a
 800d828:	2000045c 	.word	0x2000045c
 800d82c:	20000239 	.word	0x20000239
 800d830:	20000459 	.word	0x20000459
 800d834:	20000141 	.word	0x20000141
 800d838:	200003ec 	.word	0x200003ec
 800d83c:	200003ed 	.word	0x200003ed
 800d840:	200001f0 	.word	0x200001f0
 800d844:	20000492 	.word	0x20000492
 800d848:	f7f5 fbf4 	bl	8003034 <__aeabi_f2d>
 800d84c:	0002      	movs	r2, r0
 800d84e:	000b      	movs	r3, r1
 800d850:	0010      	movs	r0, r2
 800d852:	0019      	movs	r1, r3
 800d854:	f004 fd42 	bl	80122dc <sin>
 800d858:	0004      	movs	r4, r0
 800d85a:	000d      	movs	r5, r1
 800d85c:	4b2a      	ldr	r3, [pc, #168]	; (800d908 <interfaceDrawPointers+0x1810>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	0018      	movs	r0, r3
 800d862:	f7f5 fb91 	bl	8002f88 <__aeabi_i2d>
 800d866:	0002      	movs	r2, r0
 800d868:	000b      	movs	r3, r1
 800d86a:	0020      	movs	r0, r4
 800d86c:	0029      	movs	r1, r5
 800d86e:	f7f4 fd39 	bl	80022e4 <__aeabi_dmul>
 800d872:	0002      	movs	r2, r0
 800d874:	000b      	movs	r3, r1
 800d876:	0014      	movs	r4, r2
 800d878:	001d      	movs	r5, r3
						+ chronoDecimalsStartY, colorMain, DOT_PIXEL_1X1,
 800d87a:	4b24      	ldr	r3, [pc, #144]	; (800d90c <interfaceDrawPointers+0x1814>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	0018      	movs	r0, r3
 800d880:	f7f5 fb82 	bl	8002f88 <__aeabi_i2d>
 800d884:	0002      	movs	r2, r0
 800d886:	000b      	movs	r3, r1
 800d888:	0020      	movs	r0, r4
 800d88a:	0029      	movs	r1, r5
 800d88c:	f7f3 fdba 	bl	8001404 <__aeabi_dadd>
 800d890:	0002      	movs	r2, r0
 800d892:	000b      	movs	r3, r1
		Paint_DrawLine(chronoDecimalsStartX, chronoDecimalsStartY,
 800d894:	0010      	movs	r0, r2
 800d896:	0019      	movs	r1, r3
 800d898:	f7f2 fe8e 	bl	80005b8 <__aeabi_d2uiz>
 800d89c:	0003      	movs	r3, r0
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	4b1b      	ldr	r3, [pc, #108]	; (800d910 <interfaceDrawPointers+0x1818>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	9102      	str	r1, [sp, #8]
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	9101      	str	r1, [sp, #4]
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	0013      	movs	r3, r2
 800d8b4:	464a      	mov	r2, r9
 800d8b6:	4641      	mov	r1, r8
 800d8b8:	0030      	movs	r0, r6
 800d8ba:	f7f6 ff09 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}

	//										DATE

	if (showDate == 1) {
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <interfaceDrawPointers+0x181c>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d118      	bne.n	800d8f8 <interfaceDrawPointers+0x1800>
		Paint_DrawNum(dateX, dateY, day, &Font12, colorSecond, colorMain); //date
 800d8c6:	4b14      	ldr	r3, [pc, #80]	; (800d918 <interfaceDrawPointers+0x1820>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	b298      	uxth	r0, r3
 800d8cc:	4b13      	ldr	r3, [pc, #76]	; (800d91c <interfaceDrawPointers+0x1824>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	b299      	uxth	r1, r3
 800d8d2:	4b13      	ldr	r3, [pc, #76]	; (800d920 <interfaceDrawPointers+0x1828>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	001d      	movs	r5, r3
 800d8da:	4b12      	ldr	r3, [pc, #72]	; (800d924 <interfaceDrawPointers+0x182c>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	4a0b      	ldr	r2, [pc, #44]	; (800d910 <interfaceDrawPointers+0x1818>)
 800d8e4:	7812      	ldrb	r2, [r2, #0]
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	4c0f      	ldr	r4, [pc, #60]	; (800d928 <interfaceDrawPointers+0x1830>)
 800d8ec:	9201      	str	r2, [sp, #4]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	0023      	movs	r3, r4
 800d8f2:	002a      	movs	r2, r5
 800d8f4:	f7f7 fc4a 	bl	800518c <Paint_DrawNum>
	}

}
 800d8f8:	46c0      	nop			; (mov r8, r8)
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	b003      	add	sp, #12
 800d8fe:	bcc0      	pop	{r6, r7}
 800d900:	46b9      	mov	r9, r7
 800d902:	46b0      	mov	r8, r6
 800d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d906:	46c0      	nop			; (mov r8, r8)
 800d908:	20000492 	.word	0x20000492
 800d90c:	200003ed 	.word	0x200003ed
 800d910:	200001bb 	.word	0x200001bb
 800d914:	20000142 	.word	0x20000142
 800d918:	20000482 	.word	0x20000482
 800d91c:	200001b0 	.word	0x200001b0
 800d920:	2000044c 	.word	0x2000044c
 800d924:	20000459 	.word	0x20000459
 800d928:	20000000 	.word	0x20000000

0800d92c <interfaceDrawBatteryWarning>:

void interfaceDrawBatteryWarning() {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af02      	add	r7, sp, #8
	Paint_DrawString_EN(105, 90, "CHARGE", &Font16, colorSecond, colorMain);
 800d932:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <interfaceDrawBatteryWarning+0x30>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	b2db      	uxtb	r3, r3
 800d938:	b29b      	uxth	r3, r3
 800d93a:	4a09      	ldr	r2, [pc, #36]	; (800d960 <interfaceDrawBatteryWarning+0x34>)
 800d93c:	7812      	ldrb	r2, [r2, #0]
 800d93e:	b2d2      	uxtb	r2, r2
 800d940:	b292      	uxth	r2, r2
 800d942:	4808      	ldr	r0, [pc, #32]	; (800d964 <interfaceDrawBatteryWarning+0x38>)
 800d944:	4908      	ldr	r1, [pc, #32]	; (800d968 <interfaceDrawBatteryWarning+0x3c>)
 800d946:	9201      	str	r2, [sp, #4]
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	0003      	movs	r3, r0
 800d94c:	000a      	movs	r2, r1
 800d94e:	215a      	movs	r1, #90	; 0x5a
 800d950:	2069      	movs	r0, #105	; 0x69
 800d952:	f7f7 fb9d 	bl	8005090 <Paint_DrawString_EN>
}
 800d956:	46c0      	nop			; (mov r8, r8)
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	20000459 	.word	0x20000459
 800d960:	200001bb 	.word	0x200001bb
 800d964:	20000008 	.word	0x20000008
 800d968:	08013b58 	.word	0x08013b58

0800d96c <interfaceDrawBoards>:

void interfaceDrawBoards() {
 800d96c:	b5b0      	push	{r4, r5, r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af04      	add	r7, sp, #16

	//										MOON PHASE

	if (showMoonPhase == 1) {
 800d972:	4b27      	ldr	r3, [pc, #156]	; (800da10 <interfaceDrawBoards+0xa4>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d000      	beq.n	800d97c <interfaceDrawBoards+0x10>
 800d97a:	e095      	b.n	800daa8 <interfaceDrawBoards+0x13c>

//		moonPhase = 51;

		Paint_DrawCircle(moonPhaseX, moonPhaseY, moonPhaseRadius, colorSecond,
 800d97c:	4b25      	ldr	r3, [pc, #148]	; (800da14 <interfaceDrawBoards+0xa8>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	b298      	uxth	r0, r3
 800d982:	4b25      	ldr	r3, [pc, #148]	; (800da18 <interfaceDrawBoards+0xac>)
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	b299      	uxth	r1, r3
 800d988:	4b24      	ldr	r3, [pc, #144]	; (800da1c <interfaceDrawBoards+0xb0>)
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <interfaceDrawBoards+0xb4>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	b29b      	uxth	r3, r3
 800d996:	2401      	movs	r4, #1
 800d998:	9401      	str	r4, [sp, #4]
 800d99a:	2401      	movs	r4, #1
 800d99c:	9400      	str	r4, [sp, #0]
 800d99e:	f7f7 f841 	bl	8004a24 <Paint_DrawCircle>
				DOT_PIXEL_1X1, DRAW_FILL_FULL);

		float moonPhaseShift;

		if (moonPhase < 50) {
 800d9a2:	4b20      	ldr	r3, [pc, #128]	; (800da24 <interfaceDrawBoards+0xb8>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b31      	cmp	r3, #49	; 0x31
 800d9a8:	d842      	bhi.n	800da30 <interfaceDrawBoards+0xc4>

			moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800d9aa:	4b1e      	ldr	r3, [pc, #120]	; (800da24 <interfaceDrawBoards+0xb8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f7f3 fcec 	bl	800138c <__aeabi_ui2f>
 800d9b4:	1c03      	adds	r3, r0, #0
 800d9b6:	491c      	ldr	r1, [pc, #112]	; (800da28 <interfaceDrawBoards+0xbc>)
 800d9b8:	1c18      	adds	r0, r3, #0
 800d9ba:	f7f2 ffd5 	bl	8000968 <__aeabi_fdiv>
 800d9be:	1c03      	adds	r3, r0, #0
 800d9c0:	1c1c      	adds	r4, r3, #0
 800d9c2:	4b16      	ldr	r3, [pc, #88]	; (800da1c <interfaceDrawBoards+0xb0>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	f7f3 fc9a 	bl	8001300 <__aeabi_i2f>
 800d9cc:	1c03      	adds	r3, r0, #0
 800d9ce:	1c19      	adds	r1, r3, #0
 800d9d0:	1c20      	adds	r0, r4, #0
 800d9d2:	f7f3 f993 	bl	8000cfc <__aeabi_fmul>
 800d9d6:	1c03      	adds	r3, r0, #0
 800d9d8:	607b      	str	r3, [r7, #4]
			Paint_DrawCircle(moonPhaseX + (uint32_t) moonPhaseShift, moonPhaseY,
 800d9da:	4b0e      	ldr	r3, [pc, #56]	; (800da14 <interfaceDrawBoards+0xa8>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	b29c      	uxth	r4, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7f2 fdd1 	bl	8000588 <__aeabi_f2uiz>
 800d9e6:	0003      	movs	r3, r0
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	18e3      	adds	r3, r4, r3
 800d9ec:	b298      	uxth	r0, r3
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <interfaceDrawBoards+0xac>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b299      	uxth	r1, r3
 800d9f4:	4b09      	ldr	r3, [pc, #36]	; (800da1c <interfaceDrawBoards+0xb0>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <interfaceDrawBoards+0xc0>)
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	b29b      	uxth	r3, r3
 800da02:	2401      	movs	r4, #1
 800da04:	9401      	str	r4, [sp, #4]
 800da06:	2401      	movs	r4, #1
 800da08:	9400      	str	r4, [sp, #0]
 800da0a:	f7f7 f80b 	bl	8004a24 <Paint_DrawCircle>
 800da0e:	e04b      	b.n	800daa8 <interfaceDrawBoards+0x13c>
 800da10:	20000240 	.word	0x20000240
 800da14:	20000491 	.word	0x20000491
 800da18:	20000458 	.word	0x20000458
 800da1c:	2000014c 	.word	0x2000014c
 800da20:	20000459 	.word	0x20000459
 800da24:	2000023c 	.word	0x2000023c
 800da28:	41c80000 	.word	0x41c80000
 800da2c:	200001bb 	.word	0x200001bb
					moonPhaseRadius, colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);

		} else if (moonPhase > 50) {
 800da30:	4bf3      	ldr	r3, [pc, #972]	; (800de00 <interfaceDrawBoards+0x494>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b32      	cmp	r3, #50	; 0x32
 800da36:	d937      	bls.n	800daa8 <interfaceDrawBoards+0x13c>
			moonPhase = 100 - moonPhase;
 800da38:	4bf1      	ldr	r3, [pc, #964]	; (800de00 <interfaceDrawBoards+0x494>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2264      	movs	r2, #100	; 0x64
 800da3e:	1ad2      	subs	r2, r2, r3
 800da40:	4bef      	ldr	r3, [pc, #956]	; (800de00 <interfaceDrawBoards+0x494>)
 800da42:	601a      	str	r2, [r3, #0]

			moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800da44:	4bee      	ldr	r3, [pc, #952]	; (800de00 <interfaceDrawBoards+0x494>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	0018      	movs	r0, r3
 800da4a:	f7f3 fc9f 	bl	800138c <__aeabi_ui2f>
 800da4e:	1c03      	adds	r3, r0, #0
 800da50:	49ec      	ldr	r1, [pc, #944]	; (800de04 <interfaceDrawBoards+0x498>)
 800da52:	1c18      	adds	r0, r3, #0
 800da54:	f7f2 ff88 	bl	8000968 <__aeabi_fdiv>
 800da58:	1c03      	adds	r3, r0, #0
 800da5a:	1c1c      	adds	r4, r3, #0
 800da5c:	4bea      	ldr	r3, [pc, #936]	; (800de08 <interfaceDrawBoards+0x49c>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	0018      	movs	r0, r3
 800da62:	f7f3 fc4d 	bl	8001300 <__aeabi_i2f>
 800da66:	1c03      	adds	r3, r0, #0
 800da68:	1c19      	adds	r1, r3, #0
 800da6a:	1c20      	adds	r0, r4, #0
 800da6c:	f7f3 f946 	bl	8000cfc <__aeabi_fmul>
 800da70:	1c03      	adds	r3, r0, #0
 800da72:	607b      	str	r3, [r7, #4]
			Paint_DrawCircle(moonPhaseX - (uint32_t) moonPhaseShift, moonPhaseY,
 800da74:	4be5      	ldr	r3, [pc, #916]	; (800de0c <interfaceDrawBoards+0x4a0>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	b29c      	uxth	r4, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7f2 fd84 	bl	8000588 <__aeabi_f2uiz>
 800da80:	0003      	movs	r3, r0
 800da82:	b29b      	uxth	r3, r3
 800da84:	1ae3      	subs	r3, r4, r3
 800da86:	b298      	uxth	r0, r3
 800da88:	4be1      	ldr	r3, [pc, #900]	; (800de10 <interfaceDrawBoards+0x4a4>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b299      	uxth	r1, r3
 800da8e:	4bde      	ldr	r3, [pc, #888]	; (800de08 <interfaceDrawBoards+0x49c>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	b29a      	uxth	r2, r3
 800da94:	4bdf      	ldr	r3, [pc, #892]	; (800de14 <interfaceDrawBoards+0x4a8>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	2401      	movs	r4, #1
 800da9e:	9401      	str	r4, [sp, #4]
 800daa0:	2401      	movs	r4, #1
 800daa2:	9400      	str	r4, [sp, #0]
 800daa4:	f7f6 ffbe 	bl	8004a24 <Paint_DrawCircle>

	}

	//										METER

	if (showMeter == 1) {
 800daa8:	4bdb      	ldr	r3, [pc, #876]	; (800de18 <interfaceDrawBoards+0x4ac>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d11b      	bne.n	800dae8 <interfaceDrawBoards+0x17c>
		Paint_DrawRectangle(meterX, meterY, meterX + 82, meterY + 52,
 800dab0:	4bda      	ldr	r3, [pc, #872]	; (800de1c <interfaceDrawBoards+0x4b0>)
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	b298      	uxth	r0, r3
 800dab6:	4bda      	ldr	r3, [pc, #872]	; (800de20 <interfaceDrawBoards+0x4b4>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	b299      	uxth	r1, r3
 800dabc:	4bd7      	ldr	r3, [pc, #860]	; (800de1c <interfaceDrawBoards+0x4b0>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	3352      	adds	r3, #82	; 0x52
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	4bd6      	ldr	r3, [pc, #856]	; (800de20 <interfaceDrawBoards+0x4b4>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	3334      	adds	r3, #52	; 0x34
 800dace:	b29c      	uxth	r4, r3
 800dad0:	4bd4      	ldr	r3, [pc, #848]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2500      	movs	r5, #0
 800dada:	9502      	str	r5, [sp, #8]
 800dadc:	2502      	movs	r5, #2
 800dade:	9501      	str	r5, [sp, #4]
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	0023      	movs	r3, r4
 800dae4:	f7f6 fed2 	bl	800488c <Paint_DrawRectangle>
				colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
	}

	//										DIGITAL INTERFACE FIELD

	if (showDigitalInterface == 1) {
 800dae8:	4bcf      	ldr	r3, [pc, #828]	; (800de28 <interfaceDrawBoards+0x4bc>)
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d11b      	bne.n	800db28 <interfaceDrawBoards+0x1bc>
		Paint_DrawRectangle(digitalX, digitalY, digitalX + 80, digitalY + 37,
 800daf0:	4bce      	ldr	r3, [pc, #824]	; (800de2c <interfaceDrawBoards+0x4c0>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	b298      	uxth	r0, r3
 800daf6:	4bce      	ldr	r3, [pc, #824]	; (800de30 <interfaceDrawBoards+0x4c4>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	b299      	uxth	r1, r3
 800dafc:	4bcb      	ldr	r3, [pc, #812]	; (800de2c <interfaceDrawBoards+0x4c0>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	b29b      	uxth	r3, r3
 800db02:	3350      	adds	r3, #80	; 0x50
 800db04:	b29a      	uxth	r2, r3
 800db06:	4bca      	ldr	r3, [pc, #808]	; (800de30 <interfaceDrawBoards+0x4c4>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	3325      	adds	r3, #37	; 0x25
 800db0e:	b29c      	uxth	r4, r3
 800db10:	4bc4      	ldr	r3, [pc, #784]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	b2db      	uxtb	r3, r3
 800db16:	b29b      	uxth	r3, r3
 800db18:	2501      	movs	r5, #1
 800db1a:	9502      	str	r5, [sp, #8]
 800db1c:	2501      	movs	r5, #1
 800db1e:	9501      	str	r5, [sp, #4]
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	0023      	movs	r3, r4
 800db24:	f7f6 feb2 	bl	800488c <Paint_DrawRectangle>

	}

	//										TEMPERATURE FIELD

	if (showThermometer == 1) {
 800db28:	4bc2      	ldr	r3, [pc, #776]	; (800de34 <interfaceDrawBoards+0x4c8>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d11d      	bne.n	800db6c <interfaceDrawBoards+0x200>
		Paint_DrawRectangle(temperatureX - 7, temperatureY, temperatureX + 34,
 800db30:	4bc1      	ldr	r3, [pc, #772]	; (800de38 <interfaceDrawBoards+0x4cc>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	b29b      	uxth	r3, r3
 800db36:	3b07      	subs	r3, #7
 800db38:	b298      	uxth	r0, r3
 800db3a:	4bc0      	ldr	r3, [pc, #768]	; (800de3c <interfaceDrawBoards+0x4d0>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b299      	uxth	r1, r3
 800db40:	4bbd      	ldr	r3, [pc, #756]	; (800de38 <interfaceDrawBoards+0x4cc>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	3322      	adds	r3, #34	; 0x22
 800db48:	b29a      	uxth	r2, r3
 800db4a:	4bbc      	ldr	r3, [pc, #752]	; (800de3c <interfaceDrawBoards+0x4d0>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	330c      	adds	r3, #12
 800db52:	b29c      	uxth	r4, r3
 800db54:	4bb3      	ldr	r3, [pc, #716]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	2501      	movs	r5, #1
 800db5e:	9502      	str	r5, [sp, #8]
 800db60:	2502      	movs	r5, #2
 800db62:	9501      	str	r5, [sp, #4]
 800db64:	9300      	str	r3, [sp, #0]
 800db66:	0023      	movs	r3, r4
 800db68:	f7f6 fe90 	bl	800488c <Paint_DrawRectangle>
				temperatureY + 12, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_FULL); // date window
	}

	//										HUMIDITY BAR FIELD

	if (showHigrometer == 1) {
 800db6c:	4bb4      	ldr	r3, [pc, #720]	; (800de40 <interfaceDrawBoards+0x4d4>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d11b      	bne.n	800dbac <interfaceDrawBoards+0x240>
		Paint_DrawRectangle(humidityX, humidityY, humidityX + 5, humidityY + 50,
 800db74:	4bb3      	ldr	r3, [pc, #716]	; (800de44 <interfaceDrawBoards+0x4d8>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	b298      	uxth	r0, r3
 800db7a:	4bb3      	ldr	r3, [pc, #716]	; (800de48 <interfaceDrawBoards+0x4dc>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b299      	uxth	r1, r3
 800db80:	4bb0      	ldr	r3, [pc, #704]	; (800de44 <interfaceDrawBoards+0x4d8>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	b29b      	uxth	r3, r3
 800db86:	3305      	adds	r3, #5
 800db88:	b29a      	uxth	r2, r3
 800db8a:	4baf      	ldr	r3, [pc, #700]	; (800de48 <interfaceDrawBoards+0x4dc>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3332      	adds	r3, #50	; 0x32
 800db92:	b29c      	uxth	r4, r3
 800db94:	4ba3      	ldr	r3, [pc, #652]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	2500      	movs	r5, #0
 800db9e:	9502      	str	r5, [sp, #8]
 800dba0:	2501      	movs	r5, #1
 800dba2:	9501      	str	r5, [sp, #4]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	0023      	movs	r3, r4
 800dba8:	f7f6 fe70 	bl	800488c <Paint_DrawRectangle>
				colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
	}

	//										COMPASS
	if (showNavi == 1) {
 800dbac:	4ba7      	ldr	r3, [pc, #668]	; (800de4c <interfaceDrawBoards+0x4e0>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d139      	bne.n	800dc28 <interfaceDrawBoards+0x2bc>
		Paint_DrawRectangle(compassX, compassY, compassX + 48, compassY + 44,
 800dbb4:	4ba6      	ldr	r3, [pc, #664]	; (800de50 <interfaceDrawBoards+0x4e4>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	b298      	uxth	r0, r3
 800dbba:	4ba6      	ldr	r3, [pc, #664]	; (800de54 <interfaceDrawBoards+0x4e8>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	b299      	uxth	r1, r3
 800dbc0:	4ba3      	ldr	r3, [pc, #652]	; (800de50 <interfaceDrawBoards+0x4e4>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3330      	adds	r3, #48	; 0x30
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	4ba2      	ldr	r3, [pc, #648]	; (800de54 <interfaceDrawBoards+0x4e8>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	332c      	adds	r3, #44	; 0x2c
 800dbd2:	b29c      	uxth	r4, r3
 800dbd4:	4b93      	ldr	r3, [pc, #588]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	2500      	movs	r5, #0
 800dbde:	9502      	str	r5, [sp, #8]
 800dbe0:	2501      	movs	r5, #1
 800dbe2:	9501      	str	r5, [sp, #4]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	0023      	movs	r3, r4
 800dbe8:	f7f6 fe50 	bl	800488c <Paint_DrawRectangle>
				colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
		Paint_DrawLine(compassX, compassY + 29, compassX + 48, compassY + 29,
 800dbec:	4b98      	ldr	r3, [pc, #608]	; (800de50 <interfaceDrawBoards+0x4e4>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	b298      	uxth	r0, r3
 800dbf2:	4b98      	ldr	r3, [pc, #608]	; (800de54 <interfaceDrawBoards+0x4e8>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	331d      	adds	r3, #29
 800dbfa:	b299      	uxth	r1, r3
 800dbfc:	4b94      	ldr	r3, [pc, #592]	; (800de50 <interfaceDrawBoards+0x4e4>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	3330      	adds	r3, #48	; 0x30
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	4b93      	ldr	r3, [pc, #588]	; (800de54 <interfaceDrawBoards+0x4e8>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	331d      	adds	r3, #29
 800dc0e:	b29c      	uxth	r4, r3
 800dc10:	4b84      	ldr	r3, [pc, #528]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	2500      	movs	r5, #0
 800dc1a:	9502      	str	r5, [sp, #8]
 800dc1c:	2501      	movs	r5, #1
 800dc1e:	9501      	str	r5, [sp, #4]
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	0023      	movs	r3, r4
 800dc24:	f7f6 fd54 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
	}

	//										MAIN BOARD

	Paint_DrawCircle(100, 100, mainBoardRadius, colorSecond, DOT_PIXEL_1X1,
 800dc28:	4b8b      	ldr	r3, [pc, #556]	; (800de58 <interfaceDrawBoards+0x4ec>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	4b7d      	ldr	r3, [pc, #500]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	2100      	movs	r1, #0
 800dc38:	9101      	str	r1, [sp, #4]
 800dc3a:	2101      	movs	r1, #1
 800dc3c:	9100      	str	r1, [sp, #0]
 800dc3e:	2164      	movs	r1, #100	; 0x64
 800dc40:	2064      	movs	r0, #100	; 0x64
 800dc42:	f7f6 feef 	bl	8004a24 <Paint_DrawCircle>
			DRAW_FILL_EMPTY); //main

	//										CHRONO DECIMALS BOARD

	if (showChrono == 1) {
 800dc46:	4b85      	ldr	r3, [pc, #532]	; (800de5c <interfaceDrawBoards+0x4f0>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d14f      	bne.n	800dcee <interfaceDrawBoards+0x382>
		Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800dc4e:	4b84      	ldr	r3, [pc, #528]	; (800de60 <interfaceDrawBoards+0x4f4>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	b298      	uxth	r0, r3
 800dc54:	4b83      	ldr	r3, [pc, #524]	; (800de64 <interfaceDrawBoards+0x4f8>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	b299      	uxth	r1, r3
 800dc5a:	4b83      	ldr	r3, [pc, #524]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	3302      	adds	r3, #2
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	4b6f      	ldr	r3, [pc, #444]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	2400      	movs	r4, #0
 800dc6e:	9401      	str	r4, [sp, #4]
 800dc70:	2401      	movs	r4, #1
 800dc72:	9400      	str	r4, [sp, #0]
 800dc74:	f7f6 fed6 	bl	8004a24 <Paint_DrawCircle>
				smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
				DRAW_FILL_EMPTY);
		Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800dc78:	4b79      	ldr	r3, [pc, #484]	; (800de60 <interfaceDrawBoards+0x4f4>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b298      	uxth	r0, r3
 800dc7e:	4b79      	ldr	r3, [pc, #484]	; (800de64 <interfaceDrawBoards+0x4f8>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	b299      	uxth	r1, r3
 800dc84:	4b78      	ldr	r3, [pc, #480]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	4b66      	ldr	r3, [pc, #408]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	2401      	movs	r4, #1
 800dc94:	9401      	str	r4, [sp, #4]
 800dc96:	2401      	movs	r4, #1
 800dc98:	9400      	str	r4, [sp, #0]
 800dc9a:	f7f6 fec3 	bl	8004a24 <Paint_DrawCircle>
				smallBoardRadius, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //chrono decimals

		//										CHRONO MINUTES BOARD

		Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800dc9e:	4b73      	ldr	r3, [pc, #460]	; (800de6c <interfaceDrawBoards+0x500>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	b298      	uxth	r0, r3
 800dca4:	4b72      	ldr	r3, [pc, #456]	; (800de70 <interfaceDrawBoards+0x504>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	b299      	uxth	r1, r3
 800dcaa:	4b6f      	ldr	r3, [pc, #444]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	3302      	adds	r3, #2
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	4b5b      	ldr	r3, [pc, #364]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2400      	movs	r4, #0
 800dcbe:	9401      	str	r4, [sp, #4]
 800dcc0:	2401      	movs	r4, #1
 800dcc2:	9400      	str	r4, [sp, #0]
 800dcc4:	f7f6 feae 	bl	8004a24 <Paint_DrawCircle>
				smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
				DRAW_FILL_EMPTY);
		Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800dcc8:	4b68      	ldr	r3, [pc, #416]	; (800de6c <interfaceDrawBoards+0x500>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	b298      	uxth	r0, r3
 800dcce:	4b68      	ldr	r3, [pc, #416]	; (800de70 <interfaceDrawBoards+0x504>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	b299      	uxth	r1, r3
 800dcd4:	4b64      	ldr	r3, [pc, #400]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	4b52      	ldr	r3, [pc, #328]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	2401      	movs	r4, #1
 800dce4:	9401      	str	r4, [sp, #4]
 800dce6:	2401      	movs	r4, #1
 800dce8:	9400      	str	r4, [sp, #0]
 800dcea:	f7f6 fe9b 	bl	8004a24 <Paint_DrawCircle>
				smallBoardRadius, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //chrono minutes
	}

	//										SECONDS BOARD

	if (showSeconds == 1) {
 800dcee:	4b61      	ldr	r3, [pc, #388]	; (800de74 <interfaceDrawBoards+0x508>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d127      	bne.n	800dd46 <interfaceDrawBoards+0x3da>
		Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius + 2,
 800dcf6:	4b60      	ldr	r3, [pc, #384]	; (800de78 <interfaceDrawBoards+0x50c>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b298      	uxth	r0, r3
 800dcfc:	4b5f      	ldr	r3, [pc, #380]	; (800de7c <interfaceDrawBoards+0x510>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	b299      	uxth	r1, r3
 800dd02:	4b59      	ldr	r3, [pc, #356]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	3302      	adds	r3, #2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	4b45      	ldr	r3, [pc, #276]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	2400      	movs	r4, #0
 800dd16:	9401      	str	r4, [sp, #4]
 800dd18:	2401      	movs	r4, #1
 800dd1a:	9400      	str	r4, [sp, #0]
 800dd1c:	f7f6 fe82 	bl	8004a24 <Paint_DrawCircle>
				colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
		Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius,
 800dd20:	4b55      	ldr	r3, [pc, #340]	; (800de78 <interfaceDrawBoards+0x50c>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	b298      	uxth	r0, r3
 800dd26:	4b55      	ldr	r3, [pc, #340]	; (800de7c <interfaceDrawBoards+0x510>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b299      	uxth	r1, r3
 800dd2c:	4b4e      	ldr	r3, [pc, #312]	; (800de68 <interfaceDrawBoards+0x4fc>)
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	4b3c      	ldr	r3, [pc, #240]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	2401      	movs	r4, #1
 800dd3c:	9401      	str	r4, [sp, #4]
 800dd3e:	2401      	movs	r4, #1
 800dd40:	9400      	str	r4, [sp, #0]
 800dd42:	f7f6 fe6f 	bl	8004a24 <Paint_DrawCircle>
				colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //seconds
	}

	//										DATE WINDOW
	if (showDate == 1) {
 800dd46:	4b4e      	ldr	r3, [pc, #312]	; (800de80 <interfaceDrawBoards+0x514>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d11f      	bne.n	800dd8e <interfaceDrawBoards+0x422>
		Paint_DrawRectangle(dateX - 3, dateY - 3, dateX + 17, dateY + 14,
 800dd4e:	4b4d      	ldr	r3, [pc, #308]	; (800de84 <interfaceDrawBoards+0x518>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	3b03      	subs	r3, #3
 800dd56:	b298      	uxth	r0, r3
 800dd58:	4b4b      	ldr	r3, [pc, #300]	; (800de88 <interfaceDrawBoards+0x51c>)
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b03      	subs	r3, #3
 800dd60:	b299      	uxth	r1, r3
 800dd62:	4b48      	ldr	r3, [pc, #288]	; (800de84 <interfaceDrawBoards+0x518>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	3311      	adds	r3, #17
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	4b46      	ldr	r3, [pc, #280]	; (800de88 <interfaceDrawBoards+0x51c>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	330e      	adds	r3, #14
 800dd74:	b29c      	uxth	r4, r3
 800dd76:	4b2b      	ldr	r3, [pc, #172]	; (800de24 <interfaceDrawBoards+0x4b8>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2500      	movs	r5, #0
 800dd80:	9502      	str	r5, [sp, #8]
 800dd82:	2502      	movs	r5, #2
 800dd84:	9501      	str	r5, [sp, #4]
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	0023      	movs	r3, r4
 800dd8a:	f7f6 fd7f 	bl	800488c <Paint_DrawRectangle>
				colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window
	}

	//										DOTS

	if (showChrono == 1) {
 800dd8e:	4b33      	ldr	r3, [pc, #204]	; (800de5c <interfaceDrawBoards+0x4f0>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d17a      	bne.n	800de8c <interfaceDrawBoards+0x520>
		Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY, 2,
 800dd96:	4b32      	ldr	r3, [pc, #200]	; (800de60 <interfaceDrawBoards+0x4f4>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	b298      	uxth	r0, r3
 800dd9c:	4b31      	ldr	r3, [pc, #196]	; (800de64 <interfaceDrawBoards+0x4f8>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	b299      	uxth	r1, r3
 800dda2:	4b1c      	ldr	r3, [pc, #112]	; (800de14 <interfaceDrawBoards+0x4a8>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	2201      	movs	r2, #1
 800ddac:	9201      	str	r2, [sp, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	9200      	str	r2, [sp, #0]
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	f7f6 fe36 	bl	8004a24 <Paint_DrawCircle>
				colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
		Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY, 2, colorMain,
 800ddb8:	4b2c      	ldr	r3, [pc, #176]	; (800de6c <interfaceDrawBoards+0x500>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b298      	uxth	r0, r3
 800ddbe:	4b2c      	ldr	r3, [pc, #176]	; (800de70 <interfaceDrawBoards+0x504>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b299      	uxth	r1, r3
 800ddc4:	4b13      	ldr	r3, [pc, #76]	; (800de14 <interfaceDrawBoards+0x4a8>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	2201      	movs	r2, #1
 800ddce:	9201      	str	r2, [sp, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	9200      	str	r2, [sp, #0]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	f7f6 fe25 	bl	8004a24 <Paint_DrawCircle>
				DOT_PIXEL_1X1, DRAW_FILL_FULL);
		Paint_DrawCircle(secondsStartX, secondsStartY, 2, colorMain,
 800ddda:	4b27      	ldr	r3, [pc, #156]	; (800de78 <interfaceDrawBoards+0x50c>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b298      	uxth	r0, r3
 800dde0:	4b26      	ldr	r3, [pc, #152]	; (800de7c <interfaceDrawBoards+0x510>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b299      	uxth	r1, r3
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <interfaceDrawBoards+0x4a8>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	2201      	movs	r2, #1
 800ddf0:	9201      	str	r2, [sp, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	9200      	str	r2, [sp, #0]
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	f7f6 fe14 	bl	8004a24 <Paint_DrawCircle>
 800ddfc:	e046      	b.n	800de8c <interfaceDrawBoards+0x520>
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	2000023c 	.word	0x2000023c
 800de04:	41c80000 	.word	0x41c80000
 800de08:	2000014c 	.word	0x2000014c
 800de0c:	20000491 	.word	0x20000491
 800de10:	20000458 	.word	0x20000458
 800de14:	200001bb 	.word	0x200001bb
 800de18:	2000047a 	.word	0x2000047a
 800de1c:	20000236 	.word	0x20000236
 800de20:	20000330 	.word	0x20000330
 800de24:	20000459 	.word	0x20000459
 800de28:	20000490 	.word	0x20000490
 800de2c:	200003e9 	.word	0x200003e9
 800de30:	20000232 	.word	0x20000232
 800de34:	20000440 	.word	0x20000440
 800de38:	200003d1 	.word	0x200003d1
 800de3c:	200001ec 	.word	0x200001ec
 800de40:	200003ea 	.word	0x200003ea
 800de44:	2000049a 	.word	0x2000049a
 800de48:	200002c6 	.word	0x200002c6
 800de4c:	200001ed 	.word	0x200001ed
 800de50:	20000479 	.word	0x20000479
 800de54:	200002c8 	.word	0x200002c8
 800de58:	200003cc 	.word	0x200003cc
 800de5c:	20000230 	.word	0x20000230
 800de60:	200003ec 	.word	0x200003ec
 800de64:	200003ed 	.word	0x200003ed
 800de68:	20000120 	.word	0x20000120
 800de6c:	20000480 	.word	0x20000480
 800de70:	2000045a 	.word	0x2000045a
 800de74:	20000132 	.word	0x20000132
 800de78:	2000047b 	.word	0x2000047b
 800de7c:	200001fa 	.word	0x200001fa
 800de80:	20000142 	.word	0x20000142
 800de84:	20000482 	.word	0x20000482
 800de88:	200001b0 	.word	0x200001b0
				DOT_PIXEL_1X1, DRAW_FILL_FULL);
	}

	Paint_DrawString_EN(82, 7, "libra", &Font12, colorSecond, colorMain);
 800de8c:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <interfaceDrawBoards+0x54c>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	b29b      	uxth	r3, r3
 800de94:	4a09      	ldr	r2, [pc, #36]	; (800debc <interfaceDrawBoards+0x550>)
 800de96:	7812      	ldrb	r2, [r2, #0]
 800de98:	b2d2      	uxtb	r2, r2
 800de9a:	b292      	uxth	r2, r2
 800de9c:	4808      	ldr	r0, [pc, #32]	; (800dec0 <interfaceDrawBoards+0x554>)
 800de9e:	4909      	ldr	r1, [pc, #36]	; (800dec4 <interfaceDrawBoards+0x558>)
 800dea0:	9201      	str	r2, [sp, #4]
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	0003      	movs	r3, r0
 800dea6:	000a      	movs	r2, r1
 800dea8:	2107      	movs	r1, #7
 800deaa:	2052      	movs	r0, #82	; 0x52
 800deac:	f7f7 f8f0 	bl	8005090 <Paint_DrawString_EN>
//^logo

}
 800deb0:	46c0      	nop			; (mov r8, r8)
 800deb2:	46bd      	mov	sp, r7
 800deb4:	b002      	add	sp, #8
 800deb6:	bdb0      	pop	{r4, r5, r7, pc}
 800deb8:	20000459 	.word	0x20000459
 800debc:	200001bb 	.word	0x200001bb
 800dec0:	20000000 	.word	0x20000000
 800dec4:	08013b60 	.word	0x08013b60

0800dec8 <rtcInit>:
#include "main.h"
#include "../RTC/rtc.h"
#include <stdint.h>

void rtcInit(void) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 800decc:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <rtcInit+0x18>)
 800dece:	0018      	movs	r0, r3
 800ded0:	f7fa fd68 	bl	80089a4 <HAL_RTC_Init>
	mode = MODE_NORMAL
 800ded4:	4b03      	ldr	r3, [pc, #12]	; (800dee4 <rtcInit+0x1c>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
	;

}
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	2000051c 	.word	0x2000051c
 800dee4:	20000334 	.word	0x20000334

0800dee8 <rtcGetTime>:


void rtcGetTime() {
 800dee8:	b5b0      	push	{r4, r5, r7, lr}
 800deea:	b08e      	sub	sp, #56	; 0x38
 800deec:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800deee:	4910      	ldr	r1, [pc, #64]	; (800df30 <rtcGetTime+0x48>)
 800def0:	4b10      	ldr	r3, [pc, #64]	; (800df34 <rtcGetTime+0x4c>)
 800def2:	2200      	movs	r2, #0
 800def4:	0018      	movs	r0, r3
 800def6:	f7fa fe93 	bl	8008c20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800defa:	490f      	ldr	r1, [pc, #60]	; (800df38 <rtcGetTime+0x50>)
 800defc:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <rtcGetTime+0x4c>)
 800defe:	2200      	movs	r2, #0
 800df00:	0018      	movs	r0, r3
 800df02:	f7fa ff7b 	bl	8008dfc <HAL_RTC_GetDate>

	hours = sTime.Hours;
 800df06:	4b0a      	ldr	r3, [pc, #40]	; (800df30 <rtcGetTime+0x48>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	b25a      	sxtb	r2, r3
 800df0c:	4b0b      	ldr	r3, [pc, #44]	; (800df3c <rtcGetTime+0x54>)
 800df0e:	701a      	strb	r2, [r3, #0]

	if (hours >= 12) {
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <rtcGetTime+0x54>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	b25b      	sxtb	r3, r3
 800df16:	2b0b      	cmp	r3, #11
 800df18:	dd14      	ble.n	800df44 <rtcGetTime+0x5c>
		hours12 = hours - 12;
 800df1a:	4b08      	ldr	r3, [pc, #32]	; (800df3c <rtcGetTime+0x54>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	b25b      	sxtb	r3, r3
 800df20:	b2db      	uxtb	r3, r3
 800df22:	3b0c      	subs	r3, #12
 800df24:	b2db      	uxtb	r3, r3
 800df26:	b25a      	sxtb	r2, r3
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <rtcGetTime+0x58>)
 800df2a:	701a      	strb	r2, [r3, #0]
 800df2c:	e00f      	b.n	800df4e <rtcGetTime+0x66>
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	2000019c 	.word	0x2000019c
 800df34:	2000051c 	.word	0x2000051c
 800df38:	200003dc 	.word	0x200003dc
 800df3c:	2000049b 	.word	0x2000049b
 800df40:	2000013b 	.word	0x2000013b
	} else {
		hours12 = hours;
 800df44:	4bf4      	ldr	r3, [pc, #976]	; (800e318 <rtcGetTime+0x430>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	b25a      	sxtb	r2, r3
 800df4a:	4bf4      	ldr	r3, [pc, #976]	; (800e31c <rtcGetTime+0x434>)
 800df4c:	701a      	strb	r2, [r3, #0]
	}

	minutes = sTime.Minutes;
 800df4e:	4bf4      	ldr	r3, [pc, #976]	; (800e320 <rtcGetTime+0x438>)
 800df50:	785b      	ldrb	r3, [r3, #1]
 800df52:	b21a      	sxth	r2, r3
 800df54:	4bf3      	ldr	r3, [pc, #972]	; (800e324 <rtcGetTime+0x43c>)
 800df56:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 800df58:	4bf1      	ldr	r3, [pc, #964]	; (800e320 <rtcGetTime+0x438>)
 800df5a:	789b      	ldrb	r3, [r3, #2]
 800df5c:	b25a      	sxtb	r2, r3
 800df5e:	4bf2      	ldr	r3, [pc, #968]	; (800e328 <rtcGetTime+0x440>)
 800df60:	701a      	strb	r2, [r3, #0]

	decimals = (((255 - sTime.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800df62:	4bef      	ldr	r3, [pc, #956]	; (800e320 <rtcGetTime+0x438>)
 800df64:	685a      	ldr	r2, [r3, #4]
 800df66:	0013      	movs	r3, r2
 800df68:	065b      	lsls	r3, r3, #25
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	189b      	adds	r3, r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4aed      	ldr	r2, [pc, #948]	; (800e32c <rtcGetTime+0x444>)
 800df78:	4694      	mov	ip, r2
 800df7a:	4463      	add	r3, ip
 800df7c:	49ec      	ldr	r1, [pc, #944]	; (800e330 <rtcGetTime+0x448>)
 800df7e:	0018      	movs	r0, r3
 800df80:	f7f2 f8c8 	bl	8000114 <__udivsi3>
 800df84:	0003      	movs	r3, r0
 800df86:	001a      	movs	r2, r3
 800df88:	4bea      	ldr	r3, [pc, #936]	; (800e334 <rtcGetTime+0x44c>)
 800df8a:	601a      	str	r2, [r3, #0]

	day = sDate.Date;
 800df8c:	4bea      	ldr	r3, [pc, #936]	; (800e338 <rtcGetTime+0x450>)
 800df8e:	789a      	ldrb	r2, [r3, #2]
 800df90:	4bea      	ldr	r3, [pc, #936]	; (800e33c <rtcGetTime+0x454>)
 800df92:	701a      	strb	r2, [r3, #0]
	month = sDate.Month;
 800df94:	4be8      	ldr	r3, [pc, #928]	; (800e338 <rtcGetTime+0x450>)
 800df96:	785a      	ldrb	r2, [r3, #1]
 800df98:	4be9      	ldr	r3, [pc, #932]	; (800e340 <rtcGetTime+0x458>)
 800df9a:	701a      	strb	r2, [r3, #0]
	year = sDate.Year;
 800df9c:	4be6      	ldr	r3, [pc, #920]	; (800e338 <rtcGetTime+0x450>)
 800df9e:	78da      	ldrb	r2, [r3, #3]
 800dfa0:	4be8      	ldr	r3, [pc, #928]	; (800e344 <rtcGetTime+0x45c>)
 800dfa2:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (month + 9) / 12;
 800dfa4:	4be6      	ldr	r3, [pc, #920]	; (800e340 <rtcGetTime+0x458>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	3309      	adds	r3, #9
 800dfac:	210c      	movs	r1, #12
 800dfae:	0018      	movs	r0, r3
 800dfb0:	f7f2 f93a 	bl	8000228 <__divsi3>
 800dfb4:	0003      	movs	r3, r0
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	f7f3 f9a2 	bl	8001300 <__aeabi_i2f>
 800dfbc:	1c03      	adds	r3, r0, #0
 800dfbe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t A = 4716 + (year+2000) + (uint32_t) X;
 800dfc0:	4be0      	ldr	r3, [pc, #896]	; (800e344 <rtcGetTime+0x45c>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	001c      	movs	r4, r3
 800dfc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfca:	f7f2 fadd 	bl	8000588 <__aeabi_f2uiz>
 800dfce:	0003      	movs	r3, r0
 800dfd0:	18e3      	adds	r3, r4, r3
 800dfd2:	4add      	ldr	r2, [pc, #884]	; (800e348 <rtcGetTime+0x460>)
 800dfd4:	4694      	mov	ip, r2
 800dfd6:	4463      	add	r3, ip
 800dfd8:	633b      	str	r3, [r7, #48]	; 0x30
	float Y = 275 * month / 9;
 800dfda:	4bd9      	ldr	r3, [pc, #868]	; (800e340 <rtcGetTime+0x458>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	001a      	movs	r2, r3
 800dfe2:	0013      	movs	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	1a9b      	subs	r3, r3, r2
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	009a      	lsls	r2, r3, #2
 800dfee:	189b      	adds	r3, r3, r2
 800dff0:	2109      	movs	r1, #9
 800dff2:	0018      	movs	r0, r3
 800dff4:	f7f2 f918 	bl	8000228 <__divsi3>
 800dff8:	0003      	movs	r3, r0
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7f3 f980 	bl	8001300 <__aeabi_i2f>
 800e000:	1c03      	adds	r3, r0, #0
 800e002:	62fb      	str	r3, [r7, #44]	; 0x2c
	float V = 7 * A / 4;
 800e004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e006:	0013      	movs	r3, r2
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	089b      	lsrs	r3, r3, #2
 800e00e:	0018      	movs	r0, r3
 800e010:	f7f3 f9bc 	bl	800138c <__aeabi_ui2f>
 800e014:	1c03      	adds	r3, r0, #0
 800e016:	62bb      	str	r3, [r7, #40]	; 0x28
	float B = 1729279.5 + 367 * (year+2000) + (uint32_t) Y - (uint32_t) V + day;
 800e018:	4bca      	ldr	r3, [pc, #808]	; (800e344 <rtcGetTime+0x45c>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	22fa      	movs	r2, #250	; 0xfa
 800e020:	00d2      	lsls	r2, r2, #3
 800e022:	189a      	adds	r2, r3, r2
 800e024:	0013      	movs	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	189b      	adds	r3, r3, r2
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	1a9b      	subs	r3, r3, r2
 800e02e:	011b      	lsls	r3, r3, #4
 800e030:	1a9b      	subs	r3, r3, r2
 800e032:	0018      	movs	r0, r3
 800e034:	f7f4 ffa8 	bl	8002f88 <__aeabi_i2d>
 800e038:	2280      	movs	r2, #128	; 0x80
 800e03a:	0612      	lsls	r2, r2, #24
 800e03c:	4bc3      	ldr	r3, [pc, #780]	; (800e34c <rtcGetTime+0x464>)
 800e03e:	f7f3 f9e1 	bl	8001404 <__aeabi_dadd>
 800e042:	0002      	movs	r2, r0
 800e044:	000b      	movs	r3, r1
 800e046:	0014      	movs	r4, r2
 800e048:	001d      	movs	r5, r3
 800e04a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e04c:	f7f2 fa9c 	bl	8000588 <__aeabi_f2uiz>
 800e050:	0003      	movs	r3, r0
 800e052:	0018      	movs	r0, r3
 800e054:	f7f4 ffc8 	bl	8002fe8 <__aeabi_ui2d>
 800e058:	0002      	movs	r2, r0
 800e05a:	000b      	movs	r3, r1
 800e05c:	0020      	movs	r0, r4
 800e05e:	0029      	movs	r1, r5
 800e060:	f7f3 f9d0 	bl	8001404 <__aeabi_dadd>
 800e064:	0002      	movs	r2, r0
 800e066:	000b      	movs	r3, r1
 800e068:	0014      	movs	r4, r2
 800e06a:	001d      	movs	r5, r3
 800e06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e06e:	f7f2 fa8b 	bl	8000588 <__aeabi_f2uiz>
 800e072:	0003      	movs	r3, r0
 800e074:	0018      	movs	r0, r3
 800e076:	f7f4 ffb7 	bl	8002fe8 <__aeabi_ui2d>
 800e07a:	0002      	movs	r2, r0
 800e07c:	000b      	movs	r3, r1
 800e07e:	0020      	movs	r0, r4
 800e080:	0029      	movs	r1, r5
 800e082:	f7f4 fb9b 	bl	80027bc <__aeabi_dsub>
 800e086:	0002      	movs	r2, r0
 800e088:	000b      	movs	r3, r1
 800e08a:	0014      	movs	r4, r2
 800e08c:	001d      	movs	r5, r3
 800e08e:	4bab      	ldr	r3, [pc, #684]	; (800e33c <rtcGetTime+0x454>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	0018      	movs	r0, r3
 800e096:	f7f4 ff77 	bl	8002f88 <__aeabi_i2d>
 800e09a:	0002      	movs	r2, r0
 800e09c:	000b      	movs	r3, r1
 800e09e:	0020      	movs	r0, r4
 800e0a0:	0029      	movs	r1, r5
 800e0a2:	f7f3 f9af 	bl	8001404 <__aeabi_dadd>
 800e0a6:	0002      	movs	r2, r0
 800e0a8:	000b      	movs	r3, r1
 800e0aa:	0010      	movs	r0, r2
 800e0ac:	0019      	movs	r1, r3
 800e0ae:	f7f5 f809 	bl	80030c4 <__aeabi_d2f>
 800e0b2:	1c03      	adds	r3, r0, #0
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
	float Q = (A + 83) / 100;
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	3353      	adds	r3, #83	; 0x53
 800e0ba:	2164      	movs	r1, #100	; 0x64
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f7f2 f829 	bl	8000114 <__udivsi3>
 800e0c2:	0003      	movs	r3, r0
 800e0c4:	0018      	movs	r0, r3
 800e0c6:	f7f3 f961 	bl	800138c <__aeabi_ui2f>
 800e0ca:	1c03      	adds	r3, r0, #0
 800e0cc:	623b      	str	r3, [r7, #32]
	uint32_t C = (uint32_t) Q;
 800e0ce:	6a38      	ldr	r0, [r7, #32]
 800e0d0:	f7f2 fa5a 	bl	8000588 <__aeabi_f2uiz>
 800e0d4:	0003      	movs	r3, r0
 800e0d6:	61fb      	str	r3, [r7, #28]
	float W = 3 * (C + 1) / 4;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	0013      	movs	r3, r2
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	189b      	adds	r3, r3, r2
 800e0e2:	089b      	lsrs	r3, r3, #2
 800e0e4:	0018      	movs	r0, r3
 800e0e6:	f7f3 f951 	bl	800138c <__aeabi_ui2f>
 800e0ea:	1c03      	adds	r3, r0, #0
 800e0ec:	61bb      	str	r3, [r7, #24]
	uint32_t E = (uint32_t) W;
 800e0ee:	69b8      	ldr	r0, [r7, #24]
 800e0f0:	f7f2 fa4a 	bl	8000588 <__aeabi_f2uiz>
 800e0f4:	0003      	movs	r3, r0
 800e0f6:	617b      	str	r3, [r7, #20]
	float JD = B + 38 - E; //julian day
 800e0f8:	4995      	ldr	r1, [pc, #596]	; (800e350 <rtcGetTime+0x468>)
 800e0fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0fc:	f7f2 fa98 	bl	8000630 <__aeabi_fadd>
 800e100:	1c03      	adds	r3, r0, #0
 800e102:	1c1c      	adds	r4, r3, #0
 800e104:	6978      	ldr	r0, [r7, #20]
 800e106:	f7f3 f941 	bl	800138c <__aeabi_ui2f>
 800e10a:	1c03      	adds	r3, r0, #0
 800e10c:	1c19      	adds	r1, r3, #0
 800e10e:	1c20      	adds	r0, r4, #0
 800e110:	f7f2 ff0e 	bl	8000f30 <__aeabi_fsub>
 800e114:	1c03      	adds	r3, r0, #0
 800e116:	613b      	str	r3, [r7, #16]
	float MS = 29.5305902778; //average value of synodic month
 800e118:	4b8e      	ldr	r3, [pc, #568]	; (800e354 <rtcGetTime+0x46c>)
 800e11a:	60fb      	str	r3, [r7, #12]
	float phasePrimary = ((JD / MS) - 0.3033);
 800e11c:	68f9      	ldr	r1, [r7, #12]
 800e11e:	6938      	ldr	r0, [r7, #16]
 800e120:	f7f2 fc22 	bl	8000968 <__aeabi_fdiv>
 800e124:	1c03      	adds	r3, r0, #0
 800e126:	1c18      	adds	r0, r3, #0
 800e128:	f7f4 ff84 	bl	8003034 <__aeabi_f2d>
 800e12c:	4a8a      	ldr	r2, [pc, #552]	; (800e358 <rtcGetTime+0x470>)
 800e12e:	4b8b      	ldr	r3, [pc, #556]	; (800e35c <rtcGetTime+0x474>)
 800e130:	f7f4 fb44 	bl	80027bc <__aeabi_dsub>
 800e134:	0002      	movs	r2, r0
 800e136:	000b      	movs	r3, r1
 800e138:	0010      	movs	r0, r2
 800e13a:	0019      	movs	r1, r3
 800e13c:	f7f4 ffc2 	bl	80030c4 <__aeabi_d2f>
 800e140:	1c03      	adds	r3, r0, #0
 800e142:	60bb      	str	r3, [r7, #8]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800e144:	68b8      	ldr	r0, [r7, #8]
 800e146:	f7f2 fa1f 	bl	8000588 <__aeabi_f2uiz>
 800e14a:	0003      	movs	r3, r0
 800e14c:	607b      	str	r3, [r7, #4]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7f3 f91c 	bl	800138c <__aeabi_ui2f>
 800e154:	1c03      	adds	r3, r0, #0
 800e156:	1c19      	adds	r1, r3, #0
 800e158:	68b8      	ldr	r0, [r7, #8]
 800e15a:	f7f2 fee9 	bl	8000f30 <__aeabi_fsub>
 800e15e:	1c03      	adds	r3, r0, #0
 800e160:	497f      	ldr	r1, [pc, #508]	; (800e360 <rtcGetTime+0x478>)
 800e162:	1c18      	adds	r0, r3, #0
 800e164:	f7f2 fdca 	bl	8000cfc <__aeabi_fmul>
 800e168:	1c03      	adds	r3, r0, #0
 800e16a:	603b      	str	r3, [r7, #0]
	moonPhase = (uint32_t) phaseFinal;
 800e16c:	6838      	ldr	r0, [r7, #0]
 800e16e:	f7f2 fa0b 	bl	8000588 <__aeabi_f2uiz>
 800e172:	0002      	movs	r2, r0
 800e174:	4b7b      	ldr	r3, [pc, #492]	; (800e364 <rtcGetTime+0x47c>)
 800e176:	601a      	str	r2, [r3, #0]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (mode == MODE_NORMAL) {
 800e178:	4b7b      	ldr	r3, [pc, #492]	; (800e368 <rtcGetTime+0x480>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d114      	bne.n	800e1ac <rtcGetTime+0x2c4>
		chronoMinutes = 0;
 800e182:	4b7a      	ldr	r3, [pc, #488]	; (800e36c <rtcGetTime+0x484>)
 800e184:	2200      	movs	r2, #0
 800e186:	801a      	strh	r2, [r3, #0]
		chronoSeconds = 0;
 800e188:	4b79      	ldr	r3, [pc, #484]	; (800e370 <rtcGetTime+0x488>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
		chronoDecimals = 0;
 800e18e:	4b79      	ldr	r3, [pc, #484]	; (800e374 <rtcGetTime+0x48c>)
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]
		chronoHours = 0;
 800e194:	4b78      	ldr	r3, [pc, #480]	; (800e378 <rtcGetTime+0x490>)
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
		chronoDay = 0;
 800e19a:	4b78      	ldr	r3, [pc, #480]	; (800e37c <rtcGetTime+0x494>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	701a      	strb	r2, [r3, #0]
		chronoMonth = 0;
 800e1a0:	4b77      	ldr	r3, [pc, #476]	; (800e380 <rtcGetTime+0x498>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	701a      	strb	r2, [r3, #0]
		chronoYear = 0;
 800e1a6:	4b77      	ldr	r3, [pc, #476]	; (800e384 <rtcGetTime+0x49c>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
	}
	if (mode == MODE_CHRONO) {
 800e1ac:	4b6e      	ldr	r3, [pc, #440]	; (800e368 <rtcGetTime+0x480>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d000      	beq.n	800e1b8 <rtcGetTime+0x2d0>
 800e1b6:	e10a      	b.n	800e3ce <rtcGetTime+0x4e6>

		chronoDecimals = 0;
 800e1b8:	4b6e      	ldr	r3, [pc, #440]	; (800e374 <rtcGetTime+0x48c>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
		chronoSeconds = seconds - chronoStartSeconds;
 800e1be:	4b5a      	ldr	r3, [pc, #360]	; (800e328 <rtcGetTime+0x440>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b25b      	sxtb	r3, r3
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	4b70      	ldr	r3, [pc, #448]	; (800e388 <rtcGetTime+0x4a0>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	b25b      	sxtb	r3, r3
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	b25a      	sxtb	r2, r3
 800e1d4:	4b66      	ldr	r3, [pc, #408]	; (800e370 <rtcGetTime+0x488>)
 800e1d6:	701a      	strb	r2, [r3, #0]
		chronoMinutes = minutes - chronoStartMinutes;
 800e1d8:	4b52      	ldr	r3, [pc, #328]	; (800e324 <rtcGetTime+0x43c>)
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	b21b      	sxth	r3, r3
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	4b6a      	ldr	r3, [pc, #424]	; (800e38c <rtcGetTime+0x4a4>)
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	b21a      	sxth	r2, r3
 800e1ee:	4b5f      	ldr	r3, [pc, #380]	; (800e36c <rtcGetTime+0x484>)
 800e1f0:	801a      	strh	r2, [r3, #0]
		chronoHours = hours - chronoStartHours;
 800e1f2:	4b49      	ldr	r3, [pc, #292]	; (800e318 <rtcGetTime+0x430>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	b25b      	sxtb	r3, r3
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	4b65      	ldr	r3, [pc, #404]	; (800e390 <rtcGetTime+0x4a8>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b25b      	sxtb	r3, r3
 800e200:	b2db      	uxtb	r3, r3
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	b2db      	uxtb	r3, r3
 800e206:	b25a      	sxtb	r2, r3
 800e208:	4b5b      	ldr	r3, [pc, #364]	; (800e378 <rtcGetTime+0x490>)
 800e20a:	701a      	strb	r2, [r3, #0]
		chronoDay = day - chronoStartDay;
 800e20c:	4b4b      	ldr	r3, [pc, #300]	; (800e33c <rtcGetTime+0x454>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	b2da      	uxtb	r2, r3
 800e212:	4b60      	ldr	r3, [pc, #384]	; (800e394 <rtcGetTime+0x4ac>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	b25b      	sxtb	r3, r3
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	b25a      	sxtb	r2, r3
 800e220:	4b56      	ldr	r3, [pc, #344]	; (800e37c <rtcGetTime+0x494>)
 800e222:	701a      	strb	r2, [r3, #0]
		chronoMonth = month - chronoStartMonth;
 800e224:	4b46      	ldr	r3, [pc, #280]	; (800e340 <rtcGetTime+0x458>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b5b      	ldr	r3, [pc, #364]	; (800e398 <rtcGetTime+0x4b0>)
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	b25b      	sxtb	r3, r3
 800e230:	b2db      	uxtb	r3, r3
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	b2db      	uxtb	r3, r3
 800e236:	b25a      	sxtb	r2, r3
 800e238:	4b51      	ldr	r3, [pc, #324]	; (800e380 <rtcGetTime+0x498>)
 800e23a:	701a      	strb	r2, [r3, #0]

		if (chronoDecimals < 0) {
 800e23c:	4b4d      	ldr	r3, [pc, #308]	; (800e374 <rtcGetTime+0x48c>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da0e      	bge.n	800e262 <rtcGetTime+0x37a>
			chronoSeconds--;
 800e244:	4b4a      	ldr	r3, [pc, #296]	; (800e370 <rtcGetTime+0x488>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	b25b      	sxtb	r3, r3
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	3b01      	subs	r3, #1
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	b25a      	sxtb	r2, r3
 800e252:	4b47      	ldr	r3, [pc, #284]	; (800e370 <rtcGetTime+0x488>)
 800e254:	701a      	strb	r2, [r3, #0]
			chronoDecimals = chronoDecimals + 10;
 800e256:	4b47      	ldr	r3, [pc, #284]	; (800e374 <rtcGetTime+0x48c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	330a      	adds	r3, #10
 800e25c:	001a      	movs	r2, r3
 800e25e:	4b45      	ldr	r3, [pc, #276]	; (800e374 <rtcGetTime+0x48c>)
 800e260:	601a      	str	r2, [r3, #0]
		}

		if (chronoSeconds < 0) {
 800e262:	4b43      	ldr	r3, [pc, #268]	; (800e370 <rtcGetTime+0x488>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	b25b      	sxtb	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	da11      	bge.n	800e290 <rtcGetTime+0x3a8>
			chronoMinutes--;
 800e26c:	4b3f      	ldr	r3, [pc, #252]	; (800e36c <rtcGetTime+0x484>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	b21b      	sxth	r3, r3
 800e272:	b29b      	uxth	r3, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	b29b      	uxth	r3, r3
 800e278:	b21a      	sxth	r2, r3
 800e27a:	4b3c      	ldr	r3, [pc, #240]	; (800e36c <rtcGetTime+0x484>)
 800e27c:	801a      	strh	r2, [r3, #0]
			chronoSeconds = chronoSeconds + 60;
 800e27e:	4b3c      	ldr	r3, [pc, #240]	; (800e370 <rtcGetTime+0x488>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	b25b      	sxtb	r3, r3
 800e284:	b2db      	uxtb	r3, r3
 800e286:	333c      	adds	r3, #60	; 0x3c
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	b25a      	sxtb	r2, r3
 800e28c:	4b38      	ldr	r3, [pc, #224]	; (800e370 <rtcGetTime+0x488>)
 800e28e:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMinutes < 0) {
 800e290:	4b36      	ldr	r3, [pc, #216]	; (800e36c <rtcGetTime+0x484>)
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	b21b      	sxth	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	da11      	bge.n	800e2be <rtcGetTime+0x3d6>
			chronoHours--;
 800e29a:	4b37      	ldr	r3, [pc, #220]	; (800e378 <rtcGetTime+0x490>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	b25b      	sxtb	r3, r3
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	b25a      	sxtb	r2, r3
 800e2a8:	4b33      	ldr	r3, [pc, #204]	; (800e378 <rtcGetTime+0x490>)
 800e2aa:	701a      	strb	r2, [r3, #0]
			chronoMinutes = chronoMinutes + 60;
 800e2ac:	4b2f      	ldr	r3, [pc, #188]	; (800e36c <rtcGetTime+0x484>)
 800e2ae:	881b      	ldrh	r3, [r3, #0]
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	333c      	adds	r3, #60	; 0x3c
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	b21a      	sxth	r2, r3
 800e2ba:	4b2c      	ldr	r3, [pc, #176]	; (800e36c <rtcGetTime+0x484>)
 800e2bc:	801a      	strh	r2, [r3, #0]
		}

		if (chronoHours < 0) {
 800e2be:	4b2e      	ldr	r3, [pc, #184]	; (800e378 <rtcGetTime+0x490>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da11      	bge.n	800e2ec <rtcGetTime+0x404>
			chronoDay--;
 800e2c8:	4b2c      	ldr	r3, [pc, #176]	; (800e37c <rtcGetTime+0x494>)
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	b25b      	sxtb	r3, r3
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	b25a      	sxtb	r2, r3
 800e2d6:	4b29      	ldr	r3, [pc, #164]	; (800e37c <rtcGetTime+0x494>)
 800e2d8:	701a      	strb	r2, [r3, #0]
			chronoHours = chronoHours + 24;
 800e2da:	4b27      	ldr	r3, [pc, #156]	; (800e378 <rtcGetTime+0x490>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	b25b      	sxtb	r3, r3
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	3318      	adds	r3, #24
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	b25a      	sxtb	r2, r3
 800e2e8:	4b23      	ldr	r3, [pc, #140]	; (800e378 <rtcGetTime+0x490>)
 800e2ea:	701a      	strb	r2, [r3, #0]
		}

		if (chronoDay < 0) {
 800e2ec:	4b23      	ldr	r3, [pc, #140]	; (800e37c <rtcGetTime+0x494>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b25b      	sxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da54      	bge.n	800e3a0 <rtcGetTime+0x4b8>
			chronoMonth--;
 800e2f6:	4b22      	ldr	r3, [pc, #136]	; (800e380 <rtcGetTime+0x498>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	b25b      	sxtb	r3, r3
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	3b01      	subs	r3, #1
 800e300:	b2db      	uxtb	r3, r3
 800e302:	b25a      	sxtb	r2, r3
 800e304:	4b1e      	ldr	r3, [pc, #120]	; (800e380 <rtcGetTime+0x498>)
 800e306:	701a      	strb	r2, [r3, #0]
			chronoDay = chronoDay + 30;
 800e308:	4b1c      	ldr	r3, [pc, #112]	; (800e37c <rtcGetTime+0x494>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	b25b      	sxtb	r3, r3
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	331e      	adds	r3, #30
 800e312:	b2db      	uxtb	r3, r3
 800e314:	b25a      	sxtb	r2, r3
 800e316:	e041      	b.n	800e39c <rtcGetTime+0x4b4>
 800e318:	2000049b 	.word	0x2000049b
 800e31c:	2000013b 	.word	0x2000013b
 800e320:	2000019c 	.word	0x2000019c
 800e324:	20000486 	.word	0x20000486
 800e328:	2000043e 	.word	0x2000043e
 800e32c:	0000639c 	.word	0x0000639c
 800e330:	000009f6 	.word	0x000009f6
 800e334:	2000048c 	.word	0x2000048c
 800e338:	200003dc 	.word	0x200003dc
 800e33c:	2000044c 	.word	0x2000044c
 800e340:	20000231 	.word	0x20000231
 800e344:	20000448 	.word	0x20000448
 800e348:	00001a3c 	.word	0x00001a3c
 800e34c:	413a62ff 	.word	0x413a62ff
 800e350:	42180000 	.word	0x42180000
 800e354:	41ec3ea6 	.word	0x41ec3ea6
 800e358:	67381d7e 	.word	0x67381d7e
 800e35c:	3fd36944 	.word	0x3fd36944
 800e360:	42c80000 	.word	0x42c80000
 800e364:	2000023c 	.word	0x2000023c
 800e368:	20000334 	.word	0x20000334
 800e36c:	20000484 	.word	0x20000484
 800e370:	2000044a 	.word	0x2000044a
 800e374:	20000144 	.word	0x20000144
 800e378:	20000235 	.word	0x20000235
 800e37c:	20000472 	.word	0x20000472
 800e380:	200001f4 	.word	0x200001f4
 800e384:	20000338 	.word	0x20000338
 800e388:	20000136 	.word	0x20000136
 800e38c:	20000226 	.word	0x20000226
 800e390:	200003e8 	.word	0x200003e8
 800e394:	2000044b 	.word	0x2000044b
 800e398:	200001ba 	.word	0x200001ba
 800e39c:	4b0e      	ldr	r3, [pc, #56]	; (800e3d8 <rtcGetTime+0x4f0>)
 800e39e:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMonth < 0) {
 800e3a0:	4b0e      	ldr	r3, [pc, #56]	; (800e3dc <rtcGetTime+0x4f4>)
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	b25b      	sxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da11      	bge.n	800e3ce <rtcGetTime+0x4e6>
			chronoYear--;
 800e3aa:	4b0d      	ldr	r3, [pc, #52]	; (800e3e0 <rtcGetTime+0x4f8>)
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	b25a      	sxtb	r2, r3
 800e3b8:	4b09      	ldr	r3, [pc, #36]	; (800e3e0 <rtcGetTime+0x4f8>)
 800e3ba:	701a      	strb	r2, [r3, #0]
			chronoMonth = chronoMonth + 12;
 800e3bc:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <rtcGetTime+0x4f4>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	b25b      	sxtb	r3, r3
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	330c      	adds	r3, #12
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	b25a      	sxtb	r2, r3
 800e3ca:	4b04      	ldr	r3, [pc, #16]	; (800e3dc <rtcGetTime+0x4f4>)
 800e3cc:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	b00e      	add	sp, #56	; 0x38
 800e3d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	20000472 	.word	0x20000472
 800e3dc:	200001f4 	.word	0x200001f4
 800e3e0:	20000338 	.word	0x20000338

0800e3e4 <rtcSetTime>:

void rtcSetTime() {
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 800e3e8:	4b17      	ldr	r3, [pc, #92]	; (800e448 <rtcSetTime+0x64>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	b25b      	sxtb	r3, r3
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	4b16      	ldr	r3, [pc, #88]	; (800e44c <rtcSetTime+0x68>)
 800e3f2:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 800e3f4:	4b16      	ldr	r3, [pc, #88]	; (800e450 <rtcSetTime+0x6c>)
 800e3f6:	881b      	ldrh	r3, [r3, #0]
 800e3f8:	b21b      	sxth	r3, r3
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	4b13      	ldr	r3, [pc, #76]	; (800e44c <rtcSetTime+0x68>)
 800e3fe:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 800e400:	4b14      	ldr	r3, [pc, #80]	; (800e454 <rtcSetTime+0x70>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	b25b      	sxtb	r3, r3
 800e406:	b2da      	uxtb	r2, r3
 800e408:	4b10      	ldr	r3, [pc, #64]	; (800e44c <rtcSetTime+0x68>)
 800e40a:	709a      	strb	r2, [r3, #2]
	sDate.Date = day;
 800e40c:	4b12      	ldr	r3, [pc, #72]	; (800e458 <rtcSetTime+0x74>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	b2da      	uxtb	r2, r3
 800e412:	4b12      	ldr	r3, [pc, #72]	; (800e45c <rtcSetTime+0x78>)
 800e414:	709a      	strb	r2, [r3, #2]
	sDate.Month = month;
 800e416:	4b12      	ldr	r3, [pc, #72]	; (800e460 <rtcSetTime+0x7c>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <rtcSetTime+0x78>)
 800e41e:	705a      	strb	r2, [r3, #1]
	sDate.Year = year;
 800e420:	4b10      	ldr	r3, [pc, #64]	; (800e464 <rtcSetTime+0x80>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	b2da      	uxtb	r2, r3
 800e426:	4b0d      	ldr	r3, [pc, #52]	; (800e45c <rtcSetTime+0x78>)
 800e428:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800e42a:	4908      	ldr	r1, [pc, #32]	; (800e44c <rtcSetTime+0x68>)
 800e42c:	4b0e      	ldr	r3, [pc, #56]	; (800e468 <rtcSetTime+0x84>)
 800e42e:	2200      	movs	r2, #0
 800e430:	0018      	movs	r0, r3
 800e432:	f7fa fb4d 	bl	8008ad0 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800e436:	4909      	ldr	r1, [pc, #36]	; (800e45c <rtcSetTime+0x78>)
 800e438:	4b0b      	ldr	r3, [pc, #44]	; (800e468 <rtcSetTime+0x84>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	0018      	movs	r0, r3
 800e43e:	f7fa fc4b 	bl	8008cd8 <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	2000049b 	.word	0x2000049b
 800e44c:	2000019c 	.word	0x2000019c
 800e450:	20000486 	.word	0x20000486
 800e454:	2000043e 	.word	0x2000043e
 800e458:	2000044c 	.word	0x2000044c
 800e45c:	200003dc 	.word	0x200003dc
 800e460:	20000231 	.word	0x20000231
 800e464:	20000448 	.word	0x20000448
 800e468:	2000051c 	.word	0x2000051c

0800e46c <rtcResetChrono>:

void rtcResetChrono(void) {
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0

	chronoDecimals = 0;
 800e470:	4b0d      	ldr	r3, [pc, #52]	; (800e4a8 <rtcResetChrono+0x3c>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
	chronoMinutes = 0;
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <rtcResetChrono+0x40>)
 800e478:	2200      	movs	r2, #0
 800e47a:	801a      	strh	r2, [r3, #0]
	chronoSeconds = 0;
 800e47c:	4b0c      	ldr	r3, [pc, #48]	; (800e4b0 <rtcResetChrono+0x44>)
 800e47e:	2200      	movs	r2, #0
 800e480:	701a      	strb	r2, [r3, #0]
	chronoHours = 0;
 800e482:	4b0c      	ldr	r3, [pc, #48]	; (800e4b4 <rtcResetChrono+0x48>)
 800e484:	2200      	movs	r2, #0
 800e486:	701a      	strb	r2, [r3, #0]

	chronoStartSeconds = 0;
 800e488:	4b0b      	ldr	r3, [pc, #44]	; (800e4b8 <rtcResetChrono+0x4c>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	701a      	strb	r2, [r3, #0]
	chronoStartMinutes = 0;
 800e48e:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <rtcResetChrono+0x50>)
 800e490:	2200      	movs	r2, #0
 800e492:	801a      	strh	r2, [r3, #0]
	chronoStartDecimals = 0;
 800e494:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <rtcResetChrono+0x54>)
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
	chronoStartHours = 0;
 800e49a:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <rtcResetChrono+0x58>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]

}
 800e4a0:	46c0      	nop			; (mov r8, r8)
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	20000144 	.word	0x20000144
 800e4ac:	20000484 	.word	0x20000484
 800e4b0:	2000044a 	.word	0x2000044a
 800e4b4:	20000235 	.word	0x20000235
 800e4b8:	20000136 	.word	0x20000136
 800e4bc:	20000226 	.word	0x20000226
 800e4c0:	2000012c 	.word	0x2000012c
 800e4c4:	200003e8 	.word	0x200003e8

0800e4c8 <float2Text>:
int32_t offsetMagnetometerX = 0;
int32_t offsetMagnetometerY = 0;

float gainVoltagePassive = 1.06;

void float2Text(char *str, float input) {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]

	int ones = (uint16_t) input;
 800e4d2:	6838      	ldr	r0, [r7, #0]
 800e4d4:	f7f2 f858 	bl	8000588 <__aeabi_f2uiz>
 800e4d8:	0003      	movs	r3, r0
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	617b      	str	r3, [r7, #20]
	float hundreadths = input - ones;
 800e4de:	6978      	ldr	r0, [r7, #20]
 800e4e0:	f7f2 ff0e 	bl	8001300 <__aeabi_i2f>
 800e4e4:	1c03      	adds	r3, r0, #0
 800e4e6:	1c19      	adds	r1, r3, #0
 800e4e8:	6838      	ldr	r0, [r7, #0]
 800e4ea:	f7f2 fd21 	bl	8000f30 <__aeabi_fsub>
 800e4ee:	1c03      	adds	r3, r0, #0
 800e4f0:	613b      	str	r3, [r7, #16]
	int hundreadths2 = hundreadths * 100;
 800e4f2:	490a      	ldr	r1, [pc, #40]	; (800e51c <float2Text+0x54>)
 800e4f4:	6938      	ldr	r0, [r7, #16]
 800e4f6:	f7f2 fc01 	bl	8000cfc <__aeabi_fmul>
 800e4fa:	1c03      	adds	r3, r0, #0
 800e4fc:	1c18      	adds	r0, r3, #0
 800e4fe:	f7f2 fedf 	bl	80012c0 <__aeabi_f2iz>
 800e502:	0003      	movs	r3, r0
 800e504:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d.%d", ones, hundreadths2);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	4905      	ldr	r1, [pc, #20]	; (800e520 <float2Text+0x58>)
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f002 fe0d 	bl	801112c <siprintf>

}
 800e512:	46c0      	nop			; (mov r8, r8)
 800e514:	46bd      	mov	sp, r7
 800e516:	b006      	add	sp, #24
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	42c80000 	.word	0x42c80000
 800e520:	08013b68 	.word	0x08013b68

0800e524 <sensingInit>:

void sensingInit() {
 800e524:	b590      	push	{r4, r7, lr}
 800e526:	b08f      	sub	sp, #60	; 0x3c
 800e528:	af04      	add	r7, sp, #16

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 800e52a:	497d      	ldr	r1, [pc, #500]	; (800e720 <sensingInit+0x1fc>)
 800e52c:	4b7d      	ldr	r3, [pc, #500]	; (800e724 <sensingInit+0x200>)
 800e52e:	2203      	movs	r2, #3
 800e530:	0018      	movs	r0, r3
 800e532:	f7f7 fd81 	bl	8006038 <HAL_ADC_Start_DMA>
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								REDING CALIBRATION DATA

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_T1, 1, dig_T, 6,
 800e536:	4b7c      	ldr	r3, [pc, #496]	; (800e728 <sensingInit+0x204>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	487c      	ldr	r0, [pc, #496]	; (800e72c <sensingInit+0x208>)
 800e53c:	9302      	str	r3, [sp, #8]
 800e53e:	2306      	movs	r3, #6
 800e540:	9301      	str	r3, [sp, #4]
 800e542:	2420      	movs	r4, #32
 800e544:	193b      	adds	r3, r7, r4
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	2301      	movs	r3, #1
 800e54a:	2288      	movs	r2, #136	; 0x88
 800e54c:	21ee      	movs	r1, #238	; 0xee
 800e54e:	f7f8 ffc5 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 800e552:	0021      	movs	r1, r4
 800e554:	187b      	adds	r3, r7, r1
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	b21a      	sxth	r2, r3
 800e55a:	187b      	adds	r3, r7, r1
 800e55c:	785b      	ldrb	r3, [r3, #1]
 800e55e:	021b      	lsls	r3, r3, #8
 800e560:	b21b      	sxth	r3, r3
 800e562:	4313      	orrs	r3, r2
 800e564:	b21b      	sxth	r3, r3
 800e566:	b29a      	uxth	r2, r3
 800e568:	4b71      	ldr	r3, [pc, #452]	; (800e730 <sensingInit+0x20c>)
 800e56a:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 800e56c:	187b      	adds	r3, r7, r1
 800e56e:	789b      	ldrb	r3, [r3, #2]
 800e570:	b21a      	sxth	r2, r3
 800e572:	187b      	adds	r3, r7, r1
 800e574:	78db      	ldrb	r3, [r3, #3]
 800e576:	021b      	lsls	r3, r3, #8
 800e578:	b21b      	sxth	r3, r3
 800e57a:	4313      	orrs	r3, r2
 800e57c:	b21a      	sxth	r2, r3
 800e57e:	4b6d      	ldr	r3, [pc, #436]	; (800e734 <sensingInit+0x210>)
 800e580:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 800e582:	187b      	adds	r3, r7, r1
 800e584:	791b      	ldrb	r3, [r3, #4]
 800e586:	b21a      	sxth	r2, r3
 800e588:	187b      	adds	r3, r7, r1
 800e58a:	791b      	ldrb	r3, [r3, #4]
 800e58c:	021b      	lsls	r3, r3, #8
 800e58e:	b21b      	sxth	r3, r3
 800e590:	4313      	orrs	r3, r2
 800e592:	b21a      	sxth	r2, r3
 800e594:	4b68      	ldr	r3, [pc, #416]	; (800e738 <sensingInit+0x214>)
 800e596:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_P1, 1, dig_P, 18,
 800e598:	4b63      	ldr	r3, [pc, #396]	; (800e728 <sensingInit+0x204>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	4863      	ldr	r0, [pc, #396]	; (800e72c <sensingInit+0x208>)
 800e59e:	9302      	str	r3, [sp, #8]
 800e5a0:	2312      	movs	r3, #18
 800e5a2:	9301      	str	r3, [sp, #4]
 800e5a4:	240c      	movs	r4, #12
 800e5a6:	193b      	adds	r3, r7, r4
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	228e      	movs	r2, #142	; 0x8e
 800e5ae:	21ee      	movs	r1, #238	; 0xee
 800e5b0:	f7f8 ff94 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800e5b4:	0021      	movs	r1, r4
 800e5b6:	187b      	adds	r3, r7, r1
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	b21a      	sxth	r2, r3
 800e5bc:	187b      	adds	r3, r7, r1
 800e5be:	785b      	ldrb	r3, [r3, #1]
 800e5c0:	021b      	lsls	r3, r3, #8
 800e5c2:	b21b      	sxth	r3, r3
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	b21b      	sxth	r3, r3
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	4b5c      	ldr	r3, [pc, #368]	; (800e73c <sensingInit+0x218>)
 800e5cc:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 800e5ce:	187b      	adds	r3, r7, r1
 800e5d0:	789b      	ldrb	r3, [r3, #2]
 800e5d2:	b21a      	sxth	r2, r3
 800e5d4:	187b      	adds	r3, r7, r1
 800e5d6:	78db      	ldrb	r3, [r3, #3]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	b21b      	sxth	r3, r3
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	b21a      	sxth	r2, r3
 800e5e0:	4b57      	ldr	r3, [pc, #348]	; (800e740 <sensingInit+0x21c>)
 800e5e2:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800e5e4:	187b      	adds	r3, r7, r1
 800e5e6:	791b      	ldrb	r3, [r3, #4]
 800e5e8:	b21a      	sxth	r2, r3
 800e5ea:	187b      	adds	r3, r7, r1
 800e5ec:	795b      	ldrb	r3, [r3, #5]
 800e5ee:	021b      	lsls	r3, r3, #8
 800e5f0:	b21b      	sxth	r3, r3
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	b21a      	sxth	r2, r3
 800e5f6:	4b53      	ldr	r3, [pc, #332]	; (800e744 <sensingInit+0x220>)
 800e5f8:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 800e5fa:	187b      	adds	r3, r7, r1
 800e5fc:	799b      	ldrb	r3, [r3, #6]
 800e5fe:	b21a      	sxth	r2, r3
 800e600:	187b      	adds	r3, r7, r1
 800e602:	79db      	ldrb	r3, [r3, #7]
 800e604:	021b      	lsls	r3, r3, #8
 800e606:	b21b      	sxth	r3, r3
 800e608:	4313      	orrs	r3, r2
 800e60a:	b21a      	sxth	r2, r3
 800e60c:	4b4e      	ldr	r3, [pc, #312]	; (800e748 <sensingInit+0x224>)
 800e60e:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800e610:	187b      	adds	r3, r7, r1
 800e612:	7a1b      	ldrb	r3, [r3, #8]
 800e614:	b21a      	sxth	r2, r3
 800e616:	187b      	adds	r3, r7, r1
 800e618:	7a5b      	ldrb	r3, [r3, #9]
 800e61a:	021b      	lsls	r3, r3, #8
 800e61c:	b21b      	sxth	r3, r3
 800e61e:	4313      	orrs	r3, r2
 800e620:	b21a      	sxth	r2, r3
 800e622:	4b4a      	ldr	r3, [pc, #296]	; (800e74c <sensingInit+0x228>)
 800e624:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800e626:	187b      	adds	r3, r7, r1
 800e628:	7a9b      	ldrb	r3, [r3, #10]
 800e62a:	b21a      	sxth	r2, r3
 800e62c:	187b      	adds	r3, r7, r1
 800e62e:	7adb      	ldrb	r3, [r3, #11]
 800e630:	021b      	lsls	r3, r3, #8
 800e632:	b21b      	sxth	r3, r3
 800e634:	4313      	orrs	r3, r2
 800e636:	b21a      	sxth	r2, r3
 800e638:	4b45      	ldr	r3, [pc, #276]	; (800e750 <sensingInit+0x22c>)
 800e63a:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 800e63c:	187b      	adds	r3, r7, r1
 800e63e:	7b1b      	ldrb	r3, [r3, #12]
 800e640:	b21a      	sxth	r2, r3
 800e642:	187b      	adds	r3, r7, r1
 800e644:	7b5b      	ldrb	r3, [r3, #13]
 800e646:	021b      	lsls	r3, r3, #8
 800e648:	b21b      	sxth	r3, r3
 800e64a:	4313      	orrs	r3, r2
 800e64c:	b21a      	sxth	r2, r3
 800e64e:	4b41      	ldr	r3, [pc, #260]	; (800e754 <sensingInit+0x230>)
 800e650:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800e652:	187b      	adds	r3, r7, r1
 800e654:	7b9b      	ldrb	r3, [r3, #14]
 800e656:	b21a      	sxth	r2, r3
 800e658:	187b      	adds	r3, r7, r1
 800e65a:	7bdb      	ldrb	r3, [r3, #15]
 800e65c:	021b      	lsls	r3, r3, #8
 800e65e:	b21b      	sxth	r3, r3
 800e660:	4313      	orrs	r3, r2
 800e662:	b21a      	sxth	r2, r3
 800e664:	4b3c      	ldr	r3, [pc, #240]	; (800e758 <sensingInit+0x234>)
 800e666:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800e668:	187b      	adds	r3, r7, r1
 800e66a:	7c1b      	ldrb	r3, [r3, #16]
 800e66c:	b21a      	sxth	r2, r3
 800e66e:	187b      	adds	r3, r7, r1
 800e670:	7c5b      	ldrb	r3, [r3, #17]
 800e672:	021b      	lsls	r3, r3, #8
 800e674:	b21b      	sxth	r3, r3
 800e676:	4313      	orrs	r3, r2
 800e678:	b21a      	sxth	r2, r3
 800e67a:	4b38      	ldr	r3, [pc, #224]	; (800e75c <sensingInit+0x238>)
 800e67c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H1, 1, &dig_H_1, 1,
 800e67e:	4b2a      	ldr	r3, [pc, #168]	; (800e728 <sensingInit+0x204>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	482a      	ldr	r0, [pc, #168]	; (800e72c <sensingInit+0x208>)
 800e684:	9302      	str	r3, [sp, #8]
 800e686:	2301      	movs	r3, #1
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	240b      	movs	r4, #11
 800e68c:	193b      	adds	r3, r7, r4
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	2301      	movs	r3, #1
 800e692:	22a1      	movs	r2, #161	; 0xa1
 800e694:	21ee      	movs	r1, #238	; 0xee
 800e696:	f7f8 ff21 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H1 = ((unsigned char) dig_H_1);
 800e69a:	193b      	adds	r3, r7, r4
 800e69c:	781a      	ldrb	r2, [r3, #0]
 800e69e:	4b30      	ldr	r3, [pc, #192]	; (800e760 <sensingInit+0x23c>)
 800e6a0:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H2, 1, dig_H_2_6, 7,
 800e6a2:	4b21      	ldr	r3, [pc, #132]	; (800e728 <sensingInit+0x204>)
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	4821      	ldr	r0, [pc, #132]	; (800e72c <sensingInit+0x208>)
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	2307      	movs	r3, #7
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	1d3b      	adds	r3, r7, #4
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	22e1      	movs	r2, #225	; 0xe1
 800e6b6:	21ee      	movs	r1, #238	; 0xee
 800e6b8:	f7f8 ff10 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800e6bc:	1d3b      	adds	r3, r7, #4
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	b21a      	sxth	r2, r3
 800e6c2:	1d3b      	adds	r3, r7, #4
 800e6c4:	785b      	ldrb	r3, [r3, #1]
 800e6c6:	021b      	lsls	r3, r3, #8
 800e6c8:	b21b      	sxth	r3, r3
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	b21a      	sxth	r2, r3
 800e6ce:	4b25      	ldr	r3, [pc, #148]	; (800e764 <sensingInit+0x240>)
 800e6d0:	801a      	strh	r2, [r3, #0]
	dig_H3 = ((unsigned char) dig_H_2_6[2]);
 800e6d2:	1d3b      	adds	r3, r7, #4
 800e6d4:	789a      	ldrb	r2, [r3, #2]
 800e6d6:	4b24      	ldr	r3, [pc, #144]	; (800e768 <sensingInit+0x244>)
 800e6d8:	701a      	strb	r2, [r3, #0]

	dig_H4 =
			(((int16_t) dig_H_2_6[3]) << 4 | (((int16_t) dig_H_2_6[4]) & 0x0f));
 800e6da:	1d3b      	adds	r3, r7, #4
 800e6dc:	78db      	ldrb	r3, [r3, #3]
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	b21a      	sxth	r2, r3
 800e6e2:	1d3b      	adds	r3, r7, #4
 800e6e4:	791b      	ldrb	r3, [r3, #4]
 800e6e6:	b21b      	sxth	r3, r3
 800e6e8:	210f      	movs	r1, #15
 800e6ea:	400b      	ands	r3, r1
 800e6ec:	b21b      	sxth	r3, r3
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	b21a      	sxth	r2, r3
	dig_H4 =
 800e6f2:	4b1e      	ldr	r3, [pc, #120]	; (800e76c <sensingInit+0x248>)
 800e6f4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4 | ((int16_t) dig_H_2_6[5]) << 4);
 800e6f6:	1d3b      	adds	r3, r7, #4
 800e6f8:	791b      	ldrb	r3, [r3, #4]
 800e6fa:	091b      	lsrs	r3, r3, #4
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	b21a      	sxth	r2, r3
 800e700:	1d3b      	adds	r3, r7, #4
 800e702:	795b      	ldrb	r3, [r3, #5]
 800e704:	011b      	lsls	r3, r3, #4
 800e706:	b21b      	sxth	r3, r3
 800e708:	4313      	orrs	r3, r2
 800e70a:	b21a      	sxth	r2, r3
 800e70c:	4b18      	ldr	r3, [pc, #96]	; (800e770 <sensingInit+0x24c>)
 800e70e:	801a      	strh	r2, [r3, #0]
	dig_H6 = ((unsigned char) dig_H_2_6[6]);
 800e710:	1d3b      	adds	r3, r7, #4
 800e712:	799a      	ldrb	r2, [r3, #6]
 800e714:	4b17      	ldr	r3, [pc, #92]	; (800e774 <sensingInit+0x250>)
 800e716:	701a      	strb	r2, [r3, #0]

}
 800e718:	46c0      	nop			; (mov r8, r8)
 800e71a:	46bd      	mov	sp, r7
 800e71c:	b00b      	add	sp, #44	; 0x2c
 800e71e:	bd90      	pop	{r4, r7, pc}
 800e720:	200001b4 	.word	0x200001b4
 800e724:	200002cc 	.word	0x200002cc
 800e728:	2000003a 	.word	0x2000003a
 800e72c:	20000150 	.word	0x20000150
 800e730:	20000134 	.word	0x20000134
 800e734:	200001f8 	.word	0x200001f8
 800e738:	2000047e 	.word	0x2000047e
 800e73c:	20000442 	.word	0x20000442
 800e740:	200002c0 	.word	0x200002c0
 800e744:	20000444 	.word	0x20000444
 800e748:	200002c4 	.word	0x200002c4
 800e74c:	200003ca 	.word	0x200003ca
 800e750:	20000488 	.word	0x20000488
 800e754:	20000130 	.word	0x20000130
 800e758:	20000446 	.word	0x20000446
 800e75c:	2000047c 	.word	0x2000047c
 800e760:	20000233 	.word	0x20000233
 800e764:	20000498 	.word	0x20000498
 800e768:	20000471 	.word	0x20000471
 800e76c:	200001f6 	.word	0x200001f6
 800e770:	20000456 	.word	0x20000456
 800e774:	20000332 	.word	0x20000332

0800e778 <sensingRead>:

void sensingRead(void) {
 800e778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77a:	b095      	sub	sp, #84	; 0x54
 800e77c:	af04      	add	r7, sp, #16

	//								ADC READINGS

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 800e77e:	49b1      	ldr	r1, [pc, #708]	; (800ea44 <sensingRead+0x2cc>)
 800e780:	4bb1      	ldr	r3, [pc, #708]	; (800ea48 <sensingRead+0x2d0>)
 800e782:	2203      	movs	r2, #3
 800e784:	0018      	movs	r0, r3
 800e786:	f7f7 fc57 	bl	8006038 <HAL_ADC_Start_DMA>
	float voltagePassiveRaw;
	float voltageDropRaw;
	float currentRaw;
	float resistanceRaw;

	voltageBatteryRaw = ((3300 * adcReading[0]) / 4095) * 2;
 800e78a:	4bae      	ldr	r3, [pc, #696]	; (800ea44 <sensingRead+0x2cc>)
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	001a      	movs	r2, r3
 800e792:	4bae      	ldr	r3, [pc, #696]	; (800ea4c <sensingRead+0x2d4>)
 800e794:	4353      	muls	r3, r2
 800e796:	49ae      	ldr	r1, [pc, #696]	; (800ea50 <sensingRead+0x2d8>)
 800e798:	0018      	movs	r0, r3
 800e79a:	f7f1 fd45 	bl	8000228 <__divsi3>
 800e79e:	0003      	movs	r3, r0
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	637b      	str	r3, [r7, #52]	; 0x34

	if (voltageBatteryRaw < batteryLevels[0])
 800e7a4:	4bab      	ldr	r3, [pc, #684]	; (800ea54 <sensingRead+0x2dc>)
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	001a      	movs	r2, r3
 800e7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d202      	bcs.n	800e7b6 <sensingRead+0x3e>
		batteryState = 8;
 800e7b0:	4ba9      	ldr	r3, [pc, #676]	; (800ea58 <sensingRead+0x2e0>)
 800e7b2:	2208      	movs	r2, #8
 800e7b4:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[0]
 800e7b6:	4ba7      	ldr	r3, [pc, #668]	; (800ea54 <sensingRead+0x2dc>)
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	001a      	movs	r2, r3
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d308      	bcc.n	800e7d4 <sensingRead+0x5c>
			&& voltageBatteryRaw < batteryLevels[1])
 800e7c2:	4ba4      	ldr	r3, [pc, #656]	; (800ea54 <sensingRead+0x2dc>)
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	001a      	movs	r2, r3
 800e7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d202      	bcs.n	800e7d4 <sensingRead+0x5c>
		batteryState = 7;
 800e7ce:	4ba2      	ldr	r3, [pc, #648]	; (800ea58 <sensingRead+0x2e0>)
 800e7d0:	2207      	movs	r2, #7
 800e7d2:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[1]
 800e7d4:	4b9f      	ldr	r3, [pc, #636]	; (800ea54 <sensingRead+0x2dc>)
 800e7d6:	885b      	ldrh	r3, [r3, #2]
 800e7d8:	001a      	movs	r2, r3
 800e7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d308      	bcc.n	800e7f2 <sensingRead+0x7a>
			&& voltageBatteryRaw < batteryLevels[2])
 800e7e0:	4b9c      	ldr	r3, [pc, #624]	; (800ea54 <sensingRead+0x2dc>)
 800e7e2:	889b      	ldrh	r3, [r3, #4]
 800e7e4:	001a      	movs	r2, r3
 800e7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d202      	bcs.n	800e7f2 <sensingRead+0x7a>
		batteryState = 6;
 800e7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ea58 <sensingRead+0x2e0>)
 800e7ee:	2206      	movs	r2, #6
 800e7f0:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[2]
 800e7f2:	4b98      	ldr	r3, [pc, #608]	; (800ea54 <sensingRead+0x2dc>)
 800e7f4:	889b      	ldrh	r3, [r3, #4]
 800e7f6:	001a      	movs	r2, r3
 800e7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d308      	bcc.n	800e810 <sensingRead+0x98>
			&& voltageBatteryRaw < batteryLevels[3])
 800e7fe:	4b95      	ldr	r3, [pc, #596]	; (800ea54 <sensingRead+0x2dc>)
 800e800:	88db      	ldrh	r3, [r3, #6]
 800e802:	001a      	movs	r2, r3
 800e804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e806:	4293      	cmp	r3, r2
 800e808:	d202      	bcs.n	800e810 <sensingRead+0x98>
		batteryState = 5;
 800e80a:	4b93      	ldr	r3, [pc, #588]	; (800ea58 <sensingRead+0x2e0>)
 800e80c:	2205      	movs	r2, #5
 800e80e:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[3]
 800e810:	4b90      	ldr	r3, [pc, #576]	; (800ea54 <sensingRead+0x2dc>)
 800e812:	88db      	ldrh	r3, [r3, #6]
 800e814:	001a      	movs	r2, r3
 800e816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e818:	4293      	cmp	r3, r2
 800e81a:	d308      	bcc.n	800e82e <sensingRead+0xb6>
			&& voltageBatteryRaw < batteryLevels[4])
 800e81c:	4b8d      	ldr	r3, [pc, #564]	; (800ea54 <sensingRead+0x2dc>)
 800e81e:	891b      	ldrh	r3, [r3, #8]
 800e820:	001a      	movs	r2, r3
 800e822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e824:	4293      	cmp	r3, r2
 800e826:	d202      	bcs.n	800e82e <sensingRead+0xb6>
		batteryState = 4;
 800e828:	4b8b      	ldr	r3, [pc, #556]	; (800ea58 <sensingRead+0x2e0>)
 800e82a:	2204      	movs	r2, #4
 800e82c:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[4]
 800e82e:	4b89      	ldr	r3, [pc, #548]	; (800ea54 <sensingRead+0x2dc>)
 800e830:	891b      	ldrh	r3, [r3, #8]
 800e832:	001a      	movs	r2, r3
 800e834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e836:	4293      	cmp	r3, r2
 800e838:	d308      	bcc.n	800e84c <sensingRead+0xd4>
			&& voltageBatteryRaw < batteryLevels[5])
 800e83a:	4b86      	ldr	r3, [pc, #536]	; (800ea54 <sensingRead+0x2dc>)
 800e83c:	895b      	ldrh	r3, [r3, #10]
 800e83e:	001a      	movs	r2, r3
 800e840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e842:	4293      	cmp	r3, r2
 800e844:	d202      	bcs.n	800e84c <sensingRead+0xd4>
		batteryState = 3;
 800e846:	4b84      	ldr	r3, [pc, #528]	; (800ea58 <sensingRead+0x2e0>)
 800e848:	2203      	movs	r2, #3
 800e84a:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[5]
 800e84c:	4b81      	ldr	r3, [pc, #516]	; (800ea54 <sensingRead+0x2dc>)
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	001a      	movs	r2, r3
 800e852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e854:	4293      	cmp	r3, r2
 800e856:	d308      	bcc.n	800e86a <sensingRead+0xf2>
			&& voltageBatteryRaw < batteryLevels[6])
 800e858:	4b7e      	ldr	r3, [pc, #504]	; (800ea54 <sensingRead+0x2dc>)
 800e85a:	899b      	ldrh	r3, [r3, #12]
 800e85c:	001a      	movs	r2, r3
 800e85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e860:	4293      	cmp	r3, r2
 800e862:	d202      	bcs.n	800e86a <sensingRead+0xf2>
		batteryState = 2;
 800e864:	4b7c      	ldr	r3, [pc, #496]	; (800ea58 <sensingRead+0x2e0>)
 800e866:	2202      	movs	r2, #2
 800e868:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[6])
 800e86a:	4b7a      	ldr	r3, [pc, #488]	; (800ea54 <sensingRead+0x2dc>)
 800e86c:	899b      	ldrh	r3, [r3, #12]
 800e86e:	001a      	movs	r2, r3
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	4293      	cmp	r3, r2
 800e874:	d302      	bcc.n	800e87c <sensingRead+0x104>
		batteryState = 1;
 800e876:	4b78      	ldr	r3, [pc, #480]	; (800ea58 <sensingRead+0x2e0>)
 800e878:	2201      	movs	r2, #1
 800e87a:	701a      	strb	r2, [r3, #0]

	memset(voltagePassive, 0, 5);
 800e87c:	4b77      	ldr	r3, [pc, #476]	; (800ea5c <sensingRead+0x2e4>)
 800e87e:	2205      	movs	r2, #5
 800e880:	2100      	movs	r1, #0
 800e882:	0018      	movs	r0, r3
 800e884:	f002 fafa 	bl	8010e7c <memset>
	if (adcReading[1] > 100) {
 800e888:	4b6e      	ldr	r3, [pc, #440]	; (800ea44 <sensingRead+0x2cc>)
 800e88a:	885b      	ldrh	r3, [r3, #2]
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	2b64      	cmp	r3, #100	; 0x64
 800e890:	d940      	bls.n	800e914 <sensingRead+0x19c>
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] +offsetADC)) / 4095) * 40)) * gainVoltagePassive;
 800e892:	4b6c      	ldr	r3, [pc, #432]	; (800ea44 <sensingRead+0x2cc>)
 800e894:	885b      	ldrh	r3, [r3, #2]
 800e896:	b29b      	uxth	r3, r3
 800e898:	0018      	movs	r0, r3
 800e89a:	f7f2 fd77 	bl	800138c <__aeabi_ui2f>
 800e89e:	1c06      	adds	r6, r0, #0
 800e8a0:	4b6f      	ldr	r3, [pc, #444]	; (800ea60 <sensingRead+0x2e8>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	0018      	movs	r0, r3
 800e8a6:	f7f2 fd2b 	bl	8001300 <__aeabi_i2f>
 800e8aa:	1c03      	adds	r3, r0, #0
 800e8ac:	1c19      	adds	r1, r3, #0
 800e8ae:	1c30      	adds	r0, r6, #0
 800e8b0:	f7f1 febe 	bl	8000630 <__aeabi_fadd>
 800e8b4:	1c03      	adds	r3, r0, #0
 800e8b6:	1c18      	adds	r0, r3, #0
 800e8b8:	f7f4 fbbc 	bl	8003034 <__aeabi_f2d>
 800e8bc:	4a69      	ldr	r2, [pc, #420]	; (800ea64 <sensingRead+0x2ec>)
 800e8be:	4b6a      	ldr	r3, [pc, #424]	; (800ea68 <sensingRead+0x2f0>)
 800e8c0:	f7f3 fd10 	bl	80022e4 <__aeabi_dmul>
 800e8c4:	0002      	movs	r2, r0
 800e8c6:	000b      	movs	r3, r1
 800e8c8:	0010      	movs	r0, r2
 800e8ca:	0019      	movs	r1, r3
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4b67      	ldr	r3, [pc, #412]	; (800ea6c <sensingRead+0x2f4>)
 800e8d0:	f7f3 f902 	bl	8001ad8 <__aeabi_ddiv>
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	000b      	movs	r3, r1
 800e8d8:	0010      	movs	r0, r2
 800e8da:	0019      	movs	r1, r3
 800e8dc:	2200      	movs	r2, #0
 800e8de:	4b64      	ldr	r3, [pc, #400]	; (800ea70 <sensingRead+0x2f8>)
 800e8e0:	f7f3 fd00 	bl	80022e4 <__aeabi_dmul>
 800e8e4:	0002      	movs	r2, r0
 800e8e6:	000b      	movs	r3, r1
 800e8e8:	603a      	str	r2, [r7, #0]
 800e8ea:	607b      	str	r3, [r7, #4]
 800e8ec:	4b61      	ldr	r3, [pc, #388]	; (800ea74 <sensingRead+0x2fc>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	1c18      	adds	r0, r3, #0
 800e8f2:	f7f4 fb9f 	bl	8003034 <__aeabi_f2d>
 800e8f6:	0002      	movs	r2, r0
 800e8f8:	000b      	movs	r3, r1
 800e8fa:	6838      	ldr	r0, [r7, #0]
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	f7f3 fcf1 	bl	80022e4 <__aeabi_dmul>
 800e902:	0002      	movs	r2, r0
 800e904:	000b      	movs	r3, r1
 800e906:	0010      	movs	r0, r2
 800e908:	0019      	movs	r1, r3
 800e90a:	f7f4 fbdb 	bl	80030c4 <__aeabi_d2f>
 800e90e:	1c03      	adds	r3, r0, #0
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e912:	e001      	b.n	800e918 <sensingRead+0x1a0>
	} else {
		voltagePassiveRaw = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (voltagePassiveRaw == 0) {
 800e918:	2100      	movs	r1, #0
 800e91a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e91c:	f7f1 fdba 	bl	8000494 <__aeabi_fcmpeq>
 800e920:	1e03      	subs	r3, r0, #0
 800e922:	d006      	beq.n	800e932 <sensingRead+0x1ba>
		sprintf(voltagePassive, "--");
 800e924:	4a54      	ldr	r2, [pc, #336]	; (800ea78 <sensingRead+0x300>)
 800e926:	4b4d      	ldr	r3, [pc, #308]	; (800ea5c <sensingRead+0x2e4>)
 800e928:	0011      	movs	r1, r2
 800e92a:	0018      	movs	r0, r3
 800e92c:	f002 fbfe 	bl	801112c <siprintf>
 800e930:	e005      	b.n	800e93e <sensingRead+0x1c6>
	} else {
		float2Text(voltagePassive, voltagePassiveRaw);
 800e932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e934:	4b49      	ldr	r3, [pc, #292]	; (800ea5c <sensingRead+0x2e4>)
 800e936:	1c11      	adds	r1, r2, #0
 800e938:	0018      	movs	r0, r3
 800e93a:	f7ff fdc5 	bl	800e4c8 <float2Text>
	}

	memset(voltageDrop, 0, 5);
 800e93e:	4b4f      	ldr	r3, [pc, #316]	; (800ea7c <sensingRead+0x304>)
 800e940:	2205      	movs	r2, #5
 800e942:	2100      	movs	r1, #0
 800e944:	0018      	movs	r0, r3
 800e946:	f002 fa99 	bl	8010e7c <memset>
	if (adcReading[2] < 3200) {
 800e94a:	4b3e      	ldr	r3, [pc, #248]	; (800ea44 <sensingRead+0x2cc>)
 800e94c:	889b      	ldrh	r3, [r3, #4]
 800e94e:	b29a      	uxth	r2, r3
 800e950:	23c8      	movs	r3, #200	; 0xc8
 800e952:	011b      	lsls	r3, r3, #4
 800e954:	429a      	cmp	r2, r3
 800e956:	d229      	bcs.n	800e9ac <sensingRead+0x234>
		voltageDropRaw = ((3.3 * ((float) adcReading[2] +offsetADC)) / 4095);
 800e958:	4b3a      	ldr	r3, [pc, #232]	; (800ea44 <sensingRead+0x2cc>)
 800e95a:	889b      	ldrh	r3, [r3, #4]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	0018      	movs	r0, r3
 800e960:	f7f2 fd14 	bl	800138c <__aeabi_ui2f>
 800e964:	1c06      	adds	r6, r0, #0
 800e966:	4b3e      	ldr	r3, [pc, #248]	; (800ea60 <sensingRead+0x2e8>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	0018      	movs	r0, r3
 800e96c:	f7f2 fcc8 	bl	8001300 <__aeabi_i2f>
 800e970:	1c03      	adds	r3, r0, #0
 800e972:	1c19      	adds	r1, r3, #0
 800e974:	1c30      	adds	r0, r6, #0
 800e976:	f7f1 fe5b 	bl	8000630 <__aeabi_fadd>
 800e97a:	1c03      	adds	r3, r0, #0
 800e97c:	1c18      	adds	r0, r3, #0
 800e97e:	f7f4 fb59 	bl	8003034 <__aeabi_f2d>
 800e982:	4a38      	ldr	r2, [pc, #224]	; (800ea64 <sensingRead+0x2ec>)
 800e984:	4b38      	ldr	r3, [pc, #224]	; (800ea68 <sensingRead+0x2f0>)
 800e986:	f7f3 fcad 	bl	80022e4 <__aeabi_dmul>
 800e98a:	0002      	movs	r2, r0
 800e98c:	000b      	movs	r3, r1
 800e98e:	0010      	movs	r0, r2
 800e990:	0019      	movs	r1, r3
 800e992:	2200      	movs	r2, #0
 800e994:	4b35      	ldr	r3, [pc, #212]	; (800ea6c <sensingRead+0x2f4>)
 800e996:	f7f3 f89f 	bl	8001ad8 <__aeabi_ddiv>
 800e99a:	0002      	movs	r2, r0
 800e99c:	000b      	movs	r3, r1
 800e99e:	0010      	movs	r0, r2
 800e9a0:	0019      	movs	r1, r3
 800e9a2:	f7f4 fb8f 	bl	80030c4 <__aeabi_d2f>
 800e9a6:	1c03      	adds	r3, r0, #0
 800e9a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9aa:	e001      	b.n	800e9b0 <sensingRead+0x238>

//		voltageDropRaw = voltageDropRaw - 0.59; //offset correction

	} else {
		voltageDropRaw = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (voltageDropRaw == 0) {
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9b4:	f7f1 fd6e 	bl	8000494 <__aeabi_fcmpeq>
 800e9b8:	1e03      	subs	r3, r0, #0
 800e9ba:	d006      	beq.n	800e9ca <sensingRead+0x252>
		sprintf(voltageDrop, "--");
 800e9bc:	4a2e      	ldr	r2, [pc, #184]	; (800ea78 <sensingRead+0x300>)
 800e9be:	4b2f      	ldr	r3, [pc, #188]	; (800ea7c <sensingRead+0x304>)
 800e9c0:	0011      	movs	r1, r2
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	f002 fbb2 	bl	801112c <siprintf>
 800e9c8:	e005      	b.n	800e9d6 <sensingRead+0x25e>
	} else {
		float2Text(voltageDrop, voltageDropRaw);
 800e9ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ea7c <sensingRead+0x304>)
 800e9ce:	1c11      	adds	r1, r2, #0
 800e9d0:	0018      	movs	r0, r3
 800e9d2:	f7ff fd79 	bl	800e4c8 <float2Text>
	}

	memset(resistance, 0, 5);
 800e9d6:	4b2a      	ldr	r3, [pc, #168]	; (800ea80 <sensingRead+0x308>)
 800e9d8:	2205      	movs	r2, #5
 800e9da:	2100      	movs	r1, #0
 800e9dc:	0018      	movs	r0, r3
 800e9de:	f002 fa4d 	bl	8010e7c <memset>
	currentRaw = (3.3 - voltageDropRaw) / 10000;
 800e9e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9e4:	f7f4 fb26 	bl	8003034 <__aeabi_f2d>
 800e9e8:	0002      	movs	r2, r0
 800e9ea:	000b      	movs	r3, r1
 800e9ec:	481d      	ldr	r0, [pc, #116]	; (800ea64 <sensingRead+0x2ec>)
 800e9ee:	491e      	ldr	r1, [pc, #120]	; (800ea68 <sensingRead+0x2f0>)
 800e9f0:	f7f3 fee4 	bl	80027bc <__aeabi_dsub>
 800e9f4:	0002      	movs	r2, r0
 800e9f6:	000b      	movs	r3, r1
 800e9f8:	0010      	movs	r0, r2
 800e9fa:	0019      	movs	r1, r3
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	4b21      	ldr	r3, [pc, #132]	; (800ea84 <sensingRead+0x30c>)
 800ea00:	f7f3 f86a 	bl	8001ad8 <__aeabi_ddiv>
 800ea04:	0002      	movs	r2, r0
 800ea06:	000b      	movs	r3, r1
 800ea08:	0010      	movs	r0, r2
 800ea0a:	0019      	movs	r1, r3
 800ea0c:	f7f4 fb5a 	bl	80030c4 <__aeabi_d2f>
 800ea10:	1c03      	adds	r3, r0, #0
 800ea12:	633b      	str	r3, [r7, #48]	; 0x30
	resistanceRaw = (voltageDropRaw / currentRaw)/1000;
 800ea14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea18:	f7f1 ffa6 	bl	8000968 <__aeabi_fdiv>
 800ea1c:	1c03      	adds	r3, r0, #0
 800ea1e:	491a      	ldr	r1, [pc, #104]	; (800ea88 <sensingRead+0x310>)
 800ea20:	1c18      	adds	r0, r3, #0
 800ea22:	f7f1 ffa1 	bl	8000968 <__aeabi_fdiv>
 800ea26:	1c03      	adds	r3, r0, #0
 800ea28:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (voltageDropRaw == 0) {
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea2e:	f7f1 fd31 	bl	8000494 <__aeabi_fcmpeq>
 800ea32:	1e03      	subs	r3, r0, #0
 800ea34:	d02a      	beq.n	800ea8c <sensingRead+0x314>
		sprintf(resistance, "--");
 800ea36:	4a10      	ldr	r2, [pc, #64]	; (800ea78 <sensingRead+0x300>)
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <sensingRead+0x308>)
 800ea3a:	0011      	movs	r1, r2
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f002 fb75 	bl	801112c <siprintf>
 800ea42:	e029      	b.n	800ea98 <sensingRead+0x320>
 800ea44:	200001b4 	.word	0x200001b4
 800ea48:	200002cc 	.word	0x200002cc
 800ea4c:	00000ce4 	.word	0x00000ce4
 800ea50:	00000fff 	.word	0x00000fff
 800ea54:	2000002c 	.word	0x2000002c
 800ea58:	20000228 	.word	0x20000228
 800ea5c:	2000033c 	.word	0x2000033c
 800ea60:	2000003c 	.word	0x2000003c
 800ea64:	66666666 	.word	0x66666666
 800ea68:	400a6666 	.word	0x400a6666
 800ea6c:	40affe00 	.word	0x40affe00
 800ea70:	40440000 	.word	0x40440000
 800ea74:	20000040 	.word	0x20000040
 800ea78:	08013b70 	.word	0x08013b70
 800ea7c:	200003c4 	.word	0x200003c4
 800ea80:	20000450 	.word	0x20000450
 800ea84:	40c38800 	.word	0x40c38800
 800ea88:	447a0000 	.word	0x447a0000
	} else {
		float2Text(resistance, resistanceRaw);
 800ea8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea8e:	4bf9      	ldr	r3, [pc, #996]	; (800ee74 <sensingRead+0x6fc>)
 800ea90:	1c11      	adds	r1, r2, #0
 800ea92:	0018      	movs	r0, r3
 800ea94:	f7ff fd18 	bl	800e4c8 <float2Text>
	}

//								BME280 READINGS

//I2C read data
	uint8_t temperatureMSB = 0;
 800ea98:	2311      	movs	r3, #17
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	4694      	mov	ip, r2
 800ea9e:	44bc      	add	ip, r7
 800eaa0:	4463      	add	r3, ip
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 800eaa6:	2310      	movs	r3, #16
 800eaa8:	2208      	movs	r2, #8
 800eaaa:	4694      	mov	ip, r2
 800eaac:	44bc      	add	ip, r7
 800eaae:	4463      	add	r3, ip
 800eab0:	2200      	movs	r2, #0
 800eab2:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 800eab4:	230f      	movs	r3, #15
 800eab6:	2208      	movs	r2, #8
 800eab8:	4694      	mov	ip, r2
 800eaba:	44bc      	add	ip, r7
 800eabc:	4463      	add	r3, ip
 800eabe:	2200      	movs	r2, #0
 800eac0:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 800eac2:	230e      	movs	r3, #14
 800eac4:	2208      	movs	r2, #8
 800eac6:	4694      	mov	ip, r2
 800eac8:	44bc      	add	ip, r7
 800eaca:	4463      	add	r3, ip
 800eacc:	2200      	movs	r2, #0
 800eace:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 800ead0:	230d      	movs	r3, #13
 800ead2:	2208      	movs	r2, #8
 800ead4:	4694      	mov	ip, r2
 800ead6:	44bc      	add	ip, r7
 800ead8:	4463      	add	r3, ip
 800eada:	2200      	movs	r2, #0
 800eadc:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 800eade:	230c      	movs	r3, #12
 800eae0:	2208      	movs	r2, #8
 800eae2:	4694      	mov	ip, r2
 800eae4:	44bc      	add	ip, r7
 800eae6:	4463      	add	r3, ip
 800eae8:	2200      	movs	r2, #0
 800eaea:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 800eaec:	230b      	movs	r3, #11
 800eaee:	2208      	movs	r2, #8
 800eaf0:	4694      	mov	ip, r2
 800eaf2:	44bc      	add	ip, r7
 800eaf4:	4463      	add	r3, ip
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 800eafa:	230a      	movs	r3, #10
 800eafc:	2208      	movs	r2, #8
 800eafe:	4694      	mov	ip, r2
 800eb00:	44bc      	add	ip, r7
 800eb02:	4463      	add	r3, ip
 800eb04:	2200      	movs	r2, #0
 800eb06:	701a      	strb	r2, [r3, #0]

	//adc data
	BME280_S32_t temperatureADC = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	62bb      	str	r3, [r7, #40]	; 0x28
	BME280_S32_t pressureADC = 0;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24
	BME280_S32_t humidityADC = 0;
 800eb10:	2300      	movs	r3, #0
 800eb12:	623b      	str	r3, [r7, #32]

	//configure oversampling for hum
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_HUM, 1, &ctrlHum, 1,
 800eb14:	48d8      	ldr	r0, [pc, #864]	; (800ee78 <sensingRead+0x700>)
 800eb16:	2332      	movs	r3, #50	; 0x32
 800eb18:	9302      	str	r3, [sp, #8]
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	4bd7      	ldr	r3, [pc, #860]	; (800ee7c <sensingRead+0x704>)
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	2301      	movs	r3, #1
 800eb24:	22f2      	movs	r2, #242	; 0xf2
 800eb26:	21ee      	movs	r1, #238	; 0xee
 800eb28:	f7f8 fbaa 	bl	8007280 <HAL_I2C_Mem_Write>
 800eb2c:	1e03      	subs	r3, r0, #0
 800eb2e:	d001      	beq.n	800eb34 <sensingRead+0x3bc>
			50) != HAL_OK) {
		Error_Handler();
 800eb30:	f001 fe30 	bl	8010794 <Error_Handler>
	};

	//configure oversampling for press, temp
	//configure mode as force
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_MEAS, 1, &ctrlMeas,
 800eb34:	48d0      	ldr	r0, [pc, #832]	; (800ee78 <sensingRead+0x700>)
 800eb36:	2332      	movs	r3, #50	; 0x32
 800eb38:	9302      	str	r3, [sp, #8]
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	4bd0      	ldr	r3, [pc, #832]	; (800ee80 <sensingRead+0x708>)
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	2301      	movs	r3, #1
 800eb44:	22f4      	movs	r2, #244	; 0xf4
 800eb46:	21ee      	movs	r1, #238	; 0xee
 800eb48:	f7f8 fb9a 	bl	8007280 <HAL_I2C_Mem_Write>
 800eb4c:	1e03      	subs	r3, r0, #0
 800eb4e:	d001      	beq.n	800eb54 <sensingRead+0x3dc>
			1, 50) != HAL_OK) {
		Error_Handler();
 800eb50:	f001 fe20 	bl	8010794 <Error_Handler>
		;
	}

//wait for end
	HAL_Delay(70);
 800eb54:	2046      	movs	r0, #70	; 0x46
 800eb56:	f7f6 ff11 	bl	800597c <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_MSB, 1, &humidityMSB, 1,
 800eb5a:	4bca      	ldr	r3, [pc, #808]	; (800ee84 <sensingRead+0x70c>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	48c6      	ldr	r0, [pc, #792]	; (800ee78 <sensingRead+0x700>)
 800eb60:	9302      	str	r3, [sp, #8]
 800eb62:	2301      	movs	r3, #1
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	260b      	movs	r6, #11
 800eb68:	2308      	movs	r3, #8
 800eb6a:	18fa      	adds	r2, r7, r3
 800eb6c:	1993      	adds	r3, r2, r6
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	2301      	movs	r3, #1
 800eb72:	22fd      	movs	r2, #253	; 0xfd
 800eb74:	21ee      	movs	r1, #238	; 0xee
 800eb76:	f7f8 fcb1 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_LSB, 1, &humidityLSB, 1,
 800eb7a:	4bc2      	ldr	r3, [pc, #776]	; (800ee84 <sensingRead+0x70c>)
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	48be      	ldr	r0, [pc, #760]	; (800ee78 <sensingRead+0x700>)
 800eb80:	9302      	str	r3, [sp, #8]
 800eb82:	2301      	movs	r3, #1
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	230a      	movs	r3, #10
 800eb88:	2208      	movs	r2, #8
 800eb8a:	4694      	mov	ip, r2
 800eb8c:	44bc      	add	ip, r7
 800eb8e:	4463      	add	r3, ip
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	2301      	movs	r3, #1
 800eb94:	22fe      	movs	r2, #254	; 0xfe
 800eb96:	21ee      	movs	r1, #238	; 0xee
 800eb98:	f7f8 fca0 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 800eb9c:	2308      	movs	r3, #8
 800eb9e:	18fa      	adds	r2, r7, r3
 800eba0:	1993      	adds	r3, r2, r6
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	220a      	movs	r2, #10
 800eba8:	2108      	movs	r1, #8
 800ebaa:	468c      	mov	ip, r1
 800ebac:	44bc      	add	ip, r7
 800ebae:	4462      	add	r2, ip
 800ebb0:	7812      	ldrb	r2, [r2, #0]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	623b      	str	r3, [r7, #32]

	humidityValue = BME280_compensate_H_int32(humidityADC) / 1024;
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	0018      	movs	r0, r3
 800ebba:	f000 fc35 	bl	800f428 <BME280_compensate_H_int32>
 800ebbe:	0003      	movs	r3, r0
 800ebc0:	0a9a      	lsrs	r2, r3, #10
 800ebc2:	4bb1      	ldr	r3, [pc, #708]	; (800ee88 <sensingRead+0x710>)
 800ebc4:	601a      	str	r2, [r3, #0]

	//TEMPERATURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_MSB, 1, &temperatureMSB,
 800ebc6:	4baf      	ldr	r3, [pc, #700]	; (800ee84 <sensingRead+0x70c>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	48ab      	ldr	r0, [pc, #684]	; (800ee78 <sensingRead+0x700>)
 800ebcc:	9302      	str	r3, [sp, #8]
 800ebce:	2301      	movs	r3, #1
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	2611      	movs	r6, #17
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	18fa      	adds	r2, r7, r3
 800ebd8:	1993      	adds	r3, r2, r6
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	2301      	movs	r3, #1
 800ebde:	22fa      	movs	r2, #250	; 0xfa
 800ebe0:	21ee      	movs	r1, #238	; 0xee
 800ebe2:	f7f8 fc7b 	bl	80074dc <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_LSB, 1, &temperatureLSB,
 800ebe6:	4ba7      	ldr	r3, [pc, #668]	; (800ee84 <sensingRead+0x70c>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	48a3      	ldr	r0, [pc, #652]	; (800ee78 <sensingRead+0x700>)
 800ebec:	9302      	str	r3, [sp, #8]
 800ebee:	2301      	movs	r3, #1
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	2310      	movs	r3, #16
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	4694      	mov	ip, r2
 800ebf8:	44bc      	add	ip, r7
 800ebfa:	4463      	add	r3, ip
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	2301      	movs	r3, #1
 800ec00:	22fb      	movs	r2, #251	; 0xfb
 800ec02:	21ee      	movs	r1, #238	; 0xee
 800ec04:	f7f8 fc6a 	bl	80074dc <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_XLSB, 1, &temperatureXLSB,
 800ec08:	4b9e      	ldr	r3, [pc, #632]	; (800ee84 <sensingRead+0x70c>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	489a      	ldr	r0, [pc, #616]	; (800ee78 <sensingRead+0x700>)
 800ec0e:	9302      	str	r3, [sp, #8]
 800ec10:	2301      	movs	r3, #1
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	220f      	movs	r2, #15
 800ec16:	2308      	movs	r3, #8
 800ec18:	18f9      	adds	r1, r7, r3
 800ec1a:	188b      	adds	r3, r1, r2
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	2301      	movs	r3, #1
 800ec20:	22fc      	movs	r2, #252	; 0xfc
 800ec22:	21ee      	movs	r1, #238	; 0xee
 800ec24:	f7f8 fc5a 	bl	80074dc <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 800ec28:	2308      	movs	r3, #8
 800ec2a:	18fa      	adds	r2, r7, r3
 800ec2c:	1993      	adds	r3, r2, r6
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	031a      	lsls	r2, r3, #12
 800ec32:	2310      	movs	r3, #16
 800ec34:	2108      	movs	r1, #8
 800ec36:	468c      	mov	ip, r1
 800ec38:	44bc      	add	ip, r7
 800ec3a:	4463      	add	r3, ip
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	011b      	lsls	r3, r3, #4
 800ec40:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 800ec42:	220f      	movs	r2, #15
 800ec44:	2108      	movs	r1, #8
 800ec46:	468c      	mov	ip, r1
 800ec48:	44bc      	add	ip, r7
 800ec4a:	4462      	add	r2, ip
 800ec4c:	7812      	ldrb	r2, [r2, #0]
 800ec4e:	0912      	lsrs	r2, r2, #4
 800ec50:	b2d2      	uxtb	r2, r2
	temperatureADC =
 800ec52:	4313      	orrs	r3, r2
 800ec54:	62bb      	str	r3, [r7, #40]	; 0x28

	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f000 f9fd 	bl	800f058 <BME280_compensate_T_int32>
 800ec5e:	0003      	movs	r3, r0
 800ec60:	2164      	movs	r1, #100	; 0x64
 800ec62:	0018      	movs	r0, r3
 800ec64:	f7f1 fae0 	bl	8000228 <__divsi3>
 800ec68:	0003      	movs	r3, r0
 800ec6a:	001a      	movs	r2, r3
			+ temperatureCompensation;
 800ec6c:	4b87      	ldr	r3, [pc, #540]	; (800ee8c <sensingRead+0x714>)
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	18d2      	adds	r2, r2, r3
	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800ec74:	4b86      	ldr	r3, [pc, #536]	; (800ee90 <sensingRead+0x718>)
 800ec76:	601a      	str	r2, [r3, #0]

	//PRESSURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_MSB, 1, &pressureMSB, 1,
 800ec78:	4b82      	ldr	r3, [pc, #520]	; (800ee84 <sensingRead+0x70c>)
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	487e      	ldr	r0, [pc, #504]	; (800ee78 <sensingRead+0x700>)
 800ec7e:	9302      	str	r3, [sp, #8]
 800ec80:	2301      	movs	r3, #1
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	260e      	movs	r6, #14
 800ec86:	2308      	movs	r3, #8
 800ec88:	18fa      	adds	r2, r7, r3
 800ec8a:	1993      	adds	r3, r2, r6
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	2301      	movs	r3, #1
 800ec90:	22f7      	movs	r2, #247	; 0xf7
 800ec92:	21ee      	movs	r1, #238	; 0xee
 800ec94:	f7f8 fc22 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_LSB, 1, &pressureLSB, 1,
 800ec98:	4b7a      	ldr	r3, [pc, #488]	; (800ee84 <sensingRead+0x70c>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	4876      	ldr	r0, [pc, #472]	; (800ee78 <sensingRead+0x700>)
 800ec9e:	9302      	str	r3, [sp, #8]
 800eca0:	2301      	movs	r3, #1
 800eca2:	9301      	str	r3, [sp, #4]
 800eca4:	230d      	movs	r3, #13
 800eca6:	2208      	movs	r2, #8
 800eca8:	4694      	mov	ip, r2
 800ecaa:	44bc      	add	ip, r7
 800ecac:	4463      	add	r3, ip
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	22f8      	movs	r2, #248	; 0xf8
 800ecb4:	21ee      	movs	r1, #238	; 0xee
 800ecb6:	f7f8 fc11 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_XLSB, 1, &pressureXLSB,
 800ecba:	4b72      	ldr	r3, [pc, #456]	; (800ee84 <sensingRead+0x70c>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	486e      	ldr	r0, [pc, #440]	; (800ee78 <sensingRead+0x700>)
 800ecc0:	9302      	str	r3, [sp, #8]
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	220c      	movs	r2, #12
 800ecc8:	2308      	movs	r3, #8
 800ecca:	18f9      	adds	r1, r7, r3
 800eccc:	188b      	adds	r3, r1, r2
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	22f9      	movs	r2, #249	; 0xf9
 800ecd4:	21ee      	movs	r1, #238	; 0xee
 800ecd6:	f7f8 fc01 	bl	80074dc <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800ecda:	2308      	movs	r3, #8
 800ecdc:	18fb      	adds	r3, r7, r3
 800ecde:	199b      	adds	r3, r3, r6
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	031a      	lsls	r2, r3, #12
 800ece4:	230d      	movs	r3, #13
 800ece6:	2108      	movs	r1, #8
 800ece8:	468c      	mov	ip, r1
 800ecea:	44bc      	add	ip, r7
 800ecec:	4463      	add	r3, ip
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	011b      	lsls	r3, r3, #4
 800ecf2:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 800ecf4:	220c      	movs	r2, #12
 800ecf6:	2108      	movs	r1, #8
 800ecf8:	468c      	mov	ip, r1
 800ecfa:	44bc      	add	ip, r7
 800ecfc:	4462      	add	r2, ip
 800ecfe:	7812      	ldrb	r2, [r2, #0]
 800ed00:	0912      	lsrs	r2, r2, #4
 800ed02:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800ed04:	4313      	orrs	r3, r2
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24

	pressureValue = BME280_compensate_P_int64(pressureADC) / 256;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f000 f9e0 	bl	800f0d0 <BME280_compensate_P_int64>
 800ed10:	0003      	movs	r3, r0
 800ed12:	0a1a      	lsrs	r2, r3, #8
 800ed14:	4b5f      	ldr	r3, [pc, #380]	; (800ee94 <sensingRead+0x71c>)
 800ed16:	601a      	str	r2, [r3, #0]
	 * R- gas constant[J/(mol*K)]
	 * T- air temperature[K]
	 *
	 */

	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800ed18:	4b5d      	ldr	r3, [pc, #372]	; (800ee90 <sensingRead+0x718>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	0018      	movs	r0, r3
 800ed1e:	f7f2 faef 	bl	8001300 <__aeabi_i2f>
 800ed22:	1c03      	adds	r3, r0, #0
 800ed24:	1c18      	adds	r0, r3, #0
 800ed26:	f7f4 f985 	bl	8003034 <__aeabi_f2d>
 800ed2a:	4a5b      	ldr	r2, [pc, #364]	; (800ee98 <sensingRead+0x720>)
 800ed2c:	4b5b      	ldr	r3, [pc, #364]	; (800ee9c <sensingRead+0x724>)
 800ed2e:	f7f2 fb69 	bl	8001404 <__aeabi_dadd>
 800ed32:	0002      	movs	r2, r0
 800ed34:	000b      	movs	r3, r1
 800ed36:	0010      	movs	r0, r2
 800ed38:	0019      	movs	r1, r3
 800ed3a:	4a59      	ldr	r2, [pc, #356]	; (800eea0 <sensingRead+0x728>)
 800ed3c:	4b59      	ldr	r3, [pc, #356]	; (800eea4 <sensingRead+0x72c>)
 800ed3e:	f7f3 fad1 	bl	80022e4 <__aeabi_dmul>
 800ed42:	0002      	movs	r2, r0
 800ed44:	000b      	movs	r3, r1
 800ed46:	0010      	movs	r0, r2
 800ed48:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800ed4a:	4a57      	ldr	r2, [pc, #348]	; (800eea8 <sensingRead+0x730>)
 800ed4c:	4b57      	ldr	r3, [pc, #348]	; (800eeac <sensingRead+0x734>)
 800ed4e:	f7f2 fec3 	bl	8001ad8 <__aeabi_ddiv>
 800ed52:	0002      	movs	r2, r0
 800ed54:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800ed56:	0011      	movs	r1, r2
 800ed58:	000c      	movs	r4, r1
 800ed5a:	2180      	movs	r1, #128	; 0x80
 800ed5c:	0609      	lsls	r1, r1, #24
 800ed5e:	4059      	eors	r1, r3
 800ed60:	000d      	movs	r5, r1
			* log((float) pressureValue / ((float) pressureReference * 100));
 800ed62:	4b4c      	ldr	r3, [pc, #304]	; (800ee94 <sensingRead+0x71c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	0018      	movs	r0, r3
 800ed68:	f7f2 fb10 	bl	800138c <__aeabi_ui2f>
 800ed6c:	1c06      	adds	r6, r0, #0
 800ed6e:	4b50      	ldr	r3, [pc, #320]	; (800eeb0 <sensingRead+0x738>)
 800ed70:	881b      	ldrh	r3, [r3, #0]
 800ed72:	b21b      	sxth	r3, r3
 800ed74:	0018      	movs	r0, r3
 800ed76:	f7f2 fac3 	bl	8001300 <__aeabi_i2f>
 800ed7a:	1c03      	adds	r3, r0, #0
 800ed7c:	494d      	ldr	r1, [pc, #308]	; (800eeb4 <sensingRead+0x73c>)
 800ed7e:	1c18      	adds	r0, r3, #0
 800ed80:	f7f1 ffbc 	bl	8000cfc <__aeabi_fmul>
 800ed84:	1c03      	adds	r3, r0, #0
 800ed86:	1c19      	adds	r1, r3, #0
 800ed88:	1c30      	adds	r0, r6, #0
 800ed8a:	f7f1 fded 	bl	8000968 <__aeabi_fdiv>
 800ed8e:	1c03      	adds	r3, r0, #0
 800ed90:	1c18      	adds	r0, r3, #0
 800ed92:	f7f4 f94f 	bl	8003034 <__aeabi_f2d>
 800ed96:	0002      	movs	r2, r0
 800ed98:	000b      	movs	r3, r1
 800ed9a:	0010      	movs	r0, r2
 800ed9c:	0019      	movs	r1, r3
 800ed9e:	f003 fae3 	bl	8012368 <log>
 800eda2:	0002      	movs	r2, r0
 800eda4:	000b      	movs	r3, r1
 800eda6:	0020      	movs	r0, r4
 800eda8:	0029      	movs	r1, r5
 800edaa:	f7f3 fa9b 	bl	80022e4 <__aeabi_dmul>
 800edae:	0002      	movs	r2, r0
 800edb0:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800edb2:	0010      	movs	r0, r2
 800edb4:	0019      	movs	r1, r3
 800edb6:	f7f4 f8b1 	bl	8002f1c <__aeabi_d2iz>
 800edba:	0002      	movs	r2, r0
 800edbc:	4b3e      	ldr	r3, [pc, #248]	; (800eeb8 <sensingRead+0x740>)
 800edbe:	601a      	str	r2, [r3, #0]

	pressureValue = pressureValue / 100;
 800edc0:	4b34      	ldr	r3, [pc, #208]	; (800ee94 <sensingRead+0x71c>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2164      	movs	r1, #100	; 0x64
 800edc6:	0018      	movs	r0, r3
 800edc8:	f7f1 f9a4 	bl	8000114 <__udivsi3>
 800edcc:	0003      	movs	r3, r0
 800edce:	001a      	movs	r2, r3
 800edd0:	4b30      	ldr	r3, [pc, #192]	; (800ee94 <sensingRead+0x71c>)
 800edd2:	601a      	str	r2, [r3, #0]

	//								LIS3MDL READINGS

	//magnetometer data
	uint8_t magnetXLSB = 0;
 800edd4:	2309      	movs	r3, #9
 800edd6:	2208      	movs	r2, #8
 800edd8:	4694      	mov	ip, r2
 800edda:	44bc      	add	ip, r7
 800eddc:	4463      	add	r3, ip
 800edde:	2200      	movs	r2, #0
 800ede0:	701a      	strb	r2, [r3, #0]
	uint8_t magnetXMSB = 0;
 800ede2:	2308      	movs	r3, #8
 800ede4:	2208      	movs	r2, #8
 800ede6:	4694      	mov	ip, r2
 800ede8:	44bc      	add	ip, r7
 800edea:	4463      	add	r3, ip
 800edec:	2200      	movs	r2, #0
 800edee:	701a      	strb	r2, [r3, #0]

	uint8_t magnetYLSB = 0;
 800edf0:	230f      	movs	r3, #15
 800edf2:	18fb      	adds	r3, r7, r3
 800edf4:	2200      	movs	r2, #0
 800edf6:	701a      	strb	r2, [r3, #0]
	uint8_t magnetYMSB = 0;
 800edf8:	230e      	movs	r3, #14
 800edfa:	18fb      	adds	r3, r7, r3
 800edfc:	2200      	movs	r2, #0
 800edfe:	701a      	strb	r2, [r3, #0]

	int16_t magneticFieldXADC;
	int16_t magneticFieldYADC;

	if (HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800ee00:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <sensingRead+0x70c>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	481c      	ldr	r0, [pc, #112]	; (800ee78 <sensingRead+0x700>)
 800ee06:	9302      	str	r3, [sp, #8]
 800ee08:	2301      	movs	r3, #1
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	4b2b      	ldr	r3, [pc, #172]	; (800eebc <sensingRead+0x744>)
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	2301      	movs	r3, #1
 800ee12:	2222      	movs	r2, #34	; 0x22
 800ee14:	2138      	movs	r1, #56	; 0x38
 800ee16:	f7f8 fa33 	bl	8007280 <HAL_I2C_Mem_Write>
 800ee1a:	1e03      	subs	r3, r0, #0
 800ee1c:	d001      	beq.n	800ee22 <sensingRead+0x6aa>
			&ctrlMagnetometerContinous, 1, i2cTimeout) != HAL_OK) {
		Error_Handler();
 800ee1e:	f001 fcb9 	bl	8010794 <Error_Handler>
	};

	HAL_Delay(20);
 800ee22:	2014      	movs	r0, #20
 800ee24:	f7f6 fdaa 	bl	800597c <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_L, 1, &magnetXLSB, 1,
 800ee28:	4b16      	ldr	r3, [pc, #88]	; (800ee84 <sensingRead+0x70c>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	4812      	ldr	r0, [pc, #72]	; (800ee78 <sensingRead+0x700>)
 800ee2e:	9302      	str	r3, [sp, #8]
 800ee30:	2301      	movs	r3, #1
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	2409      	movs	r4, #9
 800ee36:	2608      	movs	r6, #8
 800ee38:	19bb      	adds	r3, r7, r6
 800ee3a:	191b      	adds	r3, r3, r4
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	2301      	movs	r3, #1
 800ee40:	2228      	movs	r2, #40	; 0x28
 800ee42:	2138      	movs	r1, #56	; 0x38
 800ee44:	f7f8 fb4a 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1, &magnetXMSB, 1,
 800ee48:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <sensingRead+0x70c>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	480a      	ldr	r0, [pc, #40]	; (800ee78 <sensingRead+0x700>)
 800ee4e:	9302      	str	r3, [sp, #8]
 800ee50:	2301      	movs	r3, #1
 800ee52:	9301      	str	r3, [sp, #4]
 800ee54:	2508      	movs	r5, #8
 800ee56:	19bb      	adds	r3, r7, r6
 800ee58:	195b      	adds	r3, r3, r5
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	2229      	movs	r2, #41	; 0x29
 800ee60:	2138      	movs	r1, #56	; 0x38
 800ee62:	f7f8 fb3b 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_L, 1, &magnetYLSB, 1,
 800ee66:	4b07      	ldr	r3, [pc, #28]	; (800ee84 <sensingRead+0x70c>)
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	4803      	ldr	r0, [pc, #12]	; (800ee78 <sensingRead+0x700>)
 800ee6c:	9302      	str	r3, [sp, #8]
 800ee6e:	2301      	movs	r3, #1
 800ee70:	9301      	str	r3, [sp, #4]
 800ee72:	e025      	b.n	800eec0 <sensingRead+0x748>
 800ee74:	20000450 	.word	0x20000450
 800ee78:	20000150 	.word	0x20000150
 800ee7c:	20000027 	.word	0x20000027
 800ee80:	20000026 	.word	0x20000026
 800ee84:	2000003a 	.word	0x2000003a
 800ee88:	2000013c 	.word	0x2000013c
 800ee8c:	20000029 	.word	0x20000029
 800ee90:	2000022c 	.word	0x2000022c
 800ee94:	200003d8 	.word	0x200003d8
 800ee98:	66666666 	.word	0x66666666
 800ee9c:	40711266 	.word	0x40711266
 800eea0:	9ba5e354 	.word	0x9ba5e354
 800eea4:	4020a0c4 	.word	0x4020a0c4
 800eea8:	db22d0e5 	.word	0xdb22d0e5
 800eeac:	3fd27ef9 	.word	0x3fd27ef9
 800eeb0:	2000002a 	.word	0x2000002a
 800eeb4:	42c80000 	.word	0x42c80000
 800eeb8:	200003e4 	.word	0x200003e4
 800eebc:	20000108 	.word	0x20000108
 800eec0:	230f      	movs	r3, #15
 800eec2:	18fb      	adds	r3, r7, r3
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	2301      	movs	r3, #1
 800eec8:	222a      	movs	r2, #42	; 0x2a
 800eeca:	2138      	movs	r1, #56	; 0x38
 800eecc:	f7f8 fb06 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_H, 1, &magnetYMSB, 1,
 800eed0:	4b58      	ldr	r3, [pc, #352]	; (800f034 <sensingRead+0x8bc>)
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	4858      	ldr	r0, [pc, #352]	; (800f038 <sensingRead+0x8c0>)
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	2301      	movs	r3, #1
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	230e      	movs	r3, #14
 800eede:	18fb      	adds	r3, r7, r3
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	2301      	movs	r3, #1
 800eee4:	222b      	movs	r2, #43	; 0x2b
 800eee6:	2138      	movs	r1, #56	; 0x38
 800eee8:	f7f8 faf8 	bl	80074dc <HAL_I2C_Mem_Read>
			i2cTimeout);

	magneticFieldXADC = (int16_t) magnetXMSB << 8 | (int16_t) magnetXLSB;
 800eeec:	19ba      	adds	r2, r7, r6
 800eeee:	1953      	adds	r3, r2, r5
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	021b      	lsls	r3, r3, #8
 800eef4:	b219      	sxth	r1, r3
 800eef6:	19ba      	adds	r2, r7, r6
 800eef8:	1913      	adds	r3, r2, r4
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	b21a      	sxth	r2, r3
 800eefe:	2016      	movs	r0, #22
 800ef00:	19bc      	adds	r4, r7, r6
 800ef02:	1823      	adds	r3, r4, r0
 800ef04:	430a      	orrs	r2, r1
 800ef06:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = (int16_t) magnetYMSB << 8 | (int16_t) magnetYLSB;
 800ef08:	230e      	movs	r3, #14
 800ef0a:	18fb      	adds	r3, r7, r3
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	021b      	lsls	r3, r3, #8
 800ef10:	b219      	sxth	r1, r3
 800ef12:	230f      	movs	r3, #15
 800ef14:	18fb      	adds	r3, r7, r3
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	b21a      	sxth	r2, r3
 800ef1a:	2414      	movs	r4, #20
 800ef1c:	19bb      	adds	r3, r7, r6
 800ef1e:	191b      	adds	r3, r3, r4
 800ef20:	430a      	orrs	r2, r1
 800ef22:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL OFFSET CORRECTION

//	//for 4 Gs
	magneticFieldXADC = magneticFieldXADC  + offsetMagnetometerX;
 800ef24:	4b45      	ldr	r3, [pc, #276]	; (800f03c <sensingRead+0x8c4>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	0001      	movs	r1, r0
 800ef2c:	19bb      	adds	r3, r7, r6
 800ef2e:	185b      	adds	r3, r3, r1
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	18d3      	adds	r3, r2, r3
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	19bb      	adds	r3, r7, r6
 800ef38:	185b      	adds	r3, r3, r1
 800ef3a:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = magneticFieldYADC + offsetMagnetometerY;
 800ef3c:	4b40      	ldr	r3, [pc, #256]	; (800f040 <sensingRead+0x8c8>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	19bb      	adds	r3, r7, r6
 800ef44:	191b      	adds	r3, r3, r4
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	18d3      	adds	r3, r2, r3
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	0035      	movs	r5, r6
 800ef4e:	197b      	adds	r3, r7, r5
 800ef50:	191b      	adds	r3, r3, r4
 800ef52:	801a      	strh	r2, [r3, #0]
//	magneticFieldXADC = 0;
//	magneticFieldYADC = 0;

	//								LIS3MDL DECREASE VALUE

	uint16_t magneticFieldDivider = 270;
 800ef54:	2612      	movs	r6, #18
 800ef56:	197b      	adds	r3, r7, r5
 800ef58:	199b      	adds	r3, r3, r6
 800ef5a:	2287      	movs	r2, #135	; 0x87
 800ef5c:	0052      	lsls	r2, r2, #1
 800ef5e:	801a      	strh	r2, [r3, #0]

	magneticFieldX = magneticFieldXADC / magneticFieldDivider;
 800ef60:	197b      	adds	r3, r7, r5
 800ef62:	185b      	adds	r3, r3, r1
 800ef64:	2200      	movs	r2, #0
 800ef66:	5e9a      	ldrsh	r2, [r3, r2]
 800ef68:	197b      	adds	r3, r7, r5
 800ef6a:	199b      	adds	r3, r3, r6
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	0019      	movs	r1, r3
 800ef70:	0010      	movs	r0, r2
 800ef72:	f7f1 f959 	bl	8000228 <__divsi3>
 800ef76:	0003      	movs	r3, r0
 800ef78:	b21a      	sxth	r2, r3
 800ef7a:	4b32      	ldr	r3, [pc, #200]	; (800f044 <sensingRead+0x8cc>)
 800ef7c:	801a      	strh	r2, [r3, #0]
	magneticFieldY = magneticFieldYADC / ((float) magneticFieldDivider * 1.66);
 800ef7e:	197a      	adds	r2, r7, r5
 800ef80:	1913      	adds	r3, r2, r4
 800ef82:	2200      	movs	r2, #0
 800ef84:	5e9b      	ldrsh	r3, [r3, r2]
 800ef86:	0018      	movs	r0, r3
 800ef88:	f7f3 fffe 	bl	8002f88 <__aeabi_i2d>
 800ef8c:	0004      	movs	r4, r0
 800ef8e:	000d      	movs	r5, r1
 800ef90:	2308      	movs	r3, #8
 800ef92:	18fb      	adds	r3, r7, r3
 800ef94:	199b      	adds	r3, r3, r6
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	0018      	movs	r0, r3
 800ef9a:	f7f2 f9f7 	bl	800138c <__aeabi_ui2f>
 800ef9e:	1c03      	adds	r3, r0, #0
 800efa0:	1c18      	adds	r0, r3, #0
 800efa2:	f7f4 f847 	bl	8003034 <__aeabi_f2d>
 800efa6:	4a28      	ldr	r2, [pc, #160]	; (800f048 <sensingRead+0x8d0>)
 800efa8:	4b28      	ldr	r3, [pc, #160]	; (800f04c <sensingRead+0x8d4>)
 800efaa:	f7f3 f99b 	bl	80022e4 <__aeabi_dmul>
 800efae:	0002      	movs	r2, r0
 800efb0:	000b      	movs	r3, r1
 800efb2:	0020      	movs	r0, r4
 800efb4:	0029      	movs	r1, r5
 800efb6:	f7f2 fd8f 	bl	8001ad8 <__aeabi_ddiv>
 800efba:	0002      	movs	r2, r0
 800efbc:	000b      	movs	r3, r1
 800efbe:	0010      	movs	r0, r2
 800efc0:	0019      	movs	r1, r3
 800efc2:	f7f3 ffab 	bl	8002f1c <__aeabi_d2iz>
 800efc6:	0003      	movs	r3, r0
 800efc8:	b21a      	sxth	r2, r3
 800efca:	4b21      	ldr	r3, [pc, #132]	; (800f050 <sensingRead+0x8d8>)
 800efcc:	801a      	strh	r2, [r3, #0]

	if (magneticFieldX > 18)
 800efce:	4b1d      	ldr	r3, [pc, #116]	; (800f044 <sensingRead+0x8cc>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	5e9b      	ldrsh	r3, [r3, r2]
 800efd4:	2b12      	cmp	r3, #18
 800efd6:	dd02      	ble.n	800efde <sensingRead+0x866>
		magneticFieldX = 18;
 800efd8:	4b1a      	ldr	r3, [pc, #104]	; (800f044 <sensingRead+0x8cc>)
 800efda:	2212      	movs	r2, #18
 800efdc:	801a      	strh	r2, [r3, #0]
	if (magneticFieldX < -18)
 800efde:	4b19      	ldr	r3, [pc, #100]	; (800f044 <sensingRead+0x8cc>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	5e9b      	ldrsh	r3, [r3, r2]
 800efe4:	3312      	adds	r3, #18
 800efe6:	da03      	bge.n	800eff0 <sensingRead+0x878>
		magneticFieldX = -18;
 800efe8:	4b16      	ldr	r3, [pc, #88]	; (800f044 <sensingRead+0x8cc>)
 800efea:	2212      	movs	r2, #18
 800efec:	4252      	negs	r2, r2
 800efee:	801a      	strh	r2, [r3, #0]

	if (magneticFieldY > 12)
 800eff0:	4b17      	ldr	r3, [pc, #92]	; (800f050 <sensingRead+0x8d8>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	5e9b      	ldrsh	r3, [r3, r2]
 800eff6:	2b0c      	cmp	r3, #12
 800eff8:	dd02      	ble.n	800f000 <sensingRead+0x888>
		magneticFieldY = 12;
 800effa:	4b15      	ldr	r3, [pc, #84]	; (800f050 <sensingRead+0x8d8>)
 800effc:	220c      	movs	r2, #12
 800effe:	801a      	strh	r2, [r3, #0]
	if (magneticFieldY < -12)
 800f000:	4b13      	ldr	r3, [pc, #76]	; (800f050 <sensingRead+0x8d8>)
 800f002:	2200      	movs	r2, #0
 800f004:	5e9b      	ldrsh	r3, [r3, r2]
 800f006:	330c      	adds	r3, #12
 800f008:	da03      	bge.n	800f012 <sensingRead+0x89a>
		magneticFieldY = -12;
 800f00a:	4b11      	ldr	r3, [pc, #68]	; (800f050 <sensingRead+0x8d8>)
 800f00c:	220c      	movs	r2, #12
 800f00e:	4252      	negs	r2, r2
 800f010:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL SEND SLEEP COMMAND

	HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800f012:	4b08      	ldr	r3, [pc, #32]	; (800f034 <sensingRead+0x8bc>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	4808      	ldr	r0, [pc, #32]	; (800f038 <sensingRead+0x8c0>)
 800f018:	9302      	str	r3, [sp, #8]
 800f01a:	2301      	movs	r3, #1
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	4b0d      	ldr	r3, [pc, #52]	; (800f054 <sensingRead+0x8dc>)
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	2301      	movs	r3, #1
 800f024:	2222      	movs	r2, #34	; 0x22
 800f026:	2138      	movs	r1, #56	; 0x38
 800f028:	f7f8 f92a 	bl	8007280 <HAL_I2C_Mem_Write>
			&ctrlMagnetometerPowerDown, 1, i2cTimeout);

}
 800f02c:	46c0      	nop			; (mov r8, r8)
 800f02e:	46bd      	mov	sp, r7
 800f030:	b011      	add	sp, #68	; 0x44
 800f032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f034:	2000003a 	.word	0x2000003a
 800f038:	20000150 	.word	0x20000150
 800f03c:	2000010c 	.word	0x2000010c
 800f040:	20000110 	.word	0x20000110
 800f044:	200003ce 	.word	0x200003ce
 800f048:	28f5c28f 	.word	0x28f5c28f
 800f04c:	3ffa8f5c 	.word	0x3ffa8f5c
 800f050:	20000336 	.word	0x20000336
 800f054:	20000028 	.word	0x20000028

0800f058 <BME280_compensate_T_int32>:

//compensation formulas from datasheet
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T) {
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	10da      	asrs	r2, r3, #3
 800f064:	4b16      	ldr	r3, [pc, #88]	; (800f0c0 <BME280_compensate_T_int32+0x68>)
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	005b      	lsls	r3, r3, #1
 800f06a:	1ad3      	subs	r3, r2, r3
			* ((BME280_S32_t) dig_T2)) >> 11;
 800f06c:	4a15      	ldr	r2, [pc, #84]	; (800f0c4 <BME280_compensate_T_int32+0x6c>)
 800f06e:	2100      	movs	r1, #0
 800f070:	5e52      	ldrsh	r2, [r2, r1]
 800f072:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800f074:	12db      	asrs	r3, r3, #11
 800f076:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	111b      	asrs	r3, r3, #4
 800f07c:	4a10      	ldr	r2, [pc, #64]	; (800f0c0 <BME280_compensate_T_int32+0x68>)
 800f07e:	8812      	ldrh	r2, [r2, #0]
 800f080:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BME280_S32_t) dig_T1))) >> 12)
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	1112      	asrs	r2, r2, #4
 800f086:	490e      	ldr	r1, [pc, #56]	; (800f0c0 <BME280_compensate_T_int32+0x68>)
 800f088:	8809      	ldrh	r1, [r1, #0]
 800f08a:	1a52      	subs	r2, r2, r1
 800f08c:	4353      	muls	r3, r2
 800f08e:	131b      	asrs	r3, r3, #12
			* ((BME280_S32_t) dig_T3)) >> 14;
 800f090:	4a0d      	ldr	r2, [pc, #52]	; (800f0c8 <BME280_compensate_T_int32+0x70>)
 800f092:	2100      	movs	r1, #0
 800f094:	5e52      	ldrsh	r2, [r2, r1]
 800f096:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800f098:	139b      	asrs	r3, r3, #14
 800f09a:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	18d2      	adds	r2, r2, r3
 800f0a2:	4b0a      	ldr	r3, [pc, #40]	; (800f0cc <BME280_compensate_T_int32+0x74>)
 800f0a4:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 800f0a6:	4b09      	ldr	r3, [pc, #36]	; (800f0cc <BME280_compensate_T_int32+0x74>)
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	0013      	movs	r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	189b      	adds	r3, r3, r2
 800f0b0:	3380      	adds	r3, #128	; 0x80
 800f0b2:	121b      	asrs	r3, r3, #8
 800f0b4:	60fb      	str	r3, [r7, #12]
	return T;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
}
 800f0b8:	0018      	movs	r0, r3
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	b006      	add	sp, #24
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20000134 	.word	0x20000134
 800f0c4:	200001f8 	.word	0x200001f8
 800f0c8:	2000047e 	.word	0x2000047e
 800f0cc:	2000049c 	.word	0x2000049c

0800f0d0 <BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P) {
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	b0ad      	sub	sp, #180	; 0xb4
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	2394      	movs	r3, #148	; 0x94
 800f0d8:	18fb      	adds	r3, r7, r3
 800f0da:	6018      	str	r0, [r3, #0]
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t) t_fine) - 128000;
 800f0dc:	4bc6      	ldr	r3, [pc, #792]	; (800f3f8 <BME280_compensate_P_int64+0x328>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	001c      	movs	r4, r3
 800f0e2:	17db      	asrs	r3, r3, #31
 800f0e4:	001d      	movs	r5, r3
 800f0e6:	4ac5      	ldr	r2, [pc, #788]	; (800f3fc <BME280_compensate_P_int64+0x32c>)
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	425b      	negs	r3, r3
 800f0ec:	1912      	adds	r2, r2, r4
 800f0ee:	416b      	adcs	r3, r5
 800f0f0:	24a8      	movs	r4, #168	; 0xa8
 800f0f2:	1939      	adds	r1, r7, r4
 800f0f4:	600a      	str	r2, [r1, #0]
 800f0f6:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (BME280_S64_t) dig_P6;
 800f0f8:	193b      	adds	r3, r7, r4
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	1939      	adds	r1, r7, r4
 800f100:	6808      	ldr	r0, [r1, #0]
 800f102:	6849      	ldr	r1, [r1, #4]
 800f104:	f7f1 fa18 	bl	8000538 <__aeabi_lmul>
 800f108:	0002      	movs	r2, r0
 800f10a:	000b      	movs	r3, r1
 800f10c:	0010      	movs	r0, r2
 800f10e:	0019      	movs	r1, r3
 800f110:	4bbb      	ldr	r3, [pc, #748]	; (800f400 <BME280_compensate_P_int64+0x330>)
 800f112:	2200      	movs	r2, #0
 800f114:	5e9b      	ldrsh	r3, [r3, r2]
 800f116:	653b      	str	r3, [r7, #80]	; 0x50
 800f118:	17db      	asrs	r3, r3, #31
 800f11a:	657b      	str	r3, [r7, #84]	; 0x54
 800f11c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f120:	f7f1 fa0a 	bl	8000538 <__aeabi_lmul>
 800f124:	0002      	movs	r2, r0
 800f126:	000b      	movs	r3, r1
 800f128:	25a0      	movs	r5, #160	; 0xa0
 800f12a:	1979      	adds	r1, r7, r5
 800f12c:	600a      	str	r2, [r1, #0]
 800f12e:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1 * (BME280_S64_t) dig_P5) << 17);
 800f130:	4bb4      	ldr	r3, [pc, #720]	; (800f404 <BME280_compensate_P_int64+0x334>)
 800f132:	2200      	movs	r2, #0
 800f134:	5e9b      	ldrsh	r3, [r3, r2]
 800f136:	64bb      	str	r3, [r7, #72]	; 0x48
 800f138:	17db      	asrs	r3, r3, #31
 800f13a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f13c:	193b      	adds	r3, r7, r4
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f144:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f146:	f7f1 f9f7 	bl	8000538 <__aeabi_lmul>
 800f14a:	0002      	movs	r2, r0
 800f14c:	000b      	movs	r3, r1
 800f14e:	0bd1      	lsrs	r1, r2, #15
 800f150:	468c      	mov	ip, r1
 800f152:	0458      	lsls	r0, r3, #17
 800f154:	268c      	movs	r6, #140	; 0x8c
 800f156:	19b9      	adds	r1, r7, r6
 800f158:	6008      	str	r0, [r1, #0]
 800f15a:	19b8      	adds	r0, r7, r6
 800f15c:	6800      	ldr	r0, [r0, #0]
 800f15e:	4661      	mov	r1, ip
 800f160:	4308      	orrs	r0, r1
 800f162:	19b9      	adds	r1, r7, r6
 800f164:	6008      	str	r0, [r1, #0]
 800f166:	0453      	lsls	r3, r2, #17
 800f168:	2188      	movs	r1, #136	; 0x88
 800f16a:	187a      	adds	r2, r7, r1
 800f16c:	6013      	str	r3, [r2, #0]
 800f16e:	197b      	adds	r3, r7, r5
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	1879      	adds	r1, r7, r1
 800f176:	6808      	ldr	r0, [r1, #0]
 800f178:	6849      	ldr	r1, [r1, #4]
 800f17a:	1812      	adds	r2, r2, r0
 800f17c:	414b      	adcs	r3, r1
 800f17e:	1979      	adds	r1, r7, r5
 800f180:	600a      	str	r2, [r1, #0]
 800f182:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((BME280_S64_t) dig_P4) << 35);
 800f184:	4ba0      	ldr	r3, [pc, #640]	; (800f408 <BME280_compensate_P_int64+0x338>)
 800f186:	2200      	movs	r2, #0
 800f188:	5e9b      	ldrsh	r3, [r3, r2]
 800f18a:	643b      	str	r3, [r7, #64]	; 0x40
 800f18c:	17db      	asrs	r3, r3, #31
 800f18e:	647b      	str	r3, [r7, #68]	; 0x44
 800f190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f196:	2300      	movs	r3, #0
 800f198:	63bb      	str	r3, [r7, #56]	; 0x38
 800f19a:	197b      	adds	r3, r7, r5
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1a4:	1812      	adds	r2, r2, r0
 800f1a6:	414b      	adcs	r3, r1
 800f1a8:	1979      	adds	r1, r7, r5
 800f1aa:	600a      	str	r2, [r1, #0]
 800f1ac:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800f1ae:	193b      	adds	r3, r7, r4
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	1939      	adds	r1, r7, r4
 800f1b6:	6808      	ldr	r0, [r1, #0]
 800f1b8:	6849      	ldr	r1, [r1, #4]
 800f1ba:	f7f1 f9bd 	bl	8000538 <__aeabi_lmul>
 800f1be:	0002      	movs	r2, r0
 800f1c0:	000b      	movs	r3, r1
 800f1c2:	0010      	movs	r0, r2
 800f1c4:	0019      	movs	r1, r3
 800f1c6:	4b91      	ldr	r3, [pc, #580]	; (800f40c <BME280_compensate_P_int64+0x33c>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	5e9b      	ldrsh	r3, [r3, r2]
 800f1cc:	633b      	str	r3, [r7, #48]	; 0x30
 800f1ce:	17db      	asrs	r3, r3, #31
 800f1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f1d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d6:	f7f1 f9af 	bl	8000538 <__aeabi_lmul>
 800f1da:	0002      	movs	r2, r0
 800f1dc:	000b      	movs	r3, r1
 800f1de:	0619      	lsls	r1, r3, #24
 800f1e0:	0a10      	lsrs	r0, r2, #8
 800f1e2:	2580      	movs	r5, #128	; 0x80
 800f1e4:	197e      	adds	r6, r7, r5
 800f1e6:	6030      	str	r0, [r6, #0]
 800f1e8:	1978      	adds	r0, r7, r5
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	4308      	orrs	r0, r1
 800f1ee:	1979      	adds	r1, r7, r5
 800f1f0:	6008      	str	r0, [r1, #0]
 800f1f2:	121b      	asrs	r3, r3, #8
 800f1f4:	2284      	movs	r2, #132	; 0x84
 800f1f6:	18ba      	adds	r2, r7, r2
 800f1f8:	6013      	str	r3, [r2, #0]
			+ ((var1 * (BME280_S64_t) dig_P2) << 12);
 800f1fa:	4b85      	ldr	r3, [pc, #532]	; (800f410 <BME280_compensate_P_int64+0x340>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f200:	62bb      	str	r3, [r7, #40]	; 0x28
 800f202:	17db      	asrs	r3, r3, #31
 800f204:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f206:	193b      	adds	r3, r7, r4
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f20e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f210:	f7f1 f992 	bl	8000538 <__aeabi_lmul>
 800f214:	0002      	movs	r2, r0
 800f216:	000b      	movs	r3, r1
 800f218:	0d11      	lsrs	r1, r2, #20
 800f21a:	0318      	lsls	r0, r3, #12
 800f21c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f21e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800f220:	4308      	orrs	r0, r1
 800f222:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f224:	0313      	lsls	r3, r2, #12
 800f226:	67bb      	str	r3, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800f228:	197b      	adds	r3, r7, r5
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800f230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f232:	1812      	adds	r2, r2, r0
 800f234:	414b      	adcs	r3, r1
 800f236:	1939      	adds	r1, r7, r4
 800f238:	600a      	str	r2, [r1, #0]
 800f23a:	604b      	str	r3, [r1, #4]
	var1 = (((((BME280_S64_t) 1) << 47) + var1)) * ((BME280_S64_t) dig_P1)
 800f23c:	193b      	adds	r3, r7, r4
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	6859      	ldr	r1, [r3, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	2380      	movs	r3, #128	; 0x80
 800f246:	021b      	lsls	r3, r3, #8
 800f248:	1880      	adds	r0, r0, r2
 800f24a:	4159      	adcs	r1, r3
 800f24c:	4b71      	ldr	r3, [pc, #452]	; (800f414 <BME280_compensate_P_int64+0x344>)
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	623b      	str	r3, [r7, #32]
 800f252:	2300      	movs	r3, #0
 800f254:	627b      	str	r3, [r7, #36]	; 0x24
 800f256:	6a3a      	ldr	r2, [r7, #32]
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	f7f1 f96d 	bl	8000538 <__aeabi_lmul>
 800f25e:	0002      	movs	r2, r0
 800f260:	000b      	movs	r3, r1
 800f262:	1059      	asrs	r1, r3, #1
 800f264:	1938      	adds	r0, r7, r4
 800f266:	6001      	str	r1, [r0, #0]
 800f268:	17db      	asrs	r3, r3, #31
 800f26a:	21ac      	movs	r1, #172	; 0xac
 800f26c:	187a      	adds	r2, r7, r1
 800f26e:	6013      	str	r3, [r2, #0]
			>> 33;
	if (var1 == 0) {
 800f270:	193b      	adds	r3, r7, r4
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	187b      	adds	r3, r7, r1
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	431a      	orrs	r2, r3
 800f27a:	d101      	bne.n	800f280 <BME280_compensate_P_int64+0x1b0>
		return 0; // avoid exception caused by division by zero
 800f27c:	2300      	movs	r3, #0
 800f27e:	e0b6      	b.n	800f3ee <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576 - adc_P;
 800f280:	2394      	movs	r3, #148	; 0x94
 800f282:	18fb      	adds	r3, r7, r3
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	2380      	movs	r3, #128	; 0x80
 800f288:	035b      	lsls	r3, r3, #13
 800f28a:	1a9b      	subs	r3, r3, r2
 800f28c:	2498      	movs	r4, #152	; 0x98
 800f28e:	193a      	adds	r2, r7, r4
 800f290:	6013      	str	r3, [r2, #0]
 800f292:	17db      	asrs	r3, r3, #31
 800f294:	259c      	movs	r5, #156	; 0x9c
 800f296:	197a      	adds	r2, r7, r5
 800f298:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800f29a:	193b      	adds	r3, r7, r4
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	105b      	asrs	r3, r3, #1
 800f2a0:	61fb      	str	r3, [r7, #28]
 800f2a2:	193b      	adds	r3, r7, r4
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	07db      	lsls	r3, r3, #31
 800f2a8:	61bb      	str	r3, [r7, #24]
 800f2aa:	23a0      	movs	r3, #160	; 0xa0
 800f2ac:	18fa      	adds	r2, r7, r3
 800f2ae:	6853      	ldr	r3, [r2, #4]
 800f2b0:	6812      	ldr	r2, [r2, #0]
 800f2b2:	69b8      	ldr	r0, [r7, #24]
 800f2b4:	69f9      	ldr	r1, [r7, #28]
 800f2b6:	1a80      	subs	r0, r0, r2
 800f2b8:	4199      	sbcs	r1, r3
 800f2ba:	4a57      	ldr	r2, [pc, #348]	; (800f418 <BME280_compensate_P_int64+0x348>)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f7f1 f93b 	bl	8000538 <__aeabi_lmul>
 800f2c2:	0002      	movs	r2, r0
 800f2c4:	000b      	movs	r3, r1
 800f2c6:	0010      	movs	r0, r2
 800f2c8:	0019      	movs	r1, r3
 800f2ca:	26a8      	movs	r6, #168	; 0xa8
 800f2cc:	19ba      	adds	r2, r7, r6
 800f2ce:	6853      	ldr	r3, [r2, #4]
 800f2d0:	6812      	ldr	r2, [r2, #0]
 800f2d2:	f7f1 f90d 	bl	80004f0 <__aeabi_ldivmod>
 800f2d6:	0002      	movs	r2, r0
 800f2d8:	000b      	movs	r3, r1
 800f2da:	1939      	adds	r1, r7, r4
 800f2dc:	600a      	str	r2, [r1, #0]
 800f2de:	604b      	str	r3, [r1, #4]
	var1 = (((BME280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800f2e0:	4b4e      	ldr	r3, [pc, #312]	; (800f41c <BME280_compensate_P_int64+0x34c>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	5e9b      	ldrsh	r3, [r3, r2]
 800f2e6:	613b      	str	r3, [r7, #16]
 800f2e8:	17db      	asrs	r3, r3, #31
 800f2ea:	617b      	str	r3, [r7, #20]
 800f2ec:	197a      	adds	r2, r7, r5
 800f2ee:	6813      	ldr	r3, [r2, #0]
 800f2f0:	04da      	lsls	r2, r3, #19
 800f2f2:	1939      	adds	r1, r7, r4
 800f2f4:	680b      	ldr	r3, [r1, #0]
 800f2f6:	0b5b      	lsrs	r3, r3, #13
 800f2f8:	673b      	str	r3, [r7, #112]	; 0x70
 800f2fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	673b      	str	r3, [r7, #112]	; 0x70
 800f300:	197a      	adds	r2, r7, r5
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	135b      	asrs	r3, r3, #13
 800f306:	677b      	str	r3, [r7, #116]	; 0x74
 800f308:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f30a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f30c:	6938      	ldr	r0, [r7, #16]
 800f30e:	6979      	ldr	r1, [r7, #20]
 800f310:	f7f1 f912 	bl	8000538 <__aeabi_lmul>
 800f314:	0002      	movs	r2, r0
 800f316:	000b      	movs	r3, r1
 800f318:	0010      	movs	r0, r2
 800f31a:	0019      	movs	r1, r3
 800f31c:	197a      	adds	r2, r7, r5
 800f31e:	6813      	ldr	r3, [r2, #0]
 800f320:	04da      	lsls	r2, r3, #19
 800f322:	193b      	adds	r3, r7, r4
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	0b5b      	lsrs	r3, r3, #13
 800f328:	66bb      	str	r3, [r7, #104]	; 0x68
 800f32a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f32c:	4313      	orrs	r3, r2
 800f32e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f330:	197a      	adds	r2, r7, r5
 800f332:	6813      	ldr	r3, [r2, #0]
 800f334:	135b      	asrs	r3, r3, #13
 800f336:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f33c:	f7f1 f8fc 	bl	8000538 <__aeabi_lmul>
 800f340:	0002      	movs	r2, r0
 800f342:	000b      	movs	r3, r1
 800f344:	01d9      	lsls	r1, r3, #7
 800f346:	0e50      	lsrs	r0, r2, #25
 800f348:	4301      	orrs	r1, r0
 800f34a:	19b8      	adds	r0, r7, r6
 800f34c:	6001      	str	r1, [r0, #0]
 800f34e:	165b      	asrs	r3, r3, #25
 800f350:	22ac      	movs	r2, #172	; 0xac
 800f352:	18ba      	adds	r2, r7, r2
 800f354:	6013      	str	r3, [r2, #0]
	var2 = (((BME280_S64_t) dig_P8) * p) >> 19;
 800f356:	4b32      	ldr	r3, [pc, #200]	; (800f420 <BME280_compensate_P_int64+0x350>)
 800f358:	2200      	movs	r2, #0
 800f35a:	5e9b      	ldrsh	r3, [r3, r2]
 800f35c:	60bb      	str	r3, [r7, #8]
 800f35e:	17db      	asrs	r3, r3, #31
 800f360:	60fb      	str	r3, [r7, #12]
 800f362:	193a      	adds	r2, r7, r4
 800f364:	6853      	ldr	r3, [r2, #4]
 800f366:	6812      	ldr	r2, [r2, #0]
 800f368:	68b8      	ldr	r0, [r7, #8]
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	f7f1 f8e4 	bl	8000538 <__aeabi_lmul>
 800f370:	0002      	movs	r2, r0
 800f372:	000b      	movs	r3, r1
 800f374:	0359      	lsls	r1, r3, #13
 800f376:	0cd0      	lsrs	r0, r2, #19
 800f378:	4301      	orrs	r1, r0
 800f37a:	25a0      	movs	r5, #160	; 0xa0
 800f37c:	1978      	adds	r0, r7, r5
 800f37e:	6001      	str	r1, [r0, #0]
 800f380:	14db      	asrs	r3, r3, #19
 800f382:	22a4      	movs	r2, #164	; 0xa4
 800f384:	18ba      	adds	r2, r7, r2
 800f386:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t) dig_P7) << 4);
 800f388:	193b      	adds	r3, r7, r4
 800f38a:	6818      	ldr	r0, [r3, #0]
 800f38c:	6859      	ldr	r1, [r3, #4]
 800f38e:	19bb      	adds	r3, r7, r6
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	1880      	adds	r0, r0, r2
 800f396:	4159      	adcs	r1, r3
 800f398:	197b      	adds	r3, r7, r5
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	1812      	adds	r2, r2, r0
 800f3a0:	414b      	adcs	r3, r1
 800f3a2:	0619      	lsls	r1, r3, #24
 800f3a4:	0a10      	lsrs	r0, r2, #8
 800f3a6:	6638      	str	r0, [r7, #96]	; 0x60
 800f3a8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f3aa:	4308      	orrs	r0, r1
 800f3ac:	6638      	str	r0, [r7, #96]	; 0x60
 800f3ae:	121b      	asrs	r3, r3, #8
 800f3b0:	667b      	str	r3, [r7, #100]	; 0x64
 800f3b2:	4b1c      	ldr	r3, [pc, #112]	; (800f424 <BME280_compensate_P_int64+0x354>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f3b8:	603b      	str	r3, [r7, #0]
 800f3ba:	17db      	asrs	r3, r3, #31
 800f3bc:	607b      	str	r3, [r7, #4]
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	000b      	movs	r3, r1
 800f3c4:	0f1b      	lsrs	r3, r3, #28
 800f3c6:	0010      	movs	r0, r2
 800f3c8:	0100      	lsls	r0, r0, #4
 800f3ca:	65f8      	str	r0, [r7, #92]	; 0x5c
 800f3cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f3ce:	4318      	orrs	r0, r3
 800f3d0:	65f8      	str	r0, [r7, #92]	; 0x5c
 800f3d2:	000b      	movs	r3, r1
 800f3d4:	011b      	lsls	r3, r3, #4
 800f3d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f3de:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f3e0:	1812      	adds	r2, r2, r0
 800f3e2:	414b      	adcs	r3, r1
 800f3e4:	1939      	adds	r1, r7, r4
 800f3e6:	600a      	str	r2, [r1, #0]
 800f3e8:	604b      	str	r3, [r1, #4]
	return (BME280_U32_t) p;
 800f3ea:	193b      	adds	r3, r7, r4
 800f3ec:	681b      	ldr	r3, [r3, #0]
}
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	b02d      	add	sp, #180	; 0xb4
 800f3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f6:	46c0      	nop			; (mov r8, r8)
 800f3f8:	2000049c 	.word	0x2000049c
 800f3fc:	fffe0c00 	.word	0xfffe0c00
 800f400:	20000488 	.word	0x20000488
 800f404:	200003ca 	.word	0x200003ca
 800f408:	200002c4 	.word	0x200002c4
 800f40c:	20000444 	.word	0x20000444
 800f410:	200002c0 	.word	0x200002c0
 800f414:	20000442 	.word	0x20000442
 800f418:	00000c35 	.word	0x00000c35
 800f41c:	2000047c 	.word	0x2000047c
 800f420:	20000446 	.word	0x20000446
 800f424:	20000130 	.word	0x20000130

0800f428 <BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H) {
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t) 76800));
 800f430:	4b2c      	ldr	r3, [pc, #176]	; (800f4e4 <BME280_compensate_H_int32+0xbc>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a2c      	ldr	r2, [pc, #176]	; (800f4e8 <BME280_compensate_H_int32+0xc0>)
 800f436:	4694      	mov	ip, r2
 800f438:	4463      	add	r3, ip
 800f43a:	60fb      	str	r3, [r7, #12]

	v_x1_u32r =
			(((((adc_H << 14) - (((BME280_S32_t) dig_H4) << 20)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	039a      	lsls	r2, r3, #14
 800f440:	4b2a      	ldr	r3, [pc, #168]	; (800f4ec <BME280_compensate_H_int32+0xc4>)
 800f442:	2100      	movs	r1, #0
 800f444:	5e5b      	ldrsh	r3, [r3, r1]
 800f446:	051b      	lsls	r3, r3, #20
 800f448:	1ad2      	subs	r2, r2, r3
					- (((BME280_S32_t) dig_H5) * v_x1_u32r))
 800f44a:	4b29      	ldr	r3, [pc, #164]	; (800f4f0 <BME280_compensate_H_int32+0xc8>)
 800f44c:	2100      	movs	r1, #0
 800f44e:	5e5b      	ldrsh	r3, [r3, r1]
 800f450:	0019      	movs	r1, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	434b      	muls	r3, r1
 800f456:	1ad3      	subs	r3, r2, r3
					+ ((BME280_S32_t) 16384)) >> 15)
 800f458:	2280      	movs	r2, #128	; 0x80
 800f45a:	01d2      	lsls	r2, r2, #7
 800f45c:	4694      	mov	ip, r2
 800f45e:	4463      	add	r3, ip
 800f460:	13db      	asrs	r3, r3, #15
					* (((((((v_x1_u32r * ((BME280_S32_t) dig_H6)) >> 10)
 800f462:	4a24      	ldr	r2, [pc, #144]	; (800f4f4 <BME280_compensate_H_int32+0xcc>)
 800f464:	7812      	ldrb	r2, [r2, #0]
 800f466:	0011      	movs	r1, r2
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	434a      	muls	r2, r1
 800f46c:	1292      	asrs	r2, r2, #10
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800f46e:	4922      	ldr	r1, [pc, #136]	; (800f4f8 <BME280_compensate_H_int32+0xd0>)
 800f470:	7809      	ldrb	r1, [r1, #0]
 800f472:	0008      	movs	r0, r1
 800f474:	68f9      	ldr	r1, [r7, #12]
 800f476:	4341      	muls	r1, r0
 800f478:	12c9      	asrs	r1, r1, #11
									+ ((BME280_S32_t) 32768))) >> 10)
 800f47a:	2080      	movs	r0, #128	; 0x80
 800f47c:	0200      	lsls	r0, r0, #8
 800f47e:	4684      	mov	ip, r0
 800f480:	4461      	add	r1, ip
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800f482:	434a      	muls	r2, r1
									+ ((BME280_S32_t) 32768))) >> 10)
 800f484:	1292      	asrs	r2, r2, #10
							+ ((BME280_S32_t) 2097152))
 800f486:	2180      	movs	r1, #128	; 0x80
 800f488:	0389      	lsls	r1, r1, #14
 800f48a:	468c      	mov	ip, r1
 800f48c:	4462      	add	r2, ip
							* ((BME280_S32_t) dig_H2) + 8192) >> 14));
 800f48e:	491b      	ldr	r1, [pc, #108]	; (800f4fc <BME280_compensate_H_int32+0xd4>)
 800f490:	2000      	movs	r0, #0
 800f492:	5e09      	ldrsh	r1, [r1, r0]
 800f494:	434a      	muls	r2, r1
 800f496:	2180      	movs	r1, #128	; 0x80
 800f498:	0189      	lsls	r1, r1, #6
 800f49a:	468c      	mov	ip, r1
 800f49c:	4462      	add	r2, ip
 800f49e:	1392      	asrs	r2, r2, #14
	v_x1_u32r =
 800f4a0:	4353      	muls	r3, r2
 800f4a2:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	13db      	asrs	r3, r3, #15
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	13d2      	asrs	r2, r2, #15
 800f4ac:	4353      	muls	r3, r2
 800f4ae:	11db      	asrs	r3, r3, #7
					* ((BME280_S32_t) dig_H1)) >> 4));
 800f4b0:	4a13      	ldr	r2, [pc, #76]	; (800f500 <BME280_compensate_H_int32+0xd8>)
 800f4b2:	7812      	ldrb	r2, [r2, #0]
 800f4b4:	4353      	muls	r3, r2
 800f4b6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	da00      	bge.n	800f4c6 <BME280_compensate_H_int32+0x9e>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	22c8      	movs	r2, #200	; 0xc8
 800f4cc:	0552      	lsls	r2, r2, #21
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	dd01      	ble.n	800f4d6 <BME280_compensate_H_int32+0xae>
 800f4d2:	23c8      	movs	r3, #200	; 0xc8
 800f4d4:	055b      	lsls	r3, r3, #21
 800f4d6:	60fb      	str	r3, [r7, #12]
	return (BME280_U32_t) (v_x1_u32r >> 12);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	131b      	asrs	r3, r3, #12
}
 800f4dc:	0018      	movs	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	b004      	add	sp, #16
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	2000049c 	.word	0x2000049c
 800f4e8:	fffed400 	.word	0xfffed400
 800f4ec:	200001f6 	.word	0x200001f6
 800f4f0:	20000456 	.word	0x20000456
 800f4f4:	20000332 	.word	0x20000332
 800f4f8:	20000471 	.word	0x20000471
 800f4fc:	20000498 	.word	0x20000498
 800f500:	20000233 	.word	0x20000233

0800f504 <settingsDrawData>:
		80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150,
		155, 160, 165, 170, 175, 180, 185, 190, 195 };
uint8_t column[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,
		140, 150, 160, 170, 180, 190 };

void settingsDrawData(void) {
 800f504:	b5b0      	push	{r4, r5, r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af02      	add	r7, sp, #8

	//										SENSOR READINGS

	if (temperatureValue < 0) {
 800f50a:	4b59      	ldr	r3, [pc, #356]	; (800f670 <settingsDrawData+0x16c>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	da31      	bge.n	800f576 <settingsDrawData+0x72>

		Paint_DrawChar(column[COLUMN_TEMP] - 8, line[LINE_TEMP], '-', &Font12,
 800f512:	4b58      	ldr	r3, [pc, #352]	; (800f674 <settingsDrawData+0x170>)
 800f514:	799b      	ldrb	r3, [r3, #6]
 800f516:	b29b      	uxth	r3, r3
 800f518:	3b08      	subs	r3, #8
 800f51a:	b298      	uxth	r0, r3
 800f51c:	4b56      	ldr	r3, [pc, #344]	; (800f678 <settingsDrawData+0x174>)
 800f51e:	789b      	ldrb	r3, [r3, #2]
 800f520:	b299      	uxth	r1, r3
 800f522:	4b56      	ldr	r3, [pc, #344]	; (800f67c <settingsDrawData+0x178>)
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	b2db      	uxtb	r3, r3
 800f528:	b29b      	uxth	r3, r3
 800f52a:	4a55      	ldr	r2, [pc, #340]	; (800f680 <settingsDrawData+0x17c>)
 800f52c:	7812      	ldrb	r2, [r2, #0]
 800f52e:	b2d2      	uxtb	r2, r2
 800f530:	b292      	uxth	r2, r2
 800f532:	4c54      	ldr	r4, [pc, #336]	; (800f684 <settingsDrawData+0x180>)
 800f534:	9201      	str	r2, [sp, #4]
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	0023      	movs	r3, r4
 800f53a:	222d      	movs	r2, #45	; 0x2d
 800f53c:	f7f5 fcc4 	bl	8004ec8 <Paint_DrawChar>
				colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800f540:	4b4c      	ldr	r3, [pc, #304]	; (800f674 <settingsDrawData+0x170>)
 800f542:	799b      	ldrb	r3, [r3, #6]
 800f544:	b298      	uxth	r0, r3
 800f546:	4b4c      	ldr	r3, [pc, #304]	; (800f678 <settingsDrawData+0x174>)
 800f548:	789b      	ldrb	r3, [r3, #2]
 800f54a:	b299      	uxth	r1, r3
 800f54c:	4b48      	ldr	r3, [pc, #288]	; (800f670 <settingsDrawData+0x16c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
				abs(temperatureValue), &Font12, colorSecond, colorMain);
 800f550:	17da      	asrs	r2, r3, #31
 800f552:	189c      	adds	r4, r3, r2
 800f554:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800f556:	4b49      	ldr	r3, [pc, #292]	; (800f67c <settingsDrawData+0x178>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	4a48      	ldr	r2, [pc, #288]	; (800f680 <settingsDrawData+0x17c>)
 800f560:	7812      	ldrb	r2, [r2, #0]
 800f562:	b2d2      	uxtb	r2, r2
 800f564:	b292      	uxth	r2, r2
 800f566:	4d47      	ldr	r5, [pc, #284]	; (800f684 <settingsDrawData+0x180>)
 800f568:	9201      	str	r2, [sp, #4]
 800f56a:	9300      	str	r3, [sp, #0]
 800f56c:	002b      	movs	r3, r5
 800f56e:	0022      	movs	r2, r4
 800f570:	f7f5 fe0c 	bl	800518c <Paint_DrawNum>
 800f574:	e016      	b.n	800f5a4 <settingsDrawData+0xa0>

	} else {
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP], temperatureValue,
 800f576:	4b3f      	ldr	r3, [pc, #252]	; (800f674 <settingsDrawData+0x170>)
 800f578:	799b      	ldrb	r3, [r3, #6]
 800f57a:	b298      	uxth	r0, r3
 800f57c:	4b3e      	ldr	r3, [pc, #248]	; (800f678 <settingsDrawData+0x174>)
 800f57e:	789b      	ldrb	r3, [r3, #2]
 800f580:	b299      	uxth	r1, r3
 800f582:	4b3b      	ldr	r3, [pc, #236]	; (800f670 <settingsDrawData+0x16c>)
 800f584:	681c      	ldr	r4, [r3, #0]
 800f586:	4b3d      	ldr	r3, [pc, #244]	; (800f67c <settingsDrawData+0x178>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	4a3c      	ldr	r2, [pc, #240]	; (800f680 <settingsDrawData+0x17c>)
 800f590:	7812      	ldrb	r2, [r2, #0]
 800f592:	b2d2      	uxtb	r2, r2
 800f594:	b292      	uxth	r2, r2
 800f596:	4d3b      	ldr	r5, [pc, #236]	; (800f684 <settingsDrawData+0x180>)
 800f598:	9201      	str	r2, [sp, #4]
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	002b      	movs	r3, r5
 800f59e:	0022      	movs	r2, r4
 800f5a0:	f7f5 fdf4 	bl	800518c <Paint_DrawNum>
				&Font12, colorSecond, colorMain);
	}

	Paint_DrawNum(column[COLUMN_HUM], line[LINE_HUM], humidityValue, &Font12,
 800f5a4:	4b33      	ldr	r3, [pc, #204]	; (800f674 <settingsDrawData+0x170>)
 800f5a6:	791b      	ldrb	r3, [r3, #4]
 800f5a8:	b298      	uxth	r0, r3
 800f5aa:	4b33      	ldr	r3, [pc, #204]	; (800f678 <settingsDrawData+0x174>)
 800f5ac:	795b      	ldrb	r3, [r3, #5]
 800f5ae:	b299      	uxth	r1, r3
 800f5b0:	4b35      	ldr	r3, [pc, #212]	; (800f688 <settingsDrawData+0x184>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	001d      	movs	r5, r3
 800f5b6:	4b31      	ldr	r3, [pc, #196]	; (800f67c <settingsDrawData+0x178>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4a30      	ldr	r2, [pc, #192]	; (800f680 <settingsDrawData+0x17c>)
 800f5c0:	7812      	ldrb	r2, [r2, #0]
 800f5c2:	b2d2      	uxtb	r2, r2
 800f5c4:	b292      	uxth	r2, r2
 800f5c6:	4c2f      	ldr	r4, [pc, #188]	; (800f684 <settingsDrawData+0x180>)
 800f5c8:	9201      	str	r2, [sp, #4]
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	0023      	movs	r3, r4
 800f5ce:	002a      	movs	r2, r5
 800f5d0:	f7f5 fddc 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_PRESS], line[LINE_PRESS], pressureValue,
 800f5d4:	4b27      	ldr	r3, [pc, #156]	; (800f674 <settingsDrawData+0x170>)
 800f5d6:	78db      	ldrb	r3, [r3, #3]
 800f5d8:	b298      	uxth	r0, r3
 800f5da:	4b27      	ldr	r3, [pc, #156]	; (800f678 <settingsDrawData+0x174>)
 800f5dc:	7a1b      	ldrb	r3, [r3, #8]
 800f5de:	b299      	uxth	r1, r3
 800f5e0:	4b2a      	ldr	r3, [pc, #168]	; (800f68c <settingsDrawData+0x188>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	001d      	movs	r5, r3
 800f5e6:	4b25      	ldr	r3, [pc, #148]	; (800f67c <settingsDrawData+0x178>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	4a24      	ldr	r2, [pc, #144]	; (800f680 <settingsDrawData+0x17c>)
 800f5f0:	7812      	ldrb	r2, [r2, #0]
 800f5f2:	b2d2      	uxtb	r2, r2
 800f5f4:	b292      	uxth	r2, r2
 800f5f6:	4c23      	ldr	r4, [pc, #140]	; (800f684 <settingsDrawData+0x180>)
 800f5f8:	9201      	str	r2, [sp, #4]
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	0023      	movs	r3, r4
 800f5fe:	002a      	movs	r2, r5
 800f600:	f7f5 fdc4 	bl	800518c <Paint_DrawNum>
			&Font12, colorSecond, colorMain);

	if (altitudeValue < 0) {
 800f604:	4b22      	ldr	r3, [pc, #136]	; (800f690 <settingsDrawData+0x18c>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	da43      	bge.n	800f694 <settingsDrawData+0x190>
		Paint_DrawChar(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE], '-',
 800f60c:	4b19      	ldr	r3, [pc, #100]	; (800f674 <settingsDrawData+0x170>)
 800f60e:	789b      	ldrb	r3, [r3, #2]
 800f610:	b298      	uxth	r0, r3
 800f612:	4b19      	ldr	r3, [pc, #100]	; (800f678 <settingsDrawData+0x174>)
 800f614:	7adb      	ldrb	r3, [r3, #11]
 800f616:	b299      	uxth	r1, r3
 800f618:	4b18      	ldr	r3, [pc, #96]	; (800f67c <settingsDrawData+0x178>)
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	b29b      	uxth	r3, r3
 800f620:	4a17      	ldr	r2, [pc, #92]	; (800f680 <settingsDrawData+0x17c>)
 800f622:	7812      	ldrb	r2, [r2, #0]
 800f624:	b2d2      	uxtb	r2, r2
 800f626:	b292      	uxth	r2, r2
 800f628:	4c16      	ldr	r4, [pc, #88]	; (800f684 <settingsDrawData+0x180>)
 800f62a:	9201      	str	r2, [sp, #4]
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	0023      	movs	r3, r4
 800f630:	222d      	movs	r2, #45	; 0x2d
 800f632:	f7f5 fc49 	bl	8004ec8 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800f636:	4b0f      	ldr	r3, [pc, #60]	; (800f674 <settingsDrawData+0x170>)
 800f638:	789b      	ldrb	r3, [r3, #2]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	3308      	adds	r3, #8
 800f63e:	b298      	uxth	r0, r3
 800f640:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <settingsDrawData+0x174>)
 800f642:	7adb      	ldrb	r3, [r3, #11]
 800f644:	b299      	uxth	r1, r3
 800f646:	4b12      	ldr	r3, [pc, #72]	; (800f690 <settingsDrawData+0x18c>)
 800f648:	681b      	ldr	r3, [r3, #0]
				abs(altitudeValue), &Font12, colorSecond, colorMain);
 800f64a:	17da      	asrs	r2, r3, #31
 800f64c:	189c      	adds	r4, r3, r2
 800f64e:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800f650:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <settingsDrawData+0x178>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	b29b      	uxth	r3, r3
 800f658:	4a09      	ldr	r2, [pc, #36]	; (800f680 <settingsDrawData+0x17c>)
 800f65a:	7812      	ldrb	r2, [r2, #0]
 800f65c:	b2d2      	uxtb	r2, r2
 800f65e:	b292      	uxth	r2, r2
 800f660:	4d08      	ldr	r5, [pc, #32]	; (800f684 <settingsDrawData+0x180>)
 800f662:	9201      	str	r2, [sp, #4]
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	002b      	movs	r3, r5
 800f668:	0022      	movs	r2, r4
 800f66a:	f7f5 fd8f 	bl	800518c <Paint_DrawNum>
 800f66e:	e028      	b.n	800f6c2 <settingsDrawData+0x1be>
 800f670:	2000022c 	.word	0x2000022c
 800f674:	2000006c 	.word	0x2000006c
 800f678:	20000044 	.word	0x20000044
 800f67c:	20000459 	.word	0x20000459
 800f680:	200001bb 	.word	0x200001bb
 800f684:	20000000 	.word	0x20000000
 800f688:	2000013c 	.word	0x2000013c
 800f68c:	200003d8 	.word	0x200003d8
 800f690:	200003e4 	.word	0x200003e4
	} else {
		Paint_DrawNum(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE],
 800f694:	4bc9      	ldr	r3, [pc, #804]	; (800f9bc <settingsDrawData+0x4b8>)
 800f696:	789b      	ldrb	r3, [r3, #2]
 800f698:	b298      	uxth	r0, r3
 800f69a:	4bc9      	ldr	r3, [pc, #804]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f69c:	7adb      	ldrb	r3, [r3, #11]
 800f69e:	b299      	uxth	r1, r3
 800f6a0:	4bc8      	ldr	r3, [pc, #800]	; (800f9c4 <settingsDrawData+0x4c0>)
 800f6a2:	681c      	ldr	r4, [r3, #0]
 800f6a4:	4bc8      	ldr	r3, [pc, #800]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4ac7      	ldr	r2, [pc, #796]	; (800f9cc <settingsDrawData+0x4c8>)
 800f6ae:	7812      	ldrb	r2, [r2, #0]
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	b292      	uxth	r2, r2
 800f6b4:	4dc6      	ldr	r5, [pc, #792]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f6b6:	9201      	str	r2, [sp, #4]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	002b      	movs	r3, r5
 800f6bc:	0022      	movs	r2, r4
 800f6be:	f7f5 fd65 	bl	800518c <Paint_DrawNum>
				altitudeValue, &Font12, colorSecond, colorMain);
	}

	//										SENSOR READINGS UNITS
	Paint_DrawString_EN(column[COLUMN_TEMP + 2], line[LINE_TEMP], "C", &Font12,
 800f6c2:	4bbe      	ldr	r3, [pc, #760]	; (800f9bc <settingsDrawData+0x4b8>)
 800f6c4:	7a1b      	ldrb	r3, [r3, #8]
 800f6c6:	b298      	uxth	r0, r3
 800f6c8:	4bbd      	ldr	r3, [pc, #756]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f6ca:	789b      	ldrb	r3, [r3, #2]
 800f6cc:	b299      	uxth	r1, r3
 800f6ce:	4bbe      	ldr	r3, [pc, #760]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	4abd      	ldr	r2, [pc, #756]	; (800f9cc <settingsDrawData+0x4c8>)
 800f6d8:	7812      	ldrb	r2, [r2, #0]
 800f6da:	b2d2      	uxtb	r2, r2
 800f6dc:	b292      	uxth	r2, r2
 800f6de:	4dbc      	ldr	r5, [pc, #752]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f6e0:	4cbc      	ldr	r4, [pc, #752]	; (800f9d4 <settingsDrawData+0x4d0>)
 800f6e2:	9201      	str	r2, [sp, #4]
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	002b      	movs	r3, r5
 800f6e8:	0022      	movs	r2, r4
 800f6ea:	f7f5 fcd1 	bl	8005090 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_HUM + 2], line[LINE_HUM], "%", &Font12,
 800f6ee:	4bb3      	ldr	r3, [pc, #716]	; (800f9bc <settingsDrawData+0x4b8>)
 800f6f0:	799b      	ldrb	r3, [r3, #6]
 800f6f2:	b298      	uxth	r0, r3
 800f6f4:	4bb2      	ldr	r3, [pc, #712]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f6f6:	795b      	ldrb	r3, [r3, #5]
 800f6f8:	b299      	uxth	r1, r3
 800f6fa:	4bb3      	ldr	r3, [pc, #716]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	b29b      	uxth	r3, r3
 800f702:	4ab2      	ldr	r2, [pc, #712]	; (800f9cc <settingsDrawData+0x4c8>)
 800f704:	7812      	ldrb	r2, [r2, #0]
 800f706:	b2d2      	uxtb	r2, r2
 800f708:	b292      	uxth	r2, r2
 800f70a:	4db1      	ldr	r5, [pc, #708]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f70c:	4cb2      	ldr	r4, [pc, #712]	; (800f9d8 <settingsDrawData+0x4d4>)
 800f70e:	9201      	str	r2, [sp, #4]
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	002b      	movs	r3, r5
 800f714:	0022      	movs	r2, r4
 800f716:	f7f5 fcbb 	bl	8005090 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS + 4], line[LINE_PRESS], "hPa",
 800f71a:	4ba8      	ldr	r3, [pc, #672]	; (800f9bc <settingsDrawData+0x4b8>)
 800f71c:	79db      	ldrb	r3, [r3, #7]
 800f71e:	b298      	uxth	r0, r3
 800f720:	4ba7      	ldr	r3, [pc, #668]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f722:	7a1b      	ldrb	r3, [r3, #8]
 800f724:	b299      	uxth	r1, r3
 800f726:	4ba8      	ldr	r3, [pc, #672]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	4aa7      	ldr	r2, [pc, #668]	; (800f9cc <settingsDrawData+0x4c8>)
 800f730:	7812      	ldrb	r2, [r2, #0]
 800f732:	b2d2      	uxtb	r2, r2
 800f734:	b292      	uxth	r2, r2
 800f736:	4da6      	ldr	r5, [pc, #664]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f738:	4ca8      	ldr	r4, [pc, #672]	; (800f9dc <settingsDrawData+0x4d8>)
 800f73a:	9201      	str	r2, [sp, #4]
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	002b      	movs	r3, r5
 800f740:	0022      	movs	r2, r4
 800f742:	f7f5 fca5 	bl	8005090 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_ALTITUDE + 5], line[LINE_ALTITUDE],
 800f746:	4b9d      	ldr	r3, [pc, #628]	; (800f9bc <settingsDrawData+0x4b8>)
 800f748:	79db      	ldrb	r3, [r3, #7]
 800f74a:	b298      	uxth	r0, r3
 800f74c:	4b9c      	ldr	r3, [pc, #624]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f74e:	7adb      	ldrb	r3, [r3, #11]
 800f750:	b299      	uxth	r1, r3
 800f752:	4b9d      	ldr	r3, [pc, #628]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	b2db      	uxtb	r3, r3
 800f758:	b29b      	uxth	r3, r3
 800f75a:	4a9c      	ldr	r2, [pc, #624]	; (800f9cc <settingsDrawData+0x4c8>)
 800f75c:	7812      	ldrb	r2, [r2, #0]
 800f75e:	b2d2      	uxtb	r2, r2
 800f760:	b292      	uxth	r2, r2
 800f762:	4d9b      	ldr	r5, [pc, #620]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f764:	4c9e      	ldr	r4, [pc, #632]	; (800f9e0 <settingsDrawData+0x4dc>)
 800f766:	9201      	str	r2, [sp, #4]
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	002b      	movs	r3, r5
 800f76c:	0022      	movs	r2, r4
 800f76e:	f7f5 fc8f 	bl	8005090 <Paint_DrawString_EN>
			"m a.s.l.", &Font12, colorSecond, colorMain);

	//										STRINGS
	Paint_DrawString_EN(column[COLUMN_LAYOUT], line[LINE_LAYOUT], "Layout:",
 800f772:	4b92      	ldr	r3, [pc, #584]	; (800f9bc <settingsDrawData+0x4b8>)
 800f774:	785b      	ldrb	r3, [r3, #1]
 800f776:	b298      	uxth	r0, r3
 800f778:	4b91      	ldr	r3, [pc, #580]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f77a:	7e1b      	ldrb	r3, [r3, #24]
 800f77c:	b299      	uxth	r1, r3
 800f77e:	4b92      	ldr	r3, [pc, #584]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	b2db      	uxtb	r3, r3
 800f784:	b29b      	uxth	r3, r3
 800f786:	4a91      	ldr	r2, [pc, #580]	; (800f9cc <settingsDrawData+0x4c8>)
 800f788:	7812      	ldrb	r2, [r2, #0]
 800f78a:	b2d2      	uxtb	r2, r2
 800f78c:	b292      	uxth	r2, r2
 800f78e:	4d90      	ldr	r5, [pc, #576]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f790:	4c94      	ldr	r4, [pc, #592]	; (800f9e4 <settingsDrawData+0x4e0>)
 800f792:	9201      	str	r2, [sp, #4]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	002b      	movs	r3, r5
 800f798:	0022      	movs	r2, r4
 800f79a:	f7f5 fc79 	bl	8005090 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_COLOR], line[LINE_COLOR], "Color:",
 800f79e:	4b87      	ldr	r3, [pc, #540]	; (800f9bc <settingsDrawData+0x4b8>)
 800f7a0:	789b      	ldrb	r3, [r3, #2]
 800f7a2:	b298      	uxth	r0, r3
 800f7a4:	4b86      	ldr	r3, [pc, #536]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f7a6:	7f1b      	ldrb	r3, [r3, #28]
 800f7a8:	b299      	uxth	r1, r3
 800f7aa:	4b87      	ldr	r3, [pc, #540]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	4a86      	ldr	r2, [pc, #536]	; (800f9cc <settingsDrawData+0x4c8>)
 800f7b4:	7812      	ldrb	r2, [r2, #0]
 800f7b6:	b2d2      	uxtb	r2, r2
 800f7b8:	b292      	uxth	r2, r2
 800f7ba:	4d85      	ldr	r5, [pc, #532]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f7bc:	4c8a      	ldr	r4, [pc, #552]	; (800f9e8 <settingsDrawData+0x4e4>)
 800f7be:	9201      	str	r2, [sp, #4]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	002b      	movs	r3, r5
 800f7c4:	0022      	movs	r2, r4
 800f7c6:	f7f5 fc63 	bl	8005090 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_TEMP_CMP], line[LINE_TEMP_CMP], "T.cmp:",
 800f7ca:	4b7c      	ldr	r3, [pc, #496]	; (800f9bc <settingsDrawData+0x4b8>)
 800f7cc:	79db      	ldrb	r3, [r3, #7]
 800f7ce:	b298      	uxth	r0, r3
 800f7d0:	4b7b      	ldr	r3, [pc, #492]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f7d2:	2224      	movs	r2, #36	; 0x24
 800f7d4:	5c9b      	ldrb	r3, [r3, r2]
 800f7d6:	b299      	uxth	r1, r3
 800f7d8:	4b7b      	ldr	r3, [pc, #492]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	4a7a      	ldr	r2, [pc, #488]	; (800f9cc <settingsDrawData+0x4c8>)
 800f7e2:	7812      	ldrb	r2, [r2, #0]
 800f7e4:	b2d2      	uxtb	r2, r2
 800f7e6:	b292      	uxth	r2, r2
 800f7e8:	4d79      	ldr	r5, [pc, #484]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f7ea:	4c80      	ldr	r4, [pc, #512]	; (800f9ec <settingsDrawData+0x4e8>)
 800f7ec:	9201      	str	r2, [sp, #4]
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	002b      	movs	r3, r5
 800f7f2:	0022      	movs	r2, r4
 800f7f4:	f7f5 fc4c 	bl	8005090 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS_REF], line[LINE_PRESS_REF],
 800f7f8:	4b70      	ldr	r3, [pc, #448]	; (800f9bc <settingsDrawData+0x4b8>)
 800f7fa:	791b      	ldrb	r3, [r3, #4]
 800f7fc:	b298      	uxth	r0, r3
 800f7fe:	4b70      	ldr	r3, [pc, #448]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f800:	2220      	movs	r2, #32
 800f802:	5c9b      	ldrb	r3, [r3, r2]
 800f804:	b299      	uxth	r1, r3
 800f806:	4b70      	ldr	r3, [pc, #448]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	4a6f      	ldr	r2, [pc, #444]	; (800f9cc <settingsDrawData+0x4c8>)
 800f810:	7812      	ldrb	r2, [r2, #0]
 800f812:	b2d2      	uxtb	r2, r2
 800f814:	b292      	uxth	r2, r2
 800f816:	4d6e      	ldr	r5, [pc, #440]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f818:	4c75      	ldr	r4, [pc, #468]	; (800f9f0 <settingsDrawData+0x4ec>)
 800f81a:	9201      	str	r2, [sp, #4]
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	002b      	movs	r3, r5
 800f820:	0022      	movs	r2, r4
 800f822:	f7f5 fc35 	bl	8005090 <Paint_DrawString_EN>
			"P.ref:", &Font12, colorSecond, colorMain);

	//										CLOCK
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_CLOCK], hours, &Font16,
 800f826:	4b65      	ldr	r3, [pc, #404]	; (800f9bc <settingsDrawData+0x4b8>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	b298      	uxth	r0, r3
 800f82c:	4b64      	ldr	r3, [pc, #400]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f82e:	7c1b      	ldrb	r3, [r3, #16]
 800f830:	b299      	uxth	r1, r3
 800f832:	4b70      	ldr	r3, [pc, #448]	; (800f9f4 <settingsDrawData+0x4f0>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	b25b      	sxtb	r3, r3
 800f838:	001d      	movs	r5, r3
 800f83a:	4b63      	ldr	r3, [pc, #396]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	b29b      	uxth	r3, r3
 800f842:	4a62      	ldr	r2, [pc, #392]	; (800f9cc <settingsDrawData+0x4c8>)
 800f844:	7812      	ldrb	r2, [r2, #0]
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	b292      	uxth	r2, r2
 800f84a:	4c6b      	ldr	r4, [pc, #428]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f84c:	9201      	str	r2, [sp, #4]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	0023      	movs	r3, r4
 800f852:	002a      	movs	r2, r5
 800f854:	f7f5 fc9a 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_CLOCK], minutes, &Font16,
 800f858:	4b58      	ldr	r3, [pc, #352]	; (800f9bc <settingsDrawData+0x4b8>)
 800f85a:	78db      	ldrb	r3, [r3, #3]
 800f85c:	b298      	uxth	r0, r3
 800f85e:	4b58      	ldr	r3, [pc, #352]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f860:	7c1b      	ldrb	r3, [r3, #16]
 800f862:	b299      	uxth	r1, r3
 800f864:	4b65      	ldr	r3, [pc, #404]	; (800f9fc <settingsDrawData+0x4f8>)
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	b21b      	sxth	r3, r3
 800f86a:	001d      	movs	r5, r3
 800f86c:	4b56      	ldr	r3, [pc, #344]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	b2db      	uxtb	r3, r3
 800f872:	b29b      	uxth	r3, r3
 800f874:	4a55      	ldr	r2, [pc, #340]	; (800f9cc <settingsDrawData+0x4c8>)
 800f876:	7812      	ldrb	r2, [r2, #0]
 800f878:	b2d2      	uxtb	r2, r2
 800f87a:	b292      	uxth	r2, r2
 800f87c:	4c5e      	ldr	r4, [pc, #376]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f87e:	9201      	str	r2, [sp, #4]
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	0023      	movs	r3, r4
 800f884:	002a      	movs	r2, r5
 800f886:	f7f5 fc81 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_CLOCK], seconds, &Font16,
 800f88a:	4b4c      	ldr	r3, [pc, #304]	; (800f9bc <settingsDrawData+0x4b8>)
 800f88c:	799b      	ldrb	r3, [r3, #6]
 800f88e:	b298      	uxth	r0, r3
 800f890:	4b4b      	ldr	r3, [pc, #300]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f892:	7c1b      	ldrb	r3, [r3, #16]
 800f894:	b299      	uxth	r1, r3
 800f896:	4b5a      	ldr	r3, [pc, #360]	; (800fa00 <settingsDrawData+0x4fc>)
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	b25b      	sxtb	r3, r3
 800f89c:	001d      	movs	r5, r3
 800f89e:	4b4a      	ldr	r3, [pc, #296]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4a49      	ldr	r2, [pc, #292]	; (800f9cc <settingsDrawData+0x4c8>)
 800f8a8:	7812      	ldrb	r2, [r2, #0]
 800f8aa:	b2d2      	uxtb	r2, r2
 800f8ac:	b292      	uxth	r2, r2
 800f8ae:	4c52      	ldr	r4, [pc, #328]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f8b0:	9201      	str	r2, [sp, #4]
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	0023      	movs	r3, r4
 800f8b6:	002a      	movs	r2, r5
 800f8b8:	f7f5 fc68 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);

	//										DATE
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_DATE], day, &Font16,
 800f8bc:	4b3f      	ldr	r3, [pc, #252]	; (800f9bc <settingsDrawData+0x4b8>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	b298      	uxth	r0, r3
 800f8c2:	4b3f      	ldr	r3, [pc, #252]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f8c4:	7d1b      	ldrb	r3, [r3, #20]
 800f8c6:	b299      	uxth	r1, r3
 800f8c8:	4b4e      	ldr	r3, [pc, #312]	; (800fa04 <settingsDrawData+0x500>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	001d      	movs	r5, r3
 800f8d0:	4b3d      	ldr	r3, [pc, #244]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	4a3c      	ldr	r2, [pc, #240]	; (800f9cc <settingsDrawData+0x4c8>)
 800f8da:	7812      	ldrb	r2, [r2, #0]
 800f8dc:	b2d2      	uxtb	r2, r2
 800f8de:	b292      	uxth	r2, r2
 800f8e0:	4c45      	ldr	r4, [pc, #276]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f8e2:	9201      	str	r2, [sp, #4]
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	0023      	movs	r3, r4
 800f8e8:	002a      	movs	r2, r5
 800f8ea:	f7f5 fc4f 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_DATE], month, &Font16,
 800f8ee:	4b33      	ldr	r3, [pc, #204]	; (800f9bc <settingsDrawData+0x4b8>)
 800f8f0:	78db      	ldrb	r3, [r3, #3]
 800f8f2:	b298      	uxth	r0, r3
 800f8f4:	4b32      	ldr	r3, [pc, #200]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f8f6:	7d1b      	ldrb	r3, [r3, #20]
 800f8f8:	b299      	uxth	r1, r3
 800f8fa:	4b43      	ldr	r3, [pc, #268]	; (800fa08 <settingsDrawData+0x504>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	001d      	movs	r5, r3
 800f902:	4b31      	ldr	r3, [pc, #196]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	b2db      	uxtb	r3, r3
 800f908:	b29b      	uxth	r3, r3
 800f90a:	4a30      	ldr	r2, [pc, #192]	; (800f9cc <settingsDrawData+0x4c8>)
 800f90c:	7812      	ldrb	r2, [r2, #0]
 800f90e:	b2d2      	uxtb	r2, r2
 800f910:	b292      	uxth	r2, r2
 800f912:	4c39      	ldr	r4, [pc, #228]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f914:	9201      	str	r2, [sp, #4]
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	0023      	movs	r3, r4
 800f91a:	002a      	movs	r2, r5
 800f91c:	f7f5 fc36 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_DATE], year, &Font16,
 800f920:	4b26      	ldr	r3, [pc, #152]	; (800f9bc <settingsDrawData+0x4b8>)
 800f922:	799b      	ldrb	r3, [r3, #6]
 800f924:	b298      	uxth	r0, r3
 800f926:	4b26      	ldr	r3, [pc, #152]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f928:	7d1b      	ldrb	r3, [r3, #20]
 800f92a:	b299      	uxth	r1, r3
 800f92c:	4b37      	ldr	r3, [pc, #220]	; (800fa0c <settingsDrawData+0x508>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	b2db      	uxtb	r3, r3
 800f932:	001d      	movs	r5, r3
 800f934:	4b24      	ldr	r3, [pc, #144]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	4a23      	ldr	r2, [pc, #140]	; (800f9cc <settingsDrawData+0x4c8>)
 800f93e:	7812      	ldrb	r2, [r2, #0]
 800f940:	b2d2      	uxtb	r2, r2
 800f942:	b292      	uxth	r2, r2
 800f944:	4c2c      	ldr	r4, [pc, #176]	; (800f9f8 <settingsDrawData+0x4f4>)
 800f946:	9201      	str	r2, [sp, #4]
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	0023      	movs	r3, r4
 800f94c:	002a      	movs	r2, r5
 800f94e:	f7f5 fc1d 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);

	//										LAYOUT
	Paint_DrawNum(column[COLUMN_LAYOUT + 6], line[LINE_LAYOUT], layout, &Font12,
 800f952:	4b1a      	ldr	r3, [pc, #104]	; (800f9bc <settingsDrawData+0x4b8>)
 800f954:	79db      	ldrb	r3, [r3, #7]
 800f956:	b298      	uxth	r0, r3
 800f958:	4b19      	ldr	r3, [pc, #100]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f95a:	7e1b      	ldrb	r3, [r3, #24]
 800f95c:	b299      	uxth	r1, r3
 800f95e:	4b2c      	ldr	r3, [pc, #176]	; (800fa10 <settingsDrawData+0x50c>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	b2db      	uxtb	r3, r3
 800f964:	001d      	movs	r5, r3
 800f966:	4b18      	ldr	r3, [pc, #96]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	4a17      	ldr	r2, [pc, #92]	; (800f9cc <settingsDrawData+0x4c8>)
 800f970:	7812      	ldrb	r2, [r2, #0]
 800f972:	b2d2      	uxtb	r2, r2
 800f974:	b292      	uxth	r2, r2
 800f976:	4c16      	ldr	r4, [pc, #88]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f978:	9201      	str	r2, [sp, #4]
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	0023      	movs	r3, r4
 800f97e:	002a      	movs	r2, r5
 800f980:	f7f5 fc04 	bl	800518c <Paint_DrawNum>
			colorSecond, colorMain);

	//										COLOR
	if (colorScheme == COLOR_SCHEME_WHITE)
 800f984:	4b23      	ldr	r3, [pc, #140]	; (800fa14 <settingsDrawData+0x510>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d144      	bne.n	800fa18 <settingsDrawData+0x514>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'W', &Font12,
 800f98e:	4b0b      	ldr	r3, [pc, #44]	; (800f9bc <settingsDrawData+0x4b8>)
 800f990:	79db      	ldrb	r3, [r3, #7]
 800f992:	b298      	uxth	r0, r3
 800f994:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <settingsDrawData+0x4bc>)
 800f996:	7f1b      	ldrb	r3, [r3, #28]
 800f998:	b299      	uxth	r1, r3
 800f99a:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <settingsDrawData+0x4c4>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4a0a      	ldr	r2, [pc, #40]	; (800f9cc <settingsDrawData+0x4c8>)
 800f9a4:	7812      	ldrb	r2, [r2, #0]
 800f9a6:	b2d2      	uxtb	r2, r2
 800f9a8:	b292      	uxth	r2, r2
 800f9aa:	4c09      	ldr	r4, [pc, #36]	; (800f9d0 <settingsDrawData+0x4cc>)
 800f9ac:	9201      	str	r2, [sp, #4]
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	0023      	movs	r3, r4
 800f9b2:	2257      	movs	r2, #87	; 0x57
 800f9b4:	f7f5 fa88 	bl	8004ec8 <Paint_DrawChar>
 800f9b8:	e048      	b.n	800fa4c <settingsDrawData+0x548>
 800f9ba:	46c0      	nop			; (mov r8, r8)
 800f9bc:	2000006c 	.word	0x2000006c
 800f9c0:	20000044 	.word	0x20000044
 800f9c4:	200003e4 	.word	0x200003e4
 800f9c8:	20000459 	.word	0x20000459
 800f9cc:	200001bb 	.word	0x200001bb
 800f9d0:	20000000 	.word	0x20000000
 800f9d4:	08013b74 	.word	0x08013b74
 800f9d8:	08013b78 	.word	0x08013b78
 800f9dc:	08013b7c 	.word	0x08013b7c
 800f9e0:	08013b80 	.word	0x08013b80
 800f9e4:	08013b8c 	.word	0x08013b8c
 800f9e8:	08013b94 	.word	0x08013b94
 800f9ec:	08013b9c 	.word	0x08013b9c
 800f9f0:	08013ba4 	.word	0x08013ba4
 800f9f4:	2000049b 	.word	0x2000049b
 800f9f8:	20000008 	.word	0x20000008
 800f9fc:	20000486 	.word	0x20000486
 800fa00:	2000043e 	.word	0x2000043e
 800fa04:	2000044c 	.word	0x2000044c
 800fa08:	20000231 	.word	0x20000231
 800fa0c:	20000448 	.word	0x20000448
 800fa10:	20000481 	.word	0x20000481
 800fa14:	20000468 	.word	0x20000468
				colorSecond, colorMain);
	else if (colorScheme == COLOR_SCHEME_BLACK)
 800fa18:	4b46      	ldr	r3, [pc, #280]	; (800fb34 <settingsDrawData+0x630>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d114      	bne.n	800fa4c <settingsDrawData+0x548>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'B', &Font12,
 800fa22:	4b45      	ldr	r3, [pc, #276]	; (800fb38 <settingsDrawData+0x634>)
 800fa24:	79db      	ldrb	r3, [r3, #7]
 800fa26:	b298      	uxth	r0, r3
 800fa28:	4b44      	ldr	r3, [pc, #272]	; (800fb3c <settingsDrawData+0x638>)
 800fa2a:	7f1b      	ldrb	r3, [r3, #28]
 800fa2c:	b299      	uxth	r1, r3
 800fa2e:	4b44      	ldr	r3, [pc, #272]	; (800fb40 <settingsDrawData+0x63c>)
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	4a43      	ldr	r2, [pc, #268]	; (800fb44 <settingsDrawData+0x640>)
 800fa38:	7812      	ldrb	r2, [r2, #0]
 800fa3a:	b2d2      	uxtb	r2, r2
 800fa3c:	b292      	uxth	r2, r2
 800fa3e:	4c42      	ldr	r4, [pc, #264]	; (800fb48 <settingsDrawData+0x644>)
 800fa40:	9201      	str	r2, [sp, #4]
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	0023      	movs	r3, r4
 800fa46:	2242      	movs	r2, #66	; 0x42
 800fa48:	f7f5 fa3e 	bl	8004ec8 <Paint_DrawChar>
				colorSecond, colorMain);

	//										PRESSURE REFERENCE
	Paint_DrawNum(column[COLUMN_PRESS_REF + 5], line[LINE_PRESS_REF],
 800fa4c:	4b3a      	ldr	r3, [pc, #232]	; (800fb38 <settingsDrawData+0x634>)
 800fa4e:	7a5b      	ldrb	r3, [r3, #9]
 800fa50:	b298      	uxth	r0, r3
 800fa52:	4b3a      	ldr	r3, [pc, #232]	; (800fb3c <settingsDrawData+0x638>)
 800fa54:	2220      	movs	r2, #32
 800fa56:	5c9b      	ldrb	r3, [r3, r2]
 800fa58:	b299      	uxth	r1, r3
 800fa5a:	4b3c      	ldr	r3, [pc, #240]	; (800fb4c <settingsDrawData+0x648>)
 800fa5c:	881b      	ldrh	r3, [r3, #0]
 800fa5e:	b21b      	sxth	r3, r3
 800fa60:	001d      	movs	r5, r3
 800fa62:	4b37      	ldr	r3, [pc, #220]	; (800fb40 <settingsDrawData+0x63c>)
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4a36      	ldr	r2, [pc, #216]	; (800fb44 <settingsDrawData+0x640>)
 800fa6c:	7812      	ldrb	r2, [r2, #0]
 800fa6e:	b2d2      	uxtb	r2, r2
 800fa70:	b292      	uxth	r2, r2
 800fa72:	4c35      	ldr	r4, [pc, #212]	; (800fb48 <settingsDrawData+0x644>)
 800fa74:	9201      	str	r2, [sp, #4]
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	0023      	movs	r3, r4
 800fa7a:	002a      	movs	r2, r5
 800fa7c:	f7f5 fb86 	bl	800518c <Paint_DrawNum>
			pressureReference, &Font12, colorSecond, colorMain);

	//										TEMPERATURE COMPENSATION

	if (temperatureCompensation < 0) {
 800fa80:	4b33      	ldr	r3, [pc, #204]	; (800fb50 <settingsDrawData+0x64c>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	b25b      	sxtb	r3, r3
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	da36      	bge.n	800faf8 <settingsDrawData+0x5f4>

		Paint_DrawChar(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP], '-',
 800fa8a:	4b2b      	ldr	r3, [pc, #172]	; (800fb38 <settingsDrawData+0x634>)
 800fa8c:	7b1b      	ldrb	r3, [r3, #12]
 800fa8e:	b298      	uxth	r0, r3
 800fa90:	4b2a      	ldr	r3, [pc, #168]	; (800fb3c <settingsDrawData+0x638>)
 800fa92:	2224      	movs	r2, #36	; 0x24
 800fa94:	5c9b      	ldrb	r3, [r3, r2]
 800fa96:	b299      	uxth	r1, r3
 800fa98:	4b29      	ldr	r3, [pc, #164]	; (800fb40 <settingsDrawData+0x63c>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4a28      	ldr	r2, [pc, #160]	; (800fb44 <settingsDrawData+0x640>)
 800faa2:	7812      	ldrb	r2, [r2, #0]
 800faa4:	b2d2      	uxtb	r2, r2
 800faa6:	b292      	uxth	r2, r2
 800faa8:	4c27      	ldr	r4, [pc, #156]	; (800fb48 <settingsDrawData+0x644>)
 800faaa:	9201      	str	r2, [sp, #4]
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	0023      	movs	r3, r4
 800fab0:	222d      	movs	r2, #45	; 0x2d
 800fab2:	f7f5 fa09 	bl	8004ec8 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800fab6:	4b20      	ldr	r3, [pc, #128]	; (800fb38 <settingsDrawData+0x634>)
 800fab8:	7b1b      	ldrb	r3, [r3, #12]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	3308      	adds	r3, #8
 800fabe:	b298      	uxth	r0, r3
 800fac0:	4b1e      	ldr	r3, [pc, #120]	; (800fb3c <settingsDrawData+0x638>)
 800fac2:	2224      	movs	r2, #36	; 0x24
 800fac4:	5c9b      	ldrb	r3, [r3, r2]
 800fac6:	b299      	uxth	r1, r3
				abs(temperatureCompensation), &Font12, colorSecond, colorMain);
 800fac8:	4b21      	ldr	r3, [pc, #132]	; (800fb50 <settingsDrawData+0x64c>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	b25b      	sxtb	r3, r3
 800face:	17da      	asrs	r2, r3, #31
 800fad0:	189b      	adds	r3, r3, r2
 800fad2:	4053      	eors	r3, r2
 800fad4:	b2db      	uxtb	r3, r3
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800fad6:	001d      	movs	r5, r3
 800fad8:	4b19      	ldr	r3, [pc, #100]	; (800fb40 <settingsDrawData+0x63c>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	b29b      	uxth	r3, r3
 800fae0:	4a18      	ldr	r2, [pc, #96]	; (800fb44 <settingsDrawData+0x640>)
 800fae2:	7812      	ldrb	r2, [r2, #0]
 800fae4:	b2d2      	uxtb	r2, r2
 800fae6:	b292      	uxth	r2, r2
 800fae8:	4c17      	ldr	r4, [pc, #92]	; (800fb48 <settingsDrawData+0x644>)
 800faea:	9201      	str	r2, [sp, #4]
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	0023      	movs	r3, r4
 800faf0:	002a      	movs	r2, r5
 800faf2:	f7f5 fb4b 	bl	800518c <Paint_DrawNum>
	}

//	Paint_DrawNum(column[COLUMN_COLOR+7], line[LINE_COLOR], colorScheme, &Font16, colorSecond,
//			colorMain);

}
 800faf6:	e019      	b.n	800fb2c <settingsDrawData+0x628>
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP],
 800faf8:	4b0f      	ldr	r3, [pc, #60]	; (800fb38 <settingsDrawData+0x634>)
 800fafa:	7b1b      	ldrb	r3, [r3, #12]
 800fafc:	b298      	uxth	r0, r3
 800fafe:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <settingsDrawData+0x638>)
 800fb00:	2224      	movs	r2, #36	; 0x24
 800fb02:	5c9b      	ldrb	r3, [r3, r2]
 800fb04:	b299      	uxth	r1, r3
 800fb06:	4b12      	ldr	r3, [pc, #72]	; (800fb50 <settingsDrawData+0x64c>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b25b      	sxtb	r3, r3
 800fb0c:	001d      	movs	r5, r3
 800fb0e:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <settingsDrawData+0x63c>)
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	4a0b      	ldr	r2, [pc, #44]	; (800fb44 <settingsDrawData+0x640>)
 800fb18:	7812      	ldrb	r2, [r2, #0]
 800fb1a:	b2d2      	uxtb	r2, r2
 800fb1c:	b292      	uxth	r2, r2
 800fb1e:	4c0a      	ldr	r4, [pc, #40]	; (800fb48 <settingsDrawData+0x644>)
 800fb20:	9201      	str	r2, [sp, #4]
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	0023      	movs	r3, r4
 800fb26:	002a      	movs	r2, r5
 800fb28:	f7f5 fb30 	bl	800518c <Paint_DrawNum>
}
 800fb2c:	46c0      	nop			; (mov r8, r8)
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bdb0      	pop	{r4, r5, r7, pc}
 800fb32:	46c0      	nop			; (mov r8, r8)
 800fb34:	20000468 	.word	0x20000468
 800fb38:	2000006c 	.word	0x2000006c
 800fb3c:	20000044 	.word	0x20000044
 800fb40:	20000459 	.word	0x20000459
 800fb44:	200001bb 	.word	0x200001bb
 800fb48:	20000000 	.word	0x20000000
 800fb4c:	2000002a 	.word	0x2000002a
 800fb50:	20000029 	.word	0x20000029

0800fb54 <settingsDrawSubs>:

void settingsDrawSubs(void) {
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af04      	add	r7, sp, #16

	Paint_DrawChar(160, 40, '+', &Font20, colorSecond, colorMain);
 800fb5a:	4b31      	ldr	r3, [pc, #196]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	4a30      	ldr	r2, [pc, #192]	; (800fc24 <settingsDrawSubs+0xd0>)
 800fb64:	7812      	ldrb	r2, [r2, #0]
 800fb66:	b2d2      	uxtb	r2, r2
 800fb68:	b292      	uxth	r2, r2
 800fb6a:	492f      	ldr	r1, [pc, #188]	; (800fc28 <settingsDrawSubs+0xd4>)
 800fb6c:	9201      	str	r2, [sp, #4]
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	000b      	movs	r3, r1
 800fb72:	222b      	movs	r2, #43	; 0x2b
 800fb74:	2128      	movs	r1, #40	; 0x28
 800fb76:	20a0      	movs	r0, #160	; 0xa0
 800fb78:	f7f5 f9a6 	bl	8004ec8 <Paint_DrawChar>
	Paint_DrawChar(160, 140, '>', &Font20, colorSecond, colorMain);
 800fb7c:	4b28      	ldr	r3, [pc, #160]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	4a27      	ldr	r2, [pc, #156]	; (800fc24 <settingsDrawSubs+0xd0>)
 800fb86:	7812      	ldrb	r2, [r2, #0]
 800fb88:	b2d2      	uxtb	r2, r2
 800fb8a:	b292      	uxth	r2, r2
 800fb8c:	4926      	ldr	r1, [pc, #152]	; (800fc28 <settingsDrawSubs+0xd4>)
 800fb8e:	9201      	str	r2, [sp, #4]
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	000b      	movs	r3, r1
 800fb94:	223e      	movs	r2, #62	; 0x3e
 800fb96:	218c      	movs	r1, #140	; 0x8c
 800fb98:	20a0      	movs	r0, #160	; 0xa0
 800fb9a:	f7f5 f995 	bl	8004ec8 <Paint_DrawChar>
	Paint_DrawString_EN(132, 92, "libra", &Font16, colorSecond, colorMain);
 800fb9e:	4b20      	ldr	r3, [pc, #128]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	4a1f      	ldr	r2, [pc, #124]	; (800fc24 <settingsDrawSubs+0xd0>)
 800fba8:	7812      	ldrb	r2, [r2, #0]
 800fbaa:	b2d2      	uxtb	r2, r2
 800fbac:	b292      	uxth	r2, r2
 800fbae:	481f      	ldr	r0, [pc, #124]	; (800fc2c <settingsDrawSubs+0xd8>)
 800fbb0:	491f      	ldr	r1, [pc, #124]	; (800fc30 <settingsDrawSubs+0xdc>)
 800fbb2:	9201      	str	r2, [sp, #4]
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	0003      	movs	r3, r0
 800fbb8:	000a      	movs	r2, r1
 800fbba:	215c      	movs	r1, #92	; 0x5c
 800fbbc:	2084      	movs	r0, #132	; 0x84
 800fbbe:	f7f5 fa67 	bl	8005090 <Paint_DrawString_EN>

	Paint_DrawLine(0, 75, 122, 75, colorSecond, DOT_PIXEL_1X1,
 800fbc2:	4b17      	ldr	r3, [pc, #92]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	2200      	movs	r2, #0
 800fbcc:	9202      	str	r2, [sp, #8]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	9201      	str	r2, [sp, #4]
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	234b      	movs	r3, #75	; 0x4b
 800fbd6:	227a      	movs	r2, #122	; 0x7a
 800fbd8:	214b      	movs	r1, #75	; 0x4b
 800fbda:	2000      	movs	r0, #0
 800fbdc:	f7f4 fd78 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 118, 122, 118, colorSecond, DOT_PIXEL_1X1,
 800fbe0:	4b0f      	ldr	r3, [pc, #60]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	2200      	movs	r2, #0
 800fbea:	9202      	str	r2, [sp, #8]
 800fbec:	2201      	movs	r2, #1
 800fbee:	9201      	str	r2, [sp, #4]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	2376      	movs	r3, #118	; 0x76
 800fbf4:	227a      	movs	r2, #122	; 0x7a
 800fbf6:	2176      	movs	r1, #118	; 0x76
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	f7f4 fd69 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	Paint_DrawCircle(200, 100, 80, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <settingsDrawSubs+0xcc>)
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	2200      	movs	r2, #0
 800fc08:	9201      	str	r2, [sp, #4]
 800fc0a:	2202      	movs	r2, #2
 800fc0c:	9200      	str	r2, [sp, #0]
 800fc0e:	2250      	movs	r2, #80	; 0x50
 800fc10:	2164      	movs	r1, #100	; 0x64
 800fc12:	20c8      	movs	r0, #200	; 0xc8
 800fc14:	f7f4 ff06 	bl	8004a24 <Paint_DrawCircle>

}
 800fc18:	46c0      	nop			; (mov r8, r8)
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	46c0      	nop			; (mov r8, r8)
 800fc20:	20000459 	.word	0x20000459
 800fc24:	200001bb 	.word	0x200001bb
 800fc28:	20000010 	.word	0x20000010
 800fc2c:	20000008 	.word	0x20000008
 800fc30:	08013bac 	.word	0x08013bac

0800fc34 <settingsDrawPointer>:

void settingsDrawPointer(void) {
 800fc34:	b5b0      	push	{r4, r5, r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af04      	add	r7, sp, #16
	if (settingsPointer == SETTINGS_HOURS) {
 800fc3a:	4baf      	ldr	r3, [pc, #700]	; (800fef8 <settingsDrawPointer+0x2c4>)
 800fc3c:	781b      	ldrb	r3, [r3, #0]

	}

	switch (settingsPointer) {
 800fc3e:	4bae      	ldr	r3, [pc, #696]	; (800fef8 <settingsDrawPointer+0x2c4>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b0a      	cmp	r3, #10
 800fc46:	d900      	bls.n	800fc4a <settingsDrawPointer+0x16>
 800fc48:	e152      	b.n	800fef0 <settingsDrawPointer+0x2bc>
 800fc4a:	009a      	lsls	r2, r3, #2
 800fc4c:	4bab      	ldr	r3, [pc, #684]	; (800fefc <settingsDrawPointer+0x2c8>)
 800fc4e:	18d3      	adds	r3, r2, r3
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	469f      	mov	pc, r3
	case SETTINGS_HOURS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fc54:	4baa      	ldr	r3, [pc, #680]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	3303      	adds	r3, #3
 800fc5c:	b298      	uxth	r0, r3
 800fc5e:	4ba9      	ldr	r3, [pc, #676]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fc60:	7c1b      	ldrb	r3, [r3, #16]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	330f      	adds	r3, #15
 800fc66:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fc68:	4ba5      	ldr	r3, [pc, #660]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fc6e:	3314      	adds	r3, #20
 800fc70:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fc72:	4ba4      	ldr	r3, [pc, #656]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fc74:	7c1b      	ldrb	r3, [r3, #16]
 800fc76:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fc78:	330f      	adds	r3, #15
 800fc7a:	b29c      	uxth	r4, r3
 800fc7c:	4ba2      	ldr	r3, [pc, #648]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	2500      	movs	r5, #0
 800fc86:	9502      	str	r5, [sp, #8]
 800fc88:	2502      	movs	r5, #2
 800fc8a:	9501      	str	r5, [sp, #4]
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	0023      	movs	r3, r4
 800fc90:	f7f4 fd1e 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // hour
		break;
 800fc94:	e12c      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_MINUTES:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fc96:	4b9a      	ldr	r3, [pc, #616]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fc98:	78db      	ldrb	r3, [r3, #3]
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	3303      	adds	r3, #3
 800fc9e:	b298      	uxth	r0, r3
 800fca0:	4b98      	ldr	r3, [pc, #608]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fca2:	7c1b      	ldrb	r3, [r3, #16]
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	330f      	adds	r3, #15
 800fca8:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fcaa:	4b95      	ldr	r3, [pc, #596]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fcac:	78db      	ldrb	r3, [r3, #3]
 800fcae:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fcb0:	3314      	adds	r3, #20
 800fcb2:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fcb4:	4b93      	ldr	r3, [pc, #588]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fcb6:	7c1b      	ldrb	r3, [r3, #16]
 800fcb8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fcba:	330f      	adds	r3, #15
 800fcbc:	b29c      	uxth	r4, r3
 800fcbe:	4b92      	ldr	r3, [pc, #584]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	9502      	str	r5, [sp, #8]
 800fcca:	2502      	movs	r5, #2
 800fccc:	9501      	str	r5, [sp, #4]
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	0023      	movs	r3, r4
 800fcd2:	f7f4 fcfd 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // minute
		break;
 800fcd6:	e10b      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_SECONDS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800fcd8:	4b89      	ldr	r3, [pc, #548]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fcda:	799b      	ldrb	r3, [r3, #6]
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	3303      	adds	r3, #3
 800fce0:	b298      	uxth	r0, r3
 800fce2:	4b88      	ldr	r3, [pc, #544]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fce4:	7c1b      	ldrb	r3, [r3, #16]
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	330f      	adds	r3, #15
 800fcea:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fcec:	4b84      	ldr	r3, [pc, #528]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fcee:	799b      	ldrb	r3, [r3, #6]
 800fcf0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800fcf2:	3314      	adds	r3, #20
 800fcf4:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fcf6:	4b83      	ldr	r3, [pc, #524]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fcf8:	7c1b      	ldrb	r3, [r3, #16]
 800fcfa:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800fcfc:	330f      	adds	r3, #15
 800fcfe:	b29c      	uxth	r4, r3
 800fd00:	4b81      	ldr	r3, [pc, #516]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	2500      	movs	r5, #0
 800fd0a:	9502      	str	r5, [sp, #8]
 800fd0c:	2502      	movs	r5, #2
 800fd0e:	9501      	str	r5, [sp, #4]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	0023      	movs	r3, r4
 800fd14:	f7f4 fcdc 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // second
		break;
 800fd18:	e0ea      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_DAYS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800fd1a:	4b79      	ldr	r3, [pc, #484]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	3303      	adds	r3, #3
 800fd22:	b298      	uxth	r0, r3
 800fd24:	4b77      	ldr	r3, [pc, #476]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fd26:	7d1b      	ldrb	r3, [r3, #20]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	330f      	adds	r3, #15
 800fd2c:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800fd2e:	4b74      	ldr	r3, [pc, #464]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800fd34:	3314      	adds	r3, #20
 800fd36:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800fd38:	4b72      	ldr	r3, [pc, #456]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fd3a:	7d1b      	ldrb	r3, [r3, #20]
 800fd3c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800fd3e:	330f      	adds	r3, #15
 800fd40:	b29c      	uxth	r4, r3
 800fd42:	4b71      	ldr	r3, [pc, #452]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	2500      	movs	r5, #0
 800fd4c:	9502      	str	r5, [sp, #8]
 800fd4e:	2502      	movs	r5, #2
 800fd50:	9501      	str	r5, [sp, #4]
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	0023      	movs	r3, r4
 800fd56:	f7f4 fcbb 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // day
		break;
 800fd5a:	e0c9      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_MONTHS:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fd5c:	4b68      	ldr	r3, [pc, #416]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fd5e:	78db      	ldrb	r3, [r3, #3]
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	3303      	adds	r3, #3
 800fd64:	b298      	uxth	r0, r3
 800fd66:	4b67      	ldr	r3, [pc, #412]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fd68:	7d1b      	ldrb	r3, [r3, #20]
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	330f      	adds	r3, #15
 800fd6e:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800fd70:	4b63      	ldr	r3, [pc, #396]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fd72:	78db      	ldrb	r3, [r3, #3]
 800fd74:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fd76:	3314      	adds	r3, #20
 800fd78:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800fd7a:	4b62      	ldr	r3, [pc, #392]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fd7c:	7d1b      	ldrb	r3, [r3, #20]
 800fd7e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fd80:	330f      	adds	r3, #15
 800fd82:	b29c      	uxth	r4, r3
 800fd84:	4b60      	ldr	r3, [pc, #384]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	2500      	movs	r5, #0
 800fd8e:	9502      	str	r5, [sp, #8]
 800fd90:	2502      	movs	r5, #2
 800fd92:	9501      	str	r5, [sp, #4]
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	0023      	movs	r3, r4
 800fd98:	f7f4 fc9a 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // month
		break;
 800fd9c:	e0a8      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_YEARS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fd9e:	4b58      	ldr	r3, [pc, #352]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fda0:	799b      	ldrb	r3, [r3, #6]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	3303      	adds	r3, #3
 800fda6:	b298      	uxth	r0, r3
 800fda8:	4b56      	ldr	r3, [pc, #344]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fdaa:	7d1b      	ldrb	r3, [r3, #20]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	330f      	adds	r3, #15
 800fdb0:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800fdb2:	4b53      	ldr	r3, [pc, #332]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fdb4:	799b      	ldrb	r3, [r3, #6]
 800fdb6:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fdb8:	3314      	adds	r3, #20
 800fdba:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800fdbc:	4b51      	ldr	r3, [pc, #324]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fdbe:	7d1b      	ldrb	r3, [r3, #20]
 800fdc0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fdc2:	330f      	adds	r3, #15
 800fdc4:	b29c      	uxth	r4, r3
 800fdc6:	4b50      	ldr	r3, [pc, #320]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	2500      	movs	r5, #0
 800fdd0:	9502      	str	r5, [sp, #8]
 800fdd2:	2502      	movs	r5, #2
 800fdd4:	9501      	str	r5, [sp, #4]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	0023      	movs	r3, r4
 800fdda:	f7f4 fc79 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fdde:	e087      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_LAYOUT:
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fde0:	4b47      	ldr	r3, [pc, #284]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fde2:	79db      	ldrb	r3, [r3, #7]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	3303      	adds	r3, #3
 800fde8:	b298      	uxth	r0, r3
 800fdea:	4b46      	ldr	r3, [pc, #280]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fdec:	7e1b      	ldrb	r3, [r3, #24]
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	330f      	adds	r3, #15
 800fdf2:	b299      	uxth	r1, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800fdf4:	4b42      	ldr	r3, [pc, #264]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fdf6:	79db      	ldrb	r3, [r3, #7]
 800fdf8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fdfa:	330f      	adds	r3, #15
 800fdfc:	b29a      	uxth	r2, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800fdfe:	4b41      	ldr	r3, [pc, #260]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fe00:	7e1b      	ldrb	r3, [r3, #24]
 800fe02:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fe04:	330f      	adds	r3, #15
 800fe06:	b29c      	uxth	r4, r3
 800fe08:	4b3f      	ldr	r3, [pc, #252]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	2500      	movs	r5, #0
 800fe12:	9502      	str	r5, [sp, #8]
 800fe14:	2502      	movs	r5, #2
 800fe16:	9501      	str	r5, [sp, #4]
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	0023      	movs	r3, r4
 800fe1c:	f7f4 fc58 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fe20:	e066      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_COLOR:
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fe22:	4b37      	ldr	r3, [pc, #220]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fe24:	79db      	ldrb	r3, [r3, #7]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	3303      	adds	r3, #3
 800fe2a:	b298      	uxth	r0, r3
 800fe2c:	4b35      	ldr	r3, [pc, #212]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fe2e:	7f1b      	ldrb	r3, [r3, #28]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	330f      	adds	r3, #15
 800fe34:	b299      	uxth	r1, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800fe36:	4b32      	ldr	r3, [pc, #200]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fe38:	79db      	ldrb	r3, [r3, #7]
 800fe3a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fe3c:	330f      	adds	r3, #15
 800fe3e:	b29a      	uxth	r2, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800fe40:	4b30      	ldr	r3, [pc, #192]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fe42:	7f1b      	ldrb	r3, [r3, #28]
 800fe44:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fe46:	330f      	adds	r3, #15
 800fe48:	b29c      	uxth	r4, r3
 800fe4a:	4b2f      	ldr	r3, [pc, #188]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	2500      	movs	r5, #0
 800fe54:	9502      	str	r5, [sp, #8]
 800fe56:	2502      	movs	r5, #2
 800fe58:	9501      	str	r5, [sp, #4]
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	0023      	movs	r3, r4
 800fe5e:	f7f4 fc37 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fe62:	e045      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_PRESS_REF:
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fe64:	4b26      	ldr	r3, [pc, #152]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fe66:	7a5b      	ldrb	r3, [r3, #9]
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	3303      	adds	r3, #3
 800fe6c:	b298      	uxth	r0, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800fe6e:	4b25      	ldr	r3, [pc, #148]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fe70:	2220      	movs	r2, #32
 800fe72:	5c9b      	ldrb	r3, [r3, r2]
 800fe74:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fe76:	330f      	adds	r3, #15
 800fe78:	b299      	uxth	r1, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800fe7a:	4b21      	ldr	r3, [pc, #132]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fe7c:	7a5b      	ldrb	r3, [r3, #9]
 800fe7e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fe80:	331e      	adds	r3, #30
 800fe82:	b29a      	uxth	r2, r3
				line[LINE_PRESS_REF] + 15, colorSecond, DOT_PIXEL_2X2,
 800fe84:	4b1f      	ldr	r3, [pc, #124]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fe86:	2420      	movs	r4, #32
 800fe88:	5d1b      	ldrb	r3, [r3, r4]
 800fe8a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fe8c:	330f      	adds	r3, #15
 800fe8e:	b29c      	uxth	r4, r3
 800fe90:	4b1d      	ldr	r3, [pc, #116]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	2500      	movs	r5, #0
 800fe9a:	9502      	str	r5, [sp, #8]
 800fe9c:	2502      	movs	r5, #2
 800fe9e:	9501      	str	r5, [sp, #4]
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	0023      	movs	r3, r4
 800fea4:	f7f4 fc14 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800fea8:	e022      	b.n	800fef0 <settingsDrawPointer+0x2bc>

	case SETTINGS_TEMP_CMP:
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800feaa:	4b15      	ldr	r3, [pc, #84]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800feac:	7b1b      	ldrb	r3, [r3, #12]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	3303      	adds	r3, #3
 800feb2:	b298      	uxth	r0, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800feb4:	4b13      	ldr	r3, [pc, #76]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800feb6:	2224      	movs	r2, #36	; 0x24
 800feb8:	5c9b      	ldrb	r3, [r3, r2]
 800feba:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800febc:	330f      	adds	r3, #15
 800febe:	b299      	uxth	r1, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <settingsDrawPointer+0x2cc>)
 800fec2:	7b1b      	ldrb	r3, [r3, #12]
 800fec4:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fec6:	330f      	adds	r3, #15
 800fec8:	b29a      	uxth	r2, r3
				line[LINE_TEMP_CMP] + 15, colorSecond, DOT_PIXEL_2X2,
 800feca:	4b0e      	ldr	r3, [pc, #56]	; (800ff04 <settingsDrawPointer+0x2d0>)
 800fecc:	2424      	movs	r4, #36	; 0x24
 800fece:	5d1b      	ldrb	r3, [r3, r4]
 800fed0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fed2:	330f      	adds	r3, #15
 800fed4:	b29c      	uxth	r4, r3
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <settingsDrawPointer+0x2d4>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	b29b      	uxth	r3, r3
 800fede:	2500      	movs	r5, #0
 800fee0:	9502      	str	r5, [sp, #8]
 800fee2:	2502      	movs	r5, #2
 800fee4:	9501      	str	r5, [sp, #4]
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	0023      	movs	r3, r4
 800feea:	f7f4 fbf1 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800feee:	46c0      	nop			; (mov r8, r8)

	}

}
 800fef0:	46c0      	nop			; (mov r8, r8)
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bdb0      	pop	{r4, r5, r7, pc}
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	20000241 	.word	0x20000241
 800fefc:	08015f44 	.word	0x08015f44
 800ff00:	2000006c 	.word	0x2000006c
 800ff04:	20000044 	.word	0x20000044
 800ff08:	20000459 	.word	0x20000459

0800ff0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ff10:	f7f5 fcae 	bl	8005870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ff14:	f000 f916 	bl	8010144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ff18:	f000 fb9a 	bl	8010650 <MX_GPIO_Init>
  MX_DMA_Init();
 800ff1c:	f000 fb7a 	bl	8010614 <MX_DMA_Init>
  MX_I2C1_Init();
 800ff20:	f000 fa2a 	bl	8010378 <MX_I2C1_Init>
  MX_ADC1_Init();
 800ff24:	f000 f998 	bl	8010258 <MX_ADC1_Init>
  MX_RTC_Init();
 800ff28:	f000 fa66 	bl	80103f8 <MX_RTC_Init>
  MX_SPI1_Init();
 800ff2c:	f000 fadc 	bl	80104e8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800ff30:	f000 fb18 	bl	8010564 <MX_TIM3_Init>

	//EPD test
	//EPD_1in54_V2_test();
	//										INITIALISATION
	//										INTERFACE
	layout = 2;  //select startup layout and color
 800ff34:	4b73      	ldr	r3, [pc, #460]	; (8010104 <main+0x1f8>)
 800ff36:	2202      	movs	r2, #2
 800ff38:	701a      	strb	r2, [r3, #0]
	colorScheme = COLOR_SCHEME_BLACK;
 800ff3a:	4b73      	ldr	r3, [pc, #460]	; (8010108 <main+0x1fc>)
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	701a      	strb	r2, [r3, #0]

	flagClockConfig = 0;
 800ff40:	4b72      	ldr	r3, [pc, #456]	; (801010c <main+0x200>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]

	interfaceSelectLayout(layout);  //set layout and color
 800ff46:	4b6f      	ldr	r3, [pc, #444]	; (8010104 <main+0x1f8>)
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	0018      	movs	r0, r3
 800ff4e:	f7fa f92f 	bl	800a1b0 <interfaceSelectLayout>
	interfaceSelectColorScheme(colorScheme);
 800ff52:	4b6d      	ldr	r3, [pc, #436]	; (8010108 <main+0x1fc>)
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	0018      	movs	r0, r3
 800ff5a:	f7fa fd3b 	bl	800a9d4 <interfaceSelectColorScheme>
	interfaceInit();
 800ff5e:	f7fa fd5d 	bl	800aa1c <interfaceInit>

	interfaceClear();	//clear framebuffer
 800ff62:	f7fa fecb 	bl	800acfc <interfaceClear>

	interfaceUpdate(INTERFACE_UPDATE_FULL);	//change update mode
 800ff66:	2000      	movs	r0, #0
 800ff68:	f7fa fe7a 	bl	800ac60 <interfaceUpdate>

	interfaceDrawIndex();
 800ff6c:	f7fa fed4 	bl	800ad18 <interfaceDrawIndex>
	interfaceDrawBoards();
 800ff70:	f7fd fcfc 	bl	800d96c <interfaceDrawBoards>
	interfaceDrawPointers();
 800ff74:	f7fc f8c0 	bl	800c0f8 <interfaceDrawPointers>
	interfaceWrite();
 800ff78:	f7fa fea2 	bl	800acc0 <interfaceWrite>

	//										RTC INITIALISATION
	rtcInit();
 800ff7c:	f7fd ffa4 	bl	800dec8 <rtcInit>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 800ff80:	4963      	ldr	r1, [pc, #396]	; (8010110 <main+0x204>)
 800ff82:	4b64      	ldr	r3, [pc, #400]	; (8010114 <main+0x208>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	0018      	movs	r0, r3
 800ff88:	f7f9 f87a 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_RTCCLK_DIV16);

	//										SENSORS INITIALISATION

	sensingInit();
 800ff8c:	f7fe faca 	bl	800e524 <sensingInit>

	//										TIMERS INITIALISATION
	timersInit();
 800ff90:	f000 fed0 	bl	8010d34 <timersInit>
//		uint32_t moonPhase = rtcGetMoonPhase(1992, 7, 31);


		//									MAIN LOOP

		if (flagClockConfig == 1) {
 800ff94:	4b5d      	ldr	r3, [pc, #372]	; (801010c <main+0x200>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d104      	bne.n	800ffa8 <main+0x9c>
			SystemClock_Config();
 800ff9e:	f000 f8d1 	bl	8010144 <SystemClock_Config>
			flagClockConfig = 0;
 800ffa2:	4b5a      	ldr	r3, [pc, #360]	; (801010c <main+0x200>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	701a      	strb	r2, [r3, #0]
		}

		//									SENSING SECTION
		sensingRead();
 800ffa8:	f7fe fbe6 	bl	800e778 <sensingRead>

		//									RTC SECTION

		rtcGetTime();
 800ffac:	f7fd ff9c 	bl	800dee8 <rtcGetTime>

		//									BATTERY SECURE SECTION

		if (batteryState >= 8) { //run every loop when battery low detected
 800ffb0:	4b59      	ldr	r3, [pc, #356]	; (8010118 <main+0x20c>)
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	2b07      	cmp	r3, #7
 800ffb6:	d904      	bls.n	800ffc2 <main+0xb6>
			interfaceDrawBatteryWarning();
 800ffb8:	f7fd fcb8 	bl	800d92c <interfaceDrawBatteryWarning>
			mode = MODE_NORMAL;
 800ffbc:	4b57      	ldr	r3, [pc, #348]	; (801011c <main+0x210>)
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	701a      	strb	r2, [r3, #0]
		}

		if (batteryState >= 8 && batteryLowFlag == 0) { //run once when battery low detected
 800ffc2:	4b55      	ldr	r3, [pc, #340]	; (8010118 <main+0x20c>)
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b07      	cmp	r3, #7
 800ffc8:	d910      	bls.n	800ffec <main+0xe0>
 800ffca:	4b55      	ldr	r3, [pc, #340]	; (8010120 <main+0x214>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10c      	bne.n	800ffec <main+0xe0>
			batteryLowFlag = 1;
 800ffd2:	4b53      	ldr	r3, [pc, #332]	; (8010120 <main+0x214>)
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	701a      	strb	r2, [r3, #0]
			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_ULTRA_LONG,
 800ffd8:	494d      	ldr	r1, [pc, #308]	; (8010110 <main+0x204>)
 800ffda:	4b4e      	ldr	r3, [pc, #312]	; (8010114 <main+0x208>)
 800ffdc:	2200      	movs	r2, #0
 800ffde:	0018      	movs	r0, r3
 800ffe0:	f7f9 f84e 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
 800ffe4:	1e03      	subs	r3, r0, #0
 800ffe6:	d001      	beq.n	800ffec <main+0xe0>
			RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
				Error_Handler();
 800ffe8:	f000 fbd4 	bl	8010794 <Error_Handler>
			}
		}

		if (batteryState < 8 && batteryLowFlag == 1) { // run one when battery low disappears
 800ffec:	4b4a      	ldr	r3, [pc, #296]	; (8010118 <main+0x20c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	2b07      	cmp	r3, #7
 800fff2:	d810      	bhi.n	8010016 <main+0x10a>
 800fff4:	4b4a      	ldr	r3, [pc, #296]	; (8010120 <main+0x214>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d10c      	bne.n	8010016 <main+0x10a>
			batteryLowFlag = 0;
 800fffc:	4b48      	ldr	r3, [pc, #288]	; (8010120 <main+0x214>)
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8010002:	4943      	ldr	r1, [pc, #268]	; (8010110 <main+0x204>)
 8010004:	4b43      	ldr	r3, [pc, #268]	; (8010114 <main+0x208>)
 8010006:	2200      	movs	r2, #0
 8010008:	0018      	movs	r0, r3
 801000a:	f7f9 f839 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
 801000e:	1e03      	subs	r3, r0, #0
 8010010:	d001      	beq.n	8010016 <main+0x10a>
			RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
				Error_Handler();
 8010012:	f000 fbbf 	bl	8010794 <Error_Handler>
			}
		}

		//									DISPLAY REFRESH SECTION

		if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {	//switch to partial if full was selected
 8010016:	4b43      	ldr	r3, [pc, #268]	; (8010124 <main+0x218>)
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d102      	bne.n	8010026 <main+0x11a>
			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
 8010020:	2001      	movs	r0, #1
 8010022:	f7fa fe1d 	bl	800ac60 <interfaceUpdate>
		}
		if (interfaceFullUpdateFlag == 1) {	//switch to full if flag are active. Flag can be set via RESET button
 8010026:	4b40      	ldr	r3, [pc, #256]	; (8010128 <main+0x21c>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	b2db      	uxtb	r3, r3
 801002c:	2b01      	cmp	r3, #1
 801002e:	d105      	bne.n	801003c <main+0x130>
			interfaceUpdate(INTERFACE_UPDATE_FULL);
 8010030:	2000      	movs	r0, #0
 8010032:	f7fa fe15 	bl	800ac60 <interfaceUpdate>
			interfaceFullUpdateFlag = 0;
 8010036:	4b3c      	ldr	r3, [pc, #240]	; (8010128 <main+0x21c>)
 8010038:	2200      	movs	r2, #0
 801003a:	701a      	strb	r2, [r3, #0]
		}

		interfaceClear();	//clear framebuffer
 801003c:	f7fa fe5e 	bl	800acfc <interfaceClear>

		//									NORMAL MODE

		if (flagSettings == FLAG_SETTINGS_OFF && batteryLowFlag != 1) {
 8010040:	4b3a      	ldr	r3, [pc, #232]	; (801012c <main+0x220>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	b2db      	uxtb	r3, r3
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10a      	bne.n	8010060 <main+0x154>
 801004a:	4b35      	ldr	r3, [pc, #212]	; (8010120 <main+0x214>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d006      	beq.n	8010060 <main+0x154>

			interfaceDrawBoards();	//draw normal clock interface
 8010052:	f7fd fc8b 	bl	800d96c <interfaceDrawBoards>
			interfaceDrawIndex();
 8010056:	f7fa fe5f 	bl	800ad18 <interfaceDrawIndex>
			interfaceDrawPointers();
 801005a:	f7fc f84d 	bl	800c0f8 <interfaceDrawPointers>
 801005e:	e00e      	b.n	801007e <main+0x172>

			//								SETTINGS MODE

		} else if (flagSettings == FLAG_SETTINGS_ON && batteryLowFlag != 1) {
 8010060:	4b32      	ldr	r3, [pc, #200]	; (801012c <main+0x220>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b01      	cmp	r3, #1
 8010068:	d109      	bne.n	801007e <main+0x172>
 801006a:	4b2d      	ldr	r3, [pc, #180]	; (8010120 <main+0x214>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d005      	beq.n	801007e <main+0x172>

			settingsDrawSubs(); //draw settings interface
 8010072:	f7ff fd6f 	bl	800fb54 <settingsDrawSubs>
			settingsDrawData();
 8010076:	f7ff fa45 	bl	800f504 <settingsDrawData>
			settingsDrawPointer();
 801007a:	f7ff fddb 	bl	800fc34 <settingsDrawPointer>

		}

		interfaceWrite();	//burn framebuffer
 801007e:	f7fa fe1f 	bl	800acc0 <interfaceWrite>
		//									LOW POWER SECTION-SLEEP

		if ((flagSettings == FLAG_SETTINGS_OFF
 8010082:	4b2a      	ldr	r3, [pc, #168]	; (801012c <main+0x220>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	d136      	bne.n	80100fa <main+0x1ee>
				&& flagDontSleep != 1
 801008c:	4b28      	ldr	r3, [pc, #160]	; (8010130 <main+0x224>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b01      	cmp	r3, #1
 8010094:	d031      	beq.n	80100fa <main+0x1ee>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1)
 8010096:	23a0      	movs	r3, #160	; 0xa0
 8010098:	05db      	lsls	r3, r3, #23
 801009a:	2110      	movs	r1, #16
 801009c:	0018      	movs	r0, r3
 801009e:	f7f6 ffeb 	bl	8007078 <HAL_GPIO_ReadPin>
 80100a2:	0003      	movs	r3, r0
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d128      	bne.n	80100fa <main+0x1ee>
				&& !(mode == MODE_CHRONO && chronoMinutes < 1)
 80100a8:	4b1c      	ldr	r3, [pc, #112]	; (801011c <main+0x210>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d104      	bne.n	80100bc <main+0x1b0>
 80100b2:	4b20      	ldr	r3, [pc, #128]	; (8010134 <main+0x228>)
 80100b4:	881b      	ldrh	r3, [r3, #0]
 80100b6:	b21b      	sxth	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd1e      	ble.n	80100fa <main+0x1ee>
				&& LPMode == 1
 80100bc:	4b1e      	ldr	r3, [pc, #120]	; (8010138 <main+0x22c>)
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d11a      	bne.n	80100fa <main+0x1ee>
				&& counterForce >= ON_TIME) {	//sleep only when reset button is released
 80100c4:	4b1d      	ldr	r3, [pc, #116]	; (801013c <main+0x230>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	2b13      	cmp	r3, #19
 80100cc:	d915      	bls.n	80100fa <main+0x1ee>

				//to do in sleep mode
//			EPD_1IN54_V2_Sleep();
//			DEV_Module_Exit();
//
			HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 0);
 80100ce:	4b1c      	ldr	r3, [pc, #112]	; (8010140 <main+0x234>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	2140      	movs	r1, #64	; 0x40
 80100d4:	0018      	movs	r0, r3
 80100d6:	f7f6 ffec 	bl	80070b2 <HAL_GPIO_WritePin>
			HAL_SuspendTick();
 80100da:	f7f5 fc73 	bl	80059c4 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80100de:	2380      	movs	r3, #128	; 0x80
 80100e0:	01db      	lsls	r3, r3, #7
 80100e2:	2101      	movs	r1, #1
 80100e4:	0018      	movs	r0, r3
 80100e6:	f7f7 fe11 	bl	8007d0c <HAL_PWR_EnterSTOPMode>
//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);

			//to do after wake up
			HAL_ResumeTick();
 80100ea:	f7f5 fc79 	bl	80059e0 <HAL_ResumeTick>
			HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 1);
 80100ee:	4b14      	ldr	r3, [pc, #80]	; (8010140 <main+0x234>)
 80100f0:	2201      	movs	r2, #1
 80100f2:	2140      	movs	r1, #64	; 0x40
 80100f4:	0018      	movs	r0, r3
 80100f6:	f7f6 ffdc 	bl	80070b2 <HAL_GPIO_WritePin>
//			DEV_Module_Init();
//			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);

		}

		flagDontSleep = 0; // is set via another button, for fast display refresh after pressing
 80100fa:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <main+0x224>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	701a      	strb	r2, [r3, #0]
		if (flagClockConfig == 1) {
 8010100:	e748      	b.n	800ff94 <main+0x88>
 8010102:	46c0      	nop			; (mov r8, r8)
 8010104:	20000481 	.word	0x20000481
 8010108:	20000468 	.word	0x20000468
 801010c:	200003bd 	.word	0x200003bd
 8010110:	0000f7b7 	.word	0x0000f7b7
 8010114:	2000051c 	.word	0x2000051c
 8010118:	20000228 	.word	0x20000228
 801011c:	20000334 	.word	0x20000334
 8010120:	20000109 	.word	0x20000109
 8010124:	200003e0 	.word	0x200003e0
 8010128:	20000478 	.word	0x20000478
 801012c:	20000335 	.word	0x20000335
 8010130:	20000469 	.word	0x20000469
 8010134:	20000484 	.word	0x20000484
 8010138:	200003be 	.word	0x200003be
 801013c:	2000046a 	.word	0x2000046a
 8010140:	50000400 	.word	0x50000400

08010144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010144:	b590      	push	{r4, r7, lr}
 8010146:	b099      	sub	sp, #100	; 0x64
 8010148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801014a:	242c      	movs	r4, #44	; 0x2c
 801014c:	193b      	adds	r3, r7, r4
 801014e:	0018      	movs	r0, r3
 8010150:	2334      	movs	r3, #52	; 0x34
 8010152:	001a      	movs	r2, r3
 8010154:	2100      	movs	r1, #0
 8010156:	f000 fe91 	bl	8010e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801015a:	231c      	movs	r3, #28
 801015c:	18fb      	adds	r3, r7, r3
 801015e:	0018      	movs	r0, r3
 8010160:	2310      	movs	r3, #16
 8010162:	001a      	movs	r2, r3
 8010164:	2100      	movs	r1, #0
 8010166:	f000 fe89 	bl	8010e7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801016a:	003b      	movs	r3, r7
 801016c:	0018      	movs	r0, r3
 801016e:	231c      	movs	r3, #28
 8010170:	001a      	movs	r2, r3
 8010172:	2100      	movs	r1, #0
 8010174:	f000 fe82 	bl	8010e7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010178:	2380      	movs	r3, #128	; 0x80
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	0018      	movs	r0, r3
 801017e:	f7f7 fdfd 	bl	8007d7c <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8010182:	f7f7 fdb5 	bl	8007cf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010186:	4b32      	ldr	r3, [pc, #200]	; (8010250 <SystemClock_Config+0x10c>)
 8010188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801018a:	4b31      	ldr	r3, [pc, #196]	; (8010250 <SystemClock_Config+0x10c>)
 801018c:	2118      	movs	r1, #24
 801018e:	438a      	bics	r2, r1
 8010190:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8010192:	193b      	adds	r3, r7, r4
 8010194:	2206      	movs	r2, #6
 8010196:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8010198:	193b      	adds	r3, r7, r4
 801019a:	2201      	movs	r2, #1
 801019c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801019e:	193b      	adds	r3, r7, r4
 80101a0:	2280      	movs	r2, #128	; 0x80
 80101a2:	0052      	lsls	r2, r2, #1
 80101a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80101a6:	0021      	movs	r1, r4
 80101a8:	187b      	adds	r3, r7, r1
 80101aa:	2200      	movs	r2, #0
 80101ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80101ae:	187b      	adds	r3, r7, r1
 80101b0:	2240      	movs	r2, #64	; 0x40
 80101b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80101b4:	187b      	adds	r3, r7, r1
 80101b6:	2202      	movs	r2, #2
 80101b8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80101ba:	187b      	adds	r3, r7, r1
 80101bc:	2202      	movs	r2, #2
 80101be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80101c0:	187b      	adds	r3, r7, r1
 80101c2:	2200      	movs	r2, #0
 80101c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80101c6:	187b      	adds	r3, r7, r1
 80101c8:	2208      	movs	r2, #8
 80101ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80101cc:	187b      	adds	r3, r7, r1
 80101ce:	2280      	movs	r2, #128	; 0x80
 80101d0:	0292      	lsls	r2, r2, #10
 80101d2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80101d4:	187b      	adds	r3, r7, r1
 80101d6:	2280      	movs	r2, #128	; 0x80
 80101d8:	0592      	lsls	r2, r2, #22
 80101da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80101dc:	187b      	adds	r3, r7, r1
 80101de:	0018      	movs	r0, r3
 80101e0:	f7f7 fe0c 	bl	8007dfc <HAL_RCC_OscConfig>
 80101e4:	1e03      	subs	r3, r0, #0
 80101e6:	d001      	beq.n	80101ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80101e8:	f000 fad4 	bl	8010794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80101ec:	211c      	movs	r1, #28
 80101ee:	187b      	adds	r3, r7, r1
 80101f0:	2207      	movs	r2, #7
 80101f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80101f4:	187b      	adds	r3, r7, r1
 80101f6:	2202      	movs	r2, #2
 80101f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80101fa:	187b      	adds	r3, r7, r1
 80101fc:	2200      	movs	r2, #0
 80101fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010200:	187b      	adds	r3, r7, r1
 8010202:	2200      	movs	r2, #0
 8010204:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010206:	187b      	adds	r3, r7, r1
 8010208:	2102      	movs	r1, #2
 801020a:	0018      	movs	r0, r3
 801020c:	f7f8 f90c 	bl	8008428 <HAL_RCC_ClockConfig>
 8010210:	1e03      	subs	r3, r0, #0
 8010212:	d001      	beq.n	8010218 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8010214:	f000 fabe 	bl	8010794 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 8010218:	003b      	movs	r3, r7
 801021a:	4a0e      	ldr	r2, [pc, #56]	; (8010254 <SystemClock_Config+0x110>)
 801021c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 801021e:	003b      	movs	r3, r7
 8010220:	2280      	movs	r2, #128	; 0x80
 8010222:	0192      	lsls	r2, r2, #6
 8010224:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8010226:	003b      	movs	r3, r7
 8010228:	2280      	movs	r2, #128	; 0x80
 801022a:	0612      	lsls	r2, r2, #24
 801022c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801022e:	003b      	movs	r3, r7
 8010230:	2280      	movs	r2, #128	; 0x80
 8010232:	0052      	lsls	r2, r2, #1
 8010234:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010236:	003b      	movs	r3, r7
 8010238:	0018      	movs	r0, r3
 801023a:	f7f8 fa7f 	bl	800873c <HAL_RCCEx_PeriphCLKConfig>
 801023e:	1e03      	subs	r3, r0, #0
 8010240:	d001      	beq.n	8010246 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8010242:	f000 faa7 	bl	8010794 <Error_Handler>
  }
}
 8010246:	46c0      	nop			; (mov r8, r8)
 8010248:	46bd      	mov	sp, r7
 801024a:	b019      	add	sp, #100	; 0x64
 801024c:	bd90      	pop	{r4, r7, pc}
 801024e:	46c0      	nop			; (mov r8, r8)
 8010250:	40021000 	.word	0x40021000
 8010254:	00024020 	.word	0x00024020

08010258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801025e:	1d3b      	adds	r3, r7, #4
 8010260:	0018      	movs	r0, r3
 8010262:	230c      	movs	r3, #12
 8010264:	001a      	movs	r2, r3
 8010266:	2100      	movs	r1, #0
 8010268:	f000 fe08 	bl	8010e7c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801026c:	4b3e      	ldr	r3, [pc, #248]	; (8010368 <MX_ADC1_Init+0x110>)
 801026e:	4a3f      	ldr	r2, [pc, #252]	; (801036c <MX_ADC1_Init+0x114>)
 8010270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8010272:	4b3d      	ldr	r3, [pc, #244]	; (8010368 <MX_ADC1_Init+0x110>)
 8010274:	2280      	movs	r2, #128	; 0x80
 8010276:	0612      	lsls	r2, r2, #24
 8010278:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801027a:	4b3b      	ldr	r3, [pc, #236]	; (8010368 <MX_ADC1_Init+0x110>)
 801027c:	2200      	movs	r2, #0
 801027e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010280:	4b39      	ldr	r3, [pc, #228]	; (8010368 <MX_ADC1_Init+0x110>)
 8010282:	2200      	movs	r2, #0
 8010284:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010286:	4b38      	ldr	r3, [pc, #224]	; (8010368 <MX_ADC1_Init+0x110>)
 8010288:	2280      	movs	r2, #128	; 0x80
 801028a:	0392      	lsls	r2, r2, #14
 801028c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 801028e:	4b36      	ldr	r3, [pc, #216]	; (8010368 <MX_ADC1_Init+0x110>)
 8010290:	2208      	movs	r2, #8
 8010292:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010294:	4b34      	ldr	r3, [pc, #208]	; (8010368 <MX_ADC1_Init+0x110>)
 8010296:	2200      	movs	r2, #0
 8010298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 801029a:	4b33      	ldr	r3, [pc, #204]	; (8010368 <MX_ADC1_Init+0x110>)
 801029c:	2200      	movs	r2, #0
 801029e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80102a0:	4b31      	ldr	r3, [pc, #196]	; (8010368 <MX_ADC1_Init+0x110>)
 80102a2:	2201      	movs	r2, #1
 80102a4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80102a6:	4b30      	ldr	r3, [pc, #192]	; (8010368 <MX_ADC1_Init+0x110>)
 80102a8:	2203      	movs	r2, #3
 80102aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80102ac:	4b2e      	ldr	r3, [pc, #184]	; (8010368 <MX_ADC1_Init+0x110>)
 80102ae:	2220      	movs	r2, #32
 80102b0:	2100      	movs	r1, #0
 80102b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80102b4:	4b2c      	ldr	r3, [pc, #176]	; (8010368 <MX_ADC1_Init+0x110>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80102ba:	4b2b      	ldr	r3, [pc, #172]	; (8010368 <MX_ADC1_Init+0x110>)
 80102bc:	2200      	movs	r2, #0
 80102be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80102c0:	4b29      	ldr	r3, [pc, #164]	; (8010368 <MX_ADC1_Init+0x110>)
 80102c2:	222c      	movs	r2, #44	; 0x2c
 80102c4:	2100      	movs	r1, #0
 80102c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80102c8:	4b27      	ldr	r3, [pc, #156]	; (8010368 <MX_ADC1_Init+0x110>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80102ce:	4b26      	ldr	r3, [pc, #152]	; (8010368 <MX_ADC1_Init+0x110>)
 80102d0:	2204      	movs	r2, #4
 80102d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 80102d4:	4b24      	ldr	r3, [pc, #144]	; (8010368 <MX_ADC1_Init+0x110>)
 80102d6:	2204      	movs	r2, #4
 80102d8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80102da:	4b23      	ldr	r3, [pc, #140]	; (8010368 <MX_ADC1_Init+0x110>)
 80102dc:	223c      	movs	r2, #60	; 0x3c
 80102de:	2100      	movs	r1, #0
 80102e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80102e2:	4b21      	ldr	r3, [pc, #132]	; (8010368 <MX_ADC1_Init+0x110>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80102e8:	4b1f      	ldr	r3, [pc, #124]	; (8010368 <MX_ADC1_Init+0x110>)
 80102ea:	0018      	movs	r0, r3
 80102ec:	f7f5 fccc 	bl	8005c88 <HAL_ADC_Init>
 80102f0:	1e03      	subs	r3, r0, #0
 80102f2:	d001      	beq.n	80102f8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80102f4:	f000 fa4e 	bl	8010794 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80102f8:	1d3b      	adds	r3, r7, #4
 80102fa:	4a1d      	ldr	r2, [pc, #116]	; (8010370 <MX_ADC1_Init+0x118>)
 80102fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80102fe:	1d3b      	adds	r3, r7, #4
 8010300:	2200      	movs	r2, #0
 8010302:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8010304:	1d3b      	adds	r3, r7, #4
 8010306:	2200      	movs	r2, #0
 8010308:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801030a:	1d3a      	adds	r2, r7, #4
 801030c:	4b16      	ldr	r3, [pc, #88]	; (8010368 <MX_ADC1_Init+0x110>)
 801030e:	0011      	movs	r1, r2
 8010310:	0018      	movs	r0, r3
 8010312:	f7f5 ff37 	bl	8006184 <HAL_ADC_ConfigChannel>
 8010316:	1e03      	subs	r3, r0, #0
 8010318:	d001      	beq.n	801031e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 801031a:	f000 fa3b 	bl	8010794 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 801031e:	1d3b      	adds	r3, r7, #4
 8010320:	2201      	movs	r2, #1
 8010322:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010324:	1d3b      	adds	r3, r7, #4
 8010326:	2204      	movs	r2, #4
 8010328:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801032a:	1d3a      	adds	r2, r7, #4
 801032c:	4b0e      	ldr	r3, [pc, #56]	; (8010368 <MX_ADC1_Init+0x110>)
 801032e:	0011      	movs	r1, r2
 8010330:	0018      	movs	r0, r3
 8010332:	f7f5 ff27 	bl	8006184 <HAL_ADC_ConfigChannel>
 8010336:	1e03      	subs	r3, r0, #0
 8010338:	d001      	beq.n	801033e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 801033a:	f000 fa2b 	bl	8010794 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 801033e:	1d3b      	adds	r3, r7, #4
 8010340:	4a0c      	ldr	r2, [pc, #48]	; (8010374 <MX_ADC1_Init+0x11c>)
 8010342:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8010344:	1d3b      	adds	r3, r7, #4
 8010346:	2208      	movs	r2, #8
 8010348:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801034a:	1d3a      	adds	r2, r7, #4
 801034c:	4b06      	ldr	r3, [pc, #24]	; (8010368 <MX_ADC1_Init+0x110>)
 801034e:	0011      	movs	r1, r2
 8010350:	0018      	movs	r0, r3
 8010352:	f7f5 ff17 	bl	8006184 <HAL_ADC_ConfigChannel>
 8010356:	1e03      	subs	r3, r0, #0
 8010358:	d001      	beq.n	801035e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 801035a:	f000 fa1b 	bl	8010794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801035e:	46c0      	nop			; (mov r8, r8)
 8010360:	46bd      	mov	sp, r7
 8010362:	b004      	add	sp, #16
 8010364:	bd80      	pop	{r7, pc}
 8010366:	46c0      	nop			; (mov r8, r8)
 8010368:	200002cc 	.word	0x200002cc
 801036c:	40012400 	.word	0x40012400
 8010370:	04000002 	.word	0x04000002
 8010374:	14000020 	.word	0x14000020

08010378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801037c:	4b1b      	ldr	r3, [pc, #108]	; (80103ec <MX_I2C1_Init+0x74>)
 801037e:	4a1c      	ldr	r2, [pc, #112]	; (80103f0 <MX_I2C1_Init+0x78>)
 8010380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8010382:	4b1a      	ldr	r3, [pc, #104]	; (80103ec <MX_I2C1_Init+0x74>)
 8010384:	4a1b      	ldr	r2, [pc, #108]	; (80103f4 <MX_I2C1_Init+0x7c>)
 8010386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010388:	4b18      	ldr	r3, [pc, #96]	; (80103ec <MX_I2C1_Init+0x74>)
 801038a:	2200      	movs	r2, #0
 801038c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801038e:	4b17      	ldr	r3, [pc, #92]	; (80103ec <MX_I2C1_Init+0x74>)
 8010390:	2201      	movs	r2, #1
 8010392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010394:	4b15      	ldr	r3, [pc, #84]	; (80103ec <MX_I2C1_Init+0x74>)
 8010396:	2200      	movs	r2, #0
 8010398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801039a:	4b14      	ldr	r3, [pc, #80]	; (80103ec <MX_I2C1_Init+0x74>)
 801039c:	2200      	movs	r2, #0
 801039e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80103a0:	4b12      	ldr	r3, [pc, #72]	; (80103ec <MX_I2C1_Init+0x74>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80103a6:	4b11      	ldr	r3, [pc, #68]	; (80103ec <MX_I2C1_Init+0x74>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80103ac:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <MX_I2C1_Init+0x74>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80103b2:	4b0e      	ldr	r3, [pc, #56]	; (80103ec <MX_I2C1_Init+0x74>)
 80103b4:	0018      	movs	r0, r3
 80103b6:	f7f6 fecd 	bl	8007154 <HAL_I2C_Init>
 80103ba:	1e03      	subs	r3, r0, #0
 80103bc:	d001      	beq.n	80103c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80103be:	f000 f9e9 	bl	8010794 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80103c2:	4b0a      	ldr	r3, [pc, #40]	; (80103ec <MX_I2C1_Init+0x74>)
 80103c4:	2100      	movs	r1, #0
 80103c6:	0018      	movs	r0, r3
 80103c8:	f7f7 fbfa 	bl	8007bc0 <HAL_I2CEx_ConfigAnalogFilter>
 80103cc:	1e03      	subs	r3, r0, #0
 80103ce:	d001      	beq.n	80103d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80103d0:	f000 f9e0 	bl	8010794 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <MX_I2C1_Init+0x74>)
 80103d6:	2100      	movs	r1, #0
 80103d8:	0018      	movs	r0, r3
 80103da:	f7f7 fc3d 	bl	8007c58 <HAL_I2CEx_ConfigDigitalFilter>
 80103de:	1e03      	subs	r3, r0, #0
 80103e0:	d001      	beq.n	80103e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80103e2:	f000 f9d7 	bl	8010794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80103e6:	46c0      	nop			; (mov r8, r8)
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	20000150 	.word	0x20000150
 80103f0:	40005400 	.word	0x40005400
 80103f4:	00303d5b 	.word	0x00303d5b

080103f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80103fe:	1d3b      	adds	r3, r7, #4
 8010400:	0018      	movs	r0, r3
 8010402:	2314      	movs	r3, #20
 8010404:	001a      	movs	r2, r3
 8010406:	2100      	movs	r1, #0
 8010408:	f000 fd38 	bl	8010e7c <memset>
  RTC_DateTypeDef sDate = {0};
 801040c:	003b      	movs	r3, r7
 801040e:	2200      	movs	r2, #0
 8010410:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010412:	4b32      	ldr	r3, [pc, #200]	; (80104dc <MX_RTC_Init+0xe4>)
 8010414:	4a32      	ldr	r2, [pc, #200]	; (80104e0 <MX_RTC_Init+0xe8>)
 8010416:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010418:	4b30      	ldr	r3, [pc, #192]	; (80104dc <MX_RTC_Init+0xe4>)
 801041a:	2200      	movs	r2, #0
 801041c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 801041e:	4b2f      	ldr	r3, [pc, #188]	; (80104dc <MX_RTC_Init+0xe4>)
 8010420:	227f      	movs	r2, #127	; 0x7f
 8010422:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8010424:	4b2d      	ldr	r3, [pc, #180]	; (80104dc <MX_RTC_Init+0xe4>)
 8010426:	22ff      	movs	r2, #255	; 0xff
 8010428:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801042a:	4b2c      	ldr	r3, [pc, #176]	; (80104dc <MX_RTC_Init+0xe4>)
 801042c:	2200      	movs	r2, #0
 801042e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010430:	4b2a      	ldr	r3, [pc, #168]	; (80104dc <MX_RTC_Init+0xe4>)
 8010432:	2200      	movs	r2, #0
 8010434:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010436:	4b29      	ldr	r3, [pc, #164]	; (80104dc <MX_RTC_Init+0xe4>)
 8010438:	2200      	movs	r2, #0
 801043a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801043c:	4b27      	ldr	r3, [pc, #156]	; (80104dc <MX_RTC_Init+0xe4>)
 801043e:	2280      	movs	r2, #128	; 0x80
 8010440:	05d2      	lsls	r2, r2, #23
 8010442:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8010444:	4b25      	ldr	r3, [pc, #148]	; (80104dc <MX_RTC_Init+0xe4>)
 8010446:	2200      	movs	r2, #0
 8010448:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801044a:	4b24      	ldr	r3, [pc, #144]	; (80104dc <MX_RTC_Init+0xe4>)
 801044c:	0018      	movs	r0, r3
 801044e:	f7f8 faa9 	bl	80089a4 <HAL_RTC_Init>
 8010452:	1e03      	subs	r3, r0, #0
 8010454:	d001      	beq.n	801045a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8010456:	f000 f99d 	bl	8010794 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 801045a:	1d3b      	adds	r3, r7, #4
 801045c:	220a      	movs	r2, #10
 801045e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 8010460:	1d3b      	adds	r3, r7, #4
 8010462:	220a      	movs	r2, #10
 8010464:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8010466:	1d3b      	adds	r3, r7, #4
 8010468:	2200      	movs	r2, #0
 801046a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 801046c:	1d3b      	adds	r3, r7, #4
 801046e:	2200      	movs	r2, #0
 8010470:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010472:	1d3b      	adds	r3, r7, #4
 8010474:	2200      	movs	r2, #0
 8010476:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010478:	1d3b      	adds	r3, r7, #4
 801047a:	2200      	movs	r2, #0
 801047c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801047e:	1d39      	adds	r1, r7, #4
 8010480:	4b16      	ldr	r3, [pc, #88]	; (80104dc <MX_RTC_Init+0xe4>)
 8010482:	2200      	movs	r2, #0
 8010484:	0018      	movs	r0, r3
 8010486:	f7f8 fb23 	bl	8008ad0 <HAL_RTC_SetTime>
 801048a:	1e03      	subs	r3, r0, #0
 801048c:	d001      	beq.n	8010492 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 801048e:	f000 f981 	bl	8010794 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8010492:	003b      	movs	r3, r7
 8010494:	2202      	movs	r2, #2
 8010496:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8010498:	003b      	movs	r3, r7
 801049a:	2204      	movs	r2, #4
 801049c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 801049e:	003b      	movs	r3, r7
 80104a0:	2214      	movs	r2, #20
 80104a2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 80104a4:	003b      	movs	r3, r7
 80104a6:	2214      	movs	r2, #20
 80104a8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80104aa:	0039      	movs	r1, r7
 80104ac:	4b0b      	ldr	r3, [pc, #44]	; (80104dc <MX_RTC_Init+0xe4>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	0018      	movs	r0, r3
 80104b2:	f7f8 fc11 	bl	8008cd8 <HAL_RTC_SetDate>
 80104b6:	1e03      	subs	r3, r0, #0
 80104b8:	d001      	beq.n	80104be <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80104ba:	f000 f96b 	bl	8010794 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 65535, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80104be:	4909      	ldr	r1, [pc, #36]	; (80104e4 <MX_RTC_Init+0xec>)
 80104c0:	4b06      	ldr	r3, [pc, #24]	; (80104dc <MX_RTC_Init+0xe4>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	0018      	movs	r0, r3
 80104c6:	f7f8 fddb 	bl	8009080 <HAL_RTCEx_SetWakeUpTimer_IT>
 80104ca:	1e03      	subs	r3, r0, #0
 80104cc:	d001      	beq.n	80104d2 <MX_RTC_Init+0xda>
  {
    Error_Handler();
 80104ce:	f000 f961 	bl	8010794 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80104d2:	46c0      	nop			; (mov r8, r8)
 80104d4:	46bd      	mov	sp, r7
 80104d6:	b006      	add	sp, #24
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	46c0      	nop			; (mov r8, r8)
 80104dc:	2000051c 	.word	0x2000051c
 80104e0:	40002800 	.word	0x40002800
 80104e4:	0000ffff 	.word	0x0000ffff

080104e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80104ec:	4b1b      	ldr	r3, [pc, #108]	; (801055c <MX_SPI1_Init+0x74>)
 80104ee:	4a1c      	ldr	r2, [pc, #112]	; (8010560 <MX_SPI1_Init+0x78>)
 80104f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80104f2:	4b1a      	ldr	r3, [pc, #104]	; (801055c <MX_SPI1_Init+0x74>)
 80104f4:	2282      	movs	r2, #130	; 0x82
 80104f6:	0052      	lsls	r2, r2, #1
 80104f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80104fa:	4b18      	ldr	r3, [pc, #96]	; (801055c <MX_SPI1_Init+0x74>)
 80104fc:	2200      	movs	r2, #0
 80104fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010500:	4b16      	ldr	r3, [pc, #88]	; (801055c <MX_SPI1_Init+0x74>)
 8010502:	22e0      	movs	r2, #224	; 0xe0
 8010504:	00d2      	lsls	r2, r2, #3
 8010506:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010508:	4b14      	ldr	r3, [pc, #80]	; (801055c <MX_SPI1_Init+0x74>)
 801050a:	2200      	movs	r2, #0
 801050c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801050e:	4b13      	ldr	r3, [pc, #76]	; (801055c <MX_SPI1_Init+0x74>)
 8010510:	2200      	movs	r2, #0
 8010512:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010514:	4b11      	ldr	r3, [pc, #68]	; (801055c <MX_SPI1_Init+0x74>)
 8010516:	2280      	movs	r2, #128	; 0x80
 8010518:	0092      	lsls	r2, r2, #2
 801051a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801051c:	4b0f      	ldr	r3, [pc, #60]	; (801055c <MX_SPI1_Init+0x74>)
 801051e:	2218      	movs	r2, #24
 8010520:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010522:	4b0e      	ldr	r3, [pc, #56]	; (801055c <MX_SPI1_Init+0x74>)
 8010524:	2200      	movs	r2, #0
 8010526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010528:	4b0c      	ldr	r3, [pc, #48]	; (801055c <MX_SPI1_Init+0x74>)
 801052a:	2200      	movs	r2, #0
 801052c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801052e:	4b0b      	ldr	r3, [pc, #44]	; (801055c <MX_SPI1_Init+0x74>)
 8010530:	2200      	movs	r2, #0
 8010532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8010534:	4b09      	ldr	r3, [pc, #36]	; (801055c <MX_SPI1_Init+0x74>)
 8010536:	2207      	movs	r2, #7
 8010538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801053a:	4b08      	ldr	r3, [pc, #32]	; (801055c <MX_SPI1_Init+0x74>)
 801053c:	2200      	movs	r2, #0
 801053e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010540:	4b06      	ldr	r3, [pc, #24]	; (801055c <MX_SPI1_Init+0x74>)
 8010542:	2208      	movs	r2, #8
 8010544:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010546:	4b05      	ldr	r3, [pc, #20]	; (801055c <MX_SPI1_Init+0x74>)
 8010548:	0018      	movs	r0, r3
 801054a:	f7f8 fe59 	bl	8009200 <HAL_SPI_Init>
 801054e:	1e03      	subs	r3, r0, #0
 8010550:	d001      	beq.n	8010556 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8010552:	f000 f91f 	bl	8010794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8010556:	46c0      	nop			; (mov r8, r8)
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	20000548 	.word	0x20000548
 8010560:	40013000 	.word	0x40013000

08010564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b088      	sub	sp, #32
 8010568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801056a:	2310      	movs	r3, #16
 801056c:	18fb      	adds	r3, r7, r3
 801056e:	0018      	movs	r0, r3
 8010570:	2310      	movs	r3, #16
 8010572:	001a      	movs	r2, r3
 8010574:	2100      	movs	r1, #0
 8010576:	f000 fc81 	bl	8010e7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801057a:	1d3b      	adds	r3, r7, #4
 801057c:	0018      	movs	r0, r3
 801057e:	230c      	movs	r3, #12
 8010580:	001a      	movs	r2, r3
 8010582:	2100      	movs	r1, #0
 8010584:	f000 fc7a 	bl	8010e7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8010588:	4b1e      	ldr	r3, [pc, #120]	; (8010604 <MX_TIM3_Init+0xa0>)
 801058a:	4a1f      	ldr	r2, [pc, #124]	; (8010608 <MX_TIM3_Init+0xa4>)
 801058c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 801058e:	4b1d      	ldr	r3, [pc, #116]	; (8010604 <MX_TIM3_Init+0xa0>)
 8010590:	4a1e      	ldr	r2, [pc, #120]	; (801060c <MX_TIM3_Init+0xa8>)
 8010592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010594:	4b1b      	ldr	r3, [pc, #108]	; (8010604 <MX_TIM3_Init+0xa0>)
 8010596:	2200      	movs	r2, #0
 8010598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 801059a:	4b1a      	ldr	r3, [pc, #104]	; (8010604 <MX_TIM3_Init+0xa0>)
 801059c:	4a1c      	ldr	r2, [pc, #112]	; (8010610 <MX_TIM3_Init+0xac>)
 801059e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80105a0:	4b18      	ldr	r3, [pc, #96]	; (8010604 <MX_TIM3_Init+0xa0>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80105a6:	4b17      	ldr	r3, [pc, #92]	; (8010604 <MX_TIM3_Init+0xa0>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80105ac:	4b15      	ldr	r3, [pc, #84]	; (8010604 <MX_TIM3_Init+0xa0>)
 80105ae:	0018      	movs	r0, r3
 80105b0:	f7f9 f9a0 	bl	80098f4 <HAL_TIM_Base_Init>
 80105b4:	1e03      	subs	r3, r0, #0
 80105b6:	d001      	beq.n	80105bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80105b8:	f000 f8ec 	bl	8010794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80105bc:	2110      	movs	r1, #16
 80105be:	187b      	adds	r3, r7, r1
 80105c0:	2280      	movs	r2, #128	; 0x80
 80105c2:	0152      	lsls	r2, r2, #5
 80105c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80105c6:	187a      	adds	r2, r7, r1
 80105c8:	4b0e      	ldr	r3, [pc, #56]	; (8010604 <MX_TIM3_Init+0xa0>)
 80105ca:	0011      	movs	r1, r2
 80105cc:	0018      	movs	r0, r3
 80105ce:	f7f9 fb71 	bl	8009cb4 <HAL_TIM_ConfigClockSource>
 80105d2:	1e03      	subs	r3, r0, #0
 80105d4:	d001      	beq.n	80105da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80105d6:	f000 f8dd 	bl	8010794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80105da:	1d3b      	adds	r3, r7, #4
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80105e0:	1d3b      	adds	r3, r7, #4
 80105e2:	2200      	movs	r2, #0
 80105e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80105e6:	1d3a      	adds	r2, r7, #4
 80105e8:	4b06      	ldr	r3, [pc, #24]	; (8010604 <MX_TIM3_Init+0xa0>)
 80105ea:	0011      	movs	r1, r2
 80105ec:	0018      	movs	r0, r3
 80105ee:	f7f9 fd5f 	bl	800a0b0 <HAL_TIMEx_MasterConfigSynchronization>
 80105f2:	1e03      	subs	r3, r0, #0
 80105f4:	d001      	beq.n	80105fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80105f6:	f000 f8cd 	bl	8010794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80105fa:	46c0      	nop			; (mov r8, r8)
 80105fc:	46bd      	mov	sp, r7
 80105fe:	b008      	add	sp, #32
 8010600:	bd80      	pop	{r7, pc}
 8010602:	46c0      	nop			; (mov r8, r8)
 8010604:	20000244 	.word	0x20000244
 8010608:	40000400 	.word	0x40000400
 801060c:	00000c7f 	.word	0x00000c7f
 8010610:	00004e1f 	.word	0x00004e1f

08010614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801061a:	4b0c      	ldr	r3, [pc, #48]	; (801064c <MX_DMA_Init+0x38>)
 801061c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801061e:	4b0b      	ldr	r3, [pc, #44]	; (801064c <MX_DMA_Init+0x38>)
 8010620:	2101      	movs	r1, #1
 8010622:	430a      	orrs	r2, r1
 8010624:	639a      	str	r2, [r3, #56]	; 0x38
 8010626:	4b09      	ldr	r3, [pc, #36]	; (801064c <MX_DMA_Init+0x38>)
 8010628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062a:	2201      	movs	r2, #1
 801062c:	4013      	ands	r3, r2
 801062e:	607b      	str	r3, [r7, #4]
 8010630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8010632:	2200      	movs	r2, #0
 8010634:	2100      	movs	r1, #0
 8010636:	2009      	movs	r0, #9
 8010638:	f7f6 f936 	bl	80068a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801063c:	2009      	movs	r0, #9
 801063e:	f7f6 f948 	bl	80068d2 <HAL_NVIC_EnableIRQ>

}
 8010642:	46c0      	nop			; (mov r8, r8)
 8010644:	46bd      	mov	sp, r7
 8010646:	b002      	add	sp, #8
 8010648:	bd80      	pop	{r7, pc}
 801064a:	46c0      	nop			; (mov r8, r8)
 801064c:	40021000 	.word	0x40021000

08010650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010650:	b590      	push	{r4, r7, lr}
 8010652:	b089      	sub	sp, #36	; 0x24
 8010654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010656:	240c      	movs	r4, #12
 8010658:	193b      	adds	r3, r7, r4
 801065a:	0018      	movs	r0, r3
 801065c:	2314      	movs	r3, #20
 801065e:	001a      	movs	r2, r3
 8010660:	2100      	movs	r1, #0
 8010662:	f000 fc0b 	bl	8010e7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010666:	4b48      	ldr	r3, [pc, #288]	; (8010788 <MX_GPIO_Init+0x138>)
 8010668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801066a:	4b47      	ldr	r3, [pc, #284]	; (8010788 <MX_GPIO_Init+0x138>)
 801066c:	2104      	movs	r1, #4
 801066e:	430a      	orrs	r2, r1
 8010670:	635a      	str	r2, [r3, #52]	; 0x34
 8010672:	4b45      	ldr	r3, [pc, #276]	; (8010788 <MX_GPIO_Init+0x138>)
 8010674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010676:	2204      	movs	r2, #4
 8010678:	4013      	ands	r3, r2
 801067a:	60bb      	str	r3, [r7, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801067e:	4b42      	ldr	r3, [pc, #264]	; (8010788 <MX_GPIO_Init+0x138>)
 8010680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010682:	4b41      	ldr	r3, [pc, #260]	; (8010788 <MX_GPIO_Init+0x138>)
 8010684:	2101      	movs	r1, #1
 8010686:	430a      	orrs	r2, r1
 8010688:	635a      	str	r2, [r3, #52]	; 0x34
 801068a:	4b3f      	ldr	r3, [pc, #252]	; (8010788 <MX_GPIO_Init+0x138>)
 801068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801068e:	2201      	movs	r2, #1
 8010690:	4013      	ands	r3, r2
 8010692:	607b      	str	r3, [r7, #4]
 8010694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010696:	4b3c      	ldr	r3, [pc, #240]	; (8010788 <MX_GPIO_Init+0x138>)
 8010698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801069a:	4b3b      	ldr	r3, [pc, #236]	; (8010788 <MX_GPIO_Init+0x138>)
 801069c:	2102      	movs	r1, #2
 801069e:	430a      	orrs	r2, r1
 80106a0:	635a      	str	r2, [r3, #52]	; 0x34
 80106a2:	4b39      	ldr	r3, [pc, #228]	; (8010788 <MX_GPIO_Init+0x138>)
 80106a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a6:	2202      	movs	r2, #2
 80106a8:	4013      	ands	r3, r2
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80106ae:	23e0      	movs	r3, #224	; 0xe0
 80106b0:	00d9      	lsls	r1, r3, #3
 80106b2:	23a0      	movs	r3, #160	; 0xa0
 80106b4:	05db      	lsls	r3, r3, #23
 80106b6:	2200      	movs	r2, #0
 80106b8:	0018      	movs	r0, r3
 80106ba:	f7f6 fcfa 	bl	80070b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80106be:	4b33      	ldr	r3, [pc, #204]	; (801078c <MX_GPIO_Init+0x13c>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	2140      	movs	r1, #64	; 0x40
 80106c4:	0018      	movs	r0, r3
 80106c6:	f7f6 fcf4 	bl	80070b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin SET_Pin RESET_Pin */
  GPIO_InitStruct.Pin = START_Pin|SET_Pin|RESET_Pin;
 80106ca:	193b      	adds	r3, r7, r4
 80106cc:	221c      	movs	r2, #28
 80106ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80106d0:	193b      	adds	r3, r7, r4
 80106d2:	4a2f      	ldr	r2, [pc, #188]	; (8010790 <MX_GPIO_Init+0x140>)
 80106d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80106d6:	193b      	adds	r3, r7, r4
 80106d8:	2201      	movs	r2, #1
 80106da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106dc:	193a      	adds	r2, r7, r4
 80106de:	23a0      	movs	r3, #160	; 0xa0
 80106e0:	05db      	lsls	r3, r3, #23
 80106e2:	0011      	movs	r1, r2
 80106e4:	0018      	movs	r0, r3
 80106e6:	f7f6 fb63 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DC_Pin|RST_Pin;
 80106ea:	0021      	movs	r1, r4
 80106ec:	187b      	adds	r3, r7, r1
 80106ee:	22e0      	movs	r2, #224	; 0xe0
 80106f0:	00d2      	lsls	r2, r2, #3
 80106f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106f4:	000c      	movs	r4, r1
 80106f6:	193b      	adds	r3, r7, r4
 80106f8:	2201      	movs	r2, #1
 80106fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106fc:	193b      	adds	r3, r7, r4
 80106fe:	2200      	movs	r2, #0
 8010700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010702:	193b      	adds	r3, r7, r4
 8010704:	2200      	movs	r2, #0
 8010706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010708:	193a      	adds	r2, r7, r4
 801070a:	23a0      	movs	r3, #160	; 0xa0
 801070c:	05db      	lsls	r3, r3, #23
 801070e:	0011      	movs	r1, r2
 8010710:	0018      	movs	r0, r3
 8010712:	f7f6 fb4d 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8010716:	193b      	adds	r3, r7, r4
 8010718:	2280      	movs	r2, #128	; 0x80
 801071a:	0152      	lsls	r2, r2, #5
 801071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801071e:	193b      	adds	r3, r7, r4
 8010720:	2200      	movs	r2, #0
 8010722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010724:	193b      	adds	r3, r7, r4
 8010726:	2200      	movs	r2, #0
 8010728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 801072a:	193a      	adds	r2, r7, r4
 801072c:	23a0      	movs	r3, #160	; 0xa0
 801072e:	05db      	lsls	r3, r3, #23
 8010730:	0011      	movs	r1, r2
 8010732:	0018      	movs	r0, r3
 8010734:	f7f6 fb3c 	bl	8006db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8010738:	0021      	movs	r1, r4
 801073a:	187b      	adds	r3, r7, r1
 801073c:	2240      	movs	r2, #64	; 0x40
 801073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010740:	187b      	adds	r3, r7, r1
 8010742:	2201      	movs	r2, #1
 8010744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010746:	187b      	adds	r3, r7, r1
 8010748:	2200      	movs	r2, #0
 801074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801074c:	187b      	adds	r3, r7, r1
 801074e:	2200      	movs	r2, #0
 8010750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8010752:	187b      	adds	r3, r7, r1
 8010754:	4a0d      	ldr	r2, [pc, #52]	; (801078c <MX_GPIO_Init+0x13c>)
 8010756:	0019      	movs	r1, r3
 8010758:	0010      	movs	r0, r2
 801075a:	f7f6 fb29 	bl	8006db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 801075e:	2200      	movs	r2, #0
 8010760:	2102      	movs	r1, #2
 8010762:	2006      	movs	r0, #6
 8010764:	f7f6 f8a0 	bl	80068a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8010768:	2006      	movs	r0, #6
 801076a:	f7f6 f8b2 	bl	80068d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 801076e:	2200      	movs	r2, #0
 8010770:	2102      	movs	r1, #2
 8010772:	2007      	movs	r0, #7
 8010774:	f7f6 f898 	bl	80068a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8010778:	2007      	movs	r0, #7
 801077a:	f7f6 f8aa 	bl	80068d2 <HAL_NVIC_EnableIRQ>

}
 801077e:	46c0      	nop			; (mov r8, r8)
 8010780:	46bd      	mov	sp, r7
 8010782:	b009      	add	sp, #36	; 0x24
 8010784:	bd90      	pop	{r4, r7, pc}
 8010786:	46c0      	nop			; (mov r8, r8)
 8010788:	40021000 	.word	0x40021000
 801078c:	50000400 	.word	0x50000400
 8010790:	10210000 	.word	0x10210000

08010794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010798:	46c0      	nop			; (mov r8, r8)
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80107a6:	4b11      	ldr	r3, [pc, #68]	; (80107ec <HAL_MspInit+0x4c>)
 80107a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80107aa:	4b10      	ldr	r3, [pc, #64]	; (80107ec <HAL_MspInit+0x4c>)
 80107ac:	2101      	movs	r1, #1
 80107ae:	430a      	orrs	r2, r1
 80107b0:	641a      	str	r2, [r3, #64]	; 0x40
 80107b2:	4b0e      	ldr	r3, [pc, #56]	; (80107ec <HAL_MspInit+0x4c>)
 80107b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b6:	2201      	movs	r2, #1
 80107b8:	4013      	ands	r3, r2
 80107ba:	607b      	str	r3, [r7, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80107be:	4b0b      	ldr	r3, [pc, #44]	; (80107ec <HAL_MspInit+0x4c>)
 80107c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107c2:	4b0a      	ldr	r3, [pc, #40]	; (80107ec <HAL_MspInit+0x4c>)
 80107c4:	2180      	movs	r1, #128	; 0x80
 80107c6:	0549      	lsls	r1, r1, #21
 80107c8:	430a      	orrs	r2, r1
 80107ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80107cc:	4b07      	ldr	r3, [pc, #28]	; (80107ec <HAL_MspInit+0x4c>)
 80107ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107d0:	2380      	movs	r3, #128	; 0x80
 80107d2:	055b      	lsls	r3, r3, #21
 80107d4:	4013      	ands	r3, r2
 80107d6:	603b      	str	r3, [r7, #0]
 80107d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80107da:	23c0      	movs	r3, #192	; 0xc0
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	0018      	movs	r0, r3
 80107e0:	f7f5 f90c 	bl	80059fc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80107e4:	46c0      	nop			; (mov r8, r8)
 80107e6:	46bd      	mov	sp, r7
 80107e8:	b002      	add	sp, #8
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	40021000 	.word	0x40021000

080107f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80107f0:	b590      	push	{r4, r7, lr}
 80107f2:	b08b      	sub	sp, #44	; 0x2c
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107f8:	2414      	movs	r4, #20
 80107fa:	193b      	adds	r3, r7, r4
 80107fc:	0018      	movs	r0, r3
 80107fe:	2314      	movs	r3, #20
 8010800:	001a      	movs	r2, r3
 8010802:	2100      	movs	r1, #0
 8010804:	f000 fb3a 	bl	8010e7c <memset>
  if(hadc->Instance==ADC1)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4a2d      	ldr	r2, [pc, #180]	; (80108c4 <HAL_ADC_MspInit+0xd4>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d154      	bne.n	80108bc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8010812:	4b2d      	ldr	r3, [pc, #180]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 8010814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010816:	4b2c      	ldr	r3, [pc, #176]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 8010818:	2180      	movs	r1, #128	; 0x80
 801081a:	0349      	lsls	r1, r1, #13
 801081c:	430a      	orrs	r2, r1
 801081e:	641a      	str	r2, [r3, #64]	; 0x40
 8010820:	4b29      	ldr	r3, [pc, #164]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 8010822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010824:	2380      	movs	r3, #128	; 0x80
 8010826:	035b      	lsls	r3, r3, #13
 8010828:	4013      	ands	r3, r2
 801082a:	613b      	str	r3, [r7, #16]
 801082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801082e:	4b26      	ldr	r3, [pc, #152]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 8010830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010832:	4b25      	ldr	r3, [pc, #148]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 8010834:	2101      	movs	r1, #1
 8010836:	430a      	orrs	r2, r1
 8010838:	635a      	str	r2, [r3, #52]	; 0x34
 801083a:	4b23      	ldr	r3, [pc, #140]	; (80108c8 <HAL_ADC_MspInit+0xd8>)
 801083c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083e:	2201      	movs	r2, #1
 8010840:	4013      	ands	r3, r2
 8010842:	60fb      	str	r3, [r7, #12]
 8010844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PASSIVE_Pin|BATT_Pin|ACTIVE_Pin;
 8010846:	193b      	adds	r3, r7, r4
 8010848:	2223      	movs	r2, #35	; 0x23
 801084a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801084c:	193b      	adds	r3, r7, r4
 801084e:	2203      	movs	r2, #3
 8010850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010852:	193b      	adds	r3, r7, r4
 8010854:	2200      	movs	r2, #0
 8010856:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010858:	193a      	adds	r2, r7, r4
 801085a:	23a0      	movs	r3, #160	; 0xa0
 801085c:	05db      	lsls	r3, r3, #23
 801085e:	0011      	movs	r1, r2
 8010860:	0018      	movs	r0, r3
 8010862:	f7f6 faa5 	bl	8006db0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8010866:	4b19      	ldr	r3, [pc, #100]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 8010868:	4a19      	ldr	r2, [pc, #100]	; (80108d0 <HAL_ADC_MspInit+0xe0>)
 801086a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801086c:	4b17      	ldr	r3, [pc, #92]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 801086e:	2205      	movs	r2, #5
 8010870:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010872:	4b16      	ldr	r3, [pc, #88]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 8010874:	2200      	movs	r2, #0
 8010876:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010878:	4b14      	ldr	r3, [pc, #80]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 801087a:	2200      	movs	r2, #0
 801087c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 8010880:	2280      	movs	r2, #128	; 0x80
 8010882:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010884:	4b11      	ldr	r3, [pc, #68]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 8010886:	2280      	movs	r2, #128	; 0x80
 8010888:	0052      	lsls	r2, r2, #1
 801088a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801088c:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 801088e:	2280      	movs	r2, #128	; 0x80
 8010890:	00d2      	lsls	r2, r2, #3
 8010892:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010894:	4b0d      	ldr	r3, [pc, #52]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 8010896:	2220      	movs	r2, #32
 8010898:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801089a:	4b0c      	ldr	r3, [pc, #48]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 801089c:	2200      	movs	r2, #0
 801089e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80108a0:	4b0a      	ldr	r3, [pc, #40]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 80108a2:	0018      	movs	r0, r3
 80108a4:	f7f6 f832 	bl	800690c <HAL_DMA_Init>
 80108a8:	1e03      	subs	r3, r0, #0
 80108aa:	d001      	beq.n	80108b0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80108ac:	f7ff ff72 	bl	8010794 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a06      	ldr	r2, [pc, #24]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 80108b4:	651a      	str	r2, [r3, #80]	; 0x50
 80108b6:	4b05      	ldr	r3, [pc, #20]	; (80108cc <HAL_ADC_MspInit+0xdc>)
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80108bc:	46c0      	nop			; (mov r8, r8)
 80108be:	46bd      	mov	sp, r7
 80108c0:	b00b      	add	sp, #44	; 0x2c
 80108c2:	bd90      	pop	{r4, r7, pc}
 80108c4:	40012400 	.word	0x40012400
 80108c8:	40021000 	.word	0x40021000
 80108cc:	200004c0 	.word	0x200004c0
 80108d0:	40020008 	.word	0x40020008

080108d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80108d4:	b590      	push	{r4, r7, lr}
 80108d6:	b08b      	sub	sp, #44	; 0x2c
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108dc:	2414      	movs	r4, #20
 80108de:	193b      	adds	r3, r7, r4
 80108e0:	0018      	movs	r0, r3
 80108e2:	2314      	movs	r3, #20
 80108e4:	001a      	movs	r2, r3
 80108e6:	2100      	movs	r1, #0
 80108e8:	f000 fac8 	bl	8010e7c <memset>
  if(hi2c->Instance==I2C1)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a1b      	ldr	r2, [pc, #108]	; (8010960 <HAL_I2C_MspInit+0x8c>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d130      	bne.n	8010958 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80108f6:	4b1b      	ldr	r3, [pc, #108]	; (8010964 <HAL_I2C_MspInit+0x90>)
 80108f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108fa:	4b1a      	ldr	r3, [pc, #104]	; (8010964 <HAL_I2C_MspInit+0x90>)
 80108fc:	2102      	movs	r1, #2
 80108fe:	430a      	orrs	r2, r1
 8010900:	635a      	str	r2, [r3, #52]	; 0x34
 8010902:	4b18      	ldr	r3, [pc, #96]	; (8010964 <HAL_I2C_MspInit+0x90>)
 8010904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010906:	2202      	movs	r2, #2
 8010908:	4013      	ands	r3, r2
 801090a:	613b      	str	r3, [r7, #16]
 801090c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801090e:	193b      	adds	r3, r7, r4
 8010910:	22c0      	movs	r2, #192	; 0xc0
 8010912:	0052      	lsls	r2, r2, #1
 8010914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010916:	0021      	movs	r1, r4
 8010918:	187b      	adds	r3, r7, r1
 801091a:	2212      	movs	r2, #18
 801091c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801091e:	187b      	adds	r3, r7, r1
 8010920:	2201      	movs	r2, #1
 8010922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010924:	187b      	adds	r3, r7, r1
 8010926:	2200      	movs	r2, #0
 8010928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 801092a:	187b      	adds	r3, r7, r1
 801092c:	2206      	movs	r2, #6
 801092e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010930:	187b      	adds	r3, r7, r1
 8010932:	4a0d      	ldr	r2, [pc, #52]	; (8010968 <HAL_I2C_MspInit+0x94>)
 8010934:	0019      	movs	r1, r3
 8010936:	0010      	movs	r0, r2
 8010938:	f7f6 fa3a 	bl	8006db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801093c:	4b09      	ldr	r3, [pc, #36]	; (8010964 <HAL_I2C_MspInit+0x90>)
 801093e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010940:	4b08      	ldr	r3, [pc, #32]	; (8010964 <HAL_I2C_MspInit+0x90>)
 8010942:	2180      	movs	r1, #128	; 0x80
 8010944:	0389      	lsls	r1, r1, #14
 8010946:	430a      	orrs	r2, r1
 8010948:	63da      	str	r2, [r3, #60]	; 0x3c
 801094a:	4b06      	ldr	r3, [pc, #24]	; (8010964 <HAL_I2C_MspInit+0x90>)
 801094c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801094e:	2380      	movs	r3, #128	; 0x80
 8010950:	039b      	lsls	r3, r3, #14
 8010952:	4013      	ands	r3, r2
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8010958:	46c0      	nop			; (mov r8, r8)
 801095a:	46bd      	mov	sp, r7
 801095c:	b00b      	add	sp, #44	; 0x2c
 801095e:	bd90      	pop	{r4, r7, pc}
 8010960:	40005400 	.word	0x40005400
 8010964:	40021000 	.word	0x40021000
 8010968:	50000400 	.word	0x50000400

0801096c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a11      	ldr	r2, [pc, #68]	; (80109c0 <HAL_RTC_MspInit+0x54>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d11c      	bne.n	80109b8 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801097e:	4b11      	ldr	r3, [pc, #68]	; (80109c4 <HAL_RTC_MspInit+0x58>)
 8010980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010982:	4b10      	ldr	r3, [pc, #64]	; (80109c4 <HAL_RTC_MspInit+0x58>)
 8010984:	2180      	movs	r1, #128	; 0x80
 8010986:	0209      	lsls	r1, r1, #8
 8010988:	430a      	orrs	r2, r1
 801098a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801098c:	4b0d      	ldr	r3, [pc, #52]	; (80109c4 <HAL_RTC_MspInit+0x58>)
 801098e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010990:	4b0c      	ldr	r3, [pc, #48]	; (80109c4 <HAL_RTC_MspInit+0x58>)
 8010992:	2180      	movs	r1, #128	; 0x80
 8010994:	00c9      	lsls	r1, r1, #3
 8010996:	430a      	orrs	r2, r1
 8010998:	63da      	str	r2, [r3, #60]	; 0x3c
 801099a:	4b0a      	ldr	r3, [pc, #40]	; (80109c4 <HAL_RTC_MspInit+0x58>)
 801099c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801099e:	2380      	movs	r3, #128	; 0x80
 80109a0:	00db      	lsls	r3, r3, #3
 80109a2:	4013      	ands	r3, r2
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 1, 0);
 80109a8:	2200      	movs	r2, #0
 80109aa:	2101      	movs	r1, #1
 80109ac:	2002      	movs	r0, #2
 80109ae:	f7f5 ff7b 	bl	80068a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80109b2:	2002      	movs	r0, #2
 80109b4:	f7f5 ff8d 	bl	80068d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80109b8:	46c0      	nop			; (mov r8, r8)
 80109ba:	46bd      	mov	sp, r7
 80109bc:	b004      	add	sp, #16
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	40002800 	.word	0x40002800
 80109c4:	40021000 	.word	0x40021000

080109c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80109c8:	b590      	push	{r4, r7, lr}
 80109ca:	b08b      	sub	sp, #44	; 0x2c
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109d0:	2414      	movs	r4, #20
 80109d2:	193b      	adds	r3, r7, r4
 80109d4:	0018      	movs	r0, r3
 80109d6:	2314      	movs	r3, #20
 80109d8:	001a      	movs	r2, r3
 80109da:	2100      	movs	r1, #0
 80109dc:	f000 fa4e 	bl	8010e7c <memset>
  if(hspi->Instance==SPI1)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a2c      	ldr	r2, [pc, #176]	; (8010a98 <HAL_SPI_MspInit+0xd0>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d151      	bne.n	8010a8e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80109ea:	4b2c      	ldr	r3, [pc, #176]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 80109ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109ee:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 80109f0:	2180      	movs	r1, #128	; 0x80
 80109f2:	0149      	lsls	r1, r1, #5
 80109f4:	430a      	orrs	r2, r1
 80109f6:	641a      	str	r2, [r3, #64]	; 0x40
 80109f8:	4b28      	ldr	r3, [pc, #160]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 80109fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109fc:	2380      	movs	r3, #128	; 0x80
 80109fe:	015b      	lsls	r3, r3, #5
 8010a00:	4013      	ands	r3, r2
 8010a02:	613b      	str	r3, [r7, #16]
 8010a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a06:	4b25      	ldr	r3, [pc, #148]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a0a:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	430a      	orrs	r2, r1
 8010a10:	635a      	str	r2, [r3, #52]	; 0x34
 8010a12:	4b22      	ldr	r3, [pc, #136]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a16:	2201      	movs	r2, #1
 8010a18:	4013      	ands	r3, r2
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010a1e:	4b1f      	ldr	r3, [pc, #124]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a22:	4b1e      	ldr	r3, [pc, #120]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a24:	2102      	movs	r1, #2
 8010a26:	430a      	orrs	r2, r1
 8010a28:	635a      	str	r2, [r3, #52]	; 0x34
 8010a2a:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <HAL_SPI_MspInit+0xd4>)
 8010a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2e:	2202      	movs	r2, #2
 8010a30:	4013      	ands	r3, r2
 8010a32:	60bb      	str	r3, [r7, #8]
 8010a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010a36:	193b      	adds	r3, r7, r4
 8010a38:	2280      	movs	r2, #128	; 0x80
 8010a3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a3c:	193b      	adds	r3, r7, r4
 8010a3e:	2202      	movs	r2, #2
 8010a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a42:	193b      	adds	r3, r7, r4
 8010a44:	2200      	movs	r2, #0
 8010a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010a48:	193b      	adds	r3, r7, r4
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8010a4e:	193b      	adds	r3, r7, r4
 8010a50:	2200      	movs	r2, #0
 8010a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a54:	193a      	adds	r2, r7, r4
 8010a56:	23a0      	movs	r3, #160	; 0xa0
 8010a58:	05db      	lsls	r3, r3, #23
 8010a5a:	0011      	movs	r1, r2
 8010a5c:	0018      	movs	r0, r3
 8010a5e:	f7f6 f9a7 	bl	8006db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010a62:	0021      	movs	r1, r4
 8010a64:	187b      	adds	r3, r7, r1
 8010a66:	2208      	movs	r2, #8
 8010a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a6a:	187b      	adds	r3, r7, r1
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a70:	187b      	adds	r3, r7, r1
 8010a72:	2200      	movs	r2, #0
 8010a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010a76:	187b      	adds	r3, r7, r1
 8010a78:	2202      	movs	r2, #2
 8010a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8010a7c:	187b      	adds	r3, r7, r1
 8010a7e:	2200      	movs	r2, #0
 8010a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010a82:	187b      	adds	r3, r7, r1
 8010a84:	4a06      	ldr	r2, [pc, #24]	; (8010aa0 <HAL_SPI_MspInit+0xd8>)
 8010a86:	0019      	movs	r1, r3
 8010a88:	0010      	movs	r0, r2
 8010a8a:	f7f6 f991 	bl	8006db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8010a8e:	46c0      	nop			; (mov r8, r8)
 8010a90:	46bd      	mov	sp, r7
 8010a92:	b00b      	add	sp, #44	; 0x2c
 8010a94:	bd90      	pop	{r4, r7, pc}
 8010a96:	46c0      	nop			; (mov r8, r8)
 8010a98:	40013000 	.word	0x40013000
 8010a9c:	40021000 	.word	0x40021000
 8010aa0:	50000400 	.word	0x50000400

08010aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a0d      	ldr	r2, [pc, #52]	; (8010ae8 <HAL_TIM_Base_MspInit+0x44>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d113      	bne.n	8010ade <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <HAL_TIM_Base_MspInit+0x48>)
 8010ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010aba:	4b0c      	ldr	r3, [pc, #48]	; (8010aec <HAL_TIM_Base_MspInit+0x48>)
 8010abc:	2102      	movs	r1, #2
 8010abe:	430a      	orrs	r2, r1
 8010ac0:	63da      	str	r2, [r3, #60]	; 0x3c
 8010ac2:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <HAL_TIM_Base_MspInit+0x48>)
 8010ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	4013      	ands	r3, r2
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8010ace:	2200      	movs	r2, #0
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	2010      	movs	r0, #16
 8010ad4:	f7f5 fee8 	bl	80068a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8010ad8:	2010      	movs	r0, #16
 8010ada:	f7f5 fefa 	bl	80068d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8010ade:	46c0      	nop			; (mov r8, r8)
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	b004      	add	sp, #16
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	46c0      	nop			; (mov r8, r8)
 8010ae8:	40000400 	.word	0x40000400
 8010aec:	40021000 	.word	0x40021000

08010af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010af4:	e7fe      	b.n	8010af4 <NMI_Handler+0x4>

08010af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010afa:	e7fe      	b.n	8010afa <HardFault_Handler+0x4>

08010afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8010b00:	46c0      	nop			; (mov r8, r8)
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010b0a:	46c0      	nop			; (mov r8, r8)
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010b14:	f7f4 ff16 	bl	8005944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010b18:	46c0      	nop			; (mov r8, r8)
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8010b24:	4b03      	ldr	r3, [pc, #12]	; (8010b34 <RTC_TAMP_IRQHandler+0x14>)
 8010b26:	0018      	movs	r0, r3
 8010b28:	f7f8 fb44 	bl	80091b4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8010b2c:	46c0      	nop			; (mov r8, r8)
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	46c0      	nop			; (mov r8, r8)
 8010b34:	2000051c 	.word	0x2000051c

08010b38 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8010b3c:	2004      	movs	r0, #4
 8010b3e:	f7f6 fad5 	bl	80070ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8010b42:	2008      	movs	r0, #8
 8010b44:	f7f6 fad2 	bl	80070ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8010b48:	46c0      	nop			; (mov r8, r8)
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8010b52:	2010      	movs	r0, #16
 8010b54:	f7f6 faca 	bl	80070ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8010b58:	46c0      	nop			; (mov r8, r8)
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
	...

08010b60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010b64:	4b03      	ldr	r3, [pc, #12]	; (8010b74 <DMA1_Channel1_IRQHandler+0x14>)
 8010b66:	0018      	movs	r0, r3
 8010b68:	f7f5 ffe0 	bl	8006b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8010b6c:	46c0      	nop			; (mov r8, r8)
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	46c0      	nop			; (mov r8, r8)
 8010b74:	200004c0 	.word	0x200004c0

08010b78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010b7c:	4b03      	ldr	r3, [pc, #12]	; (8010b8c <TIM3_IRQHandler+0x14>)
 8010b7e:	0018      	movs	r0, r3
 8010b80:	f7f8 ff66 	bl	8009a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8010b84:	46c0      	nop			; (mov r8, r8)
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	46c0      	nop			; (mov r8, r8)
 8010b8c:	20000244 	.word	0x20000244

08010b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	617b      	str	r3, [r7, #20]
 8010ba0:	e00a      	b.n	8010bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010ba2:	e000      	b.n	8010ba6 <_read+0x16>
 8010ba4:	bf00      	nop
 8010ba6:	0001      	movs	r1, r0
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	60ba      	str	r2, [r7, #8]
 8010bae:	b2ca      	uxtb	r2, r1
 8010bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	617b      	str	r3, [r7, #20]
 8010bb8:	697a      	ldr	r2, [r7, #20]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	dbf0      	blt.n	8010ba2 <_read+0x12>
	}

return len;
 8010bc0:	687b      	ldr	r3, [r7, #4]
}
 8010bc2:	0018      	movs	r0, r3
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	b006      	add	sp, #24
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b086      	sub	sp, #24
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	60f8      	str	r0, [r7, #12]
 8010bd2:	60b9      	str	r1, [r7, #8]
 8010bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	617b      	str	r3, [r7, #20]
 8010bda:	e009      	b.n	8010bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	60ba      	str	r2, [r7, #8]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	0018      	movs	r0, r3
 8010be6:	e000      	b.n	8010bea <_write+0x20>
 8010be8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	3301      	adds	r3, #1
 8010bee:	617b      	str	r3, [r7, #20]
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	dbf1      	blt.n	8010bdc <_write+0x12>
	}
	return len;
 8010bf8:	687b      	ldr	r3, [r7, #4]
}
 8010bfa:	0018      	movs	r0, r3
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	b006      	add	sp, #24
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <_close>:

int _close(int file)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b082      	sub	sp, #8
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
	return -1;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	425b      	negs	r3, r3
}
 8010c0e:	0018      	movs	r0, r3
 8010c10:	46bd      	mov	sp, r7
 8010c12:	b002      	add	sp, #8
 8010c14:	bd80      	pop	{r7, pc}

08010c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010c16:	b580      	push	{r7, lr}
 8010c18:	b082      	sub	sp, #8
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
 8010c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2280      	movs	r2, #128	; 0x80
 8010c24:	0192      	lsls	r2, r2, #6
 8010c26:	605a      	str	r2, [r3, #4]
	return 0;
 8010c28:	2300      	movs	r3, #0
}
 8010c2a:	0018      	movs	r0, r3
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	b002      	add	sp, #8
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <_isatty>:

int _isatty(int file)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b082      	sub	sp, #8
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
	return 1;
 8010c3a:	2301      	movs	r3, #1
}
 8010c3c:	0018      	movs	r0, r3
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	b002      	add	sp, #8
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	0018      	movs	r0, r3
 8010c54:	46bd      	mov	sp, r7
 8010c56:	b004      	add	sp, #16
 8010c58:	bd80      	pop	{r7, pc}
	...

08010c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010c64:	4a14      	ldr	r2, [pc, #80]	; (8010cb8 <_sbrk+0x5c>)
 8010c66:	4b15      	ldr	r3, [pc, #84]	; (8010cbc <_sbrk+0x60>)
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010c70:	4b13      	ldr	r3, [pc, #76]	; (8010cc0 <_sbrk+0x64>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010c78:	4b11      	ldr	r3, [pc, #68]	; (8010cc0 <_sbrk+0x64>)
 8010c7a:	4a12      	ldr	r2, [pc, #72]	; (8010cc4 <_sbrk+0x68>)
 8010c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010c7e:	4b10      	ldr	r3, [pc, #64]	; (8010cc0 <_sbrk+0x64>)
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	18d3      	adds	r3, r2, r3
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d207      	bcs.n	8010c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010c8c:	f000 f8c2 	bl	8010e14 <__errno>
 8010c90:	0003      	movs	r3, r0
 8010c92:	220c      	movs	r2, #12
 8010c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010c96:	2301      	movs	r3, #1
 8010c98:	425b      	negs	r3, r3
 8010c9a:	e009      	b.n	8010cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010c9c:	4b08      	ldr	r3, [pc, #32]	; (8010cc0 <_sbrk+0x64>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010ca2:	4b07      	ldr	r3, [pc, #28]	; (8010cc0 <_sbrk+0x64>)
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	18d2      	adds	r2, r2, r3
 8010caa:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <_sbrk+0x64>)
 8010cac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8010cae:	68fb      	ldr	r3, [r7, #12]
}
 8010cb0:	0018      	movs	r0, r3
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	b006      	add	sp, #24
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	20009000 	.word	0x20009000
 8010cbc:	00000400 	.word	0x00000400
 8010cc0:	20000114 	.word	0x20000114
 8010cc4:	200005c0 	.word	0x200005c0

08010cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010ccc:	4b03      	ldr	r3, [pc, #12]	; (8010cdc <SystemInit+0x14>)
 8010cce:	2280      	movs	r2, #128	; 0x80
 8010cd0:	0512      	lsls	r2, r2, #20
 8010cd2:	609a      	str	r2, [r3, #8]
#endif
}
 8010cd4:	46c0      	nop			; (mov r8, r8)
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	46c0      	nop			; (mov r8, r8)
 8010cdc:	e000ed00 	.word	0xe000ed00

08010ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010ce0:	480d      	ldr	r0, [pc, #52]	; (8010d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010ce2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8010ce4:	f7ff fff0 	bl	8010cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010ce8:	480c      	ldr	r0, [pc, #48]	; (8010d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8010cea:	490d      	ldr	r1, [pc, #52]	; (8010d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010cec:	4a0d      	ldr	r2, [pc, #52]	; (8010d24 <LoopForever+0xe>)
  movs r3, #0
 8010cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010cf0:	e002      	b.n	8010cf8 <LoopCopyDataInit>

08010cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010cf6:	3304      	adds	r3, #4

08010cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010cfc:	d3f9      	bcc.n	8010cf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010cfe:	4a0a      	ldr	r2, [pc, #40]	; (8010d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010d00:	4c0a      	ldr	r4, [pc, #40]	; (8010d2c <LoopForever+0x16>)
  movs r3, #0
 8010d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010d04:	e001      	b.n	8010d0a <LoopFillZerobss>

08010d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010d08:	3204      	adds	r2, #4

08010d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010d0c:	d3fb      	bcc.n	8010d06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8010d0e:	f000 f887 	bl	8010e20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8010d12:	f7ff f8fb 	bl	800ff0c <main>

08010d16 <LoopForever>:

LoopForever:
  b LoopForever
 8010d16:	e7fe      	b.n	8010d16 <LoopForever>
  ldr   r0, =_estack
 8010d18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8010d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010d20:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8010d24:	08016230 	.word	0x08016230
  ldr r2, =_sbss
 8010d28:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8010d2c:	200005bc 	.word	0x200005bc

08010d30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8010d30:	e7fe      	b.n	8010d30 <ADC1_IRQHandler>
	...

08010d34 <timersInit>:
#include "../Timers/timers.h"

void timersInit(void) {
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8010d38:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <timersInit+0x2c>)
 8010d3a:	0018      	movs	r0, r3
 8010d3c:	f7f8 fe32 	bl	80099a4 <HAL_TIM_Base_Start_IT>
	counterForce = 0;
 8010d40:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <timersInit+0x30>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	701a      	strb	r2, [r3, #0]
	counterMultiplePress = 0;
 8010d46:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <timersInit+0x34>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	701a      	strb	r2, [r3, #0]
	flagLocked = UNLOCKED;
 8010d4c:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <timersInit+0x38>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	701a      	strb	r2, [r3, #0]
	counterSettings = 0;
 8010d52:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <timersInit+0x3c>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
}
 8010d58:	46c0      	nop			; (mov r8, r8)
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	46c0      	nop			; (mov r8, r8)
 8010d60:	20000244 	.word	0x20000244
 8010d64:	2000046a 	.word	0x2000046a
 8010d68:	20000470 	.word	0x20000470
 8010d6c:	20000333 	.word	0x20000333
 8010d70:	2000043c 	.word	0x2000043c

08010d74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d131      	bne.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x76>
		if (counterForce < ON_TIME) {
 8010d86:	4b1c      	ldr	r3, [pc, #112]	; (8010df8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b13      	cmp	r3, #19
 8010d8e:	d806      	bhi.n	8010d9e <HAL_TIM_PeriodElapsedCallback+0x2a>
			counterForce++;
 8010d90:	4b19      	ldr	r3, [pc, #100]	; (8010df8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	3301      	adds	r3, #1
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	4b17      	ldr	r3, [pc, #92]	; (8010df8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8010d9c:	701a      	strb	r2, [r3, #0]
		}

		counterMultiplePress = 0;
 8010d9e:	4b17      	ldr	r3, [pc, #92]	; (8010dfc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	701a      	strb	r2, [r3, #0]

		if (flagSettings == FLAG_SETTINGS_ON) {
 8010da4:	4b16      	ldr	r3, [pc, #88]	; (8010e00 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d11d      	bne.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x76>
			counterSettings--;
 8010dae:	4b15      	ldr	r3, [pc, #84]	; (8010e04 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	3b01      	subs	r3, #1
 8010db6:	b2da      	uxtb	r2, r3
 8010db8:	4b12      	ldr	r3, [pc, #72]	; (8010e04 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010dba:	701a      	strb	r2, [r3, #0]
			if (counterSettings <= 0) {
 8010dbc:	4b11      	ldr	r3, [pc, #68]	; (8010e04 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d111      	bne.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x76>
				flagSettings = FLAG_SETTINGS_OFF;
 8010dc6:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8010dc8:	2200      	movs	r2, #0
 8010dca:	701a      	strb	r2, [r3, #0]
				flagDontSleep = 1;
 8010dcc:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8010dce:	2201      	movs	r2, #1
 8010dd0:	701a      	strb	r2, [r3, #0]
				interfaceSelectColorScheme(colorScheme);
 8010dd2:	4b0e      	ldr	r3, [pc, #56]	; (8010e0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	0018      	movs	r0, r3
 8010dda:	f7f9 fdfb 	bl	800a9d4 <interfaceSelectColorScheme>
				interfaceSelectLayout(layout);
 8010dde:	4b0c      	ldr	r3, [pc, #48]	; (8010e10 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	0018      	movs	r0, r3
 8010de6:	f7f9 f9e3 	bl	800a1b0 <interfaceSelectLayout>
			}
		}

	}
}
 8010dea:	46c0      	nop			; (mov r8, r8)
 8010dec:	46bd      	mov	sp, r7
 8010dee:	b002      	add	sp, #8
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	46c0      	nop			; (mov r8, r8)
 8010df4:	40000400 	.word	0x40000400
 8010df8:	2000046a 	.word	0x2000046a
 8010dfc:	20000470 	.word	0x20000470
 8010e00:	20000335 	.word	0x20000335
 8010e04:	2000043c 	.word	0x2000043c
 8010e08:	20000469 	.word	0x20000469
 8010e0c:	20000468 	.word	0x20000468
 8010e10:	20000481 	.word	0x20000481

08010e14 <__errno>:
 8010e14:	4b01      	ldr	r3, [pc, #4]	; (8010e1c <__errno+0x8>)
 8010e16:	6818      	ldr	r0, [r3, #0]
 8010e18:	4770      	bx	lr
 8010e1a:	46c0      	nop			; (mov r8, r8)
 8010e1c:	20000084 	.word	0x20000084

08010e20 <__libc_init_array>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	2600      	movs	r6, #0
 8010e24:	4d0c      	ldr	r5, [pc, #48]	; (8010e58 <__libc_init_array+0x38>)
 8010e26:	4c0d      	ldr	r4, [pc, #52]	; (8010e5c <__libc_init_array+0x3c>)
 8010e28:	1b64      	subs	r4, r4, r5
 8010e2a:	10a4      	asrs	r4, r4, #2
 8010e2c:	42a6      	cmp	r6, r4
 8010e2e:	d109      	bne.n	8010e44 <__libc_init_array+0x24>
 8010e30:	2600      	movs	r6, #0
 8010e32:	f002 fc5d 	bl	80136f0 <_init>
 8010e36:	4d0a      	ldr	r5, [pc, #40]	; (8010e60 <__libc_init_array+0x40>)
 8010e38:	4c0a      	ldr	r4, [pc, #40]	; (8010e64 <__libc_init_array+0x44>)
 8010e3a:	1b64      	subs	r4, r4, r5
 8010e3c:	10a4      	asrs	r4, r4, #2
 8010e3e:	42a6      	cmp	r6, r4
 8010e40:	d105      	bne.n	8010e4e <__libc_init_array+0x2e>
 8010e42:	bd70      	pop	{r4, r5, r6, pc}
 8010e44:	00b3      	lsls	r3, r6, #2
 8010e46:	58eb      	ldr	r3, [r5, r3]
 8010e48:	4798      	blx	r3
 8010e4a:	3601      	adds	r6, #1
 8010e4c:	e7ee      	b.n	8010e2c <__libc_init_array+0xc>
 8010e4e:	00b3      	lsls	r3, r6, #2
 8010e50:	58eb      	ldr	r3, [r5, r3]
 8010e52:	4798      	blx	r3
 8010e54:	3601      	adds	r6, #1
 8010e56:	e7f2      	b.n	8010e3e <__libc_init_array+0x1e>
 8010e58:	08016228 	.word	0x08016228
 8010e5c:	08016228 	.word	0x08016228
 8010e60:	08016228 	.word	0x08016228
 8010e64:	0801622c 	.word	0x0801622c

08010e68 <malloc>:
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	4b03      	ldr	r3, [pc, #12]	; (8010e78 <malloc+0x10>)
 8010e6c:	0001      	movs	r1, r0
 8010e6e:	6818      	ldr	r0, [r3, #0]
 8010e70:	f000 f856 	bl	8010f20 <_malloc_r>
 8010e74:	bd10      	pop	{r4, pc}
 8010e76:	46c0      	nop			; (mov r8, r8)
 8010e78:	20000084 	.word	0x20000084

08010e7c <memset>:
 8010e7c:	0003      	movs	r3, r0
 8010e7e:	1882      	adds	r2, r0, r2
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d100      	bne.n	8010e86 <memset+0xa>
 8010e84:	4770      	bx	lr
 8010e86:	7019      	strb	r1, [r3, #0]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	e7f9      	b.n	8010e80 <memset+0x4>

08010e8c <_free_r>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	0005      	movs	r5, r0
 8010e90:	2900      	cmp	r1, #0
 8010e92:	d010      	beq.n	8010eb6 <_free_r+0x2a>
 8010e94:	1f0c      	subs	r4, r1, #4
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	da00      	bge.n	8010e9e <_free_r+0x12>
 8010e9c:	18e4      	adds	r4, r4, r3
 8010e9e:	0028      	movs	r0, r5
 8010ea0:	f000 fc70 	bl	8011784 <__malloc_lock>
 8010ea4:	4a1d      	ldr	r2, [pc, #116]	; (8010f1c <_free_r+0x90>)
 8010ea6:	6813      	ldr	r3, [r2, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d105      	bne.n	8010eb8 <_free_r+0x2c>
 8010eac:	6063      	str	r3, [r4, #4]
 8010eae:	6014      	str	r4, [r2, #0]
 8010eb0:	0028      	movs	r0, r5
 8010eb2:	f000 fc6f 	bl	8011794 <__malloc_unlock>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	d908      	bls.n	8010ece <_free_r+0x42>
 8010ebc:	6821      	ldr	r1, [r4, #0]
 8010ebe:	1860      	adds	r0, r4, r1
 8010ec0:	4283      	cmp	r3, r0
 8010ec2:	d1f3      	bne.n	8010eac <_free_r+0x20>
 8010ec4:	6818      	ldr	r0, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	1841      	adds	r1, r0, r1
 8010eca:	6021      	str	r1, [r4, #0]
 8010ecc:	e7ee      	b.n	8010eac <_free_r+0x20>
 8010ece:	001a      	movs	r2, r3
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <_free_r+0x4e>
 8010ed6:	42a3      	cmp	r3, r4
 8010ed8:	d9f9      	bls.n	8010ece <_free_r+0x42>
 8010eda:	6811      	ldr	r1, [r2, #0]
 8010edc:	1850      	adds	r0, r2, r1
 8010ede:	42a0      	cmp	r0, r4
 8010ee0:	d10b      	bne.n	8010efa <_free_r+0x6e>
 8010ee2:	6820      	ldr	r0, [r4, #0]
 8010ee4:	1809      	adds	r1, r1, r0
 8010ee6:	1850      	adds	r0, r2, r1
 8010ee8:	6011      	str	r1, [r2, #0]
 8010eea:	4283      	cmp	r3, r0
 8010eec:	d1e0      	bne.n	8010eb0 <_free_r+0x24>
 8010eee:	6818      	ldr	r0, [r3, #0]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	1841      	adds	r1, r0, r1
 8010ef4:	6011      	str	r1, [r2, #0]
 8010ef6:	6053      	str	r3, [r2, #4]
 8010ef8:	e7da      	b.n	8010eb0 <_free_r+0x24>
 8010efa:	42a0      	cmp	r0, r4
 8010efc:	d902      	bls.n	8010f04 <_free_r+0x78>
 8010efe:	230c      	movs	r3, #12
 8010f00:	602b      	str	r3, [r5, #0]
 8010f02:	e7d5      	b.n	8010eb0 <_free_r+0x24>
 8010f04:	6821      	ldr	r1, [r4, #0]
 8010f06:	1860      	adds	r0, r4, r1
 8010f08:	4283      	cmp	r3, r0
 8010f0a:	d103      	bne.n	8010f14 <_free_r+0x88>
 8010f0c:	6818      	ldr	r0, [r3, #0]
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	1841      	adds	r1, r0, r1
 8010f12:	6021      	str	r1, [r4, #0]
 8010f14:	6063      	str	r3, [r4, #4]
 8010f16:	6054      	str	r4, [r2, #4]
 8010f18:	e7ca      	b.n	8010eb0 <_free_r+0x24>
 8010f1a:	46c0      	nop			; (mov r8, r8)
 8010f1c:	20000118 	.word	0x20000118

08010f20 <_malloc_r>:
 8010f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f22:	2303      	movs	r3, #3
 8010f24:	1ccd      	adds	r5, r1, #3
 8010f26:	439d      	bics	r5, r3
 8010f28:	3508      	adds	r5, #8
 8010f2a:	0006      	movs	r6, r0
 8010f2c:	2d0c      	cmp	r5, #12
 8010f2e:	d21f      	bcs.n	8010f70 <_malloc_r+0x50>
 8010f30:	250c      	movs	r5, #12
 8010f32:	42a9      	cmp	r1, r5
 8010f34:	d81e      	bhi.n	8010f74 <_malloc_r+0x54>
 8010f36:	0030      	movs	r0, r6
 8010f38:	f000 fc24 	bl	8011784 <__malloc_lock>
 8010f3c:	4925      	ldr	r1, [pc, #148]	; (8010fd4 <_malloc_r+0xb4>)
 8010f3e:	680a      	ldr	r2, [r1, #0]
 8010f40:	0014      	movs	r4, r2
 8010f42:	2c00      	cmp	r4, #0
 8010f44:	d11a      	bne.n	8010f7c <_malloc_r+0x5c>
 8010f46:	4f24      	ldr	r7, [pc, #144]	; (8010fd8 <_malloc_r+0xb8>)
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d104      	bne.n	8010f58 <_malloc_r+0x38>
 8010f4e:	0021      	movs	r1, r4
 8010f50:	0030      	movs	r0, r6
 8010f52:	f000 f8d9 	bl	8011108 <_sbrk_r>
 8010f56:	6038      	str	r0, [r7, #0]
 8010f58:	0029      	movs	r1, r5
 8010f5a:	0030      	movs	r0, r6
 8010f5c:	f000 f8d4 	bl	8011108 <_sbrk_r>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d12b      	bne.n	8010fbc <_malloc_r+0x9c>
 8010f64:	230c      	movs	r3, #12
 8010f66:	0030      	movs	r0, r6
 8010f68:	6033      	str	r3, [r6, #0]
 8010f6a:	f000 fc13 	bl	8011794 <__malloc_unlock>
 8010f6e:	e003      	b.n	8010f78 <_malloc_r+0x58>
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	dade      	bge.n	8010f32 <_malloc_r+0x12>
 8010f74:	230c      	movs	r3, #12
 8010f76:	6033      	str	r3, [r6, #0]
 8010f78:	2000      	movs	r0, #0
 8010f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f7c:	6823      	ldr	r3, [r4, #0]
 8010f7e:	1b5b      	subs	r3, r3, r5
 8010f80:	d419      	bmi.n	8010fb6 <_malloc_r+0x96>
 8010f82:	2b0b      	cmp	r3, #11
 8010f84:	d903      	bls.n	8010f8e <_malloc_r+0x6e>
 8010f86:	6023      	str	r3, [r4, #0]
 8010f88:	18e4      	adds	r4, r4, r3
 8010f8a:	6025      	str	r5, [r4, #0]
 8010f8c:	e003      	b.n	8010f96 <_malloc_r+0x76>
 8010f8e:	6863      	ldr	r3, [r4, #4]
 8010f90:	42a2      	cmp	r2, r4
 8010f92:	d10e      	bne.n	8010fb2 <_malloc_r+0x92>
 8010f94:	600b      	str	r3, [r1, #0]
 8010f96:	0030      	movs	r0, r6
 8010f98:	f000 fbfc 	bl	8011794 <__malloc_unlock>
 8010f9c:	0020      	movs	r0, r4
 8010f9e:	2207      	movs	r2, #7
 8010fa0:	300b      	adds	r0, #11
 8010fa2:	1d23      	adds	r3, r4, #4
 8010fa4:	4390      	bics	r0, r2
 8010fa6:	1ac2      	subs	r2, r0, r3
 8010fa8:	4298      	cmp	r0, r3
 8010faa:	d0e6      	beq.n	8010f7a <_malloc_r+0x5a>
 8010fac:	1a1b      	subs	r3, r3, r0
 8010fae:	50a3      	str	r3, [r4, r2]
 8010fb0:	e7e3      	b.n	8010f7a <_malloc_r+0x5a>
 8010fb2:	6053      	str	r3, [r2, #4]
 8010fb4:	e7ef      	b.n	8010f96 <_malloc_r+0x76>
 8010fb6:	0022      	movs	r2, r4
 8010fb8:	6864      	ldr	r4, [r4, #4]
 8010fba:	e7c2      	b.n	8010f42 <_malloc_r+0x22>
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	1cc4      	adds	r4, r0, #3
 8010fc0:	439c      	bics	r4, r3
 8010fc2:	42a0      	cmp	r0, r4
 8010fc4:	d0e1      	beq.n	8010f8a <_malloc_r+0x6a>
 8010fc6:	1a21      	subs	r1, r4, r0
 8010fc8:	0030      	movs	r0, r6
 8010fca:	f000 f89d 	bl	8011108 <_sbrk_r>
 8010fce:	1c43      	adds	r3, r0, #1
 8010fd0:	d1db      	bne.n	8010f8a <_malloc_r+0x6a>
 8010fd2:	e7c7      	b.n	8010f64 <_malloc_r+0x44>
 8010fd4:	20000118 	.word	0x20000118
 8010fd8:	2000011c 	.word	0x2000011c

08010fdc <iprintf>:
 8010fdc:	b40f      	push	{r0, r1, r2, r3}
 8010fde:	4b0b      	ldr	r3, [pc, #44]	; (801100c <iprintf+0x30>)
 8010fe0:	b513      	push	{r0, r1, r4, lr}
 8010fe2:	681c      	ldr	r4, [r3, #0]
 8010fe4:	2c00      	cmp	r4, #0
 8010fe6:	d005      	beq.n	8010ff4 <iprintf+0x18>
 8010fe8:	69a3      	ldr	r3, [r4, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d102      	bne.n	8010ff4 <iprintf+0x18>
 8010fee:	0020      	movs	r0, r4
 8010ff0:	f000 fab8 	bl	8011564 <__sinit>
 8010ff4:	ab05      	add	r3, sp, #20
 8010ff6:	0020      	movs	r0, r4
 8010ff8:	9a04      	ldr	r2, [sp, #16]
 8010ffa:	68a1      	ldr	r1, [r4, #8]
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	f000 fd5b 	bl	8011ab8 <_vfiprintf_r>
 8011002:	bc16      	pop	{r1, r2, r4}
 8011004:	bc08      	pop	{r3}
 8011006:	b004      	add	sp, #16
 8011008:	4718      	bx	r3
 801100a:	46c0      	nop			; (mov r8, r8)
 801100c:	20000084 	.word	0x20000084

08011010 <_puts_r>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	0005      	movs	r5, r0
 8011014:	000e      	movs	r6, r1
 8011016:	2800      	cmp	r0, #0
 8011018:	d004      	beq.n	8011024 <_puts_r+0x14>
 801101a:	6983      	ldr	r3, [r0, #24]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d101      	bne.n	8011024 <_puts_r+0x14>
 8011020:	f000 faa0 	bl	8011564 <__sinit>
 8011024:	69ab      	ldr	r3, [r5, #24]
 8011026:	68ac      	ldr	r4, [r5, #8]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <_puts_r+0x22>
 801102c:	0028      	movs	r0, r5
 801102e:	f000 fa99 	bl	8011564 <__sinit>
 8011032:	4b2d      	ldr	r3, [pc, #180]	; (80110e8 <_puts_r+0xd8>)
 8011034:	429c      	cmp	r4, r3
 8011036:	d122      	bne.n	801107e <_puts_r+0x6e>
 8011038:	686c      	ldr	r4, [r5, #4]
 801103a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801103c:	07db      	lsls	r3, r3, #31
 801103e:	d405      	bmi.n	801104c <_puts_r+0x3c>
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	059b      	lsls	r3, r3, #22
 8011044:	d402      	bmi.n	801104c <_puts_r+0x3c>
 8011046:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011048:	f000 fb2d 	bl	80116a6 <__retarget_lock_acquire_recursive>
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	071b      	lsls	r3, r3, #28
 8011050:	d502      	bpl.n	8011058 <_puts_r+0x48>
 8011052:	6923      	ldr	r3, [r4, #16]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d129      	bne.n	80110ac <_puts_r+0x9c>
 8011058:	0021      	movs	r1, r4
 801105a:	0028      	movs	r0, r5
 801105c:	f000 f8dc 	bl	8011218 <__swsetup_r>
 8011060:	2800      	cmp	r0, #0
 8011062:	d023      	beq.n	80110ac <_puts_r+0x9c>
 8011064:	2501      	movs	r5, #1
 8011066:	426d      	negs	r5, r5
 8011068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801106a:	07db      	lsls	r3, r3, #31
 801106c:	d405      	bmi.n	801107a <_puts_r+0x6a>
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	059b      	lsls	r3, r3, #22
 8011072:	d402      	bmi.n	801107a <_puts_r+0x6a>
 8011074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011076:	f000 fb17 	bl	80116a8 <__retarget_lock_release_recursive>
 801107a:	0028      	movs	r0, r5
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	4b1b      	ldr	r3, [pc, #108]	; (80110ec <_puts_r+0xdc>)
 8011080:	429c      	cmp	r4, r3
 8011082:	d101      	bne.n	8011088 <_puts_r+0x78>
 8011084:	68ac      	ldr	r4, [r5, #8]
 8011086:	e7d8      	b.n	801103a <_puts_r+0x2a>
 8011088:	4b19      	ldr	r3, [pc, #100]	; (80110f0 <_puts_r+0xe0>)
 801108a:	429c      	cmp	r4, r3
 801108c:	d1d5      	bne.n	801103a <_puts_r+0x2a>
 801108e:	68ec      	ldr	r4, [r5, #12]
 8011090:	e7d3      	b.n	801103a <_puts_r+0x2a>
 8011092:	3601      	adds	r6, #1
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	2b00      	cmp	r3, #0
 8011098:	da04      	bge.n	80110a4 <_puts_r+0x94>
 801109a:	69a2      	ldr	r2, [r4, #24]
 801109c:	429a      	cmp	r2, r3
 801109e:	dc16      	bgt.n	80110ce <_puts_r+0xbe>
 80110a0:	290a      	cmp	r1, #10
 80110a2:	d014      	beq.n	80110ce <_puts_r+0xbe>
 80110a4:	6823      	ldr	r3, [r4, #0]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	6022      	str	r2, [r4, #0]
 80110aa:	7019      	strb	r1, [r3, #0]
 80110ac:	68a3      	ldr	r3, [r4, #8]
 80110ae:	7831      	ldrb	r1, [r6, #0]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	2900      	cmp	r1, #0
 80110b4:	d1ed      	bne.n	8011092 <_puts_r+0x82>
 80110b6:	60a3      	str	r3, [r4, #8]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	da0f      	bge.n	80110dc <_puts_r+0xcc>
 80110bc:	0028      	movs	r0, r5
 80110be:	0022      	movs	r2, r4
 80110c0:	310a      	adds	r1, #10
 80110c2:	f000 f853 	bl	801116c <__swbuf_r>
 80110c6:	250a      	movs	r5, #10
 80110c8:	1c43      	adds	r3, r0, #1
 80110ca:	d1cd      	bne.n	8011068 <_puts_r+0x58>
 80110cc:	e7ca      	b.n	8011064 <_puts_r+0x54>
 80110ce:	0022      	movs	r2, r4
 80110d0:	0028      	movs	r0, r5
 80110d2:	f000 f84b 	bl	801116c <__swbuf_r>
 80110d6:	1c43      	adds	r3, r0, #1
 80110d8:	d1e8      	bne.n	80110ac <_puts_r+0x9c>
 80110da:	e7c3      	b.n	8011064 <_puts_r+0x54>
 80110dc:	250a      	movs	r5, #10
 80110de:	6823      	ldr	r3, [r4, #0]
 80110e0:	1c5a      	adds	r2, r3, #1
 80110e2:	6022      	str	r2, [r4, #0]
 80110e4:	701d      	strb	r5, [r3, #0]
 80110e6:	e7bf      	b.n	8011068 <_puts_r+0x58>
 80110e8:	08015fd4 	.word	0x08015fd4
 80110ec:	08015ff4 	.word	0x08015ff4
 80110f0:	08015fb4 	.word	0x08015fb4

080110f4 <puts>:
 80110f4:	b510      	push	{r4, lr}
 80110f6:	4b03      	ldr	r3, [pc, #12]	; (8011104 <puts+0x10>)
 80110f8:	0001      	movs	r1, r0
 80110fa:	6818      	ldr	r0, [r3, #0]
 80110fc:	f7ff ff88 	bl	8011010 <_puts_r>
 8011100:	bd10      	pop	{r4, pc}
 8011102:	46c0      	nop			; (mov r8, r8)
 8011104:	20000084 	.word	0x20000084

08011108 <_sbrk_r>:
 8011108:	2300      	movs	r3, #0
 801110a:	b570      	push	{r4, r5, r6, lr}
 801110c:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_sbrk_r+0x20>)
 801110e:	0004      	movs	r4, r0
 8011110:	0008      	movs	r0, r1
 8011112:	602b      	str	r3, [r5, #0]
 8011114:	f7ff fda2 	bl	8010c5c <_sbrk>
 8011118:	1c43      	adds	r3, r0, #1
 801111a:	d103      	bne.n	8011124 <_sbrk_r+0x1c>
 801111c:	682b      	ldr	r3, [r5, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d000      	beq.n	8011124 <_sbrk_r+0x1c>
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	46c0      	nop			; (mov r8, r8)
 8011128:	200005b8 	.word	0x200005b8

0801112c <siprintf>:
 801112c:	b40e      	push	{r1, r2, r3}
 801112e:	b500      	push	{lr}
 8011130:	490b      	ldr	r1, [pc, #44]	; (8011160 <siprintf+0x34>)
 8011132:	b09c      	sub	sp, #112	; 0x70
 8011134:	ab1d      	add	r3, sp, #116	; 0x74
 8011136:	9002      	str	r0, [sp, #8]
 8011138:	9006      	str	r0, [sp, #24]
 801113a:	9107      	str	r1, [sp, #28]
 801113c:	9104      	str	r1, [sp, #16]
 801113e:	4809      	ldr	r0, [pc, #36]	; (8011164 <siprintf+0x38>)
 8011140:	4909      	ldr	r1, [pc, #36]	; (8011168 <siprintf+0x3c>)
 8011142:	cb04      	ldmia	r3!, {r2}
 8011144:	9105      	str	r1, [sp, #20]
 8011146:	6800      	ldr	r0, [r0, #0]
 8011148:	a902      	add	r1, sp, #8
 801114a:	9301      	str	r3, [sp, #4]
 801114c:	f000 fb8c 	bl	8011868 <_svfiprintf_r>
 8011150:	2300      	movs	r3, #0
 8011152:	9a02      	ldr	r2, [sp, #8]
 8011154:	7013      	strb	r3, [r2, #0]
 8011156:	b01c      	add	sp, #112	; 0x70
 8011158:	bc08      	pop	{r3}
 801115a:	b003      	add	sp, #12
 801115c:	4718      	bx	r3
 801115e:	46c0      	nop			; (mov r8, r8)
 8011160:	7fffffff 	.word	0x7fffffff
 8011164:	20000084 	.word	0x20000084
 8011168:	ffff0208 	.word	0xffff0208

0801116c <__swbuf_r>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	0005      	movs	r5, r0
 8011170:	000e      	movs	r6, r1
 8011172:	0014      	movs	r4, r2
 8011174:	2800      	cmp	r0, #0
 8011176:	d004      	beq.n	8011182 <__swbuf_r+0x16>
 8011178:	6983      	ldr	r3, [r0, #24]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <__swbuf_r+0x16>
 801117e:	f000 f9f1 	bl	8011564 <__sinit>
 8011182:	4b22      	ldr	r3, [pc, #136]	; (801120c <__swbuf_r+0xa0>)
 8011184:	429c      	cmp	r4, r3
 8011186:	d12e      	bne.n	80111e6 <__swbuf_r+0x7a>
 8011188:	686c      	ldr	r4, [r5, #4]
 801118a:	69a3      	ldr	r3, [r4, #24]
 801118c:	60a3      	str	r3, [r4, #8]
 801118e:	89a3      	ldrh	r3, [r4, #12]
 8011190:	071b      	lsls	r3, r3, #28
 8011192:	d532      	bpl.n	80111fa <__swbuf_r+0x8e>
 8011194:	6923      	ldr	r3, [r4, #16]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d02f      	beq.n	80111fa <__swbuf_r+0x8e>
 801119a:	6823      	ldr	r3, [r4, #0]
 801119c:	6922      	ldr	r2, [r4, #16]
 801119e:	b2f7      	uxtb	r7, r6
 80111a0:	1a98      	subs	r0, r3, r2
 80111a2:	6963      	ldr	r3, [r4, #20]
 80111a4:	b2f6      	uxtb	r6, r6
 80111a6:	4283      	cmp	r3, r0
 80111a8:	dc05      	bgt.n	80111b6 <__swbuf_r+0x4a>
 80111aa:	0021      	movs	r1, r4
 80111ac:	0028      	movs	r0, r5
 80111ae:	f000 f937 	bl	8011420 <_fflush_r>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d127      	bne.n	8011206 <__swbuf_r+0x9a>
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	3001      	adds	r0, #1
 80111ba:	3b01      	subs	r3, #1
 80111bc:	60a3      	str	r3, [r4, #8]
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	6022      	str	r2, [r4, #0]
 80111c4:	701f      	strb	r7, [r3, #0]
 80111c6:	6963      	ldr	r3, [r4, #20]
 80111c8:	4283      	cmp	r3, r0
 80111ca:	d004      	beq.n	80111d6 <__swbuf_r+0x6a>
 80111cc:	89a3      	ldrh	r3, [r4, #12]
 80111ce:	07db      	lsls	r3, r3, #31
 80111d0:	d507      	bpl.n	80111e2 <__swbuf_r+0x76>
 80111d2:	2e0a      	cmp	r6, #10
 80111d4:	d105      	bne.n	80111e2 <__swbuf_r+0x76>
 80111d6:	0021      	movs	r1, r4
 80111d8:	0028      	movs	r0, r5
 80111da:	f000 f921 	bl	8011420 <_fflush_r>
 80111de:	2800      	cmp	r0, #0
 80111e0:	d111      	bne.n	8011206 <__swbuf_r+0x9a>
 80111e2:	0030      	movs	r0, r6
 80111e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111e6:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <__swbuf_r+0xa4>)
 80111e8:	429c      	cmp	r4, r3
 80111ea:	d101      	bne.n	80111f0 <__swbuf_r+0x84>
 80111ec:	68ac      	ldr	r4, [r5, #8]
 80111ee:	e7cc      	b.n	801118a <__swbuf_r+0x1e>
 80111f0:	4b08      	ldr	r3, [pc, #32]	; (8011214 <__swbuf_r+0xa8>)
 80111f2:	429c      	cmp	r4, r3
 80111f4:	d1c9      	bne.n	801118a <__swbuf_r+0x1e>
 80111f6:	68ec      	ldr	r4, [r5, #12]
 80111f8:	e7c7      	b.n	801118a <__swbuf_r+0x1e>
 80111fa:	0021      	movs	r1, r4
 80111fc:	0028      	movs	r0, r5
 80111fe:	f000 f80b 	bl	8011218 <__swsetup_r>
 8011202:	2800      	cmp	r0, #0
 8011204:	d0c9      	beq.n	801119a <__swbuf_r+0x2e>
 8011206:	2601      	movs	r6, #1
 8011208:	4276      	negs	r6, r6
 801120a:	e7ea      	b.n	80111e2 <__swbuf_r+0x76>
 801120c:	08015fd4 	.word	0x08015fd4
 8011210:	08015ff4 	.word	0x08015ff4
 8011214:	08015fb4 	.word	0x08015fb4

08011218 <__swsetup_r>:
 8011218:	4b37      	ldr	r3, [pc, #220]	; (80112f8 <__swsetup_r+0xe0>)
 801121a:	b570      	push	{r4, r5, r6, lr}
 801121c:	681d      	ldr	r5, [r3, #0]
 801121e:	0006      	movs	r6, r0
 8011220:	000c      	movs	r4, r1
 8011222:	2d00      	cmp	r5, #0
 8011224:	d005      	beq.n	8011232 <__swsetup_r+0x1a>
 8011226:	69ab      	ldr	r3, [r5, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d102      	bne.n	8011232 <__swsetup_r+0x1a>
 801122c:	0028      	movs	r0, r5
 801122e:	f000 f999 	bl	8011564 <__sinit>
 8011232:	4b32      	ldr	r3, [pc, #200]	; (80112fc <__swsetup_r+0xe4>)
 8011234:	429c      	cmp	r4, r3
 8011236:	d10f      	bne.n	8011258 <__swsetup_r+0x40>
 8011238:	686c      	ldr	r4, [r5, #4]
 801123a:	230c      	movs	r3, #12
 801123c:	5ee2      	ldrsh	r2, [r4, r3]
 801123e:	b293      	uxth	r3, r2
 8011240:	0711      	lsls	r1, r2, #28
 8011242:	d42d      	bmi.n	80112a0 <__swsetup_r+0x88>
 8011244:	06d9      	lsls	r1, r3, #27
 8011246:	d411      	bmi.n	801126c <__swsetup_r+0x54>
 8011248:	2309      	movs	r3, #9
 801124a:	2001      	movs	r0, #1
 801124c:	6033      	str	r3, [r6, #0]
 801124e:	3337      	adds	r3, #55	; 0x37
 8011250:	4313      	orrs	r3, r2
 8011252:	81a3      	strh	r3, [r4, #12]
 8011254:	4240      	negs	r0, r0
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	4b29      	ldr	r3, [pc, #164]	; (8011300 <__swsetup_r+0xe8>)
 801125a:	429c      	cmp	r4, r3
 801125c:	d101      	bne.n	8011262 <__swsetup_r+0x4a>
 801125e:	68ac      	ldr	r4, [r5, #8]
 8011260:	e7eb      	b.n	801123a <__swsetup_r+0x22>
 8011262:	4b28      	ldr	r3, [pc, #160]	; (8011304 <__swsetup_r+0xec>)
 8011264:	429c      	cmp	r4, r3
 8011266:	d1e8      	bne.n	801123a <__swsetup_r+0x22>
 8011268:	68ec      	ldr	r4, [r5, #12]
 801126a:	e7e6      	b.n	801123a <__swsetup_r+0x22>
 801126c:	075b      	lsls	r3, r3, #29
 801126e:	d513      	bpl.n	8011298 <__swsetup_r+0x80>
 8011270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011272:	2900      	cmp	r1, #0
 8011274:	d008      	beq.n	8011288 <__swsetup_r+0x70>
 8011276:	0023      	movs	r3, r4
 8011278:	3344      	adds	r3, #68	; 0x44
 801127a:	4299      	cmp	r1, r3
 801127c:	d002      	beq.n	8011284 <__swsetup_r+0x6c>
 801127e:	0030      	movs	r0, r6
 8011280:	f7ff fe04 	bl	8010e8c <_free_r>
 8011284:	2300      	movs	r3, #0
 8011286:	6363      	str	r3, [r4, #52]	; 0x34
 8011288:	2224      	movs	r2, #36	; 0x24
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	4393      	bics	r3, r2
 801128e:	81a3      	strh	r3, [r4, #12]
 8011290:	2300      	movs	r3, #0
 8011292:	6063      	str	r3, [r4, #4]
 8011294:	6923      	ldr	r3, [r4, #16]
 8011296:	6023      	str	r3, [r4, #0]
 8011298:	2308      	movs	r3, #8
 801129a:	89a2      	ldrh	r2, [r4, #12]
 801129c:	4313      	orrs	r3, r2
 801129e:	81a3      	strh	r3, [r4, #12]
 80112a0:	6923      	ldr	r3, [r4, #16]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10b      	bne.n	80112be <__swsetup_r+0xa6>
 80112a6:	21a0      	movs	r1, #160	; 0xa0
 80112a8:	2280      	movs	r2, #128	; 0x80
 80112aa:	89a3      	ldrh	r3, [r4, #12]
 80112ac:	0089      	lsls	r1, r1, #2
 80112ae:	0092      	lsls	r2, r2, #2
 80112b0:	400b      	ands	r3, r1
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d003      	beq.n	80112be <__swsetup_r+0xa6>
 80112b6:	0021      	movs	r1, r4
 80112b8:	0030      	movs	r0, r6
 80112ba:	f000 fa1f 	bl	80116fc <__smakebuf_r>
 80112be:	220c      	movs	r2, #12
 80112c0:	5ea3      	ldrsh	r3, [r4, r2]
 80112c2:	2001      	movs	r0, #1
 80112c4:	001a      	movs	r2, r3
 80112c6:	b299      	uxth	r1, r3
 80112c8:	4002      	ands	r2, r0
 80112ca:	4203      	tst	r3, r0
 80112cc:	d00f      	beq.n	80112ee <__swsetup_r+0xd6>
 80112ce:	2200      	movs	r2, #0
 80112d0:	60a2      	str	r2, [r4, #8]
 80112d2:	6962      	ldr	r2, [r4, #20]
 80112d4:	4252      	negs	r2, r2
 80112d6:	61a2      	str	r2, [r4, #24]
 80112d8:	2000      	movs	r0, #0
 80112da:	6922      	ldr	r2, [r4, #16]
 80112dc:	4282      	cmp	r2, r0
 80112de:	d1ba      	bne.n	8011256 <__swsetup_r+0x3e>
 80112e0:	060a      	lsls	r2, r1, #24
 80112e2:	d5b8      	bpl.n	8011256 <__swsetup_r+0x3e>
 80112e4:	2240      	movs	r2, #64	; 0x40
 80112e6:	4313      	orrs	r3, r2
 80112e8:	81a3      	strh	r3, [r4, #12]
 80112ea:	3801      	subs	r0, #1
 80112ec:	e7b3      	b.n	8011256 <__swsetup_r+0x3e>
 80112ee:	0788      	lsls	r0, r1, #30
 80112f0:	d400      	bmi.n	80112f4 <__swsetup_r+0xdc>
 80112f2:	6962      	ldr	r2, [r4, #20]
 80112f4:	60a2      	str	r2, [r4, #8]
 80112f6:	e7ef      	b.n	80112d8 <__swsetup_r+0xc0>
 80112f8:	20000084 	.word	0x20000084
 80112fc:	08015fd4 	.word	0x08015fd4
 8011300:	08015ff4 	.word	0x08015ff4
 8011304:	08015fb4 	.word	0x08015fb4

08011308 <__sflush_r>:
 8011308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801130a:	898b      	ldrh	r3, [r1, #12]
 801130c:	0005      	movs	r5, r0
 801130e:	000c      	movs	r4, r1
 8011310:	071a      	lsls	r2, r3, #28
 8011312:	d45f      	bmi.n	80113d4 <__sflush_r+0xcc>
 8011314:	684a      	ldr	r2, [r1, #4]
 8011316:	2a00      	cmp	r2, #0
 8011318:	dc04      	bgt.n	8011324 <__sflush_r+0x1c>
 801131a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801131c:	2a00      	cmp	r2, #0
 801131e:	dc01      	bgt.n	8011324 <__sflush_r+0x1c>
 8011320:	2000      	movs	r0, #0
 8011322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011324:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011326:	2f00      	cmp	r7, #0
 8011328:	d0fa      	beq.n	8011320 <__sflush_r+0x18>
 801132a:	2200      	movs	r2, #0
 801132c:	2180      	movs	r1, #128	; 0x80
 801132e:	682e      	ldr	r6, [r5, #0]
 8011330:	602a      	str	r2, [r5, #0]
 8011332:	001a      	movs	r2, r3
 8011334:	0149      	lsls	r1, r1, #5
 8011336:	400a      	ands	r2, r1
 8011338:	420b      	tst	r3, r1
 801133a:	d034      	beq.n	80113a6 <__sflush_r+0x9e>
 801133c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	075b      	lsls	r3, r3, #29
 8011342:	d506      	bpl.n	8011352 <__sflush_r+0x4a>
 8011344:	6863      	ldr	r3, [r4, #4]
 8011346:	1ac0      	subs	r0, r0, r3
 8011348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801134a:	2b00      	cmp	r3, #0
 801134c:	d001      	beq.n	8011352 <__sflush_r+0x4a>
 801134e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011350:	1ac0      	subs	r0, r0, r3
 8011352:	0002      	movs	r2, r0
 8011354:	6a21      	ldr	r1, [r4, #32]
 8011356:	2300      	movs	r3, #0
 8011358:	0028      	movs	r0, r5
 801135a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801135c:	47b8      	blx	r7
 801135e:	89a1      	ldrh	r1, [r4, #12]
 8011360:	1c43      	adds	r3, r0, #1
 8011362:	d106      	bne.n	8011372 <__sflush_r+0x6a>
 8011364:	682b      	ldr	r3, [r5, #0]
 8011366:	2b1d      	cmp	r3, #29
 8011368:	d831      	bhi.n	80113ce <__sflush_r+0xc6>
 801136a:	4a2c      	ldr	r2, [pc, #176]	; (801141c <__sflush_r+0x114>)
 801136c:	40da      	lsrs	r2, r3
 801136e:	07d3      	lsls	r3, r2, #31
 8011370:	d52d      	bpl.n	80113ce <__sflush_r+0xc6>
 8011372:	2300      	movs	r3, #0
 8011374:	6063      	str	r3, [r4, #4]
 8011376:	6923      	ldr	r3, [r4, #16]
 8011378:	6023      	str	r3, [r4, #0]
 801137a:	04cb      	lsls	r3, r1, #19
 801137c:	d505      	bpl.n	801138a <__sflush_r+0x82>
 801137e:	1c43      	adds	r3, r0, #1
 8011380:	d102      	bne.n	8011388 <__sflush_r+0x80>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d100      	bne.n	801138a <__sflush_r+0x82>
 8011388:	6560      	str	r0, [r4, #84]	; 0x54
 801138a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801138c:	602e      	str	r6, [r5, #0]
 801138e:	2900      	cmp	r1, #0
 8011390:	d0c6      	beq.n	8011320 <__sflush_r+0x18>
 8011392:	0023      	movs	r3, r4
 8011394:	3344      	adds	r3, #68	; 0x44
 8011396:	4299      	cmp	r1, r3
 8011398:	d002      	beq.n	80113a0 <__sflush_r+0x98>
 801139a:	0028      	movs	r0, r5
 801139c:	f7ff fd76 	bl	8010e8c <_free_r>
 80113a0:	2000      	movs	r0, #0
 80113a2:	6360      	str	r0, [r4, #52]	; 0x34
 80113a4:	e7bd      	b.n	8011322 <__sflush_r+0x1a>
 80113a6:	2301      	movs	r3, #1
 80113a8:	0028      	movs	r0, r5
 80113aa:	6a21      	ldr	r1, [r4, #32]
 80113ac:	47b8      	blx	r7
 80113ae:	1c43      	adds	r3, r0, #1
 80113b0:	d1c5      	bne.n	801133e <__sflush_r+0x36>
 80113b2:	682b      	ldr	r3, [r5, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d0c2      	beq.n	801133e <__sflush_r+0x36>
 80113b8:	2b1d      	cmp	r3, #29
 80113ba:	d001      	beq.n	80113c0 <__sflush_r+0xb8>
 80113bc:	2b16      	cmp	r3, #22
 80113be:	d101      	bne.n	80113c4 <__sflush_r+0xbc>
 80113c0:	602e      	str	r6, [r5, #0]
 80113c2:	e7ad      	b.n	8011320 <__sflush_r+0x18>
 80113c4:	2340      	movs	r3, #64	; 0x40
 80113c6:	89a2      	ldrh	r2, [r4, #12]
 80113c8:	4313      	orrs	r3, r2
 80113ca:	81a3      	strh	r3, [r4, #12]
 80113cc:	e7a9      	b.n	8011322 <__sflush_r+0x1a>
 80113ce:	2340      	movs	r3, #64	; 0x40
 80113d0:	430b      	orrs	r3, r1
 80113d2:	e7fa      	b.n	80113ca <__sflush_r+0xc2>
 80113d4:	690f      	ldr	r7, [r1, #16]
 80113d6:	2f00      	cmp	r7, #0
 80113d8:	d0a2      	beq.n	8011320 <__sflush_r+0x18>
 80113da:	680a      	ldr	r2, [r1, #0]
 80113dc:	600f      	str	r7, [r1, #0]
 80113de:	1bd2      	subs	r2, r2, r7
 80113e0:	9201      	str	r2, [sp, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	079b      	lsls	r3, r3, #30
 80113e6:	d100      	bne.n	80113ea <__sflush_r+0xe2>
 80113e8:	694a      	ldr	r2, [r1, #20]
 80113ea:	60a2      	str	r2, [r4, #8]
 80113ec:	9b01      	ldr	r3, [sp, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	dc00      	bgt.n	80113f4 <__sflush_r+0xec>
 80113f2:	e795      	b.n	8011320 <__sflush_r+0x18>
 80113f4:	003a      	movs	r2, r7
 80113f6:	0028      	movs	r0, r5
 80113f8:	9b01      	ldr	r3, [sp, #4]
 80113fa:	6a21      	ldr	r1, [r4, #32]
 80113fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113fe:	47b0      	blx	r6
 8011400:	2800      	cmp	r0, #0
 8011402:	dc06      	bgt.n	8011412 <__sflush_r+0x10a>
 8011404:	2340      	movs	r3, #64	; 0x40
 8011406:	2001      	movs	r0, #1
 8011408:	89a2      	ldrh	r2, [r4, #12]
 801140a:	4240      	negs	r0, r0
 801140c:	4313      	orrs	r3, r2
 801140e:	81a3      	strh	r3, [r4, #12]
 8011410:	e787      	b.n	8011322 <__sflush_r+0x1a>
 8011412:	9b01      	ldr	r3, [sp, #4]
 8011414:	183f      	adds	r7, r7, r0
 8011416:	1a1b      	subs	r3, r3, r0
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	e7e7      	b.n	80113ec <__sflush_r+0xe4>
 801141c:	20400001 	.word	0x20400001

08011420 <_fflush_r>:
 8011420:	690b      	ldr	r3, [r1, #16]
 8011422:	b570      	push	{r4, r5, r6, lr}
 8011424:	0005      	movs	r5, r0
 8011426:	000c      	movs	r4, r1
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <_fflush_r+0x12>
 801142c:	2500      	movs	r5, #0
 801142e:	0028      	movs	r0, r5
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	2800      	cmp	r0, #0
 8011434:	d004      	beq.n	8011440 <_fflush_r+0x20>
 8011436:	6983      	ldr	r3, [r0, #24]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d101      	bne.n	8011440 <_fflush_r+0x20>
 801143c:	f000 f892 	bl	8011564 <__sinit>
 8011440:	4b14      	ldr	r3, [pc, #80]	; (8011494 <_fflush_r+0x74>)
 8011442:	429c      	cmp	r4, r3
 8011444:	d11b      	bne.n	801147e <_fflush_r+0x5e>
 8011446:	686c      	ldr	r4, [r5, #4]
 8011448:	220c      	movs	r2, #12
 801144a:	5ea3      	ldrsh	r3, [r4, r2]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d0ed      	beq.n	801142c <_fflush_r+0xc>
 8011450:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011452:	07d2      	lsls	r2, r2, #31
 8011454:	d404      	bmi.n	8011460 <_fflush_r+0x40>
 8011456:	059b      	lsls	r3, r3, #22
 8011458:	d402      	bmi.n	8011460 <_fflush_r+0x40>
 801145a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801145c:	f000 f923 	bl	80116a6 <__retarget_lock_acquire_recursive>
 8011460:	0028      	movs	r0, r5
 8011462:	0021      	movs	r1, r4
 8011464:	f7ff ff50 	bl	8011308 <__sflush_r>
 8011468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801146a:	0005      	movs	r5, r0
 801146c:	07db      	lsls	r3, r3, #31
 801146e:	d4de      	bmi.n	801142e <_fflush_r+0xe>
 8011470:	89a3      	ldrh	r3, [r4, #12]
 8011472:	059b      	lsls	r3, r3, #22
 8011474:	d4db      	bmi.n	801142e <_fflush_r+0xe>
 8011476:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011478:	f000 f916 	bl	80116a8 <__retarget_lock_release_recursive>
 801147c:	e7d7      	b.n	801142e <_fflush_r+0xe>
 801147e:	4b06      	ldr	r3, [pc, #24]	; (8011498 <_fflush_r+0x78>)
 8011480:	429c      	cmp	r4, r3
 8011482:	d101      	bne.n	8011488 <_fflush_r+0x68>
 8011484:	68ac      	ldr	r4, [r5, #8]
 8011486:	e7df      	b.n	8011448 <_fflush_r+0x28>
 8011488:	4b04      	ldr	r3, [pc, #16]	; (801149c <_fflush_r+0x7c>)
 801148a:	429c      	cmp	r4, r3
 801148c:	d1dc      	bne.n	8011448 <_fflush_r+0x28>
 801148e:	68ec      	ldr	r4, [r5, #12]
 8011490:	e7da      	b.n	8011448 <_fflush_r+0x28>
 8011492:	46c0      	nop			; (mov r8, r8)
 8011494:	08015fd4 	.word	0x08015fd4
 8011498:	08015ff4 	.word	0x08015ff4
 801149c:	08015fb4 	.word	0x08015fb4

080114a0 <std>:
 80114a0:	2300      	movs	r3, #0
 80114a2:	b510      	push	{r4, lr}
 80114a4:	0004      	movs	r4, r0
 80114a6:	6003      	str	r3, [r0, #0]
 80114a8:	6043      	str	r3, [r0, #4]
 80114aa:	6083      	str	r3, [r0, #8]
 80114ac:	8181      	strh	r1, [r0, #12]
 80114ae:	6643      	str	r3, [r0, #100]	; 0x64
 80114b0:	0019      	movs	r1, r3
 80114b2:	81c2      	strh	r2, [r0, #14]
 80114b4:	6103      	str	r3, [r0, #16]
 80114b6:	6143      	str	r3, [r0, #20]
 80114b8:	6183      	str	r3, [r0, #24]
 80114ba:	2208      	movs	r2, #8
 80114bc:	305c      	adds	r0, #92	; 0x5c
 80114be:	f7ff fcdd 	bl	8010e7c <memset>
 80114c2:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <std+0x38>)
 80114c4:	6263      	str	r3, [r4, #36]	; 0x24
 80114c6:	4b05      	ldr	r3, [pc, #20]	; (80114dc <std+0x3c>)
 80114c8:	6224      	str	r4, [r4, #32]
 80114ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80114cc:	4b04      	ldr	r3, [pc, #16]	; (80114e0 <std+0x40>)
 80114ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114d0:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <std+0x44>)
 80114d2:	6323      	str	r3, [r4, #48]	; 0x30
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	46c0      	nop			; (mov r8, r8)
 80114d8:	08012031 	.word	0x08012031
 80114dc:	08012059 	.word	0x08012059
 80114e0:	08012091 	.word	0x08012091
 80114e4:	080120bd 	.word	0x080120bd

080114e8 <_cleanup_r>:
 80114e8:	b510      	push	{r4, lr}
 80114ea:	4902      	ldr	r1, [pc, #8]	; (80114f4 <_cleanup_r+0xc>)
 80114ec:	f000 f8ba 	bl	8011664 <_fwalk_reent>
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	46c0      	nop			; (mov r8, r8)
 80114f4:	08011421 	.word	0x08011421

080114f8 <__sfmoreglue>:
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	2568      	movs	r5, #104	; 0x68
 80114fc:	1e4a      	subs	r2, r1, #1
 80114fe:	4355      	muls	r5, r2
 8011500:	000e      	movs	r6, r1
 8011502:	0029      	movs	r1, r5
 8011504:	3174      	adds	r1, #116	; 0x74
 8011506:	f7ff fd0b 	bl	8010f20 <_malloc_r>
 801150a:	1e04      	subs	r4, r0, #0
 801150c:	d008      	beq.n	8011520 <__sfmoreglue+0x28>
 801150e:	2100      	movs	r1, #0
 8011510:	002a      	movs	r2, r5
 8011512:	6001      	str	r1, [r0, #0]
 8011514:	6046      	str	r6, [r0, #4]
 8011516:	300c      	adds	r0, #12
 8011518:	60a0      	str	r0, [r4, #8]
 801151a:	3268      	adds	r2, #104	; 0x68
 801151c:	f7ff fcae 	bl	8010e7c <memset>
 8011520:	0020      	movs	r0, r4
 8011522:	bd70      	pop	{r4, r5, r6, pc}

08011524 <__sfp_lock_acquire>:
 8011524:	b510      	push	{r4, lr}
 8011526:	4802      	ldr	r0, [pc, #8]	; (8011530 <__sfp_lock_acquire+0xc>)
 8011528:	f000 f8bd 	bl	80116a6 <__retarget_lock_acquire_recursive>
 801152c:	bd10      	pop	{r4, pc}
 801152e:	46c0      	nop			; (mov r8, r8)
 8011530:	200005b4 	.word	0x200005b4

08011534 <__sfp_lock_release>:
 8011534:	b510      	push	{r4, lr}
 8011536:	4802      	ldr	r0, [pc, #8]	; (8011540 <__sfp_lock_release+0xc>)
 8011538:	f000 f8b6 	bl	80116a8 <__retarget_lock_release_recursive>
 801153c:	bd10      	pop	{r4, pc}
 801153e:	46c0      	nop			; (mov r8, r8)
 8011540:	200005b4 	.word	0x200005b4

08011544 <__sinit_lock_acquire>:
 8011544:	b510      	push	{r4, lr}
 8011546:	4802      	ldr	r0, [pc, #8]	; (8011550 <__sinit_lock_acquire+0xc>)
 8011548:	f000 f8ad 	bl	80116a6 <__retarget_lock_acquire_recursive>
 801154c:	bd10      	pop	{r4, pc}
 801154e:	46c0      	nop			; (mov r8, r8)
 8011550:	200005af 	.word	0x200005af

08011554 <__sinit_lock_release>:
 8011554:	b510      	push	{r4, lr}
 8011556:	4802      	ldr	r0, [pc, #8]	; (8011560 <__sinit_lock_release+0xc>)
 8011558:	f000 f8a6 	bl	80116a8 <__retarget_lock_release_recursive>
 801155c:	bd10      	pop	{r4, pc}
 801155e:	46c0      	nop			; (mov r8, r8)
 8011560:	200005af 	.word	0x200005af

08011564 <__sinit>:
 8011564:	b513      	push	{r0, r1, r4, lr}
 8011566:	0004      	movs	r4, r0
 8011568:	f7ff ffec 	bl	8011544 <__sinit_lock_acquire>
 801156c:	69a3      	ldr	r3, [r4, #24]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <__sinit+0x14>
 8011572:	f7ff ffef 	bl	8011554 <__sinit_lock_release>
 8011576:	bd13      	pop	{r0, r1, r4, pc}
 8011578:	64a3      	str	r3, [r4, #72]	; 0x48
 801157a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801157c:	6523      	str	r3, [r4, #80]	; 0x50
 801157e:	4b13      	ldr	r3, [pc, #76]	; (80115cc <__sinit+0x68>)
 8011580:	4a13      	ldr	r2, [pc, #76]	; (80115d0 <__sinit+0x6c>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	62a2      	str	r2, [r4, #40]	; 0x28
 8011586:	9301      	str	r3, [sp, #4]
 8011588:	42a3      	cmp	r3, r4
 801158a:	d101      	bne.n	8011590 <__sinit+0x2c>
 801158c:	2301      	movs	r3, #1
 801158e:	61a3      	str	r3, [r4, #24]
 8011590:	0020      	movs	r0, r4
 8011592:	f000 f81f 	bl	80115d4 <__sfp>
 8011596:	6060      	str	r0, [r4, #4]
 8011598:	0020      	movs	r0, r4
 801159a:	f000 f81b 	bl	80115d4 <__sfp>
 801159e:	60a0      	str	r0, [r4, #8]
 80115a0:	0020      	movs	r0, r4
 80115a2:	f000 f817 	bl	80115d4 <__sfp>
 80115a6:	2200      	movs	r2, #0
 80115a8:	2104      	movs	r1, #4
 80115aa:	60e0      	str	r0, [r4, #12]
 80115ac:	6860      	ldr	r0, [r4, #4]
 80115ae:	f7ff ff77 	bl	80114a0 <std>
 80115b2:	2201      	movs	r2, #1
 80115b4:	2109      	movs	r1, #9
 80115b6:	68a0      	ldr	r0, [r4, #8]
 80115b8:	f7ff ff72 	bl	80114a0 <std>
 80115bc:	2202      	movs	r2, #2
 80115be:	2112      	movs	r1, #18
 80115c0:	68e0      	ldr	r0, [r4, #12]
 80115c2:	f7ff ff6d 	bl	80114a0 <std>
 80115c6:	2301      	movs	r3, #1
 80115c8:	61a3      	str	r3, [r4, #24]
 80115ca:	e7d2      	b.n	8011572 <__sinit+0xe>
 80115cc:	08015fb0 	.word	0x08015fb0
 80115d0:	080114e9 	.word	0x080114e9

080115d4 <__sfp>:
 80115d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d6:	0007      	movs	r7, r0
 80115d8:	f7ff ffa4 	bl	8011524 <__sfp_lock_acquire>
 80115dc:	4b1f      	ldr	r3, [pc, #124]	; (801165c <__sfp+0x88>)
 80115de:	681e      	ldr	r6, [r3, #0]
 80115e0:	69b3      	ldr	r3, [r6, #24]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d102      	bne.n	80115ec <__sfp+0x18>
 80115e6:	0030      	movs	r0, r6
 80115e8:	f7ff ffbc 	bl	8011564 <__sinit>
 80115ec:	3648      	adds	r6, #72	; 0x48
 80115ee:	68b4      	ldr	r4, [r6, #8]
 80115f0:	6873      	ldr	r3, [r6, #4]
 80115f2:	3b01      	subs	r3, #1
 80115f4:	d504      	bpl.n	8011600 <__sfp+0x2c>
 80115f6:	6833      	ldr	r3, [r6, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d022      	beq.n	8011642 <__sfp+0x6e>
 80115fc:	6836      	ldr	r6, [r6, #0]
 80115fe:	e7f6      	b.n	80115ee <__sfp+0x1a>
 8011600:	220c      	movs	r2, #12
 8011602:	5ea5      	ldrsh	r5, [r4, r2]
 8011604:	2d00      	cmp	r5, #0
 8011606:	d11a      	bne.n	801163e <__sfp+0x6a>
 8011608:	0020      	movs	r0, r4
 801160a:	4b15      	ldr	r3, [pc, #84]	; (8011660 <__sfp+0x8c>)
 801160c:	3058      	adds	r0, #88	; 0x58
 801160e:	60e3      	str	r3, [r4, #12]
 8011610:	6665      	str	r5, [r4, #100]	; 0x64
 8011612:	f000 f847 	bl	80116a4 <__retarget_lock_init_recursive>
 8011616:	f7ff ff8d 	bl	8011534 <__sfp_lock_release>
 801161a:	0020      	movs	r0, r4
 801161c:	2208      	movs	r2, #8
 801161e:	0029      	movs	r1, r5
 8011620:	6025      	str	r5, [r4, #0]
 8011622:	60a5      	str	r5, [r4, #8]
 8011624:	6065      	str	r5, [r4, #4]
 8011626:	6125      	str	r5, [r4, #16]
 8011628:	6165      	str	r5, [r4, #20]
 801162a:	61a5      	str	r5, [r4, #24]
 801162c:	305c      	adds	r0, #92	; 0x5c
 801162e:	f7ff fc25 	bl	8010e7c <memset>
 8011632:	6365      	str	r5, [r4, #52]	; 0x34
 8011634:	63a5      	str	r5, [r4, #56]	; 0x38
 8011636:	64a5      	str	r5, [r4, #72]	; 0x48
 8011638:	64e5      	str	r5, [r4, #76]	; 0x4c
 801163a:	0020      	movs	r0, r4
 801163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163e:	3468      	adds	r4, #104	; 0x68
 8011640:	e7d7      	b.n	80115f2 <__sfp+0x1e>
 8011642:	2104      	movs	r1, #4
 8011644:	0038      	movs	r0, r7
 8011646:	f7ff ff57 	bl	80114f8 <__sfmoreglue>
 801164a:	1e04      	subs	r4, r0, #0
 801164c:	6030      	str	r0, [r6, #0]
 801164e:	d1d5      	bne.n	80115fc <__sfp+0x28>
 8011650:	f7ff ff70 	bl	8011534 <__sfp_lock_release>
 8011654:	230c      	movs	r3, #12
 8011656:	603b      	str	r3, [r7, #0]
 8011658:	e7ef      	b.n	801163a <__sfp+0x66>
 801165a:	46c0      	nop			; (mov r8, r8)
 801165c:	08015fb0 	.word	0x08015fb0
 8011660:	ffff0001 	.word	0xffff0001

08011664 <_fwalk_reent>:
 8011664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011666:	0004      	movs	r4, r0
 8011668:	0006      	movs	r6, r0
 801166a:	2700      	movs	r7, #0
 801166c:	9101      	str	r1, [sp, #4]
 801166e:	3448      	adds	r4, #72	; 0x48
 8011670:	6863      	ldr	r3, [r4, #4]
 8011672:	68a5      	ldr	r5, [r4, #8]
 8011674:	9300      	str	r3, [sp, #0]
 8011676:	9b00      	ldr	r3, [sp, #0]
 8011678:	3b01      	subs	r3, #1
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	d504      	bpl.n	8011688 <_fwalk_reent+0x24>
 801167e:	6824      	ldr	r4, [r4, #0]
 8011680:	2c00      	cmp	r4, #0
 8011682:	d1f5      	bne.n	8011670 <_fwalk_reent+0xc>
 8011684:	0038      	movs	r0, r7
 8011686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011688:	89ab      	ldrh	r3, [r5, #12]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d908      	bls.n	80116a0 <_fwalk_reent+0x3c>
 801168e:	220e      	movs	r2, #14
 8011690:	5eab      	ldrsh	r3, [r5, r2]
 8011692:	3301      	adds	r3, #1
 8011694:	d004      	beq.n	80116a0 <_fwalk_reent+0x3c>
 8011696:	0029      	movs	r1, r5
 8011698:	0030      	movs	r0, r6
 801169a:	9b01      	ldr	r3, [sp, #4]
 801169c:	4798      	blx	r3
 801169e:	4307      	orrs	r7, r0
 80116a0:	3568      	adds	r5, #104	; 0x68
 80116a2:	e7e8      	b.n	8011676 <_fwalk_reent+0x12>

080116a4 <__retarget_lock_init_recursive>:
 80116a4:	4770      	bx	lr

080116a6 <__retarget_lock_acquire_recursive>:
 80116a6:	4770      	bx	lr

080116a8 <__retarget_lock_release_recursive>:
 80116a8:	4770      	bx	lr
	...

080116ac <__swhatbuf_r>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	000e      	movs	r6, r1
 80116b0:	001d      	movs	r5, r3
 80116b2:	230e      	movs	r3, #14
 80116b4:	5ec9      	ldrsh	r1, [r1, r3]
 80116b6:	0014      	movs	r4, r2
 80116b8:	b096      	sub	sp, #88	; 0x58
 80116ba:	2900      	cmp	r1, #0
 80116bc:	da07      	bge.n	80116ce <__swhatbuf_r+0x22>
 80116be:	2300      	movs	r3, #0
 80116c0:	602b      	str	r3, [r5, #0]
 80116c2:	89b3      	ldrh	r3, [r6, #12]
 80116c4:	061b      	lsls	r3, r3, #24
 80116c6:	d411      	bmi.n	80116ec <__swhatbuf_r+0x40>
 80116c8:	2380      	movs	r3, #128	; 0x80
 80116ca:	00db      	lsls	r3, r3, #3
 80116cc:	e00f      	b.n	80116ee <__swhatbuf_r+0x42>
 80116ce:	466a      	mov	r2, sp
 80116d0:	f000 fd20 	bl	8012114 <_fstat_r>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	dbf2      	blt.n	80116be <__swhatbuf_r+0x12>
 80116d8:	23f0      	movs	r3, #240	; 0xf0
 80116da:	9901      	ldr	r1, [sp, #4]
 80116dc:	021b      	lsls	r3, r3, #8
 80116de:	4019      	ands	r1, r3
 80116e0:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <__swhatbuf_r+0x4c>)
 80116e2:	18c9      	adds	r1, r1, r3
 80116e4:	424b      	negs	r3, r1
 80116e6:	4159      	adcs	r1, r3
 80116e8:	6029      	str	r1, [r5, #0]
 80116ea:	e7ed      	b.n	80116c8 <__swhatbuf_r+0x1c>
 80116ec:	2340      	movs	r3, #64	; 0x40
 80116ee:	2000      	movs	r0, #0
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	b016      	add	sp, #88	; 0x58
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	46c0      	nop			; (mov r8, r8)
 80116f8:	ffffe000 	.word	0xffffe000

080116fc <__smakebuf_r>:
 80116fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116fe:	2602      	movs	r6, #2
 8011700:	898b      	ldrh	r3, [r1, #12]
 8011702:	0005      	movs	r5, r0
 8011704:	000c      	movs	r4, r1
 8011706:	4233      	tst	r3, r6
 8011708:	d006      	beq.n	8011718 <__smakebuf_r+0x1c>
 801170a:	0023      	movs	r3, r4
 801170c:	3347      	adds	r3, #71	; 0x47
 801170e:	6023      	str	r3, [r4, #0]
 8011710:	6123      	str	r3, [r4, #16]
 8011712:	2301      	movs	r3, #1
 8011714:	6163      	str	r3, [r4, #20]
 8011716:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011718:	466a      	mov	r2, sp
 801171a:	ab01      	add	r3, sp, #4
 801171c:	f7ff ffc6 	bl	80116ac <__swhatbuf_r>
 8011720:	9900      	ldr	r1, [sp, #0]
 8011722:	0007      	movs	r7, r0
 8011724:	0028      	movs	r0, r5
 8011726:	f7ff fbfb 	bl	8010f20 <_malloc_r>
 801172a:	2800      	cmp	r0, #0
 801172c:	d108      	bne.n	8011740 <__smakebuf_r+0x44>
 801172e:	220c      	movs	r2, #12
 8011730:	5ea3      	ldrsh	r3, [r4, r2]
 8011732:	059a      	lsls	r2, r3, #22
 8011734:	d4ef      	bmi.n	8011716 <__smakebuf_r+0x1a>
 8011736:	2203      	movs	r2, #3
 8011738:	4393      	bics	r3, r2
 801173a:	431e      	orrs	r6, r3
 801173c:	81a6      	strh	r6, [r4, #12]
 801173e:	e7e4      	b.n	801170a <__smakebuf_r+0xe>
 8011740:	4b0f      	ldr	r3, [pc, #60]	; (8011780 <__smakebuf_r+0x84>)
 8011742:	62ab      	str	r3, [r5, #40]	; 0x28
 8011744:	2380      	movs	r3, #128	; 0x80
 8011746:	89a2      	ldrh	r2, [r4, #12]
 8011748:	6020      	str	r0, [r4, #0]
 801174a:	4313      	orrs	r3, r2
 801174c:	81a3      	strh	r3, [r4, #12]
 801174e:	9b00      	ldr	r3, [sp, #0]
 8011750:	6120      	str	r0, [r4, #16]
 8011752:	6163      	str	r3, [r4, #20]
 8011754:	9b01      	ldr	r3, [sp, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00d      	beq.n	8011776 <__smakebuf_r+0x7a>
 801175a:	0028      	movs	r0, r5
 801175c:	230e      	movs	r3, #14
 801175e:	5ee1      	ldrsh	r1, [r4, r3]
 8011760:	f000 fcea 	bl	8012138 <_isatty_r>
 8011764:	2800      	cmp	r0, #0
 8011766:	d006      	beq.n	8011776 <__smakebuf_r+0x7a>
 8011768:	2203      	movs	r2, #3
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	4393      	bics	r3, r2
 801176e:	001a      	movs	r2, r3
 8011770:	2301      	movs	r3, #1
 8011772:	4313      	orrs	r3, r2
 8011774:	81a3      	strh	r3, [r4, #12]
 8011776:	89a0      	ldrh	r0, [r4, #12]
 8011778:	4307      	orrs	r7, r0
 801177a:	81a7      	strh	r7, [r4, #12]
 801177c:	e7cb      	b.n	8011716 <__smakebuf_r+0x1a>
 801177e:	46c0      	nop			; (mov r8, r8)
 8011780:	080114e9 	.word	0x080114e9

08011784 <__malloc_lock>:
 8011784:	b510      	push	{r4, lr}
 8011786:	4802      	ldr	r0, [pc, #8]	; (8011790 <__malloc_lock+0xc>)
 8011788:	f7ff ff8d 	bl	80116a6 <__retarget_lock_acquire_recursive>
 801178c:	bd10      	pop	{r4, pc}
 801178e:	46c0      	nop			; (mov r8, r8)
 8011790:	200005b0 	.word	0x200005b0

08011794 <__malloc_unlock>:
 8011794:	b510      	push	{r4, lr}
 8011796:	4802      	ldr	r0, [pc, #8]	; (80117a0 <__malloc_unlock+0xc>)
 8011798:	f7ff ff86 	bl	80116a8 <__retarget_lock_release_recursive>
 801179c:	bd10      	pop	{r4, pc}
 801179e:	46c0      	nop			; (mov r8, r8)
 80117a0:	200005b0 	.word	0x200005b0

080117a4 <__ssputs_r>:
 80117a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117a6:	688e      	ldr	r6, [r1, #8]
 80117a8:	b085      	sub	sp, #20
 80117aa:	0007      	movs	r7, r0
 80117ac:	000c      	movs	r4, r1
 80117ae:	9203      	str	r2, [sp, #12]
 80117b0:	9301      	str	r3, [sp, #4]
 80117b2:	429e      	cmp	r6, r3
 80117b4:	d83c      	bhi.n	8011830 <__ssputs_r+0x8c>
 80117b6:	2390      	movs	r3, #144	; 0x90
 80117b8:	898a      	ldrh	r2, [r1, #12]
 80117ba:	00db      	lsls	r3, r3, #3
 80117bc:	421a      	tst	r2, r3
 80117be:	d034      	beq.n	801182a <__ssputs_r+0x86>
 80117c0:	2503      	movs	r5, #3
 80117c2:	6909      	ldr	r1, [r1, #16]
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	1a5b      	subs	r3, r3, r1
 80117c8:	9302      	str	r3, [sp, #8]
 80117ca:	6963      	ldr	r3, [r4, #20]
 80117cc:	9802      	ldr	r0, [sp, #8]
 80117ce:	435d      	muls	r5, r3
 80117d0:	0feb      	lsrs	r3, r5, #31
 80117d2:	195d      	adds	r5, r3, r5
 80117d4:	9b01      	ldr	r3, [sp, #4]
 80117d6:	106d      	asrs	r5, r5, #1
 80117d8:	3301      	adds	r3, #1
 80117da:	181b      	adds	r3, r3, r0
 80117dc:	42ab      	cmp	r3, r5
 80117de:	d900      	bls.n	80117e2 <__ssputs_r+0x3e>
 80117e0:	001d      	movs	r5, r3
 80117e2:	0553      	lsls	r3, r2, #21
 80117e4:	d532      	bpl.n	801184c <__ssputs_r+0xa8>
 80117e6:	0029      	movs	r1, r5
 80117e8:	0038      	movs	r0, r7
 80117ea:	f7ff fb99 	bl	8010f20 <_malloc_r>
 80117ee:	1e06      	subs	r6, r0, #0
 80117f0:	d109      	bne.n	8011806 <__ssputs_r+0x62>
 80117f2:	230c      	movs	r3, #12
 80117f4:	603b      	str	r3, [r7, #0]
 80117f6:	2340      	movs	r3, #64	; 0x40
 80117f8:	2001      	movs	r0, #1
 80117fa:	89a2      	ldrh	r2, [r4, #12]
 80117fc:	4240      	negs	r0, r0
 80117fe:	4313      	orrs	r3, r2
 8011800:	81a3      	strh	r3, [r4, #12]
 8011802:	b005      	add	sp, #20
 8011804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011806:	9a02      	ldr	r2, [sp, #8]
 8011808:	6921      	ldr	r1, [r4, #16]
 801180a:	f000 fcc6 	bl	801219a <memcpy>
 801180e:	89a3      	ldrh	r3, [r4, #12]
 8011810:	4a14      	ldr	r2, [pc, #80]	; (8011864 <__ssputs_r+0xc0>)
 8011812:	401a      	ands	r2, r3
 8011814:	2380      	movs	r3, #128	; 0x80
 8011816:	4313      	orrs	r3, r2
 8011818:	81a3      	strh	r3, [r4, #12]
 801181a:	9b02      	ldr	r3, [sp, #8]
 801181c:	6126      	str	r6, [r4, #16]
 801181e:	18f6      	adds	r6, r6, r3
 8011820:	6026      	str	r6, [r4, #0]
 8011822:	6165      	str	r5, [r4, #20]
 8011824:	9e01      	ldr	r6, [sp, #4]
 8011826:	1aed      	subs	r5, r5, r3
 8011828:	60a5      	str	r5, [r4, #8]
 801182a:	9b01      	ldr	r3, [sp, #4]
 801182c:	429e      	cmp	r6, r3
 801182e:	d900      	bls.n	8011832 <__ssputs_r+0x8e>
 8011830:	9e01      	ldr	r6, [sp, #4]
 8011832:	0032      	movs	r2, r6
 8011834:	9903      	ldr	r1, [sp, #12]
 8011836:	6820      	ldr	r0, [r4, #0]
 8011838:	f000 fcb8 	bl	80121ac <memmove>
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	2000      	movs	r0, #0
 8011840:	1b9b      	subs	r3, r3, r6
 8011842:	60a3      	str	r3, [r4, #8]
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	199e      	adds	r6, r3, r6
 8011848:	6026      	str	r6, [r4, #0]
 801184a:	e7da      	b.n	8011802 <__ssputs_r+0x5e>
 801184c:	002a      	movs	r2, r5
 801184e:	0038      	movs	r0, r7
 8011850:	f000 fcbf 	bl	80121d2 <_realloc_r>
 8011854:	1e06      	subs	r6, r0, #0
 8011856:	d1e0      	bne.n	801181a <__ssputs_r+0x76>
 8011858:	0038      	movs	r0, r7
 801185a:	6921      	ldr	r1, [r4, #16]
 801185c:	f7ff fb16 	bl	8010e8c <_free_r>
 8011860:	e7c7      	b.n	80117f2 <__ssputs_r+0x4e>
 8011862:	46c0      	nop			; (mov r8, r8)
 8011864:	fffffb7f 	.word	0xfffffb7f

08011868 <_svfiprintf_r>:
 8011868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801186a:	b0a1      	sub	sp, #132	; 0x84
 801186c:	9003      	str	r0, [sp, #12]
 801186e:	001d      	movs	r5, r3
 8011870:	898b      	ldrh	r3, [r1, #12]
 8011872:	000f      	movs	r7, r1
 8011874:	0016      	movs	r6, r2
 8011876:	061b      	lsls	r3, r3, #24
 8011878:	d511      	bpl.n	801189e <_svfiprintf_r+0x36>
 801187a:	690b      	ldr	r3, [r1, #16]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10e      	bne.n	801189e <_svfiprintf_r+0x36>
 8011880:	2140      	movs	r1, #64	; 0x40
 8011882:	f7ff fb4d 	bl	8010f20 <_malloc_r>
 8011886:	6038      	str	r0, [r7, #0]
 8011888:	6138      	str	r0, [r7, #16]
 801188a:	2800      	cmp	r0, #0
 801188c:	d105      	bne.n	801189a <_svfiprintf_r+0x32>
 801188e:	230c      	movs	r3, #12
 8011890:	9a03      	ldr	r2, [sp, #12]
 8011892:	3801      	subs	r0, #1
 8011894:	6013      	str	r3, [r2, #0]
 8011896:	b021      	add	sp, #132	; 0x84
 8011898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801189a:	2340      	movs	r3, #64	; 0x40
 801189c:	617b      	str	r3, [r7, #20]
 801189e:	2300      	movs	r3, #0
 80118a0:	ac08      	add	r4, sp, #32
 80118a2:	6163      	str	r3, [r4, #20]
 80118a4:	3320      	adds	r3, #32
 80118a6:	7663      	strb	r3, [r4, #25]
 80118a8:	3310      	adds	r3, #16
 80118aa:	76a3      	strb	r3, [r4, #26]
 80118ac:	9507      	str	r5, [sp, #28]
 80118ae:	0035      	movs	r5, r6
 80118b0:	782b      	ldrb	r3, [r5, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <_svfiprintf_r+0x52>
 80118b6:	2b25      	cmp	r3, #37	; 0x25
 80118b8:	d147      	bne.n	801194a <_svfiprintf_r+0xe2>
 80118ba:	1bab      	subs	r3, r5, r6
 80118bc:	9305      	str	r3, [sp, #20]
 80118be:	42b5      	cmp	r5, r6
 80118c0:	d00c      	beq.n	80118dc <_svfiprintf_r+0x74>
 80118c2:	0032      	movs	r2, r6
 80118c4:	0039      	movs	r1, r7
 80118c6:	9803      	ldr	r0, [sp, #12]
 80118c8:	f7ff ff6c 	bl	80117a4 <__ssputs_r>
 80118cc:	1c43      	adds	r3, r0, #1
 80118ce:	d100      	bne.n	80118d2 <_svfiprintf_r+0x6a>
 80118d0:	e0ae      	b.n	8011a30 <_svfiprintf_r+0x1c8>
 80118d2:	6962      	ldr	r2, [r4, #20]
 80118d4:	9b05      	ldr	r3, [sp, #20]
 80118d6:	4694      	mov	ip, r2
 80118d8:	4463      	add	r3, ip
 80118da:	6163      	str	r3, [r4, #20]
 80118dc:	782b      	ldrb	r3, [r5, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d100      	bne.n	80118e4 <_svfiprintf_r+0x7c>
 80118e2:	e0a5      	b.n	8011a30 <_svfiprintf_r+0x1c8>
 80118e4:	2201      	movs	r2, #1
 80118e6:	2300      	movs	r3, #0
 80118e8:	4252      	negs	r2, r2
 80118ea:	6062      	str	r2, [r4, #4]
 80118ec:	a904      	add	r1, sp, #16
 80118ee:	3254      	adds	r2, #84	; 0x54
 80118f0:	1852      	adds	r2, r2, r1
 80118f2:	1c6e      	adds	r6, r5, #1
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	60e3      	str	r3, [r4, #12]
 80118f8:	60a3      	str	r3, [r4, #8]
 80118fa:	7013      	strb	r3, [r2, #0]
 80118fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80118fe:	2205      	movs	r2, #5
 8011900:	7831      	ldrb	r1, [r6, #0]
 8011902:	4854      	ldr	r0, [pc, #336]	; (8011a54 <_svfiprintf_r+0x1ec>)
 8011904:	f000 fc3e 	bl	8012184 <memchr>
 8011908:	1c75      	adds	r5, r6, #1
 801190a:	2800      	cmp	r0, #0
 801190c:	d11f      	bne.n	801194e <_svfiprintf_r+0xe6>
 801190e:	6822      	ldr	r2, [r4, #0]
 8011910:	06d3      	lsls	r3, r2, #27
 8011912:	d504      	bpl.n	801191e <_svfiprintf_r+0xb6>
 8011914:	2353      	movs	r3, #83	; 0x53
 8011916:	a904      	add	r1, sp, #16
 8011918:	185b      	adds	r3, r3, r1
 801191a:	2120      	movs	r1, #32
 801191c:	7019      	strb	r1, [r3, #0]
 801191e:	0713      	lsls	r3, r2, #28
 8011920:	d504      	bpl.n	801192c <_svfiprintf_r+0xc4>
 8011922:	2353      	movs	r3, #83	; 0x53
 8011924:	a904      	add	r1, sp, #16
 8011926:	185b      	adds	r3, r3, r1
 8011928:	212b      	movs	r1, #43	; 0x2b
 801192a:	7019      	strb	r1, [r3, #0]
 801192c:	7833      	ldrb	r3, [r6, #0]
 801192e:	2b2a      	cmp	r3, #42	; 0x2a
 8011930:	d016      	beq.n	8011960 <_svfiprintf_r+0xf8>
 8011932:	0035      	movs	r5, r6
 8011934:	2100      	movs	r1, #0
 8011936:	200a      	movs	r0, #10
 8011938:	68e3      	ldr	r3, [r4, #12]
 801193a:	782a      	ldrb	r2, [r5, #0]
 801193c:	1c6e      	adds	r6, r5, #1
 801193e:	3a30      	subs	r2, #48	; 0x30
 8011940:	2a09      	cmp	r2, #9
 8011942:	d94e      	bls.n	80119e2 <_svfiprintf_r+0x17a>
 8011944:	2900      	cmp	r1, #0
 8011946:	d111      	bne.n	801196c <_svfiprintf_r+0x104>
 8011948:	e017      	b.n	801197a <_svfiprintf_r+0x112>
 801194a:	3501      	adds	r5, #1
 801194c:	e7b0      	b.n	80118b0 <_svfiprintf_r+0x48>
 801194e:	4b41      	ldr	r3, [pc, #260]	; (8011a54 <_svfiprintf_r+0x1ec>)
 8011950:	6822      	ldr	r2, [r4, #0]
 8011952:	1ac0      	subs	r0, r0, r3
 8011954:	2301      	movs	r3, #1
 8011956:	4083      	lsls	r3, r0
 8011958:	4313      	orrs	r3, r2
 801195a:	002e      	movs	r6, r5
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	e7ce      	b.n	80118fe <_svfiprintf_r+0x96>
 8011960:	9b07      	ldr	r3, [sp, #28]
 8011962:	1d19      	adds	r1, r3, #4
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	9107      	str	r1, [sp, #28]
 8011968:	2b00      	cmp	r3, #0
 801196a:	db01      	blt.n	8011970 <_svfiprintf_r+0x108>
 801196c:	930b      	str	r3, [sp, #44]	; 0x2c
 801196e:	e004      	b.n	801197a <_svfiprintf_r+0x112>
 8011970:	425b      	negs	r3, r3
 8011972:	60e3      	str	r3, [r4, #12]
 8011974:	2302      	movs	r3, #2
 8011976:	4313      	orrs	r3, r2
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	782b      	ldrb	r3, [r5, #0]
 801197c:	2b2e      	cmp	r3, #46	; 0x2e
 801197e:	d10a      	bne.n	8011996 <_svfiprintf_r+0x12e>
 8011980:	786b      	ldrb	r3, [r5, #1]
 8011982:	2b2a      	cmp	r3, #42	; 0x2a
 8011984:	d135      	bne.n	80119f2 <_svfiprintf_r+0x18a>
 8011986:	9b07      	ldr	r3, [sp, #28]
 8011988:	3502      	adds	r5, #2
 801198a:	1d1a      	adds	r2, r3, #4
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	9207      	str	r2, [sp, #28]
 8011990:	2b00      	cmp	r3, #0
 8011992:	db2b      	blt.n	80119ec <_svfiprintf_r+0x184>
 8011994:	9309      	str	r3, [sp, #36]	; 0x24
 8011996:	4e30      	ldr	r6, [pc, #192]	; (8011a58 <_svfiprintf_r+0x1f0>)
 8011998:	2203      	movs	r2, #3
 801199a:	0030      	movs	r0, r6
 801199c:	7829      	ldrb	r1, [r5, #0]
 801199e:	f000 fbf1 	bl	8012184 <memchr>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d006      	beq.n	80119b4 <_svfiprintf_r+0x14c>
 80119a6:	2340      	movs	r3, #64	; 0x40
 80119a8:	1b80      	subs	r0, r0, r6
 80119aa:	4083      	lsls	r3, r0
 80119ac:	6822      	ldr	r2, [r4, #0]
 80119ae:	3501      	adds	r5, #1
 80119b0:	4313      	orrs	r3, r2
 80119b2:	6023      	str	r3, [r4, #0]
 80119b4:	7829      	ldrb	r1, [r5, #0]
 80119b6:	2206      	movs	r2, #6
 80119b8:	4828      	ldr	r0, [pc, #160]	; (8011a5c <_svfiprintf_r+0x1f4>)
 80119ba:	1c6e      	adds	r6, r5, #1
 80119bc:	7621      	strb	r1, [r4, #24]
 80119be:	f000 fbe1 	bl	8012184 <memchr>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d03c      	beq.n	8011a40 <_svfiprintf_r+0x1d8>
 80119c6:	4b26      	ldr	r3, [pc, #152]	; (8011a60 <_svfiprintf_r+0x1f8>)
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d125      	bne.n	8011a18 <_svfiprintf_r+0x1b0>
 80119cc:	2207      	movs	r2, #7
 80119ce:	9b07      	ldr	r3, [sp, #28]
 80119d0:	3307      	adds	r3, #7
 80119d2:	4393      	bics	r3, r2
 80119d4:	3308      	adds	r3, #8
 80119d6:	9307      	str	r3, [sp, #28]
 80119d8:	6963      	ldr	r3, [r4, #20]
 80119da:	9a04      	ldr	r2, [sp, #16]
 80119dc:	189b      	adds	r3, r3, r2
 80119de:	6163      	str	r3, [r4, #20]
 80119e0:	e765      	b.n	80118ae <_svfiprintf_r+0x46>
 80119e2:	4343      	muls	r3, r0
 80119e4:	0035      	movs	r5, r6
 80119e6:	2101      	movs	r1, #1
 80119e8:	189b      	adds	r3, r3, r2
 80119ea:	e7a6      	b.n	801193a <_svfiprintf_r+0xd2>
 80119ec:	2301      	movs	r3, #1
 80119ee:	425b      	negs	r3, r3
 80119f0:	e7d0      	b.n	8011994 <_svfiprintf_r+0x12c>
 80119f2:	2300      	movs	r3, #0
 80119f4:	200a      	movs	r0, #10
 80119f6:	001a      	movs	r2, r3
 80119f8:	3501      	adds	r5, #1
 80119fa:	6063      	str	r3, [r4, #4]
 80119fc:	7829      	ldrb	r1, [r5, #0]
 80119fe:	1c6e      	adds	r6, r5, #1
 8011a00:	3930      	subs	r1, #48	; 0x30
 8011a02:	2909      	cmp	r1, #9
 8011a04:	d903      	bls.n	8011a0e <_svfiprintf_r+0x1a6>
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d0c5      	beq.n	8011996 <_svfiprintf_r+0x12e>
 8011a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a0c:	e7c3      	b.n	8011996 <_svfiprintf_r+0x12e>
 8011a0e:	4342      	muls	r2, r0
 8011a10:	0035      	movs	r5, r6
 8011a12:	2301      	movs	r3, #1
 8011a14:	1852      	adds	r2, r2, r1
 8011a16:	e7f1      	b.n	80119fc <_svfiprintf_r+0x194>
 8011a18:	ab07      	add	r3, sp, #28
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	003a      	movs	r2, r7
 8011a1e:	0021      	movs	r1, r4
 8011a20:	4b10      	ldr	r3, [pc, #64]	; (8011a64 <_svfiprintf_r+0x1fc>)
 8011a22:	9803      	ldr	r0, [sp, #12]
 8011a24:	e000      	b.n	8011a28 <_svfiprintf_r+0x1c0>
 8011a26:	bf00      	nop
 8011a28:	9004      	str	r0, [sp, #16]
 8011a2a:	9b04      	ldr	r3, [sp, #16]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	d1d3      	bne.n	80119d8 <_svfiprintf_r+0x170>
 8011a30:	89bb      	ldrh	r3, [r7, #12]
 8011a32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011a34:	065b      	lsls	r3, r3, #25
 8011a36:	d400      	bmi.n	8011a3a <_svfiprintf_r+0x1d2>
 8011a38:	e72d      	b.n	8011896 <_svfiprintf_r+0x2e>
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	4240      	negs	r0, r0
 8011a3e:	e72a      	b.n	8011896 <_svfiprintf_r+0x2e>
 8011a40:	ab07      	add	r3, sp, #28
 8011a42:	9300      	str	r3, [sp, #0]
 8011a44:	003a      	movs	r2, r7
 8011a46:	0021      	movs	r1, r4
 8011a48:	4b06      	ldr	r3, [pc, #24]	; (8011a64 <_svfiprintf_r+0x1fc>)
 8011a4a:	9803      	ldr	r0, [sp, #12]
 8011a4c:	f000 f9de 	bl	8011e0c <_printf_i>
 8011a50:	e7ea      	b.n	8011a28 <_svfiprintf_r+0x1c0>
 8011a52:	46c0      	nop			; (mov r8, r8)
 8011a54:	08016014 	.word	0x08016014
 8011a58:	0801601a 	.word	0x0801601a
 8011a5c:	0801601e 	.word	0x0801601e
 8011a60:	00000000 	.word	0x00000000
 8011a64:	080117a5 	.word	0x080117a5

08011a68 <__sfputc_r>:
 8011a68:	6893      	ldr	r3, [r2, #8]
 8011a6a:	b510      	push	{r4, lr}
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	6093      	str	r3, [r2, #8]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	da04      	bge.n	8011a7e <__sfputc_r+0x16>
 8011a74:	6994      	ldr	r4, [r2, #24]
 8011a76:	42a3      	cmp	r3, r4
 8011a78:	db07      	blt.n	8011a8a <__sfputc_r+0x22>
 8011a7a:	290a      	cmp	r1, #10
 8011a7c:	d005      	beq.n	8011a8a <__sfputc_r+0x22>
 8011a7e:	6813      	ldr	r3, [r2, #0]
 8011a80:	1c58      	adds	r0, r3, #1
 8011a82:	6010      	str	r0, [r2, #0]
 8011a84:	7019      	strb	r1, [r3, #0]
 8011a86:	0008      	movs	r0, r1
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	f7ff fb6f 	bl	801116c <__swbuf_r>
 8011a8e:	0001      	movs	r1, r0
 8011a90:	e7f9      	b.n	8011a86 <__sfputc_r+0x1e>

08011a92 <__sfputs_r>:
 8011a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a94:	0006      	movs	r6, r0
 8011a96:	000f      	movs	r7, r1
 8011a98:	0014      	movs	r4, r2
 8011a9a:	18d5      	adds	r5, r2, r3
 8011a9c:	42ac      	cmp	r4, r5
 8011a9e:	d101      	bne.n	8011aa4 <__sfputs_r+0x12>
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	e007      	b.n	8011ab4 <__sfputs_r+0x22>
 8011aa4:	7821      	ldrb	r1, [r4, #0]
 8011aa6:	003a      	movs	r2, r7
 8011aa8:	0030      	movs	r0, r6
 8011aaa:	f7ff ffdd 	bl	8011a68 <__sfputc_r>
 8011aae:	3401      	adds	r4, #1
 8011ab0:	1c43      	adds	r3, r0, #1
 8011ab2:	d1f3      	bne.n	8011a9c <__sfputs_r+0xa>
 8011ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ab8 <_vfiprintf_r>:
 8011ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aba:	b0a1      	sub	sp, #132	; 0x84
 8011abc:	0006      	movs	r6, r0
 8011abe:	000c      	movs	r4, r1
 8011ac0:	001f      	movs	r7, r3
 8011ac2:	9203      	str	r2, [sp, #12]
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d004      	beq.n	8011ad2 <_vfiprintf_r+0x1a>
 8011ac8:	6983      	ldr	r3, [r0, #24]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d101      	bne.n	8011ad2 <_vfiprintf_r+0x1a>
 8011ace:	f7ff fd49 	bl	8011564 <__sinit>
 8011ad2:	4b8e      	ldr	r3, [pc, #568]	; (8011d0c <_vfiprintf_r+0x254>)
 8011ad4:	429c      	cmp	r4, r3
 8011ad6:	d11c      	bne.n	8011b12 <_vfiprintf_r+0x5a>
 8011ad8:	6874      	ldr	r4, [r6, #4]
 8011ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011adc:	07db      	lsls	r3, r3, #31
 8011ade:	d405      	bmi.n	8011aec <_vfiprintf_r+0x34>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	059b      	lsls	r3, r3, #22
 8011ae4:	d402      	bmi.n	8011aec <_vfiprintf_r+0x34>
 8011ae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ae8:	f7ff fddd 	bl	80116a6 <__retarget_lock_acquire_recursive>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	071b      	lsls	r3, r3, #28
 8011af0:	d502      	bpl.n	8011af8 <_vfiprintf_r+0x40>
 8011af2:	6923      	ldr	r3, [r4, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d11d      	bne.n	8011b34 <_vfiprintf_r+0x7c>
 8011af8:	0021      	movs	r1, r4
 8011afa:	0030      	movs	r0, r6
 8011afc:	f7ff fb8c 	bl	8011218 <__swsetup_r>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d017      	beq.n	8011b34 <_vfiprintf_r+0x7c>
 8011b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b06:	07db      	lsls	r3, r3, #31
 8011b08:	d50d      	bpl.n	8011b26 <_vfiprintf_r+0x6e>
 8011b0a:	2001      	movs	r0, #1
 8011b0c:	4240      	negs	r0, r0
 8011b0e:	b021      	add	sp, #132	; 0x84
 8011b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b12:	4b7f      	ldr	r3, [pc, #508]	; (8011d10 <_vfiprintf_r+0x258>)
 8011b14:	429c      	cmp	r4, r3
 8011b16:	d101      	bne.n	8011b1c <_vfiprintf_r+0x64>
 8011b18:	68b4      	ldr	r4, [r6, #8]
 8011b1a:	e7de      	b.n	8011ada <_vfiprintf_r+0x22>
 8011b1c:	4b7d      	ldr	r3, [pc, #500]	; (8011d14 <_vfiprintf_r+0x25c>)
 8011b1e:	429c      	cmp	r4, r3
 8011b20:	d1db      	bne.n	8011ada <_vfiprintf_r+0x22>
 8011b22:	68f4      	ldr	r4, [r6, #12]
 8011b24:	e7d9      	b.n	8011ada <_vfiprintf_r+0x22>
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	059b      	lsls	r3, r3, #22
 8011b2a:	d4ee      	bmi.n	8011b0a <_vfiprintf_r+0x52>
 8011b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b2e:	f7ff fdbb 	bl	80116a8 <__retarget_lock_release_recursive>
 8011b32:	e7ea      	b.n	8011b0a <_vfiprintf_r+0x52>
 8011b34:	2300      	movs	r3, #0
 8011b36:	ad08      	add	r5, sp, #32
 8011b38:	616b      	str	r3, [r5, #20]
 8011b3a:	3320      	adds	r3, #32
 8011b3c:	766b      	strb	r3, [r5, #25]
 8011b3e:	3310      	adds	r3, #16
 8011b40:	76ab      	strb	r3, [r5, #26]
 8011b42:	9707      	str	r7, [sp, #28]
 8011b44:	9f03      	ldr	r7, [sp, #12]
 8011b46:	783b      	ldrb	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <_vfiprintf_r+0x98>
 8011b4c:	2b25      	cmp	r3, #37	; 0x25
 8011b4e:	d14e      	bne.n	8011bee <_vfiprintf_r+0x136>
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	1afb      	subs	r3, r7, r3
 8011b54:	9305      	str	r3, [sp, #20]
 8011b56:	9b03      	ldr	r3, [sp, #12]
 8011b58:	429f      	cmp	r7, r3
 8011b5a:	d00d      	beq.n	8011b78 <_vfiprintf_r+0xc0>
 8011b5c:	9b05      	ldr	r3, [sp, #20]
 8011b5e:	0021      	movs	r1, r4
 8011b60:	0030      	movs	r0, r6
 8011b62:	9a03      	ldr	r2, [sp, #12]
 8011b64:	f7ff ff95 	bl	8011a92 <__sfputs_r>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d100      	bne.n	8011b6e <_vfiprintf_r+0xb6>
 8011b6c:	e0b5      	b.n	8011cda <_vfiprintf_r+0x222>
 8011b6e:	696a      	ldr	r2, [r5, #20]
 8011b70:	9b05      	ldr	r3, [sp, #20]
 8011b72:	4694      	mov	ip, r2
 8011b74:	4463      	add	r3, ip
 8011b76:	616b      	str	r3, [r5, #20]
 8011b78:	783b      	ldrb	r3, [r7, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d100      	bne.n	8011b80 <_vfiprintf_r+0xc8>
 8011b7e:	e0ac      	b.n	8011cda <_vfiprintf_r+0x222>
 8011b80:	2201      	movs	r2, #1
 8011b82:	1c7b      	adds	r3, r7, #1
 8011b84:	9303      	str	r3, [sp, #12]
 8011b86:	2300      	movs	r3, #0
 8011b88:	4252      	negs	r2, r2
 8011b8a:	606a      	str	r2, [r5, #4]
 8011b8c:	a904      	add	r1, sp, #16
 8011b8e:	3254      	adds	r2, #84	; 0x54
 8011b90:	1852      	adds	r2, r2, r1
 8011b92:	602b      	str	r3, [r5, #0]
 8011b94:	60eb      	str	r3, [r5, #12]
 8011b96:	60ab      	str	r3, [r5, #8]
 8011b98:	7013      	strb	r3, [r2, #0]
 8011b9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8011b9c:	9b03      	ldr	r3, [sp, #12]
 8011b9e:	2205      	movs	r2, #5
 8011ba0:	7819      	ldrb	r1, [r3, #0]
 8011ba2:	485d      	ldr	r0, [pc, #372]	; (8011d18 <_vfiprintf_r+0x260>)
 8011ba4:	f000 faee 	bl	8012184 <memchr>
 8011ba8:	9b03      	ldr	r3, [sp, #12]
 8011baa:	1c5f      	adds	r7, r3, #1
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d120      	bne.n	8011bf2 <_vfiprintf_r+0x13a>
 8011bb0:	682a      	ldr	r2, [r5, #0]
 8011bb2:	06d3      	lsls	r3, r2, #27
 8011bb4:	d504      	bpl.n	8011bc0 <_vfiprintf_r+0x108>
 8011bb6:	2353      	movs	r3, #83	; 0x53
 8011bb8:	a904      	add	r1, sp, #16
 8011bba:	185b      	adds	r3, r3, r1
 8011bbc:	2120      	movs	r1, #32
 8011bbe:	7019      	strb	r1, [r3, #0]
 8011bc0:	0713      	lsls	r3, r2, #28
 8011bc2:	d504      	bpl.n	8011bce <_vfiprintf_r+0x116>
 8011bc4:	2353      	movs	r3, #83	; 0x53
 8011bc6:	a904      	add	r1, sp, #16
 8011bc8:	185b      	adds	r3, r3, r1
 8011bca:	212b      	movs	r1, #43	; 0x2b
 8011bcc:	7019      	strb	r1, [r3, #0]
 8011bce:	9b03      	ldr	r3, [sp, #12]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8011bd4:	d016      	beq.n	8011c04 <_vfiprintf_r+0x14c>
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	68eb      	ldr	r3, [r5, #12]
 8011bda:	9f03      	ldr	r7, [sp, #12]
 8011bdc:	783a      	ldrb	r2, [r7, #0]
 8011bde:	1c78      	adds	r0, r7, #1
 8011be0:	3a30      	subs	r2, #48	; 0x30
 8011be2:	4684      	mov	ip, r0
 8011be4:	2a09      	cmp	r2, #9
 8011be6:	d94f      	bls.n	8011c88 <_vfiprintf_r+0x1d0>
 8011be8:	2900      	cmp	r1, #0
 8011bea:	d111      	bne.n	8011c10 <_vfiprintf_r+0x158>
 8011bec:	e017      	b.n	8011c1e <_vfiprintf_r+0x166>
 8011bee:	3701      	adds	r7, #1
 8011bf0:	e7a9      	b.n	8011b46 <_vfiprintf_r+0x8e>
 8011bf2:	4b49      	ldr	r3, [pc, #292]	; (8011d18 <_vfiprintf_r+0x260>)
 8011bf4:	682a      	ldr	r2, [r5, #0]
 8011bf6:	1ac0      	subs	r0, r0, r3
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	4083      	lsls	r3, r0
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	9703      	str	r7, [sp, #12]
 8011c02:	e7cb      	b.n	8011b9c <_vfiprintf_r+0xe4>
 8011c04:	9b07      	ldr	r3, [sp, #28]
 8011c06:	1d19      	adds	r1, r3, #4
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	9107      	str	r1, [sp, #28]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	db01      	blt.n	8011c14 <_vfiprintf_r+0x15c>
 8011c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c12:	e004      	b.n	8011c1e <_vfiprintf_r+0x166>
 8011c14:	425b      	negs	r3, r3
 8011c16:	60eb      	str	r3, [r5, #12]
 8011c18:	2302      	movs	r3, #2
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	602b      	str	r3, [r5, #0]
 8011c1e:	783b      	ldrb	r3, [r7, #0]
 8011c20:	2b2e      	cmp	r3, #46	; 0x2e
 8011c22:	d10a      	bne.n	8011c3a <_vfiprintf_r+0x182>
 8011c24:	787b      	ldrb	r3, [r7, #1]
 8011c26:	2b2a      	cmp	r3, #42	; 0x2a
 8011c28:	d137      	bne.n	8011c9a <_vfiprintf_r+0x1e2>
 8011c2a:	9b07      	ldr	r3, [sp, #28]
 8011c2c:	3702      	adds	r7, #2
 8011c2e:	1d1a      	adds	r2, r3, #4
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	9207      	str	r2, [sp, #28]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	db2d      	blt.n	8011c94 <_vfiprintf_r+0x1dc>
 8011c38:	9309      	str	r3, [sp, #36]	; 0x24
 8011c3a:	2203      	movs	r2, #3
 8011c3c:	7839      	ldrb	r1, [r7, #0]
 8011c3e:	4837      	ldr	r0, [pc, #220]	; (8011d1c <_vfiprintf_r+0x264>)
 8011c40:	f000 faa0 	bl	8012184 <memchr>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d007      	beq.n	8011c58 <_vfiprintf_r+0x1a0>
 8011c48:	4b34      	ldr	r3, [pc, #208]	; (8011d1c <_vfiprintf_r+0x264>)
 8011c4a:	682a      	ldr	r2, [r5, #0]
 8011c4c:	1ac0      	subs	r0, r0, r3
 8011c4e:	2340      	movs	r3, #64	; 0x40
 8011c50:	4083      	lsls	r3, r0
 8011c52:	4313      	orrs	r3, r2
 8011c54:	3701      	adds	r7, #1
 8011c56:	602b      	str	r3, [r5, #0]
 8011c58:	7839      	ldrb	r1, [r7, #0]
 8011c5a:	1c7b      	adds	r3, r7, #1
 8011c5c:	2206      	movs	r2, #6
 8011c5e:	4830      	ldr	r0, [pc, #192]	; (8011d20 <_vfiprintf_r+0x268>)
 8011c60:	9303      	str	r3, [sp, #12]
 8011c62:	7629      	strb	r1, [r5, #24]
 8011c64:	f000 fa8e 	bl	8012184 <memchr>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d045      	beq.n	8011cf8 <_vfiprintf_r+0x240>
 8011c6c:	4b2d      	ldr	r3, [pc, #180]	; (8011d24 <_vfiprintf_r+0x26c>)
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d127      	bne.n	8011cc2 <_vfiprintf_r+0x20a>
 8011c72:	2207      	movs	r2, #7
 8011c74:	9b07      	ldr	r3, [sp, #28]
 8011c76:	3307      	adds	r3, #7
 8011c78:	4393      	bics	r3, r2
 8011c7a:	3308      	adds	r3, #8
 8011c7c:	9307      	str	r3, [sp, #28]
 8011c7e:	696b      	ldr	r3, [r5, #20]
 8011c80:	9a04      	ldr	r2, [sp, #16]
 8011c82:	189b      	adds	r3, r3, r2
 8011c84:	616b      	str	r3, [r5, #20]
 8011c86:	e75d      	b.n	8011b44 <_vfiprintf_r+0x8c>
 8011c88:	210a      	movs	r1, #10
 8011c8a:	434b      	muls	r3, r1
 8011c8c:	4667      	mov	r7, ip
 8011c8e:	189b      	adds	r3, r3, r2
 8011c90:	3909      	subs	r1, #9
 8011c92:	e7a3      	b.n	8011bdc <_vfiprintf_r+0x124>
 8011c94:	2301      	movs	r3, #1
 8011c96:	425b      	negs	r3, r3
 8011c98:	e7ce      	b.n	8011c38 <_vfiprintf_r+0x180>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	001a      	movs	r2, r3
 8011c9e:	3701      	adds	r7, #1
 8011ca0:	606b      	str	r3, [r5, #4]
 8011ca2:	7839      	ldrb	r1, [r7, #0]
 8011ca4:	1c78      	adds	r0, r7, #1
 8011ca6:	3930      	subs	r1, #48	; 0x30
 8011ca8:	4684      	mov	ip, r0
 8011caa:	2909      	cmp	r1, #9
 8011cac:	d903      	bls.n	8011cb6 <_vfiprintf_r+0x1fe>
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d0c3      	beq.n	8011c3a <_vfiprintf_r+0x182>
 8011cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8011cb4:	e7c1      	b.n	8011c3a <_vfiprintf_r+0x182>
 8011cb6:	230a      	movs	r3, #10
 8011cb8:	435a      	muls	r2, r3
 8011cba:	4667      	mov	r7, ip
 8011cbc:	1852      	adds	r2, r2, r1
 8011cbe:	3b09      	subs	r3, #9
 8011cc0:	e7ef      	b.n	8011ca2 <_vfiprintf_r+0x1ea>
 8011cc2:	ab07      	add	r3, sp, #28
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	0022      	movs	r2, r4
 8011cc8:	0029      	movs	r1, r5
 8011cca:	0030      	movs	r0, r6
 8011ccc:	4b16      	ldr	r3, [pc, #88]	; (8011d28 <_vfiprintf_r+0x270>)
 8011cce:	e000      	b.n	8011cd2 <_vfiprintf_r+0x21a>
 8011cd0:	bf00      	nop
 8011cd2:	9004      	str	r0, [sp, #16]
 8011cd4:	9b04      	ldr	r3, [sp, #16]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	d1d1      	bne.n	8011c7e <_vfiprintf_r+0x1c6>
 8011cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cdc:	07db      	lsls	r3, r3, #31
 8011cde:	d405      	bmi.n	8011cec <_vfiprintf_r+0x234>
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	059b      	lsls	r3, r3, #22
 8011ce4:	d402      	bmi.n	8011cec <_vfiprintf_r+0x234>
 8011ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ce8:	f7ff fcde 	bl	80116a8 <__retarget_lock_release_recursive>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	065b      	lsls	r3, r3, #25
 8011cf0:	d500      	bpl.n	8011cf4 <_vfiprintf_r+0x23c>
 8011cf2:	e70a      	b.n	8011b0a <_vfiprintf_r+0x52>
 8011cf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011cf6:	e70a      	b.n	8011b0e <_vfiprintf_r+0x56>
 8011cf8:	ab07      	add	r3, sp, #28
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	0022      	movs	r2, r4
 8011cfe:	0029      	movs	r1, r5
 8011d00:	0030      	movs	r0, r6
 8011d02:	4b09      	ldr	r3, [pc, #36]	; (8011d28 <_vfiprintf_r+0x270>)
 8011d04:	f000 f882 	bl	8011e0c <_printf_i>
 8011d08:	e7e3      	b.n	8011cd2 <_vfiprintf_r+0x21a>
 8011d0a:	46c0      	nop			; (mov r8, r8)
 8011d0c:	08015fd4 	.word	0x08015fd4
 8011d10:	08015ff4 	.word	0x08015ff4
 8011d14:	08015fb4 	.word	0x08015fb4
 8011d18:	08016014 	.word	0x08016014
 8011d1c:	0801601a 	.word	0x0801601a
 8011d20:	0801601e 	.word	0x0801601e
 8011d24:	00000000 	.word	0x00000000
 8011d28:	08011a93 	.word	0x08011a93

08011d2c <_printf_common>:
 8011d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d2e:	0015      	movs	r5, r2
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	688a      	ldr	r2, [r1, #8]
 8011d34:	690b      	ldr	r3, [r1, #16]
 8011d36:	000c      	movs	r4, r1
 8011d38:	9000      	str	r0, [sp, #0]
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	da00      	bge.n	8011d40 <_printf_common+0x14>
 8011d3e:	0013      	movs	r3, r2
 8011d40:	0022      	movs	r2, r4
 8011d42:	602b      	str	r3, [r5, #0]
 8011d44:	3243      	adds	r2, #67	; 0x43
 8011d46:	7812      	ldrb	r2, [r2, #0]
 8011d48:	2a00      	cmp	r2, #0
 8011d4a:	d001      	beq.n	8011d50 <_printf_common+0x24>
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	602b      	str	r3, [r5, #0]
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	069b      	lsls	r3, r3, #26
 8011d54:	d502      	bpl.n	8011d5c <_printf_common+0x30>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	3302      	adds	r3, #2
 8011d5a:	602b      	str	r3, [r5, #0]
 8011d5c:	6822      	ldr	r2, [r4, #0]
 8011d5e:	2306      	movs	r3, #6
 8011d60:	0017      	movs	r7, r2
 8011d62:	401f      	ands	r7, r3
 8011d64:	421a      	tst	r2, r3
 8011d66:	d027      	beq.n	8011db8 <_printf_common+0x8c>
 8011d68:	0023      	movs	r3, r4
 8011d6a:	3343      	adds	r3, #67	; 0x43
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	1e5a      	subs	r2, r3, #1
 8011d70:	4193      	sbcs	r3, r2
 8011d72:	6822      	ldr	r2, [r4, #0]
 8011d74:	0692      	lsls	r2, r2, #26
 8011d76:	d430      	bmi.n	8011dda <_printf_common+0xae>
 8011d78:	0022      	movs	r2, r4
 8011d7a:	9901      	ldr	r1, [sp, #4]
 8011d7c:	9800      	ldr	r0, [sp, #0]
 8011d7e:	9e08      	ldr	r6, [sp, #32]
 8011d80:	3243      	adds	r2, #67	; 0x43
 8011d82:	47b0      	blx	r6
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d025      	beq.n	8011dd4 <_printf_common+0xa8>
 8011d88:	2306      	movs	r3, #6
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	682a      	ldr	r2, [r5, #0]
 8011d8e:	68e1      	ldr	r1, [r4, #12]
 8011d90:	2500      	movs	r5, #0
 8011d92:	4003      	ands	r3, r0
 8011d94:	2b04      	cmp	r3, #4
 8011d96:	d103      	bne.n	8011da0 <_printf_common+0x74>
 8011d98:	1a8d      	subs	r5, r1, r2
 8011d9a:	43eb      	mvns	r3, r5
 8011d9c:	17db      	asrs	r3, r3, #31
 8011d9e:	401d      	ands	r5, r3
 8011da0:	68a3      	ldr	r3, [r4, #8]
 8011da2:	6922      	ldr	r2, [r4, #16]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	dd01      	ble.n	8011dac <_printf_common+0x80>
 8011da8:	1a9b      	subs	r3, r3, r2
 8011daa:	18ed      	adds	r5, r5, r3
 8011dac:	2700      	movs	r7, #0
 8011dae:	42bd      	cmp	r5, r7
 8011db0:	d120      	bne.n	8011df4 <_printf_common+0xc8>
 8011db2:	2000      	movs	r0, #0
 8011db4:	e010      	b.n	8011dd8 <_printf_common+0xac>
 8011db6:	3701      	adds	r7, #1
 8011db8:	68e3      	ldr	r3, [r4, #12]
 8011dba:	682a      	ldr	r2, [r5, #0]
 8011dbc:	1a9b      	subs	r3, r3, r2
 8011dbe:	42bb      	cmp	r3, r7
 8011dc0:	ddd2      	ble.n	8011d68 <_printf_common+0x3c>
 8011dc2:	0022      	movs	r2, r4
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	9901      	ldr	r1, [sp, #4]
 8011dc8:	9800      	ldr	r0, [sp, #0]
 8011dca:	9e08      	ldr	r6, [sp, #32]
 8011dcc:	3219      	adds	r2, #25
 8011dce:	47b0      	blx	r6
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d1f0      	bne.n	8011db6 <_printf_common+0x8a>
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	4240      	negs	r0, r0
 8011dd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011dda:	2030      	movs	r0, #48	; 0x30
 8011ddc:	18e1      	adds	r1, r4, r3
 8011dde:	3143      	adds	r1, #67	; 0x43
 8011de0:	7008      	strb	r0, [r1, #0]
 8011de2:	0021      	movs	r1, r4
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	3145      	adds	r1, #69	; 0x45
 8011de8:	7809      	ldrb	r1, [r1, #0]
 8011dea:	18a2      	adds	r2, r4, r2
 8011dec:	3243      	adds	r2, #67	; 0x43
 8011dee:	3302      	adds	r3, #2
 8011df0:	7011      	strb	r1, [r2, #0]
 8011df2:	e7c1      	b.n	8011d78 <_printf_common+0x4c>
 8011df4:	0022      	movs	r2, r4
 8011df6:	2301      	movs	r3, #1
 8011df8:	9901      	ldr	r1, [sp, #4]
 8011dfa:	9800      	ldr	r0, [sp, #0]
 8011dfc:	9e08      	ldr	r6, [sp, #32]
 8011dfe:	321a      	adds	r2, #26
 8011e00:	47b0      	blx	r6
 8011e02:	1c43      	adds	r3, r0, #1
 8011e04:	d0e6      	beq.n	8011dd4 <_printf_common+0xa8>
 8011e06:	3701      	adds	r7, #1
 8011e08:	e7d1      	b.n	8011dae <_printf_common+0x82>
	...

08011e0c <_printf_i>:
 8011e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e0e:	b08b      	sub	sp, #44	; 0x2c
 8011e10:	9206      	str	r2, [sp, #24]
 8011e12:	000a      	movs	r2, r1
 8011e14:	3243      	adds	r2, #67	; 0x43
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	9005      	str	r0, [sp, #20]
 8011e1a:	9204      	str	r2, [sp, #16]
 8011e1c:	7e0a      	ldrb	r2, [r1, #24]
 8011e1e:	000c      	movs	r4, r1
 8011e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e22:	2a78      	cmp	r2, #120	; 0x78
 8011e24:	d806      	bhi.n	8011e34 <_printf_i+0x28>
 8011e26:	2a62      	cmp	r2, #98	; 0x62
 8011e28:	d808      	bhi.n	8011e3c <_printf_i+0x30>
 8011e2a:	2a00      	cmp	r2, #0
 8011e2c:	d100      	bne.n	8011e30 <_printf_i+0x24>
 8011e2e:	e0c0      	b.n	8011fb2 <_printf_i+0x1a6>
 8011e30:	2a58      	cmp	r2, #88	; 0x58
 8011e32:	d052      	beq.n	8011eda <_printf_i+0xce>
 8011e34:	0026      	movs	r6, r4
 8011e36:	3642      	adds	r6, #66	; 0x42
 8011e38:	7032      	strb	r2, [r6, #0]
 8011e3a:	e022      	b.n	8011e82 <_printf_i+0x76>
 8011e3c:	0010      	movs	r0, r2
 8011e3e:	3863      	subs	r0, #99	; 0x63
 8011e40:	2815      	cmp	r0, #21
 8011e42:	d8f7      	bhi.n	8011e34 <_printf_i+0x28>
 8011e44:	f7ee f95c 	bl	8000100 <__gnu_thumb1_case_shi>
 8011e48:	001f0016 	.word	0x001f0016
 8011e4c:	fff6fff6 	.word	0xfff6fff6
 8011e50:	fff6fff6 	.word	0xfff6fff6
 8011e54:	fff6001f 	.word	0xfff6001f
 8011e58:	fff6fff6 	.word	0xfff6fff6
 8011e5c:	00a8fff6 	.word	0x00a8fff6
 8011e60:	009a0036 	.word	0x009a0036
 8011e64:	fff6fff6 	.word	0xfff6fff6
 8011e68:	fff600b9 	.word	0xfff600b9
 8011e6c:	fff60036 	.word	0xfff60036
 8011e70:	009efff6 	.word	0x009efff6
 8011e74:	0026      	movs	r6, r4
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	3642      	adds	r6, #66	; 0x42
 8011e7a:	1d11      	adds	r1, r2, #4
 8011e7c:	6019      	str	r1, [r3, #0]
 8011e7e:	6813      	ldr	r3, [r2, #0]
 8011e80:	7033      	strb	r3, [r6, #0]
 8011e82:	2301      	movs	r3, #1
 8011e84:	e0a7      	b.n	8011fd6 <_printf_i+0x1ca>
 8011e86:	6808      	ldr	r0, [r1, #0]
 8011e88:	6819      	ldr	r1, [r3, #0]
 8011e8a:	1d0a      	adds	r2, r1, #4
 8011e8c:	0605      	lsls	r5, r0, #24
 8011e8e:	d50b      	bpl.n	8011ea8 <_printf_i+0x9c>
 8011e90:	680d      	ldr	r5, [r1, #0]
 8011e92:	601a      	str	r2, [r3, #0]
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	da03      	bge.n	8011ea0 <_printf_i+0x94>
 8011e98:	232d      	movs	r3, #45	; 0x2d
 8011e9a:	9a04      	ldr	r2, [sp, #16]
 8011e9c:	426d      	negs	r5, r5
 8011e9e:	7013      	strb	r3, [r2, #0]
 8011ea0:	4b61      	ldr	r3, [pc, #388]	; (8012028 <_printf_i+0x21c>)
 8011ea2:	270a      	movs	r7, #10
 8011ea4:	9303      	str	r3, [sp, #12]
 8011ea6:	e032      	b.n	8011f0e <_printf_i+0x102>
 8011ea8:	680d      	ldr	r5, [r1, #0]
 8011eaa:	601a      	str	r2, [r3, #0]
 8011eac:	0641      	lsls	r1, r0, #25
 8011eae:	d5f1      	bpl.n	8011e94 <_printf_i+0x88>
 8011eb0:	b22d      	sxth	r5, r5
 8011eb2:	e7ef      	b.n	8011e94 <_printf_i+0x88>
 8011eb4:	680d      	ldr	r5, [r1, #0]
 8011eb6:	6819      	ldr	r1, [r3, #0]
 8011eb8:	1d08      	adds	r0, r1, #4
 8011eba:	6018      	str	r0, [r3, #0]
 8011ebc:	062e      	lsls	r6, r5, #24
 8011ebe:	d501      	bpl.n	8011ec4 <_printf_i+0xb8>
 8011ec0:	680d      	ldr	r5, [r1, #0]
 8011ec2:	e003      	b.n	8011ecc <_printf_i+0xc0>
 8011ec4:	066d      	lsls	r5, r5, #25
 8011ec6:	d5fb      	bpl.n	8011ec0 <_printf_i+0xb4>
 8011ec8:	680d      	ldr	r5, [r1, #0]
 8011eca:	b2ad      	uxth	r5, r5
 8011ecc:	4b56      	ldr	r3, [pc, #344]	; (8012028 <_printf_i+0x21c>)
 8011ece:	270a      	movs	r7, #10
 8011ed0:	9303      	str	r3, [sp, #12]
 8011ed2:	2a6f      	cmp	r2, #111	; 0x6f
 8011ed4:	d117      	bne.n	8011f06 <_printf_i+0xfa>
 8011ed6:	2708      	movs	r7, #8
 8011ed8:	e015      	b.n	8011f06 <_printf_i+0xfa>
 8011eda:	3145      	adds	r1, #69	; 0x45
 8011edc:	700a      	strb	r2, [r1, #0]
 8011ede:	4a52      	ldr	r2, [pc, #328]	; (8012028 <_printf_i+0x21c>)
 8011ee0:	9203      	str	r2, [sp, #12]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	6821      	ldr	r1, [r4, #0]
 8011ee6:	ca20      	ldmia	r2!, {r5}
 8011ee8:	601a      	str	r2, [r3, #0]
 8011eea:	0608      	lsls	r0, r1, #24
 8011eec:	d550      	bpl.n	8011f90 <_printf_i+0x184>
 8011eee:	07cb      	lsls	r3, r1, #31
 8011ef0:	d502      	bpl.n	8011ef8 <_printf_i+0xec>
 8011ef2:	2320      	movs	r3, #32
 8011ef4:	4319      	orrs	r1, r3
 8011ef6:	6021      	str	r1, [r4, #0]
 8011ef8:	2710      	movs	r7, #16
 8011efa:	2d00      	cmp	r5, #0
 8011efc:	d103      	bne.n	8011f06 <_printf_i+0xfa>
 8011efe:	2320      	movs	r3, #32
 8011f00:	6822      	ldr	r2, [r4, #0]
 8011f02:	439a      	bics	r2, r3
 8011f04:	6022      	str	r2, [r4, #0]
 8011f06:	0023      	movs	r3, r4
 8011f08:	2200      	movs	r2, #0
 8011f0a:	3343      	adds	r3, #67	; 0x43
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	6863      	ldr	r3, [r4, #4]
 8011f10:	60a3      	str	r3, [r4, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	db03      	blt.n	8011f1e <_printf_i+0x112>
 8011f16:	2204      	movs	r2, #4
 8011f18:	6821      	ldr	r1, [r4, #0]
 8011f1a:	4391      	bics	r1, r2
 8011f1c:	6021      	str	r1, [r4, #0]
 8011f1e:	2d00      	cmp	r5, #0
 8011f20:	d102      	bne.n	8011f28 <_printf_i+0x11c>
 8011f22:	9e04      	ldr	r6, [sp, #16]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00c      	beq.n	8011f42 <_printf_i+0x136>
 8011f28:	9e04      	ldr	r6, [sp, #16]
 8011f2a:	0028      	movs	r0, r5
 8011f2c:	0039      	movs	r1, r7
 8011f2e:	f7ee f977 	bl	8000220 <__aeabi_uidivmod>
 8011f32:	9b03      	ldr	r3, [sp, #12]
 8011f34:	3e01      	subs	r6, #1
 8011f36:	5c5b      	ldrb	r3, [r3, r1]
 8011f38:	7033      	strb	r3, [r6, #0]
 8011f3a:	002b      	movs	r3, r5
 8011f3c:	0005      	movs	r5, r0
 8011f3e:	429f      	cmp	r7, r3
 8011f40:	d9f3      	bls.n	8011f2a <_printf_i+0x11e>
 8011f42:	2f08      	cmp	r7, #8
 8011f44:	d109      	bne.n	8011f5a <_printf_i+0x14e>
 8011f46:	6823      	ldr	r3, [r4, #0]
 8011f48:	07db      	lsls	r3, r3, #31
 8011f4a:	d506      	bpl.n	8011f5a <_printf_i+0x14e>
 8011f4c:	6863      	ldr	r3, [r4, #4]
 8011f4e:	6922      	ldr	r2, [r4, #16]
 8011f50:	4293      	cmp	r3, r2
 8011f52:	dc02      	bgt.n	8011f5a <_printf_i+0x14e>
 8011f54:	2330      	movs	r3, #48	; 0x30
 8011f56:	3e01      	subs	r6, #1
 8011f58:	7033      	strb	r3, [r6, #0]
 8011f5a:	9b04      	ldr	r3, [sp, #16]
 8011f5c:	1b9b      	subs	r3, r3, r6
 8011f5e:	6123      	str	r3, [r4, #16]
 8011f60:	9b07      	ldr	r3, [sp, #28]
 8011f62:	0021      	movs	r1, r4
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	9805      	ldr	r0, [sp, #20]
 8011f68:	9b06      	ldr	r3, [sp, #24]
 8011f6a:	aa09      	add	r2, sp, #36	; 0x24
 8011f6c:	f7ff fede 	bl	8011d2c <_printf_common>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d135      	bne.n	8011fe0 <_printf_i+0x1d4>
 8011f74:	2001      	movs	r0, #1
 8011f76:	4240      	negs	r0, r0
 8011f78:	b00b      	add	sp, #44	; 0x2c
 8011f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f7c:	2220      	movs	r2, #32
 8011f7e:	6809      	ldr	r1, [r1, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	6022      	str	r2, [r4, #0]
 8011f84:	0022      	movs	r2, r4
 8011f86:	2178      	movs	r1, #120	; 0x78
 8011f88:	3245      	adds	r2, #69	; 0x45
 8011f8a:	7011      	strb	r1, [r2, #0]
 8011f8c:	4a27      	ldr	r2, [pc, #156]	; (801202c <_printf_i+0x220>)
 8011f8e:	e7a7      	b.n	8011ee0 <_printf_i+0xd4>
 8011f90:	0648      	lsls	r0, r1, #25
 8011f92:	d5ac      	bpl.n	8011eee <_printf_i+0xe2>
 8011f94:	b2ad      	uxth	r5, r5
 8011f96:	e7aa      	b.n	8011eee <_printf_i+0xe2>
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	680d      	ldr	r5, [r1, #0]
 8011f9c:	1d10      	adds	r0, r2, #4
 8011f9e:	6949      	ldr	r1, [r1, #20]
 8011fa0:	6018      	str	r0, [r3, #0]
 8011fa2:	6813      	ldr	r3, [r2, #0]
 8011fa4:	062e      	lsls	r6, r5, #24
 8011fa6:	d501      	bpl.n	8011fac <_printf_i+0x1a0>
 8011fa8:	6019      	str	r1, [r3, #0]
 8011faa:	e002      	b.n	8011fb2 <_printf_i+0x1a6>
 8011fac:	066d      	lsls	r5, r5, #25
 8011fae:	d5fb      	bpl.n	8011fa8 <_printf_i+0x19c>
 8011fb0:	8019      	strh	r1, [r3, #0]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	9e04      	ldr	r6, [sp, #16]
 8011fb6:	6123      	str	r3, [r4, #16]
 8011fb8:	e7d2      	b.n	8011f60 <_printf_i+0x154>
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	1d11      	adds	r1, r2, #4
 8011fbe:	6019      	str	r1, [r3, #0]
 8011fc0:	6816      	ldr	r6, [r2, #0]
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	0030      	movs	r0, r6
 8011fc6:	6862      	ldr	r2, [r4, #4]
 8011fc8:	f000 f8dc 	bl	8012184 <memchr>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d001      	beq.n	8011fd4 <_printf_i+0x1c8>
 8011fd0:	1b80      	subs	r0, r0, r6
 8011fd2:	6060      	str	r0, [r4, #4]
 8011fd4:	6863      	ldr	r3, [r4, #4]
 8011fd6:	6123      	str	r3, [r4, #16]
 8011fd8:	2300      	movs	r3, #0
 8011fda:	9a04      	ldr	r2, [sp, #16]
 8011fdc:	7013      	strb	r3, [r2, #0]
 8011fde:	e7bf      	b.n	8011f60 <_printf_i+0x154>
 8011fe0:	6923      	ldr	r3, [r4, #16]
 8011fe2:	0032      	movs	r2, r6
 8011fe4:	9906      	ldr	r1, [sp, #24]
 8011fe6:	9805      	ldr	r0, [sp, #20]
 8011fe8:	9d07      	ldr	r5, [sp, #28]
 8011fea:	47a8      	blx	r5
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d0c1      	beq.n	8011f74 <_printf_i+0x168>
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	079b      	lsls	r3, r3, #30
 8011ff4:	d415      	bmi.n	8012022 <_printf_i+0x216>
 8011ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff8:	68e0      	ldr	r0, [r4, #12]
 8011ffa:	4298      	cmp	r0, r3
 8011ffc:	dabc      	bge.n	8011f78 <_printf_i+0x16c>
 8011ffe:	0018      	movs	r0, r3
 8012000:	e7ba      	b.n	8011f78 <_printf_i+0x16c>
 8012002:	0022      	movs	r2, r4
 8012004:	2301      	movs	r3, #1
 8012006:	9906      	ldr	r1, [sp, #24]
 8012008:	9805      	ldr	r0, [sp, #20]
 801200a:	9e07      	ldr	r6, [sp, #28]
 801200c:	3219      	adds	r2, #25
 801200e:	47b0      	blx	r6
 8012010:	1c43      	adds	r3, r0, #1
 8012012:	d0af      	beq.n	8011f74 <_printf_i+0x168>
 8012014:	3501      	adds	r5, #1
 8012016:	68e3      	ldr	r3, [r4, #12]
 8012018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801201a:	1a9b      	subs	r3, r3, r2
 801201c:	42ab      	cmp	r3, r5
 801201e:	dcf0      	bgt.n	8012002 <_printf_i+0x1f6>
 8012020:	e7e9      	b.n	8011ff6 <_printf_i+0x1ea>
 8012022:	2500      	movs	r5, #0
 8012024:	e7f7      	b.n	8012016 <_printf_i+0x20a>
 8012026:	46c0      	nop			; (mov r8, r8)
 8012028:	08016025 	.word	0x08016025
 801202c:	08016036 	.word	0x08016036

08012030 <__sread>:
 8012030:	b570      	push	{r4, r5, r6, lr}
 8012032:	000c      	movs	r4, r1
 8012034:	250e      	movs	r5, #14
 8012036:	5f49      	ldrsh	r1, [r1, r5]
 8012038:	f000 f8f2 	bl	8012220 <_read_r>
 801203c:	2800      	cmp	r0, #0
 801203e:	db03      	blt.n	8012048 <__sread+0x18>
 8012040:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012042:	181b      	adds	r3, r3, r0
 8012044:	6563      	str	r3, [r4, #84]	; 0x54
 8012046:	bd70      	pop	{r4, r5, r6, pc}
 8012048:	89a3      	ldrh	r3, [r4, #12]
 801204a:	4a02      	ldr	r2, [pc, #8]	; (8012054 <__sread+0x24>)
 801204c:	4013      	ands	r3, r2
 801204e:	81a3      	strh	r3, [r4, #12]
 8012050:	e7f9      	b.n	8012046 <__sread+0x16>
 8012052:	46c0      	nop			; (mov r8, r8)
 8012054:	ffffefff 	.word	0xffffefff

08012058 <__swrite>:
 8012058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205a:	001f      	movs	r7, r3
 801205c:	898b      	ldrh	r3, [r1, #12]
 801205e:	0005      	movs	r5, r0
 8012060:	000c      	movs	r4, r1
 8012062:	0016      	movs	r6, r2
 8012064:	05db      	lsls	r3, r3, #23
 8012066:	d505      	bpl.n	8012074 <__swrite+0x1c>
 8012068:	230e      	movs	r3, #14
 801206a:	5ec9      	ldrsh	r1, [r1, r3]
 801206c:	2200      	movs	r2, #0
 801206e:	2302      	movs	r3, #2
 8012070:	f000 f874 	bl	801215c <_lseek_r>
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	4a05      	ldr	r2, [pc, #20]	; (801208c <__swrite+0x34>)
 8012078:	0028      	movs	r0, r5
 801207a:	4013      	ands	r3, r2
 801207c:	81a3      	strh	r3, [r4, #12]
 801207e:	0032      	movs	r2, r6
 8012080:	230e      	movs	r3, #14
 8012082:	5ee1      	ldrsh	r1, [r4, r3]
 8012084:	003b      	movs	r3, r7
 8012086:	f000 f81f 	bl	80120c8 <_write_r>
 801208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801208c:	ffffefff 	.word	0xffffefff

08012090 <__sseek>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	000c      	movs	r4, r1
 8012094:	250e      	movs	r5, #14
 8012096:	5f49      	ldrsh	r1, [r1, r5]
 8012098:	f000 f860 	bl	801215c <_lseek_r>
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	1c42      	adds	r2, r0, #1
 80120a0:	d103      	bne.n	80120aa <__sseek+0x1a>
 80120a2:	4a05      	ldr	r2, [pc, #20]	; (80120b8 <__sseek+0x28>)
 80120a4:	4013      	ands	r3, r2
 80120a6:	81a3      	strh	r3, [r4, #12]
 80120a8:	bd70      	pop	{r4, r5, r6, pc}
 80120aa:	2280      	movs	r2, #128	; 0x80
 80120ac:	0152      	lsls	r2, r2, #5
 80120ae:	4313      	orrs	r3, r2
 80120b0:	81a3      	strh	r3, [r4, #12]
 80120b2:	6560      	str	r0, [r4, #84]	; 0x54
 80120b4:	e7f8      	b.n	80120a8 <__sseek+0x18>
 80120b6:	46c0      	nop			; (mov r8, r8)
 80120b8:	ffffefff 	.word	0xffffefff

080120bc <__sclose>:
 80120bc:	b510      	push	{r4, lr}
 80120be:	230e      	movs	r3, #14
 80120c0:	5ec9      	ldrsh	r1, [r1, r3]
 80120c2:	f000 f815 	bl	80120f0 <_close_r>
 80120c6:	bd10      	pop	{r4, pc}

080120c8 <_write_r>:
 80120c8:	b570      	push	{r4, r5, r6, lr}
 80120ca:	0004      	movs	r4, r0
 80120cc:	0008      	movs	r0, r1
 80120ce:	0011      	movs	r1, r2
 80120d0:	001a      	movs	r2, r3
 80120d2:	2300      	movs	r3, #0
 80120d4:	4d05      	ldr	r5, [pc, #20]	; (80120ec <_write_r+0x24>)
 80120d6:	602b      	str	r3, [r5, #0]
 80120d8:	f7fe fd77 	bl	8010bca <_write>
 80120dc:	1c43      	adds	r3, r0, #1
 80120de:	d103      	bne.n	80120e8 <_write_r+0x20>
 80120e0:	682b      	ldr	r3, [r5, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d000      	beq.n	80120e8 <_write_r+0x20>
 80120e6:	6023      	str	r3, [r4, #0]
 80120e8:	bd70      	pop	{r4, r5, r6, pc}
 80120ea:	46c0      	nop			; (mov r8, r8)
 80120ec:	200005b8 	.word	0x200005b8

080120f0 <_close_r>:
 80120f0:	2300      	movs	r3, #0
 80120f2:	b570      	push	{r4, r5, r6, lr}
 80120f4:	4d06      	ldr	r5, [pc, #24]	; (8012110 <_close_r+0x20>)
 80120f6:	0004      	movs	r4, r0
 80120f8:	0008      	movs	r0, r1
 80120fa:	602b      	str	r3, [r5, #0]
 80120fc:	f7fe fd81 	bl	8010c02 <_close>
 8012100:	1c43      	adds	r3, r0, #1
 8012102:	d103      	bne.n	801210c <_close_r+0x1c>
 8012104:	682b      	ldr	r3, [r5, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d000      	beq.n	801210c <_close_r+0x1c>
 801210a:	6023      	str	r3, [r4, #0]
 801210c:	bd70      	pop	{r4, r5, r6, pc}
 801210e:	46c0      	nop			; (mov r8, r8)
 8012110:	200005b8 	.word	0x200005b8

08012114 <_fstat_r>:
 8012114:	2300      	movs	r3, #0
 8012116:	b570      	push	{r4, r5, r6, lr}
 8012118:	4d06      	ldr	r5, [pc, #24]	; (8012134 <_fstat_r+0x20>)
 801211a:	0004      	movs	r4, r0
 801211c:	0008      	movs	r0, r1
 801211e:	0011      	movs	r1, r2
 8012120:	602b      	str	r3, [r5, #0]
 8012122:	f7fe fd78 	bl	8010c16 <_fstat>
 8012126:	1c43      	adds	r3, r0, #1
 8012128:	d103      	bne.n	8012132 <_fstat_r+0x1e>
 801212a:	682b      	ldr	r3, [r5, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d000      	beq.n	8012132 <_fstat_r+0x1e>
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	200005b8 	.word	0x200005b8

08012138 <_isatty_r>:
 8012138:	2300      	movs	r3, #0
 801213a:	b570      	push	{r4, r5, r6, lr}
 801213c:	4d06      	ldr	r5, [pc, #24]	; (8012158 <_isatty_r+0x20>)
 801213e:	0004      	movs	r4, r0
 8012140:	0008      	movs	r0, r1
 8012142:	602b      	str	r3, [r5, #0]
 8012144:	f7fe fd75 	bl	8010c32 <_isatty>
 8012148:	1c43      	adds	r3, r0, #1
 801214a:	d103      	bne.n	8012154 <_isatty_r+0x1c>
 801214c:	682b      	ldr	r3, [r5, #0]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d000      	beq.n	8012154 <_isatty_r+0x1c>
 8012152:	6023      	str	r3, [r4, #0]
 8012154:	bd70      	pop	{r4, r5, r6, pc}
 8012156:	46c0      	nop			; (mov r8, r8)
 8012158:	200005b8 	.word	0x200005b8

0801215c <_lseek_r>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	0004      	movs	r4, r0
 8012160:	0008      	movs	r0, r1
 8012162:	0011      	movs	r1, r2
 8012164:	001a      	movs	r2, r3
 8012166:	2300      	movs	r3, #0
 8012168:	4d05      	ldr	r5, [pc, #20]	; (8012180 <_lseek_r+0x24>)
 801216a:	602b      	str	r3, [r5, #0]
 801216c:	f7fe fd6a 	bl	8010c44 <_lseek>
 8012170:	1c43      	adds	r3, r0, #1
 8012172:	d103      	bne.n	801217c <_lseek_r+0x20>
 8012174:	682b      	ldr	r3, [r5, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d000      	beq.n	801217c <_lseek_r+0x20>
 801217a:	6023      	str	r3, [r4, #0]
 801217c:	bd70      	pop	{r4, r5, r6, pc}
 801217e:	46c0      	nop			; (mov r8, r8)
 8012180:	200005b8 	.word	0x200005b8

08012184 <memchr>:
 8012184:	b2c9      	uxtb	r1, r1
 8012186:	1882      	adds	r2, r0, r2
 8012188:	4290      	cmp	r0, r2
 801218a:	d101      	bne.n	8012190 <memchr+0xc>
 801218c:	2000      	movs	r0, #0
 801218e:	4770      	bx	lr
 8012190:	7803      	ldrb	r3, [r0, #0]
 8012192:	428b      	cmp	r3, r1
 8012194:	d0fb      	beq.n	801218e <memchr+0xa>
 8012196:	3001      	adds	r0, #1
 8012198:	e7f6      	b.n	8012188 <memchr+0x4>

0801219a <memcpy>:
 801219a:	2300      	movs	r3, #0
 801219c:	b510      	push	{r4, lr}
 801219e:	429a      	cmp	r2, r3
 80121a0:	d100      	bne.n	80121a4 <memcpy+0xa>
 80121a2:	bd10      	pop	{r4, pc}
 80121a4:	5ccc      	ldrb	r4, [r1, r3]
 80121a6:	54c4      	strb	r4, [r0, r3]
 80121a8:	3301      	adds	r3, #1
 80121aa:	e7f8      	b.n	801219e <memcpy+0x4>

080121ac <memmove>:
 80121ac:	b510      	push	{r4, lr}
 80121ae:	4288      	cmp	r0, r1
 80121b0:	d902      	bls.n	80121b8 <memmove+0xc>
 80121b2:	188b      	adds	r3, r1, r2
 80121b4:	4298      	cmp	r0, r3
 80121b6:	d303      	bcc.n	80121c0 <memmove+0x14>
 80121b8:	2300      	movs	r3, #0
 80121ba:	e007      	b.n	80121cc <memmove+0x20>
 80121bc:	5c8b      	ldrb	r3, [r1, r2]
 80121be:	5483      	strb	r3, [r0, r2]
 80121c0:	3a01      	subs	r2, #1
 80121c2:	d2fb      	bcs.n	80121bc <memmove+0x10>
 80121c4:	bd10      	pop	{r4, pc}
 80121c6:	5ccc      	ldrb	r4, [r1, r3]
 80121c8:	54c4      	strb	r4, [r0, r3]
 80121ca:	3301      	adds	r3, #1
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d1fa      	bne.n	80121c6 <memmove+0x1a>
 80121d0:	e7f8      	b.n	80121c4 <memmove+0x18>

080121d2 <_realloc_r>:
 80121d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d4:	0007      	movs	r7, r0
 80121d6:	000d      	movs	r5, r1
 80121d8:	0016      	movs	r6, r2
 80121da:	2900      	cmp	r1, #0
 80121dc:	d105      	bne.n	80121ea <_realloc_r+0x18>
 80121de:	0011      	movs	r1, r2
 80121e0:	f7fe fe9e 	bl	8010f20 <_malloc_r>
 80121e4:	0004      	movs	r4, r0
 80121e6:	0020      	movs	r0, r4
 80121e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ea:	2a00      	cmp	r2, #0
 80121ec:	d103      	bne.n	80121f6 <_realloc_r+0x24>
 80121ee:	f7fe fe4d 	bl	8010e8c <_free_r>
 80121f2:	0034      	movs	r4, r6
 80121f4:	e7f7      	b.n	80121e6 <_realloc_r+0x14>
 80121f6:	f000 f827 	bl	8012248 <_malloc_usable_size_r>
 80121fa:	002c      	movs	r4, r5
 80121fc:	42b0      	cmp	r0, r6
 80121fe:	d2f2      	bcs.n	80121e6 <_realloc_r+0x14>
 8012200:	0031      	movs	r1, r6
 8012202:	0038      	movs	r0, r7
 8012204:	f7fe fe8c 	bl	8010f20 <_malloc_r>
 8012208:	1e04      	subs	r4, r0, #0
 801220a:	d0ec      	beq.n	80121e6 <_realloc_r+0x14>
 801220c:	0029      	movs	r1, r5
 801220e:	0032      	movs	r2, r6
 8012210:	f7ff ffc3 	bl	801219a <memcpy>
 8012214:	0029      	movs	r1, r5
 8012216:	0038      	movs	r0, r7
 8012218:	f7fe fe38 	bl	8010e8c <_free_r>
 801221c:	e7e3      	b.n	80121e6 <_realloc_r+0x14>
	...

08012220 <_read_r>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	0004      	movs	r4, r0
 8012224:	0008      	movs	r0, r1
 8012226:	0011      	movs	r1, r2
 8012228:	001a      	movs	r2, r3
 801222a:	2300      	movs	r3, #0
 801222c:	4d05      	ldr	r5, [pc, #20]	; (8012244 <_read_r+0x24>)
 801222e:	602b      	str	r3, [r5, #0]
 8012230:	f7fe fcae 	bl	8010b90 <_read>
 8012234:	1c43      	adds	r3, r0, #1
 8012236:	d103      	bne.n	8012240 <_read_r+0x20>
 8012238:	682b      	ldr	r3, [r5, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d000      	beq.n	8012240 <_read_r+0x20>
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	bd70      	pop	{r4, r5, r6, pc}
 8012242:	46c0      	nop			; (mov r8, r8)
 8012244:	200005b8 	.word	0x200005b8

08012248 <_malloc_usable_size_r>:
 8012248:	1f0b      	subs	r3, r1, #4
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	1f18      	subs	r0, r3, #4
 801224e:	2b00      	cmp	r3, #0
 8012250:	da01      	bge.n	8012256 <_malloc_usable_size_r+0xe>
 8012252:	580b      	ldr	r3, [r1, r0]
 8012254:	18c0      	adds	r0, r0, r3
 8012256:	4770      	bx	lr

08012258 <cos>:
 8012258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801225a:	4a1e      	ldr	r2, [pc, #120]	; (80122d4 <cos+0x7c>)
 801225c:	004b      	lsls	r3, r1, #1
 801225e:	b087      	sub	sp, #28
 8012260:	085b      	lsrs	r3, r3, #1
 8012262:	4293      	cmp	r3, r2
 8012264:	dc04      	bgt.n	8012270 <cos+0x18>
 8012266:	2200      	movs	r2, #0
 8012268:	2300      	movs	r3, #0
 801226a:	f000 fc57 	bl	8012b1c <__kernel_cos>
 801226e:	e006      	b.n	801227e <cos+0x26>
 8012270:	4a19      	ldr	r2, [pc, #100]	; (80122d8 <cos+0x80>)
 8012272:	4293      	cmp	r3, r2
 8012274:	dd05      	ble.n	8012282 <cos+0x2a>
 8012276:	0002      	movs	r2, r0
 8012278:	000b      	movs	r3, r1
 801227a:	f7f0 fa9f 	bl	80027bc <__aeabi_dsub>
 801227e:	b007      	add	sp, #28
 8012280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012282:	aa02      	add	r2, sp, #8
 8012284:	f000 fa5e 	bl	8012744 <__ieee754_rem_pio2>
 8012288:	9c04      	ldr	r4, [sp, #16]
 801228a:	9d05      	ldr	r5, [sp, #20]
 801228c:	2303      	movs	r3, #3
 801228e:	4003      	ands	r3, r0
 8012290:	2b01      	cmp	r3, #1
 8012292:	d008      	beq.n	80122a6 <cos+0x4e>
 8012294:	9802      	ldr	r0, [sp, #8]
 8012296:	9903      	ldr	r1, [sp, #12]
 8012298:	2b02      	cmp	r3, #2
 801229a:	d00f      	beq.n	80122bc <cos+0x64>
 801229c:	2b00      	cmp	r3, #0
 801229e:	d112      	bne.n	80122c6 <cos+0x6e>
 80122a0:	0022      	movs	r2, r4
 80122a2:	002b      	movs	r3, r5
 80122a4:	e7e1      	b.n	801226a <cos+0x12>
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	0022      	movs	r2, r4
 80122aa:	9802      	ldr	r0, [sp, #8]
 80122ac:	9903      	ldr	r1, [sp, #12]
 80122ae:	002b      	movs	r3, r5
 80122b0:	f001 f86a 	bl	8013388 <__kernel_sin>
 80122b4:	2380      	movs	r3, #128	; 0x80
 80122b6:	061b      	lsls	r3, r3, #24
 80122b8:	18c9      	adds	r1, r1, r3
 80122ba:	e7e0      	b.n	801227e <cos+0x26>
 80122bc:	0022      	movs	r2, r4
 80122be:	002b      	movs	r3, r5
 80122c0:	f000 fc2c 	bl	8012b1c <__kernel_cos>
 80122c4:	e7f6      	b.n	80122b4 <cos+0x5c>
 80122c6:	2301      	movs	r3, #1
 80122c8:	0022      	movs	r2, r4
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	002b      	movs	r3, r5
 80122ce:	f001 f85b 	bl	8013388 <__kernel_sin>
 80122d2:	e7d4      	b.n	801227e <cos+0x26>
 80122d4:	3fe921fb 	.word	0x3fe921fb
 80122d8:	7fefffff 	.word	0x7fefffff

080122dc <sin>:
 80122dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122de:	4a20      	ldr	r2, [pc, #128]	; (8012360 <sin+0x84>)
 80122e0:	004b      	lsls	r3, r1, #1
 80122e2:	b087      	sub	sp, #28
 80122e4:	085b      	lsrs	r3, r3, #1
 80122e6:	4293      	cmp	r3, r2
 80122e8:	dc06      	bgt.n	80122f8 <sin+0x1c>
 80122ea:	2300      	movs	r3, #0
 80122ec:	2200      	movs	r2, #0
 80122ee:	9300      	str	r3, [sp, #0]
 80122f0:	2300      	movs	r3, #0
 80122f2:	f001 f849 	bl	8013388 <__kernel_sin>
 80122f6:	e006      	b.n	8012306 <sin+0x2a>
 80122f8:	4a1a      	ldr	r2, [pc, #104]	; (8012364 <sin+0x88>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	dd05      	ble.n	801230a <sin+0x2e>
 80122fe:	0002      	movs	r2, r0
 8012300:	000b      	movs	r3, r1
 8012302:	f7f0 fa5b 	bl	80027bc <__aeabi_dsub>
 8012306:	b007      	add	sp, #28
 8012308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801230a:	aa02      	add	r2, sp, #8
 801230c:	f000 fa1a 	bl	8012744 <__ieee754_rem_pio2>
 8012310:	9c04      	ldr	r4, [sp, #16]
 8012312:	9d05      	ldr	r5, [sp, #20]
 8012314:	2303      	movs	r3, #3
 8012316:	4003      	ands	r3, r0
 8012318:	2b01      	cmp	r3, #1
 801231a:	d00a      	beq.n	8012332 <sin+0x56>
 801231c:	9802      	ldr	r0, [sp, #8]
 801231e:	9903      	ldr	r1, [sp, #12]
 8012320:	2b02      	cmp	r3, #2
 8012322:	d00d      	beq.n	8012340 <sin+0x64>
 8012324:	2b00      	cmp	r3, #0
 8012326:	d115      	bne.n	8012354 <sin+0x78>
 8012328:	3301      	adds	r3, #1
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	0022      	movs	r2, r4
 801232e:	002b      	movs	r3, r5
 8012330:	e7df      	b.n	80122f2 <sin+0x16>
 8012332:	0022      	movs	r2, r4
 8012334:	9802      	ldr	r0, [sp, #8]
 8012336:	9903      	ldr	r1, [sp, #12]
 8012338:	002b      	movs	r3, r5
 801233a:	f000 fbef 	bl	8012b1c <__kernel_cos>
 801233e:	e7e2      	b.n	8012306 <sin+0x2a>
 8012340:	2301      	movs	r3, #1
 8012342:	0022      	movs	r2, r4
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	002b      	movs	r3, r5
 8012348:	f001 f81e 	bl	8013388 <__kernel_sin>
 801234c:	2380      	movs	r3, #128	; 0x80
 801234e:	061b      	lsls	r3, r3, #24
 8012350:	18c9      	adds	r1, r1, r3
 8012352:	e7d8      	b.n	8012306 <sin+0x2a>
 8012354:	0022      	movs	r2, r4
 8012356:	002b      	movs	r3, r5
 8012358:	f000 fbe0 	bl	8012b1c <__kernel_cos>
 801235c:	e7f6      	b.n	801234c <sin+0x70>
 801235e:	46c0      	nop			; (mov r8, r8)
 8012360:	3fe921fb 	.word	0x3fe921fb
 8012364:	7fefffff 	.word	0x7fefffff

08012368 <log>:
 8012368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236a:	0004      	movs	r4, r0
 801236c:	000d      	movs	r5, r1
 801236e:	f000 f839 	bl	80123e4 <__ieee754_log>
 8012372:	4b19      	ldr	r3, [pc, #100]	; (80123d8 <log+0x70>)
 8012374:	0006      	movs	r6, r0
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	000f      	movs	r7, r1
 801237a:	b25b      	sxtb	r3, r3
 801237c:	3301      	adds	r3, #1
 801237e:	d01d      	beq.n	80123bc <log+0x54>
 8012380:	0022      	movs	r2, r4
 8012382:	002b      	movs	r3, r5
 8012384:	0020      	movs	r0, r4
 8012386:	0029      	movs	r1, r5
 8012388:	f7f0 fdaa 	bl	8002ee0 <__aeabi_dcmpun>
 801238c:	2800      	cmp	r0, #0
 801238e:	d115      	bne.n	80123bc <log+0x54>
 8012390:	2200      	movs	r2, #0
 8012392:	2300      	movs	r3, #0
 8012394:	0020      	movs	r0, r4
 8012396:	0029      	movs	r1, r5
 8012398:	f7ee f85c 	bl	8000454 <__aeabi_dcmpgt>
 801239c:	2800      	cmp	r0, #0
 801239e:	d10d      	bne.n	80123bc <log+0x54>
 80123a0:	2200      	movs	r2, #0
 80123a2:	2300      	movs	r3, #0
 80123a4:	0020      	movs	r0, r4
 80123a6:	0029      	movs	r1, r5
 80123a8:	f7ee f83a 	bl	8000420 <__aeabi_dcmpeq>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d008      	beq.n	80123c2 <log+0x5a>
 80123b0:	f7fe fd30 	bl	8010e14 <__errno>
 80123b4:	2322      	movs	r3, #34	; 0x22
 80123b6:	2600      	movs	r6, #0
 80123b8:	4f08      	ldr	r7, [pc, #32]	; (80123dc <log+0x74>)
 80123ba:	6003      	str	r3, [r0, #0]
 80123bc:	0030      	movs	r0, r6
 80123be:	0039      	movs	r1, r7
 80123c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c2:	f7fe fd27 	bl	8010e14 <__errno>
 80123c6:	2321      	movs	r3, #33	; 0x21
 80123c8:	6003      	str	r3, [r0, #0]
 80123ca:	4805      	ldr	r0, [pc, #20]	; (80123e0 <log+0x78>)
 80123cc:	f001 f916 	bl	80135fc <nan>
 80123d0:	0006      	movs	r6, r0
 80123d2:	000f      	movs	r7, r1
 80123d4:	e7f2      	b.n	80123bc <log+0x54>
 80123d6:	46c0      	nop			; (mov r8, r8)
 80123d8:	200000e8 	.word	0x200000e8
 80123dc:	fff00000 	.word	0xfff00000
 80123e0:	08016019 	.word	0x08016019

080123e4 <__ieee754_log>:
 80123e4:	2280      	movs	r2, #128	; 0x80
 80123e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123e8:	000b      	movs	r3, r1
 80123ea:	b08d      	sub	sp, #52	; 0x34
 80123ec:	0352      	lsls	r2, r2, #13
 80123ee:	4291      	cmp	r1, r2
 80123f0:	da22      	bge.n	8012438 <__ieee754_log+0x54>
 80123f2:	004a      	lsls	r2, r1, #1
 80123f4:	0852      	lsrs	r2, r2, #1
 80123f6:	4302      	orrs	r2, r0
 80123f8:	d107      	bne.n	801240a <__ieee754_log+0x26>
 80123fa:	2200      	movs	r2, #0
 80123fc:	2300      	movs	r3, #0
 80123fe:	2000      	movs	r0, #0
 8012400:	49b3      	ldr	r1, [pc, #716]	; (80126d0 <__ieee754_log+0x2ec>)
 8012402:	f7ef fb69 	bl	8001ad8 <__aeabi_ddiv>
 8012406:	b00d      	add	sp, #52	; 0x34
 8012408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801240a:	2900      	cmp	r1, #0
 801240c:	da05      	bge.n	801241a <__ieee754_log+0x36>
 801240e:	0002      	movs	r2, r0
 8012410:	f7f0 f9d4 	bl	80027bc <__aeabi_dsub>
 8012414:	2200      	movs	r2, #0
 8012416:	2300      	movs	r3, #0
 8012418:	e7f3      	b.n	8012402 <__ieee754_log+0x1e>
 801241a:	4bae      	ldr	r3, [pc, #696]	; (80126d4 <__ieee754_log+0x2f0>)
 801241c:	2200      	movs	r2, #0
 801241e:	f7ef ff61 	bl	80022e4 <__aeabi_dmul>
 8012422:	2436      	movs	r4, #54	; 0x36
 8012424:	000b      	movs	r3, r1
 8012426:	4264      	negs	r4, r4
 8012428:	4aab      	ldr	r2, [pc, #684]	; (80126d8 <__ieee754_log+0x2f4>)
 801242a:	4293      	cmp	r3, r2
 801242c:	dd06      	ble.n	801243c <__ieee754_log+0x58>
 801242e:	0002      	movs	r2, r0
 8012430:	000b      	movs	r3, r1
 8012432:	f7ee ffe7 	bl	8001404 <__aeabi_dadd>
 8012436:	e7e6      	b.n	8012406 <__ieee754_log+0x22>
 8012438:	2400      	movs	r4, #0
 801243a:	e7f5      	b.n	8012428 <__ieee754_log+0x44>
 801243c:	4da7      	ldr	r5, [pc, #668]	; (80126dc <__ieee754_log+0x2f8>)
 801243e:	151a      	asrs	r2, r3, #20
 8012440:	1952      	adds	r2, r2, r5
 8012442:	1912      	adds	r2, r2, r4
 8012444:	031b      	lsls	r3, r3, #12
 8012446:	4ca6      	ldr	r4, [pc, #664]	; (80126e0 <__ieee754_log+0x2fc>)
 8012448:	0b1b      	lsrs	r3, r3, #12
 801244a:	9302      	str	r3, [sp, #8]
 801244c:	191c      	adds	r4, r3, r4
 801244e:	2380      	movs	r3, #128	; 0x80
 8012450:	035b      	lsls	r3, r3, #13
 8012452:	4023      	ands	r3, r4
 8012454:	4ca3      	ldr	r4, [pc, #652]	; (80126e4 <__ieee754_log+0x300>)
 8012456:	9d02      	ldr	r5, [sp, #8]
 8012458:	405c      	eors	r4, r3
 801245a:	151b      	asrs	r3, r3, #20
 801245c:	189b      	adds	r3, r3, r2
 801245e:	4325      	orrs	r5, r4
 8012460:	2200      	movs	r2, #0
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	0029      	movs	r1, r5
 8012466:	4b9f      	ldr	r3, [pc, #636]	; (80126e4 <__ieee754_log+0x300>)
 8012468:	f7f0 f9a8 	bl	80027bc <__aeabi_dsub>
 801246c:	9b02      	ldr	r3, [sp, #8]
 801246e:	0006      	movs	r6, r0
 8012470:	3302      	adds	r3, #2
 8012472:	031b      	lsls	r3, r3, #12
 8012474:	000f      	movs	r7, r1
 8012476:	2200      	movs	r2, #0
 8012478:	0b1b      	lsrs	r3, r3, #12
 801247a:	2b02      	cmp	r3, #2
 801247c:	dc64      	bgt.n	8012548 <__ieee754_log+0x164>
 801247e:	2300      	movs	r3, #0
 8012480:	f7ed ffce 	bl	8000420 <__aeabi_dcmpeq>
 8012484:	2800      	cmp	r0, #0
 8012486:	d019      	beq.n	80124bc <__ieee754_log+0xd8>
 8012488:	9b00      	ldr	r3, [sp, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d100      	bne.n	8012490 <__ieee754_log+0xac>
 801248e:	e11c      	b.n	80126ca <__ieee754_log+0x2e6>
 8012490:	0018      	movs	r0, r3
 8012492:	f7f0 fd79 	bl	8002f88 <__aeabi_i2d>
 8012496:	4a94      	ldr	r2, [pc, #592]	; (80126e8 <__ieee754_log+0x304>)
 8012498:	4b94      	ldr	r3, [pc, #592]	; (80126ec <__ieee754_log+0x308>)
 801249a:	0004      	movs	r4, r0
 801249c:	000d      	movs	r5, r1
 801249e:	f7ef ff21 	bl	80022e4 <__aeabi_dmul>
 80124a2:	4a93      	ldr	r2, [pc, #588]	; (80126f0 <__ieee754_log+0x30c>)
 80124a4:	0006      	movs	r6, r0
 80124a6:	000f      	movs	r7, r1
 80124a8:	4b92      	ldr	r3, [pc, #584]	; (80126f4 <__ieee754_log+0x310>)
 80124aa:	0020      	movs	r0, r4
 80124ac:	0029      	movs	r1, r5
 80124ae:	f7ef ff19 	bl	80022e4 <__aeabi_dmul>
 80124b2:	0002      	movs	r2, r0
 80124b4:	000b      	movs	r3, r1
 80124b6:	0030      	movs	r0, r6
 80124b8:	0039      	movs	r1, r7
 80124ba:	e7ba      	b.n	8012432 <__ieee754_log+0x4e>
 80124bc:	4a8e      	ldr	r2, [pc, #568]	; (80126f8 <__ieee754_log+0x314>)
 80124be:	4b8f      	ldr	r3, [pc, #572]	; (80126fc <__ieee754_log+0x318>)
 80124c0:	0030      	movs	r0, r6
 80124c2:	0039      	movs	r1, r7
 80124c4:	f7ef ff0e 	bl	80022e4 <__aeabi_dmul>
 80124c8:	0002      	movs	r2, r0
 80124ca:	000b      	movs	r3, r1
 80124cc:	2000      	movs	r0, #0
 80124ce:	498c      	ldr	r1, [pc, #560]	; (8012700 <__ieee754_log+0x31c>)
 80124d0:	f7f0 f974 	bl	80027bc <__aeabi_dsub>
 80124d4:	0032      	movs	r2, r6
 80124d6:	0004      	movs	r4, r0
 80124d8:	000d      	movs	r5, r1
 80124da:	003b      	movs	r3, r7
 80124dc:	0030      	movs	r0, r6
 80124de:	0039      	movs	r1, r7
 80124e0:	f7ef ff00 	bl	80022e4 <__aeabi_dmul>
 80124e4:	000b      	movs	r3, r1
 80124e6:	0002      	movs	r2, r0
 80124e8:	0029      	movs	r1, r5
 80124ea:	0020      	movs	r0, r4
 80124ec:	f7ef fefa 	bl	80022e4 <__aeabi_dmul>
 80124f0:	9b00      	ldr	r3, [sp, #0]
 80124f2:	9002      	str	r0, [sp, #8]
 80124f4:	9103      	str	r1, [sp, #12]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <__ieee754_log+0x124>
 80124fa:	0002      	movs	r2, r0
 80124fc:	000b      	movs	r3, r1
 80124fe:	0030      	movs	r0, r6
 8012500:	0039      	movs	r1, r7
 8012502:	f7f0 f95b 	bl	80027bc <__aeabi_dsub>
 8012506:	e77e      	b.n	8012406 <__ieee754_log+0x22>
 8012508:	9800      	ldr	r0, [sp, #0]
 801250a:	f7f0 fd3d 	bl	8002f88 <__aeabi_i2d>
 801250e:	4a76      	ldr	r2, [pc, #472]	; (80126e8 <__ieee754_log+0x304>)
 8012510:	4b76      	ldr	r3, [pc, #472]	; (80126ec <__ieee754_log+0x308>)
 8012512:	0004      	movs	r4, r0
 8012514:	000d      	movs	r5, r1
 8012516:	f7ef fee5 	bl	80022e4 <__aeabi_dmul>
 801251a:	4a75      	ldr	r2, [pc, #468]	; (80126f0 <__ieee754_log+0x30c>)
 801251c:	9000      	str	r0, [sp, #0]
 801251e:	9101      	str	r1, [sp, #4]
 8012520:	4b74      	ldr	r3, [pc, #464]	; (80126f4 <__ieee754_log+0x310>)
 8012522:	0020      	movs	r0, r4
 8012524:	0029      	movs	r1, r5
 8012526:	f7ef fedd 	bl	80022e4 <__aeabi_dmul>
 801252a:	0002      	movs	r2, r0
 801252c:	000b      	movs	r3, r1
 801252e:	9802      	ldr	r0, [sp, #8]
 8012530:	9903      	ldr	r1, [sp, #12]
 8012532:	f7f0 f943 	bl	80027bc <__aeabi_dsub>
 8012536:	0032      	movs	r2, r6
 8012538:	003b      	movs	r3, r7
 801253a:	f7f0 f93f 	bl	80027bc <__aeabi_dsub>
 801253e:	0002      	movs	r2, r0
 8012540:	000b      	movs	r3, r1
 8012542:	9800      	ldr	r0, [sp, #0]
 8012544:	9901      	ldr	r1, [sp, #4]
 8012546:	e7dc      	b.n	8012502 <__ieee754_log+0x11e>
 8012548:	2380      	movs	r3, #128	; 0x80
 801254a:	05db      	lsls	r3, r3, #23
 801254c:	f7ee ff5a 	bl	8001404 <__aeabi_dadd>
 8012550:	0002      	movs	r2, r0
 8012552:	000b      	movs	r3, r1
 8012554:	0030      	movs	r0, r6
 8012556:	0039      	movs	r1, r7
 8012558:	f7ef fabe 	bl	8001ad8 <__aeabi_ddiv>
 801255c:	9004      	str	r0, [sp, #16]
 801255e:	9105      	str	r1, [sp, #20]
 8012560:	9800      	ldr	r0, [sp, #0]
 8012562:	f7f0 fd11 	bl	8002f88 <__aeabi_i2d>
 8012566:	9a04      	ldr	r2, [sp, #16]
 8012568:	9b05      	ldr	r3, [sp, #20]
 801256a:	9006      	str	r0, [sp, #24]
 801256c:	9107      	str	r1, [sp, #28]
 801256e:	0010      	movs	r0, r2
 8012570:	0019      	movs	r1, r3
 8012572:	f7ef feb7 	bl	80022e4 <__aeabi_dmul>
 8012576:	4a63      	ldr	r2, [pc, #396]	; (8012704 <__ieee754_log+0x320>)
 8012578:	9b02      	ldr	r3, [sp, #8]
 801257a:	4694      	mov	ip, r2
 801257c:	4463      	add	r3, ip
 801257e:	0002      	movs	r2, r0
 8012580:	930b      	str	r3, [sp, #44]	; 0x2c
 8012582:	000b      	movs	r3, r1
 8012584:	9008      	str	r0, [sp, #32]
 8012586:	9109      	str	r1, [sp, #36]	; 0x24
 8012588:	f7ef feac 	bl	80022e4 <__aeabi_dmul>
 801258c:	0004      	movs	r4, r0
 801258e:	000d      	movs	r5, r1
 8012590:	4a5d      	ldr	r2, [pc, #372]	; (8012708 <__ieee754_log+0x324>)
 8012592:	4b5e      	ldr	r3, [pc, #376]	; (801270c <__ieee754_log+0x328>)
 8012594:	f7ef fea6 	bl	80022e4 <__aeabi_dmul>
 8012598:	4a5d      	ldr	r2, [pc, #372]	; (8012710 <__ieee754_log+0x32c>)
 801259a:	4b5e      	ldr	r3, [pc, #376]	; (8012714 <__ieee754_log+0x330>)
 801259c:	f7ee ff32 	bl	8001404 <__aeabi_dadd>
 80125a0:	0022      	movs	r2, r4
 80125a2:	002b      	movs	r3, r5
 80125a4:	f7ef fe9e 	bl	80022e4 <__aeabi_dmul>
 80125a8:	4a5b      	ldr	r2, [pc, #364]	; (8012718 <__ieee754_log+0x334>)
 80125aa:	4b5c      	ldr	r3, [pc, #368]	; (801271c <__ieee754_log+0x338>)
 80125ac:	f7ee ff2a 	bl	8001404 <__aeabi_dadd>
 80125b0:	0022      	movs	r2, r4
 80125b2:	002b      	movs	r3, r5
 80125b4:	f7ef fe96 	bl	80022e4 <__aeabi_dmul>
 80125b8:	4a59      	ldr	r2, [pc, #356]	; (8012720 <__ieee754_log+0x33c>)
 80125ba:	4b5a      	ldr	r3, [pc, #360]	; (8012724 <__ieee754_log+0x340>)
 80125bc:	f7ee ff22 	bl	8001404 <__aeabi_dadd>
 80125c0:	9a08      	ldr	r2, [sp, #32]
 80125c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125c4:	f7ef fe8e 	bl	80022e4 <__aeabi_dmul>
 80125c8:	4a57      	ldr	r2, [pc, #348]	; (8012728 <__ieee754_log+0x344>)
 80125ca:	9008      	str	r0, [sp, #32]
 80125cc:	9109      	str	r1, [sp, #36]	; 0x24
 80125ce:	4b57      	ldr	r3, [pc, #348]	; (801272c <__ieee754_log+0x348>)
 80125d0:	0020      	movs	r0, r4
 80125d2:	0029      	movs	r1, r5
 80125d4:	f7ef fe86 	bl	80022e4 <__aeabi_dmul>
 80125d8:	4a55      	ldr	r2, [pc, #340]	; (8012730 <__ieee754_log+0x34c>)
 80125da:	4b56      	ldr	r3, [pc, #344]	; (8012734 <__ieee754_log+0x350>)
 80125dc:	f7ee ff12 	bl	8001404 <__aeabi_dadd>
 80125e0:	0022      	movs	r2, r4
 80125e2:	002b      	movs	r3, r5
 80125e4:	f7ef fe7e 	bl	80022e4 <__aeabi_dmul>
 80125e8:	4a53      	ldr	r2, [pc, #332]	; (8012738 <__ieee754_log+0x354>)
 80125ea:	4b54      	ldr	r3, [pc, #336]	; (801273c <__ieee754_log+0x358>)
 80125ec:	f7ee ff0a 	bl	8001404 <__aeabi_dadd>
 80125f0:	0022      	movs	r2, r4
 80125f2:	002b      	movs	r3, r5
 80125f4:	f7ef fe76 	bl	80022e4 <__aeabi_dmul>
 80125f8:	0002      	movs	r2, r0
 80125fa:	000b      	movs	r3, r1
 80125fc:	9808      	ldr	r0, [sp, #32]
 80125fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012600:	f7ee ff00 	bl	8001404 <__aeabi_dadd>
 8012604:	9a02      	ldr	r2, [sp, #8]
 8012606:	4b4e      	ldr	r3, [pc, #312]	; (8012740 <__ieee754_log+0x35c>)
 8012608:	0004      	movs	r4, r0
 801260a:	1a9b      	subs	r3, r3, r2
 801260c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801260e:	000d      	movs	r5, r1
 8012610:	4313      	orrs	r3, r2
 8012612:	2b00      	cmp	r3, #0
 8012614:	dd34      	ble.n	8012680 <__ieee754_log+0x29c>
 8012616:	2200      	movs	r2, #0
 8012618:	4b39      	ldr	r3, [pc, #228]	; (8012700 <__ieee754_log+0x31c>)
 801261a:	0030      	movs	r0, r6
 801261c:	0039      	movs	r1, r7
 801261e:	f7ef fe61 	bl	80022e4 <__aeabi_dmul>
 8012622:	0032      	movs	r2, r6
 8012624:	003b      	movs	r3, r7
 8012626:	f7ef fe5d 	bl	80022e4 <__aeabi_dmul>
 801262a:	0002      	movs	r2, r0
 801262c:	000b      	movs	r3, r1
 801262e:	9002      	str	r0, [sp, #8]
 8012630:	9103      	str	r1, [sp, #12]
 8012632:	0020      	movs	r0, r4
 8012634:	0029      	movs	r1, r5
 8012636:	f7ee fee5 	bl	8001404 <__aeabi_dadd>
 801263a:	9a04      	ldr	r2, [sp, #16]
 801263c:	9b05      	ldr	r3, [sp, #20]
 801263e:	f7ef fe51 	bl	80022e4 <__aeabi_dmul>
 8012642:	9b00      	ldr	r3, [sp, #0]
 8012644:	0004      	movs	r4, r0
 8012646:	000d      	movs	r5, r1
 8012648:	2b00      	cmp	r3, #0
 801264a:	d106      	bne.n	801265a <__ieee754_log+0x276>
 801264c:	0002      	movs	r2, r0
 801264e:	000b      	movs	r3, r1
 8012650:	9802      	ldr	r0, [sp, #8]
 8012652:	9903      	ldr	r1, [sp, #12]
 8012654:	f7f0 f8b2 	bl	80027bc <__aeabi_dsub>
 8012658:	e74f      	b.n	80124fa <__ieee754_log+0x116>
 801265a:	4a23      	ldr	r2, [pc, #140]	; (80126e8 <__ieee754_log+0x304>)
 801265c:	4b23      	ldr	r3, [pc, #140]	; (80126ec <__ieee754_log+0x308>)
 801265e:	9806      	ldr	r0, [sp, #24]
 8012660:	9907      	ldr	r1, [sp, #28]
 8012662:	f7ef fe3f 	bl	80022e4 <__aeabi_dmul>
 8012666:	4a22      	ldr	r2, [pc, #136]	; (80126f0 <__ieee754_log+0x30c>)
 8012668:	9000      	str	r0, [sp, #0]
 801266a:	9101      	str	r1, [sp, #4]
 801266c:	9806      	ldr	r0, [sp, #24]
 801266e:	9907      	ldr	r1, [sp, #28]
 8012670:	4b20      	ldr	r3, [pc, #128]	; (80126f4 <__ieee754_log+0x310>)
 8012672:	f7ef fe37 	bl	80022e4 <__aeabi_dmul>
 8012676:	0022      	movs	r2, r4
 8012678:	002b      	movs	r3, r5
 801267a:	f7ee fec3 	bl	8001404 <__aeabi_dadd>
 801267e:	e754      	b.n	801252a <__ieee754_log+0x146>
 8012680:	0002      	movs	r2, r0
 8012682:	000b      	movs	r3, r1
 8012684:	0030      	movs	r0, r6
 8012686:	0039      	movs	r1, r7
 8012688:	f7f0 f898 	bl	80027bc <__aeabi_dsub>
 801268c:	9a04      	ldr	r2, [sp, #16]
 801268e:	9b05      	ldr	r3, [sp, #20]
 8012690:	f7ef fe28 	bl	80022e4 <__aeabi_dmul>
 8012694:	9b00      	ldr	r3, [sp, #0]
 8012696:	0004      	movs	r4, r0
 8012698:	000d      	movs	r5, r1
 801269a:	2b00      	cmp	r3, #0
 801269c:	d102      	bne.n	80126a4 <__ieee754_log+0x2c0>
 801269e:	0002      	movs	r2, r0
 80126a0:	000b      	movs	r3, r1
 80126a2:	e72c      	b.n	80124fe <__ieee754_log+0x11a>
 80126a4:	4a10      	ldr	r2, [pc, #64]	; (80126e8 <__ieee754_log+0x304>)
 80126a6:	4b11      	ldr	r3, [pc, #68]	; (80126ec <__ieee754_log+0x308>)
 80126a8:	9806      	ldr	r0, [sp, #24]
 80126aa:	9907      	ldr	r1, [sp, #28]
 80126ac:	f7ef fe1a 	bl	80022e4 <__aeabi_dmul>
 80126b0:	4a0f      	ldr	r2, [pc, #60]	; (80126f0 <__ieee754_log+0x30c>)
 80126b2:	9000      	str	r0, [sp, #0]
 80126b4:	9101      	str	r1, [sp, #4]
 80126b6:	9806      	ldr	r0, [sp, #24]
 80126b8:	9907      	ldr	r1, [sp, #28]
 80126ba:	4b0e      	ldr	r3, [pc, #56]	; (80126f4 <__ieee754_log+0x310>)
 80126bc:	f7ef fe12 	bl	80022e4 <__aeabi_dmul>
 80126c0:	0002      	movs	r2, r0
 80126c2:	000b      	movs	r3, r1
 80126c4:	0020      	movs	r0, r4
 80126c6:	0029      	movs	r1, r5
 80126c8:	e733      	b.n	8012532 <__ieee754_log+0x14e>
 80126ca:	2000      	movs	r0, #0
 80126cc:	2100      	movs	r1, #0
 80126ce:	e69a      	b.n	8012406 <__ieee754_log+0x22>
 80126d0:	c3500000 	.word	0xc3500000
 80126d4:	43500000 	.word	0x43500000
 80126d8:	7fefffff 	.word	0x7fefffff
 80126dc:	fffffc01 	.word	0xfffffc01
 80126e0:	00095f64 	.word	0x00095f64
 80126e4:	3ff00000 	.word	0x3ff00000
 80126e8:	fee00000 	.word	0xfee00000
 80126ec:	3fe62e42 	.word	0x3fe62e42
 80126f0:	35793c76 	.word	0x35793c76
 80126f4:	3dea39ef 	.word	0x3dea39ef
 80126f8:	55555555 	.word	0x55555555
 80126fc:	3fd55555 	.word	0x3fd55555
 8012700:	3fe00000 	.word	0x3fe00000
 8012704:	fff9eb86 	.word	0xfff9eb86
 8012708:	df3e5244 	.word	0xdf3e5244
 801270c:	3fc2f112 	.word	0x3fc2f112
 8012710:	96cb03de 	.word	0x96cb03de
 8012714:	3fc74664 	.word	0x3fc74664
 8012718:	94229359 	.word	0x94229359
 801271c:	3fd24924 	.word	0x3fd24924
 8012720:	55555593 	.word	0x55555593
 8012724:	3fe55555 	.word	0x3fe55555
 8012728:	d078c69f 	.word	0xd078c69f
 801272c:	3fc39a09 	.word	0x3fc39a09
 8012730:	1d8e78af 	.word	0x1d8e78af
 8012734:	3fcc71c5 	.word	0x3fcc71c5
 8012738:	9997fa04 	.word	0x9997fa04
 801273c:	3fd99999 	.word	0x3fd99999
 8012740:	0006b851 	.word	0x0006b851

08012744 <__ieee754_rem_pio2>:
 8012744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012746:	004b      	lsls	r3, r1, #1
 8012748:	b091      	sub	sp, #68	; 0x44
 801274a:	085b      	lsrs	r3, r3, #1
 801274c:	9302      	str	r3, [sp, #8]
 801274e:	0017      	movs	r7, r2
 8012750:	4bb6      	ldr	r3, [pc, #728]	; (8012a2c <__ieee754_rem_pio2+0x2e8>)
 8012752:	9a02      	ldr	r2, [sp, #8]
 8012754:	0004      	movs	r4, r0
 8012756:	000d      	movs	r5, r1
 8012758:	9109      	str	r1, [sp, #36]	; 0x24
 801275a:	429a      	cmp	r2, r3
 801275c:	dc09      	bgt.n	8012772 <__ieee754_rem_pio2+0x2e>
 801275e:	0002      	movs	r2, r0
 8012760:	000b      	movs	r3, r1
 8012762:	603a      	str	r2, [r7, #0]
 8012764:	607b      	str	r3, [r7, #4]
 8012766:	2200      	movs	r2, #0
 8012768:	2300      	movs	r3, #0
 801276a:	60ba      	str	r2, [r7, #8]
 801276c:	60fb      	str	r3, [r7, #12]
 801276e:	2600      	movs	r6, #0
 8012770:	e025      	b.n	80127be <__ieee754_rem_pio2+0x7a>
 8012772:	4baf      	ldr	r3, [pc, #700]	; (8012a30 <__ieee754_rem_pio2+0x2ec>)
 8012774:	9a02      	ldr	r2, [sp, #8]
 8012776:	429a      	cmp	r2, r3
 8012778:	dd00      	ble.n	801277c <__ieee754_rem_pio2+0x38>
 801277a:	e06e      	b.n	801285a <__ieee754_rem_pio2+0x116>
 801277c:	4ead      	ldr	r6, [pc, #692]	; (8012a34 <__ieee754_rem_pio2+0x2f0>)
 801277e:	4aae      	ldr	r2, [pc, #696]	; (8012a38 <__ieee754_rem_pio2+0x2f4>)
 8012780:	2d00      	cmp	r5, #0
 8012782:	dd35      	ble.n	80127f0 <__ieee754_rem_pio2+0xac>
 8012784:	0020      	movs	r0, r4
 8012786:	0029      	movs	r1, r5
 8012788:	4baa      	ldr	r3, [pc, #680]	; (8012a34 <__ieee754_rem_pio2+0x2f0>)
 801278a:	f7f0 f817 	bl	80027bc <__aeabi_dsub>
 801278e:	9b02      	ldr	r3, [sp, #8]
 8012790:	0004      	movs	r4, r0
 8012792:	000d      	movs	r5, r1
 8012794:	42b3      	cmp	r3, r6
 8012796:	d015      	beq.n	80127c4 <__ieee754_rem_pio2+0x80>
 8012798:	4aa8      	ldr	r2, [pc, #672]	; (8012a3c <__ieee754_rem_pio2+0x2f8>)
 801279a:	4ba9      	ldr	r3, [pc, #676]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 801279c:	f7f0 f80e 	bl	80027bc <__aeabi_dsub>
 80127a0:	0002      	movs	r2, r0
 80127a2:	000b      	movs	r3, r1
 80127a4:	0020      	movs	r0, r4
 80127a6:	603a      	str	r2, [r7, #0]
 80127a8:	607b      	str	r3, [r7, #4]
 80127aa:	0029      	movs	r1, r5
 80127ac:	f7f0 f806 	bl	80027bc <__aeabi_dsub>
 80127b0:	4aa2      	ldr	r2, [pc, #648]	; (8012a3c <__ieee754_rem_pio2+0x2f8>)
 80127b2:	4ba3      	ldr	r3, [pc, #652]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 80127b4:	f7f0 f802 	bl	80027bc <__aeabi_dsub>
 80127b8:	2601      	movs	r6, #1
 80127ba:	60b8      	str	r0, [r7, #8]
 80127bc:	60f9      	str	r1, [r7, #12]
 80127be:	0030      	movs	r0, r6
 80127c0:	b011      	add	sp, #68	; 0x44
 80127c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127c4:	22d3      	movs	r2, #211	; 0xd3
 80127c6:	4b9e      	ldr	r3, [pc, #632]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 80127c8:	0552      	lsls	r2, r2, #21
 80127ca:	f7ef fff7 	bl	80027bc <__aeabi_dsub>
 80127ce:	4a9d      	ldr	r2, [pc, #628]	; (8012a44 <__ieee754_rem_pio2+0x300>)
 80127d0:	4b9d      	ldr	r3, [pc, #628]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 80127d2:	0004      	movs	r4, r0
 80127d4:	000d      	movs	r5, r1
 80127d6:	f7ef fff1 	bl	80027bc <__aeabi_dsub>
 80127da:	0002      	movs	r2, r0
 80127dc:	000b      	movs	r3, r1
 80127de:	0020      	movs	r0, r4
 80127e0:	603a      	str	r2, [r7, #0]
 80127e2:	607b      	str	r3, [r7, #4]
 80127e4:	0029      	movs	r1, r5
 80127e6:	f7ef ffe9 	bl	80027bc <__aeabi_dsub>
 80127ea:	4a96      	ldr	r2, [pc, #600]	; (8012a44 <__ieee754_rem_pio2+0x300>)
 80127ec:	4b96      	ldr	r3, [pc, #600]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 80127ee:	e7e1      	b.n	80127b4 <__ieee754_rem_pio2+0x70>
 80127f0:	0020      	movs	r0, r4
 80127f2:	0029      	movs	r1, r5
 80127f4:	4b8f      	ldr	r3, [pc, #572]	; (8012a34 <__ieee754_rem_pio2+0x2f0>)
 80127f6:	f7ee fe05 	bl	8001404 <__aeabi_dadd>
 80127fa:	9b02      	ldr	r3, [sp, #8]
 80127fc:	0004      	movs	r4, r0
 80127fe:	000d      	movs	r5, r1
 8012800:	42b3      	cmp	r3, r6
 8012802:	d014      	beq.n	801282e <__ieee754_rem_pio2+0xea>
 8012804:	4a8d      	ldr	r2, [pc, #564]	; (8012a3c <__ieee754_rem_pio2+0x2f8>)
 8012806:	4b8e      	ldr	r3, [pc, #568]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 8012808:	f7ee fdfc 	bl	8001404 <__aeabi_dadd>
 801280c:	0002      	movs	r2, r0
 801280e:	000b      	movs	r3, r1
 8012810:	0020      	movs	r0, r4
 8012812:	603a      	str	r2, [r7, #0]
 8012814:	607b      	str	r3, [r7, #4]
 8012816:	0029      	movs	r1, r5
 8012818:	f7ef ffd0 	bl	80027bc <__aeabi_dsub>
 801281c:	4a87      	ldr	r2, [pc, #540]	; (8012a3c <__ieee754_rem_pio2+0x2f8>)
 801281e:	4b88      	ldr	r3, [pc, #544]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 8012820:	f7ee fdf0 	bl	8001404 <__aeabi_dadd>
 8012824:	2601      	movs	r6, #1
 8012826:	60b8      	str	r0, [r7, #8]
 8012828:	60f9      	str	r1, [r7, #12]
 801282a:	4276      	negs	r6, r6
 801282c:	e7c7      	b.n	80127be <__ieee754_rem_pio2+0x7a>
 801282e:	22d3      	movs	r2, #211	; 0xd3
 8012830:	4b83      	ldr	r3, [pc, #524]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 8012832:	0552      	lsls	r2, r2, #21
 8012834:	f7ee fde6 	bl	8001404 <__aeabi_dadd>
 8012838:	4a82      	ldr	r2, [pc, #520]	; (8012a44 <__ieee754_rem_pio2+0x300>)
 801283a:	4b83      	ldr	r3, [pc, #524]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 801283c:	0004      	movs	r4, r0
 801283e:	000d      	movs	r5, r1
 8012840:	f7ee fde0 	bl	8001404 <__aeabi_dadd>
 8012844:	0002      	movs	r2, r0
 8012846:	000b      	movs	r3, r1
 8012848:	0020      	movs	r0, r4
 801284a:	603a      	str	r2, [r7, #0]
 801284c:	607b      	str	r3, [r7, #4]
 801284e:	0029      	movs	r1, r5
 8012850:	f7ef ffb4 	bl	80027bc <__aeabi_dsub>
 8012854:	4a7b      	ldr	r2, [pc, #492]	; (8012a44 <__ieee754_rem_pio2+0x300>)
 8012856:	4b7c      	ldr	r3, [pc, #496]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 8012858:	e7e2      	b.n	8012820 <__ieee754_rem_pio2+0xdc>
 801285a:	4b7c      	ldr	r3, [pc, #496]	; (8012a4c <__ieee754_rem_pio2+0x308>)
 801285c:	9a02      	ldr	r2, [sp, #8]
 801285e:	429a      	cmp	r2, r3
 8012860:	dd00      	ble.n	8012864 <__ieee754_rem_pio2+0x120>
 8012862:	e0d3      	b.n	8012a0c <__ieee754_rem_pio2+0x2c8>
 8012864:	0020      	movs	r0, r4
 8012866:	0029      	movs	r1, r5
 8012868:	f000 fe3a 	bl	80134e0 <fabs>
 801286c:	4a78      	ldr	r2, [pc, #480]	; (8012a50 <__ieee754_rem_pio2+0x30c>)
 801286e:	4b79      	ldr	r3, [pc, #484]	; (8012a54 <__ieee754_rem_pio2+0x310>)
 8012870:	0004      	movs	r4, r0
 8012872:	000d      	movs	r5, r1
 8012874:	f7ef fd36 	bl	80022e4 <__aeabi_dmul>
 8012878:	2200      	movs	r2, #0
 801287a:	4b77      	ldr	r3, [pc, #476]	; (8012a58 <__ieee754_rem_pio2+0x314>)
 801287c:	f7ee fdc2 	bl	8001404 <__aeabi_dadd>
 8012880:	f7f0 fb4c 	bl	8002f1c <__aeabi_d2iz>
 8012884:	0006      	movs	r6, r0
 8012886:	f7f0 fb7f 	bl	8002f88 <__aeabi_i2d>
 801288a:	4a6b      	ldr	r2, [pc, #428]	; (8012a38 <__ieee754_rem_pio2+0x2f4>)
 801288c:	4b69      	ldr	r3, [pc, #420]	; (8012a34 <__ieee754_rem_pio2+0x2f0>)
 801288e:	9006      	str	r0, [sp, #24]
 8012890:	9107      	str	r1, [sp, #28]
 8012892:	f7ef fd27 	bl	80022e4 <__aeabi_dmul>
 8012896:	0002      	movs	r2, r0
 8012898:	000b      	movs	r3, r1
 801289a:	0020      	movs	r0, r4
 801289c:	0029      	movs	r1, r5
 801289e:	f7ef ff8d 	bl	80027bc <__aeabi_dsub>
 80128a2:	4a66      	ldr	r2, [pc, #408]	; (8012a3c <__ieee754_rem_pio2+0x2f8>)
 80128a4:	9004      	str	r0, [sp, #16]
 80128a6:	9105      	str	r1, [sp, #20]
 80128a8:	9806      	ldr	r0, [sp, #24]
 80128aa:	9907      	ldr	r1, [sp, #28]
 80128ac:	4b64      	ldr	r3, [pc, #400]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 80128ae:	f7ef fd19 	bl	80022e4 <__aeabi_dmul>
 80128b2:	0004      	movs	r4, r0
 80128b4:	000d      	movs	r5, r1
 80128b6:	2e1f      	cmp	r6, #31
 80128b8:	dc0f      	bgt.n	80128da <__ieee754_rem_pio2+0x196>
 80128ba:	4a68      	ldr	r2, [pc, #416]	; (8012a5c <__ieee754_rem_pio2+0x318>)
 80128bc:	1e73      	subs	r3, r6, #1
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	589b      	ldr	r3, [r3, r2]
 80128c2:	9a02      	ldr	r2, [sp, #8]
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d008      	beq.n	80128da <__ieee754_rem_pio2+0x196>
 80128c8:	9804      	ldr	r0, [sp, #16]
 80128ca:	9905      	ldr	r1, [sp, #20]
 80128cc:	0022      	movs	r2, r4
 80128ce:	002b      	movs	r3, r5
 80128d0:	f7ef ff74 	bl	80027bc <__aeabi_dsub>
 80128d4:	6038      	str	r0, [r7, #0]
 80128d6:	6079      	str	r1, [r7, #4]
 80128d8:	e012      	b.n	8012900 <__ieee754_rem_pio2+0x1bc>
 80128da:	0022      	movs	r2, r4
 80128dc:	9804      	ldr	r0, [sp, #16]
 80128de:	9905      	ldr	r1, [sp, #20]
 80128e0:	002b      	movs	r3, r5
 80128e2:	f7ef ff6b 	bl	80027bc <__aeabi_dsub>
 80128e6:	9b02      	ldr	r3, [sp, #8]
 80128e8:	151b      	asrs	r3, r3, #20
 80128ea:	9308      	str	r3, [sp, #32]
 80128ec:	9a08      	ldr	r2, [sp, #32]
 80128ee:	004b      	lsls	r3, r1, #1
 80128f0:	0d5b      	lsrs	r3, r3, #21
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	2b10      	cmp	r3, #16
 80128f6:	dc21      	bgt.n	801293c <__ieee754_rem_pio2+0x1f8>
 80128f8:	0002      	movs	r2, r0
 80128fa:	000b      	movs	r3, r1
 80128fc:	603a      	str	r2, [r7, #0]
 80128fe:	607b      	str	r3, [r7, #4]
 8012900:	9804      	ldr	r0, [sp, #16]
 8012902:	9905      	ldr	r1, [sp, #20]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	9302      	str	r3, [sp, #8]
 801290a:	9b02      	ldr	r3, [sp, #8]
 801290c:	f7ef ff56 	bl	80027bc <__aeabi_dsub>
 8012910:	0022      	movs	r2, r4
 8012912:	002b      	movs	r3, r5
 8012914:	f7ef ff52 	bl	80027bc <__aeabi_dsub>
 8012918:	000b      	movs	r3, r1
 801291a:	0002      	movs	r2, r0
 801291c:	60ba      	str	r2, [r7, #8]
 801291e:	60fb      	str	r3, [r7, #12]
 8012920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012922:	2b00      	cmp	r3, #0
 8012924:	db00      	blt.n	8012928 <__ieee754_rem_pio2+0x1e4>
 8012926:	e74a      	b.n	80127be <__ieee754_rem_pio2+0x7a>
 8012928:	2280      	movs	r2, #128	; 0x80
 801292a:	0612      	lsls	r2, r2, #24
 801292c:	4694      	mov	ip, r2
 801292e:	9b02      	ldr	r3, [sp, #8]
 8012930:	1889      	adds	r1, r1, r2
 8012932:	4463      	add	r3, ip
 8012934:	607b      	str	r3, [r7, #4]
 8012936:	60b8      	str	r0, [r7, #8]
 8012938:	60f9      	str	r1, [r7, #12]
 801293a:	e776      	b.n	801282a <__ieee754_rem_pio2+0xe6>
 801293c:	22d3      	movs	r2, #211	; 0xd3
 801293e:	9806      	ldr	r0, [sp, #24]
 8012940:	9907      	ldr	r1, [sp, #28]
 8012942:	4b3f      	ldr	r3, [pc, #252]	; (8012a40 <__ieee754_rem_pio2+0x2fc>)
 8012944:	0552      	lsls	r2, r2, #21
 8012946:	f7ef fccd 	bl	80022e4 <__aeabi_dmul>
 801294a:	0004      	movs	r4, r0
 801294c:	000d      	movs	r5, r1
 801294e:	0002      	movs	r2, r0
 8012950:	000b      	movs	r3, r1
 8012952:	9804      	ldr	r0, [sp, #16]
 8012954:	9905      	ldr	r1, [sp, #20]
 8012956:	f7ef ff31 	bl	80027bc <__aeabi_dsub>
 801295a:	0002      	movs	r2, r0
 801295c:	000b      	movs	r3, r1
 801295e:	9002      	str	r0, [sp, #8]
 8012960:	9103      	str	r1, [sp, #12]
 8012962:	9804      	ldr	r0, [sp, #16]
 8012964:	9905      	ldr	r1, [sp, #20]
 8012966:	f7ef ff29 	bl	80027bc <__aeabi_dsub>
 801296a:	0022      	movs	r2, r4
 801296c:	002b      	movs	r3, r5
 801296e:	f7ef ff25 	bl	80027bc <__aeabi_dsub>
 8012972:	0004      	movs	r4, r0
 8012974:	000d      	movs	r5, r1
 8012976:	9806      	ldr	r0, [sp, #24]
 8012978:	9907      	ldr	r1, [sp, #28]
 801297a:	4a32      	ldr	r2, [pc, #200]	; (8012a44 <__ieee754_rem_pio2+0x300>)
 801297c:	4b32      	ldr	r3, [pc, #200]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 801297e:	f7ef fcb1 	bl	80022e4 <__aeabi_dmul>
 8012982:	0022      	movs	r2, r4
 8012984:	002b      	movs	r3, r5
 8012986:	f7ef ff19 	bl	80027bc <__aeabi_dsub>
 801298a:	0002      	movs	r2, r0
 801298c:	000b      	movs	r3, r1
 801298e:	0004      	movs	r4, r0
 8012990:	000d      	movs	r5, r1
 8012992:	9802      	ldr	r0, [sp, #8]
 8012994:	9903      	ldr	r1, [sp, #12]
 8012996:	f7ef ff11 	bl	80027bc <__aeabi_dsub>
 801299a:	9a08      	ldr	r2, [sp, #32]
 801299c:	004b      	lsls	r3, r1, #1
 801299e:	0d5b      	lsrs	r3, r3, #21
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	2b31      	cmp	r3, #49	; 0x31
 80129a4:	dc08      	bgt.n	80129b8 <__ieee754_rem_pio2+0x274>
 80129a6:	0002      	movs	r2, r0
 80129a8:	000b      	movs	r3, r1
 80129aa:	603a      	str	r2, [r7, #0]
 80129ac:	607b      	str	r3, [r7, #4]
 80129ae:	9a02      	ldr	r2, [sp, #8]
 80129b0:	9b03      	ldr	r3, [sp, #12]
 80129b2:	9204      	str	r2, [sp, #16]
 80129b4:	9305      	str	r3, [sp, #20]
 80129b6:	e7a3      	b.n	8012900 <__ieee754_rem_pio2+0x1bc>
 80129b8:	22b8      	movs	r2, #184	; 0xb8
 80129ba:	9806      	ldr	r0, [sp, #24]
 80129bc:	9907      	ldr	r1, [sp, #28]
 80129be:	4b22      	ldr	r3, [pc, #136]	; (8012a48 <__ieee754_rem_pio2+0x304>)
 80129c0:	0592      	lsls	r2, r2, #22
 80129c2:	f7ef fc8f 	bl	80022e4 <__aeabi_dmul>
 80129c6:	0004      	movs	r4, r0
 80129c8:	000d      	movs	r5, r1
 80129ca:	0002      	movs	r2, r0
 80129cc:	000b      	movs	r3, r1
 80129ce:	9802      	ldr	r0, [sp, #8]
 80129d0:	9903      	ldr	r1, [sp, #12]
 80129d2:	f7ef fef3 	bl	80027bc <__aeabi_dsub>
 80129d6:	0002      	movs	r2, r0
 80129d8:	000b      	movs	r3, r1
 80129da:	9004      	str	r0, [sp, #16]
 80129dc:	9105      	str	r1, [sp, #20]
 80129de:	9802      	ldr	r0, [sp, #8]
 80129e0:	9903      	ldr	r1, [sp, #12]
 80129e2:	f7ef feeb 	bl	80027bc <__aeabi_dsub>
 80129e6:	0022      	movs	r2, r4
 80129e8:	002b      	movs	r3, r5
 80129ea:	f7ef fee7 	bl	80027bc <__aeabi_dsub>
 80129ee:	0004      	movs	r4, r0
 80129f0:	000d      	movs	r5, r1
 80129f2:	9806      	ldr	r0, [sp, #24]
 80129f4:	9907      	ldr	r1, [sp, #28]
 80129f6:	4a1a      	ldr	r2, [pc, #104]	; (8012a60 <__ieee754_rem_pio2+0x31c>)
 80129f8:	4b1a      	ldr	r3, [pc, #104]	; (8012a64 <__ieee754_rem_pio2+0x320>)
 80129fa:	f7ef fc73 	bl	80022e4 <__aeabi_dmul>
 80129fe:	0022      	movs	r2, r4
 8012a00:	002b      	movs	r3, r5
 8012a02:	f7ef fedb 	bl	80027bc <__aeabi_dsub>
 8012a06:	0004      	movs	r4, r0
 8012a08:	000d      	movs	r5, r1
 8012a0a:	e75d      	b.n	80128c8 <__ieee754_rem_pio2+0x184>
 8012a0c:	4b16      	ldr	r3, [pc, #88]	; (8012a68 <__ieee754_rem_pio2+0x324>)
 8012a0e:	9a02      	ldr	r2, [sp, #8]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	dd2b      	ble.n	8012a6c <__ieee754_rem_pio2+0x328>
 8012a14:	0022      	movs	r2, r4
 8012a16:	002b      	movs	r3, r5
 8012a18:	0020      	movs	r0, r4
 8012a1a:	0029      	movs	r1, r5
 8012a1c:	f7ef fece 	bl	80027bc <__aeabi_dsub>
 8012a20:	60b8      	str	r0, [r7, #8]
 8012a22:	60f9      	str	r1, [r7, #12]
 8012a24:	6038      	str	r0, [r7, #0]
 8012a26:	6079      	str	r1, [r7, #4]
 8012a28:	e6a1      	b.n	801276e <__ieee754_rem_pio2+0x2a>
 8012a2a:	46c0      	nop			; (mov r8, r8)
 8012a2c:	3fe921fb 	.word	0x3fe921fb
 8012a30:	4002d97b 	.word	0x4002d97b
 8012a34:	3ff921fb 	.word	0x3ff921fb
 8012a38:	54400000 	.word	0x54400000
 8012a3c:	1a626331 	.word	0x1a626331
 8012a40:	3dd0b461 	.word	0x3dd0b461
 8012a44:	2e037073 	.word	0x2e037073
 8012a48:	3ba3198a 	.word	0x3ba3198a
 8012a4c:	413921fb 	.word	0x413921fb
 8012a50:	6dc9c883 	.word	0x6dc9c883
 8012a54:	3fe45f30 	.word	0x3fe45f30
 8012a58:	3fe00000 	.word	0x3fe00000
 8012a5c:	08016048 	.word	0x08016048
 8012a60:	252049c1 	.word	0x252049c1
 8012a64:	397b839a 	.word	0x397b839a
 8012a68:	7fefffff 	.word	0x7fefffff
 8012a6c:	9a02      	ldr	r2, [sp, #8]
 8012a6e:	0020      	movs	r0, r4
 8012a70:	1516      	asrs	r6, r2, #20
 8012a72:	4a27      	ldr	r2, [pc, #156]	; (8012b10 <__ieee754_rem_pio2+0x3cc>)
 8012a74:	18b6      	adds	r6, r6, r2
 8012a76:	9a02      	ldr	r2, [sp, #8]
 8012a78:	0533      	lsls	r3, r6, #20
 8012a7a:	1ad5      	subs	r5, r2, r3
 8012a7c:	0029      	movs	r1, r5
 8012a7e:	f7f0 fa4d 	bl	8002f1c <__aeabi_d2iz>
 8012a82:	f7f0 fa81 	bl	8002f88 <__aeabi_i2d>
 8012a86:	0002      	movs	r2, r0
 8012a88:	000b      	movs	r3, r1
 8012a8a:	0020      	movs	r0, r4
 8012a8c:	0029      	movs	r1, r5
 8012a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8012a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a92:	f7ef fe93 	bl	80027bc <__aeabi_dsub>
 8012a96:	2200      	movs	r2, #0
 8012a98:	4b1e      	ldr	r3, [pc, #120]	; (8012b14 <__ieee754_rem_pio2+0x3d0>)
 8012a9a:	f7ef fc23 	bl	80022e4 <__aeabi_dmul>
 8012a9e:	000d      	movs	r5, r1
 8012aa0:	0004      	movs	r4, r0
 8012aa2:	f7f0 fa3b 	bl	8002f1c <__aeabi_d2iz>
 8012aa6:	f7f0 fa6f 	bl	8002f88 <__aeabi_i2d>
 8012aaa:	0002      	movs	r2, r0
 8012aac:	000b      	movs	r3, r1
 8012aae:	0020      	movs	r0, r4
 8012ab0:	0029      	movs	r1, r5
 8012ab2:	920c      	str	r2, [sp, #48]	; 0x30
 8012ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8012ab6:	f7ef fe81 	bl	80027bc <__aeabi_dsub>
 8012aba:	2200      	movs	r2, #0
 8012abc:	4b15      	ldr	r3, [pc, #84]	; (8012b14 <__ieee754_rem_pio2+0x3d0>)
 8012abe:	f7ef fc11 	bl	80022e4 <__aeabi_dmul>
 8012ac2:	2503      	movs	r5, #3
 8012ac4:	900e      	str	r0, [sp, #56]	; 0x38
 8012ac6:	910f      	str	r1, [sp, #60]	; 0x3c
 8012ac8:	ac0a      	add	r4, sp, #40	; 0x28
 8012aca:	2200      	movs	r2, #0
 8012acc:	6920      	ldr	r0, [r4, #16]
 8012ace:	6961      	ldr	r1, [r4, #20]
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	9502      	str	r5, [sp, #8]
 8012ad4:	3c08      	subs	r4, #8
 8012ad6:	3d01      	subs	r5, #1
 8012ad8:	f7ed fca2 	bl	8000420 <__aeabi_dcmpeq>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d1f4      	bne.n	8012aca <__ieee754_rem_pio2+0x386>
 8012ae0:	4b0d      	ldr	r3, [pc, #52]	; (8012b18 <__ieee754_rem_pio2+0x3d4>)
 8012ae2:	0032      	movs	r2, r6
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	2302      	movs	r3, #2
 8012ae8:	0039      	movs	r1, r7
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	a80a      	add	r0, sp, #40	; 0x28
 8012aee:	9b02      	ldr	r3, [sp, #8]
 8012af0:	f000 f8d4 	bl	8012c9c <__kernel_rem_pio2>
 8012af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af6:	0006      	movs	r6, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	db00      	blt.n	8012afe <__ieee754_rem_pio2+0x3ba>
 8012afc:	e65f      	b.n	80127be <__ieee754_rem_pio2+0x7a>
 8012afe:	2280      	movs	r2, #128	; 0x80
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	0612      	lsls	r2, r2, #24
 8012b04:	189b      	adds	r3, r3, r2
 8012b06:	607b      	str	r3, [r7, #4]
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	189b      	adds	r3, r3, r2
 8012b0c:	60fb      	str	r3, [r7, #12]
 8012b0e:	e68c      	b.n	801282a <__ieee754_rem_pio2+0xe6>
 8012b10:	fffffbea 	.word	0xfffffbea
 8012b14:	41700000 	.word	0x41700000
 8012b18:	080160c8 	.word	0x080160c8

08012b1c <__kernel_cos>:
 8012b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b1e:	b087      	sub	sp, #28
 8012b20:	9204      	str	r2, [sp, #16]
 8012b22:	9305      	str	r3, [sp, #20]
 8012b24:	004b      	lsls	r3, r1, #1
 8012b26:	085b      	lsrs	r3, r3, #1
 8012b28:	9300      	str	r3, [sp, #0]
 8012b2a:	23f9      	movs	r3, #249	; 0xf9
 8012b2c:	9a00      	ldr	r2, [sp, #0]
 8012b2e:	0007      	movs	r7, r0
 8012b30:	000e      	movs	r6, r1
 8012b32:	059b      	lsls	r3, r3, #22
 8012b34:	429a      	cmp	r2, r3
 8012b36:	da04      	bge.n	8012b42 <__kernel_cos+0x26>
 8012b38:	f7f0 f9f0 	bl	8002f1c <__aeabi_d2iz>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d100      	bne.n	8012b42 <__kernel_cos+0x26>
 8012b40:	e084      	b.n	8012c4c <__kernel_cos+0x130>
 8012b42:	003a      	movs	r2, r7
 8012b44:	0033      	movs	r3, r6
 8012b46:	0038      	movs	r0, r7
 8012b48:	0031      	movs	r1, r6
 8012b4a:	f7ef fbcb 	bl	80022e4 <__aeabi_dmul>
 8012b4e:	2200      	movs	r2, #0
 8012b50:	4b40      	ldr	r3, [pc, #256]	; (8012c54 <__kernel_cos+0x138>)
 8012b52:	0004      	movs	r4, r0
 8012b54:	000d      	movs	r5, r1
 8012b56:	f7ef fbc5 	bl	80022e4 <__aeabi_dmul>
 8012b5a:	4a3f      	ldr	r2, [pc, #252]	; (8012c58 <__kernel_cos+0x13c>)
 8012b5c:	9002      	str	r0, [sp, #8]
 8012b5e:	9103      	str	r1, [sp, #12]
 8012b60:	4b3e      	ldr	r3, [pc, #248]	; (8012c5c <__kernel_cos+0x140>)
 8012b62:	0020      	movs	r0, r4
 8012b64:	0029      	movs	r1, r5
 8012b66:	f7ef fbbd 	bl	80022e4 <__aeabi_dmul>
 8012b6a:	4a3d      	ldr	r2, [pc, #244]	; (8012c60 <__kernel_cos+0x144>)
 8012b6c:	4b3d      	ldr	r3, [pc, #244]	; (8012c64 <__kernel_cos+0x148>)
 8012b6e:	f7ee fc49 	bl	8001404 <__aeabi_dadd>
 8012b72:	0022      	movs	r2, r4
 8012b74:	002b      	movs	r3, r5
 8012b76:	f7ef fbb5 	bl	80022e4 <__aeabi_dmul>
 8012b7a:	4a3b      	ldr	r2, [pc, #236]	; (8012c68 <__kernel_cos+0x14c>)
 8012b7c:	4b3b      	ldr	r3, [pc, #236]	; (8012c6c <__kernel_cos+0x150>)
 8012b7e:	f7ef fe1d 	bl	80027bc <__aeabi_dsub>
 8012b82:	0022      	movs	r2, r4
 8012b84:	002b      	movs	r3, r5
 8012b86:	f7ef fbad 	bl	80022e4 <__aeabi_dmul>
 8012b8a:	4a39      	ldr	r2, [pc, #228]	; (8012c70 <__kernel_cos+0x154>)
 8012b8c:	4b39      	ldr	r3, [pc, #228]	; (8012c74 <__kernel_cos+0x158>)
 8012b8e:	f7ee fc39 	bl	8001404 <__aeabi_dadd>
 8012b92:	0022      	movs	r2, r4
 8012b94:	002b      	movs	r3, r5
 8012b96:	f7ef fba5 	bl	80022e4 <__aeabi_dmul>
 8012b9a:	4a37      	ldr	r2, [pc, #220]	; (8012c78 <__kernel_cos+0x15c>)
 8012b9c:	4b37      	ldr	r3, [pc, #220]	; (8012c7c <__kernel_cos+0x160>)
 8012b9e:	f7ef fe0d 	bl	80027bc <__aeabi_dsub>
 8012ba2:	0022      	movs	r2, r4
 8012ba4:	002b      	movs	r3, r5
 8012ba6:	f7ef fb9d 	bl	80022e4 <__aeabi_dmul>
 8012baa:	4a35      	ldr	r2, [pc, #212]	; (8012c80 <__kernel_cos+0x164>)
 8012bac:	4b35      	ldr	r3, [pc, #212]	; (8012c84 <__kernel_cos+0x168>)
 8012bae:	f7ee fc29 	bl	8001404 <__aeabi_dadd>
 8012bb2:	0022      	movs	r2, r4
 8012bb4:	002b      	movs	r3, r5
 8012bb6:	f7ef fb95 	bl	80022e4 <__aeabi_dmul>
 8012bba:	0022      	movs	r2, r4
 8012bbc:	002b      	movs	r3, r5
 8012bbe:	f7ef fb91 	bl	80022e4 <__aeabi_dmul>
 8012bc2:	9a04      	ldr	r2, [sp, #16]
 8012bc4:	9b05      	ldr	r3, [sp, #20]
 8012bc6:	0004      	movs	r4, r0
 8012bc8:	000d      	movs	r5, r1
 8012bca:	0038      	movs	r0, r7
 8012bcc:	0031      	movs	r1, r6
 8012bce:	f7ef fb89 	bl	80022e4 <__aeabi_dmul>
 8012bd2:	0002      	movs	r2, r0
 8012bd4:	000b      	movs	r3, r1
 8012bd6:	0020      	movs	r0, r4
 8012bd8:	0029      	movs	r1, r5
 8012bda:	f7ef fdef 	bl	80027bc <__aeabi_dsub>
 8012bde:	4b2a      	ldr	r3, [pc, #168]	; (8012c88 <__kernel_cos+0x16c>)
 8012be0:	9a00      	ldr	r2, [sp, #0]
 8012be2:	0004      	movs	r4, r0
 8012be4:	000d      	movs	r5, r1
 8012be6:	429a      	cmp	r2, r3
 8012be8:	dc0d      	bgt.n	8012c06 <__kernel_cos+0xea>
 8012bea:	0002      	movs	r2, r0
 8012bec:	000b      	movs	r3, r1
 8012bee:	9802      	ldr	r0, [sp, #8]
 8012bf0:	9903      	ldr	r1, [sp, #12]
 8012bf2:	f7ef fde3 	bl	80027bc <__aeabi_dsub>
 8012bf6:	0002      	movs	r2, r0
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	000b      	movs	r3, r1
 8012bfc:	4923      	ldr	r1, [pc, #140]	; (8012c8c <__kernel_cos+0x170>)
 8012bfe:	f7ef fddd 	bl	80027bc <__aeabi_dsub>
 8012c02:	b007      	add	sp, #28
 8012c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c06:	4b22      	ldr	r3, [pc, #136]	; (8012c90 <__kernel_cos+0x174>)
 8012c08:	9a00      	ldr	r2, [sp, #0]
 8012c0a:	2600      	movs	r6, #0
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	dc1b      	bgt.n	8012c48 <__kernel_cos+0x12c>
 8012c10:	0013      	movs	r3, r2
 8012c12:	4a20      	ldr	r2, [pc, #128]	; (8012c94 <__kernel_cos+0x178>)
 8012c14:	4694      	mov	ip, r2
 8012c16:	4463      	add	r3, ip
 8012c18:	001f      	movs	r7, r3
 8012c1a:	0032      	movs	r2, r6
 8012c1c:	003b      	movs	r3, r7
 8012c1e:	2000      	movs	r0, #0
 8012c20:	491a      	ldr	r1, [pc, #104]	; (8012c8c <__kernel_cos+0x170>)
 8012c22:	f7ef fdcb 	bl	80027bc <__aeabi_dsub>
 8012c26:	0032      	movs	r2, r6
 8012c28:	003b      	movs	r3, r7
 8012c2a:	9000      	str	r0, [sp, #0]
 8012c2c:	9101      	str	r1, [sp, #4]
 8012c2e:	9802      	ldr	r0, [sp, #8]
 8012c30:	9903      	ldr	r1, [sp, #12]
 8012c32:	f7ef fdc3 	bl	80027bc <__aeabi_dsub>
 8012c36:	0022      	movs	r2, r4
 8012c38:	002b      	movs	r3, r5
 8012c3a:	f7ef fdbf 	bl	80027bc <__aeabi_dsub>
 8012c3e:	0002      	movs	r2, r0
 8012c40:	000b      	movs	r3, r1
 8012c42:	9800      	ldr	r0, [sp, #0]
 8012c44:	9901      	ldr	r1, [sp, #4]
 8012c46:	e7da      	b.n	8012bfe <__kernel_cos+0xe2>
 8012c48:	4f13      	ldr	r7, [pc, #76]	; (8012c98 <__kernel_cos+0x17c>)
 8012c4a:	e7e6      	b.n	8012c1a <__kernel_cos+0xfe>
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	490f      	ldr	r1, [pc, #60]	; (8012c8c <__kernel_cos+0x170>)
 8012c50:	e7d7      	b.n	8012c02 <__kernel_cos+0xe6>
 8012c52:	46c0      	nop			; (mov r8, r8)
 8012c54:	3fe00000 	.word	0x3fe00000
 8012c58:	be8838d4 	.word	0xbe8838d4
 8012c5c:	bda8fae9 	.word	0xbda8fae9
 8012c60:	bdb4b1c4 	.word	0xbdb4b1c4
 8012c64:	3e21ee9e 	.word	0x3e21ee9e
 8012c68:	809c52ad 	.word	0x809c52ad
 8012c6c:	3e927e4f 	.word	0x3e927e4f
 8012c70:	19cb1590 	.word	0x19cb1590
 8012c74:	3efa01a0 	.word	0x3efa01a0
 8012c78:	16c15177 	.word	0x16c15177
 8012c7c:	3f56c16c 	.word	0x3f56c16c
 8012c80:	5555554c 	.word	0x5555554c
 8012c84:	3fa55555 	.word	0x3fa55555
 8012c88:	3fd33332 	.word	0x3fd33332
 8012c8c:	3ff00000 	.word	0x3ff00000
 8012c90:	3fe90000 	.word	0x3fe90000
 8012c94:	ffe00000 	.word	0xffe00000
 8012c98:	3fd20000 	.word	0x3fd20000

08012c9c <__kernel_rem_pio2>:
 8012c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c9e:	4cd0      	ldr	r4, [pc, #832]	; (8012fe0 <__kernel_rem_pio2+0x344>)
 8012ca0:	44a5      	add	sp, r4
 8012ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8012ca4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012ca6:	0014      	movs	r4, r2
 8012ca8:	009a      	lsls	r2, r3, #2
 8012caa:	4bce      	ldr	r3, [pc, #824]	; (8012fe4 <__kernel_rem_pio2+0x348>)
 8012cac:	900e      	str	r0, [sp, #56]	; 0x38
 8012cae:	58d3      	ldr	r3, [r2, r3]
 8012cb0:	9107      	str	r1, [sp, #28]
 8012cb2:	9308      	str	r3, [sp, #32]
 8012cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8012cba:	2300      	movs	r3, #0
 8012cbc:	9300      	str	r3, [sp, #0]
 8012cbe:	0023      	movs	r3, r4
 8012cc0:	3314      	adds	r3, #20
 8012cc2:	db04      	blt.n	8012cce <__kernel_rem_pio2+0x32>
 8012cc4:	2118      	movs	r1, #24
 8012cc6:	1ee0      	subs	r0, r4, #3
 8012cc8:	f7ed faae 	bl	8000228 <__divsi3>
 8012ccc:	9000      	str	r0, [sp, #0]
 8012cce:	2218      	movs	r2, #24
 8012cd0:	9b00      	ldr	r3, [sp, #0]
 8012cd2:	4252      	negs	r2, r2
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	435a      	muls	r2, r3
 8012cd8:	1913      	adds	r3, r2, r4
 8012cda:	9302      	str	r3, [sp, #8]
 8012cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cde:	9b00      	ldr	r3, [sp, #0]
 8012ce0:	ae26      	add	r6, sp, #152	; 0x98
 8012ce2:	1a9d      	subs	r5, r3, r2
 8012ce4:	002c      	movs	r4, r5
 8012ce6:	9b08      	ldr	r3, [sp, #32]
 8012ce8:	189f      	adds	r7, r3, r2
 8012cea:	1b63      	subs	r3, r4, r5
 8012cec:	429f      	cmp	r7, r3
 8012cee:	da17      	bge.n	8012d20 <__kernel_rem_pio2+0x84>
 8012cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cf4:	9304      	str	r3, [sp, #16]
 8012cf6:	ab76      	add	r3, sp, #472	; 0x1d8
 8012cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	1a9b      	subs	r3, r3, r2
 8012cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d00:	ab28      	add	r3, sp, #160	; 0xa0
 8012d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d04:	9a04      	ldr	r2, [sp, #16]
 8012d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d08:	189b      	adds	r3, r3, r2
 8012d0a:	9a08      	ldr	r2, [sp, #32]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	db31      	blt.n	8012d74 <__kernel_rem_pio2+0xd8>
 8012d10:	9b04      	ldr	r3, [sp, #16]
 8012d12:	2400      	movs	r4, #0
 8012d14:	00de      	lsls	r6, r3, #3
 8012d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d18:	2500      	movs	r5, #0
 8012d1a:	2700      	movs	r7, #0
 8012d1c:	199e      	adds	r6, r3, r6
 8012d1e:	e01e      	b.n	8012d5e <__kernel_rem_pio2+0xc2>
 8012d20:	2c00      	cmp	r4, #0
 8012d22:	db07      	blt.n	8012d34 <__kernel_rem_pio2+0x98>
 8012d24:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8012d26:	00a3      	lsls	r3, r4, #2
 8012d28:	58d0      	ldr	r0, [r2, r3]
 8012d2a:	f7f0 f92d 	bl	8002f88 <__aeabi_i2d>
 8012d2e:	c603      	stmia	r6!, {r0, r1}
 8012d30:	3401      	adds	r4, #1
 8012d32:	e7da      	b.n	8012cea <__kernel_rem_pio2+0x4e>
 8012d34:	2000      	movs	r0, #0
 8012d36:	2100      	movs	r1, #0
 8012d38:	e7f9      	b.n	8012d2e <__kernel_rem_pio2+0x92>
 8012d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d3c:	00f9      	lsls	r1, r7, #3
 8012d3e:	1859      	adds	r1, r3, r1
 8012d40:	6808      	ldr	r0, [r1, #0]
 8012d42:	6849      	ldr	r1, [r1, #4]
 8012d44:	6832      	ldr	r2, [r6, #0]
 8012d46:	6873      	ldr	r3, [r6, #4]
 8012d48:	f7ef facc 	bl	80022e4 <__aeabi_dmul>
 8012d4c:	0002      	movs	r2, r0
 8012d4e:	000b      	movs	r3, r1
 8012d50:	0020      	movs	r0, r4
 8012d52:	0029      	movs	r1, r5
 8012d54:	f7ee fb56 	bl	8001404 <__aeabi_dadd>
 8012d58:	0004      	movs	r4, r0
 8012d5a:	000d      	movs	r5, r1
 8012d5c:	3701      	adds	r7, #1
 8012d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d60:	3e08      	subs	r6, #8
 8012d62:	429f      	cmp	r7, r3
 8012d64:	dde9      	ble.n	8012d3a <__kernel_rem_pio2+0x9e>
 8012d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d68:	c330      	stmia	r3!, {r4, r5}
 8012d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d6c:	9b04      	ldr	r3, [sp, #16]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	9304      	str	r3, [sp, #16]
 8012d72:	e7c7      	b.n	8012d04 <__kernel_rem_pio2+0x68>
 8012d74:	9b08      	ldr	r3, [sp, #32]
 8012d76:	aa12      	add	r2, sp, #72	; 0x48
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	189b      	adds	r3, r3, r2
 8012d7c:	9310      	str	r3, [sp, #64]	; 0x40
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	0098      	lsls	r0, r3, #2
 8012d82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012d84:	181b      	adds	r3, r3, r0
 8012d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d88:	9b08      	ldr	r3, [sp, #32]
 8012d8a:	9304      	str	r3, [sp, #16]
 8012d8c:	9b04      	ldr	r3, [sp, #16]
 8012d8e:	aa76      	add	r2, sp, #472	; 0x1d8
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	18d3      	adds	r3, r2, r3
 8012d94:	681c      	ldr	r4, [r3, #0]
 8012d96:	685d      	ldr	r5, [r3, #4]
 8012d98:	ab12      	add	r3, sp, #72	; 0x48
 8012d9a:	9300      	str	r3, [sp, #0]
 8012d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d9e:	9b04      	ldr	r3, [sp, #16]
 8012da0:	9211      	str	r2, [sp, #68]	; 0x44
 8012da2:	930a      	str	r3, [sp, #40]	; 0x28
 8012da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	dc74      	bgt.n	8012e94 <__kernel_rem_pio2+0x1f8>
 8012daa:	0020      	movs	r0, r4
 8012dac:	0029      	movs	r1, r5
 8012dae:	9a02      	ldr	r2, [sp, #8]
 8012db0:	f000 fc2a 	bl	8013608 <scalbn>
 8012db4:	23ff      	movs	r3, #255	; 0xff
 8012db6:	2200      	movs	r2, #0
 8012db8:	059b      	lsls	r3, r3, #22
 8012dba:	0004      	movs	r4, r0
 8012dbc:	000d      	movs	r5, r1
 8012dbe:	f7ef fa91 	bl	80022e4 <__aeabi_dmul>
 8012dc2:	f000 fb91 	bl	80134e8 <floor>
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	4b87      	ldr	r3, [pc, #540]	; (8012fe8 <__kernel_rem_pio2+0x34c>)
 8012dca:	f7ef fa8b 	bl	80022e4 <__aeabi_dmul>
 8012dce:	0002      	movs	r2, r0
 8012dd0:	000b      	movs	r3, r1
 8012dd2:	0020      	movs	r0, r4
 8012dd4:	0029      	movs	r1, r5
 8012dd6:	f7ef fcf1 	bl	80027bc <__aeabi_dsub>
 8012dda:	000d      	movs	r5, r1
 8012ddc:	0004      	movs	r4, r0
 8012dde:	f7f0 f89d 	bl	8002f1c <__aeabi_d2iz>
 8012de2:	900b      	str	r0, [sp, #44]	; 0x2c
 8012de4:	f7f0 f8d0 	bl	8002f88 <__aeabi_i2d>
 8012de8:	000b      	movs	r3, r1
 8012dea:	0002      	movs	r2, r0
 8012dec:	0029      	movs	r1, r5
 8012dee:	0020      	movs	r0, r4
 8012df0:	f7ef fce4 	bl	80027bc <__aeabi_dsub>
 8012df4:	9b02      	ldr	r3, [sp, #8]
 8012df6:	0006      	movs	r6, r0
 8012df8:	000f      	movs	r7, r1
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	dd74      	ble.n	8012ee8 <__kernel_rem_pio2+0x24c>
 8012dfe:	2118      	movs	r1, #24
 8012e00:	9b04      	ldr	r3, [sp, #16]
 8012e02:	aa12      	add	r2, sp, #72	; 0x48
 8012e04:	3b01      	subs	r3, #1
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	589a      	ldr	r2, [r3, r2]
 8012e0a:	9802      	ldr	r0, [sp, #8]
 8012e0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012e0e:	1a09      	subs	r1, r1, r0
 8012e10:	0010      	movs	r0, r2
 8012e12:	4108      	asrs	r0, r1
 8012e14:	1824      	adds	r4, r4, r0
 8012e16:	4088      	lsls	r0, r1
 8012e18:	a912      	add	r1, sp, #72	; 0x48
 8012e1a:	1a12      	subs	r2, r2, r0
 8012e1c:	505a      	str	r2, [r3, r1]
 8012e1e:	2317      	movs	r3, #23
 8012e20:	9902      	ldr	r1, [sp, #8]
 8012e22:	940b      	str	r4, [sp, #44]	; 0x2c
 8012e24:	1a5b      	subs	r3, r3, r1
 8012e26:	411a      	asrs	r2, r3
 8012e28:	920a      	str	r2, [sp, #40]	; 0x28
 8012e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	dd6d      	ble.n	8012f0c <__kernel_rem_pio2+0x270>
 8012e30:	2200      	movs	r2, #0
 8012e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e34:	2080      	movs	r0, #128	; 0x80
 8012e36:	3301      	adds	r3, #1
 8012e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e3a:	4b6c      	ldr	r3, [pc, #432]	; (8012fec <__kernel_rem_pio2+0x350>)
 8012e3c:	0014      	movs	r4, r2
 8012e3e:	469c      	mov	ip, r3
 8012e40:	2501      	movs	r5, #1
 8012e42:	0440      	lsls	r0, r0, #17
 8012e44:	9b04      	ldr	r3, [sp, #16]
 8012e46:	4293      	cmp	r3, r2
 8012e48:	dd00      	ble.n	8012e4c <__kernel_rem_pio2+0x1b0>
 8012e4a:	e098      	b.n	8012f7e <__kernel_rem_pio2+0x2e2>
 8012e4c:	9b02      	ldr	r3, [sp, #8]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	dd05      	ble.n	8012e5e <__kernel_rem_pio2+0x1c2>
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d100      	bne.n	8012e58 <__kernel_rem_pio2+0x1bc>
 8012e56:	e0a8      	b.n	8012faa <__kernel_rem_pio2+0x30e>
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	d100      	bne.n	8012e5e <__kernel_rem_pio2+0x1c2>
 8012e5c:	e0b0      	b.n	8012fc0 <__kernel_rem_pio2+0x324>
 8012e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d153      	bne.n	8012f0c <__kernel_rem_pio2+0x270>
 8012e64:	0032      	movs	r2, r6
 8012e66:	003b      	movs	r3, r7
 8012e68:	2000      	movs	r0, #0
 8012e6a:	4961      	ldr	r1, [pc, #388]	; (8012ff0 <__kernel_rem_pio2+0x354>)
 8012e6c:	f7ef fca6 	bl	80027bc <__aeabi_dsub>
 8012e70:	0006      	movs	r6, r0
 8012e72:	000f      	movs	r7, r1
 8012e74:	2c00      	cmp	r4, #0
 8012e76:	d049      	beq.n	8012f0c <__kernel_rem_pio2+0x270>
 8012e78:	9a02      	ldr	r2, [sp, #8]
 8012e7a:	2000      	movs	r0, #0
 8012e7c:	495c      	ldr	r1, [pc, #368]	; (8012ff0 <__kernel_rem_pio2+0x354>)
 8012e7e:	f000 fbc3 	bl	8013608 <scalbn>
 8012e82:	0002      	movs	r2, r0
 8012e84:	000b      	movs	r3, r1
 8012e86:	0030      	movs	r0, r6
 8012e88:	0039      	movs	r1, r7
 8012e8a:	f7ef fc97 	bl	80027bc <__aeabi_dsub>
 8012e8e:	0006      	movs	r6, r0
 8012e90:	000f      	movs	r7, r1
 8012e92:	e03b      	b.n	8012f0c <__kernel_rem_pio2+0x270>
 8012e94:	2200      	movs	r2, #0
 8012e96:	4b57      	ldr	r3, [pc, #348]	; (8012ff4 <__kernel_rem_pio2+0x358>)
 8012e98:	0020      	movs	r0, r4
 8012e9a:	0029      	movs	r1, r5
 8012e9c:	f7ef fa22 	bl	80022e4 <__aeabi_dmul>
 8012ea0:	f7f0 f83c 	bl	8002f1c <__aeabi_d2iz>
 8012ea4:	f7f0 f870 	bl	8002f88 <__aeabi_i2d>
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	4b53      	ldr	r3, [pc, #332]	; (8012ff8 <__kernel_rem_pio2+0x35c>)
 8012eac:	0006      	movs	r6, r0
 8012eae:	000f      	movs	r7, r1
 8012eb0:	f7ef fa18 	bl	80022e4 <__aeabi_dmul>
 8012eb4:	0002      	movs	r2, r0
 8012eb6:	000b      	movs	r3, r1
 8012eb8:	0020      	movs	r0, r4
 8012eba:	0029      	movs	r1, r5
 8012ebc:	f7ef fc7e 	bl	80027bc <__aeabi_dsub>
 8012ec0:	f7f0 f82c 	bl	8002f1c <__aeabi_d2iz>
 8012ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012ec8:	c301      	stmia	r3!, {r0}
 8012eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ece:	0030      	movs	r0, r6
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	18d3      	adds	r3, r2, r3
 8012ed8:	0039      	movs	r1, r7
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	f7ee fa91 	bl	8001404 <__aeabi_dadd>
 8012ee2:	0004      	movs	r4, r0
 8012ee4:	000d      	movs	r5, r1
 8012ee6:	e75d      	b.n	8012da4 <__kernel_rem_pio2+0x108>
 8012ee8:	9b02      	ldr	r3, [sp, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d107      	bne.n	8012efe <__kernel_rem_pio2+0x262>
 8012eee:	9b04      	ldr	r3, [sp, #16]
 8012ef0:	aa12      	add	r2, sp, #72	; 0x48
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	5898      	ldr	r0, [r3, r2]
 8012ef8:	15c3      	asrs	r3, r0, #23
 8012efa:	930a      	str	r3, [sp, #40]	; 0x28
 8012efc:	e795      	b.n	8012e2a <__kernel_rem_pio2+0x18e>
 8012efe:	2200      	movs	r2, #0
 8012f00:	4b3e      	ldr	r3, [pc, #248]	; (8012ffc <__kernel_rem_pio2+0x360>)
 8012f02:	f7ed fab1 	bl	8000468 <__aeabi_dcmpge>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d136      	bne.n	8012f78 <__kernel_rem_pio2+0x2dc>
 8012f0a:	900a      	str	r0, [sp, #40]	; 0x28
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	2300      	movs	r3, #0
 8012f10:	0030      	movs	r0, r6
 8012f12:	0039      	movs	r1, r7
 8012f14:	f7ed fa84 	bl	8000420 <__aeabi_dcmpeq>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d100      	bne.n	8012f1e <__kernel_rem_pio2+0x282>
 8012f1c:	e0b9      	b.n	8013092 <__kernel_rem_pio2+0x3f6>
 8012f1e:	2200      	movs	r2, #0
 8012f20:	9b04      	ldr	r3, [sp, #16]
 8012f22:	3b01      	subs	r3, #1
 8012f24:	9300      	str	r3, [sp, #0]
 8012f26:	9908      	ldr	r1, [sp, #32]
 8012f28:	428b      	cmp	r3, r1
 8012f2a:	da52      	bge.n	8012fd2 <__kernel_rem_pio2+0x336>
 8012f2c:	2a00      	cmp	r2, #0
 8012f2e:	d100      	bne.n	8012f32 <__kernel_rem_pio2+0x296>
 8012f30:	e095      	b.n	801305e <__kernel_rem_pio2+0x3c2>
 8012f32:	9b02      	ldr	r3, [sp, #8]
 8012f34:	aa12      	add	r2, sp, #72	; 0x48
 8012f36:	3b18      	subs	r3, #24
 8012f38:	9302      	str	r3, [sp, #8]
 8012f3a:	9b00      	ldr	r3, [sp, #0]
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	589b      	ldr	r3, [r3, r2]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d100      	bne.n	8012f46 <__kernel_rem_pio2+0x2aa>
 8012f44:	e0a1      	b.n	801308a <__kernel_rem_pio2+0x3ee>
 8012f46:	2000      	movs	r0, #0
 8012f48:	9a02      	ldr	r2, [sp, #8]
 8012f4a:	4929      	ldr	r1, [pc, #164]	; (8012ff0 <__kernel_rem_pio2+0x354>)
 8012f4c:	f000 fb5c 	bl	8013608 <scalbn>
 8012f50:	0006      	movs	r6, r0
 8012f52:	000f      	movs	r7, r1
 8012f54:	9c00      	ldr	r4, [sp, #0]
 8012f56:	2c00      	cmp	r4, #0
 8012f58:	db00      	blt.n	8012f5c <__kernel_rem_pio2+0x2c0>
 8012f5a:	e0d9      	b.n	8013110 <__kernel_rem_pio2+0x474>
 8012f5c:	2600      	movs	r6, #0
 8012f5e:	9d00      	ldr	r5, [sp, #0]
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	da00      	bge.n	8012f66 <__kernel_rem_pio2+0x2ca>
 8012f64:	e10c      	b.n	8013180 <__kernel_rem_pio2+0x4e4>
 8012f66:	ab76      	add	r3, sp, #472	; 0x1d8
 8012f68:	00ef      	lsls	r7, r5, #3
 8012f6a:	2400      	movs	r4, #0
 8012f6c:	18ff      	adds	r7, r7, r3
 8012f6e:	2300      	movs	r3, #0
 8012f70:	9302      	str	r3, [sp, #8]
 8012f72:	9403      	str	r4, [sp, #12]
 8012f74:	2400      	movs	r4, #0
 8012f76:	e0f4      	b.n	8013162 <__kernel_rem_pio2+0x4c6>
 8012f78:	2302      	movs	r3, #2
 8012f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f7c:	e758      	b.n	8012e30 <__kernel_rem_pio2+0x194>
 8012f7e:	9b00      	ldr	r3, [sp, #0]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	d10b      	bne.n	8012f9e <__kernel_rem_pio2+0x302>
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d003      	beq.n	8012f92 <__kernel_rem_pio2+0x2f6>
 8012f8a:	9c00      	ldr	r4, [sp, #0]
 8012f8c:	1ac3      	subs	r3, r0, r3
 8012f8e:	6023      	str	r3, [r4, #0]
 8012f90:	002b      	movs	r3, r5
 8012f92:	9c00      	ldr	r4, [sp, #0]
 8012f94:	3201      	adds	r2, #1
 8012f96:	3404      	adds	r4, #4
 8012f98:	9400      	str	r4, [sp, #0]
 8012f9a:	001c      	movs	r4, r3
 8012f9c:	e752      	b.n	8012e44 <__kernel_rem_pio2+0x1a8>
 8012f9e:	4661      	mov	r1, ip
 8012fa0:	1acb      	subs	r3, r1, r3
 8012fa2:	9900      	ldr	r1, [sp, #0]
 8012fa4:	600b      	str	r3, [r1, #0]
 8012fa6:	0023      	movs	r3, r4
 8012fa8:	e7f3      	b.n	8012f92 <__kernel_rem_pio2+0x2f6>
 8012faa:	9b04      	ldr	r3, [sp, #16]
 8012fac:	aa12      	add	r2, sp, #72	; 0x48
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	589a      	ldr	r2, [r3, r2]
 8012fb4:	9200      	str	r2, [sp, #0]
 8012fb6:	0252      	lsls	r2, r2, #9
 8012fb8:	0a52      	lsrs	r2, r2, #9
 8012fba:	a912      	add	r1, sp, #72	; 0x48
 8012fbc:	505a      	str	r2, [r3, r1]
 8012fbe:	e74e      	b.n	8012e5e <__kernel_rem_pio2+0x1c2>
 8012fc0:	9b04      	ldr	r3, [sp, #16]
 8012fc2:	aa12      	add	r2, sp, #72	; 0x48
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	589a      	ldr	r2, [r3, r2]
 8012fca:	9200      	str	r2, [sp, #0]
 8012fcc:	0292      	lsls	r2, r2, #10
 8012fce:	0a92      	lsrs	r2, r2, #10
 8012fd0:	e7f3      	b.n	8012fba <__kernel_rem_pio2+0x31e>
 8012fd2:	0099      	lsls	r1, r3, #2
 8012fd4:	a812      	add	r0, sp, #72	; 0x48
 8012fd6:	5809      	ldr	r1, [r1, r0]
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	430a      	orrs	r2, r1
 8012fdc:	e7a3      	b.n	8012f26 <__kernel_rem_pio2+0x28a>
 8012fde:	46c0      	nop			; (mov r8, r8)
 8012fe0:	fffffd84 	.word	0xfffffd84
 8012fe4:	08016210 	.word	0x08016210
 8012fe8:	40200000 	.word	0x40200000
 8012fec:	00ffffff 	.word	0x00ffffff
 8012ff0:	3ff00000 	.word	0x3ff00000
 8012ff4:	3e700000 	.word	0x3e700000
 8012ff8:	41700000 	.word	0x41700000
 8012ffc:	3fe00000 	.word	0x3fe00000
 8013000:	3301      	adds	r3, #1
 8013002:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013004:	009a      	lsls	r2, r3, #2
 8013006:	4252      	negs	r2, r2
 8013008:	588a      	ldr	r2, [r1, r2]
 801300a:	2a00      	cmp	r2, #0
 801300c:	d0f8      	beq.n	8013000 <__kernel_rem_pio2+0x364>
 801300e:	9a04      	ldr	r2, [sp, #16]
 8013010:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013012:	1c57      	adds	r7, r2, #1
 8013014:	1854      	adds	r4, r2, r1
 8013016:	00e4      	lsls	r4, r4, #3
 8013018:	aa26      	add	r2, sp, #152	; 0x98
 801301a:	1914      	adds	r4, r2, r4
 801301c:	9a04      	ldr	r2, [sp, #16]
 801301e:	18d3      	adds	r3, r2, r3
 8013020:	9304      	str	r3, [sp, #16]
 8013022:	9b04      	ldr	r3, [sp, #16]
 8013024:	42bb      	cmp	r3, r7
 8013026:	da00      	bge.n	801302a <__kernel_rem_pio2+0x38e>
 8013028:	e6b0      	b.n	8012d8c <__kernel_rem_pio2+0xf0>
 801302a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801302c:	00bb      	lsls	r3, r7, #2
 801302e:	58d0      	ldr	r0, [r2, r3]
 8013030:	f7ef ffaa 	bl	8002f88 <__aeabi_i2d>
 8013034:	2200      	movs	r2, #0
 8013036:	2300      	movs	r3, #0
 8013038:	0026      	movs	r6, r4
 801303a:	2500      	movs	r5, #0
 801303c:	6020      	str	r0, [r4, #0]
 801303e:	6061      	str	r1, [r4, #4]
 8013040:	9200      	str	r2, [sp, #0]
 8013042:	9301      	str	r3, [sp, #4]
 8013044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013046:	429d      	cmp	r5, r3
 8013048:	dd0b      	ble.n	8013062 <__kernel_rem_pio2+0x3c6>
 801304a:	00fb      	lsls	r3, r7, #3
 801304c:	aa76      	add	r2, sp, #472	; 0x1d8
 801304e:	18d3      	adds	r3, r2, r3
 8013050:	3701      	adds	r7, #1
 8013052:	9900      	ldr	r1, [sp, #0]
 8013054:	9a01      	ldr	r2, [sp, #4]
 8013056:	3408      	adds	r4, #8
 8013058:	6019      	str	r1, [r3, #0]
 801305a:	605a      	str	r2, [r3, #4]
 801305c:	e7e1      	b.n	8013022 <__kernel_rem_pio2+0x386>
 801305e:	2301      	movs	r3, #1
 8013060:	e7cf      	b.n	8013002 <__kernel_rem_pio2+0x366>
 8013062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013064:	00e9      	lsls	r1, r5, #3
 8013066:	1859      	adds	r1, r3, r1
 8013068:	6808      	ldr	r0, [r1, #0]
 801306a:	6849      	ldr	r1, [r1, #4]
 801306c:	6832      	ldr	r2, [r6, #0]
 801306e:	6873      	ldr	r3, [r6, #4]
 8013070:	f7ef f938 	bl	80022e4 <__aeabi_dmul>
 8013074:	0002      	movs	r2, r0
 8013076:	000b      	movs	r3, r1
 8013078:	9800      	ldr	r0, [sp, #0]
 801307a:	9901      	ldr	r1, [sp, #4]
 801307c:	f7ee f9c2 	bl	8001404 <__aeabi_dadd>
 8013080:	3501      	adds	r5, #1
 8013082:	9000      	str	r0, [sp, #0]
 8013084:	9101      	str	r1, [sp, #4]
 8013086:	3e08      	subs	r6, #8
 8013088:	e7dc      	b.n	8013044 <__kernel_rem_pio2+0x3a8>
 801308a:	9b00      	ldr	r3, [sp, #0]
 801308c:	3b01      	subs	r3, #1
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	e74f      	b.n	8012f32 <__kernel_rem_pio2+0x296>
 8013092:	9b02      	ldr	r3, [sp, #8]
 8013094:	0030      	movs	r0, r6
 8013096:	425a      	negs	r2, r3
 8013098:	0039      	movs	r1, r7
 801309a:	f000 fab5 	bl	8013608 <scalbn>
 801309e:	2200      	movs	r2, #0
 80130a0:	4bb6      	ldr	r3, [pc, #728]	; (801337c <__kernel_rem_pio2+0x6e0>)
 80130a2:	0004      	movs	r4, r0
 80130a4:	000d      	movs	r5, r1
 80130a6:	f7ed f9df 	bl	8000468 <__aeabi_dcmpge>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d025      	beq.n	80130fa <__kernel_rem_pio2+0x45e>
 80130ae:	2200      	movs	r2, #0
 80130b0:	4bb3      	ldr	r3, [pc, #716]	; (8013380 <__kernel_rem_pio2+0x6e4>)
 80130b2:	0020      	movs	r0, r4
 80130b4:	0029      	movs	r1, r5
 80130b6:	f7ef f915 	bl	80022e4 <__aeabi_dmul>
 80130ba:	f7ef ff2f 	bl	8002f1c <__aeabi_d2iz>
 80130be:	9b04      	ldr	r3, [sp, #16]
 80130c0:	0006      	movs	r6, r0
 80130c2:	009f      	lsls	r7, r3, #2
 80130c4:	f7ef ff60 	bl	8002f88 <__aeabi_i2d>
 80130c8:	2200      	movs	r2, #0
 80130ca:	4bac      	ldr	r3, [pc, #688]	; (801337c <__kernel_rem_pio2+0x6e0>)
 80130cc:	f7ef f90a 	bl	80022e4 <__aeabi_dmul>
 80130d0:	0002      	movs	r2, r0
 80130d2:	000b      	movs	r3, r1
 80130d4:	0020      	movs	r0, r4
 80130d6:	0029      	movs	r1, r5
 80130d8:	f7ef fb70 	bl	80027bc <__aeabi_dsub>
 80130dc:	f7ef ff1e 	bl	8002f1c <__aeabi_d2iz>
 80130e0:	ab12      	add	r3, sp, #72	; 0x48
 80130e2:	51d8      	str	r0, [r3, r7]
 80130e4:	9b04      	ldr	r3, [sp, #16]
 80130e6:	aa12      	add	r2, sp, #72	; 0x48
 80130e8:	3301      	adds	r3, #1
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	9b02      	ldr	r3, [sp, #8]
 80130ee:	3318      	adds	r3, #24
 80130f0:	9302      	str	r3, [sp, #8]
 80130f2:	9b00      	ldr	r3, [sp, #0]
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	509e      	str	r6, [r3, r2]
 80130f8:	e725      	b.n	8012f46 <__kernel_rem_pio2+0x2aa>
 80130fa:	9b04      	ldr	r3, [sp, #16]
 80130fc:	0020      	movs	r0, r4
 80130fe:	0029      	movs	r1, r5
 8013100:	009e      	lsls	r6, r3, #2
 8013102:	f7ef ff0b 	bl	8002f1c <__aeabi_d2iz>
 8013106:	ab12      	add	r3, sp, #72	; 0x48
 8013108:	5198      	str	r0, [r3, r6]
 801310a:	9b04      	ldr	r3, [sp, #16]
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	e71a      	b.n	8012f46 <__kernel_rem_pio2+0x2aa>
 8013110:	00e5      	lsls	r5, r4, #3
 8013112:	ab76      	add	r3, sp, #472	; 0x1d8
 8013114:	aa12      	add	r2, sp, #72	; 0x48
 8013116:	195d      	adds	r5, r3, r5
 8013118:	00a3      	lsls	r3, r4, #2
 801311a:	5898      	ldr	r0, [r3, r2]
 801311c:	f7ef ff34 	bl	8002f88 <__aeabi_i2d>
 8013120:	0032      	movs	r2, r6
 8013122:	003b      	movs	r3, r7
 8013124:	f7ef f8de 	bl	80022e4 <__aeabi_dmul>
 8013128:	2200      	movs	r2, #0
 801312a:	6028      	str	r0, [r5, #0]
 801312c:	6069      	str	r1, [r5, #4]
 801312e:	4b94      	ldr	r3, [pc, #592]	; (8013380 <__kernel_rem_pio2+0x6e4>)
 8013130:	0030      	movs	r0, r6
 8013132:	0039      	movs	r1, r7
 8013134:	f7ef f8d6 	bl	80022e4 <__aeabi_dmul>
 8013138:	3c01      	subs	r4, #1
 801313a:	0006      	movs	r6, r0
 801313c:	000f      	movs	r7, r1
 801313e:	e70a      	b.n	8012f56 <__kernel_rem_pio2+0x2ba>
 8013140:	4b90      	ldr	r3, [pc, #576]	; (8013384 <__kernel_rem_pio2+0x6e8>)
 8013142:	00e1      	lsls	r1, r4, #3
 8013144:	1859      	adds	r1, r3, r1
 8013146:	6808      	ldr	r0, [r1, #0]
 8013148:	6849      	ldr	r1, [r1, #4]
 801314a:	cf0c      	ldmia	r7!, {r2, r3}
 801314c:	f7ef f8ca 	bl	80022e4 <__aeabi_dmul>
 8013150:	0002      	movs	r2, r0
 8013152:	000b      	movs	r3, r1
 8013154:	9802      	ldr	r0, [sp, #8]
 8013156:	9903      	ldr	r1, [sp, #12]
 8013158:	f7ee f954 	bl	8001404 <__aeabi_dadd>
 801315c:	9002      	str	r0, [sp, #8]
 801315e:	9103      	str	r1, [sp, #12]
 8013160:	3401      	adds	r4, #1
 8013162:	9b08      	ldr	r3, [sp, #32]
 8013164:	429c      	cmp	r4, r3
 8013166:	dc01      	bgt.n	801316c <__kernel_rem_pio2+0x4d0>
 8013168:	42a6      	cmp	r6, r4
 801316a:	dae9      	bge.n	8013140 <__kernel_rem_pio2+0x4a4>
 801316c:	00f3      	lsls	r3, r6, #3
 801316e:	aa4e      	add	r2, sp, #312	; 0x138
 8013170:	18d3      	adds	r3, r2, r3
 8013172:	3d01      	subs	r5, #1
 8013174:	9902      	ldr	r1, [sp, #8]
 8013176:	9a03      	ldr	r2, [sp, #12]
 8013178:	3601      	adds	r6, #1
 801317a:	6019      	str	r1, [r3, #0]
 801317c:	605a      	str	r2, [r3, #4]
 801317e:	e6ef      	b.n	8012f60 <__kernel_rem_pio2+0x2c4>
 8013180:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013182:	2b02      	cmp	r3, #2
 8013184:	dc0b      	bgt.n	801319e <__kernel_rem_pio2+0x502>
 8013186:	2b00      	cmp	r3, #0
 8013188:	dd00      	ble.n	801318c <__kernel_rem_pio2+0x4f0>
 801318a:	e08a      	b.n	80132a2 <__kernel_rem_pio2+0x606>
 801318c:	d055      	beq.n	801323a <__kernel_rem_pio2+0x59e>
 801318e:	2007      	movs	r0, #7
 8013190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013192:	4003      	ands	r3, r0
 8013194:	0018      	movs	r0, r3
 8013196:	239f      	movs	r3, #159	; 0x9f
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	449d      	add	sp, r3
 801319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801319e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	d1f4      	bne.n	801318e <__kernel_rem_pio2+0x4f2>
 80131a4:	9b00      	ldr	r3, [sp, #0]
 80131a6:	00dc      	lsls	r4, r3, #3
 80131a8:	ab4e      	add	r3, sp, #312	; 0x138
 80131aa:	191c      	adds	r4, r3, r4
 80131ac:	0025      	movs	r5, r4
 80131ae:	9b00      	ldr	r3, [sp, #0]
 80131b0:	9302      	str	r3, [sp, #8]
 80131b2:	9b02      	ldr	r3, [sp, #8]
 80131b4:	3d08      	subs	r5, #8
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	dd00      	ble.n	80131bc <__kernel_rem_pio2+0x520>
 80131ba:	e083      	b.n	80132c4 <__kernel_rem_pio2+0x628>
 80131bc:	9d00      	ldr	r5, [sp, #0]
 80131be:	3c08      	subs	r4, #8
 80131c0:	2d01      	cmp	r5, #1
 80131c2:	dd00      	ble.n	80131c6 <__kernel_rem_pio2+0x52a>
 80131c4:	e0a0      	b.n	8013308 <__kernel_rem_pio2+0x66c>
 80131c6:	2400      	movs	r4, #0
 80131c8:	0021      	movs	r1, r4
 80131ca:	9b00      	ldr	r3, [sp, #0]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	dd00      	ble.n	80131d2 <__kernel_rem_pio2+0x536>
 80131d0:	e0b8      	b.n	8013344 <__kernel_rem_pio2+0x6a8>
 80131d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131d4:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 80131d6:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80131d8:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80131da:	9851      	ldr	r0, [sp, #324]	; 0x144
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d000      	beq.n	80131e2 <__kernel_rem_pio2+0x546>
 80131e0:	e0be      	b.n	8013360 <__kernel_rem_pio2+0x6c4>
 80131e2:	0033      	movs	r3, r6
 80131e4:	003a      	movs	r2, r7
 80131e6:	9e07      	ldr	r6, [sp, #28]
 80131e8:	6032      	str	r2, [r6, #0]
 80131ea:	6073      	str	r3, [r6, #4]
 80131ec:	002a      	movs	r2, r5
 80131ee:	0003      	movs	r3, r0
 80131f0:	60b2      	str	r2, [r6, #8]
 80131f2:	60f3      	str	r3, [r6, #12]
 80131f4:	0022      	movs	r2, r4
 80131f6:	000b      	movs	r3, r1
 80131f8:	6132      	str	r2, [r6, #16]
 80131fa:	6173      	str	r3, [r6, #20]
 80131fc:	e7c7      	b.n	801318e <__kernel_rem_pio2+0x4f2>
 80131fe:	9b00      	ldr	r3, [sp, #0]
 8013200:	aa4e      	add	r2, sp, #312	; 0x138
 8013202:	00db      	lsls	r3, r3, #3
 8013204:	18d3      	adds	r3, r2, r3
 8013206:	0028      	movs	r0, r5
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	0021      	movs	r1, r4
 801320e:	f7ee f8f9 	bl	8001404 <__aeabi_dadd>
 8013212:	0005      	movs	r5, r0
 8013214:	000c      	movs	r4, r1
 8013216:	9b00      	ldr	r3, [sp, #0]
 8013218:	3b01      	subs	r3, #1
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	9b00      	ldr	r3, [sp, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	daed      	bge.n	80131fe <__kernel_rem_pio2+0x562>
 8013222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013224:	2b00      	cmp	r3, #0
 8013226:	d002      	beq.n	801322e <__kernel_rem_pio2+0x592>
 8013228:	2380      	movs	r3, #128	; 0x80
 801322a:	061b      	lsls	r3, r3, #24
 801322c:	18e4      	adds	r4, r4, r3
 801322e:	002a      	movs	r2, r5
 8013230:	0023      	movs	r3, r4
 8013232:	9907      	ldr	r1, [sp, #28]
 8013234:	600a      	str	r2, [r1, #0]
 8013236:	604b      	str	r3, [r1, #4]
 8013238:	e7a9      	b.n	801318e <__kernel_rem_pio2+0x4f2>
 801323a:	9da4      	ldr	r5, [sp, #656]	; 0x290
 801323c:	002c      	movs	r4, r5
 801323e:	e7ed      	b.n	801321c <__kernel_rem_pio2+0x580>
 8013240:	00e3      	lsls	r3, r4, #3
 8013242:	aa4e      	add	r2, sp, #312	; 0x138
 8013244:	18d3      	adds	r3, r2, r3
 8013246:	0030      	movs	r0, r6
 8013248:	681a      	ldr	r2, [r3, #0]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	0029      	movs	r1, r5
 801324e:	f7ee f8d9 	bl	8001404 <__aeabi_dadd>
 8013252:	0006      	movs	r6, r0
 8013254:	000d      	movs	r5, r1
 8013256:	3c01      	subs	r4, #1
 8013258:	2c00      	cmp	r4, #0
 801325a:	daf1      	bge.n	8013240 <__kernel_rem_pio2+0x5a4>
 801325c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801325e:	0029      	movs	r1, r5
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <__kernel_rem_pio2+0x5ce>
 8013264:	2380      	movs	r3, #128	; 0x80
 8013266:	061b      	lsls	r3, r3, #24
 8013268:	18e9      	adds	r1, r5, r3
 801326a:	0032      	movs	r2, r6
 801326c:	000b      	movs	r3, r1
 801326e:	9907      	ldr	r1, [sp, #28]
 8013270:	2401      	movs	r4, #1
 8013272:	600a      	str	r2, [r1, #0]
 8013274:	604b      	str	r3, [r1, #4]
 8013276:	984e      	ldr	r0, [sp, #312]	; 0x138
 8013278:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801327a:	002b      	movs	r3, r5
 801327c:	f7ef fa9e 	bl	80027bc <__aeabi_dsub>
 8013280:	0006      	movs	r6, r0
 8013282:	000d      	movs	r5, r1
 8013284:	9b00      	ldr	r3, [sp, #0]
 8013286:	42a3      	cmp	r3, r4
 8013288:	da0f      	bge.n	80132aa <__kernel_rem_pio2+0x60e>
 801328a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <__kernel_rem_pio2+0x5fa>
 8013290:	2380      	movs	r3, #128	; 0x80
 8013292:	061b      	lsls	r3, r3, #24
 8013294:	18ed      	adds	r5, r5, r3
 8013296:	0032      	movs	r2, r6
 8013298:	002b      	movs	r3, r5
 801329a:	9907      	ldr	r1, [sp, #28]
 801329c:	608a      	str	r2, [r1, #8]
 801329e:	60cb      	str	r3, [r1, #12]
 80132a0:	e775      	b.n	801318e <__kernel_rem_pio2+0x4f2>
 80132a2:	2600      	movs	r6, #0
 80132a4:	9c00      	ldr	r4, [sp, #0]
 80132a6:	0035      	movs	r5, r6
 80132a8:	e7d6      	b.n	8013258 <__kernel_rem_pio2+0x5bc>
 80132aa:	00e3      	lsls	r3, r4, #3
 80132ac:	aa4e      	add	r2, sp, #312	; 0x138
 80132ae:	18d3      	adds	r3, r2, r3
 80132b0:	0030      	movs	r0, r6
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	0029      	movs	r1, r5
 80132b8:	f7ee f8a4 	bl	8001404 <__aeabi_dadd>
 80132bc:	3401      	adds	r4, #1
 80132be:	0006      	movs	r6, r0
 80132c0:	000d      	movs	r5, r1
 80132c2:	e7df      	b.n	8013284 <__kernel_rem_pio2+0x5e8>
 80132c4:	9b02      	ldr	r3, [sp, #8]
 80132c6:	68ae      	ldr	r6, [r5, #8]
 80132c8:	68ef      	ldr	r7, [r5, #12]
 80132ca:	3b01      	subs	r3, #1
 80132cc:	9302      	str	r3, [sp, #8]
 80132ce:	682a      	ldr	r2, [r5, #0]
 80132d0:	686b      	ldr	r3, [r5, #4]
 80132d2:	9204      	str	r2, [sp, #16]
 80132d4:	9305      	str	r3, [sp, #20]
 80132d6:	9804      	ldr	r0, [sp, #16]
 80132d8:	9905      	ldr	r1, [sp, #20]
 80132da:	0032      	movs	r2, r6
 80132dc:	003b      	movs	r3, r7
 80132de:	f7ee f891 	bl	8001404 <__aeabi_dadd>
 80132e2:	0002      	movs	r2, r0
 80132e4:	000b      	movs	r3, r1
 80132e6:	9008      	str	r0, [sp, #32]
 80132e8:	9109      	str	r1, [sp, #36]	; 0x24
 80132ea:	9804      	ldr	r0, [sp, #16]
 80132ec:	9905      	ldr	r1, [sp, #20]
 80132ee:	f7ef fa65 	bl	80027bc <__aeabi_dsub>
 80132f2:	0032      	movs	r2, r6
 80132f4:	003b      	movs	r3, r7
 80132f6:	f7ee f885 	bl	8001404 <__aeabi_dadd>
 80132fa:	9a08      	ldr	r2, [sp, #32]
 80132fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132fe:	60a8      	str	r0, [r5, #8]
 8013300:	60e9      	str	r1, [r5, #12]
 8013302:	602a      	str	r2, [r5, #0]
 8013304:	606b      	str	r3, [r5, #4]
 8013306:	e754      	b.n	80131b2 <__kernel_rem_pio2+0x516>
 8013308:	6826      	ldr	r6, [r4, #0]
 801330a:	6867      	ldr	r7, [r4, #4]
 801330c:	68a2      	ldr	r2, [r4, #8]
 801330e:	68e3      	ldr	r3, [r4, #12]
 8013310:	0030      	movs	r0, r6
 8013312:	0039      	movs	r1, r7
 8013314:	9202      	str	r2, [sp, #8]
 8013316:	9303      	str	r3, [sp, #12]
 8013318:	f7ee f874 	bl	8001404 <__aeabi_dadd>
 801331c:	0002      	movs	r2, r0
 801331e:	000b      	movs	r3, r1
 8013320:	9004      	str	r0, [sp, #16]
 8013322:	9105      	str	r1, [sp, #20]
 8013324:	0030      	movs	r0, r6
 8013326:	0039      	movs	r1, r7
 8013328:	f7ef fa48 	bl	80027bc <__aeabi_dsub>
 801332c:	9a02      	ldr	r2, [sp, #8]
 801332e:	9b03      	ldr	r3, [sp, #12]
 8013330:	f7ee f868 	bl	8001404 <__aeabi_dadd>
 8013334:	9a04      	ldr	r2, [sp, #16]
 8013336:	9b05      	ldr	r3, [sp, #20]
 8013338:	60a0      	str	r0, [r4, #8]
 801333a:	60e1      	str	r1, [r4, #12]
 801333c:	6022      	str	r2, [r4, #0]
 801333e:	6063      	str	r3, [r4, #4]
 8013340:	3d01      	subs	r5, #1
 8013342:	e73c      	b.n	80131be <__kernel_rem_pio2+0x522>
 8013344:	9b00      	ldr	r3, [sp, #0]
 8013346:	aa4e      	add	r2, sp, #312	; 0x138
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	18d3      	adds	r3, r2, r3
 801334c:	0020      	movs	r0, r4
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	f7ee f857 	bl	8001404 <__aeabi_dadd>
 8013356:	9b00      	ldr	r3, [sp, #0]
 8013358:	0004      	movs	r4, r0
 801335a:	3b01      	subs	r3, #1
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	e734      	b.n	80131ca <__kernel_rem_pio2+0x52e>
 8013360:	9b07      	ldr	r3, [sp, #28]
 8013362:	9a07      	ldr	r2, [sp, #28]
 8013364:	601f      	str	r7, [r3, #0]
 8013366:	2380      	movs	r3, #128	; 0x80
 8013368:	061b      	lsls	r3, r3, #24
 801336a:	18f6      	adds	r6, r6, r3
 801336c:	18c0      	adds	r0, r0, r3
 801336e:	18c9      	adds	r1, r1, r3
 8013370:	6056      	str	r6, [r2, #4]
 8013372:	6095      	str	r5, [r2, #8]
 8013374:	60d0      	str	r0, [r2, #12]
 8013376:	6114      	str	r4, [r2, #16]
 8013378:	6151      	str	r1, [r2, #20]
 801337a:	e708      	b.n	801318e <__kernel_rem_pio2+0x4f2>
 801337c:	41700000 	.word	0x41700000
 8013380:	3e700000 	.word	0x3e700000
 8013384:	080161d0 	.word	0x080161d0

08013388 <__kernel_sin>:
 8013388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801338a:	b089      	sub	sp, #36	; 0x24
 801338c:	9202      	str	r2, [sp, #8]
 801338e:	9303      	str	r3, [sp, #12]
 8013390:	22f9      	movs	r2, #249	; 0xf9
 8013392:	004b      	lsls	r3, r1, #1
 8013394:	0007      	movs	r7, r0
 8013396:	000e      	movs	r6, r1
 8013398:	085b      	lsrs	r3, r3, #1
 801339a:	0592      	lsls	r2, r2, #22
 801339c:	4293      	cmp	r3, r2
 801339e:	da03      	bge.n	80133a8 <__kernel_sin+0x20>
 80133a0:	f7ef fdbc 	bl	8002f1c <__aeabi_d2iz>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d04c      	beq.n	8013442 <__kernel_sin+0xba>
 80133a8:	003a      	movs	r2, r7
 80133aa:	0033      	movs	r3, r6
 80133ac:	0038      	movs	r0, r7
 80133ae:	0031      	movs	r1, r6
 80133b0:	f7ee ff98 	bl	80022e4 <__aeabi_dmul>
 80133b4:	0004      	movs	r4, r0
 80133b6:	000d      	movs	r5, r1
 80133b8:	0002      	movs	r2, r0
 80133ba:	000b      	movs	r3, r1
 80133bc:	0038      	movs	r0, r7
 80133be:	0031      	movs	r1, r6
 80133c0:	f7ee ff90 	bl	80022e4 <__aeabi_dmul>
 80133c4:	4a39      	ldr	r2, [pc, #228]	; (80134ac <__kernel_sin+0x124>)
 80133c6:	9000      	str	r0, [sp, #0]
 80133c8:	9101      	str	r1, [sp, #4]
 80133ca:	4b39      	ldr	r3, [pc, #228]	; (80134b0 <__kernel_sin+0x128>)
 80133cc:	0020      	movs	r0, r4
 80133ce:	0029      	movs	r1, r5
 80133d0:	f7ee ff88 	bl	80022e4 <__aeabi_dmul>
 80133d4:	4a37      	ldr	r2, [pc, #220]	; (80134b4 <__kernel_sin+0x12c>)
 80133d6:	4b38      	ldr	r3, [pc, #224]	; (80134b8 <__kernel_sin+0x130>)
 80133d8:	f7ef f9f0 	bl	80027bc <__aeabi_dsub>
 80133dc:	0022      	movs	r2, r4
 80133de:	002b      	movs	r3, r5
 80133e0:	f7ee ff80 	bl	80022e4 <__aeabi_dmul>
 80133e4:	4a35      	ldr	r2, [pc, #212]	; (80134bc <__kernel_sin+0x134>)
 80133e6:	4b36      	ldr	r3, [pc, #216]	; (80134c0 <__kernel_sin+0x138>)
 80133e8:	f7ee f80c 	bl	8001404 <__aeabi_dadd>
 80133ec:	0022      	movs	r2, r4
 80133ee:	002b      	movs	r3, r5
 80133f0:	f7ee ff78 	bl	80022e4 <__aeabi_dmul>
 80133f4:	4a33      	ldr	r2, [pc, #204]	; (80134c4 <__kernel_sin+0x13c>)
 80133f6:	4b34      	ldr	r3, [pc, #208]	; (80134c8 <__kernel_sin+0x140>)
 80133f8:	f7ef f9e0 	bl	80027bc <__aeabi_dsub>
 80133fc:	0022      	movs	r2, r4
 80133fe:	002b      	movs	r3, r5
 8013400:	f7ee ff70 	bl	80022e4 <__aeabi_dmul>
 8013404:	4b31      	ldr	r3, [pc, #196]	; (80134cc <__kernel_sin+0x144>)
 8013406:	4a32      	ldr	r2, [pc, #200]	; (80134d0 <__kernel_sin+0x148>)
 8013408:	f7ed fffc 	bl	8001404 <__aeabi_dadd>
 801340c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801340e:	9004      	str	r0, [sp, #16]
 8013410:	9105      	str	r1, [sp, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d119      	bne.n	801344a <__kernel_sin+0xc2>
 8013416:	0002      	movs	r2, r0
 8013418:	000b      	movs	r3, r1
 801341a:	0020      	movs	r0, r4
 801341c:	0029      	movs	r1, r5
 801341e:	f7ee ff61 	bl	80022e4 <__aeabi_dmul>
 8013422:	4a2c      	ldr	r2, [pc, #176]	; (80134d4 <__kernel_sin+0x14c>)
 8013424:	4b2c      	ldr	r3, [pc, #176]	; (80134d8 <__kernel_sin+0x150>)
 8013426:	f7ef f9c9 	bl	80027bc <__aeabi_dsub>
 801342a:	9a00      	ldr	r2, [sp, #0]
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	f7ee ff59 	bl	80022e4 <__aeabi_dmul>
 8013432:	0002      	movs	r2, r0
 8013434:	000b      	movs	r3, r1
 8013436:	0038      	movs	r0, r7
 8013438:	0031      	movs	r1, r6
 801343a:	f7ed ffe3 	bl	8001404 <__aeabi_dadd>
 801343e:	0007      	movs	r7, r0
 8013440:	000e      	movs	r6, r1
 8013442:	0038      	movs	r0, r7
 8013444:	0031      	movs	r1, r6
 8013446:	b009      	add	sp, #36	; 0x24
 8013448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801344a:	2200      	movs	r2, #0
 801344c:	9802      	ldr	r0, [sp, #8]
 801344e:	9903      	ldr	r1, [sp, #12]
 8013450:	4b22      	ldr	r3, [pc, #136]	; (80134dc <__kernel_sin+0x154>)
 8013452:	f7ee ff47 	bl	80022e4 <__aeabi_dmul>
 8013456:	9a04      	ldr	r2, [sp, #16]
 8013458:	9b05      	ldr	r3, [sp, #20]
 801345a:	9006      	str	r0, [sp, #24]
 801345c:	9107      	str	r1, [sp, #28]
 801345e:	9800      	ldr	r0, [sp, #0]
 8013460:	9901      	ldr	r1, [sp, #4]
 8013462:	f7ee ff3f 	bl	80022e4 <__aeabi_dmul>
 8013466:	0002      	movs	r2, r0
 8013468:	000b      	movs	r3, r1
 801346a:	9806      	ldr	r0, [sp, #24]
 801346c:	9907      	ldr	r1, [sp, #28]
 801346e:	f7ef f9a5 	bl	80027bc <__aeabi_dsub>
 8013472:	0022      	movs	r2, r4
 8013474:	002b      	movs	r3, r5
 8013476:	f7ee ff35 	bl	80022e4 <__aeabi_dmul>
 801347a:	9a02      	ldr	r2, [sp, #8]
 801347c:	9b03      	ldr	r3, [sp, #12]
 801347e:	f7ef f99d 	bl	80027bc <__aeabi_dsub>
 8013482:	4a14      	ldr	r2, [pc, #80]	; (80134d4 <__kernel_sin+0x14c>)
 8013484:	0004      	movs	r4, r0
 8013486:	000d      	movs	r5, r1
 8013488:	9800      	ldr	r0, [sp, #0]
 801348a:	9901      	ldr	r1, [sp, #4]
 801348c:	4b12      	ldr	r3, [pc, #72]	; (80134d8 <__kernel_sin+0x150>)
 801348e:	f7ee ff29 	bl	80022e4 <__aeabi_dmul>
 8013492:	0002      	movs	r2, r0
 8013494:	000b      	movs	r3, r1
 8013496:	0020      	movs	r0, r4
 8013498:	0029      	movs	r1, r5
 801349a:	f7ed ffb3 	bl	8001404 <__aeabi_dadd>
 801349e:	0002      	movs	r2, r0
 80134a0:	000b      	movs	r3, r1
 80134a2:	0038      	movs	r0, r7
 80134a4:	0031      	movs	r1, r6
 80134a6:	f7ef f989 	bl	80027bc <__aeabi_dsub>
 80134aa:	e7c8      	b.n	801343e <__kernel_sin+0xb6>
 80134ac:	5acfd57c 	.word	0x5acfd57c
 80134b0:	3de5d93a 	.word	0x3de5d93a
 80134b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80134b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80134bc:	57b1fe7d 	.word	0x57b1fe7d
 80134c0:	3ec71de3 	.word	0x3ec71de3
 80134c4:	19c161d5 	.word	0x19c161d5
 80134c8:	3f2a01a0 	.word	0x3f2a01a0
 80134cc:	3f811111 	.word	0x3f811111
 80134d0:	1110f8a6 	.word	0x1110f8a6
 80134d4:	55555549 	.word	0x55555549
 80134d8:	3fc55555 	.word	0x3fc55555
 80134dc:	3fe00000 	.word	0x3fe00000

080134e0 <fabs>:
 80134e0:	004b      	lsls	r3, r1, #1
 80134e2:	0859      	lsrs	r1, r3, #1
 80134e4:	4770      	bx	lr
	...

080134e8 <floor>:
 80134e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134ea:	004b      	lsls	r3, r1, #1
 80134ec:	4a3d      	ldr	r2, [pc, #244]	; (80135e4 <floor+0xfc>)
 80134ee:	0d5b      	lsrs	r3, r3, #21
 80134f0:	189f      	adds	r7, r3, r2
 80134f2:	4684      	mov	ip, r0
 80134f4:	000e      	movs	r6, r1
 80134f6:	000d      	movs	r5, r1
 80134f8:	0004      	movs	r4, r0
 80134fa:	9001      	str	r0, [sp, #4]
 80134fc:	2f13      	cmp	r7, #19
 80134fe:	dc34      	bgt.n	801356a <floor+0x82>
 8013500:	2f00      	cmp	r7, #0
 8013502:	da16      	bge.n	8013532 <floor+0x4a>
 8013504:	4a38      	ldr	r2, [pc, #224]	; (80135e8 <floor+0x100>)
 8013506:	4b39      	ldr	r3, [pc, #228]	; (80135ec <floor+0x104>)
 8013508:	4660      	mov	r0, ip
 801350a:	0031      	movs	r1, r6
 801350c:	f7ed ff7a 	bl	8001404 <__aeabi_dadd>
 8013510:	2200      	movs	r2, #0
 8013512:	2300      	movs	r3, #0
 8013514:	f7ec ff9e 	bl	8000454 <__aeabi_dcmpgt>
 8013518:	2800      	cmp	r0, #0
 801351a:	d007      	beq.n	801352c <floor+0x44>
 801351c:	2e00      	cmp	r6, #0
 801351e:	da5d      	bge.n	80135dc <floor+0xf4>
 8013520:	0073      	lsls	r3, r6, #1
 8013522:	085b      	lsrs	r3, r3, #1
 8013524:	431c      	orrs	r4, r3
 8013526:	d001      	beq.n	801352c <floor+0x44>
 8013528:	2400      	movs	r4, #0
 801352a:	4d31      	ldr	r5, [pc, #196]	; (80135f0 <floor+0x108>)
 801352c:	46a4      	mov	ip, r4
 801352e:	002e      	movs	r6, r5
 8013530:	e029      	b.n	8013586 <floor+0x9e>
 8013532:	4b30      	ldr	r3, [pc, #192]	; (80135f4 <floor+0x10c>)
 8013534:	413b      	asrs	r3, r7
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	400b      	ands	r3, r1
 801353a:	4303      	orrs	r3, r0
 801353c:	d023      	beq.n	8013586 <floor+0x9e>
 801353e:	4a2a      	ldr	r2, [pc, #168]	; (80135e8 <floor+0x100>)
 8013540:	4b2a      	ldr	r3, [pc, #168]	; (80135ec <floor+0x104>)
 8013542:	4660      	mov	r0, ip
 8013544:	0031      	movs	r1, r6
 8013546:	f7ed ff5d 	bl	8001404 <__aeabi_dadd>
 801354a:	2200      	movs	r2, #0
 801354c:	2300      	movs	r3, #0
 801354e:	f7ec ff81 	bl	8000454 <__aeabi_dcmpgt>
 8013552:	2800      	cmp	r0, #0
 8013554:	d0ea      	beq.n	801352c <floor+0x44>
 8013556:	2e00      	cmp	r6, #0
 8013558:	da03      	bge.n	8013562 <floor+0x7a>
 801355a:	2380      	movs	r3, #128	; 0x80
 801355c:	035b      	lsls	r3, r3, #13
 801355e:	413b      	asrs	r3, r7
 8013560:	18f5      	adds	r5, r6, r3
 8013562:	9b00      	ldr	r3, [sp, #0]
 8013564:	2400      	movs	r4, #0
 8013566:	439d      	bics	r5, r3
 8013568:	e7e0      	b.n	801352c <floor+0x44>
 801356a:	2f33      	cmp	r7, #51	; 0x33
 801356c:	dd0f      	ble.n	801358e <floor+0xa6>
 801356e:	2380      	movs	r3, #128	; 0x80
 8013570:	00db      	lsls	r3, r3, #3
 8013572:	429f      	cmp	r7, r3
 8013574:	d107      	bne.n	8013586 <floor+0x9e>
 8013576:	0002      	movs	r2, r0
 8013578:	000b      	movs	r3, r1
 801357a:	4660      	mov	r0, ip
 801357c:	0031      	movs	r1, r6
 801357e:	f7ed ff41 	bl	8001404 <__aeabi_dadd>
 8013582:	4684      	mov	ip, r0
 8013584:	000e      	movs	r6, r1
 8013586:	4660      	mov	r0, ip
 8013588:	0031      	movs	r1, r6
 801358a:	b003      	add	sp, #12
 801358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801358e:	4a1a      	ldr	r2, [pc, #104]	; (80135f8 <floor+0x110>)
 8013590:	189b      	adds	r3, r3, r2
 8013592:	2201      	movs	r2, #1
 8013594:	4252      	negs	r2, r2
 8013596:	40da      	lsrs	r2, r3
 8013598:	9200      	str	r2, [sp, #0]
 801359a:	4210      	tst	r0, r2
 801359c:	d0f3      	beq.n	8013586 <floor+0x9e>
 801359e:	4a12      	ldr	r2, [pc, #72]	; (80135e8 <floor+0x100>)
 80135a0:	4b12      	ldr	r3, [pc, #72]	; (80135ec <floor+0x104>)
 80135a2:	4660      	mov	r0, ip
 80135a4:	0031      	movs	r1, r6
 80135a6:	f7ed ff2d 	bl	8001404 <__aeabi_dadd>
 80135aa:	2200      	movs	r2, #0
 80135ac:	2300      	movs	r3, #0
 80135ae:	f7ec ff51 	bl	8000454 <__aeabi_dcmpgt>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d0ba      	beq.n	801352c <floor+0x44>
 80135b6:	2e00      	cmp	r6, #0
 80135b8:	da02      	bge.n	80135c0 <floor+0xd8>
 80135ba:	2f14      	cmp	r7, #20
 80135bc:	d103      	bne.n	80135c6 <floor+0xde>
 80135be:	3501      	adds	r5, #1
 80135c0:	9b00      	ldr	r3, [sp, #0]
 80135c2:	439c      	bics	r4, r3
 80135c4:	e7b2      	b.n	801352c <floor+0x44>
 80135c6:	2334      	movs	r3, #52	; 0x34
 80135c8:	1bdf      	subs	r7, r3, r7
 80135ca:	3b33      	subs	r3, #51	; 0x33
 80135cc:	40bb      	lsls	r3, r7
 80135ce:	18e4      	adds	r4, r4, r3
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	429c      	cmp	r4, r3
 80135d4:	419b      	sbcs	r3, r3
 80135d6:	425b      	negs	r3, r3
 80135d8:	18f5      	adds	r5, r6, r3
 80135da:	e7f1      	b.n	80135c0 <floor+0xd8>
 80135dc:	2400      	movs	r4, #0
 80135de:	0025      	movs	r5, r4
 80135e0:	e7a4      	b.n	801352c <floor+0x44>
 80135e2:	46c0      	nop			; (mov r8, r8)
 80135e4:	fffffc01 	.word	0xfffffc01
 80135e8:	8800759c 	.word	0x8800759c
 80135ec:	7e37e43c 	.word	0x7e37e43c
 80135f0:	bff00000 	.word	0xbff00000
 80135f4:	000fffff 	.word	0x000fffff
 80135f8:	fffffbed 	.word	0xfffffbed

080135fc <nan>:
 80135fc:	2000      	movs	r0, #0
 80135fe:	4901      	ldr	r1, [pc, #4]	; (8013604 <nan+0x8>)
 8013600:	4770      	bx	lr
 8013602:	46c0      	nop			; (mov r8, r8)
 8013604:	7ff80000 	.word	0x7ff80000

08013608 <scalbn>:
 8013608:	004b      	lsls	r3, r1, #1
 801360a:	b570      	push	{r4, r5, r6, lr}
 801360c:	0d5b      	lsrs	r3, r3, #21
 801360e:	0014      	movs	r4, r2
 8013610:	000a      	movs	r2, r1
 8013612:	2b00      	cmp	r3, #0
 8013614:	d10d      	bne.n	8013632 <scalbn+0x2a>
 8013616:	004b      	lsls	r3, r1, #1
 8013618:	085b      	lsrs	r3, r3, #1
 801361a:	4303      	orrs	r3, r0
 801361c:	d010      	beq.n	8013640 <scalbn+0x38>
 801361e:	4b27      	ldr	r3, [pc, #156]	; (80136bc <scalbn+0xb4>)
 8013620:	2200      	movs	r2, #0
 8013622:	f7ee fe5f 	bl	80022e4 <__aeabi_dmul>
 8013626:	4b26      	ldr	r3, [pc, #152]	; (80136c0 <scalbn+0xb8>)
 8013628:	429c      	cmp	r4, r3
 801362a:	da0a      	bge.n	8013642 <scalbn+0x3a>
 801362c:	4a25      	ldr	r2, [pc, #148]	; (80136c4 <scalbn+0xbc>)
 801362e:	4b26      	ldr	r3, [pc, #152]	; (80136c8 <scalbn+0xc0>)
 8013630:	e019      	b.n	8013666 <scalbn+0x5e>
 8013632:	4d26      	ldr	r5, [pc, #152]	; (80136cc <scalbn+0xc4>)
 8013634:	42ab      	cmp	r3, r5
 8013636:	d108      	bne.n	801364a <scalbn+0x42>
 8013638:	0002      	movs	r2, r0
 801363a:	000b      	movs	r3, r1
 801363c:	f7ed fee2 	bl	8001404 <__aeabi_dadd>
 8013640:	bd70      	pop	{r4, r5, r6, pc}
 8013642:	000a      	movs	r2, r1
 8013644:	004b      	lsls	r3, r1, #1
 8013646:	0d5b      	lsrs	r3, r3, #21
 8013648:	3b36      	subs	r3, #54	; 0x36
 801364a:	4d21      	ldr	r5, [pc, #132]	; (80136d0 <scalbn+0xc8>)
 801364c:	18e3      	adds	r3, r4, r3
 801364e:	42ab      	cmp	r3, r5
 8013650:	dd0c      	ble.n	801366c <scalbn+0x64>
 8013652:	4c20      	ldr	r4, [pc, #128]	; (80136d4 <scalbn+0xcc>)
 8013654:	4d20      	ldr	r5, [pc, #128]	; (80136d8 <scalbn+0xd0>)
 8013656:	2900      	cmp	r1, #0
 8013658:	da01      	bge.n	801365e <scalbn+0x56>
 801365a:	4c1e      	ldr	r4, [pc, #120]	; (80136d4 <scalbn+0xcc>)
 801365c:	4d1f      	ldr	r5, [pc, #124]	; (80136dc <scalbn+0xd4>)
 801365e:	0020      	movs	r0, r4
 8013660:	0029      	movs	r1, r5
 8013662:	4a1c      	ldr	r2, [pc, #112]	; (80136d4 <scalbn+0xcc>)
 8013664:	4b1c      	ldr	r3, [pc, #112]	; (80136d8 <scalbn+0xd0>)
 8013666:	f7ee fe3d 	bl	80022e4 <__aeabi_dmul>
 801366a:	e7e9      	b.n	8013640 <scalbn+0x38>
 801366c:	2b00      	cmp	r3, #0
 801366e:	dd05      	ble.n	801367c <scalbn+0x74>
 8013670:	4c1b      	ldr	r4, [pc, #108]	; (80136e0 <scalbn+0xd8>)
 8013672:	051b      	lsls	r3, r3, #20
 8013674:	4022      	ands	r2, r4
 8013676:	431a      	orrs	r2, r3
 8013678:	0011      	movs	r1, r2
 801367a:	e7e1      	b.n	8013640 <scalbn+0x38>
 801367c:	001d      	movs	r5, r3
 801367e:	3535      	adds	r5, #53	; 0x35
 8013680:	da13      	bge.n	80136aa <scalbn+0xa2>
 8013682:	4a18      	ldr	r2, [pc, #96]	; (80136e4 <scalbn+0xdc>)
 8013684:	0fcb      	lsrs	r3, r1, #31
 8013686:	4294      	cmp	r4, r2
 8013688:	dd08      	ble.n	801369c <scalbn+0x94>
 801368a:	4812      	ldr	r0, [pc, #72]	; (80136d4 <scalbn+0xcc>)
 801368c:	4912      	ldr	r1, [pc, #72]	; (80136d8 <scalbn+0xd0>)
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <scalbn+0x8e>
 8013692:	4810      	ldr	r0, [pc, #64]	; (80136d4 <scalbn+0xcc>)
 8013694:	4911      	ldr	r1, [pc, #68]	; (80136dc <scalbn+0xd4>)
 8013696:	4a0f      	ldr	r2, [pc, #60]	; (80136d4 <scalbn+0xcc>)
 8013698:	4b0f      	ldr	r3, [pc, #60]	; (80136d8 <scalbn+0xd0>)
 801369a:	e7e4      	b.n	8013666 <scalbn+0x5e>
 801369c:	4809      	ldr	r0, [pc, #36]	; (80136c4 <scalbn+0xbc>)
 801369e:	490a      	ldr	r1, [pc, #40]	; (80136c8 <scalbn+0xc0>)
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d0c3      	beq.n	801362c <scalbn+0x24>
 80136a4:	4807      	ldr	r0, [pc, #28]	; (80136c4 <scalbn+0xbc>)
 80136a6:	4910      	ldr	r1, [pc, #64]	; (80136e8 <scalbn+0xe0>)
 80136a8:	e7c0      	b.n	801362c <scalbn+0x24>
 80136aa:	4c0d      	ldr	r4, [pc, #52]	; (80136e0 <scalbn+0xd8>)
 80136ac:	3336      	adds	r3, #54	; 0x36
 80136ae:	4022      	ands	r2, r4
 80136b0:	051b      	lsls	r3, r3, #20
 80136b2:	4313      	orrs	r3, r2
 80136b4:	0019      	movs	r1, r3
 80136b6:	2200      	movs	r2, #0
 80136b8:	4b0c      	ldr	r3, [pc, #48]	; (80136ec <scalbn+0xe4>)
 80136ba:	e7d4      	b.n	8013666 <scalbn+0x5e>
 80136bc:	43500000 	.word	0x43500000
 80136c0:	ffff3cb0 	.word	0xffff3cb0
 80136c4:	c2f8f359 	.word	0xc2f8f359
 80136c8:	01a56e1f 	.word	0x01a56e1f
 80136cc:	000007ff 	.word	0x000007ff
 80136d0:	000007fe 	.word	0x000007fe
 80136d4:	8800759c 	.word	0x8800759c
 80136d8:	7e37e43c 	.word	0x7e37e43c
 80136dc:	fe37e43c 	.word	0xfe37e43c
 80136e0:	800fffff 	.word	0x800fffff
 80136e4:	0000c350 	.word	0x0000c350
 80136e8:	81a56e1f 	.word	0x81a56e1f
 80136ec:	3c900000 	.word	0x3c900000

080136f0 <_init>:
 80136f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f2:	46c0      	nop			; (mov r8, r8)
 80136f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136f6:	bc08      	pop	{r3}
 80136f8:	469e      	mov	lr, r3
 80136fa:	4770      	bx	lr

080136fc <_fini>:
 80136fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fe:	46c0      	nop			; (mov r8, r8)
 8013700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013702:	bc08      	pop	{r3}
 8013704:	469e      	mov	lr, r3
 8013706:	4770      	bx	lr
