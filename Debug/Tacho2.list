
Tacho2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ed8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b18  08012f90  08012f90  00022f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015aa8  08015aa8  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015aa8  08015aa8  00025aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ab0  08015ab0  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ab0  08015ab0  00025ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ab4  08015ab4  00025ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08015ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  200000ec  08015ba4  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  08015ba4  000308ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e6e  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004717  00000000  00000000  00057f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0005c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  0005df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c075  00000000  00000000  0005f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002286e  00000000  00000000  0007b57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c27  00000000  00000000  0009ddeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ea12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006728  00000000  00000000  0013ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000ec 	.word	0x200000ec
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012f78 	.word	0x08012f78

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000f0 	.word	0x200000f0
 80000fc:	08012f78 	.word	0x08012f78

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c10      	adds	r0, r2, #0
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	1c19      	adds	r1, r3, #0
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 fef7 	bl	8002204 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe41 	bl	80020a8 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fee9 	bl	8002204 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fedf 	bl	8002204 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe63 	bl	8002120 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe59 	bl	8002120 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	1c08      	adds	r0, r1, #0
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000486:	f000 fbef 	bl	8000c68 <__lesf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	d401      	bmi.n	8000492 <__aeabi_cfcmpeq+0xe>
 800048e:	2100      	movs	r1, #0
 8000490:	42c8      	cmn	r0, r1
 8000492:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb73 	bl	8000b80 <__eqsf2>
 800049a:	4240      	negs	r0, r0
 800049c:	3001      	adds	r0, #1
 800049e:	bd10      	pop	{r4, pc}

080004a0 <__aeabi_fcmplt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fbe1 	bl	8000c68 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fcmplt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmple>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fbd7 	bl	8000c68 <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dd01      	ble.n	80004c2 <__aeabi_fcmple+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpgt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb81 	bl	8000bd0 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dc01      	bgt.n	80004d6 <__aeabi_fcmpgt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmpge>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb77 	bl	8000bd0 <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	da01      	bge.n	80004ea <__aeabi_fcmpge+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_ldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d113      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	db06      	blt.n	800050a <__aeabi_ldivmod+0x1a>
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_ldivmod+0x12>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d006      	beq.n	8000510 <__aeabi_ldivmod+0x20>
 8000502:	2000      	movs	r0, #0
 8000504:	43c0      	mvns	r0, r0
 8000506:	0841      	lsrs	r1, r0, #1
 8000508:	e002      	b.n	8000510 <__aeabi_ldivmod+0x20>
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0609      	lsls	r1, r1, #24
 800050e:	2000      	movs	r0, #0
 8000510:	b407      	push	{r0, r1, r2}
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <__aeabi_ldivmod+0x2c>)
 8000514:	a101      	add	r1, pc, #4	; (adr r1, 800051c <__aeabi_ldivmod+0x2c>)
 8000516:	1840      	adds	r0, r0, r1
 8000518:	9002      	str	r0, [sp, #8]
 800051a:	bd03      	pop	{r0, r1, pc}
 800051c:	fffffee1 	.word	0xfffffee1
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f864 	bl	80005f4 <__gnu_ldivmod_helper>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			; (mov r8, r8)

08000538 <__aeabi_lmul>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	0415      	lsls	r5, r2, #16
 800053c:	0c2d      	lsrs	r5, r5, #16
 800053e:	000f      	movs	r7, r1
 8000540:	0001      	movs	r1, r0
 8000542:	002e      	movs	r6, r5
 8000544:	46c6      	mov	lr, r8
 8000546:	4684      	mov	ip, r0
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	0c14      	lsrs	r4, r2, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	0c09      	lsrs	r1, r1, #16
 8000550:	4346      	muls	r6, r0
 8000552:	434d      	muls	r5, r1
 8000554:	4360      	muls	r0, r4
 8000556:	4361      	muls	r1, r4
 8000558:	1940      	adds	r0, r0, r5
 800055a:	0c34      	lsrs	r4, r6, #16
 800055c:	1824      	adds	r4, r4, r0
 800055e:	b500      	push	{lr}
 8000560:	42a5      	cmp	r5, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x34>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4680      	mov	r8, r0
 800056a:	4441      	add	r1, r8
 800056c:	0c25      	lsrs	r5, r4, #16
 800056e:	186d      	adds	r5, r5, r1
 8000570:	4661      	mov	r1, ip
 8000572:	4359      	muls	r1, r3
 8000574:	437a      	muls	r2, r7
 8000576:	0430      	lsls	r0, r6, #16
 8000578:	1949      	adds	r1, r1, r5
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	0c00      	lsrs	r0, r0, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	1889      	adds	r1, r1, r2
 8000582:	bc80      	pop	{r7}
 8000584:	46b8      	mov	r8, r7
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000588 <__aeabi_f2uiz>:
 8000588:	219e      	movs	r1, #158	; 0x9e
 800058a:	b510      	push	{r4, lr}
 800058c:	05c9      	lsls	r1, r1, #23
 800058e:	1c04      	adds	r4, r0, #0
 8000590:	f7ff ffa4 	bl	80004dc <__aeabi_fcmpge>
 8000594:	2800      	cmp	r0, #0
 8000596:	d103      	bne.n	80005a0 <__aeabi_f2uiz+0x18>
 8000598:	1c20      	adds	r0, r4, #0
 800059a:	f000 fe91 	bl	80012c0 <__aeabi_f2iz>
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	219e      	movs	r1, #158	; 0x9e
 80005a2:	1c20      	adds	r0, r4, #0
 80005a4:	05c9      	lsls	r1, r1, #23
 80005a6:	f000 fcc3 	bl	8000f30 <__aeabi_fsub>
 80005aa:	f000 fe89 	bl	80012c0 <__aeabi_f2iz>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	469c      	mov	ip, r3
 80005b4:	4460      	add	r0, ip
 80005b6:	e7f2      	b.n	800059e <__aeabi_f2uiz+0x16>

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff51 	bl	8000468 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fca5 	bl	8002f1c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8ee 	bl	80027bc <__aeabi_dsub>
 80005e0:	f002 fc9c 	bl	8002f1c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__gnu_ldivmod_helper>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	46ce      	mov	lr, r9
 80005f8:	4647      	mov	r7, r8
 80005fa:	b580      	push	{r7, lr}
 80005fc:	4691      	mov	r9, r2
 80005fe:	4698      	mov	r8, r3
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	f002 fe04 	bl	8003210 <__divdi3>
 8000608:	0007      	movs	r7, r0
 800060a:	000e      	movs	r6, r1
 800060c:	0002      	movs	r2, r0
 800060e:	000b      	movs	r3, r1
 8000610:	4648      	mov	r0, r9
 8000612:	4641      	mov	r1, r8
 8000614:	f7ff ff90 	bl	8000538 <__aeabi_lmul>
 8000618:	1a24      	subs	r4, r4, r0
 800061a:	418d      	sbcs	r5, r1
 800061c:	9b08      	ldr	r3, [sp, #32]
 800061e:	0038      	movs	r0, r7
 8000620:	0031      	movs	r1, r6
 8000622:	601c      	str	r4, [r3, #0]
 8000624:	605d      	str	r5, [r3, #4]
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fadd>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4646      	mov	r6, r8
 8000634:	46d6      	mov	lr, sl
 8000636:	464f      	mov	r7, r9
 8000638:	024d      	lsls	r5, r1, #9
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	0a52      	lsrs	r2, r2, #9
 8000640:	0a6e      	lsrs	r6, r5, #9
 8000642:	0047      	lsls	r7, r0, #1
 8000644:	46b0      	mov	r8, r6
 8000646:	0e3f      	lsrs	r7, r7, #24
 8000648:	004e      	lsls	r6, r1, #1
 800064a:	0fc4      	lsrs	r4, r0, #31
 800064c:	00d0      	lsls	r0, r2, #3
 800064e:	4694      	mov	ip, r2
 8000650:	003b      	movs	r3, r7
 8000652:	4682      	mov	sl, r0
 8000654:	0e36      	lsrs	r6, r6, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09ad      	lsrs	r5, r5, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d06d      	beq.n	800073a <__aeabi_fadd+0x10a>
 800065e:	1bb8      	subs	r0, r7, r6
 8000660:	4681      	mov	r9, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	dd4d      	ble.n	8000702 <__aeabi_fadd+0xd2>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x3c>
 800066a:	e088      	b.n	800077e <__aeabi_fadd+0x14e>
 800066c:	2fff      	cmp	r7, #255	; 0xff
 800066e:	d05a      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	04db      	lsls	r3, r3, #19
 8000674:	431d      	orrs	r5, r3
 8000676:	464b      	mov	r3, r9
 8000678:	2201      	movs	r2, #1
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dc0a      	bgt.n	8000694 <__aeabi_fadd+0x64>
 800067e:	002b      	movs	r3, r5
 8000680:	464a      	mov	r2, r9
 8000682:	4649      	mov	r1, r9
 8000684:	40d3      	lsrs	r3, r2
 8000686:	2220      	movs	r2, #32
 8000688:	1a52      	subs	r2, r2, r1
 800068a:	4095      	lsls	r5, r2
 800068c:	002a      	movs	r2, r5
 800068e:	1e55      	subs	r5, r2, #1
 8000690:	41aa      	sbcs	r2, r5
 8000692:	431a      	orrs	r2, r3
 8000694:	4653      	mov	r3, sl
 8000696:	1a9a      	subs	r2, r3, r2
 8000698:	0153      	lsls	r3, r2, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x6e>
 800069c:	e0b9      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	0996      	lsrs	r6, r2, #6
 80006a2:	0030      	movs	r0, r6
 80006a4:	f002 fd96 	bl	80031d4 <__clzsi2>
 80006a8:	3805      	subs	r0, #5
 80006aa:	4086      	lsls	r6, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_fadd+0x82>
 80006b0:	e0d4      	b.n	800085c <__aeabi_fadd+0x22c>
 80006b2:	0033      	movs	r3, r6
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	2020      	movs	r0, #32
 80006b8:	3701      	adds	r7, #1
 80006ba:	40fb      	lsrs	r3, r7
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1e56      	subs	r6, r2, #1
 80006c4:	41b2      	sbcs	r2, r6
 80006c6:	2700      	movs	r7, #0
 80006c8:	431a      	orrs	r2, r3
 80006ca:	0753      	lsls	r3, r2, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006ce:	230f      	movs	r3, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fadd+0xae>
 80006dc:	e09c      	b.n	8000818 <__aeabi_fadd+0x1e8>
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	2ffe      	cmp	r7, #254	; 0xfe
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xb6>
 80006e4:	e09a      	b.n	800081c <__aeabi_fadd+0x1ec>
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	4694      	mov	ip, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	05d8      	lsls	r0, r3, #23
 80006f0:	4663      	mov	r3, ip
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4318      	orrs	r0, r3
 80006f6:	4320      	orrs	r0, r4
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	2800      	cmp	r0, #0
 8000704:	d049      	beq.n	800079a <__aeabi_fadd+0x16a>
 8000706:	1bf3      	subs	r3, r6, r7
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fadd+0x24c>
 800070e:	4652      	mov	r2, sl
 8000710:	2a00      	cmp	r2, #0
 8000712:	d060      	beq.n	80007d6 <__aeabi_fadd+0x1a6>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0xec>
 800071a:	e0fc      	b.n	8000916 <__aeabi_fadd+0x2e6>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xf2>
 8000720:	e0b4      	b.n	800088c <__aeabi_fadd+0x25c>
 8000722:	000c      	movs	r4, r1
 8000724:	4642      	mov	r2, r8
 8000726:	2a00      	cmp	r2, #0
 8000728:	d078      	beq.n	800081c <__aeabi_fadd+0x1ec>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4310      	orrs	r0, r2
 8000730:	0242      	lsls	r2, r0, #9
 8000732:	0a53      	lsrs	r3, r2, #9
 8000734:	469c      	mov	ip, r3
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	e7d9      	b.n	80006ee <__aeabi_fadd+0xbe>
 800073a:	1bb9      	subs	r1, r7, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	dd71      	ble.n	8000824 <__aeabi_fadd+0x1f4>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d03f      	beq.n	80007c4 <__aeabi_fadd+0x194>
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d0ee      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2201      	movs	r2, #1
 8000750:	291b      	cmp	r1, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x134>
 8000754:	002a      	movs	r2, r5
 8000756:	2320      	movs	r3, #32
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	408d      	lsls	r5, r1
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	432a      	orrs	r2, r5
 8000764:	4452      	add	r2, sl
 8000766:	0153      	lsls	r3, r2, #5
 8000768:	d553      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800076a:	3701      	adds	r7, #1
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d055      	beq.n	800081c <__aeabi_fadd+0x1ec>
 8000770:	2301      	movs	r3, #1
 8000772:	497b      	ldr	r1, [pc, #492]	; (8000960 <__aeabi_fadd+0x330>)
 8000774:	4013      	ands	r3, r2
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	e7a5      	b.n	80006ca <__aeabi_fadd+0x9a>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d02c      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	469c      	mov	ip, r3
 8000788:	44e1      	add	r9, ip
 800078a:	464b      	mov	r3, r9
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x162>
 8000790:	e0ad      	b.n	80008ee <__aeabi_fadd+0x2be>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x168>
 8000796:	e76e      	b.n	8000676 <__aeabi_fadd+0x46>
 8000798:	e7c5      	b.n	8000726 <__aeabi_fadd+0xf6>
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c7e      	adds	r6, r7, #1
 800079e:	4230      	tst	r0, r6
 80007a0:	d160      	bne.n	8000864 <__aeabi_fadd+0x234>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x178>
 80007a6:	e093      	b.n	80008d0 <__aeabi_fadd+0x2a0>
 80007a8:	4652      	mov	r2, sl
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x180>
 80007ae:	e0b6      	b.n	800091e <__aeabi_fadd+0x2ee>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d09c      	beq.n	80006ee <__aeabi_fadd+0xbe>
 80007b4:	1b52      	subs	r2, r2, r5
 80007b6:	0150      	lsls	r0, r2, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x18c>
 80007ba:	e0c3      	b.n	8000944 <__aeabi_fadd+0x314>
 80007bc:	4653      	mov	r3, sl
 80007be:	000c      	movs	r4, r1
 80007c0:	1aea      	subs	r2, r5, r3
 80007c2:	e782      	b.n	80006ca <__aeabi_fadd+0x9a>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d009      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 80007c8:	3901      	subs	r1, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x1a0>
 80007ce:	e08b      	b.n	80008e8 <__aeabi_fadd+0x2b8>
 80007d0:	2fff      	cmp	r7, #255	; 0xff
 80007d2:	d1bc      	bne.n	800074e <__aeabi_fadd+0x11e>
 80007d4:	e7a7      	b.n	8000726 <__aeabi_fadd+0xf6>
 80007d6:	000c      	movs	r4, r1
 80007d8:	4642      	mov	r2, r8
 80007da:	0037      	movs	r7, r6
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d0a2      	beq.n	8000726 <__aeabi_fadd+0xf6>
 80007e0:	0252      	lsls	r2, r2, #9
 80007e2:	0a53      	lsrs	r3, r2, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2fb      	uxtb	r3, r7
 80007e8:	e781      	b.n	80006ee <__aeabi_fadd+0xbe>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	3701      	adds	r7, #1
 80007ee:	4239      	tst	r1, r7
 80007f0:	d165      	bne.n	80008be <__aeabi_fadd+0x28e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17e      	bne.n	80008f4 <__aeabi_fadd+0x2c4>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1cc>
 80007fa:	e0aa      	b.n	8000952 <__aeabi_fadd+0x322>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x1d2>
 8000800:	e775      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000802:	002a      	movs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	2700      	movs	r7, #0
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d502      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <__aeabi_fadd+0x334>)
 800080e:	3701      	adds	r7, #1
 8000810:	401a      	ands	r2, r3
 8000812:	0753      	lsls	r3, r2, #29
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x1e8>
 8000816:	e75a      	b.n	80006ce <__aeabi_fadd+0x9e>
 8000818:	08d2      	lsrs	r2, r2, #3
 800081a:	e7df      	b.n	80007dc <__aeabi_fadd+0x1ac>
 800081c:	2200      	movs	r2, #0
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	4694      	mov	ip, r2
 8000822:	e764      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000824:	2900      	cmp	r1, #0
 8000826:	d0e0      	beq.n	80007ea <__aeabi_fadd+0x1ba>
 8000828:	1bf3      	subs	r3, r6, r7
 800082a:	2f00      	cmp	r7, #0
 800082c:	d03e      	beq.n	80008ac <__aeabi_fadd+0x27c>
 800082e:	2eff      	cmp	r6, #255	; 0xff
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x204>
 8000832:	e777      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0001      	movs	r1, r0
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4311      	orrs	r1, r2
 800083c:	468a      	mov	sl, r1
 800083e:	2201      	movs	r2, #1
 8000840:	2b1b      	cmp	r3, #27
 8000842:	dc08      	bgt.n	8000856 <__aeabi_fadd+0x226>
 8000844:	4652      	mov	r2, sl
 8000846:	2120      	movs	r1, #32
 8000848:	4650      	mov	r0, sl
 800084a:	40da      	lsrs	r2, r3
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	4098      	lsls	r0, r3
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4302      	orrs	r2, r0
 8000856:	0037      	movs	r7, r6
 8000858:	1952      	adds	r2, r2, r5
 800085a:	e784      	b.n	8000766 <__aeabi_fadd+0x136>
 800085c:	4a41      	ldr	r2, [pc, #260]	; (8000964 <__aeabi_fadd+0x334>)
 800085e:	1a3f      	subs	r7, r7, r0
 8000860:	4032      	ands	r2, r6
 8000862:	e732      	b.n	80006ca <__aeabi_fadd+0x9a>
 8000864:	4653      	mov	r3, sl
 8000866:	1b5e      	subs	r6, r3, r5
 8000868:	0173      	lsls	r3, r6, #5
 800086a:	d42d      	bmi.n	80008c8 <__aeabi_fadd+0x298>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fadd+0x242>
 8000870:	e717      	b.n	80006a2 <__aeabi_fadd+0x72>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	2300      	movs	r3, #0
 8000878:	4694      	mov	ip, r2
 800087a:	e738      	b.n	80006ee <__aeabi_fadd+0xbe>
 800087c:	2eff      	cmp	r6, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x252>
 8000880:	e74f      	b.n	8000722 <__aeabi_fadd+0xf2>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4650      	mov	r0, sl
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	4310      	orrs	r0, r2
 800088a:	4682      	mov	sl, r0
 800088c:	2201      	movs	r2, #1
 800088e:	2b1b      	cmp	r3, #27
 8000890:	dc08      	bgt.n	80008a4 <__aeabi_fadd+0x274>
 8000892:	4652      	mov	r2, sl
 8000894:	2420      	movs	r4, #32
 8000896:	4650      	mov	r0, sl
 8000898:	40da      	lsrs	r2, r3
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	4098      	lsls	r0, r3
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4302      	orrs	r2, r0
 80008a4:	000c      	movs	r4, r1
 80008a6:	0037      	movs	r7, r6
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	e6f5      	b.n	8000698 <__aeabi_fadd+0x68>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d093      	beq.n	80007d8 <__aeabi_fadd+0x1a8>
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04f      	beq.n	8000956 <__aeabi_fadd+0x326>
 80008b6:	2eff      	cmp	r6, #255	; 0xff
 80008b8:	d1c1      	bne.n	800083e <__aeabi_fadd+0x20e>
 80008ba:	4642      	mov	r2, r8
 80008bc:	e733      	b.n	8000726 <__aeabi_fadd+0xf6>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d0ac      	beq.n	800081c <__aeabi_fadd+0x1ec>
 80008c2:	4455      	add	r5, sl
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	e7a4      	b.n	8000812 <__aeabi_fadd+0x1e2>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aee      	subs	r6, r5, r3
 80008ce:	e6e8      	b.n	80006a2 <__aeabi_fadd+0x72>
 80008d0:	4653      	mov	r3, sl
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d128      	bne.n	8000928 <__aeabi_fadd+0x2f8>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x2ac>
 80008da:	e722      	b.n	8000722 <__aeabi_fadd+0xf2>
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	469c      	mov	ip, r3
 80008e2:	2400      	movs	r4, #0
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	e702      	b.n	80006ee <__aeabi_fadd+0xbe>
 80008e8:	002a      	movs	r2, r5
 80008ea:	4452      	add	r2, sl
 80008ec:	e73b      	b.n	8000766 <__aeabi_fadd+0x136>
 80008ee:	4653      	mov	r3, sl
 80008f0:	1b5a      	subs	r2, r3, r5
 80008f2:	e6d1      	b.n	8000698 <__aeabi_fadd+0x68>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x2ca>
 80008f8:	e714      	b.n	8000724 <__aeabi_fadd+0xf4>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2d0>
 80008fe:	e712      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	03db      	lsls	r3, r3, #15
 8000904:	421a      	tst	r2, r3
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x2da>
 8000908:	e70d      	b.n	8000726 <__aeabi_fadd+0xf6>
 800090a:	4641      	mov	r1, r8
 800090c:	4219      	tst	r1, r3
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x2e2>
 8000910:	e709      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000912:	4642      	mov	r2, r8
 8000914:	e707      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000916:	000c      	movs	r4, r1
 8000918:	0037      	movs	r7, r6
 800091a:	1aaa      	subs	r2, r5, r2
 800091c:	e6bc      	b.n	8000698 <__aeabi_fadd+0x68>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d013      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000922:	000c      	movs	r4, r1
 8000924:	46c4      	mov	ip, r8
 8000926:	e6e2      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2fe>
 800092c:	e6fb      	b.n	8000726 <__aeabi_fadd+0xf6>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	03db      	lsls	r3, r3, #15
 8000932:	421a      	tst	r2, r3
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x308>
 8000936:	e6f6      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000938:	4640      	mov	r0, r8
 800093a:	4218      	tst	r0, r3
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x310>
 800093e:	e6f2      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000940:	000c      	movs	r4, r1
 8000942:	e6ef      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000944:	2a00      	cmp	r2, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000948:	e763      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	4694      	mov	ip, r2
 8000950:	e6cd      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000952:	46c4      	mov	ip, r8
 8000954:	e6cb      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000956:	002a      	movs	r2, r5
 8000958:	0037      	movs	r7, r6
 800095a:	4452      	add	r2, sl
 800095c:	e703      	b.n	8000766 <__aeabi_fadd+0x136>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fdiv>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	464f      	mov	r7, r9
 800096c:	4646      	mov	r6, r8
 800096e:	46d6      	mov	lr, sl
 8000970:	0245      	lsls	r5, r0, #9
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	0047      	lsls	r7, r0, #1
 8000976:	1c0c      	adds	r4, r1, #0
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e3f      	lsrs	r7, r7, #24
 800097c:	0fc6      	lsrs	r6, r0, #31
 800097e:	2f00      	cmp	r7, #0
 8000980:	d066      	beq.n	8000a50 <__aeabi_fdiv+0xe8>
 8000982:	2fff      	cmp	r7, #255	; 0xff
 8000984:	d06c      	beq.n	8000a60 <__aeabi_fdiv+0xf8>
 8000986:	2300      	movs	r3, #0
 8000988:	00ea      	lsls	r2, r5, #3
 800098a:	2580      	movs	r5, #128	; 0x80
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	04ed      	lsls	r5, r5, #19
 8000992:	4315      	orrs	r5, r2
 8000994:	3f7f      	subs	r7, #127	; 0x7f
 8000996:	0260      	lsls	r0, r4, #9
 8000998:	0061      	lsls	r1, r4, #1
 800099a:	0a43      	lsrs	r3, r0, #9
 800099c:	4698      	mov	r8, r3
 800099e:	0e09      	lsrs	r1, r1, #24
 80009a0:	0fe4      	lsrs	r4, r4, #31
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d048      	beq.n	8000a38 <__aeabi_fdiv+0xd0>
 80009a6:	29ff      	cmp	r1, #255	; 0xff
 80009a8:	d010      	beq.n	80009cc <__aeabi_fdiv+0x64>
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	00d8      	lsls	r0, r3, #3
 80009ae:	04d2      	lsls	r2, r2, #19
 80009b0:	4302      	orrs	r2, r0
 80009b2:	4690      	mov	r8, r2
 80009b4:	2000      	movs	r0, #0
 80009b6:	397f      	subs	r1, #127	; 0x7f
 80009b8:	464a      	mov	r2, r9
 80009ba:	0033      	movs	r3, r6
 80009bc:	1a7f      	subs	r7, r7, r1
 80009be:	4302      	orrs	r2, r0
 80009c0:	496c      	ldr	r1, [pc, #432]	; (8000b74 <__aeabi_fdiv+0x20c>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	588a      	ldr	r2, [r1, r2]
 80009c6:	4063      	eors	r3, r4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4697      	mov	pc, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d16d      	bne.n	8000aac <__aeabi_fdiv+0x144>
 80009d0:	2002      	movs	r0, #2
 80009d2:	3fff      	subs	r7, #255	; 0xff
 80009d4:	e033      	b.n	8000a3e <__aeabi_fdiv+0xd6>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4698      	mov	r8, r3
 80009da:	0026      	movs	r6, r4
 80009dc:	4645      	mov	r5, r8
 80009de:	4682      	mov	sl, r0
 80009e0:	4653      	mov	r3, sl
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fdiv+0x80>
 80009e6:	e07f      	b.n	8000ae8 <__aeabi_fdiv+0x180>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d100      	bne.n	80009ee <__aeabi_fdiv+0x86>
 80009ec:	e094      	b.n	8000b18 <__aeabi_fdiv+0x1b0>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d017      	beq.n	8000a22 <__aeabi_fdiv+0xba>
 80009f2:	0038      	movs	r0, r7
 80009f4:	307f      	adds	r0, #127	; 0x7f
 80009f6:	2800      	cmp	r0, #0
 80009f8:	dd5f      	ble.n	8000aba <__aeabi_fdiv+0x152>
 80009fa:	076b      	lsls	r3, r5, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 80009fe:	230f      	movs	r3, #15
 8000a00:	402b      	ands	r3, r5
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 8000a06:	3504      	adds	r5, #4
 8000a08:	012b      	lsls	r3, r5, #4
 8000a0a:	d503      	bpl.n	8000a14 <__aeabi_fdiv+0xac>
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <__aeabi_fdiv+0x210>)
 8000a10:	3080      	adds	r0, #128	; 0x80
 8000a12:	401d      	ands	r5, r3
 8000a14:	28fe      	cmp	r0, #254	; 0xfe
 8000a16:	dc67      	bgt.n	8000ae8 <__aeabi_fdiv+0x180>
 8000a18:	01ad      	lsls	r5, r5, #6
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	b2c0      	uxtb	r0, r0
 8000a1e:	e002      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a20:	001e      	movs	r6, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	2500      	movs	r5, #0
 8000a26:	05c0      	lsls	r0, r0, #23
 8000a28:	4328      	orrs	r0, r5
 8000a2a:	07f6      	lsls	r6, r6, #31
 8000a2c:	4330      	orrs	r0, r6
 8000a2e:	bce0      	pop	{r5, r6, r7}
 8000a30:	46ba      	mov	sl, r7
 8000a32:	46b1      	mov	r9, r6
 8000a34:	46a8      	mov	r8, r5
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <__aeabi_fdiv+0x12c>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	464a      	mov	r2, r9
 8000a40:	0033      	movs	r3, r6
 8000a42:	494e      	ldr	r1, [pc, #312]	; (8000b7c <__aeabi_fdiv+0x214>)
 8000a44:	4302      	orrs	r2, r0
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	588a      	ldr	r2, [r1, r2]
 8000a4a:	4063      	eors	r3, r4
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4697      	mov	pc, r2
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d113      	bne.n	8000a7c <__aeabi_fdiv+0x114>
 8000a54:	2304      	movs	r3, #4
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e79a      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d105      	bne.n	8000a70 <__aeabi_fdiv+0x108>
 8000a64:	2308      	movs	r3, #8
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e792      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a70:	230c      	movs	r3, #12
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b09      	subs	r3, #9
 8000a76:	27ff      	movs	r7, #255	; 0xff
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e78c      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	f002 fba9 	bl	80031d4 <__clzsi2>
 8000a82:	2776      	movs	r7, #118	; 0x76
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409d      	lsls	r5, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	427f      	negs	r7, r7
 8000a8c:	4699      	mov	r9, r3
 8000a8e:	469a      	mov	sl, r3
 8000a90:	1a3f      	subs	r7, r7, r0
 8000a92:	e780      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fb9d 	bl	80031d4 <__clzsi2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	1f43      	subs	r3, r0, #5
 8000a9e:	2176      	movs	r1, #118	; 0x76
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	4690      	mov	r8, r2
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e785      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000aac:	21ff      	movs	r1, #255	; 0xff
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	20ff      	movs	r0, #255	; 0xff
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	e7b5      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aba:	2301      	movs	r3, #1
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	dcaf      	bgt.n	8000a22 <__aeabi_fdiv+0xba>
 8000ac2:	379e      	adds	r7, #158	; 0x9e
 8000ac4:	0029      	movs	r1, r5
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	1e6a      	subs	r2, r5, #1
 8000acc:	4195      	sbcs	r5, r2
 8000ace:	430d      	orrs	r5, r1
 8000ad0:	076b      	lsls	r3, r5, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	402b      	ands	r3, r5
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000adc:	3504      	adds	r5, #4
 8000ade:	016b      	lsls	r3, r5, #5
 8000ae0:	d544      	bpl.n	8000b6c <__aeabi_fdiv+0x204>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e79e      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	2500      	movs	r5, #0
 8000aec:	e79b      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aee:	2580      	movs	r5, #128	; 0x80
 8000af0:	2600      	movs	r6, #0
 8000af2:	20ff      	movs	r0, #255	; 0xff
 8000af4:	03ed      	lsls	r5, r5, #15
 8000af6:	e796      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000af8:	2300      	movs	r3, #0
 8000afa:	4698      	mov	r8, r3
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	03c0      	lsls	r0, r0, #15
 8000b00:	4205      	tst	r5, r0
 8000b02:	d009      	beq.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b04:	4643      	mov	r3, r8
 8000b06:	4203      	tst	r3, r0
 8000b08:	d106      	bne.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	4305      	orrs	r5, r0
 8000b0e:	026d      	lsls	r5, r5, #9
 8000b10:	0026      	movs	r6, r4
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e786      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b18:	2080      	movs	r0, #128	; 0x80
 8000b1a:	03c0      	lsls	r0, r0, #15
 8000b1c:	4305      	orrs	r5, r0
 8000b1e:	026d      	lsls	r5, r5, #9
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	0a6d      	lsrs	r5, r5, #9
 8000b24:	e77f      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b26:	4641      	mov	r1, r8
 8000b28:	016a      	lsls	r2, r5, #5
 8000b2a:	0148      	lsls	r0, r1, #5
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	d219      	bcs.n	8000b64 <__aeabi_fdiv+0x1fc>
 8000b30:	211b      	movs	r1, #27
 8000b32:	2500      	movs	r5, #0
 8000b34:	3f01      	subs	r7, #1
 8000b36:	2601      	movs	r6, #1
 8000b38:	0014      	movs	r4, r2
 8000b3a:	006d      	lsls	r5, r5, #1
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	db01      	blt.n	8000b46 <__aeabi_fdiv+0x1de>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d801      	bhi.n	8000b4a <__aeabi_fdiv+0x1e2>
 8000b46:	1a12      	subs	r2, r2, r0
 8000b48:	4335      	orrs	r5, r6
 8000b4a:	3901      	subs	r1, #1
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d1f3      	bne.n	8000b38 <__aeabi_fdiv+0x1d0>
 8000b50:	1e50      	subs	r0, r2, #1
 8000b52:	4182      	sbcs	r2, r0
 8000b54:	0038      	movs	r0, r7
 8000b56:	307f      	adds	r0, #127	; 0x7f
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4315      	orrs	r5, r2
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_fdiv+0x1fa>
 8000b60:	e74b      	b.n	80009fa <__aeabi_fdiv+0x92>
 8000b62:	e7aa      	b.n	8000aba <__aeabi_fdiv+0x152>
 8000b64:	211a      	movs	r1, #26
 8000b66:	2501      	movs	r5, #1
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	e7e4      	b.n	8000b36 <__aeabi_fdiv+0x1ce>
 8000b6c:	01ad      	lsls	r5, r5, #6
 8000b6e:	2000      	movs	r0, #0
 8000b70:	0a6d      	lsrs	r5, r5, #9
 8000b72:	e758      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b74:	0801343c 	.word	0x0801343c
 8000b78:	f7ffffff 	.word	0xf7ffffff
 8000b7c:	0801347c 	.word	0x0801347c

08000b80 <__eqsf2>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	024e      	lsls	r6, r1, #9
 8000b86:	004c      	lsls	r4, r1, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__eqsf2+0x3a>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d011      	beq.n	8000bc2 <__eqsf2+0x42>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	d000      	beq.n	8000ba6 <__eqsf2+0x26>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x24>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d00d      	beq.n	8000bca <__eqsf2+0x4a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1e45      	subs	r5, r0, #1
 8000bb6:	41a8      	sbcs	r0, r5
 8000bb8:	e7f4      	b.n	8000ba4 <__eqsf2+0x24>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc0:	e7eb      	b.n	8000b9a <__eqsf2+0x1a>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc8:	e7e9      	b.n	8000b9e <__eqsf2+0x1e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__eqsf2+0x24>
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__gesf2>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0246      	lsls	r6, r0, #9
 8000bd6:	024d      	lsls	r5, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01f      	beq.n	8000c2a <__gesf2+0x5a>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d010      	beq.n	8000c10 <__gesf2+0x40>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11f      	bne.n	8000c32 <__gesf2+0x62>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d101      	bne.n	8000bfe <__gesf2+0x2e>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d01e      	beq.n	8000c3c <__gesf2+0x6c>
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d10e      	bne.n	8000c20 <__gesf2+0x50>
 8000c02:	4283      	cmp	r3, r0
 8000c04:	d01e      	beq.n	8000c44 <__gesf2+0x74>
 8000c06:	2102      	movs	r1, #2
 8000c08:	1e58      	subs	r0, r3, #1
 8000c0a:	4008      	ands	r0, r1
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d126      	bne.n	8000c62 <__gesf2+0x92>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f4      	bne.n	8000c02 <__gesf2+0x32>
 8000c18:	4271      	negs	r1, r6
 8000c1a:	4171      	adcs	r1, r6
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d0f0      	beq.n	8000c02 <__gesf2+0x32>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f4      	bne.n	8000c0e <__gesf2+0x3e>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f1      	b.n	8000c0e <__gesf2+0x3e>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d119      	bne.n	8000c62 <__gesf2+0x92>
 8000c2e:	2cff      	cmp	r4, #255	; 0xff
 8000c30:	d0ee      	beq.n	8000c10 <__gesf2+0x40>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d1e5      	bne.n	8000c02 <__gesf2+0x32>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d1e3      	bne.n	8000c02 <__gesf2+0x32>
 8000c3a:	e7e4      	b.n	8000c06 <__gesf2+0x36>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0e5      	beq.n	8000c0e <__gesf2+0x3e>
 8000c42:	e7e0      	b.n	8000c06 <__gesf2+0x36>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__gesf2+0x84>
 8000c48:	dbea      	blt.n	8000c20 <__gesf2+0x50>
 8000c4a:	42ae      	cmp	r6, r5
 8000c4c:	d802      	bhi.n	8000c54 <__gesf2+0x84>
 8000c4e:	d3e7      	bcc.n	8000c20 <__gesf2+0x50>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7dc      	b.n	8000c0e <__gesf2+0x3e>
 8000c54:	4241      	negs	r1, r0
 8000c56:	4141      	adcs	r1, r0
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4008      	ands	r0, r1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7d5      	b.n	8000c0e <__gesf2+0x3e>
 8000c62:	2002      	movs	r0, #2
 8000c64:	4240      	negs	r0, r0
 8000c66:	e7d2      	b.n	8000c0e <__gesf2+0x3e>

08000c68 <__lesf2>:
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	0246      	lsls	r6, r0, #9
 8000c6e:	024d      	lsls	r5, r1, #9
 8000c70:	004c      	lsls	r4, r1, #1
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	0a6d      	lsrs	r5, r5, #9
 8000c7a:	0e24      	lsrs	r4, r4, #24
 8000c7c:	0fc8      	lsrs	r0, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	; 0xff
 8000c80:	d00d      	beq.n	8000c9e <__lesf2+0x36>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d00f      	beq.n	8000ca6 <__lesf2+0x3e>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d123      	bne.n	8000cd2 <__lesf2+0x6a>
 8000c8a:	4271      	negs	r1, r6
 8000c8c:	4171      	adcs	r1, r6
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d10f      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d10d      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c96:	2000      	movs	r0, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d014      	beq.n	8000cc6 <__lesf2+0x5e>
 8000c9c:	e00d      	b.n	8000cba <__lesf2+0x52>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d110      	bne.n	8000cc4 <__lesf2+0x5c>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d115      	bne.n	8000cd2 <__lesf2+0x6a>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d10c      	bne.n	8000cc4 <__lesf2+0x5c>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d103      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cae:	4271      	negs	r1, r6
 8000cb0:	4171      	adcs	r1, r6
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d108      	bne.n	8000cc8 <__lesf2+0x60>
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	d010      	beq.n	8000cdc <__lesf2+0x74>
 8000cba:	2102      	movs	r1, #2
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	4008      	ands	r0, r1
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e000      	b.n	8000cc6 <__lesf2+0x5e>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d1fc      	bne.n	8000cc6 <__lesf2+0x5e>
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4240      	negs	r0, r0
 8000cd0:	e7f9      	b.n	8000cc6 <__lesf2+0x5e>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d1ef      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d1ed      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cda:	e7ee      	b.n	8000cba <__lesf2+0x52>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	dc05      	bgt.n	8000cec <__lesf2+0x84>
 8000ce0:	dbf2      	blt.n	8000cc8 <__lesf2+0x60>
 8000ce2:	42ae      	cmp	r6, r5
 8000ce4:	d802      	bhi.n	8000cec <__lesf2+0x84>
 8000ce6:	d3ef      	bcc.n	8000cc8 <__lesf2+0x60>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7ec      	b.n	8000cc6 <__lesf2+0x5e>
 8000cec:	4241      	negs	r1, r0
 8000cee:	4141      	adcs	r1, r0
 8000cf0:	4248      	negs	r0, r1
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4008      	ands	r0, r1
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	e7e5      	b.n	8000cc6 <__lesf2+0x5e>
 8000cfa:	46c0      	nop			; (mov r8, r8)

08000cfc <__aeabi_fmul>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	0244      	lsls	r4, r0, #9
 8000d08:	b5e0      	push	{r5, r6, r7, lr}
 8000d0a:	0045      	lsls	r5, r0, #1
 8000d0c:	1c0f      	adds	r7, r1, #0
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	0e2d      	lsrs	r5, r5, #24
 8000d12:	0fc6      	lsrs	r6, r0, #31
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d047      	beq.n	8000da8 <__aeabi_fmul+0xac>
 8000d18:	2dff      	cmp	r5, #255	; 0xff
 8000d1a:	d04d      	beq.n	8000db8 <__aeabi_fmul+0xbc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	469a      	mov	sl, r3
 8000d22:	469b      	mov	fp, r3
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	04c0      	lsls	r0, r0, #19
 8000d28:	4304      	orrs	r4, r0
 8000d2a:	3d7f      	subs	r5, #127	; 0x7f
 8000d2c:	0278      	lsls	r0, r7, #9
 8000d2e:	0a43      	lsrs	r3, r0, #9
 8000d30:	4699      	mov	r9, r3
 8000d32:	007a      	lsls	r2, r7, #1
 8000d34:	0ffb      	lsrs	r3, r7, #31
 8000d36:	4698      	mov	r8, r3
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	d044      	beq.n	8000dc8 <__aeabi_fmul+0xcc>
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d011      	beq.n	8000d66 <__aeabi_fmul+0x6a>
 8000d42:	00d8      	lsls	r0, r3, #3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	04db      	lsls	r3, r3, #19
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	18ad      	adds	r5, r5, r2
 8000d52:	4647      	mov	r7, r8
 8000d54:	4653      	mov	r3, sl
 8000d56:	4077      	eors	r7, r6
 8000d58:	1c69      	adds	r1, r5, #1
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d83f      	bhi.n	8000dde <__aeabi_fmul+0xe2>
 8000d5e:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <__aeabi_fmul+0x22c>)
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	58d3      	ldr	r3, [r2, r3]
 8000d64:	469f      	mov	pc, r3
 8000d66:	35ff      	adds	r5, #255	; 0xff
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x72>
 8000d6c:	e079      	b.n	8000e62 <__aeabi_fmul+0x166>
 8000d6e:	4652      	mov	r2, sl
 8000d70:	2302      	movs	r3, #2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	4692      	mov	sl, r2
 8000d76:	2002      	movs	r0, #2
 8000d78:	e7eb      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	4683      	mov	fp, r0
 8000d80:	465b      	mov	r3, fp
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d028      	beq.n	8000dd8 <__aeabi_fmul+0xdc>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x90>
 8000d8a:	e0c6      	b.n	8000f1a <__aeabi_fmul+0x21e>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d14f      	bne.n	8000e30 <__aeabi_fmul+0x134>
 8000d90:	2000      	movs	r0, #0
 8000d92:	2400      	movs	r4, #0
 8000d94:	05c0      	lsls	r0, r0, #23
 8000d96:	07ff      	lsls	r7, r7, #31
 8000d98:	4320      	orrs	r0, r4
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9e:	46bb      	mov	fp, r7
 8000da0:	46b2      	mov	sl, r6
 8000da2:	46a9      	mov	r9, r5
 8000da4:	46a0      	mov	r8, r4
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d171      	bne.n	8000e90 <__aeabi_fmul+0x194>
 8000dac:	2304      	movs	r3, #4
 8000dae:	469a      	mov	sl, r3
 8000db0:	3b03      	subs	r3, #3
 8000db2:	2500      	movs	r5, #0
 8000db4:	469b      	mov	fp, r3
 8000db6:	e7b9      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d163      	bne.n	8000e84 <__aeabi_fmul+0x188>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	3b06      	subs	r3, #6
 8000dc2:	25ff      	movs	r5, #255	; 0xff
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e7b1      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d150      	bne.n	8000e6e <__aeabi_fmul+0x172>
 8000dcc:	4652      	mov	r2, sl
 8000dce:	3301      	adds	r3, #1
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7bc      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	2400      	movs	r4, #0
 8000ddc:	e7da      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000dde:	4648      	mov	r0, r9
 8000de0:	0c26      	lsrs	r6, r4, #16
 8000de2:	0424      	lsls	r4, r4, #16
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	0404      	lsls	r4, r0, #16
 8000de8:	0c24      	lsrs	r4, r4, #16
 8000dea:	464b      	mov	r3, r9
 8000dec:	0020      	movs	r0, r4
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4350      	muls	r0, r2
 8000df2:	4374      	muls	r4, r6
 8000df4:	435a      	muls	r2, r3
 8000df6:	435e      	muls	r6, r3
 8000df8:	1912      	adds	r2, r2, r4
 8000dfa:	0c03      	lsrs	r3, r0, #16
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	d903      	bls.n	8000e0a <__aeabi_fmul+0x10e>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0252      	lsls	r2, r2, #9
 8000e06:	4694      	mov	ip, r2
 8000e08:	4466      	add	r6, ip
 8000e0a:	0400      	lsls	r0, r0, #16
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	0c00      	lsrs	r0, r0, #16
 8000e10:	1812      	adds	r2, r2, r0
 8000e12:	0194      	lsls	r4, r2, #6
 8000e14:	1e60      	subs	r0, r4, #1
 8000e16:	4184      	sbcs	r4, r0
 8000e18:	0c1b      	lsrs	r3, r3, #16
 8000e1a:	0e92      	lsrs	r2, r2, #26
 8000e1c:	199b      	adds	r3, r3, r6
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	d572      	bpl.n	8000f0e <__aeabi_fmul+0x212>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	0863      	lsrs	r3, r4, #1
 8000e2c:	4004      	ands	r4, r0
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0008      	movs	r0, r1
 8000e32:	307f      	adds	r0, #127	; 0x7f
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dd3c      	ble.n	8000eb2 <__aeabi_fmul+0x1b6>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x156>
 8000e4a:	3180      	adds	r1, #128	; 0x80
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <__aeabi_fmul+0x230>)
 8000e50:	401c      	ands	r4, r3
 8000e52:	28fe      	cmp	r0, #254	; 0xfe
 8000e54:	dcc0      	bgt.n	8000dd8 <__aeabi_fmul+0xdc>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2c0      	uxtb	r0, r0
 8000e5c:	e79a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000e5e:	0037      	movs	r7, r6
 8000e60:	e78e      	b.n	8000d80 <__aeabi_fmul+0x84>
 8000e62:	4652      	mov	r2, sl
 8000e64:	2303      	movs	r3, #3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	4692      	mov	sl, r2
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e771      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e6e:	4648      	mov	r0, r9
 8000e70:	f002 f9b0 	bl	80031d4 <__clzsi2>
 8000e74:	464a      	mov	r2, r9
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	1a2d      	subs	r5, r5, r0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	2000      	movs	r0, #0
 8000e80:	3d76      	subs	r5, #118	; 0x76
 8000e82:	e766      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e84:	230c      	movs	r3, #12
 8000e86:	469a      	mov	sl, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f002 f99f 	bl	80031d4 <__clzsi2>
 8000e96:	2576      	movs	r5, #118	; 0x76
 8000e98:	1f43      	subs	r3, r0, #5
 8000e9a:	409c      	lsls	r4, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	1a2d      	subs	r5, r5, r0
 8000ea6:	e741      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	2700      	movs	r7, #0
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	03e4      	lsls	r4, r4, #15
 8000eb0:	e770      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	1a1b      	subs	r3, r3, r0
 8000eb6:	2b1b      	cmp	r3, #27
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_fmul+0x1c0>
 8000eba:	e769      	b.n	8000d90 <__aeabi_fmul+0x94>
 8000ebc:	319e      	adds	r1, #158	; 0x9e
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	0763      	lsls	r3, r4, #29
 8000ecc:	d004      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ece:	230f      	movs	r3, #15
 8000ed0:	4023      	ands	r3, r4
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ed6:	3404      	adds	r4, #4
 8000ed8:	0163      	lsls	r3, r4, #5
 8000eda:	d51a      	bpl.n	8000f12 <__aeabi_fmul+0x216>
 8000edc:	2001      	movs	r0, #1
 8000ede:	2400      	movs	r4, #0
 8000ee0:	e758      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	03c0      	lsls	r0, r0, #15
 8000ee6:	4204      	tst	r4, r0
 8000ee8:	d009      	beq.n	8000efe <__aeabi_fmul+0x202>
 8000eea:	464b      	mov	r3, r9
 8000eec:	4203      	tst	r3, r0
 8000eee:	d106      	bne.n	8000efe <__aeabi_fmul+0x202>
 8000ef0:	464c      	mov	r4, r9
 8000ef2:	4304      	orrs	r4, r0
 8000ef4:	0264      	lsls	r4, r4, #9
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	20ff      	movs	r0, #255	; 0xff
 8000efa:	0a64      	lsrs	r4, r4, #9
 8000efc:	e74a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	03c0      	lsls	r0, r0, #15
 8000f02:	4304      	orrs	r4, r0
 8000f04:	0264      	lsls	r4, r4, #9
 8000f06:	0037      	movs	r7, r6
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	e742      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f0e:	0029      	movs	r1, r5
 8000f10:	e78e      	b.n	8000e30 <__aeabi_fmul+0x134>
 8000f12:	01a4      	lsls	r4, r4, #6
 8000f14:	2000      	movs	r0, #0
 8000f16:	0a64      	lsrs	r4, r4, #9
 8000f18:	e73c      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	03c0      	lsls	r0, r0, #15
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	0a64      	lsrs	r4, r4, #9
 8000f26:	e735      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f28:	080134bc 	.word	0x080134bc
 8000f2c:	f7ffffff 	.word	0xf7ffffff

08000f30 <__aeabi_fsub>:
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	4646      	mov	r6, r8
 8000f34:	46d6      	mov	lr, sl
 8000f36:	464f      	mov	r7, r9
 8000f38:	0243      	lsls	r3, r0, #9
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4694      	mov	ip, r2
 8000f40:	024a      	lsls	r2, r1, #9
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	0044      	lsls	r4, r0, #1
 8000f46:	0a56      	lsrs	r6, r2, #9
 8000f48:	1c05      	adds	r5, r0, #0
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	0e24      	lsrs	r4, r4, #24
 8000f4e:	004e      	lsls	r6, r1, #1
 8000f50:	0992      	lsrs	r2, r2, #6
 8000f52:	001f      	movs	r7, r3
 8000f54:	0020      	movs	r0, r4
 8000f56:	4692      	mov	sl, r2
 8000f58:	0fed      	lsrs	r5, r5, #31
 8000f5a:	0e36      	lsrs	r6, r6, #24
 8000f5c:	0fc9      	lsrs	r1, r1, #31
 8000f5e:	2eff      	cmp	r6, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x34>
 8000f62:	e07f      	b.n	8001064 <__aeabi_fsub+0x134>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4051      	eors	r1, r2
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d051      	beq.n	8001010 <__aeabi_fsub+0xe0>
 8000f6c:	1ba2      	subs	r2, r4, r6
 8000f6e:	4691      	mov	r9, r2
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_fsub+0x46>
 8000f74:	e07e      	b.n	8001074 <__aeabi_fsub+0x144>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x4c>
 8000f7a:	e099      	b.n	80010b0 <__aeabi_fsub+0x180>
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x52>
 8000f80:	e08c      	b.n	800109c <__aeabi_fsub+0x16c>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4652      	mov	r2, sl
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4692      	mov	sl, r2
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2a1b      	cmp	r2, #27
 8000f92:	dc08      	bgt.n	8000fa6 <__aeabi_fsub+0x76>
 8000f94:	4653      	mov	r3, sl
 8000f96:	2120      	movs	r1, #32
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	408a      	lsls	r2, r1
 8000fa0:	1e51      	subs	r1, r2, #1
 8000fa2:	418a      	sbcs	r2, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	d400      	bmi.n	8000fb0 <__aeabi_fsub+0x80>
 8000fae:	e0f3      	b.n	8001198 <__aeabi_fsub+0x268>
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	099e      	lsrs	r6, r3, #6
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	f002 f90d 	bl	80031d4 <__clzsi2>
 8000fba:	3805      	subs	r0, #5
 8000fbc:	4086      	lsls	r6, r0
 8000fbe:	4284      	cmp	r4, r0
 8000fc0:	dd00      	ble.n	8000fc4 <__aeabi_fsub+0x94>
 8000fc2:	e0f7      	b.n	80011b4 <__aeabi_fsub+0x284>
 8000fc4:	0032      	movs	r2, r6
 8000fc6:	1b04      	subs	r4, r0, r4
 8000fc8:	2020      	movs	r0, #32
 8000fca:	3401      	adds	r4, #1
 8000fcc:	40e2      	lsrs	r2, r4
 8000fce:	1b04      	subs	r4, r0, r4
 8000fd0:	40a6      	lsls	r6, r4
 8000fd2:	0033      	movs	r3, r6
 8000fd4:	1e5e      	subs	r6, r3, #1
 8000fd6:	41b3      	sbcs	r3, r6
 8000fd8:	2400      	movs	r4, #0
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	d004      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	2a04      	cmp	r2, #4
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe8:	3304      	adds	r3, #4
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0xc0>
 8000fee:	e0d6      	b.n	800119e <__aeabi_fsub+0x26e>
 8000ff0:	1c62      	adds	r2, r4, #1
 8000ff2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0xc8>
 8000ff6:	e0da      	b.n	80011ae <__aeabi_fsub+0x27e>
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	0a5f      	lsrs	r7, r3, #9
 8000ffc:	b2d0      	uxtb	r0, r2
 8000ffe:	05c0      	lsls	r0, r0, #23
 8001000:	4338      	orrs	r0, r7
 8001002:	07ed      	lsls	r5, r5, #31
 8001004:	4328      	orrs	r0, r5
 8001006:	bce0      	pop	{r5, r6, r7}
 8001008:	46ba      	mov	sl, r7
 800100a:	46b1      	mov	r9, r6
 800100c:	46a8      	mov	r8, r5
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1ba2      	subs	r2, r4, r6
 8001012:	4691      	mov	r9, r2
 8001014:	2a00      	cmp	r2, #0
 8001016:	dd63      	ble.n	80010e0 <__aeabi_fsub+0x1b0>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0xee>
 800101c:	e099      	b.n	8001152 <__aeabi_fsub+0x222>
 800101e:	2cff      	cmp	r4, #255	; 0xff
 8001020:	d03c      	beq.n	800109c <__aeabi_fsub+0x16c>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4652      	mov	r2, sl
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	431a      	orrs	r2, r3
 800102a:	4692      	mov	sl, r2
 800102c:	464a      	mov	r2, r9
 800102e:	2301      	movs	r3, #1
 8001030:	2a1b      	cmp	r2, #27
 8001032:	dc08      	bgt.n	8001046 <__aeabi_fsub+0x116>
 8001034:	4653      	mov	r3, sl
 8001036:	2120      	movs	r1, #32
 8001038:	40d3      	lsrs	r3, r2
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4652      	mov	r2, sl
 800103e:	408a      	lsls	r2, r1
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	418a      	sbcs	r2, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	4463      	add	r3, ip
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	d400      	bmi.n	800104e <__aeabi_fsub+0x11e>
 800104c:	e0a4      	b.n	8001198 <__aeabi_fsub+0x268>
 800104e:	3401      	adds	r4, #1
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x126>
 8001054:	e0ab      	b.n	80011ae <__aeabi_fsub+0x27e>
 8001056:	2201      	movs	r2, #1
 8001058:	4997      	ldr	r1, [pc, #604]	; (80012b8 <__aeabi_fsub+0x388>)
 800105a:	401a      	ands	r2, r3
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	400b      	ands	r3, r1
 8001060:	4313      	orrs	r3, r2
 8001062:	e7bb      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d032      	beq.n	80010ce <__aeabi_fsub+0x19e>
 8001068:	428d      	cmp	r5, r1
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	4252      	negs	r2, r2
 8001070:	4691      	mov	r9, r2
 8001072:	44a1      	add	r9, r4
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d051      	beq.n	800111e <__aeabi_fsub+0x1ee>
 800107a:	1b30      	subs	r0, r6, r4
 800107c:	2c00      	cmp	r4, #0
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x152>
 8001080:	e09c      	b.n	80011bc <__aeabi_fsub+0x28c>
 8001082:	4663      	mov	r3, ip
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x15a>
 8001088:	e0df      	b.n	800124a <__aeabi_fsub+0x31a>
 800108a:	3801      	subs	r0, #1
 800108c:	2800      	cmp	r0, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x162>
 8001090:	e0f7      	b.n	8001282 <__aeabi_fsub+0x352>
 8001092:	2eff      	cmp	r6, #255	; 0xff
 8001094:	d000      	beq.n	8001098 <__aeabi_fsub+0x168>
 8001096:	e099      	b.n	80011cc <__aeabi_fsub+0x29c>
 8001098:	000d      	movs	r5, r1
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x172>
 80010a0:	e085      	b.n	80011ae <__aeabi_fsub+0x27e>
 80010a2:	2780      	movs	r7, #128	; 0x80
 80010a4:	03ff      	lsls	r7, r7, #15
 80010a6:	431f      	orrs	r7, r3
 80010a8:	027f      	lsls	r7, r7, #9
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a7f      	lsrs	r7, r7, #9
 80010ae:	e7a6      	b.n	8000ffe <__aeabi_fsub+0xce>
 80010b0:	4652      	mov	r2, sl
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d074      	beq.n	80011a0 <__aeabi_fsub+0x270>
 80010b6:	2201      	movs	r2, #1
 80010b8:	4252      	negs	r2, r2
 80010ba:	4690      	mov	r8, r2
 80010bc:	44c1      	add	r9, r8
 80010be:	464a      	mov	r2, r9
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x196>
 80010c4:	e0c8      	b.n	8001258 <__aeabi_fsub+0x328>
 80010c6:	2cff      	cmp	r4, #255	; 0xff
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x19c>
 80010ca:	e75f      	b.n	8000f8c <__aeabi_fsub+0x5c>
 80010cc:	e7e6      	b.n	800109c <__aeabi_fsub+0x16c>
 80010ce:	2201      	movs	r2, #1
 80010d0:	4051      	eors	r1, r2
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x3c>
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	4252      	negs	r2, r2
 80010dc:	4691      	mov	r9, r2
 80010de:	44a1      	add	r9, r4
 80010e0:	464a      	mov	r2, r9
 80010e2:	2a00      	cmp	r2, #0
 80010e4:	d043      	beq.n	800116e <__aeabi_fsub+0x23e>
 80010e6:	1b31      	subs	r1, r6, r4
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x1be>
 80010ec:	e08c      	b.n	8001208 <__aeabi_fsub+0x2d8>
 80010ee:	2eff      	cmp	r6, #255	; 0xff
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1c4>
 80010f2:	e092      	b.n	800121a <__aeabi_fsub+0x2ea>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	4662      	mov	r2, ip
 80010f8:	04db      	lsls	r3, r3, #19
 80010fa:	431a      	orrs	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	2301      	movs	r3, #1
 8001100:	291b      	cmp	r1, #27
 8001102:	dc09      	bgt.n	8001118 <__aeabi_fsub+0x1e8>
 8001104:	2020      	movs	r0, #32
 8001106:	4663      	mov	r3, ip
 8001108:	4662      	mov	r2, ip
 800110a:	40cb      	lsrs	r3, r1
 800110c:	1a41      	subs	r1, r0, r1
 800110e:	408a      	lsls	r2, r1
 8001110:	0011      	movs	r1, r2
 8001112:	1e48      	subs	r0, r1, #1
 8001114:	4181      	sbcs	r1, r0
 8001116:	430b      	orrs	r3, r1
 8001118:	0034      	movs	r4, r6
 800111a:	4453      	add	r3, sl
 800111c:	e794      	b.n	8001048 <__aeabi_fsub+0x118>
 800111e:	22fe      	movs	r2, #254	; 0xfe
 8001120:	1c66      	adds	r6, r4, #1
 8001122:	4232      	tst	r2, r6
 8001124:	d164      	bne.n	80011f0 <__aeabi_fsub+0x2c0>
 8001126:	2c00      	cmp	r4, #0
 8001128:	d000      	beq.n	800112c <__aeabi_fsub+0x1fc>
 800112a:	e082      	b.n	8001232 <__aeabi_fsub+0x302>
 800112c:	4663      	mov	r3, ip
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x204>
 8001132:	e0ab      	b.n	800128c <__aeabi_fsub+0x35c>
 8001134:	4653      	mov	r3, sl
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x20c>
 800113a:	e760      	b.n	8000ffe <__aeabi_fsub+0xce>
 800113c:	4663      	mov	r3, ip
 800113e:	4652      	mov	r2, sl
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d400      	bmi.n	8001148 <__aeabi_fsub+0x218>
 8001146:	e0aa      	b.n	800129e <__aeabi_fsub+0x36e>
 8001148:	4663      	mov	r3, ip
 800114a:	4652      	mov	r2, sl
 800114c:	000d      	movs	r5, r1
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	e744      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001152:	4652      	mov	r2, sl
 8001154:	2a00      	cmp	r2, #0
 8001156:	d023      	beq.n	80011a0 <__aeabi_fsub+0x270>
 8001158:	2201      	movs	r2, #1
 800115a:	4252      	negs	r2, r2
 800115c:	4690      	mov	r8, r2
 800115e:	44c1      	add	r9, r8
 8001160:	464a      	mov	r2, r9
 8001162:	2a00      	cmp	r2, #0
 8001164:	d075      	beq.n	8001252 <__aeabi_fsub+0x322>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x23c>
 800116a:	e75f      	b.n	800102c <__aeabi_fsub+0xfc>
 800116c:	e796      	b.n	800109c <__aeabi_fsub+0x16c>
 800116e:	26fe      	movs	r6, #254	; 0xfe
 8001170:	3401      	adds	r4, #1
 8001172:	4226      	tst	r6, r4
 8001174:	d153      	bne.n	800121e <__aeabi_fsub+0x2ee>
 8001176:	2800      	cmp	r0, #0
 8001178:	d172      	bne.n	8001260 <__aeabi_fsub+0x330>
 800117a:	4663      	mov	r3, ip
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x252>
 8001180:	e093      	b.n	80012aa <__aeabi_fsub+0x37a>
 8001182:	4653      	mov	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x25a>
 8001188:	e739      	b.n	8000ffe <__aeabi_fsub+0xce>
 800118a:	4463      	add	r3, ip
 800118c:	2400      	movs	r4, #0
 800118e:	015a      	lsls	r2, r3, #5
 8001190:	d502      	bpl.n	8001198 <__aeabi_fsub+0x268>
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <__aeabi_fsub+0x38c>)
 8001194:	3401      	adds	r4, #1
 8001196:	4013      	ands	r3, r2
 8001198:	075a      	lsls	r2, r3, #29
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0x26e>
 800119c:	e720      	b.n	8000fe0 <__aeabi_fsub+0xb0>
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	2cff      	cmp	r4, #255	; 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x276>
 80011a4:	e77a      	b.n	800109c <__aeabi_fsub+0x16c>
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	0a5f      	lsrs	r7, r3, #9
 80011aa:	b2e0      	uxtb	r0, r4
 80011ac:	e727      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	2700      	movs	r7, #0
 80011b2:	e724      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <__aeabi_fsub+0x38c>)
 80011b6:	1a24      	subs	r4, r4, r0
 80011b8:	4033      	ands	r3, r6
 80011ba:	e70f      	b.n	8000fdc <__aeabi_fsub+0xac>
 80011bc:	2eff      	cmp	r6, #255	; 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x292>
 80011c0:	e76a      	b.n	8001098 <__aeabi_fsub+0x168>
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	4662      	mov	r2, ip
 80011c6:	04db      	lsls	r3, r3, #19
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4694      	mov	ip, r2
 80011cc:	2301      	movs	r3, #1
 80011ce:	281b      	cmp	r0, #27
 80011d0:	dc09      	bgt.n	80011e6 <__aeabi_fsub+0x2b6>
 80011d2:	2420      	movs	r4, #32
 80011d4:	4663      	mov	r3, ip
 80011d6:	4662      	mov	r2, ip
 80011d8:	40c3      	lsrs	r3, r0
 80011da:	1a20      	subs	r0, r4, r0
 80011dc:	4082      	lsls	r2, r0
 80011de:	0010      	movs	r0, r2
 80011e0:	1e44      	subs	r4, r0, #1
 80011e2:	41a0      	sbcs	r0, r4
 80011e4:	4303      	orrs	r3, r0
 80011e6:	4652      	mov	r2, sl
 80011e8:	000d      	movs	r5, r1
 80011ea:	0034      	movs	r4, r6
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	e6dc      	b.n	8000faa <__aeabi_fsub+0x7a>
 80011f0:	4663      	mov	r3, ip
 80011f2:	4652      	mov	r2, sl
 80011f4:	1a9e      	subs	r6, r3, r2
 80011f6:	0173      	lsls	r3, r6, #5
 80011f8:	d417      	bmi.n	800122a <__aeabi_fsub+0x2fa>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d000      	beq.n	8001200 <__aeabi_fsub+0x2d0>
 80011fe:	e6d9      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001200:	2500      	movs	r5, #0
 8001202:	2000      	movs	r0, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e6fa      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <__aeabi_fsub+0x368>
 800120e:	3901      	subs	r1, #1
 8001210:	2900      	cmp	r1, #0
 8001212:	d04c      	beq.n	80012ae <__aeabi_fsub+0x37e>
 8001214:	2eff      	cmp	r6, #255	; 0xff
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001218:	e771      	b.n	80010fe <__aeabi_fsub+0x1ce>
 800121a:	4643      	mov	r3, r8
 800121c:	e73e      	b.n	800109c <__aeabi_fsub+0x16c>
 800121e:	2cff      	cmp	r4, #255	; 0xff
 8001220:	d0c5      	beq.n	80011ae <__aeabi_fsub+0x27e>
 8001222:	4652      	mov	r2, sl
 8001224:	4462      	add	r2, ip
 8001226:	0853      	lsrs	r3, r2, #1
 8001228:	e7b6      	b.n	8001198 <__aeabi_fsub+0x268>
 800122a:	4663      	mov	r3, ip
 800122c:	000d      	movs	r5, r1
 800122e:	1ad6      	subs	r6, r2, r3
 8001230:	e6c0      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001232:	4662      	mov	r2, ip
 8001234:	2a00      	cmp	r2, #0
 8001236:	d116      	bne.n	8001266 <__aeabi_fsub+0x336>
 8001238:	4653      	mov	r3, sl
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x310>
 800123e:	e72b      	b.n	8001098 <__aeabi_fsub+0x168>
 8001240:	2780      	movs	r7, #128	; 0x80
 8001242:	2500      	movs	r5, #0
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	03ff      	lsls	r7, r7, #15
 8001248:	e6d9      	b.n	8000ffe <__aeabi_fsub+0xce>
 800124a:	000d      	movs	r5, r1
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e7a6      	b.n	80011a0 <__aeabi_fsub+0x270>
 8001252:	4653      	mov	r3, sl
 8001254:	4463      	add	r3, ip
 8001256:	e6f7      	b.n	8001048 <__aeabi_fsub+0x118>
 8001258:	4663      	mov	r3, ip
 800125a:	4652      	mov	r2, sl
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	e6a4      	b.n	8000faa <__aeabi_fsub+0x7a>
 8001260:	4662      	mov	r2, ip
 8001262:	2a00      	cmp	r2, #0
 8001264:	d0d9      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001266:	4652      	mov	r2, sl
 8001268:	2a00      	cmp	r2, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x33e>
 800126c:	e716      	b.n	800109c <__aeabi_fsub+0x16c>
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	03d2      	lsls	r2, r2, #15
 8001272:	4213      	tst	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x348>
 8001276:	e711      	b.n	800109c <__aeabi_fsub+0x16c>
 8001278:	4640      	mov	r0, r8
 800127a:	4210      	tst	r0, r2
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x350>
 800127e:	e70d      	b.n	800109c <__aeabi_fsub+0x16c>
 8001280:	e70a      	b.n	8001098 <__aeabi_fsub+0x168>
 8001282:	4652      	mov	r2, sl
 8001284:	000d      	movs	r5, r1
 8001286:	0034      	movs	r4, r6
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	e68e      	b.n	8000faa <__aeabi_fsub+0x7a>
 800128c:	4653      	mov	r3, sl
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <__aeabi_fsub+0x374>
 8001292:	000d      	movs	r5, r1
 8001294:	4647      	mov	r7, r8
 8001296:	e6b2      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001298:	4643      	mov	r3, r8
 800129a:	0034      	movs	r4, r6
 800129c:	e780      	b.n	80011a0 <__aeabi_fsub+0x270>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <__aeabi_fsub+0x374>
 80012a2:	e779      	b.n	8001198 <__aeabi_fsub+0x268>
 80012a4:	2500      	movs	r5, #0
 80012a6:	2700      	movs	r7, #0
 80012a8:	e6a9      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012aa:	4647      	mov	r7, r8
 80012ac:	e6a7      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012ae:	4653      	mov	r3, sl
 80012b0:	0034      	movs	r4, r6
 80012b2:	4463      	add	r3, ip
 80012b4:	e6c8      	b.n	8001048 <__aeabi_fsub+0x118>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	7dffffff 	.word	0x7dffffff
 80012bc:	fbffffff 	.word	0xfbffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	d903      	bls.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	d902      	bls.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ff60 	bl	80031d4 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	dd01      	ble.n	8001326 <__aeabi_i2f+0x26>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0b      	ble.n	800135a <__aeabi_i2f+0x5a>
 8001342:	2205      	movs	r2, #5
 8001344:	002e      	movs	r6, r5
 8001346:	1a12      	subs	r2, r2, r0
 8001348:	40d6      	lsrs	r6, r2
 800134a:	0002      	movs	r2, r0
 800134c:	321b      	adds	r2, #27
 800134e:	4095      	lsls	r5, r2
 8001350:	0028      	movs	r0, r5
 8001352:	1e45      	subs	r5, r0, #1
 8001354:	41a8      	sbcs	r0, r5
 8001356:	0035      	movs	r5, r6
 8001358:	4305      	orrs	r5, r0
 800135a:	2905      	cmp	r1, #5
 800135c:	dd01      	ble.n	8001362 <__aeabi_i2f+0x62>
 800135e:	1f4a      	subs	r2, r1, #5
 8001360:	4095      	lsls	r5, r2
 8001362:	002a      	movs	r2, r5
 8001364:	4e08      	ldr	r6, [pc, #32]	; (8001388 <__aeabi_i2f+0x88>)
 8001366:	4032      	ands	r2, r6
 8001368:	0768      	lsls	r0, r5, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_i2f+0x80>
 800136c:	200f      	movs	r0, #15
 800136e:	4028      	ands	r0, r5
 8001370:	2804      	cmp	r0, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_i2f+0x80>
 8001374:	3204      	adds	r2, #4
 8001376:	0150      	lsls	r0, r2, #5
 8001378:	d502      	bpl.n	8001380 <__aeabi_i2f+0x80>
 800137a:	239f      	movs	r3, #159	; 0x9f
 800137c:	4032      	ands	r2, r6
 800137e:	1a5b      	subs	r3, r3, r1
 8001380:	0192      	lsls	r2, r2, #6
 8001382:	0a55      	lsrs	r5, r2, #9
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	e7d5      	b.n	8001334 <__aeabi_i2f+0x34>
 8001388:	fbffffff 	.word	0xfbffffff

0800138c <__aeabi_ui2f>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	1e05      	subs	r5, r0, #0
 8001390:	d00e      	beq.n	80013b0 <__aeabi_ui2f+0x24>
 8001392:	f001 ff1f 	bl	80031d4 <__clzsi2>
 8001396:	239e      	movs	r3, #158	; 0x9e
 8001398:	0004      	movs	r4, r0
 800139a:	1a1b      	subs	r3, r3, r0
 800139c:	2b96      	cmp	r3, #150	; 0x96
 800139e:	dc0c      	bgt.n	80013ba <__aeabi_ui2f+0x2e>
 80013a0:	2808      	cmp	r0, #8
 80013a2:	dd01      	ble.n	80013a8 <__aeabi_ui2f+0x1c>
 80013a4:	3c08      	subs	r4, #8
 80013a6:	40a5      	lsls	r5, r4
 80013a8:	026d      	lsls	r5, r5, #9
 80013aa:	0a6d      	lsrs	r5, r5, #9
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	e001      	b.n	80013b4 <__aeabi_ui2f+0x28>
 80013b0:	2000      	movs	r0, #0
 80013b2:	2500      	movs	r5, #0
 80013b4:	05c0      	lsls	r0, r0, #23
 80013b6:	4328      	orrs	r0, r5
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	2b99      	cmp	r3, #153	; 0x99
 80013bc:	dd09      	ble.n	80013d2 <__aeabi_ui2f+0x46>
 80013be:	0002      	movs	r2, r0
 80013c0:	0029      	movs	r1, r5
 80013c2:	321b      	adds	r2, #27
 80013c4:	4091      	lsls	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	2205      	movs	r2, #5
 80013cc:	1a12      	subs	r2, r2, r0
 80013ce:	40d5      	lsrs	r5, r2
 80013d0:	430d      	orrs	r5, r1
 80013d2:	2c05      	cmp	r4, #5
 80013d4:	dd01      	ble.n	80013da <__aeabi_ui2f+0x4e>
 80013d6:	1f62      	subs	r2, r4, #5
 80013d8:	4095      	lsls	r5, r2
 80013da:	0029      	movs	r1, r5
 80013dc:	4e08      	ldr	r6, [pc, #32]	; (8001400 <__aeabi_ui2f+0x74>)
 80013de:	4031      	ands	r1, r6
 80013e0:	076a      	lsls	r2, r5, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013e4:	200f      	movs	r0, #15
 80013e6:	4028      	ands	r0, r5
 80013e8:	2804      	cmp	r0, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013ec:	3104      	adds	r1, #4
 80013ee:	014a      	lsls	r2, r1, #5
 80013f0:	d502      	bpl.n	80013f8 <__aeabi_ui2f+0x6c>
 80013f2:	239f      	movs	r3, #159	; 0x9f
 80013f4:	4031      	ands	r1, r6
 80013f6:	1b1b      	subs	r3, r3, r4
 80013f8:	0189      	lsls	r1, r1, #6
 80013fa:	0a4d      	lsrs	r5, r1, #9
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	e7d9      	b.n	80013b4 <__aeabi_ui2f+0x28>
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_dadd>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	46d6      	mov	lr, sl
 800140a:	4646      	mov	r6, r8
 800140c:	000d      	movs	r5, r1
 800140e:	0001      	movs	r1, r0
 8001410:	0018      	movs	r0, r3
 8001412:	b5c0      	push	{r6, r7, lr}
 8001414:	0017      	movs	r7, r2
 8001416:	032b      	lsls	r3, r5, #12
 8001418:	0a5a      	lsrs	r2, r3, #9
 800141a:	0f4b      	lsrs	r3, r1, #29
 800141c:	4313      	orrs	r3, r2
 800141e:	00ca      	lsls	r2, r1, #3
 8001420:	4691      	mov	r9, r2
 8001422:	0302      	lsls	r2, r0, #12
 8001424:	006e      	lsls	r6, r5, #1
 8001426:	0041      	lsls	r1, r0, #1
 8001428:	0a52      	lsrs	r2, r2, #9
 800142a:	0fec      	lsrs	r4, r5, #31
 800142c:	0f7d      	lsrs	r5, r7, #29
 800142e:	4315      	orrs	r5, r2
 8001430:	0d76      	lsrs	r6, r6, #21
 8001432:	0d49      	lsrs	r1, r1, #21
 8001434:	0fc0      	lsrs	r0, r0, #31
 8001436:	4682      	mov	sl, r0
 8001438:	46ac      	mov	ip, r5
 800143a:	00ff      	lsls	r7, r7, #3
 800143c:	1a72      	subs	r2, r6, r1
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x40>
 8001442:	e098      	b.n	8001576 <__aeabi_dadd+0x172>
 8001444:	2a00      	cmp	r2, #0
 8001446:	dc00      	bgt.n	800144a <__aeabi_dadd+0x46>
 8001448:	e081      	b.n	800154e <__aeabi_dadd+0x14a>
 800144a:	2900      	cmp	r1, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x4c>
 800144e:	e0b6      	b.n	80015be <__aeabi_dadd+0x1ba>
 8001450:	49c9      	ldr	r1, [pc, #804]	; (8001778 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x54>
 8001456:	e172      	b.n	800173e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x64>
 8001466:	e15e      	b.n	8001726 <__aeabi_dadd+0x322>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dd00      	ble.n	800146e <__aeabi_dadd+0x6a>
 800146c:	e1ee      	b.n	800184c <__aeabi_dadd+0x448>
 800146e:	2020      	movs	r0, #32
 8001470:	0039      	movs	r1, r7
 8001472:	4665      	mov	r5, ip
 8001474:	1a80      	subs	r0, r0, r2
 8001476:	4087      	lsls	r7, r0
 8001478:	40d1      	lsrs	r1, r2
 800147a:	4085      	lsls	r5, r0
 800147c:	430d      	orrs	r5, r1
 800147e:	0039      	movs	r1, r7
 8001480:	1e4f      	subs	r7, r1, #1
 8001482:	41b9      	sbcs	r1, r7
 8001484:	4667      	mov	r7, ip
 8001486:	40d7      	lsrs	r7, r2
 8001488:	4329      	orrs	r1, r5
 800148a:	1bdb      	subs	r3, r3, r7
 800148c:	464a      	mov	r2, r9
 800148e:	1a55      	subs	r5, r2, r1
 8001490:	45a9      	cmp	r9, r5
 8001492:	4189      	sbcs	r1, r1
 8001494:	4249      	negs	r1, r1
 8001496:	1a5b      	subs	r3, r3, r1
 8001498:	4698      	mov	r8, r3
 800149a:	4643      	mov	r3, r8
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x9e>
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x238>
 80014a2:	4643      	mov	r3, r8
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	0a5b      	lsrs	r3, r3, #9
 80014a8:	4698      	mov	r8, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0xae>
 80014b0:	e12c      	b.n	800170c <__aeabi_dadd+0x308>
 80014b2:	4640      	mov	r0, r8
 80014b4:	f001 fe8e 	bl	80031d4 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	3908      	subs	r1, #8
 80014bc:	2220      	movs	r2, #32
 80014be:	0028      	movs	r0, r5
 80014c0:	4643      	mov	r3, r8
 80014c2:	1a52      	subs	r2, r2, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	40d0      	lsrs	r0, r2
 80014c8:	408d      	lsls	r5, r1
 80014ca:	4303      	orrs	r3, r0
 80014cc:	428e      	cmp	r6, r1
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dadd+0xce>
 80014d0:	e117      	b.n	8001702 <__aeabi_dadd+0x2fe>
 80014d2:	1b8e      	subs	r6, r1, r6
 80014d4:	1c72      	adds	r2, r6, #1
 80014d6:	2a1f      	cmp	r2, #31
 80014d8:	dd00      	ble.n	80014dc <__aeabi_dadd+0xd8>
 80014da:	e1a7      	b.n	800182c <__aeabi_dadd+0x428>
 80014dc:	2120      	movs	r1, #32
 80014de:	0018      	movs	r0, r3
 80014e0:	002e      	movs	r6, r5
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	408d      	lsls	r5, r1
 80014e6:	4088      	lsls	r0, r1
 80014e8:	40d6      	lsrs	r6, r2
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	1e69      	subs	r1, r5, #1
 80014ee:	418d      	sbcs	r5, r1
 80014f0:	4330      	orrs	r0, r6
 80014f2:	4698      	mov	r8, r3
 80014f4:	2600      	movs	r6, #0
 80014f6:	4305      	orrs	r5, r0
 80014f8:	076b      	lsls	r3, r5, #29
 80014fa:	d009      	beq.n	8001510 <__aeabi_dadd+0x10c>
 80014fc:	230f      	movs	r3, #15
 80014fe:	402b      	ands	r3, r5
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <__aeabi_dadd+0x10c>
 8001504:	1d2b      	adds	r3, r5, #4
 8001506:	42ab      	cmp	r3, r5
 8001508:	41ad      	sbcs	r5, r5
 800150a:	426d      	negs	r5, r5
 800150c:	44a8      	add	r8, r5
 800150e:	001d      	movs	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	d400      	bmi.n	8001518 <__aeabi_dadd+0x114>
 8001516:	e094      	b.n	8001642 <__aeabi_dadd+0x23e>
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <__aeabi_dadd+0x374>)
 800151a:	1c72      	adds	r2, r6, #1
 800151c:	429a      	cmp	r2, r3
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x11e>
 8001520:	e09d      	b.n	800165e <__aeabi_dadd+0x25a>
 8001522:	4641      	mov	r1, r8
 8001524:	4b95      	ldr	r3, [pc, #596]	; (800177c <__aeabi_dadd+0x378>)
 8001526:	08ed      	lsrs	r5, r5, #3
 8001528:	4019      	ands	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	0749      	lsls	r1, r1, #29
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4329      	orrs	r1, r5
 8001534:	0b1b      	lsrs	r3, r3, #12
 8001536:	0d52      	lsrs	r2, r2, #21
 8001538:	0512      	lsls	r2, r2, #20
 800153a:	4313      	orrs	r3, r2
 800153c:	07e4      	lsls	r4, r4, #31
 800153e:	4323      	orrs	r3, r4
 8001540:	0008      	movs	r0, r1
 8001542:	0019      	movs	r1, r3
 8001544:	bce0      	pop	{r5, r6, r7}
 8001546:	46ba      	mov	sl, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	2a00      	cmp	r2, #0
 8001550:	d043      	beq.n	80015da <__aeabi_dadd+0x1d6>
 8001552:	1b8a      	subs	r2, r1, r6
 8001554:	2e00      	cmp	r6, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x156>
 8001558:	e12a      	b.n	80017b0 <__aeabi_dadd+0x3ac>
 800155a:	464c      	mov	r4, r9
 800155c:	431c      	orrs	r4, r3
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x15e>
 8001560:	e1d1      	b.n	8001906 <__aeabi_dadd+0x502>
 8001562:	1e54      	subs	r4, r2, #1
 8001564:	2a01      	cmp	r2, #1
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x166>
 8001568:	e21f      	b.n	80019aa <__aeabi_dadd+0x5a6>
 800156a:	4d83      	ldr	r5, [pc, #524]	; (8001778 <__aeabi_dadd+0x374>)
 800156c:	42aa      	cmp	r2, r5
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x16e>
 8001570:	e272      	b.n	8001a58 <__aeabi_dadd+0x654>
 8001572:	0022      	movs	r2, r4
 8001574:	e123      	b.n	80017be <__aeabi_dadd+0x3ba>
 8001576:	2a00      	cmp	r2, #0
 8001578:	dc00      	bgt.n	800157c <__aeabi_dadd+0x178>
 800157a:	e098      	b.n	80016ae <__aeabi_dadd+0x2aa>
 800157c:	2900      	cmp	r1, #0
 800157e:	d042      	beq.n	8001606 <__aeabi_dadd+0x202>
 8001580:	497d      	ldr	r1, [pc, #500]	; (8001778 <__aeabi_dadd+0x374>)
 8001582:	428e      	cmp	r6, r1
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x184>
 8001586:	e0da      	b.n	800173e <__aeabi_dadd+0x33a>
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0028      	movs	r0, r5
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	4308      	orrs	r0, r1
 8001590:	4684      	mov	ip, r0
 8001592:	2a38      	cmp	r2, #56	; 0x38
 8001594:	dd00      	ble.n	8001598 <__aeabi_dadd+0x194>
 8001596:	e129      	b.n	80017ec <__aeabi_dadd+0x3e8>
 8001598:	2a1f      	cmp	r2, #31
 800159a:	dc00      	bgt.n	800159e <__aeabi_dadd+0x19a>
 800159c:	e187      	b.n	80018ae <__aeabi_dadd+0x4aa>
 800159e:	0011      	movs	r1, r2
 80015a0:	4665      	mov	r5, ip
 80015a2:	3920      	subs	r1, #32
 80015a4:	40cd      	lsrs	r5, r1
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d004      	beq.n	80015b4 <__aeabi_dadd+0x1b0>
 80015aa:	2040      	movs	r0, #64	; 0x40
 80015ac:	4661      	mov	r1, ip
 80015ae:	1a82      	subs	r2, r0, r2
 80015b0:	4091      	lsls	r1, r2
 80015b2:	430f      	orrs	r7, r1
 80015b4:	0039      	movs	r1, r7
 80015b6:	1e4f      	subs	r7, r1, #1
 80015b8:	41b9      	sbcs	r1, r7
 80015ba:	430d      	orrs	r5, r1
 80015bc:	e11b      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80015be:	0029      	movs	r1, r5
 80015c0:	4339      	orrs	r1, r7
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x1c2>
 80015c4:	e0b5      	b.n	8001732 <__aeabi_dadd+0x32e>
 80015c6:	1e51      	subs	r1, r2, #1
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1ca>
 80015cc:	e1ab      	b.n	8001926 <__aeabi_dadd+0x522>
 80015ce:	486a      	ldr	r0, [pc, #424]	; (8001778 <__aeabi_dadd+0x374>)
 80015d0:	4282      	cmp	r2, r0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x1d2>
 80015d4:	e1b2      	b.n	800193c <__aeabi_dadd+0x538>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e743      	b.n	8001462 <__aeabi_dadd+0x5e>
 80015da:	4969      	ldr	r1, [pc, #420]	; (8001780 <__aeabi_dadd+0x37c>)
 80015dc:	1c75      	adds	r5, r6, #1
 80015de:	420d      	tst	r5, r1
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x1e0>
 80015e2:	e0cf      	b.n	8001784 <__aeabi_dadd+0x380>
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d000      	beq.n	80015ea <__aeabi_dadd+0x1e6>
 80015e8:	e193      	b.n	8001912 <__aeabi_dadd+0x50e>
 80015ea:	4649      	mov	r1, r9
 80015ec:	4319      	orrs	r1, r3
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x1ee>
 80015f0:	e1d1      	b.n	8001996 <__aeabi_dadd+0x592>
 80015f2:	4661      	mov	r1, ip
 80015f4:	4339      	orrs	r1, r7
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x1f6>
 80015f8:	e1e3      	b.n	80019c2 <__aeabi_dadd+0x5be>
 80015fa:	4649      	mov	r1, r9
 80015fc:	0758      	lsls	r0, r3, #29
 80015fe:	08c9      	lsrs	r1, r1, #3
 8001600:	4301      	orrs	r1, r0
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	e026      	b.n	8001654 <__aeabi_dadd+0x250>
 8001606:	0029      	movs	r1, r5
 8001608:	4339      	orrs	r1, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x20a>
 800160c:	e091      	b.n	8001732 <__aeabi_dadd+0x32e>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d005      	beq.n	8001620 <__aeabi_dadd+0x21c>
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <__aeabi_dadd+0x374>)
 8001616:	4282      	cmp	r2, r0
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x218>
 800161a:	e18f      	b.n	800193c <__aeabi_dadd+0x538>
 800161c:	000a      	movs	r2, r1
 800161e:	e7b8      	b.n	8001592 <__aeabi_dadd+0x18e>
 8001620:	003d      	movs	r5, r7
 8001622:	444d      	add	r5, r9
 8001624:	454d      	cmp	r5, r9
 8001626:	4189      	sbcs	r1, r1
 8001628:	4463      	add	r3, ip
 800162a:	4698      	mov	r8, r3
 800162c:	4249      	negs	r1, r1
 800162e:	4488      	add	r8, r1
 8001630:	4643      	mov	r3, r8
 8001632:	2602      	movs	r6, #2
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d500      	bpl.n	800163a <__aeabi_dadd+0x236>
 8001638:	e0eb      	b.n	8001812 <__aeabi_dadd+0x40e>
 800163a:	3e01      	subs	r6, #1
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x23e>
 8001640:	e75c      	b.n	80014fc <__aeabi_dadd+0xf8>
 8001642:	4643      	mov	r3, r8
 8001644:	08e9      	lsrs	r1, r5, #3
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	4311      	orrs	r1, r2
 800164a:	0032      	movs	r2, r6
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	484a      	ldr	r0, [pc, #296]	; (8001778 <__aeabi_dadd+0x374>)
 8001650:	4282      	cmp	r2, r0
 8001652:	d021      	beq.n	8001698 <__aeabi_dadd+0x294>
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	0552      	lsls	r2, r2, #21
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	e76c      	b.n	8001538 <__aeabi_dadd+0x134>
 800165e:	2300      	movs	r3, #0
 8001660:	2100      	movs	r1, #0
 8001662:	e769      	b.n	8001538 <__aeabi_dadd+0x134>
 8001664:	002a      	movs	r2, r5
 8001666:	433a      	orrs	r2, r7
 8001668:	d069      	beq.n	800173e <__aeabi_dadd+0x33a>
 800166a:	464a      	mov	r2, r9
 800166c:	0758      	lsls	r0, r3, #29
 800166e:	08d1      	lsrs	r1, r2, #3
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	4308      	orrs	r0, r1
 8001678:	421a      	tst	r2, r3
 800167a:	d007      	beq.n	800168c <__aeabi_dadd+0x288>
 800167c:	0029      	movs	r1, r5
 800167e:	08ed      	lsrs	r5, r5, #3
 8001680:	421d      	tst	r5, r3
 8001682:	d103      	bne.n	800168c <__aeabi_dadd+0x288>
 8001684:	002a      	movs	r2, r5
 8001686:	08ff      	lsrs	r7, r7, #3
 8001688:	0748      	lsls	r0, r1, #29
 800168a:	4338      	orrs	r0, r7
 800168c:	0f43      	lsrs	r3, r0, #29
 800168e:	00c1      	lsls	r1, r0, #3
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	4319      	orrs	r1, r3
 8001696:	0013      	movs	r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x29c>
 800169e:	e213      	b.n	8001ac8 <__aeabi_dadd+0x6c4>
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0312      	lsls	r2, r2, #12
 80016a4:	4313      	orrs	r3, r2
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <__aeabi_dadd+0x374>)
 80016aa:	0b1b      	lsrs	r3, r3, #12
 80016ac:	e744      	b.n	8001538 <__aeabi_dadd+0x134>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d04b      	beq.n	800174a <__aeabi_dadd+0x346>
 80016b2:	1b8a      	subs	r2, r1, r6
 80016b4:	2e00      	cmp	r6, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2b6>
 80016b8:	e0e7      	b.n	800188a <__aeabi_dadd+0x486>
 80016ba:	482f      	ldr	r0, [pc, #188]	; (8001778 <__aeabi_dadd+0x374>)
 80016bc:	4281      	cmp	r1, r0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x2be>
 80016c0:	e195      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80016c2:	2080      	movs	r0, #128	; 0x80
 80016c4:	0400      	lsls	r0, r0, #16
 80016c6:	4303      	orrs	r3, r0
 80016c8:	2a38      	cmp	r2, #56	; 0x38
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dadd+0x2ca>
 80016cc:	e143      	b.n	8001956 <__aeabi_dadd+0x552>
 80016ce:	2a1f      	cmp	r2, #31
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dadd+0x2d0>
 80016d2:	e1db      	b.n	8001a8c <__aeabi_dadd+0x688>
 80016d4:	2020      	movs	r0, #32
 80016d6:	001d      	movs	r5, r3
 80016d8:	464e      	mov	r6, r9
 80016da:	1a80      	subs	r0, r0, r2
 80016dc:	4085      	lsls	r5, r0
 80016de:	40d6      	lsrs	r6, r2
 80016e0:	4335      	orrs	r5, r6
 80016e2:	464e      	mov	r6, r9
 80016e4:	4086      	lsls	r6, r0
 80016e6:	0030      	movs	r0, r6
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	1e46      	subs	r6, r0, #1
 80016ec:	41b0      	sbcs	r0, r6
 80016ee:	449c      	add	ip, r3
 80016f0:	4305      	orrs	r5, r0
 80016f2:	19ed      	adds	r5, r5, r7
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	419b      	sbcs	r3, r3
 80016f8:	425b      	negs	r3, r3
 80016fa:	4463      	add	r3, ip
 80016fc:	4698      	mov	r8, r3
 80016fe:	000e      	movs	r6, r1
 8001700:	e07f      	b.n	8001802 <__aeabi_dadd+0x3fe>
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <__aeabi_dadd+0x378>)
 8001704:	1a76      	subs	r6, r6, r1
 8001706:	4013      	ands	r3, r2
 8001708:	4698      	mov	r8, r3
 800170a:	e6f5      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800170c:	0028      	movs	r0, r5
 800170e:	f001 fd61 	bl	80031d4 <__clzsi2>
 8001712:	0001      	movs	r1, r0
 8001714:	3118      	adds	r1, #24
 8001716:	291f      	cmp	r1, #31
 8001718:	dc00      	bgt.n	800171c <__aeabi_dadd+0x318>
 800171a:	e6cf      	b.n	80014bc <__aeabi_dadd+0xb8>
 800171c:	002b      	movs	r3, r5
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	e6d2      	b.n	80014cc <__aeabi_dadd+0xc8>
 8001726:	4662      	mov	r2, ip
 8001728:	433a      	orrs	r2, r7
 800172a:	0011      	movs	r1, r2
 800172c:	1e4f      	subs	r7, r1, #1
 800172e:	41b9      	sbcs	r1, r7
 8001730:	e6ac      	b.n	800148c <__aeabi_dadd+0x88>
 8001732:	4649      	mov	r1, r9
 8001734:	0758      	lsls	r0, r3, #29
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	4301      	orrs	r1, r0
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	e787      	b.n	800164e <__aeabi_dadd+0x24a>
 800173e:	4649      	mov	r1, r9
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	4311      	orrs	r1, r2
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	e7a6      	b.n	8001698 <__aeabi_dadd+0x294>
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <__aeabi_dadd+0x37c>)
 800174c:	1c70      	adds	r0, r6, #1
 800174e:	4208      	tst	r0, r1
 8001750:	d000      	beq.n	8001754 <__aeabi_dadd+0x350>
 8001752:	e0bb      	b.n	80018cc <__aeabi_dadd+0x4c8>
 8001754:	2e00      	cmp	r6, #0
 8001756:	d000      	beq.n	800175a <__aeabi_dadd+0x356>
 8001758:	e114      	b.n	8001984 <__aeabi_dadd+0x580>
 800175a:	4649      	mov	r1, r9
 800175c:	4319      	orrs	r1, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x35e>
 8001760:	e175      	b.n	8001a4e <__aeabi_dadd+0x64a>
 8001762:	0029      	movs	r1, r5
 8001764:	4339      	orrs	r1, r7
 8001766:	d000      	beq.n	800176a <__aeabi_dadd+0x366>
 8001768:	e17e      	b.n	8001a68 <__aeabi_dadd+0x664>
 800176a:	4649      	mov	r1, r9
 800176c:	0758      	lsls	r0, r3, #29
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	4301      	orrs	r1, r0
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	e76e      	b.n	8001654 <__aeabi_dadd+0x250>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	000007ff 	.word	0x000007ff
 800177c:	ff7fffff 	.word	0xff7fffff
 8001780:	000007fe 	.word	0x000007fe
 8001784:	4649      	mov	r1, r9
 8001786:	1bcd      	subs	r5, r1, r7
 8001788:	4661      	mov	r1, ip
 800178a:	1a58      	subs	r0, r3, r1
 800178c:	45a9      	cmp	r9, r5
 800178e:	4189      	sbcs	r1, r1
 8001790:	4249      	negs	r1, r1
 8001792:	4688      	mov	r8, r1
 8001794:	0001      	movs	r1, r0
 8001796:	4640      	mov	r0, r8
 8001798:	1a09      	subs	r1, r1, r0
 800179a:	4688      	mov	r8, r1
 800179c:	0209      	lsls	r1, r1, #8
 800179e:	d500      	bpl.n	80017a2 <__aeabi_dadd+0x39e>
 80017a0:	e0a6      	b.n	80018f0 <__aeabi_dadd+0x4ec>
 80017a2:	4641      	mov	r1, r8
 80017a4:	4329      	orrs	r1, r5
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x3a6>
 80017a8:	e67f      	b.n	80014aa <__aeabi_dadd+0xa6>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2400      	movs	r4, #0
 80017ae:	e751      	b.n	8001654 <__aeabi_dadd+0x250>
 80017b0:	4cc7      	ldr	r4, [pc, #796]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80017b2:	42a1      	cmp	r1, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x3b4>
 80017b6:	e0c7      	b.n	8001948 <__aeabi_dadd+0x544>
 80017b8:	2480      	movs	r4, #128	; 0x80
 80017ba:	0424      	lsls	r4, r4, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	2a38      	cmp	r2, #56	; 0x38
 80017c0:	dc54      	bgt.n	800186c <__aeabi_dadd+0x468>
 80017c2:	2a1f      	cmp	r2, #31
 80017c4:	dd00      	ble.n	80017c8 <__aeabi_dadd+0x3c4>
 80017c6:	e0cc      	b.n	8001962 <__aeabi_dadd+0x55e>
 80017c8:	2420      	movs	r4, #32
 80017ca:	4648      	mov	r0, r9
 80017cc:	1aa4      	subs	r4, r4, r2
 80017ce:	001d      	movs	r5, r3
 80017d0:	464e      	mov	r6, r9
 80017d2:	40a0      	lsls	r0, r4
 80017d4:	40d6      	lsrs	r6, r2
 80017d6:	40a5      	lsls	r5, r4
 80017d8:	0004      	movs	r4, r0
 80017da:	40d3      	lsrs	r3, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	4335      	orrs	r5, r6
 80017e0:	1e66      	subs	r6, r4, #1
 80017e2:	41b4      	sbcs	r4, r6
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	469c      	mov	ip, r3
 80017e8:	4325      	orrs	r5, r4
 80017ea:	e044      	b.n	8001876 <__aeabi_dadd+0x472>
 80017ec:	4662      	mov	r2, ip
 80017ee:	433a      	orrs	r2, r7
 80017f0:	0015      	movs	r5, r2
 80017f2:	1e6f      	subs	r7, r5, #1
 80017f4:	41bd      	sbcs	r5, r7
 80017f6:	444d      	add	r5, r9
 80017f8:	454d      	cmp	r5, r9
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	4249      	negs	r1, r1
 80017fe:	4688      	mov	r8, r1
 8001800:	4498      	add	r8, r3
 8001802:	4643      	mov	r3, r8
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	d400      	bmi.n	800180a <__aeabi_dadd+0x406>
 8001808:	e718      	b.n	800163c <__aeabi_dadd+0x238>
 800180a:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800180c:	3601      	adds	r6, #1
 800180e:	429e      	cmp	r6, r3
 8001810:	d049      	beq.n	80018a6 <__aeabi_dadd+0x4a2>
 8001812:	4642      	mov	r2, r8
 8001814:	4baf      	ldr	r3, [pc, #700]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001816:	2101      	movs	r1, #1
 8001818:	401a      	ands	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	400d      	ands	r5, r1
 8001820:	4315      	orrs	r5, r2
 8001822:	07d9      	lsls	r1, r3, #31
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	4698      	mov	r8, r3
 8001828:	430d      	orrs	r5, r1
 800182a:	e665      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800182c:	0018      	movs	r0, r3
 800182e:	3e1f      	subs	r6, #31
 8001830:	40f0      	lsrs	r0, r6
 8001832:	2a20      	cmp	r2, #32
 8001834:	d003      	beq.n	800183e <__aeabi_dadd+0x43a>
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	1a8a      	subs	r2, r1, r2
 800183a:	4093      	lsls	r3, r2
 800183c:	431d      	orrs	r5, r3
 800183e:	1e69      	subs	r1, r5, #1
 8001840:	418d      	sbcs	r5, r1
 8001842:	2300      	movs	r3, #0
 8001844:	2600      	movs	r6, #0
 8001846:	4698      	mov	r8, r3
 8001848:	4305      	orrs	r5, r0
 800184a:	e6f7      	b.n	800163c <__aeabi_dadd+0x238>
 800184c:	0011      	movs	r1, r2
 800184e:	4665      	mov	r5, ip
 8001850:	3920      	subs	r1, #32
 8001852:	40cd      	lsrs	r5, r1
 8001854:	2a20      	cmp	r2, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_dadd+0x45e>
 8001858:	2040      	movs	r0, #64	; 0x40
 800185a:	4661      	mov	r1, ip
 800185c:	1a82      	subs	r2, r0, r2
 800185e:	4091      	lsls	r1, r2
 8001860:	430f      	orrs	r7, r1
 8001862:	0039      	movs	r1, r7
 8001864:	1e4f      	subs	r7, r1, #1
 8001866:	41b9      	sbcs	r1, r7
 8001868:	4329      	orrs	r1, r5
 800186a:	e60f      	b.n	800148c <__aeabi_dadd+0x88>
 800186c:	464a      	mov	r2, r9
 800186e:	4313      	orrs	r3, r2
 8001870:	001d      	movs	r5, r3
 8001872:	1e6b      	subs	r3, r5, #1
 8001874:	419d      	sbcs	r5, r3
 8001876:	1b7d      	subs	r5, r7, r5
 8001878:	42af      	cmp	r7, r5
 800187a:	419b      	sbcs	r3, r3
 800187c:	4662      	mov	r2, ip
 800187e:	425b      	negs	r3, r3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4698      	mov	r8, r3
 8001884:	4654      	mov	r4, sl
 8001886:	000e      	movs	r6, r1
 8001888:	e607      	b.n	800149a <__aeabi_dadd+0x96>
 800188a:	4648      	mov	r0, r9
 800188c:	4318      	orrs	r0, r3
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x48e>
 8001890:	e0b3      	b.n	80019fa <__aeabi_dadd+0x5f6>
 8001892:	1e50      	subs	r0, r2, #1
 8001894:	2a01      	cmp	r2, #1
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x496>
 8001898:	e10d      	b.n	8001ab6 <__aeabi_dadd+0x6b2>
 800189a:	4d8d      	ldr	r5, [pc, #564]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800189c:	42aa      	cmp	r2, r5
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x49e>
 80018a0:	e0a5      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80018a2:	0002      	movs	r2, r0
 80018a4:	e710      	b.n	80016c8 <__aeabi_dadd+0x2c4>
 80018a6:	0032      	movs	r2, r6
 80018a8:	2300      	movs	r3, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	e644      	b.n	8001538 <__aeabi_dadd+0x134>
 80018ae:	2120      	movs	r1, #32
 80018b0:	0038      	movs	r0, r7
 80018b2:	1a89      	subs	r1, r1, r2
 80018b4:	4665      	mov	r5, ip
 80018b6:	408f      	lsls	r7, r1
 80018b8:	408d      	lsls	r5, r1
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	1e79      	subs	r1, r7, #1
 80018be:	418f      	sbcs	r7, r1
 80018c0:	4305      	orrs	r5, r0
 80018c2:	433d      	orrs	r5, r7
 80018c4:	4667      	mov	r7, ip
 80018c6:	40d7      	lsrs	r7, r2
 80018c8:	19db      	adds	r3, r3, r7
 80018ca:	e794      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80018ce:	4290      	cmp	r0, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x4d0>
 80018d2:	e0ec      	b.n	8001aae <__aeabi_dadd+0x6aa>
 80018d4:	0039      	movs	r1, r7
 80018d6:	4449      	add	r1, r9
 80018d8:	4549      	cmp	r1, r9
 80018da:	4192      	sbcs	r2, r2
 80018dc:	4463      	add	r3, ip
 80018de:	4252      	negs	r2, r2
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	07dd      	lsls	r5, r3, #31
 80018e4:	0849      	lsrs	r1, r1, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	4698      	mov	r8, r3
 80018ea:	0006      	movs	r6, r0
 80018ec:	430d      	orrs	r5, r1
 80018ee:	e6a5      	b.n	800163c <__aeabi_dadd+0x238>
 80018f0:	464a      	mov	r2, r9
 80018f2:	1abd      	subs	r5, r7, r2
 80018f4:	42af      	cmp	r7, r5
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	4662      	mov	r2, ip
 80018fa:	4249      	negs	r1, r1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	4698      	mov	r8, r3
 8001902:	4654      	mov	r4, sl
 8001904:	e5d1      	b.n	80014aa <__aeabi_dadd+0xa6>
 8001906:	076c      	lsls	r4, r5, #29
 8001908:	08f9      	lsrs	r1, r7, #3
 800190a:	4321      	orrs	r1, r4
 800190c:	08eb      	lsrs	r3, r5, #3
 800190e:	0004      	movs	r4, r0
 8001910:	e69d      	b.n	800164e <__aeabi_dadd+0x24a>
 8001912:	464a      	mov	r2, r9
 8001914:	431a      	orrs	r2, r3
 8001916:	d175      	bne.n	8001a04 <__aeabi_dadd+0x600>
 8001918:	4661      	mov	r1, ip
 800191a:	4339      	orrs	r1, r7
 800191c:	d114      	bne.n	8001948 <__aeabi_dadd+0x544>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	2400      	movs	r4, #0
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	e6bc      	b.n	80016a0 <__aeabi_dadd+0x29c>
 8001926:	464a      	mov	r2, r9
 8001928:	1bd5      	subs	r5, r2, r7
 800192a:	45a9      	cmp	r9, r5
 800192c:	4189      	sbcs	r1, r1
 800192e:	4662      	mov	r2, ip
 8001930:	4249      	negs	r1, r1
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	1a5b      	subs	r3, r3, r1
 8001936:	4698      	mov	r8, r3
 8001938:	2601      	movs	r6, #1
 800193a:	e5ae      	b.n	800149a <__aeabi_dadd+0x96>
 800193c:	464a      	mov	r2, r9
 800193e:	08d1      	lsrs	r1, r2, #3
 8001940:	075a      	lsls	r2, r3, #29
 8001942:	4311      	orrs	r1, r2
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	e6a7      	b.n	8001698 <__aeabi_dadd+0x294>
 8001948:	4663      	mov	r3, ip
 800194a:	08f9      	lsrs	r1, r7, #3
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	4654      	mov	r4, sl
 8001950:	4311      	orrs	r1, r2
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	e6a0      	b.n	8001698 <__aeabi_dadd+0x294>
 8001956:	464a      	mov	r2, r9
 8001958:	4313      	orrs	r3, r2
 800195a:	001d      	movs	r5, r3
 800195c:	1e6b      	subs	r3, r5, #1
 800195e:	419d      	sbcs	r5, r3
 8001960:	e6c7      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001962:	0014      	movs	r4, r2
 8001964:	001e      	movs	r6, r3
 8001966:	3c20      	subs	r4, #32
 8001968:	40e6      	lsrs	r6, r4
 800196a:	2a20      	cmp	r2, #32
 800196c:	d005      	beq.n	800197a <__aeabi_dadd+0x576>
 800196e:	2440      	movs	r4, #64	; 0x40
 8001970:	1aa2      	subs	r2, r4, r2
 8001972:	4093      	lsls	r3, r2
 8001974:	464a      	mov	r2, r9
 8001976:	431a      	orrs	r2, r3
 8001978:	4691      	mov	r9, r2
 800197a:	464d      	mov	r5, r9
 800197c:	1e6b      	subs	r3, r5, #1
 800197e:	419d      	sbcs	r5, r3
 8001980:	4335      	orrs	r5, r6
 8001982:	e778      	b.n	8001876 <__aeabi_dadd+0x472>
 8001984:	464a      	mov	r2, r9
 8001986:	431a      	orrs	r2, r3
 8001988:	d000      	beq.n	800198c <__aeabi_dadd+0x588>
 800198a:	e66b      	b.n	8001664 <__aeabi_dadd+0x260>
 800198c:	076b      	lsls	r3, r5, #29
 800198e:	08f9      	lsrs	r1, r7, #3
 8001990:	4319      	orrs	r1, r3
 8001992:	08eb      	lsrs	r3, r5, #3
 8001994:	e680      	b.n	8001698 <__aeabi_dadd+0x294>
 8001996:	4661      	mov	r1, ip
 8001998:	4339      	orrs	r1, r7
 800199a:	d054      	beq.n	8001a46 <__aeabi_dadd+0x642>
 800199c:	4663      	mov	r3, ip
 800199e:	08f9      	lsrs	r1, r7, #3
 80019a0:	075c      	lsls	r4, r3, #29
 80019a2:	4321      	orrs	r1, r4
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0004      	movs	r4, r0
 80019a8:	e654      	b.n	8001654 <__aeabi_dadd+0x250>
 80019aa:	464a      	mov	r2, r9
 80019ac:	1abd      	subs	r5, r7, r2
 80019ae:	42af      	cmp	r7, r5
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	4662      	mov	r2, ip
 80019b4:	4249      	negs	r1, r1
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	1a5b      	subs	r3, r3, r1
 80019ba:	4698      	mov	r8, r3
 80019bc:	0004      	movs	r4, r0
 80019be:	2601      	movs	r6, #1
 80019c0:	e56b      	b.n	800149a <__aeabi_dadd+0x96>
 80019c2:	464a      	mov	r2, r9
 80019c4:	1bd5      	subs	r5, r2, r7
 80019c6:	45a9      	cmp	r9, r5
 80019c8:	4189      	sbcs	r1, r1
 80019ca:	4662      	mov	r2, ip
 80019cc:	4249      	negs	r1, r1
 80019ce:	1a9a      	subs	r2, r3, r2
 80019d0:	1a52      	subs	r2, r2, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	d532      	bpl.n	8001a3e <__aeabi_dadd+0x63a>
 80019d8:	464a      	mov	r2, r9
 80019da:	1abd      	subs	r5, r7, r2
 80019dc:	42af      	cmp	r7, r5
 80019de:	4189      	sbcs	r1, r1
 80019e0:	4662      	mov	r2, ip
 80019e2:	4249      	negs	r1, r1
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	1a5b      	subs	r3, r3, r1
 80019e8:	4698      	mov	r8, r3
 80019ea:	0004      	movs	r4, r0
 80019ec:	e584      	b.n	80014f8 <__aeabi_dadd+0xf4>
 80019ee:	4663      	mov	r3, ip
 80019f0:	08f9      	lsrs	r1, r7, #3
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	4311      	orrs	r1, r2
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	e64e      	b.n	8001698 <__aeabi_dadd+0x294>
 80019fa:	08f9      	lsrs	r1, r7, #3
 80019fc:	0768      	lsls	r0, r5, #29
 80019fe:	4301      	orrs	r1, r0
 8001a00:	08eb      	lsrs	r3, r5, #3
 8001a02:	e624      	b.n	800164e <__aeabi_dadd+0x24a>
 8001a04:	4662      	mov	r2, ip
 8001a06:	433a      	orrs	r2, r7
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dadd+0x608>
 8001a0a:	e698      	b.n	800173e <__aeabi_dadd+0x33a>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	08d1      	lsrs	r1, r2, #3
 8001a10:	075a      	lsls	r2, r3, #29
 8001a12:	4311      	orrs	r1, r2
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d008      	beq.n	8001a30 <__aeabi_dadd+0x62c>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	08c5      	lsrs	r5, r0, #3
 8001a22:	421d      	tst	r5, r3
 8001a24:	d104      	bne.n	8001a30 <__aeabi_dadd+0x62c>
 8001a26:	4654      	mov	r4, sl
 8001a28:	002a      	movs	r2, r5
 8001a2a:	08f9      	lsrs	r1, r7, #3
 8001a2c:	0743      	lsls	r3, r0, #29
 8001a2e:	4319      	orrs	r1, r3
 8001a30:	0f4b      	lsrs	r3, r1, #29
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	08c9      	lsrs	r1, r1, #3
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	e62c      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4329      	orrs	r1, r5
 8001a42:	d000      	beq.n	8001a46 <__aeabi_dadd+0x642>
 8001a44:	e5fa      	b.n	800163c <__aeabi_dadd+0x238>
 8001a46:	2300      	movs	r3, #0
 8001a48:	000a      	movs	r2, r1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	e602      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a4e:	076b      	lsls	r3, r5, #29
 8001a50:	08f9      	lsrs	r1, r7, #3
 8001a52:	4319      	orrs	r1, r3
 8001a54:	08eb      	lsrs	r3, r5, #3
 8001a56:	e5fd      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	08f9      	lsrs	r1, r7, #3
 8001a5c:	075b      	lsls	r3, r3, #29
 8001a5e:	4319      	orrs	r1, r3
 8001a60:	4663      	mov	r3, ip
 8001a62:	0004      	movs	r4, r0
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	e617      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a68:	003d      	movs	r5, r7
 8001a6a:	444d      	add	r5, r9
 8001a6c:	4463      	add	r3, ip
 8001a6e:	454d      	cmp	r5, r9
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	4249      	negs	r1, r1
 8001a76:	4488      	add	r8, r1
 8001a78:	4643      	mov	r3, r8
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dadd+0x67c>
 8001a7e:	e5dd      	b.n	800163c <__aeabi_dadd+0x238>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e5d7      	b.n	800163c <__aeabi_dadd+0x238>
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	001e      	movs	r6, r3
 8001a90:	3820      	subs	r0, #32
 8001a92:	40c6      	lsrs	r6, r0
 8001a94:	2a20      	cmp	r2, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dadd+0x6a0>
 8001a98:	2040      	movs	r0, #64	; 0x40
 8001a9a:	1a82      	subs	r2, r0, r2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	464d      	mov	r5, r9
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	419d      	sbcs	r5, r3
 8001aaa:	4335      	orrs	r5, r6
 8001aac:	e621      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e540      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	19d5      	adds	r5, r2, r7
 8001aba:	42bd      	cmp	r5, r7
 8001abc:	4189      	sbcs	r1, r1
 8001abe:	4463      	add	r3, ip
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4249      	negs	r1, r1
 8001ac4:	4488      	add	r8, r1
 8001ac6:	e5b3      	b.n	8001630 <__aeabi_dadd+0x22c>
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 8001acc:	000b      	movs	r3, r1
 8001ace:	e533      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff

08001ad8 <__aeabi_ddiv>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	4657      	mov	r7, sl
 8001adc:	464e      	mov	r6, r9
 8001ade:	4645      	mov	r5, r8
 8001ae0:	46de      	mov	lr, fp
 8001ae2:	b5e0      	push	{r5, r6, r7, lr}
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	0048      	lsls	r0, r1, #1
 8001aec:	4692      	mov	sl, r2
 8001aee:	001f      	movs	r7, r3
 8001af0:	b085      	sub	sp, #20
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d40      	lsrs	r0, r0, #21
 8001af6:	0fce      	lsrs	r6, r1, #31
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d059      	beq.n	8001bb0 <__aeabi_ddiv+0xd8>
 8001afc:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x2c>
 8001b02:	e098      	b.n	8001c36 <__aeabi_ddiv+0x15e>
 8001b04:	0f6b      	lsrs	r3, r5, #29
 8001b06:	00e4      	lsls	r4, r4, #3
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	4698      	mov	r8, r3
 8001b12:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b14:	00ed      	lsls	r5, r5, #3
 8001b16:	469b      	mov	fp, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	4483      	add	fp, r0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	033c      	lsls	r4, r7, #12
 8001b22:	007b      	lsls	r3, r7, #1
 8001b24:	4650      	mov	r0, sl
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	0d5b      	lsrs	r3, r3, #21
 8001b2a:	0fff      	lsrs	r7, r7, #31
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d067      	beq.n	8001c00 <__aeabi_ddiv+0x128>
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <__aeabi_ddiv+0x90>
 8001b36:	497a      	ldr	r1, [pc, #488]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b38:	0f42      	lsrs	r2, r0, #29
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	00e4      	lsls	r4, r4, #3
 8001b3e:	4659      	mov	r1, fp
 8001b40:	4314      	orrs	r4, r2
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4463      	add	r3, ip
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	00c2      	lsls	r2, r0, #3
 8001b50:	2000      	movs	r0, #0
 8001b52:	0033      	movs	r3, r6
 8001b54:	407b      	eors	r3, r7
 8001b56:	469a      	mov	sl, r3
 8001b58:	464b      	mov	r3, r9
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x88>
 8001b5e:	e0ef      	b.n	8001d40 <__aeabi_ddiv+0x268>
 8001b60:	4970      	ldr	r1, [pc, #448]	; (8001d24 <__aeabi_ddiv+0x24c>)
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	58cb      	ldr	r3, [r1, r3]
 8001b66:	469f      	mov	pc, r3
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <__aeabi_ddiv+0x250>)
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	4322      	orrs	r2, r4
 8001b70:	44e3      	add	fp, ip
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0xa0>
 8001b76:	e095      	b.n	8001ca4 <__aeabi_ddiv+0x1cc>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2400      	movs	r4, #0
 8001b82:	2002      	movs	r0, #2
 8001b84:	e7e5      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4323      	orrs	r3, r4
 8001b92:	07d2      	lsls	r2, r2, #31
 8001b94:	4313      	orrs	r3, r2
 8001b96:	0028      	movs	r0, r5
 8001b98:	0019      	movs	r1, r3
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2500      	movs	r5, #0
 8001bac:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001bae:	e7ed      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0xe2>
 8001bb8:	e089      	b.n	8001cce <__aeabi_ddiv+0x1f6>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0xe8>
 8001bbe:	e1e0      	b.n	8001f82 <__aeabi_ddiv+0x4aa>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb07 	bl	80031d4 <__clzsi2>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	0002      	movs	r2, r0
 8001bca:	390b      	subs	r1, #11
 8001bcc:	231d      	movs	r3, #29
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	3808      	subs	r0, #8
 8001bd8:	4084      	lsls	r4, r0
 8001bda:	000b      	movs	r3, r1
 8001bdc:	464d      	mov	r5, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4698      	mov	r8, r3
 8001be2:	4085      	lsls	r5, r0
 8001be4:	4851      	ldr	r0, [pc, #324]	; (8001d2c <__aeabi_ddiv+0x254>)
 8001be6:	033c      	lsls	r4, r7, #12
 8001be8:	1a83      	subs	r3, r0, r2
 8001bea:	469b      	mov	fp, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	007b      	lsls	r3, r7, #1
 8001bf4:	4650      	mov	r0, sl
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	0fff      	lsrs	r7, r7, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d197      	bne.n	8001b30 <__aeabi_ddiv+0x58>
 8001c00:	4652      	mov	r2, sl
 8001c02:	4322      	orrs	r2, r4
 8001c04:	d055      	beq.n	8001cb2 <__aeabi_ddiv+0x1da>
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x134>
 8001c0a:	e1ca      	b.n	8001fa2 <__aeabi_ddiv+0x4ca>
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f001 fae1 	bl	80031d4 <__clzsi2>
 8001c12:	0002      	movs	r2, r0
 8001c14:	3a0b      	subs	r2, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	0001      	movs	r1, r0
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	3908      	subs	r1, #8
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	408c      	lsls	r4, r1
 8001c24:	4314      	orrs	r4, r2
 8001c26:	4652      	mov	r2, sl
 8001c28:	408a      	lsls	r2, r1
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <__aeabi_ddiv+0x258>)
 8001c2c:	4458      	add	r0, fp
 8001c2e:	469b      	mov	fp, r3
 8001c30:	4483      	add	fp, r0
 8001c32:	2000      	movs	r0, #0
 8001c34:	e78d      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001c36:	464b      	mov	r3, r9
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	d140      	bne.n	8001cc0 <__aeabi_ddiv+0x1e8>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	4699      	mov	r9, r3
 8001c42:	3b06      	subs	r3, #6
 8001c44:	2500      	movs	r5, #0
 8001c46:	4683      	mov	fp, r0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	e769      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001c4c:	46b2      	mov	sl, r6
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d0a9      	beq.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x182>
 8001c58:	e211      	b.n	800207e <__aeabi_ddiv+0x5a6>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d093      	beq.n	8001b86 <__aeabi_ddiv+0xae>
 8001c5e:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <__aeabi_ddiv+0x25c>)
 8001c60:	445a      	add	r2, fp
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_ddiv+0x190>
 8001c66:	e13c      	b.n	8001ee2 <__aeabi_ddiv+0x40a>
 8001c68:	076b      	lsls	r3, r5, #29
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_ddiv+0x196>
 8001c6c:	e1a7      	b.n	8001fbe <__aeabi_ddiv+0x4e6>
 8001c6e:	08ed      	lsrs	r5, r5, #3
 8001c70:	4643      	mov	r3, r8
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	d506      	bpl.n	8001c84 <__aeabi_ddiv+0x1ac>
 8001c76:	4642      	mov	r2, r8
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <__aeabi_ddiv+0x260>)
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	00d2      	lsls	r2, r2, #3
 8001c82:	445a      	add	r2, fp
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <__aeabi_ddiv+0x264>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dc8e      	bgt.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	0552      	lsls	r2, r2, #21
 8001c8e:	0758      	lsls	r0, r3, #29
 8001c90:	025c      	lsls	r4, r3, #9
 8001c92:	4305      	orrs	r5, r0
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d53      	lsrs	r3, r2, #21
 8001c98:	e778      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001c9a:	46ba      	mov	sl, r7
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	0015      	movs	r5, r2
 8001ca0:	9000      	str	r0, [sp, #0]
 8001ca2:	e7d4      	b.n	8001c4e <__aeabi_ddiv+0x176>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4691      	mov	r9, r2
 8001cac:	2003      	movs	r0, #3
 8001cae:	4652      	mov	r2, sl
 8001cb0:	e74f      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	4689      	mov	r9, r1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e748      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	3b09      	subs	r3, #9
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	4683      	mov	fp, r0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	e728      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2500      	movs	r5, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	e720      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	469a      	mov	sl, r3
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	e74f      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	4641      	mov	r1, r8
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	4219      	tst	r1, r3
 8001cf4:	d008      	beq.n	8001d08 <__aeabi_ddiv+0x230>
 8001cf6:	421c      	tst	r4, r3
 8001cf8:	d106      	bne.n	8001d08 <__aeabi_ddiv+0x230>
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	0324      	lsls	r4, r4, #12
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	0015      	movs	r5, r2
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e741      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	46b2      	mov	sl, r6
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e738      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	080134fc 	.word	0x080134fc
 8001d28:	fffff801 	.word	0xfffff801
 8001d2c:	fffffc0d 	.word	0xfffffc0d
 8001d30:	000003f3 	.word	0x000003f3
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	4544      	cmp	r4, r8
 8001d42:	d200      	bcs.n	8001d46 <__aeabi_ddiv+0x26e>
 8001d44:	e116      	b.n	8001f74 <__aeabi_ddiv+0x49c>
 8001d46:	d100      	bne.n	8001d4a <__aeabi_ddiv+0x272>
 8001d48:	e111      	b.n	8001f6e <__aeabi_ddiv+0x496>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	469c      	mov	ip, r3
 8001d50:	002e      	movs	r6, r5
 8001d52:	4640      	mov	r0, r8
 8001d54:	2500      	movs	r5, #0
 8001d56:	44e3      	add	fp, ip
 8001d58:	0223      	lsls	r3, r4, #8
 8001d5a:	0e14      	lsrs	r4, r2, #24
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	4699      	mov	r9, r3
 8001d62:	0423      	lsls	r3, r4, #16
 8001d64:	0c1f      	lsrs	r7, r3, #16
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	9701      	str	r7, [sp, #4]
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_uidivmod>
 8001d72:	0002      	movs	r2, r0
 8001d74:	437a      	muls	r2, r7
 8001d76:	040b      	lsls	r3, r1, #16
 8001d78:	0c31      	lsrs	r1, r6, #16
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	d90b      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d82:	2301      	movs	r3, #1
 8001d84:	425b      	negs	r3, r3
 8001d86:	469c      	mov	ip, r3
 8001d88:	1909      	adds	r1, r1, r4
 8001d8a:	44e0      	add	r8, ip
 8001d8c:	428c      	cmp	r4, r1
 8001d8e:	d804      	bhi.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d902      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	4698      	mov	r8, r3
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	1a88      	subs	r0, r1, r2
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	f7fe fa3f 	bl	8000220 <__aeabi_uidivmod>
 8001da2:	0409      	lsls	r1, r1, #16
 8001da4:	468c      	mov	ip, r1
 8001da6:	0431      	lsls	r1, r6, #16
 8001da8:	4666      	mov	r6, ip
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	0c09      	lsrs	r1, r1, #16
 8001dae:	4342      	muls	r2, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	4331      	orrs	r1, r6
 8001db4:	428a      	cmp	r2, r1
 8001db6:	d904      	bls.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001db8:	1909      	adds	r1, r1, r4
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	428c      	cmp	r4, r1
 8001dbe:	d800      	bhi.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001dc0:	e111      	b.n	8001fe6 <__aeabi_ddiv+0x50e>
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	9e00      	ldr	r6, [sp, #0]
 8001dc8:	0412      	lsls	r2, r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	0c33      	lsrs	r3, r6, #16
 8001dce:	001f      	movs	r7, r3
 8001dd0:	0c10      	lsrs	r0, r2, #16
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	0413      	lsls	r3, r2, #16
 8001dd8:	0432      	lsls	r2, r6, #16
 8001dda:	0c16      	lsrs	r6, r2, #16
 8001ddc:	0032      	movs	r2, r6
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	435a      	muls	r2, r3
 8001de2:	9603      	str	r6, [sp, #12]
 8001de4:	437b      	muls	r3, r7
 8001de6:	4346      	muls	r6, r0
 8001de8:	4378      	muls	r0, r7
 8001dea:	0c17      	lsrs	r7, r2, #16
 8001dec:	46bc      	mov	ip, r7
 8001dee:	199b      	adds	r3, r3, r6
 8001df0:	4463      	add	r3, ip
 8001df2:	429e      	cmp	r6, r3
 8001df4:	d903      	bls.n	8001dfe <__aeabi_ddiv+0x326>
 8001df6:	2680      	movs	r6, #128	; 0x80
 8001df8:	0276      	lsls	r6, r6, #9
 8001dfa:	46b4      	mov	ip, r6
 8001dfc:	4460      	add	r0, ip
 8001dfe:	0c1e      	lsrs	r6, r3, #16
 8001e00:	1830      	adds	r0, r6, r0
 8001e02:	0416      	lsls	r6, r2, #16
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c36      	lsrs	r6, r6, #16
 8001e08:	199e      	adds	r6, r3, r6
 8001e0a:	4281      	cmp	r1, r0
 8001e0c:	d200      	bcs.n	8001e10 <__aeabi_ddiv+0x338>
 8001e0e:	e09c      	b.n	8001f4a <__aeabi_ddiv+0x472>
 8001e10:	d100      	bne.n	8001e14 <__aeabi_ddiv+0x33c>
 8001e12:	e097      	b.n	8001f44 <__aeabi_ddiv+0x46c>
 8001e14:	1bae      	subs	r6, r5, r6
 8001e16:	1a09      	subs	r1, r1, r0
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	4180      	sbcs	r0, r0
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	1a08      	subs	r0, r1, r0
 8001e20:	4284      	cmp	r4, r0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x34e>
 8001e24:	e111      	b.n	800204a <__aeabi_ddiv+0x572>
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe f9fa 	bl	8000220 <__aeabi_uidivmod>
 8001e2c:	9a01      	ldr	r2, [sp, #4]
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0c31      	lsrs	r1, r6, #16
 8001e34:	0005      	movs	r5, r0
 8001e36:	4319      	orrs	r1, r3
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d907      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e3c:	1909      	adds	r1, r1, r4
 8001e3e:	3d01      	subs	r5, #1
 8001e40:	428c      	cmp	r4, r1
 8001e42:	d803      	bhi.n	8001e4c <__aeabi_ddiv+0x374>
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d901      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e48:	1e85      	subs	r5, r0, #2
 8001e4a:	1909      	adds	r1, r1, r4
 8001e4c:	1a88      	subs	r0, r1, r2
 8001e4e:	4649      	mov	r1, r9
 8001e50:	f7fe f9e6 	bl	8000220 <__aeabi_uidivmod>
 8001e54:	0409      	lsls	r1, r1, #16
 8001e56:	468c      	mov	ip, r1
 8001e58:	0431      	lsls	r1, r6, #16
 8001e5a:	4666      	mov	r6, ip
 8001e5c:	9a01      	ldr	r2, [sp, #4]
 8001e5e:	0c09      	lsrs	r1, r1, #16
 8001e60:	4342      	muls	r2, r0
 8001e62:	0003      	movs	r3, r0
 8001e64:	4331      	orrs	r1, r6
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d907      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e6a:	1909      	adds	r1, r1, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	428c      	cmp	r4, r1
 8001e70:	d803      	bhi.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d901      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e76:	1e83      	subs	r3, r0, #2
 8001e78:	1909      	adds	r1, r1, r4
 8001e7a:	9e03      	ldr	r6, [sp, #12]
 8001e7c:	1a89      	subs	r1, r1, r2
 8001e7e:	0032      	movs	r2, r6
 8001e80:	042d      	lsls	r5, r5, #16
 8001e82:	431d      	orrs	r5, r3
 8001e84:	9f02      	ldr	r7, [sp, #8]
 8001e86:	042b      	lsls	r3, r5, #16
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	435a      	muls	r2, r3
 8001e8c:	437b      	muls	r3, r7
 8001e8e:	469c      	mov	ip, r3
 8001e90:	0c28      	lsrs	r0, r5, #16
 8001e92:	4346      	muls	r6, r0
 8001e94:	0c13      	lsrs	r3, r2, #16
 8001e96:	44b4      	add	ip, r6
 8001e98:	4463      	add	r3, ip
 8001e9a:	4378      	muls	r0, r7
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d903      	bls.n	8001ea8 <__aeabi_ddiv+0x3d0>
 8001ea0:	2680      	movs	r6, #128	; 0x80
 8001ea2:	0276      	lsls	r6, r6, #9
 8001ea4:	46b4      	mov	ip, r6
 8001ea6:	4460      	add	r0, ip
 8001ea8:	0c1e      	lsrs	r6, r3, #16
 8001eaa:	0412      	lsls	r2, r2, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c12      	lsrs	r2, r2, #16
 8001eb0:	1830      	adds	r0, r6, r0
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	d306      	bcc.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001eb8:	d002      	beq.n	8001ec0 <__aeabi_ddiv+0x3e8>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	431d      	orrs	r5, r3
 8001ebe:	e6ce      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001ec4:	e6cb      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec6:	1861      	adds	r1, r4, r1
 8001ec8:	1e6e      	subs	r6, r5, #1
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	d200      	bcs.n	8001ed0 <__aeabi_ddiv+0x3f8>
 8001ece:	e0a4      	b.n	800201a <__aeabi_ddiv+0x542>
 8001ed0:	4281      	cmp	r1, r0
 8001ed2:	d200      	bcs.n	8001ed6 <__aeabi_ddiv+0x3fe>
 8001ed4:	e0c9      	b.n	800206a <__aeabi_ddiv+0x592>
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x402>
 8001ed8:	e0d9      	b.n	800208e <__aeabi_ddiv+0x5b6>
 8001eda:	0035      	movs	r5, r6
 8001edc:	e7ed      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8001ede:	2501      	movs	r5, #1
 8001ee0:	426d      	negs	r5, r5
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	1a89      	subs	r1, r1, r2
 8001ee6:	2938      	cmp	r1, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_ddiv+0x414>
 8001eea:	e64c      	b.n	8001b86 <__aeabi_ddiv+0xae>
 8001eec:	291f      	cmp	r1, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x41a>
 8001ef0:	e07f      	b.n	8001ff2 <__aeabi_ddiv+0x51a>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	1a9a      	subs	r2, r3, r2
 8001ef8:	4643      	mov	r3, r8
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	2920      	cmp	r1, #32
 8001efe:	d004      	beq.n	8001f0a <__aeabi_ddiv+0x432>
 8001f00:	4644      	mov	r4, r8
 8001f02:	4a65      	ldr	r2, [pc, #404]	; (8002098 <__aeabi_ddiv+0x5c0>)
 8001f04:	445a      	add	r2, fp
 8001f06:	4094      	lsls	r4, r2
 8001f08:	4325      	orrs	r5, r4
 8001f0a:	1e6a      	subs	r2, r5, #1
 8001f0c:	4195      	sbcs	r5, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	432b      	orrs	r3, r5
 8001f12:	0015      	movs	r5, r2
 8001f14:	2400      	movs	r4, #0
 8001f16:	401d      	ands	r5, r3
 8001f18:	421a      	tst	r2, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x446>
 8001f1c:	e0a1      	b.n	8002062 <__aeabi_ddiv+0x58a>
 8001f1e:	220f      	movs	r2, #15
 8001f20:	2400      	movs	r4, #0
 8001f22:	401a      	ands	r2, r3
 8001f24:	2a04      	cmp	r2, #4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8001f28:	e098      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	0222      	lsls	r2, r4, #8
 8001f38:	d400      	bmi.n	8001f3c <__aeabi_ddiv+0x464>
 8001f3a:	e08f      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2500      	movs	r5, #0
 8001f42:	e623      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001f44:	42b5      	cmp	r5, r6
 8001f46:	d300      	bcc.n	8001f4a <__aeabi_ddiv+0x472>
 8001f48:	e764      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	9b00      	ldr	r3, [sp, #0]
 8001f50:	469c      	mov	ip, r3
 8001f52:	4465      	add	r5, ip
 8001f54:	001f      	movs	r7, r3
 8001f56:	429d      	cmp	r5, r3
 8001f58:	419b      	sbcs	r3, r3
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	191b      	adds	r3, r3, r4
 8001f5e:	18c9      	adds	r1, r1, r3
 8001f60:	428c      	cmp	r4, r1
 8001f62:	d23a      	bcs.n	8001fda <__aeabi_ddiv+0x502>
 8001f64:	4288      	cmp	r0, r1
 8001f66:	d863      	bhi.n	8002030 <__aeabi_ddiv+0x558>
 8001f68:	d060      	beq.n	800202c <__aeabi_ddiv+0x554>
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	e752      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f6e:	42aa      	cmp	r2, r5
 8001f70:	d900      	bls.n	8001f74 <__aeabi_ddiv+0x49c>
 8001f72:	e6ea      	b.n	8001d4a <__aeabi_ddiv+0x272>
 8001f74:	4643      	mov	r3, r8
 8001f76:	07de      	lsls	r6, r3, #31
 8001f78:	0858      	lsrs	r0, r3, #1
 8001f7a:	086b      	lsrs	r3, r5, #1
 8001f7c:	431e      	orrs	r6, r3
 8001f7e:	07ed      	lsls	r5, r5, #31
 8001f80:	e6ea      	b.n	8001d58 <__aeabi_ddiv+0x280>
 8001f82:	4648      	mov	r0, r9
 8001f84:	f001 f926 	bl	80031d4 <__clzsi2>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	3115      	adds	r1, #21
 8001f8e:	3220      	adds	r2, #32
 8001f90:	291c      	cmp	r1, #28
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x4be>
 8001f94:	e61a      	b.n	8001bcc <__aeabi_ddiv+0xf4>
 8001f96:	464b      	mov	r3, r9
 8001f98:	3808      	subs	r0, #8
 8001f9a:	4083      	lsls	r3, r0
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	e620      	b.n	8001be4 <__aeabi_ddiv+0x10c>
 8001fa2:	f001 f917 	bl	80031d4 <__clzsi2>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	3215      	adds	r2, #21
 8001fac:	3020      	adds	r0, #32
 8001fae:	2a1c      	cmp	r2, #28
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_ddiv+0x4dc>
 8001fb2:	e630      	b.n	8001c16 <__aeabi_ddiv+0x13e>
 8001fb4:	4654      	mov	r4, sl
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	2200      	movs	r2, #0
 8001fba:	409c      	lsls	r4, r3
 8001fbc:	e635      	b.n	8001c2a <__aeabi_ddiv+0x152>
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	402b      	ands	r3, r5
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_ddiv+0x4f0>
 8001fc6:	e652      	b.n	8001c6e <__aeabi_ddiv+0x196>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	425b      	negs	r3, r3
 8001fcc:	42ab      	cmp	r3, r5
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	3504      	adds	r5, #4
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	08ed      	lsrs	r5, r5, #3
 8001fd6:	4498      	add	r8, r3
 8001fd8:	e64a      	b.n	8001c70 <__aeabi_ddiv+0x198>
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d1c5      	bne.n	8001f6a <__aeabi_ddiv+0x492>
 8001fde:	42af      	cmp	r7, r5
 8001fe0:	d9c0      	bls.n	8001f64 <__aeabi_ddiv+0x48c>
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	e716      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x514>
 8001fea:	e6ea      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001fec:	1e83      	subs	r3, r0, #2
 8001fee:	1909      	adds	r1, r1, r4
 8001ff0:	e6e7      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <__aeabi_ddiv+0x5c4>)
 8001ff4:	0028      	movs	r0, r5
 8001ff6:	445a      	add	r2, fp
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	4095      	lsls	r5, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	1e6a      	subs	r2, r5, #1
 8002002:	4195      	sbcs	r5, r2
 8002004:	4644      	mov	r4, r8
 8002006:	4303      	orrs	r3, r0
 8002008:	432b      	orrs	r3, r5
 800200a:	40cc      	lsrs	r4, r1
 800200c:	075a      	lsls	r2, r3, #29
 800200e:	d092      	beq.n	8001f36 <__aeabi_ddiv+0x45e>
 8002010:	220f      	movs	r2, #15
 8002012:	401a      	ands	r2, r3
 8002014:	2a04      	cmp	r2, #4
 8002016:	d188      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8002018:	e78d      	b.n	8001f36 <__aeabi_ddiv+0x45e>
 800201a:	0035      	movs	r5, r6
 800201c:	4281      	cmp	r1, r0
 800201e:	d000      	beq.n	8002022 <__aeabi_ddiv+0x54a>
 8002020:	e74b      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	4293      	cmp	r3, r2
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x552>
 8002028:	e747      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 800202a:	e618      	b.n	8001c5e <__aeabi_ddiv+0x186>
 800202c:	42ae      	cmp	r6, r5
 800202e:	d99c      	bls.n	8001f6a <__aeabi_ddiv+0x492>
 8002030:	2302      	movs	r3, #2
 8002032:	425b      	negs	r3, r3
 8002034:	469c      	mov	ip, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	44e0      	add	r8, ip
 800203a:	469c      	mov	ip, r3
 800203c:	4465      	add	r5, ip
 800203e:	429d      	cmp	r5, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	425b      	negs	r3, r3
 8002044:	191b      	adds	r3, r3, r4
 8002046:	18c9      	adds	r1, r1, r3
 8002048:	e6e4      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <__aeabi_ddiv+0x5c8>)
 800204c:	445a      	add	r2, fp
 800204e:	2a00      	cmp	r2, #0
 8002050:	dc00      	bgt.n	8002054 <__aeabi_ddiv+0x57c>
 8002052:	e744      	b.n	8001ede <__aeabi_ddiv+0x406>
 8002054:	2301      	movs	r3, #1
 8002056:	2500      	movs	r5, #0
 8002058:	4498      	add	r8, r3
 800205a:	e609      	b.n	8001c70 <__aeabi_ddiv+0x198>
 800205c:	0765      	lsls	r5, r4, #29
 800205e:	0264      	lsls	r4, r4, #9
 8002060:	0b24      	lsrs	r4, r4, #12
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	431d      	orrs	r5, r3
 8002066:	2300      	movs	r3, #0
 8002068:	e590      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800206a:	9e00      	ldr	r6, [sp, #0]
 800206c:	3d02      	subs	r5, #2
 800206e:	0072      	lsls	r2, r6, #1
 8002070:	42b2      	cmp	r2, r6
 8002072:	41bf      	sbcs	r7, r7
 8002074:	427f      	negs	r7, r7
 8002076:	193c      	adds	r4, r7, r4
 8002078:	1909      	adds	r1, r1, r4
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	e7ce      	b.n	800201c <__aeabi_ddiv+0x544>
 800207e:	2480      	movs	r4, #128	; 0x80
 8002080:	4643      	mov	r3, r8
 8002082:	0324      	lsls	r4, r4, #12
 8002084:	431c      	orrs	r4, r3
 8002086:	0324      	lsls	r4, r4, #12
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__aeabi_ddiv+0x5cc>)
 800208a:	0b24      	lsrs	r4, r4, #12
 800208c:	e57e      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ea      	bcc.n	800206a <__aeabi_ddiv+0x592>
 8002094:	0035      	movs	r5, r6
 8002096:	e7c4      	b.n	8002022 <__aeabi_ddiv+0x54a>
 8002098:	0000043e 	.word	0x0000043e
 800209c:	0000041e 	.word	0x0000041e
 80020a0:	000003ff 	.word	0x000003ff
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__eqdf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	464f      	mov	r7, r9
 80020ac:	4646      	mov	r6, r8
 80020ae:	46d6      	mov	lr, sl
 80020b0:	4694      	mov	ip, r2
 80020b2:	4691      	mov	r9, r2
 80020b4:	031a      	lsls	r2, r3, #12
 80020b6:	0b12      	lsrs	r2, r2, #12
 80020b8:	4d18      	ldr	r5, [pc, #96]	; (800211c <__eqdf2+0x74>)
 80020ba:	b5c0      	push	{r6, r7, lr}
 80020bc:	004c      	lsls	r4, r1, #1
 80020be:	030f      	lsls	r7, r1, #12
 80020c0:	4692      	mov	sl, r2
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	0006      	movs	r6, r0
 80020c6:	4680      	mov	r8, r0
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	2001      	movs	r0, #1
 80020cc:	0d64      	lsrs	r4, r4, #21
 80020ce:	0fc9      	lsrs	r1, r1, #31
 80020d0:	0d52      	lsrs	r2, r2, #21
 80020d2:	0fdb      	lsrs	r3, r3, #31
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d00a      	beq.n	80020ee <__eqdf2+0x46>
 80020d8:	42aa      	cmp	r2, r5
 80020da:	d003      	beq.n	80020e4 <__eqdf2+0x3c>
 80020dc:	4294      	cmp	r4, r2
 80020de:	d101      	bne.n	80020e4 <__eqdf2+0x3c>
 80020e0:	4557      	cmp	r7, sl
 80020e2:	d00d      	beq.n	8002100 <__eqdf2+0x58>
 80020e4:	bce0      	pop	{r5, r6, r7}
 80020e6:	46ba      	mov	sl, r7
 80020e8:	46b1      	mov	r9, r6
 80020ea:	46a8      	mov	r8, r5
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	003d      	movs	r5, r7
 80020f0:	4335      	orrs	r5, r6
 80020f2:	d1f7      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f4:	42a2      	cmp	r2, r4
 80020f6:	d1f5      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f8:	4652      	mov	r2, sl
 80020fa:	4665      	mov	r5, ip
 80020fc:	432a      	orrs	r2, r5
 80020fe:	d1f1      	bne.n	80020e4 <__eqdf2+0x3c>
 8002100:	2001      	movs	r0, #1
 8002102:	45c8      	cmp	r8, r9
 8002104:	d1ee      	bne.n	80020e4 <__eqdf2+0x3c>
 8002106:	4299      	cmp	r1, r3
 8002108:	d006      	beq.n	8002118 <__eqdf2+0x70>
 800210a:	2c00      	cmp	r4, #0
 800210c:	d1ea      	bne.n	80020e4 <__eqdf2+0x3c>
 800210e:	433e      	orrs	r6, r7
 8002110:	0030      	movs	r0, r6
 8002112:	1e46      	subs	r6, r0, #1
 8002114:	41b0      	sbcs	r0, r6
 8002116:	e7e5      	b.n	80020e4 <__eqdf2+0x3c>
 8002118:	2000      	movs	r0, #0
 800211a:	e7e3      	b.n	80020e4 <__eqdf2+0x3c>
 800211c:	000007ff 	.word	0x000007ff

08002120 <__gedf2>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	464e      	mov	r6, r9
 8002124:	4645      	mov	r5, r8
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	0004      	movs	r4, r0
 800212c:	0018      	movs	r0, r3
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0016      	movs	r6, r2
 8002132:	031b      	lsls	r3, r3, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	4d32      	ldr	r5, [pc, #200]	; (8002200 <__gedf2+0xe0>)
 8002138:	030f      	lsls	r7, r1, #12
 800213a:	004a      	lsls	r2, r1, #1
 800213c:	4699      	mov	r9, r3
 800213e:	0043      	lsls	r3, r0, #1
 8002140:	46a4      	mov	ip, r4
 8002142:	46b0      	mov	r8, r6
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	0d5b      	lsrs	r3, r3, #21
 800214c:	0fc0      	lsrs	r0, r0, #31
 800214e:	42aa      	cmp	r2, r5
 8002150:	d029      	beq.n	80021a6 <__gedf2+0x86>
 8002152:	42ab      	cmp	r3, r5
 8002154:	d018      	beq.n	8002188 <__gedf2+0x68>
 8002156:	2a00      	cmp	r2, #0
 8002158:	d12a      	bne.n	80021b0 <__gedf2+0x90>
 800215a:	433c      	orrs	r4, r7
 800215c:	46a3      	mov	fp, r4
 800215e:	4265      	negs	r5, r4
 8002160:	4165      	adcs	r5, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <__gedf2+0x4c>
 8002166:	464c      	mov	r4, r9
 8002168:	4326      	orrs	r6, r4
 800216a:	d027      	beq.n	80021bc <__gedf2+0x9c>
 800216c:	2d00      	cmp	r5, #0
 800216e:	d115      	bne.n	800219c <__gedf2+0x7c>
 8002170:	4281      	cmp	r1, r0
 8002172:	d028      	beq.n	80021c6 <__gedf2+0xa6>
 8002174:	2002      	movs	r0, #2
 8002176:	3901      	subs	r1, #1
 8002178:	4008      	ands	r0, r1
 800217a:	3801      	subs	r0, #1
 800217c:	bcf0      	pop	{r4, r5, r6, r7}
 800217e:	46bb      	mov	fp, r7
 8002180:	46b2      	mov	sl, r6
 8002182:	46a9      	mov	r9, r5
 8002184:	46a0      	mov	r8, r4
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d12f      	bne.n	80021ee <__gedf2+0xce>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ee      	bne.n	8002170 <__gedf2+0x50>
 8002192:	433c      	orrs	r4, r7
 8002194:	4265      	negs	r5, r4
 8002196:	4165      	adcs	r5, r4
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e9      	beq.n	8002170 <__gedf2+0x50>
 800219c:	2800      	cmp	r0, #0
 800219e:	d1ed      	bne.n	800217c <__gedf2+0x5c>
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7ea      	b.n	800217c <__gedf2+0x5c>
 80021a6:	003d      	movs	r5, r7
 80021a8:	4325      	orrs	r5, r4
 80021aa:	d120      	bne.n	80021ee <__gedf2+0xce>
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d0eb      	beq.n	8002188 <__gedf2+0x68>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1dd      	bne.n	8002170 <__gedf2+0x50>
 80021b4:	464c      	mov	r4, r9
 80021b6:	4326      	orrs	r6, r4
 80021b8:	d1da      	bne.n	8002170 <__gedf2+0x50>
 80021ba:	e7db      	b.n	8002174 <__gedf2+0x54>
 80021bc:	465b      	mov	r3, fp
 80021be:	2000      	movs	r0, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0db      	beq.n	800217c <__gedf2+0x5c>
 80021c4:	e7d6      	b.n	8002174 <__gedf2+0x54>
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc0a      	bgt.n	80021e0 <__gedf2+0xc0>
 80021ca:	dbe7      	blt.n	800219c <__gedf2+0x7c>
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d8d1      	bhi.n	8002174 <__gedf2+0x54>
 80021d0:	d010      	beq.n	80021f4 <__gedf2+0xd4>
 80021d2:	2000      	movs	r0, #0
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d2d1      	bcs.n	800217c <__gedf2+0x5c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	d0e1      	beq.n	80021a0 <__gedf2+0x80>
 80021dc:	0008      	movs	r0, r1
 80021de:	e7cd      	b.n	800217c <__gedf2+0x5c>
 80021e0:	4243      	negs	r3, r0
 80021e2:	4158      	adcs	r0, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	4240      	negs	r0, r0
 80021e8:	4018      	ands	r0, r3
 80021ea:	3801      	subs	r0, #1
 80021ec:	e7c6      	b.n	800217c <__gedf2+0x5c>
 80021ee:	2002      	movs	r0, #2
 80021f0:	4240      	negs	r0, r0
 80021f2:	e7c3      	b.n	800217c <__gedf2+0x5c>
 80021f4:	45c4      	cmp	ip, r8
 80021f6:	d8bd      	bhi.n	8002174 <__gedf2+0x54>
 80021f8:	2000      	movs	r0, #0
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d2be      	bcs.n	800217c <__gedf2+0x5c>
 80021fe:	e7eb      	b.n	80021d8 <__gedf2+0xb8>
 8002200:	000007ff 	.word	0x000007ff

08002204 <__ledf2>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	464e      	mov	r6, r9
 8002208:	4645      	mov	r5, r8
 800220a:	4657      	mov	r7, sl
 800220c:	46de      	mov	lr, fp
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	b5e0      	push	{r5, r6, r7, lr}
 8002214:	0016      	movs	r6, r2
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	0b1b      	lsrs	r3, r3, #12
 800221a:	4d31      	ldr	r5, [pc, #196]	; (80022e0 <__ledf2+0xdc>)
 800221c:	030f      	lsls	r7, r1, #12
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	0043      	lsls	r3, r0, #1
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d011      	beq.n	800225a <__ledf2+0x56>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d014      	beq.n	8002264 <__ledf2+0x60>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d12f      	bne.n	800229e <__ledf2+0x9a>
 800223e:	433c      	orrs	r4, r7
 8002240:	46a3      	mov	fp, r4
 8002242:	4265      	negs	r5, r4
 8002244:	4165      	adcs	r5, r4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__ledf2+0x70>
 800224a:	464c      	mov	r4, r9
 800224c:	4326      	orrs	r6, r4
 800224e:	d111      	bne.n	8002274 <__ledf2+0x70>
 8002250:	465b      	mov	r3, fp
 8002252:	2000      	movs	r0, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <__ledf2+0x84>
 8002258:	e010      	b.n	800227c <__ledf2+0x78>
 800225a:	003d      	movs	r5, r7
 800225c:	4325      	orrs	r5, r4
 800225e:	d112      	bne.n	8002286 <__ledf2+0x82>
 8002260:	4293      	cmp	r3, r2
 8002262:	d11c      	bne.n	800229e <__ledf2+0x9a>
 8002264:	464d      	mov	r5, r9
 8002266:	432e      	orrs	r6, r5
 8002268:	d10d      	bne.n	8002286 <__ledf2+0x82>
 800226a:	2a00      	cmp	r2, #0
 800226c:	d104      	bne.n	8002278 <__ledf2+0x74>
 800226e:	433c      	orrs	r4, r7
 8002270:	4265      	negs	r5, r4
 8002272:	4165      	adcs	r5, r4
 8002274:	2d00      	cmp	r5, #0
 8002276:	d10d      	bne.n	8002294 <__ledf2+0x90>
 8002278:	4281      	cmp	r1, r0
 800227a:	d016      	beq.n	80022aa <__ledf2+0xa6>
 800227c:	2002      	movs	r0, #2
 800227e:	3901      	subs	r1, #1
 8002280:	4008      	ands	r0, r1
 8002282:	3801      	subs	r0, #1
 8002284:	e000      	b.n	8002288 <__ledf2+0x84>
 8002286:	2002      	movs	r0, #2
 8002288:	bcf0      	pop	{r4, r5, r6, r7}
 800228a:	46bb      	mov	fp, r7
 800228c:	46b2      	mov	sl, r6
 800228e:	46a9      	mov	r9, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f7      	bne.n	8002288 <__ledf2+0x84>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f4      	b.n	8002288 <__ledf2+0x84>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ea      	bne.n	8002278 <__ledf2+0x74>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e7      	bne.n	8002278 <__ledf2+0x74>
 80022a8:	e7e8      	b.n	800227c <__ledf2+0x78>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd06      	ble.n	80022bc <__ledf2+0xb8>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	2302      	movs	r3, #2
 80022b4:	4240      	negs	r0, r0
 80022b6:	4018      	ands	r0, r3
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7e5      	b.n	8002288 <__ledf2+0x84>
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbe9      	blt.n	8002294 <__ledf2+0x90>
 80022c0:	454f      	cmp	r7, r9
 80022c2:	d8db      	bhi.n	800227c <__ledf2+0x78>
 80022c4:	d006      	beq.n	80022d4 <__ledf2+0xd0>
 80022c6:	2000      	movs	r0, #0
 80022c8:	454f      	cmp	r7, r9
 80022ca:	d2dd      	bcs.n	8002288 <__ledf2+0x84>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d0e3      	beq.n	8002298 <__ledf2+0x94>
 80022d0:	0008      	movs	r0, r1
 80022d2:	e7d9      	b.n	8002288 <__ledf2+0x84>
 80022d4:	45c4      	cmp	ip, r8
 80022d6:	d8d1      	bhi.n	800227c <__ledf2+0x78>
 80022d8:	2000      	movs	r0, #0
 80022da:	45c4      	cmp	ip, r8
 80022dc:	d2d4      	bcs.n	8002288 <__ledf2+0x84>
 80022de:	e7f5      	b.n	80022cc <__ledf2+0xc8>
 80022e0:	000007ff 	.word	0x000007ff

080022e4 <__aeabi_dmul>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	464e      	mov	r6, r9
 80022ea:	4645      	mov	r5, r8
 80022ec:	46de      	mov	lr, fp
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	4698      	mov	r8, r3
 80022f2:	030c      	lsls	r4, r1, #12
 80022f4:	004b      	lsls	r3, r1, #1
 80022f6:	0006      	movs	r6, r0
 80022f8:	4692      	mov	sl, r2
 80022fa:	b087      	sub	sp, #28
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d5b      	lsrs	r3, r3, #21
 8002300:	0fcf      	lsrs	r7, r1, #31
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <__aeabi_dmul+0xfc>
 8002306:	4add      	ldr	r2, [pc, #884]	; (800267c <__aeabi_dmul+0x398>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x2a>
 800230c:	e086      	b.n	800241c <__aeabi_dmul+0x138>
 800230e:	0f42      	lsrs	r2, r0, #29
 8002310:	00e4      	lsls	r4, r4, #3
 8002312:	4314      	orrs	r4, r2
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0412      	lsls	r2, r2, #16
 8002318:	4314      	orrs	r4, r2
 800231a:	4ad9      	ldr	r2, [pc, #868]	; (8002680 <__aeabi_dmul+0x39c>)
 800231c:	00c5      	lsls	r5, r0, #3
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	4699      	mov	r9, r3
 8002328:	469b      	mov	fp, r3
 800232a:	4643      	mov	r3, r8
 800232c:	4642      	mov	r2, r8
 800232e:	031e      	lsls	r6, r3, #12
 8002330:	0fd2      	lsrs	r2, r2, #31
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4650      	mov	r0, sl
 8002336:	4690      	mov	r8, r2
 8002338:	0b36      	lsrs	r6, r6, #12
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x5c>
 800233e:	e078      	b.n	8002432 <__aeabi_dmul+0x14e>
 8002340:	4ace      	ldr	r2, [pc, #824]	; (800267c <__aeabi_dmul+0x398>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <__aeabi_dmul+0x9e>
 8002346:	49ce      	ldr	r1, [pc, #824]	; (8002680 <__aeabi_dmul+0x39c>)
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	468c      	mov	ip, r1
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	4463      	add	r3, ip
 8002350:	00f6      	lsls	r6, r6, #3
 8002352:	468c      	mov	ip, r1
 8002354:	4316      	orrs	r6, r2
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	449c      	add	ip, r3
 800235a:	0412      	lsls	r2, r2, #16
 800235c:	4663      	mov	r3, ip
 800235e:	4316      	orrs	r6, r2
 8002360:	00c2      	lsls	r2, r0, #3
 8002362:	2000      	movs	r0, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	9900      	ldr	r1, [sp, #0]
 8002368:	4643      	mov	r3, r8
 800236a:	3101      	adds	r1, #1
 800236c:	468c      	mov	ip, r1
 800236e:	4649      	mov	r1, r9
 8002370:	407b      	eors	r3, r7
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	290f      	cmp	r1, #15
 8002376:	d900      	bls.n	800237a <__aeabi_dmul+0x96>
 8002378:	e07e      	b.n	8002478 <__aeabi_dmul+0x194>
 800237a:	4bc2      	ldr	r3, [pc, #776]	; (8002684 <__aeabi_dmul+0x3a0>)
 800237c:	0089      	lsls	r1, r1, #2
 800237e:	5859      	ldr	r1, [r3, r1]
 8002380:	468f      	mov	pc, r1
 8002382:	4652      	mov	r2, sl
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4332      	orrs	r2, r6
 8002388:	d000      	beq.n	800238c <__aeabi_dmul+0xa8>
 800238a:	e156      	b.n	800263a <__aeabi_dmul+0x356>
 800238c:	49bb      	ldr	r1, [pc, #748]	; (800267c <__aeabi_dmul+0x398>)
 800238e:	2600      	movs	r6, #0
 8002390:	468c      	mov	ip, r1
 8002392:	4463      	add	r3, ip
 8002394:	4649      	mov	r1, r9
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	4319      	orrs	r1, r3
 800239c:	4689      	mov	r9, r1
 800239e:	2002      	movs	r0, #2
 80023a0:	e7e1      	b.n	8002366 <__aeabi_dmul+0x82>
 80023a2:	4643      	mov	r3, r8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	0034      	movs	r4, r6
 80023a8:	0015      	movs	r5, r2
 80023aa:	4683      	mov	fp, r0
 80023ac:	465b      	mov	r3, fp
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d05e      	beq.n	8002470 <__aeabi_dmul+0x18c>
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dmul+0xd4>
 80023b6:	e1f3      	b.n	80027a0 <__aeabi_dmul+0x4bc>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0xda>
 80023bc:	e118      	b.n	80025f0 <__aeabi_dmul+0x30c>
 80023be:	2200      	movs	r2, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2500      	movs	r5, #0
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	0512      	lsls	r2, r2, #20
 80023c8:	4322      	orrs	r2, r4
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0028      	movs	r0, r5
 80023d0:	0011      	movs	r1, r2
 80023d2:	b007      	add	sp, #28
 80023d4:	bcf0      	pop	{r4, r5, r6, r7}
 80023d6:	46bb      	mov	fp, r7
 80023d8:	46b2      	mov	sl, r6
 80023da:	46a9      	mov	r9, r5
 80023dc:	46a0      	mov	r8, r4
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e0:	0025      	movs	r5, r4
 80023e2:	4305      	orrs	r5, r0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x104>
 80023e6:	e141      	b.n	800266c <__aeabi_dmul+0x388>
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x10a>
 80023ec:	e1ad      	b.n	800274a <__aeabi_dmul+0x466>
 80023ee:	0020      	movs	r0, r4
 80023f0:	f000 fef0 	bl	80031d4 <__clzsi2>
 80023f4:	0001      	movs	r1, r0
 80023f6:	0002      	movs	r2, r0
 80023f8:	390b      	subs	r1, #11
 80023fa:	231d      	movs	r3, #29
 80023fc:	0010      	movs	r0, r2
 80023fe:	1a5b      	subs	r3, r3, r1
 8002400:	0031      	movs	r1, r6
 8002402:	0035      	movs	r5, r6
 8002404:	3808      	subs	r0, #8
 8002406:	4084      	lsls	r4, r0
 8002408:	40d9      	lsrs	r1, r3
 800240a:	4085      	lsls	r5, r0
 800240c:	430c      	orrs	r4, r1
 800240e:	489e      	ldr	r0, [pc, #632]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002410:	1a83      	subs	r3, r0, r2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	4699      	mov	r9, r3
 8002418:	469b      	mov	fp, r3
 800241a:	e786      	b.n	800232a <__aeabi_dmul+0x46>
 800241c:	0005      	movs	r5, r0
 800241e:	4325      	orrs	r5, r4
 8002420:	d000      	beq.n	8002424 <__aeabi_dmul+0x140>
 8002422:	e11c      	b.n	800265e <__aeabi_dmul+0x37a>
 8002424:	2208      	movs	r2, #8
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	2400      	movs	r4, #0
 800242c:	4691      	mov	r9, r2
 800242e:	469b      	mov	fp, r3
 8002430:	e77b      	b.n	800232a <__aeabi_dmul+0x46>
 8002432:	4652      	mov	r2, sl
 8002434:	4332      	orrs	r2, r6
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x156>
 8002438:	e10a      	b.n	8002650 <__aeabi_dmul+0x36c>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dmul+0x15c>
 800243e:	e176      	b.n	800272e <__aeabi_dmul+0x44a>
 8002440:	0030      	movs	r0, r6
 8002442:	f000 fec7 	bl	80031d4 <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	3a0b      	subs	r2, #11
 800244a:	231d      	movs	r3, #29
 800244c:	0001      	movs	r1, r0
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	4652      	mov	r2, sl
 8002452:	3908      	subs	r1, #8
 8002454:	40da      	lsrs	r2, r3
 8002456:	408e      	lsls	r6, r1
 8002458:	4316      	orrs	r6, r2
 800245a:	4652      	mov	r2, sl
 800245c:	408a      	lsls	r2, r1
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	4989      	ldr	r1, [pc, #548]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002462:	1a18      	subs	r0, r3, r0
 8002464:	0003      	movs	r3, r0
 8002466:	468c      	mov	ip, r1
 8002468:	4463      	add	r3, ip
 800246a:	2000      	movs	r0, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	e77a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002470:	2400      	movs	r4, #0
 8002472:	2500      	movs	r5, #0
 8002474:	4a81      	ldr	r2, [pc, #516]	; (800267c <__aeabi_dmul+0x398>)
 8002476:	e7a5      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002478:	0c2f      	lsrs	r7, r5, #16
 800247a:	042d      	lsls	r5, r5, #16
 800247c:	0c2d      	lsrs	r5, r5, #16
 800247e:	002b      	movs	r3, r5
 8002480:	0c11      	lsrs	r1, r2, #16
 8002482:	0412      	lsls	r2, r2, #16
 8002484:	0c12      	lsrs	r2, r2, #16
 8002486:	4353      	muls	r3, r2
 8002488:	4698      	mov	r8, r3
 800248a:	0013      	movs	r3, r2
 800248c:	0028      	movs	r0, r5
 800248e:	437b      	muls	r3, r7
 8002490:	4699      	mov	r9, r3
 8002492:	4348      	muls	r0, r1
 8002494:	4448      	add	r0, r9
 8002496:	4683      	mov	fp, r0
 8002498:	4640      	mov	r0, r8
 800249a:	000b      	movs	r3, r1
 800249c:	0c00      	lsrs	r0, r0, #16
 800249e:	4682      	mov	sl, r0
 80024a0:	4658      	mov	r0, fp
 80024a2:	437b      	muls	r3, r7
 80024a4:	4450      	add	r0, sl
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	4581      	cmp	r9, r0
 80024aa:	d906      	bls.n	80024ba <__aeabi_dmul+0x1d6>
 80024ac:	469a      	mov	sl, r3
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4699      	mov	r9, r3
 80024b4:	44ca      	add	sl, r9
 80024b6:	4653      	mov	r3, sl
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	0c03      	lsrs	r3, r0, #16
 80024bc:	469b      	mov	fp, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0400      	lsls	r0, r0, #16
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	4698      	mov	r8, r3
 80024c8:	0003      	movs	r3, r0
 80024ca:	4443      	add	r3, r8
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	0c33      	lsrs	r3, r6, #16
 80024d0:	4699      	mov	r9, r3
 80024d2:	002b      	movs	r3, r5
 80024d4:	0436      	lsls	r6, r6, #16
 80024d6:	0c36      	lsrs	r6, r6, #16
 80024d8:	4373      	muls	r3, r6
 80024da:	4698      	mov	r8, r3
 80024dc:	0033      	movs	r3, r6
 80024de:	437b      	muls	r3, r7
 80024e0:	469a      	mov	sl, r3
 80024e2:	464b      	mov	r3, r9
 80024e4:	435d      	muls	r5, r3
 80024e6:	435f      	muls	r7, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	4455      	add	r5, sl
 80024ec:	0c18      	lsrs	r0, r3, #16
 80024ee:	1940      	adds	r0, r0, r5
 80024f0:	4582      	cmp	sl, r0
 80024f2:	d903      	bls.n	80024fc <__aeabi_dmul+0x218>
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	469a      	mov	sl, r3
 80024fa:	4457      	add	r7, sl
 80024fc:	0c05      	lsrs	r5, r0, #16
 80024fe:	19eb      	adds	r3, r5, r7
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	4643      	mov	r3, r8
 8002504:	041d      	lsls	r5, r3, #16
 8002506:	0c2d      	lsrs	r5, r5, #16
 8002508:	0400      	lsls	r0, r0, #16
 800250a:	1940      	adds	r0, r0, r5
 800250c:	0c25      	lsrs	r5, r4, #16
 800250e:	0424      	lsls	r4, r4, #16
 8002510:	0c24      	lsrs	r4, r4, #16
 8002512:	0027      	movs	r7, r4
 8002514:	4357      	muls	r7, r2
 8002516:	436a      	muls	r2, r5
 8002518:	4690      	mov	r8, r2
 800251a:	002a      	movs	r2, r5
 800251c:	0c3b      	lsrs	r3, r7, #16
 800251e:	469a      	mov	sl, r3
 8002520:	434a      	muls	r2, r1
 8002522:	4361      	muls	r1, r4
 8002524:	4441      	add	r1, r8
 8002526:	4451      	add	r1, sl
 8002528:	4483      	add	fp, r0
 800252a:	4588      	cmp	r8, r1
 800252c:	d903      	bls.n	8002536 <__aeabi_dmul+0x252>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	4698      	mov	r8, r3
 8002534:	4442      	add	r2, r8
 8002536:	043f      	lsls	r7, r7, #16
 8002538:	0c0b      	lsrs	r3, r1, #16
 800253a:	0c3f      	lsrs	r7, r7, #16
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	19c9      	adds	r1, r1, r7
 8002540:	0027      	movs	r7, r4
 8002542:	4698      	mov	r8, r3
 8002544:	464b      	mov	r3, r9
 8002546:	4377      	muls	r7, r6
 8002548:	435c      	muls	r4, r3
 800254a:	436e      	muls	r6, r5
 800254c:	435d      	muls	r5, r3
 800254e:	0c3b      	lsrs	r3, r7, #16
 8002550:	4699      	mov	r9, r3
 8002552:	19a4      	adds	r4, r4, r6
 8002554:	444c      	add	r4, r9
 8002556:	4442      	add	r2, r8
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	42a6      	cmp	r6, r4
 800255c:	d904      	bls.n	8002568 <__aeabi_dmul+0x284>
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4698      	mov	r8, r3
 8002564:	4445      	add	r5, r8
 8002566:	9503      	str	r5, [sp, #12]
 8002568:	9b02      	ldr	r3, [sp, #8]
 800256a:	043f      	lsls	r7, r7, #16
 800256c:	445b      	add	r3, fp
 800256e:	001e      	movs	r6, r3
 8002570:	4283      	cmp	r3, r0
 8002572:	4180      	sbcs	r0, r0
 8002574:	0423      	lsls	r3, r4, #16
 8002576:	4698      	mov	r8, r3
 8002578:	9b05      	ldr	r3, [sp, #20]
 800257a:	0c3f      	lsrs	r7, r7, #16
 800257c:	4447      	add	r7, r8
 800257e:	4698      	mov	r8, r3
 8002580:	1876      	adds	r6, r6, r1
 8002582:	428e      	cmp	r6, r1
 8002584:	4189      	sbcs	r1, r1
 8002586:	4447      	add	r7, r8
 8002588:	4240      	negs	r0, r0
 800258a:	183d      	adds	r5, r7, r0
 800258c:	46a8      	mov	r8, r5
 800258e:	4693      	mov	fp, r2
 8002590:	4249      	negs	r1, r1
 8002592:	468a      	mov	sl, r1
 8002594:	44c3      	add	fp, r8
 8002596:	429f      	cmp	r7, r3
 8002598:	41bf      	sbcs	r7, r7
 800259a:	4580      	cmp	r8, r0
 800259c:	4180      	sbcs	r0, r0
 800259e:	9b03      	ldr	r3, [sp, #12]
 80025a0:	44da      	add	sl, fp
 80025a2:	4698      	mov	r8, r3
 80025a4:	4653      	mov	r3, sl
 80025a6:	4240      	negs	r0, r0
 80025a8:	427f      	negs	r7, r7
 80025aa:	4307      	orrs	r7, r0
 80025ac:	0c24      	lsrs	r4, r4, #16
 80025ae:	4593      	cmp	fp, r2
 80025b0:	4192      	sbcs	r2, r2
 80025b2:	458a      	cmp	sl, r1
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	193f      	adds	r7, r7, r4
 80025b8:	0ddc      	lsrs	r4, r3, #23
 80025ba:	9b04      	ldr	r3, [sp, #16]
 80025bc:	0275      	lsls	r5, r6, #9
 80025be:	431d      	orrs	r5, r3
 80025c0:	1e68      	subs	r0, r5, #1
 80025c2:	4185      	sbcs	r5, r0
 80025c4:	4653      	mov	r3, sl
 80025c6:	4252      	negs	r2, r2
 80025c8:	4249      	negs	r1, r1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	18bf      	adds	r7, r7, r2
 80025ce:	4447      	add	r7, r8
 80025d0:	0df6      	lsrs	r6, r6, #23
 80025d2:	027f      	lsls	r7, r7, #9
 80025d4:	4335      	orrs	r5, r6
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	433c      	orrs	r4, r7
 80025da:	4315      	orrs	r5, r2
 80025dc:	01fb      	lsls	r3, r7, #7
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dmul+0x2fe>
 80025e0:	e0c1      	b.n	8002766 <__aeabi_dmul+0x482>
 80025e2:	2101      	movs	r1, #1
 80025e4:	086a      	lsrs	r2, r5, #1
 80025e6:	400d      	ands	r5, r1
 80025e8:	4315      	orrs	r5, r2
 80025ea:	07e2      	lsls	r2, r4, #31
 80025ec:	4315      	orrs	r5, r2
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	4926      	ldr	r1, [pc, #152]	; (800268c <__aeabi_dmul+0x3a8>)
 80025f2:	4461      	add	r1, ip
 80025f4:	2900      	cmp	r1, #0
 80025f6:	dd56      	ble.n	80026a6 <__aeabi_dmul+0x3c2>
 80025f8:	076b      	lsls	r3, r5, #29
 80025fa:	d009      	beq.n	8002610 <__aeabi_dmul+0x32c>
 80025fc:	220f      	movs	r2, #15
 80025fe:	402a      	ands	r2, r5
 8002600:	2a04      	cmp	r2, #4
 8002602:	d005      	beq.n	8002610 <__aeabi_dmul+0x32c>
 8002604:	1d2a      	adds	r2, r5, #4
 8002606:	42aa      	cmp	r2, r5
 8002608:	41ad      	sbcs	r5, r5
 800260a:	426d      	negs	r5, r5
 800260c:	1964      	adds	r4, r4, r5
 800260e:	0015      	movs	r5, r2
 8002610:	01e3      	lsls	r3, r4, #7
 8002612:	d504      	bpl.n	800261e <__aeabi_dmul+0x33a>
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <__aeabi_dmul+0x3ac>)
 8002618:	00c9      	lsls	r1, r1, #3
 800261a:	4014      	ands	r4, r2
 800261c:	4461      	add	r1, ip
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <__aeabi_dmul+0x3b0>)
 8002620:	4291      	cmp	r1, r2
 8002622:	dd00      	ble.n	8002626 <__aeabi_dmul+0x342>
 8002624:	e724      	b.n	8002470 <__aeabi_dmul+0x18c>
 8002626:	0762      	lsls	r2, r4, #29
 8002628:	08ed      	lsrs	r5, r5, #3
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	0549      	lsls	r1, r1, #21
 800262e:	4315      	orrs	r5, r2
 8002630:	0b24      	lsrs	r4, r4, #12
 8002632:	0d4a      	lsrs	r2, r1, #21
 8002634:	e6c6      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002636:	9701      	str	r7, [sp, #4]
 8002638:	e6b8      	b.n	80023ac <__aeabi_dmul+0xc8>
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <__aeabi_dmul+0x398>)
 800263c:	2003      	movs	r0, #3
 800263e:	4694      	mov	ip, r2
 8002640:	4463      	add	r3, ip
 8002642:	464a      	mov	r2, r9
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2303      	movs	r3, #3
 8002648:	431a      	orrs	r2, r3
 800264a:	4691      	mov	r9, r2
 800264c:	4652      	mov	r2, sl
 800264e:	e68a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002650:	4649      	mov	r1, r9
 8002652:	2301      	movs	r3, #1
 8002654:	4319      	orrs	r1, r3
 8002656:	4689      	mov	r9, r1
 8002658:	2600      	movs	r6, #0
 800265a:	2001      	movs	r0, #1
 800265c:	e683      	b.n	8002366 <__aeabi_dmul+0x82>
 800265e:	220c      	movs	r2, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2303      	movs	r3, #3
 8002664:	0005      	movs	r5, r0
 8002666:	4691      	mov	r9, r2
 8002668:	469b      	mov	fp, r3
 800266a:	e65e      	b.n	800232a <__aeabi_dmul+0x46>
 800266c:	2304      	movs	r3, #4
 800266e:	4699      	mov	r9, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	2400      	movs	r4, #0
 8002678:	469b      	mov	fp, r3
 800267a:	e656      	b.n	800232a <__aeabi_dmul+0x46>
 800267c:	000007ff 	.word	0x000007ff
 8002680:	fffffc01 	.word	0xfffffc01
 8002684:	0801353c 	.word	0x0801353c
 8002688:	fffffc0d 	.word	0xfffffc0d
 800268c:	000003ff 	.word	0x000003ff
 8002690:	feffffff 	.word	0xfeffffff
 8002694:	000007fe 	.word	0x000007fe
 8002698:	2300      	movs	r3, #0
 800269a:	2480      	movs	r4, #128	; 0x80
 800269c:	2500      	movs	r5, #0
 800269e:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	0324      	lsls	r4, r4, #12
 80026a4:	e68e      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80026a6:	2001      	movs	r0, #1
 80026a8:	1a40      	subs	r0, r0, r1
 80026aa:	2838      	cmp	r0, #56	; 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x3cc>
 80026ae:	e686      	b.n	80023be <__aeabi_dmul+0xda>
 80026b0:	281f      	cmp	r0, #31
 80026b2:	dd5b      	ble.n	800276c <__aeabi_dmul+0x488>
 80026b4:	221f      	movs	r2, #31
 80026b6:	0023      	movs	r3, r4
 80026b8:	4252      	negs	r2, r2
 80026ba:	1a51      	subs	r1, r2, r1
 80026bc:	40cb      	lsrs	r3, r1
 80026be:	0019      	movs	r1, r3
 80026c0:	2820      	cmp	r0, #32
 80026c2:	d003      	beq.n	80026cc <__aeabi_dmul+0x3e8>
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <__aeabi_dmul+0x4d0>)
 80026c6:	4462      	add	r2, ip
 80026c8:	4094      	lsls	r4, r2
 80026ca:	4325      	orrs	r5, r4
 80026cc:	1e6a      	subs	r2, r5, #1
 80026ce:	4195      	sbcs	r5, r2
 80026d0:	002a      	movs	r2, r5
 80026d2:	430a      	orrs	r2, r1
 80026d4:	2107      	movs	r1, #7
 80026d6:	000d      	movs	r5, r1
 80026d8:	2400      	movs	r4, #0
 80026da:	4015      	ands	r5, r2
 80026dc:	4211      	tst	r1, r2
 80026de:	d05b      	beq.n	8002798 <__aeabi_dmul+0x4b4>
 80026e0:	210f      	movs	r1, #15
 80026e2:	2400      	movs	r4, #0
 80026e4:	4011      	ands	r1, r2
 80026e6:	2904      	cmp	r1, #4
 80026e8:	d053      	beq.n	8002792 <__aeabi_dmul+0x4ae>
 80026ea:	1d11      	adds	r1, r2, #4
 80026ec:	4291      	cmp	r1, r2
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	4252      	negs	r2, r2
 80026f2:	18a4      	adds	r4, r4, r2
 80026f4:	000a      	movs	r2, r1
 80026f6:	0223      	lsls	r3, r4, #8
 80026f8:	d54b      	bpl.n	8002792 <__aeabi_dmul+0x4ae>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2400      	movs	r4, #0
 80026fe:	2500      	movs	r5, #0
 8002700:	e660      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	421c      	tst	r4, r3
 8002708:	d009      	beq.n	800271e <__aeabi_dmul+0x43a>
 800270a:	421e      	tst	r6, r3
 800270c:	d107      	bne.n	800271e <__aeabi_dmul+0x43a>
 800270e:	4333      	orrs	r3, r6
 8002710:	031c      	lsls	r4, r3, #12
 8002712:	4643      	mov	r3, r8
 8002714:	0015      	movs	r5, r2
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <__aeabi_dmul+0x4cc>)
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	e652      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	4314      	orrs	r4, r2
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <__aeabi_dmul+0x4cc>)
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	9701      	str	r7, [sp, #4]
 800272c:	e64a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800272e:	f000 fd51 	bl	80031d4 <__clzsi2>
 8002732:	0003      	movs	r3, r0
 8002734:	001a      	movs	r2, r3
 8002736:	3215      	adds	r2, #21
 8002738:	3020      	adds	r0, #32
 800273a:	2a1c      	cmp	r2, #28
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dmul+0x45c>
 800273e:	e684      	b.n	800244a <__aeabi_dmul+0x166>
 8002740:	4656      	mov	r6, sl
 8002742:	3b08      	subs	r3, #8
 8002744:	2200      	movs	r2, #0
 8002746:	409e      	lsls	r6, r3
 8002748:	e689      	b.n	800245e <__aeabi_dmul+0x17a>
 800274a:	f000 fd43 	bl	80031d4 <__clzsi2>
 800274e:	0001      	movs	r1, r0
 8002750:	0002      	movs	r2, r0
 8002752:	3115      	adds	r1, #21
 8002754:	3220      	adds	r2, #32
 8002756:	291c      	cmp	r1, #28
 8002758:	dc00      	bgt.n	800275c <__aeabi_dmul+0x478>
 800275a:	e64e      	b.n	80023fa <__aeabi_dmul+0x116>
 800275c:	0034      	movs	r4, r6
 800275e:	3808      	subs	r0, #8
 8002760:	2500      	movs	r5, #0
 8002762:	4084      	lsls	r4, r0
 8002764:	e653      	b.n	800240e <__aeabi_dmul+0x12a>
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	469c      	mov	ip, r3
 800276a:	e741      	b.n	80025f0 <__aeabi_dmul+0x30c>
 800276c:	4912      	ldr	r1, [pc, #72]	; (80027b8 <__aeabi_dmul+0x4d4>)
 800276e:	0022      	movs	r2, r4
 8002770:	4461      	add	r1, ip
 8002772:	002e      	movs	r6, r5
 8002774:	408d      	lsls	r5, r1
 8002776:	408a      	lsls	r2, r1
 8002778:	40c6      	lsrs	r6, r0
 800277a:	1e69      	subs	r1, r5, #1
 800277c:	418d      	sbcs	r5, r1
 800277e:	4332      	orrs	r2, r6
 8002780:	432a      	orrs	r2, r5
 8002782:	40c4      	lsrs	r4, r0
 8002784:	0753      	lsls	r3, r2, #29
 8002786:	d0b6      	beq.n	80026f6 <__aeabi_dmul+0x412>
 8002788:	210f      	movs	r1, #15
 800278a:	4011      	ands	r1, r2
 800278c:	2904      	cmp	r1, #4
 800278e:	d1ac      	bne.n	80026ea <__aeabi_dmul+0x406>
 8002790:	e7b1      	b.n	80026f6 <__aeabi_dmul+0x412>
 8002792:	0765      	lsls	r5, r4, #29
 8002794:	0264      	lsls	r4, r4, #9
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	4315      	orrs	r5, r2
 800279c:	2200      	movs	r2, #0
 800279e:	e611      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	4314      	orrs	r4, r2
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4a01      	ldr	r2, [pc, #4]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e60a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007ff 	.word	0x000007ff
 80027b4:	0000043e 	.word	0x0000043e
 80027b8:	0000041e 	.word	0x0000041e

080027bc <__aeabi_dsub>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4657      	mov	r7, sl
 80027c0:	464e      	mov	r6, r9
 80027c2:	4645      	mov	r5, r8
 80027c4:	46de      	mov	lr, fp
 80027c6:	0004      	movs	r4, r0
 80027c8:	b5e0      	push	{r5, r6, r7, lr}
 80027ca:	001f      	movs	r7, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	030b      	lsls	r3, r1, #12
 80027d0:	0f62      	lsrs	r2, r4, #29
 80027d2:	004e      	lsls	r6, r1, #1
 80027d4:	0fcd      	lsrs	r5, r1, #31
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	0339      	lsls	r1, r7, #12
 80027da:	4313      	orrs	r3, r2
 80027dc:	0a49      	lsrs	r1, r1, #9
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	0f44      	lsrs	r4, r0, #29
 80027e2:	4321      	orrs	r1, r4
 80027e4:	4cc2      	ldr	r4, [pc, #776]	; (8002af0 <__aeabi_dsub+0x334>)
 80027e6:	4691      	mov	r9, r2
 80027e8:	4692      	mov	sl, r2
 80027ea:	00c0      	lsls	r0, r0, #3
 80027ec:	007a      	lsls	r2, r7, #1
 80027ee:	4680      	mov	r8, r0
 80027f0:	0d76      	lsrs	r6, r6, #21
 80027f2:	0d52      	lsrs	r2, r2, #21
 80027f4:	0fff      	lsrs	r7, r7, #31
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x40>
 80027fa:	e0b4      	b.n	8002966 <__aeabi_dsub+0x1aa>
 80027fc:	2401      	movs	r4, #1
 80027fe:	4067      	eors	r7, r4
 8002800:	46bb      	mov	fp, r7
 8002802:	42bd      	cmp	r5, r7
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x4c>
 8002806:	e088      	b.n	800291a <__aeabi_dsub+0x15e>
 8002808:	1ab4      	subs	r4, r6, r2
 800280a:	46a4      	mov	ip, r4
 800280c:	2c00      	cmp	r4, #0
 800280e:	dc00      	bgt.n	8002812 <__aeabi_dsub+0x56>
 8002810:	e0b2      	b.n	8002978 <__aeabi_dsub+0x1bc>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x5c>
 8002816:	e0c5      	b.n	80029a4 <__aeabi_dsub+0x1e8>
 8002818:	4ab5      	ldr	r2, [pc, #724]	; (8002af0 <__aeabi_dsub+0x334>)
 800281a:	4296      	cmp	r6, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x64>
 800281e:	e28b      	b.n	8002d38 <__aeabi_dsub+0x57c>
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	4311      	orrs	r1, r2
 8002826:	4662      	mov	r2, ip
 8002828:	2a38      	cmp	r2, #56	; 0x38
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0x72>
 800282c:	e1a1      	b.n	8002b72 <__aeabi_dsub+0x3b6>
 800282e:	2a1f      	cmp	r2, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x78>
 8002832:	e216      	b.n	8002c62 <__aeabi_dsub+0x4a6>
 8002834:	2720      	movs	r7, #32
 8002836:	000c      	movs	r4, r1
 8002838:	1abf      	subs	r7, r7, r2
 800283a:	40bc      	lsls	r4, r7
 800283c:	0002      	movs	r2, r0
 800283e:	46a0      	mov	r8, r4
 8002840:	4664      	mov	r4, ip
 8002842:	40b8      	lsls	r0, r7
 8002844:	40e2      	lsrs	r2, r4
 8002846:	4644      	mov	r4, r8
 8002848:	4314      	orrs	r4, r2
 800284a:	0002      	movs	r2, r0
 800284c:	1e50      	subs	r0, r2, #1
 800284e:	4182      	sbcs	r2, r0
 8002850:	4660      	mov	r0, ip
 8002852:	40c1      	lsrs	r1, r0
 8002854:	4322      	orrs	r2, r4
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	4649      	mov	r1, r9
 800285a:	1a8c      	subs	r4, r1, r2
 800285c:	45a1      	cmp	r9, r4
 800285e:	4192      	sbcs	r2, r2
 8002860:	4252      	negs	r2, r2
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	4698      	mov	r8, r3
 8002866:	4643      	mov	r3, r8
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	d400      	bmi.n	800286e <__aeabi_dsub+0xb2>
 800286c:	e117      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 800286e:	4643      	mov	r3, r8
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	4698      	mov	r8, r3
 8002876:	4643      	mov	r3, r8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0xc2>
 800287c:	e16c      	b.n	8002b58 <__aeabi_dsub+0x39c>
 800287e:	4640      	mov	r0, r8
 8002880:	f000 fca8 	bl	80031d4 <__clzsi2>
 8002884:	0002      	movs	r2, r0
 8002886:	3a08      	subs	r2, #8
 8002888:	2120      	movs	r1, #32
 800288a:	0020      	movs	r0, r4
 800288c:	4643      	mov	r3, r8
 800288e:	1a89      	subs	r1, r1, r2
 8002890:	4093      	lsls	r3, r2
 8002892:	40c8      	lsrs	r0, r1
 8002894:	4094      	lsls	r4, r2
 8002896:	4303      	orrs	r3, r0
 8002898:	4296      	cmp	r6, r2
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0xe2>
 800289c:	e157      	b.n	8002b4e <__aeabi_dsub+0x392>
 800289e:	1b96      	subs	r6, r2, r6
 80028a0:	1c71      	adds	r1, r6, #1
 80028a2:	291f      	cmp	r1, #31
 80028a4:	dd00      	ble.n	80028a8 <__aeabi_dsub+0xec>
 80028a6:	e1cb      	b.n	8002c40 <__aeabi_dsub+0x484>
 80028a8:	2220      	movs	r2, #32
 80028aa:	0018      	movs	r0, r3
 80028ac:	0026      	movs	r6, r4
 80028ae:	1a52      	subs	r2, r2, r1
 80028b0:	4094      	lsls	r4, r2
 80028b2:	4090      	lsls	r0, r2
 80028b4:	40ce      	lsrs	r6, r1
 80028b6:	40cb      	lsrs	r3, r1
 80028b8:	1e62      	subs	r2, r4, #1
 80028ba:	4194      	sbcs	r4, r2
 80028bc:	4330      	orrs	r0, r6
 80028be:	4698      	mov	r8, r3
 80028c0:	2600      	movs	r6, #0
 80028c2:	4304      	orrs	r4, r0
 80028c4:	0763      	lsls	r3, r4, #29
 80028c6:	d009      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028c8:	230f      	movs	r3, #15
 80028ca:	4023      	ands	r3, r4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028d0:	1d23      	adds	r3, r4, #4
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	41a4      	sbcs	r4, r4
 80028d6:	4264      	negs	r4, r4
 80028d8:	44a0      	add	r8, r4
 80028da:	001c      	movs	r4, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	d400      	bmi.n	80028e4 <__aeabi_dsub+0x128>
 80028e2:	e0df      	b.n	8002aa4 <__aeabi_dsub+0x2e8>
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <__aeabi_dsub+0x334>)
 80028e6:	3601      	adds	r6, #1
 80028e8:	429e      	cmp	r6, r3
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x132>
 80028ec:	e0fb      	b.n	8002ae6 <__aeabi_dsub+0x32a>
 80028ee:	4642      	mov	r2, r8
 80028f0:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <__aeabi_dsub+0x338>)
 80028f2:	08e4      	lsrs	r4, r4, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	0571      	lsls	r1, r6, #21
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4322      	orrs	r2, r4
 8002900:	0b1b      	lsrs	r3, r3, #12
 8002902:	0d49      	lsrs	r1, r1, #21
 8002904:	0509      	lsls	r1, r1, #20
 8002906:	07ed      	lsls	r5, r5, #31
 8002908:	4319      	orrs	r1, r3
 800290a:	4329      	orrs	r1, r5
 800290c:	0010      	movs	r0, r2
 800290e:	bcf0      	pop	{r4, r5, r6, r7}
 8002910:	46bb      	mov	fp, r7
 8002912:	46b2      	mov	sl, r6
 8002914:	46a9      	mov	r9, r5
 8002916:	46a0      	mov	r8, r4
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	1ab4      	subs	r4, r6, r2
 800291c:	46a4      	mov	ip, r4
 800291e:	2c00      	cmp	r4, #0
 8002920:	dd58      	ble.n	80029d4 <__aeabi_dsub+0x218>
 8002922:	2a00      	cmp	r2, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x16c>
 8002926:	e09e      	b.n	8002a66 <__aeabi_dsub+0x2aa>
 8002928:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <__aeabi_dsub+0x334>)
 800292a:	4296      	cmp	r6, r2
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x174>
 800292e:	e13b      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	4311      	orrs	r1, r2
 8002936:	4662      	mov	r2, ip
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x182>
 800293c:	e0c1      	b.n	8002ac2 <__aeabi_dsub+0x306>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dc00      	bgt.n	8002944 <__aeabi_dsub+0x188>
 8002942:	e1bb      	b.n	8002cbc <__aeabi_dsub+0x500>
 8002944:	000c      	movs	r4, r1
 8002946:	3a20      	subs	r2, #32
 8002948:	40d4      	lsrs	r4, r2
 800294a:	0022      	movs	r2, r4
 800294c:	4664      	mov	r4, ip
 800294e:	2c20      	cmp	r4, #32
 8002950:	d004      	beq.n	800295c <__aeabi_dsub+0x1a0>
 8002952:	2740      	movs	r7, #64	; 0x40
 8002954:	1b3f      	subs	r7, r7, r4
 8002956:	40b9      	lsls	r1, r7
 8002958:	4308      	orrs	r0, r1
 800295a:	4680      	mov	r8, r0
 800295c:	4644      	mov	r4, r8
 800295e:	1e61      	subs	r1, r4, #1
 8002960:	418c      	sbcs	r4, r1
 8002962:	4314      	orrs	r4, r2
 8002964:	e0b1      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002966:	000c      	movs	r4, r1
 8002968:	4304      	orrs	r4, r0
 800296a:	d02a      	beq.n	80029c2 <__aeabi_dsub+0x206>
 800296c:	46bb      	mov	fp, r7
 800296e:	42bd      	cmp	r5, r7
 8002970:	d02d      	beq.n	80029ce <__aeabi_dsub+0x212>
 8002972:	4c61      	ldr	r4, [pc, #388]	; (8002af8 <__aeabi_dsub+0x33c>)
 8002974:	46a4      	mov	ip, r4
 8002976:	44b4      	add	ip, r6
 8002978:	4664      	mov	r4, ip
 800297a:	2c00      	cmp	r4, #0
 800297c:	d05c      	beq.n	8002a38 <__aeabi_dsub+0x27c>
 800297e:	1b94      	subs	r4, r2, r6
 8002980:	46a4      	mov	ip, r4
 8002982:	2e00      	cmp	r6, #0
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x1cc>
 8002986:	e115      	b.n	8002bb4 <__aeabi_dsub+0x3f8>
 8002988:	464d      	mov	r5, r9
 800298a:	431d      	orrs	r5, r3
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x1d4>
 800298e:	e1c3      	b.n	8002d18 <__aeabi_dsub+0x55c>
 8002990:	1e65      	subs	r5, r4, #1
 8002992:	2c01      	cmp	r4, #1
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1dc>
 8002996:	e20c      	b.n	8002db2 <__aeabi_dsub+0x5f6>
 8002998:	4e55      	ldr	r6, [pc, #340]	; (8002af0 <__aeabi_dsub+0x334>)
 800299a:	42b4      	cmp	r4, r6
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1e4>
 800299e:	e1f8      	b.n	8002d92 <__aeabi_dsub+0x5d6>
 80029a0:	46ac      	mov	ip, r5
 80029a2:	e10e      	b.n	8002bc2 <__aeabi_dsub+0x406>
 80029a4:	000a      	movs	r2, r1
 80029a6:	4302      	orrs	r2, r0
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x1f0>
 80029aa:	e136      	b.n	8002c1a <__aeabi_dsub+0x45e>
 80029ac:	0022      	movs	r2, r4
 80029ae:	3a01      	subs	r2, #1
 80029b0:	2c01      	cmp	r4, #1
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x1fa>
 80029b4:	e1c6      	b.n	8002d44 <__aeabi_dsub+0x588>
 80029b6:	4c4e      	ldr	r4, [pc, #312]	; (8002af0 <__aeabi_dsub+0x334>)
 80029b8:	45a4      	cmp	ip, r4
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x202>
 80029bc:	e0f4      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 80029be:	4694      	mov	ip, r2
 80029c0:	e731      	b.n	8002826 <__aeabi_dsub+0x6a>
 80029c2:	2401      	movs	r4, #1
 80029c4:	4067      	eors	r7, r4
 80029c6:	46bb      	mov	fp, r7
 80029c8:	42bd      	cmp	r5, r7
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x212>
 80029cc:	e71c      	b.n	8002808 <__aeabi_dsub+0x4c>
 80029ce:	4c4a      	ldr	r4, [pc, #296]	; (8002af8 <__aeabi_dsub+0x33c>)
 80029d0:	46a4      	mov	ip, r4
 80029d2:	44b4      	add	ip, r6
 80029d4:	4664      	mov	r4, ip
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x220>
 80029da:	e0cf      	b.n	8002b7c <__aeabi_dsub+0x3c0>
 80029dc:	1b94      	subs	r4, r2, r6
 80029de:	46a4      	mov	ip, r4
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x22a>
 80029e4:	e15c      	b.n	8002ca0 <__aeabi_dsub+0x4e4>
 80029e6:	4e42      	ldr	r6, [pc, #264]	; (8002af0 <__aeabi_dsub+0x334>)
 80029e8:	42b2      	cmp	r2, r6
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x232>
 80029ec:	e1ec      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 80029ee:	2680      	movs	r6, #128	; 0x80
 80029f0:	0436      	lsls	r6, r6, #16
 80029f2:	4333      	orrs	r3, r6
 80029f4:	4664      	mov	r4, ip
 80029f6:	2c38      	cmp	r4, #56	; 0x38
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x240>
 80029fa:	e1b3      	b.n	8002d64 <__aeabi_dsub+0x5a8>
 80029fc:	2c1f      	cmp	r4, #31
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x246>
 8002a00:	e238      	b.n	8002e74 <__aeabi_dsub+0x6b8>
 8002a02:	2620      	movs	r6, #32
 8002a04:	1b36      	subs	r6, r6, r4
 8002a06:	001c      	movs	r4, r3
 8002a08:	40b4      	lsls	r4, r6
 8002a0a:	464f      	mov	r7, r9
 8002a0c:	46a0      	mov	r8, r4
 8002a0e:	4664      	mov	r4, ip
 8002a10:	40e7      	lsrs	r7, r4
 8002a12:	4644      	mov	r4, r8
 8002a14:	433c      	orrs	r4, r7
 8002a16:	464f      	mov	r7, r9
 8002a18:	40b7      	lsls	r7, r6
 8002a1a:	003e      	movs	r6, r7
 8002a1c:	1e77      	subs	r7, r6, #1
 8002a1e:	41be      	sbcs	r6, r7
 8002a20:	4334      	orrs	r4, r6
 8002a22:	4666      	mov	r6, ip
 8002a24:	40f3      	lsrs	r3, r6
 8002a26:	18c9      	adds	r1, r1, r3
 8002a28:	1824      	adds	r4, r4, r0
 8002a2a:	4284      	cmp	r4, r0
 8002a2c:	419b      	sbcs	r3, r3
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4698      	mov	r8, r3
 8002a32:	0016      	movs	r6, r2
 8002a34:	4488      	add	r8, r1
 8002a36:	e04e      	b.n	8002ad6 <__aeabi_dsub+0x31a>
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <__aeabi_dsub+0x340>)
 8002a3a:	1c74      	adds	r4, r6, #1
 8002a3c:	4214      	tst	r4, r2
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_dsub+0x286>
 8002a40:	e0d6      	b.n	8002bf0 <__aeabi_dsub+0x434>
 8002a42:	464a      	mov	r2, r9
 8002a44:	431a      	orrs	r2, r3
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d000      	beq.n	8002a4c <__aeabi_dsub+0x290>
 8002a4a:	e15b      	b.n	8002d04 <__aeabi_dsub+0x548>
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d100      	bne.n	8002a52 <__aeabi_dsub+0x296>
 8002a50:	e1a5      	b.n	8002d9e <__aeabi_dsub+0x5e2>
 8002a52:	000a      	movs	r2, r1
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d000      	beq.n	8002a5a <__aeabi_dsub+0x29e>
 8002a58:	e1bb      	b.n	8002dd2 <__aeabi_dsub+0x616>
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08d2      	lsrs	r2, r2, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	e027      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002a66:	000a      	movs	r2, r1
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x2b2>
 8002a6c:	e174      	b.n	8002d58 <__aeabi_dsub+0x59c>
 8002a6e:	0022      	movs	r2, r4
 8002a70:	3a01      	subs	r2, #1
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d005      	beq.n	8002a82 <__aeabi_dsub+0x2c6>
 8002a76:	4c1e      	ldr	r4, [pc, #120]	; (8002af0 <__aeabi_dsub+0x334>)
 8002a78:	45a4      	cmp	ip, r4
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x2c2>
 8002a7c:	e094      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002a7e:	4694      	mov	ip, r2
 8002a80:	e759      	b.n	8002936 <__aeabi_dsub+0x17a>
 8002a82:	4448      	add	r0, r9
 8002a84:	4548      	cmp	r0, r9
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	4252      	negs	r2, r2
 8002a90:	4490      	add	r8, r2
 8002a92:	4643      	mov	r3, r8
 8002a94:	2602      	movs	r6, #2
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	d500      	bpl.n	8002a9c <__aeabi_dsub+0x2e0>
 8002a9a:	e0c4      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002a9c:	3e01      	subs	r6, #1
 8002a9e:	0763      	lsls	r3, r4, #29
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x2e8>
 8002aa2:	e711      	b.n	80028c8 <__aeabi_dsub+0x10c>
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	46b4      	mov	ip, r6
 8002aa8:	0759      	lsls	r1, r3, #29
 8002aaa:	08e2      	lsrs	r2, r4, #3
 8002aac:	430a      	orrs	r2, r1
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ab2:	458c      	cmp	ip, r1
 8002ab4:	d040      	beq.n	8002b38 <__aeabi_dsub+0x37c>
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	0b1b      	lsrs	r3, r3, #12
 8002abe:	0d49      	lsrs	r1, r1, #21
 8002ac0:	e720      	b.n	8002904 <__aeabi_dsub+0x148>
 8002ac2:	4301      	orrs	r1, r0
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	1e61      	subs	r1, r4, #1
 8002ac8:	418c      	sbcs	r4, r1
 8002aca:	444c      	add	r4, r9
 8002acc:	454c      	cmp	r4, r9
 8002ace:	4192      	sbcs	r2, r2
 8002ad0:	4252      	negs	r2, r2
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4498      	add	r8, r3
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	d5e0      	bpl.n	8002a9e <__aeabi_dsub+0x2e2>
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ade:	3601      	adds	r6, #1
 8002ae0:	429e      	cmp	r6, r3
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x32a>
 8002ae4:	e09f      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002ae6:	0031      	movs	r1, r6
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	e70a      	b.n	8002904 <__aeabi_dsub+0x148>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x34a>
 8002b04:	e160      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 8002b06:	000a      	movs	r2, r1
 8002b08:	4302      	orrs	r2, r0
 8002b0a:	d04d      	beq.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	075c      	lsls	r4, r3, #29
 8002b10:	08d2      	lsrs	r2, r2, #3
 8002b12:	4322      	orrs	r2, r4
 8002b14:	2480      	movs	r4, #128	; 0x80
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	0324      	lsls	r4, r4, #12
 8002b1a:	4223      	tst	r3, r4
 8002b1c:	d007      	beq.n	8002b2e <__aeabi_dsub+0x372>
 8002b1e:	08ce      	lsrs	r6, r1, #3
 8002b20:	4226      	tst	r6, r4
 8002b22:	d104      	bne.n	8002b2e <__aeabi_dsub+0x372>
 8002b24:	465d      	mov	r5, fp
 8002b26:	0033      	movs	r3, r6
 8002b28:	08c2      	lsrs	r2, r0, #3
 8002b2a:	0749      	lsls	r1, r1, #29
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	0f51      	lsrs	r1, r2, #29
 8002b30:	00d2      	lsls	r2, r2, #3
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	0749      	lsls	r1, r1, #29
 8002b36:	430a      	orrs	r2, r1
 8002b38:	0011      	movs	r1, r2
 8002b3a:	4319      	orrs	r1, r3
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x384>
 8002b3e:	e1c8      	b.n	8002ed2 <__aeabi_dsub+0x716>
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0309      	lsls	r1, r1, #12
 8002b44:	430b      	orrs	r3, r1
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	49d5      	ldr	r1, [pc, #852]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002b4a:	0b1b      	lsrs	r3, r3, #12
 8002b4c:	e6da      	b.n	8002904 <__aeabi_dsub+0x148>
 8002b4e:	49d5      	ldr	r1, [pc, #852]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002b50:	1ab6      	subs	r6, r6, r2
 8002b52:	400b      	ands	r3, r1
 8002b54:	4698      	mov	r8, r3
 8002b56:	e6b5      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 fb3b 	bl	80031d4 <__clzsi2>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	3218      	adds	r2, #24
 8002b62:	2a1f      	cmp	r2, #31
 8002b64:	dc00      	bgt.n	8002b68 <__aeabi_dsub+0x3ac>
 8002b66:	e68f      	b.n	8002888 <__aeabi_dsub+0xcc>
 8002b68:	0023      	movs	r3, r4
 8002b6a:	3808      	subs	r0, #8
 8002b6c:	4083      	lsls	r3, r0
 8002b6e:	2400      	movs	r4, #0
 8002b70:	e692      	b.n	8002898 <__aeabi_dsub+0xdc>
 8002b72:	4308      	orrs	r0, r1
 8002b74:	0002      	movs	r2, r0
 8002b76:	1e50      	subs	r0, r2, #1
 8002b78:	4182      	sbcs	r2, r0
 8002b7a:	e66d      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002b7c:	4cca      	ldr	r4, [pc, #808]	; (8002ea8 <__aeabi_dsub+0x6ec>)
 8002b7e:	1c72      	adds	r2, r6, #1
 8002b80:	4222      	tst	r2, r4
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x3ca>
 8002b84:	e0ad      	b.n	8002ce2 <__aeabi_dsub+0x526>
 8002b86:	464a      	mov	r2, r9
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d1b8      	bne.n	8002b00 <__aeabi_dsub+0x344>
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x3d8>
 8002b92:	e158      	b.n	8002e46 <__aeabi_dsub+0x68a>
 8002b94:	000a      	movs	r2, r1
 8002b96:	4302      	orrs	r2, r0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x3e0>
 8002b9a:	e159      	b.n	8002e50 <__aeabi_dsub+0x694>
 8002b9c:	464a      	mov	r2, r9
 8002b9e:	0759      	lsls	r1, r3, #29
 8002ba0:	08d2      	lsrs	r2, r2, #3
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	e786      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	0759      	lsls	r1, r3, #29
 8002bac:	08d2      	lsrs	r2, r2, #3
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	e7c1      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002bb4:	4dba      	ldr	r5, [pc, #744]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002bb6:	42aa      	cmp	r2, r5
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x400>
 8002bba:	e11e      	b.n	8002dfa <__aeabi_dsub+0x63e>
 8002bbc:	2580      	movs	r5, #128	; 0x80
 8002bbe:	042d      	lsls	r5, r5, #16
 8002bc0:	432b      	orrs	r3, r5
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	2c38      	cmp	r4, #56	; 0x38
 8002bc6:	dc5d      	bgt.n	8002c84 <__aeabi_dsub+0x4c8>
 8002bc8:	2c1f      	cmp	r4, #31
 8002bca:	dd00      	ble.n	8002bce <__aeabi_dsub+0x412>
 8002bcc:	e0d0      	b.n	8002d70 <__aeabi_dsub+0x5b4>
 8002bce:	2520      	movs	r5, #32
 8002bd0:	4667      	mov	r7, ip
 8002bd2:	1b2d      	subs	r5, r5, r4
 8002bd4:	464e      	mov	r6, r9
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	40fe      	lsrs	r6, r7
 8002bda:	40ac      	lsls	r4, r5
 8002bdc:	4334      	orrs	r4, r6
 8002bde:	464e      	mov	r6, r9
 8002be0:	40ae      	lsls	r6, r5
 8002be2:	0035      	movs	r5, r6
 8002be4:	40fb      	lsrs	r3, r7
 8002be6:	1e6e      	subs	r6, r5, #1
 8002be8:	41b5      	sbcs	r5, r6
 8002bea:	1ac9      	subs	r1, r1, r3
 8002bec:	432c      	orrs	r4, r5
 8002bee:	e04e      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	1a14      	subs	r4, r2, r0
 8002bf4:	45a1      	cmp	r9, r4
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	4252      	negs	r2, r2
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	1a5f      	subs	r7, r3, r1
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4647      	mov	r7, r8
 8002c02:	1bd2      	subs	r2, r2, r7
 8002c04:	4690      	mov	r8, r2
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	d500      	bpl.n	8002c0c <__aeabi_dsub+0x450>
 8002c0a:	e08b      	b.n	8002d24 <__aeabi_dsub+0x568>
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	d000      	beq.n	8002c14 <__aeabi_dsub+0x458>
 8002c12:	e630      	b.n	8002876 <__aeabi_dsub+0xba>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2500      	movs	r5, #0
 8002c18:	e74d      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	0759      	lsls	r1, r3, #29
 8002c1e:	08d2      	lsrs	r2, r2, #3
 8002c20:	430a      	orrs	r2, r1
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	e744      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002c26:	4642      	mov	r2, r8
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002c2a:	0861      	lsrs	r1, r4, #1
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	4014      	ands	r4, r2
 8002c34:	430c      	orrs	r4, r1
 8002c36:	07da      	lsls	r2, r3, #31
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	4314      	orrs	r4, r2
 8002c3e:	e641      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002c40:	001a      	movs	r2, r3
 8002c42:	3e1f      	subs	r6, #31
 8002c44:	40f2      	lsrs	r2, r6
 8002c46:	0016      	movs	r6, r2
 8002c48:	2920      	cmp	r1, #32
 8002c4a:	d003      	beq.n	8002c54 <__aeabi_dsub+0x498>
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	1a51      	subs	r1, r2, r1
 8002c50:	408b      	lsls	r3, r1
 8002c52:	431c      	orrs	r4, r3
 8002c54:	1e62      	subs	r2, r4, #1
 8002c56:	4194      	sbcs	r4, r2
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4334      	orrs	r4, r6
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	2600      	movs	r6, #0
 8002c60:	e71d      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002c62:	000c      	movs	r4, r1
 8002c64:	3a20      	subs	r2, #32
 8002c66:	40d4      	lsrs	r4, r2
 8002c68:	0022      	movs	r2, r4
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2c20      	cmp	r4, #32
 8002c6e:	d004      	beq.n	8002c7a <__aeabi_dsub+0x4be>
 8002c70:	2740      	movs	r7, #64	; 0x40
 8002c72:	1b3f      	subs	r7, r7, r4
 8002c74:	40b9      	lsls	r1, r7
 8002c76:	4308      	orrs	r0, r1
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4644      	mov	r4, r8
 8002c7c:	1e61      	subs	r1, r4, #1
 8002c7e:	418c      	sbcs	r4, r1
 8002c80:	4322      	orrs	r2, r4
 8002c82:	e5e9      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002c84:	464c      	mov	r4, r9
 8002c86:	4323      	orrs	r3, r4
 8002c88:	001c      	movs	r4, r3
 8002c8a:	1e63      	subs	r3, r4, #1
 8002c8c:	419c      	sbcs	r4, r3
 8002c8e:	1b04      	subs	r4, r0, r4
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	419b      	sbcs	r3, r3
 8002c94:	425b      	negs	r3, r3
 8002c96:	1acb      	subs	r3, r1, r3
 8002c98:	4698      	mov	r8, r3
 8002c9a:	465d      	mov	r5, fp
 8002c9c:	0016      	movs	r6, r2
 8002c9e:	e5e2      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002ca0:	464e      	mov	r6, r9
 8002ca2:	431e      	orrs	r6, r3
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x4ec>
 8002ca6:	e0ae      	b.n	8002e06 <__aeabi_dsub+0x64a>
 8002ca8:	1e66      	subs	r6, r4, #1
 8002caa:	2c01      	cmp	r4, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4f4>
 8002cae:	e0fd      	b.n	8002eac <__aeabi_dsub+0x6f0>
 8002cb0:	4f7b      	ldr	r7, [pc, #492]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x4fc>
 8002cb6:	e107      	b.n	8002ec8 <__aeabi_dsub+0x70c>
 8002cb8:	46b4      	mov	ip, r6
 8002cba:	e69b      	b.n	80029f4 <__aeabi_dsub+0x238>
 8002cbc:	4664      	mov	r4, ip
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	1b12      	subs	r2, r2, r4
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	4094      	lsls	r4, r2
 8002cc6:	0007      	movs	r7, r0
 8002cc8:	4090      	lsls	r0, r2
 8002cca:	46a0      	mov	r8, r4
 8002ccc:	4664      	mov	r4, ip
 8002cce:	1e42      	subs	r2, r0, #1
 8002cd0:	4190      	sbcs	r0, r2
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	40e7      	lsrs	r7, r4
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	40d1      	lsrs	r1, r2
 8002cda:	433c      	orrs	r4, r7
 8002cdc:	4304      	orrs	r4, r0
 8002cde:	185b      	adds	r3, r3, r1
 8002ce0:	e6f3      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002ce2:	4c6f      	ldr	r4, [pc, #444]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x52e>
 8002ce8:	e0d5      	b.n	8002e96 <__aeabi_dsub+0x6da>
 8002cea:	4448      	add	r0, r9
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	4548      	cmp	r0, r9
 8002cf0:	4189      	sbcs	r1, r1
 8002cf2:	4249      	negs	r1, r1
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	07dc      	lsls	r4, r3, #31
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	0016      	movs	r6, r2
 8002d00:	4304      	orrs	r4, r0
 8002d02:	e6cc      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x54e>
 8002d08:	e082      	b.n	8002e10 <__aeabi_dsub+0x654>
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	d140      	bne.n	8002d92 <__aeabi_dsub+0x5d6>
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	e713      	b.n	8002b40 <__aeabi_dsub+0x384>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08c2      	lsrs	r2, r0, #3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	465d      	mov	r5, fp
 8002d20:	08cb      	lsrs	r3, r1, #3
 8002d22:	e6c5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d24:	464a      	mov	r2, r9
 8002d26:	1a84      	subs	r4, r0, r2
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	4192      	sbcs	r2, r2
 8002d2c:	1acb      	subs	r3, r1, r3
 8002d2e:	4252      	negs	r2, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	4698      	mov	r8, r3
 8002d34:	465d      	mov	r5, fp
 8002d36:	e59e      	b.n	8002876 <__aeabi_dsub+0xba>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	0759      	lsls	r1, r3, #29
 8002d3c:	08d2      	lsrs	r2, r2, #3
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	e6f9      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d44:	464a      	mov	r2, r9
 8002d46:	1a14      	subs	r4, r2, r0
 8002d48:	45a1      	cmp	r9, r4
 8002d4a:	4192      	sbcs	r2, r2
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	4252      	negs	r2, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	4698      	mov	r8, r3
 8002d54:	2601      	movs	r6, #1
 8002d56:	e586      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	0759      	lsls	r1, r3, #29
 8002d5c:	08d2      	lsrs	r2, r2, #3
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	e6a5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d64:	464c      	mov	r4, r9
 8002d66:	4323      	orrs	r3, r4
 8002d68:	001c      	movs	r4, r3
 8002d6a:	1e63      	subs	r3, r4, #1
 8002d6c:	419c      	sbcs	r4, r3
 8002d6e:	e65b      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002d70:	4665      	mov	r5, ip
 8002d72:	001e      	movs	r6, r3
 8002d74:	3d20      	subs	r5, #32
 8002d76:	40ee      	lsrs	r6, r5
 8002d78:	2c20      	cmp	r4, #32
 8002d7a:	d005      	beq.n	8002d88 <__aeabi_dsub+0x5cc>
 8002d7c:	2540      	movs	r5, #64	; 0x40
 8002d7e:	1b2d      	subs	r5, r5, r4
 8002d80:	40ab      	lsls	r3, r5
 8002d82:	464c      	mov	r4, r9
 8002d84:	431c      	orrs	r4, r3
 8002d86:	46a2      	mov	sl, r4
 8002d88:	4654      	mov	r4, sl
 8002d8a:	1e63      	subs	r3, r4, #1
 8002d8c:	419c      	sbcs	r4, r3
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	e77d      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002d92:	074b      	lsls	r3, r1, #29
 8002d94:	08c2      	lsrs	r2, r0, #3
 8002d96:	431a      	orrs	r2, r3
 8002d98:	465d      	mov	r5, fp
 8002d9a:	08cb      	lsrs	r3, r1, #3
 8002d9c:	e6cc      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d9e:	000a      	movs	r2, r1
 8002da0:	4302      	orrs	r2, r0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x5ea>
 8002da4:	e736      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002da6:	074b      	lsls	r3, r1, #29
 8002da8:	08c2      	lsrs	r2, r0, #3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	465d      	mov	r5, fp
 8002dae:	08cb      	lsrs	r3, r1, #3
 8002db0:	e681      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002db2:	464a      	mov	r2, r9
 8002db4:	1a84      	subs	r4, r0, r2
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	4192      	sbcs	r2, r2
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	4252      	negs	r2, r2
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	2601      	movs	r6, #1
 8002dc6:	e54e      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	08c2      	lsrs	r2, r0, #3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	08cb      	lsrs	r3, r1, #3
 8002dd0:	e6b2      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	1a14      	subs	r4, r2, r0
 8002dd6:	45a1      	cmp	r9, r4
 8002dd8:	4192      	sbcs	r2, r2
 8002dda:	1a5f      	subs	r7, r3, r1
 8002ddc:	4252      	negs	r2, r2
 8002dde:	1aba      	subs	r2, r7, r2
 8002de0:	4690      	mov	r8, r2
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	d56b      	bpl.n	8002ebe <__aeabi_dsub+0x702>
 8002de6:	464a      	mov	r2, r9
 8002de8:	1a84      	subs	r4, r0, r2
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	4192      	sbcs	r2, r2
 8002dee:	1acb      	subs	r3, r1, r3
 8002df0:	4252      	negs	r2, r2
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	4698      	mov	r8, r3
 8002df6:	465d      	mov	r5, fp
 8002df8:	e564      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	465d      	mov	r5, fp
 8002e02:	08cb      	lsrs	r3, r1, #3
 8002e04:	e698      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e06:	074b      	lsls	r3, r1, #29
 8002e08:	08c2      	lsrs	r2, r0, #3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	08cb      	lsrs	r3, r1, #3
 8002e0e:	e64f      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002e10:	000a      	movs	r2, r1
 8002e12:	4302      	orrs	r2, r0
 8002e14:	d090      	beq.n	8002d38 <__aeabi_dsub+0x57c>
 8002e16:	464a      	mov	r2, r9
 8002e18:	075c      	lsls	r4, r3, #29
 8002e1a:	08d2      	lsrs	r2, r2, #3
 8002e1c:	4314      	orrs	r4, r2
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	0312      	lsls	r2, r2, #12
 8002e24:	4213      	tst	r3, r2
 8002e26:	d008      	beq.n	8002e3a <__aeabi_dsub+0x67e>
 8002e28:	08ce      	lsrs	r6, r1, #3
 8002e2a:	4216      	tst	r6, r2
 8002e2c:	d105      	bne.n	8002e3a <__aeabi_dsub+0x67e>
 8002e2e:	08c0      	lsrs	r0, r0, #3
 8002e30:	0749      	lsls	r1, r1, #29
 8002e32:	4308      	orrs	r0, r1
 8002e34:	0004      	movs	r4, r0
 8002e36:	465d      	mov	r5, fp
 8002e38:	0033      	movs	r3, r6
 8002e3a:	0f61      	lsrs	r1, r4, #29
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	0749      	lsls	r1, r1, #29
 8002e40:	08d2      	lsrs	r2, r2, #3
 8002e42:	430a      	orrs	r2, r1
 8002e44:	e678      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e46:	074b      	lsls	r3, r1, #29
 8002e48:	08c2      	lsrs	r2, r0, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	08cb      	lsrs	r3, r1, #3
 8002e4e:	e632      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002e50:	4448      	add	r0, r9
 8002e52:	185b      	adds	r3, r3, r1
 8002e54:	4548      	cmp	r0, r9
 8002e56:	4192      	sbcs	r2, r2
 8002e58:	4698      	mov	r8, r3
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	4490      	add	r8, r2
 8002e5e:	4643      	mov	r3, r8
 8002e60:	0004      	movs	r4, r0
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	d400      	bmi.n	8002e68 <__aeabi_dsub+0x6ac>
 8002e66:	e61a      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e68:	4642      	mov	r2, r8
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	401a      	ands	r2, r3
 8002e70:	4690      	mov	r8, r2
 8002e72:	e614      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e74:	4666      	mov	r6, ip
 8002e76:	001f      	movs	r7, r3
 8002e78:	3e20      	subs	r6, #32
 8002e7a:	40f7      	lsrs	r7, r6
 8002e7c:	2c20      	cmp	r4, #32
 8002e7e:	d005      	beq.n	8002e8c <__aeabi_dsub+0x6d0>
 8002e80:	2640      	movs	r6, #64	; 0x40
 8002e82:	1b36      	subs	r6, r6, r4
 8002e84:	40b3      	lsls	r3, r6
 8002e86:	464c      	mov	r4, r9
 8002e88:	431c      	orrs	r4, r3
 8002e8a:	46a2      	mov	sl, r4
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	1e63      	subs	r3, r4, #1
 8002e90:	419c      	sbcs	r4, r3
 8002e92:	433c      	orrs	r4, r7
 8002e94:	e5c8      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002e96:	0011      	movs	r1, r2
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e532      	b.n	8002904 <__aeabi_dsub+0x148>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	000007fe 	.word	0x000007fe
 8002eac:	464a      	mov	r2, r9
 8002eae:	1814      	adds	r4, r2, r0
 8002eb0:	4284      	cmp	r4, r0
 8002eb2:	4192      	sbcs	r2, r2
 8002eb4:	185b      	adds	r3, r3, r1
 8002eb6:	4698      	mov	r8, r3
 8002eb8:	4252      	negs	r2, r2
 8002eba:	4490      	add	r8, r2
 8002ebc:	e5e9      	b.n	8002a92 <__aeabi_dsub+0x2d6>
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	4322      	orrs	r2, r4
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x70a>
 8002ec4:	e6a6      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002ec6:	e5ea      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08c2      	lsrs	r2, r0, #3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	08cb      	lsrs	r3, r1, #3
 8002ed0:	e632      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <__aeabi_dsub+0x720>)
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	e514      	b.n	8002904 <__aeabi_dsub+0x148>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002ee6:	030c      	lsls	r4, r1, #12
 8002ee8:	0016      	movs	r6, r2
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	031a      	lsls	r2, r3, #12
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b12      	lsrs	r2, r2, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d008      	beq.n	8002f0e <__aeabi_dcmpun+0x2e>
 8002efc:	4906      	ldr	r1, [pc, #24]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d103      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f04:	4332      	orrs	r2, r6
 8002f06:	0010      	movs	r0, r2
 8002f08:	1e42      	subs	r2, r0, #1
 8002f0a:	4190      	sbcs	r0, r2
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	432c      	orrs	r4, r5
 8002f12:	d1fb      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f14:	e7f2      	b.n	8002efc <__aeabi_dcmpun+0x1c>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	000007ff 	.word	0x000007ff

08002f1c <__aeabi_d2iz>:
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	b530      	push	{r4, r5, lr}
 8002f20:	4c13      	ldr	r4, [pc, #76]	; (8002f70 <__aeabi_d2iz+0x54>)
 8002f22:	0053      	lsls	r3, r2, #1
 8002f24:	0309      	lsls	r1, r1, #12
 8002f26:	0005      	movs	r5, r0
 8002f28:	0b09      	lsrs	r1, r1, #12
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	0fd2      	lsrs	r2, r2, #31
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd04      	ble.n	8002f3e <__aeabi_d2iz+0x22>
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x58>)
 8002f36:	4283      	cmp	r3, r0
 8002f38:	dd02      	ble.n	8002f40 <__aeabi_d2iz+0x24>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x5c>)
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0340      	lsls	r0, r0, #13
 8002f44:	4301      	orrs	r1, r0
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <__aeabi_d2iz+0x60>)
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	281f      	cmp	r0, #31
 8002f4c:	dd08      	ble.n	8002f60 <__aeabi_d2iz+0x44>
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x64>)
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
 8002f56:	4258      	negs	r0, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f0      	bne.n	8002f3e <__aeabi_d2iz+0x22>
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_d2iz+0x22>
 8002f60:	4c08      	ldr	r4, [pc, #32]	; (8002f84 <__aeabi_d2iz+0x68>)
 8002f62:	40c5      	lsrs	r5, r0
 8002f64:	46a4      	mov	ip, r4
 8002f66:	4463      	add	r3, ip
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	432b      	orrs	r3, r5
 8002f6e:	e7f2      	b.n	8002f56 <__aeabi_d2iz+0x3a>
 8002f70:	000003fe 	.word	0x000003fe
 8002f74:	0000041d 	.word	0x0000041d
 8002f78:	7fffffff 	.word	0x7fffffff
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	fffffbed 	.word	0xfffffbed

08002f88 <__aeabi_i2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d016      	beq.n	8002fbc <__aeabi_i2d+0x34>
 8002f8e:	17c3      	asrs	r3, r0, #31
 8002f90:	18c5      	adds	r5, r0, r3
 8002f92:	405d      	eors	r5, r3
 8002f94:	0fc4      	lsrs	r4, r0, #31
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f91c 	bl	80031d4 <__clzsi2>
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <__aeabi_i2d+0x5c>)
 8002f9e:	1a12      	subs	r2, r2, r0
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc16      	bgt.n	8002fd2 <__aeabi_i2d+0x4a>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	3315      	adds	r3, #21
 8002faa:	409e      	lsls	r6, r3
 8002fac:	230b      	movs	r3, #11
 8002fae:	1a18      	subs	r0, r3, r0
 8002fb0:	40c5      	lsrs	r5, r0
 8002fb2:	0553      	lsls	r3, r2, #21
 8002fb4:	032d      	lsls	r5, r5, #12
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	e003      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	380b      	subs	r0, #11
 8002fd4:	4085      	lsls	r5, r0
 8002fd6:	0553      	lsls	r3, r2, #21
 8002fd8:	032d      	lsls	r5, r5, #12
 8002fda:	2600      	movs	r6, #0
 8002fdc:	0b2d      	lsrs	r5, r5, #12
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	e7f0      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_ui2d>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e04      	subs	r4, r0, #0
 8002fec:	d010      	beq.n	8003010 <__aeabi_ui2d+0x28>
 8002fee:	f000 f8f1 	bl	80031d4 <__clzsi2>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_ui2d+0x48>)
 8002ff4:	1a1b      	subs	r3, r3, r0
 8002ff6:	280a      	cmp	r0, #10
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_ui2d+0x36>
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	40d1      	lsrs	r1, r2
 8003002:	3015      	adds	r0, #21
 8003004:	030a      	lsls	r2, r1, #12
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4084      	lsls	r4, r0
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e001      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	0020      	movs	r0, r4
 800301a:	0019      	movs	r1, r3
 800301c:	bd10      	pop	{r4, pc}
 800301e:	0022      	movs	r2, r4
 8003020:	380b      	subs	r0, #11
 8003022:	4082      	lsls	r2, r0
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	2400      	movs	r4, #0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e7f1      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003030:	0000041e 	.word	0x0000041e

08003034 <__aeabi_f2d>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0043      	lsls	r3, r0, #1
 8003038:	0246      	lsls	r6, r0, #9
 800303a:	0fc4      	lsrs	r4, r0, #31
 800303c:	20fe      	movs	r0, #254	; 0xfe
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	0a75      	lsrs	r5, r6, #9
 8003044:	4208      	tst	r0, r1
 8003046:	d00c      	beq.n	8003062 <__aeabi_f2d+0x2e>
 8003048:	22e0      	movs	r2, #224	; 0xe0
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4694      	mov	ip, r2
 800304e:	076d      	lsls	r5, r5, #29
 8003050:	0b36      	lsrs	r6, r6, #12
 8003052:	4463      	add	r3, ip
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	4333      	orrs	r3, r6
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0028      	movs	r0, r5
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x5c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01b      	beq.n	80030a2 <__aeabi_f2d+0x6e>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8b2 	bl	80031d4 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x7a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <__aeabi_f2d+0x88>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b16      	lsrs	r6, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7e1      	b.n	8003054 <__aeabi_f2d+0x20>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d009      	beq.n	80030a8 <__aeabi_f2d+0x74>
 8003094:	0b32      	lsrs	r2, r6, #12
 8003096:	2680      	movs	r6, #128	; 0x80
 8003098:	0336      	lsls	r6, r6, #12
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__aeabi_f2d+0x8c>)
 800309c:	076d      	lsls	r5, r5, #29
 800309e:	4316      	orrs	r6, r2
 80030a0:	e7d8      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2600      	movs	r6, #0
 80030a6:	e7d5      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030ac:	e7d2      	b.n	8003054 <__aeabi_f2d+0x20>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x4e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00000389 	.word	0x00000389
 80030c0:	000007ff 	.word	0x000007ff

080030c4 <__aeabi_d2f>:
 80030c4:	0002      	movs	r2, r0
 80030c6:	004b      	lsls	r3, r1, #1
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	0308      	lsls	r0, r1, #12
 80030cc:	0d5b      	lsrs	r3, r3, #21
 80030ce:	4e3d      	ldr	r6, [pc, #244]	; (80031c4 <__aeabi_d2f+0x100>)
 80030d0:	0fcc      	lsrs	r4, r1, #31
 80030d2:	0a40      	lsrs	r0, r0, #9
 80030d4:	0f51      	lsrs	r1, r2, #29
 80030d6:	1c5f      	adds	r7, r3, #1
 80030d8:	4308      	orrs	r0, r1
 80030da:	00d5      	lsls	r5, r2, #3
 80030dc:	4237      	tst	r7, r6
 80030de:	d00a      	beq.n	80030f6 <__aeabi_d2f+0x32>
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <__aeabi_d2f+0x104>)
 80030e2:	185e      	adds	r6, r3, r1
 80030e4:	2efe      	cmp	r6, #254	; 0xfe
 80030e6:	dd16      	ble.n	8003116 <__aeabi_d2f+0x52>
 80030e8:	23ff      	movs	r3, #255	; 0xff
 80030ea:	2100      	movs	r1, #0
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	430b      	orrs	r3, r1
 80030f0:	07e0      	lsls	r0, r4, #31
 80030f2:	4318      	orrs	r0, r3
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <__aeabi_d2f+0x44>
 80030fa:	4328      	orrs	r0, r5
 80030fc:	d027      	beq.n	800314e <__aeabi_d2f+0x8a>
 80030fe:	2105      	movs	r1, #5
 8003100:	0189      	lsls	r1, r1, #6
 8003102:	0a49      	lsrs	r1, r1, #9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e7f1      	b.n	80030ec <__aeabi_d2f+0x28>
 8003108:	4305      	orrs	r5, r0
 800310a:	d0ed      	beq.n	80030e8 <__aeabi_d2f+0x24>
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	03c9      	lsls	r1, r1, #15
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	4301      	orrs	r1, r0
 8003114:	e7ea      	b.n	80030ec <__aeabi_d2f+0x28>
 8003116:	2e00      	cmp	r6, #0
 8003118:	dd1c      	ble.n	8003154 <__aeabi_d2f+0x90>
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	0011      	movs	r1, r2
 800311e:	1e4a      	subs	r2, r1, #1
 8003120:	4191      	sbcs	r1, r2
 8003122:	00c0      	lsls	r0, r0, #3
 8003124:	0f6d      	lsrs	r5, r5, #29
 8003126:	4301      	orrs	r1, r0
 8003128:	4329      	orrs	r1, r5
 800312a:	074b      	lsls	r3, r1, #29
 800312c:	d048      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 800312e:	230f      	movs	r3, #15
 8003130:	400b      	ands	r3, r1
 8003132:	2b04      	cmp	r3, #4
 8003134:	d000      	beq.n	8003138 <__aeabi_d2f+0x74>
 8003136:	3104      	adds	r1, #4
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	04db      	lsls	r3, r3, #19
 800313c:	400b      	ands	r3, r1
 800313e:	d03f      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 8003140:	1c72      	adds	r2, r6, #1
 8003142:	2efe      	cmp	r6, #254	; 0xfe
 8003144:	d0d0      	beq.n	80030e8 <__aeabi_d2f+0x24>
 8003146:	0189      	lsls	r1, r1, #6
 8003148:	0a49      	lsrs	r1, r1, #9
 800314a:	b2d3      	uxtb	r3, r2
 800314c:	e7ce      	b.n	80030ec <__aeabi_d2f+0x28>
 800314e:	2300      	movs	r3, #0
 8003150:	2100      	movs	r1, #0
 8003152:	e7cb      	b.n	80030ec <__aeabi_d2f+0x28>
 8003154:	0032      	movs	r2, r6
 8003156:	3217      	adds	r2, #23
 8003158:	db22      	blt.n	80031a0 <__aeabi_d2f+0xdc>
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	221e      	movs	r2, #30
 800315e:	0409      	lsls	r1, r1, #16
 8003160:	4308      	orrs	r0, r1
 8003162:	1b92      	subs	r2, r2, r6
 8003164:	2a1f      	cmp	r2, #31
 8003166:	dd1d      	ble.n	80031a4 <__aeabi_d2f+0xe0>
 8003168:	2102      	movs	r1, #2
 800316a:	4249      	negs	r1, r1
 800316c:	1b8e      	subs	r6, r1, r6
 800316e:	0001      	movs	r1, r0
 8003170:	40f1      	lsrs	r1, r6
 8003172:	000e      	movs	r6, r1
 8003174:	2a20      	cmp	r2, #32
 8003176:	d004      	beq.n	8003182 <__aeabi_d2f+0xbe>
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <__aeabi_d2f+0x108>)
 800317a:	4694      	mov	ip, r2
 800317c:	4463      	add	r3, ip
 800317e:	4098      	lsls	r0, r3
 8003180:	4305      	orrs	r5, r0
 8003182:	0029      	movs	r1, r5
 8003184:	1e4d      	subs	r5, r1, #1
 8003186:	41a9      	sbcs	r1, r5
 8003188:	4331      	orrs	r1, r6
 800318a:	2600      	movs	r6, #0
 800318c:	074b      	lsls	r3, r1, #29
 800318e:	d1ce      	bne.n	800312e <__aeabi_d2f+0x6a>
 8003190:	2080      	movs	r0, #128	; 0x80
 8003192:	000b      	movs	r3, r1
 8003194:	04c0      	lsls	r0, r0, #19
 8003196:	2201      	movs	r2, #1
 8003198:	4003      	ands	r3, r0
 800319a:	4201      	tst	r1, r0
 800319c:	d1d3      	bne.n	8003146 <__aeabi_d2f+0x82>
 800319e:	e7af      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e7ac      	b.n	80030fe <__aeabi_d2f+0x3a>
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <__aeabi_d2f+0x10c>)
 80031a6:	468c      	mov	ip, r1
 80031a8:	0029      	movs	r1, r5
 80031aa:	4463      	add	r3, ip
 80031ac:	40d1      	lsrs	r1, r2
 80031ae:	409d      	lsls	r5, r3
 80031b0:	000a      	movs	r2, r1
 80031b2:	0029      	movs	r1, r5
 80031b4:	4098      	lsls	r0, r3
 80031b6:	1e4d      	subs	r5, r1, #1
 80031b8:	41a9      	sbcs	r1, r5
 80031ba:	4301      	orrs	r1, r0
 80031bc:	4311      	orrs	r1, r2
 80031be:	e7e4      	b.n	800318a <__aeabi_d2f+0xc6>
 80031c0:	0033      	movs	r3, r6
 80031c2:	e79d      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031c4:	000007fe 	.word	0x000007fe
 80031c8:	fffffc80 	.word	0xfffffc80
 80031cc:	fffffca2 	.word	0xfffffca2
 80031d0:	fffffc82 	.word	0xfffffc82

080031d4 <__clzsi2>:
 80031d4:	211c      	movs	r1, #28
 80031d6:	2301      	movs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	4298      	cmp	r0, r3
 80031dc:	d301      	bcc.n	80031e2 <__clzsi2+0xe>
 80031de:	0c00      	lsrs	r0, r0, #16
 80031e0:	3910      	subs	r1, #16
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	4298      	cmp	r0, r3
 80031e6:	d301      	bcc.n	80031ec <__clzsi2+0x18>
 80031e8:	0a00      	lsrs	r0, r0, #8
 80031ea:	3908      	subs	r1, #8
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d301      	bcc.n	80031f6 <__clzsi2+0x22>
 80031f2:	0900      	lsrs	r0, r0, #4
 80031f4:	3904      	subs	r1, #4
 80031f6:	a202      	add	r2, pc, #8	; (adr r2, 8003200 <__clzsi2+0x2c>)
 80031f8:	5c10      	ldrb	r0, [r2, r0]
 80031fa:	1840      	adds	r0, r0, r1
 80031fc:	4770      	bx	lr
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	02020304 	.word	0x02020304
 8003204:	01010101 	.word	0x01010101
	...

08003210 <__divdi3>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	4657      	mov	r7, sl
 8003214:	464e      	mov	r6, r9
 8003216:	4645      	mov	r5, r8
 8003218:	46de      	mov	lr, fp
 800321a:	b5e0      	push	{r5, r6, r7, lr}
 800321c:	000f      	movs	r7, r1
 800321e:	0019      	movs	r1, r3
 8003220:	2300      	movs	r3, #0
 8003222:	0006      	movs	r6, r0
 8003224:	4698      	mov	r8, r3
 8003226:	0010      	movs	r0, r2
 8003228:	b083      	sub	sp, #12
 800322a:	2f00      	cmp	r7, #0
 800322c:	da07      	bge.n	800323e <__divdi3+0x2e>
 800322e:	0033      	movs	r3, r6
 8003230:	003c      	movs	r4, r7
 8003232:	2700      	movs	r7, #0
 8003234:	425e      	negs	r6, r3
 8003236:	41a7      	sbcs	r7, r4
 8003238:	2301      	movs	r3, #1
 800323a:	425b      	negs	r3, r3
 800323c:	4698      	mov	r8, r3
 800323e:	2900      	cmp	r1, #0
 8003240:	da07      	bge.n	8003252 <__divdi3+0x42>
 8003242:	4643      	mov	r3, r8
 8003244:	43db      	mvns	r3, r3
 8003246:	000c      	movs	r4, r1
 8003248:	4698      	mov	r8, r3
 800324a:	0003      	movs	r3, r0
 800324c:	2100      	movs	r1, #0
 800324e:	4258      	negs	r0, r3
 8003250:	41a1      	sbcs	r1, r4
 8003252:	0034      	movs	r4, r6
 8003254:	003d      	movs	r5, r7
 8003256:	4682      	mov	sl, r0
 8003258:	4689      	mov	r9, r1
 800325a:	42b9      	cmp	r1, r7
 800325c:	d86a      	bhi.n	8003334 <__divdi3+0x124>
 800325e:	d067      	beq.n	8003330 <__divdi3+0x120>
 8003260:	4649      	mov	r1, r9
 8003262:	4650      	mov	r0, sl
 8003264:	f000 f8ba 	bl	80033dc <__clzdi2>
 8003268:	4683      	mov	fp, r0
 800326a:	0039      	movs	r1, r7
 800326c:	0030      	movs	r0, r6
 800326e:	f000 f8b5 	bl	80033dc <__clzdi2>
 8003272:	465b      	mov	r3, fp
 8003274:	1a1b      	subs	r3, r3, r0
 8003276:	469c      	mov	ip, r3
 8003278:	3b20      	subs	r3, #32
 800327a:	469b      	mov	fp, r3
 800327c:	d46b      	bmi.n	8003356 <__divdi3+0x146>
 800327e:	4658      	mov	r0, fp
 8003280:	4651      	mov	r1, sl
 8003282:	4081      	lsls	r1, r0
 8003284:	4660      	mov	r0, ip
 8003286:	000b      	movs	r3, r1
 8003288:	4651      	mov	r1, sl
 800328a:	4081      	lsls	r1, r0
 800328c:	000a      	movs	r2, r1
 800328e:	42bb      	cmp	r3, r7
 8003290:	d900      	bls.n	8003294 <__divdi3+0x84>
 8003292:	e072      	b.n	800337a <__divdi3+0x16a>
 8003294:	42bb      	cmp	r3, r7
 8003296:	d100      	bne.n	800329a <__divdi3+0x8a>
 8003298:	e079      	b.n	800338e <__divdi3+0x17e>
 800329a:	0034      	movs	r4, r6
 800329c:	003d      	movs	r5, r7
 800329e:	4659      	mov	r1, fp
 80032a0:	1aa4      	subs	r4, r4, r2
 80032a2:	419d      	sbcs	r5, r3
 80032a4:	2900      	cmp	r1, #0
 80032a6:	da00      	bge.n	80032aa <__divdi3+0x9a>
 80032a8:	e074      	b.n	8003394 <__divdi3+0x184>
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	2601      	movs	r6, #1
 80032b0:	9000      	str	r0, [sp, #0]
 80032b2:	9101      	str	r1, [sp, #4]
 80032b4:	4659      	mov	r1, fp
 80032b6:	408e      	lsls	r6, r1
 80032b8:	9601      	str	r6, [sp, #4]
 80032ba:	4661      	mov	r1, ip
 80032bc:	2601      	movs	r6, #1
 80032be:	408e      	lsls	r6, r1
 80032c0:	4661      	mov	r1, ip
 80032c2:	9600      	str	r6, [sp, #0]
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d05f      	beq.n	8003388 <__divdi3+0x178>
 80032c8:	07d9      	lsls	r1, r3, #31
 80032ca:	0856      	lsrs	r6, r2, #1
 80032cc:	430e      	orrs	r6, r1
 80032ce:	085f      	lsrs	r7, r3, #1
 80032d0:	4661      	mov	r1, ip
 80032d2:	2201      	movs	r2, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	e00c      	b.n	80032f2 <__divdi3+0xe2>
 80032d8:	42af      	cmp	r7, r5
 80032da:	d101      	bne.n	80032e0 <__divdi3+0xd0>
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d80a      	bhi.n	80032f6 <__divdi3+0xe6>
 80032e0:	1ba4      	subs	r4, r4, r6
 80032e2:	41bd      	sbcs	r5, r7
 80032e4:	1924      	adds	r4, r4, r4
 80032e6:	416d      	adcs	r5, r5
 80032e8:	3901      	subs	r1, #1
 80032ea:	18a4      	adds	r4, r4, r2
 80032ec:	415d      	adcs	r5, r3
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d006      	beq.n	8003300 <__divdi3+0xf0>
 80032f2:	42af      	cmp	r7, r5
 80032f4:	d9f0      	bls.n	80032d8 <__divdi3+0xc8>
 80032f6:	3901      	subs	r1, #1
 80032f8:	1924      	adds	r4, r4, r4
 80032fa:	416d      	adcs	r5, r5
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d1f8      	bne.n	80032f2 <__divdi3+0xe2>
 8003300:	9800      	ldr	r0, [sp, #0]
 8003302:	9901      	ldr	r1, [sp, #4]
 8003304:	465b      	mov	r3, fp
 8003306:	1900      	adds	r0, r0, r4
 8003308:	4169      	adcs	r1, r5
 800330a:	2b00      	cmp	r3, #0
 800330c:	db4d      	blt.n	80033aa <__divdi3+0x19a>
 800330e:	002e      	movs	r6, r5
 8003310:	002c      	movs	r4, r5
 8003312:	40de      	lsrs	r6, r3
 8003314:	4663      	mov	r3, ip
 8003316:	40dc      	lsrs	r4, r3
 8003318:	465b      	mov	r3, fp
 800331a:	2b00      	cmp	r3, #0
 800331c:	db55      	blt.n	80033ca <__divdi3+0x1ba>
 800331e:	0034      	movs	r4, r6
 8003320:	409c      	lsls	r4, r3
 8003322:	0023      	movs	r3, r4
 8003324:	4664      	mov	r4, ip
 8003326:	40a6      	lsls	r6, r4
 8003328:	0032      	movs	r2, r6
 800332a:	1a80      	subs	r0, r0, r2
 800332c:	4199      	sbcs	r1, r3
 800332e:	e003      	b.n	8003338 <__divdi3+0x128>
 8003330:	42b0      	cmp	r0, r6
 8003332:	d995      	bls.n	8003260 <__divdi3+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	2100      	movs	r1, #0
 8003338:	4643      	mov	r3, r8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <__divdi3+0x138>
 800333e:	0003      	movs	r3, r0
 8003340:	000c      	movs	r4, r1
 8003342:	2100      	movs	r1, #0
 8003344:	4258      	negs	r0, r3
 8003346:	41a1      	sbcs	r1, r4
 8003348:	b003      	add	sp, #12
 800334a:	bcf0      	pop	{r4, r5, r6, r7}
 800334c:	46bb      	mov	fp, r7
 800334e:	46b2      	mov	sl, r6
 8003350:	46a9      	mov	r9, r5
 8003352:	46a0      	mov	r8, r4
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	4662      	mov	r2, ip
 8003358:	4648      	mov	r0, r9
 800335a:	2320      	movs	r3, #32
 800335c:	4651      	mov	r1, sl
 800335e:	4090      	lsls	r0, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	40d9      	lsrs	r1, r3
 8003364:	0003      	movs	r3, r0
 8003366:	9100      	str	r1, [sp, #0]
 8003368:	9900      	ldr	r1, [sp, #0]
 800336a:	4660      	mov	r0, ip
 800336c:	430b      	orrs	r3, r1
 800336e:	4651      	mov	r1, sl
 8003370:	4081      	lsls	r1, r0
 8003372:	000a      	movs	r2, r1
 8003374:	42bb      	cmp	r3, r7
 8003376:	d800      	bhi.n	800337a <__divdi3+0x16a>
 8003378:	e78c      	b.n	8003294 <__divdi3+0x84>
 800337a:	2100      	movs	r1, #0
 800337c:	2000      	movs	r0, #0
 800337e:	9000      	str	r0, [sp, #0]
 8003380:	9101      	str	r1, [sp, #4]
 8003382:	4661      	mov	r1, ip
 8003384:	2900      	cmp	r1, #0
 8003386:	d19f      	bne.n	80032c8 <__divdi3+0xb8>
 8003388:	9800      	ldr	r0, [sp, #0]
 800338a:	9901      	ldr	r1, [sp, #4]
 800338c:	e7d4      	b.n	8003338 <__divdi3+0x128>
 800338e:	42b1      	cmp	r1, r6
 8003390:	d8f3      	bhi.n	800337a <__divdi3+0x16a>
 8003392:	e782      	b.n	800329a <__divdi3+0x8a>
 8003394:	4661      	mov	r1, ip
 8003396:	2620      	movs	r6, #32
 8003398:	2701      	movs	r7, #1
 800339a:	1a76      	subs	r6, r6, r1
 800339c:	2000      	movs	r0, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	40f7      	lsrs	r7, r6
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	9101      	str	r1, [sp, #4]
 80033a6:	9701      	str	r7, [sp, #4]
 80033a8:	e787      	b.n	80032ba <__divdi3+0xaa>
 80033aa:	4662      	mov	r2, ip
 80033ac:	2320      	movs	r3, #32
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	002a      	movs	r2, r5
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0026      	movs	r6, r4
 80033b6:	0013      	movs	r3, r2
 80033b8:	4662      	mov	r2, ip
 80033ba:	40d6      	lsrs	r6, r2
 80033bc:	002c      	movs	r4, r5
 80033be:	431e      	orrs	r6, r3
 80033c0:	4663      	mov	r3, ip
 80033c2:	40dc      	lsrs	r4, r3
 80033c4:	465b      	mov	r3, fp
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	daa9      	bge.n	800331e <__divdi3+0x10e>
 80033ca:	4662      	mov	r2, ip
 80033cc:	2320      	movs	r3, #32
 80033ce:	0035      	movs	r5, r6
 80033d0:	4094      	lsls	r4, r2
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	40dd      	lsrs	r5, r3
 80033d6:	0023      	movs	r3, r4
 80033d8:	432b      	orrs	r3, r5
 80033da:	e7a3      	b.n	8003324 <__divdi3+0x114>

080033dc <__clzdi2>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d103      	bne.n	80033ea <__clzdi2+0xe>
 80033e2:	f7ff fef7 	bl	80031d4 <__clzsi2>
 80033e6:	3020      	adds	r0, #32
 80033e8:	e002      	b.n	80033f0 <__clzdi2+0x14>
 80033ea:	1c08      	adds	r0, r1, #0
 80033ec:	f7ff fef2 	bl	80031d4 <__clzsi2>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)

080033f4 <HAL_GPIO_EXTI_Falling_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	0002      	movs	r2, r0
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	801a      	strh	r2, [r3, #0]

	flagClockConfig = 1;
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_GPIO_EXTI_Falling_Callback+0x210>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]

	//reset settings counter
	if (flagSettings == FLAG_SETTINGS_ON) {
 8003406:	4b80      	ldr	r3, [pc, #512]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counterSettings = SETTINGS_TIME
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_GPIO_EXTI_Falling_Callback+0x218>)
 8003412:	2205      	movs	r2, #5
 8003414:	701a      	strb	r2, [r3, #0]
		;
	}

	//set full update flag, when both reset and set pin was pressed

	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	2110      	movs	r1, #16
 800341c:	0018      	movs	r0, r3
 800341e:	f003 ff15 	bl	800724c <HAL_GPIO_ReadPin>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d118      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
			== 0&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0 && HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1 && flagLocked == UNLOCKED) {
 8003426:	23a0      	movs	r3, #160	; 0xa0
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	2108      	movs	r1, #8
 800342c:	0018      	movs	r0, r3
 800342e:	f003 ff0d 	bl	800724c <HAL_GPIO_ReadPin>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d110      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	2104      	movs	r1, #4
 800343c:	0018      	movs	r0, r3
 800343e:	f003 ff05 	bl	800724c <HAL_GPIO_ReadPin>
 8003442:	0003      	movs	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
 8003448:	4b71      	ldr	r3, [pc, #452]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_GPIO_EXTI_Falling_Callback+0x64>
		interfaceFullUpdateFlag = 1;
 8003452:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
	}

	//lock watch when underwater
	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 8003458:	23a0      	movs	r3, #160	; 0xa0
 800345a:	05db      	lsls	r3, r3, #23
 800345c:	2110      	movs	r1, #16
 800345e:	0018      	movs	r0, r3
 8003460:	f003 fef4 	bl	800724c <HAL_GPIO_ReadPin>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d152      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 8003468:	23a0      	movs	r3, #160	; 0xa0
 800346a:	05db      	lsls	r3, r3, #23
 800346c:	2108      	movs	r1, #8
 800346e:	0018      	movs	r0, r3
 8003470:	f003 feec 	bl	800724c <HAL_GPIO_ReadPin>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d14a      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 0) {
 8003478:	23a0      	movs	r3, #160	; 0xa0
 800347a:	05db      	lsls	r3, r3, #23
 800347c:	2104      	movs	r1, #4
 800347e:	0018      	movs	r0, r3
 8003480:	f003 fee4 	bl	800724c <HAL_GPIO_ReadPin>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d142      	bne.n	800350e <HAL_GPIO_EXTI_Falling_Callback+0x11a>
		flagLocked = LOCKED;
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
		flagSettings = FLAG_SETTINGS_OFF;
 800348e:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]

		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8003494:	4b60      	ldr	r3, [pc, #384]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 800349e:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d001      	beq.n	80034ac <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 80034a8:	f000 fd2d 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034ac:	4b5b      	ldr	r3, [pc, #364]	; (800361c <HAL_GPIO_EXTI_Falling_Callback+0x228>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_GPIO_EXTI_Falling_Callback+0xc6>
 80034b6:	f000 fd26 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
				&& chronoMonth == 0 && chronoDay == 0 && chronoHours == 0
 80034ba:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
 80034c4:	f000 fd1f 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034c8:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_GPIO_EXTI_Falling_Callback+0xe2>
 80034d2:	f000 fd18 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_GPIO_EXTI_Falling_Callback+0xf0>
 80034e0:	f000 fd11 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
				&& chronoMinutes == 0 && chronoSeconds < 5) {
 80034e4:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
 80034ee:	f000 fd0a 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_GPIO_EXTI_Falling_Callback+0x23c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	dd01      	ble.n	8003500 <HAL_GPIO_EXTI_Falling_Callback+0x10c>
 80034fc:	f000 fd03 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>
			mode = MODE_NORMAL;
 8003500:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
			rtcResetChrono();
 8003506:	f00a fae5 	bl	800dad4 <rtcResetChrono>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 800350a:	f000 fcfc 	bl	8003f06 <HAL_GPIO_EXTI_Falling_Callback+0xb12>

		}

	} else {

		flagDontSleep = 1;
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_GPIO_EXTI_Falling_Callback+0x240>)
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]

		//										START BUTTON
		if (GPIO_Pin == START_Pin
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d001      	beq.n	8003520 <HAL_GPIO_EXTI_Falling_Callback+0x12c>
 800351c:	f000 fbea 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 8003520:	23a0      	movs	r3, #160	; 0xa0
 8003522:	05db      	lsls	r3, r3, #23
 8003524:	2104      	movs	r1, #4
 8003526:	0018      	movs	r0, r3
 8003528:	f003 fe90 	bl	800724c <HAL_GPIO_ReadPin>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d001      	beq.n	8003534 <HAL_GPIO_EXTI_Falling_Callback+0x140>
 8003530:	f000 fbe0 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2110      	movs	r1, #16
 800353a:	0018      	movs	r0, r3
 800353c:	f003 fe86 	bl	800724c <HAL_GPIO_ReadPin>
 8003540:	0003      	movs	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_GPIO_EXTI_Falling_Callback+0x156>
 8003546:	f000 fbd5 	bl	8003cf4 <HAL_GPIO_EXTI_Falling_Callback+0x900>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_GPIO_EXTI_Falling_Callback+0x164>
 8003554:	f000 fcd9 	bl	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

				if (flagSettings == FLAG_SETTINGS_OFF) {
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d000      	beq.n	8003564 <HAL_GPIO_EXTI_Falling_Callback+0x170>
 8003562:	e1b1      	b.n	80038c8 <HAL_GPIO_EXTI_Falling_Callback+0x4d4>

					if (mode == MODE_NORMAL) { // start chrono if mode is set as normal
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d000      	beq.n	8003570 <HAL_GPIO_EXTI_Falling_Callback+0x17c>
 800356e:	e07d      	b.n	800366c <HAL_GPIO_EXTI_Falling_Callback+0x278>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <HAL_GPIO_EXTI_Falling_Callback+0x244>)
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8003574:	2200      	movs	r2, #0
 8003576:	0018      	movs	r0, r3
 8003578:	f005 fe6c 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
						RTC_WAKEUPCLOCK_RTCCLK_DIV16);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800357c:	4930      	ldr	r1, [pc, #192]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8003580:	2200      	movs	r2, #0
 8003582:	0018      	movs	r0, r3
 8003584:	f005 fc36 	bl	8008df4 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003588:	492e      	ldr	r1, [pc, #184]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 800358c:	2200      	movs	r2, #0
 800358e:	0018      	movs	r0, r3
 8003590:	f005 fd1e 	bl	8008fd0 <HAL_RTC_GetDate>

						chronoStartSeconds = sTime.Seconds;
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	b25a      	sxtb	r2, r3
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_GPIO_EXTI_Falling_Callback+0x254>)
 800359c:	701a      	strb	r2, [r3, #0]
						chronoStartMinutes = sTime.Minutes;
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_GPIO_EXTI_Falling_Callback+0x258>)
 80035a6:	801a      	strh	r2, [r3, #0]
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	0013      	movs	r3, r2
 80035ae:	065b      	lsls	r3, r3, #25
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <HAL_GPIO_EXTI_Falling_Callback+0x25c>)
 80035be:	4694      	mov	ip, r2
 80035c0:	4463      	add	r3, ip
								/ 255) / 10;
 80035c2:	4924      	ldr	r1, [pc, #144]	; (8003654 <HAL_GPIO_EXTI_Falling_Callback+0x260>)
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fc fda5 	bl	8000114 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	001a      	movs	r2, r3
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_GPIO_EXTI_Falling_Callback+0x264>)
 80035d0:	601a      	str	r2, [r3, #0]
						chronoStartHours = sTime.Hours;
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b25a      	sxtb	r2, r3
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_GPIO_EXTI_Falling_Callback+0x268>)
 80035da:	701a      	strb	r2, [r3, #0]
						chronoStartDay = sDate.Date;
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035de:	789b      	ldrb	r3, [r3, #2]
 80035e0:	b25a      	sxtb	r2, r3
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_GPIO_EXTI_Falling_Callback+0x26c>)
 80035e4:	701a      	strb	r2, [r3, #0]
						chronoStartMonth = sDate.Month;
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	b25a      	sxtb	r2, r3
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_GPIO_EXTI_Falling_Callback+0x270>)
 80035ee:	701a      	strb	r2, [r3, #0]
						chronoStartYear = sDate.Year;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 80035f2:	78db      	ldrb	r3, [r3, #3]
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_GPIO_EXTI_Falling_Callback+0x274>)
 80035f8:	701a      	strb	r2, [r3, #0]

						mode = MODE_CHRONO;
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003600:	f000 fc83 	bl	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>
 8003604:	200006e8 	.word	0x200006e8
 8003608:	2000065e 	.word	0x2000065e
 800360c:	20000768 	.word	0x20000768
 8003610:	200004c7 	.word	0x200004c7
 8003614:	200007a4 	.word	0x200007a4
 8003618:	200004c8 	.word	0x200004c8
 800361c:	20000662 	.word	0x20000662
 8003620:	20000384 	.word	0x20000384
 8003624:	2000079e 	.word	0x2000079e
 8003628:	200003c5 	.word	0x200003c5
 800362c:	200007b6 	.word	0x200007b6
 8003630:	20000776 	.word	0x20000776
 8003634:	20000795 	.word	0x20000795
 8003638:	0000f7b7 	.word	0x0000f7b7
 800363c:	2000084c 	.word	0x2000084c
 8003640:	2000019c 	.word	0x2000019c
 8003644:	20000708 	.word	0x20000708
 8003648:	20000136 	.word	0x20000136
 800364c:	200003b6 	.word	0x200003b6
 8003650:	0000639c 	.word	0x0000639c
 8003654:	000009f6 	.word	0x000009f6
 8003658:	2000012c 	.word	0x2000012c
 800365c:	20000714 	.word	0x20000714
 8003660:	20000777 	.word	0x20000777
 8003664:	2000034a 	.word	0x2000034a
 8003668:	200006e4 	.word	0x200006e4
					}

					else if (mode == MODE_CHRONO) { //stop chrono if chrono is working
 800366c:	4bda      	ldr	r3, [pc, #872]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d000      	beq.n	8003678 <HAL_GPIO_EXTI_Falling_Callback+0x284>
 8003676:	e11d      	b.n	80038b4 <HAL_GPIO_EXTI_Falling_Callback+0x4c0>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003678:	49d8      	ldr	r1, [pc, #864]	; (80039dc <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800367a:	4bd9      	ldr	r3, [pc, #868]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800367c:	2200      	movs	r2, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f005 fde8 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
						RTC_WAKEUPCLOCK_RTCCLK_DIV16);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003684:	49d7      	ldr	r1, [pc, #860]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8003686:	4bd6      	ldr	r3, [pc, #856]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8003688:	2200      	movs	r2, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f005 fbb2 	bl	8008df4 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003690:	49d5      	ldr	r1, [pc, #852]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 8003692:	4bd3      	ldr	r3, [pc, #844]	; (80039e0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8003694:	2200      	movs	r2, #0
 8003696:	0018      	movs	r0, r3
 8003698:	f005 fc9a 	bl	8008fd0 <HAL_RTC_GetDate>

						minutes = sTime.Minutes;
 800369c:	4bd1      	ldr	r3, [pc, #836]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4bd2      	ldr	r3, [pc, #840]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80036a4:	801a      	strh	r2, [r3, #0]
						seconds = sTime.Seconds;
 80036a6:	4bcf      	ldr	r3, [pc, #828]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036a8:	789b      	ldrb	r3, [r3, #2]
 80036aa:	b25a      	sxtb	r2, r3
 80036ac:	4bd0      	ldr	r3, [pc, #832]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 80036ae:	701a      	strb	r2, [r3, #0]
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 80036b0:	4bcc      	ldr	r3, [pc, #816]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	0013      	movs	r3, r2
 80036b6:	065b      	lsls	r3, r3, #25
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4acb      	ldr	r2, [pc, #812]	; (80039f4 <HAL_GPIO_EXTI_Falling_Callback+0x600>)
 80036c6:	4694      	mov	ip, r2
 80036c8:	4463      	add	r3, ip
								/ 10;
 80036ca:	49cb      	ldr	r1, [pc, #812]	; (80039f8 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fc fd21 	bl	8000114 <__udivsi3>
 80036d2:	0003      	movs	r3, r0
 80036d4:	001a      	movs	r2, r3
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 80036d6:	4bc9      	ldr	r3, [pc, #804]	; (80039fc <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 80036d8:	601a      	str	r2, [r3, #0]
						hours = sTime.Hours;
 80036da:	4bc2      	ldr	r3, [pc, #776]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	4bc7      	ldr	r3, [pc, #796]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 80036e2:	701a      	strb	r2, [r3, #0]
						day = sDate.Date;
 80036e4:	4bc0      	ldr	r3, [pc, #768]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036e6:	789a      	ldrb	r2, [r3, #2]
 80036e8:	4bc6      	ldr	r3, [pc, #792]	; (8003a04 <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 80036ea:	701a      	strb	r2, [r3, #0]
						month = sDate.Month;
 80036ec:	4bbe      	ldr	r3, [pc, #760]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036ee:	785a      	ldrb	r2, [r3, #1]
 80036f0:	4bc5      	ldr	r3, [pc, #788]	; (8003a08 <HAL_GPIO_EXTI_Falling_Callback+0x614>)
 80036f2:	701a      	strb	r2, [r3, #0]
						year = sDate.Year;
 80036f4:	4bbc      	ldr	r3, [pc, #752]	; (80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80036f6:	78da      	ldrb	r2, [r3, #3]
 80036f8:	4bc4      	ldr	r3, [pc, #784]	; (8003a0c <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 80036fa:	701a      	strb	r2, [r3, #0]

						chronoDecimals = decimals - chronoStartDecimals;
 80036fc:	4bbf      	ldr	r3, [pc, #764]	; (80039fc <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4bc3      	ldr	r3, [pc, #780]	; (8003a10 <HAL_GPIO_EXTI_Falling_Callback+0x61c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1ad2      	subs	r2, r2, r3
 8003706:	4bc3      	ldr	r3, [pc, #780]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 8003708:	601a      	str	r2, [r3, #0]
						chronoSeconds = seconds - chronoStartSeconds;
 800370a:	4bb9      	ldr	r3, [pc, #740]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b25b      	sxtb	r3, r3
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4bc1      	ldr	r3, [pc, #772]	; (8003a18 <HAL_GPIO_EXTI_Falling_Callback+0x624>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b25a      	sxtb	r2, r3
 8003720:	4bbe      	ldr	r3, [pc, #760]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 8003722:	701a      	strb	r2, [r3, #0]
						chronoMinutes = minutes - chronoStartMinutes;
 8003724:	4bb1      	ldr	r3, [pc, #708]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b21b      	sxth	r3, r3
 800372a:	b29a      	uxth	r2, r3
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <HAL_GPIO_EXTI_Falling_Callback+0x62c>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b21b      	sxth	r3, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	b21a      	sxth	r2, r3
 800373a:	4bba      	ldr	r3, [pc, #744]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 800373c:	801a      	strh	r2, [r3, #0]
						chronoHours = hours - chronoStartHours;
 800373e:	4bb0      	ldr	r3, [pc, #704]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b25b      	sxtb	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4bb8      	ldr	r3, [pc, #736]	; (8003a28 <HAL_GPIO_EXTI_Falling_Callback+0x634>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b25b      	sxtb	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	b25a      	sxtb	r2, r3
 8003754:	4bb5      	ldr	r3, [pc, #724]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003756:	701a      	strb	r2, [r3, #0]
						chronoDay = day - chronoStartDay;
 8003758:	4baa      	ldr	r3, [pc, #680]	; (8003a04 <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4bb4      	ldr	r3, [pc, #720]	; (8003a30 <HAL_GPIO_EXTI_Falling_Callback+0x63c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	b25a      	sxtb	r2, r3
 800376c:	4bb1      	ldr	r3, [pc, #708]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800376e:	701a      	strb	r2, [r3, #0]
						chronoMonth = month - chronoStartMonth;
 8003770:	4ba5      	ldr	r3, [pc, #660]	; (8003a08 <HAL_GPIO_EXTI_Falling_Callback+0x614>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4bb0      	ldr	r3, [pc, #704]	; (8003a38 <HAL_GPIO_EXTI_Falling_Callback+0x644>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b25b      	sxtb	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	b25a      	sxtb	r2, r3
 8003784:	4bad      	ldr	r3, [pc, #692]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 8003786:	701a      	strb	r2, [r3, #0]
						chronoYear = year - chronoStartYear;
 8003788:	4ba0      	ldr	r3, [pc, #640]	; (8003a0c <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4bac      	ldr	r3, [pc, #688]	; (8003a40 <HAL_GPIO_EXTI_Falling_Callback+0x64c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	b25a      	sxtb	r2, r3
 800379c:	4ba9      	ldr	r3, [pc, #676]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 800379e:	701a      	strb	r2, [r3, #0]

						if (chronoDecimals < 0) {
 80037a0:	4b9c      	ldr	r3, [pc, #624]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0e      	bge.n	80037c6 <HAL_GPIO_EXTI_Falling_Callback+0x3d2>
							chronoSeconds--;
 80037a8:	4b9c      	ldr	r3, [pc, #624]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	4b99      	ldr	r3, [pc, #612]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037b8:	701a      	strb	r2, [r3, #0]
							chronoDecimals = chronoDecimals + 10;
 80037ba:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330a      	adds	r3, #10
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80037c4:	601a      	str	r2, [r3, #0]
						}

						if (chronoSeconds < 0) {
 80037c6:	4b95      	ldr	r3, [pc, #596]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da11      	bge.n	80037f4 <HAL_GPIO_EXTI_Falling_Callback+0x400>
							chronoMinutes--;
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	b21a      	sxth	r2, r3
 80037de:	4b91      	ldr	r3, [pc, #580]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037e0:	801a      	strh	r2, [r3, #0]
							chronoSeconds = chronoSeconds + 60;
 80037e2:	4b8e      	ldr	r3, [pc, #568]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	333c      	adds	r3, #60	; 0x3c
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	b25a      	sxtb	r2, r3
 80037f0:	4b8a      	ldr	r3, [pc, #552]	; (8003a1c <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80037f2:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMinutes < 0) {
 80037f4:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b21b      	sxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da11      	bge.n	8003822 <HAL_GPIO_EXTI_Falling_Callback+0x42e>
							chronoHours--;
 80037fe:	4b8b      	ldr	r3, [pc, #556]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b25b      	sxtb	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	b25a      	sxtb	r2, r3
 800380c:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 800380e:	701a      	strb	r2, [r3, #0]
							chronoMinutes = chronoMinutes + 60;
 8003810:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b21b      	sxth	r3, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	333c      	adds	r3, #60	; 0x3c
 800381a:	b29b      	uxth	r3, r3
 800381c:	b21a      	sxth	r2, r3
 800381e:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 8003820:	801a      	strh	r2, [r3, #0]
						}

						if (chronoHours < 0) {
 8003822:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	da11      	bge.n	8003850 <HAL_GPIO_EXTI_Falling_Callback+0x45c>
							chronoDay--;
 800382c:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	b25a      	sxtb	r2, r3
 800383a:	4b7e      	ldr	r3, [pc, #504]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800383c:	701a      	strb	r2, [r3, #0]
							chronoHours = chronoHours + 24;
 800383e:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3318      	adds	r3, #24
 8003848:	b2db      	uxtb	r3, r3
 800384a:	b25a      	sxtb	r2, r3
 800384c:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 800384e:	701a      	strb	r2, [r3, #0]
						}

						if (chronoDay < 0) {
 8003850:	4b78      	ldr	r3, [pc, #480]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b25b      	sxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	da11      	bge.n	800387e <HAL_GPIO_EXTI_Falling_Callback+0x48a>
							chronoMonth--;
 800385a:	4b78      	ldr	r3, [pc, #480]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b25b      	sxtb	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	b25a      	sxtb	r2, r3
 8003868:	4b74      	ldr	r3, [pc, #464]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800386a:	701a      	strb	r2, [r3, #0]
							chronoDay = chronoDay + 30;
 800386c:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	331e      	adds	r3, #30
 8003876:	b2db      	uxtb	r3, r3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800387c:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMonth < 0) {
 800387e:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b25b      	sxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	da11      	bge.n	80038ac <HAL_GPIO_EXTI_Falling_Callback+0x4b8>
							chronoYear--;
 8003888:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b25b      	sxtb	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	b25a      	sxtb	r2, r3
 8003896:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 8003898:	701a      	strb	r2, [r3, #0]
							chronoMonth = chronoMonth + 12;
 800389a:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	330c      	adds	r3, #12
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 80038aa:	701a      	strb	r2, [r3, #0]
						}

						mode = MODE_STOP;
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038ae:	2202      	movs	r2, #2
 80038b0:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80038b2:	e32a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

					}

					else if (mode == MODE_STOP) { //start chrono if was stopped
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d000      	beq.n	80038c0 <HAL_GPIO_EXTI_Falling_Callback+0x4cc>
 80038be:	e324      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

						mode = MODE_CHRONO;
 80038c0:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80038c6:	e320      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

					}

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 80038c8:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_GPIO_EXTI_Falling_Callback+0x654>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d000      	beq.n	80038d4 <HAL_GPIO_EXTI_Falling_Callback+0x4e0>
 80038d2:	e31a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>
					// if start was pressed in settings, add value
					switch (settingsPointer) {
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_GPIO_EXTI_Falling_Callback+0x658>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d900      	bls.n	80038e0 <HAL_GPIO_EXTI_Falling_Callback+0x4ec>
 80038de:	e206      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_GPIO_EXTI_Falling_Callback+0x65c>)
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	469f      	mov	pc, r3
					case SETTINGS_HOURS:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80038ea:	23a0      	movs	r3, #160	; 0xa0
 80038ec:	05db      	lsls	r3, r3, #23
 80038ee:	2108      	movs	r1, #8
 80038f0:	0018      	movs	r0, r3
 80038f2:	f003 fcab 	bl	800724c <HAL_GPIO_ReadPin>
 80038f6:	0003      	movs	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d112      	bne.n	8003922 <HAL_GPIO_EXTI_Falling_Callback+0x52e>
							hours++;
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b25b      	sxtb	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	b25a      	sxtb	r2, r3
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 800390c:	701a      	strb	r2, [r3, #0]
							if (hours > 23)
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	2b17      	cmp	r3, #23
 8003916:	dc00      	bgt.n	800391a <HAL_GPIO_EXTI_Falling_Callback+0x526>
 8003918:	e1d8      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								hours = 0;
 800391a:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
								hours = 23;

						}

						break;
 8003920:	e1d4      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003922:	23a0      	movs	r3, #160	; 0xa0
 8003924:	05db      	lsls	r3, r3, #23
 8003926:	2108      	movs	r1, #8
 8003928:	0018      	movs	r0, r3
 800392a:	f003 fc8f 	bl	800724c <HAL_GPIO_ReadPin>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d000      	beq.n	8003934 <HAL_GPIO_EXTI_Falling_Callback+0x540>
 8003932:	e1cb      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
							hours--;
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b25b      	sxtb	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	b25a      	sxtb	r2, r3
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003944:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b25b      	sxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	db00      	blt.n	8003952 <HAL_GPIO_EXTI_Falling_Callback+0x55e>
 8003950:	e1bc      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								hours = 23;
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8003954:	2217      	movs	r2, #23
 8003956:	701a      	strb	r2, [r3, #0]
						break;
 8003958:	e1b8      	b.n	8003ccc <HAL_GPIO_EXTI_Falling_Callback+0x8d8>

					case SETTINGS_MINUTES:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800395a:	23a0      	movs	r3, #160	; 0xa0
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	2108      	movs	r1, #8
 8003960:	0018      	movs	r0, r3
 8003962:	f003 fc73 	bl	800724c <HAL_GPIO_ReadPin>
 8003966:	0003      	movs	r3, r0
 8003968:	2b01      	cmp	r3, #1
 800396a:	d112      	bne.n	8003992 <HAL_GPIO_EXTI_Falling_Callback+0x59e>
							minutes++;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b21b      	sxth	r3, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	b21a      	sxth	r2, r3
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800397c:	801a      	strh	r2, [r3, #0]
							if (minutes > 59)
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b21b      	sxth	r3, r3
 8003984:	2b3b      	cmp	r3, #59	; 0x3b
 8003986:	dc00      	bgt.n	800398a <HAL_GPIO_EXTI_Falling_Callback+0x596>
 8003988:	e1a2      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								minutes = 0;
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
								== 0) {
							minutes--;
							if (minutes < 0)
								minutes = 59;
						}
						break;
 8003990:	e19e      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003992:	23a0      	movs	r3, #160	; 0xa0
 8003994:	05db      	lsls	r3, r3, #23
 8003996:	2108      	movs	r1, #8
 8003998:	0018      	movs	r0, r3
 800399a:	f003 fc57 	bl	800724c <HAL_GPIO_ReadPin>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d000      	beq.n	80039a4 <HAL_GPIO_EXTI_Falling_Callback+0x5b0>
 80039a2:	e195      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
							minutes--;
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039b4:	801a      	strh	r2, [r3, #0]
							if (minutes < 0)
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db00      	blt.n	80039c2 <HAL_GPIO_EXTI_Falling_Callback+0x5ce>
 80039c0:	e186      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								minutes = 59;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 80039c4:	223b      	movs	r2, #59	; 0x3b
 80039c6:	801a      	strh	r2, [r3, #0]
						break;
 80039c8:	e182      	b.n	8003cd0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>

					case SETTINGS_SECONDS:
						seconds = 0;
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
						sTime.SubSeconds = 0;
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	605a      	str	r2, [r3, #4]
						break;
 80039d6:	e18a      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
 80039d8:	200004c8 	.word	0x200004c8
 80039dc:	0000f7b7 	.word	0x0000f7b7
 80039e0:	2000084c 	.word	0x2000084c
 80039e4:	2000019c 	.word	0x2000019c
 80039e8:	20000708 	.word	0x20000708
 80039ec:	200007b8 	.word	0x200007b8
 80039f0:	2000076a 	.word	0x2000076a
 80039f4:	0000639c 	.word	0x0000639c
 80039f8:	000009f6 	.word	0x000009f6
 80039fc:	200007bc 	.word	0x200007bc
 8003a00:	200007cb 	.word	0x200007cb
 8003a04:	20000778 	.word	0x20000778
 8003a08:	200003c1 	.word	0x200003c1
 8003a0c:	20000774 	.word	0x20000774
 8003a10:	2000012c 	.word	0x2000012c
 8003a14:	20000144 	.word	0x20000144
 8003a18:	20000136 	.word	0x20000136
 8003a1c:	20000776 	.word	0x20000776
 8003a20:	200003b6 	.word	0x200003b6
 8003a24:	200007b6 	.word	0x200007b6
 8003a28:	20000714 	.word	0x20000714
 8003a2c:	200003c5 	.word	0x200003c5
 8003a30:	20000777 	.word	0x20000777
 8003a34:	2000079e 	.word	0x2000079e
 8003a38:	2000034a 	.word	0x2000034a
 8003a3c:	20000384 	.word	0x20000384
 8003a40:	200006e4 	.word	0x200006e4
 8003a44:	20000662 	.word	0x20000662
 8003a48:	2000065e 	.word	0x2000065e
 8003a4c:	200003d1 	.word	0x200003d1
 8003a50:	0801357c 	.word	0x0801357c

					case SETTINGS_DAYS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003a54:	23a0      	movs	r3, #160	; 0xa0
 8003a56:	05db      	lsls	r3, r3, #23
 8003a58:	2108      	movs	r1, #8
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f003 fbf6 	bl	800724c <HAL_GPIO_ReadPin>
 8003a60:	0003      	movs	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d110      	bne.n	8003a88 <HAL_GPIO_EXTI_Falling_Callback+0x694>
							day++;
 8003a66:	4bc3      	ldr	r3, [pc, #780]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4bc0      	ldr	r3, [pc, #768]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a72:	701a      	strb	r2, [r3, #0]
							if (day > 31)
 8003a74:	4bbf      	ldr	r3, [pc, #764]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b1f      	cmp	r3, #31
 8003a7c:	d800      	bhi.n	8003a80 <HAL_GPIO_EXTI_Falling_Callback+0x68c>
 8003a7e:	e129      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								day = 1;
 8003a80:	4bbc      	ldr	r3, [pc, #752]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
							day--;
							if (day < 1)
								day = 31;
						}

						break;
 8003a86:	e125      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003a88:	23a0      	movs	r3, #160	; 0xa0
 8003a8a:	05db      	lsls	r3, r3, #23
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f003 fbdc 	bl	800724c <HAL_GPIO_ReadPin>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d000      	beq.n	8003a9a <HAL_GPIO_EXTI_Falling_Callback+0x6a6>
 8003a98:	e11c      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
							day--;
 8003a9a:	4bb6      	ldr	r3, [pc, #728]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4bb3      	ldr	r3, [pc, #716]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003aa6:	701a      	strb	r2, [r3, #0]
							if (day < 1)
 8003aa8:	4bb2      	ldr	r3, [pc, #712]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d000      	beq.n	8003ab4 <HAL_GPIO_EXTI_Falling_Callback+0x6c0>
 8003ab2:	e10f      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								day = 31;
 8003ab4:	4baf      	ldr	r3, [pc, #700]	; (8003d74 <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8003ab6:	221f      	movs	r2, #31
 8003ab8:	701a      	strb	r2, [r3, #0]
						break;
 8003aba:	e10b      	b.n	8003cd4 <HAL_GPIO_EXTI_Falling_Callback+0x8e0>

					case SETTINGS_MONTHS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003abc:	23a0      	movs	r3, #160	; 0xa0
 8003abe:	05db      	lsls	r3, r3, #23
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f003 fbc2 	bl	800724c <HAL_GPIO_ReadPin>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d110      	bne.n	8003af0 <HAL_GPIO_EXTI_Falling_Callback+0x6fc>
							month++;
 8003ace:	4baa      	ldr	r3, [pc, #680]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	4ba7      	ldr	r3, [pc, #668]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ada:	701a      	strb	r2, [r3, #0]
							if (month > 12)
 8003adc:	4ba6      	ldr	r3, [pc, #664]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d800      	bhi.n	8003ae8 <HAL_GPIO_EXTI_Falling_Callback+0x6f4>
 8003ae6:	e0f7      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
								month = 1;
 8003ae8:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
							month--;
							if (month < 1)
								month = 12;
						}

						break;
 8003aee:	e0f3      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003af0:	23a0      	movs	r3, #160	; 0xa0
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	2108      	movs	r1, #8
 8003af6:	0018      	movs	r0, r3
 8003af8:	f003 fba8 	bl	800724c <HAL_GPIO_ReadPin>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d000      	beq.n	8003b02 <HAL_GPIO_EXTI_Falling_Callback+0x70e>
 8003b00:	e0ea      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
							month--;
 8003b02:	4b9d      	ldr	r3, [pc, #628]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b0e:	701a      	strb	r2, [r3, #0]
							if (month < 1)
 8003b10:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d000      	beq.n	8003b1c <HAL_GPIO_EXTI_Falling_Callback+0x728>
 8003b1a:	e0dd      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
								month = 12;
 8003b1c:	4b96      	ldr	r3, [pc, #600]	; (8003d78 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	701a      	strb	r2, [r3, #0]
						break;
 8003b22:	e0d9      	b.n	8003cd8 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>

					case SETTINGS_YEARS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003b24:	23a0      	movs	r3, #160	; 0xa0
 8003b26:	05db      	lsls	r3, r3, #23
 8003b28:	2108      	movs	r1, #8
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f003 fb8e 	bl	800724c <HAL_GPIO_ReadPin>
 8003b30:	0003      	movs	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d110      	bne.n	8003b58 <HAL_GPIO_EXTI_Falling_Callback+0x764>
							year++;
 8003b36:	4b91      	ldr	r3, [pc, #580]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b42:	701a      	strb	r2, [r3, #0]
							if (year > 99)
 8003b44:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b63      	cmp	r3, #99	; 0x63
 8003b4c:	d800      	bhi.n	8003b50 <HAL_GPIO_EXTI_Falling_Callback+0x75c>
 8003b4e:	e0c5      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
								year = 1;
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
							year--;
							if (year < 1)
								year = 99;
						}

						break;
 8003b56:	e0c1      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003b58:	23a0      	movs	r3, #160	; 0xa0
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f003 fb74 	bl	800724c <HAL_GPIO_ReadPin>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d000      	beq.n	8003b6a <HAL_GPIO_EXTI_Falling_Callback+0x776>
 8003b68:	e0b8      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
							year--;
 8003b6a:	4b84      	ldr	r3, [pc, #528]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b76:	701a      	strb	r2, [r3, #0]
							if (year < 1)
 8003b78:	4b80      	ldr	r3, [pc, #512]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d000      	beq.n	8003b84 <HAL_GPIO_EXTI_Falling_Callback+0x790>
 8003b82:	e0ab      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
								year = 99;
 8003b84:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8003b86:	2263      	movs	r2, #99	; 0x63
 8003b88:	701a      	strb	r2, [r3, #0]
						break;
 8003b8a:	e0a7      	b.n	8003cdc <HAL_GPIO_EXTI_Falling_Callback+0x8e8>

					case SETTINGS_LAYOUT:
						if (layout < layoutsCounter)
 8003b8c:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d207      	bcs.n	8003baa <HAL_GPIO_EXTI_Falling_Callback+0x7b6>
							layout++;
 8003b9a:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003ba6:	701a      	strb	r2, [r3, #0]
						else if (layout >= layoutsCounter)
							layout = 1;
						break;
 8003ba8:	e09a      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
						else if (layout >= layoutsCounter)
 8003baa:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d200      	bcs.n	8003bba <HAL_GPIO_EXTI_Falling_Callback+0x7c6>
 8003bb8:	e092      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
							layout = 1;
 8003bba:	4b71      	ldr	r3, [pc, #452]	; (8003d80 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
						break;
 8003bc0:	e08e      	b.n	8003ce0 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>

					case SETTINGS_COLOR:
						if (colorScheme < 2)
 8003bc2:	4b71      	ldr	r3, [pc, #452]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d807      	bhi.n	8003bdc <HAL_GPIO_EXTI_Falling_Callback+0x7e8>
							colorScheme++;
 8003bcc:	4b6e      	ldr	r3, [pc, #440]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bd8:	701a      	strb	r2, [r3, #0]
						else if (colorScheme >= 2)
							colorScheme = 1;
						break;
 8003bda:	e083      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
						else if (colorScheme >= 2)
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d800      	bhi.n	8003be8 <HAL_GPIO_EXTI_Falling_Callback+0x7f4>
 8003be6:	e07d      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
							colorScheme = 1;
 8003be8:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
						break;
 8003bee:	e079      	b.n	8003ce4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>

					case SETTINGS_PRESS_REF:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003bf0:	23a0      	movs	r3, #160	; 0xa0
 8003bf2:	05db      	lsls	r3, r3, #23
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f003 fb28 	bl	800724c <HAL_GPIO_ReadPin>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d113      	bne.n	8003c2a <HAL_GPIO_EXTI_Falling_Callback+0x836>
							pressureReference++;
 8003c02:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b21a      	sxth	r2, r3
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c12:	801a      	strh	r2, [r3, #0]
							if (pressureReference > 1100)
 8003c14:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x99c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	dd63      	ble.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
								pressureReference = 900;
 8003c20:	4b5a      	ldr	r3, [pc, #360]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c22:	22e1      	movs	r2, #225	; 0xe1
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	801a      	strh	r2, [r3, #0]
								== 0) {
							pressureReference--;
							if (pressureReference < 900)
								pressureReference = 1100;
						}
						break;
 8003c28:	e05e      	b.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003c2a:	23a0      	movs	r3, #160	; 0xa0
 8003c2c:	05db      	lsls	r3, r3, #23
 8003c2e:	2108      	movs	r1, #8
 8003c30:	0018      	movs	r0, r3
 8003c32:	f003 fb0b 	bl	800724c <HAL_GPIO_ReadPin>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d156      	bne.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
							pressureReference--;
 8003c3a:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b21a      	sxth	r2, r3
 8003c48:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c4a:	801a      	strh	r2, [r3, #0]
							if (pressureReference < 900)
 8003c4c:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b21a      	sxth	r2, r3
 8003c52:	23e1      	movs	r3, #225	; 0xe1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	429a      	cmp	r2, r3
 8003c58:	da46      	bge.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>
								pressureReference = 1100;
 8003c5a:	4b4c      	ldr	r3, [pc, #304]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8003c5c:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x99c>)
 8003c5e:	801a      	strh	r2, [r3, #0]
						break;
 8003c60:	e042      	b.n	8003ce8 <HAL_GPIO_EXTI_Falling_Callback+0x8f4>

					case SETTINGS_TEMP_CMP:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8003c62:	23a0      	movs	r3, #160	; 0xa0
 8003c64:	05db      	lsls	r3, r3, #23
 8003c66:	2108      	movs	r1, #8
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f003 faef 	bl	800724c <HAL_GPIO_ReadPin>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d111      	bne.n	8003c98 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
							temperatureCompensation++;
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c84:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation > 20)
 8003c86:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	dd2d      	ble.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
								temperatureCompensation = -20;
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003c92:	22ec      	movs	r2, #236	; 0xec
 8003c94:	701a      	strb	r2, [r3, #0]
							temperatureCompensation--;
							if (temperatureCompensation < -20)
								temperatureCompensation = 20;
						}

						break;
 8003c96:	e029      	b.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8003c98:	23a0      	movs	r3, #160	; 0xa0
 8003c9a:	05db      	lsls	r3, r3, #23
 8003c9c:	2108      	movs	r1, #8
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f003 fad4 	bl	800724c <HAL_GPIO_ReadPin>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
							temperatureCompensation--;
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cb8:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation < -20)
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	da13      	bge.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
								temperatureCompensation = 20;
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 8003cc6:	2214      	movs	r2, #20
 8003cc8:	701a      	strb	r2, [r3, #0]
						break;
 8003cca:	e00f      	b.n	8003cec <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						break;
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	e00e      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	e00c      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	e00a      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	e008      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	e006      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	e004      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	e002      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	e000      	b.n	8003cee <HAL_GPIO_EXTI_Falling_Callback+0x8fa>
						break;
 8003cec:	46c0      	nop			; (mov r8, r8)

					}

					rtcSetTime();
 8003cee:	f009 fead 	bl	800da4c <rtcSetTime>
			if (flagLocked == UNLOCKED) {
 8003cf2:	e10a      	b.n	8003f0a <HAL_GPIO_EXTI_Falling_Callback+0xb16>

				}
			}
			//										RESET BUTTON

		} else if (GPIO_Pin == RESET_Pin
 8003cf4:	1dbb      	adds	r3, r7, #6
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d000      	beq.n	8003cfe <HAL_GPIO_EXTI_Falling_Callback+0x90a>
 8003cfc:	e09b      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003cfe:	23a0      	movs	r3, #160	; 0xa0
 8003d00:	05db      	lsls	r3, r3, #23
 8003d02:	2110      	movs	r1, #16
 8003d04:	0018      	movs	r0, r3
 8003d06:	f003 faa1 	bl	800724c <HAL_GPIO_ReadPin>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d000      	beq.n	8003d10 <HAL_GPIO_EXTI_Falling_Callback+0x91c>
 8003d0e:	e092      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_SET
 8003d10:	23a0      	movs	r3, #160	; 0xa0
 8003d12:	05db      	lsls	r3, r3, #23
 8003d14:	2108      	movs	r1, #8
 8003d16:	0018      	movs	r0, r3
 8003d18:	f003 fa98 	bl	800724c <HAL_GPIO_ReadPin>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d000      	beq.n	8003d24 <HAL_GPIO_EXTI_Falling_Callback+0x930>
 8003d22:	e088      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 8003d24:	23a0      	movs	r3, #160	; 0xa0
 8003d26:	05db      	lsls	r3, r3, #23
 8003d28:	2104      	movs	r1, #4
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f003 fa8e 	bl	800724c <HAL_GPIO_ReadPin>
 8003d30:	0003      	movs	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d000      	beq.n	8003d38 <HAL_GPIO_EXTI_Falling_Callback+0x944>
 8003d36:	e07e      	b.n	8003e36 <HAL_GPIO_EXTI_Falling_Callback+0xa42>
						== GPIO_PIN_SET) {

			counterForce = 0;
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <HAL_GPIO_EXTI_Falling_Callback+0x9a4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
			counterMultiplePress++;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d4a:	701a      	strb	r2, [r3, #0]

			if (flagSettings == FLAG_SETTINGS_OFF) {
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_GPIO_EXTI_Falling_Callback+0x9ac>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d12b      	bne.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
				if (counterMultiplePress >= MULTIPLE_PRESS) {
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d926      	bls.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
					if (flagLocked == LOCKED) {
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_GPIO_EXTI_Falling_Callback+0x9b0>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11e      	bne.n	8003da8 <HAL_GPIO_EXTI_Falling_Callback+0x9b4>
						flagLocked = UNLOCKED;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_GPIO_EXTI_Falling_Callback+0x9b0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e01d      	b.n	8003dae <HAL_GPIO_EXTI_Falling_Callback+0x9ba>
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	20000778 	.word	0x20000778
 8003d78:	200003c1 	.word	0x200003c1
 8003d7c:	20000774 	.word	0x20000774
 8003d80:	200007af 	.word	0x200007af
 8003d84:	20000025 	.word	0x20000025
 8003d88:	20000794 	.word	0x20000794
 8003d8c:	2000002a 	.word	0x2000002a
 8003d90:	0000044c 	.word	0x0000044c
 8003d94:	20000029 	.word	0x20000029
 8003d98:	20000796 	.word	0x20000796
 8003d9c:	2000079c 	.word	0x2000079c
 8003da0:	2000065e 	.word	0x2000065e
 8003da4:	200004c7 	.word	0x200004c7
					} else {
						flagLocked = LOCKED;
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (flagLocked == UNLOCKED) {
 8003dae:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d000      	beq.n	8003dba <HAL_GPIO_EXTI_Falling_Callback+0x9c6>
 8003db8:	e0a9      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

				if (mode == MODE_NORMAL && flagSettings == FLAG_SETTINGS_OFF) {
 8003dba:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_GPIO_EXTI_Falling_Callback+0x9da>
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d032      	beq.n	8003e34 <HAL_GPIO_EXTI_Falling_Callback+0xa40>
//			interfaceFullUpdateFlag = 1; //legacy
				}

				else if (mode == MODE_STOP && flagSettings == FLAG_SETTINGS_OFF) {
 8003dce:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d110      	bne.n	8003dfa <HAL_GPIO_EXTI_Falling_Callback+0xa06>
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_GPIO_EXTI_Falling_Callback+0xa06>

					mode = MODE_NORMAL;
 8003de2:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
					rtcResetChrono();
 8003de8:	f009 fe74 	bl	800dad4 <rtcResetChrono>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003dee:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	0018      	movs	r0, r3
 8003df4:	f005 fa2e 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003df8:	e01c      	b.n	8003e34 <HAL_GPIO_EXTI_Falling_Callback+0xa40>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d000      	beq.n	8003e06 <HAL_GPIO_EXTI_Falling_Callback+0xa12>
 8003e04:	e083      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

					if (settingsPointer < 10) {
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d807      	bhi.n	8003e20 <HAL_GPIO_EXTI_Falling_Callback+0xa2c>
						settingsPointer++; // if reset was pressed in settings, forward pointer
 8003e10:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e1c:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003e1e:	e076      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
					} else if (settingsPointer >= 10) {
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d800      	bhi.n	8003e2c <HAL_GPIO_EXTI_Falling_Callback+0xa38>
 8003e2a:	e070      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
						settingsPointer = 1;
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8003e32:	e06c      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>
 8003e34:	e06b      	b.n	8003f0e <HAL_GPIO_EXTI_Falling_Callback+0xb1a>

				}
			}
			//										SET BUTTON

		} else if (GPIO_Pin == SET_Pin
 8003e36:	1dbb      	adds	r3, r7, #6
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d168      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_RESET
 8003e3e:	23a0      	movs	r3, #160	; 0xa0
 8003e40:	05db      	lsls	r3, r3, #23
 8003e42:	2108      	movs	r1, #8
 8003e44:	0018      	movs	r0, r3
 8003e46:	f003 fa01 	bl	800724c <HAL_GPIO_ReadPin>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d160      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_SET
 8003e4e:	23a0      	movs	r3, #160	; 0xa0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	2104      	movs	r1, #4
 8003e54:	0018      	movs	r0, r3
 8003e56:	f003 f9f9 	bl	800724c <HAL_GPIO_ReadPin>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d157      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8003e60:	23a0      	movs	r3, #160	; 0xa0
 8003e62:	05db      	lsls	r3, r3, #23
 8003e64:	2110      	movs	r1, #16
 8003e66:	0018      	movs	r0, r3
 8003e68:	f003 f9f0 	bl	800724c <HAL_GPIO_ReadPin>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d14e      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d149      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>

				if (flagSettings == FLAG_SETTINGS_OFF
 8003e7c:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d118      	bne.n	8003eb8 <HAL_GPIO_EXTI_Falling_Callback+0xac4>
						&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) { //go to settings only when Reset button is released
 8003e86:	23a0      	movs	r3, #160	; 0xa0
 8003e88:	05db      	lsls	r3, r3, #23
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f003 f9dd 	bl	800724c <HAL_GPIO_ReadPin>
 8003e92:	0003      	movs	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10f      	bne.n	8003eb8 <HAL_GPIO_EXTI_Falling_Callback+0xac4>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8003e98:	4922      	ldr	r1, [pc, #136]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f005 f9d8 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
//					modeBackup = mode;// legacy, fot keep chrono
					flagSettings = FLAG_SETTINGS_ON;
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
					counterSettings = SETTINGS_TIME
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_GPIO_EXTI_Falling_Callback+0xb3c>)
 8003eac:	2205      	movs	r2, #5
 8003eae:	701a      	strb	r2, [r3, #0]
					;
					settingsPointer = 7;
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e02b      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>

				} else if (flagSettings == FLAG_SETTINGS_ON
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d126      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
						&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1) {
 8003ec2:	23a0      	movs	r3, #160	; 0xa0
 8003ec4:	05db      	lsls	r3, r3, #23
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f003 f9bf 	bl	800724c <HAL_GPIO_ReadPin>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11d      	bne.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8003ed4:	4913      	ldr	r1, [pc, #76]	; (8003f24 <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	0018      	movs	r0, r3
 8003edc:	f005 f9ba 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
					RTC_WAKEUPCLOCK_RTCCLK_DIV16);
//					mode = modeBackup; /legacy, for keep chrono
					flagSettings = FLAG_SETTINGS_OFF;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
					counterSettings = 0;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_GPIO_EXTI_Falling_Callback+0xb3c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
					interfaceSelectColorScheme(colorScheme);
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_GPIO_EXTI_Falling_Callback+0xb40>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f006 fe58 	bl	800aba8 <interfaceSelectColorScheme>
					interfaceSelectLayout(layout);
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_GPIO_EXTI_Falling_Callback+0xb44>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	0018      	movs	r0, r3
 8003f00:	f006 fa40 	bl	800a384 <interfaceSelectLayout>
				}

			}
		}
	}
}
 8003f04:	e004      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
			if (flagLocked == UNLOCKED) {
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	e000      	b.n	8003f10 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>
			if (flagLocked == UNLOCKED) {
 8003f0e:	46c0      	nop			; (mov r8, r8)
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200004c7 	.word	0x200004c7
 8003f1c:	200004c8 	.word	0x200004c8
 8003f20:	2000065e 	.word	0x2000065e
 8003f24:	0000f7b7 	.word	0x0000f7b7
 8003f28:	2000084c 	.word	0x2000084c
 8003f2c:	200003d1 	.word	0x200003d1
 8003f30:	20000768 	.word	0x20000768
 8003f34:	20000794 	.word	0x20000794
 8003f38:	200007af 	.word	0x200007af

08003f3c <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	0002      	movs	r2, r0
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8003f48:	23fa      	movs	r3, #250	; 0xfa
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	1df9      	adds	r1, r7, #7
 8003f4e:	4804      	ldr	r0, [pc, #16]	; (8003f60 <DEV_SPI_WriteByte+0x24>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	f005 faf7 	bl	8009544 <HAL_SPI_Transmit>
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	20000878 	.word	0x20000878

08003f64 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	23a0      	movs	r3, #160	; 0xa0
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	2200      	movs	r2, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f003 f987 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	0059      	lsls	r1, r3, #1
 8003f7c:	23a0      	movs	r3, #160	; 0xa0
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	2200      	movs	r2, #0
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 f97f 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	00d9      	lsls	r1, r3, #3
 8003f8c:	23a0      	movs	r3, #160	; 0xa0
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	2201      	movs	r2, #1
 8003f92:	0018      	movs	r0, r3
 8003f94:	f003 f977 	bl	8007286 <HAL_GPIO_WritePin>
		return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	000c      	movs	r4, r1
 8003faa:	0010      	movs	r0, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	250a      	movs	r5, #10
 8003fb0:	197b      	adds	r3, r7, r5
 8003fb2:	1c22      	adds	r2, r4, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	2408      	movs	r4, #8
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	1c02      	adds	r2, r0, #0
 8003fbc:	801a      	strh	r2, [r3, #0]
 8003fbe:	1dbb      	adds	r3, r7, #6
 8003fc0:	1c0a      	adds	r2, r1, #0
 8003fc2:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <Paint_NewImage+0xd8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <Paint_NewImage+0xd8>)
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <Paint_NewImage+0xd8>)
 8003fd2:	0029      	movs	r1, r5
 8003fd4:	187a      	adds	r2, r7, r1
 8003fd6:	8812      	ldrh	r2, [r2, #0]
 8003fd8:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <Paint_NewImage+0xd8>)
 8003fdc:	193a      	adds	r2, r7, r4
 8003fde:	8812      	ldrh	r2, [r2, #0]
 8003fe0:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <Paint_NewImage+0xd8>)
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8003fec:	4b22      	ldr	r3, [pc, #136]	; (8004078 <Paint_NewImage+0xd8>)
 8003fee:	2202      	movs	r2, #2
 8003ff0:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <Paint_NewImage+0x6a>
 8004000:	187b      	adds	r3, r7, r1
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	b29b      	uxth	r3, r3
 8004008:	e006      	b.n	8004018 <Paint_NewImage+0x78>
 800400a:	230a      	movs	r3, #10
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	b29b      	uxth	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <Paint_NewImage+0xd8>)
 800401a:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <Paint_NewImage+0xd8>)
 800401e:	2208      	movs	r2, #8
 8004020:	18ba      	adds	r2, r7, r2
 8004022:	8812      	ldrh	r2, [r2, #0]
 8004024:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <Paint_NewImage+0xd8>)
 8004028:	1dba      	adds	r2, r7, #6
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <Paint_NewImage+0xd8>)
 8004030:	2200      	movs	r2, #0
 8004032:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <Paint_NewImage+0xa4>
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2bb4      	cmp	r3, #180	; 0xb4
 8004042:	d10a      	bne.n	800405a <Paint_NewImage+0xba>
		Paint.Width = Width;
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <Paint_NewImage+0xd8>)
 8004046:	220a      	movs	r2, #10
 8004048:	18ba      	adds	r2, r7, r2
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <Paint_NewImage+0xd8>)
 8004050:	2208      	movs	r2, #8
 8004052:	18ba      	adds	r2, r7, r2
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	80da      	strh	r2, [r3, #6]
 8004058:	e00a      	b.n	8004070 <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <Paint_NewImage+0xd8>)
 800405c:	2208      	movs	r2, #8
 800405e:	18ba      	adds	r2, r7, r2
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <Paint_NewImage+0xd8>)
 8004066:	220a      	movs	r2, #10
 8004068:	18ba      	adds	r2, r7, r2
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	80da      	strh	r2, [r3, #6]
	}
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bdb0      	pop	{r4, r5, r7, pc}
 8004078:	200007d4 	.word	0x200007d4

0800407c <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <Paint_SelectImage+0x18>)
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	200007d4 	.word	0x200007d4

08004098 <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b08b      	sub	sp, #44	; 0x2c
 800409c:	af00      	add	r7, sp, #0
 800409e:	0004      	movs	r4, r0
 80040a0:	0008      	movs	r0, r1
 80040a2:	0011      	movs	r1, r2
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	1c22      	adds	r2, r4, #0
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	1c02      	adds	r2, r0, #0
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	1cbb      	adds	r3, r7, #2
 80040b2:	1c0a      	adds	r2, r1, #0
 80040b4:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80040b6:	4bc6      	ldr	r3, [pc, #792]	; (80043d0 <Paint_SetPixel+0x338>)
 80040b8:	889b      	ldrh	r3, [r3, #4]
 80040ba:	1dba      	adds	r2, r7, #6
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d805      	bhi.n	80040ce <Paint_SetPixel+0x36>
 80040c2:	4bc3      	ldr	r3, [pc, #780]	; (80043d0 <Paint_SetPixel+0x338>)
 80040c4:	88db      	ldrh	r3, [r3, #6]
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d904      	bls.n	80040d8 <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 80040ce:	4bc1      	ldr	r3, [pc, #772]	; (80043d4 <Paint_SetPixel+0x33c>)
 80040d0:	0018      	movs	r0, r3
 80040d2:	f00c fc53 	bl	801097c <puts>
		return;
 80040d6:	e180      	b.n	80043da <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 80040d8:	4bbd      	ldr	r3, [pc, #756]	; (80043d0 <Paint_SetPixel+0x338>)
 80040da:	89db      	ldrh	r3, [r3, #14]
 80040dc:	2287      	movs	r2, #135	; 0x87
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03d      	beq.n	8004160 <Paint_SetPixel+0xc8>
 80040e4:	2287      	movs	r2, #135	; 0x87
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dd00      	ble.n	80040ee <Paint_SetPixel+0x56>
 80040ec:	e16e      	b.n	80043cc <Paint_SetPixel+0x334>
 80040ee:	2bb4      	cmp	r3, #180	; 0xb4
 80040f0:	d021      	beq.n	8004136 <Paint_SetPixel+0x9e>
 80040f2:	dd00      	ble.n	80040f6 <Paint_SetPixel+0x5e>
 80040f4:	e16a      	b.n	80043cc <Paint_SetPixel+0x334>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <Paint_SetPixel+0x68>
 80040fa:	2b5a      	cmp	r3, #90	; 0x5a
 80040fc:	d00b      	beq.n	8004116 <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80040fe:	e165      	b.n	80043cc <Paint_SetPixel+0x334>
		X = Xpoint;
 8004100:	2326      	movs	r3, #38	; 0x26
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	1dba      	adds	r2, r7, #6
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 800410a:	2324      	movs	r3, #36	; 0x24
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	1d3a      	adds	r2, r7, #4
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	801a      	strh	r2, [r3, #0]
		break;
 8004114:	e034      	b.n	8004180 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 8004116:	4bae      	ldr	r3, [pc, #696]	; (80043d0 <Paint_SetPixel+0x338>)
 8004118:	891a      	ldrh	r2, [r3, #8]
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	b29a      	uxth	r2, r3
 8004122:	2326      	movs	r3, #38	; 0x26
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	3a01      	subs	r2, #1
 8004128:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 800412a:	2324      	movs	r3, #36	; 0x24
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	1dba      	adds	r2, r7, #6
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	801a      	strh	r2, [r3, #0]
		break;
 8004134:	e024      	b.n	8004180 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 8004136:	4ba6      	ldr	r3, [pc, #664]	; (80043d0 <Paint_SetPixel+0x338>)
 8004138:	891a      	ldrh	r2, [r3, #8]
 800413a:	1dbb      	adds	r3, r7, #6
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b29a      	uxth	r2, r3
 8004142:	2326      	movs	r3, #38	; 0x26
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	3a01      	subs	r2, #1
 8004148:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 800414a:	4ba1      	ldr	r3, [pc, #644]	; (80043d0 <Paint_SetPixel+0x338>)
 800414c:	895a      	ldrh	r2, [r3, #10]
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	b29a      	uxth	r2, r3
 8004156:	2324      	movs	r3, #36	; 0x24
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	3a01      	subs	r2, #1
 800415c:	801a      	strh	r2, [r3, #0]
		break;
 800415e:	e00f      	b.n	8004180 <Paint_SetPixel+0xe8>
		X = Ypoint;
 8004160:	2326      	movs	r3, #38	; 0x26
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	1d3a      	adds	r2, r7, #4
 8004166:	8812      	ldrh	r2, [r2, #0]
 8004168:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 800416a:	4b99      	ldr	r3, [pc, #612]	; (80043d0 <Paint_SetPixel+0x338>)
 800416c:	895a      	ldrh	r2, [r3, #10]
 800416e:	1dbb      	adds	r3, r7, #6
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	b29a      	uxth	r2, r3
 8004176:	2324      	movs	r3, #36	; 0x24
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	3a01      	subs	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
		break;
 800417e:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8004180:	4b93      	ldr	r3, [pc, #588]	; (80043d0 <Paint_SetPixel+0x338>)
 8004182:	8a1b      	ldrh	r3, [r3, #16]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d020      	beq.n	80041ca <Paint_SetPixel+0x132>
 8004188:	dd00      	ble.n	800418c <Paint_SetPixel+0xf4>
 800418a:	e125      	b.n	80043d8 <Paint_SetPixel+0x340>
 800418c:	2b02      	cmp	r3, #2
 800418e:	d011      	beq.n	80041b4 <Paint_SetPixel+0x11c>
 8004190:	dd00      	ble.n	8004194 <Paint_SetPixel+0xfc>
 8004192:	e121      	b.n	80043d8 <Paint_SetPixel+0x340>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02d      	beq.n	80041f4 <Paint_SetPixel+0x15c>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d000      	beq.n	800419e <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 800419c:	e11c      	b.n	80043d8 <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 800419e:	4b8c      	ldr	r3, [pc, #560]	; (80043d0 <Paint_SetPixel+0x338>)
 80041a0:	891a      	ldrh	r2, [r3, #8]
 80041a2:	2126      	movs	r1, #38	; 0x26
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	801a      	strh	r2, [r3, #0]
		break;
 80041b2:	e020      	b.n	80041f6 <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 80041b4:	4b86      	ldr	r3, [pc, #536]	; (80043d0 <Paint_SetPixel+0x338>)
 80041b6:	895a      	ldrh	r2, [r3, #10]
 80041b8:	2124      	movs	r1, #36	; 0x24
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	801a      	strh	r2, [r3, #0]
		break;
 80041c8:	e015      	b.n	80041f6 <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <Paint_SetPixel+0x338>)
 80041cc:	891a      	ldrh	r2, [r3, #8]
 80041ce:	2126      	movs	r1, #38	; 0x26
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	3a01      	subs	r2, #1
 80041dc:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <Paint_SetPixel+0x338>)
 80041e0:	895a      	ldrh	r2, [r3, #10]
 80041e2:	2124      	movs	r1, #36	; 0x24
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	801a      	strh	r2, [r3, #0]
		break;
 80041f2:	e000      	b.n	80041f6 <Paint_SetPixel+0x15e>
		break;
 80041f4:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <Paint_SetPixel+0x338>)
 80041f8:	891b      	ldrh	r3, [r3, #8]
 80041fa:	2226      	movs	r2, #38	; 0x26
 80041fc:	18ba      	adds	r2, r7, r2
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d806      	bhi.n	8004212 <Paint_SetPixel+0x17a>
 8004204:	4b72      	ldr	r3, [pc, #456]	; (80043d0 <Paint_SetPixel+0x338>)
 8004206:	895b      	ldrh	r3, [r3, #10]
 8004208:	2224      	movs	r2, #36	; 0x24
 800420a:	18ba      	adds	r2, r7, r2
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d904      	bls.n	800421c <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <Paint_SetPixel+0x33c>)
 8004214:	0018      	movs	r0, r3
 8004216:	f00c fbb1 	bl	801097c <puts>
		return;
 800421a:	e0de      	b.n	80043da <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <Paint_SetPixel+0x338>)
 800421e:	8adb      	ldrh	r3, [r3, #22]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d145      	bne.n	80042b0 <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004224:	2026      	movs	r0, #38	; 0x26
 8004226:	183b      	adds	r3, r7, r0
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	b29b      	uxth	r3, r3
 800422e:	0019      	movs	r1, r3
 8004230:	2324      	movs	r3, #36	; 0x24
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4a66      	ldr	r2, [pc, #408]	; (80043d0 <Paint_SetPixel+0x338>)
 8004238:	8a52      	ldrh	r2, [r2, #18]
 800423a:	4353      	muls	r3, r2
 800423c:	18cb      	adds	r3, r1, r3
 800423e:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 8004240:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <Paint_SetPixel+0x338>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	18d2      	adds	r2, r2, r3
 8004248:	210f      	movs	r1, #15
 800424a:	187b      	adds	r3, r7, r1
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 8004250:	1cbb      	adds	r3, r7, #2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004258:	183b      	adds	r3, r7, r0
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	411a      	asrs	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	b25b      	sxtb	r3, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	b25b      	sxtb	r3, r3
 800426c:	187a      	adds	r2, r7, r1
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	b252      	sxtb	r2, r2
 8004272:	4013      	ands	r3, r2
 8004274:	b259      	sxtb	r1, r3
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <Paint_SetPixel+0x338>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e0aa      	b.n	80043da <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8004284:	2326      	movs	r3, #38	; 0x26
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	2207      	movs	r2, #7
 800428c:	4013      	ands	r3, r2
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	411a      	asrs	r2, r3
 8004292:	0013      	movs	r3, r2
 8004294:	b25a      	sxtb	r2, r3
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b25b      	sxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b259      	sxtb	r1, r3
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <Paint_SetPixel+0x338>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	b2ca      	uxtb	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e094      	b.n	80043da <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <Paint_SetPixel+0x338>)
 80042b2:	8adb      	ldrh	r3, [r3, #22]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d145      	bne.n	8004344 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80042b8:	2426      	movs	r4, #38	; 0x26
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	0019      	movs	r1, r3
 80042c4:	2324      	movs	r3, #36	; 0x24
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <Paint_SetPixel+0x338>)
 80042cc:	8a52      	ldrh	r2, [r2, #18]
 80042ce:	4353      	muls	r3, r2
 80042d0:	18cb      	adds	r3, r1, r3
 80042d2:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 80042d4:	1cbb      	adds	r3, r7, #2
 80042d6:	1cba      	adds	r2, r7, #2
 80042d8:	8812      	ldrh	r2, [r2, #0]
 80042da:	2103      	movs	r1, #3
 80042dc:	400a      	ands	r2, r1
 80042de:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <Paint_SetPixel+0x338>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	18d2      	adds	r2, r2, r3
 80042e8:	2017      	movs	r0, #23
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 80042f0:	0021      	movs	r1, r4
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	22c0      	movs	r2, #192	; 0xc0
 80042fe:	411a      	asrs	r2, r3
 8004300:	0013      	movs	r3, r2
 8004302:	b25b      	sxtb	r3, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	b25b      	sxtb	r3, r3
 8004308:	183a      	adds	r2, r7, r0
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	b252      	sxtb	r2, r2
 800430e:	4013      	ands	r3, r2
 8004310:	b25a      	sxtb	r2, r3
 8004312:	183b      	adds	r3, r7, r0
 8004314:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 8004316:	1cbb      	adds	r3, r7, #2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	187b      	adds	r3, r7, r1
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	2103      	movs	r1, #3
 8004322:	400b      	ands	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	411a      	asrs	r2, r3
 8004328:	0013      	movs	r3, r2
 800432a:	b25a      	sxtb	r2, r3
 800432c:	183b      	adds	r3, r7, r0
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b25b      	sxtb	r3, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	b259      	sxtb	r1, r3
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <Paint_SetPixel+0x338>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	b2ca      	uxtb	r2, r1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e04a      	b.n	80043da <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <Paint_SetPixel+0x338>)
 8004346:	8adb      	ldrh	r3, [r3, #22]
 8004348:	2b07      	cmp	r3, #7
 800434a:	d146      	bne.n	80043da <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800434c:	2426      	movs	r4, #38	; 0x26
 800434e:	193b      	adds	r3, r7, r4
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	0019      	movs	r1, r3
 8004358:	2324      	movs	r3, #36	; 0x24
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <Paint_SetPixel+0x338>)
 8004360:	8a52      	ldrh	r2, [r2, #18]
 8004362:	4353      	muls	r3, r2
 8004364:	18cb      	adds	r3, r1, r3
 8004366:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <Paint_SetPixel+0x338>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	18d2      	adds	r2, r2, r3
 8004370:	201f      	movs	r0, #31
 8004372:	183b      	adds	r3, r7, r0
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 8004378:	0021      	movs	r1, r4
 800437a:	187b      	adds	r3, r7, r1
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	4013      	ands	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	22f0      	movs	r2, #240	; 0xf0
 8004386:	411a      	asrs	r2, r3
 8004388:	0013      	movs	r3, r2
 800438a:	b25b      	sxtb	r3, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	b25b      	sxtb	r3, r3
 8004390:	183a      	adds	r2, r7, r0
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	b252      	sxtb	r2, r2
 8004396:	4013      	ands	r3, r2
 8004398:	b25a      	sxtb	r2, r3
 800439a:	183b      	adds	r3, r7, r0
 800439c:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800439e:	1cbb      	adds	r3, r7, #2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	011a      	lsls	r2, r3, #4
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	400b      	ands	r3, r1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	411a      	asrs	r2, r3
 80043b0:	0013      	movs	r3, r2
 80043b2:	b25a      	sxtb	r2, r3
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b259      	sxtb	r1, r3
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <Paint_SetPixel+0x338>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	b2ca      	uxtb	r2, r1
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e006      	b.n	80043da <Paint_SetPixel+0x342>
		return;
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	e004      	b.n	80043da <Paint_SetPixel+0x342>
 80043d0:	200007d4 	.word	0x200007d4
 80043d4:	080130b8 	.word	0x080130b8
		return;
 80043d8:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 80043da:	46bd      	mov	sp, r7
 80043dc:	b00b      	add	sp, #44	; 0x2c
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	0002      	movs	r2, r0
 80043e8:	1dbb      	adds	r3, r7, #6
 80043ea:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <Paint_Clear+0x118>)
 80043ee:	8adb      	ldrh	r3, [r3, #22]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d003      	beq.n	80043fc <Paint_Clear+0x1c>
 80043f4:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <Paint_Clear+0x118>)
 80043f6:	8adb      	ldrh	r3, [r3, #22]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d136      	bne.n	800446a <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80043fc:	2316      	movs	r3, #22
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e029      	b.n	800445a <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8004406:	2314      	movs	r3, #20
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2200      	movs	r2, #0
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e017      	b.n	8004440 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8004410:	2014      	movs	r0, #20
 8004412:	183b      	adds	r3, r7, r0
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	2316      	movs	r3, #22
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	4936      	ldr	r1, [pc, #216]	; (80044f8 <Paint_Clear+0x118>)
 800441e:	8a49      	ldrh	r1, [r1, #18]
 8004420:	434b      	muls	r3, r1
 8004422:	18d3      	adds	r3, r2, r3
 8004424:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <Paint_Clear+0x118>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	1dba      	adds	r2, r7, #6
 8004430:	8812      	ldrh	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8004436:	183b      	adds	r3, r7, r0
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	183b      	adds	r3, r7, r0
 800443c:	3201      	adds	r2, #1
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <Paint_Clear+0x118>)
 8004442:	8a5b      	ldrh	r3, [r3, #18]
 8004444:	2214      	movs	r2, #20
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3e0      	bcc.n	8004410 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800444e:	2116      	movs	r1, #22
 8004450:	187b      	adds	r3, r7, r1
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	187b      	adds	r3, r7, r1
 8004456:	3201      	adds	r2, #1
 8004458:	801a      	strh	r2, [r3, #0]
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <Paint_Clear+0x118>)
 800445c:	8a9b      	ldrh	r3, [r3, #20]
 800445e:	2216      	movs	r2, #22
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3ce      	bcc.n	8004406 <Paint_Clear+0x26>
 8004468:	e041      	b.n	80044ee <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 800446a:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <Paint_Clear+0x118>)
 800446c:	8adb      	ldrh	r3, [r3, #22]
 800446e:	2b07      	cmp	r3, #7
 8004470:	d13d      	bne.n	80044ee <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004472:	2312      	movs	r3, #18
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2200      	movs	r2, #0
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e030      	b.n	80044de <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 800447c:	2310      	movs	r3, #16
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e01e      	b.n	80044c4 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8004486:	2010      	movs	r0, #16
 8004488:	183b      	adds	r3, r7, r0
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	2312      	movs	r3, #18
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	4919      	ldr	r1, [pc, #100]	; (80044f8 <Paint_Clear+0x118>)
 8004494:	8a49      	ldrh	r1, [r1, #18]
 8004496:	434b      	muls	r3, r1
 8004498:	18d3      	adds	r3, r2, r3
 800449a:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b259      	sxtb	r1, r3
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <Paint_Clear+0x118>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	b2ca      	uxtb	r2, r1
 80044b8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 80044ba:	183b      	adds	r3, r7, r0
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	3201      	adds	r2, #1
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <Paint_Clear+0x118>)
 80044c6:	8a5b      	ldrh	r3, [r3, #18]
 80044c8:	2210      	movs	r2, #16
 80044ca:	18ba      	adds	r2, r7, r2
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3d9      	bcc.n	8004486 <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80044d2:	2112      	movs	r1, #18
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	881a      	ldrh	r2, [r3, #0]
 80044d8:	187b      	adds	r3, r7, r1
 80044da:	3201      	adds	r2, #1
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <Paint_Clear+0x118>)
 80044e0:	8a9b      	ldrh	r3, [r3, #20]
 80044e2:	2212      	movs	r2, #18
 80044e4:	18ba      	adds	r2, r7, r2
 80044e6:	8812      	ldrh	r2, [r2, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3c7      	bcc.n	800447c <Paint_Clear+0x9c>
			}
		}
	}
}
 80044ec:	e7ff      	b.n	80044ee <Paint_Clear+0x10e>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b006      	add	sp, #24
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200007d4 	.word	0x200007d4

080044fc <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	0005      	movs	r5, r0
 8004504:	000c      	movs	r4, r1
 8004506:	0010      	movs	r0, r2
 8004508:	0019      	movs	r1, r3
 800450a:	1dbb      	adds	r3, r7, #6
 800450c:	1c2a      	adds	r2, r5, #0
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	1c22      	adds	r2, r4, #0
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	1cbb      	adds	r3, r7, #2
 8004518:	1c02      	adds	r2, r0, #0
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	1c7b      	adds	r3, r7, #1
 800451e:	1c0a      	adds	r2, r1, #0
 8004520:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004522:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004524:	889b      	ldrh	r3, [r3, #4]
 8004526:	1dba      	adds	r2, r7, #6
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d805      	bhi.n	800453a <Paint_DrawPoint+0x3e>
 800452e:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004530:	88db      	ldrh	r3, [r3, #6]
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d916      	bls.n	8004568 <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <Paint_DrawPoint+0x1c8>)
 800453c:	0018      	movs	r0, r3
 800453e:	f00c fa1d 	bl	801097c <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8004542:	1dbb      	adds	r3, r7, #6
 8004544:	8819      	ldrh	r1, [r3, #0]
 8004546:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 8004548:	889b      	ldrh	r3, [r3, #4]
 800454a:	001a      	movs	r2, r3
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <Paint_DrawPoint+0x1cc>)
 800454e:	0018      	movs	r0, r3
 8004550:	f00c f988 	bl	8010864 <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	8819      	ldrh	r1, [r3, #0]
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <Paint_DrawPoint+0x1c4>)
 800455a:	88db      	ldrh	r3, [r3, #6]
 800455c:	001a      	movs	r2, r3
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <Paint_DrawPoint+0x1d0>)
 8004560:	0018      	movs	r0, r3
 8004562:	f00c f97f 	bl	8010864 <iprintf>
		return;
 8004566:	e0a8      	b.n	80046ba <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 8004568:	2320      	movs	r3, #32
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d161      	bne.n	8004636 <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8004572:	230e      	movs	r3, #14
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	2200      	movs	r2, #0
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	e051      	b.n	8004620 <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800457c:	230c      	movs	r3, #12
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e039      	b.n	80045fa <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	200e      	movs	r0, #14
 800458c:	183b      	adds	r3, r7, r0
 800458e:	2100      	movs	r1, #0
 8004590:	5e5b      	ldrsh	r3, [r3, r1]
 8004592:	18d2      	adds	r2, r2, r3
 8004594:	1c7b      	adds	r3, r7, #1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	d438      	bmi.n	800460e <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 800459c:	1d3b      	adds	r3, r7, #4
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	210c      	movs	r1, #12
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2400      	movs	r4, #0
 80045a6:	5f1b      	ldrsh	r3, [r3, r4]
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	1c7b      	adds	r3, r7, #1
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	d42d      	bmi.n	800460e <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	18d3      	adds	r3, r2, r3
 80045bc:	b29a      	uxth	r2, r3
 80045be:	1c7b      	adds	r3, r7, #1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 80045c8:	000c      	movs	r4, r1
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 80045d6:	1c7b      	adds	r3, r7, #1
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	b299      	uxth	r1, r3
 80045e0:	1cbb      	adds	r3, r7, #2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	001a      	movs	r2, r3
 80045e6:	f7ff fd57 	bl	8004098 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80045ea:	193b      	adds	r3, r7, r4
 80045ec:	2200      	movs	r2, #0
 80045ee:	5e9b      	ldrsh	r3, [r3, r2]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3301      	adds	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	230c      	movs	r3, #12
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2200      	movs	r2, #0
 8004600:	5e9a      	ldrsh	r2, [r3, r2]
 8004602:	1c7b      	adds	r3, r7, #1
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	429a      	cmp	r2, r3
 800460c:	dbbb      	blt.n	8004586 <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800460e:	210e      	movs	r1, #14
 8004610:	187b      	adds	r3, r7, r1
 8004612:	2200      	movs	r2, #0
 8004614:	5e9b      	ldrsh	r3, [r3, r2]
 8004616:	b29b      	uxth	r3, r3
 8004618:	3301      	adds	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	187b      	adds	r3, r7, r1
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	230e      	movs	r3, #14
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	5e9a      	ldrsh	r2, [r3, r2]
 8004628:	1c7b      	adds	r3, r7, #1
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	429a      	cmp	r2, r3
 8004632:	dba3      	blt.n	800457c <Paint_DrawPoint+0x80>
 8004634:	e041      	b.n	80046ba <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8004636:	230e      	movs	r3, #14
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	e034      	b.n	80046aa <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8004640:	230c      	movs	r3, #12
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2200      	movs	r2, #0
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e01e      	b.n	8004688 <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 800464a:	230e      	movs	r3, #14
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	1dbb      	adds	r3, r7, #6
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b298      	uxth	r0, r3
 800465c:	240c      	movs	r4, #12
 800465e:	193b      	adds	r3, r7, r4
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b299      	uxth	r1, r3
 800466e:	1cbb      	adds	r3, r7, #2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	001a      	movs	r2, r3
 8004674:	f7ff fd10 	bl	8004098 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8004678:	193b      	adds	r3, r7, r4
 800467a:	2200      	movs	r2, #0
 800467c:	5e9b      	ldrsh	r3, [r3, r2]
 800467e:	b29b      	uxth	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	193b      	adds	r3, r7, r4
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	230c      	movs	r3, #12
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	5e9a      	ldrsh	r2, [r3, r2]
 8004690:	1c7b      	adds	r3, r7, #1
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	dbd8      	blt.n	800464a <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8004698:	210e      	movs	r1, #14
 800469a:	187b      	adds	r3, r7, r1
 800469c:	2200      	movs	r2, #0
 800469e:	5e9b      	ldrsh	r3, [r3, r2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	230e      	movs	r3, #14
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2200      	movs	r2, #0
 80046b0:	5e9a      	ldrsh	r2, [r3, r2]
 80046b2:	1c7b      	adds	r3, r7, #1
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbc2      	blt.n	8004640 <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b004      	add	sp, #16
 80046be:	bdb0      	pop	{r4, r5, r7, pc}
 80046c0:	200007d4 	.word	0x200007d4
 80046c4:	080130e0 	.word	0x080130e0
 80046c8:	08013120 	.word	0x08013120
 80046cc:	08013144 	.word	0x08013144

080046d0 <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	0005      	movs	r5, r0
 80046d8:	000c      	movs	r4, r1
 80046da:	0010      	movs	r0, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	1dbb      	adds	r3, r7, #6
 80046e0:	1c2a      	adds	r2, r5, #0
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	1c22      	adds	r2, r4, #0
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	1cbb      	adds	r3, r7, #2
 80046ec:	1c02      	adds	r2, r0, #0
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	003b      	movs	r3, r7
 80046f2:	1c0a      	adds	r2, r1, #0
 80046f4:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 80046f6:	4b63      	ldr	r3, [pc, #396]	; (8004884 <Paint_DrawLine+0x1b4>)
 80046f8:	889b      	ldrh	r3, [r3, #4]
 80046fa:	1dba      	adds	r2, r7, #6
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d811      	bhi.n	8004726 <Paint_DrawLine+0x56>
 8004702:	4b60      	ldr	r3, [pc, #384]	; (8004884 <Paint_DrawLine+0x1b4>)
 8004704:	88db      	ldrh	r3, [r3, #6]
 8004706:	1d3a      	adds	r2, r7, #4
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d80b      	bhi.n	8004726 <Paint_DrawLine+0x56>
 800470e:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <Paint_DrawLine+0x1b4>)
 8004710:	889b      	ldrh	r3, [r3, #4]
 8004712:	1cba      	adds	r2, r7, #2
 8004714:	8812      	ldrh	r2, [r2, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d805      	bhi.n	8004726 <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 800471a:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <Paint_DrawLine+0x1b4>)
 800471c:	88db      	ldrh	r3, [r3, #6]
 800471e:	003a      	movs	r2, r7
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d904      	bls.n	8004730 <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8004726:	4b58      	ldr	r3, [pc, #352]	; (8004888 <Paint_DrawLine+0x1b8>)
 8004728:	0018      	movs	r0, r3
 800472a:	f00c f927 	bl	801097c <puts>
		return;
 800472e:	e0a5      	b.n	800487c <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 8004730:	2326      	movs	r3, #38	; 0x26
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	1dba      	adds	r2, r7, #6
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 800473a:	2324      	movs	r3, #36	; 0x24
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	1d3a      	adds	r2, r7, #4
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004744:	1cbb      	adds	r3, r7, #2
 8004746:	881a      	ldrh	r2, [r3, #0]
 8004748:	1dbb      	adds	r3, r7, #6
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	17da      	asrs	r2, r3, #31
 8004750:	189b      	adds	r3, r3, r2
 8004752:	4053      	eors	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8004756:	003b      	movs	r3, r7
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	17da      	asrs	r2, r3, #31
 8004762:	189b      	adds	r3, r3, r2
 8004764:	4053      	eors	r3, r2
 8004766:	425b      	negs	r3, r3
 8004768:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 800476a:	1dba      	adds	r2, r7, #6
 800476c:	1cbb      	adds	r3, r7, #2
 800476e:	8812      	ldrh	r2, [r2, #0]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d201      	bcs.n	800477a <Paint_DrawLine+0xaa>
 8004776:	2301      	movs	r3, #1
 8004778:	e001      	b.n	800477e <Paint_DrawLine+0xae>
 800477a:	2301      	movs	r3, #1
 800477c:	425b      	negs	r3, r3
 800477e:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8004780:	1d3a      	adds	r2, r7, #4
 8004782:	003b      	movs	r3, r7
 8004784:	8812      	ldrh	r2, [r2, #0]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d201      	bcs.n	8004790 <Paint_DrawLine+0xc0>
 800478c:	2301      	movs	r3, #1
 800478e:	e001      	b.n	8004794 <Paint_DrawLine+0xc4>
 8004790:	2301      	movs	r3, #1
 8004792:	425b      	negs	r3, r3
 8004794:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 800479e:	231f      	movs	r3, #31
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 80047a6:	241f      	movs	r4, #31
 80047a8:	193b      	adds	r3, r7, r4
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	3201      	adds	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11c      	bne.n	80047f6 <Paint_DrawLine+0x126>
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2103      	movs	r1, #3
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fb fd2c 	bl	8000220 <__aeabi_uidivmod>
 80047c8:	000b      	movs	r3, r1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d112      	bne.n	80047f6 <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 80047d0:	233c      	movs	r3, #60	; 0x3c
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	2324      	movs	r3, #36	; 0x24
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	8819      	ldrh	r1, [r3, #0]
 80047dc:	2326      	movs	r3, #38	; 0x26
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	8818      	ldrh	r0, [r3, #0]
 80047e2:	2301      	movs	r3, #1
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	0013      	movs	r3, r2
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	f7ff fe87 	bl	80044fc <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 80047ee:	193b      	adds	r3, r7, r4
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e010      	b.n	8004818 <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80047f6:	233c      	movs	r3, #60	; 0x3c
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	781c      	ldrb	r4, [r3, #0]
 80047fc:	2338      	movs	r3, #56	; 0x38
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	2324      	movs	r3, #36	; 0x24
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	8819      	ldrh	r1, [r3, #0]
 8004808:	2326      	movs	r3, #38	; 0x26
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	8818      	ldrh	r0, [r3, #0]
 800480e:	2301      	movs	r3, #1
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	0023      	movs	r3, r4
 8004814:	f7ff fe72 	bl	80044fc <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	429a      	cmp	r2, r3
 8004820:	dc11      	bgt.n	8004846 <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 8004822:	2026      	movs	r0, #38	; 0x26
 8004824:	183a      	adds	r2, r7, r0
 8004826:	1cbb      	adds	r3, r7, #2
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d022      	beq.n	8004876 <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	b299      	uxth	r1, r3
 800483c:	183b      	adds	r3, r7, r0
 800483e:	183a      	adds	r2, r7, r0
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	188a      	adds	r2, r1, r2
 8004844:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	429a      	cmp	r2, r3
 800484e:	dbaa      	blt.n	80047a6 <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 8004850:	2024      	movs	r0, #36	; 0x24
 8004852:	183a      	adds	r2, r7, r0
 8004854:	003b      	movs	r3, r7
 8004856:	8812      	ldrh	r2, [r2, #0]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d00d      	beq.n	800487a <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	b299      	uxth	r1, r3
 800486a:	183b      	adds	r3, r7, r0
 800486c:	183a      	adds	r2, r7, r0
 800486e:	8812      	ldrh	r2, [r2, #0]
 8004870:	188a      	adds	r2, r1, r2
 8004872:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8004874:	e797      	b.n	80047a6 <Paint_DrawLine+0xd6>
				break;
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	e000      	b.n	800487c <Paint_DrawLine+0x1ac>
				break;
 800487a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800487c:	46bd      	mov	sp, r7
 800487e:	b00a      	add	sp, #40	; 0x28
 8004880:	bdb0      	pop	{r4, r5, r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	200007d4 	.word	0x200007d4
 8004888:	0801316c 	.word	0x0801316c

0800488c <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	46ce      	mov	lr, r9
 8004890:	4647      	mov	r7, r8
 8004892:	b580      	push	{r7, lr}
 8004894:	b089      	sub	sp, #36	; 0x24
 8004896:	af04      	add	r7, sp, #16
 8004898:	0004      	movs	r4, r0
 800489a:	0008      	movs	r0, r1
 800489c:	60ba      	str	r2, [r7, #8]
 800489e:	0019      	movs	r1, r3
 80048a0:	260e      	movs	r6, #14
 80048a2:	19bb      	adds	r3, r7, r6
 80048a4:	1c22      	adds	r2, r4, #0
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	230c      	movs	r3, #12
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	1c02      	adds	r2, r0, #0
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	1dbb      	adds	r3, r7, #6
 80048b2:	1c0a      	adds	r2, r1, #0
 80048b4:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80048b6:	68b8      	ldr	r0, [r7, #8]
 80048b8:	f7fe fbbc 	bl	8003034 <__aeabi_f2d>
 80048bc:	0002      	movs	r2, r0
 80048be:	000b      	movs	r3, r1
 80048c0:	0010      	movs	r0, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	f00d f90c 	bl	8011ae0 <cos>
 80048c8:	0004      	movs	r4, r0
 80048ca:	000d      	movs	r5, r1
 80048cc:	2130      	movs	r1, #48	; 0x30
 80048ce:	187b      	adds	r3, r7, r1
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fe fb58 	bl	8002f88 <__aeabi_i2d>
 80048d8:	0002      	movs	r2, r0
 80048da:	000b      	movs	r3, r1
 80048dc:	0020      	movs	r0, r4
 80048de:	0029      	movs	r1, r5
 80048e0:	f7fd fd00 	bl	80022e4 <__aeabi_dmul>
 80048e4:	0002      	movs	r2, r0
 80048e6:	000b      	movs	r3, r1
 80048e8:	0014      	movs	r4, r2
 80048ea:	001d      	movs	r5, r3
 80048ec:	19bb      	adds	r3, r7, r6
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fe fb49 	bl	8002f88 <__aeabi_i2d>
 80048f6:	0002      	movs	r2, r0
 80048f8:	000b      	movs	r3, r1
 80048fa:	0020      	movs	r0, r4
 80048fc:	0029      	movs	r1, r5
 80048fe:	f7fc fd81 	bl	8001404 <__aeabi_dadd>
 8004902:	0002      	movs	r2, r0
 8004904:	000b      	movs	r3, r1
 8004906:	0010      	movs	r0, r2
 8004908:	0019      	movs	r1, r3
 800490a:	f7fb fe55 	bl	80005b8 <__aeabi_d2uiz>
 800490e:	0003      	movs	r3, r0
 8004910:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f7fe fb8e 	bl	8003034 <__aeabi_f2d>
 8004918:	0002      	movs	r2, r0
 800491a:	000b      	movs	r3, r1
 800491c:	0010      	movs	r0, r2
 800491e:	0019      	movs	r1, r3
 8004920:	f00d f920 	bl	8011b64 <sin>
 8004924:	0004      	movs	r4, r0
 8004926:	000d      	movs	r5, r1
 8004928:	2130      	movs	r1, #48	; 0x30
 800492a:	187b      	adds	r3, r7, r1
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	0018      	movs	r0, r3
 8004930:	f7fe fb2a 	bl	8002f88 <__aeabi_i2d>
 8004934:	0002      	movs	r2, r0
 8004936:	000b      	movs	r3, r1
 8004938:	0020      	movs	r0, r4
 800493a:	0029      	movs	r1, r5
 800493c:	f7fd fcd2 	bl	80022e4 <__aeabi_dmul>
 8004940:	0002      	movs	r2, r0
 8004942:	000b      	movs	r3, r1
 8004944:	0014      	movs	r4, r2
 8004946:	001d      	movs	r5, r3
 8004948:	220c      	movs	r2, #12
 800494a:	18bb      	adds	r3, r7, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	0018      	movs	r0, r3
 8004950:	f7fe fb1a 	bl	8002f88 <__aeabi_i2d>
 8004954:	0002      	movs	r2, r0
 8004956:	000b      	movs	r3, r1
 8004958:	0020      	movs	r0, r4
 800495a:	0029      	movs	r1, r5
 800495c:	f7fc fd52 	bl	8001404 <__aeabi_dadd>
 8004960:	0002      	movs	r2, r0
 8004962:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8004964:	0010      	movs	r0, r2
 8004966:	0019      	movs	r1, r3
 8004968:	f7fb fe26 	bl	80005b8 <__aeabi_d2uiz>
 800496c:	0003      	movs	r3, r0
 800496e:	b299      	uxth	r1, r3
 8004970:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 8004972:	68b8      	ldr	r0, [r7, #8]
 8004974:	f7fe fb5e 	bl	8003034 <__aeabi_f2d>
 8004978:	0002      	movs	r2, r0
 800497a:	000b      	movs	r3, r1
 800497c:	0010      	movs	r0, r2
 800497e:	0019      	movs	r1, r3
 8004980:	f00d f8ae 	bl	8011ae0 <cos>
 8004984:	0004      	movs	r4, r0
 8004986:	000d      	movs	r5, r1
 8004988:	1dbb      	adds	r3, r7, #6
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fafb 	bl	8002f88 <__aeabi_i2d>
 8004992:	0002      	movs	r2, r0
 8004994:	000b      	movs	r3, r1
 8004996:	0020      	movs	r0, r4
 8004998:	0029      	movs	r1, r5
 800499a:	f7fd fca3 	bl	80022e4 <__aeabi_dmul>
 800499e:	0002      	movs	r2, r0
 80049a0:	000b      	movs	r3, r1
 80049a2:	0014      	movs	r4, r2
 80049a4:	001d      	movs	r5, r3
 80049a6:	230e      	movs	r3, #14
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fe faeb 	bl	8002f88 <__aeabi_i2d>
 80049b2:	0002      	movs	r2, r0
 80049b4:	000b      	movs	r3, r1
 80049b6:	0020      	movs	r0, r4
 80049b8:	0029      	movs	r1, r5
 80049ba:	f7fc fd23 	bl	8001404 <__aeabi_dadd>
 80049be:	0002      	movs	r2, r0
 80049c0:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80049c2:	0010      	movs	r0, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	f7fb fdf7 	bl	80005b8 <__aeabi_d2uiz>
 80049ca:	0003      	movs	r3, r0
 80049cc:	b299      	uxth	r1, r3
 80049ce:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f7fe fb2f 	bl	8003034 <__aeabi_f2d>
 80049d6:	0002      	movs	r2, r0
 80049d8:	000b      	movs	r3, r1
 80049da:	0010      	movs	r0, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	f00d f8c1 	bl	8011b64 <sin>
 80049e2:	0004      	movs	r4, r0
 80049e4:	000d      	movs	r5, r1
 80049e6:	1dbb      	adds	r3, r7, #6
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7fe facc 	bl	8002f88 <__aeabi_i2d>
 80049f0:	0002      	movs	r2, r0
 80049f2:	000b      	movs	r3, r1
 80049f4:	0020      	movs	r0, r4
 80049f6:	0029      	movs	r1, r5
 80049f8:	f7fd fc74 	bl	80022e4 <__aeabi_dmul>
 80049fc:	0002      	movs	r2, r0
 80049fe:	000b      	movs	r3, r1
 8004a00:	0014      	movs	r4, r2
 8004a02:	001d      	movs	r5, r3
 8004a04:	220c      	movs	r2, #12
 8004a06:	18bb      	adds	r3, r7, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f7fe fabc 	bl	8002f88 <__aeabi_i2d>
 8004a10:	0002      	movs	r2, r0
 8004a12:	000b      	movs	r3, r1
 8004a14:	0020      	movs	r0, r4
 8004a16:	0029      	movs	r1, r5
 8004a18:	f7fc fcf4 	bl	8001404 <__aeabi_dadd>
 8004a1c:	0002      	movs	r2, r0
 8004a1e:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8004a20:	0010      	movs	r0, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	f7fb fdc8 	bl	80005b8 <__aeabi_d2uiz>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	233c      	movs	r3, #60	; 0x3c
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	2338      	movs	r3, #56	; 0x38
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	2334      	movs	r3, #52	; 0x34
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	0013      	movs	r3, r2
 8004a46:	464a      	mov	r2, r9
 8004a48:	4641      	mov	r1, r8
 8004a4a:	0030      	movs	r0, r6
 8004a4c:	f7ff fe40 	bl	80046d0 <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b005      	add	sp, #20
 8004a56:	bcc0      	pop	{r6, r7}
 8004a58:	46b9      	mov	r9, r7
 8004a5a:	46b0      	mov	r8, r6
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a60 <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af04      	add	r7, sp, #16
 8004a66:	0005      	movs	r5, r0
 8004a68:	000c      	movs	r4, r1
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	1dbb      	adds	r3, r7, #6
 8004a70:	1c2a      	adds	r2, r5, #0
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	1c22      	adds	r2, r4, #0
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	1cbb      	adds	r3, r7, #2
 8004a7c:	1c02      	adds	r2, r0, #0
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	003b      	movs	r3, r7
 8004a82:	1c0a      	adds	r2, r1, #0
 8004a84:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8004a86:	4b5a      	ldr	r3, [pc, #360]	; (8004bf0 <Paint_DrawRectangle+0x190>)
 8004a88:	889b      	ldrh	r3, [r3, #4]
 8004a8a:	1dba      	adds	r2, r7, #6
 8004a8c:	8812      	ldrh	r2, [r2, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d811      	bhi.n	8004ab6 <Paint_DrawRectangle+0x56>
 8004a92:	4b57      	ldr	r3, [pc, #348]	; (8004bf0 <Paint_DrawRectangle+0x190>)
 8004a94:	88db      	ldrh	r3, [r3, #6]
 8004a96:	1d3a      	adds	r2, r7, #4
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d80b      	bhi.n	8004ab6 <Paint_DrawRectangle+0x56>
 8004a9e:	4b54      	ldr	r3, [pc, #336]	; (8004bf0 <Paint_DrawRectangle+0x190>)
 8004aa0:	889b      	ldrh	r3, [r3, #4]
 8004aa2:	1cba      	adds	r2, r7, #2
 8004aa4:	8812      	ldrh	r2, [r2, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d805      	bhi.n	8004ab6 <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 8004aaa:	4b51      	ldr	r3, [pc, #324]	; (8004bf0 <Paint_DrawRectangle+0x190>)
 8004aac:	88db      	ldrh	r3, [r3, #6]
 8004aae:	003a      	movs	r2, r7
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d904      	bls.n	8004ac0 <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 8004ab6:	4b4f      	ldr	r3, [pc, #316]	; (8004bf4 <Paint_DrawRectangle+0x194>)
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f00b ff5f 	bl	801097c <puts>
		return;
 8004abe:	e094      	b.n	8004bea <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 8004ac0:	2328      	movs	r3, #40	; 0x28
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	4694      	mov	ip, r2
 8004ac6:	44bc      	add	ip, r7
 8004ac8:	4463      	add	r3, ip
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02e      	beq.n	8004b2e <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8004ad0:	230e      	movs	r3, #14
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	1d3a      	adds	r2, r7, #4
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	e020      	b.n	8004b1e <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 8004adc:	250e      	movs	r5, #14
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	881c      	ldrh	r4, [r3, #0]
 8004ae2:	1cbb      	adds	r3, r7, #2
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	197b      	adds	r3, r7, r5
 8004ae8:	8819      	ldrh	r1, [r3, #0]
 8004aea:	1dbb      	adds	r3, r7, #6
 8004aec:	8818      	ldrh	r0, [r3, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	2324      	movs	r3, #36	; 0x24
 8004af4:	2608      	movs	r6, #8
 8004af6:	46b4      	mov	ip, r6
 8004af8:	44bc      	add	ip, r7
 8004afa:	4463      	add	r3, ip
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	2320      	movs	r3, #32
 8004b02:	2608      	movs	r6, #8
 8004b04:	46b4      	mov	ip, r6
 8004b06:	44bc      	add	ip, r7
 8004b08:	4463      	add	r3, ip
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	0023      	movs	r3, r4
 8004b10:	f7ff fdde 	bl	80046d0 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8004b14:	197b      	adds	r3, r7, r5
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	197b      	adds	r3, r7, r5
 8004b1a:	3201      	adds	r2, #1
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	230e      	movs	r3, #14
 8004b20:	18fa      	adds	r2, r7, r3
 8004b22:	003b      	movs	r3, r7
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3d7      	bcc.n	8004adc <Paint_DrawRectangle+0x7c>
 8004b2c:	e05d      	b.n	8004bea <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	881c      	ldrh	r4, [r3, #0]
 8004b32:	1cbb      	adds	r3, r7, #2
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	8819      	ldrh	r1, [r3, #0]
 8004b3a:	1dbb      	adds	r3, r7, #6
 8004b3c:	8818      	ldrh	r0, [r3, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	2524      	movs	r5, #36	; 0x24
 8004b44:	2308      	movs	r3, #8
 8004b46:	18fe      	adds	r6, r7, r3
 8004b48:	1973      	adds	r3, r6, r5
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	2620      	movs	r6, #32
 8004b50:	2308      	movs	r3, #8
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	199b      	adds	r3, r3, r6
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	f7ff fdb8 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 8004b60:	003b      	movs	r3, r7
 8004b62:	881c      	ldrh	r4, [r3, #0]
 8004b64:	1dbb      	adds	r3, r7, #6
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	8819      	ldrh	r1, [r3, #0]
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	8818      	ldrh	r0, [r3, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	9302      	str	r3, [sp, #8]
 8004b74:	2308      	movs	r3, #8
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	195b      	adds	r3, r3, r5
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	2308      	movs	r3, #8
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	199b      	adds	r3, r3, r6
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	0023      	movs	r3, r4
 8004b8a:	f7ff fda1 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	881c      	ldrh	r4, [r3, #0]
 8004b92:	1cbb      	adds	r3, r7, #2
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	003b      	movs	r3, r7
 8004b98:	8819      	ldrh	r1, [r3, #0]
 8004b9a:	1cbb      	adds	r3, r7, #2
 8004b9c:	8818      	ldrh	r0, [r3, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	195b      	adds	r3, r3, r5
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	2308      	movs	r3, #8
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	199b      	adds	r3, r3, r6
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	0023      	movs	r3, r4
 8004bb8:	f7ff fd8a 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 8004bbc:	003b      	movs	r3, r7
 8004bbe:	881c      	ldrh	r4, [r3, #0]
 8004bc0:	1dbb      	adds	r3, r7, #6
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	003b      	movs	r3, r7
 8004bc6:	8819      	ldrh	r1, [r3, #0]
 8004bc8:	1cbb      	adds	r3, r7, #2
 8004bca:	8818      	ldrh	r0, [r3, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	195b      	adds	r3, r3, r5
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	2308      	movs	r3, #8
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	199b      	adds	r3, r3, r6
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	0023      	movs	r3, r4
 8004be6:	f7ff fd73 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b005      	add	sp, #20
 8004bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf0:	200007d4 	.word	0x200007d4
 8004bf4:	080131ac 	.word	0x080131ac

08004bf8 <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	0005      	movs	r5, r0
 8004c00:	000c      	movs	r4, r1
 8004c02:	0010      	movs	r0, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	1c2a      	adds	r2, r5, #0
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	1d3b      	adds	r3, r7, #4
 8004c0e:	1c22      	adds	r2, r4, #0
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	1cbb      	adds	r3, r7, #2
 8004c14:	1c02      	adds	r2, r0, #0
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	003b      	movs	r3, r7
 8004c1a:	1c0a      	adds	r2, r1, #0
 8004c1c:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8004c1e:	4b94      	ldr	r3, [pc, #592]	; (8004e70 <Paint_DrawCircle+0x278>)
 8004c20:	889b      	ldrh	r3, [r3, #4]
 8004c22:	1dba      	adds	r2, r7, #6
 8004c24:	8812      	ldrh	r2, [r2, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d805      	bhi.n	8004c36 <Paint_DrawCircle+0x3e>
 8004c2a:	4b91      	ldr	r3, [pc, #580]	; (8004e70 <Paint_DrawCircle+0x278>)
 8004c2c:	88db      	ldrh	r3, [r3, #6]
 8004c2e:	1d3a      	adds	r2, r7, #4
 8004c30:	8812      	ldrh	r2, [r2, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d304      	bcc.n	8004c40 <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8004c36:	4b8f      	ldr	r3, [pc, #572]	; (8004e74 <Paint_DrawCircle+0x27c>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f00b fe9f 	bl	801097c <puts>
		return;
 8004c3e:	e229      	b.n	8005094 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 8004c40:	230e      	movs	r3, #14
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2200      	movs	r2, #0
 8004c46:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 8004c48:	230c      	movs	r3, #12
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	1cba      	adds	r2, r7, #2
 8004c4e:	8812      	ldrh	r2, [r2, #0]
 8004c50:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 8004c52:	1cbb      	adds	r3, r7, #2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	18db      	adds	r3, r3, r3
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	230a      	movs	r3, #10
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 8004c66:	2324      	movs	r3, #36	; 0x24
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4694      	mov	ip, r2
 8004c6c:	44bc      	add	ip, r7
 8004c6e:	4463      	add	r3, ip
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d000      	beq.n	8004c78 <Paint_DrawCircle+0x80>
 8004c76:	e202      	b.n	800507e <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 8004c78:	e0ed      	b.n	8004e56 <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	220e      	movs	r2, #14
 8004c80:	18ba      	adds	r2, r7, r2
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e0a1      	b.n	8004dcc <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 8004c88:	250e      	movs	r5, #14
 8004c8a:	197b      	adds	r3, r7, r5
 8004c8c:	881a      	ldrh	r2, [r3, #0]
 8004c8e:	1dbb      	adds	r3, r7, #6
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	b298      	uxth	r0, r3
 8004c96:	2408      	movs	r4, #8
 8004c98:	193b      	adds	r3, r7, r4
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	18d3      	adds	r3, r2, r3
 8004ca2:	b299      	uxth	r1, r3
 8004ca4:	003b      	movs	r3, r7
 8004ca6:	881a      	ldrh	r2, [r3, #0]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2301      	movs	r3, #1
 8004cae:	f7ff fc25 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 8004cb2:	197b      	adds	r3, r7, r5
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	1dba      	adds	r2, r7, #6
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b298      	uxth	r0, r3
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	18d3      	adds	r3, r2, r3
 8004cc8:	b299      	uxth	r1, r3
 8004cca:	003b      	movs	r3, r7
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f7ff fc12 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	1dba      	adds	r2, r7, #6
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	b298      	uxth	r0, r3
 8004ce4:	197b      	adds	r3, r7, r5
 8004ce6:	881a      	ldrh	r2, [r3, #0]
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	18d3      	adds	r3, r2, r3
 8004cee:	b299      	uxth	r1, r3
 8004cf0:	003b      	movs	r3, r7
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f7ff fbff 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	1dba      	adds	r2, r7, #6
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	b298      	uxth	r0, r3
 8004d0a:	197b      	adds	r3, r7, r5
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	b299      	uxth	r1, r3
 8004d16:	003b      	movs	r3, r7
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f7ff fbec 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 8004d24:	197b      	adds	r3, r7, r5
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	1dba      	adds	r2, r7, #6
 8004d2a:	8812      	ldrh	r2, [r2, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b298      	uxth	r0, r3
 8004d30:	193b      	adds	r3, r7, r4
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	1d3a      	adds	r2, r7, #4
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b299      	uxth	r1, r3
 8004d3c:	003b      	movs	r3, r7
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	2301      	movs	r3, #1
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2301      	movs	r3, #1
 8004d46:	f7ff fbd9 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 8004d4a:	197b      	adds	r3, r7, r5
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	1dbb      	adds	r3, r7, #6
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	b298      	uxth	r0, r3
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	1d3a      	adds	r2, r7, #4
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	b299      	uxth	r1, r3
 8004d62:	003b      	movs	r3, r7
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	2301      	movs	r3, #1
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f7ff fbc6 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 8004d70:	193b      	adds	r3, r7, r4
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	1dbb      	adds	r3, r7, #6
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	1d3a      	adds	r2, r7, #4
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b299      	uxth	r1, r3
 8004d88:	003b      	movs	r3, r7
 8004d8a:	881a      	ldrh	r2, [r3, #0]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2301      	movs	r3, #1
 8004d92:	f7ff fbb3 	bl	80044fc <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	1dbb      	adds	r3, r7, #6
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	18d3      	adds	r3, r2, r3
 8004da0:	b298      	uxth	r0, r3
 8004da2:	197b      	adds	r3, r7, r5
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	b299      	uxth	r1, r3
 8004dae:	003b      	movs	r3, r7
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	2301      	movs	r3, #1
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2301      	movs	r3, #1
 8004db8:	f7ff fba0 	bl	80044fc <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	2308      	movs	r3, #8
 8004dce:	18fa      	adds	r2, r7, r3
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5e52      	ldrsh	r2, [r2, r1]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5e5b      	ldrsh	r3, [r3, r1]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	dc00      	bgt.n	8004de2 <Paint_DrawCircle+0x1ea>
 8004de0:	e752      	b.n	8004c88 <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 8004de2:	210a      	movs	r1, #10
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	2200      	movs	r2, #0
 8004de8:	5e9b      	ldrsh	r3, [r3, r2]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da0d      	bge.n	8004e0a <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 8004dee:	230e      	movs	r3, #14
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3306      	adds	r3, #6
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e01c      	b.n	8004e44 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8004e0a:	230e      	movs	r3, #14
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2200      	movs	r2, #0
 8004e10:	5e9a      	ldrsh	r2, [r3, r2]
 8004e12:	210c      	movs	r1, #12
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	2000      	movs	r0, #0
 8004e18:	5e1b      	ldrsh	r3, [r3, r0]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	200a      	movs	r0, #10
 8004e24:	183b      	adds	r3, r7, r0
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	18d3      	adds	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	330a      	adds	r3, #10
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	183b      	adds	r3, r7, r0
 8004e32:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	2200      	movs	r2, #0
 8004e38:	5e9b      	ldrsh	r3, [r3, r2]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8004e44:	210e      	movs	r1, #14
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	2200      	movs	r2, #0
 8004e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 8004e56:	230e      	movs	r3, #14
 8004e58:	18fa      	adds	r2, r7, r3
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5e52      	ldrsh	r2, [r2, r1]
 8004e62:	2100      	movs	r1, #0
 8004e64:	5e5b      	ldrsh	r3, [r3, r1]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	dc00      	bgt.n	8004e6c <Paint_DrawCircle+0x274>
 8004e6a:	e706      	b.n	8004c7a <Paint_DrawCircle+0x82>
 8004e6c:	e112      	b.n	8005094 <Paint_DrawCircle+0x49c>
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	200007d4 	.word	0x200007d4
 8004e74:	080131dc 	.word	0x080131dc
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 8004e78:	250e      	movs	r5, #14
 8004e7a:	197b      	adds	r3, r7, r5
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	1dbb      	adds	r3, r7, #6
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	b298      	uxth	r0, r3
 8004e86:	260c      	movs	r6, #12
 8004e88:	19bb      	adds	r3, r7, r6
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	b299      	uxth	r1, r3
 8004e94:	2320      	movs	r3, #32
 8004e96:	2208      	movs	r2, #8
 8004e98:	4694      	mov	ip, r2
 8004e9a:	44bc      	add	ip, r7
 8004e9c:	4463      	add	r3, ip
 8004e9e:	781c      	ldrb	r4, [r3, #0]
 8004ea0:	003b      	movs	r3, r7
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	0023      	movs	r3, r4
 8004eaa:	f7ff fb27 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 8004eae:	197b      	adds	r3, r7, r5
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	1dba      	adds	r2, r7, #6
 8004eb4:	8812      	ldrh	r2, [r2, #0]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	b298      	uxth	r0, r3
 8004eba:	19bb      	adds	r3, r7, r6
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	18d3      	adds	r3, r2, r3
 8004ec4:	b299      	uxth	r1, r3
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	2208      	movs	r2, #8
 8004eca:	4694      	mov	ip, r2
 8004ecc:	44bc      	add	ip, r7
 8004ece:	4463      	add	r3, ip
 8004ed0:	781c      	ldrb	r4, [r3, #0]
 8004ed2:	003b      	movs	r3, r7
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	0023      	movs	r3, r4
 8004edc:	f7ff fb0e 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 8004ee0:	19bb      	adds	r3, r7, r6
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	1dba      	adds	r2, r7, #6
 8004ee6:	8812      	ldrh	r2, [r2, #0]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	b298      	uxth	r0, r3
 8004eec:	197b      	adds	r3, r7, r5
 8004eee:	881a      	ldrh	r2, [r3, #0]
 8004ef0:	1d3b      	adds	r3, r7, #4
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	18d3      	adds	r3, r2, r3
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	2320      	movs	r3, #32
 8004efa:	2208      	movs	r2, #8
 8004efc:	4694      	mov	ip, r2
 8004efe:	44bc      	add	ip, r7
 8004f00:	4463      	add	r3, ip
 8004f02:	781c      	ldrb	r4, [r3, #0]
 8004f04:	003b      	movs	r3, r7
 8004f06:	881a      	ldrh	r2, [r3, #0]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	0023      	movs	r3, r4
 8004f0e:	f7ff faf5 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 8004f12:	19bb      	adds	r3, r7, r6
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	1dba      	adds	r2, r7, #6
 8004f18:	8812      	ldrh	r2, [r2, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b298      	uxth	r0, r3
 8004f1e:	197b      	adds	r3, r7, r5
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	1d3a      	adds	r2, r7, #4
 8004f24:	8812      	ldrh	r2, [r2, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b299      	uxth	r1, r3
 8004f2a:	2320      	movs	r3, #32
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	4694      	mov	ip, r2
 8004f30:	44bc      	add	ip, r7
 8004f32:	4463      	add	r3, ip
 8004f34:	781c      	ldrb	r4, [r3, #0]
 8004f36:	003b      	movs	r3, r7
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	0023      	movs	r3, r4
 8004f40:	f7ff fadc 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 8004f44:	197b      	adds	r3, r7, r5
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	1dba      	adds	r2, r7, #6
 8004f4a:	8812      	ldrh	r2, [r2, #0]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	b298      	uxth	r0, r3
 8004f50:	19bb      	adds	r3, r7, r6
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	1d3a      	adds	r2, r7, #4
 8004f56:	8812      	ldrh	r2, [r2, #0]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	2208      	movs	r2, #8
 8004f60:	4694      	mov	ip, r2
 8004f62:	44bc      	add	ip, r7
 8004f64:	4463      	add	r3, ip
 8004f66:	781c      	ldrb	r4, [r3, #0]
 8004f68:	003b      	movs	r3, r7
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	0023      	movs	r3, r4
 8004f72:	f7ff fac3 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 8004f76:	197b      	adds	r3, r7, r5
 8004f78:	881a      	ldrh	r2, [r3, #0]
 8004f7a:	1dbb      	adds	r3, r7, #6
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	18d3      	adds	r3, r2, r3
 8004f80:	b298      	uxth	r0, r3
 8004f82:	19bb      	adds	r3, r7, r6
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	1d3a      	adds	r2, r7, #4
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	b299      	uxth	r1, r3
 8004f8e:	2320      	movs	r3, #32
 8004f90:	2208      	movs	r2, #8
 8004f92:	4694      	mov	ip, r2
 8004f94:	44bc      	add	ip, r7
 8004f96:	4463      	add	r3, ip
 8004f98:	781c      	ldrb	r4, [r3, #0]
 8004f9a:	003b      	movs	r3, r7
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	0023      	movs	r3, r4
 8004fa4:	f7ff faaa 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 8004fa8:	19bb      	adds	r3, r7, r6
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	1dbb      	adds	r3, r7, #6
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	18d3      	adds	r3, r2, r3
 8004fb2:	b298      	uxth	r0, r3
 8004fb4:	197b      	adds	r3, r7, r5
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	1d3a      	adds	r2, r7, #4
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	b299      	uxth	r1, r3
 8004fc0:	2320      	movs	r3, #32
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	4694      	mov	ip, r2
 8004fc6:	44bc      	add	ip, r7
 8004fc8:	4463      	add	r3, ip
 8004fca:	781c      	ldrb	r4, [r3, #0]
 8004fcc:	003b      	movs	r3, r7
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	0023      	movs	r3, r4
 8004fd6:	f7ff fa91 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 8004fda:	19bb      	adds	r3, r7, r6
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	1dbb      	adds	r3, r7, #6
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	18d3      	adds	r3, r2, r3
 8004fe4:	b298      	uxth	r0, r3
 8004fe6:	197b      	adds	r3, r7, r5
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	18d3      	adds	r3, r2, r3
 8004ff0:	b299      	uxth	r1, r3
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	4694      	mov	ip, r2
 8004ff8:	44bc      	add	ip, r7
 8004ffa:	4463      	add	r3, ip
 8004ffc:	781c      	ldrb	r4, [r3, #0]
 8004ffe:	003b      	movs	r3, r7
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	2301      	movs	r3, #1
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	0023      	movs	r3, r4
 8005008:	f7ff fa78 	bl	80044fc <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 800500c:	210a      	movs	r1, #10
 800500e:	187b      	adds	r3, r7, r1
 8005010:	2200      	movs	r2, #0
 8005012:	5e9b      	ldrsh	r3, [r3, r2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	da0c      	bge.n	8005032 <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 8005018:	197b      	adds	r3, r7, r5
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	b29a      	uxth	r2, r3
 8005020:	187b      	adds	r3, r7, r1
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	3306      	adds	r3, #6
 800502a:	b29a      	uxth	r2, r3
 800502c:	187b      	adds	r3, r7, r1
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e01c      	b.n	800506c <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8005032:	230e      	movs	r3, #14
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2200      	movs	r2, #0
 8005038:	5e9a      	ldrsh	r2, [r3, r2]
 800503a:	210c      	movs	r1, #12
 800503c:	187b      	adds	r3, r7, r1
 800503e:	2000      	movs	r0, #0
 8005040:	5e1b      	ldrsh	r3, [r3, r0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	b29b      	uxth	r3, r3
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	b29a      	uxth	r2, r3
 800504a:	200a      	movs	r0, #10
 800504c:	183b      	adds	r3, r7, r0
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	b29b      	uxth	r3, r3
 8005054:	330a      	adds	r3, #10
 8005056:	b29a      	uxth	r2, r3
 8005058:	183b      	adds	r3, r7, r0
 800505a:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 800505c:	187b      	adds	r3, r7, r1
 800505e:	2200      	movs	r2, #0
 8005060:	5e9b      	ldrsh	r3, [r3, r2]
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	187b      	adds	r3, r7, r1
 800506a:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 800506c:	210e      	movs	r1, #14
 800506e:	187b      	adds	r3, r7, r1
 8005070:	2200      	movs	r2, #0
 8005072:	5e9b      	ldrsh	r3, [r3, r2]
 8005074:	b29b      	uxth	r3, r3
 8005076:	3301      	adds	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	187b      	adds	r3, r7, r1
 800507c:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 800507e:	230e      	movs	r3, #14
 8005080:	18fa      	adds	r2, r7, r3
 8005082:	230c      	movs	r3, #12
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2100      	movs	r1, #0
 8005088:	5e52      	ldrsh	r2, [r2, r1]
 800508a:	2100      	movs	r1, #0
 800508c:	5e5b      	ldrsh	r3, [r3, r1]
 800508e:	429a      	cmp	r2, r3
 8005090:	dc00      	bgt.n	8005094 <Paint_DrawCircle+0x49c>
 8005092:	e6f1      	b.n	8004e78 <Paint_DrawCircle+0x280>
		}
	}
}
 8005094:	46bd      	mov	sp, r7
 8005096:	b005      	add	sp, #20
 8005098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)

0800509c <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	0004      	movs	r4, r0
 80050a4:	0008      	movs	r0, r1
 80050a6:	0011      	movs	r1, r2
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	250e      	movs	r5, #14
 80050ac:	197b      	adds	r3, r7, r5
 80050ae:	1c22      	adds	r2, r4, #0
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	240c      	movs	r4, #12
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	1c02      	adds	r2, r0, #0
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	230b      	movs	r3, #11
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	1c0a      	adds	r2, r1, #0
 80050c0:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80050c2:	4b66      	ldr	r3, [pc, #408]	; (800525c <Paint_DrawChar+0x1c0>)
 80050c4:	889b      	ldrh	r3, [r3, #4]
 80050c6:	197a      	adds	r2, r7, r5
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d805      	bhi.n	80050da <Paint_DrawChar+0x3e>
 80050ce:	4b63      	ldr	r3, [pc, #396]	; (800525c <Paint_DrawChar+0x1c0>)
 80050d0:	88db      	ldrh	r3, [r3, #6]
 80050d2:	193a      	adds	r2, r7, r4
 80050d4:	8812      	ldrh	r2, [r2, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d904      	bls.n	80050e4 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80050da:	4b61      	ldr	r3, [pc, #388]	; (8005260 <Paint_DrawChar+0x1c4>)
 80050dc:	0018      	movs	r0, r3
 80050de:	f00b fc4d 	bl	801097c <puts>
		return;
 80050e2:	e0b7      	b.n	8005254 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80050e4:	230b      	movs	r3, #11
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	3b20      	subs	r3, #32
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	88d2      	ldrh	r2, [r2, #6]
 80050f0:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	8892      	ldrh	r2, [r2, #4]
 80050f6:	08d2      	lsrs	r2, r2, #3
 80050f8:	b292      	uxth	r2, r2
 80050fa:	0010      	movs	r0, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	8892      	ldrh	r2, [r2, #4]
 8005100:	2107      	movs	r1, #7
 8005102:	400a      	ands	r2, r1
 8005104:	b292      	uxth	r2, r2
 8005106:	1e51      	subs	r1, r2, #1
 8005108:	418a      	sbcs	r2, r1
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	1882      	adds	r2, r0, r2
 800510e:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 8005110:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	18d3      	adds	r3, r2, r3
 800511a:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 800511c:	231e      	movs	r3, #30
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	2200      	movs	r2, #0
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e08e      	b.n	8005244 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 8005126:	231c      	movs	r3, #28
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	2200      	movs	r2, #0
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e071      	b.n	8005214 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8005130:	2334      	movs	r3, #52	; 0x34
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	2bff      	cmp	r3, #255	; 0xff
 8005138:	d122      	bne.n	8005180 <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	0019      	movs	r1, r3
 8005140:	201c      	movs	r0, #28
 8005142:	183b      	adds	r3, r7, r0
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	2207      	movs	r2, #7
 8005148:	4013      	ands	r3, r2
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	411a      	asrs	r2, r3
 800514e:	0013      	movs	r3, r2
 8005150:	400b      	ands	r3, r1
 8005152:	d04e      	beq.n	80051f2 <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8005154:	230e      	movs	r3, #14
 8005156:	18fa      	adds	r2, r7, r3
 8005158:	183b      	adds	r3, r7, r0
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	b298      	uxth	r0, r3
 8005162:	230c      	movs	r3, #12
 8005164:	18fa      	adds	r2, r7, r3
 8005166:	231e      	movs	r3, #30
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	18d3      	adds	r3, r2, r3
 8005170:	b299      	uxth	r1, r3
 8005172:	2330      	movs	r3, #48	; 0x30
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	001a      	movs	r2, r3
 800517a:	f7fe ff8d 	bl	8004098 <Paint_SetPixel>
 800517e:	e038      	b.n	80051f2 <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	0019      	movs	r1, r3
 8005186:	201c      	movs	r0, #28
 8005188:	183b      	adds	r3, r7, r0
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	2207      	movs	r2, #7
 800518e:	4013      	ands	r3, r2
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	411a      	asrs	r2, r3
 8005194:	0013      	movs	r3, r2
 8005196:	400b      	ands	r3, r1
 8005198:	d015      	beq.n	80051c6 <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800519a:	230e      	movs	r3, #14
 800519c:	18fa      	adds	r2, r7, r3
 800519e:	183b      	adds	r3, r7, r0
 80051a0:	8812      	ldrh	r2, [r2, #0]
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	b298      	uxth	r0, r3
 80051a8:	230c      	movs	r3, #12
 80051aa:	18fa      	adds	r2, r7, r3
 80051ac:	231e      	movs	r3, #30
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	18d3      	adds	r3, r2, r3
 80051b6:	b299      	uxth	r1, r3
 80051b8:	2330      	movs	r3, #48	; 0x30
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	001a      	movs	r2, r3
 80051c0:	f7fe ff6a 	bl	8004098 <Paint_SetPixel>
 80051c4:	e015      	b.n	80051f2 <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 80051c6:	230e      	movs	r3, #14
 80051c8:	18fa      	adds	r2, r7, r3
 80051ca:	231c      	movs	r3, #28
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	b298      	uxth	r0, r3
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fa      	adds	r2, r7, r3
 80051da:	231e      	movs	r3, #30
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	18d3      	adds	r3, r2, r3
 80051e4:	b299      	uxth	r1, r3
 80051e6:	2334      	movs	r3, #52	; 0x34
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	001a      	movs	r2, r3
 80051ee:	f7fe ff53 	bl	8004098 <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 80051f2:	231c      	movs	r3, #28
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	2207      	movs	r2, #7
 80051fa:	4013      	ands	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b07      	cmp	r3, #7
 8005200:	d102      	bne.n	8005208 <Paint_DrawChar+0x16c>
				ptr++;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3301      	adds	r3, #1
 8005206:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 8005208:	211c      	movs	r1, #28
 800520a:	187b      	adds	r3, r7, r1
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	187b      	adds	r3, r7, r1
 8005210:	3201      	adds	r2, #1
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	889b      	ldrh	r3, [r3, #4]
 8005218:	221c      	movs	r2, #28
 800521a:	18ba      	adds	r2, r7, r2
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d200      	bcs.n	8005224 <Paint_DrawChar+0x188>
 8005222:	e785      	b.n	8005130 <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	889b      	ldrh	r3, [r3, #4]
 8005228:	2207      	movs	r2, #7
 800522a:	4013      	ands	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <Paint_DrawChar+0x19c>
			ptr++;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3301      	adds	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8005238:	211e      	movs	r1, #30
 800523a:	187b      	adds	r3, r7, r1
 800523c:	881a      	ldrh	r2, [r3, #0]
 800523e:	187b      	adds	r3, r7, r1
 8005240:	3201      	adds	r2, #1
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	88db      	ldrh	r3, [r3, #6]
 8005248:	221e      	movs	r2, #30
 800524a:	18ba      	adds	r2, r7, r2
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d200      	bcs.n	8005254 <Paint_DrawChar+0x1b8>
 8005252:	e768      	b.n	8005126 <Paint_DrawChar+0x8a>
	} // Write all
}
 8005254:	46bd      	mov	sp, r7
 8005256:	b008      	add	sp, #32
 8005258:	bdb0      	pop	{r4, r5, r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	200007d4 	.word	0x200007d4
 8005260:	0801321c 	.word	0x0801321c

08005264 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60ba      	str	r2, [r7, #8]
 800526c:	607b      	str	r3, [r7, #4]
 800526e:	240e      	movs	r4, #14
 8005270:	193b      	adds	r3, r7, r4
 8005272:	1c02      	adds	r2, r0, #0
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	200c      	movs	r0, #12
 8005278:	183b      	adds	r3, r7, r0
 800527a:	1c0a      	adds	r2, r1, #0
 800527c:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 800527e:	2316      	movs	r3, #22
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	0021      	movs	r1, r4
 8005284:	187a      	adds	r2, r7, r1
 8005286:	8812      	ldrh	r2, [r2, #0]
 8005288:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 800528a:	2314      	movs	r3, #20
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	183a      	adds	r2, r7, r0
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8005294:	4b30      	ldr	r3, [pc, #192]	; (8005358 <Paint_DrawString_EN+0xf4>)
 8005296:	889b      	ldrh	r3, [r3, #4]
 8005298:	187a      	adds	r2, r7, r1
 800529a:	8812      	ldrh	r2, [r2, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d805      	bhi.n	80052ac <Paint_DrawString_EN+0x48>
 80052a0:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <Paint_DrawString_EN+0xf4>)
 80052a2:	88db      	ldrh	r3, [r3, #6]
 80052a4:	183a      	adds	r2, r7, r0
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d94e      	bls.n	800534a <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80052ac:	4b2b      	ldr	r3, [pc, #172]	; (800535c <Paint_DrawString_EN+0xf8>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f00b fb64 	bl	801097c <puts>
		return;
 80052b4:	e04d      	b.n	8005352 <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 80052b6:	2116      	movs	r1, #22
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	8892      	ldrh	r2, [r2, #4]
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	4a25      	ldr	r2, [pc, #148]	; (8005358 <Paint_DrawString_EN+0xf4>)
 80052c4:	8892      	ldrh	r2, [r2, #4]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	dd0c      	ble.n	80052e4 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	220e      	movs	r2, #14
 80052ce:	18ba      	adds	r2, r7, r2
 80052d0:	8812      	ldrh	r2, [r2, #0]
 80052d2:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	88d9      	ldrh	r1, [r3, #6]
 80052d8:	2214      	movs	r2, #20
 80052da:	18bb      	adds	r3, r7, r2
 80052dc:	18ba      	adds	r2, r7, r2
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	188a      	adds	r2, r1, r2
 80052e2:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80052e4:	2114      	movs	r1, #20
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	88d2      	ldrh	r2, [r2, #6]
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <Paint_DrawString_EN+0xf4>)
 80052f2:	88d2      	ldrh	r2, [r2, #6]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	dd0a      	ble.n	800530e <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 80052f8:	2316      	movs	r3, #22
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	220e      	movs	r2, #14
 80052fe:	18ba      	adds	r2, r7, r2
 8005300:	8812      	ldrh	r2, [r2, #0]
 8005302:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 8005304:	187b      	adds	r3, r7, r1
 8005306:	220c      	movs	r2, #12
 8005308:	18ba      	adds	r2, r7, r2
 800530a:	8812      	ldrh	r2, [r2, #0]
 800530c:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	687c      	ldr	r4, [r7, #4]
 8005314:	2314      	movs	r3, #20
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	8819      	ldrh	r1, [r3, #0]
 800531a:	2516      	movs	r5, #22
 800531c:	197b      	adds	r3, r7, r5
 800531e:	8818      	ldrh	r0, [r3, #0]
 8005320:	232c      	movs	r3, #44	; 0x2c
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	2328      	movs	r3, #40	; 0x28
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	0023      	movs	r3, r4
 8005332:	f7ff feb3 	bl	800509c <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3301      	adds	r3, #1
 800533a:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8899      	ldrh	r1, [r3, #4]
 8005340:	197b      	adds	r3, r7, r5
 8005342:	197a      	adds	r2, r7, r5
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	188a      	adds	r2, r1, r2
 8005348:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1b1      	bne.n	80052b6 <Paint_DrawString_EN+0x52>
	}
}
 8005352:	46bd      	mov	sp, r7
 8005354:	b006      	add	sp, #24
 8005356:	bdb0      	pop	{r4, r5, r7, pc}
 8005358:	200007d4 	.word	0x200007d4
 800535c:	0801325c 	.word	0x0801325c

08005360 <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8005360:	b5b0      	push	{r4, r5, r7, lr}
 8005362:	4c6b      	ldr	r4, [pc, #428]	; (8005510 <Paint_DrawNum+0x1b0>)
 8005364:	44a5      	add	sp, r4
 8005366:	af02      	add	r7, sp, #8
 8005368:	60ba      	str	r2, [r7, #8]
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	4b69      	ldr	r3, [pc, #420]	; (8005514 <Paint_DrawNum+0x1b4>)
 800536e:	2286      	movs	r2, #134	; 0x86
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	4694      	mov	ip, r2
 8005374:	44bc      	add	ip, r7
 8005376:	4463      	add	r3, ip
 8005378:	1c02      	adds	r2, r0, #0
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	4b66      	ldr	r3, [pc, #408]	; (8005518 <Paint_DrawNum+0x1b8>)
 800537e:	2286      	movs	r2, #134	; 0x86
 8005380:	0092      	lsls	r2, r2, #2
 8005382:	4694      	mov	ip, r2
 8005384:	44bc      	add	ip, r7
 8005386:	4463      	add	r3, ip
 8005388:	1c0a      	adds	r2, r1, #0
 800538a:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 800538c:	4b63      	ldr	r3, [pc, #396]	; (800551c <Paint_DrawNum+0x1bc>)
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2200      	movs	r2, #0
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	2385      	movs	r3, #133	; 0x85
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2200      	movs	r2, #0
 800539c:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 800539e:	4b60      	ldr	r3, [pc, #384]	; (8005520 <Paint_DrawNum+0x1c0>)
 80053a0:	2286      	movs	r2, #134	; 0x86
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	4694      	mov	ip, r2
 80053a6:	44bc      	add	ip, r7
 80053a8:	4463      	add	r3, ip
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	22fb      	movs	r2, #251	; 0xfb
 80053b2:	2100      	movs	r1, #0
 80053b4:	0018      	movs	r0, r3
 80053b6:	f00b f9a5 	bl	8010704 <memset>
 80053ba:	4b5a      	ldr	r3, [pc, #360]	; (8005524 <Paint_DrawNum+0x1c4>)
 80053bc:	2286      	movs	r2, #134	; 0x86
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	4694      	mov	ip, r2
 80053c2:	44bc      	add	ip, r7
 80053c4:	4463      	add	r3, ip
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	22fb      	movs	r2, #251	; 0xfb
 80053ce:	2100      	movs	r1, #0
 80053d0:	0018      	movs	r0, r3
 80053d2:	f00b f997 	bl	8010704 <memset>
	uint8_t *pStr = Str_Array;
 80053d6:	2388      	movs	r3, #136	; 0x88
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2284      	movs	r2, #132	; 0x84
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	18ba      	adds	r2, r7, r2
 80053e2:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80053e4:	4b50      	ldr	r3, [pc, #320]	; (8005528 <Paint_DrawNum+0x1c8>)
 80053e6:	889b      	ldrh	r3, [r3, #4]
 80053e8:	4a4a      	ldr	r2, [pc, #296]	; (8005514 <Paint_DrawNum+0x1b4>)
 80053ea:	2186      	movs	r1, #134	; 0x86
 80053ec:	0089      	lsls	r1, r1, #2
 80053ee:	468c      	mov	ip, r1
 80053f0:	44bc      	add	ip, r7
 80053f2:	4462      	add	r2, ip
 80053f4:	8812      	ldrh	r2, [r2, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d80a      	bhi.n	8005410 <Paint_DrawNum+0xb0>
 80053fa:	4b4b      	ldr	r3, [pc, #300]	; (8005528 <Paint_DrawNum+0x1c8>)
 80053fc:	88db      	ldrh	r3, [r3, #6]
 80053fe:	4a46      	ldr	r2, [pc, #280]	; (8005518 <Paint_DrawNum+0x1b8>)
 8005400:	2186      	movs	r1, #134	; 0x86
 8005402:	0089      	lsls	r1, r1, #2
 8005404:	468c      	mov	ip, r1
 8005406:	44bc      	add	ip, r7
 8005408:	4462      	add	r2, ip
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d927      	bls.n	8005460 <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8005410:	4b46      	ldr	r3, [pc, #280]	; (800552c <Paint_DrawNum+0x1cc>)
 8005412:	0018      	movs	r0, r3
 8005414:	f00b fab2 	bl	801097c <puts>
 8005418:	e074      	b.n	8005504 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	210a      	movs	r1, #10
 800541e:	0018      	movs	r0, r3
 8005420:	f7fa ffe8 	bl	80003f4 <__aeabi_idivmod>
 8005424:	000b      	movs	r3, r1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	483c      	ldr	r0, [pc, #240]	; (800551c <Paint_DrawNum+0x1bc>)
 800542a:	183b      	adds	r3, r7, r0
 800542c:	2100      	movs	r1, #0
 800542e:	5e5b      	ldrsh	r3, [r3, r1]
 8005430:	3230      	adds	r2, #48	; 0x30
 8005432:	b2d1      	uxtb	r1, r2
 8005434:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <Paint_DrawNum+0x1c4>)
 8005436:	2486      	movs	r4, #134	; 0x86
 8005438:	00a4      	lsls	r4, r4, #2
 800543a:	46a4      	mov	ip, r4
 800543c:	44bc      	add	ip, r7
 800543e:	4462      	add	r2, ip
 8005440:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8005442:	183b      	adds	r3, r7, r0
 8005444:	2200      	movs	r2, #0
 8005446:	5e9b      	ldrsh	r3, [r3, r2]
 8005448:	b29b      	uxth	r3, r3
 800544a:	3301      	adds	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	183b      	adds	r3, r7, r0
 8005450:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	210a      	movs	r1, #10
 8005456:	0018      	movs	r0, r3
 8005458:	f7fa fee6 	bl	8000228 <__divsi3>
 800545c:	0003      	movs	r3, r0
 800545e:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1d9      	bne.n	800541a <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 8005466:	e027      	b.n	80054b8 <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8005468:	482c      	ldr	r0, [pc, #176]	; (800551c <Paint_DrawNum+0x1bc>)
 800546a:	183b      	adds	r3, r7, r0
 800546c:	2200      	movs	r2, #0
 800546e:	5e9b      	ldrsh	r3, [r3, r2]
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	2485      	movs	r4, #133	; 0x85
 8005474:	00a4      	lsls	r4, r4, #2
 8005476:	193b      	adds	r3, r7, r4
 8005478:	2100      	movs	r1, #0
 800547a:	5e5b      	ldrsh	r3, [r3, r1]
 800547c:	4929      	ldr	r1, [pc, #164]	; (8005524 <Paint_DrawNum+0x1c4>)
 800547e:	2586      	movs	r5, #134	; 0x86
 8005480:	00ad      	lsls	r5, r5, #2
 8005482:	46ac      	mov	ip, r5
 8005484:	44bc      	add	ip, r7
 8005486:	4461      	add	r1, ip
 8005488:	5c89      	ldrb	r1, [r1, r2]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <Paint_DrawNum+0x1c0>)
 800548c:	2586      	movs	r5, #134	; 0x86
 800548e:	00ad      	lsls	r5, r5, #2
 8005490:	46ac      	mov	ip, r5
 8005492:	44bc      	add	ip, r7
 8005494:	4462      	add	r2, ip
 8005496:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 8005498:	193b      	adds	r3, r7, r4
 800549a:	2200      	movs	r2, #0
 800549c:	5e9b      	ldrsh	r3, [r3, r2]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3301      	adds	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	193b      	adds	r3, r7, r4
 80054a6:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 80054a8:	183b      	adds	r3, r7, r0
 80054aa:	2200      	movs	r2, #0
 80054ac:	5e9b      	ldrsh	r3, [r3, r2]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	183b      	adds	r3, r7, r0
 80054b6:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 80054b8:	4b18      	ldr	r3, [pc, #96]	; (800551c <Paint_DrawNum+0x1bc>)
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	5e9b      	ldrsh	r3, [r3, r2]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dcd1      	bgt.n	8005468 <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 80054c4:	687c      	ldr	r4, [r7, #4]
 80054c6:	2384      	movs	r3, #132	; 0x84
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <Paint_DrawNum+0x1b8>)
 80054d0:	2186      	movs	r1, #134	; 0x86
 80054d2:	0089      	lsls	r1, r1, #2
 80054d4:	468c      	mov	ip, r1
 80054d6:	44bc      	add	ip, r7
 80054d8:	4463      	add	r3, ip
 80054da:	8819      	ldrh	r1, [r3, #0]
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <Paint_DrawNum+0x1b4>)
 80054de:	2086      	movs	r0, #134	; 0x86
 80054e0:	0080      	lsls	r0, r0, #2
 80054e2:	4684      	mov	ip, r0
 80054e4:	44bc      	add	ip, r7
 80054e6:	4463      	add	r3, ip
 80054e8:	8818      	ldrh	r0, [r3, #0]
 80054ea:	238b      	movs	r3, #139	; 0x8b
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	238a      	movs	r3, #138	; 0x8a
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	0023      	movs	r3, r4
 8005500:	f7ff feb0 	bl	8005264 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 8005504:	46bd      	mov	sp, r7
 8005506:	2386      	movs	r3, #134	; 0x86
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	449d      	add	sp, r3
 800550c:	bdb0      	pop	{r4, r5, r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	fffffde0 	.word	0xfffffde0
 8005514:	fffffdf6 	.word	0xfffffdf6
 8005518:	fffffdf4 	.word	0xfffffdf4
 800551c:	00000216 	.word	0x00000216
 8005520:	fffffef8 	.word	0xfffffef8
 8005524:	fffffdf8 	.word	0xfffffdf8
 8005528:	200007d4 	.word	0x200007d4
 800552c:	080132a0 	.word	0x080132a0

08005530 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	00d9      	lsls	r1, r3, #3
 8005538:	23a0      	movs	r3, #160	; 0xa0
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	2201      	movs	r2, #1
 800553e:	0018      	movs	r0, r3
 8005540:	f001 fea1 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8005544:	20c8      	movs	r0, #200	; 0xc8
 8005546:	f000 fb03 	bl	8005b50 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	00d9      	lsls	r1, r3, #3
 800554e:	23a0      	movs	r3, #160	; 0xa0
 8005550:	05db      	lsls	r3, r3, #23
 8005552:	2200      	movs	r2, #0
 8005554:	0018      	movs	r0, r3
 8005556:	f001 fe96 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800555a:	2002      	movs	r0, #2
 800555c:	f000 faf8 	bl	8005b50 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	00d9      	lsls	r1, r3, #3
 8005564:	23a0      	movs	r3, #160	; 0xa0
 8005566:	05db      	lsls	r3, r3, #23
 8005568:	2201      	movs	r2, #1
 800556a:	0018      	movs	r0, r3
 800556c:	f001 fe8b 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8005570:	20c8      	movs	r0, #200	; 0xc8
 8005572:	f000 faed 	bl	8005b50 <HAL_Delay>
}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	0002      	movs	r2, r0
 8005584:	1dfb      	adds	r3, r7, #7
 8005586:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	0099      	lsls	r1, r3, #2
 800558c:	23a0      	movs	r3, #160	; 0xa0
 800558e:	05db      	lsls	r3, r3, #23
 8005590:	2200      	movs	r2, #0
 8005592:	0018      	movs	r0, r3
 8005594:	f001 fe77 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	0059      	lsls	r1, r3, #1
 800559c:	23a0      	movs	r3, #160	; 0xa0
 800559e:	05db      	lsls	r3, r3, #23
 80055a0:	2200      	movs	r2, #0
 80055a2:	0018      	movs	r0, r3
 80055a4:	f001 fe6f 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7fe fcc5 	bl	8003f3c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	0059      	lsls	r1, r3, #1
 80055b6:	23a0      	movs	r3, #160	; 0xa0
 80055b8:	05db      	lsls	r3, r3, #23
 80055ba:	2201      	movs	r2, #1
 80055bc:	0018      	movs	r0, r3
 80055be:	f001 fe62 	bl	8007286 <HAL_GPIO_WritePin>
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b002      	add	sp, #8
 80055c8:	bd80      	pop	{r7, pc}

080055ca <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	0002      	movs	r2, r0
 80055d2:	1dfb      	adds	r3, r7, #7
 80055d4:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	0099      	lsls	r1, r3, #2
 80055da:	23a0      	movs	r3, #160	; 0xa0
 80055dc:	05db      	lsls	r3, r3, #23
 80055de:	2201      	movs	r2, #1
 80055e0:	0018      	movs	r0, r3
 80055e2:	f001 fe50 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	0059      	lsls	r1, r3, #1
 80055ea:	23a0      	movs	r3, #160	; 0xa0
 80055ec:	05db      	lsls	r3, r3, #23
 80055ee:	2200      	movs	r2, #0
 80055f0:	0018      	movs	r0, r3
 80055f2:	f001 fe48 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fe fc9e 	bl	8003f3c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	0059      	lsls	r1, r3, #1
 8005604:	23a0      	movs	r3, #160	; 0xa0
 8005606:	05db      	lsls	r3, r3, #23
 8005608:	2201      	movs	r2, #1
 800560a:	0018      	movs	r0, r3
 800560c:	f001 fe3b 	bl	8007286 <HAL_GPIO_WritePin>
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}

08005618 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <EPD_1IN54_V2_ReadBusy+0x38>)
 800561e:	0018      	movs	r0, r3
 8005620:	f00b f9ac 	bl	801097c <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8005624:	e002      	b.n	800562c <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8005626:	2064      	movs	r0, #100	; 0x64
 8005628:	f000 fa92 	bl	8005b50 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	23a0      	movs	r3, #160	; 0xa0
 8005632:	05db      	lsls	r3, r3, #23
 8005634:	0011      	movs	r1, r2
 8005636:	0018      	movs	r0, r3
 8005638:	f001 fe08 	bl	800724c <HAL_GPIO_ReadPin>
 800563c:	0003      	movs	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d0f1      	beq.n	8005626 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8005644:	0018      	movs	r0, r3
 8005646:	f00b f999 	bl	801097c <puts>
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	080132e8 	.word	0x080132e8
 8005654:	08013300 	.word	0x08013300

08005658 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800565c:	2022      	movs	r0, #34	; 0x22
 800565e:	f7ff ff8d 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 8005662:	20f7      	movs	r0, #247	; 0xf7
 8005664:	f7ff ffb1 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8005668:	2020      	movs	r0, #32
 800566a:	f7ff ff87 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800566e:	f7ff ffd3 	bl	8005618 <EPD_1IN54_V2_ReadBusy>
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800567c:	2022      	movs	r0, #34	; 0x22
 800567e:	f7ff ff7d 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 8005682:	20ff      	movs	r0, #255	; 0xff
 8005684:	f7ff ffa1 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8005688:	2020      	movs	r0, #32
 800568a:	f7ff ff77 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800568e:	f7ff ffc3 	bl	8005618 <EPD_1IN54_V2_ReadBusy>
}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800569c:	f7ff ff48 	bl	8005530 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 80056a0:	f7ff ffba 	bl	8005618 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 80056a4:	2012      	movs	r0, #18
 80056a6:	f7ff ff69 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80056aa:	f7ff ffb5 	bl	8005618 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 80056ae:	2001      	movs	r0, #1
 80056b0:	f7ff ff64 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 80056b4:	20c7      	movs	r0, #199	; 0xc7
 80056b6:	f7ff ff88 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80056ba:	2000      	movs	r0, #0
 80056bc:	f7ff ff85 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 80056c0:	2001      	movs	r0, #1
 80056c2:	f7ff ff82 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 80056c6:	2011      	movs	r0, #17
 80056c8:	f7ff ff58 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7ff ff7c 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 80056d2:	2044      	movs	r0, #68	; 0x44
 80056d4:	f7ff ff52 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 80056d8:	2000      	movs	r0, #0
 80056da:	f7ff ff76 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 80056de:	2018      	movs	r0, #24
 80056e0:	f7ff ff73 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 80056e4:	2045      	movs	r0, #69	; 0x45
 80056e6:	f7ff ff49 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 80056ea:	20c7      	movs	r0, #199	; 0xc7
 80056ec:	f7ff ff6d 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7ff ff6a 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff ff67 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80056fc:	2000      	movs	r0, #0
 80056fe:	f7ff ff64 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8005702:	203c      	movs	r0, #60	; 0x3c
 8005704:	f7ff ff3a 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8005708:	2001      	movs	r0, #1
 800570a:	f7ff ff5e 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800570e:	2018      	movs	r0, #24
 8005710:	f7ff ff34 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8005714:	2080      	movs	r0, #128	; 0x80
 8005716:	f7ff ff58 	bl	80055ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800571a:	2022      	movs	r0, #34	; 0x22
 800571c:	f7ff ff2e 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 8005720:	20b1      	movs	r0, #177	; 0xb1
 8005722:	f7ff ff52 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8005726:	2020      	movs	r0, #32
 8005728:	f7ff ff28 	bl	800557c <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 800572c:	204e      	movs	r0, #78	; 0x4e
 800572e:	f7ff ff25 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8005732:	2000      	movs	r0, #0
 8005734:	f7ff ff49 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8005738:	204f      	movs	r0, #79	; 0x4f
 800573a:	f7ff ff1f 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800573e:	20c7      	movs	r0, #199	; 0xc7
 8005740:	f7ff ff43 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8005744:	2000      	movs	r0, #0
 8005746:	f7ff ff40 	bl	80055ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 800574a:	f7ff ff65 	bl	8005618 <EPD_1IN54_V2_ReadBusy>
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800575a:	1cbb      	adds	r3, r7, #2
 800575c:	2219      	movs	r2, #25
 800575e:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8005760:	003b      	movs	r3, r7
 8005762:	22c8      	movs	r2, #200	; 0xc8
 8005764:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 8005766:	2024      	movs	r0, #36	; 0x24
 8005768:	f7ff ff08 	bl	800557c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800576c:	1dbb      	adds	r3, r7, #6
 800576e:	2200      	movs	r2, #0
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e016      	b.n	80057a2 <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e007      	b.n	800578c <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 800577c:	20ff      	movs	r0, #255	; 0xff
 800577e:	f7ff ff24 	bl	80055ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	3201      	adds	r2, #1
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	1d3a      	adds	r2, r7, #4
 800578e:	1cbb      	adds	r3, r7, #2
 8005790:	8812      	ldrh	r2, [r2, #0]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d3f1      	bcc.n	800577c <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	1dbb      	adds	r3, r7, #6
 800579e:	3201      	adds	r2, #1
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	1dba      	adds	r2, r7, #6
 80057a4:	003b      	movs	r3, r7
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3e2      	bcc.n	8005774 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80057ae:	f7ff ff53 	bl	8005658 <EPD_1IN54_V2_TurnOnDisplay>
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b002      	add	sp, #8
 80057b8:	bd80      	pop	{r7, pc}

080057ba <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80057ba:	b590      	push	{r4, r7, lr}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80057c2:	2312      	movs	r3, #18
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2219      	movs	r2, #25
 80057c8:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80057ca:	2310      	movs	r3, #16
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	22c8      	movs	r2, #200	; 0xc8
 80057d0:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80057d6:	2024      	movs	r0, #36	; 0x24
 80057d8:	f7ff fed0 	bl	800557c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80057dc:	2316      	movs	r3, #22
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2200      	movs	r2, #0
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e02a      	b.n	800583c <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80057e6:	2314      	movs	r3, #20
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2200      	movs	r2, #0
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e017      	b.n	8005820 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 80057f0:	2414      	movs	r4, #20
 80057f2:	193b      	adds	r3, r7, r4
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	2316      	movs	r3, #22
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2112      	movs	r1, #18
 80057fe:	1879      	adds	r1, r7, r1
 8005800:	8809      	ldrh	r1, [r1, #0]
 8005802:	434b      	muls	r3, r1
 8005804:	18d3      	adds	r3, r2, r3
 8005806:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	18d3      	adds	r3, r2, r3
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff feda 	bl	80055ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005816:	193b      	adds	r3, r7, r4
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	193b      	adds	r3, r7, r4
 800581c:	3201      	adds	r2, #1
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	2314      	movs	r3, #20
 8005822:	18fa      	adds	r2, r7, r3
 8005824:	2312      	movs	r3, #18
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d3df      	bcc.n	80057f0 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8005830:	2116      	movs	r1, #22
 8005832:	187b      	adds	r3, r7, r1
 8005834:	881a      	ldrh	r2, [r3, #0]
 8005836:	187b      	adds	r3, r7, r1
 8005838:	3201      	adds	r2, #1
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	2316      	movs	r3, #22
 800583e:	18fa      	adds	r2, r7, r3
 8005840:	2310      	movs	r3, #16
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	8812      	ldrh	r2, [r2, #0]
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3cc      	bcc.n	80057e6 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800584c:	f7ff ff04 	bl	8005658 <EPD_1IN54_V2_TurnOnDisplay>
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b007      	add	sp, #28
 8005856:	bd90      	pop	{r4, r7, pc}

08005858 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8005860:	230e      	movs	r3, #14
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	2219      	movs	r2, #25
 8005866:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8005868:	230c      	movs	r3, #12
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	22c8      	movs	r2, #200	; 0xc8
 800586e:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 8005874:	2024      	movs	r0, #36	; 0x24
 8005876:	f7ff fe81 	bl	800557c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800587a:	2316      	movs	r3, #22
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2200      	movs	r2, #0
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e02a      	b.n	80058da <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8005884:	2314      	movs	r3, #20
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2200      	movs	r2, #0
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e017      	b.n	80058be <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 800588e:	2414      	movs	r4, #20
 8005890:	193b      	adds	r3, r7, r4
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	2316      	movs	r3, #22
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	210e      	movs	r1, #14
 800589c:	1879      	adds	r1, r7, r1
 800589e:	8809      	ldrh	r1, [r1, #0]
 80058a0:	434b      	muls	r3, r1
 80058a2:	18d3      	adds	r3, r2, r3
 80058a4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	18d3      	adds	r3, r2, r3
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff fe8b 	bl	80055ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80058b4:	193b      	adds	r3, r7, r4
 80058b6:	881a      	ldrh	r2, [r3, #0]
 80058b8:	193b      	adds	r3, r7, r4
 80058ba:	3201      	adds	r2, #1
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	2314      	movs	r3, #20
 80058c0:	18fa      	adds	r2, r7, r3
 80058c2:	230e      	movs	r3, #14
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d3df      	bcc.n	800588e <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 80058ce:	2116      	movs	r1, #22
 80058d0:	187b      	adds	r3, r7, r1
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	187b      	adds	r3, r7, r1
 80058d6:	3201      	adds	r2, #1
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	2316      	movs	r3, #22
 80058dc:	18fa      	adds	r2, r7, r3
 80058de:	230c      	movs	r3, #12
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	8812      	ldrh	r2, [r2, #0]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3cc      	bcc.n	8005884 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 80058ea:	2026      	movs	r0, #38	; 0x26
 80058ec:	f7ff fe46 	bl	800557c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80058f0:	2312      	movs	r3, #18
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2200      	movs	r2, #0
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e02a      	b.n	8005950 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 80058fa:	2310      	movs	r3, #16
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e017      	b.n	8005934 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8005904:	2410      	movs	r4, #16
 8005906:	193b      	adds	r3, r7, r4
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	2312      	movs	r3, #18
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	210e      	movs	r1, #14
 8005912:	1879      	adds	r1, r7, r1
 8005914:	8809      	ldrh	r1, [r1, #0]
 8005916:	434b      	muls	r3, r1
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	18d3      	adds	r3, r2, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff fe50 	bl	80055ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800592a:	193b      	adds	r3, r7, r4
 800592c:	881a      	ldrh	r2, [r3, #0]
 800592e:	193b      	adds	r3, r7, r4
 8005930:	3201      	adds	r2, #1
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	2310      	movs	r3, #16
 8005936:	18fa      	adds	r2, r7, r3
 8005938:	230e      	movs	r3, #14
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	8812      	ldrh	r2, [r2, #0]
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3df      	bcc.n	8005904 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8005944:	2112      	movs	r1, #18
 8005946:	187b      	adds	r3, r7, r1
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	187b      	adds	r3, r7, r1
 800594c:	3201      	adds	r2, #1
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	2312      	movs	r3, #18
 8005952:	18fa      	adds	r2, r7, r3
 8005954:	230c      	movs	r3, #12
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d3cc      	bcc.n	80058fa <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8005960:	f7ff fe8a 	bl	8005678 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b007      	add	sp, #28
 800596a:	bd90      	pop	{r4, r7, pc}

0800596c <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8005974:	2312      	movs	r3, #18
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	2219      	movs	r2, #25
 800597a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800597c:	2310      	movs	r3, #16
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	22c8      	movs	r2, #200	; 0xc8
 8005982:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	00d9      	lsls	r1, r3, #3
 8005988:	23a0      	movs	r3, #160	; 0xa0
 800598a:	05db      	lsls	r3, r3, #23
 800598c:	2200      	movs	r2, #0
 800598e:	0018      	movs	r0, r3
 8005990:	f001 fc79 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8005994:	200a      	movs	r0, #10
 8005996:	f000 f8db 	bl	8005b50 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	00d9      	lsls	r1, r3, #3
 800599e:	23a0      	movs	r3, #160	; 0xa0
 80059a0:	05db      	lsls	r3, r3, #23
 80059a2:	2201      	movs	r2, #1
 80059a4:	0018      	movs	r0, r3
 80059a6:	f001 fc6e 	bl	8007286 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80059aa:	200a      	movs	r0, #10
 80059ac:	f000 f8d0 	bl	8005b50 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80059b0:	203c      	movs	r0, #60	; 0x3c
 80059b2:	f7ff fde3 	bl	800557c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80059b6:	2080      	movs	r0, #128	; 0x80
 80059b8:	f7ff fe07 	bl	80055ca <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80059c0:	2024      	movs	r0, #36	; 0x24
 80059c2:	f7ff fddb 	bl	800557c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80059c6:	2316      	movs	r3, #22
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	2200      	movs	r2, #0
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	e02a      	b.n	8005a26 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 80059d0:	2314      	movs	r3, #20
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	2200      	movs	r2, #0
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e017      	b.n	8005a0a <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 80059da:	2414      	movs	r4, #20
 80059dc:	193b      	adds	r3, r7, r4
 80059de:	881a      	ldrh	r2, [r3, #0]
 80059e0:	2316      	movs	r3, #22
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	2112      	movs	r1, #18
 80059e8:	1879      	adds	r1, r7, r1
 80059ea:	8809      	ldrh	r1, [r1, #0]
 80059ec:	434b      	muls	r3, r1
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff fde5 	bl	80055ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8005a00:	193b      	adds	r3, r7, r4
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	193b      	adds	r3, r7, r4
 8005a06:	3201      	adds	r2, #1
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	2314      	movs	r3, #20
 8005a0c:	18fa      	adds	r2, r7, r3
 8005a0e:	2312      	movs	r3, #18
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	8812      	ldrh	r2, [r2, #0]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3df      	bcc.n	80059da <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 8005a1a:	2116      	movs	r1, #22
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	3201      	adds	r2, #1
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	2316      	movs	r3, #22
 8005a28:	18fa      	adds	r2, r7, r3
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	8812      	ldrh	r2, [r2, #0]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3cc      	bcc.n	80059d0 <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8005a36:	f7ff fe1f 	bl	8005678 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b007      	add	sp, #28
 8005a40:	bd90      	pop	{r4, r7, pc}
	...

08005a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a4a:	1dfb      	adds	r3, r7, #7
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_Init+0x3c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <HAL_Init+0x3c>)
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	0049      	lsls	r1, r1, #1
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f000 f810 	bl	8005a84 <HAL_InitTick>
 8005a64:	1e03      	subs	r3, r0, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005a68:	1dfb      	adds	r3, r7, #7
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	e001      	b.n	8005a74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005a70:	f00a fada 	bl	8010028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	781b      	ldrb	r3, [r3, #0]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b002      	add	sp, #8
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40022000 	.word	0x40022000

08005a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <HAL_InitTick+0x88>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02b      	beq.n	8005af4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <HAL_InitTick+0x8c>)
 8005a9e:	681c      	ldr	r4, [r3, #0]
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <HAL_InitTick+0x88>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	23fa      	movs	r3, #250	; 0xfa
 8005aa8:	0098      	lsls	r0, r3, #2
 8005aaa:	f7fa fb33 	bl	8000114 <__udivsi3>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	0020      	movs	r0, r4
 8005ab4:	f7fa fb2e 	bl	8000114 <__udivsi3>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	0018      	movs	r0, r3
 8005abc:	f001 f803 	bl	8006ac6 <HAL_SYSTICK_Config>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d112      	bne.n	8005aea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d80a      	bhi.n	8005ae0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	2301      	movs	r3, #1
 8005ace:	425b      	negs	r3, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f000 ffd2 	bl	8006a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <HAL_InitTick+0x90>)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e00d      	b.n	8005afc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005ae0:	230f      	movs	r3, #15
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e008      	b.n	8005afc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005aea:	230f      	movs	r3, #15
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e003      	b.n	8005afc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005af4:	230f      	movs	r3, #15
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005afc:	230f      	movs	r3, #15
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	781b      	ldrb	r3, [r3, #0]
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b005      	add	sp, #20
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	20000024 	.word	0x20000024
 8005b10:	20000080 	.word	0x20000080
 8005b14:	20000020 	.word	0x20000020

08005b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_IncTick+0x1c>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	001a      	movs	r2, r3
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_IncTick+0x20>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	18d2      	adds	r2, r2, r3
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_IncTick+0x20>)
 8005b2a:	601a      	str	r2, [r3, #0]
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	20000024 	.word	0x20000024
 8005b38:	200007ec 	.word	0x200007ec

08005b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b40:	4b02      	ldr	r3, [pc, #8]	; (8005b4c <HAL_GetTick+0x10>)
 8005b42:	681b      	ldr	r3, [r3, #0]
}
 8005b44:	0018      	movs	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200007ec 	.word	0x200007ec

08005b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b58:	f7ff fff0 	bl	8005b3c <HAL_GetTick>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	d005      	beq.n	8005b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_Delay+0x44>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	001a      	movs	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	f7ff ffe0 	bl	8005b3c <HAL_GetTick>
 8005b7c:	0002      	movs	r2, r0
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d8f7      	bhi.n	8005b78 <HAL_Delay+0x28>
  {
  }
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b004      	add	sp, #16
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000024 	.word	0x20000024

08005b98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_SuspendTick+0x18>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_SuspendTick+0x18>)
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	e000e010 	.word	0xe000e010

08005bb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_ResumeTick+0x18>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <HAL_ResumeTick+0x18>)
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	e000e010 	.word	0xe000e010

08005bd0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b002      	add	sp, #8
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	fffff9ff 	.word	0xfffff9ff

08005bfc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a05      	ldr	r2, [pc, #20]	; (8005c20 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b002      	add	sp, #8
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	fe3fffff 	.word	0xfe3fffff

08005c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	23e0      	movs	r3, #224	; 0xe0
 8005c32:	045b      	lsls	r3, r3, #17
 8005c34:	4013      	ands	r3, r2
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	2104      	movs	r1, #4
 8005c52:	400a      	ands	r2, r1
 8005c54:	2107      	movs	r1, #7
 8005c56:	4091      	lsls	r1, r2
 8005c58:	000a      	movs	r2, r1
 8005c5a:	43d2      	mvns	r2, r2
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2104      	movs	r1, #4
 8005c62:	400b      	ands	r3, r1
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4099      	lsls	r1, r3
 8005c68:	000b      	movs	r3, r1
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b004      	add	sp, #16
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	23c0      	movs	r3, #192	; 0xc0
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b002      	add	sp, #8
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	211f      	movs	r1, #31
 8005cae:	400a      	ands	r2, r1
 8005cb0:	210f      	movs	r1, #15
 8005cb2:	4091      	lsls	r1, r2
 8005cb4:	000a      	movs	r2, r1
 8005cb6:	43d2      	mvns	r2, r2
 8005cb8:	401a      	ands	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0e9b      	lsrs	r3, r3, #26
 8005cbe:	210f      	movs	r1, #15
 8005cc0:	4019      	ands	r1, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	201f      	movs	r0, #31
 8005cc6:	4003      	ands	r3, r0
 8005cc8:	4099      	lsls	r1, r3
 8005cca:	000b      	movs	r3, r1
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b004      	add	sp, #16
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	035b      	lsls	r3, r3, #13
 8005cec:	0b5b      	lsrs	r3, r3, #13
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	0352      	lsls	r2, r2, #13
 8005d0e:	0b52      	lsrs	r2, r2, #13
 8005d10:	43d2      	mvns	r2, r2
 8005d12:	401a      	ands	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	0212      	lsls	r2, r2, #8
 8005d34:	43d2      	mvns	r2, r2
 8005d36:	401a      	ands	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	400b      	ands	r3, r1
 8005d40:	4904      	ldr	r1, [pc, #16]	; (8005d54 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005d42:	400b      	ands	r3, r1
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	07ffff00 	.word	0x07ffff00

08005d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <LL_ADC_EnableInternalRegulator+0x24>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	0552      	lsls	r2, r2, #21
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b002      	add	sp, #8
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	6fffffe8 	.word	0x6fffffe8

08005d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	055b      	lsls	r3, r3, #21
 8005d90:	401a      	ands	r2, r3
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	055b      	lsls	r3, r3, #21
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d101      	bne.n	8005d9e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <LL_ADC_Enable+0x20>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	2201      	movs	r2, #1
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	7fffffe8 	.word	0x7fffffe8

08005dcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4a04      	ldr	r2, [pc, #16]	; (8005dec <LL_ADC_Disable+0x20>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2202      	movs	r2, #2
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	7fffffe8 	.word	0x7fffffe8

08005df0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <LL_ADC_IsEnabled+0x18>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <LL_ADC_IsEnabled+0x1a>
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <LL_ADC_REG_StartConversion+0x20>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	2204      	movs	r2, #4
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	7fffffe8 	.word	0x7fffffe8

08005e38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2204      	movs	r2, #4
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d101      	bne.n	8005e50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	0018      	movs	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b002      	add	sp, #8
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e64:	231f      	movs	r3, #31
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e1ab      	b.n	80061da <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f00a f8f3 	bl	8010078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2254      	movs	r2, #84	; 0x54
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7ff ff6b 	bl	8005d80 <LL_ADC_IsInternalRegulatorEnabled>
 8005eaa:	1e03      	subs	r3, r0, #0
 8005eac:	d114      	bne.n	8005ed8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7ff ff50 	bl	8005d58 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005eb8:	4bca      	ldr	r3, [pc, #808]	; (80061e4 <HAL_ADC_Init+0x388>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	49ca      	ldr	r1, [pc, #808]	; (80061e8 <HAL_ADC_Init+0x38c>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fa f928 	bl	8000114 <__udivsi3>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005eca:	e002      	b.n	8005ed2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f9      	bne.n	8005ecc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7ff ff4f 	bl	8005d80 <LL_ADC_IsInternalRegulatorEnabled>
 8005ee2:	1e03      	subs	r3, r0, #0
 8005ee4:	d10f      	bne.n	8005f06 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	2210      	movs	r2, #16
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005efe:	231f      	movs	r3, #31
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7ff ff94 	bl	8005e38 <LL_ADC_REG_IsConversionOngoing>
 8005f10:	0003      	movs	r3, r0
 8005f12:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	2210      	movs	r2, #16
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d000      	beq.n	8005f20 <HAL_ADC_Init+0xc4>
 8005f1e:	e14f      	b.n	80061c0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <HAL_ADC_Init+0xcc>
 8005f26:	e14b      	b.n	80061c0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2c:	4aaf      	ldr	r2, [pc, #700]	; (80061ec <HAL_ADC_Init+0x390>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2202      	movs	r2, #2
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7ff ff57 	bl	8005df0 <LL_ADC_IsEnabled>
 8005f42:	1e03      	subs	r3, r0, #0
 8005f44:	d151      	bne.n	8005fea <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2218      	movs	r2, #24
 8005f4e:	4393      	bics	r3, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	0f9b      	lsrs	r3, r3, #30
 8005f64:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f6a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8005f70:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8005f76:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8005f7c:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	223c      	movs	r2, #60	; 0x3c
 8005f88:	5c9b      	ldrb	r3, [r3, r2]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d103      	bne.n	8005f96 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2201      	movs	r2, #1
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4a94      	ldr	r2, [pc, #592]	; (80061f0 <HAL_ADC_Init+0x394>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	23c0      	movs	r3, #192	; 0xc0
 8005fb2:	061b      	lsls	r3, r3, #24
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d018      	beq.n	8005fea <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	05db      	lsls	r3, r3, #23
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d012      	beq.n	8005fea <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d00c      	beq.n	8005fea <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005fd0:	4b88      	ldr	r3, [pc, #544]	; (80061f4 <HAL_ADC_Init+0x398>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a88      	ldr	r2, [pc, #544]	; (80061f8 <HAL_ADC_Init+0x39c>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	23f0      	movs	r3, #240	; 0xf0
 8005fe0:	039b      	lsls	r3, r3, #14
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	4b83      	ldr	r3, [pc, #524]	; (80061f4 <HAL_ADC_Init+0x398>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7e1b      	ldrb	r3, [r3, #24]
 8005fee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	7e5b      	ldrb	r3, [r3, #25]
 8005ff4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005ff6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7e9b      	ldrb	r3, [r3, #26]
 8005ffc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005ffe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_ADC_Init+0x1b2>
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	015b      	lsls	r3, r3, #5
 800600c:	e000      	b.n	8006010 <HAL_ADC_Init+0x1b4>
 800600e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006010:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006016:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da04      	bge.n	800602a <HAL_ADC_Init+0x1ce>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	e001      	b.n	800602e <HAL_ADC_Init+0x1d2>
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800602e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	212c      	movs	r1, #44	; 0x2c
 8006034:	5c5b      	ldrb	r3, [r3, r1]
 8006036:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006038:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	5c9b      	ldrb	r3, [r3, r2]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d115      	bne.n	8006076 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7e9b      	ldrb	r3, [r3, #26]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	0252      	lsls	r2, r2, #9
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e00b      	b.n	8006076 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	2220      	movs	r2, #32
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	2201      	movs	r2, #1
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006082:	23e0      	movs	r3, #224	; 0xe0
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800608c:	4313      	orrs	r3, r2
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	4a58      	ldr	r2, [pc, #352]	; (80061fc <HAL_ADC_Init+0x3a0>)
 800609c:	4013      	ands	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	4a53      	ldr	r2, [pc, #332]	; (8006200 <HAL_ADC_Init+0x3a4>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	0019      	movs	r1, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	430a      	orrs	r2, r1
 80060be:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	001a      	movs	r2, r3
 80060ca:	2100      	movs	r1, #0
 80060cc:	f7ff fdb7 	bl	8005c3e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	494a      	ldr	r1, [pc, #296]	; (8006204 <HAL_ADC_Init+0x3a8>)
 80060da:	001a      	movs	r2, r3
 80060dc:	f7ff fdaf 	bl	8005c3e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2110      	movs	r1, #16
 80060f4:	4249      	negs	r1, r1
 80060f6:	430a      	orrs	r2, r1
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
 80060fa:	e03a      	b.n	8006172 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	039b      	lsls	r3, r3, #14
 8006104:	429a      	cmp	r2, r3
 8006106:	d134      	bne.n	8006172 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e00c      	b.n	8006128 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	40da      	lsrs	r2, r3
 8006118:	0013      	movs	r3, r2
 800611a:	220f      	movs	r2, #15
 800611c:	4013      	ands	r3, r2
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d006      	beq.n	8006130 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b07      	cmp	r3, #7
 800612c:	d9ef      	bls.n	800610e <HAL_ADC_Init+0x2b2>
 800612e:	e000      	b.n	8006132 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8006130:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d109      	bne.n	800614c <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2110      	movs	r1, #16
 8006144:	4249      	negs	r1, r1
 8006146:	430a      	orrs	r2, r1
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
 800614a:	e012      	b.n	8006172 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	3b01      	subs	r3, #1
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	221c      	movs	r2, #28
 800615c:	4013      	ands	r3, r2
 800615e:	2210      	movs	r2, #16
 8006160:	4252      	negs	r2, r2
 8006162:	409a      	lsls	r2, r3
 8006164:	0011      	movs	r1, r2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a23      	ldr	r2, [pc, #140]	; (8006208 <HAL_ADC_Init+0x3ac>)
 800617a:	4013      	ands	r3, r2
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	429a      	cmp	r2, r3
 8006180:	d10b      	bne.n	800619a <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618c:	2203      	movs	r2, #3
 800618e:	4393      	bics	r3, r2
 8006190:	2201      	movs	r2, #1
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8006198:	e01c      	b.n	80061d4 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	2212      	movs	r2, #18
 80061a0:	4393      	bics	r3, r2
 80061a2:	2210      	movs	r2, #16
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	2201      	movs	r2, #1
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80061b6:	231f      	movs	r3, #31
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80061be:	e009      	b.n	80061d4 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	2210      	movs	r2, #16
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80061cc:	231f      	movs	r3, #31
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80061d4:	231f      	movs	r3, #31
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	781b      	ldrb	r3, [r3, #0]
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b008      	add	sp, #32
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	20000080 	.word	0x20000080
 80061e8:	00030d40 	.word	0x00030d40
 80061ec:	fffffefd 	.word	0xfffffefd
 80061f0:	1ffffc02 	.word	0x1ffffc02
 80061f4:	40012708 	.word	0x40012708
 80061f8:	ffc3ffff 	.word	0xffc3ffff
 80061fc:	fffe0219 	.word	0xfffe0219
 8006200:	dffffc02 	.word	0xdffffc02
 8006204:	07ffff04 	.word	0x07ffff04
 8006208:	833fffe7 	.word	0x833fffe7

0800620c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800620c:	b5b0      	push	{r4, r5, r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	0018      	movs	r0, r3
 800621e:	f7ff fe0b 	bl	8005e38 <LL_ADC_REG_IsConversionOngoing>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d16c      	bne.n	8006300 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2254      	movs	r2, #84	; 0x54
 800622a:	5c9b      	ldrb	r3, [r3, r2]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_ADC_Start_DMA+0x28>
 8006230:	2302      	movs	r3, #2
 8006232:	e06c      	b.n	800630e <HAL_ADC_Start_DMA+0x102>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2254      	movs	r2, #84	; 0x54
 8006238:	2101      	movs	r1, #1
 800623a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	4013      	ands	r3, r2
 8006246:	d113      	bne.n	8006270 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0018      	movs	r0, r3
 800624e:	f7ff fdcf 	bl	8005df0 <LL_ADC_IsEnabled>
 8006252:	1e03      	subs	r3, r0, #0
 8006254:	d004      	beq.n	8006260 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	0018      	movs	r0, r3
 800625c:	f7ff fdb6 	bl	8005dcc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	430a      	orrs	r2, r1
 800626e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006270:	2517      	movs	r5, #23
 8006272:	197c      	adds	r4, r7, r5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0018      	movs	r0, r3
 8006278:	f000 fa48 	bl	800670c <ADC_Enable>
 800627c:	0003      	movs	r3, r0
 800627e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006280:	002c      	movs	r4, r5
 8006282:	193b      	adds	r3, r7, r4
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d13e      	bne.n	8006308 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_ADC_Start_DMA+0x10c>)
 8006290:	4013      	ands	r3, r2
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	0052      	lsls	r2, r2, #1
 8006296:	431a      	orrs	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_ADC_Start_DMA+0x110>)
 80062a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <HAL_ADC_Start_DMA+0x114>)
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_ADC_Start_DMA+0x118>)
 80062b8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	221c      	movs	r2, #28
 80062c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2254      	movs	r2, #84	; 0x54
 80062c6:	2100      	movs	r1, #0
 80062c8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2110      	movs	r1, #16
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3340      	adds	r3, #64	; 0x40
 80062e4:	0019      	movs	r1, r3
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	193c      	adds	r4, r7, r4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f000 fc82 	bl	8006bf4 <HAL_DMA_Start_IT>
 80062f0:	0003      	movs	r3, r0
 80062f2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7ff fd8b 	bl	8005e14 <LL_ADC_REG_StartConversion>
 80062fe:	e003      	b.n	8006308 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006300:	2317      	movs	r3, #23
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	2202      	movs	r2, #2
 8006306:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8006308:	2317      	movs	r3, #23
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	781b      	ldrb	r3, [r3, #0]
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	b006      	add	sp, #24
 8006314:	bdb0      	pop	{r4, r5, r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	fffff0fe 	.word	0xfffff0fe
 800631c:	08006809 	.word	0x08006809
 8006320:	080068d1 	.word	0x080068d1
 8006324:	080068ef 	.word	0x080068ef

08006328 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	b002      	add	sp, #8
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b002      	add	sp, #8
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006362:	2317      	movs	r3, #23
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2254      	movs	r2, #84	; 0x54
 8006372:	5c9b      	ldrb	r3, [r3, r2]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_ADC_ConfigChannel+0x24>
 8006378:	2302      	movs	r3, #2
 800637a:	e1c2      	b.n	8006702 <HAL_ADC_ConfigChannel+0x3aa>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2254      	movs	r2, #84	; 0x54
 8006380:	2101      	movs	r1, #1
 8006382:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0018      	movs	r0, r3
 800638a:	f7ff fd55 	bl	8005e38 <LL_ADC_REG_IsConversionOngoing>
 800638e:	1e03      	subs	r3, r0, #0
 8006390:	d000      	beq.n	8006394 <HAL_ADC_ConfigChannel+0x3c>
 8006392:	e1a5      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d100      	bne.n	800639e <HAL_ADC_ConfigChannel+0x46>
 800639c:	e144      	b.n	8006628 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d004      	beq.n	80063b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063ae:	4ac2      	ldr	r2, [pc, #776]	; (80066b8 <HAL_ADC_ConfigChannel+0x360>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0019      	movs	r1, r3
 80063be:	0010      	movs	r0, r2
 80063c0:	f7ff fc8b 	bl	8005cda <LL_ADC_REG_SetSequencerChAdd>
 80063c4:	e0c9      	b.n	800655a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	211f      	movs	r1, #31
 80063d0:	400b      	ands	r3, r1
 80063d2:	210f      	movs	r1, #15
 80063d4:	4099      	lsls	r1, r3
 80063d6:	000b      	movs	r3, r1
 80063d8:	43db      	mvns	r3, r3
 80063da:	4013      	ands	r3, r2
 80063dc:	0019      	movs	r1, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	035b      	lsls	r3, r3, #13
 80063e4:	0b5b      	lsrs	r3, r3, #13
 80063e6:	d105      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x9c>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0e9b      	lsrs	r3, r3, #26
 80063ee:	221f      	movs	r2, #31
 80063f0:	4013      	ands	r3, r2
 80063f2:	e098      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d000      	beq.n	8006400 <HAL_ADC_ConfigChannel+0xa8>
 80063fe:	e091      	b.n	8006524 <HAL_ADC_ConfigChannel+0x1cc>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2202      	movs	r2, #2
 8006406:	4013      	ands	r3, r2
 8006408:	d000      	beq.n	800640c <HAL_ADC_ConfigChannel+0xb4>
 800640a:	e089      	b.n	8006520 <HAL_ADC_ConfigChannel+0x1c8>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2204      	movs	r2, #4
 8006412:	4013      	ands	r3, r2
 8006414:	d000      	beq.n	8006418 <HAL_ADC_ConfigChannel+0xc0>
 8006416:	e081      	b.n	800651c <HAL_ADC_ConfigChannel+0x1c4>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2208      	movs	r2, #8
 800641e:	4013      	ands	r3, r2
 8006420:	d000      	beq.n	8006424 <HAL_ADC_ConfigChannel+0xcc>
 8006422:	e079      	b.n	8006518 <HAL_ADC_ConfigChannel+0x1c0>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2210      	movs	r2, #16
 800642a:	4013      	ands	r3, r2
 800642c:	d000      	beq.n	8006430 <HAL_ADC_ConfigChannel+0xd8>
 800642e:	e071      	b.n	8006514 <HAL_ADC_ConfigChannel+0x1bc>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2220      	movs	r2, #32
 8006436:	4013      	ands	r3, r2
 8006438:	d000      	beq.n	800643c <HAL_ADC_ConfigChannel+0xe4>
 800643a:	e069      	b.n	8006510 <HAL_ADC_ConfigChannel+0x1b8>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2240      	movs	r2, #64	; 0x40
 8006442:	4013      	ands	r3, r2
 8006444:	d000      	beq.n	8006448 <HAL_ADC_ConfigChannel+0xf0>
 8006446:	e061      	b.n	800650c <HAL_ADC_ConfigChannel+0x1b4>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2280      	movs	r2, #128	; 0x80
 800644e:	4013      	ands	r3, r2
 8006450:	d000      	beq.n	8006454 <HAL_ADC_ConfigChannel+0xfc>
 8006452:	e059      	b.n	8006508 <HAL_ADC_ConfigChannel+0x1b0>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4013      	ands	r3, r2
 800645e:	d151      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x1ac>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4013      	ands	r3, r2
 800646a:	d149      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x1a8>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4013      	ands	r3, r2
 8006476:	d141      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x1a4>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	4013      	ands	r3, r2
 8006482:	d139      	bne.n	80064f8 <HAL_ADC_ConfigChannel+0x1a0>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	015b      	lsls	r3, r3, #5
 800648c:	4013      	ands	r3, r2
 800648e:	d131      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x19c>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	019b      	lsls	r3, r3, #6
 8006498:	4013      	ands	r3, r2
 800649a:	d129      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x198>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	01db      	lsls	r3, r3, #7
 80064a4:	4013      	ands	r3, r2
 80064a6:	d121      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x194>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	2380      	movs	r3, #128	; 0x80
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	4013      	ands	r3, r2
 80064b2:	d119      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x190>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	025b      	lsls	r3, r3, #9
 80064bc:	4013      	ands	r3, r2
 80064be:	d111      	bne.n	80064e4 <HAL_ADC_ConfigChannel+0x18c>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	029b      	lsls	r3, r3, #10
 80064c8:	4013      	ands	r3, r2
 80064ca:	d109      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x188>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	02db      	lsls	r3, r3, #11
 80064d4:	4013      	ands	r3, r2
 80064d6:	d001      	beq.n	80064dc <HAL_ADC_ConfigChannel+0x184>
 80064d8:	2312      	movs	r3, #18
 80064da:	e024      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064dc:	2300      	movs	r3, #0
 80064de:	e022      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064e0:	2311      	movs	r3, #17
 80064e2:	e020      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064e4:	2310      	movs	r3, #16
 80064e6:	e01e      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064e8:	230f      	movs	r3, #15
 80064ea:	e01c      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064ec:	230e      	movs	r3, #14
 80064ee:	e01a      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064f0:	230d      	movs	r3, #13
 80064f2:	e018      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064f4:	230c      	movs	r3, #12
 80064f6:	e016      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064f8:	230b      	movs	r3, #11
 80064fa:	e014      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 80064fc:	230a      	movs	r3, #10
 80064fe:	e012      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006500:	2309      	movs	r3, #9
 8006502:	e010      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006504:	2308      	movs	r3, #8
 8006506:	e00e      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006508:	2307      	movs	r3, #7
 800650a:	e00c      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 800650c:	2306      	movs	r3, #6
 800650e:	e00a      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006510:	2305      	movs	r3, #5
 8006512:	e008      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006514:	2304      	movs	r3, #4
 8006516:	e006      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006518:	2303      	movs	r3, #3
 800651a:	e004      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 800651c:	2302      	movs	r3, #2
 800651e:	e002      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1ce>
 8006524:	2300      	movs	r3, #0
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	201f      	movs	r0, #31
 800652c:	4002      	ands	r2, r0
 800652e:	4093      	lsls	r3, r2
 8006530:	000a      	movs	r2, r1
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	429a      	cmp	r2, r3
 8006546:	d808      	bhi.n	800655a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	001a      	movs	r2, r3
 8006556:	f7ff fba0 	bl	8005c9a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6819      	ldr	r1, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	001a      	movs	r2, r3
 8006568:	f7ff fbda 	bl	8005d20 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	db00      	blt.n	8006576 <HAL_ADC_ConfigChannel+0x21e>
 8006574:	e0be      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006576:	4b51      	ldr	r3, [pc, #324]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 8006578:	0018      	movs	r0, r3
 800657a:	f7ff fb53 	bl	8005c24 <LL_ADC_GetCommonPathInternalCh>
 800657e:	0003      	movs	r3, r0
 8006580:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4e      	ldr	r2, [pc, #312]	; (80066c0 <HAL_ADC_ConfigChannel+0x368>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d123      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006594:	d11e      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	0412      	lsls	r2, r2, #16
 800659c:	4313      	orrs	r3, r2
 800659e:	4a47      	ldr	r2, [pc, #284]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 80065a0:	0019      	movs	r1, r3
 80065a2:	0010      	movs	r0, r2
 80065a4:	f7ff fb2a 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80065a8:	4b46      	ldr	r3, [pc, #280]	; (80066c4 <HAL_ADC_ConfigChannel+0x36c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4946      	ldr	r1, [pc, #280]	; (80066c8 <HAL_ADC_ConfigChannel+0x370>)
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7f9 fdb0 	bl	8000114 <__udivsi3>
 80065b4:	0003      	movs	r3, r0
 80065b6:	001a      	movs	r2, r3
 80065b8:	0013      	movs	r3, r2
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	189b      	adds	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065c4:	e002      	b.n	80065cc <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f9      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80065d2:	e08f      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a3c      	ldr	r2, [pc, #240]	; (80066cc <HAL_ADC_ConfigChannel+0x374>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10e      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x2a4>
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	045b      	lsls	r3, r3, #17
 80065e4:	4013      	ands	r3, r2
 80065e6:	d109      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	0452      	lsls	r2, r2, #17
 80065ee:	4313      	orrs	r3, r2
 80065f0:	4a32      	ldr	r2, [pc, #200]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 80065f2:	0019      	movs	r1, r3
 80065f4:	0010      	movs	r0, r2
 80065f6:	f7ff fb01 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
 80065fa:	e07b      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <HAL_ADC_ConfigChannel+0x378>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d000      	beq.n	8006608 <HAL_ADC_ConfigChannel+0x2b0>
 8006606:	e075      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	03db      	lsls	r3, r3, #15
 800660e:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006610:	d000      	beq.n	8006614 <HAL_ADC_ConfigChannel+0x2bc>
 8006612:	e06f      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	03d2      	lsls	r2, r2, #15
 800661a:	4313      	orrs	r3, r2
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 800661e:	0019      	movs	r1, r3
 8006620:	0010      	movs	r0, r2
 8006622:	f7ff faeb 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
 8006626:	e065      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	429a      	cmp	r2, r3
 8006632:	d004      	beq.n	800663e <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006638:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_ADC_ConfigChannel+0x360>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d107      	bne.n	800664e <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	0019      	movs	r1, r3
 8006648:	0010      	movs	r0, r2
 800664a:	f7ff fb57 	bl	8005cfc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	da4e      	bge.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006656:	4b19      	ldr	r3, [pc, #100]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 8006658:	0018      	movs	r0, r3
 800665a:	f7ff fae3 	bl	8005c24 <LL_ADC_GetCommonPathInternalCh>
 800665e:	0003      	movs	r3, r0
 8006660:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <HAL_ADC_ConfigChannel+0x368>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <HAL_ADC_ConfigChannel+0x37c>)
 8006670:	4013      	ands	r3, r2
 8006672:	4a12      	ldr	r2, [pc, #72]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 8006674:	0019      	movs	r1, r3
 8006676:	0010      	movs	r0, r2
 8006678:	f7ff fac0 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
 800667c:	e03a      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a12      	ldr	r2, [pc, #72]	; (80066cc <HAL_ADC_ConfigChannel+0x374>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <HAL_ADC_ConfigChannel+0x380>)
 800668c:	4013      	ands	r3, r2
 800668e:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 8006690:	0019      	movs	r1, r3
 8006692:	0010      	movs	r0, r2
 8006694:	f7ff fab2 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
 8006698:	e02c      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <HAL_ADC_ConfigChannel+0x378>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d127      	bne.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <HAL_ADC_ConfigChannel+0x384>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	4a04      	ldr	r2, [pc, #16]	; (80066bc <HAL_ADC_ConfigChannel+0x364>)
 80066ac:	0019      	movs	r1, r3
 80066ae:	0010      	movs	r0, r2
 80066b0:	f7ff faa4 	bl	8005bfc <LL_ADC_SetCommonPathInternalCh>
 80066b4:	e01e      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x39c>
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	80000004 	.word	0x80000004
 80066bc:	40012708 	.word	0x40012708
 80066c0:	b0001000 	.word	0xb0001000
 80066c4:	20000080 	.word	0x20000080
 80066c8:	00030d40 	.word	0x00030d40
 80066cc:	b8004000 	.word	0xb8004000
 80066d0:	b4002000 	.word	0xb4002000
 80066d4:	ff7fffff 	.word	0xff7fffff
 80066d8:	feffffff 	.word	0xfeffffff
 80066dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	2220      	movs	r2, #32
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80066ec:	2317      	movs	r3, #23
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2254      	movs	r2, #84	; 0x54
 80066f8:	2100      	movs	r1, #0
 80066fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80066fc:	2317      	movs	r3, #23
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	781b      	ldrb	r3, [r3, #0]
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b006      	add	sp, #24
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)

0800670c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006714:	2300      	movs	r3, #0
 8006716:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0018      	movs	r0, r3
 800671e:	f7ff fb67 	bl	8005df0 <LL_ADC_IsEnabled>
 8006722:	1e03      	subs	r3, r0, #0
 8006724:	d162      	bne.n	80067ec <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <ADC_Enable+0xec>)
 800672e:	4013      	ands	r3, r2
 8006730:	d00d      	beq.n	800674e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006736:	2210      	movs	r2, #16
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006742:	2201      	movs	r2, #1
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e04f      	b.n	80067ee <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	0018      	movs	r0, r3
 8006754:	f7ff fb28 	bl	8005da8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006758:	4b28      	ldr	r3, [pc, #160]	; (80067fc <ADC_Enable+0xf0>)
 800675a:	0018      	movs	r0, r3
 800675c:	f7ff fa62 	bl	8005c24 <LL_ADC_GetCommonPathInternalCh>
 8006760:	0002      	movs	r2, r0
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	4013      	ands	r3, r2
 8006768:	d00f      	beq.n	800678a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800676a:	4b25      	ldr	r3, [pc, #148]	; (8006800 <ADC_Enable+0xf4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4925      	ldr	r1, [pc, #148]	; (8006804 <ADC_Enable+0xf8>)
 8006770:	0018      	movs	r0, r3
 8006772:	f7f9 fccf 	bl	8000114 <__udivsi3>
 8006776:	0003      	movs	r3, r0
 8006778:	3301      	adds	r3, #1
 800677a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800677c:	e002      	b.n	8006784 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f9      	bne.n	800677e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7e5b      	ldrb	r3, [r3, #25]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d02c      	beq.n	80067ec <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006792:	f7ff f9d3 	bl	8005b3c <HAL_GetTick>
 8006796:	0003      	movs	r3, r0
 8006798:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800679a:	e020      	b.n	80067de <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	0018      	movs	r0, r3
 80067a2:	f7ff fb25 	bl	8005df0 <LL_ADC_IsEnabled>
 80067a6:	1e03      	subs	r3, r0, #0
 80067a8:	d104      	bne.n	80067b4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7ff fafa 	bl	8005da8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80067b4:	f7ff f9c2 	bl	8005b3c <HAL_GetTick>
 80067b8:	0002      	movs	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d90d      	bls.n	80067de <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c6:	2210      	movs	r2, #16
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	2201      	movs	r2, #1
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e007      	b.n	80067ee <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2201      	movs	r2, #1
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d1d7      	bne.n	800679c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	0018      	movs	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b004      	add	sp, #16
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	80000017 	.word	0x80000017
 80067fc:	40012708 	.word	0x40012708
 8006800:	20000080 	.word	0x20000080
 8006804:	00030d40 	.word	0x00030d40

08006808 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	2250      	movs	r2, #80	; 0x50
 800681c:	4013      	ands	r3, r2
 800681e:	d141      	bne.n	80068a4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	2280      	movs	r2, #128	; 0x80
 8006826:	0092      	lsls	r2, r2, #2
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	0018      	movs	r0, r3
 8006834:	f7ff fa20 	bl	8005c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d02e      	beq.n	800689a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	7e9b      	ldrb	r3, [r3, #26]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d12a      	bne.n	800689a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2208      	movs	r2, #8
 800684c:	4013      	ands	r3, r2
 800684e:	2b08      	cmp	r3, #8
 8006850:	d123      	bne.n	800689a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0018      	movs	r0, r3
 8006858:	f7ff faee 	bl	8005e38 <LL_ADC_REG_IsConversionOngoing>
 800685c:	1e03      	subs	r3, r0, #0
 800685e:	d110      	bne.n	8006882 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	210c      	movs	r1, #12
 800686c:	438a      	bics	r2, r1
 800686e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <ADC_DMAConvCplt+0xc4>)
 8006876:	4013      	ands	r3, r2
 8006878:	2201      	movs	r2, #1
 800687a:	431a      	orrs	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	659a      	str	r2, [r3, #88]	; 0x58
 8006880:	e00b      	b.n	800689a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006886:	2220      	movs	r2, #32
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	2201      	movs	r2, #1
 8006894:	431a      	orrs	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff fd43 	bl	8006328 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80068a2:	e00f      	b.n	80068c4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a8:	2210      	movs	r2, #16
 80068aa:	4013      	ands	r3, r2
 80068ac:	d004      	beq.n	80068b8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7ff fd49 	bl	8006348 <HAL_ADC_ErrorCallback>
}
 80068b6:	e005      	b.n	80068c4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	0010      	movs	r0, r2
 80068c2:	4798      	blx	r3
}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	fffffefe 	.word	0xfffffefe

080068d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7ff fd29 	bl	8006338 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b004      	add	sp, #16
 80068ec:	bd80      	pop	{r7, pc}

080068ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006900:	2240      	movs	r2, #64	; 0x40
 8006902:	431a      	orrs	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	2204      	movs	r2, #4
 800690e:	431a      	orrs	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	0018      	movs	r0, r3
 8006918:	f7ff fd16 	bl	8006348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800691c:	46c0      	nop			; (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b004      	add	sp, #16
 8006922:	bd80      	pop	{r7, pc}

08006924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	0002      	movs	r2, r0
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006930:	1dfb      	adds	r3, r7, #7
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	d809      	bhi.n	800694c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006938:	1dfb      	adds	r3, r7, #7
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	001a      	movs	r2, r3
 800693e:	231f      	movs	r3, #31
 8006940:	401a      	ands	r2, r3
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <__NVIC_EnableIRQ+0x30>)
 8006944:	2101      	movs	r1, #1
 8006946:	4091      	lsls	r1, r2
 8006948:	000a      	movs	r2, r1
 800694a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}
 8006954:	e000e100 	.word	0xe000e100

08006958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	0002      	movs	r2, r0
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	1dfb      	adds	r3, r7, #7
 8006964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006966:	1dfb      	adds	r3, r7, #7
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d828      	bhi.n	80069c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800696e:	4a2f      	ldr	r2, [pc, #188]	; (8006a2c <__NVIC_SetPriority+0xd4>)
 8006970:	1dfb      	adds	r3, r7, #7
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	b25b      	sxtb	r3, r3
 8006976:	089b      	lsrs	r3, r3, #2
 8006978:	33c0      	adds	r3, #192	; 0xc0
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	589b      	ldr	r3, [r3, r2]
 800697e:	1dfa      	adds	r2, r7, #7
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	0011      	movs	r1, r2
 8006984:	2203      	movs	r2, #3
 8006986:	400a      	ands	r2, r1
 8006988:	00d2      	lsls	r2, r2, #3
 800698a:	21ff      	movs	r1, #255	; 0xff
 800698c:	4091      	lsls	r1, r2
 800698e:	000a      	movs	r2, r1
 8006990:	43d2      	mvns	r2, r2
 8006992:	401a      	ands	r2, r3
 8006994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	019b      	lsls	r3, r3, #6
 800699a:	22ff      	movs	r2, #255	; 0xff
 800699c:	401a      	ands	r2, r3
 800699e:	1dfb      	adds	r3, r7, #7
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	0018      	movs	r0, r3
 80069a4:	2303      	movs	r3, #3
 80069a6:	4003      	ands	r3, r0
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80069ac:	481f      	ldr	r0, [pc, #124]	; (8006a2c <__NVIC_SetPriority+0xd4>)
 80069ae:	1dfb      	adds	r3, r7, #7
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	089b      	lsrs	r3, r3, #2
 80069b6:	430a      	orrs	r2, r1
 80069b8:	33c0      	adds	r3, #192	; 0xc0
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80069be:	e031      	b.n	8006a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <__NVIC_SetPriority+0xd8>)
 80069c2:	1dfb      	adds	r3, r7, #7
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	0019      	movs	r1, r3
 80069c8:	230f      	movs	r3, #15
 80069ca:	400b      	ands	r3, r1
 80069cc:	3b08      	subs	r3, #8
 80069ce:	089b      	lsrs	r3, r3, #2
 80069d0:	3306      	adds	r3, #6
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	3304      	adds	r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	1dfa      	adds	r2, r7, #7
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	0011      	movs	r1, r2
 80069e0:	2203      	movs	r2, #3
 80069e2:	400a      	ands	r2, r1
 80069e4:	00d2      	lsls	r2, r2, #3
 80069e6:	21ff      	movs	r1, #255	; 0xff
 80069e8:	4091      	lsls	r1, r2
 80069ea:	000a      	movs	r2, r1
 80069ec:	43d2      	mvns	r2, r2
 80069ee:	401a      	ands	r2, r3
 80069f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	019b      	lsls	r3, r3, #6
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	401a      	ands	r2, r3
 80069fa:	1dfb      	adds	r3, r7, #7
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	0018      	movs	r0, r3
 8006a00:	2303      	movs	r3, #3
 8006a02:	4003      	ands	r3, r0
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <__NVIC_SetPriority+0xd8>)
 8006a0a:	1dfb      	adds	r3, r7, #7
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	001c      	movs	r4, r3
 8006a10:	230f      	movs	r3, #15
 8006a12:	4023      	ands	r3, r4
 8006a14:	3b08      	subs	r3, #8
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	3306      	adds	r3, #6
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	18c3      	adds	r3, r0, r3
 8006a20:	3304      	adds	r3, #4
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b003      	add	sp, #12
 8006a2a:	bd90      	pop	{r4, r7, pc}
 8006a2c:	e000e100 	.word	0xe000e100
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	045b      	lsls	r3, r3, #17
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d301      	bcc.n	8006a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e010      	b.n	8006a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <SysTick_Config+0x44>)
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	3a01      	subs	r2, #1
 8006a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a54:	2301      	movs	r3, #1
 8006a56:	425b      	negs	r3, r3
 8006a58:	2103      	movs	r1, #3
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7ff ff7c 	bl	8006958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <SysTick_Config+0x44>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a66:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <SysTick_Config+0x44>)
 8006a68:	2207      	movs	r2, #7
 8006a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	0018      	movs	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b002      	add	sp, #8
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	e000e010 	.word	0xe000e010

08006a7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	210f      	movs	r1, #15
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	1c02      	adds	r2, r0, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	187b      	adds	r3, r7, r1
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	0011      	movs	r1, r2
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7ff ff5d 	bl	8006958 <__NVIC_SetPriority>
}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b004      	add	sp, #16
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	0002      	movs	r2, r0
 8006aae:	1dfb      	adds	r3, r7, #7
 8006ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ab2:	1dfb      	adds	r3, r7, #7
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b25b      	sxtb	r3, r3
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff ff33 	bl	8006924 <__NVIC_EnableIRQ>
}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b002      	add	sp, #8
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f7ff ffaf 	bl	8006a34 <SysTick_Config>
 8006ad6:	0003      	movs	r3, r0
}
 8006ad8:	0018      	movs	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b002      	add	sp, #8
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e077      	b.n	8006be2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <HAL_DMA_Init+0x10c>)
 8006af8:	4694      	mov	ip, r2
 8006afa:	4463      	add	r3, ip
 8006afc:	2114      	movs	r1, #20
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7f9 fb08 	bl	8000114 <__udivsi3>
 8006b04:	0003      	movs	r3, r0
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2225      	movs	r2, #37	; 0x25
 8006b10:	2102      	movs	r1, #2
 8006b12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4934      	ldr	r1, [pc, #208]	; (8006bf0 <HAL_DMA_Init+0x110>)
 8006b20:	400a      	ands	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6819      	ldr	r1, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f000 f9c1 	bl	8006ee4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	01db      	lsls	r3, r3, #7
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d102      	bne.n	8006b74 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	213f      	movs	r1, #63	; 0x3f
 8006b7e:	400a      	ands	r2, r1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006b8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <HAL_DMA_Init+0xd8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d80d      	bhi.n	8006bb8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 f9cc 	bl	8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e008      	b.n	8006bca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2225      	movs	r2, #37	; 0x25
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	2100      	movs	r1, #0
 8006bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	0018      	movs	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b002      	add	sp, #8
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	bffdfff8 	.word	0xbffdfff8
 8006bf0:	ffff800f 	.word	0xffff800f

08006bf4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2317      	movs	r3, #23
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2224      	movs	r2, #36	; 0x24
 8006c0e:	5c9b      	ldrb	r3, [r3, r2]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_DMA_Start_IT+0x24>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e06f      	b.n	8006cf8 <HAL_DMA_Start_IT+0x104>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2224      	movs	r2, #36	; 0x24
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2225      	movs	r2, #37	; 0x25
 8006c24:	5c9b      	ldrb	r3, [r3, r2]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d157      	bne.n	8006cdc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2225      	movs	r2, #37	; 0x25
 8006c30:	2102      	movs	r1, #2
 8006c32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2101      	movs	r1, #1
 8006c46:	438a      	bics	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f907 	bl	8006e64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	210e      	movs	r1, #14
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	e00f      	b.n	8006c90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	438a      	bics	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	210a      	movs	r1, #10
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	025b      	lsls	r3, r3, #9
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d008      	beq.n	8006cb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	2180      	movs	r1, #128	; 0x80
 8006caa:	0049      	lsls	r1, r1, #1
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc2:	2180      	movs	r1, #128	; 0x80
 8006cc4:	0049      	lsls	r1, r1, #1
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e00a      	b.n	8006cf2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2224      	movs	r2, #36	; 0x24
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006cea:	2317      	movs	r3, #23
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	2201      	movs	r2, #1
 8006cf0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006cf2:	2317      	movs	r3, #23
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	781b      	ldrb	r3, [r3, #0]
}
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	b006      	add	sp, #24
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006d08:	4b55      	ldr	r3, [pc, #340]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	221c      	movs	r2, #28
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2204      	movs	r2, #4
 8006d20:	409a      	lsls	r2, r3
 8006d22:	0013      	movs	r3, r2
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4013      	ands	r3, r2
 8006d28:	d027      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x7a>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d023      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d107      	bne.n	8006d4e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2104      	movs	r1, #4
 8006d4a:	438a      	bics	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006d4e:	4b44      	ldr	r3, [pc, #272]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006d50:	6859      	ldr	r1, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	221c      	movs	r2, #28
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	409a      	lsls	r2, r3
 8006d5e:	4b40      	ldr	r3, [pc, #256]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006d60:	430a      	orrs	r2, r1
 8006d62:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d100      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x6e>
 8006d6c:	e073      	b.n	8006e56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	0010      	movs	r0, r2
 8006d76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006d78:	e06d      	b.n	8006e56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	221c      	movs	r2, #28
 8006d80:	4013      	ands	r3, r2
 8006d82:	2202      	movs	r2, #2
 8006d84:	409a      	lsls	r2, r3
 8006d86:	0013      	movs	r3, r2
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d02e      	beq.n	8006dec <HAL_DMA_IRQHandler+0xec>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	4013      	ands	r3, r2
 8006d94:	d02a      	beq.n	8006dec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d10b      	bne.n	8006dba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	210a      	movs	r1, #10
 8006dae:	438a      	bics	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2225      	movs	r2, #37	; 0x25
 8006db6:	2101      	movs	r1, #1
 8006db8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006dba:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006dbc:	6859      	ldr	r1, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	221c      	movs	r2, #28
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	409a      	lsls	r2, r3
 8006dca:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2224      	movs	r2, #36	; 0x24
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d03a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	0010      	movs	r0, r2
 8006de8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006dea:	e034      	b.n	8006e56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	221c      	movs	r2, #28
 8006df2:	4013      	ands	r3, r2
 8006df4:	2208      	movs	r2, #8
 8006df6:	409a      	lsls	r2, r3
 8006df8:	0013      	movs	r3, r2
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d02b      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x158>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2208      	movs	r2, #8
 8006e04:	4013      	ands	r3, r2
 8006e06:	d027      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	210e      	movs	r1, #14
 8006e14:	438a      	bics	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006e18:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	221c      	movs	r2, #28
 8006e22:	4013      	ands	r3, r2
 8006e24:	2201      	movs	r2, #1
 8006e26:	409a      	lsls	r2, r3
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <HAL_DMA_IRQHandler+0x160>)
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2225      	movs	r2, #37	; 0x25
 8006e38:	2101      	movs	r1, #1
 8006e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	2100      	movs	r1, #0
 8006e42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	0010      	movs	r0, r2
 8006e54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	46c0      	nop			; (mov r8, r8)
}
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b004      	add	sp, #16
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40020000 	.word	0x40020000

08006e64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <DMA_SetConfig+0x7c>)
 8006e90:	6859      	ldr	r1, [r3, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	221c      	movs	r2, #28
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	409a      	lsls	r2, r3
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <DMA_SetConfig+0x7c>)
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d108      	bne.n	8006ec6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ec4:	e007      	b.n	8006ed6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b004      	add	sp, #16
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	40020000 	.word	0x40020000

08006ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	089b      	lsrs	r3, r3, #2
 8006ef2:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006ef4:	4694      	mov	ip, r2
 8006ef6:	4463      	add	r3, ip
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	001a      	movs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	001a      	movs	r2, r3
 8006f06:	23ff      	movs	r3, #255	; 0xff
 8006f08:	4013      	ands	r3, r2
 8006f0a:	3b08      	subs	r3, #8
 8006f0c:	2114      	movs	r1, #20
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7f9 f900 	bl	8000114 <__udivsi3>
 8006f14:	0003      	movs	r3, r0
 8006f16:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	; (8006f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006f1c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	221f      	movs	r2, #31
 8006f22:	4013      	ands	r3, r2
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	10008200 	.word	0x10008200
 8006f38:	40020880 	.word	0x40020880

08006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	223f      	movs	r2, #63	; 0x3f
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f52:	4694      	mov	ip, r2
 8006f54:	4463      	add	r3, ip
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	001a      	movs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	2203      	movs	r2, #3
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	409a      	lsls	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006f74:	46c0      	nop			; (mov r8, r8)
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b004      	add	sp, #16
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	1000823f 	.word	0x1000823f
 8006f80:	40020940 	.word	0x40020940

08006f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f92:	e147      	b.n	8007224 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4091      	lsls	r1, r2
 8006f9e:	000a      	movs	r2, r1
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d100      	bne.n	8006fac <HAL_GPIO_Init+0x28>
 8006faa:	e138      	b.n	800721e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00b      	beq.n	8006fcc <HAL_GPIO_Init+0x48>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d007      	beq.n	8006fcc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fc0:	2b11      	cmp	r3, #17
 8006fc2:	d003      	beq.n	8006fcc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b12      	cmp	r3, #18
 8006fca:	d130      	bne.n	800702e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	0013      	movs	r3, r2
 8006fdc:	43da      	mvns	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	409a      	lsls	r2, r3
 8006fee:	0013      	movs	r3, r2
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007002:	2201      	movs	r2, #1
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	409a      	lsls	r2, r3
 8007008:	0013      	movs	r3, r2
 800700a:	43da      	mvns	r2, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4013      	ands	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	2201      	movs	r2, #1
 800701a:	401a      	ands	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	409a      	lsls	r2, r3
 8007020:	0013      	movs	r3, r2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2203      	movs	r2, #3
 800703a:	409a      	lsls	r2, r3
 800703c:	0013      	movs	r3, r2
 800703e:	43da      	mvns	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	409a      	lsls	r2, r3
 8007050:	0013      	movs	r3, r2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d003      	beq.n	800706e <HAL_GPIO_Init+0xea>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b12      	cmp	r3, #18
 800706c:	d123      	bne.n	80070b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	0092      	lsls	r2, r2, #2
 8007078:	58d3      	ldr	r3, [r2, r3]
 800707a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2207      	movs	r2, #7
 8007080:	4013      	ands	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	220f      	movs	r2, #15
 8007086:	409a      	lsls	r2, r3
 8007088:	0013      	movs	r3, r2
 800708a:	43da      	mvns	r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4013      	ands	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2107      	movs	r1, #7
 800709a:	400b      	ands	r3, r1
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	409a      	lsls	r2, r3
 80070a0:	0013      	movs	r3, r2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	08da      	lsrs	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3208      	adds	r2, #8
 80070b0:	0092      	lsls	r2, r2, #2
 80070b2:	6939      	ldr	r1, [r7, #16]
 80070b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	2203      	movs	r2, #3
 80070c2:	409a      	lsls	r2, r3
 80070c4:	0013      	movs	r3, r2
 80070c6:	43da      	mvns	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4013      	ands	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2203      	movs	r2, #3
 80070d4:	401a      	ands	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	0013      	movs	r3, r2
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	055b      	lsls	r3, r3, #21
 80070f2:	4013      	ands	r3, r2
 80070f4:	d100      	bne.n	80070f8 <HAL_GPIO_Init+0x174>
 80070f6:	e092      	b.n	800721e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80070f8:	4a50      	ldr	r2, [pc, #320]	; (800723c <HAL_GPIO_Init+0x2b8>)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	3318      	adds	r3, #24
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	589b      	ldr	r3, [r3, r2]
 8007104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2203      	movs	r2, #3
 800710a:	4013      	ands	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	220f      	movs	r2, #15
 8007110:	409a      	lsls	r2, r3
 8007112:	0013      	movs	r3, r2
 8007114:	43da      	mvns	r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4013      	ands	r3, r2
 800711a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	23a0      	movs	r3, #160	; 0xa0
 8007120:	05db      	lsls	r3, r3, #23
 8007122:	429a      	cmp	r2, r3
 8007124:	d013      	beq.n	800714e <HAL_GPIO_Init+0x1ca>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a45      	ldr	r2, [pc, #276]	; (8007240 <HAL_GPIO_Init+0x2bc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00d      	beq.n	800714a <HAL_GPIO_Init+0x1c6>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a44      	ldr	r2, [pc, #272]	; (8007244 <HAL_GPIO_Init+0x2c0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <HAL_GPIO_Init+0x1c2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a43      	ldr	r2, [pc, #268]	; (8007248 <HAL_GPIO_Init+0x2c4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d101      	bne.n	8007142 <HAL_GPIO_Init+0x1be>
 800713e:	2303      	movs	r3, #3
 8007140:	e006      	b.n	8007150 <HAL_GPIO_Init+0x1cc>
 8007142:	2305      	movs	r3, #5
 8007144:	e004      	b.n	8007150 <HAL_GPIO_Init+0x1cc>
 8007146:	2302      	movs	r3, #2
 8007148:	e002      	b.n	8007150 <HAL_GPIO_Init+0x1cc>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <HAL_GPIO_Init+0x1cc>
 800714e:	2300      	movs	r3, #0
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	2103      	movs	r1, #3
 8007154:	400a      	ands	r2, r1
 8007156:	00d2      	lsls	r2, r2, #3
 8007158:	4093      	lsls	r3, r2
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007160:	4936      	ldr	r1, [pc, #216]	; (800723c <HAL_GPIO_Init+0x2b8>)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	3318      	adds	r3, #24
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800716e:	4a33      	ldr	r2, [pc, #204]	; (800723c <HAL_GPIO_Init+0x2b8>)
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	58d3      	ldr	r3, [r2, r3]
 8007174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	43da      	mvns	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4013      	ands	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	025b      	lsls	r3, r3, #9
 8007188:	4013      	ands	r3, r2
 800718a:	d003      	beq.n	8007194 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007194:	4929      	ldr	r1, [pc, #164]	; (800723c <HAL_GPIO_Init+0x2b8>)
 8007196:	2280      	movs	r2, #128	; 0x80
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800719c:	4a27      	ldr	r2, [pc, #156]	; (800723c <HAL_GPIO_Init+0x2b8>)
 800719e:	2384      	movs	r3, #132	; 0x84
 80071a0:	58d3      	ldr	r3, [r2, r3]
 80071a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	43da      	mvns	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4013      	ands	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	4013      	ands	r3, r2
 80071b8:	d003      	beq.n	80071c2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80071c2:	491e      	ldr	r1, [pc, #120]	; (800723c <HAL_GPIO_Init+0x2b8>)
 80071c4:	2284      	movs	r2, #132	; 0x84
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <HAL_GPIO_Init+0x2b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	43da      	mvns	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4013      	ands	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	2380      	movs	r3, #128	; 0x80
 80071e0:	035b      	lsls	r3, r3, #13
 80071e2:	4013      	ands	r3, r2
 80071e4:	d003      	beq.n	80071ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <HAL_GPIO_Init+0x2b8>)
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80071f4:	4b11      	ldr	r3, [pc, #68]	; (800723c <HAL_GPIO_Init+0x2b8>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	43da      	mvns	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	4013      	ands	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	039b      	lsls	r3, r3, #14
 800720c:	4013      	ands	r3, r2
 800720e:	d003      	beq.n	8007218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007218:	4b08      	ldr	r3, [pc, #32]	; (800723c <HAL_GPIO_Init+0x2b8>)
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	3301      	adds	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	40da      	lsrs	r2, r3
 800722c:	1e13      	subs	r3, r2, #0
 800722e:	d000      	beq.n	8007232 <HAL_GPIO_Init+0x2ae>
 8007230:	e6b0      	b.n	8006f94 <HAL_GPIO_Init+0x10>
  }
}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	46c0      	nop			; (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b006      	add	sp, #24
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021800 	.word	0x40021800
 8007240:	50000400 	.word	0x50000400
 8007244:	50000800 	.word	0x50000800
 8007248:	50000c00 	.word	0x50000c00

0800724c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	000a      	movs	r2, r1
 8007256:	1cbb      	adds	r3, r7, #2
 8007258:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	1cba      	adds	r2, r7, #2
 8007260:	8812      	ldrh	r2, [r2, #0]
 8007262:	4013      	ands	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007266:	230f      	movs	r3, #15
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	e003      	b.n	8007278 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007270:	230f      	movs	r3, #15
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007278:	230f      	movs	r3, #15
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	781b      	ldrb	r3, [r3, #0]
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b004      	add	sp, #16
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	0008      	movs	r0, r1
 8007290:	0011      	movs	r1, r2
 8007292:	1cbb      	adds	r3, r7, #2
 8007294:	1c02      	adds	r2, r0, #0
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	1c7b      	adds	r3, r7, #1
 800729a:	1c0a      	adds	r2, r1, #0
 800729c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800729e:	1c7b      	adds	r3, r7, #1
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072a6:	1cbb      	adds	r3, r7, #2
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072ae:	e003      	b.n	80072b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072b0:	1cbb      	adds	r3, r7, #2
 80072b2:	881a      	ldrh	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072b8:	46c0      	nop			; (mov r8, r8)
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b002      	add	sp, #8
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	0002      	movs	r2, r0
 80072c8:	1dbb      	adds	r3, r7, #6
 80072ca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	1dba      	adds	r2, r7, #6
 80072d2:	8812      	ldrh	r2, [r2, #0]
 80072d4:	4013      	ands	r3, r2
 80072d6:	d008      	beq.n	80072ea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80072da:	1dba      	adds	r2, r7, #6
 80072dc:	8812      	ldrh	r2, [r2, #0]
 80072de:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80072e0:	1dbb      	adds	r3, r7, #6
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 f815 	bl	8007314 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80072ea:	4b09      	ldr	r3, [pc, #36]	; (8007310 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	1dba      	adds	r2, r7, #6
 80072f0:	8812      	ldrh	r2, [r2, #0]
 80072f2:	4013      	ands	r3, r2
 80072f4:	d008      	beq.n	8007308 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80072f6:	4b06      	ldr	r3, [pc, #24]	; (8007310 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80072f8:	1dba      	adds	r2, r7, #6
 80072fa:	8812      	ldrh	r2, [r2, #0]
 80072fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80072fe:	1dbb      	adds	r3, r7, #6
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	0018      	movs	r0, r3
 8007304:	f7fc f876 	bl	80033f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007308:	46c0      	nop			; (mov r8, r8)
 800730a:	46bd      	mov	sp, r7
 800730c:	b002      	add	sp, #8
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40021800 	.word	0x40021800

08007314 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	0002      	movs	r2, r0
 800731c:	1dbb      	adds	r3, r7, #6
 800731e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e082      	b.n	8007440 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2241      	movs	r2, #65	; 0x41
 800733e:	5c9b      	ldrb	r3, [r3, r2]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f008 ff03 	bl	801015c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2241      	movs	r2, #65	; 0x41
 800735a:	2124      	movs	r1, #36	; 0x24
 800735c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2101      	movs	r1, #1
 800736a:	438a      	bics	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4934      	ldr	r1, [pc, #208]	; (8007448 <HAL_I2C_Init+0x120>)
 8007378:	400a      	ands	r2, r1
 800737a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4931      	ldr	r1, [pc, #196]	; (800744c <HAL_I2C_Init+0x124>)
 8007388:	400a      	ands	r2, r1
 800738a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d108      	bne.n	80073a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	0209      	lsls	r1, r1, #8
 80073a0:	430a      	orrs	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e007      	b.n	80073b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2184      	movs	r1, #132	; 0x84
 80073b0:	0209      	lsls	r1, r1, #8
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d104      	bne.n	80073c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	0112      	lsls	r2, r2, #4
 80073c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	491f      	ldr	r1, [pc, #124]	; (8007450 <HAL_I2C_Init+0x128>)
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	491a      	ldr	r1, [pc, #104]	; (800744c <HAL_I2C_Init+0x124>)
 80073e4:	400a      	ands	r2, r1
 80073e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	0011      	movs	r1, r2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	021a      	lsls	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69d9      	ldr	r1, [r3, #28]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1a      	ldr	r2, [r3, #32]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2241      	movs	r2, #65	; 0x41
 800742c:	2120      	movs	r1, #32
 800742e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2242      	movs	r2, #66	; 0x42
 800743a:	2100      	movs	r1, #0
 800743c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b002      	add	sp, #8
 8007446:	bd80      	pop	{r7, pc}
 8007448:	f0ffffff 	.word	0xf0ffffff
 800744c:	ffff7fff 	.word	0xffff7fff
 8007450:	02008000 	.word	0x02008000

08007454 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b089      	sub	sp, #36	; 0x24
 8007458:	af02      	add	r7, sp, #8
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	000c      	movs	r4, r1
 800745e:	0010      	movs	r0, r2
 8007460:	0019      	movs	r1, r3
 8007462:	230a      	movs	r3, #10
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	1c22      	adds	r2, r4, #0
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	2308      	movs	r3, #8
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	1c02      	adds	r2, r0, #0
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	1dbb      	adds	r3, r7, #6
 8007474:	1c0a      	adds	r2, r1, #0
 8007476:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2241      	movs	r2, #65	; 0x41
 800747c:	5c9b      	ldrb	r3, [r3, r2]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b20      	cmp	r3, #32
 8007482:	d000      	beq.n	8007486 <HAL_I2C_Mem_Write+0x32>
 8007484:	e10c      	b.n	80076a0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <HAL_I2C_Mem_Write+0x42>
 800748c:	232c      	movs	r3, #44	; 0x2c
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d105      	bne.n	80074a2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2280      	movs	r2, #128	; 0x80
 800749a:	0092      	lsls	r2, r2, #2
 800749c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e0ff      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2240      	movs	r2, #64	; 0x40
 80074a6:	5c9b      	ldrb	r3, [r3, r2]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_I2C_Mem_Write+0x5c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e0f8      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2240      	movs	r2, #64	; 0x40
 80074b4:	2101      	movs	r1, #1
 80074b6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b8:	f7fe fb40 	bl	8005b3c <HAL_GetTick>
 80074bc:	0003      	movs	r3, r0
 80074be:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	0219      	lsls	r1, r3, #8
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2319      	movs	r3, #25
 80074cc:	2201      	movs	r2, #1
 80074ce:	f000 fb0b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80074d2:	1e03      	subs	r3, r0, #0
 80074d4:	d001      	beq.n	80074da <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e0e3      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2241      	movs	r2, #65	; 0x41
 80074de:	2121      	movs	r1, #33	; 0x21
 80074e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2242      	movs	r2, #66	; 0x42
 80074e6:	2140      	movs	r1, #64	; 0x40
 80074e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	222c      	movs	r2, #44	; 0x2c
 80074fa:	18ba      	adds	r2, r7, r2
 80074fc:	8812      	ldrh	r2, [r2, #0]
 80074fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007506:	1dbb      	adds	r3, r7, #6
 8007508:	881c      	ldrh	r4, [r3, #0]
 800750a:	2308      	movs	r3, #8
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	230a      	movs	r3, #10
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	8819      	ldrh	r1, [r3, #0]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	0023      	movs	r3, r4
 8007522:	f000 f9f9 	bl	8007918 <I2C_RequestMemoryWrite>
 8007526:	1e03      	subs	r3, r0, #0
 8007528:	d005      	beq.n	8007536 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2240      	movs	r2, #64	; 0x40
 800752e:	2100      	movs	r1, #0
 8007530:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e0b5      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	2bff      	cmp	r3, #255	; 0xff
 800753e:	d911      	bls.n	8007564 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	22ff      	movs	r2, #255	; 0xff
 8007544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	b2da      	uxtb	r2, r3
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	045c      	lsls	r4, r3, #17
 8007550:	230a      	movs	r3, #10
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	8819      	ldrh	r1, [r3, #0]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	0023      	movs	r3, r4
 800755e:	f000 fbe3 	bl	8007d28 <I2C_TransferConfig>
 8007562:	e012      	b.n	800758a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007572:	b2da      	uxtb	r2, r3
 8007574:	2380      	movs	r3, #128	; 0x80
 8007576:	049c      	lsls	r4, r3, #18
 8007578:	230a      	movs	r3, #10
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	8819      	ldrh	r1, [r3, #0]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	2300      	movs	r3, #0
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	0023      	movs	r3, r4
 8007586:	f000 fbcf 	bl	8007d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	0018      	movs	r0, r3
 8007592:	f000 fae8 	bl	8007b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8007596:	1e03      	subs	r3, r0, #0
 8007598:	d001      	beq.n	800759e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e081      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d03a      	beq.n	800764e <HAL_I2C_Mem_Write+0x1fa>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d136      	bne.n	800764e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	0013      	movs	r3, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	f000 fa7b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80075f2:	1e03      	subs	r3, r0, #0
 80075f4:	d001      	beq.n	80075fa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e053      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2bff      	cmp	r3, #255	; 0xff
 8007602:	d911      	bls.n	8007628 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	045c      	lsls	r4, r3, #17
 8007614:	230a      	movs	r3, #10
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	8819      	ldrh	r1, [r3, #0]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0023      	movs	r3, r4
 8007622:	f000 fb81 	bl	8007d28 <I2C_TransferConfig>
 8007626:	e012      	b.n	800764e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	b2da      	uxtb	r2, r3
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	049c      	lsls	r4, r3, #18
 800763c:	230a      	movs	r3, #10
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	8819      	ldrh	r1, [r3, #0]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	2300      	movs	r3, #0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	0023      	movs	r3, r4
 800764a:	f000 fb6d 	bl	8007d28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d198      	bne.n	800758a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	0018      	movs	r0, r3
 8007660:	f000 fac0 	bl	8007be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d001      	beq.n	800766c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e01a      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2220      	movs	r2, #32
 8007672:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	490b      	ldr	r1, [pc, #44]	; (80076ac <HAL_I2C_Mem_Write+0x258>)
 8007680:	400a      	ands	r2, r1
 8007682:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2241      	movs	r2, #65	; 0x41
 8007688:	2120      	movs	r1, #32
 800768a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2242      	movs	r2, #66	; 0x42
 8007690:	2100      	movs	r1, #0
 8007692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	2100      	movs	r1, #0
 800769a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	e000      	b.n	80076a2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80076a0:	2302      	movs	r3, #2
  }
}
 80076a2:	0018      	movs	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b007      	add	sp, #28
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	fe00e800 	.word	0xfe00e800

080076b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	000c      	movs	r4, r1
 80076ba:	0010      	movs	r0, r2
 80076bc:	0019      	movs	r1, r3
 80076be:	230a      	movs	r3, #10
 80076c0:	18fb      	adds	r3, r7, r3
 80076c2:	1c22      	adds	r2, r4, #0
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	2308      	movs	r3, #8
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	1c02      	adds	r2, r0, #0
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	1dbb      	adds	r3, r7, #6
 80076d0:	1c0a      	adds	r2, r1, #0
 80076d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2241      	movs	r2, #65	; 0x41
 80076d8:	5c9b      	ldrb	r3, [r3, r2]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d000      	beq.n	80076e2 <HAL_I2C_Mem_Read+0x32>
 80076e0:	e110      	b.n	8007904 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_I2C_Mem_Read+0x42>
 80076e8:	232c      	movs	r3, #44	; 0x2c
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	0092      	lsls	r2, r2, #2
 80076f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e103      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2240      	movs	r2, #64	; 0x40
 8007702:	5c9b      	ldrb	r3, [r3, r2]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_I2C_Mem_Read+0x5c>
 8007708:	2302      	movs	r3, #2
 800770a:	e0fc      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	2101      	movs	r1, #1
 8007712:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007714:	f7fe fa12 	bl	8005b3c <HAL_GetTick>
 8007718:	0003      	movs	r3, r0
 800771a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800771c:	2380      	movs	r3, #128	; 0x80
 800771e:	0219      	lsls	r1, r3, #8
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2319      	movs	r3, #25
 8007728:	2201      	movs	r2, #1
 800772a:	f000 f9dd 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 800772e:	1e03      	subs	r3, r0, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e0e7      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2241      	movs	r2, #65	; 0x41
 800773a:	2122      	movs	r1, #34	; 0x22
 800773c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2242      	movs	r2, #66	; 0x42
 8007742:	2140      	movs	r1, #64	; 0x40
 8007744:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	222c      	movs	r2, #44	; 0x2c
 8007756:	18ba      	adds	r2, r7, r2
 8007758:	8812      	ldrh	r2, [r2, #0]
 800775a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007762:	1dbb      	adds	r3, r7, #6
 8007764:	881c      	ldrh	r4, [r3, #0]
 8007766:	2308      	movs	r3, #8
 8007768:	18fb      	adds	r3, r7, r3
 800776a:	881a      	ldrh	r2, [r3, #0]
 800776c:	230a      	movs	r3, #10
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	8819      	ldrh	r1, [r3, #0]
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	0023      	movs	r3, r4
 800777e:	f000 f92f 	bl	80079e0 <I2C_RequestMemoryRead>
 8007782:	1e03      	subs	r3, r0, #0
 8007784:	d005      	beq.n	8007792 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2240      	movs	r2, #64	; 0x40
 800778a:	2100      	movs	r1, #0
 800778c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0b9      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007796:	b29b      	uxth	r3, r3
 8007798:	2bff      	cmp	r3, #255	; 0xff
 800779a:	d911      	bls.n	80077c0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	22ff      	movs	r2, #255	; 0xff
 80077a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	045c      	lsls	r4, r3, #17
 80077ac:	230a      	movs	r3, #10
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	8819      	ldrh	r1, [r3, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4b56      	ldr	r3, [pc, #344]	; (8007910 <HAL_I2C_Mem_Read+0x260>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	0023      	movs	r3, r4
 80077ba:	f000 fab5 	bl	8007d28 <I2C_TransferConfig>
 80077be:	e012      	b.n	80077e6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	049c      	lsls	r4, r3, #18
 80077d4:	230a      	movs	r3, #10
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	8819      	ldrh	r1, [r3, #0]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <HAL_I2C_Mem_Read+0x260>)
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	0023      	movs	r3, r4
 80077e2:	f000 faa1 	bl	8007d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	0013      	movs	r3, r2
 80077f0:	2200      	movs	r2, #0
 80077f2:	2104      	movs	r1, #4
 80077f4:	f000 f978 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d001      	beq.n	8007800 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e082      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d03a      	beq.n	80078b2 <HAL_I2C_Mem_Read+0x202>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d136      	bne.n	80078b2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	0013      	movs	r3, r2
 800784e:	2200      	movs	r2, #0
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	f000 f949 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007856:	1e03      	subs	r3, r0, #0
 8007858:	d001      	beq.n	800785e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e053      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	2bff      	cmp	r3, #255	; 0xff
 8007866:	d911      	bls.n	800788c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007872:	b2da      	uxtb	r2, r3
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	045c      	lsls	r4, r3, #17
 8007878:	230a      	movs	r3, #10
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	8819      	ldrh	r1, [r3, #0]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	0023      	movs	r3, r4
 8007886:	f000 fa4f 	bl	8007d28 <I2C_TransferConfig>
 800788a:	e012      	b.n	80078b2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789a:	b2da      	uxtb	r2, r3
 800789c:	2380      	movs	r3, #128	; 0x80
 800789e:	049c      	lsls	r4, r3, #18
 80078a0:	230a      	movs	r3, #10
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	8819      	ldrh	r1, [r3, #0]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	2300      	movs	r3, #0
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	0023      	movs	r3, r4
 80078ae:	f000 fa3b 	bl	8007d28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d194      	bne.n	80077e6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 f98e 	bl	8007be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078c8:	1e03      	subs	r3, r0, #0
 80078ca:	d001      	beq.n	80078d0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e01a      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2220      	movs	r2, #32
 80078d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	490c      	ldr	r1, [pc, #48]	; (8007914 <HAL_I2C_Mem_Read+0x264>)
 80078e4:	400a      	ands	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2241      	movs	r2, #65	; 0x41
 80078ec:	2120      	movs	r1, #32
 80078ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2242      	movs	r2, #66	; 0x42
 80078f4:	2100      	movs	r1, #0
 80078f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	2100      	movs	r1, #0
 80078fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007904:	2302      	movs	r3, #2
  }
}
 8007906:	0018      	movs	r0, r3
 8007908:	46bd      	mov	sp, r7
 800790a:	b007      	add	sp, #28
 800790c:	bd90      	pop	{r4, r7, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	80002400 	.word	0x80002400
 8007914:	fe00e800 	.word	0xfe00e800

08007918 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b5b0      	push	{r4, r5, r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	000c      	movs	r4, r1
 8007922:	0010      	movs	r0, r2
 8007924:	0019      	movs	r1, r3
 8007926:	250a      	movs	r5, #10
 8007928:	197b      	adds	r3, r7, r5
 800792a:	1c22      	adds	r2, r4, #0
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	2308      	movs	r3, #8
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	1c02      	adds	r2, r0, #0
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	1c0a      	adds	r2, r1, #0
 800793a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800793c:	1dbb      	adds	r3, r7, #6
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	2380      	movs	r3, #128	; 0x80
 8007944:	045c      	lsls	r4, r3, #17
 8007946:	197b      	adds	r3, r7, r5
 8007948:	8819      	ldrh	r1, [r3, #0]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4b23      	ldr	r3, [pc, #140]	; (80079dc <I2C_RequestMemoryWrite+0xc4>)
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	0023      	movs	r3, r4
 8007952:	f000 f9e9 	bl	8007d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007958:	6a39      	ldr	r1, [r7, #32]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	0018      	movs	r0, r3
 800795e:	f000 f902 	bl	8007b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8007962:	1e03      	subs	r3, r0, #0
 8007964:	d001      	beq.n	800796a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e033      	b.n	80079d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800796a:	1dbb      	adds	r3, r7, #6
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d107      	bne.n	8007982 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007972:	2308      	movs	r3, #8
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b2da      	uxtb	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
 8007980:	e019      	b.n	80079b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007982:	2308      	movs	r3, #8
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	0a1b      	lsrs	r3, r3, #8
 800798a:	b29b      	uxth	r3, r3
 800798c:	b2da      	uxtb	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	6a39      	ldr	r1, [r7, #32]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	0018      	movs	r0, r3
 800799c:	f000 f8e3 	bl	8007b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80079a0:	1e03      	subs	r3, r0, #0
 80079a2:	d001      	beq.n	80079a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e014      	b.n	80079d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079a8:	2308      	movs	r3, #8
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079b6:	6a3a      	ldr	r2, [r7, #32]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	0013      	movs	r3, r2
 80079c0:	2200      	movs	r2, #0
 80079c2:	2180      	movs	r1, #128	; 0x80
 80079c4:	f000 f890 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80079c8:	1e03      	subs	r3, r0, #0
 80079ca:	d001      	beq.n	80079d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	0018      	movs	r0, r3
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b004      	add	sp, #16
 80079d8:	bdb0      	pop	{r4, r5, r7, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	80002000 	.word	0x80002000

080079e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b5b0      	push	{r4, r5, r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	000c      	movs	r4, r1
 80079ea:	0010      	movs	r0, r2
 80079ec:	0019      	movs	r1, r3
 80079ee:	250a      	movs	r5, #10
 80079f0:	197b      	adds	r3, r7, r5
 80079f2:	1c22      	adds	r2, r4, #0
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	2308      	movs	r3, #8
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	1c02      	adds	r2, r0, #0
 80079fc:	801a      	strh	r2, [r3, #0]
 80079fe:	1dbb      	adds	r3, r7, #6
 8007a00:	1c0a      	adds	r2, r1, #0
 8007a02:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a04:	1dbb      	adds	r3, r7, #6
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	197b      	adds	r3, r7, r5
 8007a0c:	8819      	ldrh	r1, [r3, #0]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <I2C_RequestMemoryRead+0xc0>)
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	f000 f987 	bl	8007d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1c:	6a39      	ldr	r1, [r7, #32]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	0018      	movs	r0, r3
 8007a22:	f000 f8a0 	bl	8007b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a26:	1e03      	subs	r3, r0, #0
 8007a28:	d001      	beq.n	8007a2e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e033      	b.n	8007a96 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a2e:	1dbb      	adds	r3, r7, #6
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d107      	bne.n	8007a46 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a36:	2308      	movs	r3, #8
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	629a      	str	r2, [r3, #40]	; 0x28
 8007a44:	e019      	b.n	8007a7a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a46:	2308      	movs	r3, #8
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	0a1b      	lsrs	r3, r3, #8
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5a:	6a39      	ldr	r1, [r7, #32]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f000 f881 	bl	8007b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a64:	1e03      	subs	r3, r0, #0
 8007a66:	d001      	beq.n	8007a6c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e014      	b.n	8007a96 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	18fb      	adds	r3, r7, r3
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	0013      	movs	r3, r2
 8007a84:	2200      	movs	r2, #0
 8007a86:	2140      	movs	r1, #64	; 0x40
 8007a88:	f000 f82e 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007a8c:	1e03      	subs	r3, r0, #0
 8007a8e:	d001      	beq.n	8007a94 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	0018      	movs	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b004      	add	sp, #16
 8007a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	80002000 	.word	0x80002000

08007aa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d103      	bne.n	8007ac2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d007      	beq.n	8007ae0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2101      	movs	r1, #1
 8007adc:	430a      	orrs	r2, r1
 8007ade:	619a      	str	r2, [r3, #24]
  }
}
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b002      	add	sp, #8
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	1dfb      	adds	r3, r7, #7
 8007af6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af8:	e021      	b.n	8007b3e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	d01e      	beq.n	8007b3e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b00:	f7fe f81c 	bl	8005b3c <HAL_GetTick>
 8007b04:	0002      	movs	r2, r0
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d113      	bne.n	8007b3e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2241      	movs	r2, #65	; 0x41
 8007b26:	2120      	movs	r1, #32
 8007b28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2242      	movs	r2, #66	; 0x42
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2240      	movs	r2, #64	; 0x40
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e00f      	b.n	8007b5e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	425a      	negs	r2, r3
 8007b4e:	4153      	adcs	r3, r2
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	001a      	movs	r2, r3
 8007b54:	1dfb      	adds	r3, r7, #7
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d0ce      	beq.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b004      	add	sp, #16
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b72:	e02b      	b.n	8007bcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f000 f86e 	bl	8007c5c <I2C_IsAcknowledgeFailed>
 8007b80:	1e03      	subs	r3, r0, #0
 8007b82:	d001      	beq.n	8007b88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e029      	b.n	8007bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	d01e      	beq.n	8007bcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8e:	f7fd ffd5 	bl	8005b3c <HAL_GetTick>
 8007b92:	0002      	movs	r2, r0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d302      	bcc.n	8007ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d113      	bne.n	8007bcc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	2220      	movs	r2, #32
 8007baa:	431a      	orrs	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2241      	movs	r2, #65	; 0x41
 8007bb4:	2120      	movs	r1, #32
 8007bb6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2242      	movs	r2, #66	; 0x42
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e007      	b.n	8007bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d1cc      	bne.n	8007b74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bf0:	e028      	b.n	8007c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f000 f82f 	bl	8007c5c <I2C_IsAcknowledgeFailed>
 8007bfe:	1e03      	subs	r3, r0, #0
 8007c00:	d001      	beq.n	8007c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e026      	b.n	8007c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7fd ff99 	bl	8005b3c <HAL_GetTick>
 8007c0a:	0002      	movs	r2, r0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d113      	bne.n	8007c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c20:	2220      	movs	r2, #32
 8007c22:	431a      	orrs	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2241      	movs	r2, #65	; 0x41
 8007c2c:	2120      	movs	r1, #32
 8007c2e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2242      	movs	r2, #66	; 0x42
 8007c34:	2100      	movs	r1, #0
 8007c36:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2240      	movs	r2, #64	; 0x40
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e007      	b.n	8007c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d1cf      	bne.n	8007bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b004      	add	sp, #16
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2210      	movs	r2, #16
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d151      	bne.n	8007d1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c76:	e021      	b.n	8007cbc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	d01e      	beq.n	8007cbc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7e:	f7fd ff5d 	bl	8005b3c <HAL_GetTick>
 8007c82:	0002      	movs	r2, r0
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d302      	bcc.n	8007c94 <I2C_IsAcknowledgeFailed+0x38>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c98:	2220      	movs	r2, #32
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2241      	movs	r2, #65	; 0x41
 8007ca4:	2120      	movs	r1, #32
 8007ca6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2242      	movs	r2, #66	; 0x42
 8007cac:	2100      	movs	r1, #0
 8007cae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2240      	movs	r2, #64	; 0x40
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e02f      	b.n	8007d1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d1d6      	bne.n	8007c78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fee1 	bl	8007aa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	490d      	ldr	r1, [pc, #52]	; (8007d24 <I2C_IsAcknowledgeFailed+0xc8>)
 8007cee:	400a      	ands	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2241      	movs	r2, #65	; 0x41
 8007d02:	2120      	movs	r1, #32
 8007d04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2242      	movs	r2, #66	; 0x42
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2240      	movs	r2, #64	; 0x40
 8007d12:	2100      	movs	r1, #0
 8007d14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b004      	add	sp, #16
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	fe00e800 	.word	0xfe00e800

08007d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007d28:	b590      	push	{r4, r7, lr}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	0008      	movs	r0, r1
 8007d32:	0011      	movs	r1, r2
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	240a      	movs	r4, #10
 8007d38:	193b      	adds	r3, r7, r4
 8007d3a:	1c02      	adds	r2, r0, #0
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	2009      	movs	r0, #9
 8007d40:	183b      	adds	r3, r7, r0
 8007d42:	1c0a      	adds	r2, r1, #0
 8007d44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	6a3a      	ldr	r2, [r7, #32]
 8007d4e:	0d51      	lsrs	r1, r2, #21
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	00d2      	lsls	r2, r2, #3
 8007d54:	400a      	ands	r2, r1
 8007d56:	490e      	ldr	r1, [pc, #56]	; (8007d90 <I2C_TransferConfig+0x68>)
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	43d2      	mvns	r2, r2
 8007d5c:	401a      	ands	r2, r3
 8007d5e:	0011      	movs	r1, r2
 8007d60:	193b      	adds	r3, r7, r4
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	059b      	lsls	r3, r3, #22
 8007d66:	0d9a      	lsrs	r2, r3, #22
 8007d68:	183b      	adds	r3, r7, r0
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	0418      	lsls	r0, r3, #16
 8007d6e:	23ff      	movs	r3, #255	; 0xff
 8007d70:	041b      	lsls	r3, r3, #16
 8007d72:	4003      	ands	r3, r0
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b005      	add	sp, #20
 8007d8c:	bd90      	pop	{r4, r7, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	03ff63ff 	.word	0x03ff63ff

08007d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2241      	movs	r2, #65	; 0x41
 8007da2:	5c9b      	ldrb	r3, [r3, r2]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d138      	bne.n	8007e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2240      	movs	r2, #64	; 0x40
 8007dae:	5c9b      	ldrb	r3, [r3, r2]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e032      	b.n	8007e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2241      	movs	r2, #65	; 0x41
 8007dc4:	2124      	movs	r1, #36	; 0x24
 8007dc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	438a      	bics	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4911      	ldr	r1, [pc, #68]	; (8007e28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007de4:	400a      	ands	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2101      	movs	r1, #1
 8007e04:	430a      	orrs	r2, r1
 8007e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2241      	movs	r2, #65	; 0x41
 8007e0c:	2120      	movs	r1, #32
 8007e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2240      	movs	r2, #64	; 0x40
 8007e14:	2100      	movs	r1, #0
 8007e16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e1c:	2302      	movs	r3, #2
  }
}
 8007e1e:	0018      	movs	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	ffffefff 	.word	0xffffefff

08007e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2241      	movs	r2, #65	; 0x41
 8007e3a:	5c9b      	ldrb	r3, [r3, r2]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d139      	bne.n	8007eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2240      	movs	r2, #64	; 0x40
 8007e46:	5c9b      	ldrb	r3, [r3, r2]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e033      	b.n	8007eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2240      	movs	r2, #64	; 0x40
 8007e54:	2101      	movs	r1, #1
 8007e56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2241      	movs	r2, #65	; 0x41
 8007e5c:	2124      	movs	r1, #36	; 0x24
 8007e5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	438a      	bics	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a11      	ldr	r2, [pc, #68]	; (8007ec0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2241      	movs	r2, #65	; 0x41
 8007ea6:	2120      	movs	r1, #32
 8007ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2240      	movs	r2, #64	; 0x40
 8007eae:	2100      	movs	r1, #0
 8007eb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
  }
}
 8007eb8:	0018      	movs	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b004      	add	sp, #16
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	fffff0ff 	.word	0xfffff0ff

08007ec4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ec8:	4b04      	ldr	r3, [pc, #16]	; (8007edc <HAL_PWR_EnableBkUpAccess+0x18>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b03      	ldr	r3, [pc, #12]	; (8007edc <HAL_PWR_EnableBkUpAccess+0x18>)
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	0049      	lsls	r1, r1, #1
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	601a      	str	r2, [r3, #0]
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40007000 	.word	0x40007000

08007ee0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	000a      	movs	r2, r1
 8007eea:	1cfb      	adds	r3, r7, #3
 8007eec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <HAL_PWR_EnterSTOPMode+0x68>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2207      	movs	r2, #7
 8007efa:	4393      	bics	r3, r2
 8007efc:	001a      	movs	r2, r3
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <HAL_PWR_EnterSTOPMode+0x68>)
 8007f00:	2101      	movs	r1, #1
 8007f02:	430a      	orrs	r2, r1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e005      	b.n	8007f14 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <HAL_PWR_EnterSTOPMode+0x68>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <HAL_PWR_EnterSTOPMode+0x68>)
 8007f0e:	2107      	movs	r1, #7
 8007f10:	438a      	bics	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007f14:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007f20:	1cfb      	adds	r3, r7, #3
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007f28:	bf30      	wfi
 8007f2a:	e002      	b.n	8007f32 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007f2c:	bf40      	sev
    __WFE();
 8007f2e:	bf20      	wfe
    __WFE();
 8007f30:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8007f34:	691a      	ldr	r2, [r3, #16]
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <HAL_PWR_EnterSTOPMode+0x6c>)
 8007f38:	2104      	movs	r1, #4
 8007f3a:	438a      	bics	r2, r1
 8007f3c:	611a      	str	r2, [r3, #16]
}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b002      	add	sp, #8
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	40007000 	.word	0x40007000
 8007f4c:	e000ed00 	.word	0xe000ed00

08007f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007f58:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007f5e:	4013      	ands	r3, r2
 8007f60:	0019      	movs	r1, r3
 8007f62:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d11f      	bne.n	8007fb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8007f74:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	0013      	movs	r3, r2
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	189b      	adds	r3, r3, r2
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	4912      	ldr	r1, [pc, #72]	; (8007fcc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7f8 f8c6 	bl	8000114 <__udivsi3>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f8e:	e008      	b.n	8007fa2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e001      	b.n	8007fa2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e009      	b.n	8007fb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	2380      	movs	r3, #128	; 0x80
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	401a      	ands	r2, r3
 8007fac:	2380      	movs	r3, #128	; 0x80
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d0ed      	beq.n	8007f90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b004      	add	sp, #16
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	40007000 	.word	0x40007000
 8007fc4:	fffff9ff 	.word	0xfffff9ff
 8007fc8:	20000080 	.word	0x20000080
 8007fcc:	000f4240 	.word	0x000f4240

08007fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e2f9      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d100      	bne.n	8007fee <HAL_RCC_OscConfig+0x1e>
 8007fec:	e07c      	b.n	80080e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fee:	4bc3      	ldr	r3, [pc, #780]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2238      	movs	r2, #56	; 0x38
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ff8:	4bc0      	ldr	r3, [pc, #768]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	4013      	ands	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b10      	cmp	r3, #16
 8008006:	d102      	bne.n	800800e <HAL_RCC_OscConfig+0x3e>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d002      	beq.n	8008014 <HAL_RCC_OscConfig+0x44>
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d10b      	bne.n	800802c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008014:	4bb9      	ldr	r3, [pc, #740]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	4013      	ands	r3, r2
 800801e:	d062      	beq.n	80080e6 <HAL_RCC_OscConfig+0x116>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d15e      	bne.n	80080e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e2d4      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	025b      	lsls	r3, r3, #9
 8008034:	429a      	cmp	r2, r3
 8008036:	d107      	bne.n	8008048 <HAL_RCC_OscConfig+0x78>
 8008038:	4bb0      	ldr	r3, [pc, #704]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	4baf      	ldr	r3, [pc, #700]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	0249      	lsls	r1, r1, #9
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e020      	b.n	800808a <HAL_RCC_OscConfig+0xba>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	23a0      	movs	r3, #160	; 0xa0
 800804e:	02db      	lsls	r3, r3, #11
 8008050:	429a      	cmp	r2, r3
 8008052:	d10e      	bne.n	8008072 <HAL_RCC_OscConfig+0xa2>
 8008054:	4ba9      	ldr	r3, [pc, #676]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4ba8      	ldr	r3, [pc, #672]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	02c9      	lsls	r1, r1, #11
 800805e:	430a      	orrs	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	4ba6      	ldr	r3, [pc, #664]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4ba5      	ldr	r3, [pc, #660]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	0249      	lsls	r1, r1, #9
 800806c:	430a      	orrs	r2, r1
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e00b      	b.n	800808a <HAL_RCC_OscConfig+0xba>
 8008072:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4ba1      	ldr	r3, [pc, #644]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008078:	49a1      	ldr	r1, [pc, #644]	; (8008300 <HAL_RCC_OscConfig+0x330>)
 800807a:	400a      	ands	r2, r1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	4b9f      	ldr	r3, [pc, #636]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b9e      	ldr	r3, [pc, #632]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008084:	499f      	ldr	r1, [pc, #636]	; (8008304 <HAL_RCC_OscConfig+0x334>)
 8008086:	400a      	ands	r2, r1
 8008088:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d014      	beq.n	80080bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008092:	f7fd fd53 	bl	8005b3c <HAL_GetTick>
 8008096:	0003      	movs	r3, r0
 8008098:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800809c:	f7fd fd4e 	bl	8005b3c <HAL_GetTick>
 80080a0:	0002      	movs	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b64      	cmp	r3, #100	; 0x64
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e293      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ae:	4b93      	ldr	r3, [pc, #588]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	2380      	movs	r3, #128	; 0x80
 80080b4:	029b      	lsls	r3, r3, #10
 80080b6:	4013      	ands	r3, r2
 80080b8:	d0f0      	beq.n	800809c <HAL_RCC_OscConfig+0xcc>
 80080ba:	e015      	b.n	80080e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fd fd3e 	bl	8005b3c <HAL_GetTick>
 80080c0:	0003      	movs	r3, r0
 80080c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c6:	f7fd fd39 	bl	8005b3c <HAL_GetTick>
 80080ca:	0002      	movs	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b64      	cmp	r3, #100	; 0x64
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e27e      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080d8:	4b88      	ldr	r3, [pc, #544]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	029b      	lsls	r3, r3, #10
 80080e0:	4013      	ands	r3, r2
 80080e2:	d1f0      	bne.n	80080c6 <HAL_RCC_OscConfig+0xf6>
 80080e4:	e000      	b.n	80080e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2202      	movs	r2, #2
 80080ee:	4013      	ands	r3, r2
 80080f0:	d100      	bne.n	80080f4 <HAL_RCC_OscConfig+0x124>
 80080f2:	e099      	b.n	8008228 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080f4:	4b81      	ldr	r3, [pc, #516]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2238      	movs	r2, #56	; 0x38
 80080fa:	4013      	ands	r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080fe:	4b7f      	ldr	r3, [pc, #508]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2203      	movs	r2, #3
 8008104:	4013      	ands	r3, r2
 8008106:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b10      	cmp	r3, #16
 800810c:	d102      	bne.n	8008114 <HAL_RCC_OscConfig+0x144>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d002      	beq.n	800811a <HAL_RCC_OscConfig+0x14a>
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d135      	bne.n	8008186 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800811a:	4b78      	ldr	r3, [pc, #480]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	4013      	ands	r3, r2
 8008124:	d005      	beq.n	8008132 <HAL_RCC_OscConfig+0x162>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e251      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008132:	4b72      	ldr	r3, [pc, #456]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4a74      	ldr	r2, [pc, #464]	; (8008308 <HAL_RCC_OscConfig+0x338>)
 8008138:	4013      	ands	r3, r2
 800813a:	0019      	movs	r1, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	021a      	lsls	r2, r3, #8
 8008142:	4b6e      	ldr	r3, [pc, #440]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d112      	bne.n	8008174 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800814e:	4b6b      	ldr	r3, [pc, #428]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a6e      	ldr	r2, [pc, #440]	; (800830c <HAL_RCC_OscConfig+0x33c>)
 8008154:	4013      	ands	r3, r2
 8008156:	0019      	movs	r1, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	4b67      	ldr	r3, [pc, #412]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800815e:	430a      	orrs	r2, r1
 8008160:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008162:	4b66      	ldr	r3, [pc, #408]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	0adb      	lsrs	r3, r3, #11
 8008168:	2207      	movs	r2, #7
 800816a:	4013      	ands	r3, r2
 800816c:	4a68      	ldr	r2, [pc, #416]	; (8008310 <HAL_RCC_OscConfig+0x340>)
 800816e:	40da      	lsrs	r2, r3
 8008170:	4b68      	ldr	r3, [pc, #416]	; (8008314 <HAL_RCC_OscConfig+0x344>)
 8008172:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008174:	4b68      	ldr	r3, [pc, #416]	; (8008318 <HAL_RCC_OscConfig+0x348>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	0018      	movs	r0, r3
 800817a:	f7fd fc83 	bl	8005a84 <HAL_InitTick>
 800817e:	1e03      	subs	r3, r0, #0
 8008180:	d051      	beq.n	8008226 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e227      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d030      	beq.n	80081f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800818e:	4b5b      	ldr	r3, [pc, #364]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a5e      	ldr	r2, [pc, #376]	; (800830c <HAL_RCC_OscConfig+0x33c>)
 8008194:	4013      	ands	r3, r2
 8008196:	0019      	movs	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	4b57      	ldr	r3, [pc, #348]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800819e:	430a      	orrs	r2, r1
 80081a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80081a2:	4b56      	ldr	r3, [pc, #344]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4b55      	ldr	r3, [pc, #340]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081a8:	2180      	movs	r1, #128	; 0x80
 80081aa:	0049      	lsls	r1, r1, #1
 80081ac:	430a      	orrs	r2, r1
 80081ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b0:	f7fd fcc4 	bl	8005b3c <HAL_GetTick>
 80081b4:	0003      	movs	r3, r0
 80081b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ba:	f7fd fcbf 	bl	8005b3c <HAL_GetTick>
 80081be:	0002      	movs	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e204      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081cc:	4b4b      	ldr	r3, [pc, #300]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	4013      	ands	r3, r2
 80081d6:	d0f0      	beq.n	80081ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d8:	4b48      	ldr	r3, [pc, #288]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4a4a      	ldr	r2, [pc, #296]	; (8008308 <HAL_RCC_OscConfig+0x338>)
 80081de:	4013      	ands	r3, r2
 80081e0:	0019      	movs	r1, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	4b44      	ldr	r3, [pc, #272]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	e01b      	b.n	8008228 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80081f0:	4b42      	ldr	r3, [pc, #264]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b41      	ldr	r3, [pc, #260]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80081f6:	4949      	ldr	r1, [pc, #292]	; (800831c <HAL_RCC_OscConfig+0x34c>)
 80081f8:	400a      	ands	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fd fc9e 	bl	8005b3c <HAL_GetTick>
 8008200:	0003      	movs	r3, r0
 8008202:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008206:	f7fd fc99 	bl	8005b3c <HAL_GetTick>
 800820a:	0002      	movs	r2, r0
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e1de      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008218:	4b38      	ldr	r3, [pc, #224]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4013      	ands	r3, r2
 8008222:	d1f0      	bne.n	8008206 <HAL_RCC_OscConfig+0x236>
 8008224:	e000      	b.n	8008228 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008226:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2208      	movs	r2, #8
 800822e:	4013      	ands	r3, r2
 8008230:	d047      	beq.n	80082c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008232:	4b32      	ldr	r3, [pc, #200]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2238      	movs	r2, #56	; 0x38
 8008238:	4013      	ands	r3, r2
 800823a:	2b18      	cmp	r3, #24
 800823c:	d10a      	bne.n	8008254 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800823e:	4b2f      	ldr	r3, [pc, #188]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008242:	2202      	movs	r2, #2
 8008244:	4013      	ands	r3, r2
 8008246:	d03c      	beq.n	80082c2 <HAL_RCC_OscConfig+0x2f2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d138      	bne.n	80082c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e1c0      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d019      	beq.n	8008290 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800825c:	4b27      	ldr	r3, [pc, #156]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 800825e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008260:	4b26      	ldr	r3, [pc, #152]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008262:	2101      	movs	r1, #1
 8008264:	430a      	orrs	r2, r1
 8008266:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fd fc68 	bl	8005b3c <HAL_GetTick>
 800826c:	0003      	movs	r3, r0
 800826e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008272:	f7fd fc63 	bl	8005b3c <HAL_GetTick>
 8008276:	0002      	movs	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e1a8      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008288:	2202      	movs	r2, #2
 800828a:	4013      	ands	r3, r2
 800828c:	d0f1      	beq.n	8008272 <HAL_RCC_OscConfig+0x2a2>
 800828e:	e018      	b.n	80082c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008294:	4b19      	ldr	r3, [pc, #100]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 8008296:	2101      	movs	r1, #1
 8008298:	438a      	bics	r2, r1
 800829a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829c:	f7fd fc4e 	bl	8005b3c <HAL_GetTick>
 80082a0:	0003      	movs	r3, r0
 80082a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a6:	f7fd fc49 	bl	8005b3c <HAL_GetTick>
 80082aa:	0002      	movs	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e18e      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082b8:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80082ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082bc:	2202      	movs	r2, #2
 80082be:	4013      	ands	r3, r2
 80082c0:	d1f1      	bne.n	80082a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2204      	movs	r2, #4
 80082c8:	4013      	ands	r3, r2
 80082ca:	d100      	bne.n	80082ce <HAL_RCC_OscConfig+0x2fe>
 80082cc:	e0c6      	b.n	800845c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ce:	231f      	movs	r3, #31
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2238      	movs	r2, #56	; 0x38
 80082dc:	4013      	ands	r3, r2
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d11e      	bne.n	8008320 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <HAL_RCC_OscConfig+0x32c>)
 80082e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e6:	2202      	movs	r2, #2
 80082e8:	4013      	ands	r3, r2
 80082ea:	d100      	bne.n	80082ee <HAL_RCC_OscConfig+0x31e>
 80082ec:	e0b6      	b.n	800845c <HAL_RCC_OscConfig+0x48c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d000      	beq.n	80082f8 <HAL_RCC_OscConfig+0x328>
 80082f6:	e0b1      	b.n	800845c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e16c      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
 80082fc:	40021000 	.word	0x40021000
 8008300:	fffeffff 	.word	0xfffeffff
 8008304:	fffbffff 	.word	0xfffbffff
 8008308:	ffff80ff 	.word	0xffff80ff
 800830c:	ffffc7ff 	.word	0xffffc7ff
 8008310:	00f42400 	.word	0x00f42400
 8008314:	20000080 	.word	0x20000080
 8008318:	20000020 	.word	0x20000020
 800831c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008320:	4baf      	ldr	r3, [pc, #700]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008324:	2380      	movs	r3, #128	; 0x80
 8008326:	055b      	lsls	r3, r3, #21
 8008328:	4013      	ands	r3, r2
 800832a:	d101      	bne.n	8008330 <HAL_RCC_OscConfig+0x360>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <HAL_RCC_OscConfig+0x362>
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d011      	beq.n	800835a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008336:	4baa      	ldr	r3, [pc, #680]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833a:	4ba9      	ldr	r3, [pc, #676]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 800833c:	2180      	movs	r1, #128	; 0x80
 800833e:	0549      	lsls	r1, r1, #21
 8008340:	430a      	orrs	r2, r1
 8008342:	63da      	str	r2, [r3, #60]	; 0x3c
 8008344:	4ba6      	ldr	r3, [pc, #664]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	055b      	lsls	r3, r3, #21
 800834c:	4013      	ands	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008352:	231f      	movs	r3, #31
 8008354:	18fb      	adds	r3, r7, r3
 8008356:	2201      	movs	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800835a:	4ba2      	ldr	r3, [pc, #648]	; (80085e4 <HAL_RCC_OscConfig+0x614>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	2380      	movs	r3, #128	; 0x80
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4013      	ands	r3, r2
 8008364:	d11a      	bne.n	800839c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008366:	4b9f      	ldr	r3, [pc, #636]	; (80085e4 <HAL_RCC_OscConfig+0x614>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b9e      	ldr	r3, [pc, #632]	; (80085e4 <HAL_RCC_OscConfig+0x614>)
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0049      	lsls	r1, r1, #1
 8008370:	430a      	orrs	r2, r1
 8008372:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008374:	f7fd fbe2 	bl	8005b3c <HAL_GetTick>
 8008378:	0003      	movs	r3, r0
 800837a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800837e:	f7fd fbdd 	bl	8005b3c <HAL_GetTick>
 8008382:	0002      	movs	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e122      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008390:	4b94      	ldr	r3, [pc, #592]	; (80085e4 <HAL_RCC_OscConfig+0x614>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	4013      	ands	r3, r2
 800839a:	d0f0      	beq.n	800837e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d106      	bne.n	80083b2 <HAL_RCC_OscConfig+0x3e2>
 80083a4:	4b8e      	ldr	r3, [pc, #568]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083a8:	4b8d      	ldr	r3, [pc, #564]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083aa:	2101      	movs	r1, #1
 80083ac:	430a      	orrs	r2, r1
 80083ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80083b0:	e01c      	b.n	80083ec <HAL_RCC_OscConfig+0x41c>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d10c      	bne.n	80083d4 <HAL_RCC_OscConfig+0x404>
 80083ba:	4b89      	ldr	r3, [pc, #548]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083be:	4b88      	ldr	r3, [pc, #544]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083c0:	2104      	movs	r1, #4
 80083c2:	430a      	orrs	r2, r1
 80083c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80083c6:	4b86      	ldr	r3, [pc, #536]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083ca:	4b85      	ldr	r3, [pc, #532]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083cc:	2101      	movs	r1, #1
 80083ce:	430a      	orrs	r2, r1
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80083d2:	e00b      	b.n	80083ec <HAL_RCC_OscConfig+0x41c>
 80083d4:	4b82      	ldr	r3, [pc, #520]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083d8:	4b81      	ldr	r3, [pc, #516]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083da:	2101      	movs	r1, #1
 80083dc:	438a      	bics	r2, r1
 80083de:	65da      	str	r2, [r3, #92]	; 0x5c
 80083e0:	4b7f      	ldr	r3, [pc, #508]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083e4:	4b7e      	ldr	r3, [pc, #504]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80083e6:	2104      	movs	r1, #4
 80083e8:	438a      	bics	r2, r1
 80083ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d014      	beq.n	800841e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f4:	f7fd fba2 	bl	8005b3c <HAL_GetTick>
 80083f8:	0003      	movs	r3, r0
 80083fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083fc:	e009      	b.n	8008412 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083fe:	f7fd fb9d 	bl	8005b3c <HAL_GetTick>
 8008402:	0002      	movs	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	4a77      	ldr	r2, [pc, #476]	; (80085e8 <HAL_RCC_OscConfig+0x618>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e0e1      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008412:	4b73      	ldr	r3, [pc, #460]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008416:	2202      	movs	r2, #2
 8008418:	4013      	ands	r3, r2
 800841a:	d0f0      	beq.n	80083fe <HAL_RCC_OscConfig+0x42e>
 800841c:	e013      	b.n	8008446 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7fd fb8d 	bl	8005b3c <HAL_GetTick>
 8008422:	0003      	movs	r3, r0
 8008424:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008426:	e009      	b.n	800843c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008428:	f7fd fb88 	bl	8005b3c <HAL_GetTick>
 800842c:	0002      	movs	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a6d      	ldr	r2, [pc, #436]	; (80085e8 <HAL_RCC_OscConfig+0x618>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e0cc      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800843c:	4b68      	ldr	r3, [pc, #416]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 800843e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008440:	2202      	movs	r2, #2
 8008442:	4013      	ands	r3, r2
 8008444:	d1f0      	bne.n	8008428 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008446:	231f      	movs	r3, #31
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d105      	bne.n	800845c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008450:	4b63      	ldr	r3, [pc, #396]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008454:	4b62      	ldr	r3, [pc, #392]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008456:	4965      	ldr	r1, [pc, #404]	; (80085ec <HAL_RCC_OscConfig+0x61c>)
 8008458:	400a      	ands	r2, r1
 800845a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d100      	bne.n	8008466 <HAL_RCC_OscConfig+0x496>
 8008464:	e0b6      	b.n	80085d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008466:	4b5e      	ldr	r3, [pc, #376]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2238      	movs	r2, #56	; 0x38
 800846c:	4013      	ands	r3, r2
 800846e:	2b10      	cmp	r3, #16
 8008470:	d100      	bne.n	8008474 <HAL_RCC_OscConfig+0x4a4>
 8008472:	e07e      	b.n	8008572 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d153      	bne.n	8008524 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b58      	ldr	r3, [pc, #352]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b57      	ldr	r3, [pc, #348]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008482:	495b      	ldr	r1, [pc, #364]	; (80085f0 <HAL_RCC_OscConfig+0x620>)
 8008484:	400a      	ands	r2, r1
 8008486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fd fb58 	bl	8005b3c <HAL_GetTick>
 800848c:	0003      	movs	r3, r0
 800848e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008490:	e008      	b.n	80084a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008492:	f7fd fb53 	bl	8005b3c <HAL_GetTick>
 8008496:	0002      	movs	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e098      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a4:	4b4e      	ldr	r3, [pc, #312]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	2380      	movs	r3, #128	; 0x80
 80084aa:	049b      	lsls	r3, r3, #18
 80084ac:	4013      	ands	r3, r2
 80084ae:	d1f0      	bne.n	8008492 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084b0:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	4a4f      	ldr	r2, [pc, #316]	; (80085f4 <HAL_RCC_OscConfig+0x624>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	0019      	movs	r1, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1a      	ldr	r2, [r3, #32]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	431a      	orrs	r2, r3
 80084d8:	4b41      	ldr	r3, [pc, #260]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084da:	430a      	orrs	r2, r1
 80084dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084de:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b3f      	ldr	r3, [pc, #252]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084e4:	2180      	movs	r1, #128	; 0x80
 80084e6:	0449      	lsls	r1, r1, #17
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80084ec:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	4b3b      	ldr	r3, [pc, #236]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	0549      	lsls	r1, r1, #21
 80084f6:	430a      	orrs	r2, r1
 80084f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fa:	f7fd fb1f 	bl	8005b3c <HAL_GetTick>
 80084fe:	0003      	movs	r3, r0
 8008500:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008504:	f7fd fb1a 	bl	8005b3c <HAL_GetTick>
 8008508:	0002      	movs	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e05f      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008516:	4b32      	ldr	r3, [pc, #200]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	2380      	movs	r3, #128	; 0x80
 800851c:	049b      	lsls	r3, r3, #18
 800851e:	4013      	ands	r3, r2
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x534>
 8008522:	e057      	b.n	80085d4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008524:	4b2e      	ldr	r3, [pc, #184]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 800852a:	4931      	ldr	r1, [pc, #196]	; (80085f0 <HAL_RCC_OscConfig+0x620>)
 800852c:	400a      	ands	r2, r1
 800852e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008530:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	4b2a      	ldr	r3, [pc, #168]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008536:	2103      	movs	r1, #3
 8008538:	438a      	bics	r2, r1
 800853a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800853c:	4b28      	ldr	r3, [pc, #160]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008542:	492d      	ldr	r1, [pc, #180]	; (80085f8 <HAL_RCC_OscConfig+0x628>)
 8008544:	400a      	ands	r2, r1
 8008546:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fd faf8 	bl	8005b3c <HAL_GetTick>
 800854c:	0003      	movs	r3, r0
 800854e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008550:	e008      	b.n	8008564 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008552:	f7fd faf3 	bl	8005b3c <HAL_GetTick>
 8008556:	0002      	movs	r2, r0
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e038      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008564:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	049b      	lsls	r3, r3, #18
 800856c:	4013      	ands	r3, r2
 800856e:	d1f0      	bne.n	8008552 <HAL_RCC_OscConfig+0x582>
 8008570:	e030      	b.n	80085d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d101      	bne.n	800857e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e02b      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800857e:	4b18      	ldr	r3, [pc, #96]	; (80085e0 <HAL_RCC_OscConfig+0x610>)
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2203      	movs	r2, #3
 8008588:	401a      	ands	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	429a      	cmp	r2, r3
 8008590:	d11e      	bne.n	80085d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2270      	movs	r2, #112	; 0x70
 8008596:	401a      	ands	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859c:	429a      	cmp	r2, r3
 800859e:	d117      	bne.n	80085d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	23fe      	movs	r3, #254	; 0xfe
 80085a4:	01db      	lsls	r3, r3, #7
 80085a6:	401a      	ands	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d10e      	bne.n	80085d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	23f8      	movs	r3, #248	; 0xf8
 80085b6:	039b      	lsls	r3, r3, #14
 80085b8:	401a      	ands	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80085be:	429a      	cmp	r2, r3
 80085c0:	d106      	bne.n	80085d0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	0f5b      	lsrs	r3, r3, #29
 80085c6:	075a      	lsls	r2, r3, #29
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d001      	beq.n	80085d4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	0018      	movs	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	b008      	add	sp, #32
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	40021000 	.word	0x40021000
 80085e4:	40007000 	.word	0x40007000
 80085e8:	00001388 	.word	0x00001388
 80085ec:	efffffff 	.word	0xefffffff
 80085f0:	feffffff 	.word	0xfeffffff
 80085f4:	1fc1808c 	.word	0x1fc1808c
 80085f8:	effeffff 	.word	0xeffeffff

080085fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0e9      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008610:	4b76      	ldr	r3, [pc, #472]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2207      	movs	r2, #7
 8008616:	4013      	ands	r3, r2
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d91e      	bls.n	800865c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861e:	4b73      	ldr	r3, [pc, #460]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2207      	movs	r2, #7
 8008624:	4393      	bics	r3, r2
 8008626:	0019      	movs	r1, r3
 8008628:	4b70      	ldr	r3, [pc, #448]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008630:	f7fd fa84 	bl	8005b3c <HAL_GetTick>
 8008634:	0003      	movs	r3, r0
 8008636:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008638:	e009      	b.n	800864e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800863a:	f7fd fa7f 	bl	8005b3c <HAL_GetTick>
 800863e:	0002      	movs	r2, r0
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	4a6a      	ldr	r2, [pc, #424]	; (80087f0 <HAL_RCC_ClockConfig+0x1f4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d901      	bls.n	800864e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e0ca      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800864e:	4b67      	ldr	r3, [pc, #412]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2207      	movs	r2, #7
 8008654:	4013      	ands	r3, r2
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d1ee      	bne.n	800863a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2202      	movs	r2, #2
 8008662:	4013      	ands	r3, r2
 8008664:	d015      	beq.n	8008692 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2204      	movs	r2, #4
 800866c:	4013      	ands	r3, r2
 800866e:	d006      	beq.n	800867e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008670:	4b60      	ldr	r3, [pc, #384]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	4b5f      	ldr	r3, [pc, #380]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 8008676:	21e0      	movs	r1, #224	; 0xe0
 8008678:	01c9      	lsls	r1, r1, #7
 800867a:	430a      	orrs	r2, r1
 800867c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800867e:	4b5d      	ldr	r3, [pc, #372]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	4a5d      	ldr	r2, [pc, #372]	; (80087f8 <HAL_RCC_ClockConfig+0x1fc>)
 8008684:	4013      	ands	r3, r2
 8008686:	0019      	movs	r1, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	4b59      	ldr	r3, [pc, #356]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 800868e:	430a      	orrs	r2, r1
 8008690:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	4013      	ands	r3, r2
 800869a:	d057      	beq.n	800874c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d107      	bne.n	80086b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086a4:	4b53      	ldr	r3, [pc, #332]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	029b      	lsls	r3, r3, #10
 80086ac:	4013      	ands	r3, r2
 80086ae:	d12b      	bne.n	8008708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e097      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d107      	bne.n	80086cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086bc:	4b4d      	ldr	r3, [pc, #308]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	049b      	lsls	r3, r3, #18
 80086c4:	4013      	ands	r3, r2
 80086c6:	d11f      	bne.n	8008708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e08b      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d107      	bne.n	80086e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086d4:	4b47      	ldr	r3, [pc, #284]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	2380      	movs	r3, #128	; 0x80
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4013      	ands	r3, r2
 80086de:	d113      	bne.n	8008708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e07f      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d106      	bne.n	80086fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086ec:	4b41      	ldr	r3, [pc, #260]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80086ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f0:	2202      	movs	r2, #2
 80086f2:	4013      	ands	r3, r2
 80086f4:	d108      	bne.n	8008708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e074      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086fa:	4b3e      	ldr	r3, [pc, #248]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	2202      	movs	r2, #2
 8008700:	4013      	ands	r3, r2
 8008702:	d101      	bne.n	8008708 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e06d      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008708:	4b3a      	ldr	r3, [pc, #232]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2207      	movs	r2, #7
 800870e:	4393      	bics	r3, r2
 8008710:	0019      	movs	r1, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	4b37      	ldr	r3, [pc, #220]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871c:	f7fd fa0e 	bl	8005b3c <HAL_GetTick>
 8008720:	0003      	movs	r3, r0
 8008722:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008724:	e009      	b.n	800873a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008726:	f7fd fa09 	bl	8005b3c <HAL_GetTick>
 800872a:	0002      	movs	r2, r0
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	4a2f      	ldr	r2, [pc, #188]	; (80087f0 <HAL_RCC_ClockConfig+0x1f4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d901      	bls.n	800873a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e054      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800873a:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	2238      	movs	r2, #56	; 0x38
 8008740:	401a      	ands	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	429a      	cmp	r2, r3
 800874a:	d1ec      	bne.n	8008726 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800874c:	4b27      	ldr	r3, [pc, #156]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2207      	movs	r2, #7
 8008752:	4013      	ands	r3, r2
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d21e      	bcs.n	8008798 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875a:	4b24      	ldr	r3, [pc, #144]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2207      	movs	r2, #7
 8008760:	4393      	bics	r3, r2
 8008762:	0019      	movs	r1, r3
 8008764:	4b21      	ldr	r3, [pc, #132]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800876c:	f7fd f9e6 	bl	8005b3c <HAL_GetTick>
 8008770:	0003      	movs	r3, r0
 8008772:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008774:	e009      	b.n	800878a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008776:	f7fd f9e1 	bl	8005b3c <HAL_GetTick>
 800877a:	0002      	movs	r2, r0
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <HAL_RCC_ClockConfig+0x1f4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e02c      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800878a:	4b18      	ldr	r3, [pc, #96]	; (80087ec <HAL_RCC_ClockConfig+0x1f0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2207      	movs	r2, #7
 8008790:	4013      	ands	r3, r2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	429a      	cmp	r2, r3
 8008796:	d1ee      	bne.n	8008776 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2204      	movs	r2, #4
 800879e:	4013      	ands	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	4a15      	ldr	r2, [pc, #84]	; (80087fc <HAL_RCC_ClockConfig+0x200>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	0019      	movs	r1, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80087b2:	430a      	orrs	r2, r1
 80087b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80087b6:	f000 f829 	bl	800880c <HAL_RCC_GetSysClockFreq>
 80087ba:	0001      	movs	r1, r0
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <HAL_RCC_ClockConfig+0x1f8>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	220f      	movs	r2, #15
 80087c4:	401a      	ands	r2, r3
 80087c6:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <HAL_RCC_ClockConfig+0x204>)
 80087c8:	0092      	lsls	r2, r2, #2
 80087ca:	58d3      	ldr	r3, [r2, r3]
 80087cc:	221f      	movs	r2, #31
 80087ce:	4013      	ands	r3, r2
 80087d0:	000a      	movs	r2, r1
 80087d2:	40da      	lsrs	r2, r3
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <HAL_RCC_ClockConfig+0x208>)
 80087d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <HAL_RCC_ClockConfig+0x20c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fd f951 	bl	8005a84 <HAL_InitTick>
 80087e2:	0003      	movs	r3, r0
}
 80087e4:	0018      	movs	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b004      	add	sp, #16
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40022000 	.word	0x40022000
 80087f0:	00001388 	.word	0x00001388
 80087f4:	40021000 	.word	0x40021000
 80087f8:	fffff0ff 	.word	0xfffff0ff
 80087fc:	ffff8fff 	.word	0xffff8fff
 8008800:	080157f8 	.word	0x080157f8
 8008804:	20000080 	.word	0x20000080
 8008808:	20000020 	.word	0x20000020

0800880c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008812:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	2238      	movs	r2, #56	; 0x38
 8008818:	4013      	ands	r3, r2
 800881a:	d10f      	bne.n	800883c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800881c:	4b39      	ldr	r3, [pc, #228]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	0adb      	lsrs	r3, r3, #11
 8008822:	2207      	movs	r2, #7
 8008824:	4013      	ands	r3, r2
 8008826:	2201      	movs	r2, #1
 8008828:	409a      	lsls	r2, r3
 800882a:	0013      	movs	r3, r2
 800882c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	4835      	ldr	r0, [pc, #212]	; (8008908 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008832:	f7f7 fc6f 	bl	8000114 <__udivsi3>
 8008836:	0003      	movs	r3, r0
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	e05d      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800883c:	4b31      	ldr	r3, [pc, #196]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2238      	movs	r2, #56	; 0x38
 8008842:	4013      	ands	r3, r2
 8008844:	2b08      	cmp	r3, #8
 8008846:	d102      	bne.n	800884e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008848:	4b30      	ldr	r3, [pc, #192]	; (800890c <HAL_RCC_GetSysClockFreq+0x100>)
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	e054      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800884e:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2238      	movs	r2, #56	; 0x38
 8008854:	4013      	ands	r3, r2
 8008856:	2b10      	cmp	r3, #16
 8008858:	d138      	bne.n	80088cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800885a:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2203      	movs	r2, #3
 8008860:	4013      	ands	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008864:	4b27      	ldr	r3, [pc, #156]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	091b      	lsrs	r3, r3, #4
 800886a:	2207      	movs	r2, #7
 800886c:	4013      	ands	r3, r2
 800886e:	3301      	adds	r3, #1
 8008870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d10d      	bne.n	8008894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	4824      	ldr	r0, [pc, #144]	; (800890c <HAL_RCC_GetSysClockFreq+0x100>)
 800887c:	f7f7 fc4a 	bl	8000114 <__udivsi3>
 8008880:	0003      	movs	r3, r0
 8008882:	0019      	movs	r1, r3
 8008884:	4b1f      	ldr	r3, [pc, #124]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	0a1b      	lsrs	r3, r3, #8
 800888a:	227f      	movs	r2, #127	; 0x7f
 800888c:	4013      	ands	r3, r2
 800888e:	434b      	muls	r3, r1
 8008890:	617b      	str	r3, [r7, #20]
        break;
 8008892:	e00d      	b.n	80088b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	481c      	ldr	r0, [pc, #112]	; (8008908 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008898:	f7f7 fc3c 	bl	8000114 <__udivsi3>
 800889c:	0003      	movs	r3, r0
 800889e:	0019      	movs	r1, r3
 80088a0:	4b18      	ldr	r3, [pc, #96]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	227f      	movs	r2, #127	; 0x7f
 80088a8:	4013      	ands	r3, r2
 80088aa:	434b      	muls	r3, r1
 80088ac:	617b      	str	r3, [r7, #20]
        break;
 80088ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	0f5b      	lsrs	r3, r3, #29
 80088b6:	2207      	movs	r2, #7
 80088b8:	4013      	ands	r3, r2
 80088ba:	3301      	adds	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	6978      	ldr	r0, [r7, #20]
 80088c2:	f7f7 fc27 	bl	8000114 <__udivsi3>
 80088c6:	0003      	movs	r3, r0
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	e015      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2238      	movs	r2, #56	; 0x38
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d103      	bne.n	80088e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	e00b      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80088e0:	4b08      	ldr	r3, [pc, #32]	; (8008904 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2238      	movs	r2, #56	; 0x38
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b18      	cmp	r3, #24
 80088ea:	d103      	bne.n	80088f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80088ec:	23fa      	movs	r3, #250	; 0xfa
 80088ee:	01db      	lsls	r3, r3, #7
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	e001      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088f8:	693b      	ldr	r3, [r7, #16]
}
 80088fa:	0018      	movs	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b006      	add	sp, #24
 8008900:	bd80      	pop	{r7, pc}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	40021000 	.word	0x40021000
 8008908:	00f42400 	.word	0x00f42400
 800890c:	007a1200 	.word	0x007a1200

08008910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008918:	2313      	movs	r3, #19
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	2200      	movs	r2, #0
 800891e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008920:	2312      	movs	r3, #18
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	029b      	lsls	r3, r3, #10
 8008930:	4013      	ands	r3, r2
 8008932:	d100      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008934:	e0a3      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008936:	2011      	movs	r0, #17
 8008938:	183b      	adds	r3, r7, r0
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800893e:	4b86      	ldr	r3, [pc, #536]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008942:	2380      	movs	r3, #128	; 0x80
 8008944:	055b      	lsls	r3, r3, #21
 8008946:	4013      	ands	r3, r2
 8008948:	d110      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800894a:	4b83      	ldr	r3, [pc, #524]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800894c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800894e:	4b82      	ldr	r3, [pc, #520]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	0549      	lsls	r1, r1, #21
 8008954:	430a      	orrs	r2, r1
 8008956:	63da      	str	r2, [r3, #60]	; 0x3c
 8008958:	4b7f      	ldr	r3, [pc, #508]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800895a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800895c:	2380      	movs	r3, #128	; 0x80
 800895e:	055b      	lsls	r3, r3, #21
 8008960:	4013      	ands	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
 8008964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008966:	183b      	adds	r3, r7, r0
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800896c:	4b7b      	ldr	r3, [pc, #492]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4b7a      	ldr	r3, [pc, #488]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008972:	2180      	movs	r1, #128	; 0x80
 8008974:	0049      	lsls	r1, r1, #1
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800897a:	f7fd f8df 	bl	8005b3c <HAL_GetTick>
 800897e:	0003      	movs	r3, r0
 8008980:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008982:	e00b      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008984:	f7fd f8da 	bl	8005b3c <HAL_GetTick>
 8008988:	0002      	movs	r2, r0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d904      	bls.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008992:	2313      	movs	r3, #19
 8008994:	18fb      	adds	r3, r7, r3
 8008996:	2203      	movs	r2, #3
 8008998:	701a      	strb	r2, [r3, #0]
        break;
 800899a:	e005      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800899c:	4b6f      	ldr	r3, [pc, #444]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	2380      	movs	r3, #128	; 0x80
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4013      	ands	r3, r2
 80089a6:	d0ed      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80089a8:	2313      	movs	r3, #19
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d154      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089b2:	4b69      	ldr	r3, [pc, #420]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089b6:	23c0      	movs	r3, #192	; 0xc0
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4013      	ands	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d019      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d014      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ce:	4b62      	ldr	r3, [pc, #392]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	4a63      	ldr	r2, [pc, #396]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089d8:	4b5f      	ldr	r3, [pc, #380]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089dc:	4b5e      	ldr	r3, [pc, #376]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	0249      	lsls	r1, r1, #9
 80089e2:	430a      	orrs	r2, r1
 80089e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089e6:	4b5c      	ldr	r3, [pc, #368]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089ea:	4b5b      	ldr	r3, [pc, #364]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089ec:	495d      	ldr	r1, [pc, #372]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089ee:	400a      	ands	r2, r1
 80089f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089f2:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2201      	movs	r2, #1
 80089fc:	4013      	ands	r3, r2
 80089fe:	d016      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7fd f89c 	bl	8005b3c <HAL_GetTick>
 8008a04:	0003      	movs	r3, r0
 8008a06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a08:	e00c      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0a:	f7fd f897 	bl	8005b3c <HAL_GetTick>
 8008a0e:	0002      	movs	r2, r0
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	4a54      	ldr	r2, [pc, #336]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d904      	bls.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008a1a:	2313      	movs	r3, #19
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2203      	movs	r2, #3
 8008a20:	701a      	strb	r2, [r3, #0]
            break;
 8008a22:	e004      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a24:	4b4c      	ldr	r3, [pc, #304]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a28:	2202      	movs	r2, #2
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d0ed      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008a2e:	2313      	movs	r3, #19
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a38:	4b47      	ldr	r3, [pc, #284]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3c:	4a48      	ldr	r2, [pc, #288]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	0019      	movs	r1, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	4b44      	ldr	r3, [pc, #272]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a4c:	e00c      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4e:	2312      	movs	r3, #18
 8008a50:	18fb      	adds	r3, r7, r3
 8008a52:	2213      	movs	r2, #19
 8008a54:	18ba      	adds	r2, r7, r2
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	e005      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5c:	2312      	movs	r3, #18
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	2213      	movs	r2, #19
 8008a62:	18ba      	adds	r2, r7, r2
 8008a64:	7812      	ldrb	r2, [r2, #0]
 8008a66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a68:	2311      	movs	r3, #17
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d105      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a72:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a76:	4b38      	ldr	r3, [pc, #224]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a78:	493c      	ldr	r1, [pc, #240]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008a7a:	400a      	ands	r2, r1
 8008a7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2201      	movs	r2, #1
 8008a84:	4013      	ands	r3, r2
 8008a86:	d009      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a88:	4b33      	ldr	r3, [pc, #204]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	4393      	bics	r3, r2
 8008a90:	0019      	movs	r1, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	4b30      	ldr	r3, [pc, #192]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d009      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008aa6:	4b2c      	ldr	r3, [pc, #176]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aaa:	220c      	movs	r2, #12
 8008aac:	4393      	bics	r3, r2
 8008aae:	0019      	movs	r1, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	4b28      	ldr	r3, [pc, #160]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	d009      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ac4:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac8:	4a29      	ldr	r2, [pc, #164]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	0019      	movs	r1, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	2380      	movs	r3, #128	; 0x80
 8008ade:	01db      	lsls	r3, r3, #7
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	d015      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	0899      	lsrs	r1, r3, #2
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695a      	ldr	r2, [r3, #20]
 8008af0:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008af2:	430a      	orrs	r2, r1
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	2380      	movs	r3, #128	; 0x80
 8008afc:	05db      	lsls	r3, r3, #23
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d106      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b08:	2180      	movs	r1, #128	; 0x80
 8008b0a:	0249      	lsls	r1, r1, #9
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	4013      	ands	r3, r2
 8008b1a:	d016      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b20:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	0019      	movs	r1, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	01db      	lsls	r3, r3, #7
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d106      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	0249      	lsls	r1, r1, #9
 8008b46:	430a      	orrs	r2, r1
 8008b48:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008b4a:	2312      	movs	r3, #18
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	781b      	ldrb	r3, [r3, #0]
}
 8008b50:	0018      	movs	r0, r3
 8008b52:	46bd      	mov	sp, r7
 8008b54:	b006      	add	sp, #24
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	40007000 	.word	0x40007000
 8008b60:	fffffcff 	.word	0xfffffcff
 8008b64:	fffeffff 	.word	0xfffeffff
 8008b68:	00001388 	.word	0x00001388
 8008b6c:	efffffff 	.word	0xefffffff
 8008b70:	ffffcfff 	.word	0xffffcfff
 8008b74:	ffff3fff 	.word	0xffff3fff

08008b78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b78:	b5b0      	push	{r4, r5, r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b80:	230f      	movs	r3, #15
 8008b82:	18fb      	adds	r3, r7, r3
 8008b84:	2201      	movs	r2, #1
 8008b86:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d100      	bne.n	8008b90 <HAL_RTC_Init+0x18>
 8008b8e:	e080      	b.n	8008c92 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2229      	movs	r2, #41	; 0x29
 8008b94:	5c9b      	ldrb	r3, [r3, r2]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2228      	movs	r2, #40	; 0x28
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2288      	movs	r2, #136	; 0x88
 8008ba8:	0212      	lsls	r2, r2, #8
 8008baa:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f007 fb20 	bl	80101f4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2229      	movs	r2, #41	; 0x29
 8008bb8:	2102      	movs	r1, #2
 8008bba:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	22ca      	movs	r2, #202	; 0xca
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2253      	movs	r2, #83	; 0x53
 8008bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008bcc:	250f      	movs	r5, #15
 8008bce:	197c      	adds	r4, r7, r5
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f000 fa71 	bl	80090ba <RTC_EnterInitMode>
 8008bd8:	0003      	movs	r3, r0
 8008bda:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8008bdc:	0028      	movs	r0, r5
 8008bde:	183b      	adds	r3, r7, r0
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d148      	bne.n	8008c78 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	492b      	ldr	r1, [pc, #172]	; (8008ca0 <HAL_RTC_Init+0x128>)
 8008bf2:	400a      	ands	r2, r1
 8008bf4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6999      	ldr	r1, [r3, #24]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6912      	ldr	r2, [r2, #16]
 8008c1c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6919      	ldr	r1, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	041a      	lsls	r2, r3, #16
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008c32:	0005      	movs	r5, r0
 8008c34:	183c      	adds	r4, r7, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f000 fa81 	bl	8009140 <RTC_ExitInitMode>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8008c42:	197b      	adds	r3, r7, r5
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d116      	bne.n	8008c78 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	00d2      	lsls	r2, r2, #3
 8008c56:	08d2      	lsrs	r2, r2, #3
 8008c58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6999      	ldr	r1, [r3, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	22ff      	movs	r2, #255	; 0xff
 8008c7e:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8008c80:	230f      	movs	r3, #15
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d103      	bne.n	8008c92 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2229      	movs	r2, #41	; 0x29
 8008c8e:	2101      	movs	r1, #1
 8008c90:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8008c92:	230f      	movs	r3, #15
 8008c94:	18fb      	adds	r3, r7, r3
 8008c96:	781b      	ldrb	r3, [r3, #0]
}
 8008c98:	0018      	movs	r0, r3
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b004      	add	sp, #16
 8008c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008ca0:	fb8fffbf 	.word	0xfb8fffbf

08008ca4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ca4:	b5b0      	push	{r4, r5, r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2228      	movs	r2, #40	; 0x28
 8008cb4:	5c9b      	ldrb	r3, [r3, r2]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_RTC_SetTime+0x1a>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e092      	b.n	8008de4 <HAL_RTC_SetTime+0x140>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2228      	movs	r2, #40	; 0x28
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2229      	movs	r2, #41	; 0x29
 8008cca:	2102      	movs	r1, #2
 8008ccc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	22ca      	movs	r2, #202	; 0xca
 8008cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2253      	movs	r2, #83	; 0x53
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008cde:	2513      	movs	r5, #19
 8008ce0:	197c      	adds	r4, r7, r5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f000 f9e8 	bl	80090ba <RTC_EnterInitMode>
 8008cea:	0003      	movs	r3, r0
 8008cec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008cee:	197b      	adds	r3, r7, r5
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d162      	bne.n	8008dbc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d125      	bne.n	8008d48 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	2240      	movs	r2, #64	; 0x40
 8008d04:	4013      	ands	r3, r2
 8008d06:	d102      	bne.n	8008d0e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	0018      	movs	r0, r3
 8008d14:	f000 fa58 	bl	80091c8 <RTC_ByteToBcd2>
 8008d18:	0003      	movs	r3, r0
 8008d1a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	0018      	movs	r0, r3
 8008d22:	f000 fa51 	bl	80091c8 <RTC_ByteToBcd2>
 8008d26:	0003      	movs	r3, r0
 8008d28:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d2a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	789b      	ldrb	r3, [r3, #2]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 fa49 	bl	80091c8 <RTC_ByteToBcd2>
 8008d36:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d38:	0022      	movs	r2, r4
 8008d3a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	78db      	ldrb	r3, [r3, #3]
 8008d40:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e017      	b.n	8008d78 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	2240      	movs	r2, #64	; 0x40
 8008d50:	4013      	ands	r3, r2
 8008d52:	d102      	bne.n	8008d5a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d66:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d6c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	78db      	ldrb	r3, [r3, #3]
 8008d72:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	491b      	ldr	r1, [pc, #108]	; (8008dec <HAL_RTC_SetTime+0x148>)
 8008d80:	400a      	ands	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4918      	ldr	r1, [pc, #96]	; (8008df0 <HAL_RTC_SetTime+0x14c>)
 8008d90:	400a      	ands	r2, r1
 8008d92:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6999      	ldr	r1, [r3, #24]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008dac:	2313      	movs	r3, #19
 8008dae:	18fc      	adds	r4, r7, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f000 f9c4 	bl	8009140 <RTC_ExitInitMode>
 8008db8:	0003      	movs	r3, r0
 8008dba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	22ff      	movs	r2, #255	; 0xff
 8008dc2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8008dc4:	2313      	movs	r3, #19
 8008dc6:	18fb      	adds	r3, r7, r3
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2229      	movs	r2, #41	; 0x29
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2228      	movs	r2, #40	; 0x28
 8008dda:	2100      	movs	r1, #0
 8008ddc:	5499      	strb	r1, [r3, r2]

  return status;
 8008dde:	2313      	movs	r3, #19
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	781b      	ldrb	r3, [r3, #0]
}
 8008de4:	0018      	movs	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b006      	add	sp, #24
 8008dea:	bdb0      	pop	{r4, r5, r7, pc}
 8008dec:	007f7f7f 	.word	0x007f7f7f
 8008df0:	fffbffff 	.word	0xfffbffff

08008df4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	045b      	lsls	r3, r3, #17
 8008e12:	0c5a      	lsrs	r2, r3, #17
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a22      	ldr	r2, [pc, #136]	; (8008ea8 <HAL_RTC_GetTime+0xb4>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	0c1b      	lsrs	r3, r3, #16
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	223f      	movs	r2, #63	; 0x3f
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	227f      	movs	r2, #127	; 0x7f
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	227f      	movs	r2, #127	; 0x7f
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	0d9b      	lsrs	r3, r3, #22
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d11a      	bne.n	8008e9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	f000 f9d3 	bl	8009218 <RTC_Bcd2ToByte>
 8008e72:	0003      	movs	r3, r0
 8008e74:	001a      	movs	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f000 f9ca 	bl	8009218 <RTC_Bcd2ToByte>
 8008e84:	0003      	movs	r3, r0
 8008e86:	001a      	movs	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	789b      	ldrb	r3, [r3, #2]
 8008e90:	0018      	movs	r0, r3
 8008e92:	f000 f9c1 	bl	8009218 <RTC_Bcd2ToByte>
 8008e96:	0003      	movs	r3, r0
 8008e98:	001a      	movs	r2, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	b006      	add	sp, #24
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	007f7f7f 	.word	0x007f7f7f

08008eac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2228      	movs	r2, #40	; 0x28
 8008ebc:	5c9b      	ldrb	r3, [r3, r2]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RTC_SetDate+0x1a>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e07e      	b.n	8008fc4 <HAL_RTC_SetDate+0x118>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2228      	movs	r2, #40	; 0x28
 8008eca:	2101      	movs	r1, #1
 8008ecc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2229      	movs	r2, #41	; 0x29
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10e      	bne.n	8008efa <HAL_RTC_SetDate+0x4e>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	001a      	movs	r2, r3
 8008ee2:	2310      	movs	r3, #16
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d008      	beq.n	8008efa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2210      	movs	r2, #16
 8008eee:	4393      	bics	r3, r2
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	330a      	adds	r3, #10
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11c      	bne.n	8008f3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	78db      	ldrb	r3, [r3, #3]
 8008f04:	0018      	movs	r0, r3
 8008f06:	f000 f95f 	bl	80091c8 <RTC_ByteToBcd2>
 8008f0a:	0003      	movs	r3, r0
 8008f0c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 f958 	bl	80091c8 <RTC_ByteToBcd2>
 8008f18:	0003      	movs	r3, r0
 8008f1a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f1c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	0018      	movs	r0, r3
 8008f24:	f000 f950 	bl	80091c8 <RTC_ByteToBcd2>
 8008f28:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f2a:	0022      	movs	r2, r4
 8008f2c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e00e      	b.n	8008f58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	78db      	ldrb	r3, [r3, #3]
 8008f3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008f4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	22ca      	movs	r2, #202	; 0xca
 8008f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2253      	movs	r2, #83	; 0x53
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f68:	2513      	movs	r5, #19
 8008f6a:	197c      	adds	r4, r7, r5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f000 f8a3 	bl	80090ba <RTC_EnterInitMode>
 8008f74:	0003      	movs	r3, r0
 8008f76:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008f78:	0028      	movs	r0, r5
 8008f7a:	183b      	adds	r3, r7, r0
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10c      	bne.n	8008f9c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4910      	ldr	r1, [pc, #64]	; (8008fcc <HAL_RTC_SetDate+0x120>)
 8008f8a:	400a      	ands	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f8e:	183c      	adds	r4, r7, r0
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	0018      	movs	r0, r3
 8008f94:	f000 f8d4 	bl	8009140 <RTC_ExitInitMode>
 8008f98:	0003      	movs	r3, r0
 8008f9a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	22ff      	movs	r2, #255	; 0xff
 8008fa2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008fa4:	2313      	movs	r3, #19
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2229      	movs	r2, #41	; 0x29
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2228      	movs	r2, #40	; 0x28
 8008fba:	2100      	movs	r1, #0
 8008fbc:	5499      	strb	r1, [r3, r2]

  return status;
 8008fbe:	2313      	movs	r3, #19
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	781b      	ldrb	r3, [r3, #0]
}
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b006      	add	sp, #24
 8008fca:	bdb0      	pop	{r4, r5, r7, pc}
 8008fcc:	00ffff3f 	.word	0x00ffff3f

08008fd0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4a21      	ldr	r2, [pc, #132]	; (8009068 <HAL_RTC_GetDate+0x98>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	0c1b      	lsrs	r3, r3, #16
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	221f      	movs	r2, #31
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	223f      	movs	r2, #63	; 0x3f
 8009008:	4013      	ands	r3, r2
 800900a:	b2da      	uxtb	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	0b5b      	lsrs	r3, r3, #13
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2207      	movs	r2, #7
 8009018:	4013      	ands	r3, r2
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d11a      	bne.n	800905c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	78db      	ldrb	r3, [r3, #3]
 800902a:	0018      	movs	r0, r3
 800902c:	f000 f8f4 	bl	8009218 <RTC_Bcd2ToByte>
 8009030:	0003      	movs	r3, r0
 8009032:	001a      	movs	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	0018      	movs	r0, r3
 800903e:	f000 f8eb 	bl	8009218 <RTC_Bcd2ToByte>
 8009042:	0003      	movs	r3, r0
 8009044:	001a      	movs	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	789b      	ldrb	r3, [r3, #2]
 800904e:	0018      	movs	r0, r3
 8009050:	f000 f8e2 	bl	8009218 <RTC_Bcd2ToByte>
 8009054:	0003      	movs	r3, r0
 8009056:	001a      	movs	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	0018      	movs	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	b006      	add	sp, #24
 8009064:	bd80      	pop	{r7, pc}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	00ffff3f 	.word	0x00ffff3f

0800906c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	21a0      	movs	r1, #160	; 0xa0
 8009080:	438a      	bics	r2, r1
 8009082:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009084:	f7fc fd5a 	bl	8005b3c <HAL_GetTick>
 8009088:	0003      	movs	r3, r0
 800908a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800908c:	e00a      	b.n	80090a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800908e:	f7fc fd55 	bl	8005b3c <HAL_GetTick>
 8009092:	0002      	movs	r2, r0
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	23fa      	movs	r3, #250	; 0xfa
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	429a      	cmp	r2, r3
 800909e:	d901      	bls.n	80090a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e006      	b.n	80090b2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	4013      	ands	r3, r2
 80090ae:	d0ee      	beq.n	800908e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	0018      	movs	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b004      	add	sp, #16
 80090b8:	bd80      	pop	{r7, pc}

080090ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80090c2:	230f      	movs	r3, #15
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2240      	movs	r2, #64	; 0x40
 80090d2:	4013      	ands	r3, r2
 80090d4:	d12c      	bne.n	8009130 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2180      	movs	r1, #128	; 0x80
 80090e2:	430a      	orrs	r2, r1
 80090e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80090e6:	f7fc fd29 	bl	8005b3c <HAL_GetTick>
 80090ea:	0003      	movs	r3, r0
 80090ec:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80090ee:	e014      	b.n	800911a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80090f0:	f7fc fd24 	bl	8005b3c <HAL_GetTick>
 80090f4:	0002      	movs	r2, r0
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	200f      	movs	r0, #15
 80090fc:	183b      	adds	r3, r7, r0
 80090fe:	1839      	adds	r1, r7, r0
 8009100:	7809      	ldrb	r1, [r1, #0]
 8009102:	7019      	strb	r1, [r3, #0]
 8009104:	23fa      	movs	r3, #250	; 0xfa
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	429a      	cmp	r2, r3
 800910a:	d906      	bls.n	800911a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800910c:	183b      	adds	r3, r7, r0
 800910e:	2203      	movs	r2, #3
 8009110:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2229      	movs	r2, #41	; 0x29
 8009116:	2103      	movs	r1, #3
 8009118:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2240      	movs	r2, #64	; 0x40
 8009122:	4013      	ands	r3, r2
 8009124:	d104      	bne.n	8009130 <RTC_EnterInitMode+0x76>
 8009126:	230f      	movs	r3, #15
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b03      	cmp	r3, #3
 800912e:	d1df      	bne.n	80090f0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009130:	230f      	movs	r3, #15
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	781b      	ldrb	r3, [r3, #0]
}
 8009136:	0018      	movs	r0, r3
 8009138:	46bd      	mov	sp, r7
 800913a:	b004      	add	sp, #16
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009148:	240f      	movs	r4, #15
 800914a:	193b      	adds	r3, r7, r4
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009150:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <RTC_ExitInitMode+0x84>)
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <RTC_ExitInitMode+0x84>)
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	438a      	bics	r2, r1
 800915a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <RTC_ExitInitMode+0x84>)
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	2220      	movs	r2, #32
 8009162:	4013      	ands	r3, r2
 8009164:	d10d      	bne.n	8009182 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff ff7f 	bl	800906c <HAL_RTC_WaitForSynchro>
 800916e:	1e03      	subs	r3, r0, #0
 8009170:	d021      	beq.n	80091b6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2229      	movs	r2, #41	; 0x29
 8009176:	2103      	movs	r1, #3
 8009178:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800917a:	193b      	adds	r3, r7, r4
 800917c:	2203      	movs	r2, #3
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	e019      	b.n	80091b6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <RTC_ExitInitMode+0x84>)
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <RTC_ExitInitMode+0x84>)
 8009188:	2120      	movs	r1, #32
 800918a:	438a      	bics	r2, r1
 800918c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	0018      	movs	r0, r3
 8009192:	f7ff ff6b 	bl	800906c <HAL_RTC_WaitForSynchro>
 8009196:	1e03      	subs	r3, r0, #0
 8009198:	d007      	beq.n	80091aa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2229      	movs	r2, #41	; 0x29
 800919e:	2103      	movs	r1, #3
 80091a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80091a2:	230f      	movs	r3, #15
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	2203      	movs	r2, #3
 80091a8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80091aa:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <RTC_ExitInitMode+0x84>)
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <RTC_ExitInitMode+0x84>)
 80091b0:	2120      	movs	r1, #32
 80091b2:	430a      	orrs	r2, r1
 80091b4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80091b6:	230f      	movs	r3, #15
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	781b      	ldrb	r3, [r3, #0]
}
 80091bc:	0018      	movs	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	b005      	add	sp, #20
 80091c2:	bd90      	pop	{r4, r7, pc}
 80091c4:	40002800 	.word	0x40002800

080091c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	0002      	movs	r2, r0
 80091d0:	1dfb      	adds	r3, r7, #7
 80091d2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80091d8:	230b      	movs	r3, #11
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	1dfa      	adds	r2, r7, #7
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80091e2:	e008      	b.n	80091f6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80091ea:	220b      	movs	r2, #11
 80091ec:	18bb      	adds	r3, r7, r2
 80091ee:	18ba      	adds	r2, r7, r2
 80091f0:	7812      	ldrb	r2, [r2, #0]
 80091f2:	3a0a      	subs	r2, #10
 80091f4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80091f6:	210b      	movs	r1, #11
 80091f8:	187b      	adds	r3, r7, r1
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	d8f1      	bhi.n	80091e4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	b2da      	uxtb	r2, r3
 8009208:	187b      	adds	r3, r7, r1
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	b2db      	uxtb	r3, r3
}
 8009210:	0018      	movs	r0, r3
 8009212:	46bd      	mov	sp, r7
 8009214:	b004      	add	sp, #16
 8009216:	bd80      	pop	{r7, pc}

08009218 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	0002      	movs	r2, r0
 8009220:	1dfb      	adds	r3, r7, #7
 8009222:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	b2db      	uxtb	r3, r3
 800922c:	001a      	movs	r2, r3
 800922e:	0013      	movs	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	189b      	adds	r3, r3, r2
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	210f      	movs	r1, #15
 8009242:	400b      	ands	r3, r1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	18d3      	adds	r3, r2, r3
 8009248:	b2db      	uxtb	r3, r3
}
 800924a:	0018      	movs	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	b004      	add	sp, #16
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2228      	movs	r2, #40	; 0x28
 8009264:	5c9b      	ldrb	r3, [r3, r2]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800926a:	2302      	movs	r3, #2
 800926c:	e082      	b.n	8009374 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2228      	movs	r2, #40	; 0x28
 8009272:	2101      	movs	r1, #1
 8009274:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2229      	movs	r2, #41	; 0x29
 800927a:	2102      	movs	r1, #2
 800927c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	22ca      	movs	r2, #202	; 0xca
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2253      	movs	r2, #83	; 0x53
 800928c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4938      	ldr	r1, [pc, #224]	; (800937c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800929a:	400a      	ands	r2, r1
 800929c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2104      	movs	r1, #4
 80092aa:	430a      	orrs	r2, r1
 80092ac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80092ae:	4b34      	ldr	r3, [pc, #208]	; (8009380 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2240      	movs	r2, #64	; 0x40
 80092b4:	4013      	ands	r3, r2
 80092b6:	d121      	bne.n	80092fc <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80092b8:	f7fc fc40 	bl	8005b3c <HAL_GetTick>
 80092bc:	0003      	movs	r3, r0
 80092be:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80092c0:	e016      	b.n	80092f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092c2:	f7fc fc3b 	bl	8005b3c <HAL_GetTick>
 80092c6:	0002      	movs	r2, r0
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	23fa      	movs	r3, #250	; 0xfa
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d90d      	bls.n	80092f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2229      	movs	r2, #41	; 0x29
 80092e0:	2103      	movs	r1, #3
 80092e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2228      	movs	r2, #40	; 0x28
 80092e8:	2100      	movs	r1, #0
 80092ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e041      	b.n	8009374 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	2204      	movs	r2, #4
 80092f8:	4013      	ands	r3, r2
 80092fa:	d0e2      	beq.n	80092c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699a      	ldr	r2, [r3, #24]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2107      	movs	r1, #7
 8009310:	438a      	bics	r2, r1
 8009312:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6999      	ldr	r1, [r3, #24]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	430a      	orrs	r2, r1
 8009322:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009324:	4a17      	ldr	r2, [pc, #92]	; (8009384 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8009326:	2380      	movs	r3, #128	; 0x80
 8009328:	58d3      	ldr	r3, [r2, r3]
 800932a:	4916      	ldr	r1, [pc, #88]	; (8009384 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800932c:	2280      	movs	r2, #128	; 0x80
 800932e:	0312      	lsls	r2, r2, #12
 8009330:	4313      	orrs	r3, r2
 8009332:	2280      	movs	r2, #128	; 0x80
 8009334:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699a      	ldr	r2, [r3, #24]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2180      	movs	r1, #128	; 0x80
 8009342:	01c9      	lsls	r1, r1, #7
 8009344:	430a      	orrs	r2, r1
 8009346:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2180      	movs	r1, #128	; 0x80
 8009354:	00c9      	lsls	r1, r1, #3
 8009356:	430a      	orrs	r2, r1
 8009358:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	22ff      	movs	r2, #255	; 0xff
 8009360:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2229      	movs	r2, #41	; 0x29
 8009366:	2101      	movs	r1, #1
 8009368:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2228      	movs	r2, #40	; 0x28
 800936e:	2100      	movs	r1, #0
 8009370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	0018      	movs	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	b006      	add	sp, #24
 800937a:	bd80      	pop	{r7, pc}
 800937c:	fffffbff 	.word	0xfffffbff
 8009380:	40002800 	.word	0x40002800
 8009384:	40021800 	.word	0x40021800

08009388 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009396:	2204      	movs	r2, #4
 8009398:	4013      	ands	r3, r2
 800939a:	d00b      	beq.n	80093b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2104      	movs	r1, #4
 80093a8:	430a      	orrs	r2, r1
 80093aa:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	0018      	movs	r0, r3
 80093b0:	f000 f808 	bl	80093c4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2229      	movs	r2, #41	; 0x29
 80093b8:	2101      	movs	r1, #1
 80093ba:	5499      	strb	r1, [r3, r2]
}
 80093bc:	46c0      	nop			; (mov r8, r8)
 80093be:	46bd      	mov	sp, r7
 80093c0:	b002      	add	sp, #8
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80093cc:	46c0      	nop			; (mov r8, r8)
 80093ce:	46bd      	mov	sp, r7
 80093d0:	b002      	add	sp, #8
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e0a8      	b.n	8009538 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	2382      	movs	r3, #130	; 0x82
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d009      	beq.n	800940e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	61da      	str	r2, [r3, #28]
 8009400:	e005      	b.n	800940e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	225d      	movs	r2, #93	; 0x5d
 8009418:	5c9b      	ldrb	r3, [r3, r2]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	d107      	bne.n	8009430 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	225c      	movs	r2, #92	; 0x5c
 8009424:	2100      	movs	r1, #0
 8009426:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	0018      	movs	r0, r3
 800942c:	f006 ff10 	bl	8010250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	225d      	movs	r2, #93	; 0x5d
 8009434:	2102      	movs	r1, #2
 8009436:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2140      	movs	r1, #64	; 0x40
 8009444:	438a      	bics	r2, r1
 8009446:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	23e0      	movs	r3, #224	; 0xe0
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	429a      	cmp	r2, r3
 8009452:	d902      	bls.n	800945a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e002      	b.n	8009460 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800945a:	2380      	movs	r3, #128	; 0x80
 800945c:	015b      	lsls	r3, r3, #5
 800945e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	23f0      	movs	r3, #240	; 0xf0
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	429a      	cmp	r2, r3
 800946a:	d008      	beq.n	800947e <HAL_SPI_Init+0xaa>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	23e0      	movs	r3, #224	; 0xe0
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	429a      	cmp	r2, r3
 8009476:	d002      	beq.n	800947e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	2382      	movs	r3, #130	; 0x82
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	401a      	ands	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6899      	ldr	r1, [r3, #8]
 800948c:	2384      	movs	r3, #132	; 0x84
 800948e:	021b      	lsls	r3, r3, #8
 8009490:	400b      	ands	r3, r1
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2102      	movs	r1, #2
 800949a:	400b      	ands	r3, r1
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	2101      	movs	r1, #1
 80094a4:	400b      	ands	r3, r1
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6999      	ldr	r1, [r3, #24]
 80094ac:	2380      	movs	r3, #128	; 0x80
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	400b      	ands	r3, r1
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	2138      	movs	r1, #56	; 0x38
 80094ba:	400b      	ands	r3, r1
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	400b      	ands	r3, r1
 80094c6:	431a      	orrs	r2, r3
 80094c8:	0011      	movs	r1, r2
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094ce:	2380      	movs	r3, #128	; 0x80
 80094d0:	019b      	lsls	r3, r3, #6
 80094d2:	401a      	ands	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	0c1b      	lsrs	r3, r3, #16
 80094e2:	2204      	movs	r2, #4
 80094e4:	401a      	ands	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	2110      	movs	r1, #16
 80094ec:	400b      	ands	r3, r1
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	2108      	movs	r1, #8
 80094f6:	400b      	ands	r3, r1
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68d9      	ldr	r1, [r3, #12]
 80094fe:	23f0      	movs	r3, #240	; 0xf0
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	400b      	ands	r3, r1
 8009504:	431a      	orrs	r2, r3
 8009506:	0011      	movs	r1, r2
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	2380      	movs	r3, #128	; 0x80
 800950c:	015b      	lsls	r3, r3, #5
 800950e:	401a      	ands	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69da      	ldr	r2, [r3, #28]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4907      	ldr	r1, [pc, #28]	; (8009540 <HAL_SPI_Init+0x16c>)
 8009524:	400a      	ands	r2, r1
 8009526:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	225d      	movs	r2, #93	; 0x5d
 8009532:	2101      	movs	r1, #1
 8009534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	0018      	movs	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	b004      	add	sp, #16
 800953e:	bd80      	pop	{r7, pc}
 8009540:	fffff7ff 	.word	0xfffff7ff

08009544 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	1dbb      	adds	r3, r7, #6
 8009552:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009554:	231f      	movs	r3, #31
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	225c      	movs	r2, #92	; 0x5c
 8009560:	5c9b      	ldrb	r3, [r3, r2]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_SPI_Transmit+0x26>
 8009566:	2302      	movs	r3, #2
 8009568:	e140      	b.n	80097ec <HAL_SPI_Transmit+0x2a8>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	225c      	movs	r2, #92	; 0x5c
 800956e:	2101      	movs	r1, #1
 8009570:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009572:	f7fc fae3 	bl	8005b3c <HAL_GetTick>
 8009576:	0003      	movs	r3, r0
 8009578:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800957a:	2316      	movs	r3, #22
 800957c:	18fb      	adds	r3, r7, r3
 800957e:	1dba      	adds	r2, r7, #6
 8009580:	8812      	ldrh	r2, [r2, #0]
 8009582:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	225d      	movs	r2, #93	; 0x5d
 8009588:	5c9b      	ldrb	r3, [r3, r2]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	d004      	beq.n	800959a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009590:	231f      	movs	r3, #31
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	2202      	movs	r2, #2
 8009596:	701a      	strb	r2, [r3, #0]
    goto error;
 8009598:	e11d      	b.n	80097d6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_SPI_Transmit+0x64>
 80095a0:	1dbb      	adds	r3, r7, #6
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80095a8:	231f      	movs	r3, #31
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	2201      	movs	r2, #1
 80095ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80095b0:	e111      	b.n	80097d6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	225d      	movs	r2, #93	; 0x5d
 80095b6:	2103      	movs	r1, #3
 80095b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1dba      	adds	r2, r7, #6
 80095ca:	8812      	ldrh	r2, [r2, #0]
 80095cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1dba      	adds	r2, r7, #6
 80095d2:	8812      	ldrh	r2, [r2, #0]
 80095d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2244      	movs	r2, #68	; 0x44
 80095e0:	2100      	movs	r1, #0
 80095e2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2246      	movs	r2, #70	; 0x46
 80095e8:	2100      	movs	r1, #0
 80095ea:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	021b      	lsls	r3, r3, #8
 8009600:	429a      	cmp	r2, r3
 8009602:	d110      	bne.n	8009626 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2140      	movs	r1, #64	; 0x40
 8009610:	438a      	bics	r2, r1
 8009612:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2180      	movs	r1, #128	; 0x80
 8009620:	01c9      	lsls	r1, r1, #7
 8009622:	430a      	orrs	r2, r1
 8009624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2240      	movs	r2, #64	; 0x40
 800962e:	4013      	ands	r3, r2
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	d007      	beq.n	8009644 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2140      	movs	r1, #64	; 0x40
 8009640:	430a      	orrs	r2, r1
 8009642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	23e0      	movs	r3, #224	; 0xe0
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	429a      	cmp	r2, r3
 800964e:	d94e      	bls.n	80096ee <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d004      	beq.n	8009662 <HAL_SPI_Transmit+0x11e>
 8009658:	2316      	movs	r3, #22
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d13f      	bne.n	80096e2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	881a      	ldrh	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	1c9a      	adds	r2, r3, #2
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009686:	e02c      	b.n	80096e2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2202      	movs	r2, #2
 8009690:	4013      	ands	r3, r2
 8009692:	2b02      	cmp	r3, #2
 8009694:	d112      	bne.n	80096bc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	881a      	ldrh	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	1c9a      	adds	r2, r3, #2
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096ba:	e012      	b.n	80096e2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096bc:	f7fc fa3e 	bl	8005b3c <HAL_GetTick>
 80096c0:	0002      	movs	r2, r0
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d802      	bhi.n	80096d2 <HAL_SPI_Transmit+0x18e>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	3301      	adds	r3, #1
 80096d0:	d102      	bne.n	80096d8 <HAL_SPI_Transmit+0x194>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d104      	bne.n	80096e2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80096d8:	231f      	movs	r3, #31
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	2203      	movs	r2, #3
 80096de:	701a      	strb	r2, [r3, #0]
          goto error;
 80096e0:	e079      	b.n	80097d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1cd      	bne.n	8009688 <HAL_SPI_Transmit+0x144>
 80096ec:	e04f      	b.n	800978e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <HAL_SPI_Transmit+0x1bc>
 80096f6:	2316      	movs	r3, #22
 80096f8:	18fb      	adds	r3, r7, r3
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d141      	bne.n	8009784 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	330c      	adds	r3, #12
 800970a:	7812      	ldrb	r2, [r2, #0]
 800970c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800971c:	b29b      	uxth	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8009726:	e02d      	b.n	8009784 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2202      	movs	r2, #2
 8009730:	4013      	ands	r3, r2
 8009732:	2b02      	cmp	r3, #2
 8009734:	d113      	bne.n	800975e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	330c      	adds	r3, #12
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009752:	b29b      	uxth	r3, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800975c:	e012      	b.n	8009784 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800975e:	f7fc f9ed 	bl	8005b3c <HAL_GetTick>
 8009762:	0002      	movs	r2, r0
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d802      	bhi.n	8009774 <HAL_SPI_Transmit+0x230>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	d102      	bne.n	800977a <HAL_SPI_Transmit+0x236>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d104      	bne.n	8009784 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800977a:	231f      	movs	r3, #31
 800977c:	18fb      	adds	r3, r7, r3
 800977e:	2203      	movs	r2, #3
 8009780:	701a      	strb	r2, [r3, #0]
          goto error;
 8009782:	e028      	b.n	80097d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009788:	b29b      	uxth	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1cc      	bne.n	8009728 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	0018      	movs	r0, r3
 8009796:	f000 f951 	bl	8009a3c <SPI_EndRxTxTransaction>
 800979a:	1e03      	subs	r3, r0, #0
 800979c:	d002      	beq.n	80097a4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ac:	2300      	movs	r3, #0
 80097ae:	613b      	str	r3, [r7, #16]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d004      	beq.n	80097d4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80097ca:	231f      	movs	r3, #31
 80097cc:	18fb      	adds	r3, r7, r3
 80097ce:	2201      	movs	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e000      	b.n	80097d6 <HAL_SPI_Transmit+0x292>
  }

error:
 80097d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	225d      	movs	r2, #93	; 0x5d
 80097da:	2101      	movs	r1, #1
 80097dc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	225c      	movs	r2, #92	; 0x5c
 80097e2:	2100      	movs	r1, #0
 80097e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097e6:	231f      	movs	r3, #31
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
}
 80097ec:	0018      	movs	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b008      	add	sp, #32
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	1dfb      	adds	r3, r7, #7
 8009802:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009804:	f7fc f99a 	bl	8005b3c <HAL_GetTick>
 8009808:	0002      	movs	r2, r0
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009814:	f7fc f992 	bl	8005b3c <HAL_GetTick>
 8009818:	0003      	movs	r3, r0
 800981a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800981c:	4b3a      	ldr	r3, [pc, #232]	; (8009908 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	015b      	lsls	r3, r3, #5
 8009822:	0d1b      	lsrs	r3, r3, #20
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	4353      	muls	r3, r2
 8009828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800982a:	e058      	b.n	80098de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	d055      	beq.n	80098de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009832:	f7fc f983 	bl	8005b3c <HAL_GetTick>
 8009836:	0002      	movs	r2, r0
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	69fa      	ldr	r2, [r7, #28]
 800983e:	429a      	cmp	r2, r3
 8009840:	d902      	bls.n	8009848 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d142      	bne.n	80098ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	21e0      	movs	r1, #224	; 0xe0
 8009854:	438a      	bics	r2, r1
 8009856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	2382      	movs	r3, #130	; 0x82
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	429a      	cmp	r2, r3
 8009862:	d113      	bne.n	800988c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	429a      	cmp	r2, r3
 800986e:	d005      	beq.n	800987c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	2380      	movs	r3, #128	; 0x80
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	429a      	cmp	r2, r3
 800987a:	d107      	bne.n	800988c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2140      	movs	r1, #64	; 0x40
 8009888:	438a      	bics	r2, r1
 800988a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009890:	2380      	movs	r3, #128	; 0x80
 8009892:	019b      	lsls	r3, r3, #6
 8009894:	429a      	cmp	r2, r3
 8009896:	d110      	bne.n	80098ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	491a      	ldr	r1, [pc, #104]	; (800990c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80098a4:	400a      	ands	r2, r1
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2180      	movs	r1, #128	; 0x80
 80098b4:	0189      	lsls	r1, r1, #6
 80098b6:	430a      	orrs	r2, r1
 80098b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	225d      	movs	r2, #93	; 0x5d
 80098be:	2101      	movs	r1, #1
 80098c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	225c      	movs	r2, #92	; 0x5c
 80098c6:	2100      	movs	r1, #0
 80098c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e017      	b.n	80098fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3b01      	subs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4013      	ands	r3, r2
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	425a      	negs	r2, r3
 80098ee:	4153      	adcs	r3, r2
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	001a      	movs	r2, r3
 80098f4:	1dfb      	adds	r3, r7, #7
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d197      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	0018      	movs	r0, r3
 8009900:	46bd      	mov	sp, r7
 8009902:	b008      	add	sp, #32
 8009904:	bd80      	pop	{r7, pc}
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	20000080 	.word	0x20000080
 800990c:	ffffdfff 	.word	0xffffdfff

08009910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800991e:	f7fc f90d 	bl	8005b3c <HAL_GetTick>
 8009922:	0002      	movs	r2, r0
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	1a9b      	subs	r3, r3, r2
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	18d3      	adds	r3, r2, r3
 800992c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800992e:	f7fc f905 	bl	8005b3c <HAL_GetTick>
 8009932:	0003      	movs	r3, r0
 8009934:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009936:	4b3f      	ldr	r3, [pc, #252]	; (8009a34 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	0013      	movs	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	189b      	adds	r3, r3, r2
 8009940:	00da      	lsls	r2, r3, #3
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	0d1b      	lsrs	r3, r3, #20
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	4353      	muls	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800994c:	e064      	b.n	8009a18 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	23c0      	movs	r3, #192	; 0xc0
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	429a      	cmp	r2, r3
 8009956:	d106      	bne.n	8009966 <SPI_WaitFifoStateUntilTimeout+0x56>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	d055      	beq.n	8009a18 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800996c:	f7fc f8e6 	bl	8005b3c <HAL_GetTick>
 8009970:	0002      	movs	r2, r0
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	429a      	cmp	r2, r3
 800997a:	d902      	bls.n	8009982 <SPI_WaitFifoStateUntilTimeout+0x72>
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d142      	bne.n	8009a08 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	21e0      	movs	r1, #224	; 0xe0
 800998e:	438a      	bics	r2, r1
 8009990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	2382      	movs	r3, #130	; 0x82
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	429a      	cmp	r2, r3
 800999c:	d113      	bne.n	80099c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	2380      	movs	r3, #128	; 0x80
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d005      	beq.n	80099b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689a      	ldr	r2, [r3, #8]
 80099ae:	2380      	movs	r3, #128	; 0x80
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d107      	bne.n	80099c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2140      	movs	r1, #64	; 0x40
 80099c2:	438a      	bics	r2, r1
 80099c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ca:	2380      	movs	r3, #128	; 0x80
 80099cc:	019b      	lsls	r3, r3, #6
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d110      	bne.n	80099f4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4916      	ldr	r1, [pc, #88]	; (8009a38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099de:	400a      	ands	r2, r1
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2180      	movs	r1, #128	; 0x80
 80099ee:	0189      	lsls	r1, r1, #6
 80099f0:	430a      	orrs	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	225d      	movs	r2, #93	; 0x5d
 80099f8:	2101      	movs	r1, #1
 80099fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	225c      	movs	r2, #92	; 0x5c
 8009a00:	2100      	movs	r1, #0
 8009a02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e010      	b.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	4013      	ands	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d192      	bne.n	800994e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b008      	add	sp, #32
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	20000080 	.word	0x20000080
 8009a38:	ffffdfff 	.word	0xffffdfff

08009a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af02      	add	r7, sp, #8
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	23c0      	movs	r3, #192	; 0xc0
 8009a4c:	0159      	lsls	r1, r3, #5
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	0013      	movs	r3, r2
 8009a56:	2200      	movs	r2, #0
 8009a58:	f7ff ff5a 	bl	8009910 <SPI_WaitFifoStateUntilTimeout>
 8009a5c:	1e03      	subs	r3, r0, #0
 8009a5e:	d007      	beq.n	8009a70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a64:	2220      	movs	r2, #32
 8009a66:	431a      	orrs	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e027      	b.n	8009ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	0013      	movs	r3, r2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2180      	movs	r1, #128	; 0x80
 8009a7e:	f7ff feb9 	bl	80097f4 <SPI_WaitFlagStateUntilTimeout>
 8009a82:	1e03      	subs	r3, r0, #0
 8009a84:	d007      	beq.n	8009a96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e014      	b.n	8009ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	23c0      	movs	r3, #192	; 0xc0
 8009a9a:	00d9      	lsls	r1, r3, #3
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	0013      	movs	r3, r2
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f7ff ff33 	bl	8009910 <SPI_WaitFifoStateUntilTimeout>
 8009aaa:	1e03      	subs	r3, r0, #0
 8009aac:	d007      	beq.n	8009abe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab2:	2220      	movs	r2, #32
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e000      	b.n	8009ac0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b004      	add	sp, #16
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e04a      	b.n	8009b70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	223d      	movs	r2, #61	; 0x3d
 8009ade:	5c9b      	ldrb	r3, [r3, r2]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d107      	bne.n	8009af6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	223c      	movs	r2, #60	; 0x3c
 8009aea:	2100      	movs	r1, #0
 8009aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	0018      	movs	r0, r3
 8009af2:	f006 fc1b 	bl	801032c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	223d      	movs	r2, #61	; 0x3d
 8009afa:	2102      	movs	r1, #2
 8009afc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	0019      	movs	r1, r3
 8009b08:	0010      	movs	r0, r2
 8009b0a:	f000 faa9 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2248      	movs	r2, #72	; 0x48
 8009b12:	2101      	movs	r1, #1
 8009b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	223e      	movs	r2, #62	; 0x3e
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	5499      	strb	r1, [r3, r2]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	223f      	movs	r2, #63	; 0x3f
 8009b22:	2101      	movs	r1, #1
 8009b24:	5499      	strb	r1, [r3, r2]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2240      	movs	r2, #64	; 0x40
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	5499      	strb	r1, [r3, r2]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2241      	movs	r2, #65	; 0x41
 8009b32:	2101      	movs	r1, #1
 8009b34:	5499      	strb	r1, [r3, r2]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2242      	movs	r2, #66	; 0x42
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	5499      	strb	r1, [r3, r2]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2243      	movs	r2, #67	; 0x43
 8009b42:	2101      	movs	r1, #1
 8009b44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2244      	movs	r2, #68	; 0x44
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	5499      	strb	r1, [r3, r2]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2245      	movs	r2, #69	; 0x45
 8009b52:	2101      	movs	r1, #1
 8009b54:	5499      	strb	r1, [r3, r2]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2246      	movs	r2, #70	; 0x46
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	5499      	strb	r1, [r3, r2]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2247      	movs	r2, #71	; 0x47
 8009b62:	2101      	movs	r1, #1
 8009b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	223d      	movs	r2, #61	; 0x3d
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	0018      	movs	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b002      	add	sp, #8
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	223d      	movs	r2, #61	; 0x3d
 8009b84:	5c9b      	ldrb	r3, [r3, r2]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d001      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e03c      	b.n	8009c0a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	223d      	movs	r2, #61	; 0x3d
 8009b94:	2102      	movs	r1, #2
 8009b96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <HAL_TIM_Base_Start_IT+0x9c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d009      	beq.n	8009bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <HAL_TIM_Base_Start_IT+0xa0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <HAL_TIM_Base_Start_IT+0x4e>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a16      	ldr	r2, [pc, #88]	; (8009c1c <HAL_TIM_Base_Start_IT+0xa4>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d116      	bne.n	8009bf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4a14      	ldr	r2, [pc, #80]	; (8009c20 <HAL_TIM_Base_Start_IT+0xa8>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b06      	cmp	r3, #6
 8009bd6:	d016      	beq.n	8009c06 <HAL_TIM_Base_Start_IT+0x8e>
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	2380      	movs	r3, #128	; 0x80
 8009bdc:	025b      	lsls	r3, r3, #9
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d011      	beq.n	8009c06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf2:	e008      	b.n	8009c06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2101      	movs	r1, #1
 8009c00:	430a      	orrs	r2, r1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e000      	b.n	8009c08 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c06:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b004      	add	sp, #16
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	40012c00 	.word	0x40012c00
 8009c18:	40000400 	.word	0x40000400
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	00010007 	.word	0x00010007

08009c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2202      	movs	r2, #2
 8009c34:	4013      	ands	r3, r2
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d124      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	2202      	movs	r2, #2
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d11d      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	4252      	negs	r2, r2
 8009c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	4013      	ands	r3, r2
 8009c62:	d004      	beq.n	8009c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	0018      	movs	r0, r3
 8009c68:	f000 f9e2 	bl	800a030 <HAL_TIM_IC_CaptureCallback>
 8009c6c:	e007      	b.n	8009c7e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	0018      	movs	r0, r3
 8009c72:	f000 f9d5 	bl	800a020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f000 f9e1 	bl	800a040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d125      	bne.n	8009cde <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2204      	movs	r2, #4
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d11e      	bne.n	8009cde <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2205      	movs	r2, #5
 8009ca6:	4252      	negs	r2, r2
 8009ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	23c0      	movs	r3, #192	; 0xc0
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f000 f9b5 	bl	800a030 <HAL_TIM_IC_CaptureCallback>
 8009cc6:	e007      	b.n	8009cd8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f000 f9a8 	bl	800a020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f000 f9b4 	bl	800a040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d124      	bne.n	8009d36 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d11d      	bne.n	8009d36 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2209      	movs	r2, #9
 8009d00:	4252      	negs	r2, r2
 8009d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2204      	movs	r2, #4
 8009d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	2203      	movs	r2, #3
 8009d12:	4013      	ands	r3, r2
 8009d14:	d004      	beq.n	8009d20 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f000 f989 	bl	800a030 <HAL_TIM_IC_CaptureCallback>
 8009d1e:	e007      	b.n	8009d30 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	0018      	movs	r0, r3
 8009d24:	f000 f97c 	bl	800a020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f000 f988 	bl	800a040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	2210      	movs	r2, #16
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d125      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	2210      	movs	r2, #16
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d11e      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2211      	movs	r2, #17
 8009d58:	4252      	negs	r2, r2
 8009d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2208      	movs	r2, #8
 8009d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	23c0      	movs	r3, #192	; 0xc0
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	d004      	beq.n	8009d7a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	0018      	movs	r0, r3
 8009d74:	f000 f95c 	bl	800a030 <HAL_TIM_IC_CaptureCallback>
 8009d78:	e007      	b.n	8009d8a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f000 f94f 	bl	800a020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	0018      	movs	r0, r3
 8009d86:	f000 f95b 	bl	800a040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2201      	movs	r2, #1
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d10f      	bne.n	8009dbe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d108      	bne.n	8009dbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2202      	movs	r2, #2
 8009db2:	4252      	negs	r2, r2
 8009db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	0018      	movs	r0, r3
 8009dba:	f006 fc1f 	bl	80105fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	2280      	movs	r2, #128	; 0x80
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d10f      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2280      	movs	r2, #128	; 0x80
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	2b80      	cmp	r3, #128	; 0x80
 8009dd8:	d108      	bne.n	8009dec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2281      	movs	r2, #129	; 0x81
 8009de0:	4252      	negs	r2, r2
 8009de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	0018      	movs	r0, r3
 8009de8:	f000 fabc 	bl	800a364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	2380      	movs	r3, #128	; 0x80
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	401a      	ands	r2, r3
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d10e      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	2280      	movs	r2, #128	; 0x80
 8009e08:	4013      	ands	r3, r2
 8009e0a:	2b80      	cmp	r3, #128	; 0x80
 8009e0c:	d107      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a1c      	ldr	r2, [pc, #112]	; (8009e84 <HAL_TIM_IRQHandler+0x260>)
 8009e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	0018      	movs	r0, r3
 8009e1a:	f000 faab 	bl	800a374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2240      	movs	r2, #64	; 0x40
 8009e26:	4013      	ands	r3, r2
 8009e28:	2b40      	cmp	r3, #64	; 0x40
 8009e2a:	d10f      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	2240      	movs	r2, #64	; 0x40
 8009e34:	4013      	ands	r3, r2
 8009e36:	2b40      	cmp	r3, #64	; 0x40
 8009e38:	d108      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2241      	movs	r2, #65	; 0x41
 8009e40:	4252      	negs	r2, r2
 8009e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	0018      	movs	r0, r3
 8009e48:	f000 f902 	bl	800a050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2220      	movs	r2, #32
 8009e54:	4013      	ands	r3, r2
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d10f      	bne.n	8009e7a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	4013      	ands	r3, r2
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	d108      	bne.n	8009e7a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2221      	movs	r2, #33	; 0x21
 8009e6e:	4252      	negs	r2, r2
 8009e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	0018      	movs	r0, r3
 8009e76:	f000 fa6d 	bl	800a354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	b002      	add	sp, #8
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	fffffeff 	.word	0xfffffeff

08009e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	223c      	movs	r2, #60	; 0x3c
 8009e96:	5c9b      	ldrb	r3, [r3, r2]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d101      	bne.n	8009ea0 <HAL_TIM_ConfigClockSource+0x18>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e0b7      	b.n	800a010 <HAL_TIM_ConfigClockSource+0x188>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	223c      	movs	r2, #60	; 0x3c
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	223d      	movs	r2, #61	; 0x3d
 8009eac:	2102      	movs	r1, #2
 8009eae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4a57      	ldr	r2, [pc, #348]	; (800a018 <HAL_TIM_ConfigClockSource+0x190>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a56      	ldr	r2, [pc, #344]	; (800a01c <HAL_TIM_ConfigClockSource+0x194>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2280      	movs	r2, #128	; 0x80
 8009ed6:	0192      	lsls	r2, r2, #6
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d040      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0xd6>
 8009edc:	2280      	movs	r2, #128	; 0x80
 8009ede:	0192      	lsls	r2, r2, #6
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d900      	bls.n	8009ee6 <HAL_TIM_ConfigClockSource+0x5e>
 8009ee4:	e088      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009ee6:	2280      	movs	r2, #128	; 0x80
 8009ee8:	0152      	lsls	r2, r2, #5
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d100      	bne.n	8009ef0 <HAL_TIM_ConfigClockSource+0x68>
 8009eee:	e085      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>
 8009ef0:	2280      	movs	r2, #128	; 0x80
 8009ef2:	0152      	lsls	r2, r2, #5
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d900      	bls.n	8009efa <HAL_TIM_ConfigClockSource+0x72>
 8009ef8:	e07e      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009efa:	2b70      	cmp	r3, #112	; 0x70
 8009efc:	d018      	beq.n	8009f30 <HAL_TIM_ConfigClockSource+0xa8>
 8009efe:	d900      	bls.n	8009f02 <HAL_TIM_ConfigClockSource+0x7a>
 8009f00:	e07a      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f02:	2b60      	cmp	r3, #96	; 0x60
 8009f04:	d04f      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0x11e>
 8009f06:	d900      	bls.n	8009f0a <HAL_TIM_ConfigClockSource+0x82>
 8009f08:	e076      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f0a:	2b50      	cmp	r3, #80	; 0x50
 8009f0c:	d03b      	beq.n	8009f86 <HAL_TIM_ConfigClockSource+0xfe>
 8009f0e:	d900      	bls.n	8009f12 <HAL_TIM_ConfigClockSource+0x8a>
 8009f10:	e072      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d057      	beq.n	8009fc6 <HAL_TIM_ConfigClockSource+0x13e>
 8009f16:	d900      	bls.n	8009f1a <HAL_TIM_ConfigClockSource+0x92>
 8009f18:	e06e      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f1a:	2b30      	cmp	r3, #48	; 0x30
 8009f1c:	d063      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8009f1e:	d86b      	bhi.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d060      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8009f24:	d868      	bhi.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d05d      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8009f2a:	2b10      	cmp	r3, #16
 8009f2c:	d05b      	beq.n	8009fe6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009f2e:	e063      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	6899      	ldr	r1, [r3, #8]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f000 f980 	bl	800a244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2277      	movs	r2, #119	; 0x77
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	609a      	str	r2, [r3, #8]
      break;
 8009f5c:	e04f      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	6899      	ldr	r1, [r3, #8]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f000 f969 	bl	800a244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2180      	movs	r1, #128	; 0x80
 8009f7e:	01c9      	lsls	r1, r1, #7
 8009f80:	430a      	orrs	r2, r1
 8009f82:	609a      	str	r2, [r3, #8]
      break;
 8009f84:	e03b      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	6859      	ldr	r1, [r3, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	001a      	movs	r2, r3
 8009f94:	f000 f8da 	bl	800a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2150      	movs	r1, #80	; 0x50
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	f000 f934 	bl	800a20c <TIM_ITRx_SetConfig>
      break;
 8009fa4:	e02b      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6818      	ldr	r0, [r3, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	6859      	ldr	r1, [r3, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	f000 f8f8 	bl	800a1a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2160      	movs	r1, #96	; 0x60
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f000 f924 	bl	800a20c <TIM_ITRx_SetConfig>
      break;
 8009fc4:	e01b      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	6859      	ldr	r1, [r3, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	001a      	movs	r2, r3
 8009fd4:	f000 f8ba 	bl	800a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2140      	movs	r1, #64	; 0x40
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f000 f914 	bl	800a20c <TIM_ITRx_SetConfig>
      break;
 8009fe4:	e00b      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	0019      	movs	r1, r3
 8009ff0:	0010      	movs	r0, r2
 8009ff2:	f000 f90b 	bl	800a20c <TIM_ITRx_SetConfig>
        break;
 8009ff6:	e002      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009ff8:	46c0      	nop			; (mov r8, r8)
 8009ffa:	e000      	b.n	8009ffe <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009ffc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	223d      	movs	r2, #61	; 0x3d
 800a002:	2101      	movs	r1, #1
 800a004:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	223c      	movs	r2, #60	; 0x3c
 800a00a:	2100      	movs	r1, #0
 800a00c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b004      	add	sp, #16
 800a016:	bd80      	pop	{r7, pc}
 800a018:	ffceff88 	.word	0xffceff88
 800a01c:	ffff00ff 	.word	0xffff00ff

0800a020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a028:	46c0      	nop			; (mov r8, r8)
 800a02a:	46bd      	mov	sp, r7
 800a02c:	b002      	add	sp, #8
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a038:	46c0      	nop			; (mov r8, r8)
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b002      	add	sp, #8
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a048:	46c0      	nop			; (mov r8, r8)
 800a04a:	46bd      	mov	sp, r7
 800a04c:	b002      	add	sp, #8
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a058:	46c0      	nop			; (mov r8, r8)
 800a05a:	46bd      	mov	sp, r7
 800a05c:	b002      	add	sp, #8
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2f      	ldr	r2, [pc, #188]	; (800a130 <TIM_Base_SetConfig+0xd0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d003      	beq.n	800a080 <TIM_Base_SetConfig+0x20>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a2e      	ldr	r2, [pc, #184]	; (800a134 <TIM_Base_SetConfig+0xd4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d108      	bne.n	800a092 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2270      	movs	r2, #112	; 0x70
 800a084:	4393      	bics	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a26      	ldr	r2, [pc, #152]	; (800a130 <TIM_Base_SetConfig+0xd0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d013      	beq.n	800a0c2 <TIM_Base_SetConfig+0x62>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a25      	ldr	r2, [pc, #148]	; (800a134 <TIM_Base_SetConfig+0xd4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00f      	beq.n	800a0c2 <TIM_Base_SetConfig+0x62>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a24      	ldr	r2, [pc, #144]	; (800a138 <TIM_Base_SetConfig+0xd8>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00b      	beq.n	800a0c2 <TIM_Base_SetConfig+0x62>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a23      	ldr	r2, [pc, #140]	; (800a13c <TIM_Base_SetConfig+0xdc>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d007      	beq.n	800a0c2 <TIM_Base_SetConfig+0x62>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a22      	ldr	r2, [pc, #136]	; (800a140 <TIM_Base_SetConfig+0xe0>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <TIM_Base_SetConfig+0x62>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a21      	ldr	r2, [pc, #132]	; (800a144 <TIM_Base_SetConfig+0xe4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d108      	bne.n	800a0d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a20      	ldr	r2, [pc, #128]	; (800a148 <TIM_Base_SetConfig+0xe8>)
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2280      	movs	r2, #128	; 0x80
 800a0d8:	4393      	bics	r3, r2
 800a0da:	001a      	movs	r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	689a      	ldr	r2, [r3, #8]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <TIM_Base_SetConfig+0xd0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d00b      	beq.n	800a11a <TIM_Base_SetConfig+0xba>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <TIM_Base_SetConfig+0xdc>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d007      	beq.n	800a11a <TIM_Base_SetConfig+0xba>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <TIM_Base_SetConfig+0xe0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d003      	beq.n	800a11a <TIM_Base_SetConfig+0xba>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a0b      	ldr	r2, [pc, #44]	; (800a144 <TIM_Base_SetConfig+0xe4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d103      	bne.n	800a122 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	691a      	ldr	r2, [r3, #16]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	615a      	str	r2, [r3, #20]
}
 800a128:	46c0      	nop			; (mov r8, r8)
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b004      	add	sp, #16
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40000400 	.word	0x40000400
 800a138:	40002000 	.word	0x40002000
 800a13c:	40014000 	.word	0x40014000
 800a140:	40014400 	.word	0x40014400
 800a144:	40014800 	.word	0x40014800
 800a148:	fffffcff 	.word	0xfffffcff

0800a14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	2201      	movs	r2, #1
 800a164:	4393      	bics	r3, r2
 800a166:	001a      	movs	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	22f0      	movs	r2, #240	; 0xf0
 800a176:	4393      	bics	r3, r2
 800a178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	220a      	movs	r2, #10
 800a188:	4393      	bics	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	621a      	str	r2, [r3, #32]
}
 800a1a0:	46c0      	nop			; (mov r8, r8)
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b006      	add	sp, #24
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	4393      	bics	r3, r2
 800a1bc:	001a      	movs	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	4a0d      	ldr	r2, [pc, #52]	; (800a208 <TIM_TI2_ConfigInputStage+0x60>)
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	031b      	lsls	r3, r3, #12
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	22a0      	movs	r2, #160	; 0xa0
 800a1e4:	4393      	bics	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	621a      	str	r2, [r3, #32]
}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	46bd      	mov	sp, r7
 800a202:	b006      	add	sp, #24
 800a204:	bd80      	pop	{r7, pc}
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	ffff0fff 	.word	0xffff0fff

0800a20c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4a08      	ldr	r2, [pc, #32]	; (800a240 <TIM_ITRx_SetConfig+0x34>)
 800a220:	4013      	ands	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	2207      	movs	r2, #7
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	609a      	str	r2, [r3, #8]
}
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	46bd      	mov	sp, r7
 800a23a:	b004      	add	sp, #16
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	ffcfff8f 	.word	0xffcfff8f

0800a244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	4a09      	ldr	r2, [pc, #36]	; (800a280 <TIM_ETR_SetConfig+0x3c>)
 800a25c:	4013      	ands	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	021a      	lsls	r2, r3, #8
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	431a      	orrs	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	609a      	str	r2, [r3, #8]
}
 800a278:	46c0      	nop			; (mov r8, r8)
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b006      	add	sp, #24
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	ffff00ff 	.word	0xffff00ff

0800a284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	223c      	movs	r2, #60	; 0x3c
 800a292:	5c9b      	ldrb	r3, [r3, r2]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a298:	2302      	movs	r3, #2
 800a29a:	e04f      	b.n	800a33c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	223c      	movs	r2, #60	; 0x3c
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	223d      	movs	r2, #61	; 0x3d
 800a2a8:	2102      	movs	r1, #2
 800a2aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a20      	ldr	r2, [pc, #128]	; (800a344 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d108      	bne.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2270      	movs	r2, #112	; 0x70
 800a2dc:	4393      	bics	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a13      	ldr	r2, [pc, #76]	; (800a344 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d009      	beq.n	800a310 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a12      	ldr	r2, [pc, #72]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d004      	beq.n	800a310 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a11      	ldr	r2, [pc, #68]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10c      	bne.n	800a32a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2280      	movs	r2, #128	; 0x80
 800a314:	4393      	bics	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	223d      	movs	r2, #61	; 0x3d
 800a32e:	2101      	movs	r1, #1
 800a330:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	223c      	movs	r2, #60	; 0x3c
 800a336:	2100      	movs	r1, #0
 800a338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	0018      	movs	r0, r3
 800a33e:	46bd      	mov	sp, r7
 800a340:	b004      	add	sp, #16
 800a342:	bd80      	pop	{r7, pc}
 800a344:	40012c00 	.word	0x40012c00
 800a348:	ff0fffff 	.word	0xff0fffff
 800a34c:	40000400 	.word	0x40000400
 800a350:	40014000 	.word	0x40014000

0800a354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a35c:	46c0      	nop			; (mov r8, r8)
 800a35e:	46bd      	mov	sp, r7
 800a360:	b002      	add	sp, #8
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a36c:	46c0      	nop			; (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	b002      	add	sp, #8
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	46bd      	mov	sp, r7
 800a380:	b002      	add	sp, #8
 800a382:	bd80      	pop	{r7, pc}

0800a384 <interfaceSelectLayout>:
//#include <math.h>
#include <stdlib.h>

uint8_t layoutsCounter = 5; //how many layouts are programmed

void interfaceSelectLayout(uint8_t l) {
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	0002      	movs	r2, r0
 800a38c:	1dfb      	adds	r3, r7, #7
 800a38e:	701a      	strb	r2, [r3, #0]

	if (l == 1) { //simple
 800a390:	1dfb      	adds	r3, r7, #7
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d000      	beq.n	800a39a <interfaceSelectLayout+0x16>
 800a398:	e09f      	b.n	800a4da <interfaceSelectLayout+0x156>

		showBarometer = 1;
 800a39a:	4bf3      	ldr	r3, [pc, #972]	; (800a768 <interfaceSelectLayout+0x3e4>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	701a      	strb	r2, [r3, #0]
		showBatteryState = 0;
 800a3a0:	4bf2      	ldr	r3, [pc, #968]	; (800a76c <interfaceSelectLayout+0x3e8>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800a3a6:	4bf2      	ldr	r3, [pc, #968]	; (800a770 <interfaceSelectLayout+0x3ec>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a3ac:	4bf1      	ldr	r3, [pc, #964]	; (800a774 <interfaceSelectLayout+0x3f0>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a3b2:	4bf1      	ldr	r3, [pc, #964]	; (800a778 <interfaceSelectLayout+0x3f4>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a3b8:	4bf0      	ldr	r3, [pc, #960]	; (800a77c <interfaceSelectLayout+0x3f8>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a3be:	4bf0      	ldr	r3, [pc, #960]	; (800a780 <interfaceSelectLayout+0x3fc>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a3c4:	4bef      	ldr	r3, [pc, #956]	; (800a784 <interfaceSelectLayout+0x400>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a3ca:	4bef      	ldr	r3, [pc, #956]	; (800a788 <interfaceSelectLayout+0x404>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a3d0:	4bee      	ldr	r3, [pc, #952]	; (800a78c <interfaceSelectLayout+0x408>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a3d6:	4bee      	ldr	r3, [pc, #952]	; (800a790 <interfaceSelectLayout+0x40c>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a3dc:	4bed      	ldr	r3, [pc, #948]	; (800a794 <interfaceSelectLayout+0x410>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	701a      	strb	r2, [r3, #0]

		//sensor readings positions

		temperatureX = 38;
 800a3e2:	4bed      	ldr	r3, [pc, #948]	; (800a798 <interfaceSelectLayout+0x414>)
 800a3e4:	2226      	movs	r2, #38	; 0x26
 800a3e6:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a3e8:	4bec      	ldr	r3, [pc, #944]	; (800a79c <interfaceSelectLayout+0x418>)
 800a3ea:	222c      	movs	r2, #44	; 0x2c
 800a3ec:	701a      	strb	r2, [r3, #0]

		humidityX = 130;
 800a3ee:	4bec      	ldr	r3, [pc, #944]	; (800a7a0 <interfaceSelectLayout+0x41c>)
 800a3f0:	2282      	movs	r2, #130	; 0x82
 800a3f2:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a3f4:	4beb      	ldr	r3, [pc, #940]	; (800a7a4 <interfaceSelectLayout+0x420>)
 800a3f6:	224b      	movs	r2, #75	; 0x4b
 800a3f8:	701a      	strb	r2, [r3, #0]

		pressureX = 17;
 800a3fa:	4beb      	ldr	r3, [pc, #940]	; (800a7a8 <interfaceSelectLayout+0x424>)
 800a3fc:	2211      	movs	r2, #17
 800a3fe:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a400:	4bea      	ldr	r3, [pc, #936]	; (800a7ac <interfaceSelectLayout+0x428>)
 800a402:	2232      	movs	r2, #50	; 0x32
 800a404:	701a      	strb	r2, [r3, #0]

		//compass and altitude
		compassX = 30;
 800a406:	4bea      	ldr	r3, [pc, #936]	; (800a7b0 <interfaceSelectLayout+0x42c>)
 800a408:	221e      	movs	r2, #30
 800a40a:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a40c:	4be9      	ldr	r3, [pc, #932]	; (800a7b4 <interfaceSelectLayout+0x430>)
 800a40e:	224e      	movs	r2, #78	; 0x4e
 800a410:	701a      	strb	r2, [r3, #0]

		//date position
		dateX = 153;
 800a412:	4be9      	ldr	r3, [pc, #932]	; (800a7b8 <interfaceSelectLayout+0x434>)
 800a414:	2299      	movs	r2, #153	; 0x99
 800a416:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a418:	4be8      	ldr	r3, [pc, #928]	; (800a7bc <interfaceSelectLayout+0x438>)
 800a41a:	225f      	movs	r2, #95	; 0x5f
 800a41c:	701a      	strb	r2, [r3, #0]

		batteryStateStartX = 135;
 800a41e:	4be8      	ldr	r3, [pc, #928]	; (800a7c0 <interfaceSelectLayout+0x43c>)
 800a420:	2287      	movs	r2, #135	; 0x87
 800a422:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a424:	4be7      	ldr	r3, [pc, #924]	; (800a7c4 <interfaceSelectLayout+0x440>)
 800a426:	2287      	movs	r2, #135	; 0x87
 800a428:	701a      	strb	r2, [r3, #0]

		pointerShadowShift = 2;
 800a42a:	4be7      	ldr	r3, [pc, #924]	; (800a7c8 <interfaceSelectLayout+0x444>)
 800a42c:	2202      	movs	r2, #2
 800a42e:	701a      	strb	r2, [r3, #0]

		chronoDecimalsStartX = 100;
 800a430:	4be6      	ldr	r3, [pc, #920]	; (800a7cc <interfaceSelectLayout+0x448>)
 800a432:	2264      	movs	r2, #100	; 0x64
 800a434:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a436:	4be6      	ldr	r3, [pc, #920]	; (800a7d0 <interfaceSelectLayout+0x44c>)
 800a438:	2232      	movs	r2, #50	; 0x32
 800a43a:	701a      	strb	r2, [r3, #0]

		chronoMinutesStartX = 100;
 800a43c:	4be5      	ldr	r3, [pc, #916]	; (800a7d4 <interfaceSelectLayout+0x450>)
 800a43e:	2264      	movs	r2, #100	; 0x64
 800a440:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a442:	4be5      	ldr	r3, [pc, #916]	; (800a7d8 <interfaceSelectLayout+0x454>)
 800a444:	2296      	movs	r2, #150	; 0x96
 800a446:	701a      	strb	r2, [r3, #0]

		secondsStartX = 100;
 800a448:	4be4      	ldr	r3, [pc, #912]	; (800a7dc <interfaceSelectLayout+0x458>)
 800a44a:	2264      	movs	r2, #100	; 0x64
 800a44c:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a44e:	4be4      	ldr	r3, [pc, #912]	; (800a7e0 <interfaceSelectLayout+0x45c>)
 800a450:	2296      	movs	r2, #150	; 0x96
 800a452:	701a      	strb	r2, [r3, #0]

		mainStartX = 100;
 800a454:	4be3      	ldr	r3, [pc, #908]	; (800a7e4 <interfaceSelectLayout+0x460>)
 800a456:	2264      	movs	r2, #100	; 0x64
 800a458:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a45a:	4be3      	ldr	r3, [pc, #908]	; (800a7e8 <interfaceSelectLayout+0x464>)
 800a45c:	2264      	movs	r2, #100	; 0x64
 800a45e:	701a      	strb	r2, [r3, #0]

		mainBoardRadius = 97;
 800a460:	4be2      	ldr	r3, [pc, #904]	; (800a7ec <interfaceSelectLayout+0x468>)
 800a462:	2261      	movs	r2, #97	; 0x61
 800a464:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a466:	4be2      	ldr	r3, [pc, #904]	; (800a7f0 <interfaceSelectLayout+0x46c>)
 800a468:	221c      	movs	r2, #28
 800a46a:	701a      	strb	r2, [r3, #0]

		//pointers lengths

		hourPointerLength = 55;
 800a46c:	4be1      	ldr	r3, [pc, #900]	; (800a7f4 <interfaceSelectLayout+0x470>)
 800a46e:	2237      	movs	r2, #55	; 0x37
 800a470:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a472:	4be1      	ldr	r3, [pc, #900]	; (800a7f8 <interfaceSelectLayout+0x474>)
 800a474:	2250      	movs	r2, #80	; 0x50
 800a476:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a478:	4be0      	ldr	r3, [pc, #896]	; (800a7fc <interfaceSelectLayout+0x478>)
 800a47a:	2214      	movs	r2, #20
 800a47c:	701a      	strb	r2, [r3, #0]

		chronoDecimalsPointerLength = 20;
 800a47e:	4be0      	ldr	r3, [pc, #896]	; (800a800 <interfaceSelectLayout+0x47c>)
 800a480:	2214      	movs	r2, #20
 800a482:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a484:	4bdf      	ldr	r3, [pc, #892]	; (800a804 <interfaceSelectLayout+0x480>)
 800a486:	2214      	movs	r2, #20
 800a488:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a48a:	4bdf      	ldr	r3, [pc, #892]	; (800a808 <interfaceSelectLayout+0x484>)
 800a48c:	2250      	movs	r2, #80	; 0x50
 800a48e:	701a      	strb	r2, [r3, #0]

		batteryStatePointerLength = 35;
 800a490:	4bde      	ldr	r3, [pc, #888]	; (800a80c <interfaceSelectLayout+0x488>)
 800a492:	2223      	movs	r2, #35	; 0x23
 800a494:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a496:	4bde      	ldr	r3, [pc, #888]	; (800a810 <interfaceSelectLayout+0x48c>)
 800a498:	2264      	movs	r2, #100	; 0x64
 800a49a:	701a      	strb	r2, [r3, #0]

		//index lengths
		secondsIndexLength = 4;
 800a49c:	4bdd      	ldr	r3, [pc, #884]	; (800a814 <interfaceSelectLayout+0x490>)
 800a49e:	2204      	movs	r2, #4
 800a4a0:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a4a2:	4bdd      	ldr	r3, [pc, #884]	; (800a818 <interfaceSelectLayout+0x494>)
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a4a8:	4bdc      	ldr	r3, [pc, #880]	; (800a81c <interfaceSelectLayout+0x498>)
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a4ae:	4bdc      	ldr	r3, [pc, #880]	; (800a820 <interfaceSelectLayout+0x49c>)
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	701a      	strb	r2, [r3, #0]

		batteryStateIndexLength = 15;
 800a4b4:	4bdb      	ldr	r3, [pc, #876]	; (800a824 <interfaceSelectLayout+0x4a0>)
 800a4b6:	220f      	movs	r2, #15
 800a4b8:	701a      	strb	r2, [r3, #0]

		//pointer shifts
		batteryPointerShift = 20;
 800a4ba:	4bdb      	ldr	r3, [pc, #876]	; (800a828 <interfaceSelectLayout+0x4a4>)
 800a4bc:	2214      	movs	r2, #20
 800a4be:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a4c0:	4bda      	ldr	r3, [pc, #872]	; (800a82c <interfaceSelectLayout+0x4a8>)
 800a4c2:	2255      	movs	r2, #85	; 0x55
 800a4c4:	701a      	strb	r2, [r3, #0]

		//moon Phase
		moonPhaseX = 100;
 800a4c6:	4bda      	ldr	r3, [pc, #872]	; (800a830 <interfaceSelectLayout+0x4ac>)
 800a4c8:	2264      	movs	r2, #100	; 0x64
 800a4ca:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a4cc:	4bd9      	ldr	r3, [pc, #868]	; (800a834 <interfaceSelectLayout+0x4b0>)
 800a4ce:	2232      	movs	r2, #50	; 0x32
 800a4d0:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 15;
 800a4d2:	4bd9      	ldr	r3, [pc, #868]	; (800a838 <interfaceSelectLayout+0x4b4>)
 800a4d4:	220f      	movs	r2, #15
 800a4d6:	701a      	strb	r2, [r3, #0]
		//pointer shifts
		batteryPointerShift = 20;
		pressurePointerShift = 85;
	}

}
 800a4d8:	e2f4      	b.n	800aac4 <interfaceSelectLayout+0x740>
	else if (l == 2) { //navi
 800a4da:	1dfb      	adds	r3, r7, #7
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d000      	beq.n	800a4e4 <interfaceSelectLayout+0x160>
 800a4e2:	e09f      	b.n	800a624 <interfaceSelectLayout+0x2a0>
		showBarometer = 1;
 800a4e4:	4ba0      	ldr	r3, [pc, #640]	; (800a768 <interfaceSelectLayout+0x3e4>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a4ea:	4ba0      	ldr	r3, [pc, #640]	; (800a76c <interfaceSelectLayout+0x3e8>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a4f0:	4b9f      	ldr	r3, [pc, #636]	; (800a770 <interfaceSelectLayout+0x3ec>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	701a      	strb	r2, [r3, #0]
		showNavi = 1;
 800a4f6:	4b9f      	ldr	r3, [pc, #636]	; (800a774 <interfaceSelectLayout+0x3f0>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a4fc:	4b9e      	ldr	r3, [pc, #632]	; (800a778 <interfaceSelectLayout+0x3f4>)
 800a4fe:	2201      	movs	r2, #1
 800a500:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a502:	4b9e      	ldr	r3, [pc, #632]	; (800a77c <interfaceSelectLayout+0x3f8>)
 800a504:	2201      	movs	r2, #1
 800a506:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a508:	4b9d      	ldr	r3, [pc, #628]	; (800a780 <interfaceSelectLayout+0x3fc>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a50e:	4b9d      	ldr	r3, [pc, #628]	; (800a784 <interfaceSelectLayout+0x400>)
 800a510:	2201      	movs	r2, #1
 800a512:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a514:	4b9c      	ldr	r3, [pc, #624]	; (800a788 <interfaceSelectLayout+0x404>)
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a51a:	4b9c      	ldr	r3, [pc, #624]	; (800a78c <interfaceSelectLayout+0x408>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a520:	4b9b      	ldr	r3, [pc, #620]	; (800a790 <interfaceSelectLayout+0x40c>)
 800a522:	2201      	movs	r2, #1
 800a524:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a526:	4b9b      	ldr	r3, [pc, #620]	; (800a794 <interfaceSelectLayout+0x410>)
 800a528:	2201      	movs	r2, #1
 800a52a:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a52c:	4b9a      	ldr	r3, [pc, #616]	; (800a798 <interfaceSelectLayout+0x414>)
 800a52e:	2226      	movs	r2, #38	; 0x26
 800a530:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a532:	4b9a      	ldr	r3, [pc, #616]	; (800a79c <interfaceSelectLayout+0x418>)
 800a534:	222c      	movs	r2, #44	; 0x2c
 800a536:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a538:	4b99      	ldr	r3, [pc, #612]	; (800a7a0 <interfaceSelectLayout+0x41c>)
 800a53a:	2282      	movs	r2, #130	; 0x82
 800a53c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a53e:	4b99      	ldr	r3, [pc, #612]	; (800a7a4 <interfaceSelectLayout+0x420>)
 800a540:	224b      	movs	r2, #75	; 0x4b
 800a542:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a544:	4b98      	ldr	r3, [pc, #608]	; (800a7a8 <interfaceSelectLayout+0x424>)
 800a546:	2211      	movs	r2, #17
 800a548:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a54a:	4b98      	ldr	r3, [pc, #608]	; (800a7ac <interfaceSelectLayout+0x428>)
 800a54c:	2232      	movs	r2, #50	; 0x32
 800a54e:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a550:	4b97      	ldr	r3, [pc, #604]	; (800a7b0 <interfaceSelectLayout+0x42c>)
 800a552:	221e      	movs	r2, #30
 800a554:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a556:	4b97      	ldr	r3, [pc, #604]	; (800a7b4 <interfaceSelectLayout+0x430>)
 800a558:	224e      	movs	r2, #78	; 0x4e
 800a55a:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a55c:	4b96      	ldr	r3, [pc, #600]	; (800a7b8 <interfaceSelectLayout+0x434>)
 800a55e:	2299      	movs	r2, #153	; 0x99
 800a560:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a562:	4b96      	ldr	r3, [pc, #600]	; (800a7bc <interfaceSelectLayout+0x438>)
 800a564:	225f      	movs	r2, #95	; 0x5f
 800a566:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a568:	4b95      	ldr	r3, [pc, #596]	; (800a7c0 <interfaceSelectLayout+0x43c>)
 800a56a:	2287      	movs	r2, #135	; 0x87
 800a56c:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a56e:	4b95      	ldr	r3, [pc, #596]	; (800a7c4 <interfaceSelectLayout+0x440>)
 800a570:	2287      	movs	r2, #135	; 0x87
 800a572:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a574:	4b94      	ldr	r3, [pc, #592]	; (800a7c8 <interfaceSelectLayout+0x444>)
 800a576:	2202      	movs	r2, #2
 800a578:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a57a:	4b94      	ldr	r3, [pc, #592]	; (800a7cc <interfaceSelectLayout+0x448>)
 800a57c:	2264      	movs	r2, #100	; 0x64
 800a57e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a580:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <interfaceSelectLayout+0x44c>)
 800a582:	2232      	movs	r2, #50	; 0x32
 800a584:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a586:	4b93      	ldr	r3, [pc, #588]	; (800a7d4 <interfaceSelectLayout+0x450>)
 800a588:	2264      	movs	r2, #100	; 0x64
 800a58a:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a58c:	4b92      	ldr	r3, [pc, #584]	; (800a7d8 <interfaceSelectLayout+0x454>)
 800a58e:	2296      	movs	r2, #150	; 0x96
 800a590:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a592:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <interfaceSelectLayout+0x458>)
 800a594:	2264      	movs	r2, #100	; 0x64
 800a596:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a598:	4b91      	ldr	r3, [pc, #580]	; (800a7e0 <interfaceSelectLayout+0x45c>)
 800a59a:	2296      	movs	r2, #150	; 0x96
 800a59c:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a59e:	4b91      	ldr	r3, [pc, #580]	; (800a7e4 <interfaceSelectLayout+0x460>)
 800a5a0:	2264      	movs	r2, #100	; 0x64
 800a5a2:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a5a4:	4b90      	ldr	r3, [pc, #576]	; (800a7e8 <interfaceSelectLayout+0x464>)
 800a5a6:	2264      	movs	r2, #100	; 0x64
 800a5a8:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a5aa:	4b90      	ldr	r3, [pc, #576]	; (800a7ec <interfaceSelectLayout+0x468>)
 800a5ac:	2261      	movs	r2, #97	; 0x61
 800a5ae:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a5b0:	4b8f      	ldr	r3, [pc, #572]	; (800a7f0 <interfaceSelectLayout+0x46c>)
 800a5b2:	221c      	movs	r2, #28
 800a5b4:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a5b6:	4b8f      	ldr	r3, [pc, #572]	; (800a7f4 <interfaceSelectLayout+0x470>)
 800a5b8:	2237      	movs	r2, #55	; 0x37
 800a5ba:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a5bc:	4b8e      	ldr	r3, [pc, #568]	; (800a7f8 <interfaceSelectLayout+0x474>)
 800a5be:	2250      	movs	r2, #80	; 0x50
 800a5c0:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a5c2:	4b8e      	ldr	r3, [pc, #568]	; (800a7fc <interfaceSelectLayout+0x478>)
 800a5c4:	2214      	movs	r2, #20
 800a5c6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a5c8:	4b8d      	ldr	r3, [pc, #564]	; (800a800 <interfaceSelectLayout+0x47c>)
 800a5ca:	2214      	movs	r2, #20
 800a5cc:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a5ce:	4b8d      	ldr	r3, [pc, #564]	; (800a804 <interfaceSelectLayout+0x480>)
 800a5d0:	2214      	movs	r2, #20
 800a5d2:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a5d4:	4b8c      	ldr	r3, [pc, #560]	; (800a808 <interfaceSelectLayout+0x484>)
 800a5d6:	2250      	movs	r2, #80	; 0x50
 800a5d8:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a5da:	4b8c      	ldr	r3, [pc, #560]	; (800a80c <interfaceSelectLayout+0x488>)
 800a5dc:	2223      	movs	r2, #35	; 0x23
 800a5de:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a5e0:	4b8b      	ldr	r3, [pc, #556]	; (800a810 <interfaceSelectLayout+0x48c>)
 800a5e2:	2264      	movs	r2, #100	; 0x64
 800a5e4:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a5e6:	4b8b      	ldr	r3, [pc, #556]	; (800a814 <interfaceSelectLayout+0x490>)
 800a5e8:	2204      	movs	r2, #4
 800a5ea:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a5ec:	4b8a      	ldr	r3, [pc, #552]	; (800a818 <interfaceSelectLayout+0x494>)
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a5f2:	4b8a      	ldr	r3, [pc, #552]	; (800a81c <interfaceSelectLayout+0x498>)
 800a5f4:	2204      	movs	r2, #4
 800a5f6:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a5f8:	4b89      	ldr	r3, [pc, #548]	; (800a820 <interfaceSelectLayout+0x49c>)
 800a5fa:	220a      	movs	r2, #10
 800a5fc:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a5fe:	4b89      	ldr	r3, [pc, #548]	; (800a824 <interfaceSelectLayout+0x4a0>)
 800a600:	220f      	movs	r2, #15
 800a602:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a604:	4b88      	ldr	r3, [pc, #544]	; (800a828 <interfaceSelectLayout+0x4a4>)
 800a606:	2214      	movs	r2, #20
 800a608:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a60a:	4b88      	ldr	r3, [pc, #544]	; (800a82c <interfaceSelectLayout+0x4a8>)
 800a60c:	2255      	movs	r2, #85	; 0x55
 800a60e:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a610:	4b87      	ldr	r3, [pc, #540]	; (800a830 <interfaceSelectLayout+0x4ac>)
 800a612:	2296      	movs	r2, #150	; 0x96
 800a614:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a616:	4b87      	ldr	r3, [pc, #540]	; (800a834 <interfaceSelectLayout+0x4b0>)
 800a618:	2232      	movs	r2, #50	; 0x32
 800a61a:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800a61c:	4b86      	ldr	r3, [pc, #536]	; (800a838 <interfaceSelectLayout+0x4b4>)
 800a61e:	220a      	movs	r2, #10
 800a620:	701a      	strb	r2, [r3, #0]
}
 800a622:	e24f      	b.n	800aac4 <interfaceSelectLayout+0x740>
	else if (l == 3) { //digital
 800a624:	1dfb      	adds	r3, r7, #7
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d000      	beq.n	800a62e <interfaceSelectLayout+0x2aa>
 800a62c:	e10a      	b.n	800a844 <interfaceSelectLayout+0x4c0>
		showBarometer = 0;
 800a62e:	4b4e      	ldr	r3, [pc, #312]	; (800a768 <interfaceSelectLayout+0x3e4>)
 800a630:	2200      	movs	r2, #0
 800a632:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a634:	4b4d      	ldr	r3, [pc, #308]	; (800a76c <interfaceSelectLayout+0x3e8>)
 800a636:	2201      	movs	r2, #1
 800a638:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a63a:	4b4d      	ldr	r3, [pc, #308]	; (800a770 <interfaceSelectLayout+0x3ec>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a640:	4b4c      	ldr	r3, [pc, #304]	; (800a774 <interfaceSelectLayout+0x3f0>)
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a646:	4b4c      	ldr	r3, [pc, #304]	; (800a778 <interfaceSelectLayout+0x3f4>)
 800a648:	2201      	movs	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a64c:	4b4b      	ldr	r3, [pc, #300]	; (800a77c <interfaceSelectLayout+0x3f8>)
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a652:	4b4b      	ldr	r3, [pc, #300]	; (800a780 <interfaceSelectLayout+0x3fc>)
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a658:	4b4a      	ldr	r3, [pc, #296]	; (800a784 <interfaceSelectLayout+0x400>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 1;
 800a65e:	4b4a      	ldr	r3, [pc, #296]	; (800a788 <interfaceSelectLayout+0x404>)
 800a660:	2201      	movs	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a664:	4b49      	ldr	r3, [pc, #292]	; (800a78c <interfaceSelectLayout+0x408>)
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800a66a:	4b49      	ldr	r3, [pc, #292]	; (800a790 <interfaceSelectLayout+0x40c>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a670:	4b48      	ldr	r3, [pc, #288]	; (800a794 <interfaceSelectLayout+0x410>)
 800a672:	2201      	movs	r2, #1
 800a674:	701a      	strb	r2, [r3, #0]
		digitalX = 60;
 800a676:	4b71      	ldr	r3, [pc, #452]	; (800a83c <interfaceSelectLayout+0x4b8>)
 800a678:	223c      	movs	r2, #60	; 0x3c
 800a67a:	701a      	strb	r2, [r3, #0]
		digitalY = 25;
 800a67c:	4b70      	ldr	r3, [pc, #448]	; (800a840 <interfaceSelectLayout+0x4bc>)
 800a67e:	2219      	movs	r2, #25
 800a680:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800a682:	4b45      	ldr	r3, [pc, #276]	; (800a798 <interfaceSelectLayout+0x414>)
 800a684:	2255      	movs	r2, #85	; 0x55
 800a686:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800a688:	4b44      	ldr	r3, [pc, #272]	; (800a79c <interfaceSelectLayout+0x418>)
 800a68a:	221e      	movs	r2, #30
 800a68c:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a68e:	4b44      	ldr	r3, [pc, #272]	; (800a7a0 <interfaceSelectLayout+0x41c>)
 800a690:	2282      	movs	r2, #130	; 0x82
 800a692:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a694:	4b43      	ldr	r3, [pc, #268]	; (800a7a4 <interfaceSelectLayout+0x420>)
 800a696:	224b      	movs	r2, #75	; 0x4b
 800a698:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a69a:	4b43      	ldr	r3, [pc, #268]	; (800a7a8 <interfaceSelectLayout+0x424>)
 800a69c:	2211      	movs	r2, #17
 800a69e:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a6a0:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <interfaceSelectLayout+0x428>)
 800a6a2:	2232      	movs	r2, #50	; 0x32
 800a6a4:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a6a6:	4b42      	ldr	r3, [pc, #264]	; (800a7b0 <interfaceSelectLayout+0x42c>)
 800a6a8:	221e      	movs	r2, #30
 800a6aa:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a6ac:	4b41      	ldr	r3, [pc, #260]	; (800a7b4 <interfaceSelectLayout+0x430>)
 800a6ae:	224e      	movs	r2, #78	; 0x4e
 800a6b0:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a6b2:	4b41      	ldr	r3, [pc, #260]	; (800a7b8 <interfaceSelectLayout+0x434>)
 800a6b4:	2299      	movs	r2, #153	; 0x99
 800a6b6:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a6b8:	4b40      	ldr	r3, [pc, #256]	; (800a7bc <interfaceSelectLayout+0x438>)
 800a6ba:	225f      	movs	r2, #95	; 0x5f
 800a6bc:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a6be:	4b40      	ldr	r3, [pc, #256]	; (800a7c0 <interfaceSelectLayout+0x43c>)
 800a6c0:	2287      	movs	r2, #135	; 0x87
 800a6c2:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a6c4:	4b3f      	ldr	r3, [pc, #252]	; (800a7c4 <interfaceSelectLayout+0x440>)
 800a6c6:	2287      	movs	r2, #135	; 0x87
 800a6c8:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a6ca:	4b3f      	ldr	r3, [pc, #252]	; (800a7c8 <interfaceSelectLayout+0x444>)
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800a6d0:	4b3e      	ldr	r3, [pc, #248]	; (800a7cc <interfaceSelectLayout+0x448>)
 800a6d2:	2232      	movs	r2, #50	; 0x32
 800a6d4:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800a6d6:	4b3e      	ldr	r3, [pc, #248]	; (800a7d0 <interfaceSelectLayout+0x44c>)
 800a6d8:	2264      	movs	r2, #100	; 0x64
 800a6da:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a6dc:	4b3d      	ldr	r3, [pc, #244]	; (800a7d4 <interfaceSelectLayout+0x450>)
 800a6de:	2264      	movs	r2, #100	; 0x64
 800a6e0:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a6e2:	4b3d      	ldr	r3, [pc, #244]	; (800a7d8 <interfaceSelectLayout+0x454>)
 800a6e4:	2296      	movs	r2, #150	; 0x96
 800a6e6:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a6e8:	4b3c      	ldr	r3, [pc, #240]	; (800a7dc <interfaceSelectLayout+0x458>)
 800a6ea:	2264      	movs	r2, #100	; 0x64
 800a6ec:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a6ee:	4b3c      	ldr	r3, [pc, #240]	; (800a7e0 <interfaceSelectLayout+0x45c>)
 800a6f0:	2296      	movs	r2, #150	; 0x96
 800a6f2:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a6f4:	4b3b      	ldr	r3, [pc, #236]	; (800a7e4 <interfaceSelectLayout+0x460>)
 800a6f6:	2264      	movs	r2, #100	; 0x64
 800a6f8:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a6fa:	4b3b      	ldr	r3, [pc, #236]	; (800a7e8 <interfaceSelectLayout+0x464>)
 800a6fc:	2264      	movs	r2, #100	; 0x64
 800a6fe:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a700:	4b3a      	ldr	r3, [pc, #232]	; (800a7ec <interfaceSelectLayout+0x468>)
 800a702:	2261      	movs	r2, #97	; 0x61
 800a704:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a706:	4b3a      	ldr	r3, [pc, #232]	; (800a7f0 <interfaceSelectLayout+0x46c>)
 800a708:	221c      	movs	r2, #28
 800a70a:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a70c:	4b39      	ldr	r3, [pc, #228]	; (800a7f4 <interfaceSelectLayout+0x470>)
 800a70e:	2237      	movs	r2, #55	; 0x37
 800a710:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a712:	4b39      	ldr	r3, [pc, #228]	; (800a7f8 <interfaceSelectLayout+0x474>)
 800a714:	2250      	movs	r2, #80	; 0x50
 800a716:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a718:	4b38      	ldr	r3, [pc, #224]	; (800a7fc <interfaceSelectLayout+0x478>)
 800a71a:	2214      	movs	r2, #20
 800a71c:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a71e:	4b38      	ldr	r3, [pc, #224]	; (800a800 <interfaceSelectLayout+0x47c>)
 800a720:	2214      	movs	r2, #20
 800a722:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a724:	4b37      	ldr	r3, [pc, #220]	; (800a804 <interfaceSelectLayout+0x480>)
 800a726:	2214      	movs	r2, #20
 800a728:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a72a:	4b37      	ldr	r3, [pc, #220]	; (800a808 <interfaceSelectLayout+0x484>)
 800a72c:	2250      	movs	r2, #80	; 0x50
 800a72e:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a730:	4b36      	ldr	r3, [pc, #216]	; (800a80c <interfaceSelectLayout+0x488>)
 800a732:	2223      	movs	r2, #35	; 0x23
 800a734:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a736:	4b36      	ldr	r3, [pc, #216]	; (800a810 <interfaceSelectLayout+0x48c>)
 800a738:	2264      	movs	r2, #100	; 0x64
 800a73a:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a73c:	4b35      	ldr	r3, [pc, #212]	; (800a814 <interfaceSelectLayout+0x490>)
 800a73e:	2204      	movs	r2, #4
 800a740:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a742:	4b35      	ldr	r3, [pc, #212]	; (800a818 <interfaceSelectLayout+0x494>)
 800a744:	2202      	movs	r2, #2
 800a746:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a748:	4b34      	ldr	r3, [pc, #208]	; (800a81c <interfaceSelectLayout+0x498>)
 800a74a:	2204      	movs	r2, #4
 800a74c:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a74e:	4b34      	ldr	r3, [pc, #208]	; (800a820 <interfaceSelectLayout+0x49c>)
 800a750:	220a      	movs	r2, #10
 800a752:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a754:	4b33      	ldr	r3, [pc, #204]	; (800a824 <interfaceSelectLayout+0x4a0>)
 800a756:	220f      	movs	r2, #15
 800a758:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a75a:	4b33      	ldr	r3, [pc, #204]	; (800a828 <interfaceSelectLayout+0x4a4>)
 800a75c:	2214      	movs	r2, #20
 800a75e:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a760:	4b32      	ldr	r3, [pc, #200]	; (800a82c <interfaceSelectLayout+0x4a8>)
 800a762:	2255      	movs	r2, #85	; 0x55
 800a764:	701a      	strb	r2, [r3, #0]
}
 800a766:	e1ad      	b.n	800aac4 <interfaceSelectLayout+0x740>
 800a768:	20000149 	.word	0x20000149
 800a76c:	200003c8 	.word	0x200003c8
 800a770:	200003c0 	.word	0x200003c0
 800a774:	2000037d 	.word	0x2000037d
 800a778:	20000142 	.word	0x20000142
 800a77c:	20000716 	.word	0x20000716
 800a780:	20000132 	.word	0x20000132
 800a784:	2000076c 	.word	0x2000076c
 800a788:	200007c0 	.word	0x200007c0
 800a78c:	200007a6 	.word	0x200007a6
 800a790:	200003d0 	.word	0x200003d0
 800a794:	200006e9 	.word	0x200006e9
 800a798:	200006fd 	.word	0x200006fd
 800a79c:	2000037c 	.word	0x2000037c
 800a7a0:	200007ca 	.word	0x200007ca
 800a7a4:	2000045a 	.word	0x2000045a
 800a7a8:	200003d4 	.word	0x200003d4
 800a7ac:	2000014a 	.word	0x2000014a
 800a7b0:	200007a5 	.word	0x200007a5
 800a7b4:	2000045c 	.word	0x2000045c
 800a7b8:	200007b4 	.word	0x200007b4
 800a7bc:	200001b0 	.word	0x200001b0
 800a7c0:	20000775 	.word	0x20000775
 800a7c4:	200007d0 	.word	0x200007d0
 800a7c8:	20000141 	.word	0x20000141
 800a7cc:	20000718 	.word	0x20000718
 800a7d0:	20000719 	.word	0x20000719
 800a7d4:	200007ae 	.word	0x200007ae
 800a7d8:	20000786 	.word	0x20000786
 800a7dc:	200007a7 	.word	0x200007a7
 800a7e0:	2000038a 	.word	0x2000038a
 800a7e4:	2000045b 	.word	0x2000045b
 800a7e8:	2000013a 	.word	0x2000013a
 800a7ec:	200006f8 	.word	0x200006f8
 800a7f0:	20000120 	.word	0x20000120
 800a7f4:	20000143 	.word	0x20000143
 800a7f8:	2000076b 	.word	0x2000076b
 800a7fc:	20000769 	.word	0x20000769
 800a800:	200007c2 	.word	0x200007c2
 800a804:	20000140 	.word	0x20000140
 800a808:	200003c9 	.word	0x200003c9
 800a80c:	200004c5 	.word	0x200004c5
 800a810:	2000078c 	.word	0x2000078c
 800a814:	2000012a 	.word	0x2000012a
 800a818:	200003c4 	.word	0x200003c4
 800a81c:	200006ea 	.word	0x200006ea
 800a820:	20000456 	.word	0x20000456
 800a824:	20000717 	.word	0x20000717
 800a828:	20000148 	.word	0x20000148
 800a82c:	200006fc 	.word	0x200006fc
 800a830:	200007c1 	.word	0x200007c1
 800a834:	20000784 	.word	0x20000784
 800a838:	2000014c 	.word	0x2000014c
 800a83c:	20000715 	.word	0x20000715
 800a840:	200003c2 	.word	0x200003c2
	else if (l == 4) { //seconds
 800a844:	1dfb      	adds	r3, r7, #7
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d000      	beq.n	800a84e <interfaceSelectLayout+0x4ca>
 800a84c:	e099      	b.n	800a982 <interfaceSelectLayout+0x5fe>
		showBarometer = 1;
 800a84e:	4b9f      	ldr	r3, [pc, #636]	; (800aacc <interfaceSelectLayout+0x748>)
 800a850:	2201      	movs	r2, #1
 800a852:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a854:	4b9e      	ldr	r3, [pc, #632]	; (800aad0 <interfaceSelectLayout+0x74c>)
 800a856:	2201      	movs	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a85a:	4b9e      	ldr	r3, [pc, #632]	; (800aad4 <interfaceSelectLayout+0x750>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a860:	4b9d      	ldr	r3, [pc, #628]	; (800aad8 <interfaceSelectLayout+0x754>)
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a866:	4b9d      	ldr	r3, [pc, #628]	; (800aadc <interfaceSelectLayout+0x758>)
 800a868:	2201      	movs	r2, #1
 800a86a:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a86c:	4b9c      	ldr	r3, [pc, #624]	; (800aae0 <interfaceSelectLayout+0x75c>)
 800a86e:	2201      	movs	r2, #1
 800a870:	701a      	strb	r2, [r3, #0]
		showSeconds = 1;
 800a872:	4b9c      	ldr	r3, [pc, #624]	; (800aae4 <interfaceSelectLayout+0x760>)
 800a874:	2201      	movs	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a878:	4b9b      	ldr	r3, [pc, #620]	; (800aae8 <interfaceSelectLayout+0x764>)
 800a87a:	2201      	movs	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a87e:	4b9b      	ldr	r3, [pc, #620]	; (800aaec <interfaceSelectLayout+0x768>)
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a884:	4b9a      	ldr	r3, [pc, #616]	; (800aaf0 <interfaceSelectLayout+0x76c>)
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a88a:	4b9a      	ldr	r3, [pc, #616]	; (800aaf4 <interfaceSelectLayout+0x770>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a890:	4b99      	ldr	r3, [pc, #612]	; (800aaf8 <interfaceSelectLayout+0x774>)
 800a892:	2201      	movs	r2, #1
 800a894:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a896:	4b99      	ldr	r3, [pc, #612]	; (800aafc <interfaceSelectLayout+0x778>)
 800a898:	2226      	movs	r2, #38	; 0x26
 800a89a:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a89c:	4b98      	ldr	r3, [pc, #608]	; (800ab00 <interfaceSelectLayout+0x77c>)
 800a89e:	222c      	movs	r2, #44	; 0x2c
 800a8a0:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a8a2:	4b98      	ldr	r3, [pc, #608]	; (800ab04 <interfaceSelectLayout+0x780>)
 800a8a4:	2282      	movs	r2, #130	; 0x82
 800a8a6:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a8a8:	4b97      	ldr	r3, [pc, #604]	; (800ab08 <interfaceSelectLayout+0x784>)
 800a8aa:	224b      	movs	r2, #75	; 0x4b
 800a8ac:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a8ae:	4b97      	ldr	r3, [pc, #604]	; (800ab0c <interfaceSelectLayout+0x788>)
 800a8b0:	2211      	movs	r2, #17
 800a8b2:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a8b4:	4b96      	ldr	r3, [pc, #600]	; (800ab10 <interfaceSelectLayout+0x78c>)
 800a8b6:	2232      	movs	r2, #50	; 0x32
 800a8b8:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a8ba:	4b96      	ldr	r3, [pc, #600]	; (800ab14 <interfaceSelectLayout+0x790>)
 800a8bc:	2299      	movs	r2, #153	; 0x99
 800a8be:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a8c0:	4b95      	ldr	r3, [pc, #596]	; (800ab18 <interfaceSelectLayout+0x794>)
 800a8c2:	225f      	movs	r2, #95	; 0x5f
 800a8c4:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a8c6:	4b95      	ldr	r3, [pc, #596]	; (800ab1c <interfaceSelectLayout+0x798>)
 800a8c8:	2287      	movs	r2, #135	; 0x87
 800a8ca:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a8cc:	4b94      	ldr	r3, [pc, #592]	; (800ab20 <interfaceSelectLayout+0x79c>)
 800a8ce:	2287      	movs	r2, #135	; 0x87
 800a8d0:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a8d2:	4b94      	ldr	r3, [pc, #592]	; (800ab24 <interfaceSelectLayout+0x7a0>)
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a8d8:	4b93      	ldr	r3, [pc, #588]	; (800ab28 <interfaceSelectLayout+0x7a4>)
 800a8da:	2264      	movs	r2, #100	; 0x64
 800a8dc:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a8de:	4b93      	ldr	r3, [pc, #588]	; (800ab2c <interfaceSelectLayout+0x7a8>)
 800a8e0:	2232      	movs	r2, #50	; 0x32
 800a8e2:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 55;
 800a8e4:	4b92      	ldr	r3, [pc, #584]	; (800ab30 <interfaceSelectLayout+0x7ac>)
 800a8e6:	2237      	movs	r2, #55	; 0x37
 800a8e8:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 100;
 800a8ea:	4b92      	ldr	r3, [pc, #584]	; (800ab34 <interfaceSelectLayout+0x7b0>)
 800a8ec:	2264      	movs	r2, #100	; 0x64
 800a8ee:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a8f0:	4b91      	ldr	r3, [pc, #580]	; (800ab38 <interfaceSelectLayout+0x7b4>)
 800a8f2:	2264      	movs	r2, #100	; 0x64
 800a8f4:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a8f6:	4b91      	ldr	r3, [pc, #580]	; (800ab3c <interfaceSelectLayout+0x7b8>)
 800a8f8:	2296      	movs	r2, #150	; 0x96
 800a8fa:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a8fc:	4b90      	ldr	r3, [pc, #576]	; (800ab40 <interfaceSelectLayout+0x7bc>)
 800a8fe:	2264      	movs	r2, #100	; 0x64
 800a900:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a902:	4b90      	ldr	r3, [pc, #576]	; (800ab44 <interfaceSelectLayout+0x7c0>)
 800a904:	2264      	movs	r2, #100	; 0x64
 800a906:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a908:	4b8f      	ldr	r3, [pc, #572]	; (800ab48 <interfaceSelectLayout+0x7c4>)
 800a90a:	2261      	movs	r2, #97	; 0x61
 800a90c:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a90e:	4b8f      	ldr	r3, [pc, #572]	; (800ab4c <interfaceSelectLayout+0x7c8>)
 800a910:	221c      	movs	r2, #28
 800a912:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a914:	4b8e      	ldr	r3, [pc, #568]	; (800ab50 <interfaceSelectLayout+0x7cc>)
 800a916:	2237      	movs	r2, #55	; 0x37
 800a918:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a91a:	4b8e      	ldr	r3, [pc, #568]	; (800ab54 <interfaceSelectLayout+0x7d0>)
 800a91c:	2250      	movs	r2, #80	; 0x50
 800a91e:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a920:	4b8d      	ldr	r3, [pc, #564]	; (800ab58 <interfaceSelectLayout+0x7d4>)
 800a922:	2214      	movs	r2, #20
 800a924:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a926:	4b8d      	ldr	r3, [pc, #564]	; (800ab5c <interfaceSelectLayout+0x7d8>)
 800a928:	2214      	movs	r2, #20
 800a92a:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a92c:	4b8c      	ldr	r3, [pc, #560]	; (800ab60 <interfaceSelectLayout+0x7dc>)
 800a92e:	2214      	movs	r2, #20
 800a930:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a932:	4b8c      	ldr	r3, [pc, #560]	; (800ab64 <interfaceSelectLayout+0x7e0>)
 800a934:	2250      	movs	r2, #80	; 0x50
 800a936:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a938:	4b8b      	ldr	r3, [pc, #556]	; (800ab68 <interfaceSelectLayout+0x7e4>)
 800a93a:	2223      	movs	r2, #35	; 0x23
 800a93c:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a93e:	4b8b      	ldr	r3, [pc, #556]	; (800ab6c <interfaceSelectLayout+0x7e8>)
 800a940:	2264      	movs	r2, #100	; 0x64
 800a942:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a944:	4b8a      	ldr	r3, [pc, #552]	; (800ab70 <interfaceSelectLayout+0x7ec>)
 800a946:	2204      	movs	r2, #4
 800a948:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a94a:	4b8a      	ldr	r3, [pc, #552]	; (800ab74 <interfaceSelectLayout+0x7f0>)
 800a94c:	2202      	movs	r2, #2
 800a94e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a950:	4b89      	ldr	r3, [pc, #548]	; (800ab78 <interfaceSelectLayout+0x7f4>)
 800a952:	2204      	movs	r2, #4
 800a954:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a956:	4b89      	ldr	r3, [pc, #548]	; (800ab7c <interfaceSelectLayout+0x7f8>)
 800a958:	220a      	movs	r2, #10
 800a95a:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a95c:	4b88      	ldr	r3, [pc, #544]	; (800ab80 <interfaceSelectLayout+0x7fc>)
 800a95e:	220f      	movs	r2, #15
 800a960:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a962:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <interfaceSelectLayout+0x800>)
 800a964:	2214      	movs	r2, #20
 800a966:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a968:	4b87      	ldr	r3, [pc, #540]	; (800ab88 <interfaceSelectLayout+0x804>)
 800a96a:	2255      	movs	r2, #85	; 0x55
 800a96c:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a96e:	4b87      	ldr	r3, [pc, #540]	; (800ab8c <interfaceSelectLayout+0x808>)
 800a970:	2296      	movs	r2, #150	; 0x96
 800a972:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a974:	4b86      	ldr	r3, [pc, #536]	; (800ab90 <interfaceSelectLayout+0x80c>)
 800a976:	2232      	movs	r2, #50	; 0x32
 800a978:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800a97a:	4b86      	ldr	r3, [pc, #536]	; (800ab94 <interfaceSelectLayout+0x810>)
 800a97c:	220a      	movs	r2, #10
 800a97e:	701a      	strb	r2, [r3, #0]
}
 800a980:	e0a0      	b.n	800aac4 <interfaceSelectLayout+0x740>
	else if (l == 5) { //meter
 800a982:	1dfb      	adds	r3, r7, #7
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b05      	cmp	r3, #5
 800a988:	d000      	beq.n	800a98c <interfaceSelectLayout+0x608>
 800a98a:	e09b      	b.n	800aac4 <interfaceSelectLayout+0x740>
		showBarometer = 0;
 800a98c:	4b4f      	ldr	r3, [pc, #316]	; (800aacc <interfaceSelectLayout+0x748>)
 800a98e:	2200      	movs	r2, #0
 800a990:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a992:	4b4f      	ldr	r3, [pc, #316]	; (800aad0 <interfaceSelectLayout+0x74c>)
 800a994:	2201      	movs	r2, #1
 800a996:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800a998:	4b4e      	ldr	r3, [pc, #312]	; (800aad4 <interfaceSelectLayout+0x750>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
		showNavi = 0;
 800a99e:	4b4e      	ldr	r3, [pc, #312]	; (800aad8 <interfaceSelectLayout+0x754>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
		showDate = 0;
 800a9a4:	4b4d      	ldr	r3, [pc, #308]	; (800aadc <interfaceSelectLayout+0x758>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a9aa:	4b4d      	ldr	r3, [pc, #308]	; (800aae0 <interfaceSelectLayout+0x75c>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a9b0:	4b4c      	ldr	r3, [pc, #304]	; (800aae4 <interfaceSelectLayout+0x760>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a9b6:	4b4c      	ldr	r3, [pc, #304]	; (800aae8 <interfaceSelectLayout+0x764>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a9bc:	4b4b      	ldr	r3, [pc, #300]	; (800aaec <interfaceSelectLayout+0x768>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
		showMeter = 1;
 800a9c2:	4b4b      	ldr	r3, [pc, #300]	; (800aaf0 <interfaceSelectLayout+0x76c>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800a9c8:	4b4a      	ldr	r3, [pc, #296]	; (800aaf4 <interfaceSelectLayout+0x770>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	701a      	strb	r2, [r3, #0]
		LPMode = 0;
 800a9ce:	4b4a      	ldr	r3, [pc, #296]	; (800aaf8 <interfaceSelectLayout+0x774>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	701a      	strb	r2, [r3, #0]
		meterX = 59;
 800a9d4:	4b70      	ldr	r3, [pc, #448]	; (800ab98 <interfaceSelectLayout+0x814>)
 800a9d6:	223b      	movs	r2, #59	; 0x3b
 800a9d8:	701a      	strb	r2, [r3, #0]
		meterY = 20;
 800a9da:	4b70      	ldr	r3, [pc, #448]	; (800ab9c <interfaceSelectLayout+0x818>)
 800a9dc:	2214      	movs	r2, #20
 800a9de:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800a9e0:	4b46      	ldr	r3, [pc, #280]	; (800aafc <interfaceSelectLayout+0x778>)
 800a9e2:	2255      	movs	r2, #85	; 0x55
 800a9e4:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800a9e6:	4b46      	ldr	r3, [pc, #280]	; (800ab00 <interfaceSelectLayout+0x77c>)
 800a9e8:	221e      	movs	r2, #30
 800a9ea:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a9ec:	4b45      	ldr	r3, [pc, #276]	; (800ab04 <interfaceSelectLayout+0x780>)
 800a9ee:	2282      	movs	r2, #130	; 0x82
 800a9f0:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a9f2:	4b45      	ldr	r3, [pc, #276]	; (800ab08 <interfaceSelectLayout+0x784>)
 800a9f4:	224b      	movs	r2, #75	; 0x4b
 800a9f6:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a9f8:	4b44      	ldr	r3, [pc, #272]	; (800ab0c <interfaceSelectLayout+0x788>)
 800a9fa:	2211      	movs	r2, #17
 800a9fc:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a9fe:	4b44      	ldr	r3, [pc, #272]	; (800ab10 <interfaceSelectLayout+0x78c>)
 800aa00:	2232      	movs	r2, #50	; 0x32
 800aa02:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800aa04:	4b66      	ldr	r3, [pc, #408]	; (800aba0 <interfaceSelectLayout+0x81c>)
 800aa06:	221e      	movs	r2, #30
 800aa08:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800aa0a:	4b66      	ldr	r3, [pc, #408]	; (800aba4 <interfaceSelectLayout+0x820>)
 800aa0c:	224e      	movs	r2, #78	; 0x4e
 800aa0e:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800aa10:	4b40      	ldr	r3, [pc, #256]	; (800ab14 <interfaceSelectLayout+0x790>)
 800aa12:	2299      	movs	r2, #153	; 0x99
 800aa14:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800aa16:	4b40      	ldr	r3, [pc, #256]	; (800ab18 <interfaceSelectLayout+0x794>)
 800aa18:	225f      	movs	r2, #95	; 0x5f
 800aa1a:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800aa1c:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <interfaceSelectLayout+0x798>)
 800aa1e:	2287      	movs	r2, #135	; 0x87
 800aa20:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800aa22:	4b3f      	ldr	r3, [pc, #252]	; (800ab20 <interfaceSelectLayout+0x79c>)
 800aa24:	2287      	movs	r2, #135	; 0x87
 800aa26:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800aa28:	4b3e      	ldr	r3, [pc, #248]	; (800ab24 <interfaceSelectLayout+0x7a0>)
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800aa2e:	4b3e      	ldr	r3, [pc, #248]	; (800ab28 <interfaceSelectLayout+0x7a4>)
 800aa30:	2232      	movs	r2, #50	; 0x32
 800aa32:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800aa34:	4b3d      	ldr	r3, [pc, #244]	; (800ab2c <interfaceSelectLayout+0x7a8>)
 800aa36:	2264      	movs	r2, #100	; 0x64
 800aa38:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800aa3a:	4b3d      	ldr	r3, [pc, #244]	; (800ab30 <interfaceSelectLayout+0x7ac>)
 800aa3c:	2264      	movs	r2, #100	; 0x64
 800aa3e:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800aa40:	4b3c      	ldr	r3, [pc, #240]	; (800ab34 <interfaceSelectLayout+0x7b0>)
 800aa42:	2296      	movs	r2, #150	; 0x96
 800aa44:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800aa46:	4b3c      	ldr	r3, [pc, #240]	; (800ab38 <interfaceSelectLayout+0x7b4>)
 800aa48:	2264      	movs	r2, #100	; 0x64
 800aa4a:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800aa4c:	4b3b      	ldr	r3, [pc, #236]	; (800ab3c <interfaceSelectLayout+0x7b8>)
 800aa4e:	2296      	movs	r2, #150	; 0x96
 800aa50:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800aa52:	4b3b      	ldr	r3, [pc, #236]	; (800ab40 <interfaceSelectLayout+0x7bc>)
 800aa54:	2264      	movs	r2, #100	; 0x64
 800aa56:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800aa58:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <interfaceSelectLayout+0x7c0>)
 800aa5a:	2264      	movs	r2, #100	; 0x64
 800aa5c:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800aa5e:	4b3a      	ldr	r3, [pc, #232]	; (800ab48 <interfaceSelectLayout+0x7c4>)
 800aa60:	2261      	movs	r2, #97	; 0x61
 800aa62:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800aa64:	4b39      	ldr	r3, [pc, #228]	; (800ab4c <interfaceSelectLayout+0x7c8>)
 800aa66:	221c      	movs	r2, #28
 800aa68:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800aa6a:	4b39      	ldr	r3, [pc, #228]	; (800ab50 <interfaceSelectLayout+0x7cc>)
 800aa6c:	2237      	movs	r2, #55	; 0x37
 800aa6e:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800aa70:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <interfaceSelectLayout+0x7d0>)
 800aa72:	2250      	movs	r2, #80	; 0x50
 800aa74:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800aa76:	4b38      	ldr	r3, [pc, #224]	; (800ab58 <interfaceSelectLayout+0x7d4>)
 800aa78:	2214      	movs	r2, #20
 800aa7a:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800aa7c:	4b37      	ldr	r3, [pc, #220]	; (800ab5c <interfaceSelectLayout+0x7d8>)
 800aa7e:	2214      	movs	r2, #20
 800aa80:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800aa82:	4b37      	ldr	r3, [pc, #220]	; (800ab60 <interfaceSelectLayout+0x7dc>)
 800aa84:	2214      	movs	r2, #20
 800aa86:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800aa88:	4b36      	ldr	r3, [pc, #216]	; (800ab64 <interfaceSelectLayout+0x7e0>)
 800aa8a:	2250      	movs	r2, #80	; 0x50
 800aa8c:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800aa8e:	4b36      	ldr	r3, [pc, #216]	; (800ab68 <interfaceSelectLayout+0x7e4>)
 800aa90:	2223      	movs	r2, #35	; 0x23
 800aa92:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800aa94:	4b35      	ldr	r3, [pc, #212]	; (800ab6c <interfaceSelectLayout+0x7e8>)
 800aa96:	2264      	movs	r2, #100	; 0x64
 800aa98:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800aa9a:	4b35      	ldr	r3, [pc, #212]	; (800ab70 <interfaceSelectLayout+0x7ec>)
 800aa9c:	2204      	movs	r2, #4
 800aa9e:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800aaa0:	4b34      	ldr	r3, [pc, #208]	; (800ab74 <interfaceSelectLayout+0x7f0>)
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800aaa6:	4b34      	ldr	r3, [pc, #208]	; (800ab78 <interfaceSelectLayout+0x7f4>)
 800aaa8:	2204      	movs	r2, #4
 800aaaa:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800aaac:	4b33      	ldr	r3, [pc, #204]	; (800ab7c <interfaceSelectLayout+0x7f8>)
 800aaae:	220a      	movs	r2, #10
 800aab0:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800aab2:	4b33      	ldr	r3, [pc, #204]	; (800ab80 <interfaceSelectLayout+0x7fc>)
 800aab4:	220f      	movs	r2, #15
 800aab6:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800aab8:	4b32      	ldr	r3, [pc, #200]	; (800ab84 <interfaceSelectLayout+0x800>)
 800aaba:	2214      	movs	r2, #20
 800aabc:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800aabe:	4b32      	ldr	r3, [pc, #200]	; (800ab88 <interfaceSelectLayout+0x804>)
 800aac0:	2255      	movs	r2, #85	; 0x55
 800aac2:	701a      	strb	r2, [r3, #0]
}
 800aac4:	46c0      	nop			; (mov r8, r8)
 800aac6:	46bd      	mov	sp, r7
 800aac8:	b002      	add	sp, #8
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20000149 	.word	0x20000149
 800aad0:	200003c8 	.word	0x200003c8
 800aad4:	200003c0 	.word	0x200003c0
 800aad8:	2000037d 	.word	0x2000037d
 800aadc:	20000142 	.word	0x20000142
 800aae0:	20000716 	.word	0x20000716
 800aae4:	20000132 	.word	0x20000132
 800aae8:	2000076c 	.word	0x2000076c
 800aaec:	200007c0 	.word	0x200007c0
 800aaf0:	200007a6 	.word	0x200007a6
 800aaf4:	200003d0 	.word	0x200003d0
 800aaf8:	200006e9 	.word	0x200006e9
 800aafc:	200006fd 	.word	0x200006fd
 800ab00:	2000037c 	.word	0x2000037c
 800ab04:	200007ca 	.word	0x200007ca
 800ab08:	2000045a 	.word	0x2000045a
 800ab0c:	200003d4 	.word	0x200003d4
 800ab10:	2000014a 	.word	0x2000014a
 800ab14:	200007b4 	.word	0x200007b4
 800ab18:	200001b0 	.word	0x200001b0
 800ab1c:	20000775 	.word	0x20000775
 800ab20:	200007d0 	.word	0x200007d0
 800ab24:	20000141 	.word	0x20000141
 800ab28:	20000718 	.word	0x20000718
 800ab2c:	20000719 	.word	0x20000719
 800ab30:	200007ae 	.word	0x200007ae
 800ab34:	20000786 	.word	0x20000786
 800ab38:	200007a7 	.word	0x200007a7
 800ab3c:	2000038a 	.word	0x2000038a
 800ab40:	2000045b 	.word	0x2000045b
 800ab44:	2000013a 	.word	0x2000013a
 800ab48:	200006f8 	.word	0x200006f8
 800ab4c:	20000120 	.word	0x20000120
 800ab50:	20000143 	.word	0x20000143
 800ab54:	2000076b 	.word	0x2000076b
 800ab58:	20000769 	.word	0x20000769
 800ab5c:	200007c2 	.word	0x200007c2
 800ab60:	20000140 	.word	0x20000140
 800ab64:	200003c9 	.word	0x200003c9
 800ab68:	200004c5 	.word	0x200004c5
 800ab6c:	2000078c 	.word	0x2000078c
 800ab70:	2000012a 	.word	0x2000012a
 800ab74:	200003c4 	.word	0x200003c4
 800ab78:	200006ea 	.word	0x200006ea
 800ab7c:	20000456 	.word	0x20000456
 800ab80:	20000717 	.word	0x20000717
 800ab84:	20000148 	.word	0x20000148
 800ab88:	200006fc 	.word	0x200006fc
 800ab8c:	200007c1 	.word	0x200007c1
 800ab90:	20000784 	.word	0x20000784
 800ab94:	2000014c 	.word	0x2000014c
 800ab98:	200003c6 	.word	0x200003c6
 800ab9c:	200004c4 	.word	0x200004c4
 800aba0:	200007a5 	.word	0x200007a5
 800aba4:	2000045c 	.word	0x2000045c

0800aba8 <interfaceSelectColorScheme>:

void interfaceSelectColorScheme(uint8_t cs) {
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	0002      	movs	r2, r0
 800abb0:	1dfb      	adds	r3, r7, #7
 800abb2:	701a      	strb	r2, [r3, #0]
	if (cs == COLOR_SCHEME_BLACK) {
 800abb4:	1dfb      	adds	r3, r7, #7
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d106      	bne.n	800abca <interfaceSelectColorScheme+0x22>
		colorMain = BLACK;
 800abbc:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <interfaceSelectColorScheme+0x40>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
		colorSecond = WHITE;
 800abc2:	4b0a      	ldr	r3, [pc, #40]	; (800abec <interfaceSelectColorScheme+0x44>)
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	701a      	strb	r2, [r3, #0]
	} else if (cs == COLOR_SCHEME_WHITE) {
		colorMain = WHITE;
		colorSecond = BLACK;
	}
}
 800abc8:	e009      	b.n	800abde <interfaceSelectColorScheme+0x36>
	} else if (cs == COLOR_SCHEME_WHITE) {
 800abca:	1dfb      	adds	r3, r7, #7
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d105      	bne.n	800abde <interfaceSelectColorScheme+0x36>
		colorMain = WHITE;
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <interfaceSelectColorScheme+0x40>)
 800abd4:	22ff      	movs	r2, #255	; 0xff
 800abd6:	701a      	strb	r2, [r3, #0]
		colorSecond = BLACK;
 800abd8:	4b04      	ldr	r3, [pc, #16]	; (800abec <interfaceSelectColorScheme+0x44>)
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
}
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	46bd      	mov	sp, r7
 800abe2:	b002      	add	sp, #8
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	46c0      	nop			; (mov r8, r8)
 800abe8:	2000034b 	.word	0x2000034b
 800abec:	20000785 	.word	0x20000785

0800abf0 <interfaceInit>:

void interfaceInit() {
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af02      	add	r7, sp, #8

	//										COUNT INDEXES ANGLES

	for (uint8_t i = 0; i < 10; i++) {
 800abf6:	1dfb      	adds	r3, r7, #7
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	e021      	b.n	800ac42 <interfaceInit+0x52>
		chronoDecimalsIndexAngle[i] = 2 * 3.14 / 10 * (i - 2.5);
 800abfe:	1dfb      	adds	r3, r7, #7
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	0018      	movs	r0, r3
 800ac04:	f7f8 f9c0 	bl	8002f88 <__aeabi_i2d>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4b77      	ldr	r3, [pc, #476]	; (800ade8 <interfaceInit+0x1f8>)
 800ac0c:	f7f7 fdd6 	bl	80027bc <__aeabi_dsub>
 800ac10:	0002      	movs	r2, r0
 800ac12:	000b      	movs	r3, r1
 800ac14:	0010      	movs	r0, r2
 800ac16:	0019      	movs	r1, r3
 800ac18:	4a74      	ldr	r2, [pc, #464]	; (800adec <interfaceInit+0x1fc>)
 800ac1a:	4b75      	ldr	r3, [pc, #468]	; (800adf0 <interfaceInit+0x200>)
 800ac1c:	f7f7 fb62 	bl	80022e4 <__aeabi_dmul>
 800ac20:	0002      	movs	r2, r0
 800ac22:	000b      	movs	r3, r1
 800ac24:	1df9      	adds	r1, r7, #7
 800ac26:	780c      	ldrb	r4, [r1, #0]
 800ac28:	0010      	movs	r0, r2
 800ac2a:	0019      	movs	r1, r3
 800ac2c:	f7f8 fa4a 	bl	80030c4 <__aeabi_d2f>
 800ac30:	1c01      	adds	r1, r0, #0
 800ac32:	4b70      	ldr	r3, [pc, #448]	; (800adf4 <interfaceInit+0x204>)
 800ac34:	00a2      	lsls	r2, r4, #2
 800ac36:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; i++) {
 800ac38:	1dfb      	adds	r3, r7, #7
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	1dfb      	adds	r3, r7, #7
 800ac3e:	3201      	adds	r2, #1
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	1dfb      	adds	r3, r7, #7
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b09      	cmp	r3, #9
 800ac48:	d9d9      	bls.n	800abfe <interfaceInit+0xe>
	}
	for (uint8_t i = 0; i < 30; i++) {
 800ac4a:	1dbb      	adds	r3, r7, #6
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e021      	b.n	800ac96 <interfaceInit+0xa6>
		chronoMinutesIndexAngle[i] = 2 * 3.14 / 30 * (i - 7.5);
 800ac52:	1dbb      	adds	r3, r7, #6
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	0018      	movs	r0, r3
 800ac58:	f7f8 f996 	bl	8002f88 <__aeabi_i2d>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4b66      	ldr	r3, [pc, #408]	; (800adf8 <interfaceInit+0x208>)
 800ac60:	f7f7 fdac 	bl	80027bc <__aeabi_dsub>
 800ac64:	0002      	movs	r2, r0
 800ac66:	000b      	movs	r3, r1
 800ac68:	0010      	movs	r0, r2
 800ac6a:	0019      	movs	r1, r3
 800ac6c:	4a63      	ldr	r2, [pc, #396]	; (800adfc <interfaceInit+0x20c>)
 800ac6e:	4b64      	ldr	r3, [pc, #400]	; (800ae00 <interfaceInit+0x210>)
 800ac70:	f7f7 fb38 	bl	80022e4 <__aeabi_dmul>
 800ac74:	0002      	movs	r2, r0
 800ac76:	000b      	movs	r3, r1
 800ac78:	1db9      	adds	r1, r7, #6
 800ac7a:	780c      	ldrb	r4, [r1, #0]
 800ac7c:	0010      	movs	r0, r2
 800ac7e:	0019      	movs	r1, r3
 800ac80:	f7f8 fa20 	bl	80030c4 <__aeabi_d2f>
 800ac84:	1c01      	adds	r1, r0, #0
 800ac86:	4b5f      	ldr	r3, [pc, #380]	; (800ae04 <interfaceInit+0x214>)
 800ac88:	00a2      	lsls	r2, r4, #2
 800ac8a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 30; i++) {
 800ac8c:	1dbb      	adds	r3, r7, #6
 800ac8e:	781a      	ldrb	r2, [r3, #0]
 800ac90:	1dbb      	adds	r3, r7, #6
 800ac92:	3201      	adds	r2, #1
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	1dbb      	adds	r3, r7, #6
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b1d      	cmp	r3, #29
 800ac9c:	d9d9      	bls.n	800ac52 <interfaceInit+0x62>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ac9e:	1d7b      	adds	r3, r7, #5
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e01a      	b.n	800acdc <interfaceInit+0xec>
		secondsIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800aca6:	1d7b      	adds	r3, r7, #5
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	3b03      	subs	r3, #3
 800acac:	0018      	movs	r0, r3
 800acae:	f7f8 f96b 	bl	8002f88 <__aeabi_i2d>
 800acb2:	4a55      	ldr	r2, [pc, #340]	; (800ae08 <interfaceInit+0x218>)
 800acb4:	4b55      	ldr	r3, [pc, #340]	; (800ae0c <interfaceInit+0x21c>)
 800acb6:	f7f7 fb15 	bl	80022e4 <__aeabi_dmul>
 800acba:	0002      	movs	r2, r0
 800acbc:	000b      	movs	r3, r1
 800acbe:	1d79      	adds	r1, r7, #5
 800acc0:	780c      	ldrb	r4, [r1, #0]
 800acc2:	0010      	movs	r0, r2
 800acc4:	0019      	movs	r1, r3
 800acc6:	f7f8 f9fd 	bl	80030c4 <__aeabi_d2f>
 800acca:	1c01      	adds	r1, r0, #0
 800accc:	4b50      	ldr	r3, [pc, #320]	; (800ae10 <interfaceInit+0x220>)
 800acce:	00a2      	lsls	r2, r4, #2
 800acd0:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800acd2:	1d7b      	adds	r3, r7, #5
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	1d7b      	adds	r3, r7, #5
 800acd8:	3201      	adds	r2, #1
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	1d7b      	adds	r3, r7, #5
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b0b      	cmp	r3, #11
 800ace2:	d9e0      	bls.n	800aca6 <interfaceInit+0xb6>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ace4:	1d3b      	adds	r3, r7, #4
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e01a      	b.n	800ad22 <interfaceInit+0x132>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	3b03      	subs	r3, #3
 800acf2:	0018      	movs	r0, r3
 800acf4:	f7f8 f948 	bl	8002f88 <__aeabi_i2d>
 800acf8:	4a43      	ldr	r2, [pc, #268]	; (800ae08 <interfaceInit+0x218>)
 800acfa:	4b44      	ldr	r3, [pc, #272]	; (800ae0c <interfaceInit+0x21c>)
 800acfc:	f7f7 faf2 	bl	80022e4 <__aeabi_dmul>
 800ad00:	0002      	movs	r2, r0
 800ad02:	000b      	movs	r3, r1
 800ad04:	1d39      	adds	r1, r7, #4
 800ad06:	780c      	ldrb	r4, [r1, #0]
 800ad08:	0010      	movs	r0, r2
 800ad0a:	0019      	movs	r1, r3
 800ad0c:	f7f8 f9da 	bl	80030c4 <__aeabi_d2f>
 800ad10:	1c01      	adds	r1, r0, #0
 800ad12:	4b40      	ldr	r3, [pc, #256]	; (800ae14 <interfaceInit+0x224>)
 800ad14:	00a2      	lsls	r2, r4, #2
 800ad16:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	1d3b      	adds	r3, r7, #4
 800ad1e:	3201      	adds	r2, #1
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	1d3b      	adds	r3, r7, #4
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b0b      	cmp	r3, #11
 800ad28:	d9e0      	bls.n	800acec <interfaceInit+0xfc>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ad2a:	1cfb      	adds	r3, r7, #3
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e01a      	b.n	800ad68 <interfaceInit+0x178>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ad32:	1cfb      	adds	r3, r7, #3
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	3b03      	subs	r3, #3
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f7f8 f925 	bl	8002f88 <__aeabi_i2d>
 800ad3e:	4a32      	ldr	r2, [pc, #200]	; (800ae08 <interfaceInit+0x218>)
 800ad40:	4b32      	ldr	r3, [pc, #200]	; (800ae0c <interfaceInit+0x21c>)
 800ad42:	f7f7 facf 	bl	80022e4 <__aeabi_dmul>
 800ad46:	0002      	movs	r2, r0
 800ad48:	000b      	movs	r3, r1
 800ad4a:	1cf9      	adds	r1, r7, #3
 800ad4c:	780c      	ldrb	r4, [r1, #0]
 800ad4e:	0010      	movs	r0, r2
 800ad50:	0019      	movs	r1, r3
 800ad52:	f7f8 f9b7 	bl	80030c4 <__aeabi_d2f>
 800ad56:	1c01      	adds	r1, r0, #0
 800ad58:	4b2e      	ldr	r3, [pc, #184]	; (800ae14 <interfaceInit+0x224>)
 800ad5a:	00a2      	lsls	r2, r4, #2
 800ad5c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ad5e:	1cfb      	adds	r3, r7, #3
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	1cfb      	adds	r3, r7, #3
 800ad64:	3201      	adds	r2, #1
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	1cfb      	adds	r3, r7, #3
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b0b      	cmp	r3, #11
 800ad6e:	d9e0      	bls.n	800ad32 <interfaceInit+0x142>
	}

	//										DISPLAY INITIALISATION

	printf("EPD_1in54_V2_test Demo\r\n");
 800ad70:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <interfaceInit+0x228>)
 800ad72:	0018      	movs	r0, r3
 800ad74:	f005 fe02 	bl	801097c <puts>
	DEV_Module_Init();
 800ad78:	f7f9 f8f4 	bl	8003f64 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800ad7c:	4b27      	ldr	r3, [pc, #156]	; (800ae1c <interfaceInit+0x22c>)
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f005 fdfc 	bl	801097c <puts>
	EPD_1IN54_V2_Init();
 800ad84:	f7fa fc88 	bl	8005698 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800ad88:	f7fa fce4 	bl	8005754 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800ad8c:	23fa      	movs	r3, #250	; 0xfa
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	0018      	movs	r0, r3
 800ad92:	f7fa fedd 	bl	8005b50 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UWORD Imagesize = (
 800ad96:	003b      	movs	r3, r7
 800ad98:	4a21      	ldr	r2, [pc, #132]	; (800ae20 <interfaceInit+0x230>)
 800ad9a:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((BlackImage = (UBYTE*) malloc(Imagesize)) == NULL) {
 800ad9c:	003b      	movs	r3, r7
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f005 fca5 	bl	80106f0 <malloc>
 800ada6:	0003      	movs	r3, r0
 800ada8:	001a      	movs	r2, r3
 800adaa:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <interfaceInit+0x234>)
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <interfaceInit+0x234>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <interfaceInit+0x1ce>
		printf("Failed to apply for black memory...\r\n");
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <interfaceInit+0x238>)
 800adb8:	0018      	movs	r0, r3
 800adba:	f005 fddf 	bl	801097c <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800adbe:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <interfaceInit+0x23c>)
 800adc0:	0018      	movs	r0, r3
 800adc2:	f005 fddb 	bl	801097c <puts>
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0,
 800adc6:	4b17      	ldr	r3, [pc, #92]	; (800ae24 <interfaceInit+0x234>)
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	4b19      	ldr	r3, [pc, #100]	; (800ae30 <interfaceInit+0x240>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	b29b      	uxth	r3, r3
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	2300      	movs	r3, #0
 800add6:	22c8      	movs	r2, #200	; 0xc8
 800add8:	21c8      	movs	r1, #200	; 0xc8
 800adda:	f7f9 f8e1 	bl	8003fa0 <Paint_NewImage>
//		//burn image
//		EPD_1IN54_V2_DisplayPart(BlackImage);
//		DEV_Delay_ms(50);
//	}

}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b003      	add	sp, #12
 800ade4:	bd90      	pop	{r4, r7, pc}
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	40040000 	.word	0x40040000
 800adec:	74bc6a7f 	.word	0x74bc6a7f
 800adf0:	3fe41893 	.word	0x3fe41893
 800adf4:	2000038c 	.word	0x2000038c
 800adf8:	401e0000 	.word	0x401e0000
 800adfc:	46508dff 	.word	0x46508dff
 800ae00:	3fcacb6f 	.word	0x3fcacb6f
 800ae04:	2000066c 	.word	0x2000066c
 800ae08:	8bf258bf 	.word	0x8bf258bf
 800ae0c:	3fe0bf25 	.word	0x3fe0bf25
 800ae10:	20000424 	.word	0x20000424
 800ae14:	2000034c 	.word	0x2000034c
 800ae18:	08013320 	.word	0x08013320
 800ae1c:	08013338 	.word	0x08013338
 800ae20:	00001388 	.word	0x00001388
 800ae24:	20000700 	.word	0x20000700
 800ae28:	08013354 	.word	0x08013354
 800ae2c:	0801337c 	.word	0x0801337c
 800ae30:	2000034b 	.word	0x2000034b

0800ae34 <interfaceUpdate>:

void interfaceUpdate(uint8_t mode) {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	0002      	movs	r2, r0
 800ae3c:	1dfb      	adds	r3, r7, #7
 800ae3e:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_FULL) {
 800ae40:	1dfb      	adds	r3, r7, #7
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <interfaceUpdate+0x2a>

		EPD_1IN54_V2_Init();
 800ae48:	f7fa fc26 	bl	8005698 <EPD_1IN54_V2_Init>
		Paint_SelectImage(BlackImage);
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <interfaceUpdate+0x58>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	0018      	movs	r0, r3
 800ae52:	f7f9 f913 	bl	800407c <Paint_SelectImage>

		interfaceUpdateMode = INTERFACE_UPDATE_FULL;
 800ae56:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <interfaceUpdate+0x5c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
		Paint_SelectImage(BlackImage);

		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
	}

}
 800ae5c:	e012      	b.n	800ae84 <interfaceUpdate+0x50>
	} else if (mode == INTERFACE_UPDATE_PARTIAL) {
 800ae5e:	1dfb      	adds	r3, r7, #7
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10e      	bne.n	800ae84 <interfaceUpdate+0x50>
		EPD_1IN54_V2_Init();
 800ae66:	f7fa fc17 	bl	8005698 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800ae6a:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <interfaceUpdate+0x58>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f7fa fcf2 	bl	8005858 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(BlackImage);
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <interfaceUpdate+0x58>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	0018      	movs	r0, r3
 800ae7a:	f7f9 f8ff 	bl	800407c <Paint_SelectImage>
		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
 800ae7e:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <interfaceUpdate+0x5c>)
 800ae80:	2201      	movs	r2, #1
 800ae82:	701a      	strb	r2, [r3, #0]
}
 800ae84:	46c0      	nop			; (mov r8, r8)
 800ae86:	46bd      	mov	sp, r7
 800ae88:	b002      	add	sp, #8
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20000700 	.word	0x20000700
 800ae90:	2000070c 	.word	0x2000070c

0800ae94 <interfaceWrite>:

void interfaceWrite() {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	af00      	add	r7, sp, #0

	if (interfaceUpdateMode == INTERFACE_UPDATE_PARTIAL) {
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <interfaceWrite+0x34>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d105      	bne.n	800aeae <interfaceWrite+0x1a>

		EPD_1IN54_V2_DisplayPart(BlackImage);
 800aea2:	4b0a      	ldr	r3, [pc, #40]	; (800aecc <interfaceWrite+0x38>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	0018      	movs	r0, r3
 800aea8:	f7fa fd60 	bl	800596c <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(BlackImage);

	}

}
 800aeac:	e009      	b.n	800aec2 <interfaceWrite+0x2e>
	} else if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <interfaceWrite+0x34>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d104      	bne.n	800aec2 <interfaceWrite+0x2e>
		EPD_1IN54_V2_Display(BlackImage);
 800aeb8:	4b04      	ldr	r3, [pc, #16]	; (800aecc <interfaceWrite+0x38>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	0018      	movs	r0, r3
 800aebe:	f7fa fc7c 	bl	80057ba <EPD_1IN54_V2_Display>
}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	2000070c 	.word	0x2000070c
 800aecc:	20000700 	.word	0x20000700

0800aed0 <interfaceClear>:

void interfaceClear() {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
	Paint_Clear(colorMain);
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <interfaceClear+0x18>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	0018      	movs	r0, r3
 800aede:	f7f9 fa7f 	bl	80043e0 <Paint_Clear>
}
 800aee2:	46c0      	nop			; (mov r8, r8)
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	2000034b 	.word	0x2000034b

0800aeec <interfaceDrawLayer>:

void interfaceDrawLayer(uint8_t layer) {
 800aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeee:	46ce      	mov	lr, r9
 800aef0:	4647      	mov	r7, r8
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b08b      	sub	sp, #44	; 0x2c
 800aef6:	af04      	add	r7, sp, #16
 800aef8:	0002      	movs	r2, r0
 800aefa:	1dfb      	adds	r3, r7, #7
 800aefc:	701a      	strb	r2, [r3, #0]

	if (layer == 1) { //boards
 800aefe:	1dfb      	adds	r3, r7, #7
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d000      	beq.n	800af08 <interfaceDrawLayer+0x1c>
 800af06:	e29f      	b.n	800b448 <interfaceDrawLayer+0x55c>
		//										MOON PHASE

		if (showMoonPhase == 1) {
 800af08:	4b27      	ldr	r3, [pc, #156]	; (800afa8 <interfaceDrawLayer+0xbc>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d000      	beq.n	800af12 <interfaceDrawLayer+0x26>
 800af10:	e096      	b.n	800b040 <interfaceDrawLayer+0x154>

			//		moonPhase = 51;

			Paint_DrawCircle(moonPhaseX, moonPhaseY, moonPhaseRadius,
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <interfaceDrawLayer+0xc0>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b298      	uxth	r0, r3
 800af18:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <interfaceDrawLayer+0xc4>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	b299      	uxth	r1, r3
 800af1e:	4b25      	ldr	r3, [pc, #148]	; (800afb4 <interfaceDrawLayer+0xc8>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	b29a      	uxth	r2, r3
 800af24:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <interfaceDrawLayer+0xcc>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	2401      	movs	r4, #1
 800af2e:	9401      	str	r4, [sp, #4]
 800af30:	2401      	movs	r4, #1
 800af32:	9400      	str	r4, [sp, #0]
 800af34:	f7f9 fe60 	bl	8004bf8 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			float moonPhaseShift;

			if (moonPhase < 50) {
 800af38:	4b20      	ldr	r3, [pc, #128]	; (800afbc <interfaceDrawLayer+0xd0>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b31      	cmp	r3, #49	; 0x31
 800af3e:	d843      	bhi.n	800afc8 <interfaceDrawLayer+0xdc>

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800af40:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <interfaceDrawLayer+0xd0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	0018      	movs	r0, r3
 800af46:	f7f6 fa21 	bl	800138c <__aeabi_ui2f>
 800af4a:	1c03      	adds	r3, r0, #0
 800af4c:	491c      	ldr	r1, [pc, #112]	; (800afc0 <interfaceDrawLayer+0xd4>)
 800af4e:	1c18      	adds	r0, r3, #0
 800af50:	f7f5 fd0a 	bl	8000968 <__aeabi_fdiv>
 800af54:	1c03      	adds	r3, r0, #0
 800af56:	1c1c      	adds	r4, r3, #0
 800af58:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <interfaceDrawLayer+0xc8>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	0018      	movs	r0, r3
 800af5e:	f7f6 f9cf 	bl	8001300 <__aeabi_i2f>
 800af62:	1c03      	adds	r3, r0, #0
 800af64:	1c19      	adds	r1, r3, #0
 800af66:	1c20      	adds	r0, r4, #0
 800af68:	f7f5 fec8 	bl	8000cfc <__aeabi_fmul>
 800af6c:	1c03      	adds	r3, r0, #0
 800af6e:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX - (uint32_t) moonPhaseShift,
 800af70:	4b0e      	ldr	r3, [pc, #56]	; (800afac <interfaceDrawLayer+0xc0>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	b29c      	uxth	r4, r3
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7f5 fb06 	bl	8000588 <__aeabi_f2uiz>
 800af7c:	0003      	movs	r3, r0
 800af7e:	b29b      	uxth	r3, r3
 800af80:	1ae3      	subs	r3, r4, r3
 800af82:	b298      	uxth	r0, r3
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <interfaceDrawLayer+0xc4>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	b299      	uxth	r1, r3
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <interfaceDrawLayer+0xc8>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b29a      	uxth	r2, r3
 800af90:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <interfaceDrawLayer+0xd8>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	b29b      	uxth	r3, r3
 800af98:	2401      	movs	r4, #1
 800af9a:	9401      	str	r4, [sp, #4]
 800af9c:	2401      	movs	r4, #1
 800af9e:	9400      	str	r4, [sp, #0]
 800afa0:	f7f9 fe2a 	bl	8004bf8 <Paint_DrawCircle>
 800afa4:	e04c      	b.n	800b040 <interfaceDrawLayer+0x154>
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	200003d0 	.word	0x200003d0
 800afac:	200007c1 	.word	0x200007c1
 800afb0:	20000784 	.word	0x20000784
 800afb4:	2000014c 	.word	0x2000014c
 800afb8:	20000785 	.word	0x20000785
 800afbc:	200003cc 	.word	0x200003cc
 800afc0:	41c80000 	.word	0x41c80000
 800afc4:	2000034b 	.word	0x2000034b
						moonPhaseY, moonPhaseRadius, colorMain, DOT_PIXEL_1X1,
						DRAW_FILL_FULL);

			} else if (moonPhase > 50) {
 800afc8:	4bf3      	ldr	r3, [pc, #972]	; (800b398 <interfaceDrawLayer+0x4ac>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b32      	cmp	r3, #50	; 0x32
 800afce:	d937      	bls.n	800b040 <interfaceDrawLayer+0x154>
				moonPhase = 100 - moonPhase;
 800afd0:	4bf1      	ldr	r3, [pc, #964]	; (800b398 <interfaceDrawLayer+0x4ac>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2264      	movs	r2, #100	; 0x64
 800afd6:	1ad2      	subs	r2, r2, r3
 800afd8:	4bef      	ldr	r3, [pc, #956]	; (800b398 <interfaceDrawLayer+0x4ac>)
 800afda:	601a      	str	r2, [r3, #0]

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800afdc:	4bee      	ldr	r3, [pc, #952]	; (800b398 <interfaceDrawLayer+0x4ac>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	0018      	movs	r0, r3
 800afe2:	f7f6 f9d3 	bl	800138c <__aeabi_ui2f>
 800afe6:	1c03      	adds	r3, r0, #0
 800afe8:	49ec      	ldr	r1, [pc, #944]	; (800b39c <interfaceDrawLayer+0x4b0>)
 800afea:	1c18      	adds	r0, r3, #0
 800afec:	f7f5 fcbc 	bl	8000968 <__aeabi_fdiv>
 800aff0:	1c03      	adds	r3, r0, #0
 800aff2:	1c1c      	adds	r4, r3, #0
 800aff4:	4bea      	ldr	r3, [pc, #936]	; (800b3a0 <interfaceDrawLayer+0x4b4>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	0018      	movs	r0, r3
 800affa:	f7f6 f981 	bl	8001300 <__aeabi_i2f>
 800affe:	1c03      	adds	r3, r0, #0
 800b000:	1c19      	adds	r1, r3, #0
 800b002:	1c20      	adds	r0, r4, #0
 800b004:	f7f5 fe7a 	bl	8000cfc <__aeabi_fmul>
 800b008:	1c03      	adds	r3, r0, #0
 800b00a:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX + (uint32_t) moonPhaseShift,
 800b00c:	4be5      	ldr	r3, [pc, #916]	; (800b3a4 <interfaceDrawLayer+0x4b8>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b29c      	uxth	r4, r3
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7f5 fab8 	bl	8000588 <__aeabi_f2uiz>
 800b018:	0003      	movs	r3, r0
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	18e3      	adds	r3, r4, r3
 800b01e:	b298      	uxth	r0, r3
 800b020:	4be1      	ldr	r3, [pc, #900]	; (800b3a8 <interfaceDrawLayer+0x4bc>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	b299      	uxth	r1, r3
 800b026:	4bde      	ldr	r3, [pc, #888]	; (800b3a0 <interfaceDrawLayer+0x4b4>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	4bdf      	ldr	r3, [pc, #892]	; (800b3ac <interfaceDrawLayer+0x4c0>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	b2db      	uxtb	r3, r3
 800b032:	b29b      	uxth	r3, r3
 800b034:	2401      	movs	r4, #1
 800b036:	9401      	str	r4, [sp, #4]
 800b038:	2401      	movs	r4, #1
 800b03a:	9400      	str	r4, [sp, #0]
 800b03c:	f7f9 fddc 	bl	8004bf8 <Paint_DrawCircle>

		}

		//										METER

		if (showMeter == 1) {
 800b040:	4bdb      	ldr	r3, [pc, #876]	; (800b3b0 <interfaceDrawLayer+0x4c4>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d11b      	bne.n	800b080 <interfaceDrawLayer+0x194>
			Paint_DrawRectangle(meterX, meterY, meterX + 82, meterY + 52,
 800b048:	4bda      	ldr	r3, [pc, #872]	; (800b3b4 <interfaceDrawLayer+0x4c8>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b298      	uxth	r0, r3
 800b04e:	4bda      	ldr	r3, [pc, #872]	; (800b3b8 <interfaceDrawLayer+0x4cc>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b299      	uxth	r1, r3
 800b054:	4bd7      	ldr	r3, [pc, #860]	; (800b3b4 <interfaceDrawLayer+0x4c8>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	3352      	adds	r3, #82	; 0x52
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	4bd6      	ldr	r3, [pc, #856]	; (800b3b8 <interfaceDrawLayer+0x4cc>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	b29b      	uxth	r3, r3
 800b064:	3334      	adds	r3, #52	; 0x34
 800b066:	b29c      	uxth	r4, r3
 800b068:	4bd4      	ldr	r3, [pc, #848]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2500      	movs	r5, #0
 800b072:	9502      	str	r5, [sp, #8]
 800b074:	2502      	movs	r5, #2
 800b076:	9501      	str	r5, [sp, #4]
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	0023      	movs	r3, r4
 800b07c:	f7f9 fcf0 	bl	8004a60 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

		//										DIGITAL INTERFACE FIELD

		if (showDigitalInterface == 1) {
 800b080:	4bcf      	ldr	r3, [pc, #828]	; (800b3c0 <interfaceDrawLayer+0x4d4>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d11b      	bne.n	800b0c0 <interfaceDrawLayer+0x1d4>
			Paint_DrawRectangle(digitalX, digitalY, digitalX + 80,
 800b088:	4bce      	ldr	r3, [pc, #824]	; (800b3c4 <interfaceDrawLayer+0x4d8>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	b298      	uxth	r0, r3
 800b08e:	4bce      	ldr	r3, [pc, #824]	; (800b3c8 <interfaceDrawLayer+0x4dc>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b299      	uxth	r1, r3
 800b094:	4bcb      	ldr	r3, [pc, #812]	; (800b3c4 <interfaceDrawLayer+0x4d8>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3350      	adds	r3, #80	; 0x50
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	4bca      	ldr	r3, [pc, #808]	; (800b3c8 <interfaceDrawLayer+0x4dc>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3325      	adds	r3, #37	; 0x25
 800b0a6:	b29c      	uxth	r4, r3
 800b0a8:	4bc4      	ldr	r3, [pc, #784]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2501      	movs	r5, #1
 800b0b2:	9502      	str	r5, [sp, #8]
 800b0b4:	2501      	movs	r5, #1
 800b0b6:	9501      	str	r5, [sp, #4]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	0023      	movs	r3, r4
 800b0bc:	f7f9 fcd0 	bl	8004a60 <Paint_DrawRectangle>

		}

		//										TEMPERATURE FIELD

		if (showThermometer == 1) {
 800b0c0:	4bc2      	ldr	r3, [pc, #776]	; (800b3cc <interfaceDrawLayer+0x4e0>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d11d      	bne.n	800b104 <interfaceDrawLayer+0x218>
			Paint_DrawRectangle(temperatureX - 7, temperatureY,
 800b0c8:	4bc1      	ldr	r3, [pc, #772]	; (800b3d0 <interfaceDrawLayer+0x4e4>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b07      	subs	r3, #7
 800b0d0:	b298      	uxth	r0, r3
 800b0d2:	4bc0      	ldr	r3, [pc, #768]	; (800b3d4 <interfaceDrawLayer+0x4e8>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	b299      	uxth	r1, r3
 800b0d8:	4bbd      	ldr	r3, [pc, #756]	; (800b3d0 <interfaceDrawLayer+0x4e4>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	3322      	adds	r3, #34	; 0x22
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	4bbc      	ldr	r3, [pc, #752]	; (800b3d4 <interfaceDrawLayer+0x4e8>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	330c      	adds	r3, #12
 800b0ea:	b29c      	uxth	r4, r3
 800b0ec:	4bb3      	ldr	r3, [pc, #716]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	2501      	movs	r5, #1
 800b0f6:	9502      	str	r5, [sp, #8]
 800b0f8:	2502      	movs	r5, #2
 800b0fa:	9501      	str	r5, [sp, #4]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	0023      	movs	r3, r4
 800b100:	f7f9 fcae 	bl	8004a60 <Paint_DrawRectangle>
					DOT_PIXEL_2X2, DRAW_FILL_FULL); // date window
		}

		//										HUMIDITY BAR FIELD

		if (showHigrometer == 1) {
 800b104:	4bb4      	ldr	r3, [pc, #720]	; (800b3d8 <interfaceDrawLayer+0x4ec>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d11b      	bne.n	800b144 <interfaceDrawLayer+0x258>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800b10c:	4bb3      	ldr	r3, [pc, #716]	; (800b3dc <interfaceDrawLayer+0x4f0>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b298      	uxth	r0, r3
 800b112:	4bb3      	ldr	r3, [pc, #716]	; (800b3e0 <interfaceDrawLayer+0x4f4>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b299      	uxth	r1, r3
 800b118:	4bb0      	ldr	r3, [pc, #704]	; (800b3dc <interfaceDrawLayer+0x4f0>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	3305      	adds	r3, #5
 800b120:	b29a      	uxth	r2, r3
 800b122:	4baf      	ldr	r3, [pc, #700]	; (800b3e0 <interfaceDrawLayer+0x4f4>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	3332      	adds	r3, #50	; 0x32
 800b12a:	b29c      	uxth	r4, r3
 800b12c:	4ba3      	ldr	r3, [pc, #652]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	b2db      	uxtb	r3, r3
 800b132:	b29b      	uxth	r3, r3
 800b134:	2500      	movs	r5, #0
 800b136:	9502      	str	r5, [sp, #8]
 800b138:	2501      	movs	r5, #1
 800b13a:	9501      	str	r5, [sp, #4]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	0023      	movs	r3, r4
 800b140:	f7f9 fc8e 	bl	8004a60 <Paint_DrawRectangle>
					humidityY + 50, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
		}

		//										COMPASS
		if (showNavi == 1) {
 800b144:	4ba7      	ldr	r3, [pc, #668]	; (800b3e4 <interfaceDrawLayer+0x4f8>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d139      	bne.n	800b1c0 <interfaceDrawLayer+0x2d4>
			Paint_DrawRectangle(compassX, compassY, compassX + 48,
 800b14c:	4ba6      	ldr	r3, [pc, #664]	; (800b3e8 <interfaceDrawLayer+0x4fc>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b298      	uxth	r0, r3
 800b152:	4ba6      	ldr	r3, [pc, #664]	; (800b3ec <interfaceDrawLayer+0x500>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b299      	uxth	r1, r3
 800b158:	4ba3      	ldr	r3, [pc, #652]	; (800b3e8 <interfaceDrawLayer+0x4fc>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3330      	adds	r3, #48	; 0x30
 800b160:	b29a      	uxth	r2, r3
 800b162:	4ba2      	ldr	r3, [pc, #648]	; (800b3ec <interfaceDrawLayer+0x500>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	332c      	adds	r3, #44	; 0x2c
 800b16a:	b29c      	uxth	r4, r3
 800b16c:	4b93      	ldr	r3, [pc, #588]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	b29b      	uxth	r3, r3
 800b174:	2500      	movs	r5, #0
 800b176:	9502      	str	r5, [sp, #8]
 800b178:	2501      	movs	r5, #1
 800b17a:	9501      	str	r5, [sp, #4]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	0023      	movs	r3, r4
 800b180:	f7f9 fc6e 	bl	8004a60 <Paint_DrawRectangle>
					compassY + 44, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawLine(compassX, compassY + 29, compassX + 48,
 800b184:	4b98      	ldr	r3, [pc, #608]	; (800b3e8 <interfaceDrawLayer+0x4fc>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b298      	uxth	r0, r3
 800b18a:	4b98      	ldr	r3, [pc, #608]	; (800b3ec <interfaceDrawLayer+0x500>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	331d      	adds	r3, #29
 800b192:	b299      	uxth	r1, r3
 800b194:	4b94      	ldr	r3, [pc, #592]	; (800b3e8 <interfaceDrawLayer+0x4fc>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3330      	adds	r3, #48	; 0x30
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	4b93      	ldr	r3, [pc, #588]	; (800b3ec <interfaceDrawLayer+0x500>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	331d      	adds	r3, #29
 800b1a6:	b29c      	uxth	r4, r3
 800b1a8:	4b84      	ldr	r3, [pc, #528]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	9502      	str	r5, [sp, #8]
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	9501      	str	r5, [sp, #4]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	0023      	movs	r3, r4
 800b1bc:	f7f9 fa88 	bl	80046d0 <Paint_DrawLine>
					LINE_STYLE_SOLID);
		}

		//										MAIN BOARD

		Paint_DrawCircle(100, 100, mainBoardRadius, colorSecond, DOT_PIXEL_1X1,
 800b1c0:	4b8b      	ldr	r3, [pc, #556]	; (800b3f0 <interfaceDrawLayer+0x504>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	4b7d      	ldr	r3, [pc, #500]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	9101      	str	r1, [sp, #4]
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	9100      	str	r1, [sp, #0]
 800b1d6:	2164      	movs	r1, #100	; 0x64
 800b1d8:	2064      	movs	r0, #100	; 0x64
 800b1da:	f7f9 fd0d 	bl	8004bf8 <Paint_DrawCircle>
				DRAW_FILL_EMPTY); //main

		//										CHRONO DECIMALS BOARD

		if (showChrono == 1) {
 800b1de:	4b85      	ldr	r3, [pc, #532]	; (800b3f4 <interfaceDrawLayer+0x508>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d14f      	bne.n	800b286 <interfaceDrawLayer+0x39a>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800b1e6:	4b84      	ldr	r3, [pc, #528]	; (800b3f8 <interfaceDrawLayer+0x50c>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	b298      	uxth	r0, r3
 800b1ec:	4b83      	ldr	r3, [pc, #524]	; (800b3fc <interfaceDrawLayer+0x510>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b299      	uxth	r1, r3
 800b1f2:	4b83      	ldr	r3, [pc, #524]	; (800b400 <interfaceDrawLayer+0x514>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	4b6f      	ldr	r3, [pc, #444]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	b2db      	uxtb	r3, r3
 800b202:	b29b      	uxth	r3, r3
 800b204:	2400      	movs	r4, #0
 800b206:	9401      	str	r4, [sp, #4]
 800b208:	2401      	movs	r4, #1
 800b20a:	9400      	str	r4, [sp, #0]
 800b20c:	f7f9 fcf4 	bl	8004bf8 <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800b210:	4b79      	ldr	r3, [pc, #484]	; (800b3f8 <interfaceDrawLayer+0x50c>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	b298      	uxth	r0, r3
 800b216:	4b79      	ldr	r3, [pc, #484]	; (800b3fc <interfaceDrawLayer+0x510>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	b299      	uxth	r1, r3
 800b21c:	4b78      	ldr	r3, [pc, #480]	; (800b400 <interfaceDrawLayer+0x514>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b29a      	uxth	r2, r3
 800b222:	4b66      	ldr	r3, [pc, #408]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	b29b      	uxth	r3, r3
 800b22a:	2401      	movs	r4, #1
 800b22c:	9401      	str	r4, [sp, #4]
 800b22e:	2401      	movs	r4, #1
 800b230:	9400      	str	r4, [sp, #0]
 800b232:	f7f9 fce1 	bl	8004bf8 <Paint_DrawCircle>
					smallBoardRadius, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_FULL); //chrono decimals

			//										CHRONO MINUTES BOARD

			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800b236:	4b73      	ldr	r3, [pc, #460]	; (800b404 <interfaceDrawLayer+0x518>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	b298      	uxth	r0, r3
 800b23c:	4b72      	ldr	r3, [pc, #456]	; (800b408 <interfaceDrawLayer+0x51c>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	b299      	uxth	r1, r3
 800b242:	4b6f      	ldr	r3, [pc, #444]	; (800b400 <interfaceDrawLayer+0x514>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	b29b      	uxth	r3, r3
 800b248:	3302      	adds	r3, #2
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	4b5b      	ldr	r3, [pc, #364]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	b29b      	uxth	r3, r3
 800b254:	2400      	movs	r4, #0
 800b256:	9401      	str	r4, [sp, #4]
 800b258:	2401      	movs	r4, #1
 800b25a:	9400      	str	r4, [sp, #0]
 800b25c:	f7f9 fccc 	bl	8004bf8 <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800b260:	4b68      	ldr	r3, [pc, #416]	; (800b404 <interfaceDrawLayer+0x518>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	b298      	uxth	r0, r3
 800b266:	4b68      	ldr	r3, [pc, #416]	; (800b408 <interfaceDrawLayer+0x51c>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	b299      	uxth	r1, r3
 800b26c:	4b64      	ldr	r3, [pc, #400]	; (800b400 <interfaceDrawLayer+0x514>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b29a      	uxth	r2, r3
 800b272:	4b52      	ldr	r3, [pc, #328]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	b29b      	uxth	r3, r3
 800b27a:	2401      	movs	r4, #1
 800b27c:	9401      	str	r4, [sp, #4]
 800b27e:	2401      	movs	r4, #1
 800b280:	9400      	str	r4, [sp, #0]
 800b282:	f7f9 fcb9 	bl	8004bf8 <Paint_DrawCircle>
					DRAW_FILL_FULL); //chrono minutes
		}

		//										SECONDS BOARD

		if (showSeconds == 1) {
 800b286:	4b61      	ldr	r3, [pc, #388]	; (800b40c <interfaceDrawLayer+0x520>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d127      	bne.n	800b2de <interfaceDrawLayer+0x3f2>
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius + 2,
 800b28e:	4b60      	ldr	r3, [pc, #384]	; (800b410 <interfaceDrawLayer+0x524>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b298      	uxth	r0, r3
 800b294:	4b5f      	ldr	r3, [pc, #380]	; (800b414 <interfaceDrawLayer+0x528>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	b299      	uxth	r1, r3
 800b29a:	4b59      	ldr	r3, [pc, #356]	; (800b400 <interfaceDrawLayer+0x514>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	4b45      	ldr	r3, [pc, #276]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	2400      	movs	r4, #0
 800b2ae:	9401      	str	r4, [sp, #4]
 800b2b0:	2401      	movs	r4, #1
 800b2b2:	9400      	str	r4, [sp, #0]
 800b2b4:	f7f9 fca0 	bl	8004bf8 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius,
 800b2b8:	4b55      	ldr	r3, [pc, #340]	; (800b410 <interfaceDrawLayer+0x524>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	b298      	uxth	r0, r3
 800b2be:	4b55      	ldr	r3, [pc, #340]	; (800b414 <interfaceDrawLayer+0x528>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b299      	uxth	r1, r3
 800b2c4:	4b4e      	ldr	r3, [pc, #312]	; (800b400 <interfaceDrawLayer+0x514>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	4b3c      	ldr	r3, [pc, #240]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	2401      	movs	r4, #1
 800b2d4:	9401      	str	r4, [sp, #4]
 800b2d6:	2401      	movs	r4, #1
 800b2d8:	9400      	str	r4, [sp, #0]
 800b2da:	f7f9 fc8d 	bl	8004bf8 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //seconds
		}

		//										DATE WINDOW
		if (showDate == 1) {
 800b2de:	4b4e      	ldr	r3, [pc, #312]	; (800b418 <interfaceDrawLayer+0x52c>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d11f      	bne.n	800b326 <interfaceDrawLayer+0x43a>
			Paint_DrawRectangle(dateX - 3, dateY - 3, dateX + 17, dateY + 14,
 800b2e6:	4b4d      	ldr	r3, [pc, #308]	; (800b41c <interfaceDrawLayer+0x530>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	3b03      	subs	r3, #3
 800b2ee:	b298      	uxth	r0, r3
 800b2f0:	4b4b      	ldr	r3, [pc, #300]	; (800b420 <interfaceDrawLayer+0x534>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b03      	subs	r3, #3
 800b2f8:	b299      	uxth	r1, r3
 800b2fa:	4b48      	ldr	r3, [pc, #288]	; (800b41c <interfaceDrawLayer+0x530>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3311      	adds	r3, #17
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b46      	ldr	r3, [pc, #280]	; (800b420 <interfaceDrawLayer+0x534>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	330e      	adds	r3, #14
 800b30c:	b29c      	uxth	r4, r3
 800b30e:	4b2b      	ldr	r3, [pc, #172]	; (800b3bc <interfaceDrawLayer+0x4d0>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	b29b      	uxth	r3, r3
 800b316:	2500      	movs	r5, #0
 800b318:	9502      	str	r5, [sp, #8]
 800b31a:	2502      	movs	r5, #2
 800b31c:	9501      	str	r5, [sp, #4]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	0023      	movs	r3, r4
 800b322:	f7f9 fb9d 	bl	8004a60 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window
		}

		//										DOTS

		if (showChrono == 1) {
 800b326:	4b33      	ldr	r3, [pc, #204]	; (800b3f4 <interfaceDrawLayer+0x508>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d17a      	bne.n	800b424 <interfaceDrawLayer+0x538>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY, 2,
 800b32e:	4b32      	ldr	r3, [pc, #200]	; (800b3f8 <interfaceDrawLayer+0x50c>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	b298      	uxth	r0, r3
 800b334:	4b31      	ldr	r3, [pc, #196]	; (800b3fc <interfaceDrawLayer+0x510>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b299      	uxth	r1, r3
 800b33a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ac <interfaceDrawLayer+0x4c0>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	b29b      	uxth	r3, r3
 800b342:	2201      	movs	r2, #1
 800b344:	9201      	str	r2, [sp, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	9200      	str	r2, [sp, #0]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f7f9 fc54 	bl	8004bf8 <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY, 2,
 800b350:	4b2c      	ldr	r3, [pc, #176]	; (800b404 <interfaceDrawLayer+0x518>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	b298      	uxth	r0, r3
 800b356:	4b2c      	ldr	r3, [pc, #176]	; (800b408 <interfaceDrawLayer+0x51c>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b299      	uxth	r1, r3
 800b35c:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <interfaceDrawLayer+0x4c0>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	b2db      	uxtb	r3, r3
 800b362:	b29b      	uxth	r3, r3
 800b364:	2201      	movs	r2, #1
 800b366:	9201      	str	r2, [sp, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	9200      	str	r2, [sp, #0]
 800b36c:	2202      	movs	r2, #2
 800b36e:	f7f9 fc43 	bl	8004bf8 <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(secondsStartX, secondsStartY, 2, colorMain,
 800b372:	4b27      	ldr	r3, [pc, #156]	; (800b410 <interfaceDrawLayer+0x524>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	b298      	uxth	r0, r3
 800b378:	4b26      	ldr	r3, [pc, #152]	; (800b414 <interfaceDrawLayer+0x528>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b299      	uxth	r1, r3
 800b37e:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <interfaceDrawLayer+0x4c0>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	2201      	movs	r2, #1
 800b388:	9201      	str	r2, [sp, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	9200      	str	r2, [sp, #0]
 800b38e:	2202      	movs	r2, #2
 800b390:	f7f9 fc32 	bl	8004bf8 <Paint_DrawCircle>
 800b394:	e046      	b.n	800b424 <interfaceDrawLayer+0x538>
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	200003cc 	.word	0x200003cc
 800b39c:	41c80000 	.word	0x41c80000
 800b3a0:	2000014c 	.word	0x2000014c
 800b3a4:	200007c1 	.word	0x200007c1
 800b3a8:	20000784 	.word	0x20000784
 800b3ac:	2000034b 	.word	0x2000034b
 800b3b0:	200007a6 	.word	0x200007a6
 800b3b4:	200003c6 	.word	0x200003c6
 800b3b8:	200004c4 	.word	0x200004c4
 800b3bc:	20000785 	.word	0x20000785
 800b3c0:	200007c0 	.word	0x200007c0
 800b3c4:	20000715 	.word	0x20000715
 800b3c8:	200003c2 	.word	0x200003c2
 800b3cc:	2000076c 	.word	0x2000076c
 800b3d0:	200006fd 	.word	0x200006fd
 800b3d4:	2000037c 	.word	0x2000037c
 800b3d8:	20000716 	.word	0x20000716
 800b3dc:	200007ca 	.word	0x200007ca
 800b3e0:	2000045a 	.word	0x2000045a
 800b3e4:	2000037d 	.word	0x2000037d
 800b3e8:	200007a5 	.word	0x200007a5
 800b3ec:	2000045c 	.word	0x2000045c
 800b3f0:	200006f8 	.word	0x200006f8
 800b3f4:	200003c0 	.word	0x200003c0
 800b3f8:	20000718 	.word	0x20000718
 800b3fc:	20000719 	.word	0x20000719
 800b400:	20000120 	.word	0x20000120
 800b404:	200007ae 	.word	0x200007ae
 800b408:	20000786 	.word	0x20000786
 800b40c:	20000132 	.word	0x20000132
 800b410:	200007a7 	.word	0x200007a7
 800b414:	2000038a 	.word	0x2000038a
 800b418:	20000142 	.word	0x20000142
 800b41c:	200007b4 	.word	0x200007b4
 800b420:	200001b0 	.word	0x200001b0
					DOT_PIXEL_1X1, DRAW_FILL_FULL);
		}

		Paint_DrawString_EN(82, 7, "libra", &Font12, colorSecond, colorMain);
 800b424:	4b88      	ldr	r3, [pc, #544]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4a87      	ldr	r2, [pc, #540]	; (800b64c <interfaceDrawLayer+0x760>)
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	b292      	uxth	r2, r2
 800b434:	4886      	ldr	r0, [pc, #536]	; (800b650 <interfaceDrawLayer+0x764>)
 800b436:	4987      	ldr	r1, [pc, #540]	; (800b654 <interfaceDrawLayer+0x768>)
 800b438:	9201      	str	r2, [sp, #4]
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	0003      	movs	r3, r0
 800b43e:	000a      	movs	r2, r1
 800b440:	2107      	movs	r1, #7
 800b442:	2052      	movs	r0, #82	; 0x52
 800b444:	f7f9 ff0e 	bl	8005264 <Paint_DrawString_EN>
		//^logo
	}

	if (layer == 2) { //indexes
 800b448:	1dfb      	adds	r3, r7, #7
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d001      	beq.n	800b454 <interfaceDrawLayer+0x568>
 800b450:	f001 f9f2 	bl	800c838 <interfaceDrawLayer+0x194c>
		//										METER INDEX

		if (showMeter == 1) {
 800b454:	4b80      	ldr	r3, [pc, #512]	; (800b658 <interfaceDrawLayer+0x76c>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d14d      	bne.n	800b4f8 <interfaceDrawLayer+0x60c>
			Paint_DrawString_EN(meterX + 65, meterY + 2, "V", &Font16,
 800b45c:	4b7f      	ldr	r3, [pc, #508]	; (800b65c <interfaceDrawLayer+0x770>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	3341      	adds	r3, #65	; 0x41
 800b464:	b298      	uxth	r0, r3
 800b466:	4b7e      	ldr	r3, [pc, #504]	; (800b660 <interfaceDrawLayer+0x774>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3302      	adds	r3, #2
 800b46e:	b299      	uxth	r1, r3
 800b470:	4b75      	ldr	r3, [pc, #468]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	b29b      	uxth	r3, r3
 800b478:	4a74      	ldr	r2, [pc, #464]	; (800b64c <interfaceDrawLayer+0x760>)
 800b47a:	7812      	ldrb	r2, [r2, #0]
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	b292      	uxth	r2, r2
 800b480:	4d78      	ldr	r5, [pc, #480]	; (800b664 <interfaceDrawLayer+0x778>)
 800b482:	4c79      	ldr	r4, [pc, #484]	; (800b668 <interfaceDrawLayer+0x77c>)
 800b484:	9201      	str	r2, [sp, #4]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	002b      	movs	r3, r5
 800b48a:	0022      	movs	r2, r4
 800b48c:	f7f9 feea 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 18, "Vd", &Font16,
 800b490:	4b72      	ldr	r3, [pc, #456]	; (800b65c <interfaceDrawLayer+0x770>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	3338      	adds	r3, #56	; 0x38
 800b498:	b298      	uxth	r0, r3
 800b49a:	4b71      	ldr	r3, [pc, #452]	; (800b660 <interfaceDrawLayer+0x774>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3312      	adds	r3, #18
 800b4a2:	b299      	uxth	r1, r3
 800b4a4:	4b68      	ldr	r3, [pc, #416]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4a67      	ldr	r2, [pc, #412]	; (800b64c <interfaceDrawLayer+0x760>)
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	4d6b      	ldr	r5, [pc, #428]	; (800b664 <interfaceDrawLayer+0x778>)
 800b4b6:	4c6d      	ldr	r4, [pc, #436]	; (800b66c <interfaceDrawLayer+0x780>)
 800b4b8:	9201      	str	r2, [sp, #4]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	002b      	movs	r3, r5
 800b4be:	0022      	movs	r2, r4
 800b4c0:	f7f9 fed0 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 34, "kR", &Font16,
 800b4c4:	4b65      	ldr	r3, [pc, #404]	; (800b65c <interfaceDrawLayer+0x770>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3338      	adds	r3, #56	; 0x38
 800b4cc:	b298      	uxth	r0, r3
 800b4ce:	4b64      	ldr	r3, [pc, #400]	; (800b660 <interfaceDrawLayer+0x774>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	3322      	adds	r3, #34	; 0x22
 800b4d6:	b299      	uxth	r1, r3
 800b4d8:	4b5b      	ldr	r3, [pc, #364]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4a5a      	ldr	r2, [pc, #360]	; (800b64c <interfaceDrawLayer+0x760>)
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	b292      	uxth	r2, r2
 800b4e8:	4d5e      	ldr	r5, [pc, #376]	; (800b664 <interfaceDrawLayer+0x778>)
 800b4ea:	4c61      	ldr	r4, [pc, #388]	; (800b670 <interfaceDrawLayer+0x784>)
 800b4ec:	9201      	str	r2, [sp, #4]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	002b      	movs	r3, r5
 800b4f2:	0022      	movs	r2, r4
 800b4f4:	f7f9 feb6 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}

		//										DIGITAL INTERFACE INDEX

		if (showDigitalInterface == 1) {
 800b4f8:	4b5e      	ldr	r3, [pc, #376]	; (800b674 <interfaceDrawLayer+0x788>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d14b      	bne.n	800b598 <interfaceDrawLayer+0x6ac>
			Paint_DrawString_EN(digitalX + 55, digitalY, "hPa", &Font12,
 800b500:	4b5d      	ldr	r3, [pc, #372]	; (800b678 <interfaceDrawLayer+0x78c>)
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	b29b      	uxth	r3, r3
 800b506:	3337      	adds	r3, #55	; 0x37
 800b508:	b298      	uxth	r0, r3
 800b50a:	4b5c      	ldr	r3, [pc, #368]	; (800b67c <interfaceDrawLayer+0x790>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b299      	uxth	r1, r3
 800b510:	4b4e      	ldr	r3, [pc, #312]	; (800b64c <interfaceDrawLayer+0x760>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	b29b      	uxth	r3, r3
 800b518:	4a4b      	ldr	r2, [pc, #300]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b51a:	7812      	ldrb	r2, [r2, #0]
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	b292      	uxth	r2, r2
 800b520:	4d4b      	ldr	r5, [pc, #300]	; (800b650 <interfaceDrawLayer+0x764>)
 800b522:	4c57      	ldr	r4, [pc, #348]	; (800b680 <interfaceDrawLayer+0x794>)
 800b524:	9201      	str	r2, [sp, #4]
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	002b      	movs	r3, r5
 800b52a:	0022      	movs	r2, r4
 800b52c:	f7f9 fe9a 	bl	8005264 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 55, digitalY + 12, "%RH", &Font12,
 800b530:	4b51      	ldr	r3, [pc, #324]	; (800b678 <interfaceDrawLayer+0x78c>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	3337      	adds	r3, #55	; 0x37
 800b538:	b298      	uxth	r0, r3
 800b53a:	4b50      	ldr	r3, [pc, #320]	; (800b67c <interfaceDrawLayer+0x790>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	330c      	adds	r3, #12
 800b542:	b299      	uxth	r1, r3
 800b544:	4b41      	ldr	r3, [pc, #260]	; (800b64c <interfaceDrawLayer+0x760>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	4a3e      	ldr	r2, [pc, #248]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b54e:	7812      	ldrb	r2, [r2, #0]
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	b292      	uxth	r2, r2
 800b554:	4d3e      	ldr	r5, [pc, #248]	; (800b650 <interfaceDrawLayer+0x764>)
 800b556:	4c4b      	ldr	r4, [pc, #300]	; (800b684 <interfaceDrawLayer+0x798>)
 800b558:	9201      	str	r2, [sp, #4]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	002b      	movs	r3, r5
 800b55e:	0022      	movs	r2, r4
 800b560:	f7f9 fe80 	bl	8005264 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 42, digitalY + 24, "deg C", &Font12,
 800b564:	4b44      	ldr	r3, [pc, #272]	; (800b678 <interfaceDrawLayer+0x78c>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	332a      	adds	r3, #42	; 0x2a
 800b56c:	b298      	uxth	r0, r3
 800b56e:	4b43      	ldr	r3, [pc, #268]	; (800b67c <interfaceDrawLayer+0x790>)
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	b29b      	uxth	r3, r3
 800b574:	3318      	adds	r3, #24
 800b576:	b299      	uxth	r1, r3
 800b578:	4b34      	ldr	r3, [pc, #208]	; (800b64c <interfaceDrawLayer+0x760>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	4a31      	ldr	r2, [pc, #196]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b582:	7812      	ldrb	r2, [r2, #0]
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	b292      	uxth	r2, r2
 800b588:	4d31      	ldr	r5, [pc, #196]	; (800b650 <interfaceDrawLayer+0x764>)
 800b58a:	4c3f      	ldr	r4, [pc, #252]	; (800b688 <interfaceDrawLayer+0x79c>)
 800b58c:	9201      	str	r2, [sp, #4]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	002b      	movs	r3, r5
 800b592:	0022      	movs	r2, r4
 800b594:	f7f9 fe66 	bl	8005264 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										BAROMETER INDEX

		if (showBarometer == 1) {
 800b598:	4b3c      	ldr	r3, [pc, #240]	; (800b68c <interfaceDrawLayer+0x7a0>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d148      	bne.n	800b632 <interfaceDrawLayer+0x746>
			Paint_DrawNum(177, 102, 975, &Font8, colorSecond, colorMain);
 800b5a0:	4b29      	ldr	r3, [pc, #164]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4a28      	ldr	r2, [pc, #160]	; (800b64c <interfaceDrawLayer+0x760>)
 800b5aa:	7812      	ldrb	r2, [r2, #0]
 800b5ac:	b2d2      	uxtb	r2, r2
 800b5ae:	b292      	uxth	r2, r2
 800b5b0:	4937      	ldr	r1, [pc, #220]	; (800b690 <interfaceDrawLayer+0x7a4>)
 800b5b2:	4838      	ldr	r0, [pc, #224]	; (800b694 <interfaceDrawLayer+0x7a8>)
 800b5b4:	9201      	str	r2, [sp, #4]
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	000b      	movs	r3, r1
 800b5ba:	0002      	movs	r2, r0
 800b5bc:	2166      	movs	r1, #102	; 0x66
 800b5be:	20b1      	movs	r0, #177	; 0xb1
 800b5c0:	f7f9 fece 	bl	8005360 <Paint_DrawNum>
			Paint_DrawString_EN(177, 111, "hPa", &Font8, colorSecond,
 800b5c4:	4b20      	ldr	r3, [pc, #128]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	4a1f      	ldr	r2, [pc, #124]	; (800b64c <interfaceDrawLayer+0x760>)
 800b5ce:	7812      	ldrb	r2, [r2, #0]
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	482e      	ldr	r0, [pc, #184]	; (800b690 <interfaceDrawLayer+0x7a4>)
 800b5d6:	492a      	ldr	r1, [pc, #168]	; (800b680 <interfaceDrawLayer+0x794>)
 800b5d8:	9201      	str	r2, [sp, #4]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	0003      	movs	r3, r0
 800b5de:	000a      	movs	r2, r1
 800b5e0:	216f      	movs	r1, #111	; 0x6f
 800b5e2:	20b1      	movs	r0, #177	; 0xb1
 800b5e4:	f7f9 fe3e 	bl	8005264 <Paint_DrawString_EN>
					colorMain);
			Paint_DrawNum(102, 185, 1000, &Font8, colorSecond, colorMain);
 800b5e8:	4b17      	ldr	r3, [pc, #92]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4a16      	ldr	r2, [pc, #88]	; (800b64c <interfaceDrawLayer+0x760>)
 800b5f2:	7812      	ldrb	r2, [r2, #0]
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	b292      	uxth	r2, r2
 800b5f8:	4825      	ldr	r0, [pc, #148]	; (800b690 <interfaceDrawLayer+0x7a4>)
 800b5fa:	21fa      	movs	r1, #250	; 0xfa
 800b5fc:	0089      	lsls	r1, r1, #2
 800b5fe:	9201      	str	r2, [sp, #4]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	0003      	movs	r3, r0
 800b604:	000a      	movs	r2, r1
 800b606:	21b9      	movs	r1, #185	; 0xb9
 800b608:	2066      	movs	r0, #102	; 0x66
 800b60a:	f7f9 fea9 	bl	8005360 <Paint_DrawNum>
			Paint_DrawNum(5, 102, 1025, &Font8, colorSecond, colorMain);
 800b60e:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <interfaceDrawLayer+0x75c>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	b29b      	uxth	r3, r3
 800b616:	4a0d      	ldr	r2, [pc, #52]	; (800b64c <interfaceDrawLayer+0x760>)
 800b618:	7812      	ldrb	r2, [r2, #0]
 800b61a:	b2d2      	uxtb	r2, r2
 800b61c:	b292      	uxth	r2, r2
 800b61e:	491c      	ldr	r1, [pc, #112]	; (800b690 <interfaceDrawLayer+0x7a4>)
 800b620:	481d      	ldr	r0, [pc, #116]	; (800b698 <interfaceDrawLayer+0x7ac>)
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	000b      	movs	r3, r1
 800b628:	0002      	movs	r2, r0
 800b62a:	2166      	movs	r1, #102	; 0x66
 800b62c:	2005      	movs	r0, #5
 800b62e:	f7f9 fe97 	bl	8005360 <Paint_DrawNum>
		}

		//										HUMIDITY INDEX

		if (showHigrometer == 1) {
 800b632:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <interfaceDrawLayer+0x7b0>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d000      	beq.n	800b63c <interfaceDrawLayer+0x750>
 800b63a:	e094      	b.n	800b766 <interfaceDrawLayer+0x87a>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800b63c:	2317      	movs	r3, #23
 800b63e:	18fb      	adds	r3, r7, r3
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]
 800b644:	e058      	b.n	800b6f8 <interfaceDrawLayer+0x80c>
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	20000785 	.word	0x20000785
 800b64c:	2000034b 	.word	0x2000034b
 800b650:	20000000 	.word	0x20000000
 800b654:	0801338c 	.word	0x0801338c
 800b658:	200007a6 	.word	0x200007a6
 800b65c:	200003c6 	.word	0x200003c6
 800b660:	200004c4 	.word	0x200004c4
 800b664:	20000008 	.word	0x20000008
 800b668:	08013394 	.word	0x08013394
 800b66c:	08013398 	.word	0x08013398
 800b670:	0801339c 	.word	0x0801339c
 800b674:	200007c0 	.word	0x200007c0
 800b678:	20000715 	.word	0x20000715
 800b67c:	200003c2 	.word	0x200003c2
 800b680:	080133a0 	.word	0x080133a0
 800b684:	080133a4 	.word	0x080133a4
 800b688:	080133a8 	.word	0x080133a8
 800b68c:	20000149 	.word	0x20000149
 800b690:	20000018 	.word	0x20000018
 800b694:	000003cf 	.word	0x000003cf
 800b698:	00000401 	.word	0x00000401
 800b69c:	20000716 	.word	0x20000716
				Paint_DrawLine(humidityX, humidityY + i, humidityX - 2,
 800b6a0:	4bbb      	ldr	r3, [pc, #748]	; (800b990 <interfaceDrawLayer+0xaa4>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	b298      	uxth	r0, r3
 800b6a6:	4bbb      	ldr	r3, [pc, #748]	; (800b994 <interfaceDrawLayer+0xaa8>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	2517      	movs	r5, #23
 800b6ae:	197b      	adds	r3, r7, r5
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	18d3      	adds	r3, r2, r3
 800b6b6:	b299      	uxth	r1, r3
 800b6b8:	4bb5      	ldr	r3, [pc, #724]	; (800b990 <interfaceDrawLayer+0xaa4>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b02      	subs	r3, #2
 800b6c0:	b29c      	uxth	r4, r3
 800b6c2:	4bb4      	ldr	r3, [pc, #720]	; (800b994 <interfaceDrawLayer+0xaa8>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	002e      	movs	r6, r5
 800b6ca:	197b      	adds	r3, r7, r5
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	18d3      	adds	r3, r2, r3
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	4bb0      	ldr	r3, [pc, #704]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	2500      	movs	r5, #0
 800b6de:	9502      	str	r5, [sp, #8]
 800b6e0:	2501      	movs	r5, #1
 800b6e2:	9501      	str	r5, [sp, #4]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	0013      	movs	r3, r2
 800b6e8:	0022      	movs	r2, r4
 800b6ea:	f7f8 fff1 	bl	80046d0 <Paint_DrawLine>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800b6ee:	19bb      	adds	r3, r7, r6
 800b6f0:	19ba      	adds	r2, r7, r6
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	3205      	adds	r2, #5
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	2317      	movs	r3, #23
 800b6fa:	18fb      	adds	r3, r7, r3
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b32      	cmp	r3, #50	; 0x32
 800b700:	d9ce      	bls.n	800b6a0 <interfaceDrawLayer+0x7b4>
						humidityY + i, colorSecond, DOT_PIXEL_1X1,
						LINE_STYLE_SOLID);
			}

			Paint_DrawString_EN(humidityX + 6, humidityY, "0%RH", &Font8,
 800b702:	4ba3      	ldr	r3, [pc, #652]	; (800b990 <interfaceDrawLayer+0xaa4>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	b29b      	uxth	r3, r3
 800b708:	3306      	adds	r3, #6
 800b70a:	b298      	uxth	r0, r3
 800b70c:	4ba1      	ldr	r3, [pc, #644]	; (800b994 <interfaceDrawLayer+0xaa8>)
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	b299      	uxth	r1, r3
 800b712:	4ba1      	ldr	r3, [pc, #644]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4aa0      	ldr	r2, [pc, #640]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b71c:	7812      	ldrb	r2, [r2, #0]
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	b292      	uxth	r2, r2
 800b722:	4d9f      	ldr	r5, [pc, #636]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b724:	4c9f      	ldr	r4, [pc, #636]	; (800b9a4 <interfaceDrawLayer+0xab8>)
 800b726:	9201      	str	r2, [sp, #4]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	002b      	movs	r3, r5
 800b72c:	0022      	movs	r2, r4
 800b72e:	f7f9 fd99 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(humidityX + 6, humidityY + 43, "100", &Font8,
 800b732:	4b97      	ldr	r3, [pc, #604]	; (800b990 <interfaceDrawLayer+0xaa4>)
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	b29b      	uxth	r3, r3
 800b738:	3306      	adds	r3, #6
 800b73a:	b298      	uxth	r0, r3
 800b73c:	4b95      	ldr	r3, [pc, #596]	; (800b994 <interfaceDrawLayer+0xaa8>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	b29b      	uxth	r3, r3
 800b742:	332b      	adds	r3, #43	; 0x2b
 800b744:	b299      	uxth	r1, r3
 800b746:	4b94      	ldr	r3, [pc, #592]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	4a93      	ldr	r2, [pc, #588]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b750:	7812      	ldrb	r2, [r2, #0]
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	b292      	uxth	r2, r2
 800b756:	4d92      	ldr	r5, [pc, #584]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b758:	4c93      	ldr	r4, [pc, #588]	; (800b9a8 <interfaceDrawLayer+0xabc>)
 800b75a:	9201      	str	r2, [sp, #4]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	002b      	movs	r3, r5
 800b760:	0022      	movs	r2, r4
 800b762:	f7f9 fd7f 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}

		//										ALTIMETER UNIT
		if (showNavi == 1) {
 800b766:	4b91      	ldr	r3, [pc, #580]	; (800b9ac <interfaceDrawLayer+0xac0>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d118      	bne.n	800b7a0 <interfaceDrawLayer+0x8b4>
			Paint_DrawChar(compassX + 38, compassY + 31, 'm', &Font12,
 800b76e:	4b90      	ldr	r3, [pc, #576]	; (800b9b0 <interfaceDrawLayer+0xac4>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	b29b      	uxth	r3, r3
 800b774:	3326      	adds	r3, #38	; 0x26
 800b776:	b298      	uxth	r0, r3
 800b778:	4b8e      	ldr	r3, [pc, #568]	; (800b9b4 <interfaceDrawLayer+0xac8>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	331f      	adds	r3, #31
 800b780:	b299      	uxth	r1, r3
 800b782:	4b85      	ldr	r3, [pc, #532]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	b29b      	uxth	r3, r3
 800b78a:	4a84      	ldr	r2, [pc, #528]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	b2d2      	uxtb	r2, r2
 800b790:	b292      	uxth	r2, r2
 800b792:	4c89      	ldr	r4, [pc, #548]	; (800b9b8 <interfaceDrawLayer+0xacc>)
 800b794:	9201      	str	r2, [sp, #4]
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	0023      	movs	r3, r4
 800b79a:	226d      	movs	r2, #109	; 0x6d
 800b79c:	f7f9 fc7e 	bl	800509c <Paint_DrawChar>
					colorSecond, colorMain);
		}

		//										COMPASS INDEX

		if (showNavi == 1) {
 800b7a0:	4b82      	ldr	r3, [pc, #520]	; (800b9ac <interfaceDrawLayer+0xac0>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d163      	bne.n	800b870 <interfaceDrawLayer+0x984>

			Paint_DrawChar(compassX + 22, compassY + 1, 'N', &Font8,
 800b7a8:	4b81      	ldr	r3, [pc, #516]	; (800b9b0 <interfaceDrawLayer+0xac4>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	3316      	adds	r3, #22
 800b7b0:	b298      	uxth	r0, r3
 800b7b2:	4b80      	ldr	r3, [pc, #512]	; (800b9b4 <interfaceDrawLayer+0xac8>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	b299      	uxth	r1, r3
 800b7bc:	4b76      	ldr	r3, [pc, #472]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	4a75      	ldr	r2, [pc, #468]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b7c6:	7812      	ldrb	r2, [r2, #0]
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	4c74      	ldr	r4, [pc, #464]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b7ce:	9201      	str	r2, [sp, #4]
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	0023      	movs	r3, r4
 800b7d4:	224e      	movs	r2, #78	; 0x4e
 800b7d6:	f7f9 fc61 	bl	800509c <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 22, compassY + 20, 'S', &Font8,
 800b7da:	4b75      	ldr	r3, [pc, #468]	; (800b9b0 <interfaceDrawLayer+0xac4>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	3316      	adds	r3, #22
 800b7e2:	b298      	uxth	r0, r3
 800b7e4:	4b73      	ldr	r3, [pc, #460]	; (800b9b4 <interfaceDrawLayer+0xac8>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3314      	adds	r3, #20
 800b7ec:	b299      	uxth	r1, r3
 800b7ee:	4b6a      	ldr	r3, [pc, #424]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	4a69      	ldr	r2, [pc, #420]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	4c68      	ldr	r4, [pc, #416]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b800:	9201      	str	r2, [sp, #4]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	0023      	movs	r3, r4
 800b806:	2253      	movs	r2, #83	; 0x53
 800b808:	f7f9 fc48 	bl	800509c <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 2, compassY + 11, 'W', &Font8,
 800b80c:	4b68      	ldr	r3, [pc, #416]	; (800b9b0 <interfaceDrawLayer+0xac4>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	3302      	adds	r3, #2
 800b814:	b298      	uxth	r0, r3
 800b816:	4b67      	ldr	r3, [pc, #412]	; (800b9b4 <interfaceDrawLayer+0xac8>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	330b      	adds	r3, #11
 800b81e:	b299      	uxth	r1, r3
 800b820:	4b5d      	ldr	r3, [pc, #372]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	b2db      	uxtb	r3, r3
 800b826:	b29b      	uxth	r3, r3
 800b828:	4a5c      	ldr	r2, [pc, #368]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	b292      	uxth	r2, r2
 800b830:	4c5b      	ldr	r4, [pc, #364]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b832:	9201      	str	r2, [sp, #4]
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	0023      	movs	r3, r4
 800b838:	2257      	movs	r2, #87	; 0x57
 800b83a:	f7f9 fc2f 	bl	800509c <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 40, compassY + 11, 'E', &Font8,
 800b83e:	4b5c      	ldr	r3, [pc, #368]	; (800b9b0 <interfaceDrawLayer+0xac4>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	b29b      	uxth	r3, r3
 800b844:	3328      	adds	r3, #40	; 0x28
 800b846:	b298      	uxth	r0, r3
 800b848:	4b5a      	ldr	r3, [pc, #360]	; (800b9b4 <interfaceDrawLayer+0xac8>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	330b      	adds	r3, #11
 800b850:	b299      	uxth	r1, r3
 800b852:	4b51      	ldr	r3, [pc, #324]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	b29b      	uxth	r3, r3
 800b85a:	4a50      	ldr	r2, [pc, #320]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	b292      	uxth	r2, r2
 800b862:	4c4f      	ldr	r4, [pc, #316]	; (800b9a0 <interfaceDrawLayer+0xab4>)
 800b864:	9201      	str	r2, [sp, #4]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	0023      	movs	r3, r4
 800b86a:	2245      	movs	r2, #69	; 0x45
 800b86c:	f7f9 fc16 	bl	800509c <Paint_DrawChar>

		}

		//										BATTERY STATE INDEX

		if (showBatteryState == 1) {
 800b870:	4b52      	ldr	r3, [pc, #328]	; (800b9bc <interfaceDrawLayer+0xad0>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d14e      	bne.n	800b916 <interfaceDrawLayer+0xa2a>
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800b878:	4b51      	ldr	r3, [pc, #324]	; (800b9c0 <interfaceDrawLayer+0xad4>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	4b51      	ldr	r3, [pc, #324]	; (800b9c4 <interfaceDrawLayer+0xad8>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	b29b      	uxth	r3, r3
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	b298      	uxth	r0, r3
 800b888:	4b4f      	ldr	r3, [pc, #316]	; (800b9c8 <interfaceDrawLayer+0xadc>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	b299      	uxth	r1, r3
					batteryStateStartY,
					batteryStateStartX + batteryPointerShift
 800b88e:	4b4c      	ldr	r3, [pc, #304]	; (800b9c0 <interfaceDrawLayer+0xad4>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	b29a      	uxth	r2, r3
 800b894:	4b4b      	ldr	r3, [pc, #300]	; (800b9c4 <interfaceDrawLayer+0xad8>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	18d3      	adds	r3, r2, r3
 800b89c:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800b89e:	4b4b      	ldr	r3, [pc, #300]	; (800b9cc <interfaceDrawLayer+0xae0>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	18d3      	adds	r3, r2, r3
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	4b47      	ldr	r3, [pc, #284]	; (800b9c8 <interfaceDrawLayer+0xadc>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b29c      	uxth	r4, r3
 800b8ae:	4b3a      	ldr	r3, [pc, #232]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	2500      	movs	r5, #0
 800b8b8:	9502      	str	r5, [sp, #8]
 800b8ba:	2502      	movs	r5, #2
 800b8bc:	9501      	str	r5, [sp, #4]
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	0023      	movs	r3, r4
 800b8c2:	f7f8 ff05 	bl	80046d0 <Paint_DrawLine>
							+ batteryStateIndexLength, batteryStateStartY,
					colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
			Paint_DrawLine(batteryStateStartX,
 800b8c6:	4b3e      	ldr	r3, [pc, #248]	; (800b9c0 <interfaceDrawLayer+0xad4>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	b298      	uxth	r0, r3
 800b8cc:	4b3e      	ldr	r3, [pc, #248]	; (800b9c8 <interfaceDrawLayer+0xadc>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	4b3c      	ldr	r3, [pc, #240]	; (800b9c4 <interfaceDrawLayer+0xad8>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	18d3      	adds	r3, r2, r3
 800b8da:	b299      	uxth	r1, r3
 800b8dc:	4b38      	ldr	r3, [pc, #224]	; (800b9c0 <interfaceDrawLayer+0xad4>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	b29c      	uxth	r4, r3
					batteryStateStartY + batteryPointerShift,
					batteryStateStartX,
					batteryStateStartY + batteryPointerShift
 800b8e2:	4b39      	ldr	r3, [pc, #228]	; (800b9c8 <interfaceDrawLayer+0xadc>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	4b36      	ldr	r3, [pc, #216]	; (800b9c4 <interfaceDrawLayer+0xad8>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	18d3      	adds	r3, r2, r3
 800b8f0:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX,
 800b8f2:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <interfaceDrawLayer+0xae0>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	18d3      	adds	r3, r2, r3
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	4b26      	ldr	r3, [pc, #152]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	b2db      	uxtb	r3, r3
 800b902:	b29b      	uxth	r3, r3
 800b904:	2500      	movs	r5, #0
 800b906:	9502      	str	r5, [sp, #8]
 800b908:	2502      	movs	r5, #2
 800b90a:	9501      	str	r5, [sp, #4]
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	0013      	movs	r3, r2
 800b910:	0022      	movs	r2, r4
 800b912:	f7f8 fedd 	bl	80046d0 <Paint_DrawLine>
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		}

		//										TEMPERATURE UNIT

		if (showThermometer == 1) {
 800b916:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <interfaceDrawLayer+0xae4>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d12c      	bne.n	800b978 <interfaceDrawLayer+0xa8c>
			Paint_DrawCircle(temperatureX + 21, temperatureY + 4, 2, colorMain,
 800b91e:	4b2d      	ldr	r3, [pc, #180]	; (800b9d4 <interfaceDrawLayer+0xae8>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b29b      	uxth	r3, r3
 800b924:	3315      	adds	r3, #21
 800b926:	b298      	uxth	r0, r3
 800b928:	4b2b      	ldr	r3, [pc, #172]	; (800b9d8 <interfaceDrawLayer+0xaec>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	3304      	adds	r3, #4
 800b930:	b299      	uxth	r1, r3
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	b29b      	uxth	r3, r3
 800b93a:	2200      	movs	r2, #0
 800b93c:	9201      	str	r2, [sp, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	9200      	str	r2, [sp, #0]
 800b942:	2202      	movs	r2, #2
 800b944:	f7f9 f958 	bl	8004bf8 <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawString_EN(temperatureX + 24, temperatureY, "C", &Font12,
 800b948:	4b22      	ldr	r3, [pc, #136]	; (800b9d4 <interfaceDrawLayer+0xae8>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	3318      	adds	r3, #24
 800b950:	b298      	uxth	r0, r3
 800b952:	4b21      	ldr	r3, [pc, #132]	; (800b9d8 <interfaceDrawLayer+0xaec>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	b299      	uxth	r1, r3
 800b958:	4b10      	ldr	r3, [pc, #64]	; (800b99c <interfaceDrawLayer+0xab0>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	b29b      	uxth	r3, r3
 800b960:	4a0d      	ldr	r2, [pc, #52]	; (800b998 <interfaceDrawLayer+0xaac>)
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	b2d2      	uxtb	r2, r2
 800b966:	b292      	uxth	r2, r2
 800b968:	4d13      	ldr	r5, [pc, #76]	; (800b9b8 <interfaceDrawLayer+0xacc>)
 800b96a:	4c1c      	ldr	r4, [pc, #112]	; (800b9dc <interfaceDrawLayer+0xaf0>)
 800b96c:	9201      	str	r2, [sp, #4]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	002b      	movs	r3, r5
 800b972:	0022      	movs	r2, r4
 800b974:	f7f9 fc76 	bl	8005264 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										CHRONO DECIMALS INDEX

		if (showChrono == 1) {
 800b978:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <interfaceDrawLayer+0xaf4>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d001      	beq.n	800b984 <interfaceDrawLayer+0xa98>
 800b980:	f000 fc06 	bl	800c190 <interfaceDrawLayer+0x12a4>
			for (uint8_t i = 0; i < 10; i++) {
 800b984:	2316      	movs	r3, #22
 800b986:	18fb      	adds	r3, r7, r3
 800b988:	2200      	movs	r2, #0
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	e115      	b.n	800bbba <interfaceDrawLayer+0xcce>
 800b98e:	46c0      	nop			; (mov r8, r8)
 800b990:	200007ca 	.word	0x200007ca
 800b994:	2000045a 	.word	0x2000045a
 800b998:	20000785 	.word	0x20000785
 800b99c:	2000034b 	.word	0x2000034b
 800b9a0:	20000018 	.word	0x20000018
 800b9a4:	080133b0 	.word	0x080133b0
 800b9a8:	080133b8 	.word	0x080133b8
 800b9ac:	2000037d 	.word	0x2000037d
 800b9b0:	200007a5 	.word	0x200007a5
 800b9b4:	2000045c 	.word	0x2000045c
 800b9b8:	20000000 	.word	0x20000000
 800b9bc:	200003c8 	.word	0x200003c8
 800b9c0:	20000775 	.word	0x20000775
 800b9c4:	20000148 	.word	0x20000148
 800b9c8:	200007d0 	.word	0x200007d0
 800b9cc:	20000717 	.word	0x20000717
 800b9d0:	2000076c 	.word	0x2000076c
 800b9d4:	200006fd 	.word	0x200006fd
 800b9d8:	2000037c 	.word	0x2000037c
 800b9dc:	080133bc 	.word	0x080133bc
 800b9e0:	200003c0 	.word	0x200003c0

				Paint_DrawLine(
						cos(chronoDecimalsIndexAngle[i])
 800b9e4:	2316      	movs	r3, #22
 800b9e6:	18fb      	adds	r3, r7, r3
 800b9e8:	781a      	ldrb	r2, [r3, #0]
 800b9ea:	4bba      	ldr	r3, [pc, #744]	; (800bcd4 <interfaceDrawLayer+0xde8>)
 800b9ec:	0092      	lsls	r2, r2, #2
 800b9ee:	58d3      	ldr	r3, [r2, r3]
 800b9f0:	1c18      	adds	r0, r3, #0
 800b9f2:	f7f7 fb1f 	bl	8003034 <__aeabi_f2d>
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	000b      	movs	r3, r1
 800b9fa:	0010      	movs	r0, r2
 800b9fc:	0019      	movs	r1, r3
 800b9fe:	f006 f86f 	bl	8011ae0 <cos>
 800ba02:	0004      	movs	r4, r0
 800ba04:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800ba06:	4bb4      	ldr	r3, [pc, #720]	; (800bcd8 <interfaceDrawLayer+0xdec>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	001a      	movs	r2, r3
 800ba0c:	4bb3      	ldr	r3, [pc, #716]	; (800bcdc <interfaceDrawLayer+0xdf0>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	0018      	movs	r0, r3
 800ba14:	f7f7 fab8 	bl	8002f88 <__aeabi_i2d>
 800ba18:	0002      	movs	r2, r0
 800ba1a:	000b      	movs	r3, r1
 800ba1c:	0020      	movs	r0, r4
 800ba1e:	0029      	movs	r1, r5
 800ba20:	f7f6 fc60 	bl	80022e4 <__aeabi_dmul>
 800ba24:	0002      	movs	r2, r0
 800ba26:	000b      	movs	r3, r1
 800ba28:	0014      	movs	r4, r2
 800ba2a:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800ba2c:	4bac      	ldr	r3, [pc, #688]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	0018      	movs	r0, r3
 800ba32:	f7f7 faa9 	bl	8002f88 <__aeabi_i2d>
 800ba36:	0002      	movs	r2, r0
 800ba38:	000b      	movs	r3, r1
 800ba3a:	0020      	movs	r0, r4
 800ba3c:	0029      	movs	r1, r5
 800ba3e:	f7f5 fce1 	bl	8001404 <__aeabi_dadd>
 800ba42:	0002      	movs	r2, r0
 800ba44:	000b      	movs	r3, r1
				Paint_DrawLine(
 800ba46:	0010      	movs	r0, r2
 800ba48:	0019      	movs	r1, r3
 800ba4a:	f7f4 fdb5 	bl	80005b8 <__aeabi_d2uiz>
 800ba4e:	0003      	movs	r3, r0
 800ba50:	b29e      	uxth	r6, r3
						sin(chronoDecimalsIndexAngle[i])
 800ba52:	2316      	movs	r3, #22
 800ba54:	18fb      	adds	r3, r7, r3
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	4b9e      	ldr	r3, [pc, #632]	; (800bcd4 <interfaceDrawLayer+0xde8>)
 800ba5a:	0092      	lsls	r2, r2, #2
 800ba5c:	58d3      	ldr	r3, [r2, r3]
 800ba5e:	1c18      	adds	r0, r3, #0
 800ba60:	f7f7 fae8 	bl	8003034 <__aeabi_f2d>
 800ba64:	0002      	movs	r2, r0
 800ba66:	000b      	movs	r3, r1
 800ba68:	0010      	movs	r0, r2
 800ba6a:	0019      	movs	r1, r3
 800ba6c:	f006 f87a 	bl	8011b64 <sin>
 800ba70:	0004      	movs	r4, r0
 800ba72:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800ba74:	4b98      	ldr	r3, [pc, #608]	; (800bcd8 <interfaceDrawLayer+0xdec>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	001a      	movs	r2, r3
 800ba7a:	4b98      	ldr	r3, [pc, #608]	; (800bcdc <interfaceDrawLayer+0xdf0>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	0018      	movs	r0, r3
 800ba82:	f7f7 fa81 	bl	8002f88 <__aeabi_i2d>
 800ba86:	0002      	movs	r2, r0
 800ba88:	000b      	movs	r3, r1
 800ba8a:	0020      	movs	r0, r4
 800ba8c:	0029      	movs	r1, r5
 800ba8e:	f7f6 fc29 	bl	80022e4 <__aeabi_dmul>
 800ba92:	0002      	movs	r2, r0
 800ba94:	000b      	movs	r3, r1
 800ba96:	0014      	movs	r4, r2
 800ba98:	001d      	movs	r5, r3
								+ chronoDecimalsStartY,
 800ba9a:	4b92      	ldr	r3, [pc, #584]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	0018      	movs	r0, r3
 800baa0:	f7f7 fa72 	bl	8002f88 <__aeabi_i2d>
 800baa4:	0002      	movs	r2, r0
 800baa6:	000b      	movs	r3, r1
 800baa8:	0020      	movs	r0, r4
 800baaa:	0029      	movs	r1, r5
 800baac:	f7f5 fcaa 	bl	8001404 <__aeabi_dadd>
 800bab0:	0002      	movs	r2, r0
 800bab2:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bab4:	0010      	movs	r0, r2
 800bab6:	0019      	movs	r1, r3
 800bab8:	f7f4 fd7e 	bl	80005b8 <__aeabi_d2uiz>
 800babc:	0003      	movs	r3, r0
 800babe:	b29a      	uxth	r2, r3
 800bac0:	4690      	mov	r8, r2

						cos(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800bac2:	2316      	movs	r3, #22
 800bac4:	18fb      	adds	r3, r7, r3
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	4b82      	ldr	r3, [pc, #520]	; (800bcd4 <interfaceDrawLayer+0xde8>)
 800baca:	0092      	lsls	r2, r2, #2
 800bacc:	58d3      	ldr	r3, [r2, r3]
 800bace:	1c18      	adds	r0, r3, #0
 800bad0:	f7f7 fab0 	bl	8003034 <__aeabi_f2d>
 800bad4:	0002      	movs	r2, r0
 800bad6:	000b      	movs	r3, r1
 800bad8:	0010      	movs	r0, r2
 800bada:	0019      	movs	r1, r3
 800badc:	f006 f800 	bl	8011ae0 <cos>
 800bae0:	0004      	movs	r4, r0
 800bae2:	000d      	movs	r5, r1
 800bae4:	4b7c      	ldr	r3, [pc, #496]	; (800bcd8 <interfaceDrawLayer+0xdec>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	0018      	movs	r0, r3
 800baea:	f7f7 fa4d 	bl	8002f88 <__aeabi_i2d>
 800baee:	0002      	movs	r2, r0
 800baf0:	000b      	movs	r3, r1
 800baf2:	0020      	movs	r0, r4
 800baf4:	0029      	movs	r1, r5
 800baf6:	f7f6 fbf5 	bl	80022e4 <__aeabi_dmul>
 800bafa:	0002      	movs	r2, r0
 800bafc:	000b      	movs	r3, r1
 800bafe:	0014      	movs	r4, r2
 800bb00:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800bb02:	4b77      	ldr	r3, [pc, #476]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	0018      	movs	r0, r3
 800bb08:	f7f7 fa3e 	bl	8002f88 <__aeabi_i2d>
 800bb0c:	0002      	movs	r2, r0
 800bb0e:	000b      	movs	r3, r1
 800bb10:	0020      	movs	r0, r4
 800bb12:	0029      	movs	r1, r5
 800bb14:	f7f5 fc76 	bl	8001404 <__aeabi_dadd>
 800bb18:	0002      	movs	r2, r0
 800bb1a:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bb1c:	0010      	movs	r0, r2
 800bb1e:	0019      	movs	r1, r3
 800bb20:	f7f4 fd4a 	bl	80005b8 <__aeabi_d2uiz>
 800bb24:	0003      	movs	r3, r0
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	4691      	mov	r9, r2
						sin(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800bb2a:	2316      	movs	r3, #22
 800bb2c:	18fb      	adds	r3, r7, r3
 800bb2e:	781a      	ldrb	r2, [r3, #0]
 800bb30:	4b68      	ldr	r3, [pc, #416]	; (800bcd4 <interfaceDrawLayer+0xde8>)
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	58d3      	ldr	r3, [r2, r3]
 800bb36:	1c18      	adds	r0, r3, #0
 800bb38:	f7f7 fa7c 	bl	8003034 <__aeabi_f2d>
 800bb3c:	0002      	movs	r2, r0
 800bb3e:	000b      	movs	r3, r1
 800bb40:	0010      	movs	r0, r2
 800bb42:	0019      	movs	r1, r3
 800bb44:	f006 f80e 	bl	8011b64 <sin>
 800bb48:	0004      	movs	r4, r0
 800bb4a:	000d      	movs	r5, r1
 800bb4c:	4b62      	ldr	r3, [pc, #392]	; (800bcd8 <interfaceDrawLayer+0xdec>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	0018      	movs	r0, r3
 800bb52:	f7f7 fa19 	bl	8002f88 <__aeabi_i2d>
 800bb56:	0002      	movs	r2, r0
 800bb58:	000b      	movs	r3, r1
 800bb5a:	0020      	movs	r0, r4
 800bb5c:	0029      	movs	r1, r5
 800bb5e:	f7f6 fbc1 	bl	80022e4 <__aeabi_dmul>
 800bb62:	0002      	movs	r2, r0
 800bb64:	000b      	movs	r3, r1
 800bb66:	0014      	movs	r4, r2
 800bb68:	001d      	movs	r5, r3
								+ chronoDecimalsStartY, colorMain,
 800bb6a:	4b5e      	ldr	r3, [pc, #376]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	0018      	movs	r0, r3
 800bb70:	f7f7 fa0a 	bl	8002f88 <__aeabi_i2d>
 800bb74:	0002      	movs	r2, r0
 800bb76:	000b      	movs	r3, r1
 800bb78:	0020      	movs	r0, r4
 800bb7a:	0029      	movs	r1, r5
 800bb7c:	f7f5 fc42 	bl	8001404 <__aeabi_dadd>
 800bb80:	0002      	movs	r2, r0
 800bb82:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bb84:	0010      	movs	r0, r2
 800bb86:	0019      	movs	r1, r3
 800bb88:	f7f4 fd16 	bl	80005b8 <__aeabi_d2uiz>
 800bb8c:	0003      	movs	r3, r0
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	4b55      	ldr	r3, [pc, #340]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	2100      	movs	r1, #0
 800bb9a:	9102      	str	r1, [sp, #8]
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	9101      	str	r1, [sp, #4]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	0013      	movs	r3, r2
 800bba4:	464a      	mov	r2, r9
 800bba6:	4641      	mov	r1, r8
 800bba8:	0030      	movs	r0, r6
 800bbaa:	f7f8 fd91 	bl	80046d0 <Paint_DrawLine>
			for (uint8_t i = 0; i < 10; i++) {
 800bbae:	2116      	movs	r1, #22
 800bbb0:	187b      	adds	r3, r7, r1
 800bbb2:	781a      	ldrb	r2, [r3, #0]
 800bbb4:	187b      	adds	r3, r7, r1
 800bbb6:	3201      	adds	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	2316      	movs	r3, #22
 800bbbc:	18fb      	adds	r3, r7, r3
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b09      	cmp	r3, #9
 800bbc2:	d800      	bhi.n	800bbc6 <interfaceDrawLayer+0xcda>
 800bbc4:	e70e      	b.n	800b9e4 <interfaceDrawLayer+0xaf8>
						DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			}

			//										CHRONO DECIMALS DIGITS
			Paint_DrawString_EN(chronoDecimalsStartX - 4,
 800bbc6:	4b46      	ldr	r3, [pc, #280]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	3b04      	subs	r3, #4
 800bbce:	b298      	uxth	r0, r3
 800bbd0:	4b44      	ldr	r3, [pc, #272]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	3b18      	subs	r3, #24
 800bbd8:	b299      	uxth	r1, r3
 800bbda:	4b43      	ldr	r3, [pc, #268]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	4a42      	ldr	r2, [pc, #264]	; (800bcec <interfaceDrawLayer+0xe00>)
 800bbe4:	7812      	ldrb	r2, [r2, #0]
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	b292      	uxth	r2, r2
 800bbea:	4d41      	ldr	r5, [pc, #260]	; (800bcf0 <interfaceDrawLayer+0xe04>)
 800bbec:	4c41      	ldr	r4, [pc, #260]	; (800bcf4 <interfaceDrawLayer+0xe08>)
 800bbee:	9201      	str	r2, [sp, #4]
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	002b      	movs	r3, r5
 800bbf4:	0022      	movs	r2, r4
 800bbf6:	f7f9 fb35 	bl	8005264 <Paint_DrawString_EN>
					chronoDecimalsStartY - 24, "0", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 12,
 800bbfa:	4b39      	ldr	r3, [pc, #228]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	330c      	adds	r3, #12
 800bc02:	b298      	uxth	r0, r3
 800bc04:	4b37      	ldr	r3, [pc, #220]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b0c      	subs	r3, #12
 800bc0c:	b299      	uxth	r1, r3
 800bc0e:	4b36      	ldr	r3, [pc, #216]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	4a35      	ldr	r2, [pc, #212]	; (800bcec <interfaceDrawLayer+0xe00>)
 800bc18:	7812      	ldrb	r2, [r2, #0]
 800bc1a:	b2d2      	uxtb	r2, r2
 800bc1c:	b292      	uxth	r2, r2
 800bc1e:	4d34      	ldr	r5, [pc, #208]	; (800bcf0 <interfaceDrawLayer+0xe04>)
 800bc20:	4c35      	ldr	r4, [pc, #212]	; (800bcf8 <interfaceDrawLayer+0xe0c>)
 800bc22:	9201      	str	r2, [sp, #4]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	002b      	movs	r3, r5
 800bc28:	0022      	movs	r2, r4
 800bc2a:	f7f9 fb1b 	bl	8005264 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "2", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 6,
 800bc2e:	4b2c      	ldr	r3, [pc, #176]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3306      	adds	r3, #6
 800bc36:	b298      	uxth	r0, r3
 800bc38:	4b2a      	ldr	r3, [pc, #168]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3306      	adds	r3, #6
 800bc40:	b299      	uxth	r1, r3
 800bc42:	4b29      	ldr	r3, [pc, #164]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	4a28      	ldr	r2, [pc, #160]	; (800bcec <interfaceDrawLayer+0xe00>)
 800bc4c:	7812      	ldrb	r2, [r2, #0]
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	b292      	uxth	r2, r2
 800bc52:	4d27      	ldr	r5, [pc, #156]	; (800bcf0 <interfaceDrawLayer+0xe04>)
 800bc54:	4c29      	ldr	r4, [pc, #164]	; (800bcfc <interfaceDrawLayer+0xe10>)
 800bc56:	9201      	str	r2, [sp, #4]
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	002b      	movs	r3, r5
 800bc5c:	0022      	movs	r2, r4
 800bc5e:	f7f9 fb01 	bl	8005264 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "4", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 14,
 800bc62:	4b1f      	ldr	r3, [pc, #124]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	3b0e      	subs	r3, #14
 800bc6a:	b298      	uxth	r0, r3
 800bc6c:	4b1d      	ldr	r3, [pc, #116]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	3306      	adds	r3, #6
 800bc74:	b299      	uxth	r1, r3
 800bc76:	4b1c      	ldr	r3, [pc, #112]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4a1b      	ldr	r2, [pc, #108]	; (800bcec <interfaceDrawLayer+0xe00>)
 800bc80:	7812      	ldrb	r2, [r2, #0]
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	b292      	uxth	r2, r2
 800bc86:	4d1a      	ldr	r5, [pc, #104]	; (800bcf0 <interfaceDrawLayer+0xe04>)
 800bc88:	4c1d      	ldr	r4, [pc, #116]	; (800bd00 <interfaceDrawLayer+0xe14>)
 800bc8a:	9201      	str	r2, [sp, #4]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	002b      	movs	r3, r5
 800bc90:	0022      	movs	r2, r4
 800bc92:	f7f9 fae7 	bl	8005264 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "6", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 18,
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <interfaceDrawLayer+0xdf4>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b12      	subs	r3, #18
 800bc9e:	b298      	uxth	r0, r3
 800bca0:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <interfaceDrawLayer+0xdf8>)
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	3b0c      	subs	r3, #12
 800bca8:	b299      	uxth	r1, r3
 800bcaa:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <interfaceDrawLayer+0xdfc>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	4a0e      	ldr	r2, [pc, #56]	; (800bcec <interfaceDrawLayer+0xe00>)
 800bcb4:	7812      	ldrb	r2, [r2, #0]
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	b292      	uxth	r2, r2
 800bcba:	4d0d      	ldr	r5, [pc, #52]	; (800bcf0 <interfaceDrawLayer+0xe04>)
 800bcbc:	4c11      	ldr	r4, [pc, #68]	; (800bd04 <interfaceDrawLayer+0xe18>)
 800bcbe:	9201      	str	r2, [sp, #4]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	002b      	movs	r3, r5
 800bcc4:	0022      	movs	r2, r4
 800bcc6:	f7f9 facd 	bl	8005264 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "8", &Font12, colorMain,
					colorSecond);

			//										CHRONO MINUTES INDEX
			for (uint8_t i = 0; i < 30; i++) {
 800bcca:	2315      	movs	r3, #21
 800bccc:	18fb      	adds	r3, r7, r3
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	e1f6      	b.n	800c0c2 <interfaceDrawLayer+0x11d6>
 800bcd4:	2000038c 	.word	0x2000038c
 800bcd8:	20000120 	.word	0x20000120
 800bcdc:	200006ea 	.word	0x200006ea
 800bce0:	20000718 	.word	0x20000718
 800bce4:	20000719 	.word	0x20000719
 800bce8:	2000034b 	.word	0x2000034b
 800bcec:	20000785 	.word	0x20000785
 800bcf0:	20000000 	.word	0x20000000
 800bcf4:	080133c0 	.word	0x080133c0
 800bcf8:	080133c4 	.word	0x080133c4
 800bcfc:	080133c8 	.word	0x080133c8
 800bd00:	080133cc 	.word	0x080133cc
 800bd04:	080133d0 	.word	0x080133d0

				Paint_DrawLine(
						cos(chronoMinutesIndexAngle[i])
 800bd08:	2315      	movs	r3, #21
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	781a      	ldrb	r2, [r3, #0]
 800bd0e:	4bfd      	ldr	r3, [pc, #1012]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bd10:	0092      	lsls	r2, r2, #2
 800bd12:	58d3      	ldr	r3, [r2, r3]
 800bd14:	1c18      	adds	r0, r3, #0
 800bd16:	f7f7 f98d 	bl	8003034 <__aeabi_f2d>
 800bd1a:	0002      	movs	r2, r0
 800bd1c:	000b      	movs	r3, r1
 800bd1e:	0010      	movs	r0, r2
 800bd20:	0019      	movs	r1, r3
 800bd22:	f005 fedd 	bl	8011ae0 <cos>
 800bd26:	0004      	movs	r4, r0
 800bd28:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800bd2a:	4bf7      	ldr	r3, [pc, #988]	; (800c108 <interfaceDrawLayer+0x121c>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	001a      	movs	r2, r3
 800bd30:	4bf6      	ldr	r3, [pc, #984]	; (800c10c <interfaceDrawLayer+0x1220>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	0018      	movs	r0, r3
 800bd38:	f7f7 f926 	bl	8002f88 <__aeabi_i2d>
 800bd3c:	0002      	movs	r2, r0
 800bd3e:	000b      	movs	r3, r1
 800bd40:	0020      	movs	r0, r4
 800bd42:	0029      	movs	r1, r5
 800bd44:	f7f6 face 	bl	80022e4 <__aeabi_dmul>
 800bd48:	0002      	movs	r2, r0
 800bd4a:	000b      	movs	r3, r1
 800bd4c:	0014      	movs	r4, r2
 800bd4e:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800bd50:	4bef      	ldr	r3, [pc, #956]	; (800c110 <interfaceDrawLayer+0x1224>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	0018      	movs	r0, r3
 800bd56:	f7f7 f917 	bl	8002f88 <__aeabi_i2d>
 800bd5a:	0002      	movs	r2, r0
 800bd5c:	000b      	movs	r3, r1
 800bd5e:	0020      	movs	r0, r4
 800bd60:	0029      	movs	r1, r5
 800bd62:	f7f5 fb4f 	bl	8001404 <__aeabi_dadd>
 800bd66:	0002      	movs	r2, r0
 800bd68:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bd6a:	0010      	movs	r0, r2
 800bd6c:	0019      	movs	r1, r3
 800bd6e:	f7f4 fc23 	bl	80005b8 <__aeabi_d2uiz>
 800bd72:	0003      	movs	r3, r0
 800bd74:	b29e      	uxth	r6, r3
						sin(chronoMinutesIndexAngle[i])
 800bd76:	2315      	movs	r3, #21
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	4be1      	ldr	r3, [pc, #900]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bd7e:	0092      	lsls	r2, r2, #2
 800bd80:	58d3      	ldr	r3, [r2, r3]
 800bd82:	1c18      	adds	r0, r3, #0
 800bd84:	f7f7 f956 	bl	8003034 <__aeabi_f2d>
 800bd88:	0002      	movs	r2, r0
 800bd8a:	000b      	movs	r3, r1
 800bd8c:	0010      	movs	r0, r2
 800bd8e:	0019      	movs	r1, r3
 800bd90:	f005 fee8 	bl	8011b64 <sin>
 800bd94:	0004      	movs	r4, r0
 800bd96:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800bd98:	4bdb      	ldr	r3, [pc, #876]	; (800c108 <interfaceDrawLayer+0x121c>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	001a      	movs	r2, r3
 800bd9e:	4bdb      	ldr	r3, [pc, #876]	; (800c10c <interfaceDrawLayer+0x1220>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7f7 f8ef 	bl	8002f88 <__aeabi_i2d>
 800bdaa:	0002      	movs	r2, r0
 800bdac:	000b      	movs	r3, r1
 800bdae:	0020      	movs	r0, r4
 800bdb0:	0029      	movs	r1, r5
 800bdb2:	f7f6 fa97 	bl	80022e4 <__aeabi_dmul>
 800bdb6:	0002      	movs	r2, r0
 800bdb8:	000b      	movs	r3, r1
 800bdba:	0014      	movs	r4, r2
 800bdbc:	001d      	movs	r5, r3
								+ chronoMinutesStartY,
 800bdbe:	4bd5      	ldr	r3, [pc, #852]	; (800c114 <interfaceDrawLayer+0x1228>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f7f7 f8e0 	bl	8002f88 <__aeabi_i2d>
 800bdc8:	0002      	movs	r2, r0
 800bdca:	000b      	movs	r3, r1
 800bdcc:	0020      	movs	r0, r4
 800bdce:	0029      	movs	r1, r5
 800bdd0:	f7f5 fb18 	bl	8001404 <__aeabi_dadd>
 800bdd4:	0002      	movs	r2, r0
 800bdd6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bdd8:	0010      	movs	r0, r2
 800bdda:	0019      	movs	r1, r3
 800bddc:	f7f4 fbec 	bl	80005b8 <__aeabi_d2uiz>
 800bde0:	0003      	movs	r3, r0
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	4690      	mov	r8, r2

						cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800bde6:	2315      	movs	r3, #21
 800bde8:	18fb      	adds	r3, r7, r3
 800bdea:	781a      	ldrb	r2, [r3, #0]
 800bdec:	4bc5      	ldr	r3, [pc, #788]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bdee:	0092      	lsls	r2, r2, #2
 800bdf0:	58d3      	ldr	r3, [r2, r3]
 800bdf2:	1c18      	adds	r0, r3, #0
 800bdf4:	f7f7 f91e 	bl	8003034 <__aeabi_f2d>
 800bdf8:	0002      	movs	r2, r0
 800bdfa:	000b      	movs	r3, r1
 800bdfc:	0010      	movs	r0, r2
 800bdfe:	0019      	movs	r1, r3
 800be00:	f005 fe6e 	bl	8011ae0 <cos>
 800be04:	0004      	movs	r4, r0
 800be06:	000d      	movs	r5, r1
 800be08:	4bbf      	ldr	r3, [pc, #764]	; (800c108 <interfaceDrawLayer+0x121c>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	0018      	movs	r0, r3
 800be0e:	f7f7 f8bb 	bl	8002f88 <__aeabi_i2d>
 800be12:	0002      	movs	r2, r0
 800be14:	000b      	movs	r3, r1
 800be16:	0020      	movs	r0, r4
 800be18:	0029      	movs	r1, r5
 800be1a:	f7f6 fa63 	bl	80022e4 <__aeabi_dmul>
 800be1e:	0002      	movs	r2, r0
 800be20:	000b      	movs	r3, r1
 800be22:	0014      	movs	r4, r2
 800be24:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800be26:	4bba      	ldr	r3, [pc, #744]	; (800c110 <interfaceDrawLayer+0x1224>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	0018      	movs	r0, r3
 800be2c:	f7f7 f8ac 	bl	8002f88 <__aeabi_i2d>
 800be30:	0002      	movs	r2, r0
 800be32:	000b      	movs	r3, r1
 800be34:	0020      	movs	r0, r4
 800be36:	0029      	movs	r1, r5
 800be38:	f7f5 fae4 	bl	8001404 <__aeabi_dadd>
 800be3c:	0002      	movs	r2, r0
 800be3e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800be40:	0010      	movs	r0, r2
 800be42:	0019      	movs	r1, r3
 800be44:	f7f4 fbb8 	bl	80005b8 <__aeabi_d2uiz>
 800be48:	0003      	movs	r3, r0
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	4691      	mov	r9, r2
						sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800be4e:	2315      	movs	r3, #21
 800be50:	18fb      	adds	r3, r7, r3
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	4bab      	ldr	r3, [pc, #684]	; (800c104 <interfaceDrawLayer+0x1218>)
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	58d3      	ldr	r3, [r2, r3]
 800be5a:	1c18      	adds	r0, r3, #0
 800be5c:	f7f7 f8ea 	bl	8003034 <__aeabi_f2d>
 800be60:	0002      	movs	r2, r0
 800be62:	000b      	movs	r3, r1
 800be64:	0010      	movs	r0, r2
 800be66:	0019      	movs	r1, r3
 800be68:	f005 fe7c 	bl	8011b64 <sin>
 800be6c:	0004      	movs	r4, r0
 800be6e:	000d      	movs	r5, r1
 800be70:	4ba5      	ldr	r3, [pc, #660]	; (800c108 <interfaceDrawLayer+0x121c>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	0018      	movs	r0, r3
 800be76:	f7f7 f887 	bl	8002f88 <__aeabi_i2d>
 800be7a:	0002      	movs	r2, r0
 800be7c:	000b      	movs	r3, r1
 800be7e:	0020      	movs	r0, r4
 800be80:	0029      	movs	r1, r5
 800be82:	f7f6 fa2f 	bl	80022e4 <__aeabi_dmul>
 800be86:	0002      	movs	r2, r0
 800be88:	000b      	movs	r3, r1
 800be8a:	0014      	movs	r4, r2
 800be8c:	001d      	movs	r5, r3
								+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800be8e:	4ba1      	ldr	r3, [pc, #644]	; (800c114 <interfaceDrawLayer+0x1228>)
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	0018      	movs	r0, r3
 800be94:	f7f7 f878 	bl	8002f88 <__aeabi_i2d>
 800be98:	0002      	movs	r2, r0
 800be9a:	000b      	movs	r3, r1
 800be9c:	0020      	movs	r0, r4
 800be9e:	0029      	movs	r1, r5
 800bea0:	f7f5 fab0 	bl	8001404 <__aeabi_dadd>
 800bea4:	0002      	movs	r2, r0
 800bea6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bea8:	0010      	movs	r0, r2
 800beaa:	0019      	movs	r1, r3
 800beac:	f7f4 fb84 	bl	80005b8 <__aeabi_d2uiz>
 800beb0:	0003      	movs	r3, r0
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	4b98      	ldr	r3, [pc, #608]	; (800c118 <interfaceDrawLayer+0x122c>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	b29b      	uxth	r3, r3
 800bebc:	2100      	movs	r1, #0
 800bebe:	9102      	str	r1, [sp, #8]
 800bec0:	2101      	movs	r1, #1
 800bec2:	9101      	str	r1, [sp, #4]
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	0013      	movs	r3, r2
 800bec8:	464a      	mov	r2, r9
 800beca:	4641      	mov	r1, r8
 800becc:	0030      	movs	r0, r6
 800bece:	f7f8 fbff 	bl	80046d0 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 5 == 0) {
 800bed2:	2415      	movs	r4, #21
 800bed4:	193b      	adds	r3, r7, r4
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2105      	movs	r1, #5
 800beda:	0018      	movs	r0, r3
 800bedc:	f7f4 f9a0 	bl	8000220 <__aeabi_uidivmod>
 800bee0:	000b      	movs	r3, r1
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d000      	beq.n	800beea <interfaceDrawLayer+0xffe>
 800bee8:	e0e5      	b.n	800c0b6 <interfaceDrawLayer+0x11ca>
					Paint_DrawLine(
							cos(chronoMinutesIndexAngle[i])
 800beea:	193b      	adds	r3, r7, r4
 800beec:	781a      	ldrb	r2, [r3, #0]
 800beee:	4b85      	ldr	r3, [pc, #532]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bef0:	0092      	lsls	r2, r2, #2
 800bef2:	58d3      	ldr	r3, [r2, r3]
 800bef4:	1c18      	adds	r0, r3, #0
 800bef6:	f7f7 f89d 	bl	8003034 <__aeabi_f2d>
 800befa:	0002      	movs	r2, r0
 800befc:	000b      	movs	r3, r1
 800befe:	0010      	movs	r0, r2
 800bf00:	0019      	movs	r1, r3
 800bf02:	f005 fded 	bl	8011ae0 <cos>
 800bf06:	0004      	movs	r4, r0
 800bf08:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800bf0a:	4b7f      	ldr	r3, [pc, #508]	; (800c108 <interfaceDrawLayer+0x121c>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	001a      	movs	r2, r3
 800bf10:	4b7e      	ldr	r3, [pc, #504]	; (800c10c <interfaceDrawLayer+0x1220>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	3305      	adds	r3, #5
 800bf16:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800bf18:	0018      	movs	r0, r3
 800bf1a:	f7f7 f835 	bl	8002f88 <__aeabi_i2d>
 800bf1e:	0002      	movs	r2, r0
 800bf20:	000b      	movs	r3, r1
 800bf22:	0020      	movs	r0, r4
 800bf24:	0029      	movs	r1, r5
 800bf26:	f7f6 f9dd 	bl	80022e4 <__aeabi_dmul>
 800bf2a:	0002      	movs	r2, r0
 800bf2c:	000b      	movs	r3, r1
 800bf2e:	0014      	movs	r4, r2
 800bf30:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800bf32:	4b77      	ldr	r3, [pc, #476]	; (800c110 <interfaceDrawLayer+0x1224>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	0018      	movs	r0, r3
 800bf38:	f7f7 f826 	bl	8002f88 <__aeabi_i2d>
 800bf3c:	0002      	movs	r2, r0
 800bf3e:	000b      	movs	r3, r1
 800bf40:	0020      	movs	r0, r4
 800bf42:	0029      	movs	r1, r5
 800bf44:	f7f5 fa5e 	bl	8001404 <__aeabi_dadd>
 800bf48:	0002      	movs	r2, r0
 800bf4a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800bf4c:	0010      	movs	r0, r2
 800bf4e:	0019      	movs	r1, r3
 800bf50:	f7f4 fb32 	bl	80005b8 <__aeabi_d2uiz>
 800bf54:	0003      	movs	r3, r0
 800bf56:	b29e      	uxth	r6, r3
							sin(chronoMinutesIndexAngle[i])
 800bf58:	2415      	movs	r4, #21
 800bf5a:	193b      	adds	r3, r7, r4
 800bf5c:	781a      	ldrb	r2, [r3, #0]
 800bf5e:	4b69      	ldr	r3, [pc, #420]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	58d3      	ldr	r3, [r2, r3]
 800bf64:	1c18      	adds	r0, r3, #0
 800bf66:	f7f7 f865 	bl	8003034 <__aeabi_f2d>
 800bf6a:	0002      	movs	r2, r0
 800bf6c:	000b      	movs	r3, r1
 800bf6e:	0010      	movs	r0, r2
 800bf70:	0019      	movs	r1, r3
 800bf72:	f005 fdf7 	bl	8011b64 <sin>
 800bf76:	0004      	movs	r4, r0
 800bf78:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800bf7a:	4b63      	ldr	r3, [pc, #396]	; (800c108 <interfaceDrawLayer+0x121c>)
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	001a      	movs	r2, r3
 800bf80:	4b62      	ldr	r3, [pc, #392]	; (800c10c <interfaceDrawLayer+0x1220>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	3305      	adds	r3, #5
 800bf86:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800bf88:	0018      	movs	r0, r3
 800bf8a:	f7f6 fffd 	bl	8002f88 <__aeabi_i2d>
 800bf8e:	0002      	movs	r2, r0
 800bf90:	000b      	movs	r3, r1
 800bf92:	0020      	movs	r0, r4
 800bf94:	0029      	movs	r1, r5
 800bf96:	f7f6 f9a5 	bl	80022e4 <__aeabi_dmul>
 800bf9a:	0002      	movs	r2, r0
 800bf9c:	000b      	movs	r3, r1
 800bf9e:	0014      	movs	r4, r2
 800bfa0:	001d      	movs	r5, r3
									+ chronoMinutesStartY,
 800bfa2:	4b5c      	ldr	r3, [pc, #368]	; (800c114 <interfaceDrawLayer+0x1228>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	f7f6 ffee 	bl	8002f88 <__aeabi_i2d>
 800bfac:	0002      	movs	r2, r0
 800bfae:	000b      	movs	r3, r1
 800bfb0:	0020      	movs	r0, r4
 800bfb2:	0029      	movs	r1, r5
 800bfb4:	f7f5 fa26 	bl	8001404 <__aeabi_dadd>
 800bfb8:	0002      	movs	r2, r0
 800bfba:	000b      	movs	r3, r1
					Paint_DrawLine(
 800bfbc:	0010      	movs	r0, r2
 800bfbe:	0019      	movs	r1, r3
 800bfc0:	f7f4 fafa 	bl	80005b8 <__aeabi_d2uiz>
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4698      	mov	r8, r3

							cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800bfca:	2415      	movs	r4, #21
 800bfcc:	193b      	adds	r3, r7, r4
 800bfce:	781a      	ldrb	r2, [r3, #0]
 800bfd0:	4b4c      	ldr	r3, [pc, #304]	; (800c104 <interfaceDrawLayer+0x1218>)
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	58d3      	ldr	r3, [r2, r3]
 800bfd6:	1c18      	adds	r0, r3, #0
 800bfd8:	f7f7 f82c 	bl	8003034 <__aeabi_f2d>
 800bfdc:	0002      	movs	r2, r0
 800bfde:	000b      	movs	r3, r1
 800bfe0:	0010      	movs	r0, r2
 800bfe2:	0019      	movs	r1, r3
 800bfe4:	f005 fd7c 	bl	8011ae0 <cos>
 800bfe8:	0004      	movs	r4, r0
 800bfea:	000d      	movs	r5, r1
 800bfec:	4b46      	ldr	r3, [pc, #280]	; (800c108 <interfaceDrawLayer+0x121c>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	0018      	movs	r0, r3
 800bff2:	f7f6 ffc9 	bl	8002f88 <__aeabi_i2d>
 800bff6:	0002      	movs	r2, r0
 800bff8:	000b      	movs	r3, r1
 800bffa:	0020      	movs	r0, r4
 800bffc:	0029      	movs	r1, r5
 800bffe:	f7f6 f971 	bl	80022e4 <__aeabi_dmul>
 800c002:	0002      	movs	r2, r0
 800c004:	000b      	movs	r3, r1
 800c006:	0014      	movs	r4, r2
 800c008:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800c00a:	4b41      	ldr	r3, [pc, #260]	; (800c110 <interfaceDrawLayer+0x1224>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	0018      	movs	r0, r3
 800c010:	f7f6 ffba 	bl	8002f88 <__aeabi_i2d>
 800c014:	0002      	movs	r2, r0
 800c016:	000b      	movs	r3, r1
 800c018:	0020      	movs	r0, r4
 800c01a:	0029      	movs	r1, r5
 800c01c:	f7f5 f9f2 	bl	8001404 <__aeabi_dadd>
 800c020:	0002      	movs	r2, r0
 800c022:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c024:	0010      	movs	r0, r2
 800c026:	0019      	movs	r1, r3
 800c028:	f7f4 fac6 	bl	80005b8 <__aeabi_d2uiz>
 800c02c:	0003      	movs	r3, r0
 800c02e:	b29b      	uxth	r3, r3
 800c030:	4699      	mov	r9, r3
							sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800c032:	2415      	movs	r4, #21
 800c034:	193b      	adds	r3, r7, r4
 800c036:	781a      	ldrb	r2, [r3, #0]
 800c038:	4b32      	ldr	r3, [pc, #200]	; (800c104 <interfaceDrawLayer+0x1218>)
 800c03a:	0092      	lsls	r2, r2, #2
 800c03c:	58d3      	ldr	r3, [r2, r3]
 800c03e:	1c18      	adds	r0, r3, #0
 800c040:	f7f6 fff8 	bl	8003034 <__aeabi_f2d>
 800c044:	0002      	movs	r2, r0
 800c046:	000b      	movs	r3, r1
 800c048:	0010      	movs	r0, r2
 800c04a:	0019      	movs	r1, r3
 800c04c:	f005 fd8a 	bl	8011b64 <sin>
 800c050:	0004      	movs	r4, r0
 800c052:	000d      	movs	r5, r1
 800c054:	4b2c      	ldr	r3, [pc, #176]	; (800c108 <interfaceDrawLayer+0x121c>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	0018      	movs	r0, r3
 800c05a:	f7f6 ff95 	bl	8002f88 <__aeabi_i2d>
 800c05e:	0002      	movs	r2, r0
 800c060:	000b      	movs	r3, r1
 800c062:	0020      	movs	r0, r4
 800c064:	0029      	movs	r1, r5
 800c066:	f7f6 f93d 	bl	80022e4 <__aeabi_dmul>
 800c06a:	0002      	movs	r2, r0
 800c06c:	000b      	movs	r3, r1
 800c06e:	0014      	movs	r4, r2
 800c070:	001d      	movs	r5, r3
									+ chronoMinutesStartY, colorMain,
 800c072:	4b28      	ldr	r3, [pc, #160]	; (800c114 <interfaceDrawLayer+0x1228>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	0018      	movs	r0, r3
 800c078:	f7f6 ff86 	bl	8002f88 <__aeabi_i2d>
 800c07c:	0002      	movs	r2, r0
 800c07e:	000b      	movs	r3, r1
 800c080:	0020      	movs	r0, r4
 800c082:	0029      	movs	r1, r5
 800c084:	f7f5 f9be 	bl	8001404 <__aeabi_dadd>
 800c088:	0002      	movs	r2, r0
 800c08a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c08c:	0010      	movs	r0, r2
 800c08e:	0019      	movs	r1, r3
 800c090:	f7f4 fa92 	bl	80005b8 <__aeabi_d2uiz>
 800c094:	0003      	movs	r3, r0
 800c096:	b29a      	uxth	r2, r3
 800c098:	4b1f      	ldr	r3, [pc, #124]	; (800c118 <interfaceDrawLayer+0x122c>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	9102      	str	r1, [sp, #8]
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	9101      	str	r1, [sp, #4]
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	0013      	movs	r3, r2
 800c0ac:	464a      	mov	r2, r9
 800c0ae:	4641      	mov	r1, r8
 800c0b0:	0030      	movs	r0, r6
 800c0b2:	f7f8 fb0d 	bl	80046d0 <Paint_DrawLine>
			for (uint8_t i = 0; i < 30; i++) {
 800c0b6:	2115      	movs	r1, #21
 800c0b8:	187b      	adds	r3, r7, r1
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	187b      	adds	r3, r7, r1
 800c0be:	3201      	adds	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	2315      	movs	r3, #21
 800c0c4:	18fb      	adds	r3, r7, r3
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b1d      	cmp	r3, #29
 800c0ca:	d800      	bhi.n	800c0ce <interfaceDrawLayer+0x11e2>
 800c0cc:	e61c      	b.n	800bd08 <interfaceDrawLayer+0xe1c>
				}
			}

			//										CHRONO MINUTES DIGITS

			Paint_DrawString_EN(chronoMinutesStartX - 8,
 800c0ce:	4b10      	ldr	r3, [pc, #64]	; (800c110 <interfaceDrawLayer+0x1224>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	3b08      	subs	r3, #8
 800c0d6:	b298      	uxth	r0, r3
 800c0d8:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <interfaceDrawLayer+0x1228>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b14      	subs	r3, #20
 800c0e0:	b299      	uxth	r1, r3
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <interfaceDrawLayer+0x122c>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	; (800c11c <interfaceDrawLayer+0x1230>)
 800c0ec:	7812      	ldrb	r2, [r2, #0]
 800c0ee:	b2d2      	uxtb	r2, r2
 800c0f0:	b292      	uxth	r2, r2
 800c0f2:	4d0b      	ldr	r5, [pc, #44]	; (800c120 <interfaceDrawLayer+0x1234>)
 800c0f4:	4c0b      	ldr	r4, [pc, #44]	; (800c124 <interfaceDrawLayer+0x1238>)
 800c0f6:	9201      	str	r2, [sp, #4]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	002b      	movs	r3, r5
 800c0fc:	0022      	movs	r2, r4
 800c0fe:	f7f9 f8b1 	bl	8005264 <Paint_DrawString_EN>
 800c102:	e011      	b.n	800c128 <interfaceDrawLayer+0x123c>
 800c104:	2000066c 	.word	0x2000066c
 800c108:	20000120 	.word	0x20000120
 800c10c:	200003c4 	.word	0x200003c4
 800c110:	200007ae 	.word	0x200007ae
 800c114:	20000786 	.word	0x20000786
 800c118:	2000034b 	.word	0x2000034b
 800c11c:	20000785 	.word	0x20000785
 800c120:	20000000 	.word	0x20000000
 800c124:	080133d4 	.word	0x080133d4
					chronoMinutesStartY - 20, "30", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX + 2,
 800c128:	4b1e      	ldr	r3, [pc, #120]	; (800c1a4 <interfaceDrawLayer+0x12b8>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	3302      	adds	r3, #2
 800c130:	b298      	uxth	r0, r3
 800c132:	4b1d      	ldr	r3, [pc, #116]	; (800c1a8 <interfaceDrawLayer+0x12bc>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	3302      	adds	r3, #2
 800c13a:	b299      	uxth	r1, r3
 800c13c:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <interfaceDrawLayer+0x12c0>)
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	b29b      	uxth	r3, r3
 800c144:	4a1a      	ldr	r2, [pc, #104]	; (800c1b0 <interfaceDrawLayer+0x12c4>)
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	b2d2      	uxtb	r2, r2
 800c14a:	b292      	uxth	r2, r2
 800c14c:	4d19      	ldr	r5, [pc, #100]	; (800c1b4 <interfaceDrawLayer+0x12c8>)
 800c14e:	4c1a      	ldr	r4, [pc, #104]	; (800c1b8 <interfaceDrawLayer+0x12cc>)
 800c150:	9201      	str	r2, [sp, #4]
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	002b      	movs	r3, r5
 800c156:	0022      	movs	r2, r4
 800c158:	f7f9 f884 	bl	8005264 <Paint_DrawString_EN>
					chronoMinutesStartY + 2, "10", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX - 18,
 800c15c:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <interfaceDrawLayer+0x12b8>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	b29b      	uxth	r3, r3
 800c162:	3b12      	subs	r3, #18
 800c164:	b298      	uxth	r0, r3
 800c166:	4b10      	ldr	r3, [pc, #64]	; (800c1a8 <interfaceDrawLayer+0x12bc>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	3302      	adds	r3, #2
 800c16e:	b299      	uxth	r1, r3
 800c170:	4b0e      	ldr	r3, [pc, #56]	; (800c1ac <interfaceDrawLayer+0x12c0>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	b29b      	uxth	r3, r3
 800c178:	4a0d      	ldr	r2, [pc, #52]	; (800c1b0 <interfaceDrawLayer+0x12c4>)
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	b292      	uxth	r2, r2
 800c180:	4d0c      	ldr	r5, [pc, #48]	; (800c1b4 <interfaceDrawLayer+0x12c8>)
 800c182:	4c0e      	ldr	r4, [pc, #56]	; (800c1bc <interfaceDrawLayer+0x12d0>)
 800c184:	9201      	str	r2, [sp, #4]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	002b      	movs	r3, r5
 800c18a:	0022      	movs	r2, r4
 800c18c:	f7f9 f86a 	bl	8005264 <Paint_DrawString_EN>
					colorSecond);
		}

		//										SECONDS INDEX

		if (showSeconds == 1) {
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <interfaceDrawLayer+0x12d4>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d000      	beq.n	800c19a <interfaceDrawLayer+0x12ae>
 800c198:	e258      	b.n	800c64c <interfaceDrawLayer+0x1760>
			for (uint8_t i = 0; i < 12; i++) {
 800c19a:	2314      	movs	r3, #20
 800c19c:	18fb      	adds	r3, r7, r3
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e1ec      	b.n	800c57e <interfaceDrawLayer+0x1692>
 800c1a4:	200007ae 	.word	0x200007ae
 800c1a8:	20000786 	.word	0x20000786
 800c1ac:	2000034b 	.word	0x2000034b
 800c1b0:	20000785 	.word	0x20000785
 800c1b4:	20000000 	.word	0x20000000
 800c1b8:	080133d8 	.word	0x080133d8
 800c1bc:	080133dc 	.word	0x080133dc
 800c1c0:	20000132 	.word	0x20000132

				Paint_DrawLine(
						cos(secondsIndexAngle[i])
 800c1c4:	2314      	movs	r3, #20
 800c1c6:	18fb      	adds	r3, r7, r3
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	4bfd      	ldr	r3, [pc, #1012]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c1cc:	0092      	lsls	r2, r2, #2
 800c1ce:	58d3      	ldr	r3, [r2, r3]
 800c1d0:	1c18      	adds	r0, r3, #0
 800c1d2:	f7f6 ff2f 	bl	8003034 <__aeabi_f2d>
 800c1d6:	0002      	movs	r2, r0
 800c1d8:	000b      	movs	r3, r1
 800c1da:	0010      	movs	r0, r2
 800c1dc:	0019      	movs	r1, r3
 800c1de:	f005 fc7f 	bl	8011ae0 <cos>
 800c1e2:	0004      	movs	r4, r0
 800c1e4:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800c1e6:	4bf7      	ldr	r3, [pc, #988]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	001a      	movs	r2, r3
 800c1ec:	4bf6      	ldr	r3, [pc, #984]	; (800c5c8 <interfaceDrawLayer+0x16dc>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	f7f6 fec8 	bl	8002f88 <__aeabi_i2d>
 800c1f8:	0002      	movs	r2, r0
 800c1fa:	000b      	movs	r3, r1
 800c1fc:	0020      	movs	r0, r4
 800c1fe:	0029      	movs	r1, r5
 800c200:	f7f6 f870 	bl	80022e4 <__aeabi_dmul>
 800c204:	0002      	movs	r2, r0
 800c206:	000b      	movs	r3, r1
 800c208:	0014      	movs	r4, r2
 800c20a:	001d      	movs	r5, r3
								+ secondsStartX,
 800c20c:	4bef      	ldr	r3, [pc, #956]	; (800c5cc <interfaceDrawLayer+0x16e0>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	0018      	movs	r0, r3
 800c212:	f7f6 feb9 	bl	8002f88 <__aeabi_i2d>
 800c216:	0002      	movs	r2, r0
 800c218:	000b      	movs	r3, r1
 800c21a:	0020      	movs	r0, r4
 800c21c:	0029      	movs	r1, r5
 800c21e:	f7f5 f8f1 	bl	8001404 <__aeabi_dadd>
 800c222:	0002      	movs	r2, r0
 800c224:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c226:	0010      	movs	r0, r2
 800c228:	0019      	movs	r1, r3
 800c22a:	f7f4 f9c5 	bl	80005b8 <__aeabi_d2uiz>
 800c22e:	0003      	movs	r3, r0
 800c230:	b29e      	uxth	r6, r3
						sin(secondsIndexAngle[i])
 800c232:	2314      	movs	r3, #20
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	4be1      	ldr	r3, [pc, #900]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c23a:	0092      	lsls	r2, r2, #2
 800c23c:	58d3      	ldr	r3, [r2, r3]
 800c23e:	1c18      	adds	r0, r3, #0
 800c240:	f7f6 fef8 	bl	8003034 <__aeabi_f2d>
 800c244:	0002      	movs	r2, r0
 800c246:	000b      	movs	r3, r1
 800c248:	0010      	movs	r0, r2
 800c24a:	0019      	movs	r1, r3
 800c24c:	f005 fc8a 	bl	8011b64 <sin>
 800c250:	0004      	movs	r4, r0
 800c252:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800c254:	4bdb      	ldr	r3, [pc, #876]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	001a      	movs	r2, r3
 800c25a:	4bdb      	ldr	r3, [pc, #876]	; (800c5c8 <interfaceDrawLayer+0x16dc>)
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	0018      	movs	r0, r3
 800c262:	f7f6 fe91 	bl	8002f88 <__aeabi_i2d>
 800c266:	0002      	movs	r2, r0
 800c268:	000b      	movs	r3, r1
 800c26a:	0020      	movs	r0, r4
 800c26c:	0029      	movs	r1, r5
 800c26e:	f7f6 f839 	bl	80022e4 <__aeabi_dmul>
 800c272:	0002      	movs	r2, r0
 800c274:	000b      	movs	r3, r1
 800c276:	0014      	movs	r4, r2
 800c278:	001d      	movs	r5, r3
								+ secondsStartY,
 800c27a:	4bd5      	ldr	r3, [pc, #852]	; (800c5d0 <interfaceDrawLayer+0x16e4>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	0018      	movs	r0, r3
 800c280:	f7f6 fe82 	bl	8002f88 <__aeabi_i2d>
 800c284:	0002      	movs	r2, r0
 800c286:	000b      	movs	r3, r1
 800c288:	0020      	movs	r0, r4
 800c28a:	0029      	movs	r1, r5
 800c28c:	f7f5 f8ba 	bl	8001404 <__aeabi_dadd>
 800c290:	0002      	movs	r2, r0
 800c292:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c294:	0010      	movs	r0, r2
 800c296:	0019      	movs	r1, r3
 800c298:	f7f4 f98e 	bl	80005b8 <__aeabi_d2uiz>
 800c29c:	0003      	movs	r3, r0
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	4690      	mov	r8, r2

						cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800c2a2:	2314      	movs	r3, #20
 800c2a4:	18fb      	adds	r3, r7, r3
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	4bc5      	ldr	r3, [pc, #788]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c2aa:	0092      	lsls	r2, r2, #2
 800c2ac:	58d3      	ldr	r3, [r2, r3]
 800c2ae:	1c18      	adds	r0, r3, #0
 800c2b0:	f7f6 fec0 	bl	8003034 <__aeabi_f2d>
 800c2b4:	0002      	movs	r2, r0
 800c2b6:	000b      	movs	r3, r1
 800c2b8:	0010      	movs	r0, r2
 800c2ba:	0019      	movs	r1, r3
 800c2bc:	f005 fc10 	bl	8011ae0 <cos>
 800c2c0:	0004      	movs	r4, r0
 800c2c2:	000d      	movs	r5, r1
 800c2c4:	4bbf      	ldr	r3, [pc, #764]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7f6 fe5d 	bl	8002f88 <__aeabi_i2d>
 800c2ce:	0002      	movs	r2, r0
 800c2d0:	000b      	movs	r3, r1
 800c2d2:	0020      	movs	r0, r4
 800c2d4:	0029      	movs	r1, r5
 800c2d6:	f7f6 f805 	bl	80022e4 <__aeabi_dmul>
 800c2da:	0002      	movs	r2, r0
 800c2dc:	000b      	movs	r3, r1
 800c2de:	0014      	movs	r4, r2
 800c2e0:	001d      	movs	r5, r3
								+ secondsStartX,
 800c2e2:	4bba      	ldr	r3, [pc, #744]	; (800c5cc <interfaceDrawLayer+0x16e0>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	f7f6 fe4e 	bl	8002f88 <__aeabi_i2d>
 800c2ec:	0002      	movs	r2, r0
 800c2ee:	000b      	movs	r3, r1
 800c2f0:	0020      	movs	r0, r4
 800c2f2:	0029      	movs	r1, r5
 800c2f4:	f7f5 f886 	bl	8001404 <__aeabi_dadd>
 800c2f8:	0002      	movs	r2, r0
 800c2fa:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c2fc:	0010      	movs	r0, r2
 800c2fe:	0019      	movs	r1, r3
 800c300:	f7f4 f95a 	bl	80005b8 <__aeabi_d2uiz>
 800c304:	0003      	movs	r3, r0
 800c306:	b29a      	uxth	r2, r3
 800c308:	4691      	mov	r9, r2
						sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800c30a:	2314      	movs	r3, #20
 800c30c:	18fb      	adds	r3, r7, r3
 800c30e:	781a      	ldrb	r2, [r3, #0]
 800c310:	4bab      	ldr	r3, [pc, #684]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c312:	0092      	lsls	r2, r2, #2
 800c314:	58d3      	ldr	r3, [r2, r3]
 800c316:	1c18      	adds	r0, r3, #0
 800c318:	f7f6 fe8c 	bl	8003034 <__aeabi_f2d>
 800c31c:	0002      	movs	r2, r0
 800c31e:	000b      	movs	r3, r1
 800c320:	0010      	movs	r0, r2
 800c322:	0019      	movs	r1, r3
 800c324:	f005 fc1e 	bl	8011b64 <sin>
 800c328:	0004      	movs	r4, r0
 800c32a:	000d      	movs	r5, r1
 800c32c:	4ba5      	ldr	r3, [pc, #660]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	0018      	movs	r0, r3
 800c332:	f7f6 fe29 	bl	8002f88 <__aeabi_i2d>
 800c336:	0002      	movs	r2, r0
 800c338:	000b      	movs	r3, r1
 800c33a:	0020      	movs	r0, r4
 800c33c:	0029      	movs	r1, r5
 800c33e:	f7f5 ffd1 	bl	80022e4 <__aeabi_dmul>
 800c342:	0002      	movs	r2, r0
 800c344:	000b      	movs	r3, r1
 800c346:	0014      	movs	r4, r2
 800c348:	001d      	movs	r5, r3
								+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800c34a:	4ba1      	ldr	r3, [pc, #644]	; (800c5d0 <interfaceDrawLayer+0x16e4>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	0018      	movs	r0, r3
 800c350:	f7f6 fe1a 	bl	8002f88 <__aeabi_i2d>
 800c354:	0002      	movs	r2, r0
 800c356:	000b      	movs	r3, r1
 800c358:	0020      	movs	r0, r4
 800c35a:	0029      	movs	r1, r5
 800c35c:	f7f5 f852 	bl	8001404 <__aeabi_dadd>
 800c360:	0002      	movs	r2, r0
 800c362:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c364:	0010      	movs	r0, r2
 800c366:	0019      	movs	r1, r3
 800c368:	f7f4 f926 	bl	80005b8 <__aeabi_d2uiz>
 800c36c:	0003      	movs	r3, r0
 800c36e:	b29a      	uxth	r2, r3
 800c370:	4b98      	ldr	r3, [pc, #608]	; (800c5d4 <interfaceDrawLayer+0x16e8>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	b29b      	uxth	r3, r3
 800c378:	2100      	movs	r1, #0
 800c37a:	9102      	str	r1, [sp, #8]
 800c37c:	2101      	movs	r1, #1
 800c37e:	9101      	str	r1, [sp, #4]
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	0013      	movs	r3, r2
 800c384:	464a      	mov	r2, r9
 800c386:	4641      	mov	r1, r8
 800c388:	0030      	movs	r0, r6
 800c38a:	f7f8 f9a1 	bl	80046d0 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 3 == 0) {
 800c38e:	2414      	movs	r4, #20
 800c390:	193b      	adds	r3, r7, r4
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2103      	movs	r1, #3
 800c396:	0018      	movs	r0, r3
 800c398:	f7f3 ff42 	bl	8000220 <__aeabi_uidivmod>
 800c39c:	000b      	movs	r3, r1
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d000      	beq.n	800c3a6 <interfaceDrawLayer+0x14ba>
 800c3a4:	e0e5      	b.n	800c572 <interfaceDrawLayer+0x1686>
					Paint_DrawLine(
							cos(secondsIndexAngle[i])
 800c3a6:	193b      	adds	r3, r7, r4
 800c3a8:	781a      	ldrb	r2, [r3, #0]
 800c3aa:	4b85      	ldr	r3, [pc, #532]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c3ac:	0092      	lsls	r2, r2, #2
 800c3ae:	58d3      	ldr	r3, [r2, r3]
 800c3b0:	1c18      	adds	r0, r3, #0
 800c3b2:	f7f6 fe3f 	bl	8003034 <__aeabi_f2d>
 800c3b6:	0002      	movs	r2, r0
 800c3b8:	000b      	movs	r3, r1
 800c3ba:	0010      	movs	r0, r2
 800c3bc:	0019      	movs	r1, r3
 800c3be:	f005 fb8f 	bl	8011ae0 <cos>
 800c3c2:	0004      	movs	r4, r0
 800c3c4:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800c3c6:	4b7f      	ldr	r3, [pc, #508]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	001a      	movs	r2, r3
 800c3cc:	4b7e      	ldr	r3, [pc, #504]	; (800c5c8 <interfaceDrawLayer+0x16dc>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	3305      	adds	r3, #5
 800c3d2:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	f7f6 fdd7 	bl	8002f88 <__aeabi_i2d>
 800c3da:	0002      	movs	r2, r0
 800c3dc:	000b      	movs	r3, r1
 800c3de:	0020      	movs	r0, r4
 800c3e0:	0029      	movs	r1, r5
 800c3e2:	f7f5 ff7f 	bl	80022e4 <__aeabi_dmul>
 800c3e6:	0002      	movs	r2, r0
 800c3e8:	000b      	movs	r3, r1
 800c3ea:	0014      	movs	r4, r2
 800c3ec:	001d      	movs	r5, r3
									+ secondsStartX,
 800c3ee:	4b77      	ldr	r3, [pc, #476]	; (800c5cc <interfaceDrawLayer+0x16e0>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f7f6 fdc8 	bl	8002f88 <__aeabi_i2d>
 800c3f8:	0002      	movs	r2, r0
 800c3fa:	000b      	movs	r3, r1
 800c3fc:	0020      	movs	r0, r4
 800c3fe:	0029      	movs	r1, r5
 800c400:	f7f5 f800 	bl	8001404 <__aeabi_dadd>
 800c404:	0002      	movs	r2, r0
 800c406:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c408:	0010      	movs	r0, r2
 800c40a:	0019      	movs	r1, r3
 800c40c:	f7f4 f8d4 	bl	80005b8 <__aeabi_d2uiz>
 800c410:	0003      	movs	r3, r0
 800c412:	b29e      	uxth	r6, r3
							sin(secondsIndexAngle[i])
 800c414:	2414      	movs	r4, #20
 800c416:	193b      	adds	r3, r7, r4
 800c418:	781a      	ldrb	r2, [r3, #0]
 800c41a:	4b69      	ldr	r3, [pc, #420]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c41c:	0092      	lsls	r2, r2, #2
 800c41e:	58d3      	ldr	r3, [r2, r3]
 800c420:	1c18      	adds	r0, r3, #0
 800c422:	f7f6 fe07 	bl	8003034 <__aeabi_f2d>
 800c426:	0002      	movs	r2, r0
 800c428:	000b      	movs	r3, r1
 800c42a:	0010      	movs	r0, r2
 800c42c:	0019      	movs	r1, r3
 800c42e:	f005 fb99 	bl	8011b64 <sin>
 800c432:	0004      	movs	r4, r0
 800c434:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800c436:	4b63      	ldr	r3, [pc, #396]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	001a      	movs	r2, r3
 800c43c:	4b62      	ldr	r3, [pc, #392]	; (800c5c8 <interfaceDrawLayer+0x16dc>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	3305      	adds	r3, #5
 800c442:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c444:	0018      	movs	r0, r3
 800c446:	f7f6 fd9f 	bl	8002f88 <__aeabi_i2d>
 800c44a:	0002      	movs	r2, r0
 800c44c:	000b      	movs	r3, r1
 800c44e:	0020      	movs	r0, r4
 800c450:	0029      	movs	r1, r5
 800c452:	f7f5 ff47 	bl	80022e4 <__aeabi_dmul>
 800c456:	0002      	movs	r2, r0
 800c458:	000b      	movs	r3, r1
 800c45a:	0014      	movs	r4, r2
 800c45c:	001d      	movs	r5, r3
									+ secondsStartY,
 800c45e:	4b5c      	ldr	r3, [pc, #368]	; (800c5d0 <interfaceDrawLayer+0x16e4>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	0018      	movs	r0, r3
 800c464:	f7f6 fd90 	bl	8002f88 <__aeabi_i2d>
 800c468:	0002      	movs	r2, r0
 800c46a:	000b      	movs	r3, r1
 800c46c:	0020      	movs	r0, r4
 800c46e:	0029      	movs	r1, r5
 800c470:	f7f4 ffc8 	bl	8001404 <__aeabi_dadd>
 800c474:	0002      	movs	r2, r0
 800c476:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c478:	0010      	movs	r0, r2
 800c47a:	0019      	movs	r1, r3
 800c47c:	f7f4 f89c 	bl	80005b8 <__aeabi_d2uiz>
 800c480:	0003      	movs	r3, r0
 800c482:	b29b      	uxth	r3, r3
 800c484:	4698      	mov	r8, r3

							cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800c486:	2414      	movs	r4, #20
 800c488:	193b      	adds	r3, r7, r4
 800c48a:	781a      	ldrb	r2, [r3, #0]
 800c48c:	4b4c      	ldr	r3, [pc, #304]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	58d3      	ldr	r3, [r2, r3]
 800c492:	1c18      	adds	r0, r3, #0
 800c494:	f7f6 fdce 	bl	8003034 <__aeabi_f2d>
 800c498:	0002      	movs	r2, r0
 800c49a:	000b      	movs	r3, r1
 800c49c:	0010      	movs	r0, r2
 800c49e:	0019      	movs	r1, r3
 800c4a0:	f005 fb1e 	bl	8011ae0 <cos>
 800c4a4:	0004      	movs	r4, r0
 800c4a6:	000d      	movs	r5, r1
 800c4a8:	4b46      	ldr	r3, [pc, #280]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	f7f6 fd6b 	bl	8002f88 <__aeabi_i2d>
 800c4b2:	0002      	movs	r2, r0
 800c4b4:	000b      	movs	r3, r1
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	0029      	movs	r1, r5
 800c4ba:	f7f5 ff13 	bl	80022e4 <__aeabi_dmul>
 800c4be:	0002      	movs	r2, r0
 800c4c0:	000b      	movs	r3, r1
 800c4c2:	0014      	movs	r4, r2
 800c4c4:	001d      	movs	r5, r3
									+ secondsStartX,
 800c4c6:	4b41      	ldr	r3, [pc, #260]	; (800c5cc <interfaceDrawLayer+0x16e0>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	f7f6 fd5c 	bl	8002f88 <__aeabi_i2d>
 800c4d0:	0002      	movs	r2, r0
 800c4d2:	000b      	movs	r3, r1
 800c4d4:	0020      	movs	r0, r4
 800c4d6:	0029      	movs	r1, r5
 800c4d8:	f7f4 ff94 	bl	8001404 <__aeabi_dadd>
 800c4dc:	0002      	movs	r2, r0
 800c4de:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c4e0:	0010      	movs	r0, r2
 800c4e2:	0019      	movs	r1, r3
 800c4e4:	f7f4 f868 	bl	80005b8 <__aeabi_d2uiz>
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	4699      	mov	r9, r3
							sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800c4ee:	2414      	movs	r4, #20
 800c4f0:	193b      	adds	r3, r7, r4
 800c4f2:	781a      	ldrb	r2, [r3, #0]
 800c4f4:	4b32      	ldr	r3, [pc, #200]	; (800c5c0 <interfaceDrawLayer+0x16d4>)
 800c4f6:	0092      	lsls	r2, r2, #2
 800c4f8:	58d3      	ldr	r3, [r2, r3]
 800c4fa:	1c18      	adds	r0, r3, #0
 800c4fc:	f7f6 fd9a 	bl	8003034 <__aeabi_f2d>
 800c500:	0002      	movs	r2, r0
 800c502:	000b      	movs	r3, r1
 800c504:	0010      	movs	r0, r2
 800c506:	0019      	movs	r1, r3
 800c508:	f005 fb2c 	bl	8011b64 <sin>
 800c50c:	0004      	movs	r4, r0
 800c50e:	000d      	movs	r5, r1
 800c510:	4b2c      	ldr	r3, [pc, #176]	; (800c5c4 <interfaceDrawLayer+0x16d8>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	0018      	movs	r0, r3
 800c516:	f7f6 fd37 	bl	8002f88 <__aeabi_i2d>
 800c51a:	0002      	movs	r2, r0
 800c51c:	000b      	movs	r3, r1
 800c51e:	0020      	movs	r0, r4
 800c520:	0029      	movs	r1, r5
 800c522:	f7f5 fedf 	bl	80022e4 <__aeabi_dmul>
 800c526:	0002      	movs	r2, r0
 800c528:	000b      	movs	r3, r1
 800c52a:	0014      	movs	r4, r2
 800c52c:	001d      	movs	r5, r3
									+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800c52e:	4b28      	ldr	r3, [pc, #160]	; (800c5d0 <interfaceDrawLayer+0x16e4>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	0018      	movs	r0, r3
 800c534:	f7f6 fd28 	bl	8002f88 <__aeabi_i2d>
 800c538:	0002      	movs	r2, r0
 800c53a:	000b      	movs	r3, r1
 800c53c:	0020      	movs	r0, r4
 800c53e:	0029      	movs	r1, r5
 800c540:	f7f4 ff60 	bl	8001404 <__aeabi_dadd>
 800c544:	0002      	movs	r2, r0
 800c546:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c548:	0010      	movs	r0, r2
 800c54a:	0019      	movs	r1, r3
 800c54c:	f7f4 f834 	bl	80005b8 <__aeabi_d2uiz>
 800c550:	0003      	movs	r3, r0
 800c552:	b29a      	uxth	r2, r3
 800c554:	4b1f      	ldr	r3, [pc, #124]	; (800c5d4 <interfaceDrawLayer+0x16e8>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	2100      	movs	r1, #0
 800c55e:	9102      	str	r1, [sp, #8]
 800c560:	2101      	movs	r1, #1
 800c562:	9101      	str	r1, [sp, #4]
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	0013      	movs	r3, r2
 800c568:	464a      	mov	r2, r9
 800c56a:	4641      	mov	r1, r8
 800c56c:	0030      	movs	r0, r6
 800c56e:	f7f8 f8af 	bl	80046d0 <Paint_DrawLine>
			for (uint8_t i = 0; i < 12; i++) {
 800c572:	2114      	movs	r1, #20
 800c574:	187b      	adds	r3, r7, r1
 800c576:	781a      	ldrb	r2, [r3, #0]
 800c578:	187b      	adds	r3, r7, r1
 800c57a:	3201      	adds	r2, #1
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	2314      	movs	r3, #20
 800c580:	18fb      	adds	r3, r7, r3
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b0b      	cmp	r3, #11
 800c586:	d800      	bhi.n	800c58a <interfaceDrawLayer+0x169e>
 800c588:	e61c      	b.n	800c1c4 <interfaceDrawLayer+0x12d8>
				}
			}

			//										SECONDS DIGITS

			Paint_DrawString_EN(secondsStartX - 8, secondsStartY - 20, "60",
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <interfaceDrawLayer+0x16e0>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	3b08      	subs	r3, #8
 800c592:	b298      	uxth	r0, r3
 800c594:	4b0e      	ldr	r3, [pc, #56]	; (800c5d0 <interfaceDrawLayer+0x16e4>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3b14      	subs	r3, #20
 800c59c:	b299      	uxth	r1, r3
 800c59e:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <interfaceDrawLayer+0x16e8>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4a0c      	ldr	r2, [pc, #48]	; (800c5d8 <interfaceDrawLayer+0x16ec>)
 800c5a8:	7812      	ldrb	r2, [r2, #0]
 800c5aa:	b2d2      	uxtb	r2, r2
 800c5ac:	b292      	uxth	r2, r2
 800c5ae:	4d0b      	ldr	r5, [pc, #44]	; (800c5dc <interfaceDrawLayer+0x16f0>)
 800c5b0:	4c0b      	ldr	r4, [pc, #44]	; (800c5e0 <interfaceDrawLayer+0x16f4>)
 800c5b2:	9201      	str	r2, [sp, #4]
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	002b      	movs	r3, r5
 800c5b8:	0022      	movs	r2, r4
 800c5ba:	f7f8 fe53 	bl	8005264 <Paint_DrawString_EN>
 800c5be:	e011      	b.n	800c5e4 <interfaceDrawLayer+0x16f8>
 800c5c0:	20000424 	.word	0x20000424
 800c5c4:	20000120 	.word	0x20000120
 800c5c8:	2000012a 	.word	0x2000012a
 800c5cc:	200007a7 	.word	0x200007a7
 800c5d0:	2000038a 	.word	0x2000038a
 800c5d4:	2000034b 	.word	0x2000034b
 800c5d8:	20000785 	.word	0x20000785
 800c5dc:	20000000 	.word	0x20000000
 800c5e0:	080133e0 	.word	0x080133e0
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX + 2, secondsStartY + 2, "20",
 800c5e4:	4bf9      	ldr	r3, [pc, #996]	; (800c9cc <interfaceDrawLayer+0x1ae0>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3302      	adds	r3, #2
 800c5ec:	b298      	uxth	r0, r3
 800c5ee:	4bf8      	ldr	r3, [pc, #992]	; (800c9d0 <interfaceDrawLayer+0x1ae4>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	b299      	uxth	r1, r3
 800c5f8:	4bf6      	ldr	r3, [pc, #984]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	4af5      	ldr	r2, [pc, #980]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c602:	7812      	ldrb	r2, [r2, #0]
 800c604:	b2d2      	uxtb	r2, r2
 800c606:	b292      	uxth	r2, r2
 800c608:	4df4      	ldr	r5, [pc, #976]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c60a:	4cf5      	ldr	r4, [pc, #980]	; (800c9e0 <interfaceDrawLayer+0x1af4>)
 800c60c:	9201      	str	r2, [sp, #4]
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	002b      	movs	r3, r5
 800c612:	0022      	movs	r2, r4
 800c614:	f7f8 fe26 	bl	8005264 <Paint_DrawString_EN>
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX - 18, secondsStartY + 2, "40",
 800c618:	4bec      	ldr	r3, [pc, #944]	; (800c9cc <interfaceDrawLayer+0x1ae0>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	3b12      	subs	r3, #18
 800c620:	b298      	uxth	r0, r3
 800c622:	4beb      	ldr	r3, [pc, #940]	; (800c9d0 <interfaceDrawLayer+0x1ae4>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	b29b      	uxth	r3, r3
 800c628:	3302      	adds	r3, #2
 800c62a:	b299      	uxth	r1, r3
 800c62c:	4be9      	ldr	r3, [pc, #932]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	b29b      	uxth	r3, r3
 800c634:	4ae8      	ldr	r2, [pc, #928]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c636:	7812      	ldrb	r2, [r2, #0]
 800c638:	b2d2      	uxtb	r2, r2
 800c63a:	b292      	uxth	r2, r2
 800c63c:	4de7      	ldr	r5, [pc, #924]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c63e:	4ce9      	ldr	r4, [pc, #932]	; (800c9e4 <interfaceDrawLayer+0x1af8>)
 800c640:	9201      	str	r2, [sp, #4]
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	002b      	movs	r3, r5
 800c646:	0022      	movs	r2, r4
 800c648:	f7f8 fe0c 	bl	8005264 <Paint_DrawString_EN>

		}

		//										MAIN INDEX

		for (uint8_t i = 1; i < 12; i++) {
 800c64c:	2313      	movs	r3, #19
 800c64e:	18fb      	adds	r3, r7, r3
 800c650:	2201      	movs	r2, #1
 800c652:	701a      	strb	r2, [r3, #0]
 800c654:	e0ea      	b.n	800c82c <interfaceDrawLayer+0x1940>

			Paint_DrawLine(
					cos(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800c656:	2313      	movs	r3, #19
 800c658:	18fb      	adds	r3, r7, r3
 800c65a:	781a      	ldrb	r2, [r3, #0]
 800c65c:	4be2      	ldr	r3, [pc, #904]	; (800c9e8 <interfaceDrawLayer+0x1afc>)
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	58d3      	ldr	r3, [r2, r3]
 800c662:	1c18      	adds	r0, r3, #0
 800c664:	f7f6 fce6 	bl	8003034 <__aeabi_f2d>
 800c668:	0002      	movs	r2, r0
 800c66a:	000b      	movs	r3, r1
 800c66c:	0010      	movs	r0, r2
 800c66e:	0019      	movs	r1, r3
 800c670:	f005 fa36 	bl	8011ae0 <cos>
 800c674:	0004      	movs	r4, r0
 800c676:	000d      	movs	r5, r1
 800c678:	4bdc      	ldr	r3, [pc, #880]	; (800c9ec <interfaceDrawLayer+0x1b00>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	001a      	movs	r2, r3
 800c67e:	4bdc      	ldr	r3, [pc, #880]	; (800c9f0 <interfaceDrawLayer+0x1b04>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	0018      	movs	r0, r3
 800c686:	f7f6 fc7f 	bl	8002f88 <__aeabi_i2d>
 800c68a:	0002      	movs	r2, r0
 800c68c:	000b      	movs	r3, r1
 800c68e:	0020      	movs	r0, r4
 800c690:	0029      	movs	r1, r5
 800c692:	f7f5 fe27 	bl	80022e4 <__aeabi_dmul>
 800c696:	0002      	movs	r2, r0
 800c698:	000b      	movs	r3, r1
 800c69a:	0014      	movs	r4, r2
 800c69c:	001d      	movs	r5, r3
							+ mainStartX,
 800c69e:	4bd5      	ldr	r3, [pc, #852]	; (800c9f4 <interfaceDrawLayer+0x1b08>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	0018      	movs	r0, r3
 800c6a4:	f7f6 fc70 	bl	8002f88 <__aeabi_i2d>
 800c6a8:	0002      	movs	r2, r0
 800c6aa:	000b      	movs	r3, r1
 800c6ac:	0020      	movs	r0, r4
 800c6ae:	0029      	movs	r1, r5
 800c6b0:	f7f4 fea8 	bl	8001404 <__aeabi_dadd>
 800c6b4:	0002      	movs	r2, r0
 800c6b6:	000b      	movs	r3, r1
			Paint_DrawLine(
 800c6b8:	0010      	movs	r0, r2
 800c6ba:	0019      	movs	r1, r3
 800c6bc:	f7f3 ff7c 	bl	80005b8 <__aeabi_d2uiz>
 800c6c0:	0003      	movs	r3, r0
 800c6c2:	b29e      	uxth	r6, r3
					sin(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800c6c4:	2313      	movs	r3, #19
 800c6c6:	18fb      	adds	r3, r7, r3
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	4bc7      	ldr	r3, [pc, #796]	; (800c9e8 <interfaceDrawLayer+0x1afc>)
 800c6cc:	0092      	lsls	r2, r2, #2
 800c6ce:	58d3      	ldr	r3, [r2, r3]
 800c6d0:	1c18      	adds	r0, r3, #0
 800c6d2:	f7f6 fcaf 	bl	8003034 <__aeabi_f2d>
 800c6d6:	0002      	movs	r2, r0
 800c6d8:	000b      	movs	r3, r1
 800c6da:	0010      	movs	r0, r2
 800c6dc:	0019      	movs	r1, r3
 800c6de:	f005 fa41 	bl	8011b64 <sin>
 800c6e2:	0004      	movs	r4, r0
 800c6e4:	000d      	movs	r5, r1
 800c6e6:	4bc1      	ldr	r3, [pc, #772]	; (800c9ec <interfaceDrawLayer+0x1b00>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	001a      	movs	r2, r3
 800c6ec:	4bc0      	ldr	r3, [pc, #768]	; (800c9f0 <interfaceDrawLayer+0x1b04>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	f7f6 fc48 	bl	8002f88 <__aeabi_i2d>
 800c6f8:	0002      	movs	r2, r0
 800c6fa:	000b      	movs	r3, r1
 800c6fc:	0020      	movs	r0, r4
 800c6fe:	0029      	movs	r1, r5
 800c700:	f7f5 fdf0 	bl	80022e4 <__aeabi_dmul>
 800c704:	0002      	movs	r2, r0
 800c706:	000b      	movs	r3, r1
 800c708:	0014      	movs	r4, r2
 800c70a:	001d      	movs	r5, r3
							+ mainStartY,
 800c70c:	4bba      	ldr	r3, [pc, #744]	; (800c9f8 <interfaceDrawLayer+0x1b0c>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	0018      	movs	r0, r3
 800c712:	f7f6 fc39 	bl	8002f88 <__aeabi_i2d>
 800c716:	0002      	movs	r2, r0
 800c718:	000b      	movs	r3, r1
 800c71a:	0020      	movs	r0, r4
 800c71c:	0029      	movs	r1, r5
 800c71e:	f7f4 fe71 	bl	8001404 <__aeabi_dadd>
 800c722:	0002      	movs	r2, r0
 800c724:	000b      	movs	r3, r1
			Paint_DrawLine(
 800c726:	0010      	movs	r0, r2
 800c728:	0019      	movs	r1, r3
 800c72a:	f7f3 ff45 	bl	80005b8 <__aeabi_d2uiz>
 800c72e:	0003      	movs	r3, r0
 800c730:	b29a      	uxth	r2, r3
 800c732:	4690      	mov	r8, r2

					cos(mainIndexAngle[i]) * (mainBoardRadius) + mainStartX,
 800c734:	2313      	movs	r3, #19
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	4bab      	ldr	r3, [pc, #684]	; (800c9e8 <interfaceDrawLayer+0x1afc>)
 800c73c:	0092      	lsls	r2, r2, #2
 800c73e:	58d3      	ldr	r3, [r2, r3]
 800c740:	1c18      	adds	r0, r3, #0
 800c742:	f7f6 fc77 	bl	8003034 <__aeabi_f2d>
 800c746:	0002      	movs	r2, r0
 800c748:	000b      	movs	r3, r1
 800c74a:	0010      	movs	r0, r2
 800c74c:	0019      	movs	r1, r3
 800c74e:	f005 f9c7 	bl	8011ae0 <cos>
 800c752:	0004      	movs	r4, r0
 800c754:	000d      	movs	r5, r1
 800c756:	4ba5      	ldr	r3, [pc, #660]	; (800c9ec <interfaceDrawLayer+0x1b00>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	0018      	movs	r0, r3
 800c75c:	f7f6 fc14 	bl	8002f88 <__aeabi_i2d>
 800c760:	0002      	movs	r2, r0
 800c762:	000b      	movs	r3, r1
 800c764:	0020      	movs	r0, r4
 800c766:	0029      	movs	r1, r5
 800c768:	f7f5 fdbc 	bl	80022e4 <__aeabi_dmul>
 800c76c:	0002      	movs	r2, r0
 800c76e:	000b      	movs	r3, r1
 800c770:	0014      	movs	r4, r2
 800c772:	001d      	movs	r5, r3
 800c774:	4b9f      	ldr	r3, [pc, #636]	; (800c9f4 <interfaceDrawLayer+0x1b08>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	0018      	movs	r0, r3
 800c77a:	f7f6 fc05 	bl	8002f88 <__aeabi_i2d>
 800c77e:	0002      	movs	r2, r0
 800c780:	000b      	movs	r3, r1
 800c782:	0020      	movs	r0, r4
 800c784:	0029      	movs	r1, r5
 800c786:	f7f4 fe3d 	bl	8001404 <__aeabi_dadd>
 800c78a:	0002      	movs	r2, r0
 800c78c:	000b      	movs	r3, r1
			Paint_DrawLine(
 800c78e:	0010      	movs	r0, r2
 800c790:	0019      	movs	r1, r3
 800c792:	f7f3 ff11 	bl	80005b8 <__aeabi_d2uiz>
 800c796:	0003      	movs	r3, r0
 800c798:	b29a      	uxth	r2, r3
 800c79a:	4691      	mov	r9, r2
					sin(mainIndexAngle[i]) * (mainBoardRadius) + mainStartY,
 800c79c:	2313      	movs	r3, #19
 800c79e:	18fb      	adds	r3, r7, r3
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	4b91      	ldr	r3, [pc, #580]	; (800c9e8 <interfaceDrawLayer+0x1afc>)
 800c7a4:	0092      	lsls	r2, r2, #2
 800c7a6:	58d3      	ldr	r3, [r2, r3]
 800c7a8:	1c18      	adds	r0, r3, #0
 800c7aa:	f7f6 fc43 	bl	8003034 <__aeabi_f2d>
 800c7ae:	0002      	movs	r2, r0
 800c7b0:	000b      	movs	r3, r1
 800c7b2:	0010      	movs	r0, r2
 800c7b4:	0019      	movs	r1, r3
 800c7b6:	f005 f9d5 	bl	8011b64 <sin>
 800c7ba:	0004      	movs	r4, r0
 800c7bc:	000d      	movs	r5, r1
 800c7be:	4b8b      	ldr	r3, [pc, #556]	; (800c9ec <interfaceDrawLayer+0x1b00>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f7f6 fbe0 	bl	8002f88 <__aeabi_i2d>
 800c7c8:	0002      	movs	r2, r0
 800c7ca:	000b      	movs	r3, r1
 800c7cc:	0020      	movs	r0, r4
 800c7ce:	0029      	movs	r1, r5
 800c7d0:	f7f5 fd88 	bl	80022e4 <__aeabi_dmul>
 800c7d4:	0002      	movs	r2, r0
 800c7d6:	000b      	movs	r3, r1
 800c7d8:	0014      	movs	r4, r2
 800c7da:	001d      	movs	r5, r3
 800c7dc:	4b86      	ldr	r3, [pc, #536]	; (800c9f8 <interfaceDrawLayer+0x1b0c>)
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	f7f6 fbd1 	bl	8002f88 <__aeabi_i2d>
 800c7e6:	0002      	movs	r2, r0
 800c7e8:	000b      	movs	r3, r1
 800c7ea:	0020      	movs	r0, r4
 800c7ec:	0029      	movs	r1, r5
 800c7ee:	f7f4 fe09 	bl	8001404 <__aeabi_dadd>
 800c7f2:	0002      	movs	r2, r0
 800c7f4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800c7f6:	0010      	movs	r0, r2
 800c7f8:	0019      	movs	r1, r3
 800c7fa:	f7f3 fedd 	bl	80005b8 <__aeabi_d2uiz>
 800c7fe:	0003      	movs	r3, r0
 800c800:	b29a      	uxth	r2, r3
 800c802:	4b75      	ldr	r3, [pc, #468]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2100      	movs	r1, #0
 800c80c:	9102      	str	r1, [sp, #8]
 800c80e:	2101      	movs	r1, #1
 800c810:	9101      	str	r1, [sp, #4]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	0013      	movs	r3, r2
 800c816:	464a      	mov	r2, r9
 800c818:	4641      	mov	r1, r8
 800c81a:	0030      	movs	r0, r6
 800c81c:	f7f7 ff58 	bl	80046d0 <Paint_DrawLine>
		for (uint8_t i = 1; i < 12; i++) {
 800c820:	2113      	movs	r1, #19
 800c822:	187b      	adds	r3, r7, r1
 800c824:	781a      	ldrb	r2, [r3, #0]
 800c826:	187b      	adds	r3, r7, r1
 800c828:	3201      	adds	r2, #1
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	2313      	movs	r3, #19
 800c82e:	18fb      	adds	r3, r7, r3
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	2b0b      	cmp	r3, #11
 800c834:	d800      	bhi.n	800c838 <interfaceDrawLayer+0x194c>
 800c836:	e70e      	b.n	800c656 <interfaceDrawLayer+0x176a>

		}

	}

	if (layer == 3) {		//pointers
 800c838:	1dfb      	adds	r3, r7, #7
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d001      	beq.n	800c844 <interfaceDrawLayer+0x1958>
 800c840:	f000 fdff 	bl	800d442 <interfaceDrawLayer+0x2556>

		//										METER

		if (showMeter == 1) {
 800c844:	4b6d      	ldr	r3, [pc, #436]	; (800c9fc <interfaceDrawLayer+0x1b10>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d14d      	bne.n	800c8e8 <interfaceDrawLayer+0x19fc>
			Paint_DrawString_EN(meterX + 2, meterY + 2, voltagePassive, &Font16,
 800c84c:	4b6c      	ldr	r3, [pc, #432]	; (800ca00 <interfaceDrawLayer+0x1b14>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	b29b      	uxth	r3, r3
 800c852:	3302      	adds	r3, #2
 800c854:	b298      	uxth	r0, r3
 800c856:	4b6b      	ldr	r3, [pc, #428]	; (800ca04 <interfaceDrawLayer+0x1b18>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	3302      	adds	r3, #2
 800c85e:	b299      	uxth	r1, r3
 800c860:	4b5d      	ldr	r3, [pc, #372]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	b29b      	uxth	r3, r3
 800c868:	4a5a      	ldr	r2, [pc, #360]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	b292      	uxth	r2, r2
 800c870:	4d65      	ldr	r5, [pc, #404]	; (800ca08 <interfaceDrawLayer+0x1b1c>)
 800c872:	4c66      	ldr	r4, [pc, #408]	; (800ca0c <interfaceDrawLayer+0x1b20>)
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	002b      	movs	r3, r5
 800c87a:	0022      	movs	r2, r4
 800c87c:	f7f8 fcf2 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 18, voltageDrop, &Font16,
 800c880:	4b5f      	ldr	r3, [pc, #380]	; (800ca00 <interfaceDrawLayer+0x1b14>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	b29b      	uxth	r3, r3
 800c886:	3302      	adds	r3, #2
 800c888:	b298      	uxth	r0, r3
 800c88a:	4b5e      	ldr	r3, [pc, #376]	; (800ca04 <interfaceDrawLayer+0x1b18>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	3312      	adds	r3, #18
 800c892:	b299      	uxth	r1, r3
 800c894:	4b50      	ldr	r3, [pc, #320]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	4a4d      	ldr	r2, [pc, #308]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	b292      	uxth	r2, r2
 800c8a4:	4d58      	ldr	r5, [pc, #352]	; (800ca08 <interfaceDrawLayer+0x1b1c>)
 800c8a6:	4c5a      	ldr	r4, [pc, #360]	; (800ca10 <interfaceDrawLayer+0x1b24>)
 800c8a8:	9201      	str	r2, [sp, #4]
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	002b      	movs	r3, r5
 800c8ae:	0022      	movs	r2, r4
 800c8b0:	f7f8 fcd8 	bl	8005264 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 34, resistance, &Font16,
 800c8b4:	4b52      	ldr	r3, [pc, #328]	; (800ca00 <interfaceDrawLayer+0x1b14>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3302      	adds	r3, #2
 800c8bc:	b298      	uxth	r0, r3
 800c8be:	4b51      	ldr	r3, [pc, #324]	; (800ca04 <interfaceDrawLayer+0x1b18>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3322      	adds	r3, #34	; 0x22
 800c8c6:	b299      	uxth	r1, r3
 800c8c8:	4b43      	ldr	r3, [pc, #268]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	4a40      	ldr	r2, [pc, #256]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c8d2:	7812      	ldrb	r2, [r2, #0]
 800c8d4:	b2d2      	uxtb	r2, r2
 800c8d6:	b292      	uxth	r2, r2
 800c8d8:	4d4b      	ldr	r5, [pc, #300]	; (800ca08 <interfaceDrawLayer+0x1b1c>)
 800c8da:	4c4e      	ldr	r4, [pc, #312]	; (800ca14 <interfaceDrawLayer+0x1b28>)
 800c8dc:	9201      	str	r2, [sp, #4]
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	002b      	movs	r3, r5
 800c8e2:	0022      	movs	r2, r4
 800c8e4:	f7f8 fcbe 	bl	8005264 <Paint_DrawString_EN>

		}

		//										DIGITAL INTERFACE

		if (showDigitalInterface == 1) {
 800c8e8:	4b4b      	ldr	r3, [pc, #300]	; (800ca18 <interfaceDrawLayer+0x1b2c>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d000      	beq.n	800c8f2 <interfaceDrawLayer+0x1a06>
 800c8f0:	e0b7      	b.n	800ca62 <interfaceDrawLayer+0x1b76>
			Paint_DrawNum(digitalX, digitalY, pressureValue, &Font12, colorMain,
 800c8f2:	4b4a      	ldr	r3, [pc, #296]	; (800ca1c <interfaceDrawLayer+0x1b30>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	b298      	uxth	r0, r3
 800c8f8:	4b49      	ldr	r3, [pc, #292]	; (800ca20 <interfaceDrawLayer+0x1b34>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	b299      	uxth	r1, r3
 800c8fe:	4b49      	ldr	r3, [pc, #292]	; (800ca24 <interfaceDrawLayer+0x1b38>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	001d      	movs	r5, r3
 800c904:	4b33      	ldr	r3, [pc, #204]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	4a32      	ldr	r2, [pc, #200]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c90e:	7812      	ldrb	r2, [r2, #0]
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	b292      	uxth	r2, r2
 800c914:	4c31      	ldr	r4, [pc, #196]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	0023      	movs	r3, r4
 800c91c:	002a      	movs	r2, r5
 800c91e:	f7f8 fd1f 	bl	8005360 <Paint_DrawNum>
					colorSecond);
			Paint_DrawNum(digitalX, digitalY + 12, humidityValue, &Font12,
 800c922:	4b3e      	ldr	r3, [pc, #248]	; (800ca1c <interfaceDrawLayer+0x1b30>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	b298      	uxth	r0, r3
 800c928:	4b3d      	ldr	r3, [pc, #244]	; (800ca20 <interfaceDrawLayer+0x1b34>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	330c      	adds	r3, #12
 800c930:	b299      	uxth	r1, r3
 800c932:	4b3d      	ldr	r3, [pc, #244]	; (800ca28 <interfaceDrawLayer+0x1b3c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	001d      	movs	r5, r3
 800c938:	4b26      	ldr	r3, [pc, #152]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	4a25      	ldr	r2, [pc, #148]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c942:	7812      	ldrb	r2, [r2, #0]
 800c944:	b2d2      	uxtb	r2, r2
 800c946:	b292      	uxth	r2, r2
 800c948:	4c24      	ldr	r4, [pc, #144]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c94a:	9201      	str	r2, [sp, #4]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	0023      	movs	r3, r4
 800c950:	002a      	movs	r2, r5
 800c952:	f7f8 fd05 	bl	8005360 <Paint_DrawNum>
					colorMain, colorSecond);

			if (temperatureValue < 0) {
 800c956:	4b35      	ldr	r3, [pc, #212]	; (800ca2c <interfaceDrawLayer+0x1b40>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	da68      	bge.n	800ca30 <interfaceDrawLayer+0x1b44>

				Paint_DrawChar(digitalX, digitalY + 24, '-', &Font12, colorMain,
 800c95e:	4b2f      	ldr	r3, [pc, #188]	; (800ca1c <interfaceDrawLayer+0x1b30>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b298      	uxth	r0, r3
 800c964:	4b2e      	ldr	r3, [pc, #184]	; (800ca20 <interfaceDrawLayer+0x1b34>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	3318      	adds	r3, #24
 800c96c:	b299      	uxth	r1, r3
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	b29b      	uxth	r3, r3
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c978:	7812      	ldrb	r2, [r2, #0]
 800c97a:	b2d2      	uxtb	r2, r2
 800c97c:	b292      	uxth	r2, r2
 800c97e:	4c17      	ldr	r4, [pc, #92]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c980:	9201      	str	r2, [sp, #4]
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	0023      	movs	r3, r4
 800c986:	222d      	movs	r2, #45	; 0x2d
 800c988:	f7f8 fb88 	bl	800509c <Paint_DrawChar>
						colorSecond);
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800c98c:	4b23      	ldr	r3, [pc, #140]	; (800ca1c <interfaceDrawLayer+0x1b30>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
 800c992:	3308      	adds	r3, #8
 800c994:	b298      	uxth	r0, r3
 800c996:	4b22      	ldr	r3, [pc, #136]	; (800ca20 <interfaceDrawLayer+0x1b34>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3318      	adds	r3, #24
 800c99e:	b299      	uxth	r1, r3
 800c9a0:	4b22      	ldr	r3, [pc, #136]	; (800ca2c <interfaceDrawLayer+0x1b40>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
						abs(temperatureValue), &Font12, colorMain, colorSecond);
 800c9a4:	17da      	asrs	r2, r3, #31
 800c9a6:	189c      	adds	r4, r3, r2
 800c9a8:	4054      	eors	r4, r2
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800c9aa:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <interfaceDrawLayer+0x1ae8>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	4a09      	ldr	r2, [pc, #36]	; (800c9d8 <interfaceDrawLayer+0x1aec>)
 800c9b4:	7812      	ldrb	r2, [r2, #0]
 800c9b6:	b2d2      	uxtb	r2, r2
 800c9b8:	b292      	uxth	r2, r2
 800c9ba:	4d08      	ldr	r5, [pc, #32]	; (800c9dc <interfaceDrawLayer+0x1af0>)
 800c9bc:	9201      	str	r2, [sp, #4]
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	002b      	movs	r3, r5
 800c9c2:	0022      	movs	r2, r4
 800c9c4:	f7f8 fccc 	bl	8005360 <Paint_DrawNum>
 800c9c8:	e04b      	b.n	800ca62 <interfaceDrawLayer+0x1b76>
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	200007a7 	.word	0x200007a7
 800c9d0:	2000038a 	.word	0x2000038a
 800c9d4:	2000034b 	.word	0x2000034b
 800c9d8:	20000785 	.word	0x20000785
 800c9dc:	20000000 	.word	0x20000000
 800c9e0:	080133dc 	.word	0x080133dc
 800c9e4:	080133e4 	.word	0x080133e4
 800c9e8:	2000034c 	.word	0x2000034c
 800c9ec:	200006f8 	.word	0x200006f8
 800c9f0:	20000456 	.word	0x20000456
 800c9f4:	2000045b 	.word	0x2000045b
 800c9f8:	2000013a 	.word	0x2000013a
 800c9fc:	200007a6 	.word	0x200007a6
 800ca00:	200003c6 	.word	0x200003c6
 800ca04:	200004c4 	.word	0x200004c4
 800ca08:	20000008 	.word	0x20000008
 800ca0c:	20000664 	.word	0x20000664
 800ca10:	200006f0 	.word	0x200006f0
 800ca14:	2000077c 	.word	0x2000077c
 800ca18:	200007c0 	.word	0x200007c0
 800ca1c:	20000715 	.word	0x20000715
 800ca20:	200003c2 	.word	0x200003c2
 800ca24:	20000704 	.word	0x20000704
 800ca28:	2000013c 	.word	0x2000013c
 800ca2c:	200003bc 	.word	0x200003bc
			} else {
				Paint_DrawNum(digitalX, digitalY + 24, temperatureValue,
 800ca30:	4b66      	ldr	r3, [pc, #408]	; (800cbcc <interfaceDrawLayer+0x1ce0>)
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	b298      	uxth	r0, r3
 800ca36:	4b66      	ldr	r3, [pc, #408]	; (800cbd0 <interfaceDrawLayer+0x1ce4>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	3318      	adds	r3, #24
 800ca3e:	b299      	uxth	r1, r3
 800ca40:	4b64      	ldr	r3, [pc, #400]	; (800cbd4 <interfaceDrawLayer+0x1ce8>)
 800ca42:	681c      	ldr	r4, [r3, #0]
 800ca44:	4b64      	ldr	r3, [pc, #400]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	4a63      	ldr	r2, [pc, #396]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800ca4e:	7812      	ldrb	r2, [r2, #0]
 800ca50:	b2d2      	uxtb	r2, r2
 800ca52:	b292      	uxth	r2, r2
 800ca54:	4d62      	ldr	r5, [pc, #392]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800ca56:	9201      	str	r2, [sp, #4]
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	002b      	movs	r3, r5
 800ca5c:	0022      	movs	r2, r4
 800ca5e:	f7f8 fc7f 	bl	8005360 <Paint_DrawNum>

		}

		//										TEMPERATURE READING

		if (showThermometer == 1) {
 800ca62:	4b60      	ldr	r3, [pc, #384]	; (800cbe4 <interfaceDrawLayer+0x1cf8>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d14c      	bne.n	800cb04 <interfaceDrawLayer+0x1c18>
			if (temperatureValue < 0) {
 800ca6a:	4b5a      	ldr	r3, [pc, #360]	; (800cbd4 <interfaceDrawLayer+0x1ce8>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	da31      	bge.n	800cad6 <interfaceDrawLayer+0x1bea>

				Paint_DrawChar(temperatureX - 8, temperatureY, '-', &Font12,
 800ca72:	4b5d      	ldr	r3, [pc, #372]	; (800cbe8 <interfaceDrawLayer+0x1cfc>)
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	3b08      	subs	r3, #8
 800ca7a:	b298      	uxth	r0, r3
 800ca7c:	4b5b      	ldr	r3, [pc, #364]	; (800cbec <interfaceDrawLayer+0x1d00>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	b299      	uxth	r1, r3
 800ca82:	4b55      	ldr	r3, [pc, #340]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	4a54      	ldr	r2, [pc, #336]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800ca8c:	7812      	ldrb	r2, [r2, #0]
 800ca8e:	b2d2      	uxtb	r2, r2
 800ca90:	b292      	uxth	r2, r2
 800ca92:	4c53      	ldr	r4, [pc, #332]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800ca94:	9201      	str	r2, [sp, #4]
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	0023      	movs	r3, r4
 800ca9a:	222d      	movs	r2, #45	; 0x2d
 800ca9c:	f7f8 fafe 	bl	800509c <Paint_DrawChar>
						colorMain, colorSecond);
				Paint_DrawNum(temperatureX, temperatureY, abs(temperatureValue),
 800caa0:	4b51      	ldr	r3, [pc, #324]	; (800cbe8 <interfaceDrawLayer+0x1cfc>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	b298      	uxth	r0, r3
 800caa6:	4b51      	ldr	r3, [pc, #324]	; (800cbec <interfaceDrawLayer+0x1d00>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	b299      	uxth	r1, r3
 800caac:	4b49      	ldr	r3, [pc, #292]	; (800cbd4 <interfaceDrawLayer+0x1ce8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	17da      	asrs	r2, r3, #31
 800cab2:	189c      	adds	r4, r3, r2
 800cab4:	4054      	eors	r4, r2
 800cab6:	4b48      	ldr	r3, [pc, #288]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4a47      	ldr	r2, [pc, #284]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800cac0:	7812      	ldrb	r2, [r2, #0]
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	b292      	uxth	r2, r2
 800cac6:	4d46      	ldr	r5, [pc, #280]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800cac8:	9201      	str	r2, [sp, #4]
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	002b      	movs	r3, r5
 800cace:	0022      	movs	r2, r4
 800cad0:	f7f8 fc46 	bl	8005360 <Paint_DrawNum>
 800cad4:	e016      	b.n	800cb04 <interfaceDrawLayer+0x1c18>
						&Font12, colorMain, colorSecond);
			} else {
				Paint_DrawNum(temperatureX, temperatureY, temperatureValue,
 800cad6:	4b44      	ldr	r3, [pc, #272]	; (800cbe8 <interfaceDrawLayer+0x1cfc>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	b298      	uxth	r0, r3
 800cadc:	4b43      	ldr	r3, [pc, #268]	; (800cbec <interfaceDrawLayer+0x1d00>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	b299      	uxth	r1, r3
 800cae2:	4b3c      	ldr	r3, [pc, #240]	; (800cbd4 <interfaceDrawLayer+0x1ce8>)
 800cae4:	681c      	ldr	r4, [r3, #0]
 800cae6:	4b3c      	ldr	r3, [pc, #240]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	b29b      	uxth	r3, r3
 800caee:	4a3b      	ldr	r2, [pc, #236]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800caf0:	7812      	ldrb	r2, [r2, #0]
 800caf2:	b2d2      	uxtb	r2, r2
 800caf4:	b292      	uxth	r2, r2
 800caf6:	4d3a      	ldr	r5, [pc, #232]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800caf8:	9201      	str	r2, [sp, #4]
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	002b      	movs	r3, r5
 800cafe:	0022      	movs	r2, r4
 800cb00:	f7f8 fc2e 	bl	8005360 <Paint_DrawNum>
			}
		}

		//										HUMIDITY READING

		if (showHigrometer == 1) {
 800cb04:	4b3a      	ldr	r3, [pc, #232]	; (800cbf0 <interfaceDrawLayer+0x1d04>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d120      	bne.n	800cb4e <interfaceDrawLayer+0x1c62>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800cb0c:	4b39      	ldr	r3, [pc, #228]	; (800cbf4 <interfaceDrawLayer+0x1d08>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	b298      	uxth	r0, r3
 800cb12:	4b39      	ldr	r3, [pc, #228]	; (800cbf8 <interfaceDrawLayer+0x1d0c>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	b299      	uxth	r1, r3
 800cb18:	4b36      	ldr	r3, [pc, #216]	; (800cbf4 <interfaceDrawLayer+0x1d08>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	3305      	adds	r3, #5
 800cb20:	b29c      	uxth	r4, r3
 800cb22:	4b35      	ldr	r3, [pc, #212]	; (800cbf8 <interfaceDrawLayer+0x1d0c>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	b29a      	uxth	r2, r3
					humidityY + (humidityValue / 2), colorSecond, DOT_PIXEL_1X1,
 800cb28:	4b34      	ldr	r3, [pc, #208]	; (800cbfc <interfaceDrawLayer+0x1d10>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	085b      	lsrs	r3, r3, #1
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	18d3      	adds	r3, r2, r3
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	4b29      	ldr	r3, [pc, #164]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	2501      	movs	r5, #1
 800cb3e:	9502      	str	r5, [sp, #8]
 800cb40:	2501      	movs	r5, #1
 800cb42:	9501      	str	r5, [sp, #4]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	0013      	movs	r3, r2
 800cb48:	0022      	movs	r2, r4
 800cb4a:	f7f7 ff89 	bl	8004a60 <Paint_DrawRectangle>
					DRAW_FILL_FULL);
		}

		//										ALTITUDE READING

		if (showNavi == 1) {
 800cb4e:	4b2c      	ldr	r3, [pc, #176]	; (800cc00 <interfaceDrawLayer+0x1d14>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d175      	bne.n	800cc42 <interfaceDrawLayer+0x1d56>
			if (altitudeValue < 0) {
 800cb56:	4b2b      	ldr	r3, [pc, #172]	; (800cc04 <interfaceDrawLayer+0x1d18>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da58      	bge.n	800cc10 <interfaceDrawLayer+0x1d24>
				Paint_DrawChar(compassX, compassY + 31, '-', &Font12,
 800cb5e:	4b2a      	ldr	r3, [pc, #168]	; (800cc08 <interfaceDrawLayer+0x1d1c>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b298      	uxth	r0, r3
 800cb64:	4b29      	ldr	r3, [pc, #164]	; (800cc0c <interfaceDrawLayer+0x1d20>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	331f      	adds	r3, #31
 800cb6c:	b299      	uxth	r1, r3
 800cb6e:	4b1b      	ldr	r3, [pc, #108]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	4a18      	ldr	r2, [pc, #96]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800cb78:	7812      	ldrb	r2, [r2, #0]
 800cb7a:	b2d2      	uxtb	r2, r2
 800cb7c:	b292      	uxth	r2, r2
 800cb7e:	4c18      	ldr	r4, [pc, #96]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800cb80:	9201      	str	r2, [sp, #4]
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	0023      	movs	r3, r4
 800cb86:	222d      	movs	r2, #45	; 0x2d
 800cb88:	f7f8 fa88 	bl	800509c <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX + 8, compassY + 31, abs(altitudeValue),
 800cb8c:	4b1e      	ldr	r3, [pc, #120]	; (800cc08 <interfaceDrawLayer+0x1d1c>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	3308      	adds	r3, #8
 800cb94:	b298      	uxth	r0, r3
 800cb96:	4b1d      	ldr	r3, [pc, #116]	; (800cc0c <interfaceDrawLayer+0x1d20>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	331f      	adds	r3, #31
 800cb9e:	b299      	uxth	r1, r3
 800cba0:	4b18      	ldr	r3, [pc, #96]	; (800cc04 <interfaceDrawLayer+0x1d18>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	17da      	asrs	r2, r3, #31
 800cba6:	189c      	adds	r4, r3, r2
 800cba8:	4054      	eors	r4, r2
 800cbaa:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <interfaceDrawLayer+0x1cf0>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	4a09      	ldr	r2, [pc, #36]	; (800cbd8 <interfaceDrawLayer+0x1cec>)
 800cbb4:	7812      	ldrb	r2, [r2, #0]
 800cbb6:	b2d2      	uxtb	r2, r2
 800cbb8:	b292      	uxth	r2, r2
 800cbba:	4d09      	ldr	r5, [pc, #36]	; (800cbe0 <interfaceDrawLayer+0x1cf4>)
 800cbbc:	9201      	str	r2, [sp, #4]
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	002b      	movs	r3, r5
 800cbc2:	0022      	movs	r2, r4
 800cbc4:	f7f8 fbcc 	bl	8005360 <Paint_DrawNum>
 800cbc8:	e03b      	b.n	800cc42 <interfaceDrawLayer+0x1d56>
 800cbca:	46c0      	nop			; (mov r8, r8)
 800cbcc:	20000715 	.word	0x20000715
 800cbd0:	200003c2 	.word	0x200003c2
 800cbd4:	200003bc 	.word	0x200003bc
 800cbd8:	2000034b 	.word	0x2000034b
 800cbdc:	20000785 	.word	0x20000785
 800cbe0:	20000000 	.word	0x20000000
 800cbe4:	2000076c 	.word	0x2000076c
 800cbe8:	200006fd 	.word	0x200006fd
 800cbec:	2000037c 	.word	0x2000037c
 800cbf0:	20000716 	.word	0x20000716
 800cbf4:	200007ca 	.word	0x200007ca
 800cbf8:	2000045a 	.word	0x2000045a
 800cbfc:	2000013c 	.word	0x2000013c
 800cc00:	2000037d 	.word	0x2000037d
 800cc04:	20000710 	.word	0x20000710
 800cc08:	200007a5 	.word	0x200007a5
 800cc0c:	2000045c 	.word	0x2000045c
						&Font12, colorSecond, colorMain);
			} else {
				Paint_DrawNum(compassX, compassY + 31, altitudeValue, &Font12,
 800cc10:	4ba5      	ldr	r3, [pc, #660]	; (800cea8 <interfaceDrawLayer+0x1fbc>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	b298      	uxth	r0, r3
 800cc16:	4ba5      	ldr	r3, [pc, #660]	; (800ceac <interfaceDrawLayer+0x1fc0>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	331f      	adds	r3, #31
 800cc1e:	b299      	uxth	r1, r3
 800cc20:	4ba3      	ldr	r3, [pc, #652]	; (800ceb0 <interfaceDrawLayer+0x1fc4>)
 800cc22:	681c      	ldr	r4, [r3, #0]
 800cc24:	4ba3      	ldr	r3, [pc, #652]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	4aa2      	ldr	r2, [pc, #648]	; (800ceb8 <interfaceDrawLayer+0x1fcc>)
 800cc2e:	7812      	ldrb	r2, [r2, #0]
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	b292      	uxth	r2, r2
 800cc34:	4da1      	ldr	r5, [pc, #644]	; (800cebc <interfaceDrawLayer+0x1fd0>)
 800cc36:	9201      	str	r2, [sp, #4]
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	002b      	movs	r3, r5
 800cc3c:	0022      	movs	r2, r4
 800cc3e:	f7f8 fb8f 	bl	8005360 <Paint_DrawNum>
			}
		}

		//										MAGNETOMETER READING

		if (showNavi == 1) {
 800cc42:	4b9f      	ldr	r3, [pc, #636]	; (800cec0 <interfaceDrawLayer+0x1fd4>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d171      	bne.n	800cd2e <interfaceDrawLayer+0x1e42>

			uint16_t compassCenterX = compassX + 24;
 800cc4a:	4b97      	ldr	r3, [pc, #604]	; (800cea8 <interfaceDrawLayer+0x1fbc>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	260a      	movs	r6, #10
 800cc52:	19bb      	adds	r3, r7, r6
 800cc54:	3218      	adds	r2, #24
 800cc56:	801a      	strh	r2, [r3, #0]
			uint16_t compassCenterY = compassY + 14;
 800cc58:	4b94      	ldr	r3, [pc, #592]	; (800ceac <interfaceDrawLayer+0x1fc0>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	2108      	movs	r1, #8
 800cc60:	187b      	adds	r3, r7, r1
 800cc62:	320e      	adds	r2, #14
 800cc64:	801a      	strh	r2, [r3, #0]

			Paint_DrawPoint(compassCenterX + magneticFieldCenterX,
 800cc66:	4b97      	ldr	r3, [pc, #604]	; (800cec4 <interfaceDrawLayer+0x1fd8>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	5e9b      	ldrsh	r3, [r3, r2]
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	19bb      	adds	r3, r7, r6
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	b298      	uxth	r0, r3
 800cc76:	4b94      	ldr	r3, [pc, #592]	; (800cec8 <interfaceDrawLayer+0x1fdc>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	5e9b      	ldrsh	r3, [r3, r2]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	000c      	movs	r4, r1
 800cc80:	187b      	adds	r3, r7, r1
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	18d3      	adds	r3, r2, r3
 800cc86:	b299      	uxth	r1, r3
 800cc88:	4b8a      	ldr	r3, [pc, #552]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	2301      	movs	r3, #1
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	2303      	movs	r3, #3
 800cc96:	f7f7 fc31 	bl	80044fc <Paint_DrawPoint>
					compassCenterY + magneticFieldCenterY, colorSecond, DOT_PIXEL_3X3,
					DOT_STYLE_DFT);

			Paint_DrawLine(compassX, compassCenterY + magneticFieldY,
 800cc9a:	4b83      	ldr	r3, [pc, #524]	; (800cea8 <interfaceDrawLayer+0x1fbc>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b298      	uxth	r0, r3
 800cca0:	4b8a      	ldr	r3, [pc, #552]	; (800cecc <interfaceDrawLayer+0x1fe0>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	5e9b      	ldrsh	r3, [r3, r2]
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	0025      	movs	r5, r4
 800ccaa:	193b      	adds	r3, r7, r4
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	18d3      	adds	r3, r2, r3
 800ccb0:	b299      	uxth	r1, r3
 800ccb2:	4b7d      	ldr	r3, [pc, #500]	; (800cea8 <interfaceDrawLayer+0x1fbc>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	3330      	adds	r3, #48	; 0x30
 800ccba:	b29c      	uxth	r4, r3
 800ccbc:	4b83      	ldr	r3, [pc, #524]	; (800cecc <interfaceDrawLayer+0x1fe0>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	5e9b      	ldrsh	r3, [r3, r2]
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	197b      	adds	r3, r7, r5
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	18d3      	adds	r3, r2, r3
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	4b79      	ldr	r3, [pc, #484]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	2500      	movs	r5, #0
 800ccd6:	9502      	str	r5, [sp, #8]
 800ccd8:	2501      	movs	r5, #1
 800ccda:	9501      	str	r5, [sp, #4]
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	0013      	movs	r3, r2
 800cce0:	0022      	movs	r2, r4
 800cce2:	f7f7 fcf5 	bl	80046d0 <Paint_DrawLine>
					compassX + 48, compassCenterY + magneticFieldY, colorSecond,
					DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			Paint_DrawLine(compassCenterX + magneticFieldX, compassY,
 800cce6:	4b7a      	ldr	r3, [pc, #488]	; (800ced0 <interfaceDrawLayer+0x1fe4>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	5e9b      	ldrsh	r3, [r3, r2]
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	19bb      	adds	r3, r7, r6
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	18d3      	adds	r3, r2, r3
 800ccf4:	b298      	uxth	r0, r3
 800ccf6:	4b6d      	ldr	r3, [pc, #436]	; (800ceac <interfaceDrawLayer+0x1fc0>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	b299      	uxth	r1, r3
 800ccfc:	4b74      	ldr	r3, [pc, #464]	; (800ced0 <interfaceDrawLayer+0x1fe4>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	5e9b      	ldrsh	r3, [r3, r2]
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	19bb      	adds	r3, r7, r6
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	18d3      	adds	r3, r2, r3
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	4b67      	ldr	r3, [pc, #412]	; (800ceac <interfaceDrawLayer+0x1fc0>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	331d      	adds	r3, #29
 800cd14:	b29c      	uxth	r4, r3
 800cd16:	4b67      	ldr	r3, [pc, #412]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	2500      	movs	r5, #0
 800cd20:	9502      	str	r5, [sp, #8]
 800cd22:	2501      	movs	r5, #1
 800cd24:	9501      	str	r5, [sp, #4]
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	0023      	movs	r3, r4
 800cd2a:	f7f7 fcd1 	bl	80046d0 <Paint_DrawLine>

		}

		//										PRESSURE POINTER

		if (showBarometer == 1) {
 800cd2e:	4b69      	ldr	r3, [pc, #420]	; (800ced4 <interfaceDrawLayer+0x1fe8>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d000      	beq.n	800cd38 <interfaceDrawLayer+0x1e4c>
 800cd36:	e09a      	b.n	800ce6e <interfaceDrawLayer+0x1f82>

			pressureAngle = 2 * 3.14 / 100 * (pressureValue - 950 - 25);
 800cd38:	4b67      	ldr	r3, [pc, #412]	; (800ced8 <interfaceDrawLayer+0x1fec>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a67      	ldr	r2, [pc, #412]	; (800cedc <interfaceDrawLayer+0x1ff0>)
 800cd3e:	4694      	mov	ip, r2
 800cd40:	4463      	add	r3, ip
 800cd42:	0018      	movs	r0, r3
 800cd44:	f7f6 f950 	bl	8002fe8 <__aeabi_ui2d>
 800cd48:	4a65      	ldr	r2, [pc, #404]	; (800cee0 <interfaceDrawLayer+0x1ff4>)
 800cd4a:	4b66      	ldr	r3, [pc, #408]	; (800cee4 <interfaceDrawLayer+0x1ff8>)
 800cd4c:	f7f5 faca 	bl	80022e4 <__aeabi_dmul>
 800cd50:	0002      	movs	r2, r0
 800cd52:	000b      	movs	r3, r1
 800cd54:	0010      	movs	r0, r2
 800cd56:	0019      	movs	r1, r3
 800cd58:	f7f6 f9b4 	bl	80030c4 <__aeabi_d2f>
 800cd5c:	1c02      	adds	r2, r0, #0
 800cd5e:	4b62      	ldr	r3, [pc, #392]	; (800cee8 <interfaceDrawLayer+0x1ffc>)
 800cd60:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, pressureAngle,
 800cd62:	4b62      	ldr	r3, [pc, #392]	; (800ceec <interfaceDrawLayer+0x2000>)
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	b298      	uxth	r0, r3
 800cd68:	4b61      	ldr	r3, [pc, #388]	; (800cef0 <interfaceDrawLayer+0x2004>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	b299      	uxth	r1, r3
 800cd6e:	4b5e      	ldr	r3, [pc, #376]	; (800cee8 <interfaceDrawLayer+0x1ffc>)
 800cd70:	681c      	ldr	r4, [r3, #0]
 800cd72:	4b60      	ldr	r3, [pc, #384]	; (800cef4 <interfaceDrawLayer+0x2008>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b29d      	uxth	r5, r3
 800cd78:	4b5f      	ldr	r3, [pc, #380]	; (800cef8 <interfaceDrawLayer+0x200c>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	4a4d      	ldr	r2, [pc, #308]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800cd80:	7812      	ldrb	r2, [r2, #0]
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	b292      	uxth	r2, r2
 800cd86:	2600      	movs	r6, #0
 800cd88:	9603      	str	r6, [sp, #12]
 800cd8a:	2602      	movs	r6, #2
 800cd8c:	9602      	str	r6, [sp, #8]
 800cd8e:	9201      	str	r2, [sp, #4]
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	002b      	movs	r3, r5
 800cd94:	1c22      	adds	r2, r4, #0
 800cd96:	f7f7 fd79 	bl	800488c <Paint_DrawPointer>
					pressurePointerLength, pressurePointerShift, colorSecond,
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);

			Paint_DrawCircle(
					(cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800cd9a:	4b53      	ldr	r3, [pc, #332]	; (800cee8 <interfaceDrawLayer+0x1ffc>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	1c18      	adds	r0, r3, #0
 800cda0:	f7f6 f948 	bl	8003034 <__aeabi_f2d>
 800cda4:	0002      	movs	r2, r0
 800cda6:	000b      	movs	r3, r1
 800cda8:	0010      	movs	r0, r2
 800cdaa:	0019      	movs	r1, r3
 800cdac:	f004 fe98 	bl	8011ae0 <cos>
 800cdb0:	0004      	movs	r4, r0
 800cdb2:	000d      	movs	r5, r1
 800cdb4:	4b50      	ldr	r3, [pc, #320]	; (800cef8 <interfaceDrawLayer+0x200c>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f7f6 f8e5 	bl	8002f88 <__aeabi_i2d>
 800cdbe:	0002      	movs	r2, r0
 800cdc0:	000b      	movs	r3, r1
 800cdc2:	0020      	movs	r0, r4
 800cdc4:	0029      	movs	r1, r5
 800cdc6:	f7f5 fa8d 	bl	80022e4 <__aeabi_dmul>
 800cdca:	0002      	movs	r2, r0
 800cdcc:	000b      	movs	r3, r1
 800cdce:	0014      	movs	r4, r2
 800cdd0:	001d      	movs	r5, r3
 800cdd2:	4b46      	ldr	r3, [pc, #280]	; (800ceec <interfaceDrawLayer+0x2000>)
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	0018      	movs	r0, r3
 800cdd8:	f7f6 f8d6 	bl	8002f88 <__aeabi_i2d>
 800cddc:	0002      	movs	r2, r0
 800cdde:	000b      	movs	r3, r1
 800cde0:	0020      	movs	r0, r4
 800cde2:	0029      	movs	r1, r5
 800cde4:	f7f4 fb0e 	bl	8001404 <__aeabi_dadd>
 800cde8:	0002      	movs	r2, r0
 800cdea:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800cdec:	0010      	movs	r0, r2
 800cdee:	0019      	movs	r1, r3
 800cdf0:	f7f3 fbe2 	bl	80005b8 <__aeabi_d2uiz>
 800cdf4:	0003      	movs	r3, r0
 800cdf6:	b29e      	uxth	r6, r3
					(sin(pressureAngle) * pressurePointerShift) + mainStartY, 4,
 800cdf8:	4b3b      	ldr	r3, [pc, #236]	; (800cee8 <interfaceDrawLayer+0x1ffc>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1c18      	adds	r0, r3, #0
 800cdfe:	f7f6 f919 	bl	8003034 <__aeabi_f2d>
 800ce02:	0002      	movs	r2, r0
 800ce04:	000b      	movs	r3, r1
 800ce06:	0010      	movs	r0, r2
 800ce08:	0019      	movs	r1, r3
 800ce0a:	f004 feab 	bl	8011b64 <sin>
 800ce0e:	0004      	movs	r4, r0
 800ce10:	000d      	movs	r5, r1
 800ce12:	4b39      	ldr	r3, [pc, #228]	; (800cef8 <interfaceDrawLayer+0x200c>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	0018      	movs	r0, r3
 800ce18:	f7f6 f8b6 	bl	8002f88 <__aeabi_i2d>
 800ce1c:	0002      	movs	r2, r0
 800ce1e:	000b      	movs	r3, r1
 800ce20:	0020      	movs	r0, r4
 800ce22:	0029      	movs	r1, r5
 800ce24:	f7f5 fa5e 	bl	80022e4 <__aeabi_dmul>
 800ce28:	0002      	movs	r2, r0
 800ce2a:	000b      	movs	r3, r1
 800ce2c:	0014      	movs	r4, r2
 800ce2e:	001d      	movs	r5, r3
 800ce30:	4b2f      	ldr	r3, [pc, #188]	; (800cef0 <interfaceDrawLayer+0x2004>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	0018      	movs	r0, r3
 800ce36:	f7f6 f8a7 	bl	8002f88 <__aeabi_i2d>
 800ce3a:	0002      	movs	r2, r0
 800ce3c:	000b      	movs	r3, r1
 800ce3e:	0020      	movs	r0, r4
 800ce40:	0029      	movs	r1, r5
 800ce42:	f7f4 fadf 	bl	8001404 <__aeabi_dadd>
 800ce46:	0002      	movs	r2, r0
 800ce48:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800ce4a:	0010      	movs	r0, r2
 800ce4c:	0019      	movs	r1, r3
 800ce4e:	f7f3 fbb3 	bl	80005b8 <__aeabi_d2uiz>
 800ce52:	0003      	movs	r3, r0
 800ce54:	b299      	uxth	r1, r3
 800ce56:	4b17      	ldr	r3, [pc, #92]	; (800ceb4 <interfaceDrawLayer+0x1fc8>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	2200      	movs	r2, #0
 800ce60:	9201      	str	r2, [sp, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	9200      	str	r2, [sp, #0]
 800ce66:	2204      	movs	r2, #4
 800ce68:	0030      	movs	r0, r6
 800ce6a:	f7f7 fec5 	bl	8004bf8 <Paint_DrawCircle>
			//^ pointer
		}

		//										BATTERY STATE POINTER

		batteryStateAngle = 2 * 3.14 / 28 * (batteryState);
 800ce6e:	4b23      	ldr	r3, [pc, #140]	; (800cefc <interfaceDrawLayer+0x2010>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	0018      	movs	r0, r3
 800ce74:	f7f6 f888 	bl	8002f88 <__aeabi_i2d>
 800ce78:	4a21      	ldr	r2, [pc, #132]	; (800cf00 <interfaceDrawLayer+0x2014>)
 800ce7a:	4b22      	ldr	r3, [pc, #136]	; (800cf04 <interfaceDrawLayer+0x2018>)
 800ce7c:	f7f5 fa32 	bl	80022e4 <__aeabi_dmul>
 800ce80:	0002      	movs	r2, r0
 800ce82:	000b      	movs	r3, r1
 800ce84:	0010      	movs	r0, r2
 800ce86:	0019      	movs	r1, r3
 800ce88:	f7f6 f91c 	bl	80030c4 <__aeabi_d2f>
 800ce8c:	1c02      	adds	r2, r0, #0
 800ce8e:	4b1e      	ldr	r3, [pc, #120]	; (800cf08 <interfaceDrawLayer+0x201c>)
 800ce90:	601a      	str	r2, [r3, #0]

		if (showBatteryState) {
 800ce92:	4b1e      	ldr	r3, [pc, #120]	; (800cf0c <interfaceDrawLayer+0x2020>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d074      	beq.n	800cf84 <interfaceDrawLayer+0x2098>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800ce9a:	2312      	movs	r3, #18
 800ce9c:	18fb      	adds	r3, r7, r3
 800ce9e:	4a17      	ldr	r2, [pc, #92]	; (800cefc <interfaceDrawLayer+0x2010>)
 800cea0:	7812      	ldrb	r2, [r2, #0]
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	e069      	b.n	800cf7a <interfaceDrawLayer+0x208e>
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	200007a5 	.word	0x200007a5
 800ceac:	2000045c 	.word	0x2000045c
 800ceb0:	20000710 	.word	0x20000710
 800ceb4:	20000785 	.word	0x20000785
 800ceb8:	2000034b 	.word	0x2000034b
 800cebc:	20000000 	.word	0x20000000
 800cec0:	2000037d 	.word	0x2000037d
 800cec4:	200006e6 	.word	0x200006e6
 800cec8:	200007b2 	.word	0x200007b2
 800cecc:	20000660 	.word	0x20000660
 800ced0:	200006fa 	.word	0x200006fa
 800ced4:	20000149 	.word	0x20000149
 800ced8:	20000704 	.word	0x20000704
 800cedc:	fffffc31 	.word	0xfffffc31
 800cee0:	2a305533 	.word	0x2a305533
 800cee4:	3fb013a9 	.word	0x3fb013a9
 800cee8:	200007c4 	.word	0x200007c4
 800ceec:	2000045b 	.word	0x2000045b
 800cef0:	2000013a 	.word	0x2000013a
 800cef4:	2000078c 	.word	0x2000078c
 800cef8:	200006fc 	.word	0x200006fc
 800cefc:	200003b8 	.word	0x200003b8
 800cf00:	efe89823 	.word	0xefe89823
 800cf04:	3fccb564 	.word	0x3fccb564
 800cf08:	20000124 	.word	0x20000124
 800cf0c:	200003c8 	.word	0x200003c8
				batteryStateAngle = 2 * 3.14 / 28 * (i);
 800cf10:	2112      	movs	r1, #18
 800cf12:	187b      	adds	r3, r7, r1
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	0018      	movs	r0, r3
 800cf18:	f7f6 f836 	bl	8002f88 <__aeabi_i2d>
 800cf1c:	4a97      	ldr	r2, [pc, #604]	; (800d17c <interfaceDrawLayer+0x2290>)
 800cf1e:	4b98      	ldr	r3, [pc, #608]	; (800d180 <interfaceDrawLayer+0x2294>)
 800cf20:	f7f5 f9e0 	bl	80022e4 <__aeabi_dmul>
 800cf24:	0002      	movs	r2, r0
 800cf26:	000b      	movs	r3, r1
 800cf28:	0010      	movs	r0, r2
 800cf2a:	0019      	movs	r1, r3
 800cf2c:	f7f6 f8ca 	bl	80030c4 <__aeabi_d2f>
 800cf30:	1c02      	adds	r2, r0, #0
 800cf32:	4b94      	ldr	r3, [pc, #592]	; (800d184 <interfaceDrawLayer+0x2298>)
 800cf34:	601a      	str	r2, [r3, #0]

				Paint_DrawPointer(batteryStateStartX, batteryStateStartY,
 800cf36:	4b94      	ldr	r3, [pc, #592]	; (800d188 <interfaceDrawLayer+0x229c>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	b298      	uxth	r0, r3
 800cf3c:	4b93      	ldr	r3, [pc, #588]	; (800d18c <interfaceDrawLayer+0x22a0>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	b299      	uxth	r1, r3
 800cf42:	4b90      	ldr	r3, [pc, #576]	; (800d184 <interfaceDrawLayer+0x2298>)
 800cf44:	681c      	ldr	r4, [r3, #0]
 800cf46:	4b92      	ldr	r3, [pc, #584]	; (800d190 <interfaceDrawLayer+0x22a4>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	b29d      	uxth	r5, r3
 800cf4c:	4b91      	ldr	r3, [pc, #580]	; (800d194 <interfaceDrawLayer+0x22a8>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4a91      	ldr	r2, [pc, #580]	; (800d198 <interfaceDrawLayer+0x22ac>)
 800cf54:	7812      	ldrb	r2, [r2, #0]
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	2600      	movs	r6, #0
 800cf5c:	9603      	str	r6, [sp, #12]
 800cf5e:	2601      	movs	r6, #1
 800cf60:	9602      	str	r6, [sp, #8]
 800cf62:	9201      	str	r2, [sp, #4]
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	002b      	movs	r3, r5
 800cf68:	1c22      	adds	r2, r4, #0
 800cf6a:	f7f7 fc8f 	bl	800488c <Paint_DrawPointer>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800cf6e:	2112      	movs	r1, #18
 800cf70:	187b      	adds	r3, r7, r1
 800cf72:	781a      	ldrb	r2, [r3, #0]
 800cf74:	187b      	adds	r3, r7, r1
 800cf76:	3201      	adds	r2, #1
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	2312      	movs	r3, #18
 800cf7c:	18fb      	adds	r3, r7, r3
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	2b07      	cmp	r3, #7
 800cf82:	d9c5      	bls.n	800cf10 <interfaceDrawLayer+0x2024>

		}

		//										HOUR POINTER

		hourAngle = 2 * 3.14 / 60 * ((hours12 * 5 + (minutes / 10)) - 15);
 800cf84:	4b85      	ldr	r3, [pc, #532]	; (800d19c <interfaceDrawLayer+0x22b0>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	b25b      	sxtb	r3, r3
 800cf8a:	001a      	movs	r2, r3
 800cf8c:	0013      	movs	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	189c      	adds	r4, r3, r2
 800cf92:	4b83      	ldr	r3, [pc, #524]	; (800d1a0 <interfaceDrawLayer+0x22b4>)
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	b21b      	sxth	r3, r3
 800cf98:	210a      	movs	r1, #10
 800cf9a:	0018      	movs	r0, r3
 800cf9c:	f7f3 f944 	bl	8000228 <__divsi3>
 800cfa0:	0003      	movs	r3, r0
 800cfa2:	b21b      	sxth	r3, r3
 800cfa4:	18e3      	adds	r3, r4, r3
 800cfa6:	3b0f      	subs	r3, #15
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	f7f5 ffed 	bl	8002f88 <__aeabi_i2d>
 800cfae:	4a7d      	ldr	r2, [pc, #500]	; (800d1a4 <interfaceDrawLayer+0x22b8>)
 800cfb0:	4b7d      	ldr	r3, [pc, #500]	; (800d1a8 <interfaceDrawLayer+0x22bc>)
 800cfb2:	f7f5 f997 	bl	80022e4 <__aeabi_dmul>
 800cfb6:	0002      	movs	r2, r0
 800cfb8:	000b      	movs	r3, r1
 800cfba:	0010      	movs	r0, r2
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	f7f6 f881 	bl	80030c4 <__aeabi_d2f>
 800cfc2:	1c02      	adds	r2, r0, #0
 800cfc4:	4b79      	ldr	r3, [pc, #484]	; (800d1ac <interfaceDrawLayer+0x22c0>)
 800cfc6:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800cfc8:	4b79      	ldr	r3, [pc, #484]	; (800d1b0 <interfaceDrawLayer+0x22c4>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	4b79      	ldr	r3, [pc, #484]	; (800d1b4 <interfaceDrawLayer+0x22c8>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	18d3      	adds	r3, r2, r3
 800cfd6:	b298      	uxth	r0, r3
 800cfd8:	4b77      	ldr	r3, [pc, #476]	; (800d1b8 <interfaceDrawLayer+0x22cc>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	4b75      	ldr	r3, [pc, #468]	; (800d1b4 <interfaceDrawLayer+0x22c8>)
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	18d3      	adds	r3, r2, r3
 800cfe6:	b299      	uxth	r1, r3
 800cfe8:	4b70      	ldr	r3, [pc, #448]	; (800d1ac <interfaceDrawLayer+0x22c0>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	4b73      	ldr	r3, [pc, #460]	; (800d1bc <interfaceDrawLayer+0x22d0>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	b29c      	uxth	r4, r3
 800cff2:	4b73      	ldr	r3, [pc, #460]	; (800d1c0 <interfaceDrawLayer+0x22d4>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	2500      	movs	r5, #0
 800cffc:	9503      	str	r5, [sp, #12]
 800cffe:	2503      	movs	r5, #3
 800d000:	9502      	str	r5, [sp, #8]
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	230a      	movs	r3, #10
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	0023      	movs	r3, r4
 800d00a:	f7f7 fc3f 	bl	800488c <Paint_DrawPointer>
				mainStartY + pointerShadowShift, hourAngle, hourPointerLength,
				10, colorMain, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, hourAngle, hourPointerLength,
 800d00e:	4b68      	ldr	r3, [pc, #416]	; (800d1b0 <interfaceDrawLayer+0x22c4>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	b298      	uxth	r0, r3
 800d014:	4b68      	ldr	r3, [pc, #416]	; (800d1b8 <interfaceDrawLayer+0x22cc>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	b299      	uxth	r1, r3
 800d01a:	4b64      	ldr	r3, [pc, #400]	; (800d1ac <interfaceDrawLayer+0x22c0>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b67      	ldr	r3, [pc, #412]	; (800d1bc <interfaceDrawLayer+0x22d0>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	b29c      	uxth	r4, r3
 800d024:	4b5c      	ldr	r3, [pc, #368]	; (800d198 <interfaceDrawLayer+0x22ac>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	2500      	movs	r5, #0
 800d02e:	9503      	str	r5, [sp, #12]
 800d030:	2503      	movs	r5, #3
 800d032:	9502      	str	r5, [sp, #8]
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	230a      	movs	r3, #10
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	0023      	movs	r3, r4
 800d03c:	f7f7 fc26 	bl	800488c <Paint_DrawPointer>
				10, colorSecond, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^ pointer

		//										MINUTE POINTER

		minuteAngle = 2 * 3.14 / 60 * (minutes - 15);
 800d040:	4b57      	ldr	r3, [pc, #348]	; (800d1a0 <interfaceDrawLayer+0x22b4>)
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	b21b      	sxth	r3, r3
 800d046:	3b0f      	subs	r3, #15
 800d048:	0018      	movs	r0, r3
 800d04a:	f7f5 ff9d 	bl	8002f88 <__aeabi_i2d>
 800d04e:	4a55      	ldr	r2, [pc, #340]	; (800d1a4 <interfaceDrawLayer+0x22b8>)
 800d050:	4b55      	ldr	r3, [pc, #340]	; (800d1a8 <interfaceDrawLayer+0x22bc>)
 800d052:	f7f5 f947 	bl	80022e4 <__aeabi_dmul>
 800d056:	0002      	movs	r2, r0
 800d058:	000b      	movs	r3, r1
 800d05a:	0010      	movs	r0, r2
 800d05c:	0019      	movs	r1, r3
 800d05e:	f7f6 f831 	bl	80030c4 <__aeabi_d2f>
 800d062:	1c02      	adds	r2, r0, #0
 800d064:	4b57      	ldr	r3, [pc, #348]	; (800d1c4 <interfaceDrawLayer+0x22d8>)
 800d066:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800d068:	4b51      	ldr	r3, [pc, #324]	; (800d1b0 <interfaceDrawLayer+0x22c4>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	4b51      	ldr	r3, [pc, #324]	; (800d1b4 <interfaceDrawLayer+0x22c8>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b29b      	uxth	r3, r3
 800d074:	18d3      	adds	r3, r2, r3
 800d076:	b298      	uxth	r0, r3
 800d078:	4b4f      	ldr	r3, [pc, #316]	; (800d1b8 <interfaceDrawLayer+0x22cc>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	4b4d      	ldr	r3, [pc, #308]	; (800d1b4 <interfaceDrawLayer+0x22c8>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	b29b      	uxth	r3, r3
 800d084:	18d3      	adds	r3, r2, r3
 800d086:	b299      	uxth	r1, r3
 800d088:	4b4e      	ldr	r3, [pc, #312]	; (800d1c4 <interfaceDrawLayer+0x22d8>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	4b4e      	ldr	r3, [pc, #312]	; (800d1c8 <interfaceDrawLayer+0x22dc>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	b29c      	uxth	r4, r3
 800d092:	4b4b      	ldr	r3, [pc, #300]	; (800d1c0 <interfaceDrawLayer+0x22d4>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	b2db      	uxtb	r3, r3
 800d098:	b29b      	uxth	r3, r3
 800d09a:	2500      	movs	r5, #0
 800d09c:	9503      	str	r5, [sp, #12]
 800d09e:	2502      	movs	r5, #2
 800d0a0:	9502      	str	r5, [sp, #8]
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	230a      	movs	r3, #10
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	0023      	movs	r3, r4
 800d0aa:	f7f7 fbef 	bl	800488c <Paint_DrawPointer>
				mainStartY + pointerShadowShift, minuteAngle,
				minutePointerLength, 10, colorMain, DOT_PIXEL_2X2,
				LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, minuteAngle,
 800d0ae:	4b40      	ldr	r3, [pc, #256]	; (800d1b0 <interfaceDrawLayer+0x22c4>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	b298      	uxth	r0, r3
 800d0b4:	4b40      	ldr	r3, [pc, #256]	; (800d1b8 <interfaceDrawLayer+0x22cc>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	b299      	uxth	r1, r3
 800d0ba:	4b42      	ldr	r3, [pc, #264]	; (800d1c4 <interfaceDrawLayer+0x22d8>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	4b42      	ldr	r3, [pc, #264]	; (800d1c8 <interfaceDrawLayer+0x22dc>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	b29c      	uxth	r4, r3
 800d0c4:	4b34      	ldr	r3, [pc, #208]	; (800d198 <interfaceDrawLayer+0x22ac>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	2500      	movs	r5, #0
 800d0ce:	9503      	str	r5, [sp, #12]
 800d0d0:	2502      	movs	r5, #2
 800d0d2:	9502      	str	r5, [sp, #8]
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	230a      	movs	r3, #10
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	0023      	movs	r3, r4
 800d0dc:	f7f7 fbd6 	bl	800488c <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		//^ pointer

		//										CHRONO MINUTE POINTER

		if (showChrono == 1) {
 800d0e0:	4b3a      	ldr	r3, [pc, #232]	; (800d1cc <interfaceDrawLayer+0x22e0>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d000      	beq.n	800d0ea <interfaceDrawLayer+0x21fe>
 800d0e8:	e0aa      	b.n	800d240 <interfaceDrawLayer+0x2354>

			chronoMinutesAngle = 2 * 3.14 / 30 * (chronoMinutes - 7.5);
 800d0ea:	4b39      	ldr	r3, [pc, #228]	; (800d1d0 <interfaceDrawLayer+0x22e4>)
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	b21b      	sxth	r3, r3
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f7f5 ff49 	bl	8002f88 <__aeabi_i2d>
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	4b36      	ldr	r3, [pc, #216]	; (800d1d4 <interfaceDrawLayer+0x22e8>)
 800d0fa:	f7f5 fb5f 	bl	80027bc <__aeabi_dsub>
 800d0fe:	0002      	movs	r2, r0
 800d100:	000b      	movs	r3, r1
 800d102:	0010      	movs	r0, r2
 800d104:	0019      	movs	r1, r3
 800d106:	4a27      	ldr	r2, [pc, #156]	; (800d1a4 <interfaceDrawLayer+0x22b8>)
 800d108:	4b33      	ldr	r3, [pc, #204]	; (800d1d8 <interfaceDrawLayer+0x22ec>)
 800d10a:	f7f5 f8eb 	bl	80022e4 <__aeabi_dmul>
 800d10e:	0002      	movs	r2, r0
 800d110:	000b      	movs	r3, r1
 800d112:	0010      	movs	r0, r2
 800d114:	0019      	movs	r1, r3
 800d116:	f7f5 ffd5 	bl	80030c4 <__aeabi_d2f>
 800d11a:	1c02      	adds	r2, r0, #0
 800d11c:	4b2f      	ldr	r3, [pc, #188]	; (800d1dc <interfaceDrawLayer+0x22f0>)
 800d11e:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoMinutesStartX, chronoMinutesStartY,
 800d120:	4b2f      	ldr	r3, [pc, #188]	; (800d1e0 <interfaceDrawLayer+0x22f4>)
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	b298      	uxth	r0, r3
 800d126:	4b2f      	ldr	r3, [pc, #188]	; (800d1e4 <interfaceDrawLayer+0x22f8>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b299      	uxth	r1, r3
 800d12c:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <interfaceDrawLayer+0x22f0>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	4b2d      	ldr	r3, [pc, #180]	; (800d1e8 <interfaceDrawLayer+0x22fc>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	b29c      	uxth	r4, r3
 800d136:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <interfaceDrawLayer+0x22d4>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	2500      	movs	r5, #0
 800d140:	9503      	str	r5, [sp, #12]
 800d142:	2501      	movs	r5, #1
 800d144:	9502      	str	r5, [sp, #8]
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	2300      	movs	r3, #0
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	0023      	movs	r3, r4
 800d14e:	f7f7 fb9d 	bl	800488c <Paint_DrawPointer>
					chronoMinutesAngle, chronoMinutesPointerLength, 0,
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			//										CHRONO HALF HOURS DOTS

			for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <interfaceDrawLayer+0x2300>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	b25b      	sxtb	r3, r3
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	18db      	adds	r3, r3, r3
 800d15c:	b2dc      	uxtb	r4, r3
 800d15e:	4b1c      	ldr	r3, [pc, #112]	; (800d1d0 <interfaceDrawLayer+0x22e4>)
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	b21b      	sxth	r3, r3
 800d164:	211e      	movs	r1, #30
 800d166:	0018      	movs	r0, r3
 800d168:	f7f3 f85e 	bl	8000228 <__divsi3>
 800d16c:	0003      	movs	r3, r0
 800d16e:	b21b      	sxth	r3, r3
 800d170:	b2da      	uxtb	r2, r3
 800d172:	2311      	movs	r3, #17
 800d174:	18fb      	adds	r3, r7, r3
 800d176:	18a2      	adds	r2, r4, r2
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	e05c      	b.n	800d236 <interfaceDrawLayer+0x234a>
 800d17c:	efe89823 	.word	0xefe89823
 800d180:	3fccb564 	.word	0x3fccb564
 800d184:	20000124 	.word	0x20000124
 800d188:	20000775 	.word	0x20000775
 800d18c:	200007d0 	.word	0x200007d0
 800d190:	200004c5 	.word	0x200004c5
 800d194:	20000148 	.word	0x20000148
 800d198:	20000785 	.word	0x20000785
 800d19c:	2000013b 	.word	0x2000013b
 800d1a0:	200007b8 	.word	0x200007b8
 800d1a4:	46508dff 	.word	0x46508dff
 800d1a8:	3fbacb6f 	.word	0x3fbacb6f
 800d1ac:	20000798 	.word	0x20000798
 800d1b0:	2000045b 	.word	0x2000045b
 800d1b4:	20000141 	.word	0x20000141
 800d1b8:	2000013a 	.word	0x2000013a
 800d1bc:	20000143 	.word	0x20000143
 800d1c0:	2000034b 	.word	0x2000034b
 800d1c4:	200006ec 	.word	0x200006ec
 800d1c8:	2000076b 	.word	0x2000076b
 800d1cc:	200003c0 	.word	0x200003c0
 800d1d0:	200007b6 	.word	0x200007b6
 800d1d4:	401e0000 	.word	0x401e0000
 800d1d8:	3fcacb6f 	.word	0x3fcacb6f
 800d1dc:	20000790 	.word	0x20000790
 800d1e0:	200007ae 	.word	0x200007ae
 800d1e4:	20000786 	.word	0x20000786
 800d1e8:	20000140 	.word	0x20000140
 800d1ec:	200003c5 	.word	0x200003c5
					halfHours > 0; halfHours--) {
				Paint_DrawPoint(
						chronoMinutesStartX - chronoMinutesPointerLength
 800d1f0:	4b97      	ldr	r3, [pc, #604]	; (800d450 <interfaceDrawLayer+0x2564>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	4b97      	ldr	r3, [pc, #604]	; (800d454 <interfaceDrawLayer+0x2568>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	b29a      	uxth	r2, r3
				Paint_DrawPoint(
 800d200:	2411      	movs	r4, #17
 800d202:	193b      	adds	r3, r7, r4
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	18d3      	adds	r3, r2, r3
 800d20e:	b298      	uxth	r0, r3
 800d210:	4b91      	ldr	r3, [pc, #580]	; (800d458 <interfaceDrawLayer+0x256c>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b05      	subs	r3, #5
 800d218:	b299      	uxth	r1, r3
 800d21a:	4b90      	ldr	r3, [pc, #576]	; (800d45c <interfaceDrawLayer+0x2570>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	b29a      	uxth	r2, r3
 800d222:	2301      	movs	r3, #1
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	2302      	movs	r3, #2
 800d228:	f7f7 f968 	bl	80044fc <Paint_DrawPoint>
					halfHours > 0; halfHours--) {
 800d22c:	193b      	adds	r3, r7, r4
 800d22e:	781a      	ldrb	r2, [r3, #0]
 800d230:	193b      	adds	r3, r7, r4
 800d232:	3a01      	subs	r2, #1
 800d234:	701a      	strb	r2, [r3, #0]
			for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d236:	2311      	movs	r3, #17
 800d238:	18fb      	adds	r3, r7, r3
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1d7      	bne.n	800d1f0 <interfaceDrawLayer+0x2304>

		}

		//										SECONDS POINTER

		secondAngle = 2 * 3.14 / 60 * (seconds - 15);
 800d240:	4b87      	ldr	r3, [pc, #540]	; (800d460 <interfaceDrawLayer+0x2574>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	b25b      	sxtb	r3, r3
 800d246:	3b0f      	subs	r3, #15
 800d248:	0018      	movs	r0, r3
 800d24a:	f7f5 fe9d 	bl	8002f88 <__aeabi_i2d>
 800d24e:	4a85      	ldr	r2, [pc, #532]	; (800d464 <interfaceDrawLayer+0x2578>)
 800d250:	4b85      	ldr	r3, [pc, #532]	; (800d468 <interfaceDrawLayer+0x257c>)
 800d252:	f7f5 f847 	bl	80022e4 <__aeabi_dmul>
 800d256:	0002      	movs	r2, r0
 800d258:	000b      	movs	r3, r1
 800d25a:	0010      	movs	r0, r2
 800d25c:	0019      	movs	r1, r3
 800d25e:	f7f5 ff31 	bl	80030c4 <__aeabi_d2f>
 800d262:	1c02      	adds	r2, r0, #0
 800d264:	4b81      	ldr	r3, [pc, #516]	; (800d46c <interfaceDrawLayer+0x2580>)
 800d266:	601a      	str	r2, [r3, #0]

		if (showSeconds == 1) {
 800d268:	4b81      	ldr	r3, [pc, #516]	; (800d470 <interfaceDrawLayer+0x2584>)
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d118      	bne.n	800d2a2 <interfaceDrawLayer+0x23b6>
			Paint_DrawPointer(secondsStartX, secondsStartY, secondAngle,
 800d270:	4b80      	ldr	r3, [pc, #512]	; (800d474 <interfaceDrawLayer+0x2588>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b298      	uxth	r0, r3
 800d276:	4b80      	ldr	r3, [pc, #512]	; (800d478 <interfaceDrawLayer+0x258c>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b299      	uxth	r1, r3
 800d27c:	4b7b      	ldr	r3, [pc, #492]	; (800d46c <interfaceDrawLayer+0x2580>)
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	4b7e      	ldr	r3, [pc, #504]	; (800d47c <interfaceDrawLayer+0x2590>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	b29c      	uxth	r4, r3
 800d286:	4b75      	ldr	r3, [pc, #468]	; (800d45c <interfaceDrawLayer+0x2570>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	2500      	movs	r5, #0
 800d290:	9503      	str	r5, [sp, #12]
 800d292:	2501      	movs	r5, #1
 800d294:	9502      	str	r5, [sp, #8]
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	2300      	movs	r3, #0
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	0023      	movs	r3, r4
 800d29e:	f7f7 faf5 	bl	800488c <Paint_DrawPointer>
			//^pointer
		}

		//										CHRONO SECOND POINTER

		if (showChrono == 1) {
 800d2a2:	4b77      	ldr	r3, [pc, #476]	; (800d480 <interfaceDrawLayer+0x2594>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d14f      	bne.n	800d34a <interfaceDrawLayer+0x245e>

			chronoSecondsAngle = 2 * 3.14 / 60 * (chronoSeconds - 15);
 800d2aa:	4b76      	ldr	r3, [pc, #472]	; (800d484 <interfaceDrawLayer+0x2598>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b25b      	sxtb	r3, r3
 800d2b0:	3b0f      	subs	r3, #15
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	f7f5 fe68 	bl	8002f88 <__aeabi_i2d>
 800d2b8:	4a6a      	ldr	r2, [pc, #424]	; (800d464 <interfaceDrawLayer+0x2578>)
 800d2ba:	4b6b      	ldr	r3, [pc, #428]	; (800d468 <interfaceDrawLayer+0x257c>)
 800d2bc:	f7f5 f812 	bl	80022e4 <__aeabi_dmul>
 800d2c0:	0002      	movs	r2, r0
 800d2c2:	000b      	movs	r3, r1
 800d2c4:	0010      	movs	r0, r2
 800d2c6:	0019      	movs	r1, r3
 800d2c8:	f7f5 fefc 	bl	80030c4 <__aeabi_d2f>
 800d2cc:	1c02      	adds	r2, r0, #0
 800d2ce:	4b6e      	ldr	r3, [pc, #440]	; (800d488 <interfaceDrawLayer+0x259c>)
 800d2d0:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, chronoSecondsAngle,
 800d2d2:	4b6e      	ldr	r3, [pc, #440]	; (800d48c <interfaceDrawLayer+0x25a0>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	b298      	uxth	r0, r3
 800d2d8:	4b6d      	ldr	r3, [pc, #436]	; (800d490 <interfaceDrawLayer+0x25a4>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b299      	uxth	r1, r3
 800d2de:	4b6a      	ldr	r3, [pc, #424]	; (800d488 <interfaceDrawLayer+0x259c>)
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	4b6c      	ldr	r3, [pc, #432]	; (800d494 <interfaceDrawLayer+0x25a8>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	b29c      	uxth	r4, r3
 800d2e8:	4b6b      	ldr	r3, [pc, #428]	; (800d498 <interfaceDrawLayer+0x25ac>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	2500      	movs	r5, #0
 800d2f2:	9503      	str	r5, [sp, #12]
 800d2f4:	2501      	movs	r5, #1
 800d2f6:	9502      	str	r5, [sp, #8]
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	230a      	movs	r3, #10
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	0023      	movs	r3, r4
 800d300:	f7f7 fac4 	bl	800488c <Paint_DrawPointer>
					chronoSecondsPointerLength, 10, colorSecond, DOT_PIXEL_1X1,
					LINE_STYLE_SOLID);
			//^ pointer

			Paint_DrawPointer(mainStartX + pointerShadowShift,
 800d304:	4b61      	ldr	r3, [pc, #388]	; (800d48c <interfaceDrawLayer+0x25a0>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b29a      	uxth	r2, r3
 800d30a:	4b64      	ldr	r3, [pc, #400]	; (800d49c <interfaceDrawLayer+0x25b0>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	18d3      	adds	r3, r2, r3
 800d312:	b298      	uxth	r0, r3
 800d314:	4b5e      	ldr	r3, [pc, #376]	; (800d490 <interfaceDrawLayer+0x25a4>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	b29a      	uxth	r2, r3
 800d31a:	4b60      	ldr	r3, [pc, #384]	; (800d49c <interfaceDrawLayer+0x25b0>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	18d3      	adds	r3, r2, r3
 800d322:	b299      	uxth	r1, r3
 800d324:	4b58      	ldr	r3, [pc, #352]	; (800d488 <interfaceDrawLayer+0x259c>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	4b5a      	ldr	r3, [pc, #360]	; (800d494 <interfaceDrawLayer+0x25a8>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b29c      	uxth	r4, r3
 800d32e:	4b4b      	ldr	r3, [pc, #300]	; (800d45c <interfaceDrawLayer+0x2570>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	b2db      	uxtb	r3, r3
 800d334:	b29b      	uxth	r3, r3
 800d336:	2500      	movs	r5, #0
 800d338:	9503      	str	r5, [sp, #12]
 800d33a:	2501      	movs	r5, #1
 800d33c:	9502      	str	r5, [sp, #8]
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	230a      	movs	r3, #10
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	0023      	movs	r3, r4
 800d346:	f7f7 faa1 	bl	800488c <Paint_DrawPointer>
			//^shadow
		}

		//										CHRONO DECIMAL POINTER

		if (showChrono == 1) {
 800d34a:	4b4d      	ldr	r3, [pc, #308]	; (800d480 <interfaceDrawLayer+0x2594>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d132      	bne.n	800d3b8 <interfaceDrawLayer+0x24cc>

			chronoDecimalsAngle = 2 * 3.14 / 10 * (chronoDecimals - 2.5);
 800d352:	4b53      	ldr	r3, [pc, #332]	; (800d4a0 <interfaceDrawLayer+0x25b4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	0018      	movs	r0, r3
 800d358:	f7f5 fe16 	bl	8002f88 <__aeabi_i2d>
 800d35c:	2200      	movs	r2, #0
 800d35e:	4b51      	ldr	r3, [pc, #324]	; (800d4a4 <interfaceDrawLayer+0x25b8>)
 800d360:	f7f5 fa2c 	bl	80027bc <__aeabi_dsub>
 800d364:	0002      	movs	r2, r0
 800d366:	000b      	movs	r3, r1
 800d368:	0010      	movs	r0, r2
 800d36a:	0019      	movs	r1, r3
 800d36c:	4a4e      	ldr	r2, [pc, #312]	; (800d4a8 <interfaceDrawLayer+0x25bc>)
 800d36e:	4b4f      	ldr	r3, [pc, #316]	; (800d4ac <interfaceDrawLayer+0x25c0>)
 800d370:	f7f4 ffb8 	bl	80022e4 <__aeabi_dmul>
 800d374:	0002      	movs	r2, r0
 800d376:	000b      	movs	r3, r1
 800d378:	0010      	movs	r0, r2
 800d37a:	0019      	movs	r1, r3
 800d37c:	f7f5 fea2 	bl	80030c4 <__aeabi_d2f>
 800d380:	1c02      	adds	r2, r0, #0
 800d382:	4b4b      	ldr	r3, [pc, #300]	; (800d4b0 <interfaceDrawLayer+0x25c4>)
 800d384:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoDecimalsStartX, chronoDecimalsStartY,
 800d386:	4b4b      	ldr	r3, [pc, #300]	; (800d4b4 <interfaceDrawLayer+0x25c8>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	b298      	uxth	r0, r3
 800d38c:	4b4a      	ldr	r3, [pc, #296]	; (800d4b8 <interfaceDrawLayer+0x25cc>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	b299      	uxth	r1, r3
 800d392:	4b47      	ldr	r3, [pc, #284]	; (800d4b0 <interfaceDrawLayer+0x25c4>)
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4b49      	ldr	r3, [pc, #292]	; (800d4bc <interfaceDrawLayer+0x25d0>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	b29c      	uxth	r4, r3
 800d39c:	4b2f      	ldr	r3, [pc, #188]	; (800d45c <interfaceDrawLayer+0x2570>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	9503      	str	r5, [sp, #12]
 800d3a8:	2501      	movs	r5, #1
 800d3aa:	9502      	str	r5, [sp, #8]
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	0023      	movs	r3, r4
 800d3b4:	f7f7 fa6a 	bl	800488c <Paint_DrawPointer>
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
		}

		//										DATE

		if (showDate == 1) {
 800d3b8:	4b41      	ldr	r3, [pc, #260]	; (800d4c0 <interfaceDrawLayer+0x25d4>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d118      	bne.n	800d3f2 <interfaceDrawLayer+0x2506>
			Paint_DrawNum(dateX, dateY, day, &Font12, colorSecond, colorMain); //date
 800d3c0:	4b40      	ldr	r3, [pc, #256]	; (800d4c4 <interfaceDrawLayer+0x25d8>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	b298      	uxth	r0, r3
 800d3c6:	4b40      	ldr	r3, [pc, #256]	; (800d4c8 <interfaceDrawLayer+0x25dc>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b299      	uxth	r1, r3
 800d3cc:	4b3f      	ldr	r3, [pc, #252]	; (800d4cc <interfaceDrawLayer+0x25e0>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	001d      	movs	r5, r3
 800d3d4:	4b30      	ldr	r3, [pc, #192]	; (800d498 <interfaceDrawLayer+0x25ac>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4a1f      	ldr	r2, [pc, #124]	; (800d45c <interfaceDrawLayer+0x2570>)
 800d3de:	7812      	ldrb	r2, [r2, #0]
 800d3e0:	b2d2      	uxtb	r2, r2
 800d3e2:	b292      	uxth	r2, r2
 800d3e4:	4c3a      	ldr	r4, [pc, #232]	; (800d4d0 <interfaceDrawLayer+0x25e4>)
 800d3e6:	9201      	str	r2, [sp, #4]
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	0023      	movs	r3, r4
 800d3ec:	002a      	movs	r2, r5
 800d3ee:	f7f7 ffb7 	bl	8005360 <Paint_DrawNum>
		}

		//										LOCK INDICATOR
		if (flagLocked == LOCKED) {
 800d3f2:	4b38      	ldr	r3, [pc, #224]	; (800d4d4 <interfaceDrawLayer+0x25e8>)
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d111      	bne.n	800d420 <interfaceDrawLayer+0x2534>
			Paint_DrawCircle(mainStartX, mainStartY, 10, colorSecond,
 800d3fc:	4b23      	ldr	r3, [pc, #140]	; (800d48c <interfaceDrawLayer+0x25a0>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	b298      	uxth	r0, r3
 800d402:	4b23      	ldr	r3, [pc, #140]	; (800d490 <interfaceDrawLayer+0x25a4>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b299      	uxth	r1, r3
 800d408:	4b23      	ldr	r3, [pc, #140]	; (800d498 <interfaceDrawLayer+0x25ac>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	b29b      	uxth	r3, r3
 800d410:	2201      	movs	r2, #1
 800d412:	9201      	str	r2, [sp, #4]
 800d414:	2202      	movs	r2, #2
 800d416:	9200      	str	r2, [sp, #0]
 800d418:	220a      	movs	r2, #10
 800d41a:	f7f7 fbed 	bl	8004bf8 <Paint_DrawCircle>
					DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

	}

}
 800d41e:	e010      	b.n	800d442 <interfaceDrawLayer+0x2556>
			Paint_DrawCircle(mainStartX, mainStartY, 10, colorSecond,
 800d420:	4b1a      	ldr	r3, [pc, #104]	; (800d48c <interfaceDrawLayer+0x25a0>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	b298      	uxth	r0, r3
 800d426:	4b1a      	ldr	r3, [pc, #104]	; (800d490 <interfaceDrawLayer+0x25a4>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	b299      	uxth	r1, r3
 800d42c:	4b1a      	ldr	r3, [pc, #104]	; (800d498 <interfaceDrawLayer+0x25ac>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	b29b      	uxth	r3, r3
 800d434:	2200      	movs	r2, #0
 800d436:	9201      	str	r2, [sp, #4]
 800d438:	2202      	movs	r2, #2
 800d43a:	9200      	str	r2, [sp, #0]
 800d43c:	220a      	movs	r2, #10
 800d43e:	f7f7 fbdb 	bl	8004bf8 <Paint_DrawCircle>
}
 800d442:	46c0      	nop			; (mov r8, r8)
 800d444:	46bd      	mov	sp, r7
 800d446:	b007      	add	sp, #28
 800d448:	bcc0      	pop	{r6, r7}
 800d44a:	46b9      	mov	r9, r7
 800d44c:	46b0      	mov	r8, r6
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d450:	200007ae 	.word	0x200007ae
 800d454:	20000140 	.word	0x20000140
 800d458:	20000786 	.word	0x20000786
 800d45c:	2000034b 	.word	0x2000034b
 800d460:	2000076a 	.word	0x2000076a
 800d464:	46508dff 	.word	0x46508dff
 800d468:	3fbacb6f 	.word	0x3fbacb6f
 800d46c:	200007a0 	.word	0x200007a0
 800d470:	20000132 	.word	0x20000132
 800d474:	200007a7 	.word	0x200007a7
 800d478:	2000038a 	.word	0x2000038a
 800d47c:	20000769 	.word	0x20000769
 800d480:	200003c0 	.word	0x200003c0
 800d484:	20000776 	.word	0x20000776
 800d488:	20000788 	.word	0x20000788
 800d48c:	2000045b 	.word	0x2000045b
 800d490:	2000013a 	.word	0x2000013a
 800d494:	200003c9 	.word	0x200003c9
 800d498:	20000785 	.word	0x20000785
 800d49c:	20000141 	.word	0x20000141
 800d4a0:	20000144 	.word	0x20000144
 800d4a4:	40040000 	.word	0x40040000
 800d4a8:	74bc6a7f 	.word	0x74bc6a7f
 800d4ac:	3fe41893 	.word	0x3fe41893
 800d4b0:	20000380 	.word	0x20000380
 800d4b4:	20000718 	.word	0x20000718
 800d4b8:	20000719 	.word	0x20000719
 800d4bc:	200007c2 	.word	0x200007c2
 800d4c0:	20000142 	.word	0x20000142
 800d4c4:	200007b4 	.word	0x200007b4
 800d4c8:	200001b0 	.word	0x200001b0
 800d4cc:	20000778 	.word	0x20000778
 800d4d0:	20000000 	.word	0x20000000
 800d4d4:	200004c7 	.word	0x200004c7

0800d4d8 <interfaceDrawBatteryWarning>:

void interfaceDrawBatteryWarning() {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af02      	add	r7, sp, #8
	Paint_DrawString_EN(105, 90, "CHARGE", &Font16, colorSecond, colorMain);
 800d4de:	4b0a      	ldr	r3, [pc, #40]	; (800d508 <interfaceDrawBatteryWarning+0x30>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4a09      	ldr	r2, [pc, #36]	; (800d50c <interfaceDrawBatteryWarning+0x34>)
 800d4e8:	7812      	ldrb	r2, [r2, #0]
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	b292      	uxth	r2, r2
 800d4ee:	4808      	ldr	r0, [pc, #32]	; (800d510 <interfaceDrawBatteryWarning+0x38>)
 800d4f0:	4908      	ldr	r1, [pc, #32]	; (800d514 <interfaceDrawBatteryWarning+0x3c>)
 800d4f2:	9201      	str	r2, [sp, #4]
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	0003      	movs	r3, r0
 800d4f8:	000a      	movs	r2, r1
 800d4fa:	215a      	movs	r1, #90	; 0x5a
 800d4fc:	2069      	movs	r0, #105	; 0x69
 800d4fe:	f7f7 feb1 	bl	8005264 <Paint_DrawString_EN>
}
 800d502:	46c0      	nop			; (mov r8, r8)
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20000785 	.word	0x20000785
 800d50c:	2000034b 	.word	0x2000034b
 800d510:	20000008 	.word	0x20000008
 800d514:	080133e8 	.word	0x080133e8

0800d518 <rtcInit>:
#include "main.h"
#include "../RTC/rtc.h"
#include <stdint.h>

void rtcInit(void) {
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 800d51c:	4b04      	ldr	r3, [pc, #16]	; (800d530 <rtcInit+0x18>)
 800d51e:	0018      	movs	r0, r3
 800d520:	f7fb fb2a 	bl	8008b78 <HAL_RTC_Init>
	mode = MODE_NORMAL
 800d524:	4b03      	ldr	r3, [pc, #12]	; (800d534 <rtcInit+0x1c>)
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]
	;

}
 800d52a:	46c0      	nop			; (mov r8, r8)
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	2000084c 	.word	0x2000084c
 800d534:	200004c8 	.word	0x200004c8

0800d538 <rtcGetTime>:


void rtcGetTime() {
 800d538:	b5b0      	push	{r4, r5, r7, lr}
 800d53a:	b08e      	sub	sp, #56	; 0x38
 800d53c:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800d53e:	4910      	ldr	r1, [pc, #64]	; (800d580 <rtcGetTime+0x48>)
 800d540:	4b10      	ldr	r3, [pc, #64]	; (800d584 <rtcGetTime+0x4c>)
 800d542:	2200      	movs	r2, #0
 800d544:	0018      	movs	r0, r3
 800d546:	f7fb fc55 	bl	8008df4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800d54a:	490f      	ldr	r1, [pc, #60]	; (800d588 <rtcGetTime+0x50>)
 800d54c:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <rtcGetTime+0x4c>)
 800d54e:	2200      	movs	r2, #0
 800d550:	0018      	movs	r0, r3
 800d552:	f7fb fd3d 	bl	8008fd0 <HAL_RTC_GetDate>

	hours = sTime.Hours;
 800d556:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <rtcGetTime+0x48>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	b25a      	sxtb	r2, r3
 800d55c:	4b0b      	ldr	r3, [pc, #44]	; (800d58c <rtcGetTime+0x54>)
 800d55e:	701a      	strb	r2, [r3, #0]

	if (hours >= 12) {
 800d560:	4b0a      	ldr	r3, [pc, #40]	; (800d58c <rtcGetTime+0x54>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	b25b      	sxtb	r3, r3
 800d566:	2b0b      	cmp	r3, #11
 800d568:	dd14      	ble.n	800d594 <rtcGetTime+0x5c>
		hours12 = hours - 12;
 800d56a:	4b08      	ldr	r3, [pc, #32]	; (800d58c <rtcGetTime+0x54>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	b2db      	uxtb	r3, r3
 800d572:	3b0c      	subs	r3, #12
 800d574:	b2db      	uxtb	r3, r3
 800d576:	b25a      	sxtb	r2, r3
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <rtcGetTime+0x58>)
 800d57a:	701a      	strb	r2, [r3, #0]
 800d57c:	e00f      	b.n	800d59e <rtcGetTime+0x66>
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	2000019c 	.word	0x2000019c
 800d584:	2000084c 	.word	0x2000084c
 800d588:	20000708 	.word	0x20000708
 800d58c:	200007cb 	.word	0x200007cb
 800d590:	2000013b 	.word	0x2000013b
	} else {
		hours12 = hours;
 800d594:	4bf4      	ldr	r3, [pc, #976]	; (800d968 <rtcGetTime+0x430>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	b25a      	sxtb	r2, r3
 800d59a:	4bf4      	ldr	r3, [pc, #976]	; (800d96c <rtcGetTime+0x434>)
 800d59c:	701a      	strb	r2, [r3, #0]
	}

	minutes = sTime.Minutes;
 800d59e:	4bf4      	ldr	r3, [pc, #976]	; (800d970 <rtcGetTime+0x438>)
 800d5a0:	785b      	ldrb	r3, [r3, #1]
 800d5a2:	b21a      	sxth	r2, r3
 800d5a4:	4bf3      	ldr	r3, [pc, #972]	; (800d974 <rtcGetTime+0x43c>)
 800d5a6:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 800d5a8:	4bf1      	ldr	r3, [pc, #964]	; (800d970 <rtcGetTime+0x438>)
 800d5aa:	789b      	ldrb	r3, [r3, #2]
 800d5ac:	b25a      	sxtb	r2, r3
 800d5ae:	4bf2      	ldr	r3, [pc, #968]	; (800d978 <rtcGetTime+0x440>)
 800d5b0:	701a      	strb	r2, [r3, #0]

	decimals = (((255 - sTime.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800d5b2:	4bef      	ldr	r3, [pc, #956]	; (800d970 <rtcGetTime+0x438>)
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	0013      	movs	r3, r2
 800d5b8:	065b      	lsls	r3, r3, #25
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	189b      	adds	r3, r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	1a9b      	subs	r3, r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4aed      	ldr	r2, [pc, #948]	; (800d97c <rtcGetTime+0x444>)
 800d5c8:	4694      	mov	ip, r2
 800d5ca:	4463      	add	r3, ip
 800d5cc:	49ec      	ldr	r1, [pc, #944]	; (800d980 <rtcGetTime+0x448>)
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	f7f2 fda0 	bl	8000114 <__udivsi3>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	001a      	movs	r2, r3
 800d5d8:	4bea      	ldr	r3, [pc, #936]	; (800d984 <rtcGetTime+0x44c>)
 800d5da:	601a      	str	r2, [r3, #0]

	day = sDate.Date;
 800d5dc:	4bea      	ldr	r3, [pc, #936]	; (800d988 <rtcGetTime+0x450>)
 800d5de:	789a      	ldrb	r2, [r3, #2]
 800d5e0:	4bea      	ldr	r3, [pc, #936]	; (800d98c <rtcGetTime+0x454>)
 800d5e2:	701a      	strb	r2, [r3, #0]
	month = sDate.Month;
 800d5e4:	4be8      	ldr	r3, [pc, #928]	; (800d988 <rtcGetTime+0x450>)
 800d5e6:	785a      	ldrb	r2, [r3, #1]
 800d5e8:	4be9      	ldr	r3, [pc, #932]	; (800d990 <rtcGetTime+0x458>)
 800d5ea:	701a      	strb	r2, [r3, #0]
	year = sDate.Year;
 800d5ec:	4be6      	ldr	r3, [pc, #920]	; (800d988 <rtcGetTime+0x450>)
 800d5ee:	78da      	ldrb	r2, [r3, #3]
 800d5f0:	4be8      	ldr	r3, [pc, #928]	; (800d994 <rtcGetTime+0x45c>)
 800d5f2:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (month + 9) / 12;
 800d5f4:	4be6      	ldr	r3, [pc, #920]	; (800d990 <rtcGetTime+0x458>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	3309      	adds	r3, #9
 800d5fc:	210c      	movs	r1, #12
 800d5fe:	0018      	movs	r0, r3
 800d600:	f7f2 fe12 	bl	8000228 <__divsi3>
 800d604:	0003      	movs	r3, r0
 800d606:	0018      	movs	r0, r3
 800d608:	f7f3 fe7a 	bl	8001300 <__aeabi_i2f>
 800d60c:	1c03      	adds	r3, r0, #0
 800d60e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t A = 4716 + (year+2000) + (uint32_t) X;
 800d610:	4be0      	ldr	r3, [pc, #896]	; (800d994 <rtcGetTime+0x45c>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b2db      	uxtb	r3, r3
 800d616:	001c      	movs	r4, r3
 800d618:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d61a:	f7f2 ffb5 	bl	8000588 <__aeabi_f2uiz>
 800d61e:	0003      	movs	r3, r0
 800d620:	18e3      	adds	r3, r4, r3
 800d622:	4add      	ldr	r2, [pc, #884]	; (800d998 <rtcGetTime+0x460>)
 800d624:	4694      	mov	ip, r2
 800d626:	4463      	add	r3, ip
 800d628:	633b      	str	r3, [r7, #48]	; 0x30
	float Y = 275 * month / 9;
 800d62a:	4bd9      	ldr	r3, [pc, #868]	; (800d990 <rtcGetTime+0x458>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	001a      	movs	r2, r3
 800d632:	0013      	movs	r3, r2
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	1a9b      	subs	r3, r3, r2
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	1a9b      	subs	r3, r3, r2
 800d63c:	009a      	lsls	r2, r3, #2
 800d63e:	189b      	adds	r3, r3, r2
 800d640:	2109      	movs	r1, #9
 800d642:	0018      	movs	r0, r3
 800d644:	f7f2 fdf0 	bl	8000228 <__divsi3>
 800d648:	0003      	movs	r3, r0
 800d64a:	0018      	movs	r0, r3
 800d64c:	f7f3 fe58 	bl	8001300 <__aeabi_i2f>
 800d650:	1c03      	adds	r3, r0, #0
 800d652:	62fb      	str	r3, [r7, #44]	; 0x2c
	float V = 7 * A / 4;
 800d654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d656:	0013      	movs	r3, r2
 800d658:	00db      	lsls	r3, r3, #3
 800d65a:	1a9b      	subs	r3, r3, r2
 800d65c:	089b      	lsrs	r3, r3, #2
 800d65e:	0018      	movs	r0, r3
 800d660:	f7f3 fe94 	bl	800138c <__aeabi_ui2f>
 800d664:	1c03      	adds	r3, r0, #0
 800d666:	62bb      	str	r3, [r7, #40]	; 0x28
	float B = 1729279.5 + 367 * (year+2000) + (uint32_t) Y - (uint32_t) V + day;
 800d668:	4bca      	ldr	r3, [pc, #808]	; (800d994 <rtcGetTime+0x45c>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	22fa      	movs	r2, #250	; 0xfa
 800d670:	00d2      	lsls	r2, r2, #3
 800d672:	189a      	adds	r2, r3, r2
 800d674:	0013      	movs	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	189b      	adds	r3, r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	1a9b      	subs	r3, r3, r2
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	1a9b      	subs	r3, r3, r2
 800d682:	0018      	movs	r0, r3
 800d684:	f7f5 fc80 	bl	8002f88 <__aeabi_i2d>
 800d688:	2280      	movs	r2, #128	; 0x80
 800d68a:	0612      	lsls	r2, r2, #24
 800d68c:	4bc3      	ldr	r3, [pc, #780]	; (800d99c <rtcGetTime+0x464>)
 800d68e:	f7f3 feb9 	bl	8001404 <__aeabi_dadd>
 800d692:	0002      	movs	r2, r0
 800d694:	000b      	movs	r3, r1
 800d696:	0014      	movs	r4, r2
 800d698:	001d      	movs	r5, r3
 800d69a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d69c:	f7f2 ff74 	bl	8000588 <__aeabi_f2uiz>
 800d6a0:	0003      	movs	r3, r0
 800d6a2:	0018      	movs	r0, r3
 800d6a4:	f7f5 fca0 	bl	8002fe8 <__aeabi_ui2d>
 800d6a8:	0002      	movs	r2, r0
 800d6aa:	000b      	movs	r3, r1
 800d6ac:	0020      	movs	r0, r4
 800d6ae:	0029      	movs	r1, r5
 800d6b0:	f7f3 fea8 	bl	8001404 <__aeabi_dadd>
 800d6b4:	0002      	movs	r2, r0
 800d6b6:	000b      	movs	r3, r1
 800d6b8:	0014      	movs	r4, r2
 800d6ba:	001d      	movs	r5, r3
 800d6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6be:	f7f2 ff63 	bl	8000588 <__aeabi_f2uiz>
 800d6c2:	0003      	movs	r3, r0
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f7f5 fc8f 	bl	8002fe8 <__aeabi_ui2d>
 800d6ca:	0002      	movs	r2, r0
 800d6cc:	000b      	movs	r3, r1
 800d6ce:	0020      	movs	r0, r4
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	f7f5 f873 	bl	80027bc <__aeabi_dsub>
 800d6d6:	0002      	movs	r2, r0
 800d6d8:	000b      	movs	r3, r1
 800d6da:	0014      	movs	r4, r2
 800d6dc:	001d      	movs	r5, r3
 800d6de:	4bab      	ldr	r3, [pc, #684]	; (800d98c <rtcGetTime+0x454>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	f7f5 fc4f 	bl	8002f88 <__aeabi_i2d>
 800d6ea:	0002      	movs	r2, r0
 800d6ec:	000b      	movs	r3, r1
 800d6ee:	0020      	movs	r0, r4
 800d6f0:	0029      	movs	r1, r5
 800d6f2:	f7f3 fe87 	bl	8001404 <__aeabi_dadd>
 800d6f6:	0002      	movs	r2, r0
 800d6f8:	000b      	movs	r3, r1
 800d6fa:	0010      	movs	r0, r2
 800d6fc:	0019      	movs	r1, r3
 800d6fe:	f7f5 fce1 	bl	80030c4 <__aeabi_d2f>
 800d702:	1c03      	adds	r3, r0, #0
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
	float Q = (A + 83) / 100;
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	3353      	adds	r3, #83	; 0x53
 800d70a:	2164      	movs	r1, #100	; 0x64
 800d70c:	0018      	movs	r0, r3
 800d70e:	f7f2 fd01 	bl	8000114 <__udivsi3>
 800d712:	0003      	movs	r3, r0
 800d714:	0018      	movs	r0, r3
 800d716:	f7f3 fe39 	bl	800138c <__aeabi_ui2f>
 800d71a:	1c03      	adds	r3, r0, #0
 800d71c:	623b      	str	r3, [r7, #32]
	uint32_t C = (uint32_t) Q;
 800d71e:	6a38      	ldr	r0, [r7, #32]
 800d720:	f7f2 ff32 	bl	8000588 <__aeabi_f2uiz>
 800d724:	0003      	movs	r3, r0
 800d726:	61fb      	str	r3, [r7, #28]
	float W = 3 * (C + 1) / 4;
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	0013      	movs	r3, r2
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	189b      	adds	r3, r3, r2
 800d732:	089b      	lsrs	r3, r3, #2
 800d734:	0018      	movs	r0, r3
 800d736:	f7f3 fe29 	bl	800138c <__aeabi_ui2f>
 800d73a:	1c03      	adds	r3, r0, #0
 800d73c:	61bb      	str	r3, [r7, #24]
	uint32_t E = (uint32_t) W;
 800d73e:	69b8      	ldr	r0, [r7, #24]
 800d740:	f7f2 ff22 	bl	8000588 <__aeabi_f2uiz>
 800d744:	0003      	movs	r3, r0
 800d746:	617b      	str	r3, [r7, #20]
	float JD = B + 38 - E; //julian day
 800d748:	4995      	ldr	r1, [pc, #596]	; (800d9a0 <rtcGetTime+0x468>)
 800d74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d74c:	f7f2 ff70 	bl	8000630 <__aeabi_fadd>
 800d750:	1c03      	adds	r3, r0, #0
 800d752:	1c1c      	adds	r4, r3, #0
 800d754:	6978      	ldr	r0, [r7, #20]
 800d756:	f7f3 fe19 	bl	800138c <__aeabi_ui2f>
 800d75a:	1c03      	adds	r3, r0, #0
 800d75c:	1c19      	adds	r1, r3, #0
 800d75e:	1c20      	adds	r0, r4, #0
 800d760:	f7f3 fbe6 	bl	8000f30 <__aeabi_fsub>
 800d764:	1c03      	adds	r3, r0, #0
 800d766:	613b      	str	r3, [r7, #16]
	float MS = 29.5305902778; //average value of synodic month
 800d768:	4b8e      	ldr	r3, [pc, #568]	; (800d9a4 <rtcGetTime+0x46c>)
 800d76a:	60fb      	str	r3, [r7, #12]
	float phasePrimary = ((JD / MS) - 0.3033);
 800d76c:	68f9      	ldr	r1, [r7, #12]
 800d76e:	6938      	ldr	r0, [r7, #16]
 800d770:	f7f3 f8fa 	bl	8000968 <__aeabi_fdiv>
 800d774:	1c03      	adds	r3, r0, #0
 800d776:	1c18      	adds	r0, r3, #0
 800d778:	f7f5 fc5c 	bl	8003034 <__aeabi_f2d>
 800d77c:	4a8a      	ldr	r2, [pc, #552]	; (800d9a8 <rtcGetTime+0x470>)
 800d77e:	4b8b      	ldr	r3, [pc, #556]	; (800d9ac <rtcGetTime+0x474>)
 800d780:	f7f5 f81c 	bl	80027bc <__aeabi_dsub>
 800d784:	0002      	movs	r2, r0
 800d786:	000b      	movs	r3, r1
 800d788:	0010      	movs	r0, r2
 800d78a:	0019      	movs	r1, r3
 800d78c:	f7f5 fc9a 	bl	80030c4 <__aeabi_d2f>
 800d790:	1c03      	adds	r3, r0, #0
 800d792:	60bb      	str	r3, [r7, #8]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800d794:	68b8      	ldr	r0, [r7, #8]
 800d796:	f7f2 fef7 	bl	8000588 <__aeabi_f2uiz>
 800d79a:	0003      	movs	r3, r0
 800d79c:	607b      	str	r3, [r7, #4]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7f3 fdf4 	bl	800138c <__aeabi_ui2f>
 800d7a4:	1c03      	adds	r3, r0, #0
 800d7a6:	1c19      	adds	r1, r3, #0
 800d7a8:	68b8      	ldr	r0, [r7, #8]
 800d7aa:	f7f3 fbc1 	bl	8000f30 <__aeabi_fsub>
 800d7ae:	1c03      	adds	r3, r0, #0
 800d7b0:	497f      	ldr	r1, [pc, #508]	; (800d9b0 <rtcGetTime+0x478>)
 800d7b2:	1c18      	adds	r0, r3, #0
 800d7b4:	f7f3 faa2 	bl	8000cfc <__aeabi_fmul>
 800d7b8:	1c03      	adds	r3, r0, #0
 800d7ba:	603b      	str	r3, [r7, #0]
	moonPhase = (uint32_t) phaseFinal;
 800d7bc:	6838      	ldr	r0, [r7, #0]
 800d7be:	f7f2 fee3 	bl	8000588 <__aeabi_f2uiz>
 800d7c2:	0002      	movs	r2, r0
 800d7c4:	4b7b      	ldr	r3, [pc, #492]	; (800d9b4 <rtcGetTime+0x47c>)
 800d7c6:	601a      	str	r2, [r3, #0]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (mode == MODE_NORMAL) {
 800d7c8:	4b7b      	ldr	r3, [pc, #492]	; (800d9b8 <rtcGetTime+0x480>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d114      	bne.n	800d7fc <rtcGetTime+0x2c4>
		chronoMinutes = 0;
 800d7d2:	4b7a      	ldr	r3, [pc, #488]	; (800d9bc <rtcGetTime+0x484>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	801a      	strh	r2, [r3, #0]
		chronoSeconds = 0;
 800d7d8:	4b79      	ldr	r3, [pc, #484]	; (800d9c0 <rtcGetTime+0x488>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
		chronoDecimals = 0;
 800d7de:	4b79      	ldr	r3, [pc, #484]	; (800d9c4 <rtcGetTime+0x48c>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
		chronoHours = 0;
 800d7e4:	4b78      	ldr	r3, [pc, #480]	; (800d9c8 <rtcGetTime+0x490>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	701a      	strb	r2, [r3, #0]
		chronoDay = 0;
 800d7ea:	4b78      	ldr	r3, [pc, #480]	; (800d9cc <rtcGetTime+0x494>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	701a      	strb	r2, [r3, #0]
		chronoMonth = 0;
 800d7f0:	4b77      	ldr	r3, [pc, #476]	; (800d9d0 <rtcGetTime+0x498>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	701a      	strb	r2, [r3, #0]
		chronoYear = 0;
 800d7f6:	4b77      	ldr	r3, [pc, #476]	; (800d9d4 <rtcGetTime+0x49c>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	701a      	strb	r2, [r3, #0]
	}
	if (mode == MODE_CHRONO) {
 800d7fc:	4b6e      	ldr	r3, [pc, #440]	; (800d9b8 <rtcGetTime+0x480>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b01      	cmp	r3, #1
 800d804:	d000      	beq.n	800d808 <rtcGetTime+0x2d0>
 800d806:	e112      	b.n	800da2e <rtcGetTime+0x4f6>

		chronoDecimals = 0;
 800d808:	4b6e      	ldr	r3, [pc, #440]	; (800d9c4 <rtcGetTime+0x48c>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
		chronoSeconds = seconds - chronoStartSeconds;
 800d80e:	4b5a      	ldr	r3, [pc, #360]	; (800d978 <rtcGetTime+0x440>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	b25b      	sxtb	r3, r3
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b70      	ldr	r3, [pc, #448]	; (800d9d8 <rtcGetTime+0x4a0>)
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	b2db      	uxtb	r3, r3
 800d822:	b25a      	sxtb	r2, r3
 800d824:	4b66      	ldr	r3, [pc, #408]	; (800d9c0 <rtcGetTime+0x488>)
 800d826:	701a      	strb	r2, [r3, #0]
		chronoMinutes = minutes - chronoStartMinutes;
 800d828:	4b52      	ldr	r3, [pc, #328]	; (800d974 <rtcGetTime+0x43c>)
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	b21b      	sxth	r3, r3
 800d82e:	b29a      	uxth	r2, r3
 800d830:	4b6a      	ldr	r3, [pc, #424]	; (800d9dc <rtcGetTime+0x4a4>)
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	b21b      	sxth	r3, r3
 800d836:	b29b      	uxth	r3, r3
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	b21a      	sxth	r2, r3
 800d83e:	4b5f      	ldr	r3, [pc, #380]	; (800d9bc <rtcGetTime+0x484>)
 800d840:	801a      	strh	r2, [r3, #0]
		chronoHours = hours - chronoStartHours;
 800d842:	4b49      	ldr	r3, [pc, #292]	; (800d968 <rtcGetTime+0x430>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	b25b      	sxtb	r3, r3
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	4b65      	ldr	r3, [pc, #404]	; (800d9e0 <rtcGetTime+0x4a8>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b25b      	sxtb	r3, r3
 800d850:	b2db      	uxtb	r3, r3
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	b2db      	uxtb	r3, r3
 800d856:	b25a      	sxtb	r2, r3
 800d858:	4b5b      	ldr	r3, [pc, #364]	; (800d9c8 <rtcGetTime+0x490>)
 800d85a:	701a      	strb	r2, [r3, #0]
		chronoDay = day - chronoStartDay;
 800d85c:	4b4b      	ldr	r3, [pc, #300]	; (800d98c <rtcGetTime+0x454>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	b2da      	uxtb	r2, r3
 800d862:	4b60      	ldr	r3, [pc, #384]	; (800d9e4 <rtcGetTime+0x4ac>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	b25b      	sxtb	r3, r3
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	b25a      	sxtb	r2, r3
 800d870:	4b56      	ldr	r3, [pc, #344]	; (800d9cc <rtcGetTime+0x494>)
 800d872:	701a      	strb	r2, [r3, #0]
		chronoMonth = month - chronoStartMonth;
 800d874:	4b46      	ldr	r3, [pc, #280]	; (800d990 <rtcGetTime+0x458>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	4b5b      	ldr	r3, [pc, #364]	; (800d9e8 <rtcGetTime+0x4b0>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	b25b      	sxtb	r3, r3
 800d880:	b2db      	uxtb	r3, r3
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	b2db      	uxtb	r3, r3
 800d886:	b25a      	sxtb	r2, r3
 800d888:	4b51      	ldr	r3, [pc, #324]	; (800d9d0 <rtcGetTime+0x498>)
 800d88a:	701a      	strb	r2, [r3, #0]

		if (chronoDecimals < 0) {
 800d88c:	4b4d      	ldr	r3, [pc, #308]	; (800d9c4 <rtcGetTime+0x48c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	da0e      	bge.n	800d8b2 <rtcGetTime+0x37a>
			chronoSeconds--;
 800d894:	4b4a      	ldr	r3, [pc, #296]	; (800d9c0 <rtcGetTime+0x488>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	b25b      	sxtb	r3, r3
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	3b01      	subs	r3, #1
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	b25a      	sxtb	r2, r3
 800d8a2:	4b47      	ldr	r3, [pc, #284]	; (800d9c0 <rtcGetTime+0x488>)
 800d8a4:	701a      	strb	r2, [r3, #0]
			chronoDecimals = chronoDecimals + 10;
 800d8a6:	4b47      	ldr	r3, [pc, #284]	; (800d9c4 <rtcGetTime+0x48c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	330a      	adds	r3, #10
 800d8ac:	001a      	movs	r2, r3
 800d8ae:	4b45      	ldr	r3, [pc, #276]	; (800d9c4 <rtcGetTime+0x48c>)
 800d8b0:	601a      	str	r2, [r3, #0]
		}

		if (chronoSeconds < 0) {
 800d8b2:	4b43      	ldr	r3, [pc, #268]	; (800d9c0 <rtcGetTime+0x488>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	b25b      	sxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	da11      	bge.n	800d8e0 <rtcGetTime+0x3a8>
			chronoMinutes--;
 800d8bc:	4b3f      	ldr	r3, [pc, #252]	; (800d9bc <rtcGetTime+0x484>)
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	b21b      	sxth	r3, r3
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	b21a      	sxth	r2, r3
 800d8ca:	4b3c      	ldr	r3, [pc, #240]	; (800d9bc <rtcGetTime+0x484>)
 800d8cc:	801a      	strh	r2, [r3, #0]
			chronoSeconds = chronoSeconds + 60;
 800d8ce:	4b3c      	ldr	r3, [pc, #240]	; (800d9c0 <rtcGetTime+0x488>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	b25b      	sxtb	r3, r3
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	333c      	adds	r3, #60	; 0x3c
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	b25a      	sxtb	r2, r3
 800d8dc:	4b38      	ldr	r3, [pc, #224]	; (800d9c0 <rtcGetTime+0x488>)
 800d8de:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMinutes < 0) {
 800d8e0:	4b36      	ldr	r3, [pc, #216]	; (800d9bc <rtcGetTime+0x484>)
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	b21b      	sxth	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da11      	bge.n	800d90e <rtcGetTime+0x3d6>
			chronoHours--;
 800d8ea:	4b37      	ldr	r3, [pc, #220]	; (800d9c8 <rtcGetTime+0x490>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	b25b      	sxtb	r3, r3
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	b25a      	sxtb	r2, r3
 800d8f8:	4b33      	ldr	r3, [pc, #204]	; (800d9c8 <rtcGetTime+0x490>)
 800d8fa:	701a      	strb	r2, [r3, #0]
			chronoMinutes = chronoMinutes + 60;
 800d8fc:	4b2f      	ldr	r3, [pc, #188]	; (800d9bc <rtcGetTime+0x484>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	b21b      	sxth	r3, r3
 800d902:	b29b      	uxth	r3, r3
 800d904:	333c      	adds	r3, #60	; 0x3c
 800d906:	b29b      	uxth	r3, r3
 800d908:	b21a      	sxth	r2, r3
 800d90a:	4b2c      	ldr	r3, [pc, #176]	; (800d9bc <rtcGetTime+0x484>)
 800d90c:	801a      	strh	r2, [r3, #0]
		}

		if (chronoHours < 0) {
 800d90e:	4b2e      	ldr	r3, [pc, #184]	; (800d9c8 <rtcGetTime+0x490>)
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	b25b      	sxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	da11      	bge.n	800d93c <rtcGetTime+0x404>
			chronoDay--;
 800d918:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <rtcGetTime+0x494>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	b25b      	sxtb	r3, r3
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	3b01      	subs	r3, #1
 800d922:	b2db      	uxtb	r3, r3
 800d924:	b25a      	sxtb	r2, r3
 800d926:	4b29      	ldr	r3, [pc, #164]	; (800d9cc <rtcGetTime+0x494>)
 800d928:	701a      	strb	r2, [r3, #0]
			chronoHours = chronoHours + 24;
 800d92a:	4b27      	ldr	r3, [pc, #156]	; (800d9c8 <rtcGetTime+0x490>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	b25b      	sxtb	r3, r3
 800d930:	b2db      	uxtb	r3, r3
 800d932:	3318      	adds	r3, #24
 800d934:	b2db      	uxtb	r3, r3
 800d936:	b25a      	sxtb	r2, r3
 800d938:	4b23      	ldr	r3, [pc, #140]	; (800d9c8 <rtcGetTime+0x490>)
 800d93a:	701a      	strb	r2, [r3, #0]
		}

		if (chronoDay < 0) {
 800d93c:	4b23      	ldr	r3, [pc, #140]	; (800d9cc <rtcGetTime+0x494>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b25b      	sxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	da54      	bge.n	800d9f0 <rtcGetTime+0x4b8>
			chronoMonth--;
 800d946:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <rtcGetTime+0x498>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b25b      	sxtb	r3, r3
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	3b01      	subs	r3, #1
 800d950:	b2db      	uxtb	r3, r3
 800d952:	b25a      	sxtb	r2, r3
 800d954:	4b1e      	ldr	r3, [pc, #120]	; (800d9d0 <rtcGetTime+0x498>)
 800d956:	701a      	strb	r2, [r3, #0]
			chronoDay = chronoDay + 30;
 800d958:	4b1c      	ldr	r3, [pc, #112]	; (800d9cc <rtcGetTime+0x494>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	331e      	adds	r3, #30
 800d962:	b2db      	uxtb	r3, r3
 800d964:	b25a      	sxtb	r2, r3
 800d966:	e041      	b.n	800d9ec <rtcGetTime+0x4b4>
 800d968:	200007cb 	.word	0x200007cb
 800d96c:	2000013b 	.word	0x2000013b
 800d970:	2000019c 	.word	0x2000019c
 800d974:	200007b8 	.word	0x200007b8
 800d978:	2000076a 	.word	0x2000076a
 800d97c:	0000639c 	.word	0x0000639c
 800d980:	000009f6 	.word	0x000009f6
 800d984:	200007bc 	.word	0x200007bc
 800d988:	20000708 	.word	0x20000708
 800d98c:	20000778 	.word	0x20000778
 800d990:	200003c1 	.word	0x200003c1
 800d994:	20000774 	.word	0x20000774
 800d998:	00001a3c 	.word	0x00001a3c
 800d99c:	413a62ff 	.word	0x413a62ff
 800d9a0:	42180000 	.word	0x42180000
 800d9a4:	41ec3ea6 	.word	0x41ec3ea6
 800d9a8:	67381d7e 	.word	0x67381d7e
 800d9ac:	3fd36944 	.word	0x3fd36944
 800d9b0:	42c80000 	.word	0x42c80000
 800d9b4:	200003cc 	.word	0x200003cc
 800d9b8:	200004c8 	.word	0x200004c8
 800d9bc:	200007b6 	.word	0x200007b6
 800d9c0:	20000776 	.word	0x20000776
 800d9c4:	20000144 	.word	0x20000144
 800d9c8:	200003c5 	.word	0x200003c5
 800d9cc:	2000079e 	.word	0x2000079e
 800d9d0:	20000384 	.word	0x20000384
 800d9d4:	20000662 	.word	0x20000662
 800d9d8:	20000136 	.word	0x20000136
 800d9dc:	200003b6 	.word	0x200003b6
 800d9e0:	20000714 	.word	0x20000714
 800d9e4:	20000777 	.word	0x20000777
 800d9e8:	2000034a 	.word	0x2000034a
 800d9ec:	4b12      	ldr	r3, [pc, #72]	; (800da38 <rtcGetTime+0x500>)
 800d9ee:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMonth < 0) {
 800d9f0:	4b12      	ldr	r3, [pc, #72]	; (800da3c <rtcGetTime+0x504>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	da11      	bge.n	800da1e <rtcGetTime+0x4e6>
			chronoYear--;
 800d9fa:	4b11      	ldr	r3, [pc, #68]	; (800da40 <rtcGetTime+0x508>)
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	b2db      	uxtb	r3, r3
 800da02:	3b01      	subs	r3, #1
 800da04:	b2db      	uxtb	r3, r3
 800da06:	b25a      	sxtb	r2, r3
 800da08:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <rtcGetTime+0x508>)
 800da0a:	701a      	strb	r2, [r3, #0]
			chronoMonth = chronoMonth + 12;
 800da0c:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <rtcGetTime+0x504>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b25b      	sxtb	r3, r3
 800da12:	b2db      	uxtb	r3, r3
 800da14:	330c      	adds	r3, #12
 800da16:	b2db      	uxtb	r3, r3
 800da18:	b25a      	sxtb	r2, r3
 800da1a:	4b08      	ldr	r3, [pc, #32]	; (800da3c <rtcGetTime+0x504>)
 800da1c:	701a      	strb	r2, [r3, #0]
		}

		//max chrono count
		if(chronoHours >= 5){
 800da1e:	4b09      	ldr	r3, [pc, #36]	; (800da44 <rtcGetTime+0x50c>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	b25b      	sxtb	r3, r3
 800da24:	2b04      	cmp	r3, #4
 800da26:	dd02      	ble.n	800da2e <rtcGetTime+0x4f6>
			mode = MODE_STOP;
 800da28:	4b07      	ldr	r3, [pc, #28]	; (800da48 <rtcGetTime+0x510>)
 800da2a:	2202      	movs	r2, #2
 800da2c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800da2e:	46c0      	nop			; (mov r8, r8)
 800da30:	46bd      	mov	sp, r7
 800da32:	b00e      	add	sp, #56	; 0x38
 800da34:	bdb0      	pop	{r4, r5, r7, pc}
 800da36:	46c0      	nop			; (mov r8, r8)
 800da38:	2000079e 	.word	0x2000079e
 800da3c:	20000384 	.word	0x20000384
 800da40:	20000662 	.word	0x20000662
 800da44:	200003c5 	.word	0x200003c5
 800da48:	200004c8 	.word	0x200004c8

0800da4c <rtcSetTime>:

void rtcSetTime() {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 800da50:	4b17      	ldr	r3, [pc, #92]	; (800dab0 <rtcSetTime+0x64>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	b25b      	sxtb	r3, r3
 800da56:	b2da      	uxtb	r2, r3
 800da58:	4b16      	ldr	r3, [pc, #88]	; (800dab4 <rtcSetTime+0x68>)
 800da5a:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 800da5c:	4b16      	ldr	r3, [pc, #88]	; (800dab8 <rtcSetTime+0x6c>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	b21b      	sxth	r3, r3
 800da62:	b2da      	uxtb	r2, r3
 800da64:	4b13      	ldr	r3, [pc, #76]	; (800dab4 <rtcSetTime+0x68>)
 800da66:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 800da68:	4b14      	ldr	r3, [pc, #80]	; (800dabc <rtcSetTime+0x70>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	b25b      	sxtb	r3, r3
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	4b10      	ldr	r3, [pc, #64]	; (800dab4 <rtcSetTime+0x68>)
 800da72:	709a      	strb	r2, [r3, #2]
	sDate.Date = day;
 800da74:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <rtcSetTime+0x74>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	4b12      	ldr	r3, [pc, #72]	; (800dac4 <rtcSetTime+0x78>)
 800da7c:	709a      	strb	r2, [r3, #2]
	sDate.Month = month;
 800da7e:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <rtcSetTime+0x7c>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	b2da      	uxtb	r2, r3
 800da84:	4b0f      	ldr	r3, [pc, #60]	; (800dac4 <rtcSetTime+0x78>)
 800da86:	705a      	strb	r2, [r3, #1]
	sDate.Year = year;
 800da88:	4b10      	ldr	r3, [pc, #64]	; (800dacc <rtcSetTime+0x80>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	4b0d      	ldr	r3, [pc, #52]	; (800dac4 <rtcSetTime+0x78>)
 800da90:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800da92:	4908      	ldr	r1, [pc, #32]	; (800dab4 <rtcSetTime+0x68>)
 800da94:	4b0e      	ldr	r3, [pc, #56]	; (800dad0 <rtcSetTime+0x84>)
 800da96:	2200      	movs	r2, #0
 800da98:	0018      	movs	r0, r3
 800da9a:	f7fb f903 	bl	8008ca4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800da9e:	4909      	ldr	r1, [pc, #36]	; (800dac4 <rtcSetTime+0x78>)
 800daa0:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <rtcSetTime+0x84>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	0018      	movs	r0, r3
 800daa6:	f7fb fa01 	bl	8008eac <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 800daaa:	46c0      	nop			; (mov r8, r8)
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	200007cb 	.word	0x200007cb
 800dab4:	2000019c 	.word	0x2000019c
 800dab8:	200007b8 	.word	0x200007b8
 800dabc:	2000076a 	.word	0x2000076a
 800dac0:	20000778 	.word	0x20000778
 800dac4:	20000708 	.word	0x20000708
 800dac8:	200003c1 	.word	0x200003c1
 800dacc:	20000774 	.word	0x20000774
 800dad0:	2000084c 	.word	0x2000084c

0800dad4 <rtcResetChrono>:

void rtcResetChrono(void) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0

	chronoDecimals = 0;
 800dad8:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <rtcResetChrono+0x3c>)
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
	chronoMinutes = 0;
 800dade:	4b0d      	ldr	r3, [pc, #52]	; (800db14 <rtcResetChrono+0x40>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	801a      	strh	r2, [r3, #0]
	chronoSeconds = 0;
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <rtcResetChrono+0x44>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	701a      	strb	r2, [r3, #0]
	chronoHours = 0;
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <rtcResetChrono+0x48>)
 800daec:	2200      	movs	r2, #0
 800daee:	701a      	strb	r2, [r3, #0]

	chronoStartSeconds = 0;
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <rtcResetChrono+0x4c>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	701a      	strb	r2, [r3, #0]
	chronoStartMinutes = 0;
 800daf6:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <rtcResetChrono+0x50>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	801a      	strh	r2, [r3, #0]
	chronoStartDecimals = 0;
 800dafc:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <rtcResetChrono+0x54>)
 800dafe:	2200      	movs	r2, #0
 800db00:	601a      	str	r2, [r3, #0]
	chronoStartHours = 0;
 800db02:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <rtcResetChrono+0x58>)
 800db04:	2200      	movs	r2, #0
 800db06:	701a      	strb	r2, [r3, #0]

}
 800db08:	46c0      	nop			; (mov r8, r8)
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	46c0      	nop			; (mov r8, r8)
 800db10:	20000144 	.word	0x20000144
 800db14:	200007b6 	.word	0x200007b6
 800db18:	20000776 	.word	0x20000776
 800db1c:	200003c5 	.word	0x200003c5
 800db20:	20000136 	.word	0x20000136
 800db24:	200003b6 	.word	0x200003b6
 800db28:	2000012c 	.word	0x2000012c
 800db2c:	20000714 	.word	0x20000714

0800db30 <float2Text>:
int32_t offsetMagnetometerX = 0;
int32_t offsetMagnetometerY = 0;

float gainVoltagePassive = 1.06;

void float2Text(char *str, float input) {
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]

	int ones = (uint16_t) input;
 800db3a:	6838      	ldr	r0, [r7, #0]
 800db3c:	f7f2 fd24 	bl	8000588 <__aeabi_f2uiz>
 800db40:	0003      	movs	r3, r0
 800db42:	b29b      	uxth	r3, r3
 800db44:	617b      	str	r3, [r7, #20]
	float hundreadths = input - ones;
 800db46:	6978      	ldr	r0, [r7, #20]
 800db48:	f7f3 fbda 	bl	8001300 <__aeabi_i2f>
 800db4c:	1c03      	adds	r3, r0, #0
 800db4e:	1c19      	adds	r1, r3, #0
 800db50:	6838      	ldr	r0, [r7, #0]
 800db52:	f7f3 f9ed 	bl	8000f30 <__aeabi_fsub>
 800db56:	1c03      	adds	r3, r0, #0
 800db58:	613b      	str	r3, [r7, #16]
	int hundreadths2 = hundreadths * 100;
 800db5a:	490a      	ldr	r1, [pc, #40]	; (800db84 <float2Text+0x54>)
 800db5c:	6938      	ldr	r0, [r7, #16]
 800db5e:	f7f3 f8cd 	bl	8000cfc <__aeabi_fmul>
 800db62:	1c03      	adds	r3, r0, #0
 800db64:	1c18      	adds	r0, r3, #0
 800db66:	f7f3 fbab 	bl	80012c0 <__aeabi_f2iz>
 800db6a:	0003      	movs	r3, r0
 800db6c:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d.%d", ones, hundreadths2);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	4905      	ldr	r1, [pc, #20]	; (800db88 <float2Text+0x58>)
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f002 ff1d 	bl	80109b4 <siprintf>

}
 800db7a:	46c0      	nop			; (mov r8, r8)
 800db7c:	46bd      	mov	sp, r7
 800db7e:	b006      	add	sp, #24
 800db80:	bd80      	pop	{r7, pc}
 800db82:	46c0      	nop			; (mov r8, r8)
 800db84:	42c80000 	.word	0x42c80000
 800db88:	080133f0 	.word	0x080133f0

0800db8c <sensingInit>:

void sensingInit() {
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b08f      	sub	sp, #60	; 0x3c
 800db90:	af04      	add	r7, sp, #16

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 800db92:	497d      	ldr	r1, [pc, #500]	; (800dd88 <sensingInit+0x1fc>)
 800db94:	4b7d      	ldr	r3, [pc, #500]	; (800dd8c <sensingInit+0x200>)
 800db96:	2203      	movs	r2, #3
 800db98:	0018      	movs	r0, r3
 800db9a:	f7f8 fb37 	bl	800620c <HAL_ADC_Start_DMA>
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								REDING CALIBRATION DATA

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_T1, 1, dig_T, 6,
 800db9e:	4b7c      	ldr	r3, [pc, #496]	; (800dd90 <sensingInit+0x204>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	487c      	ldr	r0, [pc, #496]	; (800dd94 <sensingInit+0x208>)
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	2306      	movs	r3, #6
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	2420      	movs	r4, #32
 800dbac:	193b      	adds	r3, r7, r4
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	2288      	movs	r2, #136	; 0x88
 800dbb4:	21ee      	movs	r1, #238	; 0xee
 800dbb6:	f7f9 fd7b 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 800dbba:	0021      	movs	r1, r4
 800dbbc:	187b      	adds	r3, r7, r1
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	b21a      	sxth	r2, r3
 800dbc2:	187b      	adds	r3, r7, r1
 800dbc4:	785b      	ldrb	r3, [r3, #1]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	b21b      	sxth	r3, r3
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	4b71      	ldr	r3, [pc, #452]	; (800dd98 <sensingInit+0x20c>)
 800dbd2:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 800dbd4:	187b      	adds	r3, r7, r1
 800dbd6:	789b      	ldrb	r3, [r3, #2]
 800dbd8:	b21a      	sxth	r2, r3
 800dbda:	187b      	adds	r3, r7, r1
 800dbdc:	78db      	ldrb	r3, [r3, #3]
 800dbde:	021b      	lsls	r3, r3, #8
 800dbe0:	b21b      	sxth	r3, r3
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	b21a      	sxth	r2, r3
 800dbe6:	4b6d      	ldr	r3, [pc, #436]	; (800dd9c <sensingInit+0x210>)
 800dbe8:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 800dbea:	187b      	adds	r3, r7, r1
 800dbec:	791b      	ldrb	r3, [r3, #4]
 800dbee:	b21a      	sxth	r2, r3
 800dbf0:	187b      	adds	r3, r7, r1
 800dbf2:	791b      	ldrb	r3, [r3, #4]
 800dbf4:	021b      	lsls	r3, r3, #8
 800dbf6:	b21b      	sxth	r3, r3
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	b21a      	sxth	r2, r3
 800dbfc:	4b68      	ldr	r3, [pc, #416]	; (800dda0 <sensingInit+0x214>)
 800dbfe:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_P1, 1, dig_P, 18,
 800dc00:	4b63      	ldr	r3, [pc, #396]	; (800dd90 <sensingInit+0x204>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	4863      	ldr	r0, [pc, #396]	; (800dd94 <sensingInit+0x208>)
 800dc06:	9302      	str	r3, [sp, #8]
 800dc08:	2312      	movs	r3, #18
 800dc0a:	9301      	str	r3, [sp, #4]
 800dc0c:	240c      	movs	r4, #12
 800dc0e:	193b      	adds	r3, r7, r4
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	2301      	movs	r3, #1
 800dc14:	228e      	movs	r2, #142	; 0x8e
 800dc16:	21ee      	movs	r1, #238	; 0xee
 800dc18:	f7f9 fd4a 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800dc1c:	0021      	movs	r1, r4
 800dc1e:	187b      	adds	r3, r7, r1
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b21a      	sxth	r2, r3
 800dc24:	187b      	adds	r3, r7, r1
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	021b      	lsls	r3, r3, #8
 800dc2a:	b21b      	sxth	r3, r3
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	b21b      	sxth	r3, r3
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	4b5c      	ldr	r3, [pc, #368]	; (800dda4 <sensingInit+0x218>)
 800dc34:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 800dc36:	187b      	adds	r3, r7, r1
 800dc38:	789b      	ldrb	r3, [r3, #2]
 800dc3a:	b21a      	sxth	r2, r3
 800dc3c:	187b      	adds	r3, r7, r1
 800dc3e:	78db      	ldrb	r3, [r3, #3]
 800dc40:	021b      	lsls	r3, r3, #8
 800dc42:	b21b      	sxth	r3, r3
 800dc44:	4313      	orrs	r3, r2
 800dc46:	b21a      	sxth	r2, r3
 800dc48:	4b57      	ldr	r3, [pc, #348]	; (800dda8 <sensingInit+0x21c>)
 800dc4a:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800dc4c:	187b      	adds	r3, r7, r1
 800dc4e:	791b      	ldrb	r3, [r3, #4]
 800dc50:	b21a      	sxth	r2, r3
 800dc52:	187b      	adds	r3, r7, r1
 800dc54:	795b      	ldrb	r3, [r3, #5]
 800dc56:	021b      	lsls	r3, r3, #8
 800dc58:	b21b      	sxth	r3, r3
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	b21a      	sxth	r2, r3
 800dc5e:	4b53      	ldr	r3, [pc, #332]	; (800ddac <sensingInit+0x220>)
 800dc60:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 800dc62:	187b      	adds	r3, r7, r1
 800dc64:	799b      	ldrb	r3, [r3, #6]
 800dc66:	b21a      	sxth	r2, r3
 800dc68:	187b      	adds	r3, r7, r1
 800dc6a:	79db      	ldrb	r3, [r3, #7]
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	b21b      	sxth	r3, r3
 800dc70:	4313      	orrs	r3, r2
 800dc72:	b21a      	sxth	r2, r3
 800dc74:	4b4e      	ldr	r3, [pc, #312]	; (800ddb0 <sensingInit+0x224>)
 800dc76:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800dc78:	187b      	adds	r3, r7, r1
 800dc7a:	7a1b      	ldrb	r3, [r3, #8]
 800dc7c:	b21a      	sxth	r2, r3
 800dc7e:	187b      	adds	r3, r7, r1
 800dc80:	7a5b      	ldrb	r3, [r3, #9]
 800dc82:	021b      	lsls	r3, r3, #8
 800dc84:	b21b      	sxth	r3, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	b21a      	sxth	r2, r3
 800dc8a:	4b4a      	ldr	r3, [pc, #296]	; (800ddb4 <sensingInit+0x228>)
 800dc8c:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800dc8e:	187b      	adds	r3, r7, r1
 800dc90:	7a9b      	ldrb	r3, [r3, #10]
 800dc92:	b21a      	sxth	r2, r3
 800dc94:	187b      	adds	r3, r7, r1
 800dc96:	7adb      	ldrb	r3, [r3, #11]
 800dc98:	021b      	lsls	r3, r3, #8
 800dc9a:	b21b      	sxth	r3, r3
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	b21a      	sxth	r2, r3
 800dca0:	4b45      	ldr	r3, [pc, #276]	; (800ddb8 <sensingInit+0x22c>)
 800dca2:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 800dca4:	187b      	adds	r3, r7, r1
 800dca6:	7b1b      	ldrb	r3, [r3, #12]
 800dca8:	b21a      	sxth	r2, r3
 800dcaa:	187b      	adds	r3, r7, r1
 800dcac:	7b5b      	ldrb	r3, [r3, #13]
 800dcae:	021b      	lsls	r3, r3, #8
 800dcb0:	b21b      	sxth	r3, r3
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	b21a      	sxth	r2, r3
 800dcb6:	4b41      	ldr	r3, [pc, #260]	; (800ddbc <sensingInit+0x230>)
 800dcb8:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800dcba:	187b      	adds	r3, r7, r1
 800dcbc:	7b9b      	ldrb	r3, [r3, #14]
 800dcbe:	b21a      	sxth	r2, r3
 800dcc0:	187b      	adds	r3, r7, r1
 800dcc2:	7bdb      	ldrb	r3, [r3, #15]
 800dcc4:	021b      	lsls	r3, r3, #8
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	b21a      	sxth	r2, r3
 800dccc:	4b3c      	ldr	r3, [pc, #240]	; (800ddc0 <sensingInit+0x234>)
 800dcce:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800dcd0:	187b      	adds	r3, r7, r1
 800dcd2:	7c1b      	ldrb	r3, [r3, #16]
 800dcd4:	b21a      	sxth	r2, r3
 800dcd6:	187b      	adds	r3, r7, r1
 800dcd8:	7c5b      	ldrb	r3, [r3, #17]
 800dcda:	021b      	lsls	r3, r3, #8
 800dcdc:	b21b      	sxth	r3, r3
 800dcde:	4313      	orrs	r3, r2
 800dce0:	b21a      	sxth	r2, r3
 800dce2:	4b38      	ldr	r3, [pc, #224]	; (800ddc4 <sensingInit+0x238>)
 800dce4:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H1, 1, &dig_H_1, 1,
 800dce6:	4b2a      	ldr	r3, [pc, #168]	; (800dd90 <sensingInit+0x204>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	482a      	ldr	r0, [pc, #168]	; (800dd94 <sensingInit+0x208>)
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	2301      	movs	r3, #1
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	240b      	movs	r4, #11
 800dcf4:	193b      	adds	r3, r7, r4
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	22a1      	movs	r2, #161	; 0xa1
 800dcfc:	21ee      	movs	r1, #238	; 0xee
 800dcfe:	f7f9 fcd7 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H1 = ((unsigned char) dig_H_1);
 800dd02:	193b      	adds	r3, r7, r4
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	4b30      	ldr	r3, [pc, #192]	; (800ddc8 <sensingInit+0x23c>)
 800dd08:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H2, 1, dig_H_2_6, 7,
 800dd0a:	4b21      	ldr	r3, [pc, #132]	; (800dd90 <sensingInit+0x204>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	4821      	ldr	r0, [pc, #132]	; (800dd94 <sensingInit+0x208>)
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	2307      	movs	r3, #7
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	1d3b      	adds	r3, r7, #4
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	22e1      	movs	r2, #225	; 0xe1
 800dd1e:	21ee      	movs	r1, #238	; 0xee
 800dd20:	f7f9 fcc6 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800dd24:	1d3b      	adds	r3, r7, #4
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	b21a      	sxth	r2, r3
 800dd2a:	1d3b      	adds	r3, r7, #4
 800dd2c:	785b      	ldrb	r3, [r3, #1]
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	b21b      	sxth	r3, r3
 800dd32:	4313      	orrs	r3, r2
 800dd34:	b21a      	sxth	r2, r3
 800dd36:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <sensingInit+0x240>)
 800dd38:	801a      	strh	r2, [r3, #0]
	dig_H3 = ((unsigned char) dig_H_2_6[2]);
 800dd3a:	1d3b      	adds	r3, r7, #4
 800dd3c:	789a      	ldrb	r2, [r3, #2]
 800dd3e:	4b24      	ldr	r3, [pc, #144]	; (800ddd0 <sensingInit+0x244>)
 800dd40:	701a      	strb	r2, [r3, #0]

	dig_H4 =
			(((int16_t) dig_H_2_6[3]) << 4 | (((int16_t) dig_H_2_6[4]) & 0x0f));
 800dd42:	1d3b      	adds	r3, r7, #4
 800dd44:	78db      	ldrb	r3, [r3, #3]
 800dd46:	011b      	lsls	r3, r3, #4
 800dd48:	b21a      	sxth	r2, r3
 800dd4a:	1d3b      	adds	r3, r7, #4
 800dd4c:	791b      	ldrb	r3, [r3, #4]
 800dd4e:	b21b      	sxth	r3, r3
 800dd50:	210f      	movs	r1, #15
 800dd52:	400b      	ands	r3, r1
 800dd54:	b21b      	sxth	r3, r3
 800dd56:	4313      	orrs	r3, r2
 800dd58:	b21a      	sxth	r2, r3
	dig_H4 =
 800dd5a:	4b1e      	ldr	r3, [pc, #120]	; (800ddd4 <sensingInit+0x248>)
 800dd5c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4 | ((int16_t) dig_H_2_6[5]) << 4);
 800dd5e:	1d3b      	adds	r3, r7, #4
 800dd60:	791b      	ldrb	r3, [r3, #4]
 800dd62:	091b      	lsrs	r3, r3, #4
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	b21a      	sxth	r2, r3
 800dd68:	1d3b      	adds	r3, r7, #4
 800dd6a:	795b      	ldrb	r3, [r3, #5]
 800dd6c:	011b      	lsls	r3, r3, #4
 800dd6e:	b21b      	sxth	r3, r3
 800dd70:	4313      	orrs	r3, r2
 800dd72:	b21a      	sxth	r2, r3
 800dd74:	4b18      	ldr	r3, [pc, #96]	; (800ddd8 <sensingInit+0x24c>)
 800dd76:	801a      	strh	r2, [r3, #0]
	dig_H6 = ((unsigned char) dig_H_2_6[6]);
 800dd78:	1d3b      	adds	r3, r7, #4
 800dd7a:	799a      	ldrb	r2, [r3, #6]
 800dd7c:	4b17      	ldr	r3, [pc, #92]	; (800dddc <sensingInit+0x250>)
 800dd7e:	701a      	strb	r2, [r3, #0]

}
 800dd80:	46c0      	nop			; (mov r8, r8)
 800dd82:	46bd      	mov	sp, r7
 800dd84:	b00b      	add	sp, #44	; 0x2c
 800dd86:	bd90      	pop	{r4, r7, pc}
 800dd88:	20000344 	.word	0x20000344
 800dd8c:	20000460 	.word	0x20000460
 800dd90:	2000003a 	.word	0x2000003a
 800dd94:	20000150 	.word	0x20000150
 800dd98:	20000134 	.word	0x20000134
 800dd9c:	20000388 	.word	0x20000388
 800dda0:	200007ac 	.word	0x200007ac
 800dda4:	2000076e 	.word	0x2000076e
 800dda8:	20000454 	.word	0x20000454
 800ddac:	20000770 	.word	0x20000770
 800ddb0:	20000458 	.word	0x20000458
 800ddb4:	200006f6 	.word	0x200006f6
 800ddb8:	200007ba 	.word	0x200007ba
 800ddbc:	20000130 	.word	0x20000130
 800ddc0:	20000772 	.word	0x20000772
 800ddc4:	200007aa 	.word	0x200007aa
 800ddc8:	200003c3 	.word	0x200003c3
 800ddcc:	200007c8 	.word	0x200007c8
 800ddd0:	2000079d 	.word	0x2000079d
 800ddd4:	20000386 	.word	0x20000386
 800ddd8:	20000782 	.word	0x20000782
 800dddc:	200004c6 	.word	0x200004c6

0800dde0 <sensingRead>:

void sensingRead(void) {
 800dde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dde2:	b095      	sub	sp, #84	; 0x54
 800dde4:	af04      	add	r7, sp, #16

	//								ADC READINGS

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 800dde6:	49b1      	ldr	r1, [pc, #708]	; (800e0ac <sensingRead+0x2cc>)
 800dde8:	4bb1      	ldr	r3, [pc, #708]	; (800e0b0 <sensingRead+0x2d0>)
 800ddea:	2203      	movs	r2, #3
 800ddec:	0018      	movs	r0, r3
 800ddee:	f7f8 fa0d 	bl	800620c <HAL_ADC_Start_DMA>
	float voltagePassiveRaw;
	float voltageDropRaw;
	float currentRaw;
	float resistanceRaw;

	voltageBatteryRaw = ((3300 * adcReading[0]) / 4095) * 2;
 800ddf2:	4bae      	ldr	r3, [pc, #696]	; (800e0ac <sensingRead+0x2cc>)
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	001a      	movs	r2, r3
 800ddfa:	4bae      	ldr	r3, [pc, #696]	; (800e0b4 <sensingRead+0x2d4>)
 800ddfc:	4353      	muls	r3, r2
 800ddfe:	49ae      	ldr	r1, [pc, #696]	; (800e0b8 <sensingRead+0x2d8>)
 800de00:	0018      	movs	r0, r3
 800de02:	f7f2 fa11 	bl	8000228 <__divsi3>
 800de06:	0003      	movs	r3, r0
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	637b      	str	r3, [r7, #52]	; 0x34

	if (voltageBatteryRaw < batteryLevels[0])
 800de0c:	4bab      	ldr	r3, [pc, #684]	; (800e0bc <sensingRead+0x2dc>)
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	001a      	movs	r2, r3
 800de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de14:	4293      	cmp	r3, r2
 800de16:	d202      	bcs.n	800de1e <sensingRead+0x3e>
		batteryState = 8;
 800de18:	4ba9      	ldr	r3, [pc, #676]	; (800e0c0 <sensingRead+0x2e0>)
 800de1a:	2208      	movs	r2, #8
 800de1c:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[0]
 800de1e:	4ba7      	ldr	r3, [pc, #668]	; (800e0bc <sensingRead+0x2dc>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	001a      	movs	r2, r3
 800de24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de26:	4293      	cmp	r3, r2
 800de28:	d308      	bcc.n	800de3c <sensingRead+0x5c>
			&& voltageBatteryRaw < batteryLevels[1])
 800de2a:	4ba4      	ldr	r3, [pc, #656]	; (800e0bc <sensingRead+0x2dc>)
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	001a      	movs	r2, r3
 800de30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de32:	4293      	cmp	r3, r2
 800de34:	d202      	bcs.n	800de3c <sensingRead+0x5c>
		batteryState = 7;
 800de36:	4ba2      	ldr	r3, [pc, #648]	; (800e0c0 <sensingRead+0x2e0>)
 800de38:	2207      	movs	r2, #7
 800de3a:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[1]
 800de3c:	4b9f      	ldr	r3, [pc, #636]	; (800e0bc <sensingRead+0x2dc>)
 800de3e:	885b      	ldrh	r3, [r3, #2]
 800de40:	001a      	movs	r2, r3
 800de42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de44:	4293      	cmp	r3, r2
 800de46:	d308      	bcc.n	800de5a <sensingRead+0x7a>
			&& voltageBatteryRaw < batteryLevels[2])
 800de48:	4b9c      	ldr	r3, [pc, #624]	; (800e0bc <sensingRead+0x2dc>)
 800de4a:	889b      	ldrh	r3, [r3, #4]
 800de4c:	001a      	movs	r2, r3
 800de4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de50:	4293      	cmp	r3, r2
 800de52:	d202      	bcs.n	800de5a <sensingRead+0x7a>
		batteryState = 6;
 800de54:	4b9a      	ldr	r3, [pc, #616]	; (800e0c0 <sensingRead+0x2e0>)
 800de56:	2206      	movs	r2, #6
 800de58:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[2]
 800de5a:	4b98      	ldr	r3, [pc, #608]	; (800e0bc <sensingRead+0x2dc>)
 800de5c:	889b      	ldrh	r3, [r3, #4]
 800de5e:	001a      	movs	r2, r3
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	4293      	cmp	r3, r2
 800de64:	d308      	bcc.n	800de78 <sensingRead+0x98>
			&& voltageBatteryRaw < batteryLevels[3])
 800de66:	4b95      	ldr	r3, [pc, #596]	; (800e0bc <sensingRead+0x2dc>)
 800de68:	88db      	ldrh	r3, [r3, #6]
 800de6a:	001a      	movs	r2, r3
 800de6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6e:	4293      	cmp	r3, r2
 800de70:	d202      	bcs.n	800de78 <sensingRead+0x98>
		batteryState = 5;
 800de72:	4b93      	ldr	r3, [pc, #588]	; (800e0c0 <sensingRead+0x2e0>)
 800de74:	2205      	movs	r2, #5
 800de76:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[3]
 800de78:	4b90      	ldr	r3, [pc, #576]	; (800e0bc <sensingRead+0x2dc>)
 800de7a:	88db      	ldrh	r3, [r3, #6]
 800de7c:	001a      	movs	r2, r3
 800de7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de80:	4293      	cmp	r3, r2
 800de82:	d308      	bcc.n	800de96 <sensingRead+0xb6>
			&& voltageBatteryRaw < batteryLevels[4])
 800de84:	4b8d      	ldr	r3, [pc, #564]	; (800e0bc <sensingRead+0x2dc>)
 800de86:	891b      	ldrh	r3, [r3, #8]
 800de88:	001a      	movs	r2, r3
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d202      	bcs.n	800de96 <sensingRead+0xb6>
		batteryState = 4;
 800de90:	4b8b      	ldr	r3, [pc, #556]	; (800e0c0 <sensingRead+0x2e0>)
 800de92:	2204      	movs	r2, #4
 800de94:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[4]
 800de96:	4b89      	ldr	r3, [pc, #548]	; (800e0bc <sensingRead+0x2dc>)
 800de98:	891b      	ldrh	r3, [r3, #8]
 800de9a:	001a      	movs	r2, r3
 800de9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d308      	bcc.n	800deb4 <sensingRead+0xd4>
			&& voltageBatteryRaw < batteryLevels[5])
 800dea2:	4b86      	ldr	r3, [pc, #536]	; (800e0bc <sensingRead+0x2dc>)
 800dea4:	895b      	ldrh	r3, [r3, #10]
 800dea6:	001a      	movs	r2, r3
 800dea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deaa:	4293      	cmp	r3, r2
 800deac:	d202      	bcs.n	800deb4 <sensingRead+0xd4>
		batteryState = 3;
 800deae:	4b84      	ldr	r3, [pc, #528]	; (800e0c0 <sensingRead+0x2e0>)
 800deb0:	2203      	movs	r2, #3
 800deb2:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[5]
 800deb4:	4b81      	ldr	r3, [pc, #516]	; (800e0bc <sensingRead+0x2dc>)
 800deb6:	895b      	ldrh	r3, [r3, #10]
 800deb8:	001a      	movs	r2, r3
 800deba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debc:	4293      	cmp	r3, r2
 800debe:	d308      	bcc.n	800ded2 <sensingRead+0xf2>
			&& voltageBatteryRaw < batteryLevels[6])
 800dec0:	4b7e      	ldr	r3, [pc, #504]	; (800e0bc <sensingRead+0x2dc>)
 800dec2:	899b      	ldrh	r3, [r3, #12]
 800dec4:	001a      	movs	r2, r3
 800dec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec8:	4293      	cmp	r3, r2
 800deca:	d202      	bcs.n	800ded2 <sensingRead+0xf2>
		batteryState = 2;
 800decc:	4b7c      	ldr	r3, [pc, #496]	; (800e0c0 <sensingRead+0x2e0>)
 800dece:	2202      	movs	r2, #2
 800ded0:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[6])
 800ded2:	4b7a      	ldr	r3, [pc, #488]	; (800e0bc <sensingRead+0x2dc>)
 800ded4:	899b      	ldrh	r3, [r3, #12]
 800ded6:	001a      	movs	r2, r3
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deda:	4293      	cmp	r3, r2
 800dedc:	d302      	bcc.n	800dee4 <sensingRead+0x104>
		batteryState = 1;
 800dede:	4b78      	ldr	r3, [pc, #480]	; (800e0c0 <sensingRead+0x2e0>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	701a      	strb	r2, [r3, #0]

	memset(voltagePassive, 0, 5);
 800dee4:	4b77      	ldr	r3, [pc, #476]	; (800e0c4 <sensingRead+0x2e4>)
 800dee6:	2205      	movs	r2, #5
 800dee8:	2100      	movs	r1, #0
 800deea:	0018      	movs	r0, r3
 800deec:	f002 fc0a 	bl	8010704 <memset>
	if (adcReading[1] > 100) {
 800def0:	4b6e      	ldr	r3, [pc, #440]	; (800e0ac <sensingRead+0x2cc>)
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	b29b      	uxth	r3, r3
 800def6:	2b64      	cmp	r3, #100	; 0x64
 800def8:	d940      	bls.n	800df7c <sensingRead+0x19c>
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 800defa:	4b6c      	ldr	r3, [pc, #432]	; (800e0ac <sensingRead+0x2cc>)
 800defc:	885b      	ldrh	r3, [r3, #2]
 800defe:	b29b      	uxth	r3, r3
 800df00:	0018      	movs	r0, r3
 800df02:	f7f3 fa43 	bl	800138c <__aeabi_ui2f>
 800df06:	1c06      	adds	r6, r0, #0
 800df08:	4b6f      	ldr	r3, [pc, #444]	; (800e0c8 <sensingRead+0x2e8>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	0018      	movs	r0, r3
 800df0e:	f7f3 f9f7 	bl	8001300 <__aeabi_i2f>
 800df12:	1c03      	adds	r3, r0, #0
 800df14:	1c19      	adds	r1, r3, #0
 800df16:	1c30      	adds	r0, r6, #0
 800df18:	f7f2 fb8a 	bl	8000630 <__aeabi_fadd>
 800df1c:	1c03      	adds	r3, r0, #0
 800df1e:	1c18      	adds	r0, r3, #0
 800df20:	f7f5 f888 	bl	8003034 <__aeabi_f2d>
 800df24:	4a69      	ldr	r2, [pc, #420]	; (800e0cc <sensingRead+0x2ec>)
 800df26:	4b6a      	ldr	r3, [pc, #424]	; (800e0d0 <sensingRead+0x2f0>)
 800df28:	f7f4 f9dc 	bl	80022e4 <__aeabi_dmul>
 800df2c:	0002      	movs	r2, r0
 800df2e:	000b      	movs	r3, r1
 800df30:	0010      	movs	r0, r2
 800df32:	0019      	movs	r1, r3
				/ 4095) * 40)) * gainVoltagePassive;
 800df34:	2200      	movs	r2, #0
 800df36:	4b67      	ldr	r3, [pc, #412]	; (800e0d4 <sensingRead+0x2f4>)
 800df38:	f7f3 fdce 	bl	8001ad8 <__aeabi_ddiv>
 800df3c:	0002      	movs	r2, r0
 800df3e:	000b      	movs	r3, r1
 800df40:	0010      	movs	r0, r2
 800df42:	0019      	movs	r1, r3
 800df44:	2200      	movs	r2, #0
 800df46:	4b64      	ldr	r3, [pc, #400]	; (800e0d8 <sensingRead+0x2f8>)
 800df48:	f7f4 f9cc 	bl	80022e4 <__aeabi_dmul>
 800df4c:	0002      	movs	r2, r0
 800df4e:	000b      	movs	r3, r1
 800df50:	603a      	str	r2, [r7, #0]
 800df52:	607b      	str	r3, [r7, #4]
 800df54:	4b61      	ldr	r3, [pc, #388]	; (800e0dc <sensingRead+0x2fc>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	1c18      	adds	r0, r3, #0
 800df5a:	f7f5 f86b 	bl	8003034 <__aeabi_f2d>
 800df5e:	0002      	movs	r2, r0
 800df60:	000b      	movs	r3, r1
 800df62:	6838      	ldr	r0, [r7, #0]
 800df64:	6879      	ldr	r1, [r7, #4]
 800df66:	f7f4 f9bd 	bl	80022e4 <__aeabi_dmul>
 800df6a:	0002      	movs	r2, r0
 800df6c:	000b      	movs	r3, r1
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 800df6e:	0010      	movs	r0, r2
 800df70:	0019      	movs	r1, r3
 800df72:	f7f5 f8a7 	bl	80030c4 <__aeabi_d2f>
 800df76:	1c03      	adds	r3, r0, #0
 800df78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df7a:	e001      	b.n	800df80 <sensingRead+0x1a0>
	} else {
		voltagePassiveRaw = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (voltagePassiveRaw == 0) {
 800df80:	2100      	movs	r1, #0
 800df82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df84:	f7f2 fa86 	bl	8000494 <__aeabi_fcmpeq>
 800df88:	1e03      	subs	r3, r0, #0
 800df8a:	d006      	beq.n	800df9a <sensingRead+0x1ba>
		sprintf(voltagePassive, "--");
 800df8c:	4a54      	ldr	r2, [pc, #336]	; (800e0e0 <sensingRead+0x300>)
 800df8e:	4b4d      	ldr	r3, [pc, #308]	; (800e0c4 <sensingRead+0x2e4>)
 800df90:	0011      	movs	r1, r2
 800df92:	0018      	movs	r0, r3
 800df94:	f002 fd0e 	bl	80109b4 <siprintf>
 800df98:	e005      	b.n	800dfa6 <sensingRead+0x1c6>
	} else {
		float2Text(voltagePassive, voltagePassiveRaw);
 800df9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df9c:	4b49      	ldr	r3, [pc, #292]	; (800e0c4 <sensingRead+0x2e4>)
 800df9e:	1c11      	adds	r1, r2, #0
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	f7ff fdc5 	bl	800db30 <float2Text>
	}

	memset(voltageDrop, 0, 5);
 800dfa6:	4b4f      	ldr	r3, [pc, #316]	; (800e0e4 <sensingRead+0x304>)
 800dfa8:	2205      	movs	r2, #5
 800dfaa:	2100      	movs	r1, #0
 800dfac:	0018      	movs	r0, r3
 800dfae:	f002 fba9 	bl	8010704 <memset>
	if (adcReading[2] < 3200) {
 800dfb2:	4b3e      	ldr	r3, [pc, #248]	; (800e0ac <sensingRead+0x2cc>)
 800dfb4:	889b      	ldrh	r3, [r3, #4]
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	23c8      	movs	r3, #200	; 0xc8
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d229      	bcs.n	800e014 <sensingRead+0x234>
		voltageDropRaw = ((3.3 * ((float) adcReading[2] + offsetADC)) / 4095);
 800dfc0:	4b3a      	ldr	r3, [pc, #232]	; (800e0ac <sensingRead+0x2cc>)
 800dfc2:	889b      	ldrh	r3, [r3, #4]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f7f3 f9e0 	bl	800138c <__aeabi_ui2f>
 800dfcc:	1c06      	adds	r6, r0, #0
 800dfce:	4b3e      	ldr	r3, [pc, #248]	; (800e0c8 <sensingRead+0x2e8>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	f7f3 f994 	bl	8001300 <__aeabi_i2f>
 800dfd8:	1c03      	adds	r3, r0, #0
 800dfda:	1c19      	adds	r1, r3, #0
 800dfdc:	1c30      	adds	r0, r6, #0
 800dfde:	f7f2 fb27 	bl	8000630 <__aeabi_fadd>
 800dfe2:	1c03      	adds	r3, r0, #0
 800dfe4:	1c18      	adds	r0, r3, #0
 800dfe6:	f7f5 f825 	bl	8003034 <__aeabi_f2d>
 800dfea:	4a38      	ldr	r2, [pc, #224]	; (800e0cc <sensingRead+0x2ec>)
 800dfec:	4b38      	ldr	r3, [pc, #224]	; (800e0d0 <sensingRead+0x2f0>)
 800dfee:	f7f4 f979 	bl	80022e4 <__aeabi_dmul>
 800dff2:	0002      	movs	r2, r0
 800dff4:	000b      	movs	r3, r1
 800dff6:	0010      	movs	r0, r2
 800dff8:	0019      	movs	r1, r3
 800dffa:	2200      	movs	r2, #0
 800dffc:	4b35      	ldr	r3, [pc, #212]	; (800e0d4 <sensingRead+0x2f4>)
 800dffe:	f7f3 fd6b 	bl	8001ad8 <__aeabi_ddiv>
 800e002:	0002      	movs	r2, r0
 800e004:	000b      	movs	r3, r1
 800e006:	0010      	movs	r0, r2
 800e008:	0019      	movs	r1, r3
 800e00a:	f7f5 f85b 	bl	80030c4 <__aeabi_d2f>
 800e00e:	1c03      	adds	r3, r0, #0
 800e010:	63bb      	str	r3, [r7, #56]	; 0x38
 800e012:	e001      	b.n	800e018 <sensingRead+0x238>

//		voltageDropRaw = voltageDropRaw - 0.59; //offset correction

	} else {
		voltageDropRaw = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (voltageDropRaw == 0) {
 800e018:	2100      	movs	r1, #0
 800e01a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e01c:	f7f2 fa3a 	bl	8000494 <__aeabi_fcmpeq>
 800e020:	1e03      	subs	r3, r0, #0
 800e022:	d006      	beq.n	800e032 <sensingRead+0x252>
		sprintf(voltageDrop, "--");
 800e024:	4a2e      	ldr	r2, [pc, #184]	; (800e0e0 <sensingRead+0x300>)
 800e026:	4b2f      	ldr	r3, [pc, #188]	; (800e0e4 <sensingRead+0x304>)
 800e028:	0011      	movs	r1, r2
 800e02a:	0018      	movs	r0, r3
 800e02c:	f002 fcc2 	bl	80109b4 <siprintf>
 800e030:	e005      	b.n	800e03e <sensingRead+0x25e>
	} else {
		float2Text(voltageDrop, voltageDropRaw);
 800e032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e034:	4b2b      	ldr	r3, [pc, #172]	; (800e0e4 <sensingRead+0x304>)
 800e036:	1c11      	adds	r1, r2, #0
 800e038:	0018      	movs	r0, r3
 800e03a:	f7ff fd79 	bl	800db30 <float2Text>
	}

	memset(resistance, 0, 5);
 800e03e:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <sensingRead+0x308>)
 800e040:	2205      	movs	r2, #5
 800e042:	2100      	movs	r1, #0
 800e044:	0018      	movs	r0, r3
 800e046:	f002 fb5d 	bl	8010704 <memset>
	currentRaw = (3.3 - voltageDropRaw) / 10000;
 800e04a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e04c:	f7f4 fff2 	bl	8003034 <__aeabi_f2d>
 800e050:	0002      	movs	r2, r0
 800e052:	000b      	movs	r3, r1
 800e054:	481d      	ldr	r0, [pc, #116]	; (800e0cc <sensingRead+0x2ec>)
 800e056:	491e      	ldr	r1, [pc, #120]	; (800e0d0 <sensingRead+0x2f0>)
 800e058:	f7f4 fbb0 	bl	80027bc <__aeabi_dsub>
 800e05c:	0002      	movs	r2, r0
 800e05e:	000b      	movs	r3, r1
 800e060:	0010      	movs	r0, r2
 800e062:	0019      	movs	r1, r3
 800e064:	2200      	movs	r2, #0
 800e066:	4b21      	ldr	r3, [pc, #132]	; (800e0ec <sensingRead+0x30c>)
 800e068:	f7f3 fd36 	bl	8001ad8 <__aeabi_ddiv>
 800e06c:	0002      	movs	r2, r0
 800e06e:	000b      	movs	r3, r1
 800e070:	0010      	movs	r0, r2
 800e072:	0019      	movs	r1, r3
 800e074:	f7f5 f826 	bl	80030c4 <__aeabi_d2f>
 800e078:	1c03      	adds	r3, r0, #0
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30
	resistanceRaw = (voltageDropRaw / currentRaw) / 1000;
 800e07c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e07e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e080:	f7f2 fc72 	bl	8000968 <__aeabi_fdiv>
 800e084:	1c03      	adds	r3, r0, #0
 800e086:	491a      	ldr	r1, [pc, #104]	; (800e0f0 <sensingRead+0x310>)
 800e088:	1c18      	adds	r0, r3, #0
 800e08a:	f7f2 fc6d 	bl	8000968 <__aeabi_fdiv>
 800e08e:	1c03      	adds	r3, r0, #0
 800e090:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (voltageDropRaw == 0) {
 800e092:	2100      	movs	r1, #0
 800e094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e096:	f7f2 f9fd 	bl	8000494 <__aeabi_fcmpeq>
 800e09a:	1e03      	subs	r3, r0, #0
 800e09c:	d02a      	beq.n	800e0f4 <sensingRead+0x314>
		sprintf(resistance, "--");
 800e09e:	4a10      	ldr	r2, [pc, #64]	; (800e0e0 <sensingRead+0x300>)
 800e0a0:	4b11      	ldr	r3, [pc, #68]	; (800e0e8 <sensingRead+0x308>)
 800e0a2:	0011      	movs	r1, r2
 800e0a4:	0018      	movs	r0, r3
 800e0a6:	f002 fc85 	bl	80109b4 <siprintf>
 800e0aa:	e029      	b.n	800e100 <sensingRead+0x320>
 800e0ac:	20000344 	.word	0x20000344
 800e0b0:	20000460 	.word	0x20000460
 800e0b4:	00000ce4 	.word	0x00000ce4
 800e0b8:	00000fff 	.word	0x00000fff
 800e0bc:	2000002c 	.word	0x2000002c
 800e0c0:	200003b8 	.word	0x200003b8
 800e0c4:	20000664 	.word	0x20000664
 800e0c8:	2000003c 	.word	0x2000003c
 800e0cc:	66666666 	.word	0x66666666
 800e0d0:	400a6666 	.word	0x400a6666
 800e0d4:	40affe00 	.word	0x40affe00
 800e0d8:	40440000 	.word	0x40440000
 800e0dc:	20000040 	.word	0x20000040
 800e0e0:	080133f8 	.word	0x080133f8
 800e0e4:	200006f0 	.word	0x200006f0
 800e0e8:	2000077c 	.word	0x2000077c
 800e0ec:	40c38800 	.word	0x40c38800
 800e0f0:	447a0000 	.word	0x447a0000
	} else {
		float2Text(resistance, resistanceRaw);
 800e0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0f6:	4bf9      	ldr	r3, [pc, #996]	; (800e4dc <sensingRead+0x6fc>)
 800e0f8:	1c11      	adds	r1, r2, #0
 800e0fa:	0018      	movs	r0, r3
 800e0fc:	f7ff fd18 	bl	800db30 <float2Text>
	}

//								BME280 READINGS

//I2C read data
	uint8_t temperatureMSB = 0;
 800e100:	2311      	movs	r3, #17
 800e102:	2208      	movs	r2, #8
 800e104:	4694      	mov	ip, r2
 800e106:	44bc      	add	ip, r7
 800e108:	4463      	add	r3, ip
 800e10a:	2200      	movs	r2, #0
 800e10c:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 800e10e:	2310      	movs	r3, #16
 800e110:	2208      	movs	r2, #8
 800e112:	4694      	mov	ip, r2
 800e114:	44bc      	add	ip, r7
 800e116:	4463      	add	r3, ip
 800e118:	2200      	movs	r2, #0
 800e11a:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 800e11c:	230f      	movs	r3, #15
 800e11e:	2208      	movs	r2, #8
 800e120:	4694      	mov	ip, r2
 800e122:	44bc      	add	ip, r7
 800e124:	4463      	add	r3, ip
 800e126:	2200      	movs	r2, #0
 800e128:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 800e12a:	230e      	movs	r3, #14
 800e12c:	2208      	movs	r2, #8
 800e12e:	4694      	mov	ip, r2
 800e130:	44bc      	add	ip, r7
 800e132:	4463      	add	r3, ip
 800e134:	2200      	movs	r2, #0
 800e136:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 800e138:	230d      	movs	r3, #13
 800e13a:	2208      	movs	r2, #8
 800e13c:	4694      	mov	ip, r2
 800e13e:	44bc      	add	ip, r7
 800e140:	4463      	add	r3, ip
 800e142:	2200      	movs	r2, #0
 800e144:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 800e146:	230c      	movs	r3, #12
 800e148:	2208      	movs	r2, #8
 800e14a:	4694      	mov	ip, r2
 800e14c:	44bc      	add	ip, r7
 800e14e:	4463      	add	r3, ip
 800e150:	2200      	movs	r2, #0
 800e152:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 800e154:	230b      	movs	r3, #11
 800e156:	2208      	movs	r2, #8
 800e158:	4694      	mov	ip, r2
 800e15a:	44bc      	add	ip, r7
 800e15c:	4463      	add	r3, ip
 800e15e:	2200      	movs	r2, #0
 800e160:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 800e162:	230a      	movs	r3, #10
 800e164:	2208      	movs	r2, #8
 800e166:	4694      	mov	ip, r2
 800e168:	44bc      	add	ip, r7
 800e16a:	4463      	add	r3, ip
 800e16c:	2200      	movs	r2, #0
 800e16e:	701a      	strb	r2, [r3, #0]

	//adc data
	BME280_S32_t temperatureADC = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	62bb      	str	r3, [r7, #40]	; 0x28
	BME280_S32_t pressureADC = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
	BME280_S32_t humidityADC = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	623b      	str	r3, [r7, #32]

	//configure oversampling for hum
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_HUM, 1, &ctrlHum, 1,
 800e17c:	48d8      	ldr	r0, [pc, #864]	; (800e4e0 <sensingRead+0x700>)
 800e17e:	2332      	movs	r3, #50	; 0x32
 800e180:	9302      	str	r3, [sp, #8]
 800e182:	2301      	movs	r3, #1
 800e184:	9301      	str	r3, [sp, #4]
 800e186:	4bd7      	ldr	r3, [pc, #860]	; (800e4e4 <sensingRead+0x704>)
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	2301      	movs	r3, #1
 800e18c:	22f2      	movs	r2, #242	; 0xf2
 800e18e:	21ee      	movs	r1, #238	; 0xee
 800e190:	f7f9 f960 	bl	8007454 <HAL_I2C_Mem_Write>
 800e194:	1e03      	subs	r3, r0, #0
 800e196:	d001      	beq.n	800e19c <sensingRead+0x3bc>
			50) != HAL_OK) {
		Error_Handler();
 800e198:	f001 ff40 	bl	801001c <Error_Handler>
	};

	//configure oversampling for press, temp
	//configure mode as force
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_MEAS, 1, &ctrlMeas,
 800e19c:	48d0      	ldr	r0, [pc, #832]	; (800e4e0 <sensingRead+0x700>)
 800e19e:	2332      	movs	r3, #50	; 0x32
 800e1a0:	9302      	str	r3, [sp, #8]
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	9301      	str	r3, [sp, #4]
 800e1a6:	4bd0      	ldr	r3, [pc, #832]	; (800e4e8 <sensingRead+0x708>)
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	22f4      	movs	r2, #244	; 0xf4
 800e1ae:	21ee      	movs	r1, #238	; 0xee
 800e1b0:	f7f9 f950 	bl	8007454 <HAL_I2C_Mem_Write>
 800e1b4:	1e03      	subs	r3, r0, #0
 800e1b6:	d001      	beq.n	800e1bc <sensingRead+0x3dc>
			1, 50) != HAL_OK) {
		Error_Handler();
 800e1b8:	f001 ff30 	bl	801001c <Error_Handler>
		;
	}

//wait for end
	HAL_Delay(70);
 800e1bc:	2046      	movs	r0, #70	; 0x46
 800e1be:	f7f7 fcc7 	bl	8005b50 <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_MSB, 1, &humidityMSB, 1,
 800e1c2:	4bca      	ldr	r3, [pc, #808]	; (800e4ec <sensingRead+0x70c>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	48c6      	ldr	r0, [pc, #792]	; (800e4e0 <sensingRead+0x700>)
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	260b      	movs	r6, #11
 800e1d0:	2308      	movs	r3, #8
 800e1d2:	18fa      	adds	r2, r7, r3
 800e1d4:	1993      	adds	r3, r2, r6
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	2301      	movs	r3, #1
 800e1da:	22fd      	movs	r2, #253	; 0xfd
 800e1dc:	21ee      	movs	r1, #238	; 0xee
 800e1de:	f7f9 fa67 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_LSB, 1, &humidityLSB, 1,
 800e1e2:	4bc2      	ldr	r3, [pc, #776]	; (800e4ec <sensingRead+0x70c>)
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	48be      	ldr	r0, [pc, #760]	; (800e4e0 <sensingRead+0x700>)
 800e1e8:	9302      	str	r3, [sp, #8]
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	230a      	movs	r3, #10
 800e1f0:	2208      	movs	r2, #8
 800e1f2:	4694      	mov	ip, r2
 800e1f4:	44bc      	add	ip, r7
 800e1f6:	4463      	add	r3, ip
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	22fe      	movs	r2, #254	; 0xfe
 800e1fe:	21ee      	movs	r1, #238	; 0xee
 800e200:	f7f9 fa56 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 800e204:	2308      	movs	r3, #8
 800e206:	18fa      	adds	r2, r7, r3
 800e208:	1993      	adds	r3, r2, r6
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	220a      	movs	r2, #10
 800e210:	2108      	movs	r1, #8
 800e212:	468c      	mov	ip, r1
 800e214:	44bc      	add	ip, r7
 800e216:	4462      	add	r2, ip
 800e218:	7812      	ldrb	r2, [r2, #0]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	623b      	str	r3, [r7, #32]

	humidityValue = BME280_compensate_H_int32(humidityADC) / 1024;
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	0018      	movs	r0, r3
 800e222:	f000 fcd7 	bl	800ebd4 <BME280_compensate_H_int32>
 800e226:	0003      	movs	r3, r0
 800e228:	0a9a      	lsrs	r2, r3, #10
 800e22a:	4bb1      	ldr	r3, [pc, #708]	; (800e4f0 <sensingRead+0x710>)
 800e22c:	601a      	str	r2, [r3, #0]

	//TEMPERATURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_MSB, 1, &temperatureMSB,
 800e22e:	4baf      	ldr	r3, [pc, #700]	; (800e4ec <sensingRead+0x70c>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	48ab      	ldr	r0, [pc, #684]	; (800e4e0 <sensingRead+0x700>)
 800e234:	9302      	str	r3, [sp, #8]
 800e236:	2301      	movs	r3, #1
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	2611      	movs	r6, #17
 800e23c:	2308      	movs	r3, #8
 800e23e:	18fa      	adds	r2, r7, r3
 800e240:	1993      	adds	r3, r2, r6
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	2301      	movs	r3, #1
 800e246:	22fa      	movs	r2, #250	; 0xfa
 800e248:	21ee      	movs	r1, #238	; 0xee
 800e24a:	f7f9 fa31 	bl	80076b0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_LSB, 1, &temperatureLSB,
 800e24e:	4ba7      	ldr	r3, [pc, #668]	; (800e4ec <sensingRead+0x70c>)
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	48a3      	ldr	r0, [pc, #652]	; (800e4e0 <sensingRead+0x700>)
 800e254:	9302      	str	r3, [sp, #8]
 800e256:	2301      	movs	r3, #1
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	2310      	movs	r3, #16
 800e25c:	2208      	movs	r2, #8
 800e25e:	4694      	mov	ip, r2
 800e260:	44bc      	add	ip, r7
 800e262:	4463      	add	r3, ip
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	2301      	movs	r3, #1
 800e268:	22fb      	movs	r2, #251	; 0xfb
 800e26a:	21ee      	movs	r1, #238	; 0xee
 800e26c:	f7f9 fa20 	bl	80076b0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_XLSB, 1, &temperatureXLSB,
 800e270:	4b9e      	ldr	r3, [pc, #632]	; (800e4ec <sensingRead+0x70c>)
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	489a      	ldr	r0, [pc, #616]	; (800e4e0 <sensingRead+0x700>)
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	2301      	movs	r3, #1
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	220f      	movs	r2, #15
 800e27e:	2308      	movs	r3, #8
 800e280:	18f9      	adds	r1, r7, r3
 800e282:	188b      	adds	r3, r1, r2
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	2301      	movs	r3, #1
 800e288:	22fc      	movs	r2, #252	; 0xfc
 800e28a:	21ee      	movs	r1, #238	; 0xee
 800e28c:	f7f9 fa10 	bl	80076b0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 800e290:	2308      	movs	r3, #8
 800e292:	18fa      	adds	r2, r7, r3
 800e294:	1993      	adds	r3, r2, r6
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	031a      	lsls	r2, r3, #12
 800e29a:	2310      	movs	r3, #16
 800e29c:	2108      	movs	r1, #8
 800e29e:	468c      	mov	ip, r1
 800e2a0:	44bc      	add	ip, r7
 800e2a2:	4463      	add	r3, ip
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 800e2aa:	220f      	movs	r2, #15
 800e2ac:	2108      	movs	r1, #8
 800e2ae:	468c      	mov	ip, r1
 800e2b0:	44bc      	add	ip, r7
 800e2b2:	4462      	add	r2, ip
 800e2b4:	7812      	ldrb	r2, [r2, #0]
 800e2b6:	0912      	lsrs	r2, r2, #4
 800e2b8:	b2d2      	uxtb	r2, r2
	temperatureADC =
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	62bb      	str	r3, [r7, #40]	; 0x28

	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	0018      	movs	r0, r3
 800e2c2:	f000 fa9f 	bl	800e804 <BME280_compensate_T_int32>
 800e2c6:	0003      	movs	r3, r0
 800e2c8:	2164      	movs	r1, #100	; 0x64
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f7f1 ffac 	bl	8000228 <__divsi3>
 800e2d0:	0003      	movs	r3, r0
 800e2d2:	001a      	movs	r2, r3
			+ temperatureCompensation;
 800e2d4:	4b87      	ldr	r3, [pc, #540]	; (800e4f4 <sensingRead+0x714>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	b25b      	sxtb	r3, r3
 800e2da:	18d2      	adds	r2, r2, r3
	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800e2dc:	4b86      	ldr	r3, [pc, #536]	; (800e4f8 <sensingRead+0x718>)
 800e2de:	601a      	str	r2, [r3, #0]

	//PRESSURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_MSB, 1, &pressureMSB, 1,
 800e2e0:	4b82      	ldr	r3, [pc, #520]	; (800e4ec <sensingRead+0x70c>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	487e      	ldr	r0, [pc, #504]	; (800e4e0 <sensingRead+0x700>)
 800e2e6:	9302      	str	r3, [sp, #8]
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	260e      	movs	r6, #14
 800e2ee:	2308      	movs	r3, #8
 800e2f0:	18fa      	adds	r2, r7, r3
 800e2f2:	1993      	adds	r3, r2, r6
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	22f7      	movs	r2, #247	; 0xf7
 800e2fa:	21ee      	movs	r1, #238	; 0xee
 800e2fc:	f7f9 f9d8 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_LSB, 1, &pressureLSB, 1,
 800e300:	4b7a      	ldr	r3, [pc, #488]	; (800e4ec <sensingRead+0x70c>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	4876      	ldr	r0, [pc, #472]	; (800e4e0 <sensingRead+0x700>)
 800e306:	9302      	str	r3, [sp, #8]
 800e308:	2301      	movs	r3, #1
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	230d      	movs	r3, #13
 800e30e:	2208      	movs	r2, #8
 800e310:	4694      	mov	ip, r2
 800e312:	44bc      	add	ip, r7
 800e314:	4463      	add	r3, ip
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	2301      	movs	r3, #1
 800e31a:	22f8      	movs	r2, #248	; 0xf8
 800e31c:	21ee      	movs	r1, #238	; 0xee
 800e31e:	f7f9 f9c7 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_XLSB, 1, &pressureXLSB,
 800e322:	4b72      	ldr	r3, [pc, #456]	; (800e4ec <sensingRead+0x70c>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	486e      	ldr	r0, [pc, #440]	; (800e4e0 <sensingRead+0x700>)
 800e328:	9302      	str	r3, [sp, #8]
 800e32a:	2301      	movs	r3, #1
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	220c      	movs	r2, #12
 800e330:	2308      	movs	r3, #8
 800e332:	18f9      	adds	r1, r7, r3
 800e334:	188b      	adds	r3, r1, r2
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	2301      	movs	r3, #1
 800e33a:	22f9      	movs	r2, #249	; 0xf9
 800e33c:	21ee      	movs	r1, #238	; 0xee
 800e33e:	f7f9 f9b7 	bl	80076b0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800e342:	2308      	movs	r3, #8
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	199b      	adds	r3, r3, r6
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	031a      	lsls	r2, r3, #12
 800e34c:	230d      	movs	r3, #13
 800e34e:	2108      	movs	r1, #8
 800e350:	468c      	mov	ip, r1
 800e352:	44bc      	add	ip, r7
 800e354:	4463      	add	r3, ip
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	011b      	lsls	r3, r3, #4
 800e35a:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 800e35c:	220c      	movs	r2, #12
 800e35e:	2108      	movs	r1, #8
 800e360:	468c      	mov	ip, r1
 800e362:	44bc      	add	ip, r7
 800e364:	4462      	add	r2, ip
 800e366:	7812      	ldrb	r2, [r2, #0]
 800e368:	0912      	lsrs	r2, r2, #4
 800e36a:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800e36c:	4313      	orrs	r3, r2
 800e36e:	627b      	str	r3, [r7, #36]	; 0x24

	pressureValue = BME280_compensate_P_int64(pressureADC) / 256;
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	0018      	movs	r0, r3
 800e374:	f000 fa82 	bl	800e87c <BME280_compensate_P_int64>
 800e378:	0003      	movs	r3, r0
 800e37a:	0a1a      	lsrs	r2, r3, #8
 800e37c:	4b5f      	ldr	r3, [pc, #380]	; (800e4fc <sensingRead+0x71c>)
 800e37e:	601a      	str	r2, [r3, #0]
	 * R- gas constant[J/(mol*K)]
	 * T- air temperature[K]
	 *
	 */

	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e380:	4b5d      	ldr	r3, [pc, #372]	; (800e4f8 <sensingRead+0x718>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	0018      	movs	r0, r3
 800e386:	f7f2 ffbb 	bl	8001300 <__aeabi_i2f>
 800e38a:	1c03      	adds	r3, r0, #0
 800e38c:	1c18      	adds	r0, r3, #0
 800e38e:	f7f4 fe51 	bl	8003034 <__aeabi_f2d>
 800e392:	4a5b      	ldr	r2, [pc, #364]	; (800e500 <sensingRead+0x720>)
 800e394:	4b5b      	ldr	r3, [pc, #364]	; (800e504 <sensingRead+0x724>)
 800e396:	f7f3 f835 	bl	8001404 <__aeabi_dadd>
 800e39a:	0002      	movs	r2, r0
 800e39c:	000b      	movs	r3, r1
 800e39e:	0010      	movs	r0, r2
 800e3a0:	0019      	movs	r1, r3
 800e3a2:	4a59      	ldr	r2, [pc, #356]	; (800e508 <sensingRead+0x728>)
 800e3a4:	4b59      	ldr	r3, [pc, #356]	; (800e50c <sensingRead+0x72c>)
 800e3a6:	f7f3 ff9d 	bl	80022e4 <__aeabi_dmul>
 800e3aa:	0002      	movs	r2, r0
 800e3ac:	000b      	movs	r3, r1
 800e3ae:	0010      	movs	r0, r2
 800e3b0:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800e3b2:	4a57      	ldr	r2, [pc, #348]	; (800e510 <sensingRead+0x730>)
 800e3b4:	4b57      	ldr	r3, [pc, #348]	; (800e514 <sensingRead+0x734>)
 800e3b6:	f7f3 fb8f 	bl	8001ad8 <__aeabi_ddiv>
 800e3ba:	0002      	movs	r2, r0
 800e3bc:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e3be:	0011      	movs	r1, r2
 800e3c0:	000c      	movs	r4, r1
 800e3c2:	2180      	movs	r1, #128	; 0x80
 800e3c4:	0609      	lsls	r1, r1, #24
 800e3c6:	4059      	eors	r1, r3
 800e3c8:	000d      	movs	r5, r1
			* log((float) pressureValue / ((float) pressureReference * 100));
 800e3ca:	4b4c      	ldr	r3, [pc, #304]	; (800e4fc <sensingRead+0x71c>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	f7f2 ffdc 	bl	800138c <__aeabi_ui2f>
 800e3d4:	1c06      	adds	r6, r0, #0
 800e3d6:	4b50      	ldr	r3, [pc, #320]	; (800e518 <sensingRead+0x738>)
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	b21b      	sxth	r3, r3
 800e3dc:	0018      	movs	r0, r3
 800e3de:	f7f2 ff8f 	bl	8001300 <__aeabi_i2f>
 800e3e2:	1c03      	adds	r3, r0, #0
 800e3e4:	494d      	ldr	r1, [pc, #308]	; (800e51c <sensingRead+0x73c>)
 800e3e6:	1c18      	adds	r0, r3, #0
 800e3e8:	f7f2 fc88 	bl	8000cfc <__aeabi_fmul>
 800e3ec:	1c03      	adds	r3, r0, #0
 800e3ee:	1c19      	adds	r1, r3, #0
 800e3f0:	1c30      	adds	r0, r6, #0
 800e3f2:	f7f2 fab9 	bl	8000968 <__aeabi_fdiv>
 800e3f6:	1c03      	adds	r3, r0, #0
 800e3f8:	1c18      	adds	r0, r3, #0
 800e3fa:	f7f4 fe1b 	bl	8003034 <__aeabi_f2d>
 800e3fe:	0002      	movs	r2, r0
 800e400:	000b      	movs	r3, r1
 800e402:	0010      	movs	r0, r2
 800e404:	0019      	movs	r1, r3
 800e406:	f003 fbf3 	bl	8011bf0 <log>
 800e40a:	0002      	movs	r2, r0
 800e40c:	000b      	movs	r3, r1
 800e40e:	0020      	movs	r0, r4
 800e410:	0029      	movs	r1, r5
 800e412:	f7f3 ff67 	bl	80022e4 <__aeabi_dmul>
 800e416:	0002      	movs	r2, r0
 800e418:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e41a:	0010      	movs	r0, r2
 800e41c:	0019      	movs	r1, r3
 800e41e:	f7f4 fd7d 	bl	8002f1c <__aeabi_d2iz>
 800e422:	0002      	movs	r2, r0
 800e424:	4b3e      	ldr	r3, [pc, #248]	; (800e520 <sensingRead+0x740>)
 800e426:	601a      	str	r2, [r3, #0]

	pressureValue = pressureValue / 100;
 800e428:	4b34      	ldr	r3, [pc, #208]	; (800e4fc <sensingRead+0x71c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2164      	movs	r1, #100	; 0x64
 800e42e:	0018      	movs	r0, r3
 800e430:	f7f1 fe70 	bl	8000114 <__udivsi3>
 800e434:	0003      	movs	r3, r0
 800e436:	001a      	movs	r2, r3
 800e438:	4b30      	ldr	r3, [pc, #192]	; (800e4fc <sensingRead+0x71c>)
 800e43a:	601a      	str	r2, [r3, #0]

	//								LIS3MDL READINGS

	//magnetometer data
	uint8_t magnetXLSB = 0;
 800e43c:	2309      	movs	r3, #9
 800e43e:	2208      	movs	r2, #8
 800e440:	4694      	mov	ip, r2
 800e442:	44bc      	add	ip, r7
 800e444:	4463      	add	r3, ip
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
	uint8_t magnetXMSB = 0;
 800e44a:	2308      	movs	r3, #8
 800e44c:	2208      	movs	r2, #8
 800e44e:	4694      	mov	ip, r2
 800e450:	44bc      	add	ip, r7
 800e452:	4463      	add	r3, ip
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]

	uint8_t magnetYLSB = 0;
 800e458:	230f      	movs	r3, #15
 800e45a:	18fb      	adds	r3, r7, r3
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
	uint8_t magnetYMSB = 0;
 800e460:	230e      	movs	r3, #14
 800e462:	18fb      	adds	r3, r7, r3
 800e464:	2200      	movs	r2, #0
 800e466:	701a      	strb	r2, [r3, #0]

	int16_t magneticFieldXADC;
	int16_t magneticFieldYADC;

	if (HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800e468:	4b20      	ldr	r3, [pc, #128]	; (800e4ec <sensingRead+0x70c>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	481c      	ldr	r0, [pc, #112]	; (800e4e0 <sensingRead+0x700>)
 800e46e:	9302      	str	r3, [sp, #8]
 800e470:	2301      	movs	r3, #1
 800e472:	9301      	str	r3, [sp, #4]
 800e474:	4b2b      	ldr	r3, [pc, #172]	; (800e524 <sensingRead+0x744>)
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	2301      	movs	r3, #1
 800e47a:	2222      	movs	r2, #34	; 0x22
 800e47c:	2138      	movs	r1, #56	; 0x38
 800e47e:	f7f8 ffe9 	bl	8007454 <HAL_I2C_Mem_Write>
 800e482:	1e03      	subs	r3, r0, #0
 800e484:	d001      	beq.n	800e48a <sensingRead+0x6aa>
			&ctrlMagnetometerContinous, 1, i2cTimeout) != HAL_OK) {
		Error_Handler();
 800e486:	f001 fdc9 	bl	801001c <Error_Handler>
	};

	HAL_Delay(20);
 800e48a:	2014      	movs	r0, #20
 800e48c:	f7f7 fb60 	bl	8005b50 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_L, 1, &magnetXLSB, 1,
 800e490:	4b16      	ldr	r3, [pc, #88]	; (800e4ec <sensingRead+0x70c>)
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	4812      	ldr	r0, [pc, #72]	; (800e4e0 <sensingRead+0x700>)
 800e496:	9302      	str	r3, [sp, #8]
 800e498:	2301      	movs	r3, #1
 800e49a:	9301      	str	r3, [sp, #4]
 800e49c:	2409      	movs	r4, #9
 800e49e:	2608      	movs	r6, #8
 800e4a0:	19bb      	adds	r3, r7, r6
 800e4a2:	191b      	adds	r3, r3, r4
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	2228      	movs	r2, #40	; 0x28
 800e4aa:	2138      	movs	r1, #56	; 0x38
 800e4ac:	f7f9 f900 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1, &magnetXMSB, 1,
 800e4b0:	4b0e      	ldr	r3, [pc, #56]	; (800e4ec <sensingRead+0x70c>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	480a      	ldr	r0, [pc, #40]	; (800e4e0 <sensingRead+0x700>)
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	2508      	movs	r5, #8
 800e4be:	19bb      	adds	r3, r7, r6
 800e4c0:	195b      	adds	r3, r3, r5
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	2229      	movs	r2, #41	; 0x29
 800e4c8:	2138      	movs	r1, #56	; 0x38
 800e4ca:	f7f9 f8f1 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_L, 1, &magnetYLSB, 1,
 800e4ce:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <sensingRead+0x70c>)
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	4803      	ldr	r0, [pc, #12]	; (800e4e0 <sensingRead+0x700>)
 800e4d4:	9302      	str	r3, [sp, #8]
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	e025      	b.n	800e528 <sensingRead+0x748>
 800e4dc:	2000077c 	.word	0x2000077c
 800e4e0:	20000150 	.word	0x20000150
 800e4e4:	20000027 	.word	0x20000027
 800e4e8:	20000026 	.word	0x20000026
 800e4ec:	2000003a 	.word	0x2000003a
 800e4f0:	2000013c 	.word	0x2000013c
 800e4f4:	20000029 	.word	0x20000029
 800e4f8:	200003bc 	.word	0x200003bc
 800e4fc:	20000704 	.word	0x20000704
 800e500:	66666666 	.word	0x66666666
 800e504:	40711266 	.word	0x40711266
 800e508:	9ba5e354 	.word	0x9ba5e354
 800e50c:	4020a0c4 	.word	0x4020a0c4
 800e510:	db22d0e5 	.word	0xdb22d0e5
 800e514:	3fd27ef9 	.word	0x3fd27ef9
 800e518:	2000002a 	.word	0x2000002a
 800e51c:	42c80000 	.word	0x42c80000
 800e520:	20000710 	.word	0x20000710
 800e524:	20000108 	.word	0x20000108
 800e528:	230f      	movs	r3, #15
 800e52a:	18fb      	adds	r3, r7, r3
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	2301      	movs	r3, #1
 800e530:	222a      	movs	r2, #42	; 0x2a
 800e532:	2138      	movs	r1, #56	; 0x38
 800e534:	f7f9 f8bc 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_H, 1, &magnetYMSB, 1,
 800e538:	4ba0      	ldr	r3, [pc, #640]	; (800e7bc <sensingRead+0x9dc>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	48a0      	ldr	r0, [pc, #640]	; (800e7c0 <sensingRead+0x9e0>)
 800e53e:	9302      	str	r3, [sp, #8]
 800e540:	2301      	movs	r3, #1
 800e542:	9301      	str	r3, [sp, #4]
 800e544:	230e      	movs	r3, #14
 800e546:	18fb      	adds	r3, r7, r3
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	2301      	movs	r3, #1
 800e54c:	222b      	movs	r2, #43	; 0x2b
 800e54e:	2138      	movs	r1, #56	; 0x38
 800e550:	f7f9 f8ae 	bl	80076b0 <HAL_I2C_Mem_Read>
			i2cTimeout);

	magneticFieldXADC = (int16_t) magnetXMSB << 8 | (int16_t) magnetXLSB;
 800e554:	19ba      	adds	r2, r7, r6
 800e556:	1953      	adds	r3, r2, r5
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	021b      	lsls	r3, r3, #8
 800e55c:	b219      	sxth	r1, r3
 800e55e:	19ba      	adds	r2, r7, r6
 800e560:	1913      	adds	r3, r2, r4
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	b21a      	sxth	r2, r3
 800e566:	2016      	movs	r0, #22
 800e568:	19bc      	adds	r4, r7, r6
 800e56a:	1823      	adds	r3, r4, r0
 800e56c:	430a      	orrs	r2, r1
 800e56e:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = (int16_t) magnetYMSB << 8 | (int16_t) magnetYLSB;
 800e570:	230e      	movs	r3, #14
 800e572:	18fb      	adds	r3, r7, r3
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	021b      	lsls	r3, r3, #8
 800e578:	b219      	sxth	r1, r3
 800e57a:	230f      	movs	r3, #15
 800e57c:	18fb      	adds	r3, r7, r3
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	b21a      	sxth	r2, r3
 800e582:	2414      	movs	r4, #20
 800e584:	19bb      	adds	r3, r7, r6
 800e586:	191b      	adds	r3, r3, r4
 800e588:	430a      	orrs	r2, r1
 800e58a:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL OFFSET CORRECTION

//	//for 4 Gs
	magneticFieldXADC = magneticFieldXADC + offsetMagnetometerX;
 800e58c:	4b8d      	ldr	r3, [pc, #564]	; (800e7c4 <sensingRead+0x9e4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	b29a      	uxth	r2, r3
 800e592:	19bb      	adds	r3, r7, r6
 800e594:	181b      	adds	r3, r3, r0
 800e596:	881b      	ldrh	r3, [r3, #0]
 800e598:	18d3      	adds	r3, r2, r3
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	19bb      	adds	r3, r7, r6
 800e59e:	181b      	adds	r3, r3, r0
 800e5a0:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = magneticFieldYADC + offsetMagnetometerY;
 800e5a2:	4b89      	ldr	r3, [pc, #548]	; (800e7c8 <sensingRead+0x9e8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	19bb      	adds	r3, r7, r6
 800e5aa:	191b      	adds	r3, r3, r4
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	18d3      	adds	r3, r2, r3
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	0035      	movs	r5, r6
 800e5b4:	197b      	adds	r3, r7, r5
 800e5b6:	191b      	adds	r3, r3, r4
 800e5b8:	801a      	strh	r2, [r3, #0]
//	magneticFieldYADC = 0;

	//								LIS3MDL DECREASE VALUE

//	uint16_t magneticFieldDivider = 270;
	uint16_t magneticFieldDivider = 130;
 800e5ba:	2612      	movs	r6, #18
 800e5bc:	197b      	adds	r3, r7, r5
 800e5be:	199b      	adds	r3, r3, r6
 800e5c0:	2282      	movs	r2, #130	; 0x82
 800e5c2:	801a      	strh	r2, [r3, #0]

	//old method
	magneticFieldX = magneticFieldXADC / magneticFieldDivider;
 800e5c4:	197b      	adds	r3, r7, r5
 800e5c6:	181b      	adds	r3, r3, r0
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	5e9a      	ldrsh	r2, [r3, r2]
 800e5cc:	197b      	adds	r3, r7, r5
 800e5ce:	199b      	adds	r3, r3, r6
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	0019      	movs	r1, r3
 800e5d4:	0010      	movs	r0, r2
 800e5d6:	f7f1 fe27 	bl	8000228 <__divsi3>
 800e5da:	0003      	movs	r3, r0
 800e5dc:	b21a      	sxth	r2, r3
 800e5de:	4b7b      	ldr	r3, [pc, #492]	; (800e7cc <sensingRead+0x9ec>)
 800e5e0:	801a      	strh	r2, [r3, #0]
	magneticFieldY = magneticFieldYADC / ((float) magneticFieldDivider * 1.66);
 800e5e2:	197a      	adds	r2, r7, r5
 800e5e4:	1913      	adds	r3, r2, r4
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	5e9b      	ldrsh	r3, [r3, r2]
 800e5ea:	0018      	movs	r0, r3
 800e5ec:	f7f4 fccc 	bl	8002f88 <__aeabi_i2d>
 800e5f0:	0004      	movs	r4, r0
 800e5f2:	000d      	movs	r5, r1
 800e5f4:	2308      	movs	r3, #8
 800e5f6:	18fb      	adds	r3, r7, r3
 800e5f8:	199b      	adds	r3, r3, r6
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f7f2 fec5 	bl	800138c <__aeabi_ui2f>
 800e602:	1c03      	adds	r3, r0, #0
 800e604:	1c18      	adds	r0, r3, #0
 800e606:	f7f4 fd15 	bl	8003034 <__aeabi_f2d>
 800e60a:	4a71      	ldr	r2, [pc, #452]	; (800e7d0 <sensingRead+0x9f0>)
 800e60c:	4b71      	ldr	r3, [pc, #452]	; (800e7d4 <sensingRead+0x9f4>)
 800e60e:	f7f3 fe69 	bl	80022e4 <__aeabi_dmul>
 800e612:	0002      	movs	r2, r0
 800e614:	000b      	movs	r3, r1
 800e616:	0020      	movs	r0, r4
 800e618:	0029      	movs	r1, r5
 800e61a:	f7f3 fa5d 	bl	8001ad8 <__aeabi_ddiv>
 800e61e:	0002      	movs	r2, r0
 800e620:	000b      	movs	r3, r1
 800e622:	0010      	movs	r0, r2
 800e624:	0019      	movs	r1, r3
 800e626:	f7f4 fc79 	bl	8002f1c <__aeabi_d2iz>
 800e62a:	0003      	movs	r3, r0
 800e62c:	b21a      	sxth	r2, r3
 800e62e:	4b6a      	ldr	r3, [pc, #424]	; (800e7d8 <sensingRead+0x9f8>)
 800e630:	801a      	strh	r2, [r3, #0]

	if (magneticFieldX > 18)
 800e632:	4b66      	ldr	r3, [pc, #408]	; (800e7cc <sensingRead+0x9ec>)
 800e634:	2200      	movs	r2, #0
 800e636:	5e9b      	ldrsh	r3, [r3, r2]
 800e638:	2b12      	cmp	r3, #18
 800e63a:	dd02      	ble.n	800e642 <sensingRead+0x862>
		magneticFieldX = 18;
 800e63c:	4b63      	ldr	r3, [pc, #396]	; (800e7cc <sensingRead+0x9ec>)
 800e63e:	2212      	movs	r2, #18
 800e640:	801a      	strh	r2, [r3, #0]
	if (magneticFieldX < -18)
 800e642:	4b62      	ldr	r3, [pc, #392]	; (800e7cc <sensingRead+0x9ec>)
 800e644:	2200      	movs	r2, #0
 800e646:	5e9b      	ldrsh	r3, [r3, r2]
 800e648:	3312      	adds	r3, #18
 800e64a:	da03      	bge.n	800e654 <sensingRead+0x874>
		magneticFieldX = -18;
 800e64c:	4b5f      	ldr	r3, [pc, #380]	; (800e7cc <sensingRead+0x9ec>)
 800e64e:	2212      	movs	r2, #18
 800e650:	4252      	negs	r2, r2
 800e652:	801a      	strh	r2, [r3, #0]

	if (magneticFieldY > 12)
 800e654:	4b60      	ldr	r3, [pc, #384]	; (800e7d8 <sensingRead+0x9f8>)
 800e656:	2200      	movs	r2, #0
 800e658:	5e9b      	ldrsh	r3, [r3, r2]
 800e65a:	2b0c      	cmp	r3, #12
 800e65c:	dd02      	ble.n	800e664 <sensingRead+0x884>
		magneticFieldY = 12;
 800e65e:	4b5e      	ldr	r3, [pc, #376]	; (800e7d8 <sensingRead+0x9f8>)
 800e660:	220c      	movs	r2, #12
 800e662:	801a      	strh	r2, [r3, #0]
	if (magneticFieldY < -12)
 800e664:	4b5c      	ldr	r3, [pc, #368]	; (800e7d8 <sensingRead+0x9f8>)
 800e666:	2200      	movs	r2, #0
 800e668:	5e9b      	ldrsh	r3, [r3, r2]
 800e66a:	330c      	adds	r3, #12
 800e66c:	da03      	bge.n	800e676 <sensingRead+0x896>
		magneticFieldY = -12;
 800e66e:	4b5a      	ldr	r3, [pc, #360]	; (800e7d8 <sensingRead+0x9f8>)
 800e670:	220c      	movs	r2, #12
 800e672:	4252      	negs	r2, r2
 800e674:	801a      	strh	r2, [r3, #0]

//	new method
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
			/ magneticFieldDivider;
 800e676:	2316      	movs	r3, #22
 800e678:	2208      	movs	r2, #8
 800e67a:	4694      	mov	ip, r2
 800e67c:	44bc      	add	ip, r7
 800e67e:	4463      	add	r3, ip
 800e680:	2200      	movs	r2, #0
 800e682:	5e9a      	ldrsh	r2, [r3, r2]
 800e684:	2412      	movs	r4, #18
 800e686:	2508      	movs	r5, #8
 800e688:	197b      	adds	r3, r7, r5
 800e68a:	191b      	adds	r3, r3, r4
 800e68c:	881b      	ldrh	r3, [r3, #0]
 800e68e:	0019      	movs	r1, r3
 800e690:	0010      	movs	r0, r2
 800e692:	f7f1 fdc9 	bl	8000228 <__divsi3>
 800e696:	0003      	movs	r3, r0
 800e698:	0019      	movs	r1, r3
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
 800e69a:	4b50      	ldr	r3, [pc, #320]	; (800e7dc <sensingRead+0x9fc>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	5e9b      	ldrsh	r3, [r3, r2]
 800e6a0:	001a      	movs	r2, r3
 800e6a2:	b209      	sxth	r1, r1
 800e6a4:	4b4e      	ldr	r3, [pc, #312]	; (800e7e0 <sensingRead+0xa00>)
 800e6a6:	0052      	lsls	r2, r2, #1
 800e6a8:	52d1      	strh	r1, [r2, r3]
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
			/ magneticFieldDivider;
 800e6aa:	2314      	movs	r3, #20
 800e6ac:	2208      	movs	r2, #8
 800e6ae:	4694      	mov	ip, r2
 800e6b0:	44bc      	add	ip, r7
 800e6b2:	4463      	add	r3, ip
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	5e9a      	ldrsh	r2, [r3, r2]
 800e6b8:	197b      	adds	r3, r7, r5
 800e6ba:	191b      	adds	r3, r3, r4
 800e6bc:	881b      	ldrh	r3, [r3, #0]
 800e6be:	0019      	movs	r1, r3
 800e6c0:	0010      	movs	r0, r2
 800e6c2:	f7f1 fdb1 	bl	8000228 <__divsi3>
 800e6c6:	0003      	movs	r3, r0
 800e6c8:	0019      	movs	r1, r3
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
 800e6ca:	4b44      	ldr	r3, [pc, #272]	; (800e7dc <sensingRead+0x9fc>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	5e9b      	ldrsh	r3, [r3, r2]
 800e6d0:	001a      	movs	r2, r3
 800e6d2:	b209      	sxth	r1, r1
 800e6d4:	4b43      	ldr	r3, [pc, #268]	; (800e7e4 <sensingRead+0xa04>)
 800e6d6:	0052      	lsls	r2, r2, #1
 800e6d8:	52d1      	strh	r1, [r2, r3]

	magneticFieldMinX = 0;
 800e6da:	4b43      	ldr	r3, [pc, #268]	; (800e7e8 <sensingRead+0xa08>)
 800e6dc:	2200      	movs	r2, #0
 800e6de:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxX = 0;
 800e6e0:	4b42      	ldr	r3, [pc, #264]	; (800e7ec <sensingRead+0xa0c>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	801a      	strh	r2, [r3, #0]
	magneticFieldMinY = 0;
 800e6e6:	4b42      	ldr	r3, [pc, #264]	; (800e7f0 <sensingRead+0xa10>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxY = 0;
 800e6ec:	4b41      	ldr	r3, [pc, #260]	; (800e7f4 <sensingRead+0xa14>)
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	801a      	strh	r2, [r3, #0]

	//finx max and min value

	magneticFieldMaxX = findMax(magneticFieldContainerX,
 800e6f2:	4b3b      	ldr	r3, [pc, #236]	; (800e7e0 <sensingRead+0xa00>)
 800e6f4:	21c8      	movs	r1, #200	; 0xc8
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f000 fada 	bl	800ecb0 <findMax>
 800e6fc:	0003      	movs	r3, r0
 800e6fe:	001a      	movs	r2, r3
 800e700:	4b3a      	ldr	r3, [pc, #232]	; (800e7ec <sensingRead+0xa0c>)
 800e702:	801a      	strh	r2, [r3, #0]
			MAGNETIC_FIELD_MEASURES);
	magneticFieldMinX = findMin(magneticFieldContainerX,
 800e704:	4b36      	ldr	r3, [pc, #216]	; (800e7e0 <sensingRead+0xa00>)
 800e706:	21c8      	movs	r1, #200	; 0xc8
 800e708:	0018      	movs	r0, r3
 800e70a:	f000 fb05 	bl	800ed18 <findMin>
 800e70e:	0003      	movs	r3, r0
 800e710:	001a      	movs	r2, r3
 800e712:	4b35      	ldr	r3, [pc, #212]	; (800e7e8 <sensingRead+0xa08>)
 800e714:	801a      	strh	r2, [r3, #0]
			MAGNETIC_FIELD_MEASURES);

	magneticFieldMaxY = findMax(magneticFieldContainerY,
 800e716:	4b33      	ldr	r3, [pc, #204]	; (800e7e4 <sensingRead+0xa04>)
 800e718:	21c8      	movs	r1, #200	; 0xc8
 800e71a:	0018      	movs	r0, r3
 800e71c:	f000 fac8 	bl	800ecb0 <findMax>
 800e720:	0003      	movs	r3, r0
 800e722:	001a      	movs	r2, r3
 800e724:	4b33      	ldr	r3, [pc, #204]	; (800e7f4 <sensingRead+0xa14>)
 800e726:	801a      	strh	r2, [r3, #0]
			MAGNETIC_FIELD_MEASURES);
	magneticFieldMinY = findMin(magneticFieldContainerY,
 800e728:	4b2e      	ldr	r3, [pc, #184]	; (800e7e4 <sensingRead+0xa04>)
 800e72a:	21c8      	movs	r1, #200	; 0xc8
 800e72c:	0018      	movs	r0, r3
 800e72e:	f000 faf3 	bl	800ed18 <findMin>
 800e732:	0003      	movs	r3, r0
 800e734:	001a      	movs	r2, r3
 800e736:	4b2e      	ldr	r3, [pc, #184]	; (800e7f0 <sensingRead+0xa10>)
 800e738:	801a      	strh	r2, [r3, #0]
			MAGNETIC_FIELD_MEASURES);

	magneticFieldCenterX = (magneticFieldMaxX + magneticFieldMinX) / 2;
 800e73a:	4b2c      	ldr	r3, [pc, #176]	; (800e7ec <sensingRead+0xa0c>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	5e9b      	ldrsh	r3, [r3, r2]
 800e740:	001a      	movs	r2, r3
 800e742:	4b29      	ldr	r3, [pc, #164]	; (800e7e8 <sensingRead+0xa08>)
 800e744:	2100      	movs	r1, #0
 800e746:	5e5b      	ldrsh	r3, [r3, r1]
 800e748:	18d3      	adds	r3, r2, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	da00      	bge.n	800e750 <sensingRead+0x970>
 800e74e:	3301      	adds	r3, #1
 800e750:	105b      	asrs	r3, r3, #1
 800e752:	b21a      	sxth	r2, r3
 800e754:	4b28      	ldr	r3, [pc, #160]	; (800e7f8 <sensingRead+0xa18>)
 800e756:	801a      	strh	r2, [r3, #0]
	magneticFieldCenterY = (magneticFieldMaxY + magneticFieldMinY) / 2;
 800e758:	4b26      	ldr	r3, [pc, #152]	; (800e7f4 <sensingRead+0xa14>)
 800e75a:	2200      	movs	r2, #0
 800e75c:	5e9b      	ldrsh	r3, [r3, r2]
 800e75e:	001a      	movs	r2, r3
 800e760:	4b23      	ldr	r3, [pc, #140]	; (800e7f0 <sensingRead+0xa10>)
 800e762:	2100      	movs	r1, #0
 800e764:	5e5b      	ldrsh	r3, [r3, r1]
 800e766:	18d3      	adds	r3, r2, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	da00      	bge.n	800e76e <sensingRead+0x98e>
 800e76c:	3301      	adds	r3, #1
 800e76e:	105b      	asrs	r3, r3, #1
 800e770:	b21a      	sxth	r2, r3
 800e772:	4b22      	ldr	r3, [pc, #136]	; (800e7fc <sensingRead+0xa1c>)
 800e774:	801a      	strh	r2, [r3, #0]
//	if (magneticFieldY > 12)
//		magneticFieldY = 12;
//	if (magneticFieldY < -12)
//		magneticFieldY = -12;

	magneticFieldCounter++;
 800e776:	4b19      	ldr	r3, [pc, #100]	; (800e7dc <sensingRead+0x9fc>)
 800e778:	2200      	movs	r2, #0
 800e77a:	5e9b      	ldrsh	r3, [r3, r2]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	3301      	adds	r3, #1
 800e780:	b29b      	uxth	r3, r3
 800e782:	b21a      	sxth	r2, r3
 800e784:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <sensingRead+0x9fc>)
 800e786:	801a      	strh	r2, [r3, #0]
	if (magneticFieldCounter >= MAGNETIC_FIELD_MEASURES)
 800e788:	4b14      	ldr	r3, [pc, #80]	; (800e7dc <sensingRead+0x9fc>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	5e9b      	ldrsh	r3, [r3, r2]
 800e78e:	2bc7      	cmp	r3, #199	; 0xc7
 800e790:	dd02      	ble.n	800e798 <sensingRead+0x9b8>
		magneticFieldCounter = 0;
 800e792:	4b12      	ldr	r3, [pc, #72]	; (800e7dc <sensingRead+0x9fc>)
 800e794:	2200      	movs	r2, #0
 800e796:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL SEND SLEEP COMMAND

	HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800e798:	4b08      	ldr	r3, [pc, #32]	; (800e7bc <sensingRead+0x9dc>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4808      	ldr	r0, [pc, #32]	; (800e7c0 <sensingRead+0x9e0>)
 800e79e:	9302      	str	r3, [sp, #8]
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	4b16      	ldr	r3, [pc, #88]	; (800e800 <sensingRead+0xa20>)
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	2222      	movs	r2, #34	; 0x22
 800e7ac:	2138      	movs	r1, #56	; 0x38
 800e7ae:	f7f8 fe51 	bl	8007454 <HAL_I2C_Mem_Write>
			&ctrlMagnetometerPowerDown, 1, i2cTimeout);

}
 800e7b2:	46c0      	nop			; (mov r8, r8)
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	b011      	add	sp, #68	; 0x44
 800e7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ba:	46c0      	nop			; (mov r8, r8)
 800e7bc:	2000003a 	.word	0x2000003a
 800e7c0:	20000150 	.word	0x20000150
 800e7c4:	2000010c 	.word	0x2000010c
 800e7c8:	20000110 	.word	0x20000110
 800e7cc:	200006fa 	.word	0x200006fa
 800e7d0:	28f5c28f 	.word	0x28f5c28f
 800e7d4:	3ffa8f5c 	.word	0x3ffa8f5c
 800e7d8:	20000660 	.word	0x20000660
 800e7dc:	200007a8 	.word	0x200007a8
 800e7e0:	200001b4 	.word	0x200001b4
 800e7e4:	200004cc 	.word	0x200004cc
 800e7e8:	200007b0 	.word	0x200007b0
 800e7ec:	2000065c 	.word	0x2000065c
 800e7f0:	200003d2 	.word	0x200003d2
 800e7f4:	20000128 	.word	0x20000128
 800e7f8:	200006e6 	.word	0x200006e6
 800e7fc:	200007b2 	.word	0x200007b2
 800e800:	20000028 	.word	0x20000028

0800e804 <BME280_compensate_T_int32>:

//compensation formulas from datasheet
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T) {
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	10da      	asrs	r2, r3, #3
 800e810:	4b16      	ldr	r3, [pc, #88]	; (800e86c <BME280_compensate_T_int32+0x68>)
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	1ad3      	subs	r3, r2, r3
			* ((BME280_S32_t) dig_T2)) >> 11;
 800e818:	4a15      	ldr	r2, [pc, #84]	; (800e870 <BME280_compensate_T_int32+0x6c>)
 800e81a:	2100      	movs	r1, #0
 800e81c:	5e52      	ldrsh	r2, [r2, r1]
 800e81e:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800e820:	12db      	asrs	r3, r3, #11
 800e822:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	111b      	asrs	r3, r3, #4
 800e828:	4a10      	ldr	r2, [pc, #64]	; (800e86c <BME280_compensate_T_int32+0x68>)
 800e82a:	8812      	ldrh	r2, [r2, #0]
 800e82c:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BME280_S32_t) dig_T1))) >> 12)
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	1112      	asrs	r2, r2, #4
 800e832:	490e      	ldr	r1, [pc, #56]	; (800e86c <BME280_compensate_T_int32+0x68>)
 800e834:	8809      	ldrh	r1, [r1, #0]
 800e836:	1a52      	subs	r2, r2, r1
 800e838:	4353      	muls	r3, r2
 800e83a:	131b      	asrs	r3, r3, #12
			* ((BME280_S32_t) dig_T3)) >> 14;
 800e83c:	4a0d      	ldr	r2, [pc, #52]	; (800e874 <BME280_compensate_T_int32+0x70>)
 800e83e:	2100      	movs	r1, #0
 800e840:	5e52      	ldrsh	r2, [r2, r1]
 800e842:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800e844:	139b      	asrs	r3, r3, #14
 800e846:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	18d2      	adds	r2, r2, r3
 800e84e:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <BME280_compensate_T_int32+0x74>)
 800e850:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 800e852:	4b09      	ldr	r3, [pc, #36]	; (800e878 <BME280_compensate_T_int32+0x74>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	0013      	movs	r3, r2
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	189b      	adds	r3, r3, r2
 800e85c:	3380      	adds	r3, #128	; 0x80
 800e85e:	121b      	asrs	r3, r3, #8
 800e860:	60fb      	str	r3, [r7, #12]
	return T;
 800e862:	68fb      	ldr	r3, [r7, #12]
}
 800e864:	0018      	movs	r0, r3
 800e866:	46bd      	mov	sp, r7
 800e868:	b006      	add	sp, #24
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	20000134 	.word	0x20000134
 800e870:	20000388 	.word	0x20000388
 800e874:	200007ac 	.word	0x200007ac
 800e878:	200007cc 	.word	0x200007cc

0800e87c <BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P) {
 800e87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87e:	b0ad      	sub	sp, #180	; 0xb4
 800e880:	af00      	add	r7, sp, #0
 800e882:	2394      	movs	r3, #148	; 0x94
 800e884:	18fb      	adds	r3, r7, r3
 800e886:	6018      	str	r0, [r3, #0]
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t) t_fine) - 128000;
 800e888:	4bc6      	ldr	r3, [pc, #792]	; (800eba4 <BME280_compensate_P_int64+0x328>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	001c      	movs	r4, r3
 800e88e:	17db      	asrs	r3, r3, #31
 800e890:	001d      	movs	r5, r3
 800e892:	4ac5      	ldr	r2, [pc, #788]	; (800eba8 <BME280_compensate_P_int64+0x32c>)
 800e894:	2301      	movs	r3, #1
 800e896:	425b      	negs	r3, r3
 800e898:	1912      	adds	r2, r2, r4
 800e89a:	416b      	adcs	r3, r5
 800e89c:	24a8      	movs	r4, #168	; 0xa8
 800e89e:	1939      	adds	r1, r7, r4
 800e8a0:	600a      	str	r2, [r1, #0]
 800e8a2:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (BME280_S64_t) dig_P6;
 800e8a4:	193b      	adds	r3, r7, r4
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	1939      	adds	r1, r7, r4
 800e8ac:	6808      	ldr	r0, [r1, #0]
 800e8ae:	6849      	ldr	r1, [r1, #4]
 800e8b0:	f7f1 fe42 	bl	8000538 <__aeabi_lmul>
 800e8b4:	0002      	movs	r2, r0
 800e8b6:	000b      	movs	r3, r1
 800e8b8:	0010      	movs	r0, r2
 800e8ba:	0019      	movs	r1, r3
 800e8bc:	4bbb      	ldr	r3, [pc, #748]	; (800ebac <BME280_compensate_P_int64+0x330>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8c2:	653b      	str	r3, [r7, #80]	; 0x50
 800e8c4:	17db      	asrs	r3, r3, #31
 800e8c6:	657b      	str	r3, [r7, #84]	; 0x54
 800e8c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8cc:	f7f1 fe34 	bl	8000538 <__aeabi_lmul>
 800e8d0:	0002      	movs	r2, r0
 800e8d2:	000b      	movs	r3, r1
 800e8d4:	25a0      	movs	r5, #160	; 0xa0
 800e8d6:	1979      	adds	r1, r7, r5
 800e8d8:	600a      	str	r2, [r1, #0]
 800e8da:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1 * (BME280_S64_t) dig_P5) << 17);
 800e8dc:	4bb4      	ldr	r3, [pc, #720]	; (800ebb0 <BME280_compensate_P_int64+0x334>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8e4:	17db      	asrs	r3, r3, #31
 800e8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8e8:	193b      	adds	r3, r7, r4
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e8f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e8f2:	f7f1 fe21 	bl	8000538 <__aeabi_lmul>
 800e8f6:	0002      	movs	r2, r0
 800e8f8:	000b      	movs	r3, r1
 800e8fa:	0bd1      	lsrs	r1, r2, #15
 800e8fc:	468c      	mov	ip, r1
 800e8fe:	0458      	lsls	r0, r3, #17
 800e900:	268c      	movs	r6, #140	; 0x8c
 800e902:	19b9      	adds	r1, r7, r6
 800e904:	6008      	str	r0, [r1, #0]
 800e906:	19b8      	adds	r0, r7, r6
 800e908:	6800      	ldr	r0, [r0, #0]
 800e90a:	4661      	mov	r1, ip
 800e90c:	4308      	orrs	r0, r1
 800e90e:	19b9      	adds	r1, r7, r6
 800e910:	6008      	str	r0, [r1, #0]
 800e912:	0453      	lsls	r3, r2, #17
 800e914:	2188      	movs	r1, #136	; 0x88
 800e916:	187a      	adds	r2, r7, r1
 800e918:	6013      	str	r3, [r2, #0]
 800e91a:	197b      	adds	r3, r7, r5
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	1879      	adds	r1, r7, r1
 800e922:	6808      	ldr	r0, [r1, #0]
 800e924:	6849      	ldr	r1, [r1, #4]
 800e926:	1812      	adds	r2, r2, r0
 800e928:	414b      	adcs	r3, r1
 800e92a:	1979      	adds	r1, r7, r5
 800e92c:	600a      	str	r2, [r1, #0]
 800e92e:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((BME280_S64_t) dig_P4) << 35);
 800e930:	4ba0      	ldr	r3, [pc, #640]	; (800ebb4 <BME280_compensate_P_int64+0x338>)
 800e932:	2200      	movs	r2, #0
 800e934:	5e9b      	ldrsh	r3, [r3, r2]
 800e936:	643b      	str	r3, [r7, #64]	; 0x40
 800e938:	17db      	asrs	r3, r3, #31
 800e93a:	647b      	str	r3, [r7, #68]	; 0x44
 800e93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e93e:	00db      	lsls	r3, r3, #3
 800e940:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e942:	2300      	movs	r3, #0
 800e944:	63bb      	str	r3, [r7, #56]	; 0x38
 800e946:	197b      	adds	r3, r7, r5
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e94e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e950:	1812      	adds	r2, r2, r0
 800e952:	414b      	adcs	r3, r1
 800e954:	1979      	adds	r1, r7, r5
 800e956:	600a      	str	r2, [r1, #0]
 800e958:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800e95a:	193b      	adds	r3, r7, r4
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	1939      	adds	r1, r7, r4
 800e962:	6808      	ldr	r0, [r1, #0]
 800e964:	6849      	ldr	r1, [r1, #4]
 800e966:	f7f1 fde7 	bl	8000538 <__aeabi_lmul>
 800e96a:	0002      	movs	r2, r0
 800e96c:	000b      	movs	r3, r1
 800e96e:	0010      	movs	r0, r2
 800e970:	0019      	movs	r1, r3
 800e972:	4b91      	ldr	r3, [pc, #580]	; (800ebb8 <BME280_compensate_P_int64+0x33c>)
 800e974:	2200      	movs	r2, #0
 800e976:	5e9b      	ldrsh	r3, [r3, r2]
 800e978:	633b      	str	r3, [r7, #48]	; 0x30
 800e97a:	17db      	asrs	r3, r3, #31
 800e97c:	637b      	str	r3, [r7, #52]	; 0x34
 800e97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e982:	f7f1 fdd9 	bl	8000538 <__aeabi_lmul>
 800e986:	0002      	movs	r2, r0
 800e988:	000b      	movs	r3, r1
 800e98a:	0619      	lsls	r1, r3, #24
 800e98c:	0a10      	lsrs	r0, r2, #8
 800e98e:	2580      	movs	r5, #128	; 0x80
 800e990:	197e      	adds	r6, r7, r5
 800e992:	6030      	str	r0, [r6, #0]
 800e994:	1978      	adds	r0, r7, r5
 800e996:	6800      	ldr	r0, [r0, #0]
 800e998:	4308      	orrs	r0, r1
 800e99a:	1979      	adds	r1, r7, r5
 800e99c:	6008      	str	r0, [r1, #0]
 800e99e:	121b      	asrs	r3, r3, #8
 800e9a0:	2284      	movs	r2, #132	; 0x84
 800e9a2:	18ba      	adds	r2, r7, r2
 800e9a4:	6013      	str	r3, [r2, #0]
			+ ((var1 * (BME280_S64_t) dig_P2) << 12);
 800e9a6:	4b85      	ldr	r3, [pc, #532]	; (800ebbc <BME280_compensate_P_int64+0x340>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9ae:	17db      	asrs	r3, r3, #31
 800e9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9b2:	193b      	adds	r3, r7, r4
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9bc:	f7f1 fdbc 	bl	8000538 <__aeabi_lmul>
 800e9c0:	0002      	movs	r2, r0
 800e9c2:	000b      	movs	r3, r1
 800e9c4:	0d11      	lsrs	r1, r2, #20
 800e9c6:	0318      	lsls	r0, r3, #12
 800e9c8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e9ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e9cc:	4308      	orrs	r0, r1
 800e9ce:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e9d0:	0313      	lsls	r3, r2, #12
 800e9d2:	67bb      	str	r3, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800e9d4:	197b      	adds	r3, r7, r5
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e9dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9de:	1812      	adds	r2, r2, r0
 800e9e0:	414b      	adcs	r3, r1
 800e9e2:	1939      	adds	r1, r7, r4
 800e9e4:	600a      	str	r2, [r1, #0]
 800e9e6:	604b      	str	r3, [r1, #4]
	var1 = (((((BME280_S64_t) 1) << 47) + var1)) * ((BME280_S64_t) dig_P1)
 800e9e8:	193b      	adds	r3, r7, r4
 800e9ea:	6818      	ldr	r0, [r3, #0]
 800e9ec:	6859      	ldr	r1, [r3, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2380      	movs	r3, #128	; 0x80
 800e9f2:	021b      	lsls	r3, r3, #8
 800e9f4:	1880      	adds	r0, r0, r2
 800e9f6:	4159      	adcs	r1, r3
 800e9f8:	4b71      	ldr	r3, [pc, #452]	; (800ebc0 <BME280_compensate_P_int64+0x344>)
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	623b      	str	r3, [r7, #32]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	627b      	str	r3, [r7, #36]	; 0x24
 800ea02:	6a3a      	ldr	r2, [r7, #32]
 800ea04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea06:	f7f1 fd97 	bl	8000538 <__aeabi_lmul>
 800ea0a:	0002      	movs	r2, r0
 800ea0c:	000b      	movs	r3, r1
 800ea0e:	1059      	asrs	r1, r3, #1
 800ea10:	1938      	adds	r0, r7, r4
 800ea12:	6001      	str	r1, [r0, #0]
 800ea14:	17db      	asrs	r3, r3, #31
 800ea16:	21ac      	movs	r1, #172	; 0xac
 800ea18:	187a      	adds	r2, r7, r1
 800ea1a:	6013      	str	r3, [r2, #0]
			>> 33;
	if (var1 == 0) {
 800ea1c:	193b      	adds	r3, r7, r4
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	187b      	adds	r3, r7, r1
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	431a      	orrs	r2, r3
 800ea26:	d101      	bne.n	800ea2c <BME280_compensate_P_int64+0x1b0>
		return 0; // avoid exception caused by division by zero
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e0b6      	b.n	800eb9a <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576 - adc_P;
 800ea2c:	2394      	movs	r3, #148	; 0x94
 800ea2e:	18fb      	adds	r3, r7, r3
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	2380      	movs	r3, #128	; 0x80
 800ea34:	035b      	lsls	r3, r3, #13
 800ea36:	1a9b      	subs	r3, r3, r2
 800ea38:	2498      	movs	r4, #152	; 0x98
 800ea3a:	193a      	adds	r2, r7, r4
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	17db      	asrs	r3, r3, #31
 800ea40:	259c      	movs	r5, #156	; 0x9c
 800ea42:	197a      	adds	r2, r7, r5
 800ea44:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800ea46:	193b      	adds	r3, r7, r4
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	105b      	asrs	r3, r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
 800ea4e:	193b      	adds	r3, r7, r4
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	07db      	lsls	r3, r3, #31
 800ea54:	61bb      	str	r3, [r7, #24]
 800ea56:	23a0      	movs	r3, #160	; 0xa0
 800ea58:	18fa      	adds	r2, r7, r3
 800ea5a:	6853      	ldr	r3, [r2, #4]
 800ea5c:	6812      	ldr	r2, [r2, #0]
 800ea5e:	69b8      	ldr	r0, [r7, #24]
 800ea60:	69f9      	ldr	r1, [r7, #28]
 800ea62:	1a80      	subs	r0, r0, r2
 800ea64:	4199      	sbcs	r1, r3
 800ea66:	4a57      	ldr	r2, [pc, #348]	; (800ebc4 <BME280_compensate_P_int64+0x348>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f7f1 fd65 	bl	8000538 <__aeabi_lmul>
 800ea6e:	0002      	movs	r2, r0
 800ea70:	000b      	movs	r3, r1
 800ea72:	0010      	movs	r0, r2
 800ea74:	0019      	movs	r1, r3
 800ea76:	26a8      	movs	r6, #168	; 0xa8
 800ea78:	19ba      	adds	r2, r7, r6
 800ea7a:	6853      	ldr	r3, [r2, #4]
 800ea7c:	6812      	ldr	r2, [r2, #0]
 800ea7e:	f7f1 fd37 	bl	80004f0 <__aeabi_ldivmod>
 800ea82:	0002      	movs	r2, r0
 800ea84:	000b      	movs	r3, r1
 800ea86:	1939      	adds	r1, r7, r4
 800ea88:	600a      	str	r2, [r1, #0]
 800ea8a:	604b      	str	r3, [r1, #4]
	var1 = (((BME280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800ea8c:	4b4e      	ldr	r3, [pc, #312]	; (800ebc8 <BME280_compensate_P_int64+0x34c>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	5e9b      	ldrsh	r3, [r3, r2]
 800ea92:	613b      	str	r3, [r7, #16]
 800ea94:	17db      	asrs	r3, r3, #31
 800ea96:	617b      	str	r3, [r7, #20]
 800ea98:	197a      	adds	r2, r7, r5
 800ea9a:	6813      	ldr	r3, [r2, #0]
 800ea9c:	04da      	lsls	r2, r3, #19
 800ea9e:	1939      	adds	r1, r7, r4
 800eaa0:	680b      	ldr	r3, [r1, #0]
 800eaa2:	0b5b      	lsrs	r3, r3, #13
 800eaa4:	673b      	str	r3, [r7, #112]	; 0x70
 800eaa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	673b      	str	r3, [r7, #112]	; 0x70
 800eaac:	197a      	adds	r2, r7, r5
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	135b      	asrs	r3, r3, #13
 800eab2:	677b      	str	r3, [r7, #116]	; 0x74
 800eab4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eab8:	6938      	ldr	r0, [r7, #16]
 800eaba:	6979      	ldr	r1, [r7, #20]
 800eabc:	f7f1 fd3c 	bl	8000538 <__aeabi_lmul>
 800eac0:	0002      	movs	r2, r0
 800eac2:	000b      	movs	r3, r1
 800eac4:	0010      	movs	r0, r2
 800eac6:	0019      	movs	r1, r3
 800eac8:	197a      	adds	r2, r7, r5
 800eaca:	6813      	ldr	r3, [r2, #0]
 800eacc:	04da      	lsls	r2, r3, #19
 800eace:	193b      	adds	r3, r7, r4
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	0b5b      	lsrs	r3, r3, #13
 800ead4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ead6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ead8:	4313      	orrs	r3, r2
 800eada:	66bb      	str	r3, [r7, #104]	; 0x68
 800eadc:	197a      	adds	r2, r7, r5
 800eade:	6813      	ldr	r3, [r2, #0]
 800eae0:	135b      	asrs	r3, r3, #13
 800eae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eae8:	f7f1 fd26 	bl	8000538 <__aeabi_lmul>
 800eaec:	0002      	movs	r2, r0
 800eaee:	000b      	movs	r3, r1
 800eaf0:	01d9      	lsls	r1, r3, #7
 800eaf2:	0e50      	lsrs	r0, r2, #25
 800eaf4:	4301      	orrs	r1, r0
 800eaf6:	19b8      	adds	r0, r7, r6
 800eaf8:	6001      	str	r1, [r0, #0]
 800eafa:	165b      	asrs	r3, r3, #25
 800eafc:	22ac      	movs	r2, #172	; 0xac
 800eafe:	18ba      	adds	r2, r7, r2
 800eb00:	6013      	str	r3, [r2, #0]
	var2 = (((BME280_S64_t) dig_P8) * p) >> 19;
 800eb02:	4b32      	ldr	r3, [pc, #200]	; (800ebcc <BME280_compensate_P_int64+0x350>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	5e9b      	ldrsh	r3, [r3, r2]
 800eb08:	60bb      	str	r3, [r7, #8]
 800eb0a:	17db      	asrs	r3, r3, #31
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	193a      	adds	r2, r7, r4
 800eb10:	6853      	ldr	r3, [r2, #4]
 800eb12:	6812      	ldr	r2, [r2, #0]
 800eb14:	68b8      	ldr	r0, [r7, #8]
 800eb16:	68f9      	ldr	r1, [r7, #12]
 800eb18:	f7f1 fd0e 	bl	8000538 <__aeabi_lmul>
 800eb1c:	0002      	movs	r2, r0
 800eb1e:	000b      	movs	r3, r1
 800eb20:	0359      	lsls	r1, r3, #13
 800eb22:	0cd0      	lsrs	r0, r2, #19
 800eb24:	4301      	orrs	r1, r0
 800eb26:	25a0      	movs	r5, #160	; 0xa0
 800eb28:	1978      	adds	r0, r7, r5
 800eb2a:	6001      	str	r1, [r0, #0]
 800eb2c:	14db      	asrs	r3, r3, #19
 800eb2e:	22a4      	movs	r2, #164	; 0xa4
 800eb30:	18ba      	adds	r2, r7, r2
 800eb32:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t) dig_P7) << 4);
 800eb34:	193b      	adds	r3, r7, r4
 800eb36:	6818      	ldr	r0, [r3, #0]
 800eb38:	6859      	ldr	r1, [r3, #4]
 800eb3a:	19bb      	adds	r3, r7, r6
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	1880      	adds	r0, r0, r2
 800eb42:	4159      	adcs	r1, r3
 800eb44:	197b      	adds	r3, r7, r5
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	1812      	adds	r2, r2, r0
 800eb4c:	414b      	adcs	r3, r1
 800eb4e:	0619      	lsls	r1, r3, #24
 800eb50:	0a10      	lsrs	r0, r2, #8
 800eb52:	6638      	str	r0, [r7, #96]	; 0x60
 800eb54:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800eb56:	4308      	orrs	r0, r1
 800eb58:	6638      	str	r0, [r7, #96]	; 0x60
 800eb5a:	121b      	asrs	r3, r3, #8
 800eb5c:	667b      	str	r3, [r7, #100]	; 0x64
 800eb5e:	4b1c      	ldr	r3, [pc, #112]	; (800ebd0 <BME280_compensate_P_int64+0x354>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	5e9b      	ldrsh	r3, [r3, r2]
 800eb64:	603b      	str	r3, [r7, #0]
 800eb66:	17db      	asrs	r3, r3, #31
 800eb68:	607b      	str	r3, [r7, #4]
 800eb6a:	6839      	ldr	r1, [r7, #0]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	000b      	movs	r3, r1
 800eb70:	0f1b      	lsrs	r3, r3, #28
 800eb72:	0010      	movs	r0, r2
 800eb74:	0100      	lsls	r0, r0, #4
 800eb76:	65f8      	str	r0, [r7, #92]	; 0x5c
 800eb78:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800eb7a:	4318      	orrs	r0, r3
 800eb7c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800eb7e:	000b      	movs	r3, r1
 800eb80:	011b      	lsls	r3, r3, #4
 800eb82:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800eb8c:	1812      	adds	r2, r2, r0
 800eb8e:	414b      	adcs	r3, r1
 800eb90:	1939      	adds	r1, r7, r4
 800eb92:	600a      	str	r2, [r1, #0]
 800eb94:	604b      	str	r3, [r1, #4]
	return (BME280_U32_t) p;
 800eb96:	193b      	adds	r3, r7, r4
 800eb98:	681b      	ldr	r3, [r3, #0]
}
 800eb9a:	0018      	movs	r0, r3
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	b02d      	add	sp, #180	; 0xb4
 800eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba2:	46c0      	nop			; (mov r8, r8)
 800eba4:	200007cc 	.word	0x200007cc
 800eba8:	fffe0c00 	.word	0xfffe0c00
 800ebac:	200007ba 	.word	0x200007ba
 800ebb0:	200006f6 	.word	0x200006f6
 800ebb4:	20000458 	.word	0x20000458
 800ebb8:	20000770 	.word	0x20000770
 800ebbc:	20000454 	.word	0x20000454
 800ebc0:	2000076e 	.word	0x2000076e
 800ebc4:	00000c35 	.word	0x00000c35
 800ebc8:	200007aa 	.word	0x200007aa
 800ebcc:	20000772 	.word	0x20000772
 800ebd0:	20000130 	.word	0x20000130

0800ebd4 <BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H) {
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t) 76800));
 800ebdc:	4b2c      	ldr	r3, [pc, #176]	; (800ec90 <BME280_compensate_H_int32+0xbc>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a2c      	ldr	r2, [pc, #176]	; (800ec94 <BME280_compensate_H_int32+0xc0>)
 800ebe2:	4694      	mov	ip, r2
 800ebe4:	4463      	add	r3, ip
 800ebe6:	60fb      	str	r3, [r7, #12]

	v_x1_u32r =
			(((((adc_H << 14) - (((BME280_S32_t) dig_H4) << 20)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	039a      	lsls	r2, r3, #14
 800ebec:	4b2a      	ldr	r3, [pc, #168]	; (800ec98 <BME280_compensate_H_int32+0xc4>)
 800ebee:	2100      	movs	r1, #0
 800ebf0:	5e5b      	ldrsh	r3, [r3, r1]
 800ebf2:	051b      	lsls	r3, r3, #20
 800ebf4:	1ad2      	subs	r2, r2, r3
					- (((BME280_S32_t) dig_H5) * v_x1_u32r))
 800ebf6:	4b29      	ldr	r3, [pc, #164]	; (800ec9c <BME280_compensate_H_int32+0xc8>)
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	5e5b      	ldrsh	r3, [r3, r1]
 800ebfc:	0019      	movs	r1, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	434b      	muls	r3, r1
 800ec02:	1ad3      	subs	r3, r2, r3
					+ ((BME280_S32_t) 16384)) >> 15)
 800ec04:	2280      	movs	r2, #128	; 0x80
 800ec06:	01d2      	lsls	r2, r2, #7
 800ec08:	4694      	mov	ip, r2
 800ec0a:	4463      	add	r3, ip
 800ec0c:	13db      	asrs	r3, r3, #15
					* (((((((v_x1_u32r * ((BME280_S32_t) dig_H6)) >> 10)
 800ec0e:	4a24      	ldr	r2, [pc, #144]	; (800eca0 <BME280_compensate_H_int32+0xcc>)
 800ec10:	7812      	ldrb	r2, [r2, #0]
 800ec12:	0011      	movs	r1, r2
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	434a      	muls	r2, r1
 800ec18:	1292      	asrs	r2, r2, #10
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800ec1a:	4922      	ldr	r1, [pc, #136]	; (800eca4 <BME280_compensate_H_int32+0xd0>)
 800ec1c:	7809      	ldrb	r1, [r1, #0]
 800ec1e:	0008      	movs	r0, r1
 800ec20:	68f9      	ldr	r1, [r7, #12]
 800ec22:	4341      	muls	r1, r0
 800ec24:	12c9      	asrs	r1, r1, #11
									+ ((BME280_S32_t) 32768))) >> 10)
 800ec26:	2080      	movs	r0, #128	; 0x80
 800ec28:	0200      	lsls	r0, r0, #8
 800ec2a:	4684      	mov	ip, r0
 800ec2c:	4461      	add	r1, ip
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800ec2e:	434a      	muls	r2, r1
									+ ((BME280_S32_t) 32768))) >> 10)
 800ec30:	1292      	asrs	r2, r2, #10
							+ ((BME280_S32_t) 2097152))
 800ec32:	2180      	movs	r1, #128	; 0x80
 800ec34:	0389      	lsls	r1, r1, #14
 800ec36:	468c      	mov	ip, r1
 800ec38:	4462      	add	r2, ip
							* ((BME280_S32_t) dig_H2) + 8192) >> 14));
 800ec3a:	491b      	ldr	r1, [pc, #108]	; (800eca8 <BME280_compensate_H_int32+0xd4>)
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	5e09      	ldrsh	r1, [r1, r0]
 800ec40:	434a      	muls	r2, r1
 800ec42:	2180      	movs	r1, #128	; 0x80
 800ec44:	0189      	lsls	r1, r1, #6
 800ec46:	468c      	mov	ip, r1
 800ec48:	4462      	add	r2, ip
 800ec4a:	1392      	asrs	r2, r2, #14
	v_x1_u32r =
 800ec4c:	4353      	muls	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	13db      	asrs	r3, r3, #15
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	13d2      	asrs	r2, r2, #15
 800ec58:	4353      	muls	r3, r2
 800ec5a:	11db      	asrs	r3, r3, #7
					* ((BME280_S32_t) dig_H1)) >> 4));
 800ec5c:	4a13      	ldr	r2, [pc, #76]	; (800ecac <BME280_compensate_H_int32+0xd8>)
 800ec5e:	7812      	ldrb	r2, [r2, #0]
 800ec60:	4353      	muls	r3, r2
 800ec62:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	da00      	bge.n	800ec72 <BME280_compensate_H_int32+0x9e>
 800ec70:	2300      	movs	r3, #0
 800ec72:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	22c8      	movs	r2, #200	; 0xc8
 800ec78:	0552      	lsls	r2, r2, #21
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	dd01      	ble.n	800ec82 <BME280_compensate_H_int32+0xae>
 800ec7e:	23c8      	movs	r3, #200	; 0xc8
 800ec80:	055b      	lsls	r3, r3, #21
 800ec82:	60fb      	str	r3, [r7, #12]
	return (BME280_U32_t) (v_x1_u32r >> 12);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	131b      	asrs	r3, r3, #12
}
 800ec88:	0018      	movs	r0, r3
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	b004      	add	sp, #16
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	200007cc 	.word	0x200007cc
 800ec94:	fffed400 	.word	0xfffed400
 800ec98:	20000386 	.word	0x20000386
 800ec9c:	20000782 	.word	0x20000782
 800eca0:	200004c6 	.word	0x200004c6
 800eca4:	2000079d 	.word	0x2000079d
 800eca8:	200007c8 	.word	0x200007c8
 800ecac:	200003c3 	.word	0x200003c3

0800ecb0 <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	000a      	movs	r2, r1
 800ecba:	1cbb      	adds	r3, r7, #2
 800ecbc:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 800ecbe:	230e      	movs	r3, #14
 800ecc0:	18fb      	adds	r3, r7, r3
 800ecc2:	4a14      	ldr	r2, [pc, #80]	; (800ed14 <findMax+0x64>)
 800ecc4:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60bb      	str	r3, [r7, #8]
 800ecca:	e015      	b.n	800ecf8 <findMax+0x48>
		if (data[i] > max)
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	18d3      	adds	r3, r2, r3
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd8:	210e      	movs	r1, #14
 800ecda:	187a      	adds	r2, r7, r1
 800ecdc:	2000      	movs	r0, #0
 800ecde:	5e12      	ldrsh	r2, [r2, r0]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	da06      	bge.n	800ecf2 <findMax+0x42>
			max = data[i];
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	18d2      	adds	r2, r2, r3
 800ecec:	187b      	adds	r3, r7, r1
 800ecee:	8812      	ldrh	r2, [r2, #0]
 800ecf0:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	60bb      	str	r3, [r7, #8]
 800ecf8:	1cbb      	adds	r3, r7, #2
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d3e4      	bcc.n	800eccc <findMax+0x1c>
	}

	return max;
 800ed02:	230e      	movs	r3, #14
 800ed04:	18fb      	adds	r3, r7, r3
 800ed06:	2200      	movs	r2, #0
 800ed08:	5e9b      	ldrsh	r3, [r3, r2]

}
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	b004      	add	sp, #16
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	46c0      	nop			; (mov r8, r8)
 800ed14:	ffff8000 	.word	0xffff8000

0800ed18 <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	000a      	movs	r2, r1
 800ed22:	1cbb      	adds	r3, r7, #2
 800ed24:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 800ed26:	230e      	movs	r3, #14
 800ed28:	18fb      	adds	r3, r7, r3
 800ed2a:	4a14      	ldr	r2, [pc, #80]	; (800ed7c <findMin+0x64>)
 800ed2c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60bb      	str	r3, [r7, #8]
 800ed32:	e015      	b.n	800ed60 <findMin+0x48>
		if (data[i] < min)
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	18d3      	adds	r3, r2, r3
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed40:	210e      	movs	r1, #14
 800ed42:	187a      	adds	r2, r7, r1
 800ed44:	2000      	movs	r0, #0
 800ed46:	5e12      	ldrsh	r2, [r2, r0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	dd06      	ble.n	800ed5a <findMin+0x42>
			min = data[i];
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	005b      	lsls	r3, r3, #1
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	18d2      	adds	r2, r2, r3
 800ed54:	187b      	adds	r3, r7, r1
 800ed56:	8812      	ldrh	r2, [r2, #0]
 800ed58:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	60bb      	str	r3, [r7, #8]
 800ed60:	1cbb      	adds	r3, r7, #2
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d3e4      	bcc.n	800ed34 <findMin+0x1c>
	}

	return min;
 800ed6a:	230e      	movs	r3, #14
 800ed6c:	18fb      	adds	r3, r7, r3
 800ed6e:	2200      	movs	r2, #0
 800ed70:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ed72:	0018      	movs	r0, r3
 800ed74:	46bd      	mov	sp, r7
 800ed76:	b004      	add	sp, #16
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	46c0      	nop			; (mov r8, r8)
 800ed7c:	00007fff 	.word	0x00007fff

0800ed80 <settingsDrawData>:
		80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150,
		155, 160, 165, 170, 175, 180, 185, 190, 195 };
uint8_t column[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,
		140, 150, 160, 170, 180, 190 };

void settingsDrawData(void) {
 800ed80:	b5b0      	push	{r4, r5, r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af02      	add	r7, sp, #8

	//										SENSOR READINGS

	if (temperatureValue < 0) {
 800ed86:	4b59      	ldr	r3, [pc, #356]	; (800eeec <settingsDrawData+0x16c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	da31      	bge.n	800edf2 <settingsDrawData+0x72>

		Paint_DrawChar(column[COLUMN_TEMP] - 8, line[LINE_TEMP], '-', &Font12,
 800ed8e:	4b58      	ldr	r3, [pc, #352]	; (800eef0 <settingsDrawData+0x170>)
 800ed90:	799b      	ldrb	r3, [r3, #6]
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	3b08      	subs	r3, #8
 800ed96:	b298      	uxth	r0, r3
 800ed98:	4b56      	ldr	r3, [pc, #344]	; (800eef4 <settingsDrawData+0x174>)
 800ed9a:	789b      	ldrb	r3, [r3, #2]
 800ed9c:	b299      	uxth	r1, r3
 800ed9e:	4b56      	ldr	r3, [pc, #344]	; (800eef8 <settingsDrawData+0x178>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	4a55      	ldr	r2, [pc, #340]	; (800eefc <settingsDrawData+0x17c>)
 800eda8:	7812      	ldrb	r2, [r2, #0]
 800edaa:	b2d2      	uxtb	r2, r2
 800edac:	b292      	uxth	r2, r2
 800edae:	4c54      	ldr	r4, [pc, #336]	; (800ef00 <settingsDrawData+0x180>)
 800edb0:	9201      	str	r2, [sp, #4]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	0023      	movs	r3, r4
 800edb6:	222d      	movs	r2, #45	; 0x2d
 800edb8:	f7f6 f970 	bl	800509c <Paint_DrawChar>
				colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800edbc:	4b4c      	ldr	r3, [pc, #304]	; (800eef0 <settingsDrawData+0x170>)
 800edbe:	799b      	ldrb	r3, [r3, #6]
 800edc0:	b298      	uxth	r0, r3
 800edc2:	4b4c      	ldr	r3, [pc, #304]	; (800eef4 <settingsDrawData+0x174>)
 800edc4:	789b      	ldrb	r3, [r3, #2]
 800edc6:	b299      	uxth	r1, r3
 800edc8:	4b48      	ldr	r3, [pc, #288]	; (800eeec <settingsDrawData+0x16c>)
 800edca:	681b      	ldr	r3, [r3, #0]
				abs(temperatureValue), &Font12, colorSecond, colorMain);
 800edcc:	17da      	asrs	r2, r3, #31
 800edce:	189c      	adds	r4, r3, r2
 800edd0:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800edd2:	4b49      	ldr	r3, [pc, #292]	; (800eef8 <settingsDrawData+0x178>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	b29b      	uxth	r3, r3
 800edda:	4a48      	ldr	r2, [pc, #288]	; (800eefc <settingsDrawData+0x17c>)
 800eddc:	7812      	ldrb	r2, [r2, #0]
 800edde:	b2d2      	uxtb	r2, r2
 800ede0:	b292      	uxth	r2, r2
 800ede2:	4d47      	ldr	r5, [pc, #284]	; (800ef00 <settingsDrawData+0x180>)
 800ede4:	9201      	str	r2, [sp, #4]
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	002b      	movs	r3, r5
 800edea:	0022      	movs	r2, r4
 800edec:	f7f6 fab8 	bl	8005360 <Paint_DrawNum>
 800edf0:	e016      	b.n	800ee20 <settingsDrawData+0xa0>

	} else {
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP], temperatureValue,
 800edf2:	4b3f      	ldr	r3, [pc, #252]	; (800eef0 <settingsDrawData+0x170>)
 800edf4:	799b      	ldrb	r3, [r3, #6]
 800edf6:	b298      	uxth	r0, r3
 800edf8:	4b3e      	ldr	r3, [pc, #248]	; (800eef4 <settingsDrawData+0x174>)
 800edfa:	789b      	ldrb	r3, [r3, #2]
 800edfc:	b299      	uxth	r1, r3
 800edfe:	4b3b      	ldr	r3, [pc, #236]	; (800eeec <settingsDrawData+0x16c>)
 800ee00:	681c      	ldr	r4, [r3, #0]
 800ee02:	4b3d      	ldr	r3, [pc, #244]	; (800eef8 <settingsDrawData+0x178>)
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	4a3c      	ldr	r2, [pc, #240]	; (800eefc <settingsDrawData+0x17c>)
 800ee0c:	7812      	ldrb	r2, [r2, #0]
 800ee0e:	b2d2      	uxtb	r2, r2
 800ee10:	b292      	uxth	r2, r2
 800ee12:	4d3b      	ldr	r5, [pc, #236]	; (800ef00 <settingsDrawData+0x180>)
 800ee14:	9201      	str	r2, [sp, #4]
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	002b      	movs	r3, r5
 800ee1a:	0022      	movs	r2, r4
 800ee1c:	f7f6 faa0 	bl	8005360 <Paint_DrawNum>
				&Font12, colorSecond, colorMain);
	}

	Paint_DrawNum(column[COLUMN_HUM], line[LINE_HUM], humidityValue, &Font12,
 800ee20:	4b33      	ldr	r3, [pc, #204]	; (800eef0 <settingsDrawData+0x170>)
 800ee22:	791b      	ldrb	r3, [r3, #4]
 800ee24:	b298      	uxth	r0, r3
 800ee26:	4b33      	ldr	r3, [pc, #204]	; (800eef4 <settingsDrawData+0x174>)
 800ee28:	795b      	ldrb	r3, [r3, #5]
 800ee2a:	b299      	uxth	r1, r3
 800ee2c:	4b35      	ldr	r3, [pc, #212]	; (800ef04 <settingsDrawData+0x184>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	001d      	movs	r5, r3
 800ee32:	4b31      	ldr	r3, [pc, #196]	; (800eef8 <settingsDrawData+0x178>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	4a30      	ldr	r2, [pc, #192]	; (800eefc <settingsDrawData+0x17c>)
 800ee3c:	7812      	ldrb	r2, [r2, #0]
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	b292      	uxth	r2, r2
 800ee42:	4c2f      	ldr	r4, [pc, #188]	; (800ef00 <settingsDrawData+0x180>)
 800ee44:	9201      	str	r2, [sp, #4]
 800ee46:	9300      	str	r3, [sp, #0]
 800ee48:	0023      	movs	r3, r4
 800ee4a:	002a      	movs	r2, r5
 800ee4c:	f7f6 fa88 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_PRESS], line[LINE_PRESS], pressureValue,
 800ee50:	4b27      	ldr	r3, [pc, #156]	; (800eef0 <settingsDrawData+0x170>)
 800ee52:	78db      	ldrb	r3, [r3, #3]
 800ee54:	b298      	uxth	r0, r3
 800ee56:	4b27      	ldr	r3, [pc, #156]	; (800eef4 <settingsDrawData+0x174>)
 800ee58:	7a1b      	ldrb	r3, [r3, #8]
 800ee5a:	b299      	uxth	r1, r3
 800ee5c:	4b2a      	ldr	r3, [pc, #168]	; (800ef08 <settingsDrawData+0x188>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	001d      	movs	r5, r3
 800ee62:	4b25      	ldr	r3, [pc, #148]	; (800eef8 <settingsDrawData+0x178>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	4a24      	ldr	r2, [pc, #144]	; (800eefc <settingsDrawData+0x17c>)
 800ee6c:	7812      	ldrb	r2, [r2, #0]
 800ee6e:	b2d2      	uxtb	r2, r2
 800ee70:	b292      	uxth	r2, r2
 800ee72:	4c23      	ldr	r4, [pc, #140]	; (800ef00 <settingsDrawData+0x180>)
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	0023      	movs	r3, r4
 800ee7a:	002a      	movs	r2, r5
 800ee7c:	f7f6 fa70 	bl	8005360 <Paint_DrawNum>
			&Font12, colorSecond, colorMain);

	if (altitudeValue < 0) {
 800ee80:	4b22      	ldr	r3, [pc, #136]	; (800ef0c <settingsDrawData+0x18c>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da43      	bge.n	800ef10 <settingsDrawData+0x190>
		Paint_DrawChar(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE], '-',
 800ee88:	4b19      	ldr	r3, [pc, #100]	; (800eef0 <settingsDrawData+0x170>)
 800ee8a:	789b      	ldrb	r3, [r3, #2]
 800ee8c:	b298      	uxth	r0, r3
 800ee8e:	4b19      	ldr	r3, [pc, #100]	; (800eef4 <settingsDrawData+0x174>)
 800ee90:	7adb      	ldrb	r3, [r3, #11]
 800ee92:	b299      	uxth	r1, r3
 800ee94:	4b18      	ldr	r3, [pc, #96]	; (800eef8 <settingsDrawData+0x178>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	4a17      	ldr	r2, [pc, #92]	; (800eefc <settingsDrawData+0x17c>)
 800ee9e:	7812      	ldrb	r2, [r2, #0]
 800eea0:	b2d2      	uxtb	r2, r2
 800eea2:	b292      	uxth	r2, r2
 800eea4:	4c16      	ldr	r4, [pc, #88]	; (800ef00 <settingsDrawData+0x180>)
 800eea6:	9201      	str	r2, [sp, #4]
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	0023      	movs	r3, r4
 800eeac:	222d      	movs	r2, #45	; 0x2d
 800eeae:	f7f6 f8f5 	bl	800509c <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800eeb2:	4b0f      	ldr	r3, [pc, #60]	; (800eef0 <settingsDrawData+0x170>)
 800eeb4:	789b      	ldrb	r3, [r3, #2]
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	3308      	adds	r3, #8
 800eeba:	b298      	uxth	r0, r3
 800eebc:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <settingsDrawData+0x174>)
 800eebe:	7adb      	ldrb	r3, [r3, #11]
 800eec0:	b299      	uxth	r1, r3
 800eec2:	4b12      	ldr	r3, [pc, #72]	; (800ef0c <settingsDrawData+0x18c>)
 800eec4:	681b      	ldr	r3, [r3, #0]
				abs(altitudeValue), &Font12, colorSecond, colorMain);
 800eec6:	17da      	asrs	r2, r3, #31
 800eec8:	189c      	adds	r4, r3, r2
 800eeca:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800eecc:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <settingsDrawData+0x178>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4a09      	ldr	r2, [pc, #36]	; (800eefc <settingsDrawData+0x17c>)
 800eed6:	7812      	ldrb	r2, [r2, #0]
 800eed8:	b2d2      	uxtb	r2, r2
 800eeda:	b292      	uxth	r2, r2
 800eedc:	4d08      	ldr	r5, [pc, #32]	; (800ef00 <settingsDrawData+0x180>)
 800eede:	9201      	str	r2, [sp, #4]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	002b      	movs	r3, r5
 800eee4:	0022      	movs	r2, r4
 800eee6:	f7f6 fa3b 	bl	8005360 <Paint_DrawNum>
 800eeea:	e028      	b.n	800ef3e <settingsDrawData+0x1be>
 800eeec:	200003bc 	.word	0x200003bc
 800eef0:	2000006c 	.word	0x2000006c
 800eef4:	20000044 	.word	0x20000044
 800eef8:	20000785 	.word	0x20000785
 800eefc:	2000034b 	.word	0x2000034b
 800ef00:	20000000 	.word	0x20000000
 800ef04:	2000013c 	.word	0x2000013c
 800ef08:	20000704 	.word	0x20000704
 800ef0c:	20000710 	.word	0x20000710
	} else {
		Paint_DrawNum(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE],
 800ef10:	4bc9      	ldr	r3, [pc, #804]	; (800f238 <settingsDrawData+0x4b8>)
 800ef12:	789b      	ldrb	r3, [r3, #2]
 800ef14:	b298      	uxth	r0, r3
 800ef16:	4bc9      	ldr	r3, [pc, #804]	; (800f23c <settingsDrawData+0x4bc>)
 800ef18:	7adb      	ldrb	r3, [r3, #11]
 800ef1a:	b299      	uxth	r1, r3
 800ef1c:	4bc8      	ldr	r3, [pc, #800]	; (800f240 <settingsDrawData+0x4c0>)
 800ef1e:	681c      	ldr	r4, [r3, #0]
 800ef20:	4bc8      	ldr	r3, [pc, #800]	; (800f244 <settingsDrawData+0x4c4>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4ac7      	ldr	r2, [pc, #796]	; (800f248 <settingsDrawData+0x4c8>)
 800ef2a:	7812      	ldrb	r2, [r2, #0]
 800ef2c:	b2d2      	uxtb	r2, r2
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	4dc6      	ldr	r5, [pc, #792]	; (800f24c <settingsDrawData+0x4cc>)
 800ef32:	9201      	str	r2, [sp, #4]
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	002b      	movs	r3, r5
 800ef38:	0022      	movs	r2, r4
 800ef3a:	f7f6 fa11 	bl	8005360 <Paint_DrawNum>
				altitudeValue, &Font12, colorSecond, colorMain);
	}

	//										SENSOR READINGS UNITS
	Paint_DrawString_EN(column[COLUMN_TEMP + 2], line[LINE_TEMP], "C", &Font12,
 800ef3e:	4bbe      	ldr	r3, [pc, #760]	; (800f238 <settingsDrawData+0x4b8>)
 800ef40:	7a1b      	ldrb	r3, [r3, #8]
 800ef42:	b298      	uxth	r0, r3
 800ef44:	4bbd      	ldr	r3, [pc, #756]	; (800f23c <settingsDrawData+0x4bc>)
 800ef46:	789b      	ldrb	r3, [r3, #2]
 800ef48:	b299      	uxth	r1, r3
 800ef4a:	4bbe      	ldr	r3, [pc, #760]	; (800f244 <settingsDrawData+0x4c4>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	4abd      	ldr	r2, [pc, #756]	; (800f248 <settingsDrawData+0x4c8>)
 800ef54:	7812      	ldrb	r2, [r2, #0]
 800ef56:	b2d2      	uxtb	r2, r2
 800ef58:	b292      	uxth	r2, r2
 800ef5a:	4dbc      	ldr	r5, [pc, #752]	; (800f24c <settingsDrawData+0x4cc>)
 800ef5c:	4cbc      	ldr	r4, [pc, #752]	; (800f250 <settingsDrawData+0x4d0>)
 800ef5e:	9201      	str	r2, [sp, #4]
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	002b      	movs	r3, r5
 800ef64:	0022      	movs	r2, r4
 800ef66:	f7f6 f97d 	bl	8005264 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_HUM + 2], line[LINE_HUM], "%", &Font12,
 800ef6a:	4bb3      	ldr	r3, [pc, #716]	; (800f238 <settingsDrawData+0x4b8>)
 800ef6c:	799b      	ldrb	r3, [r3, #6]
 800ef6e:	b298      	uxth	r0, r3
 800ef70:	4bb2      	ldr	r3, [pc, #712]	; (800f23c <settingsDrawData+0x4bc>)
 800ef72:	795b      	ldrb	r3, [r3, #5]
 800ef74:	b299      	uxth	r1, r3
 800ef76:	4bb3      	ldr	r3, [pc, #716]	; (800f244 <settingsDrawData+0x4c4>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	4ab2      	ldr	r2, [pc, #712]	; (800f248 <settingsDrawData+0x4c8>)
 800ef80:	7812      	ldrb	r2, [r2, #0]
 800ef82:	b2d2      	uxtb	r2, r2
 800ef84:	b292      	uxth	r2, r2
 800ef86:	4db1      	ldr	r5, [pc, #708]	; (800f24c <settingsDrawData+0x4cc>)
 800ef88:	4cb2      	ldr	r4, [pc, #712]	; (800f254 <settingsDrawData+0x4d4>)
 800ef8a:	9201      	str	r2, [sp, #4]
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	002b      	movs	r3, r5
 800ef90:	0022      	movs	r2, r4
 800ef92:	f7f6 f967 	bl	8005264 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS + 4], line[LINE_PRESS], "hPa",
 800ef96:	4ba8      	ldr	r3, [pc, #672]	; (800f238 <settingsDrawData+0x4b8>)
 800ef98:	79db      	ldrb	r3, [r3, #7]
 800ef9a:	b298      	uxth	r0, r3
 800ef9c:	4ba7      	ldr	r3, [pc, #668]	; (800f23c <settingsDrawData+0x4bc>)
 800ef9e:	7a1b      	ldrb	r3, [r3, #8]
 800efa0:	b299      	uxth	r1, r3
 800efa2:	4ba8      	ldr	r3, [pc, #672]	; (800f244 <settingsDrawData+0x4c4>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	4aa7      	ldr	r2, [pc, #668]	; (800f248 <settingsDrawData+0x4c8>)
 800efac:	7812      	ldrb	r2, [r2, #0]
 800efae:	b2d2      	uxtb	r2, r2
 800efb0:	b292      	uxth	r2, r2
 800efb2:	4da6      	ldr	r5, [pc, #664]	; (800f24c <settingsDrawData+0x4cc>)
 800efb4:	4ca8      	ldr	r4, [pc, #672]	; (800f258 <settingsDrawData+0x4d8>)
 800efb6:	9201      	str	r2, [sp, #4]
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	002b      	movs	r3, r5
 800efbc:	0022      	movs	r2, r4
 800efbe:	f7f6 f951 	bl	8005264 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_ALTITUDE + 5], line[LINE_ALTITUDE],
 800efc2:	4b9d      	ldr	r3, [pc, #628]	; (800f238 <settingsDrawData+0x4b8>)
 800efc4:	79db      	ldrb	r3, [r3, #7]
 800efc6:	b298      	uxth	r0, r3
 800efc8:	4b9c      	ldr	r3, [pc, #624]	; (800f23c <settingsDrawData+0x4bc>)
 800efca:	7adb      	ldrb	r3, [r3, #11]
 800efcc:	b299      	uxth	r1, r3
 800efce:	4b9d      	ldr	r3, [pc, #628]	; (800f244 <settingsDrawData+0x4c4>)
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	4a9c      	ldr	r2, [pc, #624]	; (800f248 <settingsDrawData+0x4c8>)
 800efd8:	7812      	ldrb	r2, [r2, #0]
 800efda:	b2d2      	uxtb	r2, r2
 800efdc:	b292      	uxth	r2, r2
 800efde:	4d9b      	ldr	r5, [pc, #620]	; (800f24c <settingsDrawData+0x4cc>)
 800efe0:	4c9e      	ldr	r4, [pc, #632]	; (800f25c <settingsDrawData+0x4dc>)
 800efe2:	9201      	str	r2, [sp, #4]
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	002b      	movs	r3, r5
 800efe8:	0022      	movs	r2, r4
 800efea:	f7f6 f93b 	bl	8005264 <Paint_DrawString_EN>
			"m a.s.l.", &Font12, colorSecond, colorMain);

	//										STRINGS
	Paint_DrawString_EN(column[COLUMN_LAYOUT], line[LINE_LAYOUT], "Layout:",
 800efee:	4b92      	ldr	r3, [pc, #584]	; (800f238 <settingsDrawData+0x4b8>)
 800eff0:	785b      	ldrb	r3, [r3, #1]
 800eff2:	b298      	uxth	r0, r3
 800eff4:	4b91      	ldr	r3, [pc, #580]	; (800f23c <settingsDrawData+0x4bc>)
 800eff6:	7e1b      	ldrb	r3, [r3, #24]
 800eff8:	b299      	uxth	r1, r3
 800effa:	4b92      	ldr	r3, [pc, #584]	; (800f244 <settingsDrawData+0x4c4>)
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	b2db      	uxtb	r3, r3
 800f000:	b29b      	uxth	r3, r3
 800f002:	4a91      	ldr	r2, [pc, #580]	; (800f248 <settingsDrawData+0x4c8>)
 800f004:	7812      	ldrb	r2, [r2, #0]
 800f006:	b2d2      	uxtb	r2, r2
 800f008:	b292      	uxth	r2, r2
 800f00a:	4d90      	ldr	r5, [pc, #576]	; (800f24c <settingsDrawData+0x4cc>)
 800f00c:	4c94      	ldr	r4, [pc, #592]	; (800f260 <settingsDrawData+0x4e0>)
 800f00e:	9201      	str	r2, [sp, #4]
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	002b      	movs	r3, r5
 800f014:	0022      	movs	r2, r4
 800f016:	f7f6 f925 	bl	8005264 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_COLOR], line[LINE_COLOR], "Color:",
 800f01a:	4b87      	ldr	r3, [pc, #540]	; (800f238 <settingsDrawData+0x4b8>)
 800f01c:	789b      	ldrb	r3, [r3, #2]
 800f01e:	b298      	uxth	r0, r3
 800f020:	4b86      	ldr	r3, [pc, #536]	; (800f23c <settingsDrawData+0x4bc>)
 800f022:	7f1b      	ldrb	r3, [r3, #28]
 800f024:	b299      	uxth	r1, r3
 800f026:	4b87      	ldr	r3, [pc, #540]	; (800f244 <settingsDrawData+0x4c4>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4a86      	ldr	r2, [pc, #536]	; (800f248 <settingsDrawData+0x4c8>)
 800f030:	7812      	ldrb	r2, [r2, #0]
 800f032:	b2d2      	uxtb	r2, r2
 800f034:	b292      	uxth	r2, r2
 800f036:	4d85      	ldr	r5, [pc, #532]	; (800f24c <settingsDrawData+0x4cc>)
 800f038:	4c8a      	ldr	r4, [pc, #552]	; (800f264 <settingsDrawData+0x4e4>)
 800f03a:	9201      	str	r2, [sp, #4]
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	002b      	movs	r3, r5
 800f040:	0022      	movs	r2, r4
 800f042:	f7f6 f90f 	bl	8005264 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_TEMP_CMP], line[LINE_TEMP_CMP], "T.cmp:",
 800f046:	4b7c      	ldr	r3, [pc, #496]	; (800f238 <settingsDrawData+0x4b8>)
 800f048:	79db      	ldrb	r3, [r3, #7]
 800f04a:	b298      	uxth	r0, r3
 800f04c:	4b7b      	ldr	r3, [pc, #492]	; (800f23c <settingsDrawData+0x4bc>)
 800f04e:	2224      	movs	r2, #36	; 0x24
 800f050:	5c9b      	ldrb	r3, [r3, r2]
 800f052:	b299      	uxth	r1, r3
 800f054:	4b7b      	ldr	r3, [pc, #492]	; (800f244 <settingsDrawData+0x4c4>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	4a7a      	ldr	r2, [pc, #488]	; (800f248 <settingsDrawData+0x4c8>)
 800f05e:	7812      	ldrb	r2, [r2, #0]
 800f060:	b2d2      	uxtb	r2, r2
 800f062:	b292      	uxth	r2, r2
 800f064:	4d79      	ldr	r5, [pc, #484]	; (800f24c <settingsDrawData+0x4cc>)
 800f066:	4c80      	ldr	r4, [pc, #512]	; (800f268 <settingsDrawData+0x4e8>)
 800f068:	9201      	str	r2, [sp, #4]
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	002b      	movs	r3, r5
 800f06e:	0022      	movs	r2, r4
 800f070:	f7f6 f8f8 	bl	8005264 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS_REF], line[LINE_PRESS_REF],
 800f074:	4b70      	ldr	r3, [pc, #448]	; (800f238 <settingsDrawData+0x4b8>)
 800f076:	791b      	ldrb	r3, [r3, #4]
 800f078:	b298      	uxth	r0, r3
 800f07a:	4b70      	ldr	r3, [pc, #448]	; (800f23c <settingsDrawData+0x4bc>)
 800f07c:	2220      	movs	r2, #32
 800f07e:	5c9b      	ldrb	r3, [r3, r2]
 800f080:	b299      	uxth	r1, r3
 800f082:	4b70      	ldr	r3, [pc, #448]	; (800f244 <settingsDrawData+0x4c4>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4a6f      	ldr	r2, [pc, #444]	; (800f248 <settingsDrawData+0x4c8>)
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	b292      	uxth	r2, r2
 800f092:	4d6e      	ldr	r5, [pc, #440]	; (800f24c <settingsDrawData+0x4cc>)
 800f094:	4c75      	ldr	r4, [pc, #468]	; (800f26c <settingsDrawData+0x4ec>)
 800f096:	9201      	str	r2, [sp, #4]
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	002b      	movs	r3, r5
 800f09c:	0022      	movs	r2, r4
 800f09e:	f7f6 f8e1 	bl	8005264 <Paint_DrawString_EN>
			"P.ref:", &Font12, colorSecond, colorMain);

	//										CLOCK
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_CLOCK], hours, &Font16,
 800f0a2:	4b65      	ldr	r3, [pc, #404]	; (800f238 <settingsDrawData+0x4b8>)
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	b298      	uxth	r0, r3
 800f0a8:	4b64      	ldr	r3, [pc, #400]	; (800f23c <settingsDrawData+0x4bc>)
 800f0aa:	7c1b      	ldrb	r3, [r3, #16]
 800f0ac:	b299      	uxth	r1, r3
 800f0ae:	4b70      	ldr	r3, [pc, #448]	; (800f270 <settingsDrawData+0x4f0>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	001d      	movs	r5, r3
 800f0b6:	4b63      	ldr	r3, [pc, #396]	; (800f244 <settingsDrawData+0x4c4>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	4a62      	ldr	r2, [pc, #392]	; (800f248 <settingsDrawData+0x4c8>)
 800f0c0:	7812      	ldrb	r2, [r2, #0]
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	b292      	uxth	r2, r2
 800f0c6:	4c6b      	ldr	r4, [pc, #428]	; (800f274 <settingsDrawData+0x4f4>)
 800f0c8:	9201      	str	r2, [sp, #4]
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	0023      	movs	r3, r4
 800f0ce:	002a      	movs	r2, r5
 800f0d0:	f7f6 f946 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_CLOCK], minutes, &Font16,
 800f0d4:	4b58      	ldr	r3, [pc, #352]	; (800f238 <settingsDrawData+0x4b8>)
 800f0d6:	78db      	ldrb	r3, [r3, #3]
 800f0d8:	b298      	uxth	r0, r3
 800f0da:	4b58      	ldr	r3, [pc, #352]	; (800f23c <settingsDrawData+0x4bc>)
 800f0dc:	7c1b      	ldrb	r3, [r3, #16]
 800f0de:	b299      	uxth	r1, r3
 800f0e0:	4b65      	ldr	r3, [pc, #404]	; (800f278 <settingsDrawData+0x4f8>)
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	b21b      	sxth	r3, r3
 800f0e6:	001d      	movs	r5, r3
 800f0e8:	4b56      	ldr	r3, [pc, #344]	; (800f244 <settingsDrawData+0x4c4>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	4a55      	ldr	r2, [pc, #340]	; (800f248 <settingsDrawData+0x4c8>)
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	b2d2      	uxtb	r2, r2
 800f0f6:	b292      	uxth	r2, r2
 800f0f8:	4c5e      	ldr	r4, [pc, #376]	; (800f274 <settingsDrawData+0x4f4>)
 800f0fa:	9201      	str	r2, [sp, #4]
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	0023      	movs	r3, r4
 800f100:	002a      	movs	r2, r5
 800f102:	f7f6 f92d 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_CLOCK], seconds, &Font16,
 800f106:	4b4c      	ldr	r3, [pc, #304]	; (800f238 <settingsDrawData+0x4b8>)
 800f108:	799b      	ldrb	r3, [r3, #6]
 800f10a:	b298      	uxth	r0, r3
 800f10c:	4b4b      	ldr	r3, [pc, #300]	; (800f23c <settingsDrawData+0x4bc>)
 800f10e:	7c1b      	ldrb	r3, [r3, #16]
 800f110:	b299      	uxth	r1, r3
 800f112:	4b5a      	ldr	r3, [pc, #360]	; (800f27c <settingsDrawData+0x4fc>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	b25b      	sxtb	r3, r3
 800f118:	001d      	movs	r5, r3
 800f11a:	4b4a      	ldr	r3, [pc, #296]	; (800f244 <settingsDrawData+0x4c4>)
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	b29b      	uxth	r3, r3
 800f122:	4a49      	ldr	r2, [pc, #292]	; (800f248 <settingsDrawData+0x4c8>)
 800f124:	7812      	ldrb	r2, [r2, #0]
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	b292      	uxth	r2, r2
 800f12a:	4c52      	ldr	r4, [pc, #328]	; (800f274 <settingsDrawData+0x4f4>)
 800f12c:	9201      	str	r2, [sp, #4]
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	0023      	movs	r3, r4
 800f132:	002a      	movs	r2, r5
 800f134:	f7f6 f914 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);

	//										DATE
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_DATE], day, &Font16,
 800f138:	4b3f      	ldr	r3, [pc, #252]	; (800f238 <settingsDrawData+0x4b8>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	b298      	uxth	r0, r3
 800f13e:	4b3f      	ldr	r3, [pc, #252]	; (800f23c <settingsDrawData+0x4bc>)
 800f140:	7d1b      	ldrb	r3, [r3, #20]
 800f142:	b299      	uxth	r1, r3
 800f144:	4b4e      	ldr	r3, [pc, #312]	; (800f280 <settingsDrawData+0x500>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	001d      	movs	r5, r3
 800f14c:	4b3d      	ldr	r3, [pc, #244]	; (800f244 <settingsDrawData+0x4c4>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	b29b      	uxth	r3, r3
 800f154:	4a3c      	ldr	r2, [pc, #240]	; (800f248 <settingsDrawData+0x4c8>)
 800f156:	7812      	ldrb	r2, [r2, #0]
 800f158:	b2d2      	uxtb	r2, r2
 800f15a:	b292      	uxth	r2, r2
 800f15c:	4c45      	ldr	r4, [pc, #276]	; (800f274 <settingsDrawData+0x4f4>)
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	0023      	movs	r3, r4
 800f164:	002a      	movs	r2, r5
 800f166:	f7f6 f8fb 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_DATE], month, &Font16,
 800f16a:	4b33      	ldr	r3, [pc, #204]	; (800f238 <settingsDrawData+0x4b8>)
 800f16c:	78db      	ldrb	r3, [r3, #3]
 800f16e:	b298      	uxth	r0, r3
 800f170:	4b32      	ldr	r3, [pc, #200]	; (800f23c <settingsDrawData+0x4bc>)
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	b299      	uxth	r1, r3
 800f176:	4b43      	ldr	r3, [pc, #268]	; (800f284 <settingsDrawData+0x504>)
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	001d      	movs	r5, r3
 800f17e:	4b31      	ldr	r3, [pc, #196]	; (800f244 <settingsDrawData+0x4c4>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	b2db      	uxtb	r3, r3
 800f184:	b29b      	uxth	r3, r3
 800f186:	4a30      	ldr	r2, [pc, #192]	; (800f248 <settingsDrawData+0x4c8>)
 800f188:	7812      	ldrb	r2, [r2, #0]
 800f18a:	b2d2      	uxtb	r2, r2
 800f18c:	b292      	uxth	r2, r2
 800f18e:	4c39      	ldr	r4, [pc, #228]	; (800f274 <settingsDrawData+0x4f4>)
 800f190:	9201      	str	r2, [sp, #4]
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	0023      	movs	r3, r4
 800f196:	002a      	movs	r2, r5
 800f198:	f7f6 f8e2 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_DATE], year, &Font16,
 800f19c:	4b26      	ldr	r3, [pc, #152]	; (800f238 <settingsDrawData+0x4b8>)
 800f19e:	799b      	ldrb	r3, [r3, #6]
 800f1a0:	b298      	uxth	r0, r3
 800f1a2:	4b26      	ldr	r3, [pc, #152]	; (800f23c <settingsDrawData+0x4bc>)
 800f1a4:	7d1b      	ldrb	r3, [r3, #20]
 800f1a6:	b299      	uxth	r1, r3
 800f1a8:	4b37      	ldr	r3, [pc, #220]	; (800f288 <settingsDrawData+0x508>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	001d      	movs	r5, r3
 800f1b0:	4b24      	ldr	r3, [pc, #144]	; (800f244 <settingsDrawData+0x4c4>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	4a23      	ldr	r2, [pc, #140]	; (800f248 <settingsDrawData+0x4c8>)
 800f1ba:	7812      	ldrb	r2, [r2, #0]
 800f1bc:	b2d2      	uxtb	r2, r2
 800f1be:	b292      	uxth	r2, r2
 800f1c0:	4c2c      	ldr	r4, [pc, #176]	; (800f274 <settingsDrawData+0x4f4>)
 800f1c2:	9201      	str	r2, [sp, #4]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	0023      	movs	r3, r4
 800f1c8:	002a      	movs	r2, r5
 800f1ca:	f7f6 f8c9 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);

	//										LAYOUT
	Paint_DrawNum(column[COLUMN_LAYOUT + 6], line[LINE_LAYOUT], layout, &Font12,
 800f1ce:	4b1a      	ldr	r3, [pc, #104]	; (800f238 <settingsDrawData+0x4b8>)
 800f1d0:	79db      	ldrb	r3, [r3, #7]
 800f1d2:	b298      	uxth	r0, r3
 800f1d4:	4b19      	ldr	r3, [pc, #100]	; (800f23c <settingsDrawData+0x4bc>)
 800f1d6:	7e1b      	ldrb	r3, [r3, #24]
 800f1d8:	b299      	uxth	r1, r3
 800f1da:	4b2c      	ldr	r3, [pc, #176]	; (800f28c <settingsDrawData+0x50c>)
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	001d      	movs	r5, r3
 800f1e2:	4b18      	ldr	r3, [pc, #96]	; (800f244 <settingsDrawData+0x4c4>)
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	4a17      	ldr	r2, [pc, #92]	; (800f248 <settingsDrawData+0x4c8>)
 800f1ec:	7812      	ldrb	r2, [r2, #0]
 800f1ee:	b2d2      	uxtb	r2, r2
 800f1f0:	b292      	uxth	r2, r2
 800f1f2:	4c16      	ldr	r4, [pc, #88]	; (800f24c <settingsDrawData+0x4cc>)
 800f1f4:	9201      	str	r2, [sp, #4]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	0023      	movs	r3, r4
 800f1fa:	002a      	movs	r2, r5
 800f1fc:	f7f6 f8b0 	bl	8005360 <Paint_DrawNum>
			colorSecond, colorMain);

	//										COLOR
	if (colorScheme == COLOR_SCHEME_WHITE)
 800f200:	4b23      	ldr	r3, [pc, #140]	; (800f290 <settingsDrawData+0x510>)
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b01      	cmp	r3, #1
 800f208:	d144      	bne.n	800f294 <settingsDrawData+0x514>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'W', &Font12,
 800f20a:	4b0b      	ldr	r3, [pc, #44]	; (800f238 <settingsDrawData+0x4b8>)
 800f20c:	79db      	ldrb	r3, [r3, #7]
 800f20e:	b298      	uxth	r0, r3
 800f210:	4b0a      	ldr	r3, [pc, #40]	; (800f23c <settingsDrawData+0x4bc>)
 800f212:	7f1b      	ldrb	r3, [r3, #28]
 800f214:	b299      	uxth	r1, r3
 800f216:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <settingsDrawData+0x4c4>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	4a0a      	ldr	r2, [pc, #40]	; (800f248 <settingsDrawData+0x4c8>)
 800f220:	7812      	ldrb	r2, [r2, #0]
 800f222:	b2d2      	uxtb	r2, r2
 800f224:	b292      	uxth	r2, r2
 800f226:	4c09      	ldr	r4, [pc, #36]	; (800f24c <settingsDrawData+0x4cc>)
 800f228:	9201      	str	r2, [sp, #4]
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	0023      	movs	r3, r4
 800f22e:	2257      	movs	r2, #87	; 0x57
 800f230:	f7f5 ff34 	bl	800509c <Paint_DrawChar>
 800f234:	e048      	b.n	800f2c8 <settingsDrawData+0x548>
 800f236:	46c0      	nop			; (mov r8, r8)
 800f238:	2000006c 	.word	0x2000006c
 800f23c:	20000044 	.word	0x20000044
 800f240:	20000710 	.word	0x20000710
 800f244:	20000785 	.word	0x20000785
 800f248:	2000034b 	.word	0x2000034b
 800f24c:	20000000 	.word	0x20000000
 800f250:	080133fc 	.word	0x080133fc
 800f254:	08013400 	.word	0x08013400
 800f258:	08013404 	.word	0x08013404
 800f25c:	08013408 	.word	0x08013408
 800f260:	08013414 	.word	0x08013414
 800f264:	0801341c 	.word	0x0801341c
 800f268:	08013424 	.word	0x08013424
 800f26c:	0801342c 	.word	0x0801342c
 800f270:	200007cb 	.word	0x200007cb
 800f274:	20000008 	.word	0x20000008
 800f278:	200007b8 	.word	0x200007b8
 800f27c:	2000076a 	.word	0x2000076a
 800f280:	20000778 	.word	0x20000778
 800f284:	200003c1 	.word	0x200003c1
 800f288:	20000774 	.word	0x20000774
 800f28c:	200007af 	.word	0x200007af
 800f290:	20000794 	.word	0x20000794
				colorSecond, colorMain);
	else if (colorScheme == COLOR_SCHEME_BLACK)
 800f294:	4b46      	ldr	r3, [pc, #280]	; (800f3b0 <settingsDrawData+0x630>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	d114      	bne.n	800f2c8 <settingsDrawData+0x548>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'B', &Font12,
 800f29e:	4b45      	ldr	r3, [pc, #276]	; (800f3b4 <settingsDrawData+0x634>)
 800f2a0:	79db      	ldrb	r3, [r3, #7]
 800f2a2:	b298      	uxth	r0, r3
 800f2a4:	4b44      	ldr	r3, [pc, #272]	; (800f3b8 <settingsDrawData+0x638>)
 800f2a6:	7f1b      	ldrb	r3, [r3, #28]
 800f2a8:	b299      	uxth	r1, r3
 800f2aa:	4b44      	ldr	r3, [pc, #272]	; (800f3bc <settingsDrawData+0x63c>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4a43      	ldr	r2, [pc, #268]	; (800f3c0 <settingsDrawData+0x640>)
 800f2b4:	7812      	ldrb	r2, [r2, #0]
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	b292      	uxth	r2, r2
 800f2ba:	4c42      	ldr	r4, [pc, #264]	; (800f3c4 <settingsDrawData+0x644>)
 800f2bc:	9201      	str	r2, [sp, #4]
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	0023      	movs	r3, r4
 800f2c2:	2242      	movs	r2, #66	; 0x42
 800f2c4:	f7f5 feea 	bl	800509c <Paint_DrawChar>
				colorSecond, colorMain);

	//										PRESSURE REFERENCE
	Paint_DrawNum(column[COLUMN_PRESS_REF + 5], line[LINE_PRESS_REF],
 800f2c8:	4b3a      	ldr	r3, [pc, #232]	; (800f3b4 <settingsDrawData+0x634>)
 800f2ca:	7a5b      	ldrb	r3, [r3, #9]
 800f2cc:	b298      	uxth	r0, r3
 800f2ce:	4b3a      	ldr	r3, [pc, #232]	; (800f3b8 <settingsDrawData+0x638>)
 800f2d0:	2220      	movs	r2, #32
 800f2d2:	5c9b      	ldrb	r3, [r3, r2]
 800f2d4:	b299      	uxth	r1, r3
 800f2d6:	4b3c      	ldr	r3, [pc, #240]	; (800f3c8 <settingsDrawData+0x648>)
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	b21b      	sxth	r3, r3
 800f2dc:	001d      	movs	r5, r3
 800f2de:	4b37      	ldr	r3, [pc, #220]	; (800f3bc <settingsDrawData+0x63c>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4a36      	ldr	r2, [pc, #216]	; (800f3c0 <settingsDrawData+0x640>)
 800f2e8:	7812      	ldrb	r2, [r2, #0]
 800f2ea:	b2d2      	uxtb	r2, r2
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	4c35      	ldr	r4, [pc, #212]	; (800f3c4 <settingsDrawData+0x644>)
 800f2f0:	9201      	str	r2, [sp, #4]
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	0023      	movs	r3, r4
 800f2f6:	002a      	movs	r2, r5
 800f2f8:	f7f6 f832 	bl	8005360 <Paint_DrawNum>
			pressureReference, &Font12, colorSecond, colorMain);

	//										TEMPERATURE COMPENSATION

	if (temperatureCompensation < 0) {
 800f2fc:	4b33      	ldr	r3, [pc, #204]	; (800f3cc <settingsDrawData+0x64c>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	b25b      	sxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	da36      	bge.n	800f374 <settingsDrawData+0x5f4>

		Paint_DrawChar(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP], '-',
 800f306:	4b2b      	ldr	r3, [pc, #172]	; (800f3b4 <settingsDrawData+0x634>)
 800f308:	7b1b      	ldrb	r3, [r3, #12]
 800f30a:	b298      	uxth	r0, r3
 800f30c:	4b2a      	ldr	r3, [pc, #168]	; (800f3b8 <settingsDrawData+0x638>)
 800f30e:	2224      	movs	r2, #36	; 0x24
 800f310:	5c9b      	ldrb	r3, [r3, r2]
 800f312:	b299      	uxth	r1, r3
 800f314:	4b29      	ldr	r3, [pc, #164]	; (800f3bc <settingsDrawData+0x63c>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	4a28      	ldr	r2, [pc, #160]	; (800f3c0 <settingsDrawData+0x640>)
 800f31e:	7812      	ldrb	r2, [r2, #0]
 800f320:	b2d2      	uxtb	r2, r2
 800f322:	b292      	uxth	r2, r2
 800f324:	4c27      	ldr	r4, [pc, #156]	; (800f3c4 <settingsDrawData+0x644>)
 800f326:	9201      	str	r2, [sp, #4]
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	0023      	movs	r3, r4
 800f32c:	222d      	movs	r2, #45	; 0x2d
 800f32e:	f7f5 feb5 	bl	800509c <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800f332:	4b20      	ldr	r3, [pc, #128]	; (800f3b4 <settingsDrawData+0x634>)
 800f334:	7b1b      	ldrb	r3, [r3, #12]
 800f336:	b29b      	uxth	r3, r3
 800f338:	3308      	adds	r3, #8
 800f33a:	b298      	uxth	r0, r3
 800f33c:	4b1e      	ldr	r3, [pc, #120]	; (800f3b8 <settingsDrawData+0x638>)
 800f33e:	2224      	movs	r2, #36	; 0x24
 800f340:	5c9b      	ldrb	r3, [r3, r2]
 800f342:	b299      	uxth	r1, r3
				abs(temperatureCompensation), &Font12, colorSecond, colorMain);
 800f344:	4b21      	ldr	r3, [pc, #132]	; (800f3cc <settingsDrawData+0x64c>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	b25b      	sxtb	r3, r3
 800f34a:	17da      	asrs	r2, r3, #31
 800f34c:	189b      	adds	r3, r3, r2
 800f34e:	4053      	eors	r3, r2
 800f350:	b2db      	uxtb	r3, r3
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800f352:	001d      	movs	r5, r3
 800f354:	4b19      	ldr	r3, [pc, #100]	; (800f3bc <settingsDrawData+0x63c>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4a18      	ldr	r2, [pc, #96]	; (800f3c0 <settingsDrawData+0x640>)
 800f35e:	7812      	ldrb	r2, [r2, #0]
 800f360:	b2d2      	uxtb	r2, r2
 800f362:	b292      	uxth	r2, r2
 800f364:	4c17      	ldr	r4, [pc, #92]	; (800f3c4 <settingsDrawData+0x644>)
 800f366:	9201      	str	r2, [sp, #4]
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	0023      	movs	r3, r4
 800f36c:	002a      	movs	r2, r5
 800f36e:	f7f5 fff7 	bl	8005360 <Paint_DrawNum>
	}

//	Paint_DrawNum(column[COLUMN_COLOR+7], line[LINE_COLOR], colorScheme, &Font16, colorSecond,
//			colorMain);

}
 800f372:	e019      	b.n	800f3a8 <settingsDrawData+0x628>
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP],
 800f374:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <settingsDrawData+0x634>)
 800f376:	7b1b      	ldrb	r3, [r3, #12]
 800f378:	b298      	uxth	r0, r3
 800f37a:	4b0f      	ldr	r3, [pc, #60]	; (800f3b8 <settingsDrawData+0x638>)
 800f37c:	2224      	movs	r2, #36	; 0x24
 800f37e:	5c9b      	ldrb	r3, [r3, r2]
 800f380:	b299      	uxth	r1, r3
 800f382:	4b12      	ldr	r3, [pc, #72]	; (800f3cc <settingsDrawData+0x64c>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	b25b      	sxtb	r3, r3
 800f388:	001d      	movs	r5, r3
 800f38a:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <settingsDrawData+0x63c>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	b29b      	uxth	r3, r3
 800f392:	4a0b      	ldr	r2, [pc, #44]	; (800f3c0 <settingsDrawData+0x640>)
 800f394:	7812      	ldrb	r2, [r2, #0]
 800f396:	b2d2      	uxtb	r2, r2
 800f398:	b292      	uxth	r2, r2
 800f39a:	4c0a      	ldr	r4, [pc, #40]	; (800f3c4 <settingsDrawData+0x644>)
 800f39c:	9201      	str	r2, [sp, #4]
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	0023      	movs	r3, r4
 800f3a2:	002a      	movs	r2, r5
 800f3a4:	f7f5 ffdc 	bl	8005360 <Paint_DrawNum>
}
 800f3a8:	46c0      	nop			; (mov r8, r8)
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ae:	46c0      	nop			; (mov r8, r8)
 800f3b0:	20000794 	.word	0x20000794
 800f3b4:	2000006c 	.word	0x2000006c
 800f3b8:	20000044 	.word	0x20000044
 800f3bc:	20000785 	.word	0x20000785
 800f3c0:	2000034b 	.word	0x2000034b
 800f3c4:	20000000 	.word	0x20000000
 800f3c8:	2000002a 	.word	0x2000002a
 800f3cc:	20000029 	.word	0x20000029

0800f3d0 <settingsDrawSubs>:

void settingsDrawSubs(void) {
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af04      	add	r7, sp, #16

	Paint_DrawChar(160, 40, '+', &Font20, colorSecond, colorMain);
 800f3d6:	4b31      	ldr	r3, [pc, #196]	; (800f49c <settingsDrawSubs+0xcc>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	4a30      	ldr	r2, [pc, #192]	; (800f4a0 <settingsDrawSubs+0xd0>)
 800f3e0:	7812      	ldrb	r2, [r2, #0]
 800f3e2:	b2d2      	uxtb	r2, r2
 800f3e4:	b292      	uxth	r2, r2
 800f3e6:	492f      	ldr	r1, [pc, #188]	; (800f4a4 <settingsDrawSubs+0xd4>)
 800f3e8:	9201      	str	r2, [sp, #4]
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	000b      	movs	r3, r1
 800f3ee:	222b      	movs	r2, #43	; 0x2b
 800f3f0:	2128      	movs	r1, #40	; 0x28
 800f3f2:	20a0      	movs	r0, #160	; 0xa0
 800f3f4:	f7f5 fe52 	bl	800509c <Paint_DrawChar>
	Paint_DrawChar(160, 140, '>', &Font20, colorSecond, colorMain);
 800f3f8:	4b28      	ldr	r3, [pc, #160]	; (800f49c <settingsDrawSubs+0xcc>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4a27      	ldr	r2, [pc, #156]	; (800f4a0 <settingsDrawSubs+0xd0>)
 800f402:	7812      	ldrb	r2, [r2, #0]
 800f404:	b2d2      	uxtb	r2, r2
 800f406:	b292      	uxth	r2, r2
 800f408:	4926      	ldr	r1, [pc, #152]	; (800f4a4 <settingsDrawSubs+0xd4>)
 800f40a:	9201      	str	r2, [sp, #4]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	000b      	movs	r3, r1
 800f410:	223e      	movs	r2, #62	; 0x3e
 800f412:	218c      	movs	r1, #140	; 0x8c
 800f414:	20a0      	movs	r0, #160	; 0xa0
 800f416:	f7f5 fe41 	bl	800509c <Paint_DrawChar>
	Paint_DrawString_EN(132, 92, "libra", &Font16, colorSecond, colorMain);
 800f41a:	4b20      	ldr	r3, [pc, #128]	; (800f49c <settingsDrawSubs+0xcc>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	b29b      	uxth	r3, r3
 800f422:	4a1f      	ldr	r2, [pc, #124]	; (800f4a0 <settingsDrawSubs+0xd0>)
 800f424:	7812      	ldrb	r2, [r2, #0]
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	b292      	uxth	r2, r2
 800f42a:	481f      	ldr	r0, [pc, #124]	; (800f4a8 <settingsDrawSubs+0xd8>)
 800f42c:	491f      	ldr	r1, [pc, #124]	; (800f4ac <settingsDrawSubs+0xdc>)
 800f42e:	9201      	str	r2, [sp, #4]
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	0003      	movs	r3, r0
 800f434:	000a      	movs	r2, r1
 800f436:	215c      	movs	r1, #92	; 0x5c
 800f438:	2084      	movs	r0, #132	; 0x84
 800f43a:	f7f5 ff13 	bl	8005264 <Paint_DrawString_EN>

	Paint_DrawLine(0, 75, 122, 75, colorSecond, DOT_PIXEL_1X1,
 800f43e:	4b17      	ldr	r3, [pc, #92]	; (800f49c <settingsDrawSubs+0xcc>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	b2db      	uxtb	r3, r3
 800f444:	b29b      	uxth	r3, r3
 800f446:	2200      	movs	r2, #0
 800f448:	9202      	str	r2, [sp, #8]
 800f44a:	2201      	movs	r2, #1
 800f44c:	9201      	str	r2, [sp, #4]
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	234b      	movs	r3, #75	; 0x4b
 800f452:	227a      	movs	r2, #122	; 0x7a
 800f454:	214b      	movs	r1, #75	; 0x4b
 800f456:	2000      	movs	r0, #0
 800f458:	f7f5 f93a 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 118, 122, 118, colorSecond, DOT_PIXEL_1X1,
 800f45c:	4b0f      	ldr	r3, [pc, #60]	; (800f49c <settingsDrawSubs+0xcc>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	b2db      	uxtb	r3, r3
 800f462:	b29b      	uxth	r3, r3
 800f464:	2200      	movs	r2, #0
 800f466:	9202      	str	r2, [sp, #8]
 800f468:	2201      	movs	r2, #1
 800f46a:	9201      	str	r2, [sp, #4]
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	2376      	movs	r3, #118	; 0x76
 800f470:	227a      	movs	r2, #122	; 0x7a
 800f472:	2176      	movs	r1, #118	; 0x76
 800f474:	2000      	movs	r0, #0
 800f476:	f7f5 f92b 	bl	80046d0 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	Paint_DrawCircle(200, 100, 80, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800f47a:	4b08      	ldr	r3, [pc, #32]	; (800f49c <settingsDrawSubs+0xcc>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	b29b      	uxth	r3, r3
 800f482:	2200      	movs	r2, #0
 800f484:	9201      	str	r2, [sp, #4]
 800f486:	2202      	movs	r2, #2
 800f488:	9200      	str	r2, [sp, #0]
 800f48a:	2250      	movs	r2, #80	; 0x50
 800f48c:	2164      	movs	r1, #100	; 0x64
 800f48e:	20c8      	movs	r0, #200	; 0xc8
 800f490:	f7f5 fbb2 	bl	8004bf8 <Paint_DrawCircle>

}
 800f494:	46c0      	nop			; (mov r8, r8)
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	46c0      	nop			; (mov r8, r8)
 800f49c:	20000785 	.word	0x20000785
 800f4a0:	2000034b 	.word	0x2000034b
 800f4a4:	20000010 	.word	0x20000010
 800f4a8:	20000008 	.word	0x20000008
 800f4ac:	08013434 	.word	0x08013434

0800f4b0 <settingsDrawPointer>:

void settingsDrawPointer(void) {
 800f4b0:	b5b0      	push	{r4, r5, r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af04      	add	r7, sp, #16
	if (settingsPointer == SETTINGS_HOURS) {
 800f4b6:	4baf      	ldr	r3, [pc, #700]	; (800f774 <settingsDrawPointer+0x2c4>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]

	}

	switch (settingsPointer) {
 800f4ba:	4bae      	ldr	r3, [pc, #696]	; (800f774 <settingsDrawPointer+0x2c4>)
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b0a      	cmp	r3, #10
 800f4c2:	d900      	bls.n	800f4c6 <settingsDrawPointer+0x16>
 800f4c4:	e152      	b.n	800f76c <settingsDrawPointer+0x2bc>
 800f4c6:	009a      	lsls	r2, r3, #2
 800f4c8:	4bab      	ldr	r3, [pc, #684]	; (800f778 <settingsDrawPointer+0x2c8>)
 800f4ca:	18d3      	adds	r3, r2, r3
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	469f      	mov	pc, r3
	case SETTINGS_HOURS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800f4d0:	4baa      	ldr	r3, [pc, #680]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	3303      	adds	r3, #3
 800f4d8:	b298      	uxth	r0, r3
 800f4da:	4ba9      	ldr	r3, [pc, #676]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f4dc:	7c1b      	ldrb	r3, [r3, #16]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	330f      	adds	r3, #15
 800f4e2:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f4e4:	4ba5      	ldr	r3, [pc, #660]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800f4ea:	3314      	adds	r3, #20
 800f4ec:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f4ee:	4ba4      	ldr	r3, [pc, #656]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f4f0:	7c1b      	ldrb	r3, [r3, #16]
 800f4f2:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800f4f4:	330f      	adds	r3, #15
 800f4f6:	b29c      	uxth	r4, r3
 800f4f8:	4ba2      	ldr	r3, [pc, #648]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	2500      	movs	r5, #0
 800f502:	9502      	str	r5, [sp, #8]
 800f504:	2502      	movs	r5, #2
 800f506:	9501      	str	r5, [sp, #4]
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	0023      	movs	r3, r4
 800f50c:	f7f5 f8e0 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // hour
		break;
 800f510:	e12c      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_MINUTES:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800f512:	4b9a      	ldr	r3, [pc, #616]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f514:	78db      	ldrb	r3, [r3, #3]
 800f516:	b29b      	uxth	r3, r3
 800f518:	3303      	adds	r3, #3
 800f51a:	b298      	uxth	r0, r3
 800f51c:	4b98      	ldr	r3, [pc, #608]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f51e:	7c1b      	ldrb	r3, [r3, #16]
 800f520:	b29b      	uxth	r3, r3
 800f522:	330f      	adds	r3, #15
 800f524:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f526:	4b95      	ldr	r3, [pc, #596]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f528:	78db      	ldrb	r3, [r3, #3]
 800f52a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800f52c:	3314      	adds	r3, #20
 800f52e:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f530:	4b93      	ldr	r3, [pc, #588]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f532:	7c1b      	ldrb	r3, [r3, #16]
 800f534:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800f536:	330f      	adds	r3, #15
 800f538:	b29c      	uxth	r4, r3
 800f53a:	4b92      	ldr	r3, [pc, #584]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	b29b      	uxth	r3, r3
 800f542:	2500      	movs	r5, #0
 800f544:	9502      	str	r5, [sp, #8]
 800f546:	2502      	movs	r5, #2
 800f548:	9501      	str	r5, [sp, #4]
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	0023      	movs	r3, r4
 800f54e:	f7f5 f8bf 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // minute
		break;
 800f552:	e10b      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_SECONDS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800f554:	4b89      	ldr	r3, [pc, #548]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f556:	799b      	ldrb	r3, [r3, #6]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	3303      	adds	r3, #3
 800f55c:	b298      	uxth	r0, r3
 800f55e:	4b88      	ldr	r3, [pc, #544]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f560:	7c1b      	ldrb	r3, [r3, #16]
 800f562:	b29b      	uxth	r3, r3
 800f564:	330f      	adds	r3, #15
 800f566:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f568:	4b84      	ldr	r3, [pc, #528]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f56a:	799b      	ldrb	r3, [r3, #6]
 800f56c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800f56e:	3314      	adds	r3, #20
 800f570:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800f572:	4b83      	ldr	r3, [pc, #524]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f574:	7c1b      	ldrb	r3, [r3, #16]
 800f576:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800f578:	330f      	adds	r3, #15
 800f57a:	b29c      	uxth	r4, r3
 800f57c:	4b81      	ldr	r3, [pc, #516]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	b2db      	uxtb	r3, r3
 800f582:	b29b      	uxth	r3, r3
 800f584:	2500      	movs	r5, #0
 800f586:	9502      	str	r5, [sp, #8]
 800f588:	2502      	movs	r5, #2
 800f58a:	9501      	str	r5, [sp, #4]
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	0023      	movs	r3, r4
 800f590:	f7f5 f89e 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // second
		break;
 800f594:	e0ea      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_DAYS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800f596:	4b79      	ldr	r3, [pc, #484]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	3303      	adds	r3, #3
 800f59e:	b298      	uxth	r0, r3
 800f5a0:	4b77      	ldr	r3, [pc, #476]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f5a2:	7d1b      	ldrb	r3, [r3, #20]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	330f      	adds	r3, #15
 800f5a8:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800f5aa:	4b74      	ldr	r3, [pc, #464]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800f5b0:	3314      	adds	r3, #20
 800f5b2:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800f5b4:	4b72      	ldr	r3, [pc, #456]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f5b6:	7d1b      	ldrb	r3, [r3, #20]
 800f5b8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800f5ba:	330f      	adds	r3, #15
 800f5bc:	b29c      	uxth	r4, r3
 800f5be:	4b71      	ldr	r3, [pc, #452]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	2500      	movs	r5, #0
 800f5c8:	9502      	str	r5, [sp, #8]
 800f5ca:	2502      	movs	r5, #2
 800f5cc:	9501      	str	r5, [sp, #4]
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	0023      	movs	r3, r4
 800f5d2:	f7f5 f87d 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // day
		break;
 800f5d6:	e0c9      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_MONTHS:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800f5d8:	4b68      	ldr	r3, [pc, #416]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f5da:	78db      	ldrb	r3, [r3, #3]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	3303      	adds	r3, #3
 800f5e0:	b298      	uxth	r0, r3
 800f5e2:	4b67      	ldr	r3, [pc, #412]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	330f      	adds	r3, #15
 800f5ea:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800f5ec:	4b63      	ldr	r3, [pc, #396]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f5ee:	78db      	ldrb	r3, [r3, #3]
 800f5f0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800f5f2:	3314      	adds	r3, #20
 800f5f4:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800f5f6:	4b62      	ldr	r3, [pc, #392]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f5f8:	7d1b      	ldrb	r3, [r3, #20]
 800f5fa:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800f5fc:	330f      	adds	r3, #15
 800f5fe:	b29c      	uxth	r4, r3
 800f600:	4b60      	ldr	r3, [pc, #384]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	b2db      	uxtb	r3, r3
 800f606:	b29b      	uxth	r3, r3
 800f608:	2500      	movs	r5, #0
 800f60a:	9502      	str	r5, [sp, #8]
 800f60c:	2502      	movs	r5, #2
 800f60e:	9501      	str	r5, [sp, #4]
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	0023      	movs	r3, r4
 800f614:	f7f5 f85c 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // month
		break;
 800f618:	e0a8      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_YEARS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800f61a:	4b58      	ldr	r3, [pc, #352]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f61c:	799b      	ldrb	r3, [r3, #6]
 800f61e:	b29b      	uxth	r3, r3
 800f620:	3303      	adds	r3, #3
 800f622:	b298      	uxth	r0, r3
 800f624:	4b56      	ldr	r3, [pc, #344]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f626:	7d1b      	ldrb	r3, [r3, #20]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	330f      	adds	r3, #15
 800f62c:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800f62e:	4b53      	ldr	r3, [pc, #332]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f630:	799b      	ldrb	r3, [r3, #6]
 800f632:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800f634:	3314      	adds	r3, #20
 800f636:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800f638:	4b51      	ldr	r3, [pc, #324]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f63a:	7d1b      	ldrb	r3, [r3, #20]
 800f63c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800f63e:	330f      	adds	r3, #15
 800f640:	b29c      	uxth	r4, r3
 800f642:	4b50      	ldr	r3, [pc, #320]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	b2db      	uxtb	r3, r3
 800f648:	b29b      	uxth	r3, r3
 800f64a:	2500      	movs	r5, #0
 800f64c:	9502      	str	r5, [sp, #8]
 800f64e:	2502      	movs	r5, #2
 800f650:	9501      	str	r5, [sp, #4]
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	0023      	movs	r3, r4
 800f656:	f7f5 f83b 	bl	80046d0 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800f65a:	e087      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_LAYOUT:
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800f65c:	4b47      	ldr	r3, [pc, #284]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f65e:	79db      	ldrb	r3, [r3, #7]
 800f660:	b29b      	uxth	r3, r3
 800f662:	3303      	adds	r3, #3
 800f664:	b298      	uxth	r0, r3
 800f666:	4b46      	ldr	r3, [pc, #280]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f668:	7e1b      	ldrb	r3, [r3, #24]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	330f      	adds	r3, #15
 800f66e:	b299      	uxth	r1, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800f670:	4b42      	ldr	r3, [pc, #264]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f672:	79db      	ldrb	r3, [r3, #7]
 800f674:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800f676:	330f      	adds	r3, #15
 800f678:	b29a      	uxth	r2, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800f67a:	4b41      	ldr	r3, [pc, #260]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f67c:	7e1b      	ldrb	r3, [r3, #24]
 800f67e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800f680:	330f      	adds	r3, #15
 800f682:	b29c      	uxth	r4, r3
 800f684:	4b3f      	ldr	r3, [pc, #252]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	2500      	movs	r5, #0
 800f68e:	9502      	str	r5, [sp, #8]
 800f690:	2502      	movs	r5, #2
 800f692:	9501      	str	r5, [sp, #4]
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	0023      	movs	r3, r4
 800f698:	f7f5 f81a 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800f69c:	e066      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_COLOR:
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800f69e:	4b37      	ldr	r3, [pc, #220]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f6a0:	79db      	ldrb	r3, [r3, #7]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	3303      	adds	r3, #3
 800f6a6:	b298      	uxth	r0, r3
 800f6a8:	4b35      	ldr	r3, [pc, #212]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f6aa:	7f1b      	ldrb	r3, [r3, #28]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	330f      	adds	r3, #15
 800f6b0:	b299      	uxth	r1, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800f6b2:	4b32      	ldr	r3, [pc, #200]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f6b4:	79db      	ldrb	r3, [r3, #7]
 800f6b6:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800f6b8:	330f      	adds	r3, #15
 800f6ba:	b29a      	uxth	r2, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800f6bc:	4b30      	ldr	r3, [pc, #192]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f6be:	7f1b      	ldrb	r3, [r3, #28]
 800f6c0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800f6c2:	330f      	adds	r3, #15
 800f6c4:	b29c      	uxth	r4, r3
 800f6c6:	4b2f      	ldr	r3, [pc, #188]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	2500      	movs	r5, #0
 800f6d0:	9502      	str	r5, [sp, #8]
 800f6d2:	2502      	movs	r5, #2
 800f6d4:	9501      	str	r5, [sp, #4]
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	0023      	movs	r3, r4
 800f6da:	f7f4 fff9 	bl	80046d0 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800f6de:	e045      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_PRESS_REF:
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800f6e0:	4b26      	ldr	r3, [pc, #152]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f6e2:	7a5b      	ldrb	r3, [r3, #9]
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	3303      	adds	r3, #3
 800f6e8:	b298      	uxth	r0, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800f6ea:	4b25      	ldr	r3, [pc, #148]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f6ec:	2220      	movs	r2, #32
 800f6ee:	5c9b      	ldrb	r3, [r3, r2]
 800f6f0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800f6f2:	330f      	adds	r3, #15
 800f6f4:	b299      	uxth	r1, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800f6f6:	4b21      	ldr	r3, [pc, #132]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f6f8:	7a5b      	ldrb	r3, [r3, #9]
 800f6fa:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800f6fc:	331e      	adds	r3, #30
 800f6fe:	b29a      	uxth	r2, r3
				line[LINE_PRESS_REF] + 15, colorSecond, DOT_PIXEL_2X2,
 800f700:	4b1f      	ldr	r3, [pc, #124]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f702:	2420      	movs	r4, #32
 800f704:	5d1b      	ldrb	r3, [r3, r4]
 800f706:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800f708:	330f      	adds	r3, #15
 800f70a:	b29c      	uxth	r4, r3
 800f70c:	4b1d      	ldr	r3, [pc, #116]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	b2db      	uxtb	r3, r3
 800f712:	b29b      	uxth	r3, r3
 800f714:	2500      	movs	r5, #0
 800f716:	9502      	str	r5, [sp, #8]
 800f718:	2502      	movs	r5, #2
 800f71a:	9501      	str	r5, [sp, #4]
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	0023      	movs	r3, r4
 800f720:	f7f4 ffd6 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800f724:	e022      	b.n	800f76c <settingsDrawPointer+0x2bc>

	case SETTINGS_TEMP_CMP:
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800f726:	4b15      	ldr	r3, [pc, #84]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f728:	7b1b      	ldrb	r3, [r3, #12]
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	3303      	adds	r3, #3
 800f72e:	b298      	uxth	r0, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800f730:	4b13      	ldr	r3, [pc, #76]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f732:	2224      	movs	r2, #36	; 0x24
 800f734:	5c9b      	ldrb	r3, [r3, r2]
 800f736:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800f738:	330f      	adds	r3, #15
 800f73a:	b299      	uxth	r1, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800f73c:	4b0f      	ldr	r3, [pc, #60]	; (800f77c <settingsDrawPointer+0x2cc>)
 800f73e:	7b1b      	ldrb	r3, [r3, #12]
 800f740:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800f742:	330f      	adds	r3, #15
 800f744:	b29a      	uxth	r2, r3
				line[LINE_TEMP_CMP] + 15, colorSecond, DOT_PIXEL_2X2,
 800f746:	4b0e      	ldr	r3, [pc, #56]	; (800f780 <settingsDrawPointer+0x2d0>)
 800f748:	2424      	movs	r4, #36	; 0x24
 800f74a:	5d1b      	ldrb	r3, [r3, r4]
 800f74c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800f74e:	330f      	adds	r3, #15
 800f750:	b29c      	uxth	r4, r3
 800f752:	4b0c      	ldr	r3, [pc, #48]	; (800f784 <settingsDrawPointer+0x2d4>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	b2db      	uxtb	r3, r3
 800f758:	b29b      	uxth	r3, r3
 800f75a:	2500      	movs	r5, #0
 800f75c:	9502      	str	r5, [sp, #8]
 800f75e:	2502      	movs	r5, #2
 800f760:	9501      	str	r5, [sp, #4]
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	0023      	movs	r3, r4
 800f766:	f7f4 ffb3 	bl	80046d0 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800f76a:	46c0      	nop			; (mov r8, r8)

	}

}
 800f76c:	46c0      	nop			; (mov r8, r8)
 800f76e:	46bd      	mov	sp, r7
 800f770:	bdb0      	pop	{r4, r5, r7, pc}
 800f772:	46c0      	nop			; (mov r8, r8)
 800f774:	200003d1 	.word	0x200003d1
 800f778:	080157cc 	.word	0x080157cc
 800f77c:	2000006c 	.word	0x2000006c
 800f780:	20000044 	.word	0x20000044
 800f784:	20000785 	.word	0x20000785

0800f788 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800f78c:	f7f6 f95a 	bl	8005a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800f790:	f000 f91c 	bl	800f9cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800f794:	f000 fba0 	bl	800fed8 <MX_GPIO_Init>
	MX_DMA_Init();
 800f798:	f000 fb80 	bl	800fe9c <MX_DMA_Init>
	MX_I2C1_Init();
 800f79c:	f000 fa30 	bl	800fc00 <MX_I2C1_Init>
	MX_ADC1_Init();
 800f7a0:	f000 f99e 	bl	800fae0 <MX_ADC1_Init>
	MX_RTC_Init();
 800f7a4:	f000 fa6c 	bl	800fc80 <MX_RTC_Init>
	MX_SPI1_Init();
 800f7a8:	f000 fae2 	bl	800fd70 <MX_SPI1_Init>
	MX_TIM3_Init();
 800f7ac:	f000 fb1e 	bl	800fdec <MX_TIM3_Init>

	//EPD test
	//EPD_1in54_V2_test();
	//										INITIALISATION
	//										INTERFACE
	layout = 2;  //select startup layout and color
 800f7b0:	4b76      	ldr	r3, [pc, #472]	; (800f98c <main+0x204>)
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	701a      	strb	r2, [r3, #0]
	colorScheme = COLOR_SCHEME_BLACK;
 800f7b6:	4b76      	ldr	r3, [pc, #472]	; (800f990 <main+0x208>)
 800f7b8:	2202      	movs	r2, #2
 800f7ba:	701a      	strb	r2, [r3, #0]

	flagClockConfig = 0;
 800f7bc:	4b75      	ldr	r3, [pc, #468]	; (800f994 <main+0x20c>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	701a      	strb	r2, [r3, #0]

	interfaceSelectLayout(layout);  //set layout and color
 800f7c2:	4b72      	ldr	r3, [pc, #456]	; (800f98c <main+0x204>)
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	f7fa fddb 	bl	800a384 <interfaceSelectLayout>
	interfaceSelectColorScheme(colorScheme);
 800f7ce:	4b70      	ldr	r3, [pc, #448]	; (800f990 <main+0x208>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	f7fb f9e7 	bl	800aba8 <interfaceSelectColorScheme>
	interfaceInit();
 800f7da:	f7fb fa09 	bl	800abf0 <interfaceInit>

	interfaceClear();	//clear framebuffer
 800f7de:	f7fb fb77 	bl	800aed0 <interfaceClear>

	interfaceUpdate(INTERFACE_UPDATE_FULL);	//change update mode
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	f7fb fb26 	bl	800ae34 <interfaceUpdate>

	interfaceDrawLayer(1);
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f7fb fb7f 	bl	800aeec <interfaceDrawLayer>
	interfaceDrawLayer(2);
 800f7ee:	2002      	movs	r0, #2
 800f7f0:	f7fb fb7c 	bl	800aeec <interfaceDrawLayer>
	interfaceDrawLayer(3);
 800f7f4:	2003      	movs	r0, #3
 800f7f6:	f7fb fb79 	bl	800aeec <interfaceDrawLayer>

	interfaceWrite();
 800f7fa:	f7fb fb4b 	bl	800ae94 <interfaceWrite>

	//										RTC INITIALISATION
	rtcInit();
 800f7fe:	f7fd fe8b 	bl	800d518 <rtcInit>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 800f802:	4965      	ldr	r1, [pc, #404]	; (800f998 <main+0x210>)
 800f804:	4b65      	ldr	r3, [pc, #404]	; (800f99c <main+0x214>)
 800f806:	2200      	movs	r2, #0
 800f808:	0018      	movs	r0, r3
 800f80a:	f7f9 fd23 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_RTCCLK_DIV16);

	//										SENSORS INITIALISATION

	sensingInit();
 800f80e:	f7fe f9bd 	bl	800db8c <sensingInit>

	//										TIMERS INITIALISATION
	timersInit();
 800f812:	f000 fed3 	bl	80105bc <timersInit>

//		uint32_t moonPhase = rtcGetMoonPhase(1992, 7, 31);

		//									MAIN LOOP

		if (flagClockConfig == 1) {
 800f816:	4b5f      	ldr	r3, [pc, #380]	; (800f994 <main+0x20c>)
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d104      	bne.n	800f82a <main+0xa2>
			SystemClock_Config();
 800f820:	f000 f8d4 	bl	800f9cc <SystemClock_Config>
			flagClockConfig = 0;
 800f824:	4b5b      	ldr	r3, [pc, #364]	; (800f994 <main+0x20c>)
 800f826:	2200      	movs	r2, #0
 800f828:	701a      	strb	r2, [r3, #0]
		}

		//									SENSING SECTION
		sensingRead();
 800f82a:	f7fe fad9 	bl	800dde0 <sensingRead>

		//									RTC SECTION

		rtcGetTime();
 800f82e:	f7fd fe83 	bl	800d538 <rtcGetTime>

		//									BATTERY SECURE SECTION

		if (batteryState >= 8) { //run every loop when battery low detected
 800f832:	4b5b      	ldr	r3, [pc, #364]	; (800f9a0 <main+0x218>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2b07      	cmp	r3, #7
 800f838:	d904      	bls.n	800f844 <main+0xbc>
			interfaceDrawBatteryWarning();
 800f83a:	f7fd fe4d 	bl	800d4d8 <interfaceDrawBatteryWarning>
			mode = MODE_NORMAL;
 800f83e:	4b59      	ldr	r3, [pc, #356]	; (800f9a4 <main+0x21c>)
 800f840:	2200      	movs	r2, #0
 800f842:	701a      	strb	r2, [r3, #0]
		}

		if (batteryState >= 8 && batteryLowFlag == 0) { //run once when battery low detected
 800f844:	4b56      	ldr	r3, [pc, #344]	; (800f9a0 <main+0x218>)
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b07      	cmp	r3, #7
 800f84a:	d910      	bls.n	800f86e <main+0xe6>
 800f84c:	4b56      	ldr	r3, [pc, #344]	; (800f9a8 <main+0x220>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10c      	bne.n	800f86e <main+0xe6>
			batteryLowFlag = 1;
 800f854:	4b54      	ldr	r3, [pc, #336]	; (800f9a8 <main+0x220>)
 800f856:	2201      	movs	r2, #1
 800f858:	701a      	strb	r2, [r3, #0]
			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_ULTRA_LONG,
 800f85a:	494f      	ldr	r1, [pc, #316]	; (800f998 <main+0x210>)
 800f85c:	4b4f      	ldr	r3, [pc, #316]	; (800f99c <main+0x214>)
 800f85e:	2200      	movs	r2, #0
 800f860:	0018      	movs	r0, r3
 800f862:	f7f9 fcf7 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
 800f866:	1e03      	subs	r3, r0, #0
 800f868:	d001      	beq.n	800f86e <main+0xe6>
			RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
				Error_Handler();
 800f86a:	f000 fbd7 	bl	801001c <Error_Handler>
			}
		}

		if (batteryState < 8 && batteryLowFlag == 1) { // run one when battery low disappears
 800f86e:	4b4c      	ldr	r3, [pc, #304]	; (800f9a0 <main+0x218>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	2b07      	cmp	r3, #7
 800f874:	d810      	bhi.n	800f898 <main+0x110>
 800f876:	4b4c      	ldr	r3, [pc, #304]	; (800f9a8 <main+0x220>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d10c      	bne.n	800f898 <main+0x110>
			batteryLowFlag = 0;
 800f87e:	4b4a      	ldr	r3, [pc, #296]	; (800f9a8 <main+0x220>)
 800f880:	2200      	movs	r2, #0
 800f882:	701a      	strb	r2, [r3, #0]
			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 800f884:	4944      	ldr	r1, [pc, #272]	; (800f998 <main+0x210>)
 800f886:	4b45      	ldr	r3, [pc, #276]	; (800f99c <main+0x214>)
 800f888:	2200      	movs	r2, #0
 800f88a:	0018      	movs	r0, r3
 800f88c:	f7f9 fce2 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
 800f890:	1e03      	subs	r3, r0, #0
 800f892:	d001      	beq.n	800f898 <main+0x110>
			RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
				Error_Handler();
 800f894:	f000 fbc2 	bl	801001c <Error_Handler>
			}
		}

		//									DISPLAY REFRESH SECTION

		if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {	//switch to partial if full was selected
 800f898:	4b44      	ldr	r3, [pc, #272]	; (800f9ac <main+0x224>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d102      	bne.n	800f8a8 <main+0x120>
			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	f7fb fac6 	bl	800ae34 <interfaceUpdate>
		}
		if (interfaceFullUpdateFlag == 1) {	//switch to full if flag are active. Flag can be set via RESET button
 800f8a8:	4b41      	ldr	r3, [pc, #260]	; (800f9b0 <main+0x228>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d105      	bne.n	800f8be <main+0x136>
			interfaceUpdate(INTERFACE_UPDATE_FULL);
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	f7fb fabe 	bl	800ae34 <interfaceUpdate>
			interfaceFullUpdateFlag = 0;
 800f8b8:	4b3d      	ldr	r3, [pc, #244]	; (800f9b0 <main+0x228>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
		}

		interfaceClear();	//clear framebuffer
 800f8be:	f7fb fb07 	bl	800aed0 <interfaceClear>

		//									NORMAL MODE

		if (flagSettings == FLAG_SETTINGS_OFF && batteryLowFlag != 1) {
 800f8c2:	4b3c      	ldr	r3, [pc, #240]	; (800f9b4 <main+0x22c>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10d      	bne.n	800f8e8 <main+0x160>
 800f8cc:	4b36      	ldr	r3, [pc, #216]	; (800f9a8 <main+0x220>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d009      	beq.n	800f8e8 <main+0x160>


			interfaceDrawLayer(1);
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	f7fb fb09 	bl	800aeec <interfaceDrawLayer>
			interfaceDrawLayer(2);
 800f8da:	2002      	movs	r0, #2
 800f8dc:	f7fb fb06 	bl	800aeec <interfaceDrawLayer>
			interfaceDrawLayer(3);
 800f8e0:	2003      	movs	r0, #3
 800f8e2:	f7fb fb03 	bl	800aeec <interfaceDrawLayer>
 800f8e6:	e00e      	b.n	800f906 <main+0x17e>

			//								SETTINGS MODE

		} else if (flagSettings == FLAG_SETTINGS_ON && batteryLowFlag != 1) {
 800f8e8:	4b32      	ldr	r3, [pc, #200]	; (800f9b4 <main+0x22c>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d109      	bne.n	800f906 <main+0x17e>
 800f8f2:	4b2d      	ldr	r3, [pc, #180]	; (800f9a8 <main+0x220>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d005      	beq.n	800f906 <main+0x17e>

			settingsDrawSubs(); //draw settings interface
 800f8fa:	f7ff fd69 	bl	800f3d0 <settingsDrawSubs>
			settingsDrawData();
 800f8fe:	f7ff fa3f 	bl	800ed80 <settingsDrawData>
			settingsDrawPointer();
 800f902:	f7ff fdd5 	bl	800f4b0 <settingsDrawPointer>

		}

		interfaceWrite();	//burn framebuffer
 800f906:	f7fb fac5 	bl	800ae94 <interfaceWrite>
		//									LOW POWER SECTION-SLEEP

		if ((flagSettings == FLAG_SETTINGS_OFF && flagDontSleep != 1
 800f90a:	4b2a      	ldr	r3, [pc, #168]	; (800f9b4 <main+0x22c>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	d136      	bne.n	800f982 <main+0x1fa>
 800f914:	4b28      	ldr	r3, [pc, #160]	; (800f9b8 <main+0x230>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d031      	beq.n	800f982 <main+0x1fa>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1)
 800f91e:	23a0      	movs	r3, #160	; 0xa0
 800f920:	05db      	lsls	r3, r3, #23
 800f922:	2110      	movs	r1, #16
 800f924:	0018      	movs	r0, r3
 800f926:	f7f7 fc91 	bl	800724c <HAL_GPIO_ReadPin>
 800f92a:	0003      	movs	r3, r0
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d128      	bne.n	800f982 <main+0x1fa>
				&& !(mode == MODE_CHRONO && chronoMinutes < 1)
 800f930:	4b1c      	ldr	r3, [pc, #112]	; (800f9a4 <main+0x21c>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b01      	cmp	r3, #1
 800f938:	d104      	bne.n	800f944 <main+0x1bc>
 800f93a:	4b20      	ldr	r3, [pc, #128]	; (800f9bc <main+0x234>)
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	b21b      	sxth	r3, r3
 800f940:	2b00      	cmp	r3, #0
 800f942:	dd1e      	ble.n	800f982 <main+0x1fa>
				&& LPMode == 1 && counterForce >= ON_TIME) {//sleep only when reset button is released
 800f944:	4b1e      	ldr	r3, [pc, #120]	; (800f9c0 <main+0x238>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d11a      	bne.n	800f982 <main+0x1fa>
 800f94c:	4b1d      	ldr	r3, [pc, #116]	; (800f9c4 <main+0x23c>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	b2db      	uxtb	r3, r3
 800f952:	2b13      	cmp	r3, #19
 800f954:	d915      	bls.n	800f982 <main+0x1fa>

				//to do in sleep mode
//			EPD_1IN54_V2_Sleep();
//			DEV_Module_Exit();
//
			HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 0);
 800f956:	4b1c      	ldr	r3, [pc, #112]	; (800f9c8 <main+0x240>)
 800f958:	2200      	movs	r2, #0
 800f95a:	2140      	movs	r1, #64	; 0x40
 800f95c:	0018      	movs	r0, r3
 800f95e:	f7f7 fc92 	bl	8007286 <HAL_GPIO_WritePin>
			HAL_SuspendTick();
 800f962:	f7f6 f919 	bl	8005b98 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800f966:	2380      	movs	r3, #128	; 0x80
 800f968:	01db      	lsls	r3, r3, #7
 800f96a:	2101      	movs	r1, #1
 800f96c:	0018      	movs	r0, r3
 800f96e:	f7f8 fab7 	bl	8007ee0 <HAL_PWR_EnterSTOPMode>
//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);

			//to do after wake up
			HAL_ResumeTick();
 800f972:	f7f6 f91f 	bl	8005bb4 <HAL_ResumeTick>
			HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 1);
 800f976:	4b14      	ldr	r3, [pc, #80]	; (800f9c8 <main+0x240>)
 800f978:	2201      	movs	r2, #1
 800f97a:	2140      	movs	r1, #64	; 0x40
 800f97c:	0018      	movs	r0, r3
 800f97e:	f7f7 fc82 	bl	8007286 <HAL_GPIO_WritePin>
//			DEV_Module_Init();
//			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);

		}

		flagDontSleep = 0; // is set via another button, for fast display refresh after pressing
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <main+0x230>)
 800f984:	2200      	movs	r2, #0
 800f986:	701a      	strb	r2, [r3, #0]
		if (flagClockConfig == 1) {
 800f988:	e745      	b.n	800f816 <main+0x8e>
 800f98a:	46c0      	nop			; (mov r8, r8)
 800f98c:	200007af 	.word	0x200007af
 800f990:	20000794 	.word	0x20000794
 800f994:	200006e8 	.word	0x200006e8
 800f998:	0000f7b7 	.word	0x0000f7b7
 800f99c:	2000084c 	.word	0x2000084c
 800f9a0:	200003b8 	.word	0x200003b8
 800f9a4:	200004c8 	.word	0x200004c8
 800f9a8:	20000109 	.word	0x20000109
 800f9ac:	2000070c 	.word	0x2000070c
 800f9b0:	200007a4 	.word	0x200007a4
 800f9b4:	2000065e 	.word	0x2000065e
 800f9b8:	20000795 	.word	0x20000795
 800f9bc:	200007b6 	.word	0x200007b6
 800f9c0:	200006e9 	.word	0x200006e9
 800f9c4:	20000796 	.word	0x20000796
 800f9c8:	50000400 	.word	0x50000400

0800f9cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800f9cc:	b590      	push	{r4, r7, lr}
 800f9ce:	b099      	sub	sp, #100	; 0x64
 800f9d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800f9d2:	242c      	movs	r4, #44	; 0x2c
 800f9d4:	193b      	adds	r3, r7, r4
 800f9d6:	0018      	movs	r0, r3
 800f9d8:	2334      	movs	r3, #52	; 0x34
 800f9da:	001a      	movs	r2, r3
 800f9dc:	2100      	movs	r1, #0
 800f9de:	f000 fe91 	bl	8010704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800f9e2:	231c      	movs	r3, #28
 800f9e4:	18fb      	adds	r3, r7, r3
 800f9e6:	0018      	movs	r0, r3
 800f9e8:	2310      	movs	r3, #16
 800f9ea:	001a      	movs	r2, r3
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	f000 fe89 	bl	8010704 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800f9f2:	003b      	movs	r3, r7
 800f9f4:	0018      	movs	r0, r3
 800f9f6:	231c      	movs	r3, #28
 800f9f8:	001a      	movs	r2, r3
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f000 fe82 	bl	8010704 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fa00:	2380      	movs	r3, #128	; 0x80
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	0018      	movs	r0, r3
 800fa06:	f7f8 faa3 	bl	8007f50 <HAL_PWREx_ControlVoltageScaling>
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800fa0a:	f7f8 fa5b 	bl	8007ec4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800fa0e:	4b32      	ldr	r3, [pc, #200]	; (800fad8 <SystemClock_Config+0x10c>)
 800fa10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa12:	4b31      	ldr	r3, [pc, #196]	; (800fad8 <SystemClock_Config+0x10c>)
 800fa14:	2118      	movs	r1, #24
 800fa16:	438a      	bics	r2, r1
 800fa18:	65da      	str	r2, [r3, #92]	; 0x5c
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800fa1a:	193b      	adds	r3, r7, r4
 800fa1c:	2206      	movs	r2, #6
 800fa1e:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800fa20:	193b      	adds	r3, r7, r4
 800fa22:	2201      	movs	r2, #1
 800fa24:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800fa26:	193b      	adds	r3, r7, r4
 800fa28:	2280      	movs	r2, #128	; 0x80
 800fa2a:	0052      	lsls	r2, r2, #1
 800fa2c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800fa2e:	0021      	movs	r1, r4
 800fa30:	187b      	adds	r3, r7, r1
 800fa32:	2200      	movs	r2, #0
 800fa34:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800fa36:	187b      	adds	r3, r7, r1
 800fa38:	2240      	movs	r2, #64	; 0x40
 800fa3a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fa3c:	187b      	adds	r3, r7, r1
 800fa3e:	2202      	movs	r2, #2
 800fa40:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800fa42:	187b      	adds	r3, r7, r1
 800fa44:	2202      	movs	r2, #2
 800fa46:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800fa48:	187b      	adds	r3, r7, r1
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 800fa4e:	187b      	adds	r3, r7, r1
 800fa50:	2208      	movs	r2, #8
 800fa52:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fa54:	187b      	adds	r3, r7, r1
 800fa56:	2280      	movs	r2, #128	; 0x80
 800fa58:	0292      	lsls	r2, r2, #10
 800fa5a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800fa5c:	187b      	adds	r3, r7, r1
 800fa5e:	2280      	movs	r2, #128	; 0x80
 800fa60:	0592      	lsls	r2, r2, #22
 800fa62:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800fa64:	187b      	adds	r3, r7, r1
 800fa66:	0018      	movs	r0, r3
 800fa68:	f7f8 fab2 	bl	8007fd0 <HAL_RCC_OscConfig>
 800fa6c:	1e03      	subs	r3, r0, #0
 800fa6e:	d001      	beq.n	800fa74 <SystemClock_Config+0xa8>
		Error_Handler();
 800fa70:	f000 fad4 	bl	801001c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800fa74:	211c      	movs	r1, #28
 800fa76:	187b      	adds	r3, r7, r1
 800fa78:	2207      	movs	r2, #7
 800fa7a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fa7c:	187b      	adds	r3, r7, r1
 800fa7e:	2202      	movs	r2, #2
 800fa80:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fa82:	187b      	adds	r3, r7, r1
 800fa84:	2200      	movs	r2, #0
 800fa86:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800fa88:	187b      	adds	r3, r7, r1
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800fa8e:	187b      	adds	r3, r7, r1
 800fa90:	2102      	movs	r1, #2
 800fa92:	0018      	movs	r0, r3
 800fa94:	f7f8 fdb2 	bl	80085fc <HAL_RCC_ClockConfig>
 800fa98:	1e03      	subs	r3, r0, #0
 800fa9a:	d001      	beq.n	800faa0 <SystemClock_Config+0xd4>
		Error_Handler();
 800fa9c:	f000 fabe 	bl	801001c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_I2C1
 800faa0:	003b      	movs	r3, r7
 800faa2:	4a0e      	ldr	r2, [pc, #56]	; (800fadc <SystemClock_Config+0x110>)
 800faa4:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800faa6:	003b      	movs	r3, r7
 800faa8:	2280      	movs	r2, #128	; 0x80
 800faaa:	0192      	lsls	r2, r2, #6
 800faac:	60da      	str	r2, [r3, #12]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 800faae:	003b      	movs	r3, r7
 800fab0:	2280      	movs	r2, #128	; 0x80
 800fab2:	0612      	lsls	r2, r2, #24
 800fab4:	615a      	str	r2, [r3, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800fab6:	003b      	movs	r3, r7
 800fab8:	2280      	movs	r2, #128	; 0x80
 800faba:	0052      	lsls	r2, r2, #1
 800fabc:	619a      	str	r2, [r3, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800fabe:	003b      	movs	r3, r7
 800fac0:	0018      	movs	r0, r3
 800fac2:	f7f8 ff25 	bl	8008910 <HAL_RCCEx_PeriphCLKConfig>
 800fac6:	1e03      	subs	r3, r0, #0
 800fac8:	d001      	beq.n	800face <SystemClock_Config+0x102>
		Error_Handler();
 800faca:	f000 faa7 	bl	801001c <Error_Handler>
	}
}
 800face:	46c0      	nop			; (mov r8, r8)
 800fad0:	46bd      	mov	sp, r7
 800fad2:	b019      	add	sp, #100	; 0x64
 800fad4:	bd90      	pop	{r4, r7, pc}
 800fad6:	46c0      	nop			; (mov r8, r8)
 800fad8:	40021000 	.word	0x40021000
 800fadc:	00024020 	.word	0x00024020

0800fae0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800fae6:	1d3b      	adds	r3, r7, #4
 800fae8:	0018      	movs	r0, r3
 800faea:	230c      	movs	r3, #12
 800faec:	001a      	movs	r2, r3
 800faee:	2100      	movs	r1, #0
 800faf0:	f000 fe08 	bl	8010704 <memset>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800faf4:	4b3e      	ldr	r3, [pc, #248]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800faf6:	4a3f      	ldr	r2, [pc, #252]	; (800fbf4 <MX_ADC1_Init+0x114>)
 800faf8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800fafa:	4b3d      	ldr	r3, [pc, #244]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fafc:	2280      	movs	r2, #128	; 0x80
 800fafe:	0612      	lsls	r2, r2, #24
 800fb00:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800fb02:	4b3b      	ldr	r3, [pc, #236]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fb08:	4b39      	ldr	r3, [pc, #228]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800fb0e:	4b38      	ldr	r3, [pc, #224]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb10:	2280      	movs	r2, #128	; 0x80
 800fb12:	0392      	lsls	r2, r2, #14
 800fb14:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800fb16:	4b36      	ldr	r3, [pc, #216]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb18:	2208      	movs	r2, #8
 800fb1a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800fb1c:	4b34      	ldr	r3, [pc, #208]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800fb22:	4b33      	ldr	r3, [pc, #204]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800fb28:	4b31      	ldr	r3, [pc, #196]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 3;
 800fb2e:	4b30      	ldr	r3, [pc, #192]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb30:	2203      	movs	r2, #3
 800fb32:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800fb34:	4b2e      	ldr	r3, [pc, #184]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb36:	2220      	movs	r2, #32
 800fb38:	2100      	movs	r1, #0
 800fb3a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fb3c:	4b2c      	ldr	r3, [pc, #176]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fb42:	4b2b      	ldr	r3, [pc, #172]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800fb48:	4b29      	ldr	r3, [pc, #164]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb4a:	222c      	movs	r2, #44	; 0x2c
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800fb50:	4b27      	ldr	r3, [pc, #156]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 800fb56:	4b26      	ldr	r3, [pc, #152]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb58:	2204      	movs	r2, #4
 800fb5a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 800fb5c:	4b24      	ldr	r3, [pc, #144]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb5e:	2204      	movs	r2, #4
 800fb60:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800fb62:	4b23      	ldr	r3, [pc, #140]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb64:	223c      	movs	r2, #60	; 0x3c
 800fb66:	2100      	movs	r1, #0
 800fb68:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800fb6a:	4b21      	ldr	r3, [pc, #132]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800fb70:	4b1f      	ldr	r3, [pc, #124]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb72:	0018      	movs	r0, r3
 800fb74:	f7f6 f972 	bl	8005e5c <HAL_ADC_Init>
 800fb78:	1e03      	subs	r3, r0, #0
 800fb7a:	d001      	beq.n	800fb80 <MX_ADC1_Init+0xa0>
		Error_Handler();
 800fb7c:	f000 fa4e 	bl	801001c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800fb80:	1d3b      	adds	r3, r7, #4
 800fb82:	4a1d      	ldr	r2, [pc, #116]	; (800fbf8 <MX_ADC1_Init+0x118>)
 800fb84:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800fb86:	1d3b      	adds	r3, r7, #4
 800fb88:	2200      	movs	r2, #0
 800fb8a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800fb8c:	1d3b      	adds	r3, r7, #4
 800fb8e:	2200      	movs	r2, #0
 800fb90:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800fb92:	1d3a      	adds	r2, r7, #4
 800fb94:	4b16      	ldr	r3, [pc, #88]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fb96:	0011      	movs	r1, r2
 800fb98:	0018      	movs	r0, r3
 800fb9a:	f7f6 fbdd 	bl	8006358 <HAL_ADC_ConfigChannel>
 800fb9e:	1e03      	subs	r3, r0, #0
 800fba0:	d001      	beq.n	800fba6 <MX_ADC1_Init+0xc6>
		Error_Handler();
 800fba2:	f000 fa3b 	bl	801001c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800fba6:	1d3b      	adds	r3, r7, #4
 800fba8:	2201      	movs	r2, #1
 800fbaa:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800fbac:	1d3b      	adds	r3, r7, #4
 800fbae:	2204      	movs	r2, #4
 800fbb0:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800fbb2:	1d3a      	adds	r2, r7, #4
 800fbb4:	4b0e      	ldr	r3, [pc, #56]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fbb6:	0011      	movs	r1, r2
 800fbb8:	0018      	movs	r0, r3
 800fbba:	f7f6 fbcd 	bl	8006358 <HAL_ADC_ConfigChannel>
 800fbbe:	1e03      	subs	r3, r0, #0
 800fbc0:	d001      	beq.n	800fbc6 <MX_ADC1_Init+0xe6>
		Error_Handler();
 800fbc2:	f000 fa2b 	bl	801001c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800fbc6:	1d3b      	adds	r3, r7, #4
 800fbc8:	4a0c      	ldr	r2, [pc, #48]	; (800fbfc <MX_ADC1_Init+0x11c>)
 800fbca:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800fbcc:	1d3b      	adds	r3, r7, #4
 800fbce:	2208      	movs	r2, #8
 800fbd0:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800fbd2:	1d3a      	adds	r2, r7, #4
 800fbd4:	4b06      	ldr	r3, [pc, #24]	; (800fbf0 <MX_ADC1_Init+0x110>)
 800fbd6:	0011      	movs	r1, r2
 800fbd8:	0018      	movs	r0, r3
 800fbda:	f7f6 fbbd 	bl	8006358 <HAL_ADC_ConfigChannel>
 800fbde:	1e03      	subs	r3, r0, #0
 800fbe0:	d001      	beq.n	800fbe6 <MX_ADC1_Init+0x106>
		Error_Handler();
 800fbe2:	f000 fa1b 	bl	801001c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800fbe6:	46c0      	nop			; (mov r8, r8)
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b004      	add	sp, #16
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	46c0      	nop			; (mov r8, r8)
 800fbf0:	20000460 	.word	0x20000460
 800fbf4:	40012400 	.word	0x40012400
 800fbf8:	04000002 	.word	0x04000002
 800fbfc:	14000020 	.word	0x14000020

0800fc00 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800fc04:	4b1b      	ldr	r3, [pc, #108]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc06:	4a1c      	ldr	r2, [pc, #112]	; (800fc78 <MX_I2C1_Init+0x78>)
 800fc08:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 800fc0a:	4b1a      	ldr	r3, [pc, #104]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc0c:	4a1b      	ldr	r2, [pc, #108]	; (800fc7c <MX_I2C1_Init+0x7c>)
 800fc0e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800fc10:	4b18      	ldr	r3, [pc, #96]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fc16:	4b17      	ldr	r3, [pc, #92]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fc1c:	4b15      	ldr	r3, [pc, #84]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800fc22:	4b14      	ldr	r3, [pc, #80]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800fc28:	4b12      	ldr	r3, [pc, #72]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fc2e:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc30:	2200      	movs	r2, #0
 800fc32:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fc34:	4b0f      	ldr	r3, [pc, #60]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800fc3a:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc3c:	0018      	movs	r0, r3
 800fc3e:	f7f7 fb73 	bl	8007328 <HAL_I2C_Init>
 800fc42:	1e03      	subs	r3, r0, #0
 800fc44:	d001      	beq.n	800fc4a <MX_I2C1_Init+0x4a>
		Error_Handler();
 800fc46:	f000 f9e9 	bl	801001c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800fc4a:	4b0a      	ldr	r3, [pc, #40]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	0018      	movs	r0, r3
 800fc50:	f7f8 f8a0 	bl	8007d94 <HAL_I2CEx_ConfigAnalogFilter>
 800fc54:	1e03      	subs	r3, r0, #0
 800fc56:	d001      	beq.n	800fc5c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800fc58:	f000 f9e0 	bl	801001c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <MX_I2C1_Init+0x74>)
 800fc5e:	2100      	movs	r1, #0
 800fc60:	0018      	movs	r0, r3
 800fc62:	f7f8 f8e3 	bl	8007e2c <HAL_I2CEx_ConfigDigitalFilter>
 800fc66:	1e03      	subs	r3, r0, #0
 800fc68:	d001      	beq.n	800fc6e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800fc6a:	f000 f9d7 	bl	801001c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800fc6e:	46c0      	nop			; (mov r8, r8)
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20000150 	.word	0x20000150
 800fc78:	40005400 	.word	0x40005400
 800fc7c:	00303d5b 	.word	0x00303d5b

0800fc80 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800fc86:	1d3b      	adds	r3, r7, #4
 800fc88:	0018      	movs	r0, r3
 800fc8a:	2314      	movs	r3, #20
 800fc8c:	001a      	movs	r2, r3
 800fc8e:	2100      	movs	r1, #0
 800fc90:	f000 fd38 	bl	8010704 <memset>
	RTC_DateTypeDef sDate = { 0 };
 800fc94:	003b      	movs	r3, r7
 800fc96:	2200      	movs	r2, #0
 800fc98:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800fc9a:	4b32      	ldr	r3, [pc, #200]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fc9c:	4a32      	ldr	r2, [pc, #200]	; (800fd68 <MX_RTC_Init+0xe8>)
 800fc9e:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800fca0:	4b30      	ldr	r3, [pc, #192]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 800fca6:	4b2f      	ldr	r3, [pc, #188]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fca8:	227f      	movs	r2, #127	; 0x7f
 800fcaa:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 800fcac:	4b2d      	ldr	r3, [pc, #180]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcae:	22ff      	movs	r2, #255	; 0xff
 800fcb0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800fcb2:	4b2c      	ldr	r3, [pc, #176]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800fcb8:	4b2a      	ldr	r3, [pc, #168]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800fcbe:	4b29      	ldr	r3, [pc, #164]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800fcc4:	4b27      	ldr	r3, [pc, #156]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcc6:	2280      	movs	r2, #128	; 0x80
 800fcc8:	05d2      	lsls	r2, r2, #23
 800fcca:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800fccc:	4b25      	ldr	r3, [pc, #148]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcce:	2200      	movs	r2, #0
 800fcd0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800fcd2:	4b24      	ldr	r3, [pc, #144]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fcd4:	0018      	movs	r0, r3
 800fcd6:	f7f8 ff4f 	bl	8008b78 <HAL_RTC_Init>
 800fcda:	1e03      	subs	r3, r0, #0
 800fcdc:	d001      	beq.n	800fce2 <MX_RTC_Init+0x62>
		Error_Handler();
 800fcde:	f000 f99d 	bl	801001c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 10;
 800fce2:	1d3b      	adds	r3, r7, #4
 800fce4:	220a      	movs	r2, #10
 800fce6:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 10;
 800fce8:	1d3b      	adds	r3, r7, #4
 800fcea:	220a      	movs	r2, #10
 800fcec:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 800fcee:	1d3b      	adds	r3, r7, #4
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 800fcf4:	1d3b      	adds	r3, r7, #4
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fcfa:	1d3b      	adds	r3, r7, #4
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800fd00:	1d3b      	adds	r3, r7, #4
 800fd02:	2200      	movs	r2, #0
 800fd04:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800fd06:	1d39      	adds	r1, r7, #4
 800fd08:	4b16      	ldr	r3, [pc, #88]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	0018      	movs	r0, r3
 800fd0e:	f7f8 ffc9 	bl	8008ca4 <HAL_RTC_SetTime>
 800fd12:	1e03      	subs	r3, r0, #0
 800fd14:	d001      	beq.n	800fd1a <MX_RTC_Init+0x9a>
		Error_Handler();
 800fd16:	f000 f981 	bl	801001c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800fd1a:	003b      	movs	r3, r7
 800fd1c:	2202      	movs	r2, #2
 800fd1e:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 800fd20:	003b      	movs	r3, r7
 800fd22:	2204      	movs	r2, #4
 800fd24:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 800fd26:	003b      	movs	r3, r7
 800fd28:	2214      	movs	r2, #20
 800fd2a:	709a      	strb	r2, [r3, #2]
	sDate.Year = 20;
 800fd2c:	003b      	movs	r3, r7
 800fd2e:	2214      	movs	r2, #20
 800fd30:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800fd32:	0039      	movs	r1, r7
 800fd34:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	0018      	movs	r0, r3
 800fd3a:	f7f9 f8b7 	bl	8008eac <HAL_RTC_SetDate>
 800fd3e:	1e03      	subs	r3, r0, #0
 800fd40:	d001      	beq.n	800fd46 <MX_RTC_Init+0xc6>
		Error_Handler();
 800fd42:	f000 f96b 	bl	801001c <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 65535, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 800fd46:	4909      	ldr	r1, [pc, #36]	; (800fd6c <MX_RTC_Init+0xec>)
 800fd48:	4b06      	ldr	r3, [pc, #24]	; (800fd64 <MX_RTC_Init+0xe4>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f7f9 fa81 	bl	8009254 <HAL_RTCEx_SetWakeUpTimer_IT>
 800fd52:	1e03      	subs	r3, r0, #0
 800fd54:	d001      	beq.n	800fd5a <MX_RTC_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 800fd56:	f000 f961 	bl	801001c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800fd5a:	46c0      	nop			; (mov r8, r8)
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	b006      	add	sp, #24
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	46c0      	nop			; (mov r8, r8)
 800fd64:	2000084c 	.word	0x2000084c
 800fd68:	40002800 	.word	0x40002800
 800fd6c:	0000ffff 	.word	0x0000ffff

0800fd70 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800fd74:	4b1b      	ldr	r3, [pc, #108]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd76:	4a1c      	ldr	r2, [pc, #112]	; (800fde8 <MX_SPI1_Init+0x78>)
 800fd78:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800fd7a:	4b1a      	ldr	r3, [pc, #104]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd7c:	2282      	movs	r2, #130	; 0x82
 800fd7e:	0052      	lsls	r2, r2, #1
 800fd80:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800fd82:	4b18      	ldr	r3, [pc, #96]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800fd88:	4b16      	ldr	r3, [pc, #88]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd8a:	22e0      	movs	r2, #224	; 0xe0
 800fd8c:	00d2      	lsls	r2, r2, #3
 800fd8e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fd90:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800fd96:	4b13      	ldr	r3, [pc, #76]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800fd9c:	4b11      	ldr	r3, [pc, #68]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fd9e:	2280      	movs	r2, #128	; 0x80
 800fda0:	0092      	lsls	r2, r2, #2
 800fda2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800fda4:	4b0f      	ldr	r3, [pc, #60]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fda6:	2218      	movs	r2, #24
 800fda8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fdaa:	4b0e      	ldr	r3, [pc, #56]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800fdb0:	4b0c      	ldr	r3, [pc, #48]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdb6:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800fdbc:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdbe:	2207      	movs	r2, #7
 800fdc0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800fdc2:	4b08      	ldr	r3, [pc, #32]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800fdc8:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdca:	2208      	movs	r2, #8
 800fdcc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <MX_SPI1_Init+0x74>)
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	f7f9 faff 	bl	80093d4 <HAL_SPI_Init>
 800fdd6:	1e03      	subs	r3, r0, #0
 800fdd8:	d001      	beq.n	800fdde <MX_SPI1_Init+0x6e>
		Error_Handler();
 800fdda:	f000 f91f 	bl	801001c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800fdde:	46c0      	nop			; (mov r8, r8)
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	20000878 	.word	0x20000878
 800fde8:	40013000 	.word	0x40013000

0800fdec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b088      	sub	sp, #32
 800fdf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800fdf2:	2310      	movs	r3, #16
 800fdf4:	18fb      	adds	r3, r7, r3
 800fdf6:	0018      	movs	r0, r3
 800fdf8:	2310      	movs	r3, #16
 800fdfa:	001a      	movs	r2, r3
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	f000 fc81 	bl	8010704 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800fe02:	1d3b      	adds	r3, r7, #4
 800fe04:	0018      	movs	r0, r3
 800fe06:	230c      	movs	r3, #12
 800fe08:	001a      	movs	r2, r3
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	f000 fc7a 	bl	8010704 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800fe10:	4b1e      	ldr	r3, [pc, #120]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe12:	4a1f      	ldr	r2, [pc, #124]	; (800fe90 <MX_TIM3_Init+0xa4>)
 800fe14:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3199;
 800fe16:	4b1d      	ldr	r3, [pc, #116]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe18:	4a1e      	ldr	r2, [pc, #120]	; (800fe94 <MX_TIM3_Init+0xa8>)
 800fe1a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe1c:	4b1b      	ldr	r3, [pc, #108]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 800fe22:	4b1a      	ldr	r3, [pc, #104]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe24:	4a1c      	ldr	r2, [pc, #112]	; (800fe98 <MX_TIM3_Init+0xac>)
 800fe26:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe28:	4b18      	ldr	r3, [pc, #96]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe2e:	4b17      	ldr	r3, [pc, #92]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800fe34:	4b15      	ldr	r3, [pc, #84]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe36:	0018      	movs	r0, r3
 800fe38:	f7f9 fe46 	bl	8009ac8 <HAL_TIM_Base_Init>
 800fe3c:	1e03      	subs	r3, r0, #0
 800fe3e:	d001      	beq.n	800fe44 <MX_TIM3_Init+0x58>
		Error_Handler();
 800fe40:	f000 f8ec 	bl	801001c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe44:	2110      	movs	r1, #16
 800fe46:	187b      	adds	r3, r7, r1
 800fe48:	2280      	movs	r2, #128	; 0x80
 800fe4a:	0152      	lsls	r2, r2, #5
 800fe4c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800fe4e:	187a      	adds	r2, r7, r1
 800fe50:	4b0e      	ldr	r3, [pc, #56]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe52:	0011      	movs	r1, r2
 800fe54:	0018      	movs	r0, r3
 800fe56:	f7fa f817 	bl	8009e88 <HAL_TIM_ConfigClockSource>
 800fe5a:	1e03      	subs	r3, r0, #0
 800fe5c:	d001      	beq.n	800fe62 <MX_TIM3_Init+0x76>
		Error_Handler();
 800fe5e:	f000 f8dd 	bl	801001c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe62:	1d3b      	adds	r3, r7, #4
 800fe64:	2200      	movs	r2, #0
 800fe66:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe68:	1d3b      	adds	r3, r7, #4
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800fe6e:	1d3a      	adds	r2, r7, #4
 800fe70:	4b06      	ldr	r3, [pc, #24]	; (800fe8c <MX_TIM3_Init+0xa0>)
 800fe72:	0011      	movs	r1, r2
 800fe74:	0018      	movs	r0, r3
 800fe76:	f7fa fa05 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 800fe7a:	1e03      	subs	r3, r0, #0
 800fe7c:	d001      	beq.n	800fe82 <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800fe7e:	f000 f8cd 	bl	801001c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800fe82:	46c0      	nop			; (mov r8, r8)
 800fe84:	46bd      	mov	sp, r7
 800fe86:	b008      	add	sp, #32
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	46c0      	nop			; (mov r8, r8)
 800fe8c:	200003d8 	.word	0x200003d8
 800fe90:	40000400 	.word	0x40000400
 800fe94:	00000c7f 	.word	0x00000c7f
 800fe98:	00004e1f 	.word	0x00004e1f

0800fe9c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800fea2:	4b0c      	ldr	r3, [pc, #48]	; (800fed4 <MX_DMA_Init+0x38>)
 800fea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fea6:	4b0b      	ldr	r3, [pc, #44]	; (800fed4 <MX_DMA_Init+0x38>)
 800fea8:	2101      	movs	r1, #1
 800feaa:	430a      	orrs	r2, r1
 800feac:	639a      	str	r2, [r3, #56]	; 0x38
 800feae:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <MX_DMA_Init+0x38>)
 800feb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb2:	2201      	movs	r2, #1
 800feb4:	4013      	ands	r3, r2
 800feb6:	607b      	str	r3, [r7, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800feba:	2200      	movs	r2, #0
 800febc:	2100      	movs	r1, #0
 800febe:	2009      	movs	r0, #9
 800fec0:	f7f6 fddc 	bl	8006a7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800fec4:	2009      	movs	r0, #9
 800fec6:	f7f6 fdee 	bl	8006aa6 <HAL_NVIC_EnableIRQ>

}
 800feca:	46c0      	nop			; (mov r8, r8)
 800fecc:	46bd      	mov	sp, r7
 800fece:	b002      	add	sp, #8
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	46c0      	nop			; (mov r8, r8)
 800fed4:	40021000 	.word	0x40021000

0800fed8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800fed8:	b590      	push	{r4, r7, lr}
 800feda:	b089      	sub	sp, #36	; 0x24
 800fedc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800fede:	240c      	movs	r4, #12
 800fee0:	193b      	adds	r3, r7, r4
 800fee2:	0018      	movs	r0, r3
 800fee4:	2314      	movs	r3, #20
 800fee6:	001a      	movs	r2, r3
 800fee8:	2100      	movs	r1, #0
 800feea:	f000 fc0b 	bl	8010704 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800feee:	4b48      	ldr	r3, [pc, #288]	; (8010010 <MX_GPIO_Init+0x138>)
 800fef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fef2:	4b47      	ldr	r3, [pc, #284]	; (8010010 <MX_GPIO_Init+0x138>)
 800fef4:	2104      	movs	r1, #4
 800fef6:	430a      	orrs	r2, r1
 800fef8:	635a      	str	r2, [r3, #52]	; 0x34
 800fefa:	4b45      	ldr	r3, [pc, #276]	; (8010010 <MX_GPIO_Init+0x138>)
 800fefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fefe:	2204      	movs	r2, #4
 800ff00:	4013      	ands	r3, r2
 800ff02:	60bb      	str	r3, [r7, #8]
 800ff04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800ff06:	4b42      	ldr	r3, [pc, #264]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff0a:	4b41      	ldr	r3, [pc, #260]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff0c:	2101      	movs	r1, #1
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	635a      	str	r2, [r3, #52]	; 0x34
 800ff12:	4b3f      	ldr	r3, [pc, #252]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff16:	2201      	movs	r2, #1
 800ff18:	4013      	ands	r3, r2
 800ff1a:	607b      	str	r3, [r7, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800ff1e:	4b3c      	ldr	r3, [pc, #240]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff22:	4b3b      	ldr	r3, [pc, #236]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff24:	2102      	movs	r1, #2
 800ff26:	430a      	orrs	r2, r1
 800ff28:	635a      	str	r2, [r3, #52]	; 0x34
 800ff2a:	4b39      	ldr	r3, [pc, #228]	; (8010010 <MX_GPIO_Init+0x138>)
 800ff2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff2e:	2202      	movs	r2, #2
 800ff30:	4013      	ands	r3, r2
 800ff32:	603b      	str	r3, [r7, #0]
 800ff34:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 800ff36:	23e0      	movs	r3, #224	; 0xe0
 800ff38:	00d9      	lsls	r1, r3, #3
 800ff3a:	23a0      	movs	r3, #160	; 0xa0
 800ff3c:	05db      	lsls	r3, r3, #23
 800ff3e:	2200      	movs	r2, #0
 800ff40:	0018      	movs	r0, r3
 800ff42:	f7f7 f9a0 	bl	8007286 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 800ff46:	4b33      	ldr	r3, [pc, #204]	; (8010014 <MX_GPIO_Init+0x13c>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	2140      	movs	r1, #64	; 0x40
 800ff4c:	0018      	movs	r0, r3
 800ff4e:	f7f7 f99a 	bl	8007286 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_Pin SET_Pin RESET_Pin */
	GPIO_InitStruct.Pin = START_Pin | SET_Pin | RESET_Pin;
 800ff52:	193b      	adds	r3, r7, r4
 800ff54:	221c      	movs	r2, #28
 800ff56:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ff58:	193b      	adds	r3, r7, r4
 800ff5a:	4a2f      	ldr	r2, [pc, #188]	; (8010018 <MX_GPIO_Init+0x140>)
 800ff5c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ff5e:	193b      	adds	r3, r7, r4
 800ff60:	2201      	movs	r2, #1
 800ff62:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff64:	193a      	adds	r2, r7, r4
 800ff66:	23a0      	movs	r3, #160	; 0xa0
 800ff68:	05db      	lsls	r3, r3, #23
 800ff6a:	0011      	movs	r1, r2
 800ff6c:	0018      	movs	r0, r3
 800ff6e:	f7f7 f809 	bl	8006f84 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_CS_Pin DC_Pin RST_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin | DC_Pin | RST_Pin;
 800ff72:	0021      	movs	r1, r4
 800ff74:	187b      	adds	r3, r7, r1
 800ff76:	22e0      	movs	r2, #224	; 0xe0
 800ff78:	00d2      	lsls	r2, r2, #3
 800ff7a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff7c:	000c      	movs	r4, r1
 800ff7e:	193b      	adds	r3, r7, r4
 800ff80:	2201      	movs	r2, #1
 800ff82:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff84:	193b      	adds	r3, r7, r4
 800ff86:	2200      	movs	r2, #0
 800ff88:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff8a:	193b      	adds	r3, r7, r4
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff90:	193a      	adds	r2, r7, r4
 800ff92:	23a0      	movs	r3, #160	; 0xa0
 800ff94:	05db      	lsls	r3, r3, #23
 800ff96:	0011      	movs	r1, r2
 800ff98:	0018      	movs	r0, r3
 800ff9a:	f7f6 fff3 	bl	8006f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSY_Pin */
	GPIO_InitStruct.Pin = BUSY_Pin;
 800ff9e:	193b      	adds	r3, r7, r4
 800ffa0:	2280      	movs	r2, #128	; 0x80
 800ffa2:	0152      	lsls	r2, r2, #5
 800ffa4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ffa6:	193b      	adds	r3, r7, r4
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffac:	193b      	adds	r3, r7, r4
 800ffae:	2200      	movs	r2, #0
 800ffb0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800ffb2:	193a      	adds	r2, r7, r4
 800ffb4:	23a0      	movs	r3, #160	; 0xa0
 800ffb6:	05db      	lsls	r3, r3, #23
 800ffb8:	0011      	movs	r1, r2
 800ffba:	0018      	movs	r0, r3
 800ffbc:	f7f6 ffe2 	bl	8006f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : STATUS_Pin */
	GPIO_InitStruct.Pin = STATUS_Pin;
 800ffc0:	0021      	movs	r1, r4
 800ffc2:	187b      	adds	r3, r7, r1
 800ffc4:	2240      	movs	r2, #64	; 0x40
 800ffc6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffc8:	187b      	adds	r3, r7, r1
 800ffca:	2201      	movs	r2, #1
 800ffcc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffce:	187b      	adds	r3, r7, r1
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffd4:	187b      	adds	r3, r7, r1
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 800ffda:	187b      	adds	r3, r7, r1
 800ffdc:	4a0d      	ldr	r2, [pc, #52]	; (8010014 <MX_GPIO_Init+0x13c>)
 800ffde:	0019      	movs	r1, r3
 800ffe0:	0010      	movs	r0, r2
 800ffe2:	f7f6 ffcf 	bl	8006f84 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2102      	movs	r1, #2
 800ffea:	2006      	movs	r0, #6
 800ffec:	f7f6 fd46 	bl	8006a7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800fff0:	2006      	movs	r0, #6
 800fff2:	f7f6 fd58 	bl	8006aa6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800fff6:	2200      	movs	r2, #0
 800fff8:	2102      	movs	r1, #2
 800fffa:	2007      	movs	r0, #7
 800fffc:	f7f6 fd3e 	bl	8006a7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8010000:	2007      	movs	r0, #7
 8010002:	f7f6 fd50 	bl	8006aa6 <HAL_NVIC_EnableIRQ>

}
 8010006:	46c0      	nop			; (mov r8, r8)
 8010008:	46bd      	mov	sp, r7
 801000a:	b009      	add	sp, #36	; 0x24
 801000c:	bd90      	pop	{r4, r7, pc}
 801000e:	46c0      	nop			; (mov r8, r8)
 8010010:	40021000 	.word	0x40021000
 8010014:	50000400 	.word	0x50000400
 8010018:	10210000 	.word	0x10210000

0801001c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 801001c:	b580      	push	{r7, lr}
 801001e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8010020:	46c0      	nop			; (mov r8, r8)
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
	...

08010028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801002e:	4b11      	ldr	r3, [pc, #68]	; (8010074 <HAL_MspInit+0x4c>)
 8010030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010032:	4b10      	ldr	r3, [pc, #64]	; (8010074 <HAL_MspInit+0x4c>)
 8010034:	2101      	movs	r1, #1
 8010036:	430a      	orrs	r2, r1
 8010038:	641a      	str	r2, [r3, #64]	; 0x40
 801003a:	4b0e      	ldr	r3, [pc, #56]	; (8010074 <HAL_MspInit+0x4c>)
 801003c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801003e:	2201      	movs	r2, #1
 8010040:	4013      	ands	r3, r2
 8010042:	607b      	str	r3, [r7, #4]
 8010044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010046:	4b0b      	ldr	r3, [pc, #44]	; (8010074 <HAL_MspInit+0x4c>)
 8010048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801004a:	4b0a      	ldr	r3, [pc, #40]	; (8010074 <HAL_MspInit+0x4c>)
 801004c:	2180      	movs	r1, #128	; 0x80
 801004e:	0549      	lsls	r1, r1, #21
 8010050:	430a      	orrs	r2, r1
 8010052:	63da      	str	r2, [r3, #60]	; 0x3c
 8010054:	4b07      	ldr	r3, [pc, #28]	; (8010074 <HAL_MspInit+0x4c>)
 8010056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010058:	2380      	movs	r3, #128	; 0x80
 801005a:	055b      	lsls	r3, r3, #21
 801005c:	4013      	ands	r3, r2
 801005e:	603b      	str	r3, [r7, #0]
 8010060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8010062:	23c0      	movs	r3, #192	; 0xc0
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	0018      	movs	r0, r3
 8010068:	f7f5 fdb2 	bl	8005bd0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801006c:	46c0      	nop			; (mov r8, r8)
 801006e:	46bd      	mov	sp, r7
 8010070:	b002      	add	sp, #8
 8010072:	bd80      	pop	{r7, pc}
 8010074:	40021000 	.word	0x40021000

08010078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010078:	b590      	push	{r4, r7, lr}
 801007a:	b08b      	sub	sp, #44	; 0x2c
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010080:	2414      	movs	r4, #20
 8010082:	193b      	adds	r3, r7, r4
 8010084:	0018      	movs	r0, r3
 8010086:	2314      	movs	r3, #20
 8010088:	001a      	movs	r2, r3
 801008a:	2100      	movs	r1, #0
 801008c:	f000 fb3a 	bl	8010704 <memset>
  if(hadc->Instance==ADC1)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	4a2d      	ldr	r2, [pc, #180]	; (801014c <HAL_ADC_MspInit+0xd4>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d154      	bne.n	8010144 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801009a:	4b2d      	ldr	r3, [pc, #180]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 801009c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801009e:	4b2c      	ldr	r3, [pc, #176]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 80100a0:	2180      	movs	r1, #128	; 0x80
 80100a2:	0349      	lsls	r1, r1, #13
 80100a4:	430a      	orrs	r2, r1
 80100a6:	641a      	str	r2, [r3, #64]	; 0x40
 80100a8:	4b29      	ldr	r3, [pc, #164]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 80100aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100ac:	2380      	movs	r3, #128	; 0x80
 80100ae:	035b      	lsls	r3, r3, #13
 80100b0:	4013      	ands	r3, r2
 80100b2:	613b      	str	r3, [r7, #16]
 80100b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100b6:	4b26      	ldr	r3, [pc, #152]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 80100b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100ba:	4b25      	ldr	r3, [pc, #148]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 80100bc:	2101      	movs	r1, #1
 80100be:	430a      	orrs	r2, r1
 80100c0:	635a      	str	r2, [r3, #52]	; 0x34
 80100c2:	4b23      	ldr	r3, [pc, #140]	; (8010150 <HAL_ADC_MspInit+0xd8>)
 80100c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100c6:	2201      	movs	r2, #1
 80100c8:	4013      	ands	r3, r2
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PASSIVE_Pin|BATT_Pin|ACTIVE_Pin;
 80100ce:	193b      	adds	r3, r7, r4
 80100d0:	2223      	movs	r2, #35	; 0x23
 80100d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80100d4:	193b      	adds	r3, r7, r4
 80100d6:	2203      	movs	r2, #3
 80100d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100da:	193b      	adds	r3, r7, r4
 80100dc:	2200      	movs	r2, #0
 80100de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100e0:	193a      	adds	r2, r7, r4
 80100e2:	23a0      	movs	r3, #160	; 0xa0
 80100e4:	05db      	lsls	r3, r3, #23
 80100e6:	0011      	movs	r1, r2
 80100e8:	0018      	movs	r0, r3
 80100ea:	f7f6 ff4b 	bl	8006f84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80100ee:	4b19      	ldr	r3, [pc, #100]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 80100f0:	4a19      	ldr	r2, [pc, #100]	; (8010158 <HAL_ADC_MspInit+0xe0>)
 80100f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80100f4:	4b17      	ldr	r3, [pc, #92]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 80100f6:	2205      	movs	r2, #5
 80100f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80100fa:	4b16      	ldr	r3, [pc, #88]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010100:	4b14      	ldr	r3, [pc, #80]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 8010102:	2200      	movs	r2, #0
 8010104:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010106:	4b13      	ldr	r3, [pc, #76]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 8010108:	2280      	movs	r2, #128	; 0x80
 801010a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801010c:	4b11      	ldr	r3, [pc, #68]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 801010e:	2280      	movs	r2, #128	; 0x80
 8010110:	0052      	lsls	r2, r2, #1
 8010112:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010114:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 8010116:	2280      	movs	r2, #128	; 0x80
 8010118:	00d2      	lsls	r2, r2, #3
 801011a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 801011c:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 801011e:	2220      	movs	r2, #32
 8010120:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8010122:	4b0c      	ldr	r3, [pc, #48]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 8010124:	2200      	movs	r2, #0
 8010126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 801012a:	0018      	movs	r0, r3
 801012c:	f7f6 fcd8 	bl	8006ae0 <HAL_DMA_Init>
 8010130:	1e03      	subs	r3, r0, #0
 8010132:	d001      	beq.n	8010138 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8010134:	f7ff ff72 	bl	801001c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a06      	ldr	r2, [pc, #24]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 801013c:	651a      	str	r2, [r3, #80]	; 0x50
 801013e:	4b05      	ldr	r3, [pc, #20]	; (8010154 <HAL_ADC_MspInit+0xdc>)
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8010144:	46c0      	nop			; (mov r8, r8)
 8010146:	46bd      	mov	sp, r7
 8010148:	b00b      	add	sp, #44	; 0x2c
 801014a:	bd90      	pop	{r4, r7, pc}
 801014c:	40012400 	.word	0x40012400
 8010150:	40021000 	.word	0x40021000
 8010154:	200007f0 	.word	0x200007f0
 8010158:	40020008 	.word	0x40020008

0801015c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801015c:	b590      	push	{r4, r7, lr}
 801015e:	b08b      	sub	sp, #44	; 0x2c
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010164:	2414      	movs	r4, #20
 8010166:	193b      	adds	r3, r7, r4
 8010168:	0018      	movs	r0, r3
 801016a:	2314      	movs	r3, #20
 801016c:	001a      	movs	r2, r3
 801016e:	2100      	movs	r1, #0
 8010170:	f000 fac8 	bl	8010704 <memset>
  if(hi2c->Instance==I2C1)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a1b      	ldr	r2, [pc, #108]	; (80101e8 <HAL_I2C_MspInit+0x8c>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d130      	bne.n	80101e0 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801017e:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <HAL_I2C_MspInit+0x90>)
 8010180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010182:	4b1a      	ldr	r3, [pc, #104]	; (80101ec <HAL_I2C_MspInit+0x90>)
 8010184:	2102      	movs	r1, #2
 8010186:	430a      	orrs	r2, r1
 8010188:	635a      	str	r2, [r3, #52]	; 0x34
 801018a:	4b18      	ldr	r3, [pc, #96]	; (80101ec <HAL_I2C_MspInit+0x90>)
 801018c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801018e:	2202      	movs	r2, #2
 8010190:	4013      	ands	r3, r2
 8010192:	613b      	str	r3, [r7, #16]
 8010194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8010196:	193b      	adds	r3, r7, r4
 8010198:	22c0      	movs	r2, #192	; 0xc0
 801019a:	0052      	lsls	r2, r2, #1
 801019c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801019e:	0021      	movs	r1, r4
 80101a0:	187b      	adds	r3, r7, r1
 80101a2:	2212      	movs	r2, #18
 80101a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80101a6:	187b      	adds	r3, r7, r1
 80101a8:	2201      	movs	r2, #1
 80101aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ac:	187b      	adds	r3, r7, r1
 80101ae:	2200      	movs	r2, #0
 80101b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80101b2:	187b      	adds	r3, r7, r1
 80101b4:	2206      	movs	r2, #6
 80101b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101b8:	187b      	adds	r3, r7, r1
 80101ba:	4a0d      	ldr	r2, [pc, #52]	; (80101f0 <HAL_I2C_MspInit+0x94>)
 80101bc:	0019      	movs	r1, r3
 80101be:	0010      	movs	r0, r2
 80101c0:	f7f6 fee0 	bl	8006f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80101c4:	4b09      	ldr	r3, [pc, #36]	; (80101ec <HAL_I2C_MspInit+0x90>)
 80101c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101c8:	4b08      	ldr	r3, [pc, #32]	; (80101ec <HAL_I2C_MspInit+0x90>)
 80101ca:	2180      	movs	r1, #128	; 0x80
 80101cc:	0389      	lsls	r1, r1, #14
 80101ce:	430a      	orrs	r2, r1
 80101d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80101d2:	4b06      	ldr	r3, [pc, #24]	; (80101ec <HAL_I2C_MspInit+0x90>)
 80101d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101d6:	2380      	movs	r3, #128	; 0x80
 80101d8:	039b      	lsls	r3, r3, #14
 80101da:	4013      	ands	r3, r2
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80101e0:	46c0      	nop			; (mov r8, r8)
 80101e2:	46bd      	mov	sp, r7
 80101e4:	b00b      	add	sp, #44	; 0x2c
 80101e6:	bd90      	pop	{r4, r7, pc}
 80101e8:	40005400 	.word	0x40005400
 80101ec:	40021000 	.word	0x40021000
 80101f0:	50000400 	.word	0x50000400

080101f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a11      	ldr	r2, [pc, #68]	; (8010248 <HAL_RTC_MspInit+0x54>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d11c      	bne.n	8010240 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010206:	4b11      	ldr	r3, [pc, #68]	; (801024c <HAL_RTC_MspInit+0x58>)
 8010208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801020a:	4b10      	ldr	r3, [pc, #64]	; (801024c <HAL_RTC_MspInit+0x58>)
 801020c:	2180      	movs	r1, #128	; 0x80
 801020e:	0209      	lsls	r1, r1, #8
 8010210:	430a      	orrs	r2, r1
 8010212:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8010214:	4b0d      	ldr	r3, [pc, #52]	; (801024c <HAL_RTC_MspInit+0x58>)
 8010216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010218:	4b0c      	ldr	r3, [pc, #48]	; (801024c <HAL_RTC_MspInit+0x58>)
 801021a:	2180      	movs	r1, #128	; 0x80
 801021c:	00c9      	lsls	r1, r1, #3
 801021e:	430a      	orrs	r2, r1
 8010220:	63da      	str	r2, [r3, #60]	; 0x3c
 8010222:	4b0a      	ldr	r3, [pc, #40]	; (801024c <HAL_RTC_MspInit+0x58>)
 8010224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010226:	2380      	movs	r3, #128	; 0x80
 8010228:	00db      	lsls	r3, r3, #3
 801022a:	4013      	ands	r3, r2
 801022c:	60fb      	str	r3, [r7, #12]
 801022e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 1, 0);
 8010230:	2200      	movs	r2, #0
 8010232:	2101      	movs	r1, #1
 8010234:	2002      	movs	r0, #2
 8010236:	f7f6 fc21 	bl	8006a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 801023a:	2002      	movs	r0, #2
 801023c:	f7f6 fc33 	bl	8006aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010240:	46c0      	nop			; (mov r8, r8)
 8010242:	46bd      	mov	sp, r7
 8010244:	b004      	add	sp, #16
 8010246:	bd80      	pop	{r7, pc}
 8010248:	40002800 	.word	0x40002800
 801024c:	40021000 	.word	0x40021000

08010250 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010250:	b590      	push	{r4, r7, lr}
 8010252:	b08b      	sub	sp, #44	; 0x2c
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010258:	2414      	movs	r4, #20
 801025a:	193b      	adds	r3, r7, r4
 801025c:	0018      	movs	r0, r3
 801025e:	2314      	movs	r3, #20
 8010260:	001a      	movs	r2, r3
 8010262:	2100      	movs	r1, #0
 8010264:	f000 fa4e 	bl	8010704 <memset>
  if(hspi->Instance==SPI1)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a2c      	ldr	r2, [pc, #176]	; (8010320 <HAL_SPI_MspInit+0xd0>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d151      	bne.n	8010316 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010272:	4b2c      	ldr	r3, [pc, #176]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 8010274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010276:	4b2b      	ldr	r3, [pc, #172]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 8010278:	2180      	movs	r1, #128	; 0x80
 801027a:	0149      	lsls	r1, r1, #5
 801027c:	430a      	orrs	r2, r1
 801027e:	641a      	str	r2, [r3, #64]	; 0x40
 8010280:	4b28      	ldr	r3, [pc, #160]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 8010282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010284:	2380      	movs	r3, #128	; 0x80
 8010286:	015b      	lsls	r3, r3, #5
 8010288:	4013      	ands	r3, r2
 801028a:	613b      	str	r3, [r7, #16]
 801028c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801028e:	4b25      	ldr	r3, [pc, #148]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 8010290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010292:	4b24      	ldr	r3, [pc, #144]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 8010294:	2101      	movs	r1, #1
 8010296:	430a      	orrs	r2, r1
 8010298:	635a      	str	r2, [r3, #52]	; 0x34
 801029a:	4b22      	ldr	r3, [pc, #136]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 801029c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801029e:	2201      	movs	r2, #1
 80102a0:	4013      	ands	r3, r2
 80102a2:	60fb      	str	r3, [r7, #12]
 80102a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80102a6:	4b1f      	ldr	r3, [pc, #124]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 80102a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102aa:	4b1e      	ldr	r3, [pc, #120]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 80102ac:	2102      	movs	r1, #2
 80102ae:	430a      	orrs	r2, r1
 80102b0:	635a      	str	r2, [r3, #52]	; 0x34
 80102b2:	4b1c      	ldr	r3, [pc, #112]	; (8010324 <HAL_SPI_MspInit+0xd4>)
 80102b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b6:	2202      	movs	r2, #2
 80102b8:	4013      	ands	r3, r2
 80102ba:	60bb      	str	r3, [r7, #8]
 80102bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80102be:	193b      	adds	r3, r7, r4
 80102c0:	2280      	movs	r2, #128	; 0x80
 80102c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102c4:	193b      	adds	r3, r7, r4
 80102c6:	2202      	movs	r2, #2
 80102c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102ca:	193b      	adds	r3, r7, r4
 80102cc:	2200      	movs	r2, #0
 80102ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80102d0:	193b      	adds	r3, r7, r4
 80102d2:	2202      	movs	r2, #2
 80102d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80102d6:	193b      	adds	r3, r7, r4
 80102d8:	2200      	movs	r2, #0
 80102da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102dc:	193a      	adds	r2, r7, r4
 80102de:	23a0      	movs	r3, #160	; 0xa0
 80102e0:	05db      	lsls	r3, r3, #23
 80102e2:	0011      	movs	r1, r2
 80102e4:	0018      	movs	r0, r3
 80102e6:	f7f6 fe4d 	bl	8006f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80102ea:	0021      	movs	r1, r4
 80102ec:	187b      	adds	r3, r7, r1
 80102ee:	2208      	movs	r2, #8
 80102f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102f2:	187b      	adds	r3, r7, r1
 80102f4:	2202      	movs	r2, #2
 80102f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102f8:	187b      	adds	r3, r7, r1
 80102fa:	2200      	movs	r2, #0
 80102fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80102fe:	187b      	adds	r3, r7, r1
 8010300:	2202      	movs	r2, #2
 8010302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8010304:	187b      	adds	r3, r7, r1
 8010306:	2200      	movs	r2, #0
 8010308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801030a:	187b      	adds	r3, r7, r1
 801030c:	4a06      	ldr	r2, [pc, #24]	; (8010328 <HAL_SPI_MspInit+0xd8>)
 801030e:	0019      	movs	r1, r3
 8010310:	0010      	movs	r0, r2
 8010312:	f7f6 fe37 	bl	8006f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8010316:	46c0      	nop			; (mov r8, r8)
 8010318:	46bd      	mov	sp, r7
 801031a:	b00b      	add	sp, #44	; 0x2c
 801031c:	bd90      	pop	{r4, r7, pc}
 801031e:	46c0      	nop			; (mov r8, r8)
 8010320:	40013000 	.word	0x40013000
 8010324:	40021000 	.word	0x40021000
 8010328:	50000400 	.word	0x50000400

0801032c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a0d      	ldr	r2, [pc, #52]	; (8010370 <HAL_TIM_Base_MspInit+0x44>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d113      	bne.n	8010366 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801033e:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <HAL_TIM_Base_MspInit+0x48>)
 8010340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010342:	4b0c      	ldr	r3, [pc, #48]	; (8010374 <HAL_TIM_Base_MspInit+0x48>)
 8010344:	2102      	movs	r1, #2
 8010346:	430a      	orrs	r2, r1
 8010348:	63da      	str	r2, [r3, #60]	; 0x3c
 801034a:	4b0a      	ldr	r3, [pc, #40]	; (8010374 <HAL_TIM_Base_MspInit+0x48>)
 801034c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801034e:	2202      	movs	r2, #2
 8010350:	4013      	ands	r3, r2
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8010356:	2200      	movs	r2, #0
 8010358:	2100      	movs	r1, #0
 801035a:	2010      	movs	r0, #16
 801035c:	f7f6 fb8e 	bl	8006a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8010360:	2010      	movs	r0, #16
 8010362:	f7f6 fba0 	bl	8006aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8010366:	46c0      	nop			; (mov r8, r8)
 8010368:	46bd      	mov	sp, r7
 801036a:	b004      	add	sp, #16
 801036c:	bd80      	pop	{r7, pc}
 801036e:	46c0      	nop			; (mov r8, r8)
 8010370:	40000400 	.word	0x40000400
 8010374:	40021000 	.word	0x40021000

08010378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801037c:	e7fe      	b.n	801037c <NMI_Handler+0x4>

0801037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010382:	e7fe      	b.n	8010382 <HardFault_Handler+0x4>

08010384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8010388:	46c0      	nop			; (mov r8, r8)
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010392:	46c0      	nop			; (mov r8, r8)
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801039c:	f7f5 fbbc 	bl	8005b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80103a0:	46c0      	nop			; (mov r8, r8)
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80103ac:	4b03      	ldr	r3, [pc, #12]	; (80103bc <RTC_TAMP_IRQHandler+0x14>)
 80103ae:	0018      	movs	r0, r3
 80103b0:	f7f8 ffea 	bl	8009388 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80103b4:	46c0      	nop			; (mov r8, r8)
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	46c0      	nop			; (mov r8, r8)
 80103bc:	2000084c 	.word	0x2000084c

080103c0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80103c4:	2004      	movs	r0, #4
 80103c6:	f7f6 ff7b 	bl	80072c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80103ca:	2008      	movs	r0, #8
 80103cc:	f7f6 ff78 	bl	80072c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80103d0:	46c0      	nop			; (mov r8, r8)
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80103da:	2010      	movs	r0, #16
 80103dc:	f7f6 ff70 	bl	80072c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80103e0:	46c0      	nop			; (mov r8, r8)
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
	...

080103e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80103ec:	4b03      	ldr	r3, [pc, #12]	; (80103fc <DMA1_Channel1_IRQHandler+0x14>)
 80103ee:	0018      	movs	r0, r3
 80103f0:	f7f6 fc86 	bl	8006d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80103f4:	46c0      	nop			; (mov r8, r8)
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	200007f0 	.word	0x200007f0

08010400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010404:	4b03      	ldr	r3, [pc, #12]	; (8010414 <TIM3_IRQHandler+0x14>)
 8010406:	0018      	movs	r0, r3
 8010408:	f7f9 fc0c 	bl	8009c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801040c:	46c0      	nop			; (mov r8, r8)
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	46c0      	nop			; (mov r8, r8)
 8010414:	200003d8 	.word	0x200003d8

08010418 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010424:	2300      	movs	r3, #0
 8010426:	617b      	str	r3, [r7, #20]
 8010428:	e00a      	b.n	8010440 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801042a:	e000      	b.n	801042e <_read+0x16>
 801042c:	bf00      	nop
 801042e:	0001      	movs	r1, r0
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	1c5a      	adds	r2, r3, #1
 8010434:	60ba      	str	r2, [r7, #8]
 8010436:	b2ca      	uxtb	r2, r1
 8010438:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	3301      	adds	r3, #1
 801043e:	617b      	str	r3, [r7, #20]
 8010440:	697a      	ldr	r2, [r7, #20]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	429a      	cmp	r2, r3
 8010446:	dbf0      	blt.n	801042a <_read+0x12>
	}

return len;
 8010448:	687b      	ldr	r3, [r7, #4]
}
 801044a:	0018      	movs	r0, r3
 801044c:	46bd      	mov	sp, r7
 801044e:	b006      	add	sp, #24
 8010450:	bd80      	pop	{r7, pc}

08010452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b086      	sub	sp, #24
 8010456:	af00      	add	r7, sp, #0
 8010458:	60f8      	str	r0, [r7, #12]
 801045a:	60b9      	str	r1, [r7, #8]
 801045c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
 8010462:	e009      	b.n	8010478 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	60ba      	str	r2, [r7, #8]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	0018      	movs	r0, r3
 801046e:	e000      	b.n	8010472 <_write+0x20>
 8010470:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	3301      	adds	r3, #1
 8010476:	617b      	str	r3, [r7, #20]
 8010478:	697a      	ldr	r2, [r7, #20]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	429a      	cmp	r2, r3
 801047e:	dbf1      	blt.n	8010464 <_write+0x12>
	}
	return len;
 8010480:	687b      	ldr	r3, [r7, #4]
}
 8010482:	0018      	movs	r0, r3
 8010484:	46bd      	mov	sp, r7
 8010486:	b006      	add	sp, #24
 8010488:	bd80      	pop	{r7, pc}

0801048a <_close>:

int _close(int file)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
	return -1;
 8010492:	2301      	movs	r3, #1
 8010494:	425b      	negs	r3, r3
}
 8010496:	0018      	movs	r0, r3
 8010498:	46bd      	mov	sp, r7
 801049a:	b002      	add	sp, #8
 801049c:	bd80      	pop	{r7, pc}

0801049e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2280      	movs	r2, #128	; 0x80
 80104ac:	0192      	lsls	r2, r2, #6
 80104ae:	605a      	str	r2, [r3, #4]
	return 0;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	0018      	movs	r0, r3
 80104b4:	46bd      	mov	sp, r7
 80104b6:	b002      	add	sp, #8
 80104b8:	bd80      	pop	{r7, pc}

080104ba <_isatty>:

int _isatty(int file)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
	return 1;
 80104c2:	2301      	movs	r3, #1
}
 80104c4:	0018      	movs	r0, r3
 80104c6:	46bd      	mov	sp, r7
 80104c8:	b002      	add	sp, #8
 80104ca:	bd80      	pop	{r7, pc}

080104cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
	return 0;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	0018      	movs	r0, r3
 80104dc:	46bd      	mov	sp, r7
 80104de:	b004      	add	sp, #16
 80104e0:	bd80      	pop	{r7, pc}
	...

080104e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80104ec:	4a14      	ldr	r2, [pc, #80]	; (8010540 <_sbrk+0x5c>)
 80104ee:	4b15      	ldr	r3, [pc, #84]	; (8010544 <_sbrk+0x60>)
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80104f8:	4b13      	ldr	r3, [pc, #76]	; (8010548 <_sbrk+0x64>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d102      	bne.n	8010506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010500:	4b11      	ldr	r3, [pc, #68]	; (8010548 <_sbrk+0x64>)
 8010502:	4a12      	ldr	r2, [pc, #72]	; (801054c <_sbrk+0x68>)
 8010504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010506:	4b10      	ldr	r3, [pc, #64]	; (8010548 <_sbrk+0x64>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	18d3      	adds	r3, r2, r3
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	429a      	cmp	r2, r3
 8010512:	d207      	bcs.n	8010524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010514:	f000 f8c2 	bl	801069c <__errno>
 8010518:	0003      	movs	r3, r0
 801051a:	220c      	movs	r2, #12
 801051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801051e:	2301      	movs	r3, #1
 8010520:	425b      	negs	r3, r3
 8010522:	e009      	b.n	8010538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010524:	4b08      	ldr	r3, [pc, #32]	; (8010548 <_sbrk+0x64>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801052a:	4b07      	ldr	r3, [pc, #28]	; (8010548 <_sbrk+0x64>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	18d2      	adds	r2, r2, r3
 8010532:	4b05      	ldr	r3, [pc, #20]	; (8010548 <_sbrk+0x64>)
 8010534:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8010536:	68fb      	ldr	r3, [r7, #12]
}
 8010538:	0018      	movs	r0, r3
 801053a:	46bd      	mov	sp, r7
 801053c:	b006      	add	sp, #24
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20009000 	.word	0x20009000
 8010544:	00000400 	.word	0x00000400
 8010548:	20000114 	.word	0x20000114
 801054c:	200008f0 	.word	0x200008f0

08010550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010554:	4b03      	ldr	r3, [pc, #12]	; (8010564 <SystemInit+0x14>)
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	0512      	lsls	r2, r2, #20
 801055a:	609a      	str	r2, [r3, #8]
#endif
}
 801055c:	46c0      	nop			; (mov r8, r8)
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	46c0      	nop			; (mov r8, r8)
 8010564:	e000ed00 	.word	0xe000ed00

08010568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010568:	480d      	ldr	r0, [pc, #52]	; (80105a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801056a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 801056c:	f7ff fff0 	bl	8010550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010570:	480c      	ldr	r0, [pc, #48]	; (80105a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8010572:	490d      	ldr	r1, [pc, #52]	; (80105a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010574:	4a0d      	ldr	r2, [pc, #52]	; (80105ac <LoopForever+0xe>)
  movs r3, #0
 8010576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010578:	e002      	b.n	8010580 <LoopCopyDataInit>

0801057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801057e:	3304      	adds	r3, #4

08010580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010584:	d3f9      	bcc.n	801057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010586:	4a0a      	ldr	r2, [pc, #40]	; (80105b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010588:	4c0a      	ldr	r4, [pc, #40]	; (80105b4 <LoopForever+0x16>)
  movs r3, #0
 801058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801058c:	e001      	b.n	8010592 <LoopFillZerobss>

0801058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010590:	3204      	adds	r2, #4

08010592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010594:	d3fb      	bcc.n	801058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8010596:	f000 f887 	bl	80106a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 801059a:	f7ff f8f5 	bl	800f788 <main>

0801059e <LoopForever>:

LoopForever:
  b LoopForever
 801059e:	e7fe      	b.n	801059e <LoopForever>
  ldr   r0, =_estack
 80105a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80105a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80105a8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80105ac:	08015ab8 	.word	0x08015ab8
  ldr r2, =_sbss
 80105b0:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80105b4:	200008ec 	.word	0x200008ec

080105b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80105b8:	e7fe      	b.n	80105b8 <ADC1_IRQHandler>
	...

080105bc <timersInit>:
#include "../Timers/timers.h"

void timersInit(void) {
 80105bc:	b580      	push	{r7, lr}
 80105be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 80105c0:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <timersInit+0x2c>)
 80105c2:	0018      	movs	r0, r3
 80105c4:	f7f9 fad8 	bl	8009b78 <HAL_TIM_Base_Start_IT>
	counterForce = 0;
 80105c8:	4b08      	ldr	r3, [pc, #32]	; (80105ec <timersInit+0x30>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	701a      	strb	r2, [r3, #0]
	counterMultiplePress = 0;
 80105ce:	4b08      	ldr	r3, [pc, #32]	; (80105f0 <timersInit+0x34>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
	flagLocked = UNLOCKED;
 80105d4:	4b07      	ldr	r3, [pc, #28]	; (80105f4 <timersInit+0x38>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	701a      	strb	r2, [r3, #0]
	counterSettings = 0;
 80105da:	4b07      	ldr	r3, [pc, #28]	; (80105f8 <timersInit+0x3c>)
 80105dc:	2200      	movs	r2, #0
 80105de:	701a      	strb	r2, [r3, #0]
}
 80105e0:	46c0      	nop			; (mov r8, r8)
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	46c0      	nop			; (mov r8, r8)
 80105e8:	200003d8 	.word	0x200003d8
 80105ec:	20000796 	.word	0x20000796
 80105f0:	2000079c 	.word	0x2000079c
 80105f4:	200004c7 	.word	0x200004c7
 80105f8:	20000768 	.word	0x20000768

080105fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a1c      	ldr	r2, [pc, #112]	; (801067c <HAL_TIM_PeriodElapsedCallback+0x80>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d131      	bne.n	8010672 <HAL_TIM_PeriodElapsedCallback+0x76>
		if (counterForce < ON_TIME) {
 801060e:	4b1c      	ldr	r3, [pc, #112]	; (8010680 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b13      	cmp	r3, #19
 8010616:	d806      	bhi.n	8010626 <HAL_TIM_PeriodElapsedCallback+0x2a>
			counterForce++;
 8010618:	4b19      	ldr	r3, [pc, #100]	; (8010680 <HAL_TIM_PeriodElapsedCallback+0x84>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	b2db      	uxtb	r3, r3
 801061e:	3301      	adds	r3, #1
 8010620:	b2da      	uxtb	r2, r3
 8010622:	4b17      	ldr	r3, [pc, #92]	; (8010680 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8010624:	701a      	strb	r2, [r3, #0]
		}

		counterMultiplePress = 0;
 8010626:	4b17      	ldr	r3, [pc, #92]	; (8010684 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8010628:	2200      	movs	r2, #0
 801062a:	701a      	strb	r2, [r3, #0]

		if (flagSettings == FLAG_SETTINGS_ON) {
 801062c:	4b16      	ldr	r3, [pc, #88]	; (8010688 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	b2db      	uxtb	r3, r3
 8010632:	2b01      	cmp	r3, #1
 8010634:	d11d      	bne.n	8010672 <HAL_TIM_PeriodElapsedCallback+0x76>
			counterSettings--;
 8010636:	4b15      	ldr	r3, [pc, #84]	; (801068c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	b2db      	uxtb	r3, r3
 801063c:	3b01      	subs	r3, #1
 801063e:	b2da      	uxtb	r2, r3
 8010640:	4b12      	ldr	r3, [pc, #72]	; (801068c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010642:	701a      	strb	r2, [r3, #0]
			if (counterSettings <= 0) {
 8010644:	4b11      	ldr	r3, [pc, #68]	; (801068c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	d111      	bne.n	8010672 <HAL_TIM_PeriodElapsedCallback+0x76>
				flagSettings = FLAG_SETTINGS_OFF;
 801064e:	4b0e      	ldr	r3, [pc, #56]	; (8010688 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8010650:	2200      	movs	r2, #0
 8010652:	701a      	strb	r2, [r3, #0]
				flagDontSleep = 1;
 8010654:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8010656:	2201      	movs	r2, #1
 8010658:	701a      	strb	r2, [r3, #0]
				interfaceSelectColorScheme(colorScheme);
 801065a:	4b0e      	ldr	r3, [pc, #56]	; (8010694 <HAL_TIM_PeriodElapsedCallback+0x98>)
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	b2db      	uxtb	r3, r3
 8010660:	0018      	movs	r0, r3
 8010662:	f7fa faa1 	bl	800aba8 <interfaceSelectColorScheme>
				interfaceSelectLayout(layout);
 8010666:	4b0c      	ldr	r3, [pc, #48]	; (8010698 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	b2db      	uxtb	r3, r3
 801066c:	0018      	movs	r0, r3
 801066e:	f7f9 fe89 	bl	800a384 <interfaceSelectLayout>
			}
		}

	}
}
 8010672:	46c0      	nop			; (mov r8, r8)
 8010674:	46bd      	mov	sp, r7
 8010676:	b002      	add	sp, #8
 8010678:	bd80      	pop	{r7, pc}
 801067a:	46c0      	nop			; (mov r8, r8)
 801067c:	40000400 	.word	0x40000400
 8010680:	20000796 	.word	0x20000796
 8010684:	2000079c 	.word	0x2000079c
 8010688:	2000065e 	.word	0x2000065e
 801068c:	20000768 	.word	0x20000768
 8010690:	20000795 	.word	0x20000795
 8010694:	20000794 	.word	0x20000794
 8010698:	200007af 	.word	0x200007af

0801069c <__errno>:
 801069c:	4b01      	ldr	r3, [pc, #4]	; (80106a4 <__errno+0x8>)
 801069e:	6818      	ldr	r0, [r3, #0]
 80106a0:	4770      	bx	lr
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	20000084 	.word	0x20000084

080106a8 <__libc_init_array>:
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	2600      	movs	r6, #0
 80106ac:	4d0c      	ldr	r5, [pc, #48]	; (80106e0 <__libc_init_array+0x38>)
 80106ae:	4c0d      	ldr	r4, [pc, #52]	; (80106e4 <__libc_init_array+0x3c>)
 80106b0:	1b64      	subs	r4, r4, r5
 80106b2:	10a4      	asrs	r4, r4, #2
 80106b4:	42a6      	cmp	r6, r4
 80106b6:	d109      	bne.n	80106cc <__libc_init_array+0x24>
 80106b8:	2600      	movs	r6, #0
 80106ba:	f002 fc5d 	bl	8012f78 <_init>
 80106be:	4d0a      	ldr	r5, [pc, #40]	; (80106e8 <__libc_init_array+0x40>)
 80106c0:	4c0a      	ldr	r4, [pc, #40]	; (80106ec <__libc_init_array+0x44>)
 80106c2:	1b64      	subs	r4, r4, r5
 80106c4:	10a4      	asrs	r4, r4, #2
 80106c6:	42a6      	cmp	r6, r4
 80106c8:	d105      	bne.n	80106d6 <__libc_init_array+0x2e>
 80106ca:	bd70      	pop	{r4, r5, r6, pc}
 80106cc:	00b3      	lsls	r3, r6, #2
 80106ce:	58eb      	ldr	r3, [r5, r3]
 80106d0:	4798      	blx	r3
 80106d2:	3601      	adds	r6, #1
 80106d4:	e7ee      	b.n	80106b4 <__libc_init_array+0xc>
 80106d6:	00b3      	lsls	r3, r6, #2
 80106d8:	58eb      	ldr	r3, [r5, r3]
 80106da:	4798      	blx	r3
 80106dc:	3601      	adds	r6, #1
 80106de:	e7f2      	b.n	80106c6 <__libc_init_array+0x1e>
 80106e0:	08015ab0 	.word	0x08015ab0
 80106e4:	08015ab0 	.word	0x08015ab0
 80106e8:	08015ab0 	.word	0x08015ab0
 80106ec:	08015ab4 	.word	0x08015ab4

080106f0 <malloc>:
 80106f0:	b510      	push	{r4, lr}
 80106f2:	4b03      	ldr	r3, [pc, #12]	; (8010700 <malloc+0x10>)
 80106f4:	0001      	movs	r1, r0
 80106f6:	6818      	ldr	r0, [r3, #0]
 80106f8:	f000 f856 	bl	80107a8 <_malloc_r>
 80106fc:	bd10      	pop	{r4, pc}
 80106fe:	46c0      	nop			; (mov r8, r8)
 8010700:	20000084 	.word	0x20000084

08010704 <memset>:
 8010704:	0003      	movs	r3, r0
 8010706:	1882      	adds	r2, r0, r2
 8010708:	4293      	cmp	r3, r2
 801070a:	d100      	bne.n	801070e <memset+0xa>
 801070c:	4770      	bx	lr
 801070e:	7019      	strb	r1, [r3, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	e7f9      	b.n	8010708 <memset+0x4>

08010714 <_free_r>:
 8010714:	b570      	push	{r4, r5, r6, lr}
 8010716:	0005      	movs	r5, r0
 8010718:	2900      	cmp	r1, #0
 801071a:	d010      	beq.n	801073e <_free_r+0x2a>
 801071c:	1f0c      	subs	r4, r1, #4
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	da00      	bge.n	8010726 <_free_r+0x12>
 8010724:	18e4      	adds	r4, r4, r3
 8010726:	0028      	movs	r0, r5
 8010728:	f000 fc70 	bl	801100c <__malloc_lock>
 801072c:	4a1d      	ldr	r2, [pc, #116]	; (80107a4 <_free_r+0x90>)
 801072e:	6813      	ldr	r3, [r2, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d105      	bne.n	8010740 <_free_r+0x2c>
 8010734:	6063      	str	r3, [r4, #4]
 8010736:	6014      	str	r4, [r2, #0]
 8010738:	0028      	movs	r0, r5
 801073a:	f000 fc6f 	bl	801101c <__malloc_unlock>
 801073e:	bd70      	pop	{r4, r5, r6, pc}
 8010740:	42a3      	cmp	r3, r4
 8010742:	d908      	bls.n	8010756 <_free_r+0x42>
 8010744:	6821      	ldr	r1, [r4, #0]
 8010746:	1860      	adds	r0, r4, r1
 8010748:	4283      	cmp	r3, r0
 801074a:	d1f3      	bne.n	8010734 <_free_r+0x20>
 801074c:	6818      	ldr	r0, [r3, #0]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	1841      	adds	r1, r0, r1
 8010752:	6021      	str	r1, [r4, #0]
 8010754:	e7ee      	b.n	8010734 <_free_r+0x20>
 8010756:	001a      	movs	r2, r3
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <_free_r+0x4e>
 801075e:	42a3      	cmp	r3, r4
 8010760:	d9f9      	bls.n	8010756 <_free_r+0x42>
 8010762:	6811      	ldr	r1, [r2, #0]
 8010764:	1850      	adds	r0, r2, r1
 8010766:	42a0      	cmp	r0, r4
 8010768:	d10b      	bne.n	8010782 <_free_r+0x6e>
 801076a:	6820      	ldr	r0, [r4, #0]
 801076c:	1809      	adds	r1, r1, r0
 801076e:	1850      	adds	r0, r2, r1
 8010770:	6011      	str	r1, [r2, #0]
 8010772:	4283      	cmp	r3, r0
 8010774:	d1e0      	bne.n	8010738 <_free_r+0x24>
 8010776:	6818      	ldr	r0, [r3, #0]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	1841      	adds	r1, r0, r1
 801077c:	6011      	str	r1, [r2, #0]
 801077e:	6053      	str	r3, [r2, #4]
 8010780:	e7da      	b.n	8010738 <_free_r+0x24>
 8010782:	42a0      	cmp	r0, r4
 8010784:	d902      	bls.n	801078c <_free_r+0x78>
 8010786:	230c      	movs	r3, #12
 8010788:	602b      	str	r3, [r5, #0]
 801078a:	e7d5      	b.n	8010738 <_free_r+0x24>
 801078c:	6821      	ldr	r1, [r4, #0]
 801078e:	1860      	adds	r0, r4, r1
 8010790:	4283      	cmp	r3, r0
 8010792:	d103      	bne.n	801079c <_free_r+0x88>
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	1841      	adds	r1, r0, r1
 801079a:	6021      	str	r1, [r4, #0]
 801079c:	6063      	str	r3, [r4, #4]
 801079e:	6054      	str	r4, [r2, #4]
 80107a0:	e7ca      	b.n	8010738 <_free_r+0x24>
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	20000118 	.word	0x20000118

080107a8 <_malloc_r>:
 80107a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107aa:	2303      	movs	r3, #3
 80107ac:	1ccd      	adds	r5, r1, #3
 80107ae:	439d      	bics	r5, r3
 80107b0:	3508      	adds	r5, #8
 80107b2:	0006      	movs	r6, r0
 80107b4:	2d0c      	cmp	r5, #12
 80107b6:	d21f      	bcs.n	80107f8 <_malloc_r+0x50>
 80107b8:	250c      	movs	r5, #12
 80107ba:	42a9      	cmp	r1, r5
 80107bc:	d81e      	bhi.n	80107fc <_malloc_r+0x54>
 80107be:	0030      	movs	r0, r6
 80107c0:	f000 fc24 	bl	801100c <__malloc_lock>
 80107c4:	4925      	ldr	r1, [pc, #148]	; (801085c <_malloc_r+0xb4>)
 80107c6:	680a      	ldr	r2, [r1, #0]
 80107c8:	0014      	movs	r4, r2
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	d11a      	bne.n	8010804 <_malloc_r+0x5c>
 80107ce:	4f24      	ldr	r7, [pc, #144]	; (8010860 <_malloc_r+0xb8>)
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d104      	bne.n	80107e0 <_malloc_r+0x38>
 80107d6:	0021      	movs	r1, r4
 80107d8:	0030      	movs	r0, r6
 80107da:	f000 f8d9 	bl	8010990 <_sbrk_r>
 80107de:	6038      	str	r0, [r7, #0]
 80107e0:	0029      	movs	r1, r5
 80107e2:	0030      	movs	r0, r6
 80107e4:	f000 f8d4 	bl	8010990 <_sbrk_r>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d12b      	bne.n	8010844 <_malloc_r+0x9c>
 80107ec:	230c      	movs	r3, #12
 80107ee:	0030      	movs	r0, r6
 80107f0:	6033      	str	r3, [r6, #0]
 80107f2:	f000 fc13 	bl	801101c <__malloc_unlock>
 80107f6:	e003      	b.n	8010800 <_malloc_r+0x58>
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	dade      	bge.n	80107ba <_malloc_r+0x12>
 80107fc:	230c      	movs	r3, #12
 80107fe:	6033      	str	r3, [r6, #0]
 8010800:	2000      	movs	r0, #0
 8010802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	1b5b      	subs	r3, r3, r5
 8010808:	d419      	bmi.n	801083e <_malloc_r+0x96>
 801080a:	2b0b      	cmp	r3, #11
 801080c:	d903      	bls.n	8010816 <_malloc_r+0x6e>
 801080e:	6023      	str	r3, [r4, #0]
 8010810:	18e4      	adds	r4, r4, r3
 8010812:	6025      	str	r5, [r4, #0]
 8010814:	e003      	b.n	801081e <_malloc_r+0x76>
 8010816:	6863      	ldr	r3, [r4, #4]
 8010818:	42a2      	cmp	r2, r4
 801081a:	d10e      	bne.n	801083a <_malloc_r+0x92>
 801081c:	600b      	str	r3, [r1, #0]
 801081e:	0030      	movs	r0, r6
 8010820:	f000 fbfc 	bl	801101c <__malloc_unlock>
 8010824:	0020      	movs	r0, r4
 8010826:	2207      	movs	r2, #7
 8010828:	300b      	adds	r0, #11
 801082a:	1d23      	adds	r3, r4, #4
 801082c:	4390      	bics	r0, r2
 801082e:	1ac2      	subs	r2, r0, r3
 8010830:	4298      	cmp	r0, r3
 8010832:	d0e6      	beq.n	8010802 <_malloc_r+0x5a>
 8010834:	1a1b      	subs	r3, r3, r0
 8010836:	50a3      	str	r3, [r4, r2]
 8010838:	e7e3      	b.n	8010802 <_malloc_r+0x5a>
 801083a:	6053      	str	r3, [r2, #4]
 801083c:	e7ef      	b.n	801081e <_malloc_r+0x76>
 801083e:	0022      	movs	r2, r4
 8010840:	6864      	ldr	r4, [r4, #4]
 8010842:	e7c2      	b.n	80107ca <_malloc_r+0x22>
 8010844:	2303      	movs	r3, #3
 8010846:	1cc4      	adds	r4, r0, #3
 8010848:	439c      	bics	r4, r3
 801084a:	42a0      	cmp	r0, r4
 801084c:	d0e1      	beq.n	8010812 <_malloc_r+0x6a>
 801084e:	1a21      	subs	r1, r4, r0
 8010850:	0030      	movs	r0, r6
 8010852:	f000 f89d 	bl	8010990 <_sbrk_r>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	d1db      	bne.n	8010812 <_malloc_r+0x6a>
 801085a:	e7c7      	b.n	80107ec <_malloc_r+0x44>
 801085c:	20000118 	.word	0x20000118
 8010860:	2000011c 	.word	0x2000011c

08010864 <iprintf>:
 8010864:	b40f      	push	{r0, r1, r2, r3}
 8010866:	4b0b      	ldr	r3, [pc, #44]	; (8010894 <iprintf+0x30>)
 8010868:	b513      	push	{r0, r1, r4, lr}
 801086a:	681c      	ldr	r4, [r3, #0]
 801086c:	2c00      	cmp	r4, #0
 801086e:	d005      	beq.n	801087c <iprintf+0x18>
 8010870:	69a3      	ldr	r3, [r4, #24]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <iprintf+0x18>
 8010876:	0020      	movs	r0, r4
 8010878:	f000 fab8 	bl	8010dec <__sinit>
 801087c:	ab05      	add	r3, sp, #20
 801087e:	0020      	movs	r0, r4
 8010880:	9a04      	ldr	r2, [sp, #16]
 8010882:	68a1      	ldr	r1, [r4, #8]
 8010884:	9301      	str	r3, [sp, #4]
 8010886:	f000 fd5b 	bl	8011340 <_vfiprintf_r>
 801088a:	bc16      	pop	{r1, r2, r4}
 801088c:	bc08      	pop	{r3}
 801088e:	b004      	add	sp, #16
 8010890:	4718      	bx	r3
 8010892:	46c0      	nop			; (mov r8, r8)
 8010894:	20000084 	.word	0x20000084

08010898 <_puts_r>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	0005      	movs	r5, r0
 801089c:	000e      	movs	r6, r1
 801089e:	2800      	cmp	r0, #0
 80108a0:	d004      	beq.n	80108ac <_puts_r+0x14>
 80108a2:	6983      	ldr	r3, [r0, #24]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <_puts_r+0x14>
 80108a8:	f000 faa0 	bl	8010dec <__sinit>
 80108ac:	69ab      	ldr	r3, [r5, #24]
 80108ae:	68ac      	ldr	r4, [r5, #8]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d102      	bne.n	80108ba <_puts_r+0x22>
 80108b4:	0028      	movs	r0, r5
 80108b6:	f000 fa99 	bl	8010dec <__sinit>
 80108ba:	4b2d      	ldr	r3, [pc, #180]	; (8010970 <_puts_r+0xd8>)
 80108bc:	429c      	cmp	r4, r3
 80108be:	d122      	bne.n	8010906 <_puts_r+0x6e>
 80108c0:	686c      	ldr	r4, [r5, #4]
 80108c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108c4:	07db      	lsls	r3, r3, #31
 80108c6:	d405      	bmi.n	80108d4 <_puts_r+0x3c>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	059b      	lsls	r3, r3, #22
 80108cc:	d402      	bmi.n	80108d4 <_puts_r+0x3c>
 80108ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108d0:	f000 fb2d 	bl	8010f2e <__retarget_lock_acquire_recursive>
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	071b      	lsls	r3, r3, #28
 80108d8:	d502      	bpl.n	80108e0 <_puts_r+0x48>
 80108da:	6923      	ldr	r3, [r4, #16]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d129      	bne.n	8010934 <_puts_r+0x9c>
 80108e0:	0021      	movs	r1, r4
 80108e2:	0028      	movs	r0, r5
 80108e4:	f000 f8dc 	bl	8010aa0 <__swsetup_r>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d023      	beq.n	8010934 <_puts_r+0x9c>
 80108ec:	2501      	movs	r5, #1
 80108ee:	426d      	negs	r5, r5
 80108f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108f2:	07db      	lsls	r3, r3, #31
 80108f4:	d405      	bmi.n	8010902 <_puts_r+0x6a>
 80108f6:	89a3      	ldrh	r3, [r4, #12]
 80108f8:	059b      	lsls	r3, r3, #22
 80108fa:	d402      	bmi.n	8010902 <_puts_r+0x6a>
 80108fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108fe:	f000 fb17 	bl	8010f30 <__retarget_lock_release_recursive>
 8010902:	0028      	movs	r0, r5
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	4b1b      	ldr	r3, [pc, #108]	; (8010974 <_puts_r+0xdc>)
 8010908:	429c      	cmp	r4, r3
 801090a:	d101      	bne.n	8010910 <_puts_r+0x78>
 801090c:	68ac      	ldr	r4, [r5, #8]
 801090e:	e7d8      	b.n	80108c2 <_puts_r+0x2a>
 8010910:	4b19      	ldr	r3, [pc, #100]	; (8010978 <_puts_r+0xe0>)
 8010912:	429c      	cmp	r4, r3
 8010914:	d1d5      	bne.n	80108c2 <_puts_r+0x2a>
 8010916:	68ec      	ldr	r4, [r5, #12]
 8010918:	e7d3      	b.n	80108c2 <_puts_r+0x2a>
 801091a:	3601      	adds	r6, #1
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	2b00      	cmp	r3, #0
 8010920:	da04      	bge.n	801092c <_puts_r+0x94>
 8010922:	69a2      	ldr	r2, [r4, #24]
 8010924:	429a      	cmp	r2, r3
 8010926:	dc16      	bgt.n	8010956 <_puts_r+0xbe>
 8010928:	290a      	cmp	r1, #10
 801092a:	d014      	beq.n	8010956 <_puts_r+0xbe>
 801092c:	6823      	ldr	r3, [r4, #0]
 801092e:	1c5a      	adds	r2, r3, #1
 8010930:	6022      	str	r2, [r4, #0]
 8010932:	7019      	strb	r1, [r3, #0]
 8010934:	68a3      	ldr	r3, [r4, #8]
 8010936:	7831      	ldrb	r1, [r6, #0]
 8010938:	3b01      	subs	r3, #1
 801093a:	2900      	cmp	r1, #0
 801093c:	d1ed      	bne.n	801091a <_puts_r+0x82>
 801093e:	60a3      	str	r3, [r4, #8]
 8010940:	2b00      	cmp	r3, #0
 8010942:	da0f      	bge.n	8010964 <_puts_r+0xcc>
 8010944:	0028      	movs	r0, r5
 8010946:	0022      	movs	r2, r4
 8010948:	310a      	adds	r1, #10
 801094a:	f000 f853 	bl	80109f4 <__swbuf_r>
 801094e:	250a      	movs	r5, #10
 8010950:	1c43      	adds	r3, r0, #1
 8010952:	d1cd      	bne.n	80108f0 <_puts_r+0x58>
 8010954:	e7ca      	b.n	80108ec <_puts_r+0x54>
 8010956:	0022      	movs	r2, r4
 8010958:	0028      	movs	r0, r5
 801095a:	f000 f84b 	bl	80109f4 <__swbuf_r>
 801095e:	1c43      	adds	r3, r0, #1
 8010960:	d1e8      	bne.n	8010934 <_puts_r+0x9c>
 8010962:	e7c3      	b.n	80108ec <_puts_r+0x54>
 8010964:	250a      	movs	r5, #10
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	6022      	str	r2, [r4, #0]
 801096c:	701d      	strb	r5, [r3, #0]
 801096e:	e7bf      	b.n	80108f0 <_puts_r+0x58>
 8010970:	0801585c 	.word	0x0801585c
 8010974:	0801587c 	.word	0x0801587c
 8010978:	0801583c 	.word	0x0801583c

0801097c <puts>:
 801097c:	b510      	push	{r4, lr}
 801097e:	4b03      	ldr	r3, [pc, #12]	; (801098c <puts+0x10>)
 8010980:	0001      	movs	r1, r0
 8010982:	6818      	ldr	r0, [r3, #0]
 8010984:	f7ff ff88 	bl	8010898 <_puts_r>
 8010988:	bd10      	pop	{r4, pc}
 801098a:	46c0      	nop			; (mov r8, r8)
 801098c:	20000084 	.word	0x20000084

08010990 <_sbrk_r>:
 8010990:	2300      	movs	r3, #0
 8010992:	b570      	push	{r4, r5, r6, lr}
 8010994:	4d06      	ldr	r5, [pc, #24]	; (80109b0 <_sbrk_r+0x20>)
 8010996:	0004      	movs	r4, r0
 8010998:	0008      	movs	r0, r1
 801099a:	602b      	str	r3, [r5, #0]
 801099c:	f7ff fda2 	bl	80104e4 <_sbrk>
 80109a0:	1c43      	adds	r3, r0, #1
 80109a2:	d103      	bne.n	80109ac <_sbrk_r+0x1c>
 80109a4:	682b      	ldr	r3, [r5, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d000      	beq.n	80109ac <_sbrk_r+0x1c>
 80109aa:	6023      	str	r3, [r4, #0]
 80109ac:	bd70      	pop	{r4, r5, r6, pc}
 80109ae:	46c0      	nop			; (mov r8, r8)
 80109b0:	200008e8 	.word	0x200008e8

080109b4 <siprintf>:
 80109b4:	b40e      	push	{r1, r2, r3}
 80109b6:	b500      	push	{lr}
 80109b8:	490b      	ldr	r1, [pc, #44]	; (80109e8 <siprintf+0x34>)
 80109ba:	b09c      	sub	sp, #112	; 0x70
 80109bc:	ab1d      	add	r3, sp, #116	; 0x74
 80109be:	9002      	str	r0, [sp, #8]
 80109c0:	9006      	str	r0, [sp, #24]
 80109c2:	9107      	str	r1, [sp, #28]
 80109c4:	9104      	str	r1, [sp, #16]
 80109c6:	4809      	ldr	r0, [pc, #36]	; (80109ec <siprintf+0x38>)
 80109c8:	4909      	ldr	r1, [pc, #36]	; (80109f0 <siprintf+0x3c>)
 80109ca:	cb04      	ldmia	r3!, {r2}
 80109cc:	9105      	str	r1, [sp, #20]
 80109ce:	6800      	ldr	r0, [r0, #0]
 80109d0:	a902      	add	r1, sp, #8
 80109d2:	9301      	str	r3, [sp, #4]
 80109d4:	f000 fb8c 	bl	80110f0 <_svfiprintf_r>
 80109d8:	2300      	movs	r3, #0
 80109da:	9a02      	ldr	r2, [sp, #8]
 80109dc:	7013      	strb	r3, [r2, #0]
 80109de:	b01c      	add	sp, #112	; 0x70
 80109e0:	bc08      	pop	{r3}
 80109e2:	b003      	add	sp, #12
 80109e4:	4718      	bx	r3
 80109e6:	46c0      	nop			; (mov r8, r8)
 80109e8:	7fffffff 	.word	0x7fffffff
 80109ec:	20000084 	.word	0x20000084
 80109f0:	ffff0208 	.word	0xffff0208

080109f4 <__swbuf_r>:
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f6:	0005      	movs	r5, r0
 80109f8:	000e      	movs	r6, r1
 80109fa:	0014      	movs	r4, r2
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d004      	beq.n	8010a0a <__swbuf_r+0x16>
 8010a00:	6983      	ldr	r3, [r0, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <__swbuf_r+0x16>
 8010a06:	f000 f9f1 	bl	8010dec <__sinit>
 8010a0a:	4b22      	ldr	r3, [pc, #136]	; (8010a94 <__swbuf_r+0xa0>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	d12e      	bne.n	8010a6e <__swbuf_r+0x7a>
 8010a10:	686c      	ldr	r4, [r5, #4]
 8010a12:	69a3      	ldr	r3, [r4, #24]
 8010a14:	60a3      	str	r3, [r4, #8]
 8010a16:	89a3      	ldrh	r3, [r4, #12]
 8010a18:	071b      	lsls	r3, r3, #28
 8010a1a:	d532      	bpl.n	8010a82 <__swbuf_r+0x8e>
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d02f      	beq.n	8010a82 <__swbuf_r+0x8e>
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	6922      	ldr	r2, [r4, #16]
 8010a26:	b2f7      	uxtb	r7, r6
 8010a28:	1a98      	subs	r0, r3, r2
 8010a2a:	6963      	ldr	r3, [r4, #20]
 8010a2c:	b2f6      	uxtb	r6, r6
 8010a2e:	4283      	cmp	r3, r0
 8010a30:	dc05      	bgt.n	8010a3e <__swbuf_r+0x4a>
 8010a32:	0021      	movs	r1, r4
 8010a34:	0028      	movs	r0, r5
 8010a36:	f000 f937 	bl	8010ca8 <_fflush_r>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d127      	bne.n	8010a8e <__swbuf_r+0x9a>
 8010a3e:	68a3      	ldr	r3, [r4, #8]
 8010a40:	3001      	adds	r0, #1
 8010a42:	3b01      	subs	r3, #1
 8010a44:	60a3      	str	r3, [r4, #8]
 8010a46:	6823      	ldr	r3, [r4, #0]
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	6022      	str	r2, [r4, #0]
 8010a4c:	701f      	strb	r7, [r3, #0]
 8010a4e:	6963      	ldr	r3, [r4, #20]
 8010a50:	4283      	cmp	r3, r0
 8010a52:	d004      	beq.n	8010a5e <__swbuf_r+0x6a>
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	07db      	lsls	r3, r3, #31
 8010a58:	d507      	bpl.n	8010a6a <__swbuf_r+0x76>
 8010a5a:	2e0a      	cmp	r6, #10
 8010a5c:	d105      	bne.n	8010a6a <__swbuf_r+0x76>
 8010a5e:	0021      	movs	r1, r4
 8010a60:	0028      	movs	r0, r5
 8010a62:	f000 f921 	bl	8010ca8 <_fflush_r>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d111      	bne.n	8010a8e <__swbuf_r+0x9a>
 8010a6a:	0030      	movs	r0, r6
 8010a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6e:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <__swbuf_r+0xa4>)
 8010a70:	429c      	cmp	r4, r3
 8010a72:	d101      	bne.n	8010a78 <__swbuf_r+0x84>
 8010a74:	68ac      	ldr	r4, [r5, #8]
 8010a76:	e7cc      	b.n	8010a12 <__swbuf_r+0x1e>
 8010a78:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <__swbuf_r+0xa8>)
 8010a7a:	429c      	cmp	r4, r3
 8010a7c:	d1c9      	bne.n	8010a12 <__swbuf_r+0x1e>
 8010a7e:	68ec      	ldr	r4, [r5, #12]
 8010a80:	e7c7      	b.n	8010a12 <__swbuf_r+0x1e>
 8010a82:	0021      	movs	r1, r4
 8010a84:	0028      	movs	r0, r5
 8010a86:	f000 f80b 	bl	8010aa0 <__swsetup_r>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	d0c9      	beq.n	8010a22 <__swbuf_r+0x2e>
 8010a8e:	2601      	movs	r6, #1
 8010a90:	4276      	negs	r6, r6
 8010a92:	e7ea      	b.n	8010a6a <__swbuf_r+0x76>
 8010a94:	0801585c 	.word	0x0801585c
 8010a98:	0801587c 	.word	0x0801587c
 8010a9c:	0801583c 	.word	0x0801583c

08010aa0 <__swsetup_r>:
 8010aa0:	4b37      	ldr	r3, [pc, #220]	; (8010b80 <__swsetup_r+0xe0>)
 8010aa2:	b570      	push	{r4, r5, r6, lr}
 8010aa4:	681d      	ldr	r5, [r3, #0]
 8010aa6:	0006      	movs	r6, r0
 8010aa8:	000c      	movs	r4, r1
 8010aaa:	2d00      	cmp	r5, #0
 8010aac:	d005      	beq.n	8010aba <__swsetup_r+0x1a>
 8010aae:	69ab      	ldr	r3, [r5, #24]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d102      	bne.n	8010aba <__swsetup_r+0x1a>
 8010ab4:	0028      	movs	r0, r5
 8010ab6:	f000 f999 	bl	8010dec <__sinit>
 8010aba:	4b32      	ldr	r3, [pc, #200]	; (8010b84 <__swsetup_r+0xe4>)
 8010abc:	429c      	cmp	r4, r3
 8010abe:	d10f      	bne.n	8010ae0 <__swsetup_r+0x40>
 8010ac0:	686c      	ldr	r4, [r5, #4]
 8010ac2:	230c      	movs	r3, #12
 8010ac4:	5ee2      	ldrsh	r2, [r4, r3]
 8010ac6:	b293      	uxth	r3, r2
 8010ac8:	0711      	lsls	r1, r2, #28
 8010aca:	d42d      	bmi.n	8010b28 <__swsetup_r+0x88>
 8010acc:	06d9      	lsls	r1, r3, #27
 8010ace:	d411      	bmi.n	8010af4 <__swsetup_r+0x54>
 8010ad0:	2309      	movs	r3, #9
 8010ad2:	2001      	movs	r0, #1
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	3337      	adds	r3, #55	; 0x37
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	4240      	negs	r0, r0
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	4b29      	ldr	r3, [pc, #164]	; (8010b88 <__swsetup_r+0xe8>)
 8010ae2:	429c      	cmp	r4, r3
 8010ae4:	d101      	bne.n	8010aea <__swsetup_r+0x4a>
 8010ae6:	68ac      	ldr	r4, [r5, #8]
 8010ae8:	e7eb      	b.n	8010ac2 <__swsetup_r+0x22>
 8010aea:	4b28      	ldr	r3, [pc, #160]	; (8010b8c <__swsetup_r+0xec>)
 8010aec:	429c      	cmp	r4, r3
 8010aee:	d1e8      	bne.n	8010ac2 <__swsetup_r+0x22>
 8010af0:	68ec      	ldr	r4, [r5, #12]
 8010af2:	e7e6      	b.n	8010ac2 <__swsetup_r+0x22>
 8010af4:	075b      	lsls	r3, r3, #29
 8010af6:	d513      	bpl.n	8010b20 <__swsetup_r+0x80>
 8010af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010afa:	2900      	cmp	r1, #0
 8010afc:	d008      	beq.n	8010b10 <__swsetup_r+0x70>
 8010afe:	0023      	movs	r3, r4
 8010b00:	3344      	adds	r3, #68	; 0x44
 8010b02:	4299      	cmp	r1, r3
 8010b04:	d002      	beq.n	8010b0c <__swsetup_r+0x6c>
 8010b06:	0030      	movs	r0, r6
 8010b08:	f7ff fe04 	bl	8010714 <_free_r>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	6363      	str	r3, [r4, #52]	; 0x34
 8010b10:	2224      	movs	r2, #36	; 0x24
 8010b12:	89a3      	ldrh	r3, [r4, #12]
 8010b14:	4393      	bics	r3, r2
 8010b16:	81a3      	strh	r3, [r4, #12]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	6063      	str	r3, [r4, #4]
 8010b1c:	6923      	ldr	r3, [r4, #16]
 8010b1e:	6023      	str	r3, [r4, #0]
 8010b20:	2308      	movs	r3, #8
 8010b22:	89a2      	ldrh	r2, [r4, #12]
 8010b24:	4313      	orrs	r3, r2
 8010b26:	81a3      	strh	r3, [r4, #12]
 8010b28:	6923      	ldr	r3, [r4, #16]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10b      	bne.n	8010b46 <__swsetup_r+0xa6>
 8010b2e:	21a0      	movs	r1, #160	; 0xa0
 8010b30:	2280      	movs	r2, #128	; 0x80
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	0089      	lsls	r1, r1, #2
 8010b36:	0092      	lsls	r2, r2, #2
 8010b38:	400b      	ands	r3, r1
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d003      	beq.n	8010b46 <__swsetup_r+0xa6>
 8010b3e:	0021      	movs	r1, r4
 8010b40:	0030      	movs	r0, r6
 8010b42:	f000 fa1f 	bl	8010f84 <__smakebuf_r>
 8010b46:	220c      	movs	r2, #12
 8010b48:	5ea3      	ldrsh	r3, [r4, r2]
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	001a      	movs	r2, r3
 8010b4e:	b299      	uxth	r1, r3
 8010b50:	4002      	ands	r2, r0
 8010b52:	4203      	tst	r3, r0
 8010b54:	d00f      	beq.n	8010b76 <__swsetup_r+0xd6>
 8010b56:	2200      	movs	r2, #0
 8010b58:	60a2      	str	r2, [r4, #8]
 8010b5a:	6962      	ldr	r2, [r4, #20]
 8010b5c:	4252      	negs	r2, r2
 8010b5e:	61a2      	str	r2, [r4, #24]
 8010b60:	2000      	movs	r0, #0
 8010b62:	6922      	ldr	r2, [r4, #16]
 8010b64:	4282      	cmp	r2, r0
 8010b66:	d1ba      	bne.n	8010ade <__swsetup_r+0x3e>
 8010b68:	060a      	lsls	r2, r1, #24
 8010b6a:	d5b8      	bpl.n	8010ade <__swsetup_r+0x3e>
 8010b6c:	2240      	movs	r2, #64	; 0x40
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	81a3      	strh	r3, [r4, #12]
 8010b72:	3801      	subs	r0, #1
 8010b74:	e7b3      	b.n	8010ade <__swsetup_r+0x3e>
 8010b76:	0788      	lsls	r0, r1, #30
 8010b78:	d400      	bmi.n	8010b7c <__swsetup_r+0xdc>
 8010b7a:	6962      	ldr	r2, [r4, #20]
 8010b7c:	60a2      	str	r2, [r4, #8]
 8010b7e:	e7ef      	b.n	8010b60 <__swsetup_r+0xc0>
 8010b80:	20000084 	.word	0x20000084
 8010b84:	0801585c 	.word	0x0801585c
 8010b88:	0801587c 	.word	0x0801587c
 8010b8c:	0801583c 	.word	0x0801583c

08010b90 <__sflush_r>:
 8010b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b92:	898b      	ldrh	r3, [r1, #12]
 8010b94:	0005      	movs	r5, r0
 8010b96:	000c      	movs	r4, r1
 8010b98:	071a      	lsls	r2, r3, #28
 8010b9a:	d45f      	bmi.n	8010c5c <__sflush_r+0xcc>
 8010b9c:	684a      	ldr	r2, [r1, #4]
 8010b9e:	2a00      	cmp	r2, #0
 8010ba0:	dc04      	bgt.n	8010bac <__sflush_r+0x1c>
 8010ba2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	dc01      	bgt.n	8010bac <__sflush_r+0x1c>
 8010ba8:	2000      	movs	r0, #0
 8010baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010bac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010bae:	2f00      	cmp	r7, #0
 8010bb0:	d0fa      	beq.n	8010ba8 <__sflush_r+0x18>
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	2180      	movs	r1, #128	; 0x80
 8010bb6:	682e      	ldr	r6, [r5, #0]
 8010bb8:	602a      	str	r2, [r5, #0]
 8010bba:	001a      	movs	r2, r3
 8010bbc:	0149      	lsls	r1, r1, #5
 8010bbe:	400a      	ands	r2, r1
 8010bc0:	420b      	tst	r3, r1
 8010bc2:	d034      	beq.n	8010c2e <__sflush_r+0x9e>
 8010bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	075b      	lsls	r3, r3, #29
 8010bca:	d506      	bpl.n	8010bda <__sflush_r+0x4a>
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	1ac0      	subs	r0, r0, r3
 8010bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <__sflush_r+0x4a>
 8010bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bd8:	1ac0      	subs	r0, r0, r3
 8010bda:	0002      	movs	r2, r0
 8010bdc:	6a21      	ldr	r1, [r4, #32]
 8010bde:	2300      	movs	r3, #0
 8010be0:	0028      	movs	r0, r5
 8010be2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010be4:	47b8      	blx	r7
 8010be6:	89a1      	ldrh	r1, [r4, #12]
 8010be8:	1c43      	adds	r3, r0, #1
 8010bea:	d106      	bne.n	8010bfa <__sflush_r+0x6a>
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	2b1d      	cmp	r3, #29
 8010bf0:	d831      	bhi.n	8010c56 <__sflush_r+0xc6>
 8010bf2:	4a2c      	ldr	r2, [pc, #176]	; (8010ca4 <__sflush_r+0x114>)
 8010bf4:	40da      	lsrs	r2, r3
 8010bf6:	07d3      	lsls	r3, r2, #31
 8010bf8:	d52d      	bpl.n	8010c56 <__sflush_r+0xc6>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	6063      	str	r3, [r4, #4]
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	04cb      	lsls	r3, r1, #19
 8010c04:	d505      	bpl.n	8010c12 <__sflush_r+0x82>
 8010c06:	1c43      	adds	r3, r0, #1
 8010c08:	d102      	bne.n	8010c10 <__sflush_r+0x80>
 8010c0a:	682b      	ldr	r3, [r5, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d100      	bne.n	8010c12 <__sflush_r+0x82>
 8010c10:	6560      	str	r0, [r4, #84]	; 0x54
 8010c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c14:	602e      	str	r6, [r5, #0]
 8010c16:	2900      	cmp	r1, #0
 8010c18:	d0c6      	beq.n	8010ba8 <__sflush_r+0x18>
 8010c1a:	0023      	movs	r3, r4
 8010c1c:	3344      	adds	r3, #68	; 0x44
 8010c1e:	4299      	cmp	r1, r3
 8010c20:	d002      	beq.n	8010c28 <__sflush_r+0x98>
 8010c22:	0028      	movs	r0, r5
 8010c24:	f7ff fd76 	bl	8010714 <_free_r>
 8010c28:	2000      	movs	r0, #0
 8010c2a:	6360      	str	r0, [r4, #52]	; 0x34
 8010c2c:	e7bd      	b.n	8010baa <__sflush_r+0x1a>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	0028      	movs	r0, r5
 8010c32:	6a21      	ldr	r1, [r4, #32]
 8010c34:	47b8      	blx	r7
 8010c36:	1c43      	adds	r3, r0, #1
 8010c38:	d1c5      	bne.n	8010bc6 <__sflush_r+0x36>
 8010c3a:	682b      	ldr	r3, [r5, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d0c2      	beq.n	8010bc6 <__sflush_r+0x36>
 8010c40:	2b1d      	cmp	r3, #29
 8010c42:	d001      	beq.n	8010c48 <__sflush_r+0xb8>
 8010c44:	2b16      	cmp	r3, #22
 8010c46:	d101      	bne.n	8010c4c <__sflush_r+0xbc>
 8010c48:	602e      	str	r6, [r5, #0]
 8010c4a:	e7ad      	b.n	8010ba8 <__sflush_r+0x18>
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	89a2      	ldrh	r2, [r4, #12]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	81a3      	strh	r3, [r4, #12]
 8010c54:	e7a9      	b.n	8010baa <__sflush_r+0x1a>
 8010c56:	2340      	movs	r3, #64	; 0x40
 8010c58:	430b      	orrs	r3, r1
 8010c5a:	e7fa      	b.n	8010c52 <__sflush_r+0xc2>
 8010c5c:	690f      	ldr	r7, [r1, #16]
 8010c5e:	2f00      	cmp	r7, #0
 8010c60:	d0a2      	beq.n	8010ba8 <__sflush_r+0x18>
 8010c62:	680a      	ldr	r2, [r1, #0]
 8010c64:	600f      	str	r7, [r1, #0]
 8010c66:	1bd2      	subs	r2, r2, r7
 8010c68:	9201      	str	r2, [sp, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	079b      	lsls	r3, r3, #30
 8010c6e:	d100      	bne.n	8010c72 <__sflush_r+0xe2>
 8010c70:	694a      	ldr	r2, [r1, #20]
 8010c72:	60a2      	str	r2, [r4, #8]
 8010c74:	9b01      	ldr	r3, [sp, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	dc00      	bgt.n	8010c7c <__sflush_r+0xec>
 8010c7a:	e795      	b.n	8010ba8 <__sflush_r+0x18>
 8010c7c:	003a      	movs	r2, r7
 8010c7e:	0028      	movs	r0, r5
 8010c80:	9b01      	ldr	r3, [sp, #4]
 8010c82:	6a21      	ldr	r1, [r4, #32]
 8010c84:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c86:	47b0      	blx	r6
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	dc06      	bgt.n	8010c9a <__sflush_r+0x10a>
 8010c8c:	2340      	movs	r3, #64	; 0x40
 8010c8e:	2001      	movs	r0, #1
 8010c90:	89a2      	ldrh	r2, [r4, #12]
 8010c92:	4240      	negs	r0, r0
 8010c94:	4313      	orrs	r3, r2
 8010c96:	81a3      	strh	r3, [r4, #12]
 8010c98:	e787      	b.n	8010baa <__sflush_r+0x1a>
 8010c9a:	9b01      	ldr	r3, [sp, #4]
 8010c9c:	183f      	adds	r7, r7, r0
 8010c9e:	1a1b      	subs	r3, r3, r0
 8010ca0:	9301      	str	r3, [sp, #4]
 8010ca2:	e7e7      	b.n	8010c74 <__sflush_r+0xe4>
 8010ca4:	20400001 	.word	0x20400001

08010ca8 <_fflush_r>:
 8010ca8:	690b      	ldr	r3, [r1, #16]
 8010caa:	b570      	push	{r4, r5, r6, lr}
 8010cac:	0005      	movs	r5, r0
 8010cae:	000c      	movs	r4, r1
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <_fflush_r+0x12>
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	0028      	movs	r0, r5
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d004      	beq.n	8010cc8 <_fflush_r+0x20>
 8010cbe:	6983      	ldr	r3, [r0, #24]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <_fflush_r+0x20>
 8010cc4:	f000 f892 	bl	8010dec <__sinit>
 8010cc8:	4b14      	ldr	r3, [pc, #80]	; (8010d1c <_fflush_r+0x74>)
 8010cca:	429c      	cmp	r4, r3
 8010ccc:	d11b      	bne.n	8010d06 <_fflush_r+0x5e>
 8010cce:	686c      	ldr	r4, [r5, #4]
 8010cd0:	220c      	movs	r2, #12
 8010cd2:	5ea3      	ldrsh	r3, [r4, r2]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d0ed      	beq.n	8010cb4 <_fflush_r+0xc>
 8010cd8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010cda:	07d2      	lsls	r2, r2, #31
 8010cdc:	d404      	bmi.n	8010ce8 <_fflush_r+0x40>
 8010cde:	059b      	lsls	r3, r3, #22
 8010ce0:	d402      	bmi.n	8010ce8 <_fflush_r+0x40>
 8010ce2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ce4:	f000 f923 	bl	8010f2e <__retarget_lock_acquire_recursive>
 8010ce8:	0028      	movs	r0, r5
 8010cea:	0021      	movs	r1, r4
 8010cec:	f7ff ff50 	bl	8010b90 <__sflush_r>
 8010cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cf2:	0005      	movs	r5, r0
 8010cf4:	07db      	lsls	r3, r3, #31
 8010cf6:	d4de      	bmi.n	8010cb6 <_fflush_r+0xe>
 8010cf8:	89a3      	ldrh	r3, [r4, #12]
 8010cfa:	059b      	lsls	r3, r3, #22
 8010cfc:	d4db      	bmi.n	8010cb6 <_fflush_r+0xe>
 8010cfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d00:	f000 f916 	bl	8010f30 <__retarget_lock_release_recursive>
 8010d04:	e7d7      	b.n	8010cb6 <_fflush_r+0xe>
 8010d06:	4b06      	ldr	r3, [pc, #24]	; (8010d20 <_fflush_r+0x78>)
 8010d08:	429c      	cmp	r4, r3
 8010d0a:	d101      	bne.n	8010d10 <_fflush_r+0x68>
 8010d0c:	68ac      	ldr	r4, [r5, #8]
 8010d0e:	e7df      	b.n	8010cd0 <_fflush_r+0x28>
 8010d10:	4b04      	ldr	r3, [pc, #16]	; (8010d24 <_fflush_r+0x7c>)
 8010d12:	429c      	cmp	r4, r3
 8010d14:	d1dc      	bne.n	8010cd0 <_fflush_r+0x28>
 8010d16:	68ec      	ldr	r4, [r5, #12]
 8010d18:	e7da      	b.n	8010cd0 <_fflush_r+0x28>
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	0801585c 	.word	0x0801585c
 8010d20:	0801587c 	.word	0x0801587c
 8010d24:	0801583c 	.word	0x0801583c

08010d28 <std>:
 8010d28:	2300      	movs	r3, #0
 8010d2a:	b510      	push	{r4, lr}
 8010d2c:	0004      	movs	r4, r0
 8010d2e:	6003      	str	r3, [r0, #0]
 8010d30:	6043      	str	r3, [r0, #4]
 8010d32:	6083      	str	r3, [r0, #8]
 8010d34:	8181      	strh	r1, [r0, #12]
 8010d36:	6643      	str	r3, [r0, #100]	; 0x64
 8010d38:	0019      	movs	r1, r3
 8010d3a:	81c2      	strh	r2, [r0, #14]
 8010d3c:	6103      	str	r3, [r0, #16]
 8010d3e:	6143      	str	r3, [r0, #20]
 8010d40:	6183      	str	r3, [r0, #24]
 8010d42:	2208      	movs	r2, #8
 8010d44:	305c      	adds	r0, #92	; 0x5c
 8010d46:	f7ff fcdd 	bl	8010704 <memset>
 8010d4a:	4b05      	ldr	r3, [pc, #20]	; (8010d60 <std+0x38>)
 8010d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d4e:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <std+0x3c>)
 8010d50:	6224      	str	r4, [r4, #32]
 8010d52:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <std+0x40>)
 8010d56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <std+0x44>)
 8010d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	46c0      	nop			; (mov r8, r8)
 8010d60:	080118b9 	.word	0x080118b9
 8010d64:	080118e1 	.word	0x080118e1
 8010d68:	08011919 	.word	0x08011919
 8010d6c:	08011945 	.word	0x08011945

08010d70 <_cleanup_r>:
 8010d70:	b510      	push	{r4, lr}
 8010d72:	4902      	ldr	r1, [pc, #8]	; (8010d7c <_cleanup_r+0xc>)
 8010d74:	f000 f8ba 	bl	8010eec <_fwalk_reent>
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	46c0      	nop			; (mov r8, r8)
 8010d7c:	08010ca9 	.word	0x08010ca9

08010d80 <__sfmoreglue>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	2568      	movs	r5, #104	; 0x68
 8010d84:	1e4a      	subs	r2, r1, #1
 8010d86:	4355      	muls	r5, r2
 8010d88:	000e      	movs	r6, r1
 8010d8a:	0029      	movs	r1, r5
 8010d8c:	3174      	adds	r1, #116	; 0x74
 8010d8e:	f7ff fd0b 	bl	80107a8 <_malloc_r>
 8010d92:	1e04      	subs	r4, r0, #0
 8010d94:	d008      	beq.n	8010da8 <__sfmoreglue+0x28>
 8010d96:	2100      	movs	r1, #0
 8010d98:	002a      	movs	r2, r5
 8010d9a:	6001      	str	r1, [r0, #0]
 8010d9c:	6046      	str	r6, [r0, #4]
 8010d9e:	300c      	adds	r0, #12
 8010da0:	60a0      	str	r0, [r4, #8]
 8010da2:	3268      	adds	r2, #104	; 0x68
 8010da4:	f7ff fcae 	bl	8010704 <memset>
 8010da8:	0020      	movs	r0, r4
 8010daa:	bd70      	pop	{r4, r5, r6, pc}

08010dac <__sfp_lock_acquire>:
 8010dac:	b510      	push	{r4, lr}
 8010dae:	4802      	ldr	r0, [pc, #8]	; (8010db8 <__sfp_lock_acquire+0xc>)
 8010db0:	f000 f8bd 	bl	8010f2e <__retarget_lock_acquire_recursive>
 8010db4:	bd10      	pop	{r4, pc}
 8010db6:	46c0      	nop			; (mov r8, r8)
 8010db8:	200008e4 	.word	0x200008e4

08010dbc <__sfp_lock_release>:
 8010dbc:	b510      	push	{r4, lr}
 8010dbe:	4802      	ldr	r0, [pc, #8]	; (8010dc8 <__sfp_lock_release+0xc>)
 8010dc0:	f000 f8b6 	bl	8010f30 <__retarget_lock_release_recursive>
 8010dc4:	bd10      	pop	{r4, pc}
 8010dc6:	46c0      	nop			; (mov r8, r8)
 8010dc8:	200008e4 	.word	0x200008e4

08010dcc <__sinit_lock_acquire>:
 8010dcc:	b510      	push	{r4, lr}
 8010dce:	4802      	ldr	r0, [pc, #8]	; (8010dd8 <__sinit_lock_acquire+0xc>)
 8010dd0:	f000 f8ad 	bl	8010f2e <__retarget_lock_acquire_recursive>
 8010dd4:	bd10      	pop	{r4, pc}
 8010dd6:	46c0      	nop			; (mov r8, r8)
 8010dd8:	200008df 	.word	0x200008df

08010ddc <__sinit_lock_release>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	4802      	ldr	r0, [pc, #8]	; (8010de8 <__sinit_lock_release+0xc>)
 8010de0:	f000 f8a6 	bl	8010f30 <__retarget_lock_release_recursive>
 8010de4:	bd10      	pop	{r4, pc}
 8010de6:	46c0      	nop			; (mov r8, r8)
 8010de8:	200008df 	.word	0x200008df

08010dec <__sinit>:
 8010dec:	b513      	push	{r0, r1, r4, lr}
 8010dee:	0004      	movs	r4, r0
 8010df0:	f7ff ffec 	bl	8010dcc <__sinit_lock_acquire>
 8010df4:	69a3      	ldr	r3, [r4, #24]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d002      	beq.n	8010e00 <__sinit+0x14>
 8010dfa:	f7ff ffef 	bl	8010ddc <__sinit_lock_release>
 8010dfe:	bd13      	pop	{r0, r1, r4, pc}
 8010e00:	64a3      	str	r3, [r4, #72]	; 0x48
 8010e02:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010e04:	6523      	str	r3, [r4, #80]	; 0x50
 8010e06:	4b13      	ldr	r3, [pc, #76]	; (8010e54 <__sinit+0x68>)
 8010e08:	4a13      	ldr	r2, [pc, #76]	; (8010e58 <__sinit+0x6c>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e0e:	9301      	str	r3, [sp, #4]
 8010e10:	42a3      	cmp	r3, r4
 8010e12:	d101      	bne.n	8010e18 <__sinit+0x2c>
 8010e14:	2301      	movs	r3, #1
 8010e16:	61a3      	str	r3, [r4, #24]
 8010e18:	0020      	movs	r0, r4
 8010e1a:	f000 f81f 	bl	8010e5c <__sfp>
 8010e1e:	6060      	str	r0, [r4, #4]
 8010e20:	0020      	movs	r0, r4
 8010e22:	f000 f81b 	bl	8010e5c <__sfp>
 8010e26:	60a0      	str	r0, [r4, #8]
 8010e28:	0020      	movs	r0, r4
 8010e2a:	f000 f817 	bl	8010e5c <__sfp>
 8010e2e:	2200      	movs	r2, #0
 8010e30:	2104      	movs	r1, #4
 8010e32:	60e0      	str	r0, [r4, #12]
 8010e34:	6860      	ldr	r0, [r4, #4]
 8010e36:	f7ff ff77 	bl	8010d28 <std>
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	2109      	movs	r1, #9
 8010e3e:	68a0      	ldr	r0, [r4, #8]
 8010e40:	f7ff ff72 	bl	8010d28 <std>
 8010e44:	2202      	movs	r2, #2
 8010e46:	2112      	movs	r1, #18
 8010e48:	68e0      	ldr	r0, [r4, #12]
 8010e4a:	f7ff ff6d 	bl	8010d28 <std>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	61a3      	str	r3, [r4, #24]
 8010e52:	e7d2      	b.n	8010dfa <__sinit+0xe>
 8010e54:	08015838 	.word	0x08015838
 8010e58:	08010d71 	.word	0x08010d71

08010e5c <__sfp>:
 8010e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5e:	0007      	movs	r7, r0
 8010e60:	f7ff ffa4 	bl	8010dac <__sfp_lock_acquire>
 8010e64:	4b1f      	ldr	r3, [pc, #124]	; (8010ee4 <__sfp+0x88>)
 8010e66:	681e      	ldr	r6, [r3, #0]
 8010e68:	69b3      	ldr	r3, [r6, #24]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d102      	bne.n	8010e74 <__sfp+0x18>
 8010e6e:	0030      	movs	r0, r6
 8010e70:	f7ff ffbc 	bl	8010dec <__sinit>
 8010e74:	3648      	adds	r6, #72	; 0x48
 8010e76:	68b4      	ldr	r4, [r6, #8]
 8010e78:	6873      	ldr	r3, [r6, #4]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	d504      	bpl.n	8010e88 <__sfp+0x2c>
 8010e7e:	6833      	ldr	r3, [r6, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d022      	beq.n	8010eca <__sfp+0x6e>
 8010e84:	6836      	ldr	r6, [r6, #0]
 8010e86:	e7f6      	b.n	8010e76 <__sfp+0x1a>
 8010e88:	220c      	movs	r2, #12
 8010e8a:	5ea5      	ldrsh	r5, [r4, r2]
 8010e8c:	2d00      	cmp	r5, #0
 8010e8e:	d11a      	bne.n	8010ec6 <__sfp+0x6a>
 8010e90:	0020      	movs	r0, r4
 8010e92:	4b15      	ldr	r3, [pc, #84]	; (8010ee8 <__sfp+0x8c>)
 8010e94:	3058      	adds	r0, #88	; 0x58
 8010e96:	60e3      	str	r3, [r4, #12]
 8010e98:	6665      	str	r5, [r4, #100]	; 0x64
 8010e9a:	f000 f847 	bl	8010f2c <__retarget_lock_init_recursive>
 8010e9e:	f7ff ff8d 	bl	8010dbc <__sfp_lock_release>
 8010ea2:	0020      	movs	r0, r4
 8010ea4:	2208      	movs	r2, #8
 8010ea6:	0029      	movs	r1, r5
 8010ea8:	6025      	str	r5, [r4, #0]
 8010eaa:	60a5      	str	r5, [r4, #8]
 8010eac:	6065      	str	r5, [r4, #4]
 8010eae:	6125      	str	r5, [r4, #16]
 8010eb0:	6165      	str	r5, [r4, #20]
 8010eb2:	61a5      	str	r5, [r4, #24]
 8010eb4:	305c      	adds	r0, #92	; 0x5c
 8010eb6:	f7ff fc25 	bl	8010704 <memset>
 8010eba:	6365      	str	r5, [r4, #52]	; 0x34
 8010ebc:	63a5      	str	r5, [r4, #56]	; 0x38
 8010ebe:	64a5      	str	r5, [r4, #72]	; 0x48
 8010ec0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010ec2:	0020      	movs	r0, r4
 8010ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec6:	3468      	adds	r4, #104	; 0x68
 8010ec8:	e7d7      	b.n	8010e7a <__sfp+0x1e>
 8010eca:	2104      	movs	r1, #4
 8010ecc:	0038      	movs	r0, r7
 8010ece:	f7ff ff57 	bl	8010d80 <__sfmoreglue>
 8010ed2:	1e04      	subs	r4, r0, #0
 8010ed4:	6030      	str	r0, [r6, #0]
 8010ed6:	d1d5      	bne.n	8010e84 <__sfp+0x28>
 8010ed8:	f7ff ff70 	bl	8010dbc <__sfp_lock_release>
 8010edc:	230c      	movs	r3, #12
 8010ede:	603b      	str	r3, [r7, #0]
 8010ee0:	e7ef      	b.n	8010ec2 <__sfp+0x66>
 8010ee2:	46c0      	nop			; (mov r8, r8)
 8010ee4:	08015838 	.word	0x08015838
 8010ee8:	ffff0001 	.word	0xffff0001

08010eec <_fwalk_reent>:
 8010eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eee:	0004      	movs	r4, r0
 8010ef0:	0006      	movs	r6, r0
 8010ef2:	2700      	movs	r7, #0
 8010ef4:	9101      	str	r1, [sp, #4]
 8010ef6:	3448      	adds	r4, #72	; 0x48
 8010ef8:	6863      	ldr	r3, [r4, #4]
 8010efa:	68a5      	ldr	r5, [r4, #8]
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	9b00      	ldr	r3, [sp, #0]
 8010f00:	3b01      	subs	r3, #1
 8010f02:	9300      	str	r3, [sp, #0]
 8010f04:	d504      	bpl.n	8010f10 <_fwalk_reent+0x24>
 8010f06:	6824      	ldr	r4, [r4, #0]
 8010f08:	2c00      	cmp	r4, #0
 8010f0a:	d1f5      	bne.n	8010ef8 <_fwalk_reent+0xc>
 8010f0c:	0038      	movs	r0, r7
 8010f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f10:	89ab      	ldrh	r3, [r5, #12]
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d908      	bls.n	8010f28 <_fwalk_reent+0x3c>
 8010f16:	220e      	movs	r2, #14
 8010f18:	5eab      	ldrsh	r3, [r5, r2]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	d004      	beq.n	8010f28 <_fwalk_reent+0x3c>
 8010f1e:	0029      	movs	r1, r5
 8010f20:	0030      	movs	r0, r6
 8010f22:	9b01      	ldr	r3, [sp, #4]
 8010f24:	4798      	blx	r3
 8010f26:	4307      	orrs	r7, r0
 8010f28:	3568      	adds	r5, #104	; 0x68
 8010f2a:	e7e8      	b.n	8010efe <_fwalk_reent+0x12>

08010f2c <__retarget_lock_init_recursive>:
 8010f2c:	4770      	bx	lr

08010f2e <__retarget_lock_acquire_recursive>:
 8010f2e:	4770      	bx	lr

08010f30 <__retarget_lock_release_recursive>:
 8010f30:	4770      	bx	lr
	...

08010f34 <__swhatbuf_r>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	000e      	movs	r6, r1
 8010f38:	001d      	movs	r5, r3
 8010f3a:	230e      	movs	r3, #14
 8010f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8010f3e:	0014      	movs	r4, r2
 8010f40:	b096      	sub	sp, #88	; 0x58
 8010f42:	2900      	cmp	r1, #0
 8010f44:	da07      	bge.n	8010f56 <__swhatbuf_r+0x22>
 8010f46:	2300      	movs	r3, #0
 8010f48:	602b      	str	r3, [r5, #0]
 8010f4a:	89b3      	ldrh	r3, [r6, #12]
 8010f4c:	061b      	lsls	r3, r3, #24
 8010f4e:	d411      	bmi.n	8010f74 <__swhatbuf_r+0x40>
 8010f50:	2380      	movs	r3, #128	; 0x80
 8010f52:	00db      	lsls	r3, r3, #3
 8010f54:	e00f      	b.n	8010f76 <__swhatbuf_r+0x42>
 8010f56:	466a      	mov	r2, sp
 8010f58:	f000 fd20 	bl	801199c <_fstat_r>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	dbf2      	blt.n	8010f46 <__swhatbuf_r+0x12>
 8010f60:	23f0      	movs	r3, #240	; 0xf0
 8010f62:	9901      	ldr	r1, [sp, #4]
 8010f64:	021b      	lsls	r3, r3, #8
 8010f66:	4019      	ands	r1, r3
 8010f68:	4b05      	ldr	r3, [pc, #20]	; (8010f80 <__swhatbuf_r+0x4c>)
 8010f6a:	18c9      	adds	r1, r1, r3
 8010f6c:	424b      	negs	r3, r1
 8010f6e:	4159      	adcs	r1, r3
 8010f70:	6029      	str	r1, [r5, #0]
 8010f72:	e7ed      	b.n	8010f50 <__swhatbuf_r+0x1c>
 8010f74:	2340      	movs	r3, #64	; 0x40
 8010f76:	2000      	movs	r0, #0
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	b016      	add	sp, #88	; 0x58
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	46c0      	nop			; (mov r8, r8)
 8010f80:	ffffe000 	.word	0xffffe000

08010f84 <__smakebuf_r>:
 8010f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f86:	2602      	movs	r6, #2
 8010f88:	898b      	ldrh	r3, [r1, #12]
 8010f8a:	0005      	movs	r5, r0
 8010f8c:	000c      	movs	r4, r1
 8010f8e:	4233      	tst	r3, r6
 8010f90:	d006      	beq.n	8010fa0 <__smakebuf_r+0x1c>
 8010f92:	0023      	movs	r3, r4
 8010f94:	3347      	adds	r3, #71	; 0x47
 8010f96:	6023      	str	r3, [r4, #0]
 8010f98:	6123      	str	r3, [r4, #16]
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	6163      	str	r3, [r4, #20]
 8010f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010fa0:	466a      	mov	r2, sp
 8010fa2:	ab01      	add	r3, sp, #4
 8010fa4:	f7ff ffc6 	bl	8010f34 <__swhatbuf_r>
 8010fa8:	9900      	ldr	r1, [sp, #0]
 8010faa:	0007      	movs	r7, r0
 8010fac:	0028      	movs	r0, r5
 8010fae:	f7ff fbfb 	bl	80107a8 <_malloc_r>
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d108      	bne.n	8010fc8 <__smakebuf_r+0x44>
 8010fb6:	220c      	movs	r2, #12
 8010fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8010fba:	059a      	lsls	r2, r3, #22
 8010fbc:	d4ef      	bmi.n	8010f9e <__smakebuf_r+0x1a>
 8010fbe:	2203      	movs	r2, #3
 8010fc0:	4393      	bics	r3, r2
 8010fc2:	431e      	orrs	r6, r3
 8010fc4:	81a6      	strh	r6, [r4, #12]
 8010fc6:	e7e4      	b.n	8010f92 <__smakebuf_r+0xe>
 8010fc8:	4b0f      	ldr	r3, [pc, #60]	; (8011008 <__smakebuf_r+0x84>)
 8010fca:	62ab      	str	r3, [r5, #40]	; 0x28
 8010fcc:	2380      	movs	r3, #128	; 0x80
 8010fce:	89a2      	ldrh	r2, [r4, #12]
 8010fd0:	6020      	str	r0, [r4, #0]
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	81a3      	strh	r3, [r4, #12]
 8010fd6:	9b00      	ldr	r3, [sp, #0]
 8010fd8:	6120      	str	r0, [r4, #16]
 8010fda:	6163      	str	r3, [r4, #20]
 8010fdc:	9b01      	ldr	r3, [sp, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00d      	beq.n	8010ffe <__smakebuf_r+0x7a>
 8010fe2:	0028      	movs	r0, r5
 8010fe4:	230e      	movs	r3, #14
 8010fe6:	5ee1      	ldrsh	r1, [r4, r3]
 8010fe8:	f000 fcea 	bl	80119c0 <_isatty_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d006      	beq.n	8010ffe <__smakebuf_r+0x7a>
 8010ff0:	2203      	movs	r2, #3
 8010ff2:	89a3      	ldrh	r3, [r4, #12]
 8010ff4:	4393      	bics	r3, r2
 8010ff6:	001a      	movs	r2, r3
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	81a3      	strh	r3, [r4, #12]
 8010ffe:	89a0      	ldrh	r0, [r4, #12]
 8011000:	4307      	orrs	r7, r0
 8011002:	81a7      	strh	r7, [r4, #12]
 8011004:	e7cb      	b.n	8010f9e <__smakebuf_r+0x1a>
 8011006:	46c0      	nop			; (mov r8, r8)
 8011008:	08010d71 	.word	0x08010d71

0801100c <__malloc_lock>:
 801100c:	b510      	push	{r4, lr}
 801100e:	4802      	ldr	r0, [pc, #8]	; (8011018 <__malloc_lock+0xc>)
 8011010:	f7ff ff8d 	bl	8010f2e <__retarget_lock_acquire_recursive>
 8011014:	bd10      	pop	{r4, pc}
 8011016:	46c0      	nop			; (mov r8, r8)
 8011018:	200008e0 	.word	0x200008e0

0801101c <__malloc_unlock>:
 801101c:	b510      	push	{r4, lr}
 801101e:	4802      	ldr	r0, [pc, #8]	; (8011028 <__malloc_unlock+0xc>)
 8011020:	f7ff ff86 	bl	8010f30 <__retarget_lock_release_recursive>
 8011024:	bd10      	pop	{r4, pc}
 8011026:	46c0      	nop			; (mov r8, r8)
 8011028:	200008e0 	.word	0x200008e0

0801102c <__ssputs_r>:
 801102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801102e:	688e      	ldr	r6, [r1, #8]
 8011030:	b085      	sub	sp, #20
 8011032:	0007      	movs	r7, r0
 8011034:	000c      	movs	r4, r1
 8011036:	9203      	str	r2, [sp, #12]
 8011038:	9301      	str	r3, [sp, #4]
 801103a:	429e      	cmp	r6, r3
 801103c:	d83c      	bhi.n	80110b8 <__ssputs_r+0x8c>
 801103e:	2390      	movs	r3, #144	; 0x90
 8011040:	898a      	ldrh	r2, [r1, #12]
 8011042:	00db      	lsls	r3, r3, #3
 8011044:	421a      	tst	r2, r3
 8011046:	d034      	beq.n	80110b2 <__ssputs_r+0x86>
 8011048:	2503      	movs	r5, #3
 801104a:	6909      	ldr	r1, [r1, #16]
 801104c:	6823      	ldr	r3, [r4, #0]
 801104e:	1a5b      	subs	r3, r3, r1
 8011050:	9302      	str	r3, [sp, #8]
 8011052:	6963      	ldr	r3, [r4, #20]
 8011054:	9802      	ldr	r0, [sp, #8]
 8011056:	435d      	muls	r5, r3
 8011058:	0feb      	lsrs	r3, r5, #31
 801105a:	195d      	adds	r5, r3, r5
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	106d      	asrs	r5, r5, #1
 8011060:	3301      	adds	r3, #1
 8011062:	181b      	adds	r3, r3, r0
 8011064:	42ab      	cmp	r3, r5
 8011066:	d900      	bls.n	801106a <__ssputs_r+0x3e>
 8011068:	001d      	movs	r5, r3
 801106a:	0553      	lsls	r3, r2, #21
 801106c:	d532      	bpl.n	80110d4 <__ssputs_r+0xa8>
 801106e:	0029      	movs	r1, r5
 8011070:	0038      	movs	r0, r7
 8011072:	f7ff fb99 	bl	80107a8 <_malloc_r>
 8011076:	1e06      	subs	r6, r0, #0
 8011078:	d109      	bne.n	801108e <__ssputs_r+0x62>
 801107a:	230c      	movs	r3, #12
 801107c:	603b      	str	r3, [r7, #0]
 801107e:	2340      	movs	r3, #64	; 0x40
 8011080:	2001      	movs	r0, #1
 8011082:	89a2      	ldrh	r2, [r4, #12]
 8011084:	4240      	negs	r0, r0
 8011086:	4313      	orrs	r3, r2
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	b005      	add	sp, #20
 801108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801108e:	9a02      	ldr	r2, [sp, #8]
 8011090:	6921      	ldr	r1, [r4, #16]
 8011092:	f000 fcc6 	bl	8011a22 <memcpy>
 8011096:	89a3      	ldrh	r3, [r4, #12]
 8011098:	4a14      	ldr	r2, [pc, #80]	; (80110ec <__ssputs_r+0xc0>)
 801109a:	401a      	ands	r2, r3
 801109c:	2380      	movs	r3, #128	; 0x80
 801109e:	4313      	orrs	r3, r2
 80110a0:	81a3      	strh	r3, [r4, #12]
 80110a2:	9b02      	ldr	r3, [sp, #8]
 80110a4:	6126      	str	r6, [r4, #16]
 80110a6:	18f6      	adds	r6, r6, r3
 80110a8:	6026      	str	r6, [r4, #0]
 80110aa:	6165      	str	r5, [r4, #20]
 80110ac:	9e01      	ldr	r6, [sp, #4]
 80110ae:	1aed      	subs	r5, r5, r3
 80110b0:	60a5      	str	r5, [r4, #8]
 80110b2:	9b01      	ldr	r3, [sp, #4]
 80110b4:	429e      	cmp	r6, r3
 80110b6:	d900      	bls.n	80110ba <__ssputs_r+0x8e>
 80110b8:	9e01      	ldr	r6, [sp, #4]
 80110ba:	0032      	movs	r2, r6
 80110bc:	9903      	ldr	r1, [sp, #12]
 80110be:	6820      	ldr	r0, [r4, #0]
 80110c0:	f000 fcb8 	bl	8011a34 <memmove>
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	2000      	movs	r0, #0
 80110c8:	1b9b      	subs	r3, r3, r6
 80110ca:	60a3      	str	r3, [r4, #8]
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	199e      	adds	r6, r3, r6
 80110d0:	6026      	str	r6, [r4, #0]
 80110d2:	e7da      	b.n	801108a <__ssputs_r+0x5e>
 80110d4:	002a      	movs	r2, r5
 80110d6:	0038      	movs	r0, r7
 80110d8:	f000 fcbf 	bl	8011a5a <_realloc_r>
 80110dc:	1e06      	subs	r6, r0, #0
 80110de:	d1e0      	bne.n	80110a2 <__ssputs_r+0x76>
 80110e0:	0038      	movs	r0, r7
 80110e2:	6921      	ldr	r1, [r4, #16]
 80110e4:	f7ff fb16 	bl	8010714 <_free_r>
 80110e8:	e7c7      	b.n	801107a <__ssputs_r+0x4e>
 80110ea:	46c0      	nop			; (mov r8, r8)
 80110ec:	fffffb7f 	.word	0xfffffb7f

080110f0 <_svfiprintf_r>:
 80110f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110f2:	b0a1      	sub	sp, #132	; 0x84
 80110f4:	9003      	str	r0, [sp, #12]
 80110f6:	001d      	movs	r5, r3
 80110f8:	898b      	ldrh	r3, [r1, #12]
 80110fa:	000f      	movs	r7, r1
 80110fc:	0016      	movs	r6, r2
 80110fe:	061b      	lsls	r3, r3, #24
 8011100:	d511      	bpl.n	8011126 <_svfiprintf_r+0x36>
 8011102:	690b      	ldr	r3, [r1, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d10e      	bne.n	8011126 <_svfiprintf_r+0x36>
 8011108:	2140      	movs	r1, #64	; 0x40
 801110a:	f7ff fb4d 	bl	80107a8 <_malloc_r>
 801110e:	6038      	str	r0, [r7, #0]
 8011110:	6138      	str	r0, [r7, #16]
 8011112:	2800      	cmp	r0, #0
 8011114:	d105      	bne.n	8011122 <_svfiprintf_r+0x32>
 8011116:	230c      	movs	r3, #12
 8011118:	9a03      	ldr	r2, [sp, #12]
 801111a:	3801      	subs	r0, #1
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	b021      	add	sp, #132	; 0x84
 8011120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011122:	2340      	movs	r3, #64	; 0x40
 8011124:	617b      	str	r3, [r7, #20]
 8011126:	2300      	movs	r3, #0
 8011128:	ac08      	add	r4, sp, #32
 801112a:	6163      	str	r3, [r4, #20]
 801112c:	3320      	adds	r3, #32
 801112e:	7663      	strb	r3, [r4, #25]
 8011130:	3310      	adds	r3, #16
 8011132:	76a3      	strb	r3, [r4, #26]
 8011134:	9507      	str	r5, [sp, #28]
 8011136:	0035      	movs	r5, r6
 8011138:	782b      	ldrb	r3, [r5, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <_svfiprintf_r+0x52>
 801113e:	2b25      	cmp	r3, #37	; 0x25
 8011140:	d147      	bne.n	80111d2 <_svfiprintf_r+0xe2>
 8011142:	1bab      	subs	r3, r5, r6
 8011144:	9305      	str	r3, [sp, #20]
 8011146:	42b5      	cmp	r5, r6
 8011148:	d00c      	beq.n	8011164 <_svfiprintf_r+0x74>
 801114a:	0032      	movs	r2, r6
 801114c:	0039      	movs	r1, r7
 801114e:	9803      	ldr	r0, [sp, #12]
 8011150:	f7ff ff6c 	bl	801102c <__ssputs_r>
 8011154:	1c43      	adds	r3, r0, #1
 8011156:	d100      	bne.n	801115a <_svfiprintf_r+0x6a>
 8011158:	e0ae      	b.n	80112b8 <_svfiprintf_r+0x1c8>
 801115a:	6962      	ldr	r2, [r4, #20]
 801115c:	9b05      	ldr	r3, [sp, #20]
 801115e:	4694      	mov	ip, r2
 8011160:	4463      	add	r3, ip
 8011162:	6163      	str	r3, [r4, #20]
 8011164:	782b      	ldrb	r3, [r5, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d100      	bne.n	801116c <_svfiprintf_r+0x7c>
 801116a:	e0a5      	b.n	80112b8 <_svfiprintf_r+0x1c8>
 801116c:	2201      	movs	r2, #1
 801116e:	2300      	movs	r3, #0
 8011170:	4252      	negs	r2, r2
 8011172:	6062      	str	r2, [r4, #4]
 8011174:	a904      	add	r1, sp, #16
 8011176:	3254      	adds	r2, #84	; 0x54
 8011178:	1852      	adds	r2, r2, r1
 801117a:	1c6e      	adds	r6, r5, #1
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	60e3      	str	r3, [r4, #12]
 8011180:	60a3      	str	r3, [r4, #8]
 8011182:	7013      	strb	r3, [r2, #0]
 8011184:	65a3      	str	r3, [r4, #88]	; 0x58
 8011186:	2205      	movs	r2, #5
 8011188:	7831      	ldrb	r1, [r6, #0]
 801118a:	4854      	ldr	r0, [pc, #336]	; (80112dc <_svfiprintf_r+0x1ec>)
 801118c:	f000 fc3e 	bl	8011a0c <memchr>
 8011190:	1c75      	adds	r5, r6, #1
 8011192:	2800      	cmp	r0, #0
 8011194:	d11f      	bne.n	80111d6 <_svfiprintf_r+0xe6>
 8011196:	6822      	ldr	r2, [r4, #0]
 8011198:	06d3      	lsls	r3, r2, #27
 801119a:	d504      	bpl.n	80111a6 <_svfiprintf_r+0xb6>
 801119c:	2353      	movs	r3, #83	; 0x53
 801119e:	a904      	add	r1, sp, #16
 80111a0:	185b      	adds	r3, r3, r1
 80111a2:	2120      	movs	r1, #32
 80111a4:	7019      	strb	r1, [r3, #0]
 80111a6:	0713      	lsls	r3, r2, #28
 80111a8:	d504      	bpl.n	80111b4 <_svfiprintf_r+0xc4>
 80111aa:	2353      	movs	r3, #83	; 0x53
 80111ac:	a904      	add	r1, sp, #16
 80111ae:	185b      	adds	r3, r3, r1
 80111b0:	212b      	movs	r1, #43	; 0x2b
 80111b2:	7019      	strb	r1, [r3, #0]
 80111b4:	7833      	ldrb	r3, [r6, #0]
 80111b6:	2b2a      	cmp	r3, #42	; 0x2a
 80111b8:	d016      	beq.n	80111e8 <_svfiprintf_r+0xf8>
 80111ba:	0035      	movs	r5, r6
 80111bc:	2100      	movs	r1, #0
 80111be:	200a      	movs	r0, #10
 80111c0:	68e3      	ldr	r3, [r4, #12]
 80111c2:	782a      	ldrb	r2, [r5, #0]
 80111c4:	1c6e      	adds	r6, r5, #1
 80111c6:	3a30      	subs	r2, #48	; 0x30
 80111c8:	2a09      	cmp	r2, #9
 80111ca:	d94e      	bls.n	801126a <_svfiprintf_r+0x17a>
 80111cc:	2900      	cmp	r1, #0
 80111ce:	d111      	bne.n	80111f4 <_svfiprintf_r+0x104>
 80111d0:	e017      	b.n	8011202 <_svfiprintf_r+0x112>
 80111d2:	3501      	adds	r5, #1
 80111d4:	e7b0      	b.n	8011138 <_svfiprintf_r+0x48>
 80111d6:	4b41      	ldr	r3, [pc, #260]	; (80112dc <_svfiprintf_r+0x1ec>)
 80111d8:	6822      	ldr	r2, [r4, #0]
 80111da:	1ac0      	subs	r0, r0, r3
 80111dc:	2301      	movs	r3, #1
 80111de:	4083      	lsls	r3, r0
 80111e0:	4313      	orrs	r3, r2
 80111e2:	002e      	movs	r6, r5
 80111e4:	6023      	str	r3, [r4, #0]
 80111e6:	e7ce      	b.n	8011186 <_svfiprintf_r+0x96>
 80111e8:	9b07      	ldr	r3, [sp, #28]
 80111ea:	1d19      	adds	r1, r3, #4
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	9107      	str	r1, [sp, #28]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	db01      	blt.n	80111f8 <_svfiprintf_r+0x108>
 80111f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80111f6:	e004      	b.n	8011202 <_svfiprintf_r+0x112>
 80111f8:	425b      	negs	r3, r3
 80111fa:	60e3      	str	r3, [r4, #12]
 80111fc:	2302      	movs	r3, #2
 80111fe:	4313      	orrs	r3, r2
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	782b      	ldrb	r3, [r5, #0]
 8011204:	2b2e      	cmp	r3, #46	; 0x2e
 8011206:	d10a      	bne.n	801121e <_svfiprintf_r+0x12e>
 8011208:	786b      	ldrb	r3, [r5, #1]
 801120a:	2b2a      	cmp	r3, #42	; 0x2a
 801120c:	d135      	bne.n	801127a <_svfiprintf_r+0x18a>
 801120e:	9b07      	ldr	r3, [sp, #28]
 8011210:	3502      	adds	r5, #2
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	9207      	str	r2, [sp, #28]
 8011218:	2b00      	cmp	r3, #0
 801121a:	db2b      	blt.n	8011274 <_svfiprintf_r+0x184>
 801121c:	9309      	str	r3, [sp, #36]	; 0x24
 801121e:	4e30      	ldr	r6, [pc, #192]	; (80112e0 <_svfiprintf_r+0x1f0>)
 8011220:	2203      	movs	r2, #3
 8011222:	0030      	movs	r0, r6
 8011224:	7829      	ldrb	r1, [r5, #0]
 8011226:	f000 fbf1 	bl	8011a0c <memchr>
 801122a:	2800      	cmp	r0, #0
 801122c:	d006      	beq.n	801123c <_svfiprintf_r+0x14c>
 801122e:	2340      	movs	r3, #64	; 0x40
 8011230:	1b80      	subs	r0, r0, r6
 8011232:	4083      	lsls	r3, r0
 8011234:	6822      	ldr	r2, [r4, #0]
 8011236:	3501      	adds	r5, #1
 8011238:	4313      	orrs	r3, r2
 801123a:	6023      	str	r3, [r4, #0]
 801123c:	7829      	ldrb	r1, [r5, #0]
 801123e:	2206      	movs	r2, #6
 8011240:	4828      	ldr	r0, [pc, #160]	; (80112e4 <_svfiprintf_r+0x1f4>)
 8011242:	1c6e      	adds	r6, r5, #1
 8011244:	7621      	strb	r1, [r4, #24]
 8011246:	f000 fbe1 	bl	8011a0c <memchr>
 801124a:	2800      	cmp	r0, #0
 801124c:	d03c      	beq.n	80112c8 <_svfiprintf_r+0x1d8>
 801124e:	4b26      	ldr	r3, [pc, #152]	; (80112e8 <_svfiprintf_r+0x1f8>)
 8011250:	2b00      	cmp	r3, #0
 8011252:	d125      	bne.n	80112a0 <_svfiprintf_r+0x1b0>
 8011254:	2207      	movs	r2, #7
 8011256:	9b07      	ldr	r3, [sp, #28]
 8011258:	3307      	adds	r3, #7
 801125a:	4393      	bics	r3, r2
 801125c:	3308      	adds	r3, #8
 801125e:	9307      	str	r3, [sp, #28]
 8011260:	6963      	ldr	r3, [r4, #20]
 8011262:	9a04      	ldr	r2, [sp, #16]
 8011264:	189b      	adds	r3, r3, r2
 8011266:	6163      	str	r3, [r4, #20]
 8011268:	e765      	b.n	8011136 <_svfiprintf_r+0x46>
 801126a:	4343      	muls	r3, r0
 801126c:	0035      	movs	r5, r6
 801126e:	2101      	movs	r1, #1
 8011270:	189b      	adds	r3, r3, r2
 8011272:	e7a6      	b.n	80111c2 <_svfiprintf_r+0xd2>
 8011274:	2301      	movs	r3, #1
 8011276:	425b      	negs	r3, r3
 8011278:	e7d0      	b.n	801121c <_svfiprintf_r+0x12c>
 801127a:	2300      	movs	r3, #0
 801127c:	200a      	movs	r0, #10
 801127e:	001a      	movs	r2, r3
 8011280:	3501      	adds	r5, #1
 8011282:	6063      	str	r3, [r4, #4]
 8011284:	7829      	ldrb	r1, [r5, #0]
 8011286:	1c6e      	adds	r6, r5, #1
 8011288:	3930      	subs	r1, #48	; 0x30
 801128a:	2909      	cmp	r1, #9
 801128c:	d903      	bls.n	8011296 <_svfiprintf_r+0x1a6>
 801128e:	2b00      	cmp	r3, #0
 8011290:	d0c5      	beq.n	801121e <_svfiprintf_r+0x12e>
 8011292:	9209      	str	r2, [sp, #36]	; 0x24
 8011294:	e7c3      	b.n	801121e <_svfiprintf_r+0x12e>
 8011296:	4342      	muls	r2, r0
 8011298:	0035      	movs	r5, r6
 801129a:	2301      	movs	r3, #1
 801129c:	1852      	adds	r2, r2, r1
 801129e:	e7f1      	b.n	8011284 <_svfiprintf_r+0x194>
 80112a0:	ab07      	add	r3, sp, #28
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	003a      	movs	r2, r7
 80112a6:	0021      	movs	r1, r4
 80112a8:	4b10      	ldr	r3, [pc, #64]	; (80112ec <_svfiprintf_r+0x1fc>)
 80112aa:	9803      	ldr	r0, [sp, #12]
 80112ac:	e000      	b.n	80112b0 <_svfiprintf_r+0x1c0>
 80112ae:	bf00      	nop
 80112b0:	9004      	str	r0, [sp, #16]
 80112b2:	9b04      	ldr	r3, [sp, #16]
 80112b4:	3301      	adds	r3, #1
 80112b6:	d1d3      	bne.n	8011260 <_svfiprintf_r+0x170>
 80112b8:	89bb      	ldrh	r3, [r7, #12]
 80112ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80112bc:	065b      	lsls	r3, r3, #25
 80112be:	d400      	bmi.n	80112c2 <_svfiprintf_r+0x1d2>
 80112c0:	e72d      	b.n	801111e <_svfiprintf_r+0x2e>
 80112c2:	2001      	movs	r0, #1
 80112c4:	4240      	negs	r0, r0
 80112c6:	e72a      	b.n	801111e <_svfiprintf_r+0x2e>
 80112c8:	ab07      	add	r3, sp, #28
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	003a      	movs	r2, r7
 80112ce:	0021      	movs	r1, r4
 80112d0:	4b06      	ldr	r3, [pc, #24]	; (80112ec <_svfiprintf_r+0x1fc>)
 80112d2:	9803      	ldr	r0, [sp, #12]
 80112d4:	f000 f9de 	bl	8011694 <_printf_i>
 80112d8:	e7ea      	b.n	80112b0 <_svfiprintf_r+0x1c0>
 80112da:	46c0      	nop			; (mov r8, r8)
 80112dc:	0801589c 	.word	0x0801589c
 80112e0:	080158a2 	.word	0x080158a2
 80112e4:	080158a6 	.word	0x080158a6
 80112e8:	00000000 	.word	0x00000000
 80112ec:	0801102d 	.word	0x0801102d

080112f0 <__sfputc_r>:
 80112f0:	6893      	ldr	r3, [r2, #8]
 80112f2:	b510      	push	{r4, lr}
 80112f4:	3b01      	subs	r3, #1
 80112f6:	6093      	str	r3, [r2, #8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	da04      	bge.n	8011306 <__sfputc_r+0x16>
 80112fc:	6994      	ldr	r4, [r2, #24]
 80112fe:	42a3      	cmp	r3, r4
 8011300:	db07      	blt.n	8011312 <__sfputc_r+0x22>
 8011302:	290a      	cmp	r1, #10
 8011304:	d005      	beq.n	8011312 <__sfputc_r+0x22>
 8011306:	6813      	ldr	r3, [r2, #0]
 8011308:	1c58      	adds	r0, r3, #1
 801130a:	6010      	str	r0, [r2, #0]
 801130c:	7019      	strb	r1, [r3, #0]
 801130e:	0008      	movs	r0, r1
 8011310:	bd10      	pop	{r4, pc}
 8011312:	f7ff fb6f 	bl	80109f4 <__swbuf_r>
 8011316:	0001      	movs	r1, r0
 8011318:	e7f9      	b.n	801130e <__sfputc_r+0x1e>

0801131a <__sfputs_r>:
 801131a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131c:	0006      	movs	r6, r0
 801131e:	000f      	movs	r7, r1
 8011320:	0014      	movs	r4, r2
 8011322:	18d5      	adds	r5, r2, r3
 8011324:	42ac      	cmp	r4, r5
 8011326:	d101      	bne.n	801132c <__sfputs_r+0x12>
 8011328:	2000      	movs	r0, #0
 801132a:	e007      	b.n	801133c <__sfputs_r+0x22>
 801132c:	7821      	ldrb	r1, [r4, #0]
 801132e:	003a      	movs	r2, r7
 8011330:	0030      	movs	r0, r6
 8011332:	f7ff ffdd 	bl	80112f0 <__sfputc_r>
 8011336:	3401      	adds	r4, #1
 8011338:	1c43      	adds	r3, r0, #1
 801133a:	d1f3      	bne.n	8011324 <__sfputs_r+0xa>
 801133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011340 <_vfiprintf_r>:
 8011340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011342:	b0a1      	sub	sp, #132	; 0x84
 8011344:	0006      	movs	r6, r0
 8011346:	000c      	movs	r4, r1
 8011348:	001f      	movs	r7, r3
 801134a:	9203      	str	r2, [sp, #12]
 801134c:	2800      	cmp	r0, #0
 801134e:	d004      	beq.n	801135a <_vfiprintf_r+0x1a>
 8011350:	6983      	ldr	r3, [r0, #24]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <_vfiprintf_r+0x1a>
 8011356:	f7ff fd49 	bl	8010dec <__sinit>
 801135a:	4b8e      	ldr	r3, [pc, #568]	; (8011594 <_vfiprintf_r+0x254>)
 801135c:	429c      	cmp	r4, r3
 801135e:	d11c      	bne.n	801139a <_vfiprintf_r+0x5a>
 8011360:	6874      	ldr	r4, [r6, #4]
 8011362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011364:	07db      	lsls	r3, r3, #31
 8011366:	d405      	bmi.n	8011374 <_vfiprintf_r+0x34>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	059b      	lsls	r3, r3, #22
 801136c:	d402      	bmi.n	8011374 <_vfiprintf_r+0x34>
 801136e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011370:	f7ff fddd 	bl	8010f2e <__retarget_lock_acquire_recursive>
 8011374:	89a3      	ldrh	r3, [r4, #12]
 8011376:	071b      	lsls	r3, r3, #28
 8011378:	d502      	bpl.n	8011380 <_vfiprintf_r+0x40>
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d11d      	bne.n	80113bc <_vfiprintf_r+0x7c>
 8011380:	0021      	movs	r1, r4
 8011382:	0030      	movs	r0, r6
 8011384:	f7ff fb8c 	bl	8010aa0 <__swsetup_r>
 8011388:	2800      	cmp	r0, #0
 801138a:	d017      	beq.n	80113bc <_vfiprintf_r+0x7c>
 801138c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801138e:	07db      	lsls	r3, r3, #31
 8011390:	d50d      	bpl.n	80113ae <_vfiprintf_r+0x6e>
 8011392:	2001      	movs	r0, #1
 8011394:	4240      	negs	r0, r0
 8011396:	b021      	add	sp, #132	; 0x84
 8011398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801139a:	4b7f      	ldr	r3, [pc, #508]	; (8011598 <_vfiprintf_r+0x258>)
 801139c:	429c      	cmp	r4, r3
 801139e:	d101      	bne.n	80113a4 <_vfiprintf_r+0x64>
 80113a0:	68b4      	ldr	r4, [r6, #8]
 80113a2:	e7de      	b.n	8011362 <_vfiprintf_r+0x22>
 80113a4:	4b7d      	ldr	r3, [pc, #500]	; (801159c <_vfiprintf_r+0x25c>)
 80113a6:	429c      	cmp	r4, r3
 80113a8:	d1db      	bne.n	8011362 <_vfiprintf_r+0x22>
 80113aa:	68f4      	ldr	r4, [r6, #12]
 80113ac:	e7d9      	b.n	8011362 <_vfiprintf_r+0x22>
 80113ae:	89a3      	ldrh	r3, [r4, #12]
 80113b0:	059b      	lsls	r3, r3, #22
 80113b2:	d4ee      	bmi.n	8011392 <_vfiprintf_r+0x52>
 80113b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113b6:	f7ff fdbb 	bl	8010f30 <__retarget_lock_release_recursive>
 80113ba:	e7ea      	b.n	8011392 <_vfiprintf_r+0x52>
 80113bc:	2300      	movs	r3, #0
 80113be:	ad08      	add	r5, sp, #32
 80113c0:	616b      	str	r3, [r5, #20]
 80113c2:	3320      	adds	r3, #32
 80113c4:	766b      	strb	r3, [r5, #25]
 80113c6:	3310      	adds	r3, #16
 80113c8:	76ab      	strb	r3, [r5, #26]
 80113ca:	9707      	str	r7, [sp, #28]
 80113cc:	9f03      	ldr	r7, [sp, #12]
 80113ce:	783b      	ldrb	r3, [r7, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <_vfiprintf_r+0x98>
 80113d4:	2b25      	cmp	r3, #37	; 0x25
 80113d6:	d14e      	bne.n	8011476 <_vfiprintf_r+0x136>
 80113d8:	9b03      	ldr	r3, [sp, #12]
 80113da:	1afb      	subs	r3, r7, r3
 80113dc:	9305      	str	r3, [sp, #20]
 80113de:	9b03      	ldr	r3, [sp, #12]
 80113e0:	429f      	cmp	r7, r3
 80113e2:	d00d      	beq.n	8011400 <_vfiprintf_r+0xc0>
 80113e4:	9b05      	ldr	r3, [sp, #20]
 80113e6:	0021      	movs	r1, r4
 80113e8:	0030      	movs	r0, r6
 80113ea:	9a03      	ldr	r2, [sp, #12]
 80113ec:	f7ff ff95 	bl	801131a <__sfputs_r>
 80113f0:	1c43      	adds	r3, r0, #1
 80113f2:	d100      	bne.n	80113f6 <_vfiprintf_r+0xb6>
 80113f4:	e0b5      	b.n	8011562 <_vfiprintf_r+0x222>
 80113f6:	696a      	ldr	r2, [r5, #20]
 80113f8:	9b05      	ldr	r3, [sp, #20]
 80113fa:	4694      	mov	ip, r2
 80113fc:	4463      	add	r3, ip
 80113fe:	616b      	str	r3, [r5, #20]
 8011400:	783b      	ldrb	r3, [r7, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d100      	bne.n	8011408 <_vfiprintf_r+0xc8>
 8011406:	e0ac      	b.n	8011562 <_vfiprintf_r+0x222>
 8011408:	2201      	movs	r2, #1
 801140a:	1c7b      	adds	r3, r7, #1
 801140c:	9303      	str	r3, [sp, #12]
 801140e:	2300      	movs	r3, #0
 8011410:	4252      	negs	r2, r2
 8011412:	606a      	str	r2, [r5, #4]
 8011414:	a904      	add	r1, sp, #16
 8011416:	3254      	adds	r2, #84	; 0x54
 8011418:	1852      	adds	r2, r2, r1
 801141a:	602b      	str	r3, [r5, #0]
 801141c:	60eb      	str	r3, [r5, #12]
 801141e:	60ab      	str	r3, [r5, #8]
 8011420:	7013      	strb	r3, [r2, #0]
 8011422:	65ab      	str	r3, [r5, #88]	; 0x58
 8011424:	9b03      	ldr	r3, [sp, #12]
 8011426:	2205      	movs	r2, #5
 8011428:	7819      	ldrb	r1, [r3, #0]
 801142a:	485d      	ldr	r0, [pc, #372]	; (80115a0 <_vfiprintf_r+0x260>)
 801142c:	f000 faee 	bl	8011a0c <memchr>
 8011430:	9b03      	ldr	r3, [sp, #12]
 8011432:	1c5f      	adds	r7, r3, #1
 8011434:	2800      	cmp	r0, #0
 8011436:	d120      	bne.n	801147a <_vfiprintf_r+0x13a>
 8011438:	682a      	ldr	r2, [r5, #0]
 801143a:	06d3      	lsls	r3, r2, #27
 801143c:	d504      	bpl.n	8011448 <_vfiprintf_r+0x108>
 801143e:	2353      	movs	r3, #83	; 0x53
 8011440:	a904      	add	r1, sp, #16
 8011442:	185b      	adds	r3, r3, r1
 8011444:	2120      	movs	r1, #32
 8011446:	7019      	strb	r1, [r3, #0]
 8011448:	0713      	lsls	r3, r2, #28
 801144a:	d504      	bpl.n	8011456 <_vfiprintf_r+0x116>
 801144c:	2353      	movs	r3, #83	; 0x53
 801144e:	a904      	add	r1, sp, #16
 8011450:	185b      	adds	r3, r3, r1
 8011452:	212b      	movs	r1, #43	; 0x2b
 8011454:	7019      	strb	r1, [r3, #0]
 8011456:	9b03      	ldr	r3, [sp, #12]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b2a      	cmp	r3, #42	; 0x2a
 801145c:	d016      	beq.n	801148c <_vfiprintf_r+0x14c>
 801145e:	2100      	movs	r1, #0
 8011460:	68eb      	ldr	r3, [r5, #12]
 8011462:	9f03      	ldr	r7, [sp, #12]
 8011464:	783a      	ldrb	r2, [r7, #0]
 8011466:	1c78      	adds	r0, r7, #1
 8011468:	3a30      	subs	r2, #48	; 0x30
 801146a:	4684      	mov	ip, r0
 801146c:	2a09      	cmp	r2, #9
 801146e:	d94f      	bls.n	8011510 <_vfiprintf_r+0x1d0>
 8011470:	2900      	cmp	r1, #0
 8011472:	d111      	bne.n	8011498 <_vfiprintf_r+0x158>
 8011474:	e017      	b.n	80114a6 <_vfiprintf_r+0x166>
 8011476:	3701      	adds	r7, #1
 8011478:	e7a9      	b.n	80113ce <_vfiprintf_r+0x8e>
 801147a:	4b49      	ldr	r3, [pc, #292]	; (80115a0 <_vfiprintf_r+0x260>)
 801147c:	682a      	ldr	r2, [r5, #0]
 801147e:	1ac0      	subs	r0, r0, r3
 8011480:	2301      	movs	r3, #1
 8011482:	4083      	lsls	r3, r0
 8011484:	4313      	orrs	r3, r2
 8011486:	602b      	str	r3, [r5, #0]
 8011488:	9703      	str	r7, [sp, #12]
 801148a:	e7cb      	b.n	8011424 <_vfiprintf_r+0xe4>
 801148c:	9b07      	ldr	r3, [sp, #28]
 801148e:	1d19      	adds	r1, r3, #4
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	9107      	str	r1, [sp, #28]
 8011494:	2b00      	cmp	r3, #0
 8011496:	db01      	blt.n	801149c <_vfiprintf_r+0x15c>
 8011498:	930b      	str	r3, [sp, #44]	; 0x2c
 801149a:	e004      	b.n	80114a6 <_vfiprintf_r+0x166>
 801149c:	425b      	negs	r3, r3
 801149e:	60eb      	str	r3, [r5, #12]
 80114a0:	2302      	movs	r3, #2
 80114a2:	4313      	orrs	r3, r2
 80114a4:	602b      	str	r3, [r5, #0]
 80114a6:	783b      	ldrb	r3, [r7, #0]
 80114a8:	2b2e      	cmp	r3, #46	; 0x2e
 80114aa:	d10a      	bne.n	80114c2 <_vfiprintf_r+0x182>
 80114ac:	787b      	ldrb	r3, [r7, #1]
 80114ae:	2b2a      	cmp	r3, #42	; 0x2a
 80114b0:	d137      	bne.n	8011522 <_vfiprintf_r+0x1e2>
 80114b2:	9b07      	ldr	r3, [sp, #28]
 80114b4:	3702      	adds	r7, #2
 80114b6:	1d1a      	adds	r2, r3, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	9207      	str	r2, [sp, #28]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	db2d      	blt.n	801151c <_vfiprintf_r+0x1dc>
 80114c0:	9309      	str	r3, [sp, #36]	; 0x24
 80114c2:	2203      	movs	r2, #3
 80114c4:	7839      	ldrb	r1, [r7, #0]
 80114c6:	4837      	ldr	r0, [pc, #220]	; (80115a4 <_vfiprintf_r+0x264>)
 80114c8:	f000 faa0 	bl	8011a0c <memchr>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d007      	beq.n	80114e0 <_vfiprintf_r+0x1a0>
 80114d0:	4b34      	ldr	r3, [pc, #208]	; (80115a4 <_vfiprintf_r+0x264>)
 80114d2:	682a      	ldr	r2, [r5, #0]
 80114d4:	1ac0      	subs	r0, r0, r3
 80114d6:	2340      	movs	r3, #64	; 0x40
 80114d8:	4083      	lsls	r3, r0
 80114da:	4313      	orrs	r3, r2
 80114dc:	3701      	adds	r7, #1
 80114de:	602b      	str	r3, [r5, #0]
 80114e0:	7839      	ldrb	r1, [r7, #0]
 80114e2:	1c7b      	adds	r3, r7, #1
 80114e4:	2206      	movs	r2, #6
 80114e6:	4830      	ldr	r0, [pc, #192]	; (80115a8 <_vfiprintf_r+0x268>)
 80114e8:	9303      	str	r3, [sp, #12]
 80114ea:	7629      	strb	r1, [r5, #24]
 80114ec:	f000 fa8e 	bl	8011a0c <memchr>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	d045      	beq.n	8011580 <_vfiprintf_r+0x240>
 80114f4:	4b2d      	ldr	r3, [pc, #180]	; (80115ac <_vfiprintf_r+0x26c>)
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d127      	bne.n	801154a <_vfiprintf_r+0x20a>
 80114fa:	2207      	movs	r2, #7
 80114fc:	9b07      	ldr	r3, [sp, #28]
 80114fe:	3307      	adds	r3, #7
 8011500:	4393      	bics	r3, r2
 8011502:	3308      	adds	r3, #8
 8011504:	9307      	str	r3, [sp, #28]
 8011506:	696b      	ldr	r3, [r5, #20]
 8011508:	9a04      	ldr	r2, [sp, #16]
 801150a:	189b      	adds	r3, r3, r2
 801150c:	616b      	str	r3, [r5, #20]
 801150e:	e75d      	b.n	80113cc <_vfiprintf_r+0x8c>
 8011510:	210a      	movs	r1, #10
 8011512:	434b      	muls	r3, r1
 8011514:	4667      	mov	r7, ip
 8011516:	189b      	adds	r3, r3, r2
 8011518:	3909      	subs	r1, #9
 801151a:	e7a3      	b.n	8011464 <_vfiprintf_r+0x124>
 801151c:	2301      	movs	r3, #1
 801151e:	425b      	negs	r3, r3
 8011520:	e7ce      	b.n	80114c0 <_vfiprintf_r+0x180>
 8011522:	2300      	movs	r3, #0
 8011524:	001a      	movs	r2, r3
 8011526:	3701      	adds	r7, #1
 8011528:	606b      	str	r3, [r5, #4]
 801152a:	7839      	ldrb	r1, [r7, #0]
 801152c:	1c78      	adds	r0, r7, #1
 801152e:	3930      	subs	r1, #48	; 0x30
 8011530:	4684      	mov	ip, r0
 8011532:	2909      	cmp	r1, #9
 8011534:	d903      	bls.n	801153e <_vfiprintf_r+0x1fe>
 8011536:	2b00      	cmp	r3, #0
 8011538:	d0c3      	beq.n	80114c2 <_vfiprintf_r+0x182>
 801153a:	9209      	str	r2, [sp, #36]	; 0x24
 801153c:	e7c1      	b.n	80114c2 <_vfiprintf_r+0x182>
 801153e:	230a      	movs	r3, #10
 8011540:	435a      	muls	r2, r3
 8011542:	4667      	mov	r7, ip
 8011544:	1852      	adds	r2, r2, r1
 8011546:	3b09      	subs	r3, #9
 8011548:	e7ef      	b.n	801152a <_vfiprintf_r+0x1ea>
 801154a:	ab07      	add	r3, sp, #28
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	0022      	movs	r2, r4
 8011550:	0029      	movs	r1, r5
 8011552:	0030      	movs	r0, r6
 8011554:	4b16      	ldr	r3, [pc, #88]	; (80115b0 <_vfiprintf_r+0x270>)
 8011556:	e000      	b.n	801155a <_vfiprintf_r+0x21a>
 8011558:	bf00      	nop
 801155a:	9004      	str	r0, [sp, #16]
 801155c:	9b04      	ldr	r3, [sp, #16]
 801155e:	3301      	adds	r3, #1
 8011560:	d1d1      	bne.n	8011506 <_vfiprintf_r+0x1c6>
 8011562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011564:	07db      	lsls	r3, r3, #31
 8011566:	d405      	bmi.n	8011574 <_vfiprintf_r+0x234>
 8011568:	89a3      	ldrh	r3, [r4, #12]
 801156a:	059b      	lsls	r3, r3, #22
 801156c:	d402      	bmi.n	8011574 <_vfiprintf_r+0x234>
 801156e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011570:	f7ff fcde 	bl	8010f30 <__retarget_lock_release_recursive>
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	065b      	lsls	r3, r3, #25
 8011578:	d500      	bpl.n	801157c <_vfiprintf_r+0x23c>
 801157a:	e70a      	b.n	8011392 <_vfiprintf_r+0x52>
 801157c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801157e:	e70a      	b.n	8011396 <_vfiprintf_r+0x56>
 8011580:	ab07      	add	r3, sp, #28
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	0022      	movs	r2, r4
 8011586:	0029      	movs	r1, r5
 8011588:	0030      	movs	r0, r6
 801158a:	4b09      	ldr	r3, [pc, #36]	; (80115b0 <_vfiprintf_r+0x270>)
 801158c:	f000 f882 	bl	8011694 <_printf_i>
 8011590:	e7e3      	b.n	801155a <_vfiprintf_r+0x21a>
 8011592:	46c0      	nop			; (mov r8, r8)
 8011594:	0801585c 	.word	0x0801585c
 8011598:	0801587c 	.word	0x0801587c
 801159c:	0801583c 	.word	0x0801583c
 80115a0:	0801589c 	.word	0x0801589c
 80115a4:	080158a2 	.word	0x080158a2
 80115a8:	080158a6 	.word	0x080158a6
 80115ac:	00000000 	.word	0x00000000
 80115b0:	0801131b 	.word	0x0801131b

080115b4 <_printf_common>:
 80115b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115b6:	0015      	movs	r5, r2
 80115b8:	9301      	str	r3, [sp, #4]
 80115ba:	688a      	ldr	r2, [r1, #8]
 80115bc:	690b      	ldr	r3, [r1, #16]
 80115be:	000c      	movs	r4, r1
 80115c0:	9000      	str	r0, [sp, #0]
 80115c2:	4293      	cmp	r3, r2
 80115c4:	da00      	bge.n	80115c8 <_printf_common+0x14>
 80115c6:	0013      	movs	r3, r2
 80115c8:	0022      	movs	r2, r4
 80115ca:	602b      	str	r3, [r5, #0]
 80115cc:	3243      	adds	r2, #67	; 0x43
 80115ce:	7812      	ldrb	r2, [r2, #0]
 80115d0:	2a00      	cmp	r2, #0
 80115d2:	d001      	beq.n	80115d8 <_printf_common+0x24>
 80115d4:	3301      	adds	r3, #1
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	069b      	lsls	r3, r3, #26
 80115dc:	d502      	bpl.n	80115e4 <_printf_common+0x30>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	3302      	adds	r3, #2
 80115e2:	602b      	str	r3, [r5, #0]
 80115e4:	6822      	ldr	r2, [r4, #0]
 80115e6:	2306      	movs	r3, #6
 80115e8:	0017      	movs	r7, r2
 80115ea:	401f      	ands	r7, r3
 80115ec:	421a      	tst	r2, r3
 80115ee:	d027      	beq.n	8011640 <_printf_common+0x8c>
 80115f0:	0023      	movs	r3, r4
 80115f2:	3343      	adds	r3, #67	; 0x43
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	1e5a      	subs	r2, r3, #1
 80115f8:	4193      	sbcs	r3, r2
 80115fa:	6822      	ldr	r2, [r4, #0]
 80115fc:	0692      	lsls	r2, r2, #26
 80115fe:	d430      	bmi.n	8011662 <_printf_common+0xae>
 8011600:	0022      	movs	r2, r4
 8011602:	9901      	ldr	r1, [sp, #4]
 8011604:	9800      	ldr	r0, [sp, #0]
 8011606:	9e08      	ldr	r6, [sp, #32]
 8011608:	3243      	adds	r2, #67	; 0x43
 801160a:	47b0      	blx	r6
 801160c:	1c43      	adds	r3, r0, #1
 801160e:	d025      	beq.n	801165c <_printf_common+0xa8>
 8011610:	2306      	movs	r3, #6
 8011612:	6820      	ldr	r0, [r4, #0]
 8011614:	682a      	ldr	r2, [r5, #0]
 8011616:	68e1      	ldr	r1, [r4, #12]
 8011618:	2500      	movs	r5, #0
 801161a:	4003      	ands	r3, r0
 801161c:	2b04      	cmp	r3, #4
 801161e:	d103      	bne.n	8011628 <_printf_common+0x74>
 8011620:	1a8d      	subs	r5, r1, r2
 8011622:	43eb      	mvns	r3, r5
 8011624:	17db      	asrs	r3, r3, #31
 8011626:	401d      	ands	r5, r3
 8011628:	68a3      	ldr	r3, [r4, #8]
 801162a:	6922      	ldr	r2, [r4, #16]
 801162c:	4293      	cmp	r3, r2
 801162e:	dd01      	ble.n	8011634 <_printf_common+0x80>
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	18ed      	adds	r5, r5, r3
 8011634:	2700      	movs	r7, #0
 8011636:	42bd      	cmp	r5, r7
 8011638:	d120      	bne.n	801167c <_printf_common+0xc8>
 801163a:	2000      	movs	r0, #0
 801163c:	e010      	b.n	8011660 <_printf_common+0xac>
 801163e:	3701      	adds	r7, #1
 8011640:	68e3      	ldr	r3, [r4, #12]
 8011642:	682a      	ldr	r2, [r5, #0]
 8011644:	1a9b      	subs	r3, r3, r2
 8011646:	42bb      	cmp	r3, r7
 8011648:	ddd2      	ble.n	80115f0 <_printf_common+0x3c>
 801164a:	0022      	movs	r2, r4
 801164c:	2301      	movs	r3, #1
 801164e:	9901      	ldr	r1, [sp, #4]
 8011650:	9800      	ldr	r0, [sp, #0]
 8011652:	9e08      	ldr	r6, [sp, #32]
 8011654:	3219      	adds	r2, #25
 8011656:	47b0      	blx	r6
 8011658:	1c43      	adds	r3, r0, #1
 801165a:	d1f0      	bne.n	801163e <_printf_common+0x8a>
 801165c:	2001      	movs	r0, #1
 801165e:	4240      	negs	r0, r0
 8011660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011662:	2030      	movs	r0, #48	; 0x30
 8011664:	18e1      	adds	r1, r4, r3
 8011666:	3143      	adds	r1, #67	; 0x43
 8011668:	7008      	strb	r0, [r1, #0]
 801166a:	0021      	movs	r1, r4
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	3145      	adds	r1, #69	; 0x45
 8011670:	7809      	ldrb	r1, [r1, #0]
 8011672:	18a2      	adds	r2, r4, r2
 8011674:	3243      	adds	r2, #67	; 0x43
 8011676:	3302      	adds	r3, #2
 8011678:	7011      	strb	r1, [r2, #0]
 801167a:	e7c1      	b.n	8011600 <_printf_common+0x4c>
 801167c:	0022      	movs	r2, r4
 801167e:	2301      	movs	r3, #1
 8011680:	9901      	ldr	r1, [sp, #4]
 8011682:	9800      	ldr	r0, [sp, #0]
 8011684:	9e08      	ldr	r6, [sp, #32]
 8011686:	321a      	adds	r2, #26
 8011688:	47b0      	blx	r6
 801168a:	1c43      	adds	r3, r0, #1
 801168c:	d0e6      	beq.n	801165c <_printf_common+0xa8>
 801168e:	3701      	adds	r7, #1
 8011690:	e7d1      	b.n	8011636 <_printf_common+0x82>
	...

08011694 <_printf_i>:
 8011694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011696:	b08b      	sub	sp, #44	; 0x2c
 8011698:	9206      	str	r2, [sp, #24]
 801169a:	000a      	movs	r2, r1
 801169c:	3243      	adds	r2, #67	; 0x43
 801169e:	9307      	str	r3, [sp, #28]
 80116a0:	9005      	str	r0, [sp, #20]
 80116a2:	9204      	str	r2, [sp, #16]
 80116a4:	7e0a      	ldrb	r2, [r1, #24]
 80116a6:	000c      	movs	r4, r1
 80116a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116aa:	2a78      	cmp	r2, #120	; 0x78
 80116ac:	d806      	bhi.n	80116bc <_printf_i+0x28>
 80116ae:	2a62      	cmp	r2, #98	; 0x62
 80116b0:	d808      	bhi.n	80116c4 <_printf_i+0x30>
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	d100      	bne.n	80116b8 <_printf_i+0x24>
 80116b6:	e0c0      	b.n	801183a <_printf_i+0x1a6>
 80116b8:	2a58      	cmp	r2, #88	; 0x58
 80116ba:	d052      	beq.n	8011762 <_printf_i+0xce>
 80116bc:	0026      	movs	r6, r4
 80116be:	3642      	adds	r6, #66	; 0x42
 80116c0:	7032      	strb	r2, [r6, #0]
 80116c2:	e022      	b.n	801170a <_printf_i+0x76>
 80116c4:	0010      	movs	r0, r2
 80116c6:	3863      	subs	r0, #99	; 0x63
 80116c8:	2815      	cmp	r0, #21
 80116ca:	d8f7      	bhi.n	80116bc <_printf_i+0x28>
 80116cc:	f7ee fd18 	bl	8000100 <__gnu_thumb1_case_shi>
 80116d0:	001f0016 	.word	0x001f0016
 80116d4:	fff6fff6 	.word	0xfff6fff6
 80116d8:	fff6fff6 	.word	0xfff6fff6
 80116dc:	fff6001f 	.word	0xfff6001f
 80116e0:	fff6fff6 	.word	0xfff6fff6
 80116e4:	00a8fff6 	.word	0x00a8fff6
 80116e8:	009a0036 	.word	0x009a0036
 80116ec:	fff6fff6 	.word	0xfff6fff6
 80116f0:	fff600b9 	.word	0xfff600b9
 80116f4:	fff60036 	.word	0xfff60036
 80116f8:	009efff6 	.word	0x009efff6
 80116fc:	0026      	movs	r6, r4
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	3642      	adds	r6, #66	; 0x42
 8011702:	1d11      	adds	r1, r2, #4
 8011704:	6019      	str	r1, [r3, #0]
 8011706:	6813      	ldr	r3, [r2, #0]
 8011708:	7033      	strb	r3, [r6, #0]
 801170a:	2301      	movs	r3, #1
 801170c:	e0a7      	b.n	801185e <_printf_i+0x1ca>
 801170e:	6808      	ldr	r0, [r1, #0]
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	1d0a      	adds	r2, r1, #4
 8011714:	0605      	lsls	r5, r0, #24
 8011716:	d50b      	bpl.n	8011730 <_printf_i+0x9c>
 8011718:	680d      	ldr	r5, [r1, #0]
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	2d00      	cmp	r5, #0
 801171e:	da03      	bge.n	8011728 <_printf_i+0x94>
 8011720:	232d      	movs	r3, #45	; 0x2d
 8011722:	9a04      	ldr	r2, [sp, #16]
 8011724:	426d      	negs	r5, r5
 8011726:	7013      	strb	r3, [r2, #0]
 8011728:	4b61      	ldr	r3, [pc, #388]	; (80118b0 <_printf_i+0x21c>)
 801172a:	270a      	movs	r7, #10
 801172c:	9303      	str	r3, [sp, #12]
 801172e:	e032      	b.n	8011796 <_printf_i+0x102>
 8011730:	680d      	ldr	r5, [r1, #0]
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	0641      	lsls	r1, r0, #25
 8011736:	d5f1      	bpl.n	801171c <_printf_i+0x88>
 8011738:	b22d      	sxth	r5, r5
 801173a:	e7ef      	b.n	801171c <_printf_i+0x88>
 801173c:	680d      	ldr	r5, [r1, #0]
 801173e:	6819      	ldr	r1, [r3, #0]
 8011740:	1d08      	adds	r0, r1, #4
 8011742:	6018      	str	r0, [r3, #0]
 8011744:	062e      	lsls	r6, r5, #24
 8011746:	d501      	bpl.n	801174c <_printf_i+0xb8>
 8011748:	680d      	ldr	r5, [r1, #0]
 801174a:	e003      	b.n	8011754 <_printf_i+0xc0>
 801174c:	066d      	lsls	r5, r5, #25
 801174e:	d5fb      	bpl.n	8011748 <_printf_i+0xb4>
 8011750:	680d      	ldr	r5, [r1, #0]
 8011752:	b2ad      	uxth	r5, r5
 8011754:	4b56      	ldr	r3, [pc, #344]	; (80118b0 <_printf_i+0x21c>)
 8011756:	270a      	movs	r7, #10
 8011758:	9303      	str	r3, [sp, #12]
 801175a:	2a6f      	cmp	r2, #111	; 0x6f
 801175c:	d117      	bne.n	801178e <_printf_i+0xfa>
 801175e:	2708      	movs	r7, #8
 8011760:	e015      	b.n	801178e <_printf_i+0xfa>
 8011762:	3145      	adds	r1, #69	; 0x45
 8011764:	700a      	strb	r2, [r1, #0]
 8011766:	4a52      	ldr	r2, [pc, #328]	; (80118b0 <_printf_i+0x21c>)
 8011768:	9203      	str	r2, [sp, #12]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	6821      	ldr	r1, [r4, #0]
 801176e:	ca20      	ldmia	r2!, {r5}
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	0608      	lsls	r0, r1, #24
 8011774:	d550      	bpl.n	8011818 <_printf_i+0x184>
 8011776:	07cb      	lsls	r3, r1, #31
 8011778:	d502      	bpl.n	8011780 <_printf_i+0xec>
 801177a:	2320      	movs	r3, #32
 801177c:	4319      	orrs	r1, r3
 801177e:	6021      	str	r1, [r4, #0]
 8011780:	2710      	movs	r7, #16
 8011782:	2d00      	cmp	r5, #0
 8011784:	d103      	bne.n	801178e <_printf_i+0xfa>
 8011786:	2320      	movs	r3, #32
 8011788:	6822      	ldr	r2, [r4, #0]
 801178a:	439a      	bics	r2, r3
 801178c:	6022      	str	r2, [r4, #0]
 801178e:	0023      	movs	r3, r4
 8011790:	2200      	movs	r2, #0
 8011792:	3343      	adds	r3, #67	; 0x43
 8011794:	701a      	strb	r2, [r3, #0]
 8011796:	6863      	ldr	r3, [r4, #4]
 8011798:	60a3      	str	r3, [r4, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	db03      	blt.n	80117a6 <_printf_i+0x112>
 801179e:	2204      	movs	r2, #4
 80117a0:	6821      	ldr	r1, [r4, #0]
 80117a2:	4391      	bics	r1, r2
 80117a4:	6021      	str	r1, [r4, #0]
 80117a6:	2d00      	cmp	r5, #0
 80117a8:	d102      	bne.n	80117b0 <_printf_i+0x11c>
 80117aa:	9e04      	ldr	r6, [sp, #16]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d00c      	beq.n	80117ca <_printf_i+0x136>
 80117b0:	9e04      	ldr	r6, [sp, #16]
 80117b2:	0028      	movs	r0, r5
 80117b4:	0039      	movs	r1, r7
 80117b6:	f7ee fd33 	bl	8000220 <__aeabi_uidivmod>
 80117ba:	9b03      	ldr	r3, [sp, #12]
 80117bc:	3e01      	subs	r6, #1
 80117be:	5c5b      	ldrb	r3, [r3, r1]
 80117c0:	7033      	strb	r3, [r6, #0]
 80117c2:	002b      	movs	r3, r5
 80117c4:	0005      	movs	r5, r0
 80117c6:	429f      	cmp	r7, r3
 80117c8:	d9f3      	bls.n	80117b2 <_printf_i+0x11e>
 80117ca:	2f08      	cmp	r7, #8
 80117cc:	d109      	bne.n	80117e2 <_printf_i+0x14e>
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	07db      	lsls	r3, r3, #31
 80117d2:	d506      	bpl.n	80117e2 <_printf_i+0x14e>
 80117d4:	6863      	ldr	r3, [r4, #4]
 80117d6:	6922      	ldr	r2, [r4, #16]
 80117d8:	4293      	cmp	r3, r2
 80117da:	dc02      	bgt.n	80117e2 <_printf_i+0x14e>
 80117dc:	2330      	movs	r3, #48	; 0x30
 80117de:	3e01      	subs	r6, #1
 80117e0:	7033      	strb	r3, [r6, #0]
 80117e2:	9b04      	ldr	r3, [sp, #16]
 80117e4:	1b9b      	subs	r3, r3, r6
 80117e6:	6123      	str	r3, [r4, #16]
 80117e8:	9b07      	ldr	r3, [sp, #28]
 80117ea:	0021      	movs	r1, r4
 80117ec:	9300      	str	r3, [sp, #0]
 80117ee:	9805      	ldr	r0, [sp, #20]
 80117f0:	9b06      	ldr	r3, [sp, #24]
 80117f2:	aa09      	add	r2, sp, #36	; 0x24
 80117f4:	f7ff fede 	bl	80115b4 <_printf_common>
 80117f8:	1c43      	adds	r3, r0, #1
 80117fa:	d135      	bne.n	8011868 <_printf_i+0x1d4>
 80117fc:	2001      	movs	r0, #1
 80117fe:	4240      	negs	r0, r0
 8011800:	b00b      	add	sp, #44	; 0x2c
 8011802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011804:	2220      	movs	r2, #32
 8011806:	6809      	ldr	r1, [r1, #0]
 8011808:	430a      	orrs	r2, r1
 801180a:	6022      	str	r2, [r4, #0]
 801180c:	0022      	movs	r2, r4
 801180e:	2178      	movs	r1, #120	; 0x78
 8011810:	3245      	adds	r2, #69	; 0x45
 8011812:	7011      	strb	r1, [r2, #0]
 8011814:	4a27      	ldr	r2, [pc, #156]	; (80118b4 <_printf_i+0x220>)
 8011816:	e7a7      	b.n	8011768 <_printf_i+0xd4>
 8011818:	0648      	lsls	r0, r1, #25
 801181a:	d5ac      	bpl.n	8011776 <_printf_i+0xe2>
 801181c:	b2ad      	uxth	r5, r5
 801181e:	e7aa      	b.n	8011776 <_printf_i+0xe2>
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	680d      	ldr	r5, [r1, #0]
 8011824:	1d10      	adds	r0, r2, #4
 8011826:	6949      	ldr	r1, [r1, #20]
 8011828:	6018      	str	r0, [r3, #0]
 801182a:	6813      	ldr	r3, [r2, #0]
 801182c:	062e      	lsls	r6, r5, #24
 801182e:	d501      	bpl.n	8011834 <_printf_i+0x1a0>
 8011830:	6019      	str	r1, [r3, #0]
 8011832:	e002      	b.n	801183a <_printf_i+0x1a6>
 8011834:	066d      	lsls	r5, r5, #25
 8011836:	d5fb      	bpl.n	8011830 <_printf_i+0x19c>
 8011838:	8019      	strh	r1, [r3, #0]
 801183a:	2300      	movs	r3, #0
 801183c:	9e04      	ldr	r6, [sp, #16]
 801183e:	6123      	str	r3, [r4, #16]
 8011840:	e7d2      	b.n	80117e8 <_printf_i+0x154>
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	1d11      	adds	r1, r2, #4
 8011846:	6019      	str	r1, [r3, #0]
 8011848:	6816      	ldr	r6, [r2, #0]
 801184a:	2100      	movs	r1, #0
 801184c:	0030      	movs	r0, r6
 801184e:	6862      	ldr	r2, [r4, #4]
 8011850:	f000 f8dc 	bl	8011a0c <memchr>
 8011854:	2800      	cmp	r0, #0
 8011856:	d001      	beq.n	801185c <_printf_i+0x1c8>
 8011858:	1b80      	subs	r0, r0, r6
 801185a:	6060      	str	r0, [r4, #4]
 801185c:	6863      	ldr	r3, [r4, #4]
 801185e:	6123      	str	r3, [r4, #16]
 8011860:	2300      	movs	r3, #0
 8011862:	9a04      	ldr	r2, [sp, #16]
 8011864:	7013      	strb	r3, [r2, #0]
 8011866:	e7bf      	b.n	80117e8 <_printf_i+0x154>
 8011868:	6923      	ldr	r3, [r4, #16]
 801186a:	0032      	movs	r2, r6
 801186c:	9906      	ldr	r1, [sp, #24]
 801186e:	9805      	ldr	r0, [sp, #20]
 8011870:	9d07      	ldr	r5, [sp, #28]
 8011872:	47a8      	blx	r5
 8011874:	1c43      	adds	r3, r0, #1
 8011876:	d0c1      	beq.n	80117fc <_printf_i+0x168>
 8011878:	6823      	ldr	r3, [r4, #0]
 801187a:	079b      	lsls	r3, r3, #30
 801187c:	d415      	bmi.n	80118aa <_printf_i+0x216>
 801187e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011880:	68e0      	ldr	r0, [r4, #12]
 8011882:	4298      	cmp	r0, r3
 8011884:	dabc      	bge.n	8011800 <_printf_i+0x16c>
 8011886:	0018      	movs	r0, r3
 8011888:	e7ba      	b.n	8011800 <_printf_i+0x16c>
 801188a:	0022      	movs	r2, r4
 801188c:	2301      	movs	r3, #1
 801188e:	9906      	ldr	r1, [sp, #24]
 8011890:	9805      	ldr	r0, [sp, #20]
 8011892:	9e07      	ldr	r6, [sp, #28]
 8011894:	3219      	adds	r2, #25
 8011896:	47b0      	blx	r6
 8011898:	1c43      	adds	r3, r0, #1
 801189a:	d0af      	beq.n	80117fc <_printf_i+0x168>
 801189c:	3501      	adds	r5, #1
 801189e:	68e3      	ldr	r3, [r4, #12]
 80118a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118a2:	1a9b      	subs	r3, r3, r2
 80118a4:	42ab      	cmp	r3, r5
 80118a6:	dcf0      	bgt.n	801188a <_printf_i+0x1f6>
 80118a8:	e7e9      	b.n	801187e <_printf_i+0x1ea>
 80118aa:	2500      	movs	r5, #0
 80118ac:	e7f7      	b.n	801189e <_printf_i+0x20a>
 80118ae:	46c0      	nop			; (mov r8, r8)
 80118b0:	080158ad 	.word	0x080158ad
 80118b4:	080158be 	.word	0x080158be

080118b8 <__sread>:
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	000c      	movs	r4, r1
 80118bc:	250e      	movs	r5, #14
 80118be:	5f49      	ldrsh	r1, [r1, r5]
 80118c0:	f000 f8f2 	bl	8011aa8 <_read_r>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	db03      	blt.n	80118d0 <__sread+0x18>
 80118c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80118ca:	181b      	adds	r3, r3, r0
 80118cc:	6563      	str	r3, [r4, #84]	; 0x54
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	4a02      	ldr	r2, [pc, #8]	; (80118dc <__sread+0x24>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	e7f9      	b.n	80118ce <__sread+0x16>
 80118da:	46c0      	nop			; (mov r8, r8)
 80118dc:	ffffefff 	.word	0xffffefff

080118e0 <__swrite>:
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e2:	001f      	movs	r7, r3
 80118e4:	898b      	ldrh	r3, [r1, #12]
 80118e6:	0005      	movs	r5, r0
 80118e8:	000c      	movs	r4, r1
 80118ea:	0016      	movs	r6, r2
 80118ec:	05db      	lsls	r3, r3, #23
 80118ee:	d505      	bpl.n	80118fc <__swrite+0x1c>
 80118f0:	230e      	movs	r3, #14
 80118f2:	5ec9      	ldrsh	r1, [r1, r3]
 80118f4:	2200      	movs	r2, #0
 80118f6:	2302      	movs	r3, #2
 80118f8:	f000 f874 	bl	80119e4 <_lseek_r>
 80118fc:	89a3      	ldrh	r3, [r4, #12]
 80118fe:	4a05      	ldr	r2, [pc, #20]	; (8011914 <__swrite+0x34>)
 8011900:	0028      	movs	r0, r5
 8011902:	4013      	ands	r3, r2
 8011904:	81a3      	strh	r3, [r4, #12]
 8011906:	0032      	movs	r2, r6
 8011908:	230e      	movs	r3, #14
 801190a:	5ee1      	ldrsh	r1, [r4, r3]
 801190c:	003b      	movs	r3, r7
 801190e:	f000 f81f 	bl	8011950 <_write_r>
 8011912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011914:	ffffefff 	.word	0xffffefff

08011918 <__sseek>:
 8011918:	b570      	push	{r4, r5, r6, lr}
 801191a:	000c      	movs	r4, r1
 801191c:	250e      	movs	r5, #14
 801191e:	5f49      	ldrsh	r1, [r1, r5]
 8011920:	f000 f860 	bl	80119e4 <_lseek_r>
 8011924:	89a3      	ldrh	r3, [r4, #12]
 8011926:	1c42      	adds	r2, r0, #1
 8011928:	d103      	bne.n	8011932 <__sseek+0x1a>
 801192a:	4a05      	ldr	r2, [pc, #20]	; (8011940 <__sseek+0x28>)
 801192c:	4013      	ands	r3, r2
 801192e:	81a3      	strh	r3, [r4, #12]
 8011930:	bd70      	pop	{r4, r5, r6, pc}
 8011932:	2280      	movs	r2, #128	; 0x80
 8011934:	0152      	lsls	r2, r2, #5
 8011936:	4313      	orrs	r3, r2
 8011938:	81a3      	strh	r3, [r4, #12]
 801193a:	6560      	str	r0, [r4, #84]	; 0x54
 801193c:	e7f8      	b.n	8011930 <__sseek+0x18>
 801193e:	46c0      	nop			; (mov r8, r8)
 8011940:	ffffefff 	.word	0xffffefff

08011944 <__sclose>:
 8011944:	b510      	push	{r4, lr}
 8011946:	230e      	movs	r3, #14
 8011948:	5ec9      	ldrsh	r1, [r1, r3]
 801194a:	f000 f815 	bl	8011978 <_close_r>
 801194e:	bd10      	pop	{r4, pc}

08011950 <_write_r>:
 8011950:	b570      	push	{r4, r5, r6, lr}
 8011952:	0004      	movs	r4, r0
 8011954:	0008      	movs	r0, r1
 8011956:	0011      	movs	r1, r2
 8011958:	001a      	movs	r2, r3
 801195a:	2300      	movs	r3, #0
 801195c:	4d05      	ldr	r5, [pc, #20]	; (8011974 <_write_r+0x24>)
 801195e:	602b      	str	r3, [r5, #0]
 8011960:	f7fe fd77 	bl	8010452 <_write>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d103      	bne.n	8011970 <_write_r+0x20>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d000      	beq.n	8011970 <_write_r+0x20>
 801196e:	6023      	str	r3, [r4, #0]
 8011970:	bd70      	pop	{r4, r5, r6, pc}
 8011972:	46c0      	nop			; (mov r8, r8)
 8011974:	200008e8 	.word	0x200008e8

08011978 <_close_r>:
 8011978:	2300      	movs	r3, #0
 801197a:	b570      	push	{r4, r5, r6, lr}
 801197c:	4d06      	ldr	r5, [pc, #24]	; (8011998 <_close_r+0x20>)
 801197e:	0004      	movs	r4, r0
 8011980:	0008      	movs	r0, r1
 8011982:	602b      	str	r3, [r5, #0]
 8011984:	f7fe fd81 	bl	801048a <_close>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d103      	bne.n	8011994 <_close_r+0x1c>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d000      	beq.n	8011994 <_close_r+0x1c>
 8011992:	6023      	str	r3, [r4, #0]
 8011994:	bd70      	pop	{r4, r5, r6, pc}
 8011996:	46c0      	nop			; (mov r8, r8)
 8011998:	200008e8 	.word	0x200008e8

0801199c <_fstat_r>:
 801199c:	2300      	movs	r3, #0
 801199e:	b570      	push	{r4, r5, r6, lr}
 80119a0:	4d06      	ldr	r5, [pc, #24]	; (80119bc <_fstat_r+0x20>)
 80119a2:	0004      	movs	r4, r0
 80119a4:	0008      	movs	r0, r1
 80119a6:	0011      	movs	r1, r2
 80119a8:	602b      	str	r3, [r5, #0]
 80119aa:	f7fe fd78 	bl	801049e <_fstat>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d103      	bne.n	80119ba <_fstat_r+0x1e>
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d000      	beq.n	80119ba <_fstat_r+0x1e>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	200008e8 	.word	0x200008e8

080119c0 <_isatty_r>:
 80119c0:	2300      	movs	r3, #0
 80119c2:	b570      	push	{r4, r5, r6, lr}
 80119c4:	4d06      	ldr	r5, [pc, #24]	; (80119e0 <_isatty_r+0x20>)
 80119c6:	0004      	movs	r4, r0
 80119c8:	0008      	movs	r0, r1
 80119ca:	602b      	str	r3, [r5, #0]
 80119cc:	f7fe fd75 	bl	80104ba <_isatty>
 80119d0:	1c43      	adds	r3, r0, #1
 80119d2:	d103      	bne.n	80119dc <_isatty_r+0x1c>
 80119d4:	682b      	ldr	r3, [r5, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d000      	beq.n	80119dc <_isatty_r+0x1c>
 80119da:	6023      	str	r3, [r4, #0]
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
 80119de:	46c0      	nop			; (mov r8, r8)
 80119e0:	200008e8 	.word	0x200008e8

080119e4 <_lseek_r>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	0004      	movs	r4, r0
 80119e8:	0008      	movs	r0, r1
 80119ea:	0011      	movs	r1, r2
 80119ec:	001a      	movs	r2, r3
 80119ee:	2300      	movs	r3, #0
 80119f0:	4d05      	ldr	r5, [pc, #20]	; (8011a08 <_lseek_r+0x24>)
 80119f2:	602b      	str	r3, [r5, #0]
 80119f4:	f7fe fd6a 	bl	80104cc <_lseek>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d103      	bne.n	8011a04 <_lseek_r+0x20>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d000      	beq.n	8011a04 <_lseek_r+0x20>
 8011a02:	6023      	str	r3, [r4, #0]
 8011a04:	bd70      	pop	{r4, r5, r6, pc}
 8011a06:	46c0      	nop			; (mov r8, r8)
 8011a08:	200008e8 	.word	0x200008e8

08011a0c <memchr>:
 8011a0c:	b2c9      	uxtb	r1, r1
 8011a0e:	1882      	adds	r2, r0, r2
 8011a10:	4290      	cmp	r0, r2
 8011a12:	d101      	bne.n	8011a18 <memchr+0xc>
 8011a14:	2000      	movs	r0, #0
 8011a16:	4770      	bx	lr
 8011a18:	7803      	ldrb	r3, [r0, #0]
 8011a1a:	428b      	cmp	r3, r1
 8011a1c:	d0fb      	beq.n	8011a16 <memchr+0xa>
 8011a1e:	3001      	adds	r0, #1
 8011a20:	e7f6      	b.n	8011a10 <memchr+0x4>

08011a22 <memcpy>:
 8011a22:	2300      	movs	r3, #0
 8011a24:	b510      	push	{r4, lr}
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d100      	bne.n	8011a2c <memcpy+0xa>
 8011a2a:	bd10      	pop	{r4, pc}
 8011a2c:	5ccc      	ldrb	r4, [r1, r3]
 8011a2e:	54c4      	strb	r4, [r0, r3]
 8011a30:	3301      	adds	r3, #1
 8011a32:	e7f8      	b.n	8011a26 <memcpy+0x4>

08011a34 <memmove>:
 8011a34:	b510      	push	{r4, lr}
 8011a36:	4288      	cmp	r0, r1
 8011a38:	d902      	bls.n	8011a40 <memmove+0xc>
 8011a3a:	188b      	adds	r3, r1, r2
 8011a3c:	4298      	cmp	r0, r3
 8011a3e:	d303      	bcc.n	8011a48 <memmove+0x14>
 8011a40:	2300      	movs	r3, #0
 8011a42:	e007      	b.n	8011a54 <memmove+0x20>
 8011a44:	5c8b      	ldrb	r3, [r1, r2]
 8011a46:	5483      	strb	r3, [r0, r2]
 8011a48:	3a01      	subs	r2, #1
 8011a4a:	d2fb      	bcs.n	8011a44 <memmove+0x10>
 8011a4c:	bd10      	pop	{r4, pc}
 8011a4e:	5ccc      	ldrb	r4, [r1, r3]
 8011a50:	54c4      	strb	r4, [r0, r3]
 8011a52:	3301      	adds	r3, #1
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d1fa      	bne.n	8011a4e <memmove+0x1a>
 8011a58:	e7f8      	b.n	8011a4c <memmove+0x18>

08011a5a <_realloc_r>:
 8011a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5c:	0007      	movs	r7, r0
 8011a5e:	000d      	movs	r5, r1
 8011a60:	0016      	movs	r6, r2
 8011a62:	2900      	cmp	r1, #0
 8011a64:	d105      	bne.n	8011a72 <_realloc_r+0x18>
 8011a66:	0011      	movs	r1, r2
 8011a68:	f7fe fe9e 	bl	80107a8 <_malloc_r>
 8011a6c:	0004      	movs	r4, r0
 8011a6e:	0020      	movs	r0, r4
 8011a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a72:	2a00      	cmp	r2, #0
 8011a74:	d103      	bne.n	8011a7e <_realloc_r+0x24>
 8011a76:	f7fe fe4d 	bl	8010714 <_free_r>
 8011a7a:	0034      	movs	r4, r6
 8011a7c:	e7f7      	b.n	8011a6e <_realloc_r+0x14>
 8011a7e:	f000 f827 	bl	8011ad0 <_malloc_usable_size_r>
 8011a82:	002c      	movs	r4, r5
 8011a84:	42b0      	cmp	r0, r6
 8011a86:	d2f2      	bcs.n	8011a6e <_realloc_r+0x14>
 8011a88:	0031      	movs	r1, r6
 8011a8a:	0038      	movs	r0, r7
 8011a8c:	f7fe fe8c 	bl	80107a8 <_malloc_r>
 8011a90:	1e04      	subs	r4, r0, #0
 8011a92:	d0ec      	beq.n	8011a6e <_realloc_r+0x14>
 8011a94:	0029      	movs	r1, r5
 8011a96:	0032      	movs	r2, r6
 8011a98:	f7ff ffc3 	bl	8011a22 <memcpy>
 8011a9c:	0029      	movs	r1, r5
 8011a9e:	0038      	movs	r0, r7
 8011aa0:	f7fe fe38 	bl	8010714 <_free_r>
 8011aa4:	e7e3      	b.n	8011a6e <_realloc_r+0x14>
	...

08011aa8 <_read_r>:
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	0004      	movs	r4, r0
 8011aac:	0008      	movs	r0, r1
 8011aae:	0011      	movs	r1, r2
 8011ab0:	001a      	movs	r2, r3
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	4d05      	ldr	r5, [pc, #20]	; (8011acc <_read_r+0x24>)
 8011ab6:	602b      	str	r3, [r5, #0]
 8011ab8:	f7fe fcae 	bl	8010418 <_read>
 8011abc:	1c43      	adds	r3, r0, #1
 8011abe:	d103      	bne.n	8011ac8 <_read_r+0x20>
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d000      	beq.n	8011ac8 <_read_r+0x20>
 8011ac6:	6023      	str	r3, [r4, #0]
 8011ac8:	bd70      	pop	{r4, r5, r6, pc}
 8011aca:	46c0      	nop			; (mov r8, r8)
 8011acc:	200008e8 	.word	0x200008e8

08011ad0 <_malloc_usable_size_r>:
 8011ad0:	1f0b      	subs	r3, r1, #4
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	1f18      	subs	r0, r3, #4
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	da01      	bge.n	8011ade <_malloc_usable_size_r+0xe>
 8011ada:	580b      	ldr	r3, [r1, r0]
 8011adc:	18c0      	adds	r0, r0, r3
 8011ade:	4770      	bx	lr

08011ae0 <cos>:
 8011ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ae2:	4a1e      	ldr	r2, [pc, #120]	; (8011b5c <cos+0x7c>)
 8011ae4:	004b      	lsls	r3, r1, #1
 8011ae6:	b087      	sub	sp, #28
 8011ae8:	085b      	lsrs	r3, r3, #1
 8011aea:	4293      	cmp	r3, r2
 8011aec:	dc04      	bgt.n	8011af8 <cos+0x18>
 8011aee:	2200      	movs	r2, #0
 8011af0:	2300      	movs	r3, #0
 8011af2:	f000 fc57 	bl	80123a4 <__kernel_cos>
 8011af6:	e006      	b.n	8011b06 <cos+0x26>
 8011af8:	4a19      	ldr	r2, [pc, #100]	; (8011b60 <cos+0x80>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	dd05      	ble.n	8011b0a <cos+0x2a>
 8011afe:	0002      	movs	r2, r0
 8011b00:	000b      	movs	r3, r1
 8011b02:	f7f0 fe5b 	bl	80027bc <__aeabi_dsub>
 8011b06:	b007      	add	sp, #28
 8011b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b0a:	aa02      	add	r2, sp, #8
 8011b0c:	f000 fa5e 	bl	8011fcc <__ieee754_rem_pio2>
 8011b10:	9c04      	ldr	r4, [sp, #16]
 8011b12:	9d05      	ldr	r5, [sp, #20]
 8011b14:	2303      	movs	r3, #3
 8011b16:	4003      	ands	r3, r0
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d008      	beq.n	8011b2e <cos+0x4e>
 8011b1c:	9802      	ldr	r0, [sp, #8]
 8011b1e:	9903      	ldr	r1, [sp, #12]
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d00f      	beq.n	8011b44 <cos+0x64>
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d112      	bne.n	8011b4e <cos+0x6e>
 8011b28:	0022      	movs	r2, r4
 8011b2a:	002b      	movs	r3, r5
 8011b2c:	e7e1      	b.n	8011af2 <cos+0x12>
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	0022      	movs	r2, r4
 8011b32:	9802      	ldr	r0, [sp, #8]
 8011b34:	9903      	ldr	r1, [sp, #12]
 8011b36:	002b      	movs	r3, r5
 8011b38:	f001 f86a 	bl	8012c10 <__kernel_sin>
 8011b3c:	2380      	movs	r3, #128	; 0x80
 8011b3e:	061b      	lsls	r3, r3, #24
 8011b40:	18c9      	adds	r1, r1, r3
 8011b42:	e7e0      	b.n	8011b06 <cos+0x26>
 8011b44:	0022      	movs	r2, r4
 8011b46:	002b      	movs	r3, r5
 8011b48:	f000 fc2c 	bl	80123a4 <__kernel_cos>
 8011b4c:	e7f6      	b.n	8011b3c <cos+0x5c>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	0022      	movs	r2, r4
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	002b      	movs	r3, r5
 8011b56:	f001 f85b 	bl	8012c10 <__kernel_sin>
 8011b5a:	e7d4      	b.n	8011b06 <cos+0x26>
 8011b5c:	3fe921fb 	.word	0x3fe921fb
 8011b60:	7fefffff 	.word	0x7fefffff

08011b64 <sin>:
 8011b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b66:	4a20      	ldr	r2, [pc, #128]	; (8011be8 <sin+0x84>)
 8011b68:	004b      	lsls	r3, r1, #1
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	085b      	lsrs	r3, r3, #1
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	dc06      	bgt.n	8011b80 <sin+0x1c>
 8011b72:	2300      	movs	r3, #0
 8011b74:	2200      	movs	r2, #0
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	2300      	movs	r3, #0
 8011b7a:	f001 f849 	bl	8012c10 <__kernel_sin>
 8011b7e:	e006      	b.n	8011b8e <sin+0x2a>
 8011b80:	4a1a      	ldr	r2, [pc, #104]	; (8011bec <sin+0x88>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	dd05      	ble.n	8011b92 <sin+0x2e>
 8011b86:	0002      	movs	r2, r0
 8011b88:	000b      	movs	r3, r1
 8011b8a:	f7f0 fe17 	bl	80027bc <__aeabi_dsub>
 8011b8e:	b007      	add	sp, #28
 8011b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b92:	aa02      	add	r2, sp, #8
 8011b94:	f000 fa1a 	bl	8011fcc <__ieee754_rem_pio2>
 8011b98:	9c04      	ldr	r4, [sp, #16]
 8011b9a:	9d05      	ldr	r5, [sp, #20]
 8011b9c:	2303      	movs	r3, #3
 8011b9e:	4003      	ands	r3, r0
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d00a      	beq.n	8011bba <sin+0x56>
 8011ba4:	9802      	ldr	r0, [sp, #8]
 8011ba6:	9903      	ldr	r1, [sp, #12]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d00d      	beq.n	8011bc8 <sin+0x64>
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d115      	bne.n	8011bdc <sin+0x78>
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	0022      	movs	r2, r4
 8011bb6:	002b      	movs	r3, r5
 8011bb8:	e7df      	b.n	8011b7a <sin+0x16>
 8011bba:	0022      	movs	r2, r4
 8011bbc:	9802      	ldr	r0, [sp, #8]
 8011bbe:	9903      	ldr	r1, [sp, #12]
 8011bc0:	002b      	movs	r3, r5
 8011bc2:	f000 fbef 	bl	80123a4 <__kernel_cos>
 8011bc6:	e7e2      	b.n	8011b8e <sin+0x2a>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	0022      	movs	r2, r4
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	002b      	movs	r3, r5
 8011bd0:	f001 f81e 	bl	8012c10 <__kernel_sin>
 8011bd4:	2380      	movs	r3, #128	; 0x80
 8011bd6:	061b      	lsls	r3, r3, #24
 8011bd8:	18c9      	adds	r1, r1, r3
 8011bda:	e7d8      	b.n	8011b8e <sin+0x2a>
 8011bdc:	0022      	movs	r2, r4
 8011bde:	002b      	movs	r3, r5
 8011be0:	f000 fbe0 	bl	80123a4 <__kernel_cos>
 8011be4:	e7f6      	b.n	8011bd4 <sin+0x70>
 8011be6:	46c0      	nop			; (mov r8, r8)
 8011be8:	3fe921fb 	.word	0x3fe921fb
 8011bec:	7fefffff 	.word	0x7fefffff

08011bf0 <log>:
 8011bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf2:	0004      	movs	r4, r0
 8011bf4:	000d      	movs	r5, r1
 8011bf6:	f000 f839 	bl	8011c6c <__ieee754_log>
 8011bfa:	4b19      	ldr	r3, [pc, #100]	; (8011c60 <log+0x70>)
 8011bfc:	0006      	movs	r6, r0
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	000f      	movs	r7, r1
 8011c02:	b25b      	sxtb	r3, r3
 8011c04:	3301      	adds	r3, #1
 8011c06:	d01d      	beq.n	8011c44 <log+0x54>
 8011c08:	0022      	movs	r2, r4
 8011c0a:	002b      	movs	r3, r5
 8011c0c:	0020      	movs	r0, r4
 8011c0e:	0029      	movs	r1, r5
 8011c10:	f7f1 f966 	bl	8002ee0 <__aeabi_dcmpun>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d115      	bne.n	8011c44 <log+0x54>
 8011c18:	2200      	movs	r2, #0
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	0020      	movs	r0, r4
 8011c1e:	0029      	movs	r1, r5
 8011c20:	f7ee fc18 	bl	8000454 <__aeabi_dcmpgt>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d10d      	bne.n	8011c44 <log+0x54>
 8011c28:	2200      	movs	r2, #0
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	0020      	movs	r0, r4
 8011c2e:	0029      	movs	r1, r5
 8011c30:	f7ee fbf6 	bl	8000420 <__aeabi_dcmpeq>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d008      	beq.n	8011c4a <log+0x5a>
 8011c38:	f7fe fd30 	bl	801069c <__errno>
 8011c3c:	2322      	movs	r3, #34	; 0x22
 8011c3e:	2600      	movs	r6, #0
 8011c40:	4f08      	ldr	r7, [pc, #32]	; (8011c64 <log+0x74>)
 8011c42:	6003      	str	r3, [r0, #0]
 8011c44:	0030      	movs	r0, r6
 8011c46:	0039      	movs	r1, r7
 8011c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c4a:	f7fe fd27 	bl	801069c <__errno>
 8011c4e:	2321      	movs	r3, #33	; 0x21
 8011c50:	6003      	str	r3, [r0, #0]
 8011c52:	4805      	ldr	r0, [pc, #20]	; (8011c68 <log+0x78>)
 8011c54:	f001 f916 	bl	8012e84 <nan>
 8011c58:	0006      	movs	r6, r0
 8011c5a:	000f      	movs	r7, r1
 8011c5c:	e7f2      	b.n	8011c44 <log+0x54>
 8011c5e:	46c0      	nop			; (mov r8, r8)
 8011c60:	200000e8 	.word	0x200000e8
 8011c64:	fff00000 	.word	0xfff00000
 8011c68:	080158a1 	.word	0x080158a1

08011c6c <__ieee754_log>:
 8011c6c:	2280      	movs	r2, #128	; 0x80
 8011c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c70:	000b      	movs	r3, r1
 8011c72:	b08d      	sub	sp, #52	; 0x34
 8011c74:	0352      	lsls	r2, r2, #13
 8011c76:	4291      	cmp	r1, r2
 8011c78:	da22      	bge.n	8011cc0 <__ieee754_log+0x54>
 8011c7a:	004a      	lsls	r2, r1, #1
 8011c7c:	0852      	lsrs	r2, r2, #1
 8011c7e:	4302      	orrs	r2, r0
 8011c80:	d107      	bne.n	8011c92 <__ieee754_log+0x26>
 8011c82:	2200      	movs	r2, #0
 8011c84:	2300      	movs	r3, #0
 8011c86:	2000      	movs	r0, #0
 8011c88:	49b3      	ldr	r1, [pc, #716]	; (8011f58 <__ieee754_log+0x2ec>)
 8011c8a:	f7ef ff25 	bl	8001ad8 <__aeabi_ddiv>
 8011c8e:	b00d      	add	sp, #52	; 0x34
 8011c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c92:	2900      	cmp	r1, #0
 8011c94:	da05      	bge.n	8011ca2 <__ieee754_log+0x36>
 8011c96:	0002      	movs	r2, r0
 8011c98:	f7f0 fd90 	bl	80027bc <__aeabi_dsub>
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e7f3      	b.n	8011c8a <__ieee754_log+0x1e>
 8011ca2:	4bae      	ldr	r3, [pc, #696]	; (8011f5c <__ieee754_log+0x2f0>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f7f0 fb1d 	bl	80022e4 <__aeabi_dmul>
 8011caa:	2436      	movs	r4, #54	; 0x36
 8011cac:	000b      	movs	r3, r1
 8011cae:	4264      	negs	r4, r4
 8011cb0:	4aab      	ldr	r2, [pc, #684]	; (8011f60 <__ieee754_log+0x2f4>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	dd06      	ble.n	8011cc4 <__ieee754_log+0x58>
 8011cb6:	0002      	movs	r2, r0
 8011cb8:	000b      	movs	r3, r1
 8011cba:	f7ef fba3 	bl	8001404 <__aeabi_dadd>
 8011cbe:	e7e6      	b.n	8011c8e <__ieee754_log+0x22>
 8011cc0:	2400      	movs	r4, #0
 8011cc2:	e7f5      	b.n	8011cb0 <__ieee754_log+0x44>
 8011cc4:	4da7      	ldr	r5, [pc, #668]	; (8011f64 <__ieee754_log+0x2f8>)
 8011cc6:	151a      	asrs	r2, r3, #20
 8011cc8:	1952      	adds	r2, r2, r5
 8011cca:	1912      	adds	r2, r2, r4
 8011ccc:	031b      	lsls	r3, r3, #12
 8011cce:	4ca6      	ldr	r4, [pc, #664]	; (8011f68 <__ieee754_log+0x2fc>)
 8011cd0:	0b1b      	lsrs	r3, r3, #12
 8011cd2:	9302      	str	r3, [sp, #8]
 8011cd4:	191c      	adds	r4, r3, r4
 8011cd6:	2380      	movs	r3, #128	; 0x80
 8011cd8:	035b      	lsls	r3, r3, #13
 8011cda:	4023      	ands	r3, r4
 8011cdc:	4ca3      	ldr	r4, [pc, #652]	; (8011f6c <__ieee754_log+0x300>)
 8011cde:	9d02      	ldr	r5, [sp, #8]
 8011ce0:	405c      	eors	r4, r3
 8011ce2:	151b      	asrs	r3, r3, #20
 8011ce4:	189b      	adds	r3, r3, r2
 8011ce6:	4325      	orrs	r5, r4
 8011ce8:	2200      	movs	r2, #0
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	0029      	movs	r1, r5
 8011cee:	4b9f      	ldr	r3, [pc, #636]	; (8011f6c <__ieee754_log+0x300>)
 8011cf0:	f7f0 fd64 	bl	80027bc <__aeabi_dsub>
 8011cf4:	9b02      	ldr	r3, [sp, #8]
 8011cf6:	0006      	movs	r6, r0
 8011cf8:	3302      	adds	r3, #2
 8011cfa:	031b      	lsls	r3, r3, #12
 8011cfc:	000f      	movs	r7, r1
 8011cfe:	2200      	movs	r2, #0
 8011d00:	0b1b      	lsrs	r3, r3, #12
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	dc64      	bgt.n	8011dd0 <__ieee754_log+0x164>
 8011d06:	2300      	movs	r3, #0
 8011d08:	f7ee fb8a 	bl	8000420 <__aeabi_dcmpeq>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d019      	beq.n	8011d44 <__ieee754_log+0xd8>
 8011d10:	9b00      	ldr	r3, [sp, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d100      	bne.n	8011d18 <__ieee754_log+0xac>
 8011d16:	e11c      	b.n	8011f52 <__ieee754_log+0x2e6>
 8011d18:	0018      	movs	r0, r3
 8011d1a:	f7f1 f935 	bl	8002f88 <__aeabi_i2d>
 8011d1e:	4a94      	ldr	r2, [pc, #592]	; (8011f70 <__ieee754_log+0x304>)
 8011d20:	4b94      	ldr	r3, [pc, #592]	; (8011f74 <__ieee754_log+0x308>)
 8011d22:	0004      	movs	r4, r0
 8011d24:	000d      	movs	r5, r1
 8011d26:	f7f0 fadd 	bl	80022e4 <__aeabi_dmul>
 8011d2a:	4a93      	ldr	r2, [pc, #588]	; (8011f78 <__ieee754_log+0x30c>)
 8011d2c:	0006      	movs	r6, r0
 8011d2e:	000f      	movs	r7, r1
 8011d30:	4b92      	ldr	r3, [pc, #584]	; (8011f7c <__ieee754_log+0x310>)
 8011d32:	0020      	movs	r0, r4
 8011d34:	0029      	movs	r1, r5
 8011d36:	f7f0 fad5 	bl	80022e4 <__aeabi_dmul>
 8011d3a:	0002      	movs	r2, r0
 8011d3c:	000b      	movs	r3, r1
 8011d3e:	0030      	movs	r0, r6
 8011d40:	0039      	movs	r1, r7
 8011d42:	e7ba      	b.n	8011cba <__ieee754_log+0x4e>
 8011d44:	4a8e      	ldr	r2, [pc, #568]	; (8011f80 <__ieee754_log+0x314>)
 8011d46:	4b8f      	ldr	r3, [pc, #572]	; (8011f84 <__ieee754_log+0x318>)
 8011d48:	0030      	movs	r0, r6
 8011d4a:	0039      	movs	r1, r7
 8011d4c:	f7f0 faca 	bl	80022e4 <__aeabi_dmul>
 8011d50:	0002      	movs	r2, r0
 8011d52:	000b      	movs	r3, r1
 8011d54:	2000      	movs	r0, #0
 8011d56:	498c      	ldr	r1, [pc, #560]	; (8011f88 <__ieee754_log+0x31c>)
 8011d58:	f7f0 fd30 	bl	80027bc <__aeabi_dsub>
 8011d5c:	0032      	movs	r2, r6
 8011d5e:	0004      	movs	r4, r0
 8011d60:	000d      	movs	r5, r1
 8011d62:	003b      	movs	r3, r7
 8011d64:	0030      	movs	r0, r6
 8011d66:	0039      	movs	r1, r7
 8011d68:	f7f0 fabc 	bl	80022e4 <__aeabi_dmul>
 8011d6c:	000b      	movs	r3, r1
 8011d6e:	0002      	movs	r2, r0
 8011d70:	0029      	movs	r1, r5
 8011d72:	0020      	movs	r0, r4
 8011d74:	f7f0 fab6 	bl	80022e4 <__aeabi_dmul>
 8011d78:	9b00      	ldr	r3, [sp, #0]
 8011d7a:	9002      	str	r0, [sp, #8]
 8011d7c:	9103      	str	r1, [sp, #12]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d106      	bne.n	8011d90 <__ieee754_log+0x124>
 8011d82:	0002      	movs	r2, r0
 8011d84:	000b      	movs	r3, r1
 8011d86:	0030      	movs	r0, r6
 8011d88:	0039      	movs	r1, r7
 8011d8a:	f7f0 fd17 	bl	80027bc <__aeabi_dsub>
 8011d8e:	e77e      	b.n	8011c8e <__ieee754_log+0x22>
 8011d90:	9800      	ldr	r0, [sp, #0]
 8011d92:	f7f1 f8f9 	bl	8002f88 <__aeabi_i2d>
 8011d96:	4a76      	ldr	r2, [pc, #472]	; (8011f70 <__ieee754_log+0x304>)
 8011d98:	4b76      	ldr	r3, [pc, #472]	; (8011f74 <__ieee754_log+0x308>)
 8011d9a:	0004      	movs	r4, r0
 8011d9c:	000d      	movs	r5, r1
 8011d9e:	f7f0 faa1 	bl	80022e4 <__aeabi_dmul>
 8011da2:	4a75      	ldr	r2, [pc, #468]	; (8011f78 <__ieee754_log+0x30c>)
 8011da4:	9000      	str	r0, [sp, #0]
 8011da6:	9101      	str	r1, [sp, #4]
 8011da8:	4b74      	ldr	r3, [pc, #464]	; (8011f7c <__ieee754_log+0x310>)
 8011daa:	0020      	movs	r0, r4
 8011dac:	0029      	movs	r1, r5
 8011dae:	f7f0 fa99 	bl	80022e4 <__aeabi_dmul>
 8011db2:	0002      	movs	r2, r0
 8011db4:	000b      	movs	r3, r1
 8011db6:	9802      	ldr	r0, [sp, #8]
 8011db8:	9903      	ldr	r1, [sp, #12]
 8011dba:	f7f0 fcff 	bl	80027bc <__aeabi_dsub>
 8011dbe:	0032      	movs	r2, r6
 8011dc0:	003b      	movs	r3, r7
 8011dc2:	f7f0 fcfb 	bl	80027bc <__aeabi_dsub>
 8011dc6:	0002      	movs	r2, r0
 8011dc8:	000b      	movs	r3, r1
 8011dca:	9800      	ldr	r0, [sp, #0]
 8011dcc:	9901      	ldr	r1, [sp, #4]
 8011dce:	e7dc      	b.n	8011d8a <__ieee754_log+0x11e>
 8011dd0:	2380      	movs	r3, #128	; 0x80
 8011dd2:	05db      	lsls	r3, r3, #23
 8011dd4:	f7ef fb16 	bl	8001404 <__aeabi_dadd>
 8011dd8:	0002      	movs	r2, r0
 8011dda:	000b      	movs	r3, r1
 8011ddc:	0030      	movs	r0, r6
 8011dde:	0039      	movs	r1, r7
 8011de0:	f7ef fe7a 	bl	8001ad8 <__aeabi_ddiv>
 8011de4:	9004      	str	r0, [sp, #16]
 8011de6:	9105      	str	r1, [sp, #20]
 8011de8:	9800      	ldr	r0, [sp, #0]
 8011dea:	f7f1 f8cd 	bl	8002f88 <__aeabi_i2d>
 8011dee:	9a04      	ldr	r2, [sp, #16]
 8011df0:	9b05      	ldr	r3, [sp, #20]
 8011df2:	9006      	str	r0, [sp, #24]
 8011df4:	9107      	str	r1, [sp, #28]
 8011df6:	0010      	movs	r0, r2
 8011df8:	0019      	movs	r1, r3
 8011dfa:	f7f0 fa73 	bl	80022e4 <__aeabi_dmul>
 8011dfe:	4a63      	ldr	r2, [pc, #396]	; (8011f8c <__ieee754_log+0x320>)
 8011e00:	9b02      	ldr	r3, [sp, #8]
 8011e02:	4694      	mov	ip, r2
 8011e04:	4463      	add	r3, ip
 8011e06:	0002      	movs	r2, r0
 8011e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e0a:	000b      	movs	r3, r1
 8011e0c:	9008      	str	r0, [sp, #32]
 8011e0e:	9109      	str	r1, [sp, #36]	; 0x24
 8011e10:	f7f0 fa68 	bl	80022e4 <__aeabi_dmul>
 8011e14:	0004      	movs	r4, r0
 8011e16:	000d      	movs	r5, r1
 8011e18:	4a5d      	ldr	r2, [pc, #372]	; (8011f90 <__ieee754_log+0x324>)
 8011e1a:	4b5e      	ldr	r3, [pc, #376]	; (8011f94 <__ieee754_log+0x328>)
 8011e1c:	f7f0 fa62 	bl	80022e4 <__aeabi_dmul>
 8011e20:	4a5d      	ldr	r2, [pc, #372]	; (8011f98 <__ieee754_log+0x32c>)
 8011e22:	4b5e      	ldr	r3, [pc, #376]	; (8011f9c <__ieee754_log+0x330>)
 8011e24:	f7ef faee 	bl	8001404 <__aeabi_dadd>
 8011e28:	0022      	movs	r2, r4
 8011e2a:	002b      	movs	r3, r5
 8011e2c:	f7f0 fa5a 	bl	80022e4 <__aeabi_dmul>
 8011e30:	4a5b      	ldr	r2, [pc, #364]	; (8011fa0 <__ieee754_log+0x334>)
 8011e32:	4b5c      	ldr	r3, [pc, #368]	; (8011fa4 <__ieee754_log+0x338>)
 8011e34:	f7ef fae6 	bl	8001404 <__aeabi_dadd>
 8011e38:	0022      	movs	r2, r4
 8011e3a:	002b      	movs	r3, r5
 8011e3c:	f7f0 fa52 	bl	80022e4 <__aeabi_dmul>
 8011e40:	4a59      	ldr	r2, [pc, #356]	; (8011fa8 <__ieee754_log+0x33c>)
 8011e42:	4b5a      	ldr	r3, [pc, #360]	; (8011fac <__ieee754_log+0x340>)
 8011e44:	f7ef fade 	bl	8001404 <__aeabi_dadd>
 8011e48:	9a08      	ldr	r2, [sp, #32]
 8011e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e4c:	f7f0 fa4a 	bl	80022e4 <__aeabi_dmul>
 8011e50:	4a57      	ldr	r2, [pc, #348]	; (8011fb0 <__ieee754_log+0x344>)
 8011e52:	9008      	str	r0, [sp, #32]
 8011e54:	9109      	str	r1, [sp, #36]	; 0x24
 8011e56:	4b57      	ldr	r3, [pc, #348]	; (8011fb4 <__ieee754_log+0x348>)
 8011e58:	0020      	movs	r0, r4
 8011e5a:	0029      	movs	r1, r5
 8011e5c:	f7f0 fa42 	bl	80022e4 <__aeabi_dmul>
 8011e60:	4a55      	ldr	r2, [pc, #340]	; (8011fb8 <__ieee754_log+0x34c>)
 8011e62:	4b56      	ldr	r3, [pc, #344]	; (8011fbc <__ieee754_log+0x350>)
 8011e64:	f7ef face 	bl	8001404 <__aeabi_dadd>
 8011e68:	0022      	movs	r2, r4
 8011e6a:	002b      	movs	r3, r5
 8011e6c:	f7f0 fa3a 	bl	80022e4 <__aeabi_dmul>
 8011e70:	4a53      	ldr	r2, [pc, #332]	; (8011fc0 <__ieee754_log+0x354>)
 8011e72:	4b54      	ldr	r3, [pc, #336]	; (8011fc4 <__ieee754_log+0x358>)
 8011e74:	f7ef fac6 	bl	8001404 <__aeabi_dadd>
 8011e78:	0022      	movs	r2, r4
 8011e7a:	002b      	movs	r3, r5
 8011e7c:	f7f0 fa32 	bl	80022e4 <__aeabi_dmul>
 8011e80:	0002      	movs	r2, r0
 8011e82:	000b      	movs	r3, r1
 8011e84:	9808      	ldr	r0, [sp, #32]
 8011e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e88:	f7ef fabc 	bl	8001404 <__aeabi_dadd>
 8011e8c:	9a02      	ldr	r2, [sp, #8]
 8011e8e:	4b4e      	ldr	r3, [pc, #312]	; (8011fc8 <__ieee754_log+0x35c>)
 8011e90:	0004      	movs	r4, r0
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e96:	000d      	movs	r5, r1
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	dd34      	ble.n	8011f08 <__ieee754_log+0x29c>
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	4b39      	ldr	r3, [pc, #228]	; (8011f88 <__ieee754_log+0x31c>)
 8011ea2:	0030      	movs	r0, r6
 8011ea4:	0039      	movs	r1, r7
 8011ea6:	f7f0 fa1d 	bl	80022e4 <__aeabi_dmul>
 8011eaa:	0032      	movs	r2, r6
 8011eac:	003b      	movs	r3, r7
 8011eae:	f7f0 fa19 	bl	80022e4 <__aeabi_dmul>
 8011eb2:	0002      	movs	r2, r0
 8011eb4:	000b      	movs	r3, r1
 8011eb6:	9002      	str	r0, [sp, #8]
 8011eb8:	9103      	str	r1, [sp, #12]
 8011eba:	0020      	movs	r0, r4
 8011ebc:	0029      	movs	r1, r5
 8011ebe:	f7ef faa1 	bl	8001404 <__aeabi_dadd>
 8011ec2:	9a04      	ldr	r2, [sp, #16]
 8011ec4:	9b05      	ldr	r3, [sp, #20]
 8011ec6:	f7f0 fa0d 	bl	80022e4 <__aeabi_dmul>
 8011eca:	9b00      	ldr	r3, [sp, #0]
 8011ecc:	0004      	movs	r4, r0
 8011ece:	000d      	movs	r5, r1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d106      	bne.n	8011ee2 <__ieee754_log+0x276>
 8011ed4:	0002      	movs	r2, r0
 8011ed6:	000b      	movs	r3, r1
 8011ed8:	9802      	ldr	r0, [sp, #8]
 8011eda:	9903      	ldr	r1, [sp, #12]
 8011edc:	f7f0 fc6e 	bl	80027bc <__aeabi_dsub>
 8011ee0:	e74f      	b.n	8011d82 <__ieee754_log+0x116>
 8011ee2:	4a23      	ldr	r2, [pc, #140]	; (8011f70 <__ieee754_log+0x304>)
 8011ee4:	4b23      	ldr	r3, [pc, #140]	; (8011f74 <__ieee754_log+0x308>)
 8011ee6:	9806      	ldr	r0, [sp, #24]
 8011ee8:	9907      	ldr	r1, [sp, #28]
 8011eea:	f7f0 f9fb 	bl	80022e4 <__aeabi_dmul>
 8011eee:	4a22      	ldr	r2, [pc, #136]	; (8011f78 <__ieee754_log+0x30c>)
 8011ef0:	9000      	str	r0, [sp, #0]
 8011ef2:	9101      	str	r1, [sp, #4]
 8011ef4:	9806      	ldr	r0, [sp, #24]
 8011ef6:	9907      	ldr	r1, [sp, #28]
 8011ef8:	4b20      	ldr	r3, [pc, #128]	; (8011f7c <__ieee754_log+0x310>)
 8011efa:	f7f0 f9f3 	bl	80022e4 <__aeabi_dmul>
 8011efe:	0022      	movs	r2, r4
 8011f00:	002b      	movs	r3, r5
 8011f02:	f7ef fa7f 	bl	8001404 <__aeabi_dadd>
 8011f06:	e754      	b.n	8011db2 <__ieee754_log+0x146>
 8011f08:	0002      	movs	r2, r0
 8011f0a:	000b      	movs	r3, r1
 8011f0c:	0030      	movs	r0, r6
 8011f0e:	0039      	movs	r1, r7
 8011f10:	f7f0 fc54 	bl	80027bc <__aeabi_dsub>
 8011f14:	9a04      	ldr	r2, [sp, #16]
 8011f16:	9b05      	ldr	r3, [sp, #20]
 8011f18:	f7f0 f9e4 	bl	80022e4 <__aeabi_dmul>
 8011f1c:	9b00      	ldr	r3, [sp, #0]
 8011f1e:	0004      	movs	r4, r0
 8011f20:	000d      	movs	r5, r1
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d102      	bne.n	8011f2c <__ieee754_log+0x2c0>
 8011f26:	0002      	movs	r2, r0
 8011f28:	000b      	movs	r3, r1
 8011f2a:	e72c      	b.n	8011d86 <__ieee754_log+0x11a>
 8011f2c:	4a10      	ldr	r2, [pc, #64]	; (8011f70 <__ieee754_log+0x304>)
 8011f2e:	4b11      	ldr	r3, [pc, #68]	; (8011f74 <__ieee754_log+0x308>)
 8011f30:	9806      	ldr	r0, [sp, #24]
 8011f32:	9907      	ldr	r1, [sp, #28]
 8011f34:	f7f0 f9d6 	bl	80022e4 <__aeabi_dmul>
 8011f38:	4a0f      	ldr	r2, [pc, #60]	; (8011f78 <__ieee754_log+0x30c>)
 8011f3a:	9000      	str	r0, [sp, #0]
 8011f3c:	9101      	str	r1, [sp, #4]
 8011f3e:	9806      	ldr	r0, [sp, #24]
 8011f40:	9907      	ldr	r1, [sp, #28]
 8011f42:	4b0e      	ldr	r3, [pc, #56]	; (8011f7c <__ieee754_log+0x310>)
 8011f44:	f7f0 f9ce 	bl	80022e4 <__aeabi_dmul>
 8011f48:	0002      	movs	r2, r0
 8011f4a:	000b      	movs	r3, r1
 8011f4c:	0020      	movs	r0, r4
 8011f4e:	0029      	movs	r1, r5
 8011f50:	e733      	b.n	8011dba <__ieee754_log+0x14e>
 8011f52:	2000      	movs	r0, #0
 8011f54:	2100      	movs	r1, #0
 8011f56:	e69a      	b.n	8011c8e <__ieee754_log+0x22>
 8011f58:	c3500000 	.word	0xc3500000
 8011f5c:	43500000 	.word	0x43500000
 8011f60:	7fefffff 	.word	0x7fefffff
 8011f64:	fffffc01 	.word	0xfffffc01
 8011f68:	00095f64 	.word	0x00095f64
 8011f6c:	3ff00000 	.word	0x3ff00000
 8011f70:	fee00000 	.word	0xfee00000
 8011f74:	3fe62e42 	.word	0x3fe62e42
 8011f78:	35793c76 	.word	0x35793c76
 8011f7c:	3dea39ef 	.word	0x3dea39ef
 8011f80:	55555555 	.word	0x55555555
 8011f84:	3fd55555 	.word	0x3fd55555
 8011f88:	3fe00000 	.word	0x3fe00000
 8011f8c:	fff9eb86 	.word	0xfff9eb86
 8011f90:	df3e5244 	.word	0xdf3e5244
 8011f94:	3fc2f112 	.word	0x3fc2f112
 8011f98:	96cb03de 	.word	0x96cb03de
 8011f9c:	3fc74664 	.word	0x3fc74664
 8011fa0:	94229359 	.word	0x94229359
 8011fa4:	3fd24924 	.word	0x3fd24924
 8011fa8:	55555593 	.word	0x55555593
 8011fac:	3fe55555 	.word	0x3fe55555
 8011fb0:	d078c69f 	.word	0xd078c69f
 8011fb4:	3fc39a09 	.word	0x3fc39a09
 8011fb8:	1d8e78af 	.word	0x1d8e78af
 8011fbc:	3fcc71c5 	.word	0x3fcc71c5
 8011fc0:	9997fa04 	.word	0x9997fa04
 8011fc4:	3fd99999 	.word	0x3fd99999
 8011fc8:	0006b851 	.word	0x0006b851

08011fcc <__ieee754_rem_pio2>:
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	004b      	lsls	r3, r1, #1
 8011fd0:	b091      	sub	sp, #68	; 0x44
 8011fd2:	085b      	lsrs	r3, r3, #1
 8011fd4:	9302      	str	r3, [sp, #8]
 8011fd6:	0017      	movs	r7, r2
 8011fd8:	4bb6      	ldr	r3, [pc, #728]	; (80122b4 <__ieee754_rem_pio2+0x2e8>)
 8011fda:	9a02      	ldr	r2, [sp, #8]
 8011fdc:	0004      	movs	r4, r0
 8011fde:	000d      	movs	r5, r1
 8011fe0:	9109      	str	r1, [sp, #36]	; 0x24
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	dc09      	bgt.n	8011ffa <__ieee754_rem_pio2+0x2e>
 8011fe6:	0002      	movs	r2, r0
 8011fe8:	000b      	movs	r3, r1
 8011fea:	603a      	str	r2, [r7, #0]
 8011fec:	607b      	str	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	60ba      	str	r2, [r7, #8]
 8011ff4:	60fb      	str	r3, [r7, #12]
 8011ff6:	2600      	movs	r6, #0
 8011ff8:	e025      	b.n	8012046 <__ieee754_rem_pio2+0x7a>
 8011ffa:	4baf      	ldr	r3, [pc, #700]	; (80122b8 <__ieee754_rem_pio2+0x2ec>)
 8011ffc:	9a02      	ldr	r2, [sp, #8]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	dd00      	ble.n	8012004 <__ieee754_rem_pio2+0x38>
 8012002:	e06e      	b.n	80120e2 <__ieee754_rem_pio2+0x116>
 8012004:	4ead      	ldr	r6, [pc, #692]	; (80122bc <__ieee754_rem_pio2+0x2f0>)
 8012006:	4aae      	ldr	r2, [pc, #696]	; (80122c0 <__ieee754_rem_pio2+0x2f4>)
 8012008:	2d00      	cmp	r5, #0
 801200a:	dd35      	ble.n	8012078 <__ieee754_rem_pio2+0xac>
 801200c:	0020      	movs	r0, r4
 801200e:	0029      	movs	r1, r5
 8012010:	4baa      	ldr	r3, [pc, #680]	; (80122bc <__ieee754_rem_pio2+0x2f0>)
 8012012:	f7f0 fbd3 	bl	80027bc <__aeabi_dsub>
 8012016:	9b02      	ldr	r3, [sp, #8]
 8012018:	0004      	movs	r4, r0
 801201a:	000d      	movs	r5, r1
 801201c:	42b3      	cmp	r3, r6
 801201e:	d015      	beq.n	801204c <__ieee754_rem_pio2+0x80>
 8012020:	4aa8      	ldr	r2, [pc, #672]	; (80122c4 <__ieee754_rem_pio2+0x2f8>)
 8012022:	4ba9      	ldr	r3, [pc, #676]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 8012024:	f7f0 fbca 	bl	80027bc <__aeabi_dsub>
 8012028:	0002      	movs	r2, r0
 801202a:	000b      	movs	r3, r1
 801202c:	0020      	movs	r0, r4
 801202e:	603a      	str	r2, [r7, #0]
 8012030:	607b      	str	r3, [r7, #4]
 8012032:	0029      	movs	r1, r5
 8012034:	f7f0 fbc2 	bl	80027bc <__aeabi_dsub>
 8012038:	4aa2      	ldr	r2, [pc, #648]	; (80122c4 <__ieee754_rem_pio2+0x2f8>)
 801203a:	4ba3      	ldr	r3, [pc, #652]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 801203c:	f7f0 fbbe 	bl	80027bc <__aeabi_dsub>
 8012040:	2601      	movs	r6, #1
 8012042:	60b8      	str	r0, [r7, #8]
 8012044:	60f9      	str	r1, [r7, #12]
 8012046:	0030      	movs	r0, r6
 8012048:	b011      	add	sp, #68	; 0x44
 801204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801204c:	22d3      	movs	r2, #211	; 0xd3
 801204e:	4b9e      	ldr	r3, [pc, #632]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 8012050:	0552      	lsls	r2, r2, #21
 8012052:	f7f0 fbb3 	bl	80027bc <__aeabi_dsub>
 8012056:	4a9d      	ldr	r2, [pc, #628]	; (80122cc <__ieee754_rem_pio2+0x300>)
 8012058:	4b9d      	ldr	r3, [pc, #628]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 801205a:	0004      	movs	r4, r0
 801205c:	000d      	movs	r5, r1
 801205e:	f7f0 fbad 	bl	80027bc <__aeabi_dsub>
 8012062:	0002      	movs	r2, r0
 8012064:	000b      	movs	r3, r1
 8012066:	0020      	movs	r0, r4
 8012068:	603a      	str	r2, [r7, #0]
 801206a:	607b      	str	r3, [r7, #4]
 801206c:	0029      	movs	r1, r5
 801206e:	f7f0 fba5 	bl	80027bc <__aeabi_dsub>
 8012072:	4a96      	ldr	r2, [pc, #600]	; (80122cc <__ieee754_rem_pio2+0x300>)
 8012074:	4b96      	ldr	r3, [pc, #600]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 8012076:	e7e1      	b.n	801203c <__ieee754_rem_pio2+0x70>
 8012078:	0020      	movs	r0, r4
 801207a:	0029      	movs	r1, r5
 801207c:	4b8f      	ldr	r3, [pc, #572]	; (80122bc <__ieee754_rem_pio2+0x2f0>)
 801207e:	f7ef f9c1 	bl	8001404 <__aeabi_dadd>
 8012082:	9b02      	ldr	r3, [sp, #8]
 8012084:	0004      	movs	r4, r0
 8012086:	000d      	movs	r5, r1
 8012088:	42b3      	cmp	r3, r6
 801208a:	d014      	beq.n	80120b6 <__ieee754_rem_pio2+0xea>
 801208c:	4a8d      	ldr	r2, [pc, #564]	; (80122c4 <__ieee754_rem_pio2+0x2f8>)
 801208e:	4b8e      	ldr	r3, [pc, #568]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 8012090:	f7ef f9b8 	bl	8001404 <__aeabi_dadd>
 8012094:	0002      	movs	r2, r0
 8012096:	000b      	movs	r3, r1
 8012098:	0020      	movs	r0, r4
 801209a:	603a      	str	r2, [r7, #0]
 801209c:	607b      	str	r3, [r7, #4]
 801209e:	0029      	movs	r1, r5
 80120a0:	f7f0 fb8c 	bl	80027bc <__aeabi_dsub>
 80120a4:	4a87      	ldr	r2, [pc, #540]	; (80122c4 <__ieee754_rem_pio2+0x2f8>)
 80120a6:	4b88      	ldr	r3, [pc, #544]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 80120a8:	f7ef f9ac 	bl	8001404 <__aeabi_dadd>
 80120ac:	2601      	movs	r6, #1
 80120ae:	60b8      	str	r0, [r7, #8]
 80120b0:	60f9      	str	r1, [r7, #12]
 80120b2:	4276      	negs	r6, r6
 80120b4:	e7c7      	b.n	8012046 <__ieee754_rem_pio2+0x7a>
 80120b6:	22d3      	movs	r2, #211	; 0xd3
 80120b8:	4b83      	ldr	r3, [pc, #524]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 80120ba:	0552      	lsls	r2, r2, #21
 80120bc:	f7ef f9a2 	bl	8001404 <__aeabi_dadd>
 80120c0:	4a82      	ldr	r2, [pc, #520]	; (80122cc <__ieee754_rem_pio2+0x300>)
 80120c2:	4b83      	ldr	r3, [pc, #524]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 80120c4:	0004      	movs	r4, r0
 80120c6:	000d      	movs	r5, r1
 80120c8:	f7ef f99c 	bl	8001404 <__aeabi_dadd>
 80120cc:	0002      	movs	r2, r0
 80120ce:	000b      	movs	r3, r1
 80120d0:	0020      	movs	r0, r4
 80120d2:	603a      	str	r2, [r7, #0]
 80120d4:	607b      	str	r3, [r7, #4]
 80120d6:	0029      	movs	r1, r5
 80120d8:	f7f0 fb70 	bl	80027bc <__aeabi_dsub>
 80120dc:	4a7b      	ldr	r2, [pc, #492]	; (80122cc <__ieee754_rem_pio2+0x300>)
 80120de:	4b7c      	ldr	r3, [pc, #496]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 80120e0:	e7e2      	b.n	80120a8 <__ieee754_rem_pio2+0xdc>
 80120e2:	4b7c      	ldr	r3, [pc, #496]	; (80122d4 <__ieee754_rem_pio2+0x308>)
 80120e4:	9a02      	ldr	r2, [sp, #8]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	dd00      	ble.n	80120ec <__ieee754_rem_pio2+0x120>
 80120ea:	e0d3      	b.n	8012294 <__ieee754_rem_pio2+0x2c8>
 80120ec:	0020      	movs	r0, r4
 80120ee:	0029      	movs	r1, r5
 80120f0:	f000 fe3a 	bl	8012d68 <fabs>
 80120f4:	4a78      	ldr	r2, [pc, #480]	; (80122d8 <__ieee754_rem_pio2+0x30c>)
 80120f6:	4b79      	ldr	r3, [pc, #484]	; (80122dc <__ieee754_rem_pio2+0x310>)
 80120f8:	0004      	movs	r4, r0
 80120fa:	000d      	movs	r5, r1
 80120fc:	f7f0 f8f2 	bl	80022e4 <__aeabi_dmul>
 8012100:	2200      	movs	r2, #0
 8012102:	4b77      	ldr	r3, [pc, #476]	; (80122e0 <__ieee754_rem_pio2+0x314>)
 8012104:	f7ef f97e 	bl	8001404 <__aeabi_dadd>
 8012108:	f7f0 ff08 	bl	8002f1c <__aeabi_d2iz>
 801210c:	0006      	movs	r6, r0
 801210e:	f7f0 ff3b 	bl	8002f88 <__aeabi_i2d>
 8012112:	4a6b      	ldr	r2, [pc, #428]	; (80122c0 <__ieee754_rem_pio2+0x2f4>)
 8012114:	4b69      	ldr	r3, [pc, #420]	; (80122bc <__ieee754_rem_pio2+0x2f0>)
 8012116:	9006      	str	r0, [sp, #24]
 8012118:	9107      	str	r1, [sp, #28]
 801211a:	f7f0 f8e3 	bl	80022e4 <__aeabi_dmul>
 801211e:	0002      	movs	r2, r0
 8012120:	000b      	movs	r3, r1
 8012122:	0020      	movs	r0, r4
 8012124:	0029      	movs	r1, r5
 8012126:	f7f0 fb49 	bl	80027bc <__aeabi_dsub>
 801212a:	4a66      	ldr	r2, [pc, #408]	; (80122c4 <__ieee754_rem_pio2+0x2f8>)
 801212c:	9004      	str	r0, [sp, #16]
 801212e:	9105      	str	r1, [sp, #20]
 8012130:	9806      	ldr	r0, [sp, #24]
 8012132:	9907      	ldr	r1, [sp, #28]
 8012134:	4b64      	ldr	r3, [pc, #400]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 8012136:	f7f0 f8d5 	bl	80022e4 <__aeabi_dmul>
 801213a:	0004      	movs	r4, r0
 801213c:	000d      	movs	r5, r1
 801213e:	2e1f      	cmp	r6, #31
 8012140:	dc0f      	bgt.n	8012162 <__ieee754_rem_pio2+0x196>
 8012142:	4a68      	ldr	r2, [pc, #416]	; (80122e4 <__ieee754_rem_pio2+0x318>)
 8012144:	1e73      	subs	r3, r6, #1
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	589b      	ldr	r3, [r3, r2]
 801214a:	9a02      	ldr	r2, [sp, #8]
 801214c:	4293      	cmp	r3, r2
 801214e:	d008      	beq.n	8012162 <__ieee754_rem_pio2+0x196>
 8012150:	9804      	ldr	r0, [sp, #16]
 8012152:	9905      	ldr	r1, [sp, #20]
 8012154:	0022      	movs	r2, r4
 8012156:	002b      	movs	r3, r5
 8012158:	f7f0 fb30 	bl	80027bc <__aeabi_dsub>
 801215c:	6038      	str	r0, [r7, #0]
 801215e:	6079      	str	r1, [r7, #4]
 8012160:	e012      	b.n	8012188 <__ieee754_rem_pio2+0x1bc>
 8012162:	0022      	movs	r2, r4
 8012164:	9804      	ldr	r0, [sp, #16]
 8012166:	9905      	ldr	r1, [sp, #20]
 8012168:	002b      	movs	r3, r5
 801216a:	f7f0 fb27 	bl	80027bc <__aeabi_dsub>
 801216e:	9b02      	ldr	r3, [sp, #8]
 8012170:	151b      	asrs	r3, r3, #20
 8012172:	9308      	str	r3, [sp, #32]
 8012174:	9a08      	ldr	r2, [sp, #32]
 8012176:	004b      	lsls	r3, r1, #1
 8012178:	0d5b      	lsrs	r3, r3, #21
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	2b10      	cmp	r3, #16
 801217e:	dc21      	bgt.n	80121c4 <__ieee754_rem_pio2+0x1f8>
 8012180:	0002      	movs	r2, r0
 8012182:	000b      	movs	r3, r1
 8012184:	603a      	str	r2, [r7, #0]
 8012186:	607b      	str	r3, [r7, #4]
 8012188:	9804      	ldr	r0, [sp, #16]
 801218a:	9905      	ldr	r1, [sp, #20]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	9302      	str	r3, [sp, #8]
 8012192:	9b02      	ldr	r3, [sp, #8]
 8012194:	f7f0 fb12 	bl	80027bc <__aeabi_dsub>
 8012198:	0022      	movs	r2, r4
 801219a:	002b      	movs	r3, r5
 801219c:	f7f0 fb0e 	bl	80027bc <__aeabi_dsub>
 80121a0:	000b      	movs	r3, r1
 80121a2:	0002      	movs	r2, r0
 80121a4:	60ba      	str	r2, [r7, #8]
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	db00      	blt.n	80121b0 <__ieee754_rem_pio2+0x1e4>
 80121ae:	e74a      	b.n	8012046 <__ieee754_rem_pio2+0x7a>
 80121b0:	2280      	movs	r2, #128	; 0x80
 80121b2:	0612      	lsls	r2, r2, #24
 80121b4:	4694      	mov	ip, r2
 80121b6:	9b02      	ldr	r3, [sp, #8]
 80121b8:	1889      	adds	r1, r1, r2
 80121ba:	4463      	add	r3, ip
 80121bc:	607b      	str	r3, [r7, #4]
 80121be:	60b8      	str	r0, [r7, #8]
 80121c0:	60f9      	str	r1, [r7, #12]
 80121c2:	e776      	b.n	80120b2 <__ieee754_rem_pio2+0xe6>
 80121c4:	22d3      	movs	r2, #211	; 0xd3
 80121c6:	9806      	ldr	r0, [sp, #24]
 80121c8:	9907      	ldr	r1, [sp, #28]
 80121ca:	4b3f      	ldr	r3, [pc, #252]	; (80122c8 <__ieee754_rem_pio2+0x2fc>)
 80121cc:	0552      	lsls	r2, r2, #21
 80121ce:	f7f0 f889 	bl	80022e4 <__aeabi_dmul>
 80121d2:	0004      	movs	r4, r0
 80121d4:	000d      	movs	r5, r1
 80121d6:	0002      	movs	r2, r0
 80121d8:	000b      	movs	r3, r1
 80121da:	9804      	ldr	r0, [sp, #16]
 80121dc:	9905      	ldr	r1, [sp, #20]
 80121de:	f7f0 faed 	bl	80027bc <__aeabi_dsub>
 80121e2:	0002      	movs	r2, r0
 80121e4:	000b      	movs	r3, r1
 80121e6:	9002      	str	r0, [sp, #8]
 80121e8:	9103      	str	r1, [sp, #12]
 80121ea:	9804      	ldr	r0, [sp, #16]
 80121ec:	9905      	ldr	r1, [sp, #20]
 80121ee:	f7f0 fae5 	bl	80027bc <__aeabi_dsub>
 80121f2:	0022      	movs	r2, r4
 80121f4:	002b      	movs	r3, r5
 80121f6:	f7f0 fae1 	bl	80027bc <__aeabi_dsub>
 80121fa:	0004      	movs	r4, r0
 80121fc:	000d      	movs	r5, r1
 80121fe:	9806      	ldr	r0, [sp, #24]
 8012200:	9907      	ldr	r1, [sp, #28]
 8012202:	4a32      	ldr	r2, [pc, #200]	; (80122cc <__ieee754_rem_pio2+0x300>)
 8012204:	4b32      	ldr	r3, [pc, #200]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 8012206:	f7f0 f86d 	bl	80022e4 <__aeabi_dmul>
 801220a:	0022      	movs	r2, r4
 801220c:	002b      	movs	r3, r5
 801220e:	f7f0 fad5 	bl	80027bc <__aeabi_dsub>
 8012212:	0002      	movs	r2, r0
 8012214:	000b      	movs	r3, r1
 8012216:	0004      	movs	r4, r0
 8012218:	000d      	movs	r5, r1
 801221a:	9802      	ldr	r0, [sp, #8]
 801221c:	9903      	ldr	r1, [sp, #12]
 801221e:	f7f0 facd 	bl	80027bc <__aeabi_dsub>
 8012222:	9a08      	ldr	r2, [sp, #32]
 8012224:	004b      	lsls	r3, r1, #1
 8012226:	0d5b      	lsrs	r3, r3, #21
 8012228:	1ad3      	subs	r3, r2, r3
 801222a:	2b31      	cmp	r3, #49	; 0x31
 801222c:	dc08      	bgt.n	8012240 <__ieee754_rem_pio2+0x274>
 801222e:	0002      	movs	r2, r0
 8012230:	000b      	movs	r3, r1
 8012232:	603a      	str	r2, [r7, #0]
 8012234:	607b      	str	r3, [r7, #4]
 8012236:	9a02      	ldr	r2, [sp, #8]
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	9204      	str	r2, [sp, #16]
 801223c:	9305      	str	r3, [sp, #20]
 801223e:	e7a3      	b.n	8012188 <__ieee754_rem_pio2+0x1bc>
 8012240:	22b8      	movs	r2, #184	; 0xb8
 8012242:	9806      	ldr	r0, [sp, #24]
 8012244:	9907      	ldr	r1, [sp, #28]
 8012246:	4b22      	ldr	r3, [pc, #136]	; (80122d0 <__ieee754_rem_pio2+0x304>)
 8012248:	0592      	lsls	r2, r2, #22
 801224a:	f7f0 f84b 	bl	80022e4 <__aeabi_dmul>
 801224e:	0004      	movs	r4, r0
 8012250:	000d      	movs	r5, r1
 8012252:	0002      	movs	r2, r0
 8012254:	000b      	movs	r3, r1
 8012256:	9802      	ldr	r0, [sp, #8]
 8012258:	9903      	ldr	r1, [sp, #12]
 801225a:	f7f0 faaf 	bl	80027bc <__aeabi_dsub>
 801225e:	0002      	movs	r2, r0
 8012260:	000b      	movs	r3, r1
 8012262:	9004      	str	r0, [sp, #16]
 8012264:	9105      	str	r1, [sp, #20]
 8012266:	9802      	ldr	r0, [sp, #8]
 8012268:	9903      	ldr	r1, [sp, #12]
 801226a:	f7f0 faa7 	bl	80027bc <__aeabi_dsub>
 801226e:	0022      	movs	r2, r4
 8012270:	002b      	movs	r3, r5
 8012272:	f7f0 faa3 	bl	80027bc <__aeabi_dsub>
 8012276:	0004      	movs	r4, r0
 8012278:	000d      	movs	r5, r1
 801227a:	9806      	ldr	r0, [sp, #24]
 801227c:	9907      	ldr	r1, [sp, #28]
 801227e:	4a1a      	ldr	r2, [pc, #104]	; (80122e8 <__ieee754_rem_pio2+0x31c>)
 8012280:	4b1a      	ldr	r3, [pc, #104]	; (80122ec <__ieee754_rem_pio2+0x320>)
 8012282:	f7f0 f82f 	bl	80022e4 <__aeabi_dmul>
 8012286:	0022      	movs	r2, r4
 8012288:	002b      	movs	r3, r5
 801228a:	f7f0 fa97 	bl	80027bc <__aeabi_dsub>
 801228e:	0004      	movs	r4, r0
 8012290:	000d      	movs	r5, r1
 8012292:	e75d      	b.n	8012150 <__ieee754_rem_pio2+0x184>
 8012294:	4b16      	ldr	r3, [pc, #88]	; (80122f0 <__ieee754_rem_pio2+0x324>)
 8012296:	9a02      	ldr	r2, [sp, #8]
 8012298:	429a      	cmp	r2, r3
 801229a:	dd2b      	ble.n	80122f4 <__ieee754_rem_pio2+0x328>
 801229c:	0022      	movs	r2, r4
 801229e:	002b      	movs	r3, r5
 80122a0:	0020      	movs	r0, r4
 80122a2:	0029      	movs	r1, r5
 80122a4:	f7f0 fa8a 	bl	80027bc <__aeabi_dsub>
 80122a8:	60b8      	str	r0, [r7, #8]
 80122aa:	60f9      	str	r1, [r7, #12]
 80122ac:	6038      	str	r0, [r7, #0]
 80122ae:	6079      	str	r1, [r7, #4]
 80122b0:	e6a1      	b.n	8011ff6 <__ieee754_rem_pio2+0x2a>
 80122b2:	46c0      	nop			; (mov r8, r8)
 80122b4:	3fe921fb 	.word	0x3fe921fb
 80122b8:	4002d97b 	.word	0x4002d97b
 80122bc:	3ff921fb 	.word	0x3ff921fb
 80122c0:	54400000 	.word	0x54400000
 80122c4:	1a626331 	.word	0x1a626331
 80122c8:	3dd0b461 	.word	0x3dd0b461
 80122cc:	2e037073 	.word	0x2e037073
 80122d0:	3ba3198a 	.word	0x3ba3198a
 80122d4:	413921fb 	.word	0x413921fb
 80122d8:	6dc9c883 	.word	0x6dc9c883
 80122dc:	3fe45f30 	.word	0x3fe45f30
 80122e0:	3fe00000 	.word	0x3fe00000
 80122e4:	080158d0 	.word	0x080158d0
 80122e8:	252049c1 	.word	0x252049c1
 80122ec:	397b839a 	.word	0x397b839a
 80122f0:	7fefffff 	.word	0x7fefffff
 80122f4:	9a02      	ldr	r2, [sp, #8]
 80122f6:	0020      	movs	r0, r4
 80122f8:	1516      	asrs	r6, r2, #20
 80122fa:	4a27      	ldr	r2, [pc, #156]	; (8012398 <__ieee754_rem_pio2+0x3cc>)
 80122fc:	18b6      	adds	r6, r6, r2
 80122fe:	9a02      	ldr	r2, [sp, #8]
 8012300:	0533      	lsls	r3, r6, #20
 8012302:	1ad5      	subs	r5, r2, r3
 8012304:	0029      	movs	r1, r5
 8012306:	f7f0 fe09 	bl	8002f1c <__aeabi_d2iz>
 801230a:	f7f0 fe3d 	bl	8002f88 <__aeabi_i2d>
 801230e:	0002      	movs	r2, r0
 8012310:	000b      	movs	r3, r1
 8012312:	0020      	movs	r0, r4
 8012314:	0029      	movs	r1, r5
 8012316:	920a      	str	r2, [sp, #40]	; 0x28
 8012318:	930b      	str	r3, [sp, #44]	; 0x2c
 801231a:	f7f0 fa4f 	bl	80027bc <__aeabi_dsub>
 801231e:	2200      	movs	r2, #0
 8012320:	4b1e      	ldr	r3, [pc, #120]	; (801239c <__ieee754_rem_pio2+0x3d0>)
 8012322:	f7ef ffdf 	bl	80022e4 <__aeabi_dmul>
 8012326:	000d      	movs	r5, r1
 8012328:	0004      	movs	r4, r0
 801232a:	f7f0 fdf7 	bl	8002f1c <__aeabi_d2iz>
 801232e:	f7f0 fe2b 	bl	8002f88 <__aeabi_i2d>
 8012332:	0002      	movs	r2, r0
 8012334:	000b      	movs	r3, r1
 8012336:	0020      	movs	r0, r4
 8012338:	0029      	movs	r1, r5
 801233a:	920c      	str	r2, [sp, #48]	; 0x30
 801233c:	930d      	str	r3, [sp, #52]	; 0x34
 801233e:	f7f0 fa3d 	bl	80027bc <__aeabi_dsub>
 8012342:	2200      	movs	r2, #0
 8012344:	4b15      	ldr	r3, [pc, #84]	; (801239c <__ieee754_rem_pio2+0x3d0>)
 8012346:	f7ef ffcd 	bl	80022e4 <__aeabi_dmul>
 801234a:	2503      	movs	r5, #3
 801234c:	900e      	str	r0, [sp, #56]	; 0x38
 801234e:	910f      	str	r1, [sp, #60]	; 0x3c
 8012350:	ac0a      	add	r4, sp, #40	; 0x28
 8012352:	2200      	movs	r2, #0
 8012354:	6920      	ldr	r0, [r4, #16]
 8012356:	6961      	ldr	r1, [r4, #20]
 8012358:	2300      	movs	r3, #0
 801235a:	9502      	str	r5, [sp, #8]
 801235c:	3c08      	subs	r4, #8
 801235e:	3d01      	subs	r5, #1
 8012360:	f7ee f85e 	bl	8000420 <__aeabi_dcmpeq>
 8012364:	2800      	cmp	r0, #0
 8012366:	d1f4      	bne.n	8012352 <__ieee754_rem_pio2+0x386>
 8012368:	4b0d      	ldr	r3, [pc, #52]	; (80123a0 <__ieee754_rem_pio2+0x3d4>)
 801236a:	0032      	movs	r2, r6
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	2302      	movs	r3, #2
 8012370:	0039      	movs	r1, r7
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	a80a      	add	r0, sp, #40	; 0x28
 8012376:	9b02      	ldr	r3, [sp, #8]
 8012378:	f000 f8d4 	bl	8012524 <__kernel_rem_pio2>
 801237c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801237e:	0006      	movs	r6, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	db00      	blt.n	8012386 <__ieee754_rem_pio2+0x3ba>
 8012384:	e65f      	b.n	8012046 <__ieee754_rem_pio2+0x7a>
 8012386:	2280      	movs	r2, #128	; 0x80
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	0612      	lsls	r2, r2, #24
 801238c:	189b      	adds	r3, r3, r2
 801238e:	607b      	str	r3, [r7, #4]
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	189b      	adds	r3, r3, r2
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	e68c      	b.n	80120b2 <__ieee754_rem_pio2+0xe6>
 8012398:	fffffbea 	.word	0xfffffbea
 801239c:	41700000 	.word	0x41700000
 80123a0:	08015950 	.word	0x08015950

080123a4 <__kernel_cos>:
 80123a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a6:	b087      	sub	sp, #28
 80123a8:	9204      	str	r2, [sp, #16]
 80123aa:	9305      	str	r3, [sp, #20]
 80123ac:	004b      	lsls	r3, r1, #1
 80123ae:	085b      	lsrs	r3, r3, #1
 80123b0:	9300      	str	r3, [sp, #0]
 80123b2:	23f9      	movs	r3, #249	; 0xf9
 80123b4:	9a00      	ldr	r2, [sp, #0]
 80123b6:	0007      	movs	r7, r0
 80123b8:	000e      	movs	r6, r1
 80123ba:	059b      	lsls	r3, r3, #22
 80123bc:	429a      	cmp	r2, r3
 80123be:	da04      	bge.n	80123ca <__kernel_cos+0x26>
 80123c0:	f7f0 fdac 	bl	8002f1c <__aeabi_d2iz>
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d100      	bne.n	80123ca <__kernel_cos+0x26>
 80123c8:	e084      	b.n	80124d4 <__kernel_cos+0x130>
 80123ca:	003a      	movs	r2, r7
 80123cc:	0033      	movs	r3, r6
 80123ce:	0038      	movs	r0, r7
 80123d0:	0031      	movs	r1, r6
 80123d2:	f7ef ff87 	bl	80022e4 <__aeabi_dmul>
 80123d6:	2200      	movs	r2, #0
 80123d8:	4b40      	ldr	r3, [pc, #256]	; (80124dc <__kernel_cos+0x138>)
 80123da:	0004      	movs	r4, r0
 80123dc:	000d      	movs	r5, r1
 80123de:	f7ef ff81 	bl	80022e4 <__aeabi_dmul>
 80123e2:	4a3f      	ldr	r2, [pc, #252]	; (80124e0 <__kernel_cos+0x13c>)
 80123e4:	9002      	str	r0, [sp, #8]
 80123e6:	9103      	str	r1, [sp, #12]
 80123e8:	4b3e      	ldr	r3, [pc, #248]	; (80124e4 <__kernel_cos+0x140>)
 80123ea:	0020      	movs	r0, r4
 80123ec:	0029      	movs	r1, r5
 80123ee:	f7ef ff79 	bl	80022e4 <__aeabi_dmul>
 80123f2:	4a3d      	ldr	r2, [pc, #244]	; (80124e8 <__kernel_cos+0x144>)
 80123f4:	4b3d      	ldr	r3, [pc, #244]	; (80124ec <__kernel_cos+0x148>)
 80123f6:	f7ef f805 	bl	8001404 <__aeabi_dadd>
 80123fa:	0022      	movs	r2, r4
 80123fc:	002b      	movs	r3, r5
 80123fe:	f7ef ff71 	bl	80022e4 <__aeabi_dmul>
 8012402:	4a3b      	ldr	r2, [pc, #236]	; (80124f0 <__kernel_cos+0x14c>)
 8012404:	4b3b      	ldr	r3, [pc, #236]	; (80124f4 <__kernel_cos+0x150>)
 8012406:	f7f0 f9d9 	bl	80027bc <__aeabi_dsub>
 801240a:	0022      	movs	r2, r4
 801240c:	002b      	movs	r3, r5
 801240e:	f7ef ff69 	bl	80022e4 <__aeabi_dmul>
 8012412:	4a39      	ldr	r2, [pc, #228]	; (80124f8 <__kernel_cos+0x154>)
 8012414:	4b39      	ldr	r3, [pc, #228]	; (80124fc <__kernel_cos+0x158>)
 8012416:	f7ee fff5 	bl	8001404 <__aeabi_dadd>
 801241a:	0022      	movs	r2, r4
 801241c:	002b      	movs	r3, r5
 801241e:	f7ef ff61 	bl	80022e4 <__aeabi_dmul>
 8012422:	4a37      	ldr	r2, [pc, #220]	; (8012500 <__kernel_cos+0x15c>)
 8012424:	4b37      	ldr	r3, [pc, #220]	; (8012504 <__kernel_cos+0x160>)
 8012426:	f7f0 f9c9 	bl	80027bc <__aeabi_dsub>
 801242a:	0022      	movs	r2, r4
 801242c:	002b      	movs	r3, r5
 801242e:	f7ef ff59 	bl	80022e4 <__aeabi_dmul>
 8012432:	4a35      	ldr	r2, [pc, #212]	; (8012508 <__kernel_cos+0x164>)
 8012434:	4b35      	ldr	r3, [pc, #212]	; (801250c <__kernel_cos+0x168>)
 8012436:	f7ee ffe5 	bl	8001404 <__aeabi_dadd>
 801243a:	0022      	movs	r2, r4
 801243c:	002b      	movs	r3, r5
 801243e:	f7ef ff51 	bl	80022e4 <__aeabi_dmul>
 8012442:	0022      	movs	r2, r4
 8012444:	002b      	movs	r3, r5
 8012446:	f7ef ff4d 	bl	80022e4 <__aeabi_dmul>
 801244a:	9a04      	ldr	r2, [sp, #16]
 801244c:	9b05      	ldr	r3, [sp, #20]
 801244e:	0004      	movs	r4, r0
 8012450:	000d      	movs	r5, r1
 8012452:	0038      	movs	r0, r7
 8012454:	0031      	movs	r1, r6
 8012456:	f7ef ff45 	bl	80022e4 <__aeabi_dmul>
 801245a:	0002      	movs	r2, r0
 801245c:	000b      	movs	r3, r1
 801245e:	0020      	movs	r0, r4
 8012460:	0029      	movs	r1, r5
 8012462:	f7f0 f9ab 	bl	80027bc <__aeabi_dsub>
 8012466:	4b2a      	ldr	r3, [pc, #168]	; (8012510 <__kernel_cos+0x16c>)
 8012468:	9a00      	ldr	r2, [sp, #0]
 801246a:	0004      	movs	r4, r0
 801246c:	000d      	movs	r5, r1
 801246e:	429a      	cmp	r2, r3
 8012470:	dc0d      	bgt.n	801248e <__kernel_cos+0xea>
 8012472:	0002      	movs	r2, r0
 8012474:	000b      	movs	r3, r1
 8012476:	9802      	ldr	r0, [sp, #8]
 8012478:	9903      	ldr	r1, [sp, #12]
 801247a:	f7f0 f99f 	bl	80027bc <__aeabi_dsub>
 801247e:	0002      	movs	r2, r0
 8012480:	2000      	movs	r0, #0
 8012482:	000b      	movs	r3, r1
 8012484:	4923      	ldr	r1, [pc, #140]	; (8012514 <__kernel_cos+0x170>)
 8012486:	f7f0 f999 	bl	80027bc <__aeabi_dsub>
 801248a:	b007      	add	sp, #28
 801248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801248e:	4b22      	ldr	r3, [pc, #136]	; (8012518 <__kernel_cos+0x174>)
 8012490:	9a00      	ldr	r2, [sp, #0]
 8012492:	2600      	movs	r6, #0
 8012494:	429a      	cmp	r2, r3
 8012496:	dc1b      	bgt.n	80124d0 <__kernel_cos+0x12c>
 8012498:	0013      	movs	r3, r2
 801249a:	4a20      	ldr	r2, [pc, #128]	; (801251c <__kernel_cos+0x178>)
 801249c:	4694      	mov	ip, r2
 801249e:	4463      	add	r3, ip
 80124a0:	001f      	movs	r7, r3
 80124a2:	0032      	movs	r2, r6
 80124a4:	003b      	movs	r3, r7
 80124a6:	2000      	movs	r0, #0
 80124a8:	491a      	ldr	r1, [pc, #104]	; (8012514 <__kernel_cos+0x170>)
 80124aa:	f7f0 f987 	bl	80027bc <__aeabi_dsub>
 80124ae:	0032      	movs	r2, r6
 80124b0:	003b      	movs	r3, r7
 80124b2:	9000      	str	r0, [sp, #0]
 80124b4:	9101      	str	r1, [sp, #4]
 80124b6:	9802      	ldr	r0, [sp, #8]
 80124b8:	9903      	ldr	r1, [sp, #12]
 80124ba:	f7f0 f97f 	bl	80027bc <__aeabi_dsub>
 80124be:	0022      	movs	r2, r4
 80124c0:	002b      	movs	r3, r5
 80124c2:	f7f0 f97b 	bl	80027bc <__aeabi_dsub>
 80124c6:	0002      	movs	r2, r0
 80124c8:	000b      	movs	r3, r1
 80124ca:	9800      	ldr	r0, [sp, #0]
 80124cc:	9901      	ldr	r1, [sp, #4]
 80124ce:	e7da      	b.n	8012486 <__kernel_cos+0xe2>
 80124d0:	4f13      	ldr	r7, [pc, #76]	; (8012520 <__kernel_cos+0x17c>)
 80124d2:	e7e6      	b.n	80124a2 <__kernel_cos+0xfe>
 80124d4:	2000      	movs	r0, #0
 80124d6:	490f      	ldr	r1, [pc, #60]	; (8012514 <__kernel_cos+0x170>)
 80124d8:	e7d7      	b.n	801248a <__kernel_cos+0xe6>
 80124da:	46c0      	nop			; (mov r8, r8)
 80124dc:	3fe00000 	.word	0x3fe00000
 80124e0:	be8838d4 	.word	0xbe8838d4
 80124e4:	bda8fae9 	.word	0xbda8fae9
 80124e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80124ec:	3e21ee9e 	.word	0x3e21ee9e
 80124f0:	809c52ad 	.word	0x809c52ad
 80124f4:	3e927e4f 	.word	0x3e927e4f
 80124f8:	19cb1590 	.word	0x19cb1590
 80124fc:	3efa01a0 	.word	0x3efa01a0
 8012500:	16c15177 	.word	0x16c15177
 8012504:	3f56c16c 	.word	0x3f56c16c
 8012508:	5555554c 	.word	0x5555554c
 801250c:	3fa55555 	.word	0x3fa55555
 8012510:	3fd33332 	.word	0x3fd33332
 8012514:	3ff00000 	.word	0x3ff00000
 8012518:	3fe90000 	.word	0x3fe90000
 801251c:	ffe00000 	.word	0xffe00000
 8012520:	3fd20000 	.word	0x3fd20000

08012524 <__kernel_rem_pio2>:
 8012524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012526:	4cd0      	ldr	r4, [pc, #832]	; (8012868 <__kernel_rem_pio2+0x344>)
 8012528:	44a5      	add	sp, r4
 801252a:	930d      	str	r3, [sp, #52]	; 0x34
 801252c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801252e:	0014      	movs	r4, r2
 8012530:	009a      	lsls	r2, r3, #2
 8012532:	4bce      	ldr	r3, [pc, #824]	; (801286c <__kernel_rem_pio2+0x348>)
 8012534:	900e      	str	r0, [sp, #56]	; 0x38
 8012536:	58d3      	ldr	r3, [r2, r3]
 8012538:	9107      	str	r1, [sp, #28]
 801253a:	9308      	str	r3, [sp, #32]
 801253c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801253e:	3b01      	subs	r3, #1
 8012540:	930c      	str	r3, [sp, #48]	; 0x30
 8012542:	2300      	movs	r3, #0
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	0023      	movs	r3, r4
 8012548:	3314      	adds	r3, #20
 801254a:	db04      	blt.n	8012556 <__kernel_rem_pio2+0x32>
 801254c:	2118      	movs	r1, #24
 801254e:	1ee0      	subs	r0, r4, #3
 8012550:	f7ed fe6a 	bl	8000228 <__divsi3>
 8012554:	9000      	str	r0, [sp, #0]
 8012556:	2218      	movs	r2, #24
 8012558:	9b00      	ldr	r3, [sp, #0]
 801255a:	4252      	negs	r2, r2
 801255c:	3301      	adds	r3, #1
 801255e:	435a      	muls	r2, r3
 8012560:	1913      	adds	r3, r2, r4
 8012562:	9302      	str	r3, [sp, #8]
 8012564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012566:	9b00      	ldr	r3, [sp, #0]
 8012568:	ae26      	add	r6, sp, #152	; 0x98
 801256a:	1a9d      	subs	r5, r3, r2
 801256c:	002c      	movs	r4, r5
 801256e:	9b08      	ldr	r3, [sp, #32]
 8012570:	189f      	adds	r7, r3, r2
 8012572:	1b63      	subs	r3, r4, r5
 8012574:	429f      	cmp	r7, r3
 8012576:	da17      	bge.n	80125a8 <__kernel_rem_pio2+0x84>
 8012578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801257a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801257c:	9304      	str	r3, [sp, #16]
 801257e:	ab76      	add	r3, sp, #472	; 0x1d8
 8012580:	930a      	str	r3, [sp, #40]	; 0x28
 8012582:	2301      	movs	r3, #1
 8012584:	1a9b      	subs	r3, r3, r2
 8012586:	930b      	str	r3, [sp, #44]	; 0x2c
 8012588:	ab28      	add	r3, sp, #160	; 0xa0
 801258a:	930f      	str	r3, [sp, #60]	; 0x3c
 801258c:	9a04      	ldr	r2, [sp, #16]
 801258e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012590:	189b      	adds	r3, r3, r2
 8012592:	9a08      	ldr	r2, [sp, #32]
 8012594:	429a      	cmp	r2, r3
 8012596:	db31      	blt.n	80125fc <__kernel_rem_pio2+0xd8>
 8012598:	9b04      	ldr	r3, [sp, #16]
 801259a:	2400      	movs	r4, #0
 801259c:	00de      	lsls	r6, r3, #3
 801259e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125a0:	2500      	movs	r5, #0
 80125a2:	2700      	movs	r7, #0
 80125a4:	199e      	adds	r6, r3, r6
 80125a6:	e01e      	b.n	80125e6 <__kernel_rem_pio2+0xc2>
 80125a8:	2c00      	cmp	r4, #0
 80125aa:	db07      	blt.n	80125bc <__kernel_rem_pio2+0x98>
 80125ac:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80125ae:	00a3      	lsls	r3, r4, #2
 80125b0:	58d0      	ldr	r0, [r2, r3]
 80125b2:	f7f0 fce9 	bl	8002f88 <__aeabi_i2d>
 80125b6:	c603      	stmia	r6!, {r0, r1}
 80125b8:	3401      	adds	r4, #1
 80125ba:	e7da      	b.n	8012572 <__kernel_rem_pio2+0x4e>
 80125bc:	2000      	movs	r0, #0
 80125be:	2100      	movs	r1, #0
 80125c0:	e7f9      	b.n	80125b6 <__kernel_rem_pio2+0x92>
 80125c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125c4:	00f9      	lsls	r1, r7, #3
 80125c6:	1859      	adds	r1, r3, r1
 80125c8:	6808      	ldr	r0, [r1, #0]
 80125ca:	6849      	ldr	r1, [r1, #4]
 80125cc:	6832      	ldr	r2, [r6, #0]
 80125ce:	6873      	ldr	r3, [r6, #4]
 80125d0:	f7ef fe88 	bl	80022e4 <__aeabi_dmul>
 80125d4:	0002      	movs	r2, r0
 80125d6:	000b      	movs	r3, r1
 80125d8:	0020      	movs	r0, r4
 80125da:	0029      	movs	r1, r5
 80125dc:	f7ee ff12 	bl	8001404 <__aeabi_dadd>
 80125e0:	0004      	movs	r4, r0
 80125e2:	000d      	movs	r5, r1
 80125e4:	3701      	adds	r7, #1
 80125e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125e8:	3e08      	subs	r6, #8
 80125ea:	429f      	cmp	r7, r3
 80125ec:	dde9      	ble.n	80125c2 <__kernel_rem_pio2+0x9e>
 80125ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f0:	c330      	stmia	r3!, {r4, r5}
 80125f2:	930a      	str	r3, [sp, #40]	; 0x28
 80125f4:	9b04      	ldr	r3, [sp, #16]
 80125f6:	3301      	adds	r3, #1
 80125f8:	9304      	str	r3, [sp, #16]
 80125fa:	e7c7      	b.n	801258c <__kernel_rem_pio2+0x68>
 80125fc:	9b08      	ldr	r3, [sp, #32]
 80125fe:	aa12      	add	r2, sp, #72	; 0x48
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	189b      	adds	r3, r3, r2
 8012604:	9310      	str	r3, [sp, #64]	; 0x40
 8012606:	9b00      	ldr	r3, [sp, #0]
 8012608:	0098      	lsls	r0, r3, #2
 801260a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801260c:	181b      	adds	r3, r3, r0
 801260e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012610:	9b08      	ldr	r3, [sp, #32]
 8012612:	9304      	str	r3, [sp, #16]
 8012614:	9b04      	ldr	r3, [sp, #16]
 8012616:	aa76      	add	r2, sp, #472	; 0x1d8
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	18d3      	adds	r3, r2, r3
 801261c:	681c      	ldr	r4, [r3, #0]
 801261e:	685d      	ldr	r5, [r3, #4]
 8012620:	ab12      	add	r3, sp, #72	; 0x48
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	930b      	str	r3, [sp, #44]	; 0x2c
 8012626:	9b04      	ldr	r3, [sp, #16]
 8012628:	9211      	str	r2, [sp, #68]	; 0x44
 801262a:	930a      	str	r3, [sp, #40]	; 0x28
 801262c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801262e:	2b00      	cmp	r3, #0
 8012630:	dc74      	bgt.n	801271c <__kernel_rem_pio2+0x1f8>
 8012632:	0020      	movs	r0, r4
 8012634:	0029      	movs	r1, r5
 8012636:	9a02      	ldr	r2, [sp, #8]
 8012638:	f000 fc2a 	bl	8012e90 <scalbn>
 801263c:	23ff      	movs	r3, #255	; 0xff
 801263e:	2200      	movs	r2, #0
 8012640:	059b      	lsls	r3, r3, #22
 8012642:	0004      	movs	r4, r0
 8012644:	000d      	movs	r5, r1
 8012646:	f7ef fe4d 	bl	80022e4 <__aeabi_dmul>
 801264a:	f000 fb91 	bl	8012d70 <floor>
 801264e:	2200      	movs	r2, #0
 8012650:	4b87      	ldr	r3, [pc, #540]	; (8012870 <__kernel_rem_pio2+0x34c>)
 8012652:	f7ef fe47 	bl	80022e4 <__aeabi_dmul>
 8012656:	0002      	movs	r2, r0
 8012658:	000b      	movs	r3, r1
 801265a:	0020      	movs	r0, r4
 801265c:	0029      	movs	r1, r5
 801265e:	f7f0 f8ad 	bl	80027bc <__aeabi_dsub>
 8012662:	000d      	movs	r5, r1
 8012664:	0004      	movs	r4, r0
 8012666:	f7f0 fc59 	bl	8002f1c <__aeabi_d2iz>
 801266a:	900b      	str	r0, [sp, #44]	; 0x2c
 801266c:	f7f0 fc8c 	bl	8002f88 <__aeabi_i2d>
 8012670:	000b      	movs	r3, r1
 8012672:	0002      	movs	r2, r0
 8012674:	0029      	movs	r1, r5
 8012676:	0020      	movs	r0, r4
 8012678:	f7f0 f8a0 	bl	80027bc <__aeabi_dsub>
 801267c:	9b02      	ldr	r3, [sp, #8]
 801267e:	0006      	movs	r6, r0
 8012680:	000f      	movs	r7, r1
 8012682:	2b00      	cmp	r3, #0
 8012684:	dd74      	ble.n	8012770 <__kernel_rem_pio2+0x24c>
 8012686:	2118      	movs	r1, #24
 8012688:	9b04      	ldr	r3, [sp, #16]
 801268a:	aa12      	add	r2, sp, #72	; 0x48
 801268c:	3b01      	subs	r3, #1
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	589a      	ldr	r2, [r3, r2]
 8012692:	9802      	ldr	r0, [sp, #8]
 8012694:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012696:	1a09      	subs	r1, r1, r0
 8012698:	0010      	movs	r0, r2
 801269a:	4108      	asrs	r0, r1
 801269c:	1824      	adds	r4, r4, r0
 801269e:	4088      	lsls	r0, r1
 80126a0:	a912      	add	r1, sp, #72	; 0x48
 80126a2:	1a12      	subs	r2, r2, r0
 80126a4:	505a      	str	r2, [r3, r1]
 80126a6:	2317      	movs	r3, #23
 80126a8:	9902      	ldr	r1, [sp, #8]
 80126aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80126ac:	1a5b      	subs	r3, r3, r1
 80126ae:	411a      	asrs	r2, r3
 80126b0:	920a      	str	r2, [sp, #40]	; 0x28
 80126b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	dd6d      	ble.n	8012794 <__kernel_rem_pio2+0x270>
 80126b8:	2200      	movs	r2, #0
 80126ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126bc:	2080      	movs	r0, #128	; 0x80
 80126be:	3301      	adds	r3, #1
 80126c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80126c2:	4b6c      	ldr	r3, [pc, #432]	; (8012874 <__kernel_rem_pio2+0x350>)
 80126c4:	0014      	movs	r4, r2
 80126c6:	469c      	mov	ip, r3
 80126c8:	2501      	movs	r5, #1
 80126ca:	0440      	lsls	r0, r0, #17
 80126cc:	9b04      	ldr	r3, [sp, #16]
 80126ce:	4293      	cmp	r3, r2
 80126d0:	dd00      	ble.n	80126d4 <__kernel_rem_pio2+0x1b0>
 80126d2:	e098      	b.n	8012806 <__kernel_rem_pio2+0x2e2>
 80126d4:	9b02      	ldr	r3, [sp, #8]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	dd05      	ble.n	80126e6 <__kernel_rem_pio2+0x1c2>
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d100      	bne.n	80126e0 <__kernel_rem_pio2+0x1bc>
 80126de:	e0a8      	b.n	8012832 <__kernel_rem_pio2+0x30e>
 80126e0:	2b02      	cmp	r3, #2
 80126e2:	d100      	bne.n	80126e6 <__kernel_rem_pio2+0x1c2>
 80126e4:	e0b0      	b.n	8012848 <__kernel_rem_pio2+0x324>
 80126e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d153      	bne.n	8012794 <__kernel_rem_pio2+0x270>
 80126ec:	0032      	movs	r2, r6
 80126ee:	003b      	movs	r3, r7
 80126f0:	2000      	movs	r0, #0
 80126f2:	4961      	ldr	r1, [pc, #388]	; (8012878 <__kernel_rem_pio2+0x354>)
 80126f4:	f7f0 f862 	bl	80027bc <__aeabi_dsub>
 80126f8:	0006      	movs	r6, r0
 80126fa:	000f      	movs	r7, r1
 80126fc:	2c00      	cmp	r4, #0
 80126fe:	d049      	beq.n	8012794 <__kernel_rem_pio2+0x270>
 8012700:	9a02      	ldr	r2, [sp, #8]
 8012702:	2000      	movs	r0, #0
 8012704:	495c      	ldr	r1, [pc, #368]	; (8012878 <__kernel_rem_pio2+0x354>)
 8012706:	f000 fbc3 	bl	8012e90 <scalbn>
 801270a:	0002      	movs	r2, r0
 801270c:	000b      	movs	r3, r1
 801270e:	0030      	movs	r0, r6
 8012710:	0039      	movs	r1, r7
 8012712:	f7f0 f853 	bl	80027bc <__aeabi_dsub>
 8012716:	0006      	movs	r6, r0
 8012718:	000f      	movs	r7, r1
 801271a:	e03b      	b.n	8012794 <__kernel_rem_pio2+0x270>
 801271c:	2200      	movs	r2, #0
 801271e:	4b57      	ldr	r3, [pc, #348]	; (801287c <__kernel_rem_pio2+0x358>)
 8012720:	0020      	movs	r0, r4
 8012722:	0029      	movs	r1, r5
 8012724:	f7ef fdde 	bl	80022e4 <__aeabi_dmul>
 8012728:	f7f0 fbf8 	bl	8002f1c <__aeabi_d2iz>
 801272c:	f7f0 fc2c 	bl	8002f88 <__aeabi_i2d>
 8012730:	2200      	movs	r2, #0
 8012732:	4b53      	ldr	r3, [pc, #332]	; (8012880 <__kernel_rem_pio2+0x35c>)
 8012734:	0006      	movs	r6, r0
 8012736:	000f      	movs	r7, r1
 8012738:	f7ef fdd4 	bl	80022e4 <__aeabi_dmul>
 801273c:	0002      	movs	r2, r0
 801273e:	000b      	movs	r3, r1
 8012740:	0020      	movs	r0, r4
 8012742:	0029      	movs	r1, r5
 8012744:	f7f0 f83a 	bl	80027bc <__aeabi_dsub>
 8012748:	f7f0 fbe8 	bl	8002f1c <__aeabi_d2iz>
 801274c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801274e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012750:	c301      	stmia	r3!, {r0}
 8012752:	930b      	str	r3, [sp, #44]	; 0x2c
 8012754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012756:	0030      	movs	r0, r6
 8012758:	3b01      	subs	r3, #1
 801275a:	930a      	str	r3, [sp, #40]	; 0x28
 801275c:	00db      	lsls	r3, r3, #3
 801275e:	18d3      	adds	r3, r2, r3
 8012760:	0039      	movs	r1, r7
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	f7ee fe4d 	bl	8001404 <__aeabi_dadd>
 801276a:	0004      	movs	r4, r0
 801276c:	000d      	movs	r5, r1
 801276e:	e75d      	b.n	801262c <__kernel_rem_pio2+0x108>
 8012770:	9b02      	ldr	r3, [sp, #8]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d107      	bne.n	8012786 <__kernel_rem_pio2+0x262>
 8012776:	9b04      	ldr	r3, [sp, #16]
 8012778:	aa12      	add	r2, sp, #72	; 0x48
 801277a:	3b01      	subs	r3, #1
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	5898      	ldr	r0, [r3, r2]
 8012780:	15c3      	asrs	r3, r0, #23
 8012782:	930a      	str	r3, [sp, #40]	; 0x28
 8012784:	e795      	b.n	80126b2 <__kernel_rem_pio2+0x18e>
 8012786:	2200      	movs	r2, #0
 8012788:	4b3e      	ldr	r3, [pc, #248]	; (8012884 <__kernel_rem_pio2+0x360>)
 801278a:	f7ed fe6d 	bl	8000468 <__aeabi_dcmpge>
 801278e:	2800      	cmp	r0, #0
 8012790:	d136      	bne.n	8012800 <__kernel_rem_pio2+0x2dc>
 8012792:	900a      	str	r0, [sp, #40]	; 0x28
 8012794:	2200      	movs	r2, #0
 8012796:	2300      	movs	r3, #0
 8012798:	0030      	movs	r0, r6
 801279a:	0039      	movs	r1, r7
 801279c:	f7ed fe40 	bl	8000420 <__aeabi_dcmpeq>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d100      	bne.n	80127a6 <__kernel_rem_pio2+0x282>
 80127a4:	e0b9      	b.n	801291a <__kernel_rem_pio2+0x3f6>
 80127a6:	2200      	movs	r2, #0
 80127a8:	9b04      	ldr	r3, [sp, #16]
 80127aa:	3b01      	subs	r3, #1
 80127ac:	9300      	str	r3, [sp, #0]
 80127ae:	9908      	ldr	r1, [sp, #32]
 80127b0:	428b      	cmp	r3, r1
 80127b2:	da52      	bge.n	801285a <__kernel_rem_pio2+0x336>
 80127b4:	2a00      	cmp	r2, #0
 80127b6:	d100      	bne.n	80127ba <__kernel_rem_pio2+0x296>
 80127b8:	e095      	b.n	80128e6 <__kernel_rem_pio2+0x3c2>
 80127ba:	9b02      	ldr	r3, [sp, #8]
 80127bc:	aa12      	add	r2, sp, #72	; 0x48
 80127be:	3b18      	subs	r3, #24
 80127c0:	9302      	str	r3, [sp, #8]
 80127c2:	9b00      	ldr	r3, [sp, #0]
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	589b      	ldr	r3, [r3, r2]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d100      	bne.n	80127ce <__kernel_rem_pio2+0x2aa>
 80127cc:	e0a1      	b.n	8012912 <__kernel_rem_pio2+0x3ee>
 80127ce:	2000      	movs	r0, #0
 80127d0:	9a02      	ldr	r2, [sp, #8]
 80127d2:	4929      	ldr	r1, [pc, #164]	; (8012878 <__kernel_rem_pio2+0x354>)
 80127d4:	f000 fb5c 	bl	8012e90 <scalbn>
 80127d8:	0006      	movs	r6, r0
 80127da:	000f      	movs	r7, r1
 80127dc:	9c00      	ldr	r4, [sp, #0]
 80127de:	2c00      	cmp	r4, #0
 80127e0:	db00      	blt.n	80127e4 <__kernel_rem_pio2+0x2c0>
 80127e2:	e0d9      	b.n	8012998 <__kernel_rem_pio2+0x474>
 80127e4:	2600      	movs	r6, #0
 80127e6:	9d00      	ldr	r5, [sp, #0]
 80127e8:	2d00      	cmp	r5, #0
 80127ea:	da00      	bge.n	80127ee <__kernel_rem_pio2+0x2ca>
 80127ec:	e10c      	b.n	8012a08 <__kernel_rem_pio2+0x4e4>
 80127ee:	ab76      	add	r3, sp, #472	; 0x1d8
 80127f0:	00ef      	lsls	r7, r5, #3
 80127f2:	2400      	movs	r4, #0
 80127f4:	18ff      	adds	r7, r7, r3
 80127f6:	2300      	movs	r3, #0
 80127f8:	9302      	str	r3, [sp, #8]
 80127fa:	9403      	str	r4, [sp, #12]
 80127fc:	2400      	movs	r4, #0
 80127fe:	e0f4      	b.n	80129ea <__kernel_rem_pio2+0x4c6>
 8012800:	2302      	movs	r3, #2
 8012802:	930a      	str	r3, [sp, #40]	; 0x28
 8012804:	e758      	b.n	80126b8 <__kernel_rem_pio2+0x194>
 8012806:	9b00      	ldr	r3, [sp, #0]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2c00      	cmp	r4, #0
 801280c:	d10b      	bne.n	8012826 <__kernel_rem_pio2+0x302>
 801280e:	2b00      	cmp	r3, #0
 8012810:	d003      	beq.n	801281a <__kernel_rem_pio2+0x2f6>
 8012812:	9c00      	ldr	r4, [sp, #0]
 8012814:	1ac3      	subs	r3, r0, r3
 8012816:	6023      	str	r3, [r4, #0]
 8012818:	002b      	movs	r3, r5
 801281a:	9c00      	ldr	r4, [sp, #0]
 801281c:	3201      	adds	r2, #1
 801281e:	3404      	adds	r4, #4
 8012820:	9400      	str	r4, [sp, #0]
 8012822:	001c      	movs	r4, r3
 8012824:	e752      	b.n	80126cc <__kernel_rem_pio2+0x1a8>
 8012826:	4661      	mov	r1, ip
 8012828:	1acb      	subs	r3, r1, r3
 801282a:	9900      	ldr	r1, [sp, #0]
 801282c:	600b      	str	r3, [r1, #0]
 801282e:	0023      	movs	r3, r4
 8012830:	e7f3      	b.n	801281a <__kernel_rem_pio2+0x2f6>
 8012832:	9b04      	ldr	r3, [sp, #16]
 8012834:	aa12      	add	r2, sp, #72	; 0x48
 8012836:	3b01      	subs	r3, #1
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	589a      	ldr	r2, [r3, r2]
 801283c:	9200      	str	r2, [sp, #0]
 801283e:	0252      	lsls	r2, r2, #9
 8012840:	0a52      	lsrs	r2, r2, #9
 8012842:	a912      	add	r1, sp, #72	; 0x48
 8012844:	505a      	str	r2, [r3, r1]
 8012846:	e74e      	b.n	80126e6 <__kernel_rem_pio2+0x1c2>
 8012848:	9b04      	ldr	r3, [sp, #16]
 801284a:	aa12      	add	r2, sp, #72	; 0x48
 801284c:	3b01      	subs	r3, #1
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	589a      	ldr	r2, [r3, r2]
 8012852:	9200      	str	r2, [sp, #0]
 8012854:	0292      	lsls	r2, r2, #10
 8012856:	0a92      	lsrs	r2, r2, #10
 8012858:	e7f3      	b.n	8012842 <__kernel_rem_pio2+0x31e>
 801285a:	0099      	lsls	r1, r3, #2
 801285c:	a812      	add	r0, sp, #72	; 0x48
 801285e:	5809      	ldr	r1, [r1, r0]
 8012860:	3b01      	subs	r3, #1
 8012862:	430a      	orrs	r2, r1
 8012864:	e7a3      	b.n	80127ae <__kernel_rem_pio2+0x28a>
 8012866:	46c0      	nop			; (mov r8, r8)
 8012868:	fffffd84 	.word	0xfffffd84
 801286c:	08015a98 	.word	0x08015a98
 8012870:	40200000 	.word	0x40200000
 8012874:	00ffffff 	.word	0x00ffffff
 8012878:	3ff00000 	.word	0x3ff00000
 801287c:	3e700000 	.word	0x3e700000
 8012880:	41700000 	.word	0x41700000
 8012884:	3fe00000 	.word	0x3fe00000
 8012888:	3301      	adds	r3, #1
 801288a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801288c:	009a      	lsls	r2, r3, #2
 801288e:	4252      	negs	r2, r2
 8012890:	588a      	ldr	r2, [r1, r2]
 8012892:	2a00      	cmp	r2, #0
 8012894:	d0f8      	beq.n	8012888 <__kernel_rem_pio2+0x364>
 8012896:	9a04      	ldr	r2, [sp, #16]
 8012898:	990d      	ldr	r1, [sp, #52]	; 0x34
 801289a:	1c57      	adds	r7, r2, #1
 801289c:	1854      	adds	r4, r2, r1
 801289e:	00e4      	lsls	r4, r4, #3
 80128a0:	aa26      	add	r2, sp, #152	; 0x98
 80128a2:	1914      	adds	r4, r2, r4
 80128a4:	9a04      	ldr	r2, [sp, #16]
 80128a6:	18d3      	adds	r3, r2, r3
 80128a8:	9304      	str	r3, [sp, #16]
 80128aa:	9b04      	ldr	r3, [sp, #16]
 80128ac:	42bb      	cmp	r3, r7
 80128ae:	da00      	bge.n	80128b2 <__kernel_rem_pio2+0x38e>
 80128b0:	e6b0      	b.n	8012614 <__kernel_rem_pio2+0xf0>
 80128b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128b4:	00bb      	lsls	r3, r7, #2
 80128b6:	58d0      	ldr	r0, [r2, r3]
 80128b8:	f7f0 fb66 	bl	8002f88 <__aeabi_i2d>
 80128bc:	2200      	movs	r2, #0
 80128be:	2300      	movs	r3, #0
 80128c0:	0026      	movs	r6, r4
 80128c2:	2500      	movs	r5, #0
 80128c4:	6020      	str	r0, [r4, #0]
 80128c6:	6061      	str	r1, [r4, #4]
 80128c8:	9200      	str	r2, [sp, #0]
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128ce:	429d      	cmp	r5, r3
 80128d0:	dd0b      	ble.n	80128ea <__kernel_rem_pio2+0x3c6>
 80128d2:	00fb      	lsls	r3, r7, #3
 80128d4:	aa76      	add	r2, sp, #472	; 0x1d8
 80128d6:	18d3      	adds	r3, r2, r3
 80128d8:	3701      	adds	r7, #1
 80128da:	9900      	ldr	r1, [sp, #0]
 80128dc:	9a01      	ldr	r2, [sp, #4]
 80128de:	3408      	adds	r4, #8
 80128e0:	6019      	str	r1, [r3, #0]
 80128e2:	605a      	str	r2, [r3, #4]
 80128e4:	e7e1      	b.n	80128aa <__kernel_rem_pio2+0x386>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e7cf      	b.n	801288a <__kernel_rem_pio2+0x366>
 80128ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128ec:	00e9      	lsls	r1, r5, #3
 80128ee:	1859      	adds	r1, r3, r1
 80128f0:	6808      	ldr	r0, [r1, #0]
 80128f2:	6849      	ldr	r1, [r1, #4]
 80128f4:	6832      	ldr	r2, [r6, #0]
 80128f6:	6873      	ldr	r3, [r6, #4]
 80128f8:	f7ef fcf4 	bl	80022e4 <__aeabi_dmul>
 80128fc:	0002      	movs	r2, r0
 80128fe:	000b      	movs	r3, r1
 8012900:	9800      	ldr	r0, [sp, #0]
 8012902:	9901      	ldr	r1, [sp, #4]
 8012904:	f7ee fd7e 	bl	8001404 <__aeabi_dadd>
 8012908:	3501      	adds	r5, #1
 801290a:	9000      	str	r0, [sp, #0]
 801290c:	9101      	str	r1, [sp, #4]
 801290e:	3e08      	subs	r6, #8
 8012910:	e7dc      	b.n	80128cc <__kernel_rem_pio2+0x3a8>
 8012912:	9b00      	ldr	r3, [sp, #0]
 8012914:	3b01      	subs	r3, #1
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	e74f      	b.n	80127ba <__kernel_rem_pio2+0x296>
 801291a:	9b02      	ldr	r3, [sp, #8]
 801291c:	0030      	movs	r0, r6
 801291e:	425a      	negs	r2, r3
 8012920:	0039      	movs	r1, r7
 8012922:	f000 fab5 	bl	8012e90 <scalbn>
 8012926:	2200      	movs	r2, #0
 8012928:	4bb6      	ldr	r3, [pc, #728]	; (8012c04 <__kernel_rem_pio2+0x6e0>)
 801292a:	0004      	movs	r4, r0
 801292c:	000d      	movs	r5, r1
 801292e:	f7ed fd9b 	bl	8000468 <__aeabi_dcmpge>
 8012932:	2800      	cmp	r0, #0
 8012934:	d025      	beq.n	8012982 <__kernel_rem_pio2+0x45e>
 8012936:	2200      	movs	r2, #0
 8012938:	4bb3      	ldr	r3, [pc, #716]	; (8012c08 <__kernel_rem_pio2+0x6e4>)
 801293a:	0020      	movs	r0, r4
 801293c:	0029      	movs	r1, r5
 801293e:	f7ef fcd1 	bl	80022e4 <__aeabi_dmul>
 8012942:	f7f0 faeb 	bl	8002f1c <__aeabi_d2iz>
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	0006      	movs	r6, r0
 801294a:	009f      	lsls	r7, r3, #2
 801294c:	f7f0 fb1c 	bl	8002f88 <__aeabi_i2d>
 8012950:	2200      	movs	r2, #0
 8012952:	4bac      	ldr	r3, [pc, #688]	; (8012c04 <__kernel_rem_pio2+0x6e0>)
 8012954:	f7ef fcc6 	bl	80022e4 <__aeabi_dmul>
 8012958:	0002      	movs	r2, r0
 801295a:	000b      	movs	r3, r1
 801295c:	0020      	movs	r0, r4
 801295e:	0029      	movs	r1, r5
 8012960:	f7ef ff2c 	bl	80027bc <__aeabi_dsub>
 8012964:	f7f0 fada 	bl	8002f1c <__aeabi_d2iz>
 8012968:	ab12      	add	r3, sp, #72	; 0x48
 801296a:	51d8      	str	r0, [r3, r7]
 801296c:	9b04      	ldr	r3, [sp, #16]
 801296e:	aa12      	add	r2, sp, #72	; 0x48
 8012970:	3301      	adds	r3, #1
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	9b02      	ldr	r3, [sp, #8]
 8012976:	3318      	adds	r3, #24
 8012978:	9302      	str	r3, [sp, #8]
 801297a:	9b00      	ldr	r3, [sp, #0]
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	509e      	str	r6, [r3, r2]
 8012980:	e725      	b.n	80127ce <__kernel_rem_pio2+0x2aa>
 8012982:	9b04      	ldr	r3, [sp, #16]
 8012984:	0020      	movs	r0, r4
 8012986:	0029      	movs	r1, r5
 8012988:	009e      	lsls	r6, r3, #2
 801298a:	f7f0 fac7 	bl	8002f1c <__aeabi_d2iz>
 801298e:	ab12      	add	r3, sp, #72	; 0x48
 8012990:	5198      	str	r0, [r3, r6]
 8012992:	9b04      	ldr	r3, [sp, #16]
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	e71a      	b.n	80127ce <__kernel_rem_pio2+0x2aa>
 8012998:	00e5      	lsls	r5, r4, #3
 801299a:	ab76      	add	r3, sp, #472	; 0x1d8
 801299c:	aa12      	add	r2, sp, #72	; 0x48
 801299e:	195d      	adds	r5, r3, r5
 80129a0:	00a3      	lsls	r3, r4, #2
 80129a2:	5898      	ldr	r0, [r3, r2]
 80129a4:	f7f0 faf0 	bl	8002f88 <__aeabi_i2d>
 80129a8:	0032      	movs	r2, r6
 80129aa:	003b      	movs	r3, r7
 80129ac:	f7ef fc9a 	bl	80022e4 <__aeabi_dmul>
 80129b0:	2200      	movs	r2, #0
 80129b2:	6028      	str	r0, [r5, #0]
 80129b4:	6069      	str	r1, [r5, #4]
 80129b6:	4b94      	ldr	r3, [pc, #592]	; (8012c08 <__kernel_rem_pio2+0x6e4>)
 80129b8:	0030      	movs	r0, r6
 80129ba:	0039      	movs	r1, r7
 80129bc:	f7ef fc92 	bl	80022e4 <__aeabi_dmul>
 80129c0:	3c01      	subs	r4, #1
 80129c2:	0006      	movs	r6, r0
 80129c4:	000f      	movs	r7, r1
 80129c6:	e70a      	b.n	80127de <__kernel_rem_pio2+0x2ba>
 80129c8:	4b90      	ldr	r3, [pc, #576]	; (8012c0c <__kernel_rem_pio2+0x6e8>)
 80129ca:	00e1      	lsls	r1, r4, #3
 80129cc:	1859      	adds	r1, r3, r1
 80129ce:	6808      	ldr	r0, [r1, #0]
 80129d0:	6849      	ldr	r1, [r1, #4]
 80129d2:	cf0c      	ldmia	r7!, {r2, r3}
 80129d4:	f7ef fc86 	bl	80022e4 <__aeabi_dmul>
 80129d8:	0002      	movs	r2, r0
 80129da:	000b      	movs	r3, r1
 80129dc:	9802      	ldr	r0, [sp, #8]
 80129de:	9903      	ldr	r1, [sp, #12]
 80129e0:	f7ee fd10 	bl	8001404 <__aeabi_dadd>
 80129e4:	9002      	str	r0, [sp, #8]
 80129e6:	9103      	str	r1, [sp, #12]
 80129e8:	3401      	adds	r4, #1
 80129ea:	9b08      	ldr	r3, [sp, #32]
 80129ec:	429c      	cmp	r4, r3
 80129ee:	dc01      	bgt.n	80129f4 <__kernel_rem_pio2+0x4d0>
 80129f0:	42a6      	cmp	r6, r4
 80129f2:	dae9      	bge.n	80129c8 <__kernel_rem_pio2+0x4a4>
 80129f4:	00f3      	lsls	r3, r6, #3
 80129f6:	aa4e      	add	r2, sp, #312	; 0x138
 80129f8:	18d3      	adds	r3, r2, r3
 80129fa:	3d01      	subs	r5, #1
 80129fc:	9902      	ldr	r1, [sp, #8]
 80129fe:	9a03      	ldr	r2, [sp, #12]
 8012a00:	3601      	adds	r6, #1
 8012a02:	6019      	str	r1, [r3, #0]
 8012a04:	605a      	str	r2, [r3, #4]
 8012a06:	e6ef      	b.n	80127e8 <__kernel_rem_pio2+0x2c4>
 8012a08:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012a0a:	2b02      	cmp	r3, #2
 8012a0c:	dc0b      	bgt.n	8012a26 <__kernel_rem_pio2+0x502>
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	dd00      	ble.n	8012a14 <__kernel_rem_pio2+0x4f0>
 8012a12:	e08a      	b.n	8012b2a <__kernel_rem_pio2+0x606>
 8012a14:	d055      	beq.n	8012ac2 <__kernel_rem_pio2+0x59e>
 8012a16:	2007      	movs	r0, #7
 8012a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a1a:	4003      	ands	r3, r0
 8012a1c:	0018      	movs	r0, r3
 8012a1e:	239f      	movs	r3, #159	; 0x9f
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	449d      	add	sp, r3
 8012a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012a28:	2b03      	cmp	r3, #3
 8012a2a:	d1f4      	bne.n	8012a16 <__kernel_rem_pio2+0x4f2>
 8012a2c:	9b00      	ldr	r3, [sp, #0]
 8012a2e:	00dc      	lsls	r4, r3, #3
 8012a30:	ab4e      	add	r3, sp, #312	; 0x138
 8012a32:	191c      	adds	r4, r3, r4
 8012a34:	0025      	movs	r5, r4
 8012a36:	9b00      	ldr	r3, [sp, #0]
 8012a38:	9302      	str	r3, [sp, #8]
 8012a3a:	9b02      	ldr	r3, [sp, #8]
 8012a3c:	3d08      	subs	r5, #8
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	dd00      	ble.n	8012a44 <__kernel_rem_pio2+0x520>
 8012a42:	e083      	b.n	8012b4c <__kernel_rem_pio2+0x628>
 8012a44:	9d00      	ldr	r5, [sp, #0]
 8012a46:	3c08      	subs	r4, #8
 8012a48:	2d01      	cmp	r5, #1
 8012a4a:	dd00      	ble.n	8012a4e <__kernel_rem_pio2+0x52a>
 8012a4c:	e0a0      	b.n	8012b90 <__kernel_rem_pio2+0x66c>
 8012a4e:	2400      	movs	r4, #0
 8012a50:	0021      	movs	r1, r4
 8012a52:	9b00      	ldr	r3, [sp, #0]
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	dd00      	ble.n	8012a5a <__kernel_rem_pio2+0x536>
 8012a58:	e0b8      	b.n	8012bcc <__kernel_rem_pio2+0x6a8>
 8012a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a5c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8012a5e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8012a60:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8012a62:	9851      	ldr	r0, [sp, #324]	; 0x144
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d000      	beq.n	8012a6a <__kernel_rem_pio2+0x546>
 8012a68:	e0be      	b.n	8012be8 <__kernel_rem_pio2+0x6c4>
 8012a6a:	0033      	movs	r3, r6
 8012a6c:	003a      	movs	r2, r7
 8012a6e:	9e07      	ldr	r6, [sp, #28]
 8012a70:	6032      	str	r2, [r6, #0]
 8012a72:	6073      	str	r3, [r6, #4]
 8012a74:	002a      	movs	r2, r5
 8012a76:	0003      	movs	r3, r0
 8012a78:	60b2      	str	r2, [r6, #8]
 8012a7a:	60f3      	str	r3, [r6, #12]
 8012a7c:	0022      	movs	r2, r4
 8012a7e:	000b      	movs	r3, r1
 8012a80:	6132      	str	r2, [r6, #16]
 8012a82:	6173      	str	r3, [r6, #20]
 8012a84:	e7c7      	b.n	8012a16 <__kernel_rem_pio2+0x4f2>
 8012a86:	9b00      	ldr	r3, [sp, #0]
 8012a88:	aa4e      	add	r2, sp, #312	; 0x138
 8012a8a:	00db      	lsls	r3, r3, #3
 8012a8c:	18d3      	adds	r3, r2, r3
 8012a8e:	0028      	movs	r0, r5
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	0021      	movs	r1, r4
 8012a96:	f7ee fcb5 	bl	8001404 <__aeabi_dadd>
 8012a9a:	0005      	movs	r5, r0
 8012a9c:	000c      	movs	r4, r1
 8012a9e:	9b00      	ldr	r3, [sp, #0]
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	9300      	str	r3, [sp, #0]
 8012aa4:	9b00      	ldr	r3, [sp, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	daed      	bge.n	8012a86 <__kernel_rem_pio2+0x562>
 8012aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d002      	beq.n	8012ab6 <__kernel_rem_pio2+0x592>
 8012ab0:	2380      	movs	r3, #128	; 0x80
 8012ab2:	061b      	lsls	r3, r3, #24
 8012ab4:	18e4      	adds	r4, r4, r3
 8012ab6:	002a      	movs	r2, r5
 8012ab8:	0023      	movs	r3, r4
 8012aba:	9907      	ldr	r1, [sp, #28]
 8012abc:	600a      	str	r2, [r1, #0]
 8012abe:	604b      	str	r3, [r1, #4]
 8012ac0:	e7a9      	b.n	8012a16 <__kernel_rem_pio2+0x4f2>
 8012ac2:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8012ac4:	002c      	movs	r4, r5
 8012ac6:	e7ed      	b.n	8012aa4 <__kernel_rem_pio2+0x580>
 8012ac8:	00e3      	lsls	r3, r4, #3
 8012aca:	aa4e      	add	r2, sp, #312	; 0x138
 8012acc:	18d3      	adds	r3, r2, r3
 8012ace:	0030      	movs	r0, r6
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	0029      	movs	r1, r5
 8012ad6:	f7ee fc95 	bl	8001404 <__aeabi_dadd>
 8012ada:	0006      	movs	r6, r0
 8012adc:	000d      	movs	r5, r1
 8012ade:	3c01      	subs	r4, #1
 8012ae0:	2c00      	cmp	r4, #0
 8012ae2:	daf1      	bge.n	8012ac8 <__kernel_rem_pio2+0x5a4>
 8012ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ae6:	0029      	movs	r1, r5
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <__kernel_rem_pio2+0x5ce>
 8012aec:	2380      	movs	r3, #128	; 0x80
 8012aee:	061b      	lsls	r3, r3, #24
 8012af0:	18e9      	adds	r1, r5, r3
 8012af2:	0032      	movs	r2, r6
 8012af4:	000b      	movs	r3, r1
 8012af6:	9907      	ldr	r1, [sp, #28]
 8012af8:	2401      	movs	r4, #1
 8012afa:	600a      	str	r2, [r1, #0]
 8012afc:	604b      	str	r3, [r1, #4]
 8012afe:	984e      	ldr	r0, [sp, #312]	; 0x138
 8012b00:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8012b02:	002b      	movs	r3, r5
 8012b04:	f7ef fe5a 	bl	80027bc <__aeabi_dsub>
 8012b08:	0006      	movs	r6, r0
 8012b0a:	000d      	movs	r5, r1
 8012b0c:	9b00      	ldr	r3, [sp, #0]
 8012b0e:	42a3      	cmp	r3, r4
 8012b10:	da0f      	bge.n	8012b32 <__kernel_rem_pio2+0x60e>
 8012b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <__kernel_rem_pio2+0x5fa>
 8012b18:	2380      	movs	r3, #128	; 0x80
 8012b1a:	061b      	lsls	r3, r3, #24
 8012b1c:	18ed      	adds	r5, r5, r3
 8012b1e:	0032      	movs	r2, r6
 8012b20:	002b      	movs	r3, r5
 8012b22:	9907      	ldr	r1, [sp, #28]
 8012b24:	608a      	str	r2, [r1, #8]
 8012b26:	60cb      	str	r3, [r1, #12]
 8012b28:	e775      	b.n	8012a16 <__kernel_rem_pio2+0x4f2>
 8012b2a:	2600      	movs	r6, #0
 8012b2c:	9c00      	ldr	r4, [sp, #0]
 8012b2e:	0035      	movs	r5, r6
 8012b30:	e7d6      	b.n	8012ae0 <__kernel_rem_pio2+0x5bc>
 8012b32:	00e3      	lsls	r3, r4, #3
 8012b34:	aa4e      	add	r2, sp, #312	; 0x138
 8012b36:	18d3      	adds	r3, r2, r3
 8012b38:	0030      	movs	r0, r6
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	0029      	movs	r1, r5
 8012b40:	f7ee fc60 	bl	8001404 <__aeabi_dadd>
 8012b44:	3401      	adds	r4, #1
 8012b46:	0006      	movs	r6, r0
 8012b48:	000d      	movs	r5, r1
 8012b4a:	e7df      	b.n	8012b0c <__kernel_rem_pio2+0x5e8>
 8012b4c:	9b02      	ldr	r3, [sp, #8]
 8012b4e:	68ae      	ldr	r6, [r5, #8]
 8012b50:	68ef      	ldr	r7, [r5, #12]
 8012b52:	3b01      	subs	r3, #1
 8012b54:	9302      	str	r3, [sp, #8]
 8012b56:	682a      	ldr	r2, [r5, #0]
 8012b58:	686b      	ldr	r3, [r5, #4]
 8012b5a:	9204      	str	r2, [sp, #16]
 8012b5c:	9305      	str	r3, [sp, #20]
 8012b5e:	9804      	ldr	r0, [sp, #16]
 8012b60:	9905      	ldr	r1, [sp, #20]
 8012b62:	0032      	movs	r2, r6
 8012b64:	003b      	movs	r3, r7
 8012b66:	f7ee fc4d 	bl	8001404 <__aeabi_dadd>
 8012b6a:	0002      	movs	r2, r0
 8012b6c:	000b      	movs	r3, r1
 8012b6e:	9008      	str	r0, [sp, #32]
 8012b70:	9109      	str	r1, [sp, #36]	; 0x24
 8012b72:	9804      	ldr	r0, [sp, #16]
 8012b74:	9905      	ldr	r1, [sp, #20]
 8012b76:	f7ef fe21 	bl	80027bc <__aeabi_dsub>
 8012b7a:	0032      	movs	r2, r6
 8012b7c:	003b      	movs	r3, r7
 8012b7e:	f7ee fc41 	bl	8001404 <__aeabi_dadd>
 8012b82:	9a08      	ldr	r2, [sp, #32]
 8012b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b86:	60a8      	str	r0, [r5, #8]
 8012b88:	60e9      	str	r1, [r5, #12]
 8012b8a:	602a      	str	r2, [r5, #0]
 8012b8c:	606b      	str	r3, [r5, #4]
 8012b8e:	e754      	b.n	8012a3a <__kernel_rem_pio2+0x516>
 8012b90:	6826      	ldr	r6, [r4, #0]
 8012b92:	6867      	ldr	r7, [r4, #4]
 8012b94:	68a2      	ldr	r2, [r4, #8]
 8012b96:	68e3      	ldr	r3, [r4, #12]
 8012b98:	0030      	movs	r0, r6
 8012b9a:	0039      	movs	r1, r7
 8012b9c:	9202      	str	r2, [sp, #8]
 8012b9e:	9303      	str	r3, [sp, #12]
 8012ba0:	f7ee fc30 	bl	8001404 <__aeabi_dadd>
 8012ba4:	0002      	movs	r2, r0
 8012ba6:	000b      	movs	r3, r1
 8012ba8:	9004      	str	r0, [sp, #16]
 8012baa:	9105      	str	r1, [sp, #20]
 8012bac:	0030      	movs	r0, r6
 8012bae:	0039      	movs	r1, r7
 8012bb0:	f7ef fe04 	bl	80027bc <__aeabi_dsub>
 8012bb4:	9a02      	ldr	r2, [sp, #8]
 8012bb6:	9b03      	ldr	r3, [sp, #12]
 8012bb8:	f7ee fc24 	bl	8001404 <__aeabi_dadd>
 8012bbc:	9a04      	ldr	r2, [sp, #16]
 8012bbe:	9b05      	ldr	r3, [sp, #20]
 8012bc0:	60a0      	str	r0, [r4, #8]
 8012bc2:	60e1      	str	r1, [r4, #12]
 8012bc4:	6022      	str	r2, [r4, #0]
 8012bc6:	6063      	str	r3, [r4, #4]
 8012bc8:	3d01      	subs	r5, #1
 8012bca:	e73c      	b.n	8012a46 <__kernel_rem_pio2+0x522>
 8012bcc:	9b00      	ldr	r3, [sp, #0]
 8012bce:	aa4e      	add	r2, sp, #312	; 0x138
 8012bd0:	00db      	lsls	r3, r3, #3
 8012bd2:	18d3      	adds	r3, r2, r3
 8012bd4:	0020      	movs	r0, r4
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	f7ee fc13 	bl	8001404 <__aeabi_dadd>
 8012bde:	9b00      	ldr	r3, [sp, #0]
 8012be0:	0004      	movs	r4, r0
 8012be2:	3b01      	subs	r3, #1
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	e734      	b.n	8012a52 <__kernel_rem_pio2+0x52e>
 8012be8:	9b07      	ldr	r3, [sp, #28]
 8012bea:	9a07      	ldr	r2, [sp, #28]
 8012bec:	601f      	str	r7, [r3, #0]
 8012bee:	2380      	movs	r3, #128	; 0x80
 8012bf0:	061b      	lsls	r3, r3, #24
 8012bf2:	18f6      	adds	r6, r6, r3
 8012bf4:	18c0      	adds	r0, r0, r3
 8012bf6:	18c9      	adds	r1, r1, r3
 8012bf8:	6056      	str	r6, [r2, #4]
 8012bfa:	6095      	str	r5, [r2, #8]
 8012bfc:	60d0      	str	r0, [r2, #12]
 8012bfe:	6114      	str	r4, [r2, #16]
 8012c00:	6151      	str	r1, [r2, #20]
 8012c02:	e708      	b.n	8012a16 <__kernel_rem_pio2+0x4f2>
 8012c04:	41700000 	.word	0x41700000
 8012c08:	3e700000 	.word	0x3e700000
 8012c0c:	08015a58 	.word	0x08015a58

08012c10 <__kernel_sin>:
 8012c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c12:	b089      	sub	sp, #36	; 0x24
 8012c14:	9202      	str	r2, [sp, #8]
 8012c16:	9303      	str	r3, [sp, #12]
 8012c18:	22f9      	movs	r2, #249	; 0xf9
 8012c1a:	004b      	lsls	r3, r1, #1
 8012c1c:	0007      	movs	r7, r0
 8012c1e:	000e      	movs	r6, r1
 8012c20:	085b      	lsrs	r3, r3, #1
 8012c22:	0592      	lsls	r2, r2, #22
 8012c24:	4293      	cmp	r3, r2
 8012c26:	da03      	bge.n	8012c30 <__kernel_sin+0x20>
 8012c28:	f7f0 f978 	bl	8002f1c <__aeabi_d2iz>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d04c      	beq.n	8012cca <__kernel_sin+0xba>
 8012c30:	003a      	movs	r2, r7
 8012c32:	0033      	movs	r3, r6
 8012c34:	0038      	movs	r0, r7
 8012c36:	0031      	movs	r1, r6
 8012c38:	f7ef fb54 	bl	80022e4 <__aeabi_dmul>
 8012c3c:	0004      	movs	r4, r0
 8012c3e:	000d      	movs	r5, r1
 8012c40:	0002      	movs	r2, r0
 8012c42:	000b      	movs	r3, r1
 8012c44:	0038      	movs	r0, r7
 8012c46:	0031      	movs	r1, r6
 8012c48:	f7ef fb4c 	bl	80022e4 <__aeabi_dmul>
 8012c4c:	4a39      	ldr	r2, [pc, #228]	; (8012d34 <__kernel_sin+0x124>)
 8012c4e:	9000      	str	r0, [sp, #0]
 8012c50:	9101      	str	r1, [sp, #4]
 8012c52:	4b39      	ldr	r3, [pc, #228]	; (8012d38 <__kernel_sin+0x128>)
 8012c54:	0020      	movs	r0, r4
 8012c56:	0029      	movs	r1, r5
 8012c58:	f7ef fb44 	bl	80022e4 <__aeabi_dmul>
 8012c5c:	4a37      	ldr	r2, [pc, #220]	; (8012d3c <__kernel_sin+0x12c>)
 8012c5e:	4b38      	ldr	r3, [pc, #224]	; (8012d40 <__kernel_sin+0x130>)
 8012c60:	f7ef fdac 	bl	80027bc <__aeabi_dsub>
 8012c64:	0022      	movs	r2, r4
 8012c66:	002b      	movs	r3, r5
 8012c68:	f7ef fb3c 	bl	80022e4 <__aeabi_dmul>
 8012c6c:	4a35      	ldr	r2, [pc, #212]	; (8012d44 <__kernel_sin+0x134>)
 8012c6e:	4b36      	ldr	r3, [pc, #216]	; (8012d48 <__kernel_sin+0x138>)
 8012c70:	f7ee fbc8 	bl	8001404 <__aeabi_dadd>
 8012c74:	0022      	movs	r2, r4
 8012c76:	002b      	movs	r3, r5
 8012c78:	f7ef fb34 	bl	80022e4 <__aeabi_dmul>
 8012c7c:	4a33      	ldr	r2, [pc, #204]	; (8012d4c <__kernel_sin+0x13c>)
 8012c7e:	4b34      	ldr	r3, [pc, #208]	; (8012d50 <__kernel_sin+0x140>)
 8012c80:	f7ef fd9c 	bl	80027bc <__aeabi_dsub>
 8012c84:	0022      	movs	r2, r4
 8012c86:	002b      	movs	r3, r5
 8012c88:	f7ef fb2c 	bl	80022e4 <__aeabi_dmul>
 8012c8c:	4b31      	ldr	r3, [pc, #196]	; (8012d54 <__kernel_sin+0x144>)
 8012c8e:	4a32      	ldr	r2, [pc, #200]	; (8012d58 <__kernel_sin+0x148>)
 8012c90:	f7ee fbb8 	bl	8001404 <__aeabi_dadd>
 8012c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c96:	9004      	str	r0, [sp, #16]
 8012c98:	9105      	str	r1, [sp, #20]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d119      	bne.n	8012cd2 <__kernel_sin+0xc2>
 8012c9e:	0002      	movs	r2, r0
 8012ca0:	000b      	movs	r3, r1
 8012ca2:	0020      	movs	r0, r4
 8012ca4:	0029      	movs	r1, r5
 8012ca6:	f7ef fb1d 	bl	80022e4 <__aeabi_dmul>
 8012caa:	4a2c      	ldr	r2, [pc, #176]	; (8012d5c <__kernel_sin+0x14c>)
 8012cac:	4b2c      	ldr	r3, [pc, #176]	; (8012d60 <__kernel_sin+0x150>)
 8012cae:	f7ef fd85 	bl	80027bc <__aeabi_dsub>
 8012cb2:	9a00      	ldr	r2, [sp, #0]
 8012cb4:	9b01      	ldr	r3, [sp, #4]
 8012cb6:	f7ef fb15 	bl	80022e4 <__aeabi_dmul>
 8012cba:	0002      	movs	r2, r0
 8012cbc:	000b      	movs	r3, r1
 8012cbe:	0038      	movs	r0, r7
 8012cc0:	0031      	movs	r1, r6
 8012cc2:	f7ee fb9f 	bl	8001404 <__aeabi_dadd>
 8012cc6:	0007      	movs	r7, r0
 8012cc8:	000e      	movs	r6, r1
 8012cca:	0038      	movs	r0, r7
 8012ccc:	0031      	movs	r1, r6
 8012cce:	b009      	add	sp, #36	; 0x24
 8012cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	9802      	ldr	r0, [sp, #8]
 8012cd6:	9903      	ldr	r1, [sp, #12]
 8012cd8:	4b22      	ldr	r3, [pc, #136]	; (8012d64 <__kernel_sin+0x154>)
 8012cda:	f7ef fb03 	bl	80022e4 <__aeabi_dmul>
 8012cde:	9a04      	ldr	r2, [sp, #16]
 8012ce0:	9b05      	ldr	r3, [sp, #20]
 8012ce2:	9006      	str	r0, [sp, #24]
 8012ce4:	9107      	str	r1, [sp, #28]
 8012ce6:	9800      	ldr	r0, [sp, #0]
 8012ce8:	9901      	ldr	r1, [sp, #4]
 8012cea:	f7ef fafb 	bl	80022e4 <__aeabi_dmul>
 8012cee:	0002      	movs	r2, r0
 8012cf0:	000b      	movs	r3, r1
 8012cf2:	9806      	ldr	r0, [sp, #24]
 8012cf4:	9907      	ldr	r1, [sp, #28]
 8012cf6:	f7ef fd61 	bl	80027bc <__aeabi_dsub>
 8012cfa:	0022      	movs	r2, r4
 8012cfc:	002b      	movs	r3, r5
 8012cfe:	f7ef faf1 	bl	80022e4 <__aeabi_dmul>
 8012d02:	9a02      	ldr	r2, [sp, #8]
 8012d04:	9b03      	ldr	r3, [sp, #12]
 8012d06:	f7ef fd59 	bl	80027bc <__aeabi_dsub>
 8012d0a:	4a14      	ldr	r2, [pc, #80]	; (8012d5c <__kernel_sin+0x14c>)
 8012d0c:	0004      	movs	r4, r0
 8012d0e:	000d      	movs	r5, r1
 8012d10:	9800      	ldr	r0, [sp, #0]
 8012d12:	9901      	ldr	r1, [sp, #4]
 8012d14:	4b12      	ldr	r3, [pc, #72]	; (8012d60 <__kernel_sin+0x150>)
 8012d16:	f7ef fae5 	bl	80022e4 <__aeabi_dmul>
 8012d1a:	0002      	movs	r2, r0
 8012d1c:	000b      	movs	r3, r1
 8012d1e:	0020      	movs	r0, r4
 8012d20:	0029      	movs	r1, r5
 8012d22:	f7ee fb6f 	bl	8001404 <__aeabi_dadd>
 8012d26:	0002      	movs	r2, r0
 8012d28:	000b      	movs	r3, r1
 8012d2a:	0038      	movs	r0, r7
 8012d2c:	0031      	movs	r1, r6
 8012d2e:	f7ef fd45 	bl	80027bc <__aeabi_dsub>
 8012d32:	e7c8      	b.n	8012cc6 <__kernel_sin+0xb6>
 8012d34:	5acfd57c 	.word	0x5acfd57c
 8012d38:	3de5d93a 	.word	0x3de5d93a
 8012d3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d40:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d44:	57b1fe7d 	.word	0x57b1fe7d
 8012d48:	3ec71de3 	.word	0x3ec71de3
 8012d4c:	19c161d5 	.word	0x19c161d5
 8012d50:	3f2a01a0 	.word	0x3f2a01a0
 8012d54:	3f811111 	.word	0x3f811111
 8012d58:	1110f8a6 	.word	0x1110f8a6
 8012d5c:	55555549 	.word	0x55555549
 8012d60:	3fc55555 	.word	0x3fc55555
 8012d64:	3fe00000 	.word	0x3fe00000

08012d68 <fabs>:
 8012d68:	004b      	lsls	r3, r1, #1
 8012d6a:	0859      	lsrs	r1, r3, #1
 8012d6c:	4770      	bx	lr
	...

08012d70 <floor>:
 8012d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d72:	004b      	lsls	r3, r1, #1
 8012d74:	4a3d      	ldr	r2, [pc, #244]	; (8012e6c <floor+0xfc>)
 8012d76:	0d5b      	lsrs	r3, r3, #21
 8012d78:	189f      	adds	r7, r3, r2
 8012d7a:	4684      	mov	ip, r0
 8012d7c:	000e      	movs	r6, r1
 8012d7e:	000d      	movs	r5, r1
 8012d80:	0004      	movs	r4, r0
 8012d82:	9001      	str	r0, [sp, #4]
 8012d84:	2f13      	cmp	r7, #19
 8012d86:	dc34      	bgt.n	8012df2 <floor+0x82>
 8012d88:	2f00      	cmp	r7, #0
 8012d8a:	da16      	bge.n	8012dba <floor+0x4a>
 8012d8c:	4a38      	ldr	r2, [pc, #224]	; (8012e70 <floor+0x100>)
 8012d8e:	4b39      	ldr	r3, [pc, #228]	; (8012e74 <floor+0x104>)
 8012d90:	4660      	mov	r0, ip
 8012d92:	0031      	movs	r1, r6
 8012d94:	f7ee fb36 	bl	8001404 <__aeabi_dadd>
 8012d98:	2200      	movs	r2, #0
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f7ed fb5a 	bl	8000454 <__aeabi_dcmpgt>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d007      	beq.n	8012db4 <floor+0x44>
 8012da4:	2e00      	cmp	r6, #0
 8012da6:	da5d      	bge.n	8012e64 <floor+0xf4>
 8012da8:	0073      	lsls	r3, r6, #1
 8012daa:	085b      	lsrs	r3, r3, #1
 8012dac:	431c      	orrs	r4, r3
 8012dae:	d001      	beq.n	8012db4 <floor+0x44>
 8012db0:	2400      	movs	r4, #0
 8012db2:	4d31      	ldr	r5, [pc, #196]	; (8012e78 <floor+0x108>)
 8012db4:	46a4      	mov	ip, r4
 8012db6:	002e      	movs	r6, r5
 8012db8:	e029      	b.n	8012e0e <floor+0x9e>
 8012dba:	4b30      	ldr	r3, [pc, #192]	; (8012e7c <floor+0x10c>)
 8012dbc:	413b      	asrs	r3, r7
 8012dbe:	9300      	str	r3, [sp, #0]
 8012dc0:	400b      	ands	r3, r1
 8012dc2:	4303      	orrs	r3, r0
 8012dc4:	d023      	beq.n	8012e0e <floor+0x9e>
 8012dc6:	4a2a      	ldr	r2, [pc, #168]	; (8012e70 <floor+0x100>)
 8012dc8:	4b2a      	ldr	r3, [pc, #168]	; (8012e74 <floor+0x104>)
 8012dca:	4660      	mov	r0, ip
 8012dcc:	0031      	movs	r1, r6
 8012dce:	f7ee fb19 	bl	8001404 <__aeabi_dadd>
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f7ed fb3d 	bl	8000454 <__aeabi_dcmpgt>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d0ea      	beq.n	8012db4 <floor+0x44>
 8012dde:	2e00      	cmp	r6, #0
 8012de0:	da03      	bge.n	8012dea <floor+0x7a>
 8012de2:	2380      	movs	r3, #128	; 0x80
 8012de4:	035b      	lsls	r3, r3, #13
 8012de6:	413b      	asrs	r3, r7
 8012de8:	18f5      	adds	r5, r6, r3
 8012dea:	9b00      	ldr	r3, [sp, #0]
 8012dec:	2400      	movs	r4, #0
 8012dee:	439d      	bics	r5, r3
 8012df0:	e7e0      	b.n	8012db4 <floor+0x44>
 8012df2:	2f33      	cmp	r7, #51	; 0x33
 8012df4:	dd0f      	ble.n	8012e16 <floor+0xa6>
 8012df6:	2380      	movs	r3, #128	; 0x80
 8012df8:	00db      	lsls	r3, r3, #3
 8012dfa:	429f      	cmp	r7, r3
 8012dfc:	d107      	bne.n	8012e0e <floor+0x9e>
 8012dfe:	0002      	movs	r2, r0
 8012e00:	000b      	movs	r3, r1
 8012e02:	4660      	mov	r0, ip
 8012e04:	0031      	movs	r1, r6
 8012e06:	f7ee fafd 	bl	8001404 <__aeabi_dadd>
 8012e0a:	4684      	mov	ip, r0
 8012e0c:	000e      	movs	r6, r1
 8012e0e:	4660      	mov	r0, ip
 8012e10:	0031      	movs	r1, r6
 8012e12:	b003      	add	sp, #12
 8012e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e16:	4a1a      	ldr	r2, [pc, #104]	; (8012e80 <floor+0x110>)
 8012e18:	189b      	adds	r3, r3, r2
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	4252      	negs	r2, r2
 8012e1e:	40da      	lsrs	r2, r3
 8012e20:	9200      	str	r2, [sp, #0]
 8012e22:	4210      	tst	r0, r2
 8012e24:	d0f3      	beq.n	8012e0e <floor+0x9e>
 8012e26:	4a12      	ldr	r2, [pc, #72]	; (8012e70 <floor+0x100>)
 8012e28:	4b12      	ldr	r3, [pc, #72]	; (8012e74 <floor+0x104>)
 8012e2a:	4660      	mov	r0, ip
 8012e2c:	0031      	movs	r1, r6
 8012e2e:	f7ee fae9 	bl	8001404 <__aeabi_dadd>
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	f7ed fb0d 	bl	8000454 <__aeabi_dcmpgt>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	d0ba      	beq.n	8012db4 <floor+0x44>
 8012e3e:	2e00      	cmp	r6, #0
 8012e40:	da02      	bge.n	8012e48 <floor+0xd8>
 8012e42:	2f14      	cmp	r7, #20
 8012e44:	d103      	bne.n	8012e4e <floor+0xde>
 8012e46:	3501      	adds	r5, #1
 8012e48:	9b00      	ldr	r3, [sp, #0]
 8012e4a:	439c      	bics	r4, r3
 8012e4c:	e7b2      	b.n	8012db4 <floor+0x44>
 8012e4e:	2334      	movs	r3, #52	; 0x34
 8012e50:	1bdf      	subs	r7, r3, r7
 8012e52:	3b33      	subs	r3, #51	; 0x33
 8012e54:	40bb      	lsls	r3, r7
 8012e56:	18e4      	adds	r4, r4, r3
 8012e58:	9b01      	ldr	r3, [sp, #4]
 8012e5a:	429c      	cmp	r4, r3
 8012e5c:	419b      	sbcs	r3, r3
 8012e5e:	425b      	negs	r3, r3
 8012e60:	18f5      	adds	r5, r6, r3
 8012e62:	e7f1      	b.n	8012e48 <floor+0xd8>
 8012e64:	2400      	movs	r4, #0
 8012e66:	0025      	movs	r5, r4
 8012e68:	e7a4      	b.n	8012db4 <floor+0x44>
 8012e6a:	46c0      	nop			; (mov r8, r8)
 8012e6c:	fffffc01 	.word	0xfffffc01
 8012e70:	8800759c 	.word	0x8800759c
 8012e74:	7e37e43c 	.word	0x7e37e43c
 8012e78:	bff00000 	.word	0xbff00000
 8012e7c:	000fffff 	.word	0x000fffff
 8012e80:	fffffbed 	.word	0xfffffbed

08012e84 <nan>:
 8012e84:	2000      	movs	r0, #0
 8012e86:	4901      	ldr	r1, [pc, #4]	; (8012e8c <nan+0x8>)
 8012e88:	4770      	bx	lr
 8012e8a:	46c0      	nop			; (mov r8, r8)
 8012e8c:	7ff80000 	.word	0x7ff80000

08012e90 <scalbn>:
 8012e90:	004b      	lsls	r3, r1, #1
 8012e92:	b570      	push	{r4, r5, r6, lr}
 8012e94:	0d5b      	lsrs	r3, r3, #21
 8012e96:	0014      	movs	r4, r2
 8012e98:	000a      	movs	r2, r1
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d10d      	bne.n	8012eba <scalbn+0x2a>
 8012e9e:	004b      	lsls	r3, r1, #1
 8012ea0:	085b      	lsrs	r3, r3, #1
 8012ea2:	4303      	orrs	r3, r0
 8012ea4:	d010      	beq.n	8012ec8 <scalbn+0x38>
 8012ea6:	4b27      	ldr	r3, [pc, #156]	; (8012f44 <scalbn+0xb4>)
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f7ef fa1b 	bl	80022e4 <__aeabi_dmul>
 8012eae:	4b26      	ldr	r3, [pc, #152]	; (8012f48 <scalbn+0xb8>)
 8012eb0:	429c      	cmp	r4, r3
 8012eb2:	da0a      	bge.n	8012eca <scalbn+0x3a>
 8012eb4:	4a25      	ldr	r2, [pc, #148]	; (8012f4c <scalbn+0xbc>)
 8012eb6:	4b26      	ldr	r3, [pc, #152]	; (8012f50 <scalbn+0xc0>)
 8012eb8:	e019      	b.n	8012eee <scalbn+0x5e>
 8012eba:	4d26      	ldr	r5, [pc, #152]	; (8012f54 <scalbn+0xc4>)
 8012ebc:	42ab      	cmp	r3, r5
 8012ebe:	d108      	bne.n	8012ed2 <scalbn+0x42>
 8012ec0:	0002      	movs	r2, r0
 8012ec2:	000b      	movs	r3, r1
 8012ec4:	f7ee fa9e 	bl	8001404 <__aeabi_dadd>
 8012ec8:	bd70      	pop	{r4, r5, r6, pc}
 8012eca:	000a      	movs	r2, r1
 8012ecc:	004b      	lsls	r3, r1, #1
 8012ece:	0d5b      	lsrs	r3, r3, #21
 8012ed0:	3b36      	subs	r3, #54	; 0x36
 8012ed2:	4d21      	ldr	r5, [pc, #132]	; (8012f58 <scalbn+0xc8>)
 8012ed4:	18e3      	adds	r3, r4, r3
 8012ed6:	42ab      	cmp	r3, r5
 8012ed8:	dd0c      	ble.n	8012ef4 <scalbn+0x64>
 8012eda:	4c20      	ldr	r4, [pc, #128]	; (8012f5c <scalbn+0xcc>)
 8012edc:	4d20      	ldr	r5, [pc, #128]	; (8012f60 <scalbn+0xd0>)
 8012ede:	2900      	cmp	r1, #0
 8012ee0:	da01      	bge.n	8012ee6 <scalbn+0x56>
 8012ee2:	4c1e      	ldr	r4, [pc, #120]	; (8012f5c <scalbn+0xcc>)
 8012ee4:	4d1f      	ldr	r5, [pc, #124]	; (8012f64 <scalbn+0xd4>)
 8012ee6:	0020      	movs	r0, r4
 8012ee8:	0029      	movs	r1, r5
 8012eea:	4a1c      	ldr	r2, [pc, #112]	; (8012f5c <scalbn+0xcc>)
 8012eec:	4b1c      	ldr	r3, [pc, #112]	; (8012f60 <scalbn+0xd0>)
 8012eee:	f7ef f9f9 	bl	80022e4 <__aeabi_dmul>
 8012ef2:	e7e9      	b.n	8012ec8 <scalbn+0x38>
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	dd05      	ble.n	8012f04 <scalbn+0x74>
 8012ef8:	4c1b      	ldr	r4, [pc, #108]	; (8012f68 <scalbn+0xd8>)
 8012efa:	051b      	lsls	r3, r3, #20
 8012efc:	4022      	ands	r2, r4
 8012efe:	431a      	orrs	r2, r3
 8012f00:	0011      	movs	r1, r2
 8012f02:	e7e1      	b.n	8012ec8 <scalbn+0x38>
 8012f04:	001d      	movs	r5, r3
 8012f06:	3535      	adds	r5, #53	; 0x35
 8012f08:	da13      	bge.n	8012f32 <scalbn+0xa2>
 8012f0a:	4a18      	ldr	r2, [pc, #96]	; (8012f6c <scalbn+0xdc>)
 8012f0c:	0fcb      	lsrs	r3, r1, #31
 8012f0e:	4294      	cmp	r4, r2
 8012f10:	dd08      	ble.n	8012f24 <scalbn+0x94>
 8012f12:	4812      	ldr	r0, [pc, #72]	; (8012f5c <scalbn+0xcc>)
 8012f14:	4912      	ldr	r1, [pc, #72]	; (8012f60 <scalbn+0xd0>)
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <scalbn+0x8e>
 8012f1a:	4810      	ldr	r0, [pc, #64]	; (8012f5c <scalbn+0xcc>)
 8012f1c:	4911      	ldr	r1, [pc, #68]	; (8012f64 <scalbn+0xd4>)
 8012f1e:	4a0f      	ldr	r2, [pc, #60]	; (8012f5c <scalbn+0xcc>)
 8012f20:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <scalbn+0xd0>)
 8012f22:	e7e4      	b.n	8012eee <scalbn+0x5e>
 8012f24:	4809      	ldr	r0, [pc, #36]	; (8012f4c <scalbn+0xbc>)
 8012f26:	490a      	ldr	r1, [pc, #40]	; (8012f50 <scalbn+0xc0>)
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d0c3      	beq.n	8012eb4 <scalbn+0x24>
 8012f2c:	4807      	ldr	r0, [pc, #28]	; (8012f4c <scalbn+0xbc>)
 8012f2e:	4910      	ldr	r1, [pc, #64]	; (8012f70 <scalbn+0xe0>)
 8012f30:	e7c0      	b.n	8012eb4 <scalbn+0x24>
 8012f32:	4c0d      	ldr	r4, [pc, #52]	; (8012f68 <scalbn+0xd8>)
 8012f34:	3336      	adds	r3, #54	; 0x36
 8012f36:	4022      	ands	r2, r4
 8012f38:	051b      	lsls	r3, r3, #20
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	0019      	movs	r1, r3
 8012f3e:	2200      	movs	r2, #0
 8012f40:	4b0c      	ldr	r3, [pc, #48]	; (8012f74 <scalbn+0xe4>)
 8012f42:	e7d4      	b.n	8012eee <scalbn+0x5e>
 8012f44:	43500000 	.word	0x43500000
 8012f48:	ffff3cb0 	.word	0xffff3cb0
 8012f4c:	c2f8f359 	.word	0xc2f8f359
 8012f50:	01a56e1f 	.word	0x01a56e1f
 8012f54:	000007ff 	.word	0x000007ff
 8012f58:	000007fe 	.word	0x000007fe
 8012f5c:	8800759c 	.word	0x8800759c
 8012f60:	7e37e43c 	.word	0x7e37e43c
 8012f64:	fe37e43c 	.word	0xfe37e43c
 8012f68:	800fffff 	.word	0x800fffff
 8012f6c:	0000c350 	.word	0x0000c350
 8012f70:	81a56e1f 	.word	0x81a56e1f
 8012f74:	3c900000 	.word	0x3c900000

08012f78 <_init>:
 8012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7a:	46c0      	nop			; (mov r8, r8)
 8012f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f7e:	bc08      	pop	{r3}
 8012f80:	469e      	mov	lr, r3
 8012f82:	4770      	bx	lr

08012f84 <_fini>:
 8012f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f86:	46c0      	nop			; (mov r8, r8)
 8012f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f8a:	bc08      	pop	{r3}
 8012f8c:	469e      	mov	lr, r3
 8012f8e:	4770      	bx	lr
