
Tacho2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138b0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b88  08013968  08013968  00023968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164f0  080164f0  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  080164f0  080164f0  000264f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164f8  080164f8  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080164f8  080164f8  000264f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080164fc  080164fc  000264fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08016500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200000f0  080165f0  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  080165f0  00030768  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028199  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000474f  00000000  00000000  000582b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0005ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  0005e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c157  00000000  00000000  0005f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022852  00000000  00000000  0007ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15f0  00000000  00000000  0009e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b4  00000000  00000000  0013f8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000f0 	.word	0x200000f0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08013950 	.word	0x08013950

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000f4 	.word	0x200000f4
 80000fc:	08013950 	.word	0x08013950

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c10      	adds	r0, r2, #0
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	1c19      	adds	r1, r3, #0
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 fef7 	bl	8002204 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe41 	bl	80020a8 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fee9 	bl	8002204 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fedf 	bl	8002204 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe63 	bl	8002120 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe59 	bl	8002120 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	1c08      	adds	r0, r1, #0
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000486:	f000 fbef 	bl	8000c68 <__lesf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	d401      	bmi.n	8000492 <__aeabi_cfcmpeq+0xe>
 800048e:	2100      	movs	r1, #0
 8000490:	42c8      	cmn	r0, r1
 8000492:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb73 	bl	8000b80 <__eqsf2>
 800049a:	4240      	negs	r0, r0
 800049c:	3001      	adds	r0, #1
 800049e:	bd10      	pop	{r4, pc}

080004a0 <__aeabi_fcmplt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fbe1 	bl	8000c68 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fcmplt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmple>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fbd7 	bl	8000c68 <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dd01      	ble.n	80004c2 <__aeabi_fcmple+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpgt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb81 	bl	8000bd0 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dc01      	bgt.n	80004d6 <__aeabi_fcmpgt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmpge>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb77 	bl	8000bd0 <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	da01      	bge.n	80004ea <__aeabi_fcmpge+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_ldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d113      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	db06      	blt.n	800050a <__aeabi_ldivmod+0x1a>
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_ldivmod+0x12>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d006      	beq.n	8000510 <__aeabi_ldivmod+0x20>
 8000502:	2000      	movs	r0, #0
 8000504:	43c0      	mvns	r0, r0
 8000506:	0841      	lsrs	r1, r0, #1
 8000508:	e002      	b.n	8000510 <__aeabi_ldivmod+0x20>
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0609      	lsls	r1, r1, #24
 800050e:	2000      	movs	r0, #0
 8000510:	b407      	push	{r0, r1, r2}
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <__aeabi_ldivmod+0x2c>)
 8000514:	a101      	add	r1, pc, #4	; (adr r1, 800051c <__aeabi_ldivmod+0x2c>)
 8000516:	1840      	adds	r0, r0, r1
 8000518:	9002      	str	r0, [sp, #8]
 800051a:	bd03      	pop	{r0, r1, pc}
 800051c:	fffffee1 	.word	0xfffffee1
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f864 	bl	80005f4 <__gnu_ldivmod_helper>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			; (mov r8, r8)

08000538 <__aeabi_lmul>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	0415      	lsls	r5, r2, #16
 800053c:	0c2d      	lsrs	r5, r5, #16
 800053e:	000f      	movs	r7, r1
 8000540:	0001      	movs	r1, r0
 8000542:	002e      	movs	r6, r5
 8000544:	46c6      	mov	lr, r8
 8000546:	4684      	mov	ip, r0
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	0c14      	lsrs	r4, r2, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	0c09      	lsrs	r1, r1, #16
 8000550:	4346      	muls	r6, r0
 8000552:	434d      	muls	r5, r1
 8000554:	4360      	muls	r0, r4
 8000556:	4361      	muls	r1, r4
 8000558:	1940      	adds	r0, r0, r5
 800055a:	0c34      	lsrs	r4, r6, #16
 800055c:	1824      	adds	r4, r4, r0
 800055e:	b500      	push	{lr}
 8000560:	42a5      	cmp	r5, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x34>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4680      	mov	r8, r0
 800056a:	4441      	add	r1, r8
 800056c:	0c25      	lsrs	r5, r4, #16
 800056e:	186d      	adds	r5, r5, r1
 8000570:	4661      	mov	r1, ip
 8000572:	4359      	muls	r1, r3
 8000574:	437a      	muls	r2, r7
 8000576:	0430      	lsls	r0, r6, #16
 8000578:	1949      	adds	r1, r1, r5
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	0c00      	lsrs	r0, r0, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	1889      	adds	r1, r1, r2
 8000582:	bc80      	pop	{r7}
 8000584:	46b8      	mov	r8, r7
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000588 <__aeabi_f2uiz>:
 8000588:	219e      	movs	r1, #158	; 0x9e
 800058a:	b510      	push	{r4, lr}
 800058c:	05c9      	lsls	r1, r1, #23
 800058e:	1c04      	adds	r4, r0, #0
 8000590:	f7ff ffa4 	bl	80004dc <__aeabi_fcmpge>
 8000594:	2800      	cmp	r0, #0
 8000596:	d103      	bne.n	80005a0 <__aeabi_f2uiz+0x18>
 8000598:	1c20      	adds	r0, r4, #0
 800059a:	f000 fe91 	bl	80012c0 <__aeabi_f2iz>
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	219e      	movs	r1, #158	; 0x9e
 80005a2:	1c20      	adds	r0, r4, #0
 80005a4:	05c9      	lsls	r1, r1, #23
 80005a6:	f000 fcc3 	bl	8000f30 <__aeabi_fsub>
 80005aa:	f000 fe89 	bl	80012c0 <__aeabi_f2iz>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	469c      	mov	ip, r3
 80005b4:	4460      	add	r0, ip
 80005b6:	e7f2      	b.n	800059e <__aeabi_f2uiz+0x16>

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff51 	bl	8000468 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fca5 	bl	8002f1c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8ee 	bl	80027bc <__aeabi_dsub>
 80005e0:	f002 fc9c 	bl	8002f1c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__gnu_ldivmod_helper>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	46ce      	mov	lr, r9
 80005f8:	4647      	mov	r7, r8
 80005fa:	b580      	push	{r7, lr}
 80005fc:	4691      	mov	r9, r2
 80005fe:	4698      	mov	r8, r3
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	f002 fe04 	bl	8003210 <__divdi3>
 8000608:	0007      	movs	r7, r0
 800060a:	000e      	movs	r6, r1
 800060c:	0002      	movs	r2, r0
 800060e:	000b      	movs	r3, r1
 8000610:	4648      	mov	r0, r9
 8000612:	4641      	mov	r1, r8
 8000614:	f7ff ff90 	bl	8000538 <__aeabi_lmul>
 8000618:	1a24      	subs	r4, r4, r0
 800061a:	418d      	sbcs	r5, r1
 800061c:	9b08      	ldr	r3, [sp, #32]
 800061e:	0038      	movs	r0, r7
 8000620:	0031      	movs	r1, r6
 8000622:	601c      	str	r4, [r3, #0]
 8000624:	605d      	str	r5, [r3, #4]
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fadd>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4646      	mov	r6, r8
 8000634:	46d6      	mov	lr, sl
 8000636:	464f      	mov	r7, r9
 8000638:	024d      	lsls	r5, r1, #9
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	0a52      	lsrs	r2, r2, #9
 8000640:	0a6e      	lsrs	r6, r5, #9
 8000642:	0047      	lsls	r7, r0, #1
 8000644:	46b0      	mov	r8, r6
 8000646:	0e3f      	lsrs	r7, r7, #24
 8000648:	004e      	lsls	r6, r1, #1
 800064a:	0fc4      	lsrs	r4, r0, #31
 800064c:	00d0      	lsls	r0, r2, #3
 800064e:	4694      	mov	ip, r2
 8000650:	003b      	movs	r3, r7
 8000652:	4682      	mov	sl, r0
 8000654:	0e36      	lsrs	r6, r6, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09ad      	lsrs	r5, r5, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d06d      	beq.n	800073a <__aeabi_fadd+0x10a>
 800065e:	1bb8      	subs	r0, r7, r6
 8000660:	4681      	mov	r9, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	dd4d      	ble.n	8000702 <__aeabi_fadd+0xd2>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x3c>
 800066a:	e088      	b.n	800077e <__aeabi_fadd+0x14e>
 800066c:	2fff      	cmp	r7, #255	; 0xff
 800066e:	d05a      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	04db      	lsls	r3, r3, #19
 8000674:	431d      	orrs	r5, r3
 8000676:	464b      	mov	r3, r9
 8000678:	2201      	movs	r2, #1
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dc0a      	bgt.n	8000694 <__aeabi_fadd+0x64>
 800067e:	002b      	movs	r3, r5
 8000680:	464a      	mov	r2, r9
 8000682:	4649      	mov	r1, r9
 8000684:	40d3      	lsrs	r3, r2
 8000686:	2220      	movs	r2, #32
 8000688:	1a52      	subs	r2, r2, r1
 800068a:	4095      	lsls	r5, r2
 800068c:	002a      	movs	r2, r5
 800068e:	1e55      	subs	r5, r2, #1
 8000690:	41aa      	sbcs	r2, r5
 8000692:	431a      	orrs	r2, r3
 8000694:	4653      	mov	r3, sl
 8000696:	1a9a      	subs	r2, r3, r2
 8000698:	0153      	lsls	r3, r2, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x6e>
 800069c:	e0b9      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	0996      	lsrs	r6, r2, #6
 80006a2:	0030      	movs	r0, r6
 80006a4:	f002 fd96 	bl	80031d4 <__clzsi2>
 80006a8:	3805      	subs	r0, #5
 80006aa:	4086      	lsls	r6, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_fadd+0x82>
 80006b0:	e0d4      	b.n	800085c <__aeabi_fadd+0x22c>
 80006b2:	0033      	movs	r3, r6
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	2020      	movs	r0, #32
 80006b8:	3701      	adds	r7, #1
 80006ba:	40fb      	lsrs	r3, r7
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1e56      	subs	r6, r2, #1
 80006c4:	41b2      	sbcs	r2, r6
 80006c6:	2700      	movs	r7, #0
 80006c8:	431a      	orrs	r2, r3
 80006ca:	0753      	lsls	r3, r2, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006ce:	230f      	movs	r3, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fadd+0xae>
 80006dc:	e09c      	b.n	8000818 <__aeabi_fadd+0x1e8>
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	2ffe      	cmp	r7, #254	; 0xfe
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xb6>
 80006e4:	e09a      	b.n	800081c <__aeabi_fadd+0x1ec>
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	4694      	mov	ip, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	05d8      	lsls	r0, r3, #23
 80006f0:	4663      	mov	r3, ip
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4318      	orrs	r0, r3
 80006f6:	4320      	orrs	r0, r4
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	2800      	cmp	r0, #0
 8000704:	d049      	beq.n	800079a <__aeabi_fadd+0x16a>
 8000706:	1bf3      	subs	r3, r6, r7
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fadd+0x24c>
 800070e:	4652      	mov	r2, sl
 8000710:	2a00      	cmp	r2, #0
 8000712:	d060      	beq.n	80007d6 <__aeabi_fadd+0x1a6>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0xec>
 800071a:	e0fc      	b.n	8000916 <__aeabi_fadd+0x2e6>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xf2>
 8000720:	e0b4      	b.n	800088c <__aeabi_fadd+0x25c>
 8000722:	000c      	movs	r4, r1
 8000724:	4642      	mov	r2, r8
 8000726:	2a00      	cmp	r2, #0
 8000728:	d078      	beq.n	800081c <__aeabi_fadd+0x1ec>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4310      	orrs	r0, r2
 8000730:	0242      	lsls	r2, r0, #9
 8000732:	0a53      	lsrs	r3, r2, #9
 8000734:	469c      	mov	ip, r3
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	e7d9      	b.n	80006ee <__aeabi_fadd+0xbe>
 800073a:	1bb9      	subs	r1, r7, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	dd71      	ble.n	8000824 <__aeabi_fadd+0x1f4>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d03f      	beq.n	80007c4 <__aeabi_fadd+0x194>
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d0ee      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2201      	movs	r2, #1
 8000750:	291b      	cmp	r1, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x134>
 8000754:	002a      	movs	r2, r5
 8000756:	2320      	movs	r3, #32
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	408d      	lsls	r5, r1
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	432a      	orrs	r2, r5
 8000764:	4452      	add	r2, sl
 8000766:	0153      	lsls	r3, r2, #5
 8000768:	d553      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800076a:	3701      	adds	r7, #1
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d055      	beq.n	800081c <__aeabi_fadd+0x1ec>
 8000770:	2301      	movs	r3, #1
 8000772:	497b      	ldr	r1, [pc, #492]	; (8000960 <__aeabi_fadd+0x330>)
 8000774:	4013      	ands	r3, r2
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	e7a5      	b.n	80006ca <__aeabi_fadd+0x9a>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d02c      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	469c      	mov	ip, r3
 8000788:	44e1      	add	r9, ip
 800078a:	464b      	mov	r3, r9
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x162>
 8000790:	e0ad      	b.n	80008ee <__aeabi_fadd+0x2be>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x168>
 8000796:	e76e      	b.n	8000676 <__aeabi_fadd+0x46>
 8000798:	e7c5      	b.n	8000726 <__aeabi_fadd+0xf6>
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c7e      	adds	r6, r7, #1
 800079e:	4230      	tst	r0, r6
 80007a0:	d160      	bne.n	8000864 <__aeabi_fadd+0x234>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x178>
 80007a6:	e093      	b.n	80008d0 <__aeabi_fadd+0x2a0>
 80007a8:	4652      	mov	r2, sl
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x180>
 80007ae:	e0b6      	b.n	800091e <__aeabi_fadd+0x2ee>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d09c      	beq.n	80006ee <__aeabi_fadd+0xbe>
 80007b4:	1b52      	subs	r2, r2, r5
 80007b6:	0150      	lsls	r0, r2, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x18c>
 80007ba:	e0c3      	b.n	8000944 <__aeabi_fadd+0x314>
 80007bc:	4653      	mov	r3, sl
 80007be:	000c      	movs	r4, r1
 80007c0:	1aea      	subs	r2, r5, r3
 80007c2:	e782      	b.n	80006ca <__aeabi_fadd+0x9a>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d009      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 80007c8:	3901      	subs	r1, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x1a0>
 80007ce:	e08b      	b.n	80008e8 <__aeabi_fadd+0x2b8>
 80007d0:	2fff      	cmp	r7, #255	; 0xff
 80007d2:	d1bc      	bne.n	800074e <__aeabi_fadd+0x11e>
 80007d4:	e7a7      	b.n	8000726 <__aeabi_fadd+0xf6>
 80007d6:	000c      	movs	r4, r1
 80007d8:	4642      	mov	r2, r8
 80007da:	0037      	movs	r7, r6
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d0a2      	beq.n	8000726 <__aeabi_fadd+0xf6>
 80007e0:	0252      	lsls	r2, r2, #9
 80007e2:	0a53      	lsrs	r3, r2, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2fb      	uxtb	r3, r7
 80007e8:	e781      	b.n	80006ee <__aeabi_fadd+0xbe>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	3701      	adds	r7, #1
 80007ee:	4239      	tst	r1, r7
 80007f0:	d165      	bne.n	80008be <__aeabi_fadd+0x28e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17e      	bne.n	80008f4 <__aeabi_fadd+0x2c4>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1cc>
 80007fa:	e0aa      	b.n	8000952 <__aeabi_fadd+0x322>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x1d2>
 8000800:	e775      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000802:	002a      	movs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	2700      	movs	r7, #0
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d502      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <__aeabi_fadd+0x334>)
 800080e:	3701      	adds	r7, #1
 8000810:	401a      	ands	r2, r3
 8000812:	0753      	lsls	r3, r2, #29
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x1e8>
 8000816:	e75a      	b.n	80006ce <__aeabi_fadd+0x9e>
 8000818:	08d2      	lsrs	r2, r2, #3
 800081a:	e7df      	b.n	80007dc <__aeabi_fadd+0x1ac>
 800081c:	2200      	movs	r2, #0
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	4694      	mov	ip, r2
 8000822:	e764      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000824:	2900      	cmp	r1, #0
 8000826:	d0e0      	beq.n	80007ea <__aeabi_fadd+0x1ba>
 8000828:	1bf3      	subs	r3, r6, r7
 800082a:	2f00      	cmp	r7, #0
 800082c:	d03e      	beq.n	80008ac <__aeabi_fadd+0x27c>
 800082e:	2eff      	cmp	r6, #255	; 0xff
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x204>
 8000832:	e777      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0001      	movs	r1, r0
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4311      	orrs	r1, r2
 800083c:	468a      	mov	sl, r1
 800083e:	2201      	movs	r2, #1
 8000840:	2b1b      	cmp	r3, #27
 8000842:	dc08      	bgt.n	8000856 <__aeabi_fadd+0x226>
 8000844:	4652      	mov	r2, sl
 8000846:	2120      	movs	r1, #32
 8000848:	4650      	mov	r0, sl
 800084a:	40da      	lsrs	r2, r3
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	4098      	lsls	r0, r3
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4302      	orrs	r2, r0
 8000856:	0037      	movs	r7, r6
 8000858:	1952      	adds	r2, r2, r5
 800085a:	e784      	b.n	8000766 <__aeabi_fadd+0x136>
 800085c:	4a41      	ldr	r2, [pc, #260]	; (8000964 <__aeabi_fadd+0x334>)
 800085e:	1a3f      	subs	r7, r7, r0
 8000860:	4032      	ands	r2, r6
 8000862:	e732      	b.n	80006ca <__aeabi_fadd+0x9a>
 8000864:	4653      	mov	r3, sl
 8000866:	1b5e      	subs	r6, r3, r5
 8000868:	0173      	lsls	r3, r6, #5
 800086a:	d42d      	bmi.n	80008c8 <__aeabi_fadd+0x298>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fadd+0x242>
 8000870:	e717      	b.n	80006a2 <__aeabi_fadd+0x72>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	2300      	movs	r3, #0
 8000878:	4694      	mov	ip, r2
 800087a:	e738      	b.n	80006ee <__aeabi_fadd+0xbe>
 800087c:	2eff      	cmp	r6, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x252>
 8000880:	e74f      	b.n	8000722 <__aeabi_fadd+0xf2>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4650      	mov	r0, sl
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	4310      	orrs	r0, r2
 800088a:	4682      	mov	sl, r0
 800088c:	2201      	movs	r2, #1
 800088e:	2b1b      	cmp	r3, #27
 8000890:	dc08      	bgt.n	80008a4 <__aeabi_fadd+0x274>
 8000892:	4652      	mov	r2, sl
 8000894:	2420      	movs	r4, #32
 8000896:	4650      	mov	r0, sl
 8000898:	40da      	lsrs	r2, r3
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	4098      	lsls	r0, r3
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4302      	orrs	r2, r0
 80008a4:	000c      	movs	r4, r1
 80008a6:	0037      	movs	r7, r6
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	e6f5      	b.n	8000698 <__aeabi_fadd+0x68>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d093      	beq.n	80007d8 <__aeabi_fadd+0x1a8>
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04f      	beq.n	8000956 <__aeabi_fadd+0x326>
 80008b6:	2eff      	cmp	r6, #255	; 0xff
 80008b8:	d1c1      	bne.n	800083e <__aeabi_fadd+0x20e>
 80008ba:	4642      	mov	r2, r8
 80008bc:	e733      	b.n	8000726 <__aeabi_fadd+0xf6>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d0ac      	beq.n	800081c <__aeabi_fadd+0x1ec>
 80008c2:	4455      	add	r5, sl
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	e7a4      	b.n	8000812 <__aeabi_fadd+0x1e2>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aee      	subs	r6, r5, r3
 80008ce:	e6e8      	b.n	80006a2 <__aeabi_fadd+0x72>
 80008d0:	4653      	mov	r3, sl
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d128      	bne.n	8000928 <__aeabi_fadd+0x2f8>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x2ac>
 80008da:	e722      	b.n	8000722 <__aeabi_fadd+0xf2>
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	469c      	mov	ip, r3
 80008e2:	2400      	movs	r4, #0
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	e702      	b.n	80006ee <__aeabi_fadd+0xbe>
 80008e8:	002a      	movs	r2, r5
 80008ea:	4452      	add	r2, sl
 80008ec:	e73b      	b.n	8000766 <__aeabi_fadd+0x136>
 80008ee:	4653      	mov	r3, sl
 80008f0:	1b5a      	subs	r2, r3, r5
 80008f2:	e6d1      	b.n	8000698 <__aeabi_fadd+0x68>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x2ca>
 80008f8:	e714      	b.n	8000724 <__aeabi_fadd+0xf4>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2d0>
 80008fe:	e712      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	03db      	lsls	r3, r3, #15
 8000904:	421a      	tst	r2, r3
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x2da>
 8000908:	e70d      	b.n	8000726 <__aeabi_fadd+0xf6>
 800090a:	4641      	mov	r1, r8
 800090c:	4219      	tst	r1, r3
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x2e2>
 8000910:	e709      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000912:	4642      	mov	r2, r8
 8000914:	e707      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000916:	000c      	movs	r4, r1
 8000918:	0037      	movs	r7, r6
 800091a:	1aaa      	subs	r2, r5, r2
 800091c:	e6bc      	b.n	8000698 <__aeabi_fadd+0x68>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d013      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000922:	000c      	movs	r4, r1
 8000924:	46c4      	mov	ip, r8
 8000926:	e6e2      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2fe>
 800092c:	e6fb      	b.n	8000726 <__aeabi_fadd+0xf6>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	03db      	lsls	r3, r3, #15
 8000932:	421a      	tst	r2, r3
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x308>
 8000936:	e6f6      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000938:	4640      	mov	r0, r8
 800093a:	4218      	tst	r0, r3
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x310>
 800093e:	e6f2      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000940:	000c      	movs	r4, r1
 8000942:	e6ef      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000944:	2a00      	cmp	r2, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000948:	e763      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	4694      	mov	ip, r2
 8000950:	e6cd      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000952:	46c4      	mov	ip, r8
 8000954:	e6cb      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000956:	002a      	movs	r2, r5
 8000958:	0037      	movs	r7, r6
 800095a:	4452      	add	r2, sl
 800095c:	e703      	b.n	8000766 <__aeabi_fadd+0x136>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fdiv>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	464f      	mov	r7, r9
 800096c:	4646      	mov	r6, r8
 800096e:	46d6      	mov	lr, sl
 8000970:	0245      	lsls	r5, r0, #9
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	0047      	lsls	r7, r0, #1
 8000976:	1c0c      	adds	r4, r1, #0
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e3f      	lsrs	r7, r7, #24
 800097c:	0fc6      	lsrs	r6, r0, #31
 800097e:	2f00      	cmp	r7, #0
 8000980:	d066      	beq.n	8000a50 <__aeabi_fdiv+0xe8>
 8000982:	2fff      	cmp	r7, #255	; 0xff
 8000984:	d06c      	beq.n	8000a60 <__aeabi_fdiv+0xf8>
 8000986:	2300      	movs	r3, #0
 8000988:	00ea      	lsls	r2, r5, #3
 800098a:	2580      	movs	r5, #128	; 0x80
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	04ed      	lsls	r5, r5, #19
 8000992:	4315      	orrs	r5, r2
 8000994:	3f7f      	subs	r7, #127	; 0x7f
 8000996:	0260      	lsls	r0, r4, #9
 8000998:	0061      	lsls	r1, r4, #1
 800099a:	0a43      	lsrs	r3, r0, #9
 800099c:	4698      	mov	r8, r3
 800099e:	0e09      	lsrs	r1, r1, #24
 80009a0:	0fe4      	lsrs	r4, r4, #31
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d048      	beq.n	8000a38 <__aeabi_fdiv+0xd0>
 80009a6:	29ff      	cmp	r1, #255	; 0xff
 80009a8:	d010      	beq.n	80009cc <__aeabi_fdiv+0x64>
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	00d8      	lsls	r0, r3, #3
 80009ae:	04d2      	lsls	r2, r2, #19
 80009b0:	4302      	orrs	r2, r0
 80009b2:	4690      	mov	r8, r2
 80009b4:	2000      	movs	r0, #0
 80009b6:	397f      	subs	r1, #127	; 0x7f
 80009b8:	464a      	mov	r2, r9
 80009ba:	0033      	movs	r3, r6
 80009bc:	1a7f      	subs	r7, r7, r1
 80009be:	4302      	orrs	r2, r0
 80009c0:	496c      	ldr	r1, [pc, #432]	; (8000b74 <__aeabi_fdiv+0x20c>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	588a      	ldr	r2, [r1, r2]
 80009c6:	4063      	eors	r3, r4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4697      	mov	pc, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d16d      	bne.n	8000aac <__aeabi_fdiv+0x144>
 80009d0:	2002      	movs	r0, #2
 80009d2:	3fff      	subs	r7, #255	; 0xff
 80009d4:	e033      	b.n	8000a3e <__aeabi_fdiv+0xd6>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4698      	mov	r8, r3
 80009da:	0026      	movs	r6, r4
 80009dc:	4645      	mov	r5, r8
 80009de:	4682      	mov	sl, r0
 80009e0:	4653      	mov	r3, sl
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fdiv+0x80>
 80009e6:	e07f      	b.n	8000ae8 <__aeabi_fdiv+0x180>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d100      	bne.n	80009ee <__aeabi_fdiv+0x86>
 80009ec:	e094      	b.n	8000b18 <__aeabi_fdiv+0x1b0>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d017      	beq.n	8000a22 <__aeabi_fdiv+0xba>
 80009f2:	0038      	movs	r0, r7
 80009f4:	307f      	adds	r0, #127	; 0x7f
 80009f6:	2800      	cmp	r0, #0
 80009f8:	dd5f      	ble.n	8000aba <__aeabi_fdiv+0x152>
 80009fa:	076b      	lsls	r3, r5, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 80009fe:	230f      	movs	r3, #15
 8000a00:	402b      	ands	r3, r5
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 8000a06:	3504      	adds	r5, #4
 8000a08:	012b      	lsls	r3, r5, #4
 8000a0a:	d503      	bpl.n	8000a14 <__aeabi_fdiv+0xac>
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <__aeabi_fdiv+0x210>)
 8000a10:	3080      	adds	r0, #128	; 0x80
 8000a12:	401d      	ands	r5, r3
 8000a14:	28fe      	cmp	r0, #254	; 0xfe
 8000a16:	dc67      	bgt.n	8000ae8 <__aeabi_fdiv+0x180>
 8000a18:	01ad      	lsls	r5, r5, #6
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	b2c0      	uxtb	r0, r0
 8000a1e:	e002      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a20:	001e      	movs	r6, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	2500      	movs	r5, #0
 8000a26:	05c0      	lsls	r0, r0, #23
 8000a28:	4328      	orrs	r0, r5
 8000a2a:	07f6      	lsls	r6, r6, #31
 8000a2c:	4330      	orrs	r0, r6
 8000a2e:	bce0      	pop	{r5, r6, r7}
 8000a30:	46ba      	mov	sl, r7
 8000a32:	46b1      	mov	r9, r6
 8000a34:	46a8      	mov	r8, r5
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <__aeabi_fdiv+0x12c>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	464a      	mov	r2, r9
 8000a40:	0033      	movs	r3, r6
 8000a42:	494e      	ldr	r1, [pc, #312]	; (8000b7c <__aeabi_fdiv+0x214>)
 8000a44:	4302      	orrs	r2, r0
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	588a      	ldr	r2, [r1, r2]
 8000a4a:	4063      	eors	r3, r4
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4697      	mov	pc, r2
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d113      	bne.n	8000a7c <__aeabi_fdiv+0x114>
 8000a54:	2304      	movs	r3, #4
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e79a      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d105      	bne.n	8000a70 <__aeabi_fdiv+0x108>
 8000a64:	2308      	movs	r3, #8
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e792      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a70:	230c      	movs	r3, #12
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b09      	subs	r3, #9
 8000a76:	27ff      	movs	r7, #255	; 0xff
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e78c      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	f002 fba9 	bl	80031d4 <__clzsi2>
 8000a82:	2776      	movs	r7, #118	; 0x76
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409d      	lsls	r5, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	427f      	negs	r7, r7
 8000a8c:	4699      	mov	r9, r3
 8000a8e:	469a      	mov	sl, r3
 8000a90:	1a3f      	subs	r7, r7, r0
 8000a92:	e780      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fb9d 	bl	80031d4 <__clzsi2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	1f43      	subs	r3, r0, #5
 8000a9e:	2176      	movs	r1, #118	; 0x76
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	4690      	mov	r8, r2
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e785      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000aac:	21ff      	movs	r1, #255	; 0xff
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	20ff      	movs	r0, #255	; 0xff
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	e7b5      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aba:	2301      	movs	r3, #1
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	dcaf      	bgt.n	8000a22 <__aeabi_fdiv+0xba>
 8000ac2:	379e      	adds	r7, #158	; 0x9e
 8000ac4:	0029      	movs	r1, r5
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	1e6a      	subs	r2, r5, #1
 8000acc:	4195      	sbcs	r5, r2
 8000ace:	430d      	orrs	r5, r1
 8000ad0:	076b      	lsls	r3, r5, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	402b      	ands	r3, r5
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000adc:	3504      	adds	r5, #4
 8000ade:	016b      	lsls	r3, r5, #5
 8000ae0:	d544      	bpl.n	8000b6c <__aeabi_fdiv+0x204>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e79e      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	2500      	movs	r5, #0
 8000aec:	e79b      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aee:	2580      	movs	r5, #128	; 0x80
 8000af0:	2600      	movs	r6, #0
 8000af2:	20ff      	movs	r0, #255	; 0xff
 8000af4:	03ed      	lsls	r5, r5, #15
 8000af6:	e796      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000af8:	2300      	movs	r3, #0
 8000afa:	4698      	mov	r8, r3
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	03c0      	lsls	r0, r0, #15
 8000b00:	4205      	tst	r5, r0
 8000b02:	d009      	beq.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b04:	4643      	mov	r3, r8
 8000b06:	4203      	tst	r3, r0
 8000b08:	d106      	bne.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	4305      	orrs	r5, r0
 8000b0e:	026d      	lsls	r5, r5, #9
 8000b10:	0026      	movs	r6, r4
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e786      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b18:	2080      	movs	r0, #128	; 0x80
 8000b1a:	03c0      	lsls	r0, r0, #15
 8000b1c:	4305      	orrs	r5, r0
 8000b1e:	026d      	lsls	r5, r5, #9
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	0a6d      	lsrs	r5, r5, #9
 8000b24:	e77f      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b26:	4641      	mov	r1, r8
 8000b28:	016a      	lsls	r2, r5, #5
 8000b2a:	0148      	lsls	r0, r1, #5
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	d219      	bcs.n	8000b64 <__aeabi_fdiv+0x1fc>
 8000b30:	211b      	movs	r1, #27
 8000b32:	2500      	movs	r5, #0
 8000b34:	3f01      	subs	r7, #1
 8000b36:	2601      	movs	r6, #1
 8000b38:	0014      	movs	r4, r2
 8000b3a:	006d      	lsls	r5, r5, #1
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	db01      	blt.n	8000b46 <__aeabi_fdiv+0x1de>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d801      	bhi.n	8000b4a <__aeabi_fdiv+0x1e2>
 8000b46:	1a12      	subs	r2, r2, r0
 8000b48:	4335      	orrs	r5, r6
 8000b4a:	3901      	subs	r1, #1
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d1f3      	bne.n	8000b38 <__aeabi_fdiv+0x1d0>
 8000b50:	1e50      	subs	r0, r2, #1
 8000b52:	4182      	sbcs	r2, r0
 8000b54:	0038      	movs	r0, r7
 8000b56:	307f      	adds	r0, #127	; 0x7f
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4315      	orrs	r5, r2
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_fdiv+0x1fa>
 8000b60:	e74b      	b.n	80009fa <__aeabi_fdiv+0x92>
 8000b62:	e7aa      	b.n	8000aba <__aeabi_fdiv+0x152>
 8000b64:	211a      	movs	r1, #26
 8000b66:	2501      	movs	r5, #1
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	e7e4      	b.n	8000b36 <__aeabi_fdiv+0x1ce>
 8000b6c:	01ad      	lsls	r5, r5, #6
 8000b6e:	2000      	movs	r0, #0
 8000b70:	0a6d      	lsrs	r5, r5, #9
 8000b72:	e758      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b74:	08013e14 	.word	0x08013e14
 8000b78:	f7ffffff 	.word	0xf7ffffff
 8000b7c:	08013e54 	.word	0x08013e54

08000b80 <__eqsf2>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	024e      	lsls	r6, r1, #9
 8000b86:	004c      	lsls	r4, r1, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__eqsf2+0x3a>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d011      	beq.n	8000bc2 <__eqsf2+0x42>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	d000      	beq.n	8000ba6 <__eqsf2+0x26>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x24>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d00d      	beq.n	8000bca <__eqsf2+0x4a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1e45      	subs	r5, r0, #1
 8000bb6:	41a8      	sbcs	r0, r5
 8000bb8:	e7f4      	b.n	8000ba4 <__eqsf2+0x24>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc0:	e7eb      	b.n	8000b9a <__eqsf2+0x1a>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc8:	e7e9      	b.n	8000b9e <__eqsf2+0x1e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__eqsf2+0x24>
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__gesf2>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0246      	lsls	r6, r0, #9
 8000bd6:	024d      	lsls	r5, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01f      	beq.n	8000c2a <__gesf2+0x5a>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d010      	beq.n	8000c10 <__gesf2+0x40>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11f      	bne.n	8000c32 <__gesf2+0x62>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d101      	bne.n	8000bfe <__gesf2+0x2e>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d01e      	beq.n	8000c3c <__gesf2+0x6c>
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d10e      	bne.n	8000c20 <__gesf2+0x50>
 8000c02:	4283      	cmp	r3, r0
 8000c04:	d01e      	beq.n	8000c44 <__gesf2+0x74>
 8000c06:	2102      	movs	r1, #2
 8000c08:	1e58      	subs	r0, r3, #1
 8000c0a:	4008      	ands	r0, r1
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d126      	bne.n	8000c62 <__gesf2+0x92>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f4      	bne.n	8000c02 <__gesf2+0x32>
 8000c18:	4271      	negs	r1, r6
 8000c1a:	4171      	adcs	r1, r6
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d0f0      	beq.n	8000c02 <__gesf2+0x32>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f4      	bne.n	8000c0e <__gesf2+0x3e>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f1      	b.n	8000c0e <__gesf2+0x3e>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d119      	bne.n	8000c62 <__gesf2+0x92>
 8000c2e:	2cff      	cmp	r4, #255	; 0xff
 8000c30:	d0ee      	beq.n	8000c10 <__gesf2+0x40>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d1e5      	bne.n	8000c02 <__gesf2+0x32>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d1e3      	bne.n	8000c02 <__gesf2+0x32>
 8000c3a:	e7e4      	b.n	8000c06 <__gesf2+0x36>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0e5      	beq.n	8000c0e <__gesf2+0x3e>
 8000c42:	e7e0      	b.n	8000c06 <__gesf2+0x36>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__gesf2+0x84>
 8000c48:	dbea      	blt.n	8000c20 <__gesf2+0x50>
 8000c4a:	42ae      	cmp	r6, r5
 8000c4c:	d802      	bhi.n	8000c54 <__gesf2+0x84>
 8000c4e:	d3e7      	bcc.n	8000c20 <__gesf2+0x50>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7dc      	b.n	8000c0e <__gesf2+0x3e>
 8000c54:	4241      	negs	r1, r0
 8000c56:	4141      	adcs	r1, r0
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4008      	ands	r0, r1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7d5      	b.n	8000c0e <__gesf2+0x3e>
 8000c62:	2002      	movs	r0, #2
 8000c64:	4240      	negs	r0, r0
 8000c66:	e7d2      	b.n	8000c0e <__gesf2+0x3e>

08000c68 <__lesf2>:
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	0246      	lsls	r6, r0, #9
 8000c6e:	024d      	lsls	r5, r1, #9
 8000c70:	004c      	lsls	r4, r1, #1
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	0a6d      	lsrs	r5, r5, #9
 8000c7a:	0e24      	lsrs	r4, r4, #24
 8000c7c:	0fc8      	lsrs	r0, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	; 0xff
 8000c80:	d00d      	beq.n	8000c9e <__lesf2+0x36>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d00f      	beq.n	8000ca6 <__lesf2+0x3e>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d123      	bne.n	8000cd2 <__lesf2+0x6a>
 8000c8a:	4271      	negs	r1, r6
 8000c8c:	4171      	adcs	r1, r6
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d10f      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d10d      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c96:	2000      	movs	r0, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d014      	beq.n	8000cc6 <__lesf2+0x5e>
 8000c9c:	e00d      	b.n	8000cba <__lesf2+0x52>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d110      	bne.n	8000cc4 <__lesf2+0x5c>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d115      	bne.n	8000cd2 <__lesf2+0x6a>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d10c      	bne.n	8000cc4 <__lesf2+0x5c>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d103      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cae:	4271      	negs	r1, r6
 8000cb0:	4171      	adcs	r1, r6
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d108      	bne.n	8000cc8 <__lesf2+0x60>
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	d010      	beq.n	8000cdc <__lesf2+0x74>
 8000cba:	2102      	movs	r1, #2
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	4008      	ands	r0, r1
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e000      	b.n	8000cc6 <__lesf2+0x5e>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d1fc      	bne.n	8000cc6 <__lesf2+0x5e>
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4240      	negs	r0, r0
 8000cd0:	e7f9      	b.n	8000cc6 <__lesf2+0x5e>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d1ef      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d1ed      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cda:	e7ee      	b.n	8000cba <__lesf2+0x52>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	dc05      	bgt.n	8000cec <__lesf2+0x84>
 8000ce0:	dbf2      	blt.n	8000cc8 <__lesf2+0x60>
 8000ce2:	42ae      	cmp	r6, r5
 8000ce4:	d802      	bhi.n	8000cec <__lesf2+0x84>
 8000ce6:	d3ef      	bcc.n	8000cc8 <__lesf2+0x60>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7ec      	b.n	8000cc6 <__lesf2+0x5e>
 8000cec:	4241      	negs	r1, r0
 8000cee:	4141      	adcs	r1, r0
 8000cf0:	4248      	negs	r0, r1
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4008      	ands	r0, r1
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	e7e5      	b.n	8000cc6 <__lesf2+0x5e>
 8000cfa:	46c0      	nop			; (mov r8, r8)

08000cfc <__aeabi_fmul>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	0244      	lsls	r4, r0, #9
 8000d08:	b5e0      	push	{r5, r6, r7, lr}
 8000d0a:	0045      	lsls	r5, r0, #1
 8000d0c:	1c0f      	adds	r7, r1, #0
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	0e2d      	lsrs	r5, r5, #24
 8000d12:	0fc6      	lsrs	r6, r0, #31
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d047      	beq.n	8000da8 <__aeabi_fmul+0xac>
 8000d18:	2dff      	cmp	r5, #255	; 0xff
 8000d1a:	d04d      	beq.n	8000db8 <__aeabi_fmul+0xbc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	469a      	mov	sl, r3
 8000d22:	469b      	mov	fp, r3
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	04c0      	lsls	r0, r0, #19
 8000d28:	4304      	orrs	r4, r0
 8000d2a:	3d7f      	subs	r5, #127	; 0x7f
 8000d2c:	0278      	lsls	r0, r7, #9
 8000d2e:	0a43      	lsrs	r3, r0, #9
 8000d30:	4699      	mov	r9, r3
 8000d32:	007a      	lsls	r2, r7, #1
 8000d34:	0ffb      	lsrs	r3, r7, #31
 8000d36:	4698      	mov	r8, r3
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	d044      	beq.n	8000dc8 <__aeabi_fmul+0xcc>
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d011      	beq.n	8000d66 <__aeabi_fmul+0x6a>
 8000d42:	00d8      	lsls	r0, r3, #3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	04db      	lsls	r3, r3, #19
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	18ad      	adds	r5, r5, r2
 8000d52:	4647      	mov	r7, r8
 8000d54:	4653      	mov	r3, sl
 8000d56:	4077      	eors	r7, r6
 8000d58:	1c69      	adds	r1, r5, #1
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d83f      	bhi.n	8000dde <__aeabi_fmul+0xe2>
 8000d5e:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <__aeabi_fmul+0x22c>)
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	58d3      	ldr	r3, [r2, r3]
 8000d64:	469f      	mov	pc, r3
 8000d66:	35ff      	adds	r5, #255	; 0xff
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x72>
 8000d6c:	e079      	b.n	8000e62 <__aeabi_fmul+0x166>
 8000d6e:	4652      	mov	r2, sl
 8000d70:	2302      	movs	r3, #2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	4692      	mov	sl, r2
 8000d76:	2002      	movs	r0, #2
 8000d78:	e7eb      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	4683      	mov	fp, r0
 8000d80:	465b      	mov	r3, fp
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d028      	beq.n	8000dd8 <__aeabi_fmul+0xdc>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x90>
 8000d8a:	e0c6      	b.n	8000f1a <__aeabi_fmul+0x21e>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d14f      	bne.n	8000e30 <__aeabi_fmul+0x134>
 8000d90:	2000      	movs	r0, #0
 8000d92:	2400      	movs	r4, #0
 8000d94:	05c0      	lsls	r0, r0, #23
 8000d96:	07ff      	lsls	r7, r7, #31
 8000d98:	4320      	orrs	r0, r4
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9e:	46bb      	mov	fp, r7
 8000da0:	46b2      	mov	sl, r6
 8000da2:	46a9      	mov	r9, r5
 8000da4:	46a0      	mov	r8, r4
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d171      	bne.n	8000e90 <__aeabi_fmul+0x194>
 8000dac:	2304      	movs	r3, #4
 8000dae:	469a      	mov	sl, r3
 8000db0:	3b03      	subs	r3, #3
 8000db2:	2500      	movs	r5, #0
 8000db4:	469b      	mov	fp, r3
 8000db6:	e7b9      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d163      	bne.n	8000e84 <__aeabi_fmul+0x188>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	3b06      	subs	r3, #6
 8000dc2:	25ff      	movs	r5, #255	; 0xff
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e7b1      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d150      	bne.n	8000e6e <__aeabi_fmul+0x172>
 8000dcc:	4652      	mov	r2, sl
 8000dce:	3301      	adds	r3, #1
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7bc      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	2400      	movs	r4, #0
 8000ddc:	e7da      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000dde:	4648      	mov	r0, r9
 8000de0:	0c26      	lsrs	r6, r4, #16
 8000de2:	0424      	lsls	r4, r4, #16
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	0404      	lsls	r4, r0, #16
 8000de8:	0c24      	lsrs	r4, r4, #16
 8000dea:	464b      	mov	r3, r9
 8000dec:	0020      	movs	r0, r4
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4350      	muls	r0, r2
 8000df2:	4374      	muls	r4, r6
 8000df4:	435a      	muls	r2, r3
 8000df6:	435e      	muls	r6, r3
 8000df8:	1912      	adds	r2, r2, r4
 8000dfa:	0c03      	lsrs	r3, r0, #16
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	d903      	bls.n	8000e0a <__aeabi_fmul+0x10e>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0252      	lsls	r2, r2, #9
 8000e06:	4694      	mov	ip, r2
 8000e08:	4466      	add	r6, ip
 8000e0a:	0400      	lsls	r0, r0, #16
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	0c00      	lsrs	r0, r0, #16
 8000e10:	1812      	adds	r2, r2, r0
 8000e12:	0194      	lsls	r4, r2, #6
 8000e14:	1e60      	subs	r0, r4, #1
 8000e16:	4184      	sbcs	r4, r0
 8000e18:	0c1b      	lsrs	r3, r3, #16
 8000e1a:	0e92      	lsrs	r2, r2, #26
 8000e1c:	199b      	adds	r3, r3, r6
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	d572      	bpl.n	8000f0e <__aeabi_fmul+0x212>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	0863      	lsrs	r3, r4, #1
 8000e2c:	4004      	ands	r4, r0
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0008      	movs	r0, r1
 8000e32:	307f      	adds	r0, #127	; 0x7f
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dd3c      	ble.n	8000eb2 <__aeabi_fmul+0x1b6>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x156>
 8000e4a:	3180      	adds	r1, #128	; 0x80
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <__aeabi_fmul+0x230>)
 8000e50:	401c      	ands	r4, r3
 8000e52:	28fe      	cmp	r0, #254	; 0xfe
 8000e54:	dcc0      	bgt.n	8000dd8 <__aeabi_fmul+0xdc>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2c0      	uxtb	r0, r0
 8000e5c:	e79a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000e5e:	0037      	movs	r7, r6
 8000e60:	e78e      	b.n	8000d80 <__aeabi_fmul+0x84>
 8000e62:	4652      	mov	r2, sl
 8000e64:	2303      	movs	r3, #3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	4692      	mov	sl, r2
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e771      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e6e:	4648      	mov	r0, r9
 8000e70:	f002 f9b0 	bl	80031d4 <__clzsi2>
 8000e74:	464a      	mov	r2, r9
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	1a2d      	subs	r5, r5, r0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	2000      	movs	r0, #0
 8000e80:	3d76      	subs	r5, #118	; 0x76
 8000e82:	e766      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e84:	230c      	movs	r3, #12
 8000e86:	469a      	mov	sl, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f002 f99f 	bl	80031d4 <__clzsi2>
 8000e96:	2576      	movs	r5, #118	; 0x76
 8000e98:	1f43      	subs	r3, r0, #5
 8000e9a:	409c      	lsls	r4, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	1a2d      	subs	r5, r5, r0
 8000ea6:	e741      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	2700      	movs	r7, #0
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	03e4      	lsls	r4, r4, #15
 8000eb0:	e770      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	1a1b      	subs	r3, r3, r0
 8000eb6:	2b1b      	cmp	r3, #27
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_fmul+0x1c0>
 8000eba:	e769      	b.n	8000d90 <__aeabi_fmul+0x94>
 8000ebc:	319e      	adds	r1, #158	; 0x9e
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	0763      	lsls	r3, r4, #29
 8000ecc:	d004      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ece:	230f      	movs	r3, #15
 8000ed0:	4023      	ands	r3, r4
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ed6:	3404      	adds	r4, #4
 8000ed8:	0163      	lsls	r3, r4, #5
 8000eda:	d51a      	bpl.n	8000f12 <__aeabi_fmul+0x216>
 8000edc:	2001      	movs	r0, #1
 8000ede:	2400      	movs	r4, #0
 8000ee0:	e758      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	03c0      	lsls	r0, r0, #15
 8000ee6:	4204      	tst	r4, r0
 8000ee8:	d009      	beq.n	8000efe <__aeabi_fmul+0x202>
 8000eea:	464b      	mov	r3, r9
 8000eec:	4203      	tst	r3, r0
 8000eee:	d106      	bne.n	8000efe <__aeabi_fmul+0x202>
 8000ef0:	464c      	mov	r4, r9
 8000ef2:	4304      	orrs	r4, r0
 8000ef4:	0264      	lsls	r4, r4, #9
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	20ff      	movs	r0, #255	; 0xff
 8000efa:	0a64      	lsrs	r4, r4, #9
 8000efc:	e74a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	03c0      	lsls	r0, r0, #15
 8000f02:	4304      	orrs	r4, r0
 8000f04:	0264      	lsls	r4, r4, #9
 8000f06:	0037      	movs	r7, r6
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	e742      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f0e:	0029      	movs	r1, r5
 8000f10:	e78e      	b.n	8000e30 <__aeabi_fmul+0x134>
 8000f12:	01a4      	lsls	r4, r4, #6
 8000f14:	2000      	movs	r0, #0
 8000f16:	0a64      	lsrs	r4, r4, #9
 8000f18:	e73c      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	03c0      	lsls	r0, r0, #15
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	0a64      	lsrs	r4, r4, #9
 8000f26:	e735      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f28:	08013e94 	.word	0x08013e94
 8000f2c:	f7ffffff 	.word	0xf7ffffff

08000f30 <__aeabi_fsub>:
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	4646      	mov	r6, r8
 8000f34:	46d6      	mov	lr, sl
 8000f36:	464f      	mov	r7, r9
 8000f38:	0243      	lsls	r3, r0, #9
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4694      	mov	ip, r2
 8000f40:	024a      	lsls	r2, r1, #9
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	0044      	lsls	r4, r0, #1
 8000f46:	0a56      	lsrs	r6, r2, #9
 8000f48:	1c05      	adds	r5, r0, #0
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	0e24      	lsrs	r4, r4, #24
 8000f4e:	004e      	lsls	r6, r1, #1
 8000f50:	0992      	lsrs	r2, r2, #6
 8000f52:	001f      	movs	r7, r3
 8000f54:	0020      	movs	r0, r4
 8000f56:	4692      	mov	sl, r2
 8000f58:	0fed      	lsrs	r5, r5, #31
 8000f5a:	0e36      	lsrs	r6, r6, #24
 8000f5c:	0fc9      	lsrs	r1, r1, #31
 8000f5e:	2eff      	cmp	r6, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x34>
 8000f62:	e07f      	b.n	8001064 <__aeabi_fsub+0x134>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4051      	eors	r1, r2
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d051      	beq.n	8001010 <__aeabi_fsub+0xe0>
 8000f6c:	1ba2      	subs	r2, r4, r6
 8000f6e:	4691      	mov	r9, r2
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_fsub+0x46>
 8000f74:	e07e      	b.n	8001074 <__aeabi_fsub+0x144>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x4c>
 8000f7a:	e099      	b.n	80010b0 <__aeabi_fsub+0x180>
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x52>
 8000f80:	e08c      	b.n	800109c <__aeabi_fsub+0x16c>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4652      	mov	r2, sl
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4692      	mov	sl, r2
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2a1b      	cmp	r2, #27
 8000f92:	dc08      	bgt.n	8000fa6 <__aeabi_fsub+0x76>
 8000f94:	4653      	mov	r3, sl
 8000f96:	2120      	movs	r1, #32
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	408a      	lsls	r2, r1
 8000fa0:	1e51      	subs	r1, r2, #1
 8000fa2:	418a      	sbcs	r2, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	d400      	bmi.n	8000fb0 <__aeabi_fsub+0x80>
 8000fae:	e0f3      	b.n	8001198 <__aeabi_fsub+0x268>
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	099e      	lsrs	r6, r3, #6
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	f002 f90d 	bl	80031d4 <__clzsi2>
 8000fba:	3805      	subs	r0, #5
 8000fbc:	4086      	lsls	r6, r0
 8000fbe:	4284      	cmp	r4, r0
 8000fc0:	dd00      	ble.n	8000fc4 <__aeabi_fsub+0x94>
 8000fc2:	e0f7      	b.n	80011b4 <__aeabi_fsub+0x284>
 8000fc4:	0032      	movs	r2, r6
 8000fc6:	1b04      	subs	r4, r0, r4
 8000fc8:	2020      	movs	r0, #32
 8000fca:	3401      	adds	r4, #1
 8000fcc:	40e2      	lsrs	r2, r4
 8000fce:	1b04      	subs	r4, r0, r4
 8000fd0:	40a6      	lsls	r6, r4
 8000fd2:	0033      	movs	r3, r6
 8000fd4:	1e5e      	subs	r6, r3, #1
 8000fd6:	41b3      	sbcs	r3, r6
 8000fd8:	2400      	movs	r4, #0
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	d004      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	2a04      	cmp	r2, #4
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe8:	3304      	adds	r3, #4
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0xc0>
 8000fee:	e0d6      	b.n	800119e <__aeabi_fsub+0x26e>
 8000ff0:	1c62      	adds	r2, r4, #1
 8000ff2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0xc8>
 8000ff6:	e0da      	b.n	80011ae <__aeabi_fsub+0x27e>
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	0a5f      	lsrs	r7, r3, #9
 8000ffc:	b2d0      	uxtb	r0, r2
 8000ffe:	05c0      	lsls	r0, r0, #23
 8001000:	4338      	orrs	r0, r7
 8001002:	07ed      	lsls	r5, r5, #31
 8001004:	4328      	orrs	r0, r5
 8001006:	bce0      	pop	{r5, r6, r7}
 8001008:	46ba      	mov	sl, r7
 800100a:	46b1      	mov	r9, r6
 800100c:	46a8      	mov	r8, r5
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1ba2      	subs	r2, r4, r6
 8001012:	4691      	mov	r9, r2
 8001014:	2a00      	cmp	r2, #0
 8001016:	dd63      	ble.n	80010e0 <__aeabi_fsub+0x1b0>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0xee>
 800101c:	e099      	b.n	8001152 <__aeabi_fsub+0x222>
 800101e:	2cff      	cmp	r4, #255	; 0xff
 8001020:	d03c      	beq.n	800109c <__aeabi_fsub+0x16c>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4652      	mov	r2, sl
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	431a      	orrs	r2, r3
 800102a:	4692      	mov	sl, r2
 800102c:	464a      	mov	r2, r9
 800102e:	2301      	movs	r3, #1
 8001030:	2a1b      	cmp	r2, #27
 8001032:	dc08      	bgt.n	8001046 <__aeabi_fsub+0x116>
 8001034:	4653      	mov	r3, sl
 8001036:	2120      	movs	r1, #32
 8001038:	40d3      	lsrs	r3, r2
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4652      	mov	r2, sl
 800103e:	408a      	lsls	r2, r1
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	418a      	sbcs	r2, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	4463      	add	r3, ip
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	d400      	bmi.n	800104e <__aeabi_fsub+0x11e>
 800104c:	e0a4      	b.n	8001198 <__aeabi_fsub+0x268>
 800104e:	3401      	adds	r4, #1
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x126>
 8001054:	e0ab      	b.n	80011ae <__aeabi_fsub+0x27e>
 8001056:	2201      	movs	r2, #1
 8001058:	4997      	ldr	r1, [pc, #604]	; (80012b8 <__aeabi_fsub+0x388>)
 800105a:	401a      	ands	r2, r3
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	400b      	ands	r3, r1
 8001060:	4313      	orrs	r3, r2
 8001062:	e7bb      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d032      	beq.n	80010ce <__aeabi_fsub+0x19e>
 8001068:	428d      	cmp	r5, r1
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	4252      	negs	r2, r2
 8001070:	4691      	mov	r9, r2
 8001072:	44a1      	add	r9, r4
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d051      	beq.n	800111e <__aeabi_fsub+0x1ee>
 800107a:	1b30      	subs	r0, r6, r4
 800107c:	2c00      	cmp	r4, #0
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x152>
 8001080:	e09c      	b.n	80011bc <__aeabi_fsub+0x28c>
 8001082:	4663      	mov	r3, ip
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x15a>
 8001088:	e0df      	b.n	800124a <__aeabi_fsub+0x31a>
 800108a:	3801      	subs	r0, #1
 800108c:	2800      	cmp	r0, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x162>
 8001090:	e0f7      	b.n	8001282 <__aeabi_fsub+0x352>
 8001092:	2eff      	cmp	r6, #255	; 0xff
 8001094:	d000      	beq.n	8001098 <__aeabi_fsub+0x168>
 8001096:	e099      	b.n	80011cc <__aeabi_fsub+0x29c>
 8001098:	000d      	movs	r5, r1
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x172>
 80010a0:	e085      	b.n	80011ae <__aeabi_fsub+0x27e>
 80010a2:	2780      	movs	r7, #128	; 0x80
 80010a4:	03ff      	lsls	r7, r7, #15
 80010a6:	431f      	orrs	r7, r3
 80010a8:	027f      	lsls	r7, r7, #9
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a7f      	lsrs	r7, r7, #9
 80010ae:	e7a6      	b.n	8000ffe <__aeabi_fsub+0xce>
 80010b0:	4652      	mov	r2, sl
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d074      	beq.n	80011a0 <__aeabi_fsub+0x270>
 80010b6:	2201      	movs	r2, #1
 80010b8:	4252      	negs	r2, r2
 80010ba:	4690      	mov	r8, r2
 80010bc:	44c1      	add	r9, r8
 80010be:	464a      	mov	r2, r9
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x196>
 80010c4:	e0c8      	b.n	8001258 <__aeabi_fsub+0x328>
 80010c6:	2cff      	cmp	r4, #255	; 0xff
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x19c>
 80010ca:	e75f      	b.n	8000f8c <__aeabi_fsub+0x5c>
 80010cc:	e7e6      	b.n	800109c <__aeabi_fsub+0x16c>
 80010ce:	2201      	movs	r2, #1
 80010d0:	4051      	eors	r1, r2
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x3c>
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	4252      	negs	r2, r2
 80010dc:	4691      	mov	r9, r2
 80010de:	44a1      	add	r9, r4
 80010e0:	464a      	mov	r2, r9
 80010e2:	2a00      	cmp	r2, #0
 80010e4:	d043      	beq.n	800116e <__aeabi_fsub+0x23e>
 80010e6:	1b31      	subs	r1, r6, r4
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x1be>
 80010ec:	e08c      	b.n	8001208 <__aeabi_fsub+0x2d8>
 80010ee:	2eff      	cmp	r6, #255	; 0xff
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1c4>
 80010f2:	e092      	b.n	800121a <__aeabi_fsub+0x2ea>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	4662      	mov	r2, ip
 80010f8:	04db      	lsls	r3, r3, #19
 80010fa:	431a      	orrs	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	2301      	movs	r3, #1
 8001100:	291b      	cmp	r1, #27
 8001102:	dc09      	bgt.n	8001118 <__aeabi_fsub+0x1e8>
 8001104:	2020      	movs	r0, #32
 8001106:	4663      	mov	r3, ip
 8001108:	4662      	mov	r2, ip
 800110a:	40cb      	lsrs	r3, r1
 800110c:	1a41      	subs	r1, r0, r1
 800110e:	408a      	lsls	r2, r1
 8001110:	0011      	movs	r1, r2
 8001112:	1e48      	subs	r0, r1, #1
 8001114:	4181      	sbcs	r1, r0
 8001116:	430b      	orrs	r3, r1
 8001118:	0034      	movs	r4, r6
 800111a:	4453      	add	r3, sl
 800111c:	e794      	b.n	8001048 <__aeabi_fsub+0x118>
 800111e:	22fe      	movs	r2, #254	; 0xfe
 8001120:	1c66      	adds	r6, r4, #1
 8001122:	4232      	tst	r2, r6
 8001124:	d164      	bne.n	80011f0 <__aeabi_fsub+0x2c0>
 8001126:	2c00      	cmp	r4, #0
 8001128:	d000      	beq.n	800112c <__aeabi_fsub+0x1fc>
 800112a:	e082      	b.n	8001232 <__aeabi_fsub+0x302>
 800112c:	4663      	mov	r3, ip
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x204>
 8001132:	e0ab      	b.n	800128c <__aeabi_fsub+0x35c>
 8001134:	4653      	mov	r3, sl
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x20c>
 800113a:	e760      	b.n	8000ffe <__aeabi_fsub+0xce>
 800113c:	4663      	mov	r3, ip
 800113e:	4652      	mov	r2, sl
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d400      	bmi.n	8001148 <__aeabi_fsub+0x218>
 8001146:	e0aa      	b.n	800129e <__aeabi_fsub+0x36e>
 8001148:	4663      	mov	r3, ip
 800114a:	4652      	mov	r2, sl
 800114c:	000d      	movs	r5, r1
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	e744      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001152:	4652      	mov	r2, sl
 8001154:	2a00      	cmp	r2, #0
 8001156:	d023      	beq.n	80011a0 <__aeabi_fsub+0x270>
 8001158:	2201      	movs	r2, #1
 800115a:	4252      	negs	r2, r2
 800115c:	4690      	mov	r8, r2
 800115e:	44c1      	add	r9, r8
 8001160:	464a      	mov	r2, r9
 8001162:	2a00      	cmp	r2, #0
 8001164:	d075      	beq.n	8001252 <__aeabi_fsub+0x322>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x23c>
 800116a:	e75f      	b.n	800102c <__aeabi_fsub+0xfc>
 800116c:	e796      	b.n	800109c <__aeabi_fsub+0x16c>
 800116e:	26fe      	movs	r6, #254	; 0xfe
 8001170:	3401      	adds	r4, #1
 8001172:	4226      	tst	r6, r4
 8001174:	d153      	bne.n	800121e <__aeabi_fsub+0x2ee>
 8001176:	2800      	cmp	r0, #0
 8001178:	d172      	bne.n	8001260 <__aeabi_fsub+0x330>
 800117a:	4663      	mov	r3, ip
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x252>
 8001180:	e093      	b.n	80012aa <__aeabi_fsub+0x37a>
 8001182:	4653      	mov	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x25a>
 8001188:	e739      	b.n	8000ffe <__aeabi_fsub+0xce>
 800118a:	4463      	add	r3, ip
 800118c:	2400      	movs	r4, #0
 800118e:	015a      	lsls	r2, r3, #5
 8001190:	d502      	bpl.n	8001198 <__aeabi_fsub+0x268>
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <__aeabi_fsub+0x38c>)
 8001194:	3401      	adds	r4, #1
 8001196:	4013      	ands	r3, r2
 8001198:	075a      	lsls	r2, r3, #29
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0x26e>
 800119c:	e720      	b.n	8000fe0 <__aeabi_fsub+0xb0>
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	2cff      	cmp	r4, #255	; 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x276>
 80011a4:	e77a      	b.n	800109c <__aeabi_fsub+0x16c>
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	0a5f      	lsrs	r7, r3, #9
 80011aa:	b2e0      	uxtb	r0, r4
 80011ac:	e727      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	2700      	movs	r7, #0
 80011b2:	e724      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <__aeabi_fsub+0x38c>)
 80011b6:	1a24      	subs	r4, r4, r0
 80011b8:	4033      	ands	r3, r6
 80011ba:	e70f      	b.n	8000fdc <__aeabi_fsub+0xac>
 80011bc:	2eff      	cmp	r6, #255	; 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x292>
 80011c0:	e76a      	b.n	8001098 <__aeabi_fsub+0x168>
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	4662      	mov	r2, ip
 80011c6:	04db      	lsls	r3, r3, #19
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4694      	mov	ip, r2
 80011cc:	2301      	movs	r3, #1
 80011ce:	281b      	cmp	r0, #27
 80011d0:	dc09      	bgt.n	80011e6 <__aeabi_fsub+0x2b6>
 80011d2:	2420      	movs	r4, #32
 80011d4:	4663      	mov	r3, ip
 80011d6:	4662      	mov	r2, ip
 80011d8:	40c3      	lsrs	r3, r0
 80011da:	1a20      	subs	r0, r4, r0
 80011dc:	4082      	lsls	r2, r0
 80011de:	0010      	movs	r0, r2
 80011e0:	1e44      	subs	r4, r0, #1
 80011e2:	41a0      	sbcs	r0, r4
 80011e4:	4303      	orrs	r3, r0
 80011e6:	4652      	mov	r2, sl
 80011e8:	000d      	movs	r5, r1
 80011ea:	0034      	movs	r4, r6
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	e6dc      	b.n	8000faa <__aeabi_fsub+0x7a>
 80011f0:	4663      	mov	r3, ip
 80011f2:	4652      	mov	r2, sl
 80011f4:	1a9e      	subs	r6, r3, r2
 80011f6:	0173      	lsls	r3, r6, #5
 80011f8:	d417      	bmi.n	800122a <__aeabi_fsub+0x2fa>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d000      	beq.n	8001200 <__aeabi_fsub+0x2d0>
 80011fe:	e6d9      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001200:	2500      	movs	r5, #0
 8001202:	2000      	movs	r0, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e6fa      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <__aeabi_fsub+0x368>
 800120e:	3901      	subs	r1, #1
 8001210:	2900      	cmp	r1, #0
 8001212:	d04c      	beq.n	80012ae <__aeabi_fsub+0x37e>
 8001214:	2eff      	cmp	r6, #255	; 0xff
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001218:	e771      	b.n	80010fe <__aeabi_fsub+0x1ce>
 800121a:	4643      	mov	r3, r8
 800121c:	e73e      	b.n	800109c <__aeabi_fsub+0x16c>
 800121e:	2cff      	cmp	r4, #255	; 0xff
 8001220:	d0c5      	beq.n	80011ae <__aeabi_fsub+0x27e>
 8001222:	4652      	mov	r2, sl
 8001224:	4462      	add	r2, ip
 8001226:	0853      	lsrs	r3, r2, #1
 8001228:	e7b6      	b.n	8001198 <__aeabi_fsub+0x268>
 800122a:	4663      	mov	r3, ip
 800122c:	000d      	movs	r5, r1
 800122e:	1ad6      	subs	r6, r2, r3
 8001230:	e6c0      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001232:	4662      	mov	r2, ip
 8001234:	2a00      	cmp	r2, #0
 8001236:	d116      	bne.n	8001266 <__aeabi_fsub+0x336>
 8001238:	4653      	mov	r3, sl
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x310>
 800123e:	e72b      	b.n	8001098 <__aeabi_fsub+0x168>
 8001240:	2780      	movs	r7, #128	; 0x80
 8001242:	2500      	movs	r5, #0
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	03ff      	lsls	r7, r7, #15
 8001248:	e6d9      	b.n	8000ffe <__aeabi_fsub+0xce>
 800124a:	000d      	movs	r5, r1
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e7a6      	b.n	80011a0 <__aeabi_fsub+0x270>
 8001252:	4653      	mov	r3, sl
 8001254:	4463      	add	r3, ip
 8001256:	e6f7      	b.n	8001048 <__aeabi_fsub+0x118>
 8001258:	4663      	mov	r3, ip
 800125a:	4652      	mov	r2, sl
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	e6a4      	b.n	8000faa <__aeabi_fsub+0x7a>
 8001260:	4662      	mov	r2, ip
 8001262:	2a00      	cmp	r2, #0
 8001264:	d0d9      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001266:	4652      	mov	r2, sl
 8001268:	2a00      	cmp	r2, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x33e>
 800126c:	e716      	b.n	800109c <__aeabi_fsub+0x16c>
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	03d2      	lsls	r2, r2, #15
 8001272:	4213      	tst	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x348>
 8001276:	e711      	b.n	800109c <__aeabi_fsub+0x16c>
 8001278:	4640      	mov	r0, r8
 800127a:	4210      	tst	r0, r2
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x350>
 800127e:	e70d      	b.n	800109c <__aeabi_fsub+0x16c>
 8001280:	e70a      	b.n	8001098 <__aeabi_fsub+0x168>
 8001282:	4652      	mov	r2, sl
 8001284:	000d      	movs	r5, r1
 8001286:	0034      	movs	r4, r6
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	e68e      	b.n	8000faa <__aeabi_fsub+0x7a>
 800128c:	4653      	mov	r3, sl
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <__aeabi_fsub+0x374>
 8001292:	000d      	movs	r5, r1
 8001294:	4647      	mov	r7, r8
 8001296:	e6b2      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001298:	4643      	mov	r3, r8
 800129a:	0034      	movs	r4, r6
 800129c:	e780      	b.n	80011a0 <__aeabi_fsub+0x270>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <__aeabi_fsub+0x374>
 80012a2:	e779      	b.n	8001198 <__aeabi_fsub+0x268>
 80012a4:	2500      	movs	r5, #0
 80012a6:	2700      	movs	r7, #0
 80012a8:	e6a9      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012aa:	4647      	mov	r7, r8
 80012ac:	e6a7      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012ae:	4653      	mov	r3, sl
 80012b0:	0034      	movs	r4, r6
 80012b2:	4463      	add	r3, ip
 80012b4:	e6c8      	b.n	8001048 <__aeabi_fsub+0x118>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	7dffffff 	.word	0x7dffffff
 80012bc:	fbffffff 	.word	0xfbffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	d903      	bls.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	d902      	bls.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ff60 	bl	80031d4 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	dd01      	ble.n	8001326 <__aeabi_i2f+0x26>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0b      	ble.n	800135a <__aeabi_i2f+0x5a>
 8001342:	2205      	movs	r2, #5
 8001344:	002e      	movs	r6, r5
 8001346:	1a12      	subs	r2, r2, r0
 8001348:	40d6      	lsrs	r6, r2
 800134a:	0002      	movs	r2, r0
 800134c:	321b      	adds	r2, #27
 800134e:	4095      	lsls	r5, r2
 8001350:	0028      	movs	r0, r5
 8001352:	1e45      	subs	r5, r0, #1
 8001354:	41a8      	sbcs	r0, r5
 8001356:	0035      	movs	r5, r6
 8001358:	4305      	orrs	r5, r0
 800135a:	2905      	cmp	r1, #5
 800135c:	dd01      	ble.n	8001362 <__aeabi_i2f+0x62>
 800135e:	1f4a      	subs	r2, r1, #5
 8001360:	4095      	lsls	r5, r2
 8001362:	002a      	movs	r2, r5
 8001364:	4e08      	ldr	r6, [pc, #32]	; (8001388 <__aeabi_i2f+0x88>)
 8001366:	4032      	ands	r2, r6
 8001368:	0768      	lsls	r0, r5, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_i2f+0x80>
 800136c:	200f      	movs	r0, #15
 800136e:	4028      	ands	r0, r5
 8001370:	2804      	cmp	r0, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_i2f+0x80>
 8001374:	3204      	adds	r2, #4
 8001376:	0150      	lsls	r0, r2, #5
 8001378:	d502      	bpl.n	8001380 <__aeabi_i2f+0x80>
 800137a:	239f      	movs	r3, #159	; 0x9f
 800137c:	4032      	ands	r2, r6
 800137e:	1a5b      	subs	r3, r3, r1
 8001380:	0192      	lsls	r2, r2, #6
 8001382:	0a55      	lsrs	r5, r2, #9
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	e7d5      	b.n	8001334 <__aeabi_i2f+0x34>
 8001388:	fbffffff 	.word	0xfbffffff

0800138c <__aeabi_ui2f>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	1e05      	subs	r5, r0, #0
 8001390:	d00e      	beq.n	80013b0 <__aeabi_ui2f+0x24>
 8001392:	f001 ff1f 	bl	80031d4 <__clzsi2>
 8001396:	239e      	movs	r3, #158	; 0x9e
 8001398:	0004      	movs	r4, r0
 800139a:	1a1b      	subs	r3, r3, r0
 800139c:	2b96      	cmp	r3, #150	; 0x96
 800139e:	dc0c      	bgt.n	80013ba <__aeabi_ui2f+0x2e>
 80013a0:	2808      	cmp	r0, #8
 80013a2:	dd01      	ble.n	80013a8 <__aeabi_ui2f+0x1c>
 80013a4:	3c08      	subs	r4, #8
 80013a6:	40a5      	lsls	r5, r4
 80013a8:	026d      	lsls	r5, r5, #9
 80013aa:	0a6d      	lsrs	r5, r5, #9
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	e001      	b.n	80013b4 <__aeabi_ui2f+0x28>
 80013b0:	2000      	movs	r0, #0
 80013b2:	2500      	movs	r5, #0
 80013b4:	05c0      	lsls	r0, r0, #23
 80013b6:	4328      	orrs	r0, r5
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	2b99      	cmp	r3, #153	; 0x99
 80013bc:	dd09      	ble.n	80013d2 <__aeabi_ui2f+0x46>
 80013be:	0002      	movs	r2, r0
 80013c0:	0029      	movs	r1, r5
 80013c2:	321b      	adds	r2, #27
 80013c4:	4091      	lsls	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	2205      	movs	r2, #5
 80013cc:	1a12      	subs	r2, r2, r0
 80013ce:	40d5      	lsrs	r5, r2
 80013d0:	430d      	orrs	r5, r1
 80013d2:	2c05      	cmp	r4, #5
 80013d4:	dd01      	ble.n	80013da <__aeabi_ui2f+0x4e>
 80013d6:	1f62      	subs	r2, r4, #5
 80013d8:	4095      	lsls	r5, r2
 80013da:	0029      	movs	r1, r5
 80013dc:	4e08      	ldr	r6, [pc, #32]	; (8001400 <__aeabi_ui2f+0x74>)
 80013de:	4031      	ands	r1, r6
 80013e0:	076a      	lsls	r2, r5, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013e4:	200f      	movs	r0, #15
 80013e6:	4028      	ands	r0, r5
 80013e8:	2804      	cmp	r0, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013ec:	3104      	adds	r1, #4
 80013ee:	014a      	lsls	r2, r1, #5
 80013f0:	d502      	bpl.n	80013f8 <__aeabi_ui2f+0x6c>
 80013f2:	239f      	movs	r3, #159	; 0x9f
 80013f4:	4031      	ands	r1, r6
 80013f6:	1b1b      	subs	r3, r3, r4
 80013f8:	0189      	lsls	r1, r1, #6
 80013fa:	0a4d      	lsrs	r5, r1, #9
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	e7d9      	b.n	80013b4 <__aeabi_ui2f+0x28>
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_dadd>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	46d6      	mov	lr, sl
 800140a:	4646      	mov	r6, r8
 800140c:	000d      	movs	r5, r1
 800140e:	0001      	movs	r1, r0
 8001410:	0018      	movs	r0, r3
 8001412:	b5c0      	push	{r6, r7, lr}
 8001414:	0017      	movs	r7, r2
 8001416:	032b      	lsls	r3, r5, #12
 8001418:	0a5a      	lsrs	r2, r3, #9
 800141a:	0f4b      	lsrs	r3, r1, #29
 800141c:	4313      	orrs	r3, r2
 800141e:	00ca      	lsls	r2, r1, #3
 8001420:	4691      	mov	r9, r2
 8001422:	0302      	lsls	r2, r0, #12
 8001424:	006e      	lsls	r6, r5, #1
 8001426:	0041      	lsls	r1, r0, #1
 8001428:	0a52      	lsrs	r2, r2, #9
 800142a:	0fec      	lsrs	r4, r5, #31
 800142c:	0f7d      	lsrs	r5, r7, #29
 800142e:	4315      	orrs	r5, r2
 8001430:	0d76      	lsrs	r6, r6, #21
 8001432:	0d49      	lsrs	r1, r1, #21
 8001434:	0fc0      	lsrs	r0, r0, #31
 8001436:	4682      	mov	sl, r0
 8001438:	46ac      	mov	ip, r5
 800143a:	00ff      	lsls	r7, r7, #3
 800143c:	1a72      	subs	r2, r6, r1
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x40>
 8001442:	e098      	b.n	8001576 <__aeabi_dadd+0x172>
 8001444:	2a00      	cmp	r2, #0
 8001446:	dc00      	bgt.n	800144a <__aeabi_dadd+0x46>
 8001448:	e081      	b.n	800154e <__aeabi_dadd+0x14a>
 800144a:	2900      	cmp	r1, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x4c>
 800144e:	e0b6      	b.n	80015be <__aeabi_dadd+0x1ba>
 8001450:	49c9      	ldr	r1, [pc, #804]	; (8001778 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x54>
 8001456:	e172      	b.n	800173e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x64>
 8001466:	e15e      	b.n	8001726 <__aeabi_dadd+0x322>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dd00      	ble.n	800146e <__aeabi_dadd+0x6a>
 800146c:	e1ee      	b.n	800184c <__aeabi_dadd+0x448>
 800146e:	2020      	movs	r0, #32
 8001470:	0039      	movs	r1, r7
 8001472:	4665      	mov	r5, ip
 8001474:	1a80      	subs	r0, r0, r2
 8001476:	4087      	lsls	r7, r0
 8001478:	40d1      	lsrs	r1, r2
 800147a:	4085      	lsls	r5, r0
 800147c:	430d      	orrs	r5, r1
 800147e:	0039      	movs	r1, r7
 8001480:	1e4f      	subs	r7, r1, #1
 8001482:	41b9      	sbcs	r1, r7
 8001484:	4667      	mov	r7, ip
 8001486:	40d7      	lsrs	r7, r2
 8001488:	4329      	orrs	r1, r5
 800148a:	1bdb      	subs	r3, r3, r7
 800148c:	464a      	mov	r2, r9
 800148e:	1a55      	subs	r5, r2, r1
 8001490:	45a9      	cmp	r9, r5
 8001492:	4189      	sbcs	r1, r1
 8001494:	4249      	negs	r1, r1
 8001496:	1a5b      	subs	r3, r3, r1
 8001498:	4698      	mov	r8, r3
 800149a:	4643      	mov	r3, r8
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x9e>
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x238>
 80014a2:	4643      	mov	r3, r8
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	0a5b      	lsrs	r3, r3, #9
 80014a8:	4698      	mov	r8, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0xae>
 80014b0:	e12c      	b.n	800170c <__aeabi_dadd+0x308>
 80014b2:	4640      	mov	r0, r8
 80014b4:	f001 fe8e 	bl	80031d4 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	3908      	subs	r1, #8
 80014bc:	2220      	movs	r2, #32
 80014be:	0028      	movs	r0, r5
 80014c0:	4643      	mov	r3, r8
 80014c2:	1a52      	subs	r2, r2, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	40d0      	lsrs	r0, r2
 80014c8:	408d      	lsls	r5, r1
 80014ca:	4303      	orrs	r3, r0
 80014cc:	428e      	cmp	r6, r1
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dadd+0xce>
 80014d0:	e117      	b.n	8001702 <__aeabi_dadd+0x2fe>
 80014d2:	1b8e      	subs	r6, r1, r6
 80014d4:	1c72      	adds	r2, r6, #1
 80014d6:	2a1f      	cmp	r2, #31
 80014d8:	dd00      	ble.n	80014dc <__aeabi_dadd+0xd8>
 80014da:	e1a7      	b.n	800182c <__aeabi_dadd+0x428>
 80014dc:	2120      	movs	r1, #32
 80014de:	0018      	movs	r0, r3
 80014e0:	002e      	movs	r6, r5
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	408d      	lsls	r5, r1
 80014e6:	4088      	lsls	r0, r1
 80014e8:	40d6      	lsrs	r6, r2
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	1e69      	subs	r1, r5, #1
 80014ee:	418d      	sbcs	r5, r1
 80014f0:	4330      	orrs	r0, r6
 80014f2:	4698      	mov	r8, r3
 80014f4:	2600      	movs	r6, #0
 80014f6:	4305      	orrs	r5, r0
 80014f8:	076b      	lsls	r3, r5, #29
 80014fa:	d009      	beq.n	8001510 <__aeabi_dadd+0x10c>
 80014fc:	230f      	movs	r3, #15
 80014fe:	402b      	ands	r3, r5
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <__aeabi_dadd+0x10c>
 8001504:	1d2b      	adds	r3, r5, #4
 8001506:	42ab      	cmp	r3, r5
 8001508:	41ad      	sbcs	r5, r5
 800150a:	426d      	negs	r5, r5
 800150c:	44a8      	add	r8, r5
 800150e:	001d      	movs	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	d400      	bmi.n	8001518 <__aeabi_dadd+0x114>
 8001516:	e094      	b.n	8001642 <__aeabi_dadd+0x23e>
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <__aeabi_dadd+0x374>)
 800151a:	1c72      	adds	r2, r6, #1
 800151c:	429a      	cmp	r2, r3
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x11e>
 8001520:	e09d      	b.n	800165e <__aeabi_dadd+0x25a>
 8001522:	4641      	mov	r1, r8
 8001524:	4b95      	ldr	r3, [pc, #596]	; (800177c <__aeabi_dadd+0x378>)
 8001526:	08ed      	lsrs	r5, r5, #3
 8001528:	4019      	ands	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	0749      	lsls	r1, r1, #29
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4329      	orrs	r1, r5
 8001534:	0b1b      	lsrs	r3, r3, #12
 8001536:	0d52      	lsrs	r2, r2, #21
 8001538:	0512      	lsls	r2, r2, #20
 800153a:	4313      	orrs	r3, r2
 800153c:	07e4      	lsls	r4, r4, #31
 800153e:	4323      	orrs	r3, r4
 8001540:	0008      	movs	r0, r1
 8001542:	0019      	movs	r1, r3
 8001544:	bce0      	pop	{r5, r6, r7}
 8001546:	46ba      	mov	sl, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	2a00      	cmp	r2, #0
 8001550:	d043      	beq.n	80015da <__aeabi_dadd+0x1d6>
 8001552:	1b8a      	subs	r2, r1, r6
 8001554:	2e00      	cmp	r6, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x156>
 8001558:	e12a      	b.n	80017b0 <__aeabi_dadd+0x3ac>
 800155a:	464c      	mov	r4, r9
 800155c:	431c      	orrs	r4, r3
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x15e>
 8001560:	e1d1      	b.n	8001906 <__aeabi_dadd+0x502>
 8001562:	1e54      	subs	r4, r2, #1
 8001564:	2a01      	cmp	r2, #1
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x166>
 8001568:	e21f      	b.n	80019aa <__aeabi_dadd+0x5a6>
 800156a:	4d83      	ldr	r5, [pc, #524]	; (8001778 <__aeabi_dadd+0x374>)
 800156c:	42aa      	cmp	r2, r5
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x16e>
 8001570:	e272      	b.n	8001a58 <__aeabi_dadd+0x654>
 8001572:	0022      	movs	r2, r4
 8001574:	e123      	b.n	80017be <__aeabi_dadd+0x3ba>
 8001576:	2a00      	cmp	r2, #0
 8001578:	dc00      	bgt.n	800157c <__aeabi_dadd+0x178>
 800157a:	e098      	b.n	80016ae <__aeabi_dadd+0x2aa>
 800157c:	2900      	cmp	r1, #0
 800157e:	d042      	beq.n	8001606 <__aeabi_dadd+0x202>
 8001580:	497d      	ldr	r1, [pc, #500]	; (8001778 <__aeabi_dadd+0x374>)
 8001582:	428e      	cmp	r6, r1
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x184>
 8001586:	e0da      	b.n	800173e <__aeabi_dadd+0x33a>
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0028      	movs	r0, r5
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	4308      	orrs	r0, r1
 8001590:	4684      	mov	ip, r0
 8001592:	2a38      	cmp	r2, #56	; 0x38
 8001594:	dd00      	ble.n	8001598 <__aeabi_dadd+0x194>
 8001596:	e129      	b.n	80017ec <__aeabi_dadd+0x3e8>
 8001598:	2a1f      	cmp	r2, #31
 800159a:	dc00      	bgt.n	800159e <__aeabi_dadd+0x19a>
 800159c:	e187      	b.n	80018ae <__aeabi_dadd+0x4aa>
 800159e:	0011      	movs	r1, r2
 80015a0:	4665      	mov	r5, ip
 80015a2:	3920      	subs	r1, #32
 80015a4:	40cd      	lsrs	r5, r1
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d004      	beq.n	80015b4 <__aeabi_dadd+0x1b0>
 80015aa:	2040      	movs	r0, #64	; 0x40
 80015ac:	4661      	mov	r1, ip
 80015ae:	1a82      	subs	r2, r0, r2
 80015b0:	4091      	lsls	r1, r2
 80015b2:	430f      	orrs	r7, r1
 80015b4:	0039      	movs	r1, r7
 80015b6:	1e4f      	subs	r7, r1, #1
 80015b8:	41b9      	sbcs	r1, r7
 80015ba:	430d      	orrs	r5, r1
 80015bc:	e11b      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80015be:	0029      	movs	r1, r5
 80015c0:	4339      	orrs	r1, r7
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x1c2>
 80015c4:	e0b5      	b.n	8001732 <__aeabi_dadd+0x32e>
 80015c6:	1e51      	subs	r1, r2, #1
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1ca>
 80015cc:	e1ab      	b.n	8001926 <__aeabi_dadd+0x522>
 80015ce:	486a      	ldr	r0, [pc, #424]	; (8001778 <__aeabi_dadd+0x374>)
 80015d0:	4282      	cmp	r2, r0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x1d2>
 80015d4:	e1b2      	b.n	800193c <__aeabi_dadd+0x538>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e743      	b.n	8001462 <__aeabi_dadd+0x5e>
 80015da:	4969      	ldr	r1, [pc, #420]	; (8001780 <__aeabi_dadd+0x37c>)
 80015dc:	1c75      	adds	r5, r6, #1
 80015de:	420d      	tst	r5, r1
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x1e0>
 80015e2:	e0cf      	b.n	8001784 <__aeabi_dadd+0x380>
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d000      	beq.n	80015ea <__aeabi_dadd+0x1e6>
 80015e8:	e193      	b.n	8001912 <__aeabi_dadd+0x50e>
 80015ea:	4649      	mov	r1, r9
 80015ec:	4319      	orrs	r1, r3
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x1ee>
 80015f0:	e1d1      	b.n	8001996 <__aeabi_dadd+0x592>
 80015f2:	4661      	mov	r1, ip
 80015f4:	4339      	orrs	r1, r7
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x1f6>
 80015f8:	e1e3      	b.n	80019c2 <__aeabi_dadd+0x5be>
 80015fa:	4649      	mov	r1, r9
 80015fc:	0758      	lsls	r0, r3, #29
 80015fe:	08c9      	lsrs	r1, r1, #3
 8001600:	4301      	orrs	r1, r0
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	e026      	b.n	8001654 <__aeabi_dadd+0x250>
 8001606:	0029      	movs	r1, r5
 8001608:	4339      	orrs	r1, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x20a>
 800160c:	e091      	b.n	8001732 <__aeabi_dadd+0x32e>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d005      	beq.n	8001620 <__aeabi_dadd+0x21c>
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <__aeabi_dadd+0x374>)
 8001616:	4282      	cmp	r2, r0
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x218>
 800161a:	e18f      	b.n	800193c <__aeabi_dadd+0x538>
 800161c:	000a      	movs	r2, r1
 800161e:	e7b8      	b.n	8001592 <__aeabi_dadd+0x18e>
 8001620:	003d      	movs	r5, r7
 8001622:	444d      	add	r5, r9
 8001624:	454d      	cmp	r5, r9
 8001626:	4189      	sbcs	r1, r1
 8001628:	4463      	add	r3, ip
 800162a:	4698      	mov	r8, r3
 800162c:	4249      	negs	r1, r1
 800162e:	4488      	add	r8, r1
 8001630:	4643      	mov	r3, r8
 8001632:	2602      	movs	r6, #2
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d500      	bpl.n	800163a <__aeabi_dadd+0x236>
 8001638:	e0eb      	b.n	8001812 <__aeabi_dadd+0x40e>
 800163a:	3e01      	subs	r6, #1
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x23e>
 8001640:	e75c      	b.n	80014fc <__aeabi_dadd+0xf8>
 8001642:	4643      	mov	r3, r8
 8001644:	08e9      	lsrs	r1, r5, #3
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	4311      	orrs	r1, r2
 800164a:	0032      	movs	r2, r6
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	484a      	ldr	r0, [pc, #296]	; (8001778 <__aeabi_dadd+0x374>)
 8001650:	4282      	cmp	r2, r0
 8001652:	d021      	beq.n	8001698 <__aeabi_dadd+0x294>
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	0552      	lsls	r2, r2, #21
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	e76c      	b.n	8001538 <__aeabi_dadd+0x134>
 800165e:	2300      	movs	r3, #0
 8001660:	2100      	movs	r1, #0
 8001662:	e769      	b.n	8001538 <__aeabi_dadd+0x134>
 8001664:	002a      	movs	r2, r5
 8001666:	433a      	orrs	r2, r7
 8001668:	d069      	beq.n	800173e <__aeabi_dadd+0x33a>
 800166a:	464a      	mov	r2, r9
 800166c:	0758      	lsls	r0, r3, #29
 800166e:	08d1      	lsrs	r1, r2, #3
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	4308      	orrs	r0, r1
 8001678:	421a      	tst	r2, r3
 800167a:	d007      	beq.n	800168c <__aeabi_dadd+0x288>
 800167c:	0029      	movs	r1, r5
 800167e:	08ed      	lsrs	r5, r5, #3
 8001680:	421d      	tst	r5, r3
 8001682:	d103      	bne.n	800168c <__aeabi_dadd+0x288>
 8001684:	002a      	movs	r2, r5
 8001686:	08ff      	lsrs	r7, r7, #3
 8001688:	0748      	lsls	r0, r1, #29
 800168a:	4338      	orrs	r0, r7
 800168c:	0f43      	lsrs	r3, r0, #29
 800168e:	00c1      	lsls	r1, r0, #3
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	4319      	orrs	r1, r3
 8001696:	0013      	movs	r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x29c>
 800169e:	e213      	b.n	8001ac8 <__aeabi_dadd+0x6c4>
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0312      	lsls	r2, r2, #12
 80016a4:	4313      	orrs	r3, r2
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <__aeabi_dadd+0x374>)
 80016aa:	0b1b      	lsrs	r3, r3, #12
 80016ac:	e744      	b.n	8001538 <__aeabi_dadd+0x134>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d04b      	beq.n	800174a <__aeabi_dadd+0x346>
 80016b2:	1b8a      	subs	r2, r1, r6
 80016b4:	2e00      	cmp	r6, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2b6>
 80016b8:	e0e7      	b.n	800188a <__aeabi_dadd+0x486>
 80016ba:	482f      	ldr	r0, [pc, #188]	; (8001778 <__aeabi_dadd+0x374>)
 80016bc:	4281      	cmp	r1, r0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x2be>
 80016c0:	e195      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80016c2:	2080      	movs	r0, #128	; 0x80
 80016c4:	0400      	lsls	r0, r0, #16
 80016c6:	4303      	orrs	r3, r0
 80016c8:	2a38      	cmp	r2, #56	; 0x38
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dadd+0x2ca>
 80016cc:	e143      	b.n	8001956 <__aeabi_dadd+0x552>
 80016ce:	2a1f      	cmp	r2, #31
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dadd+0x2d0>
 80016d2:	e1db      	b.n	8001a8c <__aeabi_dadd+0x688>
 80016d4:	2020      	movs	r0, #32
 80016d6:	001d      	movs	r5, r3
 80016d8:	464e      	mov	r6, r9
 80016da:	1a80      	subs	r0, r0, r2
 80016dc:	4085      	lsls	r5, r0
 80016de:	40d6      	lsrs	r6, r2
 80016e0:	4335      	orrs	r5, r6
 80016e2:	464e      	mov	r6, r9
 80016e4:	4086      	lsls	r6, r0
 80016e6:	0030      	movs	r0, r6
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	1e46      	subs	r6, r0, #1
 80016ec:	41b0      	sbcs	r0, r6
 80016ee:	449c      	add	ip, r3
 80016f0:	4305      	orrs	r5, r0
 80016f2:	19ed      	adds	r5, r5, r7
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	419b      	sbcs	r3, r3
 80016f8:	425b      	negs	r3, r3
 80016fa:	4463      	add	r3, ip
 80016fc:	4698      	mov	r8, r3
 80016fe:	000e      	movs	r6, r1
 8001700:	e07f      	b.n	8001802 <__aeabi_dadd+0x3fe>
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <__aeabi_dadd+0x378>)
 8001704:	1a76      	subs	r6, r6, r1
 8001706:	4013      	ands	r3, r2
 8001708:	4698      	mov	r8, r3
 800170a:	e6f5      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800170c:	0028      	movs	r0, r5
 800170e:	f001 fd61 	bl	80031d4 <__clzsi2>
 8001712:	0001      	movs	r1, r0
 8001714:	3118      	adds	r1, #24
 8001716:	291f      	cmp	r1, #31
 8001718:	dc00      	bgt.n	800171c <__aeabi_dadd+0x318>
 800171a:	e6cf      	b.n	80014bc <__aeabi_dadd+0xb8>
 800171c:	002b      	movs	r3, r5
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	e6d2      	b.n	80014cc <__aeabi_dadd+0xc8>
 8001726:	4662      	mov	r2, ip
 8001728:	433a      	orrs	r2, r7
 800172a:	0011      	movs	r1, r2
 800172c:	1e4f      	subs	r7, r1, #1
 800172e:	41b9      	sbcs	r1, r7
 8001730:	e6ac      	b.n	800148c <__aeabi_dadd+0x88>
 8001732:	4649      	mov	r1, r9
 8001734:	0758      	lsls	r0, r3, #29
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	4301      	orrs	r1, r0
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	e787      	b.n	800164e <__aeabi_dadd+0x24a>
 800173e:	4649      	mov	r1, r9
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	4311      	orrs	r1, r2
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	e7a6      	b.n	8001698 <__aeabi_dadd+0x294>
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <__aeabi_dadd+0x37c>)
 800174c:	1c70      	adds	r0, r6, #1
 800174e:	4208      	tst	r0, r1
 8001750:	d000      	beq.n	8001754 <__aeabi_dadd+0x350>
 8001752:	e0bb      	b.n	80018cc <__aeabi_dadd+0x4c8>
 8001754:	2e00      	cmp	r6, #0
 8001756:	d000      	beq.n	800175a <__aeabi_dadd+0x356>
 8001758:	e114      	b.n	8001984 <__aeabi_dadd+0x580>
 800175a:	4649      	mov	r1, r9
 800175c:	4319      	orrs	r1, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x35e>
 8001760:	e175      	b.n	8001a4e <__aeabi_dadd+0x64a>
 8001762:	0029      	movs	r1, r5
 8001764:	4339      	orrs	r1, r7
 8001766:	d000      	beq.n	800176a <__aeabi_dadd+0x366>
 8001768:	e17e      	b.n	8001a68 <__aeabi_dadd+0x664>
 800176a:	4649      	mov	r1, r9
 800176c:	0758      	lsls	r0, r3, #29
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	4301      	orrs	r1, r0
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	e76e      	b.n	8001654 <__aeabi_dadd+0x250>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	000007ff 	.word	0x000007ff
 800177c:	ff7fffff 	.word	0xff7fffff
 8001780:	000007fe 	.word	0x000007fe
 8001784:	4649      	mov	r1, r9
 8001786:	1bcd      	subs	r5, r1, r7
 8001788:	4661      	mov	r1, ip
 800178a:	1a58      	subs	r0, r3, r1
 800178c:	45a9      	cmp	r9, r5
 800178e:	4189      	sbcs	r1, r1
 8001790:	4249      	negs	r1, r1
 8001792:	4688      	mov	r8, r1
 8001794:	0001      	movs	r1, r0
 8001796:	4640      	mov	r0, r8
 8001798:	1a09      	subs	r1, r1, r0
 800179a:	4688      	mov	r8, r1
 800179c:	0209      	lsls	r1, r1, #8
 800179e:	d500      	bpl.n	80017a2 <__aeabi_dadd+0x39e>
 80017a0:	e0a6      	b.n	80018f0 <__aeabi_dadd+0x4ec>
 80017a2:	4641      	mov	r1, r8
 80017a4:	4329      	orrs	r1, r5
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x3a6>
 80017a8:	e67f      	b.n	80014aa <__aeabi_dadd+0xa6>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2400      	movs	r4, #0
 80017ae:	e751      	b.n	8001654 <__aeabi_dadd+0x250>
 80017b0:	4cc7      	ldr	r4, [pc, #796]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80017b2:	42a1      	cmp	r1, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x3b4>
 80017b6:	e0c7      	b.n	8001948 <__aeabi_dadd+0x544>
 80017b8:	2480      	movs	r4, #128	; 0x80
 80017ba:	0424      	lsls	r4, r4, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	2a38      	cmp	r2, #56	; 0x38
 80017c0:	dc54      	bgt.n	800186c <__aeabi_dadd+0x468>
 80017c2:	2a1f      	cmp	r2, #31
 80017c4:	dd00      	ble.n	80017c8 <__aeabi_dadd+0x3c4>
 80017c6:	e0cc      	b.n	8001962 <__aeabi_dadd+0x55e>
 80017c8:	2420      	movs	r4, #32
 80017ca:	4648      	mov	r0, r9
 80017cc:	1aa4      	subs	r4, r4, r2
 80017ce:	001d      	movs	r5, r3
 80017d0:	464e      	mov	r6, r9
 80017d2:	40a0      	lsls	r0, r4
 80017d4:	40d6      	lsrs	r6, r2
 80017d6:	40a5      	lsls	r5, r4
 80017d8:	0004      	movs	r4, r0
 80017da:	40d3      	lsrs	r3, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	4335      	orrs	r5, r6
 80017e0:	1e66      	subs	r6, r4, #1
 80017e2:	41b4      	sbcs	r4, r6
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	469c      	mov	ip, r3
 80017e8:	4325      	orrs	r5, r4
 80017ea:	e044      	b.n	8001876 <__aeabi_dadd+0x472>
 80017ec:	4662      	mov	r2, ip
 80017ee:	433a      	orrs	r2, r7
 80017f0:	0015      	movs	r5, r2
 80017f2:	1e6f      	subs	r7, r5, #1
 80017f4:	41bd      	sbcs	r5, r7
 80017f6:	444d      	add	r5, r9
 80017f8:	454d      	cmp	r5, r9
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	4249      	negs	r1, r1
 80017fe:	4688      	mov	r8, r1
 8001800:	4498      	add	r8, r3
 8001802:	4643      	mov	r3, r8
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	d400      	bmi.n	800180a <__aeabi_dadd+0x406>
 8001808:	e718      	b.n	800163c <__aeabi_dadd+0x238>
 800180a:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800180c:	3601      	adds	r6, #1
 800180e:	429e      	cmp	r6, r3
 8001810:	d049      	beq.n	80018a6 <__aeabi_dadd+0x4a2>
 8001812:	4642      	mov	r2, r8
 8001814:	4baf      	ldr	r3, [pc, #700]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001816:	2101      	movs	r1, #1
 8001818:	401a      	ands	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	400d      	ands	r5, r1
 8001820:	4315      	orrs	r5, r2
 8001822:	07d9      	lsls	r1, r3, #31
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	4698      	mov	r8, r3
 8001828:	430d      	orrs	r5, r1
 800182a:	e665      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800182c:	0018      	movs	r0, r3
 800182e:	3e1f      	subs	r6, #31
 8001830:	40f0      	lsrs	r0, r6
 8001832:	2a20      	cmp	r2, #32
 8001834:	d003      	beq.n	800183e <__aeabi_dadd+0x43a>
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	1a8a      	subs	r2, r1, r2
 800183a:	4093      	lsls	r3, r2
 800183c:	431d      	orrs	r5, r3
 800183e:	1e69      	subs	r1, r5, #1
 8001840:	418d      	sbcs	r5, r1
 8001842:	2300      	movs	r3, #0
 8001844:	2600      	movs	r6, #0
 8001846:	4698      	mov	r8, r3
 8001848:	4305      	orrs	r5, r0
 800184a:	e6f7      	b.n	800163c <__aeabi_dadd+0x238>
 800184c:	0011      	movs	r1, r2
 800184e:	4665      	mov	r5, ip
 8001850:	3920      	subs	r1, #32
 8001852:	40cd      	lsrs	r5, r1
 8001854:	2a20      	cmp	r2, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_dadd+0x45e>
 8001858:	2040      	movs	r0, #64	; 0x40
 800185a:	4661      	mov	r1, ip
 800185c:	1a82      	subs	r2, r0, r2
 800185e:	4091      	lsls	r1, r2
 8001860:	430f      	orrs	r7, r1
 8001862:	0039      	movs	r1, r7
 8001864:	1e4f      	subs	r7, r1, #1
 8001866:	41b9      	sbcs	r1, r7
 8001868:	4329      	orrs	r1, r5
 800186a:	e60f      	b.n	800148c <__aeabi_dadd+0x88>
 800186c:	464a      	mov	r2, r9
 800186e:	4313      	orrs	r3, r2
 8001870:	001d      	movs	r5, r3
 8001872:	1e6b      	subs	r3, r5, #1
 8001874:	419d      	sbcs	r5, r3
 8001876:	1b7d      	subs	r5, r7, r5
 8001878:	42af      	cmp	r7, r5
 800187a:	419b      	sbcs	r3, r3
 800187c:	4662      	mov	r2, ip
 800187e:	425b      	negs	r3, r3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4698      	mov	r8, r3
 8001884:	4654      	mov	r4, sl
 8001886:	000e      	movs	r6, r1
 8001888:	e607      	b.n	800149a <__aeabi_dadd+0x96>
 800188a:	4648      	mov	r0, r9
 800188c:	4318      	orrs	r0, r3
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x48e>
 8001890:	e0b3      	b.n	80019fa <__aeabi_dadd+0x5f6>
 8001892:	1e50      	subs	r0, r2, #1
 8001894:	2a01      	cmp	r2, #1
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x496>
 8001898:	e10d      	b.n	8001ab6 <__aeabi_dadd+0x6b2>
 800189a:	4d8d      	ldr	r5, [pc, #564]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800189c:	42aa      	cmp	r2, r5
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x49e>
 80018a0:	e0a5      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80018a2:	0002      	movs	r2, r0
 80018a4:	e710      	b.n	80016c8 <__aeabi_dadd+0x2c4>
 80018a6:	0032      	movs	r2, r6
 80018a8:	2300      	movs	r3, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	e644      	b.n	8001538 <__aeabi_dadd+0x134>
 80018ae:	2120      	movs	r1, #32
 80018b0:	0038      	movs	r0, r7
 80018b2:	1a89      	subs	r1, r1, r2
 80018b4:	4665      	mov	r5, ip
 80018b6:	408f      	lsls	r7, r1
 80018b8:	408d      	lsls	r5, r1
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	1e79      	subs	r1, r7, #1
 80018be:	418f      	sbcs	r7, r1
 80018c0:	4305      	orrs	r5, r0
 80018c2:	433d      	orrs	r5, r7
 80018c4:	4667      	mov	r7, ip
 80018c6:	40d7      	lsrs	r7, r2
 80018c8:	19db      	adds	r3, r3, r7
 80018ca:	e794      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80018ce:	4290      	cmp	r0, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x4d0>
 80018d2:	e0ec      	b.n	8001aae <__aeabi_dadd+0x6aa>
 80018d4:	0039      	movs	r1, r7
 80018d6:	4449      	add	r1, r9
 80018d8:	4549      	cmp	r1, r9
 80018da:	4192      	sbcs	r2, r2
 80018dc:	4463      	add	r3, ip
 80018de:	4252      	negs	r2, r2
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	07dd      	lsls	r5, r3, #31
 80018e4:	0849      	lsrs	r1, r1, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	4698      	mov	r8, r3
 80018ea:	0006      	movs	r6, r0
 80018ec:	430d      	orrs	r5, r1
 80018ee:	e6a5      	b.n	800163c <__aeabi_dadd+0x238>
 80018f0:	464a      	mov	r2, r9
 80018f2:	1abd      	subs	r5, r7, r2
 80018f4:	42af      	cmp	r7, r5
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	4662      	mov	r2, ip
 80018fa:	4249      	negs	r1, r1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	4698      	mov	r8, r3
 8001902:	4654      	mov	r4, sl
 8001904:	e5d1      	b.n	80014aa <__aeabi_dadd+0xa6>
 8001906:	076c      	lsls	r4, r5, #29
 8001908:	08f9      	lsrs	r1, r7, #3
 800190a:	4321      	orrs	r1, r4
 800190c:	08eb      	lsrs	r3, r5, #3
 800190e:	0004      	movs	r4, r0
 8001910:	e69d      	b.n	800164e <__aeabi_dadd+0x24a>
 8001912:	464a      	mov	r2, r9
 8001914:	431a      	orrs	r2, r3
 8001916:	d175      	bne.n	8001a04 <__aeabi_dadd+0x600>
 8001918:	4661      	mov	r1, ip
 800191a:	4339      	orrs	r1, r7
 800191c:	d114      	bne.n	8001948 <__aeabi_dadd+0x544>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	2400      	movs	r4, #0
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	e6bc      	b.n	80016a0 <__aeabi_dadd+0x29c>
 8001926:	464a      	mov	r2, r9
 8001928:	1bd5      	subs	r5, r2, r7
 800192a:	45a9      	cmp	r9, r5
 800192c:	4189      	sbcs	r1, r1
 800192e:	4662      	mov	r2, ip
 8001930:	4249      	negs	r1, r1
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	1a5b      	subs	r3, r3, r1
 8001936:	4698      	mov	r8, r3
 8001938:	2601      	movs	r6, #1
 800193a:	e5ae      	b.n	800149a <__aeabi_dadd+0x96>
 800193c:	464a      	mov	r2, r9
 800193e:	08d1      	lsrs	r1, r2, #3
 8001940:	075a      	lsls	r2, r3, #29
 8001942:	4311      	orrs	r1, r2
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	e6a7      	b.n	8001698 <__aeabi_dadd+0x294>
 8001948:	4663      	mov	r3, ip
 800194a:	08f9      	lsrs	r1, r7, #3
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	4654      	mov	r4, sl
 8001950:	4311      	orrs	r1, r2
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	e6a0      	b.n	8001698 <__aeabi_dadd+0x294>
 8001956:	464a      	mov	r2, r9
 8001958:	4313      	orrs	r3, r2
 800195a:	001d      	movs	r5, r3
 800195c:	1e6b      	subs	r3, r5, #1
 800195e:	419d      	sbcs	r5, r3
 8001960:	e6c7      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001962:	0014      	movs	r4, r2
 8001964:	001e      	movs	r6, r3
 8001966:	3c20      	subs	r4, #32
 8001968:	40e6      	lsrs	r6, r4
 800196a:	2a20      	cmp	r2, #32
 800196c:	d005      	beq.n	800197a <__aeabi_dadd+0x576>
 800196e:	2440      	movs	r4, #64	; 0x40
 8001970:	1aa2      	subs	r2, r4, r2
 8001972:	4093      	lsls	r3, r2
 8001974:	464a      	mov	r2, r9
 8001976:	431a      	orrs	r2, r3
 8001978:	4691      	mov	r9, r2
 800197a:	464d      	mov	r5, r9
 800197c:	1e6b      	subs	r3, r5, #1
 800197e:	419d      	sbcs	r5, r3
 8001980:	4335      	orrs	r5, r6
 8001982:	e778      	b.n	8001876 <__aeabi_dadd+0x472>
 8001984:	464a      	mov	r2, r9
 8001986:	431a      	orrs	r2, r3
 8001988:	d000      	beq.n	800198c <__aeabi_dadd+0x588>
 800198a:	e66b      	b.n	8001664 <__aeabi_dadd+0x260>
 800198c:	076b      	lsls	r3, r5, #29
 800198e:	08f9      	lsrs	r1, r7, #3
 8001990:	4319      	orrs	r1, r3
 8001992:	08eb      	lsrs	r3, r5, #3
 8001994:	e680      	b.n	8001698 <__aeabi_dadd+0x294>
 8001996:	4661      	mov	r1, ip
 8001998:	4339      	orrs	r1, r7
 800199a:	d054      	beq.n	8001a46 <__aeabi_dadd+0x642>
 800199c:	4663      	mov	r3, ip
 800199e:	08f9      	lsrs	r1, r7, #3
 80019a0:	075c      	lsls	r4, r3, #29
 80019a2:	4321      	orrs	r1, r4
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0004      	movs	r4, r0
 80019a8:	e654      	b.n	8001654 <__aeabi_dadd+0x250>
 80019aa:	464a      	mov	r2, r9
 80019ac:	1abd      	subs	r5, r7, r2
 80019ae:	42af      	cmp	r7, r5
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	4662      	mov	r2, ip
 80019b4:	4249      	negs	r1, r1
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	1a5b      	subs	r3, r3, r1
 80019ba:	4698      	mov	r8, r3
 80019bc:	0004      	movs	r4, r0
 80019be:	2601      	movs	r6, #1
 80019c0:	e56b      	b.n	800149a <__aeabi_dadd+0x96>
 80019c2:	464a      	mov	r2, r9
 80019c4:	1bd5      	subs	r5, r2, r7
 80019c6:	45a9      	cmp	r9, r5
 80019c8:	4189      	sbcs	r1, r1
 80019ca:	4662      	mov	r2, ip
 80019cc:	4249      	negs	r1, r1
 80019ce:	1a9a      	subs	r2, r3, r2
 80019d0:	1a52      	subs	r2, r2, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	d532      	bpl.n	8001a3e <__aeabi_dadd+0x63a>
 80019d8:	464a      	mov	r2, r9
 80019da:	1abd      	subs	r5, r7, r2
 80019dc:	42af      	cmp	r7, r5
 80019de:	4189      	sbcs	r1, r1
 80019e0:	4662      	mov	r2, ip
 80019e2:	4249      	negs	r1, r1
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	1a5b      	subs	r3, r3, r1
 80019e8:	4698      	mov	r8, r3
 80019ea:	0004      	movs	r4, r0
 80019ec:	e584      	b.n	80014f8 <__aeabi_dadd+0xf4>
 80019ee:	4663      	mov	r3, ip
 80019f0:	08f9      	lsrs	r1, r7, #3
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	4311      	orrs	r1, r2
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	e64e      	b.n	8001698 <__aeabi_dadd+0x294>
 80019fa:	08f9      	lsrs	r1, r7, #3
 80019fc:	0768      	lsls	r0, r5, #29
 80019fe:	4301      	orrs	r1, r0
 8001a00:	08eb      	lsrs	r3, r5, #3
 8001a02:	e624      	b.n	800164e <__aeabi_dadd+0x24a>
 8001a04:	4662      	mov	r2, ip
 8001a06:	433a      	orrs	r2, r7
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dadd+0x608>
 8001a0a:	e698      	b.n	800173e <__aeabi_dadd+0x33a>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	08d1      	lsrs	r1, r2, #3
 8001a10:	075a      	lsls	r2, r3, #29
 8001a12:	4311      	orrs	r1, r2
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d008      	beq.n	8001a30 <__aeabi_dadd+0x62c>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	08c5      	lsrs	r5, r0, #3
 8001a22:	421d      	tst	r5, r3
 8001a24:	d104      	bne.n	8001a30 <__aeabi_dadd+0x62c>
 8001a26:	4654      	mov	r4, sl
 8001a28:	002a      	movs	r2, r5
 8001a2a:	08f9      	lsrs	r1, r7, #3
 8001a2c:	0743      	lsls	r3, r0, #29
 8001a2e:	4319      	orrs	r1, r3
 8001a30:	0f4b      	lsrs	r3, r1, #29
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	08c9      	lsrs	r1, r1, #3
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	e62c      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4329      	orrs	r1, r5
 8001a42:	d000      	beq.n	8001a46 <__aeabi_dadd+0x642>
 8001a44:	e5fa      	b.n	800163c <__aeabi_dadd+0x238>
 8001a46:	2300      	movs	r3, #0
 8001a48:	000a      	movs	r2, r1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	e602      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a4e:	076b      	lsls	r3, r5, #29
 8001a50:	08f9      	lsrs	r1, r7, #3
 8001a52:	4319      	orrs	r1, r3
 8001a54:	08eb      	lsrs	r3, r5, #3
 8001a56:	e5fd      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	08f9      	lsrs	r1, r7, #3
 8001a5c:	075b      	lsls	r3, r3, #29
 8001a5e:	4319      	orrs	r1, r3
 8001a60:	4663      	mov	r3, ip
 8001a62:	0004      	movs	r4, r0
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	e617      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a68:	003d      	movs	r5, r7
 8001a6a:	444d      	add	r5, r9
 8001a6c:	4463      	add	r3, ip
 8001a6e:	454d      	cmp	r5, r9
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	4249      	negs	r1, r1
 8001a76:	4488      	add	r8, r1
 8001a78:	4643      	mov	r3, r8
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dadd+0x67c>
 8001a7e:	e5dd      	b.n	800163c <__aeabi_dadd+0x238>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e5d7      	b.n	800163c <__aeabi_dadd+0x238>
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	001e      	movs	r6, r3
 8001a90:	3820      	subs	r0, #32
 8001a92:	40c6      	lsrs	r6, r0
 8001a94:	2a20      	cmp	r2, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dadd+0x6a0>
 8001a98:	2040      	movs	r0, #64	; 0x40
 8001a9a:	1a82      	subs	r2, r0, r2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	464d      	mov	r5, r9
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	419d      	sbcs	r5, r3
 8001aaa:	4335      	orrs	r5, r6
 8001aac:	e621      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e540      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	19d5      	adds	r5, r2, r7
 8001aba:	42bd      	cmp	r5, r7
 8001abc:	4189      	sbcs	r1, r1
 8001abe:	4463      	add	r3, ip
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4249      	negs	r1, r1
 8001ac4:	4488      	add	r8, r1
 8001ac6:	e5b3      	b.n	8001630 <__aeabi_dadd+0x22c>
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 8001acc:	000b      	movs	r3, r1
 8001ace:	e533      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff

08001ad8 <__aeabi_ddiv>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	4657      	mov	r7, sl
 8001adc:	464e      	mov	r6, r9
 8001ade:	4645      	mov	r5, r8
 8001ae0:	46de      	mov	lr, fp
 8001ae2:	b5e0      	push	{r5, r6, r7, lr}
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	0048      	lsls	r0, r1, #1
 8001aec:	4692      	mov	sl, r2
 8001aee:	001f      	movs	r7, r3
 8001af0:	b085      	sub	sp, #20
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d40      	lsrs	r0, r0, #21
 8001af6:	0fce      	lsrs	r6, r1, #31
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d059      	beq.n	8001bb0 <__aeabi_ddiv+0xd8>
 8001afc:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x2c>
 8001b02:	e098      	b.n	8001c36 <__aeabi_ddiv+0x15e>
 8001b04:	0f6b      	lsrs	r3, r5, #29
 8001b06:	00e4      	lsls	r4, r4, #3
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	4698      	mov	r8, r3
 8001b12:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b14:	00ed      	lsls	r5, r5, #3
 8001b16:	469b      	mov	fp, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	4483      	add	fp, r0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	033c      	lsls	r4, r7, #12
 8001b22:	007b      	lsls	r3, r7, #1
 8001b24:	4650      	mov	r0, sl
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	0d5b      	lsrs	r3, r3, #21
 8001b2a:	0fff      	lsrs	r7, r7, #31
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d067      	beq.n	8001c00 <__aeabi_ddiv+0x128>
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <__aeabi_ddiv+0x90>
 8001b36:	497a      	ldr	r1, [pc, #488]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b38:	0f42      	lsrs	r2, r0, #29
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	00e4      	lsls	r4, r4, #3
 8001b3e:	4659      	mov	r1, fp
 8001b40:	4314      	orrs	r4, r2
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4463      	add	r3, ip
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	00c2      	lsls	r2, r0, #3
 8001b50:	2000      	movs	r0, #0
 8001b52:	0033      	movs	r3, r6
 8001b54:	407b      	eors	r3, r7
 8001b56:	469a      	mov	sl, r3
 8001b58:	464b      	mov	r3, r9
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x88>
 8001b5e:	e0ef      	b.n	8001d40 <__aeabi_ddiv+0x268>
 8001b60:	4970      	ldr	r1, [pc, #448]	; (8001d24 <__aeabi_ddiv+0x24c>)
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	58cb      	ldr	r3, [r1, r3]
 8001b66:	469f      	mov	pc, r3
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <__aeabi_ddiv+0x250>)
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	4322      	orrs	r2, r4
 8001b70:	44e3      	add	fp, ip
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0xa0>
 8001b76:	e095      	b.n	8001ca4 <__aeabi_ddiv+0x1cc>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2400      	movs	r4, #0
 8001b82:	2002      	movs	r0, #2
 8001b84:	e7e5      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4323      	orrs	r3, r4
 8001b92:	07d2      	lsls	r2, r2, #31
 8001b94:	4313      	orrs	r3, r2
 8001b96:	0028      	movs	r0, r5
 8001b98:	0019      	movs	r1, r3
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2500      	movs	r5, #0
 8001bac:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001bae:	e7ed      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0xe2>
 8001bb8:	e089      	b.n	8001cce <__aeabi_ddiv+0x1f6>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0xe8>
 8001bbe:	e1e0      	b.n	8001f82 <__aeabi_ddiv+0x4aa>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb07 	bl	80031d4 <__clzsi2>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	0002      	movs	r2, r0
 8001bca:	390b      	subs	r1, #11
 8001bcc:	231d      	movs	r3, #29
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	3808      	subs	r0, #8
 8001bd8:	4084      	lsls	r4, r0
 8001bda:	000b      	movs	r3, r1
 8001bdc:	464d      	mov	r5, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4698      	mov	r8, r3
 8001be2:	4085      	lsls	r5, r0
 8001be4:	4851      	ldr	r0, [pc, #324]	; (8001d2c <__aeabi_ddiv+0x254>)
 8001be6:	033c      	lsls	r4, r7, #12
 8001be8:	1a83      	subs	r3, r0, r2
 8001bea:	469b      	mov	fp, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	007b      	lsls	r3, r7, #1
 8001bf4:	4650      	mov	r0, sl
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	0fff      	lsrs	r7, r7, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d197      	bne.n	8001b30 <__aeabi_ddiv+0x58>
 8001c00:	4652      	mov	r2, sl
 8001c02:	4322      	orrs	r2, r4
 8001c04:	d055      	beq.n	8001cb2 <__aeabi_ddiv+0x1da>
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x134>
 8001c0a:	e1ca      	b.n	8001fa2 <__aeabi_ddiv+0x4ca>
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f001 fae1 	bl	80031d4 <__clzsi2>
 8001c12:	0002      	movs	r2, r0
 8001c14:	3a0b      	subs	r2, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	0001      	movs	r1, r0
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	3908      	subs	r1, #8
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	408c      	lsls	r4, r1
 8001c24:	4314      	orrs	r4, r2
 8001c26:	4652      	mov	r2, sl
 8001c28:	408a      	lsls	r2, r1
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <__aeabi_ddiv+0x258>)
 8001c2c:	4458      	add	r0, fp
 8001c2e:	469b      	mov	fp, r3
 8001c30:	4483      	add	fp, r0
 8001c32:	2000      	movs	r0, #0
 8001c34:	e78d      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001c36:	464b      	mov	r3, r9
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	d140      	bne.n	8001cc0 <__aeabi_ddiv+0x1e8>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	4699      	mov	r9, r3
 8001c42:	3b06      	subs	r3, #6
 8001c44:	2500      	movs	r5, #0
 8001c46:	4683      	mov	fp, r0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	e769      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001c4c:	46b2      	mov	sl, r6
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d0a9      	beq.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x182>
 8001c58:	e211      	b.n	800207e <__aeabi_ddiv+0x5a6>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d093      	beq.n	8001b86 <__aeabi_ddiv+0xae>
 8001c5e:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <__aeabi_ddiv+0x25c>)
 8001c60:	445a      	add	r2, fp
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_ddiv+0x190>
 8001c66:	e13c      	b.n	8001ee2 <__aeabi_ddiv+0x40a>
 8001c68:	076b      	lsls	r3, r5, #29
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_ddiv+0x196>
 8001c6c:	e1a7      	b.n	8001fbe <__aeabi_ddiv+0x4e6>
 8001c6e:	08ed      	lsrs	r5, r5, #3
 8001c70:	4643      	mov	r3, r8
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	d506      	bpl.n	8001c84 <__aeabi_ddiv+0x1ac>
 8001c76:	4642      	mov	r2, r8
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <__aeabi_ddiv+0x260>)
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	00d2      	lsls	r2, r2, #3
 8001c82:	445a      	add	r2, fp
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <__aeabi_ddiv+0x264>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dc8e      	bgt.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	0552      	lsls	r2, r2, #21
 8001c8e:	0758      	lsls	r0, r3, #29
 8001c90:	025c      	lsls	r4, r3, #9
 8001c92:	4305      	orrs	r5, r0
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d53      	lsrs	r3, r2, #21
 8001c98:	e778      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001c9a:	46ba      	mov	sl, r7
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	0015      	movs	r5, r2
 8001ca0:	9000      	str	r0, [sp, #0]
 8001ca2:	e7d4      	b.n	8001c4e <__aeabi_ddiv+0x176>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4691      	mov	r9, r2
 8001cac:	2003      	movs	r0, #3
 8001cae:	4652      	mov	r2, sl
 8001cb0:	e74f      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	4689      	mov	r9, r1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e748      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	3b09      	subs	r3, #9
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	4683      	mov	fp, r0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	e728      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2500      	movs	r5, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	e720      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	469a      	mov	sl, r3
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	e74f      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	4641      	mov	r1, r8
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	4219      	tst	r1, r3
 8001cf4:	d008      	beq.n	8001d08 <__aeabi_ddiv+0x230>
 8001cf6:	421c      	tst	r4, r3
 8001cf8:	d106      	bne.n	8001d08 <__aeabi_ddiv+0x230>
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	0324      	lsls	r4, r4, #12
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	0015      	movs	r5, r2
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e741      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	46b2      	mov	sl, r6
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e738      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	08013ed4 	.word	0x08013ed4
 8001d28:	fffff801 	.word	0xfffff801
 8001d2c:	fffffc0d 	.word	0xfffffc0d
 8001d30:	000003f3 	.word	0x000003f3
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	4544      	cmp	r4, r8
 8001d42:	d200      	bcs.n	8001d46 <__aeabi_ddiv+0x26e>
 8001d44:	e116      	b.n	8001f74 <__aeabi_ddiv+0x49c>
 8001d46:	d100      	bne.n	8001d4a <__aeabi_ddiv+0x272>
 8001d48:	e111      	b.n	8001f6e <__aeabi_ddiv+0x496>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	469c      	mov	ip, r3
 8001d50:	002e      	movs	r6, r5
 8001d52:	4640      	mov	r0, r8
 8001d54:	2500      	movs	r5, #0
 8001d56:	44e3      	add	fp, ip
 8001d58:	0223      	lsls	r3, r4, #8
 8001d5a:	0e14      	lsrs	r4, r2, #24
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	4699      	mov	r9, r3
 8001d62:	0423      	lsls	r3, r4, #16
 8001d64:	0c1f      	lsrs	r7, r3, #16
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	9701      	str	r7, [sp, #4]
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_uidivmod>
 8001d72:	0002      	movs	r2, r0
 8001d74:	437a      	muls	r2, r7
 8001d76:	040b      	lsls	r3, r1, #16
 8001d78:	0c31      	lsrs	r1, r6, #16
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	d90b      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d82:	2301      	movs	r3, #1
 8001d84:	425b      	negs	r3, r3
 8001d86:	469c      	mov	ip, r3
 8001d88:	1909      	adds	r1, r1, r4
 8001d8a:	44e0      	add	r8, ip
 8001d8c:	428c      	cmp	r4, r1
 8001d8e:	d804      	bhi.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d902      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	4698      	mov	r8, r3
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	1a88      	subs	r0, r1, r2
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	f7fe fa3f 	bl	8000220 <__aeabi_uidivmod>
 8001da2:	0409      	lsls	r1, r1, #16
 8001da4:	468c      	mov	ip, r1
 8001da6:	0431      	lsls	r1, r6, #16
 8001da8:	4666      	mov	r6, ip
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	0c09      	lsrs	r1, r1, #16
 8001dae:	4342      	muls	r2, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	4331      	orrs	r1, r6
 8001db4:	428a      	cmp	r2, r1
 8001db6:	d904      	bls.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001db8:	1909      	adds	r1, r1, r4
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	428c      	cmp	r4, r1
 8001dbe:	d800      	bhi.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001dc0:	e111      	b.n	8001fe6 <__aeabi_ddiv+0x50e>
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	9e00      	ldr	r6, [sp, #0]
 8001dc8:	0412      	lsls	r2, r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	0c33      	lsrs	r3, r6, #16
 8001dce:	001f      	movs	r7, r3
 8001dd0:	0c10      	lsrs	r0, r2, #16
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	0413      	lsls	r3, r2, #16
 8001dd8:	0432      	lsls	r2, r6, #16
 8001dda:	0c16      	lsrs	r6, r2, #16
 8001ddc:	0032      	movs	r2, r6
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	435a      	muls	r2, r3
 8001de2:	9603      	str	r6, [sp, #12]
 8001de4:	437b      	muls	r3, r7
 8001de6:	4346      	muls	r6, r0
 8001de8:	4378      	muls	r0, r7
 8001dea:	0c17      	lsrs	r7, r2, #16
 8001dec:	46bc      	mov	ip, r7
 8001dee:	199b      	adds	r3, r3, r6
 8001df0:	4463      	add	r3, ip
 8001df2:	429e      	cmp	r6, r3
 8001df4:	d903      	bls.n	8001dfe <__aeabi_ddiv+0x326>
 8001df6:	2680      	movs	r6, #128	; 0x80
 8001df8:	0276      	lsls	r6, r6, #9
 8001dfa:	46b4      	mov	ip, r6
 8001dfc:	4460      	add	r0, ip
 8001dfe:	0c1e      	lsrs	r6, r3, #16
 8001e00:	1830      	adds	r0, r6, r0
 8001e02:	0416      	lsls	r6, r2, #16
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c36      	lsrs	r6, r6, #16
 8001e08:	199e      	adds	r6, r3, r6
 8001e0a:	4281      	cmp	r1, r0
 8001e0c:	d200      	bcs.n	8001e10 <__aeabi_ddiv+0x338>
 8001e0e:	e09c      	b.n	8001f4a <__aeabi_ddiv+0x472>
 8001e10:	d100      	bne.n	8001e14 <__aeabi_ddiv+0x33c>
 8001e12:	e097      	b.n	8001f44 <__aeabi_ddiv+0x46c>
 8001e14:	1bae      	subs	r6, r5, r6
 8001e16:	1a09      	subs	r1, r1, r0
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	4180      	sbcs	r0, r0
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	1a08      	subs	r0, r1, r0
 8001e20:	4284      	cmp	r4, r0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x34e>
 8001e24:	e111      	b.n	800204a <__aeabi_ddiv+0x572>
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe f9fa 	bl	8000220 <__aeabi_uidivmod>
 8001e2c:	9a01      	ldr	r2, [sp, #4]
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0c31      	lsrs	r1, r6, #16
 8001e34:	0005      	movs	r5, r0
 8001e36:	4319      	orrs	r1, r3
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d907      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e3c:	1909      	adds	r1, r1, r4
 8001e3e:	3d01      	subs	r5, #1
 8001e40:	428c      	cmp	r4, r1
 8001e42:	d803      	bhi.n	8001e4c <__aeabi_ddiv+0x374>
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d901      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e48:	1e85      	subs	r5, r0, #2
 8001e4a:	1909      	adds	r1, r1, r4
 8001e4c:	1a88      	subs	r0, r1, r2
 8001e4e:	4649      	mov	r1, r9
 8001e50:	f7fe f9e6 	bl	8000220 <__aeabi_uidivmod>
 8001e54:	0409      	lsls	r1, r1, #16
 8001e56:	468c      	mov	ip, r1
 8001e58:	0431      	lsls	r1, r6, #16
 8001e5a:	4666      	mov	r6, ip
 8001e5c:	9a01      	ldr	r2, [sp, #4]
 8001e5e:	0c09      	lsrs	r1, r1, #16
 8001e60:	4342      	muls	r2, r0
 8001e62:	0003      	movs	r3, r0
 8001e64:	4331      	orrs	r1, r6
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d907      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e6a:	1909      	adds	r1, r1, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	428c      	cmp	r4, r1
 8001e70:	d803      	bhi.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d901      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e76:	1e83      	subs	r3, r0, #2
 8001e78:	1909      	adds	r1, r1, r4
 8001e7a:	9e03      	ldr	r6, [sp, #12]
 8001e7c:	1a89      	subs	r1, r1, r2
 8001e7e:	0032      	movs	r2, r6
 8001e80:	042d      	lsls	r5, r5, #16
 8001e82:	431d      	orrs	r5, r3
 8001e84:	9f02      	ldr	r7, [sp, #8]
 8001e86:	042b      	lsls	r3, r5, #16
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	435a      	muls	r2, r3
 8001e8c:	437b      	muls	r3, r7
 8001e8e:	469c      	mov	ip, r3
 8001e90:	0c28      	lsrs	r0, r5, #16
 8001e92:	4346      	muls	r6, r0
 8001e94:	0c13      	lsrs	r3, r2, #16
 8001e96:	44b4      	add	ip, r6
 8001e98:	4463      	add	r3, ip
 8001e9a:	4378      	muls	r0, r7
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d903      	bls.n	8001ea8 <__aeabi_ddiv+0x3d0>
 8001ea0:	2680      	movs	r6, #128	; 0x80
 8001ea2:	0276      	lsls	r6, r6, #9
 8001ea4:	46b4      	mov	ip, r6
 8001ea6:	4460      	add	r0, ip
 8001ea8:	0c1e      	lsrs	r6, r3, #16
 8001eaa:	0412      	lsls	r2, r2, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c12      	lsrs	r2, r2, #16
 8001eb0:	1830      	adds	r0, r6, r0
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	d306      	bcc.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001eb8:	d002      	beq.n	8001ec0 <__aeabi_ddiv+0x3e8>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	431d      	orrs	r5, r3
 8001ebe:	e6ce      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001ec4:	e6cb      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec6:	1861      	adds	r1, r4, r1
 8001ec8:	1e6e      	subs	r6, r5, #1
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	d200      	bcs.n	8001ed0 <__aeabi_ddiv+0x3f8>
 8001ece:	e0a4      	b.n	800201a <__aeabi_ddiv+0x542>
 8001ed0:	4281      	cmp	r1, r0
 8001ed2:	d200      	bcs.n	8001ed6 <__aeabi_ddiv+0x3fe>
 8001ed4:	e0c9      	b.n	800206a <__aeabi_ddiv+0x592>
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x402>
 8001ed8:	e0d9      	b.n	800208e <__aeabi_ddiv+0x5b6>
 8001eda:	0035      	movs	r5, r6
 8001edc:	e7ed      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8001ede:	2501      	movs	r5, #1
 8001ee0:	426d      	negs	r5, r5
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	1a89      	subs	r1, r1, r2
 8001ee6:	2938      	cmp	r1, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_ddiv+0x414>
 8001eea:	e64c      	b.n	8001b86 <__aeabi_ddiv+0xae>
 8001eec:	291f      	cmp	r1, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x41a>
 8001ef0:	e07f      	b.n	8001ff2 <__aeabi_ddiv+0x51a>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	1a9a      	subs	r2, r3, r2
 8001ef8:	4643      	mov	r3, r8
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	2920      	cmp	r1, #32
 8001efe:	d004      	beq.n	8001f0a <__aeabi_ddiv+0x432>
 8001f00:	4644      	mov	r4, r8
 8001f02:	4a65      	ldr	r2, [pc, #404]	; (8002098 <__aeabi_ddiv+0x5c0>)
 8001f04:	445a      	add	r2, fp
 8001f06:	4094      	lsls	r4, r2
 8001f08:	4325      	orrs	r5, r4
 8001f0a:	1e6a      	subs	r2, r5, #1
 8001f0c:	4195      	sbcs	r5, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	432b      	orrs	r3, r5
 8001f12:	0015      	movs	r5, r2
 8001f14:	2400      	movs	r4, #0
 8001f16:	401d      	ands	r5, r3
 8001f18:	421a      	tst	r2, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x446>
 8001f1c:	e0a1      	b.n	8002062 <__aeabi_ddiv+0x58a>
 8001f1e:	220f      	movs	r2, #15
 8001f20:	2400      	movs	r4, #0
 8001f22:	401a      	ands	r2, r3
 8001f24:	2a04      	cmp	r2, #4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8001f28:	e098      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	0222      	lsls	r2, r4, #8
 8001f38:	d400      	bmi.n	8001f3c <__aeabi_ddiv+0x464>
 8001f3a:	e08f      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2500      	movs	r5, #0
 8001f42:	e623      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001f44:	42b5      	cmp	r5, r6
 8001f46:	d300      	bcc.n	8001f4a <__aeabi_ddiv+0x472>
 8001f48:	e764      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	9b00      	ldr	r3, [sp, #0]
 8001f50:	469c      	mov	ip, r3
 8001f52:	4465      	add	r5, ip
 8001f54:	001f      	movs	r7, r3
 8001f56:	429d      	cmp	r5, r3
 8001f58:	419b      	sbcs	r3, r3
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	191b      	adds	r3, r3, r4
 8001f5e:	18c9      	adds	r1, r1, r3
 8001f60:	428c      	cmp	r4, r1
 8001f62:	d23a      	bcs.n	8001fda <__aeabi_ddiv+0x502>
 8001f64:	4288      	cmp	r0, r1
 8001f66:	d863      	bhi.n	8002030 <__aeabi_ddiv+0x558>
 8001f68:	d060      	beq.n	800202c <__aeabi_ddiv+0x554>
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	e752      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f6e:	42aa      	cmp	r2, r5
 8001f70:	d900      	bls.n	8001f74 <__aeabi_ddiv+0x49c>
 8001f72:	e6ea      	b.n	8001d4a <__aeabi_ddiv+0x272>
 8001f74:	4643      	mov	r3, r8
 8001f76:	07de      	lsls	r6, r3, #31
 8001f78:	0858      	lsrs	r0, r3, #1
 8001f7a:	086b      	lsrs	r3, r5, #1
 8001f7c:	431e      	orrs	r6, r3
 8001f7e:	07ed      	lsls	r5, r5, #31
 8001f80:	e6ea      	b.n	8001d58 <__aeabi_ddiv+0x280>
 8001f82:	4648      	mov	r0, r9
 8001f84:	f001 f926 	bl	80031d4 <__clzsi2>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	3115      	adds	r1, #21
 8001f8e:	3220      	adds	r2, #32
 8001f90:	291c      	cmp	r1, #28
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x4be>
 8001f94:	e61a      	b.n	8001bcc <__aeabi_ddiv+0xf4>
 8001f96:	464b      	mov	r3, r9
 8001f98:	3808      	subs	r0, #8
 8001f9a:	4083      	lsls	r3, r0
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	e620      	b.n	8001be4 <__aeabi_ddiv+0x10c>
 8001fa2:	f001 f917 	bl	80031d4 <__clzsi2>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	3215      	adds	r2, #21
 8001fac:	3020      	adds	r0, #32
 8001fae:	2a1c      	cmp	r2, #28
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_ddiv+0x4dc>
 8001fb2:	e630      	b.n	8001c16 <__aeabi_ddiv+0x13e>
 8001fb4:	4654      	mov	r4, sl
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	2200      	movs	r2, #0
 8001fba:	409c      	lsls	r4, r3
 8001fbc:	e635      	b.n	8001c2a <__aeabi_ddiv+0x152>
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	402b      	ands	r3, r5
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_ddiv+0x4f0>
 8001fc6:	e652      	b.n	8001c6e <__aeabi_ddiv+0x196>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	425b      	negs	r3, r3
 8001fcc:	42ab      	cmp	r3, r5
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	3504      	adds	r5, #4
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	08ed      	lsrs	r5, r5, #3
 8001fd6:	4498      	add	r8, r3
 8001fd8:	e64a      	b.n	8001c70 <__aeabi_ddiv+0x198>
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d1c5      	bne.n	8001f6a <__aeabi_ddiv+0x492>
 8001fde:	42af      	cmp	r7, r5
 8001fe0:	d9c0      	bls.n	8001f64 <__aeabi_ddiv+0x48c>
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	e716      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x514>
 8001fea:	e6ea      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001fec:	1e83      	subs	r3, r0, #2
 8001fee:	1909      	adds	r1, r1, r4
 8001ff0:	e6e7      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <__aeabi_ddiv+0x5c4>)
 8001ff4:	0028      	movs	r0, r5
 8001ff6:	445a      	add	r2, fp
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	4095      	lsls	r5, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	1e6a      	subs	r2, r5, #1
 8002002:	4195      	sbcs	r5, r2
 8002004:	4644      	mov	r4, r8
 8002006:	4303      	orrs	r3, r0
 8002008:	432b      	orrs	r3, r5
 800200a:	40cc      	lsrs	r4, r1
 800200c:	075a      	lsls	r2, r3, #29
 800200e:	d092      	beq.n	8001f36 <__aeabi_ddiv+0x45e>
 8002010:	220f      	movs	r2, #15
 8002012:	401a      	ands	r2, r3
 8002014:	2a04      	cmp	r2, #4
 8002016:	d188      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8002018:	e78d      	b.n	8001f36 <__aeabi_ddiv+0x45e>
 800201a:	0035      	movs	r5, r6
 800201c:	4281      	cmp	r1, r0
 800201e:	d000      	beq.n	8002022 <__aeabi_ddiv+0x54a>
 8002020:	e74b      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	4293      	cmp	r3, r2
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x552>
 8002028:	e747      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 800202a:	e618      	b.n	8001c5e <__aeabi_ddiv+0x186>
 800202c:	42ae      	cmp	r6, r5
 800202e:	d99c      	bls.n	8001f6a <__aeabi_ddiv+0x492>
 8002030:	2302      	movs	r3, #2
 8002032:	425b      	negs	r3, r3
 8002034:	469c      	mov	ip, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	44e0      	add	r8, ip
 800203a:	469c      	mov	ip, r3
 800203c:	4465      	add	r5, ip
 800203e:	429d      	cmp	r5, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	425b      	negs	r3, r3
 8002044:	191b      	adds	r3, r3, r4
 8002046:	18c9      	adds	r1, r1, r3
 8002048:	e6e4      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <__aeabi_ddiv+0x5c8>)
 800204c:	445a      	add	r2, fp
 800204e:	2a00      	cmp	r2, #0
 8002050:	dc00      	bgt.n	8002054 <__aeabi_ddiv+0x57c>
 8002052:	e744      	b.n	8001ede <__aeabi_ddiv+0x406>
 8002054:	2301      	movs	r3, #1
 8002056:	2500      	movs	r5, #0
 8002058:	4498      	add	r8, r3
 800205a:	e609      	b.n	8001c70 <__aeabi_ddiv+0x198>
 800205c:	0765      	lsls	r5, r4, #29
 800205e:	0264      	lsls	r4, r4, #9
 8002060:	0b24      	lsrs	r4, r4, #12
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	431d      	orrs	r5, r3
 8002066:	2300      	movs	r3, #0
 8002068:	e590      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800206a:	9e00      	ldr	r6, [sp, #0]
 800206c:	3d02      	subs	r5, #2
 800206e:	0072      	lsls	r2, r6, #1
 8002070:	42b2      	cmp	r2, r6
 8002072:	41bf      	sbcs	r7, r7
 8002074:	427f      	negs	r7, r7
 8002076:	193c      	adds	r4, r7, r4
 8002078:	1909      	adds	r1, r1, r4
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	e7ce      	b.n	800201c <__aeabi_ddiv+0x544>
 800207e:	2480      	movs	r4, #128	; 0x80
 8002080:	4643      	mov	r3, r8
 8002082:	0324      	lsls	r4, r4, #12
 8002084:	431c      	orrs	r4, r3
 8002086:	0324      	lsls	r4, r4, #12
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__aeabi_ddiv+0x5cc>)
 800208a:	0b24      	lsrs	r4, r4, #12
 800208c:	e57e      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ea      	bcc.n	800206a <__aeabi_ddiv+0x592>
 8002094:	0035      	movs	r5, r6
 8002096:	e7c4      	b.n	8002022 <__aeabi_ddiv+0x54a>
 8002098:	0000043e 	.word	0x0000043e
 800209c:	0000041e 	.word	0x0000041e
 80020a0:	000003ff 	.word	0x000003ff
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__eqdf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	464f      	mov	r7, r9
 80020ac:	4646      	mov	r6, r8
 80020ae:	46d6      	mov	lr, sl
 80020b0:	4694      	mov	ip, r2
 80020b2:	4691      	mov	r9, r2
 80020b4:	031a      	lsls	r2, r3, #12
 80020b6:	0b12      	lsrs	r2, r2, #12
 80020b8:	4d18      	ldr	r5, [pc, #96]	; (800211c <__eqdf2+0x74>)
 80020ba:	b5c0      	push	{r6, r7, lr}
 80020bc:	004c      	lsls	r4, r1, #1
 80020be:	030f      	lsls	r7, r1, #12
 80020c0:	4692      	mov	sl, r2
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	0006      	movs	r6, r0
 80020c6:	4680      	mov	r8, r0
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	2001      	movs	r0, #1
 80020cc:	0d64      	lsrs	r4, r4, #21
 80020ce:	0fc9      	lsrs	r1, r1, #31
 80020d0:	0d52      	lsrs	r2, r2, #21
 80020d2:	0fdb      	lsrs	r3, r3, #31
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d00a      	beq.n	80020ee <__eqdf2+0x46>
 80020d8:	42aa      	cmp	r2, r5
 80020da:	d003      	beq.n	80020e4 <__eqdf2+0x3c>
 80020dc:	4294      	cmp	r4, r2
 80020de:	d101      	bne.n	80020e4 <__eqdf2+0x3c>
 80020e0:	4557      	cmp	r7, sl
 80020e2:	d00d      	beq.n	8002100 <__eqdf2+0x58>
 80020e4:	bce0      	pop	{r5, r6, r7}
 80020e6:	46ba      	mov	sl, r7
 80020e8:	46b1      	mov	r9, r6
 80020ea:	46a8      	mov	r8, r5
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	003d      	movs	r5, r7
 80020f0:	4335      	orrs	r5, r6
 80020f2:	d1f7      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f4:	42a2      	cmp	r2, r4
 80020f6:	d1f5      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f8:	4652      	mov	r2, sl
 80020fa:	4665      	mov	r5, ip
 80020fc:	432a      	orrs	r2, r5
 80020fe:	d1f1      	bne.n	80020e4 <__eqdf2+0x3c>
 8002100:	2001      	movs	r0, #1
 8002102:	45c8      	cmp	r8, r9
 8002104:	d1ee      	bne.n	80020e4 <__eqdf2+0x3c>
 8002106:	4299      	cmp	r1, r3
 8002108:	d006      	beq.n	8002118 <__eqdf2+0x70>
 800210a:	2c00      	cmp	r4, #0
 800210c:	d1ea      	bne.n	80020e4 <__eqdf2+0x3c>
 800210e:	433e      	orrs	r6, r7
 8002110:	0030      	movs	r0, r6
 8002112:	1e46      	subs	r6, r0, #1
 8002114:	41b0      	sbcs	r0, r6
 8002116:	e7e5      	b.n	80020e4 <__eqdf2+0x3c>
 8002118:	2000      	movs	r0, #0
 800211a:	e7e3      	b.n	80020e4 <__eqdf2+0x3c>
 800211c:	000007ff 	.word	0x000007ff

08002120 <__gedf2>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	464e      	mov	r6, r9
 8002124:	4645      	mov	r5, r8
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	0004      	movs	r4, r0
 800212c:	0018      	movs	r0, r3
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0016      	movs	r6, r2
 8002132:	031b      	lsls	r3, r3, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	4d32      	ldr	r5, [pc, #200]	; (8002200 <__gedf2+0xe0>)
 8002138:	030f      	lsls	r7, r1, #12
 800213a:	004a      	lsls	r2, r1, #1
 800213c:	4699      	mov	r9, r3
 800213e:	0043      	lsls	r3, r0, #1
 8002140:	46a4      	mov	ip, r4
 8002142:	46b0      	mov	r8, r6
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	0d5b      	lsrs	r3, r3, #21
 800214c:	0fc0      	lsrs	r0, r0, #31
 800214e:	42aa      	cmp	r2, r5
 8002150:	d029      	beq.n	80021a6 <__gedf2+0x86>
 8002152:	42ab      	cmp	r3, r5
 8002154:	d018      	beq.n	8002188 <__gedf2+0x68>
 8002156:	2a00      	cmp	r2, #0
 8002158:	d12a      	bne.n	80021b0 <__gedf2+0x90>
 800215a:	433c      	orrs	r4, r7
 800215c:	46a3      	mov	fp, r4
 800215e:	4265      	negs	r5, r4
 8002160:	4165      	adcs	r5, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <__gedf2+0x4c>
 8002166:	464c      	mov	r4, r9
 8002168:	4326      	orrs	r6, r4
 800216a:	d027      	beq.n	80021bc <__gedf2+0x9c>
 800216c:	2d00      	cmp	r5, #0
 800216e:	d115      	bne.n	800219c <__gedf2+0x7c>
 8002170:	4281      	cmp	r1, r0
 8002172:	d028      	beq.n	80021c6 <__gedf2+0xa6>
 8002174:	2002      	movs	r0, #2
 8002176:	3901      	subs	r1, #1
 8002178:	4008      	ands	r0, r1
 800217a:	3801      	subs	r0, #1
 800217c:	bcf0      	pop	{r4, r5, r6, r7}
 800217e:	46bb      	mov	fp, r7
 8002180:	46b2      	mov	sl, r6
 8002182:	46a9      	mov	r9, r5
 8002184:	46a0      	mov	r8, r4
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d12f      	bne.n	80021ee <__gedf2+0xce>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ee      	bne.n	8002170 <__gedf2+0x50>
 8002192:	433c      	orrs	r4, r7
 8002194:	4265      	negs	r5, r4
 8002196:	4165      	adcs	r5, r4
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e9      	beq.n	8002170 <__gedf2+0x50>
 800219c:	2800      	cmp	r0, #0
 800219e:	d1ed      	bne.n	800217c <__gedf2+0x5c>
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7ea      	b.n	800217c <__gedf2+0x5c>
 80021a6:	003d      	movs	r5, r7
 80021a8:	4325      	orrs	r5, r4
 80021aa:	d120      	bne.n	80021ee <__gedf2+0xce>
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d0eb      	beq.n	8002188 <__gedf2+0x68>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1dd      	bne.n	8002170 <__gedf2+0x50>
 80021b4:	464c      	mov	r4, r9
 80021b6:	4326      	orrs	r6, r4
 80021b8:	d1da      	bne.n	8002170 <__gedf2+0x50>
 80021ba:	e7db      	b.n	8002174 <__gedf2+0x54>
 80021bc:	465b      	mov	r3, fp
 80021be:	2000      	movs	r0, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0db      	beq.n	800217c <__gedf2+0x5c>
 80021c4:	e7d6      	b.n	8002174 <__gedf2+0x54>
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc0a      	bgt.n	80021e0 <__gedf2+0xc0>
 80021ca:	dbe7      	blt.n	800219c <__gedf2+0x7c>
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d8d1      	bhi.n	8002174 <__gedf2+0x54>
 80021d0:	d010      	beq.n	80021f4 <__gedf2+0xd4>
 80021d2:	2000      	movs	r0, #0
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d2d1      	bcs.n	800217c <__gedf2+0x5c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	d0e1      	beq.n	80021a0 <__gedf2+0x80>
 80021dc:	0008      	movs	r0, r1
 80021de:	e7cd      	b.n	800217c <__gedf2+0x5c>
 80021e0:	4243      	negs	r3, r0
 80021e2:	4158      	adcs	r0, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	4240      	negs	r0, r0
 80021e8:	4018      	ands	r0, r3
 80021ea:	3801      	subs	r0, #1
 80021ec:	e7c6      	b.n	800217c <__gedf2+0x5c>
 80021ee:	2002      	movs	r0, #2
 80021f0:	4240      	negs	r0, r0
 80021f2:	e7c3      	b.n	800217c <__gedf2+0x5c>
 80021f4:	45c4      	cmp	ip, r8
 80021f6:	d8bd      	bhi.n	8002174 <__gedf2+0x54>
 80021f8:	2000      	movs	r0, #0
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d2be      	bcs.n	800217c <__gedf2+0x5c>
 80021fe:	e7eb      	b.n	80021d8 <__gedf2+0xb8>
 8002200:	000007ff 	.word	0x000007ff

08002204 <__ledf2>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	464e      	mov	r6, r9
 8002208:	4645      	mov	r5, r8
 800220a:	4657      	mov	r7, sl
 800220c:	46de      	mov	lr, fp
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	b5e0      	push	{r5, r6, r7, lr}
 8002214:	0016      	movs	r6, r2
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	0b1b      	lsrs	r3, r3, #12
 800221a:	4d31      	ldr	r5, [pc, #196]	; (80022e0 <__ledf2+0xdc>)
 800221c:	030f      	lsls	r7, r1, #12
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	0043      	lsls	r3, r0, #1
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d011      	beq.n	800225a <__ledf2+0x56>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d014      	beq.n	8002264 <__ledf2+0x60>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d12f      	bne.n	800229e <__ledf2+0x9a>
 800223e:	433c      	orrs	r4, r7
 8002240:	46a3      	mov	fp, r4
 8002242:	4265      	negs	r5, r4
 8002244:	4165      	adcs	r5, r4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__ledf2+0x70>
 800224a:	464c      	mov	r4, r9
 800224c:	4326      	orrs	r6, r4
 800224e:	d111      	bne.n	8002274 <__ledf2+0x70>
 8002250:	465b      	mov	r3, fp
 8002252:	2000      	movs	r0, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <__ledf2+0x84>
 8002258:	e010      	b.n	800227c <__ledf2+0x78>
 800225a:	003d      	movs	r5, r7
 800225c:	4325      	orrs	r5, r4
 800225e:	d112      	bne.n	8002286 <__ledf2+0x82>
 8002260:	4293      	cmp	r3, r2
 8002262:	d11c      	bne.n	800229e <__ledf2+0x9a>
 8002264:	464d      	mov	r5, r9
 8002266:	432e      	orrs	r6, r5
 8002268:	d10d      	bne.n	8002286 <__ledf2+0x82>
 800226a:	2a00      	cmp	r2, #0
 800226c:	d104      	bne.n	8002278 <__ledf2+0x74>
 800226e:	433c      	orrs	r4, r7
 8002270:	4265      	negs	r5, r4
 8002272:	4165      	adcs	r5, r4
 8002274:	2d00      	cmp	r5, #0
 8002276:	d10d      	bne.n	8002294 <__ledf2+0x90>
 8002278:	4281      	cmp	r1, r0
 800227a:	d016      	beq.n	80022aa <__ledf2+0xa6>
 800227c:	2002      	movs	r0, #2
 800227e:	3901      	subs	r1, #1
 8002280:	4008      	ands	r0, r1
 8002282:	3801      	subs	r0, #1
 8002284:	e000      	b.n	8002288 <__ledf2+0x84>
 8002286:	2002      	movs	r0, #2
 8002288:	bcf0      	pop	{r4, r5, r6, r7}
 800228a:	46bb      	mov	fp, r7
 800228c:	46b2      	mov	sl, r6
 800228e:	46a9      	mov	r9, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f7      	bne.n	8002288 <__ledf2+0x84>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f4      	b.n	8002288 <__ledf2+0x84>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ea      	bne.n	8002278 <__ledf2+0x74>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e7      	bne.n	8002278 <__ledf2+0x74>
 80022a8:	e7e8      	b.n	800227c <__ledf2+0x78>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd06      	ble.n	80022bc <__ledf2+0xb8>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	2302      	movs	r3, #2
 80022b4:	4240      	negs	r0, r0
 80022b6:	4018      	ands	r0, r3
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7e5      	b.n	8002288 <__ledf2+0x84>
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbe9      	blt.n	8002294 <__ledf2+0x90>
 80022c0:	454f      	cmp	r7, r9
 80022c2:	d8db      	bhi.n	800227c <__ledf2+0x78>
 80022c4:	d006      	beq.n	80022d4 <__ledf2+0xd0>
 80022c6:	2000      	movs	r0, #0
 80022c8:	454f      	cmp	r7, r9
 80022ca:	d2dd      	bcs.n	8002288 <__ledf2+0x84>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d0e3      	beq.n	8002298 <__ledf2+0x94>
 80022d0:	0008      	movs	r0, r1
 80022d2:	e7d9      	b.n	8002288 <__ledf2+0x84>
 80022d4:	45c4      	cmp	ip, r8
 80022d6:	d8d1      	bhi.n	800227c <__ledf2+0x78>
 80022d8:	2000      	movs	r0, #0
 80022da:	45c4      	cmp	ip, r8
 80022dc:	d2d4      	bcs.n	8002288 <__ledf2+0x84>
 80022de:	e7f5      	b.n	80022cc <__ledf2+0xc8>
 80022e0:	000007ff 	.word	0x000007ff

080022e4 <__aeabi_dmul>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	464e      	mov	r6, r9
 80022ea:	4645      	mov	r5, r8
 80022ec:	46de      	mov	lr, fp
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	4698      	mov	r8, r3
 80022f2:	030c      	lsls	r4, r1, #12
 80022f4:	004b      	lsls	r3, r1, #1
 80022f6:	0006      	movs	r6, r0
 80022f8:	4692      	mov	sl, r2
 80022fa:	b087      	sub	sp, #28
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d5b      	lsrs	r3, r3, #21
 8002300:	0fcf      	lsrs	r7, r1, #31
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <__aeabi_dmul+0xfc>
 8002306:	4add      	ldr	r2, [pc, #884]	; (800267c <__aeabi_dmul+0x398>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x2a>
 800230c:	e086      	b.n	800241c <__aeabi_dmul+0x138>
 800230e:	0f42      	lsrs	r2, r0, #29
 8002310:	00e4      	lsls	r4, r4, #3
 8002312:	4314      	orrs	r4, r2
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0412      	lsls	r2, r2, #16
 8002318:	4314      	orrs	r4, r2
 800231a:	4ad9      	ldr	r2, [pc, #868]	; (8002680 <__aeabi_dmul+0x39c>)
 800231c:	00c5      	lsls	r5, r0, #3
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	4699      	mov	r9, r3
 8002328:	469b      	mov	fp, r3
 800232a:	4643      	mov	r3, r8
 800232c:	4642      	mov	r2, r8
 800232e:	031e      	lsls	r6, r3, #12
 8002330:	0fd2      	lsrs	r2, r2, #31
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4650      	mov	r0, sl
 8002336:	4690      	mov	r8, r2
 8002338:	0b36      	lsrs	r6, r6, #12
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x5c>
 800233e:	e078      	b.n	8002432 <__aeabi_dmul+0x14e>
 8002340:	4ace      	ldr	r2, [pc, #824]	; (800267c <__aeabi_dmul+0x398>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <__aeabi_dmul+0x9e>
 8002346:	49ce      	ldr	r1, [pc, #824]	; (8002680 <__aeabi_dmul+0x39c>)
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	468c      	mov	ip, r1
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	4463      	add	r3, ip
 8002350:	00f6      	lsls	r6, r6, #3
 8002352:	468c      	mov	ip, r1
 8002354:	4316      	orrs	r6, r2
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	449c      	add	ip, r3
 800235a:	0412      	lsls	r2, r2, #16
 800235c:	4663      	mov	r3, ip
 800235e:	4316      	orrs	r6, r2
 8002360:	00c2      	lsls	r2, r0, #3
 8002362:	2000      	movs	r0, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	9900      	ldr	r1, [sp, #0]
 8002368:	4643      	mov	r3, r8
 800236a:	3101      	adds	r1, #1
 800236c:	468c      	mov	ip, r1
 800236e:	4649      	mov	r1, r9
 8002370:	407b      	eors	r3, r7
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	290f      	cmp	r1, #15
 8002376:	d900      	bls.n	800237a <__aeabi_dmul+0x96>
 8002378:	e07e      	b.n	8002478 <__aeabi_dmul+0x194>
 800237a:	4bc2      	ldr	r3, [pc, #776]	; (8002684 <__aeabi_dmul+0x3a0>)
 800237c:	0089      	lsls	r1, r1, #2
 800237e:	5859      	ldr	r1, [r3, r1]
 8002380:	468f      	mov	pc, r1
 8002382:	4652      	mov	r2, sl
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4332      	orrs	r2, r6
 8002388:	d000      	beq.n	800238c <__aeabi_dmul+0xa8>
 800238a:	e156      	b.n	800263a <__aeabi_dmul+0x356>
 800238c:	49bb      	ldr	r1, [pc, #748]	; (800267c <__aeabi_dmul+0x398>)
 800238e:	2600      	movs	r6, #0
 8002390:	468c      	mov	ip, r1
 8002392:	4463      	add	r3, ip
 8002394:	4649      	mov	r1, r9
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	4319      	orrs	r1, r3
 800239c:	4689      	mov	r9, r1
 800239e:	2002      	movs	r0, #2
 80023a0:	e7e1      	b.n	8002366 <__aeabi_dmul+0x82>
 80023a2:	4643      	mov	r3, r8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	0034      	movs	r4, r6
 80023a8:	0015      	movs	r5, r2
 80023aa:	4683      	mov	fp, r0
 80023ac:	465b      	mov	r3, fp
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d05e      	beq.n	8002470 <__aeabi_dmul+0x18c>
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dmul+0xd4>
 80023b6:	e1f3      	b.n	80027a0 <__aeabi_dmul+0x4bc>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0xda>
 80023bc:	e118      	b.n	80025f0 <__aeabi_dmul+0x30c>
 80023be:	2200      	movs	r2, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2500      	movs	r5, #0
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	0512      	lsls	r2, r2, #20
 80023c8:	4322      	orrs	r2, r4
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0028      	movs	r0, r5
 80023d0:	0011      	movs	r1, r2
 80023d2:	b007      	add	sp, #28
 80023d4:	bcf0      	pop	{r4, r5, r6, r7}
 80023d6:	46bb      	mov	fp, r7
 80023d8:	46b2      	mov	sl, r6
 80023da:	46a9      	mov	r9, r5
 80023dc:	46a0      	mov	r8, r4
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e0:	0025      	movs	r5, r4
 80023e2:	4305      	orrs	r5, r0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x104>
 80023e6:	e141      	b.n	800266c <__aeabi_dmul+0x388>
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x10a>
 80023ec:	e1ad      	b.n	800274a <__aeabi_dmul+0x466>
 80023ee:	0020      	movs	r0, r4
 80023f0:	f000 fef0 	bl	80031d4 <__clzsi2>
 80023f4:	0001      	movs	r1, r0
 80023f6:	0002      	movs	r2, r0
 80023f8:	390b      	subs	r1, #11
 80023fa:	231d      	movs	r3, #29
 80023fc:	0010      	movs	r0, r2
 80023fe:	1a5b      	subs	r3, r3, r1
 8002400:	0031      	movs	r1, r6
 8002402:	0035      	movs	r5, r6
 8002404:	3808      	subs	r0, #8
 8002406:	4084      	lsls	r4, r0
 8002408:	40d9      	lsrs	r1, r3
 800240a:	4085      	lsls	r5, r0
 800240c:	430c      	orrs	r4, r1
 800240e:	489e      	ldr	r0, [pc, #632]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002410:	1a83      	subs	r3, r0, r2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	4699      	mov	r9, r3
 8002418:	469b      	mov	fp, r3
 800241a:	e786      	b.n	800232a <__aeabi_dmul+0x46>
 800241c:	0005      	movs	r5, r0
 800241e:	4325      	orrs	r5, r4
 8002420:	d000      	beq.n	8002424 <__aeabi_dmul+0x140>
 8002422:	e11c      	b.n	800265e <__aeabi_dmul+0x37a>
 8002424:	2208      	movs	r2, #8
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	2400      	movs	r4, #0
 800242c:	4691      	mov	r9, r2
 800242e:	469b      	mov	fp, r3
 8002430:	e77b      	b.n	800232a <__aeabi_dmul+0x46>
 8002432:	4652      	mov	r2, sl
 8002434:	4332      	orrs	r2, r6
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x156>
 8002438:	e10a      	b.n	8002650 <__aeabi_dmul+0x36c>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dmul+0x15c>
 800243e:	e176      	b.n	800272e <__aeabi_dmul+0x44a>
 8002440:	0030      	movs	r0, r6
 8002442:	f000 fec7 	bl	80031d4 <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	3a0b      	subs	r2, #11
 800244a:	231d      	movs	r3, #29
 800244c:	0001      	movs	r1, r0
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	4652      	mov	r2, sl
 8002452:	3908      	subs	r1, #8
 8002454:	40da      	lsrs	r2, r3
 8002456:	408e      	lsls	r6, r1
 8002458:	4316      	orrs	r6, r2
 800245a:	4652      	mov	r2, sl
 800245c:	408a      	lsls	r2, r1
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	4989      	ldr	r1, [pc, #548]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002462:	1a18      	subs	r0, r3, r0
 8002464:	0003      	movs	r3, r0
 8002466:	468c      	mov	ip, r1
 8002468:	4463      	add	r3, ip
 800246a:	2000      	movs	r0, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	e77a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002470:	2400      	movs	r4, #0
 8002472:	2500      	movs	r5, #0
 8002474:	4a81      	ldr	r2, [pc, #516]	; (800267c <__aeabi_dmul+0x398>)
 8002476:	e7a5      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002478:	0c2f      	lsrs	r7, r5, #16
 800247a:	042d      	lsls	r5, r5, #16
 800247c:	0c2d      	lsrs	r5, r5, #16
 800247e:	002b      	movs	r3, r5
 8002480:	0c11      	lsrs	r1, r2, #16
 8002482:	0412      	lsls	r2, r2, #16
 8002484:	0c12      	lsrs	r2, r2, #16
 8002486:	4353      	muls	r3, r2
 8002488:	4698      	mov	r8, r3
 800248a:	0013      	movs	r3, r2
 800248c:	0028      	movs	r0, r5
 800248e:	437b      	muls	r3, r7
 8002490:	4699      	mov	r9, r3
 8002492:	4348      	muls	r0, r1
 8002494:	4448      	add	r0, r9
 8002496:	4683      	mov	fp, r0
 8002498:	4640      	mov	r0, r8
 800249a:	000b      	movs	r3, r1
 800249c:	0c00      	lsrs	r0, r0, #16
 800249e:	4682      	mov	sl, r0
 80024a0:	4658      	mov	r0, fp
 80024a2:	437b      	muls	r3, r7
 80024a4:	4450      	add	r0, sl
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	4581      	cmp	r9, r0
 80024aa:	d906      	bls.n	80024ba <__aeabi_dmul+0x1d6>
 80024ac:	469a      	mov	sl, r3
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4699      	mov	r9, r3
 80024b4:	44ca      	add	sl, r9
 80024b6:	4653      	mov	r3, sl
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	0c03      	lsrs	r3, r0, #16
 80024bc:	469b      	mov	fp, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0400      	lsls	r0, r0, #16
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	4698      	mov	r8, r3
 80024c8:	0003      	movs	r3, r0
 80024ca:	4443      	add	r3, r8
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	0c33      	lsrs	r3, r6, #16
 80024d0:	4699      	mov	r9, r3
 80024d2:	002b      	movs	r3, r5
 80024d4:	0436      	lsls	r6, r6, #16
 80024d6:	0c36      	lsrs	r6, r6, #16
 80024d8:	4373      	muls	r3, r6
 80024da:	4698      	mov	r8, r3
 80024dc:	0033      	movs	r3, r6
 80024de:	437b      	muls	r3, r7
 80024e0:	469a      	mov	sl, r3
 80024e2:	464b      	mov	r3, r9
 80024e4:	435d      	muls	r5, r3
 80024e6:	435f      	muls	r7, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	4455      	add	r5, sl
 80024ec:	0c18      	lsrs	r0, r3, #16
 80024ee:	1940      	adds	r0, r0, r5
 80024f0:	4582      	cmp	sl, r0
 80024f2:	d903      	bls.n	80024fc <__aeabi_dmul+0x218>
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	469a      	mov	sl, r3
 80024fa:	4457      	add	r7, sl
 80024fc:	0c05      	lsrs	r5, r0, #16
 80024fe:	19eb      	adds	r3, r5, r7
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	4643      	mov	r3, r8
 8002504:	041d      	lsls	r5, r3, #16
 8002506:	0c2d      	lsrs	r5, r5, #16
 8002508:	0400      	lsls	r0, r0, #16
 800250a:	1940      	adds	r0, r0, r5
 800250c:	0c25      	lsrs	r5, r4, #16
 800250e:	0424      	lsls	r4, r4, #16
 8002510:	0c24      	lsrs	r4, r4, #16
 8002512:	0027      	movs	r7, r4
 8002514:	4357      	muls	r7, r2
 8002516:	436a      	muls	r2, r5
 8002518:	4690      	mov	r8, r2
 800251a:	002a      	movs	r2, r5
 800251c:	0c3b      	lsrs	r3, r7, #16
 800251e:	469a      	mov	sl, r3
 8002520:	434a      	muls	r2, r1
 8002522:	4361      	muls	r1, r4
 8002524:	4441      	add	r1, r8
 8002526:	4451      	add	r1, sl
 8002528:	4483      	add	fp, r0
 800252a:	4588      	cmp	r8, r1
 800252c:	d903      	bls.n	8002536 <__aeabi_dmul+0x252>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	4698      	mov	r8, r3
 8002534:	4442      	add	r2, r8
 8002536:	043f      	lsls	r7, r7, #16
 8002538:	0c0b      	lsrs	r3, r1, #16
 800253a:	0c3f      	lsrs	r7, r7, #16
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	19c9      	adds	r1, r1, r7
 8002540:	0027      	movs	r7, r4
 8002542:	4698      	mov	r8, r3
 8002544:	464b      	mov	r3, r9
 8002546:	4377      	muls	r7, r6
 8002548:	435c      	muls	r4, r3
 800254a:	436e      	muls	r6, r5
 800254c:	435d      	muls	r5, r3
 800254e:	0c3b      	lsrs	r3, r7, #16
 8002550:	4699      	mov	r9, r3
 8002552:	19a4      	adds	r4, r4, r6
 8002554:	444c      	add	r4, r9
 8002556:	4442      	add	r2, r8
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	42a6      	cmp	r6, r4
 800255c:	d904      	bls.n	8002568 <__aeabi_dmul+0x284>
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4698      	mov	r8, r3
 8002564:	4445      	add	r5, r8
 8002566:	9503      	str	r5, [sp, #12]
 8002568:	9b02      	ldr	r3, [sp, #8]
 800256a:	043f      	lsls	r7, r7, #16
 800256c:	445b      	add	r3, fp
 800256e:	001e      	movs	r6, r3
 8002570:	4283      	cmp	r3, r0
 8002572:	4180      	sbcs	r0, r0
 8002574:	0423      	lsls	r3, r4, #16
 8002576:	4698      	mov	r8, r3
 8002578:	9b05      	ldr	r3, [sp, #20]
 800257a:	0c3f      	lsrs	r7, r7, #16
 800257c:	4447      	add	r7, r8
 800257e:	4698      	mov	r8, r3
 8002580:	1876      	adds	r6, r6, r1
 8002582:	428e      	cmp	r6, r1
 8002584:	4189      	sbcs	r1, r1
 8002586:	4447      	add	r7, r8
 8002588:	4240      	negs	r0, r0
 800258a:	183d      	adds	r5, r7, r0
 800258c:	46a8      	mov	r8, r5
 800258e:	4693      	mov	fp, r2
 8002590:	4249      	negs	r1, r1
 8002592:	468a      	mov	sl, r1
 8002594:	44c3      	add	fp, r8
 8002596:	429f      	cmp	r7, r3
 8002598:	41bf      	sbcs	r7, r7
 800259a:	4580      	cmp	r8, r0
 800259c:	4180      	sbcs	r0, r0
 800259e:	9b03      	ldr	r3, [sp, #12]
 80025a0:	44da      	add	sl, fp
 80025a2:	4698      	mov	r8, r3
 80025a4:	4653      	mov	r3, sl
 80025a6:	4240      	negs	r0, r0
 80025a8:	427f      	negs	r7, r7
 80025aa:	4307      	orrs	r7, r0
 80025ac:	0c24      	lsrs	r4, r4, #16
 80025ae:	4593      	cmp	fp, r2
 80025b0:	4192      	sbcs	r2, r2
 80025b2:	458a      	cmp	sl, r1
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	193f      	adds	r7, r7, r4
 80025b8:	0ddc      	lsrs	r4, r3, #23
 80025ba:	9b04      	ldr	r3, [sp, #16]
 80025bc:	0275      	lsls	r5, r6, #9
 80025be:	431d      	orrs	r5, r3
 80025c0:	1e68      	subs	r0, r5, #1
 80025c2:	4185      	sbcs	r5, r0
 80025c4:	4653      	mov	r3, sl
 80025c6:	4252      	negs	r2, r2
 80025c8:	4249      	negs	r1, r1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	18bf      	adds	r7, r7, r2
 80025ce:	4447      	add	r7, r8
 80025d0:	0df6      	lsrs	r6, r6, #23
 80025d2:	027f      	lsls	r7, r7, #9
 80025d4:	4335      	orrs	r5, r6
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	433c      	orrs	r4, r7
 80025da:	4315      	orrs	r5, r2
 80025dc:	01fb      	lsls	r3, r7, #7
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dmul+0x2fe>
 80025e0:	e0c1      	b.n	8002766 <__aeabi_dmul+0x482>
 80025e2:	2101      	movs	r1, #1
 80025e4:	086a      	lsrs	r2, r5, #1
 80025e6:	400d      	ands	r5, r1
 80025e8:	4315      	orrs	r5, r2
 80025ea:	07e2      	lsls	r2, r4, #31
 80025ec:	4315      	orrs	r5, r2
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	4926      	ldr	r1, [pc, #152]	; (800268c <__aeabi_dmul+0x3a8>)
 80025f2:	4461      	add	r1, ip
 80025f4:	2900      	cmp	r1, #0
 80025f6:	dd56      	ble.n	80026a6 <__aeabi_dmul+0x3c2>
 80025f8:	076b      	lsls	r3, r5, #29
 80025fa:	d009      	beq.n	8002610 <__aeabi_dmul+0x32c>
 80025fc:	220f      	movs	r2, #15
 80025fe:	402a      	ands	r2, r5
 8002600:	2a04      	cmp	r2, #4
 8002602:	d005      	beq.n	8002610 <__aeabi_dmul+0x32c>
 8002604:	1d2a      	adds	r2, r5, #4
 8002606:	42aa      	cmp	r2, r5
 8002608:	41ad      	sbcs	r5, r5
 800260a:	426d      	negs	r5, r5
 800260c:	1964      	adds	r4, r4, r5
 800260e:	0015      	movs	r5, r2
 8002610:	01e3      	lsls	r3, r4, #7
 8002612:	d504      	bpl.n	800261e <__aeabi_dmul+0x33a>
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <__aeabi_dmul+0x3ac>)
 8002618:	00c9      	lsls	r1, r1, #3
 800261a:	4014      	ands	r4, r2
 800261c:	4461      	add	r1, ip
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <__aeabi_dmul+0x3b0>)
 8002620:	4291      	cmp	r1, r2
 8002622:	dd00      	ble.n	8002626 <__aeabi_dmul+0x342>
 8002624:	e724      	b.n	8002470 <__aeabi_dmul+0x18c>
 8002626:	0762      	lsls	r2, r4, #29
 8002628:	08ed      	lsrs	r5, r5, #3
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	0549      	lsls	r1, r1, #21
 800262e:	4315      	orrs	r5, r2
 8002630:	0b24      	lsrs	r4, r4, #12
 8002632:	0d4a      	lsrs	r2, r1, #21
 8002634:	e6c6      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002636:	9701      	str	r7, [sp, #4]
 8002638:	e6b8      	b.n	80023ac <__aeabi_dmul+0xc8>
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <__aeabi_dmul+0x398>)
 800263c:	2003      	movs	r0, #3
 800263e:	4694      	mov	ip, r2
 8002640:	4463      	add	r3, ip
 8002642:	464a      	mov	r2, r9
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2303      	movs	r3, #3
 8002648:	431a      	orrs	r2, r3
 800264a:	4691      	mov	r9, r2
 800264c:	4652      	mov	r2, sl
 800264e:	e68a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002650:	4649      	mov	r1, r9
 8002652:	2301      	movs	r3, #1
 8002654:	4319      	orrs	r1, r3
 8002656:	4689      	mov	r9, r1
 8002658:	2600      	movs	r6, #0
 800265a:	2001      	movs	r0, #1
 800265c:	e683      	b.n	8002366 <__aeabi_dmul+0x82>
 800265e:	220c      	movs	r2, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2303      	movs	r3, #3
 8002664:	0005      	movs	r5, r0
 8002666:	4691      	mov	r9, r2
 8002668:	469b      	mov	fp, r3
 800266a:	e65e      	b.n	800232a <__aeabi_dmul+0x46>
 800266c:	2304      	movs	r3, #4
 800266e:	4699      	mov	r9, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	2400      	movs	r4, #0
 8002678:	469b      	mov	fp, r3
 800267a:	e656      	b.n	800232a <__aeabi_dmul+0x46>
 800267c:	000007ff 	.word	0x000007ff
 8002680:	fffffc01 	.word	0xfffffc01
 8002684:	08013f14 	.word	0x08013f14
 8002688:	fffffc0d 	.word	0xfffffc0d
 800268c:	000003ff 	.word	0x000003ff
 8002690:	feffffff 	.word	0xfeffffff
 8002694:	000007fe 	.word	0x000007fe
 8002698:	2300      	movs	r3, #0
 800269a:	2480      	movs	r4, #128	; 0x80
 800269c:	2500      	movs	r5, #0
 800269e:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	0324      	lsls	r4, r4, #12
 80026a4:	e68e      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80026a6:	2001      	movs	r0, #1
 80026a8:	1a40      	subs	r0, r0, r1
 80026aa:	2838      	cmp	r0, #56	; 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x3cc>
 80026ae:	e686      	b.n	80023be <__aeabi_dmul+0xda>
 80026b0:	281f      	cmp	r0, #31
 80026b2:	dd5b      	ble.n	800276c <__aeabi_dmul+0x488>
 80026b4:	221f      	movs	r2, #31
 80026b6:	0023      	movs	r3, r4
 80026b8:	4252      	negs	r2, r2
 80026ba:	1a51      	subs	r1, r2, r1
 80026bc:	40cb      	lsrs	r3, r1
 80026be:	0019      	movs	r1, r3
 80026c0:	2820      	cmp	r0, #32
 80026c2:	d003      	beq.n	80026cc <__aeabi_dmul+0x3e8>
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <__aeabi_dmul+0x4d0>)
 80026c6:	4462      	add	r2, ip
 80026c8:	4094      	lsls	r4, r2
 80026ca:	4325      	orrs	r5, r4
 80026cc:	1e6a      	subs	r2, r5, #1
 80026ce:	4195      	sbcs	r5, r2
 80026d0:	002a      	movs	r2, r5
 80026d2:	430a      	orrs	r2, r1
 80026d4:	2107      	movs	r1, #7
 80026d6:	000d      	movs	r5, r1
 80026d8:	2400      	movs	r4, #0
 80026da:	4015      	ands	r5, r2
 80026dc:	4211      	tst	r1, r2
 80026de:	d05b      	beq.n	8002798 <__aeabi_dmul+0x4b4>
 80026e0:	210f      	movs	r1, #15
 80026e2:	2400      	movs	r4, #0
 80026e4:	4011      	ands	r1, r2
 80026e6:	2904      	cmp	r1, #4
 80026e8:	d053      	beq.n	8002792 <__aeabi_dmul+0x4ae>
 80026ea:	1d11      	adds	r1, r2, #4
 80026ec:	4291      	cmp	r1, r2
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	4252      	negs	r2, r2
 80026f2:	18a4      	adds	r4, r4, r2
 80026f4:	000a      	movs	r2, r1
 80026f6:	0223      	lsls	r3, r4, #8
 80026f8:	d54b      	bpl.n	8002792 <__aeabi_dmul+0x4ae>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2400      	movs	r4, #0
 80026fe:	2500      	movs	r5, #0
 8002700:	e660      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	421c      	tst	r4, r3
 8002708:	d009      	beq.n	800271e <__aeabi_dmul+0x43a>
 800270a:	421e      	tst	r6, r3
 800270c:	d107      	bne.n	800271e <__aeabi_dmul+0x43a>
 800270e:	4333      	orrs	r3, r6
 8002710:	031c      	lsls	r4, r3, #12
 8002712:	4643      	mov	r3, r8
 8002714:	0015      	movs	r5, r2
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <__aeabi_dmul+0x4cc>)
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	e652      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	4314      	orrs	r4, r2
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <__aeabi_dmul+0x4cc>)
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	9701      	str	r7, [sp, #4]
 800272c:	e64a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800272e:	f000 fd51 	bl	80031d4 <__clzsi2>
 8002732:	0003      	movs	r3, r0
 8002734:	001a      	movs	r2, r3
 8002736:	3215      	adds	r2, #21
 8002738:	3020      	adds	r0, #32
 800273a:	2a1c      	cmp	r2, #28
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dmul+0x45c>
 800273e:	e684      	b.n	800244a <__aeabi_dmul+0x166>
 8002740:	4656      	mov	r6, sl
 8002742:	3b08      	subs	r3, #8
 8002744:	2200      	movs	r2, #0
 8002746:	409e      	lsls	r6, r3
 8002748:	e689      	b.n	800245e <__aeabi_dmul+0x17a>
 800274a:	f000 fd43 	bl	80031d4 <__clzsi2>
 800274e:	0001      	movs	r1, r0
 8002750:	0002      	movs	r2, r0
 8002752:	3115      	adds	r1, #21
 8002754:	3220      	adds	r2, #32
 8002756:	291c      	cmp	r1, #28
 8002758:	dc00      	bgt.n	800275c <__aeabi_dmul+0x478>
 800275a:	e64e      	b.n	80023fa <__aeabi_dmul+0x116>
 800275c:	0034      	movs	r4, r6
 800275e:	3808      	subs	r0, #8
 8002760:	2500      	movs	r5, #0
 8002762:	4084      	lsls	r4, r0
 8002764:	e653      	b.n	800240e <__aeabi_dmul+0x12a>
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	469c      	mov	ip, r3
 800276a:	e741      	b.n	80025f0 <__aeabi_dmul+0x30c>
 800276c:	4912      	ldr	r1, [pc, #72]	; (80027b8 <__aeabi_dmul+0x4d4>)
 800276e:	0022      	movs	r2, r4
 8002770:	4461      	add	r1, ip
 8002772:	002e      	movs	r6, r5
 8002774:	408d      	lsls	r5, r1
 8002776:	408a      	lsls	r2, r1
 8002778:	40c6      	lsrs	r6, r0
 800277a:	1e69      	subs	r1, r5, #1
 800277c:	418d      	sbcs	r5, r1
 800277e:	4332      	orrs	r2, r6
 8002780:	432a      	orrs	r2, r5
 8002782:	40c4      	lsrs	r4, r0
 8002784:	0753      	lsls	r3, r2, #29
 8002786:	d0b6      	beq.n	80026f6 <__aeabi_dmul+0x412>
 8002788:	210f      	movs	r1, #15
 800278a:	4011      	ands	r1, r2
 800278c:	2904      	cmp	r1, #4
 800278e:	d1ac      	bne.n	80026ea <__aeabi_dmul+0x406>
 8002790:	e7b1      	b.n	80026f6 <__aeabi_dmul+0x412>
 8002792:	0765      	lsls	r5, r4, #29
 8002794:	0264      	lsls	r4, r4, #9
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	4315      	orrs	r5, r2
 800279c:	2200      	movs	r2, #0
 800279e:	e611      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	4314      	orrs	r4, r2
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4a01      	ldr	r2, [pc, #4]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e60a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007ff 	.word	0x000007ff
 80027b4:	0000043e 	.word	0x0000043e
 80027b8:	0000041e 	.word	0x0000041e

080027bc <__aeabi_dsub>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4657      	mov	r7, sl
 80027c0:	464e      	mov	r6, r9
 80027c2:	4645      	mov	r5, r8
 80027c4:	46de      	mov	lr, fp
 80027c6:	0004      	movs	r4, r0
 80027c8:	b5e0      	push	{r5, r6, r7, lr}
 80027ca:	001f      	movs	r7, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	030b      	lsls	r3, r1, #12
 80027d0:	0f62      	lsrs	r2, r4, #29
 80027d2:	004e      	lsls	r6, r1, #1
 80027d4:	0fcd      	lsrs	r5, r1, #31
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	0339      	lsls	r1, r7, #12
 80027da:	4313      	orrs	r3, r2
 80027dc:	0a49      	lsrs	r1, r1, #9
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	0f44      	lsrs	r4, r0, #29
 80027e2:	4321      	orrs	r1, r4
 80027e4:	4cc2      	ldr	r4, [pc, #776]	; (8002af0 <__aeabi_dsub+0x334>)
 80027e6:	4691      	mov	r9, r2
 80027e8:	4692      	mov	sl, r2
 80027ea:	00c0      	lsls	r0, r0, #3
 80027ec:	007a      	lsls	r2, r7, #1
 80027ee:	4680      	mov	r8, r0
 80027f0:	0d76      	lsrs	r6, r6, #21
 80027f2:	0d52      	lsrs	r2, r2, #21
 80027f4:	0fff      	lsrs	r7, r7, #31
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x40>
 80027fa:	e0b4      	b.n	8002966 <__aeabi_dsub+0x1aa>
 80027fc:	2401      	movs	r4, #1
 80027fe:	4067      	eors	r7, r4
 8002800:	46bb      	mov	fp, r7
 8002802:	42bd      	cmp	r5, r7
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x4c>
 8002806:	e088      	b.n	800291a <__aeabi_dsub+0x15e>
 8002808:	1ab4      	subs	r4, r6, r2
 800280a:	46a4      	mov	ip, r4
 800280c:	2c00      	cmp	r4, #0
 800280e:	dc00      	bgt.n	8002812 <__aeabi_dsub+0x56>
 8002810:	e0b2      	b.n	8002978 <__aeabi_dsub+0x1bc>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x5c>
 8002816:	e0c5      	b.n	80029a4 <__aeabi_dsub+0x1e8>
 8002818:	4ab5      	ldr	r2, [pc, #724]	; (8002af0 <__aeabi_dsub+0x334>)
 800281a:	4296      	cmp	r6, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x64>
 800281e:	e28b      	b.n	8002d38 <__aeabi_dsub+0x57c>
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	4311      	orrs	r1, r2
 8002826:	4662      	mov	r2, ip
 8002828:	2a38      	cmp	r2, #56	; 0x38
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0x72>
 800282c:	e1a1      	b.n	8002b72 <__aeabi_dsub+0x3b6>
 800282e:	2a1f      	cmp	r2, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x78>
 8002832:	e216      	b.n	8002c62 <__aeabi_dsub+0x4a6>
 8002834:	2720      	movs	r7, #32
 8002836:	000c      	movs	r4, r1
 8002838:	1abf      	subs	r7, r7, r2
 800283a:	40bc      	lsls	r4, r7
 800283c:	0002      	movs	r2, r0
 800283e:	46a0      	mov	r8, r4
 8002840:	4664      	mov	r4, ip
 8002842:	40b8      	lsls	r0, r7
 8002844:	40e2      	lsrs	r2, r4
 8002846:	4644      	mov	r4, r8
 8002848:	4314      	orrs	r4, r2
 800284a:	0002      	movs	r2, r0
 800284c:	1e50      	subs	r0, r2, #1
 800284e:	4182      	sbcs	r2, r0
 8002850:	4660      	mov	r0, ip
 8002852:	40c1      	lsrs	r1, r0
 8002854:	4322      	orrs	r2, r4
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	4649      	mov	r1, r9
 800285a:	1a8c      	subs	r4, r1, r2
 800285c:	45a1      	cmp	r9, r4
 800285e:	4192      	sbcs	r2, r2
 8002860:	4252      	negs	r2, r2
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	4698      	mov	r8, r3
 8002866:	4643      	mov	r3, r8
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	d400      	bmi.n	800286e <__aeabi_dsub+0xb2>
 800286c:	e117      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 800286e:	4643      	mov	r3, r8
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	4698      	mov	r8, r3
 8002876:	4643      	mov	r3, r8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0xc2>
 800287c:	e16c      	b.n	8002b58 <__aeabi_dsub+0x39c>
 800287e:	4640      	mov	r0, r8
 8002880:	f000 fca8 	bl	80031d4 <__clzsi2>
 8002884:	0002      	movs	r2, r0
 8002886:	3a08      	subs	r2, #8
 8002888:	2120      	movs	r1, #32
 800288a:	0020      	movs	r0, r4
 800288c:	4643      	mov	r3, r8
 800288e:	1a89      	subs	r1, r1, r2
 8002890:	4093      	lsls	r3, r2
 8002892:	40c8      	lsrs	r0, r1
 8002894:	4094      	lsls	r4, r2
 8002896:	4303      	orrs	r3, r0
 8002898:	4296      	cmp	r6, r2
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0xe2>
 800289c:	e157      	b.n	8002b4e <__aeabi_dsub+0x392>
 800289e:	1b96      	subs	r6, r2, r6
 80028a0:	1c71      	adds	r1, r6, #1
 80028a2:	291f      	cmp	r1, #31
 80028a4:	dd00      	ble.n	80028a8 <__aeabi_dsub+0xec>
 80028a6:	e1cb      	b.n	8002c40 <__aeabi_dsub+0x484>
 80028a8:	2220      	movs	r2, #32
 80028aa:	0018      	movs	r0, r3
 80028ac:	0026      	movs	r6, r4
 80028ae:	1a52      	subs	r2, r2, r1
 80028b0:	4094      	lsls	r4, r2
 80028b2:	4090      	lsls	r0, r2
 80028b4:	40ce      	lsrs	r6, r1
 80028b6:	40cb      	lsrs	r3, r1
 80028b8:	1e62      	subs	r2, r4, #1
 80028ba:	4194      	sbcs	r4, r2
 80028bc:	4330      	orrs	r0, r6
 80028be:	4698      	mov	r8, r3
 80028c0:	2600      	movs	r6, #0
 80028c2:	4304      	orrs	r4, r0
 80028c4:	0763      	lsls	r3, r4, #29
 80028c6:	d009      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028c8:	230f      	movs	r3, #15
 80028ca:	4023      	ands	r3, r4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028d0:	1d23      	adds	r3, r4, #4
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	41a4      	sbcs	r4, r4
 80028d6:	4264      	negs	r4, r4
 80028d8:	44a0      	add	r8, r4
 80028da:	001c      	movs	r4, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	d400      	bmi.n	80028e4 <__aeabi_dsub+0x128>
 80028e2:	e0df      	b.n	8002aa4 <__aeabi_dsub+0x2e8>
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <__aeabi_dsub+0x334>)
 80028e6:	3601      	adds	r6, #1
 80028e8:	429e      	cmp	r6, r3
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x132>
 80028ec:	e0fb      	b.n	8002ae6 <__aeabi_dsub+0x32a>
 80028ee:	4642      	mov	r2, r8
 80028f0:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <__aeabi_dsub+0x338>)
 80028f2:	08e4      	lsrs	r4, r4, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	0571      	lsls	r1, r6, #21
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4322      	orrs	r2, r4
 8002900:	0b1b      	lsrs	r3, r3, #12
 8002902:	0d49      	lsrs	r1, r1, #21
 8002904:	0509      	lsls	r1, r1, #20
 8002906:	07ed      	lsls	r5, r5, #31
 8002908:	4319      	orrs	r1, r3
 800290a:	4329      	orrs	r1, r5
 800290c:	0010      	movs	r0, r2
 800290e:	bcf0      	pop	{r4, r5, r6, r7}
 8002910:	46bb      	mov	fp, r7
 8002912:	46b2      	mov	sl, r6
 8002914:	46a9      	mov	r9, r5
 8002916:	46a0      	mov	r8, r4
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	1ab4      	subs	r4, r6, r2
 800291c:	46a4      	mov	ip, r4
 800291e:	2c00      	cmp	r4, #0
 8002920:	dd58      	ble.n	80029d4 <__aeabi_dsub+0x218>
 8002922:	2a00      	cmp	r2, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x16c>
 8002926:	e09e      	b.n	8002a66 <__aeabi_dsub+0x2aa>
 8002928:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <__aeabi_dsub+0x334>)
 800292a:	4296      	cmp	r6, r2
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x174>
 800292e:	e13b      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	4311      	orrs	r1, r2
 8002936:	4662      	mov	r2, ip
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x182>
 800293c:	e0c1      	b.n	8002ac2 <__aeabi_dsub+0x306>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dc00      	bgt.n	8002944 <__aeabi_dsub+0x188>
 8002942:	e1bb      	b.n	8002cbc <__aeabi_dsub+0x500>
 8002944:	000c      	movs	r4, r1
 8002946:	3a20      	subs	r2, #32
 8002948:	40d4      	lsrs	r4, r2
 800294a:	0022      	movs	r2, r4
 800294c:	4664      	mov	r4, ip
 800294e:	2c20      	cmp	r4, #32
 8002950:	d004      	beq.n	800295c <__aeabi_dsub+0x1a0>
 8002952:	2740      	movs	r7, #64	; 0x40
 8002954:	1b3f      	subs	r7, r7, r4
 8002956:	40b9      	lsls	r1, r7
 8002958:	4308      	orrs	r0, r1
 800295a:	4680      	mov	r8, r0
 800295c:	4644      	mov	r4, r8
 800295e:	1e61      	subs	r1, r4, #1
 8002960:	418c      	sbcs	r4, r1
 8002962:	4314      	orrs	r4, r2
 8002964:	e0b1      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002966:	000c      	movs	r4, r1
 8002968:	4304      	orrs	r4, r0
 800296a:	d02a      	beq.n	80029c2 <__aeabi_dsub+0x206>
 800296c:	46bb      	mov	fp, r7
 800296e:	42bd      	cmp	r5, r7
 8002970:	d02d      	beq.n	80029ce <__aeabi_dsub+0x212>
 8002972:	4c61      	ldr	r4, [pc, #388]	; (8002af8 <__aeabi_dsub+0x33c>)
 8002974:	46a4      	mov	ip, r4
 8002976:	44b4      	add	ip, r6
 8002978:	4664      	mov	r4, ip
 800297a:	2c00      	cmp	r4, #0
 800297c:	d05c      	beq.n	8002a38 <__aeabi_dsub+0x27c>
 800297e:	1b94      	subs	r4, r2, r6
 8002980:	46a4      	mov	ip, r4
 8002982:	2e00      	cmp	r6, #0
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x1cc>
 8002986:	e115      	b.n	8002bb4 <__aeabi_dsub+0x3f8>
 8002988:	464d      	mov	r5, r9
 800298a:	431d      	orrs	r5, r3
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x1d4>
 800298e:	e1c3      	b.n	8002d18 <__aeabi_dsub+0x55c>
 8002990:	1e65      	subs	r5, r4, #1
 8002992:	2c01      	cmp	r4, #1
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1dc>
 8002996:	e20c      	b.n	8002db2 <__aeabi_dsub+0x5f6>
 8002998:	4e55      	ldr	r6, [pc, #340]	; (8002af0 <__aeabi_dsub+0x334>)
 800299a:	42b4      	cmp	r4, r6
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1e4>
 800299e:	e1f8      	b.n	8002d92 <__aeabi_dsub+0x5d6>
 80029a0:	46ac      	mov	ip, r5
 80029a2:	e10e      	b.n	8002bc2 <__aeabi_dsub+0x406>
 80029a4:	000a      	movs	r2, r1
 80029a6:	4302      	orrs	r2, r0
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x1f0>
 80029aa:	e136      	b.n	8002c1a <__aeabi_dsub+0x45e>
 80029ac:	0022      	movs	r2, r4
 80029ae:	3a01      	subs	r2, #1
 80029b0:	2c01      	cmp	r4, #1
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x1fa>
 80029b4:	e1c6      	b.n	8002d44 <__aeabi_dsub+0x588>
 80029b6:	4c4e      	ldr	r4, [pc, #312]	; (8002af0 <__aeabi_dsub+0x334>)
 80029b8:	45a4      	cmp	ip, r4
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x202>
 80029bc:	e0f4      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 80029be:	4694      	mov	ip, r2
 80029c0:	e731      	b.n	8002826 <__aeabi_dsub+0x6a>
 80029c2:	2401      	movs	r4, #1
 80029c4:	4067      	eors	r7, r4
 80029c6:	46bb      	mov	fp, r7
 80029c8:	42bd      	cmp	r5, r7
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x212>
 80029cc:	e71c      	b.n	8002808 <__aeabi_dsub+0x4c>
 80029ce:	4c4a      	ldr	r4, [pc, #296]	; (8002af8 <__aeabi_dsub+0x33c>)
 80029d0:	46a4      	mov	ip, r4
 80029d2:	44b4      	add	ip, r6
 80029d4:	4664      	mov	r4, ip
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x220>
 80029da:	e0cf      	b.n	8002b7c <__aeabi_dsub+0x3c0>
 80029dc:	1b94      	subs	r4, r2, r6
 80029de:	46a4      	mov	ip, r4
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x22a>
 80029e4:	e15c      	b.n	8002ca0 <__aeabi_dsub+0x4e4>
 80029e6:	4e42      	ldr	r6, [pc, #264]	; (8002af0 <__aeabi_dsub+0x334>)
 80029e8:	42b2      	cmp	r2, r6
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x232>
 80029ec:	e1ec      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 80029ee:	2680      	movs	r6, #128	; 0x80
 80029f0:	0436      	lsls	r6, r6, #16
 80029f2:	4333      	orrs	r3, r6
 80029f4:	4664      	mov	r4, ip
 80029f6:	2c38      	cmp	r4, #56	; 0x38
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x240>
 80029fa:	e1b3      	b.n	8002d64 <__aeabi_dsub+0x5a8>
 80029fc:	2c1f      	cmp	r4, #31
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x246>
 8002a00:	e238      	b.n	8002e74 <__aeabi_dsub+0x6b8>
 8002a02:	2620      	movs	r6, #32
 8002a04:	1b36      	subs	r6, r6, r4
 8002a06:	001c      	movs	r4, r3
 8002a08:	40b4      	lsls	r4, r6
 8002a0a:	464f      	mov	r7, r9
 8002a0c:	46a0      	mov	r8, r4
 8002a0e:	4664      	mov	r4, ip
 8002a10:	40e7      	lsrs	r7, r4
 8002a12:	4644      	mov	r4, r8
 8002a14:	433c      	orrs	r4, r7
 8002a16:	464f      	mov	r7, r9
 8002a18:	40b7      	lsls	r7, r6
 8002a1a:	003e      	movs	r6, r7
 8002a1c:	1e77      	subs	r7, r6, #1
 8002a1e:	41be      	sbcs	r6, r7
 8002a20:	4334      	orrs	r4, r6
 8002a22:	4666      	mov	r6, ip
 8002a24:	40f3      	lsrs	r3, r6
 8002a26:	18c9      	adds	r1, r1, r3
 8002a28:	1824      	adds	r4, r4, r0
 8002a2a:	4284      	cmp	r4, r0
 8002a2c:	419b      	sbcs	r3, r3
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4698      	mov	r8, r3
 8002a32:	0016      	movs	r6, r2
 8002a34:	4488      	add	r8, r1
 8002a36:	e04e      	b.n	8002ad6 <__aeabi_dsub+0x31a>
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <__aeabi_dsub+0x340>)
 8002a3a:	1c74      	adds	r4, r6, #1
 8002a3c:	4214      	tst	r4, r2
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_dsub+0x286>
 8002a40:	e0d6      	b.n	8002bf0 <__aeabi_dsub+0x434>
 8002a42:	464a      	mov	r2, r9
 8002a44:	431a      	orrs	r2, r3
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d000      	beq.n	8002a4c <__aeabi_dsub+0x290>
 8002a4a:	e15b      	b.n	8002d04 <__aeabi_dsub+0x548>
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d100      	bne.n	8002a52 <__aeabi_dsub+0x296>
 8002a50:	e1a5      	b.n	8002d9e <__aeabi_dsub+0x5e2>
 8002a52:	000a      	movs	r2, r1
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d000      	beq.n	8002a5a <__aeabi_dsub+0x29e>
 8002a58:	e1bb      	b.n	8002dd2 <__aeabi_dsub+0x616>
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08d2      	lsrs	r2, r2, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	e027      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002a66:	000a      	movs	r2, r1
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x2b2>
 8002a6c:	e174      	b.n	8002d58 <__aeabi_dsub+0x59c>
 8002a6e:	0022      	movs	r2, r4
 8002a70:	3a01      	subs	r2, #1
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d005      	beq.n	8002a82 <__aeabi_dsub+0x2c6>
 8002a76:	4c1e      	ldr	r4, [pc, #120]	; (8002af0 <__aeabi_dsub+0x334>)
 8002a78:	45a4      	cmp	ip, r4
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x2c2>
 8002a7c:	e094      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002a7e:	4694      	mov	ip, r2
 8002a80:	e759      	b.n	8002936 <__aeabi_dsub+0x17a>
 8002a82:	4448      	add	r0, r9
 8002a84:	4548      	cmp	r0, r9
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	4252      	negs	r2, r2
 8002a90:	4490      	add	r8, r2
 8002a92:	4643      	mov	r3, r8
 8002a94:	2602      	movs	r6, #2
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	d500      	bpl.n	8002a9c <__aeabi_dsub+0x2e0>
 8002a9a:	e0c4      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002a9c:	3e01      	subs	r6, #1
 8002a9e:	0763      	lsls	r3, r4, #29
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x2e8>
 8002aa2:	e711      	b.n	80028c8 <__aeabi_dsub+0x10c>
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	46b4      	mov	ip, r6
 8002aa8:	0759      	lsls	r1, r3, #29
 8002aaa:	08e2      	lsrs	r2, r4, #3
 8002aac:	430a      	orrs	r2, r1
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ab2:	458c      	cmp	ip, r1
 8002ab4:	d040      	beq.n	8002b38 <__aeabi_dsub+0x37c>
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	0b1b      	lsrs	r3, r3, #12
 8002abe:	0d49      	lsrs	r1, r1, #21
 8002ac0:	e720      	b.n	8002904 <__aeabi_dsub+0x148>
 8002ac2:	4301      	orrs	r1, r0
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	1e61      	subs	r1, r4, #1
 8002ac8:	418c      	sbcs	r4, r1
 8002aca:	444c      	add	r4, r9
 8002acc:	454c      	cmp	r4, r9
 8002ace:	4192      	sbcs	r2, r2
 8002ad0:	4252      	negs	r2, r2
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4498      	add	r8, r3
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	d5e0      	bpl.n	8002a9e <__aeabi_dsub+0x2e2>
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ade:	3601      	adds	r6, #1
 8002ae0:	429e      	cmp	r6, r3
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x32a>
 8002ae4:	e09f      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002ae6:	0031      	movs	r1, r6
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	e70a      	b.n	8002904 <__aeabi_dsub+0x148>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x34a>
 8002b04:	e160      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 8002b06:	000a      	movs	r2, r1
 8002b08:	4302      	orrs	r2, r0
 8002b0a:	d04d      	beq.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	075c      	lsls	r4, r3, #29
 8002b10:	08d2      	lsrs	r2, r2, #3
 8002b12:	4322      	orrs	r2, r4
 8002b14:	2480      	movs	r4, #128	; 0x80
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	0324      	lsls	r4, r4, #12
 8002b1a:	4223      	tst	r3, r4
 8002b1c:	d007      	beq.n	8002b2e <__aeabi_dsub+0x372>
 8002b1e:	08ce      	lsrs	r6, r1, #3
 8002b20:	4226      	tst	r6, r4
 8002b22:	d104      	bne.n	8002b2e <__aeabi_dsub+0x372>
 8002b24:	465d      	mov	r5, fp
 8002b26:	0033      	movs	r3, r6
 8002b28:	08c2      	lsrs	r2, r0, #3
 8002b2a:	0749      	lsls	r1, r1, #29
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	0f51      	lsrs	r1, r2, #29
 8002b30:	00d2      	lsls	r2, r2, #3
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	0749      	lsls	r1, r1, #29
 8002b36:	430a      	orrs	r2, r1
 8002b38:	0011      	movs	r1, r2
 8002b3a:	4319      	orrs	r1, r3
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x384>
 8002b3e:	e1c8      	b.n	8002ed2 <__aeabi_dsub+0x716>
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0309      	lsls	r1, r1, #12
 8002b44:	430b      	orrs	r3, r1
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	49d5      	ldr	r1, [pc, #852]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002b4a:	0b1b      	lsrs	r3, r3, #12
 8002b4c:	e6da      	b.n	8002904 <__aeabi_dsub+0x148>
 8002b4e:	49d5      	ldr	r1, [pc, #852]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002b50:	1ab6      	subs	r6, r6, r2
 8002b52:	400b      	ands	r3, r1
 8002b54:	4698      	mov	r8, r3
 8002b56:	e6b5      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 fb3b 	bl	80031d4 <__clzsi2>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	3218      	adds	r2, #24
 8002b62:	2a1f      	cmp	r2, #31
 8002b64:	dc00      	bgt.n	8002b68 <__aeabi_dsub+0x3ac>
 8002b66:	e68f      	b.n	8002888 <__aeabi_dsub+0xcc>
 8002b68:	0023      	movs	r3, r4
 8002b6a:	3808      	subs	r0, #8
 8002b6c:	4083      	lsls	r3, r0
 8002b6e:	2400      	movs	r4, #0
 8002b70:	e692      	b.n	8002898 <__aeabi_dsub+0xdc>
 8002b72:	4308      	orrs	r0, r1
 8002b74:	0002      	movs	r2, r0
 8002b76:	1e50      	subs	r0, r2, #1
 8002b78:	4182      	sbcs	r2, r0
 8002b7a:	e66d      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002b7c:	4cca      	ldr	r4, [pc, #808]	; (8002ea8 <__aeabi_dsub+0x6ec>)
 8002b7e:	1c72      	adds	r2, r6, #1
 8002b80:	4222      	tst	r2, r4
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x3ca>
 8002b84:	e0ad      	b.n	8002ce2 <__aeabi_dsub+0x526>
 8002b86:	464a      	mov	r2, r9
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d1b8      	bne.n	8002b00 <__aeabi_dsub+0x344>
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x3d8>
 8002b92:	e158      	b.n	8002e46 <__aeabi_dsub+0x68a>
 8002b94:	000a      	movs	r2, r1
 8002b96:	4302      	orrs	r2, r0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x3e0>
 8002b9a:	e159      	b.n	8002e50 <__aeabi_dsub+0x694>
 8002b9c:	464a      	mov	r2, r9
 8002b9e:	0759      	lsls	r1, r3, #29
 8002ba0:	08d2      	lsrs	r2, r2, #3
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	e786      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	0759      	lsls	r1, r3, #29
 8002bac:	08d2      	lsrs	r2, r2, #3
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	e7c1      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002bb4:	4dba      	ldr	r5, [pc, #744]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002bb6:	42aa      	cmp	r2, r5
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x400>
 8002bba:	e11e      	b.n	8002dfa <__aeabi_dsub+0x63e>
 8002bbc:	2580      	movs	r5, #128	; 0x80
 8002bbe:	042d      	lsls	r5, r5, #16
 8002bc0:	432b      	orrs	r3, r5
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	2c38      	cmp	r4, #56	; 0x38
 8002bc6:	dc5d      	bgt.n	8002c84 <__aeabi_dsub+0x4c8>
 8002bc8:	2c1f      	cmp	r4, #31
 8002bca:	dd00      	ble.n	8002bce <__aeabi_dsub+0x412>
 8002bcc:	e0d0      	b.n	8002d70 <__aeabi_dsub+0x5b4>
 8002bce:	2520      	movs	r5, #32
 8002bd0:	4667      	mov	r7, ip
 8002bd2:	1b2d      	subs	r5, r5, r4
 8002bd4:	464e      	mov	r6, r9
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	40fe      	lsrs	r6, r7
 8002bda:	40ac      	lsls	r4, r5
 8002bdc:	4334      	orrs	r4, r6
 8002bde:	464e      	mov	r6, r9
 8002be0:	40ae      	lsls	r6, r5
 8002be2:	0035      	movs	r5, r6
 8002be4:	40fb      	lsrs	r3, r7
 8002be6:	1e6e      	subs	r6, r5, #1
 8002be8:	41b5      	sbcs	r5, r6
 8002bea:	1ac9      	subs	r1, r1, r3
 8002bec:	432c      	orrs	r4, r5
 8002bee:	e04e      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	1a14      	subs	r4, r2, r0
 8002bf4:	45a1      	cmp	r9, r4
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	4252      	negs	r2, r2
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	1a5f      	subs	r7, r3, r1
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4647      	mov	r7, r8
 8002c02:	1bd2      	subs	r2, r2, r7
 8002c04:	4690      	mov	r8, r2
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	d500      	bpl.n	8002c0c <__aeabi_dsub+0x450>
 8002c0a:	e08b      	b.n	8002d24 <__aeabi_dsub+0x568>
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	d000      	beq.n	8002c14 <__aeabi_dsub+0x458>
 8002c12:	e630      	b.n	8002876 <__aeabi_dsub+0xba>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2500      	movs	r5, #0
 8002c18:	e74d      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	0759      	lsls	r1, r3, #29
 8002c1e:	08d2      	lsrs	r2, r2, #3
 8002c20:	430a      	orrs	r2, r1
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	e744      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002c26:	4642      	mov	r2, r8
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002c2a:	0861      	lsrs	r1, r4, #1
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	4014      	ands	r4, r2
 8002c34:	430c      	orrs	r4, r1
 8002c36:	07da      	lsls	r2, r3, #31
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	4314      	orrs	r4, r2
 8002c3e:	e641      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002c40:	001a      	movs	r2, r3
 8002c42:	3e1f      	subs	r6, #31
 8002c44:	40f2      	lsrs	r2, r6
 8002c46:	0016      	movs	r6, r2
 8002c48:	2920      	cmp	r1, #32
 8002c4a:	d003      	beq.n	8002c54 <__aeabi_dsub+0x498>
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	1a51      	subs	r1, r2, r1
 8002c50:	408b      	lsls	r3, r1
 8002c52:	431c      	orrs	r4, r3
 8002c54:	1e62      	subs	r2, r4, #1
 8002c56:	4194      	sbcs	r4, r2
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4334      	orrs	r4, r6
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	2600      	movs	r6, #0
 8002c60:	e71d      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002c62:	000c      	movs	r4, r1
 8002c64:	3a20      	subs	r2, #32
 8002c66:	40d4      	lsrs	r4, r2
 8002c68:	0022      	movs	r2, r4
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2c20      	cmp	r4, #32
 8002c6e:	d004      	beq.n	8002c7a <__aeabi_dsub+0x4be>
 8002c70:	2740      	movs	r7, #64	; 0x40
 8002c72:	1b3f      	subs	r7, r7, r4
 8002c74:	40b9      	lsls	r1, r7
 8002c76:	4308      	orrs	r0, r1
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4644      	mov	r4, r8
 8002c7c:	1e61      	subs	r1, r4, #1
 8002c7e:	418c      	sbcs	r4, r1
 8002c80:	4322      	orrs	r2, r4
 8002c82:	e5e9      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002c84:	464c      	mov	r4, r9
 8002c86:	4323      	orrs	r3, r4
 8002c88:	001c      	movs	r4, r3
 8002c8a:	1e63      	subs	r3, r4, #1
 8002c8c:	419c      	sbcs	r4, r3
 8002c8e:	1b04      	subs	r4, r0, r4
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	419b      	sbcs	r3, r3
 8002c94:	425b      	negs	r3, r3
 8002c96:	1acb      	subs	r3, r1, r3
 8002c98:	4698      	mov	r8, r3
 8002c9a:	465d      	mov	r5, fp
 8002c9c:	0016      	movs	r6, r2
 8002c9e:	e5e2      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002ca0:	464e      	mov	r6, r9
 8002ca2:	431e      	orrs	r6, r3
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x4ec>
 8002ca6:	e0ae      	b.n	8002e06 <__aeabi_dsub+0x64a>
 8002ca8:	1e66      	subs	r6, r4, #1
 8002caa:	2c01      	cmp	r4, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4f4>
 8002cae:	e0fd      	b.n	8002eac <__aeabi_dsub+0x6f0>
 8002cb0:	4f7b      	ldr	r7, [pc, #492]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x4fc>
 8002cb6:	e107      	b.n	8002ec8 <__aeabi_dsub+0x70c>
 8002cb8:	46b4      	mov	ip, r6
 8002cba:	e69b      	b.n	80029f4 <__aeabi_dsub+0x238>
 8002cbc:	4664      	mov	r4, ip
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	1b12      	subs	r2, r2, r4
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	4094      	lsls	r4, r2
 8002cc6:	0007      	movs	r7, r0
 8002cc8:	4090      	lsls	r0, r2
 8002cca:	46a0      	mov	r8, r4
 8002ccc:	4664      	mov	r4, ip
 8002cce:	1e42      	subs	r2, r0, #1
 8002cd0:	4190      	sbcs	r0, r2
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	40e7      	lsrs	r7, r4
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	40d1      	lsrs	r1, r2
 8002cda:	433c      	orrs	r4, r7
 8002cdc:	4304      	orrs	r4, r0
 8002cde:	185b      	adds	r3, r3, r1
 8002ce0:	e6f3      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002ce2:	4c6f      	ldr	r4, [pc, #444]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x52e>
 8002ce8:	e0d5      	b.n	8002e96 <__aeabi_dsub+0x6da>
 8002cea:	4448      	add	r0, r9
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	4548      	cmp	r0, r9
 8002cf0:	4189      	sbcs	r1, r1
 8002cf2:	4249      	negs	r1, r1
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	07dc      	lsls	r4, r3, #31
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	0016      	movs	r6, r2
 8002d00:	4304      	orrs	r4, r0
 8002d02:	e6cc      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x54e>
 8002d08:	e082      	b.n	8002e10 <__aeabi_dsub+0x654>
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	d140      	bne.n	8002d92 <__aeabi_dsub+0x5d6>
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	e713      	b.n	8002b40 <__aeabi_dsub+0x384>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08c2      	lsrs	r2, r0, #3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	465d      	mov	r5, fp
 8002d20:	08cb      	lsrs	r3, r1, #3
 8002d22:	e6c5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d24:	464a      	mov	r2, r9
 8002d26:	1a84      	subs	r4, r0, r2
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	4192      	sbcs	r2, r2
 8002d2c:	1acb      	subs	r3, r1, r3
 8002d2e:	4252      	negs	r2, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	4698      	mov	r8, r3
 8002d34:	465d      	mov	r5, fp
 8002d36:	e59e      	b.n	8002876 <__aeabi_dsub+0xba>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	0759      	lsls	r1, r3, #29
 8002d3c:	08d2      	lsrs	r2, r2, #3
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	e6f9      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d44:	464a      	mov	r2, r9
 8002d46:	1a14      	subs	r4, r2, r0
 8002d48:	45a1      	cmp	r9, r4
 8002d4a:	4192      	sbcs	r2, r2
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	4252      	negs	r2, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	4698      	mov	r8, r3
 8002d54:	2601      	movs	r6, #1
 8002d56:	e586      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	0759      	lsls	r1, r3, #29
 8002d5c:	08d2      	lsrs	r2, r2, #3
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	e6a5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d64:	464c      	mov	r4, r9
 8002d66:	4323      	orrs	r3, r4
 8002d68:	001c      	movs	r4, r3
 8002d6a:	1e63      	subs	r3, r4, #1
 8002d6c:	419c      	sbcs	r4, r3
 8002d6e:	e65b      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002d70:	4665      	mov	r5, ip
 8002d72:	001e      	movs	r6, r3
 8002d74:	3d20      	subs	r5, #32
 8002d76:	40ee      	lsrs	r6, r5
 8002d78:	2c20      	cmp	r4, #32
 8002d7a:	d005      	beq.n	8002d88 <__aeabi_dsub+0x5cc>
 8002d7c:	2540      	movs	r5, #64	; 0x40
 8002d7e:	1b2d      	subs	r5, r5, r4
 8002d80:	40ab      	lsls	r3, r5
 8002d82:	464c      	mov	r4, r9
 8002d84:	431c      	orrs	r4, r3
 8002d86:	46a2      	mov	sl, r4
 8002d88:	4654      	mov	r4, sl
 8002d8a:	1e63      	subs	r3, r4, #1
 8002d8c:	419c      	sbcs	r4, r3
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	e77d      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002d92:	074b      	lsls	r3, r1, #29
 8002d94:	08c2      	lsrs	r2, r0, #3
 8002d96:	431a      	orrs	r2, r3
 8002d98:	465d      	mov	r5, fp
 8002d9a:	08cb      	lsrs	r3, r1, #3
 8002d9c:	e6cc      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d9e:	000a      	movs	r2, r1
 8002da0:	4302      	orrs	r2, r0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x5ea>
 8002da4:	e736      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002da6:	074b      	lsls	r3, r1, #29
 8002da8:	08c2      	lsrs	r2, r0, #3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	465d      	mov	r5, fp
 8002dae:	08cb      	lsrs	r3, r1, #3
 8002db0:	e681      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002db2:	464a      	mov	r2, r9
 8002db4:	1a84      	subs	r4, r0, r2
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	4192      	sbcs	r2, r2
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	4252      	negs	r2, r2
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	2601      	movs	r6, #1
 8002dc6:	e54e      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	08c2      	lsrs	r2, r0, #3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	08cb      	lsrs	r3, r1, #3
 8002dd0:	e6b2      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	1a14      	subs	r4, r2, r0
 8002dd6:	45a1      	cmp	r9, r4
 8002dd8:	4192      	sbcs	r2, r2
 8002dda:	1a5f      	subs	r7, r3, r1
 8002ddc:	4252      	negs	r2, r2
 8002dde:	1aba      	subs	r2, r7, r2
 8002de0:	4690      	mov	r8, r2
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	d56b      	bpl.n	8002ebe <__aeabi_dsub+0x702>
 8002de6:	464a      	mov	r2, r9
 8002de8:	1a84      	subs	r4, r0, r2
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	4192      	sbcs	r2, r2
 8002dee:	1acb      	subs	r3, r1, r3
 8002df0:	4252      	negs	r2, r2
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	4698      	mov	r8, r3
 8002df6:	465d      	mov	r5, fp
 8002df8:	e564      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	465d      	mov	r5, fp
 8002e02:	08cb      	lsrs	r3, r1, #3
 8002e04:	e698      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e06:	074b      	lsls	r3, r1, #29
 8002e08:	08c2      	lsrs	r2, r0, #3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	08cb      	lsrs	r3, r1, #3
 8002e0e:	e64f      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002e10:	000a      	movs	r2, r1
 8002e12:	4302      	orrs	r2, r0
 8002e14:	d090      	beq.n	8002d38 <__aeabi_dsub+0x57c>
 8002e16:	464a      	mov	r2, r9
 8002e18:	075c      	lsls	r4, r3, #29
 8002e1a:	08d2      	lsrs	r2, r2, #3
 8002e1c:	4314      	orrs	r4, r2
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	0312      	lsls	r2, r2, #12
 8002e24:	4213      	tst	r3, r2
 8002e26:	d008      	beq.n	8002e3a <__aeabi_dsub+0x67e>
 8002e28:	08ce      	lsrs	r6, r1, #3
 8002e2a:	4216      	tst	r6, r2
 8002e2c:	d105      	bne.n	8002e3a <__aeabi_dsub+0x67e>
 8002e2e:	08c0      	lsrs	r0, r0, #3
 8002e30:	0749      	lsls	r1, r1, #29
 8002e32:	4308      	orrs	r0, r1
 8002e34:	0004      	movs	r4, r0
 8002e36:	465d      	mov	r5, fp
 8002e38:	0033      	movs	r3, r6
 8002e3a:	0f61      	lsrs	r1, r4, #29
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	0749      	lsls	r1, r1, #29
 8002e40:	08d2      	lsrs	r2, r2, #3
 8002e42:	430a      	orrs	r2, r1
 8002e44:	e678      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e46:	074b      	lsls	r3, r1, #29
 8002e48:	08c2      	lsrs	r2, r0, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	08cb      	lsrs	r3, r1, #3
 8002e4e:	e632      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002e50:	4448      	add	r0, r9
 8002e52:	185b      	adds	r3, r3, r1
 8002e54:	4548      	cmp	r0, r9
 8002e56:	4192      	sbcs	r2, r2
 8002e58:	4698      	mov	r8, r3
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	4490      	add	r8, r2
 8002e5e:	4643      	mov	r3, r8
 8002e60:	0004      	movs	r4, r0
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	d400      	bmi.n	8002e68 <__aeabi_dsub+0x6ac>
 8002e66:	e61a      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e68:	4642      	mov	r2, r8
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	401a      	ands	r2, r3
 8002e70:	4690      	mov	r8, r2
 8002e72:	e614      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e74:	4666      	mov	r6, ip
 8002e76:	001f      	movs	r7, r3
 8002e78:	3e20      	subs	r6, #32
 8002e7a:	40f7      	lsrs	r7, r6
 8002e7c:	2c20      	cmp	r4, #32
 8002e7e:	d005      	beq.n	8002e8c <__aeabi_dsub+0x6d0>
 8002e80:	2640      	movs	r6, #64	; 0x40
 8002e82:	1b36      	subs	r6, r6, r4
 8002e84:	40b3      	lsls	r3, r6
 8002e86:	464c      	mov	r4, r9
 8002e88:	431c      	orrs	r4, r3
 8002e8a:	46a2      	mov	sl, r4
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	1e63      	subs	r3, r4, #1
 8002e90:	419c      	sbcs	r4, r3
 8002e92:	433c      	orrs	r4, r7
 8002e94:	e5c8      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002e96:	0011      	movs	r1, r2
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e532      	b.n	8002904 <__aeabi_dsub+0x148>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	000007fe 	.word	0x000007fe
 8002eac:	464a      	mov	r2, r9
 8002eae:	1814      	adds	r4, r2, r0
 8002eb0:	4284      	cmp	r4, r0
 8002eb2:	4192      	sbcs	r2, r2
 8002eb4:	185b      	adds	r3, r3, r1
 8002eb6:	4698      	mov	r8, r3
 8002eb8:	4252      	negs	r2, r2
 8002eba:	4490      	add	r8, r2
 8002ebc:	e5e9      	b.n	8002a92 <__aeabi_dsub+0x2d6>
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	4322      	orrs	r2, r4
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x70a>
 8002ec4:	e6a6      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002ec6:	e5ea      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08c2      	lsrs	r2, r0, #3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	08cb      	lsrs	r3, r1, #3
 8002ed0:	e632      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <__aeabi_dsub+0x720>)
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	e514      	b.n	8002904 <__aeabi_dsub+0x148>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002ee6:	030c      	lsls	r4, r1, #12
 8002ee8:	0016      	movs	r6, r2
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	031a      	lsls	r2, r3, #12
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b12      	lsrs	r2, r2, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d008      	beq.n	8002f0e <__aeabi_dcmpun+0x2e>
 8002efc:	4906      	ldr	r1, [pc, #24]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d103      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f04:	4332      	orrs	r2, r6
 8002f06:	0010      	movs	r0, r2
 8002f08:	1e42      	subs	r2, r0, #1
 8002f0a:	4190      	sbcs	r0, r2
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	432c      	orrs	r4, r5
 8002f12:	d1fb      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f14:	e7f2      	b.n	8002efc <__aeabi_dcmpun+0x1c>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	000007ff 	.word	0x000007ff

08002f1c <__aeabi_d2iz>:
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	b530      	push	{r4, r5, lr}
 8002f20:	4c13      	ldr	r4, [pc, #76]	; (8002f70 <__aeabi_d2iz+0x54>)
 8002f22:	0053      	lsls	r3, r2, #1
 8002f24:	0309      	lsls	r1, r1, #12
 8002f26:	0005      	movs	r5, r0
 8002f28:	0b09      	lsrs	r1, r1, #12
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	0fd2      	lsrs	r2, r2, #31
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd04      	ble.n	8002f3e <__aeabi_d2iz+0x22>
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x58>)
 8002f36:	4283      	cmp	r3, r0
 8002f38:	dd02      	ble.n	8002f40 <__aeabi_d2iz+0x24>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x5c>)
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0340      	lsls	r0, r0, #13
 8002f44:	4301      	orrs	r1, r0
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <__aeabi_d2iz+0x60>)
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	281f      	cmp	r0, #31
 8002f4c:	dd08      	ble.n	8002f60 <__aeabi_d2iz+0x44>
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x64>)
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
 8002f56:	4258      	negs	r0, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f0      	bne.n	8002f3e <__aeabi_d2iz+0x22>
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_d2iz+0x22>
 8002f60:	4c08      	ldr	r4, [pc, #32]	; (8002f84 <__aeabi_d2iz+0x68>)
 8002f62:	40c5      	lsrs	r5, r0
 8002f64:	46a4      	mov	ip, r4
 8002f66:	4463      	add	r3, ip
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	432b      	orrs	r3, r5
 8002f6e:	e7f2      	b.n	8002f56 <__aeabi_d2iz+0x3a>
 8002f70:	000003fe 	.word	0x000003fe
 8002f74:	0000041d 	.word	0x0000041d
 8002f78:	7fffffff 	.word	0x7fffffff
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	fffffbed 	.word	0xfffffbed

08002f88 <__aeabi_i2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d016      	beq.n	8002fbc <__aeabi_i2d+0x34>
 8002f8e:	17c3      	asrs	r3, r0, #31
 8002f90:	18c5      	adds	r5, r0, r3
 8002f92:	405d      	eors	r5, r3
 8002f94:	0fc4      	lsrs	r4, r0, #31
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f91c 	bl	80031d4 <__clzsi2>
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <__aeabi_i2d+0x5c>)
 8002f9e:	1a12      	subs	r2, r2, r0
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc16      	bgt.n	8002fd2 <__aeabi_i2d+0x4a>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	3315      	adds	r3, #21
 8002faa:	409e      	lsls	r6, r3
 8002fac:	230b      	movs	r3, #11
 8002fae:	1a18      	subs	r0, r3, r0
 8002fb0:	40c5      	lsrs	r5, r0
 8002fb2:	0553      	lsls	r3, r2, #21
 8002fb4:	032d      	lsls	r5, r5, #12
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	e003      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	380b      	subs	r0, #11
 8002fd4:	4085      	lsls	r5, r0
 8002fd6:	0553      	lsls	r3, r2, #21
 8002fd8:	032d      	lsls	r5, r5, #12
 8002fda:	2600      	movs	r6, #0
 8002fdc:	0b2d      	lsrs	r5, r5, #12
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	e7f0      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_ui2d>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e04      	subs	r4, r0, #0
 8002fec:	d010      	beq.n	8003010 <__aeabi_ui2d+0x28>
 8002fee:	f000 f8f1 	bl	80031d4 <__clzsi2>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_ui2d+0x48>)
 8002ff4:	1a1b      	subs	r3, r3, r0
 8002ff6:	280a      	cmp	r0, #10
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_ui2d+0x36>
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	40d1      	lsrs	r1, r2
 8003002:	3015      	adds	r0, #21
 8003004:	030a      	lsls	r2, r1, #12
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4084      	lsls	r4, r0
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e001      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	0020      	movs	r0, r4
 800301a:	0019      	movs	r1, r3
 800301c:	bd10      	pop	{r4, pc}
 800301e:	0022      	movs	r2, r4
 8003020:	380b      	subs	r0, #11
 8003022:	4082      	lsls	r2, r0
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	2400      	movs	r4, #0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e7f1      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003030:	0000041e 	.word	0x0000041e

08003034 <__aeabi_f2d>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0043      	lsls	r3, r0, #1
 8003038:	0246      	lsls	r6, r0, #9
 800303a:	0fc4      	lsrs	r4, r0, #31
 800303c:	20fe      	movs	r0, #254	; 0xfe
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	0a75      	lsrs	r5, r6, #9
 8003044:	4208      	tst	r0, r1
 8003046:	d00c      	beq.n	8003062 <__aeabi_f2d+0x2e>
 8003048:	22e0      	movs	r2, #224	; 0xe0
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4694      	mov	ip, r2
 800304e:	076d      	lsls	r5, r5, #29
 8003050:	0b36      	lsrs	r6, r6, #12
 8003052:	4463      	add	r3, ip
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	4333      	orrs	r3, r6
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0028      	movs	r0, r5
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x5c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01b      	beq.n	80030a2 <__aeabi_f2d+0x6e>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8b2 	bl	80031d4 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x7a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <__aeabi_f2d+0x88>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b16      	lsrs	r6, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7e1      	b.n	8003054 <__aeabi_f2d+0x20>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d009      	beq.n	80030a8 <__aeabi_f2d+0x74>
 8003094:	0b32      	lsrs	r2, r6, #12
 8003096:	2680      	movs	r6, #128	; 0x80
 8003098:	0336      	lsls	r6, r6, #12
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__aeabi_f2d+0x8c>)
 800309c:	076d      	lsls	r5, r5, #29
 800309e:	4316      	orrs	r6, r2
 80030a0:	e7d8      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2600      	movs	r6, #0
 80030a6:	e7d5      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030ac:	e7d2      	b.n	8003054 <__aeabi_f2d+0x20>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x4e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00000389 	.word	0x00000389
 80030c0:	000007ff 	.word	0x000007ff

080030c4 <__aeabi_d2f>:
 80030c4:	0002      	movs	r2, r0
 80030c6:	004b      	lsls	r3, r1, #1
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	0308      	lsls	r0, r1, #12
 80030cc:	0d5b      	lsrs	r3, r3, #21
 80030ce:	4e3d      	ldr	r6, [pc, #244]	; (80031c4 <__aeabi_d2f+0x100>)
 80030d0:	0fcc      	lsrs	r4, r1, #31
 80030d2:	0a40      	lsrs	r0, r0, #9
 80030d4:	0f51      	lsrs	r1, r2, #29
 80030d6:	1c5f      	adds	r7, r3, #1
 80030d8:	4308      	orrs	r0, r1
 80030da:	00d5      	lsls	r5, r2, #3
 80030dc:	4237      	tst	r7, r6
 80030de:	d00a      	beq.n	80030f6 <__aeabi_d2f+0x32>
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <__aeabi_d2f+0x104>)
 80030e2:	185e      	adds	r6, r3, r1
 80030e4:	2efe      	cmp	r6, #254	; 0xfe
 80030e6:	dd16      	ble.n	8003116 <__aeabi_d2f+0x52>
 80030e8:	23ff      	movs	r3, #255	; 0xff
 80030ea:	2100      	movs	r1, #0
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	430b      	orrs	r3, r1
 80030f0:	07e0      	lsls	r0, r4, #31
 80030f2:	4318      	orrs	r0, r3
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <__aeabi_d2f+0x44>
 80030fa:	4328      	orrs	r0, r5
 80030fc:	d027      	beq.n	800314e <__aeabi_d2f+0x8a>
 80030fe:	2105      	movs	r1, #5
 8003100:	0189      	lsls	r1, r1, #6
 8003102:	0a49      	lsrs	r1, r1, #9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e7f1      	b.n	80030ec <__aeabi_d2f+0x28>
 8003108:	4305      	orrs	r5, r0
 800310a:	d0ed      	beq.n	80030e8 <__aeabi_d2f+0x24>
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	03c9      	lsls	r1, r1, #15
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	4301      	orrs	r1, r0
 8003114:	e7ea      	b.n	80030ec <__aeabi_d2f+0x28>
 8003116:	2e00      	cmp	r6, #0
 8003118:	dd1c      	ble.n	8003154 <__aeabi_d2f+0x90>
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	0011      	movs	r1, r2
 800311e:	1e4a      	subs	r2, r1, #1
 8003120:	4191      	sbcs	r1, r2
 8003122:	00c0      	lsls	r0, r0, #3
 8003124:	0f6d      	lsrs	r5, r5, #29
 8003126:	4301      	orrs	r1, r0
 8003128:	4329      	orrs	r1, r5
 800312a:	074b      	lsls	r3, r1, #29
 800312c:	d048      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 800312e:	230f      	movs	r3, #15
 8003130:	400b      	ands	r3, r1
 8003132:	2b04      	cmp	r3, #4
 8003134:	d000      	beq.n	8003138 <__aeabi_d2f+0x74>
 8003136:	3104      	adds	r1, #4
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	04db      	lsls	r3, r3, #19
 800313c:	400b      	ands	r3, r1
 800313e:	d03f      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 8003140:	1c72      	adds	r2, r6, #1
 8003142:	2efe      	cmp	r6, #254	; 0xfe
 8003144:	d0d0      	beq.n	80030e8 <__aeabi_d2f+0x24>
 8003146:	0189      	lsls	r1, r1, #6
 8003148:	0a49      	lsrs	r1, r1, #9
 800314a:	b2d3      	uxtb	r3, r2
 800314c:	e7ce      	b.n	80030ec <__aeabi_d2f+0x28>
 800314e:	2300      	movs	r3, #0
 8003150:	2100      	movs	r1, #0
 8003152:	e7cb      	b.n	80030ec <__aeabi_d2f+0x28>
 8003154:	0032      	movs	r2, r6
 8003156:	3217      	adds	r2, #23
 8003158:	db22      	blt.n	80031a0 <__aeabi_d2f+0xdc>
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	221e      	movs	r2, #30
 800315e:	0409      	lsls	r1, r1, #16
 8003160:	4308      	orrs	r0, r1
 8003162:	1b92      	subs	r2, r2, r6
 8003164:	2a1f      	cmp	r2, #31
 8003166:	dd1d      	ble.n	80031a4 <__aeabi_d2f+0xe0>
 8003168:	2102      	movs	r1, #2
 800316a:	4249      	negs	r1, r1
 800316c:	1b8e      	subs	r6, r1, r6
 800316e:	0001      	movs	r1, r0
 8003170:	40f1      	lsrs	r1, r6
 8003172:	000e      	movs	r6, r1
 8003174:	2a20      	cmp	r2, #32
 8003176:	d004      	beq.n	8003182 <__aeabi_d2f+0xbe>
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <__aeabi_d2f+0x108>)
 800317a:	4694      	mov	ip, r2
 800317c:	4463      	add	r3, ip
 800317e:	4098      	lsls	r0, r3
 8003180:	4305      	orrs	r5, r0
 8003182:	0029      	movs	r1, r5
 8003184:	1e4d      	subs	r5, r1, #1
 8003186:	41a9      	sbcs	r1, r5
 8003188:	4331      	orrs	r1, r6
 800318a:	2600      	movs	r6, #0
 800318c:	074b      	lsls	r3, r1, #29
 800318e:	d1ce      	bne.n	800312e <__aeabi_d2f+0x6a>
 8003190:	2080      	movs	r0, #128	; 0x80
 8003192:	000b      	movs	r3, r1
 8003194:	04c0      	lsls	r0, r0, #19
 8003196:	2201      	movs	r2, #1
 8003198:	4003      	ands	r3, r0
 800319a:	4201      	tst	r1, r0
 800319c:	d1d3      	bne.n	8003146 <__aeabi_d2f+0x82>
 800319e:	e7af      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e7ac      	b.n	80030fe <__aeabi_d2f+0x3a>
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <__aeabi_d2f+0x10c>)
 80031a6:	468c      	mov	ip, r1
 80031a8:	0029      	movs	r1, r5
 80031aa:	4463      	add	r3, ip
 80031ac:	40d1      	lsrs	r1, r2
 80031ae:	409d      	lsls	r5, r3
 80031b0:	000a      	movs	r2, r1
 80031b2:	0029      	movs	r1, r5
 80031b4:	4098      	lsls	r0, r3
 80031b6:	1e4d      	subs	r5, r1, #1
 80031b8:	41a9      	sbcs	r1, r5
 80031ba:	4301      	orrs	r1, r0
 80031bc:	4311      	orrs	r1, r2
 80031be:	e7e4      	b.n	800318a <__aeabi_d2f+0xc6>
 80031c0:	0033      	movs	r3, r6
 80031c2:	e79d      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031c4:	000007fe 	.word	0x000007fe
 80031c8:	fffffc80 	.word	0xfffffc80
 80031cc:	fffffca2 	.word	0xfffffca2
 80031d0:	fffffc82 	.word	0xfffffc82

080031d4 <__clzsi2>:
 80031d4:	211c      	movs	r1, #28
 80031d6:	2301      	movs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	4298      	cmp	r0, r3
 80031dc:	d301      	bcc.n	80031e2 <__clzsi2+0xe>
 80031de:	0c00      	lsrs	r0, r0, #16
 80031e0:	3910      	subs	r1, #16
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	4298      	cmp	r0, r3
 80031e6:	d301      	bcc.n	80031ec <__clzsi2+0x18>
 80031e8:	0a00      	lsrs	r0, r0, #8
 80031ea:	3908      	subs	r1, #8
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d301      	bcc.n	80031f6 <__clzsi2+0x22>
 80031f2:	0900      	lsrs	r0, r0, #4
 80031f4:	3904      	subs	r1, #4
 80031f6:	a202      	add	r2, pc, #8	; (adr r2, 8003200 <__clzsi2+0x2c>)
 80031f8:	5c10      	ldrb	r0, [r2, r0]
 80031fa:	1840      	adds	r0, r0, r1
 80031fc:	4770      	bx	lr
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	02020304 	.word	0x02020304
 8003204:	01010101 	.word	0x01010101
	...

08003210 <__divdi3>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	4657      	mov	r7, sl
 8003214:	464e      	mov	r6, r9
 8003216:	4645      	mov	r5, r8
 8003218:	46de      	mov	lr, fp
 800321a:	b5e0      	push	{r5, r6, r7, lr}
 800321c:	000f      	movs	r7, r1
 800321e:	0019      	movs	r1, r3
 8003220:	2300      	movs	r3, #0
 8003222:	0006      	movs	r6, r0
 8003224:	4698      	mov	r8, r3
 8003226:	0010      	movs	r0, r2
 8003228:	b083      	sub	sp, #12
 800322a:	2f00      	cmp	r7, #0
 800322c:	da07      	bge.n	800323e <__divdi3+0x2e>
 800322e:	0033      	movs	r3, r6
 8003230:	003c      	movs	r4, r7
 8003232:	2700      	movs	r7, #0
 8003234:	425e      	negs	r6, r3
 8003236:	41a7      	sbcs	r7, r4
 8003238:	2301      	movs	r3, #1
 800323a:	425b      	negs	r3, r3
 800323c:	4698      	mov	r8, r3
 800323e:	2900      	cmp	r1, #0
 8003240:	da07      	bge.n	8003252 <__divdi3+0x42>
 8003242:	4643      	mov	r3, r8
 8003244:	43db      	mvns	r3, r3
 8003246:	000c      	movs	r4, r1
 8003248:	4698      	mov	r8, r3
 800324a:	0003      	movs	r3, r0
 800324c:	2100      	movs	r1, #0
 800324e:	4258      	negs	r0, r3
 8003250:	41a1      	sbcs	r1, r4
 8003252:	0034      	movs	r4, r6
 8003254:	003d      	movs	r5, r7
 8003256:	4682      	mov	sl, r0
 8003258:	4689      	mov	r9, r1
 800325a:	42b9      	cmp	r1, r7
 800325c:	d86a      	bhi.n	8003334 <__divdi3+0x124>
 800325e:	d067      	beq.n	8003330 <__divdi3+0x120>
 8003260:	4649      	mov	r1, r9
 8003262:	4650      	mov	r0, sl
 8003264:	f000 f8ba 	bl	80033dc <__clzdi2>
 8003268:	4683      	mov	fp, r0
 800326a:	0039      	movs	r1, r7
 800326c:	0030      	movs	r0, r6
 800326e:	f000 f8b5 	bl	80033dc <__clzdi2>
 8003272:	465b      	mov	r3, fp
 8003274:	1a1b      	subs	r3, r3, r0
 8003276:	469c      	mov	ip, r3
 8003278:	3b20      	subs	r3, #32
 800327a:	469b      	mov	fp, r3
 800327c:	d46b      	bmi.n	8003356 <__divdi3+0x146>
 800327e:	4658      	mov	r0, fp
 8003280:	4651      	mov	r1, sl
 8003282:	4081      	lsls	r1, r0
 8003284:	4660      	mov	r0, ip
 8003286:	000b      	movs	r3, r1
 8003288:	4651      	mov	r1, sl
 800328a:	4081      	lsls	r1, r0
 800328c:	000a      	movs	r2, r1
 800328e:	42bb      	cmp	r3, r7
 8003290:	d900      	bls.n	8003294 <__divdi3+0x84>
 8003292:	e072      	b.n	800337a <__divdi3+0x16a>
 8003294:	42bb      	cmp	r3, r7
 8003296:	d100      	bne.n	800329a <__divdi3+0x8a>
 8003298:	e079      	b.n	800338e <__divdi3+0x17e>
 800329a:	0034      	movs	r4, r6
 800329c:	003d      	movs	r5, r7
 800329e:	4659      	mov	r1, fp
 80032a0:	1aa4      	subs	r4, r4, r2
 80032a2:	419d      	sbcs	r5, r3
 80032a4:	2900      	cmp	r1, #0
 80032a6:	da00      	bge.n	80032aa <__divdi3+0x9a>
 80032a8:	e074      	b.n	8003394 <__divdi3+0x184>
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	2601      	movs	r6, #1
 80032b0:	9000      	str	r0, [sp, #0]
 80032b2:	9101      	str	r1, [sp, #4]
 80032b4:	4659      	mov	r1, fp
 80032b6:	408e      	lsls	r6, r1
 80032b8:	9601      	str	r6, [sp, #4]
 80032ba:	4661      	mov	r1, ip
 80032bc:	2601      	movs	r6, #1
 80032be:	408e      	lsls	r6, r1
 80032c0:	4661      	mov	r1, ip
 80032c2:	9600      	str	r6, [sp, #0]
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d05f      	beq.n	8003388 <__divdi3+0x178>
 80032c8:	07d9      	lsls	r1, r3, #31
 80032ca:	0856      	lsrs	r6, r2, #1
 80032cc:	430e      	orrs	r6, r1
 80032ce:	085f      	lsrs	r7, r3, #1
 80032d0:	4661      	mov	r1, ip
 80032d2:	2201      	movs	r2, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	e00c      	b.n	80032f2 <__divdi3+0xe2>
 80032d8:	42af      	cmp	r7, r5
 80032da:	d101      	bne.n	80032e0 <__divdi3+0xd0>
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d80a      	bhi.n	80032f6 <__divdi3+0xe6>
 80032e0:	1ba4      	subs	r4, r4, r6
 80032e2:	41bd      	sbcs	r5, r7
 80032e4:	1924      	adds	r4, r4, r4
 80032e6:	416d      	adcs	r5, r5
 80032e8:	3901      	subs	r1, #1
 80032ea:	18a4      	adds	r4, r4, r2
 80032ec:	415d      	adcs	r5, r3
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d006      	beq.n	8003300 <__divdi3+0xf0>
 80032f2:	42af      	cmp	r7, r5
 80032f4:	d9f0      	bls.n	80032d8 <__divdi3+0xc8>
 80032f6:	3901      	subs	r1, #1
 80032f8:	1924      	adds	r4, r4, r4
 80032fa:	416d      	adcs	r5, r5
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d1f8      	bne.n	80032f2 <__divdi3+0xe2>
 8003300:	9800      	ldr	r0, [sp, #0]
 8003302:	9901      	ldr	r1, [sp, #4]
 8003304:	465b      	mov	r3, fp
 8003306:	1900      	adds	r0, r0, r4
 8003308:	4169      	adcs	r1, r5
 800330a:	2b00      	cmp	r3, #0
 800330c:	db4d      	blt.n	80033aa <__divdi3+0x19a>
 800330e:	002e      	movs	r6, r5
 8003310:	002c      	movs	r4, r5
 8003312:	40de      	lsrs	r6, r3
 8003314:	4663      	mov	r3, ip
 8003316:	40dc      	lsrs	r4, r3
 8003318:	465b      	mov	r3, fp
 800331a:	2b00      	cmp	r3, #0
 800331c:	db55      	blt.n	80033ca <__divdi3+0x1ba>
 800331e:	0034      	movs	r4, r6
 8003320:	409c      	lsls	r4, r3
 8003322:	0023      	movs	r3, r4
 8003324:	4664      	mov	r4, ip
 8003326:	40a6      	lsls	r6, r4
 8003328:	0032      	movs	r2, r6
 800332a:	1a80      	subs	r0, r0, r2
 800332c:	4199      	sbcs	r1, r3
 800332e:	e003      	b.n	8003338 <__divdi3+0x128>
 8003330:	42b0      	cmp	r0, r6
 8003332:	d995      	bls.n	8003260 <__divdi3+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	2100      	movs	r1, #0
 8003338:	4643      	mov	r3, r8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <__divdi3+0x138>
 800333e:	0003      	movs	r3, r0
 8003340:	000c      	movs	r4, r1
 8003342:	2100      	movs	r1, #0
 8003344:	4258      	negs	r0, r3
 8003346:	41a1      	sbcs	r1, r4
 8003348:	b003      	add	sp, #12
 800334a:	bcf0      	pop	{r4, r5, r6, r7}
 800334c:	46bb      	mov	fp, r7
 800334e:	46b2      	mov	sl, r6
 8003350:	46a9      	mov	r9, r5
 8003352:	46a0      	mov	r8, r4
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	4662      	mov	r2, ip
 8003358:	4648      	mov	r0, r9
 800335a:	2320      	movs	r3, #32
 800335c:	4651      	mov	r1, sl
 800335e:	4090      	lsls	r0, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	40d9      	lsrs	r1, r3
 8003364:	0003      	movs	r3, r0
 8003366:	9100      	str	r1, [sp, #0]
 8003368:	9900      	ldr	r1, [sp, #0]
 800336a:	4660      	mov	r0, ip
 800336c:	430b      	orrs	r3, r1
 800336e:	4651      	mov	r1, sl
 8003370:	4081      	lsls	r1, r0
 8003372:	000a      	movs	r2, r1
 8003374:	42bb      	cmp	r3, r7
 8003376:	d800      	bhi.n	800337a <__divdi3+0x16a>
 8003378:	e78c      	b.n	8003294 <__divdi3+0x84>
 800337a:	2100      	movs	r1, #0
 800337c:	2000      	movs	r0, #0
 800337e:	9000      	str	r0, [sp, #0]
 8003380:	9101      	str	r1, [sp, #4]
 8003382:	4661      	mov	r1, ip
 8003384:	2900      	cmp	r1, #0
 8003386:	d19f      	bne.n	80032c8 <__divdi3+0xb8>
 8003388:	9800      	ldr	r0, [sp, #0]
 800338a:	9901      	ldr	r1, [sp, #4]
 800338c:	e7d4      	b.n	8003338 <__divdi3+0x128>
 800338e:	42b1      	cmp	r1, r6
 8003390:	d8f3      	bhi.n	800337a <__divdi3+0x16a>
 8003392:	e782      	b.n	800329a <__divdi3+0x8a>
 8003394:	4661      	mov	r1, ip
 8003396:	2620      	movs	r6, #32
 8003398:	2701      	movs	r7, #1
 800339a:	1a76      	subs	r6, r6, r1
 800339c:	2000      	movs	r0, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	40f7      	lsrs	r7, r6
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	9101      	str	r1, [sp, #4]
 80033a6:	9701      	str	r7, [sp, #4]
 80033a8:	e787      	b.n	80032ba <__divdi3+0xaa>
 80033aa:	4662      	mov	r2, ip
 80033ac:	2320      	movs	r3, #32
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	002a      	movs	r2, r5
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0026      	movs	r6, r4
 80033b6:	0013      	movs	r3, r2
 80033b8:	4662      	mov	r2, ip
 80033ba:	40d6      	lsrs	r6, r2
 80033bc:	002c      	movs	r4, r5
 80033be:	431e      	orrs	r6, r3
 80033c0:	4663      	mov	r3, ip
 80033c2:	40dc      	lsrs	r4, r3
 80033c4:	465b      	mov	r3, fp
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	daa9      	bge.n	800331e <__divdi3+0x10e>
 80033ca:	4662      	mov	r2, ip
 80033cc:	2320      	movs	r3, #32
 80033ce:	0035      	movs	r5, r6
 80033d0:	4094      	lsls	r4, r2
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	40dd      	lsrs	r5, r3
 80033d6:	0023      	movs	r3, r4
 80033d8:	432b      	orrs	r3, r5
 80033da:	e7a3      	b.n	8003324 <__divdi3+0x114>

080033dc <__clzdi2>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d103      	bne.n	80033ea <__clzdi2+0xe>
 80033e2:	f7ff fef7 	bl	80031d4 <__clzsi2>
 80033e6:	3020      	adds	r0, #32
 80033e8:	e002      	b.n	80033f0 <__clzdi2+0x14>
 80033ea:	1c08      	adds	r0, r1, #0
 80033ec:	f7ff fef2 	bl	80031d4 <__clzsi2>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)

080033f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_Init+0x3c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_Init+0x3c>)
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	0049      	lsls	r1, r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800340e:	2000      	movs	r0, #0
 8003410:	f000 f810 	bl	8003434 <HAL_InitTick>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d003      	beq.n	8003420 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e001      	b.n	8003424 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003420:	f00d f8e4 	bl	80105ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000

08003434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_InitTick+0x88>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02b      	beq.n	80034a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_InitTick+0x8c>)
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_InitTick+0x88>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	0019      	movs	r1, r3
 8003456:	23fa      	movs	r3, #250	; 0xfa
 8003458:	0098      	lsls	r0, r3, #2
 800345a:	f7fc fe5b 	bl	8000114 <__udivsi3>
 800345e:	0003      	movs	r3, r0
 8003460:	0019      	movs	r1, r3
 8003462:	0020      	movs	r0, r4
 8003464:	f7fc fe56 	bl	8000114 <__udivsi3>
 8003468:	0003      	movs	r3, r0
 800346a:	0018      	movs	r0, r3
 800346c:	f001 f80f 	bl	800448e <HAL_SYSTICK_Config>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d112      	bne.n	800349a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d80a      	bhi.n	8003490 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	2301      	movs	r3, #1
 800347e:	425b      	negs	r3, r3
 8003480:	2200      	movs	r2, #0
 8003482:	0018      	movs	r0, r3
 8003484:	f000 ffde 	bl	8004444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_InitTick+0x90>)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e00d      	b.n	80034ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e008      	b.n	80034ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800349a:	230f      	movs	r3, #15
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e003      	b.n	80034ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	781b      	ldrb	r3, [r3, #0]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b005      	add	sp, #20
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000004 	.word	0x20000004
 80034c0:	20000084 	.word	0x20000084
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_IncTick+0x1c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x20>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	18d2      	adds	r2, r2, r3
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_IncTick+0x20>)
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000124 	.word	0x20000124

080034ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  return uwTick;
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <HAL_GetTick+0x10>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	20000124 	.word	0x20000124

08003500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fff0 	bl	80034ec <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_Delay+0x44>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	001a      	movs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	189b      	adds	r3, r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	f7ff ffe0 	bl	80034ec <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d8f7      	bhi.n	8003528 <HAL_Delay+0x28>
  {
  }
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_SuspendTick+0x18>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_SuspendTick+0x18>)
 8003552:	2102      	movs	r1, #2
 8003554:	438a      	bics	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <HAL_ResumeTick+0x18>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_ResumeTick+0x18>)
 800356e:	2102      	movs	r1, #2
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40010000 	.word	0x40010000
 80035a8:	fffff9ff 	.word	0xfffff9ff

080035ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035bc:	401a      	ands	r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fe3fffff 	.word	0xfe3fffff

080035d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	23e0      	movs	r3, #224	; 0xe0
 80035e2:	045b      	lsls	r3, r3, #17
 80035e4:	4013      	ands	r3, r2
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	2104      	movs	r1, #4
 8003602:	400a      	ands	r2, r1
 8003604:	2107      	movs	r1, #7
 8003606:	4091      	lsls	r1, r2
 8003608:	000a      	movs	r2, r1
 800360a:	43d2      	mvns	r2, r2
 800360c:	401a      	ands	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2104      	movs	r1, #4
 8003612:	400b      	ands	r3, r1
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4099      	lsls	r1, r3
 8003618:	000b      	movs	r3, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}

08003628 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	23c0      	movs	r3, #192	; 0xc0
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d101      	bne.n	8003640 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}

0800364a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	211f      	movs	r1, #31
 800365e:	400a      	ands	r2, r1
 8003660:	210f      	movs	r1, #15
 8003662:	4091      	lsls	r1, r2
 8003664:	000a      	movs	r2, r1
 8003666:	43d2      	mvns	r2, r2
 8003668:	401a      	ands	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	210f      	movs	r1, #15
 8003670:	4019      	ands	r1, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	201f      	movs	r0, #31
 8003676:	4003      	ands	r3, r0
 8003678:	4099      	lsls	r1, r3
 800367a:	000b      	movs	r3, r1
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}

0800368a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	035b      	lsls	r3, r3, #13
 800369c:	0b5b      	lsrs	r3, r3, #13
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	0352      	lsls	r2, r2, #13
 80036be:	0b52      	lsrs	r2, r2, #13
 80036c0:	43d2      	mvns	r2, r2
 80036c2:	401a      	ands	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	0212      	lsls	r2, r2, #8
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	400b      	ands	r3, r1
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <LL_ADC_SetChannelSamplingTime+0x34>)
 80036f2:	400b      	ands	r3, r1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	07ffff00 	.word	0x07ffff00

08003708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <LL_ADC_EnableInternalRegulator+0x24>)
 8003716:	4013      	ands	r3, r2
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	6fffffe8 	.word	0x6fffffe8

08003730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	055b      	lsls	r3, r3, #21
 8003740:	401a      	ands	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	429a      	cmp	r2, r3
 8003748:	d101      	bne.n	800374e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800374e:	2300      	movs	r3, #0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <LL_ADC_Enable+0x20>)
 8003766:	4013      	ands	r3, r2
 8003768:	2201      	movs	r2, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	7fffffe8 	.word	0x7fffffe8

0800377c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <LL_ADC_Disable+0x20>)
 800378a:	4013      	ands	r3, r2
 800378c:	2202      	movs	r2, #2
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	7fffffe8 	.word	0x7fffffe8

080037a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <LL_ADC_IsEnabled+0x18>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <LL_ADC_IsEnabled+0x1a>
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <LL_ADC_REG_StartConversion+0x20>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2204      	movs	r2, #4
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	7fffffe8 	.word	0x7fffffe8

080037e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2204      	movs	r2, #4
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d101      	bne.n	8003800 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1b1      	b.n	8003b96 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f00c fefd 	bl	801063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2254      	movs	r2, #84	; 0x54
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff ff6b 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d115      	bne.n	800388a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0018      	movs	r0, r3
 8003864:	f7ff ff50 	bl	8003708 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003868:	4bcd      	ldr	r3, [pc, #820]	; (8003ba0 <HAL_ADC_Init+0x394>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	49cd      	ldr	r1, [pc, #820]	; (8003ba4 <HAL_ADC_Init+0x398>)
 800386e:	0018      	movs	r0, r3
 8003870:	f7fc fc50 	bl	8000114 <__udivsi3>
 8003874:	0003      	movs	r3, r0
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800387c:	e002      	b.n	8003884 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff ff4e 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	2210      	movs	r2, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2201      	movs	r2, #1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ff93 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 80038c2:	0003      	movs	r3, r0
 80038c4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	d000      	beq.n	80038d2 <HAL_ADC_Init+0xc6>
 80038d0:	e154      	b.n	8003b7c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d000      	beq.n	80038da <HAL_ADC_Init+0xce>
 80038d8:	e150      	b.n	8003b7c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4ab2      	ldr	r2, [pc, #712]	; (8003ba8 <HAL_ADC_Init+0x39c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	2202      	movs	r2, #2
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff ff56 	bl	80037a0 <LL_ADC_IsEnabled>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d156      	bne.n	80039a6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2218      	movs	r2, #24
 8003900:	4393      	bics	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	0f9b      	lsrs	r3, r3, #30
 8003916:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800391c:	4313      	orrs	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223c      	movs	r2, #60	; 0x3c
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d111      	bne.n	8003952 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0f9b      	lsrs	r3, r3, #30
 8003934:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800393a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003940:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003946:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	2201      	movs	r2, #1
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a94      	ldr	r2, [pc, #592]	; (8003bac <HAL_ADC_Init+0x3a0>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	430a      	orrs	r2, r1
 8003966:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	23c0      	movs	r3, #192	; 0xc0
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	429a      	cmp	r2, r3
 8003972:	d018      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	429a      	cmp	r2, r3
 800397e:	d012      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	429a      	cmp	r2, r3
 800398a:	d00c      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800398c:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_ADC_Init+0x3a4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <HAL_ADC_Init+0x3a8>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	23f0      	movs	r3, #240	; 0xf0
 800399c:	039b      	lsls	r3, r3, #14
 800399e:	401a      	ands	r2, r3
 80039a0:	4b83      	ldr	r3, [pc, #524]	; (8003bb0 <HAL_ADC_Init+0x3a4>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7e1b      	ldrb	r3, [r3, #24]
 80039aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7e5b      	ldrb	r3, [r3, #25]
 80039b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e9b      	ldrb	r3, [r3, #26]
 80039b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_Init+0x1be>
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	e000      	b.n	80039cc <HAL_ADC_Init+0x1c0>
 80039ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039d2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da04      	bge.n	80039e6 <HAL_ADC_Init+0x1da>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	e001      	b.n	80039ea <HAL_ADC_Init+0x1de>
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80039ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	5c5b      	ldrb	r3, [r3, r1]
 80039f2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d115      	bne.n	8003a32 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7e9b      	ldrb	r3, [r3, #26]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0252      	lsls	r2, r2, #9
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e00b      	b.n	8003a32 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	2220      	movs	r2, #32
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3e:	23e0      	movs	r3, #224	; 0xe0
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_ADC_Init+0x3ac>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	4a53      	ldr	r2, [pc, #332]	; (8003bbc <HAL_ADC_Init+0x3b0>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	001a      	movs	r2, r3
 8003a86:	2100      	movs	r1, #0
 8003a88:	f7ff fdb1 	bl	80035ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	494a      	ldr	r1, [pc, #296]	; (8003bc0 <HAL_ADC_Init+0x3b4>)
 8003a96:	001a      	movs	r2, r3
 8003a98:	f7ff fda9 	bl	80035ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2110      	movs	r1, #16
 8003ab0:	4249      	negs	r1, r1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab6:	e03a      	b.n	8003b2e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	039b      	lsls	r3, r3, #14
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d134      	bne.n	8003b2e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e00c      	b.n	8003ae4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	40da      	lsrs	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d006      	beq.n	8003aec <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b07      	cmp	r3, #7
 8003ae8:	d9ef      	bls.n	8003aca <HAL_ADC_Init+0x2be>
 8003aea:	e000      	b.n	8003aee <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003aec:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d109      	bne.n	8003b08 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2110      	movs	r1, #16
 8003b00:	4249      	negs	r1, r1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
 8003b06:	e012      	b.n	8003b2e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	221c      	movs	r2, #28
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	4252      	negs	r2, r2
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	0011      	movs	r1, r2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_ADC_Init+0x3b8>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b54:	e01c      	b.n	8003b90 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	2212      	movs	r2, #18
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	2210      	movs	r2, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b7a:	e009      	b.n	8003b90 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	2210      	movs	r2, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b88:	231f      	movs	r3, #31
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b008      	add	sp, #32
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	20000084 	.word	0x20000084
 8003ba4:	00030d40 	.word	0x00030d40
 8003ba8:	fffffefd 	.word	0xfffffefd
 8003bac:	1ffffc02 	.word	0x1ffffc02
 8003bb0:	40012708 	.word	0x40012708
 8003bb4:	ffc3ffff 	.word	0xffc3ffff
 8003bb8:	fffe0219 	.word	0xfffe0219
 8003bbc:	dffffc02 	.word	0xdffffc02
 8003bc0:	07ffff04 	.word	0x07ffff04
 8003bc4:	833fffe7 	.word	0x833fffe7

08003bc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fe05 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d16c      	bne.n	8003cbc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2254      	movs	r2, #84	; 0x54
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0x28>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e06c      	b.n	8003cca <HAL_ADC_Start_DMA+0x102>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2254      	movs	r2, #84	; 0x54
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d113      	bne.n	8003c2c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fdc9 	bl	80037a0 <LL_ADC_IsEnabled>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7ff fdb0 	bl	800377c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c2c:	2517      	movs	r5, #23
 8003c2e:	197c      	adds	r4, r7, r5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fa46 	bl	80040c4 <ADC_Enable>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c3c:	002c      	movs	r4, r5
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13e      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_ADC_Start_DMA+0x10c>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	0052      	lsls	r2, r2, #1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_ADC_Start_DMA+0x110>)
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_ADC_Start_DMA+0x114>)
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_ADC_Start_DMA+0x118>)
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	221c      	movs	r2, #28
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2254      	movs	r2, #84	; 0x54
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2110      	movs	r1, #16
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3340      	adds	r3, #64	; 0x40
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	193c      	adds	r4, r7, r4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f000 fc88 	bl	80045bc <HAL_DMA_Start_IT>
 8003cac:	0003      	movs	r3, r0
 8003cae:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fd85 	bl	80037c4 <LL_ADC_REG_StartConversion>
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cbc:	2317      	movs	r3, #23
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cc4:	2317      	movs	r3, #23
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b006      	add	sp, #24
 8003cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fffff0fe 	.word	0xfffff0fe
 8003cd8:	080041d1 	.word	0x080041d1
 8003cdc:	08004299 	.word	0x08004299
 8003ce0:	080042b7 	.word	0x080042b7

08003ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2317      	movs	r3, #23
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2254      	movs	r2, #84	; 0x54
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x24>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e1c0      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3a6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2254      	movs	r2, #84	; 0x54
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff fd4f 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d000      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0x3c>
 8003d4e:	e1a3      	b.n	8004098 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d100      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x46>
 8003d58:	e143      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d004      	beq.n	8003d70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d6a:	4ac1      	ldr	r2, [pc, #772]	; (8004070 <HAL_ADC_ConfigChannel+0x35c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0019      	movs	r1, r3
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	f7ff fc85 	bl	800368a <LL_ADC_REG_SetSequencerChAdd>
 8003d80:	e0c9      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	211f      	movs	r1, #31
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	210f      	movs	r1, #15
 8003d90:	4099      	lsls	r1, r3
 8003d92:	000b      	movs	r3, r1
 8003d94:	43db      	mvns	r3, r3
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	035b      	lsls	r3, r3, #13
 8003da0:	0b5b      	lsrs	r3, r3, #13
 8003da2:	d105      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x9c>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	221f      	movs	r2, #31
 8003dac:	4013      	ands	r3, r2
 8003dae:	e098      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4013      	ands	r3, r2
 8003db8:	d000      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0xa8>
 8003dba:	e091      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d000      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0xb4>
 8003dc6:	e089      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1c8>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d000      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0xc0>
 8003dd2:	e081      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x1c4>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d000      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0xcc>
 8003dde:	e079      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1c0>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2210      	movs	r2, #16
 8003de6:	4013      	ands	r3, r2
 8003de8:	d000      	beq.n	8003dec <HAL_ADC_ConfigChannel+0xd8>
 8003dea:	e071      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	4013      	ands	r3, r2
 8003df4:	d000      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0xe4>
 8003df6:	e069      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x1b8>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d000      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0xf0>
 8003e02:	e061      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1b4>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d000      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0xfc>
 8003e0e:	e059      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d151      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1ac>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4013      	ands	r3, r2
 8003e26:	d149      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x1a8>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4013      	ands	r3, r2
 8003e32:	d141      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d139      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x1a0>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d131      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x19c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	019b      	lsls	r3, r3, #6
 8003e54:	4013      	ands	r3, r2
 8003e56:	d129      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x198>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	01db      	lsls	r3, r3, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	d121      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x194>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d119      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x190>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	025b      	lsls	r3, r3, #9
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x18c>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	4013      	ands	r3, r2
 8003e86:	d109      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x188>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	02db      	lsls	r3, r3, #11
 8003e90:	4013      	ands	r3, r2
 8003e92:	d001      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x184>
 8003e94:	2312      	movs	r3, #18
 8003e96:	e024      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e022      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003e9c:	2311      	movs	r3, #17
 8003e9e:	e020      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	e01e      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	e01c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea8:	230e      	movs	r3, #14
 8003eaa:	e01a      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eac:	230d      	movs	r3, #13
 8003eae:	e018      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	e016      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb4:	230b      	movs	r3, #11
 8003eb6:	e014      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb8:	230a      	movs	r3, #10
 8003eba:	e012      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	e010      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	e00e      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec4:	2307      	movs	r3, #7
 8003ec6:	e00c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e00a      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ecc:	2305      	movs	r3, #5
 8003ece:	e008      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e006      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e004      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	6852      	ldr	r2, [r2, #4]
 8003ee6:	201f      	movs	r0, #31
 8003ee8:	4002      	ands	r2, r0
 8003eea:	4093      	lsls	r3, r2
 8003eec:	000a      	movs	r2, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d808      	bhi.n	8003f16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	f7ff fb9a 	bl	800364a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	001a      	movs	r2, r3
 8003f24:	f7ff fbd4 	bl	80036d0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db00      	blt.n	8003f32 <HAL_ADC_ConfigChannel+0x21e>
 8003f30:	e0bc      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f32:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fb4d 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_ADC_ConfigChannel+0x364>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d122      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f50:	d11d      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	0412      	lsls	r2, r2, #16
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f7ff fb24 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_ADC_ConfigChannel+0x368>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4945      	ldr	r1, [pc, #276]	; (8004080 <HAL_ADC_ConfigChannel+0x36c>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fc f8d2 	bl	8000114 <__udivsi3>
 8003f70:	0003      	movs	r3, r0
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	0013      	movs	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f7e:	e002      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f9      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f8c:	e08e      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_ADC_ConfigChannel+0x370>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10e      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x2a2>
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	045b      	lsls	r3, r3, #17
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d109      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	0452      	lsls	r2, r2, #17
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003fac:	0019      	movs	r1, r3
 8003fae:	0010      	movs	r0, r2
 8003fb0:	f7ff fafc 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8003fb4:	e07a      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a33      	ldr	r2, [pc, #204]	; (8004088 <HAL_ADC_ConfigChannel+0x374>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d000      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8003fc0:	e074      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	03db      	lsls	r3, r3, #15
 8003fc8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fca:	d000      	beq.n	8003fce <HAL_ADC_ConfigChannel+0x2ba>
 8003fcc:	e06e      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	03d2      	lsls	r2, r2, #15
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003fd8:	0019      	movs	r1, r3
 8003fda:	0010      	movs	r0, r2
 8003fdc:	f7ff fae6 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8003fe0:	e064      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d004      	beq.n	8003ff8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <HAL_ADC_ConfigChannel+0x35c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d107      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0019      	movs	r1, r3
 8004002:	0010      	movs	r0, r2
 8004004:	f7ff fb52 	bl	80036ac <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da4d      	bge.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fade 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 8004018:	0003      	movs	r3, r0
 800401a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_ADC_ConfigChannel+0x364>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_ADC_ConfigChannel+0x378>)
 800402a:	4013      	ands	r3, r2
 800402c:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 800402e:	0019      	movs	r1, r3
 8004030:	0010      	movs	r0, r2
 8004032:	f7ff fabb 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8004036:	e039      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_ADC_ConfigChannel+0x370>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_ADC_ConfigChannel+0x37c>)
 8004046:	4013      	ands	r3, r2
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 800404a:	0019      	movs	r1, r3
 800404c:	0010      	movs	r0, r2
 800404e:	f7ff faad 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8004052:	e02b      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <HAL_ADC_ConfigChannel+0x374>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d126      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_ADC_ConfigChannel+0x380>)
 8004062:	4013      	ands	r3, r2
 8004064:	4a03      	ldr	r2, [pc, #12]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8004066:	0019      	movs	r1, r3
 8004068:	0010      	movs	r0, r2
 800406a:	f7ff fa9f 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 800406e:	e01d      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
 8004070:	80000004 	.word	0x80000004
 8004074:	40012708 	.word	0x40012708
 8004078:	b0001000 	.word	0xb0001000
 800407c:	20000084 	.word	0x20000084
 8004080:	00030d40 	.word	0x00030d40
 8004084:	b8004000 	.word	0xb8004000
 8004088:	b4002000 	.word	0xb4002000
 800408c:	ff7fffff 	.word	0xff7fffff
 8004090:	feffffff 	.word	0xfeffffff
 8004094:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	2220      	movs	r2, #32
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040a4:	2317      	movs	r3, #23
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2254      	movs	r2, #84	; 0x54
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80040b4:	2317      	movs	r3, #23
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	781b      	ldrb	r3, [r3, #0]
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b006      	add	sp, #24
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)

080040c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fb63 	bl	80037a0 <LL_ADC_IsEnabled>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d000      	beq.n	80040e0 <ADC_Enable+0x1c>
 80040de:	e069      	b.n	80041b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a36      	ldr	r2, [pc, #216]	; (80041c0 <ADC_Enable+0xfc>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	d00d      	beq.n	8004108 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	2210      	movs	r2, #16
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2201      	movs	r2, #1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e056      	b.n	80041b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff fb23 	bl	8003758 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <ADC_Enable+0x100>)
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fa5d 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 800411a:	0002      	movs	r2, r0
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	4013      	ands	r3, r2
 8004122:	d00f      	beq.n	8004144 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <ADC_Enable+0x104>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4928      	ldr	r1, [pc, #160]	; (80041cc <ADC_Enable+0x108>)
 800412a:	0018      	movs	r0, r3
 800412c:	f7fb fff2 	bl	8000114 <__udivsi3>
 8004130:	0003      	movs	r3, r0
 8004132:	3301      	adds	r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004136:	e002      	b.n	800413e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3b01      	subs	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7e5b      	ldrb	r3, [r3, #25]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d033      	beq.n	80041b4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800414c:	f7ff f9ce 	bl	80034ec <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004154:	e027      	b.n	80041a6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fb20 	bl	80037a0 <LL_ADC_IsEnabled>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d104      	bne.n	800416e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff faf5 	bl	8003758 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800416e:	f7ff f9bd 	bl	80034ec <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d914      	bls.n	80041a6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00d      	beq.n	80041a6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	2210      	movs	r2, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2201      	movs	r2, #1
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e007      	b.n	80041b6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d1d0      	bne.n	8004156 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	80000017 	.word	0x80000017
 80041c4:	40012708 	.word	0x40012708
 80041c8:	20000084 	.word	0x20000084
 80041cc:	00030d40 	.word	0x00030d40

080041d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	4013      	ands	r3, r2
 80041e6:	d141      	bne.n	800426c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff fa14 	bl	8003628 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d02e      	beq.n	8004262 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	7e9b      	ldrb	r3, [r3, #26]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d12a      	bne.n	8004262 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2208      	movs	r2, #8
 8004214:	4013      	ands	r3, r2
 8004216:	2b08      	cmp	r3, #8
 8004218:	d123      	bne.n	8004262 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fae2 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d110      	bne.n	800424a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	210c      	movs	r1, #12
 8004234:	438a      	bics	r2, r1
 8004236:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <ADC_DMAConvCplt+0xc4>)
 800423e:	4013      	ands	r3, r2
 8004240:	2201      	movs	r2, #1
 8004242:	431a      	orrs	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	659a      	str	r2, [r3, #88]	; 0x58
 8004248:	e00b      	b.n	8004262 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	2220      	movs	r2, #32
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2201      	movs	r2, #1
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fd3d 	bl	8003ce4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800426a:	e00f      	b.n	800428c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	2210      	movs	r2, #16
 8004272:	4013      	ands	r3, r2
 8004274:	d004      	beq.n	8004280 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff fd43 	bl	8003d04 <HAL_ADC_ErrorCallback>
}
 800427e:	e005      	b.n	800428c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	0010      	movs	r0, r2
 800428a:	4798      	blx	r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	fffffefe 	.word	0xfffffefe

08004298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fd23 	bl	8003cf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	2204      	movs	r2, #4
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7ff fd10 	bl	8003d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}

080042ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	0002      	movs	r2, r0
 80042f4:	1dfb      	adds	r3, r7, #7
 80042f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	1dfb      	adds	r3, r7, #7
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b7f      	cmp	r3, #127	; 0x7f
 80042fe:	d809      	bhi.n	8004314 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	001a      	movs	r2, r3
 8004306:	231f      	movs	r3, #31
 8004308:	401a      	ands	r2, r3
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <__NVIC_EnableIRQ+0x30>)
 800430c:	2101      	movs	r1, #1
 800430e:	4091      	lsls	r1, r2
 8004310:	000a      	movs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}
 800431c:	e000e100 	.word	0xe000e100

08004320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	0002      	movs	r2, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b7f      	cmp	r3, #127	; 0x7f
 8004334:	d828      	bhi.n	8004388 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004336:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <__NVIC_SetPriority+0xd4>)
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b25b      	sxtb	r3, r3
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	33c0      	adds	r3, #192	; 0xc0
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	589b      	ldr	r3, [r3, r2]
 8004346:	1dfa      	adds	r2, r7, #7
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	0011      	movs	r1, r2
 800434c:	2203      	movs	r2, #3
 800434e:	400a      	ands	r2, r1
 8004350:	00d2      	lsls	r2, r2, #3
 8004352:	21ff      	movs	r1, #255	; 0xff
 8004354:	4091      	lsls	r1, r2
 8004356:	000a      	movs	r2, r1
 8004358:	43d2      	mvns	r2, r2
 800435a:	401a      	ands	r2, r3
 800435c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	401a      	ands	r2, r3
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	0018      	movs	r0, r3
 800436c:	2303      	movs	r3, #3
 800436e:	4003      	ands	r3, r0
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004374:	481f      	ldr	r0, [pc, #124]	; (80043f4 <__NVIC_SetPriority+0xd4>)
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b25b      	sxtb	r3, r3
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	430a      	orrs	r2, r1
 8004380:	33c0      	adds	r3, #192	; 0xc0
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004386:	e031      	b.n	80043ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <__NVIC_SetPriority+0xd8>)
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	0019      	movs	r1, r3
 8004390:	230f      	movs	r3, #15
 8004392:	400b      	ands	r3, r1
 8004394:	3b08      	subs	r3, #8
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3306      	adds	r3, #6
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	3304      	adds	r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1dfa      	adds	r2, r7, #7
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	0011      	movs	r1, r2
 80043a8:	2203      	movs	r2, #3
 80043aa:	400a      	ands	r2, r1
 80043ac:	00d2      	lsls	r2, r2, #3
 80043ae:	21ff      	movs	r1, #255	; 0xff
 80043b0:	4091      	lsls	r1, r2
 80043b2:	000a      	movs	r2, r1
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	401a      	ands	r2, r3
 80043b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	401a      	ands	r2, r3
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	4003      	ands	r3, r0
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d0:	4809      	ldr	r0, [pc, #36]	; (80043f8 <__NVIC_SetPriority+0xd8>)
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	001c      	movs	r4, r3
 80043d8:	230f      	movs	r3, #15
 80043da:	4023      	ands	r3, r4
 80043dc:	3b08      	subs	r3, #8
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	430a      	orrs	r2, r1
 80043e2:	3306      	adds	r3, #6
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	18c3      	adds	r3, r0, r3
 80043e8:	3304      	adds	r3, #4
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b003      	add	sp, #12
 80043f2:	bd90      	pop	{r4, r7, pc}
 80043f4:	e000e100 	.word	0xe000e100
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	045b      	lsls	r3, r3, #17
 800440c:	429a      	cmp	r2, r3
 800440e:	d301      	bcc.n	8004414 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004410:	2301      	movs	r3, #1
 8004412:	e010      	b.n	8004436 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <SysTick_Config+0x44>)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	3a01      	subs	r2, #1
 800441a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441c:	2301      	movs	r3, #1
 800441e:	425b      	negs	r3, r3
 8004420:	2103      	movs	r1, #3
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff ff7c 	bl	8004320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x44>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x44>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	210f      	movs	r1, #15
 8004450:	187b      	adds	r3, r7, r1
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	187b      	adds	r3, r7, r1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f7ff ff5d 	bl	8004320 <__NVIC_SetPriority>
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	0002      	movs	r2, r0
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800447a:	1dfb      	adds	r3, r7, #7
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	0018      	movs	r0, r3
 8004482:	f7ff ff33 	bl	80042ec <__NVIC_EnableIRQ>
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff ffaf 	bl	80043fc <SysTick_Config>
 800449e:	0003      	movs	r3, r0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e077      	b.n	80045aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_DMA_Init+0x10c>)
 80044c0:	4694      	mov	ip, r2
 80044c2:	4463      	add	r3, ip
 80044c4:	2114      	movs	r1, #20
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7fb fe24 	bl	8000114 <__udivsi3>
 80044cc:	0003      	movs	r3, r0
 80044ce:	009a      	lsls	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2225      	movs	r2, #37	; 0x25
 80044d8:	2102      	movs	r1, #2
 80044da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_DMA_Init+0x110>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f9c1 	bl	80048ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	01db      	lsls	r3, r3, #7
 8004532:	429a      	cmp	r2, r3
 8004534:	d102      	bne.n	800453c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	213f      	movs	r1, #63	; 0x3f
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004552:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d011      	beq.n	8004580 <HAL_DMA_Init+0xd8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d80d      	bhi.n	8004580 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f9cc 	bl	8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e008      	b.n	8004592 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2225      	movs	r2, #37	; 0x25
 800459c:	2101      	movs	r1, #1
 800459e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	bffdfff8 	.word	0xbffdfff8
 80045b8:	ffff800f 	.word	0xffff800f

080045bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2317      	movs	r3, #23
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2224      	movs	r2, #36	; 0x24
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_DMA_Start_IT+0x24>
 80045dc:	2302      	movs	r3, #2
 80045de:	e06f      	b.n	80046c0 <HAL_DMA_Start_IT+0x104>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2225      	movs	r2, #37	; 0x25
 80045ec:	5c9b      	ldrb	r3, [r3, r2]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d157      	bne.n	80046a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2225      	movs	r2, #37	; 0x25
 80045f8:	2102      	movs	r1, #2
 80045fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	438a      	bics	r2, r1
 8004610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f907 	bl	800482c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	210e      	movs	r1, #14
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e00f      	b.n	8004658 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2104      	movs	r1, #4
 8004644:	438a      	bics	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	210a      	movs	r1, #10
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	4013      	ands	r3, r2
 8004664:	d008      	beq.n	8004678 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	0049      	lsls	r1, r1, #1
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	0049      	lsls	r1, r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2101      	movs	r1, #1
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e00a      	b.n	80046ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80046b2:	2317      	movs	r3, #23
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80046ba:	2317      	movs	r3, #23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	781b      	ldrb	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b006      	add	sp, #24
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	221c      	movs	r2, #28
 80046e4:	4013      	ands	r3, r2
 80046e6:	2204      	movs	r2, #4
 80046e8:	409a      	lsls	r2, r3
 80046ea:	0013      	movs	r3, r2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4013      	ands	r3, r2
 80046f0:	d027      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2204      	movs	r2, #4
 80046f6:	4013      	ands	r3, r2
 80046f8:	d023      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2220      	movs	r2, #32
 8004702:	4013      	ands	r3, r2
 8004704:	d107      	bne.n	8004716 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2104      	movs	r1, #4
 8004712:	438a      	bics	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	221c      	movs	r2, #28
 8004720:	4013      	ands	r3, r2
 8004722:	2204      	movs	r2, #4
 8004724:	409a      	lsls	r2, r3
 8004726:	4b40      	ldr	r3, [pc, #256]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_DMA_IRQHandler+0x6e>
 8004734:	e073      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	0010      	movs	r0, r2
 800473e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004740:	e06d      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	221c      	movs	r2, #28
 8004748:	4013      	ands	r3, r2
 800474a:	2202      	movs	r2, #2
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	d02e      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d02a      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	4013      	ands	r3, r2
 8004768:	d10b      	bne.n	8004782 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	210a      	movs	r1, #10
 8004776:	438a      	bics	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2225      	movs	r2, #37	; 0x25
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	221c      	movs	r2, #28
 800478c:	4013      	ands	r3, r2
 800478e:	2202      	movs	r2, #2
 8004790:	409a      	lsls	r2, r3
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03a      	beq.n	800481e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	0010      	movs	r0, r2
 80047b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047b2:	e034      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	221c      	movs	r2, #28
 80047ba:	4013      	ands	r3, r2
 80047bc:	2208      	movs	r2, #8
 80047be:	409a      	lsls	r2, r3
 80047c0:	0013      	movs	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	d02b      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2208      	movs	r2, #8
 80047cc:	4013      	ands	r3, r2
 80047ce:	d027      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	210e      	movs	r1, #14
 80047dc:	438a      	bics	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	221c      	movs	r2, #28
 80047ea:	4013      	ands	r3, r2
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2225      	movs	r2, #37	; 0x25
 8004800:	2101      	movs	r1, #1
 8004802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	2100      	movs	r1, #0
 800480a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	0010      	movs	r0, r2
 800481c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46c0      	nop			; (mov r8, r8)
}
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40020000 	.word	0x40020000

0800482c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004842:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004854:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <DMA_SetConfig+0x7c>)
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	221c      	movs	r2, #28
 8004860:	4013      	ands	r3, r2
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <DMA_SetConfig+0x7c>)
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d108      	bne.n	800488e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800488c:	e007      	b.n	800489e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	40020000 	.word	0x40020000

080048ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80048bc:	4694      	mov	ip, r2
 80048be:	4463      	add	r3, ip
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	001a      	movs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	001a      	movs	r2, r3
 80048ce:	23ff      	movs	r3, #255	; 0xff
 80048d0:	4013      	ands	r3, r2
 80048d2:	3b08      	subs	r3, #8
 80048d4:	2114      	movs	r1, #20
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7fb fc1c 	bl	8000114 <__udivsi3>
 80048dc:	0003      	movs	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a07      	ldr	r2, [pc, #28]	; (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80048e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	221f      	movs	r2, #31
 80048ea:	4013      	ands	r3, r2
 80048ec:	2201      	movs	r2, #1
 80048ee:	409a      	lsls	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b004      	add	sp, #16
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	10008200 	.word	0x10008200
 8004900:	40020880 	.word	0x40020880

08004904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800491a:	4694      	mov	ip, r2
 800491c:	4463      	add	r3, ip
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	001a      	movs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800492a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	4013      	ands	r3, r2
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}
 8004944:	1000823f 	.word	0x1000823f
 8004948:	40020940 	.word	0x40020940

0800494c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800495a:	e147      	b.n	8004bec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4091      	lsls	r1, r2
 8004966:	000a      	movs	r2, r1
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d100      	bne.n	8004974 <HAL_GPIO_Init+0x28>
 8004972:	e138      	b.n	8004be6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	4013      	ands	r3, r2
 800497c:	2b01      	cmp	r3, #1
 800497e:	d005      	beq.n	800498c <HAL_GPIO_Init+0x40>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2203      	movs	r2, #3
 8004986:	4013      	ands	r3, r2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d130      	bne.n	80049ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	409a      	lsls	r2, r3
 800499a:	0013      	movs	r3, r2
 800499c:	43da      	mvns	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	409a      	lsls	r2, r3
 80049ae:	0013      	movs	r3, r2
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c2:	2201      	movs	r2, #1
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	409a      	lsls	r2, r3
 80049c8:	0013      	movs	r3, r2
 80049ca:	43da      	mvns	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	2201      	movs	r2, #1
 80049da:	401a      	ands	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	409a      	lsls	r2, r3
 80049e0:	0013      	movs	r3, r2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d017      	beq.n	8004a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2203      	movs	r2, #3
 8004a06:	409a      	lsls	r2, r3
 8004a08:	0013      	movs	r3, r2
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	0013      	movs	r3, r2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d123      	bne.n	8004a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	0092      	lsls	r2, r2, #2
 8004a40:	58d3      	ldr	r3, [r2, r3]
 8004a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2207      	movs	r2, #7
 8004a48:	4013      	ands	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	220f      	movs	r2, #15
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	0013      	movs	r3, r2
 8004a52:	43da      	mvns	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2107      	movs	r1, #7
 8004a62:	400b      	ands	r3, r1
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	409a      	lsls	r2, r3
 8004a68:	0013      	movs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	6939      	ldr	r1, [r7, #16]
 8004a7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	0013      	movs	r3, r2
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	0013      	movs	r3, r2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	23c0      	movs	r3, #192	; 0xc0
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	4013      	ands	r3, r2
 8004abc:	d100      	bne.n	8004ac0 <HAL_GPIO_Init+0x174>
 8004abe:	e092      	b.n	8004be6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004ac0:	4a50      	ldr	r2, [pc, #320]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	3318      	adds	r3, #24
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	589b      	ldr	r3, [r3, r2]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	0013      	movs	r3, r2
 8004adc:	43da      	mvns	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	23a0      	movs	r3, #160	; 0xa0
 8004ae8:	05db      	lsls	r3, r3, #23
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d013      	beq.n	8004b16 <HAL_GPIO_Init+0x1ca>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a45      	ldr	r2, [pc, #276]	; (8004c08 <HAL_GPIO_Init+0x2bc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00d      	beq.n	8004b12 <HAL_GPIO_Init+0x1c6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a44      	ldr	r2, [pc, #272]	; (8004c0c <HAL_GPIO_Init+0x2c0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <HAL_GPIO_Init+0x1c2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a43      	ldr	r2, [pc, #268]	; (8004c10 <HAL_GPIO_Init+0x2c4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_GPIO_Init+0x1be>
 8004b06:	2303      	movs	r3, #3
 8004b08:	e006      	b.n	8004b18 <HAL_GPIO_Init+0x1cc>
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	e004      	b.n	8004b18 <HAL_GPIO_Init+0x1cc>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e002      	b.n	8004b18 <HAL_GPIO_Init+0x1cc>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_GPIO_Init+0x1cc>
 8004b16:	2300      	movs	r3, #0
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	00d2      	lsls	r2, r2, #3
 8004b20:	4093      	lsls	r3, r2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004b28:	4936      	ldr	r1, [pc, #216]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	3318      	adds	r3, #24
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b36:	4a33      	ldr	r2, [pc, #204]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	58d3      	ldr	r3, [r2, r3]
 8004b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	025b      	lsls	r3, r3, #9
 8004b50:	4013      	ands	r3, r2
 8004b52:	d003      	beq.n	8004b5c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b5c:	4929      	ldr	r1, [pc, #164]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b66:	2384      	movs	r3, #132	; 0x84
 8004b68:	58d3      	ldr	r3, [r2, r3]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b8a:	491e      	ldr	r1, [pc, #120]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b8c:	2284      	movs	r2, #132	; 0x84
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	035b      	lsls	r3, r3, #13
 8004baa:	4013      	ands	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	039b      	lsls	r3, r3, #14
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_GPIO_Init+0x2b8>)
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	3301      	adds	r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	40da      	lsrs	r2, r3
 8004bf4:	1e13      	subs	r3, r2, #0
 8004bf6:	d000      	beq.n	8004bfa <HAL_GPIO_Init+0x2ae>
 8004bf8:	e6b0      	b.n	800495c <HAL_GPIO_Init+0x10>
  }
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b006      	add	sp, #24
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021800 	.word	0x40021800
 8004c08:	50000400 	.word	0x50000400
 8004c0c:	50000800 	.word	0x50000800
 8004c10:	50000c00 	.word	0x50000c00

08004c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	000a      	movs	r2, r1
 8004c1e:	1cbb      	adds	r3, r7, #2
 8004c20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	1cba      	adds	r2, r7, #2
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c2e:	230f      	movs	r3, #15
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e003      	b.n	8004c40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c38:	230f      	movs	r3, #15
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c40:	230f      	movs	r3, #15
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	781b      	ldrb	r3, [r3, #0]
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b004      	add	sp, #16
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	0008      	movs	r0, r1
 8004c58:	0011      	movs	r1, r2
 8004c5a:	1cbb      	adds	r3, r7, #2
 8004c5c:	1c02      	adds	r2, r0, #0
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	1c7b      	adds	r3, r7, #1
 8004c62:	1c0a      	adds	r2, r1, #0
 8004c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c66:	1c7b      	adds	r3, r7, #1
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c6e:	1cbb      	adds	r3, r7, #2
 8004c70:	881a      	ldrh	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c76:	e003      	b.n	8004c80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c78:	1cbb      	adds	r3, r7, #2
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b002      	add	sp, #8
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	0002      	movs	r2, r0
 8004c90:	1dbb      	adds	r3, r7, #6
 8004c92:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004c94:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	1dba      	adds	r2, r7, #6
 8004c9a:	8812      	ldrh	r2, [r2, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d008      	beq.n	8004cb2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ca2:	1dba      	adds	r2, r7, #6
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 f815 	bl	8004cdc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	1dba      	adds	r2, r7, #6
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d008      	beq.n	8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cc0:	1dba      	adds	r2, r7, #6
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004cc6:	1dbb      	adds	r3, r7, #6
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f003 f85e 	bl	8007d8c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021800 	.word	0x40021800

08004cdc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	1dbb      	adds	r3, r7, #6
 8004ce6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e082      	b.n	8004e08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f00b fd1b 	bl	8010754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2241      	movs	r2, #65	; 0x41
 8004d22:	2124      	movs	r1, #36	; 0x24
 8004d24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2101      	movs	r1, #1
 8004d32:	438a      	bics	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4934      	ldr	r1, [pc, #208]	; (8004e10 <HAL_I2C_Init+0x120>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4931      	ldr	r1, [pc, #196]	; (8004e14 <HAL_I2C_Init+0x124>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d108      	bne.n	8004d6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	0209      	lsls	r1, r1, #8
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	e007      	b.n	8004d7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2184      	movs	r1, #132	; 0x84
 8004d78:	0209      	lsls	r1, r1, #8
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d104      	bne.n	8004d90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	0112      	lsls	r2, r2, #4
 8004d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	491f      	ldr	r1, [pc, #124]	; (8004e18 <HAL_I2C_Init+0x128>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	491a      	ldr	r1, [pc, #104]	; (8004e14 <HAL_I2C_Init+0x124>)
 8004dac:	400a      	ands	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69d9      	ldr	r1, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2241      	movs	r2, #65	; 0x41
 8004df4:	2120      	movs	r1, #32
 8004df6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2242      	movs	r2, #66	; 0x42
 8004e02:	2100      	movs	r1, #0
 8004e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	f0ffffff 	.word	0xf0ffffff
 8004e14:	ffff7fff 	.word	0xffff7fff
 8004e18:	02008000 	.word	0x02008000

08004e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	000c      	movs	r4, r1
 8004e26:	0010      	movs	r0, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	1c22      	adds	r2, r4, #0
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	2308      	movs	r3, #8
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	1c02      	adds	r2, r0, #0
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	1c0a      	adds	r2, r1, #0
 8004e3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2241      	movs	r2, #65	; 0x41
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d000      	beq.n	8004e4e <HAL_I2C_Mem_Write+0x32>
 8004e4c:	e10c      	b.n	8005068 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <HAL_I2C_Mem_Write+0x42>
 8004e54:	232c      	movs	r3, #44	; 0x2c
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2280      	movs	r2, #128	; 0x80
 8004e62:	0092      	lsls	r2, r2, #2
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e0ff      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	5c9b      	ldrb	r3, [r3, r2]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_I2C_Mem_Write+0x5c>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0f8      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2240      	movs	r2, #64	; 0x40
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e80:	f7fe fb34 	bl	80034ec <HAL_GetTick>
 8004e84:	0003      	movs	r3, r0
 8004e86:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	0219      	lsls	r1, r3, #8
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2319      	movs	r3, #25
 8004e94:	2201      	movs	r2, #1
 8004e96:	f000 fb0b 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0e3      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2241      	movs	r2, #65	; 0x41
 8004ea6:	2121      	movs	r1, #33	; 0x21
 8004ea8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2242      	movs	r2, #66	; 0x42
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	222c      	movs	r2, #44	; 0x2c
 8004ec2:	18ba      	adds	r2, r7, r2
 8004ec4:	8812      	ldrh	r2, [r2, #0]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ece:	1dbb      	adds	r3, r7, #6
 8004ed0:	881c      	ldrh	r4, [r3, #0]
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	230a      	movs	r3, #10
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	8819      	ldrh	r1, [r3, #0]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	0023      	movs	r3, r4
 8004eea:	f000 f9f9 	bl	80052e0 <I2C_RequestMemoryWrite>
 8004eee:	1e03      	subs	r3, r0, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2240      	movs	r2, #64	; 0x40
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0b5      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2bff      	cmp	r3, #255	; 0xff
 8004f06:	d911      	bls.n	8004f2c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	22ff      	movs	r2, #255	; 0xff
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	045c      	lsls	r4, r3, #17
 8004f18:	230a      	movs	r3, #10
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	8819      	ldrh	r1, [r3, #0]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	2300      	movs	r3, #0
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	0023      	movs	r3, r4
 8004f26:	f000 fbf7 	bl	8005718 <I2C_TransferConfig>
 8004f2a:	e012      	b.n	8004f52 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	049c      	lsls	r4, r3, #18
 8004f40:	230a      	movs	r3, #10
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	8819      	ldrh	r1, [r3, #0]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	0023      	movs	r3, r4
 8004f4e:	f000 fbe3 	bl	8005718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f000 fae8 	bl	800552e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f5e:	1e03      	subs	r3, r0, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e081      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03a      	beq.n	8005016 <HAL_I2C_Mem_Write+0x1fa>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d136      	bne.n	8005016 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	0013      	movs	r3, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	f000 fa7b 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e053      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2bff      	cmp	r3, #255	; 0xff
 8004fca:	d911      	bls.n	8004ff0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	22ff      	movs	r2, #255	; 0xff
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	045c      	lsls	r4, r3, #17
 8004fdc:	230a      	movs	r3, #10
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	8819      	ldrh	r1, [r3, #0]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	0023      	movs	r3, r4
 8004fea:	f000 fb95 	bl	8005718 <I2C_TransferConfig>
 8004fee:	e012      	b.n	8005016 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	049c      	lsls	r4, r3, #18
 8005004:	230a      	movs	r3, #10
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	8819      	ldrh	r1, [r3, #0]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	2300      	movs	r3, #0
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	0023      	movs	r3, r4
 8005012:	f000 fb81 	bl	8005718 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d198      	bne.n	8004f52 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fac0 	bl	80055ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d001      	beq.n	8005034 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e01a      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2220      	movs	r2, #32
 800503a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	490b      	ldr	r1, [pc, #44]	; (8005074 <HAL_I2C_Mem_Write+0x258>)
 8005048:	400a      	ands	r2, r1
 800504a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2241      	movs	r2, #65	; 0x41
 8005050:	2120      	movs	r1, #32
 8005052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2242      	movs	r2, #66	; 0x42
 8005058:	2100      	movs	r1, #0
 800505a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	2100      	movs	r1, #0
 8005062:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b007      	add	sp, #28
 8005070:	bd90      	pop	{r4, r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	fe00e800 	.word	0xfe00e800

08005078 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	000c      	movs	r4, r1
 8005082:	0010      	movs	r0, r2
 8005084:	0019      	movs	r1, r3
 8005086:	230a      	movs	r3, #10
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	1c22      	adds	r2, r4, #0
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	2308      	movs	r3, #8
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	1c02      	adds	r2, r0, #0
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	1dbb      	adds	r3, r7, #6
 8005098:	1c0a      	adds	r2, r1, #0
 800509a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2241      	movs	r2, #65	; 0x41
 80050a0:	5c9b      	ldrb	r3, [r3, r2]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d000      	beq.n	80050aa <HAL_I2C_Mem_Read+0x32>
 80050a8:	e110      	b.n	80052cc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <HAL_I2C_Mem_Read+0x42>
 80050b0:	232c      	movs	r3, #44	; 0x2c
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e103      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_I2C_Mem_Read+0x5c>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e0fc      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2240      	movs	r2, #64	; 0x40
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050dc:	f7fe fa06 	bl	80034ec <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	0219      	lsls	r1, r3, #8
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2319      	movs	r3, #25
 80050f0:	2201      	movs	r2, #1
 80050f2:	f000 f9dd 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e0e7      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2241      	movs	r2, #65	; 0x41
 8005102:	2122      	movs	r1, #34	; 0x22
 8005104:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2242      	movs	r2, #66	; 0x42
 800510a:	2140      	movs	r1, #64	; 0x40
 800510c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	222c      	movs	r2, #44	; 0x2c
 800511e:	18ba      	adds	r2, r7, r2
 8005120:	8812      	ldrh	r2, [r2, #0]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512a:	1dbb      	adds	r3, r7, #6
 800512c:	881c      	ldrh	r4, [r3, #0]
 800512e:	2308      	movs	r3, #8
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	230a      	movs	r3, #10
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	8819      	ldrh	r1, [r3, #0]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	0023      	movs	r3, r4
 8005146:	f000 f92f 	bl	80053a8 <I2C_RequestMemoryRead>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d005      	beq.n	800515a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2240      	movs	r2, #64	; 0x40
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0b9      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	2bff      	cmp	r3, #255	; 0xff
 8005162:	d911      	bls.n	8005188 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	22ff      	movs	r2, #255	; 0xff
 8005168:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	045c      	lsls	r4, r3, #17
 8005174:	230a      	movs	r3, #10
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	8819      	ldrh	r1, [r3, #0]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	4b56      	ldr	r3, [pc, #344]	; (80052d8 <HAL_I2C_Mem_Read+0x260>)
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	0023      	movs	r3, r4
 8005182:	f000 fac9 	bl	8005718 <I2C_TransferConfig>
 8005186:	e012      	b.n	80051ae <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	b2da      	uxtb	r2, r3
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	049c      	lsls	r4, r3, #18
 800519c:	230a      	movs	r3, #10
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	8819      	ldrh	r1, [r3, #0]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <HAL_I2C_Mem_Read+0x260>)
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	0023      	movs	r3, r4
 80051aa:	f000 fab5 	bl	8005718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	0013      	movs	r3, r2
 80051b8:	2200      	movs	r2, #0
 80051ba:	2104      	movs	r1, #4
 80051bc:	f000 f978 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 80051c0:	1e03      	subs	r3, r0, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e082      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d03a      	beq.n	800527a <HAL_I2C_Mem_Read+0x202>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d136      	bne.n	800527a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800520c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	0013      	movs	r3, r2
 8005216:	2200      	movs	r2, #0
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	f000 f949 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 800521e:	1e03      	subs	r3, r0, #0
 8005220:	d001      	beq.n	8005226 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e053      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2bff      	cmp	r3, #255	; 0xff
 800522e:	d911      	bls.n	8005254 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523a:	b2da      	uxtb	r2, r3
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	045c      	lsls	r4, r3, #17
 8005240:	230a      	movs	r3, #10
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	8819      	ldrh	r1, [r3, #0]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	0023      	movs	r3, r4
 800524e:	f000 fa63 	bl	8005718 <I2C_TransferConfig>
 8005252:	e012      	b.n	800527a <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	b2da      	uxtb	r2, r3
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	049c      	lsls	r4, r3, #18
 8005268:	230a      	movs	r3, #10
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	8819      	ldrh	r1, [r3, #0]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	2300      	movs	r3, #0
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	0023      	movs	r3, r4
 8005276:	f000 fa4f 	bl	8005718 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d194      	bne.n	80051ae <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 f98e 	bl	80055ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005290:	1e03      	subs	r3, r0, #0
 8005292:	d001      	beq.n	8005298 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e01a      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2220      	movs	r2, #32
 800529e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	490c      	ldr	r1, [pc, #48]	; (80052dc <HAL_I2C_Mem_Read+0x264>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2241      	movs	r2, #65	; 0x41
 80052b4:	2120      	movs	r1, #32
 80052b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2242      	movs	r2, #66	; 0x42
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b007      	add	sp, #28
 80052d4:	bd90      	pop	{r4, r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	80002400 	.word	0x80002400
 80052dc:	fe00e800 	.word	0xfe00e800

080052e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	000c      	movs	r4, r1
 80052ea:	0010      	movs	r0, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	250a      	movs	r5, #10
 80052f0:	197b      	adds	r3, r7, r5
 80052f2:	1c22      	adds	r2, r4, #0
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	2308      	movs	r3, #8
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	1c02      	adds	r2, r0, #0
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	1dbb      	adds	r3, r7, #6
 8005300:	1c0a      	adds	r2, r1, #0
 8005302:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	045c      	lsls	r4, r3, #17
 800530e:	197b      	adds	r3, r7, r5
 8005310:	8819      	ldrh	r1, [r3, #0]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <I2C_RequestMemoryWrite+0xc4>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	0023      	movs	r3, r4
 800531a:	f000 f9fd 	bl	8005718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0018      	movs	r0, r3
 8005326:	f000 f902 	bl	800552e <I2C_WaitOnTXISFlagUntilTimeout>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d001      	beq.n	8005332 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e033      	b.n	800539a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005332:	1dbb      	adds	r3, r7, #6
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800533a:	2308      	movs	r3, #8
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
 8005348:	e019      	b.n	800537e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800534a:	2308      	movs	r3, #8
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	b29b      	uxth	r3, r3
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	6a39      	ldr	r1, [r7, #32]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f8e3 	bl	800552e <I2C_WaitOnTXISFlagUntilTimeout>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d001      	beq.n	8005370 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e014      	b.n	800539a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005370:	2308      	movs	r3, #8
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	0013      	movs	r3, r2
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	f000 f890 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d001      	beq.n	8005398 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b004      	add	sp, #16
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	80002000 	.word	0x80002000

080053a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80053a8:	b5b0      	push	{r4, r5, r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	000c      	movs	r4, r1
 80053b2:	0010      	movs	r0, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	250a      	movs	r5, #10
 80053b8:	197b      	adds	r3, r7, r5
 80053ba:	1c22      	adds	r2, r4, #0
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	2308      	movs	r3, #8
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	1c02      	adds	r2, r0, #0
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	1dbb      	adds	r3, r7, #6
 80053c8:	1c0a      	adds	r2, r1, #0
 80053ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053cc:	1dbb      	adds	r3, r7, #6
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	197b      	adds	r3, r7, r5
 80053d4:	8819      	ldrh	r1, [r3, #0]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	4b23      	ldr	r3, [pc, #140]	; (8005468 <I2C_RequestMemoryRead+0xc0>)
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2300      	movs	r3, #0
 80053de:	f000 f99b 	bl	8005718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 f8a0 	bl	800552e <I2C_WaitOnTXISFlagUntilTimeout>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e033      	b.n	800545e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053f6:	1dbb      	adds	r3, r7, #6
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d107      	bne.n	800540e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053fe:	2308      	movs	r3, #8
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
 800540c:	e019      	b.n	8005442 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800540e:	2308      	movs	r3, #8
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	b29b      	uxth	r3, r3
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005422:	6a39      	ldr	r1, [r7, #32]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	0018      	movs	r0, r3
 8005428:	f000 f881 	bl	800552e <I2C_WaitOnTXISFlagUntilTimeout>
 800542c:	1e03      	subs	r3, r0, #0
 800542e:	d001      	beq.n	8005434 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e014      	b.n	800545e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005434:	2308      	movs	r3, #8
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	0013      	movs	r3, r2
 800544c:	2200      	movs	r2, #0
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	f000 f82e 	bl	80054b0 <I2C_WaitOnFlagUntilTimeout>
 8005454:	1e03      	subs	r3, r0, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bdb0      	pop	{r4, r5, r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	80002000 	.word	0x80002000

0800546c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2202      	movs	r2, #2
 800547c:	4013      	ands	r3, r2
 800547e:	2b02      	cmp	r3, #2
 8005480:	d103      	bne.n	800548a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2200      	movs	r2, #0
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	2b01      	cmp	r3, #1
 8005496:	d007      	beq.n	80054a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	430a      	orrs	r2, r1
 80054a6:	619a      	str	r2, [r3, #24]
  }
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c0:	e021      	b.n	8005506 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	d01e      	beq.n	8005506 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fe f810 	bl	80034ec <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d113      	bne.n	8005506 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	2220      	movs	r2, #32
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2241      	movs	r2, #65	; 0x41
 80054ee:	2120      	movs	r1, #32
 80054f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2242      	movs	r2, #66	; 0x42
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	2100      	movs	r1, #0
 8005500:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e00f      	b.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	425a      	negs	r2, r3
 8005516:	4153      	adcs	r3, r2
 8005518:	b2db      	uxtb	r3, r3
 800551a:	001a      	movs	r2, r3
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d0ce      	beq.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	0018      	movs	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	b004      	add	sp, #16
 800552c:	bd80      	pop	{r7, pc}

0800552e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800553a:	e02b      	b.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	0018      	movs	r0, r3
 8005544:	f000 f86e 	bl	8005624 <I2C_IsAcknowledgeFailed>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d001      	beq.n	8005550 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e029      	b.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3301      	adds	r3, #1
 8005554:	d01e      	beq.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd ffc9 	bl	80034ec <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d113      	bne.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	2220      	movs	r2, #32
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2241      	movs	r2, #65	; 0x41
 800557c:	2120      	movs	r1, #32
 800557e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2242      	movs	r2, #66	; 0x42
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e007      	b.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d1cc      	bne.n	800553c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b004      	add	sp, #16
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b8:	e028      	b.n	800560c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 f82f 	bl	8005624 <I2C_IsAcknowledgeFailed>
 80055c6:	1e03      	subs	r3, r0, #0
 80055c8:	d001      	beq.n	80055ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e026      	b.n	800561c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ce:	f7fd ff8d 	bl	80034ec <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	2220      	movs	r2, #32
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2241      	movs	r2, #65	; 0x41
 80055f4:	2120      	movs	r1, #32
 80055f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	; 0x42
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e007      	b.n	800561c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2220      	movs	r2, #32
 8005614:	4013      	ands	r3, r2
 8005616:	2b20      	cmp	r3, #32
 8005618:	d1cf      	bne.n	80055ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2210      	movs	r2, #16
 8005638:	4013      	ands	r3, r2
 800563a:	2b10      	cmp	r3, #16
 800563c:	d164      	bne.n	8005708 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	049b      	lsls	r3, r3, #18
 8005648:	401a      	ands	r2, r3
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	049b      	lsls	r3, r3, #18
 800564e:	429a      	cmp	r2, r3
 8005650:	d02b      	beq.n	80056aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	01c9      	lsls	r1, r1, #7
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005664:	e021      	b.n	80056aa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	3301      	adds	r3, #1
 800566a:	d01e      	beq.n	80056aa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566c:	f7fd ff3e 	bl	80034ec <HAL_GetTick>
 8005670:	0002      	movs	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <I2C_IsAcknowledgeFailed+0x5e>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d113      	bne.n	80056aa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	2220      	movs	r2, #32
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2241      	movs	r2, #65	; 0x41
 8005692:	2120      	movs	r1, #32
 8005694:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2242      	movs	r2, #66	; 0x42
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2240      	movs	r2, #64	; 0x40
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e02f      	b.n	800570a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2220      	movs	r2, #32
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d1d6      	bne.n	8005666 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2210      	movs	r2, #16
 80056be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2220      	movs	r2, #32
 80056c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	0018      	movs	r0, r3
 80056cc:	f7ff fece 	bl	800546c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	490e      	ldr	r1, [pc, #56]	; (8005714 <I2C_IsAcknowledgeFailed+0xf0>)
 80056dc:	400a      	ands	r2, r1
 80056de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	2204      	movs	r2, #4
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2241      	movs	r2, #65	; 0x41
 80056f0:	2120      	movs	r1, #32
 80056f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2242      	movs	r2, #66	; 0x42
 80056f8:	2100      	movs	r1, #0
 80056fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b004      	add	sp, #16
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	fe00e800 	.word	0xfe00e800

08005718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	0008      	movs	r0, r1
 8005722:	0011      	movs	r1, r2
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	240a      	movs	r4, #10
 8005728:	193b      	adds	r3, r7, r4
 800572a:	1c02      	adds	r2, r0, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	2009      	movs	r0, #9
 8005730:	183b      	adds	r3, r7, r0
 8005732:	1c0a      	adds	r2, r1, #0
 8005734:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	0d51      	lsrs	r1, r2, #21
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	00d2      	lsls	r2, r2, #3
 8005744:	400a      	ands	r2, r1
 8005746:	490e      	ldr	r1, [pc, #56]	; (8005780 <I2C_TransferConfig+0x68>)
 8005748:	430a      	orrs	r2, r1
 800574a:	43d2      	mvns	r2, r2
 800574c:	401a      	ands	r2, r3
 800574e:	0011      	movs	r1, r2
 8005750:	193b      	adds	r3, r7, r4
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	059b      	lsls	r3, r3, #22
 8005756:	0d9a      	lsrs	r2, r3, #22
 8005758:	183b      	adds	r3, r7, r0
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	0418      	lsls	r0, r3, #16
 800575e:	23ff      	movs	r3, #255	; 0xff
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	4003      	ands	r3, r0
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	431a      	orrs	r2, r3
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b005      	add	sp, #20
 800577c:	bd90      	pop	{r4, r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	03ff63ff 	.word	0x03ff63ff

08005784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2241      	movs	r2, #65	; 0x41
 8005792:	5c9b      	ldrb	r3, [r3, r2]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	d138      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2240      	movs	r2, #64	; 0x40
 800579e:	5c9b      	ldrb	r3, [r3, r2]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e032      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	2101      	movs	r1, #1
 80057ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2241      	movs	r2, #65	; 0x41
 80057b4:	2124      	movs	r1, #36	; 0x24
 80057b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2101      	movs	r1, #1
 80057c4:	438a      	bics	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4911      	ldr	r1, [pc, #68]	; (8005818 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80057d4:	400a      	ands	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2101      	movs	r1, #1
 80057f4:	430a      	orrs	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2241      	movs	r2, #65	; 0x41
 80057fc:	2120      	movs	r1, #32
 80057fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	2100      	movs	r1, #0
 8005806:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	ffffefff 	.word	0xffffefff

0800581c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2241      	movs	r2, #65	; 0x41
 800582a:	5c9b      	ldrb	r3, [r3, r2]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b20      	cmp	r3, #32
 8005830:	d139      	bne.n	80058a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	5c9b      	ldrb	r3, [r3, r2]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800583c:	2302      	movs	r3, #2
 800583e:	e033      	b.n	80058a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	2101      	movs	r1, #1
 8005846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2241      	movs	r2, #65	; 0x41
 800584c:	2124      	movs	r1, #36	; 0x24
 800584e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2101      	movs	r1, #1
 800585c:	438a      	bics	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2101      	movs	r1, #1
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2241      	movs	r2, #65	; 0x41
 8005896:	2120      	movs	r1, #32
 8005898:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
  }
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b004      	add	sp, #16
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	fffff0ff 	.word	0xfffff0ff

080058b4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	0049      	lsls	r1, r1, #1
 80058c2:	430a      	orrs	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]
}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40007000 	.word	0x40007000

080058d0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	000a      	movs	r2, r1
 80058da:	1cfb      	adds	r3, r7, #3
 80058dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <HAL_PWR_EnterSTOPMode+0x68>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2207      	movs	r2, #7
 80058ea:	4393      	bics	r3, r2
 80058ec:	001a      	movs	r2, r3
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <HAL_PWR_EnterSTOPMode+0x68>)
 80058f0:	2101      	movs	r1, #1
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e005      	b.n	8005904 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <HAL_PWR_EnterSTOPMode+0x68>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <HAL_PWR_EnterSTOPMode+0x68>)
 80058fe:	2107      	movs	r1, #7
 8005900:	438a      	bics	r2, r1
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <HAL_PWR_EnterSTOPMode+0x6c>)
 800590a:	2104      	movs	r1, #4
 800590c:	430a      	orrs	r2, r1
 800590e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005910:	1cfb      	adds	r3, r7, #3
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005918:	bf30      	wfi
 800591a:	e002      	b.n	8005922 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800591c:	bf40      	sev
    __WFE();
 800591e:	bf20      	wfe
    __WFE();
 8005920:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005928:	2104      	movs	r1, #4
 800592a:	438a      	bics	r2, r1
 800592c:	611a      	str	r2, [r3, #16]
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	40007000 	.word	0x40007000
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800594e:	4013      	ands	r3, r2
 8005950:	0019      	movs	r1, r3
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	430a      	orrs	r2, r1
 8005958:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	429a      	cmp	r2, r3
 8005962:	d11f      	bne.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005964:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	0013      	movs	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	189b      	adds	r3, r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4912      	ldr	r1, [pc, #72]	; (80059bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005972:	0018      	movs	r0, r3
 8005974:	f7fa fbce 	bl	8000114 <__udivsi3>
 8005978:	0003      	movs	r3, r0
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800597e:	e008      	b.n	8005992 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3b01      	subs	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e001      	b.n	8005992 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e009      	b.n	80059a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	401a      	ands	r2, r3
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d0ed      	beq.n	8005980 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	40007000 	.word	0x40007000
 80059b4:	fffff9ff 	.word	0xfffff9ff
 80059b8:	20000084 	.word	0x20000084
 80059bc:	000f4240 	.word	0x000f4240

080059c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e2f9      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	4013      	ands	r3, r2
 80059da:	d100      	bne.n	80059de <HAL_RCC_OscConfig+0x1e>
 80059dc:	e07c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059de:	4bc3      	ldr	r3, [pc, #780]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2238      	movs	r2, #56	; 0x38
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e8:	4bc0      	ldr	r3, [pc, #768]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2203      	movs	r2, #3
 80059ee:	4013      	ands	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d102      	bne.n	80059fe <HAL_RCC_OscConfig+0x3e>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d002      	beq.n	8005a04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	4bb9      	ldr	r3, [pc, #740]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	029b      	lsls	r3, r3, #10
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d062      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x116>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d15e      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e2d4      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	025b      	lsls	r3, r3, #9
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d107      	bne.n	8005a38 <HAL_RCC_OscConfig+0x78>
 8005a28:	4bb0      	ldr	r3, [pc, #704]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4baf      	ldr	r3, [pc, #700]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	0249      	lsls	r1, r1, #9
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e020      	b.n	8005a7a <HAL_RCC_OscConfig+0xba>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	23a0      	movs	r3, #160	; 0xa0
 8005a3e:	02db      	lsls	r3, r3, #11
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d10e      	bne.n	8005a62 <HAL_RCC_OscConfig+0xa2>
 8005a44:	4ba9      	ldr	r3, [pc, #676]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4ba8      	ldr	r3, [pc, #672]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	02c9      	lsls	r1, r1, #11
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	4ba6      	ldr	r3, [pc, #664]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4ba5      	ldr	r3, [pc, #660]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	0249      	lsls	r1, r1, #9
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e00b      	b.n	8005a7a <HAL_RCC_OscConfig+0xba>
 8005a62:	4ba2      	ldr	r3, [pc, #648]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4ba1      	ldr	r3, [pc, #644]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a68:	49a1      	ldr	r1, [pc, #644]	; (8005cf0 <HAL_RCC_OscConfig+0x330>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	4b9f      	ldr	r3, [pc, #636]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b9e      	ldr	r3, [pc, #632]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005a74:	499f      	ldr	r1, [pc, #636]	; (8005cf4 <HAL_RCC_OscConfig+0x334>)
 8005a76:	400a      	ands	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d014      	beq.n	8005aac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a82:	f7fd fd33 	bl	80034ec <HAL_GetTick>
 8005a86:	0003      	movs	r3, r0
 8005a88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fd fd2e 	bl	80034ec <HAL_GetTick>
 8005a90:	0002      	movs	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e293      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a9e:	4b93      	ldr	r3, [pc, #588]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0xcc>
 8005aaa:	e015      	b.n	8005ad8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fd fd1e 	bl	80034ec <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab6:	f7fd fd19 	bl	80034ec <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	; 0x64
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e27e      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ac8:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0xf6>
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d100      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x124>
 8005ae2:	e099      	b.n	8005c18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae4:	4b81      	ldr	r3, [pc, #516]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2238      	movs	r2, #56	; 0x38
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aee:	4b7f      	ldr	r3, [pc, #508]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2203      	movs	r2, #3
 8005af4:	4013      	ands	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_OscConfig+0x144>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d002      	beq.n	8005b0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d135      	bne.n	8005b76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b0a:	4b78      	ldr	r3, [pc, #480]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4013      	ands	r3, r2
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x162>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e251      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b72      	ldr	r3, [pc, #456]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a74      	ldr	r2, [pc, #464]	; (8005cf8 <HAL_RCC_OscConfig+0x338>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d112      	bne.n	8005b64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b3e:	4b6b      	ldr	r3, [pc, #428]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6e      	ldr	r2, [pc, #440]	; (8005cfc <HAL_RCC_OscConfig+0x33c>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	0019      	movs	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	4b67      	ldr	r3, [pc, #412]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005b52:	4b66      	ldr	r3, [pc, #408]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	2207      	movs	r2, #7
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	4a68      	ldr	r2, [pc, #416]	; (8005d00 <HAL_RCC_OscConfig+0x340>)
 8005b5e:	40da      	lsrs	r2, r3
 8005b60:	4b68      	ldr	r3, [pc, #416]	; (8005d04 <HAL_RCC_OscConfig+0x344>)
 8005b62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b64:	4b68      	ldr	r3, [pc, #416]	; (8005d08 <HAL_RCC_OscConfig+0x348>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f7fd fc63 	bl	8003434 <HAL_InitTick>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d051      	beq.n	8005c16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e227      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d030      	beq.n	8005be0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b7e:	4b5b      	ldr	r3, [pc, #364]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5e      	ldr	r2, [pc, #376]	; (8005cfc <HAL_RCC_OscConfig+0x33c>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	4b57      	ldr	r3, [pc, #348]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005b92:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b55      	ldr	r3, [pc, #340]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	0049      	lsls	r1, r1, #1
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fca4 	bl	80034ec <HAL_GetTick>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fd fc9f 	bl	80034ec <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e204      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bbc:	4b4b      	ldr	r3, [pc, #300]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b48      	ldr	r3, [pc, #288]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a4a      	ldr	r2, [pc, #296]	; (8005cf8 <HAL_RCC_OscConfig+0x338>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	4b44      	ldr	r3, [pc, #272]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e01b      	b.n	8005c18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005be0:	4b42      	ldr	r3, [pc, #264]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005be6:	4949      	ldr	r1, [pc, #292]	; (8005d0c <HAL_RCC_OscConfig+0x34c>)
 8005be8:	400a      	ands	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd fc7e 	bl	80034ec <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf6:	f7fd fc79 	bl	80034ec <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e1de      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c08:	4b38      	ldr	r3, [pc, #224]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4013      	ands	r3, r2
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x236>
 8005c14:	e000      	b.n	8005c18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d047      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c22:	4b32      	ldr	r3, [pc, #200]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2238      	movs	r2, #56	; 0x38
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b18      	cmp	r3, #24
 8005c2c:	d10a      	bne.n	8005c44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005c2e:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c32:	2202      	movs	r2, #2
 8005c34:	4013      	ands	r3, r2
 8005c36:	d03c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d138      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e1c0      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d019      	beq.n	8005c80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c50:	4b26      	ldr	r3, [pc, #152]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c52:	2101      	movs	r1, #1
 8005c54:	430a      	orrs	r2, r1
 8005c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fd fc48 	bl	80034ec <HAL_GetTick>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fd fc43 	bl	80034ec <HAL_GetTick>
 8005c66:	0002      	movs	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e1a8      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c74:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d0f1      	beq.n	8005c62 <HAL_RCC_OscConfig+0x2a2>
 8005c7e:	e018      	b.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005c80:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c84:	4b19      	ldr	r3, [pc, #100]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005c86:	2101      	movs	r1, #1
 8005c88:	438a      	bics	r2, r1
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fd fc2e 	bl	80034ec <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c96:	f7fd fc29 	bl	80034ec <HAL_GetTick>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e18e      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ca8:	4b10      	ldr	r3, [pc, #64]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cac:	2202      	movs	r2, #2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d1f1      	bne.n	8005c96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d100      	bne.n	8005cbe <HAL_RCC_OscConfig+0x2fe>
 8005cbc:	e0c6      	b.n	8005e4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cbe:	231f      	movs	r3, #31
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2238      	movs	r2, #56	; 0x38
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d11e      	bne.n	8005d10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCC_OscConfig+0x32c>)
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d100      	bne.n	8005cde <HAL_RCC_OscConfig+0x31e>
 8005cdc:	e0b6      	b.n	8005e4c <HAL_RCC_OscConfig+0x48c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d000      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x328>
 8005ce6:	e0b1      	b.n	8005e4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e16c      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	fffeffff 	.word	0xfffeffff
 8005cf4:	fffbffff 	.word	0xfffbffff
 8005cf8:	ffff80ff 	.word	0xffff80ff
 8005cfc:	ffffc7ff 	.word	0xffffc7ff
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	20000084 	.word	0x20000084
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d10:	4baf      	ldr	r3, [pc, #700]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	055b      	lsls	r3, r3, #21
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_OscConfig+0x360>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_OscConfig+0x362>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d26:	4baa      	ldr	r3, [pc, #680]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2a:	4ba9      	ldr	r3, [pc, #676]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d2c:	2180      	movs	r1, #128	; 0x80
 8005d2e:	0549      	lsls	r1, r1, #21
 8005d30:	430a      	orrs	r2, r1
 8005d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d34:	4ba6      	ldr	r3, [pc, #664]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	055b      	lsls	r3, r3, #21
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005d42:	231f      	movs	r3, #31
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4a:	4ba2      	ldr	r3, [pc, #648]	; (8005fd4 <HAL_RCC_OscConfig+0x614>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4013      	ands	r3, r2
 8005d54:	d11a      	bne.n	8005d8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d56:	4b9f      	ldr	r3, [pc, #636]	; (8005fd4 <HAL_RCC_OscConfig+0x614>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b9e      	ldr	r3, [pc, #632]	; (8005fd4 <HAL_RCC_OscConfig+0x614>)
 8005d5c:	2180      	movs	r1, #128	; 0x80
 8005d5e:	0049      	lsls	r1, r1, #1
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005d64:	f7fd fbc2 	bl	80034ec <HAL_GetTick>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fd fbbd 	bl	80034ec <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e122      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d80:	4b94      	ldr	r3, [pc, #592]	; (8005fd4 <HAL_RCC_OscConfig+0x614>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3e2>
 8005d94:	4b8e      	ldr	r3, [pc, #568]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d98:	4b8d      	ldr	r3, [pc, #564]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da0:	e01c      	b.n	8005ddc <HAL_RCC_OscConfig+0x41c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x404>
 8005daa:	4b89      	ldr	r3, [pc, #548]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dae:	4b88      	ldr	r3, [pc, #544]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005db0:	2104      	movs	r1, #4
 8005db2:	430a      	orrs	r2, r1
 8005db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005db6:	4b86      	ldr	r3, [pc, #536]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dba:	4b85      	ldr	r3, [pc, #532]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc2:	e00b      	b.n	8005ddc <HAL_RCC_OscConfig+0x41c>
 8005dc4:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dc8:	4b81      	ldr	r3, [pc, #516]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	438a      	bics	r2, r1
 8005dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dd0:	4b7f      	ldr	r3, [pc, #508]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd4:	4b7e      	ldr	r3, [pc, #504]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	438a      	bics	r2, r1
 8005dda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d014      	beq.n	8005e0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fd fb82 	bl	80034ec <HAL_GetTick>
 8005de8:	0003      	movs	r3, r0
 8005dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dec:	e009      	b.n	8005e02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fd fb7d 	bl	80034ec <HAL_GetTick>
 8005df2:	0002      	movs	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	4a77      	ldr	r2, [pc, #476]	; (8005fd8 <HAL_RCC_OscConfig+0x618>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e0e1      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	4b73      	ldr	r3, [pc, #460]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	2202      	movs	r2, #2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x42e>
 8005e0c:	e013      	b.n	8005e36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fd fb6d 	bl	80034ec <HAL_GetTick>
 8005e12:	0003      	movs	r3, r0
 8005e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e16:	e009      	b.n	8005e2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e18:	f7fd fb68 	bl	80034ec <HAL_GetTick>
 8005e1c:	0002      	movs	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a6d      	ldr	r2, [pc, #436]	; (8005fd8 <HAL_RCC_OscConfig+0x618>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e2c:	4b68      	ldr	r3, [pc, #416]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	2202      	movs	r2, #2
 8005e32:	4013      	ands	r3, r2
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e36:	231f      	movs	r3, #31
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e40:	4b63      	ldr	r3, [pc, #396]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e44:	4b62      	ldr	r3, [pc, #392]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e46:	4965      	ldr	r1, [pc, #404]	; (8005fdc <HAL_RCC_OscConfig+0x61c>)
 8005e48:	400a      	ands	r2, r1
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d100      	bne.n	8005e56 <HAL_RCC_OscConfig+0x496>
 8005e54:	e0b6      	b.n	8005fc4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e56:	4b5e      	ldr	r3, [pc, #376]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2238      	movs	r2, #56	; 0x38
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d100      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4a4>
 8005e62:	e07e      	b.n	8005f62 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d153      	bne.n	8005f14 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6c:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e72:	495b      	ldr	r1, [pc, #364]	; (8005fe0 <HAL_RCC_OscConfig+0x620>)
 8005e74:	400a      	ands	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fd fb38 	bl	80034ec <HAL_GetTick>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e82:	f7fd fb33 	bl	80034ec <HAL_GetTick>
 8005e86:	0002      	movs	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e098      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e94:	4b4e      	ldr	r3, [pc, #312]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	049b      	lsls	r3, r3, #18
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea0:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a4f      	ldr	r2, [pc, #316]	; (8005fe4 <HAL_RCC_OscConfig+0x624>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ece:	4b40      	ldr	r3, [pc, #256]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b3f      	ldr	r3, [pc, #252]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005ed4:	2180      	movs	r1, #128	; 0x80
 8005ed6:	0449      	lsls	r1, r1, #17
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005edc:	4b3c      	ldr	r3, [pc, #240]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	0549      	lsls	r1, r1, #21
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fd faff 	bl	80034ec <HAL_GetTick>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef4:	f7fd fafa 	bl	80034ec <HAL_GetTick>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e05f      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f06:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	049b      	lsls	r3, r3, #18
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x534>
 8005f12:	e057      	b.n	8005fc4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f14:	4b2e      	ldr	r3, [pc, #184]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f1a:	4931      	ldr	r1, [pc, #196]	; (8005fe0 <HAL_RCC_OscConfig+0x620>)
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f26:	2103      	movs	r1, #3
 8005f28:	438a      	bics	r2, r1
 8005f2a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f32:	492d      	ldr	r1, [pc, #180]	; (8005fe8 <HAL_RCC_OscConfig+0x628>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fd fad8 	bl	80034ec <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fd fad3 	bl	80034ec <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e038      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f54:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	049b      	lsls	r3, r3, #18
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x582>
 8005f60:	e030      	b.n	8005fc4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e02b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005f6e:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <HAL_RCC_OscConfig+0x610>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2203      	movs	r2, #3
 8005f78:	401a      	ands	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d11e      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2270      	movs	r2, #112	; 0x70
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d117      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	23fe      	movs	r3, #254	; 0xfe
 8005f94:	01db      	lsls	r3, r3, #7
 8005f96:	401a      	ands	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	23f8      	movs	r3, #248	; 0xf8
 8005fa6:	039b      	lsls	r3, r3, #14
 8005fa8:	401a      	ands	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	0f5b      	lsrs	r3, r3, #29
 8005fb6:	075a      	lsls	r2, r3, #29
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b008      	add	sp, #32
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40007000 	.word	0x40007000
 8005fd8:	00001388 	.word	0x00001388
 8005fdc:	efffffff 	.word	0xefffffff
 8005fe0:	feffffff 	.word	0xfeffffff
 8005fe4:	1fc1808c 	.word	0x1fc1808c
 8005fe8:	effeffff 	.word	0xeffeffff

08005fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0e9      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006000:	4b76      	ldr	r3, [pc, #472]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2207      	movs	r2, #7
 8006006:	4013      	ands	r3, r2
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d91e      	bls.n	800604c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600e:	4b73      	ldr	r3, [pc, #460]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2207      	movs	r2, #7
 8006014:	4393      	bics	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	4b70      	ldr	r3, [pc, #448]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006020:	f7fd fa64 	bl	80034ec <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006028:	e009      	b.n	800603e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602a:	f7fd fa5f 	bl	80034ec <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	4a6a      	ldr	r2, [pc, #424]	; (80061e0 <HAL_RCC_ClockConfig+0x1f4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e0ca      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800603e:	4b67      	ldr	r3, [pc, #412]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2207      	movs	r2, #7
 8006044:	4013      	ands	r3, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d1ee      	bne.n	800602a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2202      	movs	r2, #2
 8006052:	4013      	ands	r3, r2
 8006054:	d015      	beq.n	8006082 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2204      	movs	r2, #4
 800605c:	4013      	ands	r3, r2
 800605e:	d006      	beq.n	800606e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006060:	4b60      	ldr	r3, [pc, #384]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4b5f      	ldr	r3, [pc, #380]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006066:	21e0      	movs	r1, #224	; 0xe0
 8006068:	01c9      	lsls	r1, r1, #7
 800606a:	430a      	orrs	r2, r1
 800606c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800606e:	4b5d      	ldr	r3, [pc, #372]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4a5d      	ldr	r2, [pc, #372]	; (80061e8 <HAL_RCC_ClockConfig+0x1fc>)
 8006074:	4013      	ands	r3, r2
 8006076:	0019      	movs	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	4b59      	ldr	r3, [pc, #356]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d057      	beq.n	800613c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006094:	4b53      	ldr	r3, [pc, #332]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	029b      	lsls	r3, r3, #10
 800609c:	4013      	ands	r3, r2
 800609e:	d12b      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e097      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ac:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	049b      	lsls	r3, r3, #18
 80060b4:	4013      	ands	r3, r2
 80060b6:	d11f      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e08b      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c4:	4b47      	ldr	r3, [pc, #284]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4013      	ands	r3, r2
 80060ce:	d113      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e07f      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d106      	bne.n	80060ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060dc:	4b41      	ldr	r3, [pc, #260]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80060de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e0:	2202      	movs	r2, #2
 80060e2:	4013      	ands	r3, r2
 80060e4:	d108      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e074      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ea:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ee:	2202      	movs	r2, #2
 80060f0:	4013      	ands	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e06d      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060f8:	4b3a      	ldr	r3, [pc, #232]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2207      	movs	r2, #7
 80060fe:	4393      	bics	r3, r2
 8006100:	0019      	movs	r1, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4b37      	ldr	r3, [pc, #220]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610c:	f7fd f9ee 	bl	80034ec <HAL_GetTick>
 8006110:	0003      	movs	r3, r0
 8006112:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006114:	e009      	b.n	800612a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006116:	f7fd f9e9 	bl	80034ec <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <HAL_RCC_ClockConfig+0x1f4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e054      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2238      	movs	r2, #56	; 0x38
 8006130:	401a      	ands	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	429a      	cmp	r2, r3
 800613a:	d1ec      	bne.n	8006116 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2207      	movs	r2, #7
 8006142:	4013      	ands	r3, r2
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d21e      	bcs.n	8006188 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b24      	ldr	r3, [pc, #144]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2207      	movs	r2, #7
 8006150:	4393      	bics	r3, r2
 8006152:	0019      	movs	r1, r3
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800615c:	f7fd f9c6 	bl	80034ec <HAL_GetTick>
 8006160:	0003      	movs	r3, r0
 8006162:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006164:	e009      	b.n	800617a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006166:	f7fd f9c1 	bl	80034ec <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_RCC_ClockConfig+0x1f4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e02c      	b.n	80061d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <HAL_RCC_ClockConfig+0x1f0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2207      	movs	r2, #7
 8006180:	4013      	ands	r3, r2
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d1ee      	bne.n	8006166 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2204      	movs	r2, #4
 800618e:	4013      	ands	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	4a15      	ldr	r2, [pc, #84]	; (80061ec <HAL_RCC_ClockConfig+0x200>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80061a6:	f000 f829 	bl	80061fc <HAL_RCC_GetSysClockFreq>
 80061aa:	0001      	movs	r1, r0
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_RCC_ClockConfig+0x1f8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	220f      	movs	r2, #15
 80061b4:	401a      	ands	r2, r3
 80061b6:	4b0e      	ldr	r3, [pc, #56]	; (80061f0 <HAL_RCC_ClockConfig+0x204>)
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	58d3      	ldr	r3, [r2, r3]
 80061bc:	221f      	movs	r2, #31
 80061be:	4013      	ands	r3, r2
 80061c0:	000a      	movs	r2, r1
 80061c2:	40da      	lsrs	r2, r3
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_RCC_ClockConfig+0x208>)
 80061c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_RCC_ClockConfig+0x20c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	0018      	movs	r0, r3
 80061ce:	f7fd f931 	bl	8003434 <HAL_InitTick>
 80061d2:	0003      	movs	r3, r0
}
 80061d4:	0018      	movs	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b004      	add	sp, #16
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40022000 	.word	0x40022000
 80061e0:	00001388 	.word	0x00001388
 80061e4:	40021000 	.word	0x40021000
 80061e8:	fffff0ff 	.word	0xfffff0ff
 80061ec:	ffff8fff 	.word	0xffff8fff
 80061f0:	080161d0 	.word	0x080161d0
 80061f4:	20000084 	.word	0x20000084
 80061f8:	20000000 	.word	0x20000000

080061fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006202:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2238      	movs	r2, #56	; 0x38
 8006208:	4013      	ands	r3, r2
 800620a:	d10f      	bne.n	800622c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800620c:	4b39      	ldr	r3, [pc, #228]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	0adb      	lsrs	r3, r3, #11
 8006212:	2207      	movs	r2, #7
 8006214:	4013      	ands	r3, r2
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
 800621a:	0013      	movs	r3, r2
 800621c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	4835      	ldr	r0, [pc, #212]	; (80062f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006222:	f7f9 ff77 	bl	8000114 <__udivsi3>
 8006226:	0003      	movs	r3, r0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	e05d      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800622c:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2238      	movs	r2, #56	; 0x38
 8006232:	4013      	ands	r3, r2
 8006234:	2b08      	cmp	r3, #8
 8006236:	d102      	bne.n	800623e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006238:	4b30      	ldr	r3, [pc, #192]	; (80062fc <HAL_RCC_GetSysClockFreq+0x100>)
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	e054      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800623e:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2238      	movs	r2, #56	; 0x38
 8006244:	4013      	ands	r3, r2
 8006246:	2b10      	cmp	r3, #16
 8006248:	d138      	bne.n	80062bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2203      	movs	r2, #3
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	2207      	movs	r2, #7
 800625c:	4013      	ands	r3, r2
 800625e:	3301      	adds	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d10d      	bne.n	8006284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4824      	ldr	r0, [pc, #144]	; (80062fc <HAL_RCC_GetSysClockFreq+0x100>)
 800626c:	f7f9 ff52 	bl	8000114 <__udivsi3>
 8006270:	0003      	movs	r3, r0
 8006272:	0019      	movs	r1, r3
 8006274:	4b1f      	ldr	r3, [pc, #124]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	227f      	movs	r2, #127	; 0x7f
 800627c:	4013      	ands	r3, r2
 800627e:	434b      	muls	r3, r1
 8006280:	617b      	str	r3, [r7, #20]
        break;
 8006282:	e00d      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	481c      	ldr	r0, [pc, #112]	; (80062f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006288:	f7f9 ff44 	bl	8000114 <__udivsi3>
 800628c:	0003      	movs	r3, r0
 800628e:	0019      	movs	r1, r3
 8006290:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	0a1b      	lsrs	r3, r3, #8
 8006296:	227f      	movs	r2, #127	; 0x7f
 8006298:	4013      	ands	r3, r2
 800629a:	434b      	muls	r3, r1
 800629c:	617b      	str	r3, [r7, #20]
        break;
 800629e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0f5b      	lsrs	r3, r3, #29
 80062a6:	2207      	movs	r2, #7
 80062a8:	4013      	ands	r3, r2
 80062aa:	3301      	adds	r3, #1
 80062ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	f7f9 ff2f 	bl	8000114 <__udivsi3>
 80062b6:	0003      	movs	r3, r0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e015      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2238      	movs	r2, #56	; 0x38
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d103      	bne.n	80062d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2238      	movs	r2, #56	; 0x38
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b18      	cmp	r3, #24
 80062da:	d103      	bne.n	80062e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80062dc:	23fa      	movs	r3, #250	; 0xfa
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	e001      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062e8:	693b      	ldr	r3, [r7, #16]
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b006      	add	sp, #24
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	40021000 	.word	0x40021000
 80062f8:	00f42400 	.word	0x00f42400
 80062fc:	007a1200 	.word	0x007a1200

08006300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006308:	2313      	movs	r3, #19
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006310:	2312      	movs	r3, #18
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	4013      	ands	r3, r2
 8006322:	d100      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006324:	e0a3      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006326:	2011      	movs	r0, #17
 8006328:	183b      	adds	r3, r7, r0
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800632e:	4b86      	ldr	r3, [pc, #536]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006332:	2380      	movs	r3, #128	; 0x80
 8006334:	055b      	lsls	r3, r3, #21
 8006336:	4013      	ands	r3, r2
 8006338:	d110      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800633a:	4b83      	ldr	r3, [pc, #524]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800633c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633e:	4b82      	ldr	r3, [pc, #520]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	0549      	lsls	r1, r1, #21
 8006344:	430a      	orrs	r2, r1
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c
 8006348:	4b7f      	ldr	r3, [pc, #508]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	055b      	lsls	r3, r3, #21
 8006350:	4013      	ands	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006356:	183b      	adds	r3, r7, r0
 8006358:	2201      	movs	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800635c:	4b7b      	ldr	r3, [pc, #492]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b7a      	ldr	r3, [pc, #488]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0049      	lsls	r1, r1, #1
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800636a:	f7fd f8bf 	bl	80034ec <HAL_GetTick>
 800636e:	0003      	movs	r3, r0
 8006370:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006372:	e00b      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006374:	f7fd f8ba 	bl	80034ec <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d904      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006382:	2313      	movs	r3, #19
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	2203      	movs	r2, #3
 8006388:	701a      	strb	r2, [r3, #0]
        break;
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638c:	4b6f      	ldr	r3, [pc, #444]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	4013      	ands	r3, r2
 8006396:	d0ed      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006398:	2313      	movs	r3, #19
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d154      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063a2:	4b69      	ldr	r3, [pc, #420]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063a6:	23c0      	movs	r3, #192	; 0xc0
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4013      	ands	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d019      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d014      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063be:	4b62      	ldr	r3, [pc, #392]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	4a63      	ldr	r2, [pc, #396]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063c8:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063cc:	4b5e      	ldr	r3, [pc, #376]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	0249      	lsls	r1, r1, #9
 80063d2:	430a      	orrs	r2, r1
 80063d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063d6:	4b5c      	ldr	r3, [pc, #368]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063da:	4b5b      	ldr	r3, [pc, #364]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063dc:	495d      	ldr	r1, [pc, #372]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063de:	400a      	ands	r2, r1
 80063e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063e2:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2201      	movs	r2, #1
 80063ec:	4013      	ands	r3, r2
 80063ee:	d016      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fd f87c 	bl	80034ec <HAL_GetTick>
 80063f4:	0003      	movs	r3, r0
 80063f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f8:	e00c      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fa:	f7fd f877 	bl	80034ec <HAL_GetTick>
 80063fe:	0002      	movs	r2, r0
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	4a54      	ldr	r2, [pc, #336]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d904      	bls.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800640a:	2313      	movs	r3, #19
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	2203      	movs	r2, #3
 8006410:	701a      	strb	r2, [r3, #0]
            break;
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006414:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	2202      	movs	r2, #2
 800641a:	4013      	ands	r3, r2
 800641c:	d0ed      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800641e:	2313      	movs	r3, #19
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006428:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	4a48      	ldr	r2, [pc, #288]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800642e:	4013      	ands	r3, r2
 8006430:	0019      	movs	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	4b44      	ldr	r3, [pc, #272]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006438:	430a      	orrs	r2, r1
 800643a:	65da      	str	r2, [r3, #92]	; 0x5c
 800643c:	e00c      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800643e:	2312      	movs	r3, #18
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	2213      	movs	r2, #19
 8006444:	18ba      	adds	r2, r7, r2
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e005      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	2312      	movs	r3, #18
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	2213      	movs	r2, #19
 8006452:	18ba      	adds	r2, r7, r2
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006458:	2311      	movs	r3, #17
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006466:	4b38      	ldr	r3, [pc, #224]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006468:	493c      	ldr	r1, [pc, #240]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800646a:	400a      	ands	r2, r1
 800646c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	4013      	ands	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	2203      	movs	r2, #3
 800647e:	4393      	bics	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006488:	430a      	orrs	r2, r1
 800648a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2202      	movs	r2, #2
 8006492:	4013      	ands	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006496:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	220c      	movs	r2, #12
 800649c:	4393      	bics	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	4b28      	ldr	r3, [pc, #160]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064a6:	430a      	orrs	r2, r1
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2220      	movs	r2, #32
 80064b0:	4013      	ands	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	4a29      	ldr	r2, [pc, #164]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	0019      	movs	r1, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	4b21      	ldr	r3, [pc, #132]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064c4:	430a      	orrs	r2, r1
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	01db      	lsls	r3, r3, #7
 80064d0:	4013      	ands	r3, r2
 80064d2:	d015      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064d4:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	0899      	lsrs	r1, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064e2:	430a      	orrs	r2, r1
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	05db      	lsls	r3, r3, #23
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	0249      	lsls	r1, r1, #9
 80064fc:	430a      	orrs	r2, r1
 80064fe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	4013      	ands	r3, r2
 800650a:	d016      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	4a14      	ldr	r2, [pc, #80]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800651c:	430a      	orrs	r2, r1
 800651e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	01db      	lsls	r3, r3, #7
 8006528:	429a      	cmp	r2, r3
 800652a:	d106      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	0249      	lsls	r1, r1, #9
 8006536:	430a      	orrs	r2, r1
 8006538:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800653a:	2312      	movs	r3, #18
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	781b      	ldrb	r3, [r3, #0]
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b006      	add	sp, #24
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40021000 	.word	0x40021000
 800654c:	40007000 	.word	0x40007000
 8006550:	fffffcff 	.word	0xfffffcff
 8006554:	fffeffff 	.word	0xfffeffff
 8006558:	00001388 	.word	0x00001388
 800655c:	efffffff 	.word	0xefffffff
 8006560:	ffffcfff 	.word	0xffffcfff
 8006564:	ffff3fff 	.word	0xffff3fff

08006568 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006568:	b5b0      	push	{r4, r5, r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006570:	230f      	movs	r3, #15
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d100      	bne.n	8006580 <HAL_RTC_Init+0x18>
 800657e:	e080      	b.n	8006682 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2229      	movs	r2, #41	; 0x29
 8006584:	5c9b      	ldrb	r3, [r3, r2]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2228      	movs	r2, #40	; 0x28
 8006590:	2100      	movs	r1, #0
 8006592:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2288      	movs	r2, #136	; 0x88
 8006598:	0212      	lsls	r2, r2, #8
 800659a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0018      	movs	r0, r3
 80065a0:	f00a f93c 	bl	801081c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2229      	movs	r2, #41	; 0x29
 80065a8:	2102      	movs	r1, #2
 80065aa:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	22ca      	movs	r2, #202	; 0xca
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2253      	movs	r2, #83	; 0x53
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80065bc:	250f      	movs	r5, #15
 80065be:	197c      	adds	r4, r7, r5
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	0018      	movs	r0, r3
 80065c4:	f000 fa71 	bl	8006aaa <RTC_EnterInitMode>
 80065c8:	0003      	movs	r3, r0
 80065ca:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80065cc:	0028      	movs	r0, r5
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d148      	bne.n	8006668 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	492b      	ldr	r1, [pc, #172]	; (8006690 <HAL_RTC_Init+0x128>)
 80065e2:	400a      	ands	r2, r1
 80065e4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6999      	ldr	r1, [r3, #24]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6912      	ldr	r2, [r2, #16]
 800660c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6919      	ldr	r1, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	041a      	lsls	r2, r3, #16
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006622:	0005      	movs	r5, r0
 8006624:	183c      	adds	r4, r7, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f000 fa81 	bl	8006b30 <RTC_ExitInitMode>
 800662e:	0003      	movs	r3, r0
 8006630:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006632:	197b      	adds	r3, r7, r5
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d116      	bne.n	8006668 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	00d2      	lsls	r2, r2, #3
 8006646:	08d2      	lsrs	r2, r2, #3
 8006648:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6999      	ldr	r1, [r3, #24]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	22ff      	movs	r2, #255	; 0xff
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006670:	230f      	movs	r3, #15
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2229      	movs	r2, #41	; 0x29
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006682:	230f      	movs	r3, #15
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	781b      	ldrb	r3, [r3, #0]
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b004      	add	sp, #16
 800668e:	bdb0      	pop	{r4, r5, r7, pc}
 8006690:	fb8fffbf 	.word	0xfb8fffbf

08006694 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006694:	b5b0      	push	{r4, r5, r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2228      	movs	r2, #40	; 0x28
 80066a4:	5c9b      	ldrb	r3, [r3, r2]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_RTC_SetTime+0x1a>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e092      	b.n	80067d4 <HAL_RTC_SetTime+0x140>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2228      	movs	r2, #40	; 0x28
 80066b2:	2101      	movs	r1, #1
 80066b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2229      	movs	r2, #41	; 0x29
 80066ba:	2102      	movs	r1, #2
 80066bc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	22ca      	movs	r2, #202	; 0xca
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2253      	movs	r2, #83	; 0x53
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066ce:	2513      	movs	r5, #19
 80066d0:	197c      	adds	r4, r7, r5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 f9e8 	bl	8006aaa <RTC_EnterInitMode>
 80066da:	0003      	movs	r3, r0
 80066dc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80066de:	197b      	adds	r3, r7, r5
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d162      	bne.n	80067ac <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d125      	bne.n	8006738 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2240      	movs	r2, #64	; 0x40
 80066f4:	4013      	ands	r3, r2
 80066f6:	d102      	bne.n	80066fe <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 fa58 	bl	8006bb8 <RTC_ByteToBcd2>
 8006708:	0003      	movs	r3, r0
 800670a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	0018      	movs	r0, r3
 8006712:	f000 fa51 	bl	8006bb8 <RTC_ByteToBcd2>
 8006716:	0003      	movs	r3, r0
 8006718:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800671a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	789b      	ldrb	r3, [r3, #2]
 8006720:	0018      	movs	r0, r3
 8006722:	f000 fa49 	bl	8006bb8 <RTC_ByteToBcd2>
 8006726:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006728:	0022      	movs	r2, r4
 800672a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e017      	b.n	8006768 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	4013      	ands	r3, r2
 8006742:	d102      	bne.n	800674a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006756:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800675c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	491b      	ldr	r1, [pc, #108]	; (80067dc <HAL_RTC_SetTime+0x148>)
 8006770:	400a      	ands	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4918      	ldr	r1, [pc, #96]	; (80067e0 <HAL_RTC_SetTime+0x14c>)
 8006780:	400a      	ands	r2, r1
 8006782:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6999      	ldr	r1, [r3, #24]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	431a      	orrs	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800679c:	2313      	movs	r3, #19
 800679e:	18fc      	adds	r4, r7, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 f9c4 	bl	8006b30 <RTC_ExitInitMode>
 80067a8:	0003      	movs	r3, r0
 80067aa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	22ff      	movs	r2, #255	; 0xff
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80067b4:	2313      	movs	r3, #19
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2229      	movs	r2, #41	; 0x29
 80067c2:	2101      	movs	r1, #1
 80067c4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2228      	movs	r2, #40	; 0x28
 80067ca:	2100      	movs	r1, #0
 80067cc:	5499      	strb	r1, [r3, r2]

  return status;
 80067ce:	2313      	movs	r3, #19
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	781b      	ldrb	r3, [r3, #0]
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b006      	add	sp, #24
 80067da:	bdb0      	pop	{r4, r5, r7, pc}
 80067dc:	007f7f7f 	.word	0x007f7f7f
 80067e0:	fffbffff 	.word	0xfffbffff

080067e4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	045b      	lsls	r3, r3, #17
 8006802:	0c5a      	lsrs	r2, r3, #17
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <HAL_RTC_GetTime+0xb4>)
 8006810:	4013      	ands	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	0c1b      	lsrs	r3, r3, #16
 8006818:	b2db      	uxtb	r3, r3
 800681a:	223f      	movs	r2, #63	; 0x3f
 800681c:	4013      	ands	r3, r2
 800681e:	b2da      	uxtb	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	b2db      	uxtb	r3, r3
 800682a:	227f      	movs	r2, #127	; 0x7f
 800682c:	4013      	ands	r3, r2
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	227f      	movs	r2, #127	; 0x7f
 800683a:	4013      	ands	r3, r2
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	0d9b      	lsrs	r3, r3, #22
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2201      	movs	r2, #1
 800684a:	4013      	ands	r3, r2
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11a      	bne.n	800688e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	0018      	movs	r0, r3
 800685e:	f000 f9d3 	bl	8006c08 <RTC_Bcd2ToByte>
 8006862:	0003      	movs	r3, r0
 8006864:	001a      	movs	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	0018      	movs	r0, r3
 8006870:	f000 f9ca 	bl	8006c08 <RTC_Bcd2ToByte>
 8006874:	0003      	movs	r3, r0
 8006876:	001a      	movs	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	789b      	ldrb	r3, [r3, #2]
 8006880:	0018      	movs	r0, r3
 8006882:	f000 f9c1 	bl	8006c08 <RTC_Bcd2ToByte>
 8006886:	0003      	movs	r3, r0
 8006888:	001a      	movs	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	b006      	add	sp, #24
 8006896:	bd80      	pop	{r7, pc}
 8006898:	007f7f7f 	.word	0x007f7f7f

0800689c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2228      	movs	r2, #40	; 0x28
 80068ac:	5c9b      	ldrb	r3, [r3, r2]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_RTC_SetDate+0x1a>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e07e      	b.n	80069b4 <HAL_RTC_SetDate+0x118>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2228      	movs	r2, #40	; 0x28
 80068ba:	2101      	movs	r1, #1
 80068bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2229      	movs	r2, #41	; 0x29
 80068c2:	2102      	movs	r1, #2
 80068c4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10e      	bne.n	80068ea <HAL_RTC_SetDate+0x4e>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	001a      	movs	r2, r3
 80068d2:	2310      	movs	r3, #16
 80068d4:	4013      	ands	r3, r2
 80068d6:	d008      	beq.n	80068ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2210      	movs	r2, #16
 80068de:	4393      	bics	r3, r2
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	330a      	adds	r3, #10
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11c      	bne.n	800692a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	78db      	ldrb	r3, [r3, #3]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 f95f 	bl	8006bb8 <RTC_ByteToBcd2>
 80068fa:	0003      	movs	r3, r0
 80068fc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	0018      	movs	r0, r3
 8006904:	f000 f958 	bl	8006bb8 <RTC_ByteToBcd2>
 8006908:	0003      	movs	r3, r0
 800690a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800690c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	789b      	ldrb	r3, [r3, #2]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f950 	bl	8006bb8 <RTC_ByteToBcd2>
 8006918:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800691a:	0022      	movs	r2, r4
 800691c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e00e      	b.n	8006948 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	78db      	ldrb	r3, [r3, #3]
 800692e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006936:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800693c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	22ca      	movs	r2, #202	; 0xca
 800694e:	625a      	str	r2, [r3, #36]	; 0x24
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2253      	movs	r2, #83	; 0x53
 8006956:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006958:	2513      	movs	r5, #19
 800695a:	197c      	adds	r4, r7, r5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	0018      	movs	r0, r3
 8006960:	f000 f8a3 	bl	8006aaa <RTC_EnterInitMode>
 8006964:	0003      	movs	r3, r0
 8006966:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006968:	0028      	movs	r0, r5
 800696a:	183b      	adds	r3, r7, r0
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10c      	bne.n	800698c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4910      	ldr	r1, [pc, #64]	; (80069bc <HAL_RTC_SetDate+0x120>)
 800697a:	400a      	ands	r2, r1
 800697c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800697e:	183c      	adds	r4, r7, r0
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f8d4 	bl	8006b30 <RTC_ExitInitMode>
 8006988:	0003      	movs	r3, r0
 800698a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006994:	2313      	movs	r3, #19
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2229      	movs	r2, #41	; 0x29
 80069a2:	2101      	movs	r1, #1
 80069a4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2228      	movs	r2, #40	; 0x28
 80069aa:	2100      	movs	r1, #0
 80069ac:	5499      	strb	r1, [r3, r2]

  return status;
 80069ae:	2313      	movs	r3, #19
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	781b      	ldrb	r3, [r3, #0]
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b006      	add	sp, #24
 80069ba:	bdb0      	pop	{r4, r5, r7, pc}
 80069bc:	00ffff3f 	.word	0x00ffff3f

080069c0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_RTC_GetDate+0x98>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	0c1b      	lsrs	r3, r3, #16
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	221f      	movs	r2, #31
 80069ea:	4013      	ands	r3, r2
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	223f      	movs	r2, #63	; 0x3f
 80069f8:	4013      	ands	r3, r2
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	0b5b      	lsrs	r3, r3, #13
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2207      	movs	r2, #7
 8006a08:	4013      	ands	r3, r2
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11a      	bne.n	8006a4c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f8f4 	bl	8006c08 <RTC_Bcd2ToByte>
 8006a20:	0003      	movs	r3, r0
 8006a22:	001a      	movs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 f8eb 	bl	8006c08 <RTC_Bcd2ToByte>
 8006a32:	0003      	movs	r3, r0
 8006a34:	001a      	movs	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	789b      	ldrb	r3, [r3, #2]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 f8e2 	bl	8006c08 <RTC_Bcd2ToByte>
 8006a44:	0003      	movs	r3, r0
 8006a46:	001a      	movs	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	0018      	movs	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	b006      	add	sp, #24
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	00ffff3f 	.word	0x00ffff3f

08006a5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	21a0      	movs	r1, #160	; 0xa0
 8006a70:	438a      	bics	r2, r1
 8006a72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a74:	f7fc fd3a 	bl	80034ec <HAL_GetTick>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a7c:	e00a      	b.n	8006a94 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a7e:	f7fc fd35 	bl	80034ec <HAL_GetTick>
 8006a82:	0002      	movs	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	23fa      	movs	r3, #250	; 0xfa
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d901      	bls.n	8006a94 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d0ee      	beq.n	8006a7e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b004      	add	sp, #16
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d12c      	bne.n	8006b20 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ad6:	f7fc fd09 	bl	80034ec <HAL_GetTick>
 8006ada:	0003      	movs	r3, r0
 8006adc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ade:	e014      	b.n	8006b0a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ae0:	f7fc fd04 	bl	80034ec <HAL_GetTick>
 8006ae4:	0002      	movs	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	200f      	movs	r0, #15
 8006aec:	183b      	adds	r3, r7, r0
 8006aee:	1839      	adds	r1, r7, r0
 8006af0:	7809      	ldrb	r1, [r1, #0]
 8006af2:	7019      	strb	r1, [r3, #0]
 8006af4:	23fa      	movs	r3, #250	; 0xfa
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d906      	bls.n	8006b0a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006afc:	183b      	adds	r3, r7, r0
 8006afe:	2203      	movs	r2, #3
 8006b00:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2229      	movs	r2, #41	; 0x29
 8006b06:	2103      	movs	r1, #3
 8006b08:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	4013      	ands	r3, r2
 8006b14:	d104      	bne.n	8006b20 <RTC_EnterInitMode+0x76>
 8006b16:	230f      	movs	r3, #15
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d1df      	bne.n	8006ae0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b20:	230f      	movs	r3, #15
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	781b      	ldrb	r3, [r3, #0]
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b004      	add	sp, #16
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b38:	240f      	movs	r4, #15
 8006b3a:	193b      	adds	r3, r7, r4
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b40:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b46:	2180      	movs	r1, #128	; 0x80
 8006b48:	438a      	bics	r2, r1
 8006b4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b4c:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2220      	movs	r2, #32
 8006b52:	4013      	ands	r3, r2
 8006b54:	d10d      	bne.n	8006b72 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7ff ff7f 	bl	8006a5c <HAL_RTC_WaitForSynchro>
 8006b5e:	1e03      	subs	r3, r0, #0
 8006b60:	d021      	beq.n	8006ba6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2229      	movs	r2, #41	; 0x29
 8006b66:	2103      	movs	r1, #3
 8006b68:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	e019      	b.n	8006ba6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b78:	2120      	movs	r1, #32
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff ff6b 	bl	8006a5c <HAL_RTC_WaitForSynchro>
 8006b86:	1e03      	subs	r3, r0, #0
 8006b88:	d007      	beq.n	8006b9a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2229      	movs	r2, #41	; 0x29
 8006b8e:	2103      	movs	r1, #3
 8006b90:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b92:	230f      	movs	r3, #15
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	2203      	movs	r2, #3
 8006b98:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <RTC_ExitInitMode+0x84>)
 8006ba0:	2120      	movs	r1, #32
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006ba6:	230f      	movs	r3, #15
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	781b      	ldrb	r3, [r3, #0]
}
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b005      	add	sp, #20
 8006bb2:	bd90      	pop	{r4, r7, pc}
 8006bb4:	40002800 	.word	0x40002800

08006bb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	1dfb      	adds	r3, r7, #7
 8006bc2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006bc8:	230b      	movs	r3, #11
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	1dfa      	adds	r2, r7, #7
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006bd2:	e008      	b.n	8006be6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006bda:	220b      	movs	r2, #11
 8006bdc:	18bb      	adds	r3, r7, r2
 8006bde:	18ba      	adds	r2, r7, r2
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	3a0a      	subs	r2, #10
 8006be4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006be6:	210b      	movs	r1, #11
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d8f1      	bhi.n	8006bd4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	187b      	adds	r3, r7, r1
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b2db      	uxtb	r3, r3
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	0002      	movs	r2, r0
 8006c10:	1dfb      	adds	r3, r7, #7
 8006c12:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006c14:	1dfb      	adds	r3, r7, #7
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	0013      	movs	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	1dfb      	adds	r3, r7, #7
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	210f      	movs	r1, #15
 8006c32:	400b      	ands	r3, r1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	18d3      	adds	r3, r2, r3
 8006c38:	b2db      	uxtb	r3, r3
}
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	b004      	add	sp, #16
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2228      	movs	r2, #40	; 0x28
 8006c54:	5c9b      	ldrb	r3, [r3, r2]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e082      	b.n	8006d64 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2228      	movs	r2, #40	; 0x28
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2229      	movs	r2, #41	; 0x29
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	22ca      	movs	r2, #202	; 0xca
 8006c74:	625a      	str	r2, [r3, #36]	; 0x24
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2253      	movs	r2, #83	; 0x53
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4938      	ldr	r1, [pc, #224]	; (8006d6c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2104      	movs	r1, #4
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006c9e:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d121      	bne.n	8006cec <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8006ca8:	f7fc fc20 	bl	80034ec <HAL_GetTick>
 8006cac:	0003      	movs	r3, r0
 8006cae:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006cb0:	e016      	b.n	8006ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cb2:	f7fc fc1b 	bl	80034ec <HAL_GetTick>
 8006cb6:	0002      	movs	r2, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1ad2      	subs	r2, r2, r3
 8006cbc:	23fa      	movs	r3, #250	; 0xfa
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d90d      	bls.n	8006ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	22ff      	movs	r2, #255	; 0xff
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2229      	movs	r2, #41	; 0x29
 8006cd0:	2103      	movs	r1, #3
 8006cd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2228      	movs	r2, #40	; 0x28
 8006cd8:	2100      	movs	r1, #0
 8006cda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e041      	b.n	8006d64 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d0e2      	beq.n	8006cb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2107      	movs	r1, #7
 8006d00:	438a      	bics	r2, r1
 8006d02:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6999      	ldr	r1, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006d16:	2380      	movs	r3, #128	; 0x80
 8006d18:	58d3      	ldr	r3, [r2, r3]
 8006d1a:	4916      	ldr	r1, [pc, #88]	; (8006d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006d1c:	2280      	movs	r2, #128	; 0x80
 8006d1e:	0312      	lsls	r2, r2, #12
 8006d20:	4313      	orrs	r3, r2
 8006d22:	2280      	movs	r2, #128	; 0x80
 8006d24:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2180      	movs	r1, #128	; 0x80
 8006d32:	01c9      	lsls	r1, r1, #7
 8006d34:	430a      	orrs	r2, r1
 8006d36:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	00c9      	lsls	r1, r1, #3
 8006d46:	430a      	orrs	r2, r1
 8006d48:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	22ff      	movs	r2, #255	; 0xff
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2229      	movs	r2, #41	; 0x29
 8006d56:	2101      	movs	r1, #1
 8006d58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2228      	movs	r2, #40	; 0x28
 8006d5e:	2100      	movs	r1, #0
 8006d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b006      	add	sp, #24
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	fffffbff 	.word	0xfffffbff
 8006d70:	40002800 	.word	0x40002800
 8006d74:	40021800 	.word	0x40021800

08006d78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	2204      	movs	r2, #4
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d00b      	beq.n	8006da4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2104      	movs	r1, #4
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f000 f808 	bl	8006db4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2229      	movs	r2, #41	; 0x29
 8006da8:	2101      	movs	r1, #1
 8006daa:	5499      	strb	r1, [r3, r2]
}
 8006dac:	46c0      	nop			; (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e0a8      	b.n	8006f28 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	2382      	movs	r3, #130	; 0x82
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d009      	beq.n	8006dfe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	61da      	str	r2, [r3, #28]
 8006df0:	e005      	b.n	8006dfe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	225d      	movs	r2, #93	; 0x5d
 8006e08:	5c9b      	ldrb	r3, [r3, r2]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	225c      	movs	r2, #92	; 0x5c
 8006e14:	2100      	movs	r1, #0
 8006e16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f009 fd44 	bl	80108a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	225d      	movs	r2, #93	; 0x5d
 8006e24:	2102      	movs	r1, #2
 8006e26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2140      	movs	r1, #64	; 0x40
 8006e34:	438a      	bics	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	23e0      	movs	r3, #224	; 0xe0
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d902      	bls.n	8006e4a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e002      	b.n	8006e50 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	015b      	lsls	r3, r3, #5
 8006e4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	23f0      	movs	r3, #240	; 0xf0
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d008      	beq.n	8006e6e <HAL_SPI_Init+0xaa>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	23e0      	movs	r3, #224	; 0xe0
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	2382      	movs	r3, #130	; 0x82
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	401a      	ands	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6899      	ldr	r1, [r3, #8]
 8006e7c:	2384      	movs	r3, #132	; 0x84
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	400b      	ands	r3, r1
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2102      	movs	r1, #2
 8006e8a:	400b      	ands	r3, r1
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	2101      	movs	r1, #1
 8006e94:	400b      	ands	r3, r1
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6999      	ldr	r1, [r3, #24]
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	2138      	movs	r1, #56	; 0x38
 8006eaa:	400b      	ands	r3, r1
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	2180      	movs	r1, #128	; 0x80
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	0011      	movs	r1, r2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ebe:	2380      	movs	r3, #128	; 0x80
 8006ec0:	019b      	lsls	r3, r3, #6
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2110      	movs	r1, #16
 8006edc:	400b      	ands	r3, r1
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	2108      	movs	r1, #8
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68d9      	ldr	r1, [r3, #12]
 8006eee:	23f0      	movs	r3, #240	; 0xf0
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	400b      	ands	r3, r1
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	0011      	movs	r1, r2
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	015b      	lsls	r3, r3, #5
 8006efe:	401a      	ands	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4907      	ldr	r1, [pc, #28]	; (8006f30 <HAL_SPI_Init+0x16c>)
 8006f14:	400a      	ands	r2, r1
 8006f16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	225d      	movs	r2, #93	; 0x5d
 8006f22:	2101      	movs	r1, #1
 8006f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b004      	add	sp, #16
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	fffff7ff 	.word	0xfffff7ff

08006f34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	1dbb      	adds	r3, r7, #6
 8006f42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f44:	231f      	movs	r3, #31
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	225c      	movs	r2, #92	; 0x5c
 8006f50:	5c9b      	ldrb	r3, [r3, r2]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_SPI_Transmit+0x26>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e140      	b.n	80071dc <HAL_SPI_Transmit+0x2a8>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	225c      	movs	r2, #92	; 0x5c
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f62:	f7fc fac3 	bl	80034ec <HAL_GetTick>
 8006f66:	0003      	movs	r3, r0
 8006f68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f6a:	2316      	movs	r3, #22
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	1dba      	adds	r2, r7, #6
 8006f70:	8812      	ldrh	r2, [r2, #0]
 8006f72:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	225d      	movs	r2, #93	; 0x5d
 8006f78:	5c9b      	ldrb	r3, [r3, r2]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d004      	beq.n	8006f8a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006f80:	231f      	movs	r3, #31
 8006f82:	18fb      	adds	r3, r7, r3
 8006f84:	2202      	movs	r2, #2
 8006f86:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f88:	e11d      	b.n	80071c6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_SPI_Transmit+0x64>
 8006f90:	1dbb      	adds	r3, r7, #6
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006f98:	231f      	movs	r3, #31
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006fa0:	e111      	b.n	80071c6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	225d      	movs	r2, #93	; 0x5d
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1dba      	adds	r2, r7, #6
 8006fba:	8812      	ldrh	r2, [r2, #0]
 8006fbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1dba      	adds	r2, r7, #6
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2244      	movs	r2, #68	; 0x44
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2246      	movs	r2, #70	; 0x46
 8006fd8:	2100      	movs	r1, #0
 8006fda:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d110      	bne.n	8007016 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2140      	movs	r1, #64	; 0x40
 8007000:	438a      	bics	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2180      	movs	r1, #128	; 0x80
 8007010:	01c9      	lsls	r1, r1, #7
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	4013      	ands	r3, r2
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d007      	beq.n	8007034 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2140      	movs	r1, #64	; 0x40
 8007030:	430a      	orrs	r2, r1
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	23e0      	movs	r3, #224	; 0xe0
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	429a      	cmp	r2, r3
 800703e:	d94e      	bls.n	80070de <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_SPI_Transmit+0x11e>
 8007048:	2316      	movs	r3, #22
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d13f      	bne.n	80070d2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007076:	e02c      	b.n	80070d2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2202      	movs	r2, #2
 8007080:	4013      	ands	r3, r2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d112      	bne.n	80070ac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	881a      	ldrh	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	1c9a      	adds	r2, r3, #2
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070aa:	e012      	b.n	80070d2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ac:	f7fc fa1e 	bl	80034ec <HAL_GetTick>
 80070b0:	0002      	movs	r2, r0
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d802      	bhi.n	80070c2 <HAL_SPI_Transmit+0x18e>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	3301      	adds	r3, #1
 80070c0:	d102      	bne.n	80070c8 <HAL_SPI_Transmit+0x194>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80070c8:	231f      	movs	r3, #31
 80070ca:	18fb      	adds	r3, r7, r3
 80070cc:	2203      	movs	r2, #3
 80070ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80070d0:	e079      	b.n	80071c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1cd      	bne.n	8007078 <HAL_SPI_Transmit+0x144>
 80070dc:	e04f      	b.n	800717e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <HAL_SPI_Transmit+0x1bc>
 80070e6:	2316      	movs	r3, #22
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d141      	bne.n	8007174 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	7812      	ldrb	r2, [r2, #0]
 80070fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007116:	e02d      	b.n	8007174 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2202      	movs	r2, #2
 8007120:	4013      	ands	r3, r2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d113      	bne.n	800714e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800714c:	e012      	b.n	8007174 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714e:	f7fc f9cd 	bl	80034ec <HAL_GetTick>
 8007152:	0002      	movs	r2, r0
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d802      	bhi.n	8007164 <HAL_SPI_Transmit+0x230>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	d102      	bne.n	800716a <HAL_SPI_Transmit+0x236>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800716a:	231f      	movs	r3, #31
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	2203      	movs	r2, #3
 8007170:	701a      	strb	r2, [r3, #0]
          goto error;
 8007172:	e028      	b.n	80071c6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1cc      	bne.n	8007118 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	0018      	movs	r0, r3
 8007186:	f000 f95d 	bl	8007444 <SPI_EndRxTxTransaction>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d002      	beq.n	8007194 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2220      	movs	r2, #32
 8007192:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80071ba:	231f      	movs	r3, #31
 80071bc:	18fb      	adds	r3, r7, r3
 80071be:	2201      	movs	r2, #1
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e000      	b.n	80071c6 <HAL_SPI_Transmit+0x292>
  }

error:
 80071c4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	225d      	movs	r2, #93	; 0x5d
 80071ca:	2101      	movs	r1, #1
 80071cc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	225c      	movs	r2, #92	; 0x5c
 80071d2:	2100      	movs	r1, #0
 80071d4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071d6:	231f      	movs	r3, #31
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	781b      	ldrb	r3, [r3, #0]
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b008      	add	sp, #32
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	1dfb      	adds	r3, r7, #7
 80071f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071f4:	f7fc f97a 	bl	80034ec <HAL_GetTick>
 80071f8:	0002      	movs	r2, r0
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	1a9b      	subs	r3, r3, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	18d3      	adds	r3, r2, r3
 8007202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007204:	f7fc f972 	bl	80034ec <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800720c:	4b3a      	ldr	r3, [pc, #232]	; (80072f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	015b      	lsls	r3, r3, #5
 8007212:	0d1b      	lsrs	r3, r3, #20
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	4353      	muls	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800721a:	e058      	b.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	d055      	beq.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007222:	f7fc f963 	bl	80034ec <HAL_GetTick>
 8007226:	0002      	movs	r2, r0
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d902      	bls.n	8007238 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d142      	bne.n	80072be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	21e0      	movs	r1, #224	; 0xe0
 8007244:	438a      	bics	r2, r1
 8007246:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	2382      	movs	r3, #130	; 0x82
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	429a      	cmp	r2, r3
 8007252:	d113      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x98>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	429a      	cmp	r2, r3
 800725e:	d005      	beq.n	800726c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	2380      	movs	r3, #128	; 0x80
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	429a      	cmp	r2, r3
 800726a:	d107      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2140      	movs	r1, #64	; 0x40
 8007278:	438a      	bics	r2, r1
 800727a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007280:	2380      	movs	r3, #128	; 0x80
 8007282:	019b      	lsls	r3, r3, #6
 8007284:	429a      	cmp	r2, r3
 8007286:	d110      	bne.n	80072aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	491a      	ldr	r1, [pc, #104]	; (80072fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007294:	400a      	ands	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2180      	movs	r1, #128	; 0x80
 80072a4:	0189      	lsls	r1, r1, #6
 80072a6:	430a      	orrs	r2, r1
 80072a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	225d      	movs	r2, #93	; 0x5d
 80072ae:	2101      	movs	r1, #1
 80072b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	225c      	movs	r2, #92	; 0x5c
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e017      	b.n	80072ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	425a      	negs	r2, r3
 80072de:	4153      	adcs	r3, r2
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	001a      	movs	r2, r3
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d197      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b008      	add	sp, #32
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20000084 	.word	0x20000084
 80072fc:	ffffdfff 	.word	0xffffdfff

08007300 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800730e:	2317      	movs	r3, #23
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007316:	f7fc f8e9 	bl	80034ec <HAL_GetTick>
 800731a:	0002      	movs	r2, r0
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	18d3      	adds	r3, r2, r3
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007326:	f7fc f8e1 	bl	80034ec <HAL_GetTick>
 800732a:	0003      	movs	r3, r0
 800732c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007336:	4b41      	ldr	r3, [pc, #260]	; (800743c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	0013      	movs	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	189b      	adds	r3, r3, r2
 8007340:	00da      	lsls	r2, r3, #3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	0d1b      	lsrs	r3, r3, #20
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	4353      	muls	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800734c:	e068      	b.n	8007420 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	23c0      	movs	r3, #192	; 0xc0
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	429a      	cmp	r2, r3
 8007356:	d10a      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	2117      	movs	r1, #23
 8007366:	187b      	adds	r3, r7, r1
 8007368:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800736a:	187b      	adds	r3, r7, r1
 800736c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	3301      	adds	r3, #1
 8007372:	d055      	beq.n	8007420 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007374:	f7fc f8ba 	bl	80034ec <HAL_GetTick>
 8007378:	0002      	movs	r2, r0
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	429a      	cmp	r2, r3
 8007382:	d902      	bls.n	800738a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d142      	bne.n	8007410 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	21e0      	movs	r1, #224	; 0xe0
 8007396:	438a      	bics	r2, r1
 8007398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	2382      	movs	r3, #130	; 0x82
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d113      	bne.n	80073ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	2380      	movs	r3, #128	; 0x80
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d005      	beq.n	80073be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d107      	bne.n	80073ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2140      	movs	r1, #64	; 0x40
 80073ca:	438a      	bics	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073d2:	2380      	movs	r3, #128	; 0x80
 80073d4:	019b      	lsls	r3, r3, #6
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d110      	bne.n	80073fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4916      	ldr	r1, [pc, #88]	; (8007440 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80073e6:	400a      	ands	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2180      	movs	r1, #128	; 0x80
 80073f6:	0189      	lsls	r1, r1, #6
 80073f8:	430a      	orrs	r2, r1
 80073fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	225d      	movs	r2, #93	; 0x5d
 8007400:	2101      	movs	r1, #1
 8007402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	225c      	movs	r2, #92	; 0x5c
 8007408:	2100      	movs	r1, #0
 800740a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e010      	b.n	8007432 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	3b01      	subs	r3, #1
 800741e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d18e      	bne.n	800734e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b00a      	add	sp, #40	; 0x28
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	20000084 	.word	0x20000084
 8007440:	ffffdfff 	.word	0xffffdfff

08007444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	23c0      	movs	r3, #192	; 0xc0
 8007454:	0159      	lsls	r1, r3, #5
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	0013      	movs	r3, r2
 800745e:	2200      	movs	r2, #0
 8007460:	f7ff ff4e 	bl	8007300 <SPI_WaitFifoStateUntilTimeout>
 8007464:	1e03      	subs	r3, r0, #0
 8007466:	d007      	beq.n	8007478 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746c:	2220      	movs	r2, #32
 800746e:	431a      	orrs	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e027      	b.n	80074c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	0013      	movs	r3, r2
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	f7ff fead 	bl	80071e4 <SPI_WaitFlagStateUntilTimeout>
 800748a:	1e03      	subs	r3, r0, #0
 800748c:	d007      	beq.n	800749e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007492:	2220      	movs	r2, #32
 8007494:	431a      	orrs	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e014      	b.n	80074c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	23c0      	movs	r3, #192	; 0xc0
 80074a2:	00d9      	lsls	r1, r3, #3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	0013      	movs	r3, r2
 80074ac:	2200      	movs	r2, #0
 80074ae:	f7ff ff27 	bl	8007300 <SPI_WaitFifoStateUntilTimeout>
 80074b2:	1e03      	subs	r3, r0, #0
 80074b4:	d007      	beq.n	80074c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ba:	2220      	movs	r2, #32
 80074bc:	431a      	orrs	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e000      	b.n	80074c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b004      	add	sp, #16
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e04a      	b.n	8007578 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	223d      	movs	r2, #61	; 0x3d
 80074e6:	5c9b      	ldrb	r3, [r3, r2]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d107      	bne.n	80074fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	223c      	movs	r2, #60	; 0x3c
 80074f2:	2100      	movs	r1, #0
 80074f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	0018      	movs	r0, r3
 80074fa:	f009 fa43 	bl	8010984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	223d      	movs	r2, #61	; 0x3d
 8007502:	2102      	movs	r1, #2
 8007504:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	0019      	movs	r1, r3
 8007510:	0010      	movs	r0, r2
 8007512:	f000 faa9 	bl	8007a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2248      	movs	r2, #72	; 0x48
 800751a:	2101      	movs	r1, #1
 800751c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	223e      	movs	r2, #62	; 0x3e
 8007522:	2101      	movs	r1, #1
 8007524:	5499      	strb	r1, [r3, r2]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	223f      	movs	r2, #63	; 0x3f
 800752a:	2101      	movs	r1, #1
 800752c:	5499      	strb	r1, [r3, r2]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	2101      	movs	r1, #1
 8007534:	5499      	strb	r1, [r3, r2]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2241      	movs	r2, #65	; 0x41
 800753a:	2101      	movs	r1, #1
 800753c:	5499      	strb	r1, [r3, r2]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2242      	movs	r2, #66	; 0x42
 8007542:	2101      	movs	r1, #1
 8007544:	5499      	strb	r1, [r3, r2]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2243      	movs	r2, #67	; 0x43
 800754a:	2101      	movs	r1, #1
 800754c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2244      	movs	r2, #68	; 0x44
 8007552:	2101      	movs	r1, #1
 8007554:	5499      	strb	r1, [r3, r2]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2245      	movs	r2, #69	; 0x45
 800755a:	2101      	movs	r1, #1
 800755c:	5499      	strb	r1, [r3, r2]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2246      	movs	r2, #70	; 0x46
 8007562:	2101      	movs	r1, #1
 8007564:	5499      	strb	r1, [r3, r2]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2247      	movs	r2, #71	; 0x47
 800756a:	2101      	movs	r1, #1
 800756c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	223d      	movs	r2, #61	; 0x3d
 8007572:	2101      	movs	r1, #1
 8007574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b002      	add	sp, #8
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	223d      	movs	r2, #61	; 0x3d
 800758c:	5c9b      	ldrb	r3, [r3, r2]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e03c      	b.n	8007612 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	223d      	movs	r2, #61	; 0x3d
 800759c:	2102      	movs	r1, #2
 800759e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2101      	movs	r1, #1
 80075ac:	430a      	orrs	r2, r1
 80075ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a19      	ldr	r2, [pc, #100]	; (800761c <HAL_TIM_Base_Start_IT+0x9c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_TIM_Base_Start_IT+0x4e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a18      	ldr	r2, [pc, #96]	; (8007620 <HAL_TIM_Base_Start_IT+0xa0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_TIM_Base_Start_IT+0x4e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a16      	ldr	r2, [pc, #88]	; (8007624 <HAL_TIM_Base_Start_IT+0xa4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d116      	bne.n	80075fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <HAL_TIM_Base_Start_IT+0xa8>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b06      	cmp	r3, #6
 80075de:	d016      	beq.n	800760e <HAL_TIM_Base_Start_IT+0x8e>
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	025b      	lsls	r3, r3, #9
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d011      	beq.n	800760e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2101      	movs	r1, #1
 80075f6:	430a      	orrs	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fa:	e008      	b.n	800760e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2101      	movs	r1, #1
 8007608:	430a      	orrs	r2, r1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e000      	b.n	8007610 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	0018      	movs	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	b004      	add	sp, #16
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	40012c00 	.word	0x40012c00
 8007620:	40000400 	.word	0x40000400
 8007624:	40014000 	.word	0x40014000
 8007628:	00010007 	.word	0x00010007

0800762c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2202      	movs	r2, #2
 800763c:	4013      	ands	r3, r2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d124      	bne.n	800768c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2202      	movs	r2, #2
 800764a:	4013      	ands	r3, r2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d11d      	bne.n	800768c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2203      	movs	r2, #3
 8007656:	4252      	negs	r2, r2
 8007658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2203      	movs	r2, #3
 8007668:	4013      	ands	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f9e2 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007674:	e007      	b.n	8007686 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 f9d5 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	0018      	movs	r0, r3
 8007682:	f000 f9e1 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2204      	movs	r2, #4
 8007694:	4013      	ands	r3, r2
 8007696:	2b04      	cmp	r3, #4
 8007698:	d125      	bne.n	80076e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2204      	movs	r2, #4
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d11e      	bne.n	80076e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2205      	movs	r2, #5
 80076ae:	4252      	negs	r2, r2
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	23c0      	movs	r3, #192	; 0xc0
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4013      	ands	r3, r2
 80076c4:	d004      	beq.n	80076d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 f9b5 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 80076ce:	e007      	b.n	80076e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	0018      	movs	r0, r3
 80076d4:	f000 f9a8 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	0018      	movs	r0, r3
 80076dc:	f000 f9b4 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2208      	movs	r2, #8
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d124      	bne.n	800773e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2208      	movs	r2, #8
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d11d      	bne.n	800773e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2209      	movs	r2, #9
 8007708:	4252      	negs	r2, r2
 800770a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2204      	movs	r2, #4
 8007710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	2203      	movs	r2, #3
 800771a:	4013      	ands	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	0018      	movs	r0, r3
 8007722:	f000 f989 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007726:	e007      	b.n	8007738 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0018      	movs	r0, r3
 800772c:	f000 f97c 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	0018      	movs	r0, r3
 8007734:	f000 f988 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2210      	movs	r2, #16
 8007746:	4013      	ands	r3, r2
 8007748:	2b10      	cmp	r3, #16
 800774a:	d125      	bne.n	8007798 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2210      	movs	r2, #16
 8007754:	4013      	ands	r3, r2
 8007756:	2b10      	cmp	r3, #16
 8007758:	d11e      	bne.n	8007798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2211      	movs	r2, #17
 8007760:	4252      	negs	r2, r2
 8007762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2208      	movs	r2, #8
 8007768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	23c0      	movs	r3, #192	; 0xc0
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4013      	ands	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	0018      	movs	r0, r3
 800777c:	f000 f95c 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007780:	e007      	b.n	8007792 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f94f 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 f95b 	bl	8007a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2201      	movs	r2, #1
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d10f      	bne.n	80077c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d108      	bne.n	80077c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2202      	movs	r2, #2
 80077ba:	4252      	negs	r2, r2
 80077bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0018      	movs	r0, r3
 80077c2:	f008 fa9b 	bl	800fcfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d10f      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2280      	movs	r2, #128	; 0x80
 80077dc:	4013      	ands	r3, r2
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d108      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2281      	movs	r2, #129	; 0x81
 80077e8:	4252      	negs	r2, r2
 80077ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0018      	movs	r0, r3
 80077f0:	f000 fabc 	bl	8007d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	2380      	movs	r3, #128	; 0x80
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	401a      	ands	r2, r3
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d10e      	bne.n	8007826 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2280      	movs	r2, #128	; 0x80
 8007810:	4013      	ands	r3, r2
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d107      	bne.n	8007826 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <HAL_TIM_IRQHandler+0x260>)
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	0018      	movs	r0, r3
 8007822:	f000 faab 	bl	8007d7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	4013      	ands	r3, r2
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d10f      	bne.n	8007854 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2240      	movs	r2, #64	; 0x40
 800783c:	4013      	ands	r3, r2
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d108      	bne.n	8007854 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2241      	movs	r2, #65	; 0x41
 8007848:	4252      	negs	r2, r2
 800784a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	0018      	movs	r0, r3
 8007850:	f000 f902 	bl	8007a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2220      	movs	r2, #32
 800785c:	4013      	ands	r3, r2
 800785e:	2b20      	cmp	r3, #32
 8007860:	d10f      	bne.n	8007882 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	4013      	ands	r3, r2
 800786c:	2b20      	cmp	r3, #32
 800786e:	d108      	bne.n	8007882 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2221      	movs	r2, #33	; 0x21
 8007876:	4252      	negs	r2, r2
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0018      	movs	r0, r3
 800787e:	f000 fa6d 	bl	8007d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	46bd      	mov	sp, r7
 8007886:	b002      	add	sp, #8
 8007888:	bd80      	pop	{r7, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	fffffeff 	.word	0xfffffeff

08007890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	223c      	movs	r2, #60	; 0x3c
 800789e:	5c9b      	ldrb	r3, [r3, r2]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIM_ConfigClockSource+0x18>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e0b7      	b.n	8007a18 <HAL_TIM_ConfigClockSource+0x188>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	223c      	movs	r2, #60	; 0x3c
 80078ac:	2101      	movs	r1, #1
 80078ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	223d      	movs	r2, #61	; 0x3d
 80078b4:	2102      	movs	r1, #2
 80078b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a57      	ldr	r2, [pc, #348]	; (8007a20 <HAL_TIM_ConfigClockSource+0x190>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4a56      	ldr	r2, [pc, #344]	; (8007a24 <HAL_TIM_ConfigClockSource+0x194>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	0192      	lsls	r2, r2, #6
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d040      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0xd6>
 80078e4:	2280      	movs	r2, #128	; 0x80
 80078e6:	0192      	lsls	r2, r2, #6
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d900      	bls.n	80078ee <HAL_TIM_ConfigClockSource+0x5e>
 80078ec:	e088      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 80078ee:	2280      	movs	r2, #128	; 0x80
 80078f0:	0152      	lsls	r2, r2, #5
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d100      	bne.n	80078f8 <HAL_TIM_ConfigClockSource+0x68>
 80078f6:	e085      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	0152      	lsls	r2, r2, #5
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d900      	bls.n	8007902 <HAL_TIM_ConfigClockSource+0x72>
 8007900:	e07e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 8007902:	2b70      	cmp	r3, #112	; 0x70
 8007904:	d018      	beq.n	8007938 <HAL_TIM_ConfigClockSource+0xa8>
 8007906:	d900      	bls.n	800790a <HAL_TIM_ConfigClockSource+0x7a>
 8007908:	e07a      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 800790a:	2b60      	cmp	r3, #96	; 0x60
 800790c:	d04f      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x11e>
 800790e:	d900      	bls.n	8007912 <HAL_TIM_ConfigClockSource+0x82>
 8007910:	e076      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 8007912:	2b50      	cmp	r3, #80	; 0x50
 8007914:	d03b      	beq.n	800798e <HAL_TIM_ConfigClockSource+0xfe>
 8007916:	d900      	bls.n	800791a <HAL_TIM_ConfigClockSource+0x8a>
 8007918:	e072      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d057      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0x13e>
 800791e:	d900      	bls.n	8007922 <HAL_TIM_ConfigClockSource+0x92>
 8007920:	e06e      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 8007922:	2b30      	cmp	r3, #48	; 0x30
 8007924:	d063      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15e>
 8007926:	d86b      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 8007928:	2b20      	cmp	r3, #32
 800792a:	d060      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15e>
 800792c:	d868      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d05d      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15e>
 8007932:	2b10      	cmp	r3, #16
 8007934:	d05b      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007936:	e063      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6899      	ldr	r1, [r3, #8]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f000 f980 	bl	8007c4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2277      	movs	r2, #119	; 0x77
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e04f      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f000 f969 	bl	8007c4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	01c9      	lsls	r1, r1, #7
 8007988:	430a      	orrs	r2, r1
 800798a:	609a      	str	r2, [r3, #8]
      break;
 800798c:	e03b      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6859      	ldr	r1, [r3, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	001a      	movs	r2, r3
 800799c:	f000 f8da 	bl	8007b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2150      	movs	r1, #80	; 0x50
 80079a6:	0018      	movs	r0, r3
 80079a8:	f000 f934 	bl	8007c14 <TIM_ITRx_SetConfig>
      break;
 80079ac:	e02b      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6859      	ldr	r1, [r3, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	001a      	movs	r2, r3
 80079bc:	f000 f8f8 	bl	8007bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2160      	movs	r1, #96	; 0x60
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 f924 	bl	8007c14 <TIM_ITRx_SetConfig>
      break;
 80079cc:	e01b      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	001a      	movs	r2, r3
 80079dc:	f000 f8ba 	bl	8007b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 f914 	bl	8007c14 <TIM_ITRx_SetConfig>
      break;
 80079ec:	e00b      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	0019      	movs	r1, r3
 80079f8:	0010      	movs	r0, r2
 80079fa:	f000 f90b 	bl	8007c14 <TIM_ITRx_SetConfig>
        break;
 80079fe:	e002      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	e000      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007a04:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	223d      	movs	r2, #61	; 0x3d
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	223c      	movs	r2, #60	; 0x3c
 8007a12:	2100      	movs	r1, #0
 8007a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	0018      	movs	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b004      	add	sp, #16
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	ffceff88 	.word	0xffceff88
 8007a24:	ffff00ff 	.word	0xffff00ff

08007a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a30:	46c0      	nop			; (mov r8, r8)
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b002      	add	sp, #8
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a40:	46c0      	nop			; (mov r8, r8)
 8007a42:	46bd      	mov	sp, r7
 8007a44:	b002      	add	sp, #8
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a50:	46c0      	nop			; (mov r8, r8)
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b002      	add	sp, #8
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a60:	46c0      	nop			; (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <TIM_Base_SetConfig+0xd0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_Base_SetConfig+0x20>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a2e      	ldr	r2, [pc, #184]	; (8007b3c <TIM_Base_SetConfig+0xd4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d108      	bne.n	8007a9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2270      	movs	r2, #112	; 0x70
 8007a8c:	4393      	bics	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <TIM_Base_SetConfig+0xd0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0x62>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <TIM_Base_SetConfig+0xd4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0x62>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a24      	ldr	r2, [pc, #144]	; (8007b40 <TIM_Base_SetConfig+0xd8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	; (8007b44 <TIM_Base_SetConfig+0xdc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x62>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a22      	ldr	r2, [pc, #136]	; (8007b48 <TIM_Base_SetConfig+0xe0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x62>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <TIM_Base_SetConfig+0xe4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <TIM_Base_SetConfig+0xe8>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	4393      	bics	r3, r2
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <TIM_Base_SetConfig+0xd0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0xba>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a0d      	ldr	r2, [pc, #52]	; (8007b44 <TIM_Base_SetConfig+0xdc>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0xba>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <TIM_Base_SetConfig+0xe0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0xba>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <TIM_Base_SetConfig+0xe4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d103      	bne.n	8007b2a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	615a      	str	r2, [r3, #20]
}
 8007b30:	46c0      	nop			; (mov r8, r8)
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b004      	add	sp, #16
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40002000 	.word	0x40002000
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800
 8007b50:	fffffcff 	.word	0xfffffcff

08007b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4393      	bics	r3, r2
 8007b6e:	001a      	movs	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	22f0      	movs	r2, #240	; 0xf0
 8007b7e:	4393      	bics	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	220a      	movs	r2, #10
 8007b90:	4393      	bics	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b006      	add	sp, #24
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2210      	movs	r2, #16
 8007bc2:	4393      	bics	r3, r2
 8007bc4:	001a      	movs	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <TIM_TI2_ConfigInputStage+0x60>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	031b      	lsls	r3, r3, #12
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	22a0      	movs	r2, #160	; 0xa0
 8007bec:	4393      	bics	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	621a      	str	r2, [r3, #32]
}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b006      	add	sp, #24
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	ffff0fff 	.word	0xffff0fff

08007c14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4a08      	ldr	r2, [pc, #32]	; (8007c48 <TIM_ITRx_SetConfig+0x34>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	2207      	movs	r2, #7
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	609a      	str	r2, [r3, #8]
}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b004      	add	sp, #16
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	ffcfff8f 	.word	0xffcfff8f

08007c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	4a09      	ldr	r2, [pc, #36]	; (8007c88 <TIM_ETR_SetConfig+0x3c>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	609a      	str	r2, [r3, #8]
}
 8007c80:	46c0      	nop			; (mov r8, r8)
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b006      	add	sp, #24
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	ffff00ff 	.word	0xffff00ff

08007c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	223c      	movs	r2, #60	; 0x3c
 8007c9a:	5c9b      	ldrb	r3, [r3, r2]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e04f      	b.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	223c      	movs	r2, #60	; 0x3c
 8007ca8:	2101      	movs	r1, #1
 8007caa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	223d      	movs	r2, #61	; 0x3d
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2270      	movs	r2, #112	; 0x70
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d009      	beq.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d10c      	bne.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2280      	movs	r2, #128	; 0x80
 8007d1c:	4393      	bics	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	223d      	movs	r2, #61	; 0x3d
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	223c      	movs	r2, #60	; 0x3c
 8007d3e:	2100      	movs	r1, #0
 8007d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b004      	add	sp, #16
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	ff0fffff 	.word	0xff0fffff
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40014000 	.word	0x40014000

08007d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_GPIO_EXTI_Falling_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	0002      	movs	r2, r0
 8007d94:	1dbb      	adds	r3, r7, #6
 8007d96:	801a      	strh	r2, [r3, #0]

	flagClockConfig = 1;
 8007d98:	4b80      	ldr	r3, [pc, #512]	; (8007f9c <HAL_GPIO_EXTI_Falling_Callback+0x210>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	701a      	strb	r2, [r3, #0]

	//reset settings counter
	if (flagSettings == FLAG_SETTINGS_ON) {
 8007d9e:	4b80      	ldr	r3, [pc, #512]	; (8007fa0 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d102      	bne.n	8007dae <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counterSettings = SETTINGS_TIME;
 8007da8:	4b7e      	ldr	r3, [pc, #504]	; (8007fa4 <HAL_GPIO_EXTI_Falling_Callback+0x218>)
 8007daa:	2205      	movs	r2, #5
 8007dac:	701a      	strb	r2, [r3, #0]
	}

	//set full update flag, when both reset and set pin was pressed

	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 8007dae:	23a0      	movs	r3, #160	; 0xa0
 8007db0:	05db      	lsls	r3, r3, #23
 8007db2:	2110      	movs	r1, #16
 8007db4:	0018      	movs	r0, r3
 8007db6:	f7fc ff2d 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007dba:	1e03      	subs	r3, r0, #0
 8007dbc:	d118      	bne.n	8007df0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 8007dbe:	23a0      	movs	r3, #160	; 0xa0
 8007dc0:	05db      	lsls	r3, r3, #23
 8007dc2:	2108      	movs	r1, #8
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7fc ff25 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007dca:	1e03      	subs	r3, r0, #0
 8007dcc:	d110      	bne.n	8007df0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1
 8007dce:	23a0      	movs	r3, #160	; 0xa0
 8007dd0:	05db      	lsls	r3, r3, #23
 8007dd2:	2104      	movs	r1, #4
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f7fc ff1d 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007dda:	0003      	movs	r3, r0
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d107      	bne.n	8007df0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
			&& flagLocked == UNLOCKED) {
 8007de0:	4b71      	ldr	r3, [pc, #452]	; (8007fa8 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <HAL_GPIO_EXTI_Falling_Callback+0x64>
		interfaceFullUpdateFlag = 1;
 8007dea:	4b70      	ldr	r3, [pc, #448]	; (8007fac <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
	}

	//lock watch when underwater
	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 8007df0:	23a0      	movs	r3, #160	; 0xa0
 8007df2:	05db      	lsls	r3, r3, #23
 8007df4:	2110      	movs	r1, #16
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7fc ff0c 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007dfc:	1e03      	subs	r3, r0, #0
 8007dfe:	d152      	bne.n	8007ea6 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 8007e00:	23a0      	movs	r3, #160	; 0xa0
 8007e02:	05db      	lsls	r3, r3, #23
 8007e04:	2108      	movs	r1, #8
 8007e06:	0018      	movs	r0, r3
 8007e08:	f7fc ff04 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007e0c:	1e03      	subs	r3, r0, #0
 8007e0e:	d14a      	bne.n	8007ea6 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 0) {
 8007e10:	23a0      	movs	r3, #160	; 0xa0
 8007e12:	05db      	lsls	r3, r3, #23
 8007e14:	2104      	movs	r1, #4
 8007e16:	0018      	movs	r0, r3
 8007e18:	f7fc fefc 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007e1c:	1e03      	subs	r3, r0, #0
 8007e1e:	d142      	bne.n	8007ea6 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
		flagLocked = LOCKED;
 8007e20:	4b61      	ldr	r3, [pc, #388]	; (8007fa8 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	701a      	strb	r2, [r3, #0]
		flagSettings = FLAG_SETTINGS_OFF;
 8007e26:	4b5e      	ldr	r3, [pc, #376]	; (8007fa0 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]

		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8007e2c:	4b60      	ldr	r3, [pc, #384]	; (8007fb0 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d006      	beq.n	8007e44 <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 8007e36:	4b5e      	ldr	r3, [pc, #376]	; (8007fb0 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d001      	beq.n	8007e44 <HAL_GPIO_EXTI_Falling_Callback+0xb8>
 8007e40:	f000 fd29 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
 8007e44:	4b5b      	ldr	r3, [pc, #364]	; (8007fb4 <HAL_GPIO_EXTI_Falling_Callback+0x228>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_GPIO_EXTI_Falling_Callback+0xc6>
 8007e4e:	f000 fd22 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
				&& chronoMonth == 0 && chronoDay == 0 && chronoHours == 0
 8007e52:	4b59      	ldr	r3, [pc, #356]	; (8007fb8 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b25b      	sxtb	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
 8007e5c:	f000 fd1b 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
 8007e60:	4b56      	ldr	r3, [pc, #344]	; (8007fbc <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_GPIO_EXTI_Falling_Callback+0xe2>
 8007e6a:	f000 fd14 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
 8007e6e:	4b54      	ldr	r3, [pc, #336]	; (8007fc0 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <HAL_GPIO_EXTI_Falling_Callback+0xf0>
 8007e78:	f000 fd0d 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
				&& chronoMinutes == 0 && chronoSeconds < 5) {
 8007e7c:	4b51      	ldr	r3, [pc, #324]	; (8007fc4 <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_GPIO_EXTI_Falling_Callback+0xfe>
 8007e86:	f000 fd06 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
 8007e8a:	4b4f      	ldr	r3, [pc, #316]	; (8007fc8 <HAL_GPIO_EXTI_Falling_Callback+0x23c>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	dd01      	ble.n	8007e98 <HAL_GPIO_EXTI_Falling_Callback+0x10c>
 8007e94:	f000 fcff 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>
			mode = MODE_NORMAL;
 8007e98:	4b45      	ldr	r3, [pc, #276]	; (8007fb0 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
			rtcResetChrono();
 8007e9e:	f006 f8c9 	bl	800e034 <rtcResetChrono>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8007ea2:	f000 fcf8 	bl	8008896 <HAL_GPIO_EXTI_Falling_Callback+0xb0a>

		}

	} else {

		flagDontSleep = 1;
 8007ea6:	4b49      	ldr	r3, [pc, #292]	; (8007fcc <HAL_GPIO_EXTI_Falling_Callback+0x240>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]

		//										START BUTTON
		if (GPIO_Pin == START_Pin
 8007eac:	1dbb      	adds	r3, r7, #6
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d001      	beq.n	8007eb8 <HAL_GPIO_EXTI_Falling_Callback+0x12c>
 8007eb4:	f000 fbe6 	bl	8008684 <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 8007eb8:	23a0      	movs	r3, #160	; 0xa0
 8007eba:	05db      	lsls	r3, r3, #23
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7fc fea8 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007ec4:	1e03      	subs	r3, r0, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_GPIO_EXTI_Falling_Callback+0x140>
 8007ec8:	f000 fbdc 	bl	8008684 <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 8007ecc:	23a0      	movs	r3, #160	; 0xa0
 8007ece:	05db      	lsls	r3, r3, #23
 8007ed0:	2110      	movs	r1, #16
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7fc fe9e 	bl	8004c14 <HAL_GPIO_ReadPin>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d001      	beq.n	8007ee2 <HAL_GPIO_EXTI_Falling_Callback+0x156>
 8007ede:	f000 fbd1 	bl	8008684 <HAL_GPIO_EXTI_Falling_Callback+0x8f8>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 8007ee2:	4b31      	ldr	r3, [pc, #196]	; (8007fa8 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_GPIO_EXTI_Falling_Callback+0x164>
 8007eec:	f000 fcd5 	bl	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>

				if (flagSettings == FLAG_SETTINGS_OFF) {
 8007ef0:	4b2b      	ldr	r3, [pc, #172]	; (8007fa0 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d000      	beq.n	8007efc <HAL_GPIO_EXTI_Falling_Callback+0x170>
 8007efa:	e1af      	b.n	800825c <HAL_GPIO_EXTI_Falling_Callback+0x4d0>

					if (mode == MODE_NORMAL) { // start chrono if mode is set as normal
 8007efc:	4b2c      	ldr	r3, [pc, #176]	; (8007fb0 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d17c      	bne.n	8008000 <HAL_GPIO_EXTI_Falling_Callback+0x274>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8007f06:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <HAL_GPIO_EXTI_Falling_Callback+0x244>)
 8007f08:	2204      	movs	r2, #4
 8007f0a:	213c      	movs	r1, #60	; 0x3c
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7fe fe99 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
								RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007f12:	4930      	ldr	r1, [pc, #192]	; (8007fd4 <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8007f14:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <HAL_GPIO_EXTI_Falling_Callback+0x244>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f7fe fc63 	bl	80067e4 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8007f1e:	492e      	ldr	r1, [pc, #184]	; (8007fd8 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8007f20:	4b2b      	ldr	r3, [pc, #172]	; (8007fd0 <HAL_GPIO_EXTI_Falling_Callback+0x244>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7fe fd4b 	bl	80069c0 <HAL_RTC_GetDate>

						chronoStartSeconds = sTime.Seconds;
 8007f2a:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8007f2c:	789b      	ldrb	r3, [r3, #2]
 8007f2e:	b25a      	sxtb	r2, r3
 8007f30:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <HAL_GPIO_EXTI_Falling_Callback+0x250>)
 8007f32:	701a      	strb	r2, [r3, #0]
						chronoStartMinutes = sTime.Minutes;
 8007f34:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	b21a      	sxth	r2, r3
 8007f3a:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <HAL_GPIO_EXTI_Falling_Callback+0x254>)
 8007f3c:	801a      	strh	r2, [r3, #0]
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 8007f3e:	4b25      	ldr	r3, [pc, #148]	; (8007fd4 <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	0013      	movs	r3, r2
 8007f44:	065b      	lsls	r3, r3, #25
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	189b      	adds	r3, r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <HAL_GPIO_EXTI_Falling_Callback+0x258>)
 8007f54:	4694      	mov	ip, r2
 8007f56:	4463      	add	r3, ip
								/ 255) / 10;
 8007f58:	4923      	ldr	r1, [pc, #140]	; (8007fe8 <HAL_GPIO_EXTI_Falling_Callback+0x25c>)
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7f8 f8da 	bl	8000114 <__udivsi3>
 8007f60:	0003      	movs	r3, r0
 8007f62:	001a      	movs	r2, r3
						chronoStartDecimals = (((255 - sTime.SubSeconds) * 100)
 8007f64:	4b21      	ldr	r3, [pc, #132]	; (8007fec <HAL_GPIO_EXTI_Falling_Callback+0x260>)
 8007f66:	601a      	str	r2, [r3, #0]
						chronoStartHours = sTime.Hours;
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <HAL_GPIO_EXTI_Falling_Callback+0x248>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b25a      	sxtb	r2, r3
 8007f6e:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <HAL_GPIO_EXTI_Falling_Callback+0x264>)
 8007f70:	701a      	strb	r2, [r3, #0]
						chronoStartDay = sDate.Date;
 8007f72:	4b19      	ldr	r3, [pc, #100]	; (8007fd8 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8007f74:	789b      	ldrb	r3, [r3, #2]
 8007f76:	b25a      	sxtb	r2, r3
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <HAL_GPIO_EXTI_Falling_Callback+0x268>)
 8007f7a:	701a      	strb	r2, [r3, #0]
						chronoStartMonth = sDate.Month;
 8007f7c:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	b25a      	sxtb	r2, r3
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <HAL_GPIO_EXTI_Falling_Callback+0x26c>)
 8007f84:	701a      	strb	r2, [r3, #0]
						chronoStartYear = sDate.Year;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <HAL_GPIO_EXTI_Falling_Callback+0x24c>)
 8007f88:	78db      	ldrb	r3, [r3, #3]
 8007f8a:	b25a      	sxtb	r2, r3
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <HAL_GPIO_EXTI_Falling_Callback+0x270>)
 8007f8e:	701a      	strb	r2, [r3, #0]

						mode = MODE_CHRONO;
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 8007f92:	2201      	movs	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8007f96:	f000 fc80 	bl	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	20000568 	.word	0x20000568
 8007fa0:	200004de 	.word	0x200004de
 8007fa4:	200005e9 	.word	0x200005e9
 8007fa8:	2000040f 	.word	0x2000040f
 8007fac:	20000624 	.word	0x20000624
 8007fb0:	20000410 	.word	0x20000410
 8007fb4:	200004e2 	.word	0x200004e2
 8007fb8:	200002cc 	.word	0x200002cc
 8007fbc:	2000061e 	.word	0x2000061e
 8007fc0:	2000030d 	.word	0x2000030d
 8007fc4:	20000636 	.word	0x20000636
 8007fc8:	200005f6 	.word	0x200005f6
 8007fcc:	20000615 	.word	0x20000615
 8007fd0:	200006c8 	.word	0x200006c8
 8007fd4:	200001ac 	.word	0x200001ac
 8007fd8:	20000588 	.word	0x20000588
 8007fdc:	20000142 	.word	0x20000142
 8007fe0:	200002fe 	.word	0x200002fe
 8007fe4:	0000639c 	.word	0x0000639c
 8007fe8:	000009f6 	.word	0x000009f6
 8007fec:	20000134 	.word	0x20000134
 8007ff0:	20000595 	.word	0x20000595
 8007ff4:	200005f7 	.word	0x200005f7
 8007ff8:	20000292 	.word	0x20000292
 8007ffc:	20000564 	.word	0x20000564
					}

					else if (mode == MODE_CHRONO) { //stop chrono if chrono is working
 8008000:	4bda      	ldr	r3, [pc, #872]	; (800836c <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d000      	beq.n	800800c <HAL_GPIO_EXTI_Falling_Callback+0x280>
 800800a:	e11d      	b.n	8008248 <HAL_GPIO_EXTI_Falling_Callback+0x4bc>

						HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 800800c:	4bd8      	ldr	r3, [pc, #864]	; (8008370 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800800e:	2204      	movs	r2, #4
 8008010:	213c      	movs	r1, #60	; 0x3c
 8008012:	0018      	movs	r0, r3
 8008014:	f7fe fe16 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
						RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008018:	49d6      	ldr	r1, [pc, #856]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800801a:	4bd5      	ldr	r3, [pc, #852]	; (8008370 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800801c:	2200      	movs	r2, #0
 800801e:	0018      	movs	r0, r3
 8008020:	f7fe fbe0 	bl	80067e4 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8008024:	49d4      	ldr	r1, [pc, #848]	; (8008378 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8008026:	4bd2      	ldr	r3, [pc, #840]	; (8008370 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 8008028:	2200      	movs	r2, #0
 800802a:	0018      	movs	r0, r3
 800802c:	f7fe fcc8 	bl	80069c0 <HAL_RTC_GetDate>

						minutes = sTime.Minutes;
 8008030:	4bd0      	ldr	r3, [pc, #832]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	b21a      	sxth	r2, r3
 8008036:	4bd1      	ldr	r3, [pc, #836]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008038:	801a      	strh	r2, [r3, #0]
						seconds = sTime.Seconds;
 800803a:	4bce      	ldr	r3, [pc, #824]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800803c:	789b      	ldrb	r3, [r3, #2]
 800803e:	b25a      	sxtb	r2, r3
 8008040:	4bcf      	ldr	r3, [pc, #828]	; (8008380 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 8008042:	701a      	strb	r2, [r3, #0]
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 8008044:	4bcb      	ldr	r3, [pc, #812]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	0013      	movs	r3, r2
 800804a:	065b      	lsls	r3, r3, #25
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	189b      	adds	r3, r3, r2
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4aca      	ldr	r2, [pc, #808]	; (8008384 <HAL_GPIO_EXTI_Falling_Callback+0x5f8>)
 800805a:	4694      	mov	ip, r2
 800805c:	4463      	add	r3, ip
								/ 10;
 800805e:	49ca      	ldr	r1, [pc, #808]	; (8008388 <HAL_GPIO_EXTI_Falling_Callback+0x5fc>)
 8008060:	0018      	movs	r0, r3
 8008062:	f7f8 f857 	bl	8000114 <__udivsi3>
 8008066:	0003      	movs	r3, r0
 8008068:	001a      	movs	r2, r3
						decimals = (((255 - sTime.SubSeconds) * 100) / 255)
 800806a:	4bc8      	ldr	r3, [pc, #800]	; (800838c <HAL_GPIO_EXTI_Falling_Callback+0x600>)
 800806c:	601a      	str	r2, [r3, #0]
						hours = sTime.Hours;
 800806e:	4bc1      	ldr	r3, [pc, #772]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b25a      	sxtb	r2, r3
 8008074:	4bc6      	ldr	r3, [pc, #792]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 8008076:	701a      	strb	r2, [r3, #0]
						day = sDate.Date;
 8008078:	4bbf      	ldr	r3, [pc, #764]	; (8008378 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800807a:	789a      	ldrb	r2, [r3, #2]
 800807c:	4bc5      	ldr	r3, [pc, #788]	; (8008394 <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 800807e:	701a      	strb	r2, [r3, #0]
						month = sDate.Month;
 8008080:	4bbd      	ldr	r3, [pc, #756]	; (8008378 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 8008082:	785a      	ldrb	r2, [r3, #1]
 8008084:	4bc4      	ldr	r3, [pc, #784]	; (8008398 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8008086:	701a      	strb	r2, [r3, #0]
						year = sDate.Year;
 8008088:	4bbb      	ldr	r3, [pc, #748]	; (8008378 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800808a:	78da      	ldrb	r2, [r3, #3]
 800808c:	4bc3      	ldr	r3, [pc, #780]	; (800839c <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 800808e:	701a      	strb	r2, [r3, #0]

						chronoDecimals = decimals - chronoStartDecimals;
 8008090:	4bbe      	ldr	r3, [pc, #760]	; (800838c <HAL_GPIO_EXTI_Falling_Callback+0x600>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4bc2      	ldr	r3, [pc, #776]	; (80083a0 <HAL_GPIO_EXTI_Falling_Callback+0x614>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	1ad2      	subs	r2, r2, r3
 800809a:	4bc2      	ldr	r3, [pc, #776]	; (80083a4 <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 800809c:	601a      	str	r2, [r3, #0]
						chronoSeconds = seconds - chronoStartSeconds;
 800809e:	4bb8      	ldr	r3, [pc, #736]	; (8008380 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4bc0      	ldr	r3, [pc, #768]	; (80083a8 <HAL_GPIO_EXTI_Falling_Callback+0x61c>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	b25a      	sxtb	r2, r3
 80080b4:	4bbd      	ldr	r3, [pc, #756]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 80080b6:	701a      	strb	r2, [r3, #0]
						chronoMinutes = minutes - chronoStartMinutes;
 80080b8:	4bb0      	ldr	r3, [pc, #704]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b21b      	sxth	r3, r3
 80080be:	b29a      	uxth	r2, r3
 80080c0:	4bbb      	ldr	r3, [pc, #748]	; (80083b0 <HAL_GPIO_EXTI_Falling_Callback+0x624>)
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b21b      	sxth	r3, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	b21a      	sxth	r2, r3
 80080ce:	4bb9      	ldr	r3, [pc, #740]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80080d0:	801a      	strh	r2, [r3, #0]
						chronoHours = hours - chronoStartHours;
 80080d2:	4baf      	ldr	r3, [pc, #700]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b25b      	sxtb	r3, r3
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	4bb7      	ldr	r3, [pc, #732]	; (80083b8 <HAL_GPIO_EXTI_Falling_Callback+0x62c>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	b25a      	sxtb	r2, r3
 80080e8:	4bb4      	ldr	r3, [pc, #720]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80080ea:	701a      	strb	r2, [r3, #0]
						chronoDay = day - chronoStartDay;
 80080ec:	4ba9      	ldr	r3, [pc, #676]	; (8008394 <HAL_GPIO_EXTI_Falling_Callback+0x608>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	4bb3      	ldr	r3, [pc, #716]	; (80083c0 <HAL_GPIO_EXTI_Falling_Callback+0x634>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b25b      	sxtb	r3, r3
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	b25a      	sxtb	r2, r3
 8008100:	4bb0      	ldr	r3, [pc, #704]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8008102:	701a      	strb	r2, [r3, #0]
						chronoMonth = month - chronoStartMonth;
 8008104:	4ba4      	ldr	r3, [pc, #656]	; (8008398 <HAL_GPIO_EXTI_Falling_Callback+0x60c>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4baf      	ldr	r3, [pc, #700]	; (80083c8 <HAL_GPIO_EXTI_Falling_Callback+0x63c>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b25b      	sxtb	r3, r3
 8008110:	b2db      	uxtb	r3, r3
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	b2db      	uxtb	r3, r3
 8008116:	b25a      	sxtb	r2, r3
 8008118:	4bac      	ldr	r3, [pc, #688]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800811a:	701a      	strb	r2, [r3, #0]
						chronoYear = year - chronoStartYear;
 800811c:	4b9f      	ldr	r3, [pc, #636]	; (800839c <HAL_GPIO_EXTI_Falling_Callback+0x610>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	4bab      	ldr	r3, [pc, #684]	; (80083d0 <HAL_GPIO_EXTI_Falling_Callback+0x644>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b25b      	sxtb	r3, r3
 8008128:	b2db      	uxtb	r3, r3
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	b2db      	uxtb	r3, r3
 800812e:	b25a      	sxtb	r2, r3
 8008130:	4ba8      	ldr	r3, [pc, #672]	; (80083d4 <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 8008132:	701a      	strb	r2, [r3, #0]

						if (chronoDecimals < 0) {
 8008134:	4b9b      	ldr	r3, [pc, #620]	; (80083a4 <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0e      	bge.n	800815a <HAL_GPIO_EXTI_Falling_Callback+0x3ce>
							chronoSeconds--;
 800813c:	4b9b      	ldr	r3, [pc, #620]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b25b      	sxtb	r3, r3
 8008142:	b2db      	uxtb	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	b25a      	sxtb	r2, r3
 800814a:	4b98      	ldr	r3, [pc, #608]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 800814c:	701a      	strb	r2, [r3, #0]
							chronoDecimals = chronoDecimals + 10;
 800814e:	4b95      	ldr	r3, [pc, #596]	; (80083a4 <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330a      	adds	r3, #10
 8008154:	001a      	movs	r2, r3
 8008156:	4b93      	ldr	r3, [pc, #588]	; (80083a4 <HAL_GPIO_EXTI_Falling_Callback+0x618>)
 8008158:	601a      	str	r2, [r3, #0]
						}

						if (chronoSeconds < 0) {
 800815a:	4b94      	ldr	r3, [pc, #592]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b25b      	sxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	da11      	bge.n	8008188 <HAL_GPIO_EXTI_Falling_Callback+0x3fc>
							chronoMinutes--;
 8008164:	4b93      	ldr	r3, [pc, #588]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b21b      	sxth	r3, r3
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29b      	uxth	r3, r3
 8008170:	b21a      	sxth	r2, r3
 8008172:	4b90      	ldr	r3, [pc, #576]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 8008174:	801a      	strh	r2, [r3, #0]
							chronoSeconds = chronoSeconds + 60;
 8008176:	4b8d      	ldr	r3, [pc, #564]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b25b      	sxtb	r3, r3
 800817c:	b2db      	uxtb	r3, r3
 800817e:	333c      	adds	r3, #60	; 0x3c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	b25a      	sxtb	r2, r3
 8008184:	4b89      	ldr	r3, [pc, #548]	; (80083ac <HAL_GPIO_EXTI_Falling_Callback+0x620>)
 8008186:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMinutes < 0) {
 8008188:	4b8a      	ldr	r3, [pc, #552]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b21b      	sxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	da11      	bge.n	80081b6 <HAL_GPIO_EXTI_Falling_Callback+0x42a>
							chronoHours--;
 8008192:	4b8a      	ldr	r3, [pc, #552]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	b2db      	uxtb	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	b25a      	sxtb	r2, r3
 80081a0:	4b86      	ldr	r3, [pc, #536]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80081a2:	701a      	strb	r2, [r3, #0]
							chronoMinutes = chronoMinutes + 60;
 80081a4:	4b83      	ldr	r3, [pc, #524]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b21b      	sxth	r3, r3
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	333c      	adds	r3, #60	; 0x3c
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	b21a      	sxth	r2, r3
 80081b2:	4b80      	ldr	r3, [pc, #512]	; (80083b4 <HAL_GPIO_EXTI_Falling_Callback+0x628>)
 80081b4:	801a      	strh	r2, [r3, #0]
						}

						if (chronoHours < 0) {
 80081b6:	4b81      	ldr	r3, [pc, #516]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da11      	bge.n	80081e4 <HAL_GPIO_EXTI_Falling_Callback+0x458>
							chronoDay--;
 80081c0:	4b80      	ldr	r3, [pc, #512]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b25b      	sxtb	r3, r3
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	b25a      	sxtb	r2, r3
 80081ce:	4b7d      	ldr	r3, [pc, #500]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 80081d0:	701a      	strb	r2, [r3, #0]
							chronoHours = chronoHours + 24;
 80081d2:	4b7a      	ldr	r3, [pc, #488]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b25b      	sxtb	r3, r3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3318      	adds	r3, #24
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	b25a      	sxtb	r2, r3
 80081e0:	4b76      	ldr	r3, [pc, #472]	; (80083bc <HAL_GPIO_EXTI_Falling_Callback+0x630>)
 80081e2:	701a      	strb	r2, [r3, #0]
						}

						if (chronoDay < 0) {
 80081e4:	4b77      	ldr	r3, [pc, #476]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	b25b      	sxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da11      	bge.n	8008212 <HAL_GPIO_EXTI_Falling_Callback+0x486>
							chronoMonth--;
 80081ee:	4b77      	ldr	r3, [pc, #476]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	b25a      	sxtb	r2, r3
 80081fc:	4b73      	ldr	r3, [pc, #460]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 80081fe:	701a      	strb	r2, [r3, #0]
							chronoDay = chronoDay + 30;
 8008200:	4b70      	ldr	r3, [pc, #448]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b25b      	sxtb	r3, r3
 8008206:	b2db      	uxtb	r3, r3
 8008208:	331e      	adds	r3, #30
 800820a:	b2db      	uxtb	r3, r3
 800820c:	b25a      	sxtb	r2, r3
 800820e:	4b6d      	ldr	r3, [pc, #436]	; (80083c4 <HAL_GPIO_EXTI_Falling_Callback+0x638>)
 8008210:	701a      	strb	r2, [r3, #0]
						}

						if (chronoMonth < 0) {
 8008212:	4b6e      	ldr	r3, [pc, #440]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b25b      	sxtb	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	da11      	bge.n	8008240 <HAL_GPIO_EXTI_Falling_Callback+0x4b4>
							chronoYear--;
 800821c:	4b6d      	ldr	r3, [pc, #436]	; (80083d4 <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b25b      	sxtb	r3, r3
 8008222:	b2db      	uxtb	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	b25a      	sxtb	r2, r3
 800822a:	4b6a      	ldr	r3, [pc, #424]	; (80083d4 <HAL_GPIO_EXTI_Falling_Callback+0x648>)
 800822c:	701a      	strb	r2, [r3, #0]
							chronoMonth = chronoMonth + 12;
 800822e:	4b67      	ldr	r3, [pc, #412]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b25b      	sxtb	r3, r3
 8008234:	b2db      	uxtb	r3, r3
 8008236:	330c      	adds	r3, #12
 8008238:	b2db      	uxtb	r3, r3
 800823a:	b25a      	sxtb	r2, r3
 800823c:	4b63      	ldr	r3, [pc, #396]	; (80083cc <HAL_GPIO_EXTI_Falling_Callback+0x640>)
 800823e:	701a      	strb	r2, [r3, #0]
						}

						mode = MODE_STOP;
 8008240:	4b4a      	ldr	r3, [pc, #296]	; (800836c <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 8008242:	2202      	movs	r2, #2
 8008244:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 8008246:	e328      	b.n	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>

					}

					else if (mode == MODE_STOP) { //start chrono if was stopped
 8008248:	4b48      	ldr	r3, [pc, #288]	; (800836c <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d000      	beq.n	8008254 <HAL_GPIO_EXTI_Falling_Callback+0x4c8>
 8008252:	e322      	b.n	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>

						mode = MODE_CHRONO;
 8008254:	4b45      	ldr	r3, [pc, #276]	; (800836c <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 8008256:	2201      	movs	r2, #1
 8008258:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800825a:	e31e      	b.n	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>

					}

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800825c:	4b5e      	ldr	r3, [pc, #376]	; (80083d8 <HAL_GPIO_EXTI_Falling_Callback+0x64c>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d000      	beq.n	8008268 <HAL_GPIO_EXTI_Falling_Callback+0x4dc>
 8008266:	e318      	b.n	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>
					// if start was pressed in settings, add value
					switch (settingsPointer) {
 8008268:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <HAL_GPIO_EXTI_Falling_Callback+0x650>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b0a      	cmp	r3, #10
 8008270:	d900      	bls.n	8008274 <HAL_GPIO_EXTI_Falling_Callback+0x4e8>
 8008272:	e204      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
 8008274:	009a      	lsls	r2, r3, #2
 8008276:	4b5a      	ldr	r3, [pc, #360]	; (80083e0 <HAL_GPIO_EXTI_Falling_Callback+0x654>)
 8008278:	18d3      	adds	r3, r2, r3
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	469f      	mov	pc, r3
					case SETTINGS_HOURS:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800827e:	23a0      	movs	r3, #160	; 0xa0
 8008280:	05db      	lsls	r3, r3, #23
 8008282:	2108      	movs	r1, #8
 8008284:	0018      	movs	r0, r3
 8008286:	f7fc fcc5 	bl	8004c14 <HAL_GPIO_ReadPin>
 800828a:	0003      	movs	r3, r0
 800828c:	2b01      	cmp	r3, #1
 800828e:	d112      	bne.n	80082b6 <HAL_GPIO_EXTI_Falling_Callback+0x52a>
							hours++;
 8008290:	4b3f      	ldr	r3, [pc, #252]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b25b      	sxtb	r3, r3
 8008296:	b2db      	uxtb	r3, r3
 8008298:	3301      	adds	r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	b25a      	sxtb	r2, r3
 800829e:	4b3c      	ldr	r3, [pc, #240]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082a0:	701a      	strb	r2, [r3, #0]
							if (hours > 23)
 80082a2:	4b3b      	ldr	r3, [pc, #236]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b25b      	sxtb	r3, r3
 80082a8:	2b17      	cmp	r3, #23
 80082aa:	dc00      	bgt.n	80082ae <HAL_GPIO_EXTI_Falling_Callback+0x522>
 80082ac:	e1d6      	b.n	800865c <HAL_GPIO_EXTI_Falling_Callback+0x8d0>
								hours = 0;
 80082ae:	4b38      	ldr	r3, [pc, #224]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
								hours = 23;

						}

						break;
 80082b4:	e1d2      	b.n	800865c <HAL_GPIO_EXTI_Falling_Callback+0x8d0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 80082b6:	23a0      	movs	r3, #160	; 0xa0
 80082b8:	05db      	lsls	r3, r3, #23
 80082ba:	2108      	movs	r1, #8
 80082bc:	0018      	movs	r0, r3
 80082be:	f7fc fca9 	bl	8004c14 <HAL_GPIO_ReadPin>
 80082c2:	1e03      	subs	r3, r0, #0
 80082c4:	d000      	beq.n	80082c8 <HAL_GPIO_EXTI_Falling_Callback+0x53c>
 80082c6:	e1c9      	b.n	800865c <HAL_GPIO_EXTI_Falling_Callback+0x8d0>
							hours--;
 80082c8:	4b31      	ldr	r3, [pc, #196]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	b25a      	sxtb	r2, r3
 80082d6:	4b2e      	ldr	r3, [pc, #184]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082d8:	701a      	strb	r2, [r3, #0]
							if (hours < 0)
 80082da:	4b2d      	ldr	r3, [pc, #180]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	b25b      	sxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	db00      	blt.n	80082e6 <HAL_GPIO_EXTI_Falling_Callback+0x55a>
 80082e4:	e1ba      	b.n	800865c <HAL_GPIO_EXTI_Falling_Callback+0x8d0>
								hours = 23;
 80082e6:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <HAL_GPIO_EXTI_Falling_Callback+0x604>)
 80082e8:	2217      	movs	r2, #23
 80082ea:	701a      	strb	r2, [r3, #0]
						break;
 80082ec:	e1b6      	b.n	800865c <HAL_GPIO_EXTI_Falling_Callback+0x8d0>

					case SETTINGS_MINUTES:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80082ee:	23a0      	movs	r3, #160	; 0xa0
 80082f0:	05db      	lsls	r3, r3, #23
 80082f2:	2108      	movs	r1, #8
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7fc fc8d 	bl	8004c14 <HAL_GPIO_ReadPin>
 80082fa:	0003      	movs	r3, r0
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d112      	bne.n	8008326 <HAL_GPIO_EXTI_Falling_Callback+0x59a>
							minutes++;
 8008300:	4b1e      	ldr	r3, [pc, #120]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b21b      	sxth	r3, r3
 8008306:	b29b      	uxth	r3, r3
 8008308:	3301      	adds	r3, #1
 800830a:	b29b      	uxth	r3, r3
 800830c:	b21a      	sxth	r2, r3
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008310:	801a      	strh	r2, [r3, #0]
							if (minutes > 59)
 8008312:	4b1a      	ldr	r3, [pc, #104]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b21b      	sxth	r3, r3
 8008318:	2b3b      	cmp	r3, #59	; 0x3b
 800831a:	dc00      	bgt.n	800831e <HAL_GPIO_EXTI_Falling_Callback+0x592>
 800831c:	e1a0      	b.n	8008660 <HAL_GPIO_EXTI_Falling_Callback+0x8d4>
								minutes = 0;
 800831e:	4b17      	ldr	r3, [pc, #92]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008320:	2200      	movs	r2, #0
 8008322:	801a      	strh	r2, [r3, #0]
								== 0) {
							minutes--;
							if (minutes < 0)
								minutes = 59;
						}
						break;
 8008324:	e19c      	b.n	8008660 <HAL_GPIO_EXTI_Falling_Callback+0x8d4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8008326:	23a0      	movs	r3, #160	; 0xa0
 8008328:	05db      	lsls	r3, r3, #23
 800832a:	2108      	movs	r1, #8
 800832c:	0018      	movs	r0, r3
 800832e:	f7fc fc71 	bl	8004c14 <HAL_GPIO_ReadPin>
 8008332:	1e03      	subs	r3, r0, #0
 8008334:	d000      	beq.n	8008338 <HAL_GPIO_EXTI_Falling_Callback+0x5ac>
 8008336:	e193      	b.n	8008660 <HAL_GPIO_EXTI_Falling_Callback+0x8d4>
							minutes--;
 8008338:	4b10      	ldr	r3, [pc, #64]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b21b      	sxth	r3, r3
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29b      	uxth	r3, r3
 8008344:	b21a      	sxth	r2, r3
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008348:	801a      	strh	r2, [r3, #0]
							if (minutes < 0)
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b21b      	sxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	db00      	blt.n	8008356 <HAL_GPIO_EXTI_Falling_Callback+0x5ca>
 8008354:	e184      	b.n	8008660 <HAL_GPIO_EXTI_Falling_Callback+0x8d4>
								minutes = 59;
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 8008358:	223b      	movs	r2, #59	; 0x3b
 800835a:	801a      	strh	r2, [r3, #0]
						break;
 800835c:	e180      	b.n	8008660 <HAL_GPIO_EXTI_Falling_Callback+0x8d4>

					case SETTINGS_SECONDS:
						seconds = 0;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <HAL_GPIO_EXTI_Falling_Callback+0x5f4>)
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
						sTime.SubSeconds = 0;
 8008364:	4b03      	ldr	r3, [pc, #12]	; (8008374 <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
						break;
 800836a:	e188      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
 800836c:	20000410 	.word	0x20000410
 8008370:	200006c8 	.word	0x200006c8
 8008374:	200001ac 	.word	0x200001ac
 8008378:	20000588 	.word	0x20000588
 800837c:	20000638 	.word	0x20000638
 8008380:	200005eb 	.word	0x200005eb
 8008384:	0000639c 	.word	0x0000639c
 8008388:	000009f6 	.word	0x000009f6
 800838c:	2000063c 	.word	0x2000063c
 8008390:	2000064b 	.word	0x2000064b
 8008394:	200005f8 	.word	0x200005f8
 8008398:	20000309 	.word	0x20000309
 800839c:	200005f4 	.word	0x200005f4
 80083a0:	20000134 	.word	0x20000134
 80083a4:	20000154 	.word	0x20000154
 80083a8:	20000142 	.word	0x20000142
 80083ac:	200005f6 	.word	0x200005f6
 80083b0:	200002fe 	.word	0x200002fe
 80083b4:	20000636 	.word	0x20000636
 80083b8:	20000595 	.word	0x20000595
 80083bc:	2000030d 	.word	0x2000030d
 80083c0:	200005f7 	.word	0x200005f7
 80083c4:	2000061e 	.word	0x2000061e
 80083c8:	20000292 	.word	0x20000292
 80083cc:	200002cc 	.word	0x200002cc
 80083d0:	20000564 	.word	0x20000564
 80083d4:	200004e2 	.word	0x200004e2
 80083d8:	200004de 	.word	0x200004de
 80083dc:	20000319 	.word	0x20000319
 80083e0:	08013f54 	.word	0x08013f54

					case SETTINGS_DAYS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80083e4:	23a0      	movs	r3, #160	; 0xa0
 80083e6:	05db      	lsls	r3, r3, #23
 80083e8:	2108      	movs	r1, #8
 80083ea:	0018      	movs	r0, r3
 80083ec:	f7fc fc12 	bl	8004c14 <HAL_GPIO_ReadPin>
 80083f0:	0003      	movs	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d110      	bne.n	8008418 <HAL_GPIO_EXTI_Falling_Callback+0x68c>
							day++;
 80083f6:	4bc3      	ldr	r3, [pc, #780]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	3301      	adds	r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	4bc0      	ldr	r3, [pc, #768]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 8008402:	701a      	strb	r2, [r3, #0]
							if (day > 31)
 8008404:	4bbf      	ldr	r3, [pc, #764]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b1f      	cmp	r3, #31
 800840c:	d800      	bhi.n	8008410 <HAL_GPIO_EXTI_Falling_Callback+0x684>
 800840e:	e129      	b.n	8008664 <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								day = 1;
 8008410:	4bbc      	ldr	r3, [pc, #752]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 8008412:	2201      	movs	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]
							day--;
							if (day < 1)
								day = 31;
						}

						break;
 8008416:	e125      	b.n	8008664 <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8008418:	23a0      	movs	r3, #160	; 0xa0
 800841a:	05db      	lsls	r3, r3, #23
 800841c:	2108      	movs	r1, #8
 800841e:	0018      	movs	r0, r3
 8008420:	f7fc fbf8 	bl	8004c14 <HAL_GPIO_ReadPin>
 8008424:	1e03      	subs	r3, r0, #0
 8008426:	d000      	beq.n	800842a <HAL_GPIO_EXTI_Falling_Callback+0x69e>
 8008428:	e11c      	b.n	8008664 <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
							day--;
 800842a:	4bb6      	ldr	r3, [pc, #728]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	3b01      	subs	r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	4bb3      	ldr	r3, [pc, #716]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 8008436:	701a      	strb	r2, [r3, #0]
							if (day < 1)
 8008438:	4bb2      	ldr	r3, [pc, #712]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d000      	beq.n	8008444 <HAL_GPIO_EXTI_Falling_Callback+0x6b8>
 8008442:	e10f      	b.n	8008664 <HAL_GPIO_EXTI_Falling_Callback+0x8d8>
								day = 31;
 8008444:	4baf      	ldr	r3, [pc, #700]	; (8008704 <HAL_GPIO_EXTI_Falling_Callback+0x978>)
 8008446:	221f      	movs	r2, #31
 8008448:	701a      	strb	r2, [r3, #0]
						break;
 800844a:	e10b      	b.n	8008664 <HAL_GPIO_EXTI_Falling_Callback+0x8d8>

					case SETTINGS_MONTHS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800844c:	23a0      	movs	r3, #160	; 0xa0
 800844e:	05db      	lsls	r3, r3, #23
 8008450:	2108      	movs	r1, #8
 8008452:	0018      	movs	r0, r3
 8008454:	f7fc fbde 	bl	8004c14 <HAL_GPIO_ReadPin>
 8008458:	0003      	movs	r3, r0
 800845a:	2b01      	cmp	r3, #1
 800845c:	d110      	bne.n	8008480 <HAL_GPIO_EXTI_Falling_Callback+0x6f4>
							month++;
 800845e:	4baa      	ldr	r3, [pc, #680]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	3301      	adds	r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 800846a:	701a      	strb	r2, [r3, #0]
							if (month > 12)
 800846c:	4ba6      	ldr	r3, [pc, #664]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b0c      	cmp	r3, #12
 8008474:	d800      	bhi.n	8008478 <HAL_GPIO_EXTI_Falling_Callback+0x6ec>
 8008476:	e0f7      	b.n	8008668 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								month = 1;
 8008478:	4ba3      	ldr	r3, [pc, #652]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
							month--;
							if (month < 1)
								month = 12;
						}

						break;
 800847e:	e0f3      	b.n	8008668 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8008480:	23a0      	movs	r3, #160	; 0xa0
 8008482:	05db      	lsls	r3, r3, #23
 8008484:	2108      	movs	r1, #8
 8008486:	0018      	movs	r0, r3
 8008488:	f7fc fbc4 	bl	8004c14 <HAL_GPIO_ReadPin>
 800848c:	1e03      	subs	r3, r0, #0
 800848e:	d000      	beq.n	8008492 <HAL_GPIO_EXTI_Falling_Callback+0x706>
 8008490:	e0ea      	b.n	8008668 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
							month--;
 8008492:	4b9d      	ldr	r3, [pc, #628]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	4b9a      	ldr	r3, [pc, #616]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 800849e:	701a      	strb	r2, [r3, #0]
							if (month < 1)
 80084a0:	4b99      	ldr	r3, [pc, #612]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d000      	beq.n	80084ac <HAL_GPIO_EXTI_Falling_Callback+0x720>
 80084aa:	e0dd      	b.n	8008668 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
								month = 12;
 80084ac:	4b96      	ldr	r3, [pc, #600]	; (8008708 <HAL_GPIO_EXTI_Falling_Callback+0x97c>)
 80084ae:	220c      	movs	r2, #12
 80084b0:	701a      	strb	r2, [r3, #0]
						break;
 80084b2:	e0d9      	b.n	8008668 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>

					case SETTINGS_YEARS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80084b4:	23a0      	movs	r3, #160	; 0xa0
 80084b6:	05db      	lsls	r3, r3, #23
 80084b8:	2108      	movs	r1, #8
 80084ba:	0018      	movs	r0, r3
 80084bc:	f7fc fbaa 	bl	8004c14 <HAL_GPIO_ReadPin>
 80084c0:	0003      	movs	r3, r0
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d110      	bne.n	80084e8 <HAL_GPIO_EXTI_Falling_Callback+0x75c>
							year++;
 80084c6:	4b91      	ldr	r3, [pc, #580]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	3301      	adds	r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b8e      	ldr	r3, [pc, #568]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 80084d2:	701a      	strb	r2, [r3, #0]
							if (year > 99)
 80084d4:	4b8d      	ldr	r3, [pc, #564]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b63      	cmp	r3, #99	; 0x63
 80084dc:	d800      	bhi.n	80084e0 <HAL_GPIO_EXTI_Falling_Callback+0x754>
 80084de:	e0c5      	b.n	800866c <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								year = 1;
 80084e0:	4b8a      	ldr	r3, [pc, #552]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
							year--;
							if (year < 1)
								year = 99;
						}

						break;
 80084e6:	e0c1      	b.n	800866c <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 80084e8:	23a0      	movs	r3, #160	; 0xa0
 80084ea:	05db      	lsls	r3, r3, #23
 80084ec:	2108      	movs	r1, #8
 80084ee:	0018      	movs	r0, r3
 80084f0:	f7fc fb90 	bl	8004c14 <HAL_GPIO_ReadPin>
 80084f4:	1e03      	subs	r3, r0, #0
 80084f6:	d000      	beq.n	80084fa <HAL_GPIO_EXTI_Falling_Callback+0x76e>
 80084f8:	e0b8      	b.n	800866c <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
							year--;
 80084fa:	4b84      	ldr	r3, [pc, #528]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	4b81      	ldr	r3, [pc, #516]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8008506:	701a      	strb	r2, [r3, #0]
							if (year < 1)
 8008508:	4b80      	ldr	r3, [pc, #512]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d000      	beq.n	8008514 <HAL_GPIO_EXTI_Falling_Callback+0x788>
 8008512:	e0ab      	b.n	800866c <HAL_GPIO_EXTI_Falling_Callback+0x8e0>
								year = 99;
 8008514:	4b7d      	ldr	r3, [pc, #500]	; (800870c <HAL_GPIO_EXTI_Falling_Callback+0x980>)
 8008516:	2263      	movs	r2, #99	; 0x63
 8008518:	701a      	strb	r2, [r3, #0]
						break;
 800851a:	e0a7      	b.n	800866c <HAL_GPIO_EXTI_Falling_Callback+0x8e0>

					case SETTINGS_LAYOUT:
						if (layout < layoutsCounter)
 800851c:	4b7c      	ldr	r3, [pc, #496]	; (8008710 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	4b7c      	ldr	r3, [pc, #496]	; (8008714 <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d207      	bcs.n	800853a <HAL_GPIO_EXTI_Falling_Callback+0x7ae>
							layout++;
 800852a:	4b79      	ldr	r3, [pc, #484]	; (8008710 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	3301      	adds	r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	4b76      	ldr	r3, [pc, #472]	; (8008710 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 8008536:	701a      	strb	r2, [r3, #0]
						else if (layout >= layoutsCounter)
							layout = 1;
						break;
 8008538:	e09a      	b.n	8008670 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
						else if (layout >= layoutsCounter)
 800853a:	4b75      	ldr	r3, [pc, #468]	; (8008710 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	4b74      	ldr	r3, [pc, #464]	; (8008714 <HAL_GPIO_EXTI_Falling_Callback+0x988>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d200      	bcs.n	800854a <HAL_GPIO_EXTI_Falling_Callback+0x7be>
 8008548:	e092      	b.n	8008670 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>
							layout = 1;
 800854a:	4b71      	ldr	r3, [pc, #452]	; (8008710 <HAL_GPIO_EXTI_Falling_Callback+0x984>)
 800854c:	2201      	movs	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
						break;
 8008550:	e08e      	b.n	8008670 <HAL_GPIO_EXTI_Falling_Callback+0x8e4>

					case SETTINGS_COLOR:
						if (colorScheme < 2)
 8008552:	4b71      	ldr	r3, [pc, #452]	; (8008718 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	d807      	bhi.n	800856c <HAL_GPIO_EXTI_Falling_Callback+0x7e0>
							colorScheme++;
 800855c:	4b6e      	ldr	r3, [pc, #440]	; (8008718 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	3301      	adds	r3, #1
 8008564:	b2da      	uxtb	r2, r3
 8008566:	4b6c      	ldr	r3, [pc, #432]	; (8008718 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 8008568:	701a      	strb	r2, [r3, #0]
						else if (colorScheme >= 2)
							colorScheme = 1;
						break;
 800856a:	e083      	b.n	8008674 <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
						else if (colorScheme >= 2)
 800856c:	4b6a      	ldr	r3, [pc, #424]	; (8008718 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b01      	cmp	r3, #1
 8008574:	d800      	bhi.n	8008578 <HAL_GPIO_EXTI_Falling_Callback+0x7ec>
 8008576:	e07d      	b.n	8008674 <HAL_GPIO_EXTI_Falling_Callback+0x8e8>
							colorScheme = 1;
 8008578:	4b67      	ldr	r3, [pc, #412]	; (8008718 <HAL_GPIO_EXTI_Falling_Callback+0x98c>)
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
						break;
 800857e:	e079      	b.n	8008674 <HAL_GPIO_EXTI_Falling_Callback+0x8e8>

					case SETTINGS_PRESS_REF:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 8008580:	23a0      	movs	r3, #160	; 0xa0
 8008582:	05db      	lsls	r3, r3, #23
 8008584:	2108      	movs	r1, #8
 8008586:	0018      	movs	r0, r3
 8008588:	f7fc fb44 	bl	8004c14 <HAL_GPIO_ReadPin>
 800858c:	0003      	movs	r3, r0
 800858e:	2b01      	cmp	r3, #1
 8008590:	d113      	bne.n	80085ba <HAL_GPIO_EXTI_Falling_Callback+0x82e>
							pressureReference++;
 8008592:	4b62      	ldr	r3, [pc, #392]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b21b      	sxth	r3, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	3301      	adds	r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	b21a      	sxth	r2, r3
 80085a0:	4b5e      	ldr	r3, [pc, #376]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085a2:	801a      	strh	r2, [r3, #0]
							if (pressureReference > 1300)
 80085a4:	4b5d      	ldr	r3, [pc, #372]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b21b      	sxth	r3, r3
 80085aa:	4a5d      	ldr	r2, [pc, #372]	; (8008720 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	dd63      	ble.n	8008678 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
								pressureReference = 700;
 80085b0:	4b5a      	ldr	r3, [pc, #360]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085b2:	22af      	movs	r2, #175	; 0xaf
 80085b4:	0092      	lsls	r2, r2, #2
 80085b6:	801a      	strh	r2, [r3, #0]
								== 0) {
							pressureReference--;
							if (pressureReference < 700)
								pressureReference = 1300;
						}
						break;
 80085b8:	e05e      	b.n	8008678 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 80085ba:	23a0      	movs	r3, #160	; 0xa0
 80085bc:	05db      	lsls	r3, r3, #23
 80085be:	2108      	movs	r1, #8
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7fc fb27 	bl	8004c14 <HAL_GPIO_ReadPin>
 80085c6:	1e03      	subs	r3, r0, #0
 80085c8:	d156      	bne.n	8008678 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
							pressureReference--;
 80085ca:	4b54      	ldr	r3, [pc, #336]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b21b      	sxth	r3, r3
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	4b50      	ldr	r3, [pc, #320]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085da:	801a      	strh	r2, [r3, #0]
							if (pressureReference < 700)
 80085dc:	4b4f      	ldr	r3, [pc, #316]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b21a      	sxth	r2, r3
 80085e2:	23af      	movs	r3, #175	; 0xaf
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	429a      	cmp	r2, r3
 80085e8:	da46      	bge.n	8008678 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>
								pressureReference = 1300;
 80085ea:	4b4c      	ldr	r3, [pc, #304]	; (800871c <HAL_GPIO_EXTI_Falling_Callback+0x990>)
 80085ec:	4a4c      	ldr	r2, [pc, #304]	; (8008720 <HAL_GPIO_EXTI_Falling_Callback+0x994>)
 80085ee:	801a      	strh	r2, [r3, #0]
						break;
 80085f0:	e042      	b.n	8008678 <HAL_GPIO_EXTI_Falling_Callback+0x8ec>

					case SETTINGS_TEMP_CMP:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 80085f2:	23a0      	movs	r3, #160	; 0xa0
 80085f4:	05db      	lsls	r3, r3, #23
 80085f6:	2108      	movs	r1, #8
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7fc fb0b 	bl	8004c14 <HAL_GPIO_ReadPin>
 80085fe:	0003      	movs	r3, r0
 8008600:	2b01      	cmp	r3, #1
 8008602:	d111      	bne.n	8008628 <HAL_GPIO_EXTI_Falling_Callback+0x89c>
							temperatureCompensation++;
 8008604:	4b47      	ldr	r3, [pc, #284]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b25b      	sxtb	r3, r3
 800860a:	b2db      	uxtb	r3, r3
 800860c:	3301      	adds	r3, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	b25a      	sxtb	r2, r3
 8008612:	4b44      	ldr	r3, [pc, #272]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008614:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation > 20)
 8008616:	4b43      	ldr	r3, [pc, #268]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	b25b      	sxtb	r3, r3
 800861c:	2b14      	cmp	r3, #20
 800861e:	dd2d      	ble.n	800867c <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
								temperatureCompensation = -20;
 8008620:	4b40      	ldr	r3, [pc, #256]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008622:	22ec      	movs	r2, #236	; 0xec
 8008624:	701a      	strb	r2, [r3, #0]
							temperatureCompensation--;
							if (temperatureCompensation < -20)
								temperatureCompensation = 20;
						}

						break;
 8008626:	e029      	b.n	800867c <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 8008628:	23a0      	movs	r3, #160	; 0xa0
 800862a:	05db      	lsls	r3, r3, #23
 800862c:	2108      	movs	r1, #8
 800862e:	0018      	movs	r0, r3
 8008630:	f7fc faf0 	bl	8004c14 <HAL_GPIO_ReadPin>
 8008634:	1e03      	subs	r3, r0, #0
 8008636:	d121      	bne.n	800867c <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
							temperatureCompensation--;
 8008638:	4b3a      	ldr	r3, [pc, #232]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	b25b      	sxtb	r3, r3
 800863e:	b2db      	uxtb	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	b25a      	sxtb	r2, r3
 8008646:	4b37      	ldr	r3, [pc, #220]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008648:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation < -20)
 800864a:	4b36      	ldr	r3, [pc, #216]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b25b      	sxtb	r3, r3
 8008650:	3314      	adds	r3, #20
 8008652:	da13      	bge.n	800867c <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
								temperatureCompensation = 20;
 8008654:	4b33      	ldr	r3, [pc, #204]	; (8008724 <HAL_GPIO_EXTI_Falling_Callback+0x998>)
 8008656:	2214      	movs	r2, #20
 8008658:	701a      	strb	r2, [r3, #0]
						break;
 800865a:	e00f      	b.n	800867c <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
						break;
 800865c:	46c0      	nop			; (mov r8, r8)
 800865e:	e00e      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008660:	46c0      	nop			; (mov r8, r8)
 8008662:	e00c      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008664:	46c0      	nop			; (mov r8, r8)
 8008666:	e00a      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	e008      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 800866c:	46c0      	nop			; (mov r8, r8)
 800866e:	e006      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008670:	46c0      	nop			; (mov r8, r8)
 8008672:	e004      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008674:	46c0      	nop			; (mov r8, r8)
 8008676:	e002      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 8008678:	46c0      	nop			; (mov r8, r8)
 800867a:	e000      	b.n	800867e <HAL_GPIO_EXTI_Falling_Callback+0x8f2>
						break;
 800867c:	46c0      	nop			; (mov r8, r8)

					}

					rtcSetTime();
 800867e:	f005 fc95 	bl	800dfac <rtcSetTime>
			if (flagLocked == UNLOCKED) {
 8008682:	e10a      	b.n	800889a <HAL_GPIO_EXTI_Falling_Callback+0xb0e>

				}
			}
			//										RESET BUTTON

		} else if (GPIO_Pin == RESET_Pin
 8008684:	1dbb      	adds	r3, r7, #6
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	2b10      	cmp	r3, #16
 800868a:	d000      	beq.n	800868e <HAL_GPIO_EXTI_Falling_Callback+0x902>
 800868c:	e09b      	b.n	80087c6 <HAL_GPIO_EXTI_Falling_Callback+0xa3a>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800868e:	23a0      	movs	r3, #160	; 0xa0
 8008690:	05db      	lsls	r3, r3, #23
 8008692:	2110      	movs	r1, #16
 8008694:	0018      	movs	r0, r3
 8008696:	f7fc fabd 	bl	8004c14 <HAL_GPIO_ReadPin>
 800869a:	1e03      	subs	r3, r0, #0
 800869c:	d000      	beq.n	80086a0 <HAL_GPIO_EXTI_Falling_Callback+0x914>
 800869e:	e092      	b.n	80087c6 <HAL_GPIO_EXTI_Falling_Callback+0xa3a>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_SET
 80086a0:	23a0      	movs	r3, #160	; 0xa0
 80086a2:	05db      	lsls	r3, r3, #23
 80086a4:	2108      	movs	r1, #8
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7fc fab4 	bl	8004c14 <HAL_GPIO_ReadPin>
 80086ac:	0003      	movs	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d000      	beq.n	80086b4 <HAL_GPIO_EXTI_Falling_Callback+0x928>
 80086b2:	e088      	b.n	80087c6 <HAL_GPIO_EXTI_Falling_Callback+0xa3a>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 80086b4:	23a0      	movs	r3, #160	; 0xa0
 80086b6:	05db      	lsls	r3, r3, #23
 80086b8:	2104      	movs	r1, #4
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7fc faaa 	bl	8004c14 <HAL_GPIO_ReadPin>
 80086c0:	0003      	movs	r3, r0
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d000      	beq.n	80086c8 <HAL_GPIO_EXTI_Falling_Callback+0x93c>
 80086c6:	e07e      	b.n	80087c6 <HAL_GPIO_EXTI_Falling_Callback+0xa3a>
						== GPIO_PIN_SET) {

			counterForce = 0;
 80086c8:	4b17      	ldr	r3, [pc, #92]	; (8008728 <HAL_GPIO_EXTI_Falling_Callback+0x99c>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
			counterMultiplePress++;
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	3301      	adds	r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	4b14      	ldr	r3, [pc, #80]	; (800872c <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 80086da:	701a      	strb	r2, [r3, #0]

			if (flagSettings == FLAG_SETTINGS_OFF) {
 80086dc:	4b14      	ldr	r3, [pc, #80]	; (8008730 <HAL_GPIO_EXTI_Falling_Callback+0x9a4>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d12b      	bne.n	800873e <HAL_GPIO_EXTI_Falling_Callback+0x9b2>
				if (counterMultiplePress >= MULTIPLE_PRESS) {
 80086e6:	4b11      	ldr	r3, [pc, #68]	; (800872c <HAL_GPIO_EXTI_Falling_Callback+0x9a0>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d926      	bls.n	800873e <HAL_GPIO_EXTI_Falling_Callback+0x9b2>
					if (flagLocked == LOCKED) {
 80086f0:	4b10      	ldr	r3, [pc, #64]	; (8008734 <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d11e      	bne.n	8008738 <HAL_GPIO_EXTI_Falling_Callback+0x9ac>
						flagLocked = UNLOCKED;
 80086fa:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <HAL_GPIO_EXTI_Falling_Callback+0x9a8>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e01d      	b.n	800873e <HAL_GPIO_EXTI_Falling_Callback+0x9b2>
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	200005f8 	.word	0x200005f8
 8008708:	20000309 	.word	0x20000309
 800870c:	200005f4 	.word	0x200005f4
 8008710:	2000062f 	.word	0x2000062f
 8008714:	20000028 	.word	0x20000028
 8008718:	20000614 	.word	0x20000614
 800871c:	2000002e 	.word	0x2000002e
 8008720:	00000514 	.word	0x00000514
 8008724:	2000002c 	.word	0x2000002c
 8008728:	20000616 	.word	0x20000616
 800872c:	2000061c 	.word	0x2000061c
 8008730:	200004de 	.word	0x200004de
 8008734:	2000040f 	.word	0x2000040f
					} else {
						flagLocked = LOCKED;
 8008738:	4b5b      	ldr	r3, [pc, #364]	; (80088a8 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>)
 800873a:	2201      	movs	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (flagLocked == UNLOCKED) {
 800873e:	4b5a      	ldr	r3, [pc, #360]	; (80088a8 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d000      	beq.n	800874a <HAL_GPIO_EXTI_Falling_Callback+0x9be>
 8008748:	e0a9      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>

				if (mode == MODE_NORMAL && flagSettings == FLAG_SETTINGS_OFF) {
 800874a:	4b58      	ldr	r3, [pc, #352]	; (80088ac <HAL_GPIO_EXTI_Falling_Callback+0xb20>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <HAL_GPIO_EXTI_Falling_Callback+0x9d2>
 8008754:	4b56      	ldr	r3, [pc, #344]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d032      	beq.n	80087c4 <HAL_GPIO_EXTI_Falling_Callback+0xa38>
//			interfaceFullUpdateFlag = 1; //legacy
				}

				else if (mode == MODE_STOP && flagSettings == FLAG_SETTINGS_OFF) {
 800875e:	4b53      	ldr	r3, [pc, #332]	; (80088ac <HAL_GPIO_EXTI_Falling_Callback+0xb20>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d110      	bne.n	800878a <HAL_GPIO_EXTI_Falling_Callback+0x9fe>
 8008768:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10b      	bne.n	800878a <HAL_GPIO_EXTI_Falling_Callback+0x9fe>

					mode = MODE_NORMAL;
 8008772:	4b4e      	ldr	r3, [pc, #312]	; (80088ac <HAL_GPIO_EXTI_Falling_Callback+0xb20>)
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
					rtcResetChrono();
 8008778:	f005 fc5c 	bl	800e034 <rtcResetChrono>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 800877c:	4b4d      	ldr	r3, [pc, #308]	; (80088b4 <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 800877e:	2204      	movs	r2, #4
 8008780:	213c      	movs	r1, #60	; 0x3c
 8008782:	0018      	movs	r0, r3
 8008784:	f7fe fa5e 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008788:	e01c      	b.n	80087c4 <HAL_GPIO_EXTI_Falling_Callback+0xa38>
					RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800878a:	4b49      	ldr	r3, [pc, #292]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d000      	beq.n	8008796 <HAL_GPIO_EXTI_Falling_Callback+0xa0a>
 8008794:	e083      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>

					if (settingsPointer < 10) {
 8008796:	4b48      	ldr	r3, [pc, #288]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b09      	cmp	r3, #9
 800879e:	d807      	bhi.n	80087b0 <HAL_GPIO_EXTI_Falling_Callback+0xa24>
						settingsPointer++; // if reset was pressed in settings, forward pointer
 80087a0:	4b45      	ldr	r3, [pc, #276]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	3301      	adds	r3, #1
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b43      	ldr	r3, [pc, #268]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 80087ac:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80087ae:	e076      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>
					} else if (settingsPointer >= 10) {
 80087b0:	4b41      	ldr	r3, [pc, #260]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d800      	bhi.n	80087bc <HAL_GPIO_EXTI_Falling_Callback+0xa30>
 80087ba:	e070      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>
						settingsPointer = 1;
 80087bc:	4b3e      	ldr	r3, [pc, #248]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 80087be:	2201      	movs	r2, #1
 80087c0:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 80087c2:	e06c      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>
 80087c4:	e06b      	b.n	800889e <HAL_GPIO_EXTI_Falling_Callback+0xb12>

				}
			}
			//										SET BUTTON

		} else if (GPIO_Pin == SET_Pin
 80087c6:	1dbb      	adds	r3, r7, #6
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d168      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_RESET
 80087ce:	23a0      	movs	r3, #160	; 0xa0
 80087d0:	05db      	lsls	r3, r3, #23
 80087d2:	2108      	movs	r1, #8
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7fc fa1d 	bl	8004c14 <HAL_GPIO_ReadPin>
 80087da:	1e03      	subs	r3, r0, #0
 80087dc:	d160      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_SET
 80087de:	23a0      	movs	r3, #160	; 0xa0
 80087e0:	05db      	lsls	r3, r3, #23
 80087e2:	2104      	movs	r1, #4
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fc fa15 	bl	8004c14 <HAL_GPIO_ReadPin>
 80087ea:	0003      	movs	r3, r0
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d157      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 80087f0:	23a0      	movs	r3, #160	; 0xa0
 80087f2:	05db      	lsls	r3, r3, #23
 80087f4:	2110      	movs	r1, #16
 80087f6:	0018      	movs	r0, r3
 80087f8:	f7fc fa0c 	bl	8004c14 <HAL_GPIO_ReadPin>
 80087fc:	0003      	movs	r3, r0
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d14e      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 8008802:	4b29      	ldr	r3, [pc, #164]	; (80088a8 <HAL_GPIO_EXTI_Falling_Callback+0xb1c>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d149      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>

				if (flagSettings == FLAG_SETTINGS_OFF
 800880c:	4b28      	ldr	r3, [pc, #160]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d118      	bne.n	8008848 <HAL_GPIO_EXTI_Falling_Callback+0xabc>
						&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) { //go to settings only when Reset button is released
 8008816:	23a0      	movs	r3, #160	; 0xa0
 8008818:	05db      	lsls	r3, r3, #23
 800881a:	2110      	movs	r1, #16
 800881c:	0018      	movs	r0, r3
 800881e:	f7fc f9f9 	bl	8004c14 <HAL_GPIO_ReadPin>
 8008822:	0003      	movs	r3, r0
 8008824:	2b01      	cmp	r3, #1
 8008826:	d10f      	bne.n	8008848 <HAL_GPIO_EXTI_Falling_Callback+0xabc>

					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_SHORT,
 8008828:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 800882a:	2204      	movs	r2, #4
 800882c:	213c      	movs	r1, #60	; 0x3c
 800882e:	0018      	movs	r0, r3
 8008830:	f7fe fa08 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
							RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
//					modeBackup = mode;// legacy, fot keep chrono
					flagSettings = FLAG_SETTINGS_ON;
 8008834:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8008836:	2201      	movs	r2, #1
 8008838:	701a      	strb	r2, [r3, #0]
					counterSettings = SETTINGS_TIME;
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 800883c:	2205      	movs	r2, #5
 800883e:	701a      	strb	r2, [r3, #0]
					settingsPointer = 7;
 8008840:	4b1d      	ldr	r3, [pc, #116]	; (80088b8 <HAL_GPIO_EXTI_Falling_Callback+0xb2c>)
 8008842:	2207      	movs	r2, #7
 8008844:	701a      	strb	r2, [r3, #0]
 8008846:	e02b      	b.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>

				} else if (flagSettings == FLAG_SETTINGS_ON
 8008848:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b01      	cmp	r3, #1
 8008850:	d126      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
						&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1) {
 8008852:	23a0      	movs	r3, #160	; 0xa0
 8008854:	05db      	lsls	r3, r3, #23
 8008856:	2104      	movs	r1, #4
 8008858:	0018      	movs	r0, r3
 800885a:	f7fc f9db 	bl	8004c14 <HAL_GPIO_ReadPin>
 800885e:	0003      	movs	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d11d      	bne.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
					HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 8008864:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <HAL_GPIO_EXTI_Falling_Callback+0xb28>)
 8008866:	2204      	movs	r2, #4
 8008868:	213c      	movs	r1, #60	; 0x3c
 800886a:	0018      	movs	r0, r3
 800886c:	f7fe f9ea 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
							RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
//					mode = modeBackup; /legacy, for keep chrono
					flagSettings = FLAG_SETTINGS_OFF;
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <HAL_GPIO_EXTI_Falling_Callback+0xb24>)
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
					counterSettings = 0;
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <HAL_GPIO_EXTI_Falling_Callback+0xb30>)
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
					interfaceSelectColorScheme(colorScheme);
 800887c:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <HAL_GPIO_EXTI_Falling_Callback+0xb34>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	0018      	movs	r0, r3
 8008884:	f002 fa4e 	bl	800ad24 <interfaceSelectColorScheme>
					interfaceSelectLayout(layout);
 8008888:	4b0e      	ldr	r3, [pc, #56]	; (80088c4 <HAL_GPIO_EXTI_Falling_Callback+0xb38>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	0018      	movs	r0, r3
 8008890:	f001 fd9e 	bl	800a3d0 <interfaceSelectLayout>
				}

			}
		}
	}
}
 8008894:	e004      	b.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chronoYear == 0
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	e002      	b.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
			if (flagLocked == UNLOCKED) {
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	e000      	b.n	80088a0 <HAL_GPIO_EXTI_Falling_Callback+0xb14>
			if (flagLocked == UNLOCKED) {
 800889e:	46c0      	nop			; (mov r8, r8)
}
 80088a0:	46c0      	nop			; (mov r8, r8)
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b002      	add	sp, #8
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	2000040f 	.word	0x2000040f
 80088ac:	20000410 	.word	0x20000410
 80088b0:	200004de 	.word	0x200004de
 80088b4:	200006c8 	.word	0x200006c8
 80088b8:	20000319 	.word	0x20000319
 80088bc:	200005e9 	.word	0x200005e9
 80088c0:	20000614 	.word	0x20000614
 80088c4:	2000062f 	.word	0x2000062f

080088c8 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	0002      	movs	r2, r0
 80088d0:	1dfb      	adds	r3, r7, #7
 80088d2:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80088d4:	23fa      	movs	r3, #250	; 0xfa
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	1df9      	adds	r1, r7, #7
 80088da:	4804      	ldr	r0, [pc, #16]	; (80088ec <DEV_SPI_WriteByte+0x24>)
 80088dc:	2201      	movs	r2, #1
 80088de:	f7fe fb29 	bl	8006f34 <HAL_SPI_Transmit>
}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b002      	add	sp, #8
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	200006f4 	.word	0x200006f4

080088f0 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80088f4:	2380      	movs	r3, #128	; 0x80
 80088f6:	0099      	lsls	r1, r3, #2
 80088f8:	23a0      	movs	r3, #160	; 0xa0
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	2200      	movs	r2, #0
 80088fe:	0018      	movs	r0, r3
 8008900:	f7fc f9a5 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8008904:	2380      	movs	r3, #128	; 0x80
 8008906:	0059      	lsls	r1, r3, #1
 8008908:	23a0      	movs	r3, #160	; 0xa0
 800890a:	05db      	lsls	r3, r3, #23
 800890c:	2200      	movs	r2, #0
 800890e:	0018      	movs	r0, r3
 8008910:	f7fc f99d 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	00d9      	lsls	r1, r3, #3
 8008918:	23a0      	movs	r3, #160	; 0xa0
 800891a:	05db      	lsls	r3, r3, #23
 800891c:	2201      	movs	r2, #1
 800891e:	0018      	movs	r0, r3
 8008920:	f7fc f995 	bl	8004c4e <HAL_GPIO_WritePin>
		return 0;
 8008924:	2300      	movs	r3, #0
}
 8008926:	0018      	movs	r0, r3
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 800892c:	b5b0      	push	{r4, r5, r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	000c      	movs	r4, r1
 8008936:	0010      	movs	r0, r2
 8008938:	0019      	movs	r1, r3
 800893a:	250a      	movs	r5, #10
 800893c:	197b      	adds	r3, r7, r5
 800893e:	1c22      	adds	r2, r4, #0
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	2408      	movs	r4, #8
 8008944:	193b      	adds	r3, r7, r4
 8008946:	1c02      	adds	r2, r0, #0
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	1dbb      	adds	r3, r7, #6
 800894c:	1c0a      	adds	r2, r1, #0
 800894e:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 8008950:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <Paint_NewImage+0xd8>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 8008956:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <Paint_NewImage+0xd8>)
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <Paint_NewImage+0xd8>)
 800895e:	0029      	movs	r1, r5
 8008960:	187a      	adds	r2, r7, r1
 8008962:	8812      	ldrh	r2, [r2, #0]
 8008964:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 8008966:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <Paint_NewImage+0xd8>)
 8008968:	193a      	adds	r2, r7, r4
 800896a:	8812      	ldrh	r2, [r2, #0]
 800896c:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 800896e:	4a25      	ldr	r2, [pc, #148]	; (8008a04 <Paint_NewImage+0xd8>)
 8008970:	2320      	movs	r3, #32
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8008978:	4b22      	ldr	r3, [pc, #136]	; (8008a04 <Paint_NewImage+0xd8>)
 800897a:	2202      	movs	r2, #2
 800897c:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800897e:	187b      	adds	r3, r7, r1
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	2207      	movs	r2, #7
 8008984:	4013      	ands	r3, r2
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <Paint_NewImage+0x6a>
 800898c:	187b      	adds	r3, r7, r1
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	b29b      	uxth	r3, r3
 8008994:	e006      	b.n	80089a4 <Paint_NewImage+0x78>
 8008996:	230a      	movs	r3, #10
 8008998:	18fb      	adds	r3, r7, r3
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	08db      	lsrs	r3, r3, #3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3301      	adds	r3, #1
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <Paint_NewImage+0xd8>)
 80089a6:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <Paint_NewImage+0xd8>)
 80089aa:	2208      	movs	r2, #8
 80089ac:	18ba      	adds	r2, r7, r2
 80089ae:	8812      	ldrh	r2, [r2, #0]
 80089b0:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <Paint_NewImage+0xd8>)
 80089b4:	1dba      	adds	r2, r7, #6
 80089b6:	8812      	ldrh	r2, [r2, #0]
 80089b8:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <Paint_NewImage+0xd8>)
 80089bc:	2200      	movs	r2, #0
 80089be:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80089c0:	1dbb      	adds	r3, r7, #6
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <Paint_NewImage+0xa4>
 80089c8:	1dbb      	adds	r3, r7, #6
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	2bb4      	cmp	r3, #180	; 0xb4
 80089ce:	d10a      	bne.n	80089e6 <Paint_NewImage+0xba>
		Paint.Width = Width;
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <Paint_NewImage+0xd8>)
 80089d2:	220a      	movs	r2, #10
 80089d4:	18ba      	adds	r2, r7, r2
 80089d6:	8812      	ldrh	r2, [r2, #0]
 80089d8:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <Paint_NewImage+0xd8>)
 80089dc:	2208      	movs	r2, #8
 80089de:	18ba      	adds	r2, r7, r2
 80089e0:	8812      	ldrh	r2, [r2, #0]
 80089e2:	80da      	strh	r2, [r3, #6]
 80089e4:	e00a      	b.n	80089fc <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 80089e6:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <Paint_NewImage+0xd8>)
 80089e8:	2208      	movs	r2, #8
 80089ea:	18ba      	adds	r2, r7, r2
 80089ec:	8812      	ldrh	r2, [r2, #0]
 80089ee:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <Paint_NewImage+0xd8>)
 80089f2:	220a      	movs	r2, #10
 80089f4:	18ba      	adds	r2, r7, r2
 80089f6:	8812      	ldrh	r2, [r2, #0]
 80089f8:	80da      	strh	r2, [r3, #6]
	}
}
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	46c0      	nop			; (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b004      	add	sp, #16
 8008a02:	bdb0      	pop	{r4, r5, r7, pc}
 8008a04:	20000654 	.word	0x20000654

08008a08 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8008a10:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <Paint_SelectImage+0x18>)
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b002      	add	sp, #8
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000654 	.word	0x20000654

08008a24 <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b08b      	sub	sp, #44	; 0x2c
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	0004      	movs	r4, r0
 8008a2c:	0008      	movs	r0, r1
 8008a2e:	0011      	movs	r1, r2
 8008a30:	1dbb      	adds	r3, r7, #6
 8008a32:	1c22      	adds	r2, r4, #0
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	1d3b      	adds	r3, r7, #4
 8008a38:	1c02      	adds	r2, r0, #0
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	1cbb      	adds	r3, r7, #2
 8008a3e:	1c0a      	adds	r2, r1, #0
 8008a40:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008a42:	4bc6      	ldr	r3, [pc, #792]	; (8008d5c <Paint_SetPixel+0x338>)
 8008a44:	889b      	ldrh	r3, [r3, #4]
 8008a46:	1dba      	adds	r2, r7, #6
 8008a48:	8812      	ldrh	r2, [r2, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d805      	bhi.n	8008a5a <Paint_SetPixel+0x36>
 8008a4e:	4bc3      	ldr	r3, [pc, #780]	; (8008d5c <Paint_SetPixel+0x338>)
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	1d3a      	adds	r2, r7, #4
 8008a54:	8812      	ldrh	r2, [r2, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d904      	bls.n	8008a64 <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 8008a5a:	4bc1      	ldr	r3, [pc, #772]	; (8008d60 <Paint_SetPixel+0x33c>)
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f008 fa49 	bl	8010ef4 <puts>
		return;
 8008a62:	e180      	b.n	8008d66 <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 8008a64:	4bbd      	ldr	r3, [pc, #756]	; (8008d5c <Paint_SetPixel+0x338>)
 8008a66:	89db      	ldrh	r3, [r3, #14]
 8008a68:	2287      	movs	r2, #135	; 0x87
 8008a6a:	0052      	lsls	r2, r2, #1
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d03d      	beq.n	8008aec <Paint_SetPixel+0xc8>
 8008a70:	2287      	movs	r2, #135	; 0x87
 8008a72:	0052      	lsls	r2, r2, #1
 8008a74:	4293      	cmp	r3, r2
 8008a76:	dd00      	ble.n	8008a7a <Paint_SetPixel+0x56>
 8008a78:	e16e      	b.n	8008d58 <Paint_SetPixel+0x334>
 8008a7a:	2bb4      	cmp	r3, #180	; 0xb4
 8008a7c:	d021      	beq.n	8008ac2 <Paint_SetPixel+0x9e>
 8008a7e:	dd00      	ble.n	8008a82 <Paint_SetPixel+0x5e>
 8008a80:	e16a      	b.n	8008d58 <Paint_SetPixel+0x334>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <Paint_SetPixel+0x68>
 8008a86:	2b5a      	cmp	r3, #90	; 0x5a
 8008a88:	d00b      	beq.n	8008aa2 <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 8008a8a:	e165      	b.n	8008d58 <Paint_SetPixel+0x334>
		X = Xpoint;
 8008a8c:	2326      	movs	r3, #38	; 0x26
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	1dba      	adds	r2, r7, #6
 8008a92:	8812      	ldrh	r2, [r2, #0]
 8008a94:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 8008a96:	2324      	movs	r3, #36	; 0x24
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	1d3a      	adds	r2, r7, #4
 8008a9c:	8812      	ldrh	r2, [r2, #0]
 8008a9e:	801a      	strh	r2, [r3, #0]
		break;
 8008aa0:	e034      	b.n	8008b0c <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 8008aa2:	4bae      	ldr	r3, [pc, #696]	; (8008d5c <Paint_SetPixel+0x338>)
 8008aa4:	891a      	ldrh	r2, [r3, #8]
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	2326      	movs	r3, #38	; 0x26
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	3a01      	subs	r2, #1
 8008ab4:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 8008ab6:	2324      	movs	r3, #36	; 0x24
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	1dba      	adds	r2, r7, #6
 8008abc:	8812      	ldrh	r2, [r2, #0]
 8008abe:	801a      	strh	r2, [r3, #0]
		break;
 8008ac0:	e024      	b.n	8008b0c <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 8008ac2:	4ba6      	ldr	r3, [pc, #664]	; (8008d5c <Paint_SetPixel+0x338>)
 8008ac4:	891a      	ldrh	r2, [r3, #8]
 8008ac6:	1dbb      	adds	r3, r7, #6
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	2326      	movs	r3, #38	; 0x26
 8008ad0:	18fb      	adds	r3, r7, r3
 8008ad2:	3a01      	subs	r2, #1
 8008ad4:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 8008ad6:	4ba1      	ldr	r3, [pc, #644]	; (8008d5c <Paint_SetPixel+0x338>)
 8008ad8:	895a      	ldrh	r2, [r3, #10]
 8008ada:	1d3b      	adds	r3, r7, #4
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	2324      	movs	r3, #36	; 0x24
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	3a01      	subs	r2, #1
 8008ae8:	801a      	strh	r2, [r3, #0]
		break;
 8008aea:	e00f      	b.n	8008b0c <Paint_SetPixel+0xe8>
		X = Ypoint;
 8008aec:	2326      	movs	r3, #38	; 0x26
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	1d3a      	adds	r2, r7, #4
 8008af2:	8812      	ldrh	r2, [r2, #0]
 8008af4:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 8008af6:	4b99      	ldr	r3, [pc, #612]	; (8008d5c <Paint_SetPixel+0x338>)
 8008af8:	895a      	ldrh	r2, [r3, #10]
 8008afa:	1dbb      	adds	r3, r7, #6
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	2324      	movs	r3, #36	; 0x24
 8008b04:	18fb      	adds	r3, r7, r3
 8008b06:	3a01      	subs	r2, #1
 8008b08:	801a      	strh	r2, [r3, #0]
		break;
 8008b0a:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8008b0c:	4b93      	ldr	r3, [pc, #588]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b0e:	8a1b      	ldrh	r3, [r3, #16]
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d020      	beq.n	8008b56 <Paint_SetPixel+0x132>
 8008b14:	dd00      	ble.n	8008b18 <Paint_SetPixel+0xf4>
 8008b16:	e125      	b.n	8008d64 <Paint_SetPixel+0x340>
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d011      	beq.n	8008b40 <Paint_SetPixel+0x11c>
 8008b1c:	dd00      	ble.n	8008b20 <Paint_SetPixel+0xfc>
 8008b1e:	e121      	b.n	8008d64 <Paint_SetPixel+0x340>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d02d      	beq.n	8008b80 <Paint_SetPixel+0x15c>
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d000      	beq.n	8008b2a <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 8008b28:	e11c      	b.n	8008d64 <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 8008b2a:	4b8c      	ldr	r3, [pc, #560]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b2c:	891a      	ldrh	r2, [r3, #8]
 8008b2e:	2126      	movs	r1, #38	; 0x26
 8008b30:	187b      	adds	r3, r7, r1
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	187b      	adds	r3, r7, r1
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	801a      	strh	r2, [r3, #0]
		break;
 8008b3e:	e020      	b.n	8008b82 <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 8008b40:	4b86      	ldr	r3, [pc, #536]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b42:	895a      	ldrh	r2, [r3, #10]
 8008b44:	2124      	movs	r1, #36	; 0x24
 8008b46:	187b      	adds	r3, r7, r1
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	3a01      	subs	r2, #1
 8008b52:	801a      	strh	r2, [r3, #0]
		break;
 8008b54:	e015      	b.n	8008b82 <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 8008b56:	4b81      	ldr	r3, [pc, #516]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b58:	891a      	ldrh	r2, [r3, #8]
 8008b5a:	2126      	movs	r1, #38	; 0x26
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	187b      	adds	r3, r7, r1
 8008b66:	3a01      	subs	r2, #1
 8008b68:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 8008b6a:	4b7c      	ldr	r3, [pc, #496]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b6c:	895a      	ldrh	r2, [r3, #10]
 8008b6e:	2124      	movs	r1, #36	; 0x24
 8008b70:	187b      	adds	r3, r7, r1
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	3a01      	subs	r2, #1
 8008b7c:	801a      	strh	r2, [r3, #0]
		break;
 8008b7e:	e000      	b.n	8008b82 <Paint_SetPixel+0x15e>
		break;
 8008b80:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 8008b82:	4b76      	ldr	r3, [pc, #472]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b84:	891b      	ldrh	r3, [r3, #8]
 8008b86:	2226      	movs	r2, #38	; 0x26
 8008b88:	18ba      	adds	r2, r7, r2
 8008b8a:	8812      	ldrh	r2, [r2, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d806      	bhi.n	8008b9e <Paint_SetPixel+0x17a>
 8008b90:	4b72      	ldr	r3, [pc, #456]	; (8008d5c <Paint_SetPixel+0x338>)
 8008b92:	895b      	ldrh	r3, [r3, #10]
 8008b94:	2224      	movs	r2, #36	; 0x24
 8008b96:	18ba      	adds	r2, r7, r2
 8008b98:	8812      	ldrh	r2, [r2, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d904      	bls.n	8008ba8 <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 8008b9e:	4b70      	ldr	r3, [pc, #448]	; (8008d60 <Paint_SetPixel+0x33c>)
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f008 f9a7 	bl	8010ef4 <puts>
		return;
 8008ba6:	e0de      	b.n	8008d66 <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 8008ba8:	4b6c      	ldr	r3, [pc, #432]	; (8008d5c <Paint_SetPixel+0x338>)
 8008baa:	8adb      	ldrh	r3, [r3, #22]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d145      	bne.n	8008c3c <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8008bb0:	2026      	movs	r0, #38	; 0x26
 8008bb2:	183b      	adds	r3, r7, r0
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	08db      	lsrs	r3, r3, #3
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	0019      	movs	r1, r3
 8008bbc:	2324      	movs	r3, #36	; 0x24
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	4a66      	ldr	r2, [pc, #408]	; (8008d5c <Paint_SetPixel+0x338>)
 8008bc4:	8a52      	ldrh	r2, [r2, #18]
 8008bc6:	4353      	muls	r3, r2
 8008bc8:	18cb      	adds	r3, r1, r3
 8008bca:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <Paint_SetPixel+0x338>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	18d2      	adds	r2, r2, r3
 8008bd4:	210f      	movs	r1, #15
 8008bd6:	187b      	adds	r3, r7, r1
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 8008bdc:	1cbb      	adds	r3, r7, #2
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d115      	bne.n	8008c10 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8008be4:	183b      	adds	r3, r7, r0
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	2207      	movs	r2, #7
 8008bea:	4013      	ands	r3, r2
 8008bec:	2280      	movs	r2, #128	; 0x80
 8008bee:	411a      	asrs	r2, r3
 8008bf0:	0013      	movs	r3, r2
 8008bf2:	b25b      	sxtb	r3, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	187a      	adds	r2, r7, r1
 8008bfa:	7812      	ldrb	r2, [r2, #0]
 8008bfc:	b252      	sxtb	r2, r2
 8008bfe:	4013      	ands	r3, r2
 8008c00:	b259      	sxtb	r1, r3
 8008c02:	4b56      	ldr	r3, [pc, #344]	; (8008d5c <Paint_SetPixel+0x338>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	18d3      	adds	r3, r2, r3
 8008c0a:	b2ca      	uxtb	r2, r1
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e0aa      	b.n	8008d66 <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8008c10:	2326      	movs	r3, #38	; 0x26
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	2207      	movs	r2, #7
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2280      	movs	r2, #128	; 0x80
 8008c1c:	411a      	asrs	r2, r3
 8008c1e:	0013      	movs	r3, r2
 8008c20:	b25a      	sxtb	r2, r3
 8008c22:	230f      	movs	r3, #15
 8008c24:	18fb      	adds	r3, r7, r3
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b259      	sxtb	r1, r3
 8008c2e:	4b4b      	ldr	r3, [pc, #300]	; (8008d5c <Paint_SetPixel+0x338>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	18d3      	adds	r3, r2, r3
 8008c36:	b2ca      	uxtb	r2, r1
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e094      	b.n	8008d66 <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 8008c3c:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <Paint_SetPixel+0x338>)
 8008c3e:	8adb      	ldrh	r3, [r3, #22]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d145      	bne.n	8008cd0 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8008c44:	2426      	movs	r4, #38	; 0x26
 8008c46:	193b      	adds	r3, r7, r4
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	089b      	lsrs	r3, r3, #2
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	0019      	movs	r1, r3
 8008c50:	2324      	movs	r3, #36	; 0x24
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	4a41      	ldr	r2, [pc, #260]	; (8008d5c <Paint_SetPixel+0x338>)
 8008c58:	8a52      	ldrh	r2, [r2, #18]
 8008c5a:	4353      	muls	r3, r2
 8008c5c:	18cb      	adds	r3, r1, r3
 8008c5e:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 8008c60:	1cbb      	adds	r3, r7, #2
 8008c62:	1cba      	adds	r2, r7, #2
 8008c64:	8812      	ldrh	r2, [r2, #0]
 8008c66:	2103      	movs	r1, #3
 8008c68:	400a      	ands	r2, r1
 8008c6a:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <Paint_SetPixel+0x338>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	18d2      	adds	r2, r2, r3
 8008c74:	2017      	movs	r0, #23
 8008c76:	183b      	adds	r3, r7, r0
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8008c7c:	0021      	movs	r1, r4
 8008c7e:	187b      	adds	r3, r7, r1
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	2203      	movs	r2, #3
 8008c84:	4013      	ands	r3, r2
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	22c0      	movs	r2, #192	; 0xc0
 8008c8a:	411a      	asrs	r2, r3
 8008c8c:	0013      	movs	r3, r2
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	43db      	mvns	r3, r3
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	183a      	adds	r2, r7, r0
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	b252      	sxtb	r2, r2
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	b25a      	sxtb	r2, r3
 8008c9e:	183b      	adds	r3, r7, r0
 8008ca0:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 8008ca2:	1cbb      	adds	r3, r7, #2
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	019a      	lsls	r2, r3, #6
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	2103      	movs	r1, #3
 8008cae:	400b      	ands	r3, r1
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	411a      	asrs	r2, r3
 8008cb4:	0013      	movs	r3, r2
 8008cb6:	b25a      	sxtb	r2, r3
 8008cb8:	183b      	adds	r3, r7, r0
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	b259      	sxtb	r1, r3
 8008cc2:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <Paint_SetPixel+0x338>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	18d3      	adds	r3, r2, r3
 8008cca:	b2ca      	uxtb	r2, r1
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	e04a      	b.n	8008d66 <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 8008cd0:	4b22      	ldr	r3, [pc, #136]	; (8008d5c <Paint_SetPixel+0x338>)
 8008cd2:	8adb      	ldrh	r3, [r3, #22]
 8008cd4:	2b07      	cmp	r3, #7
 8008cd6:	d146      	bne.n	8008d66 <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8008cd8:	2426      	movs	r4, #38	; 0x26
 8008cda:	193b      	adds	r3, r7, r4
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	2324      	movs	r3, #36	; 0x24
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <Paint_SetPixel+0x338>)
 8008cec:	8a52      	ldrh	r2, [r2, #18]
 8008cee:	4353      	muls	r3, r2
 8008cf0:	18cb      	adds	r3, r1, r3
 8008cf2:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8008cf4:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <Paint_SetPixel+0x338>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	18d2      	adds	r2, r2, r3
 8008cfc:	201f      	movs	r0, #31
 8008cfe:	183b      	adds	r3, r7, r0
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 8008d04:	0021      	movs	r1, r4
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	22f0      	movs	r2, #240	; 0xf0
 8008d12:	411a      	asrs	r2, r3
 8008d14:	0013      	movs	r3, r2
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	43db      	mvns	r3, r3
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	183a      	adds	r2, r7, r0
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	b252      	sxtb	r2, r2
 8008d22:	4013      	ands	r3, r2
 8008d24:	b25a      	sxtb	r2, r3
 8008d26:	183b      	adds	r3, r7, r0
 8008d28:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8008d2a:	1cbb      	adds	r3, r7, #2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	011a      	lsls	r2, r3, #4
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	2101      	movs	r1, #1
 8008d36:	400b      	ands	r3, r1
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	411a      	asrs	r2, r3
 8008d3c:	0013      	movs	r3, r2
 8008d3e:	b25a      	sxtb	r2, r3
 8008d40:	183b      	adds	r3, r7, r0
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	b25b      	sxtb	r3, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	b259      	sxtb	r1, r3
 8008d4a:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <Paint_SetPixel+0x338>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	18d3      	adds	r3, r2, r3
 8008d52:	b2ca      	uxtb	r2, r1
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	e006      	b.n	8008d66 <Paint_SetPixel+0x342>
		return;
 8008d58:	46c0      	nop			; (mov r8, r8)
 8008d5a:	e004      	b.n	8008d66 <Paint_SetPixel+0x342>
 8008d5c:	20000654 	.word	0x20000654
 8008d60:	08013a90 	.word	0x08013a90
		return;
 8008d64:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b00b      	add	sp, #44	; 0x2c
 8008d6a:	bd90      	pop	{r4, r7, pc}

08008d6c <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	0002      	movs	r2, r0
 8008d74:	1dbb      	adds	r3, r7, #6
 8008d76:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 8008d78:	4b42      	ldr	r3, [pc, #264]	; (8008e84 <Paint_Clear+0x118>)
 8008d7a:	8adb      	ldrh	r3, [r3, #22]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d003      	beq.n	8008d88 <Paint_Clear+0x1c>
 8008d80:	4b40      	ldr	r3, [pc, #256]	; (8008e84 <Paint_Clear+0x118>)
 8008d82:	8adb      	ldrh	r3, [r3, #22]
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d136      	bne.n	8008df6 <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008d88:	2316      	movs	r3, #22
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	e029      	b.n	8008de6 <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008d92:	2314      	movs	r3, #20
 8008d94:	18fb      	adds	r3, r7, r3
 8008d96:	2200      	movs	r2, #0
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e017      	b.n	8008dcc <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008d9c:	2014      	movs	r0, #20
 8008d9e:	183b      	adds	r3, r7, r0
 8008da0:	881a      	ldrh	r2, [r3, #0]
 8008da2:	2316      	movs	r3, #22
 8008da4:	18fb      	adds	r3, r7, r3
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	4936      	ldr	r1, [pc, #216]	; (8008e84 <Paint_Clear+0x118>)
 8008daa:	8a49      	ldrh	r1, [r1, #18]
 8008dac:	434b      	muls	r3, r1
 8008dae:	18d3      	adds	r3, r2, r3
 8008db0:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8008db2:	4b34      	ldr	r3, [pc, #208]	; (8008e84 <Paint_Clear+0x118>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	1dba      	adds	r2, r7, #6
 8008dbc:	8812      	ldrh	r2, [r2, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008dc2:	183b      	adds	r3, r7, r0
 8008dc4:	881a      	ldrh	r2, [r3, #0]
 8008dc6:	183b      	adds	r3, r7, r0
 8008dc8:	3201      	adds	r2, #1
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <Paint_Clear+0x118>)
 8008dce:	8a5b      	ldrh	r3, [r3, #18]
 8008dd0:	2214      	movs	r2, #20
 8008dd2:	18ba      	adds	r2, r7, r2
 8008dd4:	8812      	ldrh	r2, [r2, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3e0      	bcc.n	8008d9c <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008dda:	2116      	movs	r1, #22
 8008ddc:	187b      	adds	r3, r7, r1
 8008dde:	881a      	ldrh	r2, [r3, #0]
 8008de0:	187b      	adds	r3, r7, r1
 8008de2:	3201      	adds	r2, #1
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <Paint_Clear+0x118>)
 8008de8:	8a9b      	ldrh	r3, [r3, #20]
 8008dea:	2216      	movs	r2, #22
 8008dec:	18ba      	adds	r2, r7, r2
 8008dee:	8812      	ldrh	r2, [r2, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d3ce      	bcc.n	8008d92 <Paint_Clear+0x26>
 8008df4:	e041      	b.n	8008e7a <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 8008df6:	4b23      	ldr	r3, [pc, #140]	; (8008e84 <Paint_Clear+0x118>)
 8008df8:	8adb      	ldrh	r3, [r3, #22]
 8008dfa:	2b07      	cmp	r3, #7
 8008dfc:	d13d      	bne.n	8008e7a <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008dfe:	2312      	movs	r3, #18
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	2200      	movs	r2, #0
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e030      	b.n	8008e6a <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008e08:	2310      	movs	r3, #16
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e01e      	b.n	8008e50 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008e12:	2010      	movs	r0, #16
 8008e14:	183b      	adds	r3, r7, r0
 8008e16:	881a      	ldrh	r2, [r3, #0]
 8008e18:	2312      	movs	r3, #18
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	4919      	ldr	r1, [pc, #100]	; (8008e84 <Paint_Clear+0x118>)
 8008e20:	8a49      	ldrh	r1, [r1, #18]
 8008e22:	434b      	muls	r3, r1
 8008e24:	18d3      	adds	r3, r2, r3
 8008e26:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 8008e28:	1dbb      	adds	r3, r7, #6
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	b25a      	sxtb	r2, r3
 8008e30:	1dbb      	adds	r3, r7, #6
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	b259      	sxtb	r1, r3
 8008e3a:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <Paint_Clear+0x118>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	18d3      	adds	r3, r2, r3
 8008e42:	b2ca      	uxtb	r2, r1
 8008e44:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008e46:	183b      	adds	r3, r7, r0
 8008e48:	881a      	ldrh	r2, [r3, #0]
 8008e4a:	183b      	adds	r3, r7, r0
 8008e4c:	3201      	adds	r2, #1
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <Paint_Clear+0x118>)
 8008e52:	8a5b      	ldrh	r3, [r3, #18]
 8008e54:	2210      	movs	r2, #16
 8008e56:	18ba      	adds	r2, r7, r2
 8008e58:	8812      	ldrh	r2, [r2, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d3d9      	bcc.n	8008e12 <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008e5e:	2112      	movs	r1, #18
 8008e60:	187b      	adds	r3, r7, r1
 8008e62:	881a      	ldrh	r2, [r3, #0]
 8008e64:	187b      	adds	r3, r7, r1
 8008e66:	3201      	adds	r2, #1
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <Paint_Clear+0x118>)
 8008e6c:	8a9b      	ldrh	r3, [r3, #20]
 8008e6e:	2212      	movs	r2, #18
 8008e70:	18ba      	adds	r2, r7, r2
 8008e72:	8812      	ldrh	r2, [r2, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d3c7      	bcc.n	8008e08 <Paint_Clear+0x9c>
			}
		}
	}
}
 8008e78:	e7ff      	b.n	8008e7a <Paint_Clear+0x10e>
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	b006      	add	sp, #24
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	46c0      	nop			; (mov r8, r8)
 8008e84:	20000654 	.word	0x20000654

08008e88 <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 8008e88:	b5b0      	push	{r4, r5, r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	0005      	movs	r5, r0
 8008e90:	000c      	movs	r4, r1
 8008e92:	0010      	movs	r0, r2
 8008e94:	0019      	movs	r1, r3
 8008e96:	1dbb      	adds	r3, r7, #6
 8008e98:	1c2a      	adds	r2, r5, #0
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	1d3b      	adds	r3, r7, #4
 8008e9e:	1c22      	adds	r2, r4, #0
 8008ea0:	801a      	strh	r2, [r3, #0]
 8008ea2:	1cbb      	adds	r3, r7, #2
 8008ea4:	1c02      	adds	r2, r0, #0
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	1c7b      	adds	r3, r7, #1
 8008eaa:	1c0a      	adds	r2, r1, #0
 8008eac:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008eae:	4b67      	ldr	r3, [pc, #412]	; (800904c <Paint_DrawPoint+0x1c4>)
 8008eb0:	889b      	ldrh	r3, [r3, #4]
 8008eb2:	1dba      	adds	r2, r7, #6
 8008eb4:	8812      	ldrh	r2, [r2, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d805      	bhi.n	8008ec6 <Paint_DrawPoint+0x3e>
 8008eba:	4b64      	ldr	r3, [pc, #400]	; (800904c <Paint_DrawPoint+0x1c4>)
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	1d3a      	adds	r2, r7, #4
 8008ec0:	8812      	ldrh	r2, [r2, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d916      	bls.n	8008ef4 <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008ec6:	4b62      	ldr	r3, [pc, #392]	; (8009050 <Paint_DrawPoint+0x1c8>)
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f008 f813 	bl	8010ef4 <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8008ece:	1dbb      	adds	r3, r7, #6
 8008ed0:	8819      	ldrh	r1, [r3, #0]
 8008ed2:	4b5e      	ldr	r3, [pc, #376]	; (800904c <Paint_DrawPoint+0x1c4>)
 8008ed4:	889b      	ldrh	r3, [r3, #4]
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	4b5e      	ldr	r3, [pc, #376]	; (8009054 <Paint_DrawPoint+0x1cc>)
 8008eda:	0018      	movs	r0, r3
 8008edc:	f007 ff7e 	bl	8010ddc <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8008ee0:	1d3b      	adds	r3, r7, #4
 8008ee2:	8819      	ldrh	r1, [r3, #0]
 8008ee4:	4b59      	ldr	r3, [pc, #356]	; (800904c <Paint_DrawPoint+0x1c4>)
 8008ee6:	88db      	ldrh	r3, [r3, #6]
 8008ee8:	001a      	movs	r2, r3
 8008eea:	4b5b      	ldr	r3, [pc, #364]	; (8009058 <Paint_DrawPoint+0x1d0>)
 8008eec:	0018      	movs	r0, r3
 8008eee:	f007 ff75 	bl	8010ddc <iprintf>
		return;
 8008ef2:	e0a8      	b.n	8009046 <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	18fb      	adds	r3, r7, r3
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d161      	bne.n	8008fc2 <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008efe:	230e      	movs	r3, #14
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e051      	b.n	8008fac <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008f08:	230c      	movs	r3, #12
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	801a      	strh	r2, [r3, #0]
 8008f10:	e039      	b.n	8008f86 <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 8008f12:	1dbb      	adds	r3, r7, #6
 8008f14:	881a      	ldrh	r2, [r3, #0]
 8008f16:	200e      	movs	r0, #14
 8008f18:	183b      	adds	r3, r7, r0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	5e5b      	ldrsh	r3, [r3, r1]
 8008f1e:	18d2      	adds	r2, r2, r3
 8008f20:	1c7b      	adds	r3, r7, #1
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	d438      	bmi.n	8008f9a <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 8008f28:	1d3b      	adds	r3, r7, #4
 8008f2a:	881a      	ldrh	r2, [r3, #0]
 8008f2c:	210c      	movs	r1, #12
 8008f2e:	187b      	adds	r3, r7, r1
 8008f30:	2400      	movs	r4, #0
 8008f32:	5f1b      	ldrsh	r3, [r3, r4]
 8008f34:	18d2      	adds	r2, r2, r3
 8008f36:	1c7b      	adds	r3, r7, #1
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	d42d      	bmi.n	8008f9a <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008f3e:	183b      	adds	r3, r7, r0
 8008f40:	881a      	ldrh	r2, [r3, #0]
 8008f42:	1dbb      	adds	r3, r7, #6
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	18d3      	adds	r3, r2, r3
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	1c7b      	adds	r3, r7, #1
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 8008f54:	000c      	movs	r4, r1
 8008f56:	187b      	adds	r3, r7, r1
 8008f58:	881a      	ldrh	r2, [r3, #0]
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	18d3      	adds	r3, r2, r3
 8008f60:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008f62:	1c7b      	adds	r3, r7, #1
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	b299      	uxth	r1, r3
 8008f6c:	1cbb      	adds	r3, r7, #2
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	001a      	movs	r2, r3
 8008f72:	f7ff fd57 	bl	8008a24 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008f76:	193b      	adds	r3, r7, r4
 8008f78:	2200      	movs	r2, #0
 8008f7a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	193b      	adds	r3, r7, r4
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	230c      	movs	r3, #12
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	5e9a      	ldrsh	r2, [r3, r2]
 8008f8e:	1c7b      	adds	r3, r7, #1
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	3b01      	subs	r3, #1
 8008f96:	429a      	cmp	r2, r3
 8008f98:	dbbb      	blt.n	8008f12 <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008f9a:	210e      	movs	r1, #14
 8008f9c:	187b      	adds	r3, r7, r1
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	5e9b      	ldrsh	r3, [r3, r2]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	187b      	adds	r3, r7, r1
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	230e      	movs	r3, #14
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	5e9a      	ldrsh	r2, [r3, r2]
 8008fb4:	1c7b      	adds	r3, r7, #1
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	dba3      	blt.n	8008f08 <Paint_DrawPoint+0x80>
 8008fc0:	e041      	b.n	8009046 <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008fc2:	230e      	movs	r3, #14
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	e034      	b.n	8009036 <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008fcc:	230c      	movs	r3, #12
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e01e      	b.n	8009014 <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 8008fd6:	230e      	movs	r3, #14
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	881a      	ldrh	r2, [r3, #0]
 8008fdc:	1dbb      	adds	r3, r7, #6
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	18d3      	adds	r3, r2, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b298      	uxth	r0, r3
 8008fe8:	240c      	movs	r4, #12
 8008fea:	193b      	adds	r3, r7, r4
 8008fec:	881a      	ldrh	r2, [r3, #0]
 8008fee:	1d3b      	adds	r3, r7, #4
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	18d3      	adds	r3, r2, r3
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b299      	uxth	r1, r3
 8008ffa:	1cbb      	adds	r3, r7, #2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	001a      	movs	r2, r3
 8009000:	f7ff fd10 	bl	8008a24 <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8009004:	193b      	adds	r3, r7, r4
 8009006:	2200      	movs	r2, #0
 8009008:	5e9b      	ldrsh	r3, [r3, r2]
 800900a:	b29b      	uxth	r3, r3
 800900c:	3301      	adds	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	193b      	adds	r3, r7, r4
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	230c      	movs	r3, #12
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	2200      	movs	r2, #0
 800901a:	5e9a      	ldrsh	r2, [r3, r2]
 800901c:	1c7b      	adds	r3, r7, #1
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	dbd8      	blt.n	8008fd6 <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8009024:	210e      	movs	r1, #14
 8009026:	187b      	adds	r3, r7, r1
 8009028:	2200      	movs	r2, #0
 800902a:	5e9b      	ldrsh	r3, [r3, r2]
 800902c:	b29b      	uxth	r3, r3
 800902e:	3301      	adds	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	187b      	adds	r3, r7, r1
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	230e      	movs	r3, #14
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	2200      	movs	r2, #0
 800903c:	5e9a      	ldrsh	r2, [r3, r2]
 800903e:	1c7b      	adds	r3, r7, #1
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	dbc2      	blt.n	8008fcc <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 8009046:	46bd      	mov	sp, r7
 8009048:	b004      	add	sp, #16
 800904a:	bdb0      	pop	{r4, r5, r7, pc}
 800904c:	20000654 	.word	0x20000654
 8009050:	08013ab8 	.word	0x08013ab8
 8009054:	08013af8 	.word	0x08013af8
 8009058:	08013b1c 	.word	0x08013b1c

0800905c <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 800905c:	b5b0      	push	{r4, r5, r7, lr}
 800905e:	b08c      	sub	sp, #48	; 0x30
 8009060:	af02      	add	r7, sp, #8
 8009062:	0005      	movs	r5, r0
 8009064:	000c      	movs	r4, r1
 8009066:	0010      	movs	r0, r2
 8009068:	0019      	movs	r1, r3
 800906a:	1dbb      	adds	r3, r7, #6
 800906c:	1c2a      	adds	r2, r5, #0
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	1d3b      	adds	r3, r7, #4
 8009072:	1c22      	adds	r2, r4, #0
 8009074:	801a      	strh	r2, [r3, #0]
 8009076:	1cbb      	adds	r3, r7, #2
 8009078:	1c02      	adds	r2, r0, #0
 800907a:	801a      	strh	r2, [r3, #0]
 800907c:	003b      	movs	r3, r7
 800907e:	1c0a      	adds	r2, r1, #0
 8009080:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8009082:	4b63      	ldr	r3, [pc, #396]	; (8009210 <Paint_DrawLine+0x1b4>)
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	1dba      	adds	r2, r7, #6
 8009088:	8812      	ldrh	r2, [r2, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d811      	bhi.n	80090b2 <Paint_DrawLine+0x56>
 800908e:	4b60      	ldr	r3, [pc, #384]	; (8009210 <Paint_DrawLine+0x1b4>)
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	1d3a      	adds	r2, r7, #4
 8009094:	8812      	ldrh	r2, [r2, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d80b      	bhi.n	80090b2 <Paint_DrawLine+0x56>
 800909a:	4b5d      	ldr	r3, [pc, #372]	; (8009210 <Paint_DrawLine+0x1b4>)
 800909c:	889b      	ldrh	r3, [r3, #4]
 800909e:	1cba      	adds	r2, r7, #2
 80090a0:	8812      	ldrh	r2, [r2, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d805      	bhi.n	80090b2 <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 80090a6:	4b5a      	ldr	r3, [pc, #360]	; (8009210 <Paint_DrawLine+0x1b4>)
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	003a      	movs	r2, r7
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d904      	bls.n	80090bc <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80090b2:	4b58      	ldr	r3, [pc, #352]	; (8009214 <Paint_DrawLine+0x1b8>)
 80090b4:	0018      	movs	r0, r3
 80090b6:	f007 ff1d 	bl	8010ef4 <puts>
		return;
 80090ba:	e0a5      	b.n	8009208 <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 80090bc:	2326      	movs	r3, #38	; 0x26
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	1dba      	adds	r2, r7, #6
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 80090c6:	2324      	movs	r3, #36	; 0x24
 80090c8:	18fb      	adds	r3, r7, r3
 80090ca:	1d3a      	adds	r2, r7, #4
 80090cc:	8812      	ldrh	r2, [r2, #0]
 80090ce:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80090d0:	1cbb      	adds	r3, r7, #2
 80090d2:	881a      	ldrh	r2, [r3, #0]
 80090d4:	1dbb      	adds	r3, r7, #6
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	17da      	asrs	r2, r3, #31
 80090dc:	189b      	adds	r3, r3, r2
 80090de:	4053      	eors	r3, r2
 80090e0:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80090e2:	003b      	movs	r3, r7
 80090e4:	881a      	ldrh	r2, [r3, #0]
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	17da      	asrs	r2, r3, #31
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	4053      	eors	r3, r2
 80090f2:	425b      	negs	r3, r3
 80090f4:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 80090f6:	1dba      	adds	r2, r7, #6
 80090f8:	1cbb      	adds	r3, r7, #2
 80090fa:	8812      	ldrh	r2, [r2, #0]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d201      	bcs.n	8009106 <Paint_DrawLine+0xaa>
 8009102:	2301      	movs	r3, #1
 8009104:	e001      	b.n	800910a <Paint_DrawLine+0xae>
 8009106:	2301      	movs	r3, #1
 8009108:	425b      	negs	r3, r3
 800910a:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 800910c:	1d3a      	adds	r2, r7, #4
 800910e:	003b      	movs	r3, r7
 8009110:	8812      	ldrh	r2, [r2, #0]
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d201      	bcs.n	800911c <Paint_DrawLine+0xc0>
 8009118:	2301      	movs	r3, #1
 800911a:	e001      	b.n	8009120 <Paint_DrawLine+0xc4>
 800911c:	2301      	movs	r3, #1
 800911e:	425b      	negs	r3, r3
 8009120:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 800912a:	231f      	movs	r3, #31
 800912c:	18fb      	adds	r3, r7, r3
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 8009132:	241f      	movs	r4, #31
 8009134:	193b      	adds	r3, r7, r4
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	193b      	adds	r3, r7, r4
 800913a:	3201      	adds	r2, #1
 800913c:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800913e:	2340      	movs	r3, #64	; 0x40
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d11c      	bne.n	8009182 <Paint_DrawLine+0x126>
 8009148:	193b      	adds	r3, r7, r4
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2103      	movs	r1, #3
 800914e:	0018      	movs	r0, r3
 8009150:	f7f7 f866 	bl	8000220 <__aeabi_uidivmod>
 8009154:	000b      	movs	r3, r1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d112      	bne.n	8009182 <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 800915c:	233c      	movs	r3, #60	; 0x3c
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	2324      	movs	r3, #36	; 0x24
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	8819      	ldrh	r1, [r3, #0]
 8009168:	2326      	movs	r3, #38	; 0x26
 800916a:	18fb      	adds	r3, r7, r3
 800916c:	8818      	ldrh	r0, [r3, #0]
 800916e:	2301      	movs	r3, #1
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	0013      	movs	r3, r2
 8009174:	22ff      	movs	r2, #255	; 0xff
 8009176:	f7ff fe87 	bl	8008e88 <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 800917a:	193b      	adds	r3, r7, r4
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	e010      	b.n	80091a4 <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8009182:	233c      	movs	r3, #60	; 0x3c
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	781c      	ldrb	r4, [r3, #0]
 8009188:	2338      	movs	r3, #56	; 0x38
 800918a:	18fb      	adds	r3, r7, r3
 800918c:	881a      	ldrh	r2, [r3, #0]
 800918e:	2324      	movs	r3, #36	; 0x24
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	8819      	ldrh	r1, [r3, #0]
 8009194:	2326      	movs	r3, #38	; 0x26
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	8818      	ldrh	r0, [r3, #0]
 800919a:	2301      	movs	r3, #1
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	0023      	movs	r3, r4
 80091a0:	f7ff fe72 	bl	8008e88 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	dc11      	bgt.n	80091d2 <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 80091ae:	2026      	movs	r0, #38	; 0x26
 80091b0:	183a      	adds	r2, r7, r0
 80091b2:	1cbb      	adds	r3, r7, #2
 80091b4:	8812      	ldrh	r2, [r2, #0]
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d022      	beq.n	8009202 <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 80091bc:	6a3a      	ldr	r2, [r7, #32]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	18d3      	adds	r3, r2, r3
 80091c2:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	b299      	uxth	r1, r3
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	183a      	adds	r2, r7, r0
 80091cc:	8812      	ldrh	r2, [r2, #0]
 80091ce:	188a      	adds	r2, r1, r2
 80091d0:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	dbaa      	blt.n	8009132 <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 80091dc:	2024      	movs	r0, #36	; 0x24
 80091de:	183a      	adds	r2, r7, r0
 80091e0:	003b      	movs	r3, r7
 80091e2:	8812      	ldrh	r2, [r2, #0]
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d00d      	beq.n	8009206 <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	18d3      	adds	r3, r2, r3
 80091f0:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	b299      	uxth	r1, r3
 80091f6:	183b      	adds	r3, r7, r0
 80091f8:	183a      	adds	r2, r7, r0
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	188a      	adds	r2, r1, r2
 80091fe:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8009200:	e797      	b.n	8009132 <Paint_DrawLine+0xd6>
				break;
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	e000      	b.n	8009208 <Paint_DrawLine+0x1ac>
				break;
 8009206:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8009208:	46bd      	mov	sp, r7
 800920a:	b00a      	add	sp, #40	; 0x28
 800920c:	bdb0      	pop	{r4, r5, r7, pc}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	20000654 	.word	0x20000654
 8009214:	08013b44 	.word	0x08013b44

08009218 <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8009218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921a:	46ce      	mov	lr, r9
 800921c:	4647      	mov	r7, r8
 800921e:	b580      	push	{r7, lr}
 8009220:	b089      	sub	sp, #36	; 0x24
 8009222:	af04      	add	r7, sp, #16
 8009224:	0004      	movs	r4, r0
 8009226:	0008      	movs	r0, r1
 8009228:	60ba      	str	r2, [r7, #8]
 800922a:	0019      	movs	r1, r3
 800922c:	260e      	movs	r6, #14
 800922e:	19bb      	adds	r3, r7, r6
 8009230:	1c22      	adds	r2, r4, #0
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	230c      	movs	r3, #12
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	1c02      	adds	r2, r0, #0
 800923a:	801a      	strh	r2, [r3, #0]
 800923c:	1dbb      	adds	r3, r7, #6
 800923e:	1c0a      	adds	r2, r1, #0
 8009240:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8009242:	68b8      	ldr	r0, [r7, #8]
 8009244:	f7f9 fef6 	bl	8003034 <__aeabi_f2d>
 8009248:	0002      	movs	r2, r0
 800924a:	000b      	movs	r3, r1
 800924c:	0010      	movs	r0, r2
 800924e:	0019      	movs	r1, r3
 8009250:	f008 ff02 	bl	8012058 <cos>
 8009254:	0004      	movs	r4, r0
 8009256:	000d      	movs	r5, r1
 8009258:	2130      	movs	r1, #48	; 0x30
 800925a:	187b      	adds	r3, r7, r1
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	0018      	movs	r0, r3
 8009260:	f7f9 fe92 	bl	8002f88 <__aeabi_i2d>
 8009264:	0002      	movs	r2, r0
 8009266:	000b      	movs	r3, r1
 8009268:	0020      	movs	r0, r4
 800926a:	0029      	movs	r1, r5
 800926c:	f7f9 f83a 	bl	80022e4 <__aeabi_dmul>
 8009270:	0002      	movs	r2, r0
 8009272:	000b      	movs	r3, r1
 8009274:	0014      	movs	r4, r2
 8009276:	001d      	movs	r5, r3
 8009278:	19bb      	adds	r3, r7, r6
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	0018      	movs	r0, r3
 800927e:	f7f9 fe83 	bl	8002f88 <__aeabi_i2d>
 8009282:	0002      	movs	r2, r0
 8009284:	000b      	movs	r3, r1
 8009286:	0020      	movs	r0, r4
 8009288:	0029      	movs	r1, r5
 800928a:	f7f8 f8bb 	bl	8001404 <__aeabi_dadd>
 800928e:	0002      	movs	r2, r0
 8009290:	000b      	movs	r3, r1
 8009292:	0010      	movs	r0, r2
 8009294:	0019      	movs	r1, r3
 8009296:	f7f7 f98f 	bl	80005b8 <__aeabi_d2uiz>
 800929a:	0003      	movs	r3, r0
 800929c:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 800929e:	68b8      	ldr	r0, [r7, #8]
 80092a0:	f7f9 fec8 	bl	8003034 <__aeabi_f2d>
 80092a4:	0002      	movs	r2, r0
 80092a6:	000b      	movs	r3, r1
 80092a8:	0010      	movs	r0, r2
 80092aa:	0019      	movs	r1, r3
 80092ac:	f008 ff16 	bl	80120dc <sin>
 80092b0:	0004      	movs	r4, r0
 80092b2:	000d      	movs	r5, r1
 80092b4:	2130      	movs	r1, #48	; 0x30
 80092b6:	187b      	adds	r3, r7, r1
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7f9 fe64 	bl	8002f88 <__aeabi_i2d>
 80092c0:	0002      	movs	r2, r0
 80092c2:	000b      	movs	r3, r1
 80092c4:	0020      	movs	r0, r4
 80092c6:	0029      	movs	r1, r5
 80092c8:	f7f9 f80c 	bl	80022e4 <__aeabi_dmul>
 80092cc:	0002      	movs	r2, r0
 80092ce:	000b      	movs	r3, r1
 80092d0:	0014      	movs	r4, r2
 80092d2:	001d      	movs	r5, r3
 80092d4:	220c      	movs	r2, #12
 80092d6:	18bb      	adds	r3, r7, r2
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	0018      	movs	r0, r3
 80092dc:	f7f9 fe54 	bl	8002f88 <__aeabi_i2d>
 80092e0:	0002      	movs	r2, r0
 80092e2:	000b      	movs	r3, r1
 80092e4:	0020      	movs	r0, r4
 80092e6:	0029      	movs	r1, r5
 80092e8:	f7f8 f88c 	bl	8001404 <__aeabi_dadd>
 80092ec:	0002      	movs	r2, r0
 80092ee:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80092f0:	0010      	movs	r0, r2
 80092f2:	0019      	movs	r1, r3
 80092f4:	f7f7 f960 	bl	80005b8 <__aeabi_d2uiz>
 80092f8:	0003      	movs	r3, r0
 80092fa:	b299      	uxth	r1, r3
 80092fc:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 80092fe:	68b8      	ldr	r0, [r7, #8]
 8009300:	f7f9 fe98 	bl	8003034 <__aeabi_f2d>
 8009304:	0002      	movs	r2, r0
 8009306:	000b      	movs	r3, r1
 8009308:	0010      	movs	r0, r2
 800930a:	0019      	movs	r1, r3
 800930c:	f008 fea4 	bl	8012058 <cos>
 8009310:	0004      	movs	r4, r0
 8009312:	000d      	movs	r5, r1
 8009314:	1dbb      	adds	r3, r7, #6
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	0018      	movs	r0, r3
 800931a:	f7f9 fe35 	bl	8002f88 <__aeabi_i2d>
 800931e:	0002      	movs	r2, r0
 8009320:	000b      	movs	r3, r1
 8009322:	0020      	movs	r0, r4
 8009324:	0029      	movs	r1, r5
 8009326:	f7f8 ffdd 	bl	80022e4 <__aeabi_dmul>
 800932a:	0002      	movs	r2, r0
 800932c:	000b      	movs	r3, r1
 800932e:	0014      	movs	r4, r2
 8009330:	001d      	movs	r5, r3
 8009332:	230e      	movs	r3, #14
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	0018      	movs	r0, r3
 800933a:	f7f9 fe25 	bl	8002f88 <__aeabi_i2d>
 800933e:	0002      	movs	r2, r0
 8009340:	000b      	movs	r3, r1
 8009342:	0020      	movs	r0, r4
 8009344:	0029      	movs	r1, r5
 8009346:	f7f8 f85d 	bl	8001404 <__aeabi_dadd>
 800934a:	0002      	movs	r2, r0
 800934c:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 800934e:	0010      	movs	r0, r2
 8009350:	0019      	movs	r1, r3
 8009352:	f7f7 f931 	bl	80005b8 <__aeabi_d2uiz>
 8009356:	0003      	movs	r3, r0
 8009358:	b299      	uxth	r1, r3
 800935a:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f7f9 fe69 	bl	8003034 <__aeabi_f2d>
 8009362:	0002      	movs	r2, r0
 8009364:	000b      	movs	r3, r1
 8009366:	0010      	movs	r0, r2
 8009368:	0019      	movs	r1, r3
 800936a:	f008 feb7 	bl	80120dc <sin>
 800936e:	0004      	movs	r4, r0
 8009370:	000d      	movs	r5, r1
 8009372:	1dbb      	adds	r3, r7, #6
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	0018      	movs	r0, r3
 8009378:	f7f9 fe06 	bl	8002f88 <__aeabi_i2d>
 800937c:	0002      	movs	r2, r0
 800937e:	000b      	movs	r3, r1
 8009380:	0020      	movs	r0, r4
 8009382:	0029      	movs	r1, r5
 8009384:	f7f8 ffae 	bl	80022e4 <__aeabi_dmul>
 8009388:	0002      	movs	r2, r0
 800938a:	000b      	movs	r3, r1
 800938c:	0014      	movs	r4, r2
 800938e:	001d      	movs	r5, r3
 8009390:	220c      	movs	r2, #12
 8009392:	18bb      	adds	r3, r7, r2
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	0018      	movs	r0, r3
 8009398:	f7f9 fdf6 	bl	8002f88 <__aeabi_i2d>
 800939c:	0002      	movs	r2, r0
 800939e:	000b      	movs	r3, r1
 80093a0:	0020      	movs	r0, r4
 80093a2:	0029      	movs	r1, r5
 80093a4:	f7f8 f82e 	bl	8001404 <__aeabi_dadd>
 80093a8:	0002      	movs	r2, r0
 80093aa:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80093ac:	0010      	movs	r0, r2
 80093ae:	0019      	movs	r1, r3
 80093b0:	f7f7 f902 	bl	80005b8 <__aeabi_d2uiz>
 80093b4:	0003      	movs	r3, r0
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	233c      	movs	r3, #60	; 0x3c
 80093ba:	18fb      	adds	r3, r7, r3
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	2338      	movs	r3, #56	; 0x38
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	2334      	movs	r3, #52	; 0x34
 80093ca:	18fb      	adds	r3, r7, r3
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	0013      	movs	r3, r2
 80093d2:	464a      	mov	r2, r9
 80093d4:	4641      	mov	r1, r8
 80093d6:	0030      	movs	r0, r6
 80093d8:	f7ff fe40 	bl	800905c <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 80093dc:	46c0      	nop			; (mov r8, r8)
 80093de:	46bd      	mov	sp, r7
 80093e0:	b005      	add	sp, #20
 80093e2:	bcc0      	pop	{r6, r7}
 80093e4:	46b9      	mov	r9, r7
 80093e6:	46b0      	mov	r8, r6
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080093ec <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 80093ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ee:	b089      	sub	sp, #36	; 0x24
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	0005      	movs	r5, r0
 80093f4:	000c      	movs	r4, r1
 80093f6:	0010      	movs	r0, r2
 80093f8:	0019      	movs	r1, r3
 80093fa:	1dbb      	adds	r3, r7, #6
 80093fc:	1c2a      	adds	r2, r5, #0
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	1d3b      	adds	r3, r7, #4
 8009402:	1c22      	adds	r2, r4, #0
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	1cbb      	adds	r3, r7, #2
 8009408:	1c02      	adds	r2, r0, #0
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	003b      	movs	r3, r7
 800940e:	1c0a      	adds	r2, r1, #0
 8009410:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8009412:	4b5a      	ldr	r3, [pc, #360]	; (800957c <Paint_DrawRectangle+0x190>)
 8009414:	889b      	ldrh	r3, [r3, #4]
 8009416:	1dba      	adds	r2, r7, #6
 8009418:	8812      	ldrh	r2, [r2, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d811      	bhi.n	8009442 <Paint_DrawRectangle+0x56>
 800941e:	4b57      	ldr	r3, [pc, #348]	; (800957c <Paint_DrawRectangle+0x190>)
 8009420:	88db      	ldrh	r3, [r3, #6]
 8009422:	1d3a      	adds	r2, r7, #4
 8009424:	8812      	ldrh	r2, [r2, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d80b      	bhi.n	8009442 <Paint_DrawRectangle+0x56>
 800942a:	4b54      	ldr	r3, [pc, #336]	; (800957c <Paint_DrawRectangle+0x190>)
 800942c:	889b      	ldrh	r3, [r3, #4]
 800942e:	1cba      	adds	r2, r7, #2
 8009430:	8812      	ldrh	r2, [r2, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d805      	bhi.n	8009442 <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 8009436:	4b51      	ldr	r3, [pc, #324]	; (800957c <Paint_DrawRectangle+0x190>)
 8009438:	88db      	ldrh	r3, [r3, #6]
 800943a:	003a      	movs	r2, r7
 800943c:	8812      	ldrh	r2, [r2, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d904      	bls.n	800944c <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 8009442:	4b4f      	ldr	r3, [pc, #316]	; (8009580 <Paint_DrawRectangle+0x194>)
 8009444:	0018      	movs	r0, r3
 8009446:	f007 fd55 	bl	8010ef4 <puts>
		return;
 800944a:	e094      	b.n	8009576 <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 800944c:	2328      	movs	r3, #40	; 0x28
 800944e:	2208      	movs	r2, #8
 8009450:	4694      	mov	ip, r2
 8009452:	44bc      	add	ip, r7
 8009454:	4463      	add	r3, ip
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d02e      	beq.n	80094ba <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800945c:	230e      	movs	r3, #14
 800945e:	18fb      	adds	r3, r7, r3
 8009460:	1d3a      	adds	r2, r7, #4
 8009462:	8812      	ldrh	r2, [r2, #0]
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	e020      	b.n	80094aa <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 8009468:	250e      	movs	r5, #14
 800946a:	197b      	adds	r3, r7, r5
 800946c:	881c      	ldrh	r4, [r3, #0]
 800946e:	1cbb      	adds	r3, r7, #2
 8009470:	881a      	ldrh	r2, [r3, #0]
 8009472:	197b      	adds	r3, r7, r5
 8009474:	8819      	ldrh	r1, [r3, #0]
 8009476:	1dbb      	adds	r3, r7, #6
 8009478:	8818      	ldrh	r0, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	2324      	movs	r3, #36	; 0x24
 8009480:	2608      	movs	r6, #8
 8009482:	46b4      	mov	ip, r6
 8009484:	44bc      	add	ip, r7
 8009486:	4463      	add	r3, ip
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	2320      	movs	r3, #32
 800948e:	2608      	movs	r6, #8
 8009490:	46b4      	mov	ip, r6
 8009492:	44bc      	add	ip, r7
 8009494:	4463      	add	r3, ip
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	0023      	movs	r3, r4
 800949c:	f7ff fdde 	bl	800905c <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80094a0:	197b      	adds	r3, r7, r5
 80094a2:	881a      	ldrh	r2, [r3, #0]
 80094a4:	197b      	adds	r3, r7, r5
 80094a6:	3201      	adds	r2, #1
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	230e      	movs	r3, #14
 80094ac:	18fa      	adds	r2, r7, r3
 80094ae:	003b      	movs	r3, r7
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d3d7      	bcc.n	8009468 <Paint_DrawRectangle+0x7c>
 80094b8:	e05d      	b.n	8009576 <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 80094ba:	1d3b      	adds	r3, r7, #4
 80094bc:	881c      	ldrh	r4, [r3, #0]
 80094be:	1cbb      	adds	r3, r7, #2
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	8819      	ldrh	r1, [r3, #0]
 80094c6:	1dbb      	adds	r3, r7, #6
 80094c8:	8818      	ldrh	r0, [r3, #0]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	2524      	movs	r5, #36	; 0x24
 80094d0:	2308      	movs	r3, #8
 80094d2:	18fe      	adds	r6, r7, r3
 80094d4:	1973      	adds	r3, r6, r5
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	2620      	movs	r6, #32
 80094dc:	2308      	movs	r3, #8
 80094de:	18fb      	adds	r3, r7, r3
 80094e0:	199b      	adds	r3, r3, r6
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	0023      	movs	r3, r4
 80094e8:	f7ff fdb8 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 80094ec:	003b      	movs	r3, r7
 80094ee:	881c      	ldrh	r4, [r3, #0]
 80094f0:	1dbb      	adds	r3, r7, #6
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	1d3b      	adds	r3, r7, #4
 80094f6:	8819      	ldrh	r1, [r3, #0]
 80094f8:	1dbb      	adds	r3, r7, #6
 80094fa:	8818      	ldrh	r0, [r3, #0]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9302      	str	r3, [sp, #8]
 8009500:	2308      	movs	r3, #8
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	195b      	adds	r3, r3, r5
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	2308      	movs	r3, #8
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	199b      	adds	r3, r3, r6
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	0023      	movs	r3, r4
 8009516:	f7ff fda1 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	881c      	ldrh	r4, [r3, #0]
 800951e:	1cbb      	adds	r3, r7, #2
 8009520:	881a      	ldrh	r2, [r3, #0]
 8009522:	003b      	movs	r3, r7
 8009524:	8819      	ldrh	r1, [r3, #0]
 8009526:	1cbb      	adds	r3, r7, #2
 8009528:	8818      	ldrh	r0, [r3, #0]
 800952a:	2300      	movs	r3, #0
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	2308      	movs	r3, #8
 8009530:	18fb      	adds	r3, r7, r3
 8009532:	195b      	adds	r3, r3, r5
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	2308      	movs	r3, #8
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	199b      	adds	r3, r3, r6
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	0023      	movs	r3, r4
 8009544:	f7ff fd8a 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 8009548:	003b      	movs	r3, r7
 800954a:	881c      	ldrh	r4, [r3, #0]
 800954c:	1dbb      	adds	r3, r7, #6
 800954e:	881a      	ldrh	r2, [r3, #0]
 8009550:	003b      	movs	r3, r7
 8009552:	8819      	ldrh	r1, [r3, #0]
 8009554:	1cbb      	adds	r3, r7, #2
 8009556:	8818      	ldrh	r0, [r3, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	9302      	str	r3, [sp, #8]
 800955c:	2308      	movs	r3, #8
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	195b      	adds	r3, r3, r5
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2308      	movs	r3, #8
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	199b      	adds	r3, r3, r6
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	0023      	movs	r3, r4
 8009572:	f7ff fd73 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 8009576:	46bd      	mov	sp, r7
 8009578:	b005      	add	sp, #20
 800957a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800957c:	20000654 	.word	0x20000654
 8009580:	08013b84 	.word	0x08013b84

08009584 <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	b087      	sub	sp, #28
 8009588:	af02      	add	r7, sp, #8
 800958a:	0005      	movs	r5, r0
 800958c:	000c      	movs	r4, r1
 800958e:	0010      	movs	r0, r2
 8009590:	0019      	movs	r1, r3
 8009592:	1dbb      	adds	r3, r7, #6
 8009594:	1c2a      	adds	r2, r5, #0
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	1c22      	adds	r2, r4, #0
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	1cbb      	adds	r3, r7, #2
 80095a0:	1c02      	adds	r2, r0, #0
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	003b      	movs	r3, r7
 80095a6:	1c0a      	adds	r2, r1, #0
 80095a8:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80095aa:	4b94      	ldr	r3, [pc, #592]	; (80097fc <Paint_DrawCircle+0x278>)
 80095ac:	889b      	ldrh	r3, [r3, #4]
 80095ae:	1dba      	adds	r2, r7, #6
 80095b0:	8812      	ldrh	r2, [r2, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d805      	bhi.n	80095c2 <Paint_DrawCircle+0x3e>
 80095b6:	4b91      	ldr	r3, [pc, #580]	; (80097fc <Paint_DrawCircle+0x278>)
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	1d3a      	adds	r2, r7, #4
 80095bc:	8812      	ldrh	r2, [r2, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d304      	bcc.n	80095cc <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 80095c2:	4b8f      	ldr	r3, [pc, #572]	; (8009800 <Paint_DrawCircle+0x27c>)
 80095c4:	0018      	movs	r0, r3
 80095c6:	f007 fc95 	bl	8010ef4 <puts>
		return;
 80095ca:	e229      	b.n	8009a20 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 80095cc:	230e      	movs	r3, #14
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	2200      	movs	r2, #0
 80095d2:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 80095d4:	230c      	movs	r3, #12
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	1cba      	adds	r2, r7, #2
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 80095de:	1cbb      	adds	r3, r7, #2
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	18db      	adds	r3, r3, r3
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2203      	movs	r2, #3
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	230a      	movs	r3, #10
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 80095f2:	2324      	movs	r3, #36	; 0x24
 80095f4:	2208      	movs	r2, #8
 80095f6:	4694      	mov	ip, r2
 80095f8:	44bc      	add	ip, r7
 80095fa:	4463      	add	r3, ip
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d000      	beq.n	8009604 <Paint_DrawCircle+0x80>
 8009602:	e202      	b.n	8009a0a <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 8009604:	e0ed      	b.n	80097e2 <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8009606:	2308      	movs	r3, #8
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	220e      	movs	r2, #14
 800960c:	18ba      	adds	r2, r7, r2
 800960e:	8812      	ldrh	r2, [r2, #0]
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	e0a1      	b.n	8009758 <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 8009614:	250e      	movs	r5, #14
 8009616:	197b      	adds	r3, r7, r5
 8009618:	881a      	ldrh	r2, [r3, #0]
 800961a:	1dbb      	adds	r3, r7, #6
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	b298      	uxth	r0, r3
 8009622:	2408      	movs	r4, #8
 8009624:	193b      	adds	r3, r7, r4
 8009626:	881a      	ldrh	r2, [r3, #0]
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	18d3      	adds	r3, r2, r3
 800962e:	b299      	uxth	r1, r3
 8009630:	003b      	movs	r3, r7
 8009632:	881a      	ldrh	r2, [r3, #0]
 8009634:	2301      	movs	r3, #1
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2301      	movs	r3, #1
 800963a:	f7ff fc25 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 800963e:	197b      	adds	r3, r7, r5
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	1dba      	adds	r2, r7, #6
 8009644:	8812      	ldrh	r2, [r2, #0]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	b298      	uxth	r0, r3
 800964a:	193b      	adds	r3, r7, r4
 800964c:	881a      	ldrh	r2, [r3, #0]
 800964e:	1d3b      	adds	r3, r7, #4
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	18d3      	adds	r3, r2, r3
 8009654:	b299      	uxth	r1, r3
 8009656:	003b      	movs	r3, r7
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	2301      	movs	r3, #1
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	2301      	movs	r3, #1
 8009660:	f7ff fc12 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 8009664:	193b      	adds	r3, r7, r4
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	1dba      	adds	r2, r7, #6
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	b298      	uxth	r0, r3
 8009670:	197b      	adds	r3, r7, r5
 8009672:	881a      	ldrh	r2, [r3, #0]
 8009674:	1d3b      	adds	r3, r7, #4
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	18d3      	adds	r3, r2, r3
 800967a:	b299      	uxth	r1, r3
 800967c:	003b      	movs	r3, r7
 800967e:	881a      	ldrh	r2, [r3, #0]
 8009680:	2301      	movs	r3, #1
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2301      	movs	r3, #1
 8009686:	f7ff fbff 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 800968a:	193b      	adds	r3, r7, r4
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	1dba      	adds	r2, r7, #6
 8009690:	8812      	ldrh	r2, [r2, #0]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	b298      	uxth	r0, r3
 8009696:	197b      	adds	r3, r7, r5
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	1d3a      	adds	r2, r7, #4
 800969c:	8812      	ldrh	r2, [r2, #0]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	b299      	uxth	r1, r3
 80096a2:	003b      	movs	r3, r7
 80096a4:	881a      	ldrh	r2, [r3, #0]
 80096a6:	2301      	movs	r3, #1
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	2301      	movs	r3, #1
 80096ac:	f7ff fbec 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 80096b0:	197b      	adds	r3, r7, r5
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	1dba      	adds	r2, r7, #6
 80096b6:	8812      	ldrh	r2, [r2, #0]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	b298      	uxth	r0, r3
 80096bc:	193b      	adds	r3, r7, r4
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	1d3a      	adds	r2, r7, #4
 80096c2:	8812      	ldrh	r2, [r2, #0]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	b299      	uxth	r1, r3
 80096c8:	003b      	movs	r3, r7
 80096ca:	881a      	ldrh	r2, [r3, #0]
 80096cc:	2301      	movs	r3, #1
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2301      	movs	r3, #1
 80096d2:	f7ff fbd9 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 80096d6:	197b      	adds	r3, r7, r5
 80096d8:	881a      	ldrh	r2, [r3, #0]
 80096da:	1dbb      	adds	r3, r7, #6
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	18d3      	adds	r3, r2, r3
 80096e0:	b298      	uxth	r0, r3
 80096e2:	193b      	adds	r3, r7, r4
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	1d3a      	adds	r2, r7, #4
 80096e8:	8812      	ldrh	r2, [r2, #0]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	b299      	uxth	r1, r3
 80096ee:	003b      	movs	r3, r7
 80096f0:	881a      	ldrh	r2, [r3, #0]
 80096f2:	2301      	movs	r3, #1
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	2301      	movs	r3, #1
 80096f8:	f7ff fbc6 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 80096fc:	193b      	adds	r3, r7, r4
 80096fe:	881a      	ldrh	r2, [r3, #0]
 8009700:	1dbb      	adds	r3, r7, #6
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	18d3      	adds	r3, r2, r3
 8009706:	b298      	uxth	r0, r3
 8009708:	197b      	adds	r3, r7, r5
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	1d3a      	adds	r2, r7, #4
 800970e:	8812      	ldrh	r2, [r2, #0]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	b299      	uxth	r1, r3
 8009714:	003b      	movs	r3, r7
 8009716:	881a      	ldrh	r2, [r3, #0]
 8009718:	2301      	movs	r3, #1
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2301      	movs	r3, #1
 800971e:	f7ff fbb3 	bl	8008e88 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 8009722:	193b      	adds	r3, r7, r4
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	1dbb      	adds	r3, r7, #6
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	18d3      	adds	r3, r2, r3
 800972c:	b298      	uxth	r0, r3
 800972e:	197b      	adds	r3, r7, r5
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	1d3b      	adds	r3, r7, #4
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	b299      	uxth	r1, r3
 800973a:	003b      	movs	r3, r7
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	2301      	movs	r3, #1
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	2301      	movs	r3, #1
 8009744:	f7ff fba0 	bl	8008e88 <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8009748:	193b      	adds	r3, r7, r4
 800974a:	2200      	movs	r2, #0
 800974c:	5e9b      	ldrsh	r3, [r3, r2]
 800974e:	b29b      	uxth	r3, r3
 8009750:	3301      	adds	r3, #1
 8009752:	b29a      	uxth	r2, r3
 8009754:	193b      	adds	r3, r7, r4
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	2308      	movs	r3, #8
 800975a:	18fa      	adds	r2, r7, r3
 800975c:	230c      	movs	r3, #12
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	2100      	movs	r1, #0
 8009762:	5e52      	ldrsh	r2, [r2, r1]
 8009764:	2100      	movs	r1, #0
 8009766:	5e5b      	ldrsh	r3, [r3, r1]
 8009768:	429a      	cmp	r2, r3
 800976a:	dc00      	bgt.n	800976e <Paint_DrawCircle+0x1ea>
 800976c:	e752      	b.n	8009614 <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 800976e:	210a      	movs	r1, #10
 8009770:	187b      	adds	r3, r7, r1
 8009772:	2200      	movs	r2, #0
 8009774:	5e9b      	ldrsh	r3, [r3, r2]
 8009776:	2b00      	cmp	r3, #0
 8009778:	da0d      	bge.n	8009796 <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 800977a:	230e      	movs	r3, #14
 800977c:	18fb      	adds	r3, r7, r3
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	b29a      	uxth	r2, r3
 8009784:	187b      	adds	r3, r7, r1
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	18d3      	adds	r3, r2, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	3306      	adds	r3, #6
 800978e:	b29a      	uxth	r2, r3
 8009790:	187b      	adds	r3, r7, r1
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	e01c      	b.n	80097d0 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8009796:	230e      	movs	r3, #14
 8009798:	18fb      	adds	r3, r7, r3
 800979a:	2200      	movs	r2, #0
 800979c:	5e9a      	ldrsh	r2, [r3, r2]
 800979e:	210c      	movs	r1, #12
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	2000      	movs	r0, #0
 80097a4:	5e1b      	ldrsh	r3, [r3, r0]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	200a      	movs	r0, #10
 80097b0:	183b      	adds	r3, r7, r0
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	330a      	adds	r3, #10
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	183b      	adds	r3, r7, r0
 80097be:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 80097c0:	187b      	adds	r3, r7, r1
 80097c2:	2200      	movs	r2, #0
 80097c4:	5e9b      	ldrsh	r3, [r3, r2]
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 80097d0:	210e      	movs	r1, #14
 80097d2:	187b      	adds	r3, r7, r1
 80097d4:	2200      	movs	r2, #0
 80097d6:	5e9b      	ldrsh	r3, [r3, r2]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3301      	adds	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 80097e2:	230e      	movs	r3, #14
 80097e4:	18fa      	adds	r2, r7, r3
 80097e6:	230c      	movs	r3, #12
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	2100      	movs	r1, #0
 80097ec:	5e52      	ldrsh	r2, [r2, r1]
 80097ee:	2100      	movs	r1, #0
 80097f0:	5e5b      	ldrsh	r3, [r3, r1]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	dc00      	bgt.n	80097f8 <Paint_DrawCircle+0x274>
 80097f6:	e706      	b.n	8009606 <Paint_DrawCircle+0x82>
 80097f8:	e112      	b.n	8009a20 <Paint_DrawCircle+0x49c>
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	20000654 	.word	0x20000654
 8009800:	08013bb4 	.word	0x08013bb4
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 8009804:	250e      	movs	r5, #14
 8009806:	197b      	adds	r3, r7, r5
 8009808:	881a      	ldrh	r2, [r3, #0]
 800980a:	1dbb      	adds	r3, r7, #6
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	18d3      	adds	r3, r2, r3
 8009810:	b298      	uxth	r0, r3
 8009812:	260c      	movs	r6, #12
 8009814:	19bb      	adds	r3, r7, r6
 8009816:	881a      	ldrh	r2, [r3, #0]
 8009818:	1d3b      	adds	r3, r7, #4
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	18d3      	adds	r3, r2, r3
 800981e:	b299      	uxth	r1, r3
 8009820:	2320      	movs	r3, #32
 8009822:	2208      	movs	r2, #8
 8009824:	4694      	mov	ip, r2
 8009826:	44bc      	add	ip, r7
 8009828:	4463      	add	r3, ip
 800982a:	781c      	ldrb	r4, [r3, #0]
 800982c:	003b      	movs	r3, r7
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	2301      	movs	r3, #1
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	0023      	movs	r3, r4
 8009836:	f7ff fb27 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 800983a:	197b      	adds	r3, r7, r5
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	1dba      	adds	r2, r7, #6
 8009840:	8812      	ldrh	r2, [r2, #0]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	b298      	uxth	r0, r3
 8009846:	19bb      	adds	r3, r7, r6
 8009848:	881a      	ldrh	r2, [r3, #0]
 800984a:	1d3b      	adds	r3, r7, #4
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	18d3      	adds	r3, r2, r3
 8009850:	b299      	uxth	r1, r3
 8009852:	2320      	movs	r3, #32
 8009854:	2208      	movs	r2, #8
 8009856:	4694      	mov	ip, r2
 8009858:	44bc      	add	ip, r7
 800985a:	4463      	add	r3, ip
 800985c:	781c      	ldrb	r4, [r3, #0]
 800985e:	003b      	movs	r3, r7
 8009860:	881a      	ldrh	r2, [r3, #0]
 8009862:	2301      	movs	r3, #1
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	0023      	movs	r3, r4
 8009868:	f7ff fb0e 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 800986c:	19bb      	adds	r3, r7, r6
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	1dba      	adds	r2, r7, #6
 8009872:	8812      	ldrh	r2, [r2, #0]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	b298      	uxth	r0, r3
 8009878:	197b      	adds	r3, r7, r5
 800987a:	881a      	ldrh	r2, [r3, #0]
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	18d3      	adds	r3, r2, r3
 8009882:	b299      	uxth	r1, r3
 8009884:	2320      	movs	r3, #32
 8009886:	2208      	movs	r2, #8
 8009888:	4694      	mov	ip, r2
 800988a:	44bc      	add	ip, r7
 800988c:	4463      	add	r3, ip
 800988e:	781c      	ldrb	r4, [r3, #0]
 8009890:	003b      	movs	r3, r7
 8009892:	881a      	ldrh	r2, [r3, #0]
 8009894:	2301      	movs	r3, #1
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	0023      	movs	r3, r4
 800989a:	f7ff faf5 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 800989e:	19bb      	adds	r3, r7, r6
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	1dba      	adds	r2, r7, #6
 80098a4:	8812      	ldrh	r2, [r2, #0]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	b298      	uxth	r0, r3
 80098aa:	197b      	adds	r3, r7, r5
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	1d3a      	adds	r2, r7, #4
 80098b0:	8812      	ldrh	r2, [r2, #0]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	b299      	uxth	r1, r3
 80098b6:	2320      	movs	r3, #32
 80098b8:	2208      	movs	r2, #8
 80098ba:	4694      	mov	ip, r2
 80098bc:	44bc      	add	ip, r7
 80098be:	4463      	add	r3, ip
 80098c0:	781c      	ldrb	r4, [r3, #0]
 80098c2:	003b      	movs	r3, r7
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	2301      	movs	r3, #1
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	0023      	movs	r3, r4
 80098cc:	f7ff fadc 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 80098d0:	197b      	adds	r3, r7, r5
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	1dba      	adds	r2, r7, #6
 80098d6:	8812      	ldrh	r2, [r2, #0]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	b298      	uxth	r0, r3
 80098dc:	19bb      	adds	r3, r7, r6
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	1d3a      	adds	r2, r7, #4
 80098e2:	8812      	ldrh	r2, [r2, #0]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	b299      	uxth	r1, r3
 80098e8:	2320      	movs	r3, #32
 80098ea:	2208      	movs	r2, #8
 80098ec:	4694      	mov	ip, r2
 80098ee:	44bc      	add	ip, r7
 80098f0:	4463      	add	r3, ip
 80098f2:	781c      	ldrb	r4, [r3, #0]
 80098f4:	003b      	movs	r3, r7
 80098f6:	881a      	ldrh	r2, [r3, #0]
 80098f8:	2301      	movs	r3, #1
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	0023      	movs	r3, r4
 80098fe:	f7ff fac3 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 8009902:	197b      	adds	r3, r7, r5
 8009904:	881a      	ldrh	r2, [r3, #0]
 8009906:	1dbb      	adds	r3, r7, #6
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	b298      	uxth	r0, r3
 800990e:	19bb      	adds	r3, r7, r6
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	1d3a      	adds	r2, r7, #4
 8009914:	8812      	ldrh	r2, [r2, #0]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	b299      	uxth	r1, r3
 800991a:	2320      	movs	r3, #32
 800991c:	2208      	movs	r2, #8
 800991e:	4694      	mov	ip, r2
 8009920:	44bc      	add	ip, r7
 8009922:	4463      	add	r3, ip
 8009924:	781c      	ldrb	r4, [r3, #0]
 8009926:	003b      	movs	r3, r7
 8009928:	881a      	ldrh	r2, [r3, #0]
 800992a:	2301      	movs	r3, #1
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	0023      	movs	r3, r4
 8009930:	f7ff faaa 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 8009934:	19bb      	adds	r3, r7, r6
 8009936:	881a      	ldrh	r2, [r3, #0]
 8009938:	1dbb      	adds	r3, r7, #6
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	18d3      	adds	r3, r2, r3
 800993e:	b298      	uxth	r0, r3
 8009940:	197b      	adds	r3, r7, r5
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	1d3a      	adds	r2, r7, #4
 8009946:	8812      	ldrh	r2, [r2, #0]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	b299      	uxth	r1, r3
 800994c:	2320      	movs	r3, #32
 800994e:	2208      	movs	r2, #8
 8009950:	4694      	mov	ip, r2
 8009952:	44bc      	add	ip, r7
 8009954:	4463      	add	r3, ip
 8009956:	781c      	ldrb	r4, [r3, #0]
 8009958:	003b      	movs	r3, r7
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	2301      	movs	r3, #1
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	0023      	movs	r3, r4
 8009962:	f7ff fa91 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 8009966:	19bb      	adds	r3, r7, r6
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	1dbb      	adds	r3, r7, #6
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	18d3      	adds	r3, r2, r3
 8009970:	b298      	uxth	r0, r3
 8009972:	197b      	adds	r3, r7, r5
 8009974:	881a      	ldrh	r2, [r3, #0]
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	18d3      	adds	r3, r2, r3
 800997c:	b299      	uxth	r1, r3
 800997e:	2320      	movs	r3, #32
 8009980:	2208      	movs	r2, #8
 8009982:	4694      	mov	ip, r2
 8009984:	44bc      	add	ip, r7
 8009986:	4463      	add	r3, ip
 8009988:	781c      	ldrb	r4, [r3, #0]
 800998a:	003b      	movs	r3, r7
 800998c:	881a      	ldrh	r2, [r3, #0]
 800998e:	2301      	movs	r3, #1
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	0023      	movs	r3, r4
 8009994:	f7ff fa78 	bl	8008e88 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 8009998:	210a      	movs	r1, #10
 800999a:	187b      	adds	r3, r7, r1
 800999c:	2200      	movs	r2, #0
 800999e:	5e9b      	ldrsh	r3, [r3, r2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	da0c      	bge.n	80099be <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 80099a4:	197b      	adds	r3, r7, r5
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	187b      	adds	r3, r7, r1
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	18d3      	adds	r3, r2, r3
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3306      	adds	r3, #6
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	187b      	adds	r3, r7, r1
 80099ba:	801a      	strh	r2, [r3, #0]
 80099bc:	e01c      	b.n	80099f8 <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80099be:	230e      	movs	r3, #14
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	5e9a      	ldrsh	r2, [r3, r2]
 80099c6:	210c      	movs	r1, #12
 80099c8:	187b      	adds	r3, r7, r1
 80099ca:	2000      	movs	r0, #0
 80099cc:	5e1b      	ldrsh	r3, [r3, r0]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	200a      	movs	r0, #10
 80099d8:	183b      	adds	r3, r7, r0
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	18d3      	adds	r3, r2, r3
 80099de:	b29b      	uxth	r3, r3
 80099e0:	330a      	adds	r3, #10
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	183b      	adds	r3, r7, r0
 80099e6:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 80099e8:	187b      	adds	r3, r7, r1
 80099ea:	2200      	movs	r2, #0
 80099ec:	5e9b      	ldrsh	r3, [r3, r2]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	187b      	adds	r3, r7, r1
 80099f6:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 80099f8:	210e      	movs	r1, #14
 80099fa:	187b      	adds	r3, r7, r1
 80099fc:	2200      	movs	r2, #0
 80099fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3301      	adds	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	187b      	adds	r3, r7, r1
 8009a08:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 8009a0a:	230e      	movs	r3, #14
 8009a0c:	18fa      	adds	r2, r7, r3
 8009a0e:	230c      	movs	r3, #12
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	2100      	movs	r1, #0
 8009a14:	5e52      	ldrsh	r2, [r2, r1]
 8009a16:	2100      	movs	r1, #0
 8009a18:	5e5b      	ldrsh	r3, [r3, r1]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	dc00      	bgt.n	8009a20 <Paint_DrawCircle+0x49c>
 8009a1e:	e6f1      	b.n	8009804 <Paint_DrawCircle+0x280>
		}
	}
}
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b005      	add	sp, #20
 8009a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a26:	46c0      	nop			; (mov r8, r8)

08009a28 <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009a28:	b5b0      	push	{r4, r5, r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	0004      	movs	r4, r0
 8009a30:	0008      	movs	r0, r1
 8009a32:	0011      	movs	r1, r2
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	250e      	movs	r5, #14
 8009a38:	197b      	adds	r3, r7, r5
 8009a3a:	1c22      	adds	r2, r4, #0
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	240c      	movs	r4, #12
 8009a40:	193b      	adds	r3, r7, r4
 8009a42:	1c02      	adds	r2, r0, #0
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	230b      	movs	r3, #11
 8009a48:	18fb      	adds	r3, r7, r3
 8009a4a:	1c0a      	adds	r2, r1, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009a4e:	4b66      	ldr	r3, [pc, #408]	; (8009be8 <Paint_DrawChar+0x1c0>)
 8009a50:	889b      	ldrh	r3, [r3, #4]
 8009a52:	197a      	adds	r2, r7, r5
 8009a54:	8812      	ldrh	r2, [r2, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d805      	bhi.n	8009a66 <Paint_DrawChar+0x3e>
 8009a5a:	4b63      	ldr	r3, [pc, #396]	; (8009be8 <Paint_DrawChar+0x1c0>)
 8009a5c:	88db      	ldrh	r3, [r3, #6]
 8009a5e:	193a      	adds	r2, r7, r4
 8009a60:	8812      	ldrh	r2, [r2, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d904      	bls.n	8009a70 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8009a66:	4b61      	ldr	r3, [pc, #388]	; (8009bec <Paint_DrawChar+0x1c4>)
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f007 fa43 	bl	8010ef4 <puts>
		return;
 8009a6e:	e0b7      	b.n	8009be0 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 8009a70:	230b      	movs	r3, #11
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	3b20      	subs	r3, #32
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	88d2      	ldrh	r2, [r2, #6]
 8009a7c:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	8892      	ldrh	r2, [r2, #4]
 8009a82:	08d2      	lsrs	r2, r2, #3
 8009a84:	b292      	uxth	r2, r2
 8009a86:	0010      	movs	r0, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	8892      	ldrh	r2, [r2, #4]
 8009a8c:	2107      	movs	r1, #7
 8009a8e:	400a      	ands	r2, r1
 8009a90:	b292      	uxth	r2, r2
 8009a92:	1e51      	subs	r1, r2, #1
 8009a94:	418a      	sbcs	r2, r1
 8009a96:	b2d2      	uxtb	r2, r2
 8009a98:	1882      	adds	r2, r0, r2
 8009a9a:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 8009a9c:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	18d3      	adds	r3, r2, r3
 8009aa6:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 8009aa8:	231e      	movs	r3, #30
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	2200      	movs	r2, #0
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	e08e      	b.n	8009bd0 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 8009ab2:	231c      	movs	r3, #28
 8009ab4:	18fb      	adds	r3, r7, r3
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	e071      	b.n	8009ba0 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8009abc:	2334      	movs	r3, #52	; 0x34
 8009abe:	18fb      	adds	r3, r7, r3
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	2bff      	cmp	r3, #255	; 0xff
 8009ac4:	d122      	bne.n	8009b0c <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	0019      	movs	r1, r3
 8009acc:	201c      	movs	r0, #28
 8009ace:	183b      	adds	r3, r7, r0
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	2207      	movs	r2, #7
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2280      	movs	r2, #128	; 0x80
 8009ad8:	411a      	asrs	r2, r3
 8009ada:	0013      	movs	r3, r2
 8009adc:	400b      	ands	r3, r1
 8009ade:	d04e      	beq.n	8009b7e <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009ae0:	230e      	movs	r3, #14
 8009ae2:	18fa      	adds	r2, r7, r3
 8009ae4:	183b      	adds	r3, r7, r0
 8009ae6:	8812      	ldrh	r2, [r2, #0]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	18d3      	adds	r3, r2, r3
 8009aec:	b298      	uxth	r0, r3
 8009aee:	230c      	movs	r3, #12
 8009af0:	18fa      	adds	r2, r7, r3
 8009af2:	231e      	movs	r3, #30
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	8812      	ldrh	r2, [r2, #0]
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	18d3      	adds	r3, r2, r3
 8009afc:	b299      	uxth	r1, r3
 8009afe:	2330      	movs	r3, #48	; 0x30
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	001a      	movs	r2, r3
 8009b06:	f7fe ff8d 	bl	8008a24 <Paint_SetPixel>
 8009b0a:	e038      	b.n	8009b7e <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	0019      	movs	r1, r3
 8009b12:	201c      	movs	r0, #28
 8009b14:	183b      	adds	r3, r7, r0
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	2207      	movs	r2, #7
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2280      	movs	r2, #128	; 0x80
 8009b1e:	411a      	asrs	r2, r3
 8009b20:	0013      	movs	r3, r2
 8009b22:	400b      	ands	r3, r1
 8009b24:	d015      	beq.n	8009b52 <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009b26:	230e      	movs	r3, #14
 8009b28:	18fa      	adds	r2, r7, r3
 8009b2a:	183b      	adds	r3, r7, r0
 8009b2c:	8812      	ldrh	r2, [r2, #0]
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	18d3      	adds	r3, r2, r3
 8009b32:	b298      	uxth	r0, r3
 8009b34:	230c      	movs	r3, #12
 8009b36:	18fa      	adds	r2, r7, r3
 8009b38:	231e      	movs	r3, #30
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	8812      	ldrh	r2, [r2, #0]
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	18d3      	adds	r3, r2, r3
 8009b42:	b299      	uxth	r1, r3
 8009b44:	2330      	movs	r3, #48	; 0x30
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	001a      	movs	r2, r3
 8009b4c:	f7fe ff6a 	bl	8008a24 <Paint_SetPixel>
 8009b50:	e015      	b.n	8009b7e <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009b52:	230e      	movs	r3, #14
 8009b54:	18fa      	adds	r2, r7, r3
 8009b56:	231c      	movs	r3, #28
 8009b58:	18fb      	adds	r3, r7, r3
 8009b5a:	8812      	ldrh	r2, [r2, #0]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	b298      	uxth	r0, r3
 8009b62:	230c      	movs	r3, #12
 8009b64:	18fa      	adds	r2, r7, r3
 8009b66:	231e      	movs	r3, #30
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	8812      	ldrh	r2, [r2, #0]
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	18d3      	adds	r3, r2, r3
 8009b70:	b299      	uxth	r1, r3
 8009b72:	2334      	movs	r3, #52	; 0x34
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	001a      	movs	r2, r3
 8009b7a:	f7fe ff53 	bl	8008a24 <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 8009b7e:	231c      	movs	r3, #28
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	2207      	movs	r2, #7
 8009b86:	4013      	ands	r3, r2
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b07      	cmp	r3, #7
 8009b8c:	d102      	bne.n	8009b94 <Paint_DrawChar+0x16c>
				ptr++;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	3301      	adds	r3, #1
 8009b92:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 8009b94:	211c      	movs	r1, #28
 8009b96:	187b      	adds	r3, r7, r1
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	187b      	adds	r3, r7, r1
 8009b9c:	3201      	adds	r2, #1
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	889b      	ldrh	r3, [r3, #4]
 8009ba4:	221c      	movs	r2, #28
 8009ba6:	18ba      	adds	r2, r7, r2
 8009ba8:	8812      	ldrh	r2, [r2, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d200      	bcs.n	8009bb0 <Paint_DrawChar+0x188>
 8009bae:	e785      	b.n	8009abc <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	889b      	ldrh	r3, [r3, #4]
 8009bb4:	2207      	movs	r2, #7
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <Paint_DrawChar+0x19c>
			ptr++;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8009bc4:	211e      	movs	r1, #30
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	881a      	ldrh	r2, [r3, #0]
 8009bca:	187b      	adds	r3, r7, r1
 8009bcc:	3201      	adds	r2, #1
 8009bce:	801a      	strh	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	88db      	ldrh	r3, [r3, #6]
 8009bd4:	221e      	movs	r2, #30
 8009bd6:	18ba      	adds	r2, r7, r2
 8009bd8:	8812      	ldrh	r2, [r2, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d200      	bcs.n	8009be0 <Paint_DrawChar+0x1b8>
 8009bde:	e768      	b.n	8009ab2 <Paint_DrawChar+0x8a>
	} // Write all
}
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b008      	add	sp, #32
 8009be4:	bdb0      	pop	{r4, r5, r7, pc}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	20000654 	.word	0x20000654
 8009bec:	08013bf4 	.word	0x08013bf4

08009bf0 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009bf0:	b5b0      	push	{r4, r5, r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60ba      	str	r2, [r7, #8]
 8009bf8:	607b      	str	r3, [r7, #4]
 8009bfa:	240e      	movs	r4, #14
 8009bfc:	193b      	adds	r3, r7, r4
 8009bfe:	1c02      	adds	r2, r0, #0
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	200c      	movs	r0, #12
 8009c04:	183b      	adds	r3, r7, r0
 8009c06:	1c0a      	adds	r2, r1, #0
 8009c08:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 8009c0a:	2316      	movs	r3, #22
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	0021      	movs	r1, r4
 8009c10:	187a      	adds	r2, r7, r1
 8009c12:	8812      	ldrh	r2, [r2, #0]
 8009c14:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 8009c16:	2314      	movs	r3, #20
 8009c18:	18fb      	adds	r3, r7, r3
 8009c1a:	183a      	adds	r2, r7, r0
 8009c1c:	8812      	ldrh	r2, [r2, #0]
 8009c1e:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8009c20:	4b30      	ldr	r3, [pc, #192]	; (8009ce4 <Paint_DrawString_EN+0xf4>)
 8009c22:	889b      	ldrh	r3, [r3, #4]
 8009c24:	187a      	adds	r2, r7, r1
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d805      	bhi.n	8009c38 <Paint_DrawString_EN+0x48>
 8009c2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ce4 <Paint_DrawString_EN+0xf4>)
 8009c2e:	88db      	ldrh	r3, [r3, #6]
 8009c30:	183a      	adds	r2, r7, r0
 8009c32:	8812      	ldrh	r2, [r2, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d94e      	bls.n	8009cd6 <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009c38:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <Paint_DrawString_EN+0xf8>)
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f007 f95a 	bl	8010ef4 <puts>
		return;
 8009c40:	e04d      	b.n	8009cde <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 8009c42:	2116      	movs	r1, #22
 8009c44:	187b      	adds	r3, r7, r1
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	8892      	ldrh	r2, [r2, #4]
 8009c4c:	189b      	adds	r3, r3, r2
 8009c4e:	4a25      	ldr	r2, [pc, #148]	; (8009ce4 <Paint_DrawString_EN+0xf4>)
 8009c50:	8892      	ldrh	r2, [r2, #4]
 8009c52:	4293      	cmp	r3, r2
 8009c54:	dd0c      	ble.n	8009c70 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 8009c56:	187b      	adds	r3, r7, r1
 8009c58:	220e      	movs	r2, #14
 8009c5a:	18ba      	adds	r2, r7, r2
 8009c5c:	8812      	ldrh	r2, [r2, #0]
 8009c5e:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	88d9      	ldrh	r1, [r3, #6]
 8009c64:	2214      	movs	r2, #20
 8009c66:	18bb      	adds	r3, r7, r2
 8009c68:	18ba      	adds	r2, r7, r2
 8009c6a:	8812      	ldrh	r2, [r2, #0]
 8009c6c:	188a      	adds	r2, r1, r2
 8009c6e:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 8009c70:	2114      	movs	r1, #20
 8009c72:	187b      	adds	r3, r7, r1
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	88d2      	ldrh	r2, [r2, #6]
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	4a19      	ldr	r2, [pc, #100]	; (8009ce4 <Paint_DrawString_EN+0xf4>)
 8009c7e:	88d2      	ldrh	r2, [r2, #6]
 8009c80:	4293      	cmp	r3, r2
 8009c82:	dd0a      	ble.n	8009c9a <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 8009c84:	2316      	movs	r3, #22
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	220e      	movs	r2, #14
 8009c8a:	18ba      	adds	r2, r7, r2
 8009c8c:	8812      	ldrh	r2, [r2, #0]
 8009c8e:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 8009c90:	187b      	adds	r3, r7, r1
 8009c92:	220c      	movs	r2, #12
 8009c94:	18ba      	adds	r2, r7, r2
 8009c96:	8812      	ldrh	r2, [r2, #0]
 8009c98:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	687c      	ldr	r4, [r7, #4]
 8009ca0:	2314      	movs	r3, #20
 8009ca2:	18fb      	adds	r3, r7, r3
 8009ca4:	8819      	ldrh	r1, [r3, #0]
 8009ca6:	2516      	movs	r5, #22
 8009ca8:	197b      	adds	r3, r7, r5
 8009caa:	8818      	ldrh	r0, [r3, #0]
 8009cac:	232c      	movs	r3, #44	; 0x2c
 8009cae:	18fb      	adds	r3, r7, r3
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	2328      	movs	r3, #40	; 0x28
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	0023      	movs	r3, r4
 8009cbe:	f7ff feb3 	bl	8009a28 <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	8899      	ldrh	r1, [r3, #4]
 8009ccc:	197b      	adds	r3, r7, r5
 8009cce:	197a      	adds	r2, r7, r5
 8009cd0:	8812      	ldrh	r2, [r2, #0]
 8009cd2:	188a      	adds	r2, r1, r2
 8009cd4:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1b1      	bne.n	8009c42 <Paint_DrawString_EN+0x52>
	}
}
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b006      	add	sp, #24
 8009ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce4:	20000654 	.word	0x20000654
 8009ce8:	08013c34 	.word	0x08013c34

08009cec <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8009cec:	b5b0      	push	{r4, r5, r7, lr}
 8009cee:	4c6b      	ldr	r4, [pc, #428]	; (8009e9c <Paint_DrawNum+0x1b0>)
 8009cf0:	44a5      	add	sp, r4
 8009cf2:	af02      	add	r7, sp, #8
 8009cf4:	60ba      	str	r2, [r7, #8]
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	4b69      	ldr	r3, [pc, #420]	; (8009ea0 <Paint_DrawNum+0x1b4>)
 8009cfa:	2286      	movs	r2, #134	; 0x86
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	4694      	mov	ip, r2
 8009d00:	44bc      	add	ip, r7
 8009d02:	4463      	add	r3, ip
 8009d04:	1c02      	adds	r2, r0, #0
 8009d06:	801a      	strh	r2, [r3, #0]
 8009d08:	4b66      	ldr	r3, [pc, #408]	; (8009ea4 <Paint_DrawNum+0x1b8>)
 8009d0a:	2286      	movs	r2, #134	; 0x86
 8009d0c:	0092      	lsls	r2, r2, #2
 8009d0e:	4694      	mov	ip, r2
 8009d10:	44bc      	add	ip, r7
 8009d12:	4463      	add	r3, ip
 8009d14:	1c0a      	adds	r2, r1, #0
 8009d16:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 8009d18:	4b63      	ldr	r3, [pc, #396]	; (8009ea8 <Paint_DrawNum+0x1bc>)
 8009d1a:	18fb      	adds	r3, r7, r3
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	2385      	movs	r3, #133	; 0x85
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	2200      	movs	r2, #0
 8009d28:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 8009d2a:	4b60      	ldr	r3, [pc, #384]	; (8009eac <Paint_DrawNum+0x1c0>)
 8009d2c:	2286      	movs	r2, #134	; 0x86
 8009d2e:	0092      	lsls	r2, r2, #2
 8009d30:	4694      	mov	ip, r2
 8009d32:	44bc      	add	ip, r7
 8009d34:	4463      	add	r3, ip
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	22fb      	movs	r2, #251	; 0xfb
 8009d3e:	2100      	movs	r1, #0
 8009d40:	0018      	movs	r0, r3
 8009d42:	f006 ff9b 	bl	8010c7c <memset>
 8009d46:	4b5a      	ldr	r3, [pc, #360]	; (8009eb0 <Paint_DrawNum+0x1c4>)
 8009d48:	2286      	movs	r2, #134	; 0x86
 8009d4a:	0092      	lsls	r2, r2, #2
 8009d4c:	4694      	mov	ip, r2
 8009d4e:	44bc      	add	ip, r7
 8009d50:	4463      	add	r3, ip
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	3304      	adds	r3, #4
 8009d58:	22fb      	movs	r2, #251	; 0xfb
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	f006 ff8d 	bl	8010c7c <memset>
	uint8_t *pStr = Str_Array;
 8009d62:	2388      	movs	r3, #136	; 0x88
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	18fb      	adds	r3, r7, r3
 8009d68:	2284      	movs	r2, #132	; 0x84
 8009d6a:	0092      	lsls	r2, r2, #2
 8009d6c:	18ba      	adds	r2, r7, r2
 8009d6e:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009d70:	4b50      	ldr	r3, [pc, #320]	; (8009eb4 <Paint_DrawNum+0x1c8>)
 8009d72:	889b      	ldrh	r3, [r3, #4]
 8009d74:	4a4a      	ldr	r2, [pc, #296]	; (8009ea0 <Paint_DrawNum+0x1b4>)
 8009d76:	2186      	movs	r1, #134	; 0x86
 8009d78:	0089      	lsls	r1, r1, #2
 8009d7a:	468c      	mov	ip, r1
 8009d7c:	44bc      	add	ip, r7
 8009d7e:	4462      	add	r2, ip
 8009d80:	8812      	ldrh	r2, [r2, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d80a      	bhi.n	8009d9c <Paint_DrawNum+0xb0>
 8009d86:	4b4b      	ldr	r3, [pc, #300]	; (8009eb4 <Paint_DrawNum+0x1c8>)
 8009d88:	88db      	ldrh	r3, [r3, #6]
 8009d8a:	4a46      	ldr	r2, [pc, #280]	; (8009ea4 <Paint_DrawNum+0x1b8>)
 8009d8c:	2186      	movs	r1, #134	; 0x86
 8009d8e:	0089      	lsls	r1, r1, #2
 8009d90:	468c      	mov	ip, r1
 8009d92:	44bc      	add	ip, r7
 8009d94:	4462      	add	r2, ip
 8009d96:	8812      	ldrh	r2, [r2, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d927      	bls.n	8009dec <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8009d9c:	4b46      	ldr	r3, [pc, #280]	; (8009eb8 <Paint_DrawNum+0x1cc>)
 8009d9e:	0018      	movs	r0, r3
 8009da0:	f007 f8a8 	bl	8010ef4 <puts>
 8009da4:	e074      	b.n	8009e90 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	210a      	movs	r1, #10
 8009daa:	0018      	movs	r0, r3
 8009dac:	f7f6 fb22 	bl	80003f4 <__aeabi_idivmod>
 8009db0:	000b      	movs	r3, r1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	483c      	ldr	r0, [pc, #240]	; (8009ea8 <Paint_DrawNum+0x1bc>)
 8009db6:	183b      	adds	r3, r7, r0
 8009db8:	2100      	movs	r1, #0
 8009dba:	5e5b      	ldrsh	r3, [r3, r1]
 8009dbc:	3230      	adds	r2, #48	; 0x30
 8009dbe:	b2d1      	uxtb	r1, r2
 8009dc0:	4a3b      	ldr	r2, [pc, #236]	; (8009eb0 <Paint_DrawNum+0x1c4>)
 8009dc2:	2486      	movs	r4, #134	; 0x86
 8009dc4:	00a4      	lsls	r4, r4, #2
 8009dc6:	46a4      	mov	ip, r4
 8009dc8:	44bc      	add	ip, r7
 8009dca:	4462      	add	r2, ip
 8009dcc:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8009dce:	183b      	adds	r3, r7, r0
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	183b      	adds	r3, r7, r0
 8009ddc:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	210a      	movs	r1, #10
 8009de2:	0018      	movs	r0, r3
 8009de4:	f7f6 fa20 	bl	8000228 <__divsi3>
 8009de8:	0003      	movs	r3, r0
 8009dea:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1d9      	bne.n	8009da6 <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 8009df2:	e027      	b.n	8009e44 <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8009df4:	482c      	ldr	r0, [pc, #176]	; (8009ea8 <Paint_DrawNum+0x1bc>)
 8009df6:	183b      	adds	r3, r7, r0
 8009df8:	2200      	movs	r2, #0
 8009dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8009dfc:	1e5a      	subs	r2, r3, #1
 8009dfe:	2485      	movs	r4, #133	; 0x85
 8009e00:	00a4      	lsls	r4, r4, #2
 8009e02:	193b      	adds	r3, r7, r4
 8009e04:	2100      	movs	r1, #0
 8009e06:	5e5b      	ldrsh	r3, [r3, r1]
 8009e08:	4929      	ldr	r1, [pc, #164]	; (8009eb0 <Paint_DrawNum+0x1c4>)
 8009e0a:	2586      	movs	r5, #134	; 0x86
 8009e0c:	00ad      	lsls	r5, r5, #2
 8009e0e:	46ac      	mov	ip, r5
 8009e10:	44bc      	add	ip, r7
 8009e12:	4461      	add	r1, ip
 8009e14:	5c89      	ldrb	r1, [r1, r2]
 8009e16:	4a25      	ldr	r2, [pc, #148]	; (8009eac <Paint_DrawNum+0x1c0>)
 8009e18:	2586      	movs	r5, #134	; 0x86
 8009e1a:	00ad      	lsls	r5, r5, #2
 8009e1c:	46ac      	mov	ip, r5
 8009e1e:	44bc      	add	ip, r7
 8009e20:	4462      	add	r2, ip
 8009e22:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 8009e24:	193b      	adds	r3, r7, r4
 8009e26:	2200      	movs	r2, #0
 8009e28:	5e9b      	ldrsh	r3, [r3, r2]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	193b      	adds	r3, r7, r4
 8009e32:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 8009e34:	183b      	adds	r3, r7, r0
 8009e36:	2200      	movs	r2, #0
 8009e38:	5e9b      	ldrsh	r3, [r3, r2]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	183b      	adds	r3, r7, r0
 8009e42:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 8009e44:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <Paint_DrawNum+0x1bc>)
 8009e46:	18fb      	adds	r3, r7, r3
 8009e48:	2200      	movs	r2, #0
 8009e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dcd1      	bgt.n	8009df4 <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 8009e50:	687c      	ldr	r4, [r7, #4]
 8009e52:	2384      	movs	r3, #132	; 0x84
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <Paint_DrawNum+0x1b8>)
 8009e5c:	2186      	movs	r1, #134	; 0x86
 8009e5e:	0089      	lsls	r1, r1, #2
 8009e60:	468c      	mov	ip, r1
 8009e62:	44bc      	add	ip, r7
 8009e64:	4463      	add	r3, ip
 8009e66:	8819      	ldrh	r1, [r3, #0]
 8009e68:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <Paint_DrawNum+0x1b4>)
 8009e6a:	2086      	movs	r0, #134	; 0x86
 8009e6c:	0080      	lsls	r0, r0, #2
 8009e6e:	4684      	mov	ip, r0
 8009e70:	44bc      	add	ip, r7
 8009e72:	4463      	add	r3, ip
 8009e74:	8818      	ldrh	r0, [r3, #0]
 8009e76:	238b      	movs	r3, #139	; 0x8b
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	238a      	movs	r3, #138	; 0x8a
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	0023      	movs	r3, r4
 8009e8c:	f7ff feb0 	bl	8009bf0 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 8009e90:	46bd      	mov	sp, r7
 8009e92:	2386      	movs	r3, #134	; 0x86
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	449d      	add	sp, r3
 8009e98:	bdb0      	pop	{r4, r5, r7, pc}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	fffffde0 	.word	0xfffffde0
 8009ea0:	fffffdf6 	.word	0xfffffdf6
 8009ea4:	fffffdf4 	.word	0xfffffdf4
 8009ea8:	00000216 	.word	0x00000216
 8009eac:	fffffef8 	.word	0xfffffef8
 8009eb0:	fffffdf8 	.word	0xfffffdf8
 8009eb4:	20000654 	.word	0x20000654
 8009eb8:	08013c78 	.word	0x08013c78

08009ebc <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	00d9      	lsls	r1, r3, #3
 8009ec4:	23a0      	movs	r3, #160	; 0xa0
 8009ec6:	05db      	lsls	r3, r3, #23
 8009ec8:	2201      	movs	r2, #1
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f7fa febf 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8009ed0:	20c8      	movs	r0, #200	; 0xc8
 8009ed2:	f7f9 fb15 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8009ed6:	2380      	movs	r3, #128	; 0x80
 8009ed8:	00d9      	lsls	r1, r3, #3
 8009eda:	23a0      	movs	r3, #160	; 0xa0
 8009edc:	05db      	lsls	r3, r3, #23
 8009ede:	2200      	movs	r2, #0
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f7fa feb4 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8009ee6:	2002      	movs	r0, #2
 8009ee8:	f7f9 fb0a 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	00d9      	lsls	r1, r3, #3
 8009ef0:	23a0      	movs	r3, #160	; 0xa0
 8009ef2:	05db      	lsls	r3, r3, #23
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f7fa fea9 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8009efc:	20c8      	movs	r0, #200	; 0xc8
 8009efe:	f7f9 faff 	bl	8003500 <HAL_Delay>
}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	0002      	movs	r2, r0
 8009f10:	1dfb      	adds	r3, r7, #7
 8009f12:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8009f14:	2380      	movs	r3, #128	; 0x80
 8009f16:	0099      	lsls	r1, r3, #2
 8009f18:	23a0      	movs	r3, #160	; 0xa0
 8009f1a:	05db      	lsls	r3, r3, #23
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f7fa fe95 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	0059      	lsls	r1, r3, #1
 8009f28:	23a0      	movs	r3, #160	; 0xa0
 8009f2a:	05db      	lsls	r3, r3, #23
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f7fa fe8d 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8009f34:	1dfb      	adds	r3, r7, #7
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f7fe fcc5 	bl	80088c8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8009f3e:	2380      	movs	r3, #128	; 0x80
 8009f40:	0059      	lsls	r1, r3, #1
 8009f42:	23a0      	movs	r3, #160	; 0xa0
 8009f44:	05db      	lsls	r3, r3, #23
 8009f46:	2201      	movs	r2, #1
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7fa fe80 	bl	8004c4e <HAL_GPIO_WritePin>
}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	46bd      	mov	sp, r7
 8009f52:	b002      	add	sp, #8
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	0002      	movs	r2, r0
 8009f5e:	1dfb      	adds	r3, r7, #7
 8009f60:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8009f62:	2380      	movs	r3, #128	; 0x80
 8009f64:	0099      	lsls	r1, r3, #2
 8009f66:	23a0      	movs	r3, #160	; 0xa0
 8009f68:	05db      	lsls	r3, r3, #23
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f7fa fe6e 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8009f72:	2380      	movs	r3, #128	; 0x80
 8009f74:	0059      	lsls	r1, r3, #1
 8009f76:	23a0      	movs	r3, #160	; 0xa0
 8009f78:	05db      	lsls	r3, r3, #23
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	f7fa fe66 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8009f82:	1dfb      	adds	r3, r7, #7
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7fe fc9e 	bl	80088c8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	0059      	lsls	r1, r3, #1
 8009f90:	23a0      	movs	r3, #160	; 0xa0
 8009f92:	05db      	lsls	r3, r3, #23
 8009f94:	2201      	movs	r2, #1
 8009f96:	0018      	movs	r0, r3
 8009f98:	f7fa fe59 	bl	8004c4e <HAL_GPIO_WritePin>
}
 8009f9c:	46c0      	nop			; (mov r8, r8)
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	b002      	add	sp, #8
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <EPD_1IN54_V2_ReadBusy+0x38>)
 8009faa:	0018      	movs	r0, r3
 8009fac:	f006 ffa2 	bl	8010ef4 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8009fb0:	e002      	b.n	8009fb8 <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8009fb2:	2064      	movs	r0, #100	; 0x64
 8009fb4:	f7f9 faa4 	bl	8003500 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	23a0      	movs	r3, #160	; 0xa0
 8009fbe:	05db      	lsls	r3, r3, #23
 8009fc0:	0011      	movs	r1, r2
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f7fa fe26 	bl	8004c14 <HAL_GPIO_ReadPin>
 8009fc8:	0003      	movs	r3, r0
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d0f1      	beq.n	8009fb2 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8009fce:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f006 ff8f 	bl	8010ef4 <puts>
}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	08013cc0 	.word	0x08013cc0
 8009fe0:	08013cd8 	.word	0x08013cd8

08009fe4 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8009fe8:	2022      	movs	r0, #34	; 0x22
 8009fea:	f7ff ff8d 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 8009fee:	20f7      	movs	r0, #247	; 0xf7
 8009ff0:	f7ff ffb1 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8009ff4:	2020      	movs	r0, #32
 8009ff6:	f7ff ff87 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8009ffa:	f7ff ffd3 	bl	8009fa4 <EPD_1IN54_V2_ReadBusy>
}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800a008:	2022      	movs	r0, #34	; 0x22
 800a00a:	f7ff ff7d 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 800a00e:	20ff      	movs	r0, #255	; 0xff
 800a010:	f7ff ffa1 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800a014:	2020      	movs	r0, #32
 800a016:	f7ff ff77 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800a01a:	f7ff ffc3 	bl	8009fa4 <EPD_1IN54_V2_ReadBusy>
}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800a028:	f7ff ff48 	bl	8009ebc <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 800a02c:	f7ff ffba 	bl	8009fa4 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 800a030:	2012      	movs	r0, #18
 800a032:	f7ff ff69 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800a036:	f7ff ffb5 	bl	8009fa4 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 800a03a:	2001      	movs	r0, #1
 800a03c:	f7ff ff64 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800a040:	20c7      	movs	r0, #199	; 0xc7
 800a042:	f7ff ff88 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800a046:	2000      	movs	r0, #0
 800a048:	f7ff ff85 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7ff ff82 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 800a052:	2011      	movs	r0, #17
 800a054:	f7ff ff58 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800a058:	2001      	movs	r0, #1
 800a05a:	f7ff ff7c 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 800a05e:	2044      	movs	r0, #68	; 0x44
 800a060:	f7ff ff52 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800a064:	2000      	movs	r0, #0
 800a066:	f7ff ff76 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 800a06a:	2018      	movs	r0, #24
 800a06c:	f7ff ff73 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 800a070:	2045      	movs	r0, #69	; 0x45
 800a072:	f7ff ff49 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 800a076:	20c7      	movs	r0, #199	; 0xc7
 800a078:	f7ff ff6d 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800a07c:	2000      	movs	r0, #0
 800a07e:	f7ff ff6a 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800a082:	2000      	movs	r0, #0
 800a084:	f7ff ff67 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800a088:	2000      	movs	r0, #0
 800a08a:	f7ff ff64 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 800a08e:	203c      	movs	r0, #60	; 0x3c
 800a090:	f7ff ff3a 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800a094:	2001      	movs	r0, #1
 800a096:	f7ff ff5e 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800a09a:	2018      	movs	r0, #24
 800a09c:	f7ff ff34 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800a0a0:	2080      	movs	r0, #128	; 0x80
 800a0a2:	f7ff ff58 	bl	8009f56 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800a0a6:	2022      	movs	r0, #34	; 0x22
 800a0a8:	f7ff ff2e 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800a0ac:	20b1      	movs	r0, #177	; 0xb1
 800a0ae:	f7ff ff52 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800a0b2:	2020      	movs	r0, #32
 800a0b4:	f7ff ff28 	bl	8009f08 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 800a0b8:	204e      	movs	r0, #78	; 0x4e
 800a0ba:	f7ff ff25 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f7ff ff49 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 800a0c4:	204f      	movs	r0, #79	; 0x4f
 800a0c6:	f7ff ff1f 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800a0ca:	20c7      	movs	r0, #199	; 0xc7
 800a0cc:	f7ff ff43 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	f7ff ff40 	bl	8009f56 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 800a0d6:	f7ff ff65 	bl	8009fa4 <EPD_1IN54_V2_ReadBusy>
}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800a0e6:	1cbb      	adds	r3, r7, #2
 800a0e8:	2219      	movs	r2, #25
 800a0ea:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800a0ec:	003b      	movs	r3, r7
 800a0ee:	22c8      	movs	r2, #200	; 0xc8
 800a0f0:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 800a0f2:	2024      	movs	r0, #36	; 0x24
 800a0f4:	f7ff ff08 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800a0f8:	1dbb      	adds	r3, r7, #6
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	801a      	strh	r2, [r3, #0]
 800a0fe:	e016      	b.n	800a12e <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 800a100:	1d3b      	adds	r3, r7, #4
 800a102:	2200      	movs	r2, #0
 800a104:	801a      	strh	r2, [r3, #0]
 800a106:	e007      	b.n	800a118 <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 800a108:	20ff      	movs	r0, #255	; 0xff
 800a10a:	f7ff ff24 	bl	8009f56 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800a10e:	1d3b      	adds	r3, r7, #4
 800a110:	881a      	ldrh	r2, [r3, #0]
 800a112:	1d3b      	adds	r3, r7, #4
 800a114:	3201      	adds	r2, #1
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	1d3a      	adds	r2, r7, #4
 800a11a:	1cbb      	adds	r3, r7, #2
 800a11c:	8812      	ldrh	r2, [r2, #0]
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d3f1      	bcc.n	800a108 <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 800a124:	1dbb      	adds	r3, r7, #6
 800a126:	881a      	ldrh	r2, [r3, #0]
 800a128:	1dbb      	adds	r3, r7, #6
 800a12a:	3201      	adds	r2, #1
 800a12c:	801a      	strh	r2, [r3, #0]
 800a12e:	1dba      	adds	r2, r7, #6
 800a130:	003b      	movs	r3, r7
 800a132:	8812      	ldrh	r2, [r2, #0]
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d3e2      	bcc.n	800a100 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800a13a:	f7ff ff53 	bl	8009fe4 <EPD_1IN54_V2_TurnOnDisplay>
}
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	46bd      	mov	sp, r7
 800a142:	b002      	add	sp, #8
 800a144:	bd80      	pop	{r7, pc}

0800a146 <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800a146:	b590      	push	{r4, r7, lr}
 800a148:	b087      	sub	sp, #28
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800a14e:	2312      	movs	r3, #18
 800a150:	18fb      	adds	r3, r7, r3
 800a152:	2219      	movs	r2, #25
 800a154:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800a156:	2310      	movs	r3, #16
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	22c8      	movs	r2, #200	; 0xc8
 800a15c:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800a162:	2024      	movs	r0, #36	; 0x24
 800a164:	f7ff fed0 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800a168:	2316      	movs	r3, #22
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	2200      	movs	r2, #0
 800a16e:	801a      	strh	r2, [r3, #0]
 800a170:	e02a      	b.n	800a1c8 <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 800a172:	2314      	movs	r3, #20
 800a174:	18fb      	adds	r3, r7, r3
 800a176:	2200      	movs	r2, #0
 800a178:	801a      	strh	r2, [r3, #0]
 800a17a:	e017      	b.n	800a1ac <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 800a17c:	2414      	movs	r4, #20
 800a17e:	193b      	adds	r3, r7, r4
 800a180:	881a      	ldrh	r2, [r3, #0]
 800a182:	2316      	movs	r3, #22
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	2112      	movs	r1, #18
 800a18a:	1879      	adds	r1, r7, r1
 800a18c:	8809      	ldrh	r1, [r1, #0]
 800a18e:	434b      	muls	r3, r1
 800a190:	18d3      	adds	r3, r2, r3
 800a192:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	18d3      	adds	r3, r2, r3
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	0018      	movs	r0, r3
 800a19e:	f7ff feda 	bl	8009f56 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800a1a2:	193b      	adds	r3, r7, r4
 800a1a4:	881a      	ldrh	r2, [r3, #0]
 800a1a6:	193b      	adds	r3, r7, r4
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	801a      	strh	r2, [r3, #0]
 800a1ac:	2314      	movs	r3, #20
 800a1ae:	18fa      	adds	r2, r7, r3
 800a1b0:	2312      	movs	r3, #18
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	8812      	ldrh	r2, [r2, #0]
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d3df      	bcc.n	800a17c <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 800a1bc:	2116      	movs	r1, #22
 800a1be:	187b      	adds	r3, r7, r1
 800a1c0:	881a      	ldrh	r2, [r3, #0]
 800a1c2:	187b      	adds	r3, r7, r1
 800a1c4:	3201      	adds	r2, #1
 800a1c6:	801a      	strh	r2, [r3, #0]
 800a1c8:	2316      	movs	r3, #22
 800a1ca:	18fa      	adds	r2, r7, r3
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	18fb      	adds	r3, r7, r3
 800a1d0:	8812      	ldrh	r2, [r2, #0]
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d3cc      	bcc.n	800a172 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800a1d8:	f7ff ff04 	bl	8009fe4 <EPD_1IN54_V2_TurnOnDisplay>
}
 800a1dc:	46c0      	nop			; (mov r8, r8)
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b007      	add	sp, #28
 800a1e2:	bd90      	pop	{r4, r7, pc}

0800a1e4 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800a1ec:	230e      	movs	r3, #14
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	2219      	movs	r2, #25
 800a1f2:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	18fb      	adds	r3, r7, r3
 800a1f8:	22c8      	movs	r2, #200	; 0xc8
 800a1fa:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800a200:	2024      	movs	r0, #36	; 0x24
 800a202:	f7ff fe81 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800a206:	2316      	movs	r3, #22
 800a208:	18fb      	adds	r3, r7, r3
 800a20a:	2200      	movs	r2, #0
 800a20c:	801a      	strh	r2, [r3, #0]
 800a20e:	e02a      	b.n	800a266 <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 800a210:	2314      	movs	r3, #20
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	2200      	movs	r2, #0
 800a216:	801a      	strh	r2, [r3, #0]
 800a218:	e017      	b.n	800a24a <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 800a21a:	2414      	movs	r4, #20
 800a21c:	193b      	adds	r3, r7, r4
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	2316      	movs	r3, #22
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	210e      	movs	r1, #14
 800a228:	1879      	adds	r1, r7, r1
 800a22a:	8809      	ldrh	r1, [r1, #0]
 800a22c:	434b      	muls	r3, r1
 800a22e:	18d3      	adds	r3, r2, r3
 800a230:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	18d3      	adds	r3, r2, r3
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	0018      	movs	r0, r3
 800a23c:	f7ff fe8b 	bl	8009f56 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800a240:	193b      	adds	r3, r7, r4
 800a242:	881a      	ldrh	r2, [r3, #0]
 800a244:	193b      	adds	r3, r7, r4
 800a246:	3201      	adds	r2, #1
 800a248:	801a      	strh	r2, [r3, #0]
 800a24a:	2314      	movs	r3, #20
 800a24c:	18fa      	adds	r2, r7, r3
 800a24e:	230e      	movs	r3, #14
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	8812      	ldrh	r2, [r2, #0]
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d3df      	bcc.n	800a21a <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 800a25a:	2116      	movs	r1, #22
 800a25c:	187b      	adds	r3, r7, r1
 800a25e:	881a      	ldrh	r2, [r3, #0]
 800a260:	187b      	adds	r3, r7, r1
 800a262:	3201      	adds	r2, #1
 800a264:	801a      	strh	r2, [r3, #0]
 800a266:	2316      	movs	r3, #22
 800a268:	18fa      	adds	r2, r7, r3
 800a26a:	230c      	movs	r3, #12
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d3cc      	bcc.n	800a210 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800a276:	2026      	movs	r0, #38	; 0x26
 800a278:	f7ff fe46 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800a27c:	2312      	movs	r3, #18
 800a27e:	18fb      	adds	r3, r7, r3
 800a280:	2200      	movs	r2, #0
 800a282:	801a      	strh	r2, [r3, #0]
 800a284:	e02a      	b.n	800a2dc <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 800a286:	2310      	movs	r3, #16
 800a288:	18fb      	adds	r3, r7, r3
 800a28a:	2200      	movs	r2, #0
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	e017      	b.n	800a2c0 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 800a290:	2410      	movs	r4, #16
 800a292:	193b      	adds	r3, r7, r4
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	2312      	movs	r3, #18
 800a298:	18fb      	adds	r3, r7, r3
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	210e      	movs	r1, #14
 800a29e:	1879      	adds	r1, r7, r1
 800a2a0:	8809      	ldrh	r1, [r1, #0]
 800a2a2:	434b      	muls	r3, r1
 800a2a4:	18d3      	adds	r3, r2, r3
 800a2a6:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	18d3      	adds	r3, r2, r3
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f7ff fe50 	bl	8009f56 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800a2b6:	193b      	adds	r3, r7, r4
 800a2b8:	881a      	ldrh	r2, [r3, #0]
 800a2ba:	193b      	adds	r3, r7, r4
 800a2bc:	3201      	adds	r2, #1
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	18fa      	adds	r2, r7, r3
 800a2c4:	230e      	movs	r3, #14
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	8812      	ldrh	r2, [r2, #0]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d3df      	bcc.n	800a290 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 800a2d0:	2112      	movs	r1, #18
 800a2d2:	187b      	adds	r3, r7, r1
 800a2d4:	881a      	ldrh	r2, [r3, #0]
 800a2d6:	187b      	adds	r3, r7, r1
 800a2d8:	3201      	adds	r2, #1
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	2312      	movs	r3, #18
 800a2de:	18fa      	adds	r2, r7, r3
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	8812      	ldrh	r2, [r2, #0]
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d3cc      	bcc.n	800a286 <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800a2ec:	f7ff fe8a 	bl	800a004 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800a2f0:	46c0      	nop			; (mov r8, r8)
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b007      	add	sp, #28
 800a2f6:	bd90      	pop	{r4, r7, pc}

0800a2f8 <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800a2f8:	b590      	push	{r4, r7, lr}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800a300:	2312      	movs	r3, #18
 800a302:	18fb      	adds	r3, r7, r3
 800a304:	2219      	movs	r2, #25
 800a306:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800a308:	2310      	movs	r3, #16
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	22c8      	movs	r2, #200	; 0xc8
 800a30e:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 800a310:	2380      	movs	r3, #128	; 0x80
 800a312:	00d9      	lsls	r1, r3, #3
 800a314:	23a0      	movs	r3, #160	; 0xa0
 800a316:	05db      	lsls	r3, r3, #23
 800a318:	2200      	movs	r2, #0
 800a31a:	0018      	movs	r0, r3
 800a31c:	f7fa fc97 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 800a320:	200a      	movs	r0, #10
 800a322:	f7f9 f8ed 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800a326:	2380      	movs	r3, #128	; 0x80
 800a328:	00d9      	lsls	r1, r3, #3
 800a32a:	23a0      	movs	r3, #160	; 0xa0
 800a32c:	05db      	lsls	r3, r3, #23
 800a32e:	2201      	movs	r2, #1
 800a330:	0018      	movs	r0, r3
 800a332:	f7fa fc8c 	bl	8004c4e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 800a336:	200a      	movs	r0, #10
 800a338:	f7f9 f8e2 	bl	8003500 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 800a33c:	203c      	movs	r0, #60	; 0x3c
 800a33e:	f7ff fde3 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800a342:	2080      	movs	r0, #128	; 0x80
 800a344:	f7ff fe07 	bl	8009f56 <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800a34c:	2024      	movs	r0, #36	; 0x24
 800a34e:	f7ff fddb 	bl	8009f08 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800a352:	2316      	movs	r3, #22
 800a354:	18fb      	adds	r3, r7, r3
 800a356:	2200      	movs	r2, #0
 800a358:	801a      	strh	r2, [r3, #0]
 800a35a:	e02a      	b.n	800a3b2 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 800a35c:	2314      	movs	r3, #20
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	2200      	movs	r2, #0
 800a362:	801a      	strh	r2, [r3, #0]
 800a364:	e017      	b.n	800a396 <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 800a366:	2414      	movs	r4, #20
 800a368:	193b      	adds	r3, r7, r4
 800a36a:	881a      	ldrh	r2, [r3, #0]
 800a36c:	2316      	movs	r3, #22
 800a36e:	18fb      	adds	r3, r7, r3
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	2112      	movs	r1, #18
 800a374:	1879      	adds	r1, r7, r1
 800a376:	8809      	ldrh	r1, [r1, #0]
 800a378:	434b      	muls	r3, r1
 800a37a:	18d3      	adds	r3, r2, r3
 800a37c:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	18d3      	adds	r3, r2, r3
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	0018      	movs	r0, r3
 800a388:	f7ff fde5 	bl	8009f56 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800a38c:	193b      	adds	r3, r7, r4
 800a38e:	881a      	ldrh	r2, [r3, #0]
 800a390:	193b      	adds	r3, r7, r4
 800a392:	3201      	adds	r2, #1
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	2314      	movs	r3, #20
 800a398:	18fa      	adds	r2, r7, r3
 800a39a:	2312      	movs	r3, #18
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	8812      	ldrh	r2, [r2, #0]
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d3df      	bcc.n	800a366 <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 800a3a6:	2116      	movs	r1, #22
 800a3a8:	187b      	adds	r3, r7, r1
 800a3aa:	881a      	ldrh	r2, [r3, #0]
 800a3ac:	187b      	adds	r3, r7, r1
 800a3ae:	3201      	adds	r2, #1
 800a3b0:	801a      	strh	r2, [r3, #0]
 800a3b2:	2316      	movs	r3, #22
 800a3b4:	18fa      	adds	r2, r7, r3
 800a3b6:	2310      	movs	r3, #16
 800a3b8:	18fb      	adds	r3, r7, r3
 800a3ba:	8812      	ldrh	r2, [r2, #0]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d3cc      	bcc.n	800a35c <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800a3c2:	f7ff fe1f 	bl	800a004 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800a3c6:	46c0      	nop			; (mov r8, r8)
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b007      	add	sp, #28
 800a3cc:	bd90      	pop	{r4, r7, pc}
	...

0800a3d0 <interfaceSelectLayout>:
//#include <math.h>
#include <stdlib.h>

uint8_t layoutsCounter = 5; //how many layouts are programmed

void interfaceSelectLayout(uint8_t l) {
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	0002      	movs	r2, r0
 800a3d8:	1dfb      	adds	r3, r7, #7
 800a3da:	701a      	strb	r2, [r3, #0]

	if (l == 1) { //simple
 800a3dc:	1dfb      	adds	r3, r7, #7
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d000      	beq.n	800a3e6 <interfaceSelectLayout+0x16>
 800a3e4:	e0a8      	b.n	800a538 <interfaceSelectLayout+0x168>

		showBarometer = 1;
 800a3e6:	4bab      	ldr	r3, [pc, #684]	; (800a694 <interfaceSelectLayout+0x2c4>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
		showBatteryState = 0;
 800a3ec:	4baa      	ldr	r3, [pc, #680]	; (800a698 <interfaceSelectLayout+0x2c8>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800a3f2:	4baa      	ldr	r3, [pc, #680]	; (800a69c <interfaceSelectLayout+0x2cc>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800a3f8:	4ba9      	ldr	r3, [pc, #676]	; (800a6a0 <interfaceSelectLayout+0x2d0>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800a3fe:	4ba9      	ldr	r3, [pc, #676]	; (800a6a4 <interfaceSelectLayout+0x2d4>)
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a404:	4ba8      	ldr	r3, [pc, #672]	; (800a6a8 <interfaceSelectLayout+0x2d8>)
 800a406:	2201      	movs	r2, #1
 800a408:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a40a:	4ba8      	ldr	r3, [pc, #672]	; (800a6ac <interfaceSelectLayout+0x2dc>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a410:	4ba7      	ldr	r3, [pc, #668]	; (800a6b0 <interfaceSelectLayout+0x2e0>)
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a416:	4ba7      	ldr	r3, [pc, #668]	; (800a6b4 <interfaceSelectLayout+0x2e4>)
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a41c:	4ba6      	ldr	r3, [pc, #664]	; (800a6b8 <interfaceSelectLayout+0x2e8>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a422:	4ba6      	ldr	r3, [pc, #664]	; (800a6bc <interfaceSelectLayout+0x2ec>)
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a428:	4ba5      	ldr	r3, [pc, #660]	; (800a6c0 <interfaceSelectLayout+0x2f0>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a42e:	4ba5      	ldr	r3, [pc, #660]	; (800a6c4 <interfaceSelectLayout+0x2f4>)
 800a430:	2201      	movs	r2, #1
 800a432:	701a      	strb	r2, [r3, #0]

		//sensor readings positions
		temperatureX = 38;
 800a434:	4ba4      	ldr	r3, [pc, #656]	; (800a6c8 <interfaceSelectLayout+0x2f8>)
 800a436:	2226      	movs	r2, #38	; 0x26
 800a438:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a43a:	4ba4      	ldr	r3, [pc, #656]	; (800a6cc <interfaceSelectLayout+0x2fc>)
 800a43c:	222c      	movs	r2, #44	; 0x2c
 800a43e:	701a      	strb	r2, [r3, #0]

		humidityX = 130;
 800a440:	4ba3      	ldr	r3, [pc, #652]	; (800a6d0 <interfaceSelectLayout+0x300>)
 800a442:	2282      	movs	r2, #130	; 0x82
 800a444:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a446:	4ba3      	ldr	r3, [pc, #652]	; (800a6d4 <interfaceSelectLayout+0x304>)
 800a448:	224b      	movs	r2, #75	; 0x4b
 800a44a:	701a      	strb	r2, [r3, #0]

		pressureX = 17;
 800a44c:	4ba2      	ldr	r3, [pc, #648]	; (800a6d8 <interfaceSelectLayout+0x308>)
 800a44e:	2211      	movs	r2, #17
 800a450:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a452:	4ba2      	ldr	r3, [pc, #648]	; (800a6dc <interfaceSelectLayout+0x30c>)
 800a454:	2232      	movs	r2, #50	; 0x32
 800a456:	701a      	strb	r2, [r3, #0]

		//compass and altitude
		compassX = 55;
 800a458:	4ba1      	ldr	r3, [pc, #644]	; (800a6e0 <interfaceSelectLayout+0x310>)
 800a45a:	2237      	movs	r2, #55	; 0x37
 800a45c:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800a45e:	4ba1      	ldr	r3, [pc, #644]	; (800a6e4 <interfaceSelectLayout+0x314>)
 800a460:	2264      	movs	r2, #100	; 0x64
 800a462:	701a      	strb	r2, [r3, #0]

		//date position
		dateX = 153;
 800a464:	4ba0      	ldr	r3, [pc, #640]	; (800a6e8 <interfaceSelectLayout+0x318>)
 800a466:	2299      	movs	r2, #153	; 0x99
 800a468:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a46a:	4ba0      	ldr	r3, [pc, #640]	; (800a6ec <interfaceSelectLayout+0x31c>)
 800a46c:	225f      	movs	r2, #95	; 0x5f
 800a46e:	701a      	strb	r2, [r3, #0]

		batteryStateStartX = 135;
 800a470:	4b9f      	ldr	r3, [pc, #636]	; (800a6f0 <interfaceSelectLayout+0x320>)
 800a472:	2287      	movs	r2, #135	; 0x87
 800a474:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a476:	4b9f      	ldr	r3, [pc, #636]	; (800a6f4 <interfaceSelectLayout+0x324>)
 800a478:	2287      	movs	r2, #135	; 0x87
 800a47a:	701a      	strb	r2, [r3, #0]

		pointerShadowShift = 2;
 800a47c:	4b9e      	ldr	r3, [pc, #632]	; (800a6f8 <interfaceSelectLayout+0x328>)
 800a47e:	2202      	movs	r2, #2
 800a480:	701a      	strb	r2, [r3, #0]

		chronoDecimalsStartX = 100;
 800a482:	4b9e      	ldr	r3, [pc, #632]	; (800a6fc <interfaceSelectLayout+0x32c>)
 800a484:	2264      	movs	r2, #100	; 0x64
 800a486:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a488:	4b9d      	ldr	r3, [pc, #628]	; (800a700 <interfaceSelectLayout+0x330>)
 800a48a:	2232      	movs	r2, #50	; 0x32
 800a48c:	701a      	strb	r2, [r3, #0]

		chronoMinutesStartX = 100;
 800a48e:	4b9d      	ldr	r3, [pc, #628]	; (800a704 <interfaceSelectLayout+0x334>)
 800a490:	2264      	movs	r2, #100	; 0x64
 800a492:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a494:	4b9c      	ldr	r3, [pc, #624]	; (800a708 <interfaceSelectLayout+0x338>)
 800a496:	2296      	movs	r2, #150	; 0x96
 800a498:	701a      	strb	r2, [r3, #0]

		secondsStartX = 100;
 800a49a:	4b9c      	ldr	r3, [pc, #624]	; (800a70c <interfaceSelectLayout+0x33c>)
 800a49c:	2264      	movs	r2, #100	; 0x64
 800a49e:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a4a0:	4b9b      	ldr	r3, [pc, #620]	; (800a710 <interfaceSelectLayout+0x340>)
 800a4a2:	2296      	movs	r2, #150	; 0x96
 800a4a4:	701a      	strb	r2, [r3, #0]

		mainStartX = 100;
 800a4a6:	4b9b      	ldr	r3, [pc, #620]	; (800a714 <interfaceSelectLayout+0x344>)
 800a4a8:	2264      	movs	r2, #100	; 0x64
 800a4aa:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a4ac:	4b9a      	ldr	r3, [pc, #616]	; (800a718 <interfaceSelectLayout+0x348>)
 800a4ae:	2264      	movs	r2, #100	; 0x64
 800a4b0:	701a      	strb	r2, [r3, #0]

		compassBoardRadius = 25;
 800a4b2:	4b9a      	ldr	r3, [pc, #616]	; (800a71c <interfaceSelectLayout+0x34c>)
 800a4b4:	2219      	movs	r2, #25
 800a4b6:	701a      	strb	r2, [r3, #0]

		mainBoardRadius = 97;
 800a4b8:	4b99      	ldr	r3, [pc, #612]	; (800a720 <interfaceSelectLayout+0x350>)
 800a4ba:	2261      	movs	r2, #97	; 0x61
 800a4bc:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a4be:	4b99      	ldr	r3, [pc, #612]	; (800a724 <interfaceSelectLayout+0x354>)
 800a4c0:	221c      	movs	r2, #28
 800a4c2:	701a      	strb	r2, [r3, #0]

		//pointers lengths

		hourPointerLength = 55;
 800a4c4:	4b98      	ldr	r3, [pc, #608]	; (800a728 <interfaceSelectLayout+0x358>)
 800a4c6:	2237      	movs	r2, #55	; 0x37
 800a4c8:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a4ca:	4b98      	ldr	r3, [pc, #608]	; (800a72c <interfaceSelectLayout+0x35c>)
 800a4cc:	2250      	movs	r2, #80	; 0x50
 800a4ce:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a4d0:	4b97      	ldr	r3, [pc, #604]	; (800a730 <interfaceSelectLayout+0x360>)
 800a4d2:	2214      	movs	r2, #20
 800a4d4:	701a      	strb	r2, [r3, #0]

		chronoDecimalsPointerLength = 20;
 800a4d6:	4b97      	ldr	r3, [pc, #604]	; (800a734 <interfaceSelectLayout+0x364>)
 800a4d8:	2214      	movs	r2, #20
 800a4da:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a4dc:	4b96      	ldr	r3, [pc, #600]	; (800a738 <interfaceSelectLayout+0x368>)
 800a4de:	2214      	movs	r2, #20
 800a4e0:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a4e2:	4b96      	ldr	r3, [pc, #600]	; (800a73c <interfaceSelectLayout+0x36c>)
 800a4e4:	2250      	movs	r2, #80	; 0x50
 800a4e6:	701a      	strb	r2, [r3, #0]

		batteryStatePointerLength = 35;
 800a4e8:	4b95      	ldr	r3, [pc, #596]	; (800a740 <interfaceSelectLayout+0x370>)
 800a4ea:	2223      	movs	r2, #35	; 0x23
 800a4ec:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a4ee:	4b95      	ldr	r3, [pc, #596]	; (800a744 <interfaceSelectLayout+0x374>)
 800a4f0:	2264      	movs	r2, #100	; 0x64
 800a4f2:	701a      	strb	r2, [r3, #0]

		compassPointerLength = 18;
 800a4f4:	4b94      	ldr	r3, [pc, #592]	; (800a748 <interfaceSelectLayout+0x378>)
 800a4f6:	2212      	movs	r2, #18
 800a4f8:	701a      	strb	r2, [r3, #0]

		//index lengths
		secondsIndexLength = 4;
 800a4fa:	4b94      	ldr	r3, [pc, #592]	; (800a74c <interfaceSelectLayout+0x37c>)
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a500:	4b93      	ldr	r3, [pc, #588]	; (800a750 <interfaceSelectLayout+0x380>)
 800a502:	2202      	movs	r2, #2
 800a504:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a506:	4b93      	ldr	r3, [pc, #588]	; (800a754 <interfaceSelectLayout+0x384>)
 800a508:	2204      	movs	r2, #4
 800a50a:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a50c:	4b92      	ldr	r3, [pc, #584]	; (800a758 <interfaceSelectLayout+0x388>)
 800a50e:	220a      	movs	r2, #10
 800a510:	701a      	strb	r2, [r3, #0]

		batteryStateIndexLength = 15;
 800a512:	4b92      	ldr	r3, [pc, #584]	; (800a75c <interfaceSelectLayout+0x38c>)
 800a514:	220f      	movs	r2, #15
 800a516:	701a      	strb	r2, [r3, #0]

		//pointer shifts
		batteryPointerShift = 20;
 800a518:	4b91      	ldr	r3, [pc, #580]	; (800a760 <interfaceSelectLayout+0x390>)
 800a51a:	2214      	movs	r2, #20
 800a51c:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a51e:	4b91      	ldr	r3, [pc, #580]	; (800a764 <interfaceSelectLayout+0x394>)
 800a520:	2255      	movs	r2, #85	; 0x55
 800a522:	701a      	strb	r2, [r3, #0]

		//moon Phase
		moonPhaseX = 100;
 800a524:	4b90      	ldr	r3, [pc, #576]	; (800a768 <interfaceSelectLayout+0x398>)
 800a526:	2264      	movs	r2, #100	; 0x64
 800a528:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a52a:	4b90      	ldr	r3, [pc, #576]	; (800a76c <interfaceSelectLayout+0x39c>)
 800a52c:	2232      	movs	r2, #50	; 0x32
 800a52e:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 15;
 800a530:	4b8f      	ldr	r3, [pc, #572]	; (800a770 <interfaceSelectLayout+0x3a0>)
 800a532:	220f      	movs	r2, #15
 800a534:	701a      	strb	r2, [r3, #0]
		//pointer shifts
		batteryPointerShift = 20;
		pressurePointerShift = 85;
	}

}
 800a536:	e384      	b.n	800ac42 <interfaceSelectLayout+0x872>
	else if (l == 2) { //navi
 800a538:	1dfb      	adds	r3, r7, #7
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d000      	beq.n	800a542 <interfaceSelectLayout+0x172>
 800a540:	e118      	b.n	800a774 <interfaceSelectLayout+0x3a4>
		showBarometer = 1;
 800a542:	4b54      	ldr	r3, [pc, #336]	; (800a694 <interfaceSelectLayout+0x2c4>)
 800a544:	2201      	movs	r2, #1
 800a546:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a548:	4b53      	ldr	r3, [pc, #332]	; (800a698 <interfaceSelectLayout+0x2c8>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a54e:	4b53      	ldr	r3, [pc, #332]	; (800a69c <interfaceSelectLayout+0x2cc>)
 800a550:	2201      	movs	r2, #1
 800a552:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800a554:	4b52      	ldr	r3, [pc, #328]	; (800a6a0 <interfaceSelectLayout+0x2d0>)
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 1;
 800a55a:	4b52      	ldr	r3, [pc, #328]	; (800a6a4 <interfaceSelectLayout+0x2d4>)
 800a55c:	2201      	movs	r2, #1
 800a55e:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a560:	4b51      	ldr	r3, [pc, #324]	; (800a6a8 <interfaceSelectLayout+0x2d8>)
 800a562:	2201      	movs	r2, #1
 800a564:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a566:	4b51      	ldr	r3, [pc, #324]	; (800a6ac <interfaceSelectLayout+0x2dc>)
 800a568:	2201      	movs	r2, #1
 800a56a:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a56c:	4b50      	ldr	r3, [pc, #320]	; (800a6b0 <interfaceSelectLayout+0x2e0>)
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a572:	4b50      	ldr	r3, [pc, #320]	; (800a6b4 <interfaceSelectLayout+0x2e4>)
 800a574:	2201      	movs	r2, #1
 800a576:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a578:	4b4f      	ldr	r3, [pc, #316]	; (800a6b8 <interfaceSelectLayout+0x2e8>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a57e:	4b4f      	ldr	r3, [pc, #316]	; (800a6bc <interfaceSelectLayout+0x2ec>)
 800a580:	2200      	movs	r2, #0
 800a582:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a584:	4b4e      	ldr	r3, [pc, #312]	; (800a6c0 <interfaceSelectLayout+0x2f0>)
 800a586:	2201      	movs	r2, #1
 800a588:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a58a:	4b4e      	ldr	r3, [pc, #312]	; (800a6c4 <interfaceSelectLayout+0x2f4>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a590:	4b4d      	ldr	r3, [pc, #308]	; (800a6c8 <interfaceSelectLayout+0x2f8>)
 800a592:	2226      	movs	r2, #38	; 0x26
 800a594:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a596:	4b4d      	ldr	r3, [pc, #308]	; (800a6cc <interfaceSelectLayout+0x2fc>)
 800a598:	222c      	movs	r2, #44	; 0x2c
 800a59a:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a59c:	4b4c      	ldr	r3, [pc, #304]	; (800a6d0 <interfaceSelectLayout+0x300>)
 800a59e:	2282      	movs	r2, #130	; 0x82
 800a5a0:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <interfaceSelectLayout+0x304>)
 800a5a4:	224b      	movs	r2, #75	; 0x4b
 800a5a6:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a5a8:	4b4b      	ldr	r3, [pc, #300]	; (800a6d8 <interfaceSelectLayout+0x308>)
 800a5aa:	2211      	movs	r2, #17
 800a5ac:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a5ae:	4b4b      	ldr	r3, [pc, #300]	; (800a6dc <interfaceSelectLayout+0x30c>)
 800a5b0:	2232      	movs	r2, #50	; 0x32
 800a5b2:	701a      	strb	r2, [r3, #0]
		compassX = 55;
 800a5b4:	4b4a      	ldr	r3, [pc, #296]	; (800a6e0 <interfaceSelectLayout+0x310>)
 800a5b6:	2237      	movs	r2, #55	; 0x37
 800a5b8:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800a5ba:	4b4a      	ldr	r3, [pc, #296]	; (800a6e4 <interfaceSelectLayout+0x314>)
 800a5bc:	2264      	movs	r2, #100	; 0x64
 800a5be:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a5c0:	4b49      	ldr	r3, [pc, #292]	; (800a6e8 <interfaceSelectLayout+0x318>)
 800a5c2:	2299      	movs	r2, #153	; 0x99
 800a5c4:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a5c6:	4b49      	ldr	r3, [pc, #292]	; (800a6ec <interfaceSelectLayout+0x31c>)
 800a5c8:	225f      	movs	r2, #95	; 0x5f
 800a5ca:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a5cc:	4b48      	ldr	r3, [pc, #288]	; (800a6f0 <interfaceSelectLayout+0x320>)
 800a5ce:	2287      	movs	r2, #135	; 0x87
 800a5d0:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a5d2:	4b48      	ldr	r3, [pc, #288]	; (800a6f4 <interfaceSelectLayout+0x324>)
 800a5d4:	2287      	movs	r2, #135	; 0x87
 800a5d6:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a5d8:	4b47      	ldr	r3, [pc, #284]	; (800a6f8 <interfaceSelectLayout+0x328>)
 800a5da:	2202      	movs	r2, #2
 800a5dc:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a5de:	4b47      	ldr	r3, [pc, #284]	; (800a6fc <interfaceSelectLayout+0x32c>)
 800a5e0:	2264      	movs	r2, #100	; 0x64
 800a5e2:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a5e4:	4b46      	ldr	r3, [pc, #280]	; (800a700 <interfaceSelectLayout+0x330>)
 800a5e6:	2232      	movs	r2, #50	; 0x32
 800a5e8:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a5ea:	4b46      	ldr	r3, [pc, #280]	; (800a704 <interfaceSelectLayout+0x334>)
 800a5ec:	2264      	movs	r2, #100	; 0x64
 800a5ee:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a5f0:	4b45      	ldr	r3, [pc, #276]	; (800a708 <interfaceSelectLayout+0x338>)
 800a5f2:	2296      	movs	r2, #150	; 0x96
 800a5f4:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a5f6:	4b45      	ldr	r3, [pc, #276]	; (800a70c <interfaceSelectLayout+0x33c>)
 800a5f8:	2264      	movs	r2, #100	; 0x64
 800a5fa:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a5fc:	4b44      	ldr	r3, [pc, #272]	; (800a710 <interfaceSelectLayout+0x340>)
 800a5fe:	2296      	movs	r2, #150	; 0x96
 800a600:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a602:	4b44      	ldr	r3, [pc, #272]	; (800a714 <interfaceSelectLayout+0x344>)
 800a604:	2264      	movs	r2, #100	; 0x64
 800a606:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a608:	4b43      	ldr	r3, [pc, #268]	; (800a718 <interfaceSelectLayout+0x348>)
 800a60a:	2264      	movs	r2, #100	; 0x64
 800a60c:	701a      	strb	r2, [r3, #0]
		compassBoardRadius = 25;
 800a60e:	4b43      	ldr	r3, [pc, #268]	; (800a71c <interfaceSelectLayout+0x34c>)
 800a610:	2219      	movs	r2, #25
 800a612:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a614:	4b42      	ldr	r3, [pc, #264]	; (800a720 <interfaceSelectLayout+0x350>)
 800a616:	2261      	movs	r2, #97	; 0x61
 800a618:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a61a:	4b42      	ldr	r3, [pc, #264]	; (800a724 <interfaceSelectLayout+0x354>)
 800a61c:	221c      	movs	r2, #28
 800a61e:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a620:	4b41      	ldr	r3, [pc, #260]	; (800a728 <interfaceSelectLayout+0x358>)
 800a622:	2237      	movs	r2, #55	; 0x37
 800a624:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a626:	4b41      	ldr	r3, [pc, #260]	; (800a72c <interfaceSelectLayout+0x35c>)
 800a628:	2250      	movs	r2, #80	; 0x50
 800a62a:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a62c:	4b40      	ldr	r3, [pc, #256]	; (800a730 <interfaceSelectLayout+0x360>)
 800a62e:	2214      	movs	r2, #20
 800a630:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a632:	4b40      	ldr	r3, [pc, #256]	; (800a734 <interfaceSelectLayout+0x364>)
 800a634:	2214      	movs	r2, #20
 800a636:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a638:	4b3f      	ldr	r3, [pc, #252]	; (800a738 <interfaceSelectLayout+0x368>)
 800a63a:	2214      	movs	r2, #20
 800a63c:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a63e:	4b3f      	ldr	r3, [pc, #252]	; (800a73c <interfaceSelectLayout+0x36c>)
 800a640:	2250      	movs	r2, #80	; 0x50
 800a642:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a644:	4b3e      	ldr	r3, [pc, #248]	; (800a740 <interfaceSelectLayout+0x370>)
 800a646:	2223      	movs	r2, #35	; 0x23
 800a648:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a64a:	4b3e      	ldr	r3, [pc, #248]	; (800a744 <interfaceSelectLayout+0x374>)
 800a64c:	2264      	movs	r2, #100	; 0x64
 800a64e:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 18;
 800a650:	4b3d      	ldr	r3, [pc, #244]	; (800a748 <interfaceSelectLayout+0x378>)
 800a652:	2212      	movs	r2, #18
 800a654:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a656:	4b3d      	ldr	r3, [pc, #244]	; (800a74c <interfaceSelectLayout+0x37c>)
 800a658:	2204      	movs	r2, #4
 800a65a:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a65c:	4b3c      	ldr	r3, [pc, #240]	; (800a750 <interfaceSelectLayout+0x380>)
 800a65e:	2202      	movs	r2, #2
 800a660:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a662:	4b3c      	ldr	r3, [pc, #240]	; (800a754 <interfaceSelectLayout+0x384>)
 800a664:	2204      	movs	r2, #4
 800a666:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a668:	4b3b      	ldr	r3, [pc, #236]	; (800a758 <interfaceSelectLayout+0x388>)
 800a66a:	220a      	movs	r2, #10
 800a66c:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a66e:	4b3b      	ldr	r3, [pc, #236]	; (800a75c <interfaceSelectLayout+0x38c>)
 800a670:	220f      	movs	r2, #15
 800a672:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a674:	4b3a      	ldr	r3, [pc, #232]	; (800a760 <interfaceSelectLayout+0x390>)
 800a676:	2214      	movs	r2, #20
 800a678:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a67a:	4b3a      	ldr	r3, [pc, #232]	; (800a764 <interfaceSelectLayout+0x394>)
 800a67c:	2255      	movs	r2, #85	; 0x55
 800a67e:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a680:	4b39      	ldr	r3, [pc, #228]	; (800a768 <interfaceSelectLayout+0x398>)
 800a682:	2296      	movs	r2, #150	; 0x96
 800a684:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800a686:	4b39      	ldr	r3, [pc, #228]	; (800a76c <interfaceSelectLayout+0x39c>)
 800a688:	2232      	movs	r2, #50	; 0x32
 800a68a:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800a68c:	4b38      	ldr	r3, [pc, #224]	; (800a770 <interfaceSelectLayout+0x3a0>)
 800a68e:	220a      	movs	r2, #10
 800a690:	701a      	strb	r2, [r3, #0]
}
 800a692:	e2d6      	b.n	800ac42 <interfaceSelectLayout+0x872>
 800a694:	20000159 	.word	0x20000159
 800a698:	20000310 	.word	0x20000310
 800a69c:	20000308 	.word	0x20000308
 800a6a0:	20000565 	.word	0x20000565
 800a6a4:	20000146 	.word	0x20000146
 800a6a8:	20000152 	.word	0x20000152
 800a6ac:	20000597 	.word	0x20000597
 800a6b0:	2000013a 	.word	0x2000013a
 800a6b4:	200005ed 	.word	0x200005ed
 800a6b8:	20000640 	.word	0x20000640
 800a6bc:	20000626 	.word	0x20000626
 800a6c0:	20000318 	.word	0x20000318
 800a6c4:	20000569 	.word	0x20000569
 800a6c8:	2000057d 	.word	0x2000057d
 800a6cc:	200002c4 	.word	0x200002c4
 800a6d0:	2000064a 	.word	0x2000064a
 800a6d4:	200003a2 	.word	0x200003a2
 800a6d8:	2000031c 	.word	0x2000031c
 800a6dc:	2000015a 	.word	0x2000015a
 800a6e0:	20000625 	.word	0x20000625
 800a6e4:	200003a4 	.word	0x200003a4
 800a6e8:	20000634 	.word	0x20000634
 800a6ec:	200001c0 	.word	0x200001c0
 800a6f0:	200005f5 	.word	0x200005f5
 800a6f4:	20000650 	.word	0x20000650
 800a6f8:	20000151 	.word	0x20000151
 800a6fc:	20000599 	.word	0x20000599
 800a700:	2000059a 	.word	0x2000059a
 800a704:	2000062e 	.word	0x2000062e
 800a708:	20000606 	.word	0x20000606
 800a70c:	20000627 	.word	0x20000627
 800a710:	200002d3 	.word	0x200002d3
 800a714:	200003a3 	.word	0x200003a3
 800a718:	20000147 	.word	0x20000147
 800a71c:	20000594 	.word	0x20000594
 800a720:	20000578 	.word	0x20000578
 800a724:	20000128 	.word	0x20000128
 800a728:	20000153 	.word	0x20000153
 800a72c:	200005ec 	.word	0x200005ec
 800a730:	200005ea 	.word	0x200005ea
 800a734:	20000642 	.word	0x20000642
 800a738:	20000150 	.word	0x20000150
 800a73c:	20000311 	.word	0x20000311
 800a740:	2000040d 	.word	0x2000040d
 800a744:	2000060c 	.word	0x2000060c
 800a748:	200002d2 	.word	0x200002d2
 800a74c:	20000132 	.word	0x20000132
 800a750:	2000030c 	.word	0x2000030c
 800a754:	2000056a 	.word	0x2000056a
 800a758:	2000039e 	.word	0x2000039e
 800a75c:	20000598 	.word	0x20000598
 800a760:	20000158 	.word	0x20000158
 800a764:	2000057c 	.word	0x2000057c
 800a768:	20000641 	.word	0x20000641
 800a76c:	20000604 	.word	0x20000604
 800a770:	2000015c 	.word	0x2000015c
	else if (l == 3) { //digital
 800a774:	1dfb      	adds	r3, r7, #7
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d000      	beq.n	800a77e <interfaceSelectLayout+0x3ae>
 800a77c:	e0a2      	b.n	800a8c4 <interfaceSelectLayout+0x4f4>
		showBarometer = 0;
 800a77e:	4ba4      	ldr	r3, [pc, #656]	; (800aa10 <interfaceSelectLayout+0x640>)
 800a780:	2200      	movs	r2, #0
 800a782:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a784:	4ba3      	ldr	r3, [pc, #652]	; (800aa14 <interfaceSelectLayout+0x644>)
 800a786:	2201      	movs	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a78a:	4ba3      	ldr	r3, [pc, #652]	; (800aa18 <interfaceSelectLayout+0x648>)
 800a78c:	2201      	movs	r2, #1
 800a78e:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800a790:	4ba2      	ldr	r3, [pc, #648]	; (800aa1c <interfaceSelectLayout+0x64c>)
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800a796:	4ba2      	ldr	r3, [pc, #648]	; (800aa20 <interfaceSelectLayout+0x650>)
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a79c:	4ba1      	ldr	r3, [pc, #644]	; (800aa24 <interfaceSelectLayout+0x654>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800a7a2:	4ba1      	ldr	r3, [pc, #644]	; (800aa28 <interfaceSelectLayout+0x658>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800a7a8:	4ba0      	ldr	r3, [pc, #640]	; (800aa2c <interfaceSelectLayout+0x65c>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800a7ae:	4ba0      	ldr	r3, [pc, #640]	; (800aa30 <interfaceSelectLayout+0x660>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 1;
 800a7b4:	4b9f      	ldr	r3, [pc, #636]	; (800aa34 <interfaceSelectLayout+0x664>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a7ba:	4b9f      	ldr	r3, [pc, #636]	; (800aa38 <interfaceSelectLayout+0x668>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800a7c0:	4b9e      	ldr	r3, [pc, #632]	; (800aa3c <interfaceSelectLayout+0x66c>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a7c6:	4b9e      	ldr	r3, [pc, #632]	; (800aa40 <interfaceSelectLayout+0x670>)
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	701a      	strb	r2, [r3, #0]
		digitalX = 60;
 800a7cc:	4b9d      	ldr	r3, [pc, #628]	; (800aa44 <interfaceSelectLayout+0x674>)
 800a7ce:	223c      	movs	r2, #60	; 0x3c
 800a7d0:	701a      	strb	r2, [r3, #0]
		digitalY = 25;
 800a7d2:	4b9d      	ldr	r3, [pc, #628]	; (800aa48 <interfaceSelectLayout+0x678>)
 800a7d4:	2219      	movs	r2, #25
 800a7d6:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800a7d8:	4b9c      	ldr	r3, [pc, #624]	; (800aa4c <interfaceSelectLayout+0x67c>)
 800a7da:	2255      	movs	r2, #85	; 0x55
 800a7dc:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800a7de:	4b9c      	ldr	r3, [pc, #624]	; (800aa50 <interfaceSelectLayout+0x680>)
 800a7e0:	221e      	movs	r2, #30
 800a7e2:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a7e4:	4b9b      	ldr	r3, [pc, #620]	; (800aa54 <interfaceSelectLayout+0x684>)
 800a7e6:	2282      	movs	r2, #130	; 0x82
 800a7e8:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a7ea:	4b9b      	ldr	r3, [pc, #620]	; (800aa58 <interfaceSelectLayout+0x688>)
 800a7ec:	224b      	movs	r2, #75	; 0x4b
 800a7ee:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a7f0:	4b9a      	ldr	r3, [pc, #616]	; (800aa5c <interfaceSelectLayout+0x68c>)
 800a7f2:	2211      	movs	r2, #17
 800a7f4:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a7f6:	4b9a      	ldr	r3, [pc, #616]	; (800aa60 <interfaceSelectLayout+0x690>)
 800a7f8:	2232      	movs	r2, #50	; 0x32
 800a7fa:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800a7fc:	4b99      	ldr	r3, [pc, #612]	; (800aa64 <interfaceSelectLayout+0x694>)
 800a7fe:	221e      	movs	r2, #30
 800a800:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800a802:	4b99      	ldr	r3, [pc, #612]	; (800aa68 <interfaceSelectLayout+0x698>)
 800a804:	224e      	movs	r2, #78	; 0x4e
 800a806:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a808:	4b98      	ldr	r3, [pc, #608]	; (800aa6c <interfaceSelectLayout+0x69c>)
 800a80a:	2299      	movs	r2, #153	; 0x99
 800a80c:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a80e:	4b98      	ldr	r3, [pc, #608]	; (800aa70 <interfaceSelectLayout+0x6a0>)
 800a810:	225f      	movs	r2, #95	; 0x5f
 800a812:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a814:	4b97      	ldr	r3, [pc, #604]	; (800aa74 <interfaceSelectLayout+0x6a4>)
 800a816:	2287      	movs	r2, #135	; 0x87
 800a818:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a81a:	4b97      	ldr	r3, [pc, #604]	; (800aa78 <interfaceSelectLayout+0x6a8>)
 800a81c:	2287      	movs	r2, #135	; 0x87
 800a81e:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a820:	4b96      	ldr	r3, [pc, #600]	; (800aa7c <interfaceSelectLayout+0x6ac>)
 800a822:	2202      	movs	r2, #2
 800a824:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800a826:	4b96      	ldr	r3, [pc, #600]	; (800aa80 <interfaceSelectLayout+0x6b0>)
 800a828:	2232      	movs	r2, #50	; 0x32
 800a82a:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800a82c:	4b95      	ldr	r3, [pc, #596]	; (800aa84 <interfaceSelectLayout+0x6b4>)
 800a82e:	2264      	movs	r2, #100	; 0x64
 800a830:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800a832:	4b95      	ldr	r3, [pc, #596]	; (800aa88 <interfaceSelectLayout+0x6b8>)
 800a834:	2264      	movs	r2, #100	; 0x64
 800a836:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800a838:	4b94      	ldr	r3, [pc, #592]	; (800aa8c <interfaceSelectLayout+0x6bc>)
 800a83a:	2296      	movs	r2, #150	; 0x96
 800a83c:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a83e:	4b94      	ldr	r3, [pc, #592]	; (800aa90 <interfaceSelectLayout+0x6c0>)
 800a840:	2264      	movs	r2, #100	; 0x64
 800a842:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a844:	4b93      	ldr	r3, [pc, #588]	; (800aa94 <interfaceSelectLayout+0x6c4>)
 800a846:	2296      	movs	r2, #150	; 0x96
 800a848:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a84a:	4b93      	ldr	r3, [pc, #588]	; (800aa98 <interfaceSelectLayout+0x6c8>)
 800a84c:	2264      	movs	r2, #100	; 0x64
 800a84e:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a850:	4b92      	ldr	r3, [pc, #584]	; (800aa9c <interfaceSelectLayout+0x6cc>)
 800a852:	2264      	movs	r2, #100	; 0x64
 800a854:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a856:	4b92      	ldr	r3, [pc, #584]	; (800aaa0 <interfaceSelectLayout+0x6d0>)
 800a858:	2261      	movs	r2, #97	; 0x61
 800a85a:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a85c:	4b91      	ldr	r3, [pc, #580]	; (800aaa4 <interfaceSelectLayout+0x6d4>)
 800a85e:	221c      	movs	r2, #28
 800a860:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a862:	4b91      	ldr	r3, [pc, #580]	; (800aaa8 <interfaceSelectLayout+0x6d8>)
 800a864:	2237      	movs	r2, #55	; 0x37
 800a866:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a868:	4b90      	ldr	r3, [pc, #576]	; (800aaac <interfaceSelectLayout+0x6dc>)
 800a86a:	2250      	movs	r2, #80	; 0x50
 800a86c:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a86e:	4b90      	ldr	r3, [pc, #576]	; (800aab0 <interfaceSelectLayout+0x6e0>)
 800a870:	2214      	movs	r2, #20
 800a872:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a874:	4b8f      	ldr	r3, [pc, #572]	; (800aab4 <interfaceSelectLayout+0x6e4>)
 800a876:	2214      	movs	r2, #20
 800a878:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a87a:	4b8f      	ldr	r3, [pc, #572]	; (800aab8 <interfaceSelectLayout+0x6e8>)
 800a87c:	2214      	movs	r2, #20
 800a87e:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a880:	4b8e      	ldr	r3, [pc, #568]	; (800aabc <interfaceSelectLayout+0x6ec>)
 800a882:	2250      	movs	r2, #80	; 0x50
 800a884:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a886:	4b8e      	ldr	r3, [pc, #568]	; (800aac0 <interfaceSelectLayout+0x6f0>)
 800a888:	2223      	movs	r2, #35	; 0x23
 800a88a:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a88c:	4b8d      	ldr	r3, [pc, #564]	; (800aac4 <interfaceSelectLayout+0x6f4>)
 800a88e:	2264      	movs	r2, #100	; 0x64
 800a890:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800a892:	4b8d      	ldr	r3, [pc, #564]	; (800aac8 <interfaceSelectLayout+0x6f8>)
 800a894:	2214      	movs	r2, #20
 800a896:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a898:	4b8c      	ldr	r3, [pc, #560]	; (800aacc <interfaceSelectLayout+0x6fc>)
 800a89a:	2204      	movs	r2, #4
 800a89c:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a89e:	4b8c      	ldr	r3, [pc, #560]	; (800aad0 <interfaceSelectLayout+0x700>)
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a8a4:	4b8b      	ldr	r3, [pc, #556]	; (800aad4 <interfaceSelectLayout+0x704>)
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a8aa:	4b8b      	ldr	r3, [pc, #556]	; (800aad8 <interfaceSelectLayout+0x708>)
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a8b0:	4b8a      	ldr	r3, [pc, #552]	; (800aadc <interfaceSelectLayout+0x70c>)
 800a8b2:	220f      	movs	r2, #15
 800a8b4:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a8b6:	4b8a      	ldr	r3, [pc, #552]	; (800aae0 <interfaceSelectLayout+0x710>)
 800a8b8:	2214      	movs	r2, #20
 800a8ba:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a8bc:	4b89      	ldr	r3, [pc, #548]	; (800aae4 <interfaceSelectLayout+0x714>)
 800a8be:	2255      	movs	r2, #85	; 0x55
 800a8c0:	701a      	strb	r2, [r3, #0]
}
 800a8c2:	e1be      	b.n	800ac42 <interfaceSelectLayout+0x872>
	else if (l == 4) { //seconds
 800a8c4:	1dfb      	adds	r3, r7, #7
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d000      	beq.n	800a8ce <interfaceSelectLayout+0x4fe>
 800a8cc:	e112      	b.n	800aaf4 <interfaceSelectLayout+0x724>
		showBarometer = 1;
 800a8ce:	4b50      	ldr	r3, [pc, #320]	; (800aa10 <interfaceSelectLayout+0x640>)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800a8d4:	4b4f      	ldr	r3, [pc, #316]	; (800aa14 <interfaceSelectLayout+0x644>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800a8da:	4b4f      	ldr	r3, [pc, #316]	; (800aa18 <interfaceSelectLayout+0x648>)
 800a8dc:	2201      	movs	r2, #1
 800a8de:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800a8e0:	4b4e      	ldr	r3, [pc, #312]	; (800aa1c <interfaceSelectLayout+0x64c>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800a8e6:	4b4e      	ldr	r3, [pc, #312]	; (800aa20 <interfaceSelectLayout+0x650>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800a8ec:	4b4d      	ldr	r3, [pc, #308]	; (800aa24 <interfaceSelectLayout+0x654>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800a8f2:	4b4d      	ldr	r3, [pc, #308]	; (800aa28 <interfaceSelectLayout+0x658>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]
		showSeconds = 1;
 800a8f8:	4b4c      	ldr	r3, [pc, #304]	; (800aa2c <interfaceSelectLayout+0x65c>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800a8fe:	4b4c      	ldr	r3, [pc, #304]	; (800aa30 <interfaceSelectLayout+0x660>)
 800a900:	2201      	movs	r2, #1
 800a902:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800a904:	4b4b      	ldr	r3, [pc, #300]	; (800aa34 <interfaceSelectLayout+0x664>)
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800a90a:	4b4b      	ldr	r3, [pc, #300]	; (800aa38 <interfaceSelectLayout+0x668>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800a910:	4b4a      	ldr	r3, [pc, #296]	; (800aa3c <interfaceSelectLayout+0x66c>)
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800a916:	4b4a      	ldr	r3, [pc, #296]	; (800aa40 <interfaceSelectLayout+0x670>)
 800a918:	2201      	movs	r2, #1
 800a91a:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800a91c:	4b4b      	ldr	r3, [pc, #300]	; (800aa4c <interfaceSelectLayout+0x67c>)
 800a91e:	2226      	movs	r2, #38	; 0x26
 800a920:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800a922:	4b4b      	ldr	r3, [pc, #300]	; (800aa50 <interfaceSelectLayout+0x680>)
 800a924:	222c      	movs	r2, #44	; 0x2c
 800a926:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800a928:	4b4a      	ldr	r3, [pc, #296]	; (800aa54 <interfaceSelectLayout+0x684>)
 800a92a:	2282      	movs	r2, #130	; 0x82
 800a92c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800a92e:	4b4a      	ldr	r3, [pc, #296]	; (800aa58 <interfaceSelectLayout+0x688>)
 800a930:	224b      	movs	r2, #75	; 0x4b
 800a932:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800a934:	4b49      	ldr	r3, [pc, #292]	; (800aa5c <interfaceSelectLayout+0x68c>)
 800a936:	2211      	movs	r2, #17
 800a938:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800a93a:	4b49      	ldr	r3, [pc, #292]	; (800aa60 <interfaceSelectLayout+0x690>)
 800a93c:	2232      	movs	r2, #50	; 0x32
 800a93e:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800a940:	4b4a      	ldr	r3, [pc, #296]	; (800aa6c <interfaceSelectLayout+0x69c>)
 800a942:	2299      	movs	r2, #153	; 0x99
 800a944:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800a946:	4b4a      	ldr	r3, [pc, #296]	; (800aa70 <interfaceSelectLayout+0x6a0>)
 800a948:	225f      	movs	r2, #95	; 0x5f
 800a94a:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800a94c:	4b49      	ldr	r3, [pc, #292]	; (800aa74 <interfaceSelectLayout+0x6a4>)
 800a94e:	2287      	movs	r2, #135	; 0x87
 800a950:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800a952:	4b49      	ldr	r3, [pc, #292]	; (800aa78 <interfaceSelectLayout+0x6a8>)
 800a954:	2287      	movs	r2, #135	; 0x87
 800a956:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800a958:	4b48      	ldr	r3, [pc, #288]	; (800aa7c <interfaceSelectLayout+0x6ac>)
 800a95a:	2202      	movs	r2, #2
 800a95c:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800a95e:	4b48      	ldr	r3, [pc, #288]	; (800aa80 <interfaceSelectLayout+0x6b0>)
 800a960:	2264      	movs	r2, #100	; 0x64
 800a962:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800a964:	4b47      	ldr	r3, [pc, #284]	; (800aa84 <interfaceSelectLayout+0x6b4>)
 800a966:	2232      	movs	r2, #50	; 0x32
 800a968:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 55;
 800a96a:	4b47      	ldr	r3, [pc, #284]	; (800aa88 <interfaceSelectLayout+0x6b8>)
 800a96c:	2237      	movs	r2, #55	; 0x37
 800a96e:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 100;
 800a970:	4b46      	ldr	r3, [pc, #280]	; (800aa8c <interfaceSelectLayout+0x6bc>)
 800a972:	2264      	movs	r2, #100	; 0x64
 800a974:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800a976:	4b46      	ldr	r3, [pc, #280]	; (800aa90 <interfaceSelectLayout+0x6c0>)
 800a978:	2264      	movs	r2, #100	; 0x64
 800a97a:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800a97c:	4b45      	ldr	r3, [pc, #276]	; (800aa94 <interfaceSelectLayout+0x6c4>)
 800a97e:	2296      	movs	r2, #150	; 0x96
 800a980:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800a982:	4b45      	ldr	r3, [pc, #276]	; (800aa98 <interfaceSelectLayout+0x6c8>)
 800a984:	2264      	movs	r2, #100	; 0x64
 800a986:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800a988:	4b44      	ldr	r3, [pc, #272]	; (800aa9c <interfaceSelectLayout+0x6cc>)
 800a98a:	2264      	movs	r2, #100	; 0x64
 800a98c:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800a98e:	4b44      	ldr	r3, [pc, #272]	; (800aaa0 <interfaceSelectLayout+0x6d0>)
 800a990:	2261      	movs	r2, #97	; 0x61
 800a992:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800a994:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <interfaceSelectLayout+0x6d4>)
 800a996:	221c      	movs	r2, #28
 800a998:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800a99a:	4b43      	ldr	r3, [pc, #268]	; (800aaa8 <interfaceSelectLayout+0x6d8>)
 800a99c:	2237      	movs	r2, #55	; 0x37
 800a99e:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800a9a0:	4b42      	ldr	r3, [pc, #264]	; (800aaac <interfaceSelectLayout+0x6dc>)
 800a9a2:	2250      	movs	r2, #80	; 0x50
 800a9a4:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800a9a6:	4b42      	ldr	r3, [pc, #264]	; (800aab0 <interfaceSelectLayout+0x6e0>)
 800a9a8:	2214      	movs	r2, #20
 800a9aa:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800a9ac:	4b41      	ldr	r3, [pc, #260]	; (800aab4 <interfaceSelectLayout+0x6e4>)
 800a9ae:	2214      	movs	r2, #20
 800a9b0:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800a9b2:	4b41      	ldr	r3, [pc, #260]	; (800aab8 <interfaceSelectLayout+0x6e8>)
 800a9b4:	2214      	movs	r2, #20
 800a9b6:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800a9b8:	4b40      	ldr	r3, [pc, #256]	; (800aabc <interfaceSelectLayout+0x6ec>)
 800a9ba:	2250      	movs	r2, #80	; 0x50
 800a9bc:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800a9be:	4b40      	ldr	r3, [pc, #256]	; (800aac0 <interfaceSelectLayout+0x6f0>)
 800a9c0:	2223      	movs	r2, #35	; 0x23
 800a9c2:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800a9c4:	4b3f      	ldr	r3, [pc, #252]	; (800aac4 <interfaceSelectLayout+0x6f4>)
 800a9c6:	2264      	movs	r2, #100	; 0x64
 800a9c8:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800a9ca:	4b3f      	ldr	r3, [pc, #252]	; (800aac8 <interfaceSelectLayout+0x6f8>)
 800a9cc:	2214      	movs	r2, #20
 800a9ce:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800a9d0:	4b3e      	ldr	r3, [pc, #248]	; (800aacc <interfaceSelectLayout+0x6fc>)
 800a9d2:	2204      	movs	r2, #4
 800a9d4:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800a9d6:	4b3e      	ldr	r3, [pc, #248]	; (800aad0 <interfaceSelectLayout+0x700>)
 800a9d8:	2202      	movs	r2, #2
 800a9da:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800a9dc:	4b3d      	ldr	r3, [pc, #244]	; (800aad4 <interfaceSelectLayout+0x704>)
 800a9de:	2204      	movs	r2, #4
 800a9e0:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800a9e2:	4b3d      	ldr	r3, [pc, #244]	; (800aad8 <interfaceSelectLayout+0x708>)
 800a9e4:	220a      	movs	r2, #10
 800a9e6:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800a9e8:	4b3c      	ldr	r3, [pc, #240]	; (800aadc <interfaceSelectLayout+0x70c>)
 800a9ea:	220f      	movs	r2, #15
 800a9ec:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800a9ee:	4b3c      	ldr	r3, [pc, #240]	; (800aae0 <interfaceSelectLayout+0x710>)
 800a9f0:	2214      	movs	r2, #20
 800a9f2:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800a9f4:	4b3b      	ldr	r3, [pc, #236]	; (800aae4 <interfaceSelectLayout+0x714>)
 800a9f6:	2255      	movs	r2, #85	; 0x55
 800a9f8:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800a9fa:	4b3b      	ldr	r3, [pc, #236]	; (800aae8 <interfaceSelectLayout+0x718>)
 800a9fc:	2296      	movs	r2, #150	; 0x96
 800a9fe:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800aa00:	4b3a      	ldr	r3, [pc, #232]	; (800aaec <interfaceSelectLayout+0x71c>)
 800aa02:	2232      	movs	r2, #50	; 0x32
 800aa04:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800aa06:	4b3a      	ldr	r3, [pc, #232]	; (800aaf0 <interfaceSelectLayout+0x720>)
 800aa08:	220a      	movs	r2, #10
 800aa0a:	701a      	strb	r2, [r3, #0]
}
 800aa0c:	e119      	b.n	800ac42 <interfaceSelectLayout+0x872>
 800aa0e:	46c0      	nop			; (mov r8, r8)
 800aa10:	20000159 	.word	0x20000159
 800aa14:	20000310 	.word	0x20000310
 800aa18:	20000308 	.word	0x20000308
 800aa1c:	20000565 	.word	0x20000565
 800aa20:	20000146 	.word	0x20000146
 800aa24:	20000152 	.word	0x20000152
 800aa28:	20000597 	.word	0x20000597
 800aa2c:	2000013a 	.word	0x2000013a
 800aa30:	200005ed 	.word	0x200005ed
 800aa34:	20000640 	.word	0x20000640
 800aa38:	20000626 	.word	0x20000626
 800aa3c:	20000318 	.word	0x20000318
 800aa40:	20000569 	.word	0x20000569
 800aa44:	20000596 	.word	0x20000596
 800aa48:	2000030a 	.word	0x2000030a
 800aa4c:	2000057d 	.word	0x2000057d
 800aa50:	200002c4 	.word	0x200002c4
 800aa54:	2000064a 	.word	0x2000064a
 800aa58:	200003a2 	.word	0x200003a2
 800aa5c:	2000031c 	.word	0x2000031c
 800aa60:	2000015a 	.word	0x2000015a
 800aa64:	20000625 	.word	0x20000625
 800aa68:	200003a4 	.word	0x200003a4
 800aa6c:	20000634 	.word	0x20000634
 800aa70:	200001c0 	.word	0x200001c0
 800aa74:	200005f5 	.word	0x200005f5
 800aa78:	20000650 	.word	0x20000650
 800aa7c:	20000151 	.word	0x20000151
 800aa80:	20000599 	.word	0x20000599
 800aa84:	2000059a 	.word	0x2000059a
 800aa88:	2000062e 	.word	0x2000062e
 800aa8c:	20000606 	.word	0x20000606
 800aa90:	20000627 	.word	0x20000627
 800aa94:	200002d3 	.word	0x200002d3
 800aa98:	200003a3 	.word	0x200003a3
 800aa9c:	20000147 	.word	0x20000147
 800aaa0:	20000578 	.word	0x20000578
 800aaa4:	20000128 	.word	0x20000128
 800aaa8:	20000153 	.word	0x20000153
 800aaac:	200005ec 	.word	0x200005ec
 800aab0:	200005ea 	.word	0x200005ea
 800aab4:	20000642 	.word	0x20000642
 800aab8:	20000150 	.word	0x20000150
 800aabc:	20000311 	.word	0x20000311
 800aac0:	2000040d 	.word	0x2000040d
 800aac4:	2000060c 	.word	0x2000060c
 800aac8:	200002d2 	.word	0x200002d2
 800aacc:	20000132 	.word	0x20000132
 800aad0:	2000030c 	.word	0x2000030c
 800aad4:	2000056a 	.word	0x2000056a
 800aad8:	2000039e 	.word	0x2000039e
 800aadc:	20000598 	.word	0x20000598
 800aae0:	20000158 	.word	0x20000158
 800aae4:	2000057c 	.word	0x2000057c
 800aae8:	20000641 	.word	0x20000641
 800aaec:	20000604 	.word	0x20000604
 800aaf0:	2000015c 	.word	0x2000015c
	else if (l == 5) { //meter
 800aaf4:	1dfb      	adds	r3, r7, #7
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b05      	cmp	r3, #5
 800aafa:	d000      	beq.n	800aafe <interfaceSelectLayout+0x72e>
 800aafc:	e0a1      	b.n	800ac42 <interfaceSelectLayout+0x872>
		showBarometer = 0;
 800aafe:	4b53      	ldr	r3, [pc, #332]	; (800ac4c <interfaceSelectLayout+0x87c>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800ab04:	4b52      	ldr	r3, [pc, #328]	; (800ac50 <interfaceSelectLayout+0x880>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800ab0a:	4b52      	ldr	r3, [pc, #328]	; (800ac54 <interfaceSelectLayout+0x884>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800ab10:	4b51      	ldr	r3, [pc, #324]	; (800ac58 <interfaceSelectLayout+0x888>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800ab16:	4b51      	ldr	r3, [pc, #324]	; (800ac5c <interfaceSelectLayout+0x88c>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
		showDate = 0;
 800ab1c:	4b50      	ldr	r3, [pc, #320]	; (800ac60 <interfaceSelectLayout+0x890>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800ab22:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <interfaceSelectLayout+0x894>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800ab28:	4b4f      	ldr	r3, [pc, #316]	; (800ac68 <interfaceSelectLayout+0x898>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800ab2e:	4b4f      	ldr	r3, [pc, #316]	; (800ac6c <interfaceSelectLayout+0x89c>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800ab34:	4b4e      	ldr	r3, [pc, #312]	; (800ac70 <interfaceSelectLayout+0x8a0>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
		showMeter = 1;
 800ab3a:	4b4e      	ldr	r3, [pc, #312]	; (800ac74 <interfaceSelectLayout+0x8a4>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800ab40:	4b4d      	ldr	r3, [pc, #308]	; (800ac78 <interfaceSelectLayout+0x8a8>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
		LPMode = 0;
 800ab46:	4b4d      	ldr	r3, [pc, #308]	; (800ac7c <interfaceSelectLayout+0x8ac>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
		meterX = 59;
 800ab4c:	4b4c      	ldr	r3, [pc, #304]	; (800ac80 <interfaceSelectLayout+0x8b0>)
 800ab4e:	223b      	movs	r2, #59	; 0x3b
 800ab50:	701a      	strb	r2, [r3, #0]
		meterY = 20;
 800ab52:	4b4c      	ldr	r3, [pc, #304]	; (800ac84 <interfaceSelectLayout+0x8b4>)
 800ab54:	2214      	movs	r2, #20
 800ab56:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800ab58:	4b4b      	ldr	r3, [pc, #300]	; (800ac88 <interfaceSelectLayout+0x8b8>)
 800ab5a:	2255      	movs	r2, #85	; 0x55
 800ab5c:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800ab5e:	4b4b      	ldr	r3, [pc, #300]	; (800ac8c <interfaceSelectLayout+0x8bc>)
 800ab60:	221e      	movs	r2, #30
 800ab62:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800ab64:	4b4a      	ldr	r3, [pc, #296]	; (800ac90 <interfaceSelectLayout+0x8c0>)
 800ab66:	2282      	movs	r2, #130	; 0x82
 800ab68:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800ab6a:	4b4a      	ldr	r3, [pc, #296]	; (800ac94 <interfaceSelectLayout+0x8c4>)
 800ab6c:	224b      	movs	r2, #75	; 0x4b
 800ab6e:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800ab70:	4b49      	ldr	r3, [pc, #292]	; (800ac98 <interfaceSelectLayout+0x8c8>)
 800ab72:	2211      	movs	r2, #17
 800ab74:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800ab76:	4b49      	ldr	r3, [pc, #292]	; (800ac9c <interfaceSelectLayout+0x8cc>)
 800ab78:	2232      	movs	r2, #50	; 0x32
 800ab7a:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800ab7c:	4b48      	ldr	r3, [pc, #288]	; (800aca0 <interfaceSelectLayout+0x8d0>)
 800ab7e:	221e      	movs	r2, #30
 800ab80:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800ab82:	4b48      	ldr	r3, [pc, #288]	; (800aca4 <interfaceSelectLayout+0x8d4>)
 800ab84:	224e      	movs	r2, #78	; 0x4e
 800ab86:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800ab88:	4b47      	ldr	r3, [pc, #284]	; (800aca8 <interfaceSelectLayout+0x8d8>)
 800ab8a:	2299      	movs	r2, #153	; 0x99
 800ab8c:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800ab8e:	4b47      	ldr	r3, [pc, #284]	; (800acac <interfaceSelectLayout+0x8dc>)
 800ab90:	225f      	movs	r2, #95	; 0x5f
 800ab92:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800ab94:	4b46      	ldr	r3, [pc, #280]	; (800acb0 <interfaceSelectLayout+0x8e0>)
 800ab96:	2287      	movs	r2, #135	; 0x87
 800ab98:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800ab9a:	4b46      	ldr	r3, [pc, #280]	; (800acb4 <interfaceSelectLayout+0x8e4>)
 800ab9c:	2287      	movs	r2, #135	; 0x87
 800ab9e:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800aba0:	4b45      	ldr	r3, [pc, #276]	; (800acb8 <interfaceSelectLayout+0x8e8>)
 800aba2:	2202      	movs	r2, #2
 800aba4:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800aba6:	4b45      	ldr	r3, [pc, #276]	; (800acbc <interfaceSelectLayout+0x8ec>)
 800aba8:	2232      	movs	r2, #50	; 0x32
 800abaa:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800abac:	4b44      	ldr	r3, [pc, #272]	; (800acc0 <interfaceSelectLayout+0x8f0>)
 800abae:	2264      	movs	r2, #100	; 0x64
 800abb0:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800abb2:	4b44      	ldr	r3, [pc, #272]	; (800acc4 <interfaceSelectLayout+0x8f4>)
 800abb4:	2264      	movs	r2, #100	; 0x64
 800abb6:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800abb8:	4b43      	ldr	r3, [pc, #268]	; (800acc8 <interfaceSelectLayout+0x8f8>)
 800abba:	2296      	movs	r2, #150	; 0x96
 800abbc:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800abbe:	4b43      	ldr	r3, [pc, #268]	; (800accc <interfaceSelectLayout+0x8fc>)
 800abc0:	2264      	movs	r2, #100	; 0x64
 800abc2:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800abc4:	4b42      	ldr	r3, [pc, #264]	; (800acd0 <interfaceSelectLayout+0x900>)
 800abc6:	2296      	movs	r2, #150	; 0x96
 800abc8:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800abca:	4b42      	ldr	r3, [pc, #264]	; (800acd4 <interfaceSelectLayout+0x904>)
 800abcc:	2264      	movs	r2, #100	; 0x64
 800abce:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800abd0:	4b41      	ldr	r3, [pc, #260]	; (800acd8 <interfaceSelectLayout+0x908>)
 800abd2:	2264      	movs	r2, #100	; 0x64
 800abd4:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800abd6:	4b41      	ldr	r3, [pc, #260]	; (800acdc <interfaceSelectLayout+0x90c>)
 800abd8:	2261      	movs	r2, #97	; 0x61
 800abda:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800abdc:	4b40      	ldr	r3, [pc, #256]	; (800ace0 <interfaceSelectLayout+0x910>)
 800abde:	221c      	movs	r2, #28
 800abe0:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800abe2:	4b40      	ldr	r3, [pc, #256]	; (800ace4 <interfaceSelectLayout+0x914>)
 800abe4:	2237      	movs	r2, #55	; 0x37
 800abe6:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800abe8:	4b3f      	ldr	r3, [pc, #252]	; (800ace8 <interfaceSelectLayout+0x918>)
 800abea:	2250      	movs	r2, #80	; 0x50
 800abec:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800abee:	4b3f      	ldr	r3, [pc, #252]	; (800acec <interfaceSelectLayout+0x91c>)
 800abf0:	2214      	movs	r2, #20
 800abf2:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800abf4:	4b3e      	ldr	r3, [pc, #248]	; (800acf0 <interfaceSelectLayout+0x920>)
 800abf6:	2214      	movs	r2, #20
 800abf8:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800abfa:	4b3e      	ldr	r3, [pc, #248]	; (800acf4 <interfaceSelectLayout+0x924>)
 800abfc:	2214      	movs	r2, #20
 800abfe:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800ac00:	4b3d      	ldr	r3, [pc, #244]	; (800acf8 <interfaceSelectLayout+0x928>)
 800ac02:	2250      	movs	r2, #80	; 0x50
 800ac04:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800ac06:	4b3d      	ldr	r3, [pc, #244]	; (800acfc <interfaceSelectLayout+0x92c>)
 800ac08:	2223      	movs	r2, #35	; 0x23
 800ac0a:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800ac0c:	4b3c      	ldr	r3, [pc, #240]	; (800ad00 <interfaceSelectLayout+0x930>)
 800ac0e:	2264      	movs	r2, #100	; 0x64
 800ac10:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800ac12:	4b3c      	ldr	r3, [pc, #240]	; (800ad04 <interfaceSelectLayout+0x934>)
 800ac14:	2214      	movs	r2, #20
 800ac16:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800ac18:	4b3b      	ldr	r3, [pc, #236]	; (800ad08 <interfaceSelectLayout+0x938>)
 800ac1a:	2204      	movs	r2, #4
 800ac1c:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800ac1e:	4b3b      	ldr	r3, [pc, #236]	; (800ad0c <interfaceSelectLayout+0x93c>)
 800ac20:	2202      	movs	r2, #2
 800ac22:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800ac24:	4b3a      	ldr	r3, [pc, #232]	; (800ad10 <interfaceSelectLayout+0x940>)
 800ac26:	2204      	movs	r2, #4
 800ac28:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800ac2a:	4b3a      	ldr	r3, [pc, #232]	; (800ad14 <interfaceSelectLayout+0x944>)
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800ac30:	4b39      	ldr	r3, [pc, #228]	; (800ad18 <interfaceSelectLayout+0x948>)
 800ac32:	220f      	movs	r2, #15
 800ac34:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800ac36:	4b39      	ldr	r3, [pc, #228]	; (800ad1c <interfaceSelectLayout+0x94c>)
 800ac38:	2214      	movs	r2, #20
 800ac3a:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800ac3c:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <interfaceSelectLayout+0x950>)
 800ac3e:	2255      	movs	r2, #85	; 0x55
 800ac40:	701a      	strb	r2, [r3, #0]
}
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b002      	add	sp, #8
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	20000159 	.word	0x20000159
 800ac50:	20000310 	.word	0x20000310
 800ac54:	20000308 	.word	0x20000308
 800ac58:	20000565 	.word	0x20000565
 800ac5c:	20000146 	.word	0x20000146
 800ac60:	20000152 	.word	0x20000152
 800ac64:	20000597 	.word	0x20000597
 800ac68:	2000013a 	.word	0x2000013a
 800ac6c:	200005ed 	.word	0x200005ed
 800ac70:	20000640 	.word	0x20000640
 800ac74:	20000626 	.word	0x20000626
 800ac78:	20000318 	.word	0x20000318
 800ac7c:	20000569 	.word	0x20000569
 800ac80:	2000030e 	.word	0x2000030e
 800ac84:	2000040c 	.word	0x2000040c
 800ac88:	2000057d 	.word	0x2000057d
 800ac8c:	200002c4 	.word	0x200002c4
 800ac90:	2000064a 	.word	0x2000064a
 800ac94:	200003a2 	.word	0x200003a2
 800ac98:	2000031c 	.word	0x2000031c
 800ac9c:	2000015a 	.word	0x2000015a
 800aca0:	20000625 	.word	0x20000625
 800aca4:	200003a4 	.word	0x200003a4
 800aca8:	20000634 	.word	0x20000634
 800acac:	200001c0 	.word	0x200001c0
 800acb0:	200005f5 	.word	0x200005f5
 800acb4:	20000650 	.word	0x20000650
 800acb8:	20000151 	.word	0x20000151
 800acbc:	20000599 	.word	0x20000599
 800acc0:	2000059a 	.word	0x2000059a
 800acc4:	2000062e 	.word	0x2000062e
 800acc8:	20000606 	.word	0x20000606
 800accc:	20000627 	.word	0x20000627
 800acd0:	200002d3 	.word	0x200002d3
 800acd4:	200003a3 	.word	0x200003a3
 800acd8:	20000147 	.word	0x20000147
 800acdc:	20000578 	.word	0x20000578
 800ace0:	20000128 	.word	0x20000128
 800ace4:	20000153 	.word	0x20000153
 800ace8:	200005ec 	.word	0x200005ec
 800acec:	200005ea 	.word	0x200005ea
 800acf0:	20000642 	.word	0x20000642
 800acf4:	20000150 	.word	0x20000150
 800acf8:	20000311 	.word	0x20000311
 800acfc:	2000040d 	.word	0x2000040d
 800ad00:	2000060c 	.word	0x2000060c
 800ad04:	200002d2 	.word	0x200002d2
 800ad08:	20000132 	.word	0x20000132
 800ad0c:	2000030c 	.word	0x2000030c
 800ad10:	2000056a 	.word	0x2000056a
 800ad14:	2000039e 	.word	0x2000039e
 800ad18:	20000598 	.word	0x20000598
 800ad1c:	20000158 	.word	0x20000158
 800ad20:	2000057c 	.word	0x2000057c

0800ad24 <interfaceSelectColorScheme>:

void interfaceSelectColorScheme(uint8_t cs) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	0002      	movs	r2, r0
 800ad2c:	1dfb      	adds	r3, r7, #7
 800ad2e:	701a      	strb	r2, [r3, #0]
	if (cs == COLOR_SCHEME_BLACK) {
 800ad30:	1dfb      	adds	r3, r7, #7
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d106      	bne.n	800ad46 <interfaceSelectColorScheme+0x22>
		colorMain = BLACK;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <interfaceSelectColorScheme+0x40>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
		colorSecond = WHITE;
 800ad3e:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <interfaceSelectColorScheme+0x44>)
 800ad40:	22ff      	movs	r2, #255	; 0xff
 800ad42:	701a      	strb	r2, [r3, #0]
	} else if (cs == COLOR_SCHEME_WHITE) {
		colorMain = WHITE;
		colorSecond = BLACK;
	}
}
 800ad44:	e009      	b.n	800ad5a <interfaceSelectColorScheme+0x36>
	} else if (cs == COLOR_SCHEME_WHITE) {
 800ad46:	1dfb      	adds	r3, r7, #7
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d105      	bne.n	800ad5a <interfaceSelectColorScheme+0x36>
		colorMain = WHITE;
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <interfaceSelectColorScheme+0x40>)
 800ad50:	22ff      	movs	r2, #255	; 0xff
 800ad52:	701a      	strb	r2, [r3, #0]
		colorSecond = BLACK;
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <interfaceSelectColorScheme+0x44>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]
}
 800ad5a:	46c0      	nop			; (mov r8, r8)
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	b002      	add	sp, #8
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	20000293 	.word	0x20000293
 800ad68:	20000605 	.word	0x20000605

0800ad6c <interfaceInit>:

void interfaceInit() {
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af02      	add	r7, sp, #8

	//										COUNT INDEXES ANGLES

	for (uint8_t i = 0; i < 10; i++) {
 800ad72:	1dfb      	adds	r3, r7, #7
 800ad74:	2200      	movs	r2, #0
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	e021      	b.n	800adbe <interfaceInit+0x52>
		chronoDecimalsIndexAngle[i] = 2 * 3.14 / 10 * (i - 2.5);
 800ad7a:	1dfb      	adds	r3, r7, #7
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f7f8 f902 	bl	8002f88 <__aeabi_i2d>
 800ad84:	2200      	movs	r2, #0
 800ad86:	4b77      	ldr	r3, [pc, #476]	; (800af64 <interfaceInit+0x1f8>)
 800ad88:	f7f7 fd18 	bl	80027bc <__aeabi_dsub>
 800ad8c:	0002      	movs	r2, r0
 800ad8e:	000b      	movs	r3, r1
 800ad90:	0010      	movs	r0, r2
 800ad92:	0019      	movs	r1, r3
 800ad94:	4a74      	ldr	r2, [pc, #464]	; (800af68 <interfaceInit+0x1fc>)
 800ad96:	4b75      	ldr	r3, [pc, #468]	; (800af6c <interfaceInit+0x200>)
 800ad98:	f7f7 faa4 	bl	80022e4 <__aeabi_dmul>
 800ad9c:	0002      	movs	r2, r0
 800ad9e:	000b      	movs	r3, r1
 800ada0:	1df9      	adds	r1, r7, #7
 800ada2:	780c      	ldrb	r4, [r1, #0]
 800ada4:	0010      	movs	r0, r2
 800ada6:	0019      	movs	r1, r3
 800ada8:	f7f8 f98c 	bl	80030c4 <__aeabi_d2f>
 800adac:	1c01      	adds	r1, r0, #0
 800adae:	4b70      	ldr	r3, [pc, #448]	; (800af70 <interfaceInit+0x204>)
 800adb0:	00a2      	lsls	r2, r4, #2
 800adb2:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; i++) {
 800adb4:	1dfb      	adds	r3, r7, #7
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	1dfb      	adds	r3, r7, #7
 800adba:	3201      	adds	r2, #1
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	1dfb      	adds	r3, r7, #7
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d9d9      	bls.n	800ad7a <interfaceInit+0xe>
	}
	for (uint8_t i = 0; i < 30; i++) {
 800adc6:	1dbb      	adds	r3, r7, #6
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	e021      	b.n	800ae12 <interfaceInit+0xa6>
		chronoMinutesIndexAngle[i] = 2 * 3.14 / 30 * (i - 7.5);
 800adce:	1dbb      	adds	r3, r7, #6
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	0018      	movs	r0, r3
 800add4:	f7f8 f8d8 	bl	8002f88 <__aeabi_i2d>
 800add8:	2200      	movs	r2, #0
 800adda:	4b66      	ldr	r3, [pc, #408]	; (800af74 <interfaceInit+0x208>)
 800addc:	f7f7 fcee 	bl	80027bc <__aeabi_dsub>
 800ade0:	0002      	movs	r2, r0
 800ade2:	000b      	movs	r3, r1
 800ade4:	0010      	movs	r0, r2
 800ade6:	0019      	movs	r1, r3
 800ade8:	4a63      	ldr	r2, [pc, #396]	; (800af78 <interfaceInit+0x20c>)
 800adea:	4b64      	ldr	r3, [pc, #400]	; (800af7c <interfaceInit+0x210>)
 800adec:	f7f7 fa7a 	bl	80022e4 <__aeabi_dmul>
 800adf0:	0002      	movs	r2, r0
 800adf2:	000b      	movs	r3, r1
 800adf4:	1db9      	adds	r1, r7, #6
 800adf6:	780c      	ldrb	r4, [r1, #0]
 800adf8:	0010      	movs	r0, r2
 800adfa:	0019      	movs	r1, r3
 800adfc:	f7f8 f962 	bl	80030c4 <__aeabi_d2f>
 800ae00:	1c01      	adds	r1, r0, #0
 800ae02:	4b5f      	ldr	r3, [pc, #380]	; (800af80 <interfaceInit+0x214>)
 800ae04:	00a2      	lsls	r2, r4, #2
 800ae06:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 30; i++) {
 800ae08:	1dbb      	adds	r3, r7, #6
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	1dbb      	adds	r3, r7, #6
 800ae0e:	3201      	adds	r2, #1
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	1dbb      	adds	r3, r7, #6
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b1d      	cmp	r3, #29
 800ae18:	d9d9      	bls.n	800adce <interfaceInit+0x62>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ae1a:	1d7b      	adds	r3, r7, #5
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
 800ae20:	e01a      	b.n	800ae58 <interfaceInit+0xec>
		secondsIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ae22:	1d7b      	adds	r3, r7, #5
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	3b03      	subs	r3, #3
 800ae28:	0018      	movs	r0, r3
 800ae2a:	f7f8 f8ad 	bl	8002f88 <__aeabi_i2d>
 800ae2e:	4a55      	ldr	r2, [pc, #340]	; (800af84 <interfaceInit+0x218>)
 800ae30:	4b55      	ldr	r3, [pc, #340]	; (800af88 <interfaceInit+0x21c>)
 800ae32:	f7f7 fa57 	bl	80022e4 <__aeabi_dmul>
 800ae36:	0002      	movs	r2, r0
 800ae38:	000b      	movs	r3, r1
 800ae3a:	1d79      	adds	r1, r7, #5
 800ae3c:	780c      	ldrb	r4, [r1, #0]
 800ae3e:	0010      	movs	r0, r2
 800ae40:	0019      	movs	r1, r3
 800ae42:	f7f8 f93f 	bl	80030c4 <__aeabi_d2f>
 800ae46:	1c01      	adds	r1, r0, #0
 800ae48:	4b50      	ldr	r3, [pc, #320]	; (800af8c <interfaceInit+0x220>)
 800ae4a:	00a2      	lsls	r2, r4, #2
 800ae4c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ae4e:	1d7b      	adds	r3, r7, #5
 800ae50:	781a      	ldrb	r2, [r3, #0]
 800ae52:	1d7b      	adds	r3, r7, #5
 800ae54:	3201      	adds	r2, #1
 800ae56:	701a      	strb	r2, [r3, #0]
 800ae58:	1d7b      	adds	r3, r7, #5
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b0b      	cmp	r3, #11
 800ae5e:	d9e0      	bls.n	800ae22 <interfaceInit+0xb6>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800ae60:	1d3b      	adds	r3, r7, #4
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e01a      	b.n	800ae9e <interfaceInit+0x132>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ae68:	1d3b      	adds	r3, r7, #4
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	3b03      	subs	r3, #3
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f7f8 f88a 	bl	8002f88 <__aeabi_i2d>
 800ae74:	4a43      	ldr	r2, [pc, #268]	; (800af84 <interfaceInit+0x218>)
 800ae76:	4b44      	ldr	r3, [pc, #272]	; (800af88 <interfaceInit+0x21c>)
 800ae78:	f7f7 fa34 	bl	80022e4 <__aeabi_dmul>
 800ae7c:	0002      	movs	r2, r0
 800ae7e:	000b      	movs	r3, r1
 800ae80:	1d39      	adds	r1, r7, #4
 800ae82:	780c      	ldrb	r4, [r1, #0]
 800ae84:	0010      	movs	r0, r2
 800ae86:	0019      	movs	r1, r3
 800ae88:	f7f8 f91c 	bl	80030c4 <__aeabi_d2f>
 800ae8c:	1c01      	adds	r1, r0, #0
 800ae8e:	4b40      	ldr	r3, [pc, #256]	; (800af90 <interfaceInit+0x224>)
 800ae90:	00a2      	lsls	r2, r4, #2
 800ae92:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800ae94:	1d3b      	adds	r3, r7, #4
 800ae96:	781a      	ldrb	r2, [r3, #0]
 800ae98:	1d3b      	adds	r3, r7, #4
 800ae9a:	3201      	adds	r2, #1
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	1d3b      	adds	r3, r7, #4
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b0b      	cmp	r3, #11
 800aea4:	d9e0      	bls.n	800ae68 <interfaceInit+0xfc>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800aea6:	1cfb      	adds	r3, r7, #3
 800aea8:	2200      	movs	r2, #0
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	e01a      	b.n	800aee4 <interfaceInit+0x178>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800aeae:	1cfb      	adds	r3, r7, #3
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	3b03      	subs	r3, #3
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f7f8 f867 	bl	8002f88 <__aeabi_i2d>
 800aeba:	4a32      	ldr	r2, [pc, #200]	; (800af84 <interfaceInit+0x218>)
 800aebc:	4b32      	ldr	r3, [pc, #200]	; (800af88 <interfaceInit+0x21c>)
 800aebe:	f7f7 fa11 	bl	80022e4 <__aeabi_dmul>
 800aec2:	0002      	movs	r2, r0
 800aec4:	000b      	movs	r3, r1
 800aec6:	1cf9      	adds	r1, r7, #3
 800aec8:	780c      	ldrb	r4, [r1, #0]
 800aeca:	0010      	movs	r0, r2
 800aecc:	0019      	movs	r1, r3
 800aece:	f7f8 f8f9 	bl	80030c4 <__aeabi_d2f>
 800aed2:	1c01      	adds	r1, r0, #0
 800aed4:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <interfaceInit+0x224>)
 800aed6:	00a2      	lsls	r2, r4, #2
 800aed8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800aeda:	1cfb      	adds	r3, r7, #3
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	1cfb      	adds	r3, r7, #3
 800aee0:	3201      	adds	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	1cfb      	adds	r3, r7, #3
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b0b      	cmp	r3, #11
 800aeea:	d9e0      	bls.n	800aeae <interfaceInit+0x142>
	}

	//										DISPLAY INITIALISATION

	printf("EPD_1in54_V2_test Demo\r\n");
 800aeec:	4b29      	ldr	r3, [pc, #164]	; (800af94 <interfaceInit+0x228>)
 800aeee:	0018      	movs	r0, r3
 800aef0:	f006 f800 	bl	8010ef4 <puts>
	DEV_Module_Init();
 800aef4:	f7fd fcfc 	bl	80088f0 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800aef8:	4b27      	ldr	r3, [pc, #156]	; (800af98 <interfaceInit+0x22c>)
 800aefa:	0018      	movs	r0, r3
 800aefc:	f005 fffa 	bl	8010ef4 <puts>
	EPD_1IN54_V2_Init();
 800af00:	f7ff f890 	bl	800a024 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800af04:	f7ff f8ec 	bl	800a0e0 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800af08:	23fa      	movs	r3, #250	; 0xfa
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	0018      	movs	r0, r3
 800af0e:	f7f8 faf7 	bl	8003500 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UWORD Imagesize = (
 800af12:	003b      	movs	r3, r7
 800af14:	4a21      	ldr	r2, [pc, #132]	; (800af9c <interfaceInit+0x230>)
 800af16:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((BlackImage = (UBYTE*) malloc(Imagesize)) == NULL) {
 800af18:	003b      	movs	r3, r7
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	0018      	movs	r0, r3
 800af1e:	f005 fea3 	bl	8010c68 <malloc>
 800af22:	0003      	movs	r3, r0
 800af24:	001a      	movs	r2, r3
 800af26:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <interfaceInit+0x234>)
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <interfaceInit+0x234>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d103      	bne.n	800af3a <interfaceInit+0x1ce>
		printf("Failed to apply for black memory...\r\n");
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <interfaceInit+0x238>)
 800af34:	0018      	movs	r0, r3
 800af36:	f005 ffdd 	bl	8010ef4 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800af3a:	4b1b      	ldr	r3, [pc, #108]	; (800afa8 <interfaceInit+0x23c>)
 800af3c:	0018      	movs	r0, r3
 800af3e:	f005 ffd9 	bl	8010ef4 <puts>
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0,
 800af42:	4b17      	ldr	r3, [pc, #92]	; (800afa0 <interfaceInit+0x234>)
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	4b19      	ldr	r3, [pc, #100]	; (800afac <interfaceInit+0x240>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	2300      	movs	r3, #0
 800af52:	22c8      	movs	r2, #200	; 0xc8
 800af54:	21c8      	movs	r1, #200	; 0xc8
 800af56:	f7fd fce9 	bl	800892c <Paint_NewImage>
//		//burn image
//		EPD_1IN54_V2_DisplayPart(BlackImage);
//		DEV_Delay_ms(50);
//	}

}
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b003      	add	sp, #12
 800af60:	bd90      	pop	{r4, r7, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	40040000 	.word	0x40040000
 800af68:	74bc6a7f 	.word	0x74bc6a7f
 800af6c:	3fe41893 	.word	0x3fe41893
 800af70:	200002d4 	.word	0x200002d4
 800af74:	401e0000 	.word	0x401e0000
 800af78:	46508dff 	.word	0x46508dff
 800af7c:	3fcacb6f 	.word	0x3fcacb6f
 800af80:	200004ec 	.word	0x200004ec
 800af84:	8bf258bf 	.word	0x8bf258bf
 800af88:	3fe0bf25 	.word	0x3fe0bf25
 800af8c:	2000036c 	.word	0x2000036c
 800af90:	20000294 	.word	0x20000294
 800af94:	08013cf8 	.word	0x08013cf8
 800af98:	08013d10 	.word	0x08013d10
 800af9c:	00001388 	.word	0x00001388
 800afa0:	20000580 	.word	0x20000580
 800afa4:	08013d2c 	.word	0x08013d2c
 800afa8:	08013d54 	.word	0x08013d54
 800afac:	20000293 	.word	0x20000293

0800afb0 <interfaceUpdate>:

void interfaceUpdate(uint8_t mode) {
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	0002      	movs	r2, r0
 800afb8:	1dfb      	adds	r3, r7, #7
 800afba:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_FULL) {
 800afbc:	1dfb      	adds	r3, r7, #7
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <interfaceUpdate+0x2a>

		EPD_1IN54_V2_Init();
 800afc4:	f7ff f82e 	bl	800a024 <EPD_1IN54_V2_Init>
		Paint_SelectImage(BlackImage);
 800afc8:	4b0f      	ldr	r3, [pc, #60]	; (800b008 <interfaceUpdate+0x58>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	0018      	movs	r0, r3
 800afce:	f7fd fd1b 	bl	8008a08 <Paint_SelectImage>

		interfaceUpdateMode = INTERFACE_UPDATE_FULL;
 800afd2:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <interfaceUpdate+0x5c>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
		Paint_SelectImage(BlackImage);

		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
	}

}
 800afd8:	e012      	b.n	800b000 <interfaceUpdate+0x50>
	} else if (mode == INTERFACE_UPDATE_PARTIAL) {
 800afda:	1dfb      	adds	r3, r7, #7
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d10e      	bne.n	800b000 <interfaceUpdate+0x50>
		EPD_1IN54_V2_Init();
 800afe2:	f7ff f81f 	bl	800a024 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800afe6:	4b08      	ldr	r3, [pc, #32]	; (800b008 <interfaceUpdate+0x58>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	0018      	movs	r0, r3
 800afec:	f7ff f8fa 	bl	800a1e4 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(BlackImage);
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <interfaceUpdate+0x58>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	0018      	movs	r0, r3
 800aff6:	f7fd fd07 	bl	8008a08 <Paint_SelectImage>
		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
 800affa:	4b04      	ldr	r3, [pc, #16]	; (800b00c <interfaceUpdate+0x5c>)
 800affc:	2201      	movs	r2, #1
 800affe:	701a      	strb	r2, [r3, #0]
}
 800b000:	46c0      	nop			; (mov r8, r8)
 800b002:	46bd      	mov	sp, r7
 800b004:	b002      	add	sp, #8
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20000580 	.word	0x20000580
 800b00c:	2000058c 	.word	0x2000058c

0800b010 <interfaceWrite>:

void interfaceWrite() {
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0

	if (interfaceUpdateMode == INTERFACE_UPDATE_PARTIAL) {
 800b014:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <interfaceWrite+0x34>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d105      	bne.n	800b02a <interfaceWrite+0x1a>

		EPD_1IN54_V2_DisplayPart(BlackImage);
 800b01e:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <interfaceWrite+0x38>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	0018      	movs	r0, r3
 800b024:	f7ff f968 	bl	800a2f8 <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(BlackImage);

	}

}
 800b028:	e009      	b.n	800b03e <interfaceWrite+0x2e>
	} else if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {
 800b02a:	4b06      	ldr	r3, [pc, #24]	; (800b044 <interfaceWrite+0x34>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <interfaceWrite+0x2e>
		EPD_1IN54_V2_Display(BlackImage);
 800b034:	4b04      	ldr	r3, [pc, #16]	; (800b048 <interfaceWrite+0x38>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	0018      	movs	r0, r3
 800b03a:	f7ff f884 	bl	800a146 <EPD_1IN54_V2_Display>
}
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	2000058c 	.word	0x2000058c
 800b048:	20000580 	.word	0x20000580

0800b04c <interfaceClear>:

void interfaceClear() {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
	Paint_Clear(colorMain);
 800b050:	4b04      	ldr	r3, [pc, #16]	; (800b064 <interfaceClear+0x18>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	b29b      	uxth	r3, r3
 800b058:	0018      	movs	r0, r3
 800b05a:	f7fd fe87 	bl	8008d6c <Paint_Clear>
}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000293 	.word	0x20000293

0800b068 <interfaceDrawLayer>:

void interfaceDrawLayer(uint8_t layer) {
 800b068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06a:	46ce      	mov	lr, r9
 800b06c:	4647      	mov	r7, r8
 800b06e:	b580      	push	{r7, lr}
 800b070:	b08b      	sub	sp, #44	; 0x2c
 800b072:	af04      	add	r7, sp, #16
 800b074:	0002      	movs	r2, r0
 800b076:	1dfb      	adds	r3, r7, #7
 800b078:	701a      	strb	r2, [r3, #0]

	if (layer == 1) { //boards
 800b07a:	1dfb      	adds	r3, r7, #7
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d000      	beq.n	800b084 <interfaceDrawLayer+0x1c>
 800b082:	e2cb      	b.n	800b61c <interfaceDrawLayer+0x5b4>
		//										MOON PHASE

		if (showMoonPhase == 1) {
 800b084:	4b27      	ldr	r3, [pc, #156]	; (800b124 <interfaceDrawLayer+0xbc>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d000      	beq.n	800b08e <interfaceDrawLayer+0x26>
 800b08c:	e096      	b.n	800b1bc <interfaceDrawLayer+0x154>

			//		moonPhase = 51;

			Paint_DrawCircle(moonPhaseX, moonPhaseY, moonPhaseRadius,
 800b08e:	4b26      	ldr	r3, [pc, #152]	; (800b128 <interfaceDrawLayer+0xc0>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b298      	uxth	r0, r3
 800b094:	4b25      	ldr	r3, [pc, #148]	; (800b12c <interfaceDrawLayer+0xc4>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b299      	uxth	r1, r3
 800b09a:	4b25      	ldr	r3, [pc, #148]	; (800b130 <interfaceDrawLayer+0xc8>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	4b24      	ldr	r3, [pc, #144]	; (800b134 <interfaceDrawLayer+0xcc>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2401      	movs	r4, #1
 800b0aa:	9401      	str	r4, [sp, #4]
 800b0ac:	2401      	movs	r4, #1
 800b0ae:	9400      	str	r4, [sp, #0]
 800b0b0:	f7fe fa68 	bl	8009584 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			float moonPhaseShift;

			if (moonPhase < 50) {
 800b0b4:	4b20      	ldr	r3, [pc, #128]	; (800b138 <interfaceDrawLayer+0xd0>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b31      	cmp	r3, #49	; 0x31
 800b0ba:	d843      	bhi.n	800b144 <interfaceDrawLayer+0xdc>

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	; (800b138 <interfaceDrawLayer+0xd0>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f7f6 f963 	bl	800138c <__aeabi_ui2f>
 800b0c6:	1c03      	adds	r3, r0, #0
 800b0c8:	491c      	ldr	r1, [pc, #112]	; (800b13c <interfaceDrawLayer+0xd4>)
 800b0ca:	1c18      	adds	r0, r3, #0
 800b0cc:	f7f5 fc4c 	bl	8000968 <__aeabi_fdiv>
 800b0d0:	1c03      	adds	r3, r0, #0
 800b0d2:	1c1c      	adds	r4, r3, #0
 800b0d4:	4b16      	ldr	r3, [pc, #88]	; (800b130 <interfaceDrawLayer+0xc8>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f7f6 f911 	bl	8001300 <__aeabi_i2f>
 800b0de:	1c03      	adds	r3, r0, #0
 800b0e0:	1c19      	adds	r1, r3, #0
 800b0e2:	1c20      	adds	r0, r4, #0
 800b0e4:	f7f5 fe0a 	bl	8000cfc <__aeabi_fmul>
 800b0e8:	1c03      	adds	r3, r0, #0
 800b0ea:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX - (uint32_t) moonPhaseShift,
 800b0ec:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <interfaceDrawLayer+0xc0>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b29c      	uxth	r4, r3
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7f5 fa48 	bl	8000588 <__aeabi_f2uiz>
 800b0f8:	0003      	movs	r3, r0
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	1ae3      	subs	r3, r4, r3
 800b0fe:	b298      	uxth	r0, r3
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <interfaceDrawLayer+0xc4>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b299      	uxth	r1, r3
 800b106:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <interfaceDrawLayer+0xc8>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <interfaceDrawLayer+0xd8>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	b29b      	uxth	r3, r3
 800b114:	2401      	movs	r4, #1
 800b116:	9401      	str	r4, [sp, #4]
 800b118:	2401      	movs	r4, #1
 800b11a:	9400      	str	r4, [sp, #0]
 800b11c:	f7fe fa32 	bl	8009584 <Paint_DrawCircle>
 800b120:	e04c      	b.n	800b1bc <interfaceDrawLayer+0x154>
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	20000318 	.word	0x20000318
 800b128:	20000641 	.word	0x20000641
 800b12c:	20000604 	.word	0x20000604
 800b130:	2000015c 	.word	0x2000015c
 800b134:	20000605 	.word	0x20000605
 800b138:	20000314 	.word	0x20000314
 800b13c:	41c80000 	.word	0x41c80000
 800b140:	20000293 	.word	0x20000293
						moonPhaseY, moonPhaseRadius, colorMain, DOT_PIXEL_1X1,
						DRAW_FILL_FULL);

			} else if (moonPhase > 50) {
 800b144:	4bf3      	ldr	r3, [pc, #972]	; (800b514 <interfaceDrawLayer+0x4ac>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b32      	cmp	r3, #50	; 0x32
 800b14a:	d937      	bls.n	800b1bc <interfaceDrawLayer+0x154>
				moonPhase = 100 - moonPhase;
 800b14c:	4bf1      	ldr	r3, [pc, #964]	; (800b514 <interfaceDrawLayer+0x4ac>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2264      	movs	r2, #100	; 0x64
 800b152:	1ad2      	subs	r2, r2, r3
 800b154:	4bef      	ldr	r3, [pc, #956]	; (800b514 <interfaceDrawLayer+0x4ac>)
 800b156:	601a      	str	r2, [r3, #0]

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800b158:	4bee      	ldr	r3, [pc, #952]	; (800b514 <interfaceDrawLayer+0x4ac>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	0018      	movs	r0, r3
 800b15e:	f7f6 f915 	bl	800138c <__aeabi_ui2f>
 800b162:	1c03      	adds	r3, r0, #0
 800b164:	49ec      	ldr	r1, [pc, #944]	; (800b518 <interfaceDrawLayer+0x4b0>)
 800b166:	1c18      	adds	r0, r3, #0
 800b168:	f7f5 fbfe 	bl	8000968 <__aeabi_fdiv>
 800b16c:	1c03      	adds	r3, r0, #0
 800b16e:	1c1c      	adds	r4, r3, #0
 800b170:	4bea      	ldr	r3, [pc, #936]	; (800b51c <interfaceDrawLayer+0x4b4>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	0018      	movs	r0, r3
 800b176:	f7f6 f8c3 	bl	8001300 <__aeabi_i2f>
 800b17a:	1c03      	adds	r3, r0, #0
 800b17c:	1c19      	adds	r1, r3, #0
 800b17e:	1c20      	adds	r0, r4, #0
 800b180:	f7f5 fdbc 	bl	8000cfc <__aeabi_fmul>
 800b184:	1c03      	adds	r3, r0, #0
 800b186:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX + (uint32_t) moonPhaseShift,
 800b188:	4be5      	ldr	r3, [pc, #916]	; (800b520 <interfaceDrawLayer+0x4b8>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	b29c      	uxth	r4, r3
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7f5 f9fa 	bl	8000588 <__aeabi_f2uiz>
 800b194:	0003      	movs	r3, r0
 800b196:	b29b      	uxth	r3, r3
 800b198:	18e3      	adds	r3, r4, r3
 800b19a:	b298      	uxth	r0, r3
 800b19c:	4be1      	ldr	r3, [pc, #900]	; (800b524 <interfaceDrawLayer+0x4bc>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b299      	uxth	r1, r3
 800b1a2:	4bde      	ldr	r3, [pc, #888]	; (800b51c <interfaceDrawLayer+0x4b4>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	4bdf      	ldr	r3, [pc, #892]	; (800b528 <interfaceDrawLayer+0x4c0>)
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2401      	movs	r4, #1
 800b1b2:	9401      	str	r4, [sp, #4]
 800b1b4:	2401      	movs	r4, #1
 800b1b6:	9400      	str	r4, [sp, #0]
 800b1b8:	f7fe f9e4 	bl	8009584 <Paint_DrawCircle>

		}

		//										METER

		if (showMeter == 1) {
 800b1bc:	4bdb      	ldr	r3, [pc, #876]	; (800b52c <interfaceDrawLayer+0x4c4>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d11b      	bne.n	800b1fc <interfaceDrawLayer+0x194>
			Paint_DrawRectangle(meterX, meterY, meterX + 82, meterY + 52,
 800b1c4:	4bda      	ldr	r3, [pc, #872]	; (800b530 <interfaceDrawLayer+0x4c8>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b298      	uxth	r0, r3
 800b1ca:	4bda      	ldr	r3, [pc, #872]	; (800b534 <interfaceDrawLayer+0x4cc>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b299      	uxth	r1, r3
 800b1d0:	4bd7      	ldr	r3, [pc, #860]	; (800b530 <interfaceDrawLayer+0x4c8>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3352      	adds	r3, #82	; 0x52
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	4bd6      	ldr	r3, [pc, #856]	; (800b534 <interfaceDrawLayer+0x4cc>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	3334      	adds	r3, #52	; 0x34
 800b1e2:	b29c      	uxth	r4, r3
 800b1e4:	4bd4      	ldr	r3, [pc, #848]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	2500      	movs	r5, #0
 800b1ee:	9502      	str	r5, [sp, #8]
 800b1f0:	2502      	movs	r5, #2
 800b1f2:	9501      	str	r5, [sp, #4]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	0023      	movs	r3, r4
 800b1f8:	f7fe f8f8 	bl	80093ec <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

		//										DIGITAL INTERFACE FIELD

		if (showDigitalInterface == 1) {
 800b1fc:	4bcf      	ldr	r3, [pc, #828]	; (800b53c <interfaceDrawLayer+0x4d4>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d11b      	bne.n	800b23c <interfaceDrawLayer+0x1d4>
			Paint_DrawRectangle(digitalX, digitalY, digitalX + 80,
 800b204:	4bce      	ldr	r3, [pc, #824]	; (800b540 <interfaceDrawLayer+0x4d8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	b298      	uxth	r0, r3
 800b20a:	4bce      	ldr	r3, [pc, #824]	; (800b544 <interfaceDrawLayer+0x4dc>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	b299      	uxth	r1, r3
 800b210:	4bcb      	ldr	r3, [pc, #812]	; (800b540 <interfaceDrawLayer+0x4d8>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	b29b      	uxth	r3, r3
 800b216:	3350      	adds	r3, #80	; 0x50
 800b218:	b29a      	uxth	r2, r3
 800b21a:	4bca      	ldr	r3, [pc, #808]	; (800b544 <interfaceDrawLayer+0x4dc>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3325      	adds	r3, #37	; 0x25
 800b222:	b29c      	uxth	r4, r3
 800b224:	4bc4      	ldr	r3, [pc, #784]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2501      	movs	r5, #1
 800b22e:	9502      	str	r5, [sp, #8]
 800b230:	2501      	movs	r5, #1
 800b232:	9501      	str	r5, [sp, #4]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	0023      	movs	r3, r4
 800b238:	f7fe f8d8 	bl	80093ec <Paint_DrawRectangle>

		}

		//										TEMPERATURE FIELD

		if (showThermometer == 1) {
 800b23c:	4bc2      	ldr	r3, [pc, #776]	; (800b548 <interfaceDrawLayer+0x4e0>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d11d      	bne.n	800b280 <interfaceDrawLayer+0x218>
			Paint_DrawRectangle(temperatureX - 7, temperatureY,
 800b244:	4bc1      	ldr	r3, [pc, #772]	; (800b54c <interfaceDrawLayer+0x4e4>)
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b07      	subs	r3, #7
 800b24c:	b298      	uxth	r0, r3
 800b24e:	4bc0      	ldr	r3, [pc, #768]	; (800b550 <interfaceDrawLayer+0x4e8>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	b299      	uxth	r1, r3
 800b254:	4bbd      	ldr	r3, [pc, #756]	; (800b54c <interfaceDrawLayer+0x4e4>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	3322      	adds	r3, #34	; 0x22
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	4bbc      	ldr	r3, [pc, #752]	; (800b550 <interfaceDrawLayer+0x4e8>)
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b29b      	uxth	r3, r3
 800b264:	330c      	adds	r3, #12
 800b266:	b29c      	uxth	r4, r3
 800b268:	4bb3      	ldr	r3, [pc, #716]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	b29b      	uxth	r3, r3
 800b270:	2501      	movs	r5, #1
 800b272:	9502      	str	r5, [sp, #8]
 800b274:	2502      	movs	r5, #2
 800b276:	9501      	str	r5, [sp, #4]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	0023      	movs	r3, r4
 800b27c:	f7fe f8b6 	bl	80093ec <Paint_DrawRectangle>
					DOT_PIXEL_2X2, DRAW_FILL_FULL); // date window
		}

		//										HUMIDITY BAR FIELD

		if (showHigrometer == 1) {
 800b280:	4bb4      	ldr	r3, [pc, #720]	; (800b554 <interfaceDrawLayer+0x4ec>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d11b      	bne.n	800b2c0 <interfaceDrawLayer+0x258>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800b288:	4bb3      	ldr	r3, [pc, #716]	; (800b558 <interfaceDrawLayer+0x4f0>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	b298      	uxth	r0, r3
 800b28e:	4bb3      	ldr	r3, [pc, #716]	; (800b55c <interfaceDrawLayer+0x4f4>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b299      	uxth	r1, r3
 800b294:	4bb0      	ldr	r3, [pc, #704]	; (800b558 <interfaceDrawLayer+0x4f0>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3305      	adds	r3, #5
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	4baf      	ldr	r3, [pc, #700]	; (800b55c <interfaceDrawLayer+0x4f4>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	3332      	adds	r3, #50	; 0x32
 800b2a6:	b29c      	uxth	r4, r3
 800b2a8:	4ba3      	ldr	r3, [pc, #652]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2500      	movs	r5, #0
 800b2b2:	9502      	str	r5, [sp, #8]
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	9501      	str	r5, [sp, #4]
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	0023      	movs	r3, r4
 800b2bc:	f7fe f896 	bl	80093ec <Paint_DrawRectangle>
					humidityY + 50, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
		}

		//										COMPASS DIGITAL
		if (showNaviDigital == 1) {
 800b2c0:	4ba7      	ldr	r3, [pc, #668]	; (800b560 <interfaceDrawLayer+0x4f8>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d139      	bne.n	800b33c <interfaceDrawLayer+0x2d4>
			Paint_DrawRectangle(compassX, compassY, compassX + 48,
 800b2c8:	4ba6      	ldr	r3, [pc, #664]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	b298      	uxth	r0, r3
 800b2ce:	4ba6      	ldr	r3, [pc, #664]	; (800b568 <interfaceDrawLayer+0x500>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	b299      	uxth	r1, r3
 800b2d4:	4ba3      	ldr	r3, [pc, #652]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	3330      	adds	r3, #48	; 0x30
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	4ba2      	ldr	r3, [pc, #648]	; (800b568 <interfaceDrawLayer+0x500>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	332c      	adds	r3, #44	; 0x2c
 800b2e6:	b29c      	uxth	r4, r3
 800b2e8:	4b93      	ldr	r3, [pc, #588]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	9502      	str	r5, [sp, #8]
 800b2f4:	2501      	movs	r5, #1
 800b2f6:	9501      	str	r5, [sp, #4]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	0023      	movs	r3, r4
 800b2fc:	f7fe f876 	bl	80093ec <Paint_DrawRectangle>
					compassY + 44, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawLine(compassX, compassY + 29, compassX + 48,
 800b300:	4b98      	ldr	r3, [pc, #608]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	b298      	uxth	r0, r3
 800b306:	4b98      	ldr	r3, [pc, #608]	; (800b568 <interfaceDrawLayer+0x500>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	331d      	adds	r3, #29
 800b30e:	b299      	uxth	r1, r3
 800b310:	4b94      	ldr	r3, [pc, #592]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	3330      	adds	r3, #48	; 0x30
 800b318:	b29a      	uxth	r2, r3
 800b31a:	4b93      	ldr	r3, [pc, #588]	; (800b568 <interfaceDrawLayer+0x500>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	331d      	adds	r3, #29
 800b322:	b29c      	uxth	r4, r3
 800b324:	4b84      	ldr	r3, [pc, #528]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	2500      	movs	r5, #0
 800b32e:	9502      	str	r5, [sp, #8]
 800b330:	2501      	movs	r5, #1
 800b332:	9501      	str	r5, [sp, #4]
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	0023      	movs	r3, r4
 800b338:	f7fd fe90 	bl	800905c <Paint_DrawLine>
					LINE_STYLE_SOLID);
		}

		//										COMPASS ANALOG

		if (showNaviAnalog == 1) {
 800b33c:	4b8b      	ldr	r3, [pc, #556]	; (800b56c <interfaceDrawLayer+0x504>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d123      	bne.n	800b38c <interfaceDrawLayer+0x324>
			Paint_DrawCircle(compassX, compassY, compassBoardRadius,
 800b344:	4b87      	ldr	r3, [pc, #540]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	b298      	uxth	r0, r3
 800b34a:	4b87      	ldr	r3, [pc, #540]	; (800b568 <interfaceDrawLayer+0x500>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b299      	uxth	r1, r3
 800b350:	4b87      	ldr	r3, [pc, #540]	; (800b570 <interfaceDrawLayer+0x508>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	b29a      	uxth	r2, r3
 800b356:	4b78      	ldr	r3, [pc, #480]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2400      	movs	r4, #0
 800b360:	9401      	str	r4, [sp, #4]
 800b362:	2401      	movs	r4, #1
 800b364:	9400      	str	r4, [sp, #0]
 800b366:	f7fe f90d 	bl	8009584 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(compassX, compassY, 2, colorSecond, DOT_PIXEL_1X1,
 800b36a:	4b7e      	ldr	r3, [pc, #504]	; (800b564 <interfaceDrawLayer+0x4fc>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b298      	uxth	r0, r3
 800b370:	4b7d      	ldr	r3, [pc, #500]	; (800b568 <interfaceDrawLayer+0x500>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	b299      	uxth	r1, r3
 800b376:	4b70      	ldr	r3, [pc, #448]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	2201      	movs	r2, #1
 800b380:	9201      	str	r2, [sp, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	9200      	str	r2, [sp, #0]
 800b386:	2202      	movs	r2, #2
 800b388:	f7fe f8fc 	bl	8009584 <Paint_DrawCircle>

		}

		//										MAIN BOARD

		Paint_DrawCircle(100, 100, mainBoardRadius, colorSecond, DOT_PIXEL_1X1,
 800b38c:	4b79      	ldr	r3, [pc, #484]	; (800b574 <interfaceDrawLayer+0x50c>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b29a      	uxth	r2, r3
 800b392:	4b69      	ldr	r3, [pc, #420]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	b2db      	uxtb	r3, r3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	2100      	movs	r1, #0
 800b39c:	9101      	str	r1, [sp, #4]
 800b39e:	2101      	movs	r1, #1
 800b3a0:	9100      	str	r1, [sp, #0]
 800b3a2:	2164      	movs	r1, #100	; 0x64
 800b3a4:	2064      	movs	r0, #100	; 0x64
 800b3a6:	f7fe f8ed 	bl	8009584 <Paint_DrawCircle>
				DRAW_FILL_EMPTY); //main

		//										CHRONO DECIMALS BOARD

		if (showChrono == 1) {
 800b3aa:	4b73      	ldr	r3, [pc, #460]	; (800b578 <interfaceDrawLayer+0x510>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d14f      	bne.n	800b452 <interfaceDrawLayer+0x3ea>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800b3b2:	4b72      	ldr	r3, [pc, #456]	; (800b57c <interfaceDrawLayer+0x514>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b298      	uxth	r0, r3
 800b3b8:	4b71      	ldr	r3, [pc, #452]	; (800b580 <interfaceDrawLayer+0x518>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	b299      	uxth	r1, r3
 800b3be:	4b71      	ldr	r3, [pc, #452]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3302      	adds	r3, #2
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	4b5b      	ldr	r3, [pc, #364]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	2400      	movs	r4, #0
 800b3d2:	9401      	str	r4, [sp, #4]
 800b3d4:	2401      	movs	r4, #1
 800b3d6:	9400      	str	r4, [sp, #0]
 800b3d8:	f7fe f8d4 	bl	8009584 <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800b3dc:	4b67      	ldr	r3, [pc, #412]	; (800b57c <interfaceDrawLayer+0x514>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	b298      	uxth	r0, r3
 800b3e2:	4b67      	ldr	r3, [pc, #412]	; (800b580 <interfaceDrawLayer+0x518>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	b299      	uxth	r1, r3
 800b3e8:	4b66      	ldr	r3, [pc, #408]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	4b52      	ldr	r3, [pc, #328]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2401      	movs	r4, #1
 800b3f8:	9401      	str	r4, [sp, #4]
 800b3fa:	2401      	movs	r4, #1
 800b3fc:	9400      	str	r4, [sp, #0]
 800b3fe:	f7fe f8c1 	bl	8009584 <Paint_DrawCircle>
					smallBoardRadius, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_FULL); //chrono decimals

			//										CHRONO MINUTES BOARD

			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800b402:	4b61      	ldr	r3, [pc, #388]	; (800b588 <interfaceDrawLayer+0x520>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	b298      	uxth	r0, r3
 800b408:	4b60      	ldr	r3, [pc, #384]	; (800b58c <interfaceDrawLayer+0x524>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b299      	uxth	r1, r3
 800b40e:	4b5d      	ldr	r3, [pc, #372]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	b29b      	uxth	r3, r3
 800b414:	3302      	adds	r3, #2
 800b416:	b29a      	uxth	r2, r3
 800b418:	4b47      	ldr	r3, [pc, #284]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	b29b      	uxth	r3, r3
 800b420:	2400      	movs	r4, #0
 800b422:	9401      	str	r4, [sp, #4]
 800b424:	2401      	movs	r4, #1
 800b426:	9400      	str	r4, [sp, #0]
 800b428:	f7fe f8ac 	bl	8009584 <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800b42c:	4b56      	ldr	r3, [pc, #344]	; (800b588 <interfaceDrawLayer+0x520>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b298      	uxth	r0, r3
 800b432:	4b56      	ldr	r3, [pc, #344]	; (800b58c <interfaceDrawLayer+0x524>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b299      	uxth	r1, r3
 800b438:	4b52      	ldr	r3, [pc, #328]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	4b3e      	ldr	r3, [pc, #248]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	b29b      	uxth	r3, r3
 800b446:	2401      	movs	r4, #1
 800b448:	9401      	str	r4, [sp, #4]
 800b44a:	2401      	movs	r4, #1
 800b44c:	9400      	str	r4, [sp, #0]
 800b44e:	f7fe f899 	bl	8009584 <Paint_DrawCircle>
					DRAW_FILL_FULL); //chrono minutes
		}

		//										SECONDS BOARD

		if (showSeconds == 1) {
 800b452:	4b4f      	ldr	r3, [pc, #316]	; (800b590 <interfaceDrawLayer+0x528>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d127      	bne.n	800b4aa <interfaceDrawLayer+0x442>
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius + 2,
 800b45a:	4b4e      	ldr	r3, [pc, #312]	; (800b594 <interfaceDrawLayer+0x52c>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	b298      	uxth	r0, r3
 800b460:	4b4d      	ldr	r3, [pc, #308]	; (800b598 <interfaceDrawLayer+0x530>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	b299      	uxth	r1, r3
 800b466:	4b47      	ldr	r3, [pc, #284]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3302      	adds	r3, #2
 800b46e:	b29a      	uxth	r2, r3
 800b470:	4b31      	ldr	r3, [pc, #196]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	b29b      	uxth	r3, r3
 800b478:	2400      	movs	r4, #0
 800b47a:	9401      	str	r4, [sp, #4]
 800b47c:	2401      	movs	r4, #1
 800b47e:	9400      	str	r4, [sp, #0]
 800b480:	f7fe f880 	bl	8009584 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius,
 800b484:	4b43      	ldr	r3, [pc, #268]	; (800b594 <interfaceDrawLayer+0x52c>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b298      	uxth	r0, r3
 800b48a:	4b43      	ldr	r3, [pc, #268]	; (800b598 <interfaceDrawLayer+0x530>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	b299      	uxth	r1, r3
 800b490:	4b3c      	ldr	r3, [pc, #240]	; (800b584 <interfaceDrawLayer+0x51c>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	b29a      	uxth	r2, r3
 800b496:	4b28      	ldr	r3, [pc, #160]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	2401      	movs	r4, #1
 800b4a0:	9401      	str	r4, [sp, #4]
 800b4a2:	2401      	movs	r4, #1
 800b4a4:	9400      	str	r4, [sp, #0]
 800b4a6:	f7fe f86d 	bl	8009584 <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //seconds
		}

		//										DATE WINDOW
		if (showDate == 1) {
 800b4aa:	4b3c      	ldr	r3, [pc, #240]	; (800b59c <interfaceDrawLayer+0x534>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d11f      	bne.n	800b4f2 <interfaceDrawLayer+0x48a>
			Paint_DrawRectangle(dateX - 3, dateY - 3, dateX + 17, dateY + 14,
 800b4b2:	4b3b      	ldr	r3, [pc, #236]	; (800b5a0 <interfaceDrawLayer+0x538>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b03      	subs	r3, #3
 800b4ba:	b298      	uxth	r0, r3
 800b4bc:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <interfaceDrawLayer+0x53c>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	3b03      	subs	r3, #3
 800b4c4:	b299      	uxth	r1, r3
 800b4c6:	4b36      	ldr	r3, [pc, #216]	; (800b5a0 <interfaceDrawLayer+0x538>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3311      	adds	r3, #17
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4b34      	ldr	r3, [pc, #208]	; (800b5a4 <interfaceDrawLayer+0x53c>)
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	330e      	adds	r3, #14
 800b4d8:	b29c      	uxth	r4, r3
 800b4da:	4b17      	ldr	r3, [pc, #92]	; (800b538 <interfaceDrawLayer+0x4d0>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	2500      	movs	r5, #0
 800b4e4:	9502      	str	r5, [sp, #8]
 800b4e6:	2502      	movs	r5, #2
 800b4e8:	9501      	str	r5, [sp, #4]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	0023      	movs	r3, r4
 800b4ee:	f7fd ff7d 	bl	80093ec <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window
		}

		//										DOTS

		if (showChrono == 1) {
 800b4f2:	4b21      	ldr	r3, [pc, #132]	; (800b578 <interfaceDrawLayer+0x510>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d000      	beq.n	800b4fc <interfaceDrawLayer+0x494>
 800b4fa:	e07d      	b.n	800b5f8 <interfaceDrawLayer+0x590>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY, 2,
 800b4fc:	4b1f      	ldr	r3, [pc, #124]	; (800b57c <interfaceDrawLayer+0x514>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	b298      	uxth	r0, r3
 800b502:	4b1f      	ldr	r3, [pc, #124]	; (800b580 <interfaceDrawLayer+0x518>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b299      	uxth	r1, r3
 800b508:	4b07      	ldr	r3, [pc, #28]	; (800b528 <interfaceDrawLayer+0x4c0>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	b29b      	uxth	r3, r3
 800b510:	2201      	movs	r2, #1
 800b512:	e049      	b.n	800b5a8 <interfaceDrawLayer+0x540>
 800b514:	20000314 	.word	0x20000314
 800b518:	41c80000 	.word	0x41c80000
 800b51c:	2000015c 	.word	0x2000015c
 800b520:	20000641 	.word	0x20000641
 800b524:	20000604 	.word	0x20000604
 800b528:	20000293 	.word	0x20000293
 800b52c:	20000626 	.word	0x20000626
 800b530:	2000030e 	.word	0x2000030e
 800b534:	2000040c 	.word	0x2000040c
 800b538:	20000605 	.word	0x20000605
 800b53c:	20000640 	.word	0x20000640
 800b540:	20000596 	.word	0x20000596
 800b544:	2000030a 	.word	0x2000030a
 800b548:	200005ed 	.word	0x200005ed
 800b54c:	2000057d 	.word	0x2000057d
 800b550:	200002c4 	.word	0x200002c4
 800b554:	20000597 	.word	0x20000597
 800b558:	2000064a 	.word	0x2000064a
 800b55c:	200003a2 	.word	0x200003a2
 800b560:	20000565 	.word	0x20000565
 800b564:	20000625 	.word	0x20000625
 800b568:	200003a4 	.word	0x200003a4
 800b56c:	20000146 	.word	0x20000146
 800b570:	20000594 	.word	0x20000594
 800b574:	20000578 	.word	0x20000578
 800b578:	20000308 	.word	0x20000308
 800b57c:	20000599 	.word	0x20000599
 800b580:	2000059a 	.word	0x2000059a
 800b584:	20000128 	.word	0x20000128
 800b588:	2000062e 	.word	0x2000062e
 800b58c:	20000606 	.word	0x20000606
 800b590:	2000013a 	.word	0x2000013a
 800b594:	20000627 	.word	0x20000627
 800b598:	200002d3 	.word	0x200002d3
 800b59c:	20000152 	.word	0x20000152
 800b5a0:	20000634 	.word	0x20000634
 800b5a4:	200001c0 	.word	0x200001c0
 800b5a8:	9201      	str	r2, [sp, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	9200      	str	r2, [sp, #0]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	f7fd ffe8 	bl	8009584 <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY, 2,
 800b5b4:	4b99      	ldr	r3, [pc, #612]	; (800b81c <interfaceDrawLayer+0x7b4>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	b298      	uxth	r0, r3
 800b5ba:	4b99      	ldr	r3, [pc, #612]	; (800b820 <interfaceDrawLayer+0x7b8>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b299      	uxth	r1, r3
 800b5c0:	4b98      	ldr	r3, [pc, #608]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	9201      	str	r2, [sp, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	9200      	str	r2, [sp, #0]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f7fd ffd7 	bl	8009584 <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(secondsStartX, secondsStartY, 2, colorMain,
 800b5d6:	4b94      	ldr	r3, [pc, #592]	; (800b828 <interfaceDrawLayer+0x7c0>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	b298      	uxth	r0, r3
 800b5dc:	4b93      	ldr	r3, [pc, #588]	; (800b82c <interfaceDrawLayer+0x7c4>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b299      	uxth	r1, r3
 800b5e2:	4b90      	ldr	r3, [pc, #576]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	9201      	str	r2, [sp, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	9200      	str	r2, [sp, #0]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f7fd ffc6 	bl	8009584 <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);
		}

		Paint_DrawString_EN(82, 7, "libra", &Font12, colorSecond, colorMain);
 800b5f8:	4b8d      	ldr	r3, [pc, #564]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4a88      	ldr	r2, [pc, #544]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	b2d2      	uxtb	r2, r2
 800b606:	b292      	uxth	r2, r2
 800b608:	488a      	ldr	r0, [pc, #552]	; (800b834 <interfaceDrawLayer+0x7cc>)
 800b60a:	498b      	ldr	r1, [pc, #556]	; (800b838 <interfaceDrawLayer+0x7d0>)
 800b60c:	9201      	str	r2, [sp, #4]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	0003      	movs	r3, r0
 800b612:	000a      	movs	r2, r1
 800b614:	2107      	movs	r1, #7
 800b616:	2052      	movs	r0, #82	; 0x52
 800b618:	f7fe faea 	bl	8009bf0 <Paint_DrawString_EN>
		//^logo
	}

	if (layer == 2) { //indexes
 800b61c:	1dfb      	adds	r3, r7, #7
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b02      	cmp	r3, #2
 800b622:	d001      	beq.n	800b628 <interfaceDrawLayer+0x5c0>
 800b624:	f001 fb06 	bl	800cc34 <interfaceDrawLayer+0x1bcc>
		//										METER INDEX

		if (showMeter == 1) {
 800b628:	4b84      	ldr	r3, [pc, #528]	; (800b83c <interfaceDrawLayer+0x7d4>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d14d      	bne.n	800b6cc <interfaceDrawLayer+0x664>
			Paint_DrawString_EN(meterX + 65, meterY + 2, "V", &Font16,
 800b630:	4b83      	ldr	r3, [pc, #524]	; (800b840 <interfaceDrawLayer+0x7d8>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	3341      	adds	r3, #65	; 0x41
 800b638:	b298      	uxth	r0, r3
 800b63a:	4b82      	ldr	r3, [pc, #520]	; (800b844 <interfaceDrawLayer+0x7dc>)
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	3302      	adds	r3, #2
 800b642:	b299      	uxth	r1, r3
 800b644:	4b7a      	ldr	r3, [pc, #488]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4a75      	ldr	r2, [pc, #468]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	b292      	uxth	r2, r2
 800b654:	4d7c      	ldr	r5, [pc, #496]	; (800b848 <interfaceDrawLayer+0x7e0>)
 800b656:	4c7d      	ldr	r4, [pc, #500]	; (800b84c <interfaceDrawLayer+0x7e4>)
 800b658:	9201      	str	r2, [sp, #4]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	002b      	movs	r3, r5
 800b65e:	0022      	movs	r2, r4
 800b660:	f7fe fac6 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 18, "Vd", &Font16,
 800b664:	4b76      	ldr	r3, [pc, #472]	; (800b840 <interfaceDrawLayer+0x7d8>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	3338      	adds	r3, #56	; 0x38
 800b66c:	b298      	uxth	r0, r3
 800b66e:	4b75      	ldr	r3, [pc, #468]	; (800b844 <interfaceDrawLayer+0x7dc>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b29b      	uxth	r3, r3
 800b674:	3312      	adds	r3, #18
 800b676:	b299      	uxth	r1, r3
 800b678:	4b6d      	ldr	r3, [pc, #436]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	b29b      	uxth	r3, r3
 800b680:	4a68      	ldr	r2, [pc, #416]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b682:	7812      	ldrb	r2, [r2, #0]
 800b684:	b2d2      	uxtb	r2, r2
 800b686:	b292      	uxth	r2, r2
 800b688:	4d6f      	ldr	r5, [pc, #444]	; (800b848 <interfaceDrawLayer+0x7e0>)
 800b68a:	4c71      	ldr	r4, [pc, #452]	; (800b850 <interfaceDrawLayer+0x7e8>)
 800b68c:	9201      	str	r2, [sp, #4]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	002b      	movs	r3, r5
 800b692:	0022      	movs	r2, r4
 800b694:	f7fe faac 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 34, "kR", &Font16,
 800b698:	4b69      	ldr	r3, [pc, #420]	; (800b840 <interfaceDrawLayer+0x7d8>)
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3338      	adds	r3, #56	; 0x38
 800b6a0:	b298      	uxth	r0, r3
 800b6a2:	4b68      	ldr	r3, [pc, #416]	; (800b844 <interfaceDrawLayer+0x7dc>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	3322      	adds	r3, #34	; 0x22
 800b6aa:	b299      	uxth	r1, r3
 800b6ac:	4b60      	ldr	r3, [pc, #384]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	4a5b      	ldr	r2, [pc, #364]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	b292      	uxth	r2, r2
 800b6bc:	4d62      	ldr	r5, [pc, #392]	; (800b848 <interfaceDrawLayer+0x7e0>)
 800b6be:	4c65      	ldr	r4, [pc, #404]	; (800b854 <interfaceDrawLayer+0x7ec>)
 800b6c0:	9201      	str	r2, [sp, #4]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	002b      	movs	r3, r5
 800b6c6:	0022      	movs	r2, r4
 800b6c8:	f7fe fa92 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}

		//										DIGITAL INTERFACE INDEX

		if (showDigitalInterface == 1) {
 800b6cc:	4b62      	ldr	r3, [pc, #392]	; (800b858 <interfaceDrawLayer+0x7f0>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d14b      	bne.n	800b76c <interfaceDrawLayer+0x704>
			Paint_DrawString_EN(digitalX + 55, digitalY, "hPa", &Font12,
 800b6d4:	4b61      	ldr	r3, [pc, #388]	; (800b85c <interfaceDrawLayer+0x7f4>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	3337      	adds	r3, #55	; 0x37
 800b6dc:	b298      	uxth	r0, r3
 800b6de:	4b60      	ldr	r3, [pc, #384]	; (800b860 <interfaceDrawLayer+0x7f8>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	b299      	uxth	r1, r3
 800b6e4:	4b4f      	ldr	r3, [pc, #316]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4a50      	ldr	r2, [pc, #320]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	4d4f      	ldr	r5, [pc, #316]	; (800b834 <interfaceDrawLayer+0x7cc>)
 800b6f6:	4c5b      	ldr	r4, [pc, #364]	; (800b864 <interfaceDrawLayer+0x7fc>)
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	002b      	movs	r3, r5
 800b6fe:	0022      	movs	r2, r4
 800b700:	f7fe fa76 	bl	8009bf0 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 55, digitalY + 12, "%RH", &Font12,
 800b704:	4b55      	ldr	r3, [pc, #340]	; (800b85c <interfaceDrawLayer+0x7f4>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	b29b      	uxth	r3, r3
 800b70a:	3337      	adds	r3, #55	; 0x37
 800b70c:	b298      	uxth	r0, r3
 800b70e:	4b54      	ldr	r3, [pc, #336]	; (800b860 <interfaceDrawLayer+0x7f8>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	b29b      	uxth	r3, r3
 800b714:	330c      	adds	r3, #12
 800b716:	b299      	uxth	r1, r3
 800b718:	4b42      	ldr	r3, [pc, #264]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4a43      	ldr	r2, [pc, #268]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	b292      	uxth	r2, r2
 800b728:	4d42      	ldr	r5, [pc, #264]	; (800b834 <interfaceDrawLayer+0x7cc>)
 800b72a:	4c4f      	ldr	r4, [pc, #316]	; (800b868 <interfaceDrawLayer+0x800>)
 800b72c:	9201      	str	r2, [sp, #4]
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	002b      	movs	r3, r5
 800b732:	0022      	movs	r2, r4
 800b734:	f7fe fa5c 	bl	8009bf0 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 42, digitalY + 24, "deg C", &Font12,
 800b738:	4b48      	ldr	r3, [pc, #288]	; (800b85c <interfaceDrawLayer+0x7f4>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	332a      	adds	r3, #42	; 0x2a
 800b740:	b298      	uxth	r0, r3
 800b742:	4b47      	ldr	r3, [pc, #284]	; (800b860 <interfaceDrawLayer+0x7f8>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	b29b      	uxth	r3, r3
 800b748:	3318      	adds	r3, #24
 800b74a:	b299      	uxth	r1, r3
 800b74c:	4b35      	ldr	r3, [pc, #212]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	b29b      	uxth	r3, r3
 800b754:	4a36      	ldr	r2, [pc, #216]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	b2d2      	uxtb	r2, r2
 800b75a:	b292      	uxth	r2, r2
 800b75c:	4d35      	ldr	r5, [pc, #212]	; (800b834 <interfaceDrawLayer+0x7cc>)
 800b75e:	4c43      	ldr	r4, [pc, #268]	; (800b86c <interfaceDrawLayer+0x804>)
 800b760:	9201      	str	r2, [sp, #4]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	002b      	movs	r3, r5
 800b766:	0022      	movs	r2, r4
 800b768:	f7fe fa42 	bl	8009bf0 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										BAROMETER INDEX

		if (showBarometer == 1) {
 800b76c:	4b40      	ldr	r3, [pc, #256]	; (800b870 <interfaceDrawLayer+0x808>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d148      	bne.n	800b806 <interfaceDrawLayer+0x79e>
			Paint_DrawNum(177, 102, 975, &Font8, colorSecond, colorMain);
 800b774:	4b2e      	ldr	r3, [pc, #184]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	4a29      	ldr	r2, [pc, #164]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	b2d2      	uxtb	r2, r2
 800b782:	b292      	uxth	r2, r2
 800b784:	493b      	ldr	r1, [pc, #236]	; (800b874 <interfaceDrawLayer+0x80c>)
 800b786:	483c      	ldr	r0, [pc, #240]	; (800b878 <interfaceDrawLayer+0x810>)
 800b788:	9201      	str	r2, [sp, #4]
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	000b      	movs	r3, r1
 800b78e:	0002      	movs	r2, r0
 800b790:	2166      	movs	r1, #102	; 0x66
 800b792:	20b1      	movs	r0, #177	; 0xb1
 800b794:	f7fe faaa 	bl	8009cec <Paint_DrawNum>
			Paint_DrawString_EN(177, 111, "hPa", &Font8, colorSecond,
 800b798:	4b25      	ldr	r3, [pc, #148]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4a20      	ldr	r2, [pc, #128]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b7a2:	7812      	ldrb	r2, [r2, #0]
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	4832      	ldr	r0, [pc, #200]	; (800b874 <interfaceDrawLayer+0x80c>)
 800b7aa:	492e      	ldr	r1, [pc, #184]	; (800b864 <interfaceDrawLayer+0x7fc>)
 800b7ac:	9201      	str	r2, [sp, #4]
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	0003      	movs	r3, r0
 800b7b2:	000a      	movs	r2, r1
 800b7b4:	216f      	movs	r1, #111	; 0x6f
 800b7b6:	20b1      	movs	r0, #177	; 0xb1
 800b7b8:	f7fe fa1a 	bl	8009bf0 <Paint_DrawString_EN>
					colorMain);
			Paint_DrawNum(102, 185, 1000, &Font8, colorSecond, colorMain);
 800b7bc:	4b1c      	ldr	r3, [pc, #112]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	4a17      	ldr	r2, [pc, #92]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b7c6:	7812      	ldrb	r2, [r2, #0]
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	4829      	ldr	r0, [pc, #164]	; (800b874 <interfaceDrawLayer+0x80c>)
 800b7ce:	21fa      	movs	r1, #250	; 0xfa
 800b7d0:	0089      	lsls	r1, r1, #2
 800b7d2:	9201      	str	r2, [sp, #4]
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	0003      	movs	r3, r0
 800b7d8:	000a      	movs	r2, r1
 800b7da:	21b9      	movs	r1, #185	; 0xb9
 800b7dc:	2066      	movs	r0, #102	; 0x66
 800b7de:	f7fe fa85 	bl	8009cec <Paint_DrawNum>
			Paint_DrawNum(5, 102, 1025, &Font8, colorSecond, colorMain);
 800b7e2:	4b13      	ldr	r3, [pc, #76]	; (800b830 <interfaceDrawLayer+0x7c8>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	4a0e      	ldr	r2, [pc, #56]	; (800b824 <interfaceDrawLayer+0x7bc>)
 800b7ec:	7812      	ldrb	r2, [r2, #0]
 800b7ee:	b2d2      	uxtb	r2, r2
 800b7f0:	b292      	uxth	r2, r2
 800b7f2:	4920      	ldr	r1, [pc, #128]	; (800b874 <interfaceDrawLayer+0x80c>)
 800b7f4:	4821      	ldr	r0, [pc, #132]	; (800b87c <interfaceDrawLayer+0x814>)
 800b7f6:	9201      	str	r2, [sp, #4]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	000b      	movs	r3, r1
 800b7fc:	0002      	movs	r2, r0
 800b7fe:	2166      	movs	r1, #102	; 0x66
 800b800:	2005      	movs	r0, #5
 800b802:	f7fe fa73 	bl	8009cec <Paint_DrawNum>
		}

		//										HUMIDITY INDEX

		if (showHigrometer == 1) {
 800b806:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <interfaceDrawLayer+0x818>)
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d000      	beq.n	800b810 <interfaceDrawLayer+0x7a8>
 800b80e:	e09c      	b.n	800b94a <interfaceDrawLayer+0x8e2>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800b810:	2317      	movs	r3, #23
 800b812:	18fb      	adds	r3, r7, r3
 800b814:	2200      	movs	r2, #0
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	e060      	b.n	800b8dc <interfaceDrawLayer+0x874>
 800b81a:	46c0      	nop			; (mov r8, r8)
 800b81c:	2000062e 	.word	0x2000062e
 800b820:	20000606 	.word	0x20000606
 800b824:	20000293 	.word	0x20000293
 800b828:	20000627 	.word	0x20000627
 800b82c:	200002d3 	.word	0x200002d3
 800b830:	20000605 	.word	0x20000605
 800b834:	20000008 	.word	0x20000008
 800b838:	08013d64 	.word	0x08013d64
 800b83c:	20000626 	.word	0x20000626
 800b840:	2000030e 	.word	0x2000030e
 800b844:	2000040c 	.word	0x2000040c
 800b848:	20000010 	.word	0x20000010
 800b84c:	08013d6c 	.word	0x08013d6c
 800b850:	08013d70 	.word	0x08013d70
 800b854:	08013d74 	.word	0x08013d74
 800b858:	20000640 	.word	0x20000640
 800b85c:	20000596 	.word	0x20000596
 800b860:	2000030a 	.word	0x2000030a
 800b864:	08013d78 	.word	0x08013d78
 800b868:	08013d7c 	.word	0x08013d7c
 800b86c:	08013d80 	.word	0x08013d80
 800b870:	20000159 	.word	0x20000159
 800b874:	20000020 	.word	0x20000020
 800b878:	000003cf 	.word	0x000003cf
 800b87c:	00000401 	.word	0x00000401
 800b880:	20000597 	.word	0x20000597
				Paint_DrawLine(humidityX, humidityY + i, humidityX - 2,
 800b884:	4bfa      	ldr	r3, [pc, #1000]	; (800bc70 <interfaceDrawLayer+0xc08>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b298      	uxth	r0, r3
 800b88a:	4bfa      	ldr	r3, [pc, #1000]	; (800bc74 <interfaceDrawLayer+0xc0c>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b29a      	uxth	r2, r3
 800b890:	2517      	movs	r5, #23
 800b892:	197b      	adds	r3, r7, r5
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	b29b      	uxth	r3, r3
 800b898:	18d3      	adds	r3, r2, r3
 800b89a:	b299      	uxth	r1, r3
 800b89c:	4bf4      	ldr	r3, [pc, #976]	; (800bc70 <interfaceDrawLayer+0xc08>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b02      	subs	r3, #2
 800b8a4:	b29c      	uxth	r4, r3
 800b8a6:	4bf3      	ldr	r3, [pc, #972]	; (800bc74 <interfaceDrawLayer+0xc0c>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	002e      	movs	r6, r5
 800b8ae:	197b      	adds	r3, r7, r5
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	18d3      	adds	r3, r2, r3
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	4bef      	ldr	r3, [pc, #956]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	2500      	movs	r5, #0
 800b8c2:	9502      	str	r5, [sp, #8]
 800b8c4:	2501      	movs	r5, #1
 800b8c6:	9501      	str	r5, [sp, #4]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	0013      	movs	r3, r2
 800b8cc:	0022      	movs	r2, r4
 800b8ce:	f7fd fbc5 	bl	800905c <Paint_DrawLine>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800b8d2:	19bb      	adds	r3, r7, r6
 800b8d4:	19ba      	adds	r2, r7, r6
 800b8d6:	7812      	ldrb	r2, [r2, #0]
 800b8d8:	3205      	adds	r2, #5
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	2317      	movs	r3, #23
 800b8de:	18fb      	adds	r3, r7, r3
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b32      	cmp	r3, #50	; 0x32
 800b8e4:	d9ce      	bls.n	800b884 <interfaceDrawLayer+0x81c>
						humidityY + i, colorSecond, DOT_PIXEL_1X1,
						LINE_STYLE_SOLID);
			}

			Paint_DrawString_EN(humidityX + 6, humidityY, "0%RH", &Font8,
 800b8e6:	4be2      	ldr	r3, [pc, #904]	; (800bc70 <interfaceDrawLayer+0xc08>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	3306      	adds	r3, #6
 800b8ee:	b298      	uxth	r0, r3
 800b8f0:	4be0      	ldr	r3, [pc, #896]	; (800bc74 <interfaceDrawLayer+0xc0c>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	b299      	uxth	r1, r3
 800b8f6:	4be0      	ldr	r3, [pc, #896]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4adf      	ldr	r2, [pc, #892]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800b900:	7812      	ldrb	r2, [r2, #0]
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	b292      	uxth	r2, r2
 800b906:	4dde      	ldr	r5, [pc, #888]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800b908:	4cde      	ldr	r4, [pc, #888]	; (800bc84 <interfaceDrawLayer+0xc1c>)
 800b90a:	9201      	str	r2, [sp, #4]
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	002b      	movs	r3, r5
 800b910:	0022      	movs	r2, r4
 800b912:	f7fe f96d 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(humidityX + 6, humidityY + 43, "100", &Font8,
 800b916:	4bd6      	ldr	r3, [pc, #856]	; (800bc70 <interfaceDrawLayer+0xc08>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	3306      	adds	r3, #6
 800b91e:	b298      	uxth	r0, r3
 800b920:	4bd4      	ldr	r3, [pc, #848]	; (800bc74 <interfaceDrawLayer+0xc0c>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	b29b      	uxth	r3, r3
 800b926:	332b      	adds	r3, #43	; 0x2b
 800b928:	b299      	uxth	r1, r3
 800b92a:	4bd3      	ldr	r3, [pc, #844]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	b29b      	uxth	r3, r3
 800b932:	4ad2      	ldr	r2, [pc, #840]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800b934:	7812      	ldrb	r2, [r2, #0]
 800b936:	b2d2      	uxtb	r2, r2
 800b938:	b292      	uxth	r2, r2
 800b93a:	4dd1      	ldr	r5, [pc, #836]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800b93c:	4cd2      	ldr	r4, [pc, #840]	; (800bc88 <interfaceDrawLayer+0xc20>)
 800b93e:	9201      	str	r2, [sp, #4]
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	002b      	movs	r3, r5
 800b944:	0022      	movs	r2, r4
 800b946:	f7fe f953 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}



		if (showNaviAnalog) {
 800b94a:	4bd0      	ldr	r3, [pc, #832]	; (800bc8c <interfaceDrawLayer+0xc24>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d100      	bne.n	800b954 <interfaceDrawLayer+0x8ec>
 800b952:	e0fc      	b.n	800bb4e <interfaceDrawLayer+0xae6>

			//										ANALOG COMPASS ALTIMETER UNIT
			Paint_DrawChar(compassX -4, compassY + 3, 'm', &Font12,
 800b954:	4bce      	ldr	r3, [pc, #824]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	3b04      	subs	r3, #4
 800b95c:	b298      	uxth	r0, r3
 800b95e:	4bcd      	ldr	r3, [pc, #820]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b29b      	uxth	r3, r3
 800b964:	3303      	adds	r3, #3
 800b966:	b299      	uxth	r1, r3
 800b968:	4bc3      	ldr	r3, [pc, #780]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4ac2      	ldr	r2, [pc, #776]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800b972:	7812      	ldrb	r2, [r2, #0]
 800b974:	b2d2      	uxtb	r2, r2
 800b976:	b292      	uxth	r2, r2
 800b978:	4cc7      	ldr	r4, [pc, #796]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800b97a:	9201      	str	r2, [sp, #4]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	0023      	movs	r3, r4
 800b980:	226d      	movs	r2, #109	; 0x6d
 800b982:	f7fe f851 	bl	8009a28 <Paint_DrawChar>



			//										ANALOG COMPASS INDEX
			//										BACKGROUD FOR COMPASS INDEX
			Paint_DrawRectangle(compassX-3, compassY-30, compassX-3+8, compassY-30+12,
 800b986:	4bc2      	ldr	r3, [pc, #776]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	3b03      	subs	r3, #3
 800b98e:	b298      	uxth	r0, r3
 800b990:	4bc0      	ldr	r3, [pc, #768]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	3b1e      	subs	r3, #30
 800b998:	b299      	uxth	r1, r3
 800b99a:	4bbd      	ldr	r3, [pc, #756]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	3305      	adds	r3, #5
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	4bbb      	ldr	r3, [pc, #748]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b12      	subs	r3, #18
 800b9ac:	b29c      	uxth	r4, r3
 800b9ae:	4bb3      	ldr	r3, [pc, #716]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	2501      	movs	r5, #1
 800b9b8:	9502      	str	r5, [sp, #8]
 800b9ba:	2501      	movs	r5, #1
 800b9bc:	9501      	str	r5, [sp, #4]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	0023      	movs	r3, r4
 800b9c2:	f7fd fd13 	bl	80093ec <Paint_DrawRectangle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-3, compassY+19, compassX-3+8, compassY+19+12,
 800b9c6:	4bb2      	ldr	r3, [pc, #712]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	3b03      	subs	r3, #3
 800b9ce:	b298      	uxth	r0, r3
 800b9d0:	4bb0      	ldr	r3, [pc, #704]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3313      	adds	r3, #19
 800b9d8:	b299      	uxth	r1, r3
 800b9da:	4bad      	ldr	r3, [pc, #692]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3305      	adds	r3, #5
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	4bab      	ldr	r3, [pc, #684]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	331f      	adds	r3, #31
 800b9ec:	b29c      	uxth	r4, r3
 800b9ee:	4ba3      	ldr	r3, [pc, #652]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	2501      	movs	r5, #1
 800b9f8:	9502      	str	r5, [sp, #8]
 800b9fa:	2501      	movs	r5, #1
 800b9fc:	9501      	str	r5, [sp, #4]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	0023      	movs	r3, r4
 800ba02:	f7fd fcf3 	bl	80093ec <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-28, compassY-5, compassX-28+8, compassY-5+12,
 800ba06:	4ba2      	ldr	r3, [pc, #648]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	3b1c      	subs	r3, #28
 800ba0e:	b298      	uxth	r0, r3
 800ba10:	4ba0      	ldr	r3, [pc, #640]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b05      	subs	r3, #5
 800ba18:	b299      	uxth	r1, r3
 800ba1a:	4b9d      	ldr	r3, [pc, #628]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	3b14      	subs	r3, #20
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	4b9b      	ldr	r3, [pc, #620]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	b29c      	uxth	r4, r3
 800ba2e:	4b93      	ldr	r3, [pc, #588]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	2501      	movs	r5, #1
 800ba38:	9502      	str	r5, [sp, #8]
 800ba3a:	2501      	movs	r5, #1
 800ba3c:	9501      	str	r5, [sp, #4]
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	0023      	movs	r3, r4
 800ba42:	f7fd fcd3 	bl	80093ec <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX+20, compassY-5, compassX+20+8, compassY-5+12,
 800ba46:	4b92      	ldr	r3, [pc, #584]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3314      	adds	r3, #20
 800ba4e:	b298      	uxth	r0, r3
 800ba50:	4b90      	ldr	r3, [pc, #576]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	3b05      	subs	r3, #5
 800ba58:	b299      	uxth	r1, r3
 800ba5a:	4b8d      	ldr	r3, [pc, #564]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	331c      	adds	r3, #28
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	4b8b      	ldr	r3, [pc, #556]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	3307      	adds	r3, #7
 800ba6c:	b29c      	uxth	r4, r3
 800ba6e:	4b83      	ldr	r3, [pc, #524]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2501      	movs	r5, #1
 800ba78:	9502      	str	r5, [sp, #8]
 800ba7a:	2501      	movs	r5, #1
 800ba7c:	9501      	str	r5, [sp, #4]
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	0023      	movs	r3, r4
 800ba82:	f7fd fcb3 	bl	80093ec <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			//										INDEX
			Paint_DrawChar(compassX - 3, compassY - 30, 'N', &Font12,
 800ba86:	4b82      	ldr	r3, [pc, #520]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	3b03      	subs	r3, #3
 800ba8e:	b298      	uxth	r0, r3
 800ba90:	4b80      	ldr	r3, [pc, #512]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	3b1e      	subs	r3, #30
 800ba98:	b299      	uxth	r1, r3
 800ba9a:	4b77      	ldr	r3, [pc, #476]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4a76      	ldr	r2, [pc, #472]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800baa4:	7812      	ldrb	r2, [r2, #0]
 800baa6:	b2d2      	uxtb	r2, r2
 800baa8:	b292      	uxth	r2, r2
 800baaa:	4c7b      	ldr	r4, [pc, #492]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800baac:	9201      	str	r2, [sp, #4]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	0023      	movs	r3, r4
 800bab2:	224e      	movs	r2, #78	; 0x4e
 800bab4:	f7fd ffb8 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 3, compassY + 19, 'S', &Font12,
 800bab8:	4b75      	ldr	r3, [pc, #468]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b03      	subs	r3, #3
 800bac0:	b298      	uxth	r0, r3
 800bac2:	4b74      	ldr	r3, [pc, #464]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	3313      	adds	r3, #19
 800baca:	b299      	uxth	r1, r3
 800bacc:	4b6a      	ldr	r3, [pc, #424]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	4a69      	ldr	r2, [pc, #420]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bad6:	7812      	ldrb	r2, [r2, #0]
 800bad8:	b2d2      	uxtb	r2, r2
 800bada:	b292      	uxth	r2, r2
 800badc:	4c6e      	ldr	r4, [pc, #440]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800bade:	9201      	str	r2, [sp, #4]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	0023      	movs	r3, r4
 800bae4:	2253      	movs	r2, #83	; 0x53
 800bae6:	f7fd ff9f 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 28, compassY - 5, 'W', &Font12,
 800baea:	4b69      	ldr	r3, [pc, #420]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	3b1c      	subs	r3, #28
 800baf2:	b298      	uxth	r0, r3
 800baf4:	4b67      	ldr	r3, [pc, #412]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	3b05      	subs	r3, #5
 800bafc:	b299      	uxth	r1, r3
 800bafe:	4b5e      	ldr	r3, [pc, #376]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4a5d      	ldr	r2, [pc, #372]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bb08:	7812      	ldrb	r2, [r2, #0]
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	b292      	uxth	r2, r2
 800bb0e:	4c62      	ldr	r4, [pc, #392]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800bb10:	9201      	str	r2, [sp, #4]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	0023      	movs	r3, r4
 800bb16:	2257      	movs	r2, #87	; 0x57
 800bb18:	f7fd ff86 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 20, compassY - 5, 'E', &Font12,
 800bb1c:	4b5c      	ldr	r3, [pc, #368]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	3314      	adds	r3, #20
 800bb24:	b298      	uxth	r0, r3
 800bb26:	4b5b      	ldr	r3, [pc, #364]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	3b05      	subs	r3, #5
 800bb2e:	b299      	uxth	r1, r3
 800bb30:	4b51      	ldr	r3, [pc, #324]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	4a50      	ldr	r2, [pc, #320]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bb3a:	7812      	ldrb	r2, [r2, #0]
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	b292      	uxth	r2, r2
 800bb40:	4c55      	ldr	r4, [pc, #340]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	0023      	movs	r3, r4
 800bb48:	2245      	movs	r2, #69	; 0x45
 800bb4a:	f7fd ff6d 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);

		}

		//										DIGITAL ALTIMETER UNIT
		if (showNaviDigital == 1) {
 800bb4e:	4b53      	ldr	r3, [pc, #332]	; (800bc9c <interfaceDrawLayer+0xc34>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d17c      	bne.n	800bc50 <interfaceDrawLayer+0xbe8>
			Paint_DrawChar(compassX + 38, compassY + 31, 'm', &Font12,
 800bb56:	4b4e      	ldr	r3, [pc, #312]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	3326      	adds	r3, #38	; 0x26
 800bb5e:	b298      	uxth	r0, r3
 800bb60:	4b4c      	ldr	r3, [pc, #304]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	331f      	adds	r3, #31
 800bb68:	b299      	uxth	r1, r3
 800bb6a:	4b43      	ldr	r3, [pc, #268]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	4a42      	ldr	r2, [pc, #264]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bb74:	7812      	ldrb	r2, [r2, #0]
 800bb76:	b2d2      	uxtb	r2, r2
 800bb78:	b292      	uxth	r2, r2
 800bb7a:	4c47      	ldr	r4, [pc, #284]	; (800bc98 <interfaceDrawLayer+0xc30>)
 800bb7c:	9201      	str	r2, [sp, #4]
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	0023      	movs	r3, r4
 800bb82:	226d      	movs	r2, #109	; 0x6d
 800bb84:	f7fd ff50 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);

			//										DIGITAL COMPASS INDEX

			Paint_DrawChar(compassX + 22, compassY + 1, 'N', &Font8,
 800bb88:	4b41      	ldr	r3, [pc, #260]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	3316      	adds	r3, #22
 800bb90:	b298      	uxth	r0, r3
 800bb92:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	3301      	adds	r3, #1
 800bb9a:	b299      	uxth	r1, r3
 800bb9c:	4b36      	ldr	r3, [pc, #216]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4a35      	ldr	r2, [pc, #212]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bba6:	7812      	ldrb	r2, [r2, #0]
 800bba8:	b2d2      	uxtb	r2, r2
 800bbaa:	b292      	uxth	r2, r2
 800bbac:	4c34      	ldr	r4, [pc, #208]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800bbae:	9201      	str	r2, [sp, #4]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	0023      	movs	r3, r4
 800bbb4:	224e      	movs	r2, #78	; 0x4e
 800bbb6:	f7fd ff37 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 22, compassY + 20, 'S', &Font8,
 800bbba:	4b35      	ldr	r3, [pc, #212]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3316      	adds	r3, #22
 800bbc2:	b298      	uxth	r0, r3
 800bbc4:	4b33      	ldr	r3, [pc, #204]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	3314      	adds	r3, #20
 800bbcc:	b299      	uxth	r1, r3
 800bbce:	4b2a      	ldr	r3, [pc, #168]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4a29      	ldr	r2, [pc, #164]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bbd8:	7812      	ldrb	r2, [r2, #0]
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	b292      	uxth	r2, r2
 800bbde:	4c28      	ldr	r4, [pc, #160]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800bbe0:	9201      	str	r2, [sp, #4]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	0023      	movs	r3, r4
 800bbe6:	2253      	movs	r2, #83	; 0x53
 800bbe8:	f7fd ff1e 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 2, compassY + 11, 'W', &Font8,
 800bbec:	4b28      	ldr	r3, [pc, #160]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	b298      	uxth	r0, r3
 800bbf6:	4b27      	ldr	r3, [pc, #156]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	330b      	adds	r3, #11
 800bbfe:	b299      	uxth	r1, r3
 800bc00:	4b1d      	ldr	r3, [pc, #116]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	4a1c      	ldr	r2, [pc, #112]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bc0a:	7812      	ldrb	r2, [r2, #0]
 800bc0c:	b2d2      	uxtb	r2, r2
 800bc0e:	b292      	uxth	r2, r2
 800bc10:	4c1b      	ldr	r4, [pc, #108]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800bc12:	9201      	str	r2, [sp, #4]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	0023      	movs	r3, r4
 800bc18:	2257      	movs	r2, #87	; 0x57
 800bc1a:	f7fd ff05 	bl	8009a28 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 40, compassY + 11, 'E', &Font8,
 800bc1e:	4b1c      	ldr	r3, [pc, #112]	; (800bc90 <interfaceDrawLayer+0xc28>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	3328      	adds	r3, #40	; 0x28
 800bc26:	b298      	uxth	r0, r3
 800bc28:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <interfaceDrawLayer+0xc2c>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	330b      	adds	r3, #11
 800bc30:	b299      	uxth	r1, r3
 800bc32:	4b11      	ldr	r3, [pc, #68]	; (800bc78 <interfaceDrawLayer+0xc10>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	4a10      	ldr	r2, [pc, #64]	; (800bc7c <interfaceDrawLayer+0xc14>)
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	b2d2      	uxtb	r2, r2
 800bc40:	b292      	uxth	r2, r2
 800bc42:	4c0f      	ldr	r4, [pc, #60]	; (800bc80 <interfaceDrawLayer+0xc18>)
 800bc44:	9201      	str	r2, [sp, #4]
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	0023      	movs	r3, r4
 800bc4a:	2245      	movs	r2, #69	; 0x45
 800bc4c:	f7fd feec 	bl	8009a28 <Paint_DrawChar>

		}

		//										BATTERY STATE INDEX

		if (showBatteryState == 1) {
 800bc50:	4b13      	ldr	r3, [pc, #76]	; (800bca0 <interfaceDrawLayer+0xc38>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d16f      	bne.n	800bd38 <interfaceDrawLayer+0xcd0>
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800bc58:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <interfaceDrawLayer+0xc3c>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	4b12      	ldr	r3, [pc, #72]	; (800bca8 <interfaceDrawLayer+0xc40>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	18d3      	adds	r3, r2, r3
 800bc66:	b298      	uxth	r0, r3
 800bc68:	4b10      	ldr	r3, [pc, #64]	; (800bcac <interfaceDrawLayer+0xc44>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b299      	uxth	r1, r3
 800bc6e:	e01f      	b.n	800bcb0 <interfaceDrawLayer+0xc48>
 800bc70:	2000064a 	.word	0x2000064a
 800bc74:	200003a2 	.word	0x200003a2
 800bc78:	20000605 	.word	0x20000605
 800bc7c:	20000293 	.word	0x20000293
 800bc80:	20000020 	.word	0x20000020
 800bc84:	08013d88 	.word	0x08013d88
 800bc88:	08013d90 	.word	0x08013d90
 800bc8c:	20000146 	.word	0x20000146
 800bc90:	20000625 	.word	0x20000625
 800bc94:	200003a4 	.word	0x200003a4
 800bc98:	20000008 	.word	0x20000008
 800bc9c:	20000565 	.word	0x20000565
 800bca0:	20000310 	.word	0x20000310
 800bca4:	200005f5 	.word	0x200005f5
 800bca8:	20000158 	.word	0x20000158
 800bcac:	20000650 	.word	0x20000650
					batteryStateStartY,
					batteryStateStartX + batteryPointerShift
 800bcb0:	4b3f      	ldr	r3, [pc, #252]	; (800bdb0 <interfaceDrawLayer+0xd48>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	4b3f      	ldr	r3, [pc, #252]	; (800bdb4 <interfaceDrawLayer+0xd4c>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	18d3      	adds	r3, r2, r3
 800bcbe:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800bcc0:	4b3d      	ldr	r3, [pc, #244]	; (800bdb8 <interfaceDrawLayer+0xd50>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	18d3      	adds	r3, r2, r3
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	4b3c      	ldr	r3, [pc, #240]	; (800bdbc <interfaceDrawLayer+0xd54>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	b29c      	uxth	r4, r3
 800bcd0:	4b3b      	ldr	r3, [pc, #236]	; (800bdc0 <interfaceDrawLayer+0xd58>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	2500      	movs	r5, #0
 800bcda:	9502      	str	r5, [sp, #8]
 800bcdc:	2502      	movs	r5, #2
 800bcde:	9501      	str	r5, [sp, #4]
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	0023      	movs	r3, r4
 800bce4:	f7fd f9ba 	bl	800905c <Paint_DrawLine>
							+ batteryStateIndexLength, batteryStateStartY,
					colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
			Paint_DrawLine(batteryStateStartX,
 800bce8:	4b31      	ldr	r3, [pc, #196]	; (800bdb0 <interfaceDrawLayer+0xd48>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b298      	uxth	r0, r3
 800bcee:	4b33      	ldr	r3, [pc, #204]	; (800bdbc <interfaceDrawLayer+0xd54>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	4b2f      	ldr	r3, [pc, #188]	; (800bdb4 <interfaceDrawLayer+0xd4c>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	18d3      	adds	r3, r2, r3
 800bcfc:	b299      	uxth	r1, r3
 800bcfe:	4b2c      	ldr	r3, [pc, #176]	; (800bdb0 <interfaceDrawLayer+0xd48>)
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	b29c      	uxth	r4, r3
					batteryStateStartY + batteryPointerShift,
					batteryStateStartX,
					batteryStateStartY + batteryPointerShift
 800bd04:	4b2d      	ldr	r3, [pc, #180]	; (800bdbc <interfaceDrawLayer+0xd54>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	4b2a      	ldr	r3, [pc, #168]	; (800bdb4 <interfaceDrawLayer+0xd4c>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	18d3      	adds	r3, r2, r3
 800bd12:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX,
 800bd14:	4b28      	ldr	r3, [pc, #160]	; (800bdb8 <interfaceDrawLayer+0xd50>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	18d3      	adds	r3, r2, r3
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	4b28      	ldr	r3, [pc, #160]	; (800bdc0 <interfaceDrawLayer+0xd58>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	2500      	movs	r5, #0
 800bd28:	9502      	str	r5, [sp, #8]
 800bd2a:	2502      	movs	r5, #2
 800bd2c:	9501      	str	r5, [sp, #4]
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	0013      	movs	r3, r2
 800bd32:	0022      	movs	r2, r4
 800bd34:	f7fd f992 	bl	800905c <Paint_DrawLine>
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		}

		//										TEMPERATURE UNIT

		if (showThermometer == 1) {
 800bd38:	4b22      	ldr	r3, [pc, #136]	; (800bdc4 <interfaceDrawLayer+0xd5c>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d12c      	bne.n	800bd9a <interfaceDrawLayer+0xd32>
			Paint_DrawCircle(temperatureX + 21, temperatureY + 4, 2, colorMain,
 800bd40:	4b21      	ldr	r3, [pc, #132]	; (800bdc8 <interfaceDrawLayer+0xd60>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	3315      	adds	r3, #21
 800bd48:	b298      	uxth	r0, r3
 800bd4a:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <interfaceDrawLayer+0xd64>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3304      	adds	r3, #4
 800bd52:	b299      	uxth	r1, r3
 800bd54:	4b1e      	ldr	r3, [pc, #120]	; (800bdd0 <interfaceDrawLayer+0xd68>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	9201      	str	r2, [sp, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	9200      	str	r2, [sp, #0]
 800bd64:	2202      	movs	r2, #2
 800bd66:	f7fd fc0d 	bl	8009584 <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawString_EN(temperatureX + 24, temperatureY, "C", &Font12,
 800bd6a:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <interfaceDrawLayer+0xd60>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	3318      	adds	r3, #24
 800bd72:	b298      	uxth	r0, r3
 800bd74:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <interfaceDrawLayer+0xd64>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	b299      	uxth	r1, r3
 800bd7a:	4b15      	ldr	r3, [pc, #84]	; (800bdd0 <interfaceDrawLayer+0xd68>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	4a0f      	ldr	r2, [pc, #60]	; (800bdc0 <interfaceDrawLayer+0xd58>)
 800bd84:	7812      	ldrb	r2, [r2, #0]
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	b292      	uxth	r2, r2
 800bd8a:	4d12      	ldr	r5, [pc, #72]	; (800bdd4 <interfaceDrawLayer+0xd6c>)
 800bd8c:	4c12      	ldr	r4, [pc, #72]	; (800bdd8 <interfaceDrawLayer+0xd70>)
 800bd8e:	9201      	str	r2, [sp, #4]
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	002b      	movs	r3, r5
 800bd94:	0022      	movs	r2, r4
 800bd96:	f7fd ff2b 	bl	8009bf0 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										CHRONO DECIMALS INDEX

		if (showChrono == 1) {
 800bd9a:	4b10      	ldr	r3, [pc, #64]	; (800bddc <interfaceDrawLayer+0xd74>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d001      	beq.n	800bda6 <interfaceDrawLayer+0xd3e>
 800bda2:	f000 fbf3 	bl	800c58c <interfaceDrawLayer+0x1524>
			for (uint8_t i = 0; i < 10; i++) {
 800bda6:	2316      	movs	r3, #22
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	2200      	movs	r2, #0
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	e102      	b.n	800bfb6 <interfaceDrawLayer+0xf4e>
 800bdb0:	200005f5 	.word	0x200005f5
 800bdb4:	20000158 	.word	0x20000158
 800bdb8:	20000598 	.word	0x20000598
 800bdbc:	20000650 	.word	0x20000650
 800bdc0:	20000605 	.word	0x20000605
 800bdc4:	200005ed 	.word	0x200005ed
 800bdc8:	2000057d 	.word	0x2000057d
 800bdcc:	200002c4 	.word	0x200002c4
 800bdd0:	20000293 	.word	0x20000293
 800bdd4:	20000008 	.word	0x20000008
 800bdd8:	08013d94 	.word	0x08013d94
 800bddc:	20000308 	.word	0x20000308

				Paint_DrawLine(
						cos(chronoDecimalsIndexAngle[i])
 800bde0:	2316      	movs	r3, #22
 800bde2:	18fb      	adds	r3, r7, r3
 800bde4:	781a      	ldrb	r2, [r3, #0]
 800bde6:	4bba      	ldr	r3, [pc, #744]	; (800c0d0 <interfaceDrawLayer+0x1068>)
 800bde8:	0092      	lsls	r2, r2, #2
 800bdea:	58d3      	ldr	r3, [r2, r3]
 800bdec:	1c18      	adds	r0, r3, #0
 800bdee:	f7f7 f921 	bl	8003034 <__aeabi_f2d>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	000b      	movs	r3, r1
 800bdf6:	0010      	movs	r0, r2
 800bdf8:	0019      	movs	r1, r3
 800bdfa:	f006 f92d 	bl	8012058 <cos>
 800bdfe:	0004      	movs	r4, r0
 800be00:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800be02:	4bb4      	ldr	r3, [pc, #720]	; (800c0d4 <interfaceDrawLayer+0x106c>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	001a      	movs	r2, r3
 800be08:	4bb3      	ldr	r3, [pc, #716]	; (800c0d8 <interfaceDrawLayer+0x1070>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	0018      	movs	r0, r3
 800be10:	f7f7 f8ba 	bl	8002f88 <__aeabi_i2d>
 800be14:	0002      	movs	r2, r0
 800be16:	000b      	movs	r3, r1
 800be18:	0020      	movs	r0, r4
 800be1a:	0029      	movs	r1, r5
 800be1c:	f7f6 fa62 	bl	80022e4 <__aeabi_dmul>
 800be20:	0002      	movs	r2, r0
 800be22:	000b      	movs	r3, r1
 800be24:	0014      	movs	r4, r2
 800be26:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800be28:	4bac      	ldr	r3, [pc, #688]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	0018      	movs	r0, r3
 800be2e:	f7f7 f8ab 	bl	8002f88 <__aeabi_i2d>
 800be32:	0002      	movs	r2, r0
 800be34:	000b      	movs	r3, r1
 800be36:	0020      	movs	r0, r4
 800be38:	0029      	movs	r1, r5
 800be3a:	f7f5 fae3 	bl	8001404 <__aeabi_dadd>
 800be3e:	0002      	movs	r2, r0
 800be40:	000b      	movs	r3, r1
				Paint_DrawLine(
 800be42:	0010      	movs	r0, r2
 800be44:	0019      	movs	r1, r3
 800be46:	f7f4 fbb7 	bl	80005b8 <__aeabi_d2uiz>
 800be4a:	0003      	movs	r3, r0
 800be4c:	b29e      	uxth	r6, r3
						sin(chronoDecimalsIndexAngle[i])
 800be4e:	2316      	movs	r3, #22
 800be50:	18fb      	adds	r3, r7, r3
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	4b9e      	ldr	r3, [pc, #632]	; (800c0d0 <interfaceDrawLayer+0x1068>)
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	58d3      	ldr	r3, [r2, r3]
 800be5a:	1c18      	adds	r0, r3, #0
 800be5c:	f7f7 f8ea 	bl	8003034 <__aeabi_f2d>
 800be60:	0002      	movs	r2, r0
 800be62:	000b      	movs	r3, r1
 800be64:	0010      	movs	r0, r2
 800be66:	0019      	movs	r1, r3
 800be68:	f006 f938 	bl	80120dc <sin>
 800be6c:	0004      	movs	r4, r0
 800be6e:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800be70:	4b98      	ldr	r3, [pc, #608]	; (800c0d4 <interfaceDrawLayer+0x106c>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	001a      	movs	r2, r3
 800be76:	4b98      	ldr	r3, [pc, #608]	; (800c0d8 <interfaceDrawLayer+0x1070>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	0018      	movs	r0, r3
 800be7e:	f7f7 f883 	bl	8002f88 <__aeabi_i2d>
 800be82:	0002      	movs	r2, r0
 800be84:	000b      	movs	r3, r1
 800be86:	0020      	movs	r0, r4
 800be88:	0029      	movs	r1, r5
 800be8a:	f7f6 fa2b 	bl	80022e4 <__aeabi_dmul>
 800be8e:	0002      	movs	r2, r0
 800be90:	000b      	movs	r3, r1
 800be92:	0014      	movs	r4, r2
 800be94:	001d      	movs	r5, r3
								+ chronoDecimalsStartY,
 800be96:	4b92      	ldr	r3, [pc, #584]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	0018      	movs	r0, r3
 800be9c:	f7f7 f874 	bl	8002f88 <__aeabi_i2d>
 800bea0:	0002      	movs	r2, r0
 800bea2:	000b      	movs	r3, r1
 800bea4:	0020      	movs	r0, r4
 800bea6:	0029      	movs	r1, r5
 800bea8:	f7f5 faac 	bl	8001404 <__aeabi_dadd>
 800beac:	0002      	movs	r2, r0
 800beae:	000b      	movs	r3, r1
				Paint_DrawLine(
 800beb0:	0010      	movs	r0, r2
 800beb2:	0019      	movs	r1, r3
 800beb4:	f7f4 fb80 	bl	80005b8 <__aeabi_d2uiz>
 800beb8:	0003      	movs	r3, r0
 800beba:	b29a      	uxth	r2, r3
 800bebc:	4690      	mov	r8, r2

						cos(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800bebe:	2316      	movs	r3, #22
 800bec0:	18fb      	adds	r3, r7, r3
 800bec2:	781a      	ldrb	r2, [r3, #0]
 800bec4:	4b82      	ldr	r3, [pc, #520]	; (800c0d0 <interfaceDrawLayer+0x1068>)
 800bec6:	0092      	lsls	r2, r2, #2
 800bec8:	58d3      	ldr	r3, [r2, r3]
 800beca:	1c18      	adds	r0, r3, #0
 800becc:	f7f7 f8b2 	bl	8003034 <__aeabi_f2d>
 800bed0:	0002      	movs	r2, r0
 800bed2:	000b      	movs	r3, r1
 800bed4:	0010      	movs	r0, r2
 800bed6:	0019      	movs	r1, r3
 800bed8:	f006 f8be 	bl	8012058 <cos>
 800bedc:	0004      	movs	r4, r0
 800bede:	000d      	movs	r5, r1
 800bee0:	4b7c      	ldr	r3, [pc, #496]	; (800c0d4 <interfaceDrawLayer+0x106c>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	0018      	movs	r0, r3
 800bee6:	f7f7 f84f 	bl	8002f88 <__aeabi_i2d>
 800beea:	0002      	movs	r2, r0
 800beec:	000b      	movs	r3, r1
 800beee:	0020      	movs	r0, r4
 800bef0:	0029      	movs	r1, r5
 800bef2:	f7f6 f9f7 	bl	80022e4 <__aeabi_dmul>
 800bef6:	0002      	movs	r2, r0
 800bef8:	000b      	movs	r3, r1
 800befa:	0014      	movs	r4, r2
 800befc:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800befe:	4b77      	ldr	r3, [pc, #476]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	0018      	movs	r0, r3
 800bf04:	f7f7 f840 	bl	8002f88 <__aeabi_i2d>
 800bf08:	0002      	movs	r2, r0
 800bf0a:	000b      	movs	r3, r1
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	0029      	movs	r1, r5
 800bf10:	f7f5 fa78 	bl	8001404 <__aeabi_dadd>
 800bf14:	0002      	movs	r2, r0
 800bf16:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bf18:	0010      	movs	r0, r2
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	f7f4 fb4c 	bl	80005b8 <__aeabi_d2uiz>
 800bf20:	0003      	movs	r3, r0
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	4691      	mov	r9, r2
						sin(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800bf26:	2316      	movs	r3, #22
 800bf28:	18fb      	adds	r3, r7, r3
 800bf2a:	781a      	ldrb	r2, [r3, #0]
 800bf2c:	4b68      	ldr	r3, [pc, #416]	; (800c0d0 <interfaceDrawLayer+0x1068>)
 800bf2e:	0092      	lsls	r2, r2, #2
 800bf30:	58d3      	ldr	r3, [r2, r3]
 800bf32:	1c18      	adds	r0, r3, #0
 800bf34:	f7f7 f87e 	bl	8003034 <__aeabi_f2d>
 800bf38:	0002      	movs	r2, r0
 800bf3a:	000b      	movs	r3, r1
 800bf3c:	0010      	movs	r0, r2
 800bf3e:	0019      	movs	r1, r3
 800bf40:	f006 f8cc 	bl	80120dc <sin>
 800bf44:	0004      	movs	r4, r0
 800bf46:	000d      	movs	r5, r1
 800bf48:	4b62      	ldr	r3, [pc, #392]	; (800c0d4 <interfaceDrawLayer+0x106c>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	f7f7 f81b 	bl	8002f88 <__aeabi_i2d>
 800bf52:	0002      	movs	r2, r0
 800bf54:	000b      	movs	r3, r1
 800bf56:	0020      	movs	r0, r4
 800bf58:	0029      	movs	r1, r5
 800bf5a:	f7f6 f9c3 	bl	80022e4 <__aeabi_dmul>
 800bf5e:	0002      	movs	r2, r0
 800bf60:	000b      	movs	r3, r1
 800bf62:	0014      	movs	r4, r2
 800bf64:	001d      	movs	r5, r3
								+ chronoDecimalsStartY, colorMain,
 800bf66:	4b5e      	ldr	r3, [pc, #376]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f7f7 f80c 	bl	8002f88 <__aeabi_i2d>
 800bf70:	0002      	movs	r2, r0
 800bf72:	000b      	movs	r3, r1
 800bf74:	0020      	movs	r0, r4
 800bf76:	0029      	movs	r1, r5
 800bf78:	f7f5 fa44 	bl	8001404 <__aeabi_dadd>
 800bf7c:	0002      	movs	r2, r0
 800bf7e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800bf80:	0010      	movs	r0, r2
 800bf82:	0019      	movs	r1, r3
 800bf84:	f7f4 fb18 	bl	80005b8 <__aeabi_d2uiz>
 800bf88:	0003      	movs	r3, r0
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	4b55      	ldr	r3, [pc, #340]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	2100      	movs	r1, #0
 800bf96:	9102      	str	r1, [sp, #8]
 800bf98:	2101      	movs	r1, #1
 800bf9a:	9101      	str	r1, [sp, #4]
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	0013      	movs	r3, r2
 800bfa0:	464a      	mov	r2, r9
 800bfa2:	4641      	mov	r1, r8
 800bfa4:	0030      	movs	r0, r6
 800bfa6:	f7fd f859 	bl	800905c <Paint_DrawLine>
			for (uint8_t i = 0; i < 10; i++) {
 800bfaa:	2116      	movs	r1, #22
 800bfac:	187b      	adds	r3, r7, r1
 800bfae:	781a      	ldrb	r2, [r3, #0]
 800bfb0:	187b      	adds	r3, r7, r1
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	2316      	movs	r3, #22
 800bfb8:	18fb      	adds	r3, r7, r3
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	d800      	bhi.n	800bfc2 <interfaceDrawLayer+0xf5a>
 800bfc0:	e70e      	b.n	800bde0 <interfaceDrawLayer+0xd78>
						DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			}

			//										CHRONO DECIMALS DIGITS
			Paint_DrawString_EN(chronoDecimalsStartX - 4,
 800bfc2:	4b46      	ldr	r3, [pc, #280]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	3b04      	subs	r3, #4
 800bfca:	b298      	uxth	r0, r3
 800bfcc:	4b44      	ldr	r3, [pc, #272]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	3b18      	subs	r3, #24
 800bfd4:	b299      	uxth	r1, r3
 800bfd6:	4b43      	ldr	r3, [pc, #268]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4a42      	ldr	r2, [pc, #264]	; (800c0e8 <interfaceDrawLayer+0x1080>)
 800bfe0:	7812      	ldrb	r2, [r2, #0]
 800bfe2:	b2d2      	uxtb	r2, r2
 800bfe4:	b292      	uxth	r2, r2
 800bfe6:	4d41      	ldr	r5, [pc, #260]	; (800c0ec <interfaceDrawLayer+0x1084>)
 800bfe8:	4c41      	ldr	r4, [pc, #260]	; (800c0f0 <interfaceDrawLayer+0x1088>)
 800bfea:	9201      	str	r2, [sp, #4]
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	002b      	movs	r3, r5
 800bff0:	0022      	movs	r2, r4
 800bff2:	f7fd fdfd 	bl	8009bf0 <Paint_DrawString_EN>
					chronoDecimalsStartY - 24, "0", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 12,
 800bff6:	4b39      	ldr	r3, [pc, #228]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	330c      	adds	r3, #12
 800bffe:	b298      	uxth	r0, r3
 800c000:	4b37      	ldr	r3, [pc, #220]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b0c      	subs	r3, #12
 800c008:	b299      	uxth	r1, r3
 800c00a:	4b36      	ldr	r3, [pc, #216]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	b29b      	uxth	r3, r3
 800c012:	4a35      	ldr	r2, [pc, #212]	; (800c0e8 <interfaceDrawLayer+0x1080>)
 800c014:	7812      	ldrb	r2, [r2, #0]
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	b292      	uxth	r2, r2
 800c01a:	4d34      	ldr	r5, [pc, #208]	; (800c0ec <interfaceDrawLayer+0x1084>)
 800c01c:	4c35      	ldr	r4, [pc, #212]	; (800c0f4 <interfaceDrawLayer+0x108c>)
 800c01e:	9201      	str	r2, [sp, #4]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	002b      	movs	r3, r5
 800c024:	0022      	movs	r2, r4
 800c026:	f7fd fde3 	bl	8009bf0 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "2", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 6,
 800c02a:	4b2c      	ldr	r3, [pc, #176]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3306      	adds	r3, #6
 800c032:	b298      	uxth	r0, r3
 800c034:	4b2a      	ldr	r3, [pc, #168]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	3306      	adds	r3, #6
 800c03c:	b299      	uxth	r1, r3
 800c03e:	4b29      	ldr	r3, [pc, #164]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	b2db      	uxtb	r3, r3
 800c044:	b29b      	uxth	r3, r3
 800c046:	4a28      	ldr	r2, [pc, #160]	; (800c0e8 <interfaceDrawLayer+0x1080>)
 800c048:	7812      	ldrb	r2, [r2, #0]
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	b292      	uxth	r2, r2
 800c04e:	4d27      	ldr	r5, [pc, #156]	; (800c0ec <interfaceDrawLayer+0x1084>)
 800c050:	4c29      	ldr	r4, [pc, #164]	; (800c0f8 <interfaceDrawLayer+0x1090>)
 800c052:	9201      	str	r2, [sp, #4]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	002b      	movs	r3, r5
 800c058:	0022      	movs	r2, r4
 800c05a:	f7fd fdc9 	bl	8009bf0 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "4", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 14,
 800c05e:	4b1f      	ldr	r3, [pc, #124]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b29b      	uxth	r3, r3
 800c064:	3b0e      	subs	r3, #14
 800c066:	b298      	uxth	r0, r3
 800c068:	4b1d      	ldr	r3, [pc, #116]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	3306      	adds	r3, #6
 800c070:	b299      	uxth	r1, r3
 800c072:	4b1c      	ldr	r3, [pc, #112]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	b29b      	uxth	r3, r3
 800c07a:	4a1b      	ldr	r2, [pc, #108]	; (800c0e8 <interfaceDrawLayer+0x1080>)
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	b2d2      	uxtb	r2, r2
 800c080:	b292      	uxth	r2, r2
 800c082:	4d1a      	ldr	r5, [pc, #104]	; (800c0ec <interfaceDrawLayer+0x1084>)
 800c084:	4c1d      	ldr	r4, [pc, #116]	; (800c0fc <interfaceDrawLayer+0x1094>)
 800c086:	9201      	str	r2, [sp, #4]
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	002b      	movs	r3, r5
 800c08c:	0022      	movs	r2, r4
 800c08e:	f7fd fdaf 	bl	8009bf0 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "6", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 18,
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <interfaceDrawLayer+0x1074>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	b29b      	uxth	r3, r3
 800c098:	3b12      	subs	r3, #18
 800c09a:	b298      	uxth	r0, r3
 800c09c:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <interfaceDrawLayer+0x1078>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	3b0c      	subs	r3, #12
 800c0a4:	b299      	uxth	r1, r3
 800c0a6:	4b0f      	ldr	r3, [pc, #60]	; (800c0e4 <interfaceDrawLayer+0x107c>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4a0e      	ldr	r2, [pc, #56]	; (800c0e8 <interfaceDrawLayer+0x1080>)
 800c0b0:	7812      	ldrb	r2, [r2, #0]
 800c0b2:	b2d2      	uxtb	r2, r2
 800c0b4:	b292      	uxth	r2, r2
 800c0b6:	4d0d      	ldr	r5, [pc, #52]	; (800c0ec <interfaceDrawLayer+0x1084>)
 800c0b8:	4c11      	ldr	r4, [pc, #68]	; (800c100 <interfaceDrawLayer+0x1098>)
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	002b      	movs	r3, r5
 800c0c0:	0022      	movs	r2, r4
 800c0c2:	f7fd fd95 	bl	8009bf0 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "8", &Font12, colorMain,
					colorSecond);

			//										CHRONO MINUTES INDEX
			for (uint8_t i = 0; i < 30; i++) {
 800c0c6:	2315      	movs	r3, #21
 800c0c8:	18fb      	adds	r3, r7, r3
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	e1f6      	b.n	800c4be <interfaceDrawLayer+0x1456>
 800c0d0:	200002d4 	.word	0x200002d4
 800c0d4:	20000128 	.word	0x20000128
 800c0d8:	2000056a 	.word	0x2000056a
 800c0dc:	20000599 	.word	0x20000599
 800c0e0:	2000059a 	.word	0x2000059a
 800c0e4:	20000293 	.word	0x20000293
 800c0e8:	20000605 	.word	0x20000605
 800c0ec:	20000008 	.word	0x20000008
 800c0f0:	08013d98 	.word	0x08013d98
 800c0f4:	08013d9c 	.word	0x08013d9c
 800c0f8:	08013da0 	.word	0x08013da0
 800c0fc:	08013da4 	.word	0x08013da4
 800c100:	08013da8 	.word	0x08013da8

				Paint_DrawLine(
						cos(chronoMinutesIndexAngle[i])
 800c104:	2315      	movs	r3, #21
 800c106:	18fb      	adds	r3, r7, r3
 800c108:	781a      	ldrb	r2, [r3, #0]
 800c10a:	4bfd      	ldr	r3, [pc, #1012]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c10c:	0092      	lsls	r2, r2, #2
 800c10e:	58d3      	ldr	r3, [r2, r3]
 800c110:	1c18      	adds	r0, r3, #0
 800c112:	f7f6 ff8f 	bl	8003034 <__aeabi_f2d>
 800c116:	0002      	movs	r2, r0
 800c118:	000b      	movs	r3, r1
 800c11a:	0010      	movs	r0, r2
 800c11c:	0019      	movs	r1, r3
 800c11e:	f005 ff9b 	bl	8012058 <cos>
 800c122:	0004      	movs	r4, r0
 800c124:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800c126:	4bf7      	ldr	r3, [pc, #988]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	001a      	movs	r2, r3
 800c12c:	4bf6      	ldr	r3, [pc, #984]	; (800c508 <interfaceDrawLayer+0x14a0>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	0018      	movs	r0, r3
 800c134:	f7f6 ff28 	bl	8002f88 <__aeabi_i2d>
 800c138:	0002      	movs	r2, r0
 800c13a:	000b      	movs	r3, r1
 800c13c:	0020      	movs	r0, r4
 800c13e:	0029      	movs	r1, r5
 800c140:	f7f6 f8d0 	bl	80022e4 <__aeabi_dmul>
 800c144:	0002      	movs	r2, r0
 800c146:	000b      	movs	r3, r1
 800c148:	0014      	movs	r4, r2
 800c14a:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800c14c:	4bef      	ldr	r3, [pc, #956]	; (800c50c <interfaceDrawLayer+0x14a4>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	0018      	movs	r0, r3
 800c152:	f7f6 ff19 	bl	8002f88 <__aeabi_i2d>
 800c156:	0002      	movs	r2, r0
 800c158:	000b      	movs	r3, r1
 800c15a:	0020      	movs	r0, r4
 800c15c:	0029      	movs	r1, r5
 800c15e:	f7f5 f951 	bl	8001404 <__aeabi_dadd>
 800c162:	0002      	movs	r2, r0
 800c164:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c166:	0010      	movs	r0, r2
 800c168:	0019      	movs	r1, r3
 800c16a:	f7f4 fa25 	bl	80005b8 <__aeabi_d2uiz>
 800c16e:	0003      	movs	r3, r0
 800c170:	b29e      	uxth	r6, r3
						sin(chronoMinutesIndexAngle[i])
 800c172:	2315      	movs	r3, #21
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	4be1      	ldr	r3, [pc, #900]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c17a:	0092      	lsls	r2, r2, #2
 800c17c:	58d3      	ldr	r3, [r2, r3]
 800c17e:	1c18      	adds	r0, r3, #0
 800c180:	f7f6 ff58 	bl	8003034 <__aeabi_f2d>
 800c184:	0002      	movs	r2, r0
 800c186:	000b      	movs	r3, r1
 800c188:	0010      	movs	r0, r2
 800c18a:	0019      	movs	r1, r3
 800c18c:	f005 ffa6 	bl	80120dc <sin>
 800c190:	0004      	movs	r4, r0
 800c192:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800c194:	4bdb      	ldr	r3, [pc, #876]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	001a      	movs	r2, r3
 800c19a:	4bdb      	ldr	r3, [pc, #876]	; (800c508 <interfaceDrawLayer+0x14a0>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f7f6 fef1 	bl	8002f88 <__aeabi_i2d>
 800c1a6:	0002      	movs	r2, r0
 800c1a8:	000b      	movs	r3, r1
 800c1aa:	0020      	movs	r0, r4
 800c1ac:	0029      	movs	r1, r5
 800c1ae:	f7f6 f899 	bl	80022e4 <__aeabi_dmul>
 800c1b2:	0002      	movs	r2, r0
 800c1b4:	000b      	movs	r3, r1
 800c1b6:	0014      	movs	r4, r2
 800c1b8:	001d      	movs	r5, r3
								+ chronoMinutesStartY,
 800c1ba:	4bd5      	ldr	r3, [pc, #852]	; (800c510 <interfaceDrawLayer+0x14a8>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f7f6 fee2 	bl	8002f88 <__aeabi_i2d>
 800c1c4:	0002      	movs	r2, r0
 800c1c6:	000b      	movs	r3, r1
 800c1c8:	0020      	movs	r0, r4
 800c1ca:	0029      	movs	r1, r5
 800c1cc:	f7f5 f91a 	bl	8001404 <__aeabi_dadd>
 800c1d0:	0002      	movs	r2, r0
 800c1d2:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c1d4:	0010      	movs	r0, r2
 800c1d6:	0019      	movs	r1, r3
 800c1d8:	f7f4 f9ee 	bl	80005b8 <__aeabi_d2uiz>
 800c1dc:	0003      	movs	r3, r0
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	4690      	mov	r8, r2

						cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800c1e2:	2315      	movs	r3, #21
 800c1e4:	18fb      	adds	r3, r7, r3
 800c1e6:	781a      	ldrb	r2, [r3, #0]
 800c1e8:	4bc5      	ldr	r3, [pc, #788]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c1ea:	0092      	lsls	r2, r2, #2
 800c1ec:	58d3      	ldr	r3, [r2, r3]
 800c1ee:	1c18      	adds	r0, r3, #0
 800c1f0:	f7f6 ff20 	bl	8003034 <__aeabi_f2d>
 800c1f4:	0002      	movs	r2, r0
 800c1f6:	000b      	movs	r3, r1
 800c1f8:	0010      	movs	r0, r2
 800c1fa:	0019      	movs	r1, r3
 800c1fc:	f005 ff2c 	bl	8012058 <cos>
 800c200:	0004      	movs	r4, r0
 800c202:	000d      	movs	r5, r1
 800c204:	4bbf      	ldr	r3, [pc, #764]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	0018      	movs	r0, r3
 800c20a:	f7f6 febd 	bl	8002f88 <__aeabi_i2d>
 800c20e:	0002      	movs	r2, r0
 800c210:	000b      	movs	r3, r1
 800c212:	0020      	movs	r0, r4
 800c214:	0029      	movs	r1, r5
 800c216:	f7f6 f865 	bl	80022e4 <__aeabi_dmul>
 800c21a:	0002      	movs	r2, r0
 800c21c:	000b      	movs	r3, r1
 800c21e:	0014      	movs	r4, r2
 800c220:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800c222:	4bba      	ldr	r3, [pc, #744]	; (800c50c <interfaceDrawLayer+0x14a4>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	0018      	movs	r0, r3
 800c228:	f7f6 feae 	bl	8002f88 <__aeabi_i2d>
 800c22c:	0002      	movs	r2, r0
 800c22e:	000b      	movs	r3, r1
 800c230:	0020      	movs	r0, r4
 800c232:	0029      	movs	r1, r5
 800c234:	f7f5 f8e6 	bl	8001404 <__aeabi_dadd>
 800c238:	0002      	movs	r2, r0
 800c23a:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c23c:	0010      	movs	r0, r2
 800c23e:	0019      	movs	r1, r3
 800c240:	f7f4 f9ba 	bl	80005b8 <__aeabi_d2uiz>
 800c244:	0003      	movs	r3, r0
 800c246:	b29a      	uxth	r2, r3
 800c248:	4691      	mov	r9, r2
						sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800c24a:	2315      	movs	r3, #21
 800c24c:	18fb      	adds	r3, r7, r3
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	4bab      	ldr	r3, [pc, #684]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c252:	0092      	lsls	r2, r2, #2
 800c254:	58d3      	ldr	r3, [r2, r3]
 800c256:	1c18      	adds	r0, r3, #0
 800c258:	f7f6 feec 	bl	8003034 <__aeabi_f2d>
 800c25c:	0002      	movs	r2, r0
 800c25e:	000b      	movs	r3, r1
 800c260:	0010      	movs	r0, r2
 800c262:	0019      	movs	r1, r3
 800c264:	f005 ff3a 	bl	80120dc <sin>
 800c268:	0004      	movs	r4, r0
 800c26a:	000d      	movs	r5, r1
 800c26c:	4ba5      	ldr	r3, [pc, #660]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	0018      	movs	r0, r3
 800c272:	f7f6 fe89 	bl	8002f88 <__aeabi_i2d>
 800c276:	0002      	movs	r2, r0
 800c278:	000b      	movs	r3, r1
 800c27a:	0020      	movs	r0, r4
 800c27c:	0029      	movs	r1, r5
 800c27e:	f7f6 f831 	bl	80022e4 <__aeabi_dmul>
 800c282:	0002      	movs	r2, r0
 800c284:	000b      	movs	r3, r1
 800c286:	0014      	movs	r4, r2
 800c288:	001d      	movs	r5, r3
								+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800c28a:	4ba1      	ldr	r3, [pc, #644]	; (800c510 <interfaceDrawLayer+0x14a8>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	0018      	movs	r0, r3
 800c290:	f7f6 fe7a 	bl	8002f88 <__aeabi_i2d>
 800c294:	0002      	movs	r2, r0
 800c296:	000b      	movs	r3, r1
 800c298:	0020      	movs	r0, r4
 800c29a:	0029      	movs	r1, r5
 800c29c:	f7f5 f8b2 	bl	8001404 <__aeabi_dadd>
 800c2a0:	0002      	movs	r2, r0
 800c2a2:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c2a4:	0010      	movs	r0, r2
 800c2a6:	0019      	movs	r1, r3
 800c2a8:	f7f4 f986 	bl	80005b8 <__aeabi_d2uiz>
 800c2ac:	0003      	movs	r3, r0
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	4b98      	ldr	r3, [pc, #608]	; (800c514 <interfaceDrawLayer+0x14ac>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	9102      	str	r1, [sp, #8]
 800c2bc:	2101      	movs	r1, #1
 800c2be:	9101      	str	r1, [sp, #4]
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	0013      	movs	r3, r2
 800c2c4:	464a      	mov	r2, r9
 800c2c6:	4641      	mov	r1, r8
 800c2c8:	0030      	movs	r0, r6
 800c2ca:	f7fc fec7 	bl	800905c <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 5 == 0) {
 800c2ce:	2415      	movs	r4, #21
 800c2d0:	193b      	adds	r3, r7, r4
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2105      	movs	r1, #5
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f7f3 ffa2 	bl	8000220 <__aeabi_uidivmod>
 800c2dc:	000b      	movs	r3, r1
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d000      	beq.n	800c2e6 <interfaceDrawLayer+0x127e>
 800c2e4:	e0e5      	b.n	800c4b2 <interfaceDrawLayer+0x144a>
					Paint_DrawLine(
							cos(chronoMinutesIndexAngle[i])
 800c2e6:	193b      	adds	r3, r7, r4
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	4b85      	ldr	r3, [pc, #532]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c2ec:	0092      	lsls	r2, r2, #2
 800c2ee:	58d3      	ldr	r3, [r2, r3]
 800c2f0:	1c18      	adds	r0, r3, #0
 800c2f2:	f7f6 fe9f 	bl	8003034 <__aeabi_f2d>
 800c2f6:	0002      	movs	r2, r0
 800c2f8:	000b      	movs	r3, r1
 800c2fa:	0010      	movs	r0, r2
 800c2fc:	0019      	movs	r1, r3
 800c2fe:	f005 feab 	bl	8012058 <cos>
 800c302:	0004      	movs	r4, r0
 800c304:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800c306:	4b7f      	ldr	r3, [pc, #508]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	001a      	movs	r2, r3
 800c30c:	4b7e      	ldr	r3, [pc, #504]	; (800c508 <interfaceDrawLayer+0x14a0>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	3305      	adds	r3, #5
 800c312:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c314:	0018      	movs	r0, r3
 800c316:	f7f6 fe37 	bl	8002f88 <__aeabi_i2d>
 800c31a:	0002      	movs	r2, r0
 800c31c:	000b      	movs	r3, r1
 800c31e:	0020      	movs	r0, r4
 800c320:	0029      	movs	r1, r5
 800c322:	f7f5 ffdf 	bl	80022e4 <__aeabi_dmul>
 800c326:	0002      	movs	r2, r0
 800c328:	000b      	movs	r3, r1
 800c32a:	0014      	movs	r4, r2
 800c32c:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800c32e:	4b77      	ldr	r3, [pc, #476]	; (800c50c <interfaceDrawLayer+0x14a4>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	0018      	movs	r0, r3
 800c334:	f7f6 fe28 	bl	8002f88 <__aeabi_i2d>
 800c338:	0002      	movs	r2, r0
 800c33a:	000b      	movs	r3, r1
 800c33c:	0020      	movs	r0, r4
 800c33e:	0029      	movs	r1, r5
 800c340:	f7f5 f860 	bl	8001404 <__aeabi_dadd>
 800c344:	0002      	movs	r2, r0
 800c346:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c348:	0010      	movs	r0, r2
 800c34a:	0019      	movs	r1, r3
 800c34c:	f7f4 f934 	bl	80005b8 <__aeabi_d2uiz>
 800c350:	0003      	movs	r3, r0
 800c352:	b29e      	uxth	r6, r3
							sin(chronoMinutesIndexAngle[i])
 800c354:	2415      	movs	r4, #21
 800c356:	193b      	adds	r3, r7, r4
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	4b69      	ldr	r3, [pc, #420]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c35c:	0092      	lsls	r2, r2, #2
 800c35e:	58d3      	ldr	r3, [r2, r3]
 800c360:	1c18      	adds	r0, r3, #0
 800c362:	f7f6 fe67 	bl	8003034 <__aeabi_f2d>
 800c366:	0002      	movs	r2, r0
 800c368:	000b      	movs	r3, r1
 800c36a:	0010      	movs	r0, r2
 800c36c:	0019      	movs	r1, r3
 800c36e:	f005 feb5 	bl	80120dc <sin>
 800c372:	0004      	movs	r4, r0
 800c374:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800c376:	4b63      	ldr	r3, [pc, #396]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	001a      	movs	r2, r3
 800c37c:	4b62      	ldr	r3, [pc, #392]	; (800c508 <interfaceDrawLayer+0x14a0>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	3305      	adds	r3, #5
 800c382:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c384:	0018      	movs	r0, r3
 800c386:	f7f6 fdff 	bl	8002f88 <__aeabi_i2d>
 800c38a:	0002      	movs	r2, r0
 800c38c:	000b      	movs	r3, r1
 800c38e:	0020      	movs	r0, r4
 800c390:	0029      	movs	r1, r5
 800c392:	f7f5 ffa7 	bl	80022e4 <__aeabi_dmul>
 800c396:	0002      	movs	r2, r0
 800c398:	000b      	movs	r3, r1
 800c39a:	0014      	movs	r4, r2
 800c39c:	001d      	movs	r5, r3
									+ chronoMinutesStartY,
 800c39e:	4b5c      	ldr	r3, [pc, #368]	; (800c510 <interfaceDrawLayer+0x14a8>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	f7f6 fdf0 	bl	8002f88 <__aeabi_i2d>
 800c3a8:	0002      	movs	r2, r0
 800c3aa:	000b      	movs	r3, r1
 800c3ac:	0020      	movs	r0, r4
 800c3ae:	0029      	movs	r1, r5
 800c3b0:	f7f5 f828 	bl	8001404 <__aeabi_dadd>
 800c3b4:	0002      	movs	r2, r0
 800c3b6:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c3b8:	0010      	movs	r0, r2
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	f7f4 f8fc 	bl	80005b8 <__aeabi_d2uiz>
 800c3c0:	0003      	movs	r3, r0
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	4698      	mov	r8, r3

							cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800c3c6:	2415      	movs	r4, #21
 800c3c8:	193b      	adds	r3, r7, r4
 800c3ca:	781a      	ldrb	r2, [r3, #0]
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c3ce:	0092      	lsls	r2, r2, #2
 800c3d0:	58d3      	ldr	r3, [r2, r3]
 800c3d2:	1c18      	adds	r0, r3, #0
 800c3d4:	f7f6 fe2e 	bl	8003034 <__aeabi_f2d>
 800c3d8:	0002      	movs	r2, r0
 800c3da:	000b      	movs	r3, r1
 800c3dc:	0010      	movs	r0, r2
 800c3de:	0019      	movs	r1, r3
 800c3e0:	f005 fe3a 	bl	8012058 <cos>
 800c3e4:	0004      	movs	r4, r0
 800c3e6:	000d      	movs	r5, r1
 800c3e8:	4b46      	ldr	r3, [pc, #280]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f7f6 fdcb 	bl	8002f88 <__aeabi_i2d>
 800c3f2:	0002      	movs	r2, r0
 800c3f4:	000b      	movs	r3, r1
 800c3f6:	0020      	movs	r0, r4
 800c3f8:	0029      	movs	r1, r5
 800c3fa:	f7f5 ff73 	bl	80022e4 <__aeabi_dmul>
 800c3fe:	0002      	movs	r2, r0
 800c400:	000b      	movs	r3, r1
 800c402:	0014      	movs	r4, r2
 800c404:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800c406:	4b41      	ldr	r3, [pc, #260]	; (800c50c <interfaceDrawLayer+0x14a4>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	0018      	movs	r0, r3
 800c40c:	f7f6 fdbc 	bl	8002f88 <__aeabi_i2d>
 800c410:	0002      	movs	r2, r0
 800c412:	000b      	movs	r3, r1
 800c414:	0020      	movs	r0, r4
 800c416:	0029      	movs	r1, r5
 800c418:	f7f4 fff4 	bl	8001404 <__aeabi_dadd>
 800c41c:	0002      	movs	r2, r0
 800c41e:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c420:	0010      	movs	r0, r2
 800c422:	0019      	movs	r1, r3
 800c424:	f7f4 f8c8 	bl	80005b8 <__aeabi_d2uiz>
 800c428:	0003      	movs	r3, r0
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4699      	mov	r9, r3
							sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800c42e:	2415      	movs	r4, #21
 800c430:	193b      	adds	r3, r7, r4
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	4b32      	ldr	r3, [pc, #200]	; (800c500 <interfaceDrawLayer+0x1498>)
 800c436:	0092      	lsls	r2, r2, #2
 800c438:	58d3      	ldr	r3, [r2, r3]
 800c43a:	1c18      	adds	r0, r3, #0
 800c43c:	f7f6 fdfa 	bl	8003034 <__aeabi_f2d>
 800c440:	0002      	movs	r2, r0
 800c442:	000b      	movs	r3, r1
 800c444:	0010      	movs	r0, r2
 800c446:	0019      	movs	r1, r3
 800c448:	f005 fe48 	bl	80120dc <sin>
 800c44c:	0004      	movs	r4, r0
 800c44e:	000d      	movs	r5, r1
 800c450:	4b2c      	ldr	r3, [pc, #176]	; (800c504 <interfaceDrawLayer+0x149c>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	0018      	movs	r0, r3
 800c456:	f7f6 fd97 	bl	8002f88 <__aeabi_i2d>
 800c45a:	0002      	movs	r2, r0
 800c45c:	000b      	movs	r3, r1
 800c45e:	0020      	movs	r0, r4
 800c460:	0029      	movs	r1, r5
 800c462:	f7f5 ff3f 	bl	80022e4 <__aeabi_dmul>
 800c466:	0002      	movs	r2, r0
 800c468:	000b      	movs	r3, r1
 800c46a:	0014      	movs	r4, r2
 800c46c:	001d      	movs	r5, r3
									+ chronoMinutesStartY, colorMain,
 800c46e:	4b28      	ldr	r3, [pc, #160]	; (800c510 <interfaceDrawLayer+0x14a8>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	0018      	movs	r0, r3
 800c474:	f7f6 fd88 	bl	8002f88 <__aeabi_i2d>
 800c478:	0002      	movs	r2, r0
 800c47a:	000b      	movs	r3, r1
 800c47c:	0020      	movs	r0, r4
 800c47e:	0029      	movs	r1, r5
 800c480:	f7f4 ffc0 	bl	8001404 <__aeabi_dadd>
 800c484:	0002      	movs	r2, r0
 800c486:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c488:	0010      	movs	r0, r2
 800c48a:	0019      	movs	r1, r3
 800c48c:	f7f4 f894 	bl	80005b8 <__aeabi_d2uiz>
 800c490:	0003      	movs	r3, r0
 800c492:	b29a      	uxth	r2, r3
 800c494:	4b1f      	ldr	r3, [pc, #124]	; (800c514 <interfaceDrawLayer+0x14ac>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	2100      	movs	r1, #0
 800c49e:	9102      	str	r1, [sp, #8]
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	9101      	str	r1, [sp, #4]
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	0013      	movs	r3, r2
 800c4a8:	464a      	mov	r2, r9
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	0030      	movs	r0, r6
 800c4ae:	f7fc fdd5 	bl	800905c <Paint_DrawLine>
			for (uint8_t i = 0; i < 30; i++) {
 800c4b2:	2115      	movs	r1, #21
 800c4b4:	187b      	adds	r3, r7, r1
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	187b      	adds	r3, r7, r1
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	2315      	movs	r3, #21
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b1d      	cmp	r3, #29
 800c4c6:	d800      	bhi.n	800c4ca <interfaceDrawLayer+0x1462>
 800c4c8:	e61c      	b.n	800c104 <interfaceDrawLayer+0x109c>
				}
			}

			//										CHRONO MINUTES DIGITS

			Paint_DrawString_EN(chronoMinutesStartX - 8,
 800c4ca:	4b10      	ldr	r3, [pc, #64]	; (800c50c <interfaceDrawLayer+0x14a4>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	3b08      	subs	r3, #8
 800c4d2:	b298      	uxth	r0, r3
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <interfaceDrawLayer+0x14a8>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	3b14      	subs	r3, #20
 800c4dc:	b299      	uxth	r1, r3
 800c4de:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <interfaceDrawLayer+0x14ac>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	4a0c      	ldr	r2, [pc, #48]	; (800c518 <interfaceDrawLayer+0x14b0>)
 800c4e8:	7812      	ldrb	r2, [r2, #0]
 800c4ea:	b2d2      	uxtb	r2, r2
 800c4ec:	b292      	uxth	r2, r2
 800c4ee:	4d0b      	ldr	r5, [pc, #44]	; (800c51c <interfaceDrawLayer+0x14b4>)
 800c4f0:	4c0b      	ldr	r4, [pc, #44]	; (800c520 <interfaceDrawLayer+0x14b8>)
 800c4f2:	9201      	str	r2, [sp, #4]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	002b      	movs	r3, r5
 800c4f8:	0022      	movs	r2, r4
 800c4fa:	f7fd fb79 	bl	8009bf0 <Paint_DrawString_EN>
 800c4fe:	e011      	b.n	800c524 <interfaceDrawLayer+0x14bc>
 800c500:	200004ec 	.word	0x200004ec
 800c504:	20000128 	.word	0x20000128
 800c508:	2000030c 	.word	0x2000030c
 800c50c:	2000062e 	.word	0x2000062e
 800c510:	20000606 	.word	0x20000606
 800c514:	20000293 	.word	0x20000293
 800c518:	20000605 	.word	0x20000605
 800c51c:	20000008 	.word	0x20000008
 800c520:	08013dac 	.word	0x08013dac
					chronoMinutesStartY - 20, "30", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX + 2,
 800c524:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <interfaceDrawLayer+0x1538>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b29b      	uxth	r3, r3
 800c52a:	3302      	adds	r3, #2
 800c52c:	b298      	uxth	r0, r3
 800c52e:	4b1d      	ldr	r3, [pc, #116]	; (800c5a4 <interfaceDrawLayer+0x153c>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	b29b      	uxth	r3, r3
 800c534:	3302      	adds	r3, #2
 800c536:	b299      	uxth	r1, r3
 800c538:	4b1b      	ldr	r3, [pc, #108]	; (800c5a8 <interfaceDrawLayer+0x1540>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4a1a      	ldr	r2, [pc, #104]	; (800c5ac <interfaceDrawLayer+0x1544>)
 800c542:	7812      	ldrb	r2, [r2, #0]
 800c544:	b2d2      	uxtb	r2, r2
 800c546:	b292      	uxth	r2, r2
 800c548:	4d19      	ldr	r5, [pc, #100]	; (800c5b0 <interfaceDrawLayer+0x1548>)
 800c54a:	4c1a      	ldr	r4, [pc, #104]	; (800c5b4 <interfaceDrawLayer+0x154c>)
 800c54c:	9201      	str	r2, [sp, #4]
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	002b      	movs	r3, r5
 800c552:	0022      	movs	r2, r4
 800c554:	f7fd fb4c 	bl	8009bf0 <Paint_DrawString_EN>
					chronoMinutesStartY + 2, "10", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX - 18,
 800c558:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <interfaceDrawLayer+0x1538>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	3b12      	subs	r3, #18
 800c560:	b298      	uxth	r0, r3
 800c562:	4b10      	ldr	r3, [pc, #64]	; (800c5a4 <interfaceDrawLayer+0x153c>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	b29b      	uxth	r3, r3
 800c568:	3302      	adds	r3, #2
 800c56a:	b299      	uxth	r1, r3
 800c56c:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <interfaceDrawLayer+0x1540>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	b2db      	uxtb	r3, r3
 800c572:	b29b      	uxth	r3, r3
 800c574:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <interfaceDrawLayer+0x1544>)
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	b2d2      	uxtb	r2, r2
 800c57a:	b292      	uxth	r2, r2
 800c57c:	4d0c      	ldr	r5, [pc, #48]	; (800c5b0 <interfaceDrawLayer+0x1548>)
 800c57e:	4c0e      	ldr	r4, [pc, #56]	; (800c5b8 <interfaceDrawLayer+0x1550>)
 800c580:	9201      	str	r2, [sp, #4]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	002b      	movs	r3, r5
 800c586:	0022      	movs	r2, r4
 800c588:	f7fd fb32 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond);
		}

		//										SECONDS INDEX

		if (showSeconds == 1) {
 800c58c:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <interfaceDrawLayer+0x1554>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d000      	beq.n	800c596 <interfaceDrawLayer+0x152e>
 800c594:	e258      	b.n	800ca48 <interfaceDrawLayer+0x19e0>
			for (uint8_t i = 0; i < 12; i++) {
 800c596:	2314      	movs	r3, #20
 800c598:	18fb      	adds	r3, r7, r3
 800c59a:	2200      	movs	r2, #0
 800c59c:	701a      	strb	r2, [r3, #0]
 800c59e:	e1ec      	b.n	800c97a <interfaceDrawLayer+0x1912>
 800c5a0:	2000062e 	.word	0x2000062e
 800c5a4:	20000606 	.word	0x20000606
 800c5a8:	20000293 	.word	0x20000293
 800c5ac:	20000605 	.word	0x20000605
 800c5b0:	20000008 	.word	0x20000008
 800c5b4:	08013db0 	.word	0x08013db0
 800c5b8:	08013db4 	.word	0x08013db4
 800c5bc:	2000013a 	.word	0x2000013a

				Paint_DrawLine(
						cos(secondsIndexAngle[i])
 800c5c0:	2314      	movs	r3, #20
 800c5c2:	18fb      	adds	r3, r7, r3
 800c5c4:	781a      	ldrb	r2, [r3, #0]
 800c5c6:	4bfd      	ldr	r3, [pc, #1012]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	58d3      	ldr	r3, [r2, r3]
 800c5cc:	1c18      	adds	r0, r3, #0
 800c5ce:	f7f6 fd31 	bl	8003034 <__aeabi_f2d>
 800c5d2:	0002      	movs	r2, r0
 800c5d4:	000b      	movs	r3, r1
 800c5d6:	0010      	movs	r0, r2
 800c5d8:	0019      	movs	r1, r3
 800c5da:	f005 fd3d 	bl	8012058 <cos>
 800c5de:	0004      	movs	r4, r0
 800c5e0:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800c5e2:	4bf7      	ldr	r3, [pc, #988]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	001a      	movs	r2, r3
 800c5e8:	4bf6      	ldr	r3, [pc, #984]	; (800c9c4 <interfaceDrawLayer+0x195c>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	0018      	movs	r0, r3
 800c5f0:	f7f6 fcca 	bl	8002f88 <__aeabi_i2d>
 800c5f4:	0002      	movs	r2, r0
 800c5f6:	000b      	movs	r3, r1
 800c5f8:	0020      	movs	r0, r4
 800c5fa:	0029      	movs	r1, r5
 800c5fc:	f7f5 fe72 	bl	80022e4 <__aeabi_dmul>
 800c600:	0002      	movs	r2, r0
 800c602:	000b      	movs	r3, r1
 800c604:	0014      	movs	r4, r2
 800c606:	001d      	movs	r5, r3
								+ secondsStartX,
 800c608:	4bef      	ldr	r3, [pc, #956]	; (800c9c8 <interfaceDrawLayer+0x1960>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	0018      	movs	r0, r3
 800c60e:	f7f6 fcbb 	bl	8002f88 <__aeabi_i2d>
 800c612:	0002      	movs	r2, r0
 800c614:	000b      	movs	r3, r1
 800c616:	0020      	movs	r0, r4
 800c618:	0029      	movs	r1, r5
 800c61a:	f7f4 fef3 	bl	8001404 <__aeabi_dadd>
 800c61e:	0002      	movs	r2, r0
 800c620:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c622:	0010      	movs	r0, r2
 800c624:	0019      	movs	r1, r3
 800c626:	f7f3 ffc7 	bl	80005b8 <__aeabi_d2uiz>
 800c62a:	0003      	movs	r3, r0
 800c62c:	b29e      	uxth	r6, r3
						sin(secondsIndexAngle[i])
 800c62e:	2314      	movs	r3, #20
 800c630:	18fb      	adds	r3, r7, r3
 800c632:	781a      	ldrb	r2, [r3, #0]
 800c634:	4be1      	ldr	r3, [pc, #900]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	58d3      	ldr	r3, [r2, r3]
 800c63a:	1c18      	adds	r0, r3, #0
 800c63c:	f7f6 fcfa 	bl	8003034 <__aeabi_f2d>
 800c640:	0002      	movs	r2, r0
 800c642:	000b      	movs	r3, r1
 800c644:	0010      	movs	r0, r2
 800c646:	0019      	movs	r1, r3
 800c648:	f005 fd48 	bl	80120dc <sin>
 800c64c:	0004      	movs	r4, r0
 800c64e:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800c650:	4bdb      	ldr	r3, [pc, #876]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	001a      	movs	r2, r3
 800c656:	4bdb      	ldr	r3, [pc, #876]	; (800c9c4 <interfaceDrawLayer+0x195c>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	0018      	movs	r0, r3
 800c65e:	f7f6 fc93 	bl	8002f88 <__aeabi_i2d>
 800c662:	0002      	movs	r2, r0
 800c664:	000b      	movs	r3, r1
 800c666:	0020      	movs	r0, r4
 800c668:	0029      	movs	r1, r5
 800c66a:	f7f5 fe3b 	bl	80022e4 <__aeabi_dmul>
 800c66e:	0002      	movs	r2, r0
 800c670:	000b      	movs	r3, r1
 800c672:	0014      	movs	r4, r2
 800c674:	001d      	movs	r5, r3
								+ secondsStartY,
 800c676:	4bd5      	ldr	r3, [pc, #852]	; (800c9cc <interfaceDrawLayer+0x1964>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	0018      	movs	r0, r3
 800c67c:	f7f6 fc84 	bl	8002f88 <__aeabi_i2d>
 800c680:	0002      	movs	r2, r0
 800c682:	000b      	movs	r3, r1
 800c684:	0020      	movs	r0, r4
 800c686:	0029      	movs	r1, r5
 800c688:	f7f4 febc 	bl	8001404 <__aeabi_dadd>
 800c68c:	0002      	movs	r2, r0
 800c68e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c690:	0010      	movs	r0, r2
 800c692:	0019      	movs	r1, r3
 800c694:	f7f3 ff90 	bl	80005b8 <__aeabi_d2uiz>
 800c698:	0003      	movs	r3, r0
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	4690      	mov	r8, r2

						cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800c69e:	2314      	movs	r3, #20
 800c6a0:	18fb      	adds	r3, r7, r3
 800c6a2:	781a      	ldrb	r2, [r3, #0]
 800c6a4:	4bc5      	ldr	r3, [pc, #788]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c6a6:	0092      	lsls	r2, r2, #2
 800c6a8:	58d3      	ldr	r3, [r2, r3]
 800c6aa:	1c18      	adds	r0, r3, #0
 800c6ac:	f7f6 fcc2 	bl	8003034 <__aeabi_f2d>
 800c6b0:	0002      	movs	r2, r0
 800c6b2:	000b      	movs	r3, r1
 800c6b4:	0010      	movs	r0, r2
 800c6b6:	0019      	movs	r1, r3
 800c6b8:	f005 fcce 	bl	8012058 <cos>
 800c6bc:	0004      	movs	r4, r0
 800c6be:	000d      	movs	r5, r1
 800c6c0:	4bbf      	ldr	r3, [pc, #764]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f7f6 fc5f 	bl	8002f88 <__aeabi_i2d>
 800c6ca:	0002      	movs	r2, r0
 800c6cc:	000b      	movs	r3, r1
 800c6ce:	0020      	movs	r0, r4
 800c6d0:	0029      	movs	r1, r5
 800c6d2:	f7f5 fe07 	bl	80022e4 <__aeabi_dmul>
 800c6d6:	0002      	movs	r2, r0
 800c6d8:	000b      	movs	r3, r1
 800c6da:	0014      	movs	r4, r2
 800c6dc:	001d      	movs	r5, r3
								+ secondsStartX,
 800c6de:	4bba      	ldr	r3, [pc, #744]	; (800c9c8 <interfaceDrawLayer+0x1960>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	0018      	movs	r0, r3
 800c6e4:	f7f6 fc50 	bl	8002f88 <__aeabi_i2d>
 800c6e8:	0002      	movs	r2, r0
 800c6ea:	000b      	movs	r3, r1
 800c6ec:	0020      	movs	r0, r4
 800c6ee:	0029      	movs	r1, r5
 800c6f0:	f7f4 fe88 	bl	8001404 <__aeabi_dadd>
 800c6f4:	0002      	movs	r2, r0
 800c6f6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c6f8:	0010      	movs	r0, r2
 800c6fa:	0019      	movs	r1, r3
 800c6fc:	f7f3 ff5c 	bl	80005b8 <__aeabi_d2uiz>
 800c700:	0003      	movs	r3, r0
 800c702:	b29a      	uxth	r2, r3
 800c704:	4691      	mov	r9, r2
						sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800c706:	2314      	movs	r3, #20
 800c708:	18fb      	adds	r3, r7, r3
 800c70a:	781a      	ldrb	r2, [r3, #0]
 800c70c:	4bab      	ldr	r3, [pc, #684]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c70e:	0092      	lsls	r2, r2, #2
 800c710:	58d3      	ldr	r3, [r2, r3]
 800c712:	1c18      	adds	r0, r3, #0
 800c714:	f7f6 fc8e 	bl	8003034 <__aeabi_f2d>
 800c718:	0002      	movs	r2, r0
 800c71a:	000b      	movs	r3, r1
 800c71c:	0010      	movs	r0, r2
 800c71e:	0019      	movs	r1, r3
 800c720:	f005 fcdc 	bl	80120dc <sin>
 800c724:	0004      	movs	r4, r0
 800c726:	000d      	movs	r5, r1
 800c728:	4ba5      	ldr	r3, [pc, #660]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	0018      	movs	r0, r3
 800c72e:	f7f6 fc2b 	bl	8002f88 <__aeabi_i2d>
 800c732:	0002      	movs	r2, r0
 800c734:	000b      	movs	r3, r1
 800c736:	0020      	movs	r0, r4
 800c738:	0029      	movs	r1, r5
 800c73a:	f7f5 fdd3 	bl	80022e4 <__aeabi_dmul>
 800c73e:	0002      	movs	r2, r0
 800c740:	000b      	movs	r3, r1
 800c742:	0014      	movs	r4, r2
 800c744:	001d      	movs	r5, r3
								+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800c746:	4ba1      	ldr	r3, [pc, #644]	; (800c9cc <interfaceDrawLayer+0x1964>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	0018      	movs	r0, r3
 800c74c:	f7f6 fc1c 	bl	8002f88 <__aeabi_i2d>
 800c750:	0002      	movs	r2, r0
 800c752:	000b      	movs	r3, r1
 800c754:	0020      	movs	r0, r4
 800c756:	0029      	movs	r1, r5
 800c758:	f7f4 fe54 	bl	8001404 <__aeabi_dadd>
 800c75c:	0002      	movs	r2, r0
 800c75e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800c760:	0010      	movs	r0, r2
 800c762:	0019      	movs	r1, r3
 800c764:	f7f3 ff28 	bl	80005b8 <__aeabi_d2uiz>
 800c768:	0003      	movs	r3, r0
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	4b98      	ldr	r3, [pc, #608]	; (800c9d0 <interfaceDrawLayer+0x1968>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	b29b      	uxth	r3, r3
 800c774:	2100      	movs	r1, #0
 800c776:	9102      	str	r1, [sp, #8]
 800c778:	2101      	movs	r1, #1
 800c77a:	9101      	str	r1, [sp, #4]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	0013      	movs	r3, r2
 800c780:	464a      	mov	r2, r9
 800c782:	4641      	mov	r1, r8
 800c784:	0030      	movs	r0, r6
 800c786:	f7fc fc69 	bl	800905c <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 3 == 0) {
 800c78a:	2414      	movs	r4, #20
 800c78c:	193b      	adds	r3, r7, r4
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2103      	movs	r1, #3
 800c792:	0018      	movs	r0, r3
 800c794:	f7f3 fd44 	bl	8000220 <__aeabi_uidivmod>
 800c798:	000b      	movs	r3, r1
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d000      	beq.n	800c7a2 <interfaceDrawLayer+0x173a>
 800c7a0:	e0e5      	b.n	800c96e <interfaceDrawLayer+0x1906>
					Paint_DrawLine(
							cos(secondsIndexAngle[i])
 800c7a2:	193b      	adds	r3, r7, r4
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	4b85      	ldr	r3, [pc, #532]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c7a8:	0092      	lsls	r2, r2, #2
 800c7aa:	58d3      	ldr	r3, [r2, r3]
 800c7ac:	1c18      	adds	r0, r3, #0
 800c7ae:	f7f6 fc41 	bl	8003034 <__aeabi_f2d>
 800c7b2:	0002      	movs	r2, r0
 800c7b4:	000b      	movs	r3, r1
 800c7b6:	0010      	movs	r0, r2
 800c7b8:	0019      	movs	r1, r3
 800c7ba:	f005 fc4d 	bl	8012058 <cos>
 800c7be:	0004      	movs	r4, r0
 800c7c0:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800c7c2:	4b7f      	ldr	r3, [pc, #508]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	001a      	movs	r2, r3
 800c7c8:	4b7e      	ldr	r3, [pc, #504]	; (800c9c4 <interfaceDrawLayer+0x195c>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	3305      	adds	r3, #5
 800c7ce:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f7f6 fbd9 	bl	8002f88 <__aeabi_i2d>
 800c7d6:	0002      	movs	r2, r0
 800c7d8:	000b      	movs	r3, r1
 800c7da:	0020      	movs	r0, r4
 800c7dc:	0029      	movs	r1, r5
 800c7de:	f7f5 fd81 	bl	80022e4 <__aeabi_dmul>
 800c7e2:	0002      	movs	r2, r0
 800c7e4:	000b      	movs	r3, r1
 800c7e6:	0014      	movs	r4, r2
 800c7e8:	001d      	movs	r5, r3
									+ secondsStartX,
 800c7ea:	4b77      	ldr	r3, [pc, #476]	; (800c9c8 <interfaceDrawLayer+0x1960>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	f7f6 fbca 	bl	8002f88 <__aeabi_i2d>
 800c7f4:	0002      	movs	r2, r0
 800c7f6:	000b      	movs	r3, r1
 800c7f8:	0020      	movs	r0, r4
 800c7fa:	0029      	movs	r1, r5
 800c7fc:	f7f4 fe02 	bl	8001404 <__aeabi_dadd>
 800c800:	0002      	movs	r2, r0
 800c802:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c804:	0010      	movs	r0, r2
 800c806:	0019      	movs	r1, r3
 800c808:	f7f3 fed6 	bl	80005b8 <__aeabi_d2uiz>
 800c80c:	0003      	movs	r3, r0
 800c80e:	b29e      	uxth	r6, r3
							sin(secondsIndexAngle[i])
 800c810:	2414      	movs	r4, #20
 800c812:	193b      	adds	r3, r7, r4
 800c814:	781a      	ldrb	r2, [r3, #0]
 800c816:	4b69      	ldr	r3, [pc, #420]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c818:	0092      	lsls	r2, r2, #2
 800c81a:	58d3      	ldr	r3, [r2, r3]
 800c81c:	1c18      	adds	r0, r3, #0
 800c81e:	f7f6 fc09 	bl	8003034 <__aeabi_f2d>
 800c822:	0002      	movs	r2, r0
 800c824:	000b      	movs	r3, r1
 800c826:	0010      	movs	r0, r2
 800c828:	0019      	movs	r1, r3
 800c82a:	f005 fc57 	bl	80120dc <sin>
 800c82e:	0004      	movs	r4, r0
 800c830:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800c832:	4b63      	ldr	r3, [pc, #396]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	001a      	movs	r2, r3
 800c838:	4b62      	ldr	r3, [pc, #392]	; (800c9c4 <interfaceDrawLayer+0x195c>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	3305      	adds	r3, #5
 800c83e:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800c840:	0018      	movs	r0, r3
 800c842:	f7f6 fba1 	bl	8002f88 <__aeabi_i2d>
 800c846:	0002      	movs	r2, r0
 800c848:	000b      	movs	r3, r1
 800c84a:	0020      	movs	r0, r4
 800c84c:	0029      	movs	r1, r5
 800c84e:	f7f5 fd49 	bl	80022e4 <__aeabi_dmul>
 800c852:	0002      	movs	r2, r0
 800c854:	000b      	movs	r3, r1
 800c856:	0014      	movs	r4, r2
 800c858:	001d      	movs	r5, r3
									+ secondsStartY,
 800c85a:	4b5c      	ldr	r3, [pc, #368]	; (800c9cc <interfaceDrawLayer+0x1964>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	0018      	movs	r0, r3
 800c860:	f7f6 fb92 	bl	8002f88 <__aeabi_i2d>
 800c864:	0002      	movs	r2, r0
 800c866:	000b      	movs	r3, r1
 800c868:	0020      	movs	r0, r4
 800c86a:	0029      	movs	r1, r5
 800c86c:	f7f4 fdca 	bl	8001404 <__aeabi_dadd>
 800c870:	0002      	movs	r2, r0
 800c872:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c874:	0010      	movs	r0, r2
 800c876:	0019      	movs	r1, r3
 800c878:	f7f3 fe9e 	bl	80005b8 <__aeabi_d2uiz>
 800c87c:	0003      	movs	r3, r0
 800c87e:	b29b      	uxth	r3, r3
 800c880:	4698      	mov	r8, r3

							cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800c882:	2414      	movs	r4, #20
 800c884:	193b      	adds	r3, r7, r4
 800c886:	781a      	ldrb	r2, [r3, #0]
 800c888:	4b4c      	ldr	r3, [pc, #304]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c88a:	0092      	lsls	r2, r2, #2
 800c88c:	58d3      	ldr	r3, [r2, r3]
 800c88e:	1c18      	adds	r0, r3, #0
 800c890:	f7f6 fbd0 	bl	8003034 <__aeabi_f2d>
 800c894:	0002      	movs	r2, r0
 800c896:	000b      	movs	r3, r1
 800c898:	0010      	movs	r0, r2
 800c89a:	0019      	movs	r1, r3
 800c89c:	f005 fbdc 	bl	8012058 <cos>
 800c8a0:	0004      	movs	r4, r0
 800c8a2:	000d      	movs	r5, r1
 800c8a4:	4b46      	ldr	r3, [pc, #280]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f7f6 fb6d 	bl	8002f88 <__aeabi_i2d>
 800c8ae:	0002      	movs	r2, r0
 800c8b0:	000b      	movs	r3, r1
 800c8b2:	0020      	movs	r0, r4
 800c8b4:	0029      	movs	r1, r5
 800c8b6:	f7f5 fd15 	bl	80022e4 <__aeabi_dmul>
 800c8ba:	0002      	movs	r2, r0
 800c8bc:	000b      	movs	r3, r1
 800c8be:	0014      	movs	r4, r2
 800c8c0:	001d      	movs	r5, r3
									+ secondsStartX,
 800c8c2:	4b41      	ldr	r3, [pc, #260]	; (800c9c8 <interfaceDrawLayer+0x1960>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	f7f6 fb5e 	bl	8002f88 <__aeabi_i2d>
 800c8cc:	0002      	movs	r2, r0
 800c8ce:	000b      	movs	r3, r1
 800c8d0:	0020      	movs	r0, r4
 800c8d2:	0029      	movs	r1, r5
 800c8d4:	f7f4 fd96 	bl	8001404 <__aeabi_dadd>
 800c8d8:	0002      	movs	r2, r0
 800c8da:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c8dc:	0010      	movs	r0, r2
 800c8de:	0019      	movs	r1, r3
 800c8e0:	f7f3 fe6a 	bl	80005b8 <__aeabi_d2uiz>
 800c8e4:	0003      	movs	r3, r0
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4699      	mov	r9, r3
							sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800c8ea:	2414      	movs	r4, #20
 800c8ec:	193b      	adds	r3, r7, r4
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	4b32      	ldr	r3, [pc, #200]	; (800c9bc <interfaceDrawLayer+0x1954>)
 800c8f2:	0092      	lsls	r2, r2, #2
 800c8f4:	58d3      	ldr	r3, [r2, r3]
 800c8f6:	1c18      	adds	r0, r3, #0
 800c8f8:	f7f6 fb9c 	bl	8003034 <__aeabi_f2d>
 800c8fc:	0002      	movs	r2, r0
 800c8fe:	000b      	movs	r3, r1
 800c900:	0010      	movs	r0, r2
 800c902:	0019      	movs	r1, r3
 800c904:	f005 fbea 	bl	80120dc <sin>
 800c908:	0004      	movs	r4, r0
 800c90a:	000d      	movs	r5, r1
 800c90c:	4b2c      	ldr	r3, [pc, #176]	; (800c9c0 <interfaceDrawLayer+0x1958>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	0018      	movs	r0, r3
 800c912:	f7f6 fb39 	bl	8002f88 <__aeabi_i2d>
 800c916:	0002      	movs	r2, r0
 800c918:	000b      	movs	r3, r1
 800c91a:	0020      	movs	r0, r4
 800c91c:	0029      	movs	r1, r5
 800c91e:	f7f5 fce1 	bl	80022e4 <__aeabi_dmul>
 800c922:	0002      	movs	r2, r0
 800c924:	000b      	movs	r3, r1
 800c926:	0014      	movs	r4, r2
 800c928:	001d      	movs	r5, r3
									+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800c92a:	4b28      	ldr	r3, [pc, #160]	; (800c9cc <interfaceDrawLayer+0x1964>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	0018      	movs	r0, r3
 800c930:	f7f6 fb2a 	bl	8002f88 <__aeabi_i2d>
 800c934:	0002      	movs	r2, r0
 800c936:	000b      	movs	r3, r1
 800c938:	0020      	movs	r0, r4
 800c93a:	0029      	movs	r1, r5
 800c93c:	f7f4 fd62 	bl	8001404 <__aeabi_dadd>
 800c940:	0002      	movs	r2, r0
 800c942:	000b      	movs	r3, r1
					Paint_DrawLine(
 800c944:	0010      	movs	r0, r2
 800c946:	0019      	movs	r1, r3
 800c948:	f7f3 fe36 	bl	80005b8 <__aeabi_d2uiz>
 800c94c:	0003      	movs	r3, r0
 800c94e:	b29a      	uxth	r2, r3
 800c950:	4b1f      	ldr	r3, [pc, #124]	; (800c9d0 <interfaceDrawLayer+0x1968>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	b2db      	uxtb	r3, r3
 800c956:	b29b      	uxth	r3, r3
 800c958:	2100      	movs	r1, #0
 800c95a:	9102      	str	r1, [sp, #8]
 800c95c:	2101      	movs	r1, #1
 800c95e:	9101      	str	r1, [sp, #4]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	0013      	movs	r3, r2
 800c964:	464a      	mov	r2, r9
 800c966:	4641      	mov	r1, r8
 800c968:	0030      	movs	r0, r6
 800c96a:	f7fc fb77 	bl	800905c <Paint_DrawLine>
			for (uint8_t i = 0; i < 12; i++) {
 800c96e:	2114      	movs	r1, #20
 800c970:	187b      	adds	r3, r7, r1
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	187b      	adds	r3, r7, r1
 800c976:	3201      	adds	r2, #1
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	2314      	movs	r3, #20
 800c97c:	18fb      	adds	r3, r7, r3
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b0b      	cmp	r3, #11
 800c982:	d800      	bhi.n	800c986 <interfaceDrawLayer+0x191e>
 800c984:	e61c      	b.n	800c5c0 <interfaceDrawLayer+0x1558>
				}
			}

			//										SECONDS DIGITS

			Paint_DrawString_EN(secondsStartX - 8, secondsStartY - 20, "60",
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <interfaceDrawLayer+0x1960>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	3b08      	subs	r3, #8
 800c98e:	b298      	uxth	r0, r3
 800c990:	4b0e      	ldr	r3, [pc, #56]	; (800c9cc <interfaceDrawLayer+0x1964>)
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	b29b      	uxth	r3, r3
 800c996:	3b14      	subs	r3, #20
 800c998:	b299      	uxth	r1, r3
 800c99a:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <interfaceDrawLayer+0x1968>)
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	4a0c      	ldr	r2, [pc, #48]	; (800c9d4 <interfaceDrawLayer+0x196c>)
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	b292      	uxth	r2, r2
 800c9aa:	4d0b      	ldr	r5, [pc, #44]	; (800c9d8 <interfaceDrawLayer+0x1970>)
 800c9ac:	4c0b      	ldr	r4, [pc, #44]	; (800c9dc <interfaceDrawLayer+0x1974>)
 800c9ae:	9201      	str	r2, [sp, #4]
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	002b      	movs	r3, r5
 800c9b4:	0022      	movs	r2, r4
 800c9b6:	f7fd f91b 	bl	8009bf0 <Paint_DrawString_EN>
 800c9ba:	e011      	b.n	800c9e0 <interfaceDrawLayer+0x1978>
 800c9bc:	2000036c 	.word	0x2000036c
 800c9c0:	20000128 	.word	0x20000128
 800c9c4:	20000132 	.word	0x20000132
 800c9c8:	20000627 	.word	0x20000627
 800c9cc:	200002d3 	.word	0x200002d3
 800c9d0:	20000293 	.word	0x20000293
 800c9d4:	20000605 	.word	0x20000605
 800c9d8:	20000008 	.word	0x20000008
 800c9dc:	08013db8 	.word	0x08013db8
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX + 2, secondsStartY + 2, "20",
 800c9e0:	4bf9      	ldr	r3, [pc, #996]	; (800cdc8 <interfaceDrawLayer+0x1d60>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	b298      	uxth	r0, r3
 800c9ea:	4bf8      	ldr	r3, [pc, #992]	; (800cdcc <interfaceDrawLayer+0x1d64>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	b299      	uxth	r1, r3
 800c9f4:	4bf6      	ldr	r3, [pc, #984]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	4af5      	ldr	r2, [pc, #980]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	b292      	uxth	r2, r2
 800ca04:	4df4      	ldr	r5, [pc, #976]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800ca06:	4cf5      	ldr	r4, [pc, #980]	; (800cddc <interfaceDrawLayer+0x1d74>)
 800ca08:	9201      	str	r2, [sp, #4]
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	002b      	movs	r3, r5
 800ca0e:	0022      	movs	r2, r4
 800ca10:	f7fd f8ee 	bl	8009bf0 <Paint_DrawString_EN>
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX - 18, secondsStartY + 2, "40",
 800ca14:	4bec      	ldr	r3, [pc, #944]	; (800cdc8 <interfaceDrawLayer+0x1d60>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	3b12      	subs	r3, #18
 800ca1c:	b298      	uxth	r0, r3
 800ca1e:	4beb      	ldr	r3, [pc, #940]	; (800cdcc <interfaceDrawLayer+0x1d64>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	3302      	adds	r3, #2
 800ca26:	b299      	uxth	r1, r3
 800ca28:	4be9      	ldr	r3, [pc, #932]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	4ae8      	ldr	r2, [pc, #928]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800ca32:	7812      	ldrb	r2, [r2, #0]
 800ca34:	b2d2      	uxtb	r2, r2
 800ca36:	b292      	uxth	r2, r2
 800ca38:	4de7      	ldr	r5, [pc, #924]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800ca3a:	4ce9      	ldr	r4, [pc, #932]	; (800cde0 <interfaceDrawLayer+0x1d78>)
 800ca3c:	9201      	str	r2, [sp, #4]
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	002b      	movs	r3, r5
 800ca42:	0022      	movs	r2, r4
 800ca44:	f7fd f8d4 	bl	8009bf0 <Paint_DrawString_EN>

		}

		//										MAIN INDEX

		for (uint8_t i = 1; i < 12; i++) {
 800ca48:	2313      	movs	r3, #19
 800ca4a:	18fb      	adds	r3, r7, r3
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	e0ea      	b.n	800cc28 <interfaceDrawLayer+0x1bc0>

			Paint_DrawLine(
					cos(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800ca52:	2313      	movs	r3, #19
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	781a      	ldrb	r2, [r3, #0]
 800ca58:	4be2      	ldr	r3, [pc, #904]	; (800cde4 <interfaceDrawLayer+0x1d7c>)
 800ca5a:	0092      	lsls	r2, r2, #2
 800ca5c:	58d3      	ldr	r3, [r2, r3]
 800ca5e:	1c18      	adds	r0, r3, #0
 800ca60:	f7f6 fae8 	bl	8003034 <__aeabi_f2d>
 800ca64:	0002      	movs	r2, r0
 800ca66:	000b      	movs	r3, r1
 800ca68:	0010      	movs	r0, r2
 800ca6a:	0019      	movs	r1, r3
 800ca6c:	f005 faf4 	bl	8012058 <cos>
 800ca70:	0004      	movs	r4, r0
 800ca72:	000d      	movs	r5, r1
 800ca74:	4bdc      	ldr	r3, [pc, #880]	; (800cde8 <interfaceDrawLayer+0x1d80>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	001a      	movs	r2, r3
 800ca7a:	4bdc      	ldr	r3, [pc, #880]	; (800cdec <interfaceDrawLayer+0x1d84>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	0018      	movs	r0, r3
 800ca82:	f7f6 fa81 	bl	8002f88 <__aeabi_i2d>
 800ca86:	0002      	movs	r2, r0
 800ca88:	000b      	movs	r3, r1
 800ca8a:	0020      	movs	r0, r4
 800ca8c:	0029      	movs	r1, r5
 800ca8e:	f7f5 fc29 	bl	80022e4 <__aeabi_dmul>
 800ca92:	0002      	movs	r2, r0
 800ca94:	000b      	movs	r3, r1
 800ca96:	0014      	movs	r4, r2
 800ca98:	001d      	movs	r5, r3
							+ mainStartX,
 800ca9a:	4bd5      	ldr	r3, [pc, #852]	; (800cdf0 <interfaceDrawLayer+0x1d88>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	0018      	movs	r0, r3
 800caa0:	f7f6 fa72 	bl	8002f88 <__aeabi_i2d>
 800caa4:	0002      	movs	r2, r0
 800caa6:	000b      	movs	r3, r1
 800caa8:	0020      	movs	r0, r4
 800caaa:	0029      	movs	r1, r5
 800caac:	f7f4 fcaa 	bl	8001404 <__aeabi_dadd>
 800cab0:	0002      	movs	r2, r0
 800cab2:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cab4:	0010      	movs	r0, r2
 800cab6:	0019      	movs	r1, r3
 800cab8:	f7f3 fd7e 	bl	80005b8 <__aeabi_d2uiz>
 800cabc:	0003      	movs	r3, r0
 800cabe:	b29e      	uxth	r6, r3
					sin(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800cac0:	2313      	movs	r3, #19
 800cac2:	18fb      	adds	r3, r7, r3
 800cac4:	781a      	ldrb	r2, [r3, #0]
 800cac6:	4bc7      	ldr	r3, [pc, #796]	; (800cde4 <interfaceDrawLayer+0x1d7c>)
 800cac8:	0092      	lsls	r2, r2, #2
 800caca:	58d3      	ldr	r3, [r2, r3]
 800cacc:	1c18      	adds	r0, r3, #0
 800cace:	f7f6 fab1 	bl	8003034 <__aeabi_f2d>
 800cad2:	0002      	movs	r2, r0
 800cad4:	000b      	movs	r3, r1
 800cad6:	0010      	movs	r0, r2
 800cad8:	0019      	movs	r1, r3
 800cada:	f005 faff 	bl	80120dc <sin>
 800cade:	0004      	movs	r4, r0
 800cae0:	000d      	movs	r5, r1
 800cae2:	4bc1      	ldr	r3, [pc, #772]	; (800cde8 <interfaceDrawLayer+0x1d80>)
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	001a      	movs	r2, r3
 800cae8:	4bc0      	ldr	r3, [pc, #768]	; (800cdec <interfaceDrawLayer+0x1d84>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	0018      	movs	r0, r3
 800caf0:	f7f6 fa4a 	bl	8002f88 <__aeabi_i2d>
 800caf4:	0002      	movs	r2, r0
 800caf6:	000b      	movs	r3, r1
 800caf8:	0020      	movs	r0, r4
 800cafa:	0029      	movs	r1, r5
 800cafc:	f7f5 fbf2 	bl	80022e4 <__aeabi_dmul>
 800cb00:	0002      	movs	r2, r0
 800cb02:	000b      	movs	r3, r1
 800cb04:	0014      	movs	r4, r2
 800cb06:	001d      	movs	r5, r3
							+ mainStartY,
 800cb08:	4bba      	ldr	r3, [pc, #744]	; (800cdf4 <interfaceDrawLayer+0x1d8c>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f7f6 fa3b 	bl	8002f88 <__aeabi_i2d>
 800cb12:	0002      	movs	r2, r0
 800cb14:	000b      	movs	r3, r1
 800cb16:	0020      	movs	r0, r4
 800cb18:	0029      	movs	r1, r5
 800cb1a:	f7f4 fc73 	bl	8001404 <__aeabi_dadd>
 800cb1e:	0002      	movs	r2, r0
 800cb20:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cb22:	0010      	movs	r0, r2
 800cb24:	0019      	movs	r1, r3
 800cb26:	f7f3 fd47 	bl	80005b8 <__aeabi_d2uiz>
 800cb2a:	0003      	movs	r3, r0
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	4690      	mov	r8, r2

					cos(mainIndexAngle[i]) * (mainBoardRadius) + mainStartX,
 800cb30:	2313      	movs	r3, #19
 800cb32:	18fb      	adds	r3, r7, r3
 800cb34:	781a      	ldrb	r2, [r3, #0]
 800cb36:	4bab      	ldr	r3, [pc, #684]	; (800cde4 <interfaceDrawLayer+0x1d7c>)
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	58d3      	ldr	r3, [r2, r3]
 800cb3c:	1c18      	adds	r0, r3, #0
 800cb3e:	f7f6 fa79 	bl	8003034 <__aeabi_f2d>
 800cb42:	0002      	movs	r2, r0
 800cb44:	000b      	movs	r3, r1
 800cb46:	0010      	movs	r0, r2
 800cb48:	0019      	movs	r1, r3
 800cb4a:	f005 fa85 	bl	8012058 <cos>
 800cb4e:	0004      	movs	r4, r0
 800cb50:	000d      	movs	r5, r1
 800cb52:	4ba5      	ldr	r3, [pc, #660]	; (800cde8 <interfaceDrawLayer+0x1d80>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	0018      	movs	r0, r3
 800cb58:	f7f6 fa16 	bl	8002f88 <__aeabi_i2d>
 800cb5c:	0002      	movs	r2, r0
 800cb5e:	000b      	movs	r3, r1
 800cb60:	0020      	movs	r0, r4
 800cb62:	0029      	movs	r1, r5
 800cb64:	f7f5 fbbe 	bl	80022e4 <__aeabi_dmul>
 800cb68:	0002      	movs	r2, r0
 800cb6a:	000b      	movs	r3, r1
 800cb6c:	0014      	movs	r4, r2
 800cb6e:	001d      	movs	r5, r3
 800cb70:	4b9f      	ldr	r3, [pc, #636]	; (800cdf0 <interfaceDrawLayer+0x1d88>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	0018      	movs	r0, r3
 800cb76:	f7f6 fa07 	bl	8002f88 <__aeabi_i2d>
 800cb7a:	0002      	movs	r2, r0
 800cb7c:	000b      	movs	r3, r1
 800cb7e:	0020      	movs	r0, r4
 800cb80:	0029      	movs	r1, r5
 800cb82:	f7f4 fc3f 	bl	8001404 <__aeabi_dadd>
 800cb86:	0002      	movs	r2, r0
 800cb88:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cb8a:	0010      	movs	r0, r2
 800cb8c:	0019      	movs	r1, r3
 800cb8e:	f7f3 fd13 	bl	80005b8 <__aeabi_d2uiz>
 800cb92:	0003      	movs	r3, r0
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	4691      	mov	r9, r2
					sin(mainIndexAngle[i]) * (mainBoardRadius) + mainStartY,
 800cb98:	2313      	movs	r3, #19
 800cb9a:	18fb      	adds	r3, r7, r3
 800cb9c:	781a      	ldrb	r2, [r3, #0]
 800cb9e:	4b91      	ldr	r3, [pc, #580]	; (800cde4 <interfaceDrawLayer+0x1d7c>)
 800cba0:	0092      	lsls	r2, r2, #2
 800cba2:	58d3      	ldr	r3, [r2, r3]
 800cba4:	1c18      	adds	r0, r3, #0
 800cba6:	f7f6 fa45 	bl	8003034 <__aeabi_f2d>
 800cbaa:	0002      	movs	r2, r0
 800cbac:	000b      	movs	r3, r1
 800cbae:	0010      	movs	r0, r2
 800cbb0:	0019      	movs	r1, r3
 800cbb2:	f005 fa93 	bl	80120dc <sin>
 800cbb6:	0004      	movs	r4, r0
 800cbb8:	000d      	movs	r5, r1
 800cbba:	4b8b      	ldr	r3, [pc, #556]	; (800cde8 <interfaceDrawLayer+0x1d80>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	0018      	movs	r0, r3
 800cbc0:	f7f6 f9e2 	bl	8002f88 <__aeabi_i2d>
 800cbc4:	0002      	movs	r2, r0
 800cbc6:	000b      	movs	r3, r1
 800cbc8:	0020      	movs	r0, r4
 800cbca:	0029      	movs	r1, r5
 800cbcc:	f7f5 fb8a 	bl	80022e4 <__aeabi_dmul>
 800cbd0:	0002      	movs	r2, r0
 800cbd2:	000b      	movs	r3, r1
 800cbd4:	0014      	movs	r4, r2
 800cbd6:	001d      	movs	r5, r3
 800cbd8:	4b86      	ldr	r3, [pc, #536]	; (800cdf4 <interfaceDrawLayer+0x1d8c>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f7f6 f9d3 	bl	8002f88 <__aeabi_i2d>
 800cbe2:	0002      	movs	r2, r0
 800cbe4:	000b      	movs	r3, r1
 800cbe6:	0020      	movs	r0, r4
 800cbe8:	0029      	movs	r1, r5
 800cbea:	f7f4 fc0b 	bl	8001404 <__aeabi_dadd>
 800cbee:	0002      	movs	r2, r0
 800cbf0:	000b      	movs	r3, r1
			Paint_DrawLine(
 800cbf2:	0010      	movs	r0, r2
 800cbf4:	0019      	movs	r1, r3
 800cbf6:	f7f3 fcdf 	bl	80005b8 <__aeabi_d2uiz>
 800cbfa:	0003      	movs	r3, r0
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	4b75      	ldr	r3, [pc, #468]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2100      	movs	r1, #0
 800cc08:	9102      	str	r1, [sp, #8]
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	9101      	str	r1, [sp, #4]
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	0013      	movs	r3, r2
 800cc12:	464a      	mov	r2, r9
 800cc14:	4641      	mov	r1, r8
 800cc16:	0030      	movs	r0, r6
 800cc18:	f7fc fa20 	bl	800905c <Paint_DrawLine>
		for (uint8_t i = 1; i < 12; i++) {
 800cc1c:	2113      	movs	r1, #19
 800cc1e:	187b      	adds	r3, r7, r1
 800cc20:	781a      	ldrb	r2, [r3, #0]
 800cc22:	187b      	adds	r3, r7, r1
 800cc24:	3201      	adds	r2, #1
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	2313      	movs	r3, #19
 800cc2a:	18fb      	adds	r3, r7, r3
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b0b      	cmp	r3, #11
 800cc30:	d800      	bhi.n	800cc34 <interfaceDrawLayer+0x1bcc>
 800cc32:	e70e      	b.n	800ca52 <interfaceDrawLayer+0x19ea>

		}

	}

	if (layer == 3) {		//pointers
 800cc34:	1dfb      	adds	r3, r7, #7
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d001      	beq.n	800cc40 <interfaceDrawLayer+0x1bd8>
 800cc3c:	f000 fead 	bl	800d99a <interfaceDrawLayer+0x2932>

		//										METER

		if (showMeter == 1) {
 800cc40:	4b6d      	ldr	r3, [pc, #436]	; (800cdf8 <interfaceDrawLayer+0x1d90>)
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d14d      	bne.n	800cce4 <interfaceDrawLayer+0x1c7c>
			Paint_DrawString_EN(meterX + 2, meterY + 2, voltagePassive, &Font16,
 800cc48:	4b6c      	ldr	r3, [pc, #432]	; (800cdfc <interfaceDrawLayer+0x1d94>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3302      	adds	r3, #2
 800cc50:	b298      	uxth	r0, r3
 800cc52:	4b6b      	ldr	r3, [pc, #428]	; (800ce00 <interfaceDrawLayer+0x1d98>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	3302      	adds	r3, #2
 800cc5a:	b299      	uxth	r1, r3
 800cc5c:	4b5d      	ldr	r3, [pc, #372]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	4a5a      	ldr	r2, [pc, #360]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cc66:	7812      	ldrb	r2, [r2, #0]
 800cc68:	b2d2      	uxtb	r2, r2
 800cc6a:	b292      	uxth	r2, r2
 800cc6c:	4d65      	ldr	r5, [pc, #404]	; (800ce04 <interfaceDrawLayer+0x1d9c>)
 800cc6e:	4c66      	ldr	r4, [pc, #408]	; (800ce08 <interfaceDrawLayer+0x1da0>)
 800cc70:	9201      	str	r2, [sp, #4]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	002b      	movs	r3, r5
 800cc76:	0022      	movs	r2, r4
 800cc78:	f7fc ffba 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 18, voltageDrop, &Font16,
 800cc7c:	4b5f      	ldr	r3, [pc, #380]	; (800cdfc <interfaceDrawLayer+0x1d94>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	3302      	adds	r3, #2
 800cc84:	b298      	uxth	r0, r3
 800cc86:	4b5e      	ldr	r3, [pc, #376]	; (800ce00 <interfaceDrawLayer+0x1d98>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	3312      	adds	r3, #18
 800cc8e:	b299      	uxth	r1, r3
 800cc90:	4b50      	ldr	r3, [pc, #320]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4a4d      	ldr	r2, [pc, #308]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cc9a:	7812      	ldrb	r2, [r2, #0]
 800cc9c:	b2d2      	uxtb	r2, r2
 800cc9e:	b292      	uxth	r2, r2
 800cca0:	4d58      	ldr	r5, [pc, #352]	; (800ce04 <interfaceDrawLayer+0x1d9c>)
 800cca2:	4c5a      	ldr	r4, [pc, #360]	; (800ce0c <interfaceDrawLayer+0x1da4>)
 800cca4:	9201      	str	r2, [sp, #4]
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	002b      	movs	r3, r5
 800ccaa:	0022      	movs	r2, r4
 800ccac:	f7fc ffa0 	bl	8009bf0 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 34, resistance, &Font16,
 800ccb0:	4b52      	ldr	r3, [pc, #328]	; (800cdfc <interfaceDrawLayer+0x1d94>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	b298      	uxth	r0, r3
 800ccba:	4b51      	ldr	r3, [pc, #324]	; (800ce00 <interfaceDrawLayer+0x1d98>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	3322      	adds	r3, #34	; 0x22
 800ccc2:	b299      	uxth	r1, r3
 800ccc4:	4b43      	ldr	r3, [pc, #268]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	4a40      	ldr	r2, [pc, #256]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800ccce:	7812      	ldrb	r2, [r2, #0]
 800ccd0:	b2d2      	uxtb	r2, r2
 800ccd2:	b292      	uxth	r2, r2
 800ccd4:	4d4b      	ldr	r5, [pc, #300]	; (800ce04 <interfaceDrawLayer+0x1d9c>)
 800ccd6:	4c4e      	ldr	r4, [pc, #312]	; (800ce10 <interfaceDrawLayer+0x1da8>)
 800ccd8:	9201      	str	r2, [sp, #4]
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	002b      	movs	r3, r5
 800ccde:	0022      	movs	r2, r4
 800cce0:	f7fc ff86 	bl	8009bf0 <Paint_DrawString_EN>

		}

		//										DIGITAL INTERFACE

		if (showDigitalInterface == 1) {
 800cce4:	4b4b      	ldr	r3, [pc, #300]	; (800ce14 <interfaceDrawLayer+0x1dac>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d000      	beq.n	800ccee <interfaceDrawLayer+0x1c86>
 800ccec:	e0b7      	b.n	800ce5e <interfaceDrawLayer+0x1df6>
			Paint_DrawNum(digitalX, digitalY, pressureValue, &Font12, colorMain,
 800ccee:	4b4a      	ldr	r3, [pc, #296]	; (800ce18 <interfaceDrawLayer+0x1db0>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b298      	uxth	r0, r3
 800ccf4:	4b49      	ldr	r3, [pc, #292]	; (800ce1c <interfaceDrawLayer+0x1db4>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	b299      	uxth	r1, r3
 800ccfa:	4b49      	ldr	r3, [pc, #292]	; (800ce20 <interfaceDrawLayer+0x1db8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	001d      	movs	r5, r3
 800cd00:	4b33      	ldr	r3, [pc, #204]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4a32      	ldr	r2, [pc, #200]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cd0a:	7812      	ldrb	r2, [r2, #0]
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	b292      	uxth	r2, r2
 800cd10:	4c31      	ldr	r4, [pc, #196]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800cd12:	9201      	str	r2, [sp, #4]
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	0023      	movs	r3, r4
 800cd18:	002a      	movs	r2, r5
 800cd1a:	f7fc ffe7 	bl	8009cec <Paint_DrawNum>
					colorSecond);
			Paint_DrawNum(digitalX, digitalY + 12, humidityValue, &Font12,
 800cd1e:	4b3e      	ldr	r3, [pc, #248]	; (800ce18 <interfaceDrawLayer+0x1db0>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	b298      	uxth	r0, r3
 800cd24:	4b3d      	ldr	r3, [pc, #244]	; (800ce1c <interfaceDrawLayer+0x1db4>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	b299      	uxth	r1, r3
 800cd2e:	4b3d      	ldr	r3, [pc, #244]	; (800ce24 <interfaceDrawLayer+0x1dbc>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	001d      	movs	r5, r3
 800cd34:	4b26      	ldr	r3, [pc, #152]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	4a25      	ldr	r2, [pc, #148]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cd3e:	7812      	ldrb	r2, [r2, #0]
 800cd40:	b2d2      	uxtb	r2, r2
 800cd42:	b292      	uxth	r2, r2
 800cd44:	4c24      	ldr	r4, [pc, #144]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800cd46:	9201      	str	r2, [sp, #4]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	0023      	movs	r3, r4
 800cd4c:	002a      	movs	r2, r5
 800cd4e:	f7fc ffcd 	bl	8009cec <Paint_DrawNum>
					colorMain, colorSecond);

			if (temperatureValue < 0) {
 800cd52:	4b35      	ldr	r3, [pc, #212]	; (800ce28 <interfaceDrawLayer+0x1dc0>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da68      	bge.n	800ce2c <interfaceDrawLayer+0x1dc4>

				Paint_DrawChar(digitalX, digitalY + 24, '-', &Font12, colorMain,
 800cd5a:	4b2f      	ldr	r3, [pc, #188]	; (800ce18 <interfaceDrawLayer+0x1db0>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	b298      	uxth	r0, r3
 800cd60:	4b2e      	ldr	r3, [pc, #184]	; (800ce1c <interfaceDrawLayer+0x1db4>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	3318      	adds	r3, #24
 800cd68:	b299      	uxth	r1, r3
 800cd6a:	4b19      	ldr	r3, [pc, #100]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	4a18      	ldr	r2, [pc, #96]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cd74:	7812      	ldrb	r2, [r2, #0]
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	b292      	uxth	r2, r2
 800cd7a:	4c17      	ldr	r4, [pc, #92]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800cd7c:	9201      	str	r2, [sp, #4]
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	0023      	movs	r3, r4
 800cd82:	222d      	movs	r2, #45	; 0x2d
 800cd84:	f7fc fe50 	bl	8009a28 <Paint_DrawChar>
						colorSecond);
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800cd88:	4b23      	ldr	r3, [pc, #140]	; (800ce18 <interfaceDrawLayer+0x1db0>)
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	3308      	adds	r3, #8
 800cd90:	b298      	uxth	r0, r3
 800cd92:	4b22      	ldr	r3, [pc, #136]	; (800ce1c <interfaceDrawLayer+0x1db4>)
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	3318      	adds	r3, #24
 800cd9a:	b299      	uxth	r1, r3
 800cd9c:	4b22      	ldr	r3, [pc, #136]	; (800ce28 <interfaceDrawLayer+0x1dc0>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
						abs(temperatureValue), &Font12, colorMain, colorSecond);
 800cda0:	17da      	asrs	r2, r3, #31
 800cda2:	189c      	adds	r4, r3, r2
 800cda4:	4054      	eors	r4, r2
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800cda6:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <interfaceDrawLayer+0x1d68>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	4a09      	ldr	r2, [pc, #36]	; (800cdd4 <interfaceDrawLayer+0x1d6c>)
 800cdb0:	7812      	ldrb	r2, [r2, #0]
 800cdb2:	b2d2      	uxtb	r2, r2
 800cdb4:	b292      	uxth	r2, r2
 800cdb6:	4d08      	ldr	r5, [pc, #32]	; (800cdd8 <interfaceDrawLayer+0x1d70>)
 800cdb8:	9201      	str	r2, [sp, #4]
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	002b      	movs	r3, r5
 800cdbe:	0022      	movs	r2, r4
 800cdc0:	f7fc ff94 	bl	8009cec <Paint_DrawNum>
 800cdc4:	e04b      	b.n	800ce5e <interfaceDrawLayer+0x1df6>
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	20000627 	.word	0x20000627
 800cdcc:	200002d3 	.word	0x200002d3
 800cdd0:	20000293 	.word	0x20000293
 800cdd4:	20000605 	.word	0x20000605
 800cdd8:	20000008 	.word	0x20000008
 800cddc:	08013db4 	.word	0x08013db4
 800cde0:	08013dbc 	.word	0x08013dbc
 800cde4:	20000294 	.word	0x20000294
 800cde8:	20000578 	.word	0x20000578
 800cdec:	2000039e 	.word	0x2000039e
 800cdf0:	200003a3 	.word	0x200003a3
 800cdf4:	20000147 	.word	0x20000147
 800cdf8:	20000626 	.word	0x20000626
 800cdfc:	2000030e 	.word	0x2000030e
 800ce00:	2000040c 	.word	0x2000040c
 800ce04:	20000010 	.word	0x20000010
 800ce08:	200004e4 	.word	0x200004e4
 800ce0c:	20000570 	.word	0x20000570
 800ce10:	200005fc 	.word	0x200005fc
 800ce14:	20000640 	.word	0x20000640
 800ce18:	20000596 	.word	0x20000596
 800ce1c:	2000030a 	.word	0x2000030a
 800ce20:	20000584 	.word	0x20000584
 800ce24:	2000014c 	.word	0x2000014c
 800ce28:	20000304 	.word	0x20000304
			} else {
				Paint_DrawNum(digitalX, digitalY + 24, temperatureValue,
 800ce2c:	4bc4      	ldr	r3, [pc, #784]	; (800d140 <interfaceDrawLayer+0x20d8>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	b298      	uxth	r0, r3
 800ce32:	4bc4      	ldr	r3, [pc, #784]	; (800d144 <interfaceDrawLayer+0x20dc>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3318      	adds	r3, #24
 800ce3a:	b299      	uxth	r1, r3
 800ce3c:	4bc2      	ldr	r3, [pc, #776]	; (800d148 <interfaceDrawLayer+0x20e0>)
 800ce3e:	681c      	ldr	r4, [r3, #0]
 800ce40:	4bc2      	ldr	r3, [pc, #776]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	4ac1      	ldr	r2, [pc, #772]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800ce4a:	7812      	ldrb	r2, [r2, #0]
 800ce4c:	b2d2      	uxtb	r2, r2
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	4dc0      	ldr	r5, [pc, #768]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800ce52:	9201      	str	r2, [sp, #4]
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	002b      	movs	r3, r5
 800ce58:	0022      	movs	r2, r4
 800ce5a:	f7fc ff47 	bl	8009cec <Paint_DrawNum>

		}

		//										TEMPERATURE READING

		if (showThermometer == 1) {
 800ce5e:	4bbe      	ldr	r3, [pc, #760]	; (800d158 <interfaceDrawLayer+0x20f0>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d14c      	bne.n	800cf00 <interfaceDrawLayer+0x1e98>
			if (temperatureValue < 0) {
 800ce66:	4bb8      	ldr	r3, [pc, #736]	; (800d148 <interfaceDrawLayer+0x20e0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	da31      	bge.n	800ced2 <interfaceDrawLayer+0x1e6a>

				Paint_DrawChar(temperatureX - 8, temperatureY, '-', &Font12,
 800ce6e:	4bbb      	ldr	r3, [pc, #748]	; (800d15c <interfaceDrawLayer+0x20f4>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	3b08      	subs	r3, #8
 800ce76:	b298      	uxth	r0, r3
 800ce78:	4bb9      	ldr	r3, [pc, #740]	; (800d160 <interfaceDrawLayer+0x20f8>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	b299      	uxth	r1, r3
 800ce7e:	4bb3      	ldr	r3, [pc, #716]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4ab2      	ldr	r2, [pc, #712]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800ce88:	7812      	ldrb	r2, [r2, #0]
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	b292      	uxth	r2, r2
 800ce8e:	4cb1      	ldr	r4, [pc, #708]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800ce90:	9201      	str	r2, [sp, #4]
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	0023      	movs	r3, r4
 800ce96:	222d      	movs	r2, #45	; 0x2d
 800ce98:	f7fc fdc6 	bl	8009a28 <Paint_DrawChar>
						colorMain, colorSecond);
				Paint_DrawNum(temperatureX, temperatureY, abs(temperatureValue),
 800ce9c:	4baf      	ldr	r3, [pc, #700]	; (800d15c <interfaceDrawLayer+0x20f4>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	b298      	uxth	r0, r3
 800cea2:	4baf      	ldr	r3, [pc, #700]	; (800d160 <interfaceDrawLayer+0x20f8>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	b299      	uxth	r1, r3
 800cea8:	4ba7      	ldr	r3, [pc, #668]	; (800d148 <interfaceDrawLayer+0x20e0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	17da      	asrs	r2, r3, #31
 800ceae:	189c      	adds	r4, r3, r2
 800ceb0:	4054      	eors	r4, r2
 800ceb2:	4ba6      	ldr	r3, [pc, #664]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	4aa5      	ldr	r2, [pc, #660]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800cebc:	7812      	ldrb	r2, [r2, #0]
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	b292      	uxth	r2, r2
 800cec2:	4da4      	ldr	r5, [pc, #656]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800cec4:	9201      	str	r2, [sp, #4]
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	002b      	movs	r3, r5
 800ceca:	0022      	movs	r2, r4
 800cecc:	f7fc ff0e 	bl	8009cec <Paint_DrawNum>
 800ced0:	e016      	b.n	800cf00 <interfaceDrawLayer+0x1e98>
						&Font12, colorMain, colorSecond);
			} else {
				Paint_DrawNum(temperatureX, temperatureY, temperatureValue,
 800ced2:	4ba2      	ldr	r3, [pc, #648]	; (800d15c <interfaceDrawLayer+0x20f4>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	b298      	uxth	r0, r3
 800ced8:	4ba1      	ldr	r3, [pc, #644]	; (800d160 <interfaceDrawLayer+0x20f8>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	b299      	uxth	r1, r3
 800cede:	4b9a      	ldr	r3, [pc, #616]	; (800d148 <interfaceDrawLayer+0x20e0>)
 800cee0:	681c      	ldr	r4, [r3, #0]
 800cee2:	4b9a      	ldr	r3, [pc, #616]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4a99      	ldr	r2, [pc, #612]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800ceec:	7812      	ldrb	r2, [r2, #0]
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	b292      	uxth	r2, r2
 800cef2:	4d98      	ldr	r5, [pc, #608]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	002b      	movs	r3, r5
 800cefa:	0022      	movs	r2, r4
 800cefc:	f7fc fef6 	bl	8009cec <Paint_DrawNum>
			}
		}

		//										HUMIDITY READING

		if (showHigrometer == 1) {
 800cf00:	4b98      	ldr	r3, [pc, #608]	; (800d164 <interfaceDrawLayer+0x20fc>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d120      	bne.n	800cf4a <interfaceDrawLayer+0x1ee2>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800cf08:	4b97      	ldr	r3, [pc, #604]	; (800d168 <interfaceDrawLayer+0x2100>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	b298      	uxth	r0, r3
 800cf0e:	4b97      	ldr	r3, [pc, #604]	; (800d16c <interfaceDrawLayer+0x2104>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	b299      	uxth	r1, r3
 800cf14:	4b94      	ldr	r3, [pc, #592]	; (800d168 <interfaceDrawLayer+0x2100>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	3305      	adds	r3, #5
 800cf1c:	b29c      	uxth	r4, r3
 800cf1e:	4b93      	ldr	r3, [pc, #588]	; (800d16c <interfaceDrawLayer+0x2104>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	b29a      	uxth	r2, r3
					humidityY + (humidityValue / 2), colorSecond, DOT_PIXEL_1X1,
 800cf24:	4b92      	ldr	r3, [pc, #584]	; (800d170 <interfaceDrawLayer+0x2108>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	085b      	lsrs	r3, r3, #1
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	18d3      	adds	r3, r2, r3
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	4b87      	ldr	r3, [pc, #540]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2501      	movs	r5, #1
 800cf3a:	9502      	str	r5, [sp, #8]
 800cf3c:	2501      	movs	r5, #1
 800cf3e:	9501      	str	r5, [sp, #4]
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	0013      	movs	r3, r2
 800cf44:	0022      	movs	r2, r4
 800cf46:	f7fc fa51 	bl	80093ec <Paint_DrawRectangle>
					DRAW_FILL_FULL);
		}

		//										ANALOG COMPASS

		if (showNaviAnalog == 1) {
 800cf4a:	4b8a      	ldr	r3, [pc, #552]	; (800d174 <interfaceDrawLayer+0x210c>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d000      	beq.n	800cf54 <interfaceDrawLayer+0x1eec>
 800cf52:	e0b5      	b.n	800d0c0 <interfaceDrawLayer+0x2058>

			if (altitudeValue < 0) {
 800cf54:	4b88      	ldr	r3, [pc, #544]	; (800d178 <interfaceDrawLayer+0x2110>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	da37      	bge.n	800cfcc <interfaceDrawLayer+0x1f64>
				Paint_DrawChar(compassX - 12, compassY - 14, '-', &Font12,
 800cf5c:	4b87      	ldr	r3, [pc, #540]	; (800d17c <interfaceDrawLayer+0x2114>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	3b0c      	subs	r3, #12
 800cf64:	b298      	uxth	r0, r3
 800cf66:	4b86      	ldr	r3, [pc, #536]	; (800d180 <interfaceDrawLayer+0x2118>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	3b0e      	subs	r3, #14
 800cf6e:	b299      	uxth	r1, r3
 800cf70:	4b77      	ldr	r3, [pc, #476]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	4a74      	ldr	r2, [pc, #464]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800cf7a:	7812      	ldrb	r2, [r2, #0]
 800cf7c:	b2d2      	uxtb	r2, r2
 800cf7e:	b292      	uxth	r2, r2
 800cf80:	4c74      	ldr	r4, [pc, #464]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800cf82:	9201      	str	r2, [sp, #4]
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	0023      	movs	r3, r4
 800cf88:	222d      	movs	r2, #45	; 0x2d
 800cf8a:	f7fc fd4d 	bl	8009a28 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800cf8e:	4b7b      	ldr	r3, [pc, #492]	; (800d17c <interfaceDrawLayer+0x2114>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	3b04      	subs	r3, #4
 800cf96:	b298      	uxth	r0, r3
 800cf98:	4b79      	ldr	r3, [pc, #484]	; (800d180 <interfaceDrawLayer+0x2118>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	3b0e      	subs	r3, #14
 800cfa0:	b299      	uxth	r1, r3
 800cfa2:	4b75      	ldr	r3, [pc, #468]	; (800d178 <interfaceDrawLayer+0x2110>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
						abs(altitudeValue), &Font12, colorSecond, colorMain);
 800cfa6:	17da      	asrs	r2, r3, #31
 800cfa8:	189c      	adds	r4, r3, r2
 800cfaa:	4054      	eors	r4, r2
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800cfac:	4b68      	ldr	r3, [pc, #416]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4a65      	ldr	r2, [pc, #404]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800cfb6:	7812      	ldrb	r2, [r2, #0]
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	b292      	uxth	r2, r2
 800cfbc:	4d65      	ldr	r5, [pc, #404]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800cfbe:	9201      	str	r2, [sp, #4]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	002b      	movs	r3, r5
 800cfc4:	0022      	movs	r2, r4
 800cfc6:	f7fc fe91 	bl	8009cec <Paint_DrawNum>
 800cfca:	e01a      	b.n	800d002 <interfaceDrawLayer+0x1f9a>
			} else {
				Paint_DrawNum(compassX - 12, compassY - 14, altitudeValue,
 800cfcc:	4b6b      	ldr	r3, [pc, #428]	; (800d17c <interfaceDrawLayer+0x2114>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	3b0c      	subs	r3, #12
 800cfd4:	b298      	uxth	r0, r3
 800cfd6:	4b6a      	ldr	r3, [pc, #424]	; (800d180 <interfaceDrawLayer+0x2118>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	3b0e      	subs	r3, #14
 800cfde:	b299      	uxth	r1, r3
 800cfe0:	4b65      	ldr	r3, [pc, #404]	; (800d178 <interfaceDrawLayer+0x2110>)
 800cfe2:	681c      	ldr	r4, [r3, #0]
 800cfe4:	4b5a      	ldr	r3, [pc, #360]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4a57      	ldr	r2, [pc, #348]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800cfee:	7812      	ldrb	r2, [r2, #0]
 800cff0:	b2d2      	uxtb	r2, r2
 800cff2:	b292      	uxth	r2, r2
 800cff4:	4d57      	ldr	r5, [pc, #348]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800cff6:	9201      	str	r2, [sp, #4]
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	002b      	movs	r3, r5
 800cffc:	0022      	movs	r2, r4
 800cffe:	f7fc fe75 	bl	8009cec <Paint_DrawNum>
						&Font12, colorSecond, colorMain);
			}

			compassAngle = atan2(magneticFieldY, magneticFieldX);
 800d002:	4b60      	ldr	r3, [pc, #384]	; (800d184 <interfaceDrawLayer+0x211c>)
 800d004:	2200      	movs	r2, #0
 800d006:	5e9b      	ldrsh	r3, [r3, r2]
 800d008:	0018      	movs	r0, r3
 800d00a:	f7f5 ffbd 	bl	8002f88 <__aeabi_i2d>
 800d00e:	0004      	movs	r4, r0
 800d010:	000d      	movs	r5, r1
 800d012:	4b5d      	ldr	r3, [pc, #372]	; (800d188 <interfaceDrawLayer+0x2120>)
 800d014:	2200      	movs	r2, #0
 800d016:	5e9b      	ldrsh	r3, [r3, r2]
 800d018:	0018      	movs	r0, r3
 800d01a:	f7f5 ffb5 	bl	8002f88 <__aeabi_i2d>
 800d01e:	0002      	movs	r2, r0
 800d020:	000b      	movs	r3, r1
 800d022:	0020      	movs	r0, r4
 800d024:	0029      	movs	r1, r5
 800d026:	f005 f89f 	bl	8012168 <atan2>
 800d02a:	0002      	movs	r2, r0
 800d02c:	000b      	movs	r3, r1
 800d02e:	0010      	movs	r0, r2
 800d030:	0019      	movs	r1, r3
 800d032:	f7f6 f847 	bl	80030c4 <__aeabi_d2f>
 800d036:	1c02      	adds	r2, r0, #0
 800d038:	4b54      	ldr	r3, [pc, #336]	; (800d18c <interfaceDrawLayer+0x2124>)
 800d03a:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(compassX, compassY, compassAngle,
 800d03c:	4b4f      	ldr	r3, [pc, #316]	; (800d17c <interfaceDrawLayer+0x2114>)
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	b298      	uxth	r0, r3
 800d042:	4b4f      	ldr	r3, [pc, #316]	; (800d180 <interfaceDrawLayer+0x2118>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	b299      	uxth	r1, r3
 800d048:	4b50      	ldr	r3, [pc, #320]	; (800d18c <interfaceDrawLayer+0x2124>)
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	4b50      	ldr	r3, [pc, #320]	; (800d190 <interfaceDrawLayer+0x2128>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	b29c      	uxth	r4, r3
 800d052:	4b3f      	ldr	r3, [pc, #252]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	b2db      	uxtb	r3, r3
 800d058:	b29b      	uxth	r3, r3
 800d05a:	2500      	movs	r5, #0
 800d05c:	9503      	str	r5, [sp, #12]
 800d05e:	2502      	movs	r5, #2
 800d060:	9502      	str	r5, [sp, #8]
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	0023      	movs	r3, r4
 800d06a:	f7fc f8d5 	bl	8009218 <Paint_DrawPointer>
					compassPointerLength, 0, colorSecond, DOT_PIXEL_2X2,
					LINE_STYLE_SOLID);
			Paint_DrawPointer(compassX, compassY, compassAngle + 3.14,
 800d06e:	4b43      	ldr	r3, [pc, #268]	; (800d17c <interfaceDrawLayer+0x2114>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b29c      	uxth	r4, r3
 800d074:	4b42      	ldr	r3, [pc, #264]	; (800d180 <interfaceDrawLayer+0x2118>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	b29d      	uxth	r5, r3
 800d07a:	4b44      	ldr	r3, [pc, #272]	; (800d18c <interfaceDrawLayer+0x2124>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	1c18      	adds	r0, r3, #0
 800d080:	f7f5 ffd8 	bl	8003034 <__aeabi_f2d>
 800d084:	4a43      	ldr	r2, [pc, #268]	; (800d194 <interfaceDrawLayer+0x212c>)
 800d086:	4b44      	ldr	r3, [pc, #272]	; (800d198 <interfaceDrawLayer+0x2130>)
 800d088:	f7f4 f9bc 	bl	8001404 <__aeabi_dadd>
 800d08c:	0002      	movs	r2, r0
 800d08e:	000b      	movs	r3, r1
 800d090:	0010      	movs	r0, r2
 800d092:	0019      	movs	r1, r3
 800d094:	f7f6 f816 	bl	80030c4 <__aeabi_d2f>
 800d098:	4b3d      	ldr	r3, [pc, #244]	; (800d190 <interfaceDrawLayer+0x2128>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	4b2c      	ldr	r3, [pc, #176]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	9103      	str	r1, [sp, #12]
 800d0aa:	2101      	movs	r1, #1
 800d0ac:	9102      	str	r1, [sp, #8]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	0013      	movs	r3, r2
 800d0b6:	1c02      	adds	r2, r0, #0
 800d0b8:	0029      	movs	r1, r5
 800d0ba:	0020      	movs	r0, r4
 800d0bc:	f7fc f8ac 	bl	8009218 <Paint_DrawPointer>

		}

		//										DIGITAL COMPASS - ALT

		if (showNaviDigital == 1) {
 800d0c0:	4b36      	ldr	r3, [pc, #216]	; (800d19c <interfaceDrawLayer+0x2134>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d000      	beq.n	800d0ca <interfaceDrawLayer+0x2062>
 800d0c8:	e0f5      	b.n	800d2b6 <interfaceDrawLayer+0x224e>
			if (altitudeValue < 0) {
 800d0ca:	4b2b      	ldr	r3, [pc, #172]	; (800d178 <interfaceDrawLayer+0x2110>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da66      	bge.n	800d1a0 <interfaceDrawLayer+0x2138>
				Paint_DrawChar(compassX, compassY + 31, '-', &Font12,
 800d0d2:	4b2a      	ldr	r3, [pc, #168]	; (800d17c <interfaceDrawLayer+0x2114>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	b298      	uxth	r0, r3
 800d0d8:	4b29      	ldr	r3, [pc, #164]	; (800d180 <interfaceDrawLayer+0x2118>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	331f      	adds	r3, #31
 800d0e0:	b299      	uxth	r1, r3
 800d0e2:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	4a18      	ldr	r2, [pc, #96]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800d0ec:	7812      	ldrb	r2, [r2, #0]
 800d0ee:	b2d2      	uxtb	r2, r2
 800d0f0:	b292      	uxth	r2, r2
 800d0f2:	4c18      	ldr	r4, [pc, #96]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800d0f4:	9201      	str	r2, [sp, #4]
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	0023      	movs	r3, r4
 800d0fa:	222d      	movs	r2, #45	; 0x2d
 800d0fc:	f7fc fc94 	bl	8009a28 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX + 8, compassY + 31, abs(altitudeValue),
 800d100:	4b1e      	ldr	r3, [pc, #120]	; (800d17c <interfaceDrawLayer+0x2114>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	b29b      	uxth	r3, r3
 800d106:	3308      	adds	r3, #8
 800d108:	b298      	uxth	r0, r3
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <interfaceDrawLayer+0x2118>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	331f      	adds	r3, #31
 800d112:	b299      	uxth	r1, r3
 800d114:	4b18      	ldr	r3, [pc, #96]	; (800d178 <interfaceDrawLayer+0x2110>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	17da      	asrs	r2, r3, #31
 800d11a:	189c      	adds	r4, r3, r2
 800d11c:	4054      	eors	r4, r2
 800d11e:	4b0c      	ldr	r3, [pc, #48]	; (800d150 <interfaceDrawLayer+0x20e8>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b2db      	uxtb	r3, r3
 800d124:	b29b      	uxth	r3, r3
 800d126:	4a09      	ldr	r2, [pc, #36]	; (800d14c <interfaceDrawLayer+0x20e4>)
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	b2d2      	uxtb	r2, r2
 800d12c:	b292      	uxth	r2, r2
 800d12e:	4d09      	ldr	r5, [pc, #36]	; (800d154 <interfaceDrawLayer+0x20ec>)
 800d130:	9201      	str	r2, [sp, #4]
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	002b      	movs	r3, r5
 800d136:	0022      	movs	r2, r4
 800d138:	f7fc fdd8 	bl	8009cec <Paint_DrawNum>
 800d13c:	e049      	b.n	800d1d2 <interfaceDrawLayer+0x216a>
 800d13e:	46c0      	nop			; (mov r8, r8)
 800d140:	20000596 	.word	0x20000596
 800d144:	2000030a 	.word	0x2000030a
 800d148:	20000304 	.word	0x20000304
 800d14c:	20000293 	.word	0x20000293
 800d150:	20000605 	.word	0x20000605
 800d154:	20000008 	.word	0x20000008
 800d158:	200005ed 	.word	0x200005ed
 800d15c:	2000057d 	.word	0x2000057d
 800d160:	200002c4 	.word	0x200002c4
 800d164:	20000597 	.word	0x20000597
 800d168:	2000064a 	.word	0x2000064a
 800d16c:	200003a2 	.word	0x200003a2
 800d170:	2000014c 	.word	0x2000014c
 800d174:	20000146 	.word	0x20000146
 800d178:	20000590 	.word	0x20000590
 800d17c:	20000625 	.word	0x20000625
 800d180:	200003a4 	.word	0x200003a4
 800d184:	200004e0 	.word	0x200004e0
 800d188:	2000057a 	.word	0x2000057a
 800d18c:	2000013c 	.word	0x2000013c
 800d190:	200002d2 	.word	0x200002d2
 800d194:	51eb851f 	.word	0x51eb851f
 800d198:	40091eb8 	.word	0x40091eb8
 800d19c:	20000565 	.word	0x20000565
						&Font12, colorSecond, colorMain);
			} else {
				Paint_DrawNum(compassX, compassY + 31, altitudeValue, &Font12,
 800d1a0:	4ba3      	ldr	r3, [pc, #652]	; (800d430 <interfaceDrawLayer+0x23c8>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	b298      	uxth	r0, r3
 800d1a6:	4ba3      	ldr	r3, [pc, #652]	; (800d434 <interfaceDrawLayer+0x23cc>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	331f      	adds	r3, #31
 800d1ae:	b299      	uxth	r1, r3
 800d1b0:	4ba1      	ldr	r3, [pc, #644]	; (800d438 <interfaceDrawLayer+0x23d0>)
 800d1b2:	681c      	ldr	r4, [r3, #0]
 800d1b4:	4ba1      	ldr	r3, [pc, #644]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	4aa0      	ldr	r2, [pc, #640]	; (800d440 <interfaceDrawLayer+0x23d8>)
 800d1be:	7812      	ldrb	r2, [r2, #0]
 800d1c0:	b2d2      	uxtb	r2, r2
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	4d9f      	ldr	r5, [pc, #636]	; (800d444 <interfaceDrawLayer+0x23dc>)
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	002b      	movs	r3, r5
 800d1cc:	0022      	movs	r2, r4
 800d1ce:	f7fc fd8d 	bl	8009cec <Paint_DrawNum>
						colorSecond, colorMain);
			}

			//										DIGITAL COMPASS - COMPASS

			uint16_t compassCenterX = compassX + 24;
 800d1d2:	4b97      	ldr	r3, [pc, #604]	; (800d430 <interfaceDrawLayer+0x23c8>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	260a      	movs	r6, #10
 800d1da:	19bb      	adds	r3, r7, r6
 800d1dc:	3218      	adds	r2, #24
 800d1de:	801a      	strh	r2, [r3, #0]
			uint16_t compassCenterY = compassY + 14;
 800d1e0:	4b94      	ldr	r3, [pc, #592]	; (800d434 <interfaceDrawLayer+0x23cc>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	2108      	movs	r1, #8
 800d1e8:	187b      	adds	r3, r7, r1
 800d1ea:	320e      	adds	r2, #14
 800d1ec:	801a      	strh	r2, [r3, #0]

			Paint_DrawPoint(compassCenterX + magneticFieldX,
 800d1ee:	4b96      	ldr	r3, [pc, #600]	; (800d448 <interfaceDrawLayer+0x23e0>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	5e9b      	ldrsh	r3, [r3, r2]
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	19bb      	adds	r3, r7, r6
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	18d3      	adds	r3, r2, r3
 800d1fc:	b298      	uxth	r0, r3
 800d1fe:	4b93      	ldr	r3, [pc, #588]	; (800d44c <interfaceDrawLayer+0x23e4>)
 800d200:	2200      	movs	r2, #0
 800d202:	5e9b      	ldrsh	r3, [r3, r2]
 800d204:	b29a      	uxth	r2, r3
 800d206:	000c      	movs	r4, r1
 800d208:	187b      	adds	r3, r7, r1
 800d20a:	881b      	ldrh	r3, [r3, #0]
 800d20c:	18d3      	adds	r3, r2, r3
 800d20e:	b299      	uxth	r1, r3
 800d210:	4b8a      	ldr	r3, [pc, #552]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	b2db      	uxtb	r3, r3
 800d216:	b29a      	uxth	r2, r3
 800d218:	2301      	movs	r3, #1
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	2303      	movs	r3, #3
 800d21e:	f7fb fe33 	bl	8008e88 <Paint_DrawPoint>
					compassCenterY + magneticFieldY, colorSecond, DOT_PIXEL_3X3,
					DOT_STYLE_DFT);

			Paint_DrawLine(compassX, compassCenterY + magneticFieldY,
 800d222:	4b83      	ldr	r3, [pc, #524]	; (800d430 <interfaceDrawLayer+0x23c8>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	b298      	uxth	r0, r3
 800d228:	4b88      	ldr	r3, [pc, #544]	; (800d44c <interfaceDrawLayer+0x23e4>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	5e9b      	ldrsh	r3, [r3, r2]
 800d22e:	b29a      	uxth	r2, r3
 800d230:	0025      	movs	r5, r4
 800d232:	193b      	adds	r3, r7, r4
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	18d3      	adds	r3, r2, r3
 800d238:	b299      	uxth	r1, r3
 800d23a:	4b7d      	ldr	r3, [pc, #500]	; (800d430 <interfaceDrawLayer+0x23c8>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	3330      	adds	r3, #48	; 0x30
 800d242:	b29c      	uxth	r4, r3
 800d244:	4b81      	ldr	r3, [pc, #516]	; (800d44c <interfaceDrawLayer+0x23e4>)
 800d246:	2200      	movs	r2, #0
 800d248:	5e9b      	ldrsh	r3, [r3, r2]
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	197b      	adds	r3, r7, r5
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	18d3      	adds	r3, r2, r3
 800d252:	b29a      	uxth	r2, r3
 800d254:	4b79      	ldr	r3, [pc, #484]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	2500      	movs	r5, #0
 800d25e:	9502      	str	r5, [sp, #8]
 800d260:	2501      	movs	r5, #1
 800d262:	9501      	str	r5, [sp, #4]
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	0013      	movs	r3, r2
 800d268:	0022      	movs	r2, r4
 800d26a:	f7fb fef7 	bl	800905c <Paint_DrawLine>
					compassX + 48, compassCenterY + magneticFieldY, colorSecond,
					DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			Paint_DrawLine(compassCenterX + magneticFieldX, compassY,
 800d26e:	4b76      	ldr	r3, [pc, #472]	; (800d448 <interfaceDrawLayer+0x23e0>)
 800d270:	2200      	movs	r2, #0
 800d272:	5e9b      	ldrsh	r3, [r3, r2]
 800d274:	b29a      	uxth	r2, r3
 800d276:	19bb      	adds	r3, r7, r6
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	18d3      	adds	r3, r2, r3
 800d27c:	b298      	uxth	r0, r3
 800d27e:	4b6d      	ldr	r3, [pc, #436]	; (800d434 <interfaceDrawLayer+0x23cc>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	b299      	uxth	r1, r3
 800d284:	4b70      	ldr	r3, [pc, #448]	; (800d448 <interfaceDrawLayer+0x23e0>)
 800d286:	2200      	movs	r2, #0
 800d288:	5e9b      	ldrsh	r3, [r3, r2]
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	19bb      	adds	r3, r7, r6
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	18d3      	adds	r3, r2, r3
 800d292:	b29a      	uxth	r2, r3
 800d294:	4b67      	ldr	r3, [pc, #412]	; (800d434 <interfaceDrawLayer+0x23cc>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	b29b      	uxth	r3, r3
 800d29a:	331d      	adds	r3, #29
 800d29c:	b29c      	uxth	r4, r3
 800d29e:	4b67      	ldr	r3, [pc, #412]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	2500      	movs	r5, #0
 800d2a8:	9502      	str	r5, [sp, #8]
 800d2aa:	2501      	movs	r5, #1
 800d2ac:	9501      	str	r5, [sp, #4]
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	0023      	movs	r3, r4
 800d2b2:	f7fb fed3 	bl	800905c <Paint_DrawLine>

		}

		//										PRESSURE POINTER

		if (showBarometer == 1) {
 800d2b6:	4b66      	ldr	r3, [pc, #408]	; (800d450 <interfaceDrawLayer+0x23e8>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d000      	beq.n	800d2c0 <interfaceDrawLayer+0x2258>
 800d2be:	e09a      	b.n	800d3f6 <interfaceDrawLayer+0x238e>

			pressureAngle = 2 * 3.14 / 100
					* ((int32_t) pressureValue - 950 - 25);
 800d2c0:	4b64      	ldr	r3, [pc, #400]	; (800d454 <interfaceDrawLayer+0x23ec>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a64      	ldr	r2, [pc, #400]	; (800d458 <interfaceDrawLayer+0x23f0>)
 800d2c6:	4694      	mov	ip, r2
 800d2c8:	4463      	add	r3, ip
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f7f5 fe5c 	bl	8002f88 <__aeabi_i2d>
 800d2d0:	4a62      	ldr	r2, [pc, #392]	; (800d45c <interfaceDrawLayer+0x23f4>)
 800d2d2:	4b63      	ldr	r3, [pc, #396]	; (800d460 <interfaceDrawLayer+0x23f8>)
 800d2d4:	f7f5 f806 	bl	80022e4 <__aeabi_dmul>
 800d2d8:	0002      	movs	r2, r0
 800d2da:	000b      	movs	r3, r1
 800d2dc:	0010      	movs	r0, r2
 800d2de:	0019      	movs	r1, r3
 800d2e0:	f7f5 fef0 	bl	80030c4 <__aeabi_d2f>
 800d2e4:	1c02      	adds	r2, r0, #0
			pressureAngle = 2 * 3.14 / 100
 800d2e6:	4b5f      	ldr	r3, [pc, #380]	; (800d464 <interfaceDrawLayer+0x23fc>)
 800d2e8:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, pressureAngle,
 800d2ea:	4b5f      	ldr	r3, [pc, #380]	; (800d468 <interfaceDrawLayer+0x2400>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	b298      	uxth	r0, r3
 800d2f0:	4b5e      	ldr	r3, [pc, #376]	; (800d46c <interfaceDrawLayer+0x2404>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b299      	uxth	r1, r3
 800d2f6:	4b5b      	ldr	r3, [pc, #364]	; (800d464 <interfaceDrawLayer+0x23fc>)
 800d2f8:	681c      	ldr	r4, [r3, #0]
 800d2fa:	4b5d      	ldr	r3, [pc, #372]	; (800d470 <interfaceDrawLayer+0x2408>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b29d      	uxth	r5, r3
 800d300:	4b5c      	ldr	r3, [pc, #368]	; (800d474 <interfaceDrawLayer+0x240c>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	b29b      	uxth	r3, r3
 800d306:	4a4d      	ldr	r2, [pc, #308]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d308:	7812      	ldrb	r2, [r2, #0]
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	b292      	uxth	r2, r2
 800d30e:	2600      	movs	r6, #0
 800d310:	9603      	str	r6, [sp, #12]
 800d312:	2602      	movs	r6, #2
 800d314:	9602      	str	r6, [sp, #8]
 800d316:	9201      	str	r2, [sp, #4]
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	002b      	movs	r3, r5
 800d31c:	1c22      	adds	r2, r4, #0
 800d31e:	f7fb ff7b 	bl	8009218 <Paint_DrawPointer>
					pressurePointerLength, pressurePointerShift, colorSecond,
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);

			Paint_DrawCircle(
					(cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800d322:	4b50      	ldr	r3, [pc, #320]	; (800d464 <interfaceDrawLayer+0x23fc>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	1c18      	adds	r0, r3, #0
 800d328:	f7f5 fe84 	bl	8003034 <__aeabi_f2d>
 800d32c:	0002      	movs	r2, r0
 800d32e:	000b      	movs	r3, r1
 800d330:	0010      	movs	r0, r2
 800d332:	0019      	movs	r1, r3
 800d334:	f004 fe90 	bl	8012058 <cos>
 800d338:	0004      	movs	r4, r0
 800d33a:	000d      	movs	r5, r1
 800d33c:	4b4d      	ldr	r3, [pc, #308]	; (800d474 <interfaceDrawLayer+0x240c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	0018      	movs	r0, r3
 800d342:	f7f5 fe21 	bl	8002f88 <__aeabi_i2d>
 800d346:	0002      	movs	r2, r0
 800d348:	000b      	movs	r3, r1
 800d34a:	0020      	movs	r0, r4
 800d34c:	0029      	movs	r1, r5
 800d34e:	f7f4 ffc9 	bl	80022e4 <__aeabi_dmul>
 800d352:	0002      	movs	r2, r0
 800d354:	000b      	movs	r3, r1
 800d356:	0014      	movs	r4, r2
 800d358:	001d      	movs	r5, r3
 800d35a:	4b43      	ldr	r3, [pc, #268]	; (800d468 <interfaceDrawLayer+0x2400>)
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	0018      	movs	r0, r3
 800d360:	f7f5 fe12 	bl	8002f88 <__aeabi_i2d>
 800d364:	0002      	movs	r2, r0
 800d366:	000b      	movs	r3, r1
 800d368:	0020      	movs	r0, r4
 800d36a:	0029      	movs	r1, r5
 800d36c:	f7f4 f84a 	bl	8001404 <__aeabi_dadd>
 800d370:	0002      	movs	r2, r0
 800d372:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800d374:	0010      	movs	r0, r2
 800d376:	0019      	movs	r1, r3
 800d378:	f7f3 f91e 	bl	80005b8 <__aeabi_d2uiz>
 800d37c:	0003      	movs	r3, r0
 800d37e:	b29e      	uxth	r6, r3
					(sin(pressureAngle) * pressurePointerShift) + mainStartY, 4,
 800d380:	4b38      	ldr	r3, [pc, #224]	; (800d464 <interfaceDrawLayer+0x23fc>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1c18      	adds	r0, r3, #0
 800d386:	f7f5 fe55 	bl	8003034 <__aeabi_f2d>
 800d38a:	0002      	movs	r2, r0
 800d38c:	000b      	movs	r3, r1
 800d38e:	0010      	movs	r0, r2
 800d390:	0019      	movs	r1, r3
 800d392:	f004 fea3 	bl	80120dc <sin>
 800d396:	0004      	movs	r4, r0
 800d398:	000d      	movs	r5, r1
 800d39a:	4b36      	ldr	r3, [pc, #216]	; (800d474 <interfaceDrawLayer+0x240c>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f7f5 fdf2 	bl	8002f88 <__aeabi_i2d>
 800d3a4:	0002      	movs	r2, r0
 800d3a6:	000b      	movs	r3, r1
 800d3a8:	0020      	movs	r0, r4
 800d3aa:	0029      	movs	r1, r5
 800d3ac:	f7f4 ff9a 	bl	80022e4 <__aeabi_dmul>
 800d3b0:	0002      	movs	r2, r0
 800d3b2:	000b      	movs	r3, r1
 800d3b4:	0014      	movs	r4, r2
 800d3b6:	001d      	movs	r5, r3
 800d3b8:	4b2c      	ldr	r3, [pc, #176]	; (800d46c <interfaceDrawLayer+0x2404>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f7f5 fde3 	bl	8002f88 <__aeabi_i2d>
 800d3c2:	0002      	movs	r2, r0
 800d3c4:	000b      	movs	r3, r1
 800d3c6:	0020      	movs	r0, r4
 800d3c8:	0029      	movs	r1, r5
 800d3ca:	f7f4 f81b 	bl	8001404 <__aeabi_dadd>
 800d3ce:	0002      	movs	r2, r0
 800d3d0:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800d3d2:	0010      	movs	r0, r2
 800d3d4:	0019      	movs	r1, r3
 800d3d6:	f7f3 f8ef 	bl	80005b8 <__aeabi_d2uiz>
 800d3da:	0003      	movs	r3, r0
 800d3dc:	b299      	uxth	r1, r3
 800d3de:	4b17      	ldr	r3, [pc, #92]	; (800d43c <interfaceDrawLayer+0x23d4>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	9201      	str	r2, [sp, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	9200      	str	r2, [sp, #0]
 800d3ee:	2204      	movs	r2, #4
 800d3f0:	0030      	movs	r0, r6
 800d3f2:	f7fc f8c7 	bl	8009584 <Paint_DrawCircle>
			//^ pointer
		}

		//										BATTERY STATE POINTER

		batteryStateAngle = 2 * 3.14 / 28 * (batteryState);
 800d3f6:	4b20      	ldr	r3, [pc, #128]	; (800d478 <interfaceDrawLayer+0x2410>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	f7f5 fdc4 	bl	8002f88 <__aeabi_i2d>
 800d400:	4a1e      	ldr	r2, [pc, #120]	; (800d47c <interfaceDrawLayer+0x2414>)
 800d402:	4b1f      	ldr	r3, [pc, #124]	; (800d480 <interfaceDrawLayer+0x2418>)
 800d404:	f7f4 ff6e 	bl	80022e4 <__aeabi_dmul>
 800d408:	0002      	movs	r2, r0
 800d40a:	000b      	movs	r3, r1
 800d40c:	0010      	movs	r0, r2
 800d40e:	0019      	movs	r1, r3
 800d410:	f7f5 fe58 	bl	80030c4 <__aeabi_d2f>
 800d414:	1c02      	adds	r2, r0, #0
 800d416:	4b1b      	ldr	r3, [pc, #108]	; (800d484 <interfaceDrawLayer+0x241c>)
 800d418:	601a      	str	r2, [r3, #0]

		if (showBatteryState) {
 800d41a:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <interfaceDrawLayer+0x2420>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d06e      	beq.n	800d500 <interfaceDrawLayer+0x2498>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800d422:	2312      	movs	r3, #18
 800d424:	18fb      	adds	r3, r7, r3
 800d426:	4a14      	ldr	r2, [pc, #80]	; (800d478 <interfaceDrawLayer+0x2410>)
 800d428:	7812      	ldrb	r2, [r2, #0]
 800d42a:	701a      	strb	r2, [r3, #0]
 800d42c:	e063      	b.n	800d4f6 <interfaceDrawLayer+0x248e>
 800d42e:	46c0      	nop			; (mov r8, r8)
 800d430:	20000625 	.word	0x20000625
 800d434:	200003a4 	.word	0x200003a4
 800d438:	20000590 	.word	0x20000590
 800d43c:	20000605 	.word	0x20000605
 800d440:	20000293 	.word	0x20000293
 800d444:	20000008 	.word	0x20000008
 800d448:	2000057a 	.word	0x2000057a
 800d44c:	200004e0 	.word	0x200004e0
 800d450:	20000159 	.word	0x20000159
 800d454:	20000584 	.word	0x20000584
 800d458:	fffffc31 	.word	0xfffffc31
 800d45c:	2a305533 	.word	0x2a305533
 800d460:	3fb013a9 	.word	0x3fb013a9
 800d464:	20000644 	.word	0x20000644
 800d468:	200003a3 	.word	0x200003a3
 800d46c:	20000147 	.word	0x20000147
 800d470:	2000060c 	.word	0x2000060c
 800d474:	2000057c 	.word	0x2000057c
 800d478:	20000300 	.word	0x20000300
 800d47c:	efe89823 	.word	0xefe89823
 800d480:	3fccb564 	.word	0x3fccb564
 800d484:	2000012c 	.word	0x2000012c
 800d488:	20000310 	.word	0x20000310
				batteryStateAngle = 2 * 3.14 / 28 * (i);
 800d48c:	2112      	movs	r1, #18
 800d48e:	187b      	adds	r3, r7, r1
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	0018      	movs	r0, r3
 800d494:	f7f5 fd78 	bl	8002f88 <__aeabi_i2d>
 800d498:	4a97      	ldr	r2, [pc, #604]	; (800d6f8 <interfaceDrawLayer+0x2690>)
 800d49a:	4b98      	ldr	r3, [pc, #608]	; (800d6fc <interfaceDrawLayer+0x2694>)
 800d49c:	f7f4 ff22 	bl	80022e4 <__aeabi_dmul>
 800d4a0:	0002      	movs	r2, r0
 800d4a2:	000b      	movs	r3, r1
 800d4a4:	0010      	movs	r0, r2
 800d4a6:	0019      	movs	r1, r3
 800d4a8:	f7f5 fe0c 	bl	80030c4 <__aeabi_d2f>
 800d4ac:	1c02      	adds	r2, r0, #0
 800d4ae:	4b94      	ldr	r3, [pc, #592]	; (800d700 <interfaceDrawLayer+0x2698>)
 800d4b0:	601a      	str	r2, [r3, #0]

				Paint_DrawPointer(batteryStateStartX, batteryStateStartY,
 800d4b2:	4b94      	ldr	r3, [pc, #592]	; (800d704 <interfaceDrawLayer+0x269c>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	b298      	uxth	r0, r3
 800d4b8:	4b93      	ldr	r3, [pc, #588]	; (800d708 <interfaceDrawLayer+0x26a0>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b299      	uxth	r1, r3
 800d4be:	4b90      	ldr	r3, [pc, #576]	; (800d700 <interfaceDrawLayer+0x2698>)
 800d4c0:	681c      	ldr	r4, [r3, #0]
 800d4c2:	4b92      	ldr	r3, [pc, #584]	; (800d70c <interfaceDrawLayer+0x26a4>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b29d      	uxth	r5, r3
 800d4c8:	4b91      	ldr	r3, [pc, #580]	; (800d710 <interfaceDrawLayer+0x26a8>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	4a91      	ldr	r2, [pc, #580]	; (800d714 <interfaceDrawLayer+0x26ac>)
 800d4d0:	7812      	ldrb	r2, [r2, #0]
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	b292      	uxth	r2, r2
 800d4d6:	2600      	movs	r6, #0
 800d4d8:	9603      	str	r6, [sp, #12]
 800d4da:	2601      	movs	r6, #1
 800d4dc:	9602      	str	r6, [sp, #8]
 800d4de:	9201      	str	r2, [sp, #4]
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	002b      	movs	r3, r5
 800d4e4:	1c22      	adds	r2, r4, #0
 800d4e6:	f7fb fe97 	bl	8009218 <Paint_DrawPointer>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800d4ea:	2112      	movs	r1, #18
 800d4ec:	187b      	adds	r3, r7, r1
 800d4ee:	781a      	ldrb	r2, [r3, #0]
 800d4f0:	187b      	adds	r3, r7, r1
 800d4f2:	3201      	adds	r2, #1
 800d4f4:	701a      	strb	r2, [r3, #0]
 800d4f6:	2312      	movs	r3, #18
 800d4f8:	18fb      	adds	r3, r7, r3
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b07      	cmp	r3, #7
 800d4fe:	d9c5      	bls.n	800d48c <interfaceDrawLayer+0x2424>

		}

		//										HOUR POINTER

		hourAngle = 2 * 3.14 / 60 * ((hours12 * 5 + (minutes / 10)) - 15);
 800d500:	4b85      	ldr	r3, [pc, #532]	; (800d718 <interfaceDrawLayer+0x26b0>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b25b      	sxtb	r3, r3
 800d506:	001a      	movs	r2, r3
 800d508:	0013      	movs	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	189c      	adds	r4, r3, r2
 800d50e:	4b83      	ldr	r3, [pc, #524]	; (800d71c <interfaceDrawLayer+0x26b4>)
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	b21b      	sxth	r3, r3
 800d514:	210a      	movs	r1, #10
 800d516:	0018      	movs	r0, r3
 800d518:	f7f2 fe86 	bl	8000228 <__divsi3>
 800d51c:	0003      	movs	r3, r0
 800d51e:	b21b      	sxth	r3, r3
 800d520:	18e3      	adds	r3, r4, r3
 800d522:	3b0f      	subs	r3, #15
 800d524:	0018      	movs	r0, r3
 800d526:	f7f5 fd2f 	bl	8002f88 <__aeabi_i2d>
 800d52a:	4a7d      	ldr	r2, [pc, #500]	; (800d720 <interfaceDrawLayer+0x26b8>)
 800d52c:	4b7d      	ldr	r3, [pc, #500]	; (800d724 <interfaceDrawLayer+0x26bc>)
 800d52e:	f7f4 fed9 	bl	80022e4 <__aeabi_dmul>
 800d532:	0002      	movs	r2, r0
 800d534:	000b      	movs	r3, r1
 800d536:	0010      	movs	r0, r2
 800d538:	0019      	movs	r1, r3
 800d53a:	f7f5 fdc3 	bl	80030c4 <__aeabi_d2f>
 800d53e:	1c02      	adds	r2, r0, #0
 800d540:	4b79      	ldr	r3, [pc, #484]	; (800d728 <interfaceDrawLayer+0x26c0>)
 800d542:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800d544:	4b79      	ldr	r3, [pc, #484]	; (800d72c <interfaceDrawLayer+0x26c4>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b79      	ldr	r3, [pc, #484]	; (800d730 <interfaceDrawLayer+0x26c8>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	18d3      	adds	r3, r2, r3
 800d552:	b298      	uxth	r0, r3
 800d554:	4b77      	ldr	r3, [pc, #476]	; (800d734 <interfaceDrawLayer+0x26cc>)
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	b29a      	uxth	r2, r3
 800d55a:	4b75      	ldr	r3, [pc, #468]	; (800d730 <interfaceDrawLayer+0x26c8>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	b29b      	uxth	r3, r3
 800d560:	18d3      	adds	r3, r2, r3
 800d562:	b299      	uxth	r1, r3
 800d564:	4b70      	ldr	r3, [pc, #448]	; (800d728 <interfaceDrawLayer+0x26c0>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	4b73      	ldr	r3, [pc, #460]	; (800d738 <interfaceDrawLayer+0x26d0>)
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	b29c      	uxth	r4, r3
 800d56e:	4b73      	ldr	r3, [pc, #460]	; (800d73c <interfaceDrawLayer+0x26d4>)
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	b29b      	uxth	r3, r3
 800d576:	2500      	movs	r5, #0
 800d578:	9503      	str	r5, [sp, #12]
 800d57a:	2503      	movs	r5, #3
 800d57c:	9502      	str	r5, [sp, #8]
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	230f      	movs	r3, #15
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	0023      	movs	r3, r4
 800d586:	f7fb fe47 	bl	8009218 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, hourAngle, hourPointerLength,
				15, colorMain, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, hourAngle, hourPointerLength,
 800d58a:	4b68      	ldr	r3, [pc, #416]	; (800d72c <interfaceDrawLayer+0x26c4>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b298      	uxth	r0, r3
 800d590:	4b68      	ldr	r3, [pc, #416]	; (800d734 <interfaceDrawLayer+0x26cc>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	b299      	uxth	r1, r3
 800d596:	4b64      	ldr	r3, [pc, #400]	; (800d728 <interfaceDrawLayer+0x26c0>)
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b67      	ldr	r3, [pc, #412]	; (800d738 <interfaceDrawLayer+0x26d0>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b29c      	uxth	r4, r3
 800d5a0:	4b5c      	ldr	r3, [pc, #368]	; (800d714 <interfaceDrawLayer+0x26ac>)
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	2500      	movs	r5, #0
 800d5aa:	9503      	str	r5, [sp, #12]
 800d5ac:	2503      	movs	r5, #3
 800d5ae:	9502      	str	r5, [sp, #8]
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	230f      	movs	r3, #15
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	0023      	movs	r3, r4
 800d5b8:	f7fb fe2e 	bl	8009218 <Paint_DrawPointer>
				15, colorSecond, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^ pointer

		//										MINUTE POINTER

		minuteAngle = 2 * 3.14 / 60 * (minutes - 15);
 800d5bc:	4b57      	ldr	r3, [pc, #348]	; (800d71c <interfaceDrawLayer+0x26b4>)
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	3b0f      	subs	r3, #15
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f7f5 fcdf 	bl	8002f88 <__aeabi_i2d>
 800d5ca:	4a55      	ldr	r2, [pc, #340]	; (800d720 <interfaceDrawLayer+0x26b8>)
 800d5cc:	4b55      	ldr	r3, [pc, #340]	; (800d724 <interfaceDrawLayer+0x26bc>)
 800d5ce:	f7f4 fe89 	bl	80022e4 <__aeabi_dmul>
 800d5d2:	0002      	movs	r2, r0
 800d5d4:	000b      	movs	r3, r1
 800d5d6:	0010      	movs	r0, r2
 800d5d8:	0019      	movs	r1, r3
 800d5da:	f7f5 fd73 	bl	80030c4 <__aeabi_d2f>
 800d5de:	1c02      	adds	r2, r0, #0
 800d5e0:	4b57      	ldr	r3, [pc, #348]	; (800d740 <interfaceDrawLayer+0x26d8>)
 800d5e2:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800d5e4:	4b51      	ldr	r3, [pc, #324]	; (800d72c <interfaceDrawLayer+0x26c4>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	4b51      	ldr	r3, [pc, #324]	; (800d730 <interfaceDrawLayer+0x26c8>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	18d3      	adds	r3, r2, r3
 800d5f2:	b298      	uxth	r0, r3
 800d5f4:	4b4f      	ldr	r3, [pc, #316]	; (800d734 <interfaceDrawLayer+0x26cc>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	4b4d      	ldr	r3, [pc, #308]	; (800d730 <interfaceDrawLayer+0x26c8>)
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	18d3      	adds	r3, r2, r3
 800d602:	b299      	uxth	r1, r3
 800d604:	4b4e      	ldr	r3, [pc, #312]	; (800d740 <interfaceDrawLayer+0x26d8>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	4b4e      	ldr	r3, [pc, #312]	; (800d744 <interfaceDrawLayer+0x26dc>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b29c      	uxth	r4, r3
 800d60e:	4b4b      	ldr	r3, [pc, #300]	; (800d73c <interfaceDrawLayer+0x26d4>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	b29b      	uxth	r3, r3
 800d616:	2500      	movs	r5, #0
 800d618:	9503      	str	r5, [sp, #12]
 800d61a:	2502      	movs	r5, #2
 800d61c:	9502      	str	r5, [sp, #8]
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	230f      	movs	r3, #15
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	0023      	movs	r3, r4
 800d626:	f7fb fdf7 	bl	8009218 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, minuteAngle,
				minutePointerLength, 15, colorMain, DOT_PIXEL_2X2,
				LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, minuteAngle,
 800d62a:	4b40      	ldr	r3, [pc, #256]	; (800d72c <interfaceDrawLayer+0x26c4>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	b298      	uxth	r0, r3
 800d630:	4b40      	ldr	r3, [pc, #256]	; (800d734 <interfaceDrawLayer+0x26cc>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	b299      	uxth	r1, r3
 800d636:	4b42      	ldr	r3, [pc, #264]	; (800d740 <interfaceDrawLayer+0x26d8>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b42      	ldr	r3, [pc, #264]	; (800d744 <interfaceDrawLayer+0x26dc>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	b29c      	uxth	r4, r3
 800d640:	4b34      	ldr	r3, [pc, #208]	; (800d714 <interfaceDrawLayer+0x26ac>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	b2db      	uxtb	r3, r3
 800d646:	b29b      	uxth	r3, r3
 800d648:	2500      	movs	r5, #0
 800d64a:	9503      	str	r5, [sp, #12]
 800d64c:	2502      	movs	r5, #2
 800d64e:	9502      	str	r5, [sp, #8]
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	230f      	movs	r3, #15
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	0023      	movs	r3, r4
 800d658:	f7fb fdde 	bl	8009218 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		//^ pointer

		//										CHRONO MINUTE POINTER

		if (showChrono == 1) {
 800d65c:	4b3a      	ldr	r3, [pc, #232]	; (800d748 <interfaceDrawLayer+0x26e0>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d000      	beq.n	800d666 <interfaceDrawLayer+0x25fe>
 800d664:	e0aa      	b.n	800d7bc <interfaceDrawLayer+0x2754>

			chronoMinutesAngle = 2 * 3.14 / 30 * (chronoMinutes - 7.5);
 800d666:	4b39      	ldr	r3, [pc, #228]	; (800d74c <interfaceDrawLayer+0x26e4>)
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	b21b      	sxth	r3, r3
 800d66c:	0018      	movs	r0, r3
 800d66e:	f7f5 fc8b 	bl	8002f88 <__aeabi_i2d>
 800d672:	2200      	movs	r2, #0
 800d674:	4b36      	ldr	r3, [pc, #216]	; (800d750 <interfaceDrawLayer+0x26e8>)
 800d676:	f7f5 f8a1 	bl	80027bc <__aeabi_dsub>
 800d67a:	0002      	movs	r2, r0
 800d67c:	000b      	movs	r3, r1
 800d67e:	0010      	movs	r0, r2
 800d680:	0019      	movs	r1, r3
 800d682:	4a27      	ldr	r2, [pc, #156]	; (800d720 <interfaceDrawLayer+0x26b8>)
 800d684:	4b33      	ldr	r3, [pc, #204]	; (800d754 <interfaceDrawLayer+0x26ec>)
 800d686:	f7f4 fe2d 	bl	80022e4 <__aeabi_dmul>
 800d68a:	0002      	movs	r2, r0
 800d68c:	000b      	movs	r3, r1
 800d68e:	0010      	movs	r0, r2
 800d690:	0019      	movs	r1, r3
 800d692:	f7f5 fd17 	bl	80030c4 <__aeabi_d2f>
 800d696:	1c02      	adds	r2, r0, #0
 800d698:	4b2f      	ldr	r3, [pc, #188]	; (800d758 <interfaceDrawLayer+0x26f0>)
 800d69a:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoMinutesStartX, chronoMinutesStartY,
 800d69c:	4b2f      	ldr	r3, [pc, #188]	; (800d75c <interfaceDrawLayer+0x26f4>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	b298      	uxth	r0, r3
 800d6a2:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <interfaceDrawLayer+0x26f8>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	b299      	uxth	r1, r3
 800d6a8:	4b2b      	ldr	r3, [pc, #172]	; (800d758 <interfaceDrawLayer+0x26f0>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	4b2d      	ldr	r3, [pc, #180]	; (800d764 <interfaceDrawLayer+0x26fc>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b29c      	uxth	r4, r3
 800d6b2:	4b22      	ldr	r3, [pc, #136]	; (800d73c <interfaceDrawLayer+0x26d4>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	2500      	movs	r5, #0
 800d6bc:	9503      	str	r5, [sp, #12]
 800d6be:	2501      	movs	r5, #1
 800d6c0:	9502      	str	r5, [sp, #8]
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	0023      	movs	r3, r4
 800d6ca:	f7fb fda5 	bl	8009218 <Paint_DrawPointer>
					chronoMinutesAngle, chronoMinutesPointerLength, 0,
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			//										CHRONO HALF HOURS DOTS

			for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d6ce:	4b26      	ldr	r3, [pc, #152]	; (800d768 <interfaceDrawLayer+0x2700>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	18db      	adds	r3, r3, r3
 800d6d8:	b2dc      	uxtb	r4, r3
 800d6da:	4b1c      	ldr	r3, [pc, #112]	; (800d74c <interfaceDrawLayer+0x26e4>)
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	b21b      	sxth	r3, r3
 800d6e0:	211e      	movs	r1, #30
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	f7f2 fda0 	bl	8000228 <__divsi3>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	b21b      	sxth	r3, r3
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	2311      	movs	r3, #17
 800d6f0:	18fb      	adds	r3, r7, r3
 800d6f2:	18a2      	adds	r2, r4, r2
 800d6f4:	701a      	strb	r2, [r3, #0]
 800d6f6:	e05c      	b.n	800d7b2 <interfaceDrawLayer+0x274a>
 800d6f8:	efe89823 	.word	0xefe89823
 800d6fc:	3fccb564 	.word	0x3fccb564
 800d700:	2000012c 	.word	0x2000012c
 800d704:	200005f5 	.word	0x200005f5
 800d708:	20000650 	.word	0x20000650
 800d70c:	2000040d 	.word	0x2000040d
 800d710:	20000158 	.word	0x20000158
 800d714:	20000605 	.word	0x20000605
 800d718:	20000148 	.word	0x20000148
 800d71c:	20000638 	.word	0x20000638
 800d720:	46508dff 	.word	0x46508dff
 800d724:	3fbacb6f 	.word	0x3fbacb6f
 800d728:	20000618 	.word	0x20000618
 800d72c:	200003a3 	.word	0x200003a3
 800d730:	20000151 	.word	0x20000151
 800d734:	20000147 	.word	0x20000147
 800d738:	20000153 	.word	0x20000153
 800d73c:	20000293 	.word	0x20000293
 800d740:	2000056c 	.word	0x2000056c
 800d744:	200005ec 	.word	0x200005ec
 800d748:	20000308 	.word	0x20000308
 800d74c:	20000636 	.word	0x20000636
 800d750:	401e0000 	.word	0x401e0000
 800d754:	3fcacb6f 	.word	0x3fcacb6f
 800d758:	20000610 	.word	0x20000610
 800d75c:	2000062e 	.word	0x2000062e
 800d760:	20000606 	.word	0x20000606
 800d764:	20000150 	.word	0x20000150
 800d768:	2000030d 	.word	0x2000030d
					halfHours > 0; halfHours--) {
				Paint_DrawPoint(
						chronoMinutesStartX - chronoMinutesPointerLength
 800d76c:	4b8e      	ldr	r3, [pc, #568]	; (800d9a8 <interfaceDrawLayer+0x2940>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	b29a      	uxth	r2, r3
 800d772:	4b8e      	ldr	r3, [pc, #568]	; (800d9ac <interfaceDrawLayer+0x2944>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	b29b      	uxth	r3, r3
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	b29a      	uxth	r2, r3
				Paint_DrawPoint(
 800d77c:	2411      	movs	r4, #17
 800d77e:	193b      	adds	r3, r7, r4
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	b29b      	uxth	r3, r3
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	b29b      	uxth	r3, r3
 800d788:	18d3      	adds	r3, r2, r3
 800d78a:	b298      	uxth	r0, r3
 800d78c:	4b88      	ldr	r3, [pc, #544]	; (800d9b0 <interfaceDrawLayer+0x2948>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b05      	subs	r3, #5
 800d794:	b299      	uxth	r1, r3
 800d796:	4b87      	ldr	r3, [pc, #540]	; (800d9b4 <interfaceDrawLayer+0x294c>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	2301      	movs	r3, #1
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	f7fb fb70 	bl	8008e88 <Paint_DrawPoint>
					halfHours > 0; halfHours--) {
 800d7a8:	193b      	adds	r3, r7, r4
 800d7aa:	781a      	ldrb	r2, [r3, #0]
 800d7ac:	193b      	adds	r3, r7, r4
 800d7ae:	3a01      	subs	r2, #1
 800d7b0:	701a      	strb	r2, [r3, #0]
			for (uint8_t halfHours = (chronoHours * 2) + (chronoMinutes / 30);
 800d7b2:	2311      	movs	r3, #17
 800d7b4:	18fb      	adds	r3, r7, r3
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1d7      	bne.n	800d76c <interfaceDrawLayer+0x2704>

		}

		//										SECONDS POINTER

		secondAngle = 2 * 3.14 / 60 * (seconds - 15);
 800d7bc:	4b7e      	ldr	r3, [pc, #504]	; (800d9b8 <interfaceDrawLayer+0x2950>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	b25b      	sxtb	r3, r3
 800d7c2:	3b0f      	subs	r3, #15
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	f7f5 fbdf 	bl	8002f88 <__aeabi_i2d>
 800d7ca:	4a7c      	ldr	r2, [pc, #496]	; (800d9bc <interfaceDrawLayer+0x2954>)
 800d7cc:	4b7c      	ldr	r3, [pc, #496]	; (800d9c0 <interfaceDrawLayer+0x2958>)
 800d7ce:	f7f4 fd89 	bl	80022e4 <__aeabi_dmul>
 800d7d2:	0002      	movs	r2, r0
 800d7d4:	000b      	movs	r3, r1
 800d7d6:	0010      	movs	r0, r2
 800d7d8:	0019      	movs	r1, r3
 800d7da:	f7f5 fc73 	bl	80030c4 <__aeabi_d2f>
 800d7de:	1c02      	adds	r2, r0, #0
 800d7e0:	4b78      	ldr	r3, [pc, #480]	; (800d9c4 <interfaceDrawLayer+0x295c>)
 800d7e2:	601a      	str	r2, [r3, #0]

		if (showSeconds == 1) {
 800d7e4:	4b78      	ldr	r3, [pc, #480]	; (800d9c8 <interfaceDrawLayer+0x2960>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d118      	bne.n	800d81e <interfaceDrawLayer+0x27b6>
			Paint_DrawPointer(secondsStartX, secondsStartY, secondAngle,
 800d7ec:	4b77      	ldr	r3, [pc, #476]	; (800d9cc <interfaceDrawLayer+0x2964>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	b298      	uxth	r0, r3
 800d7f2:	4b77      	ldr	r3, [pc, #476]	; (800d9d0 <interfaceDrawLayer+0x2968>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b299      	uxth	r1, r3
 800d7f8:	4b72      	ldr	r3, [pc, #456]	; (800d9c4 <interfaceDrawLayer+0x295c>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b75      	ldr	r3, [pc, #468]	; (800d9d4 <interfaceDrawLayer+0x296c>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	b29c      	uxth	r4, r3
 800d802:	4b6c      	ldr	r3, [pc, #432]	; (800d9b4 <interfaceDrawLayer+0x294c>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	b2db      	uxtb	r3, r3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	2500      	movs	r5, #0
 800d80c:	9503      	str	r5, [sp, #12]
 800d80e:	2501      	movs	r5, #1
 800d810:	9502      	str	r5, [sp, #8]
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	2300      	movs	r3, #0
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	0023      	movs	r3, r4
 800d81a:	f7fb fcfd 	bl	8009218 <Paint_DrawPointer>
			//^pointer
		}

		//										CHRONO SECOND POINTER

		if (showChrono == 1) {
 800d81e:	4b6e      	ldr	r3, [pc, #440]	; (800d9d8 <interfaceDrawLayer+0x2970>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d14f      	bne.n	800d8c6 <interfaceDrawLayer+0x285e>

			chronoSecondsAngle = 2 * 3.14 / 60 * (chronoSeconds - 15);
 800d826:	4b6d      	ldr	r3, [pc, #436]	; (800d9dc <interfaceDrawLayer+0x2974>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	3b0f      	subs	r3, #15
 800d82e:	0018      	movs	r0, r3
 800d830:	f7f5 fbaa 	bl	8002f88 <__aeabi_i2d>
 800d834:	4a61      	ldr	r2, [pc, #388]	; (800d9bc <interfaceDrawLayer+0x2954>)
 800d836:	4b62      	ldr	r3, [pc, #392]	; (800d9c0 <interfaceDrawLayer+0x2958>)
 800d838:	f7f4 fd54 	bl	80022e4 <__aeabi_dmul>
 800d83c:	0002      	movs	r2, r0
 800d83e:	000b      	movs	r3, r1
 800d840:	0010      	movs	r0, r2
 800d842:	0019      	movs	r1, r3
 800d844:	f7f5 fc3e 	bl	80030c4 <__aeabi_d2f>
 800d848:	1c02      	adds	r2, r0, #0
 800d84a:	4b65      	ldr	r3, [pc, #404]	; (800d9e0 <interfaceDrawLayer+0x2978>)
 800d84c:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, chronoSecondsAngle,
 800d84e:	4b65      	ldr	r3, [pc, #404]	; (800d9e4 <interfaceDrawLayer+0x297c>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	b298      	uxth	r0, r3
 800d854:	4b64      	ldr	r3, [pc, #400]	; (800d9e8 <interfaceDrawLayer+0x2980>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	b299      	uxth	r1, r3
 800d85a:	4b61      	ldr	r3, [pc, #388]	; (800d9e0 <interfaceDrawLayer+0x2978>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	4b63      	ldr	r3, [pc, #396]	; (800d9ec <interfaceDrawLayer+0x2984>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	b29c      	uxth	r4, r3
 800d864:	4b62      	ldr	r3, [pc, #392]	; (800d9f0 <interfaceDrawLayer+0x2988>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	2500      	movs	r5, #0
 800d86e:	9503      	str	r5, [sp, #12]
 800d870:	2501      	movs	r5, #1
 800d872:	9502      	str	r5, [sp, #8]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	230f      	movs	r3, #15
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	0023      	movs	r3, r4
 800d87c:	f7fb fccc 	bl	8009218 <Paint_DrawPointer>
					chronoSecondsPointerLength, 15, colorSecond, DOT_PIXEL_1X1,
					LINE_STYLE_SOLID);
			//^ pointer

			Paint_DrawPointer(mainStartX + pointerShadowShift,
 800d880:	4b58      	ldr	r3, [pc, #352]	; (800d9e4 <interfaceDrawLayer+0x297c>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	b29a      	uxth	r2, r3
 800d886:	4b5b      	ldr	r3, [pc, #364]	; (800d9f4 <interfaceDrawLayer+0x298c>)
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	18d3      	adds	r3, r2, r3
 800d88e:	b298      	uxth	r0, r3
 800d890:	4b55      	ldr	r3, [pc, #340]	; (800d9e8 <interfaceDrawLayer+0x2980>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	b29a      	uxth	r2, r3
 800d896:	4b57      	ldr	r3, [pc, #348]	; (800d9f4 <interfaceDrawLayer+0x298c>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	18d3      	adds	r3, r2, r3
 800d89e:	b299      	uxth	r1, r3
 800d8a0:	4b4f      	ldr	r3, [pc, #316]	; (800d9e0 <interfaceDrawLayer+0x2978>)
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	4b51      	ldr	r3, [pc, #324]	; (800d9ec <interfaceDrawLayer+0x2984>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	b29c      	uxth	r4, r3
 800d8aa:	4b42      	ldr	r3, [pc, #264]	; (800d9b4 <interfaceDrawLayer+0x294c>)
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	2500      	movs	r5, #0
 800d8b4:	9503      	str	r5, [sp, #12]
 800d8b6:	2501      	movs	r5, #1
 800d8b8:	9502      	str	r5, [sp, #8]
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	230f      	movs	r3, #15
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	0023      	movs	r3, r4
 800d8c2:	f7fb fca9 	bl	8009218 <Paint_DrawPointer>
			//^shadow
		}

		//										CHRONO DECIMAL POINTER

		if (showChrono == 1) {
 800d8c6:	4b44      	ldr	r3, [pc, #272]	; (800d9d8 <interfaceDrawLayer+0x2970>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d132      	bne.n	800d934 <interfaceDrawLayer+0x28cc>

			chronoDecimalsAngle = 2 * 3.14 / 10 * (chronoDecimals - 2.5);
 800d8ce:	4b4a      	ldr	r3, [pc, #296]	; (800d9f8 <interfaceDrawLayer+0x2990>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	f7f5 fb58 	bl	8002f88 <__aeabi_i2d>
 800d8d8:	2200      	movs	r2, #0
 800d8da:	4b48      	ldr	r3, [pc, #288]	; (800d9fc <interfaceDrawLayer+0x2994>)
 800d8dc:	f7f4 ff6e 	bl	80027bc <__aeabi_dsub>
 800d8e0:	0002      	movs	r2, r0
 800d8e2:	000b      	movs	r3, r1
 800d8e4:	0010      	movs	r0, r2
 800d8e6:	0019      	movs	r1, r3
 800d8e8:	4a45      	ldr	r2, [pc, #276]	; (800da00 <interfaceDrawLayer+0x2998>)
 800d8ea:	4b46      	ldr	r3, [pc, #280]	; (800da04 <interfaceDrawLayer+0x299c>)
 800d8ec:	f7f4 fcfa 	bl	80022e4 <__aeabi_dmul>
 800d8f0:	0002      	movs	r2, r0
 800d8f2:	000b      	movs	r3, r1
 800d8f4:	0010      	movs	r0, r2
 800d8f6:	0019      	movs	r1, r3
 800d8f8:	f7f5 fbe4 	bl	80030c4 <__aeabi_d2f>
 800d8fc:	1c02      	adds	r2, r0, #0
 800d8fe:	4b42      	ldr	r3, [pc, #264]	; (800da08 <interfaceDrawLayer+0x29a0>)
 800d900:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoDecimalsStartX, chronoDecimalsStartY,
 800d902:	4b42      	ldr	r3, [pc, #264]	; (800da0c <interfaceDrawLayer+0x29a4>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	b298      	uxth	r0, r3
 800d908:	4b41      	ldr	r3, [pc, #260]	; (800da10 <interfaceDrawLayer+0x29a8>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b299      	uxth	r1, r3
 800d90e:	4b3e      	ldr	r3, [pc, #248]	; (800da08 <interfaceDrawLayer+0x29a0>)
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b40      	ldr	r3, [pc, #256]	; (800da14 <interfaceDrawLayer+0x29ac>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29c      	uxth	r4, r3
 800d918:	4b26      	ldr	r3, [pc, #152]	; (800d9b4 <interfaceDrawLayer+0x294c>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	b29b      	uxth	r3, r3
 800d920:	2500      	movs	r5, #0
 800d922:	9503      	str	r5, [sp, #12]
 800d924:	2501      	movs	r5, #1
 800d926:	9502      	str	r5, [sp, #8]
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	2300      	movs	r3, #0
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	0023      	movs	r3, r4
 800d930:	f7fb fc72 	bl	8009218 <Paint_DrawPointer>
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
		}

		//										DATE

		if (showDate == 1) {
 800d934:	4b38      	ldr	r3, [pc, #224]	; (800da18 <interfaceDrawLayer+0x29b0>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d118      	bne.n	800d96e <interfaceDrawLayer+0x2906>
			Paint_DrawNum(dateX, dateY, day, &Font12, colorSecond, colorMain); //date
 800d93c:	4b37      	ldr	r3, [pc, #220]	; (800da1c <interfaceDrawLayer+0x29b4>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b298      	uxth	r0, r3
 800d942:	4b37      	ldr	r3, [pc, #220]	; (800da20 <interfaceDrawLayer+0x29b8>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	b299      	uxth	r1, r3
 800d948:	4b36      	ldr	r3, [pc, #216]	; (800da24 <interfaceDrawLayer+0x29bc>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	001d      	movs	r5, r3
 800d950:	4b27      	ldr	r3, [pc, #156]	; (800d9f0 <interfaceDrawLayer+0x2988>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	b29b      	uxth	r3, r3
 800d958:	4a16      	ldr	r2, [pc, #88]	; (800d9b4 <interfaceDrawLayer+0x294c>)
 800d95a:	7812      	ldrb	r2, [r2, #0]
 800d95c:	b2d2      	uxtb	r2, r2
 800d95e:	b292      	uxth	r2, r2
 800d960:	4c31      	ldr	r4, [pc, #196]	; (800da28 <interfaceDrawLayer+0x29c0>)
 800d962:	9201      	str	r2, [sp, #4]
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	0023      	movs	r3, r4
 800d968:	002a      	movs	r2, r5
 800d96a:	f7fc f9bf 	bl	8009cec <Paint_DrawNum>
		}

		//										LOCK INDICATOR
		if (flagLocked == LOCKED) {
 800d96e:	4b2f      	ldr	r3, [pc, #188]	; (800da2c <interfaceDrawLayer+0x29c4>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b01      	cmp	r3, #1
 800d976:	d010      	beq.n	800d99a <interfaceDrawLayer+0x2932>
//			Paint_DrawCircle(mainStartX, mainStartY, 5, colorSecond,
//					DOT_PIXEL_2X2, DRAW_FILL_FULL);
//			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
//								DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		} else {
			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
 800d978:	4b1a      	ldr	r3, [pc, #104]	; (800d9e4 <interfaceDrawLayer+0x297c>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	b298      	uxth	r0, r3
 800d97e:	4b1a      	ldr	r3, [pc, #104]	; (800d9e8 <interfaceDrawLayer+0x2980>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	b299      	uxth	r1, r3
 800d984:	4b1a      	ldr	r3, [pc, #104]	; (800d9f0 <interfaceDrawLayer+0x2988>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	2200      	movs	r2, #0
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	2202      	movs	r2, #2
 800d992:	9200      	str	r2, [sp, #0]
 800d994:	220e      	movs	r2, #14
 800d996:	f7fb fdf5 	bl	8009584 <Paint_DrawCircle>
					DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

	}

}
 800d99a:	46c0      	nop			; (mov r8, r8)
 800d99c:	46bd      	mov	sp, r7
 800d99e:	b007      	add	sp, #28
 800d9a0:	bcc0      	pop	{r6, r7}
 800d9a2:	46b9      	mov	r9, r7
 800d9a4:	46b0      	mov	r8, r6
 800d9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a8:	2000062e 	.word	0x2000062e
 800d9ac:	20000150 	.word	0x20000150
 800d9b0:	20000606 	.word	0x20000606
 800d9b4:	20000293 	.word	0x20000293
 800d9b8:	200005eb 	.word	0x200005eb
 800d9bc:	46508dff 	.word	0x46508dff
 800d9c0:	3fbacb6f 	.word	0x3fbacb6f
 800d9c4:	20000620 	.word	0x20000620
 800d9c8:	2000013a 	.word	0x2000013a
 800d9cc:	20000627 	.word	0x20000627
 800d9d0:	200002d3 	.word	0x200002d3
 800d9d4:	200005ea 	.word	0x200005ea
 800d9d8:	20000308 	.word	0x20000308
 800d9dc:	200005f6 	.word	0x200005f6
 800d9e0:	20000608 	.word	0x20000608
 800d9e4:	200003a3 	.word	0x200003a3
 800d9e8:	20000147 	.word	0x20000147
 800d9ec:	20000311 	.word	0x20000311
 800d9f0:	20000605 	.word	0x20000605
 800d9f4:	20000151 	.word	0x20000151
 800d9f8:	20000154 	.word	0x20000154
 800d9fc:	40040000 	.word	0x40040000
 800da00:	74bc6a7f 	.word	0x74bc6a7f
 800da04:	3fe41893 	.word	0x3fe41893
 800da08:	200002c8 	.word	0x200002c8
 800da0c:	20000599 	.word	0x20000599
 800da10:	2000059a 	.word	0x2000059a
 800da14:	20000642 	.word	0x20000642
 800da18:	20000152 	.word	0x20000152
 800da1c:	20000634 	.word	0x20000634
 800da20:	200001c0 	.word	0x200001c0
 800da24:	200005f8 	.word	0x200005f8
 800da28:	20000008 	.word	0x20000008
 800da2c:	2000040f 	.word	0x2000040f

0800da30 <interfaceDrawBatteryWarning>:

void interfaceDrawBatteryWarning() {
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af02      	add	r7, sp, #8
	interfaceClear();
 800da36:	f7fd fb09 	bl	800b04c <interfaceClear>
	Paint_DrawString_EN(105, 90, "CHARGE", &Font16, colorSecond, colorMain);
 800da3a:	4b0b      	ldr	r3, [pc, #44]	; (800da68 <interfaceDrawBatteryWarning+0x38>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	b29b      	uxth	r3, r3
 800da42:	4a0a      	ldr	r2, [pc, #40]	; (800da6c <interfaceDrawBatteryWarning+0x3c>)
 800da44:	7812      	ldrb	r2, [r2, #0]
 800da46:	b2d2      	uxtb	r2, r2
 800da48:	b292      	uxth	r2, r2
 800da4a:	4809      	ldr	r0, [pc, #36]	; (800da70 <interfaceDrawBatteryWarning+0x40>)
 800da4c:	4909      	ldr	r1, [pc, #36]	; (800da74 <interfaceDrawBatteryWarning+0x44>)
 800da4e:	9201      	str	r2, [sp, #4]
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	0003      	movs	r3, r0
 800da54:	000a      	movs	r2, r1
 800da56:	215a      	movs	r1, #90	; 0x5a
 800da58:	2069      	movs	r0, #105	; 0x69
 800da5a:	f7fc f8c9 	bl	8009bf0 <Paint_DrawString_EN>
	interfaceWrite();	//burn framebuffer
 800da5e:	f7fd fad7 	bl	800b010 <interfaceWrite>
}
 800da62:	46c0      	nop			; (mov r8, r8)
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20000605 	.word	0x20000605
 800da6c:	20000293 	.word	0x20000293
 800da70:	20000010 	.word	0x20000010
 800da74:	08013dc0 	.word	0x08013dc0

0800da78 <rtcInit>:
#include "main.h"
#include "../RTC/rtc.h"
#include <stdint.h>

void rtcInit(void) {
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 800da7c:	4b04      	ldr	r3, [pc, #16]	; (800da90 <rtcInit+0x18>)
 800da7e:	0018      	movs	r0, r3
 800da80:	f7f8 fd72 	bl	8006568 <HAL_RTC_Init>
	mode = MODE_NORMAL
 800da84:	4b03      	ldr	r3, [pc, #12]	; (800da94 <rtcInit+0x1c>)
 800da86:	2200      	movs	r2, #0
 800da88:	701a      	strb	r2, [r3, #0]
	;

}
 800da8a:	46c0      	nop			; (mov r8, r8)
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	200006c8 	.word	0x200006c8
 800da94:	20000410 	.word	0x20000410

0800da98 <rtcGetTime>:


void rtcGetTime() {
 800da98:	b5b0      	push	{r4, r5, r7, lr}
 800da9a:	b08e      	sub	sp, #56	; 0x38
 800da9c:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800da9e:	4910      	ldr	r1, [pc, #64]	; (800dae0 <rtcGetTime+0x48>)
 800daa0:	4b10      	ldr	r3, [pc, #64]	; (800dae4 <rtcGetTime+0x4c>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	0018      	movs	r0, r3
 800daa6:	f7f8 fe9d 	bl	80067e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800daaa:	490f      	ldr	r1, [pc, #60]	; (800dae8 <rtcGetTime+0x50>)
 800daac:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <rtcGetTime+0x4c>)
 800daae:	2200      	movs	r2, #0
 800dab0:	0018      	movs	r0, r3
 800dab2:	f7f8 ff85 	bl	80069c0 <HAL_RTC_GetDate>

	hours = sTime.Hours;
 800dab6:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <rtcGetTime+0x48>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	b25a      	sxtb	r2, r3
 800dabc:	4b0b      	ldr	r3, [pc, #44]	; (800daec <rtcGetTime+0x54>)
 800dabe:	701a      	strb	r2, [r3, #0]

	if (hours >= 12) {
 800dac0:	4b0a      	ldr	r3, [pc, #40]	; (800daec <rtcGetTime+0x54>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	2b0b      	cmp	r3, #11
 800dac8:	dd14      	ble.n	800daf4 <rtcGetTime+0x5c>
		hours12 = hours - 12;
 800daca:	4b08      	ldr	r3, [pc, #32]	; (800daec <rtcGetTime+0x54>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b25b      	sxtb	r3, r3
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	3b0c      	subs	r3, #12
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	b25a      	sxtb	r2, r3
 800dad8:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <rtcGetTime+0x58>)
 800dada:	701a      	strb	r2, [r3, #0]
 800dadc:	e00f      	b.n	800dafe <rtcGetTime+0x66>
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	200001ac 	.word	0x200001ac
 800dae4:	200006c8 	.word	0x200006c8
 800dae8:	20000588 	.word	0x20000588
 800daec:	2000064b 	.word	0x2000064b
 800daf0:	20000148 	.word	0x20000148
	} else {
		hours12 = hours;
 800daf4:	4bf4      	ldr	r3, [pc, #976]	; (800dec8 <rtcGetTime+0x430>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	b25a      	sxtb	r2, r3
 800dafa:	4bf4      	ldr	r3, [pc, #976]	; (800decc <rtcGetTime+0x434>)
 800dafc:	701a      	strb	r2, [r3, #0]
	}

	minutes = sTime.Minutes;
 800dafe:	4bf4      	ldr	r3, [pc, #976]	; (800ded0 <rtcGetTime+0x438>)
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	b21a      	sxth	r2, r3
 800db04:	4bf3      	ldr	r3, [pc, #972]	; (800ded4 <rtcGetTime+0x43c>)
 800db06:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 800db08:	4bf1      	ldr	r3, [pc, #964]	; (800ded0 <rtcGetTime+0x438>)
 800db0a:	789b      	ldrb	r3, [r3, #2]
 800db0c:	b25a      	sxtb	r2, r3
 800db0e:	4bf2      	ldr	r3, [pc, #968]	; (800ded8 <rtcGetTime+0x440>)
 800db10:	701a      	strb	r2, [r3, #0]

	decimals = (((255 - sTime.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800db12:	4bef      	ldr	r3, [pc, #956]	; (800ded0 <rtcGetTime+0x438>)
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	0013      	movs	r3, r2
 800db18:	065b      	lsls	r3, r3, #25
 800db1a:	1a9b      	subs	r3, r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	189b      	adds	r3, r3, r2
 800db20:	00db      	lsls	r3, r3, #3
 800db22:	1a9b      	subs	r3, r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4aed      	ldr	r2, [pc, #948]	; (800dedc <rtcGetTime+0x444>)
 800db28:	4694      	mov	ip, r2
 800db2a:	4463      	add	r3, ip
 800db2c:	49ec      	ldr	r1, [pc, #944]	; (800dee0 <rtcGetTime+0x448>)
 800db2e:	0018      	movs	r0, r3
 800db30:	f7f2 faf0 	bl	8000114 <__udivsi3>
 800db34:	0003      	movs	r3, r0
 800db36:	001a      	movs	r2, r3
 800db38:	4bea      	ldr	r3, [pc, #936]	; (800dee4 <rtcGetTime+0x44c>)
 800db3a:	601a      	str	r2, [r3, #0]

	day = sDate.Date;
 800db3c:	4bea      	ldr	r3, [pc, #936]	; (800dee8 <rtcGetTime+0x450>)
 800db3e:	789a      	ldrb	r2, [r3, #2]
 800db40:	4bea      	ldr	r3, [pc, #936]	; (800deec <rtcGetTime+0x454>)
 800db42:	701a      	strb	r2, [r3, #0]
	month = sDate.Month;
 800db44:	4be8      	ldr	r3, [pc, #928]	; (800dee8 <rtcGetTime+0x450>)
 800db46:	785a      	ldrb	r2, [r3, #1]
 800db48:	4be9      	ldr	r3, [pc, #932]	; (800def0 <rtcGetTime+0x458>)
 800db4a:	701a      	strb	r2, [r3, #0]
	year = sDate.Year;
 800db4c:	4be6      	ldr	r3, [pc, #920]	; (800dee8 <rtcGetTime+0x450>)
 800db4e:	78da      	ldrb	r2, [r3, #3]
 800db50:	4be8      	ldr	r3, [pc, #928]	; (800def4 <rtcGetTime+0x45c>)
 800db52:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (month + 9) / 12;
 800db54:	4be6      	ldr	r3, [pc, #920]	; (800def0 <rtcGetTime+0x458>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	3309      	adds	r3, #9
 800db5c:	210c      	movs	r1, #12
 800db5e:	0018      	movs	r0, r3
 800db60:	f7f2 fb62 	bl	8000228 <__divsi3>
 800db64:	0003      	movs	r3, r0
 800db66:	0018      	movs	r0, r3
 800db68:	f7f3 fbca 	bl	8001300 <__aeabi_i2f>
 800db6c:	1c03      	adds	r3, r0, #0
 800db6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t A = 4716 + (year+2000) + (uint32_t) X;
 800db70:	4be0      	ldr	r3, [pc, #896]	; (800def4 <rtcGetTime+0x45c>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	b2db      	uxtb	r3, r3
 800db76:	001c      	movs	r4, r3
 800db78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db7a:	f7f2 fd05 	bl	8000588 <__aeabi_f2uiz>
 800db7e:	0003      	movs	r3, r0
 800db80:	18e3      	adds	r3, r4, r3
 800db82:	4add      	ldr	r2, [pc, #884]	; (800def8 <rtcGetTime+0x460>)
 800db84:	4694      	mov	ip, r2
 800db86:	4463      	add	r3, ip
 800db88:	633b      	str	r3, [r7, #48]	; 0x30
	float Y = 275 * month / 9;
 800db8a:	4bd9      	ldr	r3, [pc, #868]	; (800def0 <rtcGetTime+0x458>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	001a      	movs	r2, r3
 800db92:	0013      	movs	r3, r2
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	1a9b      	subs	r3, r3, r2
 800db98:	00db      	lsls	r3, r3, #3
 800db9a:	1a9b      	subs	r3, r3, r2
 800db9c:	009a      	lsls	r2, r3, #2
 800db9e:	189b      	adds	r3, r3, r2
 800dba0:	2109      	movs	r1, #9
 800dba2:	0018      	movs	r0, r3
 800dba4:	f7f2 fb40 	bl	8000228 <__divsi3>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	0018      	movs	r0, r3
 800dbac:	f7f3 fba8 	bl	8001300 <__aeabi_i2f>
 800dbb0:	1c03      	adds	r3, r0, #0
 800dbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	float V = 7 * A / 4;
 800dbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb6:	0013      	movs	r3, r2
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	1a9b      	subs	r3, r3, r2
 800dbbc:	089b      	lsrs	r3, r3, #2
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	f7f3 fbe4 	bl	800138c <__aeabi_ui2f>
 800dbc4:	1c03      	adds	r3, r0, #0
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
	float B = 1729279.5 + 367 * (year+2000) + (uint32_t) Y - (uint32_t) V + day;
 800dbc8:	4bca      	ldr	r3, [pc, #808]	; (800def4 <rtcGetTime+0x45c>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	22fa      	movs	r2, #250	; 0xfa
 800dbd0:	00d2      	lsls	r2, r2, #3
 800dbd2:	189a      	adds	r2, r3, r2
 800dbd4:	0013      	movs	r3, r2
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	189b      	adds	r3, r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	1a9b      	subs	r3, r3, r2
 800dbde:	011b      	lsls	r3, r3, #4
 800dbe0:	1a9b      	subs	r3, r3, r2
 800dbe2:	0018      	movs	r0, r3
 800dbe4:	f7f5 f9d0 	bl	8002f88 <__aeabi_i2d>
 800dbe8:	2280      	movs	r2, #128	; 0x80
 800dbea:	0612      	lsls	r2, r2, #24
 800dbec:	4bc3      	ldr	r3, [pc, #780]	; (800defc <rtcGetTime+0x464>)
 800dbee:	f7f3 fc09 	bl	8001404 <__aeabi_dadd>
 800dbf2:	0002      	movs	r2, r0
 800dbf4:	000b      	movs	r3, r1
 800dbf6:	0014      	movs	r4, r2
 800dbf8:	001d      	movs	r5, r3
 800dbfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbfc:	f7f2 fcc4 	bl	8000588 <__aeabi_f2uiz>
 800dc00:	0003      	movs	r3, r0
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7f5 f9f0 	bl	8002fe8 <__aeabi_ui2d>
 800dc08:	0002      	movs	r2, r0
 800dc0a:	000b      	movs	r3, r1
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	0029      	movs	r1, r5
 800dc10:	f7f3 fbf8 	bl	8001404 <__aeabi_dadd>
 800dc14:	0002      	movs	r2, r0
 800dc16:	000b      	movs	r3, r1
 800dc18:	0014      	movs	r4, r2
 800dc1a:	001d      	movs	r5, r3
 800dc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc1e:	f7f2 fcb3 	bl	8000588 <__aeabi_f2uiz>
 800dc22:	0003      	movs	r3, r0
 800dc24:	0018      	movs	r0, r3
 800dc26:	f7f5 f9df 	bl	8002fe8 <__aeabi_ui2d>
 800dc2a:	0002      	movs	r2, r0
 800dc2c:	000b      	movs	r3, r1
 800dc2e:	0020      	movs	r0, r4
 800dc30:	0029      	movs	r1, r5
 800dc32:	f7f4 fdc3 	bl	80027bc <__aeabi_dsub>
 800dc36:	0002      	movs	r2, r0
 800dc38:	000b      	movs	r3, r1
 800dc3a:	0014      	movs	r4, r2
 800dc3c:	001d      	movs	r5, r3
 800dc3e:	4bab      	ldr	r3, [pc, #684]	; (800deec <rtcGetTime+0x454>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	0018      	movs	r0, r3
 800dc46:	f7f5 f99f 	bl	8002f88 <__aeabi_i2d>
 800dc4a:	0002      	movs	r2, r0
 800dc4c:	000b      	movs	r3, r1
 800dc4e:	0020      	movs	r0, r4
 800dc50:	0029      	movs	r1, r5
 800dc52:	f7f3 fbd7 	bl	8001404 <__aeabi_dadd>
 800dc56:	0002      	movs	r2, r0
 800dc58:	000b      	movs	r3, r1
 800dc5a:	0010      	movs	r0, r2
 800dc5c:	0019      	movs	r1, r3
 800dc5e:	f7f5 fa31 	bl	80030c4 <__aeabi_d2f>
 800dc62:	1c03      	adds	r3, r0, #0
 800dc64:	627b      	str	r3, [r7, #36]	; 0x24
	float Q = (A + 83) / 100;
 800dc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc68:	3353      	adds	r3, #83	; 0x53
 800dc6a:	2164      	movs	r1, #100	; 0x64
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	f7f2 fa51 	bl	8000114 <__udivsi3>
 800dc72:	0003      	movs	r3, r0
 800dc74:	0018      	movs	r0, r3
 800dc76:	f7f3 fb89 	bl	800138c <__aeabi_ui2f>
 800dc7a:	1c03      	adds	r3, r0, #0
 800dc7c:	623b      	str	r3, [r7, #32]
	uint32_t C = (uint32_t) Q;
 800dc7e:	6a38      	ldr	r0, [r7, #32]
 800dc80:	f7f2 fc82 	bl	8000588 <__aeabi_f2uiz>
 800dc84:	0003      	movs	r3, r0
 800dc86:	61fb      	str	r3, [r7, #28]
	float W = 3 * (C + 1) / 4;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	0013      	movs	r3, r2
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	189b      	adds	r3, r3, r2
 800dc92:	089b      	lsrs	r3, r3, #2
 800dc94:	0018      	movs	r0, r3
 800dc96:	f7f3 fb79 	bl	800138c <__aeabi_ui2f>
 800dc9a:	1c03      	adds	r3, r0, #0
 800dc9c:	61bb      	str	r3, [r7, #24]
	uint32_t E = (uint32_t) W;
 800dc9e:	69b8      	ldr	r0, [r7, #24]
 800dca0:	f7f2 fc72 	bl	8000588 <__aeabi_f2uiz>
 800dca4:	0003      	movs	r3, r0
 800dca6:	617b      	str	r3, [r7, #20]
	float JD = B + 38 - E; //julian day
 800dca8:	4995      	ldr	r1, [pc, #596]	; (800df00 <rtcGetTime+0x468>)
 800dcaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcac:	f7f2 fcc0 	bl	8000630 <__aeabi_fadd>
 800dcb0:	1c03      	adds	r3, r0, #0
 800dcb2:	1c1c      	adds	r4, r3, #0
 800dcb4:	6978      	ldr	r0, [r7, #20]
 800dcb6:	f7f3 fb69 	bl	800138c <__aeabi_ui2f>
 800dcba:	1c03      	adds	r3, r0, #0
 800dcbc:	1c19      	adds	r1, r3, #0
 800dcbe:	1c20      	adds	r0, r4, #0
 800dcc0:	f7f3 f936 	bl	8000f30 <__aeabi_fsub>
 800dcc4:	1c03      	adds	r3, r0, #0
 800dcc6:	613b      	str	r3, [r7, #16]
	float MS = 29.5305902778; //average value of synodic month
 800dcc8:	4b8e      	ldr	r3, [pc, #568]	; (800df04 <rtcGetTime+0x46c>)
 800dcca:	60fb      	str	r3, [r7, #12]
	float phasePrimary = ((JD / MS) - 0.3033);
 800dccc:	68f9      	ldr	r1, [r7, #12]
 800dcce:	6938      	ldr	r0, [r7, #16]
 800dcd0:	f7f2 fe4a 	bl	8000968 <__aeabi_fdiv>
 800dcd4:	1c03      	adds	r3, r0, #0
 800dcd6:	1c18      	adds	r0, r3, #0
 800dcd8:	f7f5 f9ac 	bl	8003034 <__aeabi_f2d>
 800dcdc:	4a8a      	ldr	r2, [pc, #552]	; (800df08 <rtcGetTime+0x470>)
 800dcde:	4b8b      	ldr	r3, [pc, #556]	; (800df0c <rtcGetTime+0x474>)
 800dce0:	f7f4 fd6c 	bl	80027bc <__aeabi_dsub>
 800dce4:	0002      	movs	r2, r0
 800dce6:	000b      	movs	r3, r1
 800dce8:	0010      	movs	r0, r2
 800dcea:	0019      	movs	r1, r3
 800dcec:	f7f5 f9ea 	bl	80030c4 <__aeabi_d2f>
 800dcf0:	1c03      	adds	r3, r0, #0
 800dcf2:	60bb      	str	r3, [r7, #8]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800dcf4:	68b8      	ldr	r0, [r7, #8]
 800dcf6:	f7f2 fc47 	bl	8000588 <__aeabi_f2uiz>
 800dcfa:	0003      	movs	r3, r0
 800dcfc:	607b      	str	r3, [r7, #4]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7f3 fb44 	bl	800138c <__aeabi_ui2f>
 800dd04:	1c03      	adds	r3, r0, #0
 800dd06:	1c19      	adds	r1, r3, #0
 800dd08:	68b8      	ldr	r0, [r7, #8]
 800dd0a:	f7f3 f911 	bl	8000f30 <__aeabi_fsub>
 800dd0e:	1c03      	adds	r3, r0, #0
 800dd10:	497f      	ldr	r1, [pc, #508]	; (800df10 <rtcGetTime+0x478>)
 800dd12:	1c18      	adds	r0, r3, #0
 800dd14:	f7f2 fff2 	bl	8000cfc <__aeabi_fmul>
 800dd18:	1c03      	adds	r3, r0, #0
 800dd1a:	603b      	str	r3, [r7, #0]
	moonPhase = (uint32_t) phaseFinal;
 800dd1c:	6838      	ldr	r0, [r7, #0]
 800dd1e:	f7f2 fc33 	bl	8000588 <__aeabi_f2uiz>
 800dd22:	0002      	movs	r2, r0
 800dd24:	4b7b      	ldr	r3, [pc, #492]	; (800df14 <rtcGetTime+0x47c>)
 800dd26:	601a      	str	r2, [r3, #0]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (mode == MODE_NORMAL) {
 800dd28:	4b7b      	ldr	r3, [pc, #492]	; (800df18 <rtcGetTime+0x480>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d114      	bne.n	800dd5c <rtcGetTime+0x2c4>
		chronoMinutes = 0;
 800dd32:	4b7a      	ldr	r3, [pc, #488]	; (800df1c <rtcGetTime+0x484>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	801a      	strh	r2, [r3, #0]
		chronoSeconds = 0;
 800dd38:	4b79      	ldr	r3, [pc, #484]	; (800df20 <rtcGetTime+0x488>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
		chronoDecimals = 0;
 800dd3e:	4b79      	ldr	r3, [pc, #484]	; (800df24 <rtcGetTime+0x48c>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	601a      	str	r2, [r3, #0]
		chronoHours = 0;
 800dd44:	4b78      	ldr	r3, [pc, #480]	; (800df28 <rtcGetTime+0x490>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	701a      	strb	r2, [r3, #0]
		chronoDay = 0;
 800dd4a:	4b78      	ldr	r3, [pc, #480]	; (800df2c <rtcGetTime+0x494>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	701a      	strb	r2, [r3, #0]
		chronoMonth = 0;
 800dd50:	4b77      	ldr	r3, [pc, #476]	; (800df30 <rtcGetTime+0x498>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]
		chronoYear = 0;
 800dd56:	4b77      	ldr	r3, [pc, #476]	; (800df34 <rtcGetTime+0x49c>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
	}
	if (mode == MODE_CHRONO) {
 800dd5c:	4b6e      	ldr	r3, [pc, #440]	; (800df18 <rtcGetTime+0x480>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d000      	beq.n	800dd68 <rtcGetTime+0x2d0>
 800dd66:	e112      	b.n	800df8e <rtcGetTime+0x4f6>

		chronoDecimals = 0;
 800dd68:	4b6e      	ldr	r3, [pc, #440]	; (800df24 <rtcGetTime+0x48c>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
		chronoSeconds = seconds - chronoStartSeconds;
 800dd6e:	4b5a      	ldr	r3, [pc, #360]	; (800ded8 <rtcGetTime+0x440>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	4b70      	ldr	r3, [pc, #448]	; (800df38 <rtcGetTime+0x4a0>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b25b      	sxtb	r3, r3
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	b25a      	sxtb	r2, r3
 800dd84:	4b66      	ldr	r3, [pc, #408]	; (800df20 <rtcGetTime+0x488>)
 800dd86:	701a      	strb	r2, [r3, #0]
		chronoMinutes = minutes - chronoStartMinutes;
 800dd88:	4b52      	ldr	r3, [pc, #328]	; (800ded4 <rtcGetTime+0x43c>)
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	b21b      	sxth	r3, r3
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b6a      	ldr	r3, [pc, #424]	; (800df3c <rtcGetTime+0x4a4>)
 800dd92:	881b      	ldrh	r3, [r3, #0]
 800dd94:	b21b      	sxth	r3, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	b21a      	sxth	r2, r3
 800dd9e:	4b5f      	ldr	r3, [pc, #380]	; (800df1c <rtcGetTime+0x484>)
 800dda0:	801a      	strh	r2, [r3, #0]
		chronoHours = hours - chronoStartHours;
 800dda2:	4b49      	ldr	r3, [pc, #292]	; (800dec8 <rtcGetTime+0x430>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	4b65      	ldr	r3, [pc, #404]	; (800df40 <rtcGetTime+0x4a8>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	b25b      	sxtb	r3, r3
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	b25a      	sxtb	r2, r3
 800ddb8:	4b5b      	ldr	r3, [pc, #364]	; (800df28 <rtcGetTime+0x490>)
 800ddba:	701a      	strb	r2, [r3, #0]
		chronoDay = day - chronoStartDay;
 800ddbc:	4b4b      	ldr	r3, [pc, #300]	; (800deec <rtcGetTime+0x454>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	4b60      	ldr	r3, [pc, #384]	; (800df44 <rtcGetTime+0x4ac>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	b25b      	sxtb	r3, r3
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	b25a      	sxtb	r2, r3
 800ddd0:	4b56      	ldr	r3, [pc, #344]	; (800df2c <rtcGetTime+0x494>)
 800ddd2:	701a      	strb	r2, [r3, #0]
		chronoMonth = month - chronoStartMonth;
 800ddd4:	4b46      	ldr	r3, [pc, #280]	; (800def0 <rtcGetTime+0x458>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4b5b      	ldr	r3, [pc, #364]	; (800df48 <rtcGetTime+0x4b0>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b25b      	sxtb	r3, r3
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	b25a      	sxtb	r2, r3
 800dde8:	4b51      	ldr	r3, [pc, #324]	; (800df30 <rtcGetTime+0x498>)
 800ddea:	701a      	strb	r2, [r3, #0]

		if (chronoDecimals < 0) {
 800ddec:	4b4d      	ldr	r3, [pc, #308]	; (800df24 <rtcGetTime+0x48c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	da0e      	bge.n	800de12 <rtcGetTime+0x37a>
			chronoSeconds--;
 800ddf4:	4b4a      	ldr	r3, [pc, #296]	; (800df20 <rtcGetTime+0x488>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	b25b      	sxtb	r3, r3
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	b25a      	sxtb	r2, r3
 800de02:	4b47      	ldr	r3, [pc, #284]	; (800df20 <rtcGetTime+0x488>)
 800de04:	701a      	strb	r2, [r3, #0]
			chronoDecimals = chronoDecimals + 10;
 800de06:	4b47      	ldr	r3, [pc, #284]	; (800df24 <rtcGetTime+0x48c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	330a      	adds	r3, #10
 800de0c:	001a      	movs	r2, r3
 800de0e:	4b45      	ldr	r3, [pc, #276]	; (800df24 <rtcGetTime+0x48c>)
 800de10:	601a      	str	r2, [r3, #0]
		}

		if (chronoSeconds < 0) {
 800de12:	4b43      	ldr	r3, [pc, #268]	; (800df20 <rtcGetTime+0x488>)
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	b25b      	sxtb	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	da11      	bge.n	800de40 <rtcGetTime+0x3a8>
			chronoMinutes--;
 800de1c:	4b3f      	ldr	r3, [pc, #252]	; (800df1c <rtcGetTime+0x484>)
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	b21b      	sxth	r3, r3
 800de22:	b29b      	uxth	r3, r3
 800de24:	3b01      	subs	r3, #1
 800de26:	b29b      	uxth	r3, r3
 800de28:	b21a      	sxth	r2, r3
 800de2a:	4b3c      	ldr	r3, [pc, #240]	; (800df1c <rtcGetTime+0x484>)
 800de2c:	801a      	strh	r2, [r3, #0]
			chronoSeconds = chronoSeconds + 60;
 800de2e:	4b3c      	ldr	r3, [pc, #240]	; (800df20 <rtcGetTime+0x488>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b25b      	sxtb	r3, r3
 800de34:	b2db      	uxtb	r3, r3
 800de36:	333c      	adds	r3, #60	; 0x3c
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	b25a      	sxtb	r2, r3
 800de3c:	4b38      	ldr	r3, [pc, #224]	; (800df20 <rtcGetTime+0x488>)
 800de3e:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMinutes < 0) {
 800de40:	4b36      	ldr	r3, [pc, #216]	; (800df1c <rtcGetTime+0x484>)
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	b21b      	sxth	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	da11      	bge.n	800de6e <rtcGetTime+0x3d6>
			chronoHours--;
 800de4a:	4b37      	ldr	r3, [pc, #220]	; (800df28 <rtcGetTime+0x490>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	b25b      	sxtb	r3, r3
 800de50:	b2db      	uxtb	r3, r3
 800de52:	3b01      	subs	r3, #1
 800de54:	b2db      	uxtb	r3, r3
 800de56:	b25a      	sxtb	r2, r3
 800de58:	4b33      	ldr	r3, [pc, #204]	; (800df28 <rtcGetTime+0x490>)
 800de5a:	701a      	strb	r2, [r3, #0]
			chronoMinutes = chronoMinutes + 60;
 800de5c:	4b2f      	ldr	r3, [pc, #188]	; (800df1c <rtcGetTime+0x484>)
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	b21b      	sxth	r3, r3
 800de62:	b29b      	uxth	r3, r3
 800de64:	333c      	adds	r3, #60	; 0x3c
 800de66:	b29b      	uxth	r3, r3
 800de68:	b21a      	sxth	r2, r3
 800de6a:	4b2c      	ldr	r3, [pc, #176]	; (800df1c <rtcGetTime+0x484>)
 800de6c:	801a      	strh	r2, [r3, #0]
		}

		if (chronoHours < 0) {
 800de6e:	4b2e      	ldr	r3, [pc, #184]	; (800df28 <rtcGetTime+0x490>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	b25b      	sxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	da11      	bge.n	800de9c <rtcGetTime+0x404>
			chronoDay--;
 800de78:	4b2c      	ldr	r3, [pc, #176]	; (800df2c <rtcGetTime+0x494>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	b25b      	sxtb	r3, r3
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	3b01      	subs	r3, #1
 800de82:	b2db      	uxtb	r3, r3
 800de84:	b25a      	sxtb	r2, r3
 800de86:	4b29      	ldr	r3, [pc, #164]	; (800df2c <rtcGetTime+0x494>)
 800de88:	701a      	strb	r2, [r3, #0]
			chronoHours = chronoHours + 24;
 800de8a:	4b27      	ldr	r3, [pc, #156]	; (800df28 <rtcGetTime+0x490>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b25b      	sxtb	r3, r3
 800de90:	b2db      	uxtb	r3, r3
 800de92:	3318      	adds	r3, #24
 800de94:	b2db      	uxtb	r3, r3
 800de96:	b25a      	sxtb	r2, r3
 800de98:	4b23      	ldr	r3, [pc, #140]	; (800df28 <rtcGetTime+0x490>)
 800de9a:	701a      	strb	r2, [r3, #0]
		}

		if (chronoDay < 0) {
 800de9c:	4b23      	ldr	r3, [pc, #140]	; (800df2c <rtcGetTime+0x494>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	b25b      	sxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	da54      	bge.n	800df50 <rtcGetTime+0x4b8>
			chronoMonth--;
 800dea6:	4b22      	ldr	r3, [pc, #136]	; (800df30 <rtcGetTime+0x498>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	b2db      	uxtb	r3, r3
 800deae:	3b01      	subs	r3, #1
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	b25a      	sxtb	r2, r3
 800deb4:	4b1e      	ldr	r3, [pc, #120]	; (800df30 <rtcGetTime+0x498>)
 800deb6:	701a      	strb	r2, [r3, #0]
			chronoDay = chronoDay + 30;
 800deb8:	4b1c      	ldr	r3, [pc, #112]	; (800df2c <rtcGetTime+0x494>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b25b      	sxtb	r3, r3
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	331e      	adds	r3, #30
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	b25a      	sxtb	r2, r3
 800dec6:	e041      	b.n	800df4c <rtcGetTime+0x4b4>
 800dec8:	2000064b 	.word	0x2000064b
 800decc:	20000148 	.word	0x20000148
 800ded0:	200001ac 	.word	0x200001ac
 800ded4:	20000638 	.word	0x20000638
 800ded8:	200005eb 	.word	0x200005eb
 800dedc:	0000639c 	.word	0x0000639c
 800dee0:	000009f6 	.word	0x000009f6
 800dee4:	2000063c 	.word	0x2000063c
 800dee8:	20000588 	.word	0x20000588
 800deec:	200005f8 	.word	0x200005f8
 800def0:	20000309 	.word	0x20000309
 800def4:	200005f4 	.word	0x200005f4
 800def8:	00001a3c 	.word	0x00001a3c
 800defc:	413a62ff 	.word	0x413a62ff
 800df00:	42180000 	.word	0x42180000
 800df04:	41ec3ea6 	.word	0x41ec3ea6
 800df08:	67381d7e 	.word	0x67381d7e
 800df0c:	3fd36944 	.word	0x3fd36944
 800df10:	42c80000 	.word	0x42c80000
 800df14:	20000314 	.word	0x20000314
 800df18:	20000410 	.word	0x20000410
 800df1c:	20000636 	.word	0x20000636
 800df20:	200005f6 	.word	0x200005f6
 800df24:	20000154 	.word	0x20000154
 800df28:	2000030d 	.word	0x2000030d
 800df2c:	2000061e 	.word	0x2000061e
 800df30:	200002cc 	.word	0x200002cc
 800df34:	200004e2 	.word	0x200004e2
 800df38:	20000142 	.word	0x20000142
 800df3c:	200002fe 	.word	0x200002fe
 800df40:	20000595 	.word	0x20000595
 800df44:	200005f7 	.word	0x200005f7
 800df48:	20000292 	.word	0x20000292
 800df4c:	4b12      	ldr	r3, [pc, #72]	; (800df98 <rtcGetTime+0x500>)
 800df4e:	701a      	strb	r2, [r3, #0]
		}

		if (chronoMonth < 0) {
 800df50:	4b12      	ldr	r3, [pc, #72]	; (800df9c <rtcGetTime+0x504>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	b25b      	sxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	da11      	bge.n	800df7e <rtcGetTime+0x4e6>
			chronoYear--;
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <rtcGetTime+0x508>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b25b      	sxtb	r3, r3
 800df60:	b2db      	uxtb	r3, r3
 800df62:	3b01      	subs	r3, #1
 800df64:	b2db      	uxtb	r3, r3
 800df66:	b25a      	sxtb	r2, r3
 800df68:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <rtcGetTime+0x508>)
 800df6a:	701a      	strb	r2, [r3, #0]
			chronoMonth = chronoMonth + 12;
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <rtcGetTime+0x504>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	b25b      	sxtb	r3, r3
 800df72:	b2db      	uxtb	r3, r3
 800df74:	330c      	adds	r3, #12
 800df76:	b2db      	uxtb	r3, r3
 800df78:	b25a      	sxtb	r2, r3
 800df7a:	4b08      	ldr	r3, [pc, #32]	; (800df9c <rtcGetTime+0x504>)
 800df7c:	701a      	strb	r2, [r3, #0]
		}

		//max chrono count
		if(chronoHours >= 5){
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <rtcGetTime+0x50c>)
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	b25b      	sxtb	r3, r3
 800df84:	2b04      	cmp	r3, #4
 800df86:	dd02      	ble.n	800df8e <rtcGetTime+0x4f6>
			mode = MODE_STOP;
 800df88:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <rtcGetTime+0x510>)
 800df8a:	2202      	movs	r2, #2
 800df8c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800df8e:	46c0      	nop			; (mov r8, r8)
 800df90:	46bd      	mov	sp, r7
 800df92:	b00e      	add	sp, #56	; 0x38
 800df94:	bdb0      	pop	{r4, r5, r7, pc}
 800df96:	46c0      	nop			; (mov r8, r8)
 800df98:	2000061e 	.word	0x2000061e
 800df9c:	200002cc 	.word	0x200002cc
 800dfa0:	200004e2 	.word	0x200004e2
 800dfa4:	2000030d 	.word	0x2000030d
 800dfa8:	20000410 	.word	0x20000410

0800dfac <rtcSetTime>:

void rtcSetTime() {
 800dfac:	b580      	push	{r7, lr}
 800dfae:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 800dfb0:	4b17      	ldr	r3, [pc, #92]	; (800e010 <rtcSetTime+0x64>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	b25b      	sxtb	r3, r3
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	4b16      	ldr	r3, [pc, #88]	; (800e014 <rtcSetTime+0x68>)
 800dfba:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 800dfbc:	4b16      	ldr	r3, [pc, #88]	; (800e018 <rtcSetTime+0x6c>)
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	b21b      	sxth	r3, r3
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	4b13      	ldr	r3, [pc, #76]	; (800e014 <rtcSetTime+0x68>)
 800dfc6:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 800dfc8:	4b14      	ldr	r3, [pc, #80]	; (800e01c <rtcSetTime+0x70>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	b25b      	sxtb	r3, r3
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	4b10      	ldr	r3, [pc, #64]	; (800e014 <rtcSetTime+0x68>)
 800dfd2:	709a      	strb	r2, [r3, #2]
	sDate.Date = day;
 800dfd4:	4b12      	ldr	r3, [pc, #72]	; (800e020 <rtcSetTime+0x74>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	4b12      	ldr	r3, [pc, #72]	; (800e024 <rtcSetTime+0x78>)
 800dfdc:	709a      	strb	r2, [r3, #2]
	sDate.Month = month;
 800dfde:	4b12      	ldr	r3, [pc, #72]	; (800e028 <rtcSetTime+0x7c>)
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	4b0f      	ldr	r3, [pc, #60]	; (800e024 <rtcSetTime+0x78>)
 800dfe6:	705a      	strb	r2, [r3, #1]
	sDate.Year = year;
 800dfe8:	4b10      	ldr	r3, [pc, #64]	; (800e02c <rtcSetTime+0x80>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	4b0d      	ldr	r3, [pc, #52]	; (800e024 <rtcSetTime+0x78>)
 800dff0:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800dff2:	4908      	ldr	r1, [pc, #32]	; (800e014 <rtcSetTime+0x68>)
 800dff4:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <rtcSetTime+0x84>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	0018      	movs	r0, r3
 800dffa:	f7f8 fb4b 	bl	8006694 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800dffe:	4909      	ldr	r1, [pc, #36]	; (800e024 <rtcSetTime+0x78>)
 800e000:	4b0b      	ldr	r3, [pc, #44]	; (800e030 <rtcSetTime+0x84>)
 800e002:	2200      	movs	r2, #0
 800e004:	0018      	movs	r0, r3
 800e006:	f7f8 fc49 	bl	800689c <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 800e00a:	46c0      	nop			; (mov r8, r8)
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	2000064b 	.word	0x2000064b
 800e014:	200001ac 	.word	0x200001ac
 800e018:	20000638 	.word	0x20000638
 800e01c:	200005eb 	.word	0x200005eb
 800e020:	200005f8 	.word	0x200005f8
 800e024:	20000588 	.word	0x20000588
 800e028:	20000309 	.word	0x20000309
 800e02c:	200005f4 	.word	0x200005f4
 800e030:	200006c8 	.word	0x200006c8

0800e034 <rtcResetChrono>:

void rtcResetChrono(void) {
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0

	chronoDecimals = 0;
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <rtcResetChrono+0x3c>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
	chronoMinutes = 0;
 800e03e:	4b0d      	ldr	r3, [pc, #52]	; (800e074 <rtcResetChrono+0x40>)
 800e040:	2200      	movs	r2, #0
 800e042:	801a      	strh	r2, [r3, #0]
	chronoSeconds = 0;
 800e044:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <rtcResetChrono+0x44>)
 800e046:	2200      	movs	r2, #0
 800e048:	701a      	strb	r2, [r3, #0]
	chronoHours = 0;
 800e04a:	4b0c      	ldr	r3, [pc, #48]	; (800e07c <rtcResetChrono+0x48>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]

	chronoStartSeconds = 0;
 800e050:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <rtcResetChrono+0x4c>)
 800e052:	2200      	movs	r2, #0
 800e054:	701a      	strb	r2, [r3, #0]
	chronoStartMinutes = 0;
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <rtcResetChrono+0x50>)
 800e058:	2200      	movs	r2, #0
 800e05a:	801a      	strh	r2, [r3, #0]
	chronoStartDecimals = 0;
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <rtcResetChrono+0x54>)
 800e05e:	2200      	movs	r2, #0
 800e060:	601a      	str	r2, [r3, #0]
	chronoStartHours = 0;
 800e062:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <rtcResetChrono+0x58>)
 800e064:	2200      	movs	r2, #0
 800e066:	701a      	strb	r2, [r3, #0]

}
 800e068:	46c0      	nop			; (mov r8, r8)
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	46c0      	nop			; (mov r8, r8)
 800e070:	20000154 	.word	0x20000154
 800e074:	20000636 	.word	0x20000636
 800e078:	200005f6 	.word	0x200005f6
 800e07c:	2000030d 	.word	0x2000030d
 800e080:	20000142 	.word	0x20000142
 800e084:	200002fe 	.word	0x200002fe
 800e088:	20000134 	.word	0x20000134
 800e08c:	20000595 	.word	0x20000595

0800e090 <float2Text>:
int32_t offsetMagnetometerX = 0;
int32_t offsetMagnetometerY = 0;

float gainVoltagePassive = 1.06;

void float2Text(char *str, float input) {
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]

	int ones = (uint16_t) input;
 800e09a:	6838      	ldr	r0, [r7, #0]
 800e09c:	f7f2 fa74 	bl	8000588 <__aeabi_f2uiz>
 800e0a0:	0003      	movs	r3, r0
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	617b      	str	r3, [r7, #20]
	float hundreadths = input - ones;
 800e0a6:	6978      	ldr	r0, [r7, #20]
 800e0a8:	f7f3 f92a 	bl	8001300 <__aeabi_i2f>
 800e0ac:	1c03      	adds	r3, r0, #0
 800e0ae:	1c19      	adds	r1, r3, #0
 800e0b0:	6838      	ldr	r0, [r7, #0]
 800e0b2:	f7f2 ff3d 	bl	8000f30 <__aeabi_fsub>
 800e0b6:	1c03      	adds	r3, r0, #0
 800e0b8:	613b      	str	r3, [r7, #16]
	int hundreadths2 = hundreadths * 100;
 800e0ba:	490a      	ldr	r1, [pc, #40]	; (800e0e4 <float2Text+0x54>)
 800e0bc:	6938      	ldr	r0, [r7, #16]
 800e0be:	f7f2 fe1d 	bl	8000cfc <__aeabi_fmul>
 800e0c2:	1c03      	adds	r3, r0, #0
 800e0c4:	1c18      	adds	r0, r3, #0
 800e0c6:	f7f3 f8fb 	bl	80012c0 <__aeabi_f2iz>
 800e0ca:	0003      	movs	r3, r0
 800e0cc:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d.%d", ones, hundreadths2);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	4905      	ldr	r1, [pc, #20]	; (800e0e8 <float2Text+0x58>)
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f002 ff29 	bl	8010f2c <siprintf>

}
 800e0da:	46c0      	nop			; (mov r8, r8)
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	b006      	add	sp, #24
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	46c0      	nop			; (mov r8, r8)
 800e0e4:	42c80000 	.word	0x42c80000
 800e0e8:	08013dc8 	.word	0x08013dc8

0800e0ec <sensingInit>:

void sensingInit() {
 800e0ec:	b590      	push	{r4, r7, lr}
 800e0ee:	b08f      	sub	sp, #60	; 0x3c
 800e0f0:	af04      	add	r7, sp, #16

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 800e0f2:	497e      	ldr	r1, [pc, #504]	; (800e2ec <sensingInit+0x200>)
 800e0f4:	4b7e      	ldr	r3, [pc, #504]	; (800e2f0 <sensingInit+0x204>)
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	0018      	movs	r0, r3
 800e0fa:	f7f5 fd65 	bl	8003bc8 <HAL_ADC_Start_DMA>
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								REDING CALIBRATION DATA

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_T1, 1, dig_T, 6,
 800e0fe:	4b7d      	ldr	r3, [pc, #500]	; (800e2f4 <sensingInit+0x208>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	487d      	ldr	r0, [pc, #500]	; (800e2f8 <sensingInit+0x20c>)
 800e104:	9302      	str	r3, [sp, #8]
 800e106:	2306      	movs	r3, #6
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	2420      	movs	r4, #32
 800e10c:	193b      	adds	r3, r7, r4
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	2301      	movs	r3, #1
 800e112:	2288      	movs	r2, #136	; 0x88
 800e114:	21ee      	movs	r1, #238	; 0xee
 800e116:	f7f6 ffaf 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 800e11a:	0021      	movs	r1, r4
 800e11c:	187b      	adds	r3, r7, r1
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	b21a      	sxth	r2, r3
 800e122:	187b      	adds	r3, r7, r1
 800e124:	785b      	ldrb	r3, [r3, #1]
 800e126:	021b      	lsls	r3, r3, #8
 800e128:	b21b      	sxth	r3, r3
 800e12a:	4313      	orrs	r3, r2
 800e12c:	b21b      	sxth	r3, r3
 800e12e:	b29a      	uxth	r2, r3
 800e130:	4b72      	ldr	r3, [pc, #456]	; (800e2fc <sensingInit+0x210>)
 800e132:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 800e134:	187b      	adds	r3, r7, r1
 800e136:	789b      	ldrb	r3, [r3, #2]
 800e138:	b21a      	sxth	r2, r3
 800e13a:	187b      	adds	r3, r7, r1
 800e13c:	78db      	ldrb	r3, [r3, #3]
 800e13e:	021b      	lsls	r3, r3, #8
 800e140:	b21b      	sxth	r3, r3
 800e142:	4313      	orrs	r3, r2
 800e144:	b21a      	sxth	r2, r3
 800e146:	4b6e      	ldr	r3, [pc, #440]	; (800e300 <sensingInit+0x214>)
 800e148:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 800e14a:	187b      	adds	r3, r7, r1
 800e14c:	791b      	ldrb	r3, [r3, #4]
 800e14e:	b21a      	sxth	r2, r3
 800e150:	187b      	adds	r3, r7, r1
 800e152:	791b      	ldrb	r3, [r3, #4]
 800e154:	021b      	lsls	r3, r3, #8
 800e156:	b21b      	sxth	r3, r3
 800e158:	4313      	orrs	r3, r2
 800e15a:	b21a      	sxth	r2, r3
 800e15c:	4b69      	ldr	r3, [pc, #420]	; (800e304 <sensingInit+0x218>)
 800e15e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_P1, 1, dig_P, 18,
 800e160:	4b64      	ldr	r3, [pc, #400]	; (800e2f4 <sensingInit+0x208>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	4864      	ldr	r0, [pc, #400]	; (800e2f8 <sensingInit+0x20c>)
 800e166:	9302      	str	r3, [sp, #8]
 800e168:	2312      	movs	r3, #18
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	240c      	movs	r4, #12
 800e16e:	193b      	adds	r3, r7, r4
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	2301      	movs	r3, #1
 800e174:	228e      	movs	r2, #142	; 0x8e
 800e176:	21ee      	movs	r1, #238	; 0xee
 800e178:	f7f6 ff7e 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800e17c:	0021      	movs	r1, r4
 800e17e:	187b      	adds	r3, r7, r1
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	b21a      	sxth	r2, r3
 800e184:	187b      	adds	r3, r7, r1
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	b21b      	sxth	r3, r3
 800e18c:	4313      	orrs	r3, r2
 800e18e:	b21b      	sxth	r3, r3
 800e190:	b29a      	uxth	r2, r3
 800e192:	4b5d      	ldr	r3, [pc, #372]	; (800e308 <sensingInit+0x21c>)
 800e194:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 800e196:	187b      	adds	r3, r7, r1
 800e198:	789b      	ldrb	r3, [r3, #2]
 800e19a:	b21a      	sxth	r2, r3
 800e19c:	187b      	adds	r3, r7, r1
 800e19e:	78db      	ldrb	r3, [r3, #3]
 800e1a0:	021b      	lsls	r3, r3, #8
 800e1a2:	b21b      	sxth	r3, r3
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	b21a      	sxth	r2, r3
 800e1a8:	4b58      	ldr	r3, [pc, #352]	; (800e30c <sensingInit+0x220>)
 800e1aa:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800e1ac:	187b      	adds	r3, r7, r1
 800e1ae:	791b      	ldrb	r3, [r3, #4]
 800e1b0:	b21a      	sxth	r2, r3
 800e1b2:	187b      	adds	r3, r7, r1
 800e1b4:	795b      	ldrb	r3, [r3, #5]
 800e1b6:	021b      	lsls	r3, r3, #8
 800e1b8:	b21b      	sxth	r3, r3
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	b21a      	sxth	r2, r3
 800e1be:	4b54      	ldr	r3, [pc, #336]	; (800e310 <sensingInit+0x224>)
 800e1c0:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 800e1c2:	187b      	adds	r3, r7, r1
 800e1c4:	799b      	ldrb	r3, [r3, #6]
 800e1c6:	b21a      	sxth	r2, r3
 800e1c8:	187b      	adds	r3, r7, r1
 800e1ca:	79db      	ldrb	r3, [r3, #7]
 800e1cc:	021b      	lsls	r3, r3, #8
 800e1ce:	b21b      	sxth	r3, r3
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	b21a      	sxth	r2, r3
 800e1d4:	4b4f      	ldr	r3, [pc, #316]	; (800e314 <sensingInit+0x228>)
 800e1d6:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800e1d8:	187b      	adds	r3, r7, r1
 800e1da:	7a1b      	ldrb	r3, [r3, #8]
 800e1dc:	b21a      	sxth	r2, r3
 800e1de:	187b      	adds	r3, r7, r1
 800e1e0:	7a5b      	ldrb	r3, [r3, #9]
 800e1e2:	021b      	lsls	r3, r3, #8
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	b21a      	sxth	r2, r3
 800e1ea:	4b4b      	ldr	r3, [pc, #300]	; (800e318 <sensingInit+0x22c>)
 800e1ec:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800e1ee:	187b      	adds	r3, r7, r1
 800e1f0:	7a9b      	ldrb	r3, [r3, #10]
 800e1f2:	b21a      	sxth	r2, r3
 800e1f4:	187b      	adds	r3, r7, r1
 800e1f6:	7adb      	ldrb	r3, [r3, #11]
 800e1f8:	021b      	lsls	r3, r3, #8
 800e1fa:	b21b      	sxth	r3, r3
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	b21a      	sxth	r2, r3
 800e200:	4b46      	ldr	r3, [pc, #280]	; (800e31c <sensingInit+0x230>)
 800e202:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 800e204:	187b      	adds	r3, r7, r1
 800e206:	7b1b      	ldrb	r3, [r3, #12]
 800e208:	b21a      	sxth	r2, r3
 800e20a:	187b      	adds	r3, r7, r1
 800e20c:	7b5b      	ldrb	r3, [r3, #13]
 800e20e:	021b      	lsls	r3, r3, #8
 800e210:	b21b      	sxth	r3, r3
 800e212:	4313      	orrs	r3, r2
 800e214:	b21a      	sxth	r2, r3
 800e216:	4b42      	ldr	r3, [pc, #264]	; (800e320 <sensingInit+0x234>)
 800e218:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800e21a:	187b      	adds	r3, r7, r1
 800e21c:	7b9b      	ldrb	r3, [r3, #14]
 800e21e:	b21a      	sxth	r2, r3
 800e220:	187b      	adds	r3, r7, r1
 800e222:	7bdb      	ldrb	r3, [r3, #15]
 800e224:	021b      	lsls	r3, r3, #8
 800e226:	b21b      	sxth	r3, r3
 800e228:	4313      	orrs	r3, r2
 800e22a:	b21a      	sxth	r2, r3
 800e22c:	4b3d      	ldr	r3, [pc, #244]	; (800e324 <sensingInit+0x238>)
 800e22e:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800e230:	187b      	adds	r3, r7, r1
 800e232:	7c1b      	ldrb	r3, [r3, #16]
 800e234:	b21a      	sxth	r2, r3
 800e236:	187b      	adds	r3, r7, r1
 800e238:	7c5b      	ldrb	r3, [r3, #17]
 800e23a:	021b      	lsls	r3, r3, #8
 800e23c:	b21b      	sxth	r3, r3
 800e23e:	4313      	orrs	r3, r2
 800e240:	b21a      	sxth	r2, r3
 800e242:	4b39      	ldr	r3, [pc, #228]	; (800e328 <sensingInit+0x23c>)
 800e244:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H1, 1, &dig_H_1, 1,
 800e246:	4b2b      	ldr	r3, [pc, #172]	; (800e2f4 <sensingInit+0x208>)
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	482b      	ldr	r0, [pc, #172]	; (800e2f8 <sensingInit+0x20c>)
 800e24c:	9302      	str	r3, [sp, #8]
 800e24e:	2301      	movs	r3, #1
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	240b      	movs	r4, #11
 800e254:	193b      	adds	r3, r7, r4
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	2301      	movs	r3, #1
 800e25a:	22a1      	movs	r2, #161	; 0xa1
 800e25c:	21ee      	movs	r1, #238	; 0xee
 800e25e:	f7f6 ff0b 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H1 = ((unsigned char) dig_H_1);
 800e262:	193b      	adds	r3, r7, r4
 800e264:	781a      	ldrb	r2, [r3, #0]
 800e266:	4b31      	ldr	r3, [pc, #196]	; (800e32c <sensingInit+0x240>)
 800e268:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H2, 1, dig_H_2_6, 7,
 800e26a:	4b22      	ldr	r3, [pc, #136]	; (800e2f4 <sensingInit+0x208>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	4822      	ldr	r0, [pc, #136]	; (800e2f8 <sensingInit+0x20c>)
 800e270:	9302      	str	r3, [sp, #8]
 800e272:	2307      	movs	r3, #7
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	1d3b      	adds	r3, r7, #4
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	2301      	movs	r3, #1
 800e27c:	22e1      	movs	r2, #225	; 0xe1
 800e27e:	21ee      	movs	r1, #238	; 0xee
 800e280:	f7f6 fefa 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800e284:	1d3b      	adds	r3, r7, #4
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	b21a      	sxth	r2, r3
 800e28a:	1d3b      	adds	r3, r7, #4
 800e28c:	785b      	ldrb	r3, [r3, #1]
 800e28e:	021b      	lsls	r3, r3, #8
 800e290:	b21b      	sxth	r3, r3
 800e292:	4313      	orrs	r3, r2
 800e294:	b21a      	sxth	r2, r3
 800e296:	4b26      	ldr	r3, [pc, #152]	; (800e330 <sensingInit+0x244>)
 800e298:	801a      	strh	r2, [r3, #0]
	dig_H3 = ((unsigned char) dig_H_2_6[2]);
 800e29a:	1d3b      	adds	r3, r7, #4
 800e29c:	789a      	ldrb	r2, [r3, #2]
 800e29e:	4b25      	ldr	r3, [pc, #148]	; (800e334 <sensingInit+0x248>)
 800e2a0:	701a      	strb	r2, [r3, #0]

	dig_H4 =
			(((int16_t) dig_H_2_6[3]) << 4 | (((int16_t) dig_H_2_6[4]) & 0x0f));
 800e2a2:	1d3b      	adds	r3, r7, #4
 800e2a4:	78db      	ldrb	r3, [r3, #3]
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	b21a      	sxth	r2, r3
 800e2aa:	1d3b      	adds	r3, r7, #4
 800e2ac:	791b      	ldrb	r3, [r3, #4]
 800e2ae:	b21b      	sxth	r3, r3
 800e2b0:	210f      	movs	r1, #15
 800e2b2:	400b      	ands	r3, r1
 800e2b4:	b21b      	sxth	r3, r3
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	b21a      	sxth	r2, r3
	dig_H4 =
 800e2ba:	4b1f      	ldr	r3, [pc, #124]	; (800e338 <sensingInit+0x24c>)
 800e2bc:	801a      	strh	r2, [r3, #0]
	dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4 | ((int16_t) dig_H_2_6[5]) << 4);
 800e2be:	1d3b      	adds	r3, r7, #4
 800e2c0:	791b      	ldrb	r3, [r3, #4]
 800e2c2:	091b      	lsrs	r3, r3, #4
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	b21a      	sxth	r2, r3
 800e2c8:	1d3b      	adds	r3, r7, #4
 800e2ca:	795b      	ldrb	r3, [r3, #5]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	b21b      	sxth	r3, r3
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	b21a      	sxth	r2, r3
 800e2d4:	4b19      	ldr	r3, [pc, #100]	; (800e33c <sensingInit+0x250>)
 800e2d6:	801a      	strh	r2, [r3, #0]
	dig_H6 = ((unsigned char) dig_H_2_6[6]);
 800e2d8:	1d3b      	adds	r3, r7, #4
 800e2da:	799a      	ldrb	r2, [r3, #6]
 800e2dc:	4b18      	ldr	r3, [pc, #96]	; (800e340 <sensingInit+0x254>)
 800e2de:	701a      	strb	r2, [r3, #0]

	sensingRead();
 800e2e0:	f000 f830 	bl	800e344 <sensingRead>

}
 800e2e4:	46c0      	nop			; (mov r8, r8)
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	b00b      	add	sp, #44	; 0x2c
 800e2ea:	bd90      	pop	{r4, r7, pc}
 800e2ec:	2000028c 	.word	0x2000028c
 800e2f0:	200003a8 	.word	0x200003a8
 800e2f4:	2000003e 	.word	0x2000003e
 800e2f8:	20000160 	.word	0x20000160
 800e2fc:	20000140 	.word	0x20000140
 800e300:	200002d0 	.word	0x200002d0
 800e304:	2000062c 	.word	0x2000062c
 800e308:	200005ee 	.word	0x200005ee
 800e30c:	2000039c 	.word	0x2000039c
 800e310:	200005f0 	.word	0x200005f0
 800e314:	200003a0 	.word	0x200003a0
 800e318:	20000576 	.word	0x20000576
 800e31c:	2000063a 	.word	0x2000063a
 800e320:	20000138 	.word	0x20000138
 800e324:	200005f2 	.word	0x200005f2
 800e328:	2000062a 	.word	0x2000062a
 800e32c:	2000030b 	.word	0x2000030b
 800e330:	20000648 	.word	0x20000648
 800e334:	2000061d 	.word	0x2000061d
 800e338:	200002ce 	.word	0x200002ce
 800e33c:	20000602 	.word	0x20000602
 800e340:	2000040e 	.word	0x2000040e

0800e344 <sensingRead>:

void sensingRead(void) {
 800e344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e346:	b095      	sub	sp, #84	; 0x54
 800e348:	af04      	add	r7, sp, #16
	float voltagePassiveRaw;
	float voltageDropRaw;
	float currentRaw;
	float resistanceRaw;

	voltageBatteryRaw = ((3300 * adcReading[0]) / 4095) * 2;
 800e34a:	4bb5      	ldr	r3, [pc, #724]	; (800e620 <sensingRead+0x2dc>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	001a      	movs	r2, r3
 800e352:	4bb4      	ldr	r3, [pc, #720]	; (800e624 <sensingRead+0x2e0>)
 800e354:	4353      	muls	r3, r2
 800e356:	49b4      	ldr	r1, [pc, #720]	; (800e628 <sensingRead+0x2e4>)
 800e358:	0018      	movs	r0, r3
 800e35a:	f7f1 ff65 	bl	8000228 <__divsi3>
 800e35e:	0003      	movs	r3, r0
 800e360:	005b      	lsls	r3, r3, #1
 800e362:	637b      	str	r3, [r7, #52]	; 0x34

	if (voltageBatteryRaw < batteryLevels[0])
 800e364:	4bb1      	ldr	r3, [pc, #708]	; (800e62c <sensingRead+0x2e8>)
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	001a      	movs	r2, r3
 800e36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d202      	bcs.n	800e376 <sensingRead+0x32>
		batteryState = 8;
 800e370:	4baf      	ldr	r3, [pc, #700]	; (800e630 <sensingRead+0x2ec>)
 800e372:	2208      	movs	r2, #8
 800e374:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[0]
 800e376:	4bad      	ldr	r3, [pc, #692]	; (800e62c <sensingRead+0x2e8>)
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	001a      	movs	r2, r3
 800e37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e37e:	4293      	cmp	r3, r2
 800e380:	d308      	bcc.n	800e394 <sensingRead+0x50>
			&& voltageBatteryRaw < batteryLevels[1])
 800e382:	4baa      	ldr	r3, [pc, #680]	; (800e62c <sensingRead+0x2e8>)
 800e384:	885b      	ldrh	r3, [r3, #2]
 800e386:	001a      	movs	r2, r3
 800e388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d202      	bcs.n	800e394 <sensingRead+0x50>
		batteryState = 7;
 800e38e:	4ba8      	ldr	r3, [pc, #672]	; (800e630 <sensingRead+0x2ec>)
 800e390:	2207      	movs	r2, #7
 800e392:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[1]
 800e394:	4ba5      	ldr	r3, [pc, #660]	; (800e62c <sensingRead+0x2e8>)
 800e396:	885b      	ldrh	r3, [r3, #2]
 800e398:	001a      	movs	r2, r3
 800e39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d308      	bcc.n	800e3b2 <sensingRead+0x6e>
			&& voltageBatteryRaw < batteryLevels[2])
 800e3a0:	4ba2      	ldr	r3, [pc, #648]	; (800e62c <sensingRead+0x2e8>)
 800e3a2:	889b      	ldrh	r3, [r3, #4]
 800e3a4:	001a      	movs	r2, r3
 800e3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d202      	bcs.n	800e3b2 <sensingRead+0x6e>
		batteryState = 6;
 800e3ac:	4ba0      	ldr	r3, [pc, #640]	; (800e630 <sensingRead+0x2ec>)
 800e3ae:	2206      	movs	r2, #6
 800e3b0:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[2]
 800e3b2:	4b9e      	ldr	r3, [pc, #632]	; (800e62c <sensingRead+0x2e8>)
 800e3b4:	889b      	ldrh	r3, [r3, #4]
 800e3b6:	001a      	movs	r2, r3
 800e3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d308      	bcc.n	800e3d0 <sensingRead+0x8c>
			&& voltageBatteryRaw < batteryLevels[3])
 800e3be:	4b9b      	ldr	r3, [pc, #620]	; (800e62c <sensingRead+0x2e8>)
 800e3c0:	88db      	ldrh	r3, [r3, #6]
 800e3c2:	001a      	movs	r2, r3
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d202      	bcs.n	800e3d0 <sensingRead+0x8c>
		batteryState = 5;
 800e3ca:	4b99      	ldr	r3, [pc, #612]	; (800e630 <sensingRead+0x2ec>)
 800e3cc:	2205      	movs	r2, #5
 800e3ce:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[3]
 800e3d0:	4b96      	ldr	r3, [pc, #600]	; (800e62c <sensingRead+0x2e8>)
 800e3d2:	88db      	ldrh	r3, [r3, #6]
 800e3d4:	001a      	movs	r2, r3
 800e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d308      	bcc.n	800e3ee <sensingRead+0xaa>
			&& voltageBatteryRaw < batteryLevels[4])
 800e3dc:	4b93      	ldr	r3, [pc, #588]	; (800e62c <sensingRead+0x2e8>)
 800e3de:	891b      	ldrh	r3, [r3, #8]
 800e3e0:	001a      	movs	r2, r3
 800e3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d202      	bcs.n	800e3ee <sensingRead+0xaa>
		batteryState = 4;
 800e3e8:	4b91      	ldr	r3, [pc, #580]	; (800e630 <sensingRead+0x2ec>)
 800e3ea:	2204      	movs	r2, #4
 800e3ec:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[4]
 800e3ee:	4b8f      	ldr	r3, [pc, #572]	; (800e62c <sensingRead+0x2e8>)
 800e3f0:	891b      	ldrh	r3, [r3, #8]
 800e3f2:	001a      	movs	r2, r3
 800e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d308      	bcc.n	800e40c <sensingRead+0xc8>
			&& voltageBatteryRaw < batteryLevels[5])
 800e3fa:	4b8c      	ldr	r3, [pc, #560]	; (800e62c <sensingRead+0x2e8>)
 800e3fc:	895b      	ldrh	r3, [r3, #10]
 800e3fe:	001a      	movs	r2, r3
 800e400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e402:	4293      	cmp	r3, r2
 800e404:	d202      	bcs.n	800e40c <sensingRead+0xc8>
		batteryState = 3;
 800e406:	4b8a      	ldr	r3, [pc, #552]	; (800e630 <sensingRead+0x2ec>)
 800e408:	2203      	movs	r2, #3
 800e40a:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[5]
 800e40c:	4b87      	ldr	r3, [pc, #540]	; (800e62c <sensingRead+0x2e8>)
 800e40e:	895b      	ldrh	r3, [r3, #10]
 800e410:	001a      	movs	r2, r3
 800e412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e414:	4293      	cmp	r3, r2
 800e416:	d308      	bcc.n	800e42a <sensingRead+0xe6>
			&& voltageBatteryRaw < batteryLevels[6])
 800e418:	4b84      	ldr	r3, [pc, #528]	; (800e62c <sensingRead+0x2e8>)
 800e41a:	899b      	ldrh	r3, [r3, #12]
 800e41c:	001a      	movs	r2, r3
 800e41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e420:	4293      	cmp	r3, r2
 800e422:	d202      	bcs.n	800e42a <sensingRead+0xe6>
		batteryState = 2;
 800e424:	4b82      	ldr	r3, [pc, #520]	; (800e630 <sensingRead+0x2ec>)
 800e426:	2202      	movs	r2, #2
 800e428:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[6])
 800e42a:	4b80      	ldr	r3, [pc, #512]	; (800e62c <sensingRead+0x2e8>)
 800e42c:	899b      	ldrh	r3, [r3, #12]
 800e42e:	001a      	movs	r2, r3
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	4293      	cmp	r3, r2
 800e434:	d302      	bcc.n	800e43c <sensingRead+0xf8>
		batteryState = 1;
 800e436:	4b7e      	ldr	r3, [pc, #504]	; (800e630 <sensingRead+0x2ec>)
 800e438:	2201      	movs	r2, #1
 800e43a:	701a      	strb	r2, [r3, #0]

	memset(voltagePassive, 0, 5);
 800e43c:	4b7d      	ldr	r3, [pc, #500]	; (800e634 <sensingRead+0x2f0>)
 800e43e:	2205      	movs	r2, #5
 800e440:	2100      	movs	r1, #0
 800e442:	0018      	movs	r0, r3
 800e444:	f002 fc1a 	bl	8010c7c <memset>
	if (adcReading[1] > 100) {
 800e448:	4b75      	ldr	r3, [pc, #468]	; (800e620 <sensingRead+0x2dc>)
 800e44a:	885b      	ldrh	r3, [r3, #2]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	2b64      	cmp	r3, #100	; 0x64
 800e450:	d940      	bls.n	800e4d4 <sensingRead+0x190>
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 800e452:	4b73      	ldr	r3, [pc, #460]	; (800e620 <sensingRead+0x2dc>)
 800e454:	885b      	ldrh	r3, [r3, #2]
 800e456:	b29b      	uxth	r3, r3
 800e458:	0018      	movs	r0, r3
 800e45a:	f7f2 ff97 	bl	800138c <__aeabi_ui2f>
 800e45e:	1c06      	adds	r6, r0, #0
 800e460:	4b75      	ldr	r3, [pc, #468]	; (800e638 <sensingRead+0x2f4>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	0018      	movs	r0, r3
 800e466:	f7f2 ff4b 	bl	8001300 <__aeabi_i2f>
 800e46a:	1c03      	adds	r3, r0, #0
 800e46c:	1c19      	adds	r1, r3, #0
 800e46e:	1c30      	adds	r0, r6, #0
 800e470:	f7f2 f8de 	bl	8000630 <__aeabi_fadd>
 800e474:	1c03      	adds	r3, r0, #0
 800e476:	1c18      	adds	r0, r3, #0
 800e478:	f7f4 fddc 	bl	8003034 <__aeabi_f2d>
 800e47c:	4a6f      	ldr	r2, [pc, #444]	; (800e63c <sensingRead+0x2f8>)
 800e47e:	4b70      	ldr	r3, [pc, #448]	; (800e640 <sensingRead+0x2fc>)
 800e480:	f7f3 ff30 	bl	80022e4 <__aeabi_dmul>
 800e484:	0002      	movs	r2, r0
 800e486:	000b      	movs	r3, r1
 800e488:	0010      	movs	r0, r2
 800e48a:	0019      	movs	r1, r3
				/ 4095) * 40)) * gainVoltagePassive;
 800e48c:	2200      	movs	r2, #0
 800e48e:	4b6d      	ldr	r3, [pc, #436]	; (800e644 <sensingRead+0x300>)
 800e490:	f7f3 fb22 	bl	8001ad8 <__aeabi_ddiv>
 800e494:	0002      	movs	r2, r0
 800e496:	000b      	movs	r3, r1
 800e498:	0010      	movs	r0, r2
 800e49a:	0019      	movs	r1, r3
 800e49c:	2200      	movs	r2, #0
 800e49e:	4b6a      	ldr	r3, [pc, #424]	; (800e648 <sensingRead+0x304>)
 800e4a0:	f7f3 ff20 	bl	80022e4 <__aeabi_dmul>
 800e4a4:	0002      	movs	r2, r0
 800e4a6:	000b      	movs	r3, r1
 800e4a8:	603a      	str	r2, [r7, #0]
 800e4aa:	607b      	str	r3, [r7, #4]
 800e4ac:	4b67      	ldr	r3, [pc, #412]	; (800e64c <sensingRead+0x308>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	1c18      	adds	r0, r3, #0
 800e4b2:	f7f4 fdbf 	bl	8003034 <__aeabi_f2d>
 800e4b6:	0002      	movs	r2, r0
 800e4b8:	000b      	movs	r3, r1
 800e4ba:	6838      	ldr	r0, [r7, #0]
 800e4bc:	6879      	ldr	r1, [r7, #4]
 800e4be:	f7f3 ff11 	bl	80022e4 <__aeabi_dmul>
 800e4c2:	0002      	movs	r2, r0
 800e4c4:	000b      	movs	r3, r1
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 800e4c6:	0010      	movs	r0, r2
 800e4c8:	0019      	movs	r1, r3
 800e4ca:	f7f4 fdfb 	bl	80030c4 <__aeabi_d2f>
 800e4ce:	1c03      	adds	r3, r0, #0
 800e4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4d2:	e001      	b.n	800e4d8 <sensingRead+0x194>
	} else {
		voltagePassiveRaw = 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (voltagePassiveRaw == 0) {
 800e4d8:	2100      	movs	r1, #0
 800e4da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4dc:	f7f1 ffda 	bl	8000494 <__aeabi_fcmpeq>
 800e4e0:	1e03      	subs	r3, r0, #0
 800e4e2:	d006      	beq.n	800e4f2 <sensingRead+0x1ae>
		sprintf(voltagePassive, "--");
 800e4e4:	4a5a      	ldr	r2, [pc, #360]	; (800e650 <sensingRead+0x30c>)
 800e4e6:	4b53      	ldr	r3, [pc, #332]	; (800e634 <sensingRead+0x2f0>)
 800e4e8:	0011      	movs	r1, r2
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f002 fd1e 	bl	8010f2c <siprintf>
 800e4f0:	e005      	b.n	800e4fe <sensingRead+0x1ba>
	} else {
		float2Text(voltagePassive, voltagePassiveRaw);
 800e4f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4f4:	4b4f      	ldr	r3, [pc, #316]	; (800e634 <sensingRead+0x2f0>)
 800e4f6:	1c11      	adds	r1, r2, #0
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f7ff fdc9 	bl	800e090 <float2Text>
	}

	memset(voltageDrop, 0, 5);
 800e4fe:	4b55      	ldr	r3, [pc, #340]	; (800e654 <sensingRead+0x310>)
 800e500:	2205      	movs	r2, #5
 800e502:	2100      	movs	r1, #0
 800e504:	0018      	movs	r0, r3
 800e506:	f002 fbb9 	bl	8010c7c <memset>
	if (adcReading[2] < 3200) {
 800e50a:	4b45      	ldr	r3, [pc, #276]	; (800e620 <sensingRead+0x2dc>)
 800e50c:	889b      	ldrh	r3, [r3, #4]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	23c8      	movs	r3, #200	; 0xc8
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	429a      	cmp	r2, r3
 800e516:	d229      	bcs.n	800e56c <sensingRead+0x228>
		voltageDropRaw = ((3.3 * ((float) adcReading[2] + offsetADC)) / 4095);
 800e518:	4b41      	ldr	r3, [pc, #260]	; (800e620 <sensingRead+0x2dc>)
 800e51a:	889b      	ldrh	r3, [r3, #4]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	0018      	movs	r0, r3
 800e520:	f7f2 ff34 	bl	800138c <__aeabi_ui2f>
 800e524:	1c06      	adds	r6, r0, #0
 800e526:	4b44      	ldr	r3, [pc, #272]	; (800e638 <sensingRead+0x2f4>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	0018      	movs	r0, r3
 800e52c:	f7f2 fee8 	bl	8001300 <__aeabi_i2f>
 800e530:	1c03      	adds	r3, r0, #0
 800e532:	1c19      	adds	r1, r3, #0
 800e534:	1c30      	adds	r0, r6, #0
 800e536:	f7f2 f87b 	bl	8000630 <__aeabi_fadd>
 800e53a:	1c03      	adds	r3, r0, #0
 800e53c:	1c18      	adds	r0, r3, #0
 800e53e:	f7f4 fd79 	bl	8003034 <__aeabi_f2d>
 800e542:	4a3e      	ldr	r2, [pc, #248]	; (800e63c <sensingRead+0x2f8>)
 800e544:	4b3e      	ldr	r3, [pc, #248]	; (800e640 <sensingRead+0x2fc>)
 800e546:	f7f3 fecd 	bl	80022e4 <__aeabi_dmul>
 800e54a:	0002      	movs	r2, r0
 800e54c:	000b      	movs	r3, r1
 800e54e:	0010      	movs	r0, r2
 800e550:	0019      	movs	r1, r3
 800e552:	2200      	movs	r2, #0
 800e554:	4b3b      	ldr	r3, [pc, #236]	; (800e644 <sensingRead+0x300>)
 800e556:	f7f3 fabf 	bl	8001ad8 <__aeabi_ddiv>
 800e55a:	0002      	movs	r2, r0
 800e55c:	000b      	movs	r3, r1
 800e55e:	0010      	movs	r0, r2
 800e560:	0019      	movs	r1, r3
 800e562:	f7f4 fdaf 	bl	80030c4 <__aeabi_d2f>
 800e566:	1c03      	adds	r3, r0, #0
 800e568:	63bb      	str	r3, [r7, #56]	; 0x38
 800e56a:	e001      	b.n	800e570 <sensingRead+0x22c>

//		voltageDropRaw = voltageDropRaw - 0.59; //offset correction

	} else {
		voltageDropRaw = 0;
 800e56c:	2300      	movs	r3, #0
 800e56e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (voltageDropRaw == 0) {
 800e570:	2100      	movs	r1, #0
 800e572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e574:	f7f1 ff8e 	bl	8000494 <__aeabi_fcmpeq>
 800e578:	1e03      	subs	r3, r0, #0
 800e57a:	d006      	beq.n	800e58a <sensingRead+0x246>
		sprintf(voltageDrop, "--");
 800e57c:	4a34      	ldr	r2, [pc, #208]	; (800e650 <sensingRead+0x30c>)
 800e57e:	4b35      	ldr	r3, [pc, #212]	; (800e654 <sensingRead+0x310>)
 800e580:	0011      	movs	r1, r2
 800e582:	0018      	movs	r0, r3
 800e584:	f002 fcd2 	bl	8010f2c <siprintf>
 800e588:	e005      	b.n	800e596 <sensingRead+0x252>
	} else {
		float2Text(voltageDrop, voltageDropRaw);
 800e58a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e58c:	4b31      	ldr	r3, [pc, #196]	; (800e654 <sensingRead+0x310>)
 800e58e:	1c11      	adds	r1, r2, #0
 800e590:	0018      	movs	r0, r3
 800e592:	f7ff fd7d 	bl	800e090 <float2Text>
	}

	memset(resistance, 0, 5);
 800e596:	4b30      	ldr	r3, [pc, #192]	; (800e658 <sensingRead+0x314>)
 800e598:	2205      	movs	r2, #5
 800e59a:	2100      	movs	r1, #0
 800e59c:	0018      	movs	r0, r3
 800e59e:	f002 fb6d 	bl	8010c7c <memset>
	currentRaw = (3.3 - voltageDropRaw) / 10000;
 800e5a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5a4:	f7f4 fd46 	bl	8003034 <__aeabi_f2d>
 800e5a8:	0002      	movs	r2, r0
 800e5aa:	000b      	movs	r3, r1
 800e5ac:	4823      	ldr	r0, [pc, #140]	; (800e63c <sensingRead+0x2f8>)
 800e5ae:	4924      	ldr	r1, [pc, #144]	; (800e640 <sensingRead+0x2fc>)
 800e5b0:	f7f4 f904 	bl	80027bc <__aeabi_dsub>
 800e5b4:	0002      	movs	r2, r0
 800e5b6:	000b      	movs	r3, r1
 800e5b8:	0010      	movs	r0, r2
 800e5ba:	0019      	movs	r1, r3
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4b27      	ldr	r3, [pc, #156]	; (800e65c <sensingRead+0x318>)
 800e5c0:	f7f3 fa8a 	bl	8001ad8 <__aeabi_ddiv>
 800e5c4:	0002      	movs	r2, r0
 800e5c6:	000b      	movs	r3, r1
 800e5c8:	0010      	movs	r0, r2
 800e5ca:	0019      	movs	r1, r3
 800e5cc:	f7f4 fd7a 	bl	80030c4 <__aeabi_d2f>
 800e5d0:	1c03      	adds	r3, r0, #0
 800e5d2:	633b      	str	r3, [r7, #48]	; 0x30
	resistanceRaw = (voltageDropRaw / currentRaw) / 1000;
 800e5d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5d8:	f7f2 f9c6 	bl	8000968 <__aeabi_fdiv>
 800e5dc:	1c03      	adds	r3, r0, #0
 800e5de:	4920      	ldr	r1, [pc, #128]	; (800e660 <sensingRead+0x31c>)
 800e5e0:	1c18      	adds	r0, r3, #0
 800e5e2:	f7f2 f9c1 	bl	8000968 <__aeabi_fdiv>
 800e5e6:	1c03      	adds	r3, r0, #0
 800e5e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (voltageDropRaw == 0) {
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5ee:	f7f1 ff51 	bl	8000494 <__aeabi_fcmpeq>
 800e5f2:	1e03      	subs	r3, r0, #0
 800e5f4:	d006      	beq.n	800e604 <sensingRead+0x2c0>
		sprintf(resistance, "--");
 800e5f6:	4a16      	ldr	r2, [pc, #88]	; (800e650 <sensingRead+0x30c>)
 800e5f8:	4b17      	ldr	r3, [pc, #92]	; (800e658 <sensingRead+0x314>)
 800e5fa:	0011      	movs	r1, r2
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f002 fc95 	bl	8010f2c <siprintf>
 800e602:	e005      	b.n	800e610 <sensingRead+0x2cc>
	} else {
		float2Text(resistance, resistanceRaw);
 800e604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <sensingRead+0x314>)
 800e608:	1c11      	adds	r1, r2, #0
 800e60a:	0018      	movs	r0, r3
 800e60c:	f7ff fd40 	bl	800e090 <float2Text>
	}

	if (batteryState >= 8) {
 800e610:	4b07      	ldr	r3, [pc, #28]	; (800e630 <sensingRead+0x2ec>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2b07      	cmp	r3, #7
 800e616:	d927      	bls.n	800e668 <sensingRead+0x324>

		batteryLowFlag = 1;
 800e618:	4b12      	ldr	r3, [pc, #72]	; (800e664 <sensingRead+0x320>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	e026      	b.n	800e66e <sensingRead+0x32a>
 800e620:	2000028c 	.word	0x2000028c
 800e624:	00000ce4 	.word	0x00000ce4
 800e628:	00000fff 	.word	0x00000fff
 800e62c:	20000030 	.word	0x20000030
 800e630:	20000300 	.word	0x20000300
 800e634:	200004e4 	.word	0x200004e4
 800e638:	20000040 	.word	0x20000040
 800e63c:	66666666 	.word	0x66666666
 800e640:	400a6666 	.word	0x400a6666
 800e644:	40affe00 	.word	0x40affe00
 800e648:	40440000 	.word	0x40440000
 800e64c:	20000044 	.word	0x20000044
 800e650:	08013dd0 	.word	0x08013dd0
 800e654:	20000570 	.word	0x20000570
 800e658:	200005fc 	.word	0x200005fc
 800e65c:	40c38800 	.word	0x40c38800
 800e660:	447a0000 	.word	0x447a0000
 800e664:	2000010d 	.word	0x2000010d

	}else{
		batteryLowFlag = 0;
 800e668:	4bf9      	ldr	r3, [pc, #996]	; (800ea50 <sensingRead+0x70c>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]
	}

	batteryWarningPrintedFlag = 0;
 800e66e:	4bf9      	ldr	r3, [pc, #996]	; (800ea54 <sensingRead+0x710>)
 800e670:	2200      	movs	r2, #0
 800e672:	701a      	strb	r2, [r3, #0]

//								BME280 READINGS

//I2C read data
	uint8_t temperatureMSB = 0;
 800e674:	2311      	movs	r3, #17
 800e676:	2208      	movs	r2, #8
 800e678:	4694      	mov	ip, r2
 800e67a:	44bc      	add	ip, r7
 800e67c:	4463      	add	r3, ip
 800e67e:	2200      	movs	r2, #0
 800e680:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 800e682:	2310      	movs	r3, #16
 800e684:	2208      	movs	r2, #8
 800e686:	4694      	mov	ip, r2
 800e688:	44bc      	add	ip, r7
 800e68a:	4463      	add	r3, ip
 800e68c:	2200      	movs	r2, #0
 800e68e:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 800e690:	230f      	movs	r3, #15
 800e692:	2208      	movs	r2, #8
 800e694:	4694      	mov	ip, r2
 800e696:	44bc      	add	ip, r7
 800e698:	4463      	add	r3, ip
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 800e69e:	230e      	movs	r3, #14
 800e6a0:	2208      	movs	r2, #8
 800e6a2:	4694      	mov	ip, r2
 800e6a4:	44bc      	add	ip, r7
 800e6a6:	4463      	add	r3, ip
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 800e6ac:	230d      	movs	r3, #13
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	4694      	mov	ip, r2
 800e6b2:	44bc      	add	ip, r7
 800e6b4:	4463      	add	r3, ip
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 800e6ba:	230c      	movs	r3, #12
 800e6bc:	2208      	movs	r2, #8
 800e6be:	4694      	mov	ip, r2
 800e6c0:	44bc      	add	ip, r7
 800e6c2:	4463      	add	r3, ip
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 800e6c8:	230b      	movs	r3, #11
 800e6ca:	2208      	movs	r2, #8
 800e6cc:	4694      	mov	ip, r2
 800e6ce:	44bc      	add	ip, r7
 800e6d0:	4463      	add	r3, ip
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 800e6d6:	230a      	movs	r3, #10
 800e6d8:	2208      	movs	r2, #8
 800e6da:	4694      	mov	ip, r2
 800e6dc:	44bc      	add	ip, r7
 800e6de:	4463      	add	r3, ip
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	701a      	strb	r2, [r3, #0]

	//adc data
	BME280_S32_t temperatureADC = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	62bb      	str	r3, [r7, #40]	; 0x28
	BME280_S32_t pressureADC = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	627b      	str	r3, [r7, #36]	; 0x24
	BME280_S32_t humidityADC = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	623b      	str	r3, [r7, #32]

	//configure oversampling for hum
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_HUM, 1, &ctrlHum, 1,
 800e6f0:	48d9      	ldr	r0, [pc, #868]	; (800ea58 <sensingRead+0x714>)
 800e6f2:	2332      	movs	r3, #50	; 0x32
 800e6f4:	9302      	str	r3, [sp, #8]
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	4bd8      	ldr	r3, [pc, #864]	; (800ea5c <sensingRead+0x718>)
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	2301      	movs	r3, #1
 800e700:	22f2      	movs	r2, #242	; 0xf2
 800e702:	21ee      	movs	r1, #238	; 0xee
 800e704:	f7f6 fb8a 	bl	8004e1c <HAL_I2C_Mem_Write>
 800e708:	1e03      	subs	r3, r0, #0
 800e70a:	d001      	beq.n	800e710 <sensingRead+0x3cc>
			50) != HAL_OK) {
		Error_Handler();
 800e70c:	f001 ff68 	bl	80105e0 <Error_Handler>
	};

	//configure oversampling for press, temp
	//configure mode as force
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_MEAS, 1, &ctrlMeas,
 800e710:	48d1      	ldr	r0, [pc, #836]	; (800ea58 <sensingRead+0x714>)
 800e712:	2332      	movs	r3, #50	; 0x32
 800e714:	9302      	str	r3, [sp, #8]
 800e716:	2301      	movs	r3, #1
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	4bd1      	ldr	r3, [pc, #836]	; (800ea60 <sensingRead+0x71c>)
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	2301      	movs	r3, #1
 800e720:	22f4      	movs	r2, #244	; 0xf4
 800e722:	21ee      	movs	r1, #238	; 0xee
 800e724:	f7f6 fb7a 	bl	8004e1c <HAL_I2C_Mem_Write>
 800e728:	1e03      	subs	r3, r0, #0
 800e72a:	d001      	beq.n	800e730 <sensingRead+0x3ec>
			1, 50) != HAL_OK) {
		Error_Handler();
 800e72c:	f001 ff58 	bl	80105e0 <Error_Handler>
		;
	}

//wait for end
	HAL_Delay(70);
 800e730:	2046      	movs	r0, #70	; 0x46
 800e732:	f7f4 fee5 	bl	8003500 <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_MSB, 1, &humidityMSB, 1,
 800e736:	4bcb      	ldr	r3, [pc, #812]	; (800ea64 <sensingRead+0x720>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	48c7      	ldr	r0, [pc, #796]	; (800ea58 <sensingRead+0x714>)
 800e73c:	9302      	str	r3, [sp, #8]
 800e73e:	2301      	movs	r3, #1
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	260b      	movs	r6, #11
 800e744:	2308      	movs	r3, #8
 800e746:	18fa      	adds	r2, r7, r3
 800e748:	1993      	adds	r3, r2, r6
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	2301      	movs	r3, #1
 800e74e:	22fd      	movs	r2, #253	; 0xfd
 800e750:	21ee      	movs	r1, #238	; 0xee
 800e752:	f7f6 fc91 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_LSB, 1, &humidityLSB, 1,
 800e756:	4bc3      	ldr	r3, [pc, #780]	; (800ea64 <sensingRead+0x720>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	48bf      	ldr	r0, [pc, #764]	; (800ea58 <sensingRead+0x714>)
 800e75c:	9302      	str	r3, [sp, #8]
 800e75e:	2301      	movs	r3, #1
 800e760:	9301      	str	r3, [sp, #4]
 800e762:	230a      	movs	r3, #10
 800e764:	2208      	movs	r2, #8
 800e766:	4694      	mov	ip, r2
 800e768:	44bc      	add	ip, r7
 800e76a:	4463      	add	r3, ip
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	2301      	movs	r3, #1
 800e770:	22fe      	movs	r2, #254	; 0xfe
 800e772:	21ee      	movs	r1, #238	; 0xee
 800e774:	f7f6 fc80 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 800e778:	2308      	movs	r3, #8
 800e77a:	18fa      	adds	r2, r7, r3
 800e77c:	1993      	adds	r3, r2, r6
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	021b      	lsls	r3, r3, #8
 800e782:	220a      	movs	r2, #10
 800e784:	2108      	movs	r1, #8
 800e786:	468c      	mov	ip, r1
 800e788:	44bc      	add	ip, r7
 800e78a:	4462      	add	r2, ip
 800e78c:	7812      	ldrb	r2, [r2, #0]
 800e78e:	4313      	orrs	r3, r2
 800e790:	623b      	str	r3, [r7, #32]

	humidityValue = BME280_compensate_H_int32(humidityADC) / 1024;
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	0018      	movs	r0, r3
 800e796:	f000 fcb7 	bl	800f108 <BME280_compensate_H_int32>
 800e79a:	0003      	movs	r3, r0
 800e79c:	0a9a      	lsrs	r2, r3, #10
 800e79e:	4bb2      	ldr	r3, [pc, #712]	; (800ea68 <sensingRead+0x724>)
 800e7a0:	601a      	str	r2, [r3, #0]

	//TEMPERATURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_MSB, 1, &temperatureMSB,
 800e7a2:	4bb0      	ldr	r3, [pc, #704]	; (800ea64 <sensingRead+0x720>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	48ac      	ldr	r0, [pc, #688]	; (800ea58 <sensingRead+0x714>)
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	2611      	movs	r6, #17
 800e7b0:	2308      	movs	r3, #8
 800e7b2:	18fa      	adds	r2, r7, r3
 800e7b4:	1993      	adds	r3, r2, r6
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	22fa      	movs	r2, #250	; 0xfa
 800e7bc:	21ee      	movs	r1, #238	; 0xee
 800e7be:	f7f6 fc5b 	bl	8005078 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_LSB, 1, &temperatureLSB,
 800e7c2:	4ba8      	ldr	r3, [pc, #672]	; (800ea64 <sensingRead+0x720>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	48a4      	ldr	r0, [pc, #656]	; (800ea58 <sensingRead+0x714>)
 800e7c8:	9302      	str	r3, [sp, #8]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	2310      	movs	r3, #16
 800e7d0:	2208      	movs	r2, #8
 800e7d2:	4694      	mov	ip, r2
 800e7d4:	44bc      	add	ip, r7
 800e7d6:	4463      	add	r3, ip
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	2301      	movs	r3, #1
 800e7dc:	22fb      	movs	r2, #251	; 0xfb
 800e7de:	21ee      	movs	r1, #238	; 0xee
 800e7e0:	f7f6 fc4a 	bl	8005078 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_XLSB, 1, &temperatureXLSB,
 800e7e4:	4b9f      	ldr	r3, [pc, #636]	; (800ea64 <sensingRead+0x720>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	489b      	ldr	r0, [pc, #620]	; (800ea58 <sensingRead+0x714>)
 800e7ea:	9302      	str	r3, [sp, #8]
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	220f      	movs	r2, #15
 800e7f2:	2308      	movs	r3, #8
 800e7f4:	18f9      	adds	r1, r7, r3
 800e7f6:	188b      	adds	r3, r1, r2
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	22fc      	movs	r2, #252	; 0xfc
 800e7fe:	21ee      	movs	r1, #238	; 0xee
 800e800:	f7f6 fc3a 	bl	8005078 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 800e804:	2308      	movs	r3, #8
 800e806:	18fa      	adds	r2, r7, r3
 800e808:	1993      	adds	r3, r2, r6
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	031a      	lsls	r2, r3, #12
 800e80e:	2310      	movs	r3, #16
 800e810:	2108      	movs	r1, #8
 800e812:	468c      	mov	ip, r1
 800e814:	44bc      	add	ip, r7
 800e816:	4463      	add	r3, ip
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	011b      	lsls	r3, r3, #4
 800e81c:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 800e81e:	220f      	movs	r2, #15
 800e820:	2108      	movs	r1, #8
 800e822:	468c      	mov	ip, r1
 800e824:	44bc      	add	ip, r7
 800e826:	4462      	add	r2, ip
 800e828:	7812      	ldrb	r2, [r2, #0]
 800e82a:	0912      	lsrs	r2, r2, #4
 800e82c:	b2d2      	uxtb	r2, r2
	temperatureADC =
 800e82e:	4313      	orrs	r3, r2
 800e830:	62bb      	str	r3, [r7, #40]	; 0x28

	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	0018      	movs	r0, r3
 800e836:	f000 fa7f 	bl	800ed38 <BME280_compensate_T_int32>
 800e83a:	0003      	movs	r3, r0
 800e83c:	2164      	movs	r1, #100	; 0x64
 800e83e:	0018      	movs	r0, r3
 800e840:	f7f1 fcf2 	bl	8000228 <__divsi3>
 800e844:	0003      	movs	r3, r0
 800e846:	001a      	movs	r2, r3
			+ temperatureCompensation;
 800e848:	4b88      	ldr	r3, [pc, #544]	; (800ea6c <sensingRead+0x728>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	b25b      	sxtb	r3, r3
 800e84e:	18d2      	adds	r2, r2, r3
	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 800e850:	4b87      	ldr	r3, [pc, #540]	; (800ea70 <sensingRead+0x72c>)
 800e852:	601a      	str	r2, [r3, #0]

	//PRESSURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_MSB, 1, &pressureMSB, 1,
 800e854:	4b83      	ldr	r3, [pc, #524]	; (800ea64 <sensingRead+0x720>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	487f      	ldr	r0, [pc, #508]	; (800ea58 <sensingRead+0x714>)
 800e85a:	9302      	str	r3, [sp, #8]
 800e85c:	2301      	movs	r3, #1
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	260e      	movs	r6, #14
 800e862:	2308      	movs	r3, #8
 800e864:	18fa      	adds	r2, r7, r3
 800e866:	1993      	adds	r3, r2, r6
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	2301      	movs	r3, #1
 800e86c:	22f7      	movs	r2, #247	; 0xf7
 800e86e:	21ee      	movs	r1, #238	; 0xee
 800e870:	f7f6 fc02 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_LSB, 1, &pressureLSB, 1,
 800e874:	4b7b      	ldr	r3, [pc, #492]	; (800ea64 <sensingRead+0x720>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	4877      	ldr	r0, [pc, #476]	; (800ea58 <sensingRead+0x714>)
 800e87a:	9302      	str	r3, [sp, #8]
 800e87c:	2301      	movs	r3, #1
 800e87e:	9301      	str	r3, [sp, #4]
 800e880:	230d      	movs	r3, #13
 800e882:	2208      	movs	r2, #8
 800e884:	4694      	mov	ip, r2
 800e886:	44bc      	add	ip, r7
 800e888:	4463      	add	r3, ip
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	2301      	movs	r3, #1
 800e88e:	22f8      	movs	r2, #248	; 0xf8
 800e890:	21ee      	movs	r1, #238	; 0xee
 800e892:	f7f6 fbf1 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_XLSB, 1, &pressureXLSB,
 800e896:	4b73      	ldr	r3, [pc, #460]	; (800ea64 <sensingRead+0x720>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	486f      	ldr	r0, [pc, #444]	; (800ea58 <sensingRead+0x714>)
 800e89c:	9302      	str	r3, [sp, #8]
 800e89e:	2301      	movs	r3, #1
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	220c      	movs	r2, #12
 800e8a4:	2308      	movs	r3, #8
 800e8a6:	18f9      	adds	r1, r7, r3
 800e8a8:	188b      	adds	r3, r1, r2
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	22f9      	movs	r2, #249	; 0xf9
 800e8b0:	21ee      	movs	r1, #238	; 0xee
 800e8b2:	f7f6 fbe1 	bl	8005078 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800e8b6:	2308      	movs	r3, #8
 800e8b8:	18fb      	adds	r3, r7, r3
 800e8ba:	199b      	adds	r3, r3, r6
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	031a      	lsls	r2, r3, #12
 800e8c0:	230d      	movs	r3, #13
 800e8c2:	2108      	movs	r1, #8
 800e8c4:	468c      	mov	ip, r1
 800e8c6:	44bc      	add	ip, r7
 800e8c8:	4463      	add	r3, ip
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	011b      	lsls	r3, r3, #4
 800e8ce:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 800e8d0:	220c      	movs	r2, #12
 800e8d2:	2108      	movs	r1, #8
 800e8d4:	468c      	mov	ip, r1
 800e8d6:	44bc      	add	ip, r7
 800e8d8:	4462      	add	r2, ip
 800e8da:	7812      	ldrb	r2, [r2, #0]
 800e8dc:	0912      	lsrs	r2, r2, #4
 800e8de:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	627b      	str	r3, [r7, #36]	; 0x24

	pressureValue = BME280_compensate_P_int64(pressureADC) / 256;
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	0018      	movs	r0, r3
 800e8e8:	f000 fa62 	bl	800edb0 <BME280_compensate_P_int64>
 800e8ec:	0003      	movs	r3, r0
 800e8ee:	0a1a      	lsrs	r2, r3, #8
 800e8f0:	4b60      	ldr	r3, [pc, #384]	; (800ea74 <sensingRead+0x730>)
 800e8f2:	601a      	str	r2, [r3, #0]
	 * R- gas constant[J/(mol*K)]
	 * T- air temperature[K]
	 *
	 */

	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e8f4:	4b5e      	ldr	r3, [pc, #376]	; (800ea70 <sensingRead+0x72c>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	0018      	movs	r0, r3
 800e8fa:	f7f2 fd01 	bl	8001300 <__aeabi_i2f>
 800e8fe:	1c03      	adds	r3, r0, #0
 800e900:	1c18      	adds	r0, r3, #0
 800e902:	f7f4 fb97 	bl	8003034 <__aeabi_f2d>
 800e906:	4a5c      	ldr	r2, [pc, #368]	; (800ea78 <sensingRead+0x734>)
 800e908:	4b5c      	ldr	r3, [pc, #368]	; (800ea7c <sensingRead+0x738>)
 800e90a:	f7f2 fd7b 	bl	8001404 <__aeabi_dadd>
 800e90e:	0002      	movs	r2, r0
 800e910:	000b      	movs	r3, r1
 800e912:	0010      	movs	r0, r2
 800e914:	0019      	movs	r1, r3
 800e916:	4a5a      	ldr	r2, [pc, #360]	; (800ea80 <sensingRead+0x73c>)
 800e918:	4b5a      	ldr	r3, [pc, #360]	; (800ea84 <sensingRead+0x740>)
 800e91a:	f7f3 fce3 	bl	80022e4 <__aeabi_dmul>
 800e91e:	0002      	movs	r2, r0
 800e920:	000b      	movs	r3, r1
 800e922:	0010      	movs	r0, r2
 800e924:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800e926:	4a58      	ldr	r2, [pc, #352]	; (800ea88 <sensingRead+0x744>)
 800e928:	4b58      	ldr	r3, [pc, #352]	; (800ea8c <sensingRead+0x748>)
 800e92a:	f7f3 f8d5 	bl	8001ad8 <__aeabi_ddiv>
 800e92e:	0002      	movs	r2, r0
 800e930:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e932:	0011      	movs	r1, r2
 800e934:	000c      	movs	r4, r1
 800e936:	2180      	movs	r1, #128	; 0x80
 800e938:	0609      	lsls	r1, r1, #24
 800e93a:	4059      	eors	r1, r3
 800e93c:	000d      	movs	r5, r1
			* log((float) pressureValue / ((float) pressureReference * 100));
 800e93e:	4b4d      	ldr	r3, [pc, #308]	; (800ea74 <sensingRead+0x730>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	0018      	movs	r0, r3
 800e944:	f7f2 fd22 	bl	800138c <__aeabi_ui2f>
 800e948:	1c06      	adds	r6, r0, #0
 800e94a:	4b51      	ldr	r3, [pc, #324]	; (800ea90 <sensingRead+0x74c>)
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	b21b      	sxth	r3, r3
 800e950:	0018      	movs	r0, r3
 800e952:	f7f2 fcd5 	bl	8001300 <__aeabi_i2f>
 800e956:	1c03      	adds	r3, r0, #0
 800e958:	494e      	ldr	r1, [pc, #312]	; (800ea94 <sensingRead+0x750>)
 800e95a:	1c18      	adds	r0, r3, #0
 800e95c:	f7f2 f9ce 	bl	8000cfc <__aeabi_fmul>
 800e960:	1c03      	adds	r3, r0, #0
 800e962:	1c19      	adds	r1, r3, #0
 800e964:	1c30      	adds	r0, r6, #0
 800e966:	f7f1 ffff 	bl	8000968 <__aeabi_fdiv>
 800e96a:	1c03      	adds	r3, r0, #0
 800e96c:	1c18      	adds	r0, r3, #0
 800e96e:	f7f4 fb61 	bl	8003034 <__aeabi_f2d>
 800e972:	0002      	movs	r2, r0
 800e974:	000b      	movs	r3, r1
 800e976:	0010      	movs	r0, r2
 800e978:	0019      	movs	r1, r3
 800e97a:	f003 fbf9 	bl	8012170 <log>
 800e97e:	0002      	movs	r2, r0
 800e980:	000b      	movs	r3, r1
 800e982:	0020      	movs	r0, r4
 800e984:	0029      	movs	r1, r5
 800e986:	f7f3 fcad 	bl	80022e4 <__aeabi_dmul>
 800e98a:	0002      	movs	r2, r0
 800e98c:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 800e98e:	0010      	movs	r0, r2
 800e990:	0019      	movs	r1, r3
 800e992:	f7f4 fac3 	bl	8002f1c <__aeabi_d2iz>
 800e996:	0002      	movs	r2, r0
 800e998:	4b3f      	ldr	r3, [pc, #252]	; (800ea98 <sensingRead+0x754>)
 800e99a:	601a      	str	r2, [r3, #0]

	pressureValue = pressureValue / 100;
 800e99c:	4b35      	ldr	r3, [pc, #212]	; (800ea74 <sensingRead+0x730>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2164      	movs	r1, #100	; 0x64
 800e9a2:	0018      	movs	r0, r3
 800e9a4:	f7f1 fbb6 	bl	8000114 <__udivsi3>
 800e9a8:	0003      	movs	r3, r0
 800e9aa:	001a      	movs	r2, r3
 800e9ac:	4b31      	ldr	r3, [pc, #196]	; (800ea74 <sensingRead+0x730>)
 800e9ae:	601a      	str	r2, [r3, #0]

	//								LIS3MDL READINGS

	//magnetometer data
	uint8_t magnetXLSB = 0;
 800e9b0:	2309      	movs	r3, #9
 800e9b2:	2208      	movs	r2, #8
 800e9b4:	4694      	mov	ip, r2
 800e9b6:	44bc      	add	ip, r7
 800e9b8:	4463      	add	r3, ip
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	701a      	strb	r2, [r3, #0]
	uint8_t magnetXMSB = 0;
 800e9be:	2308      	movs	r3, #8
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	4694      	mov	ip, r2
 800e9c4:	44bc      	add	ip, r7
 800e9c6:	4463      	add	r3, ip
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]

	uint8_t magnetYLSB = 0;
 800e9cc:	230f      	movs	r3, #15
 800e9ce:	18fb      	adds	r3, r7, r3
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	701a      	strb	r2, [r3, #0]
	uint8_t magnetYMSB = 0;
 800e9d4:	230e      	movs	r3, #14
 800e9d6:	18fb      	adds	r3, r7, r3
 800e9d8:	2200      	movs	r2, #0
 800e9da:	701a      	strb	r2, [r3, #0]

	int16_t magneticFieldXADC;
	int16_t magneticFieldYADC;

	if (HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800e9dc:	4b21      	ldr	r3, [pc, #132]	; (800ea64 <sensingRead+0x720>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	481d      	ldr	r0, [pc, #116]	; (800ea58 <sensingRead+0x714>)
 800e9e2:	9302      	str	r3, [sp, #8]
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	4b2c      	ldr	r3, [pc, #176]	; (800ea9c <sensingRead+0x758>)
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	2222      	movs	r2, #34	; 0x22
 800e9f0:	2138      	movs	r1, #56	; 0x38
 800e9f2:	f7f6 fa13 	bl	8004e1c <HAL_I2C_Mem_Write>
 800e9f6:	1e03      	subs	r3, r0, #0
 800e9f8:	d001      	beq.n	800e9fe <sensingRead+0x6ba>
			&ctrlMagnetometerContinous, 1, i2cTimeout) != HAL_OK) {
		Error_Handler();
 800e9fa:	f001 fdf1 	bl	80105e0 <Error_Handler>
	};

	HAL_Delay(20);
 800e9fe:	2014      	movs	r0, #20
 800ea00:	f7f4 fd7e 	bl	8003500 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_L, 1, &magnetXLSB, 1,
 800ea04:	4b17      	ldr	r3, [pc, #92]	; (800ea64 <sensingRead+0x720>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	4813      	ldr	r0, [pc, #76]	; (800ea58 <sensingRead+0x714>)
 800ea0a:	9302      	str	r3, [sp, #8]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	2409      	movs	r4, #9
 800ea12:	2608      	movs	r6, #8
 800ea14:	19bb      	adds	r3, r7, r6
 800ea16:	191b      	adds	r3, r3, r4
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	2228      	movs	r2, #40	; 0x28
 800ea1e:	2138      	movs	r1, #56	; 0x38
 800ea20:	f7f6 fb2a 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1, &magnetXMSB, 1,
 800ea24:	4b0f      	ldr	r3, [pc, #60]	; (800ea64 <sensingRead+0x720>)
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	480b      	ldr	r0, [pc, #44]	; (800ea58 <sensingRead+0x714>)
 800ea2a:	9302      	str	r3, [sp, #8]
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	9301      	str	r3, [sp, #4]
 800ea30:	2508      	movs	r5, #8
 800ea32:	19bb      	adds	r3, r7, r6
 800ea34:	195b      	adds	r3, r3, r5
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	2301      	movs	r3, #1
 800ea3a:	2229      	movs	r2, #41	; 0x29
 800ea3c:	2138      	movs	r1, #56	; 0x38
 800ea3e:	f7f6 fb1b 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_L, 1, &magnetYLSB, 1,
 800ea42:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <sensingRead+0x720>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	4804      	ldr	r0, [pc, #16]	; (800ea58 <sensingRead+0x714>)
 800ea48:	9302      	str	r3, [sp, #8]
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e028      	b.n	800eaa0 <sensingRead+0x75c>
 800ea4e:	46c0      	nop			; (mov r8, r8)
 800ea50:	2000010d 	.word	0x2000010d
 800ea54:	200005e8 	.word	0x200005e8
 800ea58:	20000160 	.word	0x20000160
 800ea5c:	2000002a 	.word	0x2000002a
 800ea60:	20000029 	.word	0x20000029
 800ea64:	2000003e 	.word	0x2000003e
 800ea68:	2000014c 	.word	0x2000014c
 800ea6c:	2000002c 	.word	0x2000002c
 800ea70:	20000304 	.word	0x20000304
 800ea74:	20000584 	.word	0x20000584
 800ea78:	66666666 	.word	0x66666666
 800ea7c:	40711266 	.word	0x40711266
 800ea80:	9ba5e354 	.word	0x9ba5e354
 800ea84:	4020a0c4 	.word	0x4020a0c4
 800ea88:	db22d0e5 	.word	0xdb22d0e5
 800ea8c:	3fd27ef9 	.word	0x3fd27ef9
 800ea90:	2000002e 	.word	0x2000002e
 800ea94:	42c80000 	.word	0x42c80000
 800ea98:	20000590 	.word	0x20000590
 800ea9c:	2000010c 	.word	0x2000010c
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	230f      	movs	r3, #15
 800eaa4:	18fb      	adds	r3, r7, r3
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	222a      	movs	r2, #42	; 0x2a
 800eaac:	2138      	movs	r1, #56	; 0x38
 800eaae:	f7f6 fae3 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_H, 1, &magnetYMSB, 1,
 800eab2:	4b91      	ldr	r3, [pc, #580]	; (800ecf8 <sensingRead+0x9b4>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	4891      	ldr	r0, [pc, #580]	; (800ecfc <sensingRead+0x9b8>)
 800eab8:	9302      	str	r3, [sp, #8]
 800eaba:	2301      	movs	r3, #1
 800eabc:	9301      	str	r3, [sp, #4]
 800eabe:	230e      	movs	r3, #14
 800eac0:	18fb      	adds	r3, r7, r3
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	2301      	movs	r3, #1
 800eac6:	222b      	movs	r2, #43	; 0x2b
 800eac8:	2138      	movs	r1, #56	; 0x38
 800eaca:	f7f6 fad5 	bl	8005078 <HAL_I2C_Mem_Read>
			i2cTimeout);

	magneticFieldXADC = (int16_t) magnetXMSB << 8 | (int16_t) magnetXLSB;
 800eace:	19ba      	adds	r2, r7, r6
 800ead0:	1953      	adds	r3, r2, r5
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	021b      	lsls	r3, r3, #8
 800ead6:	b219      	sxth	r1, r3
 800ead8:	19ba      	adds	r2, r7, r6
 800eada:	1913      	adds	r3, r2, r4
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	b21a      	sxth	r2, r3
 800eae0:	2016      	movs	r0, #22
 800eae2:	19bc      	adds	r4, r7, r6
 800eae4:	1823      	adds	r3, r4, r0
 800eae6:	430a      	orrs	r2, r1
 800eae8:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = (int16_t) magnetYMSB << 8 | (int16_t) magnetYLSB;
 800eaea:	230e      	movs	r3, #14
 800eaec:	18fb      	adds	r3, r7, r3
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	021b      	lsls	r3, r3, #8
 800eaf2:	b219      	sxth	r1, r3
 800eaf4:	230f      	movs	r3, #15
 800eaf6:	18fb      	adds	r3, r7, r3
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	b21a      	sxth	r2, r3
 800eafc:	2414      	movs	r4, #20
 800eafe:	19bb      	adds	r3, r7, r6
 800eb00:	191b      	adds	r3, r3, r4
 800eb02:	430a      	orrs	r2, r1
 800eb04:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL OFFSET CORRECTION

//	//for 4 Gs
	magneticFieldXADC = magneticFieldXADC + offsetMagnetometerX;
 800eb06:	4b7e      	ldr	r3, [pc, #504]	; (800ed00 <sensingRead+0x9bc>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	19bb      	adds	r3, r7, r6
 800eb0e:	181b      	adds	r3, r3, r0
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	18d3      	adds	r3, r2, r3
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	19bb      	adds	r3, r7, r6
 800eb18:	181b      	adds	r3, r3, r0
 800eb1a:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = magneticFieldYADC + offsetMagnetometerY;
 800eb1c:	4b79      	ldr	r3, [pc, #484]	; (800ed04 <sensingRead+0x9c0>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	19bb      	adds	r3, r7, r6
 800eb24:	191b      	adds	r3, r3, r4
 800eb26:	881b      	ldrh	r3, [r3, #0]
 800eb28:	18d3      	adds	r3, r2, r3
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	19bb      	adds	r3, r7, r6
 800eb2e:	191b      	adds	r3, r3, r4
 800eb30:	801a      	strh	r2, [r3, #0]
//	magneticFieldYADC = 0;

	//								LIS3MDL DECREASE VALUE

//	uint16_t magneticFieldDivider = 270;
	uint16_t magneticFieldDivider = 130;
 800eb32:	2512      	movs	r5, #18
 800eb34:	19bb      	adds	r3, r7, r6
 800eb36:	195b      	adds	r3, r3, r5
 800eb38:	2282      	movs	r2, #130	; 0x82
 800eb3a:	801a      	strh	r2, [r3, #0]
//	if (magneticFieldY < -12)
//		magneticFieldY = -12;

//	new method
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
			/ magneticFieldDivider;
 800eb3c:	19bb      	adds	r3, r7, r6
 800eb3e:	181b      	adds	r3, r3, r0
 800eb40:	2200      	movs	r2, #0
 800eb42:	5e9a      	ldrsh	r2, [r3, r2]
 800eb44:	19bb      	adds	r3, r7, r6
 800eb46:	195b      	adds	r3, r3, r5
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	0019      	movs	r1, r3
 800eb4c:	0010      	movs	r0, r2
 800eb4e:	f7f1 fb6b 	bl	8000228 <__divsi3>
 800eb52:	0003      	movs	r3, r0
 800eb54:	0019      	movs	r1, r3
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
 800eb56:	4b6c      	ldr	r3, [pc, #432]	; (800ed08 <sensingRead+0x9c4>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb5c:	001a      	movs	r2, r3
 800eb5e:	b209      	sxth	r1, r1
 800eb60:	4b6a      	ldr	r3, [pc, #424]	; (800ed0c <sensingRead+0x9c8>)
 800eb62:	0052      	lsls	r2, r2, #1
 800eb64:	52d1      	strh	r1, [r2, r3]
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
			/ magneticFieldDivider;
 800eb66:	19bb      	adds	r3, r7, r6
 800eb68:	191b      	adds	r3, r3, r4
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	5e9a      	ldrsh	r2, [r3, r2]
 800eb6e:	19bb      	adds	r3, r7, r6
 800eb70:	195b      	adds	r3, r3, r5
 800eb72:	881b      	ldrh	r3, [r3, #0]
 800eb74:	0019      	movs	r1, r3
 800eb76:	0010      	movs	r0, r2
 800eb78:	f7f1 fb56 	bl	8000228 <__divsi3>
 800eb7c:	0003      	movs	r3, r0
 800eb7e:	0019      	movs	r1, r3
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
 800eb80:	4b61      	ldr	r3, [pc, #388]	; (800ed08 <sensingRead+0x9c4>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	5e9b      	ldrsh	r3, [r3, r2]
 800eb86:	001a      	movs	r2, r3
 800eb88:	b209      	sxth	r1, r1
 800eb8a:	4b61      	ldr	r3, [pc, #388]	; (800ed10 <sensingRead+0x9cc>)
 800eb8c:	0052      	lsls	r2, r2, #1
 800eb8e:	52d1      	strh	r1, [r2, r3]

	magneticFieldMinX = 0;
 800eb90:	4b60      	ldr	r3, [pc, #384]	; (800ed14 <sensingRead+0x9d0>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxX = 0;
 800eb96:	4b60      	ldr	r3, [pc, #384]	; (800ed18 <sensingRead+0x9d4>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	801a      	strh	r2, [r3, #0]
	magneticFieldMinY = 0;
 800eb9c:	4b5f      	ldr	r3, [pc, #380]	; (800ed1c <sensingRead+0x9d8>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxY = 0;
 800eba2:	4b5f      	ldr	r3, [pc, #380]	; (800ed20 <sensingRead+0x9dc>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	801a      	strh	r2, [r3, #0]

	//finx max and min value

	magneticFieldMaxX = findMax(magneticFieldContainerX,
 800eba8:	4b58      	ldr	r3, [pc, #352]	; (800ed0c <sensingRead+0x9c8>)
 800ebaa:	2164      	movs	r1, #100	; 0x64
 800ebac:	0018      	movs	r0, r3
 800ebae:	f000 fb19 	bl	800f1e4 <findMax>
 800ebb2:	0003      	movs	r3, r0
 800ebb4:	001a      	movs	r2, r3
 800ebb6:	4b58      	ldr	r3, [pc, #352]	; (800ed18 <sensingRead+0x9d4>)
 800ebb8:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinX = findMin(magneticFieldContainerX,
 800ebba:	4b54      	ldr	r3, [pc, #336]	; (800ed0c <sensingRead+0x9c8>)
 800ebbc:	2164      	movs	r1, #100	; 0x64
 800ebbe:	0018      	movs	r0, r3
 800ebc0:	f000 fb44 	bl	800f24c <findMin>
 800ebc4:	0003      	movs	r3, r0
 800ebc6:	001a      	movs	r2, r3
 800ebc8:	4b52      	ldr	r3, [pc, #328]	; (800ed14 <sensingRead+0x9d0>)
 800ebca:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldMaxY = findMax(magneticFieldContainerY,
 800ebcc:	4b50      	ldr	r3, [pc, #320]	; (800ed10 <sensingRead+0x9cc>)
 800ebce:	2164      	movs	r1, #100	; 0x64
 800ebd0:	0018      	movs	r0, r3
 800ebd2:	f000 fb07 	bl	800f1e4 <findMax>
 800ebd6:	0003      	movs	r3, r0
 800ebd8:	001a      	movs	r2, r3
 800ebda:	4b51      	ldr	r3, [pc, #324]	; (800ed20 <sensingRead+0x9dc>)
 800ebdc:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinY = findMin(magneticFieldContainerY,
 800ebde:	4b4c      	ldr	r3, [pc, #304]	; (800ed10 <sensingRead+0x9cc>)
 800ebe0:	2164      	movs	r1, #100	; 0x64
 800ebe2:	0018      	movs	r0, r3
 800ebe4:	f000 fb32 	bl	800f24c <findMin>
 800ebe8:	0003      	movs	r3, r0
 800ebea:	001a      	movs	r2, r3
 800ebec:	4b4b      	ldr	r3, [pc, #300]	; (800ed1c <sensingRead+0x9d8>)
 800ebee:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldCenterX = (magneticFieldMaxX + magneticFieldMinX) / 2;
 800ebf0:	4b49      	ldr	r3, [pc, #292]	; (800ed18 <sensingRead+0x9d4>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	5e9b      	ldrsh	r3, [r3, r2]
 800ebf6:	001a      	movs	r2, r3
 800ebf8:	4b46      	ldr	r3, [pc, #280]	; (800ed14 <sensingRead+0x9d0>)
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	5e5b      	ldrsh	r3, [r3, r1]
 800ebfe:	18d3      	adds	r3, r2, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	da00      	bge.n	800ec06 <sensingRead+0x8c2>
 800ec04:	3301      	adds	r3, #1
 800ec06:	105b      	asrs	r3, r3, #1
 800ec08:	b21a      	sxth	r2, r3
 800ec0a:	4b46      	ldr	r3, [pc, #280]	; (800ed24 <sensingRead+0x9e0>)
 800ec0c:	801a      	strh	r2, [r3, #0]
	magneticFieldCenterY = (magneticFieldMaxY + magneticFieldMinY) / 2;
 800ec0e:	4b44      	ldr	r3, [pc, #272]	; (800ed20 <sensingRead+0x9dc>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	5e9b      	ldrsh	r3, [r3, r2]
 800ec14:	001a      	movs	r2, r3
 800ec16:	4b41      	ldr	r3, [pc, #260]	; (800ed1c <sensingRead+0x9d8>)
 800ec18:	2100      	movs	r1, #0
 800ec1a:	5e5b      	ldrsh	r3, [r3, r1]
 800ec1c:	18d3      	adds	r3, r2, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	da00      	bge.n	800ec24 <sensingRead+0x8e0>
 800ec22:	3301      	adds	r3, #1
 800ec24:	105b      	asrs	r3, r3, #1
 800ec26:	b21a      	sxth	r2, r3
 800ec28:	4b3f      	ldr	r3, [pc, #252]	; (800ed28 <sensingRead+0x9e4>)
 800ec2a:	801a      	strh	r2, [r3, #0]

	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 800ec2c:	4b36      	ldr	r3, [pc, #216]	; (800ed08 <sensingRead+0x9c4>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	5e9b      	ldrsh	r3, [r3, r2]
 800ec32:	001a      	movs	r2, r3
 800ec34:	4b35      	ldr	r3, [pc, #212]	; (800ed0c <sensingRead+0x9c8>)
 800ec36:	0052      	lsls	r2, r2, #1
 800ec38:	5ed3      	ldrsh	r3, [r2, r3]
 800ec3a:	b29a      	uxth	r2, r3
			- magneticFieldCenterX;
 800ec3c:	4b39      	ldr	r3, [pc, #228]	; (800ed24 <sensingRead+0x9e0>)
 800ec3e:	2100      	movs	r1, #0
 800ec40:	5e5b      	ldrsh	r3, [r3, r1]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	b21a      	sxth	r2, r3
	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 800ec4a:	4b38      	ldr	r3, [pc, #224]	; (800ed2c <sensingRead+0x9e8>)
 800ec4c:	801a      	strh	r2, [r3, #0]
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 800ec4e:	4b2e      	ldr	r3, [pc, #184]	; (800ed08 <sensingRead+0x9c4>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	5e9b      	ldrsh	r3, [r3, r2]
 800ec54:	001a      	movs	r2, r3
 800ec56:	4b2e      	ldr	r3, [pc, #184]	; (800ed10 <sensingRead+0x9cc>)
 800ec58:	0052      	lsls	r2, r2, #1
 800ec5a:	5ed3      	ldrsh	r3, [r2, r3]
 800ec5c:	b29a      	uxth	r2, r3
			- magneticFieldCenterY;
 800ec5e:	4b32      	ldr	r3, [pc, #200]	; (800ed28 <sensingRead+0x9e4>)
 800ec60:	2100      	movs	r1, #0
 800ec62:	5e5b      	ldrsh	r3, [r3, r1]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	b21a      	sxth	r2, r3
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 800ec6c:	4b30      	ldr	r3, [pc, #192]	; (800ed30 <sensingRead+0x9ec>)
 800ec6e:	801a      	strh	r2, [r3, #0]

	if (magneticFieldX > 18)
 800ec70:	4b2e      	ldr	r3, [pc, #184]	; (800ed2c <sensingRead+0x9e8>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	5e9b      	ldrsh	r3, [r3, r2]
 800ec76:	2b12      	cmp	r3, #18
 800ec78:	dd02      	ble.n	800ec80 <sensingRead+0x93c>
		magneticFieldX = 18;
 800ec7a:	4b2c      	ldr	r3, [pc, #176]	; (800ed2c <sensingRead+0x9e8>)
 800ec7c:	2212      	movs	r2, #18
 800ec7e:	801a      	strh	r2, [r3, #0]
	if (magneticFieldX < -18)
 800ec80:	4b2a      	ldr	r3, [pc, #168]	; (800ed2c <sensingRead+0x9e8>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	5e9b      	ldrsh	r3, [r3, r2]
 800ec86:	3312      	adds	r3, #18
 800ec88:	da03      	bge.n	800ec92 <sensingRead+0x94e>
		magneticFieldX = -18;
 800ec8a:	4b28      	ldr	r3, [pc, #160]	; (800ed2c <sensingRead+0x9e8>)
 800ec8c:	2212      	movs	r2, #18
 800ec8e:	4252      	negs	r2, r2
 800ec90:	801a      	strh	r2, [r3, #0]

	if (magneticFieldY > 12)
 800ec92:	4b27      	ldr	r3, [pc, #156]	; (800ed30 <sensingRead+0x9ec>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	5e9b      	ldrsh	r3, [r3, r2]
 800ec98:	2b0c      	cmp	r3, #12
 800ec9a:	dd02      	ble.n	800eca2 <sensingRead+0x95e>
		magneticFieldY = 12;
 800ec9c:	4b24      	ldr	r3, [pc, #144]	; (800ed30 <sensingRead+0x9ec>)
 800ec9e:	220c      	movs	r2, #12
 800eca0:	801a      	strh	r2, [r3, #0]
	if (magneticFieldY < -12)
 800eca2:	4b23      	ldr	r3, [pc, #140]	; (800ed30 <sensingRead+0x9ec>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	5e9b      	ldrsh	r3, [r3, r2]
 800eca8:	330c      	adds	r3, #12
 800ecaa:	da03      	bge.n	800ecb4 <sensingRead+0x970>
		magneticFieldY = -12;
 800ecac:	4b20      	ldr	r3, [pc, #128]	; (800ed30 <sensingRead+0x9ec>)
 800ecae:	220c      	movs	r2, #12
 800ecb0:	4252      	negs	r2, r2
 800ecb2:	801a      	strh	r2, [r3, #0]

	magneticFieldCounter++;
 800ecb4:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <sensingRead+0x9c4>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	b21a      	sxth	r2, r3
 800ecc2:	4b11      	ldr	r3, [pc, #68]	; (800ed08 <sensingRead+0x9c4>)
 800ecc4:	801a      	strh	r2, [r3, #0]
	if (magneticFieldCounter >= MAGNETIC_FIELD_MEASURES)
 800ecc6:	4b10      	ldr	r3, [pc, #64]	; (800ed08 <sensingRead+0x9c4>)
 800ecc8:	2200      	movs	r2, #0
 800ecca:	5e9b      	ldrsh	r3, [r3, r2]
 800eccc:	2b63      	cmp	r3, #99	; 0x63
 800ecce:	dd02      	ble.n	800ecd6 <sensingRead+0x992>
		magneticFieldCounter = 0;
 800ecd0:	4b0d      	ldr	r3, [pc, #52]	; (800ed08 <sensingRead+0x9c4>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL SEND SLEEP COMMAND

	HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 800ecd6:	4b08      	ldr	r3, [pc, #32]	; (800ecf8 <sensingRead+0x9b4>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	4808      	ldr	r0, [pc, #32]	; (800ecfc <sensingRead+0x9b8>)
 800ecdc:	9302      	str	r3, [sp, #8]
 800ecde:	2301      	movs	r3, #1
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	4b14      	ldr	r3, [pc, #80]	; (800ed34 <sensingRead+0x9f0>)
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	2301      	movs	r3, #1
 800ece8:	2222      	movs	r2, #34	; 0x22
 800ecea:	2138      	movs	r1, #56	; 0x38
 800ecec:	f7f6 f896 	bl	8004e1c <HAL_I2C_Mem_Write>
			&ctrlMagnetometerPowerDown, 1, i2cTimeout);

}
 800ecf0:	46c0      	nop			; (mov r8, r8)
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	b011      	add	sp, #68	; 0x44
 800ecf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf8:	2000003e 	.word	0x2000003e
 800ecfc:	20000160 	.word	0x20000160
 800ed00:	20000110 	.word	0x20000110
 800ed04:	20000114 	.word	0x20000114
 800ed08:	20000628 	.word	0x20000628
 800ed0c:	200001c4 	.word	0x200001c4
 800ed10:	20000414 	.word	0x20000414
 800ed14:	20000630 	.word	0x20000630
 800ed18:	200004dc 	.word	0x200004dc
 800ed1c:	2000031a 	.word	0x2000031a
 800ed20:	20000130 	.word	0x20000130
 800ed24:	20000566 	.word	0x20000566
 800ed28:	20000632 	.word	0x20000632
 800ed2c:	2000057a 	.word	0x2000057a
 800ed30:	200004e0 	.word	0x200004e0
 800ed34:	2000002b 	.word	0x2000002b

0800ed38 <BME280_compensate_T_int32>:

//compensation formulas from datasheet
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T) {
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	10da      	asrs	r2, r3, #3
 800ed44:	4b16      	ldr	r3, [pc, #88]	; (800eda0 <BME280_compensate_T_int32+0x68>)
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	1ad3      	subs	r3, r2, r3
			* ((BME280_S32_t) dig_T2)) >> 11;
 800ed4c:	4a15      	ldr	r2, [pc, #84]	; (800eda4 <BME280_compensate_T_int32+0x6c>)
 800ed4e:	2100      	movs	r1, #0
 800ed50:	5e52      	ldrsh	r2, [r2, r1]
 800ed52:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 800ed54:	12db      	asrs	r3, r3, #11
 800ed56:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	111b      	asrs	r3, r3, #4
 800ed5c:	4a10      	ldr	r2, [pc, #64]	; (800eda0 <BME280_compensate_T_int32+0x68>)
 800ed5e:	8812      	ldrh	r2, [r2, #0]
 800ed60:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BME280_S32_t) dig_T1))) >> 12)
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	1112      	asrs	r2, r2, #4
 800ed66:	490e      	ldr	r1, [pc, #56]	; (800eda0 <BME280_compensate_T_int32+0x68>)
 800ed68:	8809      	ldrh	r1, [r1, #0]
 800ed6a:	1a52      	subs	r2, r2, r1
 800ed6c:	4353      	muls	r3, r2
 800ed6e:	131b      	asrs	r3, r3, #12
			* ((BME280_S32_t) dig_T3)) >> 14;
 800ed70:	4a0d      	ldr	r2, [pc, #52]	; (800eda8 <BME280_compensate_T_int32+0x70>)
 800ed72:	2100      	movs	r1, #0
 800ed74:	5e52      	ldrsh	r2, [r2, r1]
 800ed76:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 800ed78:	139b      	asrs	r3, r3, #14
 800ed7a:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	18d2      	adds	r2, r2, r3
 800ed82:	4b0a      	ldr	r3, [pc, #40]	; (800edac <BME280_compensate_T_int32+0x74>)
 800ed84:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 800ed86:	4b09      	ldr	r3, [pc, #36]	; (800edac <BME280_compensate_T_int32+0x74>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	0013      	movs	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	189b      	adds	r3, r3, r2
 800ed90:	3380      	adds	r3, #128	; 0x80
 800ed92:	121b      	asrs	r3, r3, #8
 800ed94:	60fb      	str	r3, [r7, #12]
	return T;
 800ed96:	68fb      	ldr	r3, [r7, #12]
}
 800ed98:	0018      	movs	r0, r3
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	b006      	add	sp, #24
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20000140 	.word	0x20000140
 800eda4:	200002d0 	.word	0x200002d0
 800eda8:	2000062c 	.word	0x2000062c
 800edac:	2000064c 	.word	0x2000064c

0800edb0 <BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P) {
 800edb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb2:	b0ad      	sub	sp, #180	; 0xb4
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	2394      	movs	r3, #148	; 0x94
 800edb8:	18fb      	adds	r3, r7, r3
 800edba:	6018      	str	r0, [r3, #0]
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t) t_fine) - 128000;
 800edbc:	4bc6      	ldr	r3, [pc, #792]	; (800f0d8 <BME280_compensate_P_int64+0x328>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	001c      	movs	r4, r3
 800edc2:	17db      	asrs	r3, r3, #31
 800edc4:	001d      	movs	r5, r3
 800edc6:	4ac5      	ldr	r2, [pc, #788]	; (800f0dc <BME280_compensate_P_int64+0x32c>)
 800edc8:	2301      	movs	r3, #1
 800edca:	425b      	negs	r3, r3
 800edcc:	1912      	adds	r2, r2, r4
 800edce:	416b      	adcs	r3, r5
 800edd0:	24a8      	movs	r4, #168	; 0xa8
 800edd2:	1939      	adds	r1, r7, r4
 800edd4:	600a      	str	r2, [r1, #0]
 800edd6:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (BME280_S64_t) dig_P6;
 800edd8:	193b      	adds	r3, r7, r4
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	1939      	adds	r1, r7, r4
 800ede0:	6808      	ldr	r0, [r1, #0]
 800ede2:	6849      	ldr	r1, [r1, #4]
 800ede4:	f7f1 fba8 	bl	8000538 <__aeabi_lmul>
 800ede8:	0002      	movs	r2, r0
 800edea:	000b      	movs	r3, r1
 800edec:	0010      	movs	r0, r2
 800edee:	0019      	movs	r1, r3
 800edf0:	4bbb      	ldr	r3, [pc, #748]	; (800f0e0 <BME280_compensate_P_int64+0x330>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	5e9b      	ldrsh	r3, [r3, r2]
 800edf6:	653b      	str	r3, [r7, #80]	; 0x50
 800edf8:	17db      	asrs	r3, r3, #31
 800edfa:	657b      	str	r3, [r7, #84]	; 0x54
 800edfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee00:	f7f1 fb9a 	bl	8000538 <__aeabi_lmul>
 800ee04:	0002      	movs	r2, r0
 800ee06:	000b      	movs	r3, r1
 800ee08:	25a0      	movs	r5, #160	; 0xa0
 800ee0a:	1979      	adds	r1, r7, r5
 800ee0c:	600a      	str	r2, [r1, #0]
 800ee0e:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1 * (BME280_S64_t) dig_P5) << 17);
 800ee10:	4bb4      	ldr	r3, [pc, #720]	; (800f0e4 <BME280_compensate_P_int64+0x334>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	5e9b      	ldrsh	r3, [r3, r2]
 800ee16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee18:	17db      	asrs	r3, r3, #31
 800ee1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee1c:	193b      	adds	r3, r7, r4
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ee24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ee26:	f7f1 fb87 	bl	8000538 <__aeabi_lmul>
 800ee2a:	0002      	movs	r2, r0
 800ee2c:	000b      	movs	r3, r1
 800ee2e:	0bd1      	lsrs	r1, r2, #15
 800ee30:	468c      	mov	ip, r1
 800ee32:	0458      	lsls	r0, r3, #17
 800ee34:	268c      	movs	r6, #140	; 0x8c
 800ee36:	19b9      	adds	r1, r7, r6
 800ee38:	6008      	str	r0, [r1, #0]
 800ee3a:	19b8      	adds	r0, r7, r6
 800ee3c:	6800      	ldr	r0, [r0, #0]
 800ee3e:	4661      	mov	r1, ip
 800ee40:	4308      	orrs	r0, r1
 800ee42:	19b9      	adds	r1, r7, r6
 800ee44:	6008      	str	r0, [r1, #0]
 800ee46:	0453      	lsls	r3, r2, #17
 800ee48:	2188      	movs	r1, #136	; 0x88
 800ee4a:	187a      	adds	r2, r7, r1
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	197b      	adds	r3, r7, r5
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	1879      	adds	r1, r7, r1
 800ee56:	6808      	ldr	r0, [r1, #0]
 800ee58:	6849      	ldr	r1, [r1, #4]
 800ee5a:	1812      	adds	r2, r2, r0
 800ee5c:	414b      	adcs	r3, r1
 800ee5e:	1979      	adds	r1, r7, r5
 800ee60:	600a      	str	r2, [r1, #0]
 800ee62:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((BME280_S64_t) dig_P4) << 35);
 800ee64:	4ba0      	ldr	r3, [pc, #640]	; (800f0e8 <BME280_compensate_P_int64+0x338>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	5e9b      	ldrsh	r3, [r3, r2]
 800ee6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee6c:	17db      	asrs	r3, r3, #31
 800ee6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ee70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee76:	2300      	movs	r3, #0
 800ee78:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee7a:	197b      	adds	r3, r7, r5
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee84:	1812      	adds	r2, r2, r0
 800ee86:	414b      	adcs	r3, r1
 800ee88:	1979      	adds	r1, r7, r5
 800ee8a:	600a      	str	r2, [r1, #0]
 800ee8c:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800ee8e:	193b      	adds	r3, r7, r4
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	1939      	adds	r1, r7, r4
 800ee96:	6808      	ldr	r0, [r1, #0]
 800ee98:	6849      	ldr	r1, [r1, #4]
 800ee9a:	f7f1 fb4d 	bl	8000538 <__aeabi_lmul>
 800ee9e:	0002      	movs	r2, r0
 800eea0:	000b      	movs	r3, r1
 800eea2:	0010      	movs	r0, r2
 800eea4:	0019      	movs	r1, r3
 800eea6:	4b91      	ldr	r3, [pc, #580]	; (800f0ec <BME280_compensate_P_int64+0x33c>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	5e9b      	ldrsh	r3, [r3, r2]
 800eeac:	633b      	str	r3, [r7, #48]	; 0x30
 800eeae:	17db      	asrs	r3, r3, #31
 800eeb0:	637b      	str	r3, [r7, #52]	; 0x34
 800eeb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb6:	f7f1 fb3f 	bl	8000538 <__aeabi_lmul>
 800eeba:	0002      	movs	r2, r0
 800eebc:	000b      	movs	r3, r1
 800eebe:	0619      	lsls	r1, r3, #24
 800eec0:	0a10      	lsrs	r0, r2, #8
 800eec2:	2580      	movs	r5, #128	; 0x80
 800eec4:	197e      	adds	r6, r7, r5
 800eec6:	6030      	str	r0, [r6, #0]
 800eec8:	1978      	adds	r0, r7, r5
 800eeca:	6800      	ldr	r0, [r0, #0]
 800eecc:	4308      	orrs	r0, r1
 800eece:	1979      	adds	r1, r7, r5
 800eed0:	6008      	str	r0, [r1, #0]
 800eed2:	121b      	asrs	r3, r3, #8
 800eed4:	2284      	movs	r2, #132	; 0x84
 800eed6:	18ba      	adds	r2, r7, r2
 800eed8:	6013      	str	r3, [r2, #0]
			+ ((var1 * (BME280_S64_t) dig_P2) << 12);
 800eeda:	4b85      	ldr	r3, [pc, #532]	; (800f0f0 <BME280_compensate_P_int64+0x340>)
 800eedc:	2200      	movs	r2, #0
 800eede:	5e9b      	ldrsh	r3, [r3, r2]
 800eee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800eee2:	17db      	asrs	r3, r3, #31
 800eee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eee6:	193b      	adds	r3, r7, r4
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eef0:	f7f1 fb22 	bl	8000538 <__aeabi_lmul>
 800eef4:	0002      	movs	r2, r0
 800eef6:	000b      	movs	r3, r1
 800eef8:	0d11      	lsrs	r1, r2, #20
 800eefa:	0318      	lsls	r0, r3, #12
 800eefc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800eefe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ef00:	4308      	orrs	r0, r1
 800ef02:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ef04:	0313      	lsls	r3, r2, #12
 800ef06:	67bb      	str	r3, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 800ef08:	197b      	adds	r3, r7, r5
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ef10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ef12:	1812      	adds	r2, r2, r0
 800ef14:	414b      	adcs	r3, r1
 800ef16:	1939      	adds	r1, r7, r4
 800ef18:	600a      	str	r2, [r1, #0]
 800ef1a:	604b      	str	r3, [r1, #4]
	var1 = (((((BME280_S64_t) 1) << 47) + var1)) * ((BME280_S64_t) dig_P1)
 800ef1c:	193b      	adds	r3, r7, r4
 800ef1e:	6818      	ldr	r0, [r3, #0]
 800ef20:	6859      	ldr	r1, [r3, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	2380      	movs	r3, #128	; 0x80
 800ef26:	021b      	lsls	r3, r3, #8
 800ef28:	1880      	adds	r0, r0, r2
 800ef2a:	4159      	adcs	r1, r3
 800ef2c:	4b71      	ldr	r3, [pc, #452]	; (800f0f4 <BME280_compensate_P_int64+0x344>)
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	623b      	str	r3, [r7, #32]
 800ef32:	2300      	movs	r3, #0
 800ef34:	627b      	str	r3, [r7, #36]	; 0x24
 800ef36:	6a3a      	ldr	r2, [r7, #32]
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	f7f1 fafd 	bl	8000538 <__aeabi_lmul>
 800ef3e:	0002      	movs	r2, r0
 800ef40:	000b      	movs	r3, r1
 800ef42:	1059      	asrs	r1, r3, #1
 800ef44:	1938      	adds	r0, r7, r4
 800ef46:	6001      	str	r1, [r0, #0]
 800ef48:	17db      	asrs	r3, r3, #31
 800ef4a:	21ac      	movs	r1, #172	; 0xac
 800ef4c:	187a      	adds	r2, r7, r1
 800ef4e:	6013      	str	r3, [r2, #0]
			>> 33;
	if (var1 == 0) {
 800ef50:	193b      	adds	r3, r7, r4
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	187b      	adds	r3, r7, r1
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	431a      	orrs	r2, r3
 800ef5a:	d101      	bne.n	800ef60 <BME280_compensate_P_int64+0x1b0>
		return 0; // avoid exception caused by division by zero
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e0b6      	b.n	800f0ce <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576 - adc_P;
 800ef60:	2394      	movs	r3, #148	; 0x94
 800ef62:	18fb      	adds	r3, r7, r3
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	2380      	movs	r3, #128	; 0x80
 800ef68:	035b      	lsls	r3, r3, #13
 800ef6a:	1a9b      	subs	r3, r3, r2
 800ef6c:	2498      	movs	r4, #152	; 0x98
 800ef6e:	193a      	adds	r2, r7, r4
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	17db      	asrs	r3, r3, #31
 800ef74:	259c      	movs	r5, #156	; 0x9c
 800ef76:	197a      	adds	r2, r7, r5
 800ef78:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800ef7a:	193b      	adds	r3, r7, r4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	105b      	asrs	r3, r3, #1
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	193b      	adds	r3, r7, r4
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	07db      	lsls	r3, r3, #31
 800ef88:	61bb      	str	r3, [r7, #24]
 800ef8a:	23a0      	movs	r3, #160	; 0xa0
 800ef8c:	18fa      	adds	r2, r7, r3
 800ef8e:	6853      	ldr	r3, [r2, #4]
 800ef90:	6812      	ldr	r2, [r2, #0]
 800ef92:	69b8      	ldr	r0, [r7, #24]
 800ef94:	69f9      	ldr	r1, [r7, #28]
 800ef96:	1a80      	subs	r0, r0, r2
 800ef98:	4199      	sbcs	r1, r3
 800ef9a:	4a57      	ldr	r2, [pc, #348]	; (800f0f8 <BME280_compensate_P_int64+0x348>)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f7f1 facb 	bl	8000538 <__aeabi_lmul>
 800efa2:	0002      	movs	r2, r0
 800efa4:	000b      	movs	r3, r1
 800efa6:	0010      	movs	r0, r2
 800efa8:	0019      	movs	r1, r3
 800efaa:	26a8      	movs	r6, #168	; 0xa8
 800efac:	19ba      	adds	r2, r7, r6
 800efae:	6853      	ldr	r3, [r2, #4]
 800efb0:	6812      	ldr	r2, [r2, #0]
 800efb2:	f7f1 fa9d 	bl	80004f0 <__aeabi_ldivmod>
 800efb6:	0002      	movs	r2, r0
 800efb8:	000b      	movs	r3, r1
 800efba:	1939      	adds	r1, r7, r4
 800efbc:	600a      	str	r2, [r1, #0]
 800efbe:	604b      	str	r3, [r1, #4]
	var1 = (((BME280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800efc0:	4b4e      	ldr	r3, [pc, #312]	; (800f0fc <BME280_compensate_P_int64+0x34c>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	5e9b      	ldrsh	r3, [r3, r2]
 800efc6:	613b      	str	r3, [r7, #16]
 800efc8:	17db      	asrs	r3, r3, #31
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	197a      	adds	r2, r7, r5
 800efce:	6813      	ldr	r3, [r2, #0]
 800efd0:	04da      	lsls	r2, r3, #19
 800efd2:	1939      	adds	r1, r7, r4
 800efd4:	680b      	ldr	r3, [r1, #0]
 800efd6:	0b5b      	lsrs	r3, r3, #13
 800efd8:	673b      	str	r3, [r7, #112]	; 0x70
 800efda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efdc:	4313      	orrs	r3, r2
 800efde:	673b      	str	r3, [r7, #112]	; 0x70
 800efe0:	197a      	adds	r2, r7, r5
 800efe2:	6813      	ldr	r3, [r2, #0]
 800efe4:	135b      	asrs	r3, r3, #13
 800efe6:	677b      	str	r3, [r7, #116]	; 0x74
 800efe8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efec:	6938      	ldr	r0, [r7, #16]
 800efee:	6979      	ldr	r1, [r7, #20]
 800eff0:	f7f1 faa2 	bl	8000538 <__aeabi_lmul>
 800eff4:	0002      	movs	r2, r0
 800eff6:	000b      	movs	r3, r1
 800eff8:	0010      	movs	r0, r2
 800effa:	0019      	movs	r1, r3
 800effc:	197a      	adds	r2, r7, r5
 800effe:	6813      	ldr	r3, [r2, #0]
 800f000:	04da      	lsls	r2, r3, #19
 800f002:	193b      	adds	r3, r7, r4
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	0b5b      	lsrs	r3, r3, #13
 800f008:	66bb      	str	r3, [r7, #104]	; 0x68
 800f00a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f00c:	4313      	orrs	r3, r2
 800f00e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f010:	197a      	adds	r2, r7, r5
 800f012:	6813      	ldr	r3, [r2, #0]
 800f014:	135b      	asrs	r3, r3, #13
 800f016:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f018:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f01c:	f7f1 fa8c 	bl	8000538 <__aeabi_lmul>
 800f020:	0002      	movs	r2, r0
 800f022:	000b      	movs	r3, r1
 800f024:	01d9      	lsls	r1, r3, #7
 800f026:	0e50      	lsrs	r0, r2, #25
 800f028:	4301      	orrs	r1, r0
 800f02a:	19b8      	adds	r0, r7, r6
 800f02c:	6001      	str	r1, [r0, #0]
 800f02e:	165b      	asrs	r3, r3, #25
 800f030:	22ac      	movs	r2, #172	; 0xac
 800f032:	18ba      	adds	r2, r7, r2
 800f034:	6013      	str	r3, [r2, #0]
	var2 = (((BME280_S64_t) dig_P8) * p) >> 19;
 800f036:	4b32      	ldr	r3, [pc, #200]	; (800f100 <BME280_compensate_P_int64+0x350>)
 800f038:	2200      	movs	r2, #0
 800f03a:	5e9b      	ldrsh	r3, [r3, r2]
 800f03c:	60bb      	str	r3, [r7, #8]
 800f03e:	17db      	asrs	r3, r3, #31
 800f040:	60fb      	str	r3, [r7, #12]
 800f042:	193a      	adds	r2, r7, r4
 800f044:	6853      	ldr	r3, [r2, #4]
 800f046:	6812      	ldr	r2, [r2, #0]
 800f048:	68b8      	ldr	r0, [r7, #8]
 800f04a:	68f9      	ldr	r1, [r7, #12]
 800f04c:	f7f1 fa74 	bl	8000538 <__aeabi_lmul>
 800f050:	0002      	movs	r2, r0
 800f052:	000b      	movs	r3, r1
 800f054:	0359      	lsls	r1, r3, #13
 800f056:	0cd0      	lsrs	r0, r2, #19
 800f058:	4301      	orrs	r1, r0
 800f05a:	25a0      	movs	r5, #160	; 0xa0
 800f05c:	1978      	adds	r0, r7, r5
 800f05e:	6001      	str	r1, [r0, #0]
 800f060:	14db      	asrs	r3, r3, #19
 800f062:	22a4      	movs	r2, #164	; 0xa4
 800f064:	18ba      	adds	r2, r7, r2
 800f066:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t) dig_P7) << 4);
 800f068:	193b      	adds	r3, r7, r4
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	6859      	ldr	r1, [r3, #4]
 800f06e:	19bb      	adds	r3, r7, r6
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	1880      	adds	r0, r0, r2
 800f076:	4159      	adcs	r1, r3
 800f078:	197b      	adds	r3, r7, r5
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	1812      	adds	r2, r2, r0
 800f080:	414b      	adcs	r3, r1
 800f082:	0619      	lsls	r1, r3, #24
 800f084:	0a10      	lsrs	r0, r2, #8
 800f086:	6638      	str	r0, [r7, #96]	; 0x60
 800f088:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f08a:	4308      	orrs	r0, r1
 800f08c:	6638      	str	r0, [r7, #96]	; 0x60
 800f08e:	121b      	asrs	r3, r3, #8
 800f090:	667b      	str	r3, [r7, #100]	; 0x64
 800f092:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <BME280_compensate_P_int64+0x354>)
 800f094:	2200      	movs	r2, #0
 800f096:	5e9b      	ldrsh	r3, [r3, r2]
 800f098:	603b      	str	r3, [r7, #0]
 800f09a:	17db      	asrs	r3, r3, #31
 800f09c:	607b      	str	r3, [r7, #4]
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	000b      	movs	r3, r1
 800f0a4:	0f1b      	lsrs	r3, r3, #28
 800f0a6:	0010      	movs	r0, r2
 800f0a8:	0100      	lsls	r0, r0, #4
 800f0aa:	65f8      	str	r0, [r7, #92]	; 0x5c
 800f0ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f0ae:	4318      	orrs	r0, r3
 800f0b0:	65f8      	str	r0, [r7, #92]	; 0x5c
 800f0b2:	000b      	movs	r3, r1
 800f0b4:	011b      	lsls	r3, r3, #4
 800f0b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f0be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0c0:	1812      	adds	r2, r2, r0
 800f0c2:	414b      	adcs	r3, r1
 800f0c4:	1939      	adds	r1, r7, r4
 800f0c6:	600a      	str	r2, [r1, #0]
 800f0c8:	604b      	str	r3, [r1, #4]
	return (BME280_U32_t) p;
 800f0ca:	193b      	adds	r3, r7, r4
 800f0cc:	681b      	ldr	r3, [r3, #0]
}
 800f0ce:	0018      	movs	r0, r3
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	b02d      	add	sp, #180	; 0xb4
 800f0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d6:	46c0      	nop			; (mov r8, r8)
 800f0d8:	2000064c 	.word	0x2000064c
 800f0dc:	fffe0c00 	.word	0xfffe0c00
 800f0e0:	2000063a 	.word	0x2000063a
 800f0e4:	20000576 	.word	0x20000576
 800f0e8:	200003a0 	.word	0x200003a0
 800f0ec:	200005f0 	.word	0x200005f0
 800f0f0:	2000039c 	.word	0x2000039c
 800f0f4:	200005ee 	.word	0x200005ee
 800f0f8:	00000c35 	.word	0x00000c35
 800f0fc:	2000062a 	.word	0x2000062a
 800f100:	200005f2 	.word	0x200005f2
 800f104:	20000138 	.word	0x20000138

0800f108 <BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t) 76800));
 800f110:	4b2c      	ldr	r3, [pc, #176]	; (800f1c4 <BME280_compensate_H_int32+0xbc>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a2c      	ldr	r2, [pc, #176]	; (800f1c8 <BME280_compensate_H_int32+0xc0>)
 800f116:	4694      	mov	ip, r2
 800f118:	4463      	add	r3, ip
 800f11a:	60fb      	str	r3, [r7, #12]

	v_x1_u32r =
			(((((adc_H << 14) - (((BME280_S32_t) dig_H4) << 20)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	039a      	lsls	r2, r3, #14
 800f120:	4b2a      	ldr	r3, [pc, #168]	; (800f1cc <BME280_compensate_H_int32+0xc4>)
 800f122:	2100      	movs	r1, #0
 800f124:	5e5b      	ldrsh	r3, [r3, r1]
 800f126:	051b      	lsls	r3, r3, #20
 800f128:	1ad2      	subs	r2, r2, r3
					- (((BME280_S32_t) dig_H5) * v_x1_u32r))
 800f12a:	4b29      	ldr	r3, [pc, #164]	; (800f1d0 <BME280_compensate_H_int32+0xc8>)
 800f12c:	2100      	movs	r1, #0
 800f12e:	5e5b      	ldrsh	r3, [r3, r1]
 800f130:	0019      	movs	r1, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	434b      	muls	r3, r1
 800f136:	1ad3      	subs	r3, r2, r3
					+ ((BME280_S32_t) 16384)) >> 15)
 800f138:	2280      	movs	r2, #128	; 0x80
 800f13a:	01d2      	lsls	r2, r2, #7
 800f13c:	4694      	mov	ip, r2
 800f13e:	4463      	add	r3, ip
 800f140:	13db      	asrs	r3, r3, #15
					* (((((((v_x1_u32r * ((BME280_S32_t) dig_H6)) >> 10)
 800f142:	4a24      	ldr	r2, [pc, #144]	; (800f1d4 <BME280_compensate_H_int32+0xcc>)
 800f144:	7812      	ldrb	r2, [r2, #0]
 800f146:	0011      	movs	r1, r2
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	434a      	muls	r2, r1
 800f14c:	1292      	asrs	r2, r2, #10
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800f14e:	4922      	ldr	r1, [pc, #136]	; (800f1d8 <BME280_compensate_H_int32+0xd0>)
 800f150:	7809      	ldrb	r1, [r1, #0]
 800f152:	0008      	movs	r0, r1
 800f154:	68f9      	ldr	r1, [r7, #12]
 800f156:	4341      	muls	r1, r0
 800f158:	12c9      	asrs	r1, r1, #11
									+ ((BME280_S32_t) 32768))) >> 10)
 800f15a:	2080      	movs	r0, #128	; 0x80
 800f15c:	0200      	lsls	r0, r0, #8
 800f15e:	4684      	mov	ip, r0
 800f160:	4461      	add	r1, ip
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 800f162:	434a      	muls	r2, r1
									+ ((BME280_S32_t) 32768))) >> 10)
 800f164:	1292      	asrs	r2, r2, #10
							+ ((BME280_S32_t) 2097152))
 800f166:	2180      	movs	r1, #128	; 0x80
 800f168:	0389      	lsls	r1, r1, #14
 800f16a:	468c      	mov	ip, r1
 800f16c:	4462      	add	r2, ip
							* ((BME280_S32_t) dig_H2) + 8192) >> 14));
 800f16e:	491b      	ldr	r1, [pc, #108]	; (800f1dc <BME280_compensate_H_int32+0xd4>)
 800f170:	2000      	movs	r0, #0
 800f172:	5e09      	ldrsh	r1, [r1, r0]
 800f174:	434a      	muls	r2, r1
 800f176:	2180      	movs	r1, #128	; 0x80
 800f178:	0189      	lsls	r1, r1, #6
 800f17a:	468c      	mov	ip, r1
 800f17c:	4462      	add	r2, ip
 800f17e:	1392      	asrs	r2, r2, #14
	v_x1_u32r =
 800f180:	4353      	muls	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	13db      	asrs	r3, r3, #15
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	13d2      	asrs	r2, r2, #15
 800f18c:	4353      	muls	r3, r2
 800f18e:	11db      	asrs	r3, r3, #7
					* ((BME280_S32_t) dig_H1)) >> 4));
 800f190:	4a13      	ldr	r2, [pc, #76]	; (800f1e0 <BME280_compensate_H_int32+0xd8>)
 800f192:	7812      	ldrb	r2, [r2, #0]
 800f194:	4353      	muls	r3, r2
 800f196:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	da00      	bge.n	800f1a6 <BME280_compensate_H_int32+0x9e>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	22c8      	movs	r2, #200	; 0xc8
 800f1ac:	0552      	lsls	r2, r2, #21
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	dd01      	ble.n	800f1b6 <BME280_compensate_H_int32+0xae>
 800f1b2:	23c8      	movs	r3, #200	; 0xc8
 800f1b4:	055b      	lsls	r3, r3, #21
 800f1b6:	60fb      	str	r3, [r7, #12]
	return (BME280_U32_t) (v_x1_u32r >> 12);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	131b      	asrs	r3, r3, #12
}
 800f1bc:	0018      	movs	r0, r3
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	b004      	add	sp, #16
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	2000064c 	.word	0x2000064c
 800f1c8:	fffed400 	.word	0xfffed400
 800f1cc:	200002ce 	.word	0x200002ce
 800f1d0:	20000602 	.word	0x20000602
 800f1d4:	2000040e 	.word	0x2000040e
 800f1d8:	2000061d 	.word	0x2000061d
 800f1dc:	20000648 	.word	0x20000648
 800f1e0:	2000030b 	.word	0x2000030b

0800f1e4 <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	000a      	movs	r2, r1
 800f1ee:	1cbb      	adds	r3, r7, #2
 800f1f0:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 800f1f2:	230e      	movs	r3, #14
 800f1f4:	18fb      	adds	r3, r7, r3
 800f1f6:	4a14      	ldr	r2, [pc, #80]	; (800f248 <findMax+0x64>)
 800f1f8:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	60bb      	str	r3, [r7, #8]
 800f1fe:	e015      	b.n	800f22c <findMax+0x48>
		if (data[i] > max)
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	18d3      	adds	r3, r2, r3
 800f208:	2200      	movs	r2, #0
 800f20a:	5e9b      	ldrsh	r3, [r3, r2]
 800f20c:	210e      	movs	r1, #14
 800f20e:	187a      	adds	r2, r7, r1
 800f210:	2000      	movs	r0, #0
 800f212:	5e12      	ldrsh	r2, [r2, r0]
 800f214:	429a      	cmp	r2, r3
 800f216:	da06      	bge.n	800f226 <findMax+0x42>
			max = data[i];
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	18d2      	adds	r2, r2, r3
 800f220:	187b      	adds	r3, r7, r1
 800f222:	8812      	ldrh	r2, [r2, #0]
 800f224:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	3301      	adds	r3, #1
 800f22a:	60bb      	str	r3, [r7, #8]
 800f22c:	1cbb      	adds	r3, r7, #2
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	429a      	cmp	r2, r3
 800f234:	d3e4      	bcc.n	800f200 <findMax+0x1c>
	}

	return max;
 800f236:	230e      	movs	r3, #14
 800f238:	18fb      	adds	r3, r7, r3
 800f23a:	2200      	movs	r2, #0
 800f23c:	5e9b      	ldrsh	r3, [r3, r2]

}
 800f23e:	0018      	movs	r0, r3
 800f240:	46bd      	mov	sp, r7
 800f242:	b004      	add	sp, #16
 800f244:	bd80      	pop	{r7, pc}
 800f246:	46c0      	nop			; (mov r8, r8)
 800f248:	ffff8000 	.word	0xffff8000

0800f24c <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	000a      	movs	r2, r1
 800f256:	1cbb      	adds	r3, r7, #2
 800f258:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 800f25a:	230e      	movs	r3, #14
 800f25c:	18fb      	adds	r3, r7, r3
 800f25e:	4a14      	ldr	r2, [pc, #80]	; (800f2b0 <findMin+0x64>)
 800f260:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800f262:	2300      	movs	r3, #0
 800f264:	60bb      	str	r3, [r7, #8]
 800f266:	e015      	b.n	800f294 <findMin+0x48>
		if (data[i] < min)
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	18d3      	adds	r3, r2, r3
 800f270:	2200      	movs	r2, #0
 800f272:	5e9b      	ldrsh	r3, [r3, r2]
 800f274:	210e      	movs	r1, #14
 800f276:	187a      	adds	r2, r7, r1
 800f278:	2000      	movs	r0, #0
 800f27a:	5e12      	ldrsh	r2, [r2, r0]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	dd06      	ble.n	800f28e <findMin+0x42>
			min = data[i];
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	18d2      	adds	r2, r2, r3
 800f288:	187b      	adds	r3, r7, r1
 800f28a:	8812      	ldrh	r2, [r2, #0]
 800f28c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	3301      	adds	r3, #1
 800f292:	60bb      	str	r3, [r7, #8]
 800f294:	1cbb      	adds	r3, r7, #2
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d3e4      	bcc.n	800f268 <findMin+0x1c>
	}

	return min;
 800f29e:	230e      	movs	r3, #14
 800f2a0:	18fb      	adds	r3, r7, r3
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	5e9b      	ldrsh	r3, [r3, r2]
}
 800f2a6:	0018      	movs	r0, r3
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	b004      	add	sp, #16
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	00007fff 	.word	0x00007fff

0800f2b4 <settingsDrawData>:
		80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150,
		155, 160, 165, 170, 175, 180, 185, 190, 195 };
uint8_t column[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,
		140, 150, 160, 170, 180, 190 };

void settingsDrawData(void) {
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af02      	add	r7, sp, #8

	//										SENSOR READINGS

	if (temperatureValue < 0) {
 800f2ba:	4b59      	ldr	r3, [pc, #356]	; (800f420 <settingsDrawData+0x16c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	da31      	bge.n	800f326 <settingsDrawData+0x72>

		Paint_DrawChar(column[COLUMN_TEMP] - 8, line[LINE_TEMP], '-', &Font12,
 800f2c2:	4b58      	ldr	r3, [pc, #352]	; (800f424 <settingsDrawData+0x170>)
 800f2c4:	799b      	ldrb	r3, [r3, #6]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	3b08      	subs	r3, #8
 800f2ca:	b298      	uxth	r0, r3
 800f2cc:	4b56      	ldr	r3, [pc, #344]	; (800f428 <settingsDrawData+0x174>)
 800f2ce:	789b      	ldrb	r3, [r3, #2]
 800f2d0:	b299      	uxth	r1, r3
 800f2d2:	4b56      	ldr	r3, [pc, #344]	; (800f42c <settingsDrawData+0x178>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	4a55      	ldr	r2, [pc, #340]	; (800f430 <settingsDrawData+0x17c>)
 800f2dc:	7812      	ldrb	r2, [r2, #0]
 800f2de:	b2d2      	uxtb	r2, r2
 800f2e0:	b292      	uxth	r2, r2
 800f2e2:	4c54      	ldr	r4, [pc, #336]	; (800f434 <settingsDrawData+0x180>)
 800f2e4:	9201      	str	r2, [sp, #4]
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	0023      	movs	r3, r4
 800f2ea:	222d      	movs	r2, #45	; 0x2d
 800f2ec:	f7fa fb9c 	bl	8009a28 <Paint_DrawChar>
				colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800f2f0:	4b4c      	ldr	r3, [pc, #304]	; (800f424 <settingsDrawData+0x170>)
 800f2f2:	799b      	ldrb	r3, [r3, #6]
 800f2f4:	b298      	uxth	r0, r3
 800f2f6:	4b4c      	ldr	r3, [pc, #304]	; (800f428 <settingsDrawData+0x174>)
 800f2f8:	789b      	ldrb	r3, [r3, #2]
 800f2fa:	b299      	uxth	r1, r3
 800f2fc:	4b48      	ldr	r3, [pc, #288]	; (800f420 <settingsDrawData+0x16c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
				abs(temperatureValue), &Font12, colorSecond, colorMain);
 800f300:	17da      	asrs	r2, r3, #31
 800f302:	189c      	adds	r4, r3, r2
 800f304:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 800f306:	4b49      	ldr	r3, [pc, #292]	; (800f42c <settingsDrawData+0x178>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	4a48      	ldr	r2, [pc, #288]	; (800f430 <settingsDrawData+0x17c>)
 800f310:	7812      	ldrb	r2, [r2, #0]
 800f312:	b2d2      	uxtb	r2, r2
 800f314:	b292      	uxth	r2, r2
 800f316:	4d47      	ldr	r5, [pc, #284]	; (800f434 <settingsDrawData+0x180>)
 800f318:	9201      	str	r2, [sp, #4]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	002b      	movs	r3, r5
 800f31e:	0022      	movs	r2, r4
 800f320:	f7fa fce4 	bl	8009cec <Paint_DrawNum>
 800f324:	e016      	b.n	800f354 <settingsDrawData+0xa0>

	} else {
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP], temperatureValue,
 800f326:	4b3f      	ldr	r3, [pc, #252]	; (800f424 <settingsDrawData+0x170>)
 800f328:	799b      	ldrb	r3, [r3, #6]
 800f32a:	b298      	uxth	r0, r3
 800f32c:	4b3e      	ldr	r3, [pc, #248]	; (800f428 <settingsDrawData+0x174>)
 800f32e:	789b      	ldrb	r3, [r3, #2]
 800f330:	b299      	uxth	r1, r3
 800f332:	4b3b      	ldr	r3, [pc, #236]	; (800f420 <settingsDrawData+0x16c>)
 800f334:	681c      	ldr	r4, [r3, #0]
 800f336:	4b3d      	ldr	r3, [pc, #244]	; (800f42c <settingsDrawData+0x178>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	4a3c      	ldr	r2, [pc, #240]	; (800f430 <settingsDrawData+0x17c>)
 800f340:	7812      	ldrb	r2, [r2, #0]
 800f342:	b2d2      	uxtb	r2, r2
 800f344:	b292      	uxth	r2, r2
 800f346:	4d3b      	ldr	r5, [pc, #236]	; (800f434 <settingsDrawData+0x180>)
 800f348:	9201      	str	r2, [sp, #4]
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	002b      	movs	r3, r5
 800f34e:	0022      	movs	r2, r4
 800f350:	f7fa fccc 	bl	8009cec <Paint_DrawNum>
				&Font12, colorSecond, colorMain);
	}

	Paint_DrawNum(column[COLUMN_HUM], line[LINE_HUM], humidityValue, &Font12,
 800f354:	4b33      	ldr	r3, [pc, #204]	; (800f424 <settingsDrawData+0x170>)
 800f356:	791b      	ldrb	r3, [r3, #4]
 800f358:	b298      	uxth	r0, r3
 800f35a:	4b33      	ldr	r3, [pc, #204]	; (800f428 <settingsDrawData+0x174>)
 800f35c:	795b      	ldrb	r3, [r3, #5]
 800f35e:	b299      	uxth	r1, r3
 800f360:	4b35      	ldr	r3, [pc, #212]	; (800f438 <settingsDrawData+0x184>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	001d      	movs	r5, r3
 800f366:	4b31      	ldr	r3, [pc, #196]	; (800f42c <settingsDrawData+0x178>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4a30      	ldr	r2, [pc, #192]	; (800f430 <settingsDrawData+0x17c>)
 800f370:	7812      	ldrb	r2, [r2, #0]
 800f372:	b2d2      	uxtb	r2, r2
 800f374:	b292      	uxth	r2, r2
 800f376:	4c2f      	ldr	r4, [pc, #188]	; (800f434 <settingsDrawData+0x180>)
 800f378:	9201      	str	r2, [sp, #4]
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	0023      	movs	r3, r4
 800f37e:	002a      	movs	r2, r5
 800f380:	f7fa fcb4 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_PRESS], line[LINE_PRESS], pressureValue,
 800f384:	4b27      	ldr	r3, [pc, #156]	; (800f424 <settingsDrawData+0x170>)
 800f386:	78db      	ldrb	r3, [r3, #3]
 800f388:	b298      	uxth	r0, r3
 800f38a:	4b27      	ldr	r3, [pc, #156]	; (800f428 <settingsDrawData+0x174>)
 800f38c:	7a1b      	ldrb	r3, [r3, #8]
 800f38e:	b299      	uxth	r1, r3
 800f390:	4b2a      	ldr	r3, [pc, #168]	; (800f43c <settingsDrawData+0x188>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	001d      	movs	r5, r3
 800f396:	4b25      	ldr	r3, [pc, #148]	; (800f42c <settingsDrawData+0x178>)
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	4a24      	ldr	r2, [pc, #144]	; (800f430 <settingsDrawData+0x17c>)
 800f3a0:	7812      	ldrb	r2, [r2, #0]
 800f3a2:	b2d2      	uxtb	r2, r2
 800f3a4:	b292      	uxth	r2, r2
 800f3a6:	4c23      	ldr	r4, [pc, #140]	; (800f434 <settingsDrawData+0x180>)
 800f3a8:	9201      	str	r2, [sp, #4]
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	0023      	movs	r3, r4
 800f3ae:	002a      	movs	r2, r5
 800f3b0:	f7fa fc9c 	bl	8009cec <Paint_DrawNum>
			&Font12, colorSecond, colorMain);

	if (altitudeValue < 0) {
 800f3b4:	4b22      	ldr	r3, [pc, #136]	; (800f440 <settingsDrawData+0x18c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	da43      	bge.n	800f444 <settingsDrawData+0x190>
		Paint_DrawChar(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE], '-',
 800f3bc:	4b19      	ldr	r3, [pc, #100]	; (800f424 <settingsDrawData+0x170>)
 800f3be:	789b      	ldrb	r3, [r3, #2]
 800f3c0:	b298      	uxth	r0, r3
 800f3c2:	4b19      	ldr	r3, [pc, #100]	; (800f428 <settingsDrawData+0x174>)
 800f3c4:	7adb      	ldrb	r3, [r3, #11]
 800f3c6:	b299      	uxth	r1, r3
 800f3c8:	4b18      	ldr	r3, [pc, #96]	; (800f42c <settingsDrawData+0x178>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	4a17      	ldr	r2, [pc, #92]	; (800f430 <settingsDrawData+0x17c>)
 800f3d2:	7812      	ldrb	r2, [r2, #0]
 800f3d4:	b2d2      	uxtb	r2, r2
 800f3d6:	b292      	uxth	r2, r2
 800f3d8:	4c16      	ldr	r4, [pc, #88]	; (800f434 <settingsDrawData+0x180>)
 800f3da:	9201      	str	r2, [sp, #4]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	0023      	movs	r3, r4
 800f3e0:	222d      	movs	r2, #45	; 0x2d
 800f3e2:	f7fa fb21 	bl	8009a28 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800f3e6:	4b0f      	ldr	r3, [pc, #60]	; (800f424 <settingsDrawData+0x170>)
 800f3e8:	789b      	ldrb	r3, [r3, #2]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	b298      	uxth	r0, r3
 800f3f0:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <settingsDrawData+0x174>)
 800f3f2:	7adb      	ldrb	r3, [r3, #11]
 800f3f4:	b299      	uxth	r1, r3
 800f3f6:	4b12      	ldr	r3, [pc, #72]	; (800f440 <settingsDrawData+0x18c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
				abs(altitudeValue), &Font12, colorSecond, colorMain);
 800f3fa:	17da      	asrs	r2, r3, #31
 800f3fc:	189c      	adds	r4, r3, r2
 800f3fe:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 800f400:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <settingsDrawData+0x178>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	b2db      	uxtb	r3, r3
 800f406:	b29b      	uxth	r3, r3
 800f408:	4a09      	ldr	r2, [pc, #36]	; (800f430 <settingsDrawData+0x17c>)
 800f40a:	7812      	ldrb	r2, [r2, #0]
 800f40c:	b2d2      	uxtb	r2, r2
 800f40e:	b292      	uxth	r2, r2
 800f410:	4d08      	ldr	r5, [pc, #32]	; (800f434 <settingsDrawData+0x180>)
 800f412:	9201      	str	r2, [sp, #4]
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	002b      	movs	r3, r5
 800f418:	0022      	movs	r2, r4
 800f41a:	f7fa fc67 	bl	8009cec <Paint_DrawNum>
 800f41e:	e028      	b.n	800f472 <settingsDrawData+0x1be>
 800f420:	20000304 	.word	0x20000304
 800f424:	20000070 	.word	0x20000070
 800f428:	20000048 	.word	0x20000048
 800f42c:	20000605 	.word	0x20000605
 800f430:	20000293 	.word	0x20000293
 800f434:	20000008 	.word	0x20000008
 800f438:	2000014c 	.word	0x2000014c
 800f43c:	20000584 	.word	0x20000584
 800f440:	20000590 	.word	0x20000590
	} else {
		Paint_DrawNum(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE],
 800f444:	4bc9      	ldr	r3, [pc, #804]	; (800f76c <settingsDrawData+0x4b8>)
 800f446:	789b      	ldrb	r3, [r3, #2]
 800f448:	b298      	uxth	r0, r3
 800f44a:	4bc9      	ldr	r3, [pc, #804]	; (800f770 <settingsDrawData+0x4bc>)
 800f44c:	7adb      	ldrb	r3, [r3, #11]
 800f44e:	b299      	uxth	r1, r3
 800f450:	4bc8      	ldr	r3, [pc, #800]	; (800f774 <settingsDrawData+0x4c0>)
 800f452:	681c      	ldr	r4, [r3, #0]
 800f454:	4bc8      	ldr	r3, [pc, #800]	; (800f778 <settingsDrawData+0x4c4>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4ac7      	ldr	r2, [pc, #796]	; (800f77c <settingsDrawData+0x4c8>)
 800f45e:	7812      	ldrb	r2, [r2, #0]
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	b292      	uxth	r2, r2
 800f464:	4dc6      	ldr	r5, [pc, #792]	; (800f780 <settingsDrawData+0x4cc>)
 800f466:	9201      	str	r2, [sp, #4]
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	002b      	movs	r3, r5
 800f46c:	0022      	movs	r2, r4
 800f46e:	f7fa fc3d 	bl	8009cec <Paint_DrawNum>
				altitudeValue, &Font12, colorSecond, colorMain);
	}

	//										SENSOR READINGS UNITS
	Paint_DrawString_EN(column[COLUMN_TEMP + 2], line[LINE_TEMP], "C", &Font12,
 800f472:	4bbe      	ldr	r3, [pc, #760]	; (800f76c <settingsDrawData+0x4b8>)
 800f474:	7a1b      	ldrb	r3, [r3, #8]
 800f476:	b298      	uxth	r0, r3
 800f478:	4bbd      	ldr	r3, [pc, #756]	; (800f770 <settingsDrawData+0x4bc>)
 800f47a:	789b      	ldrb	r3, [r3, #2]
 800f47c:	b299      	uxth	r1, r3
 800f47e:	4bbe      	ldr	r3, [pc, #760]	; (800f778 <settingsDrawData+0x4c4>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	b29b      	uxth	r3, r3
 800f486:	4abd      	ldr	r2, [pc, #756]	; (800f77c <settingsDrawData+0x4c8>)
 800f488:	7812      	ldrb	r2, [r2, #0]
 800f48a:	b2d2      	uxtb	r2, r2
 800f48c:	b292      	uxth	r2, r2
 800f48e:	4dbc      	ldr	r5, [pc, #752]	; (800f780 <settingsDrawData+0x4cc>)
 800f490:	4cbc      	ldr	r4, [pc, #752]	; (800f784 <settingsDrawData+0x4d0>)
 800f492:	9201      	str	r2, [sp, #4]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	002b      	movs	r3, r5
 800f498:	0022      	movs	r2, r4
 800f49a:	f7fa fba9 	bl	8009bf0 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_HUM + 2], line[LINE_HUM], "%", &Font12,
 800f49e:	4bb3      	ldr	r3, [pc, #716]	; (800f76c <settingsDrawData+0x4b8>)
 800f4a0:	799b      	ldrb	r3, [r3, #6]
 800f4a2:	b298      	uxth	r0, r3
 800f4a4:	4bb2      	ldr	r3, [pc, #712]	; (800f770 <settingsDrawData+0x4bc>)
 800f4a6:	795b      	ldrb	r3, [r3, #5]
 800f4a8:	b299      	uxth	r1, r3
 800f4aa:	4bb3      	ldr	r3, [pc, #716]	; (800f778 <settingsDrawData+0x4c4>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	4ab2      	ldr	r2, [pc, #712]	; (800f77c <settingsDrawData+0x4c8>)
 800f4b4:	7812      	ldrb	r2, [r2, #0]
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	b292      	uxth	r2, r2
 800f4ba:	4db1      	ldr	r5, [pc, #708]	; (800f780 <settingsDrawData+0x4cc>)
 800f4bc:	4cb2      	ldr	r4, [pc, #712]	; (800f788 <settingsDrawData+0x4d4>)
 800f4be:	9201      	str	r2, [sp, #4]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	002b      	movs	r3, r5
 800f4c4:	0022      	movs	r2, r4
 800f4c6:	f7fa fb93 	bl	8009bf0 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS + 4], line[LINE_PRESS], "hPa",
 800f4ca:	4ba8      	ldr	r3, [pc, #672]	; (800f76c <settingsDrawData+0x4b8>)
 800f4cc:	79db      	ldrb	r3, [r3, #7]
 800f4ce:	b298      	uxth	r0, r3
 800f4d0:	4ba7      	ldr	r3, [pc, #668]	; (800f770 <settingsDrawData+0x4bc>)
 800f4d2:	7a1b      	ldrb	r3, [r3, #8]
 800f4d4:	b299      	uxth	r1, r3
 800f4d6:	4ba8      	ldr	r3, [pc, #672]	; (800f778 <settingsDrawData+0x4c4>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	4aa7      	ldr	r2, [pc, #668]	; (800f77c <settingsDrawData+0x4c8>)
 800f4e0:	7812      	ldrb	r2, [r2, #0]
 800f4e2:	b2d2      	uxtb	r2, r2
 800f4e4:	b292      	uxth	r2, r2
 800f4e6:	4da6      	ldr	r5, [pc, #664]	; (800f780 <settingsDrawData+0x4cc>)
 800f4e8:	4ca8      	ldr	r4, [pc, #672]	; (800f78c <settingsDrawData+0x4d8>)
 800f4ea:	9201      	str	r2, [sp, #4]
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	002b      	movs	r3, r5
 800f4f0:	0022      	movs	r2, r4
 800f4f2:	f7fa fb7d 	bl	8009bf0 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_ALTITUDE + 5], line[LINE_ALTITUDE],
 800f4f6:	4b9d      	ldr	r3, [pc, #628]	; (800f76c <settingsDrawData+0x4b8>)
 800f4f8:	79db      	ldrb	r3, [r3, #7]
 800f4fa:	b298      	uxth	r0, r3
 800f4fc:	4b9c      	ldr	r3, [pc, #624]	; (800f770 <settingsDrawData+0x4bc>)
 800f4fe:	7adb      	ldrb	r3, [r3, #11]
 800f500:	b299      	uxth	r1, r3
 800f502:	4b9d      	ldr	r3, [pc, #628]	; (800f778 <settingsDrawData+0x4c4>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	b2db      	uxtb	r3, r3
 800f508:	b29b      	uxth	r3, r3
 800f50a:	4a9c      	ldr	r2, [pc, #624]	; (800f77c <settingsDrawData+0x4c8>)
 800f50c:	7812      	ldrb	r2, [r2, #0]
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	b292      	uxth	r2, r2
 800f512:	4d9b      	ldr	r5, [pc, #620]	; (800f780 <settingsDrawData+0x4cc>)
 800f514:	4c9e      	ldr	r4, [pc, #632]	; (800f790 <settingsDrawData+0x4dc>)
 800f516:	9201      	str	r2, [sp, #4]
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	002b      	movs	r3, r5
 800f51c:	0022      	movs	r2, r4
 800f51e:	f7fa fb67 	bl	8009bf0 <Paint_DrawString_EN>
			"m a.s.l.", &Font12, colorSecond, colorMain);

	//										STRINGS
	Paint_DrawString_EN(column[COLUMN_LAYOUT], line[LINE_LAYOUT], "Layout:",
 800f522:	4b92      	ldr	r3, [pc, #584]	; (800f76c <settingsDrawData+0x4b8>)
 800f524:	785b      	ldrb	r3, [r3, #1]
 800f526:	b298      	uxth	r0, r3
 800f528:	4b91      	ldr	r3, [pc, #580]	; (800f770 <settingsDrawData+0x4bc>)
 800f52a:	7e1b      	ldrb	r3, [r3, #24]
 800f52c:	b299      	uxth	r1, r3
 800f52e:	4b92      	ldr	r3, [pc, #584]	; (800f778 <settingsDrawData+0x4c4>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	b29b      	uxth	r3, r3
 800f536:	4a91      	ldr	r2, [pc, #580]	; (800f77c <settingsDrawData+0x4c8>)
 800f538:	7812      	ldrb	r2, [r2, #0]
 800f53a:	b2d2      	uxtb	r2, r2
 800f53c:	b292      	uxth	r2, r2
 800f53e:	4d90      	ldr	r5, [pc, #576]	; (800f780 <settingsDrawData+0x4cc>)
 800f540:	4c94      	ldr	r4, [pc, #592]	; (800f794 <settingsDrawData+0x4e0>)
 800f542:	9201      	str	r2, [sp, #4]
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	002b      	movs	r3, r5
 800f548:	0022      	movs	r2, r4
 800f54a:	f7fa fb51 	bl	8009bf0 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_COLOR], line[LINE_COLOR], "Color:",
 800f54e:	4b87      	ldr	r3, [pc, #540]	; (800f76c <settingsDrawData+0x4b8>)
 800f550:	789b      	ldrb	r3, [r3, #2]
 800f552:	b298      	uxth	r0, r3
 800f554:	4b86      	ldr	r3, [pc, #536]	; (800f770 <settingsDrawData+0x4bc>)
 800f556:	7f1b      	ldrb	r3, [r3, #28]
 800f558:	b299      	uxth	r1, r3
 800f55a:	4b87      	ldr	r3, [pc, #540]	; (800f778 <settingsDrawData+0x4c4>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	b29b      	uxth	r3, r3
 800f562:	4a86      	ldr	r2, [pc, #536]	; (800f77c <settingsDrawData+0x4c8>)
 800f564:	7812      	ldrb	r2, [r2, #0]
 800f566:	b2d2      	uxtb	r2, r2
 800f568:	b292      	uxth	r2, r2
 800f56a:	4d85      	ldr	r5, [pc, #532]	; (800f780 <settingsDrawData+0x4cc>)
 800f56c:	4c8a      	ldr	r4, [pc, #552]	; (800f798 <settingsDrawData+0x4e4>)
 800f56e:	9201      	str	r2, [sp, #4]
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	002b      	movs	r3, r5
 800f574:	0022      	movs	r2, r4
 800f576:	f7fa fb3b 	bl	8009bf0 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_TEMP_CMP], line[LINE_TEMP_CMP], "T.cmp:",
 800f57a:	4b7c      	ldr	r3, [pc, #496]	; (800f76c <settingsDrawData+0x4b8>)
 800f57c:	79db      	ldrb	r3, [r3, #7]
 800f57e:	b298      	uxth	r0, r3
 800f580:	4b7b      	ldr	r3, [pc, #492]	; (800f770 <settingsDrawData+0x4bc>)
 800f582:	2224      	movs	r2, #36	; 0x24
 800f584:	5c9b      	ldrb	r3, [r3, r2]
 800f586:	b299      	uxth	r1, r3
 800f588:	4b7b      	ldr	r3, [pc, #492]	; (800f778 <settingsDrawData+0x4c4>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	b29b      	uxth	r3, r3
 800f590:	4a7a      	ldr	r2, [pc, #488]	; (800f77c <settingsDrawData+0x4c8>)
 800f592:	7812      	ldrb	r2, [r2, #0]
 800f594:	b2d2      	uxtb	r2, r2
 800f596:	b292      	uxth	r2, r2
 800f598:	4d79      	ldr	r5, [pc, #484]	; (800f780 <settingsDrawData+0x4cc>)
 800f59a:	4c80      	ldr	r4, [pc, #512]	; (800f79c <settingsDrawData+0x4e8>)
 800f59c:	9201      	str	r2, [sp, #4]
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	002b      	movs	r3, r5
 800f5a2:	0022      	movs	r2, r4
 800f5a4:	f7fa fb24 	bl	8009bf0 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS_REF], line[LINE_PRESS_REF],
 800f5a8:	4b70      	ldr	r3, [pc, #448]	; (800f76c <settingsDrawData+0x4b8>)
 800f5aa:	791b      	ldrb	r3, [r3, #4]
 800f5ac:	b298      	uxth	r0, r3
 800f5ae:	4b70      	ldr	r3, [pc, #448]	; (800f770 <settingsDrawData+0x4bc>)
 800f5b0:	2220      	movs	r2, #32
 800f5b2:	5c9b      	ldrb	r3, [r3, r2]
 800f5b4:	b299      	uxth	r1, r3
 800f5b6:	4b70      	ldr	r3, [pc, #448]	; (800f778 <settingsDrawData+0x4c4>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4a6f      	ldr	r2, [pc, #444]	; (800f77c <settingsDrawData+0x4c8>)
 800f5c0:	7812      	ldrb	r2, [r2, #0]
 800f5c2:	b2d2      	uxtb	r2, r2
 800f5c4:	b292      	uxth	r2, r2
 800f5c6:	4d6e      	ldr	r5, [pc, #440]	; (800f780 <settingsDrawData+0x4cc>)
 800f5c8:	4c75      	ldr	r4, [pc, #468]	; (800f7a0 <settingsDrawData+0x4ec>)
 800f5ca:	9201      	str	r2, [sp, #4]
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	002b      	movs	r3, r5
 800f5d0:	0022      	movs	r2, r4
 800f5d2:	f7fa fb0d 	bl	8009bf0 <Paint_DrawString_EN>
			"P.ref:", &Font12, colorSecond, colorMain);

	//										CLOCK
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_CLOCK], hours, &Font16,
 800f5d6:	4b65      	ldr	r3, [pc, #404]	; (800f76c <settingsDrawData+0x4b8>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	b298      	uxth	r0, r3
 800f5dc:	4b64      	ldr	r3, [pc, #400]	; (800f770 <settingsDrawData+0x4bc>)
 800f5de:	7c1b      	ldrb	r3, [r3, #16]
 800f5e0:	b299      	uxth	r1, r3
 800f5e2:	4b70      	ldr	r3, [pc, #448]	; (800f7a4 <settingsDrawData+0x4f0>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	b25b      	sxtb	r3, r3
 800f5e8:	001d      	movs	r5, r3
 800f5ea:	4b63      	ldr	r3, [pc, #396]	; (800f778 <settingsDrawData+0x4c4>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	4a62      	ldr	r2, [pc, #392]	; (800f77c <settingsDrawData+0x4c8>)
 800f5f4:	7812      	ldrb	r2, [r2, #0]
 800f5f6:	b2d2      	uxtb	r2, r2
 800f5f8:	b292      	uxth	r2, r2
 800f5fa:	4c6b      	ldr	r4, [pc, #428]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f5fc:	9201      	str	r2, [sp, #4]
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	0023      	movs	r3, r4
 800f602:	002a      	movs	r2, r5
 800f604:	f7fa fb72 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_CLOCK], minutes, &Font16,
 800f608:	4b58      	ldr	r3, [pc, #352]	; (800f76c <settingsDrawData+0x4b8>)
 800f60a:	78db      	ldrb	r3, [r3, #3]
 800f60c:	b298      	uxth	r0, r3
 800f60e:	4b58      	ldr	r3, [pc, #352]	; (800f770 <settingsDrawData+0x4bc>)
 800f610:	7c1b      	ldrb	r3, [r3, #16]
 800f612:	b299      	uxth	r1, r3
 800f614:	4b65      	ldr	r3, [pc, #404]	; (800f7ac <settingsDrawData+0x4f8>)
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	b21b      	sxth	r3, r3
 800f61a:	001d      	movs	r5, r3
 800f61c:	4b56      	ldr	r3, [pc, #344]	; (800f778 <settingsDrawData+0x4c4>)
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	b2db      	uxtb	r3, r3
 800f622:	b29b      	uxth	r3, r3
 800f624:	4a55      	ldr	r2, [pc, #340]	; (800f77c <settingsDrawData+0x4c8>)
 800f626:	7812      	ldrb	r2, [r2, #0]
 800f628:	b2d2      	uxtb	r2, r2
 800f62a:	b292      	uxth	r2, r2
 800f62c:	4c5e      	ldr	r4, [pc, #376]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f62e:	9201      	str	r2, [sp, #4]
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	0023      	movs	r3, r4
 800f634:	002a      	movs	r2, r5
 800f636:	f7fa fb59 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_CLOCK], seconds, &Font16,
 800f63a:	4b4c      	ldr	r3, [pc, #304]	; (800f76c <settingsDrawData+0x4b8>)
 800f63c:	799b      	ldrb	r3, [r3, #6]
 800f63e:	b298      	uxth	r0, r3
 800f640:	4b4b      	ldr	r3, [pc, #300]	; (800f770 <settingsDrawData+0x4bc>)
 800f642:	7c1b      	ldrb	r3, [r3, #16]
 800f644:	b299      	uxth	r1, r3
 800f646:	4b5a      	ldr	r3, [pc, #360]	; (800f7b0 <settingsDrawData+0x4fc>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	b25b      	sxtb	r3, r3
 800f64c:	001d      	movs	r5, r3
 800f64e:	4b4a      	ldr	r3, [pc, #296]	; (800f778 <settingsDrawData+0x4c4>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	b2db      	uxtb	r3, r3
 800f654:	b29b      	uxth	r3, r3
 800f656:	4a49      	ldr	r2, [pc, #292]	; (800f77c <settingsDrawData+0x4c8>)
 800f658:	7812      	ldrb	r2, [r2, #0]
 800f65a:	b2d2      	uxtb	r2, r2
 800f65c:	b292      	uxth	r2, r2
 800f65e:	4c52      	ldr	r4, [pc, #328]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f660:	9201      	str	r2, [sp, #4]
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	0023      	movs	r3, r4
 800f666:	002a      	movs	r2, r5
 800f668:	f7fa fb40 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);

	//										DATE
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_DATE], day, &Font16,
 800f66c:	4b3f      	ldr	r3, [pc, #252]	; (800f76c <settingsDrawData+0x4b8>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	b298      	uxth	r0, r3
 800f672:	4b3f      	ldr	r3, [pc, #252]	; (800f770 <settingsDrawData+0x4bc>)
 800f674:	7d1b      	ldrb	r3, [r3, #20]
 800f676:	b299      	uxth	r1, r3
 800f678:	4b4e      	ldr	r3, [pc, #312]	; (800f7b4 <settingsDrawData+0x500>)
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	001d      	movs	r5, r3
 800f680:	4b3d      	ldr	r3, [pc, #244]	; (800f778 <settingsDrawData+0x4c4>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	b2db      	uxtb	r3, r3
 800f686:	b29b      	uxth	r3, r3
 800f688:	4a3c      	ldr	r2, [pc, #240]	; (800f77c <settingsDrawData+0x4c8>)
 800f68a:	7812      	ldrb	r2, [r2, #0]
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	b292      	uxth	r2, r2
 800f690:	4c45      	ldr	r4, [pc, #276]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f692:	9201      	str	r2, [sp, #4]
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	0023      	movs	r3, r4
 800f698:	002a      	movs	r2, r5
 800f69a:	f7fa fb27 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_DATE], month, &Font16,
 800f69e:	4b33      	ldr	r3, [pc, #204]	; (800f76c <settingsDrawData+0x4b8>)
 800f6a0:	78db      	ldrb	r3, [r3, #3]
 800f6a2:	b298      	uxth	r0, r3
 800f6a4:	4b32      	ldr	r3, [pc, #200]	; (800f770 <settingsDrawData+0x4bc>)
 800f6a6:	7d1b      	ldrb	r3, [r3, #20]
 800f6a8:	b299      	uxth	r1, r3
 800f6aa:	4b43      	ldr	r3, [pc, #268]	; (800f7b8 <settingsDrawData+0x504>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	001d      	movs	r5, r3
 800f6b2:	4b31      	ldr	r3, [pc, #196]	; (800f778 <settingsDrawData+0x4c4>)
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	4a30      	ldr	r2, [pc, #192]	; (800f77c <settingsDrawData+0x4c8>)
 800f6bc:	7812      	ldrb	r2, [r2, #0]
 800f6be:	b2d2      	uxtb	r2, r2
 800f6c0:	b292      	uxth	r2, r2
 800f6c2:	4c39      	ldr	r4, [pc, #228]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f6c4:	9201      	str	r2, [sp, #4]
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	0023      	movs	r3, r4
 800f6ca:	002a      	movs	r2, r5
 800f6cc:	f7fa fb0e 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_DATE], year, &Font16,
 800f6d0:	4b26      	ldr	r3, [pc, #152]	; (800f76c <settingsDrawData+0x4b8>)
 800f6d2:	799b      	ldrb	r3, [r3, #6]
 800f6d4:	b298      	uxth	r0, r3
 800f6d6:	4b26      	ldr	r3, [pc, #152]	; (800f770 <settingsDrawData+0x4bc>)
 800f6d8:	7d1b      	ldrb	r3, [r3, #20]
 800f6da:	b299      	uxth	r1, r3
 800f6dc:	4b37      	ldr	r3, [pc, #220]	; (800f7bc <settingsDrawData+0x508>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	001d      	movs	r5, r3
 800f6e4:	4b24      	ldr	r3, [pc, #144]	; (800f778 <settingsDrawData+0x4c4>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	4a23      	ldr	r2, [pc, #140]	; (800f77c <settingsDrawData+0x4c8>)
 800f6ee:	7812      	ldrb	r2, [r2, #0]
 800f6f0:	b2d2      	uxtb	r2, r2
 800f6f2:	b292      	uxth	r2, r2
 800f6f4:	4c2c      	ldr	r4, [pc, #176]	; (800f7a8 <settingsDrawData+0x4f4>)
 800f6f6:	9201      	str	r2, [sp, #4]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	0023      	movs	r3, r4
 800f6fc:	002a      	movs	r2, r5
 800f6fe:	f7fa faf5 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);

	//										LAYOUT
	Paint_DrawNum(column[COLUMN_LAYOUT + 6], line[LINE_LAYOUT], layout, &Font12,
 800f702:	4b1a      	ldr	r3, [pc, #104]	; (800f76c <settingsDrawData+0x4b8>)
 800f704:	79db      	ldrb	r3, [r3, #7]
 800f706:	b298      	uxth	r0, r3
 800f708:	4b19      	ldr	r3, [pc, #100]	; (800f770 <settingsDrawData+0x4bc>)
 800f70a:	7e1b      	ldrb	r3, [r3, #24]
 800f70c:	b299      	uxth	r1, r3
 800f70e:	4b2c      	ldr	r3, [pc, #176]	; (800f7c0 <settingsDrawData+0x50c>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	001d      	movs	r5, r3
 800f716:	4b18      	ldr	r3, [pc, #96]	; (800f778 <settingsDrawData+0x4c4>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	4a17      	ldr	r2, [pc, #92]	; (800f77c <settingsDrawData+0x4c8>)
 800f720:	7812      	ldrb	r2, [r2, #0]
 800f722:	b2d2      	uxtb	r2, r2
 800f724:	b292      	uxth	r2, r2
 800f726:	4c16      	ldr	r4, [pc, #88]	; (800f780 <settingsDrawData+0x4cc>)
 800f728:	9201      	str	r2, [sp, #4]
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	0023      	movs	r3, r4
 800f72e:	002a      	movs	r2, r5
 800f730:	f7fa fadc 	bl	8009cec <Paint_DrawNum>
			colorSecond, colorMain);

	//										COLOR
	if (colorScheme == COLOR_SCHEME_WHITE)
 800f734:	4b23      	ldr	r3, [pc, #140]	; (800f7c4 <settingsDrawData+0x510>)
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d144      	bne.n	800f7c8 <settingsDrawData+0x514>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'W', &Font12,
 800f73e:	4b0b      	ldr	r3, [pc, #44]	; (800f76c <settingsDrawData+0x4b8>)
 800f740:	79db      	ldrb	r3, [r3, #7]
 800f742:	b298      	uxth	r0, r3
 800f744:	4b0a      	ldr	r3, [pc, #40]	; (800f770 <settingsDrawData+0x4bc>)
 800f746:	7f1b      	ldrb	r3, [r3, #28]
 800f748:	b299      	uxth	r1, r3
 800f74a:	4b0b      	ldr	r3, [pc, #44]	; (800f778 <settingsDrawData+0x4c4>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	b29b      	uxth	r3, r3
 800f752:	4a0a      	ldr	r2, [pc, #40]	; (800f77c <settingsDrawData+0x4c8>)
 800f754:	7812      	ldrb	r2, [r2, #0]
 800f756:	b2d2      	uxtb	r2, r2
 800f758:	b292      	uxth	r2, r2
 800f75a:	4c09      	ldr	r4, [pc, #36]	; (800f780 <settingsDrawData+0x4cc>)
 800f75c:	9201      	str	r2, [sp, #4]
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	0023      	movs	r3, r4
 800f762:	2257      	movs	r2, #87	; 0x57
 800f764:	f7fa f960 	bl	8009a28 <Paint_DrawChar>
 800f768:	e048      	b.n	800f7fc <settingsDrawData+0x548>
 800f76a:	46c0      	nop			; (mov r8, r8)
 800f76c:	20000070 	.word	0x20000070
 800f770:	20000048 	.word	0x20000048
 800f774:	20000590 	.word	0x20000590
 800f778:	20000605 	.word	0x20000605
 800f77c:	20000293 	.word	0x20000293
 800f780:	20000008 	.word	0x20000008
 800f784:	08013dd4 	.word	0x08013dd4
 800f788:	08013dd8 	.word	0x08013dd8
 800f78c:	08013ddc 	.word	0x08013ddc
 800f790:	08013de0 	.word	0x08013de0
 800f794:	08013dec 	.word	0x08013dec
 800f798:	08013df4 	.word	0x08013df4
 800f79c:	08013dfc 	.word	0x08013dfc
 800f7a0:	08013e04 	.word	0x08013e04
 800f7a4:	2000064b 	.word	0x2000064b
 800f7a8:	20000010 	.word	0x20000010
 800f7ac:	20000638 	.word	0x20000638
 800f7b0:	200005eb 	.word	0x200005eb
 800f7b4:	200005f8 	.word	0x200005f8
 800f7b8:	20000309 	.word	0x20000309
 800f7bc:	200005f4 	.word	0x200005f4
 800f7c0:	2000062f 	.word	0x2000062f
 800f7c4:	20000614 	.word	0x20000614
				colorSecond, colorMain);
	else if (colorScheme == COLOR_SCHEME_BLACK)
 800f7c8:	4b46      	ldr	r3, [pc, #280]	; (800f8e4 <settingsDrawData+0x630>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	d114      	bne.n	800f7fc <settingsDrawData+0x548>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'B', &Font12,
 800f7d2:	4b45      	ldr	r3, [pc, #276]	; (800f8e8 <settingsDrawData+0x634>)
 800f7d4:	79db      	ldrb	r3, [r3, #7]
 800f7d6:	b298      	uxth	r0, r3
 800f7d8:	4b44      	ldr	r3, [pc, #272]	; (800f8ec <settingsDrawData+0x638>)
 800f7da:	7f1b      	ldrb	r3, [r3, #28]
 800f7dc:	b299      	uxth	r1, r3
 800f7de:	4b44      	ldr	r3, [pc, #272]	; (800f8f0 <settingsDrawData+0x63c>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	4a43      	ldr	r2, [pc, #268]	; (800f8f4 <settingsDrawData+0x640>)
 800f7e8:	7812      	ldrb	r2, [r2, #0]
 800f7ea:	b2d2      	uxtb	r2, r2
 800f7ec:	b292      	uxth	r2, r2
 800f7ee:	4c42      	ldr	r4, [pc, #264]	; (800f8f8 <settingsDrawData+0x644>)
 800f7f0:	9201      	str	r2, [sp, #4]
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	0023      	movs	r3, r4
 800f7f6:	2242      	movs	r2, #66	; 0x42
 800f7f8:	f7fa f916 	bl	8009a28 <Paint_DrawChar>
				colorSecond, colorMain);

	//										PRESSURE REFERENCE
	Paint_DrawNum(column[COLUMN_PRESS_REF + 5], line[LINE_PRESS_REF],
 800f7fc:	4b3a      	ldr	r3, [pc, #232]	; (800f8e8 <settingsDrawData+0x634>)
 800f7fe:	7a5b      	ldrb	r3, [r3, #9]
 800f800:	b298      	uxth	r0, r3
 800f802:	4b3a      	ldr	r3, [pc, #232]	; (800f8ec <settingsDrawData+0x638>)
 800f804:	2220      	movs	r2, #32
 800f806:	5c9b      	ldrb	r3, [r3, r2]
 800f808:	b299      	uxth	r1, r3
 800f80a:	4b3c      	ldr	r3, [pc, #240]	; (800f8fc <settingsDrawData+0x648>)
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	b21b      	sxth	r3, r3
 800f810:	001d      	movs	r5, r3
 800f812:	4b37      	ldr	r3, [pc, #220]	; (800f8f0 <settingsDrawData+0x63c>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	b29b      	uxth	r3, r3
 800f81a:	4a36      	ldr	r2, [pc, #216]	; (800f8f4 <settingsDrawData+0x640>)
 800f81c:	7812      	ldrb	r2, [r2, #0]
 800f81e:	b2d2      	uxtb	r2, r2
 800f820:	b292      	uxth	r2, r2
 800f822:	4c35      	ldr	r4, [pc, #212]	; (800f8f8 <settingsDrawData+0x644>)
 800f824:	9201      	str	r2, [sp, #4]
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	0023      	movs	r3, r4
 800f82a:	002a      	movs	r2, r5
 800f82c:	f7fa fa5e 	bl	8009cec <Paint_DrawNum>
			pressureReference, &Font12, colorSecond, colorMain);

	//										TEMPERATURE COMPENSATION

	if (temperatureCompensation < 0) {
 800f830:	4b33      	ldr	r3, [pc, #204]	; (800f900 <settingsDrawData+0x64c>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	b25b      	sxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	da36      	bge.n	800f8a8 <settingsDrawData+0x5f4>

		Paint_DrawChar(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP], '-',
 800f83a:	4b2b      	ldr	r3, [pc, #172]	; (800f8e8 <settingsDrawData+0x634>)
 800f83c:	7b1b      	ldrb	r3, [r3, #12]
 800f83e:	b298      	uxth	r0, r3
 800f840:	4b2a      	ldr	r3, [pc, #168]	; (800f8ec <settingsDrawData+0x638>)
 800f842:	2224      	movs	r2, #36	; 0x24
 800f844:	5c9b      	ldrb	r3, [r3, r2]
 800f846:	b299      	uxth	r1, r3
 800f848:	4b29      	ldr	r3, [pc, #164]	; (800f8f0 <settingsDrawData+0x63c>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	b29b      	uxth	r3, r3
 800f850:	4a28      	ldr	r2, [pc, #160]	; (800f8f4 <settingsDrawData+0x640>)
 800f852:	7812      	ldrb	r2, [r2, #0]
 800f854:	b2d2      	uxtb	r2, r2
 800f856:	b292      	uxth	r2, r2
 800f858:	4c27      	ldr	r4, [pc, #156]	; (800f8f8 <settingsDrawData+0x644>)
 800f85a:	9201      	str	r2, [sp, #4]
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	0023      	movs	r3, r4
 800f860:	222d      	movs	r2, #45	; 0x2d
 800f862:	f7fa f8e1 	bl	8009a28 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800f866:	4b20      	ldr	r3, [pc, #128]	; (800f8e8 <settingsDrawData+0x634>)
 800f868:	7b1b      	ldrb	r3, [r3, #12]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	3308      	adds	r3, #8
 800f86e:	b298      	uxth	r0, r3
 800f870:	4b1e      	ldr	r3, [pc, #120]	; (800f8ec <settingsDrawData+0x638>)
 800f872:	2224      	movs	r2, #36	; 0x24
 800f874:	5c9b      	ldrb	r3, [r3, r2]
 800f876:	b299      	uxth	r1, r3
				abs(temperatureCompensation), &Font12, colorSecond, colorMain);
 800f878:	4b21      	ldr	r3, [pc, #132]	; (800f900 <settingsDrawData+0x64c>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	b25b      	sxtb	r3, r3
 800f87e:	17da      	asrs	r2, r3, #31
 800f880:	189b      	adds	r3, r3, r2
 800f882:	4053      	eors	r3, r2
 800f884:	b2db      	uxtb	r3, r3
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 800f886:	001d      	movs	r5, r3
 800f888:	4b19      	ldr	r3, [pc, #100]	; (800f8f0 <settingsDrawData+0x63c>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	b29b      	uxth	r3, r3
 800f890:	4a18      	ldr	r2, [pc, #96]	; (800f8f4 <settingsDrawData+0x640>)
 800f892:	7812      	ldrb	r2, [r2, #0]
 800f894:	b2d2      	uxtb	r2, r2
 800f896:	b292      	uxth	r2, r2
 800f898:	4c17      	ldr	r4, [pc, #92]	; (800f8f8 <settingsDrawData+0x644>)
 800f89a:	9201      	str	r2, [sp, #4]
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	0023      	movs	r3, r4
 800f8a0:	002a      	movs	r2, r5
 800f8a2:	f7fa fa23 	bl	8009cec <Paint_DrawNum>
	}

//	Paint_DrawNum(column[COLUMN_COLOR+7], line[LINE_COLOR], colorScheme, &Font16, colorSecond,
//			colorMain);

}
 800f8a6:	e019      	b.n	800f8dc <settingsDrawData+0x628>
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP],
 800f8a8:	4b0f      	ldr	r3, [pc, #60]	; (800f8e8 <settingsDrawData+0x634>)
 800f8aa:	7b1b      	ldrb	r3, [r3, #12]
 800f8ac:	b298      	uxth	r0, r3
 800f8ae:	4b0f      	ldr	r3, [pc, #60]	; (800f8ec <settingsDrawData+0x638>)
 800f8b0:	2224      	movs	r2, #36	; 0x24
 800f8b2:	5c9b      	ldrb	r3, [r3, r2]
 800f8b4:	b299      	uxth	r1, r3
 800f8b6:	4b12      	ldr	r3, [pc, #72]	; (800f900 <settingsDrawData+0x64c>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	b25b      	sxtb	r3, r3
 800f8bc:	001d      	movs	r5, r3
 800f8be:	4b0c      	ldr	r3, [pc, #48]	; (800f8f0 <settingsDrawData+0x63c>)
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	4a0b      	ldr	r2, [pc, #44]	; (800f8f4 <settingsDrawData+0x640>)
 800f8c8:	7812      	ldrb	r2, [r2, #0]
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	b292      	uxth	r2, r2
 800f8ce:	4c0a      	ldr	r4, [pc, #40]	; (800f8f8 <settingsDrawData+0x644>)
 800f8d0:	9201      	str	r2, [sp, #4]
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	0023      	movs	r3, r4
 800f8d6:	002a      	movs	r2, r5
 800f8d8:	f7fa fa08 	bl	8009cec <Paint_DrawNum>
}
 800f8dc:	46c0      	nop			; (mov r8, r8)
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	20000614 	.word	0x20000614
 800f8e8:	20000070 	.word	0x20000070
 800f8ec:	20000048 	.word	0x20000048
 800f8f0:	20000605 	.word	0x20000605
 800f8f4:	20000293 	.word	0x20000293
 800f8f8:	20000008 	.word	0x20000008
 800f8fc:	2000002e 	.word	0x2000002e
 800f900:	2000002c 	.word	0x2000002c

0800f904 <settingsDrawSubs>:

void settingsDrawSubs(void) {
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af04      	add	r7, sp, #16

	Paint_DrawChar(160, 40, '+', &Font20, colorSecond, colorMain);
 800f90a:	4b31      	ldr	r3, [pc, #196]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	b29b      	uxth	r3, r3
 800f912:	4a30      	ldr	r2, [pc, #192]	; (800f9d4 <settingsDrawSubs+0xd0>)
 800f914:	7812      	ldrb	r2, [r2, #0]
 800f916:	b2d2      	uxtb	r2, r2
 800f918:	b292      	uxth	r2, r2
 800f91a:	492f      	ldr	r1, [pc, #188]	; (800f9d8 <settingsDrawSubs+0xd4>)
 800f91c:	9201      	str	r2, [sp, #4]
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	000b      	movs	r3, r1
 800f922:	222b      	movs	r2, #43	; 0x2b
 800f924:	2128      	movs	r1, #40	; 0x28
 800f926:	20a0      	movs	r0, #160	; 0xa0
 800f928:	f7fa f87e 	bl	8009a28 <Paint_DrawChar>
	Paint_DrawChar(160, 140, '>', &Font20, colorSecond, colorMain);
 800f92c:	4b28      	ldr	r3, [pc, #160]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	b2db      	uxtb	r3, r3
 800f932:	b29b      	uxth	r3, r3
 800f934:	4a27      	ldr	r2, [pc, #156]	; (800f9d4 <settingsDrawSubs+0xd0>)
 800f936:	7812      	ldrb	r2, [r2, #0]
 800f938:	b2d2      	uxtb	r2, r2
 800f93a:	b292      	uxth	r2, r2
 800f93c:	4926      	ldr	r1, [pc, #152]	; (800f9d8 <settingsDrawSubs+0xd4>)
 800f93e:	9201      	str	r2, [sp, #4]
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	000b      	movs	r3, r1
 800f944:	223e      	movs	r2, #62	; 0x3e
 800f946:	218c      	movs	r1, #140	; 0x8c
 800f948:	20a0      	movs	r0, #160	; 0xa0
 800f94a:	f7fa f86d 	bl	8009a28 <Paint_DrawChar>
	Paint_DrawString_EN(132, 92, "libra", &Font16, colorSecond, colorMain);
 800f94e:	4b20      	ldr	r3, [pc, #128]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	b29b      	uxth	r3, r3
 800f956:	4a1f      	ldr	r2, [pc, #124]	; (800f9d4 <settingsDrawSubs+0xd0>)
 800f958:	7812      	ldrb	r2, [r2, #0]
 800f95a:	b2d2      	uxtb	r2, r2
 800f95c:	b292      	uxth	r2, r2
 800f95e:	481f      	ldr	r0, [pc, #124]	; (800f9dc <settingsDrawSubs+0xd8>)
 800f960:	491f      	ldr	r1, [pc, #124]	; (800f9e0 <settingsDrawSubs+0xdc>)
 800f962:	9201      	str	r2, [sp, #4]
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	0003      	movs	r3, r0
 800f968:	000a      	movs	r2, r1
 800f96a:	215c      	movs	r1, #92	; 0x5c
 800f96c:	2084      	movs	r0, #132	; 0x84
 800f96e:	f7fa f93f 	bl	8009bf0 <Paint_DrawString_EN>

	Paint_DrawLine(0, 75, 122, 75, colorSecond, DOT_PIXEL_1X1,
 800f972:	4b17      	ldr	r3, [pc, #92]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	b2db      	uxtb	r3, r3
 800f978:	b29b      	uxth	r3, r3
 800f97a:	2200      	movs	r2, #0
 800f97c:	9202      	str	r2, [sp, #8]
 800f97e:	2201      	movs	r2, #1
 800f980:	9201      	str	r2, [sp, #4]
 800f982:	9300      	str	r3, [sp, #0]
 800f984:	234b      	movs	r3, #75	; 0x4b
 800f986:	227a      	movs	r2, #122	; 0x7a
 800f988:	214b      	movs	r1, #75	; 0x4b
 800f98a:	2000      	movs	r0, #0
 800f98c:	f7f9 fb66 	bl	800905c <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 118, 122, 118, colorSecond, DOT_PIXEL_1X1,
 800f990:	4b0f      	ldr	r3, [pc, #60]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	b2db      	uxtb	r3, r3
 800f996:	b29b      	uxth	r3, r3
 800f998:	2200      	movs	r2, #0
 800f99a:	9202      	str	r2, [sp, #8]
 800f99c:	2201      	movs	r2, #1
 800f99e:	9201      	str	r2, [sp, #4]
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	2376      	movs	r3, #118	; 0x76
 800f9a4:	227a      	movs	r2, #122	; 0x7a
 800f9a6:	2176      	movs	r1, #118	; 0x76
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	f7f9 fb57 	bl	800905c <Paint_DrawLine>
			LINE_STYLE_SOLID);

	Paint_DrawCircle(200, 100, 80, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800f9ae:	4b08      	ldr	r3, [pc, #32]	; (800f9d0 <settingsDrawSubs+0xcc>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	9201      	str	r2, [sp, #4]
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	9200      	str	r2, [sp, #0]
 800f9be:	2250      	movs	r2, #80	; 0x50
 800f9c0:	2164      	movs	r1, #100	; 0x64
 800f9c2:	20c8      	movs	r0, #200	; 0xc8
 800f9c4:	f7f9 fdde 	bl	8009584 <Paint_DrawCircle>

}
 800f9c8:	46c0      	nop			; (mov r8, r8)
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	46c0      	nop			; (mov r8, r8)
 800f9d0:	20000605 	.word	0x20000605
 800f9d4:	20000293 	.word	0x20000293
 800f9d8:	20000018 	.word	0x20000018
 800f9dc:	20000010 	.word	0x20000010
 800f9e0:	08013e0c 	.word	0x08013e0c

0800f9e4 <settingsDrawPointer>:

void settingsDrawPointer(void) {
 800f9e4:	b5b0      	push	{r4, r5, r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af04      	add	r7, sp, #16
	if (settingsPointer == SETTINGS_HOURS) {
 800f9ea:	4baf      	ldr	r3, [pc, #700]	; (800fca8 <settingsDrawPointer+0x2c4>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]

	}

	switch (settingsPointer) {
 800f9ee:	4bae      	ldr	r3, [pc, #696]	; (800fca8 <settingsDrawPointer+0x2c4>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b0a      	cmp	r3, #10
 800f9f6:	d900      	bls.n	800f9fa <settingsDrawPointer+0x16>
 800f9f8:	e152      	b.n	800fca0 <settingsDrawPointer+0x2bc>
 800f9fa:	009a      	lsls	r2, r3, #2
 800f9fc:	4bab      	ldr	r3, [pc, #684]	; (800fcac <settingsDrawPointer+0x2c8>)
 800f9fe:	18d3      	adds	r3, r2, r3
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	469f      	mov	pc, r3
	case SETTINGS_HOURS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fa04:	4baa      	ldr	r3, [pc, #680]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	3303      	adds	r3, #3
 800fa0c:	b298      	uxth	r0, r3
 800fa0e:	4ba9      	ldr	r3, [pc, #676]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fa10:	7c1b      	ldrb	r3, [r3, #16]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	330f      	adds	r3, #15
 800fa16:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fa18:	4ba5      	ldr	r3, [pc, #660]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fa1e:	3314      	adds	r3, #20
 800fa20:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fa22:	4ba4      	ldr	r3, [pc, #656]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fa24:	7c1b      	ldrb	r3, [r3, #16]
 800fa26:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 800fa28:	330f      	adds	r3, #15
 800fa2a:	b29c      	uxth	r4, r3
 800fa2c:	4ba2      	ldr	r3, [pc, #648]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	2500      	movs	r5, #0
 800fa36:	9502      	str	r5, [sp, #8]
 800fa38:	2502      	movs	r5, #2
 800fa3a:	9501      	str	r5, [sp, #4]
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	0023      	movs	r3, r4
 800fa40:	f7f9 fb0c 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // hour
		break;
 800fa44:	e12c      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_MINUTES:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fa46:	4b9a      	ldr	r3, [pc, #616]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa48:	78db      	ldrb	r3, [r3, #3]
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	3303      	adds	r3, #3
 800fa4e:	b298      	uxth	r0, r3
 800fa50:	4b98      	ldr	r3, [pc, #608]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fa52:	7c1b      	ldrb	r3, [r3, #16]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	330f      	adds	r3, #15
 800fa58:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fa5a:	4b95      	ldr	r3, [pc, #596]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa5c:	78db      	ldrb	r3, [r3, #3]
 800fa5e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fa60:	3314      	adds	r3, #20
 800fa62:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fa64:	4b93      	ldr	r3, [pc, #588]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fa66:	7c1b      	ldrb	r3, [r3, #16]
 800fa68:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 800fa6a:	330f      	adds	r3, #15
 800fa6c:	b29c      	uxth	r4, r3
 800fa6e:	4b92      	ldr	r3, [pc, #584]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	2500      	movs	r5, #0
 800fa78:	9502      	str	r5, [sp, #8]
 800fa7a:	2502      	movs	r5, #2
 800fa7c:	9501      	str	r5, [sp, #4]
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	0023      	movs	r3, r4
 800fa82:	f7f9 faeb 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // minute
		break;
 800fa86:	e10b      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_SECONDS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800fa88:	4b89      	ldr	r3, [pc, #548]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa8a:	799b      	ldrb	r3, [r3, #6]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	3303      	adds	r3, #3
 800fa90:	b298      	uxth	r0, r3
 800fa92:	4b88      	ldr	r3, [pc, #544]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fa94:	7c1b      	ldrb	r3, [r3, #16]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	330f      	adds	r3, #15
 800fa9a:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800fa9c:	4b84      	ldr	r3, [pc, #528]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fa9e:	799b      	ldrb	r3, [r3, #6]
 800faa0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800faa2:	3314      	adds	r3, #20
 800faa4:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 800faa6:	4b83      	ldr	r3, [pc, #524]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800faa8:	7c1b      	ldrb	r3, [r3, #16]
 800faaa:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 800faac:	330f      	adds	r3, #15
 800faae:	b29c      	uxth	r4, r3
 800fab0:	4b81      	ldr	r3, [pc, #516]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	2500      	movs	r5, #0
 800faba:	9502      	str	r5, [sp, #8]
 800fabc:	2502      	movs	r5, #2
 800fabe:	9501      	str	r5, [sp, #4]
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	0023      	movs	r3, r4
 800fac4:	f7f9 faca 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // second
		break;
 800fac8:	e0ea      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_DAYS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800faca:	4b79      	ldr	r3, [pc, #484]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	b29b      	uxth	r3, r3
 800fad0:	3303      	adds	r3, #3
 800fad2:	b298      	uxth	r0, r3
 800fad4:	4b77      	ldr	r3, [pc, #476]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fad6:	7d1b      	ldrb	r3, [r3, #20]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	330f      	adds	r3, #15
 800fadc:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800fade:	4b74      	ldr	r3, [pc, #464]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800fae4:	3314      	adds	r3, #20
 800fae6:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 800fae8:	4b72      	ldr	r3, [pc, #456]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800faea:	7d1b      	ldrb	r3, [r3, #20]
 800faec:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 800faee:	330f      	adds	r3, #15
 800faf0:	b29c      	uxth	r4, r3
 800faf2:	4b71      	ldr	r3, [pc, #452]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	2500      	movs	r5, #0
 800fafc:	9502      	str	r5, [sp, #8]
 800fafe:	2502      	movs	r5, #2
 800fb00:	9501      	str	r5, [sp, #4]
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	0023      	movs	r3, r4
 800fb06:	f7f9 faa9 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // day
		break;
 800fb0a:	e0c9      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_MONTHS:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fb0c:	4b68      	ldr	r3, [pc, #416]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fb0e:	78db      	ldrb	r3, [r3, #3]
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	3303      	adds	r3, #3
 800fb14:	b298      	uxth	r0, r3
 800fb16:	4b67      	ldr	r3, [pc, #412]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fb18:	7d1b      	ldrb	r3, [r3, #20]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	330f      	adds	r3, #15
 800fb1e:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800fb20:	4b63      	ldr	r3, [pc, #396]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fb22:	78db      	ldrb	r3, [r3, #3]
 800fb24:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fb26:	3314      	adds	r3, #20
 800fb28:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 800fb2a:	4b62      	ldr	r3, [pc, #392]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fb2c:	7d1b      	ldrb	r3, [r3, #20]
 800fb2e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 800fb30:	330f      	adds	r3, #15
 800fb32:	b29c      	uxth	r4, r3
 800fb34:	4b60      	ldr	r3, [pc, #384]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	2500      	movs	r5, #0
 800fb3e:	9502      	str	r5, [sp, #8]
 800fb40:	2502      	movs	r5, #2
 800fb42:	9501      	str	r5, [sp, #4]
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	0023      	movs	r3, r4
 800fb48:	f7f9 fa88 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // month
		break;
 800fb4c:	e0a8      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_YEARS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fb4e:	4b58      	ldr	r3, [pc, #352]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fb50:	799b      	ldrb	r3, [r3, #6]
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	3303      	adds	r3, #3
 800fb56:	b298      	uxth	r0, r3
 800fb58:	4b56      	ldr	r3, [pc, #344]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fb5a:	7d1b      	ldrb	r3, [r3, #20]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	330f      	adds	r3, #15
 800fb60:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800fb62:	4b53      	ldr	r3, [pc, #332]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fb64:	799b      	ldrb	r3, [r3, #6]
 800fb66:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fb68:	3314      	adds	r3, #20
 800fb6a:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 800fb6c:	4b51      	ldr	r3, [pc, #324]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 800fb72:	330f      	adds	r3, #15
 800fb74:	b29c      	uxth	r4, r3
 800fb76:	4b50      	ldr	r3, [pc, #320]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	2500      	movs	r5, #0
 800fb80:	9502      	str	r5, [sp, #8]
 800fb82:	2502      	movs	r5, #2
 800fb84:	9501      	str	r5, [sp, #4]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	0023      	movs	r3, r4
 800fb8a:	f7f9 fa67 	bl	800905c <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fb8e:	e087      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_LAYOUT:
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fb90:	4b47      	ldr	r3, [pc, #284]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fb92:	79db      	ldrb	r3, [r3, #7]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	3303      	adds	r3, #3
 800fb98:	b298      	uxth	r0, r3
 800fb9a:	4b46      	ldr	r3, [pc, #280]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fb9c:	7e1b      	ldrb	r3, [r3, #24]
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	330f      	adds	r3, #15
 800fba2:	b299      	uxth	r1, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800fba4:	4b42      	ldr	r3, [pc, #264]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fba6:	79db      	ldrb	r3, [r3, #7]
 800fba8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fbaa:	330f      	adds	r3, #15
 800fbac:	b29a      	uxth	r2, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 800fbae:	4b41      	ldr	r3, [pc, #260]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fbb0:	7e1b      	ldrb	r3, [r3, #24]
 800fbb2:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 800fbb4:	330f      	adds	r3, #15
 800fbb6:	b29c      	uxth	r4, r3
 800fbb8:	4b3f      	ldr	r3, [pc, #252]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	2500      	movs	r5, #0
 800fbc2:	9502      	str	r5, [sp, #8]
 800fbc4:	2502      	movs	r5, #2
 800fbc6:	9501      	str	r5, [sp, #4]
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	0023      	movs	r3, r4
 800fbcc:	f7f9 fa46 	bl	800905c <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fbd0:	e066      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_COLOR:
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fbd2:	4b37      	ldr	r3, [pc, #220]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fbd4:	79db      	ldrb	r3, [r3, #7]
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	3303      	adds	r3, #3
 800fbda:	b298      	uxth	r0, r3
 800fbdc:	4b35      	ldr	r3, [pc, #212]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fbde:	7f1b      	ldrb	r3, [r3, #28]
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	330f      	adds	r3, #15
 800fbe4:	b299      	uxth	r1, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800fbe6:	4b32      	ldr	r3, [pc, #200]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fbe8:	79db      	ldrb	r3, [r3, #7]
 800fbea:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fbec:	330f      	adds	r3, #15
 800fbee:	b29a      	uxth	r2, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 800fbf0:	4b30      	ldr	r3, [pc, #192]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fbf2:	7f1b      	ldrb	r3, [r3, #28]
 800fbf4:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 800fbf6:	330f      	adds	r3, #15
 800fbf8:	b29c      	uxth	r4, r3
 800fbfa:	4b2f      	ldr	r3, [pc, #188]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	2500      	movs	r5, #0
 800fc04:	9502      	str	r5, [sp, #8]
 800fc06:	2502      	movs	r5, #2
 800fc08:	9501      	str	r5, [sp, #4]
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	0023      	movs	r3, r4
 800fc0e:	f7f9 fa25 	bl	800905c <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 800fc12:	e045      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_PRESS_REF:
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fc14:	4b26      	ldr	r3, [pc, #152]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fc16:	7a5b      	ldrb	r3, [r3, #9]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	3303      	adds	r3, #3
 800fc1c:	b298      	uxth	r0, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800fc1e:	4b25      	ldr	r3, [pc, #148]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fc20:	2220      	movs	r2, #32
 800fc22:	5c9b      	ldrb	r3, [r3, r2]
 800fc24:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fc26:	330f      	adds	r3, #15
 800fc28:	b299      	uxth	r1, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 800fc2a:	4b21      	ldr	r3, [pc, #132]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fc2c:	7a5b      	ldrb	r3, [r3, #9]
 800fc2e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fc30:	331e      	adds	r3, #30
 800fc32:	b29a      	uxth	r2, r3
				line[LINE_PRESS_REF] + 15, colorSecond, DOT_PIXEL_2X2,
 800fc34:	4b1f      	ldr	r3, [pc, #124]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fc36:	2420      	movs	r4, #32
 800fc38:	5d1b      	ldrb	r3, [r3, r4]
 800fc3a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 800fc3c:	330f      	adds	r3, #15
 800fc3e:	b29c      	uxth	r4, r3
 800fc40:	4b1d      	ldr	r3, [pc, #116]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	2500      	movs	r5, #0
 800fc4a:	9502      	str	r5, [sp, #8]
 800fc4c:	2502      	movs	r5, #2
 800fc4e:	9501      	str	r5, [sp, #4]
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	0023      	movs	r3, r4
 800fc54:	f7f9 fa02 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800fc58:	e022      	b.n	800fca0 <settingsDrawPointer+0x2bc>

	case SETTINGS_TEMP_CMP:
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fc5a:	4b15      	ldr	r3, [pc, #84]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fc5c:	7b1b      	ldrb	r3, [r3, #12]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	3303      	adds	r3, #3
 800fc62:	b298      	uxth	r0, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800fc64:	4b13      	ldr	r3, [pc, #76]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fc66:	2224      	movs	r2, #36	; 0x24
 800fc68:	5c9b      	ldrb	r3, [r3, r2]
 800fc6a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fc6c:	330f      	adds	r3, #15
 800fc6e:	b299      	uxth	r1, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 800fc70:	4b0f      	ldr	r3, [pc, #60]	; (800fcb0 <settingsDrawPointer+0x2cc>)
 800fc72:	7b1b      	ldrb	r3, [r3, #12]
 800fc74:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fc76:	330f      	adds	r3, #15
 800fc78:	b29a      	uxth	r2, r3
				line[LINE_TEMP_CMP] + 15, colorSecond, DOT_PIXEL_2X2,
 800fc7a:	4b0e      	ldr	r3, [pc, #56]	; (800fcb4 <settingsDrawPointer+0x2d0>)
 800fc7c:	2424      	movs	r4, #36	; 0x24
 800fc7e:	5d1b      	ldrb	r3, [r3, r4]
 800fc80:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 800fc82:	330f      	adds	r3, #15
 800fc84:	b29c      	uxth	r4, r3
 800fc86:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <settingsDrawPointer+0x2d4>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	2500      	movs	r5, #0
 800fc90:	9502      	str	r5, [sp, #8]
 800fc92:	2502      	movs	r5, #2
 800fc94:	9501      	str	r5, [sp, #4]
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	0023      	movs	r3, r4
 800fc9a:	f7f9 f9df 	bl	800905c <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 800fc9e:	46c0      	nop			; (mov r8, r8)

	}

}
 800fca0:	46c0      	nop			; (mov r8, r8)
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bdb0      	pop	{r4, r5, r7, pc}
 800fca6:	46c0      	nop			; (mov r8, r8)
 800fca8:	20000319 	.word	0x20000319
 800fcac:	080161a4 	.word	0x080161a4
 800fcb0:	20000070 	.word	0x20000070
 800fcb4:	20000048 	.word	0x20000048
 800fcb8:	20000605 	.word	0x20000605

0800fcbc <timersInit>:
#include "../Timers/timers.h"

void timersInit(void) {
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 800fcc0:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <timersInit+0x2c>)
 800fcc2:	0018      	movs	r0, r3
 800fcc4:	f7f7 fc5c 	bl	8007580 <HAL_TIM_Base_Start_IT>
	counterForce = 0;
 800fcc8:	4b08      	ldr	r3, [pc, #32]	; (800fcec <timersInit+0x30>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	701a      	strb	r2, [r3, #0]
	counterMultiplePress = 0;
 800fcce:	4b08      	ldr	r3, [pc, #32]	; (800fcf0 <timersInit+0x34>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	701a      	strb	r2, [r3, #0]
	flagLocked = UNLOCKED;
 800fcd4:	4b07      	ldr	r3, [pc, #28]	; (800fcf4 <timersInit+0x38>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	701a      	strb	r2, [r3, #0]
	counterSettings = 0;
 800fcda:	4b07      	ldr	r3, [pc, #28]	; (800fcf8 <timersInit+0x3c>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	701a      	strb	r2, [r3, #0]
}
 800fce0:	46c0      	nop			; (mov r8, r8)
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	20000320 	.word	0x20000320
 800fcec:	20000616 	.word	0x20000616
 800fcf0:	2000061c 	.word	0x2000061c
 800fcf4:	2000040f 	.word	0x2000040f
 800fcf8:	200005e9 	.word	0x200005e9

0800fcfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a1c      	ldr	r2, [pc, #112]	; (800fd7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d131      	bne.n	800fd72 <HAL_TIM_PeriodElapsedCallback+0x76>
		if (counterForce < ON_TIME) {
 800fd0e:	4b1c      	ldr	r3, [pc, #112]	; (800fd80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b13      	cmp	r3, #19
 800fd16:	d806      	bhi.n	800fd26 <HAL_TIM_PeriodElapsedCallback+0x2a>
			counterForce++;
 800fd18:	4b19      	ldr	r3, [pc, #100]	; (800fd80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	3301      	adds	r3, #1
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	4b17      	ldr	r3, [pc, #92]	; (800fd80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800fd24:	701a      	strb	r2, [r3, #0]
		}

		counterMultiplePress = 0;
 800fd26:	4b17      	ldr	r3, [pc, #92]	; (800fd84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]

		if (flagSettings == FLAG_SETTINGS_ON) {
 800fd2c:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d11d      	bne.n	800fd72 <HAL_TIM_PeriodElapsedCallback+0x76>
			counterSettings--;
 800fd36:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	4b12      	ldr	r3, [pc, #72]	; (800fd8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800fd42:	701a      	strb	r2, [r3, #0]
			if (counterSettings <= 0) {
 800fd44:	4b11      	ldr	r3, [pc, #68]	; (800fd8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d111      	bne.n	800fd72 <HAL_TIM_PeriodElapsedCallback+0x76>
				flagSettings = FLAG_SETTINGS_OFF;
 800fd4e:	4b0e      	ldr	r3, [pc, #56]	; (800fd88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	701a      	strb	r2, [r3, #0]
				flagDontSleep = 1;
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800fd56:	2201      	movs	r2, #1
 800fd58:	701a      	strb	r2, [r3, #0]
				interfaceSelectColorScheme(colorScheme);
 800fd5a:	4b0e      	ldr	r3, [pc, #56]	; (800fd94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	0018      	movs	r0, r3
 800fd62:	f7fa ffdf 	bl	800ad24 <interfaceSelectColorScheme>
				interfaceSelectLayout(layout);
 800fd66:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	0018      	movs	r0, r3
 800fd6e:	f7fa fb2f 	bl	800a3d0 <interfaceSelectLayout>
			}
		}

	}
}
 800fd72:	46c0      	nop			; (mov r8, r8)
 800fd74:	46bd      	mov	sp, r7
 800fd76:	b002      	add	sp, #8
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	46c0      	nop			; (mov r8, r8)
 800fd7c:	40000400 	.word	0x40000400
 800fd80:	20000616 	.word	0x20000616
 800fd84:	2000061c 	.word	0x2000061c
 800fd88:	200004de 	.word	0x200004de
 800fd8c:	200005e9 	.word	0x200005e9
 800fd90:	20000615 	.word	0x20000615
 800fd94:	20000614 	.word	0x20000614
 800fd98:	2000062f 	.word	0x2000062f

0800fd9c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800fda0:	f7f3 fb28 	bl	80033f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800fda4:	f000 f8f2 	bl	800ff8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800fda8:	f000 fb52 	bl	8010450 <MX_GPIO_Init>
	MX_DMA_Init();
 800fdac:	f000 fb32 	bl	8010414 <MX_DMA_Init>
	MX_I2C1_Init();
 800fdb0:	f000 f9e4 	bl	801017c <MX_I2C1_Init>
	MX_ADC1_Init();
 800fdb4:	f000 f952 	bl	801005c <MX_ADC1_Init>
	MX_RTC_Init();
 800fdb8:	f000 fa20 	bl	80101fc <MX_RTC_Init>
	MX_SPI1_Init();
 800fdbc:	f000 fa94 	bl	80102e8 <MX_SPI1_Init>
	MX_TIM3_Init();
 800fdc0:	f000 fad0 	bl	8010364 <MX_TIM3_Init>

	//EPD test
	//EPD_1in54_V2_test();
	//										INITIALISATION
	//										RTC INITIALISATION
	rtcInit();
 800fdc4:	f7fd fe58 	bl	800da78 <rtcInit>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_LONG,
 800fdc8:	4b62      	ldr	r3, [pc, #392]	; (800ff54 <main+0x1b8>)
 800fdca:	2204      	movs	r2, #4
 800fdcc:	213c      	movs	r1, #60	; 0x3c
 800fdce:	0018      	movs	r0, r3
 800fdd0:	f7f6 ff38 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
	RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

	//										SENSORS INITIALISATION

	sensingInit();
 800fdd4:	f7fe f98a 	bl	800e0ec <sensingInit>

	//										TIMERS INITIALISATION
	timersInit();
 800fdd8:	f7ff ff70 	bl	800fcbc <timersInit>

	//										INTERFACE

	while (batteryLowFlag) {
 800fddc:	e005      	b.n	800fdea <main+0x4e>
		onSleep();
 800fdde:	f000 fbd7 	bl	8010590 <onSleep>
		onWakeUp();
 800fde2:	f000 fbeb 	bl	80105bc <onWakeUp>

		sensingRead();
 800fde6:	f7fe faad 	bl	800e344 <sensingRead>
	while (batteryLowFlag) {
 800fdea:	4b5b      	ldr	r3, [pc, #364]	; (800ff58 <main+0x1bc>)
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1f5      	bne.n	800fdde <main+0x42>
	}

	layout = 2;  //select startup layout and color
 800fdf2:	4b5a      	ldr	r3, [pc, #360]	; (800ff5c <main+0x1c0>)
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	701a      	strb	r2, [r3, #0]
	colorScheme = COLOR_SCHEME_BLACK;
 800fdf8:	4b59      	ldr	r3, [pc, #356]	; (800ff60 <main+0x1c4>)
 800fdfa:	2202      	movs	r2, #2
 800fdfc:	701a      	strb	r2, [r3, #0]

	flagClockConfig = 0;
 800fdfe:	4b59      	ldr	r3, [pc, #356]	; (800ff64 <main+0x1c8>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	701a      	strb	r2, [r3, #0]

	interfaceSelectLayout(layout);  //set layout and color
 800fe04:	4b55      	ldr	r3, [pc, #340]	; (800ff5c <main+0x1c0>)
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	0018      	movs	r0, r3
 800fe0c:	f7fa fae0 	bl	800a3d0 <interfaceSelectLayout>
	interfaceSelectColorScheme(colorScheme);
 800fe10:	4b53      	ldr	r3, [pc, #332]	; (800ff60 <main+0x1c4>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	0018      	movs	r0, r3
 800fe18:	f7fa ff84 	bl	800ad24 <interfaceSelectColorScheme>
	interfaceInit();
 800fe1c:	f7fa ffa6 	bl	800ad6c <interfaceInit>

	interfaceClear();	//clear framebuffer
 800fe20:	f7fb f914 	bl	800b04c <interfaceClear>

	interfaceUpdate(INTERFACE_UPDATE_FULL);	//change update mode
 800fe24:	2000      	movs	r0, #0
 800fe26:	f7fb f8c3 	bl	800afb0 <interfaceUpdate>

	interfaceDrawLayer(1);
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	f7fb f91c 	bl	800b068 <interfaceDrawLayer>
	interfaceDrawLayer(2);
 800fe30:	2002      	movs	r0, #2
 800fe32:	f7fb f919 	bl	800b068 <interfaceDrawLayer>
	interfaceDrawLayer(3);
 800fe36:	2003      	movs	r0, #3
 800fe38:	f7fb f916 	bl	800b068 <interfaceDrawLayer>

	interfaceWrite();
 800fe3c:	f7fb f8e8 	bl	800b010 <interfaceWrite>

	while (1) {

		//									MAIN LOOP

		if (flagClockConfig == 1) {
 800fe40:	4b48      	ldr	r3, [pc, #288]	; (800ff64 <main+0x1c8>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d104      	bne.n	800fe54 <main+0xb8>
			SystemClock_Config();
 800fe4a:	f000 f89f 	bl	800ff8c <SystemClock_Config>
			flagClockConfig = 0;
 800fe4e:	4b45      	ldr	r3, [pc, #276]	; (800ff64 <main+0x1c8>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	701a      	strb	r2, [r3, #0]
		}

		//									SENSING SECTION
		sensingRead();
 800fe54:	f7fe fa76 	bl	800e344 <sensingRead>

		//									RTC SECTION
		rtcGetTime();
 800fe58:	f7fd fe1e 	bl	800da98 <rtcGetTime>

		//									BATTERY SECURE SECTION

		if (batteryLowFlag && !batteryWarningPrintedFlag ) { //run every loop when battery low detected
 800fe5c:	4b3e      	ldr	r3, [pc, #248]	; (800ff58 <main+0x1bc>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00b      	beq.n	800fe7c <main+0xe0>
 800fe64:	4b40      	ldr	r3, [pc, #256]	; (800ff68 <main+0x1cc>)
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d107      	bne.n	800fe7c <main+0xe0>
			interfaceDrawBatteryWarning();
 800fe6c:	f7fd fde0 	bl	800da30 <interfaceDrawBatteryWarning>
			mode = MODE_NORMAL;
 800fe70:	4b3e      	ldr	r3, [pc, #248]	; (800ff6c <main+0x1d0>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	701a      	strb	r2, [r3, #0]
			batteryWarningPrintedFlag = 1;
 800fe76:	4b3c      	ldr	r3, [pc, #240]	; (800ff68 <main+0x1cc>)
 800fe78:	2201      	movs	r2, #1
 800fe7a:	701a      	strb	r2, [r3, #0]
		}

		//									DISPLAY REFRESH SECTION
		if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {	//switch to partial if full was selected
 800fe7c:	4b3c      	ldr	r3, [pc, #240]	; (800ff70 <main+0x1d4>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d102      	bne.n	800fe8c <main+0xf0>
			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
 800fe86:	2001      	movs	r0, #1
 800fe88:	f7fb f892 	bl	800afb0 <interfaceUpdate>
		}
		if (interfaceFullUpdateFlag == 1) {	//switch to full if flag are active. Flag can be set via RESET button
 800fe8c:	4b39      	ldr	r3, [pc, #228]	; (800ff74 <main+0x1d8>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d105      	bne.n	800fea2 <main+0x106>
			interfaceUpdate(INTERFACE_UPDATE_FULL);
 800fe96:	2000      	movs	r0, #0
 800fe98:	f7fb f88a 	bl	800afb0 <interfaceUpdate>
			interfaceFullUpdateFlag = 0;
 800fe9c:	4b35      	ldr	r3, [pc, #212]	; (800ff74 <main+0x1d8>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	701a      	strb	r2, [r3, #0]
		}

		//									NORMAL MODE
		if (flagSettings == FLAG_SETTINGS_OFF && !batteryLowFlag) {
 800fea2:	4b35      	ldr	r3, [pc, #212]	; (800ff78 <main+0x1dc>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d111      	bne.n	800fed0 <main+0x134>
 800feac:	4b2a      	ldr	r3, [pc, #168]	; (800ff58 <main+0x1bc>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10d      	bne.n	800fed0 <main+0x134>

			interfaceClear();	//clear framebuffer
 800feb4:	f7fb f8ca 	bl	800b04c <interfaceClear>
			interfaceDrawLayer(1);
 800feb8:	2001      	movs	r0, #1
 800feba:	f7fb f8d5 	bl	800b068 <interfaceDrawLayer>
			interfaceDrawLayer(2);
 800febe:	2002      	movs	r0, #2
 800fec0:	f7fb f8d2 	bl	800b068 <interfaceDrawLayer>
			interfaceDrawLayer(3);
 800fec4:	2003      	movs	r0, #3
 800fec6:	f7fb f8cf 	bl	800b068 <interfaceDrawLayer>
			interfaceWrite();	//burn framebuffer
 800feca:	f7fb f8a1 	bl	800b010 <interfaceWrite>
 800fece:	e012      	b.n	800fef6 <main+0x15a>

			//								SETTINGS MODE

		} else if (flagSettings == FLAG_SETTINGS_ON && !batteryLowFlag) {
 800fed0:	4b29      	ldr	r3, [pc, #164]	; (800ff78 <main+0x1dc>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d10d      	bne.n	800fef6 <main+0x15a>
 800feda:	4b1f      	ldr	r3, [pc, #124]	; (800ff58 <main+0x1bc>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d109      	bne.n	800fef6 <main+0x15a>

			interfaceClear();	//clear framebuffer
 800fee2:	f7fb f8b3 	bl	800b04c <interfaceClear>
			settingsDrawSubs(); //draw settings interface
 800fee6:	f7ff fd0d 	bl	800f904 <settingsDrawSubs>
			settingsDrawData();
 800feea:	f7ff f9e3 	bl	800f2b4 <settingsDrawData>
			settingsDrawPointer();
 800feee:	f7ff fd79 	bl	800f9e4 <settingsDrawPointer>
			interfaceWrite();	//burn framebuffer
 800fef2:	f7fb f88d 	bl	800b010 <interfaceWrite>
		}

		//									LOW POWER SECTION-SLEEP

		//conditions for sleep mode
		if ((flagSettings == FLAG_SETTINGS_OFF //settings off
 800fef6:	4b20      	ldr	r3, [pc, #128]	; (800ff78 <main+0x1dc>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d124      	bne.n	800ff4a <main+0x1ae>
				&& flagDontSleep != 1 //dont sleep flag inactive
 800ff00:	4b1e      	ldr	r3, [pc, #120]	; (800ff7c <main+0x1e0>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d01f      	beq.n	800ff4a <main+0x1ae>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) //reset dont pressed
 800ff0a:	23a0      	movs	r3, #160	; 0xa0
 800ff0c:	05db      	lsls	r3, r3, #23
 800ff0e:	2110      	movs	r1, #16
 800ff10:	0018      	movs	r0, r3
 800ff12:	f7f4 fe7f 	bl	8004c14 <HAL_GPIO_ReadPin>
 800ff16:	0003      	movs	r3, r0
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d116      	bne.n	800ff4a <main+0x1ae>
				&& !(mode == MODE_CHRONO && chronoMinutes < 1) //if chrono counts more than 1 minute
 800ff1c:	4b13      	ldr	r3, [pc, #76]	; (800ff6c <main+0x1d0>)
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d104      	bne.n	800ff30 <main+0x194>
 800ff26:	4b16      	ldr	r3, [pc, #88]	; (800ff80 <main+0x1e4>)
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	b21b      	sxth	r3, r3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dd0c      	ble.n	800ff4a <main+0x1ae>
				&& LPMode == 1 //if low power mode active
 800ff30:	4b14      	ldr	r3, [pc, #80]	; (800ff84 <main+0x1e8>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d108      	bne.n	800ff4a <main+0x1ae>
				&& counterForce >= ON_TIME) { //force timer inactive
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <main+0x1ec>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b13      	cmp	r3, #19
 800ff40:	d903      	bls.n	800ff4a <main+0x1ae>

			//to do before sleep mode
			onSleep();
 800ff42:	f000 fb25 	bl	8010590 <onSleep>
			//to do after wake up
			onWakeUp();
 800ff46:	f000 fb39 	bl	80105bc <onWakeUp>
		}

		flagDontSleep = 0; // is set via another button, for fast display refresh after pressing
 800ff4a:	4b0c      	ldr	r3, [pc, #48]	; (800ff7c <main+0x1e0>)
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	701a      	strb	r2, [r3, #0]
		if (flagClockConfig == 1) {
 800ff50:	e776      	b.n	800fe40 <main+0xa4>
 800ff52:	46c0      	nop			; (mov r8, r8)
 800ff54:	200006c8 	.word	0x200006c8
 800ff58:	2000010d 	.word	0x2000010d
 800ff5c:	2000062f 	.word	0x2000062f
 800ff60:	20000614 	.word	0x20000614
 800ff64:	20000568 	.word	0x20000568
 800ff68:	200005e8 	.word	0x200005e8
 800ff6c:	20000410 	.word	0x20000410
 800ff70:	2000058c 	.word	0x2000058c
 800ff74:	20000624 	.word	0x20000624
 800ff78:	200004de 	.word	0x200004de
 800ff7c:	20000615 	.word	0x20000615
 800ff80:	20000636 	.word	0x20000636
 800ff84:	20000569 	.word	0x20000569
 800ff88:	20000616 	.word	0x20000616

0800ff8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b093      	sub	sp, #76	; 0x4c
 800ff90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800ff92:	2414      	movs	r4, #20
 800ff94:	193b      	adds	r3, r7, r4
 800ff96:	0018      	movs	r0, r3
 800ff98:	2334      	movs	r3, #52	; 0x34
 800ff9a:	001a      	movs	r2, r3
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	f000 fe6d 	bl	8010c7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800ffa2:	1d3b      	adds	r3, r7, #4
 800ffa4:	0018      	movs	r0, r3
 800ffa6:	2310      	movs	r3, #16
 800ffa8:	001a      	movs	r2, r3
 800ffaa:	2100      	movs	r1, #0
 800ffac:	f000 fe66 	bl	8010c7c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ffb0:	2380      	movs	r3, #128	; 0x80
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	0018      	movs	r0, r3
 800ffb6:	f7f5 fcc3 	bl	8005940 <HAL_PWREx_ControlVoltageScaling>
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800ffba:	f7f5 fc7b 	bl	80058b4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800ffbe:	4b26      	ldr	r3, [pc, #152]	; (8010058 <SystemClock_Config+0xcc>)
 800ffc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffc2:	4b25      	ldr	r3, [pc, #148]	; (8010058 <SystemClock_Config+0xcc>)
 800ffc4:	2118      	movs	r1, #24
 800ffc6:	438a      	bics	r2, r1
 800ffc8:	65da      	str	r2, [r3, #92]	; 0x5c
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800ffca:	193b      	adds	r3, r7, r4
 800ffcc:	2206      	movs	r2, #6
 800ffce:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ffd0:	193b      	adds	r3, r7, r4
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ffd6:	193b      	adds	r3, r7, r4
 800ffd8:	2280      	movs	r2, #128	; 0x80
 800ffda:	0052      	lsls	r2, r2, #1
 800ffdc:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800ffde:	0021      	movs	r1, r4
 800ffe0:	187b      	adds	r3, r7, r1
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ffe6:	187b      	adds	r3, r7, r1
 800ffe8:	2240      	movs	r2, #64	; 0x40
 800ffea:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ffec:	187b      	adds	r3, r7, r1
 800ffee:	2202      	movs	r2, #2
 800fff0:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800fff2:	187b      	adds	r3, r7, r1
 800fff4:	2202      	movs	r2, #2
 800fff6:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800fff8:	187b      	adds	r3, r7, r1
 800fffa:	2200      	movs	r2, #0
 800fffc:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 800fffe:	187b      	adds	r3, r7, r1
 8010000:	2208      	movs	r2, #8
 8010002:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010004:	187b      	adds	r3, r7, r1
 8010006:	2280      	movs	r2, #128	; 0x80
 8010008:	0292      	lsls	r2, r2, #10
 801000a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801000c:	187b      	adds	r3, r7, r1
 801000e:	2280      	movs	r2, #128	; 0x80
 8010010:	0592      	lsls	r2, r2, #22
 8010012:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8010014:	187b      	adds	r3, r7, r1
 8010016:	0018      	movs	r0, r3
 8010018:	f7f5 fcd2 	bl	80059c0 <HAL_RCC_OscConfig>
 801001c:	1e03      	subs	r3, r0, #0
 801001e:	d001      	beq.n	8010024 <SystemClock_Config+0x98>
		Error_Handler();
 8010020:	f000 fade 	bl	80105e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8010024:	1d3b      	adds	r3, r7, #4
 8010026:	2207      	movs	r2, #7
 8010028:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801002a:	1d3b      	adds	r3, r7, #4
 801002c:	2202      	movs	r2, #2
 801002e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010030:	1d3b      	adds	r3, r7, #4
 8010032:	2200      	movs	r2, #0
 8010034:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010036:	1d3b      	adds	r3, r7, #4
 8010038:	2200      	movs	r2, #0
 801003a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 801003c:	1d3b      	adds	r3, r7, #4
 801003e:	2102      	movs	r1, #2
 8010040:	0018      	movs	r0, r3
 8010042:	f7f5 ffd3 	bl	8005fec <HAL_RCC_ClockConfig>
 8010046:	1e03      	subs	r3, r0, #0
 8010048:	d001      	beq.n	801004e <SystemClock_Config+0xc2>
		Error_Handler();
 801004a:	f000 fac9 	bl	80105e0 <Error_Handler>
	}
}
 801004e:	46c0      	nop			; (mov r8, r8)
 8010050:	46bd      	mov	sp, r7
 8010052:	b013      	add	sp, #76	; 0x4c
 8010054:	bd90      	pop	{r4, r7, pc}
 8010056:	46c0      	nop			; (mov r8, r8)
 8010058:	40021000 	.word	0x40021000

0801005c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8010062:	1d3b      	adds	r3, r7, #4
 8010064:	0018      	movs	r0, r3
 8010066:	230c      	movs	r3, #12
 8010068:	001a      	movs	r2, r3
 801006a:	2100      	movs	r1, #0
 801006c:	f000 fe06 	bl	8010c7c <memset>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8010070:	4b3e      	ldr	r3, [pc, #248]	; (801016c <MX_ADC1_Init+0x110>)
 8010072:	4a3f      	ldr	r2, [pc, #252]	; (8010170 <MX_ADC1_Init+0x114>)
 8010074:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8010076:	4b3d      	ldr	r3, [pc, #244]	; (801016c <MX_ADC1_Init+0x110>)
 8010078:	2280      	movs	r2, #128	; 0x80
 801007a:	05d2      	lsls	r2, r2, #23
 801007c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801007e:	4b3b      	ldr	r3, [pc, #236]	; (801016c <MX_ADC1_Init+0x110>)
 8010080:	2200      	movs	r2, #0
 8010082:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010084:	4b39      	ldr	r3, [pc, #228]	; (801016c <MX_ADC1_Init+0x110>)
 8010086:	2200      	movs	r2, #0
 8010088:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801008a:	4b38      	ldr	r3, [pc, #224]	; (801016c <MX_ADC1_Init+0x110>)
 801008c:	2280      	movs	r2, #128	; 0x80
 801008e:	0392      	lsls	r2, r2, #14
 8010090:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010092:	4b36      	ldr	r3, [pc, #216]	; (801016c <MX_ADC1_Init+0x110>)
 8010094:	2208      	movs	r2, #8
 8010096:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8010098:	4b34      	ldr	r3, [pc, #208]	; (801016c <MX_ADC1_Init+0x110>)
 801009a:	2200      	movs	r2, #0
 801009c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 801009e:	4b33      	ldr	r3, [pc, #204]	; (801016c <MX_ADC1_Init+0x110>)
 80100a0:	2200      	movs	r2, #0
 80100a2:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80100a4:	4b31      	ldr	r3, [pc, #196]	; (801016c <MX_ADC1_Init+0x110>)
 80100a6:	2201      	movs	r2, #1
 80100a8:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 3;
 80100aa:	4b30      	ldr	r3, [pc, #192]	; (801016c <MX_ADC1_Init+0x110>)
 80100ac:	2203      	movs	r2, #3
 80100ae:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80100b0:	4b2e      	ldr	r3, [pc, #184]	; (801016c <MX_ADC1_Init+0x110>)
 80100b2:	2220      	movs	r2, #32
 80100b4:	2100      	movs	r1, #0
 80100b6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80100b8:	4b2c      	ldr	r3, [pc, #176]	; (801016c <MX_ADC1_Init+0x110>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80100be:	4b2b      	ldr	r3, [pc, #172]	; (801016c <MX_ADC1_Init+0x110>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80100c4:	4b29      	ldr	r3, [pc, #164]	; (801016c <MX_ADC1_Init+0x110>)
 80100c6:	222c      	movs	r2, #44	; 0x2c
 80100c8:	2100      	movs	r1, #0
 80100ca:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80100cc:	4b27      	ldr	r3, [pc, #156]	; (801016c <MX_ADC1_Init+0x110>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80100d2:	4b26      	ldr	r3, [pc, #152]	; (801016c <MX_ADC1_Init+0x110>)
 80100d4:	2204      	movs	r2, #4
 80100d6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 80100d8:	4b24      	ldr	r3, [pc, #144]	; (801016c <MX_ADC1_Init+0x110>)
 80100da:	2204      	movs	r2, #4
 80100dc:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 80100de:	4b23      	ldr	r3, [pc, #140]	; (801016c <MX_ADC1_Init+0x110>)
 80100e0:	223c      	movs	r2, #60	; 0x3c
 80100e2:	2100      	movs	r1, #0
 80100e4:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80100e6:	4b21      	ldr	r3, [pc, #132]	; (801016c <MX_ADC1_Init+0x110>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80100ec:	4b1f      	ldr	r3, [pc, #124]	; (801016c <MX_ADC1_Init+0x110>)
 80100ee:	0018      	movs	r0, r3
 80100f0:	f7f3 fb8c 	bl	800380c <HAL_ADC_Init>
 80100f4:	1e03      	subs	r3, r0, #0
 80100f6:	d001      	beq.n	80100fc <MX_ADC1_Init+0xa0>
		Error_Handler();
 80100f8:	f000 fa72 	bl	80105e0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80100fc:	1d3b      	adds	r3, r7, #4
 80100fe:	4a1d      	ldr	r2, [pc, #116]	; (8010174 <MX_ADC1_Init+0x118>)
 8010100:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8010102:	1d3b      	adds	r3, r7, #4
 8010104:	2200      	movs	r2, #0
 8010106:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8010108:	1d3b      	adds	r3, r7, #4
 801010a:	2200      	movs	r2, #0
 801010c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 801010e:	1d3a      	adds	r2, r7, #4
 8010110:	4b16      	ldr	r3, [pc, #88]	; (801016c <MX_ADC1_Init+0x110>)
 8010112:	0011      	movs	r1, r2
 8010114:	0018      	movs	r0, r3
 8010116:	f7f3 fdfd 	bl	8003d14 <HAL_ADC_ConfigChannel>
 801011a:	1e03      	subs	r3, r0, #0
 801011c:	d001      	beq.n	8010122 <MX_ADC1_Init+0xc6>
		Error_Handler();
 801011e:	f000 fa5f 	bl	80105e0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8010122:	1d3b      	adds	r3, r7, #4
 8010124:	2201      	movs	r2, #1
 8010126:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8010128:	1d3b      	adds	r3, r7, #4
 801012a:	2204      	movs	r2, #4
 801012c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 801012e:	1d3a      	adds	r2, r7, #4
 8010130:	4b0e      	ldr	r3, [pc, #56]	; (801016c <MX_ADC1_Init+0x110>)
 8010132:	0011      	movs	r1, r2
 8010134:	0018      	movs	r0, r3
 8010136:	f7f3 fded 	bl	8003d14 <HAL_ADC_ConfigChannel>
 801013a:	1e03      	subs	r3, r0, #0
 801013c:	d001      	beq.n	8010142 <MX_ADC1_Init+0xe6>
		Error_Handler();
 801013e:	f000 fa4f 	bl	80105e0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8010142:	1d3b      	adds	r3, r7, #4
 8010144:	4a0c      	ldr	r2, [pc, #48]	; (8010178 <MX_ADC1_Init+0x11c>)
 8010146:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8010148:	1d3b      	adds	r3, r7, #4
 801014a:	2208      	movs	r2, #8
 801014c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 801014e:	1d3a      	adds	r2, r7, #4
 8010150:	4b06      	ldr	r3, [pc, #24]	; (801016c <MX_ADC1_Init+0x110>)
 8010152:	0011      	movs	r1, r2
 8010154:	0018      	movs	r0, r3
 8010156:	f7f3 fddd 	bl	8003d14 <HAL_ADC_ConfigChannel>
 801015a:	1e03      	subs	r3, r0, #0
 801015c:	d001      	beq.n	8010162 <MX_ADC1_Init+0x106>
		Error_Handler();
 801015e:	f000 fa3f 	bl	80105e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8010162:	46c0      	nop			; (mov r8, r8)
 8010164:	46bd      	mov	sp, r7
 8010166:	b004      	add	sp, #16
 8010168:	bd80      	pop	{r7, pc}
 801016a:	46c0      	nop			; (mov r8, r8)
 801016c:	200003a8 	.word	0x200003a8
 8010170:	40012400 	.word	0x40012400
 8010174:	04000002 	.word	0x04000002
 8010178:	14000020 	.word	0x14000020

0801017c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8010180:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <MX_I2C1_Init+0x74>)
 8010182:	4a1c      	ldr	r2, [pc, #112]	; (80101f4 <MX_I2C1_Init+0x78>)
 8010184:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8010186:	4b1a      	ldr	r3, [pc, #104]	; (80101f0 <MX_I2C1_Init+0x74>)
 8010188:	4a1b      	ldr	r2, [pc, #108]	; (80101f8 <MX_I2C1_Init+0x7c>)
 801018a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 801018c:	4b18      	ldr	r3, [pc, #96]	; (80101f0 <MX_I2C1_Init+0x74>)
 801018e:	2200      	movs	r2, #0
 8010190:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010192:	4b17      	ldr	r3, [pc, #92]	; (80101f0 <MX_I2C1_Init+0x74>)
 8010194:	2201      	movs	r2, #1
 8010196:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010198:	4b15      	ldr	r3, [pc, #84]	; (80101f0 <MX_I2C1_Init+0x74>)
 801019a:	2200      	movs	r2, #0
 801019c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 801019e:	4b14      	ldr	r3, [pc, #80]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80101a4:	4b12      	ldr	r3, [pc, #72]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80101aa:	4b11      	ldr	r3, [pc, #68]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80101b0:	4b0f      	ldr	r3, [pc, #60]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80101b6:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101b8:	0018      	movs	r0, r3
 80101ba:	f7f4 fd99 	bl	8004cf0 <HAL_I2C_Init>
 80101be:	1e03      	subs	r3, r0, #0
 80101c0:	d001      	beq.n	80101c6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80101c2:	f000 fa0d 	bl	80105e0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80101c6:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101c8:	2100      	movs	r1, #0
 80101ca:	0018      	movs	r0, r3
 80101cc:	f7f5 fada 	bl	8005784 <HAL_I2CEx_ConfigAnalogFilter>
 80101d0:	1e03      	subs	r3, r0, #0
 80101d2:	d001      	beq.n	80101d8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80101d4:	f000 fa04 	bl	80105e0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80101d8:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <MX_I2C1_Init+0x74>)
 80101da:	2100      	movs	r1, #0
 80101dc:	0018      	movs	r0, r3
 80101de:	f7f5 fb1d 	bl	800581c <HAL_I2CEx_ConfigDigitalFilter>
 80101e2:	1e03      	subs	r3, r0, #0
 80101e4:	d001      	beq.n	80101ea <MX_I2C1_Init+0x6e>
		Error_Handler();
 80101e6:	f000 f9fb 	bl	80105e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80101ea:	46c0      	nop			; (mov r8, r8)
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	20000160 	.word	0x20000160
 80101f4:	40005400 	.word	0x40005400
 80101f8:	00303d5b 	.word	0x00303d5b

080101fc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8010202:	1d3b      	adds	r3, r7, #4
 8010204:	0018      	movs	r0, r3
 8010206:	2314      	movs	r3, #20
 8010208:	001a      	movs	r2, r3
 801020a:	2100      	movs	r1, #0
 801020c:	f000 fd36 	bl	8010c7c <memset>
	RTC_DateTypeDef sDate = { 0 };
 8010210:	003b      	movs	r3, r7
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8010216:	4b32      	ldr	r3, [pc, #200]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010218:	4a32      	ldr	r2, [pc, #200]	; (80102e4 <MX_RTC_Init+0xe8>)
 801021a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801021c:	4b30      	ldr	r3, [pc, #192]	; (80102e0 <MX_RTC_Init+0xe4>)
 801021e:	2200      	movs	r2, #0
 8010220:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8010222:	4b2f      	ldr	r3, [pc, #188]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010224:	227f      	movs	r2, #127	; 0x7f
 8010226:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8010228:	4b2d      	ldr	r3, [pc, #180]	; (80102e0 <MX_RTC_Init+0xe4>)
 801022a:	22ff      	movs	r2, #255	; 0xff
 801022c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801022e:	4b2c      	ldr	r3, [pc, #176]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010230:	2200      	movs	r2, #0
 8010232:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010234:	4b2a      	ldr	r3, [pc, #168]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010236:	2200      	movs	r2, #0
 8010238:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801023a:	4b29      	ldr	r3, [pc, #164]	; (80102e0 <MX_RTC_Init+0xe4>)
 801023c:	2200      	movs	r2, #0
 801023e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010240:	4b27      	ldr	r3, [pc, #156]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010242:	2280      	movs	r2, #128	; 0x80
 8010244:	05d2      	lsls	r2, r2, #23
 8010246:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8010248:	4b25      	ldr	r3, [pc, #148]	; (80102e0 <MX_RTC_Init+0xe4>)
 801024a:	2200      	movs	r2, #0
 801024c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 801024e:	4b24      	ldr	r3, [pc, #144]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010250:	0018      	movs	r0, r3
 8010252:	f7f6 f989 	bl	8006568 <HAL_RTC_Init>
 8010256:	1e03      	subs	r3, r0, #0
 8010258:	d001      	beq.n	801025e <MX_RTC_Init+0x62>
		Error_Handler();
 801025a:	f000 f9c1 	bl	80105e0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 10;
 801025e:	1d3b      	adds	r3, r7, #4
 8010260:	220a      	movs	r2, #10
 8010262:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 10;
 8010264:	1d3b      	adds	r3, r7, #4
 8010266:	220a      	movs	r2, #10
 8010268:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 801026a:	1d3b      	adds	r3, r7, #4
 801026c:	2200      	movs	r2, #0
 801026e:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 8010270:	1d3b      	adds	r3, r7, #4
 8010272:	2200      	movs	r2, #0
 8010274:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010276:	1d3b      	adds	r3, r7, #4
 8010278:	2200      	movs	r2, #0
 801027a:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801027c:	1d3b      	adds	r3, r7, #4
 801027e:	2200      	movs	r2, #0
 8010280:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8010282:	1d39      	adds	r1, r7, #4
 8010284:	4b16      	ldr	r3, [pc, #88]	; (80102e0 <MX_RTC_Init+0xe4>)
 8010286:	2200      	movs	r2, #0
 8010288:	0018      	movs	r0, r3
 801028a:	f7f6 fa03 	bl	8006694 <HAL_RTC_SetTime>
 801028e:	1e03      	subs	r3, r0, #0
 8010290:	d001      	beq.n	8010296 <MX_RTC_Init+0x9a>
		Error_Handler();
 8010292:	f000 f9a5 	bl	80105e0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8010296:	003b      	movs	r3, r7
 8010298:	2202      	movs	r2, #2
 801029a:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 801029c:	003b      	movs	r3, r7
 801029e:	2204      	movs	r2, #4
 80102a0:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 80102a2:	003b      	movs	r3, r7
 80102a4:	2214      	movs	r2, #20
 80102a6:	709a      	strb	r2, [r3, #2]
	sDate.Year = 20;
 80102a8:	003b      	movs	r3, r7
 80102aa:	2214      	movs	r2, #20
 80102ac:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80102ae:	0039      	movs	r1, r7
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <MX_RTC_Init+0xe4>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	0018      	movs	r0, r3
 80102b6:	f7f6 faf1 	bl	800689c <HAL_RTC_SetDate>
 80102ba:	1e03      	subs	r3, r0, #0
 80102bc:	d001      	beq.n	80102c2 <MX_RTC_Init+0xc6>
		Error_Handler();
 80102be:	f000 f98f 	bl	80105e0 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS)
 80102c2:	4b07      	ldr	r3, [pc, #28]	; (80102e0 <MX_RTC_Init+0xe4>)
 80102c4:	2204      	movs	r2, #4
 80102c6:	213c      	movs	r1, #60	; 0x3c
 80102c8:	0018      	movs	r0, r3
 80102ca:	f7f6 fcbb 	bl	8006c44 <HAL_RTCEx_SetWakeUpTimer_IT>
 80102ce:	1e03      	subs	r3, r0, #0
 80102d0:	d001      	beq.n	80102d6 <MX_RTC_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80102d2:	f000 f985 	bl	80105e0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80102d6:	46c0      	nop			; (mov r8, r8)
 80102d8:	46bd      	mov	sp, r7
 80102da:	b006      	add	sp, #24
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	46c0      	nop			; (mov r8, r8)
 80102e0:	200006c8 	.word	0x200006c8
 80102e4:	40002800 	.word	0x40002800

080102e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80102e8:	b580      	push	{r7, lr}
 80102ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80102ec:	4b1b      	ldr	r3, [pc, #108]	; (801035c <MX_SPI1_Init+0x74>)
 80102ee:	4a1c      	ldr	r2, [pc, #112]	; (8010360 <MX_SPI1_Init+0x78>)
 80102f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80102f2:	4b1a      	ldr	r3, [pc, #104]	; (801035c <MX_SPI1_Init+0x74>)
 80102f4:	2282      	movs	r2, #130	; 0x82
 80102f6:	0052      	lsls	r2, r2, #1
 80102f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80102fa:	4b18      	ldr	r3, [pc, #96]	; (801035c <MX_SPI1_Init+0x74>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010300:	4b16      	ldr	r3, [pc, #88]	; (801035c <MX_SPI1_Init+0x74>)
 8010302:	22e0      	movs	r2, #224	; 0xe0
 8010304:	00d2      	lsls	r2, r2, #3
 8010306:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010308:	4b14      	ldr	r3, [pc, #80]	; (801035c <MX_SPI1_Init+0x74>)
 801030a:	2200      	movs	r2, #0
 801030c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801030e:	4b13      	ldr	r3, [pc, #76]	; (801035c <MX_SPI1_Init+0x74>)
 8010310:	2200      	movs	r2, #0
 8010312:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8010314:	4b11      	ldr	r3, [pc, #68]	; (801035c <MX_SPI1_Init+0x74>)
 8010316:	2280      	movs	r2, #128	; 0x80
 8010318:	0092      	lsls	r2, r2, #2
 801031a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801031c:	4b0f      	ldr	r3, [pc, #60]	; (801035c <MX_SPI1_Init+0x74>)
 801031e:	2218      	movs	r2, #24
 8010320:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010322:	4b0e      	ldr	r3, [pc, #56]	; (801035c <MX_SPI1_Init+0x74>)
 8010324:	2200      	movs	r2, #0
 8010326:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010328:	4b0c      	ldr	r3, [pc, #48]	; (801035c <MX_SPI1_Init+0x74>)
 801032a:	2200      	movs	r2, #0
 801032c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801032e:	4b0b      	ldr	r3, [pc, #44]	; (801035c <MX_SPI1_Init+0x74>)
 8010330:	2200      	movs	r2, #0
 8010332:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8010334:	4b09      	ldr	r3, [pc, #36]	; (801035c <MX_SPI1_Init+0x74>)
 8010336:	2207      	movs	r2, #7
 8010338:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801033a:	4b08      	ldr	r3, [pc, #32]	; (801035c <MX_SPI1_Init+0x74>)
 801033c:	2200      	movs	r2, #0
 801033e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010340:	4b06      	ldr	r3, [pc, #24]	; (801035c <MX_SPI1_Init+0x74>)
 8010342:	2208      	movs	r2, #8
 8010344:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8010346:	4b05      	ldr	r3, [pc, #20]	; (801035c <MX_SPI1_Init+0x74>)
 8010348:	0018      	movs	r0, r3
 801034a:	f7f6 fd3b 	bl	8006dc4 <HAL_SPI_Init>
 801034e:	1e03      	subs	r3, r0, #0
 8010350:	d001      	beq.n	8010356 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8010352:	f000 f945 	bl	80105e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8010356:	46c0      	nop			; (mov r8, r8)
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	200006f4 	.word	0x200006f4
 8010360:	40013000 	.word	0x40013000

08010364 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 801036a:	2310      	movs	r3, #16
 801036c:	18fb      	adds	r3, r7, r3
 801036e:	0018      	movs	r0, r3
 8010370:	2310      	movs	r3, #16
 8010372:	001a      	movs	r2, r3
 8010374:	2100      	movs	r1, #0
 8010376:	f000 fc81 	bl	8010c7c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 801037a:	1d3b      	adds	r3, r7, #4
 801037c:	0018      	movs	r0, r3
 801037e:	230c      	movs	r3, #12
 8010380:	001a      	movs	r2, r3
 8010382:	2100      	movs	r1, #0
 8010384:	f000 fc7a 	bl	8010c7c <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8010388:	4b1e      	ldr	r3, [pc, #120]	; (8010404 <MX_TIM3_Init+0xa0>)
 801038a:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <MX_TIM3_Init+0xa4>)
 801038c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3199;
 801038e:	4b1d      	ldr	r3, [pc, #116]	; (8010404 <MX_TIM3_Init+0xa0>)
 8010390:	4a1e      	ldr	r2, [pc, #120]	; (801040c <MX_TIM3_Init+0xa8>)
 8010392:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010394:	4b1b      	ldr	r3, [pc, #108]	; (8010404 <MX_TIM3_Init+0xa0>)
 8010396:	2200      	movs	r2, #0
 8010398:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 801039a:	4b1a      	ldr	r3, [pc, #104]	; (8010404 <MX_TIM3_Init+0xa0>)
 801039c:	4a1c      	ldr	r2, [pc, #112]	; (8010410 <MX_TIM3_Init+0xac>)
 801039e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80103a0:	4b18      	ldr	r3, [pc, #96]	; (8010404 <MX_TIM3_Init+0xa0>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80103a6:	4b17      	ldr	r3, [pc, #92]	; (8010404 <MX_TIM3_Init+0xa0>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80103ac:	4b15      	ldr	r3, [pc, #84]	; (8010404 <MX_TIM3_Init+0xa0>)
 80103ae:	0018      	movs	r0, r3
 80103b0:	f7f7 f88e 	bl	80074d0 <HAL_TIM_Base_Init>
 80103b4:	1e03      	subs	r3, r0, #0
 80103b6:	d001      	beq.n	80103bc <MX_TIM3_Init+0x58>
		Error_Handler();
 80103b8:	f000 f912 	bl	80105e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80103bc:	2110      	movs	r1, #16
 80103be:	187b      	adds	r3, r7, r1
 80103c0:	2280      	movs	r2, #128	; 0x80
 80103c2:	0152      	lsls	r2, r2, #5
 80103c4:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80103c6:	187a      	adds	r2, r7, r1
 80103c8:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <MX_TIM3_Init+0xa0>)
 80103ca:	0011      	movs	r1, r2
 80103cc:	0018      	movs	r0, r3
 80103ce:	f7f7 fa5f 	bl	8007890 <HAL_TIM_ConfigClockSource>
 80103d2:	1e03      	subs	r3, r0, #0
 80103d4:	d001      	beq.n	80103da <MX_TIM3_Init+0x76>
		Error_Handler();
 80103d6:	f000 f903 	bl	80105e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80103da:	1d3b      	adds	r3, r7, #4
 80103dc:	2200      	movs	r2, #0
 80103de:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80103e0:	1d3b      	adds	r3, r7, #4
 80103e2:	2200      	movs	r2, #0
 80103e4:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80103e6:	1d3a      	adds	r2, r7, #4
 80103e8:	4b06      	ldr	r3, [pc, #24]	; (8010404 <MX_TIM3_Init+0xa0>)
 80103ea:	0011      	movs	r1, r2
 80103ec:	0018      	movs	r0, r3
 80103ee:	f7f7 fc4d 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 80103f2:	1e03      	subs	r3, r0, #0
 80103f4:	d001      	beq.n	80103fa <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80103f6:	f000 f8f3 	bl	80105e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	46bd      	mov	sp, r7
 80103fe:	b008      	add	sp, #32
 8010400:	bd80      	pop	{r7, pc}
 8010402:	46c0      	nop			; (mov r8, r8)
 8010404:	20000320 	.word	0x20000320
 8010408:	40000400 	.word	0x40000400
 801040c:	00000c7f 	.word	0x00000c7f
 8010410:	00004e1f 	.word	0x00004e1f

08010414 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 801041a:	4b0c      	ldr	r3, [pc, #48]	; (801044c <MX_DMA_Init+0x38>)
 801041c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801041e:	4b0b      	ldr	r3, [pc, #44]	; (801044c <MX_DMA_Init+0x38>)
 8010420:	2101      	movs	r1, #1
 8010422:	430a      	orrs	r2, r1
 8010424:	639a      	str	r2, [r3, #56]	; 0x38
 8010426:	4b09      	ldr	r3, [pc, #36]	; (801044c <MX_DMA_Init+0x38>)
 8010428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801042a:	2201      	movs	r2, #1
 801042c:	4013      	ands	r3, r2
 801042e:	607b      	str	r3, [r7, #4]
 8010430:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8010432:	2200      	movs	r2, #0
 8010434:	2100      	movs	r1, #0
 8010436:	2009      	movs	r0, #9
 8010438:	f7f4 f804 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801043c:	2009      	movs	r0, #9
 801043e:	f7f4 f816 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8010442:	46c0      	nop			; (mov r8, r8)
 8010444:	46bd      	mov	sp, r7
 8010446:	b002      	add	sp, #8
 8010448:	bd80      	pop	{r7, pc}
 801044a:	46c0      	nop			; (mov r8, r8)
 801044c:	40021000 	.word	0x40021000

08010450 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8010450:	b590      	push	{r4, r7, lr}
 8010452:	b089      	sub	sp, #36	; 0x24
 8010454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8010456:	240c      	movs	r4, #12
 8010458:	193b      	adds	r3, r7, r4
 801045a:	0018      	movs	r0, r3
 801045c:	2314      	movs	r3, #20
 801045e:	001a      	movs	r2, r3
 8010460:	2100      	movs	r1, #0
 8010462:	f000 fc0b 	bl	8010c7c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8010466:	4b48      	ldr	r3, [pc, #288]	; (8010588 <MX_GPIO_Init+0x138>)
 8010468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801046a:	4b47      	ldr	r3, [pc, #284]	; (8010588 <MX_GPIO_Init+0x138>)
 801046c:	2104      	movs	r1, #4
 801046e:	430a      	orrs	r2, r1
 8010470:	635a      	str	r2, [r3, #52]	; 0x34
 8010472:	4b45      	ldr	r3, [pc, #276]	; (8010588 <MX_GPIO_Init+0x138>)
 8010474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010476:	2204      	movs	r2, #4
 8010478:	4013      	ands	r3, r2
 801047a:	60bb      	str	r3, [r7, #8]
 801047c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801047e:	4b42      	ldr	r3, [pc, #264]	; (8010588 <MX_GPIO_Init+0x138>)
 8010480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010482:	4b41      	ldr	r3, [pc, #260]	; (8010588 <MX_GPIO_Init+0x138>)
 8010484:	2101      	movs	r1, #1
 8010486:	430a      	orrs	r2, r1
 8010488:	635a      	str	r2, [r3, #52]	; 0x34
 801048a:	4b3f      	ldr	r3, [pc, #252]	; (8010588 <MX_GPIO_Init+0x138>)
 801048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801048e:	2201      	movs	r2, #1
 8010490:	4013      	ands	r3, r2
 8010492:	607b      	str	r3, [r7, #4]
 8010494:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8010496:	4b3c      	ldr	r3, [pc, #240]	; (8010588 <MX_GPIO_Init+0x138>)
 8010498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801049a:	4b3b      	ldr	r3, [pc, #236]	; (8010588 <MX_GPIO_Init+0x138>)
 801049c:	2102      	movs	r1, #2
 801049e:	430a      	orrs	r2, r1
 80104a0:	635a      	str	r2, [r3, #52]	; 0x34
 80104a2:	4b39      	ldr	r3, [pc, #228]	; (8010588 <MX_GPIO_Init+0x138>)
 80104a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104a6:	2202      	movs	r2, #2
 80104a8:	4013      	ands	r3, r2
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 80104ae:	23e0      	movs	r3, #224	; 0xe0
 80104b0:	00d9      	lsls	r1, r3, #3
 80104b2:	23a0      	movs	r3, #160	; 0xa0
 80104b4:	05db      	lsls	r3, r3, #23
 80104b6:	2200      	movs	r2, #0
 80104b8:	0018      	movs	r0, r3
 80104ba:	f7f4 fbc8 	bl	8004c4e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80104be:	4b33      	ldr	r3, [pc, #204]	; (801058c <MX_GPIO_Init+0x13c>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	2140      	movs	r1, #64	; 0x40
 80104c4:	0018      	movs	r0, r3
 80104c6:	f7f4 fbc2 	bl	8004c4e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_Pin SET_Pin RESET_Pin */
	GPIO_InitStruct.Pin = START_Pin | SET_Pin | RESET_Pin;
 80104ca:	193b      	adds	r3, r7, r4
 80104cc:	221c      	movs	r2, #28
 80104ce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80104d0:	193b      	adds	r3, r7, r4
 80104d2:	2284      	movs	r2, #132	; 0x84
 80104d4:	0392      	lsls	r2, r2, #14
 80104d6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80104d8:	193b      	adds	r3, r7, r4
 80104da:	2201      	movs	r2, #1
 80104dc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104de:	193a      	adds	r2, r7, r4
 80104e0:	23a0      	movs	r3, #160	; 0xa0
 80104e2:	05db      	lsls	r3, r3, #23
 80104e4:	0011      	movs	r1, r2
 80104e6:	0018      	movs	r0, r3
 80104e8:	f7f4 fa30 	bl	800494c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_CS_Pin DC_Pin RST_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin | DC_Pin | RST_Pin;
 80104ec:	0021      	movs	r1, r4
 80104ee:	187b      	adds	r3, r7, r1
 80104f0:	22e0      	movs	r2, #224	; 0xe0
 80104f2:	00d2      	lsls	r2, r2, #3
 80104f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80104f6:	000c      	movs	r4, r1
 80104f8:	193b      	adds	r3, r7, r4
 80104fa:	2201      	movs	r2, #1
 80104fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104fe:	193b      	adds	r3, r7, r4
 8010500:	2200      	movs	r2, #0
 8010502:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010504:	193b      	adds	r3, r7, r4
 8010506:	2200      	movs	r2, #0
 8010508:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801050a:	193a      	adds	r2, r7, r4
 801050c:	23a0      	movs	r3, #160	; 0xa0
 801050e:	05db      	lsls	r3, r3, #23
 8010510:	0011      	movs	r1, r2
 8010512:	0018      	movs	r0, r3
 8010514:	f7f4 fa1a 	bl	800494c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSY_Pin */
	GPIO_InitStruct.Pin = BUSY_Pin;
 8010518:	193b      	adds	r3, r7, r4
 801051a:	2280      	movs	r2, #128	; 0x80
 801051c:	0152      	lsls	r2, r2, #5
 801051e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010520:	193b      	adds	r3, r7, r4
 8010522:	2200      	movs	r2, #0
 8010524:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010526:	193b      	adds	r3, r7, r4
 8010528:	2200      	movs	r2, #0
 801052a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 801052c:	193a      	adds	r2, r7, r4
 801052e:	23a0      	movs	r3, #160	; 0xa0
 8010530:	05db      	lsls	r3, r3, #23
 8010532:	0011      	movs	r1, r2
 8010534:	0018      	movs	r0, r3
 8010536:	f7f4 fa09 	bl	800494c <HAL_GPIO_Init>

	/*Configure GPIO pin : STATUS_Pin */
	GPIO_InitStruct.Pin = STATUS_Pin;
 801053a:	0021      	movs	r1, r4
 801053c:	187b      	adds	r3, r7, r1
 801053e:	2240      	movs	r2, #64	; 0x40
 8010540:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010542:	187b      	adds	r3, r7, r1
 8010544:	2201      	movs	r2, #1
 8010546:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010548:	187b      	adds	r3, r7, r1
 801054a:	2200      	movs	r2, #0
 801054c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801054e:	187b      	adds	r3, r7, r1
 8010550:	2200      	movs	r2, #0
 8010552:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8010554:	187b      	adds	r3, r7, r1
 8010556:	4a0d      	ldr	r2, [pc, #52]	; (801058c <MX_GPIO_Init+0x13c>)
 8010558:	0019      	movs	r1, r3
 801055a:	0010      	movs	r0, r2
 801055c:	f7f4 f9f6 	bl	800494c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8010560:	2200      	movs	r2, #0
 8010562:	2102      	movs	r1, #2
 8010564:	2006      	movs	r0, #6
 8010566:	f7f3 ff6d 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 801056a:	2006      	movs	r0, #6
 801056c:	f7f3 ff7f 	bl	800446e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8010570:	2200      	movs	r2, #0
 8010572:	2102      	movs	r1, #2
 8010574:	2007      	movs	r0, #7
 8010576:	f7f3 ff65 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 801057a:	2007      	movs	r0, #7
 801057c:	f7f3 ff77 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8010580:	46c0      	nop			; (mov r8, r8)
 8010582:	46bd      	mov	sp, r7
 8010584:	b009      	add	sp, #36	; 0x24
 8010586:	bd90      	pop	{r4, r7, pc}
 8010588:	40021000 	.word	0x40021000
 801058c:	50000400 	.word	0x50000400

08010590 <onSleep>:

/* USER CODE BEGIN 4 */
void onSleep(void) {
 8010590:	b580      	push	{r7, lr}
 8010592:	af00      	add	r7, sp, #0
	//			EPD_1IN54_V2_Sleep();
	//			DEV_Module_Exit();
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 0);
 8010594:	4b08      	ldr	r3, [pc, #32]	; (80105b8 <onSleep+0x28>)
 8010596:	2200      	movs	r2, #0
 8010598:	2140      	movs	r1, #64	; 0x40
 801059a:	0018      	movs	r0, r3
 801059c:	f7f4 fb57 	bl	8004c4e <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 80105a0:	f7f2 ffd2 	bl	8003548 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80105a4:	2380      	movs	r3, #128	; 0x80
 80105a6:	01db      	lsls	r3, r3, #7
 80105a8:	2101      	movs	r1, #1
 80105aa:	0018      	movs	r0, r3
 80105ac:	f7f5 f990 	bl	80058d0 <HAL_PWR_EnterSTOPMode>
	//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
}
 80105b0:	46c0      	nop			; (mov r8, r8)
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	46c0      	nop			; (mov r8, r8)
 80105b8:	50000400 	.word	0x50000400

080105bc <onWakeUp>:
void onWakeUp(void) {
 80105bc:	b580      	push	{r7, lr}
 80105be:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 80105c0:	f7f2 ffd0 	bl	8003564 <HAL_ResumeTick>
	SystemClock_Config();
 80105c4:	f7ff fce2 	bl	800ff8c <SystemClock_Config>
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 1);
 80105c8:	4b04      	ldr	r3, [pc, #16]	; (80105dc <onWakeUp+0x20>)
 80105ca:	2201      	movs	r2, #1
 80105cc:	2140      	movs	r1, #64	; 0x40
 80105ce:	0018      	movs	r0, r3
 80105d0:	f7f4 fb3d 	bl	8004c4e <HAL_GPIO_WritePin>
	//			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
	//			DEV_Module_Init();
	//			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
}
 80105d4:	46c0      	nop			; (mov r8, r8)
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	46c0      	nop			; (mov r8, r8)
 80105dc:	50000400 	.word	0x50000400

080105e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80105e4:	46c0      	nop			; (mov r8, r8)
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80105f2:	4b11      	ldr	r3, [pc, #68]	; (8010638 <HAL_MspInit+0x4c>)
 80105f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105f6:	4b10      	ldr	r3, [pc, #64]	; (8010638 <HAL_MspInit+0x4c>)
 80105f8:	2101      	movs	r1, #1
 80105fa:	430a      	orrs	r2, r1
 80105fc:	641a      	str	r2, [r3, #64]	; 0x40
 80105fe:	4b0e      	ldr	r3, [pc, #56]	; (8010638 <HAL_MspInit+0x4c>)
 8010600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010602:	2201      	movs	r2, #1
 8010604:	4013      	ands	r3, r2
 8010606:	607b      	str	r3, [r7, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801060a:	4b0b      	ldr	r3, [pc, #44]	; (8010638 <HAL_MspInit+0x4c>)
 801060c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801060e:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <HAL_MspInit+0x4c>)
 8010610:	2180      	movs	r1, #128	; 0x80
 8010612:	0549      	lsls	r1, r1, #21
 8010614:	430a      	orrs	r2, r1
 8010616:	63da      	str	r2, [r3, #60]	; 0x3c
 8010618:	4b07      	ldr	r3, [pc, #28]	; (8010638 <HAL_MspInit+0x4c>)
 801061a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801061c:	2380      	movs	r3, #128	; 0x80
 801061e:	055b      	lsls	r3, r3, #21
 8010620:	4013      	ands	r3, r2
 8010622:	603b      	str	r3, [r7, #0]
 8010624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8010626:	23c0      	movs	r3, #192	; 0xc0
 8010628:	00db      	lsls	r3, r3, #3
 801062a:	0018      	movs	r0, r3
 801062c:	f7f2 ffa8 	bl	8003580 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010630:	46c0      	nop			; (mov r8, r8)
 8010632:	46bd      	mov	sp, r7
 8010634:	b002      	add	sp, #8
 8010636:	bd80      	pop	{r7, pc}
 8010638:	40021000 	.word	0x40021000

0801063c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801063c:	b590      	push	{r4, r7, lr}
 801063e:	b091      	sub	sp, #68	; 0x44
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010644:	232c      	movs	r3, #44	; 0x2c
 8010646:	18fb      	adds	r3, r7, r3
 8010648:	0018      	movs	r0, r3
 801064a:	2314      	movs	r3, #20
 801064c:	001a      	movs	r2, r3
 801064e:	2100      	movs	r1, #0
 8010650:	f000 fb14 	bl	8010c7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010654:	2410      	movs	r4, #16
 8010656:	193b      	adds	r3, r7, r4
 8010658:	0018      	movs	r0, r3
 801065a:	231c      	movs	r3, #28
 801065c:	001a      	movs	r2, r3
 801065e:	2100      	movs	r1, #0
 8010660:	f000 fb0c 	bl	8010c7c <memset>
  if(hadc->Instance==ADC1)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a36      	ldr	r2, [pc, #216]	; (8010744 <HAL_ADC_MspInit+0x108>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d165      	bne.n	801073a <HAL_ADC_MspInit+0xfe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 801066e:	193b      	adds	r3, r7, r4
 8010670:	2280      	movs	r2, #128	; 0x80
 8010672:	01d2      	lsls	r2, r2, #7
 8010674:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8010676:	193b      	adds	r3, r7, r4
 8010678:	2280      	movs	r2, #128	; 0x80
 801067a:	0612      	lsls	r2, r2, #24
 801067c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801067e:	193b      	adds	r3, r7, r4
 8010680:	0018      	movs	r0, r3
 8010682:	f7f5 fe3d 	bl	8006300 <HAL_RCCEx_PeriphCLKConfig>
 8010686:	1e03      	subs	r3, r0, #0
 8010688:	d001      	beq.n	801068e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 801068a:	f7ff ffa9 	bl	80105e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801068e:	4b2e      	ldr	r3, [pc, #184]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 8010690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010692:	4b2d      	ldr	r3, [pc, #180]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 8010694:	2180      	movs	r1, #128	; 0x80
 8010696:	0349      	lsls	r1, r1, #13
 8010698:	430a      	orrs	r2, r1
 801069a:	641a      	str	r2, [r3, #64]	; 0x40
 801069c:	4b2a      	ldr	r3, [pc, #168]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 801069e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80106a0:	2380      	movs	r3, #128	; 0x80
 80106a2:	035b      	lsls	r3, r3, #13
 80106a4:	4013      	ands	r3, r2
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106aa:	4b27      	ldr	r3, [pc, #156]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 80106ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106ae:	4b26      	ldr	r3, [pc, #152]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 80106b0:	2101      	movs	r1, #1
 80106b2:	430a      	orrs	r2, r1
 80106b4:	635a      	str	r2, [r3, #52]	; 0x34
 80106b6:	4b24      	ldr	r3, [pc, #144]	; (8010748 <HAL_ADC_MspInit+0x10c>)
 80106b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ba:	2201      	movs	r2, #1
 80106bc:	4013      	ands	r3, r2
 80106be:	60bb      	str	r3, [r7, #8]
 80106c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PASSIVE_Pin|BATT_Pin|ACTIVE_Pin;
 80106c2:	212c      	movs	r1, #44	; 0x2c
 80106c4:	187b      	adds	r3, r7, r1
 80106c6:	2223      	movs	r2, #35	; 0x23
 80106c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80106ca:	187b      	adds	r3, r7, r1
 80106cc:	2203      	movs	r2, #3
 80106ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106d0:	187b      	adds	r3, r7, r1
 80106d2:	2200      	movs	r2, #0
 80106d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106d6:	187a      	adds	r2, r7, r1
 80106d8:	23a0      	movs	r3, #160	; 0xa0
 80106da:	05db      	lsls	r3, r3, #23
 80106dc:	0011      	movs	r1, r2
 80106de:	0018      	movs	r0, r3
 80106e0:	f7f4 f934 	bl	800494c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80106e4:	4b19      	ldr	r3, [pc, #100]	; (801074c <HAL_ADC_MspInit+0x110>)
 80106e6:	4a1a      	ldr	r2, [pc, #104]	; (8010750 <HAL_ADC_MspInit+0x114>)
 80106e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80106ea:	4b18      	ldr	r3, [pc, #96]	; (801074c <HAL_ADC_MspInit+0x110>)
 80106ec:	2205      	movs	r2, #5
 80106ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80106f0:	4b16      	ldr	r3, [pc, #88]	; (801074c <HAL_ADC_MspInit+0x110>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80106f6:	4b15      	ldr	r3, [pc, #84]	; (801074c <HAL_ADC_MspInit+0x110>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80106fc:	4b13      	ldr	r3, [pc, #76]	; (801074c <HAL_ADC_MspInit+0x110>)
 80106fe:	2280      	movs	r2, #128	; 0x80
 8010700:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010702:	4b12      	ldr	r3, [pc, #72]	; (801074c <HAL_ADC_MspInit+0x110>)
 8010704:	2280      	movs	r2, #128	; 0x80
 8010706:	0052      	lsls	r2, r2, #1
 8010708:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801070a:	4b10      	ldr	r3, [pc, #64]	; (801074c <HAL_ADC_MspInit+0x110>)
 801070c:	2280      	movs	r2, #128	; 0x80
 801070e:	00d2      	lsls	r2, r2, #3
 8010710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010712:	4b0e      	ldr	r3, [pc, #56]	; (801074c <HAL_ADC_MspInit+0x110>)
 8010714:	2220      	movs	r2, #32
 8010716:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8010718:	4b0c      	ldr	r3, [pc, #48]	; (801074c <HAL_ADC_MspInit+0x110>)
 801071a:	2200      	movs	r2, #0
 801071c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801071e:	4b0b      	ldr	r3, [pc, #44]	; (801074c <HAL_ADC_MspInit+0x110>)
 8010720:	0018      	movs	r0, r3
 8010722:	f7f3 fec1 	bl	80044a8 <HAL_DMA_Init>
 8010726:	1e03      	subs	r3, r0, #0
 8010728:	d001      	beq.n	801072e <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 801072a:	f7ff ff59 	bl	80105e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4a06      	ldr	r2, [pc, #24]	; (801074c <HAL_ADC_MspInit+0x110>)
 8010732:	651a      	str	r2, [r3, #80]	; 0x50
 8010734:	4b05      	ldr	r3, [pc, #20]	; (801074c <HAL_ADC_MspInit+0x110>)
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801073a:	46c0      	nop			; (mov r8, r8)
 801073c:	46bd      	mov	sp, r7
 801073e:	b011      	add	sp, #68	; 0x44
 8010740:	bd90      	pop	{r4, r7, pc}
 8010742:	46c0      	nop			; (mov r8, r8)
 8010744:	40012400 	.word	0x40012400
 8010748:	40021000 	.word	0x40021000
 801074c:	2000066c 	.word	0x2000066c
 8010750:	40020008 	.word	0x40020008

08010754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010754:	b590      	push	{r4, r7, lr}
 8010756:	b091      	sub	sp, #68	; 0x44
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801075c:	232c      	movs	r3, #44	; 0x2c
 801075e:	18fb      	adds	r3, r7, r3
 8010760:	0018      	movs	r0, r3
 8010762:	2314      	movs	r3, #20
 8010764:	001a      	movs	r2, r3
 8010766:	2100      	movs	r1, #0
 8010768:	f000 fa88 	bl	8010c7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801076c:	2410      	movs	r4, #16
 801076e:	193b      	adds	r3, r7, r4
 8010770:	0018      	movs	r0, r3
 8010772:	231c      	movs	r3, #28
 8010774:	001a      	movs	r2, r3
 8010776:	2100      	movs	r1, #0
 8010778:	f000 fa80 	bl	8010c7c <memset>
  if(hi2c->Instance==I2C1)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a23      	ldr	r2, [pc, #140]	; (8010810 <HAL_I2C_MspInit+0xbc>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d13f      	bne.n	8010806 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8010786:	193b      	adds	r3, r7, r4
 8010788:	2220      	movs	r2, #32
 801078a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 801078c:	193b      	adds	r3, r7, r4
 801078e:	2280      	movs	r2, #128	; 0x80
 8010790:	0192      	lsls	r2, r2, #6
 8010792:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010794:	193b      	adds	r3, r7, r4
 8010796:	0018      	movs	r0, r3
 8010798:	f7f5 fdb2 	bl	8006300 <HAL_RCCEx_PeriphCLKConfig>
 801079c:	1e03      	subs	r3, r0, #0
 801079e:	d001      	beq.n	80107a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80107a0:	f7ff ff1e 	bl	80105e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80107a4:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107a8:	4b1a      	ldr	r3, [pc, #104]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107aa:	2102      	movs	r1, #2
 80107ac:	430a      	orrs	r2, r1
 80107ae:	635a      	str	r2, [r3, #52]	; 0x34
 80107b0:	4b18      	ldr	r3, [pc, #96]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b4:	2202      	movs	r2, #2
 80107b6:	4013      	ands	r3, r2
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80107bc:	212c      	movs	r1, #44	; 0x2c
 80107be:	187b      	adds	r3, r7, r1
 80107c0:	22c0      	movs	r2, #192	; 0xc0
 80107c2:	0052      	lsls	r2, r2, #1
 80107c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80107c6:	187b      	adds	r3, r7, r1
 80107c8:	2212      	movs	r2, #18
 80107ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80107cc:	187b      	adds	r3, r7, r1
 80107ce:	2201      	movs	r2, #1
 80107d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107d2:	187b      	adds	r3, r7, r1
 80107d4:	2200      	movs	r2, #0
 80107d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80107d8:	187b      	adds	r3, r7, r1
 80107da:	2206      	movs	r2, #6
 80107dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80107de:	187b      	adds	r3, r7, r1
 80107e0:	4a0d      	ldr	r2, [pc, #52]	; (8010818 <HAL_I2C_MspInit+0xc4>)
 80107e2:	0019      	movs	r1, r3
 80107e4:	0010      	movs	r0, r2
 80107e6:	f7f4 f8b1 	bl	800494c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80107ea:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107ee:	4b09      	ldr	r3, [pc, #36]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107f0:	2180      	movs	r1, #128	; 0x80
 80107f2:	0389      	lsls	r1, r1, #14
 80107f4:	430a      	orrs	r2, r1
 80107f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80107f8:	4b06      	ldr	r3, [pc, #24]	; (8010814 <HAL_I2C_MspInit+0xc0>)
 80107fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107fc:	2380      	movs	r3, #128	; 0x80
 80107fe:	039b      	lsls	r3, r3, #14
 8010800:	4013      	ands	r3, r2
 8010802:	60bb      	str	r3, [r7, #8]
 8010804:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8010806:	46c0      	nop			; (mov r8, r8)
 8010808:	46bd      	mov	sp, r7
 801080a:	b011      	add	sp, #68	; 0x44
 801080c:	bd90      	pop	{r4, r7, pc}
 801080e:	46c0      	nop			; (mov r8, r8)
 8010810:	40005400 	.word	0x40005400
 8010814:	40021000 	.word	0x40021000
 8010818:	50000400 	.word	0x50000400

0801081c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801081c:	b590      	push	{r4, r7, lr}
 801081e:	b08b      	sub	sp, #44	; 0x2c
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010824:	240c      	movs	r4, #12
 8010826:	193b      	adds	r3, r7, r4
 8010828:	0018      	movs	r0, r3
 801082a:	231c      	movs	r3, #28
 801082c:	001a      	movs	r2, r3
 801082e:	2100      	movs	r1, #0
 8010830:	f000 fa24 	bl	8010c7c <memset>
  if(hrtc->Instance==RTC)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4a19      	ldr	r2, [pc, #100]	; (80108a0 <HAL_RTC_MspInit+0x84>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d12c      	bne.n	8010898 <HAL_RTC_MspInit+0x7c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801083e:	193b      	adds	r3, r7, r4
 8010840:	2280      	movs	r2, #128	; 0x80
 8010842:	0292      	lsls	r2, r2, #10
 8010844:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8010846:	193b      	adds	r3, r7, r4
 8010848:	2280      	movs	r2, #128	; 0x80
 801084a:	0052      	lsls	r2, r2, #1
 801084c:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801084e:	193b      	adds	r3, r7, r4
 8010850:	0018      	movs	r0, r3
 8010852:	f7f5 fd55 	bl	8006300 <HAL_RCCEx_PeriphCLKConfig>
 8010856:	1e03      	subs	r3, r0, #0
 8010858:	d001      	beq.n	801085e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 801085a:	f7ff fec1 	bl	80105e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801085e:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <HAL_RTC_MspInit+0x88>)
 8010860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010862:	4b10      	ldr	r3, [pc, #64]	; (80108a4 <HAL_RTC_MspInit+0x88>)
 8010864:	2180      	movs	r1, #128	; 0x80
 8010866:	0209      	lsls	r1, r1, #8
 8010868:	430a      	orrs	r2, r1
 801086a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801086c:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <HAL_RTC_MspInit+0x88>)
 801086e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010870:	4b0c      	ldr	r3, [pc, #48]	; (80108a4 <HAL_RTC_MspInit+0x88>)
 8010872:	2180      	movs	r1, #128	; 0x80
 8010874:	00c9      	lsls	r1, r1, #3
 8010876:	430a      	orrs	r2, r1
 8010878:	63da      	str	r2, [r3, #60]	; 0x3c
 801087a:	4b0a      	ldr	r3, [pc, #40]	; (80108a4 <HAL_RTC_MspInit+0x88>)
 801087c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801087e:	2380      	movs	r3, #128	; 0x80
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	4013      	ands	r3, r2
 8010884:	60bb      	str	r3, [r7, #8]
 8010886:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 1, 0);
 8010888:	2200      	movs	r2, #0
 801088a:	2101      	movs	r1, #1
 801088c:	2002      	movs	r0, #2
 801088e:	f7f3 fdd9 	bl	8004444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8010892:	2002      	movs	r0, #2
 8010894:	f7f3 fdeb 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010898:	46c0      	nop			; (mov r8, r8)
 801089a:	46bd      	mov	sp, r7
 801089c:	b00b      	add	sp, #44	; 0x2c
 801089e:	bd90      	pop	{r4, r7, pc}
 80108a0:	40002800 	.word	0x40002800
 80108a4:	40021000 	.word	0x40021000

080108a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b08b      	sub	sp, #44	; 0x2c
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108b0:	2414      	movs	r4, #20
 80108b2:	193b      	adds	r3, r7, r4
 80108b4:	0018      	movs	r0, r3
 80108b6:	2314      	movs	r3, #20
 80108b8:	001a      	movs	r2, r3
 80108ba:	2100      	movs	r1, #0
 80108bc:	f000 f9de 	bl	8010c7c <memset>
  if(hspi->Instance==SPI1)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a2c      	ldr	r2, [pc, #176]	; (8010978 <HAL_SPI_MspInit+0xd0>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d151      	bne.n	801096e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80108ca:	4b2c      	ldr	r3, [pc, #176]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80108ce:	4b2b      	ldr	r3, [pc, #172]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108d0:	2180      	movs	r1, #128	; 0x80
 80108d2:	0149      	lsls	r1, r1, #5
 80108d4:	430a      	orrs	r2, r1
 80108d6:	641a      	str	r2, [r3, #64]	; 0x40
 80108d8:	4b28      	ldr	r3, [pc, #160]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80108dc:	2380      	movs	r3, #128	; 0x80
 80108de:	015b      	lsls	r3, r3, #5
 80108e0:	4013      	ands	r3, r2
 80108e2:	613b      	str	r3, [r7, #16]
 80108e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108e6:	4b25      	ldr	r3, [pc, #148]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ea:	4b24      	ldr	r3, [pc, #144]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108ec:	2101      	movs	r1, #1
 80108ee:	430a      	orrs	r2, r1
 80108f0:	635a      	str	r2, [r3, #52]	; 0x34
 80108f2:	4b22      	ldr	r3, [pc, #136]	; (801097c <HAL_SPI_MspInit+0xd4>)
 80108f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f6:	2201      	movs	r2, #1
 80108f8:	4013      	ands	r3, r2
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80108fe:	4b1f      	ldr	r3, [pc, #124]	; (801097c <HAL_SPI_MspInit+0xd4>)
 8010900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010902:	4b1e      	ldr	r3, [pc, #120]	; (801097c <HAL_SPI_MspInit+0xd4>)
 8010904:	2102      	movs	r1, #2
 8010906:	430a      	orrs	r2, r1
 8010908:	635a      	str	r2, [r3, #52]	; 0x34
 801090a:	4b1c      	ldr	r3, [pc, #112]	; (801097c <HAL_SPI_MspInit+0xd4>)
 801090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090e:	2202      	movs	r2, #2
 8010910:	4013      	ands	r3, r2
 8010912:	60bb      	str	r3, [r7, #8]
 8010914:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010916:	193b      	adds	r3, r7, r4
 8010918:	2280      	movs	r2, #128	; 0x80
 801091a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801091c:	193b      	adds	r3, r7, r4
 801091e:	2202      	movs	r2, #2
 8010920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010922:	193b      	adds	r3, r7, r4
 8010924:	2200      	movs	r2, #0
 8010926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010928:	193b      	adds	r3, r7, r4
 801092a:	2202      	movs	r2, #2
 801092c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801092e:	193b      	adds	r3, r7, r4
 8010930:	2200      	movs	r2, #0
 8010932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010934:	193a      	adds	r2, r7, r4
 8010936:	23a0      	movs	r3, #160	; 0xa0
 8010938:	05db      	lsls	r3, r3, #23
 801093a:	0011      	movs	r1, r2
 801093c:	0018      	movs	r0, r3
 801093e:	f7f4 f805 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010942:	0021      	movs	r1, r4
 8010944:	187b      	adds	r3, r7, r1
 8010946:	2208      	movs	r2, #8
 8010948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801094a:	187b      	adds	r3, r7, r1
 801094c:	2202      	movs	r2, #2
 801094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010950:	187b      	adds	r3, r7, r1
 8010952:	2200      	movs	r2, #0
 8010954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010956:	187b      	adds	r3, r7, r1
 8010958:	2202      	movs	r2, #2
 801095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801095c:	187b      	adds	r3, r7, r1
 801095e:	2200      	movs	r2, #0
 8010960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010962:	187b      	adds	r3, r7, r1
 8010964:	4a06      	ldr	r2, [pc, #24]	; (8010980 <HAL_SPI_MspInit+0xd8>)
 8010966:	0019      	movs	r1, r3
 8010968:	0010      	movs	r0, r2
 801096a:	f7f3 ffef 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801096e:	46c0      	nop			; (mov r8, r8)
 8010970:	46bd      	mov	sp, r7
 8010972:	b00b      	add	sp, #44	; 0x2c
 8010974:	bd90      	pop	{r4, r7, pc}
 8010976:	46c0      	nop			; (mov r8, r8)
 8010978:	40013000 	.word	0x40013000
 801097c:	40021000 	.word	0x40021000
 8010980:	50000400 	.word	0x50000400

08010984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a0d      	ldr	r2, [pc, #52]	; (80109c8 <HAL_TIM_Base_MspInit+0x44>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d113      	bne.n	80109be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010996:	4b0d      	ldr	r3, [pc, #52]	; (80109cc <HAL_TIM_Base_MspInit+0x48>)
 8010998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801099a:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <HAL_TIM_Base_MspInit+0x48>)
 801099c:	2102      	movs	r1, #2
 801099e:	430a      	orrs	r2, r1
 80109a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80109a2:	4b0a      	ldr	r3, [pc, #40]	; (80109cc <HAL_TIM_Base_MspInit+0x48>)
 80109a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a6:	2202      	movs	r2, #2
 80109a8:	4013      	ands	r3, r2
 80109aa:	60fb      	str	r3, [r7, #12]
 80109ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80109ae:	2200      	movs	r2, #0
 80109b0:	2100      	movs	r1, #0
 80109b2:	2010      	movs	r0, #16
 80109b4:	f7f3 fd46 	bl	8004444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80109b8:	2010      	movs	r0, #16
 80109ba:	f7f3 fd58 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80109be:	46c0      	nop			; (mov r8, r8)
 80109c0:	46bd      	mov	sp, r7
 80109c2:	b004      	add	sp, #16
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	40000400 	.word	0x40000400
 80109cc:	40021000 	.word	0x40021000

080109d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80109d4:	e7fe      	b.n	80109d4 <NMI_Handler+0x4>

080109d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80109da:	e7fe      	b.n	80109da <HardFault_Handler+0x4>

080109dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80109e0:	46c0      	nop			; (mov r8, r8)
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80109f4:	f7f2 fd68 	bl	80034c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80109f8:	46c0      	nop			; (mov r8, r8)
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
	...

08010a00 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8010a04:	4b03      	ldr	r3, [pc, #12]	; (8010a14 <RTC_TAMP_IRQHandler+0x14>)
 8010a06:	0018      	movs	r0, r3
 8010a08:	f7f6 f9b6 	bl	8006d78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8010a0c:	46c0      	nop			; (mov r8, r8)
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	46c0      	nop			; (mov r8, r8)
 8010a14:	200006c8 	.word	0x200006c8

08010a18 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8010a1c:	2004      	movs	r0, #4
 8010a1e:	f7f4 f933 	bl	8004c88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SET_Pin);
 8010a22:	2008      	movs	r0, #8
 8010a24:	f7f4 f930 	bl	8004c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8010a28:	46c0      	nop			; (mov r8, r8)
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8010a32:	2010      	movs	r0, #16
 8010a34:	f7f4 f928 	bl	8004c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8010a38:	46c0      	nop			; (mov r8, r8)
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010a44:	4b03      	ldr	r3, [pc, #12]	; (8010a54 <DMA1_Channel1_IRQHandler+0x14>)
 8010a46:	0018      	movs	r0, r3
 8010a48:	f7f3 fe3e 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8010a4c:	46c0      	nop			; (mov r8, r8)
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	46c0      	nop			; (mov r8, r8)
 8010a54:	2000066c 	.word	0x2000066c

08010a58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010a5c:	4b03      	ldr	r3, [pc, #12]	; (8010a6c <TIM3_IRQHandler+0x14>)
 8010a5e:	0018      	movs	r0, r3
 8010a60:	f7f6 fde4 	bl	800762c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8010a64:	46c0      	nop			; (mov r8, r8)
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	46c0      	nop			; (mov r8, r8)
 8010a6c:	20000320 	.word	0x20000320

08010a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	617b      	str	r3, [r7, #20]
 8010a80:	e00a      	b.n	8010a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010a82:	e000      	b.n	8010a86 <_read+0x16>
 8010a84:	bf00      	nop
 8010a86:	0001      	movs	r1, r0
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	1c5a      	adds	r2, r3, #1
 8010a8c:	60ba      	str	r2, [r7, #8]
 8010a8e:	b2ca      	uxtb	r2, r1
 8010a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	3301      	adds	r3, #1
 8010a96:	617b      	str	r3, [r7, #20]
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	dbf0      	blt.n	8010a82 <_read+0x12>
	}

return len;
 8010aa0:	687b      	ldr	r3, [r7, #4]
}
 8010aa2:	0018      	movs	r0, r3
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	b006      	add	sp, #24
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b086      	sub	sp, #24
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	60f8      	str	r0, [r7, #12]
 8010ab2:	60b9      	str	r1, [r7, #8]
 8010ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	617b      	str	r3, [r7, #20]
 8010aba:	e009      	b.n	8010ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	60ba      	str	r2, [r7, #8]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	0018      	movs	r0, r3
 8010ac6:	e000      	b.n	8010aca <_write+0x20>
 8010ac8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	3301      	adds	r3, #1
 8010ace:	617b      	str	r3, [r7, #20]
 8010ad0:	697a      	ldr	r2, [r7, #20]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	dbf1      	blt.n	8010abc <_write+0x12>
	}
	return len;
 8010ad8:	687b      	ldr	r3, [r7, #4]
}
 8010ada:	0018      	movs	r0, r3
 8010adc:	46bd      	mov	sp, r7
 8010ade:	b006      	add	sp, #24
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <_close>:

int _close(int file)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b082      	sub	sp, #8
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8010aea:	2301      	movs	r3, #1
 8010aec:	425b      	negs	r3, r3
}
 8010aee:	0018      	movs	r0, r3
 8010af0:	46bd      	mov	sp, r7
 8010af2:	b002      	add	sp, #8
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b082      	sub	sp, #8
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2280      	movs	r2, #128	; 0x80
 8010b04:	0192      	lsls	r2, r2, #6
 8010b06:	605a      	str	r2, [r3, #4]
	return 0;
 8010b08:	2300      	movs	r3, #0
}
 8010b0a:	0018      	movs	r0, r3
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	b002      	add	sp, #8
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <_isatty>:

int _isatty(int file)
{
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b082      	sub	sp, #8
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
	return 1;
 8010b1a:	2301      	movs	r3, #1
}
 8010b1c:	0018      	movs	r0, r3
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	b002      	add	sp, #8
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	0018      	movs	r0, r3
 8010b34:	46bd      	mov	sp, r7
 8010b36:	b004      	add	sp, #16
 8010b38:	bd80      	pop	{r7, pc}
	...

08010b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010b44:	4a14      	ldr	r2, [pc, #80]	; (8010b98 <_sbrk+0x5c>)
 8010b46:	4b15      	ldr	r3, [pc, #84]	; (8010b9c <_sbrk+0x60>)
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010b50:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <_sbrk+0x64>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d102      	bne.n	8010b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010b58:	4b11      	ldr	r3, [pc, #68]	; (8010ba0 <_sbrk+0x64>)
 8010b5a:	4a12      	ldr	r2, [pc, #72]	; (8010ba4 <_sbrk+0x68>)
 8010b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010b5e:	4b10      	ldr	r3, [pc, #64]	; (8010ba0 <_sbrk+0x64>)
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	18d3      	adds	r3, r2, r3
 8010b66:	693a      	ldr	r2, [r7, #16]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d207      	bcs.n	8010b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010b6c:	f000 f852 	bl	8010c14 <__errno>
 8010b70:	0003      	movs	r3, r0
 8010b72:	220c      	movs	r2, #12
 8010b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010b76:	2301      	movs	r3, #1
 8010b78:	425b      	negs	r3, r3
 8010b7a:	e009      	b.n	8010b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010b7c:	4b08      	ldr	r3, [pc, #32]	; (8010ba0 <_sbrk+0x64>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010b82:	4b07      	ldr	r3, [pc, #28]	; (8010ba0 <_sbrk+0x64>)
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	18d2      	adds	r2, r2, r3
 8010b8a:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <_sbrk+0x64>)
 8010b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
}
 8010b90:	0018      	movs	r0, r3
 8010b92:	46bd      	mov	sp, r7
 8010b94:	b006      	add	sp, #24
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20009000 	.word	0x20009000
 8010b9c:	00000400 	.word	0x00000400
 8010ba0:	20000118 	.word	0x20000118
 8010ba4:	20000768 	.word	0x20000768

08010ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010bac:	4b03      	ldr	r3, [pc, #12]	; (8010bbc <SystemInit+0x14>)
 8010bae:	2280      	movs	r2, #128	; 0x80
 8010bb0:	0512      	lsls	r2, r2, #20
 8010bb2:	609a      	str	r2, [r3, #8]
#endif
}
 8010bb4:	46c0      	nop			; (mov r8, r8)
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	46c0      	nop			; (mov r8, r8)
 8010bbc:	e000ed00 	.word	0xe000ed00

08010bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010bc0:	480d      	ldr	r0, [pc, #52]	; (8010bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010bc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8010bc4:	f7ff fff0 	bl	8010ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010bc8:	480c      	ldr	r0, [pc, #48]	; (8010bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8010bca:	490d      	ldr	r1, [pc, #52]	; (8010c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010bcc:	4a0d      	ldr	r2, [pc, #52]	; (8010c04 <LoopForever+0xe>)
  movs r3, #0
 8010bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010bd0:	e002      	b.n	8010bd8 <LoopCopyDataInit>

08010bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010bd6:	3304      	adds	r3, #4

08010bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010bdc:	d3f9      	bcc.n	8010bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010bde:	4a0a      	ldr	r2, [pc, #40]	; (8010c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010be0:	4c0a      	ldr	r4, [pc, #40]	; (8010c0c <LoopForever+0x16>)
  movs r3, #0
 8010be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010be4:	e001      	b.n	8010bea <LoopFillZerobss>

08010be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010be8:	3204      	adds	r2, #4

08010bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010bec:	d3fb      	bcc.n	8010be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8010bee:	f000 f817 	bl	8010c20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8010bf2:	f7ff f8d3 	bl	800fd9c <main>

08010bf6 <LoopForever>:

LoopForever:
  b LoopForever
 8010bf6:	e7fe      	b.n	8010bf6 <LoopForever>
  ldr   r0, =_estack
 8010bf8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8010bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010c00:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8010c04:	08016500 	.word	0x08016500
  ldr r2, =_sbss
 8010c08:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8010c0c:	20000768 	.word	0x20000768

08010c10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8010c10:	e7fe      	b.n	8010c10 <ADC1_IRQHandler>
	...

08010c14 <__errno>:
 8010c14:	4b01      	ldr	r3, [pc, #4]	; (8010c1c <__errno+0x8>)
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	4770      	bx	lr
 8010c1a:	46c0      	nop			; (mov r8, r8)
 8010c1c:	20000088 	.word	0x20000088

08010c20 <__libc_init_array>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	2600      	movs	r6, #0
 8010c24:	4d0c      	ldr	r5, [pc, #48]	; (8010c58 <__libc_init_array+0x38>)
 8010c26:	4c0d      	ldr	r4, [pc, #52]	; (8010c5c <__libc_init_array+0x3c>)
 8010c28:	1b64      	subs	r4, r4, r5
 8010c2a:	10a4      	asrs	r4, r4, #2
 8010c2c:	42a6      	cmp	r6, r4
 8010c2e:	d109      	bne.n	8010c44 <__libc_init_array+0x24>
 8010c30:	2600      	movs	r6, #0
 8010c32:	f002 fe8d 	bl	8013950 <_init>
 8010c36:	4d0a      	ldr	r5, [pc, #40]	; (8010c60 <__libc_init_array+0x40>)
 8010c38:	4c0a      	ldr	r4, [pc, #40]	; (8010c64 <__libc_init_array+0x44>)
 8010c3a:	1b64      	subs	r4, r4, r5
 8010c3c:	10a4      	asrs	r4, r4, #2
 8010c3e:	42a6      	cmp	r6, r4
 8010c40:	d105      	bne.n	8010c4e <__libc_init_array+0x2e>
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	00b3      	lsls	r3, r6, #2
 8010c46:	58eb      	ldr	r3, [r5, r3]
 8010c48:	4798      	blx	r3
 8010c4a:	3601      	adds	r6, #1
 8010c4c:	e7ee      	b.n	8010c2c <__libc_init_array+0xc>
 8010c4e:	00b3      	lsls	r3, r6, #2
 8010c50:	58eb      	ldr	r3, [r5, r3]
 8010c52:	4798      	blx	r3
 8010c54:	3601      	adds	r6, #1
 8010c56:	e7f2      	b.n	8010c3e <__libc_init_array+0x1e>
 8010c58:	080164f8 	.word	0x080164f8
 8010c5c:	080164f8 	.word	0x080164f8
 8010c60:	080164f8 	.word	0x080164f8
 8010c64:	080164fc 	.word	0x080164fc

08010c68 <malloc>:
 8010c68:	b510      	push	{r4, lr}
 8010c6a:	4b03      	ldr	r3, [pc, #12]	; (8010c78 <malloc+0x10>)
 8010c6c:	0001      	movs	r1, r0
 8010c6e:	6818      	ldr	r0, [r3, #0]
 8010c70:	f000 f856 	bl	8010d20 <_malloc_r>
 8010c74:	bd10      	pop	{r4, pc}
 8010c76:	46c0      	nop			; (mov r8, r8)
 8010c78:	20000088 	.word	0x20000088

08010c7c <memset>:
 8010c7c:	0003      	movs	r3, r0
 8010c7e:	1882      	adds	r2, r0, r2
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d100      	bne.n	8010c86 <memset+0xa>
 8010c84:	4770      	bx	lr
 8010c86:	7019      	strb	r1, [r3, #0]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	e7f9      	b.n	8010c80 <memset+0x4>

08010c8c <_free_r>:
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	0005      	movs	r5, r0
 8010c90:	2900      	cmp	r1, #0
 8010c92:	d010      	beq.n	8010cb6 <_free_r+0x2a>
 8010c94:	1f0c      	subs	r4, r1, #4
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	da00      	bge.n	8010c9e <_free_r+0x12>
 8010c9c:	18e4      	adds	r4, r4, r3
 8010c9e:	0028      	movs	r0, r5
 8010ca0:	f000 fc70 	bl	8011584 <__malloc_lock>
 8010ca4:	4a1d      	ldr	r2, [pc, #116]	; (8010d1c <_free_r+0x90>)
 8010ca6:	6813      	ldr	r3, [r2, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d105      	bne.n	8010cb8 <_free_r+0x2c>
 8010cac:	6063      	str	r3, [r4, #4]
 8010cae:	6014      	str	r4, [r2, #0]
 8010cb0:	0028      	movs	r0, r5
 8010cb2:	f000 fc6f 	bl	8011594 <__malloc_unlock>
 8010cb6:	bd70      	pop	{r4, r5, r6, pc}
 8010cb8:	42a3      	cmp	r3, r4
 8010cba:	d908      	bls.n	8010cce <_free_r+0x42>
 8010cbc:	6821      	ldr	r1, [r4, #0]
 8010cbe:	1860      	adds	r0, r4, r1
 8010cc0:	4283      	cmp	r3, r0
 8010cc2:	d1f3      	bne.n	8010cac <_free_r+0x20>
 8010cc4:	6818      	ldr	r0, [r3, #0]
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	1841      	adds	r1, r0, r1
 8010cca:	6021      	str	r1, [r4, #0]
 8010ccc:	e7ee      	b.n	8010cac <_free_r+0x20>
 8010cce:	001a      	movs	r2, r3
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d001      	beq.n	8010cda <_free_r+0x4e>
 8010cd6:	42a3      	cmp	r3, r4
 8010cd8:	d9f9      	bls.n	8010cce <_free_r+0x42>
 8010cda:	6811      	ldr	r1, [r2, #0]
 8010cdc:	1850      	adds	r0, r2, r1
 8010cde:	42a0      	cmp	r0, r4
 8010ce0:	d10b      	bne.n	8010cfa <_free_r+0x6e>
 8010ce2:	6820      	ldr	r0, [r4, #0]
 8010ce4:	1809      	adds	r1, r1, r0
 8010ce6:	1850      	adds	r0, r2, r1
 8010ce8:	6011      	str	r1, [r2, #0]
 8010cea:	4283      	cmp	r3, r0
 8010cec:	d1e0      	bne.n	8010cb0 <_free_r+0x24>
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	1841      	adds	r1, r0, r1
 8010cf4:	6011      	str	r1, [r2, #0]
 8010cf6:	6053      	str	r3, [r2, #4]
 8010cf8:	e7da      	b.n	8010cb0 <_free_r+0x24>
 8010cfa:	42a0      	cmp	r0, r4
 8010cfc:	d902      	bls.n	8010d04 <_free_r+0x78>
 8010cfe:	230c      	movs	r3, #12
 8010d00:	602b      	str	r3, [r5, #0]
 8010d02:	e7d5      	b.n	8010cb0 <_free_r+0x24>
 8010d04:	6821      	ldr	r1, [r4, #0]
 8010d06:	1860      	adds	r0, r4, r1
 8010d08:	4283      	cmp	r3, r0
 8010d0a:	d103      	bne.n	8010d14 <_free_r+0x88>
 8010d0c:	6818      	ldr	r0, [r3, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	1841      	adds	r1, r0, r1
 8010d12:	6021      	str	r1, [r4, #0]
 8010d14:	6063      	str	r3, [r4, #4]
 8010d16:	6054      	str	r4, [r2, #4]
 8010d18:	e7ca      	b.n	8010cb0 <_free_r+0x24>
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	2000011c 	.word	0x2000011c

08010d20 <_malloc_r>:
 8010d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d22:	2303      	movs	r3, #3
 8010d24:	1ccd      	adds	r5, r1, #3
 8010d26:	439d      	bics	r5, r3
 8010d28:	3508      	adds	r5, #8
 8010d2a:	0006      	movs	r6, r0
 8010d2c:	2d0c      	cmp	r5, #12
 8010d2e:	d21f      	bcs.n	8010d70 <_malloc_r+0x50>
 8010d30:	250c      	movs	r5, #12
 8010d32:	42a9      	cmp	r1, r5
 8010d34:	d81e      	bhi.n	8010d74 <_malloc_r+0x54>
 8010d36:	0030      	movs	r0, r6
 8010d38:	f000 fc24 	bl	8011584 <__malloc_lock>
 8010d3c:	4925      	ldr	r1, [pc, #148]	; (8010dd4 <_malloc_r+0xb4>)
 8010d3e:	680a      	ldr	r2, [r1, #0]
 8010d40:	0014      	movs	r4, r2
 8010d42:	2c00      	cmp	r4, #0
 8010d44:	d11a      	bne.n	8010d7c <_malloc_r+0x5c>
 8010d46:	4f24      	ldr	r7, [pc, #144]	; (8010dd8 <_malloc_r+0xb8>)
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d104      	bne.n	8010d58 <_malloc_r+0x38>
 8010d4e:	0021      	movs	r1, r4
 8010d50:	0030      	movs	r0, r6
 8010d52:	f000 f8d9 	bl	8010f08 <_sbrk_r>
 8010d56:	6038      	str	r0, [r7, #0]
 8010d58:	0029      	movs	r1, r5
 8010d5a:	0030      	movs	r0, r6
 8010d5c:	f000 f8d4 	bl	8010f08 <_sbrk_r>
 8010d60:	1c43      	adds	r3, r0, #1
 8010d62:	d12b      	bne.n	8010dbc <_malloc_r+0x9c>
 8010d64:	230c      	movs	r3, #12
 8010d66:	0030      	movs	r0, r6
 8010d68:	6033      	str	r3, [r6, #0]
 8010d6a:	f000 fc13 	bl	8011594 <__malloc_unlock>
 8010d6e:	e003      	b.n	8010d78 <_malloc_r+0x58>
 8010d70:	2d00      	cmp	r5, #0
 8010d72:	dade      	bge.n	8010d32 <_malloc_r+0x12>
 8010d74:	230c      	movs	r3, #12
 8010d76:	6033      	str	r3, [r6, #0]
 8010d78:	2000      	movs	r0, #0
 8010d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	1b5b      	subs	r3, r3, r5
 8010d80:	d419      	bmi.n	8010db6 <_malloc_r+0x96>
 8010d82:	2b0b      	cmp	r3, #11
 8010d84:	d903      	bls.n	8010d8e <_malloc_r+0x6e>
 8010d86:	6023      	str	r3, [r4, #0]
 8010d88:	18e4      	adds	r4, r4, r3
 8010d8a:	6025      	str	r5, [r4, #0]
 8010d8c:	e003      	b.n	8010d96 <_malloc_r+0x76>
 8010d8e:	6863      	ldr	r3, [r4, #4]
 8010d90:	42a2      	cmp	r2, r4
 8010d92:	d10e      	bne.n	8010db2 <_malloc_r+0x92>
 8010d94:	600b      	str	r3, [r1, #0]
 8010d96:	0030      	movs	r0, r6
 8010d98:	f000 fbfc 	bl	8011594 <__malloc_unlock>
 8010d9c:	0020      	movs	r0, r4
 8010d9e:	2207      	movs	r2, #7
 8010da0:	300b      	adds	r0, #11
 8010da2:	1d23      	adds	r3, r4, #4
 8010da4:	4390      	bics	r0, r2
 8010da6:	1ac2      	subs	r2, r0, r3
 8010da8:	4298      	cmp	r0, r3
 8010daa:	d0e6      	beq.n	8010d7a <_malloc_r+0x5a>
 8010dac:	1a1b      	subs	r3, r3, r0
 8010dae:	50a3      	str	r3, [r4, r2]
 8010db0:	e7e3      	b.n	8010d7a <_malloc_r+0x5a>
 8010db2:	6053      	str	r3, [r2, #4]
 8010db4:	e7ef      	b.n	8010d96 <_malloc_r+0x76>
 8010db6:	0022      	movs	r2, r4
 8010db8:	6864      	ldr	r4, [r4, #4]
 8010dba:	e7c2      	b.n	8010d42 <_malloc_r+0x22>
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	1cc4      	adds	r4, r0, #3
 8010dc0:	439c      	bics	r4, r3
 8010dc2:	42a0      	cmp	r0, r4
 8010dc4:	d0e1      	beq.n	8010d8a <_malloc_r+0x6a>
 8010dc6:	1a21      	subs	r1, r4, r0
 8010dc8:	0030      	movs	r0, r6
 8010dca:	f000 f89d 	bl	8010f08 <_sbrk_r>
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d1db      	bne.n	8010d8a <_malloc_r+0x6a>
 8010dd2:	e7c7      	b.n	8010d64 <_malloc_r+0x44>
 8010dd4:	2000011c 	.word	0x2000011c
 8010dd8:	20000120 	.word	0x20000120

08010ddc <iprintf>:
 8010ddc:	b40f      	push	{r0, r1, r2, r3}
 8010dde:	4b0b      	ldr	r3, [pc, #44]	; (8010e0c <iprintf+0x30>)
 8010de0:	b513      	push	{r0, r1, r4, lr}
 8010de2:	681c      	ldr	r4, [r3, #0]
 8010de4:	2c00      	cmp	r4, #0
 8010de6:	d005      	beq.n	8010df4 <iprintf+0x18>
 8010de8:	69a3      	ldr	r3, [r4, #24]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d102      	bne.n	8010df4 <iprintf+0x18>
 8010dee:	0020      	movs	r0, r4
 8010df0:	f000 fab8 	bl	8011364 <__sinit>
 8010df4:	ab05      	add	r3, sp, #20
 8010df6:	0020      	movs	r0, r4
 8010df8:	9a04      	ldr	r2, [sp, #16]
 8010dfa:	68a1      	ldr	r1, [r4, #8]
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	f000 fd5b 	bl	80118b8 <_vfiprintf_r>
 8010e02:	bc16      	pop	{r1, r2, r4}
 8010e04:	bc08      	pop	{r3}
 8010e06:	b004      	add	sp, #16
 8010e08:	4718      	bx	r3
 8010e0a:	46c0      	nop			; (mov r8, r8)
 8010e0c:	20000088 	.word	0x20000088

08010e10 <_puts_r>:
 8010e10:	b570      	push	{r4, r5, r6, lr}
 8010e12:	0005      	movs	r5, r0
 8010e14:	000e      	movs	r6, r1
 8010e16:	2800      	cmp	r0, #0
 8010e18:	d004      	beq.n	8010e24 <_puts_r+0x14>
 8010e1a:	6983      	ldr	r3, [r0, #24]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <_puts_r+0x14>
 8010e20:	f000 faa0 	bl	8011364 <__sinit>
 8010e24:	69ab      	ldr	r3, [r5, #24]
 8010e26:	68ac      	ldr	r4, [r5, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d102      	bne.n	8010e32 <_puts_r+0x22>
 8010e2c:	0028      	movs	r0, r5
 8010e2e:	f000 fa99 	bl	8011364 <__sinit>
 8010e32:	4b2d      	ldr	r3, [pc, #180]	; (8010ee8 <_puts_r+0xd8>)
 8010e34:	429c      	cmp	r4, r3
 8010e36:	d122      	bne.n	8010e7e <_puts_r+0x6e>
 8010e38:	686c      	ldr	r4, [r5, #4]
 8010e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e3c:	07db      	lsls	r3, r3, #31
 8010e3e:	d405      	bmi.n	8010e4c <_puts_r+0x3c>
 8010e40:	89a3      	ldrh	r3, [r4, #12]
 8010e42:	059b      	lsls	r3, r3, #22
 8010e44:	d402      	bmi.n	8010e4c <_puts_r+0x3c>
 8010e46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e48:	f000 fb2d 	bl	80114a6 <__retarget_lock_acquire_recursive>
 8010e4c:	89a3      	ldrh	r3, [r4, #12]
 8010e4e:	071b      	lsls	r3, r3, #28
 8010e50:	d502      	bpl.n	8010e58 <_puts_r+0x48>
 8010e52:	6923      	ldr	r3, [r4, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d129      	bne.n	8010eac <_puts_r+0x9c>
 8010e58:	0021      	movs	r1, r4
 8010e5a:	0028      	movs	r0, r5
 8010e5c:	f000 f8dc 	bl	8011018 <__swsetup_r>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	d023      	beq.n	8010eac <_puts_r+0x9c>
 8010e64:	2501      	movs	r5, #1
 8010e66:	426d      	negs	r5, r5
 8010e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e6a:	07db      	lsls	r3, r3, #31
 8010e6c:	d405      	bmi.n	8010e7a <_puts_r+0x6a>
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	059b      	lsls	r3, r3, #22
 8010e72:	d402      	bmi.n	8010e7a <_puts_r+0x6a>
 8010e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e76:	f000 fb17 	bl	80114a8 <__retarget_lock_release_recursive>
 8010e7a:	0028      	movs	r0, r5
 8010e7c:	bd70      	pop	{r4, r5, r6, pc}
 8010e7e:	4b1b      	ldr	r3, [pc, #108]	; (8010eec <_puts_r+0xdc>)
 8010e80:	429c      	cmp	r4, r3
 8010e82:	d101      	bne.n	8010e88 <_puts_r+0x78>
 8010e84:	68ac      	ldr	r4, [r5, #8]
 8010e86:	e7d8      	b.n	8010e3a <_puts_r+0x2a>
 8010e88:	4b19      	ldr	r3, [pc, #100]	; (8010ef0 <_puts_r+0xe0>)
 8010e8a:	429c      	cmp	r4, r3
 8010e8c:	d1d5      	bne.n	8010e3a <_puts_r+0x2a>
 8010e8e:	68ec      	ldr	r4, [r5, #12]
 8010e90:	e7d3      	b.n	8010e3a <_puts_r+0x2a>
 8010e92:	3601      	adds	r6, #1
 8010e94:	60a3      	str	r3, [r4, #8]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	da04      	bge.n	8010ea4 <_puts_r+0x94>
 8010e9a:	69a2      	ldr	r2, [r4, #24]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	dc16      	bgt.n	8010ece <_puts_r+0xbe>
 8010ea0:	290a      	cmp	r1, #10
 8010ea2:	d014      	beq.n	8010ece <_puts_r+0xbe>
 8010ea4:	6823      	ldr	r3, [r4, #0]
 8010ea6:	1c5a      	adds	r2, r3, #1
 8010ea8:	6022      	str	r2, [r4, #0]
 8010eaa:	7019      	strb	r1, [r3, #0]
 8010eac:	68a3      	ldr	r3, [r4, #8]
 8010eae:	7831      	ldrb	r1, [r6, #0]
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	2900      	cmp	r1, #0
 8010eb4:	d1ed      	bne.n	8010e92 <_puts_r+0x82>
 8010eb6:	60a3      	str	r3, [r4, #8]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	da0f      	bge.n	8010edc <_puts_r+0xcc>
 8010ebc:	0028      	movs	r0, r5
 8010ebe:	0022      	movs	r2, r4
 8010ec0:	310a      	adds	r1, #10
 8010ec2:	f000 f853 	bl	8010f6c <__swbuf_r>
 8010ec6:	250a      	movs	r5, #10
 8010ec8:	1c43      	adds	r3, r0, #1
 8010eca:	d1cd      	bne.n	8010e68 <_puts_r+0x58>
 8010ecc:	e7ca      	b.n	8010e64 <_puts_r+0x54>
 8010ece:	0022      	movs	r2, r4
 8010ed0:	0028      	movs	r0, r5
 8010ed2:	f000 f84b 	bl	8010f6c <__swbuf_r>
 8010ed6:	1c43      	adds	r3, r0, #1
 8010ed8:	d1e8      	bne.n	8010eac <_puts_r+0x9c>
 8010eda:	e7c3      	b.n	8010e64 <_puts_r+0x54>
 8010edc:	250a      	movs	r5, #10
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	1c5a      	adds	r2, r3, #1
 8010ee2:	6022      	str	r2, [r4, #0]
 8010ee4:	701d      	strb	r5, [r3, #0]
 8010ee6:	e7bf      	b.n	8010e68 <_puts_r+0x58>
 8010ee8:	08016234 	.word	0x08016234
 8010eec:	08016254 	.word	0x08016254
 8010ef0:	08016214 	.word	0x08016214

08010ef4 <puts>:
 8010ef4:	b510      	push	{r4, lr}
 8010ef6:	4b03      	ldr	r3, [pc, #12]	; (8010f04 <puts+0x10>)
 8010ef8:	0001      	movs	r1, r0
 8010efa:	6818      	ldr	r0, [r3, #0]
 8010efc:	f7ff ff88 	bl	8010e10 <_puts_r>
 8010f00:	bd10      	pop	{r4, pc}
 8010f02:	46c0      	nop			; (mov r8, r8)
 8010f04:	20000088 	.word	0x20000088

08010f08 <_sbrk_r>:
 8010f08:	2300      	movs	r3, #0
 8010f0a:	b570      	push	{r4, r5, r6, lr}
 8010f0c:	4d06      	ldr	r5, [pc, #24]	; (8010f28 <_sbrk_r+0x20>)
 8010f0e:	0004      	movs	r4, r0
 8010f10:	0008      	movs	r0, r1
 8010f12:	602b      	str	r3, [r5, #0]
 8010f14:	f7ff fe12 	bl	8010b3c <_sbrk>
 8010f18:	1c43      	adds	r3, r0, #1
 8010f1a:	d103      	bne.n	8010f24 <_sbrk_r+0x1c>
 8010f1c:	682b      	ldr	r3, [r5, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d000      	beq.n	8010f24 <_sbrk_r+0x1c>
 8010f22:	6023      	str	r3, [r4, #0]
 8010f24:	bd70      	pop	{r4, r5, r6, pc}
 8010f26:	46c0      	nop			; (mov r8, r8)
 8010f28:	20000764 	.word	0x20000764

08010f2c <siprintf>:
 8010f2c:	b40e      	push	{r1, r2, r3}
 8010f2e:	b500      	push	{lr}
 8010f30:	490b      	ldr	r1, [pc, #44]	; (8010f60 <siprintf+0x34>)
 8010f32:	b09c      	sub	sp, #112	; 0x70
 8010f34:	ab1d      	add	r3, sp, #116	; 0x74
 8010f36:	9002      	str	r0, [sp, #8]
 8010f38:	9006      	str	r0, [sp, #24]
 8010f3a:	9107      	str	r1, [sp, #28]
 8010f3c:	9104      	str	r1, [sp, #16]
 8010f3e:	4809      	ldr	r0, [pc, #36]	; (8010f64 <siprintf+0x38>)
 8010f40:	4909      	ldr	r1, [pc, #36]	; (8010f68 <siprintf+0x3c>)
 8010f42:	cb04      	ldmia	r3!, {r2}
 8010f44:	9105      	str	r1, [sp, #20]
 8010f46:	6800      	ldr	r0, [r0, #0]
 8010f48:	a902      	add	r1, sp, #8
 8010f4a:	9301      	str	r3, [sp, #4]
 8010f4c:	f000 fb8c 	bl	8011668 <_svfiprintf_r>
 8010f50:	2300      	movs	r3, #0
 8010f52:	9a02      	ldr	r2, [sp, #8]
 8010f54:	7013      	strb	r3, [r2, #0]
 8010f56:	b01c      	add	sp, #112	; 0x70
 8010f58:	bc08      	pop	{r3}
 8010f5a:	b003      	add	sp, #12
 8010f5c:	4718      	bx	r3
 8010f5e:	46c0      	nop			; (mov r8, r8)
 8010f60:	7fffffff 	.word	0x7fffffff
 8010f64:	20000088 	.word	0x20000088
 8010f68:	ffff0208 	.word	0xffff0208

08010f6c <__swbuf_r>:
 8010f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6e:	0005      	movs	r5, r0
 8010f70:	000e      	movs	r6, r1
 8010f72:	0014      	movs	r4, r2
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d004      	beq.n	8010f82 <__swbuf_r+0x16>
 8010f78:	6983      	ldr	r3, [r0, #24]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d101      	bne.n	8010f82 <__swbuf_r+0x16>
 8010f7e:	f000 f9f1 	bl	8011364 <__sinit>
 8010f82:	4b22      	ldr	r3, [pc, #136]	; (801100c <__swbuf_r+0xa0>)
 8010f84:	429c      	cmp	r4, r3
 8010f86:	d12e      	bne.n	8010fe6 <__swbuf_r+0x7a>
 8010f88:	686c      	ldr	r4, [r5, #4]
 8010f8a:	69a3      	ldr	r3, [r4, #24]
 8010f8c:	60a3      	str	r3, [r4, #8]
 8010f8e:	89a3      	ldrh	r3, [r4, #12]
 8010f90:	071b      	lsls	r3, r3, #28
 8010f92:	d532      	bpl.n	8010ffa <__swbuf_r+0x8e>
 8010f94:	6923      	ldr	r3, [r4, #16]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d02f      	beq.n	8010ffa <__swbuf_r+0x8e>
 8010f9a:	6823      	ldr	r3, [r4, #0]
 8010f9c:	6922      	ldr	r2, [r4, #16]
 8010f9e:	b2f7      	uxtb	r7, r6
 8010fa0:	1a98      	subs	r0, r3, r2
 8010fa2:	6963      	ldr	r3, [r4, #20]
 8010fa4:	b2f6      	uxtb	r6, r6
 8010fa6:	4283      	cmp	r3, r0
 8010fa8:	dc05      	bgt.n	8010fb6 <__swbuf_r+0x4a>
 8010faa:	0021      	movs	r1, r4
 8010fac:	0028      	movs	r0, r5
 8010fae:	f000 f937 	bl	8011220 <_fflush_r>
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d127      	bne.n	8011006 <__swbuf_r+0x9a>
 8010fb6:	68a3      	ldr	r3, [r4, #8]
 8010fb8:	3001      	adds	r0, #1
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	60a3      	str	r3, [r4, #8]
 8010fbe:	6823      	ldr	r3, [r4, #0]
 8010fc0:	1c5a      	adds	r2, r3, #1
 8010fc2:	6022      	str	r2, [r4, #0]
 8010fc4:	701f      	strb	r7, [r3, #0]
 8010fc6:	6963      	ldr	r3, [r4, #20]
 8010fc8:	4283      	cmp	r3, r0
 8010fca:	d004      	beq.n	8010fd6 <__swbuf_r+0x6a>
 8010fcc:	89a3      	ldrh	r3, [r4, #12]
 8010fce:	07db      	lsls	r3, r3, #31
 8010fd0:	d507      	bpl.n	8010fe2 <__swbuf_r+0x76>
 8010fd2:	2e0a      	cmp	r6, #10
 8010fd4:	d105      	bne.n	8010fe2 <__swbuf_r+0x76>
 8010fd6:	0021      	movs	r1, r4
 8010fd8:	0028      	movs	r0, r5
 8010fda:	f000 f921 	bl	8011220 <_fflush_r>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d111      	bne.n	8011006 <__swbuf_r+0x9a>
 8010fe2:	0030      	movs	r0, r6
 8010fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fe6:	4b0a      	ldr	r3, [pc, #40]	; (8011010 <__swbuf_r+0xa4>)
 8010fe8:	429c      	cmp	r4, r3
 8010fea:	d101      	bne.n	8010ff0 <__swbuf_r+0x84>
 8010fec:	68ac      	ldr	r4, [r5, #8]
 8010fee:	e7cc      	b.n	8010f8a <__swbuf_r+0x1e>
 8010ff0:	4b08      	ldr	r3, [pc, #32]	; (8011014 <__swbuf_r+0xa8>)
 8010ff2:	429c      	cmp	r4, r3
 8010ff4:	d1c9      	bne.n	8010f8a <__swbuf_r+0x1e>
 8010ff6:	68ec      	ldr	r4, [r5, #12]
 8010ff8:	e7c7      	b.n	8010f8a <__swbuf_r+0x1e>
 8010ffa:	0021      	movs	r1, r4
 8010ffc:	0028      	movs	r0, r5
 8010ffe:	f000 f80b 	bl	8011018 <__swsetup_r>
 8011002:	2800      	cmp	r0, #0
 8011004:	d0c9      	beq.n	8010f9a <__swbuf_r+0x2e>
 8011006:	2601      	movs	r6, #1
 8011008:	4276      	negs	r6, r6
 801100a:	e7ea      	b.n	8010fe2 <__swbuf_r+0x76>
 801100c:	08016234 	.word	0x08016234
 8011010:	08016254 	.word	0x08016254
 8011014:	08016214 	.word	0x08016214

08011018 <__swsetup_r>:
 8011018:	4b37      	ldr	r3, [pc, #220]	; (80110f8 <__swsetup_r+0xe0>)
 801101a:	b570      	push	{r4, r5, r6, lr}
 801101c:	681d      	ldr	r5, [r3, #0]
 801101e:	0006      	movs	r6, r0
 8011020:	000c      	movs	r4, r1
 8011022:	2d00      	cmp	r5, #0
 8011024:	d005      	beq.n	8011032 <__swsetup_r+0x1a>
 8011026:	69ab      	ldr	r3, [r5, #24]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <__swsetup_r+0x1a>
 801102c:	0028      	movs	r0, r5
 801102e:	f000 f999 	bl	8011364 <__sinit>
 8011032:	4b32      	ldr	r3, [pc, #200]	; (80110fc <__swsetup_r+0xe4>)
 8011034:	429c      	cmp	r4, r3
 8011036:	d10f      	bne.n	8011058 <__swsetup_r+0x40>
 8011038:	686c      	ldr	r4, [r5, #4]
 801103a:	230c      	movs	r3, #12
 801103c:	5ee2      	ldrsh	r2, [r4, r3]
 801103e:	b293      	uxth	r3, r2
 8011040:	0711      	lsls	r1, r2, #28
 8011042:	d42d      	bmi.n	80110a0 <__swsetup_r+0x88>
 8011044:	06d9      	lsls	r1, r3, #27
 8011046:	d411      	bmi.n	801106c <__swsetup_r+0x54>
 8011048:	2309      	movs	r3, #9
 801104a:	2001      	movs	r0, #1
 801104c:	6033      	str	r3, [r6, #0]
 801104e:	3337      	adds	r3, #55	; 0x37
 8011050:	4313      	orrs	r3, r2
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	4240      	negs	r0, r0
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	4b29      	ldr	r3, [pc, #164]	; (8011100 <__swsetup_r+0xe8>)
 801105a:	429c      	cmp	r4, r3
 801105c:	d101      	bne.n	8011062 <__swsetup_r+0x4a>
 801105e:	68ac      	ldr	r4, [r5, #8]
 8011060:	e7eb      	b.n	801103a <__swsetup_r+0x22>
 8011062:	4b28      	ldr	r3, [pc, #160]	; (8011104 <__swsetup_r+0xec>)
 8011064:	429c      	cmp	r4, r3
 8011066:	d1e8      	bne.n	801103a <__swsetup_r+0x22>
 8011068:	68ec      	ldr	r4, [r5, #12]
 801106a:	e7e6      	b.n	801103a <__swsetup_r+0x22>
 801106c:	075b      	lsls	r3, r3, #29
 801106e:	d513      	bpl.n	8011098 <__swsetup_r+0x80>
 8011070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011072:	2900      	cmp	r1, #0
 8011074:	d008      	beq.n	8011088 <__swsetup_r+0x70>
 8011076:	0023      	movs	r3, r4
 8011078:	3344      	adds	r3, #68	; 0x44
 801107a:	4299      	cmp	r1, r3
 801107c:	d002      	beq.n	8011084 <__swsetup_r+0x6c>
 801107e:	0030      	movs	r0, r6
 8011080:	f7ff fe04 	bl	8010c8c <_free_r>
 8011084:	2300      	movs	r3, #0
 8011086:	6363      	str	r3, [r4, #52]	; 0x34
 8011088:	2224      	movs	r2, #36	; 0x24
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	4393      	bics	r3, r2
 801108e:	81a3      	strh	r3, [r4, #12]
 8011090:	2300      	movs	r3, #0
 8011092:	6063      	str	r3, [r4, #4]
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	6023      	str	r3, [r4, #0]
 8011098:	2308      	movs	r3, #8
 801109a:	89a2      	ldrh	r2, [r4, #12]
 801109c:	4313      	orrs	r3, r2
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	6923      	ldr	r3, [r4, #16]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10b      	bne.n	80110be <__swsetup_r+0xa6>
 80110a6:	21a0      	movs	r1, #160	; 0xa0
 80110a8:	2280      	movs	r2, #128	; 0x80
 80110aa:	89a3      	ldrh	r3, [r4, #12]
 80110ac:	0089      	lsls	r1, r1, #2
 80110ae:	0092      	lsls	r2, r2, #2
 80110b0:	400b      	ands	r3, r1
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d003      	beq.n	80110be <__swsetup_r+0xa6>
 80110b6:	0021      	movs	r1, r4
 80110b8:	0030      	movs	r0, r6
 80110ba:	f000 fa1f 	bl	80114fc <__smakebuf_r>
 80110be:	220c      	movs	r2, #12
 80110c0:	5ea3      	ldrsh	r3, [r4, r2]
 80110c2:	2001      	movs	r0, #1
 80110c4:	001a      	movs	r2, r3
 80110c6:	b299      	uxth	r1, r3
 80110c8:	4002      	ands	r2, r0
 80110ca:	4203      	tst	r3, r0
 80110cc:	d00f      	beq.n	80110ee <__swsetup_r+0xd6>
 80110ce:	2200      	movs	r2, #0
 80110d0:	60a2      	str	r2, [r4, #8]
 80110d2:	6962      	ldr	r2, [r4, #20]
 80110d4:	4252      	negs	r2, r2
 80110d6:	61a2      	str	r2, [r4, #24]
 80110d8:	2000      	movs	r0, #0
 80110da:	6922      	ldr	r2, [r4, #16]
 80110dc:	4282      	cmp	r2, r0
 80110de:	d1ba      	bne.n	8011056 <__swsetup_r+0x3e>
 80110e0:	060a      	lsls	r2, r1, #24
 80110e2:	d5b8      	bpl.n	8011056 <__swsetup_r+0x3e>
 80110e4:	2240      	movs	r2, #64	; 0x40
 80110e6:	4313      	orrs	r3, r2
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	3801      	subs	r0, #1
 80110ec:	e7b3      	b.n	8011056 <__swsetup_r+0x3e>
 80110ee:	0788      	lsls	r0, r1, #30
 80110f0:	d400      	bmi.n	80110f4 <__swsetup_r+0xdc>
 80110f2:	6962      	ldr	r2, [r4, #20]
 80110f4:	60a2      	str	r2, [r4, #8]
 80110f6:	e7ef      	b.n	80110d8 <__swsetup_r+0xc0>
 80110f8:	20000088 	.word	0x20000088
 80110fc:	08016234 	.word	0x08016234
 8011100:	08016254 	.word	0x08016254
 8011104:	08016214 	.word	0x08016214

08011108 <__sflush_r>:
 8011108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801110a:	898b      	ldrh	r3, [r1, #12]
 801110c:	0005      	movs	r5, r0
 801110e:	000c      	movs	r4, r1
 8011110:	071a      	lsls	r2, r3, #28
 8011112:	d45f      	bmi.n	80111d4 <__sflush_r+0xcc>
 8011114:	684a      	ldr	r2, [r1, #4]
 8011116:	2a00      	cmp	r2, #0
 8011118:	dc04      	bgt.n	8011124 <__sflush_r+0x1c>
 801111a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801111c:	2a00      	cmp	r2, #0
 801111e:	dc01      	bgt.n	8011124 <__sflush_r+0x1c>
 8011120:	2000      	movs	r0, #0
 8011122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011124:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011126:	2f00      	cmp	r7, #0
 8011128:	d0fa      	beq.n	8011120 <__sflush_r+0x18>
 801112a:	2200      	movs	r2, #0
 801112c:	2180      	movs	r1, #128	; 0x80
 801112e:	682e      	ldr	r6, [r5, #0]
 8011130:	602a      	str	r2, [r5, #0]
 8011132:	001a      	movs	r2, r3
 8011134:	0149      	lsls	r1, r1, #5
 8011136:	400a      	ands	r2, r1
 8011138:	420b      	tst	r3, r1
 801113a:	d034      	beq.n	80111a6 <__sflush_r+0x9e>
 801113c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801113e:	89a3      	ldrh	r3, [r4, #12]
 8011140:	075b      	lsls	r3, r3, #29
 8011142:	d506      	bpl.n	8011152 <__sflush_r+0x4a>
 8011144:	6863      	ldr	r3, [r4, #4]
 8011146:	1ac0      	subs	r0, r0, r3
 8011148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801114a:	2b00      	cmp	r3, #0
 801114c:	d001      	beq.n	8011152 <__sflush_r+0x4a>
 801114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011150:	1ac0      	subs	r0, r0, r3
 8011152:	0002      	movs	r2, r0
 8011154:	6a21      	ldr	r1, [r4, #32]
 8011156:	2300      	movs	r3, #0
 8011158:	0028      	movs	r0, r5
 801115a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801115c:	47b8      	blx	r7
 801115e:	89a1      	ldrh	r1, [r4, #12]
 8011160:	1c43      	adds	r3, r0, #1
 8011162:	d106      	bne.n	8011172 <__sflush_r+0x6a>
 8011164:	682b      	ldr	r3, [r5, #0]
 8011166:	2b1d      	cmp	r3, #29
 8011168:	d831      	bhi.n	80111ce <__sflush_r+0xc6>
 801116a:	4a2c      	ldr	r2, [pc, #176]	; (801121c <__sflush_r+0x114>)
 801116c:	40da      	lsrs	r2, r3
 801116e:	07d3      	lsls	r3, r2, #31
 8011170:	d52d      	bpl.n	80111ce <__sflush_r+0xc6>
 8011172:	2300      	movs	r3, #0
 8011174:	6063      	str	r3, [r4, #4]
 8011176:	6923      	ldr	r3, [r4, #16]
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	04cb      	lsls	r3, r1, #19
 801117c:	d505      	bpl.n	801118a <__sflush_r+0x82>
 801117e:	1c43      	adds	r3, r0, #1
 8011180:	d102      	bne.n	8011188 <__sflush_r+0x80>
 8011182:	682b      	ldr	r3, [r5, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d100      	bne.n	801118a <__sflush_r+0x82>
 8011188:	6560      	str	r0, [r4, #84]	; 0x54
 801118a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801118c:	602e      	str	r6, [r5, #0]
 801118e:	2900      	cmp	r1, #0
 8011190:	d0c6      	beq.n	8011120 <__sflush_r+0x18>
 8011192:	0023      	movs	r3, r4
 8011194:	3344      	adds	r3, #68	; 0x44
 8011196:	4299      	cmp	r1, r3
 8011198:	d002      	beq.n	80111a0 <__sflush_r+0x98>
 801119a:	0028      	movs	r0, r5
 801119c:	f7ff fd76 	bl	8010c8c <_free_r>
 80111a0:	2000      	movs	r0, #0
 80111a2:	6360      	str	r0, [r4, #52]	; 0x34
 80111a4:	e7bd      	b.n	8011122 <__sflush_r+0x1a>
 80111a6:	2301      	movs	r3, #1
 80111a8:	0028      	movs	r0, r5
 80111aa:	6a21      	ldr	r1, [r4, #32]
 80111ac:	47b8      	blx	r7
 80111ae:	1c43      	adds	r3, r0, #1
 80111b0:	d1c5      	bne.n	801113e <__sflush_r+0x36>
 80111b2:	682b      	ldr	r3, [r5, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d0c2      	beq.n	801113e <__sflush_r+0x36>
 80111b8:	2b1d      	cmp	r3, #29
 80111ba:	d001      	beq.n	80111c0 <__sflush_r+0xb8>
 80111bc:	2b16      	cmp	r3, #22
 80111be:	d101      	bne.n	80111c4 <__sflush_r+0xbc>
 80111c0:	602e      	str	r6, [r5, #0]
 80111c2:	e7ad      	b.n	8011120 <__sflush_r+0x18>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	89a2      	ldrh	r2, [r4, #12]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	81a3      	strh	r3, [r4, #12]
 80111cc:	e7a9      	b.n	8011122 <__sflush_r+0x1a>
 80111ce:	2340      	movs	r3, #64	; 0x40
 80111d0:	430b      	orrs	r3, r1
 80111d2:	e7fa      	b.n	80111ca <__sflush_r+0xc2>
 80111d4:	690f      	ldr	r7, [r1, #16]
 80111d6:	2f00      	cmp	r7, #0
 80111d8:	d0a2      	beq.n	8011120 <__sflush_r+0x18>
 80111da:	680a      	ldr	r2, [r1, #0]
 80111dc:	600f      	str	r7, [r1, #0]
 80111de:	1bd2      	subs	r2, r2, r7
 80111e0:	9201      	str	r2, [sp, #4]
 80111e2:	2200      	movs	r2, #0
 80111e4:	079b      	lsls	r3, r3, #30
 80111e6:	d100      	bne.n	80111ea <__sflush_r+0xe2>
 80111e8:	694a      	ldr	r2, [r1, #20]
 80111ea:	60a2      	str	r2, [r4, #8]
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	dc00      	bgt.n	80111f4 <__sflush_r+0xec>
 80111f2:	e795      	b.n	8011120 <__sflush_r+0x18>
 80111f4:	003a      	movs	r2, r7
 80111f6:	0028      	movs	r0, r5
 80111f8:	9b01      	ldr	r3, [sp, #4]
 80111fa:	6a21      	ldr	r1, [r4, #32]
 80111fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111fe:	47b0      	blx	r6
 8011200:	2800      	cmp	r0, #0
 8011202:	dc06      	bgt.n	8011212 <__sflush_r+0x10a>
 8011204:	2340      	movs	r3, #64	; 0x40
 8011206:	2001      	movs	r0, #1
 8011208:	89a2      	ldrh	r2, [r4, #12]
 801120a:	4240      	negs	r0, r0
 801120c:	4313      	orrs	r3, r2
 801120e:	81a3      	strh	r3, [r4, #12]
 8011210:	e787      	b.n	8011122 <__sflush_r+0x1a>
 8011212:	9b01      	ldr	r3, [sp, #4]
 8011214:	183f      	adds	r7, r7, r0
 8011216:	1a1b      	subs	r3, r3, r0
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	e7e7      	b.n	80111ec <__sflush_r+0xe4>
 801121c:	20400001 	.word	0x20400001

08011220 <_fflush_r>:
 8011220:	690b      	ldr	r3, [r1, #16]
 8011222:	b570      	push	{r4, r5, r6, lr}
 8011224:	0005      	movs	r5, r0
 8011226:	000c      	movs	r4, r1
 8011228:	2b00      	cmp	r3, #0
 801122a:	d102      	bne.n	8011232 <_fflush_r+0x12>
 801122c:	2500      	movs	r5, #0
 801122e:	0028      	movs	r0, r5
 8011230:	bd70      	pop	{r4, r5, r6, pc}
 8011232:	2800      	cmp	r0, #0
 8011234:	d004      	beq.n	8011240 <_fflush_r+0x20>
 8011236:	6983      	ldr	r3, [r0, #24]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d101      	bne.n	8011240 <_fflush_r+0x20>
 801123c:	f000 f892 	bl	8011364 <__sinit>
 8011240:	4b14      	ldr	r3, [pc, #80]	; (8011294 <_fflush_r+0x74>)
 8011242:	429c      	cmp	r4, r3
 8011244:	d11b      	bne.n	801127e <_fflush_r+0x5e>
 8011246:	686c      	ldr	r4, [r5, #4]
 8011248:	220c      	movs	r2, #12
 801124a:	5ea3      	ldrsh	r3, [r4, r2]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0ed      	beq.n	801122c <_fflush_r+0xc>
 8011250:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011252:	07d2      	lsls	r2, r2, #31
 8011254:	d404      	bmi.n	8011260 <_fflush_r+0x40>
 8011256:	059b      	lsls	r3, r3, #22
 8011258:	d402      	bmi.n	8011260 <_fflush_r+0x40>
 801125a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801125c:	f000 f923 	bl	80114a6 <__retarget_lock_acquire_recursive>
 8011260:	0028      	movs	r0, r5
 8011262:	0021      	movs	r1, r4
 8011264:	f7ff ff50 	bl	8011108 <__sflush_r>
 8011268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801126a:	0005      	movs	r5, r0
 801126c:	07db      	lsls	r3, r3, #31
 801126e:	d4de      	bmi.n	801122e <_fflush_r+0xe>
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	059b      	lsls	r3, r3, #22
 8011274:	d4db      	bmi.n	801122e <_fflush_r+0xe>
 8011276:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011278:	f000 f916 	bl	80114a8 <__retarget_lock_release_recursive>
 801127c:	e7d7      	b.n	801122e <_fflush_r+0xe>
 801127e:	4b06      	ldr	r3, [pc, #24]	; (8011298 <_fflush_r+0x78>)
 8011280:	429c      	cmp	r4, r3
 8011282:	d101      	bne.n	8011288 <_fflush_r+0x68>
 8011284:	68ac      	ldr	r4, [r5, #8]
 8011286:	e7df      	b.n	8011248 <_fflush_r+0x28>
 8011288:	4b04      	ldr	r3, [pc, #16]	; (801129c <_fflush_r+0x7c>)
 801128a:	429c      	cmp	r4, r3
 801128c:	d1dc      	bne.n	8011248 <_fflush_r+0x28>
 801128e:	68ec      	ldr	r4, [r5, #12]
 8011290:	e7da      	b.n	8011248 <_fflush_r+0x28>
 8011292:	46c0      	nop			; (mov r8, r8)
 8011294:	08016234 	.word	0x08016234
 8011298:	08016254 	.word	0x08016254
 801129c:	08016214 	.word	0x08016214

080112a0 <std>:
 80112a0:	2300      	movs	r3, #0
 80112a2:	b510      	push	{r4, lr}
 80112a4:	0004      	movs	r4, r0
 80112a6:	6003      	str	r3, [r0, #0]
 80112a8:	6043      	str	r3, [r0, #4]
 80112aa:	6083      	str	r3, [r0, #8]
 80112ac:	8181      	strh	r1, [r0, #12]
 80112ae:	6643      	str	r3, [r0, #100]	; 0x64
 80112b0:	0019      	movs	r1, r3
 80112b2:	81c2      	strh	r2, [r0, #14]
 80112b4:	6103      	str	r3, [r0, #16]
 80112b6:	6143      	str	r3, [r0, #20]
 80112b8:	6183      	str	r3, [r0, #24]
 80112ba:	2208      	movs	r2, #8
 80112bc:	305c      	adds	r0, #92	; 0x5c
 80112be:	f7ff fcdd 	bl	8010c7c <memset>
 80112c2:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <std+0x38>)
 80112c4:	6263      	str	r3, [r4, #36]	; 0x24
 80112c6:	4b05      	ldr	r3, [pc, #20]	; (80112dc <std+0x3c>)
 80112c8:	6224      	str	r4, [r4, #32]
 80112ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80112cc:	4b04      	ldr	r3, [pc, #16]	; (80112e0 <std+0x40>)
 80112ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112d0:	4b04      	ldr	r3, [pc, #16]	; (80112e4 <std+0x44>)
 80112d2:	6323      	str	r3, [r4, #48]	; 0x30
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	46c0      	nop			; (mov r8, r8)
 80112d8:	08011e31 	.word	0x08011e31
 80112dc:	08011e59 	.word	0x08011e59
 80112e0:	08011e91 	.word	0x08011e91
 80112e4:	08011ebd 	.word	0x08011ebd

080112e8 <_cleanup_r>:
 80112e8:	b510      	push	{r4, lr}
 80112ea:	4902      	ldr	r1, [pc, #8]	; (80112f4 <_cleanup_r+0xc>)
 80112ec:	f000 f8ba 	bl	8011464 <_fwalk_reent>
 80112f0:	bd10      	pop	{r4, pc}
 80112f2:	46c0      	nop			; (mov r8, r8)
 80112f4:	08011221 	.word	0x08011221

080112f8 <__sfmoreglue>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	2568      	movs	r5, #104	; 0x68
 80112fc:	1e4a      	subs	r2, r1, #1
 80112fe:	4355      	muls	r5, r2
 8011300:	000e      	movs	r6, r1
 8011302:	0029      	movs	r1, r5
 8011304:	3174      	adds	r1, #116	; 0x74
 8011306:	f7ff fd0b 	bl	8010d20 <_malloc_r>
 801130a:	1e04      	subs	r4, r0, #0
 801130c:	d008      	beq.n	8011320 <__sfmoreglue+0x28>
 801130e:	2100      	movs	r1, #0
 8011310:	002a      	movs	r2, r5
 8011312:	6001      	str	r1, [r0, #0]
 8011314:	6046      	str	r6, [r0, #4]
 8011316:	300c      	adds	r0, #12
 8011318:	60a0      	str	r0, [r4, #8]
 801131a:	3268      	adds	r2, #104	; 0x68
 801131c:	f7ff fcae 	bl	8010c7c <memset>
 8011320:	0020      	movs	r0, r4
 8011322:	bd70      	pop	{r4, r5, r6, pc}

08011324 <__sfp_lock_acquire>:
 8011324:	b510      	push	{r4, lr}
 8011326:	4802      	ldr	r0, [pc, #8]	; (8011330 <__sfp_lock_acquire+0xc>)
 8011328:	f000 f8bd 	bl	80114a6 <__retarget_lock_acquire_recursive>
 801132c:	bd10      	pop	{r4, pc}
 801132e:	46c0      	nop			; (mov r8, r8)
 8011330:	20000760 	.word	0x20000760

08011334 <__sfp_lock_release>:
 8011334:	b510      	push	{r4, lr}
 8011336:	4802      	ldr	r0, [pc, #8]	; (8011340 <__sfp_lock_release+0xc>)
 8011338:	f000 f8b6 	bl	80114a8 <__retarget_lock_release_recursive>
 801133c:	bd10      	pop	{r4, pc}
 801133e:	46c0      	nop			; (mov r8, r8)
 8011340:	20000760 	.word	0x20000760

08011344 <__sinit_lock_acquire>:
 8011344:	b510      	push	{r4, lr}
 8011346:	4802      	ldr	r0, [pc, #8]	; (8011350 <__sinit_lock_acquire+0xc>)
 8011348:	f000 f8ad 	bl	80114a6 <__retarget_lock_acquire_recursive>
 801134c:	bd10      	pop	{r4, pc}
 801134e:	46c0      	nop			; (mov r8, r8)
 8011350:	2000075b 	.word	0x2000075b

08011354 <__sinit_lock_release>:
 8011354:	b510      	push	{r4, lr}
 8011356:	4802      	ldr	r0, [pc, #8]	; (8011360 <__sinit_lock_release+0xc>)
 8011358:	f000 f8a6 	bl	80114a8 <__retarget_lock_release_recursive>
 801135c:	bd10      	pop	{r4, pc}
 801135e:	46c0      	nop			; (mov r8, r8)
 8011360:	2000075b 	.word	0x2000075b

08011364 <__sinit>:
 8011364:	b513      	push	{r0, r1, r4, lr}
 8011366:	0004      	movs	r4, r0
 8011368:	f7ff ffec 	bl	8011344 <__sinit_lock_acquire>
 801136c:	69a3      	ldr	r3, [r4, #24]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d002      	beq.n	8011378 <__sinit+0x14>
 8011372:	f7ff ffef 	bl	8011354 <__sinit_lock_release>
 8011376:	bd13      	pop	{r0, r1, r4, pc}
 8011378:	64a3      	str	r3, [r4, #72]	; 0x48
 801137a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801137c:	6523      	str	r3, [r4, #80]	; 0x50
 801137e:	4b13      	ldr	r3, [pc, #76]	; (80113cc <__sinit+0x68>)
 8011380:	4a13      	ldr	r2, [pc, #76]	; (80113d0 <__sinit+0x6c>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	62a2      	str	r2, [r4, #40]	; 0x28
 8011386:	9301      	str	r3, [sp, #4]
 8011388:	42a3      	cmp	r3, r4
 801138a:	d101      	bne.n	8011390 <__sinit+0x2c>
 801138c:	2301      	movs	r3, #1
 801138e:	61a3      	str	r3, [r4, #24]
 8011390:	0020      	movs	r0, r4
 8011392:	f000 f81f 	bl	80113d4 <__sfp>
 8011396:	6060      	str	r0, [r4, #4]
 8011398:	0020      	movs	r0, r4
 801139a:	f000 f81b 	bl	80113d4 <__sfp>
 801139e:	60a0      	str	r0, [r4, #8]
 80113a0:	0020      	movs	r0, r4
 80113a2:	f000 f817 	bl	80113d4 <__sfp>
 80113a6:	2200      	movs	r2, #0
 80113a8:	2104      	movs	r1, #4
 80113aa:	60e0      	str	r0, [r4, #12]
 80113ac:	6860      	ldr	r0, [r4, #4]
 80113ae:	f7ff ff77 	bl	80112a0 <std>
 80113b2:	2201      	movs	r2, #1
 80113b4:	2109      	movs	r1, #9
 80113b6:	68a0      	ldr	r0, [r4, #8]
 80113b8:	f7ff ff72 	bl	80112a0 <std>
 80113bc:	2202      	movs	r2, #2
 80113be:	2112      	movs	r1, #18
 80113c0:	68e0      	ldr	r0, [r4, #12]
 80113c2:	f7ff ff6d 	bl	80112a0 <std>
 80113c6:	2301      	movs	r3, #1
 80113c8:	61a3      	str	r3, [r4, #24]
 80113ca:	e7d2      	b.n	8011372 <__sinit+0xe>
 80113cc:	08016210 	.word	0x08016210
 80113d0:	080112e9 	.word	0x080112e9

080113d4 <__sfp>:
 80113d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d6:	0007      	movs	r7, r0
 80113d8:	f7ff ffa4 	bl	8011324 <__sfp_lock_acquire>
 80113dc:	4b1f      	ldr	r3, [pc, #124]	; (801145c <__sfp+0x88>)
 80113de:	681e      	ldr	r6, [r3, #0]
 80113e0:	69b3      	ldr	r3, [r6, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d102      	bne.n	80113ec <__sfp+0x18>
 80113e6:	0030      	movs	r0, r6
 80113e8:	f7ff ffbc 	bl	8011364 <__sinit>
 80113ec:	3648      	adds	r6, #72	; 0x48
 80113ee:	68b4      	ldr	r4, [r6, #8]
 80113f0:	6873      	ldr	r3, [r6, #4]
 80113f2:	3b01      	subs	r3, #1
 80113f4:	d504      	bpl.n	8011400 <__sfp+0x2c>
 80113f6:	6833      	ldr	r3, [r6, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d022      	beq.n	8011442 <__sfp+0x6e>
 80113fc:	6836      	ldr	r6, [r6, #0]
 80113fe:	e7f6      	b.n	80113ee <__sfp+0x1a>
 8011400:	220c      	movs	r2, #12
 8011402:	5ea5      	ldrsh	r5, [r4, r2]
 8011404:	2d00      	cmp	r5, #0
 8011406:	d11a      	bne.n	801143e <__sfp+0x6a>
 8011408:	0020      	movs	r0, r4
 801140a:	4b15      	ldr	r3, [pc, #84]	; (8011460 <__sfp+0x8c>)
 801140c:	3058      	adds	r0, #88	; 0x58
 801140e:	60e3      	str	r3, [r4, #12]
 8011410:	6665      	str	r5, [r4, #100]	; 0x64
 8011412:	f000 f847 	bl	80114a4 <__retarget_lock_init_recursive>
 8011416:	f7ff ff8d 	bl	8011334 <__sfp_lock_release>
 801141a:	0020      	movs	r0, r4
 801141c:	2208      	movs	r2, #8
 801141e:	0029      	movs	r1, r5
 8011420:	6025      	str	r5, [r4, #0]
 8011422:	60a5      	str	r5, [r4, #8]
 8011424:	6065      	str	r5, [r4, #4]
 8011426:	6125      	str	r5, [r4, #16]
 8011428:	6165      	str	r5, [r4, #20]
 801142a:	61a5      	str	r5, [r4, #24]
 801142c:	305c      	adds	r0, #92	; 0x5c
 801142e:	f7ff fc25 	bl	8010c7c <memset>
 8011432:	6365      	str	r5, [r4, #52]	; 0x34
 8011434:	63a5      	str	r5, [r4, #56]	; 0x38
 8011436:	64a5      	str	r5, [r4, #72]	; 0x48
 8011438:	64e5      	str	r5, [r4, #76]	; 0x4c
 801143a:	0020      	movs	r0, r4
 801143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143e:	3468      	adds	r4, #104	; 0x68
 8011440:	e7d7      	b.n	80113f2 <__sfp+0x1e>
 8011442:	2104      	movs	r1, #4
 8011444:	0038      	movs	r0, r7
 8011446:	f7ff ff57 	bl	80112f8 <__sfmoreglue>
 801144a:	1e04      	subs	r4, r0, #0
 801144c:	6030      	str	r0, [r6, #0]
 801144e:	d1d5      	bne.n	80113fc <__sfp+0x28>
 8011450:	f7ff ff70 	bl	8011334 <__sfp_lock_release>
 8011454:	230c      	movs	r3, #12
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	e7ef      	b.n	801143a <__sfp+0x66>
 801145a:	46c0      	nop			; (mov r8, r8)
 801145c:	08016210 	.word	0x08016210
 8011460:	ffff0001 	.word	0xffff0001

08011464 <_fwalk_reent>:
 8011464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011466:	0004      	movs	r4, r0
 8011468:	0006      	movs	r6, r0
 801146a:	2700      	movs	r7, #0
 801146c:	9101      	str	r1, [sp, #4]
 801146e:	3448      	adds	r4, #72	; 0x48
 8011470:	6863      	ldr	r3, [r4, #4]
 8011472:	68a5      	ldr	r5, [r4, #8]
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	9b00      	ldr	r3, [sp, #0]
 8011478:	3b01      	subs	r3, #1
 801147a:	9300      	str	r3, [sp, #0]
 801147c:	d504      	bpl.n	8011488 <_fwalk_reent+0x24>
 801147e:	6824      	ldr	r4, [r4, #0]
 8011480:	2c00      	cmp	r4, #0
 8011482:	d1f5      	bne.n	8011470 <_fwalk_reent+0xc>
 8011484:	0038      	movs	r0, r7
 8011486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011488:	89ab      	ldrh	r3, [r5, #12]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d908      	bls.n	80114a0 <_fwalk_reent+0x3c>
 801148e:	220e      	movs	r2, #14
 8011490:	5eab      	ldrsh	r3, [r5, r2]
 8011492:	3301      	adds	r3, #1
 8011494:	d004      	beq.n	80114a0 <_fwalk_reent+0x3c>
 8011496:	0029      	movs	r1, r5
 8011498:	0030      	movs	r0, r6
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	4798      	blx	r3
 801149e:	4307      	orrs	r7, r0
 80114a0:	3568      	adds	r5, #104	; 0x68
 80114a2:	e7e8      	b.n	8011476 <_fwalk_reent+0x12>

080114a4 <__retarget_lock_init_recursive>:
 80114a4:	4770      	bx	lr

080114a6 <__retarget_lock_acquire_recursive>:
 80114a6:	4770      	bx	lr

080114a8 <__retarget_lock_release_recursive>:
 80114a8:	4770      	bx	lr
	...

080114ac <__swhatbuf_r>:
 80114ac:	b570      	push	{r4, r5, r6, lr}
 80114ae:	000e      	movs	r6, r1
 80114b0:	001d      	movs	r5, r3
 80114b2:	230e      	movs	r3, #14
 80114b4:	5ec9      	ldrsh	r1, [r1, r3]
 80114b6:	0014      	movs	r4, r2
 80114b8:	b096      	sub	sp, #88	; 0x58
 80114ba:	2900      	cmp	r1, #0
 80114bc:	da07      	bge.n	80114ce <__swhatbuf_r+0x22>
 80114be:	2300      	movs	r3, #0
 80114c0:	602b      	str	r3, [r5, #0]
 80114c2:	89b3      	ldrh	r3, [r6, #12]
 80114c4:	061b      	lsls	r3, r3, #24
 80114c6:	d411      	bmi.n	80114ec <__swhatbuf_r+0x40>
 80114c8:	2380      	movs	r3, #128	; 0x80
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	e00f      	b.n	80114ee <__swhatbuf_r+0x42>
 80114ce:	466a      	mov	r2, sp
 80114d0:	f000 fd20 	bl	8011f14 <_fstat_r>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	dbf2      	blt.n	80114be <__swhatbuf_r+0x12>
 80114d8:	23f0      	movs	r3, #240	; 0xf0
 80114da:	9901      	ldr	r1, [sp, #4]
 80114dc:	021b      	lsls	r3, r3, #8
 80114de:	4019      	ands	r1, r3
 80114e0:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <__swhatbuf_r+0x4c>)
 80114e2:	18c9      	adds	r1, r1, r3
 80114e4:	424b      	negs	r3, r1
 80114e6:	4159      	adcs	r1, r3
 80114e8:	6029      	str	r1, [r5, #0]
 80114ea:	e7ed      	b.n	80114c8 <__swhatbuf_r+0x1c>
 80114ec:	2340      	movs	r3, #64	; 0x40
 80114ee:	2000      	movs	r0, #0
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	b016      	add	sp, #88	; 0x58
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	46c0      	nop			; (mov r8, r8)
 80114f8:	ffffe000 	.word	0xffffe000

080114fc <__smakebuf_r>:
 80114fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114fe:	2602      	movs	r6, #2
 8011500:	898b      	ldrh	r3, [r1, #12]
 8011502:	0005      	movs	r5, r0
 8011504:	000c      	movs	r4, r1
 8011506:	4233      	tst	r3, r6
 8011508:	d006      	beq.n	8011518 <__smakebuf_r+0x1c>
 801150a:	0023      	movs	r3, r4
 801150c:	3347      	adds	r3, #71	; 0x47
 801150e:	6023      	str	r3, [r4, #0]
 8011510:	6123      	str	r3, [r4, #16]
 8011512:	2301      	movs	r3, #1
 8011514:	6163      	str	r3, [r4, #20]
 8011516:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011518:	466a      	mov	r2, sp
 801151a:	ab01      	add	r3, sp, #4
 801151c:	f7ff ffc6 	bl	80114ac <__swhatbuf_r>
 8011520:	9900      	ldr	r1, [sp, #0]
 8011522:	0007      	movs	r7, r0
 8011524:	0028      	movs	r0, r5
 8011526:	f7ff fbfb 	bl	8010d20 <_malloc_r>
 801152a:	2800      	cmp	r0, #0
 801152c:	d108      	bne.n	8011540 <__smakebuf_r+0x44>
 801152e:	220c      	movs	r2, #12
 8011530:	5ea3      	ldrsh	r3, [r4, r2]
 8011532:	059a      	lsls	r2, r3, #22
 8011534:	d4ef      	bmi.n	8011516 <__smakebuf_r+0x1a>
 8011536:	2203      	movs	r2, #3
 8011538:	4393      	bics	r3, r2
 801153a:	431e      	orrs	r6, r3
 801153c:	81a6      	strh	r6, [r4, #12]
 801153e:	e7e4      	b.n	801150a <__smakebuf_r+0xe>
 8011540:	4b0f      	ldr	r3, [pc, #60]	; (8011580 <__smakebuf_r+0x84>)
 8011542:	62ab      	str	r3, [r5, #40]	; 0x28
 8011544:	2380      	movs	r3, #128	; 0x80
 8011546:	89a2      	ldrh	r2, [r4, #12]
 8011548:	6020      	str	r0, [r4, #0]
 801154a:	4313      	orrs	r3, r2
 801154c:	81a3      	strh	r3, [r4, #12]
 801154e:	9b00      	ldr	r3, [sp, #0]
 8011550:	6120      	str	r0, [r4, #16]
 8011552:	6163      	str	r3, [r4, #20]
 8011554:	9b01      	ldr	r3, [sp, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00d      	beq.n	8011576 <__smakebuf_r+0x7a>
 801155a:	0028      	movs	r0, r5
 801155c:	230e      	movs	r3, #14
 801155e:	5ee1      	ldrsh	r1, [r4, r3]
 8011560:	f000 fcea 	bl	8011f38 <_isatty_r>
 8011564:	2800      	cmp	r0, #0
 8011566:	d006      	beq.n	8011576 <__smakebuf_r+0x7a>
 8011568:	2203      	movs	r2, #3
 801156a:	89a3      	ldrh	r3, [r4, #12]
 801156c:	4393      	bics	r3, r2
 801156e:	001a      	movs	r2, r3
 8011570:	2301      	movs	r3, #1
 8011572:	4313      	orrs	r3, r2
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	89a0      	ldrh	r0, [r4, #12]
 8011578:	4307      	orrs	r7, r0
 801157a:	81a7      	strh	r7, [r4, #12]
 801157c:	e7cb      	b.n	8011516 <__smakebuf_r+0x1a>
 801157e:	46c0      	nop			; (mov r8, r8)
 8011580:	080112e9 	.word	0x080112e9

08011584 <__malloc_lock>:
 8011584:	b510      	push	{r4, lr}
 8011586:	4802      	ldr	r0, [pc, #8]	; (8011590 <__malloc_lock+0xc>)
 8011588:	f7ff ff8d 	bl	80114a6 <__retarget_lock_acquire_recursive>
 801158c:	bd10      	pop	{r4, pc}
 801158e:	46c0      	nop			; (mov r8, r8)
 8011590:	2000075c 	.word	0x2000075c

08011594 <__malloc_unlock>:
 8011594:	b510      	push	{r4, lr}
 8011596:	4802      	ldr	r0, [pc, #8]	; (80115a0 <__malloc_unlock+0xc>)
 8011598:	f7ff ff86 	bl	80114a8 <__retarget_lock_release_recursive>
 801159c:	bd10      	pop	{r4, pc}
 801159e:	46c0      	nop			; (mov r8, r8)
 80115a0:	2000075c 	.word	0x2000075c

080115a4 <__ssputs_r>:
 80115a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a6:	688e      	ldr	r6, [r1, #8]
 80115a8:	b085      	sub	sp, #20
 80115aa:	0007      	movs	r7, r0
 80115ac:	000c      	movs	r4, r1
 80115ae:	9203      	str	r2, [sp, #12]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	429e      	cmp	r6, r3
 80115b4:	d83c      	bhi.n	8011630 <__ssputs_r+0x8c>
 80115b6:	2390      	movs	r3, #144	; 0x90
 80115b8:	898a      	ldrh	r2, [r1, #12]
 80115ba:	00db      	lsls	r3, r3, #3
 80115bc:	421a      	tst	r2, r3
 80115be:	d034      	beq.n	801162a <__ssputs_r+0x86>
 80115c0:	2503      	movs	r5, #3
 80115c2:	6909      	ldr	r1, [r1, #16]
 80115c4:	6823      	ldr	r3, [r4, #0]
 80115c6:	1a5b      	subs	r3, r3, r1
 80115c8:	9302      	str	r3, [sp, #8]
 80115ca:	6963      	ldr	r3, [r4, #20]
 80115cc:	9802      	ldr	r0, [sp, #8]
 80115ce:	435d      	muls	r5, r3
 80115d0:	0feb      	lsrs	r3, r5, #31
 80115d2:	195d      	adds	r5, r3, r5
 80115d4:	9b01      	ldr	r3, [sp, #4]
 80115d6:	106d      	asrs	r5, r5, #1
 80115d8:	3301      	adds	r3, #1
 80115da:	181b      	adds	r3, r3, r0
 80115dc:	42ab      	cmp	r3, r5
 80115de:	d900      	bls.n	80115e2 <__ssputs_r+0x3e>
 80115e0:	001d      	movs	r5, r3
 80115e2:	0553      	lsls	r3, r2, #21
 80115e4:	d532      	bpl.n	801164c <__ssputs_r+0xa8>
 80115e6:	0029      	movs	r1, r5
 80115e8:	0038      	movs	r0, r7
 80115ea:	f7ff fb99 	bl	8010d20 <_malloc_r>
 80115ee:	1e06      	subs	r6, r0, #0
 80115f0:	d109      	bne.n	8011606 <__ssputs_r+0x62>
 80115f2:	230c      	movs	r3, #12
 80115f4:	603b      	str	r3, [r7, #0]
 80115f6:	2340      	movs	r3, #64	; 0x40
 80115f8:	2001      	movs	r0, #1
 80115fa:	89a2      	ldrh	r2, [r4, #12]
 80115fc:	4240      	negs	r0, r0
 80115fe:	4313      	orrs	r3, r2
 8011600:	81a3      	strh	r3, [r4, #12]
 8011602:	b005      	add	sp, #20
 8011604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011606:	9a02      	ldr	r2, [sp, #8]
 8011608:	6921      	ldr	r1, [r4, #16]
 801160a:	f000 fcc6 	bl	8011f9a <memcpy>
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	4a14      	ldr	r2, [pc, #80]	; (8011664 <__ssputs_r+0xc0>)
 8011612:	401a      	ands	r2, r3
 8011614:	2380      	movs	r3, #128	; 0x80
 8011616:	4313      	orrs	r3, r2
 8011618:	81a3      	strh	r3, [r4, #12]
 801161a:	9b02      	ldr	r3, [sp, #8]
 801161c:	6126      	str	r6, [r4, #16]
 801161e:	18f6      	adds	r6, r6, r3
 8011620:	6026      	str	r6, [r4, #0]
 8011622:	6165      	str	r5, [r4, #20]
 8011624:	9e01      	ldr	r6, [sp, #4]
 8011626:	1aed      	subs	r5, r5, r3
 8011628:	60a5      	str	r5, [r4, #8]
 801162a:	9b01      	ldr	r3, [sp, #4]
 801162c:	429e      	cmp	r6, r3
 801162e:	d900      	bls.n	8011632 <__ssputs_r+0x8e>
 8011630:	9e01      	ldr	r6, [sp, #4]
 8011632:	0032      	movs	r2, r6
 8011634:	9903      	ldr	r1, [sp, #12]
 8011636:	6820      	ldr	r0, [r4, #0]
 8011638:	f000 fcb8 	bl	8011fac <memmove>
 801163c:	68a3      	ldr	r3, [r4, #8]
 801163e:	2000      	movs	r0, #0
 8011640:	1b9b      	subs	r3, r3, r6
 8011642:	60a3      	str	r3, [r4, #8]
 8011644:	6823      	ldr	r3, [r4, #0]
 8011646:	199e      	adds	r6, r3, r6
 8011648:	6026      	str	r6, [r4, #0]
 801164a:	e7da      	b.n	8011602 <__ssputs_r+0x5e>
 801164c:	002a      	movs	r2, r5
 801164e:	0038      	movs	r0, r7
 8011650:	f000 fcbf 	bl	8011fd2 <_realloc_r>
 8011654:	1e06      	subs	r6, r0, #0
 8011656:	d1e0      	bne.n	801161a <__ssputs_r+0x76>
 8011658:	0038      	movs	r0, r7
 801165a:	6921      	ldr	r1, [r4, #16]
 801165c:	f7ff fb16 	bl	8010c8c <_free_r>
 8011660:	e7c7      	b.n	80115f2 <__ssputs_r+0x4e>
 8011662:	46c0      	nop			; (mov r8, r8)
 8011664:	fffffb7f 	.word	0xfffffb7f

08011668 <_svfiprintf_r>:
 8011668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166a:	b0a1      	sub	sp, #132	; 0x84
 801166c:	9003      	str	r0, [sp, #12]
 801166e:	001d      	movs	r5, r3
 8011670:	898b      	ldrh	r3, [r1, #12]
 8011672:	000f      	movs	r7, r1
 8011674:	0016      	movs	r6, r2
 8011676:	061b      	lsls	r3, r3, #24
 8011678:	d511      	bpl.n	801169e <_svfiprintf_r+0x36>
 801167a:	690b      	ldr	r3, [r1, #16]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d10e      	bne.n	801169e <_svfiprintf_r+0x36>
 8011680:	2140      	movs	r1, #64	; 0x40
 8011682:	f7ff fb4d 	bl	8010d20 <_malloc_r>
 8011686:	6038      	str	r0, [r7, #0]
 8011688:	6138      	str	r0, [r7, #16]
 801168a:	2800      	cmp	r0, #0
 801168c:	d105      	bne.n	801169a <_svfiprintf_r+0x32>
 801168e:	230c      	movs	r3, #12
 8011690:	9a03      	ldr	r2, [sp, #12]
 8011692:	3801      	subs	r0, #1
 8011694:	6013      	str	r3, [r2, #0]
 8011696:	b021      	add	sp, #132	; 0x84
 8011698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169a:	2340      	movs	r3, #64	; 0x40
 801169c:	617b      	str	r3, [r7, #20]
 801169e:	2300      	movs	r3, #0
 80116a0:	ac08      	add	r4, sp, #32
 80116a2:	6163      	str	r3, [r4, #20]
 80116a4:	3320      	adds	r3, #32
 80116a6:	7663      	strb	r3, [r4, #25]
 80116a8:	3310      	adds	r3, #16
 80116aa:	76a3      	strb	r3, [r4, #26]
 80116ac:	9507      	str	r5, [sp, #28]
 80116ae:	0035      	movs	r5, r6
 80116b0:	782b      	ldrb	r3, [r5, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d001      	beq.n	80116ba <_svfiprintf_r+0x52>
 80116b6:	2b25      	cmp	r3, #37	; 0x25
 80116b8:	d147      	bne.n	801174a <_svfiprintf_r+0xe2>
 80116ba:	1bab      	subs	r3, r5, r6
 80116bc:	9305      	str	r3, [sp, #20]
 80116be:	42b5      	cmp	r5, r6
 80116c0:	d00c      	beq.n	80116dc <_svfiprintf_r+0x74>
 80116c2:	0032      	movs	r2, r6
 80116c4:	0039      	movs	r1, r7
 80116c6:	9803      	ldr	r0, [sp, #12]
 80116c8:	f7ff ff6c 	bl	80115a4 <__ssputs_r>
 80116cc:	1c43      	adds	r3, r0, #1
 80116ce:	d100      	bne.n	80116d2 <_svfiprintf_r+0x6a>
 80116d0:	e0ae      	b.n	8011830 <_svfiprintf_r+0x1c8>
 80116d2:	6962      	ldr	r2, [r4, #20]
 80116d4:	9b05      	ldr	r3, [sp, #20]
 80116d6:	4694      	mov	ip, r2
 80116d8:	4463      	add	r3, ip
 80116da:	6163      	str	r3, [r4, #20]
 80116dc:	782b      	ldrb	r3, [r5, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d100      	bne.n	80116e4 <_svfiprintf_r+0x7c>
 80116e2:	e0a5      	b.n	8011830 <_svfiprintf_r+0x1c8>
 80116e4:	2201      	movs	r2, #1
 80116e6:	2300      	movs	r3, #0
 80116e8:	4252      	negs	r2, r2
 80116ea:	6062      	str	r2, [r4, #4]
 80116ec:	a904      	add	r1, sp, #16
 80116ee:	3254      	adds	r2, #84	; 0x54
 80116f0:	1852      	adds	r2, r2, r1
 80116f2:	1c6e      	adds	r6, r5, #1
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	60e3      	str	r3, [r4, #12]
 80116f8:	60a3      	str	r3, [r4, #8]
 80116fa:	7013      	strb	r3, [r2, #0]
 80116fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80116fe:	2205      	movs	r2, #5
 8011700:	7831      	ldrb	r1, [r6, #0]
 8011702:	4854      	ldr	r0, [pc, #336]	; (8011854 <_svfiprintf_r+0x1ec>)
 8011704:	f000 fc3e 	bl	8011f84 <memchr>
 8011708:	1c75      	adds	r5, r6, #1
 801170a:	2800      	cmp	r0, #0
 801170c:	d11f      	bne.n	801174e <_svfiprintf_r+0xe6>
 801170e:	6822      	ldr	r2, [r4, #0]
 8011710:	06d3      	lsls	r3, r2, #27
 8011712:	d504      	bpl.n	801171e <_svfiprintf_r+0xb6>
 8011714:	2353      	movs	r3, #83	; 0x53
 8011716:	a904      	add	r1, sp, #16
 8011718:	185b      	adds	r3, r3, r1
 801171a:	2120      	movs	r1, #32
 801171c:	7019      	strb	r1, [r3, #0]
 801171e:	0713      	lsls	r3, r2, #28
 8011720:	d504      	bpl.n	801172c <_svfiprintf_r+0xc4>
 8011722:	2353      	movs	r3, #83	; 0x53
 8011724:	a904      	add	r1, sp, #16
 8011726:	185b      	adds	r3, r3, r1
 8011728:	212b      	movs	r1, #43	; 0x2b
 801172a:	7019      	strb	r1, [r3, #0]
 801172c:	7833      	ldrb	r3, [r6, #0]
 801172e:	2b2a      	cmp	r3, #42	; 0x2a
 8011730:	d016      	beq.n	8011760 <_svfiprintf_r+0xf8>
 8011732:	0035      	movs	r5, r6
 8011734:	2100      	movs	r1, #0
 8011736:	200a      	movs	r0, #10
 8011738:	68e3      	ldr	r3, [r4, #12]
 801173a:	782a      	ldrb	r2, [r5, #0]
 801173c:	1c6e      	adds	r6, r5, #1
 801173e:	3a30      	subs	r2, #48	; 0x30
 8011740:	2a09      	cmp	r2, #9
 8011742:	d94e      	bls.n	80117e2 <_svfiprintf_r+0x17a>
 8011744:	2900      	cmp	r1, #0
 8011746:	d111      	bne.n	801176c <_svfiprintf_r+0x104>
 8011748:	e017      	b.n	801177a <_svfiprintf_r+0x112>
 801174a:	3501      	adds	r5, #1
 801174c:	e7b0      	b.n	80116b0 <_svfiprintf_r+0x48>
 801174e:	4b41      	ldr	r3, [pc, #260]	; (8011854 <_svfiprintf_r+0x1ec>)
 8011750:	6822      	ldr	r2, [r4, #0]
 8011752:	1ac0      	subs	r0, r0, r3
 8011754:	2301      	movs	r3, #1
 8011756:	4083      	lsls	r3, r0
 8011758:	4313      	orrs	r3, r2
 801175a:	002e      	movs	r6, r5
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	e7ce      	b.n	80116fe <_svfiprintf_r+0x96>
 8011760:	9b07      	ldr	r3, [sp, #28]
 8011762:	1d19      	adds	r1, r3, #4
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	9107      	str	r1, [sp, #28]
 8011768:	2b00      	cmp	r3, #0
 801176a:	db01      	blt.n	8011770 <_svfiprintf_r+0x108>
 801176c:	930b      	str	r3, [sp, #44]	; 0x2c
 801176e:	e004      	b.n	801177a <_svfiprintf_r+0x112>
 8011770:	425b      	negs	r3, r3
 8011772:	60e3      	str	r3, [r4, #12]
 8011774:	2302      	movs	r3, #2
 8011776:	4313      	orrs	r3, r2
 8011778:	6023      	str	r3, [r4, #0]
 801177a:	782b      	ldrb	r3, [r5, #0]
 801177c:	2b2e      	cmp	r3, #46	; 0x2e
 801177e:	d10a      	bne.n	8011796 <_svfiprintf_r+0x12e>
 8011780:	786b      	ldrb	r3, [r5, #1]
 8011782:	2b2a      	cmp	r3, #42	; 0x2a
 8011784:	d135      	bne.n	80117f2 <_svfiprintf_r+0x18a>
 8011786:	9b07      	ldr	r3, [sp, #28]
 8011788:	3502      	adds	r5, #2
 801178a:	1d1a      	adds	r2, r3, #4
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	9207      	str	r2, [sp, #28]
 8011790:	2b00      	cmp	r3, #0
 8011792:	db2b      	blt.n	80117ec <_svfiprintf_r+0x184>
 8011794:	9309      	str	r3, [sp, #36]	; 0x24
 8011796:	4e30      	ldr	r6, [pc, #192]	; (8011858 <_svfiprintf_r+0x1f0>)
 8011798:	2203      	movs	r2, #3
 801179a:	0030      	movs	r0, r6
 801179c:	7829      	ldrb	r1, [r5, #0]
 801179e:	f000 fbf1 	bl	8011f84 <memchr>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	d006      	beq.n	80117b4 <_svfiprintf_r+0x14c>
 80117a6:	2340      	movs	r3, #64	; 0x40
 80117a8:	1b80      	subs	r0, r0, r6
 80117aa:	4083      	lsls	r3, r0
 80117ac:	6822      	ldr	r2, [r4, #0]
 80117ae:	3501      	adds	r5, #1
 80117b0:	4313      	orrs	r3, r2
 80117b2:	6023      	str	r3, [r4, #0]
 80117b4:	7829      	ldrb	r1, [r5, #0]
 80117b6:	2206      	movs	r2, #6
 80117b8:	4828      	ldr	r0, [pc, #160]	; (801185c <_svfiprintf_r+0x1f4>)
 80117ba:	1c6e      	adds	r6, r5, #1
 80117bc:	7621      	strb	r1, [r4, #24]
 80117be:	f000 fbe1 	bl	8011f84 <memchr>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d03c      	beq.n	8011840 <_svfiprintf_r+0x1d8>
 80117c6:	4b26      	ldr	r3, [pc, #152]	; (8011860 <_svfiprintf_r+0x1f8>)
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d125      	bne.n	8011818 <_svfiprintf_r+0x1b0>
 80117cc:	2207      	movs	r2, #7
 80117ce:	9b07      	ldr	r3, [sp, #28]
 80117d0:	3307      	adds	r3, #7
 80117d2:	4393      	bics	r3, r2
 80117d4:	3308      	adds	r3, #8
 80117d6:	9307      	str	r3, [sp, #28]
 80117d8:	6963      	ldr	r3, [r4, #20]
 80117da:	9a04      	ldr	r2, [sp, #16]
 80117dc:	189b      	adds	r3, r3, r2
 80117de:	6163      	str	r3, [r4, #20]
 80117e0:	e765      	b.n	80116ae <_svfiprintf_r+0x46>
 80117e2:	4343      	muls	r3, r0
 80117e4:	0035      	movs	r5, r6
 80117e6:	2101      	movs	r1, #1
 80117e8:	189b      	adds	r3, r3, r2
 80117ea:	e7a6      	b.n	801173a <_svfiprintf_r+0xd2>
 80117ec:	2301      	movs	r3, #1
 80117ee:	425b      	negs	r3, r3
 80117f0:	e7d0      	b.n	8011794 <_svfiprintf_r+0x12c>
 80117f2:	2300      	movs	r3, #0
 80117f4:	200a      	movs	r0, #10
 80117f6:	001a      	movs	r2, r3
 80117f8:	3501      	adds	r5, #1
 80117fa:	6063      	str	r3, [r4, #4]
 80117fc:	7829      	ldrb	r1, [r5, #0]
 80117fe:	1c6e      	adds	r6, r5, #1
 8011800:	3930      	subs	r1, #48	; 0x30
 8011802:	2909      	cmp	r1, #9
 8011804:	d903      	bls.n	801180e <_svfiprintf_r+0x1a6>
 8011806:	2b00      	cmp	r3, #0
 8011808:	d0c5      	beq.n	8011796 <_svfiprintf_r+0x12e>
 801180a:	9209      	str	r2, [sp, #36]	; 0x24
 801180c:	e7c3      	b.n	8011796 <_svfiprintf_r+0x12e>
 801180e:	4342      	muls	r2, r0
 8011810:	0035      	movs	r5, r6
 8011812:	2301      	movs	r3, #1
 8011814:	1852      	adds	r2, r2, r1
 8011816:	e7f1      	b.n	80117fc <_svfiprintf_r+0x194>
 8011818:	ab07      	add	r3, sp, #28
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	003a      	movs	r2, r7
 801181e:	0021      	movs	r1, r4
 8011820:	4b10      	ldr	r3, [pc, #64]	; (8011864 <_svfiprintf_r+0x1fc>)
 8011822:	9803      	ldr	r0, [sp, #12]
 8011824:	e000      	b.n	8011828 <_svfiprintf_r+0x1c0>
 8011826:	bf00      	nop
 8011828:	9004      	str	r0, [sp, #16]
 801182a:	9b04      	ldr	r3, [sp, #16]
 801182c:	3301      	adds	r3, #1
 801182e:	d1d3      	bne.n	80117d8 <_svfiprintf_r+0x170>
 8011830:	89bb      	ldrh	r3, [r7, #12]
 8011832:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011834:	065b      	lsls	r3, r3, #25
 8011836:	d400      	bmi.n	801183a <_svfiprintf_r+0x1d2>
 8011838:	e72d      	b.n	8011696 <_svfiprintf_r+0x2e>
 801183a:	2001      	movs	r0, #1
 801183c:	4240      	negs	r0, r0
 801183e:	e72a      	b.n	8011696 <_svfiprintf_r+0x2e>
 8011840:	ab07      	add	r3, sp, #28
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	003a      	movs	r2, r7
 8011846:	0021      	movs	r1, r4
 8011848:	4b06      	ldr	r3, [pc, #24]	; (8011864 <_svfiprintf_r+0x1fc>)
 801184a:	9803      	ldr	r0, [sp, #12]
 801184c:	f000 f9de 	bl	8011c0c <_printf_i>
 8011850:	e7ea      	b.n	8011828 <_svfiprintf_r+0x1c0>
 8011852:	46c0      	nop			; (mov r8, r8)
 8011854:	08016274 	.word	0x08016274
 8011858:	0801627a 	.word	0x0801627a
 801185c:	0801627e 	.word	0x0801627e
 8011860:	00000000 	.word	0x00000000
 8011864:	080115a5 	.word	0x080115a5

08011868 <__sfputc_r>:
 8011868:	6893      	ldr	r3, [r2, #8]
 801186a:	b510      	push	{r4, lr}
 801186c:	3b01      	subs	r3, #1
 801186e:	6093      	str	r3, [r2, #8]
 8011870:	2b00      	cmp	r3, #0
 8011872:	da04      	bge.n	801187e <__sfputc_r+0x16>
 8011874:	6994      	ldr	r4, [r2, #24]
 8011876:	42a3      	cmp	r3, r4
 8011878:	db07      	blt.n	801188a <__sfputc_r+0x22>
 801187a:	290a      	cmp	r1, #10
 801187c:	d005      	beq.n	801188a <__sfputc_r+0x22>
 801187e:	6813      	ldr	r3, [r2, #0]
 8011880:	1c58      	adds	r0, r3, #1
 8011882:	6010      	str	r0, [r2, #0]
 8011884:	7019      	strb	r1, [r3, #0]
 8011886:	0008      	movs	r0, r1
 8011888:	bd10      	pop	{r4, pc}
 801188a:	f7ff fb6f 	bl	8010f6c <__swbuf_r>
 801188e:	0001      	movs	r1, r0
 8011890:	e7f9      	b.n	8011886 <__sfputc_r+0x1e>

08011892 <__sfputs_r>:
 8011892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011894:	0006      	movs	r6, r0
 8011896:	000f      	movs	r7, r1
 8011898:	0014      	movs	r4, r2
 801189a:	18d5      	adds	r5, r2, r3
 801189c:	42ac      	cmp	r4, r5
 801189e:	d101      	bne.n	80118a4 <__sfputs_r+0x12>
 80118a0:	2000      	movs	r0, #0
 80118a2:	e007      	b.n	80118b4 <__sfputs_r+0x22>
 80118a4:	7821      	ldrb	r1, [r4, #0]
 80118a6:	003a      	movs	r2, r7
 80118a8:	0030      	movs	r0, r6
 80118aa:	f7ff ffdd 	bl	8011868 <__sfputc_r>
 80118ae:	3401      	adds	r4, #1
 80118b0:	1c43      	adds	r3, r0, #1
 80118b2:	d1f3      	bne.n	801189c <__sfputs_r+0xa>
 80118b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118b8 <_vfiprintf_r>:
 80118b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ba:	b0a1      	sub	sp, #132	; 0x84
 80118bc:	0006      	movs	r6, r0
 80118be:	000c      	movs	r4, r1
 80118c0:	001f      	movs	r7, r3
 80118c2:	9203      	str	r2, [sp, #12]
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d004      	beq.n	80118d2 <_vfiprintf_r+0x1a>
 80118c8:	6983      	ldr	r3, [r0, #24]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <_vfiprintf_r+0x1a>
 80118ce:	f7ff fd49 	bl	8011364 <__sinit>
 80118d2:	4b8e      	ldr	r3, [pc, #568]	; (8011b0c <_vfiprintf_r+0x254>)
 80118d4:	429c      	cmp	r4, r3
 80118d6:	d11c      	bne.n	8011912 <_vfiprintf_r+0x5a>
 80118d8:	6874      	ldr	r4, [r6, #4]
 80118da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118dc:	07db      	lsls	r3, r3, #31
 80118de:	d405      	bmi.n	80118ec <_vfiprintf_r+0x34>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	059b      	lsls	r3, r3, #22
 80118e4:	d402      	bmi.n	80118ec <_vfiprintf_r+0x34>
 80118e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118e8:	f7ff fddd 	bl	80114a6 <__retarget_lock_acquire_recursive>
 80118ec:	89a3      	ldrh	r3, [r4, #12]
 80118ee:	071b      	lsls	r3, r3, #28
 80118f0:	d502      	bpl.n	80118f8 <_vfiprintf_r+0x40>
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d11d      	bne.n	8011934 <_vfiprintf_r+0x7c>
 80118f8:	0021      	movs	r1, r4
 80118fa:	0030      	movs	r0, r6
 80118fc:	f7ff fb8c 	bl	8011018 <__swsetup_r>
 8011900:	2800      	cmp	r0, #0
 8011902:	d017      	beq.n	8011934 <_vfiprintf_r+0x7c>
 8011904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011906:	07db      	lsls	r3, r3, #31
 8011908:	d50d      	bpl.n	8011926 <_vfiprintf_r+0x6e>
 801190a:	2001      	movs	r0, #1
 801190c:	4240      	negs	r0, r0
 801190e:	b021      	add	sp, #132	; 0x84
 8011910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011912:	4b7f      	ldr	r3, [pc, #508]	; (8011b10 <_vfiprintf_r+0x258>)
 8011914:	429c      	cmp	r4, r3
 8011916:	d101      	bne.n	801191c <_vfiprintf_r+0x64>
 8011918:	68b4      	ldr	r4, [r6, #8]
 801191a:	e7de      	b.n	80118da <_vfiprintf_r+0x22>
 801191c:	4b7d      	ldr	r3, [pc, #500]	; (8011b14 <_vfiprintf_r+0x25c>)
 801191e:	429c      	cmp	r4, r3
 8011920:	d1db      	bne.n	80118da <_vfiprintf_r+0x22>
 8011922:	68f4      	ldr	r4, [r6, #12]
 8011924:	e7d9      	b.n	80118da <_vfiprintf_r+0x22>
 8011926:	89a3      	ldrh	r3, [r4, #12]
 8011928:	059b      	lsls	r3, r3, #22
 801192a:	d4ee      	bmi.n	801190a <_vfiprintf_r+0x52>
 801192c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801192e:	f7ff fdbb 	bl	80114a8 <__retarget_lock_release_recursive>
 8011932:	e7ea      	b.n	801190a <_vfiprintf_r+0x52>
 8011934:	2300      	movs	r3, #0
 8011936:	ad08      	add	r5, sp, #32
 8011938:	616b      	str	r3, [r5, #20]
 801193a:	3320      	adds	r3, #32
 801193c:	766b      	strb	r3, [r5, #25]
 801193e:	3310      	adds	r3, #16
 8011940:	76ab      	strb	r3, [r5, #26]
 8011942:	9707      	str	r7, [sp, #28]
 8011944:	9f03      	ldr	r7, [sp, #12]
 8011946:	783b      	ldrb	r3, [r7, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <_vfiprintf_r+0x98>
 801194c:	2b25      	cmp	r3, #37	; 0x25
 801194e:	d14e      	bne.n	80119ee <_vfiprintf_r+0x136>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	1afb      	subs	r3, r7, r3
 8011954:	9305      	str	r3, [sp, #20]
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	429f      	cmp	r7, r3
 801195a:	d00d      	beq.n	8011978 <_vfiprintf_r+0xc0>
 801195c:	9b05      	ldr	r3, [sp, #20]
 801195e:	0021      	movs	r1, r4
 8011960:	0030      	movs	r0, r6
 8011962:	9a03      	ldr	r2, [sp, #12]
 8011964:	f7ff ff95 	bl	8011892 <__sfputs_r>
 8011968:	1c43      	adds	r3, r0, #1
 801196a:	d100      	bne.n	801196e <_vfiprintf_r+0xb6>
 801196c:	e0b5      	b.n	8011ada <_vfiprintf_r+0x222>
 801196e:	696a      	ldr	r2, [r5, #20]
 8011970:	9b05      	ldr	r3, [sp, #20]
 8011972:	4694      	mov	ip, r2
 8011974:	4463      	add	r3, ip
 8011976:	616b      	str	r3, [r5, #20]
 8011978:	783b      	ldrb	r3, [r7, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d100      	bne.n	8011980 <_vfiprintf_r+0xc8>
 801197e:	e0ac      	b.n	8011ada <_vfiprintf_r+0x222>
 8011980:	2201      	movs	r2, #1
 8011982:	1c7b      	adds	r3, r7, #1
 8011984:	9303      	str	r3, [sp, #12]
 8011986:	2300      	movs	r3, #0
 8011988:	4252      	negs	r2, r2
 801198a:	606a      	str	r2, [r5, #4]
 801198c:	a904      	add	r1, sp, #16
 801198e:	3254      	adds	r2, #84	; 0x54
 8011990:	1852      	adds	r2, r2, r1
 8011992:	602b      	str	r3, [r5, #0]
 8011994:	60eb      	str	r3, [r5, #12]
 8011996:	60ab      	str	r3, [r5, #8]
 8011998:	7013      	strb	r3, [r2, #0]
 801199a:	65ab      	str	r3, [r5, #88]	; 0x58
 801199c:	9b03      	ldr	r3, [sp, #12]
 801199e:	2205      	movs	r2, #5
 80119a0:	7819      	ldrb	r1, [r3, #0]
 80119a2:	485d      	ldr	r0, [pc, #372]	; (8011b18 <_vfiprintf_r+0x260>)
 80119a4:	f000 faee 	bl	8011f84 <memchr>
 80119a8:	9b03      	ldr	r3, [sp, #12]
 80119aa:	1c5f      	adds	r7, r3, #1
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d120      	bne.n	80119f2 <_vfiprintf_r+0x13a>
 80119b0:	682a      	ldr	r2, [r5, #0]
 80119b2:	06d3      	lsls	r3, r2, #27
 80119b4:	d504      	bpl.n	80119c0 <_vfiprintf_r+0x108>
 80119b6:	2353      	movs	r3, #83	; 0x53
 80119b8:	a904      	add	r1, sp, #16
 80119ba:	185b      	adds	r3, r3, r1
 80119bc:	2120      	movs	r1, #32
 80119be:	7019      	strb	r1, [r3, #0]
 80119c0:	0713      	lsls	r3, r2, #28
 80119c2:	d504      	bpl.n	80119ce <_vfiprintf_r+0x116>
 80119c4:	2353      	movs	r3, #83	; 0x53
 80119c6:	a904      	add	r1, sp, #16
 80119c8:	185b      	adds	r3, r3, r1
 80119ca:	212b      	movs	r1, #43	; 0x2b
 80119cc:	7019      	strb	r1, [r3, #0]
 80119ce:	9b03      	ldr	r3, [sp, #12]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b2a      	cmp	r3, #42	; 0x2a
 80119d4:	d016      	beq.n	8011a04 <_vfiprintf_r+0x14c>
 80119d6:	2100      	movs	r1, #0
 80119d8:	68eb      	ldr	r3, [r5, #12]
 80119da:	9f03      	ldr	r7, [sp, #12]
 80119dc:	783a      	ldrb	r2, [r7, #0]
 80119de:	1c78      	adds	r0, r7, #1
 80119e0:	3a30      	subs	r2, #48	; 0x30
 80119e2:	4684      	mov	ip, r0
 80119e4:	2a09      	cmp	r2, #9
 80119e6:	d94f      	bls.n	8011a88 <_vfiprintf_r+0x1d0>
 80119e8:	2900      	cmp	r1, #0
 80119ea:	d111      	bne.n	8011a10 <_vfiprintf_r+0x158>
 80119ec:	e017      	b.n	8011a1e <_vfiprintf_r+0x166>
 80119ee:	3701      	adds	r7, #1
 80119f0:	e7a9      	b.n	8011946 <_vfiprintf_r+0x8e>
 80119f2:	4b49      	ldr	r3, [pc, #292]	; (8011b18 <_vfiprintf_r+0x260>)
 80119f4:	682a      	ldr	r2, [r5, #0]
 80119f6:	1ac0      	subs	r0, r0, r3
 80119f8:	2301      	movs	r3, #1
 80119fa:	4083      	lsls	r3, r0
 80119fc:	4313      	orrs	r3, r2
 80119fe:	602b      	str	r3, [r5, #0]
 8011a00:	9703      	str	r7, [sp, #12]
 8011a02:	e7cb      	b.n	801199c <_vfiprintf_r+0xe4>
 8011a04:	9b07      	ldr	r3, [sp, #28]
 8011a06:	1d19      	adds	r1, r3, #4
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	9107      	str	r1, [sp, #28]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	db01      	blt.n	8011a14 <_vfiprintf_r+0x15c>
 8011a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a12:	e004      	b.n	8011a1e <_vfiprintf_r+0x166>
 8011a14:	425b      	negs	r3, r3
 8011a16:	60eb      	str	r3, [r5, #12]
 8011a18:	2302      	movs	r3, #2
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	602b      	str	r3, [r5, #0]
 8011a1e:	783b      	ldrb	r3, [r7, #0]
 8011a20:	2b2e      	cmp	r3, #46	; 0x2e
 8011a22:	d10a      	bne.n	8011a3a <_vfiprintf_r+0x182>
 8011a24:	787b      	ldrb	r3, [r7, #1]
 8011a26:	2b2a      	cmp	r3, #42	; 0x2a
 8011a28:	d137      	bne.n	8011a9a <_vfiprintf_r+0x1e2>
 8011a2a:	9b07      	ldr	r3, [sp, #28]
 8011a2c:	3702      	adds	r7, #2
 8011a2e:	1d1a      	adds	r2, r3, #4
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	9207      	str	r2, [sp, #28]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	db2d      	blt.n	8011a94 <_vfiprintf_r+0x1dc>
 8011a38:	9309      	str	r3, [sp, #36]	; 0x24
 8011a3a:	2203      	movs	r2, #3
 8011a3c:	7839      	ldrb	r1, [r7, #0]
 8011a3e:	4837      	ldr	r0, [pc, #220]	; (8011b1c <_vfiprintf_r+0x264>)
 8011a40:	f000 faa0 	bl	8011f84 <memchr>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d007      	beq.n	8011a58 <_vfiprintf_r+0x1a0>
 8011a48:	4b34      	ldr	r3, [pc, #208]	; (8011b1c <_vfiprintf_r+0x264>)
 8011a4a:	682a      	ldr	r2, [r5, #0]
 8011a4c:	1ac0      	subs	r0, r0, r3
 8011a4e:	2340      	movs	r3, #64	; 0x40
 8011a50:	4083      	lsls	r3, r0
 8011a52:	4313      	orrs	r3, r2
 8011a54:	3701      	adds	r7, #1
 8011a56:	602b      	str	r3, [r5, #0]
 8011a58:	7839      	ldrb	r1, [r7, #0]
 8011a5a:	1c7b      	adds	r3, r7, #1
 8011a5c:	2206      	movs	r2, #6
 8011a5e:	4830      	ldr	r0, [pc, #192]	; (8011b20 <_vfiprintf_r+0x268>)
 8011a60:	9303      	str	r3, [sp, #12]
 8011a62:	7629      	strb	r1, [r5, #24]
 8011a64:	f000 fa8e 	bl	8011f84 <memchr>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d045      	beq.n	8011af8 <_vfiprintf_r+0x240>
 8011a6c:	4b2d      	ldr	r3, [pc, #180]	; (8011b24 <_vfiprintf_r+0x26c>)
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d127      	bne.n	8011ac2 <_vfiprintf_r+0x20a>
 8011a72:	2207      	movs	r2, #7
 8011a74:	9b07      	ldr	r3, [sp, #28]
 8011a76:	3307      	adds	r3, #7
 8011a78:	4393      	bics	r3, r2
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	9307      	str	r3, [sp, #28]
 8011a7e:	696b      	ldr	r3, [r5, #20]
 8011a80:	9a04      	ldr	r2, [sp, #16]
 8011a82:	189b      	adds	r3, r3, r2
 8011a84:	616b      	str	r3, [r5, #20]
 8011a86:	e75d      	b.n	8011944 <_vfiprintf_r+0x8c>
 8011a88:	210a      	movs	r1, #10
 8011a8a:	434b      	muls	r3, r1
 8011a8c:	4667      	mov	r7, ip
 8011a8e:	189b      	adds	r3, r3, r2
 8011a90:	3909      	subs	r1, #9
 8011a92:	e7a3      	b.n	80119dc <_vfiprintf_r+0x124>
 8011a94:	2301      	movs	r3, #1
 8011a96:	425b      	negs	r3, r3
 8011a98:	e7ce      	b.n	8011a38 <_vfiprintf_r+0x180>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	001a      	movs	r2, r3
 8011a9e:	3701      	adds	r7, #1
 8011aa0:	606b      	str	r3, [r5, #4]
 8011aa2:	7839      	ldrb	r1, [r7, #0]
 8011aa4:	1c78      	adds	r0, r7, #1
 8011aa6:	3930      	subs	r1, #48	; 0x30
 8011aa8:	4684      	mov	ip, r0
 8011aaa:	2909      	cmp	r1, #9
 8011aac:	d903      	bls.n	8011ab6 <_vfiprintf_r+0x1fe>
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d0c3      	beq.n	8011a3a <_vfiprintf_r+0x182>
 8011ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ab4:	e7c1      	b.n	8011a3a <_vfiprintf_r+0x182>
 8011ab6:	230a      	movs	r3, #10
 8011ab8:	435a      	muls	r2, r3
 8011aba:	4667      	mov	r7, ip
 8011abc:	1852      	adds	r2, r2, r1
 8011abe:	3b09      	subs	r3, #9
 8011ac0:	e7ef      	b.n	8011aa2 <_vfiprintf_r+0x1ea>
 8011ac2:	ab07      	add	r3, sp, #28
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	0022      	movs	r2, r4
 8011ac8:	0029      	movs	r1, r5
 8011aca:	0030      	movs	r0, r6
 8011acc:	4b16      	ldr	r3, [pc, #88]	; (8011b28 <_vfiprintf_r+0x270>)
 8011ace:	e000      	b.n	8011ad2 <_vfiprintf_r+0x21a>
 8011ad0:	bf00      	nop
 8011ad2:	9004      	str	r0, [sp, #16]
 8011ad4:	9b04      	ldr	r3, [sp, #16]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	d1d1      	bne.n	8011a7e <_vfiprintf_r+0x1c6>
 8011ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011adc:	07db      	lsls	r3, r3, #31
 8011ade:	d405      	bmi.n	8011aec <_vfiprintf_r+0x234>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	059b      	lsls	r3, r3, #22
 8011ae4:	d402      	bmi.n	8011aec <_vfiprintf_r+0x234>
 8011ae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ae8:	f7ff fcde 	bl	80114a8 <__retarget_lock_release_recursive>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	065b      	lsls	r3, r3, #25
 8011af0:	d500      	bpl.n	8011af4 <_vfiprintf_r+0x23c>
 8011af2:	e70a      	b.n	801190a <_vfiprintf_r+0x52>
 8011af4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011af6:	e70a      	b.n	801190e <_vfiprintf_r+0x56>
 8011af8:	ab07      	add	r3, sp, #28
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	0022      	movs	r2, r4
 8011afe:	0029      	movs	r1, r5
 8011b00:	0030      	movs	r0, r6
 8011b02:	4b09      	ldr	r3, [pc, #36]	; (8011b28 <_vfiprintf_r+0x270>)
 8011b04:	f000 f882 	bl	8011c0c <_printf_i>
 8011b08:	e7e3      	b.n	8011ad2 <_vfiprintf_r+0x21a>
 8011b0a:	46c0      	nop			; (mov r8, r8)
 8011b0c:	08016234 	.word	0x08016234
 8011b10:	08016254 	.word	0x08016254
 8011b14:	08016214 	.word	0x08016214
 8011b18:	08016274 	.word	0x08016274
 8011b1c:	0801627a 	.word	0x0801627a
 8011b20:	0801627e 	.word	0x0801627e
 8011b24:	00000000 	.word	0x00000000
 8011b28:	08011893 	.word	0x08011893

08011b2c <_printf_common>:
 8011b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b2e:	0015      	movs	r5, r2
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	688a      	ldr	r2, [r1, #8]
 8011b34:	690b      	ldr	r3, [r1, #16]
 8011b36:	000c      	movs	r4, r1
 8011b38:	9000      	str	r0, [sp, #0]
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	da00      	bge.n	8011b40 <_printf_common+0x14>
 8011b3e:	0013      	movs	r3, r2
 8011b40:	0022      	movs	r2, r4
 8011b42:	602b      	str	r3, [r5, #0]
 8011b44:	3243      	adds	r2, #67	; 0x43
 8011b46:	7812      	ldrb	r2, [r2, #0]
 8011b48:	2a00      	cmp	r2, #0
 8011b4a:	d001      	beq.n	8011b50 <_printf_common+0x24>
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	602b      	str	r3, [r5, #0]
 8011b50:	6823      	ldr	r3, [r4, #0]
 8011b52:	069b      	lsls	r3, r3, #26
 8011b54:	d502      	bpl.n	8011b5c <_printf_common+0x30>
 8011b56:	682b      	ldr	r3, [r5, #0]
 8011b58:	3302      	adds	r3, #2
 8011b5a:	602b      	str	r3, [r5, #0]
 8011b5c:	6822      	ldr	r2, [r4, #0]
 8011b5e:	2306      	movs	r3, #6
 8011b60:	0017      	movs	r7, r2
 8011b62:	401f      	ands	r7, r3
 8011b64:	421a      	tst	r2, r3
 8011b66:	d027      	beq.n	8011bb8 <_printf_common+0x8c>
 8011b68:	0023      	movs	r3, r4
 8011b6a:	3343      	adds	r3, #67	; 0x43
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	1e5a      	subs	r2, r3, #1
 8011b70:	4193      	sbcs	r3, r2
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	0692      	lsls	r2, r2, #26
 8011b76:	d430      	bmi.n	8011bda <_printf_common+0xae>
 8011b78:	0022      	movs	r2, r4
 8011b7a:	9901      	ldr	r1, [sp, #4]
 8011b7c:	9800      	ldr	r0, [sp, #0]
 8011b7e:	9e08      	ldr	r6, [sp, #32]
 8011b80:	3243      	adds	r2, #67	; 0x43
 8011b82:	47b0      	blx	r6
 8011b84:	1c43      	adds	r3, r0, #1
 8011b86:	d025      	beq.n	8011bd4 <_printf_common+0xa8>
 8011b88:	2306      	movs	r3, #6
 8011b8a:	6820      	ldr	r0, [r4, #0]
 8011b8c:	682a      	ldr	r2, [r5, #0]
 8011b8e:	68e1      	ldr	r1, [r4, #12]
 8011b90:	2500      	movs	r5, #0
 8011b92:	4003      	ands	r3, r0
 8011b94:	2b04      	cmp	r3, #4
 8011b96:	d103      	bne.n	8011ba0 <_printf_common+0x74>
 8011b98:	1a8d      	subs	r5, r1, r2
 8011b9a:	43eb      	mvns	r3, r5
 8011b9c:	17db      	asrs	r3, r3, #31
 8011b9e:	401d      	ands	r5, r3
 8011ba0:	68a3      	ldr	r3, [r4, #8]
 8011ba2:	6922      	ldr	r2, [r4, #16]
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	dd01      	ble.n	8011bac <_printf_common+0x80>
 8011ba8:	1a9b      	subs	r3, r3, r2
 8011baa:	18ed      	adds	r5, r5, r3
 8011bac:	2700      	movs	r7, #0
 8011bae:	42bd      	cmp	r5, r7
 8011bb0:	d120      	bne.n	8011bf4 <_printf_common+0xc8>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	e010      	b.n	8011bd8 <_printf_common+0xac>
 8011bb6:	3701      	adds	r7, #1
 8011bb8:	68e3      	ldr	r3, [r4, #12]
 8011bba:	682a      	ldr	r2, [r5, #0]
 8011bbc:	1a9b      	subs	r3, r3, r2
 8011bbe:	42bb      	cmp	r3, r7
 8011bc0:	ddd2      	ble.n	8011b68 <_printf_common+0x3c>
 8011bc2:	0022      	movs	r2, r4
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	9901      	ldr	r1, [sp, #4]
 8011bc8:	9800      	ldr	r0, [sp, #0]
 8011bca:	9e08      	ldr	r6, [sp, #32]
 8011bcc:	3219      	adds	r2, #25
 8011bce:	47b0      	blx	r6
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	d1f0      	bne.n	8011bb6 <_printf_common+0x8a>
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	4240      	negs	r0, r0
 8011bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011bda:	2030      	movs	r0, #48	; 0x30
 8011bdc:	18e1      	adds	r1, r4, r3
 8011bde:	3143      	adds	r1, #67	; 0x43
 8011be0:	7008      	strb	r0, [r1, #0]
 8011be2:	0021      	movs	r1, r4
 8011be4:	1c5a      	adds	r2, r3, #1
 8011be6:	3145      	adds	r1, #69	; 0x45
 8011be8:	7809      	ldrb	r1, [r1, #0]
 8011bea:	18a2      	adds	r2, r4, r2
 8011bec:	3243      	adds	r2, #67	; 0x43
 8011bee:	3302      	adds	r3, #2
 8011bf0:	7011      	strb	r1, [r2, #0]
 8011bf2:	e7c1      	b.n	8011b78 <_printf_common+0x4c>
 8011bf4:	0022      	movs	r2, r4
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	9901      	ldr	r1, [sp, #4]
 8011bfa:	9800      	ldr	r0, [sp, #0]
 8011bfc:	9e08      	ldr	r6, [sp, #32]
 8011bfe:	321a      	adds	r2, #26
 8011c00:	47b0      	blx	r6
 8011c02:	1c43      	adds	r3, r0, #1
 8011c04:	d0e6      	beq.n	8011bd4 <_printf_common+0xa8>
 8011c06:	3701      	adds	r7, #1
 8011c08:	e7d1      	b.n	8011bae <_printf_common+0x82>
	...

08011c0c <_printf_i>:
 8011c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c0e:	b08b      	sub	sp, #44	; 0x2c
 8011c10:	9206      	str	r2, [sp, #24]
 8011c12:	000a      	movs	r2, r1
 8011c14:	3243      	adds	r2, #67	; 0x43
 8011c16:	9307      	str	r3, [sp, #28]
 8011c18:	9005      	str	r0, [sp, #20]
 8011c1a:	9204      	str	r2, [sp, #16]
 8011c1c:	7e0a      	ldrb	r2, [r1, #24]
 8011c1e:	000c      	movs	r4, r1
 8011c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c22:	2a78      	cmp	r2, #120	; 0x78
 8011c24:	d806      	bhi.n	8011c34 <_printf_i+0x28>
 8011c26:	2a62      	cmp	r2, #98	; 0x62
 8011c28:	d808      	bhi.n	8011c3c <_printf_i+0x30>
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	d100      	bne.n	8011c30 <_printf_i+0x24>
 8011c2e:	e0c0      	b.n	8011db2 <_printf_i+0x1a6>
 8011c30:	2a58      	cmp	r2, #88	; 0x58
 8011c32:	d052      	beq.n	8011cda <_printf_i+0xce>
 8011c34:	0026      	movs	r6, r4
 8011c36:	3642      	adds	r6, #66	; 0x42
 8011c38:	7032      	strb	r2, [r6, #0]
 8011c3a:	e022      	b.n	8011c82 <_printf_i+0x76>
 8011c3c:	0010      	movs	r0, r2
 8011c3e:	3863      	subs	r0, #99	; 0x63
 8011c40:	2815      	cmp	r0, #21
 8011c42:	d8f7      	bhi.n	8011c34 <_printf_i+0x28>
 8011c44:	f7ee fa5c 	bl	8000100 <__gnu_thumb1_case_shi>
 8011c48:	001f0016 	.word	0x001f0016
 8011c4c:	fff6fff6 	.word	0xfff6fff6
 8011c50:	fff6fff6 	.word	0xfff6fff6
 8011c54:	fff6001f 	.word	0xfff6001f
 8011c58:	fff6fff6 	.word	0xfff6fff6
 8011c5c:	00a8fff6 	.word	0x00a8fff6
 8011c60:	009a0036 	.word	0x009a0036
 8011c64:	fff6fff6 	.word	0xfff6fff6
 8011c68:	fff600b9 	.word	0xfff600b9
 8011c6c:	fff60036 	.word	0xfff60036
 8011c70:	009efff6 	.word	0x009efff6
 8011c74:	0026      	movs	r6, r4
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	3642      	adds	r6, #66	; 0x42
 8011c7a:	1d11      	adds	r1, r2, #4
 8011c7c:	6019      	str	r1, [r3, #0]
 8011c7e:	6813      	ldr	r3, [r2, #0]
 8011c80:	7033      	strb	r3, [r6, #0]
 8011c82:	2301      	movs	r3, #1
 8011c84:	e0a7      	b.n	8011dd6 <_printf_i+0x1ca>
 8011c86:	6808      	ldr	r0, [r1, #0]
 8011c88:	6819      	ldr	r1, [r3, #0]
 8011c8a:	1d0a      	adds	r2, r1, #4
 8011c8c:	0605      	lsls	r5, r0, #24
 8011c8e:	d50b      	bpl.n	8011ca8 <_printf_i+0x9c>
 8011c90:	680d      	ldr	r5, [r1, #0]
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	2d00      	cmp	r5, #0
 8011c96:	da03      	bge.n	8011ca0 <_printf_i+0x94>
 8011c98:	232d      	movs	r3, #45	; 0x2d
 8011c9a:	9a04      	ldr	r2, [sp, #16]
 8011c9c:	426d      	negs	r5, r5
 8011c9e:	7013      	strb	r3, [r2, #0]
 8011ca0:	4b61      	ldr	r3, [pc, #388]	; (8011e28 <_printf_i+0x21c>)
 8011ca2:	270a      	movs	r7, #10
 8011ca4:	9303      	str	r3, [sp, #12]
 8011ca6:	e032      	b.n	8011d0e <_printf_i+0x102>
 8011ca8:	680d      	ldr	r5, [r1, #0]
 8011caa:	601a      	str	r2, [r3, #0]
 8011cac:	0641      	lsls	r1, r0, #25
 8011cae:	d5f1      	bpl.n	8011c94 <_printf_i+0x88>
 8011cb0:	b22d      	sxth	r5, r5
 8011cb2:	e7ef      	b.n	8011c94 <_printf_i+0x88>
 8011cb4:	680d      	ldr	r5, [r1, #0]
 8011cb6:	6819      	ldr	r1, [r3, #0]
 8011cb8:	1d08      	adds	r0, r1, #4
 8011cba:	6018      	str	r0, [r3, #0]
 8011cbc:	062e      	lsls	r6, r5, #24
 8011cbe:	d501      	bpl.n	8011cc4 <_printf_i+0xb8>
 8011cc0:	680d      	ldr	r5, [r1, #0]
 8011cc2:	e003      	b.n	8011ccc <_printf_i+0xc0>
 8011cc4:	066d      	lsls	r5, r5, #25
 8011cc6:	d5fb      	bpl.n	8011cc0 <_printf_i+0xb4>
 8011cc8:	680d      	ldr	r5, [r1, #0]
 8011cca:	b2ad      	uxth	r5, r5
 8011ccc:	4b56      	ldr	r3, [pc, #344]	; (8011e28 <_printf_i+0x21c>)
 8011cce:	270a      	movs	r7, #10
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	2a6f      	cmp	r2, #111	; 0x6f
 8011cd4:	d117      	bne.n	8011d06 <_printf_i+0xfa>
 8011cd6:	2708      	movs	r7, #8
 8011cd8:	e015      	b.n	8011d06 <_printf_i+0xfa>
 8011cda:	3145      	adds	r1, #69	; 0x45
 8011cdc:	700a      	strb	r2, [r1, #0]
 8011cde:	4a52      	ldr	r2, [pc, #328]	; (8011e28 <_printf_i+0x21c>)
 8011ce0:	9203      	str	r2, [sp, #12]
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	6821      	ldr	r1, [r4, #0]
 8011ce6:	ca20      	ldmia	r2!, {r5}
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	0608      	lsls	r0, r1, #24
 8011cec:	d550      	bpl.n	8011d90 <_printf_i+0x184>
 8011cee:	07cb      	lsls	r3, r1, #31
 8011cf0:	d502      	bpl.n	8011cf8 <_printf_i+0xec>
 8011cf2:	2320      	movs	r3, #32
 8011cf4:	4319      	orrs	r1, r3
 8011cf6:	6021      	str	r1, [r4, #0]
 8011cf8:	2710      	movs	r7, #16
 8011cfa:	2d00      	cmp	r5, #0
 8011cfc:	d103      	bne.n	8011d06 <_printf_i+0xfa>
 8011cfe:	2320      	movs	r3, #32
 8011d00:	6822      	ldr	r2, [r4, #0]
 8011d02:	439a      	bics	r2, r3
 8011d04:	6022      	str	r2, [r4, #0]
 8011d06:	0023      	movs	r3, r4
 8011d08:	2200      	movs	r2, #0
 8011d0a:	3343      	adds	r3, #67	; 0x43
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	6863      	ldr	r3, [r4, #4]
 8011d10:	60a3      	str	r3, [r4, #8]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	db03      	blt.n	8011d1e <_printf_i+0x112>
 8011d16:	2204      	movs	r2, #4
 8011d18:	6821      	ldr	r1, [r4, #0]
 8011d1a:	4391      	bics	r1, r2
 8011d1c:	6021      	str	r1, [r4, #0]
 8011d1e:	2d00      	cmp	r5, #0
 8011d20:	d102      	bne.n	8011d28 <_printf_i+0x11c>
 8011d22:	9e04      	ldr	r6, [sp, #16]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d00c      	beq.n	8011d42 <_printf_i+0x136>
 8011d28:	9e04      	ldr	r6, [sp, #16]
 8011d2a:	0028      	movs	r0, r5
 8011d2c:	0039      	movs	r1, r7
 8011d2e:	f7ee fa77 	bl	8000220 <__aeabi_uidivmod>
 8011d32:	9b03      	ldr	r3, [sp, #12]
 8011d34:	3e01      	subs	r6, #1
 8011d36:	5c5b      	ldrb	r3, [r3, r1]
 8011d38:	7033      	strb	r3, [r6, #0]
 8011d3a:	002b      	movs	r3, r5
 8011d3c:	0005      	movs	r5, r0
 8011d3e:	429f      	cmp	r7, r3
 8011d40:	d9f3      	bls.n	8011d2a <_printf_i+0x11e>
 8011d42:	2f08      	cmp	r7, #8
 8011d44:	d109      	bne.n	8011d5a <_printf_i+0x14e>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	07db      	lsls	r3, r3, #31
 8011d4a:	d506      	bpl.n	8011d5a <_printf_i+0x14e>
 8011d4c:	6863      	ldr	r3, [r4, #4]
 8011d4e:	6922      	ldr	r2, [r4, #16]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	dc02      	bgt.n	8011d5a <_printf_i+0x14e>
 8011d54:	2330      	movs	r3, #48	; 0x30
 8011d56:	3e01      	subs	r6, #1
 8011d58:	7033      	strb	r3, [r6, #0]
 8011d5a:	9b04      	ldr	r3, [sp, #16]
 8011d5c:	1b9b      	subs	r3, r3, r6
 8011d5e:	6123      	str	r3, [r4, #16]
 8011d60:	9b07      	ldr	r3, [sp, #28]
 8011d62:	0021      	movs	r1, r4
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	9805      	ldr	r0, [sp, #20]
 8011d68:	9b06      	ldr	r3, [sp, #24]
 8011d6a:	aa09      	add	r2, sp, #36	; 0x24
 8011d6c:	f7ff fede 	bl	8011b2c <_printf_common>
 8011d70:	1c43      	adds	r3, r0, #1
 8011d72:	d135      	bne.n	8011de0 <_printf_i+0x1d4>
 8011d74:	2001      	movs	r0, #1
 8011d76:	4240      	negs	r0, r0
 8011d78:	b00b      	add	sp, #44	; 0x2c
 8011d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d7c:	2220      	movs	r2, #32
 8011d7e:	6809      	ldr	r1, [r1, #0]
 8011d80:	430a      	orrs	r2, r1
 8011d82:	6022      	str	r2, [r4, #0]
 8011d84:	0022      	movs	r2, r4
 8011d86:	2178      	movs	r1, #120	; 0x78
 8011d88:	3245      	adds	r2, #69	; 0x45
 8011d8a:	7011      	strb	r1, [r2, #0]
 8011d8c:	4a27      	ldr	r2, [pc, #156]	; (8011e2c <_printf_i+0x220>)
 8011d8e:	e7a7      	b.n	8011ce0 <_printf_i+0xd4>
 8011d90:	0648      	lsls	r0, r1, #25
 8011d92:	d5ac      	bpl.n	8011cee <_printf_i+0xe2>
 8011d94:	b2ad      	uxth	r5, r5
 8011d96:	e7aa      	b.n	8011cee <_printf_i+0xe2>
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	680d      	ldr	r5, [r1, #0]
 8011d9c:	1d10      	adds	r0, r2, #4
 8011d9e:	6949      	ldr	r1, [r1, #20]
 8011da0:	6018      	str	r0, [r3, #0]
 8011da2:	6813      	ldr	r3, [r2, #0]
 8011da4:	062e      	lsls	r6, r5, #24
 8011da6:	d501      	bpl.n	8011dac <_printf_i+0x1a0>
 8011da8:	6019      	str	r1, [r3, #0]
 8011daa:	e002      	b.n	8011db2 <_printf_i+0x1a6>
 8011dac:	066d      	lsls	r5, r5, #25
 8011dae:	d5fb      	bpl.n	8011da8 <_printf_i+0x19c>
 8011db0:	8019      	strh	r1, [r3, #0]
 8011db2:	2300      	movs	r3, #0
 8011db4:	9e04      	ldr	r6, [sp, #16]
 8011db6:	6123      	str	r3, [r4, #16]
 8011db8:	e7d2      	b.n	8011d60 <_printf_i+0x154>
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	1d11      	adds	r1, r2, #4
 8011dbe:	6019      	str	r1, [r3, #0]
 8011dc0:	6816      	ldr	r6, [r2, #0]
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	0030      	movs	r0, r6
 8011dc6:	6862      	ldr	r2, [r4, #4]
 8011dc8:	f000 f8dc 	bl	8011f84 <memchr>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d001      	beq.n	8011dd4 <_printf_i+0x1c8>
 8011dd0:	1b80      	subs	r0, r0, r6
 8011dd2:	6060      	str	r0, [r4, #4]
 8011dd4:	6863      	ldr	r3, [r4, #4]
 8011dd6:	6123      	str	r3, [r4, #16]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9a04      	ldr	r2, [sp, #16]
 8011ddc:	7013      	strb	r3, [r2, #0]
 8011dde:	e7bf      	b.n	8011d60 <_printf_i+0x154>
 8011de0:	6923      	ldr	r3, [r4, #16]
 8011de2:	0032      	movs	r2, r6
 8011de4:	9906      	ldr	r1, [sp, #24]
 8011de6:	9805      	ldr	r0, [sp, #20]
 8011de8:	9d07      	ldr	r5, [sp, #28]
 8011dea:	47a8      	blx	r5
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	d0c1      	beq.n	8011d74 <_printf_i+0x168>
 8011df0:	6823      	ldr	r3, [r4, #0]
 8011df2:	079b      	lsls	r3, r3, #30
 8011df4:	d415      	bmi.n	8011e22 <_printf_i+0x216>
 8011df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df8:	68e0      	ldr	r0, [r4, #12]
 8011dfa:	4298      	cmp	r0, r3
 8011dfc:	dabc      	bge.n	8011d78 <_printf_i+0x16c>
 8011dfe:	0018      	movs	r0, r3
 8011e00:	e7ba      	b.n	8011d78 <_printf_i+0x16c>
 8011e02:	0022      	movs	r2, r4
 8011e04:	2301      	movs	r3, #1
 8011e06:	9906      	ldr	r1, [sp, #24]
 8011e08:	9805      	ldr	r0, [sp, #20]
 8011e0a:	9e07      	ldr	r6, [sp, #28]
 8011e0c:	3219      	adds	r2, #25
 8011e0e:	47b0      	blx	r6
 8011e10:	1c43      	adds	r3, r0, #1
 8011e12:	d0af      	beq.n	8011d74 <_printf_i+0x168>
 8011e14:	3501      	adds	r5, #1
 8011e16:	68e3      	ldr	r3, [r4, #12]
 8011e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e1a:	1a9b      	subs	r3, r3, r2
 8011e1c:	42ab      	cmp	r3, r5
 8011e1e:	dcf0      	bgt.n	8011e02 <_printf_i+0x1f6>
 8011e20:	e7e9      	b.n	8011df6 <_printf_i+0x1ea>
 8011e22:	2500      	movs	r5, #0
 8011e24:	e7f7      	b.n	8011e16 <_printf_i+0x20a>
 8011e26:	46c0      	nop			; (mov r8, r8)
 8011e28:	08016285 	.word	0x08016285
 8011e2c:	08016296 	.word	0x08016296

08011e30 <__sread>:
 8011e30:	b570      	push	{r4, r5, r6, lr}
 8011e32:	000c      	movs	r4, r1
 8011e34:	250e      	movs	r5, #14
 8011e36:	5f49      	ldrsh	r1, [r1, r5]
 8011e38:	f000 f8f2 	bl	8012020 <_read_r>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	db03      	blt.n	8011e48 <__sread+0x18>
 8011e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011e42:	181b      	adds	r3, r3, r0
 8011e44:	6563      	str	r3, [r4, #84]	; 0x54
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	4a02      	ldr	r2, [pc, #8]	; (8011e54 <__sread+0x24>)
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	e7f9      	b.n	8011e46 <__sread+0x16>
 8011e52:	46c0      	nop			; (mov r8, r8)
 8011e54:	ffffefff 	.word	0xffffefff

08011e58 <__swrite>:
 8011e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e5a:	001f      	movs	r7, r3
 8011e5c:	898b      	ldrh	r3, [r1, #12]
 8011e5e:	0005      	movs	r5, r0
 8011e60:	000c      	movs	r4, r1
 8011e62:	0016      	movs	r6, r2
 8011e64:	05db      	lsls	r3, r3, #23
 8011e66:	d505      	bpl.n	8011e74 <__swrite+0x1c>
 8011e68:	230e      	movs	r3, #14
 8011e6a:	5ec9      	ldrsh	r1, [r1, r3]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	2302      	movs	r3, #2
 8011e70:	f000 f874 	bl	8011f5c <_lseek_r>
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	4a05      	ldr	r2, [pc, #20]	; (8011e8c <__swrite+0x34>)
 8011e78:	0028      	movs	r0, r5
 8011e7a:	4013      	ands	r3, r2
 8011e7c:	81a3      	strh	r3, [r4, #12]
 8011e7e:	0032      	movs	r2, r6
 8011e80:	230e      	movs	r3, #14
 8011e82:	5ee1      	ldrsh	r1, [r4, r3]
 8011e84:	003b      	movs	r3, r7
 8011e86:	f000 f81f 	bl	8011ec8 <_write_r>
 8011e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e8c:	ffffefff 	.word	0xffffefff

08011e90 <__sseek>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	000c      	movs	r4, r1
 8011e94:	250e      	movs	r5, #14
 8011e96:	5f49      	ldrsh	r1, [r1, r5]
 8011e98:	f000 f860 	bl	8011f5c <_lseek_r>
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	1c42      	adds	r2, r0, #1
 8011ea0:	d103      	bne.n	8011eaa <__sseek+0x1a>
 8011ea2:	4a05      	ldr	r2, [pc, #20]	; (8011eb8 <__sseek+0x28>)
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	81a3      	strh	r3, [r4, #12]
 8011ea8:	bd70      	pop	{r4, r5, r6, pc}
 8011eaa:	2280      	movs	r2, #128	; 0x80
 8011eac:	0152      	lsls	r2, r2, #5
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	81a3      	strh	r3, [r4, #12]
 8011eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8011eb4:	e7f8      	b.n	8011ea8 <__sseek+0x18>
 8011eb6:	46c0      	nop			; (mov r8, r8)
 8011eb8:	ffffefff 	.word	0xffffefff

08011ebc <__sclose>:
 8011ebc:	b510      	push	{r4, lr}
 8011ebe:	230e      	movs	r3, #14
 8011ec0:	5ec9      	ldrsh	r1, [r1, r3]
 8011ec2:	f000 f815 	bl	8011ef0 <_close_r>
 8011ec6:	bd10      	pop	{r4, pc}

08011ec8 <_write_r>:
 8011ec8:	b570      	push	{r4, r5, r6, lr}
 8011eca:	0004      	movs	r4, r0
 8011ecc:	0008      	movs	r0, r1
 8011ece:	0011      	movs	r1, r2
 8011ed0:	001a      	movs	r2, r3
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	4d05      	ldr	r5, [pc, #20]	; (8011eec <_write_r+0x24>)
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	f7fe fde7 	bl	8010aaa <_write>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d103      	bne.n	8011ee8 <_write_r+0x20>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d000      	beq.n	8011ee8 <_write_r+0x20>
 8011ee6:	6023      	str	r3, [r4, #0]
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
 8011eea:	46c0      	nop			; (mov r8, r8)
 8011eec:	20000764 	.word	0x20000764

08011ef0 <_close_r>:
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	b570      	push	{r4, r5, r6, lr}
 8011ef4:	4d06      	ldr	r5, [pc, #24]	; (8011f10 <_close_r+0x20>)
 8011ef6:	0004      	movs	r4, r0
 8011ef8:	0008      	movs	r0, r1
 8011efa:	602b      	str	r3, [r5, #0]
 8011efc:	f7fe fdf1 	bl	8010ae2 <_close>
 8011f00:	1c43      	adds	r3, r0, #1
 8011f02:	d103      	bne.n	8011f0c <_close_r+0x1c>
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d000      	beq.n	8011f0c <_close_r+0x1c>
 8011f0a:	6023      	str	r3, [r4, #0]
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}
 8011f0e:	46c0      	nop			; (mov r8, r8)
 8011f10:	20000764 	.word	0x20000764

08011f14 <_fstat_r>:
 8011f14:	2300      	movs	r3, #0
 8011f16:	b570      	push	{r4, r5, r6, lr}
 8011f18:	4d06      	ldr	r5, [pc, #24]	; (8011f34 <_fstat_r+0x20>)
 8011f1a:	0004      	movs	r4, r0
 8011f1c:	0008      	movs	r0, r1
 8011f1e:	0011      	movs	r1, r2
 8011f20:	602b      	str	r3, [r5, #0]
 8011f22:	f7fe fde8 	bl	8010af6 <_fstat>
 8011f26:	1c43      	adds	r3, r0, #1
 8011f28:	d103      	bne.n	8011f32 <_fstat_r+0x1e>
 8011f2a:	682b      	ldr	r3, [r5, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d000      	beq.n	8011f32 <_fstat_r+0x1e>
 8011f30:	6023      	str	r3, [r4, #0]
 8011f32:	bd70      	pop	{r4, r5, r6, pc}
 8011f34:	20000764 	.word	0x20000764

08011f38 <_isatty_r>:
 8011f38:	2300      	movs	r3, #0
 8011f3a:	b570      	push	{r4, r5, r6, lr}
 8011f3c:	4d06      	ldr	r5, [pc, #24]	; (8011f58 <_isatty_r+0x20>)
 8011f3e:	0004      	movs	r4, r0
 8011f40:	0008      	movs	r0, r1
 8011f42:	602b      	str	r3, [r5, #0]
 8011f44:	f7fe fde5 	bl	8010b12 <_isatty>
 8011f48:	1c43      	adds	r3, r0, #1
 8011f4a:	d103      	bne.n	8011f54 <_isatty_r+0x1c>
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d000      	beq.n	8011f54 <_isatty_r+0x1c>
 8011f52:	6023      	str	r3, [r4, #0]
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	46c0      	nop			; (mov r8, r8)
 8011f58:	20000764 	.word	0x20000764

08011f5c <_lseek_r>:
 8011f5c:	b570      	push	{r4, r5, r6, lr}
 8011f5e:	0004      	movs	r4, r0
 8011f60:	0008      	movs	r0, r1
 8011f62:	0011      	movs	r1, r2
 8011f64:	001a      	movs	r2, r3
 8011f66:	2300      	movs	r3, #0
 8011f68:	4d05      	ldr	r5, [pc, #20]	; (8011f80 <_lseek_r+0x24>)
 8011f6a:	602b      	str	r3, [r5, #0]
 8011f6c:	f7fe fdda 	bl	8010b24 <_lseek>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d103      	bne.n	8011f7c <_lseek_r+0x20>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d000      	beq.n	8011f7c <_lseek_r+0x20>
 8011f7a:	6023      	str	r3, [r4, #0]
 8011f7c:	bd70      	pop	{r4, r5, r6, pc}
 8011f7e:	46c0      	nop			; (mov r8, r8)
 8011f80:	20000764 	.word	0x20000764

08011f84 <memchr>:
 8011f84:	b2c9      	uxtb	r1, r1
 8011f86:	1882      	adds	r2, r0, r2
 8011f88:	4290      	cmp	r0, r2
 8011f8a:	d101      	bne.n	8011f90 <memchr+0xc>
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	4770      	bx	lr
 8011f90:	7803      	ldrb	r3, [r0, #0]
 8011f92:	428b      	cmp	r3, r1
 8011f94:	d0fb      	beq.n	8011f8e <memchr+0xa>
 8011f96:	3001      	adds	r0, #1
 8011f98:	e7f6      	b.n	8011f88 <memchr+0x4>

08011f9a <memcpy>:
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d100      	bne.n	8011fa4 <memcpy+0xa>
 8011fa2:	bd10      	pop	{r4, pc}
 8011fa4:	5ccc      	ldrb	r4, [r1, r3]
 8011fa6:	54c4      	strb	r4, [r0, r3]
 8011fa8:	3301      	adds	r3, #1
 8011faa:	e7f8      	b.n	8011f9e <memcpy+0x4>

08011fac <memmove>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	4288      	cmp	r0, r1
 8011fb0:	d902      	bls.n	8011fb8 <memmove+0xc>
 8011fb2:	188b      	adds	r3, r1, r2
 8011fb4:	4298      	cmp	r0, r3
 8011fb6:	d303      	bcc.n	8011fc0 <memmove+0x14>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	e007      	b.n	8011fcc <memmove+0x20>
 8011fbc:	5c8b      	ldrb	r3, [r1, r2]
 8011fbe:	5483      	strb	r3, [r0, r2]
 8011fc0:	3a01      	subs	r2, #1
 8011fc2:	d2fb      	bcs.n	8011fbc <memmove+0x10>
 8011fc4:	bd10      	pop	{r4, pc}
 8011fc6:	5ccc      	ldrb	r4, [r1, r3]
 8011fc8:	54c4      	strb	r4, [r0, r3]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d1fa      	bne.n	8011fc6 <memmove+0x1a>
 8011fd0:	e7f8      	b.n	8011fc4 <memmove+0x18>

08011fd2 <_realloc_r>:
 8011fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd4:	0007      	movs	r7, r0
 8011fd6:	000d      	movs	r5, r1
 8011fd8:	0016      	movs	r6, r2
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	d105      	bne.n	8011fea <_realloc_r+0x18>
 8011fde:	0011      	movs	r1, r2
 8011fe0:	f7fe fe9e 	bl	8010d20 <_malloc_r>
 8011fe4:	0004      	movs	r4, r0
 8011fe6:	0020      	movs	r0, r4
 8011fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fea:	2a00      	cmp	r2, #0
 8011fec:	d103      	bne.n	8011ff6 <_realloc_r+0x24>
 8011fee:	f7fe fe4d 	bl	8010c8c <_free_r>
 8011ff2:	0034      	movs	r4, r6
 8011ff4:	e7f7      	b.n	8011fe6 <_realloc_r+0x14>
 8011ff6:	f000 f827 	bl	8012048 <_malloc_usable_size_r>
 8011ffa:	002c      	movs	r4, r5
 8011ffc:	42b0      	cmp	r0, r6
 8011ffe:	d2f2      	bcs.n	8011fe6 <_realloc_r+0x14>
 8012000:	0031      	movs	r1, r6
 8012002:	0038      	movs	r0, r7
 8012004:	f7fe fe8c 	bl	8010d20 <_malloc_r>
 8012008:	1e04      	subs	r4, r0, #0
 801200a:	d0ec      	beq.n	8011fe6 <_realloc_r+0x14>
 801200c:	0029      	movs	r1, r5
 801200e:	0032      	movs	r2, r6
 8012010:	f7ff ffc3 	bl	8011f9a <memcpy>
 8012014:	0029      	movs	r1, r5
 8012016:	0038      	movs	r0, r7
 8012018:	f7fe fe38 	bl	8010c8c <_free_r>
 801201c:	e7e3      	b.n	8011fe6 <_realloc_r+0x14>
	...

08012020 <_read_r>:
 8012020:	b570      	push	{r4, r5, r6, lr}
 8012022:	0004      	movs	r4, r0
 8012024:	0008      	movs	r0, r1
 8012026:	0011      	movs	r1, r2
 8012028:	001a      	movs	r2, r3
 801202a:	2300      	movs	r3, #0
 801202c:	4d05      	ldr	r5, [pc, #20]	; (8012044 <_read_r+0x24>)
 801202e:	602b      	str	r3, [r5, #0]
 8012030:	f7fe fd1e 	bl	8010a70 <_read>
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	d103      	bne.n	8012040 <_read_r+0x20>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d000      	beq.n	8012040 <_read_r+0x20>
 801203e:	6023      	str	r3, [r4, #0]
 8012040:	bd70      	pop	{r4, r5, r6, pc}
 8012042:	46c0      	nop			; (mov r8, r8)
 8012044:	20000764 	.word	0x20000764

08012048 <_malloc_usable_size_r>:
 8012048:	1f0b      	subs	r3, r1, #4
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	1f18      	subs	r0, r3, #4
 801204e:	2b00      	cmp	r3, #0
 8012050:	da01      	bge.n	8012056 <_malloc_usable_size_r+0xe>
 8012052:	580b      	ldr	r3, [r1, r0]
 8012054:	18c0      	adds	r0, r0, r3
 8012056:	4770      	bx	lr

08012058 <cos>:
 8012058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205a:	4a1e      	ldr	r2, [pc, #120]	; (80120d4 <cos+0x7c>)
 801205c:	004b      	lsls	r3, r1, #1
 801205e:	b087      	sub	sp, #28
 8012060:	085b      	lsrs	r3, r3, #1
 8012062:	4293      	cmp	r3, r2
 8012064:	dc04      	bgt.n	8012070 <cos+0x18>
 8012066:	2200      	movs	r2, #0
 8012068:	2300      	movs	r3, #0
 801206a:	f000 fd07 	bl	8012a7c <__kernel_cos>
 801206e:	e006      	b.n	801207e <cos+0x26>
 8012070:	4a19      	ldr	r2, [pc, #100]	; (80120d8 <cos+0x80>)
 8012072:	4293      	cmp	r3, r2
 8012074:	dd05      	ble.n	8012082 <cos+0x2a>
 8012076:	0002      	movs	r2, r0
 8012078:	000b      	movs	r3, r1
 801207a:	f7f0 fb9f 	bl	80027bc <__aeabi_dsub>
 801207e:	b007      	add	sp, #28
 8012080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012082:	aa02      	add	r2, sp, #8
 8012084:	f000 fb0e 	bl	80126a4 <__ieee754_rem_pio2>
 8012088:	9c04      	ldr	r4, [sp, #16]
 801208a:	9d05      	ldr	r5, [sp, #20]
 801208c:	2303      	movs	r3, #3
 801208e:	4003      	ands	r3, r0
 8012090:	2b01      	cmp	r3, #1
 8012092:	d008      	beq.n	80120a6 <cos+0x4e>
 8012094:	9802      	ldr	r0, [sp, #8]
 8012096:	9903      	ldr	r1, [sp, #12]
 8012098:	2b02      	cmp	r3, #2
 801209a:	d00f      	beq.n	80120bc <cos+0x64>
 801209c:	2b00      	cmp	r3, #0
 801209e:	d112      	bne.n	80120c6 <cos+0x6e>
 80120a0:	0022      	movs	r2, r4
 80120a2:	002b      	movs	r3, r5
 80120a4:	e7e1      	b.n	801206a <cos+0x12>
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	0022      	movs	r2, r4
 80120aa:	9802      	ldr	r0, [sp, #8]
 80120ac:	9903      	ldr	r1, [sp, #12]
 80120ae:	002b      	movs	r3, r5
 80120b0:	f001 f91a 	bl	80132e8 <__kernel_sin>
 80120b4:	2380      	movs	r3, #128	; 0x80
 80120b6:	061b      	lsls	r3, r3, #24
 80120b8:	18c9      	adds	r1, r1, r3
 80120ba:	e7e0      	b.n	801207e <cos+0x26>
 80120bc:	0022      	movs	r2, r4
 80120be:	002b      	movs	r3, r5
 80120c0:	f000 fcdc 	bl	8012a7c <__kernel_cos>
 80120c4:	e7f6      	b.n	80120b4 <cos+0x5c>
 80120c6:	2301      	movs	r3, #1
 80120c8:	0022      	movs	r2, r4
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	002b      	movs	r3, r5
 80120ce:	f001 f90b 	bl	80132e8 <__kernel_sin>
 80120d2:	e7d4      	b.n	801207e <cos+0x26>
 80120d4:	3fe921fb 	.word	0x3fe921fb
 80120d8:	7fefffff 	.word	0x7fefffff

080120dc <sin>:
 80120dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120de:	4a20      	ldr	r2, [pc, #128]	; (8012160 <sin+0x84>)
 80120e0:	004b      	lsls	r3, r1, #1
 80120e2:	b087      	sub	sp, #28
 80120e4:	085b      	lsrs	r3, r3, #1
 80120e6:	4293      	cmp	r3, r2
 80120e8:	dc06      	bgt.n	80120f8 <sin+0x1c>
 80120ea:	2300      	movs	r3, #0
 80120ec:	2200      	movs	r2, #0
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	2300      	movs	r3, #0
 80120f2:	f001 f8f9 	bl	80132e8 <__kernel_sin>
 80120f6:	e006      	b.n	8012106 <sin+0x2a>
 80120f8:	4a1a      	ldr	r2, [pc, #104]	; (8012164 <sin+0x88>)
 80120fa:	4293      	cmp	r3, r2
 80120fc:	dd05      	ble.n	801210a <sin+0x2e>
 80120fe:	0002      	movs	r2, r0
 8012100:	000b      	movs	r3, r1
 8012102:	f7f0 fb5b 	bl	80027bc <__aeabi_dsub>
 8012106:	b007      	add	sp, #28
 8012108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801210a:	aa02      	add	r2, sp, #8
 801210c:	f000 faca 	bl	80126a4 <__ieee754_rem_pio2>
 8012110:	9c04      	ldr	r4, [sp, #16]
 8012112:	9d05      	ldr	r5, [sp, #20]
 8012114:	2303      	movs	r3, #3
 8012116:	4003      	ands	r3, r0
 8012118:	2b01      	cmp	r3, #1
 801211a:	d00a      	beq.n	8012132 <sin+0x56>
 801211c:	9802      	ldr	r0, [sp, #8]
 801211e:	9903      	ldr	r1, [sp, #12]
 8012120:	2b02      	cmp	r3, #2
 8012122:	d00d      	beq.n	8012140 <sin+0x64>
 8012124:	2b00      	cmp	r3, #0
 8012126:	d115      	bne.n	8012154 <sin+0x78>
 8012128:	3301      	adds	r3, #1
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	0022      	movs	r2, r4
 801212e:	002b      	movs	r3, r5
 8012130:	e7df      	b.n	80120f2 <sin+0x16>
 8012132:	0022      	movs	r2, r4
 8012134:	9802      	ldr	r0, [sp, #8]
 8012136:	9903      	ldr	r1, [sp, #12]
 8012138:	002b      	movs	r3, r5
 801213a:	f000 fc9f 	bl	8012a7c <__kernel_cos>
 801213e:	e7e2      	b.n	8012106 <sin+0x2a>
 8012140:	2301      	movs	r3, #1
 8012142:	0022      	movs	r2, r4
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	002b      	movs	r3, r5
 8012148:	f001 f8ce 	bl	80132e8 <__kernel_sin>
 801214c:	2380      	movs	r3, #128	; 0x80
 801214e:	061b      	lsls	r3, r3, #24
 8012150:	18c9      	adds	r1, r1, r3
 8012152:	e7d8      	b.n	8012106 <sin+0x2a>
 8012154:	0022      	movs	r2, r4
 8012156:	002b      	movs	r3, r5
 8012158:	f000 fc90 	bl	8012a7c <__kernel_cos>
 801215c:	e7f6      	b.n	801214c <sin+0x70>
 801215e:	46c0      	nop			; (mov r8, r8)
 8012160:	3fe921fb 	.word	0x3fe921fb
 8012164:	7fefffff 	.word	0x7fefffff

08012168 <atan2>:
 8012168:	b510      	push	{r4, lr}
 801216a:	f000 f83f 	bl	80121ec <__ieee754_atan2>
 801216e:	bd10      	pop	{r4, pc}

08012170 <log>:
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012172:	0004      	movs	r4, r0
 8012174:	000d      	movs	r5, r1
 8012176:	f000 f8e5 	bl	8012344 <__ieee754_log>
 801217a:	4b19      	ldr	r3, [pc, #100]	; (80121e0 <log+0x70>)
 801217c:	0006      	movs	r6, r0
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	000f      	movs	r7, r1
 8012182:	b25b      	sxtb	r3, r3
 8012184:	3301      	adds	r3, #1
 8012186:	d01d      	beq.n	80121c4 <log+0x54>
 8012188:	0022      	movs	r2, r4
 801218a:	002b      	movs	r3, r5
 801218c:	0020      	movs	r0, r4
 801218e:	0029      	movs	r1, r5
 8012190:	f7f0 fea6 	bl	8002ee0 <__aeabi_dcmpun>
 8012194:	2800      	cmp	r0, #0
 8012196:	d115      	bne.n	80121c4 <log+0x54>
 8012198:	2200      	movs	r2, #0
 801219a:	2300      	movs	r3, #0
 801219c:	0020      	movs	r0, r4
 801219e:	0029      	movs	r1, r5
 80121a0:	f7ee f958 	bl	8000454 <__aeabi_dcmpgt>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d10d      	bne.n	80121c4 <log+0x54>
 80121a8:	2200      	movs	r2, #0
 80121aa:	2300      	movs	r3, #0
 80121ac:	0020      	movs	r0, r4
 80121ae:	0029      	movs	r1, r5
 80121b0:	f7ee f936 	bl	8000420 <__aeabi_dcmpeq>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d008      	beq.n	80121ca <log+0x5a>
 80121b8:	f7fe fd2c 	bl	8010c14 <__errno>
 80121bc:	2322      	movs	r3, #34	; 0x22
 80121be:	2600      	movs	r6, #0
 80121c0:	4f08      	ldr	r7, [pc, #32]	; (80121e4 <log+0x74>)
 80121c2:	6003      	str	r3, [r0, #0]
 80121c4:	0030      	movs	r0, r6
 80121c6:	0039      	movs	r1, r7
 80121c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ca:	f7fe fd23 	bl	8010c14 <__errno>
 80121ce:	2321      	movs	r3, #33	; 0x21
 80121d0:	6003      	str	r3, [r0, #0]
 80121d2:	4805      	ldr	r0, [pc, #20]	; (80121e8 <log+0x78>)
 80121d4:	f001 fb42 	bl	801385c <nan>
 80121d8:	0006      	movs	r6, r0
 80121da:	000f      	movs	r7, r1
 80121dc:	e7f2      	b.n	80121c4 <log+0x54>
 80121de:	46c0      	nop			; (mov r8, r8)
 80121e0:	200000ec 	.word	0x200000ec
 80121e4:	fff00000 	.word	0xfff00000
 80121e8:	08016279 	.word	0x08016279

080121ec <__ieee754_atan2>:
 80121ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121ee:	0016      	movs	r6, r2
 80121f0:	001d      	movs	r5, r3
 80121f2:	005a      	lsls	r2, r3, #1
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	4273      	negs	r3, r6
 80121f8:	4333      	orrs	r3, r6
 80121fa:	4f46      	ldr	r7, [pc, #280]	; (8012314 <__ieee754_atan2+0x128>)
 80121fc:	0852      	lsrs	r2, r2, #1
 80121fe:	0fdb      	lsrs	r3, r3, #31
 8012200:	4313      	orrs	r3, r2
 8012202:	42bb      	cmp	r3, r7
 8012204:	d809      	bhi.n	801221a <__ieee754_atan2+0x2e>
 8012206:	4244      	negs	r4, r0
 8012208:	004b      	lsls	r3, r1, #1
 801220a:	4304      	orrs	r4, r0
 801220c:	085b      	lsrs	r3, r3, #1
 801220e:	0fe4      	lsrs	r4, r4, #31
 8012210:	9100      	str	r1, [sp, #0]
 8012212:	9001      	str	r0, [sp, #4]
 8012214:	431c      	orrs	r4, r3
 8012216:	42bc      	cmp	r4, r7
 8012218:	d905      	bls.n	8012226 <__ieee754_atan2+0x3a>
 801221a:	0032      	movs	r2, r6
 801221c:	002b      	movs	r3, r5
 801221e:	f7ef f8f1 	bl	8001404 <__aeabi_dadd>
 8012222:	b003      	add	sp, #12
 8012224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012226:	4c3c      	ldr	r4, [pc, #240]	; (8012318 <__ieee754_atan2+0x12c>)
 8012228:	192c      	adds	r4, r5, r4
 801222a:	4334      	orrs	r4, r6
 801222c:	d102      	bne.n	8012234 <__ieee754_atan2+0x48>
 801222e:	f001 f907 	bl	8013440 <atan>
 8012232:	e7f6      	b.n	8012222 <__ieee754_atan2+0x36>
 8012234:	17ac      	asrs	r4, r5, #30
 8012236:	46a4      	mov	ip, r4
 8012238:	2402      	movs	r4, #2
 801223a:	4667      	mov	r7, ip
 801223c:	403c      	ands	r4, r7
 801223e:	9f00      	ldr	r7, [sp, #0]
 8012240:	0fff      	lsrs	r7, r7, #31
 8012242:	433c      	orrs	r4, r7
 8012244:	9f01      	ldr	r7, [sp, #4]
 8012246:	431f      	orrs	r7, r3
 8012248:	d106      	bne.n	8012258 <__ieee754_atan2+0x6c>
 801224a:	2c02      	cmp	r4, #2
 801224c:	d056      	beq.n	80122fc <__ieee754_atan2+0x110>
 801224e:	2c03      	cmp	r4, #3
 8012250:	d1e7      	bne.n	8012222 <__ieee754_atan2+0x36>
 8012252:	4832      	ldr	r0, [pc, #200]	; (801231c <__ieee754_atan2+0x130>)
 8012254:	4932      	ldr	r1, [pc, #200]	; (8012320 <__ieee754_atan2+0x134>)
 8012256:	e7e4      	b.n	8012222 <__ieee754_atan2+0x36>
 8012258:	0017      	movs	r7, r2
 801225a:	4337      	orrs	r7, r6
 801225c:	d105      	bne.n	801226a <__ieee754_atan2+0x7e>
 801225e:	9b00      	ldr	r3, [sp, #0]
 8012260:	482e      	ldr	r0, [pc, #184]	; (801231c <__ieee754_atan2+0x130>)
 8012262:	2b00      	cmp	r3, #0
 8012264:	da53      	bge.n	801230e <__ieee754_atan2+0x122>
 8012266:	492f      	ldr	r1, [pc, #188]	; (8012324 <__ieee754_atan2+0x138>)
 8012268:	e7db      	b.n	8012222 <__ieee754_atan2+0x36>
 801226a:	4f2a      	ldr	r7, [pc, #168]	; (8012314 <__ieee754_atan2+0x128>)
 801226c:	42ba      	cmp	r2, r7
 801226e:	d10f      	bne.n	8012290 <__ieee754_atan2+0xa4>
 8012270:	3c01      	subs	r4, #1
 8012272:	4293      	cmp	r3, r2
 8012274:	d107      	bne.n	8012286 <__ieee754_atan2+0x9a>
 8012276:	2c02      	cmp	r4, #2
 8012278:	d843      	bhi.n	8012302 <__ieee754_atan2+0x116>
 801227a:	4b2b      	ldr	r3, [pc, #172]	; (8012328 <__ieee754_atan2+0x13c>)
 801227c:	00e4      	lsls	r4, r4, #3
 801227e:	191c      	adds	r4, r3, r4
 8012280:	6820      	ldr	r0, [r4, #0]
 8012282:	6861      	ldr	r1, [r4, #4]
 8012284:	e7cd      	b.n	8012222 <__ieee754_atan2+0x36>
 8012286:	2c02      	cmp	r4, #2
 8012288:	d83e      	bhi.n	8012308 <__ieee754_atan2+0x11c>
 801228a:	4b28      	ldr	r3, [pc, #160]	; (801232c <__ieee754_atan2+0x140>)
 801228c:	00e4      	lsls	r4, r4, #3
 801228e:	e7f6      	b.n	801227e <__ieee754_atan2+0x92>
 8012290:	4f20      	ldr	r7, [pc, #128]	; (8012314 <__ieee754_atan2+0x128>)
 8012292:	42bb      	cmp	r3, r7
 8012294:	d0e3      	beq.n	801225e <__ieee754_atan2+0x72>
 8012296:	1a9b      	subs	r3, r3, r2
 8012298:	151b      	asrs	r3, r3, #20
 801229a:	2b3c      	cmp	r3, #60	; 0x3c
 801229c:	dc18      	bgt.n	80122d0 <__ieee754_atan2+0xe4>
 801229e:	2d00      	cmp	r5, #0
 80122a0:	da01      	bge.n	80122a6 <__ieee754_atan2+0xba>
 80122a2:	333c      	adds	r3, #60	; 0x3c
 80122a4:	db17      	blt.n	80122d6 <__ieee754_atan2+0xea>
 80122a6:	0032      	movs	r2, r6
 80122a8:	002b      	movs	r3, r5
 80122aa:	f7ef fc15 	bl	8001ad8 <__aeabi_ddiv>
 80122ae:	f001 fa47 	bl	8013740 <fabs>
 80122b2:	f001 f8c5 	bl	8013440 <atan>
 80122b6:	2c01      	cmp	r4, #1
 80122b8:	d010      	beq.n	80122dc <__ieee754_atan2+0xf0>
 80122ba:	2c02      	cmp	r4, #2
 80122bc:	d013      	beq.n	80122e6 <__ieee754_atan2+0xfa>
 80122be:	2c00      	cmp	r4, #0
 80122c0:	d0af      	beq.n	8012222 <__ieee754_atan2+0x36>
 80122c2:	4a1b      	ldr	r2, [pc, #108]	; (8012330 <__ieee754_atan2+0x144>)
 80122c4:	4b1b      	ldr	r3, [pc, #108]	; (8012334 <__ieee754_atan2+0x148>)
 80122c6:	f7f0 fa79 	bl	80027bc <__aeabi_dsub>
 80122ca:	4a14      	ldr	r2, [pc, #80]	; (801231c <__ieee754_atan2+0x130>)
 80122cc:	4b1a      	ldr	r3, [pc, #104]	; (8012338 <__ieee754_atan2+0x14c>)
 80122ce:	e012      	b.n	80122f6 <__ieee754_atan2+0x10a>
 80122d0:	4812      	ldr	r0, [pc, #72]	; (801231c <__ieee754_atan2+0x130>)
 80122d2:	491a      	ldr	r1, [pc, #104]	; (801233c <__ieee754_atan2+0x150>)
 80122d4:	e7ef      	b.n	80122b6 <__ieee754_atan2+0xca>
 80122d6:	2000      	movs	r0, #0
 80122d8:	2100      	movs	r1, #0
 80122da:	e7ec      	b.n	80122b6 <__ieee754_atan2+0xca>
 80122dc:	2480      	movs	r4, #128	; 0x80
 80122de:	0624      	lsls	r4, r4, #24
 80122e0:	190b      	adds	r3, r1, r4
 80122e2:	0019      	movs	r1, r3
 80122e4:	e79d      	b.n	8012222 <__ieee754_atan2+0x36>
 80122e6:	4a12      	ldr	r2, [pc, #72]	; (8012330 <__ieee754_atan2+0x144>)
 80122e8:	4b12      	ldr	r3, [pc, #72]	; (8012334 <__ieee754_atan2+0x148>)
 80122ea:	f7f0 fa67 	bl	80027bc <__aeabi_dsub>
 80122ee:	0002      	movs	r2, r0
 80122f0:	000b      	movs	r3, r1
 80122f2:	480a      	ldr	r0, [pc, #40]	; (801231c <__ieee754_atan2+0x130>)
 80122f4:	4910      	ldr	r1, [pc, #64]	; (8012338 <__ieee754_atan2+0x14c>)
 80122f6:	f7f0 fa61 	bl	80027bc <__aeabi_dsub>
 80122fa:	e792      	b.n	8012222 <__ieee754_atan2+0x36>
 80122fc:	4807      	ldr	r0, [pc, #28]	; (801231c <__ieee754_atan2+0x130>)
 80122fe:	490e      	ldr	r1, [pc, #56]	; (8012338 <__ieee754_atan2+0x14c>)
 8012300:	e78f      	b.n	8012222 <__ieee754_atan2+0x36>
 8012302:	4806      	ldr	r0, [pc, #24]	; (801231c <__ieee754_atan2+0x130>)
 8012304:	490e      	ldr	r1, [pc, #56]	; (8012340 <__ieee754_atan2+0x154>)
 8012306:	e78c      	b.n	8012222 <__ieee754_atan2+0x36>
 8012308:	2000      	movs	r0, #0
 801230a:	2100      	movs	r1, #0
 801230c:	e789      	b.n	8012222 <__ieee754_atan2+0x36>
 801230e:	490b      	ldr	r1, [pc, #44]	; (801233c <__ieee754_atan2+0x150>)
 8012310:	e787      	b.n	8012222 <__ieee754_atan2+0x36>
 8012312:	46c0      	nop			; (mov r8, r8)
 8012314:	7ff00000 	.word	0x7ff00000
 8012318:	c0100000 	.word	0xc0100000
 801231c:	54442d18 	.word	0x54442d18
 8012320:	c00921fb 	.word	0xc00921fb
 8012324:	bff921fb 	.word	0xbff921fb
 8012328:	080162a8 	.word	0x080162a8
 801232c:	080162c0 	.word	0x080162c0
 8012330:	33145c07 	.word	0x33145c07
 8012334:	3ca1a626 	.word	0x3ca1a626
 8012338:	400921fb 	.word	0x400921fb
 801233c:	3ff921fb 	.word	0x3ff921fb
 8012340:	3fe921fb 	.word	0x3fe921fb

08012344 <__ieee754_log>:
 8012344:	2280      	movs	r2, #128	; 0x80
 8012346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012348:	000b      	movs	r3, r1
 801234a:	b08d      	sub	sp, #52	; 0x34
 801234c:	0352      	lsls	r2, r2, #13
 801234e:	4291      	cmp	r1, r2
 8012350:	da22      	bge.n	8012398 <__ieee754_log+0x54>
 8012352:	004a      	lsls	r2, r1, #1
 8012354:	0852      	lsrs	r2, r2, #1
 8012356:	4302      	orrs	r2, r0
 8012358:	d107      	bne.n	801236a <__ieee754_log+0x26>
 801235a:	2200      	movs	r2, #0
 801235c:	2300      	movs	r3, #0
 801235e:	2000      	movs	r0, #0
 8012360:	49b3      	ldr	r1, [pc, #716]	; (8012630 <__ieee754_log+0x2ec>)
 8012362:	f7ef fbb9 	bl	8001ad8 <__aeabi_ddiv>
 8012366:	b00d      	add	sp, #52	; 0x34
 8012368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801236a:	2900      	cmp	r1, #0
 801236c:	da05      	bge.n	801237a <__ieee754_log+0x36>
 801236e:	0002      	movs	r2, r0
 8012370:	f7f0 fa24 	bl	80027bc <__aeabi_dsub>
 8012374:	2200      	movs	r2, #0
 8012376:	2300      	movs	r3, #0
 8012378:	e7f3      	b.n	8012362 <__ieee754_log+0x1e>
 801237a:	4bae      	ldr	r3, [pc, #696]	; (8012634 <__ieee754_log+0x2f0>)
 801237c:	2200      	movs	r2, #0
 801237e:	f7ef ffb1 	bl	80022e4 <__aeabi_dmul>
 8012382:	2436      	movs	r4, #54	; 0x36
 8012384:	000b      	movs	r3, r1
 8012386:	4264      	negs	r4, r4
 8012388:	4aab      	ldr	r2, [pc, #684]	; (8012638 <__ieee754_log+0x2f4>)
 801238a:	4293      	cmp	r3, r2
 801238c:	dd06      	ble.n	801239c <__ieee754_log+0x58>
 801238e:	0002      	movs	r2, r0
 8012390:	000b      	movs	r3, r1
 8012392:	f7ef f837 	bl	8001404 <__aeabi_dadd>
 8012396:	e7e6      	b.n	8012366 <__ieee754_log+0x22>
 8012398:	2400      	movs	r4, #0
 801239a:	e7f5      	b.n	8012388 <__ieee754_log+0x44>
 801239c:	4da7      	ldr	r5, [pc, #668]	; (801263c <__ieee754_log+0x2f8>)
 801239e:	151a      	asrs	r2, r3, #20
 80123a0:	1952      	adds	r2, r2, r5
 80123a2:	1912      	adds	r2, r2, r4
 80123a4:	031b      	lsls	r3, r3, #12
 80123a6:	4ca6      	ldr	r4, [pc, #664]	; (8012640 <__ieee754_log+0x2fc>)
 80123a8:	0b1b      	lsrs	r3, r3, #12
 80123aa:	9302      	str	r3, [sp, #8]
 80123ac:	191c      	adds	r4, r3, r4
 80123ae:	2380      	movs	r3, #128	; 0x80
 80123b0:	035b      	lsls	r3, r3, #13
 80123b2:	4023      	ands	r3, r4
 80123b4:	4ca3      	ldr	r4, [pc, #652]	; (8012644 <__ieee754_log+0x300>)
 80123b6:	9d02      	ldr	r5, [sp, #8]
 80123b8:	405c      	eors	r4, r3
 80123ba:	151b      	asrs	r3, r3, #20
 80123bc:	189b      	adds	r3, r3, r2
 80123be:	4325      	orrs	r5, r4
 80123c0:	2200      	movs	r2, #0
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	0029      	movs	r1, r5
 80123c6:	4b9f      	ldr	r3, [pc, #636]	; (8012644 <__ieee754_log+0x300>)
 80123c8:	f7f0 f9f8 	bl	80027bc <__aeabi_dsub>
 80123cc:	9b02      	ldr	r3, [sp, #8]
 80123ce:	0006      	movs	r6, r0
 80123d0:	3302      	adds	r3, #2
 80123d2:	031b      	lsls	r3, r3, #12
 80123d4:	000f      	movs	r7, r1
 80123d6:	2200      	movs	r2, #0
 80123d8:	0b1b      	lsrs	r3, r3, #12
 80123da:	2b02      	cmp	r3, #2
 80123dc:	dc64      	bgt.n	80124a8 <__ieee754_log+0x164>
 80123de:	2300      	movs	r3, #0
 80123e0:	f7ee f81e 	bl	8000420 <__aeabi_dcmpeq>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d019      	beq.n	801241c <__ieee754_log+0xd8>
 80123e8:	9b00      	ldr	r3, [sp, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d100      	bne.n	80123f0 <__ieee754_log+0xac>
 80123ee:	e11c      	b.n	801262a <__ieee754_log+0x2e6>
 80123f0:	0018      	movs	r0, r3
 80123f2:	f7f0 fdc9 	bl	8002f88 <__aeabi_i2d>
 80123f6:	4a94      	ldr	r2, [pc, #592]	; (8012648 <__ieee754_log+0x304>)
 80123f8:	4b94      	ldr	r3, [pc, #592]	; (801264c <__ieee754_log+0x308>)
 80123fa:	0004      	movs	r4, r0
 80123fc:	000d      	movs	r5, r1
 80123fe:	f7ef ff71 	bl	80022e4 <__aeabi_dmul>
 8012402:	4a93      	ldr	r2, [pc, #588]	; (8012650 <__ieee754_log+0x30c>)
 8012404:	0006      	movs	r6, r0
 8012406:	000f      	movs	r7, r1
 8012408:	4b92      	ldr	r3, [pc, #584]	; (8012654 <__ieee754_log+0x310>)
 801240a:	0020      	movs	r0, r4
 801240c:	0029      	movs	r1, r5
 801240e:	f7ef ff69 	bl	80022e4 <__aeabi_dmul>
 8012412:	0002      	movs	r2, r0
 8012414:	000b      	movs	r3, r1
 8012416:	0030      	movs	r0, r6
 8012418:	0039      	movs	r1, r7
 801241a:	e7ba      	b.n	8012392 <__ieee754_log+0x4e>
 801241c:	4a8e      	ldr	r2, [pc, #568]	; (8012658 <__ieee754_log+0x314>)
 801241e:	4b8f      	ldr	r3, [pc, #572]	; (801265c <__ieee754_log+0x318>)
 8012420:	0030      	movs	r0, r6
 8012422:	0039      	movs	r1, r7
 8012424:	f7ef ff5e 	bl	80022e4 <__aeabi_dmul>
 8012428:	0002      	movs	r2, r0
 801242a:	000b      	movs	r3, r1
 801242c:	2000      	movs	r0, #0
 801242e:	498c      	ldr	r1, [pc, #560]	; (8012660 <__ieee754_log+0x31c>)
 8012430:	f7f0 f9c4 	bl	80027bc <__aeabi_dsub>
 8012434:	0032      	movs	r2, r6
 8012436:	0004      	movs	r4, r0
 8012438:	000d      	movs	r5, r1
 801243a:	003b      	movs	r3, r7
 801243c:	0030      	movs	r0, r6
 801243e:	0039      	movs	r1, r7
 8012440:	f7ef ff50 	bl	80022e4 <__aeabi_dmul>
 8012444:	000b      	movs	r3, r1
 8012446:	0002      	movs	r2, r0
 8012448:	0029      	movs	r1, r5
 801244a:	0020      	movs	r0, r4
 801244c:	f7ef ff4a 	bl	80022e4 <__aeabi_dmul>
 8012450:	9b00      	ldr	r3, [sp, #0]
 8012452:	9002      	str	r0, [sp, #8]
 8012454:	9103      	str	r1, [sp, #12]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d106      	bne.n	8012468 <__ieee754_log+0x124>
 801245a:	0002      	movs	r2, r0
 801245c:	000b      	movs	r3, r1
 801245e:	0030      	movs	r0, r6
 8012460:	0039      	movs	r1, r7
 8012462:	f7f0 f9ab 	bl	80027bc <__aeabi_dsub>
 8012466:	e77e      	b.n	8012366 <__ieee754_log+0x22>
 8012468:	9800      	ldr	r0, [sp, #0]
 801246a:	f7f0 fd8d 	bl	8002f88 <__aeabi_i2d>
 801246e:	4a76      	ldr	r2, [pc, #472]	; (8012648 <__ieee754_log+0x304>)
 8012470:	4b76      	ldr	r3, [pc, #472]	; (801264c <__ieee754_log+0x308>)
 8012472:	0004      	movs	r4, r0
 8012474:	000d      	movs	r5, r1
 8012476:	f7ef ff35 	bl	80022e4 <__aeabi_dmul>
 801247a:	4a75      	ldr	r2, [pc, #468]	; (8012650 <__ieee754_log+0x30c>)
 801247c:	9000      	str	r0, [sp, #0]
 801247e:	9101      	str	r1, [sp, #4]
 8012480:	4b74      	ldr	r3, [pc, #464]	; (8012654 <__ieee754_log+0x310>)
 8012482:	0020      	movs	r0, r4
 8012484:	0029      	movs	r1, r5
 8012486:	f7ef ff2d 	bl	80022e4 <__aeabi_dmul>
 801248a:	0002      	movs	r2, r0
 801248c:	000b      	movs	r3, r1
 801248e:	9802      	ldr	r0, [sp, #8]
 8012490:	9903      	ldr	r1, [sp, #12]
 8012492:	f7f0 f993 	bl	80027bc <__aeabi_dsub>
 8012496:	0032      	movs	r2, r6
 8012498:	003b      	movs	r3, r7
 801249a:	f7f0 f98f 	bl	80027bc <__aeabi_dsub>
 801249e:	0002      	movs	r2, r0
 80124a0:	000b      	movs	r3, r1
 80124a2:	9800      	ldr	r0, [sp, #0]
 80124a4:	9901      	ldr	r1, [sp, #4]
 80124a6:	e7dc      	b.n	8012462 <__ieee754_log+0x11e>
 80124a8:	2380      	movs	r3, #128	; 0x80
 80124aa:	05db      	lsls	r3, r3, #23
 80124ac:	f7ee ffaa 	bl	8001404 <__aeabi_dadd>
 80124b0:	0002      	movs	r2, r0
 80124b2:	000b      	movs	r3, r1
 80124b4:	0030      	movs	r0, r6
 80124b6:	0039      	movs	r1, r7
 80124b8:	f7ef fb0e 	bl	8001ad8 <__aeabi_ddiv>
 80124bc:	9004      	str	r0, [sp, #16]
 80124be:	9105      	str	r1, [sp, #20]
 80124c0:	9800      	ldr	r0, [sp, #0]
 80124c2:	f7f0 fd61 	bl	8002f88 <__aeabi_i2d>
 80124c6:	9a04      	ldr	r2, [sp, #16]
 80124c8:	9b05      	ldr	r3, [sp, #20]
 80124ca:	9006      	str	r0, [sp, #24]
 80124cc:	9107      	str	r1, [sp, #28]
 80124ce:	0010      	movs	r0, r2
 80124d0:	0019      	movs	r1, r3
 80124d2:	f7ef ff07 	bl	80022e4 <__aeabi_dmul>
 80124d6:	4a63      	ldr	r2, [pc, #396]	; (8012664 <__ieee754_log+0x320>)
 80124d8:	9b02      	ldr	r3, [sp, #8]
 80124da:	4694      	mov	ip, r2
 80124dc:	4463      	add	r3, ip
 80124de:	0002      	movs	r2, r0
 80124e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80124e2:	000b      	movs	r3, r1
 80124e4:	9008      	str	r0, [sp, #32]
 80124e6:	9109      	str	r1, [sp, #36]	; 0x24
 80124e8:	f7ef fefc 	bl	80022e4 <__aeabi_dmul>
 80124ec:	0004      	movs	r4, r0
 80124ee:	000d      	movs	r5, r1
 80124f0:	4a5d      	ldr	r2, [pc, #372]	; (8012668 <__ieee754_log+0x324>)
 80124f2:	4b5e      	ldr	r3, [pc, #376]	; (801266c <__ieee754_log+0x328>)
 80124f4:	f7ef fef6 	bl	80022e4 <__aeabi_dmul>
 80124f8:	4a5d      	ldr	r2, [pc, #372]	; (8012670 <__ieee754_log+0x32c>)
 80124fa:	4b5e      	ldr	r3, [pc, #376]	; (8012674 <__ieee754_log+0x330>)
 80124fc:	f7ee ff82 	bl	8001404 <__aeabi_dadd>
 8012500:	0022      	movs	r2, r4
 8012502:	002b      	movs	r3, r5
 8012504:	f7ef feee 	bl	80022e4 <__aeabi_dmul>
 8012508:	4a5b      	ldr	r2, [pc, #364]	; (8012678 <__ieee754_log+0x334>)
 801250a:	4b5c      	ldr	r3, [pc, #368]	; (801267c <__ieee754_log+0x338>)
 801250c:	f7ee ff7a 	bl	8001404 <__aeabi_dadd>
 8012510:	0022      	movs	r2, r4
 8012512:	002b      	movs	r3, r5
 8012514:	f7ef fee6 	bl	80022e4 <__aeabi_dmul>
 8012518:	4a59      	ldr	r2, [pc, #356]	; (8012680 <__ieee754_log+0x33c>)
 801251a:	4b5a      	ldr	r3, [pc, #360]	; (8012684 <__ieee754_log+0x340>)
 801251c:	f7ee ff72 	bl	8001404 <__aeabi_dadd>
 8012520:	9a08      	ldr	r2, [sp, #32]
 8012522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012524:	f7ef fede 	bl	80022e4 <__aeabi_dmul>
 8012528:	4a57      	ldr	r2, [pc, #348]	; (8012688 <__ieee754_log+0x344>)
 801252a:	9008      	str	r0, [sp, #32]
 801252c:	9109      	str	r1, [sp, #36]	; 0x24
 801252e:	4b57      	ldr	r3, [pc, #348]	; (801268c <__ieee754_log+0x348>)
 8012530:	0020      	movs	r0, r4
 8012532:	0029      	movs	r1, r5
 8012534:	f7ef fed6 	bl	80022e4 <__aeabi_dmul>
 8012538:	4a55      	ldr	r2, [pc, #340]	; (8012690 <__ieee754_log+0x34c>)
 801253a:	4b56      	ldr	r3, [pc, #344]	; (8012694 <__ieee754_log+0x350>)
 801253c:	f7ee ff62 	bl	8001404 <__aeabi_dadd>
 8012540:	0022      	movs	r2, r4
 8012542:	002b      	movs	r3, r5
 8012544:	f7ef fece 	bl	80022e4 <__aeabi_dmul>
 8012548:	4a53      	ldr	r2, [pc, #332]	; (8012698 <__ieee754_log+0x354>)
 801254a:	4b54      	ldr	r3, [pc, #336]	; (801269c <__ieee754_log+0x358>)
 801254c:	f7ee ff5a 	bl	8001404 <__aeabi_dadd>
 8012550:	0022      	movs	r2, r4
 8012552:	002b      	movs	r3, r5
 8012554:	f7ef fec6 	bl	80022e4 <__aeabi_dmul>
 8012558:	0002      	movs	r2, r0
 801255a:	000b      	movs	r3, r1
 801255c:	9808      	ldr	r0, [sp, #32]
 801255e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012560:	f7ee ff50 	bl	8001404 <__aeabi_dadd>
 8012564:	9a02      	ldr	r2, [sp, #8]
 8012566:	4b4e      	ldr	r3, [pc, #312]	; (80126a0 <__ieee754_log+0x35c>)
 8012568:	0004      	movs	r4, r0
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801256e:	000d      	movs	r5, r1
 8012570:	4313      	orrs	r3, r2
 8012572:	2b00      	cmp	r3, #0
 8012574:	dd34      	ble.n	80125e0 <__ieee754_log+0x29c>
 8012576:	2200      	movs	r2, #0
 8012578:	4b39      	ldr	r3, [pc, #228]	; (8012660 <__ieee754_log+0x31c>)
 801257a:	0030      	movs	r0, r6
 801257c:	0039      	movs	r1, r7
 801257e:	f7ef feb1 	bl	80022e4 <__aeabi_dmul>
 8012582:	0032      	movs	r2, r6
 8012584:	003b      	movs	r3, r7
 8012586:	f7ef fead 	bl	80022e4 <__aeabi_dmul>
 801258a:	0002      	movs	r2, r0
 801258c:	000b      	movs	r3, r1
 801258e:	9002      	str	r0, [sp, #8]
 8012590:	9103      	str	r1, [sp, #12]
 8012592:	0020      	movs	r0, r4
 8012594:	0029      	movs	r1, r5
 8012596:	f7ee ff35 	bl	8001404 <__aeabi_dadd>
 801259a:	9a04      	ldr	r2, [sp, #16]
 801259c:	9b05      	ldr	r3, [sp, #20]
 801259e:	f7ef fea1 	bl	80022e4 <__aeabi_dmul>
 80125a2:	9b00      	ldr	r3, [sp, #0]
 80125a4:	0004      	movs	r4, r0
 80125a6:	000d      	movs	r5, r1
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <__ieee754_log+0x276>
 80125ac:	0002      	movs	r2, r0
 80125ae:	000b      	movs	r3, r1
 80125b0:	9802      	ldr	r0, [sp, #8]
 80125b2:	9903      	ldr	r1, [sp, #12]
 80125b4:	f7f0 f902 	bl	80027bc <__aeabi_dsub>
 80125b8:	e74f      	b.n	801245a <__ieee754_log+0x116>
 80125ba:	4a23      	ldr	r2, [pc, #140]	; (8012648 <__ieee754_log+0x304>)
 80125bc:	4b23      	ldr	r3, [pc, #140]	; (801264c <__ieee754_log+0x308>)
 80125be:	9806      	ldr	r0, [sp, #24]
 80125c0:	9907      	ldr	r1, [sp, #28]
 80125c2:	f7ef fe8f 	bl	80022e4 <__aeabi_dmul>
 80125c6:	4a22      	ldr	r2, [pc, #136]	; (8012650 <__ieee754_log+0x30c>)
 80125c8:	9000      	str	r0, [sp, #0]
 80125ca:	9101      	str	r1, [sp, #4]
 80125cc:	9806      	ldr	r0, [sp, #24]
 80125ce:	9907      	ldr	r1, [sp, #28]
 80125d0:	4b20      	ldr	r3, [pc, #128]	; (8012654 <__ieee754_log+0x310>)
 80125d2:	f7ef fe87 	bl	80022e4 <__aeabi_dmul>
 80125d6:	0022      	movs	r2, r4
 80125d8:	002b      	movs	r3, r5
 80125da:	f7ee ff13 	bl	8001404 <__aeabi_dadd>
 80125de:	e754      	b.n	801248a <__ieee754_log+0x146>
 80125e0:	0002      	movs	r2, r0
 80125e2:	000b      	movs	r3, r1
 80125e4:	0030      	movs	r0, r6
 80125e6:	0039      	movs	r1, r7
 80125e8:	f7f0 f8e8 	bl	80027bc <__aeabi_dsub>
 80125ec:	9a04      	ldr	r2, [sp, #16]
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	f7ef fe78 	bl	80022e4 <__aeabi_dmul>
 80125f4:	9b00      	ldr	r3, [sp, #0]
 80125f6:	0004      	movs	r4, r0
 80125f8:	000d      	movs	r5, r1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d102      	bne.n	8012604 <__ieee754_log+0x2c0>
 80125fe:	0002      	movs	r2, r0
 8012600:	000b      	movs	r3, r1
 8012602:	e72c      	b.n	801245e <__ieee754_log+0x11a>
 8012604:	4a10      	ldr	r2, [pc, #64]	; (8012648 <__ieee754_log+0x304>)
 8012606:	4b11      	ldr	r3, [pc, #68]	; (801264c <__ieee754_log+0x308>)
 8012608:	9806      	ldr	r0, [sp, #24]
 801260a:	9907      	ldr	r1, [sp, #28]
 801260c:	f7ef fe6a 	bl	80022e4 <__aeabi_dmul>
 8012610:	4a0f      	ldr	r2, [pc, #60]	; (8012650 <__ieee754_log+0x30c>)
 8012612:	9000      	str	r0, [sp, #0]
 8012614:	9101      	str	r1, [sp, #4]
 8012616:	9806      	ldr	r0, [sp, #24]
 8012618:	9907      	ldr	r1, [sp, #28]
 801261a:	4b0e      	ldr	r3, [pc, #56]	; (8012654 <__ieee754_log+0x310>)
 801261c:	f7ef fe62 	bl	80022e4 <__aeabi_dmul>
 8012620:	0002      	movs	r2, r0
 8012622:	000b      	movs	r3, r1
 8012624:	0020      	movs	r0, r4
 8012626:	0029      	movs	r1, r5
 8012628:	e733      	b.n	8012492 <__ieee754_log+0x14e>
 801262a:	2000      	movs	r0, #0
 801262c:	2100      	movs	r1, #0
 801262e:	e69a      	b.n	8012366 <__ieee754_log+0x22>
 8012630:	c3500000 	.word	0xc3500000
 8012634:	43500000 	.word	0x43500000
 8012638:	7fefffff 	.word	0x7fefffff
 801263c:	fffffc01 	.word	0xfffffc01
 8012640:	00095f64 	.word	0x00095f64
 8012644:	3ff00000 	.word	0x3ff00000
 8012648:	fee00000 	.word	0xfee00000
 801264c:	3fe62e42 	.word	0x3fe62e42
 8012650:	35793c76 	.word	0x35793c76
 8012654:	3dea39ef 	.word	0x3dea39ef
 8012658:	55555555 	.word	0x55555555
 801265c:	3fd55555 	.word	0x3fd55555
 8012660:	3fe00000 	.word	0x3fe00000
 8012664:	fff9eb86 	.word	0xfff9eb86
 8012668:	df3e5244 	.word	0xdf3e5244
 801266c:	3fc2f112 	.word	0x3fc2f112
 8012670:	96cb03de 	.word	0x96cb03de
 8012674:	3fc74664 	.word	0x3fc74664
 8012678:	94229359 	.word	0x94229359
 801267c:	3fd24924 	.word	0x3fd24924
 8012680:	55555593 	.word	0x55555593
 8012684:	3fe55555 	.word	0x3fe55555
 8012688:	d078c69f 	.word	0xd078c69f
 801268c:	3fc39a09 	.word	0x3fc39a09
 8012690:	1d8e78af 	.word	0x1d8e78af
 8012694:	3fcc71c5 	.word	0x3fcc71c5
 8012698:	9997fa04 	.word	0x9997fa04
 801269c:	3fd99999 	.word	0x3fd99999
 80126a0:	0006b851 	.word	0x0006b851

080126a4 <__ieee754_rem_pio2>:
 80126a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126a6:	004b      	lsls	r3, r1, #1
 80126a8:	b091      	sub	sp, #68	; 0x44
 80126aa:	085b      	lsrs	r3, r3, #1
 80126ac:	9302      	str	r3, [sp, #8]
 80126ae:	0017      	movs	r7, r2
 80126b0:	4bb6      	ldr	r3, [pc, #728]	; (801298c <__ieee754_rem_pio2+0x2e8>)
 80126b2:	9a02      	ldr	r2, [sp, #8]
 80126b4:	0004      	movs	r4, r0
 80126b6:	000d      	movs	r5, r1
 80126b8:	9109      	str	r1, [sp, #36]	; 0x24
 80126ba:	429a      	cmp	r2, r3
 80126bc:	dc09      	bgt.n	80126d2 <__ieee754_rem_pio2+0x2e>
 80126be:	0002      	movs	r2, r0
 80126c0:	000b      	movs	r3, r1
 80126c2:	603a      	str	r2, [r7, #0]
 80126c4:	607b      	str	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	2300      	movs	r3, #0
 80126ca:	60ba      	str	r2, [r7, #8]
 80126cc:	60fb      	str	r3, [r7, #12]
 80126ce:	2600      	movs	r6, #0
 80126d0:	e025      	b.n	801271e <__ieee754_rem_pio2+0x7a>
 80126d2:	4baf      	ldr	r3, [pc, #700]	; (8012990 <__ieee754_rem_pio2+0x2ec>)
 80126d4:	9a02      	ldr	r2, [sp, #8]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	dd00      	ble.n	80126dc <__ieee754_rem_pio2+0x38>
 80126da:	e06e      	b.n	80127ba <__ieee754_rem_pio2+0x116>
 80126dc:	4ead      	ldr	r6, [pc, #692]	; (8012994 <__ieee754_rem_pio2+0x2f0>)
 80126de:	4aae      	ldr	r2, [pc, #696]	; (8012998 <__ieee754_rem_pio2+0x2f4>)
 80126e0:	2d00      	cmp	r5, #0
 80126e2:	dd35      	ble.n	8012750 <__ieee754_rem_pio2+0xac>
 80126e4:	0020      	movs	r0, r4
 80126e6:	0029      	movs	r1, r5
 80126e8:	4baa      	ldr	r3, [pc, #680]	; (8012994 <__ieee754_rem_pio2+0x2f0>)
 80126ea:	f7f0 f867 	bl	80027bc <__aeabi_dsub>
 80126ee:	9b02      	ldr	r3, [sp, #8]
 80126f0:	0004      	movs	r4, r0
 80126f2:	000d      	movs	r5, r1
 80126f4:	42b3      	cmp	r3, r6
 80126f6:	d015      	beq.n	8012724 <__ieee754_rem_pio2+0x80>
 80126f8:	4aa8      	ldr	r2, [pc, #672]	; (801299c <__ieee754_rem_pio2+0x2f8>)
 80126fa:	4ba9      	ldr	r3, [pc, #676]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 80126fc:	f7f0 f85e 	bl	80027bc <__aeabi_dsub>
 8012700:	0002      	movs	r2, r0
 8012702:	000b      	movs	r3, r1
 8012704:	0020      	movs	r0, r4
 8012706:	603a      	str	r2, [r7, #0]
 8012708:	607b      	str	r3, [r7, #4]
 801270a:	0029      	movs	r1, r5
 801270c:	f7f0 f856 	bl	80027bc <__aeabi_dsub>
 8012710:	4aa2      	ldr	r2, [pc, #648]	; (801299c <__ieee754_rem_pio2+0x2f8>)
 8012712:	4ba3      	ldr	r3, [pc, #652]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 8012714:	f7f0 f852 	bl	80027bc <__aeabi_dsub>
 8012718:	2601      	movs	r6, #1
 801271a:	60b8      	str	r0, [r7, #8]
 801271c:	60f9      	str	r1, [r7, #12]
 801271e:	0030      	movs	r0, r6
 8012720:	b011      	add	sp, #68	; 0x44
 8012722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012724:	22d3      	movs	r2, #211	; 0xd3
 8012726:	4b9e      	ldr	r3, [pc, #632]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 8012728:	0552      	lsls	r2, r2, #21
 801272a:	f7f0 f847 	bl	80027bc <__aeabi_dsub>
 801272e:	4a9d      	ldr	r2, [pc, #628]	; (80129a4 <__ieee754_rem_pio2+0x300>)
 8012730:	4b9d      	ldr	r3, [pc, #628]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 8012732:	0004      	movs	r4, r0
 8012734:	000d      	movs	r5, r1
 8012736:	f7f0 f841 	bl	80027bc <__aeabi_dsub>
 801273a:	0002      	movs	r2, r0
 801273c:	000b      	movs	r3, r1
 801273e:	0020      	movs	r0, r4
 8012740:	603a      	str	r2, [r7, #0]
 8012742:	607b      	str	r3, [r7, #4]
 8012744:	0029      	movs	r1, r5
 8012746:	f7f0 f839 	bl	80027bc <__aeabi_dsub>
 801274a:	4a96      	ldr	r2, [pc, #600]	; (80129a4 <__ieee754_rem_pio2+0x300>)
 801274c:	4b96      	ldr	r3, [pc, #600]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 801274e:	e7e1      	b.n	8012714 <__ieee754_rem_pio2+0x70>
 8012750:	0020      	movs	r0, r4
 8012752:	0029      	movs	r1, r5
 8012754:	4b8f      	ldr	r3, [pc, #572]	; (8012994 <__ieee754_rem_pio2+0x2f0>)
 8012756:	f7ee fe55 	bl	8001404 <__aeabi_dadd>
 801275a:	9b02      	ldr	r3, [sp, #8]
 801275c:	0004      	movs	r4, r0
 801275e:	000d      	movs	r5, r1
 8012760:	42b3      	cmp	r3, r6
 8012762:	d014      	beq.n	801278e <__ieee754_rem_pio2+0xea>
 8012764:	4a8d      	ldr	r2, [pc, #564]	; (801299c <__ieee754_rem_pio2+0x2f8>)
 8012766:	4b8e      	ldr	r3, [pc, #568]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 8012768:	f7ee fe4c 	bl	8001404 <__aeabi_dadd>
 801276c:	0002      	movs	r2, r0
 801276e:	000b      	movs	r3, r1
 8012770:	0020      	movs	r0, r4
 8012772:	603a      	str	r2, [r7, #0]
 8012774:	607b      	str	r3, [r7, #4]
 8012776:	0029      	movs	r1, r5
 8012778:	f7f0 f820 	bl	80027bc <__aeabi_dsub>
 801277c:	4a87      	ldr	r2, [pc, #540]	; (801299c <__ieee754_rem_pio2+0x2f8>)
 801277e:	4b88      	ldr	r3, [pc, #544]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 8012780:	f7ee fe40 	bl	8001404 <__aeabi_dadd>
 8012784:	2601      	movs	r6, #1
 8012786:	60b8      	str	r0, [r7, #8]
 8012788:	60f9      	str	r1, [r7, #12]
 801278a:	4276      	negs	r6, r6
 801278c:	e7c7      	b.n	801271e <__ieee754_rem_pio2+0x7a>
 801278e:	22d3      	movs	r2, #211	; 0xd3
 8012790:	4b83      	ldr	r3, [pc, #524]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 8012792:	0552      	lsls	r2, r2, #21
 8012794:	f7ee fe36 	bl	8001404 <__aeabi_dadd>
 8012798:	4a82      	ldr	r2, [pc, #520]	; (80129a4 <__ieee754_rem_pio2+0x300>)
 801279a:	4b83      	ldr	r3, [pc, #524]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 801279c:	0004      	movs	r4, r0
 801279e:	000d      	movs	r5, r1
 80127a0:	f7ee fe30 	bl	8001404 <__aeabi_dadd>
 80127a4:	0002      	movs	r2, r0
 80127a6:	000b      	movs	r3, r1
 80127a8:	0020      	movs	r0, r4
 80127aa:	603a      	str	r2, [r7, #0]
 80127ac:	607b      	str	r3, [r7, #4]
 80127ae:	0029      	movs	r1, r5
 80127b0:	f7f0 f804 	bl	80027bc <__aeabi_dsub>
 80127b4:	4a7b      	ldr	r2, [pc, #492]	; (80129a4 <__ieee754_rem_pio2+0x300>)
 80127b6:	4b7c      	ldr	r3, [pc, #496]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 80127b8:	e7e2      	b.n	8012780 <__ieee754_rem_pio2+0xdc>
 80127ba:	4b7c      	ldr	r3, [pc, #496]	; (80129ac <__ieee754_rem_pio2+0x308>)
 80127bc:	9a02      	ldr	r2, [sp, #8]
 80127be:	429a      	cmp	r2, r3
 80127c0:	dd00      	ble.n	80127c4 <__ieee754_rem_pio2+0x120>
 80127c2:	e0d3      	b.n	801296c <__ieee754_rem_pio2+0x2c8>
 80127c4:	0020      	movs	r0, r4
 80127c6:	0029      	movs	r1, r5
 80127c8:	f000 ffba 	bl	8013740 <fabs>
 80127cc:	4a78      	ldr	r2, [pc, #480]	; (80129b0 <__ieee754_rem_pio2+0x30c>)
 80127ce:	4b79      	ldr	r3, [pc, #484]	; (80129b4 <__ieee754_rem_pio2+0x310>)
 80127d0:	0004      	movs	r4, r0
 80127d2:	000d      	movs	r5, r1
 80127d4:	f7ef fd86 	bl	80022e4 <__aeabi_dmul>
 80127d8:	2200      	movs	r2, #0
 80127da:	4b77      	ldr	r3, [pc, #476]	; (80129b8 <__ieee754_rem_pio2+0x314>)
 80127dc:	f7ee fe12 	bl	8001404 <__aeabi_dadd>
 80127e0:	f7f0 fb9c 	bl	8002f1c <__aeabi_d2iz>
 80127e4:	0006      	movs	r6, r0
 80127e6:	f7f0 fbcf 	bl	8002f88 <__aeabi_i2d>
 80127ea:	4a6b      	ldr	r2, [pc, #428]	; (8012998 <__ieee754_rem_pio2+0x2f4>)
 80127ec:	4b69      	ldr	r3, [pc, #420]	; (8012994 <__ieee754_rem_pio2+0x2f0>)
 80127ee:	9006      	str	r0, [sp, #24]
 80127f0:	9107      	str	r1, [sp, #28]
 80127f2:	f7ef fd77 	bl	80022e4 <__aeabi_dmul>
 80127f6:	0002      	movs	r2, r0
 80127f8:	000b      	movs	r3, r1
 80127fa:	0020      	movs	r0, r4
 80127fc:	0029      	movs	r1, r5
 80127fe:	f7ef ffdd 	bl	80027bc <__aeabi_dsub>
 8012802:	4a66      	ldr	r2, [pc, #408]	; (801299c <__ieee754_rem_pio2+0x2f8>)
 8012804:	9004      	str	r0, [sp, #16]
 8012806:	9105      	str	r1, [sp, #20]
 8012808:	9806      	ldr	r0, [sp, #24]
 801280a:	9907      	ldr	r1, [sp, #28]
 801280c:	4b64      	ldr	r3, [pc, #400]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 801280e:	f7ef fd69 	bl	80022e4 <__aeabi_dmul>
 8012812:	0004      	movs	r4, r0
 8012814:	000d      	movs	r5, r1
 8012816:	2e1f      	cmp	r6, #31
 8012818:	dc0f      	bgt.n	801283a <__ieee754_rem_pio2+0x196>
 801281a:	4a68      	ldr	r2, [pc, #416]	; (80129bc <__ieee754_rem_pio2+0x318>)
 801281c:	1e73      	subs	r3, r6, #1
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	589b      	ldr	r3, [r3, r2]
 8012822:	9a02      	ldr	r2, [sp, #8]
 8012824:	4293      	cmp	r3, r2
 8012826:	d008      	beq.n	801283a <__ieee754_rem_pio2+0x196>
 8012828:	9804      	ldr	r0, [sp, #16]
 801282a:	9905      	ldr	r1, [sp, #20]
 801282c:	0022      	movs	r2, r4
 801282e:	002b      	movs	r3, r5
 8012830:	f7ef ffc4 	bl	80027bc <__aeabi_dsub>
 8012834:	6038      	str	r0, [r7, #0]
 8012836:	6079      	str	r1, [r7, #4]
 8012838:	e012      	b.n	8012860 <__ieee754_rem_pio2+0x1bc>
 801283a:	0022      	movs	r2, r4
 801283c:	9804      	ldr	r0, [sp, #16]
 801283e:	9905      	ldr	r1, [sp, #20]
 8012840:	002b      	movs	r3, r5
 8012842:	f7ef ffbb 	bl	80027bc <__aeabi_dsub>
 8012846:	9b02      	ldr	r3, [sp, #8]
 8012848:	151b      	asrs	r3, r3, #20
 801284a:	9308      	str	r3, [sp, #32]
 801284c:	9a08      	ldr	r2, [sp, #32]
 801284e:	004b      	lsls	r3, r1, #1
 8012850:	0d5b      	lsrs	r3, r3, #21
 8012852:	1ad3      	subs	r3, r2, r3
 8012854:	2b10      	cmp	r3, #16
 8012856:	dc21      	bgt.n	801289c <__ieee754_rem_pio2+0x1f8>
 8012858:	0002      	movs	r2, r0
 801285a:	000b      	movs	r3, r1
 801285c:	603a      	str	r2, [r7, #0]
 801285e:	607b      	str	r3, [r7, #4]
 8012860:	9804      	ldr	r0, [sp, #16]
 8012862:	9905      	ldr	r1, [sp, #20]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	683a      	ldr	r2, [r7, #0]
 8012868:	9302      	str	r3, [sp, #8]
 801286a:	9b02      	ldr	r3, [sp, #8]
 801286c:	f7ef ffa6 	bl	80027bc <__aeabi_dsub>
 8012870:	0022      	movs	r2, r4
 8012872:	002b      	movs	r3, r5
 8012874:	f7ef ffa2 	bl	80027bc <__aeabi_dsub>
 8012878:	000b      	movs	r3, r1
 801287a:	0002      	movs	r2, r0
 801287c:	60ba      	str	r2, [r7, #8]
 801287e:	60fb      	str	r3, [r7, #12]
 8012880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012882:	2b00      	cmp	r3, #0
 8012884:	db00      	blt.n	8012888 <__ieee754_rem_pio2+0x1e4>
 8012886:	e74a      	b.n	801271e <__ieee754_rem_pio2+0x7a>
 8012888:	2280      	movs	r2, #128	; 0x80
 801288a:	0612      	lsls	r2, r2, #24
 801288c:	4694      	mov	ip, r2
 801288e:	9b02      	ldr	r3, [sp, #8]
 8012890:	1889      	adds	r1, r1, r2
 8012892:	4463      	add	r3, ip
 8012894:	607b      	str	r3, [r7, #4]
 8012896:	60b8      	str	r0, [r7, #8]
 8012898:	60f9      	str	r1, [r7, #12]
 801289a:	e776      	b.n	801278a <__ieee754_rem_pio2+0xe6>
 801289c:	22d3      	movs	r2, #211	; 0xd3
 801289e:	9806      	ldr	r0, [sp, #24]
 80128a0:	9907      	ldr	r1, [sp, #28]
 80128a2:	4b3f      	ldr	r3, [pc, #252]	; (80129a0 <__ieee754_rem_pio2+0x2fc>)
 80128a4:	0552      	lsls	r2, r2, #21
 80128a6:	f7ef fd1d 	bl	80022e4 <__aeabi_dmul>
 80128aa:	0004      	movs	r4, r0
 80128ac:	000d      	movs	r5, r1
 80128ae:	0002      	movs	r2, r0
 80128b0:	000b      	movs	r3, r1
 80128b2:	9804      	ldr	r0, [sp, #16]
 80128b4:	9905      	ldr	r1, [sp, #20]
 80128b6:	f7ef ff81 	bl	80027bc <__aeabi_dsub>
 80128ba:	0002      	movs	r2, r0
 80128bc:	000b      	movs	r3, r1
 80128be:	9002      	str	r0, [sp, #8]
 80128c0:	9103      	str	r1, [sp, #12]
 80128c2:	9804      	ldr	r0, [sp, #16]
 80128c4:	9905      	ldr	r1, [sp, #20]
 80128c6:	f7ef ff79 	bl	80027bc <__aeabi_dsub>
 80128ca:	0022      	movs	r2, r4
 80128cc:	002b      	movs	r3, r5
 80128ce:	f7ef ff75 	bl	80027bc <__aeabi_dsub>
 80128d2:	0004      	movs	r4, r0
 80128d4:	000d      	movs	r5, r1
 80128d6:	9806      	ldr	r0, [sp, #24]
 80128d8:	9907      	ldr	r1, [sp, #28]
 80128da:	4a32      	ldr	r2, [pc, #200]	; (80129a4 <__ieee754_rem_pio2+0x300>)
 80128dc:	4b32      	ldr	r3, [pc, #200]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 80128de:	f7ef fd01 	bl	80022e4 <__aeabi_dmul>
 80128e2:	0022      	movs	r2, r4
 80128e4:	002b      	movs	r3, r5
 80128e6:	f7ef ff69 	bl	80027bc <__aeabi_dsub>
 80128ea:	0002      	movs	r2, r0
 80128ec:	000b      	movs	r3, r1
 80128ee:	0004      	movs	r4, r0
 80128f0:	000d      	movs	r5, r1
 80128f2:	9802      	ldr	r0, [sp, #8]
 80128f4:	9903      	ldr	r1, [sp, #12]
 80128f6:	f7ef ff61 	bl	80027bc <__aeabi_dsub>
 80128fa:	9a08      	ldr	r2, [sp, #32]
 80128fc:	004b      	lsls	r3, r1, #1
 80128fe:	0d5b      	lsrs	r3, r3, #21
 8012900:	1ad3      	subs	r3, r2, r3
 8012902:	2b31      	cmp	r3, #49	; 0x31
 8012904:	dc08      	bgt.n	8012918 <__ieee754_rem_pio2+0x274>
 8012906:	0002      	movs	r2, r0
 8012908:	000b      	movs	r3, r1
 801290a:	603a      	str	r2, [r7, #0]
 801290c:	607b      	str	r3, [r7, #4]
 801290e:	9a02      	ldr	r2, [sp, #8]
 8012910:	9b03      	ldr	r3, [sp, #12]
 8012912:	9204      	str	r2, [sp, #16]
 8012914:	9305      	str	r3, [sp, #20]
 8012916:	e7a3      	b.n	8012860 <__ieee754_rem_pio2+0x1bc>
 8012918:	22b8      	movs	r2, #184	; 0xb8
 801291a:	9806      	ldr	r0, [sp, #24]
 801291c:	9907      	ldr	r1, [sp, #28]
 801291e:	4b22      	ldr	r3, [pc, #136]	; (80129a8 <__ieee754_rem_pio2+0x304>)
 8012920:	0592      	lsls	r2, r2, #22
 8012922:	f7ef fcdf 	bl	80022e4 <__aeabi_dmul>
 8012926:	0004      	movs	r4, r0
 8012928:	000d      	movs	r5, r1
 801292a:	0002      	movs	r2, r0
 801292c:	000b      	movs	r3, r1
 801292e:	9802      	ldr	r0, [sp, #8]
 8012930:	9903      	ldr	r1, [sp, #12]
 8012932:	f7ef ff43 	bl	80027bc <__aeabi_dsub>
 8012936:	0002      	movs	r2, r0
 8012938:	000b      	movs	r3, r1
 801293a:	9004      	str	r0, [sp, #16]
 801293c:	9105      	str	r1, [sp, #20]
 801293e:	9802      	ldr	r0, [sp, #8]
 8012940:	9903      	ldr	r1, [sp, #12]
 8012942:	f7ef ff3b 	bl	80027bc <__aeabi_dsub>
 8012946:	0022      	movs	r2, r4
 8012948:	002b      	movs	r3, r5
 801294a:	f7ef ff37 	bl	80027bc <__aeabi_dsub>
 801294e:	0004      	movs	r4, r0
 8012950:	000d      	movs	r5, r1
 8012952:	9806      	ldr	r0, [sp, #24]
 8012954:	9907      	ldr	r1, [sp, #28]
 8012956:	4a1a      	ldr	r2, [pc, #104]	; (80129c0 <__ieee754_rem_pio2+0x31c>)
 8012958:	4b1a      	ldr	r3, [pc, #104]	; (80129c4 <__ieee754_rem_pio2+0x320>)
 801295a:	f7ef fcc3 	bl	80022e4 <__aeabi_dmul>
 801295e:	0022      	movs	r2, r4
 8012960:	002b      	movs	r3, r5
 8012962:	f7ef ff2b 	bl	80027bc <__aeabi_dsub>
 8012966:	0004      	movs	r4, r0
 8012968:	000d      	movs	r5, r1
 801296a:	e75d      	b.n	8012828 <__ieee754_rem_pio2+0x184>
 801296c:	4b16      	ldr	r3, [pc, #88]	; (80129c8 <__ieee754_rem_pio2+0x324>)
 801296e:	9a02      	ldr	r2, [sp, #8]
 8012970:	429a      	cmp	r2, r3
 8012972:	dd2b      	ble.n	80129cc <__ieee754_rem_pio2+0x328>
 8012974:	0022      	movs	r2, r4
 8012976:	002b      	movs	r3, r5
 8012978:	0020      	movs	r0, r4
 801297a:	0029      	movs	r1, r5
 801297c:	f7ef ff1e 	bl	80027bc <__aeabi_dsub>
 8012980:	60b8      	str	r0, [r7, #8]
 8012982:	60f9      	str	r1, [r7, #12]
 8012984:	6038      	str	r0, [r7, #0]
 8012986:	6079      	str	r1, [r7, #4]
 8012988:	e6a1      	b.n	80126ce <__ieee754_rem_pio2+0x2a>
 801298a:	46c0      	nop			; (mov r8, r8)
 801298c:	3fe921fb 	.word	0x3fe921fb
 8012990:	4002d97b 	.word	0x4002d97b
 8012994:	3ff921fb 	.word	0x3ff921fb
 8012998:	54400000 	.word	0x54400000
 801299c:	1a626331 	.word	0x1a626331
 80129a0:	3dd0b461 	.word	0x3dd0b461
 80129a4:	2e037073 	.word	0x2e037073
 80129a8:	3ba3198a 	.word	0x3ba3198a
 80129ac:	413921fb 	.word	0x413921fb
 80129b0:	6dc9c883 	.word	0x6dc9c883
 80129b4:	3fe45f30 	.word	0x3fe45f30
 80129b8:	3fe00000 	.word	0x3fe00000
 80129bc:	080162d8 	.word	0x080162d8
 80129c0:	252049c1 	.word	0x252049c1
 80129c4:	397b839a 	.word	0x397b839a
 80129c8:	7fefffff 	.word	0x7fefffff
 80129cc:	9a02      	ldr	r2, [sp, #8]
 80129ce:	0020      	movs	r0, r4
 80129d0:	1516      	asrs	r6, r2, #20
 80129d2:	4a27      	ldr	r2, [pc, #156]	; (8012a70 <__ieee754_rem_pio2+0x3cc>)
 80129d4:	18b6      	adds	r6, r6, r2
 80129d6:	9a02      	ldr	r2, [sp, #8]
 80129d8:	0533      	lsls	r3, r6, #20
 80129da:	1ad5      	subs	r5, r2, r3
 80129dc:	0029      	movs	r1, r5
 80129de:	f7f0 fa9d 	bl	8002f1c <__aeabi_d2iz>
 80129e2:	f7f0 fad1 	bl	8002f88 <__aeabi_i2d>
 80129e6:	0002      	movs	r2, r0
 80129e8:	000b      	movs	r3, r1
 80129ea:	0020      	movs	r0, r4
 80129ec:	0029      	movs	r1, r5
 80129ee:	920a      	str	r2, [sp, #40]	; 0x28
 80129f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80129f2:	f7ef fee3 	bl	80027bc <__aeabi_dsub>
 80129f6:	2200      	movs	r2, #0
 80129f8:	4b1e      	ldr	r3, [pc, #120]	; (8012a74 <__ieee754_rem_pio2+0x3d0>)
 80129fa:	f7ef fc73 	bl	80022e4 <__aeabi_dmul>
 80129fe:	000d      	movs	r5, r1
 8012a00:	0004      	movs	r4, r0
 8012a02:	f7f0 fa8b 	bl	8002f1c <__aeabi_d2iz>
 8012a06:	f7f0 fabf 	bl	8002f88 <__aeabi_i2d>
 8012a0a:	0002      	movs	r2, r0
 8012a0c:	000b      	movs	r3, r1
 8012a0e:	0020      	movs	r0, r4
 8012a10:	0029      	movs	r1, r5
 8012a12:	920c      	str	r2, [sp, #48]	; 0x30
 8012a14:	930d      	str	r3, [sp, #52]	; 0x34
 8012a16:	f7ef fed1 	bl	80027bc <__aeabi_dsub>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	4b15      	ldr	r3, [pc, #84]	; (8012a74 <__ieee754_rem_pio2+0x3d0>)
 8012a1e:	f7ef fc61 	bl	80022e4 <__aeabi_dmul>
 8012a22:	2503      	movs	r5, #3
 8012a24:	900e      	str	r0, [sp, #56]	; 0x38
 8012a26:	910f      	str	r1, [sp, #60]	; 0x3c
 8012a28:	ac0a      	add	r4, sp, #40	; 0x28
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	6920      	ldr	r0, [r4, #16]
 8012a2e:	6961      	ldr	r1, [r4, #20]
 8012a30:	2300      	movs	r3, #0
 8012a32:	9502      	str	r5, [sp, #8]
 8012a34:	3c08      	subs	r4, #8
 8012a36:	3d01      	subs	r5, #1
 8012a38:	f7ed fcf2 	bl	8000420 <__aeabi_dcmpeq>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d1f4      	bne.n	8012a2a <__ieee754_rem_pio2+0x386>
 8012a40:	4b0d      	ldr	r3, [pc, #52]	; (8012a78 <__ieee754_rem_pio2+0x3d4>)
 8012a42:	0032      	movs	r2, r6
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	2302      	movs	r3, #2
 8012a48:	0039      	movs	r1, r7
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	a80a      	add	r0, sp, #40	; 0x28
 8012a4e:	9b02      	ldr	r3, [sp, #8]
 8012a50:	f000 f8d4 	bl	8012bfc <__kernel_rem_pio2>
 8012a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a56:	0006      	movs	r6, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	db00      	blt.n	8012a5e <__ieee754_rem_pio2+0x3ba>
 8012a5c:	e65f      	b.n	801271e <__ieee754_rem_pio2+0x7a>
 8012a5e:	2280      	movs	r2, #128	; 0x80
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	0612      	lsls	r2, r2, #24
 8012a64:	189b      	adds	r3, r3, r2
 8012a66:	607b      	str	r3, [r7, #4]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	189b      	adds	r3, r3, r2
 8012a6c:	60fb      	str	r3, [r7, #12]
 8012a6e:	e68c      	b.n	801278a <__ieee754_rem_pio2+0xe6>
 8012a70:	fffffbea 	.word	0xfffffbea
 8012a74:	41700000 	.word	0x41700000
 8012a78:	08016358 	.word	0x08016358

08012a7c <__kernel_cos>:
 8012a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a7e:	b087      	sub	sp, #28
 8012a80:	9204      	str	r2, [sp, #16]
 8012a82:	9305      	str	r3, [sp, #20]
 8012a84:	004b      	lsls	r3, r1, #1
 8012a86:	085b      	lsrs	r3, r3, #1
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	23f9      	movs	r3, #249	; 0xf9
 8012a8c:	9a00      	ldr	r2, [sp, #0]
 8012a8e:	0007      	movs	r7, r0
 8012a90:	000e      	movs	r6, r1
 8012a92:	059b      	lsls	r3, r3, #22
 8012a94:	429a      	cmp	r2, r3
 8012a96:	da04      	bge.n	8012aa2 <__kernel_cos+0x26>
 8012a98:	f7f0 fa40 	bl	8002f1c <__aeabi_d2iz>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d100      	bne.n	8012aa2 <__kernel_cos+0x26>
 8012aa0:	e084      	b.n	8012bac <__kernel_cos+0x130>
 8012aa2:	003a      	movs	r2, r7
 8012aa4:	0033      	movs	r3, r6
 8012aa6:	0038      	movs	r0, r7
 8012aa8:	0031      	movs	r1, r6
 8012aaa:	f7ef fc1b 	bl	80022e4 <__aeabi_dmul>
 8012aae:	2200      	movs	r2, #0
 8012ab0:	4b40      	ldr	r3, [pc, #256]	; (8012bb4 <__kernel_cos+0x138>)
 8012ab2:	0004      	movs	r4, r0
 8012ab4:	000d      	movs	r5, r1
 8012ab6:	f7ef fc15 	bl	80022e4 <__aeabi_dmul>
 8012aba:	4a3f      	ldr	r2, [pc, #252]	; (8012bb8 <__kernel_cos+0x13c>)
 8012abc:	9002      	str	r0, [sp, #8]
 8012abe:	9103      	str	r1, [sp, #12]
 8012ac0:	4b3e      	ldr	r3, [pc, #248]	; (8012bbc <__kernel_cos+0x140>)
 8012ac2:	0020      	movs	r0, r4
 8012ac4:	0029      	movs	r1, r5
 8012ac6:	f7ef fc0d 	bl	80022e4 <__aeabi_dmul>
 8012aca:	4a3d      	ldr	r2, [pc, #244]	; (8012bc0 <__kernel_cos+0x144>)
 8012acc:	4b3d      	ldr	r3, [pc, #244]	; (8012bc4 <__kernel_cos+0x148>)
 8012ace:	f7ee fc99 	bl	8001404 <__aeabi_dadd>
 8012ad2:	0022      	movs	r2, r4
 8012ad4:	002b      	movs	r3, r5
 8012ad6:	f7ef fc05 	bl	80022e4 <__aeabi_dmul>
 8012ada:	4a3b      	ldr	r2, [pc, #236]	; (8012bc8 <__kernel_cos+0x14c>)
 8012adc:	4b3b      	ldr	r3, [pc, #236]	; (8012bcc <__kernel_cos+0x150>)
 8012ade:	f7ef fe6d 	bl	80027bc <__aeabi_dsub>
 8012ae2:	0022      	movs	r2, r4
 8012ae4:	002b      	movs	r3, r5
 8012ae6:	f7ef fbfd 	bl	80022e4 <__aeabi_dmul>
 8012aea:	4a39      	ldr	r2, [pc, #228]	; (8012bd0 <__kernel_cos+0x154>)
 8012aec:	4b39      	ldr	r3, [pc, #228]	; (8012bd4 <__kernel_cos+0x158>)
 8012aee:	f7ee fc89 	bl	8001404 <__aeabi_dadd>
 8012af2:	0022      	movs	r2, r4
 8012af4:	002b      	movs	r3, r5
 8012af6:	f7ef fbf5 	bl	80022e4 <__aeabi_dmul>
 8012afa:	4a37      	ldr	r2, [pc, #220]	; (8012bd8 <__kernel_cos+0x15c>)
 8012afc:	4b37      	ldr	r3, [pc, #220]	; (8012bdc <__kernel_cos+0x160>)
 8012afe:	f7ef fe5d 	bl	80027bc <__aeabi_dsub>
 8012b02:	0022      	movs	r2, r4
 8012b04:	002b      	movs	r3, r5
 8012b06:	f7ef fbed 	bl	80022e4 <__aeabi_dmul>
 8012b0a:	4a35      	ldr	r2, [pc, #212]	; (8012be0 <__kernel_cos+0x164>)
 8012b0c:	4b35      	ldr	r3, [pc, #212]	; (8012be4 <__kernel_cos+0x168>)
 8012b0e:	f7ee fc79 	bl	8001404 <__aeabi_dadd>
 8012b12:	0022      	movs	r2, r4
 8012b14:	002b      	movs	r3, r5
 8012b16:	f7ef fbe5 	bl	80022e4 <__aeabi_dmul>
 8012b1a:	0022      	movs	r2, r4
 8012b1c:	002b      	movs	r3, r5
 8012b1e:	f7ef fbe1 	bl	80022e4 <__aeabi_dmul>
 8012b22:	9a04      	ldr	r2, [sp, #16]
 8012b24:	9b05      	ldr	r3, [sp, #20]
 8012b26:	0004      	movs	r4, r0
 8012b28:	000d      	movs	r5, r1
 8012b2a:	0038      	movs	r0, r7
 8012b2c:	0031      	movs	r1, r6
 8012b2e:	f7ef fbd9 	bl	80022e4 <__aeabi_dmul>
 8012b32:	0002      	movs	r2, r0
 8012b34:	000b      	movs	r3, r1
 8012b36:	0020      	movs	r0, r4
 8012b38:	0029      	movs	r1, r5
 8012b3a:	f7ef fe3f 	bl	80027bc <__aeabi_dsub>
 8012b3e:	4b2a      	ldr	r3, [pc, #168]	; (8012be8 <__kernel_cos+0x16c>)
 8012b40:	9a00      	ldr	r2, [sp, #0]
 8012b42:	0004      	movs	r4, r0
 8012b44:	000d      	movs	r5, r1
 8012b46:	429a      	cmp	r2, r3
 8012b48:	dc0d      	bgt.n	8012b66 <__kernel_cos+0xea>
 8012b4a:	0002      	movs	r2, r0
 8012b4c:	000b      	movs	r3, r1
 8012b4e:	9802      	ldr	r0, [sp, #8]
 8012b50:	9903      	ldr	r1, [sp, #12]
 8012b52:	f7ef fe33 	bl	80027bc <__aeabi_dsub>
 8012b56:	0002      	movs	r2, r0
 8012b58:	2000      	movs	r0, #0
 8012b5a:	000b      	movs	r3, r1
 8012b5c:	4923      	ldr	r1, [pc, #140]	; (8012bec <__kernel_cos+0x170>)
 8012b5e:	f7ef fe2d 	bl	80027bc <__aeabi_dsub>
 8012b62:	b007      	add	sp, #28
 8012b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b66:	4b22      	ldr	r3, [pc, #136]	; (8012bf0 <__kernel_cos+0x174>)
 8012b68:	9a00      	ldr	r2, [sp, #0]
 8012b6a:	2600      	movs	r6, #0
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	dc1b      	bgt.n	8012ba8 <__kernel_cos+0x12c>
 8012b70:	0013      	movs	r3, r2
 8012b72:	4a20      	ldr	r2, [pc, #128]	; (8012bf4 <__kernel_cos+0x178>)
 8012b74:	4694      	mov	ip, r2
 8012b76:	4463      	add	r3, ip
 8012b78:	001f      	movs	r7, r3
 8012b7a:	0032      	movs	r2, r6
 8012b7c:	003b      	movs	r3, r7
 8012b7e:	2000      	movs	r0, #0
 8012b80:	491a      	ldr	r1, [pc, #104]	; (8012bec <__kernel_cos+0x170>)
 8012b82:	f7ef fe1b 	bl	80027bc <__aeabi_dsub>
 8012b86:	0032      	movs	r2, r6
 8012b88:	003b      	movs	r3, r7
 8012b8a:	9000      	str	r0, [sp, #0]
 8012b8c:	9101      	str	r1, [sp, #4]
 8012b8e:	9802      	ldr	r0, [sp, #8]
 8012b90:	9903      	ldr	r1, [sp, #12]
 8012b92:	f7ef fe13 	bl	80027bc <__aeabi_dsub>
 8012b96:	0022      	movs	r2, r4
 8012b98:	002b      	movs	r3, r5
 8012b9a:	f7ef fe0f 	bl	80027bc <__aeabi_dsub>
 8012b9e:	0002      	movs	r2, r0
 8012ba0:	000b      	movs	r3, r1
 8012ba2:	9800      	ldr	r0, [sp, #0]
 8012ba4:	9901      	ldr	r1, [sp, #4]
 8012ba6:	e7da      	b.n	8012b5e <__kernel_cos+0xe2>
 8012ba8:	4f13      	ldr	r7, [pc, #76]	; (8012bf8 <__kernel_cos+0x17c>)
 8012baa:	e7e6      	b.n	8012b7a <__kernel_cos+0xfe>
 8012bac:	2000      	movs	r0, #0
 8012bae:	490f      	ldr	r1, [pc, #60]	; (8012bec <__kernel_cos+0x170>)
 8012bb0:	e7d7      	b.n	8012b62 <__kernel_cos+0xe6>
 8012bb2:	46c0      	nop			; (mov r8, r8)
 8012bb4:	3fe00000 	.word	0x3fe00000
 8012bb8:	be8838d4 	.word	0xbe8838d4
 8012bbc:	bda8fae9 	.word	0xbda8fae9
 8012bc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012bc4:	3e21ee9e 	.word	0x3e21ee9e
 8012bc8:	809c52ad 	.word	0x809c52ad
 8012bcc:	3e927e4f 	.word	0x3e927e4f
 8012bd0:	19cb1590 	.word	0x19cb1590
 8012bd4:	3efa01a0 	.word	0x3efa01a0
 8012bd8:	16c15177 	.word	0x16c15177
 8012bdc:	3f56c16c 	.word	0x3f56c16c
 8012be0:	5555554c 	.word	0x5555554c
 8012be4:	3fa55555 	.word	0x3fa55555
 8012be8:	3fd33332 	.word	0x3fd33332
 8012bec:	3ff00000 	.word	0x3ff00000
 8012bf0:	3fe90000 	.word	0x3fe90000
 8012bf4:	ffe00000 	.word	0xffe00000
 8012bf8:	3fd20000 	.word	0x3fd20000

08012bfc <__kernel_rem_pio2>:
 8012bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bfe:	4cd0      	ldr	r4, [pc, #832]	; (8012f40 <__kernel_rem_pio2+0x344>)
 8012c00:	44a5      	add	sp, r4
 8012c02:	930d      	str	r3, [sp, #52]	; 0x34
 8012c04:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012c06:	0014      	movs	r4, r2
 8012c08:	009a      	lsls	r2, r3, #2
 8012c0a:	4bce      	ldr	r3, [pc, #824]	; (8012f44 <__kernel_rem_pio2+0x348>)
 8012c0c:	900e      	str	r0, [sp, #56]	; 0x38
 8012c0e:	58d3      	ldr	r3, [r2, r3]
 8012c10:	9107      	str	r1, [sp, #28]
 8012c12:	9308      	str	r3, [sp, #32]
 8012c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c16:	3b01      	subs	r3, #1
 8012c18:	930c      	str	r3, [sp, #48]	; 0x30
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	0023      	movs	r3, r4
 8012c20:	3314      	adds	r3, #20
 8012c22:	db04      	blt.n	8012c2e <__kernel_rem_pio2+0x32>
 8012c24:	2118      	movs	r1, #24
 8012c26:	1ee0      	subs	r0, r4, #3
 8012c28:	f7ed fafe 	bl	8000228 <__divsi3>
 8012c2c:	9000      	str	r0, [sp, #0]
 8012c2e:	2218      	movs	r2, #24
 8012c30:	9b00      	ldr	r3, [sp, #0]
 8012c32:	4252      	negs	r2, r2
 8012c34:	3301      	adds	r3, #1
 8012c36:	435a      	muls	r2, r3
 8012c38:	1913      	adds	r3, r2, r4
 8012c3a:	9302      	str	r3, [sp, #8]
 8012c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c3e:	9b00      	ldr	r3, [sp, #0]
 8012c40:	ae26      	add	r6, sp, #152	; 0x98
 8012c42:	1a9d      	subs	r5, r3, r2
 8012c44:	002c      	movs	r4, r5
 8012c46:	9b08      	ldr	r3, [sp, #32]
 8012c48:	189f      	adds	r7, r3, r2
 8012c4a:	1b63      	subs	r3, r4, r5
 8012c4c:	429f      	cmp	r7, r3
 8012c4e:	da17      	bge.n	8012c80 <__kernel_rem_pio2+0x84>
 8012c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c54:	9304      	str	r3, [sp, #16]
 8012c56:	ab76      	add	r3, sp, #472	; 0x1d8
 8012c58:	930a      	str	r3, [sp, #40]	; 0x28
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	1a9b      	subs	r3, r3, r2
 8012c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c60:	ab28      	add	r3, sp, #160	; 0xa0
 8012c62:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c64:	9a04      	ldr	r2, [sp, #16]
 8012c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c68:	189b      	adds	r3, r3, r2
 8012c6a:	9a08      	ldr	r2, [sp, #32]
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	db31      	blt.n	8012cd4 <__kernel_rem_pio2+0xd8>
 8012c70:	9b04      	ldr	r3, [sp, #16]
 8012c72:	2400      	movs	r4, #0
 8012c74:	00de      	lsls	r6, r3, #3
 8012c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c78:	2500      	movs	r5, #0
 8012c7a:	2700      	movs	r7, #0
 8012c7c:	199e      	adds	r6, r3, r6
 8012c7e:	e01e      	b.n	8012cbe <__kernel_rem_pio2+0xc2>
 8012c80:	2c00      	cmp	r4, #0
 8012c82:	db07      	blt.n	8012c94 <__kernel_rem_pio2+0x98>
 8012c84:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8012c86:	00a3      	lsls	r3, r4, #2
 8012c88:	58d0      	ldr	r0, [r2, r3]
 8012c8a:	f7f0 f97d 	bl	8002f88 <__aeabi_i2d>
 8012c8e:	c603      	stmia	r6!, {r0, r1}
 8012c90:	3401      	adds	r4, #1
 8012c92:	e7da      	b.n	8012c4a <__kernel_rem_pio2+0x4e>
 8012c94:	2000      	movs	r0, #0
 8012c96:	2100      	movs	r1, #0
 8012c98:	e7f9      	b.n	8012c8e <__kernel_rem_pio2+0x92>
 8012c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c9c:	00f9      	lsls	r1, r7, #3
 8012c9e:	1859      	adds	r1, r3, r1
 8012ca0:	6808      	ldr	r0, [r1, #0]
 8012ca2:	6849      	ldr	r1, [r1, #4]
 8012ca4:	6832      	ldr	r2, [r6, #0]
 8012ca6:	6873      	ldr	r3, [r6, #4]
 8012ca8:	f7ef fb1c 	bl	80022e4 <__aeabi_dmul>
 8012cac:	0002      	movs	r2, r0
 8012cae:	000b      	movs	r3, r1
 8012cb0:	0020      	movs	r0, r4
 8012cb2:	0029      	movs	r1, r5
 8012cb4:	f7ee fba6 	bl	8001404 <__aeabi_dadd>
 8012cb8:	0004      	movs	r4, r0
 8012cba:	000d      	movs	r5, r1
 8012cbc:	3701      	adds	r7, #1
 8012cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cc0:	3e08      	subs	r6, #8
 8012cc2:	429f      	cmp	r7, r3
 8012cc4:	dde9      	ble.n	8012c9a <__kernel_rem_pio2+0x9e>
 8012cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cc8:	c330      	stmia	r3!, {r4, r5}
 8012cca:	930a      	str	r3, [sp, #40]	; 0x28
 8012ccc:	9b04      	ldr	r3, [sp, #16]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	9304      	str	r3, [sp, #16]
 8012cd2:	e7c7      	b.n	8012c64 <__kernel_rem_pio2+0x68>
 8012cd4:	9b08      	ldr	r3, [sp, #32]
 8012cd6:	aa12      	add	r2, sp, #72	; 0x48
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	189b      	adds	r3, r3, r2
 8012cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8012cde:	9b00      	ldr	r3, [sp, #0]
 8012ce0:	0098      	lsls	r0, r3, #2
 8012ce2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012ce4:	181b      	adds	r3, r3, r0
 8012ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ce8:	9b08      	ldr	r3, [sp, #32]
 8012cea:	9304      	str	r3, [sp, #16]
 8012cec:	9b04      	ldr	r3, [sp, #16]
 8012cee:	aa76      	add	r2, sp, #472	; 0x1d8
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	18d3      	adds	r3, r2, r3
 8012cf4:	681c      	ldr	r4, [r3, #0]
 8012cf6:	685d      	ldr	r5, [r3, #4]
 8012cf8:	ab12      	add	r3, sp, #72	; 0x48
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cfe:	9b04      	ldr	r3, [sp, #16]
 8012d00:	9211      	str	r2, [sp, #68]	; 0x44
 8012d02:	930a      	str	r3, [sp, #40]	; 0x28
 8012d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	dc74      	bgt.n	8012df4 <__kernel_rem_pio2+0x1f8>
 8012d0a:	0020      	movs	r0, r4
 8012d0c:	0029      	movs	r1, r5
 8012d0e:	9a02      	ldr	r2, [sp, #8]
 8012d10:	f000 fdaa 	bl	8013868 <scalbn>
 8012d14:	23ff      	movs	r3, #255	; 0xff
 8012d16:	2200      	movs	r2, #0
 8012d18:	059b      	lsls	r3, r3, #22
 8012d1a:	0004      	movs	r4, r0
 8012d1c:	000d      	movs	r5, r1
 8012d1e:	f7ef fae1 	bl	80022e4 <__aeabi_dmul>
 8012d22:	f000 fd11 	bl	8013748 <floor>
 8012d26:	2200      	movs	r2, #0
 8012d28:	4b87      	ldr	r3, [pc, #540]	; (8012f48 <__kernel_rem_pio2+0x34c>)
 8012d2a:	f7ef fadb 	bl	80022e4 <__aeabi_dmul>
 8012d2e:	0002      	movs	r2, r0
 8012d30:	000b      	movs	r3, r1
 8012d32:	0020      	movs	r0, r4
 8012d34:	0029      	movs	r1, r5
 8012d36:	f7ef fd41 	bl	80027bc <__aeabi_dsub>
 8012d3a:	000d      	movs	r5, r1
 8012d3c:	0004      	movs	r4, r0
 8012d3e:	f7f0 f8ed 	bl	8002f1c <__aeabi_d2iz>
 8012d42:	900b      	str	r0, [sp, #44]	; 0x2c
 8012d44:	f7f0 f920 	bl	8002f88 <__aeabi_i2d>
 8012d48:	000b      	movs	r3, r1
 8012d4a:	0002      	movs	r2, r0
 8012d4c:	0029      	movs	r1, r5
 8012d4e:	0020      	movs	r0, r4
 8012d50:	f7ef fd34 	bl	80027bc <__aeabi_dsub>
 8012d54:	9b02      	ldr	r3, [sp, #8]
 8012d56:	0006      	movs	r6, r0
 8012d58:	000f      	movs	r7, r1
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	dd74      	ble.n	8012e48 <__kernel_rem_pio2+0x24c>
 8012d5e:	2118      	movs	r1, #24
 8012d60:	9b04      	ldr	r3, [sp, #16]
 8012d62:	aa12      	add	r2, sp, #72	; 0x48
 8012d64:	3b01      	subs	r3, #1
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	589a      	ldr	r2, [r3, r2]
 8012d6a:	9802      	ldr	r0, [sp, #8]
 8012d6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012d6e:	1a09      	subs	r1, r1, r0
 8012d70:	0010      	movs	r0, r2
 8012d72:	4108      	asrs	r0, r1
 8012d74:	1824      	adds	r4, r4, r0
 8012d76:	4088      	lsls	r0, r1
 8012d78:	a912      	add	r1, sp, #72	; 0x48
 8012d7a:	1a12      	subs	r2, r2, r0
 8012d7c:	505a      	str	r2, [r3, r1]
 8012d7e:	2317      	movs	r3, #23
 8012d80:	9902      	ldr	r1, [sp, #8]
 8012d82:	940b      	str	r4, [sp, #44]	; 0x2c
 8012d84:	1a5b      	subs	r3, r3, r1
 8012d86:	411a      	asrs	r2, r3
 8012d88:	920a      	str	r2, [sp, #40]	; 0x28
 8012d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dd6d      	ble.n	8012e6c <__kernel_rem_pio2+0x270>
 8012d90:	2200      	movs	r2, #0
 8012d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d94:	2080      	movs	r0, #128	; 0x80
 8012d96:	3301      	adds	r3, #1
 8012d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d9a:	4b6c      	ldr	r3, [pc, #432]	; (8012f4c <__kernel_rem_pio2+0x350>)
 8012d9c:	0014      	movs	r4, r2
 8012d9e:	469c      	mov	ip, r3
 8012da0:	2501      	movs	r5, #1
 8012da2:	0440      	lsls	r0, r0, #17
 8012da4:	9b04      	ldr	r3, [sp, #16]
 8012da6:	4293      	cmp	r3, r2
 8012da8:	dd00      	ble.n	8012dac <__kernel_rem_pio2+0x1b0>
 8012daa:	e098      	b.n	8012ede <__kernel_rem_pio2+0x2e2>
 8012dac:	9b02      	ldr	r3, [sp, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	dd05      	ble.n	8012dbe <__kernel_rem_pio2+0x1c2>
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d100      	bne.n	8012db8 <__kernel_rem_pio2+0x1bc>
 8012db6:	e0a8      	b.n	8012f0a <__kernel_rem_pio2+0x30e>
 8012db8:	2b02      	cmp	r3, #2
 8012dba:	d100      	bne.n	8012dbe <__kernel_rem_pio2+0x1c2>
 8012dbc:	e0b0      	b.n	8012f20 <__kernel_rem_pio2+0x324>
 8012dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc0:	2b02      	cmp	r3, #2
 8012dc2:	d153      	bne.n	8012e6c <__kernel_rem_pio2+0x270>
 8012dc4:	0032      	movs	r2, r6
 8012dc6:	003b      	movs	r3, r7
 8012dc8:	2000      	movs	r0, #0
 8012dca:	4961      	ldr	r1, [pc, #388]	; (8012f50 <__kernel_rem_pio2+0x354>)
 8012dcc:	f7ef fcf6 	bl	80027bc <__aeabi_dsub>
 8012dd0:	0006      	movs	r6, r0
 8012dd2:	000f      	movs	r7, r1
 8012dd4:	2c00      	cmp	r4, #0
 8012dd6:	d049      	beq.n	8012e6c <__kernel_rem_pio2+0x270>
 8012dd8:	9a02      	ldr	r2, [sp, #8]
 8012dda:	2000      	movs	r0, #0
 8012ddc:	495c      	ldr	r1, [pc, #368]	; (8012f50 <__kernel_rem_pio2+0x354>)
 8012dde:	f000 fd43 	bl	8013868 <scalbn>
 8012de2:	0002      	movs	r2, r0
 8012de4:	000b      	movs	r3, r1
 8012de6:	0030      	movs	r0, r6
 8012de8:	0039      	movs	r1, r7
 8012dea:	f7ef fce7 	bl	80027bc <__aeabi_dsub>
 8012dee:	0006      	movs	r6, r0
 8012df0:	000f      	movs	r7, r1
 8012df2:	e03b      	b.n	8012e6c <__kernel_rem_pio2+0x270>
 8012df4:	2200      	movs	r2, #0
 8012df6:	4b57      	ldr	r3, [pc, #348]	; (8012f54 <__kernel_rem_pio2+0x358>)
 8012df8:	0020      	movs	r0, r4
 8012dfa:	0029      	movs	r1, r5
 8012dfc:	f7ef fa72 	bl	80022e4 <__aeabi_dmul>
 8012e00:	f7f0 f88c 	bl	8002f1c <__aeabi_d2iz>
 8012e04:	f7f0 f8c0 	bl	8002f88 <__aeabi_i2d>
 8012e08:	2200      	movs	r2, #0
 8012e0a:	4b53      	ldr	r3, [pc, #332]	; (8012f58 <__kernel_rem_pio2+0x35c>)
 8012e0c:	0006      	movs	r6, r0
 8012e0e:	000f      	movs	r7, r1
 8012e10:	f7ef fa68 	bl	80022e4 <__aeabi_dmul>
 8012e14:	0002      	movs	r2, r0
 8012e16:	000b      	movs	r3, r1
 8012e18:	0020      	movs	r0, r4
 8012e1a:	0029      	movs	r1, r5
 8012e1c:	f7ef fcce 	bl	80027bc <__aeabi_dsub>
 8012e20:	f7f0 f87c 	bl	8002f1c <__aeabi_d2iz>
 8012e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012e28:	c301      	stmia	r3!, {r0}
 8012e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e2e:	0030      	movs	r0, r6
 8012e30:	3b01      	subs	r3, #1
 8012e32:	930a      	str	r3, [sp, #40]	; 0x28
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	18d3      	adds	r3, r2, r3
 8012e38:	0039      	movs	r1, r7
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	f7ee fae1 	bl	8001404 <__aeabi_dadd>
 8012e42:	0004      	movs	r4, r0
 8012e44:	000d      	movs	r5, r1
 8012e46:	e75d      	b.n	8012d04 <__kernel_rem_pio2+0x108>
 8012e48:	9b02      	ldr	r3, [sp, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d107      	bne.n	8012e5e <__kernel_rem_pio2+0x262>
 8012e4e:	9b04      	ldr	r3, [sp, #16]
 8012e50:	aa12      	add	r2, sp, #72	; 0x48
 8012e52:	3b01      	subs	r3, #1
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	5898      	ldr	r0, [r3, r2]
 8012e58:	15c3      	asrs	r3, r0, #23
 8012e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8012e5c:	e795      	b.n	8012d8a <__kernel_rem_pio2+0x18e>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	4b3e      	ldr	r3, [pc, #248]	; (8012f5c <__kernel_rem_pio2+0x360>)
 8012e62:	f7ed fb01 	bl	8000468 <__aeabi_dcmpge>
 8012e66:	2800      	cmp	r0, #0
 8012e68:	d136      	bne.n	8012ed8 <__kernel_rem_pio2+0x2dc>
 8012e6a:	900a      	str	r0, [sp, #40]	; 0x28
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2300      	movs	r3, #0
 8012e70:	0030      	movs	r0, r6
 8012e72:	0039      	movs	r1, r7
 8012e74:	f7ed fad4 	bl	8000420 <__aeabi_dcmpeq>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d100      	bne.n	8012e7e <__kernel_rem_pio2+0x282>
 8012e7c:	e0b9      	b.n	8012ff2 <__kernel_rem_pio2+0x3f6>
 8012e7e:	2200      	movs	r2, #0
 8012e80:	9b04      	ldr	r3, [sp, #16]
 8012e82:	3b01      	subs	r3, #1
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	9908      	ldr	r1, [sp, #32]
 8012e88:	428b      	cmp	r3, r1
 8012e8a:	da52      	bge.n	8012f32 <__kernel_rem_pio2+0x336>
 8012e8c:	2a00      	cmp	r2, #0
 8012e8e:	d100      	bne.n	8012e92 <__kernel_rem_pio2+0x296>
 8012e90:	e095      	b.n	8012fbe <__kernel_rem_pio2+0x3c2>
 8012e92:	9b02      	ldr	r3, [sp, #8]
 8012e94:	aa12      	add	r2, sp, #72	; 0x48
 8012e96:	3b18      	subs	r3, #24
 8012e98:	9302      	str	r3, [sp, #8]
 8012e9a:	9b00      	ldr	r3, [sp, #0]
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	589b      	ldr	r3, [r3, r2]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d100      	bne.n	8012ea6 <__kernel_rem_pio2+0x2aa>
 8012ea4:	e0a1      	b.n	8012fea <__kernel_rem_pio2+0x3ee>
 8012ea6:	2000      	movs	r0, #0
 8012ea8:	9a02      	ldr	r2, [sp, #8]
 8012eaa:	4929      	ldr	r1, [pc, #164]	; (8012f50 <__kernel_rem_pio2+0x354>)
 8012eac:	f000 fcdc 	bl	8013868 <scalbn>
 8012eb0:	0006      	movs	r6, r0
 8012eb2:	000f      	movs	r7, r1
 8012eb4:	9c00      	ldr	r4, [sp, #0]
 8012eb6:	2c00      	cmp	r4, #0
 8012eb8:	db00      	blt.n	8012ebc <__kernel_rem_pio2+0x2c0>
 8012eba:	e0d9      	b.n	8013070 <__kernel_rem_pio2+0x474>
 8012ebc:	2600      	movs	r6, #0
 8012ebe:	9d00      	ldr	r5, [sp, #0]
 8012ec0:	2d00      	cmp	r5, #0
 8012ec2:	da00      	bge.n	8012ec6 <__kernel_rem_pio2+0x2ca>
 8012ec4:	e10c      	b.n	80130e0 <__kernel_rem_pio2+0x4e4>
 8012ec6:	ab76      	add	r3, sp, #472	; 0x1d8
 8012ec8:	00ef      	lsls	r7, r5, #3
 8012eca:	2400      	movs	r4, #0
 8012ecc:	18ff      	adds	r7, r7, r3
 8012ece:	2300      	movs	r3, #0
 8012ed0:	9302      	str	r3, [sp, #8]
 8012ed2:	9403      	str	r4, [sp, #12]
 8012ed4:	2400      	movs	r4, #0
 8012ed6:	e0f4      	b.n	80130c2 <__kernel_rem_pio2+0x4c6>
 8012ed8:	2302      	movs	r3, #2
 8012eda:	930a      	str	r3, [sp, #40]	; 0x28
 8012edc:	e758      	b.n	8012d90 <__kernel_rem_pio2+0x194>
 8012ede:	9b00      	ldr	r3, [sp, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2c00      	cmp	r4, #0
 8012ee4:	d10b      	bne.n	8012efe <__kernel_rem_pio2+0x302>
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d003      	beq.n	8012ef2 <__kernel_rem_pio2+0x2f6>
 8012eea:	9c00      	ldr	r4, [sp, #0]
 8012eec:	1ac3      	subs	r3, r0, r3
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	002b      	movs	r3, r5
 8012ef2:	9c00      	ldr	r4, [sp, #0]
 8012ef4:	3201      	adds	r2, #1
 8012ef6:	3404      	adds	r4, #4
 8012ef8:	9400      	str	r4, [sp, #0]
 8012efa:	001c      	movs	r4, r3
 8012efc:	e752      	b.n	8012da4 <__kernel_rem_pio2+0x1a8>
 8012efe:	4661      	mov	r1, ip
 8012f00:	1acb      	subs	r3, r1, r3
 8012f02:	9900      	ldr	r1, [sp, #0]
 8012f04:	600b      	str	r3, [r1, #0]
 8012f06:	0023      	movs	r3, r4
 8012f08:	e7f3      	b.n	8012ef2 <__kernel_rem_pio2+0x2f6>
 8012f0a:	9b04      	ldr	r3, [sp, #16]
 8012f0c:	aa12      	add	r2, sp, #72	; 0x48
 8012f0e:	3b01      	subs	r3, #1
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	589a      	ldr	r2, [r3, r2]
 8012f14:	9200      	str	r2, [sp, #0]
 8012f16:	0252      	lsls	r2, r2, #9
 8012f18:	0a52      	lsrs	r2, r2, #9
 8012f1a:	a912      	add	r1, sp, #72	; 0x48
 8012f1c:	505a      	str	r2, [r3, r1]
 8012f1e:	e74e      	b.n	8012dbe <__kernel_rem_pio2+0x1c2>
 8012f20:	9b04      	ldr	r3, [sp, #16]
 8012f22:	aa12      	add	r2, sp, #72	; 0x48
 8012f24:	3b01      	subs	r3, #1
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	589a      	ldr	r2, [r3, r2]
 8012f2a:	9200      	str	r2, [sp, #0]
 8012f2c:	0292      	lsls	r2, r2, #10
 8012f2e:	0a92      	lsrs	r2, r2, #10
 8012f30:	e7f3      	b.n	8012f1a <__kernel_rem_pio2+0x31e>
 8012f32:	0099      	lsls	r1, r3, #2
 8012f34:	a812      	add	r0, sp, #72	; 0x48
 8012f36:	5809      	ldr	r1, [r1, r0]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	430a      	orrs	r2, r1
 8012f3c:	e7a3      	b.n	8012e86 <__kernel_rem_pio2+0x28a>
 8012f3e:	46c0      	nop			; (mov r8, r8)
 8012f40:	fffffd84 	.word	0xfffffd84
 8012f44:	080164a0 	.word	0x080164a0
 8012f48:	40200000 	.word	0x40200000
 8012f4c:	00ffffff 	.word	0x00ffffff
 8012f50:	3ff00000 	.word	0x3ff00000
 8012f54:	3e700000 	.word	0x3e700000
 8012f58:	41700000 	.word	0x41700000
 8012f5c:	3fe00000 	.word	0x3fe00000
 8012f60:	3301      	adds	r3, #1
 8012f62:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012f64:	009a      	lsls	r2, r3, #2
 8012f66:	4252      	negs	r2, r2
 8012f68:	588a      	ldr	r2, [r1, r2]
 8012f6a:	2a00      	cmp	r2, #0
 8012f6c:	d0f8      	beq.n	8012f60 <__kernel_rem_pio2+0x364>
 8012f6e:	9a04      	ldr	r2, [sp, #16]
 8012f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012f72:	1c57      	adds	r7, r2, #1
 8012f74:	1854      	adds	r4, r2, r1
 8012f76:	00e4      	lsls	r4, r4, #3
 8012f78:	aa26      	add	r2, sp, #152	; 0x98
 8012f7a:	1914      	adds	r4, r2, r4
 8012f7c:	9a04      	ldr	r2, [sp, #16]
 8012f7e:	18d3      	adds	r3, r2, r3
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	9b04      	ldr	r3, [sp, #16]
 8012f84:	42bb      	cmp	r3, r7
 8012f86:	da00      	bge.n	8012f8a <__kernel_rem_pio2+0x38e>
 8012f88:	e6b0      	b.n	8012cec <__kernel_rem_pio2+0xf0>
 8012f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012f8c:	00bb      	lsls	r3, r7, #2
 8012f8e:	58d0      	ldr	r0, [r2, r3]
 8012f90:	f7ef fffa 	bl	8002f88 <__aeabi_i2d>
 8012f94:	2200      	movs	r2, #0
 8012f96:	2300      	movs	r3, #0
 8012f98:	0026      	movs	r6, r4
 8012f9a:	2500      	movs	r5, #0
 8012f9c:	6020      	str	r0, [r4, #0]
 8012f9e:	6061      	str	r1, [r4, #4]
 8012fa0:	9200      	str	r2, [sp, #0]
 8012fa2:	9301      	str	r3, [sp, #4]
 8012fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fa6:	429d      	cmp	r5, r3
 8012fa8:	dd0b      	ble.n	8012fc2 <__kernel_rem_pio2+0x3c6>
 8012faa:	00fb      	lsls	r3, r7, #3
 8012fac:	aa76      	add	r2, sp, #472	; 0x1d8
 8012fae:	18d3      	adds	r3, r2, r3
 8012fb0:	3701      	adds	r7, #1
 8012fb2:	9900      	ldr	r1, [sp, #0]
 8012fb4:	9a01      	ldr	r2, [sp, #4]
 8012fb6:	3408      	adds	r4, #8
 8012fb8:	6019      	str	r1, [r3, #0]
 8012fba:	605a      	str	r2, [r3, #4]
 8012fbc:	e7e1      	b.n	8012f82 <__kernel_rem_pio2+0x386>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e7cf      	b.n	8012f62 <__kernel_rem_pio2+0x366>
 8012fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fc4:	00e9      	lsls	r1, r5, #3
 8012fc6:	1859      	adds	r1, r3, r1
 8012fc8:	6808      	ldr	r0, [r1, #0]
 8012fca:	6849      	ldr	r1, [r1, #4]
 8012fcc:	6832      	ldr	r2, [r6, #0]
 8012fce:	6873      	ldr	r3, [r6, #4]
 8012fd0:	f7ef f988 	bl	80022e4 <__aeabi_dmul>
 8012fd4:	0002      	movs	r2, r0
 8012fd6:	000b      	movs	r3, r1
 8012fd8:	9800      	ldr	r0, [sp, #0]
 8012fda:	9901      	ldr	r1, [sp, #4]
 8012fdc:	f7ee fa12 	bl	8001404 <__aeabi_dadd>
 8012fe0:	3501      	adds	r5, #1
 8012fe2:	9000      	str	r0, [sp, #0]
 8012fe4:	9101      	str	r1, [sp, #4]
 8012fe6:	3e08      	subs	r6, #8
 8012fe8:	e7dc      	b.n	8012fa4 <__kernel_rem_pio2+0x3a8>
 8012fea:	9b00      	ldr	r3, [sp, #0]
 8012fec:	3b01      	subs	r3, #1
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	e74f      	b.n	8012e92 <__kernel_rem_pio2+0x296>
 8012ff2:	9b02      	ldr	r3, [sp, #8]
 8012ff4:	0030      	movs	r0, r6
 8012ff6:	425a      	negs	r2, r3
 8012ff8:	0039      	movs	r1, r7
 8012ffa:	f000 fc35 	bl	8013868 <scalbn>
 8012ffe:	2200      	movs	r2, #0
 8013000:	4bb6      	ldr	r3, [pc, #728]	; (80132dc <__kernel_rem_pio2+0x6e0>)
 8013002:	0004      	movs	r4, r0
 8013004:	000d      	movs	r5, r1
 8013006:	f7ed fa2f 	bl	8000468 <__aeabi_dcmpge>
 801300a:	2800      	cmp	r0, #0
 801300c:	d025      	beq.n	801305a <__kernel_rem_pio2+0x45e>
 801300e:	2200      	movs	r2, #0
 8013010:	4bb3      	ldr	r3, [pc, #716]	; (80132e0 <__kernel_rem_pio2+0x6e4>)
 8013012:	0020      	movs	r0, r4
 8013014:	0029      	movs	r1, r5
 8013016:	f7ef f965 	bl	80022e4 <__aeabi_dmul>
 801301a:	f7ef ff7f 	bl	8002f1c <__aeabi_d2iz>
 801301e:	9b04      	ldr	r3, [sp, #16]
 8013020:	0006      	movs	r6, r0
 8013022:	009f      	lsls	r7, r3, #2
 8013024:	f7ef ffb0 	bl	8002f88 <__aeabi_i2d>
 8013028:	2200      	movs	r2, #0
 801302a:	4bac      	ldr	r3, [pc, #688]	; (80132dc <__kernel_rem_pio2+0x6e0>)
 801302c:	f7ef f95a 	bl	80022e4 <__aeabi_dmul>
 8013030:	0002      	movs	r2, r0
 8013032:	000b      	movs	r3, r1
 8013034:	0020      	movs	r0, r4
 8013036:	0029      	movs	r1, r5
 8013038:	f7ef fbc0 	bl	80027bc <__aeabi_dsub>
 801303c:	f7ef ff6e 	bl	8002f1c <__aeabi_d2iz>
 8013040:	ab12      	add	r3, sp, #72	; 0x48
 8013042:	51d8      	str	r0, [r3, r7]
 8013044:	9b04      	ldr	r3, [sp, #16]
 8013046:	aa12      	add	r2, sp, #72	; 0x48
 8013048:	3301      	adds	r3, #1
 801304a:	9300      	str	r3, [sp, #0]
 801304c:	9b02      	ldr	r3, [sp, #8]
 801304e:	3318      	adds	r3, #24
 8013050:	9302      	str	r3, [sp, #8]
 8013052:	9b00      	ldr	r3, [sp, #0]
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	509e      	str	r6, [r3, r2]
 8013058:	e725      	b.n	8012ea6 <__kernel_rem_pio2+0x2aa>
 801305a:	9b04      	ldr	r3, [sp, #16]
 801305c:	0020      	movs	r0, r4
 801305e:	0029      	movs	r1, r5
 8013060:	009e      	lsls	r6, r3, #2
 8013062:	f7ef ff5b 	bl	8002f1c <__aeabi_d2iz>
 8013066:	ab12      	add	r3, sp, #72	; 0x48
 8013068:	5198      	str	r0, [r3, r6]
 801306a:	9b04      	ldr	r3, [sp, #16]
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	e71a      	b.n	8012ea6 <__kernel_rem_pio2+0x2aa>
 8013070:	00e5      	lsls	r5, r4, #3
 8013072:	ab76      	add	r3, sp, #472	; 0x1d8
 8013074:	aa12      	add	r2, sp, #72	; 0x48
 8013076:	195d      	adds	r5, r3, r5
 8013078:	00a3      	lsls	r3, r4, #2
 801307a:	5898      	ldr	r0, [r3, r2]
 801307c:	f7ef ff84 	bl	8002f88 <__aeabi_i2d>
 8013080:	0032      	movs	r2, r6
 8013082:	003b      	movs	r3, r7
 8013084:	f7ef f92e 	bl	80022e4 <__aeabi_dmul>
 8013088:	2200      	movs	r2, #0
 801308a:	6028      	str	r0, [r5, #0]
 801308c:	6069      	str	r1, [r5, #4]
 801308e:	4b94      	ldr	r3, [pc, #592]	; (80132e0 <__kernel_rem_pio2+0x6e4>)
 8013090:	0030      	movs	r0, r6
 8013092:	0039      	movs	r1, r7
 8013094:	f7ef f926 	bl	80022e4 <__aeabi_dmul>
 8013098:	3c01      	subs	r4, #1
 801309a:	0006      	movs	r6, r0
 801309c:	000f      	movs	r7, r1
 801309e:	e70a      	b.n	8012eb6 <__kernel_rem_pio2+0x2ba>
 80130a0:	4b90      	ldr	r3, [pc, #576]	; (80132e4 <__kernel_rem_pio2+0x6e8>)
 80130a2:	00e1      	lsls	r1, r4, #3
 80130a4:	1859      	adds	r1, r3, r1
 80130a6:	6808      	ldr	r0, [r1, #0]
 80130a8:	6849      	ldr	r1, [r1, #4]
 80130aa:	cf0c      	ldmia	r7!, {r2, r3}
 80130ac:	f7ef f91a 	bl	80022e4 <__aeabi_dmul>
 80130b0:	0002      	movs	r2, r0
 80130b2:	000b      	movs	r3, r1
 80130b4:	9802      	ldr	r0, [sp, #8]
 80130b6:	9903      	ldr	r1, [sp, #12]
 80130b8:	f7ee f9a4 	bl	8001404 <__aeabi_dadd>
 80130bc:	9002      	str	r0, [sp, #8]
 80130be:	9103      	str	r1, [sp, #12]
 80130c0:	3401      	adds	r4, #1
 80130c2:	9b08      	ldr	r3, [sp, #32]
 80130c4:	429c      	cmp	r4, r3
 80130c6:	dc01      	bgt.n	80130cc <__kernel_rem_pio2+0x4d0>
 80130c8:	42a6      	cmp	r6, r4
 80130ca:	dae9      	bge.n	80130a0 <__kernel_rem_pio2+0x4a4>
 80130cc:	00f3      	lsls	r3, r6, #3
 80130ce:	aa4e      	add	r2, sp, #312	; 0x138
 80130d0:	18d3      	adds	r3, r2, r3
 80130d2:	3d01      	subs	r5, #1
 80130d4:	9902      	ldr	r1, [sp, #8]
 80130d6:	9a03      	ldr	r2, [sp, #12]
 80130d8:	3601      	adds	r6, #1
 80130da:	6019      	str	r1, [r3, #0]
 80130dc:	605a      	str	r2, [r3, #4]
 80130de:	e6ef      	b.n	8012ec0 <__kernel_rem_pio2+0x2c4>
 80130e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	dc0b      	bgt.n	80130fe <__kernel_rem_pio2+0x502>
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	dd00      	ble.n	80130ec <__kernel_rem_pio2+0x4f0>
 80130ea:	e08a      	b.n	8013202 <__kernel_rem_pio2+0x606>
 80130ec:	d055      	beq.n	801319a <__kernel_rem_pio2+0x59e>
 80130ee:	2007      	movs	r0, #7
 80130f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130f2:	4003      	ands	r3, r0
 80130f4:	0018      	movs	r0, r3
 80130f6:	239f      	movs	r3, #159	; 0x9f
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	449d      	add	sp, r3
 80130fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013100:	2b03      	cmp	r3, #3
 8013102:	d1f4      	bne.n	80130ee <__kernel_rem_pio2+0x4f2>
 8013104:	9b00      	ldr	r3, [sp, #0]
 8013106:	00dc      	lsls	r4, r3, #3
 8013108:	ab4e      	add	r3, sp, #312	; 0x138
 801310a:	191c      	adds	r4, r3, r4
 801310c:	0025      	movs	r5, r4
 801310e:	9b00      	ldr	r3, [sp, #0]
 8013110:	9302      	str	r3, [sp, #8]
 8013112:	9b02      	ldr	r3, [sp, #8]
 8013114:	3d08      	subs	r5, #8
 8013116:	2b00      	cmp	r3, #0
 8013118:	dd00      	ble.n	801311c <__kernel_rem_pio2+0x520>
 801311a:	e083      	b.n	8013224 <__kernel_rem_pio2+0x628>
 801311c:	9d00      	ldr	r5, [sp, #0]
 801311e:	3c08      	subs	r4, #8
 8013120:	2d01      	cmp	r5, #1
 8013122:	dd00      	ble.n	8013126 <__kernel_rem_pio2+0x52a>
 8013124:	e0a0      	b.n	8013268 <__kernel_rem_pio2+0x66c>
 8013126:	2400      	movs	r4, #0
 8013128:	0021      	movs	r1, r4
 801312a:	9b00      	ldr	r3, [sp, #0]
 801312c:	2b01      	cmp	r3, #1
 801312e:	dd00      	ble.n	8013132 <__kernel_rem_pio2+0x536>
 8013130:	e0b8      	b.n	80132a4 <__kernel_rem_pio2+0x6a8>
 8013132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013134:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8013136:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8013138:	9d50      	ldr	r5, [sp, #320]	; 0x140
 801313a:	9851      	ldr	r0, [sp, #324]	; 0x144
 801313c:	2b00      	cmp	r3, #0
 801313e:	d000      	beq.n	8013142 <__kernel_rem_pio2+0x546>
 8013140:	e0be      	b.n	80132c0 <__kernel_rem_pio2+0x6c4>
 8013142:	0033      	movs	r3, r6
 8013144:	003a      	movs	r2, r7
 8013146:	9e07      	ldr	r6, [sp, #28]
 8013148:	6032      	str	r2, [r6, #0]
 801314a:	6073      	str	r3, [r6, #4]
 801314c:	002a      	movs	r2, r5
 801314e:	0003      	movs	r3, r0
 8013150:	60b2      	str	r2, [r6, #8]
 8013152:	60f3      	str	r3, [r6, #12]
 8013154:	0022      	movs	r2, r4
 8013156:	000b      	movs	r3, r1
 8013158:	6132      	str	r2, [r6, #16]
 801315a:	6173      	str	r3, [r6, #20]
 801315c:	e7c7      	b.n	80130ee <__kernel_rem_pio2+0x4f2>
 801315e:	9b00      	ldr	r3, [sp, #0]
 8013160:	aa4e      	add	r2, sp, #312	; 0x138
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	18d3      	adds	r3, r2, r3
 8013166:	0028      	movs	r0, r5
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	0021      	movs	r1, r4
 801316e:	f7ee f949 	bl	8001404 <__aeabi_dadd>
 8013172:	0005      	movs	r5, r0
 8013174:	000c      	movs	r4, r1
 8013176:	9b00      	ldr	r3, [sp, #0]
 8013178:	3b01      	subs	r3, #1
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	9b00      	ldr	r3, [sp, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	daed      	bge.n	801315e <__kernel_rem_pio2+0x562>
 8013182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013184:	2b00      	cmp	r3, #0
 8013186:	d002      	beq.n	801318e <__kernel_rem_pio2+0x592>
 8013188:	2380      	movs	r3, #128	; 0x80
 801318a:	061b      	lsls	r3, r3, #24
 801318c:	18e4      	adds	r4, r4, r3
 801318e:	002a      	movs	r2, r5
 8013190:	0023      	movs	r3, r4
 8013192:	9907      	ldr	r1, [sp, #28]
 8013194:	600a      	str	r2, [r1, #0]
 8013196:	604b      	str	r3, [r1, #4]
 8013198:	e7a9      	b.n	80130ee <__kernel_rem_pio2+0x4f2>
 801319a:	9da4      	ldr	r5, [sp, #656]	; 0x290
 801319c:	002c      	movs	r4, r5
 801319e:	e7ed      	b.n	801317c <__kernel_rem_pio2+0x580>
 80131a0:	00e3      	lsls	r3, r4, #3
 80131a2:	aa4e      	add	r2, sp, #312	; 0x138
 80131a4:	18d3      	adds	r3, r2, r3
 80131a6:	0030      	movs	r0, r6
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	0029      	movs	r1, r5
 80131ae:	f7ee f929 	bl	8001404 <__aeabi_dadd>
 80131b2:	0006      	movs	r6, r0
 80131b4:	000d      	movs	r5, r1
 80131b6:	3c01      	subs	r4, #1
 80131b8:	2c00      	cmp	r4, #0
 80131ba:	daf1      	bge.n	80131a0 <__kernel_rem_pio2+0x5a4>
 80131bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131be:	0029      	movs	r1, r5
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d002      	beq.n	80131ca <__kernel_rem_pio2+0x5ce>
 80131c4:	2380      	movs	r3, #128	; 0x80
 80131c6:	061b      	lsls	r3, r3, #24
 80131c8:	18e9      	adds	r1, r5, r3
 80131ca:	0032      	movs	r2, r6
 80131cc:	000b      	movs	r3, r1
 80131ce:	9907      	ldr	r1, [sp, #28]
 80131d0:	2401      	movs	r4, #1
 80131d2:	600a      	str	r2, [r1, #0]
 80131d4:	604b      	str	r3, [r1, #4]
 80131d6:	984e      	ldr	r0, [sp, #312]	; 0x138
 80131d8:	994f      	ldr	r1, [sp, #316]	; 0x13c
 80131da:	002b      	movs	r3, r5
 80131dc:	f7ef faee 	bl	80027bc <__aeabi_dsub>
 80131e0:	0006      	movs	r6, r0
 80131e2:	000d      	movs	r5, r1
 80131e4:	9b00      	ldr	r3, [sp, #0]
 80131e6:	42a3      	cmp	r3, r4
 80131e8:	da0f      	bge.n	801320a <__kernel_rem_pio2+0x60e>
 80131ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <__kernel_rem_pio2+0x5fa>
 80131f0:	2380      	movs	r3, #128	; 0x80
 80131f2:	061b      	lsls	r3, r3, #24
 80131f4:	18ed      	adds	r5, r5, r3
 80131f6:	0032      	movs	r2, r6
 80131f8:	002b      	movs	r3, r5
 80131fa:	9907      	ldr	r1, [sp, #28]
 80131fc:	608a      	str	r2, [r1, #8]
 80131fe:	60cb      	str	r3, [r1, #12]
 8013200:	e775      	b.n	80130ee <__kernel_rem_pio2+0x4f2>
 8013202:	2600      	movs	r6, #0
 8013204:	9c00      	ldr	r4, [sp, #0]
 8013206:	0035      	movs	r5, r6
 8013208:	e7d6      	b.n	80131b8 <__kernel_rem_pio2+0x5bc>
 801320a:	00e3      	lsls	r3, r4, #3
 801320c:	aa4e      	add	r2, sp, #312	; 0x138
 801320e:	18d3      	adds	r3, r2, r3
 8013210:	0030      	movs	r0, r6
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	0029      	movs	r1, r5
 8013218:	f7ee f8f4 	bl	8001404 <__aeabi_dadd>
 801321c:	3401      	adds	r4, #1
 801321e:	0006      	movs	r6, r0
 8013220:	000d      	movs	r5, r1
 8013222:	e7df      	b.n	80131e4 <__kernel_rem_pio2+0x5e8>
 8013224:	9b02      	ldr	r3, [sp, #8]
 8013226:	68ae      	ldr	r6, [r5, #8]
 8013228:	68ef      	ldr	r7, [r5, #12]
 801322a:	3b01      	subs	r3, #1
 801322c:	9302      	str	r3, [sp, #8]
 801322e:	682a      	ldr	r2, [r5, #0]
 8013230:	686b      	ldr	r3, [r5, #4]
 8013232:	9204      	str	r2, [sp, #16]
 8013234:	9305      	str	r3, [sp, #20]
 8013236:	9804      	ldr	r0, [sp, #16]
 8013238:	9905      	ldr	r1, [sp, #20]
 801323a:	0032      	movs	r2, r6
 801323c:	003b      	movs	r3, r7
 801323e:	f7ee f8e1 	bl	8001404 <__aeabi_dadd>
 8013242:	0002      	movs	r2, r0
 8013244:	000b      	movs	r3, r1
 8013246:	9008      	str	r0, [sp, #32]
 8013248:	9109      	str	r1, [sp, #36]	; 0x24
 801324a:	9804      	ldr	r0, [sp, #16]
 801324c:	9905      	ldr	r1, [sp, #20]
 801324e:	f7ef fab5 	bl	80027bc <__aeabi_dsub>
 8013252:	0032      	movs	r2, r6
 8013254:	003b      	movs	r3, r7
 8013256:	f7ee f8d5 	bl	8001404 <__aeabi_dadd>
 801325a:	9a08      	ldr	r2, [sp, #32]
 801325c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801325e:	60a8      	str	r0, [r5, #8]
 8013260:	60e9      	str	r1, [r5, #12]
 8013262:	602a      	str	r2, [r5, #0]
 8013264:	606b      	str	r3, [r5, #4]
 8013266:	e754      	b.n	8013112 <__kernel_rem_pio2+0x516>
 8013268:	6826      	ldr	r6, [r4, #0]
 801326a:	6867      	ldr	r7, [r4, #4]
 801326c:	68a2      	ldr	r2, [r4, #8]
 801326e:	68e3      	ldr	r3, [r4, #12]
 8013270:	0030      	movs	r0, r6
 8013272:	0039      	movs	r1, r7
 8013274:	9202      	str	r2, [sp, #8]
 8013276:	9303      	str	r3, [sp, #12]
 8013278:	f7ee f8c4 	bl	8001404 <__aeabi_dadd>
 801327c:	0002      	movs	r2, r0
 801327e:	000b      	movs	r3, r1
 8013280:	9004      	str	r0, [sp, #16]
 8013282:	9105      	str	r1, [sp, #20]
 8013284:	0030      	movs	r0, r6
 8013286:	0039      	movs	r1, r7
 8013288:	f7ef fa98 	bl	80027bc <__aeabi_dsub>
 801328c:	9a02      	ldr	r2, [sp, #8]
 801328e:	9b03      	ldr	r3, [sp, #12]
 8013290:	f7ee f8b8 	bl	8001404 <__aeabi_dadd>
 8013294:	9a04      	ldr	r2, [sp, #16]
 8013296:	9b05      	ldr	r3, [sp, #20]
 8013298:	60a0      	str	r0, [r4, #8]
 801329a:	60e1      	str	r1, [r4, #12]
 801329c:	6022      	str	r2, [r4, #0]
 801329e:	6063      	str	r3, [r4, #4]
 80132a0:	3d01      	subs	r5, #1
 80132a2:	e73c      	b.n	801311e <__kernel_rem_pio2+0x522>
 80132a4:	9b00      	ldr	r3, [sp, #0]
 80132a6:	aa4e      	add	r2, sp, #312	; 0x138
 80132a8:	00db      	lsls	r3, r3, #3
 80132aa:	18d3      	adds	r3, r2, r3
 80132ac:	0020      	movs	r0, r4
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	f7ee f8a7 	bl	8001404 <__aeabi_dadd>
 80132b6:	9b00      	ldr	r3, [sp, #0]
 80132b8:	0004      	movs	r4, r0
 80132ba:	3b01      	subs	r3, #1
 80132bc:	9300      	str	r3, [sp, #0]
 80132be:	e734      	b.n	801312a <__kernel_rem_pio2+0x52e>
 80132c0:	9b07      	ldr	r3, [sp, #28]
 80132c2:	9a07      	ldr	r2, [sp, #28]
 80132c4:	601f      	str	r7, [r3, #0]
 80132c6:	2380      	movs	r3, #128	; 0x80
 80132c8:	061b      	lsls	r3, r3, #24
 80132ca:	18f6      	adds	r6, r6, r3
 80132cc:	18c0      	adds	r0, r0, r3
 80132ce:	18c9      	adds	r1, r1, r3
 80132d0:	6056      	str	r6, [r2, #4]
 80132d2:	6095      	str	r5, [r2, #8]
 80132d4:	60d0      	str	r0, [r2, #12]
 80132d6:	6114      	str	r4, [r2, #16]
 80132d8:	6151      	str	r1, [r2, #20]
 80132da:	e708      	b.n	80130ee <__kernel_rem_pio2+0x4f2>
 80132dc:	41700000 	.word	0x41700000
 80132e0:	3e700000 	.word	0x3e700000
 80132e4:	08016460 	.word	0x08016460

080132e8 <__kernel_sin>:
 80132e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ea:	b089      	sub	sp, #36	; 0x24
 80132ec:	9202      	str	r2, [sp, #8]
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	22f9      	movs	r2, #249	; 0xf9
 80132f2:	004b      	lsls	r3, r1, #1
 80132f4:	0007      	movs	r7, r0
 80132f6:	000e      	movs	r6, r1
 80132f8:	085b      	lsrs	r3, r3, #1
 80132fa:	0592      	lsls	r2, r2, #22
 80132fc:	4293      	cmp	r3, r2
 80132fe:	da03      	bge.n	8013308 <__kernel_sin+0x20>
 8013300:	f7ef fe0c 	bl	8002f1c <__aeabi_d2iz>
 8013304:	2800      	cmp	r0, #0
 8013306:	d04c      	beq.n	80133a2 <__kernel_sin+0xba>
 8013308:	003a      	movs	r2, r7
 801330a:	0033      	movs	r3, r6
 801330c:	0038      	movs	r0, r7
 801330e:	0031      	movs	r1, r6
 8013310:	f7ee ffe8 	bl	80022e4 <__aeabi_dmul>
 8013314:	0004      	movs	r4, r0
 8013316:	000d      	movs	r5, r1
 8013318:	0002      	movs	r2, r0
 801331a:	000b      	movs	r3, r1
 801331c:	0038      	movs	r0, r7
 801331e:	0031      	movs	r1, r6
 8013320:	f7ee ffe0 	bl	80022e4 <__aeabi_dmul>
 8013324:	4a39      	ldr	r2, [pc, #228]	; (801340c <__kernel_sin+0x124>)
 8013326:	9000      	str	r0, [sp, #0]
 8013328:	9101      	str	r1, [sp, #4]
 801332a:	4b39      	ldr	r3, [pc, #228]	; (8013410 <__kernel_sin+0x128>)
 801332c:	0020      	movs	r0, r4
 801332e:	0029      	movs	r1, r5
 8013330:	f7ee ffd8 	bl	80022e4 <__aeabi_dmul>
 8013334:	4a37      	ldr	r2, [pc, #220]	; (8013414 <__kernel_sin+0x12c>)
 8013336:	4b38      	ldr	r3, [pc, #224]	; (8013418 <__kernel_sin+0x130>)
 8013338:	f7ef fa40 	bl	80027bc <__aeabi_dsub>
 801333c:	0022      	movs	r2, r4
 801333e:	002b      	movs	r3, r5
 8013340:	f7ee ffd0 	bl	80022e4 <__aeabi_dmul>
 8013344:	4a35      	ldr	r2, [pc, #212]	; (801341c <__kernel_sin+0x134>)
 8013346:	4b36      	ldr	r3, [pc, #216]	; (8013420 <__kernel_sin+0x138>)
 8013348:	f7ee f85c 	bl	8001404 <__aeabi_dadd>
 801334c:	0022      	movs	r2, r4
 801334e:	002b      	movs	r3, r5
 8013350:	f7ee ffc8 	bl	80022e4 <__aeabi_dmul>
 8013354:	4a33      	ldr	r2, [pc, #204]	; (8013424 <__kernel_sin+0x13c>)
 8013356:	4b34      	ldr	r3, [pc, #208]	; (8013428 <__kernel_sin+0x140>)
 8013358:	f7ef fa30 	bl	80027bc <__aeabi_dsub>
 801335c:	0022      	movs	r2, r4
 801335e:	002b      	movs	r3, r5
 8013360:	f7ee ffc0 	bl	80022e4 <__aeabi_dmul>
 8013364:	4b31      	ldr	r3, [pc, #196]	; (801342c <__kernel_sin+0x144>)
 8013366:	4a32      	ldr	r2, [pc, #200]	; (8013430 <__kernel_sin+0x148>)
 8013368:	f7ee f84c 	bl	8001404 <__aeabi_dadd>
 801336c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801336e:	9004      	str	r0, [sp, #16]
 8013370:	9105      	str	r1, [sp, #20]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d119      	bne.n	80133aa <__kernel_sin+0xc2>
 8013376:	0002      	movs	r2, r0
 8013378:	000b      	movs	r3, r1
 801337a:	0020      	movs	r0, r4
 801337c:	0029      	movs	r1, r5
 801337e:	f7ee ffb1 	bl	80022e4 <__aeabi_dmul>
 8013382:	4a2c      	ldr	r2, [pc, #176]	; (8013434 <__kernel_sin+0x14c>)
 8013384:	4b2c      	ldr	r3, [pc, #176]	; (8013438 <__kernel_sin+0x150>)
 8013386:	f7ef fa19 	bl	80027bc <__aeabi_dsub>
 801338a:	9a00      	ldr	r2, [sp, #0]
 801338c:	9b01      	ldr	r3, [sp, #4]
 801338e:	f7ee ffa9 	bl	80022e4 <__aeabi_dmul>
 8013392:	0002      	movs	r2, r0
 8013394:	000b      	movs	r3, r1
 8013396:	0038      	movs	r0, r7
 8013398:	0031      	movs	r1, r6
 801339a:	f7ee f833 	bl	8001404 <__aeabi_dadd>
 801339e:	0007      	movs	r7, r0
 80133a0:	000e      	movs	r6, r1
 80133a2:	0038      	movs	r0, r7
 80133a4:	0031      	movs	r1, r6
 80133a6:	b009      	add	sp, #36	; 0x24
 80133a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133aa:	2200      	movs	r2, #0
 80133ac:	9802      	ldr	r0, [sp, #8]
 80133ae:	9903      	ldr	r1, [sp, #12]
 80133b0:	4b22      	ldr	r3, [pc, #136]	; (801343c <__kernel_sin+0x154>)
 80133b2:	f7ee ff97 	bl	80022e4 <__aeabi_dmul>
 80133b6:	9a04      	ldr	r2, [sp, #16]
 80133b8:	9b05      	ldr	r3, [sp, #20]
 80133ba:	9006      	str	r0, [sp, #24]
 80133bc:	9107      	str	r1, [sp, #28]
 80133be:	9800      	ldr	r0, [sp, #0]
 80133c0:	9901      	ldr	r1, [sp, #4]
 80133c2:	f7ee ff8f 	bl	80022e4 <__aeabi_dmul>
 80133c6:	0002      	movs	r2, r0
 80133c8:	000b      	movs	r3, r1
 80133ca:	9806      	ldr	r0, [sp, #24]
 80133cc:	9907      	ldr	r1, [sp, #28]
 80133ce:	f7ef f9f5 	bl	80027bc <__aeabi_dsub>
 80133d2:	0022      	movs	r2, r4
 80133d4:	002b      	movs	r3, r5
 80133d6:	f7ee ff85 	bl	80022e4 <__aeabi_dmul>
 80133da:	9a02      	ldr	r2, [sp, #8]
 80133dc:	9b03      	ldr	r3, [sp, #12]
 80133de:	f7ef f9ed 	bl	80027bc <__aeabi_dsub>
 80133e2:	4a14      	ldr	r2, [pc, #80]	; (8013434 <__kernel_sin+0x14c>)
 80133e4:	0004      	movs	r4, r0
 80133e6:	000d      	movs	r5, r1
 80133e8:	9800      	ldr	r0, [sp, #0]
 80133ea:	9901      	ldr	r1, [sp, #4]
 80133ec:	4b12      	ldr	r3, [pc, #72]	; (8013438 <__kernel_sin+0x150>)
 80133ee:	f7ee ff79 	bl	80022e4 <__aeabi_dmul>
 80133f2:	0002      	movs	r2, r0
 80133f4:	000b      	movs	r3, r1
 80133f6:	0020      	movs	r0, r4
 80133f8:	0029      	movs	r1, r5
 80133fa:	f7ee f803 	bl	8001404 <__aeabi_dadd>
 80133fe:	0002      	movs	r2, r0
 8013400:	000b      	movs	r3, r1
 8013402:	0038      	movs	r0, r7
 8013404:	0031      	movs	r1, r6
 8013406:	f7ef f9d9 	bl	80027bc <__aeabi_dsub>
 801340a:	e7c8      	b.n	801339e <__kernel_sin+0xb6>
 801340c:	5acfd57c 	.word	0x5acfd57c
 8013410:	3de5d93a 	.word	0x3de5d93a
 8013414:	8a2b9ceb 	.word	0x8a2b9ceb
 8013418:	3e5ae5e6 	.word	0x3e5ae5e6
 801341c:	57b1fe7d 	.word	0x57b1fe7d
 8013420:	3ec71de3 	.word	0x3ec71de3
 8013424:	19c161d5 	.word	0x19c161d5
 8013428:	3f2a01a0 	.word	0x3f2a01a0
 801342c:	3f811111 	.word	0x3f811111
 8013430:	1110f8a6 	.word	0x1110f8a6
 8013434:	55555549 	.word	0x55555549
 8013438:	3fc55555 	.word	0x3fc55555
 801343c:	3fe00000 	.word	0x3fe00000

08013440 <atan>:
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	4b98      	ldr	r3, [pc, #608]	; (80136a4 <atan+0x264>)
 8013444:	b085      	sub	sp, #20
 8013446:	004e      	lsls	r6, r1, #1
 8013448:	0004      	movs	r4, r0
 801344a:	000d      	movs	r5, r1
 801344c:	9103      	str	r1, [sp, #12]
 801344e:	0876      	lsrs	r6, r6, #1
 8013450:	429e      	cmp	r6, r3
 8013452:	dd18      	ble.n	8013486 <atan+0x46>
 8013454:	4b94      	ldr	r3, [pc, #592]	; (80136a8 <atan+0x268>)
 8013456:	429e      	cmp	r6, r3
 8013458:	dc02      	bgt.n	8013460 <atan+0x20>
 801345a:	d10a      	bne.n	8013472 <atan+0x32>
 801345c:	2800      	cmp	r0, #0
 801345e:	d008      	beq.n	8013472 <atan+0x32>
 8013460:	0022      	movs	r2, r4
 8013462:	002b      	movs	r3, r5
 8013464:	0020      	movs	r0, r4
 8013466:	0029      	movs	r1, r5
 8013468:	f7ed ffcc 	bl	8001404 <__aeabi_dadd>
 801346c:	0004      	movs	r4, r0
 801346e:	000d      	movs	r5, r1
 8013470:	e005      	b.n	801347e <atan+0x3e>
 8013472:	9b03      	ldr	r3, [sp, #12]
 8013474:	4c8d      	ldr	r4, [pc, #564]	; (80136ac <atan+0x26c>)
 8013476:	2b00      	cmp	r3, #0
 8013478:	dd00      	ble.n	801347c <atan+0x3c>
 801347a:	e110      	b.n	801369e <atan+0x25e>
 801347c:	4d8c      	ldr	r5, [pc, #560]	; (80136b0 <atan+0x270>)
 801347e:	0020      	movs	r0, r4
 8013480:	0029      	movs	r1, r5
 8013482:	b005      	add	sp, #20
 8013484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013486:	4b8b      	ldr	r3, [pc, #556]	; (80136b4 <atan+0x274>)
 8013488:	429e      	cmp	r6, r3
 801348a:	dc0f      	bgt.n	80134ac <atan+0x6c>
 801348c:	4b8a      	ldr	r3, [pc, #552]	; (80136b8 <atan+0x278>)
 801348e:	429e      	cmp	r6, r3
 8013490:	dc09      	bgt.n	80134a6 <atan+0x66>
 8013492:	4a8a      	ldr	r2, [pc, #552]	; (80136bc <atan+0x27c>)
 8013494:	4b8a      	ldr	r3, [pc, #552]	; (80136c0 <atan+0x280>)
 8013496:	f7ed ffb5 	bl	8001404 <__aeabi_dadd>
 801349a:	2200      	movs	r2, #0
 801349c:	4b89      	ldr	r3, [pc, #548]	; (80136c4 <atan+0x284>)
 801349e:	f7ec ffd9 	bl	8000454 <__aeabi_dcmpgt>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d1eb      	bne.n	801347e <atan+0x3e>
 80134a6:	2301      	movs	r3, #1
 80134a8:	425b      	negs	r3, r3
 80134aa:	e025      	b.n	80134f8 <atan+0xb8>
 80134ac:	f000 f948 	bl	8013740 <fabs>
 80134b0:	4b85      	ldr	r3, [pc, #532]	; (80136c8 <atan+0x288>)
 80134b2:	0004      	movs	r4, r0
 80134b4:	000d      	movs	r5, r1
 80134b6:	429e      	cmp	r6, r3
 80134b8:	dd00      	ble.n	80134bc <atan+0x7c>
 80134ba:	e0aa      	b.n	8013612 <atan+0x1d2>
 80134bc:	4b83      	ldr	r3, [pc, #524]	; (80136cc <atan+0x28c>)
 80134be:	429e      	cmp	r6, r3
 80134c0:	dd00      	ble.n	80134c4 <atan+0x84>
 80134c2:	e090      	b.n	80135e6 <atan+0x1a6>
 80134c4:	0002      	movs	r2, r0
 80134c6:	000b      	movs	r3, r1
 80134c8:	f7ed ff9c 	bl	8001404 <__aeabi_dadd>
 80134cc:	2200      	movs	r2, #0
 80134ce:	4b7d      	ldr	r3, [pc, #500]	; (80136c4 <atan+0x284>)
 80134d0:	f7ef f974 	bl	80027bc <__aeabi_dsub>
 80134d4:	2380      	movs	r3, #128	; 0x80
 80134d6:	0006      	movs	r6, r0
 80134d8:	000f      	movs	r7, r1
 80134da:	2200      	movs	r2, #0
 80134dc:	0020      	movs	r0, r4
 80134de:	0029      	movs	r1, r5
 80134e0:	05db      	lsls	r3, r3, #23
 80134e2:	f7ed ff8f 	bl	8001404 <__aeabi_dadd>
 80134e6:	000b      	movs	r3, r1
 80134e8:	0002      	movs	r2, r0
 80134ea:	0039      	movs	r1, r7
 80134ec:	0030      	movs	r0, r6
 80134ee:	f7ee faf3 	bl	8001ad8 <__aeabi_ddiv>
 80134f2:	2300      	movs	r3, #0
 80134f4:	0004      	movs	r4, r0
 80134f6:	000d      	movs	r5, r1
 80134f8:	0022      	movs	r2, r4
 80134fa:	9302      	str	r3, [sp, #8]
 80134fc:	0020      	movs	r0, r4
 80134fe:	002b      	movs	r3, r5
 8013500:	0029      	movs	r1, r5
 8013502:	f7ee feef 	bl	80022e4 <__aeabi_dmul>
 8013506:	0002      	movs	r2, r0
 8013508:	000b      	movs	r3, r1
 801350a:	9000      	str	r0, [sp, #0]
 801350c:	9101      	str	r1, [sp, #4]
 801350e:	f7ee fee9 	bl	80022e4 <__aeabi_dmul>
 8013512:	0006      	movs	r6, r0
 8013514:	000f      	movs	r7, r1
 8013516:	4a6e      	ldr	r2, [pc, #440]	; (80136d0 <atan+0x290>)
 8013518:	4b6e      	ldr	r3, [pc, #440]	; (80136d4 <atan+0x294>)
 801351a:	f7ee fee3 	bl	80022e4 <__aeabi_dmul>
 801351e:	4a6e      	ldr	r2, [pc, #440]	; (80136d8 <atan+0x298>)
 8013520:	4b6e      	ldr	r3, [pc, #440]	; (80136dc <atan+0x29c>)
 8013522:	f7ed ff6f 	bl	8001404 <__aeabi_dadd>
 8013526:	0032      	movs	r2, r6
 8013528:	003b      	movs	r3, r7
 801352a:	f7ee fedb 	bl	80022e4 <__aeabi_dmul>
 801352e:	4a6c      	ldr	r2, [pc, #432]	; (80136e0 <atan+0x2a0>)
 8013530:	4b6c      	ldr	r3, [pc, #432]	; (80136e4 <atan+0x2a4>)
 8013532:	f7ed ff67 	bl	8001404 <__aeabi_dadd>
 8013536:	0032      	movs	r2, r6
 8013538:	003b      	movs	r3, r7
 801353a:	f7ee fed3 	bl	80022e4 <__aeabi_dmul>
 801353e:	4a6a      	ldr	r2, [pc, #424]	; (80136e8 <atan+0x2a8>)
 8013540:	4b6a      	ldr	r3, [pc, #424]	; (80136ec <atan+0x2ac>)
 8013542:	f7ed ff5f 	bl	8001404 <__aeabi_dadd>
 8013546:	0032      	movs	r2, r6
 8013548:	003b      	movs	r3, r7
 801354a:	f7ee fecb 	bl	80022e4 <__aeabi_dmul>
 801354e:	4a68      	ldr	r2, [pc, #416]	; (80136f0 <atan+0x2b0>)
 8013550:	4b68      	ldr	r3, [pc, #416]	; (80136f4 <atan+0x2b4>)
 8013552:	f7ed ff57 	bl	8001404 <__aeabi_dadd>
 8013556:	0032      	movs	r2, r6
 8013558:	003b      	movs	r3, r7
 801355a:	f7ee fec3 	bl	80022e4 <__aeabi_dmul>
 801355e:	4a66      	ldr	r2, [pc, #408]	; (80136f8 <atan+0x2b8>)
 8013560:	4b66      	ldr	r3, [pc, #408]	; (80136fc <atan+0x2bc>)
 8013562:	f7ed ff4f 	bl	8001404 <__aeabi_dadd>
 8013566:	9a00      	ldr	r2, [sp, #0]
 8013568:	9b01      	ldr	r3, [sp, #4]
 801356a:	f7ee febb 	bl	80022e4 <__aeabi_dmul>
 801356e:	4a64      	ldr	r2, [pc, #400]	; (8013700 <atan+0x2c0>)
 8013570:	9000      	str	r0, [sp, #0]
 8013572:	9101      	str	r1, [sp, #4]
 8013574:	4b63      	ldr	r3, [pc, #396]	; (8013704 <atan+0x2c4>)
 8013576:	0030      	movs	r0, r6
 8013578:	0039      	movs	r1, r7
 801357a:	f7ee feb3 	bl	80022e4 <__aeabi_dmul>
 801357e:	4a62      	ldr	r2, [pc, #392]	; (8013708 <atan+0x2c8>)
 8013580:	4b62      	ldr	r3, [pc, #392]	; (801370c <atan+0x2cc>)
 8013582:	f7ef f91b 	bl	80027bc <__aeabi_dsub>
 8013586:	0032      	movs	r2, r6
 8013588:	003b      	movs	r3, r7
 801358a:	f7ee feab 	bl	80022e4 <__aeabi_dmul>
 801358e:	4a60      	ldr	r2, [pc, #384]	; (8013710 <atan+0x2d0>)
 8013590:	4b60      	ldr	r3, [pc, #384]	; (8013714 <atan+0x2d4>)
 8013592:	f7ef f913 	bl	80027bc <__aeabi_dsub>
 8013596:	0032      	movs	r2, r6
 8013598:	003b      	movs	r3, r7
 801359a:	f7ee fea3 	bl	80022e4 <__aeabi_dmul>
 801359e:	4a5e      	ldr	r2, [pc, #376]	; (8013718 <atan+0x2d8>)
 80135a0:	4b5e      	ldr	r3, [pc, #376]	; (801371c <atan+0x2dc>)
 80135a2:	f7ef f90b 	bl	80027bc <__aeabi_dsub>
 80135a6:	0032      	movs	r2, r6
 80135a8:	003b      	movs	r3, r7
 80135aa:	f7ee fe9b 	bl	80022e4 <__aeabi_dmul>
 80135ae:	4a5c      	ldr	r2, [pc, #368]	; (8013720 <atan+0x2e0>)
 80135b0:	4b5c      	ldr	r3, [pc, #368]	; (8013724 <atan+0x2e4>)
 80135b2:	f7ef f903 	bl	80027bc <__aeabi_dsub>
 80135b6:	0032      	movs	r2, r6
 80135b8:	003b      	movs	r3, r7
 80135ba:	f7ee fe93 	bl	80022e4 <__aeabi_dmul>
 80135be:	0002      	movs	r2, r0
 80135c0:	000b      	movs	r3, r1
 80135c2:	9800      	ldr	r0, [sp, #0]
 80135c4:	9901      	ldr	r1, [sp, #4]
 80135c6:	f7ed ff1d 	bl	8001404 <__aeabi_dadd>
 80135ca:	002b      	movs	r3, r5
 80135cc:	0022      	movs	r2, r4
 80135ce:	f7ee fe89 	bl	80022e4 <__aeabi_dmul>
 80135d2:	9b02      	ldr	r3, [sp, #8]
 80135d4:	3301      	adds	r3, #1
 80135d6:	d143      	bne.n	8013660 <atan+0x220>
 80135d8:	0002      	movs	r2, r0
 80135da:	000b      	movs	r3, r1
 80135dc:	0020      	movs	r0, r4
 80135de:	0029      	movs	r1, r5
 80135e0:	f7ef f8ec 	bl	80027bc <__aeabi_dsub>
 80135e4:	e742      	b.n	801346c <atan+0x2c>
 80135e6:	2200      	movs	r2, #0
 80135e8:	4b36      	ldr	r3, [pc, #216]	; (80136c4 <atan+0x284>)
 80135ea:	f7ef f8e7 	bl	80027bc <__aeabi_dsub>
 80135ee:	2200      	movs	r2, #0
 80135f0:	0006      	movs	r6, r0
 80135f2:	000f      	movs	r7, r1
 80135f4:	0020      	movs	r0, r4
 80135f6:	0029      	movs	r1, r5
 80135f8:	4b32      	ldr	r3, [pc, #200]	; (80136c4 <atan+0x284>)
 80135fa:	f7ed ff03 	bl	8001404 <__aeabi_dadd>
 80135fe:	000b      	movs	r3, r1
 8013600:	0002      	movs	r2, r0
 8013602:	0039      	movs	r1, r7
 8013604:	0030      	movs	r0, r6
 8013606:	f7ee fa67 	bl	8001ad8 <__aeabi_ddiv>
 801360a:	2301      	movs	r3, #1
 801360c:	0004      	movs	r4, r0
 801360e:	000d      	movs	r5, r1
 8013610:	e772      	b.n	80134f8 <atan+0xb8>
 8013612:	4b45      	ldr	r3, [pc, #276]	; (8013728 <atan+0x2e8>)
 8013614:	429e      	cmp	r6, r3
 8013616:	dc19      	bgt.n	801364c <atan+0x20c>
 8013618:	2200      	movs	r2, #0
 801361a:	4b44      	ldr	r3, [pc, #272]	; (801372c <atan+0x2ec>)
 801361c:	f7ef f8ce 	bl	80027bc <__aeabi_dsub>
 8013620:	2200      	movs	r2, #0
 8013622:	0006      	movs	r6, r0
 8013624:	000f      	movs	r7, r1
 8013626:	0020      	movs	r0, r4
 8013628:	0029      	movs	r1, r5
 801362a:	4b40      	ldr	r3, [pc, #256]	; (801372c <atan+0x2ec>)
 801362c:	f7ee fe5a 	bl	80022e4 <__aeabi_dmul>
 8013630:	2200      	movs	r2, #0
 8013632:	4b24      	ldr	r3, [pc, #144]	; (80136c4 <atan+0x284>)
 8013634:	f7ed fee6 	bl	8001404 <__aeabi_dadd>
 8013638:	000b      	movs	r3, r1
 801363a:	0002      	movs	r2, r0
 801363c:	0039      	movs	r1, r7
 801363e:	0030      	movs	r0, r6
 8013640:	f7ee fa4a 	bl	8001ad8 <__aeabi_ddiv>
 8013644:	2302      	movs	r3, #2
 8013646:	0004      	movs	r4, r0
 8013648:	000d      	movs	r5, r1
 801364a:	e755      	b.n	80134f8 <atan+0xb8>
 801364c:	000b      	movs	r3, r1
 801364e:	0002      	movs	r2, r0
 8013650:	4937      	ldr	r1, [pc, #220]	; (8013730 <atan+0x2f0>)
 8013652:	2000      	movs	r0, #0
 8013654:	f7ee fa40 	bl	8001ad8 <__aeabi_ddiv>
 8013658:	2303      	movs	r3, #3
 801365a:	0004      	movs	r4, r0
 801365c:	000d      	movs	r5, r1
 801365e:	e74b      	b.n	80134f8 <atan+0xb8>
 8013660:	9b02      	ldr	r3, [sp, #8]
 8013662:	4f34      	ldr	r7, [pc, #208]	; (8013734 <atan+0x2f4>)
 8013664:	00de      	lsls	r6, r3, #3
 8013666:	4b34      	ldr	r3, [pc, #208]	; (8013738 <atan+0x2f8>)
 8013668:	19bf      	adds	r7, r7, r6
 801366a:	199e      	adds	r6, r3, r6
 801366c:	6832      	ldr	r2, [r6, #0]
 801366e:	6873      	ldr	r3, [r6, #4]
 8013670:	f7ef f8a4 	bl	80027bc <__aeabi_dsub>
 8013674:	0022      	movs	r2, r4
 8013676:	002b      	movs	r3, r5
 8013678:	f7ef f8a0 	bl	80027bc <__aeabi_dsub>
 801367c:	000b      	movs	r3, r1
 801367e:	0002      	movs	r2, r0
 8013680:	6838      	ldr	r0, [r7, #0]
 8013682:	6879      	ldr	r1, [r7, #4]
 8013684:	f7ef f89a 	bl	80027bc <__aeabi_dsub>
 8013688:	9b03      	ldr	r3, [sp, #12]
 801368a:	0004      	movs	r4, r0
 801368c:	000d      	movs	r5, r1
 801368e:	2b00      	cmp	r3, #0
 8013690:	db00      	blt.n	8013694 <atan+0x254>
 8013692:	e6f4      	b.n	801347e <atan+0x3e>
 8013694:	2180      	movs	r1, #128	; 0x80
 8013696:	0609      	lsls	r1, r1, #24
 8013698:	186b      	adds	r3, r5, r1
 801369a:	001d      	movs	r5, r3
 801369c:	e6ef      	b.n	801347e <atan+0x3e>
 801369e:	4d27      	ldr	r5, [pc, #156]	; (801373c <atan+0x2fc>)
 80136a0:	e6ed      	b.n	801347e <atan+0x3e>
 80136a2:	46c0      	nop			; (mov r8, r8)
 80136a4:	440fffff 	.word	0x440fffff
 80136a8:	7ff00000 	.word	0x7ff00000
 80136ac:	54442d18 	.word	0x54442d18
 80136b0:	bff921fb 	.word	0xbff921fb
 80136b4:	3fdbffff 	.word	0x3fdbffff
 80136b8:	3e1fffff 	.word	0x3e1fffff
 80136bc:	8800759c 	.word	0x8800759c
 80136c0:	7e37e43c 	.word	0x7e37e43c
 80136c4:	3ff00000 	.word	0x3ff00000
 80136c8:	3ff2ffff 	.word	0x3ff2ffff
 80136cc:	3fe5ffff 	.word	0x3fe5ffff
 80136d0:	e322da11 	.word	0xe322da11
 80136d4:	3f90ad3a 	.word	0x3f90ad3a
 80136d8:	24760deb 	.word	0x24760deb
 80136dc:	3fa97b4b 	.word	0x3fa97b4b
 80136e0:	a0d03d51 	.word	0xa0d03d51
 80136e4:	3fb10d66 	.word	0x3fb10d66
 80136e8:	c54c206e 	.word	0xc54c206e
 80136ec:	3fb745cd 	.word	0x3fb745cd
 80136f0:	920083ff 	.word	0x920083ff
 80136f4:	3fc24924 	.word	0x3fc24924
 80136f8:	5555550d 	.word	0x5555550d
 80136fc:	3fd55555 	.word	0x3fd55555
 8013700:	2c6a6c2f 	.word	0x2c6a6c2f
 8013704:	bfa2b444 	.word	0xbfa2b444
 8013708:	52defd9a 	.word	0x52defd9a
 801370c:	3fadde2d 	.word	0x3fadde2d
 8013710:	af749a6d 	.word	0xaf749a6d
 8013714:	3fb3b0f2 	.word	0x3fb3b0f2
 8013718:	fe231671 	.word	0xfe231671
 801371c:	3fbc71c6 	.word	0x3fbc71c6
 8013720:	9998ebc4 	.word	0x9998ebc4
 8013724:	3fc99999 	.word	0x3fc99999
 8013728:	40037fff 	.word	0x40037fff
 801372c:	3ff80000 	.word	0x3ff80000
 8013730:	bff00000 	.word	0xbff00000
 8013734:	080164b0 	.word	0x080164b0
 8013738:	080164d0 	.word	0x080164d0
 801373c:	3ff921fb 	.word	0x3ff921fb

08013740 <fabs>:
 8013740:	004b      	lsls	r3, r1, #1
 8013742:	0859      	lsrs	r1, r3, #1
 8013744:	4770      	bx	lr
	...

08013748 <floor>:
 8013748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801374a:	004b      	lsls	r3, r1, #1
 801374c:	4a3d      	ldr	r2, [pc, #244]	; (8013844 <floor+0xfc>)
 801374e:	0d5b      	lsrs	r3, r3, #21
 8013750:	189f      	adds	r7, r3, r2
 8013752:	4684      	mov	ip, r0
 8013754:	000e      	movs	r6, r1
 8013756:	000d      	movs	r5, r1
 8013758:	0004      	movs	r4, r0
 801375a:	9001      	str	r0, [sp, #4]
 801375c:	2f13      	cmp	r7, #19
 801375e:	dc34      	bgt.n	80137ca <floor+0x82>
 8013760:	2f00      	cmp	r7, #0
 8013762:	da16      	bge.n	8013792 <floor+0x4a>
 8013764:	4a38      	ldr	r2, [pc, #224]	; (8013848 <floor+0x100>)
 8013766:	4b39      	ldr	r3, [pc, #228]	; (801384c <floor+0x104>)
 8013768:	4660      	mov	r0, ip
 801376a:	0031      	movs	r1, r6
 801376c:	f7ed fe4a 	bl	8001404 <__aeabi_dadd>
 8013770:	2200      	movs	r2, #0
 8013772:	2300      	movs	r3, #0
 8013774:	f7ec fe6e 	bl	8000454 <__aeabi_dcmpgt>
 8013778:	2800      	cmp	r0, #0
 801377a:	d007      	beq.n	801378c <floor+0x44>
 801377c:	2e00      	cmp	r6, #0
 801377e:	da5d      	bge.n	801383c <floor+0xf4>
 8013780:	0073      	lsls	r3, r6, #1
 8013782:	085b      	lsrs	r3, r3, #1
 8013784:	431c      	orrs	r4, r3
 8013786:	d001      	beq.n	801378c <floor+0x44>
 8013788:	2400      	movs	r4, #0
 801378a:	4d31      	ldr	r5, [pc, #196]	; (8013850 <floor+0x108>)
 801378c:	46a4      	mov	ip, r4
 801378e:	002e      	movs	r6, r5
 8013790:	e029      	b.n	80137e6 <floor+0x9e>
 8013792:	4b30      	ldr	r3, [pc, #192]	; (8013854 <floor+0x10c>)
 8013794:	413b      	asrs	r3, r7
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	400b      	ands	r3, r1
 801379a:	4303      	orrs	r3, r0
 801379c:	d023      	beq.n	80137e6 <floor+0x9e>
 801379e:	4a2a      	ldr	r2, [pc, #168]	; (8013848 <floor+0x100>)
 80137a0:	4b2a      	ldr	r3, [pc, #168]	; (801384c <floor+0x104>)
 80137a2:	4660      	mov	r0, ip
 80137a4:	0031      	movs	r1, r6
 80137a6:	f7ed fe2d 	bl	8001404 <__aeabi_dadd>
 80137aa:	2200      	movs	r2, #0
 80137ac:	2300      	movs	r3, #0
 80137ae:	f7ec fe51 	bl	8000454 <__aeabi_dcmpgt>
 80137b2:	2800      	cmp	r0, #0
 80137b4:	d0ea      	beq.n	801378c <floor+0x44>
 80137b6:	2e00      	cmp	r6, #0
 80137b8:	da03      	bge.n	80137c2 <floor+0x7a>
 80137ba:	2380      	movs	r3, #128	; 0x80
 80137bc:	035b      	lsls	r3, r3, #13
 80137be:	413b      	asrs	r3, r7
 80137c0:	18f5      	adds	r5, r6, r3
 80137c2:	9b00      	ldr	r3, [sp, #0]
 80137c4:	2400      	movs	r4, #0
 80137c6:	439d      	bics	r5, r3
 80137c8:	e7e0      	b.n	801378c <floor+0x44>
 80137ca:	2f33      	cmp	r7, #51	; 0x33
 80137cc:	dd0f      	ble.n	80137ee <floor+0xa6>
 80137ce:	2380      	movs	r3, #128	; 0x80
 80137d0:	00db      	lsls	r3, r3, #3
 80137d2:	429f      	cmp	r7, r3
 80137d4:	d107      	bne.n	80137e6 <floor+0x9e>
 80137d6:	0002      	movs	r2, r0
 80137d8:	000b      	movs	r3, r1
 80137da:	4660      	mov	r0, ip
 80137dc:	0031      	movs	r1, r6
 80137de:	f7ed fe11 	bl	8001404 <__aeabi_dadd>
 80137e2:	4684      	mov	ip, r0
 80137e4:	000e      	movs	r6, r1
 80137e6:	4660      	mov	r0, ip
 80137e8:	0031      	movs	r1, r6
 80137ea:	b003      	add	sp, #12
 80137ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ee:	4a1a      	ldr	r2, [pc, #104]	; (8013858 <floor+0x110>)
 80137f0:	189b      	adds	r3, r3, r2
 80137f2:	2201      	movs	r2, #1
 80137f4:	4252      	negs	r2, r2
 80137f6:	40da      	lsrs	r2, r3
 80137f8:	9200      	str	r2, [sp, #0]
 80137fa:	4210      	tst	r0, r2
 80137fc:	d0f3      	beq.n	80137e6 <floor+0x9e>
 80137fe:	4a12      	ldr	r2, [pc, #72]	; (8013848 <floor+0x100>)
 8013800:	4b12      	ldr	r3, [pc, #72]	; (801384c <floor+0x104>)
 8013802:	4660      	mov	r0, ip
 8013804:	0031      	movs	r1, r6
 8013806:	f7ed fdfd 	bl	8001404 <__aeabi_dadd>
 801380a:	2200      	movs	r2, #0
 801380c:	2300      	movs	r3, #0
 801380e:	f7ec fe21 	bl	8000454 <__aeabi_dcmpgt>
 8013812:	2800      	cmp	r0, #0
 8013814:	d0ba      	beq.n	801378c <floor+0x44>
 8013816:	2e00      	cmp	r6, #0
 8013818:	da02      	bge.n	8013820 <floor+0xd8>
 801381a:	2f14      	cmp	r7, #20
 801381c:	d103      	bne.n	8013826 <floor+0xde>
 801381e:	3501      	adds	r5, #1
 8013820:	9b00      	ldr	r3, [sp, #0]
 8013822:	439c      	bics	r4, r3
 8013824:	e7b2      	b.n	801378c <floor+0x44>
 8013826:	2334      	movs	r3, #52	; 0x34
 8013828:	1bdf      	subs	r7, r3, r7
 801382a:	3b33      	subs	r3, #51	; 0x33
 801382c:	40bb      	lsls	r3, r7
 801382e:	18e4      	adds	r4, r4, r3
 8013830:	9b01      	ldr	r3, [sp, #4]
 8013832:	429c      	cmp	r4, r3
 8013834:	419b      	sbcs	r3, r3
 8013836:	425b      	negs	r3, r3
 8013838:	18f5      	adds	r5, r6, r3
 801383a:	e7f1      	b.n	8013820 <floor+0xd8>
 801383c:	2400      	movs	r4, #0
 801383e:	0025      	movs	r5, r4
 8013840:	e7a4      	b.n	801378c <floor+0x44>
 8013842:	46c0      	nop			; (mov r8, r8)
 8013844:	fffffc01 	.word	0xfffffc01
 8013848:	8800759c 	.word	0x8800759c
 801384c:	7e37e43c 	.word	0x7e37e43c
 8013850:	bff00000 	.word	0xbff00000
 8013854:	000fffff 	.word	0x000fffff
 8013858:	fffffbed 	.word	0xfffffbed

0801385c <nan>:
 801385c:	2000      	movs	r0, #0
 801385e:	4901      	ldr	r1, [pc, #4]	; (8013864 <nan+0x8>)
 8013860:	4770      	bx	lr
 8013862:	46c0      	nop			; (mov r8, r8)
 8013864:	7ff80000 	.word	0x7ff80000

08013868 <scalbn>:
 8013868:	004b      	lsls	r3, r1, #1
 801386a:	b570      	push	{r4, r5, r6, lr}
 801386c:	0d5b      	lsrs	r3, r3, #21
 801386e:	0014      	movs	r4, r2
 8013870:	000a      	movs	r2, r1
 8013872:	2b00      	cmp	r3, #0
 8013874:	d10d      	bne.n	8013892 <scalbn+0x2a>
 8013876:	004b      	lsls	r3, r1, #1
 8013878:	085b      	lsrs	r3, r3, #1
 801387a:	4303      	orrs	r3, r0
 801387c:	d010      	beq.n	80138a0 <scalbn+0x38>
 801387e:	4b27      	ldr	r3, [pc, #156]	; (801391c <scalbn+0xb4>)
 8013880:	2200      	movs	r2, #0
 8013882:	f7ee fd2f 	bl	80022e4 <__aeabi_dmul>
 8013886:	4b26      	ldr	r3, [pc, #152]	; (8013920 <scalbn+0xb8>)
 8013888:	429c      	cmp	r4, r3
 801388a:	da0a      	bge.n	80138a2 <scalbn+0x3a>
 801388c:	4a25      	ldr	r2, [pc, #148]	; (8013924 <scalbn+0xbc>)
 801388e:	4b26      	ldr	r3, [pc, #152]	; (8013928 <scalbn+0xc0>)
 8013890:	e019      	b.n	80138c6 <scalbn+0x5e>
 8013892:	4d26      	ldr	r5, [pc, #152]	; (801392c <scalbn+0xc4>)
 8013894:	42ab      	cmp	r3, r5
 8013896:	d108      	bne.n	80138aa <scalbn+0x42>
 8013898:	0002      	movs	r2, r0
 801389a:	000b      	movs	r3, r1
 801389c:	f7ed fdb2 	bl	8001404 <__aeabi_dadd>
 80138a0:	bd70      	pop	{r4, r5, r6, pc}
 80138a2:	000a      	movs	r2, r1
 80138a4:	004b      	lsls	r3, r1, #1
 80138a6:	0d5b      	lsrs	r3, r3, #21
 80138a8:	3b36      	subs	r3, #54	; 0x36
 80138aa:	4d21      	ldr	r5, [pc, #132]	; (8013930 <scalbn+0xc8>)
 80138ac:	18e3      	adds	r3, r4, r3
 80138ae:	42ab      	cmp	r3, r5
 80138b0:	dd0c      	ble.n	80138cc <scalbn+0x64>
 80138b2:	4c20      	ldr	r4, [pc, #128]	; (8013934 <scalbn+0xcc>)
 80138b4:	4d20      	ldr	r5, [pc, #128]	; (8013938 <scalbn+0xd0>)
 80138b6:	2900      	cmp	r1, #0
 80138b8:	da01      	bge.n	80138be <scalbn+0x56>
 80138ba:	4c1e      	ldr	r4, [pc, #120]	; (8013934 <scalbn+0xcc>)
 80138bc:	4d1f      	ldr	r5, [pc, #124]	; (801393c <scalbn+0xd4>)
 80138be:	0020      	movs	r0, r4
 80138c0:	0029      	movs	r1, r5
 80138c2:	4a1c      	ldr	r2, [pc, #112]	; (8013934 <scalbn+0xcc>)
 80138c4:	4b1c      	ldr	r3, [pc, #112]	; (8013938 <scalbn+0xd0>)
 80138c6:	f7ee fd0d 	bl	80022e4 <__aeabi_dmul>
 80138ca:	e7e9      	b.n	80138a0 <scalbn+0x38>
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	dd05      	ble.n	80138dc <scalbn+0x74>
 80138d0:	4c1b      	ldr	r4, [pc, #108]	; (8013940 <scalbn+0xd8>)
 80138d2:	051b      	lsls	r3, r3, #20
 80138d4:	4022      	ands	r2, r4
 80138d6:	431a      	orrs	r2, r3
 80138d8:	0011      	movs	r1, r2
 80138da:	e7e1      	b.n	80138a0 <scalbn+0x38>
 80138dc:	001d      	movs	r5, r3
 80138de:	3535      	adds	r5, #53	; 0x35
 80138e0:	da13      	bge.n	801390a <scalbn+0xa2>
 80138e2:	4a18      	ldr	r2, [pc, #96]	; (8013944 <scalbn+0xdc>)
 80138e4:	0fcb      	lsrs	r3, r1, #31
 80138e6:	4294      	cmp	r4, r2
 80138e8:	dd08      	ble.n	80138fc <scalbn+0x94>
 80138ea:	4812      	ldr	r0, [pc, #72]	; (8013934 <scalbn+0xcc>)
 80138ec:	4912      	ldr	r1, [pc, #72]	; (8013938 <scalbn+0xd0>)
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <scalbn+0x8e>
 80138f2:	4810      	ldr	r0, [pc, #64]	; (8013934 <scalbn+0xcc>)
 80138f4:	4911      	ldr	r1, [pc, #68]	; (801393c <scalbn+0xd4>)
 80138f6:	4a0f      	ldr	r2, [pc, #60]	; (8013934 <scalbn+0xcc>)
 80138f8:	4b0f      	ldr	r3, [pc, #60]	; (8013938 <scalbn+0xd0>)
 80138fa:	e7e4      	b.n	80138c6 <scalbn+0x5e>
 80138fc:	4809      	ldr	r0, [pc, #36]	; (8013924 <scalbn+0xbc>)
 80138fe:	490a      	ldr	r1, [pc, #40]	; (8013928 <scalbn+0xc0>)
 8013900:	2b00      	cmp	r3, #0
 8013902:	d0c3      	beq.n	801388c <scalbn+0x24>
 8013904:	4807      	ldr	r0, [pc, #28]	; (8013924 <scalbn+0xbc>)
 8013906:	4910      	ldr	r1, [pc, #64]	; (8013948 <scalbn+0xe0>)
 8013908:	e7c0      	b.n	801388c <scalbn+0x24>
 801390a:	4c0d      	ldr	r4, [pc, #52]	; (8013940 <scalbn+0xd8>)
 801390c:	3336      	adds	r3, #54	; 0x36
 801390e:	4022      	ands	r2, r4
 8013910:	051b      	lsls	r3, r3, #20
 8013912:	4313      	orrs	r3, r2
 8013914:	0019      	movs	r1, r3
 8013916:	2200      	movs	r2, #0
 8013918:	4b0c      	ldr	r3, [pc, #48]	; (801394c <scalbn+0xe4>)
 801391a:	e7d4      	b.n	80138c6 <scalbn+0x5e>
 801391c:	43500000 	.word	0x43500000
 8013920:	ffff3cb0 	.word	0xffff3cb0
 8013924:	c2f8f359 	.word	0xc2f8f359
 8013928:	01a56e1f 	.word	0x01a56e1f
 801392c:	000007ff 	.word	0x000007ff
 8013930:	000007fe 	.word	0x000007fe
 8013934:	8800759c 	.word	0x8800759c
 8013938:	7e37e43c 	.word	0x7e37e43c
 801393c:	fe37e43c 	.word	0xfe37e43c
 8013940:	800fffff 	.word	0x800fffff
 8013944:	0000c350 	.word	0x0000c350
 8013948:	81a56e1f 	.word	0x81a56e1f
 801394c:	3c900000 	.word	0x3c900000

08013950 <_init>:
 8013950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013952:	46c0      	nop			; (mov r8, r8)
 8013954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013956:	bc08      	pop	{r3}
 8013958:	469e      	mov	lr, r3
 801395a:	4770      	bx	lr

0801395c <_fini>:
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	46c0      	nop			; (mov r8, r8)
 8013960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013962:	bc08      	pop	{r3}
 8013964:	469e      	mov	lr, r3
 8013966:	4770      	bx	lr
