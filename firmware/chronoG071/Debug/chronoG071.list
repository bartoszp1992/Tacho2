
chronoG071.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d78  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b88  08015e38  08015e38  00025e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189c0  080189c0  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  080189c0  080189c0  000289c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080189c8  080189c8  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080189c8  080189c8  000289c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080189cc  080189cc  000289cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080189d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000694  2000017c  08018b4c  0003017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  08018b4c  00030810  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa2d  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005185  00000000  00000000  0005abd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0005fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  00061950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff33  00000000  00000000  000632b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002596a  00000000  00000000  000831e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8d0e  00000000  00000000  000a8b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016185b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074bc  00000000  00000000  001618b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08015e10 	.word	0x08015e10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08015e10 	.word	0x08015e10

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fef7 	bl	800220c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fe41 	bl	80020b0 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fee9 	bl	800220c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fedf 	bl	800220c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fe63 	bl	8002128 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fe59 	bl	8002128 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	1c08      	adds	r0, r1, #0
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 fbef 	bl	8000c70 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 fb73 	bl	8000b88 <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fbe1 	bl	8000c70 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fbd7 	bl	8000c70 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb81 	bl	8000bd8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fb77 	bl	8000bd8 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_ldivmod>:
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d115      	bne.n	8000528 <__aeabi_ldivmod+0x30>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d113      	bne.n	8000528 <__aeabi_ldivmod+0x30>
 8000500:	2900      	cmp	r1, #0
 8000502:	db06      	blt.n	8000512 <__aeabi_ldivmod+0x1a>
 8000504:	dc01      	bgt.n	800050a <__aeabi_ldivmod+0x12>
 8000506:	2800      	cmp	r0, #0
 8000508:	d006      	beq.n	8000518 <__aeabi_ldivmod+0x20>
 800050a:	2000      	movs	r0, #0
 800050c:	43c0      	mvns	r0, r0
 800050e:	0841      	lsrs	r1, r0, #1
 8000510:	e002      	b.n	8000518 <__aeabi_ldivmod+0x20>
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0609      	lsls	r1, r1, #24
 8000516:	2000      	movs	r0, #0
 8000518:	b407      	push	{r0, r1, r2}
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <__aeabi_ldivmod+0x2c>)
 800051c:	a101      	add	r1, pc, #4	; (adr r1, 8000524 <__aeabi_ldivmod+0x2c>)
 800051e:	1840      	adds	r0, r0, r1
 8000520:	9002      	str	r0, [sp, #8]
 8000522:	bd03      	pop	{r0, r1, pc}
 8000524:	fffffee1 	.word	0xfffffee1
 8000528:	b403      	push	{r0, r1}
 800052a:	4668      	mov	r0, sp
 800052c:	b501      	push	{r0, lr}
 800052e:	9802      	ldr	r0, [sp, #8]
 8000530:	f000 f864 	bl	80005fc <__gnu_ldivmod_helper>
 8000534:	9b01      	ldr	r3, [sp, #4]
 8000536:	469e      	mov	lr, r3
 8000538:	b002      	add	sp, #8
 800053a:	bc0c      	pop	{r2, r3}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_lmul>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	0415      	lsls	r5, r2, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	000f      	movs	r7, r1
 8000548:	0001      	movs	r1, r0
 800054a:	002e      	movs	r6, r5
 800054c:	46c6      	mov	lr, r8
 800054e:	4684      	mov	ip, r0
 8000550:	0400      	lsls	r0, r0, #16
 8000552:	0c14      	lsrs	r4, r2, #16
 8000554:	0c00      	lsrs	r0, r0, #16
 8000556:	0c09      	lsrs	r1, r1, #16
 8000558:	4346      	muls	r6, r0
 800055a:	434d      	muls	r5, r1
 800055c:	4360      	muls	r0, r4
 800055e:	4361      	muls	r1, r4
 8000560:	1940      	adds	r0, r0, r5
 8000562:	0c34      	lsrs	r4, r6, #16
 8000564:	1824      	adds	r4, r4, r0
 8000566:	b500      	push	{lr}
 8000568:	42a5      	cmp	r5, r4
 800056a:	d903      	bls.n	8000574 <__aeabi_lmul+0x34>
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	0240      	lsls	r0, r0, #9
 8000570:	4680      	mov	r8, r0
 8000572:	4441      	add	r1, r8
 8000574:	0c25      	lsrs	r5, r4, #16
 8000576:	186d      	adds	r5, r5, r1
 8000578:	4661      	mov	r1, ip
 800057a:	4359      	muls	r1, r3
 800057c:	437a      	muls	r2, r7
 800057e:	0430      	lsls	r0, r6, #16
 8000580:	1949      	adds	r1, r1, r5
 8000582:	0424      	lsls	r4, r4, #16
 8000584:	0c00      	lsrs	r0, r0, #16
 8000586:	1820      	adds	r0, r4, r0
 8000588:	1889      	adds	r1, r1, r2
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000590 <__aeabi_f2uiz>:
 8000590:	219e      	movs	r1, #158	; 0x9e
 8000592:	b510      	push	{r4, lr}
 8000594:	05c9      	lsls	r1, r1, #23
 8000596:	1c04      	adds	r4, r0, #0
 8000598:	f7ff ffa4 	bl	80004e4 <__aeabi_fcmpge>
 800059c:	2800      	cmp	r0, #0
 800059e:	d103      	bne.n	80005a8 <__aeabi_f2uiz+0x18>
 80005a0:	1c20      	adds	r0, r4, #0
 80005a2:	f000 fe91 	bl	80012c8 <__aeabi_f2iz>
 80005a6:	bd10      	pop	{r4, pc}
 80005a8:	219e      	movs	r1, #158	; 0x9e
 80005aa:	1c20      	adds	r0, r4, #0
 80005ac:	05c9      	lsls	r1, r1, #23
 80005ae:	f000 fcc3 	bl	8000f38 <__aeabi_fsub>
 80005b2:	f000 fe89 	bl	80012c8 <__aeabi_f2iz>
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	061b      	lsls	r3, r3, #24
 80005ba:	469c      	mov	ip, r3
 80005bc:	4460      	add	r0, ip
 80005be:	e7f2      	b.n	80005a6 <__aeabi_f2uiz+0x16>

080005c0 <__aeabi_d2uiz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005c6:	0004      	movs	r4, r0
 80005c8:	000d      	movs	r5, r1
 80005ca:	f7ff ff51 	bl	8000470 <__aeabi_dcmpge>
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d104      	bne.n	80005dc <__aeabi_d2uiz+0x1c>
 80005d2:	0020      	movs	r0, r4
 80005d4:	0029      	movs	r1, r5
 80005d6:	f002 fca5 	bl	8002f24 <__aeabi_d2iz>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005de:	2200      	movs	r2, #0
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f002 f8ee 	bl	80027c4 <__aeabi_dsub>
 80005e8:	f002 fc9c 	bl	8002f24 <__aeabi_d2iz>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	469c      	mov	ip, r3
 80005f2:	4460      	add	r0, ip
 80005f4:	e7f1      	b.n	80005da <__aeabi_d2uiz+0x1a>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41e00000 	.word	0x41e00000

080005fc <__gnu_ldivmod_helper>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	46ce      	mov	lr, r9
 8000600:	4647      	mov	r7, r8
 8000602:	b580      	push	{r7, lr}
 8000604:	4691      	mov	r9, r2
 8000606:	4698      	mov	r8, r3
 8000608:	0004      	movs	r4, r0
 800060a:	000d      	movs	r5, r1
 800060c:	f002 fe04 	bl	8003218 <__divdi3>
 8000610:	0007      	movs	r7, r0
 8000612:	000e      	movs	r6, r1
 8000614:	0002      	movs	r2, r0
 8000616:	000b      	movs	r3, r1
 8000618:	4648      	mov	r0, r9
 800061a:	4641      	mov	r1, r8
 800061c:	f7ff ff90 	bl	8000540 <__aeabi_lmul>
 8000620:	1a24      	subs	r4, r4, r0
 8000622:	418d      	sbcs	r5, r1
 8000624:	9b08      	ldr	r3, [sp, #32]
 8000626:	0038      	movs	r0, r7
 8000628:	0031      	movs	r1, r6
 800062a:	601c      	str	r4, [r3, #0]
 800062c:	605d      	str	r5, [r3, #4]
 800062e:	bcc0      	pop	{r6, r7}
 8000630:	46b9      	mov	r9, r7
 8000632:	46b0      	mov	r8, r6
 8000634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__aeabi_fadd>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4646      	mov	r6, r8
 800063c:	46d6      	mov	lr, sl
 800063e:	464f      	mov	r7, r9
 8000640:	024d      	lsls	r5, r1, #9
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	b5c0      	push	{r6, r7, lr}
 8000646:	0a52      	lsrs	r2, r2, #9
 8000648:	0a6e      	lsrs	r6, r5, #9
 800064a:	0047      	lsls	r7, r0, #1
 800064c:	46b0      	mov	r8, r6
 800064e:	0e3f      	lsrs	r7, r7, #24
 8000650:	004e      	lsls	r6, r1, #1
 8000652:	0fc4      	lsrs	r4, r0, #31
 8000654:	00d0      	lsls	r0, r2, #3
 8000656:	4694      	mov	ip, r2
 8000658:	003b      	movs	r3, r7
 800065a:	4682      	mov	sl, r0
 800065c:	0e36      	lsrs	r6, r6, #24
 800065e:	0fc9      	lsrs	r1, r1, #31
 8000660:	09ad      	lsrs	r5, r5, #6
 8000662:	428c      	cmp	r4, r1
 8000664:	d06d      	beq.n	8000742 <__aeabi_fadd+0x10a>
 8000666:	1bb8      	subs	r0, r7, r6
 8000668:	4681      	mov	r9, r0
 800066a:	2800      	cmp	r0, #0
 800066c:	dd4d      	ble.n	800070a <__aeabi_fadd+0xd2>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_fadd+0x3c>
 8000672:	e088      	b.n	8000786 <__aeabi_fadd+0x14e>
 8000674:	2fff      	cmp	r7, #255	; 0xff
 8000676:	d05a      	beq.n	800072e <__aeabi_fadd+0xf6>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	04db      	lsls	r3, r3, #19
 800067c:	431d      	orrs	r5, r3
 800067e:	464b      	mov	r3, r9
 8000680:	2201      	movs	r2, #1
 8000682:	2b1b      	cmp	r3, #27
 8000684:	dc0a      	bgt.n	800069c <__aeabi_fadd+0x64>
 8000686:	002b      	movs	r3, r5
 8000688:	464a      	mov	r2, r9
 800068a:	4649      	mov	r1, r9
 800068c:	40d3      	lsrs	r3, r2
 800068e:	2220      	movs	r2, #32
 8000690:	1a52      	subs	r2, r2, r1
 8000692:	4095      	lsls	r5, r2
 8000694:	002a      	movs	r2, r5
 8000696:	1e55      	subs	r5, r2, #1
 8000698:	41aa      	sbcs	r2, r5
 800069a:	431a      	orrs	r2, r3
 800069c:	4653      	mov	r3, sl
 800069e:	1a9a      	subs	r2, r3, r2
 80006a0:	0153      	lsls	r3, r2, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fadd+0x6e>
 80006a4:	e0b9      	b.n	800081a <__aeabi_fadd+0x1e2>
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	0996      	lsrs	r6, r2, #6
 80006aa:	0030      	movs	r0, r6
 80006ac:	f002 fd96 	bl	80031dc <__clzsi2>
 80006b0:	3805      	subs	r0, #5
 80006b2:	4086      	lsls	r6, r0
 80006b4:	4287      	cmp	r7, r0
 80006b6:	dd00      	ble.n	80006ba <__aeabi_fadd+0x82>
 80006b8:	e0d4      	b.n	8000864 <__aeabi_fadd+0x22c>
 80006ba:	0033      	movs	r3, r6
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	2020      	movs	r0, #32
 80006c0:	3701      	adds	r7, #1
 80006c2:	40fb      	lsrs	r3, r7
 80006c4:	1bc7      	subs	r7, r0, r7
 80006c6:	40be      	lsls	r6, r7
 80006c8:	0032      	movs	r2, r6
 80006ca:	1e56      	subs	r6, r2, #1
 80006cc:	41b2      	sbcs	r2, r6
 80006ce:	2700      	movs	r7, #0
 80006d0:	431a      	orrs	r2, r3
 80006d2:	0753      	lsls	r3, r2, #29
 80006d4:	d004      	beq.n	80006e0 <__aeabi_fadd+0xa8>
 80006d6:	230f      	movs	r3, #15
 80006d8:	4013      	ands	r3, r2
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fadd+0xa8>
 80006de:	3204      	adds	r2, #4
 80006e0:	0153      	lsls	r3, r2, #5
 80006e2:	d400      	bmi.n	80006e6 <__aeabi_fadd+0xae>
 80006e4:	e09c      	b.n	8000820 <__aeabi_fadd+0x1e8>
 80006e6:	1c7b      	adds	r3, r7, #1
 80006e8:	2ffe      	cmp	r7, #254	; 0xfe
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0xb6>
 80006ec:	e09a      	b.n	8000824 <__aeabi_fadd+0x1ec>
 80006ee:	0192      	lsls	r2, r2, #6
 80006f0:	0a52      	lsrs	r2, r2, #9
 80006f2:	4694      	mov	ip, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	05d8      	lsls	r0, r3, #23
 80006f8:	4663      	mov	r3, ip
 80006fa:	07e4      	lsls	r4, r4, #31
 80006fc:	4318      	orrs	r0, r3
 80006fe:	4320      	orrs	r0, r4
 8000700:	bce0      	pop	{r5, r6, r7}
 8000702:	46ba      	mov	sl, r7
 8000704:	46b1      	mov	r9, r6
 8000706:	46a8      	mov	r8, r5
 8000708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070a:	2800      	cmp	r0, #0
 800070c:	d049      	beq.n	80007a2 <__aeabi_fadd+0x16a>
 800070e:	1bf3      	subs	r3, r6, r7
 8000710:	2f00      	cmp	r7, #0
 8000712:	d000      	beq.n	8000716 <__aeabi_fadd+0xde>
 8000714:	e0b6      	b.n	8000884 <__aeabi_fadd+0x24c>
 8000716:	4652      	mov	r2, sl
 8000718:	2a00      	cmp	r2, #0
 800071a:	d060      	beq.n	80007de <__aeabi_fadd+0x1a6>
 800071c:	3b01      	subs	r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0xec>
 8000722:	e0fc      	b.n	800091e <__aeabi_fadd+0x2e6>
 8000724:	2eff      	cmp	r6, #255	; 0xff
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0xf2>
 8000728:	e0b4      	b.n	8000894 <__aeabi_fadd+0x25c>
 800072a:	000c      	movs	r4, r1
 800072c:	4642      	mov	r2, r8
 800072e:	2a00      	cmp	r2, #0
 8000730:	d078      	beq.n	8000824 <__aeabi_fadd+0x1ec>
 8000732:	2080      	movs	r0, #128	; 0x80
 8000734:	03c0      	lsls	r0, r0, #15
 8000736:	4310      	orrs	r0, r2
 8000738:	0242      	lsls	r2, r0, #9
 800073a:	0a53      	lsrs	r3, r2, #9
 800073c:	469c      	mov	ip, r3
 800073e:	23ff      	movs	r3, #255	; 0xff
 8000740:	e7d9      	b.n	80006f6 <__aeabi_fadd+0xbe>
 8000742:	1bb9      	subs	r1, r7, r6
 8000744:	2900      	cmp	r1, #0
 8000746:	dd71      	ble.n	800082c <__aeabi_fadd+0x1f4>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d03f      	beq.n	80007cc <__aeabi_fadd+0x194>
 800074c:	2fff      	cmp	r7, #255	; 0xff
 800074e:	d0ee      	beq.n	800072e <__aeabi_fadd+0xf6>
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	431d      	orrs	r5, r3
 8000756:	2201      	movs	r2, #1
 8000758:	291b      	cmp	r1, #27
 800075a:	dc07      	bgt.n	800076c <__aeabi_fadd+0x134>
 800075c:	002a      	movs	r2, r5
 800075e:	2320      	movs	r3, #32
 8000760:	40ca      	lsrs	r2, r1
 8000762:	1a59      	subs	r1, r3, r1
 8000764:	408d      	lsls	r5, r1
 8000766:	1e6b      	subs	r3, r5, #1
 8000768:	419d      	sbcs	r5, r3
 800076a:	432a      	orrs	r2, r5
 800076c:	4452      	add	r2, sl
 800076e:	0153      	lsls	r3, r2, #5
 8000770:	d553      	bpl.n	800081a <__aeabi_fadd+0x1e2>
 8000772:	3701      	adds	r7, #1
 8000774:	2fff      	cmp	r7, #255	; 0xff
 8000776:	d055      	beq.n	8000824 <__aeabi_fadd+0x1ec>
 8000778:	2301      	movs	r3, #1
 800077a:	497b      	ldr	r1, [pc, #492]	; (8000968 <__aeabi_fadd+0x330>)
 800077c:	4013      	ands	r3, r2
 800077e:	0852      	lsrs	r2, r2, #1
 8000780:	400a      	ands	r2, r1
 8000782:	431a      	orrs	r2, r3
 8000784:	e7a5      	b.n	80006d2 <__aeabi_fadd+0x9a>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d02c      	beq.n	80007e4 <__aeabi_fadd+0x1ac>
 800078a:	2301      	movs	r3, #1
 800078c:	425b      	negs	r3, r3
 800078e:	469c      	mov	ip, r3
 8000790:	44e1      	add	r9, ip
 8000792:	464b      	mov	r3, r9
 8000794:	2b00      	cmp	r3, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x162>
 8000798:	e0ad      	b.n	80008f6 <__aeabi_fadd+0x2be>
 800079a:	2fff      	cmp	r7, #255	; 0xff
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x168>
 800079e:	e76e      	b.n	800067e <__aeabi_fadd+0x46>
 80007a0:	e7c5      	b.n	800072e <__aeabi_fadd+0xf6>
 80007a2:	20fe      	movs	r0, #254	; 0xfe
 80007a4:	1c7e      	adds	r6, r7, #1
 80007a6:	4230      	tst	r0, r6
 80007a8:	d160      	bne.n	800086c <__aeabi_fadd+0x234>
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x178>
 80007ae:	e093      	b.n	80008d8 <__aeabi_fadd+0x2a0>
 80007b0:	4652      	mov	r2, sl
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0x180>
 80007b6:	e0b6      	b.n	8000926 <__aeabi_fadd+0x2ee>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d09c      	beq.n	80006f6 <__aeabi_fadd+0xbe>
 80007bc:	1b52      	subs	r2, r2, r5
 80007be:	0150      	lsls	r0, r2, #5
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_fadd+0x18c>
 80007c2:	e0c3      	b.n	800094c <__aeabi_fadd+0x314>
 80007c4:	4653      	mov	r3, sl
 80007c6:	000c      	movs	r4, r1
 80007c8:	1aea      	subs	r2, r5, r3
 80007ca:	e782      	b.n	80006d2 <__aeabi_fadd+0x9a>
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d009      	beq.n	80007e4 <__aeabi_fadd+0x1ac>
 80007d0:	3901      	subs	r1, #1
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x1a0>
 80007d6:	e08b      	b.n	80008f0 <__aeabi_fadd+0x2b8>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d1bc      	bne.n	8000756 <__aeabi_fadd+0x11e>
 80007dc:	e7a7      	b.n	800072e <__aeabi_fadd+0xf6>
 80007de:	000c      	movs	r4, r1
 80007e0:	4642      	mov	r2, r8
 80007e2:	0037      	movs	r7, r6
 80007e4:	2fff      	cmp	r7, #255	; 0xff
 80007e6:	d0a2      	beq.n	800072e <__aeabi_fadd+0xf6>
 80007e8:	0252      	lsls	r2, r2, #9
 80007ea:	0a53      	lsrs	r3, r2, #9
 80007ec:	469c      	mov	ip, r3
 80007ee:	b2fb      	uxtb	r3, r7
 80007f0:	e781      	b.n	80006f6 <__aeabi_fadd+0xbe>
 80007f2:	21fe      	movs	r1, #254	; 0xfe
 80007f4:	3701      	adds	r7, #1
 80007f6:	4239      	tst	r1, r7
 80007f8:	d165      	bne.n	80008c6 <__aeabi_fadd+0x28e>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d17e      	bne.n	80008fc <__aeabi_fadd+0x2c4>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x1cc>
 8000802:	e0aa      	b.n	800095a <__aeabi_fadd+0x322>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x1d2>
 8000808:	e775      	b.n	80006f6 <__aeabi_fadd+0xbe>
 800080a:	002a      	movs	r2, r5
 800080c:	4452      	add	r2, sl
 800080e:	2700      	movs	r7, #0
 8000810:	0153      	lsls	r3, r2, #5
 8000812:	d502      	bpl.n	800081a <__aeabi_fadd+0x1e2>
 8000814:	4b55      	ldr	r3, [pc, #340]	; (800096c <__aeabi_fadd+0x334>)
 8000816:	3701      	adds	r7, #1
 8000818:	401a      	ands	r2, r3
 800081a:	0753      	lsls	r3, r2, #29
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x1e8>
 800081e:	e75a      	b.n	80006d6 <__aeabi_fadd+0x9e>
 8000820:	08d2      	lsrs	r2, r2, #3
 8000822:	e7df      	b.n	80007e4 <__aeabi_fadd+0x1ac>
 8000824:	2200      	movs	r2, #0
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	4694      	mov	ip, r2
 800082a:	e764      	b.n	80006f6 <__aeabi_fadd+0xbe>
 800082c:	2900      	cmp	r1, #0
 800082e:	d0e0      	beq.n	80007f2 <__aeabi_fadd+0x1ba>
 8000830:	1bf3      	subs	r3, r6, r7
 8000832:	2f00      	cmp	r7, #0
 8000834:	d03e      	beq.n	80008b4 <__aeabi_fadd+0x27c>
 8000836:	2eff      	cmp	r6, #255	; 0xff
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x204>
 800083a:	e777      	b.n	800072c <__aeabi_fadd+0xf4>
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0001      	movs	r1, r0
 8000840:	04d2      	lsls	r2, r2, #19
 8000842:	4311      	orrs	r1, r2
 8000844:	468a      	mov	sl, r1
 8000846:	2201      	movs	r2, #1
 8000848:	2b1b      	cmp	r3, #27
 800084a:	dc08      	bgt.n	800085e <__aeabi_fadd+0x226>
 800084c:	4652      	mov	r2, sl
 800084e:	2120      	movs	r1, #32
 8000850:	4650      	mov	r0, sl
 8000852:	40da      	lsrs	r2, r3
 8000854:	1acb      	subs	r3, r1, r3
 8000856:	4098      	lsls	r0, r3
 8000858:	1e43      	subs	r3, r0, #1
 800085a:	4198      	sbcs	r0, r3
 800085c:	4302      	orrs	r2, r0
 800085e:	0037      	movs	r7, r6
 8000860:	1952      	adds	r2, r2, r5
 8000862:	e784      	b.n	800076e <__aeabi_fadd+0x136>
 8000864:	4a41      	ldr	r2, [pc, #260]	; (800096c <__aeabi_fadd+0x334>)
 8000866:	1a3f      	subs	r7, r7, r0
 8000868:	4032      	ands	r2, r6
 800086a:	e732      	b.n	80006d2 <__aeabi_fadd+0x9a>
 800086c:	4653      	mov	r3, sl
 800086e:	1b5e      	subs	r6, r3, r5
 8000870:	0173      	lsls	r3, r6, #5
 8000872:	d42d      	bmi.n	80008d0 <__aeabi_fadd+0x298>
 8000874:	2e00      	cmp	r6, #0
 8000876:	d000      	beq.n	800087a <__aeabi_fadd+0x242>
 8000878:	e717      	b.n	80006aa <__aeabi_fadd+0x72>
 800087a:	2200      	movs	r2, #0
 800087c:	2400      	movs	r4, #0
 800087e:	2300      	movs	r3, #0
 8000880:	4694      	mov	ip, r2
 8000882:	e738      	b.n	80006f6 <__aeabi_fadd+0xbe>
 8000884:	2eff      	cmp	r6, #255	; 0xff
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x252>
 8000888:	e74f      	b.n	800072a <__aeabi_fadd+0xf2>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	4650      	mov	r0, sl
 800088e:	04d2      	lsls	r2, r2, #19
 8000890:	4310      	orrs	r0, r2
 8000892:	4682      	mov	sl, r0
 8000894:	2201      	movs	r2, #1
 8000896:	2b1b      	cmp	r3, #27
 8000898:	dc08      	bgt.n	80008ac <__aeabi_fadd+0x274>
 800089a:	4652      	mov	r2, sl
 800089c:	2420      	movs	r4, #32
 800089e:	4650      	mov	r0, sl
 80008a0:	40da      	lsrs	r2, r3
 80008a2:	1ae3      	subs	r3, r4, r3
 80008a4:	4098      	lsls	r0, r3
 80008a6:	1e43      	subs	r3, r0, #1
 80008a8:	4198      	sbcs	r0, r3
 80008aa:	4302      	orrs	r2, r0
 80008ac:	000c      	movs	r4, r1
 80008ae:	0037      	movs	r7, r6
 80008b0:	1aaa      	subs	r2, r5, r2
 80008b2:	e6f5      	b.n	80006a0 <__aeabi_fadd+0x68>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d093      	beq.n	80007e0 <__aeabi_fadd+0x1a8>
 80008b8:	3b01      	subs	r3, #1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d04f      	beq.n	800095e <__aeabi_fadd+0x326>
 80008be:	2eff      	cmp	r6, #255	; 0xff
 80008c0:	d1c1      	bne.n	8000846 <__aeabi_fadd+0x20e>
 80008c2:	4642      	mov	r2, r8
 80008c4:	e733      	b.n	800072e <__aeabi_fadd+0xf6>
 80008c6:	2fff      	cmp	r7, #255	; 0xff
 80008c8:	d0ac      	beq.n	8000824 <__aeabi_fadd+0x1ec>
 80008ca:	4455      	add	r5, sl
 80008cc:	086a      	lsrs	r2, r5, #1
 80008ce:	e7a4      	b.n	800081a <__aeabi_fadd+0x1e2>
 80008d0:	4653      	mov	r3, sl
 80008d2:	000c      	movs	r4, r1
 80008d4:	1aee      	subs	r6, r5, r3
 80008d6:	e6e8      	b.n	80006aa <__aeabi_fadd+0x72>
 80008d8:	4653      	mov	r3, sl
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d128      	bne.n	8000930 <__aeabi_fadd+0x2f8>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fadd+0x2ac>
 80008e2:	e722      	b.n	800072a <__aeabi_fadd+0xf2>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	03db      	lsls	r3, r3, #15
 80008e8:	469c      	mov	ip, r3
 80008ea:	2400      	movs	r4, #0
 80008ec:	23ff      	movs	r3, #255	; 0xff
 80008ee:	e702      	b.n	80006f6 <__aeabi_fadd+0xbe>
 80008f0:	002a      	movs	r2, r5
 80008f2:	4452      	add	r2, sl
 80008f4:	e73b      	b.n	800076e <__aeabi_fadd+0x136>
 80008f6:	4653      	mov	r3, sl
 80008f8:	1b5a      	subs	r2, r3, r5
 80008fa:	e6d1      	b.n	80006a0 <__aeabi_fadd+0x68>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x2ca>
 8000900:	e714      	b.n	800072c <__aeabi_fadd+0xf4>
 8000902:	2d00      	cmp	r5, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x2d0>
 8000906:	e712      	b.n	800072e <__aeabi_fadd+0xf6>
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	03db      	lsls	r3, r3, #15
 800090c:	421a      	tst	r2, r3
 800090e:	d100      	bne.n	8000912 <__aeabi_fadd+0x2da>
 8000910:	e70d      	b.n	800072e <__aeabi_fadd+0xf6>
 8000912:	4641      	mov	r1, r8
 8000914:	4219      	tst	r1, r3
 8000916:	d000      	beq.n	800091a <__aeabi_fadd+0x2e2>
 8000918:	e709      	b.n	800072e <__aeabi_fadd+0xf6>
 800091a:	4642      	mov	r2, r8
 800091c:	e707      	b.n	800072e <__aeabi_fadd+0xf6>
 800091e:	000c      	movs	r4, r1
 8000920:	0037      	movs	r7, r6
 8000922:	1aaa      	subs	r2, r5, r2
 8000924:	e6bc      	b.n	80006a0 <__aeabi_fadd+0x68>
 8000926:	2d00      	cmp	r5, #0
 8000928:	d013      	beq.n	8000952 <__aeabi_fadd+0x31a>
 800092a:	000c      	movs	r4, r1
 800092c:	46c4      	mov	ip, r8
 800092e:	e6e2      	b.n	80006f6 <__aeabi_fadd+0xbe>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fadd+0x2fe>
 8000934:	e6fb      	b.n	800072e <__aeabi_fadd+0xf6>
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	03db      	lsls	r3, r3, #15
 800093a:	421a      	tst	r2, r3
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x308>
 800093e:	e6f6      	b.n	800072e <__aeabi_fadd+0xf6>
 8000940:	4640      	mov	r0, r8
 8000942:	4218      	tst	r0, r3
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x310>
 8000946:	e6f2      	b.n	800072e <__aeabi_fadd+0xf6>
 8000948:	000c      	movs	r4, r1
 800094a:	e6ef      	b.n	800072c <__aeabi_fadd+0xf4>
 800094c:	2a00      	cmp	r2, #0
 800094e:	d000      	beq.n	8000952 <__aeabi_fadd+0x31a>
 8000950:	e763      	b.n	800081a <__aeabi_fadd+0x1e2>
 8000952:	2200      	movs	r2, #0
 8000954:	2400      	movs	r4, #0
 8000956:	4694      	mov	ip, r2
 8000958:	e6cd      	b.n	80006f6 <__aeabi_fadd+0xbe>
 800095a:	46c4      	mov	ip, r8
 800095c:	e6cb      	b.n	80006f6 <__aeabi_fadd+0xbe>
 800095e:	002a      	movs	r2, r5
 8000960:	0037      	movs	r7, r6
 8000962:	4452      	add	r2, sl
 8000964:	e703      	b.n	800076e <__aeabi_fadd+0x136>
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	7dffffff 	.word	0x7dffffff
 800096c:	fbffffff 	.word	0xfbffffff

08000970 <__aeabi_fdiv>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	464f      	mov	r7, r9
 8000974:	4646      	mov	r6, r8
 8000976:	46d6      	mov	lr, sl
 8000978:	0245      	lsls	r5, r0, #9
 800097a:	b5c0      	push	{r6, r7, lr}
 800097c:	0047      	lsls	r7, r0, #1
 800097e:	1c0c      	adds	r4, r1, #0
 8000980:	0a6d      	lsrs	r5, r5, #9
 8000982:	0e3f      	lsrs	r7, r7, #24
 8000984:	0fc6      	lsrs	r6, r0, #31
 8000986:	2f00      	cmp	r7, #0
 8000988:	d066      	beq.n	8000a58 <__aeabi_fdiv+0xe8>
 800098a:	2fff      	cmp	r7, #255	; 0xff
 800098c:	d06c      	beq.n	8000a68 <__aeabi_fdiv+0xf8>
 800098e:	2300      	movs	r3, #0
 8000990:	00ea      	lsls	r2, r5, #3
 8000992:	2580      	movs	r5, #128	; 0x80
 8000994:	4699      	mov	r9, r3
 8000996:	469a      	mov	sl, r3
 8000998:	04ed      	lsls	r5, r5, #19
 800099a:	4315      	orrs	r5, r2
 800099c:	3f7f      	subs	r7, #127	; 0x7f
 800099e:	0260      	lsls	r0, r4, #9
 80009a0:	0061      	lsls	r1, r4, #1
 80009a2:	0a43      	lsrs	r3, r0, #9
 80009a4:	4698      	mov	r8, r3
 80009a6:	0e09      	lsrs	r1, r1, #24
 80009a8:	0fe4      	lsrs	r4, r4, #31
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d048      	beq.n	8000a40 <__aeabi_fdiv+0xd0>
 80009ae:	29ff      	cmp	r1, #255	; 0xff
 80009b0:	d010      	beq.n	80009d4 <__aeabi_fdiv+0x64>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	00d8      	lsls	r0, r3, #3
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	4302      	orrs	r2, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	397f      	subs	r1, #127	; 0x7f
 80009c0:	464a      	mov	r2, r9
 80009c2:	0033      	movs	r3, r6
 80009c4:	1a7f      	subs	r7, r7, r1
 80009c6:	4302      	orrs	r2, r0
 80009c8:	496c      	ldr	r1, [pc, #432]	; (8000b7c <__aeabi_fdiv+0x20c>)
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	588a      	ldr	r2, [r1, r2]
 80009ce:	4063      	eors	r3, r4
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4697      	mov	pc, r2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d16d      	bne.n	8000ab4 <__aeabi_fdiv+0x144>
 80009d8:	2002      	movs	r0, #2
 80009da:	3fff      	subs	r7, #255	; 0xff
 80009dc:	e033      	b.n	8000a46 <__aeabi_fdiv+0xd6>
 80009de:	2300      	movs	r3, #0
 80009e0:	4698      	mov	r8, r3
 80009e2:	0026      	movs	r6, r4
 80009e4:	4645      	mov	r5, r8
 80009e6:	4682      	mov	sl, r0
 80009e8:	4653      	mov	r3, sl
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fdiv+0x80>
 80009ee:	e07f      	b.n	8000af0 <__aeabi_fdiv+0x180>
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fdiv+0x86>
 80009f4:	e094      	b.n	8000b20 <__aeabi_fdiv+0x1b0>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d017      	beq.n	8000a2a <__aeabi_fdiv+0xba>
 80009fa:	0038      	movs	r0, r7
 80009fc:	307f      	adds	r0, #127	; 0x7f
 80009fe:	2800      	cmp	r0, #0
 8000a00:	dd5f      	ble.n	8000ac2 <__aeabi_fdiv+0x152>
 8000a02:	076b      	lsls	r3, r5, #29
 8000a04:	d004      	beq.n	8000a10 <__aeabi_fdiv+0xa0>
 8000a06:	230f      	movs	r3, #15
 8000a08:	402b      	ands	r3, r5
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fdiv+0xa0>
 8000a0e:	3504      	adds	r5, #4
 8000a10:	012b      	lsls	r3, r5, #4
 8000a12:	d503      	bpl.n	8000a1c <__aeabi_fdiv+0xac>
 8000a14:	0038      	movs	r0, r7
 8000a16:	4b5a      	ldr	r3, [pc, #360]	; (8000b80 <__aeabi_fdiv+0x210>)
 8000a18:	3080      	adds	r0, #128	; 0x80
 8000a1a:	401d      	ands	r5, r3
 8000a1c:	28fe      	cmp	r0, #254	; 0xfe
 8000a1e:	dc67      	bgt.n	8000af0 <__aeabi_fdiv+0x180>
 8000a20:	01ad      	lsls	r5, r5, #6
 8000a22:	0a6d      	lsrs	r5, r5, #9
 8000a24:	b2c0      	uxtb	r0, r0
 8000a26:	e002      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000a28:	001e      	movs	r6, r3
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	05c0      	lsls	r0, r0, #23
 8000a30:	4328      	orrs	r0, r5
 8000a32:	07f6      	lsls	r6, r6, #31
 8000a34:	4330      	orrs	r0, r6
 8000a36:	bce0      	pop	{r5, r6, r7}
 8000a38:	46ba      	mov	sl, r7
 8000a3a:	46b1      	mov	r9, r6
 8000a3c:	46a8      	mov	r8, r5
 8000a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d12b      	bne.n	8000a9c <__aeabi_fdiv+0x12c>
 8000a44:	2001      	movs	r0, #1
 8000a46:	464a      	mov	r2, r9
 8000a48:	0033      	movs	r3, r6
 8000a4a:	494e      	ldr	r1, [pc, #312]	; (8000b84 <__aeabi_fdiv+0x214>)
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	588a      	ldr	r2, [r1, r2]
 8000a52:	4063      	eors	r3, r4
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4697      	mov	pc, r2
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d113      	bne.n	8000a84 <__aeabi_fdiv+0x114>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	4699      	mov	r9, r3
 8000a60:	3b03      	subs	r3, #3
 8000a62:	2700      	movs	r7, #0
 8000a64:	469a      	mov	sl, r3
 8000a66:	e79a      	b.n	800099e <__aeabi_fdiv+0x2e>
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_fdiv+0x108>
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	4699      	mov	r9, r3
 8000a70:	3b06      	subs	r3, #6
 8000a72:	27ff      	movs	r7, #255	; 0xff
 8000a74:	469a      	mov	sl, r3
 8000a76:	e792      	b.n	800099e <__aeabi_fdiv+0x2e>
 8000a78:	230c      	movs	r3, #12
 8000a7a:	4699      	mov	r9, r3
 8000a7c:	3b09      	subs	r3, #9
 8000a7e:	27ff      	movs	r7, #255	; 0xff
 8000a80:	469a      	mov	sl, r3
 8000a82:	e78c      	b.n	800099e <__aeabi_fdiv+0x2e>
 8000a84:	0028      	movs	r0, r5
 8000a86:	f002 fba9 	bl	80031dc <__clzsi2>
 8000a8a:	2776      	movs	r7, #118	; 0x76
 8000a8c:	1f43      	subs	r3, r0, #5
 8000a8e:	409d      	lsls	r5, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	427f      	negs	r7, r7
 8000a94:	4699      	mov	r9, r3
 8000a96:	469a      	mov	sl, r3
 8000a98:	1a3f      	subs	r7, r7, r0
 8000a9a:	e780      	b.n	800099e <__aeabi_fdiv+0x2e>
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fb9d 	bl	80031dc <__clzsi2>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	1f43      	subs	r3, r0, #5
 8000aa6:	2176      	movs	r1, #118	; 0x76
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	4249      	negs	r1, r1
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	4690      	mov	r8, r2
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	e785      	b.n	80009c0 <__aeabi_fdiv+0x50>
 8000ab4:	21ff      	movs	r1, #255	; 0xff
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	e782      	b.n	80009c0 <__aeabi_fdiv+0x50>
 8000aba:	001e      	movs	r6, r3
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	2500      	movs	r5, #0
 8000ac0:	e7b5      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	2b1b      	cmp	r3, #27
 8000ac8:	dcaf      	bgt.n	8000a2a <__aeabi_fdiv+0xba>
 8000aca:	379e      	adds	r7, #158	; 0x9e
 8000acc:	0029      	movs	r1, r5
 8000ace:	40bd      	lsls	r5, r7
 8000ad0:	40d9      	lsrs	r1, r3
 8000ad2:	1e6a      	subs	r2, r5, #1
 8000ad4:	4195      	sbcs	r5, r2
 8000ad6:	430d      	orrs	r5, r1
 8000ad8:	076b      	lsls	r3, r5, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fdiv+0x176>
 8000adc:	230f      	movs	r3, #15
 8000ade:	402b      	ands	r3, r5
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fdiv+0x176>
 8000ae4:	3504      	adds	r5, #4
 8000ae6:	016b      	lsls	r3, r5, #5
 8000ae8:	d544      	bpl.n	8000b74 <__aeabi_fdiv+0x204>
 8000aea:	2001      	movs	r0, #1
 8000aec:	2500      	movs	r5, #0
 8000aee:	e79e      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000af0:	20ff      	movs	r0, #255	; 0xff
 8000af2:	2500      	movs	r5, #0
 8000af4:	e79b      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000af6:	2580      	movs	r5, #128	; 0x80
 8000af8:	2600      	movs	r6, #0
 8000afa:	20ff      	movs	r0, #255	; 0xff
 8000afc:	03ed      	lsls	r5, r5, #15
 8000afe:	e796      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000b00:	2300      	movs	r3, #0
 8000b02:	4698      	mov	r8, r3
 8000b04:	2080      	movs	r0, #128	; 0x80
 8000b06:	03c0      	lsls	r0, r0, #15
 8000b08:	4205      	tst	r5, r0
 8000b0a:	d009      	beq.n	8000b20 <__aeabi_fdiv+0x1b0>
 8000b0c:	4643      	mov	r3, r8
 8000b0e:	4203      	tst	r3, r0
 8000b10:	d106      	bne.n	8000b20 <__aeabi_fdiv+0x1b0>
 8000b12:	4645      	mov	r5, r8
 8000b14:	4305      	orrs	r5, r0
 8000b16:	026d      	lsls	r5, r5, #9
 8000b18:	0026      	movs	r6, r4
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	e786      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000b20:	2080      	movs	r0, #128	; 0x80
 8000b22:	03c0      	lsls	r0, r0, #15
 8000b24:	4305      	orrs	r5, r0
 8000b26:	026d      	lsls	r5, r5, #9
 8000b28:	20ff      	movs	r0, #255	; 0xff
 8000b2a:	0a6d      	lsrs	r5, r5, #9
 8000b2c:	e77f      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000b2e:	4641      	mov	r1, r8
 8000b30:	016a      	lsls	r2, r5, #5
 8000b32:	0148      	lsls	r0, r1, #5
 8000b34:	4282      	cmp	r2, r0
 8000b36:	d219      	bcs.n	8000b6c <__aeabi_fdiv+0x1fc>
 8000b38:	211b      	movs	r1, #27
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	3f01      	subs	r7, #1
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0014      	movs	r4, r2
 8000b42:	006d      	lsls	r5, r5, #1
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	db01      	blt.n	8000b4e <__aeabi_fdiv+0x1de>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d801      	bhi.n	8000b52 <__aeabi_fdiv+0x1e2>
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	4335      	orrs	r5, r6
 8000b52:	3901      	subs	r1, #1
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_fdiv+0x1d0>
 8000b58:	1e50      	subs	r0, r2, #1
 8000b5a:	4182      	sbcs	r2, r0
 8000b5c:	0038      	movs	r0, r7
 8000b5e:	307f      	adds	r0, #127	; 0x7f
 8000b60:	001e      	movs	r6, r3
 8000b62:	4315      	orrs	r5, r2
 8000b64:	2800      	cmp	r0, #0
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_fdiv+0x1fa>
 8000b68:	e74b      	b.n	8000a02 <__aeabi_fdiv+0x92>
 8000b6a:	e7aa      	b.n	8000ac2 <__aeabi_fdiv+0x152>
 8000b6c:	211a      	movs	r1, #26
 8000b6e:	2501      	movs	r5, #1
 8000b70:	1a12      	subs	r2, r2, r0
 8000b72:	e7e4      	b.n	8000b3e <__aeabi_fdiv+0x1ce>
 8000b74:	01ad      	lsls	r5, r5, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	0a6d      	lsrs	r5, r5, #9
 8000b7a:	e758      	b.n	8000a2e <__aeabi_fdiv+0xbe>
 8000b7c:	080162e4 	.word	0x080162e4
 8000b80:	f7ffffff 	.word	0xf7ffffff
 8000b84:	08016324 	.word	0x08016324

08000b88 <__eqsf2>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	0042      	lsls	r2, r0, #1
 8000b8c:	024e      	lsls	r6, r1, #9
 8000b8e:	004c      	lsls	r4, r1, #1
 8000b90:	0245      	lsls	r5, r0, #9
 8000b92:	0a6d      	lsrs	r5, r5, #9
 8000b94:	0e12      	lsrs	r2, r2, #24
 8000b96:	0fc3      	lsrs	r3, r0, #31
 8000b98:	0a76      	lsrs	r6, r6, #9
 8000b9a:	0e24      	lsrs	r4, r4, #24
 8000b9c:	0fc9      	lsrs	r1, r1, #31
 8000b9e:	2aff      	cmp	r2, #255	; 0xff
 8000ba0:	d00f      	beq.n	8000bc2 <__eqsf2+0x3a>
 8000ba2:	2cff      	cmp	r4, #255	; 0xff
 8000ba4:	d011      	beq.n	8000bca <__eqsf2+0x42>
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	d000      	beq.n	8000bae <__eqsf2+0x26>
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	42b5      	cmp	r5, r6
 8000bb0:	d1fc      	bne.n	8000bac <__eqsf2+0x24>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d00d      	beq.n	8000bd2 <__eqsf2+0x4a>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d1f8      	bne.n	8000bac <__eqsf2+0x24>
 8000bba:	0028      	movs	r0, r5
 8000bbc:	1e45      	subs	r5, r0, #1
 8000bbe:	41a8      	sbcs	r0, r5
 8000bc0:	e7f4      	b.n	8000bac <__eqsf2+0x24>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d1f1      	bne.n	8000bac <__eqsf2+0x24>
 8000bc8:	e7eb      	b.n	8000ba2 <__eqsf2+0x1a>
 8000bca:	2001      	movs	r0, #1
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d1ed      	bne.n	8000bac <__eqsf2+0x24>
 8000bd0:	e7e9      	b.n	8000ba6 <__eqsf2+0x1e>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e7ea      	b.n	8000bac <__eqsf2+0x24>
 8000bd6:	46c0      	nop			; (mov r8, r8)

08000bd8 <__gesf2>:
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0246      	lsls	r6, r0, #9
 8000bde:	024d      	lsls	r5, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a76      	lsrs	r6, r6, #9
 8000be6:	0e12      	lsrs	r2, r2, #24
 8000be8:	0a6d      	lsrs	r5, r5, #9
 8000bea:	0e24      	lsrs	r4, r4, #24
 8000bec:	0fc8      	lsrs	r0, r1, #31
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d01f      	beq.n	8000c32 <__gesf2+0x5a>
 8000bf2:	2cff      	cmp	r4, #255	; 0xff
 8000bf4:	d010      	beq.n	8000c18 <__gesf2+0x40>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d11f      	bne.n	8000c3a <__gesf2+0x62>
 8000bfa:	4271      	negs	r1, r6
 8000bfc:	4171      	adcs	r1, r6
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d101      	bne.n	8000c06 <__gesf2+0x2e>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d01e      	beq.n	8000c44 <__gesf2+0x6c>
 8000c06:	2900      	cmp	r1, #0
 8000c08:	d10e      	bne.n	8000c28 <__gesf2+0x50>
 8000c0a:	4283      	cmp	r3, r0
 8000c0c:	d01e      	beq.n	8000c4c <__gesf2+0x74>
 8000c0e:	2102      	movs	r1, #2
 8000c10:	1e58      	subs	r0, r3, #1
 8000c12:	4008      	ands	r0, r1
 8000c14:	3801      	subs	r0, #1
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d126      	bne.n	8000c6a <__gesf2+0x92>
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d1f4      	bne.n	8000c0a <__gesf2+0x32>
 8000c20:	4271      	negs	r1, r6
 8000c22:	4171      	adcs	r1, r6
 8000c24:	2900      	cmp	r1, #0
 8000c26:	d0f0      	beq.n	8000c0a <__gesf2+0x32>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d1f4      	bne.n	8000c16 <__gesf2+0x3e>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	4240      	negs	r0, r0
 8000c30:	e7f1      	b.n	8000c16 <__gesf2+0x3e>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d119      	bne.n	8000c6a <__gesf2+0x92>
 8000c36:	2cff      	cmp	r4, #255	; 0xff
 8000c38:	d0ee      	beq.n	8000c18 <__gesf2+0x40>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d1e5      	bne.n	8000c0a <__gesf2+0x32>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d1e3      	bne.n	8000c0a <__gesf2+0x32>
 8000c42:	e7e4      	b.n	8000c0e <__gesf2+0x36>
 8000c44:	2000      	movs	r0, #0
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e5      	beq.n	8000c16 <__gesf2+0x3e>
 8000c4a:	e7e0      	b.n	8000c0e <__gesf2+0x36>
 8000c4c:	42a2      	cmp	r2, r4
 8000c4e:	dc05      	bgt.n	8000c5c <__gesf2+0x84>
 8000c50:	dbea      	blt.n	8000c28 <__gesf2+0x50>
 8000c52:	42ae      	cmp	r6, r5
 8000c54:	d802      	bhi.n	8000c5c <__gesf2+0x84>
 8000c56:	d3e7      	bcc.n	8000c28 <__gesf2+0x50>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e7dc      	b.n	8000c16 <__gesf2+0x3e>
 8000c5c:	4241      	negs	r1, r0
 8000c5e:	4141      	adcs	r1, r0
 8000c60:	4248      	negs	r0, r1
 8000c62:	2102      	movs	r1, #2
 8000c64:	4008      	ands	r0, r1
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7d5      	b.n	8000c16 <__gesf2+0x3e>
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	4240      	negs	r0, r0
 8000c6e:	e7d2      	b.n	8000c16 <__gesf2+0x3e>

08000c70 <__lesf2>:
 8000c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c72:	0042      	lsls	r2, r0, #1
 8000c74:	0246      	lsls	r6, r0, #9
 8000c76:	024d      	lsls	r5, r1, #9
 8000c78:	004c      	lsls	r4, r1, #1
 8000c7a:	0fc3      	lsrs	r3, r0, #31
 8000c7c:	0a76      	lsrs	r6, r6, #9
 8000c7e:	0e12      	lsrs	r2, r2, #24
 8000c80:	0a6d      	lsrs	r5, r5, #9
 8000c82:	0e24      	lsrs	r4, r4, #24
 8000c84:	0fc8      	lsrs	r0, r1, #31
 8000c86:	2aff      	cmp	r2, #255	; 0xff
 8000c88:	d00d      	beq.n	8000ca6 <__lesf2+0x36>
 8000c8a:	2cff      	cmp	r4, #255	; 0xff
 8000c8c:	d00f      	beq.n	8000cae <__lesf2+0x3e>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	d123      	bne.n	8000cda <__lesf2+0x6a>
 8000c92:	4271      	negs	r1, r6
 8000c94:	4171      	adcs	r1, r6
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d10f      	bne.n	8000cba <__lesf2+0x4a>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d10d      	bne.n	8000cba <__lesf2+0x4a>
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d014      	beq.n	8000cce <__lesf2+0x5e>
 8000ca4:	e00d      	b.n	8000cc2 <__lesf2+0x52>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d110      	bne.n	8000ccc <__lesf2+0x5c>
 8000caa:	2cff      	cmp	r4, #255	; 0xff
 8000cac:	d115      	bne.n	8000cda <__lesf2+0x6a>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d10c      	bne.n	8000ccc <__lesf2+0x5c>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d103      	bne.n	8000cbe <__lesf2+0x4e>
 8000cb6:	4271      	negs	r1, r6
 8000cb8:	4171      	adcs	r1, r6
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d108      	bne.n	8000cd0 <__lesf2+0x60>
 8000cbe:	4283      	cmp	r3, r0
 8000cc0:	d010      	beq.n	8000ce4 <__lesf2+0x74>
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	1e58      	subs	r0, r3, #1
 8000cc6:	4008      	ands	r0, r1
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e000      	b.n	8000cce <__lesf2+0x5e>
 8000ccc:	2002      	movs	r0, #2
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d1fc      	bne.n	8000cce <__lesf2+0x5e>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	e7f9      	b.n	8000cce <__lesf2+0x5e>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d1ef      	bne.n	8000cbe <__lesf2+0x4e>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d1ed      	bne.n	8000cbe <__lesf2+0x4e>
 8000ce2:	e7ee      	b.n	8000cc2 <__lesf2+0x52>
 8000ce4:	42a2      	cmp	r2, r4
 8000ce6:	dc05      	bgt.n	8000cf4 <__lesf2+0x84>
 8000ce8:	dbf2      	blt.n	8000cd0 <__lesf2+0x60>
 8000cea:	42ae      	cmp	r6, r5
 8000cec:	d802      	bhi.n	8000cf4 <__lesf2+0x84>
 8000cee:	d3ef      	bcc.n	8000cd0 <__lesf2+0x60>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7ec      	b.n	8000cce <__lesf2+0x5e>
 8000cf4:	4241      	negs	r1, r0
 8000cf6:	4141      	adcs	r1, r0
 8000cf8:	4248      	negs	r0, r1
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	4008      	ands	r0, r1
 8000cfe:	3801      	subs	r0, #1
 8000d00:	e7e5      	b.n	8000cce <__lesf2+0x5e>
 8000d02:	46c0      	nop			; (mov r8, r8)

08000d04 <__aeabi_fmul>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4657      	mov	r7, sl
 8000d08:	464e      	mov	r6, r9
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	46de      	mov	lr, fp
 8000d0e:	0244      	lsls	r4, r0, #9
 8000d10:	b5e0      	push	{r5, r6, r7, lr}
 8000d12:	0045      	lsls	r5, r0, #1
 8000d14:	1c0f      	adds	r7, r1, #0
 8000d16:	0a64      	lsrs	r4, r4, #9
 8000d18:	0e2d      	lsrs	r5, r5, #24
 8000d1a:	0fc6      	lsrs	r6, r0, #31
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d047      	beq.n	8000db0 <__aeabi_fmul+0xac>
 8000d20:	2dff      	cmp	r5, #255	; 0xff
 8000d22:	d04d      	beq.n	8000dc0 <__aeabi_fmul+0xbc>
 8000d24:	2300      	movs	r3, #0
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	469a      	mov	sl, r3
 8000d2a:	469b      	mov	fp, r3
 8000d2c:	00e4      	lsls	r4, r4, #3
 8000d2e:	04c0      	lsls	r0, r0, #19
 8000d30:	4304      	orrs	r4, r0
 8000d32:	3d7f      	subs	r5, #127	; 0x7f
 8000d34:	0278      	lsls	r0, r7, #9
 8000d36:	0a43      	lsrs	r3, r0, #9
 8000d38:	4699      	mov	r9, r3
 8000d3a:	007a      	lsls	r2, r7, #1
 8000d3c:	0ffb      	lsrs	r3, r7, #31
 8000d3e:	4698      	mov	r8, r3
 8000d40:	0e12      	lsrs	r2, r2, #24
 8000d42:	464b      	mov	r3, r9
 8000d44:	d044      	beq.n	8000dd0 <__aeabi_fmul+0xcc>
 8000d46:	2aff      	cmp	r2, #255	; 0xff
 8000d48:	d011      	beq.n	8000d6e <__aeabi_fmul+0x6a>
 8000d4a:	00d8      	lsls	r0, r3, #3
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	04db      	lsls	r3, r3, #19
 8000d50:	4303      	orrs	r3, r0
 8000d52:	4699      	mov	r9, r3
 8000d54:	2000      	movs	r0, #0
 8000d56:	3a7f      	subs	r2, #127	; 0x7f
 8000d58:	18ad      	adds	r5, r5, r2
 8000d5a:	4647      	mov	r7, r8
 8000d5c:	4653      	mov	r3, sl
 8000d5e:	4077      	eors	r7, r6
 8000d60:	1c69      	adds	r1, r5, #1
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d83f      	bhi.n	8000de6 <__aeabi_fmul+0xe2>
 8000d66:	4a72      	ldr	r2, [pc, #456]	; (8000f30 <__aeabi_fmul+0x22c>)
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	58d3      	ldr	r3, [r2, r3]
 8000d6c:	469f      	mov	pc, r3
 8000d6e:	35ff      	adds	r5, #255	; 0xff
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d000      	beq.n	8000d76 <__aeabi_fmul+0x72>
 8000d74:	e079      	b.n	8000e6a <__aeabi_fmul+0x166>
 8000d76:	4652      	mov	r2, sl
 8000d78:	2302      	movs	r3, #2
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	2002      	movs	r0, #2
 8000d80:	e7eb      	b.n	8000d5a <__aeabi_fmul+0x56>
 8000d82:	4647      	mov	r7, r8
 8000d84:	464c      	mov	r4, r9
 8000d86:	4683      	mov	fp, r0
 8000d88:	465b      	mov	r3, fp
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d028      	beq.n	8000de0 <__aeabi_fmul+0xdc>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_fmul+0x90>
 8000d92:	e0c6      	b.n	8000f22 <__aeabi_fmul+0x21e>
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d14f      	bne.n	8000e38 <__aeabi_fmul+0x134>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	05c0      	lsls	r0, r0, #23
 8000d9e:	07ff      	lsls	r7, r7, #31
 8000da0:	4320      	orrs	r0, r4
 8000da2:	4338      	orrs	r0, r7
 8000da4:	bcf0      	pop	{r4, r5, r6, r7}
 8000da6:	46bb      	mov	fp, r7
 8000da8:	46b2      	mov	sl, r6
 8000daa:	46a9      	mov	r9, r5
 8000dac:	46a0      	mov	r8, r4
 8000dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d171      	bne.n	8000e98 <__aeabi_fmul+0x194>
 8000db4:	2304      	movs	r3, #4
 8000db6:	469a      	mov	sl, r3
 8000db8:	3b03      	subs	r3, #3
 8000dba:	2500      	movs	r5, #0
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e7b9      	b.n	8000d34 <__aeabi_fmul+0x30>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d163      	bne.n	8000e8c <__aeabi_fmul+0x188>
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	469a      	mov	sl, r3
 8000dc8:	3b06      	subs	r3, #6
 8000dca:	25ff      	movs	r5, #255	; 0xff
 8000dcc:	469b      	mov	fp, r3
 8000dce:	e7b1      	b.n	8000d34 <__aeabi_fmul+0x30>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d150      	bne.n	8000e76 <__aeabi_fmul+0x172>
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	4692      	mov	sl, r2
 8000ddc:	2001      	movs	r0, #1
 8000dde:	e7bc      	b.n	8000d5a <__aeabi_fmul+0x56>
 8000de0:	20ff      	movs	r0, #255	; 0xff
 8000de2:	2400      	movs	r4, #0
 8000de4:	e7da      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000de6:	4648      	mov	r0, r9
 8000de8:	0c26      	lsrs	r6, r4, #16
 8000dea:	0424      	lsls	r4, r4, #16
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	0404      	lsls	r4, r0, #16
 8000df0:	0c24      	lsrs	r4, r4, #16
 8000df2:	464b      	mov	r3, r9
 8000df4:	0020      	movs	r0, r4
 8000df6:	0c1b      	lsrs	r3, r3, #16
 8000df8:	4350      	muls	r0, r2
 8000dfa:	4374      	muls	r4, r6
 8000dfc:	435a      	muls	r2, r3
 8000dfe:	435e      	muls	r6, r3
 8000e00:	1912      	adds	r2, r2, r4
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	189b      	adds	r3, r3, r2
 8000e06:	429c      	cmp	r4, r3
 8000e08:	d903      	bls.n	8000e12 <__aeabi_fmul+0x10e>
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0252      	lsls	r2, r2, #9
 8000e0e:	4694      	mov	ip, r2
 8000e10:	4466      	add	r6, ip
 8000e12:	0400      	lsls	r0, r0, #16
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	0c00      	lsrs	r0, r0, #16
 8000e18:	1812      	adds	r2, r2, r0
 8000e1a:	0194      	lsls	r4, r2, #6
 8000e1c:	1e60      	subs	r0, r4, #1
 8000e1e:	4184      	sbcs	r4, r0
 8000e20:	0c1b      	lsrs	r3, r3, #16
 8000e22:	0e92      	lsrs	r2, r2, #26
 8000e24:	199b      	adds	r3, r3, r6
 8000e26:	4314      	orrs	r4, r2
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	d572      	bpl.n	8000f16 <__aeabi_fmul+0x212>
 8000e30:	2001      	movs	r0, #1
 8000e32:	0863      	lsrs	r3, r4, #1
 8000e34:	4004      	ands	r4, r0
 8000e36:	431c      	orrs	r4, r3
 8000e38:	0008      	movs	r0, r1
 8000e3a:	307f      	adds	r0, #127	; 0x7f
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	dd3c      	ble.n	8000eba <__aeabi_fmul+0x1b6>
 8000e40:	0763      	lsls	r3, r4, #29
 8000e42:	d004      	beq.n	8000e4e <__aeabi_fmul+0x14a>
 8000e44:	230f      	movs	r3, #15
 8000e46:	4023      	ands	r3, r4
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_fmul+0x14a>
 8000e4c:	3404      	adds	r4, #4
 8000e4e:	0123      	lsls	r3, r4, #4
 8000e50:	d503      	bpl.n	8000e5a <__aeabi_fmul+0x156>
 8000e52:	3180      	adds	r1, #128	; 0x80
 8000e54:	0008      	movs	r0, r1
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <__aeabi_fmul+0x230>)
 8000e58:	401c      	ands	r4, r3
 8000e5a:	28fe      	cmp	r0, #254	; 0xfe
 8000e5c:	dcc0      	bgt.n	8000de0 <__aeabi_fmul+0xdc>
 8000e5e:	01a4      	lsls	r4, r4, #6
 8000e60:	0a64      	lsrs	r4, r4, #9
 8000e62:	b2c0      	uxtb	r0, r0
 8000e64:	e79a      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000e66:	0037      	movs	r7, r6
 8000e68:	e78e      	b.n	8000d88 <__aeabi_fmul+0x84>
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	4692      	mov	sl, r2
 8000e72:	2003      	movs	r0, #3
 8000e74:	e771      	b.n	8000d5a <__aeabi_fmul+0x56>
 8000e76:	4648      	mov	r0, r9
 8000e78:	f002 f9b0 	bl	80031dc <__clzsi2>
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	1f43      	subs	r3, r0, #5
 8000e80:	409a      	lsls	r2, r3
 8000e82:	1a2d      	subs	r5, r5, r0
 8000e84:	4691      	mov	r9, r2
 8000e86:	2000      	movs	r0, #0
 8000e88:	3d76      	subs	r5, #118	; 0x76
 8000e8a:	e766      	b.n	8000d5a <__aeabi_fmul+0x56>
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	469a      	mov	sl, r3
 8000e90:	3b09      	subs	r3, #9
 8000e92:	25ff      	movs	r5, #255	; 0xff
 8000e94:	469b      	mov	fp, r3
 8000e96:	e74d      	b.n	8000d34 <__aeabi_fmul+0x30>
 8000e98:	0020      	movs	r0, r4
 8000e9a:	f002 f99f 	bl	80031dc <__clzsi2>
 8000e9e:	2576      	movs	r5, #118	; 0x76
 8000ea0:	1f43      	subs	r3, r0, #5
 8000ea2:	409c      	lsls	r4, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	426d      	negs	r5, r5
 8000ea8:	469a      	mov	sl, r3
 8000eaa:	469b      	mov	fp, r3
 8000eac:	1a2d      	subs	r5, r5, r0
 8000eae:	e741      	b.n	8000d34 <__aeabi_fmul+0x30>
 8000eb0:	2480      	movs	r4, #128	; 0x80
 8000eb2:	2700      	movs	r7, #0
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	03e4      	lsls	r4, r4, #15
 8000eb8:	e770      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	1a1b      	subs	r3, r3, r0
 8000ebe:	2b1b      	cmp	r3, #27
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_fmul+0x1c0>
 8000ec2:	e769      	b.n	8000d98 <__aeabi_fmul+0x94>
 8000ec4:	319e      	adds	r1, #158	; 0x9e
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	408c      	lsls	r4, r1
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	1e63      	subs	r3, r4, #1
 8000ece:	419c      	sbcs	r4, r3
 8000ed0:	4304      	orrs	r4, r0
 8000ed2:	0763      	lsls	r3, r4, #29
 8000ed4:	d004      	beq.n	8000ee0 <__aeabi_fmul+0x1dc>
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	4023      	ands	r3, r4
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fmul+0x1dc>
 8000ede:	3404      	adds	r4, #4
 8000ee0:	0163      	lsls	r3, r4, #5
 8000ee2:	d51a      	bpl.n	8000f1a <__aeabi_fmul+0x216>
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	e758      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000eea:	2080      	movs	r0, #128	; 0x80
 8000eec:	03c0      	lsls	r0, r0, #15
 8000eee:	4204      	tst	r4, r0
 8000ef0:	d009      	beq.n	8000f06 <__aeabi_fmul+0x202>
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	4203      	tst	r3, r0
 8000ef6:	d106      	bne.n	8000f06 <__aeabi_fmul+0x202>
 8000ef8:	464c      	mov	r4, r9
 8000efa:	4304      	orrs	r4, r0
 8000efc:	0264      	lsls	r4, r4, #9
 8000efe:	4647      	mov	r7, r8
 8000f00:	20ff      	movs	r0, #255	; 0xff
 8000f02:	0a64      	lsrs	r4, r4, #9
 8000f04:	e74a      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000f06:	2080      	movs	r0, #128	; 0x80
 8000f08:	03c0      	lsls	r0, r0, #15
 8000f0a:	4304      	orrs	r4, r0
 8000f0c:	0264      	lsls	r4, r4, #9
 8000f0e:	0037      	movs	r7, r6
 8000f10:	20ff      	movs	r0, #255	; 0xff
 8000f12:	0a64      	lsrs	r4, r4, #9
 8000f14:	e742      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000f16:	0029      	movs	r1, r5
 8000f18:	e78e      	b.n	8000e38 <__aeabi_fmul+0x134>
 8000f1a:	01a4      	lsls	r4, r4, #6
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	e73c      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000f22:	2080      	movs	r0, #128	; 0x80
 8000f24:	03c0      	lsls	r0, r0, #15
 8000f26:	4304      	orrs	r4, r0
 8000f28:	0264      	lsls	r4, r4, #9
 8000f2a:	20ff      	movs	r0, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	e735      	b.n	8000d9c <__aeabi_fmul+0x98>
 8000f30:	08016364 	.word	0x08016364
 8000f34:	f7ffffff 	.word	0xf7ffffff

08000f38 <__aeabi_fsub>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	4646      	mov	r6, r8
 8000f3c:	46d6      	mov	lr, sl
 8000f3e:	464f      	mov	r7, r9
 8000f40:	0243      	lsls	r3, r0, #9
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	00da      	lsls	r2, r3, #3
 8000f46:	4694      	mov	ip, r2
 8000f48:	024a      	lsls	r2, r1, #9
 8000f4a:	b5c0      	push	{r6, r7, lr}
 8000f4c:	0044      	lsls	r4, r0, #1
 8000f4e:	0a56      	lsrs	r6, r2, #9
 8000f50:	1c05      	adds	r5, r0, #0
 8000f52:	46b0      	mov	r8, r6
 8000f54:	0e24      	lsrs	r4, r4, #24
 8000f56:	004e      	lsls	r6, r1, #1
 8000f58:	0992      	lsrs	r2, r2, #6
 8000f5a:	001f      	movs	r7, r3
 8000f5c:	0020      	movs	r0, r4
 8000f5e:	4692      	mov	sl, r2
 8000f60:	0fed      	lsrs	r5, r5, #31
 8000f62:	0e36      	lsrs	r6, r6, #24
 8000f64:	0fc9      	lsrs	r1, r1, #31
 8000f66:	2eff      	cmp	r6, #255	; 0xff
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x34>
 8000f6a:	e07f      	b.n	800106c <__aeabi_fsub+0x134>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4051      	eors	r1, r2
 8000f70:	428d      	cmp	r5, r1
 8000f72:	d051      	beq.n	8001018 <__aeabi_fsub+0xe0>
 8000f74:	1ba2      	subs	r2, r4, r6
 8000f76:	4691      	mov	r9, r2
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fsub+0x46>
 8000f7c:	e07e      	b.n	800107c <__aeabi_fsub+0x144>
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x4c>
 8000f82:	e099      	b.n	80010b8 <__aeabi_fsub+0x180>
 8000f84:	2cff      	cmp	r4, #255	; 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x52>
 8000f88:	e08c      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	4652      	mov	r2, sl
 8000f8e:	04db      	lsls	r3, r3, #19
 8000f90:	431a      	orrs	r2, r3
 8000f92:	4692      	mov	sl, r2
 8000f94:	464a      	mov	r2, r9
 8000f96:	2301      	movs	r3, #1
 8000f98:	2a1b      	cmp	r2, #27
 8000f9a:	dc08      	bgt.n	8000fae <__aeabi_fsub+0x76>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	40d3      	lsrs	r3, r2
 8000fa2:	1a89      	subs	r1, r1, r2
 8000fa4:	4652      	mov	r2, sl
 8000fa6:	408a      	lsls	r2, r1
 8000fa8:	1e51      	subs	r1, r2, #1
 8000faa:	418a      	sbcs	r2, r1
 8000fac:	4313      	orrs	r3, r2
 8000fae:	4662      	mov	r2, ip
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	d400      	bmi.n	8000fb8 <__aeabi_fsub+0x80>
 8000fb6:	e0f3      	b.n	80011a0 <__aeabi_fsub+0x268>
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	099e      	lsrs	r6, r3, #6
 8000fbc:	0030      	movs	r0, r6
 8000fbe:	f002 f90d 	bl	80031dc <__clzsi2>
 8000fc2:	3805      	subs	r0, #5
 8000fc4:	4086      	lsls	r6, r0
 8000fc6:	4284      	cmp	r4, r0
 8000fc8:	dd00      	ble.n	8000fcc <__aeabi_fsub+0x94>
 8000fca:	e0f7      	b.n	80011bc <__aeabi_fsub+0x284>
 8000fcc:	0032      	movs	r2, r6
 8000fce:	1b04      	subs	r4, r0, r4
 8000fd0:	2020      	movs	r0, #32
 8000fd2:	3401      	adds	r4, #1
 8000fd4:	40e2      	lsrs	r2, r4
 8000fd6:	1b04      	subs	r4, r0, r4
 8000fd8:	40a6      	lsls	r6, r4
 8000fda:	0033      	movs	r3, r6
 8000fdc:	1e5e      	subs	r6, r3, #1
 8000fde:	41b3      	sbcs	r3, r6
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	075a      	lsls	r2, r3, #29
 8000fe6:	d004      	beq.n	8000ff2 <__aeabi_fsub+0xba>
 8000fe8:	220f      	movs	r2, #15
 8000fea:	401a      	ands	r2, r3
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fsub+0xba>
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	015a      	lsls	r2, r3, #5
 8000ff4:	d400      	bmi.n	8000ff8 <__aeabi_fsub+0xc0>
 8000ff6:	e0d6      	b.n	80011a6 <__aeabi_fsub+0x26e>
 8000ff8:	1c62      	adds	r2, r4, #1
 8000ffa:	2cfe      	cmp	r4, #254	; 0xfe
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0xc8>
 8000ffe:	e0da      	b.n	80011b6 <__aeabi_fsub+0x27e>
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	0a5f      	lsrs	r7, r3, #9
 8001004:	b2d0      	uxtb	r0, r2
 8001006:	05c0      	lsls	r0, r0, #23
 8001008:	4338      	orrs	r0, r7
 800100a:	07ed      	lsls	r5, r5, #31
 800100c:	4328      	orrs	r0, r5
 800100e:	bce0      	pop	{r5, r6, r7}
 8001010:	46ba      	mov	sl, r7
 8001012:	46b1      	mov	r9, r6
 8001014:	46a8      	mov	r8, r5
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	1ba2      	subs	r2, r4, r6
 800101a:	4691      	mov	r9, r2
 800101c:	2a00      	cmp	r2, #0
 800101e:	dd63      	ble.n	80010e8 <__aeabi_fsub+0x1b0>
 8001020:	2e00      	cmp	r6, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_fsub+0xee>
 8001024:	e099      	b.n	800115a <__aeabi_fsub+0x222>
 8001026:	2cff      	cmp	r4, #255	; 0xff
 8001028:	d03c      	beq.n	80010a4 <__aeabi_fsub+0x16c>
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	4652      	mov	r2, sl
 800102e:	04db      	lsls	r3, r3, #19
 8001030:	431a      	orrs	r2, r3
 8001032:	4692      	mov	sl, r2
 8001034:	464a      	mov	r2, r9
 8001036:	2301      	movs	r3, #1
 8001038:	2a1b      	cmp	r2, #27
 800103a:	dc08      	bgt.n	800104e <__aeabi_fsub+0x116>
 800103c:	4653      	mov	r3, sl
 800103e:	2120      	movs	r1, #32
 8001040:	40d3      	lsrs	r3, r2
 8001042:	1a89      	subs	r1, r1, r2
 8001044:	4652      	mov	r2, sl
 8001046:	408a      	lsls	r2, r1
 8001048:	1e51      	subs	r1, r2, #1
 800104a:	418a      	sbcs	r2, r1
 800104c:	4313      	orrs	r3, r2
 800104e:	4463      	add	r3, ip
 8001050:	015a      	lsls	r2, r3, #5
 8001052:	d400      	bmi.n	8001056 <__aeabi_fsub+0x11e>
 8001054:	e0a4      	b.n	80011a0 <__aeabi_fsub+0x268>
 8001056:	3401      	adds	r4, #1
 8001058:	2cff      	cmp	r4, #255	; 0xff
 800105a:	d100      	bne.n	800105e <__aeabi_fsub+0x126>
 800105c:	e0ab      	b.n	80011b6 <__aeabi_fsub+0x27e>
 800105e:	2201      	movs	r2, #1
 8001060:	4997      	ldr	r1, [pc, #604]	; (80012c0 <__aeabi_fsub+0x388>)
 8001062:	401a      	ands	r2, r3
 8001064:	085b      	lsrs	r3, r3, #1
 8001066:	400b      	ands	r3, r1
 8001068:	4313      	orrs	r3, r2
 800106a:	e7bb      	b.n	8000fe4 <__aeabi_fsub+0xac>
 800106c:	2a00      	cmp	r2, #0
 800106e:	d032      	beq.n	80010d6 <__aeabi_fsub+0x19e>
 8001070:	428d      	cmp	r5, r1
 8001072:	d035      	beq.n	80010e0 <__aeabi_fsub+0x1a8>
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	4252      	negs	r2, r2
 8001078:	4691      	mov	r9, r2
 800107a:	44a1      	add	r9, r4
 800107c:	464a      	mov	r2, r9
 800107e:	2a00      	cmp	r2, #0
 8001080:	d051      	beq.n	8001126 <__aeabi_fsub+0x1ee>
 8001082:	1b30      	subs	r0, r6, r4
 8001084:	2c00      	cmp	r4, #0
 8001086:	d000      	beq.n	800108a <__aeabi_fsub+0x152>
 8001088:	e09c      	b.n	80011c4 <__aeabi_fsub+0x28c>
 800108a:	4663      	mov	r3, ip
 800108c:	2b00      	cmp	r3, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x15a>
 8001090:	e0df      	b.n	8001252 <__aeabi_fsub+0x31a>
 8001092:	3801      	subs	r0, #1
 8001094:	2800      	cmp	r0, #0
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x162>
 8001098:	e0f7      	b.n	800128a <__aeabi_fsub+0x352>
 800109a:	2eff      	cmp	r6, #255	; 0xff
 800109c:	d000      	beq.n	80010a0 <__aeabi_fsub+0x168>
 800109e:	e099      	b.n	80011d4 <__aeabi_fsub+0x29c>
 80010a0:	000d      	movs	r5, r1
 80010a2:	4643      	mov	r3, r8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_fsub+0x172>
 80010a8:	e085      	b.n	80011b6 <__aeabi_fsub+0x27e>
 80010aa:	2780      	movs	r7, #128	; 0x80
 80010ac:	03ff      	lsls	r7, r7, #15
 80010ae:	431f      	orrs	r7, r3
 80010b0:	027f      	lsls	r7, r7, #9
 80010b2:	20ff      	movs	r0, #255	; 0xff
 80010b4:	0a7f      	lsrs	r7, r7, #9
 80010b6:	e7a6      	b.n	8001006 <__aeabi_fsub+0xce>
 80010b8:	4652      	mov	r2, sl
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	d074      	beq.n	80011a8 <__aeabi_fsub+0x270>
 80010be:	2201      	movs	r2, #1
 80010c0:	4252      	negs	r2, r2
 80010c2:	4690      	mov	r8, r2
 80010c4:	44c1      	add	r9, r8
 80010c6:	464a      	mov	r2, r9
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_fsub+0x196>
 80010cc:	e0c8      	b.n	8001260 <__aeabi_fsub+0x328>
 80010ce:	2cff      	cmp	r4, #255	; 0xff
 80010d0:	d000      	beq.n	80010d4 <__aeabi_fsub+0x19c>
 80010d2:	e75f      	b.n	8000f94 <__aeabi_fsub+0x5c>
 80010d4:	e7e6      	b.n	80010a4 <__aeabi_fsub+0x16c>
 80010d6:	2201      	movs	r2, #1
 80010d8:	4051      	eors	r1, r2
 80010da:	42a9      	cmp	r1, r5
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x1a8>
 80010de:	e749      	b.n	8000f74 <__aeabi_fsub+0x3c>
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	4252      	negs	r2, r2
 80010e4:	4691      	mov	r9, r2
 80010e6:	44a1      	add	r9, r4
 80010e8:	464a      	mov	r2, r9
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d043      	beq.n	8001176 <__aeabi_fsub+0x23e>
 80010ee:	1b31      	subs	r1, r6, r4
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_fsub+0x1be>
 80010f4:	e08c      	b.n	8001210 <__aeabi_fsub+0x2d8>
 80010f6:	2eff      	cmp	r6, #255	; 0xff
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0x1c4>
 80010fa:	e092      	b.n	8001222 <__aeabi_fsub+0x2ea>
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	4662      	mov	r2, ip
 8001100:	04db      	lsls	r3, r3, #19
 8001102:	431a      	orrs	r2, r3
 8001104:	4694      	mov	ip, r2
 8001106:	2301      	movs	r3, #1
 8001108:	291b      	cmp	r1, #27
 800110a:	dc09      	bgt.n	8001120 <__aeabi_fsub+0x1e8>
 800110c:	2020      	movs	r0, #32
 800110e:	4663      	mov	r3, ip
 8001110:	4662      	mov	r2, ip
 8001112:	40cb      	lsrs	r3, r1
 8001114:	1a41      	subs	r1, r0, r1
 8001116:	408a      	lsls	r2, r1
 8001118:	0011      	movs	r1, r2
 800111a:	1e48      	subs	r0, r1, #1
 800111c:	4181      	sbcs	r1, r0
 800111e:	430b      	orrs	r3, r1
 8001120:	0034      	movs	r4, r6
 8001122:	4453      	add	r3, sl
 8001124:	e794      	b.n	8001050 <__aeabi_fsub+0x118>
 8001126:	22fe      	movs	r2, #254	; 0xfe
 8001128:	1c66      	adds	r6, r4, #1
 800112a:	4232      	tst	r2, r6
 800112c:	d164      	bne.n	80011f8 <__aeabi_fsub+0x2c0>
 800112e:	2c00      	cmp	r4, #0
 8001130:	d000      	beq.n	8001134 <__aeabi_fsub+0x1fc>
 8001132:	e082      	b.n	800123a <__aeabi_fsub+0x302>
 8001134:	4663      	mov	r3, ip
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x204>
 800113a:	e0ab      	b.n	8001294 <__aeabi_fsub+0x35c>
 800113c:	4653      	mov	r3, sl
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x20c>
 8001142:	e760      	b.n	8001006 <__aeabi_fsub+0xce>
 8001144:	4663      	mov	r3, ip
 8001146:	4652      	mov	r2, sl
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	015a      	lsls	r2, r3, #5
 800114c:	d400      	bmi.n	8001150 <__aeabi_fsub+0x218>
 800114e:	e0aa      	b.n	80012a6 <__aeabi_fsub+0x36e>
 8001150:	4663      	mov	r3, ip
 8001152:	4652      	mov	r2, sl
 8001154:	000d      	movs	r5, r1
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	e744      	b.n	8000fe4 <__aeabi_fsub+0xac>
 800115a:	4652      	mov	r2, sl
 800115c:	2a00      	cmp	r2, #0
 800115e:	d023      	beq.n	80011a8 <__aeabi_fsub+0x270>
 8001160:	2201      	movs	r2, #1
 8001162:	4252      	negs	r2, r2
 8001164:	4690      	mov	r8, r2
 8001166:	44c1      	add	r9, r8
 8001168:	464a      	mov	r2, r9
 800116a:	2a00      	cmp	r2, #0
 800116c:	d075      	beq.n	800125a <__aeabi_fsub+0x322>
 800116e:	2cff      	cmp	r4, #255	; 0xff
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x23c>
 8001172:	e75f      	b.n	8001034 <__aeabi_fsub+0xfc>
 8001174:	e796      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8001176:	26fe      	movs	r6, #254	; 0xfe
 8001178:	3401      	adds	r4, #1
 800117a:	4226      	tst	r6, r4
 800117c:	d153      	bne.n	8001226 <__aeabi_fsub+0x2ee>
 800117e:	2800      	cmp	r0, #0
 8001180:	d172      	bne.n	8001268 <__aeabi_fsub+0x330>
 8001182:	4663      	mov	r3, ip
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x252>
 8001188:	e093      	b.n	80012b2 <__aeabi_fsub+0x37a>
 800118a:	4653      	mov	r3, sl
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_fsub+0x25a>
 8001190:	e739      	b.n	8001006 <__aeabi_fsub+0xce>
 8001192:	4463      	add	r3, ip
 8001194:	2400      	movs	r4, #0
 8001196:	015a      	lsls	r2, r3, #5
 8001198:	d502      	bpl.n	80011a0 <__aeabi_fsub+0x268>
 800119a:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <__aeabi_fsub+0x38c>)
 800119c:	3401      	adds	r4, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	075a      	lsls	r2, r3, #29
 80011a2:	d000      	beq.n	80011a6 <__aeabi_fsub+0x26e>
 80011a4:	e720      	b.n	8000fe8 <__aeabi_fsub+0xb0>
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	2cff      	cmp	r4, #255	; 0xff
 80011aa:	d100      	bne.n	80011ae <__aeabi_fsub+0x276>
 80011ac:	e77a      	b.n	80010a4 <__aeabi_fsub+0x16c>
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	0a5f      	lsrs	r7, r3, #9
 80011b2:	b2e0      	uxtb	r0, r4
 80011b4:	e727      	b.n	8001006 <__aeabi_fsub+0xce>
 80011b6:	20ff      	movs	r0, #255	; 0xff
 80011b8:	2700      	movs	r7, #0
 80011ba:	e724      	b.n	8001006 <__aeabi_fsub+0xce>
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <__aeabi_fsub+0x38c>)
 80011be:	1a24      	subs	r4, r4, r0
 80011c0:	4033      	ands	r3, r6
 80011c2:	e70f      	b.n	8000fe4 <__aeabi_fsub+0xac>
 80011c4:	2eff      	cmp	r6, #255	; 0xff
 80011c6:	d100      	bne.n	80011ca <__aeabi_fsub+0x292>
 80011c8:	e76a      	b.n	80010a0 <__aeabi_fsub+0x168>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	4662      	mov	r2, ip
 80011ce:	04db      	lsls	r3, r3, #19
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4694      	mov	ip, r2
 80011d4:	2301      	movs	r3, #1
 80011d6:	281b      	cmp	r0, #27
 80011d8:	dc09      	bgt.n	80011ee <__aeabi_fsub+0x2b6>
 80011da:	2420      	movs	r4, #32
 80011dc:	4663      	mov	r3, ip
 80011de:	4662      	mov	r2, ip
 80011e0:	40c3      	lsrs	r3, r0
 80011e2:	1a20      	subs	r0, r4, r0
 80011e4:	4082      	lsls	r2, r0
 80011e6:	0010      	movs	r0, r2
 80011e8:	1e44      	subs	r4, r0, #1
 80011ea:	41a0      	sbcs	r0, r4
 80011ec:	4303      	orrs	r3, r0
 80011ee:	4652      	mov	r2, sl
 80011f0:	000d      	movs	r5, r1
 80011f2:	0034      	movs	r4, r6
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	e6dc      	b.n	8000fb2 <__aeabi_fsub+0x7a>
 80011f8:	4663      	mov	r3, ip
 80011fa:	4652      	mov	r2, sl
 80011fc:	1a9e      	subs	r6, r3, r2
 80011fe:	0173      	lsls	r3, r6, #5
 8001200:	d417      	bmi.n	8001232 <__aeabi_fsub+0x2fa>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d000      	beq.n	8001208 <__aeabi_fsub+0x2d0>
 8001206:	e6d9      	b.n	8000fbc <__aeabi_fsub+0x84>
 8001208:	2500      	movs	r5, #0
 800120a:	2000      	movs	r0, #0
 800120c:	2700      	movs	r7, #0
 800120e:	e6fa      	b.n	8001006 <__aeabi_fsub+0xce>
 8001210:	4663      	mov	r3, ip
 8001212:	2b00      	cmp	r3, #0
 8001214:	d044      	beq.n	80012a0 <__aeabi_fsub+0x368>
 8001216:	3901      	subs	r1, #1
 8001218:	2900      	cmp	r1, #0
 800121a:	d04c      	beq.n	80012b6 <__aeabi_fsub+0x37e>
 800121c:	2eff      	cmp	r6, #255	; 0xff
 800121e:	d000      	beq.n	8001222 <__aeabi_fsub+0x2ea>
 8001220:	e771      	b.n	8001106 <__aeabi_fsub+0x1ce>
 8001222:	4643      	mov	r3, r8
 8001224:	e73e      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8001226:	2cff      	cmp	r4, #255	; 0xff
 8001228:	d0c5      	beq.n	80011b6 <__aeabi_fsub+0x27e>
 800122a:	4652      	mov	r2, sl
 800122c:	4462      	add	r2, ip
 800122e:	0853      	lsrs	r3, r2, #1
 8001230:	e7b6      	b.n	80011a0 <__aeabi_fsub+0x268>
 8001232:	4663      	mov	r3, ip
 8001234:	000d      	movs	r5, r1
 8001236:	1ad6      	subs	r6, r2, r3
 8001238:	e6c0      	b.n	8000fbc <__aeabi_fsub+0x84>
 800123a:	4662      	mov	r2, ip
 800123c:	2a00      	cmp	r2, #0
 800123e:	d116      	bne.n	800126e <__aeabi_fsub+0x336>
 8001240:	4653      	mov	r3, sl
 8001242:	2b00      	cmp	r3, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x310>
 8001246:	e72b      	b.n	80010a0 <__aeabi_fsub+0x168>
 8001248:	2780      	movs	r7, #128	; 0x80
 800124a:	2500      	movs	r5, #0
 800124c:	20ff      	movs	r0, #255	; 0xff
 800124e:	03ff      	lsls	r7, r7, #15
 8001250:	e6d9      	b.n	8001006 <__aeabi_fsub+0xce>
 8001252:	000d      	movs	r5, r1
 8001254:	4643      	mov	r3, r8
 8001256:	0034      	movs	r4, r6
 8001258:	e7a6      	b.n	80011a8 <__aeabi_fsub+0x270>
 800125a:	4653      	mov	r3, sl
 800125c:	4463      	add	r3, ip
 800125e:	e6f7      	b.n	8001050 <__aeabi_fsub+0x118>
 8001260:	4663      	mov	r3, ip
 8001262:	4652      	mov	r2, sl
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	e6a4      	b.n	8000fb2 <__aeabi_fsub+0x7a>
 8001268:	4662      	mov	r2, ip
 800126a:	2a00      	cmp	r2, #0
 800126c:	d0d9      	beq.n	8001222 <__aeabi_fsub+0x2ea>
 800126e:	4652      	mov	r2, sl
 8001270:	2a00      	cmp	r2, #0
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0x33e>
 8001274:	e716      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	03d2      	lsls	r2, r2, #15
 800127a:	4213      	tst	r3, r2
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x348>
 800127e:	e711      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8001280:	4640      	mov	r0, r8
 8001282:	4210      	tst	r0, r2
 8001284:	d000      	beq.n	8001288 <__aeabi_fsub+0x350>
 8001286:	e70d      	b.n	80010a4 <__aeabi_fsub+0x16c>
 8001288:	e70a      	b.n	80010a0 <__aeabi_fsub+0x168>
 800128a:	4652      	mov	r2, sl
 800128c:	000d      	movs	r5, r1
 800128e:	0034      	movs	r4, r6
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	e68e      	b.n	8000fb2 <__aeabi_fsub+0x7a>
 8001294:	4653      	mov	r3, sl
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <__aeabi_fsub+0x374>
 800129a:	000d      	movs	r5, r1
 800129c:	4647      	mov	r7, r8
 800129e:	e6b2      	b.n	8001006 <__aeabi_fsub+0xce>
 80012a0:	4643      	mov	r3, r8
 80012a2:	0034      	movs	r4, r6
 80012a4:	e780      	b.n	80011a8 <__aeabi_fsub+0x270>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d000      	beq.n	80012ac <__aeabi_fsub+0x374>
 80012aa:	e779      	b.n	80011a0 <__aeabi_fsub+0x268>
 80012ac:	2500      	movs	r5, #0
 80012ae:	2700      	movs	r7, #0
 80012b0:	e6a9      	b.n	8001006 <__aeabi_fsub+0xce>
 80012b2:	4647      	mov	r7, r8
 80012b4:	e6a7      	b.n	8001006 <__aeabi_fsub+0xce>
 80012b6:	4653      	mov	r3, sl
 80012b8:	0034      	movs	r4, r6
 80012ba:	4463      	add	r3, ip
 80012bc:	e6c8      	b.n	8001050 <__aeabi_fsub+0x118>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	7dffffff 	.word	0x7dffffff
 80012c4:	fbffffff 	.word	0xfbffffff

080012c8 <__aeabi_f2iz>:
 80012c8:	0241      	lsls	r1, r0, #9
 80012ca:	0042      	lsls	r2, r0, #1
 80012cc:	0fc3      	lsrs	r3, r0, #31
 80012ce:	0a49      	lsrs	r1, r1, #9
 80012d0:	2000      	movs	r0, #0
 80012d2:	0e12      	lsrs	r2, r2, #24
 80012d4:	2a7e      	cmp	r2, #126	; 0x7e
 80012d6:	d903      	bls.n	80012e0 <__aeabi_f2iz+0x18>
 80012d8:	2a9d      	cmp	r2, #157	; 0x9d
 80012da:	d902      	bls.n	80012e2 <__aeabi_f2iz+0x1a>
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <__aeabi_f2iz+0x3c>)
 80012de:	1898      	adds	r0, r3, r2
 80012e0:	4770      	bx	lr
 80012e2:	2080      	movs	r0, #128	; 0x80
 80012e4:	0400      	lsls	r0, r0, #16
 80012e6:	4301      	orrs	r1, r0
 80012e8:	2a95      	cmp	r2, #149	; 0x95
 80012ea:	dc07      	bgt.n	80012fc <__aeabi_f2iz+0x34>
 80012ec:	2096      	movs	r0, #150	; 0x96
 80012ee:	1a82      	subs	r2, r0, r2
 80012f0:	40d1      	lsrs	r1, r2
 80012f2:	4248      	negs	r0, r1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f3      	bne.n	80012e0 <__aeabi_f2iz+0x18>
 80012f8:	0008      	movs	r0, r1
 80012fa:	e7f1      	b.n	80012e0 <__aeabi_f2iz+0x18>
 80012fc:	3a96      	subs	r2, #150	; 0x96
 80012fe:	4091      	lsls	r1, r2
 8001300:	e7f7      	b.n	80012f2 <__aeabi_f2iz+0x2a>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	7fffffff 	.word	0x7fffffff

08001308 <__aeabi_i2f>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	2800      	cmp	r0, #0
 800130c:	d013      	beq.n	8001336 <__aeabi_i2f+0x2e>
 800130e:	17c3      	asrs	r3, r0, #31
 8001310:	18c5      	adds	r5, r0, r3
 8001312:	405d      	eors	r5, r3
 8001314:	0fc4      	lsrs	r4, r0, #31
 8001316:	0028      	movs	r0, r5
 8001318:	f001 ff60 	bl	80031dc <__clzsi2>
 800131c:	239e      	movs	r3, #158	; 0x9e
 800131e:	0001      	movs	r1, r0
 8001320:	1a1b      	subs	r3, r3, r0
 8001322:	2b96      	cmp	r3, #150	; 0x96
 8001324:	dc0f      	bgt.n	8001346 <__aeabi_i2f+0x3e>
 8001326:	2808      	cmp	r0, #8
 8001328:	dd01      	ble.n	800132e <__aeabi_i2f+0x26>
 800132a:	3908      	subs	r1, #8
 800132c:	408d      	lsls	r5, r1
 800132e:	026d      	lsls	r5, r5, #9
 8001330:	0a6d      	lsrs	r5, r5, #9
 8001332:	b2d8      	uxtb	r0, r3
 8001334:	e002      	b.n	800133c <__aeabi_i2f+0x34>
 8001336:	2400      	movs	r4, #0
 8001338:	2000      	movs	r0, #0
 800133a:	2500      	movs	r5, #0
 800133c:	05c0      	lsls	r0, r0, #23
 800133e:	4328      	orrs	r0, r5
 8001340:	07e4      	lsls	r4, r4, #31
 8001342:	4320      	orrs	r0, r4
 8001344:	bd70      	pop	{r4, r5, r6, pc}
 8001346:	2b99      	cmp	r3, #153	; 0x99
 8001348:	dd0b      	ble.n	8001362 <__aeabi_i2f+0x5a>
 800134a:	2205      	movs	r2, #5
 800134c:	002e      	movs	r6, r5
 800134e:	1a12      	subs	r2, r2, r0
 8001350:	40d6      	lsrs	r6, r2
 8001352:	0002      	movs	r2, r0
 8001354:	321b      	adds	r2, #27
 8001356:	4095      	lsls	r5, r2
 8001358:	0028      	movs	r0, r5
 800135a:	1e45      	subs	r5, r0, #1
 800135c:	41a8      	sbcs	r0, r5
 800135e:	0035      	movs	r5, r6
 8001360:	4305      	orrs	r5, r0
 8001362:	2905      	cmp	r1, #5
 8001364:	dd01      	ble.n	800136a <__aeabi_i2f+0x62>
 8001366:	1f4a      	subs	r2, r1, #5
 8001368:	4095      	lsls	r5, r2
 800136a:	002a      	movs	r2, r5
 800136c:	4e08      	ldr	r6, [pc, #32]	; (8001390 <__aeabi_i2f+0x88>)
 800136e:	4032      	ands	r2, r6
 8001370:	0768      	lsls	r0, r5, #29
 8001372:	d009      	beq.n	8001388 <__aeabi_i2f+0x80>
 8001374:	200f      	movs	r0, #15
 8001376:	4028      	ands	r0, r5
 8001378:	2804      	cmp	r0, #4
 800137a:	d005      	beq.n	8001388 <__aeabi_i2f+0x80>
 800137c:	3204      	adds	r2, #4
 800137e:	0150      	lsls	r0, r2, #5
 8001380:	d502      	bpl.n	8001388 <__aeabi_i2f+0x80>
 8001382:	239f      	movs	r3, #159	; 0x9f
 8001384:	4032      	ands	r2, r6
 8001386:	1a5b      	subs	r3, r3, r1
 8001388:	0192      	lsls	r2, r2, #6
 800138a:	0a55      	lsrs	r5, r2, #9
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	e7d5      	b.n	800133c <__aeabi_i2f+0x34>
 8001390:	fbffffff 	.word	0xfbffffff

08001394 <__aeabi_ui2f>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	1e05      	subs	r5, r0, #0
 8001398:	d00e      	beq.n	80013b8 <__aeabi_ui2f+0x24>
 800139a:	f001 ff1f 	bl	80031dc <__clzsi2>
 800139e:	239e      	movs	r3, #158	; 0x9e
 80013a0:	0004      	movs	r4, r0
 80013a2:	1a1b      	subs	r3, r3, r0
 80013a4:	2b96      	cmp	r3, #150	; 0x96
 80013a6:	dc0c      	bgt.n	80013c2 <__aeabi_ui2f+0x2e>
 80013a8:	2808      	cmp	r0, #8
 80013aa:	dd01      	ble.n	80013b0 <__aeabi_ui2f+0x1c>
 80013ac:	3c08      	subs	r4, #8
 80013ae:	40a5      	lsls	r5, r4
 80013b0:	026d      	lsls	r5, r5, #9
 80013b2:	0a6d      	lsrs	r5, r5, #9
 80013b4:	b2d8      	uxtb	r0, r3
 80013b6:	e001      	b.n	80013bc <__aeabi_ui2f+0x28>
 80013b8:	2000      	movs	r0, #0
 80013ba:	2500      	movs	r5, #0
 80013bc:	05c0      	lsls	r0, r0, #23
 80013be:	4328      	orrs	r0, r5
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	2b99      	cmp	r3, #153	; 0x99
 80013c4:	dd09      	ble.n	80013da <__aeabi_ui2f+0x46>
 80013c6:	0002      	movs	r2, r0
 80013c8:	0029      	movs	r1, r5
 80013ca:	321b      	adds	r2, #27
 80013cc:	4091      	lsls	r1, r2
 80013ce:	1e4a      	subs	r2, r1, #1
 80013d0:	4191      	sbcs	r1, r2
 80013d2:	2205      	movs	r2, #5
 80013d4:	1a12      	subs	r2, r2, r0
 80013d6:	40d5      	lsrs	r5, r2
 80013d8:	430d      	orrs	r5, r1
 80013da:	2c05      	cmp	r4, #5
 80013dc:	dd01      	ble.n	80013e2 <__aeabi_ui2f+0x4e>
 80013de:	1f62      	subs	r2, r4, #5
 80013e0:	4095      	lsls	r5, r2
 80013e2:	0029      	movs	r1, r5
 80013e4:	4e08      	ldr	r6, [pc, #32]	; (8001408 <__aeabi_ui2f+0x74>)
 80013e6:	4031      	ands	r1, r6
 80013e8:	076a      	lsls	r2, r5, #29
 80013ea:	d009      	beq.n	8001400 <__aeabi_ui2f+0x6c>
 80013ec:	200f      	movs	r0, #15
 80013ee:	4028      	ands	r0, r5
 80013f0:	2804      	cmp	r0, #4
 80013f2:	d005      	beq.n	8001400 <__aeabi_ui2f+0x6c>
 80013f4:	3104      	adds	r1, #4
 80013f6:	014a      	lsls	r2, r1, #5
 80013f8:	d502      	bpl.n	8001400 <__aeabi_ui2f+0x6c>
 80013fa:	239f      	movs	r3, #159	; 0x9f
 80013fc:	4031      	ands	r1, r6
 80013fe:	1b1b      	subs	r3, r3, r4
 8001400:	0189      	lsls	r1, r1, #6
 8001402:	0a4d      	lsrs	r5, r1, #9
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	e7d9      	b.n	80013bc <__aeabi_ui2f+0x28>
 8001408:	fbffffff 	.word	0xfbffffff

0800140c <__aeabi_dadd>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	464f      	mov	r7, r9
 8001410:	46d6      	mov	lr, sl
 8001412:	4646      	mov	r6, r8
 8001414:	000d      	movs	r5, r1
 8001416:	0001      	movs	r1, r0
 8001418:	0018      	movs	r0, r3
 800141a:	b5c0      	push	{r6, r7, lr}
 800141c:	0017      	movs	r7, r2
 800141e:	032b      	lsls	r3, r5, #12
 8001420:	0a5a      	lsrs	r2, r3, #9
 8001422:	0f4b      	lsrs	r3, r1, #29
 8001424:	4313      	orrs	r3, r2
 8001426:	00ca      	lsls	r2, r1, #3
 8001428:	4691      	mov	r9, r2
 800142a:	0302      	lsls	r2, r0, #12
 800142c:	006e      	lsls	r6, r5, #1
 800142e:	0041      	lsls	r1, r0, #1
 8001430:	0a52      	lsrs	r2, r2, #9
 8001432:	0fec      	lsrs	r4, r5, #31
 8001434:	0f7d      	lsrs	r5, r7, #29
 8001436:	4315      	orrs	r5, r2
 8001438:	0d76      	lsrs	r6, r6, #21
 800143a:	0d49      	lsrs	r1, r1, #21
 800143c:	0fc0      	lsrs	r0, r0, #31
 800143e:	4682      	mov	sl, r0
 8001440:	46ac      	mov	ip, r5
 8001442:	00ff      	lsls	r7, r7, #3
 8001444:	1a72      	subs	r2, r6, r1
 8001446:	4284      	cmp	r4, r0
 8001448:	d100      	bne.n	800144c <__aeabi_dadd+0x40>
 800144a:	e098      	b.n	800157e <__aeabi_dadd+0x172>
 800144c:	2a00      	cmp	r2, #0
 800144e:	dc00      	bgt.n	8001452 <__aeabi_dadd+0x46>
 8001450:	e081      	b.n	8001556 <__aeabi_dadd+0x14a>
 8001452:	2900      	cmp	r1, #0
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x4c>
 8001456:	e0b6      	b.n	80015c6 <__aeabi_dadd+0x1ba>
 8001458:	49c9      	ldr	r1, [pc, #804]	; (8001780 <__aeabi_dadd+0x374>)
 800145a:	428e      	cmp	r6, r1
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x54>
 800145e:	e172      	b.n	8001746 <__aeabi_dadd+0x33a>
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0028      	movs	r0, r5
 8001464:	0409      	lsls	r1, r1, #16
 8001466:	4308      	orrs	r0, r1
 8001468:	4684      	mov	ip, r0
 800146a:	2a38      	cmp	r2, #56	; 0x38
 800146c:	dd00      	ble.n	8001470 <__aeabi_dadd+0x64>
 800146e:	e15e      	b.n	800172e <__aeabi_dadd+0x322>
 8001470:	2a1f      	cmp	r2, #31
 8001472:	dd00      	ble.n	8001476 <__aeabi_dadd+0x6a>
 8001474:	e1ee      	b.n	8001854 <__aeabi_dadd+0x448>
 8001476:	2020      	movs	r0, #32
 8001478:	0039      	movs	r1, r7
 800147a:	4665      	mov	r5, ip
 800147c:	1a80      	subs	r0, r0, r2
 800147e:	4087      	lsls	r7, r0
 8001480:	40d1      	lsrs	r1, r2
 8001482:	4085      	lsls	r5, r0
 8001484:	430d      	orrs	r5, r1
 8001486:	0039      	movs	r1, r7
 8001488:	1e4f      	subs	r7, r1, #1
 800148a:	41b9      	sbcs	r1, r7
 800148c:	4667      	mov	r7, ip
 800148e:	40d7      	lsrs	r7, r2
 8001490:	4329      	orrs	r1, r5
 8001492:	1bdb      	subs	r3, r3, r7
 8001494:	464a      	mov	r2, r9
 8001496:	1a55      	subs	r5, r2, r1
 8001498:	45a9      	cmp	r9, r5
 800149a:	4189      	sbcs	r1, r1
 800149c:	4249      	negs	r1, r1
 800149e:	1a5b      	subs	r3, r3, r1
 80014a0:	4698      	mov	r8, r3
 80014a2:	4643      	mov	r3, r8
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	d400      	bmi.n	80014aa <__aeabi_dadd+0x9e>
 80014a8:	e0cc      	b.n	8001644 <__aeabi_dadd+0x238>
 80014aa:	4643      	mov	r3, r8
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	0a5b      	lsrs	r3, r3, #9
 80014b0:	4698      	mov	r8, r3
 80014b2:	4643      	mov	r3, r8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0xae>
 80014b8:	e12c      	b.n	8001714 <__aeabi_dadd+0x308>
 80014ba:	4640      	mov	r0, r8
 80014bc:	f001 fe8e 	bl	80031dc <__clzsi2>
 80014c0:	0001      	movs	r1, r0
 80014c2:	3908      	subs	r1, #8
 80014c4:	2220      	movs	r2, #32
 80014c6:	0028      	movs	r0, r5
 80014c8:	4643      	mov	r3, r8
 80014ca:	1a52      	subs	r2, r2, r1
 80014cc:	408b      	lsls	r3, r1
 80014ce:	40d0      	lsrs	r0, r2
 80014d0:	408d      	lsls	r5, r1
 80014d2:	4303      	orrs	r3, r0
 80014d4:	428e      	cmp	r6, r1
 80014d6:	dd00      	ble.n	80014da <__aeabi_dadd+0xce>
 80014d8:	e117      	b.n	800170a <__aeabi_dadd+0x2fe>
 80014da:	1b8e      	subs	r6, r1, r6
 80014dc:	1c72      	adds	r2, r6, #1
 80014de:	2a1f      	cmp	r2, #31
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_dadd+0xd8>
 80014e2:	e1a7      	b.n	8001834 <__aeabi_dadd+0x428>
 80014e4:	2120      	movs	r1, #32
 80014e6:	0018      	movs	r0, r3
 80014e8:	002e      	movs	r6, r5
 80014ea:	1a89      	subs	r1, r1, r2
 80014ec:	408d      	lsls	r5, r1
 80014ee:	4088      	lsls	r0, r1
 80014f0:	40d6      	lsrs	r6, r2
 80014f2:	40d3      	lsrs	r3, r2
 80014f4:	1e69      	subs	r1, r5, #1
 80014f6:	418d      	sbcs	r5, r1
 80014f8:	4330      	orrs	r0, r6
 80014fa:	4698      	mov	r8, r3
 80014fc:	2600      	movs	r6, #0
 80014fe:	4305      	orrs	r5, r0
 8001500:	076b      	lsls	r3, r5, #29
 8001502:	d009      	beq.n	8001518 <__aeabi_dadd+0x10c>
 8001504:	230f      	movs	r3, #15
 8001506:	402b      	ands	r3, r5
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <__aeabi_dadd+0x10c>
 800150c:	1d2b      	adds	r3, r5, #4
 800150e:	42ab      	cmp	r3, r5
 8001510:	41ad      	sbcs	r5, r5
 8001512:	426d      	negs	r5, r5
 8001514:	44a8      	add	r8, r5
 8001516:	001d      	movs	r5, r3
 8001518:	4643      	mov	r3, r8
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	d400      	bmi.n	8001520 <__aeabi_dadd+0x114>
 800151e:	e094      	b.n	800164a <__aeabi_dadd+0x23e>
 8001520:	4b97      	ldr	r3, [pc, #604]	; (8001780 <__aeabi_dadd+0x374>)
 8001522:	1c72      	adds	r2, r6, #1
 8001524:	429a      	cmp	r2, r3
 8001526:	d100      	bne.n	800152a <__aeabi_dadd+0x11e>
 8001528:	e09d      	b.n	8001666 <__aeabi_dadd+0x25a>
 800152a:	4641      	mov	r1, r8
 800152c:	4b95      	ldr	r3, [pc, #596]	; (8001784 <__aeabi_dadd+0x378>)
 800152e:	08ed      	lsrs	r5, r5, #3
 8001530:	4019      	ands	r1, r3
 8001532:	000b      	movs	r3, r1
 8001534:	0552      	lsls	r2, r2, #21
 8001536:	0749      	lsls	r1, r1, #29
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	4329      	orrs	r1, r5
 800153c:	0b1b      	lsrs	r3, r3, #12
 800153e:	0d52      	lsrs	r2, r2, #21
 8001540:	0512      	lsls	r2, r2, #20
 8001542:	4313      	orrs	r3, r2
 8001544:	07e4      	lsls	r4, r4, #31
 8001546:	4323      	orrs	r3, r4
 8001548:	0008      	movs	r0, r1
 800154a:	0019      	movs	r1, r3
 800154c:	bce0      	pop	{r5, r6, r7}
 800154e:	46ba      	mov	sl, r7
 8001550:	46b1      	mov	r9, r6
 8001552:	46a8      	mov	r8, r5
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	2a00      	cmp	r2, #0
 8001558:	d043      	beq.n	80015e2 <__aeabi_dadd+0x1d6>
 800155a:	1b8a      	subs	r2, r1, r6
 800155c:	2e00      	cmp	r6, #0
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x156>
 8001560:	e12a      	b.n	80017b8 <__aeabi_dadd+0x3ac>
 8001562:	464c      	mov	r4, r9
 8001564:	431c      	orrs	r4, r3
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x15e>
 8001568:	e1d1      	b.n	800190e <__aeabi_dadd+0x502>
 800156a:	1e54      	subs	r4, r2, #1
 800156c:	2a01      	cmp	r2, #1
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x166>
 8001570:	e21f      	b.n	80019b2 <__aeabi_dadd+0x5a6>
 8001572:	4d83      	ldr	r5, [pc, #524]	; (8001780 <__aeabi_dadd+0x374>)
 8001574:	42aa      	cmp	r2, r5
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x16e>
 8001578:	e272      	b.n	8001a60 <__aeabi_dadd+0x654>
 800157a:	0022      	movs	r2, r4
 800157c:	e123      	b.n	80017c6 <__aeabi_dadd+0x3ba>
 800157e:	2a00      	cmp	r2, #0
 8001580:	dc00      	bgt.n	8001584 <__aeabi_dadd+0x178>
 8001582:	e098      	b.n	80016b6 <__aeabi_dadd+0x2aa>
 8001584:	2900      	cmp	r1, #0
 8001586:	d042      	beq.n	800160e <__aeabi_dadd+0x202>
 8001588:	497d      	ldr	r1, [pc, #500]	; (8001780 <__aeabi_dadd+0x374>)
 800158a:	428e      	cmp	r6, r1
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x184>
 800158e:	e0da      	b.n	8001746 <__aeabi_dadd+0x33a>
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0028      	movs	r0, r5
 8001594:	0409      	lsls	r1, r1, #16
 8001596:	4308      	orrs	r0, r1
 8001598:	4684      	mov	ip, r0
 800159a:	2a38      	cmp	r2, #56	; 0x38
 800159c:	dd00      	ble.n	80015a0 <__aeabi_dadd+0x194>
 800159e:	e129      	b.n	80017f4 <__aeabi_dadd+0x3e8>
 80015a0:	2a1f      	cmp	r2, #31
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dadd+0x19a>
 80015a4:	e187      	b.n	80018b6 <__aeabi_dadd+0x4aa>
 80015a6:	0011      	movs	r1, r2
 80015a8:	4665      	mov	r5, ip
 80015aa:	3920      	subs	r1, #32
 80015ac:	40cd      	lsrs	r5, r1
 80015ae:	2a20      	cmp	r2, #32
 80015b0:	d004      	beq.n	80015bc <__aeabi_dadd+0x1b0>
 80015b2:	2040      	movs	r0, #64	; 0x40
 80015b4:	4661      	mov	r1, ip
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	4091      	lsls	r1, r2
 80015ba:	430f      	orrs	r7, r1
 80015bc:	0039      	movs	r1, r7
 80015be:	1e4f      	subs	r7, r1, #1
 80015c0:	41b9      	sbcs	r1, r7
 80015c2:	430d      	orrs	r5, r1
 80015c4:	e11b      	b.n	80017fe <__aeabi_dadd+0x3f2>
 80015c6:	0029      	movs	r1, r5
 80015c8:	4339      	orrs	r1, r7
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1c2>
 80015cc:	e0b5      	b.n	800173a <__aeabi_dadd+0x32e>
 80015ce:	1e51      	subs	r1, r2, #1
 80015d0:	2a01      	cmp	r2, #1
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x1ca>
 80015d4:	e1ab      	b.n	800192e <__aeabi_dadd+0x522>
 80015d6:	486a      	ldr	r0, [pc, #424]	; (8001780 <__aeabi_dadd+0x374>)
 80015d8:	4282      	cmp	r2, r0
 80015da:	d100      	bne.n	80015de <__aeabi_dadd+0x1d2>
 80015dc:	e1b2      	b.n	8001944 <__aeabi_dadd+0x538>
 80015de:	000a      	movs	r2, r1
 80015e0:	e743      	b.n	800146a <__aeabi_dadd+0x5e>
 80015e2:	4969      	ldr	r1, [pc, #420]	; (8001788 <__aeabi_dadd+0x37c>)
 80015e4:	1c75      	adds	r5, r6, #1
 80015e6:	420d      	tst	r5, r1
 80015e8:	d000      	beq.n	80015ec <__aeabi_dadd+0x1e0>
 80015ea:	e0cf      	b.n	800178c <__aeabi_dadd+0x380>
 80015ec:	2e00      	cmp	r6, #0
 80015ee:	d000      	beq.n	80015f2 <__aeabi_dadd+0x1e6>
 80015f0:	e193      	b.n	800191a <__aeabi_dadd+0x50e>
 80015f2:	4649      	mov	r1, r9
 80015f4:	4319      	orrs	r1, r3
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x1ee>
 80015f8:	e1d1      	b.n	800199e <__aeabi_dadd+0x592>
 80015fa:	4661      	mov	r1, ip
 80015fc:	4339      	orrs	r1, r7
 80015fe:	d000      	beq.n	8001602 <__aeabi_dadd+0x1f6>
 8001600:	e1e3      	b.n	80019ca <__aeabi_dadd+0x5be>
 8001602:	4649      	mov	r1, r9
 8001604:	0758      	lsls	r0, r3, #29
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	4301      	orrs	r1, r0
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	e026      	b.n	800165c <__aeabi_dadd+0x250>
 800160e:	0029      	movs	r1, r5
 8001610:	4339      	orrs	r1, r7
 8001612:	d100      	bne.n	8001616 <__aeabi_dadd+0x20a>
 8001614:	e091      	b.n	800173a <__aeabi_dadd+0x32e>
 8001616:	1e51      	subs	r1, r2, #1
 8001618:	2a01      	cmp	r2, #1
 800161a:	d005      	beq.n	8001628 <__aeabi_dadd+0x21c>
 800161c:	4858      	ldr	r0, [pc, #352]	; (8001780 <__aeabi_dadd+0x374>)
 800161e:	4282      	cmp	r2, r0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x218>
 8001622:	e18f      	b.n	8001944 <__aeabi_dadd+0x538>
 8001624:	000a      	movs	r2, r1
 8001626:	e7b8      	b.n	800159a <__aeabi_dadd+0x18e>
 8001628:	003d      	movs	r5, r7
 800162a:	444d      	add	r5, r9
 800162c:	454d      	cmp	r5, r9
 800162e:	4189      	sbcs	r1, r1
 8001630:	4463      	add	r3, ip
 8001632:	4698      	mov	r8, r3
 8001634:	4249      	negs	r1, r1
 8001636:	4488      	add	r8, r1
 8001638:	4643      	mov	r3, r8
 800163a:	2602      	movs	r6, #2
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	d500      	bpl.n	8001642 <__aeabi_dadd+0x236>
 8001640:	e0eb      	b.n	800181a <__aeabi_dadd+0x40e>
 8001642:	3e01      	subs	r6, #1
 8001644:	076b      	lsls	r3, r5, #29
 8001646:	d000      	beq.n	800164a <__aeabi_dadd+0x23e>
 8001648:	e75c      	b.n	8001504 <__aeabi_dadd+0xf8>
 800164a:	4643      	mov	r3, r8
 800164c:	08e9      	lsrs	r1, r5, #3
 800164e:	075a      	lsls	r2, r3, #29
 8001650:	4311      	orrs	r1, r2
 8001652:	0032      	movs	r2, r6
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	484a      	ldr	r0, [pc, #296]	; (8001780 <__aeabi_dadd+0x374>)
 8001658:	4282      	cmp	r2, r0
 800165a:	d021      	beq.n	80016a0 <__aeabi_dadd+0x294>
 800165c:	031b      	lsls	r3, r3, #12
 800165e:	0552      	lsls	r2, r2, #21
 8001660:	0b1b      	lsrs	r3, r3, #12
 8001662:	0d52      	lsrs	r2, r2, #21
 8001664:	e76c      	b.n	8001540 <__aeabi_dadd+0x134>
 8001666:	2300      	movs	r3, #0
 8001668:	2100      	movs	r1, #0
 800166a:	e769      	b.n	8001540 <__aeabi_dadd+0x134>
 800166c:	002a      	movs	r2, r5
 800166e:	433a      	orrs	r2, r7
 8001670:	d069      	beq.n	8001746 <__aeabi_dadd+0x33a>
 8001672:	464a      	mov	r2, r9
 8001674:	0758      	lsls	r0, r3, #29
 8001676:	08d1      	lsrs	r1, r2, #3
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	031b      	lsls	r3, r3, #12
 800167e:	4308      	orrs	r0, r1
 8001680:	421a      	tst	r2, r3
 8001682:	d007      	beq.n	8001694 <__aeabi_dadd+0x288>
 8001684:	0029      	movs	r1, r5
 8001686:	08ed      	lsrs	r5, r5, #3
 8001688:	421d      	tst	r5, r3
 800168a:	d103      	bne.n	8001694 <__aeabi_dadd+0x288>
 800168c:	002a      	movs	r2, r5
 800168e:	08ff      	lsrs	r7, r7, #3
 8001690:	0748      	lsls	r0, r1, #29
 8001692:	4338      	orrs	r0, r7
 8001694:	0f43      	lsrs	r3, r0, #29
 8001696:	00c1      	lsls	r1, r0, #3
 8001698:	075b      	lsls	r3, r3, #29
 800169a:	08c9      	lsrs	r1, r1, #3
 800169c:	4319      	orrs	r1, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	000a      	movs	r2, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dadd+0x29c>
 80016a6:	e213      	b.n	8001ad0 <__aeabi_dadd+0x6c4>
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	0312      	lsls	r2, r2, #12
 80016ac:	4313      	orrs	r3, r2
 80016ae:	031b      	lsls	r3, r3, #12
 80016b0:	4a33      	ldr	r2, [pc, #204]	; (8001780 <__aeabi_dadd+0x374>)
 80016b2:	0b1b      	lsrs	r3, r3, #12
 80016b4:	e744      	b.n	8001540 <__aeabi_dadd+0x134>
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d04b      	beq.n	8001752 <__aeabi_dadd+0x346>
 80016ba:	1b8a      	subs	r2, r1, r6
 80016bc:	2e00      	cmp	r6, #0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x2b6>
 80016c0:	e0e7      	b.n	8001892 <__aeabi_dadd+0x486>
 80016c2:	482f      	ldr	r0, [pc, #188]	; (8001780 <__aeabi_dadd+0x374>)
 80016c4:	4281      	cmp	r1, r0
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x2be>
 80016c8:	e195      	b.n	80019f6 <__aeabi_dadd+0x5ea>
 80016ca:	2080      	movs	r0, #128	; 0x80
 80016cc:	0400      	lsls	r0, r0, #16
 80016ce:	4303      	orrs	r3, r0
 80016d0:	2a38      	cmp	r2, #56	; 0x38
 80016d2:	dd00      	ble.n	80016d6 <__aeabi_dadd+0x2ca>
 80016d4:	e143      	b.n	800195e <__aeabi_dadd+0x552>
 80016d6:	2a1f      	cmp	r2, #31
 80016d8:	dd00      	ble.n	80016dc <__aeabi_dadd+0x2d0>
 80016da:	e1db      	b.n	8001a94 <__aeabi_dadd+0x688>
 80016dc:	2020      	movs	r0, #32
 80016de:	001d      	movs	r5, r3
 80016e0:	464e      	mov	r6, r9
 80016e2:	1a80      	subs	r0, r0, r2
 80016e4:	4085      	lsls	r5, r0
 80016e6:	40d6      	lsrs	r6, r2
 80016e8:	4335      	orrs	r5, r6
 80016ea:	464e      	mov	r6, r9
 80016ec:	4086      	lsls	r6, r0
 80016ee:	0030      	movs	r0, r6
 80016f0:	40d3      	lsrs	r3, r2
 80016f2:	1e46      	subs	r6, r0, #1
 80016f4:	41b0      	sbcs	r0, r6
 80016f6:	449c      	add	ip, r3
 80016f8:	4305      	orrs	r5, r0
 80016fa:	19ed      	adds	r5, r5, r7
 80016fc:	42bd      	cmp	r5, r7
 80016fe:	419b      	sbcs	r3, r3
 8001700:	425b      	negs	r3, r3
 8001702:	4463      	add	r3, ip
 8001704:	4698      	mov	r8, r3
 8001706:	000e      	movs	r6, r1
 8001708:	e07f      	b.n	800180a <__aeabi_dadd+0x3fe>
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <__aeabi_dadd+0x378>)
 800170c:	1a76      	subs	r6, r6, r1
 800170e:	4013      	ands	r3, r2
 8001710:	4698      	mov	r8, r3
 8001712:	e6f5      	b.n	8001500 <__aeabi_dadd+0xf4>
 8001714:	0028      	movs	r0, r5
 8001716:	f001 fd61 	bl	80031dc <__clzsi2>
 800171a:	0001      	movs	r1, r0
 800171c:	3118      	adds	r1, #24
 800171e:	291f      	cmp	r1, #31
 8001720:	dc00      	bgt.n	8001724 <__aeabi_dadd+0x318>
 8001722:	e6cf      	b.n	80014c4 <__aeabi_dadd+0xb8>
 8001724:	002b      	movs	r3, r5
 8001726:	3808      	subs	r0, #8
 8001728:	4083      	lsls	r3, r0
 800172a:	2500      	movs	r5, #0
 800172c:	e6d2      	b.n	80014d4 <__aeabi_dadd+0xc8>
 800172e:	4662      	mov	r2, ip
 8001730:	433a      	orrs	r2, r7
 8001732:	0011      	movs	r1, r2
 8001734:	1e4f      	subs	r7, r1, #1
 8001736:	41b9      	sbcs	r1, r7
 8001738:	e6ac      	b.n	8001494 <__aeabi_dadd+0x88>
 800173a:	4649      	mov	r1, r9
 800173c:	0758      	lsls	r0, r3, #29
 800173e:	08c9      	lsrs	r1, r1, #3
 8001740:	4301      	orrs	r1, r0
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	e787      	b.n	8001656 <__aeabi_dadd+0x24a>
 8001746:	4649      	mov	r1, r9
 8001748:	075a      	lsls	r2, r3, #29
 800174a:	08c9      	lsrs	r1, r1, #3
 800174c:	4311      	orrs	r1, r2
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	e7a6      	b.n	80016a0 <__aeabi_dadd+0x294>
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <__aeabi_dadd+0x37c>)
 8001754:	1c70      	adds	r0, r6, #1
 8001756:	4208      	tst	r0, r1
 8001758:	d000      	beq.n	800175c <__aeabi_dadd+0x350>
 800175a:	e0bb      	b.n	80018d4 <__aeabi_dadd+0x4c8>
 800175c:	2e00      	cmp	r6, #0
 800175e:	d000      	beq.n	8001762 <__aeabi_dadd+0x356>
 8001760:	e114      	b.n	800198c <__aeabi_dadd+0x580>
 8001762:	4649      	mov	r1, r9
 8001764:	4319      	orrs	r1, r3
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x35e>
 8001768:	e175      	b.n	8001a56 <__aeabi_dadd+0x64a>
 800176a:	0029      	movs	r1, r5
 800176c:	4339      	orrs	r1, r7
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x366>
 8001770:	e17e      	b.n	8001a70 <__aeabi_dadd+0x664>
 8001772:	4649      	mov	r1, r9
 8001774:	0758      	lsls	r0, r3, #29
 8001776:	08c9      	lsrs	r1, r1, #3
 8001778:	4301      	orrs	r1, r0
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	e76e      	b.n	800165c <__aeabi_dadd+0x250>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	000007ff 	.word	0x000007ff
 8001784:	ff7fffff 	.word	0xff7fffff
 8001788:	000007fe 	.word	0x000007fe
 800178c:	4649      	mov	r1, r9
 800178e:	1bcd      	subs	r5, r1, r7
 8001790:	4661      	mov	r1, ip
 8001792:	1a58      	subs	r0, r3, r1
 8001794:	45a9      	cmp	r9, r5
 8001796:	4189      	sbcs	r1, r1
 8001798:	4249      	negs	r1, r1
 800179a:	4688      	mov	r8, r1
 800179c:	0001      	movs	r1, r0
 800179e:	4640      	mov	r0, r8
 80017a0:	1a09      	subs	r1, r1, r0
 80017a2:	4688      	mov	r8, r1
 80017a4:	0209      	lsls	r1, r1, #8
 80017a6:	d500      	bpl.n	80017aa <__aeabi_dadd+0x39e>
 80017a8:	e0a6      	b.n	80018f8 <__aeabi_dadd+0x4ec>
 80017aa:	4641      	mov	r1, r8
 80017ac:	4329      	orrs	r1, r5
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dadd+0x3a6>
 80017b0:	e67f      	b.n	80014b2 <__aeabi_dadd+0xa6>
 80017b2:	2300      	movs	r3, #0
 80017b4:	2400      	movs	r4, #0
 80017b6:	e751      	b.n	800165c <__aeabi_dadd+0x250>
 80017b8:	4cc7      	ldr	r4, [pc, #796]	; (8001ad8 <__aeabi_dadd+0x6cc>)
 80017ba:	42a1      	cmp	r1, r4
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dadd+0x3b4>
 80017be:	e0c7      	b.n	8001950 <__aeabi_dadd+0x544>
 80017c0:	2480      	movs	r4, #128	; 0x80
 80017c2:	0424      	lsls	r4, r4, #16
 80017c4:	4323      	orrs	r3, r4
 80017c6:	2a38      	cmp	r2, #56	; 0x38
 80017c8:	dc54      	bgt.n	8001874 <__aeabi_dadd+0x468>
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x3c4>
 80017ce:	e0cc      	b.n	800196a <__aeabi_dadd+0x55e>
 80017d0:	2420      	movs	r4, #32
 80017d2:	4648      	mov	r0, r9
 80017d4:	1aa4      	subs	r4, r4, r2
 80017d6:	001d      	movs	r5, r3
 80017d8:	464e      	mov	r6, r9
 80017da:	40a0      	lsls	r0, r4
 80017dc:	40d6      	lsrs	r6, r2
 80017de:	40a5      	lsls	r5, r4
 80017e0:	0004      	movs	r4, r0
 80017e2:	40d3      	lsrs	r3, r2
 80017e4:	4662      	mov	r2, ip
 80017e6:	4335      	orrs	r5, r6
 80017e8:	1e66      	subs	r6, r4, #1
 80017ea:	41b4      	sbcs	r4, r6
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	469c      	mov	ip, r3
 80017f0:	4325      	orrs	r5, r4
 80017f2:	e044      	b.n	800187e <__aeabi_dadd+0x472>
 80017f4:	4662      	mov	r2, ip
 80017f6:	433a      	orrs	r2, r7
 80017f8:	0015      	movs	r5, r2
 80017fa:	1e6f      	subs	r7, r5, #1
 80017fc:	41bd      	sbcs	r5, r7
 80017fe:	444d      	add	r5, r9
 8001800:	454d      	cmp	r5, r9
 8001802:	4189      	sbcs	r1, r1
 8001804:	4249      	negs	r1, r1
 8001806:	4688      	mov	r8, r1
 8001808:	4498      	add	r8, r3
 800180a:	4643      	mov	r3, r8
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dadd+0x406>
 8001810:	e718      	b.n	8001644 <__aeabi_dadd+0x238>
 8001812:	4bb1      	ldr	r3, [pc, #708]	; (8001ad8 <__aeabi_dadd+0x6cc>)
 8001814:	3601      	adds	r6, #1
 8001816:	429e      	cmp	r6, r3
 8001818:	d049      	beq.n	80018ae <__aeabi_dadd+0x4a2>
 800181a:	4642      	mov	r2, r8
 800181c:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6d0>)
 800181e:	2101      	movs	r1, #1
 8001820:	401a      	ands	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	086a      	lsrs	r2, r5, #1
 8001826:	400d      	ands	r5, r1
 8001828:	4315      	orrs	r5, r2
 800182a:	07d9      	lsls	r1, r3, #31
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	4698      	mov	r8, r3
 8001830:	430d      	orrs	r5, r1
 8001832:	e665      	b.n	8001500 <__aeabi_dadd+0xf4>
 8001834:	0018      	movs	r0, r3
 8001836:	3e1f      	subs	r6, #31
 8001838:	40f0      	lsrs	r0, r6
 800183a:	2a20      	cmp	r2, #32
 800183c:	d003      	beq.n	8001846 <__aeabi_dadd+0x43a>
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	1a8a      	subs	r2, r1, r2
 8001842:	4093      	lsls	r3, r2
 8001844:	431d      	orrs	r5, r3
 8001846:	1e69      	subs	r1, r5, #1
 8001848:	418d      	sbcs	r5, r1
 800184a:	2300      	movs	r3, #0
 800184c:	2600      	movs	r6, #0
 800184e:	4698      	mov	r8, r3
 8001850:	4305      	orrs	r5, r0
 8001852:	e6f7      	b.n	8001644 <__aeabi_dadd+0x238>
 8001854:	0011      	movs	r1, r2
 8001856:	4665      	mov	r5, ip
 8001858:	3920      	subs	r1, #32
 800185a:	40cd      	lsrs	r5, r1
 800185c:	2a20      	cmp	r2, #32
 800185e:	d004      	beq.n	800186a <__aeabi_dadd+0x45e>
 8001860:	2040      	movs	r0, #64	; 0x40
 8001862:	4661      	mov	r1, ip
 8001864:	1a82      	subs	r2, r0, r2
 8001866:	4091      	lsls	r1, r2
 8001868:	430f      	orrs	r7, r1
 800186a:	0039      	movs	r1, r7
 800186c:	1e4f      	subs	r7, r1, #1
 800186e:	41b9      	sbcs	r1, r7
 8001870:	4329      	orrs	r1, r5
 8001872:	e60f      	b.n	8001494 <__aeabi_dadd+0x88>
 8001874:	464a      	mov	r2, r9
 8001876:	4313      	orrs	r3, r2
 8001878:	001d      	movs	r5, r3
 800187a:	1e6b      	subs	r3, r5, #1
 800187c:	419d      	sbcs	r5, r3
 800187e:	1b7d      	subs	r5, r7, r5
 8001880:	42af      	cmp	r7, r5
 8001882:	419b      	sbcs	r3, r3
 8001884:	4662      	mov	r2, ip
 8001886:	425b      	negs	r3, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	4698      	mov	r8, r3
 800188c:	4654      	mov	r4, sl
 800188e:	000e      	movs	r6, r1
 8001890:	e607      	b.n	80014a2 <__aeabi_dadd+0x96>
 8001892:	4648      	mov	r0, r9
 8001894:	4318      	orrs	r0, r3
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x48e>
 8001898:	e0b3      	b.n	8001a02 <__aeabi_dadd+0x5f6>
 800189a:	1e50      	subs	r0, r2, #1
 800189c:	2a01      	cmp	r2, #1
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x496>
 80018a0:	e10d      	b.n	8001abe <__aeabi_dadd+0x6b2>
 80018a2:	4d8d      	ldr	r5, [pc, #564]	; (8001ad8 <__aeabi_dadd+0x6cc>)
 80018a4:	42aa      	cmp	r2, r5
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x49e>
 80018a8:	e0a5      	b.n	80019f6 <__aeabi_dadd+0x5ea>
 80018aa:	0002      	movs	r2, r0
 80018ac:	e710      	b.n	80016d0 <__aeabi_dadd+0x2c4>
 80018ae:	0032      	movs	r2, r6
 80018b0:	2300      	movs	r3, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	e644      	b.n	8001540 <__aeabi_dadd+0x134>
 80018b6:	2120      	movs	r1, #32
 80018b8:	0038      	movs	r0, r7
 80018ba:	1a89      	subs	r1, r1, r2
 80018bc:	4665      	mov	r5, ip
 80018be:	408f      	lsls	r7, r1
 80018c0:	408d      	lsls	r5, r1
 80018c2:	40d0      	lsrs	r0, r2
 80018c4:	1e79      	subs	r1, r7, #1
 80018c6:	418f      	sbcs	r7, r1
 80018c8:	4305      	orrs	r5, r0
 80018ca:	433d      	orrs	r5, r7
 80018cc:	4667      	mov	r7, ip
 80018ce:	40d7      	lsrs	r7, r2
 80018d0:	19db      	adds	r3, r3, r7
 80018d2:	e794      	b.n	80017fe <__aeabi_dadd+0x3f2>
 80018d4:	4a80      	ldr	r2, [pc, #512]	; (8001ad8 <__aeabi_dadd+0x6cc>)
 80018d6:	4290      	cmp	r0, r2
 80018d8:	d100      	bne.n	80018dc <__aeabi_dadd+0x4d0>
 80018da:	e0ec      	b.n	8001ab6 <__aeabi_dadd+0x6aa>
 80018dc:	0039      	movs	r1, r7
 80018de:	4449      	add	r1, r9
 80018e0:	4549      	cmp	r1, r9
 80018e2:	4192      	sbcs	r2, r2
 80018e4:	4463      	add	r3, ip
 80018e6:	4252      	negs	r2, r2
 80018e8:	189b      	adds	r3, r3, r2
 80018ea:	07dd      	lsls	r5, r3, #31
 80018ec:	0849      	lsrs	r1, r1, #1
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	4698      	mov	r8, r3
 80018f2:	0006      	movs	r6, r0
 80018f4:	430d      	orrs	r5, r1
 80018f6:	e6a5      	b.n	8001644 <__aeabi_dadd+0x238>
 80018f8:	464a      	mov	r2, r9
 80018fa:	1abd      	subs	r5, r7, r2
 80018fc:	42af      	cmp	r7, r5
 80018fe:	4189      	sbcs	r1, r1
 8001900:	4662      	mov	r2, ip
 8001902:	4249      	negs	r1, r1
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	4698      	mov	r8, r3
 800190a:	4654      	mov	r4, sl
 800190c:	e5d1      	b.n	80014b2 <__aeabi_dadd+0xa6>
 800190e:	076c      	lsls	r4, r5, #29
 8001910:	08f9      	lsrs	r1, r7, #3
 8001912:	4321      	orrs	r1, r4
 8001914:	08eb      	lsrs	r3, r5, #3
 8001916:	0004      	movs	r4, r0
 8001918:	e69d      	b.n	8001656 <__aeabi_dadd+0x24a>
 800191a:	464a      	mov	r2, r9
 800191c:	431a      	orrs	r2, r3
 800191e:	d175      	bne.n	8001a0c <__aeabi_dadd+0x600>
 8001920:	4661      	mov	r1, ip
 8001922:	4339      	orrs	r1, r7
 8001924:	d114      	bne.n	8001950 <__aeabi_dadd+0x544>
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	2400      	movs	r4, #0
 800192a:	031b      	lsls	r3, r3, #12
 800192c:	e6bc      	b.n	80016a8 <__aeabi_dadd+0x29c>
 800192e:	464a      	mov	r2, r9
 8001930:	1bd5      	subs	r5, r2, r7
 8001932:	45a9      	cmp	r9, r5
 8001934:	4189      	sbcs	r1, r1
 8001936:	4662      	mov	r2, ip
 8001938:	4249      	negs	r1, r1
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	1a5b      	subs	r3, r3, r1
 800193e:	4698      	mov	r8, r3
 8001940:	2601      	movs	r6, #1
 8001942:	e5ae      	b.n	80014a2 <__aeabi_dadd+0x96>
 8001944:	464a      	mov	r2, r9
 8001946:	08d1      	lsrs	r1, r2, #3
 8001948:	075a      	lsls	r2, r3, #29
 800194a:	4311      	orrs	r1, r2
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	e6a7      	b.n	80016a0 <__aeabi_dadd+0x294>
 8001950:	4663      	mov	r3, ip
 8001952:	08f9      	lsrs	r1, r7, #3
 8001954:	075a      	lsls	r2, r3, #29
 8001956:	4654      	mov	r4, sl
 8001958:	4311      	orrs	r1, r2
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	e6a0      	b.n	80016a0 <__aeabi_dadd+0x294>
 800195e:	464a      	mov	r2, r9
 8001960:	4313      	orrs	r3, r2
 8001962:	001d      	movs	r5, r3
 8001964:	1e6b      	subs	r3, r5, #1
 8001966:	419d      	sbcs	r5, r3
 8001968:	e6c7      	b.n	80016fa <__aeabi_dadd+0x2ee>
 800196a:	0014      	movs	r4, r2
 800196c:	001e      	movs	r6, r3
 800196e:	3c20      	subs	r4, #32
 8001970:	40e6      	lsrs	r6, r4
 8001972:	2a20      	cmp	r2, #32
 8001974:	d005      	beq.n	8001982 <__aeabi_dadd+0x576>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1aa2      	subs	r2, r4, r2
 800197a:	4093      	lsls	r3, r2
 800197c:	464a      	mov	r2, r9
 800197e:	431a      	orrs	r2, r3
 8001980:	4691      	mov	r9, r2
 8001982:	464d      	mov	r5, r9
 8001984:	1e6b      	subs	r3, r5, #1
 8001986:	419d      	sbcs	r5, r3
 8001988:	4335      	orrs	r5, r6
 800198a:	e778      	b.n	800187e <__aeabi_dadd+0x472>
 800198c:	464a      	mov	r2, r9
 800198e:	431a      	orrs	r2, r3
 8001990:	d000      	beq.n	8001994 <__aeabi_dadd+0x588>
 8001992:	e66b      	b.n	800166c <__aeabi_dadd+0x260>
 8001994:	076b      	lsls	r3, r5, #29
 8001996:	08f9      	lsrs	r1, r7, #3
 8001998:	4319      	orrs	r1, r3
 800199a:	08eb      	lsrs	r3, r5, #3
 800199c:	e680      	b.n	80016a0 <__aeabi_dadd+0x294>
 800199e:	4661      	mov	r1, ip
 80019a0:	4339      	orrs	r1, r7
 80019a2:	d054      	beq.n	8001a4e <__aeabi_dadd+0x642>
 80019a4:	4663      	mov	r3, ip
 80019a6:	08f9      	lsrs	r1, r7, #3
 80019a8:	075c      	lsls	r4, r3, #29
 80019aa:	4321      	orrs	r1, r4
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	0004      	movs	r4, r0
 80019b0:	e654      	b.n	800165c <__aeabi_dadd+0x250>
 80019b2:	464a      	mov	r2, r9
 80019b4:	1abd      	subs	r5, r7, r2
 80019b6:	42af      	cmp	r7, r5
 80019b8:	4189      	sbcs	r1, r1
 80019ba:	4662      	mov	r2, ip
 80019bc:	4249      	negs	r1, r1
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	1a5b      	subs	r3, r3, r1
 80019c2:	4698      	mov	r8, r3
 80019c4:	0004      	movs	r4, r0
 80019c6:	2601      	movs	r6, #1
 80019c8:	e56b      	b.n	80014a2 <__aeabi_dadd+0x96>
 80019ca:	464a      	mov	r2, r9
 80019cc:	1bd5      	subs	r5, r2, r7
 80019ce:	45a9      	cmp	r9, r5
 80019d0:	4189      	sbcs	r1, r1
 80019d2:	4662      	mov	r2, ip
 80019d4:	4249      	negs	r1, r1
 80019d6:	1a9a      	subs	r2, r3, r2
 80019d8:	1a52      	subs	r2, r2, r1
 80019da:	4690      	mov	r8, r2
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	d532      	bpl.n	8001a46 <__aeabi_dadd+0x63a>
 80019e0:	464a      	mov	r2, r9
 80019e2:	1abd      	subs	r5, r7, r2
 80019e4:	42af      	cmp	r7, r5
 80019e6:	4189      	sbcs	r1, r1
 80019e8:	4662      	mov	r2, ip
 80019ea:	4249      	negs	r1, r1
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	4698      	mov	r8, r3
 80019f2:	0004      	movs	r4, r0
 80019f4:	e584      	b.n	8001500 <__aeabi_dadd+0xf4>
 80019f6:	4663      	mov	r3, ip
 80019f8:	08f9      	lsrs	r1, r7, #3
 80019fa:	075a      	lsls	r2, r3, #29
 80019fc:	4311      	orrs	r1, r2
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	e64e      	b.n	80016a0 <__aeabi_dadd+0x294>
 8001a02:	08f9      	lsrs	r1, r7, #3
 8001a04:	0768      	lsls	r0, r5, #29
 8001a06:	4301      	orrs	r1, r0
 8001a08:	08eb      	lsrs	r3, r5, #3
 8001a0a:	e624      	b.n	8001656 <__aeabi_dadd+0x24a>
 8001a0c:	4662      	mov	r2, ip
 8001a0e:	433a      	orrs	r2, r7
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x608>
 8001a12:	e698      	b.n	8001746 <__aeabi_dadd+0x33a>
 8001a14:	464a      	mov	r2, r9
 8001a16:	08d1      	lsrs	r1, r2, #3
 8001a18:	075a      	lsls	r2, r3, #29
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	031b      	lsls	r3, r3, #12
 8001a22:	421a      	tst	r2, r3
 8001a24:	d008      	beq.n	8001a38 <__aeabi_dadd+0x62c>
 8001a26:	4660      	mov	r0, ip
 8001a28:	08c5      	lsrs	r5, r0, #3
 8001a2a:	421d      	tst	r5, r3
 8001a2c:	d104      	bne.n	8001a38 <__aeabi_dadd+0x62c>
 8001a2e:	4654      	mov	r4, sl
 8001a30:	002a      	movs	r2, r5
 8001a32:	08f9      	lsrs	r1, r7, #3
 8001a34:	0743      	lsls	r3, r0, #29
 8001a36:	4319      	orrs	r1, r3
 8001a38:	0f4b      	lsrs	r3, r1, #29
 8001a3a:	00c9      	lsls	r1, r1, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	08c9      	lsrs	r1, r1, #3
 8001a40:	4319      	orrs	r1, r3
 8001a42:	0013      	movs	r3, r2
 8001a44:	e62c      	b.n	80016a0 <__aeabi_dadd+0x294>
 8001a46:	4641      	mov	r1, r8
 8001a48:	4329      	orrs	r1, r5
 8001a4a:	d000      	beq.n	8001a4e <__aeabi_dadd+0x642>
 8001a4c:	e5fa      	b.n	8001644 <__aeabi_dadd+0x238>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	000a      	movs	r2, r1
 8001a52:	2400      	movs	r4, #0
 8001a54:	e602      	b.n	800165c <__aeabi_dadd+0x250>
 8001a56:	076b      	lsls	r3, r5, #29
 8001a58:	08f9      	lsrs	r1, r7, #3
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	08eb      	lsrs	r3, r5, #3
 8001a5e:	e5fd      	b.n	800165c <__aeabi_dadd+0x250>
 8001a60:	4663      	mov	r3, ip
 8001a62:	08f9      	lsrs	r1, r7, #3
 8001a64:	075b      	lsls	r3, r3, #29
 8001a66:	4319      	orrs	r1, r3
 8001a68:	4663      	mov	r3, ip
 8001a6a:	0004      	movs	r4, r0
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	e617      	b.n	80016a0 <__aeabi_dadd+0x294>
 8001a70:	003d      	movs	r5, r7
 8001a72:	444d      	add	r5, r9
 8001a74:	4463      	add	r3, ip
 8001a76:	454d      	cmp	r5, r9
 8001a78:	4189      	sbcs	r1, r1
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	4249      	negs	r1, r1
 8001a7e:	4488      	add	r8, r1
 8001a80:	4643      	mov	r3, r8
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x67c>
 8001a86:	e5dd      	b.n	8001644 <__aeabi_dadd+0x238>
 8001a88:	4642      	mov	r2, r8
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <__aeabi_dadd+0x6d0>)
 8001a8c:	2601      	movs	r6, #1
 8001a8e:	401a      	ands	r2, r3
 8001a90:	4690      	mov	r8, r2
 8001a92:	e5d7      	b.n	8001644 <__aeabi_dadd+0x238>
 8001a94:	0010      	movs	r0, r2
 8001a96:	001e      	movs	r6, r3
 8001a98:	3820      	subs	r0, #32
 8001a9a:	40c6      	lsrs	r6, r0
 8001a9c:	2a20      	cmp	r2, #32
 8001a9e:	d005      	beq.n	8001aac <__aeabi_dadd+0x6a0>
 8001aa0:	2040      	movs	r0, #64	; 0x40
 8001aa2:	1a82      	subs	r2, r0, r2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	464a      	mov	r2, r9
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	4691      	mov	r9, r2
 8001aac:	464d      	mov	r5, r9
 8001aae:	1e6b      	subs	r3, r5, #1
 8001ab0:	419d      	sbcs	r5, r3
 8001ab2:	4335      	orrs	r5, r6
 8001ab4:	e621      	b.n	80016fa <__aeabi_dadd+0x2ee>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	e540      	b.n	8001540 <__aeabi_dadd+0x134>
 8001abe:	464a      	mov	r2, r9
 8001ac0:	19d5      	adds	r5, r2, r7
 8001ac2:	42bd      	cmp	r5, r7
 8001ac4:	4189      	sbcs	r1, r1
 8001ac6:	4463      	add	r3, ip
 8001ac8:	4698      	mov	r8, r3
 8001aca:	4249      	negs	r1, r1
 8001acc:	4488      	add	r8, r1
 8001ace:	e5b3      	b.n	8001638 <__aeabi_dadd+0x22c>
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6cc>)
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	e533      	b.n	8001540 <__aeabi_dadd+0x134>
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	4681      	mov	r9, r0
 8001aee:	0005      	movs	r5, r0
 8001af0:	030c      	lsls	r4, r1, #12
 8001af2:	0048      	lsls	r0, r1, #1
 8001af4:	4692      	mov	sl, r2
 8001af6:	001f      	movs	r7, r3
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d40      	lsrs	r0, r0, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d059      	beq.n	8001bb8 <__aeabi_ddiv+0xd8>
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001b06:	4298      	cmp	r0, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_ddiv+0x2c>
 8001b0a:	e098      	b.n	8001c3e <__aeabi_ddiv+0x15e>
 8001b0c:	0f6b      	lsrs	r3, r5, #29
 8001b0e:	00e4      	lsls	r4, r4, #3
 8001b10:	431c      	orrs	r4, r3
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	4323      	orrs	r3, r4
 8001b18:	4698      	mov	r8, r3
 8001b1a:	4b83      	ldr	r3, [pc, #524]	; (8001d28 <__aeabi_ddiv+0x248>)
 8001b1c:	00ed      	lsls	r5, r5, #3
 8001b1e:	469b      	mov	fp, r3
 8001b20:	2300      	movs	r3, #0
 8001b22:	4699      	mov	r9, r3
 8001b24:	4483      	add	fp, r0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	033c      	lsls	r4, r7, #12
 8001b2a:	007b      	lsls	r3, r7, #1
 8001b2c:	4650      	mov	r0, sl
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	0d5b      	lsrs	r3, r3, #21
 8001b32:	0fff      	lsrs	r7, r7, #31
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d067      	beq.n	8001c08 <__aeabi_ddiv+0x128>
 8001b38:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d018      	beq.n	8001b70 <__aeabi_ddiv+0x90>
 8001b3e:	497a      	ldr	r1, [pc, #488]	; (8001d28 <__aeabi_ddiv+0x248>)
 8001b40:	0f42      	lsrs	r2, r0, #29
 8001b42:	468c      	mov	ip, r1
 8001b44:	00e4      	lsls	r4, r4, #3
 8001b46:	4659      	mov	r1, fp
 8001b48:	4314      	orrs	r4, r2
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	4463      	add	r3, ip
 8001b4e:	0412      	lsls	r2, r2, #16
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	4314      	orrs	r4, r2
 8001b54:	469b      	mov	fp, r3
 8001b56:	00c2      	lsls	r2, r0, #3
 8001b58:	2000      	movs	r0, #0
 8001b5a:	0033      	movs	r3, r6
 8001b5c:	407b      	eors	r3, r7
 8001b5e:	469a      	mov	sl, r3
 8001b60:	464b      	mov	r3, r9
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	d900      	bls.n	8001b68 <__aeabi_ddiv+0x88>
 8001b66:	e0ef      	b.n	8001d48 <__aeabi_ddiv+0x268>
 8001b68:	4970      	ldr	r1, [pc, #448]	; (8001d2c <__aeabi_ddiv+0x24c>)
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	58cb      	ldr	r3, [r1, r3]
 8001b6e:	469f      	mov	pc, r3
 8001b70:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <__aeabi_ddiv+0x250>)
 8001b72:	4652      	mov	r2, sl
 8001b74:	469c      	mov	ip, r3
 8001b76:	4322      	orrs	r2, r4
 8001b78:	44e3      	add	fp, ip
 8001b7a:	2a00      	cmp	r2, #0
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_ddiv+0xa0>
 8001b7e:	e095      	b.n	8001cac <__aeabi_ddiv+0x1cc>
 8001b80:	4649      	mov	r1, r9
 8001b82:	2302      	movs	r3, #2
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4689      	mov	r9, r1
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	e7e5      	b.n	8001b5a <__aeabi_ddiv+0x7a>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2400      	movs	r4, #0
 8001b92:	2500      	movs	r5, #0
 8001b94:	4652      	mov	r2, sl
 8001b96:	051b      	lsls	r3, r3, #20
 8001b98:	4323      	orrs	r3, r4
 8001b9a:	07d2      	lsls	r2, r2, #31
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	0028      	movs	r0, r5
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	b005      	add	sp, #20
 8001ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba6:	46bb      	mov	fp, r7
 8001ba8:	46b2      	mov	sl, r6
 8001baa:	46a9      	mov	r9, r5
 8001bac:	46a0      	mov	r8, r4
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb0:	2400      	movs	r4, #0
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001bb6:	e7ed      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001bb8:	464b      	mov	r3, r9
 8001bba:	4323      	orrs	r3, r4
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e089      	b.n	8001cd6 <__aeabi_ddiv+0x1f6>
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0xe8>
 8001bc6:	e1e0      	b.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001bc8:	0020      	movs	r0, r4
 8001bca:	f001 fb07 	bl	80031dc <__clzsi2>
 8001bce:	0001      	movs	r1, r0
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	390b      	subs	r1, #11
 8001bd4:	231d      	movs	r3, #29
 8001bd6:	1a5b      	subs	r3, r3, r1
 8001bd8:	4649      	mov	r1, r9
 8001bda:	0010      	movs	r0, r2
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	3808      	subs	r0, #8
 8001be0:	4084      	lsls	r4, r0
 8001be2:	000b      	movs	r3, r1
 8001be4:	464d      	mov	r5, r9
 8001be6:	4323      	orrs	r3, r4
 8001be8:	4698      	mov	r8, r3
 8001bea:	4085      	lsls	r5, r0
 8001bec:	4851      	ldr	r0, [pc, #324]	; (8001d34 <__aeabi_ddiv+0x254>)
 8001bee:	033c      	lsls	r4, r7, #12
 8001bf0:	1a83      	subs	r3, r0, r2
 8001bf2:	469b      	mov	fp, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	007b      	lsls	r3, r7, #1
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	0b24      	lsrs	r4, r4, #12
 8001c00:	0d5b      	lsrs	r3, r3, #21
 8001c02:	0fff      	lsrs	r7, r7, #31
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d197      	bne.n	8001b38 <__aeabi_ddiv+0x58>
 8001c08:	4652      	mov	r2, sl
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	d055      	beq.n	8001cba <__aeabi_ddiv+0x1da>
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d100      	bne.n	8001c14 <__aeabi_ddiv+0x134>
 8001c12:	e1ca      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001c14:	0020      	movs	r0, r4
 8001c16:	f001 fae1 	bl	80031dc <__clzsi2>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	3a0b      	subs	r2, #11
 8001c1e:	231d      	movs	r3, #29
 8001c20:	0001      	movs	r1, r0
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	4652      	mov	r2, sl
 8001c26:	3908      	subs	r1, #8
 8001c28:	40da      	lsrs	r2, r3
 8001c2a:	408c      	lsls	r4, r1
 8001c2c:	4314      	orrs	r4, r2
 8001c2e:	4652      	mov	r2, sl
 8001c30:	408a      	lsls	r2, r1
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <__aeabi_ddiv+0x258>)
 8001c34:	4458      	add	r0, fp
 8001c36:	469b      	mov	fp, r3
 8001c38:	4483      	add	fp, r0
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e78d      	b.n	8001b5a <__aeabi_ddiv+0x7a>
 8001c3e:	464b      	mov	r3, r9
 8001c40:	4323      	orrs	r3, r4
 8001c42:	4698      	mov	r8, r3
 8001c44:	d140      	bne.n	8001cc8 <__aeabi_ddiv+0x1e8>
 8001c46:	2308      	movs	r3, #8
 8001c48:	4699      	mov	r9, r3
 8001c4a:	3b06      	subs	r3, #6
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	4683      	mov	fp, r0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	e769      	b.n	8001b28 <__aeabi_ddiv+0x48>
 8001c54:	46b2      	mov	sl, r6
 8001c56:	9b00      	ldr	r3, [sp, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d0a9      	beq.n	8001bb0 <__aeabi_ddiv+0xd0>
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_ddiv+0x182>
 8001c60:	e211      	b.n	8002086 <__aeabi_ddiv+0x5a6>
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d093      	beq.n	8001b8e <__aeabi_ddiv+0xae>
 8001c66:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <__aeabi_ddiv+0x25c>)
 8001c68:	445a      	add	r2, fp
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	dc00      	bgt.n	8001c70 <__aeabi_ddiv+0x190>
 8001c6e:	e13c      	b.n	8001eea <__aeabi_ddiv+0x40a>
 8001c70:	076b      	lsls	r3, r5, #29
 8001c72:	d000      	beq.n	8001c76 <__aeabi_ddiv+0x196>
 8001c74:	e1a7      	b.n	8001fc6 <__aeabi_ddiv+0x4e6>
 8001c76:	08ed      	lsrs	r5, r5, #3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	01db      	lsls	r3, r3, #7
 8001c7c:	d506      	bpl.n	8001c8c <__aeabi_ddiv+0x1ac>
 8001c7e:	4642      	mov	r2, r8
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <__aeabi_ddiv+0x260>)
 8001c82:	401a      	ands	r2, r3
 8001c84:	4690      	mov	r8, r2
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	00d2      	lsls	r2, r2, #3
 8001c8a:	445a      	add	r2, fp
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <__aeabi_ddiv+0x264>)
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dc8e      	bgt.n	8001bb0 <__aeabi_ddiv+0xd0>
 8001c92:	4643      	mov	r3, r8
 8001c94:	0552      	lsls	r2, r2, #21
 8001c96:	0758      	lsls	r0, r3, #29
 8001c98:	025c      	lsls	r4, r3, #9
 8001c9a:	4305      	orrs	r5, r0
 8001c9c:	0b24      	lsrs	r4, r4, #12
 8001c9e:	0d53      	lsrs	r3, r2, #21
 8001ca0:	e778      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001ca2:	46ba      	mov	sl, r7
 8001ca4:	46a0      	mov	r8, r4
 8001ca6:	0015      	movs	r5, r2
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	e7d4      	b.n	8001c56 <__aeabi_ddiv+0x176>
 8001cac:	464a      	mov	r2, r9
 8001cae:	2303      	movs	r3, #3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	4691      	mov	r9, r2
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	e74f      	b.n	8001b5a <__aeabi_ddiv+0x7a>
 8001cba:	4649      	mov	r1, r9
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	4319      	orrs	r1, r3
 8001cc0:	4689      	mov	r9, r1
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e748      	b.n	8001b5a <__aeabi_ddiv+0x7a>
 8001cc8:	230c      	movs	r3, #12
 8001cca:	4699      	mov	r9, r3
 8001ccc:	3b09      	subs	r3, #9
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	4683      	mov	fp, r0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	e728      	b.n	8001b28 <__aeabi_ddiv+0x48>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	4699      	mov	r9, r3
 8001cda:	2300      	movs	r3, #0
 8001cdc:	469b      	mov	fp, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	e720      	b.n	8001b28 <__aeabi_ddiv+0x48>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2480      	movs	r4, #128	; 0x80
 8001cea:	469a      	mov	sl, r3
 8001cec:	2500      	movs	r5, #0
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001cf0:	0324      	lsls	r4, r4, #12
 8001cf2:	e74f      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	4219      	tst	r1, r3
 8001cfc:	d008      	beq.n	8001d10 <__aeabi_ddiv+0x230>
 8001cfe:	421c      	tst	r4, r3
 8001d00:	d106      	bne.n	8001d10 <__aeabi_ddiv+0x230>
 8001d02:	431c      	orrs	r4, r3
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	46ba      	mov	sl, r7
 8001d08:	0015      	movs	r5, r2
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001d0c:	0b24      	lsrs	r4, r4, #12
 8001d0e:	e741      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001d10:	2480      	movs	r4, #128	; 0x80
 8001d12:	4643      	mov	r3, r8
 8001d14:	0324      	lsls	r4, r4, #12
 8001d16:	431c      	orrs	r4, r3
 8001d18:	0324      	lsls	r4, r4, #12
 8001d1a:	46b2      	mov	sl, r6
 8001d1c:	4b01      	ldr	r3, [pc, #4]	; (8001d24 <__aeabi_ddiv+0x244>)
 8001d1e:	0b24      	lsrs	r4, r4, #12
 8001d20:	e738      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000007ff 	.word	0x000007ff
 8001d28:	fffffc01 	.word	0xfffffc01
 8001d2c:	080163a4 	.word	0x080163a4
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	fffffc0d 	.word	0xfffffc0d
 8001d38:	000003f3 	.word	0x000003f3
 8001d3c:	000003ff 	.word	0x000003ff
 8001d40:	feffffff 	.word	0xfeffffff
 8001d44:	000007fe 	.word	0x000007fe
 8001d48:	4544      	cmp	r4, r8
 8001d4a:	d200      	bcs.n	8001d4e <__aeabi_ddiv+0x26e>
 8001d4c:	e116      	b.n	8001f7c <__aeabi_ddiv+0x49c>
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_ddiv+0x272>
 8001d50:	e111      	b.n	8001f76 <__aeabi_ddiv+0x496>
 8001d52:	2301      	movs	r3, #1
 8001d54:	425b      	negs	r3, r3
 8001d56:	469c      	mov	ip, r3
 8001d58:	002e      	movs	r6, r5
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	44e3      	add	fp, ip
 8001d60:	0223      	lsls	r3, r4, #8
 8001d62:	0e14      	lsrs	r4, r2, #24
 8001d64:	431c      	orrs	r4, r3
 8001d66:	0c1b      	lsrs	r3, r3, #16
 8001d68:	4699      	mov	r9, r3
 8001d6a:	0423      	lsls	r3, r4, #16
 8001d6c:	0c1f      	lsrs	r7, r3, #16
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	4649      	mov	r1, r9
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	9701      	str	r7, [sp, #4]
 8001d76:	f7fe fa57 	bl	8000228 <__aeabi_uidivmod>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	437a      	muls	r2, r7
 8001d7e:	040b      	lsls	r3, r1, #16
 8001d80:	0c31      	lsrs	r1, r6, #16
 8001d82:	4680      	mov	r8, r0
 8001d84:	4319      	orrs	r1, r3
 8001d86:	428a      	cmp	r2, r1
 8001d88:	d90b      	bls.n	8001da2 <__aeabi_ddiv+0x2c2>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	425b      	negs	r3, r3
 8001d8e:	469c      	mov	ip, r3
 8001d90:	1909      	adds	r1, r1, r4
 8001d92:	44e0      	add	r8, ip
 8001d94:	428c      	cmp	r4, r1
 8001d96:	d804      	bhi.n	8001da2 <__aeabi_ddiv+0x2c2>
 8001d98:	428a      	cmp	r2, r1
 8001d9a:	d902      	bls.n	8001da2 <__aeabi_ddiv+0x2c2>
 8001d9c:	1e83      	subs	r3, r0, #2
 8001d9e:	4698      	mov	r8, r3
 8001da0:	1909      	adds	r1, r1, r4
 8001da2:	1a88      	subs	r0, r1, r2
 8001da4:	4649      	mov	r1, r9
 8001da6:	f7fe fa3f 	bl	8000228 <__aeabi_uidivmod>
 8001daa:	0409      	lsls	r1, r1, #16
 8001dac:	468c      	mov	ip, r1
 8001dae:	0431      	lsls	r1, r6, #16
 8001db0:	4666      	mov	r6, ip
 8001db2:	9a01      	ldr	r2, [sp, #4]
 8001db4:	0c09      	lsrs	r1, r1, #16
 8001db6:	4342      	muls	r2, r0
 8001db8:	0003      	movs	r3, r0
 8001dba:	4331      	orrs	r1, r6
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	d904      	bls.n	8001dca <__aeabi_ddiv+0x2ea>
 8001dc0:	1909      	adds	r1, r1, r4
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	428c      	cmp	r4, r1
 8001dc6:	d800      	bhi.n	8001dca <__aeabi_ddiv+0x2ea>
 8001dc8:	e111      	b.n	8001fee <__aeabi_ddiv+0x50e>
 8001dca:	1a89      	subs	r1, r1, r2
 8001dcc:	4642      	mov	r2, r8
 8001dce:	9e00      	ldr	r6, [sp, #0]
 8001dd0:	0412      	lsls	r2, r2, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	0c33      	lsrs	r3, r6, #16
 8001dd6:	001f      	movs	r7, r3
 8001dd8:	0c10      	lsrs	r0, r2, #16
 8001dda:	4690      	mov	r8, r2
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	0413      	lsls	r3, r2, #16
 8001de0:	0432      	lsls	r2, r6, #16
 8001de2:	0c16      	lsrs	r6, r2, #16
 8001de4:	0032      	movs	r2, r6
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	435a      	muls	r2, r3
 8001dea:	9603      	str	r6, [sp, #12]
 8001dec:	437b      	muls	r3, r7
 8001dee:	4346      	muls	r6, r0
 8001df0:	4378      	muls	r0, r7
 8001df2:	0c17      	lsrs	r7, r2, #16
 8001df4:	46bc      	mov	ip, r7
 8001df6:	199b      	adds	r3, r3, r6
 8001df8:	4463      	add	r3, ip
 8001dfa:	429e      	cmp	r6, r3
 8001dfc:	d903      	bls.n	8001e06 <__aeabi_ddiv+0x326>
 8001dfe:	2680      	movs	r6, #128	; 0x80
 8001e00:	0276      	lsls	r6, r6, #9
 8001e02:	46b4      	mov	ip, r6
 8001e04:	4460      	add	r0, ip
 8001e06:	0c1e      	lsrs	r6, r3, #16
 8001e08:	1830      	adds	r0, r6, r0
 8001e0a:	0416      	lsls	r6, r2, #16
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	0c36      	lsrs	r6, r6, #16
 8001e10:	199e      	adds	r6, r3, r6
 8001e12:	4281      	cmp	r1, r0
 8001e14:	d200      	bcs.n	8001e18 <__aeabi_ddiv+0x338>
 8001e16:	e09c      	b.n	8001f52 <__aeabi_ddiv+0x472>
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e1a:	e097      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001e1c:	1bae      	subs	r6, r5, r6
 8001e1e:	1a09      	subs	r1, r1, r0
 8001e20:	42b5      	cmp	r5, r6
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	4240      	negs	r0, r0
 8001e26:	1a08      	subs	r0, r1, r0
 8001e28:	4284      	cmp	r4, r0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0x34e>
 8001e2c:	e111      	b.n	8002052 <__aeabi_ddiv+0x572>
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe f9fa 	bl	8000228 <__aeabi_uidivmod>
 8001e34:	9a01      	ldr	r2, [sp, #4]
 8001e36:	040b      	lsls	r3, r1, #16
 8001e38:	4342      	muls	r2, r0
 8001e3a:	0c31      	lsrs	r1, r6, #16
 8001e3c:	0005      	movs	r5, r0
 8001e3e:	4319      	orrs	r1, r3
 8001e40:	428a      	cmp	r2, r1
 8001e42:	d907      	bls.n	8001e54 <__aeabi_ddiv+0x374>
 8001e44:	1909      	adds	r1, r1, r4
 8001e46:	3d01      	subs	r5, #1
 8001e48:	428c      	cmp	r4, r1
 8001e4a:	d803      	bhi.n	8001e54 <__aeabi_ddiv+0x374>
 8001e4c:	428a      	cmp	r2, r1
 8001e4e:	d901      	bls.n	8001e54 <__aeabi_ddiv+0x374>
 8001e50:	1e85      	subs	r5, r0, #2
 8001e52:	1909      	adds	r1, r1, r4
 8001e54:	1a88      	subs	r0, r1, r2
 8001e56:	4649      	mov	r1, r9
 8001e58:	f7fe f9e6 	bl	8000228 <__aeabi_uidivmod>
 8001e5c:	0409      	lsls	r1, r1, #16
 8001e5e:	468c      	mov	ip, r1
 8001e60:	0431      	lsls	r1, r6, #16
 8001e62:	4666      	mov	r6, ip
 8001e64:	9a01      	ldr	r2, [sp, #4]
 8001e66:	0c09      	lsrs	r1, r1, #16
 8001e68:	4342      	muls	r2, r0
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	4331      	orrs	r1, r6
 8001e6e:	428a      	cmp	r2, r1
 8001e70:	d907      	bls.n	8001e82 <__aeabi_ddiv+0x3a2>
 8001e72:	1909      	adds	r1, r1, r4
 8001e74:	3b01      	subs	r3, #1
 8001e76:	428c      	cmp	r4, r1
 8001e78:	d803      	bhi.n	8001e82 <__aeabi_ddiv+0x3a2>
 8001e7a:	428a      	cmp	r2, r1
 8001e7c:	d901      	bls.n	8001e82 <__aeabi_ddiv+0x3a2>
 8001e7e:	1e83      	subs	r3, r0, #2
 8001e80:	1909      	adds	r1, r1, r4
 8001e82:	9e03      	ldr	r6, [sp, #12]
 8001e84:	1a89      	subs	r1, r1, r2
 8001e86:	0032      	movs	r2, r6
 8001e88:	042d      	lsls	r5, r5, #16
 8001e8a:	431d      	orrs	r5, r3
 8001e8c:	9f02      	ldr	r7, [sp, #8]
 8001e8e:	042b      	lsls	r3, r5, #16
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	435a      	muls	r2, r3
 8001e94:	437b      	muls	r3, r7
 8001e96:	469c      	mov	ip, r3
 8001e98:	0c28      	lsrs	r0, r5, #16
 8001e9a:	4346      	muls	r6, r0
 8001e9c:	0c13      	lsrs	r3, r2, #16
 8001e9e:	44b4      	add	ip, r6
 8001ea0:	4463      	add	r3, ip
 8001ea2:	4378      	muls	r0, r7
 8001ea4:	429e      	cmp	r6, r3
 8001ea6:	d903      	bls.n	8001eb0 <__aeabi_ddiv+0x3d0>
 8001ea8:	2680      	movs	r6, #128	; 0x80
 8001eaa:	0276      	lsls	r6, r6, #9
 8001eac:	46b4      	mov	ip, r6
 8001eae:	4460      	add	r0, ip
 8001eb0:	0c1e      	lsrs	r6, r3, #16
 8001eb2:	0412      	lsls	r2, r2, #16
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	0c12      	lsrs	r2, r2, #16
 8001eb8:	1830      	adds	r0, r6, r0
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	4281      	cmp	r1, r0
 8001ebe:	d306      	bcc.n	8001ece <__aeabi_ddiv+0x3ee>
 8001ec0:	d002      	beq.n	8001ec8 <__aeabi_ddiv+0x3e8>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	431d      	orrs	r5, r3
 8001ec6:	e6ce      	b.n	8001c66 <__aeabi_ddiv+0x186>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_ddiv+0x3ee>
 8001ecc:	e6cb      	b.n	8001c66 <__aeabi_ddiv+0x186>
 8001ece:	1861      	adds	r1, r4, r1
 8001ed0:	1e6e      	subs	r6, r5, #1
 8001ed2:	42a1      	cmp	r1, r4
 8001ed4:	d200      	bcs.n	8001ed8 <__aeabi_ddiv+0x3f8>
 8001ed6:	e0a4      	b.n	8002022 <__aeabi_ddiv+0x542>
 8001ed8:	4281      	cmp	r1, r0
 8001eda:	d200      	bcs.n	8001ede <__aeabi_ddiv+0x3fe>
 8001edc:	e0c9      	b.n	8002072 <__aeabi_ddiv+0x592>
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x402>
 8001ee0:	e0d9      	b.n	8002096 <__aeabi_ddiv+0x5b6>
 8001ee2:	0035      	movs	r5, r6
 8001ee4:	e7ed      	b.n	8001ec2 <__aeabi_ddiv+0x3e2>
 8001ee6:	2501      	movs	r5, #1
 8001ee8:	426d      	negs	r5, r5
 8001eea:	2101      	movs	r1, #1
 8001eec:	1a89      	subs	r1, r1, r2
 8001eee:	2938      	cmp	r1, #56	; 0x38
 8001ef0:	dd00      	ble.n	8001ef4 <__aeabi_ddiv+0x414>
 8001ef2:	e64c      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001ef4:	291f      	cmp	r1, #31
 8001ef6:	dc00      	bgt.n	8001efa <__aeabi_ddiv+0x41a>
 8001ef8:	e07f      	b.n	8001ffa <__aeabi_ddiv+0x51a>
 8001efa:	231f      	movs	r3, #31
 8001efc:	425b      	negs	r3, r3
 8001efe:	1a9a      	subs	r2, r3, r2
 8001f00:	4643      	mov	r3, r8
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	2920      	cmp	r1, #32
 8001f06:	d004      	beq.n	8001f12 <__aeabi_ddiv+0x432>
 8001f08:	4644      	mov	r4, r8
 8001f0a:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <__aeabi_ddiv+0x5c0>)
 8001f0c:	445a      	add	r2, fp
 8001f0e:	4094      	lsls	r4, r2
 8001f10:	4325      	orrs	r5, r4
 8001f12:	1e6a      	subs	r2, r5, #1
 8001f14:	4195      	sbcs	r5, r2
 8001f16:	2207      	movs	r2, #7
 8001f18:	432b      	orrs	r3, r5
 8001f1a:	0015      	movs	r5, r2
 8001f1c:	2400      	movs	r4, #0
 8001f1e:	401d      	ands	r5, r3
 8001f20:	421a      	tst	r2, r3
 8001f22:	d100      	bne.n	8001f26 <__aeabi_ddiv+0x446>
 8001f24:	e0a1      	b.n	800206a <__aeabi_ddiv+0x58a>
 8001f26:	220f      	movs	r2, #15
 8001f28:	2400      	movs	r4, #0
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	2a04      	cmp	r2, #4
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_ddiv+0x452>
 8001f30:	e098      	b.n	8002064 <__aeabi_ddiv+0x584>
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	429a      	cmp	r2, r3
 8001f36:	419b      	sbcs	r3, r3
 8001f38:	425b      	negs	r3, r3
 8001f3a:	18e4      	adds	r4, r4, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	0222      	lsls	r2, r4, #8
 8001f40:	d400      	bmi.n	8001f44 <__aeabi_ddiv+0x464>
 8001f42:	e08f      	b.n	8002064 <__aeabi_ddiv+0x584>
 8001f44:	2301      	movs	r3, #1
 8001f46:	2400      	movs	r4, #0
 8001f48:	2500      	movs	r5, #0
 8001f4a:	e623      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8001f4c:	42b5      	cmp	r5, r6
 8001f4e:	d300      	bcc.n	8001f52 <__aeabi_ddiv+0x472>
 8001f50:	e764      	b.n	8001e1c <__aeabi_ddiv+0x33c>
 8001f52:	4643      	mov	r3, r8
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	469c      	mov	ip, r3
 8001f5a:	4465      	add	r5, ip
 8001f5c:	001f      	movs	r7, r3
 8001f5e:	429d      	cmp	r5, r3
 8001f60:	419b      	sbcs	r3, r3
 8001f62:	425b      	negs	r3, r3
 8001f64:	191b      	adds	r3, r3, r4
 8001f66:	18c9      	adds	r1, r1, r3
 8001f68:	428c      	cmp	r4, r1
 8001f6a:	d23a      	bcs.n	8001fe2 <__aeabi_ddiv+0x502>
 8001f6c:	4288      	cmp	r0, r1
 8001f6e:	d863      	bhi.n	8002038 <__aeabi_ddiv+0x558>
 8001f70:	d060      	beq.n	8002034 <__aeabi_ddiv+0x554>
 8001f72:	4690      	mov	r8, r2
 8001f74:	e752      	b.n	8001e1c <__aeabi_ddiv+0x33c>
 8001f76:	42aa      	cmp	r2, r5
 8001f78:	d900      	bls.n	8001f7c <__aeabi_ddiv+0x49c>
 8001f7a:	e6ea      	b.n	8001d52 <__aeabi_ddiv+0x272>
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	07de      	lsls	r6, r3, #31
 8001f80:	0858      	lsrs	r0, r3, #1
 8001f82:	086b      	lsrs	r3, r5, #1
 8001f84:	431e      	orrs	r6, r3
 8001f86:	07ed      	lsls	r5, r5, #31
 8001f88:	e6ea      	b.n	8001d60 <__aeabi_ddiv+0x280>
 8001f8a:	4648      	mov	r0, r9
 8001f8c:	f001 f926 	bl	80031dc <__clzsi2>
 8001f90:	0001      	movs	r1, r0
 8001f92:	0002      	movs	r2, r0
 8001f94:	3115      	adds	r1, #21
 8001f96:	3220      	adds	r2, #32
 8001f98:	291c      	cmp	r1, #28
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e61a      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4083      	lsls	r3, r0
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	e620      	b.n	8001bec <__aeabi_ddiv+0x10c>
 8001faa:	f001 f917 	bl	80031dc <__clzsi2>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	3215      	adds	r2, #21
 8001fb4:	3020      	adds	r0, #32
 8001fb6:	2a1c      	cmp	r2, #28
 8001fb8:	dc00      	bgt.n	8001fbc <__aeabi_ddiv+0x4dc>
 8001fba:	e630      	b.n	8001c1e <__aeabi_ddiv+0x13e>
 8001fbc:	4654      	mov	r4, sl
 8001fbe:	3b08      	subs	r3, #8
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	409c      	lsls	r4, r3
 8001fc4:	e635      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	402b      	ands	r3, r5
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_ddiv+0x4f0>
 8001fce:	e652      	b.n	8001c76 <__aeabi_ddiv+0x196>
 8001fd0:	2305      	movs	r3, #5
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	42ab      	cmp	r3, r5
 8001fd6:	419b      	sbcs	r3, r3
 8001fd8:	3504      	adds	r5, #4
 8001fda:	425b      	negs	r3, r3
 8001fdc:	08ed      	lsrs	r5, r5, #3
 8001fde:	4498      	add	r8, r3
 8001fe0:	e64a      	b.n	8001c78 <__aeabi_ddiv+0x198>
 8001fe2:	428c      	cmp	r4, r1
 8001fe4:	d1c5      	bne.n	8001f72 <__aeabi_ddiv+0x492>
 8001fe6:	42af      	cmp	r7, r5
 8001fe8:	d9c0      	bls.n	8001f6c <__aeabi_ddiv+0x48c>
 8001fea:	4690      	mov	r8, r2
 8001fec:	e716      	b.n	8001e1c <__aeabi_ddiv+0x33c>
 8001fee:	428a      	cmp	r2, r1
 8001ff0:	d800      	bhi.n	8001ff4 <__aeabi_ddiv+0x514>
 8001ff2:	e6ea      	b.n	8001dca <__aeabi_ddiv+0x2ea>
 8001ff4:	1e83      	subs	r3, r0, #2
 8001ff6:	1909      	adds	r1, r1, r4
 8001ff8:	e6e7      	b.n	8001dca <__aeabi_ddiv+0x2ea>
 8001ffa:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <__aeabi_ddiv+0x5c4>)
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	445a      	add	r2, fp
 8002000:	4643      	mov	r3, r8
 8002002:	4095      	lsls	r5, r2
 8002004:	4093      	lsls	r3, r2
 8002006:	40c8      	lsrs	r0, r1
 8002008:	1e6a      	subs	r2, r5, #1
 800200a:	4195      	sbcs	r5, r2
 800200c:	4644      	mov	r4, r8
 800200e:	4303      	orrs	r3, r0
 8002010:	432b      	orrs	r3, r5
 8002012:	40cc      	lsrs	r4, r1
 8002014:	075a      	lsls	r2, r3, #29
 8002016:	d092      	beq.n	8001f3e <__aeabi_ddiv+0x45e>
 8002018:	220f      	movs	r2, #15
 800201a:	401a      	ands	r2, r3
 800201c:	2a04      	cmp	r2, #4
 800201e:	d188      	bne.n	8001f32 <__aeabi_ddiv+0x452>
 8002020:	e78d      	b.n	8001f3e <__aeabi_ddiv+0x45e>
 8002022:	0035      	movs	r5, r6
 8002024:	4281      	cmp	r1, r0
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x54a>
 8002028:	e74b      	b.n	8001ec2 <__aeabi_ddiv+0x3e2>
 800202a:	9a00      	ldr	r2, [sp, #0]
 800202c:	4293      	cmp	r3, r2
 800202e:	d000      	beq.n	8002032 <__aeabi_ddiv+0x552>
 8002030:	e747      	b.n	8001ec2 <__aeabi_ddiv+0x3e2>
 8002032:	e618      	b.n	8001c66 <__aeabi_ddiv+0x186>
 8002034:	42ae      	cmp	r6, r5
 8002036:	d99c      	bls.n	8001f72 <__aeabi_ddiv+0x492>
 8002038:	2302      	movs	r3, #2
 800203a:	425b      	negs	r3, r3
 800203c:	469c      	mov	ip, r3
 800203e:	9b00      	ldr	r3, [sp, #0]
 8002040:	44e0      	add	r8, ip
 8002042:	469c      	mov	ip, r3
 8002044:	4465      	add	r5, ip
 8002046:	429d      	cmp	r5, r3
 8002048:	419b      	sbcs	r3, r3
 800204a:	425b      	negs	r3, r3
 800204c:	191b      	adds	r3, r3, r4
 800204e:	18c9      	adds	r1, r1, r3
 8002050:	e6e4      	b.n	8001e1c <__aeabi_ddiv+0x33c>
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <__aeabi_ddiv+0x5c8>)
 8002054:	445a      	add	r2, fp
 8002056:	2a00      	cmp	r2, #0
 8002058:	dc00      	bgt.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e744      	b.n	8001ee6 <__aeabi_ddiv+0x406>
 800205c:	2301      	movs	r3, #1
 800205e:	2500      	movs	r5, #0
 8002060:	4498      	add	r8, r3
 8002062:	e609      	b.n	8001c78 <__aeabi_ddiv+0x198>
 8002064:	0765      	lsls	r5, r4, #29
 8002066:	0264      	lsls	r4, r4, #9
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	431d      	orrs	r5, r3
 800206e:	2300      	movs	r3, #0
 8002070:	e590      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8002072:	9e00      	ldr	r6, [sp, #0]
 8002074:	3d02      	subs	r5, #2
 8002076:	0072      	lsls	r2, r6, #1
 8002078:	42b2      	cmp	r2, r6
 800207a:	41bf      	sbcs	r7, r7
 800207c:	427f      	negs	r7, r7
 800207e:	193c      	adds	r4, r7, r4
 8002080:	1909      	adds	r1, r1, r4
 8002082:	9200      	str	r2, [sp, #0]
 8002084:	e7ce      	b.n	8002024 <__aeabi_ddiv+0x544>
 8002086:	2480      	movs	r4, #128	; 0x80
 8002088:	4643      	mov	r3, r8
 800208a:	0324      	lsls	r4, r4, #12
 800208c:	431c      	orrs	r4, r3
 800208e:	0324      	lsls	r4, r4, #12
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8002092:	0b24      	lsrs	r4, r4, #12
 8002094:	e57e      	b.n	8001b94 <__aeabi_ddiv+0xb4>
 8002096:	9a00      	ldr	r2, [sp, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d3ea      	bcc.n	8002072 <__aeabi_ddiv+0x592>
 800209c:	0035      	movs	r5, r6
 800209e:	e7c4      	b.n	800202a <__aeabi_ddiv+0x54a>
 80020a0:	0000043e 	.word	0x0000043e
 80020a4:	0000041e 	.word	0x0000041e
 80020a8:	000003ff 	.word	0x000003ff
 80020ac:	000007ff 	.word	0x000007ff

080020b0 <__eqdf2>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	464f      	mov	r7, r9
 80020b4:	4646      	mov	r6, r8
 80020b6:	46d6      	mov	lr, sl
 80020b8:	4694      	mov	ip, r2
 80020ba:	4691      	mov	r9, r2
 80020bc:	031a      	lsls	r2, r3, #12
 80020be:	0b12      	lsrs	r2, r2, #12
 80020c0:	4d18      	ldr	r5, [pc, #96]	; (8002124 <__eqdf2+0x74>)
 80020c2:	b5c0      	push	{r6, r7, lr}
 80020c4:	004c      	lsls	r4, r1, #1
 80020c6:	030f      	lsls	r7, r1, #12
 80020c8:	4692      	mov	sl, r2
 80020ca:	005a      	lsls	r2, r3, #1
 80020cc:	0006      	movs	r6, r0
 80020ce:	4680      	mov	r8, r0
 80020d0:	0b3f      	lsrs	r7, r7, #12
 80020d2:	2001      	movs	r0, #1
 80020d4:	0d64      	lsrs	r4, r4, #21
 80020d6:	0fc9      	lsrs	r1, r1, #31
 80020d8:	0d52      	lsrs	r2, r2, #21
 80020da:	0fdb      	lsrs	r3, r3, #31
 80020dc:	42ac      	cmp	r4, r5
 80020de:	d00a      	beq.n	80020f6 <__eqdf2+0x46>
 80020e0:	42aa      	cmp	r2, r5
 80020e2:	d003      	beq.n	80020ec <__eqdf2+0x3c>
 80020e4:	4294      	cmp	r4, r2
 80020e6:	d101      	bne.n	80020ec <__eqdf2+0x3c>
 80020e8:	4557      	cmp	r7, sl
 80020ea:	d00d      	beq.n	8002108 <__eqdf2+0x58>
 80020ec:	bce0      	pop	{r5, r6, r7}
 80020ee:	46ba      	mov	sl, r7
 80020f0:	46b1      	mov	r9, r6
 80020f2:	46a8      	mov	r8, r5
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	003d      	movs	r5, r7
 80020f8:	4335      	orrs	r5, r6
 80020fa:	d1f7      	bne.n	80020ec <__eqdf2+0x3c>
 80020fc:	42a2      	cmp	r2, r4
 80020fe:	d1f5      	bne.n	80020ec <__eqdf2+0x3c>
 8002100:	4652      	mov	r2, sl
 8002102:	4665      	mov	r5, ip
 8002104:	432a      	orrs	r2, r5
 8002106:	d1f1      	bne.n	80020ec <__eqdf2+0x3c>
 8002108:	2001      	movs	r0, #1
 800210a:	45c8      	cmp	r8, r9
 800210c:	d1ee      	bne.n	80020ec <__eqdf2+0x3c>
 800210e:	4299      	cmp	r1, r3
 8002110:	d006      	beq.n	8002120 <__eqdf2+0x70>
 8002112:	2c00      	cmp	r4, #0
 8002114:	d1ea      	bne.n	80020ec <__eqdf2+0x3c>
 8002116:	433e      	orrs	r6, r7
 8002118:	0030      	movs	r0, r6
 800211a:	1e46      	subs	r6, r0, #1
 800211c:	41b0      	sbcs	r0, r6
 800211e:	e7e5      	b.n	80020ec <__eqdf2+0x3c>
 8002120:	2000      	movs	r0, #0
 8002122:	e7e3      	b.n	80020ec <__eqdf2+0x3c>
 8002124:	000007ff 	.word	0x000007ff

08002128 <__gedf2>:
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	464e      	mov	r6, r9
 800212c:	4645      	mov	r5, r8
 800212e:	4657      	mov	r7, sl
 8002130:	46de      	mov	lr, fp
 8002132:	0004      	movs	r4, r0
 8002134:	0018      	movs	r0, r3
 8002136:	b5e0      	push	{r5, r6, r7, lr}
 8002138:	0016      	movs	r6, r2
 800213a:	031b      	lsls	r3, r3, #12
 800213c:	0b1b      	lsrs	r3, r3, #12
 800213e:	4d32      	ldr	r5, [pc, #200]	; (8002208 <__gedf2+0xe0>)
 8002140:	030f      	lsls	r7, r1, #12
 8002142:	004a      	lsls	r2, r1, #1
 8002144:	4699      	mov	r9, r3
 8002146:	0043      	lsls	r3, r0, #1
 8002148:	46a4      	mov	ip, r4
 800214a:	46b0      	mov	r8, r6
 800214c:	0b3f      	lsrs	r7, r7, #12
 800214e:	0d52      	lsrs	r2, r2, #21
 8002150:	0fc9      	lsrs	r1, r1, #31
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	0fc0      	lsrs	r0, r0, #31
 8002156:	42aa      	cmp	r2, r5
 8002158:	d029      	beq.n	80021ae <__gedf2+0x86>
 800215a:	42ab      	cmp	r3, r5
 800215c:	d018      	beq.n	8002190 <__gedf2+0x68>
 800215e:	2a00      	cmp	r2, #0
 8002160:	d12a      	bne.n	80021b8 <__gedf2+0x90>
 8002162:	433c      	orrs	r4, r7
 8002164:	46a3      	mov	fp, r4
 8002166:	4265      	negs	r5, r4
 8002168:	4165      	adcs	r5, r4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <__gedf2+0x4c>
 800216e:	464c      	mov	r4, r9
 8002170:	4326      	orrs	r6, r4
 8002172:	d027      	beq.n	80021c4 <__gedf2+0x9c>
 8002174:	2d00      	cmp	r5, #0
 8002176:	d115      	bne.n	80021a4 <__gedf2+0x7c>
 8002178:	4281      	cmp	r1, r0
 800217a:	d028      	beq.n	80021ce <__gedf2+0xa6>
 800217c:	2002      	movs	r0, #2
 800217e:	3901      	subs	r1, #1
 8002180:	4008      	ands	r0, r1
 8002182:	3801      	subs	r0, #1
 8002184:	bcf0      	pop	{r4, r5, r6, r7}
 8002186:	46bb      	mov	fp, r7
 8002188:	46b2      	mov	sl, r6
 800218a:	46a9      	mov	r9, r5
 800218c:	46a0      	mov	r8, r4
 800218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002190:	464d      	mov	r5, r9
 8002192:	432e      	orrs	r6, r5
 8002194:	d12f      	bne.n	80021f6 <__gedf2+0xce>
 8002196:	2a00      	cmp	r2, #0
 8002198:	d1ee      	bne.n	8002178 <__gedf2+0x50>
 800219a:	433c      	orrs	r4, r7
 800219c:	4265      	negs	r5, r4
 800219e:	4165      	adcs	r5, r4
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	d0e9      	beq.n	8002178 <__gedf2+0x50>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d1ed      	bne.n	8002184 <__gedf2+0x5c>
 80021a8:	2001      	movs	r0, #1
 80021aa:	4240      	negs	r0, r0
 80021ac:	e7ea      	b.n	8002184 <__gedf2+0x5c>
 80021ae:	003d      	movs	r5, r7
 80021b0:	4325      	orrs	r5, r4
 80021b2:	d120      	bne.n	80021f6 <__gedf2+0xce>
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d0eb      	beq.n	8002190 <__gedf2+0x68>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1dd      	bne.n	8002178 <__gedf2+0x50>
 80021bc:	464c      	mov	r4, r9
 80021be:	4326      	orrs	r6, r4
 80021c0:	d1da      	bne.n	8002178 <__gedf2+0x50>
 80021c2:	e7db      	b.n	800217c <__gedf2+0x54>
 80021c4:	465b      	mov	r3, fp
 80021c6:	2000      	movs	r0, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0db      	beq.n	8002184 <__gedf2+0x5c>
 80021cc:	e7d6      	b.n	800217c <__gedf2+0x54>
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dc0a      	bgt.n	80021e8 <__gedf2+0xc0>
 80021d2:	dbe7      	blt.n	80021a4 <__gedf2+0x7c>
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d8d1      	bhi.n	800217c <__gedf2+0x54>
 80021d8:	d010      	beq.n	80021fc <__gedf2+0xd4>
 80021da:	2000      	movs	r0, #0
 80021dc:	454f      	cmp	r7, r9
 80021de:	d2d1      	bcs.n	8002184 <__gedf2+0x5c>
 80021e0:	2900      	cmp	r1, #0
 80021e2:	d0e1      	beq.n	80021a8 <__gedf2+0x80>
 80021e4:	0008      	movs	r0, r1
 80021e6:	e7cd      	b.n	8002184 <__gedf2+0x5c>
 80021e8:	4243      	negs	r3, r0
 80021ea:	4158      	adcs	r0, r3
 80021ec:	2302      	movs	r3, #2
 80021ee:	4240      	negs	r0, r0
 80021f0:	4018      	ands	r0, r3
 80021f2:	3801      	subs	r0, #1
 80021f4:	e7c6      	b.n	8002184 <__gedf2+0x5c>
 80021f6:	2002      	movs	r0, #2
 80021f8:	4240      	negs	r0, r0
 80021fa:	e7c3      	b.n	8002184 <__gedf2+0x5c>
 80021fc:	45c4      	cmp	ip, r8
 80021fe:	d8bd      	bhi.n	800217c <__gedf2+0x54>
 8002200:	2000      	movs	r0, #0
 8002202:	45c4      	cmp	ip, r8
 8002204:	d2be      	bcs.n	8002184 <__gedf2+0x5c>
 8002206:	e7eb      	b.n	80021e0 <__gedf2+0xb8>
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	464e      	mov	r6, r9
 8002210:	4645      	mov	r5, r8
 8002212:	4657      	mov	r7, sl
 8002214:	46de      	mov	lr, fp
 8002216:	0004      	movs	r4, r0
 8002218:	0018      	movs	r0, r3
 800221a:	b5e0      	push	{r5, r6, r7, lr}
 800221c:	0016      	movs	r6, r2
 800221e:	031b      	lsls	r3, r3, #12
 8002220:	0b1b      	lsrs	r3, r3, #12
 8002222:	4d31      	ldr	r5, [pc, #196]	; (80022e8 <__ledf2+0xdc>)
 8002224:	030f      	lsls	r7, r1, #12
 8002226:	004a      	lsls	r2, r1, #1
 8002228:	4699      	mov	r9, r3
 800222a:	0043      	lsls	r3, r0, #1
 800222c:	46a4      	mov	ip, r4
 800222e:	46b0      	mov	r8, r6
 8002230:	0b3f      	lsrs	r7, r7, #12
 8002232:	0d52      	lsrs	r2, r2, #21
 8002234:	0fc9      	lsrs	r1, r1, #31
 8002236:	0d5b      	lsrs	r3, r3, #21
 8002238:	0fc0      	lsrs	r0, r0, #31
 800223a:	42aa      	cmp	r2, r5
 800223c:	d011      	beq.n	8002262 <__ledf2+0x56>
 800223e:	42ab      	cmp	r3, r5
 8002240:	d014      	beq.n	800226c <__ledf2+0x60>
 8002242:	2a00      	cmp	r2, #0
 8002244:	d12f      	bne.n	80022a6 <__ledf2+0x9a>
 8002246:	433c      	orrs	r4, r7
 8002248:	46a3      	mov	fp, r4
 800224a:	4265      	negs	r5, r4
 800224c:	4165      	adcs	r5, r4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <__ledf2+0x70>
 8002252:	464c      	mov	r4, r9
 8002254:	4326      	orrs	r6, r4
 8002256:	d111      	bne.n	800227c <__ledf2+0x70>
 8002258:	465b      	mov	r3, fp
 800225a:	2000      	movs	r0, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <__ledf2+0x84>
 8002260:	e010      	b.n	8002284 <__ledf2+0x78>
 8002262:	003d      	movs	r5, r7
 8002264:	4325      	orrs	r5, r4
 8002266:	d112      	bne.n	800228e <__ledf2+0x82>
 8002268:	4293      	cmp	r3, r2
 800226a:	d11c      	bne.n	80022a6 <__ledf2+0x9a>
 800226c:	464d      	mov	r5, r9
 800226e:	432e      	orrs	r6, r5
 8002270:	d10d      	bne.n	800228e <__ledf2+0x82>
 8002272:	2a00      	cmp	r2, #0
 8002274:	d104      	bne.n	8002280 <__ledf2+0x74>
 8002276:	433c      	orrs	r4, r7
 8002278:	4265      	negs	r5, r4
 800227a:	4165      	adcs	r5, r4
 800227c:	2d00      	cmp	r5, #0
 800227e:	d10d      	bne.n	800229c <__ledf2+0x90>
 8002280:	4281      	cmp	r1, r0
 8002282:	d016      	beq.n	80022b2 <__ledf2+0xa6>
 8002284:	2002      	movs	r0, #2
 8002286:	3901      	subs	r1, #1
 8002288:	4008      	ands	r0, r1
 800228a:	3801      	subs	r0, #1
 800228c:	e000      	b.n	8002290 <__ledf2+0x84>
 800228e:	2002      	movs	r0, #2
 8002290:	bcf0      	pop	{r4, r5, r6, r7}
 8002292:	46bb      	mov	fp, r7
 8002294:	46b2      	mov	sl, r6
 8002296:	46a9      	mov	r9, r5
 8002298:	46a0      	mov	r8, r4
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229c:	2800      	cmp	r0, #0
 800229e:	d1f7      	bne.n	8002290 <__ledf2+0x84>
 80022a0:	2001      	movs	r0, #1
 80022a2:	4240      	negs	r0, r0
 80022a4:	e7f4      	b.n	8002290 <__ledf2+0x84>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ea      	bne.n	8002280 <__ledf2+0x74>
 80022aa:	464c      	mov	r4, r9
 80022ac:	4326      	orrs	r6, r4
 80022ae:	d1e7      	bne.n	8002280 <__ledf2+0x74>
 80022b0:	e7e8      	b.n	8002284 <__ledf2+0x78>
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dd06      	ble.n	80022c4 <__ledf2+0xb8>
 80022b6:	4243      	negs	r3, r0
 80022b8:	4158      	adcs	r0, r3
 80022ba:	2302      	movs	r3, #2
 80022bc:	4240      	negs	r0, r0
 80022be:	4018      	ands	r0, r3
 80022c0:	3801      	subs	r0, #1
 80022c2:	e7e5      	b.n	8002290 <__ledf2+0x84>
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbe9      	blt.n	800229c <__ledf2+0x90>
 80022c8:	454f      	cmp	r7, r9
 80022ca:	d8db      	bhi.n	8002284 <__ledf2+0x78>
 80022cc:	d006      	beq.n	80022dc <__ledf2+0xd0>
 80022ce:	2000      	movs	r0, #0
 80022d0:	454f      	cmp	r7, r9
 80022d2:	d2dd      	bcs.n	8002290 <__ledf2+0x84>
 80022d4:	2900      	cmp	r1, #0
 80022d6:	d0e3      	beq.n	80022a0 <__ledf2+0x94>
 80022d8:	0008      	movs	r0, r1
 80022da:	e7d9      	b.n	8002290 <__ledf2+0x84>
 80022dc:	45c4      	cmp	ip, r8
 80022de:	d8d1      	bhi.n	8002284 <__ledf2+0x78>
 80022e0:	2000      	movs	r0, #0
 80022e2:	45c4      	cmp	ip, r8
 80022e4:	d2d4      	bcs.n	8002290 <__ledf2+0x84>
 80022e6:	e7f5      	b.n	80022d4 <__ledf2+0xc8>
 80022e8:	000007ff 	.word	0x000007ff

080022ec <__aeabi_dmul>:
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	4657      	mov	r7, sl
 80022f0:	464e      	mov	r6, r9
 80022f2:	4645      	mov	r5, r8
 80022f4:	46de      	mov	lr, fp
 80022f6:	b5e0      	push	{r5, r6, r7, lr}
 80022f8:	4698      	mov	r8, r3
 80022fa:	030c      	lsls	r4, r1, #12
 80022fc:	004b      	lsls	r3, r1, #1
 80022fe:	0006      	movs	r6, r0
 8002300:	4692      	mov	sl, r2
 8002302:	b087      	sub	sp, #28
 8002304:	0b24      	lsrs	r4, r4, #12
 8002306:	0d5b      	lsrs	r3, r3, #21
 8002308:	0fcf      	lsrs	r7, r1, #31
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <__aeabi_dmul+0xfc>
 800230e:	4add      	ldr	r2, [pc, #884]	; (8002684 <__aeabi_dmul+0x398>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d100      	bne.n	8002316 <__aeabi_dmul+0x2a>
 8002314:	e086      	b.n	8002424 <__aeabi_dmul+0x138>
 8002316:	0f42      	lsrs	r2, r0, #29
 8002318:	00e4      	lsls	r4, r4, #3
 800231a:	4314      	orrs	r4, r2
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	0412      	lsls	r2, r2, #16
 8002320:	4314      	orrs	r4, r2
 8002322:	4ad9      	ldr	r2, [pc, #868]	; (8002688 <__aeabi_dmul+0x39c>)
 8002324:	00c5      	lsls	r5, r0, #3
 8002326:	4694      	mov	ip, r2
 8002328:	4463      	add	r3, ip
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2300      	movs	r3, #0
 800232e:	4699      	mov	r9, r3
 8002330:	469b      	mov	fp, r3
 8002332:	4643      	mov	r3, r8
 8002334:	4642      	mov	r2, r8
 8002336:	031e      	lsls	r6, r3, #12
 8002338:	0fd2      	lsrs	r2, r2, #31
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4650      	mov	r0, sl
 800233e:	4690      	mov	r8, r2
 8002340:	0b36      	lsrs	r6, r6, #12
 8002342:	0d5b      	lsrs	r3, r3, #21
 8002344:	d100      	bne.n	8002348 <__aeabi_dmul+0x5c>
 8002346:	e078      	b.n	800243a <__aeabi_dmul+0x14e>
 8002348:	4ace      	ldr	r2, [pc, #824]	; (8002684 <__aeabi_dmul+0x398>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01d      	beq.n	800238a <__aeabi_dmul+0x9e>
 800234e:	49ce      	ldr	r1, [pc, #824]	; (8002688 <__aeabi_dmul+0x39c>)
 8002350:	0f42      	lsrs	r2, r0, #29
 8002352:	468c      	mov	ip, r1
 8002354:	9900      	ldr	r1, [sp, #0]
 8002356:	4463      	add	r3, ip
 8002358:	00f6      	lsls	r6, r6, #3
 800235a:	468c      	mov	ip, r1
 800235c:	4316      	orrs	r6, r2
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	449c      	add	ip, r3
 8002362:	0412      	lsls	r2, r2, #16
 8002364:	4663      	mov	r3, ip
 8002366:	4316      	orrs	r6, r2
 8002368:	00c2      	lsls	r2, r0, #3
 800236a:	2000      	movs	r0, #0
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	9900      	ldr	r1, [sp, #0]
 8002370:	4643      	mov	r3, r8
 8002372:	3101      	adds	r1, #1
 8002374:	468c      	mov	ip, r1
 8002376:	4649      	mov	r1, r9
 8002378:	407b      	eors	r3, r7
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	290f      	cmp	r1, #15
 800237e:	d900      	bls.n	8002382 <__aeabi_dmul+0x96>
 8002380:	e07e      	b.n	8002480 <__aeabi_dmul+0x194>
 8002382:	4bc2      	ldr	r3, [pc, #776]	; (800268c <__aeabi_dmul+0x3a0>)
 8002384:	0089      	lsls	r1, r1, #2
 8002386:	5859      	ldr	r1, [r3, r1]
 8002388:	468f      	mov	pc, r1
 800238a:	4652      	mov	r2, sl
 800238c:	9b00      	ldr	r3, [sp, #0]
 800238e:	4332      	orrs	r2, r6
 8002390:	d000      	beq.n	8002394 <__aeabi_dmul+0xa8>
 8002392:	e156      	b.n	8002642 <__aeabi_dmul+0x356>
 8002394:	49bb      	ldr	r1, [pc, #748]	; (8002684 <__aeabi_dmul+0x398>)
 8002396:	2600      	movs	r6, #0
 8002398:	468c      	mov	ip, r1
 800239a:	4463      	add	r3, ip
 800239c:	4649      	mov	r1, r9
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2302      	movs	r3, #2
 80023a2:	4319      	orrs	r1, r3
 80023a4:	4689      	mov	r9, r1
 80023a6:	2002      	movs	r0, #2
 80023a8:	e7e1      	b.n	800236e <__aeabi_dmul+0x82>
 80023aa:	4643      	mov	r3, r8
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	0034      	movs	r4, r6
 80023b0:	0015      	movs	r5, r2
 80023b2:	4683      	mov	fp, r0
 80023b4:	465b      	mov	r3, fp
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d05e      	beq.n	8002478 <__aeabi_dmul+0x18c>
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dmul+0xd4>
 80023be:	e1f3      	b.n	80027a8 <__aeabi_dmul+0x4bc>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dmul+0xda>
 80023c4:	e118      	b.n	80025f8 <__aeabi_dmul+0x30c>
 80023c6:	2200      	movs	r2, #0
 80023c8:	2400      	movs	r4, #0
 80023ca:	2500      	movs	r5, #0
 80023cc:	9b01      	ldr	r3, [sp, #4]
 80023ce:	0512      	lsls	r2, r2, #20
 80023d0:	4322      	orrs	r2, r4
 80023d2:	07db      	lsls	r3, r3, #31
 80023d4:	431a      	orrs	r2, r3
 80023d6:	0028      	movs	r0, r5
 80023d8:	0011      	movs	r1, r2
 80023da:	b007      	add	sp, #28
 80023dc:	bcf0      	pop	{r4, r5, r6, r7}
 80023de:	46bb      	mov	fp, r7
 80023e0:	46b2      	mov	sl, r6
 80023e2:	46a9      	mov	r9, r5
 80023e4:	46a0      	mov	r8, r4
 80023e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e8:	0025      	movs	r5, r4
 80023ea:	4305      	orrs	r5, r0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dmul+0x104>
 80023ee:	e141      	b.n	8002674 <__aeabi_dmul+0x388>
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dmul+0x10a>
 80023f4:	e1ad      	b.n	8002752 <__aeabi_dmul+0x466>
 80023f6:	0020      	movs	r0, r4
 80023f8:	f000 fef0 	bl	80031dc <__clzsi2>
 80023fc:	0001      	movs	r1, r0
 80023fe:	0002      	movs	r2, r0
 8002400:	390b      	subs	r1, #11
 8002402:	231d      	movs	r3, #29
 8002404:	0010      	movs	r0, r2
 8002406:	1a5b      	subs	r3, r3, r1
 8002408:	0031      	movs	r1, r6
 800240a:	0035      	movs	r5, r6
 800240c:	3808      	subs	r0, #8
 800240e:	4084      	lsls	r4, r0
 8002410:	40d9      	lsrs	r1, r3
 8002412:	4085      	lsls	r5, r0
 8002414:	430c      	orrs	r4, r1
 8002416:	489e      	ldr	r0, [pc, #632]	; (8002690 <__aeabi_dmul+0x3a4>)
 8002418:	1a83      	subs	r3, r0, r2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	4699      	mov	r9, r3
 8002420:	469b      	mov	fp, r3
 8002422:	e786      	b.n	8002332 <__aeabi_dmul+0x46>
 8002424:	0005      	movs	r5, r0
 8002426:	4325      	orrs	r5, r4
 8002428:	d000      	beq.n	800242c <__aeabi_dmul+0x140>
 800242a:	e11c      	b.n	8002666 <__aeabi_dmul+0x37a>
 800242c:	2208      	movs	r2, #8
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2302      	movs	r3, #2
 8002432:	2400      	movs	r4, #0
 8002434:	4691      	mov	r9, r2
 8002436:	469b      	mov	fp, r3
 8002438:	e77b      	b.n	8002332 <__aeabi_dmul+0x46>
 800243a:	4652      	mov	r2, sl
 800243c:	4332      	orrs	r2, r6
 800243e:	d100      	bne.n	8002442 <__aeabi_dmul+0x156>
 8002440:	e10a      	b.n	8002658 <__aeabi_dmul+0x36c>
 8002442:	2e00      	cmp	r6, #0
 8002444:	d100      	bne.n	8002448 <__aeabi_dmul+0x15c>
 8002446:	e176      	b.n	8002736 <__aeabi_dmul+0x44a>
 8002448:	0030      	movs	r0, r6
 800244a:	f000 fec7 	bl	80031dc <__clzsi2>
 800244e:	0002      	movs	r2, r0
 8002450:	3a0b      	subs	r2, #11
 8002452:	231d      	movs	r3, #29
 8002454:	0001      	movs	r1, r0
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	4652      	mov	r2, sl
 800245a:	3908      	subs	r1, #8
 800245c:	40da      	lsrs	r2, r3
 800245e:	408e      	lsls	r6, r1
 8002460:	4316      	orrs	r6, r2
 8002462:	4652      	mov	r2, sl
 8002464:	408a      	lsls	r2, r1
 8002466:	9b00      	ldr	r3, [sp, #0]
 8002468:	4989      	ldr	r1, [pc, #548]	; (8002690 <__aeabi_dmul+0x3a4>)
 800246a:	1a18      	subs	r0, r3, r0
 800246c:	0003      	movs	r3, r0
 800246e:	468c      	mov	ip, r1
 8002470:	4463      	add	r3, ip
 8002472:	2000      	movs	r0, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	e77a      	b.n	800236e <__aeabi_dmul+0x82>
 8002478:	2400      	movs	r4, #0
 800247a:	2500      	movs	r5, #0
 800247c:	4a81      	ldr	r2, [pc, #516]	; (8002684 <__aeabi_dmul+0x398>)
 800247e:	e7a5      	b.n	80023cc <__aeabi_dmul+0xe0>
 8002480:	0c2f      	lsrs	r7, r5, #16
 8002482:	042d      	lsls	r5, r5, #16
 8002484:	0c2d      	lsrs	r5, r5, #16
 8002486:	002b      	movs	r3, r5
 8002488:	0c11      	lsrs	r1, r2, #16
 800248a:	0412      	lsls	r2, r2, #16
 800248c:	0c12      	lsrs	r2, r2, #16
 800248e:	4353      	muls	r3, r2
 8002490:	4698      	mov	r8, r3
 8002492:	0013      	movs	r3, r2
 8002494:	0028      	movs	r0, r5
 8002496:	437b      	muls	r3, r7
 8002498:	4699      	mov	r9, r3
 800249a:	4348      	muls	r0, r1
 800249c:	4448      	add	r0, r9
 800249e:	4683      	mov	fp, r0
 80024a0:	4640      	mov	r0, r8
 80024a2:	000b      	movs	r3, r1
 80024a4:	0c00      	lsrs	r0, r0, #16
 80024a6:	4682      	mov	sl, r0
 80024a8:	4658      	mov	r0, fp
 80024aa:	437b      	muls	r3, r7
 80024ac:	4450      	add	r0, sl
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	4581      	cmp	r9, r0
 80024b2:	d906      	bls.n	80024c2 <__aeabi_dmul+0x1d6>
 80024b4:	469a      	mov	sl, r3
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	025b      	lsls	r3, r3, #9
 80024ba:	4699      	mov	r9, r3
 80024bc:	44ca      	add	sl, r9
 80024be:	4653      	mov	r3, sl
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	0c03      	lsrs	r3, r0, #16
 80024c4:	469b      	mov	fp, r3
 80024c6:	4643      	mov	r3, r8
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	0400      	lsls	r0, r0, #16
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	4698      	mov	r8, r3
 80024d0:	0003      	movs	r3, r0
 80024d2:	4443      	add	r3, r8
 80024d4:	9304      	str	r3, [sp, #16]
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	002b      	movs	r3, r5
 80024dc:	0436      	lsls	r6, r6, #16
 80024de:	0c36      	lsrs	r6, r6, #16
 80024e0:	4373      	muls	r3, r6
 80024e2:	4698      	mov	r8, r3
 80024e4:	0033      	movs	r3, r6
 80024e6:	437b      	muls	r3, r7
 80024e8:	469a      	mov	sl, r3
 80024ea:	464b      	mov	r3, r9
 80024ec:	435d      	muls	r5, r3
 80024ee:	435f      	muls	r7, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	4455      	add	r5, sl
 80024f4:	0c18      	lsrs	r0, r3, #16
 80024f6:	1940      	adds	r0, r0, r5
 80024f8:	4582      	cmp	sl, r0
 80024fa:	d903      	bls.n	8002504 <__aeabi_dmul+0x218>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	469a      	mov	sl, r3
 8002502:	4457      	add	r7, sl
 8002504:	0c05      	lsrs	r5, r0, #16
 8002506:	19eb      	adds	r3, r5, r7
 8002508:	9305      	str	r3, [sp, #20]
 800250a:	4643      	mov	r3, r8
 800250c:	041d      	lsls	r5, r3, #16
 800250e:	0c2d      	lsrs	r5, r5, #16
 8002510:	0400      	lsls	r0, r0, #16
 8002512:	1940      	adds	r0, r0, r5
 8002514:	0c25      	lsrs	r5, r4, #16
 8002516:	0424      	lsls	r4, r4, #16
 8002518:	0c24      	lsrs	r4, r4, #16
 800251a:	0027      	movs	r7, r4
 800251c:	4357      	muls	r7, r2
 800251e:	436a      	muls	r2, r5
 8002520:	4690      	mov	r8, r2
 8002522:	002a      	movs	r2, r5
 8002524:	0c3b      	lsrs	r3, r7, #16
 8002526:	469a      	mov	sl, r3
 8002528:	434a      	muls	r2, r1
 800252a:	4361      	muls	r1, r4
 800252c:	4441      	add	r1, r8
 800252e:	4451      	add	r1, sl
 8002530:	4483      	add	fp, r0
 8002532:	4588      	cmp	r8, r1
 8002534:	d903      	bls.n	800253e <__aeabi_dmul+0x252>
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4698      	mov	r8, r3
 800253c:	4442      	add	r2, r8
 800253e:	043f      	lsls	r7, r7, #16
 8002540:	0c0b      	lsrs	r3, r1, #16
 8002542:	0c3f      	lsrs	r7, r7, #16
 8002544:	0409      	lsls	r1, r1, #16
 8002546:	19c9      	adds	r1, r1, r7
 8002548:	0027      	movs	r7, r4
 800254a:	4698      	mov	r8, r3
 800254c:	464b      	mov	r3, r9
 800254e:	4377      	muls	r7, r6
 8002550:	435c      	muls	r4, r3
 8002552:	436e      	muls	r6, r5
 8002554:	435d      	muls	r5, r3
 8002556:	0c3b      	lsrs	r3, r7, #16
 8002558:	4699      	mov	r9, r3
 800255a:	19a4      	adds	r4, r4, r6
 800255c:	444c      	add	r4, r9
 800255e:	4442      	add	r2, r8
 8002560:	9503      	str	r5, [sp, #12]
 8002562:	42a6      	cmp	r6, r4
 8002564:	d904      	bls.n	8002570 <__aeabi_dmul+0x284>
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4698      	mov	r8, r3
 800256c:	4445      	add	r5, r8
 800256e:	9503      	str	r5, [sp, #12]
 8002570:	9b02      	ldr	r3, [sp, #8]
 8002572:	043f      	lsls	r7, r7, #16
 8002574:	445b      	add	r3, fp
 8002576:	001e      	movs	r6, r3
 8002578:	4283      	cmp	r3, r0
 800257a:	4180      	sbcs	r0, r0
 800257c:	0423      	lsls	r3, r4, #16
 800257e:	4698      	mov	r8, r3
 8002580:	9b05      	ldr	r3, [sp, #20]
 8002582:	0c3f      	lsrs	r7, r7, #16
 8002584:	4447      	add	r7, r8
 8002586:	4698      	mov	r8, r3
 8002588:	1876      	adds	r6, r6, r1
 800258a:	428e      	cmp	r6, r1
 800258c:	4189      	sbcs	r1, r1
 800258e:	4447      	add	r7, r8
 8002590:	4240      	negs	r0, r0
 8002592:	183d      	adds	r5, r7, r0
 8002594:	46a8      	mov	r8, r5
 8002596:	4693      	mov	fp, r2
 8002598:	4249      	negs	r1, r1
 800259a:	468a      	mov	sl, r1
 800259c:	44c3      	add	fp, r8
 800259e:	429f      	cmp	r7, r3
 80025a0:	41bf      	sbcs	r7, r7
 80025a2:	4580      	cmp	r8, r0
 80025a4:	4180      	sbcs	r0, r0
 80025a6:	9b03      	ldr	r3, [sp, #12]
 80025a8:	44da      	add	sl, fp
 80025aa:	4698      	mov	r8, r3
 80025ac:	4653      	mov	r3, sl
 80025ae:	4240      	negs	r0, r0
 80025b0:	427f      	negs	r7, r7
 80025b2:	4307      	orrs	r7, r0
 80025b4:	0c24      	lsrs	r4, r4, #16
 80025b6:	4593      	cmp	fp, r2
 80025b8:	4192      	sbcs	r2, r2
 80025ba:	458a      	cmp	sl, r1
 80025bc:	4189      	sbcs	r1, r1
 80025be:	193f      	adds	r7, r7, r4
 80025c0:	0ddc      	lsrs	r4, r3, #23
 80025c2:	9b04      	ldr	r3, [sp, #16]
 80025c4:	0275      	lsls	r5, r6, #9
 80025c6:	431d      	orrs	r5, r3
 80025c8:	1e68      	subs	r0, r5, #1
 80025ca:	4185      	sbcs	r5, r0
 80025cc:	4653      	mov	r3, sl
 80025ce:	4252      	negs	r2, r2
 80025d0:	4249      	negs	r1, r1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	18bf      	adds	r7, r7, r2
 80025d6:	4447      	add	r7, r8
 80025d8:	0df6      	lsrs	r6, r6, #23
 80025da:	027f      	lsls	r7, r7, #9
 80025dc:	4335      	orrs	r5, r6
 80025de:	025a      	lsls	r2, r3, #9
 80025e0:	433c      	orrs	r4, r7
 80025e2:	4315      	orrs	r5, r2
 80025e4:	01fb      	lsls	r3, r7, #7
 80025e6:	d400      	bmi.n	80025ea <__aeabi_dmul+0x2fe>
 80025e8:	e0c1      	b.n	800276e <__aeabi_dmul+0x482>
 80025ea:	2101      	movs	r1, #1
 80025ec:	086a      	lsrs	r2, r5, #1
 80025ee:	400d      	ands	r5, r1
 80025f0:	4315      	orrs	r5, r2
 80025f2:	07e2      	lsls	r2, r4, #31
 80025f4:	4315      	orrs	r5, r2
 80025f6:	0864      	lsrs	r4, r4, #1
 80025f8:	4926      	ldr	r1, [pc, #152]	; (8002694 <__aeabi_dmul+0x3a8>)
 80025fa:	4461      	add	r1, ip
 80025fc:	2900      	cmp	r1, #0
 80025fe:	dd56      	ble.n	80026ae <__aeabi_dmul+0x3c2>
 8002600:	076b      	lsls	r3, r5, #29
 8002602:	d009      	beq.n	8002618 <__aeabi_dmul+0x32c>
 8002604:	220f      	movs	r2, #15
 8002606:	402a      	ands	r2, r5
 8002608:	2a04      	cmp	r2, #4
 800260a:	d005      	beq.n	8002618 <__aeabi_dmul+0x32c>
 800260c:	1d2a      	adds	r2, r5, #4
 800260e:	42aa      	cmp	r2, r5
 8002610:	41ad      	sbcs	r5, r5
 8002612:	426d      	negs	r5, r5
 8002614:	1964      	adds	r4, r4, r5
 8002616:	0015      	movs	r5, r2
 8002618:	01e3      	lsls	r3, r4, #7
 800261a:	d504      	bpl.n	8002626 <__aeabi_dmul+0x33a>
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <__aeabi_dmul+0x3ac>)
 8002620:	00c9      	lsls	r1, r1, #3
 8002622:	4014      	ands	r4, r2
 8002624:	4461      	add	r1, ip
 8002626:	4a1d      	ldr	r2, [pc, #116]	; (800269c <__aeabi_dmul+0x3b0>)
 8002628:	4291      	cmp	r1, r2
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0x342>
 800262c:	e724      	b.n	8002478 <__aeabi_dmul+0x18c>
 800262e:	0762      	lsls	r2, r4, #29
 8002630:	08ed      	lsrs	r5, r5, #3
 8002632:	0264      	lsls	r4, r4, #9
 8002634:	0549      	lsls	r1, r1, #21
 8002636:	4315      	orrs	r5, r2
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	0d4a      	lsrs	r2, r1, #21
 800263c:	e6c6      	b.n	80023cc <__aeabi_dmul+0xe0>
 800263e:	9701      	str	r7, [sp, #4]
 8002640:	e6b8      	b.n	80023b4 <__aeabi_dmul+0xc8>
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <__aeabi_dmul+0x398>)
 8002644:	2003      	movs	r0, #3
 8002646:	4694      	mov	ip, r2
 8002648:	4463      	add	r3, ip
 800264a:	464a      	mov	r2, r9
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2303      	movs	r3, #3
 8002650:	431a      	orrs	r2, r3
 8002652:	4691      	mov	r9, r2
 8002654:	4652      	mov	r2, sl
 8002656:	e68a      	b.n	800236e <__aeabi_dmul+0x82>
 8002658:	4649      	mov	r1, r9
 800265a:	2301      	movs	r3, #1
 800265c:	4319      	orrs	r1, r3
 800265e:	4689      	mov	r9, r1
 8002660:	2600      	movs	r6, #0
 8002662:	2001      	movs	r0, #1
 8002664:	e683      	b.n	800236e <__aeabi_dmul+0x82>
 8002666:	220c      	movs	r2, #12
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2303      	movs	r3, #3
 800266c:	0005      	movs	r5, r0
 800266e:	4691      	mov	r9, r2
 8002670:	469b      	mov	fp, r3
 8002672:	e65e      	b.n	8002332 <__aeabi_dmul+0x46>
 8002674:	2304      	movs	r3, #4
 8002676:	4699      	mov	r9, r3
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	2400      	movs	r4, #0
 8002680:	469b      	mov	fp, r3
 8002682:	e656      	b.n	8002332 <__aeabi_dmul+0x46>
 8002684:	000007ff 	.word	0x000007ff
 8002688:	fffffc01 	.word	0xfffffc01
 800268c:	080163e4 	.word	0x080163e4
 8002690:	fffffc0d 	.word	0xfffffc0d
 8002694:	000003ff 	.word	0x000003ff
 8002698:	feffffff 	.word	0xfeffffff
 800269c:	000007fe 	.word	0x000007fe
 80026a0:	2300      	movs	r3, #0
 80026a2:	2480      	movs	r4, #128	; 0x80
 80026a4:	2500      	movs	r5, #0
 80026a6:	4a44      	ldr	r2, [pc, #272]	; (80027b8 <__aeabi_dmul+0x4cc>)
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	0324      	lsls	r4, r4, #12
 80026ac:	e68e      	b.n	80023cc <__aeabi_dmul+0xe0>
 80026ae:	2001      	movs	r0, #1
 80026b0:	1a40      	subs	r0, r0, r1
 80026b2:	2838      	cmp	r0, #56	; 0x38
 80026b4:	dd00      	ble.n	80026b8 <__aeabi_dmul+0x3cc>
 80026b6:	e686      	b.n	80023c6 <__aeabi_dmul+0xda>
 80026b8:	281f      	cmp	r0, #31
 80026ba:	dd5b      	ble.n	8002774 <__aeabi_dmul+0x488>
 80026bc:	221f      	movs	r2, #31
 80026be:	0023      	movs	r3, r4
 80026c0:	4252      	negs	r2, r2
 80026c2:	1a51      	subs	r1, r2, r1
 80026c4:	40cb      	lsrs	r3, r1
 80026c6:	0019      	movs	r1, r3
 80026c8:	2820      	cmp	r0, #32
 80026ca:	d003      	beq.n	80026d4 <__aeabi_dmul+0x3e8>
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <__aeabi_dmul+0x4d0>)
 80026ce:	4462      	add	r2, ip
 80026d0:	4094      	lsls	r4, r2
 80026d2:	4325      	orrs	r5, r4
 80026d4:	1e6a      	subs	r2, r5, #1
 80026d6:	4195      	sbcs	r5, r2
 80026d8:	002a      	movs	r2, r5
 80026da:	430a      	orrs	r2, r1
 80026dc:	2107      	movs	r1, #7
 80026de:	000d      	movs	r5, r1
 80026e0:	2400      	movs	r4, #0
 80026e2:	4015      	ands	r5, r2
 80026e4:	4211      	tst	r1, r2
 80026e6:	d05b      	beq.n	80027a0 <__aeabi_dmul+0x4b4>
 80026e8:	210f      	movs	r1, #15
 80026ea:	2400      	movs	r4, #0
 80026ec:	4011      	ands	r1, r2
 80026ee:	2904      	cmp	r1, #4
 80026f0:	d053      	beq.n	800279a <__aeabi_dmul+0x4ae>
 80026f2:	1d11      	adds	r1, r2, #4
 80026f4:	4291      	cmp	r1, r2
 80026f6:	4192      	sbcs	r2, r2
 80026f8:	4252      	negs	r2, r2
 80026fa:	18a4      	adds	r4, r4, r2
 80026fc:	000a      	movs	r2, r1
 80026fe:	0223      	lsls	r3, r4, #8
 8002700:	d54b      	bpl.n	800279a <__aeabi_dmul+0x4ae>
 8002702:	2201      	movs	r2, #1
 8002704:	2400      	movs	r4, #0
 8002706:	2500      	movs	r5, #0
 8002708:	e660      	b.n	80023cc <__aeabi_dmul+0xe0>
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	031b      	lsls	r3, r3, #12
 800270e:	421c      	tst	r4, r3
 8002710:	d009      	beq.n	8002726 <__aeabi_dmul+0x43a>
 8002712:	421e      	tst	r6, r3
 8002714:	d107      	bne.n	8002726 <__aeabi_dmul+0x43a>
 8002716:	4333      	orrs	r3, r6
 8002718:	031c      	lsls	r4, r3, #12
 800271a:	4643      	mov	r3, r8
 800271c:	0015      	movs	r5, r2
 800271e:	0b24      	lsrs	r4, r4, #12
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <__aeabi_dmul+0x4cc>)
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	e652      	b.n	80023cc <__aeabi_dmul+0xe0>
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	0312      	lsls	r2, r2, #12
 800272a:	4314      	orrs	r4, r2
 800272c:	0324      	lsls	r4, r4, #12
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <__aeabi_dmul+0x4cc>)
 8002730:	0b24      	lsrs	r4, r4, #12
 8002732:	9701      	str	r7, [sp, #4]
 8002734:	e64a      	b.n	80023cc <__aeabi_dmul+0xe0>
 8002736:	f000 fd51 	bl	80031dc <__clzsi2>
 800273a:	0003      	movs	r3, r0
 800273c:	001a      	movs	r2, r3
 800273e:	3215      	adds	r2, #21
 8002740:	3020      	adds	r0, #32
 8002742:	2a1c      	cmp	r2, #28
 8002744:	dc00      	bgt.n	8002748 <__aeabi_dmul+0x45c>
 8002746:	e684      	b.n	8002452 <__aeabi_dmul+0x166>
 8002748:	4656      	mov	r6, sl
 800274a:	3b08      	subs	r3, #8
 800274c:	2200      	movs	r2, #0
 800274e:	409e      	lsls	r6, r3
 8002750:	e689      	b.n	8002466 <__aeabi_dmul+0x17a>
 8002752:	f000 fd43 	bl	80031dc <__clzsi2>
 8002756:	0001      	movs	r1, r0
 8002758:	0002      	movs	r2, r0
 800275a:	3115      	adds	r1, #21
 800275c:	3220      	adds	r2, #32
 800275e:	291c      	cmp	r1, #28
 8002760:	dc00      	bgt.n	8002764 <__aeabi_dmul+0x478>
 8002762:	e64e      	b.n	8002402 <__aeabi_dmul+0x116>
 8002764:	0034      	movs	r4, r6
 8002766:	3808      	subs	r0, #8
 8002768:	2500      	movs	r5, #0
 800276a:	4084      	lsls	r4, r0
 800276c:	e653      	b.n	8002416 <__aeabi_dmul+0x12a>
 800276e:	9b00      	ldr	r3, [sp, #0]
 8002770:	469c      	mov	ip, r3
 8002772:	e741      	b.n	80025f8 <__aeabi_dmul+0x30c>
 8002774:	4912      	ldr	r1, [pc, #72]	; (80027c0 <__aeabi_dmul+0x4d4>)
 8002776:	0022      	movs	r2, r4
 8002778:	4461      	add	r1, ip
 800277a:	002e      	movs	r6, r5
 800277c:	408d      	lsls	r5, r1
 800277e:	408a      	lsls	r2, r1
 8002780:	40c6      	lsrs	r6, r0
 8002782:	1e69      	subs	r1, r5, #1
 8002784:	418d      	sbcs	r5, r1
 8002786:	4332      	orrs	r2, r6
 8002788:	432a      	orrs	r2, r5
 800278a:	40c4      	lsrs	r4, r0
 800278c:	0753      	lsls	r3, r2, #29
 800278e:	d0b6      	beq.n	80026fe <__aeabi_dmul+0x412>
 8002790:	210f      	movs	r1, #15
 8002792:	4011      	ands	r1, r2
 8002794:	2904      	cmp	r1, #4
 8002796:	d1ac      	bne.n	80026f2 <__aeabi_dmul+0x406>
 8002798:	e7b1      	b.n	80026fe <__aeabi_dmul+0x412>
 800279a:	0765      	lsls	r5, r4, #29
 800279c:	0264      	lsls	r4, r4, #9
 800279e:	0b24      	lsrs	r4, r4, #12
 80027a0:	08d2      	lsrs	r2, r2, #3
 80027a2:	4315      	orrs	r5, r2
 80027a4:	2200      	movs	r2, #0
 80027a6:	e611      	b.n	80023cc <__aeabi_dmul+0xe0>
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	0312      	lsls	r2, r2, #12
 80027ac:	4314      	orrs	r4, r2
 80027ae:	0324      	lsls	r4, r4, #12
 80027b0:	4a01      	ldr	r2, [pc, #4]	; (80027b8 <__aeabi_dmul+0x4cc>)
 80027b2:	0b24      	lsrs	r4, r4, #12
 80027b4:	e60a      	b.n	80023cc <__aeabi_dmul+0xe0>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	000007ff 	.word	0x000007ff
 80027bc:	0000043e 	.word	0x0000043e
 80027c0:	0000041e 	.word	0x0000041e

080027c4 <__aeabi_dsub>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	4657      	mov	r7, sl
 80027c8:	464e      	mov	r6, r9
 80027ca:	4645      	mov	r5, r8
 80027cc:	46de      	mov	lr, fp
 80027ce:	0004      	movs	r4, r0
 80027d0:	b5e0      	push	{r5, r6, r7, lr}
 80027d2:	001f      	movs	r7, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	030b      	lsls	r3, r1, #12
 80027d8:	0f62      	lsrs	r2, r4, #29
 80027da:	004e      	lsls	r6, r1, #1
 80027dc:	0fcd      	lsrs	r5, r1, #31
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	0339      	lsls	r1, r7, #12
 80027e2:	4313      	orrs	r3, r2
 80027e4:	0a49      	lsrs	r1, r1, #9
 80027e6:	00e2      	lsls	r2, r4, #3
 80027e8:	0f44      	lsrs	r4, r0, #29
 80027ea:	4321      	orrs	r1, r4
 80027ec:	4cc2      	ldr	r4, [pc, #776]	; (8002af8 <__aeabi_dsub+0x334>)
 80027ee:	4691      	mov	r9, r2
 80027f0:	4692      	mov	sl, r2
 80027f2:	00c0      	lsls	r0, r0, #3
 80027f4:	007a      	lsls	r2, r7, #1
 80027f6:	4680      	mov	r8, r0
 80027f8:	0d76      	lsrs	r6, r6, #21
 80027fa:	0d52      	lsrs	r2, r2, #21
 80027fc:	0fff      	lsrs	r7, r7, #31
 80027fe:	42a2      	cmp	r2, r4
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x40>
 8002802:	e0b4      	b.n	800296e <__aeabi_dsub+0x1aa>
 8002804:	2401      	movs	r4, #1
 8002806:	4067      	eors	r7, r4
 8002808:	46bb      	mov	fp, r7
 800280a:	42bd      	cmp	r5, r7
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x4c>
 800280e:	e088      	b.n	8002922 <__aeabi_dsub+0x15e>
 8002810:	1ab4      	subs	r4, r6, r2
 8002812:	46a4      	mov	ip, r4
 8002814:	2c00      	cmp	r4, #0
 8002816:	dc00      	bgt.n	800281a <__aeabi_dsub+0x56>
 8002818:	e0b2      	b.n	8002980 <__aeabi_dsub+0x1bc>
 800281a:	2a00      	cmp	r2, #0
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x5c>
 800281e:	e0c5      	b.n	80029ac <__aeabi_dsub+0x1e8>
 8002820:	4ab5      	ldr	r2, [pc, #724]	; (8002af8 <__aeabi_dsub+0x334>)
 8002822:	4296      	cmp	r6, r2
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x64>
 8002826:	e28b      	b.n	8002d40 <__aeabi_dsub+0x57c>
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0412      	lsls	r2, r2, #16
 800282c:	4311      	orrs	r1, r2
 800282e:	4662      	mov	r2, ip
 8002830:	2a38      	cmp	r2, #56	; 0x38
 8002832:	dd00      	ble.n	8002836 <__aeabi_dsub+0x72>
 8002834:	e1a1      	b.n	8002b7a <__aeabi_dsub+0x3b6>
 8002836:	2a1f      	cmp	r2, #31
 8002838:	dd00      	ble.n	800283c <__aeabi_dsub+0x78>
 800283a:	e216      	b.n	8002c6a <__aeabi_dsub+0x4a6>
 800283c:	2720      	movs	r7, #32
 800283e:	000c      	movs	r4, r1
 8002840:	1abf      	subs	r7, r7, r2
 8002842:	40bc      	lsls	r4, r7
 8002844:	0002      	movs	r2, r0
 8002846:	46a0      	mov	r8, r4
 8002848:	4664      	mov	r4, ip
 800284a:	40b8      	lsls	r0, r7
 800284c:	40e2      	lsrs	r2, r4
 800284e:	4644      	mov	r4, r8
 8002850:	4314      	orrs	r4, r2
 8002852:	0002      	movs	r2, r0
 8002854:	1e50      	subs	r0, r2, #1
 8002856:	4182      	sbcs	r2, r0
 8002858:	4660      	mov	r0, ip
 800285a:	40c1      	lsrs	r1, r0
 800285c:	4322      	orrs	r2, r4
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	4649      	mov	r1, r9
 8002862:	1a8c      	subs	r4, r1, r2
 8002864:	45a1      	cmp	r9, r4
 8002866:	4192      	sbcs	r2, r2
 8002868:	4252      	negs	r2, r2
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	4698      	mov	r8, r3
 800286e:	4643      	mov	r3, r8
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	d400      	bmi.n	8002876 <__aeabi_dsub+0xb2>
 8002874:	e117      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002876:	4643      	mov	r3, r8
 8002878:	025b      	lsls	r3, r3, #9
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	4698      	mov	r8, r3
 800287e:	4643      	mov	r3, r8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0xc2>
 8002884:	e16c      	b.n	8002b60 <__aeabi_dsub+0x39c>
 8002886:	4640      	mov	r0, r8
 8002888:	f000 fca8 	bl	80031dc <__clzsi2>
 800288c:	0002      	movs	r2, r0
 800288e:	3a08      	subs	r2, #8
 8002890:	2120      	movs	r1, #32
 8002892:	0020      	movs	r0, r4
 8002894:	4643      	mov	r3, r8
 8002896:	1a89      	subs	r1, r1, r2
 8002898:	4093      	lsls	r3, r2
 800289a:	40c8      	lsrs	r0, r1
 800289c:	4094      	lsls	r4, r2
 800289e:	4303      	orrs	r3, r0
 80028a0:	4296      	cmp	r6, r2
 80028a2:	dd00      	ble.n	80028a6 <__aeabi_dsub+0xe2>
 80028a4:	e157      	b.n	8002b56 <__aeabi_dsub+0x392>
 80028a6:	1b96      	subs	r6, r2, r6
 80028a8:	1c71      	adds	r1, r6, #1
 80028aa:	291f      	cmp	r1, #31
 80028ac:	dd00      	ble.n	80028b0 <__aeabi_dsub+0xec>
 80028ae:	e1cb      	b.n	8002c48 <__aeabi_dsub+0x484>
 80028b0:	2220      	movs	r2, #32
 80028b2:	0018      	movs	r0, r3
 80028b4:	0026      	movs	r6, r4
 80028b6:	1a52      	subs	r2, r2, r1
 80028b8:	4094      	lsls	r4, r2
 80028ba:	4090      	lsls	r0, r2
 80028bc:	40ce      	lsrs	r6, r1
 80028be:	40cb      	lsrs	r3, r1
 80028c0:	1e62      	subs	r2, r4, #1
 80028c2:	4194      	sbcs	r4, r2
 80028c4:	4330      	orrs	r0, r6
 80028c6:	4698      	mov	r8, r3
 80028c8:	2600      	movs	r6, #0
 80028ca:	4304      	orrs	r4, r0
 80028cc:	0763      	lsls	r3, r4, #29
 80028ce:	d009      	beq.n	80028e4 <__aeabi_dsub+0x120>
 80028d0:	230f      	movs	r3, #15
 80028d2:	4023      	ands	r3, r4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d005      	beq.n	80028e4 <__aeabi_dsub+0x120>
 80028d8:	1d23      	adds	r3, r4, #4
 80028da:	42a3      	cmp	r3, r4
 80028dc:	41a4      	sbcs	r4, r4
 80028de:	4264      	negs	r4, r4
 80028e0:	44a0      	add	r8, r4
 80028e2:	001c      	movs	r4, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	d400      	bmi.n	80028ec <__aeabi_dsub+0x128>
 80028ea:	e0df      	b.n	8002aac <__aeabi_dsub+0x2e8>
 80028ec:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <__aeabi_dsub+0x334>)
 80028ee:	3601      	adds	r6, #1
 80028f0:	429e      	cmp	r6, r3
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x132>
 80028f4:	e0fb      	b.n	8002aee <__aeabi_dsub+0x32a>
 80028f6:	4642      	mov	r2, r8
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <__aeabi_dsub+0x338>)
 80028fa:	08e4      	lsrs	r4, r4, #3
 80028fc:	401a      	ands	r2, r3
 80028fe:	0013      	movs	r3, r2
 8002900:	0571      	lsls	r1, r6, #21
 8002902:	0752      	lsls	r2, r2, #29
 8002904:	025b      	lsls	r3, r3, #9
 8002906:	4322      	orrs	r2, r4
 8002908:	0b1b      	lsrs	r3, r3, #12
 800290a:	0d49      	lsrs	r1, r1, #21
 800290c:	0509      	lsls	r1, r1, #20
 800290e:	07ed      	lsls	r5, r5, #31
 8002910:	4319      	orrs	r1, r3
 8002912:	4329      	orrs	r1, r5
 8002914:	0010      	movs	r0, r2
 8002916:	bcf0      	pop	{r4, r5, r6, r7}
 8002918:	46bb      	mov	fp, r7
 800291a:	46b2      	mov	sl, r6
 800291c:	46a9      	mov	r9, r5
 800291e:	46a0      	mov	r8, r4
 8002920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002922:	1ab4      	subs	r4, r6, r2
 8002924:	46a4      	mov	ip, r4
 8002926:	2c00      	cmp	r4, #0
 8002928:	dd58      	ble.n	80029dc <__aeabi_dsub+0x218>
 800292a:	2a00      	cmp	r2, #0
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x16c>
 800292e:	e09e      	b.n	8002a6e <__aeabi_dsub+0x2aa>
 8002930:	4a71      	ldr	r2, [pc, #452]	; (8002af8 <__aeabi_dsub+0x334>)
 8002932:	4296      	cmp	r6, r2
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x174>
 8002936:	e13b      	b.n	8002bb0 <__aeabi_dsub+0x3ec>
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	0412      	lsls	r2, r2, #16
 800293c:	4311      	orrs	r1, r2
 800293e:	4662      	mov	r2, ip
 8002940:	2a38      	cmp	r2, #56	; 0x38
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0x182>
 8002944:	e0c1      	b.n	8002aca <__aeabi_dsub+0x306>
 8002946:	2a1f      	cmp	r2, #31
 8002948:	dc00      	bgt.n	800294c <__aeabi_dsub+0x188>
 800294a:	e1bb      	b.n	8002cc4 <__aeabi_dsub+0x500>
 800294c:	000c      	movs	r4, r1
 800294e:	3a20      	subs	r2, #32
 8002950:	40d4      	lsrs	r4, r2
 8002952:	0022      	movs	r2, r4
 8002954:	4664      	mov	r4, ip
 8002956:	2c20      	cmp	r4, #32
 8002958:	d004      	beq.n	8002964 <__aeabi_dsub+0x1a0>
 800295a:	2740      	movs	r7, #64	; 0x40
 800295c:	1b3f      	subs	r7, r7, r4
 800295e:	40b9      	lsls	r1, r7
 8002960:	4308      	orrs	r0, r1
 8002962:	4680      	mov	r8, r0
 8002964:	4644      	mov	r4, r8
 8002966:	1e61      	subs	r1, r4, #1
 8002968:	418c      	sbcs	r4, r1
 800296a:	4314      	orrs	r4, r2
 800296c:	e0b1      	b.n	8002ad2 <__aeabi_dsub+0x30e>
 800296e:	000c      	movs	r4, r1
 8002970:	4304      	orrs	r4, r0
 8002972:	d02a      	beq.n	80029ca <__aeabi_dsub+0x206>
 8002974:	46bb      	mov	fp, r7
 8002976:	42bd      	cmp	r5, r7
 8002978:	d02d      	beq.n	80029d6 <__aeabi_dsub+0x212>
 800297a:	4c61      	ldr	r4, [pc, #388]	; (8002b00 <__aeabi_dsub+0x33c>)
 800297c:	46a4      	mov	ip, r4
 800297e:	44b4      	add	ip, r6
 8002980:	4664      	mov	r4, ip
 8002982:	2c00      	cmp	r4, #0
 8002984:	d05c      	beq.n	8002a40 <__aeabi_dsub+0x27c>
 8002986:	1b94      	subs	r4, r2, r6
 8002988:	46a4      	mov	ip, r4
 800298a:	2e00      	cmp	r6, #0
 800298c:	d000      	beq.n	8002990 <__aeabi_dsub+0x1cc>
 800298e:	e115      	b.n	8002bbc <__aeabi_dsub+0x3f8>
 8002990:	464d      	mov	r5, r9
 8002992:	431d      	orrs	r5, r3
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1d4>
 8002996:	e1c3      	b.n	8002d20 <__aeabi_dsub+0x55c>
 8002998:	1e65      	subs	r5, r4, #1
 800299a:	2c01      	cmp	r4, #1
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1dc>
 800299e:	e20c      	b.n	8002dba <__aeabi_dsub+0x5f6>
 80029a0:	4e55      	ldr	r6, [pc, #340]	; (8002af8 <__aeabi_dsub+0x334>)
 80029a2:	42b4      	cmp	r4, r6
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x1e4>
 80029a6:	e1f8      	b.n	8002d9a <__aeabi_dsub+0x5d6>
 80029a8:	46ac      	mov	ip, r5
 80029aa:	e10e      	b.n	8002bca <__aeabi_dsub+0x406>
 80029ac:	000a      	movs	r2, r1
 80029ae:	4302      	orrs	r2, r0
 80029b0:	d100      	bne.n	80029b4 <__aeabi_dsub+0x1f0>
 80029b2:	e136      	b.n	8002c22 <__aeabi_dsub+0x45e>
 80029b4:	0022      	movs	r2, r4
 80029b6:	3a01      	subs	r2, #1
 80029b8:	2c01      	cmp	r4, #1
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x1fa>
 80029bc:	e1c6      	b.n	8002d4c <__aeabi_dsub+0x588>
 80029be:	4c4e      	ldr	r4, [pc, #312]	; (8002af8 <__aeabi_dsub+0x334>)
 80029c0:	45a4      	cmp	ip, r4
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x202>
 80029c4:	e0f4      	b.n	8002bb0 <__aeabi_dsub+0x3ec>
 80029c6:	4694      	mov	ip, r2
 80029c8:	e731      	b.n	800282e <__aeabi_dsub+0x6a>
 80029ca:	2401      	movs	r4, #1
 80029cc:	4067      	eors	r7, r4
 80029ce:	46bb      	mov	fp, r7
 80029d0:	42bd      	cmp	r5, r7
 80029d2:	d000      	beq.n	80029d6 <__aeabi_dsub+0x212>
 80029d4:	e71c      	b.n	8002810 <__aeabi_dsub+0x4c>
 80029d6:	4c4a      	ldr	r4, [pc, #296]	; (8002b00 <__aeabi_dsub+0x33c>)
 80029d8:	46a4      	mov	ip, r4
 80029da:	44b4      	add	ip, r6
 80029dc:	4664      	mov	r4, ip
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x220>
 80029e2:	e0cf      	b.n	8002b84 <__aeabi_dsub+0x3c0>
 80029e4:	1b94      	subs	r4, r2, r6
 80029e6:	46a4      	mov	ip, r4
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x22a>
 80029ec:	e15c      	b.n	8002ca8 <__aeabi_dsub+0x4e4>
 80029ee:	4e42      	ldr	r6, [pc, #264]	; (8002af8 <__aeabi_dsub+0x334>)
 80029f0:	42b2      	cmp	r2, r6
 80029f2:	d100      	bne.n	80029f6 <__aeabi_dsub+0x232>
 80029f4:	e1ec      	b.n	8002dd0 <__aeabi_dsub+0x60c>
 80029f6:	2680      	movs	r6, #128	; 0x80
 80029f8:	0436      	lsls	r6, r6, #16
 80029fa:	4333      	orrs	r3, r6
 80029fc:	4664      	mov	r4, ip
 80029fe:	2c38      	cmp	r4, #56	; 0x38
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x240>
 8002a02:	e1b3      	b.n	8002d6c <__aeabi_dsub+0x5a8>
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd00      	ble.n	8002a0a <__aeabi_dsub+0x246>
 8002a08:	e238      	b.n	8002e7c <__aeabi_dsub+0x6b8>
 8002a0a:	2620      	movs	r6, #32
 8002a0c:	1b36      	subs	r6, r6, r4
 8002a0e:	001c      	movs	r4, r3
 8002a10:	40b4      	lsls	r4, r6
 8002a12:	464f      	mov	r7, r9
 8002a14:	46a0      	mov	r8, r4
 8002a16:	4664      	mov	r4, ip
 8002a18:	40e7      	lsrs	r7, r4
 8002a1a:	4644      	mov	r4, r8
 8002a1c:	433c      	orrs	r4, r7
 8002a1e:	464f      	mov	r7, r9
 8002a20:	40b7      	lsls	r7, r6
 8002a22:	003e      	movs	r6, r7
 8002a24:	1e77      	subs	r7, r6, #1
 8002a26:	41be      	sbcs	r6, r7
 8002a28:	4334      	orrs	r4, r6
 8002a2a:	4666      	mov	r6, ip
 8002a2c:	40f3      	lsrs	r3, r6
 8002a2e:	18c9      	adds	r1, r1, r3
 8002a30:	1824      	adds	r4, r4, r0
 8002a32:	4284      	cmp	r4, r0
 8002a34:	419b      	sbcs	r3, r3
 8002a36:	425b      	negs	r3, r3
 8002a38:	4698      	mov	r8, r3
 8002a3a:	0016      	movs	r6, r2
 8002a3c:	4488      	add	r8, r1
 8002a3e:	e04e      	b.n	8002ade <__aeabi_dsub+0x31a>
 8002a40:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <__aeabi_dsub+0x340>)
 8002a42:	1c74      	adds	r4, r6, #1
 8002a44:	4214      	tst	r4, r2
 8002a46:	d000      	beq.n	8002a4a <__aeabi_dsub+0x286>
 8002a48:	e0d6      	b.n	8002bf8 <__aeabi_dsub+0x434>
 8002a4a:	464a      	mov	r2, r9
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	2e00      	cmp	r6, #0
 8002a50:	d000      	beq.n	8002a54 <__aeabi_dsub+0x290>
 8002a52:	e15b      	b.n	8002d0c <__aeabi_dsub+0x548>
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x296>
 8002a58:	e1a5      	b.n	8002da6 <__aeabi_dsub+0x5e2>
 8002a5a:	000a      	movs	r2, r1
 8002a5c:	4302      	orrs	r2, r0
 8002a5e:	d000      	beq.n	8002a62 <__aeabi_dsub+0x29e>
 8002a60:	e1bb      	b.n	8002dda <__aeabi_dsub+0x616>
 8002a62:	464a      	mov	r2, r9
 8002a64:	0759      	lsls	r1, r3, #29
 8002a66:	08d2      	lsrs	r2, r2, #3
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	e027      	b.n	8002abe <__aeabi_dsub+0x2fa>
 8002a6e:	000a      	movs	r2, r1
 8002a70:	4302      	orrs	r2, r0
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x2b2>
 8002a74:	e174      	b.n	8002d60 <__aeabi_dsub+0x59c>
 8002a76:	0022      	movs	r2, r4
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	2c01      	cmp	r4, #1
 8002a7c:	d005      	beq.n	8002a8a <__aeabi_dsub+0x2c6>
 8002a7e:	4c1e      	ldr	r4, [pc, #120]	; (8002af8 <__aeabi_dsub+0x334>)
 8002a80:	45a4      	cmp	ip, r4
 8002a82:	d100      	bne.n	8002a86 <__aeabi_dsub+0x2c2>
 8002a84:	e094      	b.n	8002bb0 <__aeabi_dsub+0x3ec>
 8002a86:	4694      	mov	ip, r2
 8002a88:	e759      	b.n	800293e <__aeabi_dsub+0x17a>
 8002a8a:	4448      	add	r0, r9
 8002a8c:	4548      	cmp	r0, r9
 8002a8e:	4192      	sbcs	r2, r2
 8002a90:	185b      	adds	r3, r3, r1
 8002a92:	4698      	mov	r8, r3
 8002a94:	0004      	movs	r4, r0
 8002a96:	4252      	negs	r2, r2
 8002a98:	4490      	add	r8, r2
 8002a9a:	4643      	mov	r3, r8
 8002a9c:	2602      	movs	r6, #2
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	d500      	bpl.n	8002aa4 <__aeabi_dsub+0x2e0>
 8002aa2:	e0c4      	b.n	8002c2e <__aeabi_dsub+0x46a>
 8002aa4:	3e01      	subs	r6, #1
 8002aa6:	0763      	lsls	r3, r4, #29
 8002aa8:	d000      	beq.n	8002aac <__aeabi_dsub+0x2e8>
 8002aaa:	e711      	b.n	80028d0 <__aeabi_dsub+0x10c>
 8002aac:	4643      	mov	r3, r8
 8002aae:	46b4      	mov	ip, r6
 8002ab0:	0759      	lsls	r1, r3, #29
 8002ab2:	08e2      	lsrs	r2, r4, #3
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	08db      	lsrs	r3, r3, #3
 8002ab8:	490f      	ldr	r1, [pc, #60]	; (8002af8 <__aeabi_dsub+0x334>)
 8002aba:	458c      	cmp	ip, r1
 8002abc:	d040      	beq.n	8002b40 <__aeabi_dsub+0x37c>
 8002abe:	4661      	mov	r1, ip
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	0549      	lsls	r1, r1, #21
 8002ac4:	0b1b      	lsrs	r3, r3, #12
 8002ac6:	0d49      	lsrs	r1, r1, #21
 8002ac8:	e720      	b.n	800290c <__aeabi_dsub+0x148>
 8002aca:	4301      	orrs	r1, r0
 8002acc:	000c      	movs	r4, r1
 8002ace:	1e61      	subs	r1, r4, #1
 8002ad0:	418c      	sbcs	r4, r1
 8002ad2:	444c      	add	r4, r9
 8002ad4:	454c      	cmp	r4, r9
 8002ad6:	4192      	sbcs	r2, r2
 8002ad8:	4252      	negs	r2, r2
 8002ada:	4690      	mov	r8, r2
 8002adc:	4498      	add	r8, r3
 8002ade:	4643      	mov	r3, r8
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	d5e0      	bpl.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <__aeabi_dsub+0x334>)
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	429e      	cmp	r6, r3
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x32a>
 8002aec:	e09f      	b.n	8002c2e <__aeabi_dsub+0x46a>
 8002aee:	0031      	movs	r1, r6
 8002af0:	2300      	movs	r3, #0
 8002af2:	2200      	movs	r2, #0
 8002af4:	e70a      	b.n	800290c <__aeabi_dsub+0x148>
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	000007ff 	.word	0x000007ff
 8002afc:	ff7fffff 	.word	0xff7fffff
 8002b00:	fffff801 	.word	0xfffff801
 8002b04:	000007fe 	.word	0x000007fe
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d100      	bne.n	8002b0e <__aeabi_dsub+0x34a>
 8002b0c:	e160      	b.n	8002dd0 <__aeabi_dsub+0x60c>
 8002b0e:	000a      	movs	r2, r1
 8002b10:	4302      	orrs	r2, r0
 8002b12:	d04d      	beq.n	8002bb0 <__aeabi_dsub+0x3ec>
 8002b14:	464a      	mov	r2, r9
 8002b16:	075c      	lsls	r4, r3, #29
 8002b18:	08d2      	lsrs	r2, r2, #3
 8002b1a:	4322      	orrs	r2, r4
 8002b1c:	2480      	movs	r4, #128	; 0x80
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	0324      	lsls	r4, r4, #12
 8002b22:	4223      	tst	r3, r4
 8002b24:	d007      	beq.n	8002b36 <__aeabi_dsub+0x372>
 8002b26:	08ce      	lsrs	r6, r1, #3
 8002b28:	4226      	tst	r6, r4
 8002b2a:	d104      	bne.n	8002b36 <__aeabi_dsub+0x372>
 8002b2c:	465d      	mov	r5, fp
 8002b2e:	0033      	movs	r3, r6
 8002b30:	08c2      	lsrs	r2, r0, #3
 8002b32:	0749      	lsls	r1, r1, #29
 8002b34:	430a      	orrs	r2, r1
 8002b36:	0f51      	lsrs	r1, r2, #29
 8002b38:	00d2      	lsls	r2, r2, #3
 8002b3a:	08d2      	lsrs	r2, r2, #3
 8002b3c:	0749      	lsls	r1, r1, #29
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	0011      	movs	r1, r2
 8002b42:	4319      	orrs	r1, r3
 8002b44:	d100      	bne.n	8002b48 <__aeabi_dsub+0x384>
 8002b46:	e1c8      	b.n	8002eda <__aeabi_dsub+0x716>
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0309      	lsls	r1, r1, #12
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	031b      	lsls	r3, r3, #12
 8002b50:	49d5      	ldr	r1, [pc, #852]	; (8002ea8 <__aeabi_dsub+0x6e4>)
 8002b52:	0b1b      	lsrs	r3, r3, #12
 8002b54:	e6da      	b.n	800290c <__aeabi_dsub+0x148>
 8002b56:	49d5      	ldr	r1, [pc, #852]	; (8002eac <__aeabi_dsub+0x6e8>)
 8002b58:	1ab6      	subs	r6, r6, r2
 8002b5a:	400b      	ands	r3, r1
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	e6b5      	b.n	80028cc <__aeabi_dsub+0x108>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f000 fb3b 	bl	80031dc <__clzsi2>
 8002b66:	0002      	movs	r2, r0
 8002b68:	3218      	adds	r2, #24
 8002b6a:	2a1f      	cmp	r2, #31
 8002b6c:	dc00      	bgt.n	8002b70 <__aeabi_dsub+0x3ac>
 8002b6e:	e68f      	b.n	8002890 <__aeabi_dsub+0xcc>
 8002b70:	0023      	movs	r3, r4
 8002b72:	3808      	subs	r0, #8
 8002b74:	4083      	lsls	r3, r0
 8002b76:	2400      	movs	r4, #0
 8002b78:	e692      	b.n	80028a0 <__aeabi_dsub+0xdc>
 8002b7a:	4308      	orrs	r0, r1
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	1e50      	subs	r0, r2, #1
 8002b80:	4182      	sbcs	r2, r0
 8002b82:	e66d      	b.n	8002860 <__aeabi_dsub+0x9c>
 8002b84:	4cca      	ldr	r4, [pc, #808]	; (8002eb0 <__aeabi_dsub+0x6ec>)
 8002b86:	1c72      	adds	r2, r6, #1
 8002b88:	4222      	tst	r2, r4
 8002b8a:	d000      	beq.n	8002b8e <__aeabi_dsub+0x3ca>
 8002b8c:	e0ad      	b.n	8002cea <__aeabi_dsub+0x526>
 8002b8e:	464a      	mov	r2, r9
 8002b90:	431a      	orrs	r2, r3
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	d1b8      	bne.n	8002b08 <__aeabi_dsub+0x344>
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0x3d8>
 8002b9a:	e158      	b.n	8002e4e <__aeabi_dsub+0x68a>
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dsub+0x3e0>
 8002ba2:	e159      	b.n	8002e58 <__aeabi_dsub+0x694>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	0759      	lsls	r1, r3, #29
 8002ba8:	08d2      	lsrs	r2, r2, #3
 8002baa:	430a      	orrs	r2, r1
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	e786      	b.n	8002abe <__aeabi_dsub+0x2fa>
 8002bb0:	464a      	mov	r2, r9
 8002bb2:	0759      	lsls	r1, r3, #29
 8002bb4:	08d2      	lsrs	r2, r2, #3
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	e7c1      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002bbc:	4dba      	ldr	r5, [pc, #744]	; (8002ea8 <__aeabi_dsub+0x6e4>)
 8002bbe:	42aa      	cmp	r2, r5
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x400>
 8002bc2:	e11e      	b.n	8002e02 <__aeabi_dsub+0x63e>
 8002bc4:	2580      	movs	r5, #128	; 0x80
 8002bc6:	042d      	lsls	r5, r5, #16
 8002bc8:	432b      	orrs	r3, r5
 8002bca:	4664      	mov	r4, ip
 8002bcc:	2c38      	cmp	r4, #56	; 0x38
 8002bce:	dc5d      	bgt.n	8002c8c <__aeabi_dsub+0x4c8>
 8002bd0:	2c1f      	cmp	r4, #31
 8002bd2:	dd00      	ble.n	8002bd6 <__aeabi_dsub+0x412>
 8002bd4:	e0d0      	b.n	8002d78 <__aeabi_dsub+0x5b4>
 8002bd6:	2520      	movs	r5, #32
 8002bd8:	4667      	mov	r7, ip
 8002bda:	1b2d      	subs	r5, r5, r4
 8002bdc:	464e      	mov	r6, r9
 8002bde:	001c      	movs	r4, r3
 8002be0:	40fe      	lsrs	r6, r7
 8002be2:	40ac      	lsls	r4, r5
 8002be4:	4334      	orrs	r4, r6
 8002be6:	464e      	mov	r6, r9
 8002be8:	40ae      	lsls	r6, r5
 8002bea:	0035      	movs	r5, r6
 8002bec:	40fb      	lsrs	r3, r7
 8002bee:	1e6e      	subs	r6, r5, #1
 8002bf0:	41b5      	sbcs	r5, r6
 8002bf2:	1ac9      	subs	r1, r1, r3
 8002bf4:	432c      	orrs	r4, r5
 8002bf6:	e04e      	b.n	8002c96 <__aeabi_dsub+0x4d2>
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	1a14      	subs	r4, r2, r0
 8002bfc:	45a1      	cmp	r9, r4
 8002bfe:	4192      	sbcs	r2, r2
 8002c00:	4252      	negs	r2, r2
 8002c02:	4690      	mov	r8, r2
 8002c04:	1a5f      	subs	r7, r3, r1
 8002c06:	003a      	movs	r2, r7
 8002c08:	4647      	mov	r7, r8
 8002c0a:	1bd2      	subs	r2, r2, r7
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	0212      	lsls	r2, r2, #8
 8002c10:	d500      	bpl.n	8002c14 <__aeabi_dsub+0x450>
 8002c12:	e08b      	b.n	8002d2c <__aeabi_dsub+0x568>
 8002c14:	4642      	mov	r2, r8
 8002c16:	4322      	orrs	r2, r4
 8002c18:	d000      	beq.n	8002c1c <__aeabi_dsub+0x458>
 8002c1a:	e630      	b.n	800287e <__aeabi_dsub+0xba>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2500      	movs	r5, #0
 8002c20:	e74d      	b.n	8002abe <__aeabi_dsub+0x2fa>
 8002c22:	464a      	mov	r2, r9
 8002c24:	0759      	lsls	r1, r3, #29
 8002c26:	08d2      	lsrs	r2, r2, #3
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	e744      	b.n	8002ab8 <__aeabi_dsub+0x2f4>
 8002c2e:	4642      	mov	r2, r8
 8002c30:	4b9e      	ldr	r3, [pc, #632]	; (8002eac <__aeabi_dsub+0x6e8>)
 8002c32:	0861      	lsrs	r1, r4, #1
 8002c34:	401a      	ands	r2, r3
 8002c36:	0013      	movs	r3, r2
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4014      	ands	r4, r2
 8002c3c:	430c      	orrs	r4, r1
 8002c3e:	07da      	lsls	r2, r3, #31
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	4698      	mov	r8, r3
 8002c44:	4314      	orrs	r4, r2
 8002c46:	e641      	b.n	80028cc <__aeabi_dsub+0x108>
 8002c48:	001a      	movs	r2, r3
 8002c4a:	3e1f      	subs	r6, #31
 8002c4c:	40f2      	lsrs	r2, r6
 8002c4e:	0016      	movs	r6, r2
 8002c50:	2920      	cmp	r1, #32
 8002c52:	d003      	beq.n	8002c5c <__aeabi_dsub+0x498>
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	1a51      	subs	r1, r2, r1
 8002c58:	408b      	lsls	r3, r1
 8002c5a:	431c      	orrs	r4, r3
 8002c5c:	1e62      	subs	r2, r4, #1
 8002c5e:	4194      	sbcs	r4, r2
 8002c60:	2300      	movs	r3, #0
 8002c62:	4334      	orrs	r4, r6
 8002c64:	4698      	mov	r8, r3
 8002c66:	2600      	movs	r6, #0
 8002c68:	e71d      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002c6a:	000c      	movs	r4, r1
 8002c6c:	3a20      	subs	r2, #32
 8002c6e:	40d4      	lsrs	r4, r2
 8002c70:	0022      	movs	r2, r4
 8002c72:	4664      	mov	r4, ip
 8002c74:	2c20      	cmp	r4, #32
 8002c76:	d004      	beq.n	8002c82 <__aeabi_dsub+0x4be>
 8002c78:	2740      	movs	r7, #64	; 0x40
 8002c7a:	1b3f      	subs	r7, r7, r4
 8002c7c:	40b9      	lsls	r1, r7
 8002c7e:	4308      	orrs	r0, r1
 8002c80:	4680      	mov	r8, r0
 8002c82:	4644      	mov	r4, r8
 8002c84:	1e61      	subs	r1, r4, #1
 8002c86:	418c      	sbcs	r4, r1
 8002c88:	4322      	orrs	r2, r4
 8002c8a:	e5e9      	b.n	8002860 <__aeabi_dsub+0x9c>
 8002c8c:	464c      	mov	r4, r9
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	001c      	movs	r4, r3
 8002c92:	1e63      	subs	r3, r4, #1
 8002c94:	419c      	sbcs	r4, r3
 8002c96:	1b04      	subs	r4, r0, r4
 8002c98:	42a0      	cmp	r0, r4
 8002c9a:	419b      	sbcs	r3, r3
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	1acb      	subs	r3, r1, r3
 8002ca0:	4698      	mov	r8, r3
 8002ca2:	465d      	mov	r5, fp
 8002ca4:	0016      	movs	r6, r2
 8002ca6:	e5e2      	b.n	800286e <__aeabi_dsub+0xaa>
 8002ca8:	464e      	mov	r6, r9
 8002caa:	431e      	orrs	r6, r3
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4ec>
 8002cae:	e0ae      	b.n	8002e0e <__aeabi_dsub+0x64a>
 8002cb0:	1e66      	subs	r6, r4, #1
 8002cb2:	2c01      	cmp	r4, #1
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x4f4>
 8002cb6:	e0fd      	b.n	8002eb4 <__aeabi_dsub+0x6f0>
 8002cb8:	4f7b      	ldr	r7, [pc, #492]	; (8002ea8 <__aeabi_dsub+0x6e4>)
 8002cba:	42bc      	cmp	r4, r7
 8002cbc:	d100      	bne.n	8002cc0 <__aeabi_dsub+0x4fc>
 8002cbe:	e107      	b.n	8002ed0 <__aeabi_dsub+0x70c>
 8002cc0:	46b4      	mov	ip, r6
 8002cc2:	e69b      	b.n	80029fc <__aeabi_dsub+0x238>
 8002cc4:	4664      	mov	r4, ip
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	1b12      	subs	r2, r2, r4
 8002cca:	000c      	movs	r4, r1
 8002ccc:	4094      	lsls	r4, r2
 8002cce:	0007      	movs	r7, r0
 8002cd0:	4090      	lsls	r0, r2
 8002cd2:	46a0      	mov	r8, r4
 8002cd4:	4664      	mov	r4, ip
 8002cd6:	1e42      	subs	r2, r0, #1
 8002cd8:	4190      	sbcs	r0, r2
 8002cda:	4662      	mov	r2, ip
 8002cdc:	40e7      	lsrs	r7, r4
 8002cde:	4644      	mov	r4, r8
 8002ce0:	40d1      	lsrs	r1, r2
 8002ce2:	433c      	orrs	r4, r7
 8002ce4:	4304      	orrs	r4, r0
 8002ce6:	185b      	adds	r3, r3, r1
 8002ce8:	e6f3      	b.n	8002ad2 <__aeabi_dsub+0x30e>
 8002cea:	4c6f      	ldr	r4, [pc, #444]	; (8002ea8 <__aeabi_dsub+0x6e4>)
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x52e>
 8002cf0:	e0d5      	b.n	8002e9e <__aeabi_dsub+0x6da>
 8002cf2:	4448      	add	r0, r9
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	4548      	cmp	r0, r9
 8002cf8:	4189      	sbcs	r1, r1
 8002cfa:	4249      	negs	r1, r1
 8002cfc:	185b      	adds	r3, r3, r1
 8002cfe:	07dc      	lsls	r4, r3, #31
 8002d00:	0840      	lsrs	r0, r0, #1
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	4698      	mov	r8, r3
 8002d06:	0016      	movs	r6, r2
 8002d08:	4304      	orrs	r4, r0
 8002d0a:	e6cc      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d000      	beq.n	8002d12 <__aeabi_dsub+0x54e>
 8002d10:	e082      	b.n	8002e18 <__aeabi_dsub+0x654>
 8002d12:	000a      	movs	r2, r1
 8002d14:	4302      	orrs	r2, r0
 8002d16:	d140      	bne.n	8002d9a <__aeabi_dsub+0x5d6>
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	e713      	b.n	8002b48 <__aeabi_dsub+0x384>
 8002d20:	074b      	lsls	r3, r1, #29
 8002d22:	08c2      	lsrs	r2, r0, #3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	465d      	mov	r5, fp
 8002d28:	08cb      	lsrs	r3, r1, #3
 8002d2a:	e6c5      	b.n	8002ab8 <__aeabi_dsub+0x2f4>
 8002d2c:	464a      	mov	r2, r9
 8002d2e:	1a84      	subs	r4, r0, r2
 8002d30:	42a0      	cmp	r0, r4
 8002d32:	4192      	sbcs	r2, r2
 8002d34:	1acb      	subs	r3, r1, r3
 8002d36:	4252      	negs	r2, r2
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	465d      	mov	r5, fp
 8002d3e:	e59e      	b.n	800287e <__aeabi_dsub+0xba>
 8002d40:	464a      	mov	r2, r9
 8002d42:	0759      	lsls	r1, r3, #29
 8002d44:	08d2      	lsrs	r2, r2, #3
 8002d46:	430a      	orrs	r2, r1
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	e6f9      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002d4c:	464a      	mov	r2, r9
 8002d4e:	1a14      	subs	r4, r2, r0
 8002d50:	45a1      	cmp	r9, r4
 8002d52:	4192      	sbcs	r2, r2
 8002d54:	1a5b      	subs	r3, r3, r1
 8002d56:	4252      	negs	r2, r2
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	2601      	movs	r6, #1
 8002d5e:	e586      	b.n	800286e <__aeabi_dsub+0xaa>
 8002d60:	464a      	mov	r2, r9
 8002d62:	0759      	lsls	r1, r3, #29
 8002d64:	08d2      	lsrs	r2, r2, #3
 8002d66:	430a      	orrs	r2, r1
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	e6a5      	b.n	8002ab8 <__aeabi_dsub+0x2f4>
 8002d6c:	464c      	mov	r4, r9
 8002d6e:	4323      	orrs	r3, r4
 8002d70:	001c      	movs	r4, r3
 8002d72:	1e63      	subs	r3, r4, #1
 8002d74:	419c      	sbcs	r4, r3
 8002d76:	e65b      	b.n	8002a30 <__aeabi_dsub+0x26c>
 8002d78:	4665      	mov	r5, ip
 8002d7a:	001e      	movs	r6, r3
 8002d7c:	3d20      	subs	r5, #32
 8002d7e:	40ee      	lsrs	r6, r5
 8002d80:	2c20      	cmp	r4, #32
 8002d82:	d005      	beq.n	8002d90 <__aeabi_dsub+0x5cc>
 8002d84:	2540      	movs	r5, #64	; 0x40
 8002d86:	1b2d      	subs	r5, r5, r4
 8002d88:	40ab      	lsls	r3, r5
 8002d8a:	464c      	mov	r4, r9
 8002d8c:	431c      	orrs	r4, r3
 8002d8e:	46a2      	mov	sl, r4
 8002d90:	4654      	mov	r4, sl
 8002d92:	1e63      	subs	r3, r4, #1
 8002d94:	419c      	sbcs	r4, r3
 8002d96:	4334      	orrs	r4, r6
 8002d98:	e77d      	b.n	8002c96 <__aeabi_dsub+0x4d2>
 8002d9a:	074b      	lsls	r3, r1, #29
 8002d9c:	08c2      	lsrs	r2, r0, #3
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	465d      	mov	r5, fp
 8002da2:	08cb      	lsrs	r3, r1, #3
 8002da4:	e6cc      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002da6:	000a      	movs	r2, r1
 8002da8:	4302      	orrs	r2, r0
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x5ea>
 8002dac:	e736      	b.n	8002c1c <__aeabi_dsub+0x458>
 8002dae:	074b      	lsls	r3, r1, #29
 8002db0:	08c2      	lsrs	r2, r0, #3
 8002db2:	431a      	orrs	r2, r3
 8002db4:	465d      	mov	r5, fp
 8002db6:	08cb      	lsrs	r3, r1, #3
 8002db8:	e681      	b.n	8002abe <__aeabi_dsub+0x2fa>
 8002dba:	464a      	mov	r2, r9
 8002dbc:	1a84      	subs	r4, r0, r2
 8002dbe:	42a0      	cmp	r0, r4
 8002dc0:	4192      	sbcs	r2, r2
 8002dc2:	1acb      	subs	r3, r1, r3
 8002dc4:	4252      	negs	r2, r2
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	4698      	mov	r8, r3
 8002dca:	465d      	mov	r5, fp
 8002dcc:	2601      	movs	r6, #1
 8002dce:	e54e      	b.n	800286e <__aeabi_dsub+0xaa>
 8002dd0:	074b      	lsls	r3, r1, #29
 8002dd2:	08c2      	lsrs	r2, r0, #3
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	08cb      	lsrs	r3, r1, #3
 8002dd8:	e6b2      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002dda:	464a      	mov	r2, r9
 8002ddc:	1a14      	subs	r4, r2, r0
 8002dde:	45a1      	cmp	r9, r4
 8002de0:	4192      	sbcs	r2, r2
 8002de2:	1a5f      	subs	r7, r3, r1
 8002de4:	4252      	negs	r2, r2
 8002de6:	1aba      	subs	r2, r7, r2
 8002de8:	4690      	mov	r8, r2
 8002dea:	0212      	lsls	r2, r2, #8
 8002dec:	d56b      	bpl.n	8002ec6 <__aeabi_dsub+0x702>
 8002dee:	464a      	mov	r2, r9
 8002df0:	1a84      	subs	r4, r0, r2
 8002df2:	42a0      	cmp	r0, r4
 8002df4:	4192      	sbcs	r2, r2
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	4252      	negs	r2, r2
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	465d      	mov	r5, fp
 8002e00:	e564      	b.n	80028cc <__aeabi_dsub+0x108>
 8002e02:	074b      	lsls	r3, r1, #29
 8002e04:	08c2      	lsrs	r2, r0, #3
 8002e06:	431a      	orrs	r2, r3
 8002e08:	465d      	mov	r5, fp
 8002e0a:	08cb      	lsrs	r3, r1, #3
 8002e0c:	e698      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002e0e:	074b      	lsls	r3, r1, #29
 8002e10:	08c2      	lsrs	r2, r0, #3
 8002e12:	431a      	orrs	r2, r3
 8002e14:	08cb      	lsrs	r3, r1, #3
 8002e16:	e64f      	b.n	8002ab8 <__aeabi_dsub+0x2f4>
 8002e18:	000a      	movs	r2, r1
 8002e1a:	4302      	orrs	r2, r0
 8002e1c:	d090      	beq.n	8002d40 <__aeabi_dsub+0x57c>
 8002e1e:	464a      	mov	r2, r9
 8002e20:	075c      	lsls	r4, r3, #29
 8002e22:	08d2      	lsrs	r2, r2, #3
 8002e24:	4314      	orrs	r4, r2
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	0312      	lsls	r2, r2, #12
 8002e2c:	4213      	tst	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <__aeabi_dsub+0x67e>
 8002e30:	08ce      	lsrs	r6, r1, #3
 8002e32:	4216      	tst	r6, r2
 8002e34:	d105      	bne.n	8002e42 <__aeabi_dsub+0x67e>
 8002e36:	08c0      	lsrs	r0, r0, #3
 8002e38:	0749      	lsls	r1, r1, #29
 8002e3a:	4308      	orrs	r0, r1
 8002e3c:	0004      	movs	r4, r0
 8002e3e:	465d      	mov	r5, fp
 8002e40:	0033      	movs	r3, r6
 8002e42:	0f61      	lsrs	r1, r4, #29
 8002e44:	00e2      	lsls	r2, r4, #3
 8002e46:	0749      	lsls	r1, r1, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	e678      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002e4e:	074b      	lsls	r3, r1, #29
 8002e50:	08c2      	lsrs	r2, r0, #3
 8002e52:	431a      	orrs	r2, r3
 8002e54:	08cb      	lsrs	r3, r1, #3
 8002e56:	e632      	b.n	8002abe <__aeabi_dsub+0x2fa>
 8002e58:	4448      	add	r0, r9
 8002e5a:	185b      	adds	r3, r3, r1
 8002e5c:	4548      	cmp	r0, r9
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	4698      	mov	r8, r3
 8002e62:	4252      	negs	r2, r2
 8002e64:	4490      	add	r8, r2
 8002e66:	4643      	mov	r3, r8
 8002e68:	0004      	movs	r4, r0
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	d400      	bmi.n	8002e70 <__aeabi_dsub+0x6ac>
 8002e6e:	e61a      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002e70:	4642      	mov	r2, r8
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <__aeabi_dsub+0x6e8>)
 8002e74:	2601      	movs	r6, #1
 8002e76:	401a      	ands	r2, r3
 8002e78:	4690      	mov	r8, r2
 8002e7a:	e614      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002e7c:	4666      	mov	r6, ip
 8002e7e:	001f      	movs	r7, r3
 8002e80:	3e20      	subs	r6, #32
 8002e82:	40f7      	lsrs	r7, r6
 8002e84:	2c20      	cmp	r4, #32
 8002e86:	d005      	beq.n	8002e94 <__aeabi_dsub+0x6d0>
 8002e88:	2640      	movs	r6, #64	; 0x40
 8002e8a:	1b36      	subs	r6, r6, r4
 8002e8c:	40b3      	lsls	r3, r6
 8002e8e:	464c      	mov	r4, r9
 8002e90:	431c      	orrs	r4, r3
 8002e92:	46a2      	mov	sl, r4
 8002e94:	4654      	mov	r4, sl
 8002e96:	1e63      	subs	r3, r4, #1
 8002e98:	419c      	sbcs	r4, r3
 8002e9a:	433c      	orrs	r4, r7
 8002e9c:	e5c8      	b.n	8002a30 <__aeabi_dsub+0x26c>
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	e532      	b.n	800290c <__aeabi_dsub+0x148>
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	000007ff 	.word	0x000007ff
 8002eac:	ff7fffff 	.word	0xff7fffff
 8002eb0:	000007fe 	.word	0x000007fe
 8002eb4:	464a      	mov	r2, r9
 8002eb6:	1814      	adds	r4, r2, r0
 8002eb8:	4284      	cmp	r4, r0
 8002eba:	4192      	sbcs	r2, r2
 8002ebc:	185b      	adds	r3, r3, r1
 8002ebe:	4698      	mov	r8, r3
 8002ec0:	4252      	negs	r2, r2
 8002ec2:	4490      	add	r8, r2
 8002ec4:	e5e9      	b.n	8002a9a <__aeabi_dsub+0x2d6>
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	4322      	orrs	r2, r4
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x70a>
 8002ecc:	e6a6      	b.n	8002c1c <__aeabi_dsub+0x458>
 8002ece:	e5ea      	b.n	8002aa6 <__aeabi_dsub+0x2e2>
 8002ed0:	074b      	lsls	r3, r1, #29
 8002ed2:	08c2      	lsrs	r2, r0, #3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	08cb      	lsrs	r3, r1, #3
 8002ed8:	e632      	b.n	8002b40 <__aeabi_dsub+0x37c>
 8002eda:	2200      	movs	r2, #0
 8002edc:	4901      	ldr	r1, [pc, #4]	; (8002ee4 <__aeabi_dsub+0x720>)
 8002ede:	0013      	movs	r3, r2
 8002ee0:	e514      	b.n	800290c <__aeabi_dsub+0x148>
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	000007ff 	.word	0x000007ff

08002ee8 <__aeabi_dcmpun>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	0005      	movs	r5, r0
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <__aeabi_dcmpun+0x38>)
 8002eee:	030c      	lsls	r4, r1, #12
 8002ef0:	0016      	movs	r6, r2
 8002ef2:	0049      	lsls	r1, r1, #1
 8002ef4:	031a      	lsls	r2, r3, #12
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	0b24      	lsrs	r4, r4, #12
 8002efa:	0d49      	lsrs	r1, r1, #21
 8002efc:	0b12      	lsrs	r2, r2, #12
 8002efe:	0d5b      	lsrs	r3, r3, #21
 8002f00:	4281      	cmp	r1, r0
 8002f02:	d008      	beq.n	8002f16 <__aeabi_dcmpun+0x2e>
 8002f04:	4906      	ldr	r1, [pc, #24]	; (8002f20 <__aeabi_dcmpun+0x38>)
 8002f06:	2000      	movs	r0, #0
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d103      	bne.n	8002f14 <__aeabi_dcmpun+0x2c>
 8002f0c:	4332      	orrs	r2, r6
 8002f0e:	0010      	movs	r0, r2
 8002f10:	1e42      	subs	r2, r0, #1
 8002f12:	4190      	sbcs	r0, r2
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	2001      	movs	r0, #1
 8002f18:	432c      	orrs	r4, r5
 8002f1a:	d1fb      	bne.n	8002f14 <__aeabi_dcmpun+0x2c>
 8002f1c:	e7f2      	b.n	8002f04 <__aeabi_dcmpun+0x1c>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff

08002f24 <__aeabi_d2iz>:
 8002f24:	000a      	movs	r2, r1
 8002f26:	b530      	push	{r4, r5, lr}
 8002f28:	4c13      	ldr	r4, [pc, #76]	; (8002f78 <__aeabi_d2iz+0x54>)
 8002f2a:	0053      	lsls	r3, r2, #1
 8002f2c:	0309      	lsls	r1, r1, #12
 8002f2e:	0005      	movs	r5, r0
 8002f30:	0b09      	lsrs	r1, r1, #12
 8002f32:	2000      	movs	r0, #0
 8002f34:	0d5b      	lsrs	r3, r3, #21
 8002f36:	0fd2      	lsrs	r2, r2, #31
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	dd04      	ble.n	8002f46 <__aeabi_d2iz+0x22>
 8002f3c:	480f      	ldr	r0, [pc, #60]	; (8002f7c <__aeabi_d2iz+0x58>)
 8002f3e:	4283      	cmp	r3, r0
 8002f40:	dd02      	ble.n	8002f48 <__aeabi_d2iz+0x24>
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <__aeabi_d2iz+0x5c>)
 8002f44:	18d0      	adds	r0, r2, r3
 8002f46:	bd30      	pop	{r4, r5, pc}
 8002f48:	2080      	movs	r0, #128	; 0x80
 8002f4a:	0340      	lsls	r0, r0, #13
 8002f4c:	4301      	orrs	r1, r0
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <__aeabi_d2iz+0x60>)
 8002f50:	1ac0      	subs	r0, r0, r3
 8002f52:	281f      	cmp	r0, #31
 8002f54:	dd08      	ble.n	8002f68 <__aeabi_d2iz+0x44>
 8002f56:	480c      	ldr	r0, [pc, #48]	; (8002f88 <__aeabi_d2iz+0x64>)
 8002f58:	1ac3      	subs	r3, r0, r3
 8002f5a:	40d9      	lsrs	r1, r3
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	4258      	negs	r0, r3
 8002f60:	2a00      	cmp	r2, #0
 8002f62:	d1f0      	bne.n	8002f46 <__aeabi_d2iz+0x22>
 8002f64:	0018      	movs	r0, r3
 8002f66:	e7ee      	b.n	8002f46 <__aeabi_d2iz+0x22>
 8002f68:	4c08      	ldr	r4, [pc, #32]	; (8002f8c <__aeabi_d2iz+0x68>)
 8002f6a:	40c5      	lsrs	r5, r0
 8002f6c:	46a4      	mov	ip, r4
 8002f6e:	4463      	add	r3, ip
 8002f70:	4099      	lsls	r1, r3
 8002f72:	000b      	movs	r3, r1
 8002f74:	432b      	orrs	r3, r5
 8002f76:	e7f2      	b.n	8002f5e <__aeabi_d2iz+0x3a>
 8002f78:	000003fe 	.word	0x000003fe
 8002f7c:	0000041d 	.word	0x0000041d
 8002f80:	7fffffff 	.word	0x7fffffff
 8002f84:	00000433 	.word	0x00000433
 8002f88:	00000413 	.word	0x00000413
 8002f8c:	fffffbed 	.word	0xfffffbed

08002f90 <__aeabi_i2d>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d016      	beq.n	8002fc4 <__aeabi_i2d+0x34>
 8002f96:	17c3      	asrs	r3, r0, #31
 8002f98:	18c5      	adds	r5, r0, r3
 8002f9a:	405d      	eors	r5, r3
 8002f9c:	0fc4      	lsrs	r4, r0, #31
 8002f9e:	0028      	movs	r0, r5
 8002fa0:	f000 f91c 	bl	80031dc <__clzsi2>
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <__aeabi_i2d+0x5c>)
 8002fa6:	1a12      	subs	r2, r2, r0
 8002fa8:	280a      	cmp	r0, #10
 8002faa:	dc16      	bgt.n	8002fda <__aeabi_i2d+0x4a>
 8002fac:	0003      	movs	r3, r0
 8002fae:	002e      	movs	r6, r5
 8002fb0:	3315      	adds	r3, #21
 8002fb2:	409e      	lsls	r6, r3
 8002fb4:	230b      	movs	r3, #11
 8002fb6:	1a18      	subs	r0, r3, r0
 8002fb8:	40c5      	lsrs	r5, r0
 8002fba:	0553      	lsls	r3, r2, #21
 8002fbc:	032d      	lsls	r5, r5, #12
 8002fbe:	0b2d      	lsrs	r5, r5, #12
 8002fc0:	0d5b      	lsrs	r3, r3, #21
 8002fc2:	e003      	b.n	8002fcc <__aeabi_i2d+0x3c>
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2500      	movs	r5, #0
 8002fca:	2600      	movs	r6, #0
 8002fcc:	051b      	lsls	r3, r3, #20
 8002fce:	432b      	orrs	r3, r5
 8002fd0:	07e4      	lsls	r4, r4, #31
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	0030      	movs	r0, r6
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	380b      	subs	r0, #11
 8002fdc:	4085      	lsls	r5, r0
 8002fde:	0553      	lsls	r3, r2, #21
 8002fe0:	032d      	lsls	r5, r5, #12
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	0b2d      	lsrs	r5, r5, #12
 8002fe6:	0d5b      	lsrs	r3, r3, #21
 8002fe8:	e7f0      	b.n	8002fcc <__aeabi_i2d+0x3c>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	0000041e 	.word	0x0000041e

08002ff0 <__aeabi_ui2d>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	1e04      	subs	r4, r0, #0
 8002ff4:	d010      	beq.n	8003018 <__aeabi_ui2d+0x28>
 8002ff6:	f000 f8f1 	bl	80031dc <__clzsi2>
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <__aeabi_ui2d+0x48>)
 8002ffc:	1a1b      	subs	r3, r3, r0
 8002ffe:	280a      	cmp	r0, #10
 8003000:	dc11      	bgt.n	8003026 <__aeabi_ui2d+0x36>
 8003002:	220b      	movs	r2, #11
 8003004:	0021      	movs	r1, r4
 8003006:	1a12      	subs	r2, r2, r0
 8003008:	40d1      	lsrs	r1, r2
 800300a:	3015      	adds	r0, #21
 800300c:	030a      	lsls	r2, r1, #12
 800300e:	055b      	lsls	r3, r3, #21
 8003010:	4084      	lsls	r4, r0
 8003012:	0b12      	lsrs	r2, r2, #12
 8003014:	0d5b      	lsrs	r3, r3, #21
 8003016:	e001      	b.n	800301c <__aeabi_ui2d+0x2c>
 8003018:	2300      	movs	r3, #0
 800301a:	2200      	movs	r2, #0
 800301c:	051b      	lsls	r3, r3, #20
 800301e:	4313      	orrs	r3, r2
 8003020:	0020      	movs	r0, r4
 8003022:	0019      	movs	r1, r3
 8003024:	bd10      	pop	{r4, pc}
 8003026:	0022      	movs	r2, r4
 8003028:	380b      	subs	r0, #11
 800302a:	4082      	lsls	r2, r0
 800302c:	055b      	lsls	r3, r3, #21
 800302e:	0312      	lsls	r2, r2, #12
 8003030:	2400      	movs	r4, #0
 8003032:	0b12      	lsrs	r2, r2, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e7f1      	b.n	800301c <__aeabi_ui2d+0x2c>
 8003038:	0000041e 	.word	0x0000041e

0800303c <__aeabi_f2d>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	0043      	lsls	r3, r0, #1
 8003040:	0246      	lsls	r6, r0, #9
 8003042:	0fc4      	lsrs	r4, r0, #31
 8003044:	20fe      	movs	r0, #254	; 0xfe
 8003046:	0e1b      	lsrs	r3, r3, #24
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	0a75      	lsrs	r5, r6, #9
 800304c:	4208      	tst	r0, r1
 800304e:	d00c      	beq.n	800306a <__aeabi_f2d+0x2e>
 8003050:	22e0      	movs	r2, #224	; 0xe0
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4694      	mov	ip, r2
 8003056:	076d      	lsls	r5, r5, #29
 8003058:	0b36      	lsrs	r6, r6, #12
 800305a:	4463      	add	r3, ip
 800305c:	051b      	lsls	r3, r3, #20
 800305e:	4333      	orrs	r3, r6
 8003060:	07e4      	lsls	r4, r4, #31
 8003062:	4323      	orrs	r3, r4
 8003064:	0028      	movs	r0, r5
 8003066:	0019      	movs	r1, r3
 8003068:	bd70      	pop	{r4, r5, r6, pc}
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <__aeabi_f2d+0x5c>
 800306e:	2d00      	cmp	r5, #0
 8003070:	d01b      	beq.n	80030aa <__aeabi_f2d+0x6e>
 8003072:	0028      	movs	r0, r5
 8003074:	f000 f8b2 	bl	80031dc <__clzsi2>
 8003078:	280a      	cmp	r0, #10
 800307a:	dc1c      	bgt.n	80030b6 <__aeabi_f2d+0x7a>
 800307c:	230b      	movs	r3, #11
 800307e:	002a      	movs	r2, r5
 8003080:	1a1b      	subs	r3, r3, r0
 8003082:	40da      	lsrs	r2, r3
 8003084:	0003      	movs	r3, r0
 8003086:	3315      	adds	r3, #21
 8003088:	409d      	lsls	r5, r3
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <__aeabi_f2d+0x88>)
 800308c:	0312      	lsls	r2, r2, #12
 800308e:	1a1b      	subs	r3, r3, r0
 8003090:	055b      	lsls	r3, r3, #21
 8003092:	0b16      	lsrs	r6, r2, #12
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	e7e1      	b.n	800305c <__aeabi_f2d+0x20>
 8003098:	2d00      	cmp	r5, #0
 800309a:	d009      	beq.n	80030b0 <__aeabi_f2d+0x74>
 800309c:	0b32      	lsrs	r2, r6, #12
 800309e:	2680      	movs	r6, #128	; 0x80
 80030a0:	0336      	lsls	r6, r6, #12
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <__aeabi_f2d+0x8c>)
 80030a4:	076d      	lsls	r5, r5, #29
 80030a6:	4316      	orrs	r6, r2
 80030a8:	e7d8      	b.n	800305c <__aeabi_f2d+0x20>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2600      	movs	r6, #0
 80030ae:	e7d5      	b.n	800305c <__aeabi_f2d+0x20>
 80030b0:	2600      	movs	r6, #0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <__aeabi_f2d+0x8c>)
 80030b4:	e7d2      	b.n	800305c <__aeabi_f2d+0x20>
 80030b6:	0003      	movs	r3, r0
 80030b8:	002a      	movs	r2, r5
 80030ba:	3b0b      	subs	r3, #11
 80030bc:	409a      	lsls	r2, r3
 80030be:	2500      	movs	r5, #0
 80030c0:	e7e3      	b.n	800308a <__aeabi_f2d+0x4e>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	00000389 	.word	0x00000389
 80030c8:	000007ff 	.word	0x000007ff

080030cc <__aeabi_d2f>:
 80030cc:	0002      	movs	r2, r0
 80030ce:	004b      	lsls	r3, r1, #1
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	0308      	lsls	r0, r1, #12
 80030d4:	0d5b      	lsrs	r3, r3, #21
 80030d6:	4e3d      	ldr	r6, [pc, #244]	; (80031cc <__aeabi_d2f+0x100>)
 80030d8:	0fcc      	lsrs	r4, r1, #31
 80030da:	0a40      	lsrs	r0, r0, #9
 80030dc:	0f51      	lsrs	r1, r2, #29
 80030de:	1c5f      	adds	r7, r3, #1
 80030e0:	4308      	orrs	r0, r1
 80030e2:	00d5      	lsls	r5, r2, #3
 80030e4:	4237      	tst	r7, r6
 80030e6:	d00a      	beq.n	80030fe <__aeabi_d2f+0x32>
 80030e8:	4939      	ldr	r1, [pc, #228]	; (80031d0 <__aeabi_d2f+0x104>)
 80030ea:	185e      	adds	r6, r3, r1
 80030ec:	2efe      	cmp	r6, #254	; 0xfe
 80030ee:	dd16      	ble.n	800311e <__aeabi_d2f+0x52>
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	2100      	movs	r1, #0
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	430b      	orrs	r3, r1
 80030f8:	07e0      	lsls	r0, r4, #31
 80030fa:	4318      	orrs	r0, r3
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <__aeabi_d2f+0x44>
 8003102:	4328      	orrs	r0, r5
 8003104:	d027      	beq.n	8003156 <__aeabi_d2f+0x8a>
 8003106:	2105      	movs	r1, #5
 8003108:	0189      	lsls	r1, r1, #6
 800310a:	0a49      	lsrs	r1, r1, #9
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e7f1      	b.n	80030f4 <__aeabi_d2f+0x28>
 8003110:	4305      	orrs	r5, r0
 8003112:	d0ed      	beq.n	80030f0 <__aeabi_d2f+0x24>
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	03c9      	lsls	r1, r1, #15
 8003118:	23ff      	movs	r3, #255	; 0xff
 800311a:	4301      	orrs	r1, r0
 800311c:	e7ea      	b.n	80030f4 <__aeabi_d2f+0x28>
 800311e:	2e00      	cmp	r6, #0
 8003120:	dd1c      	ble.n	800315c <__aeabi_d2f+0x90>
 8003122:	0192      	lsls	r2, r2, #6
 8003124:	0011      	movs	r1, r2
 8003126:	1e4a      	subs	r2, r1, #1
 8003128:	4191      	sbcs	r1, r2
 800312a:	00c0      	lsls	r0, r0, #3
 800312c:	0f6d      	lsrs	r5, r5, #29
 800312e:	4301      	orrs	r1, r0
 8003130:	4329      	orrs	r1, r5
 8003132:	074b      	lsls	r3, r1, #29
 8003134:	d048      	beq.n	80031c8 <__aeabi_d2f+0xfc>
 8003136:	230f      	movs	r3, #15
 8003138:	400b      	ands	r3, r1
 800313a:	2b04      	cmp	r3, #4
 800313c:	d000      	beq.n	8003140 <__aeabi_d2f+0x74>
 800313e:	3104      	adds	r1, #4
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	04db      	lsls	r3, r3, #19
 8003144:	400b      	ands	r3, r1
 8003146:	d03f      	beq.n	80031c8 <__aeabi_d2f+0xfc>
 8003148:	1c72      	adds	r2, r6, #1
 800314a:	2efe      	cmp	r6, #254	; 0xfe
 800314c:	d0d0      	beq.n	80030f0 <__aeabi_d2f+0x24>
 800314e:	0189      	lsls	r1, r1, #6
 8003150:	0a49      	lsrs	r1, r1, #9
 8003152:	b2d3      	uxtb	r3, r2
 8003154:	e7ce      	b.n	80030f4 <__aeabi_d2f+0x28>
 8003156:	2300      	movs	r3, #0
 8003158:	2100      	movs	r1, #0
 800315a:	e7cb      	b.n	80030f4 <__aeabi_d2f+0x28>
 800315c:	0032      	movs	r2, r6
 800315e:	3217      	adds	r2, #23
 8003160:	db22      	blt.n	80031a8 <__aeabi_d2f+0xdc>
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	221e      	movs	r2, #30
 8003166:	0409      	lsls	r1, r1, #16
 8003168:	4308      	orrs	r0, r1
 800316a:	1b92      	subs	r2, r2, r6
 800316c:	2a1f      	cmp	r2, #31
 800316e:	dd1d      	ble.n	80031ac <__aeabi_d2f+0xe0>
 8003170:	2102      	movs	r1, #2
 8003172:	4249      	negs	r1, r1
 8003174:	1b8e      	subs	r6, r1, r6
 8003176:	0001      	movs	r1, r0
 8003178:	40f1      	lsrs	r1, r6
 800317a:	000e      	movs	r6, r1
 800317c:	2a20      	cmp	r2, #32
 800317e:	d004      	beq.n	800318a <__aeabi_d2f+0xbe>
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <__aeabi_d2f+0x108>)
 8003182:	4694      	mov	ip, r2
 8003184:	4463      	add	r3, ip
 8003186:	4098      	lsls	r0, r3
 8003188:	4305      	orrs	r5, r0
 800318a:	0029      	movs	r1, r5
 800318c:	1e4d      	subs	r5, r1, #1
 800318e:	41a9      	sbcs	r1, r5
 8003190:	4331      	orrs	r1, r6
 8003192:	2600      	movs	r6, #0
 8003194:	074b      	lsls	r3, r1, #29
 8003196:	d1ce      	bne.n	8003136 <__aeabi_d2f+0x6a>
 8003198:	2080      	movs	r0, #128	; 0x80
 800319a:	000b      	movs	r3, r1
 800319c:	04c0      	lsls	r0, r0, #19
 800319e:	2201      	movs	r2, #1
 80031a0:	4003      	ands	r3, r0
 80031a2:	4201      	tst	r1, r0
 80031a4:	d1d3      	bne.n	800314e <__aeabi_d2f+0x82>
 80031a6:	e7af      	b.n	8003108 <__aeabi_d2f+0x3c>
 80031a8:	2300      	movs	r3, #0
 80031aa:	e7ac      	b.n	8003106 <__aeabi_d2f+0x3a>
 80031ac:	490a      	ldr	r1, [pc, #40]	; (80031d8 <__aeabi_d2f+0x10c>)
 80031ae:	468c      	mov	ip, r1
 80031b0:	0029      	movs	r1, r5
 80031b2:	4463      	add	r3, ip
 80031b4:	40d1      	lsrs	r1, r2
 80031b6:	409d      	lsls	r5, r3
 80031b8:	000a      	movs	r2, r1
 80031ba:	0029      	movs	r1, r5
 80031bc:	4098      	lsls	r0, r3
 80031be:	1e4d      	subs	r5, r1, #1
 80031c0:	41a9      	sbcs	r1, r5
 80031c2:	4301      	orrs	r1, r0
 80031c4:	4311      	orrs	r1, r2
 80031c6:	e7e4      	b.n	8003192 <__aeabi_d2f+0xc6>
 80031c8:	0033      	movs	r3, r6
 80031ca:	e79d      	b.n	8003108 <__aeabi_d2f+0x3c>
 80031cc:	000007fe 	.word	0x000007fe
 80031d0:	fffffc80 	.word	0xfffffc80
 80031d4:	fffffca2 	.word	0xfffffca2
 80031d8:	fffffc82 	.word	0xfffffc82

080031dc <__clzsi2>:
 80031dc:	211c      	movs	r1, #28
 80031de:	2301      	movs	r3, #1
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	4298      	cmp	r0, r3
 80031e4:	d301      	bcc.n	80031ea <__clzsi2+0xe>
 80031e6:	0c00      	lsrs	r0, r0, #16
 80031e8:	3910      	subs	r1, #16
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	4298      	cmp	r0, r3
 80031ee:	d301      	bcc.n	80031f4 <__clzsi2+0x18>
 80031f0:	0a00      	lsrs	r0, r0, #8
 80031f2:	3908      	subs	r1, #8
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	4298      	cmp	r0, r3
 80031f8:	d301      	bcc.n	80031fe <__clzsi2+0x22>
 80031fa:	0900      	lsrs	r0, r0, #4
 80031fc:	3904      	subs	r1, #4
 80031fe:	a202      	add	r2, pc, #8	; (adr r2, 8003208 <__clzsi2+0x2c>)
 8003200:	5c10      	ldrb	r0, [r2, r0]
 8003202:	1840      	adds	r0, r0, r1
 8003204:	4770      	bx	lr
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	02020304 	.word	0x02020304
 800320c:	01010101 	.word	0x01010101
	...

08003218 <__divdi3>:
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	4657      	mov	r7, sl
 800321c:	464e      	mov	r6, r9
 800321e:	4645      	mov	r5, r8
 8003220:	46de      	mov	lr, fp
 8003222:	b5e0      	push	{r5, r6, r7, lr}
 8003224:	000f      	movs	r7, r1
 8003226:	0019      	movs	r1, r3
 8003228:	2300      	movs	r3, #0
 800322a:	0006      	movs	r6, r0
 800322c:	4698      	mov	r8, r3
 800322e:	0010      	movs	r0, r2
 8003230:	b083      	sub	sp, #12
 8003232:	2f00      	cmp	r7, #0
 8003234:	da07      	bge.n	8003246 <__divdi3+0x2e>
 8003236:	0033      	movs	r3, r6
 8003238:	003c      	movs	r4, r7
 800323a:	2700      	movs	r7, #0
 800323c:	425e      	negs	r6, r3
 800323e:	41a7      	sbcs	r7, r4
 8003240:	2301      	movs	r3, #1
 8003242:	425b      	negs	r3, r3
 8003244:	4698      	mov	r8, r3
 8003246:	2900      	cmp	r1, #0
 8003248:	da07      	bge.n	800325a <__divdi3+0x42>
 800324a:	4643      	mov	r3, r8
 800324c:	43db      	mvns	r3, r3
 800324e:	000c      	movs	r4, r1
 8003250:	4698      	mov	r8, r3
 8003252:	0003      	movs	r3, r0
 8003254:	2100      	movs	r1, #0
 8003256:	4258      	negs	r0, r3
 8003258:	41a1      	sbcs	r1, r4
 800325a:	0034      	movs	r4, r6
 800325c:	003d      	movs	r5, r7
 800325e:	4682      	mov	sl, r0
 8003260:	4689      	mov	r9, r1
 8003262:	42b9      	cmp	r1, r7
 8003264:	d86a      	bhi.n	800333c <__divdi3+0x124>
 8003266:	d067      	beq.n	8003338 <__divdi3+0x120>
 8003268:	4649      	mov	r1, r9
 800326a:	4650      	mov	r0, sl
 800326c:	f000 f8ba 	bl	80033e4 <__clzdi2>
 8003270:	4683      	mov	fp, r0
 8003272:	0039      	movs	r1, r7
 8003274:	0030      	movs	r0, r6
 8003276:	f000 f8b5 	bl	80033e4 <__clzdi2>
 800327a:	465b      	mov	r3, fp
 800327c:	1a1b      	subs	r3, r3, r0
 800327e:	469c      	mov	ip, r3
 8003280:	3b20      	subs	r3, #32
 8003282:	469b      	mov	fp, r3
 8003284:	d46b      	bmi.n	800335e <__divdi3+0x146>
 8003286:	4658      	mov	r0, fp
 8003288:	4651      	mov	r1, sl
 800328a:	4081      	lsls	r1, r0
 800328c:	4660      	mov	r0, ip
 800328e:	000b      	movs	r3, r1
 8003290:	4651      	mov	r1, sl
 8003292:	4081      	lsls	r1, r0
 8003294:	000a      	movs	r2, r1
 8003296:	42bb      	cmp	r3, r7
 8003298:	d900      	bls.n	800329c <__divdi3+0x84>
 800329a:	e072      	b.n	8003382 <__divdi3+0x16a>
 800329c:	42bb      	cmp	r3, r7
 800329e:	d100      	bne.n	80032a2 <__divdi3+0x8a>
 80032a0:	e079      	b.n	8003396 <__divdi3+0x17e>
 80032a2:	0034      	movs	r4, r6
 80032a4:	003d      	movs	r5, r7
 80032a6:	4659      	mov	r1, fp
 80032a8:	1aa4      	subs	r4, r4, r2
 80032aa:	419d      	sbcs	r5, r3
 80032ac:	2900      	cmp	r1, #0
 80032ae:	da00      	bge.n	80032b2 <__divdi3+0x9a>
 80032b0:	e074      	b.n	800339c <__divdi3+0x184>
 80032b2:	2100      	movs	r1, #0
 80032b4:	2000      	movs	r0, #0
 80032b6:	2601      	movs	r6, #1
 80032b8:	9000      	str	r0, [sp, #0]
 80032ba:	9101      	str	r1, [sp, #4]
 80032bc:	4659      	mov	r1, fp
 80032be:	408e      	lsls	r6, r1
 80032c0:	9601      	str	r6, [sp, #4]
 80032c2:	4661      	mov	r1, ip
 80032c4:	2601      	movs	r6, #1
 80032c6:	408e      	lsls	r6, r1
 80032c8:	4661      	mov	r1, ip
 80032ca:	9600      	str	r6, [sp, #0]
 80032cc:	2900      	cmp	r1, #0
 80032ce:	d05f      	beq.n	8003390 <__divdi3+0x178>
 80032d0:	07d9      	lsls	r1, r3, #31
 80032d2:	0856      	lsrs	r6, r2, #1
 80032d4:	430e      	orrs	r6, r1
 80032d6:	085f      	lsrs	r7, r3, #1
 80032d8:	4661      	mov	r1, ip
 80032da:	2201      	movs	r2, #1
 80032dc:	2300      	movs	r3, #0
 80032de:	e00c      	b.n	80032fa <__divdi3+0xe2>
 80032e0:	42af      	cmp	r7, r5
 80032e2:	d101      	bne.n	80032e8 <__divdi3+0xd0>
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d80a      	bhi.n	80032fe <__divdi3+0xe6>
 80032e8:	1ba4      	subs	r4, r4, r6
 80032ea:	41bd      	sbcs	r5, r7
 80032ec:	1924      	adds	r4, r4, r4
 80032ee:	416d      	adcs	r5, r5
 80032f0:	3901      	subs	r1, #1
 80032f2:	18a4      	adds	r4, r4, r2
 80032f4:	415d      	adcs	r5, r3
 80032f6:	2900      	cmp	r1, #0
 80032f8:	d006      	beq.n	8003308 <__divdi3+0xf0>
 80032fa:	42af      	cmp	r7, r5
 80032fc:	d9f0      	bls.n	80032e0 <__divdi3+0xc8>
 80032fe:	3901      	subs	r1, #1
 8003300:	1924      	adds	r4, r4, r4
 8003302:	416d      	adcs	r5, r5
 8003304:	2900      	cmp	r1, #0
 8003306:	d1f8      	bne.n	80032fa <__divdi3+0xe2>
 8003308:	9800      	ldr	r0, [sp, #0]
 800330a:	9901      	ldr	r1, [sp, #4]
 800330c:	465b      	mov	r3, fp
 800330e:	1900      	adds	r0, r0, r4
 8003310:	4169      	adcs	r1, r5
 8003312:	2b00      	cmp	r3, #0
 8003314:	db4d      	blt.n	80033b2 <__divdi3+0x19a>
 8003316:	002e      	movs	r6, r5
 8003318:	002c      	movs	r4, r5
 800331a:	40de      	lsrs	r6, r3
 800331c:	4663      	mov	r3, ip
 800331e:	40dc      	lsrs	r4, r3
 8003320:	465b      	mov	r3, fp
 8003322:	2b00      	cmp	r3, #0
 8003324:	db55      	blt.n	80033d2 <__divdi3+0x1ba>
 8003326:	0034      	movs	r4, r6
 8003328:	409c      	lsls	r4, r3
 800332a:	0023      	movs	r3, r4
 800332c:	4664      	mov	r4, ip
 800332e:	40a6      	lsls	r6, r4
 8003330:	0032      	movs	r2, r6
 8003332:	1a80      	subs	r0, r0, r2
 8003334:	4199      	sbcs	r1, r3
 8003336:	e003      	b.n	8003340 <__divdi3+0x128>
 8003338:	42b0      	cmp	r0, r6
 800333a:	d995      	bls.n	8003268 <__divdi3+0x50>
 800333c:	2000      	movs	r0, #0
 800333e:	2100      	movs	r1, #0
 8003340:	4643      	mov	r3, r8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <__divdi3+0x138>
 8003346:	0003      	movs	r3, r0
 8003348:	000c      	movs	r4, r1
 800334a:	2100      	movs	r1, #0
 800334c:	4258      	negs	r0, r3
 800334e:	41a1      	sbcs	r1, r4
 8003350:	b003      	add	sp, #12
 8003352:	bcf0      	pop	{r4, r5, r6, r7}
 8003354:	46bb      	mov	fp, r7
 8003356:	46b2      	mov	sl, r6
 8003358:	46a9      	mov	r9, r5
 800335a:	46a0      	mov	r8, r4
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335e:	4662      	mov	r2, ip
 8003360:	4648      	mov	r0, r9
 8003362:	2320      	movs	r3, #32
 8003364:	4651      	mov	r1, sl
 8003366:	4090      	lsls	r0, r2
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	40d9      	lsrs	r1, r3
 800336c:	0003      	movs	r3, r0
 800336e:	9100      	str	r1, [sp, #0]
 8003370:	9900      	ldr	r1, [sp, #0]
 8003372:	4660      	mov	r0, ip
 8003374:	430b      	orrs	r3, r1
 8003376:	4651      	mov	r1, sl
 8003378:	4081      	lsls	r1, r0
 800337a:	000a      	movs	r2, r1
 800337c:	42bb      	cmp	r3, r7
 800337e:	d800      	bhi.n	8003382 <__divdi3+0x16a>
 8003380:	e78c      	b.n	800329c <__divdi3+0x84>
 8003382:	2100      	movs	r1, #0
 8003384:	2000      	movs	r0, #0
 8003386:	9000      	str	r0, [sp, #0]
 8003388:	9101      	str	r1, [sp, #4]
 800338a:	4661      	mov	r1, ip
 800338c:	2900      	cmp	r1, #0
 800338e:	d19f      	bne.n	80032d0 <__divdi3+0xb8>
 8003390:	9800      	ldr	r0, [sp, #0]
 8003392:	9901      	ldr	r1, [sp, #4]
 8003394:	e7d4      	b.n	8003340 <__divdi3+0x128>
 8003396:	42b1      	cmp	r1, r6
 8003398:	d8f3      	bhi.n	8003382 <__divdi3+0x16a>
 800339a:	e782      	b.n	80032a2 <__divdi3+0x8a>
 800339c:	4661      	mov	r1, ip
 800339e:	2620      	movs	r6, #32
 80033a0:	2701      	movs	r7, #1
 80033a2:	1a76      	subs	r6, r6, r1
 80033a4:	2000      	movs	r0, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	40f7      	lsrs	r7, r6
 80033aa:	9000      	str	r0, [sp, #0]
 80033ac:	9101      	str	r1, [sp, #4]
 80033ae:	9701      	str	r7, [sp, #4]
 80033b0:	e787      	b.n	80032c2 <__divdi3+0xaa>
 80033b2:	4662      	mov	r2, ip
 80033b4:	2320      	movs	r3, #32
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	002a      	movs	r2, r5
 80033ba:	409a      	lsls	r2, r3
 80033bc:	0026      	movs	r6, r4
 80033be:	0013      	movs	r3, r2
 80033c0:	4662      	mov	r2, ip
 80033c2:	40d6      	lsrs	r6, r2
 80033c4:	002c      	movs	r4, r5
 80033c6:	431e      	orrs	r6, r3
 80033c8:	4663      	mov	r3, ip
 80033ca:	40dc      	lsrs	r4, r3
 80033cc:	465b      	mov	r3, fp
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	daa9      	bge.n	8003326 <__divdi3+0x10e>
 80033d2:	4662      	mov	r2, ip
 80033d4:	2320      	movs	r3, #32
 80033d6:	0035      	movs	r5, r6
 80033d8:	4094      	lsls	r4, r2
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	40dd      	lsrs	r5, r3
 80033de:	0023      	movs	r3, r4
 80033e0:	432b      	orrs	r3, r5
 80033e2:	e7a3      	b.n	800332c <__divdi3+0x114>

080033e4 <__clzdi2>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d103      	bne.n	80033f2 <__clzdi2+0xe>
 80033ea:	f7ff fef7 	bl	80031dc <__clzsi2>
 80033ee:	3020      	adds	r0, #32
 80033f0:	e002      	b.n	80033f8 <__clzdi2+0x14>
 80033f2:	1c08      	adds	r0, r1, #0
 80033f4:	f7ff fef2 	bl	80031dc <__clzsi2>
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)

080033fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_Init+0x3c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_Init+0x3c>)
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	0049      	lsls	r1, r1, #1
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003416:	2000      	movs	r0, #0
 8003418:	f000 f810 	bl	800343c <HAL_InitTick>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d003      	beq.n	8003428 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003420:	1dfb      	adds	r3, r7, #7
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e001      	b.n	800342c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003428:	f00f fada 	bl	80129e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781b      	ldrb	r3, [r3, #0]
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40022000 	.word	0x40022000

0800343c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_InitTick+0x88>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02b      	beq.n	80034ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_InitTick+0x8c>)
 8003456:	681c      	ldr	r4, [r3, #0]
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_InitTick+0x88>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	0019      	movs	r1, r3
 800345e:	23fa      	movs	r3, #250	; 0xfa
 8003460:	0098      	lsls	r0, r3, #2
 8003462:	f7fc fe5b 	bl	800011c <__udivsi3>
 8003466:	0003      	movs	r3, r0
 8003468:	0019      	movs	r1, r3
 800346a:	0020      	movs	r0, r4
 800346c:	f7fc fe56 	bl	800011c <__udivsi3>
 8003470:	0003      	movs	r3, r0
 8003472:	0018      	movs	r0, r3
 8003474:	f001 f80f 	bl	8004496 <HAL_SYSTICK_Config>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d112      	bne.n	80034a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d80a      	bhi.n	8003498 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	2301      	movs	r3, #1
 8003486:	425b      	negs	r3, r3
 8003488:	2200      	movs	r2, #0
 800348a:	0018      	movs	r0, r3
 800348c:	f000 ffde 	bl	800444c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_InitTick+0x90>)
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e00d      	b.n	80034b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003498:	230f      	movs	r3, #15
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e008      	b.n	80034b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034a2:	230f      	movs	r3, #15
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e003      	b.n	80034b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b005      	add	sp, #20
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	20000004 	.word	0x20000004
 80034c8:	20000088 	.word	0x20000088
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x1c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	001a      	movs	r2, r3
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_IncTick+0x20>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	18d2      	adds	r2, r2, r3
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_IncTick+0x20>)
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000004 	.word	0x20000004
 80034f0:	200001d4 	.word	0x200001d4

080034f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b02      	ldr	r3, [pc, #8]	; (8003504 <HAL_GetTick+0x10>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	200001d4 	.word	0x200001d4

08003508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff fff0 	bl	80034f4 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	d005      	beq.n	800352e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_Delay+0x44>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	001a      	movs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	189b      	adds	r3, r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	f7ff ffe0 	bl	80034f4 <HAL_GetTick>
 8003534:	0002      	movs	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d8f7      	bhi.n	8003530 <HAL_Delay+0x28>
  {
  }
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <HAL_SuspendTick+0x18>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_SuspendTick+0x18>)
 800355a:	2102      	movs	r1, #2
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_ResumeTick+0x18>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_ResumeTick+0x18>)
 8003576:	2102      	movs	r1, #2
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	e000e010 	.word	0xe000e010

08003588 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40010000 	.word	0x40010000
 80035b0:	fffff9ff 	.word	0xfffff9ff

080035b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035c4:	401a      	ands	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	fe3fffff 	.word	0xfe3fffff

080035dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	23e0      	movs	r3, #224	; 0xe0
 80035ea:	045b      	lsls	r3, r3, #17
 80035ec:	4013      	ands	r3, r2
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	2104      	movs	r1, #4
 800360a:	400a      	ands	r2, r1
 800360c:	2107      	movs	r1, #7
 800360e:	4091      	lsls	r1, r2
 8003610:	000a      	movs	r2, r1
 8003612:	43d2      	mvns	r2, r2
 8003614:	401a      	ands	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2104      	movs	r1, #4
 800361a:	400b      	ands	r3, r1
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4099      	lsls	r1, r3
 8003620:	000b      	movs	r3, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}

08003630 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	23c0      	movs	r3, #192	; 0xc0
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d101      	bne.n	8003648 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b002      	add	sp, #8
 8003650:	bd80      	pop	{r7, pc}

08003652 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	211f      	movs	r1, #31
 8003666:	400a      	ands	r2, r1
 8003668:	210f      	movs	r1, #15
 800366a:	4091      	lsls	r1, r2
 800366c:	000a      	movs	r2, r1
 800366e:	43d2      	mvns	r2, r2
 8003670:	401a      	ands	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	210f      	movs	r1, #15
 8003678:	4019      	ands	r1, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	201f      	movs	r0, #31
 800367e:	4003      	ands	r3, r0
 8003680:	4099      	lsls	r1, r3
 8003682:	000b      	movs	r3, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}

08003692 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	035b      	lsls	r3, r3, #13
 80036a4:	0b5b      	lsrs	r3, r3, #13
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	0352      	lsls	r2, r2, #13
 80036c6:	0b52      	lsrs	r2, r2, #13
 80036c8:	43d2      	mvns	r2, r2
 80036ca:	401a      	ands	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	0212      	lsls	r2, r2, #8
 80036ec:	43d2      	mvns	r2, r2
 80036ee:	401a      	ands	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	400b      	ands	r3, r1
 80036f8:	4904      	ldr	r1, [pc, #16]	; (800370c <LL_ADC_SetChannelSamplingTime+0x34>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	07ffff00 	.word	0x07ffff00

08003710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a05      	ldr	r2, [pc, #20]	; (8003734 <LL_ADC_EnableInternalRegulator+0x24>)
 800371e:	4013      	ands	r3, r2
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	0552      	lsls	r2, r2, #21
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	6fffffe8 	.word	0x6fffffe8

08003738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	055b      	lsls	r3, r3, #21
 8003748:	401a      	ands	r2, r3
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	055b      	lsls	r3, r3, #21
 800374e:	429a      	cmp	r2, r3
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003756:	2300      	movs	r3, #0
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <LL_ADC_Enable+0x20>)
 800376e:	4013      	ands	r3, r2
 8003770:	2201      	movs	r2, #1
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}
 8003780:	7fffffe8 	.word	0x7fffffe8

08003784 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <LL_ADC_Disable+0x20>)
 8003792:	4013      	ands	r3, r2
 8003794:	2202      	movs	r2, #2
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	7fffffe8 	.word	0x7fffffe8

080037a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <LL_ADC_IsEnabled+0x18>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <LL_ADC_IsEnabled+0x1a>
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <LL_ADC_REG_StartConversion+0x20>)
 80037da:	4013      	ands	r3, r2
 80037dc:	2204      	movs	r2, #4
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	7fffffe8 	.word	0x7fffffe8

080037f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2204      	movs	r2, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	2b04      	cmp	r3, #4
 8003802:	d101      	bne.n	8003808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1b1      	b.n	8003b9e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f00f f8f3 	bl	8012a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2254      	movs	r2, #84	; 0x54
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0018      	movs	r0, r3
 800385e:	f7ff ff6b 	bl	8003738 <LL_ADC_IsInternalRegulatorEnabled>
 8003862:	1e03      	subs	r3, r0, #0
 8003864:	d115      	bne.n	8003892 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f7ff ff50 	bl	8003710 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003870:	4bcd      	ldr	r3, [pc, #820]	; (8003ba8 <HAL_ADC_Init+0x394>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	49cd      	ldr	r1, [pc, #820]	; (8003bac <HAL_ADC_Init+0x398>)
 8003876:	0018      	movs	r0, r3
 8003878:	f7fc fc50 	bl	800011c <__udivsi3>
 800387c:	0003      	movs	r3, r0
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003884:	e002      	b.n	800388c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3b01      	subs	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f9      	bne.n	8003886 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff ff4e 	bl	8003738 <LL_ADC_IsInternalRegulatorEnabled>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d10f      	bne.n	80038c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	2210      	movs	r2, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	2201      	movs	r2, #1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b8:	231f      	movs	r3, #31
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff ff93 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 80038ca:	0003      	movs	r3, r0
 80038cc:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	2210      	movs	r2, #16
 80038d4:	4013      	ands	r3, r2
 80038d6:	d000      	beq.n	80038da <HAL_ADC_Init+0xc6>
 80038d8:	e154      	b.n	8003b84 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d000      	beq.n	80038e2 <HAL_ADC_Init+0xce>
 80038e0:	e150      	b.n	8003b84 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	4ab2      	ldr	r2, [pc, #712]	; (8003bb0 <HAL_ADC_Init+0x39c>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	2202      	movs	r2, #2
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7ff ff56 	bl	80037a8 <LL_ADC_IsEnabled>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d156      	bne.n	80039ae <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2218      	movs	r2, #24
 8003908:	4393      	bics	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0f9b      	lsrs	r3, r3, #30
 800391e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	223c      	movs	r2, #60	; 0x3c
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d111      	bne.n	800395a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0f9b      	lsrs	r3, r3, #30
 800393c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003942:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003948:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800394e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	2201      	movs	r2, #1
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a94      	ldr	r2, [pc, #592]	; (8003bb4 <HAL_ADC_Init+0x3a0>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	430a      	orrs	r2, r1
 800396e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	429a      	cmp	r2, r3
 800397a:	d018      	beq.n	80039ae <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	429a      	cmp	r2, r3
 8003986:	d012      	beq.n	80039ae <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	429a      	cmp	r2, r3
 8003992:	d00c      	beq.n	80039ae <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003994:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_ADC_Init+0x3a4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a88      	ldr	r2, [pc, #544]	; (8003bbc <HAL_ADC_Init+0x3a8>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	23f0      	movs	r3, #240	; 0xf0
 80039a4:	039b      	lsls	r3, r3, #14
 80039a6:	401a      	ands	r2, r3
 80039a8:	4b83      	ldr	r3, [pc, #524]	; (8003bb8 <HAL_ADC_Init+0x3a4>)
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7e1b      	ldrb	r3, [r3, #24]
 80039b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e5b      	ldrb	r3, [r3, #25]
 80039b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7e9b      	ldrb	r3, [r3, #26]
 80039c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_Init+0x1be>
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	015b      	lsls	r3, r3, #5
 80039d0:	e000      	b.n	80039d4 <HAL_ADC_Init+0x1c0>
 80039d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039da:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da04      	bge.n	80039ee <HAL_ADC_Init+0x1da>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	e001      	b.n	80039f2 <HAL_ADC_Init+0x1de>
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80039f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	5c5b      	ldrb	r3, [r3, r1]
 80039fa:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039fc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	5c9b      	ldrb	r3, [r3, r2]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d115      	bne.n	8003a3a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7e9b      	ldrb	r3, [r3, #26]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	0252      	lsls	r2, r2, #9
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e00b      	b.n	8003a3a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	2220      	movs	r2, #32
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	2201      	movs	r2, #1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a46:	23e0      	movs	r3, #224	; 0xe0
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a50:	4313      	orrs	r3, r2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_ADC_Init+0x3ac>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_ADC_Init+0x3b0>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	0019      	movs	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f7ff fdb1 	bl	80035f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	494a      	ldr	r1, [pc, #296]	; (8003bc8 <HAL_ADC_Init+0x3b4>)
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	f7ff fda9 	bl	80035f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	4249      	negs	r1, r1
 8003aba:	430a      	orrs	r2, r1
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
 8003abe:	e03a      	b.n	8003b36 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	039b      	lsls	r3, r3, #14
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d134      	bne.n	8003b36 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e00c      	b.n	8003aec <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	40da      	lsrs	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	d006      	beq.n	8003af4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b07      	cmp	r3, #7
 8003af0:	d9ef      	bls.n	8003ad2 <HAL_ADC_Init+0x2be>
 8003af2:	e000      	b.n	8003af6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003af4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d109      	bne.n	8003b10 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2110      	movs	r1, #16
 8003b08:	4249      	negs	r1, r1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0e:	e012      	b.n	8003b36 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	221c      	movs	r2, #28
 8003b20:	4013      	ands	r3, r2
 8003b22:	2210      	movs	r2, #16
 8003b24:	4252      	negs	r2, r2
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0011      	movs	r1, r2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_ADC_Init+0x3b8>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d10b      	bne.n	8003b5e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	2203      	movs	r2, #3
 8003b52:	4393      	bics	r3, r2
 8003b54:	2201      	movs	r2, #1
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b5c:	e01c      	b.n	8003b98 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	2212      	movs	r2, #18
 8003b64:	4393      	bics	r3, r2
 8003b66:	2210      	movs	r2, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	2201      	movs	r2, #1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b82:	e009      	b.n	8003b98 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	2210      	movs	r2, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b98:	231f      	movs	r3, #31
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
}
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b008      	add	sp, #32
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	20000088 	.word	0x20000088
 8003bac:	00030d40 	.word	0x00030d40
 8003bb0:	fffffefd 	.word	0xfffffefd
 8003bb4:	1ffffc02 	.word	0x1ffffc02
 8003bb8:	40012708 	.word	0x40012708
 8003bbc:	ffc3ffff 	.word	0xffc3ffff
 8003bc0:	fffe0219 	.word	0xfffe0219
 8003bc4:	dffffc02 	.word	0xdffffc02
 8003bc8:	07ffff04 	.word	0x07ffff04
 8003bcc:	833fffe7 	.word	0x833fffe7

08003bd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff fe05 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d16c      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2254      	movs	r2, #84	; 0x54
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_Start_DMA+0x28>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e06c      	b.n	8003cd2 <HAL_ADC_Start_DMA+0x102>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2254      	movs	r2, #84	; 0x54
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d113      	bne.n	8003c34 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff fdc9 	bl	80037a8 <LL_ADC_IsEnabled>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff fdb0 	bl	8003784 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	430a      	orrs	r2, r1
 8003c32:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c34:	2517      	movs	r5, #23
 8003c36:	197c      	adds	r4, r7, r5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fa46 	bl	80040cc <ADC_Enable>
 8003c40:	0003      	movs	r3, r0
 8003c42:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c44:	002c      	movs	r4, r5
 8003c46:	193b      	adds	r3, r7, r4
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d13e      	bne.n	8003ccc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_ADC_Start_DMA+0x10c>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	0052      	lsls	r2, r2, #1
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_ADC_Start_DMA+0x110>)
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_ADC_Start_DMA+0x114>)
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_ADC_Start_DMA+0x118>)
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	221c      	movs	r2, #28
 8003c84:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2254      	movs	r2, #84	; 0x54
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2110      	movs	r1, #16
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3340      	adds	r3, #64	; 0x40
 8003ca8:	0019      	movs	r1, r3
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	193c      	adds	r4, r7, r4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f000 fc88 	bl	80045c4 <HAL_DMA_Start_IT>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fd85 	bl	80037cc <LL_ADC_REG_StartConversion>
 8003cc2:	e003      	b.n	8003ccc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cc4:	2317      	movs	r3, #23
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2202      	movs	r2, #2
 8003cca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003ccc:	2317      	movs	r3, #23
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b006      	add	sp, #24
 8003cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	fffff0fe 	.word	0xfffff0fe
 8003ce0:	080041d9 	.word	0x080041d9
 8003ce4:	080042a1 	.word	0x080042a1
 8003ce8:	080042bf 	.word	0x080042bf

08003cec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d26:	2317      	movs	r3, #23
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2254      	movs	r2, #84	; 0x54
 8003d36:	5c9b      	ldrb	r3, [r3, r2]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x24>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e1c0      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x3a6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2254      	movs	r2, #84	; 0x54
 8003d44:	2101      	movs	r1, #1
 8003d46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fd4f 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d000      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0x3c>
 8003d56:	e1a3      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d100      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x46>
 8003d60:	e143      	b.n	8003fea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d72:	4ac1      	ldr	r2, [pc, #772]	; (8004078 <HAL_ADC_ConfigChannel+0x35c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0019      	movs	r1, r3
 8003d82:	0010      	movs	r0, r2
 8003d84:	f7ff fc85 	bl	8003692 <LL_ADC_REG_SetSequencerChAdd>
 8003d88:	e0c9      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	211f      	movs	r1, #31
 8003d94:	400b      	ands	r3, r1
 8003d96:	210f      	movs	r1, #15
 8003d98:	4099      	lsls	r1, r3
 8003d9a:	000b      	movs	r3, r1
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	035b      	lsls	r3, r3, #13
 8003da8:	0b5b      	lsrs	r3, r3, #13
 8003daa:	d105      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x9c>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	221f      	movs	r2, #31
 8003db4:	4013      	ands	r3, r2
 8003db6:	e098      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d000      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0xa8>
 8003dc2:	e091      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x1cc>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d000      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0xb4>
 8003dce:	e089      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1c8>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d000      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0xc0>
 8003dda:	e081      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1c4>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	4013      	ands	r3, r2
 8003de4:	d000      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0xcc>
 8003de6:	e079      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1c0>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2210      	movs	r2, #16
 8003dee:	4013      	ands	r3, r2
 8003df0:	d000      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0xd8>
 8003df2:	e071      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x1bc>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d000      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0xe4>
 8003dfe:	e069      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1b8>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	4013      	ands	r3, r2
 8003e08:	d000      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0xf0>
 8003e0a:	e061      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x1b4>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	4013      	ands	r3, r2
 8003e14:	d000      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0xfc>
 8003e16:	e059      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x1b0>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4013      	ands	r3, r2
 8003e22:	d151      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x1ac>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d149      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x1a8>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d141      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1a4>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	4013      	ands	r3, r2
 8003e46:	d139      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x1a0>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	4013      	ands	r3, r2
 8003e52:	d131      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x19c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	019b      	lsls	r3, r3, #6
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d129      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x198>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	01db      	lsls	r3, r3, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d121      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x194>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	4013      	ands	r3, r2
 8003e76:	d119      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x190>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	025b      	lsls	r3, r3, #9
 8003e80:	4013      	ands	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x18c>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x188>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	02db      	lsls	r3, r3, #11
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d001      	beq.n	8003ea0 <HAL_ADC_ConfigChannel+0x184>
 8003e9c:	2312      	movs	r3, #18
 8003e9e:	e024      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e022      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ea4:	2311      	movs	r3, #17
 8003ea6:	e020      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	e01e      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003eac:	230f      	movs	r3, #15
 8003eae:	e01c      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003eb0:	230e      	movs	r3, #14
 8003eb2:	e01a      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003eb4:	230d      	movs	r3, #13
 8003eb6:	e018      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	e016      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ebc:	230b      	movs	r3, #11
 8003ebe:	e014      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	e012      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ec4:	2309      	movs	r3, #9
 8003ec6:	e010      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	e00e      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ecc:	2307      	movs	r3, #7
 8003ece:	e00c      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ed0:	2306      	movs	r3, #6
 8003ed2:	e00a      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	e008      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e006      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003edc:	2303      	movs	r3, #3
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1ce>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	6852      	ldr	r2, [r2, #4]
 8003eee:	201f      	movs	r0, #31
 8003ef0:	4002      	ands	r2, r0
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	000a      	movs	r2, r1
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d808      	bhi.n	8003f1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	f7ff fb9a 	bl	8003652 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	f7ff fbd4 	bl	80036d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db00      	blt.n	8003f3a <HAL_ADC_ConfigChannel+0x21e>
 8003f38:	e0bc      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f3a:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff fb4d 	bl	80035dc <LL_ADC_GetCommonPathInternalCh>
 8003f42:	0003      	movs	r3, r0
 8003f44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <HAL_ADC_ConfigChannel+0x364>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d122      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f58:	d11d      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	0412      	lsls	r2, r2, #16
 8003f60:	4313      	orrs	r3, r2
 8003f62:	4a46      	ldr	r2, [pc, #280]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8003f64:	0019      	movs	r1, r3
 8003f66:	0010      	movs	r0, r2
 8003f68:	f7ff fb24 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f6c:	4b45      	ldr	r3, [pc, #276]	; (8004084 <HAL_ADC_ConfigChannel+0x368>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4945      	ldr	r1, [pc, #276]	; (8004088 <HAL_ADC_ConfigChannel+0x36c>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fc f8d2 	bl	800011c <__udivsi3>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f86:	e002      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f9      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f94:	e08e      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3c      	ldr	r2, [pc, #240]	; (800408c <HAL_ADC_ConfigChannel+0x370>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10e      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x2a2>
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	045b      	lsls	r3, r3, #17
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d109      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	0452      	lsls	r2, r2, #17
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	4a32      	ldr	r2, [pc, #200]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	f7ff fafc 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
 8003fbc:	e07a      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a33      	ldr	r2, [pc, #204]	; (8004090 <HAL_ADC_ConfigChannel+0x374>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d000      	beq.n	8003fca <HAL_ADC_ConfigChannel+0x2ae>
 8003fc8:	e074      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	03db      	lsls	r3, r3, #15
 8003fd0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fd2:	d000      	beq.n	8003fd6 <HAL_ADC_ConfigChannel+0x2ba>
 8003fd4:	e06e      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	03d2      	lsls	r2, r2, #15
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	0010      	movs	r0, r2
 8003fe4:	f7ff fae6 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
 8003fe8:	e064      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d004      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ffa:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <HAL_ADC_ConfigChannel+0x35c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d107      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0019      	movs	r1, r3
 800400a:	0010      	movs	r0, r2
 800400c:	f7ff fb52 	bl	80036b4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da4d      	bge.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff fade 	bl	80035dc <LL_ADC_GetCommonPathInternalCh>
 8004020:	0003      	movs	r3, r0
 8004022:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_ADC_ConfigChannel+0x364>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_ADC_ConfigChannel+0x378>)
 8004032:	4013      	ands	r3, r2
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7ff fabb 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
 800403e:	e039      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <HAL_ADC_ConfigChannel+0x370>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d108      	bne.n	800405c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4a12      	ldr	r2, [pc, #72]	; (8004098 <HAL_ADC_ConfigChannel+0x37c>)
 800404e:	4013      	ands	r3, r2
 8004050:	4a0a      	ldr	r2, [pc, #40]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f7ff faad 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
 800405a:	e02b      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_ADC_ConfigChannel+0x374>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d126      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_ADC_ConfigChannel+0x380>)
 800406a:	4013      	ands	r3, r2
 800406c:	4a03      	ldr	r2, [pc, #12]	; (800407c <HAL_ADC_ConfigChannel+0x360>)
 800406e:	0019      	movs	r1, r3
 8004070:	0010      	movs	r0, r2
 8004072:	f7ff fa9f 	bl	80035b4 <LL_ADC_SetCommonPathInternalCh>
 8004076:	e01d      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x398>
 8004078:	80000004 	.word	0x80000004
 800407c:	40012708 	.word	0x40012708
 8004080:	b0001000 	.word	0xb0001000
 8004084:	20000088 	.word	0x20000088
 8004088:	00030d40 	.word	0x00030d40
 800408c:	b8004000 	.word	0xb8004000
 8004090:	b4002000 	.word	0xb4002000
 8004094:	ff7fffff 	.word	0xff7fffff
 8004098:	feffffff 	.word	0xfeffffff
 800409c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	2220      	movs	r2, #32
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040ac:	2317      	movs	r3, #23
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2254      	movs	r2, #84	; 0x54
 80040b8:	2100      	movs	r1, #0
 80040ba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80040bc:	2317      	movs	r3, #23
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b006      	add	sp, #24
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)

080040cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff fb63 	bl	80037a8 <LL_ADC_IsEnabled>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d000      	beq.n	80040e8 <ADC_Enable+0x1c>
 80040e6:	e069      	b.n	80041bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a36      	ldr	r2, [pc, #216]	; (80041c8 <ADC_Enable+0xfc>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00d      	beq.n	8004110 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	2210      	movs	r2, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	2201      	movs	r2, #1
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e056      	b.n	80041be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fb23 	bl	8003760 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <ADC_Enable+0x100>)
 800411c:	0018      	movs	r0, r3
 800411e:	f7ff fa5d 	bl	80035dc <LL_ADC_GetCommonPathInternalCh>
 8004122:	0002      	movs	r2, r0
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	4013      	ands	r3, r2
 800412a:	d00f      	beq.n	800414c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <ADC_Enable+0x104>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4928      	ldr	r1, [pc, #160]	; (80041d4 <ADC_Enable+0x108>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fb fff2 	bl	800011c <__udivsi3>
 8004138:	0003      	movs	r3, r0
 800413a:	3301      	adds	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800413e:	e002      	b.n	8004146 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3b01      	subs	r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f9      	bne.n	8004140 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7e5b      	ldrb	r3, [r3, #25]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d033      	beq.n	80041bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004154:	f7ff f9ce 	bl	80034f4 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800415c:	e027      	b.n	80041ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fb20 	bl	80037a8 <LL_ADC_IsEnabled>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d104      	bne.n	8004176 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff faf5 	bl	8003760 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004176:	f7ff f9bd 	bl	80034f4 <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d914      	bls.n	80041ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	4013      	ands	r3, r2
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00d      	beq.n	80041ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	2210      	movs	r2, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a2:	2201      	movs	r2, #1
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e007      	b.n	80041be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d1d0      	bne.n	800415e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	80000017 	.word	0x80000017
 80041cc:	40012708 	.word	0x40012708
 80041d0:	20000088 	.word	0x20000088
 80041d4:	00030d40 	.word	0x00030d40

080041d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	2250      	movs	r2, #80	; 0x50
 80041ec:	4013      	ands	r3, r2
 80041ee:	d141      	bne.n	8004274 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fa14 	bl	8003630 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d02e      	beq.n	800426a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	7e9b      	ldrb	r3, [r3, #26]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d12a      	bne.n	800426a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2208      	movs	r2, #8
 800421c:	4013      	ands	r3, r2
 800421e:	2b08      	cmp	r3, #8
 8004220:	d123      	bne.n	800426a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff fae2 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d110      	bne.n	8004252 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	210c      	movs	r1, #12
 800423c:	438a      	bics	r2, r1
 800423e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <ADC_DMAConvCplt+0xc4>)
 8004246:	4013      	ands	r3, r2
 8004248:	2201      	movs	r2, #1
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58
 8004250:	e00b      	b.n	800426a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	2220      	movs	r2, #32
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2201      	movs	r2, #1
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff fd3d 	bl	8003cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004272:	e00f      	b.n	8004294 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	2210      	movs	r2, #16
 800427a:	4013      	ands	r3, r2
 800427c:	d004      	beq.n	8004288 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff fd43 	bl	8003d0c <HAL_ADC_ErrorCallback>
}
 8004286:	e005      	b.n	8004294 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	0010      	movs	r0, r2
 8004292:	4798      	blx	r3
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b004      	add	sp, #16
 800429a:	bd80      	pop	{r7, pc}
 800429c:	fffffefe 	.word	0xfffffefe

080042a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fd23 	bl	8003cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b004      	add	sp, #16
 80042bc:	bd80      	pop	{r7, pc}

080042be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	2240      	movs	r2, #64	; 0x40
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2204      	movs	r2, #4
 80042de:	431a      	orrs	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff fd10 	bl	8003d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b004      	add	sp, #16
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	0002      	movs	r2, r0
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b7f      	cmp	r3, #127	; 0x7f
 8004306:	d809      	bhi.n	800431c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	001a      	movs	r2, r3
 800430e:	231f      	movs	r3, #31
 8004310:	401a      	ands	r2, r3
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <__NVIC_EnableIRQ+0x30>)
 8004314:	2101      	movs	r1, #1
 8004316:	4091      	lsls	r1, r2
 8004318:	000a      	movs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e000e100 	.word	0xe000e100

08004328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	0002      	movs	r2, r0
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	1dfb      	adds	r3, r7, #7
 8004334:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b7f      	cmp	r3, #127	; 0x7f
 800433c:	d828      	bhi.n	8004390 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <__NVIC_SetPriority+0xd4>)
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b25b      	sxtb	r3, r3
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	33c0      	adds	r3, #192	; 0xc0
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	589b      	ldr	r3, [r3, r2]
 800434e:	1dfa      	adds	r2, r7, #7
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	0011      	movs	r1, r2
 8004354:	2203      	movs	r2, #3
 8004356:	400a      	ands	r2, r1
 8004358:	00d2      	lsls	r2, r2, #3
 800435a:	21ff      	movs	r1, #255	; 0xff
 800435c:	4091      	lsls	r1, r2
 800435e:	000a      	movs	r2, r1
 8004360:	43d2      	mvns	r2, r2
 8004362:	401a      	ands	r2, r3
 8004364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	22ff      	movs	r2, #255	; 0xff
 800436c:	401a      	ands	r2, r3
 800436e:	1dfb      	adds	r3, r7, #7
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	0018      	movs	r0, r3
 8004374:	2303      	movs	r3, #3
 8004376:	4003      	ands	r3, r0
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800437c:	481f      	ldr	r0, [pc, #124]	; (80043fc <__NVIC_SetPriority+0xd4>)
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	430a      	orrs	r2, r1
 8004388:	33c0      	adds	r3, #192	; 0xc0
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800438e:	e031      	b.n	80043f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <__NVIC_SetPriority+0xd8>)
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	0019      	movs	r1, r3
 8004398:	230f      	movs	r3, #15
 800439a:	400b      	ands	r3, r1
 800439c:	3b08      	subs	r3, #8
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	3306      	adds	r3, #6
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	3304      	adds	r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1dfa      	adds	r2, r7, #7
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	0011      	movs	r1, r2
 80043b0:	2203      	movs	r2, #3
 80043b2:	400a      	ands	r2, r1
 80043b4:	00d2      	lsls	r2, r2, #3
 80043b6:	21ff      	movs	r1, #255	; 0xff
 80043b8:	4091      	lsls	r1, r2
 80043ba:	000a      	movs	r2, r1
 80043bc:	43d2      	mvns	r2, r2
 80043be:	401a      	ands	r2, r3
 80043c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	019b      	lsls	r3, r3, #6
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	401a      	ands	r2, r3
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	0018      	movs	r0, r3
 80043d0:	2303      	movs	r3, #3
 80043d2:	4003      	ands	r3, r0
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <__NVIC_SetPriority+0xd8>)
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	001c      	movs	r4, r3
 80043e0:	230f      	movs	r3, #15
 80043e2:	4023      	ands	r3, r4
 80043e4:	3b08      	subs	r3, #8
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	430a      	orrs	r2, r1
 80043ea:	3306      	adds	r3, #6
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	18c3      	adds	r3, r0, r3
 80043f0:	3304      	adds	r3, #4
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b003      	add	sp, #12
 80043fa:	bd90      	pop	{r4, r7, pc}
 80043fc:	e000e100 	.word	0xe000e100
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1e5a      	subs	r2, r3, #1
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	045b      	lsls	r3, r3, #17
 8004414:	429a      	cmp	r2, r3
 8004416:	d301      	bcc.n	800441c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004418:	2301      	movs	r3, #1
 800441a:	e010      	b.n	800443e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <SysTick_Config+0x44>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	3a01      	subs	r2, #1
 8004422:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004424:	2301      	movs	r3, #1
 8004426:	425b      	negs	r3, r3
 8004428:	2103      	movs	r1, #3
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff ff7c 	bl	8004328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Config+0x44>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <SysTick_Config+0x44>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800443c:	2300      	movs	r3, #0
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	210f      	movs	r1, #15
 8004458:	187b      	adds	r3, r7, r1
 800445a:	1c02      	adds	r2, r0, #0
 800445c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	187b      	adds	r3, r7, r1
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b25b      	sxtb	r3, r3
 8004466:	0011      	movs	r1, r2
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff ff5d 	bl	8004328 <__NVIC_SetPriority>
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b004      	add	sp, #16
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	0002      	movs	r2, r0
 800447e:	1dfb      	adds	r3, r7, #7
 8004480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004482:	1dfb      	adds	r3, r7, #7
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b25b      	sxtb	r3, r3
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ff33 	bl	80042f4 <__NVIC_EnableIRQ>
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7ff ffaf 	bl	8004404 <SysTick_Config>
 80044a6:	0003      	movs	r3, r0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e077      	b.n	80045b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3d      	ldr	r2, [pc, #244]	; (80045bc <HAL_DMA_Init+0x10c>)
 80044c8:	4694      	mov	ip, r2
 80044ca:	4463      	add	r3, ip
 80044cc:	2114      	movs	r1, #20
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7fb fe24 	bl	800011c <__udivsi3>
 80044d4:	0003      	movs	r3, r0
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2225      	movs	r2, #37	; 0x25
 80044e0:	2102      	movs	r1, #2
 80044e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4934      	ldr	r1, [pc, #208]	; (80045c0 <HAL_DMA_Init+0x110>)
 80044f0:	400a      	ands	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f9c1 	bl	80048b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	429a      	cmp	r2, r3
 800453c:	d102      	bne.n	8004544 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	213f      	movs	r1, #63	; 0x3f
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800455a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d011      	beq.n	8004588 <HAL_DMA_Init+0xd8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d80d      	bhi.n	8004588 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f9cc 	bl	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	e008      	b.n	800459a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2225      	movs	r2, #37	; 0x25
 80045a4:	2101      	movs	r1, #1
 80045a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	bffdfff8 	.word	0xbffdfff8
 80045c0:	ffff800f 	.word	0xffff800f

080045c4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2317      	movs	r3, #23
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2224      	movs	r2, #36	; 0x24
 80045de:	5c9b      	ldrb	r3, [r3, r2]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Start_IT+0x24>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e06f      	b.n	80046c8 <HAL_DMA_Start_IT+0x104>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2225      	movs	r2, #37	; 0x25
 80045f4:	5c9b      	ldrb	r3, [r3, r2]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d157      	bne.n	80046ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2225      	movs	r2, #37	; 0x25
 8004600:	2102      	movs	r1, #2
 8004602:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	438a      	bics	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f907 	bl	8004834 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	210e      	movs	r1, #14
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e00f      	b.n	8004660 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2104      	movs	r1, #4
 800464c:	438a      	bics	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	210a      	movs	r1, #10
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	025b      	lsls	r3, r3, #9
 800466a:	4013      	ands	r3, r2
 800466c:	d008      	beq.n	8004680 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	0049      	lsls	r1, r1, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0049      	lsls	r1, r1, #1
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e00a      	b.n	80046c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	2100      	movs	r1, #0
 80046b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80046ba:	2317      	movs	r3, #23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80046c2:	2317      	movs	r3, #23
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80046d8:	4b55      	ldr	r3, [pc, #340]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	221c      	movs	r2, #28
 80046ec:	4013      	ands	r3, r2
 80046ee:	2204      	movs	r2, #4
 80046f0:	409a      	lsls	r2, r3
 80046f2:	0013      	movs	r3, r2
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4013      	ands	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_IRQHandler+0x7a>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	d023      	beq.n	800474a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2220      	movs	r2, #32
 800470a:	4013      	ands	r3, r2
 800470c:	d107      	bne.n	800471e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2104      	movs	r1, #4
 800471a:	438a      	bics	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	221c      	movs	r2, #28
 8004728:	4013      	ands	r3, r2
 800472a:	2204      	movs	r2, #4
 800472c:	409a      	lsls	r2, r3
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	2b00      	cmp	r3, #0
 800473a:	d100      	bne.n	800473e <HAL_DMA_IRQHandler+0x6e>
 800473c:	e073      	b.n	8004826 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	0010      	movs	r0, r2
 8004746:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004748:	e06d      	b.n	8004826 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	221c      	movs	r2, #28
 8004750:	4013      	ands	r3, r2
 8004752:	2202      	movs	r2, #2
 8004754:	409a      	lsls	r2, r3
 8004756:	0013      	movs	r3, r2
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4013      	ands	r3, r2
 800475c:	d02e      	beq.n	80047bc <HAL_DMA_IRQHandler+0xec>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2202      	movs	r2, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d02a      	beq.n	80047bc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2220      	movs	r2, #32
 800476e:	4013      	ands	r3, r2
 8004770:	d10b      	bne.n	800478a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	210a      	movs	r1, #10
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2225      	movs	r2, #37	; 0x25
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800478a:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	221c      	movs	r2, #28
 8004794:	4013      	ands	r3, r2
 8004796:	2202      	movs	r2, #2
 8004798:	409a      	lsls	r2, r3
 800479a:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d03a      	beq.n	8004826 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	0010      	movs	r0, r2
 80047b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047ba:	e034      	b.n	8004826 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	221c      	movs	r2, #28
 80047c2:	4013      	ands	r3, r2
 80047c4:	2208      	movs	r2, #8
 80047c6:	409a      	lsls	r2, r3
 80047c8:	0013      	movs	r3, r2
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	d02b      	beq.n	8004828 <HAL_DMA_IRQHandler+0x158>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2208      	movs	r2, #8
 80047d4:	4013      	ands	r3, r2
 80047d6:	d027      	beq.n	8004828 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	210e      	movs	r1, #14
 80047e4:	438a      	bics	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	221c      	movs	r2, #28
 80047f2:	4013      	ands	r3, r2
 80047f4:	2201      	movs	r2, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_DMA_IRQHandler+0x160>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2225      	movs	r2, #37	; 0x25
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2224      	movs	r2, #36	; 0x24
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	0010      	movs	r0, r2
 8004824:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46c0      	nop			; (mov r8, r8)
}
 800482a:	46bd      	mov	sp, r7
 800482c:	b004      	add	sp, #16
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40020000 	.word	0x40020000

08004834 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800484a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800485c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <DMA_SetConfig+0x7c>)
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	221c      	movs	r2, #28
 8004868:	4013      	ands	r3, r2
 800486a:	2201      	movs	r2, #1
 800486c:	409a      	lsls	r2, r3
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <DMA_SetConfig+0x7c>)
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d108      	bne.n	8004896 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004894:	e007      	b.n	80048a6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	60da      	str	r2, [r3, #12]
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	40020000 	.word	0x40020000

080048b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80048c4:	4694      	mov	ip, r2
 80048c6:	4463      	add	r3, ip
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	001a      	movs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	001a      	movs	r2, r3
 80048d6:	23ff      	movs	r3, #255	; 0xff
 80048d8:	4013      	ands	r3, r2
 80048da:	3b08      	subs	r3, #8
 80048dc:	2114      	movs	r1, #20
 80048de:	0018      	movs	r0, r3
 80048e0:	f7fb fc1c 	bl	800011c <__udivsi3>
 80048e4:	0003      	movs	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80048ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	221f      	movs	r2, #31
 80048f2:	4013      	ands	r3, r2
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b004      	add	sp, #16
 8004902:	bd80      	pop	{r7, pc}
 8004904:	10008200 	.word	0x10008200
 8004908:	40020880 	.word	0x40020880

0800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	223f      	movs	r2, #63	; 0x3f
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004922:	4694      	mov	ip, r2
 8004924:	4463      	add	r3, ip
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	001a      	movs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a07      	ldr	r2, [pc, #28]	; (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004932:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	2203      	movs	r2, #3
 800493a:	4013      	ands	r3, r2
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}
 800494c:	1000823f 	.word	0x1000823f
 8004950:	40020940 	.word	0x40020940

08004954 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004954:	b5b0      	push	{r4, r5, r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603a      	str	r2, [r7, #0]
 8004960:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_FLASH_Program+0x94>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_FLASH_Program+0x1a>
 800496a:	2302      	movs	r3, #2
 800496c:	e038      	b.n	80049e0 <HAL_FLASH_Program+0x8c>
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <HAL_FLASH_Program+0x94>)
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_FLASH_Program+0x94>)
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800497a:	2517      	movs	r5, #23
 800497c:	197c      	adds	r4, r7, r5
 800497e:	23fa      	movs	r3, #250	; 0xfa
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f874 	bl	8004a70 <FLASH_WaitForLastOperation>
 8004988:	0003      	movs	r3, r0
 800498a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800498c:	197b      	adds	r3, r7, r5
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11f      	bne.n	80049d4 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d106      	bne.n	80049a8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	0008      	movs	r0, r1
 80049a2:	f000 f8b3 	bl	8004b0c <FLASH_Program_DoubleWord>
 80049a6:	e005      	b.n	80049b4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f011 fa3a 	bl	8015e28 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049b4:	2317      	movs	r3, #23
 80049b6:	18fc      	adds	r4, r7, r3
 80049b8:	23fa      	movs	r3, #250	; 0xfa
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 f857 	bl	8004a70 <FLASH_WaitForLastOperation>
 80049c2:	0003      	movs	r3, r0
 80049c4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_FLASH_Program+0x98>)
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	43d9      	mvns	r1, r3
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_FLASH_Program+0x98>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_FLASH_Program+0x94>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80049da:	2317      	movs	r3, #23
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	781b      	ldrb	r3, [r3, #0]
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b006      	add	sp, #24
 80049e6:	bdb0      	pop	{r4, r5, r7, pc}
 80049e8:	20000198 	.word	0x20000198
 80049ec:	40022000 	.word	0x40022000

080049f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_FLASH_Unlock+0x3c>)
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0c      	bge.n	8004a1e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_FLASH_Unlock+0x3c>)
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <HAL_FLASH_Unlock+0x40>)
 8004a08:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_FLASH_Unlock+0x3c>)
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <HAL_FLASH_Unlock+0x44>)
 8004a0e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_FLASH_Unlock+0x3c>)
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da02      	bge.n	8004a1e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8004a18:	1dfb      	adds	r3, r7, #7
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	45670123 	.word	0x45670123
 8004a34:	cdef89ab 	.word	0xcdef89ab

08004a38 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_FLASH_Lock+0x34>)
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_FLASH_Lock+0x34>)
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0609      	lsls	r1, r1, #24
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_FLASH_Lock+0x34>)
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da02      	bge.n	8004a60 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40022000 	.word	0x40022000

08004a70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8004a78:	f7fe fd3c 	bl	80034f4 <HAL_GetTick>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	025b      	lsls	r3, r3, #9
 8004a88:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8004a8a:	e007      	b.n	8004a9c <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8004a8c:	f7fe fd32 	bl	80034f4 <HAL_GetTick>
 8004a90:	0002      	movs	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d801      	bhi.n	8004a9c <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e02a      	b.n	8004af2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <FLASH_WaitForLastOperation+0x8c>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d1f2      	bne.n	8004a8c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <FLASH_WaitForLastOperation+0x8c>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <FLASH_WaitForLastOperation+0x90>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <FLASH_WaitForLastOperation+0x8c>)
 8004ab2:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <FLASH_WaitForLastOperation+0x94>)
 8004ab4:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <FLASH_WaitForLastOperation+0x98>)
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e015      	b.n	8004af2 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8004ac6:	f7fe fd15 	bl	80034f4 <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004ad2:	e007      	b.n	8004ae4 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8004ad4:	f7fe fd0e 	bl	80034f4 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d801      	bhi.n	8004ae4 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <FLASH_WaitForLastOperation+0x8c>)
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	02db      	lsls	r3, r3, #11
 8004aec:	4013      	ands	r3, r2
 8004aee:	d1f1      	bne.n	8004ad4 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	40022000 	.word	0x40022000
 8004b00:	0000c3fa 	.word	0x0000c3fa
 8004b04:	0000c3fb 	.word	0x0000c3fb
 8004b08:	20000198 	.word	0x20000198

08004b0c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	603a      	str	r2, [r7, #0]
 8004b16:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <FLASH_Program_DoubleWord+0x3c>)
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <FLASH_Program_DoubleWord+0x3c>)
 8004b1e:	2101      	movs	r1, #1
 8004b20:	430a      	orrs	r2, r1
 8004b22:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004b2a:	f3bf 8f6f 	isb	sy
}
 8004b2e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	001c      	movs	r4, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	001d      	movs	r5, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	0022      	movs	r2, r4
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b004      	add	sp, #16
 8004b46:	bdb0      	pop	{r4, r5, r7, pc}
 8004b48:	40022000 	.word	0x40022000

08004b4c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004b4c:	b5b0      	push	{r4, r5, r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b56:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <HAL_FLASHEx_Erase+0xe0>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_FLASHEx_Erase+0x16>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e05f      	b.n	8004c22 <HAL_FLASHEx_Erase+0xd6>
 8004b62:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <HAL_FLASHEx_Erase+0xe0>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b68:	4b30      	ldr	r3, [pc, #192]	; (8004c2c <HAL_FLASHEx_Erase+0xe0>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b6e:	250f      	movs	r5, #15
 8004b70:	197c      	adds	r4, r7, r5
 8004b72:	23fa      	movs	r3, #250	; 0xfa
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff ff7a 	bl	8004a70 <FLASH_WaitForLastOperation>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004b80:	002c      	movs	r4, r5
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d145      	bne.n	8004c16 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d10d      	bne.n	8004bb4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 f849 	bl	8004c34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ba2:	193c      	adds	r4, r7, r4
 8004ba4:	23fa      	movs	r3, #250	; 0xfa
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff ff61 	bl	8004a70 <FLASH_WaitForLastOperation>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	7023      	strb	r3, [r4, #0]
 8004bb2:	e030      	b.n	8004c16 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4252      	negs	r2, r2
 8004bba:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	e01a      	b.n	8004bfa <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	0011      	movs	r1, r2
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f845 	bl	8004c5c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bd2:	250f      	movs	r5, #15
 8004bd4:	197c      	adds	r4, r7, r5
 8004bd6:	23fa      	movs	r3, #250	; 0xfa
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff ff48 	bl	8004a70 <FLASH_WaitForLastOperation>
 8004be0:	0003      	movs	r3, r0
 8004be2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8004be4:	197b      	adds	r3, r7, r5
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	601a      	str	r2, [r3, #0]
          break;
 8004bf2:	e00a      	b.n	8004c0a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	18d3      	adds	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d3dc      	bcc.n	8004bc4 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_FLASHEx_Erase+0xe4>)
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_FLASHEx_Erase+0xe4>)
 8004c10:	2102      	movs	r1, #2
 8004c12:	438a      	bics	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_FLASHEx_Erase+0xe0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c1c:	230f      	movs	r3, #15
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	781b      	ldrb	r3, [r3, #0]
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b004      	add	sp, #16
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	20000198 	.word	0x20000198
 8004c30:	40022000 	.word	0x40022000

08004c34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <FLASH_MassErase+0x24>)
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <FLASH_MassErase+0x24>)
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	0249      	lsls	r1, r1, #9
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b002      	add	sp, #8
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	40022000 	.word	0x40022000

08004c5c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <FLASH_PageErase+0x2c>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <FLASH_PageErase+0x30>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	00da      	lsls	r2, r3, #3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <FLASH_PageErase+0x2c>)
 8004c7a:	4905      	ldr	r1, [pc, #20]	; (8004c90 <FLASH_PageErase+0x34>)
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	615a      	str	r2, [r3, #20]
}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40022000 	.word	0x40022000
 8004c8c:	fffffe07 	.word	0xfffffe07
 8004c90:	00010002 	.word	0x00010002

08004c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca2:	e147      	b.n	8004f34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4091      	lsls	r1, r2
 8004cae:	000a      	movs	r2, r1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d100      	bne.n	8004cbc <HAL_GPIO_Init+0x28>
 8004cba:	e138      	b.n	8004f2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d005      	beq.n	8004cd4 <HAL_GPIO_Init+0x40>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2203      	movs	r2, #3
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d130      	bne.n	8004d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	0013      	movs	r3, r2
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	0013      	movs	r3, r2
 8004d12:	43da      	mvns	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	2201      	movs	r2, #1
 8004d22:	401a      	ands	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	409a      	lsls	r2, r3
 8004d28:	0013      	movs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d017      	beq.n	8004d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	0013      	movs	r3, r2
 8004d52:	43da      	mvns	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	0013      	movs	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2203      	movs	r2, #3
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d123      	bne.n	8004dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	08da      	lsrs	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3208      	adds	r2, #8
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	58d3      	ldr	r3, [r2, r3]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	220f      	movs	r2, #15
 8004d96:	409a      	lsls	r2, r3
 8004d98:	0013      	movs	r3, r2
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2107      	movs	r1, #7
 8004daa:	400b      	ands	r3, r1
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	409a      	lsls	r2, r3
 8004db0:	0013      	movs	r3, r2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	08da      	lsrs	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3208      	adds	r2, #8
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	6939      	ldr	r1, [r7, #16]
 8004dc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	0013      	movs	r3, r2
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2203      	movs	r2, #3
 8004de4:	401a      	ands	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	0013      	movs	r3, r2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	23c0      	movs	r3, #192	; 0xc0
 8004e00:	029b      	lsls	r3, r3, #10
 8004e02:	4013      	ands	r3, r2
 8004e04:	d100      	bne.n	8004e08 <HAL_GPIO_Init+0x174>
 8004e06:	e092      	b.n	8004f2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004e08:	4a50      	ldr	r2, [pc, #320]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	3318      	adds	r3, #24
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	589b      	ldr	r3, [r3, r2]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	220f      	movs	r2, #15
 8004e20:	409a      	lsls	r2, r3
 8004e22:	0013      	movs	r3, r2
 8004e24:	43da      	mvns	r2, r3
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	23a0      	movs	r3, #160	; 0xa0
 8004e30:	05db      	lsls	r3, r3, #23
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0x1ca>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a45      	ldr	r2, [pc, #276]	; (8004f50 <HAL_GPIO_Init+0x2bc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_Init+0x1c6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a44      	ldr	r2, [pc, #272]	; (8004f54 <HAL_GPIO_Init+0x2c0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_Init+0x1c2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a43      	ldr	r2, [pc, #268]	; (8004f58 <HAL_GPIO_Init+0x2c4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_Init+0x1be>
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e006      	b.n	8004e60 <HAL_GPIO_Init+0x1cc>
 8004e52:	2305      	movs	r3, #5
 8004e54:	e004      	b.n	8004e60 <HAL_GPIO_Init+0x1cc>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e002      	b.n	8004e60 <HAL_GPIO_Init+0x1cc>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_GPIO_Init+0x1cc>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	2103      	movs	r1, #3
 8004e64:	400a      	ands	r2, r1
 8004e66:	00d2      	lsls	r2, r2, #3
 8004e68:	4093      	lsls	r3, r2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004e70:	4936      	ldr	r1, [pc, #216]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	089b      	lsrs	r3, r3, #2
 8004e76:	3318      	adds	r3, #24
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e7e:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	58d3      	ldr	r3, [r2, r3]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	025b      	lsls	r3, r3, #9
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ea4:	4929      	ldr	r1, [pc, #164]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004eae:	2384      	movs	r3, #132	; 0x84
 8004eb0:	58d3      	ldr	r3, [r2, r3]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed2:	491e      	ldr	r1, [pc, #120]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004ed4:	2284      	movs	r2, #132	; 0x84
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eda:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	035b      	lsls	r3, r3, #13
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	039b      	lsls	r3, r3, #14
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_GPIO_Init+0x2b8>)
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	40da      	lsrs	r2, r3
 8004f3c:	1e13      	subs	r3, r2, #0
 8004f3e:	d000      	beq.n	8004f42 <HAL_GPIO_Init+0x2ae>
 8004f40:	e6b0      	b.n	8004ca4 <HAL_GPIO_Init+0x10>
  }
}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b006      	add	sp, #24
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021800 	.word	0x40021800
 8004f50:	50000400 	.word	0x50000400
 8004f54:	50000800 	.word	0x50000800
 8004f58:	50000c00 	.word	0x50000c00

08004f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	000a      	movs	r2, r1
 8004f66:	1cbb      	adds	r3, r7, #2
 8004f68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	1cba      	adds	r2, r7, #2
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	4013      	ands	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004f76:	230f      	movs	r3, #15
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e003      	b.n	8004f88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f80:	230f      	movs	r3, #15
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004f88:	230f      	movs	r3, #15
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	0008      	movs	r0, r1
 8004fa0:	0011      	movs	r1, r2
 8004fa2:	1cbb      	adds	r3, r7, #2
 8004fa4:	1c02      	adds	r2, r0, #0
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	1c7b      	adds	r3, r7, #1
 8004faa:	1c0a      	adds	r2, r1, #0
 8004fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fae:	1c7b      	adds	r3, r7, #1
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fb6:	1cbb      	adds	r3, r7, #2
 8004fb8:	881a      	ldrh	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fbe:	e003      	b.n	8004fc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fc0:	1cbb      	adds	r3, r7, #2
 8004fc2:	881a      	ldrh	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	0002      	movs	r2, r0
 8004fd8:	1dbb      	adds	r3, r7, #6
 8004fda:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	1dba      	adds	r2, r7, #6
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d008      	beq.n	8004ffa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004fea:	1dba      	adds	r2, r7, #6
 8004fec:	8812      	ldrh	r2, [r2, #0]
 8004fee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004ff0:	1dbb      	adds	r3, r7, #6
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 f815 	bl	8005024 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	1dba      	adds	r2, r7, #6
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	4013      	ands	r3, r2
 8005004:	d008      	beq.n	8005018 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005008:	1dba      	adds	r2, r7, #6
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800500e:	1dbb      	adds	r3, r7, #6
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	f006 fd7e 	bl	800bb14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021800 	.word	0x40021800

08005024 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	0002      	movs	r2, r0
 800502c:	1dbb      	adds	r3, r7, #6
 800502e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	b002      	add	sp, #8
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e082      	b.n	8005150 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2241      	movs	r2, #65	; 0x41
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2240      	movs	r2, #64	; 0x40
 800505a:	2100      	movs	r1, #0
 800505c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f00d fd6f 	bl	8012b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2241      	movs	r2, #65	; 0x41
 800506a:	2124      	movs	r1, #36	; 0x24
 800506c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	438a      	bics	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4934      	ldr	r1, [pc, #208]	; (8005158 <HAL_I2C_Init+0x120>)
 8005088:	400a      	ands	r2, r1
 800508a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4931      	ldr	r1, [pc, #196]	; (800515c <HAL_I2C_Init+0x124>)
 8005098:	400a      	ands	r2, r1
 800509a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d108      	bne.n	80050b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	0209      	lsls	r1, r1, #8
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	e007      	b.n	80050c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2184      	movs	r1, #132	; 0x84
 80050c0:	0209      	lsls	r1, r1, #8
 80050c2:	430a      	orrs	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d104      	bne.n	80050d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	0112      	lsls	r2, r2, #4
 80050d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	491f      	ldr	r1, [pc, #124]	; (8005160 <HAL_I2C_Init+0x128>)
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	491a      	ldr	r1, [pc, #104]	; (800515c <HAL_I2C_Init+0x124>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	431a      	orrs	r2, r3
 8005102:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69d9      	ldr	r1, [r3, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2101      	movs	r1, #1
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2241      	movs	r2, #65	; 0x41
 800513c:	2120      	movs	r1, #32
 800513e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2242      	movs	r2, #66	; 0x42
 800514a:	2100      	movs	r1, #0
 800514c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}
 8005158:	f0ffffff 	.word	0xf0ffffff
 800515c:	ffff7fff 	.word	0xffff7fff
 8005160:	02008000 	.word	0x02008000

08005164 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	000c      	movs	r4, r1
 800516e:	0010      	movs	r0, r2
 8005170:	0019      	movs	r1, r3
 8005172:	230a      	movs	r3, #10
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1c22      	adds	r2, r4, #0
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	2308      	movs	r3, #8
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	1c02      	adds	r2, r0, #0
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	1c0a      	adds	r2, r1, #0
 8005186:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2241      	movs	r2, #65	; 0x41
 800518c:	5c9b      	ldrb	r3, [r3, r2]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b20      	cmp	r3, #32
 8005192:	d000      	beq.n	8005196 <HAL_I2C_Mem_Write+0x32>
 8005194:	e10c      	b.n	80053b0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x42>
 800519c:	232c      	movs	r3, #44	; 0x2c
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0ff      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2240      	movs	r2, #64	; 0x40
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x5c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0f8      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051c8:	f7fe f994 	bl	80034f4 <HAL_GetTick>
 80051cc:	0003      	movs	r3, r0
 80051ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	0219      	lsls	r1, r3, #8
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	2319      	movs	r3, #25
 80051dc:	2201      	movs	r2, #1
 80051de:	f000 fb0b 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	1e03      	subs	r3, r0, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0e3      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2241      	movs	r2, #65	; 0x41
 80051ee:	2121      	movs	r1, #33	; 0x21
 80051f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2242      	movs	r2, #66	; 0x42
 80051f6:	2140      	movs	r1, #64	; 0x40
 80051f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	222c      	movs	r2, #44	; 0x2c
 800520a:	18ba      	adds	r2, r7, r2
 800520c:	8812      	ldrh	r2, [r2, #0]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	881c      	ldrh	r4, [r3, #0]
 800521a:	2308      	movs	r3, #8
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	230a      	movs	r3, #10
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	8819      	ldrh	r1, [r3, #0]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	0023      	movs	r3, r4
 8005232:	f000 f9f9 	bl	8005628 <I2C_RequestMemoryWrite>
 8005236:	1e03      	subs	r3, r0, #0
 8005238:	d005      	beq.n	8005246 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2240      	movs	r2, #64	; 0x40
 800523e:	2100      	movs	r1, #0
 8005240:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0b5      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2bff      	cmp	r3, #255	; 0xff
 800524e:	d911      	bls.n	8005274 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	b2da      	uxtb	r2, r3
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	045c      	lsls	r4, r3, #17
 8005260:	230a      	movs	r3, #10
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	8819      	ldrh	r1, [r3, #0]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	0023      	movs	r3, r4
 800526e:	f000 fbf7 	bl	8005a60 <I2C_TransferConfig>
 8005272:	e012      	b.n	800529a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	b2da      	uxtb	r2, r3
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	049c      	lsls	r4, r3, #18
 8005288:	230a      	movs	r3, #10
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	8819      	ldrh	r1, [r3, #0]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	0023      	movs	r3, r4
 8005296:	f000 fbe3 	bl	8005a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 fae8 	bl	8005876 <I2C_WaitOnTXISFlagUntilTimeout>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e081      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03a      	beq.n	800535e <HAL_I2C_Mem_Write+0x1fa>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d136      	bne.n	800535e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	0013      	movs	r3, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	f000 fa7b 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e053      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2bff      	cmp	r3, #255	; 0xff
 8005312:	d911      	bls.n	8005338 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	045c      	lsls	r4, r3, #17
 8005324:	230a      	movs	r3, #10
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	8819      	ldrh	r1, [r3, #0]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	0023      	movs	r3, r4
 8005332:	f000 fb95 	bl	8005a60 <I2C_TransferConfig>
 8005336:	e012      	b.n	800535e <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	049c      	lsls	r4, r3, #18
 800534c:	230a      	movs	r3, #10
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	8819      	ldrh	r1, [r3, #0]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	0023      	movs	r3, r4
 800535a:	f000 fb81 	bl	8005a60 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d198      	bne.n	800529a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fac0 	bl	80058f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005374:	1e03      	subs	r3, r0, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e01a      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2220      	movs	r2, #32
 8005382:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	490b      	ldr	r1, [pc, #44]	; (80053bc <HAL_I2C_Mem_Write+0x258>)
 8005390:	400a      	ands	r2, r1
 8005392:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2241      	movs	r2, #65	; 0x41
 8005398:	2120      	movs	r1, #32
 800539a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2242      	movs	r2, #66	; 0x42
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2240      	movs	r2, #64	; 0x40
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b007      	add	sp, #28
 80053b8:	bd90      	pop	{r4, r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	fe00e800 	.word	0xfe00e800

080053c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b089      	sub	sp, #36	; 0x24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	000c      	movs	r4, r1
 80053ca:	0010      	movs	r0, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	230a      	movs	r3, #10
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	1c22      	adds	r2, r4, #0
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	2308      	movs	r3, #8
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	1c02      	adds	r2, r0, #0
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	1dbb      	adds	r3, r7, #6
 80053e0:	1c0a      	adds	r2, r1, #0
 80053e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2241      	movs	r2, #65	; 0x41
 80053e8:	5c9b      	ldrb	r3, [r3, r2]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d000      	beq.n	80053f2 <HAL_I2C_Mem_Read+0x32>
 80053f0:	e110      	b.n	8005614 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <HAL_I2C_Mem_Read+0x42>
 80053f8:	232c      	movs	r3, #44	; 0x2c
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	0092      	lsls	r2, r2, #2
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e103      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2240      	movs	r2, #64	; 0x40
 8005412:	5c9b      	ldrb	r3, [r3, r2]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2C_Mem_Read+0x5c>
 8005418:	2302      	movs	r3, #2
 800541a:	e0fc      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	; 0x40
 8005420:	2101      	movs	r1, #1
 8005422:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005424:	f7fe f866 	bl	80034f4 <HAL_GetTick>
 8005428:	0003      	movs	r3, r0
 800542a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	0219      	lsls	r1, r3, #8
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2319      	movs	r3, #25
 8005438:	2201      	movs	r2, #1
 800543a:	f000 f9dd 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e7      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2241      	movs	r2, #65	; 0x41
 800544a:	2122      	movs	r1, #34	; 0x22
 800544c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2242      	movs	r2, #66	; 0x42
 8005452:	2140      	movs	r1, #64	; 0x40
 8005454:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	222c      	movs	r2, #44	; 0x2c
 8005466:	18ba      	adds	r2, r7, r2
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005472:	1dbb      	adds	r3, r7, #6
 8005474:	881c      	ldrh	r4, [r3, #0]
 8005476:	2308      	movs	r3, #8
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	230a      	movs	r3, #10
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	8819      	ldrh	r1, [r3, #0]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	0023      	movs	r3, r4
 800548e:	f000 f92f 	bl	80056f0 <I2C_RequestMemoryRead>
 8005492:	1e03      	subs	r3, r0, #0
 8005494:	d005      	beq.n	80054a2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2240      	movs	r2, #64	; 0x40
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0b9      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2bff      	cmp	r3, #255	; 0xff
 80054aa:	d911      	bls.n	80054d0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	045c      	lsls	r4, r3, #17
 80054bc:	230a      	movs	r3, #10
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	8819      	ldrh	r1, [r3, #0]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	4b56      	ldr	r3, [pc, #344]	; (8005620 <HAL_I2C_Mem_Read+0x260>)
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	0023      	movs	r3, r4
 80054ca:	f000 fac9 	bl	8005a60 <I2C_TransferConfig>
 80054ce:	e012      	b.n	80054f6 <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	049c      	lsls	r4, r3, #18
 80054e4:	230a      	movs	r3, #10
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	8819      	ldrh	r1, [r3, #0]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <HAL_I2C_Mem_Read+0x260>)
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 fab5 	bl	8005a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	0013      	movs	r3, r2
 8005500:	2200      	movs	r2, #0
 8005502:	2104      	movs	r1, #4
 8005504:	f000 f978 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005508:	1e03      	subs	r3, r0, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e082      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d03a      	beq.n	80055c2 <HAL_I2C_Mem_Read+0x202>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d136      	bne.n	80055c2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	0013      	movs	r3, r2
 800555e:	2200      	movs	r2, #0
 8005560:	2180      	movs	r1, #128	; 0x80
 8005562:	f000 f949 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005566:	1e03      	subs	r3, r0, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e053      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2bff      	cmp	r3, #255	; 0xff
 8005576:	d911      	bls.n	800559c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	b2da      	uxtb	r2, r3
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	045c      	lsls	r4, r3, #17
 8005588:	230a      	movs	r3, #10
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	8819      	ldrh	r1, [r3, #0]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	0023      	movs	r3, r4
 8005596:	f000 fa63 	bl	8005a60 <I2C_TransferConfig>
 800559a:	e012      	b.n	80055c2 <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	049c      	lsls	r4, r3, #18
 80055b0:	230a      	movs	r3, #10
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	8819      	ldrh	r1, [r3, #0]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	2300      	movs	r3, #0
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	0023      	movs	r3, r4
 80055be:	f000 fa4f 	bl	8005a60 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d194      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 f98e 	bl	80058f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d001      	beq.n	80055e0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e01a      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	490c      	ldr	r1, [pc, #48]	; (8005624 <HAL_I2C_Mem_Read+0x264>)
 80055f4:	400a      	ands	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2241      	movs	r2, #65	; 0x41
 80055fc:	2120      	movs	r1, #32
 80055fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2242      	movs	r2, #66	; 0x42
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	2100      	movs	r1, #0
 800560e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b007      	add	sp, #28
 800561c:	bd90      	pop	{r4, r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	80002400 	.word	0x80002400
 8005624:	fe00e800 	.word	0xfe00e800

08005628 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8005628:	b5b0      	push	{r4, r5, r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	000c      	movs	r4, r1
 8005632:	0010      	movs	r0, r2
 8005634:	0019      	movs	r1, r3
 8005636:	250a      	movs	r5, #10
 8005638:	197b      	adds	r3, r7, r5
 800563a:	1c22      	adds	r2, r4, #0
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	2308      	movs	r3, #8
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	1c02      	adds	r2, r0, #0
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	1dbb      	adds	r3, r7, #6
 8005648:	1c0a      	adds	r2, r1, #0
 800564a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800564c:	1dbb      	adds	r3, r7, #6
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	045c      	lsls	r4, r3, #17
 8005656:	197b      	adds	r3, r7, r5
 8005658:	8819      	ldrh	r1, [r3, #0]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	4b23      	ldr	r3, [pc, #140]	; (80056ec <I2C_RequestMemoryWrite+0xc4>)
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	0023      	movs	r3, r4
 8005662:	f000 f9fd 	bl	8005a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	6a39      	ldr	r1, [r7, #32]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f902 	bl	8005876 <I2C_WaitOnTXISFlagUntilTimeout>
 8005672:	1e03      	subs	r3, r0, #0
 8005674:	d001      	beq.n	800567a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e033      	b.n	80056e2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567a:	1dbb      	adds	r3, r7, #6
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005682:	2308      	movs	r3, #8
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
 8005690:	e019      	b.n	80056c6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005692:	2308      	movs	r3, #8
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	b29b      	uxth	r3, r3
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	6a39      	ldr	r1, [r7, #32]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 f8e3 	bl	8005876 <I2C_WaitOnTXISFlagUntilTimeout>
 80056b0:	1e03      	subs	r3, r0, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e014      	b.n	80056e2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b8:	2308      	movs	r3, #8
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	6a3a      	ldr	r2, [r7, #32]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	0013      	movs	r3, r2
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	f000 f890 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 80056d8:	1e03      	subs	r3, r0, #0
 80056da:	d001      	beq.n	80056e0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	0018      	movs	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b004      	add	sp, #16
 80056e8:	bdb0      	pop	{r4, r5, r7, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	80002000 	.word	0x80002000

080056f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80056f0:	b5b0      	push	{r4, r5, r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	000c      	movs	r4, r1
 80056fa:	0010      	movs	r0, r2
 80056fc:	0019      	movs	r1, r3
 80056fe:	250a      	movs	r5, #10
 8005700:	197b      	adds	r3, r7, r5
 8005702:	1c22      	adds	r2, r4, #0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	2308      	movs	r3, #8
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	1c02      	adds	r2, r0, #0
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	1dbb      	adds	r3, r7, #6
 8005710:	1c0a      	adds	r2, r1, #0
 8005712:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005714:	1dbb      	adds	r3, r7, #6
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	197b      	adds	r3, r7, r5
 800571c:	8819      	ldrh	r1, [r3, #0]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <I2C_RequestMemoryRead+0xc0>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	f000 f99b 	bl	8005a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f8a0 	bl	8005876 <I2C_WaitOnTXISFlagUntilTimeout>
 8005736:	1e03      	subs	r3, r0, #0
 8005738:	d001      	beq.n	800573e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e033      	b.n	80057a6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800573e:	1dbb      	adds	r3, r7, #6
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d107      	bne.n	8005756 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005746:	2308      	movs	r3, #8
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28
 8005754:	e019      	b.n	800578a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005756:	2308      	movs	r3, #8
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	6a39      	ldr	r1, [r7, #32]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 f881 	bl	8005876 <I2C_WaitOnTXISFlagUntilTimeout>
 8005774:	1e03      	subs	r3, r0, #0
 8005776:	d001      	beq.n	800577c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e014      	b.n	80057a6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	2308      	movs	r3, #8
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	0013      	movs	r3, r2
 8005794:	2200      	movs	r2, #0
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	f000 f82e 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d001      	beq.n	80057a4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b004      	add	sp, #16
 80057ac:	bdb0      	pop	{r4, r5, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	80002000 	.word	0x80002000

080057b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2202      	movs	r2, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d103      	bne.n	80057d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2201      	movs	r2, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d007      	beq.n	80057f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2101      	movs	r1, #1
 80057ec:	430a      	orrs	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]
  }
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005808:	e021      	b.n	800584e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	d01e      	beq.n	800584e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fd fe70 	bl	80034f4 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d113      	bne.n	800584e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	2220      	movs	r2, #32
 800582c:	431a      	orrs	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2241      	movs	r2, #65	; 0x41
 8005836:	2120      	movs	r1, #32
 8005838:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2242      	movs	r2, #66	; 0x42
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e00f      	b.n	800586e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	425a      	negs	r2, r3
 800585e:	4153      	adcs	r3, r2
 8005860:	b2db      	uxtb	r3, r3
 8005862:	001a      	movs	r2, r3
 8005864:	1dfb      	adds	r3, r7, #7
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d0ce      	beq.n	800580a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b004      	add	sp, #16
 8005874:	bd80      	pop	{r7, pc}

08005876 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005882:	e02b      	b.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 f86e 	bl	800596c <I2C_IsAcknowledgeFailed>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d001      	beq.n	8005898 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e029      	b.n	80058ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3301      	adds	r3, #1
 800589c:	d01e      	beq.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fd fe29 	bl	80034f4 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d113      	bne.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	2220      	movs	r2, #32
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2241      	movs	r2, #65	; 0x41
 80058c4:	2120      	movs	r1, #32
 80058c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2242      	movs	r2, #66	; 0x42
 80058cc:	2100      	movs	r1, #0
 80058ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2240      	movs	r2, #64	; 0x40
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e007      	b.n	80058ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d1cc      	bne.n	8005884 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b004      	add	sp, #16
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005900:	e028      	b.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f82f 	bl	800596c <I2C_IsAcknowledgeFailed>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e026      	b.n	8005964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fd fded 	bl	80034f4 <HAL_GetTick>
 800591a:	0002      	movs	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d113      	bne.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	2220      	movs	r2, #32
 8005932:	431a      	orrs	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2241      	movs	r2, #65	; 0x41
 800593c:	2120      	movs	r1, #32
 800593e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2242      	movs	r2, #66	; 0x42
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e007      	b.n	8005964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2220      	movs	r2, #32
 800595c:	4013      	ands	r3, r2
 800595e:	2b20      	cmp	r3, #32
 8005960:	d1cf      	bne.n	8005902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2210      	movs	r2, #16
 8005980:	4013      	ands	r3, r2
 8005982:	2b10      	cmp	r3, #16
 8005984:	d164      	bne.n	8005a50 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	049b      	lsls	r3, r3, #18
 8005990:	401a      	ands	r2, r3
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	049b      	lsls	r3, r3, #18
 8005996:	429a      	cmp	r2, r3
 8005998:	d02b      	beq.n	80059f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	01c9      	lsls	r1, r1, #7
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ac:	e021      	b.n	80059f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3301      	adds	r3, #1
 80059b2:	d01e      	beq.n	80059f2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b4:	f7fd fd9e 	bl	80034f4 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <I2C_IsAcknowledgeFailed+0x5e>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d113      	bne.n	80059f2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	2220      	movs	r2, #32
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2241      	movs	r2, #65	; 0x41
 80059da:	2120      	movs	r1, #32
 80059dc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2242      	movs	r2, #66	; 0x42
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2240      	movs	r2, #64	; 0x40
 80059ea:	2100      	movs	r1, #0
 80059ec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e02f      	b.n	8005a52 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2220      	movs	r2, #32
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d1d6      	bne.n	80059ae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2210      	movs	r2, #16
 8005a06:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7ff fece 	bl	80057b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	490e      	ldr	r1, [pc, #56]	; (8005a5c <I2C_IsAcknowledgeFailed+0xf0>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2241      	movs	r2, #65	; 0x41
 8005a38:	2120      	movs	r1, #32
 8005a3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2242      	movs	r2, #66	; 0x42
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2240      	movs	r2, #64	; 0x40
 8005a48:	2100      	movs	r1, #0
 8005a4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	fe00e800 	.word	0xfe00e800

08005a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	0008      	movs	r0, r1
 8005a6a:	0011      	movs	r1, r2
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	240a      	movs	r4, #10
 8005a70:	193b      	adds	r3, r7, r4
 8005a72:	1c02      	adds	r2, r0, #0
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	2009      	movs	r0, #9
 8005a78:	183b      	adds	r3, r7, r0
 8005a7a:	1c0a      	adds	r2, r1, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	0d51      	lsrs	r1, r2, #21
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	00d2      	lsls	r2, r2, #3
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	490e      	ldr	r1, [pc, #56]	; (8005ac8 <I2C_TransferConfig+0x68>)
 8005a90:	430a      	orrs	r2, r1
 8005a92:	43d2      	mvns	r2, r2
 8005a94:	401a      	ands	r2, r3
 8005a96:	0011      	movs	r1, r2
 8005a98:	193b      	adds	r3, r7, r4
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	059b      	lsls	r3, r3, #22
 8005a9e:	0d9a      	lsrs	r2, r3, #22
 8005aa0:	183b      	adds	r3, r7, r0
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	0418      	lsls	r0, r3, #16
 8005aa6:	23ff      	movs	r3, #255	; 0xff
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	4003      	ands	r3, r0
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b005      	add	sp, #20
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	03ff63ff 	.word	0x03ff63ff

08005acc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2241      	movs	r2, #65	; 0x41
 8005ada:	5c9b      	ldrb	r3, [r3, r2]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d138      	bne.n	8005b54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2240      	movs	r2, #64	; 0x40
 8005ae6:	5c9b      	ldrb	r3, [r3, r2]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e032      	b.n	8005b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2240      	movs	r2, #64	; 0x40
 8005af4:	2101      	movs	r1, #1
 8005af6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2241      	movs	r2, #65	; 0x41
 8005afc:	2124      	movs	r1, #36	; 0x24
 8005afe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4911      	ldr	r1, [pc, #68]	; (8005b60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2241      	movs	r2, #65	; 0x41
 8005b44:	2120      	movs	r1, #32
 8005b46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	ffffefff 	.word	0xffffefff

08005b64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2241      	movs	r2, #65	; 0x41
 8005b72:	5c9b      	ldrb	r3, [r3, r2]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d139      	bne.n	8005bee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2240      	movs	r2, #64	; 0x40
 8005b7e:	5c9b      	ldrb	r3, [r3, r2]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e033      	b.n	8005bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2240      	movs	r2, #64	; 0x40
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2241      	movs	r2, #65	; 0x41
 8005b94:	2124      	movs	r1, #36	; 0x24
 8005b96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2241      	movs	r2, #65	; 0x41
 8005bde:	2120      	movs	r1, #32
 8005be0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2240      	movs	r2, #64	; 0x40
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e000      	b.n	8005bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bee:	2302      	movs	r3, #2
  }
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b004      	add	sp, #16
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	fffff0ff 	.word	0xfffff0ff

08005bfc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	0049      	lsls	r1, r1, #1
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40007000 	.word	0x40007000

08005c18 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	000a      	movs	r2, r1
 8005c22:	1cfb      	adds	r3, r7, #3
 8005c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2207      	movs	r2, #7
 8005c32:	4393      	bics	r3, r2
 8005c34:	001a      	movs	r2, r3
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c38:	2101      	movs	r1, #1
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e005      	b.n	8005c4c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c46:	2107      	movs	r1, #7
 8005c48:	438a      	bics	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c52:	2104      	movs	r1, #4
 8005c54:	430a      	orrs	r2, r1
 8005c56:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005c58:	1cfb      	adds	r3, r7, #3
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005c60:	bf30      	wfi
 8005c62:	e002      	b.n	8005c6a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005c64:	bf40      	sev
    __WFE();
 8005c66:	bf20      	wfe
    __WFE();
 8005c68:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c70:	2104      	movs	r1, #4
 8005c72:	438a      	bics	r2, r1
 8005c74:	611a      	str	r2, [r3, #16]
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b002      	add	sp, #8
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	40007000 	.word	0x40007000
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d11f      	bne.n	8005cec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005cac:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	0013      	movs	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	189b      	adds	r3, r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4912      	ldr	r1, [pc, #72]	; (8005d04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fa fa2e 	bl	800011c <__udivsi3>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cc6:	e008      	b.n	8005cda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e001      	b.n	8005cda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e009      	b.n	8005cee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d0ed      	beq.n	8005cc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b004      	add	sp, #16
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	40007000 	.word	0x40007000
 8005cfc:	fffff9ff 	.word	0xfffff9ff
 8005d00:	20000088 	.word	0x20000088
 8005d04:	000f4240 	.word	0x000f4240

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e304      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4013      	ands	r3, r2
 8005d22:	d100      	bne.n	8005d26 <HAL_RCC_OscConfig+0x1e>
 8005d24:	e07c      	b.n	8005e20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d26:	4bc3      	ldr	r3, [pc, #780]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2238      	movs	r2, #56	; 0x38
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d30:	4bc0      	ldr	r3, [pc, #768]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2203      	movs	r2, #3
 8005d36:	4013      	ands	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCC_OscConfig+0x3e>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4bb9      	ldr	r3, [pc, #740]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	4013      	ands	r3, r2
 8005d56:	d062      	beq.n	8005e1e <HAL_RCC_OscConfig+0x116>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d15e      	bne.n	8005e1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e2df      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	025b      	lsls	r3, r3, #9
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
 8005d70:	4bb0      	ldr	r3, [pc, #704]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4baf      	ldr	r3, [pc, #700]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	0249      	lsls	r1, r1, #9
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e020      	b.n	8005dc2 <HAL_RCC_OscConfig+0xba>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	23a0      	movs	r3, #160	; 0xa0
 8005d86:	02db      	lsls	r3, r3, #11
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d10e      	bne.n	8005daa <HAL_RCC_OscConfig+0xa2>
 8005d8c:	4ba9      	ldr	r3, [pc, #676]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4ba8      	ldr	r3, [pc, #672]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	02c9      	lsls	r1, r1, #11
 8005d96:	430a      	orrs	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	4ba6      	ldr	r3, [pc, #664]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4ba5      	ldr	r3, [pc, #660]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	0249      	lsls	r1, r1, #9
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e00b      	b.n	8005dc2 <HAL_RCC_OscConfig+0xba>
 8005daa:	4ba2      	ldr	r3, [pc, #648]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4ba1      	ldr	r3, [pc, #644]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005db0:	49a1      	ldr	r1, [pc, #644]	; (8006038 <HAL_RCC_OscConfig+0x330>)
 8005db2:	400a      	ands	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	4b9f      	ldr	r3, [pc, #636]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b9e      	ldr	r3, [pc, #632]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005dbc:	499f      	ldr	r1, [pc, #636]	; (800603c <HAL_RCC_OscConfig+0x334>)
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d014      	beq.n	8005df4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fd fb93 	bl	80034f4 <HAL_GetTick>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd4:	f7fd fb8e 	bl	80034f4 <HAL_GetTick>
 8005dd8:	0002      	movs	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e29e      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005de6:	4b93      	ldr	r3, [pc, #588]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	4013      	ands	r3, r2
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005df2:	e015      	b.n	8005e20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fd fb7e 	bl	80034f4 <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dfe:	f7fd fb79 	bl	80034f4 <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b64      	cmp	r3, #100	; 0x64
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e289      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e10:	4b88      	ldr	r3, [pc, #544]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	029b      	lsls	r3, r3, #10
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d1f0      	bne.n	8005dfe <HAL_RCC_OscConfig+0xf6>
 8005e1c:	e000      	b.n	8005e20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2202      	movs	r2, #2
 8005e26:	4013      	ands	r3, r2
 8005e28:	d100      	bne.n	8005e2c <HAL_RCC_OscConfig+0x124>
 8005e2a:	e099      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e2c:	4b81      	ldr	r3, [pc, #516]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2238      	movs	r2, #56	; 0x38
 8005e32:	4013      	ands	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e36:	4b7f      	ldr	r3, [pc, #508]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d102      	bne.n	8005e4c <HAL_RCC_OscConfig+0x144>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d002      	beq.n	8005e52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d135      	bne.n	8005ebe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e52:	4b78      	ldr	r3, [pc, #480]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d005      	beq.n	8005e6a <HAL_RCC_OscConfig+0x162>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e25c      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6a:	4b72      	ldr	r3, [pc, #456]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a74      	ldr	r2, [pc, #464]	; (8006040 <HAL_RCC_OscConfig+0x338>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	021a      	lsls	r2, r3, #8
 8005e7a:	4b6e      	ldr	r3, [pc, #440]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d112      	bne.n	8005eac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005e86:	4b6b      	ldr	r3, [pc, #428]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6e      	ldr	r2, [pc, #440]	; (8006044 <HAL_RCC_OscConfig+0x33c>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	0019      	movs	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	4b67      	ldr	r3, [pc, #412]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e96:	430a      	orrs	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005e9a:	4b66      	ldr	r3, [pc, #408]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	0adb      	lsrs	r3, r3, #11
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	4a68      	ldr	r2, [pc, #416]	; (8006048 <HAL_RCC_OscConfig+0x340>)
 8005ea6:	40da      	lsrs	r2, r3
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x344>)
 8005eaa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005eac:	4b68      	ldr	r3, [pc, #416]	; (8006050 <HAL_RCC_OscConfig+0x348>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fd fac3 	bl	800343c <HAL_InitTick>
 8005eb6:	1e03      	subs	r3, r0, #0
 8005eb8:	d051      	beq.n	8005f5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e232      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d030      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ec6:	4b5b      	ldr	r3, [pc, #364]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a5e      	ldr	r2, [pc, #376]	; (8006044 <HAL_RCC_OscConfig+0x33c>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	4b57      	ldr	r3, [pc, #348]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005eda:	4b56      	ldr	r3, [pc, #344]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b55      	ldr	r3, [pc, #340]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	0049      	lsls	r1, r1, #1
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fd fb04 	bl	80034f4 <HAL_GetTick>
 8005eec:	0003      	movs	r3, r0
 8005eee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef2:	f7fd faff 	bl	80034f4 <HAL_GetTick>
 8005ef6:	0002      	movs	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e20f      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f04:	4b4b      	ldr	r3, [pc, #300]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f10:	4b48      	ldr	r3, [pc, #288]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a4a      	ldr	r2, [pc, #296]	; (8006040 <HAL_RCC_OscConfig+0x338>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	021a      	lsls	r2, r3, #8
 8005f20:	4b44      	ldr	r3, [pc, #272]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b41      	ldr	r3, [pc, #260]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f2e:	4949      	ldr	r1, [pc, #292]	; (8006054 <HAL_RCC_OscConfig+0x34c>)
 8005f30:	400a      	ands	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fd fade 	bl	80034f4 <HAL_GetTick>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fd fad9 	bl	80034f4 <HAL_GetTick>
 8005f42:	0002      	movs	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e1e9      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d1f0      	bne.n	8005f3e <HAL_RCC_OscConfig+0x236>
 8005f5c:	e000      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2208      	movs	r2, #8
 8005f66:	4013      	ands	r3, r2
 8005f68:	d047      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005f6a:	4b32      	ldr	r3, [pc, #200]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2238      	movs	r2, #56	; 0x38
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b18      	cmp	r3, #24
 8005f74:	d10a      	bne.n	8005f8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005f76:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d03c      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2f2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d138      	bne.n	8005ffa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e1cb      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d019      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005f94:	4b27      	ldr	r3, [pc, #156]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fd faa8 	bl	80034f4 <HAL_GetTick>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005faa:	f7fd faa3 	bl	80034f4 <HAL_GetTick>
 8005fae:	0002      	movs	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e1b3      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d0f1      	beq.n	8005faa <HAL_RCC_OscConfig+0x2a2>
 8005fc6:	e018      	b.n	8005ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005fce:	2101      	movs	r1, #1
 8005fd0:	438a      	bics	r2, r1
 8005fd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fd fa8e 	bl	80034f4 <HAL_GetTick>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fde:	f7fd fa89 	bl	80034f4 <HAL_GetTick>
 8005fe2:	0002      	movs	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e199      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d1f1      	bne.n	8005fde <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2204      	movs	r2, #4
 8006000:	4013      	ands	r3, r2
 8006002:	d100      	bne.n	8006006 <HAL_RCC_OscConfig+0x2fe>
 8006004:	e0c6      	b.n	8006194 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006006:	231f      	movs	r3, #31
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2238      	movs	r2, #56	; 0x38
 8006014:	4013      	ands	r3, r2
 8006016:	2b20      	cmp	r3, #32
 8006018:	d11e      	bne.n	8006058 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_OscConfig+0x32c>)
 800601c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601e:	2202      	movs	r2, #2
 8006020:	4013      	ands	r3, r2
 8006022:	d100      	bne.n	8006026 <HAL_RCC_OscConfig+0x31e>
 8006024:	e0b6      	b.n	8006194 <HAL_RCC_OscConfig+0x48c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d000      	beq.n	8006030 <HAL_RCC_OscConfig+0x328>
 800602e:	e0b1      	b.n	8006194 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e177      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
 8006034:	40021000 	.word	0x40021000
 8006038:	fffeffff 	.word	0xfffeffff
 800603c:	fffbffff 	.word	0xfffbffff
 8006040:	ffff80ff 	.word	0xffff80ff
 8006044:	ffffc7ff 	.word	0xffffc7ff
 8006048:	00f42400 	.word	0x00f42400
 800604c:	20000088 	.word	0x20000088
 8006050:	20000000 	.word	0x20000000
 8006054:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006058:	4bb4      	ldr	r3, [pc, #720]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800605a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	055b      	lsls	r3, r3, #21
 8006060:	4013      	ands	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_RCC_OscConfig+0x362>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d011      	beq.n	8006092 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	4baf      	ldr	r3, [pc, #700]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006072:	4bae      	ldr	r3, [pc, #696]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	0549      	lsls	r1, r1, #21
 8006078:	430a      	orrs	r2, r1
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c
 800607c:	4bab      	ldr	r3, [pc, #684]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800607e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	055b      	lsls	r3, r3, #21
 8006084:	4013      	ands	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800608a:	231f      	movs	r3, #31
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006092:	4ba7      	ldr	r3, [pc, #668]	; (8006330 <HAL_RCC_OscConfig+0x628>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	4013      	ands	r3, r2
 800609c:	d11a      	bne.n	80060d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609e:	4ba4      	ldr	r3, [pc, #656]	; (8006330 <HAL_RCC_OscConfig+0x628>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4ba3      	ldr	r3, [pc, #652]	; (8006330 <HAL_RCC_OscConfig+0x628>)
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	0049      	lsls	r1, r1, #1
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80060ac:	f7fd fa22 	bl	80034f4 <HAL_GetTick>
 80060b0:	0003      	movs	r3, r0
 80060b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b6:	f7fd fa1d 	bl	80034f4 <HAL_GetTick>
 80060ba:	0002      	movs	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e12d      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c8:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HAL_RCC_OscConfig+0x628>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4013      	ands	r3, r2
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d106      	bne.n	80060ea <HAL_RCC_OscConfig+0x3e2>
 80060dc:	4b93      	ldr	r3, [pc, #588]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80060de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060e0:	4b92      	ldr	r3, [pc, #584]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80060e2:	2101      	movs	r1, #1
 80060e4:	430a      	orrs	r2, r1
 80060e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80060e8:	e01c      	b.n	8006124 <HAL_RCC_OscConfig+0x41c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0x404>
 80060f2:	4b8e      	ldr	r3, [pc, #568]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80060f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060f6:	4b8d      	ldr	r3, [pc, #564]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80060f8:	2104      	movs	r1, #4
 80060fa:	430a      	orrs	r2, r1
 80060fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80060fe:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006102:	4b8a      	ldr	r3, [pc, #552]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006104:	2101      	movs	r1, #1
 8006106:	430a      	orrs	r2, r1
 8006108:	65da      	str	r2, [r3, #92]	; 0x5c
 800610a:	e00b      	b.n	8006124 <HAL_RCC_OscConfig+0x41c>
 800610c:	4b87      	ldr	r3, [pc, #540]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800610e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006110:	4b86      	ldr	r3, [pc, #536]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006112:	2101      	movs	r1, #1
 8006114:	438a      	bics	r2, r1
 8006116:	65da      	str	r2, [r3, #92]	; 0x5c
 8006118:	4b84      	ldr	r3, [pc, #528]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800611a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800611c:	4b83      	ldr	r3, [pc, #524]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800611e:	2104      	movs	r1, #4
 8006120:	438a      	bics	r2, r1
 8006122:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d014      	beq.n	8006156 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd f9e2 	bl	80034f4 <HAL_GetTick>
 8006130:	0003      	movs	r3, r0
 8006132:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006134:	e009      	b.n	800614a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fd f9dd 	bl	80034f4 <HAL_GetTick>
 800613a:	0002      	movs	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x62c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e0ec      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800614a:	4b78      	ldr	r3, [pc, #480]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800614c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614e:	2202      	movs	r2, #2
 8006150:	4013      	ands	r3, r2
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x42e>
 8006154:	e013      	b.n	800617e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006156:	f7fd f9cd 	bl	80034f4 <HAL_GetTick>
 800615a:	0003      	movs	r3, r0
 800615c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800615e:	e009      	b.n	8006174 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fd f9c8 	bl	80034f4 <HAL_GetTick>
 8006164:	0002      	movs	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	4a72      	ldr	r2, [pc, #456]	; (8006334 <HAL_RCC_OscConfig+0x62c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0d7      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006174:	4b6d      	ldr	r3, [pc, #436]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	2202      	movs	r2, #2
 800617a:	4013      	ands	r3, r2
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800617e:	231f      	movs	r3, #31
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006188:	4b68      	ldr	r3, [pc, #416]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800618a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800618c:	4b67      	ldr	r3, [pc, #412]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800618e:	496a      	ldr	r1, [pc, #424]	; (8006338 <HAL_RCC_OscConfig+0x630>)
 8006190:	400a      	ands	r2, r1
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d100      	bne.n	800619e <HAL_RCC_OscConfig+0x496>
 800619c:	e0c1      	b.n	8006322 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800619e:	4b63      	ldr	r3, [pc, #396]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2238      	movs	r2, #56	; 0x38
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d100      	bne.n	80061ac <HAL_RCC_OscConfig+0x4a4>
 80061aa:	e081      	b.n	80062b0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d156      	bne.n	8006262 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b4:	4b5d      	ldr	r3, [pc, #372]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b5c      	ldr	r3, [pc, #368]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80061ba:	4960      	ldr	r1, [pc, #384]	; (800633c <HAL_RCC_OscConfig+0x634>)
 80061bc:	400a      	ands	r2, r1
 80061be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fd f998 	bl	80034f4 <HAL_GetTick>
 80061c4:	0003      	movs	r3, r0
 80061c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ca:	f7fd f993 	bl	80034f4 <HAL_GetTick>
 80061ce:	0002      	movs	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e0a3      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	049b      	lsls	r3, r3, #18
 80061e4:	4013      	ands	r3, r2
 80061e6:	d1f0      	bne.n	80061ca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <HAL_RCC_OscConfig+0x638>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1a      	ldr	r2, [r3, #32]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	431a      	orrs	r2, r3
 8006216:	4b45      	ldr	r3, [pc, #276]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006218:	430a      	orrs	r2, r1
 800621a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621c:	4b43      	ldr	r3, [pc, #268]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b42      	ldr	r3, [pc, #264]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	0449      	lsls	r1, r1, #17
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800622a:	4b40      	ldr	r3, [pc, #256]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	4b3f      	ldr	r3, [pc, #252]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	0549      	lsls	r1, r1, #21
 8006234:	430a      	orrs	r2, r1
 8006236:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fd f95c 	bl	80034f4 <HAL_GetTick>
 800623c:	0003      	movs	r3, r0
 800623e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006242:	f7fd f957 	bl	80034f4 <HAL_GetTick>
 8006246:	0002      	movs	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e067      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006254:	4b35      	ldr	r3, [pc, #212]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	049b      	lsls	r3, r3, #18
 800625c:	4013      	ands	r3, r2
 800625e:	d0f0      	beq.n	8006242 <HAL_RCC_OscConfig+0x53a>
 8006260:	e05f      	b.n	8006322 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006262:	4b32      	ldr	r3, [pc, #200]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006268:	4934      	ldr	r1, [pc, #208]	; (800633c <HAL_RCC_OscConfig+0x634>)
 800626a:	400a      	ands	r2, r1
 800626c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800626e:	4b2f      	ldr	r3, [pc, #188]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006274:	2103      	movs	r1, #3
 8006276:	438a      	bics	r2, r1
 8006278:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800627a:	4b2c      	ldr	r3, [pc, #176]	; (800632c <HAL_RCC_OscConfig+0x624>)
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_RCC_OscConfig+0x624>)
 8006280:	4930      	ldr	r1, [pc, #192]	; (8006344 <HAL_RCC_OscConfig+0x63c>)
 8006282:	400a      	ands	r2, r1
 8006284:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fd f935 	bl	80034f4 <HAL_GetTick>
 800628a:	0003      	movs	r3, r0
 800628c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006290:	f7fd f930 	bl	80034f4 <HAL_GetTick>
 8006294:	0002      	movs	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e040      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a2:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	049b      	lsls	r3, r3, #18
 80062aa:	4013      	ands	r3, r2
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x588>
 80062ae:	e038      	b.n	8006322 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e033      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <HAL_RCC_OscConfig+0x624>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2203      	movs	r2, #3
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d126      	bne.n	800631e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2270      	movs	r2, #112	; 0x70
 80062d4:	401a      	ands	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d11f      	bne.n	800631e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	23fe      	movs	r3, #254	; 0xfe
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	401a      	ands	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d116      	bne.n	800631e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	23f8      	movs	r3, #248	; 0xf8
 80062f4:	039b      	lsls	r3, r3, #14
 80062f6:	401a      	ands	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10e      	bne.n	800631e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	23e0      	movs	r3, #224	; 0xe0
 8006304:	051b      	lsls	r3, r3, #20
 8006306:	401a      	ands	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d106      	bne.n	800631e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	0f5b      	lsrs	r3, r3, #29
 8006314:	075a      	lsls	r2, r3, #29
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	0018      	movs	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	b008      	add	sp, #32
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
 8006334:	00001388 	.word	0x00001388
 8006338:	efffffff 	.word	0xefffffff
 800633c:	feffffff 	.word	0xfeffffff
 8006340:	11c1808c 	.word	0x11c1808c
 8006344:	eefeffff 	.word	0xeefeffff

08006348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0e9      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800635c:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2207      	movs	r2, #7
 8006362:	4013      	ands	r3, r2
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d91e      	bls.n	80063a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b73      	ldr	r3, [pc, #460]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2207      	movs	r2, #7
 8006370:	4393      	bics	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	4b70      	ldr	r3, [pc, #448]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800637c:	f7fd f8ba 	bl	80034f4 <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006384:	e009      	b.n	800639a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006386:	f7fd f8b5 	bl	80034f4 <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	4a6a      	ldr	r2, [pc, #424]	; (800653c <HAL_RCC_ClockConfig+0x1f4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e0ca      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800639a:	4b67      	ldr	r3, [pc, #412]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2207      	movs	r2, #7
 80063a0:	4013      	ands	r3, r2
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1ee      	bne.n	8006386 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	4013      	ands	r3, r2
 80063b0:	d015      	beq.n	80063de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2204      	movs	r2, #4
 80063b8:	4013      	ands	r3, r2
 80063ba:	d006      	beq.n	80063ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80063bc:	4b60      	ldr	r3, [pc, #384]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	4b5f      	ldr	r3, [pc, #380]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80063c2:	21e0      	movs	r1, #224	; 0xe0
 80063c4:	01c9      	lsls	r1, r1, #7
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ca:	4b5d      	ldr	r3, [pc, #372]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4a5d      	ldr	r2, [pc, #372]	; (8006544 <HAL_RCC_ClockConfig+0x1fc>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	0019      	movs	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	4013      	ands	r3, r2
 80063e6:	d057      	beq.n	8006498 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d107      	bne.n	8006400 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063f0:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	4013      	ands	r3, r2
 80063fa:	d12b      	bne.n	8006454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e097      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d107      	bne.n	8006418 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006408:	4b4d      	ldr	r3, [pc, #308]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	049b      	lsls	r3, r3, #18
 8006410:	4013      	ands	r3, r2
 8006412:	d11f      	bne.n	8006454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e08b      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d107      	bne.n	8006430 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006420:	4b47      	ldr	r3, [pc, #284]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4013      	ands	r3, r2
 800642a:	d113      	bne.n	8006454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e07f      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d106      	bne.n	8006446 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006438:	4b41      	ldr	r3, [pc, #260]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 800643a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643c:	2202      	movs	r2, #2
 800643e:	4013      	ands	r3, r2
 8006440:	d108      	bne.n	8006454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e074      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006446:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 8006448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644a:	2202      	movs	r2, #2
 800644c:	4013      	ands	r3, r2
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e06d      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006454:	4b3a      	ldr	r3, [pc, #232]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2207      	movs	r2, #7
 800645a:	4393      	bics	r3, r2
 800645c:	0019      	movs	r1, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006468:	f7fd f844 	bl	80034f4 <HAL_GetTick>
 800646c:	0003      	movs	r3, r0
 800646e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006470:	e009      	b.n	8006486 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006472:	f7fd f83f 	bl	80034f4 <HAL_GetTick>
 8006476:	0002      	movs	r2, r0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	4a2f      	ldr	r2, [pc, #188]	; (800653c <HAL_RCC_ClockConfig+0x1f4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e054      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006486:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2238      	movs	r2, #56	; 0x38
 800648c:	401a      	ands	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	429a      	cmp	r2, r3
 8006496:	d1ec      	bne.n	8006472 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006498:	4b27      	ldr	r3, [pc, #156]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2207      	movs	r2, #7
 800649e:	4013      	ands	r3, r2
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d21e      	bcs.n	80064e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2207      	movs	r2, #7
 80064ac:	4393      	bics	r3, r2
 80064ae:	0019      	movs	r1, r3
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064b8:	f7fd f81c 	bl	80034f4 <HAL_GetTick>
 80064bc:	0003      	movs	r3, r0
 80064be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064c0:	e009      	b.n	80064d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c2:	f7fd f817 	bl	80034f4 <HAL_GetTick>
 80064c6:	0002      	movs	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_RCC_ClockConfig+0x1f4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e02c      	b.n	8006530 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064d6:	4b18      	ldr	r3, [pc, #96]	; (8006538 <HAL_RCC_ClockConfig+0x1f0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2207      	movs	r2, #7
 80064dc:	4013      	ands	r3, r2
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d1ee      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2204      	movs	r2, #4
 80064ea:	4013      	ands	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80064ee:	4b14      	ldr	r3, [pc, #80]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_RCC_ClockConfig+0x200>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006502:	f000 f829 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006506:	0001      	movs	r1, r0
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <HAL_RCC_ClockConfig+0x1f8>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	220f      	movs	r2, #15
 8006510:	401a      	ands	r2, r3
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_RCC_ClockConfig+0x204>)
 8006514:	0092      	lsls	r2, r2, #2
 8006516:	58d3      	ldr	r3, [r2, r3]
 8006518:	221f      	movs	r2, #31
 800651a:	4013      	ands	r3, r2
 800651c:	000a      	movs	r2, r1
 800651e:	40da      	lsrs	r2, r3
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x208>)
 8006522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <HAL_RCC_ClockConfig+0x20c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	0018      	movs	r0, r3
 800652a:	f7fc ff87 	bl	800343c <HAL_InitTick>
 800652e:	0003      	movs	r3, r0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40022000 	.word	0x40022000
 800653c:	00001388 	.word	0x00001388
 8006540:	40021000 	.word	0x40021000
 8006544:	fffff0ff 	.word	0xfffff0ff
 8006548:	ffff8fff 	.word	0xffff8fff
 800654c:	080186a0 	.word	0x080186a0
 8006550:	20000088 	.word	0x20000088
 8006554:	20000000 	.word	0x20000000

08006558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2238      	movs	r2, #56	; 0x38
 8006564:	4013      	ands	r3, r2
 8006566:	d10f      	bne.n	8006588 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006568:	4b39      	ldr	r3, [pc, #228]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	0adb      	lsrs	r3, r3, #11
 800656e:	2207      	movs	r2, #7
 8006570:	4013      	ands	r3, r2
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	0013      	movs	r3, r2
 8006578:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	4835      	ldr	r0, [pc, #212]	; (8006654 <HAL_RCC_GetSysClockFreq+0xfc>)
 800657e:	f7f9 fdcd 	bl	800011c <__udivsi3>
 8006582:	0003      	movs	r3, r0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	e05d      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006588:	4b31      	ldr	r3, [pc, #196]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2238      	movs	r2, #56	; 0x38
 800658e:	4013      	ands	r3, r2
 8006590:	2b08      	cmp	r3, #8
 8006592:	d102      	bne.n	800659a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006594:	4b30      	ldr	r3, [pc, #192]	; (8006658 <HAL_RCC_GetSysClockFreq+0x100>)
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e054      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800659a:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2238      	movs	r2, #56	; 0x38
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d138      	bne.n	8006618 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	2207      	movs	r2, #7
 80065b8:	4013      	ands	r3, r2
 80065ba:	3301      	adds	r3, #1
 80065bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d10d      	bne.n	80065e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	4824      	ldr	r0, [pc, #144]	; (8006658 <HAL_RCC_GetSysClockFreq+0x100>)
 80065c8:	f7f9 fda8 	bl	800011c <__udivsi3>
 80065cc:	0003      	movs	r3, r0
 80065ce:	0019      	movs	r1, r3
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	227f      	movs	r2, #127	; 0x7f
 80065d8:	4013      	ands	r3, r2
 80065da:	434b      	muls	r3, r1
 80065dc:	617b      	str	r3, [r7, #20]
        break;
 80065de:	e00d      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	481c      	ldr	r0, [pc, #112]	; (8006654 <HAL_RCC_GetSysClockFreq+0xfc>)
 80065e4:	f7f9 fd9a 	bl	800011c <__udivsi3>
 80065e8:	0003      	movs	r3, r0
 80065ea:	0019      	movs	r1, r3
 80065ec:	4b18      	ldr	r3, [pc, #96]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	227f      	movs	r2, #127	; 0x7f
 80065f4:	4013      	ands	r3, r2
 80065f6:	434b      	muls	r3, r1
 80065f8:	617b      	str	r3, [r7, #20]
        break;
 80065fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	0f5b      	lsrs	r3, r3, #29
 8006602:	2207      	movs	r2, #7
 8006604:	4013      	ands	r3, r2
 8006606:	3301      	adds	r3, #1
 8006608:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	6978      	ldr	r0, [r7, #20]
 800660e:	f7f9 fd85 	bl	800011c <__udivsi3>
 8006612:	0003      	movs	r3, r0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e015      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006618:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2238      	movs	r2, #56	; 0x38
 800661e:	4013      	ands	r3, r2
 8006620:	2b20      	cmp	r3, #32
 8006622:	d103      	bne.n	800662c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	e00b      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2238      	movs	r2, #56	; 0x38
 8006632:	4013      	ands	r3, r2
 8006634:	2b18      	cmp	r3, #24
 8006636:	d103      	bne.n	8006640 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006638:	23fa      	movs	r3, #250	; 0xfa
 800663a:	01db      	lsls	r3, r3, #7
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	e001      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006644:	693b      	ldr	r3, [r7, #16]
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b006      	add	sp, #24
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	40021000 	.word	0x40021000
 8006654:	00f42400 	.word	0x00f42400
 8006658:	007a1200 	.word	0x007a1200

0800665c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006664:	2313      	movs	r3, #19
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800666c:	2312      	movs	r3, #18
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	029b      	lsls	r3, r3, #10
 800667c:	4013      	ands	r3, r2
 800667e:	d100      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006680:	e0a3      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006682:	2011      	movs	r0, #17
 8006684:	183b      	adds	r3, r7, r0
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668a:	4bc3      	ldr	r3, [pc, #780]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800668c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	055b      	lsls	r3, r3, #21
 8006692:	4013      	ands	r3, r2
 8006694:	d110      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	4bc0      	ldr	r3, [pc, #768]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669a:	4bbf      	ldr	r3, [pc, #764]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	0549      	lsls	r1, r1, #21
 80066a0:	430a      	orrs	r2, r1
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80066a4:	4bbc      	ldr	r3, [pc, #752]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	055b      	lsls	r3, r3, #21
 80066ac:	4013      	ands	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b2:	183b      	adds	r3, r7, r0
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b8:	4bb8      	ldr	r3, [pc, #736]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4bb7      	ldr	r3, [pc, #732]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	0049      	lsls	r1, r1, #1
 80066c2:	430a      	orrs	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066c6:	f7fc ff15 	bl	80034f4 <HAL_GetTick>
 80066ca:	0003      	movs	r3, r0
 80066cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066ce:	e00b      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d0:	f7fc ff10 	bl	80034f4 <HAL_GetTick>
 80066d4:	0002      	movs	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d904      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80066de:	2313      	movs	r3, #19
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	2203      	movs	r2, #3
 80066e4:	701a      	strb	r2, [r3, #0]
        break;
 80066e6:	e005      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066e8:	4bac      	ldr	r3, [pc, #688]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4013      	ands	r3, r2
 80066f2:	d0ed      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80066f4:	2313      	movs	r3, #19
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d154      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066fe:	4ba6      	ldr	r3, [pc, #664]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006702:	23c0      	movs	r3, #192	; 0xc0
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4013      	ands	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d019      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	429a      	cmp	r2, r3
 8006718:	d014      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800671a:	4b9f      	ldr	r3, [pc, #636]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	4aa0      	ldr	r2, [pc, #640]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006720:	4013      	ands	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006724:	4b9c      	ldr	r3, [pc, #624]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006728:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	0249      	lsls	r1, r1, #9
 800672e:	430a      	orrs	r2, r1
 8006730:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006732:	4b99      	ldr	r3, [pc, #612]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006736:	4b98      	ldr	r3, [pc, #608]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006738:	499a      	ldr	r1, [pc, #616]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800673a:	400a      	ands	r2, r1
 800673c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800673e:	4b96      	ldr	r3, [pc, #600]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2201      	movs	r2, #1
 8006748:	4013      	ands	r3, r2
 800674a:	d016      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fc fed2 	bl	80034f4 <HAL_GetTick>
 8006750:	0003      	movs	r3, r0
 8006752:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006754:	e00c      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006756:	f7fc fecd 	bl	80034f4 <HAL_GetTick>
 800675a:	0002      	movs	r2, r0
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	4a91      	ldr	r2, [pc, #580]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d904      	bls.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006766:	2313      	movs	r3, #19
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	2203      	movs	r2, #3
 800676c:	701a      	strb	r2, [r3, #0]
            break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006770:	4b89      	ldr	r3, [pc, #548]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	2202      	movs	r2, #2
 8006776:	4013      	ands	r3, r2
 8006778:	d0ed      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800677a:	2313      	movs	r3, #19
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006784:	4b84      	ldr	r3, [pc, #528]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006788:	4a85      	ldr	r2, [pc, #532]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800678a:	4013      	ands	r3, r2
 800678c:	0019      	movs	r1, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006792:	4b81      	ldr	r3, [pc, #516]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006794:	430a      	orrs	r2, r1
 8006796:	65da      	str	r2, [r3, #92]	; 0x5c
 8006798:	e00c      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800679a:	2312      	movs	r3, #18
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	2213      	movs	r2, #19
 80067a0:	18ba      	adds	r2, r7, r2
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e005      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	2312      	movs	r3, #18
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2213      	movs	r2, #19
 80067ae:	18ba      	adds	r2, r7, r2
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067b4:	2311      	movs	r3, #17
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d105      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067be:	4b76      	ldr	r3, [pc, #472]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c2:	4b75      	ldr	r3, [pc, #468]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067c4:	4979      	ldr	r1, [pc, #484]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80067c6:	400a      	ands	r2, r1
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067d4:	4b70      	ldr	r3, [pc, #448]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	2203      	movs	r2, #3
 80067da:	4393      	bics	r3, r2
 80067dc:	0019      	movs	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	4b6d      	ldr	r3, [pc, #436]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067e4:	430a      	orrs	r2, r1
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2202      	movs	r2, #2
 80067ee:	4013      	ands	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067f2:	4b69      	ldr	r3, [pc, #420]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	220c      	movs	r2, #12
 80067f8:	4393      	bics	r3, r2
 80067fa:	0019      	movs	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	4b65      	ldr	r3, [pc, #404]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006802:	430a      	orrs	r2, r1
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2210      	movs	r2, #16
 800680c:	4013      	ands	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006810:	4b61      	ldr	r3, [pc, #388]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	4a66      	ldr	r2, [pc, #408]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006816:	4013      	ands	r3, r2
 8006818:	0019      	movs	r1, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b5e      	ldr	r3, [pc, #376]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006820:	430a      	orrs	r2, r1
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4013      	ands	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006830:	4b59      	ldr	r3, [pc, #356]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	4a5f      	ldr	r2, [pc, #380]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006836:	4013      	ands	r3, r2
 8006838:	0019      	movs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	4b56      	ldr	r3, [pc, #344]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006840:	430a      	orrs	r2, r1
 8006842:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	4013      	ands	r3, r2
 800684e:	d009      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006850:	4b51      	ldr	r3, [pc, #324]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	4a58      	ldr	r2, [pc, #352]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006856:	4013      	ands	r3, r2
 8006858:	0019      	movs	r1, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006860:	430a      	orrs	r2, r1
 8006862:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2220      	movs	r2, #32
 800686a:	4013      	ands	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800686e:	4b4a      	ldr	r3, [pc, #296]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	4a52      	ldr	r2, [pc, #328]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006874:	4013      	ands	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	4b46      	ldr	r3, [pc, #280]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800687e:	430a      	orrs	r2, r1
 8006880:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	01db      	lsls	r3, r3, #7
 800688a:	4013      	ands	r3, r2
 800688c:	d015      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800688e:	4b42      	ldr	r3, [pc, #264]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	0899      	lsrs	r1, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800689c:	430a      	orrs	r2, r1
 800689e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d106      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	0249      	lsls	r1, r1, #9
 80068b6:	430a      	orrs	r2, r1
 80068b8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	2380      	movs	r3, #128	; 0x80
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	4013      	ands	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068c6:	4b34      	ldr	r3, [pc, #208]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	2240      	movs	r2, #64	; 0x40
 80068cc:	4393      	bics	r3, r2
 80068ce:	0019      	movs	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d4:	4b30      	ldr	r3, [pc, #192]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068d6:	430a      	orrs	r2, r1
 80068d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	039b      	lsls	r3, r3, #14
 80068e2:	4013      	ands	r3, r2
 80068e4:	d016      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80068e6:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	4a35      	ldr	r2, [pc, #212]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f4:	4b28      	ldr	r3, [pc, #160]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	03db      	lsls	r3, r3, #15
 8006902:	429a      	cmp	r2, r3
 8006904:	d106      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	0449      	lsls	r1, r1, #17
 8006910:	430a      	orrs	r2, r1
 8006912:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	03db      	lsls	r3, r3, #15
 800691c:	4013      	ands	r3, r2
 800691e:	d016      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006926:	4013      	ands	r3, r2
 8006928:	0019      	movs	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006930:	430a      	orrs	r2, r1
 8006932:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	045b      	lsls	r3, r3, #17
 800693c:	429a      	cmp	r2, r3
 800693e:	d106      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	4b14      	ldr	r3, [pc, #80]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	0449      	lsls	r1, r1, #17
 800694a:	430a      	orrs	r2, r1
 800694c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4013      	ands	r3, r2
 8006958:	d016      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	4a1a      	ldr	r2, [pc, #104]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006960:	4013      	ands	r3, r2
 8006962:	0019      	movs	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800696a:	430a      	orrs	r2, r1
 800696c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	2380      	movs	r3, #128	; 0x80
 8006974:	01db      	lsls	r3, r3, #7
 8006976:	429a      	cmp	r2, r3
 8006978:	d106      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	0249      	lsls	r1, r1, #9
 8006984:	430a      	orrs	r2, r1
 8006986:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006988:	2312      	movs	r3, #18
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	781b      	ldrb	r3, [r3, #0]
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b006      	add	sp, #24
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	40021000 	.word	0x40021000
 800699c:	40007000 	.word	0x40007000
 80069a0:	fffffcff 	.word	0xfffffcff
 80069a4:	fffeffff 	.word	0xfffeffff
 80069a8:	00001388 	.word	0x00001388
 80069ac:	efffffff 	.word	0xefffffff
 80069b0:	fffff3ff 	.word	0xfffff3ff
 80069b4:	fff3ffff 	.word	0xfff3ffff
 80069b8:	ffcfffff 	.word	0xffcfffff
 80069bc:	ffffcfff 	.word	0xffffcfff
 80069c0:	ffbfffff 	.word	0xffbfffff
 80069c4:	feffffff 	.word	0xfeffffff
 80069c8:	ffff3fff 	.word	0xffff3fff

080069cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069cc:	b5b0      	push	{r4, r5, r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069d4:	230f      	movs	r3, #15
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <HAL_RTC_Init+0x18>
 80069e2:	e080      	b.n	8006ae6 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2229      	movs	r2, #41	; 0x29
 80069e8:	5c9b      	ldrb	r3, [r3, r2]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2228      	movs	r2, #40	; 0x28
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2288      	movs	r2, #136	; 0x88
 80069fc:	0212      	lsls	r2, r2, #8
 80069fe:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f00c f900 	bl	8012c08 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2229      	movs	r2, #41	; 0x29
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	22ca      	movs	r2, #202	; 0xca
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2253      	movs	r2, #83	; 0x53
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a20:	250f      	movs	r5, #15
 8006a22:	197c      	adds	r4, r7, r5
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 fa71 	bl	8006f0e <RTC_EnterInitMode>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8006a30:	0028      	movs	r0, r5
 8006a32:	183b      	adds	r3, r7, r0
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d148      	bne.n	8006acc <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699a      	ldr	r2, [r3, #24]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	492b      	ldr	r1, [pc, #172]	; (8006af4 <HAL_RTC_Init+0x128>)
 8006a46:	400a      	ands	r2, r1
 8006a48:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6999      	ldr	r1, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6912      	ldr	r2, [r2, #16]
 8006a70:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6919      	ldr	r1, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	041a      	lsls	r2, r3, #16
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a86:	0005      	movs	r5, r0
 8006a88:	183c      	adds	r4, r7, r0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f000 fa81 	bl	8006f94 <RTC_ExitInitMode>
 8006a92:	0003      	movs	r3, r0
 8006a94:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006a96:	197b      	adds	r3, r7, r5
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d116      	bne.n	8006acc <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	00d2      	lsls	r2, r2, #3
 8006aaa:	08d2      	lsrs	r2, r2, #3
 8006aac:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6999      	ldr	r1, [r3, #24]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2229      	movs	r2, #41	; 0x29
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006ae6:	230f      	movs	r3, #15
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
}
 8006aec:	0018      	movs	r0, r3
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b004      	add	sp, #16
 8006af2:	bdb0      	pop	{r4, r5, r7, pc}
 8006af4:	fb8fffbf 	.word	0xfb8fffbf

08006af8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006af8:	b5b0      	push	{r4, r5, r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2228      	movs	r2, #40	; 0x28
 8006b08:	5c9b      	ldrb	r3, [r3, r2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_RTC_SetTime+0x1a>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e092      	b.n	8006c38 <HAL_RTC_SetTime+0x140>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2228      	movs	r2, #40	; 0x28
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2229      	movs	r2, #41	; 0x29
 8006b1e:	2102      	movs	r1, #2
 8006b20:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	22ca      	movs	r2, #202	; 0xca
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2253      	movs	r2, #83	; 0x53
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b32:	2513      	movs	r5, #19
 8006b34:	197c      	adds	r4, r7, r5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f9e8 	bl	8006f0e <RTC_EnterInitMode>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006b42:	197b      	adds	r3, r7, r5
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d162      	bne.n	8006c10 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d125      	bne.n	8006b9c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d102      	bne.n	8006b62 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 fa58 	bl	800701c <RTC_ByteToBcd2>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 fa51 	bl	800701c <RTC_ByteToBcd2>
 8006b7a:	0003      	movs	r3, r0
 8006b7c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b7e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	789b      	ldrb	r3, [r3, #2]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 fa49 	bl	800701c <RTC_ByteToBcd2>
 8006b8a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b8c:	0022      	movs	r2, r4
 8006b8e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	78db      	ldrb	r3, [r3, #3]
 8006b94:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e017      	b.n	8006bcc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d102      	bne.n	8006bae <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bba:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bc0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	491b      	ldr	r1, [pc, #108]	; (8006c40 <HAL_RTC_SetTime+0x148>)
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4918      	ldr	r1, [pc, #96]	; (8006c44 <HAL_RTC_SetTime+0x14c>)
 8006be4:	400a      	ands	r2, r1
 8006be6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6999      	ldr	r1, [r3, #24]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c00:	2313      	movs	r3, #19
 8006c02:	18fc      	adds	r4, r7, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 f9c4 	bl	8006f94 <RTC_ExitInitMode>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	22ff      	movs	r2, #255	; 0xff
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006c18:	2313      	movs	r3, #19
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2229      	movs	r2, #41	; 0x29
 8006c26:	2101      	movs	r1, #1
 8006c28:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2228      	movs	r2, #40	; 0x28
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5499      	strb	r1, [r3, r2]

  return status;
 8006c32:	2313      	movs	r3, #19
 8006c34:	18fb      	adds	r3, r7, r3
 8006c36:	781b      	ldrb	r3, [r3, #0]
}
 8006c38:	0018      	movs	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b006      	add	sp, #24
 8006c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c40:	007f7f7f 	.word	0x007f7f7f
 8006c44:	fffbffff 	.word	0xfffbffff

08006c48 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	045b      	lsls	r3, r3, #17
 8006c66:	0c5a      	lsrs	r2, r3, #17
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <HAL_RTC_GetTime+0xb4>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	223f      	movs	r2, #63	; 0x3f
 8006c80:	4013      	ands	r3, r2
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	227f      	movs	r2, #127	; 0x7f
 8006c90:	4013      	ands	r3, r2
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	227f      	movs	r2, #127	; 0x7f
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0d9b      	lsrs	r3, r3, #22
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2201      	movs	r2, #1
 8006cae:	4013      	ands	r3, r2
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d11a      	bne.n	8006cf2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 f9d3 	bl	800706c <RTC_Bcd2ToByte>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	001a      	movs	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f000 f9ca 	bl	800706c <RTC_Bcd2ToByte>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	001a      	movs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	789b      	ldrb	r3, [r3, #2]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f9c1 	bl	800706c <RTC_Bcd2ToByte>
 8006cea:	0003      	movs	r3, r0
 8006cec:	001a      	movs	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b006      	add	sp, #24
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	007f7f7f 	.word	0x007f7f7f

08006d00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d00:	b5b0      	push	{r4, r5, r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2228      	movs	r2, #40	; 0x28
 8006d10:	5c9b      	ldrb	r3, [r3, r2]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_RTC_SetDate+0x1a>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e07e      	b.n	8006e18 <HAL_RTC_SetDate+0x118>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2228      	movs	r2, #40	; 0x28
 8006d1e:	2101      	movs	r1, #1
 8006d20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2229      	movs	r2, #41	; 0x29
 8006d26:	2102      	movs	r1, #2
 8006d28:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10e      	bne.n	8006d4e <HAL_RTC_SetDate+0x4e>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	001a      	movs	r2, r3
 8006d36:	2310      	movs	r3, #16
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d008      	beq.n	8006d4e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2210      	movs	r2, #16
 8006d42:	4393      	bics	r3, r2
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	330a      	adds	r3, #10
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d11c      	bne.n	8006d8e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 f95f 	bl	800701c <RTC_ByteToBcd2>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f000 f958 	bl	800701c <RTC_ByteToBcd2>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d70:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	789b      	ldrb	r3, [r3, #2]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 f950 	bl	800701c <RTC_ByteToBcd2>
 8006d7c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d7e:	0022      	movs	r2, r4
 8006d80:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e00e      	b.n	8006dac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d9a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006da0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	22ca      	movs	r2, #202	; 0xca
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2253      	movs	r2, #83	; 0x53
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006dbc:	2513      	movs	r5, #19
 8006dbe:	197c      	adds	r4, r7, r5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f000 f8a3 	bl	8006f0e <RTC_EnterInitMode>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006dcc:	0028      	movs	r0, r5
 8006dce:	183b      	adds	r3, r7, r0
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RTC_SetDate+0x120>)
 8006dde:	400a      	ands	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006de2:	183c      	adds	r4, r7, r0
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 f8d4 	bl	8006f94 <RTC_ExitInitMode>
 8006dec:	0003      	movs	r3, r0
 8006dee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	22ff      	movs	r2, #255	; 0xff
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006df8:	2313      	movs	r3, #19
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2229      	movs	r2, #41	; 0x29
 8006e06:	2101      	movs	r1, #1
 8006e08:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2228      	movs	r2, #40	; 0x28
 8006e0e:	2100      	movs	r1, #0
 8006e10:	5499      	strb	r1, [r3, r2]

  return status;
 8006e12:	2313      	movs	r3, #19
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b006      	add	sp, #24
 8006e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e20:	00ffff3f 	.word	0x00ffff3f

08006e24 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <HAL_RTC_GetDate+0x98>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	0c1b      	lsrs	r3, r3, #16
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	221f      	movs	r2, #31
 8006e4e:	4013      	ands	r3, r2
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	223f      	movs	r2, #63	; 0x3f
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	0b5b      	lsrs	r3, r3, #13
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2207      	movs	r2, #7
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d11a      	bne.n	8006eb0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	78db      	ldrb	r3, [r3, #3]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f8f4 	bl	800706c <RTC_Bcd2ToByte>
 8006e84:	0003      	movs	r3, r0
 8006e86:	001a      	movs	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f8eb 	bl	800706c <RTC_Bcd2ToByte>
 8006e96:	0003      	movs	r3, r0
 8006e98:	001a      	movs	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	789b      	ldrb	r3, [r3, #2]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 f8e2 	bl	800706c <RTC_Bcd2ToByte>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	001a      	movs	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b006      	add	sp, #24
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	00ffff3f 	.word	0x00ffff3f

08006ec0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	21a0      	movs	r1, #160	; 0xa0
 8006ed4:	438a      	bics	r2, r1
 8006ed6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ed8:	f7fc fb0c 	bl	80034f4 <HAL_GetTick>
 8006edc:	0003      	movs	r3, r0
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ee2:	f7fc fb07 	bl	80034f4 <HAL_GetTick>
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	23fa      	movs	r3, #250	; 0xfa
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e006      	b.n	8006f06 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	4013      	ands	r3, r2
 8006f02:	d0ee      	beq.n	8006ee2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	0018      	movs	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b004      	add	sp, #16
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006f16:	230f      	movs	r3, #15
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2240      	movs	r2, #64	; 0x40
 8006f26:	4013      	ands	r3, r2
 8006f28:	d12c      	bne.n	8006f84 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2180      	movs	r1, #128	; 0x80
 8006f36:	430a      	orrs	r2, r1
 8006f38:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006f3a:	f7fc fadb 	bl	80034f4 <HAL_GetTick>
 8006f3e:	0003      	movs	r3, r0
 8006f40:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f42:	e014      	b.n	8006f6e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f44:	f7fc fad6 	bl	80034f4 <HAL_GetTick>
 8006f48:	0002      	movs	r2, r0
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	200f      	movs	r0, #15
 8006f50:	183b      	adds	r3, r7, r0
 8006f52:	1839      	adds	r1, r7, r0
 8006f54:	7809      	ldrb	r1, [r1, #0]
 8006f56:	7019      	strb	r1, [r3, #0]
 8006f58:	23fa      	movs	r3, #250	; 0xfa
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d906      	bls.n	8006f6e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006f60:	183b      	adds	r3, r7, r0
 8006f62:	2203      	movs	r2, #3
 8006f64:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2229      	movs	r2, #41	; 0x29
 8006f6a:	2103      	movs	r1, #3
 8006f6c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2240      	movs	r2, #64	; 0x40
 8006f76:	4013      	ands	r3, r2
 8006f78:	d104      	bne.n	8006f84 <RTC_EnterInitMode+0x76>
 8006f7a:	230f      	movs	r3, #15
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d1df      	bne.n	8006f44 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f84:	230f      	movs	r3, #15
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	781b      	ldrb	r3, [r3, #0]
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b004      	add	sp, #16
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9c:	240f      	movs	r4, #15
 8006f9e:	193b      	adds	r3, r7, r4
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <RTC_ExitInitMode+0x84>)
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <RTC_ExitInitMode+0x84>)
 8006faa:	2180      	movs	r1, #128	; 0x80
 8006fac:	438a      	bics	r2, r1
 8006fae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <RTC_ExitInitMode+0x84>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d10d      	bne.n	8006fd6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff ff7f 	bl	8006ec0 <HAL_RTC_WaitForSynchro>
 8006fc2:	1e03      	subs	r3, r0, #0
 8006fc4:	d021      	beq.n	800700a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2229      	movs	r2, #41	; 0x29
 8006fca:	2103      	movs	r1, #3
 8006fcc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006fce:	193b      	adds	r3, r7, r4
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e019      	b.n	800700a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <RTC_ExitInitMode+0x84>)
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <RTC_ExitInitMode+0x84>)
 8006fdc:	2120      	movs	r1, #32
 8006fde:	438a      	bics	r2, r1
 8006fe0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7ff ff6b 	bl	8006ec0 <HAL_RTC_WaitForSynchro>
 8006fea:	1e03      	subs	r3, r0, #0
 8006fec:	d007      	beq.n	8006ffe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2229      	movs	r2, #41	; 0x29
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006ff6:	230f      	movs	r3, #15
 8006ff8:	18fb      	adds	r3, r7, r3
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <RTC_ExitInitMode+0x84>)
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <RTC_ExitInitMode+0x84>)
 8007004:	2120      	movs	r1, #32
 8007006:	430a      	orrs	r2, r1
 8007008:	619a      	str	r2, [r3, #24]
  }

  return status;
 800700a:	230f      	movs	r3, #15
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	781b      	ldrb	r3, [r3, #0]
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	b005      	add	sp, #20
 8007016:	bd90      	pop	{r4, r7, pc}
 8007018:	40002800 	.word	0x40002800

0800701c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	0002      	movs	r2, r0
 8007024:	1dfb      	adds	r3, r7, #7
 8007026:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800702c:	230b      	movs	r3, #11
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	1dfa      	adds	r2, r7, #7
 8007032:	7812      	ldrb	r2, [r2, #0]
 8007034:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007036:	e008      	b.n	800704a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800703e:	220b      	movs	r2, #11
 8007040:	18bb      	adds	r3, r7, r2
 8007042:	18ba      	adds	r2, r7, r2
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	3a0a      	subs	r2, #10
 8007048:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800704a:	210b      	movs	r1, #11
 800704c:	187b      	adds	r3, r7, r1
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b09      	cmp	r3, #9
 8007052:	d8f1      	bhi.n	8007038 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	b2da      	uxtb	r2, r3
 800705c:	187b      	adds	r3, r7, r1
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	4313      	orrs	r3, r2
 8007062:	b2db      	uxtb	r3, r3
}
 8007064:	0018      	movs	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	b004      	add	sp, #16
 800706a:	bd80      	pop	{r7, pc}

0800706c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	0002      	movs	r2, r0
 8007074:	1dfb      	adds	r3, r7, #7
 8007076:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007078:	1dfb      	adds	r3, r7, #7
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	b2db      	uxtb	r3, r3
 8007080:	001a      	movs	r2, r3
 8007082:	0013      	movs	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	189b      	adds	r3, r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	1dfb      	adds	r3, r7, #7
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	210f      	movs	r1, #15
 8007096:	400b      	ands	r3, r1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	18d3      	adds	r3, r2, r3
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	0018      	movs	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b004      	add	sp, #16
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2228      	movs	r2, #40	; 0x28
 80070b8:	5c9b      	ldrb	r3, [r3, r2]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80070be:	2302      	movs	r3, #2
 80070c0:	e082      	b.n	80071c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2228      	movs	r2, #40	; 0x28
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2229      	movs	r2, #41	; 0x29
 80070ce:	2102      	movs	r1, #2
 80070d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	22ca      	movs	r2, #202	; 0xca
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2253      	movs	r2, #83	; 0x53
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4938      	ldr	r1, [pc, #224]	; (80071d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80070ee:	400a      	ands	r2, r1
 80070f0:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2104      	movs	r1, #4
 80070fe:	430a      	orrs	r2, r1
 8007100:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007102:	4b34      	ldr	r3, [pc, #208]	; (80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	4013      	ands	r3, r2
 800710a:	d121      	bne.n	8007150 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800710c:	f7fc f9f2 	bl	80034f4 <HAL_GetTick>
 8007110:	0003      	movs	r3, r0
 8007112:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007114:	e016      	b.n	8007144 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007116:	f7fc f9ed 	bl	80034f4 <HAL_GetTick>
 800711a:	0002      	movs	r2, r0
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	23fa      	movs	r3, #250	; 0xfa
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	429a      	cmp	r2, r3
 8007126:	d90d      	bls.n	8007144 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2229      	movs	r2, #41	; 0x29
 8007134:	2103      	movs	r1, #3
 8007136:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2228      	movs	r2, #40	; 0x28
 800713c:	2100      	movs	r1, #0
 800713e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e041      	b.n	80071c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2204      	movs	r2, #4
 800714c:	4013      	ands	r3, r2
 800714e:	d0e2      	beq.n	8007116 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2107      	movs	r1, #7
 8007164:	438a      	bics	r2, r1
 8007166:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	430a      	orrs	r2, r1
 8007176:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	58d3      	ldr	r3, [r2, r3]
 800717e:	4916      	ldr	r1, [pc, #88]	; (80071d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8007180:	2280      	movs	r2, #128	; 0x80
 8007182:	0312      	lsls	r2, r2, #12
 8007184:	4313      	orrs	r3, r2
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2180      	movs	r1, #128	; 0x80
 8007196:	01c9      	lsls	r1, r1, #7
 8007198:	430a      	orrs	r2, r1
 800719a:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	00c9      	lsls	r1, r1, #3
 80071aa:	430a      	orrs	r2, r1
 80071ac:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	22ff      	movs	r2, #255	; 0xff
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2229      	movs	r2, #41	; 0x29
 80071ba:	2101      	movs	r1, #1
 80071bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2228      	movs	r2, #40	; 0x28
 80071c2:	2100      	movs	r1, #0
 80071c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b006      	add	sp, #24
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	fffffbff 	.word	0xfffffbff
 80071d4:	40002800 	.word	0x40002800
 80071d8:	40021800 	.word	0x40021800

080071dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ea:	2204      	movs	r2, #4
 80071ec:	4013      	ands	r3, r2
 80071ee:	d00b      	beq.n	8007208 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2104      	movs	r1, #4
 80071fc:	430a      	orrs	r2, r1
 80071fe:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	0018      	movs	r0, r3
 8007204:	f000 f808 	bl	8007218 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2229      	movs	r2, #41	; 0x29
 800720c:	2101      	movs	r1, #1
 800720e:	5499      	strb	r1, [r3, r2]
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b002      	add	sp, #8
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007220:	46c0      	nop			; (mov r8, r8)
 8007222:	46bd      	mov	sp, r7
 8007224:	b002      	add	sp, #8
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0a8      	b.n	800738c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	2382      	movs	r3, #130	; 0x82
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	429a      	cmp	r2, r3
 800724c:	d009      	beq.n	8007262 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	61da      	str	r2, [r3, #28]
 8007254:	e005      	b.n	8007262 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	225d      	movs	r2, #93	; 0x5d
 800726c:	5c9b      	ldrb	r3, [r3, r2]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d107      	bne.n	8007284 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	225c      	movs	r2, #92	; 0x5c
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	0018      	movs	r0, r3
 8007280:	f00b fd08 	bl	8012c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	225d      	movs	r2, #93	; 0x5d
 8007288:	2102      	movs	r1, #2
 800728a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2140      	movs	r1, #64	; 0x40
 8007298:	438a      	bics	r2, r1
 800729a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	23e0      	movs	r3, #224	; 0xe0
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d902      	bls.n	80072ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e002      	b.n	80072b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	015b      	lsls	r3, r3, #5
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	23f0      	movs	r3, #240	; 0xf0
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	429a      	cmp	r2, r3
 80072be:	d008      	beq.n	80072d2 <HAL_SPI_Init+0xaa>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	23e0      	movs	r3, #224	; 0xe0
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	2382      	movs	r3, #130	; 0x82
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	401a      	ands	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6899      	ldr	r1, [r3, #8]
 80072e0:	2384      	movs	r3, #132	; 0x84
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	400b      	ands	r3, r1
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2102      	movs	r1, #2
 80072ee:	400b      	ands	r3, r1
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2101      	movs	r1, #1
 80072f8:	400b      	ands	r3, r1
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	400b      	ands	r3, r1
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	2138      	movs	r1, #56	; 0x38
 800730e:	400b      	ands	r3, r1
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	400b      	ands	r3, r1
 800731a:	431a      	orrs	r2, r3
 800731c:	0011      	movs	r1, r2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007322:	2380      	movs	r3, #128	; 0x80
 8007324:	019b      	lsls	r3, r3, #6
 8007326:	401a      	ands	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	2204      	movs	r2, #4
 8007338:	401a      	ands	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2110      	movs	r1, #16
 8007340:	400b      	ands	r3, r1
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	2108      	movs	r1, #8
 800734a:	400b      	ands	r3, r1
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68d9      	ldr	r1, [r3, #12]
 8007352:	23f0      	movs	r3, #240	; 0xf0
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	400b      	ands	r3, r1
 8007358:	431a      	orrs	r2, r3
 800735a:	0011      	movs	r1, r2
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	2380      	movs	r3, #128	; 0x80
 8007360:	015b      	lsls	r3, r3, #5
 8007362:	401a      	ands	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69da      	ldr	r2, [r3, #28]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4907      	ldr	r1, [pc, #28]	; (8007394 <HAL_SPI_Init+0x16c>)
 8007378:	400a      	ands	r2, r1
 800737a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	225d      	movs	r2, #93	; 0x5d
 8007386:	2101      	movs	r1, #1
 8007388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}
 8007394:	fffff7ff 	.word	0xfffff7ff

08007398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	1dbb      	adds	r3, r7, #6
 80073a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073a8:	231f      	movs	r3, #31
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	225c      	movs	r2, #92	; 0x5c
 80073b4:	5c9b      	ldrb	r3, [r3, r2]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_SPI_Transmit+0x26>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e140      	b.n	8007640 <HAL_SPI_Transmit+0x2a8>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	225c      	movs	r2, #92	; 0x5c
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073c6:	f7fc f895 	bl	80034f4 <HAL_GetTick>
 80073ca:	0003      	movs	r3, r0
 80073cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80073ce:	2316      	movs	r3, #22
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	1dba      	adds	r2, r7, #6
 80073d4:	8812      	ldrh	r2, [r2, #0]
 80073d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	225d      	movs	r2, #93	; 0x5d
 80073dc:	5c9b      	ldrb	r3, [r3, r2]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d004      	beq.n	80073ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80073e4:	231f      	movs	r3, #31
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	2202      	movs	r2, #2
 80073ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80073ec:	e11d      	b.n	800762a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_SPI_Transmit+0x64>
 80073f4:	1dbb      	adds	r3, r7, #6
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80073fc:	231f      	movs	r3, #31
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
    goto error;
 8007404:	e111      	b.n	800762a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	225d      	movs	r2, #93	; 0x5d
 800740a:	2103      	movs	r1, #3
 800740c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1dba      	adds	r2, r7, #6
 800741e:	8812      	ldrh	r2, [r2, #0]
 8007420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1dba      	adds	r2, r7, #6
 8007426:	8812      	ldrh	r2, [r2, #0]
 8007428:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2244      	movs	r2, #68	; 0x44
 8007434:	2100      	movs	r1, #0
 8007436:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2246      	movs	r2, #70	; 0x46
 800743c:	2100      	movs	r1, #0
 800743e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	2380      	movs	r3, #128	; 0x80
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	429a      	cmp	r2, r3
 8007456:	d110      	bne.n	800747a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2140      	movs	r1, #64	; 0x40
 8007464:	438a      	bics	r2, r1
 8007466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	01c9      	lsls	r1, r1, #7
 8007476:	430a      	orrs	r2, r1
 8007478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2240      	movs	r2, #64	; 0x40
 8007482:	4013      	ands	r3, r2
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d007      	beq.n	8007498 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2140      	movs	r1, #64	; 0x40
 8007494:	430a      	orrs	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	23e0      	movs	r3, #224	; 0xe0
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d94e      	bls.n	8007542 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <HAL_SPI_Transmit+0x11e>
 80074ac:	2316      	movs	r3, #22
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d13f      	bne.n	8007536 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	881a      	ldrh	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	1c9a      	adds	r2, r3, #2
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074da:	e02c      	b.n	8007536 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2202      	movs	r2, #2
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d112      	bne.n	8007510 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800750e:	e012      	b.n	8007536 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007510:	f7fb fff0 	bl	80034f4 <HAL_GetTick>
 8007514:	0002      	movs	r2, r0
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d802      	bhi.n	8007526 <HAL_SPI_Transmit+0x18e>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	d102      	bne.n	800752c <HAL_SPI_Transmit+0x194>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800752c:	231f      	movs	r3, #31
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	2203      	movs	r2, #3
 8007532:	701a      	strb	r2, [r3, #0]
          goto error;
 8007534:	e079      	b.n	800762a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1cd      	bne.n	80074dc <HAL_SPI_Transmit+0x144>
 8007540:	e04f      	b.n	80075e2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <HAL_SPI_Transmit+0x1bc>
 800754a:	2316      	movs	r3, #22
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d141      	bne.n	80075d8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800757a:	e02d      	b.n	80075d8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2202      	movs	r2, #2
 8007584:	4013      	ands	r3, r2
 8007586:	2b02      	cmp	r3, #2
 8007588:	d113      	bne.n	80075b2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b0:	e012      	b.n	80075d8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b2:	f7fb ff9f 	bl	80034f4 <HAL_GetTick>
 80075b6:	0002      	movs	r2, r0
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d802      	bhi.n	80075c8 <HAL_SPI_Transmit+0x230>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x236>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80075ce:	231f      	movs	r3, #31
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	2203      	movs	r2, #3
 80075d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80075d6:	e028      	b.n	800762a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1cc      	bne.n	800757c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	0018      	movs	r0, r3
 80075ea:	f000 f95d 	bl	80078a8 <SPI_EndRxTxTransaction>
 80075ee:	1e03      	subs	r3, r0, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800761e:	231f      	movs	r3, #31
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e000      	b.n	800762a <HAL_SPI_Transmit+0x292>
  }

error:
 8007628:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	225d      	movs	r2, #93	; 0x5d
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	225c      	movs	r2, #92	; 0x5c
 8007636:	2100      	movs	r1, #0
 8007638:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800763a:	231f      	movs	r3, #31
 800763c:	18fb      	adds	r3, r7, r3
 800763e:	781b      	ldrb	r3, [r3, #0]
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b008      	add	sp, #32
 8007646:	bd80      	pop	{r7, pc}

08007648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	1dfb      	adds	r3, r7, #7
 8007656:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007658:	f7fb ff4c 	bl	80034f4 <HAL_GetTick>
 800765c:	0002      	movs	r2, r0
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	18d3      	adds	r3, r2, r3
 8007666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007668:	f7fb ff44 	bl	80034f4 <HAL_GetTick>
 800766c:	0003      	movs	r3, r0
 800766e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007670:	4b3a      	ldr	r3, [pc, #232]	; (800775c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	015b      	lsls	r3, r3, #5
 8007676:	0d1b      	lsrs	r3, r3, #20
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4353      	muls	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800767e:	e058      	b.n	8007732 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	d055      	beq.n	8007732 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007686:	f7fb ff35 	bl	80034f4 <HAL_GetTick>
 800768a:	0002      	movs	r2, r0
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	429a      	cmp	r2, r3
 8007694:	d902      	bls.n	800769c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d142      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	21e0      	movs	r1, #224	; 0xe0
 80076a8:	438a      	bics	r2, r1
 80076aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	2382      	movs	r3, #130	; 0x82
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d113      	bne.n	80076e0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d005      	beq.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d107      	bne.n	80076e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2140      	movs	r1, #64	; 0x40
 80076dc:	438a      	bics	r2, r1
 80076de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	019b      	lsls	r3, r3, #6
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d110      	bne.n	800770e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	491a      	ldr	r1, [pc, #104]	; (8007760 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80076f8:	400a      	ands	r2, r1
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2180      	movs	r1, #128	; 0x80
 8007708:	0189      	lsls	r1, r1, #6
 800770a:	430a      	orrs	r2, r1
 800770c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	225d      	movs	r2, #93	; 0x5d
 8007712:	2101      	movs	r1, #1
 8007714:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	225c      	movs	r2, #92	; 0x5c
 800771a:	2100      	movs	r1, #0
 800771c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e017      	b.n	8007752 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	3b01      	subs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4013      	ands	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	425a      	negs	r2, r3
 8007742:	4153      	adcs	r3, r2
 8007744:	b2db      	uxtb	r3, r3
 8007746:	001a      	movs	r2, r3
 8007748:	1dfb      	adds	r3, r7, #7
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d197      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b008      	add	sp, #32
 8007758:	bd80      	pop	{r7, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	20000088 	.word	0x20000088
 8007760:	ffffdfff 	.word	0xffffdfff

08007764 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007772:	2317      	movs	r3, #23
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800777a:	f7fb febb 	bl	80034f4 <HAL_GetTick>
 800777e:	0002      	movs	r2, r0
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	18d3      	adds	r3, r2, r3
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800778a:	f7fb feb3 	bl	80034f4 <HAL_GetTick>
 800778e:	0003      	movs	r3, r0
 8007790:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800779a:	4b41      	ldr	r3, [pc, #260]	; (80078a0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	0013      	movs	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	189b      	adds	r3, r3, r2
 80077a4:	00da      	lsls	r2, r3, #3
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	0d1b      	lsrs	r3, r3, #20
 80077aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ac:	4353      	muls	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077b0:	e068      	b.n	8007884 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	23c0      	movs	r3, #192	; 0xc0
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d10a      	bne.n	80077d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	2117      	movs	r1, #23
 80077ca:	187b      	adds	r3, r7, r1
 80077cc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077ce:	187b      	adds	r3, r7, r1
 80077d0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	d055      	beq.n	8007884 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077d8:	f7fb fe8c 	bl	80034f4 <HAL_GetTick>
 80077dc:	0002      	movs	r2, r0
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d902      	bls.n	80077ee <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d142      	bne.n	8007874 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	21e0      	movs	r1, #224	; 0xe0
 80077fa:	438a      	bics	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	2382      	movs	r3, #130	; 0x82
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	429a      	cmp	r2, r3
 8007808:	d113      	bne.n	8007832 <SPI_WaitFifoStateUntilTimeout+0xce>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	2380      	movs	r3, #128	; 0x80
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	429a      	cmp	r2, r3
 8007814:	d005      	beq.n	8007822 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	2380      	movs	r3, #128	; 0x80
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	429a      	cmp	r2, r3
 8007820:	d107      	bne.n	8007832 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2140      	movs	r1, #64	; 0x40
 800782e:	438a      	bics	r2, r1
 8007830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007836:	2380      	movs	r3, #128	; 0x80
 8007838:	019b      	lsls	r3, r3, #6
 800783a:	429a      	cmp	r2, r3
 800783c:	d110      	bne.n	8007860 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4916      	ldr	r1, [pc, #88]	; (80078a4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800784a:	400a      	ands	r2, r1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	0189      	lsls	r1, r1, #6
 800785c:	430a      	orrs	r2, r1
 800785e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	225d      	movs	r2, #93	; 0x5d
 8007864:	2101      	movs	r1, #1
 8007866:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	225c      	movs	r2, #92	; 0x5c
 800786c:	2100      	movs	r1, #0
 800786e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e010      	b.n	8007896 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	3b01      	subs	r3, #1
 8007882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d18e      	bne.n	80077b2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	0018      	movs	r0, r3
 8007898:	46bd      	mov	sp, r7
 800789a:	b00a      	add	sp, #40	; 0x28
 800789c:	bd80      	pop	{r7, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	20000088 	.word	0x20000088
 80078a4:	ffffdfff 	.word	0xffffdfff

080078a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	23c0      	movs	r3, #192	; 0xc0
 80078b8:	0159      	lsls	r1, r3, #5
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	0013      	movs	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7ff ff4e 	bl	8007764 <SPI_WaitFifoStateUntilTimeout>
 80078c8:	1e03      	subs	r3, r0, #0
 80078ca:	d007      	beq.n	80078dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d0:	2220      	movs	r2, #32
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e027      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	0013      	movs	r3, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	2180      	movs	r1, #128	; 0x80
 80078ea:	f7ff fead 	bl	8007648 <SPI_WaitFlagStateUntilTimeout>
 80078ee:	1e03      	subs	r3, r0, #0
 80078f0:	d007      	beq.n	8007902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f6:	2220      	movs	r2, #32
 80078f8:	431a      	orrs	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e014      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	23c0      	movs	r3, #192	; 0xc0
 8007906:	00d9      	lsls	r1, r3, #3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	0013      	movs	r3, r2
 8007910:	2200      	movs	r2, #0
 8007912:	f7ff ff27 	bl	8007764 <SPI_WaitFifoStateUntilTimeout>
 8007916:	1e03      	subs	r3, r0, #0
 8007918:	d007      	beq.n	800792a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791e:	2220      	movs	r2, #32
 8007920:	431a      	orrs	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e000      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	0018      	movs	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	b004      	add	sp, #16
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e04a      	b.n	80079dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	223d      	movs	r2, #61	; 0x3d
 800794a:	5c9b      	ldrb	r3, [r3, r2]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d107      	bne.n	8007962 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	223c      	movs	r2, #60	; 0x3c
 8007956:	2100      	movs	r1, #0
 8007958:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f00b fa07 	bl	8012d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	223d      	movs	r2, #61	; 0x3d
 8007966:	2102      	movs	r1, #2
 8007968:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	0019      	movs	r1, r3
 8007974:	0010      	movs	r0, r2
 8007976:	f000 faaf 	bl	8007ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2248      	movs	r2, #72	; 0x48
 800797e:	2101      	movs	r1, #1
 8007980:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	223e      	movs	r2, #62	; 0x3e
 8007986:	2101      	movs	r1, #1
 8007988:	5499      	strb	r1, [r3, r2]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	223f      	movs	r2, #63	; 0x3f
 800798e:	2101      	movs	r1, #1
 8007990:	5499      	strb	r1, [r3, r2]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2240      	movs	r2, #64	; 0x40
 8007996:	2101      	movs	r1, #1
 8007998:	5499      	strb	r1, [r3, r2]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2241      	movs	r2, #65	; 0x41
 800799e:	2101      	movs	r1, #1
 80079a0:	5499      	strb	r1, [r3, r2]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2242      	movs	r2, #66	; 0x42
 80079a6:	2101      	movs	r1, #1
 80079a8:	5499      	strb	r1, [r3, r2]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2243      	movs	r2, #67	; 0x43
 80079ae:	2101      	movs	r1, #1
 80079b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2244      	movs	r2, #68	; 0x44
 80079b6:	2101      	movs	r1, #1
 80079b8:	5499      	strb	r1, [r3, r2]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2245      	movs	r2, #69	; 0x45
 80079be:	2101      	movs	r1, #1
 80079c0:	5499      	strb	r1, [r3, r2]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2246      	movs	r2, #70	; 0x46
 80079c6:	2101      	movs	r1, #1
 80079c8:	5499      	strb	r1, [r3, r2]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2247      	movs	r2, #71	; 0x47
 80079ce:	2101      	movs	r1, #1
 80079d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	223d      	movs	r2, #61	; 0x3d
 80079d6:	2101      	movs	r1, #1
 80079d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	0018      	movs	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	b002      	add	sp, #8
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	223d      	movs	r2, #61	; 0x3d
 80079f0:	5c9b      	ldrb	r3, [r3, r2]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d001      	beq.n	80079fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e042      	b.n	8007a82 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	223d      	movs	r2, #61	; 0x3d
 8007a00:	2102      	movs	r1, #2
 8007a02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2101      	movs	r1, #1
 8007a10:	430a      	orrs	r2, r1
 8007a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <HAL_TIM_Base_Start_IT+0xa8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00f      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x5a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	2380      	movs	r3, #128	; 0x80
 8007a24:	05db      	lsls	r3, r3, #23
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d009      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x5a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a18      	ldr	r2, [pc, #96]	; (8007a90 <HAL_TIM_Base_Start_IT+0xac>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x5a>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a16      	ldr	r2, [pc, #88]	; (8007a94 <HAL_TIM_Base_Start_IT+0xb0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d116      	bne.n	8007a6c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <HAL_TIM_Base_Start_IT+0xb4>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d016      	beq.n	8007a7e <HAL_TIM_Base_Start_IT+0x9a>
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	2380      	movs	r3, #128	; 0x80
 8007a54:	025b      	lsls	r3, r3, #9
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d011      	beq.n	8007a7e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2101      	movs	r1, #1
 8007a66:	430a      	orrs	r2, r1
 8007a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6a:	e008      	b.n	8007a7e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2101      	movs	r1, #1
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e000      	b.n	8007a80 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	0018      	movs	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b004      	add	sp, #16
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	00010007 	.word	0x00010007

08007a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	4013      	ands	r3, r2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d124      	bne.n	8007afc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d11d      	bne.n	8007afc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	4252      	negs	r2, r2
 8007ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f000 f9e2 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007ae4:	e007      	b.n	8007af6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f000 f9d5 	bl	8007e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f9e1 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2204      	movs	r2, #4
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d125      	bne.n	8007b56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2204      	movs	r2, #4
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d11e      	bne.n	8007b56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	4252      	negs	r2, r2
 8007b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	23c0      	movs	r3, #192	; 0xc0
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4013      	ands	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 f9b5 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007b3e:	e007      	b.n	8007b50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	0018      	movs	r0, r3
 8007b44:	f000 f9a8 	bl	8007e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f000 f9b4 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d124      	bne.n	8007bae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d11d      	bne.n	8007bae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2209      	movs	r2, #9
 8007b78:	4252      	negs	r2, r2
 8007b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2203      	movs	r2, #3
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	0018      	movs	r0, r3
 8007b92:	f000 f989 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007b96:	e007      	b.n	8007ba8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f000 f97c 	bl	8007e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 f988 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2210      	movs	r2, #16
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d125      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d11e      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2211      	movs	r2, #17
 8007bd0:	4252      	negs	r2, r2
 8007bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	23c0      	movs	r3, #192	; 0xc0
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4013      	ands	r3, r2
 8007be6:	d004      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	0018      	movs	r0, r3
 8007bec:	f000 f95c 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e007      	b.n	8007c02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f000 f94f 	bl	8007e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f000 f95b 	bl	8007eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10f      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d108      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	4252      	negs	r2, r2
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	0018      	movs	r0, r3
 8007c32:	f00b f9d5 	bl	8012fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d10f      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	2280      	movs	r2, #128	; 0x80
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	d108      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2281      	movs	r2, #129	; 0x81
 8007c58:	4252      	negs	r2, r2
 8007c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f000 facc 	bl	80081fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	2380      	movs	r3, #128	; 0x80
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	401a      	ands	r2, r3
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d10e      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	4013      	ands	r3, r2
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d107      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <HAL_TIM_IRQHandler+0x260>)
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0018      	movs	r0, r3
 8007c92:	f000 fabb 	bl	800820c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2240      	movs	r2, #64	; 0x40
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d10f      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	2240      	movs	r2, #64	; 0x40
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d108      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2241      	movs	r2, #65	; 0x41
 8007cb8:	4252      	negs	r2, r2
 8007cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f902 	bl	8007ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d10f      	bne.n	8007cf2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d108      	bne.n	8007cf2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2221      	movs	r2, #33	; 0x21
 8007ce6:	4252      	negs	r2, r2
 8007ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f000 fa7d 	bl	80081ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	b002      	add	sp, #8
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	fffffeff 	.word	0xfffffeff

08007d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	223c      	movs	r2, #60	; 0x3c
 8007d0e:	5c9b      	ldrb	r3, [r3, r2]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_ConfigClockSource+0x18>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e0b7      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x188>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	223c      	movs	r2, #60	; 0x3c
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	223d      	movs	r2, #61	; 0x3d
 8007d24:	2102      	movs	r1, #2
 8007d26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a57      	ldr	r2, [pc, #348]	; (8007e90 <HAL_TIM_ConfigClockSource+0x190>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a56      	ldr	r2, [pc, #344]	; (8007e94 <HAL_TIM_ConfigClockSource+0x194>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2280      	movs	r2, #128	; 0x80
 8007d4e:	0192      	lsls	r2, r2, #6
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d040      	beq.n	8007dd6 <HAL_TIM_ConfigClockSource+0xd6>
 8007d54:	2280      	movs	r2, #128	; 0x80
 8007d56:	0192      	lsls	r2, r2, #6
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d900      	bls.n	8007d5e <HAL_TIM_ConfigClockSource+0x5e>
 8007d5c:	e088      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	0152      	lsls	r2, r2, #5
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d100      	bne.n	8007d68 <HAL_TIM_ConfigClockSource+0x68>
 8007d66:	e085      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
 8007d68:	2280      	movs	r2, #128	; 0x80
 8007d6a:	0152      	lsls	r2, r2, #5
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d900      	bls.n	8007d72 <HAL_TIM_ConfigClockSource+0x72>
 8007d70:	e07e      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d72:	2b70      	cmp	r3, #112	; 0x70
 8007d74:	d018      	beq.n	8007da8 <HAL_TIM_ConfigClockSource+0xa8>
 8007d76:	d900      	bls.n	8007d7a <HAL_TIM_ConfigClockSource+0x7a>
 8007d78:	e07a      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d7a:	2b60      	cmp	r3, #96	; 0x60
 8007d7c:	d04f      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0x11e>
 8007d7e:	d900      	bls.n	8007d82 <HAL_TIM_ConfigClockSource+0x82>
 8007d80:	e076      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d82:	2b50      	cmp	r3, #80	; 0x50
 8007d84:	d03b      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0xfe>
 8007d86:	d900      	bls.n	8007d8a <HAL_TIM_ConfigClockSource+0x8a>
 8007d88:	e072      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d057      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x13e>
 8007d8e:	d900      	bls.n	8007d92 <HAL_TIM_ConfigClockSource+0x92>
 8007d90:	e06e      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d92:	2b30      	cmp	r3, #48	; 0x30
 8007d94:	d063      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007d96:	d86b      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d060      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007d9c:	d868      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d05d      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d05b      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007da6:	e063      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6899      	ldr	r1, [r3, #8]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f000 f98a 	bl	80080d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2277      	movs	r2, #119	; 0x77
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	609a      	str	r2, [r3, #8]
      break;
 8007dd4:	e04f      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6899      	ldr	r1, [r3, #8]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f000 f973 	bl	80080d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2180      	movs	r1, #128	; 0x80
 8007df6:	01c9      	lsls	r1, r1, #7
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
      break;
 8007dfc:	e03b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	f000 f8e4 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2150      	movs	r1, #80	; 0x50
 8007e16:	0018      	movs	r0, r3
 8007e18:	f000 f93e 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 8007e1c:	e02b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	f000 f902 	bl	8008034 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2160      	movs	r1, #96	; 0x60
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 f92e 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e01b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	f000 f8c4 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	0018      	movs	r0, r3
 8007e58:	f000 f91e 	bl	8008098 <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e00b      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	0019      	movs	r1, r3
 8007e68:	0010      	movs	r0, r2
 8007e6a:	f000 f915 	bl	8008098 <TIM_ITRx_SetConfig>
        break;
 8007e6e:	e002      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007e70:	46c0      	nop			; (mov r8, r8)
 8007e72:	e000      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007e74:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	223d      	movs	r2, #61	; 0x3d
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	223c      	movs	r2, #60	; 0x3c
 8007e82:	2100      	movs	r1, #0
 8007e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	ffceff88 	.word	0xffceff88
 8007e94:	ffff00ff 	.word	0xffff00ff

08007e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b002      	add	sp, #8
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ec0:	46c0      	nop			; (mov r8, r8)
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b002      	add	sp, #8
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ed0:	46c0      	nop			; (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b002      	add	sp, #8
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a34      	ldr	r2, [pc, #208]	; (8007fbc <TIM_Base_SetConfig+0xe4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d008      	beq.n	8007f02 <TIM_Base_SetConfig+0x2a>
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	2380      	movs	r3, #128	; 0x80
 8007ef4:	05db      	lsls	r3, r3, #23
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d003      	beq.n	8007f02 <TIM_Base_SetConfig+0x2a>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a30      	ldr	r2, [pc, #192]	; (8007fc0 <TIM_Base_SetConfig+0xe8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2270      	movs	r2, #112	; 0x70
 8007f06:	4393      	bics	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a29      	ldr	r2, [pc, #164]	; (8007fbc <TIM_Base_SetConfig+0xe4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d018      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	2380      	movs	r3, #128	; 0x80
 8007f20:	05db      	lsls	r3, r3, #23
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d013      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a25      	ldr	r2, [pc, #148]	; (8007fc0 <TIM_Base_SetConfig+0xe8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00f      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a24      	ldr	r2, [pc, #144]	; (8007fc4 <TIM_Base_SetConfig+0xec>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00b      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a23      	ldr	r2, [pc, #140]	; (8007fc8 <TIM_Base_SetConfig+0xf0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <TIM_Base_SetConfig+0xf4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_Base_SetConfig+0x76>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a21      	ldr	r2, [pc, #132]	; (8007fd0 <TIM_Base_SetConfig+0xf8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d108      	bne.n	8007f60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a20      	ldr	r2, [pc, #128]	; (8007fd4 <TIM_Base_SetConfig+0xfc>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2280      	movs	r2, #128	; 0x80
 8007f64:	4393      	bics	r3, r2
 8007f66:	001a      	movs	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <TIM_Base_SetConfig+0xe4>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xce>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a0d      	ldr	r2, [pc, #52]	; (8007fc8 <TIM_Base_SetConfig+0xf0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_Base_SetConfig+0xce>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <TIM_Base_SetConfig+0xf4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_Base_SetConfig+0xce>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <TIM_Base_SetConfig+0xf8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d103      	bne.n	8007fae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	615a      	str	r2, [r3, #20]
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b004      	add	sp, #16
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40002000 	.word	0x40002000
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400
 8007fd0:	40014800 	.word	0x40014800
 8007fd4:	fffffcff 	.word	0xfffffcff

08007fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4393      	bics	r3, r2
 8007ff2:	001a      	movs	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	22f0      	movs	r2, #240	; 0xf0
 8008002:	4393      	bics	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	220a      	movs	r2, #10
 8008014:	4393      	bics	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b006      	add	sp, #24
 8008032:	bd80      	pop	{r7, pc}

08008034 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	2210      	movs	r2, #16
 8008046:	4393      	bics	r3, r2
 8008048:	001a      	movs	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	4a0d      	ldr	r2, [pc, #52]	; (8008094 <TIM_TI2_ConfigInputStage+0x60>)
 800805e:	4013      	ands	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	031b      	lsls	r3, r3, #12
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	22a0      	movs	r2, #160	; 0xa0
 8008070:	4393      	bics	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	b006      	add	sp, #24
 8008090:	bd80      	pop	{r7, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	ffff0fff 	.word	0xffff0fff

08008098 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4a08      	ldr	r2, [pc, #32]	; (80080cc <TIM_ITRx_SetConfig+0x34>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	2207      	movs	r2, #7
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	609a      	str	r2, [r3, #8]
}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b004      	add	sp, #16
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	ffcfff8f 	.word	0xffcfff8f

080080d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4a09      	ldr	r2, [pc, #36]	; (800810c <TIM_ETR_SetConfig+0x3c>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	021a      	lsls	r2, r3, #8
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	46bd      	mov	sp, r7
 8008108:	b006      	add	sp, #24
 800810a:	bd80      	pop	{r7, pc}
 800810c:	ffff00ff 	.word	0xffff00ff

08008110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	223c      	movs	r2, #60	; 0x3c
 800811e:	5c9b      	ldrb	r3, [r3, r2]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008124:	2302      	movs	r3, #2
 8008126:	e055      	b.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	223c      	movs	r2, #60	; 0x3c
 800812c:	2101      	movs	r1, #1
 800812e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	223d      	movs	r2, #61	; 0x3d
 8008134:	2102      	movs	r1, #2
 8008136:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a23      	ldr	r2, [pc, #140]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d108      	bne.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008156:	4013      	ands	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2270      	movs	r2, #112	; 0x70
 8008168:	4393      	bics	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a16      	ldr	r2, [pc, #88]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00f      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	05db      	lsls	r3, r3, #23
 8008190:	429a      	cmp	r2, r3
 8008192:	d009      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10c      	bne.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	4393      	bics	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	223d      	movs	r2, #61	; 0x3d
 80081c6:	2101      	movs	r1, #1
 80081c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	223c      	movs	r2, #60	; 0x3c
 80081ce:	2100      	movs	r1, #0
 80081d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b004      	add	sp, #16
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	ff0fffff 	.word	0xff0fffff
 80081e4:	40000400 	.word	0x40000400
 80081e8:	40014000 	.word	0x40014000

080081ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081f4:	46c0      	nop			; (mov r8, r8)
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b002      	add	sp, #8
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008204:	46c0      	nop			; (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	b002      	add	sp, #8
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	46bd      	mov	sp, r7
 8008218:	b002      	add	sp, #8
 800821a:	bd80      	pop	{r7, pc}

0800821c <DEV_SPI_WriteByte>:
#include "Display_Config/DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	0002      	movs	r2, r0
 8008224:	1dfb      	adds	r3, r7, #7
 8008226:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8008228:	23fa      	movs	r3, #250	; 0xfa
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	1df9      	adds	r1, r7, #7
 800822e:	4804      	ldr	r0, [pc, #16]	; (8008240 <DEV_SPI_WriteByte+0x24>)
 8008230:	2201      	movs	r2, #1
 8008232:	f7ff f8b1 	bl	8007398 <HAL_SPI_Transmit>
}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	b002      	add	sp, #8
 800823c:	bd80      	pop	{r7, pc}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	2000079c 	.word	0x2000079c

08008244 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	0099      	lsls	r1, r3, #2
 800824c:	23a0      	movs	r3, #160	; 0xa0
 800824e:	05db      	lsls	r3, r3, #23
 8008250:	2200      	movs	r2, #0
 8008252:	0018      	movs	r0, r3
 8008254:	f7fc fe9f 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	0059      	lsls	r1, r3, #1
 800825c:	23a0      	movs	r3, #160	; 0xa0
 800825e:	05db      	lsls	r3, r3, #23
 8008260:	2200      	movs	r2, #0
 8008262:	0018      	movs	r0, r3
 8008264:	f7fc fe97 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008268:	2380      	movs	r3, #128	; 0x80
 800826a:	00d9      	lsls	r1, r3, #3
 800826c:	23a0      	movs	r3, #160	; 0xa0
 800826e:	05db      	lsls	r3, r3, #23
 8008270:	2201      	movs	r2, #1
 8008272:	0018      	movs	r0, r3
 8008274:	f7fc fe8f 	bl	8004f96 <HAL_GPIO_WritePin>
		return 0;
 8008278:	2300      	movs	r3, #0
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008284:	2380      	movs	r3, #128	; 0x80
 8008286:	00d9      	lsls	r1, r3, #3
 8008288:	23a0      	movs	r3, #160	; 0xa0
 800828a:	05db      	lsls	r3, r3, #23
 800828c:	2201      	movs	r2, #1
 800828e:	0018      	movs	r0, r3
 8008290:	f7fc fe81 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8008294:	20c8      	movs	r0, #200	; 0xc8
 8008296:	f7fb f937 	bl	8003508 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800829a:	2380      	movs	r3, #128	; 0x80
 800829c:	00d9      	lsls	r1, r3, #3
 800829e:	23a0      	movs	r3, #160	; 0xa0
 80082a0:	05db      	lsls	r3, r3, #23
 80082a2:	2200      	movs	r2, #0
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7fc fe76 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80082aa:	2002      	movs	r0, #2
 80082ac:	f7fb f92c 	bl	8003508 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80082b0:	2380      	movs	r3, #128	; 0x80
 80082b2:	00d9      	lsls	r1, r3, #3
 80082b4:	23a0      	movs	r3, #160	; 0xa0
 80082b6:	05db      	lsls	r3, r3, #23
 80082b8:	2201      	movs	r2, #1
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7fc fe6b 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80082c0:	20c8      	movs	r0, #200	; 0xc8
 80082c2:	f7fb f921 	bl	8003508 <HAL_Delay>
}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	0002      	movs	r2, r0
 80082d4:	1dfb      	adds	r3, r7, #7
 80082d6:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	0099      	lsls	r1, r3, #2
 80082dc:	23a0      	movs	r3, #160	; 0xa0
 80082de:	05db      	lsls	r3, r3, #23
 80082e0:	2200      	movs	r2, #0
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7fc fe57 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	0059      	lsls	r1, r3, #1
 80082ec:	23a0      	movs	r3, #160	; 0xa0
 80082ee:	05db      	lsls	r3, r3, #23
 80082f0:	2200      	movs	r2, #0
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7fc fe4f 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80082f8:	1dfb      	adds	r3, r7, #7
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7ff ff8d 	bl	800821c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8008302:	2380      	movs	r3, #128	; 0x80
 8008304:	0059      	lsls	r1, r3, #1
 8008306:	23a0      	movs	r3, #160	; 0xa0
 8008308:	05db      	lsls	r3, r3, #23
 800830a:	2201      	movs	r2, #1
 800830c:	0018      	movs	r0, r3
 800830e:	f7fc fe42 	bl	8004f96 <HAL_GPIO_WritePin>
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b002      	add	sp, #8
 8008318:	bd80      	pop	{r7, pc}

0800831a <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	0002      	movs	r2, r0
 8008322:	1dfb      	adds	r3, r7, #7
 8008324:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	0099      	lsls	r1, r3, #2
 800832a:	23a0      	movs	r3, #160	; 0xa0
 800832c:	05db      	lsls	r3, r3, #23
 800832e:	2201      	movs	r2, #1
 8008330:	0018      	movs	r0, r3
 8008332:	f7fc fe30 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8008336:	2380      	movs	r3, #128	; 0x80
 8008338:	0059      	lsls	r1, r3, #1
 800833a:	23a0      	movs	r3, #160	; 0xa0
 800833c:	05db      	lsls	r3, r3, #23
 800833e:	2200      	movs	r2, #0
 8008340:	0018      	movs	r0, r3
 8008342:	f7fc fe28 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8008346:	1dfb      	adds	r3, r7, #7
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	0018      	movs	r0, r3
 800834c:	f7ff ff66 	bl	800821c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8008350:	2380      	movs	r3, #128	; 0x80
 8008352:	0059      	lsls	r1, r3, #1
 8008354:	23a0      	movs	r3, #160	; 0xa0
 8008356:	05db      	lsls	r3, r3, #23
 8008358:	2201      	movs	r2, #1
 800835a:	0018      	movs	r0, r3
 800835c:	f7fc fe1b 	bl	8004f96 <HAL_GPIO_WritePin>
}
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	b002      	add	sp, #8
 8008366:	bd80      	pop	{r7, pc}

08008368 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <EPD_1IN54_V2_ReadBusy+0x38>)
 800836e:	0018      	movs	r0, r3
 8008370:	f00b f820 	bl	80133b4 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8008374:	e002      	b.n	800837c <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8008376:	2064      	movs	r0, #100	; 0x64
 8008378:	f7fb f8c6 	bl	8003508 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	23a0      	movs	r3, #160	; 0xa0
 8008382:	05db      	lsls	r3, r3, #23
 8008384:	0011      	movs	r1, r2
 8008386:	0018      	movs	r0, r3
 8008388:	f7fc fde8 	bl	8004f5c <HAL_GPIO_ReadPin>
 800838c:	0003      	movs	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d0f1      	beq.n	8008376 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8008392:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8008394:	0018      	movs	r0, r3
 8008396:	f00b f80d 	bl	80133b4 <puts>
}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08015e38 	.word	0x08015e38
 80083a4:	08015e50 	.word	0x08015e50

080083a8 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 80083ac:	2022      	movs	r0, #34	; 0x22
 80083ae:	f7ff ff8d 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 80083b2:	20f7      	movs	r0, #247	; 0xf7
 80083b4:	f7ff ffb1 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80083b8:	2020      	movs	r0, #32
 80083ba:	f7ff ff87 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80083be:	f7ff ffd3 	bl	8008368 <EPD_1IN54_V2_ReadBusy>
}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 80083cc:	2022      	movs	r0, #34	; 0x22
 80083ce:	f7ff ff7d 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 80083d2:	20ff      	movs	r0, #255	; 0xff
 80083d4:	f7ff ffa1 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80083d8:	2020      	movs	r0, #32
 80083da:	f7ff ff77 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80083de:	f7ff ffc3 	bl	8008368 <EPD_1IN54_V2_ReadBusy>
}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 80083ec:	f7ff ff48 	bl	8008280 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 80083f0:	f7ff ffba 	bl	8008368 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 80083f4:	2012      	movs	r0, #18
 80083f6:	f7ff ff69 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80083fa:	f7ff ffb5 	bl	8008368 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 80083fe:	2001      	movs	r0, #1
 8008400:	f7ff ff64 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 8008404:	20c7      	movs	r0, #199	; 0xc7
 8008406:	f7ff ff88 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800840a:	2000      	movs	r0, #0
 800840c:	f7ff ff85 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 8008410:	2001      	movs	r0, #1
 8008412:	f7ff ff82 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 8008416:	2011      	movs	r0, #17
 8008418:	f7ff ff58 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800841c:	2001      	movs	r0, #1
 800841e:	f7ff ff7c 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 8008422:	2044      	movs	r0, #68	; 0x44
 8008424:	f7ff ff52 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8008428:	2000      	movs	r0, #0
 800842a:	f7ff ff76 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 800842e:	2018      	movs	r0, #24
 8008430:	f7ff ff73 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8008434:	2045      	movs	r0, #69	; 0x45
 8008436:	f7ff ff49 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 800843a:	20c7      	movs	r0, #199	; 0xc7
 800843c:	f7ff ff6d 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008440:	2000      	movs	r0, #0
 8008442:	f7ff ff6a 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008446:	2000      	movs	r0, #0
 8008448:	f7ff ff67 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800844c:	2000      	movs	r0, #0
 800844e:	f7ff ff64 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8008452:	203c      	movs	r0, #60	; 0x3c
 8008454:	f7ff ff3a 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8008458:	2001      	movs	r0, #1
 800845a:	f7ff ff5e 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800845e:	2018      	movs	r0, #24
 8008460:	f7ff ff34 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8008464:	2080      	movs	r0, #128	; 0x80
 8008466:	f7ff ff58 	bl	800831a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800846a:	2022      	movs	r0, #34	; 0x22
 800846c:	f7ff ff2e 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 8008470:	20b1      	movs	r0, #177	; 0xb1
 8008472:	f7ff ff52 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8008476:	2020      	movs	r0, #32
 8008478:	f7ff ff28 	bl	80082cc <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 800847c:	204e      	movs	r0, #78	; 0x4e
 800847e:	f7ff ff25 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8008482:	2000      	movs	r0, #0
 8008484:	f7ff ff49 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8008488:	204f      	movs	r0, #79	; 0x4f
 800848a:	f7ff ff1f 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800848e:	20c7      	movs	r0, #199	; 0xc7
 8008490:	f7ff ff43 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008494:	2000      	movs	r0, #0
 8008496:	f7ff ff40 	bl	800831a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 800849a:	f7ff ff65 	bl	8008368 <EPD_1IN54_V2_ReadBusy>
}
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80084aa:	1cbb      	adds	r3, r7, #2
 80084ac:	2219      	movs	r2, #25
 80084ae:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80084b0:	003b      	movs	r3, r7
 80084b2:	22c8      	movs	r2, #200	; 0xc8
 80084b4:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 80084b6:	2024      	movs	r0, #36	; 0x24
 80084b8:	f7ff ff08 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80084bc:	1dbb      	adds	r3, r7, #6
 80084be:	2200      	movs	r2, #0
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	e016      	b.n	80084f2 <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 80084c4:	1d3b      	adds	r3, r7, #4
 80084c6:	2200      	movs	r2, #0
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	e007      	b.n	80084dc <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 80084cc:	20ff      	movs	r0, #255	; 0xff
 80084ce:	f7ff ff24 	bl	800831a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80084d2:	1d3b      	adds	r3, r7, #4
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	1d3b      	adds	r3, r7, #4
 80084d8:	3201      	adds	r2, #1
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	1d3a      	adds	r2, r7, #4
 80084de:	1cbb      	adds	r3, r7, #2
 80084e0:	8812      	ldrh	r2, [r2, #0]
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3f1      	bcc.n	80084cc <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 80084e8:	1dbb      	adds	r3, r7, #6
 80084ea:	881a      	ldrh	r2, [r3, #0]
 80084ec:	1dbb      	adds	r3, r7, #6
 80084ee:	3201      	adds	r2, #1
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	1dba      	adds	r2, r7, #6
 80084f4:	003b      	movs	r3, r7
 80084f6:	8812      	ldrh	r2, [r2, #0]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d3e2      	bcc.n	80084c4 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80084fe:	f7ff ff53 	bl	80083a8 <EPD_1IN54_V2_TurnOnDisplay>
}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	46bd      	mov	sp, r7
 8008506:	b002      	add	sp, #8
 8008508:	bd80      	pop	{r7, pc}

0800850a <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800850a:	b590      	push	{r4, r7, lr}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8008512:	2312      	movs	r3, #18
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	2219      	movs	r2, #25
 8008518:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800851a:	2310      	movs	r3, #16
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	22c8      	movs	r2, #200	; 0xc8
 8008520:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8008526:	2024      	movs	r0, #36	; 0x24
 8008528:	f7ff fed0 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800852c:	2316      	movs	r3, #22
 800852e:	18fb      	adds	r3, r7, r3
 8008530:	2200      	movs	r2, #0
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	e02a      	b.n	800858c <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8008536:	2314      	movs	r3, #20
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	2200      	movs	r2, #0
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	e017      	b.n	8008570 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 8008540:	2414      	movs	r4, #20
 8008542:	193b      	adds	r3, r7, r4
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	2316      	movs	r3, #22
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	2112      	movs	r1, #18
 800854e:	1879      	adds	r1, r7, r1
 8008550:	8809      	ldrh	r1, [r1, #0]
 8008552:	434b      	muls	r3, r1
 8008554:	18d3      	adds	r3, r2, r3
 8008556:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	18d3      	adds	r3, r2, r3
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	0018      	movs	r0, r3
 8008562:	f7ff feda 	bl	800831a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008566:	193b      	adds	r3, r7, r4
 8008568:	881a      	ldrh	r2, [r3, #0]
 800856a:	193b      	adds	r3, r7, r4
 800856c:	3201      	adds	r2, #1
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	2314      	movs	r3, #20
 8008572:	18fa      	adds	r2, r7, r3
 8008574:	2312      	movs	r3, #18
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	8812      	ldrh	r2, [r2, #0]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3df      	bcc.n	8008540 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8008580:	2116      	movs	r1, #22
 8008582:	187b      	adds	r3, r7, r1
 8008584:	881a      	ldrh	r2, [r3, #0]
 8008586:	187b      	adds	r3, r7, r1
 8008588:	3201      	adds	r2, #1
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	2316      	movs	r3, #22
 800858e:	18fa      	adds	r2, r7, r3
 8008590:	2310      	movs	r3, #16
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d3cc      	bcc.n	8008536 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800859c:	f7ff ff04 	bl	80083a8 <EPD_1IN54_V2_TurnOnDisplay>
}
 80085a0:	46c0      	nop			; (mov r8, r8)
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b007      	add	sp, #28
 80085a6:	bd90      	pop	{r4, r7, pc}

080085a8 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80085b0:	230e      	movs	r3, #14
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	2219      	movs	r2, #25
 80085b6:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80085b8:	230c      	movs	r3, #12
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	22c8      	movs	r2, #200	; 0xc8
 80085be:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 80085c4:	2024      	movs	r0, #36	; 0x24
 80085c6:	f7ff fe81 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80085ca:	2316      	movs	r3, #22
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	2200      	movs	r2, #0
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e02a      	b.n	800862a <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80085d4:	2314      	movs	r3, #20
 80085d6:	18fb      	adds	r3, r7, r3
 80085d8:	2200      	movs	r2, #0
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	e017      	b.n	800860e <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 80085de:	2414      	movs	r4, #20
 80085e0:	193b      	adds	r3, r7, r4
 80085e2:	881a      	ldrh	r2, [r3, #0]
 80085e4:	2316      	movs	r3, #22
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	210e      	movs	r1, #14
 80085ec:	1879      	adds	r1, r7, r1
 80085ee:	8809      	ldrh	r1, [r1, #0]
 80085f0:	434b      	muls	r3, r1
 80085f2:	18d3      	adds	r3, r2, r3
 80085f4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff fe8b 	bl	800831a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008604:	193b      	adds	r3, r7, r4
 8008606:	881a      	ldrh	r2, [r3, #0]
 8008608:	193b      	adds	r3, r7, r4
 800860a:	3201      	adds	r2, #1
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	2314      	movs	r3, #20
 8008610:	18fa      	adds	r2, r7, r3
 8008612:	230e      	movs	r3, #14
 8008614:	18fb      	adds	r3, r7, r3
 8008616:	8812      	ldrh	r2, [r2, #0]
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d3df      	bcc.n	80085de <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 800861e:	2116      	movs	r1, #22
 8008620:	187b      	adds	r3, r7, r1
 8008622:	881a      	ldrh	r2, [r3, #0]
 8008624:	187b      	adds	r3, r7, r1
 8008626:	3201      	adds	r2, #1
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	2316      	movs	r3, #22
 800862c:	18fa      	adds	r2, r7, r3
 800862e:	230c      	movs	r3, #12
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	8812      	ldrh	r2, [r2, #0]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d3cc      	bcc.n	80085d4 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800863a:	2026      	movs	r0, #38	; 0x26
 800863c:	f7ff fe46 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8008640:	2312      	movs	r3, #18
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	2200      	movs	r2, #0
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e02a      	b.n	80086a0 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 800864a:	2310      	movs	r3, #16
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	2200      	movs	r2, #0
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	e017      	b.n	8008684 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8008654:	2410      	movs	r4, #16
 8008656:	193b      	adds	r3, r7, r4
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	2312      	movs	r3, #18
 800865c:	18fb      	adds	r3, r7, r3
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	210e      	movs	r1, #14
 8008662:	1879      	adds	r1, r7, r1
 8008664:	8809      	ldrh	r1, [r1, #0]
 8008666:	434b      	muls	r3, r1
 8008668:	18d3      	adds	r3, r2, r3
 800866a:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	18d3      	adds	r3, r2, r3
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	0018      	movs	r0, r3
 8008676:	f7ff fe50 	bl	800831a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800867a:	193b      	adds	r3, r7, r4
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	193b      	adds	r3, r7, r4
 8008680:	3201      	adds	r2, #1
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	2310      	movs	r3, #16
 8008686:	18fa      	adds	r2, r7, r3
 8008688:	230e      	movs	r3, #14
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	8812      	ldrh	r2, [r2, #0]
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d3df      	bcc.n	8008654 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8008694:	2112      	movs	r1, #18
 8008696:	187b      	adds	r3, r7, r1
 8008698:	881a      	ldrh	r2, [r3, #0]
 800869a:	187b      	adds	r3, r7, r1
 800869c:	3201      	adds	r2, #1
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	2312      	movs	r3, #18
 80086a2:	18fa      	adds	r2, r7, r3
 80086a4:	230c      	movs	r3, #12
 80086a6:	18fb      	adds	r3, r7, r3
 80086a8:	8812      	ldrh	r2, [r2, #0]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3cc      	bcc.n	800864a <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 80086b0:	f7ff fe8a 	bl	80083c8 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 80086b4:	46c0      	nop			; (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b007      	add	sp, #28
 80086ba:	bd90      	pop	{r4, r7, pc}

080086bc <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80086c4:	2312      	movs	r3, #18
 80086c6:	18fb      	adds	r3, r7, r3
 80086c8:	2219      	movs	r2, #25
 80086ca:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80086cc:	2310      	movs	r3, #16
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	22c8      	movs	r2, #200	; 0xc8
 80086d2:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	00d9      	lsls	r1, r3, #3
 80086d8:	23a0      	movs	r3, #160	; 0xa0
 80086da:	05db      	lsls	r3, r3, #23
 80086dc:	2200      	movs	r2, #0
 80086de:	0018      	movs	r0, r3
 80086e0:	f7fc fc59 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 80086e4:	200a      	movs	r0, #10
 80086e6:	f7fa ff0f 	bl	8003508 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80086ea:	2380      	movs	r3, #128	; 0x80
 80086ec:	00d9      	lsls	r1, r3, #3
 80086ee:	23a0      	movs	r3, #160	; 0xa0
 80086f0:	05db      	lsls	r3, r3, #23
 80086f2:	2201      	movs	r2, #1
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7fc fc4e 	bl	8004f96 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80086fa:	200a      	movs	r0, #10
 80086fc:	f7fa ff04 	bl	8003508 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8008700:	203c      	movs	r0, #60	; 0x3c
 8008702:	f7ff fde3 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8008706:	2080      	movs	r0, #128	; 0x80
 8008708:	f7ff fe07 	bl	800831a <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8008710:	2024      	movs	r0, #36	; 0x24
 8008712:	f7ff fddb 	bl	80082cc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8008716:	2316      	movs	r3, #22
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	2200      	movs	r2, #0
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e02a      	b.n	8008776 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 8008720:	2314      	movs	r3, #20
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	2200      	movs	r2, #0
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e017      	b.n	800875a <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 800872a:	2414      	movs	r4, #20
 800872c:	193b      	adds	r3, r7, r4
 800872e:	881a      	ldrh	r2, [r3, #0]
 8008730:	2316      	movs	r3, #22
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	2112      	movs	r1, #18
 8008738:	1879      	adds	r1, r7, r1
 800873a:	8809      	ldrh	r1, [r1, #0]
 800873c:	434b      	muls	r3, r1
 800873e:	18d3      	adds	r3, r2, r3
 8008740:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	0018      	movs	r0, r3
 800874c:	f7ff fde5 	bl	800831a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008750:	193b      	adds	r3, r7, r4
 8008752:	881a      	ldrh	r2, [r3, #0]
 8008754:	193b      	adds	r3, r7, r4
 8008756:	3201      	adds	r2, #1
 8008758:	801a      	strh	r2, [r3, #0]
 800875a:	2314      	movs	r3, #20
 800875c:	18fa      	adds	r2, r7, r3
 800875e:	2312      	movs	r3, #18
 8008760:	18fb      	adds	r3, r7, r3
 8008762:	8812      	ldrh	r2, [r2, #0]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d3df      	bcc.n	800872a <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 800876a:	2116      	movs	r1, #22
 800876c:	187b      	adds	r3, r7, r1
 800876e:	881a      	ldrh	r2, [r3, #0]
 8008770:	187b      	adds	r3, r7, r1
 8008772:	3201      	adds	r2, #1
 8008774:	801a      	strh	r2, [r3, #0]
 8008776:	2316      	movs	r3, #22
 8008778:	18fa      	adds	r2, r7, r3
 800877a:	2310      	movs	r3, #16
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	8812      	ldrh	r2, [r2, #0]
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d3cc      	bcc.n	8008720 <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8008786:	f7ff fe1f 	bl	80083c8 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	b007      	add	sp, #28
 8008790:	bd90      	pop	{r4, r7, pc}
	...

08008794 <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	000c      	movs	r4, r1
 800879e:	0010      	movs	r0, r2
 80087a0:	0019      	movs	r1, r3
 80087a2:	250a      	movs	r5, #10
 80087a4:	197b      	adds	r3, r7, r5
 80087a6:	1c22      	adds	r2, r4, #0
 80087a8:	801a      	strh	r2, [r3, #0]
 80087aa:	2408      	movs	r4, #8
 80087ac:	193b      	adds	r3, r7, r4
 80087ae:	1c02      	adds	r2, r0, #0
 80087b0:	801a      	strh	r2, [r3, #0]
 80087b2:	1dbb      	adds	r3, r7, #6
 80087b4:	1c0a      	adds	r2, r1, #0
 80087b6:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 80087b8:	4b2c      	ldr	r3, [pc, #176]	; (800886c <Paint_NewImage+0xd8>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 80087be:	4b2b      	ldr	r3, [pc, #172]	; (800886c <Paint_NewImage+0xd8>)
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 80087c4:	4b29      	ldr	r3, [pc, #164]	; (800886c <Paint_NewImage+0xd8>)
 80087c6:	0029      	movs	r1, r5
 80087c8:	187a      	adds	r2, r7, r1
 80087ca:	8812      	ldrh	r2, [r2, #0]
 80087cc:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 80087ce:	4b27      	ldr	r3, [pc, #156]	; (800886c <Paint_NewImage+0xd8>)
 80087d0:	193a      	adds	r2, r7, r4
 80087d2:	8812      	ldrh	r2, [r2, #0]
 80087d4:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 80087d6:	4a25      	ldr	r2, [pc, #148]	; (800886c <Paint_NewImage+0xd8>)
 80087d8:	2320      	movs	r3, #32
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <Paint_NewImage+0xd8>)
 80087e2:	2202      	movs	r2, #2
 80087e4:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 80087e6:	187b      	adds	r3, r7, r1
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	2207      	movs	r2, #7
 80087ec:	4013      	ands	r3, r2
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <Paint_NewImage+0x6a>
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	e006      	b.n	800880c <Paint_NewImage+0x78>
 80087fe:	230a      	movs	r3, #10
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	08db      	lsrs	r3, r3, #3
 8008806:	b29b      	uxth	r3, r3
 8008808:	3301      	adds	r3, #1
 800880a:	b29b      	uxth	r3, r3
 800880c:	4a17      	ldr	r2, [pc, #92]	; (800886c <Paint_NewImage+0xd8>)
 800880e:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 8008810:	4b16      	ldr	r3, [pc, #88]	; (800886c <Paint_NewImage+0xd8>)
 8008812:	2208      	movs	r2, #8
 8008814:	18ba      	adds	r2, r7, r2
 8008816:	8812      	ldrh	r2, [r2, #0]
 8008818:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 800881a:	4b14      	ldr	r3, [pc, #80]	; (800886c <Paint_NewImage+0xd8>)
 800881c:	1dba      	adds	r2, r7, #6
 800881e:	8812      	ldrh	r2, [r2, #0]
 8008820:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <Paint_NewImage+0xd8>)
 8008824:	2200      	movs	r2, #0
 8008826:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8008828:	1dbb      	adds	r3, r7, #6
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <Paint_NewImage+0xa4>
 8008830:	1dbb      	adds	r3, r7, #6
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	2bb4      	cmp	r3, #180	; 0xb4
 8008836:	d10a      	bne.n	800884e <Paint_NewImage+0xba>
		Paint.Width = Width;
 8008838:	4b0c      	ldr	r3, [pc, #48]	; (800886c <Paint_NewImage+0xd8>)
 800883a:	220a      	movs	r2, #10
 800883c:	18ba      	adds	r2, r7, r2
 800883e:	8812      	ldrh	r2, [r2, #0]
 8008840:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <Paint_NewImage+0xd8>)
 8008844:	2208      	movs	r2, #8
 8008846:	18ba      	adds	r2, r7, r2
 8008848:	8812      	ldrh	r2, [r2, #0]
 800884a:	80da      	strh	r2, [r3, #6]
 800884c:	e00a      	b.n	8008864 <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 800884e:	4b07      	ldr	r3, [pc, #28]	; (800886c <Paint_NewImage+0xd8>)
 8008850:	2208      	movs	r2, #8
 8008852:	18ba      	adds	r2, r7, r2
 8008854:	8812      	ldrh	r2, [r2, #0]
 8008856:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <Paint_NewImage+0xd8>)
 800885a:	220a      	movs	r2, #10
 800885c:	18ba      	adds	r2, r7, r2
 800885e:	8812      	ldrh	r2, [r2, #0]
 8008860:	80da      	strh	r2, [r3, #6]
	}
}
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	46c0      	nop			; (mov r8, r8)
 8008866:	46bd      	mov	sp, r7
 8008868:	b004      	add	sp, #16
 800886a:	bdb0      	pop	{r4, r5, r7, pc}
 800886c:	200001d8 	.word	0x200001d8

08008870 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8008878:	4b03      	ldr	r3, [pc, #12]	; (8008888 <Paint_SelectImage+0x18>)
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	46bd      	mov	sp, r7
 8008882:	b002      	add	sp, #8
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	200001d8 	.word	0x200001d8

0800888c <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b08b      	sub	sp, #44	; 0x2c
 8008890:	af00      	add	r7, sp, #0
 8008892:	0004      	movs	r4, r0
 8008894:	0008      	movs	r0, r1
 8008896:	0011      	movs	r1, r2
 8008898:	1dbb      	adds	r3, r7, #6
 800889a:	1c22      	adds	r2, r4, #0
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	1d3b      	adds	r3, r7, #4
 80088a0:	1c02      	adds	r2, r0, #0
 80088a2:	801a      	strh	r2, [r3, #0]
 80088a4:	1cbb      	adds	r3, r7, #2
 80088a6:	1c0a      	adds	r2, r1, #0
 80088a8:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80088aa:	4bc6      	ldr	r3, [pc, #792]	; (8008bc4 <Paint_SetPixel+0x338>)
 80088ac:	889b      	ldrh	r3, [r3, #4]
 80088ae:	1dba      	adds	r2, r7, #6
 80088b0:	8812      	ldrh	r2, [r2, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d805      	bhi.n	80088c2 <Paint_SetPixel+0x36>
 80088b6:	4bc3      	ldr	r3, [pc, #780]	; (8008bc4 <Paint_SetPixel+0x338>)
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	1d3a      	adds	r2, r7, #4
 80088bc:	8812      	ldrh	r2, [r2, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d904      	bls.n	80088cc <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 80088c2:	4bc1      	ldr	r3, [pc, #772]	; (8008bc8 <Paint_SetPixel+0x33c>)
 80088c4:	0018      	movs	r0, r3
 80088c6:	f00a fd75 	bl	80133b4 <puts>
		return;
 80088ca:	e180      	b.n	8008bce <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 80088cc:	4bbd      	ldr	r3, [pc, #756]	; (8008bc4 <Paint_SetPixel+0x338>)
 80088ce:	89db      	ldrh	r3, [r3, #14]
 80088d0:	2287      	movs	r2, #135	; 0x87
 80088d2:	0052      	lsls	r2, r2, #1
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d03d      	beq.n	8008954 <Paint_SetPixel+0xc8>
 80088d8:	2287      	movs	r2, #135	; 0x87
 80088da:	0052      	lsls	r2, r2, #1
 80088dc:	4293      	cmp	r3, r2
 80088de:	dd00      	ble.n	80088e2 <Paint_SetPixel+0x56>
 80088e0:	e16e      	b.n	8008bc0 <Paint_SetPixel+0x334>
 80088e2:	2bb4      	cmp	r3, #180	; 0xb4
 80088e4:	d021      	beq.n	800892a <Paint_SetPixel+0x9e>
 80088e6:	dd00      	ble.n	80088ea <Paint_SetPixel+0x5e>
 80088e8:	e16a      	b.n	8008bc0 <Paint_SetPixel+0x334>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <Paint_SetPixel+0x68>
 80088ee:	2b5a      	cmp	r3, #90	; 0x5a
 80088f0:	d00b      	beq.n	800890a <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80088f2:	e165      	b.n	8008bc0 <Paint_SetPixel+0x334>
		X = Xpoint;
 80088f4:	2326      	movs	r3, #38	; 0x26
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	1dba      	adds	r2, r7, #6
 80088fa:	8812      	ldrh	r2, [r2, #0]
 80088fc:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 80088fe:	2324      	movs	r3, #36	; 0x24
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	1d3a      	adds	r2, r7, #4
 8008904:	8812      	ldrh	r2, [r2, #0]
 8008906:	801a      	strh	r2, [r3, #0]
		break;
 8008908:	e034      	b.n	8008974 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 800890a:	4bae      	ldr	r3, [pc, #696]	; (8008bc4 <Paint_SetPixel+0x338>)
 800890c:	891a      	ldrh	r2, [r3, #8]
 800890e:	1d3b      	adds	r3, r7, #4
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	b29a      	uxth	r2, r3
 8008916:	2326      	movs	r3, #38	; 0x26
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	3a01      	subs	r2, #1
 800891c:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 800891e:	2324      	movs	r3, #36	; 0x24
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	1dba      	adds	r2, r7, #6
 8008924:	8812      	ldrh	r2, [r2, #0]
 8008926:	801a      	strh	r2, [r3, #0]
		break;
 8008928:	e024      	b.n	8008974 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 800892a:	4ba6      	ldr	r3, [pc, #664]	; (8008bc4 <Paint_SetPixel+0x338>)
 800892c:	891a      	ldrh	r2, [r3, #8]
 800892e:	1dbb      	adds	r3, r7, #6
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	b29a      	uxth	r2, r3
 8008936:	2326      	movs	r3, #38	; 0x26
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	3a01      	subs	r2, #1
 800893c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 800893e:	4ba1      	ldr	r3, [pc, #644]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008940:	895a      	ldrh	r2, [r3, #10]
 8008942:	1d3b      	adds	r3, r7, #4
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	b29a      	uxth	r2, r3
 800894a:	2324      	movs	r3, #36	; 0x24
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	3a01      	subs	r2, #1
 8008950:	801a      	strh	r2, [r3, #0]
		break;
 8008952:	e00f      	b.n	8008974 <Paint_SetPixel+0xe8>
		X = Ypoint;
 8008954:	2326      	movs	r3, #38	; 0x26
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	1d3a      	adds	r2, r7, #4
 800895a:	8812      	ldrh	r2, [r2, #0]
 800895c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 800895e:	4b99      	ldr	r3, [pc, #612]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008960:	895a      	ldrh	r2, [r3, #10]
 8008962:	1dbb      	adds	r3, r7, #6
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	b29a      	uxth	r2, r3
 800896a:	2324      	movs	r3, #36	; 0x24
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	3a01      	subs	r2, #1
 8008970:	801a      	strh	r2, [r3, #0]
		break;
 8008972:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8008974:	4b93      	ldr	r3, [pc, #588]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008976:	8a1b      	ldrh	r3, [r3, #16]
 8008978:	2b03      	cmp	r3, #3
 800897a:	d020      	beq.n	80089be <Paint_SetPixel+0x132>
 800897c:	dd00      	ble.n	8008980 <Paint_SetPixel+0xf4>
 800897e:	e125      	b.n	8008bcc <Paint_SetPixel+0x340>
 8008980:	2b02      	cmp	r3, #2
 8008982:	d011      	beq.n	80089a8 <Paint_SetPixel+0x11c>
 8008984:	dd00      	ble.n	8008988 <Paint_SetPixel+0xfc>
 8008986:	e121      	b.n	8008bcc <Paint_SetPixel+0x340>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02d      	beq.n	80089e8 <Paint_SetPixel+0x15c>
 800898c:	2b01      	cmp	r3, #1
 800898e:	d000      	beq.n	8008992 <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 8008990:	e11c      	b.n	8008bcc <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 8008992:	4b8c      	ldr	r3, [pc, #560]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008994:	891a      	ldrh	r2, [r3, #8]
 8008996:	2126      	movs	r1, #38	; 0x26
 8008998:	187b      	adds	r3, r7, r1
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	b29a      	uxth	r2, r3
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	3a01      	subs	r2, #1
 80089a4:	801a      	strh	r2, [r3, #0]
		break;
 80089a6:	e020      	b.n	80089ea <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 80089a8:	4b86      	ldr	r3, [pc, #536]	; (8008bc4 <Paint_SetPixel+0x338>)
 80089aa:	895a      	ldrh	r2, [r3, #10]
 80089ac:	2124      	movs	r1, #36	; 0x24
 80089ae:	187b      	adds	r3, r7, r1
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	3a01      	subs	r2, #1
 80089ba:	801a      	strh	r2, [r3, #0]
		break;
 80089bc:	e015      	b.n	80089ea <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 80089be:	4b81      	ldr	r3, [pc, #516]	; (8008bc4 <Paint_SetPixel+0x338>)
 80089c0:	891a      	ldrh	r2, [r3, #8]
 80089c2:	2126      	movs	r1, #38	; 0x26
 80089c4:	187b      	adds	r3, r7, r1
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	187b      	adds	r3, r7, r1
 80089ce:	3a01      	subs	r2, #1
 80089d0:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 80089d2:	4b7c      	ldr	r3, [pc, #496]	; (8008bc4 <Paint_SetPixel+0x338>)
 80089d4:	895a      	ldrh	r2, [r3, #10]
 80089d6:	2124      	movs	r1, #36	; 0x24
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29a      	uxth	r2, r3
 80089e0:	187b      	adds	r3, r7, r1
 80089e2:	3a01      	subs	r2, #1
 80089e4:	801a      	strh	r2, [r3, #0]
		break;
 80089e6:	e000      	b.n	80089ea <Paint_SetPixel+0x15e>
		break;
 80089e8:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 80089ea:	4b76      	ldr	r3, [pc, #472]	; (8008bc4 <Paint_SetPixel+0x338>)
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	2226      	movs	r2, #38	; 0x26
 80089f0:	18ba      	adds	r2, r7, r2
 80089f2:	8812      	ldrh	r2, [r2, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d806      	bhi.n	8008a06 <Paint_SetPixel+0x17a>
 80089f8:	4b72      	ldr	r3, [pc, #456]	; (8008bc4 <Paint_SetPixel+0x338>)
 80089fa:	895b      	ldrh	r3, [r3, #10]
 80089fc:	2224      	movs	r2, #36	; 0x24
 80089fe:	18ba      	adds	r2, r7, r2
 8008a00:	8812      	ldrh	r2, [r2, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d904      	bls.n	8008a10 <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 8008a06:	4b70      	ldr	r3, [pc, #448]	; (8008bc8 <Paint_SetPixel+0x33c>)
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f00a fcd3 	bl	80133b4 <puts>
		return;
 8008a0e:	e0de      	b.n	8008bce <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 8008a10:	4b6c      	ldr	r3, [pc, #432]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008a12:	8adb      	ldrh	r3, [r3, #22]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d145      	bne.n	8008aa4 <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8008a18:	2026      	movs	r0, #38	; 0x26
 8008a1a:	183b      	adds	r3, r7, r0
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	08db      	lsrs	r3, r3, #3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	0019      	movs	r1, r3
 8008a24:	2324      	movs	r3, #36	; 0x24
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	4a66      	ldr	r2, [pc, #408]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008a2c:	8a52      	ldrh	r2, [r2, #18]
 8008a2e:	4353      	muls	r3, r2
 8008a30:	18cb      	adds	r3, r1, r3
 8008a32:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 8008a34:	4b63      	ldr	r3, [pc, #396]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	18d2      	adds	r2, r2, r3
 8008a3c:	210f      	movs	r1, #15
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 8008a44:	1cbb      	adds	r3, r7, #2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d115      	bne.n	8008a78 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8008a4c:	183b      	adds	r3, r7, r0
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	2207      	movs	r2, #7
 8008a52:	4013      	ands	r3, r2
 8008a54:	2280      	movs	r2, #128	; 0x80
 8008a56:	411a      	asrs	r2, r3
 8008a58:	0013      	movs	r3, r2
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	43db      	mvns	r3, r3
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	187a      	adds	r2, r7, r1
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	b252      	sxtb	r2, r2
 8008a66:	4013      	ands	r3, r2
 8008a68:	b259      	sxtb	r1, r3
 8008a6a:	4b56      	ldr	r3, [pc, #344]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	b2ca      	uxtb	r2, r1
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e0aa      	b.n	8008bce <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8008a78:	2326      	movs	r3, #38	; 0x26
 8008a7a:	18fb      	adds	r3, r7, r3
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	2207      	movs	r2, #7
 8008a80:	4013      	ands	r3, r2
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	411a      	asrs	r2, r3
 8008a86:	0013      	movs	r3, r2
 8008a88:	b25a      	sxtb	r2, r3
 8008a8a:	230f      	movs	r3, #15
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	b259      	sxtb	r1, r3
 8008a96:	4b4b      	ldr	r3, [pc, #300]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	18d3      	adds	r3, r2, r3
 8008a9e:	b2ca      	uxtb	r2, r1
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e094      	b.n	8008bce <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 8008aa4:	4b47      	ldr	r3, [pc, #284]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008aa6:	8adb      	ldrh	r3, [r3, #22]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d145      	bne.n	8008b38 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8008aac:	2426      	movs	r4, #38	; 0x26
 8008aae:	193b      	adds	r3, r7, r4
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	089b      	lsrs	r3, r3, #2
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	0019      	movs	r1, r3
 8008ab8:	2324      	movs	r3, #36	; 0x24
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	4a41      	ldr	r2, [pc, #260]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008ac0:	8a52      	ldrh	r2, [r2, #18]
 8008ac2:	4353      	muls	r3, r2
 8008ac4:	18cb      	adds	r3, r1, r3
 8008ac6:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 8008ac8:	1cbb      	adds	r3, r7, #2
 8008aca:	1cba      	adds	r2, r7, #2
 8008acc:	8812      	ldrh	r2, [r2, #0]
 8008ace:	2103      	movs	r1, #3
 8008ad0:	400a      	ands	r2, r1
 8008ad2:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 8008ad4:	4b3b      	ldr	r3, [pc, #236]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	18d2      	adds	r2, r2, r3
 8008adc:	2017      	movs	r0, #23
 8008ade:	183b      	adds	r3, r7, r0
 8008ae0:	7812      	ldrb	r2, [r2, #0]
 8008ae2:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8008ae4:	0021      	movs	r1, r4
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	2203      	movs	r2, #3
 8008aec:	4013      	ands	r3, r2
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	22c0      	movs	r2, #192	; 0xc0
 8008af2:	411a      	asrs	r2, r3
 8008af4:	0013      	movs	r3, r2
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	43db      	mvns	r3, r3
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	183a      	adds	r2, r7, r0
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	b252      	sxtb	r2, r2
 8008b02:	4013      	ands	r3, r2
 8008b04:	b25a      	sxtb	r2, r3
 8008b06:	183b      	adds	r3, r7, r0
 8008b08:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 8008b0a:	1cbb      	adds	r3, r7, #2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	019a      	lsls	r2, r3, #6
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	2103      	movs	r1, #3
 8008b16:	400b      	ands	r3, r1
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	411a      	asrs	r2, r3
 8008b1c:	0013      	movs	r3, r2
 8008b1e:	b25a      	sxtb	r2, r3
 8008b20:	183b      	adds	r3, r7, r0
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	b25b      	sxtb	r3, r3
 8008b26:	4313      	orrs	r3, r2
 8008b28:	b259      	sxtb	r1, r3
 8008b2a:	4b26      	ldr	r3, [pc, #152]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	b2ca      	uxtb	r2, r1
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e04a      	b.n	8008bce <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 8008b38:	4b22      	ldr	r3, [pc, #136]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008b3a:	8adb      	ldrh	r3, [r3, #22]
 8008b3c:	2b07      	cmp	r3, #7
 8008b3e:	d146      	bne.n	8008bce <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8008b40:	2426      	movs	r4, #38	; 0x26
 8008b42:	193b      	adds	r3, r7, r4
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	2324      	movs	r3, #36	; 0x24
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	4a1c      	ldr	r2, [pc, #112]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008b54:	8a52      	ldrh	r2, [r2, #18]
 8008b56:	4353      	muls	r3, r2
 8008b58:	18cb      	adds	r3, r1, r3
 8008b5a:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8008b5c:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	18d2      	adds	r2, r2, r3
 8008b64:	201f      	movs	r0, #31
 8008b66:	183b      	adds	r3, r7, r0
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 8008b6c:	0021      	movs	r1, r4
 8008b6e:	187b      	adds	r3, r7, r1
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	2201      	movs	r2, #1
 8008b74:	4013      	ands	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	22f0      	movs	r2, #240	; 0xf0
 8008b7a:	411a      	asrs	r2, r3
 8008b7c:	0013      	movs	r3, r2
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	43db      	mvns	r3, r3
 8008b82:	b25b      	sxtb	r3, r3
 8008b84:	183a      	adds	r2, r7, r0
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	b252      	sxtb	r2, r2
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	b25a      	sxtb	r2, r3
 8008b8e:	183b      	adds	r3, r7, r0
 8008b90:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8008b92:	1cbb      	adds	r3, r7, #2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	011a      	lsls	r2, r3, #4
 8008b98:	187b      	adds	r3, r7, r1
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	400b      	ands	r3, r1
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	411a      	asrs	r2, r3
 8008ba4:	0013      	movs	r3, r2
 8008ba6:	b25a      	sxtb	r2, r3
 8008ba8:	183b      	adds	r3, r7, r0
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b259      	sxtb	r1, r3
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <Paint_SetPixel+0x338>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	18d3      	adds	r3, r2, r3
 8008bba:	b2ca      	uxtb	r2, r1
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e006      	b.n	8008bce <Paint_SetPixel+0x342>
		return;
 8008bc0:	46c0      	nop			; (mov r8, r8)
 8008bc2:	e004      	b.n	8008bce <Paint_SetPixel+0x342>
 8008bc4:	200001d8 	.word	0x200001d8
 8008bc8:	08015f98 	.word	0x08015f98
		return;
 8008bcc:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	b00b      	add	sp, #44	; 0x2c
 8008bd2:	bd90      	pop	{r4, r7, pc}

08008bd4 <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	0002      	movs	r2, r0
 8008bdc:	1dbb      	adds	r3, r7, #6
 8008bde:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 8008be0:	4b42      	ldr	r3, [pc, #264]	; (8008cec <Paint_Clear+0x118>)
 8008be2:	8adb      	ldrh	r3, [r3, #22]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d003      	beq.n	8008bf0 <Paint_Clear+0x1c>
 8008be8:	4b40      	ldr	r3, [pc, #256]	; (8008cec <Paint_Clear+0x118>)
 8008bea:	8adb      	ldrh	r3, [r3, #22]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d136      	bne.n	8008c5e <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008bf0:	2316      	movs	r3, #22
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	801a      	strh	r2, [r3, #0]
 8008bf8:	e029      	b.n	8008c4e <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008bfa:	2314      	movs	r3, #20
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	2200      	movs	r2, #0
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e017      	b.n	8008c34 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008c04:	2014      	movs	r0, #20
 8008c06:	183b      	adds	r3, r7, r0
 8008c08:	881a      	ldrh	r2, [r3, #0]
 8008c0a:	2316      	movs	r3, #22
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	4936      	ldr	r1, [pc, #216]	; (8008cec <Paint_Clear+0x118>)
 8008c12:	8a49      	ldrh	r1, [r1, #18]
 8008c14:	434b      	muls	r3, r1
 8008c16:	18d3      	adds	r3, r2, r3
 8008c18:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8008c1a:	4b34      	ldr	r3, [pc, #208]	; (8008cec <Paint_Clear+0x118>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	18d3      	adds	r3, r2, r3
 8008c22:	1dba      	adds	r2, r7, #6
 8008c24:	8812      	ldrh	r2, [r2, #0]
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008c2a:	183b      	adds	r3, r7, r0
 8008c2c:	881a      	ldrh	r2, [r3, #0]
 8008c2e:	183b      	adds	r3, r7, r0
 8008c30:	3201      	adds	r2, #1
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <Paint_Clear+0x118>)
 8008c36:	8a5b      	ldrh	r3, [r3, #18]
 8008c38:	2214      	movs	r2, #20
 8008c3a:	18ba      	adds	r2, r7, r2
 8008c3c:	8812      	ldrh	r2, [r2, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3e0      	bcc.n	8008c04 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008c42:	2116      	movs	r1, #22
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	881a      	ldrh	r2, [r3, #0]
 8008c48:	187b      	adds	r3, r7, r1
 8008c4a:	3201      	adds	r2, #1
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	4b27      	ldr	r3, [pc, #156]	; (8008cec <Paint_Clear+0x118>)
 8008c50:	8a9b      	ldrh	r3, [r3, #20]
 8008c52:	2216      	movs	r2, #22
 8008c54:	18ba      	adds	r2, r7, r2
 8008c56:	8812      	ldrh	r2, [r2, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d3ce      	bcc.n	8008bfa <Paint_Clear+0x26>
 8008c5c:	e041      	b.n	8008ce2 <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 8008c5e:	4b23      	ldr	r3, [pc, #140]	; (8008cec <Paint_Clear+0x118>)
 8008c60:	8adb      	ldrh	r3, [r3, #22]
 8008c62:	2b07      	cmp	r3, #7
 8008c64:	d13d      	bne.n	8008ce2 <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008c66:	2312      	movs	r3, #18
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	801a      	strh	r2, [r3, #0]
 8008c6e:	e030      	b.n	8008cd2 <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008c70:	2310      	movs	r3, #16
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2200      	movs	r2, #0
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	e01e      	b.n	8008cb8 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	183b      	adds	r3, r7, r0
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	2312      	movs	r3, #18
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	4919      	ldr	r1, [pc, #100]	; (8008cec <Paint_Clear+0x118>)
 8008c88:	8a49      	ldrh	r1, [r1, #18]
 8008c8a:	434b      	muls	r3, r1
 8008c8c:	18d3      	adds	r3, r2, r3
 8008c8e:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 8008c90:	1dbb      	adds	r3, r7, #6
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	b25a      	sxtb	r2, r3
 8008c98:	1dbb      	adds	r3, r7, #6
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b25b      	sxtb	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b259      	sxtb	r1, r3
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <Paint_Clear+0x118>)
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	b2ca      	uxtb	r2, r1
 8008cac:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008cae:	183b      	adds	r3, r7, r0
 8008cb0:	881a      	ldrh	r2, [r3, #0]
 8008cb2:	183b      	adds	r3, r7, r0
 8008cb4:	3201      	adds	r2, #1
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	; (8008cec <Paint_Clear+0x118>)
 8008cba:	8a5b      	ldrh	r3, [r3, #18]
 8008cbc:	2210      	movs	r2, #16
 8008cbe:	18ba      	adds	r2, r7, r2
 8008cc0:	8812      	ldrh	r2, [r2, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d3d9      	bcc.n	8008c7a <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008cc6:	2112      	movs	r1, #18
 8008cc8:	187b      	adds	r3, r7, r1
 8008cca:	881a      	ldrh	r2, [r3, #0]
 8008ccc:	187b      	adds	r3, r7, r1
 8008cce:	3201      	adds	r2, #1
 8008cd0:	801a      	strh	r2, [r3, #0]
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <Paint_Clear+0x118>)
 8008cd4:	8a9b      	ldrh	r3, [r3, #20]
 8008cd6:	2212      	movs	r2, #18
 8008cd8:	18ba      	adds	r2, r7, r2
 8008cda:	8812      	ldrh	r2, [r2, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3c7      	bcc.n	8008c70 <Paint_Clear+0x9c>
			}
		}
	}
}
 8008ce0:	e7ff      	b.n	8008ce2 <Paint_Clear+0x10e>
 8008ce2:	46c0      	nop			; (mov r8, r8)
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	b006      	add	sp, #24
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	200001d8 	.word	0x200001d8

08008cf0 <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	0005      	movs	r5, r0
 8008cf8:	000c      	movs	r4, r1
 8008cfa:	0010      	movs	r0, r2
 8008cfc:	0019      	movs	r1, r3
 8008cfe:	1dbb      	adds	r3, r7, #6
 8008d00:	1c2a      	adds	r2, r5, #0
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	1c22      	adds	r2, r4, #0
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	1cbb      	adds	r3, r7, #2
 8008d0c:	1c02      	adds	r2, r0, #0
 8008d0e:	801a      	strh	r2, [r3, #0]
 8008d10:	1c7b      	adds	r3, r7, #1
 8008d12:	1c0a      	adds	r2, r1, #0
 8008d14:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008d16:	4b67      	ldr	r3, [pc, #412]	; (8008eb4 <Paint_DrawPoint+0x1c4>)
 8008d18:	889b      	ldrh	r3, [r3, #4]
 8008d1a:	1dba      	adds	r2, r7, #6
 8008d1c:	8812      	ldrh	r2, [r2, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d805      	bhi.n	8008d2e <Paint_DrawPoint+0x3e>
 8008d22:	4b64      	ldr	r3, [pc, #400]	; (8008eb4 <Paint_DrawPoint+0x1c4>)
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	1d3a      	adds	r2, r7, #4
 8008d28:	8812      	ldrh	r2, [r2, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d916      	bls.n	8008d5c <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008d2e:	4b62      	ldr	r3, [pc, #392]	; (8008eb8 <Paint_DrawPoint+0x1c8>)
 8008d30:	0018      	movs	r0, r3
 8008d32:	f00a fb3f 	bl	80133b4 <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8008d36:	1dbb      	adds	r3, r7, #6
 8008d38:	8819      	ldrh	r1, [r3, #0]
 8008d3a:	4b5e      	ldr	r3, [pc, #376]	; (8008eb4 <Paint_DrawPoint+0x1c4>)
 8008d3c:	889b      	ldrh	r3, [r3, #4]
 8008d3e:	001a      	movs	r2, r3
 8008d40:	4b5e      	ldr	r3, [pc, #376]	; (8008ebc <Paint_DrawPoint+0x1cc>)
 8008d42:	0018      	movs	r0, r3
 8008d44:	f00a faaa 	bl	801329c <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	8819      	ldrh	r1, [r3, #0]
 8008d4c:	4b59      	ldr	r3, [pc, #356]	; (8008eb4 <Paint_DrawPoint+0x1c4>)
 8008d4e:	88db      	ldrh	r3, [r3, #6]
 8008d50:	001a      	movs	r2, r3
 8008d52:	4b5b      	ldr	r3, [pc, #364]	; (8008ec0 <Paint_DrawPoint+0x1d0>)
 8008d54:	0018      	movs	r0, r3
 8008d56:	f00a faa1 	bl	801329c <iprintf>
		return;
 8008d5a:	e0a8      	b.n	8008eae <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d161      	bne.n	8008e2a <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008d66:	230e      	movs	r3, #14
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	801a      	strh	r2, [r3, #0]
 8008d6e:	e051      	b.n	8008e14 <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008d70:	230c      	movs	r3, #12
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	2200      	movs	r2, #0
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e039      	b.n	8008dee <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 8008d7a:	1dbb      	adds	r3, r7, #6
 8008d7c:	881a      	ldrh	r2, [r3, #0]
 8008d7e:	200e      	movs	r0, #14
 8008d80:	183b      	adds	r3, r7, r0
 8008d82:	2100      	movs	r1, #0
 8008d84:	5e5b      	ldrsh	r3, [r3, r1]
 8008d86:	18d2      	adds	r2, r2, r3
 8008d88:	1c7b      	adds	r3, r7, #1
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	d438      	bmi.n	8008e02 <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 8008d90:	1d3b      	adds	r3, r7, #4
 8008d92:	881a      	ldrh	r2, [r3, #0]
 8008d94:	210c      	movs	r1, #12
 8008d96:	187b      	adds	r3, r7, r1
 8008d98:	2400      	movs	r4, #0
 8008d9a:	5f1b      	ldrsh	r3, [r3, r4]
 8008d9c:	18d2      	adds	r2, r2, r3
 8008d9e:	1c7b      	adds	r3, r7, #1
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	d42d      	bmi.n	8008e02 <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008da6:	183b      	adds	r3, r7, r0
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	1dbb      	adds	r3, r7, #6
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	18d3      	adds	r3, r2, r3
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	1c7b      	adds	r3, r7, #1
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 8008dbc:	000c      	movs	r4, r1
 8008dbe:	187b      	adds	r3, r7, r1
 8008dc0:	881a      	ldrh	r2, [r3, #0]
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	18d3      	adds	r3, r2, r3
 8008dc8:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008dca:	1c7b      	adds	r3, r7, #1
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	b299      	uxth	r1, r3
 8008dd4:	1cbb      	adds	r3, r7, #2
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	001a      	movs	r2, r3
 8008dda:	f7ff fd57 	bl	800888c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008dde:	193b      	adds	r3, r7, r4
 8008de0:	2200      	movs	r2, #0
 8008de2:	5e9b      	ldrsh	r3, [r3, r2]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3301      	adds	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	193b      	adds	r3, r7, r4
 8008dec:	801a      	strh	r2, [r3, #0]
 8008dee:	230c      	movs	r3, #12
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	2200      	movs	r2, #0
 8008df4:	5e9a      	ldrsh	r2, [r3, r2]
 8008df6:	1c7b      	adds	r3, r7, #1
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	dbbb      	blt.n	8008d7a <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008e02:	210e      	movs	r1, #14
 8008e04:	187b      	adds	r3, r7, r1
 8008e06:	2200      	movs	r2, #0
 8008e08:	5e9b      	ldrsh	r3, [r3, r2]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	230e      	movs	r3, #14
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	2200      	movs	r2, #0
 8008e1a:	5e9a      	ldrsh	r2, [r3, r2]
 8008e1c:	1c7b      	adds	r3, r7, #1
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	3b01      	subs	r3, #1
 8008e24:	429a      	cmp	r2, r3
 8008e26:	dba3      	blt.n	8008d70 <Paint_DrawPoint+0x80>
 8008e28:	e041      	b.n	8008eae <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008e2a:	230e      	movs	r3, #14
 8008e2c:	18fb      	adds	r3, r7, r3
 8008e2e:	2200      	movs	r2, #0
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e034      	b.n	8008e9e <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008e34:	230c      	movs	r3, #12
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	2200      	movs	r2, #0
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	e01e      	b.n	8008e7c <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 8008e3e:	230e      	movs	r3, #14
 8008e40:	18fb      	adds	r3, r7, r3
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	1dbb      	adds	r3, r7, #6
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	18d3      	adds	r3, r2, r3
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b298      	uxth	r0, r3
 8008e50:	240c      	movs	r4, #12
 8008e52:	193b      	adds	r3, r7, r4
 8008e54:	881a      	ldrh	r2, [r3, #0]
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	18d3      	adds	r3, r2, r3
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b299      	uxth	r1, r3
 8008e62:	1cbb      	adds	r3, r7, #2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	001a      	movs	r2, r3
 8008e68:	f7ff fd10 	bl	800888c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008e6c:	193b      	adds	r3, r7, r4
 8008e6e:	2200      	movs	r2, #0
 8008e70:	5e9b      	ldrsh	r3, [r3, r2]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3301      	adds	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	193b      	adds	r3, r7, r4
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	2200      	movs	r2, #0
 8008e82:	5e9a      	ldrsh	r2, [r3, r2]
 8008e84:	1c7b      	adds	r3, r7, #1
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	dbd8      	blt.n	8008e3e <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008e8c:	210e      	movs	r1, #14
 8008e8e:	187b      	adds	r3, r7, r1
 8008e90:	2200      	movs	r2, #0
 8008e92:	5e9b      	ldrsh	r3, [r3, r2]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3301      	adds	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	230e      	movs	r3, #14
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	5e9a      	ldrsh	r2, [r3, r2]
 8008ea6:	1c7b      	adds	r3, r7, #1
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	dbc2      	blt.n	8008e34 <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b004      	add	sp, #16
 8008eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8008eb4:	200001d8 	.word	0x200001d8
 8008eb8:	08015fc0 	.word	0x08015fc0
 8008ebc:	08016000 	.word	0x08016000
 8008ec0:	08016024 	.word	0x08016024

08008ec4 <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008ec4:	b5b0      	push	{r4, r5, r7, lr}
 8008ec6:	b08c      	sub	sp, #48	; 0x30
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	0005      	movs	r5, r0
 8008ecc:	000c      	movs	r4, r1
 8008ece:	0010      	movs	r0, r2
 8008ed0:	0019      	movs	r1, r3
 8008ed2:	1dbb      	adds	r3, r7, #6
 8008ed4:	1c2a      	adds	r2, r5, #0
 8008ed6:	801a      	strh	r2, [r3, #0]
 8008ed8:	1d3b      	adds	r3, r7, #4
 8008eda:	1c22      	adds	r2, r4, #0
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	1cbb      	adds	r3, r7, #2
 8008ee0:	1c02      	adds	r2, r0, #0
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	003b      	movs	r3, r7
 8008ee6:	1c0a      	adds	r2, r1, #0
 8008ee8:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8008eea:	4b63      	ldr	r3, [pc, #396]	; (8009078 <Paint_DrawLine+0x1b4>)
 8008eec:	889b      	ldrh	r3, [r3, #4]
 8008eee:	1dba      	adds	r2, r7, #6
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d811      	bhi.n	8008f1a <Paint_DrawLine+0x56>
 8008ef6:	4b60      	ldr	r3, [pc, #384]	; (8009078 <Paint_DrawLine+0x1b4>)
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	1d3a      	adds	r2, r7, #4
 8008efc:	8812      	ldrh	r2, [r2, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d80b      	bhi.n	8008f1a <Paint_DrawLine+0x56>
 8008f02:	4b5d      	ldr	r3, [pc, #372]	; (8009078 <Paint_DrawLine+0x1b4>)
 8008f04:	889b      	ldrh	r3, [r3, #4]
 8008f06:	1cba      	adds	r2, r7, #2
 8008f08:	8812      	ldrh	r2, [r2, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d805      	bhi.n	8008f1a <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 8008f0e:	4b5a      	ldr	r3, [pc, #360]	; (8009078 <Paint_DrawLine+0x1b4>)
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	003a      	movs	r2, r7
 8008f14:	8812      	ldrh	r2, [r2, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d904      	bls.n	8008f24 <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008f1a:	4b58      	ldr	r3, [pc, #352]	; (800907c <Paint_DrawLine+0x1b8>)
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f00a fa49 	bl	80133b4 <puts>
		return;
 8008f22:	e0a5      	b.n	8009070 <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 8008f24:	2326      	movs	r3, #38	; 0x26
 8008f26:	18fb      	adds	r3, r7, r3
 8008f28:	1dba      	adds	r2, r7, #6
 8008f2a:	8812      	ldrh	r2, [r2, #0]
 8008f2c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 8008f2e:	2324      	movs	r3, #36	; 0x24
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	1d3a      	adds	r2, r7, #4
 8008f34:	8812      	ldrh	r2, [r2, #0]
 8008f36:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008f38:	1cbb      	adds	r3, r7, #2
 8008f3a:	881a      	ldrh	r2, [r3, #0]
 8008f3c:	1dbb      	adds	r3, r7, #6
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	17da      	asrs	r2, r3, #31
 8008f44:	189b      	adds	r3, r3, r2
 8008f46:	4053      	eors	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008f4a:	003b      	movs	r3, r7
 8008f4c:	881a      	ldrh	r2, [r3, #0]
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	17da      	asrs	r2, r3, #31
 8008f56:	189b      	adds	r3, r3, r2
 8008f58:	4053      	eors	r3, r2
 8008f5a:	425b      	negs	r3, r3
 8008f5c:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 8008f5e:	1dba      	adds	r2, r7, #6
 8008f60:	1cbb      	adds	r3, r7, #2
 8008f62:	8812      	ldrh	r2, [r2, #0]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d201      	bcs.n	8008f6e <Paint_DrawLine+0xaa>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e001      	b.n	8008f72 <Paint_DrawLine+0xae>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	425b      	negs	r3, r3
 8008f72:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8008f74:	1d3a      	adds	r2, r7, #4
 8008f76:	003b      	movs	r3, r7
 8008f78:	8812      	ldrh	r2, [r2, #0]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d201      	bcs.n	8008f84 <Paint_DrawLine+0xc0>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e001      	b.n	8008f88 <Paint_DrawLine+0xc4>
 8008f84:	2301      	movs	r3, #1
 8008f86:	425b      	negs	r3, r3
 8008f88:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	18d3      	adds	r3, r2, r3
 8008f90:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 8008f92:	231f      	movs	r3, #31
 8008f94:	18fb      	adds	r3, r7, r3
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 8008f9a:	241f      	movs	r4, #31
 8008f9c:	193b      	adds	r3, r7, r4
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	193b      	adds	r3, r7, r4
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d11c      	bne.n	8008fea <Paint_DrawLine+0x126>
 8008fb0:	193b      	adds	r3, r7, r4
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2103      	movs	r1, #3
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f7f7 f936 	bl	8000228 <__aeabi_uidivmod>
 8008fbc:	000b      	movs	r3, r1
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 8008fc4:	233c      	movs	r3, #60	; 0x3c
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	2324      	movs	r3, #36	; 0x24
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	8819      	ldrh	r1, [r3, #0]
 8008fd0:	2326      	movs	r3, #38	; 0x26
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	8818      	ldrh	r0, [r3, #0]
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	0013      	movs	r3, r2
 8008fdc:	22ff      	movs	r2, #255	; 0xff
 8008fde:	f7ff fe87 	bl	8008cf0 <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 8008fe2:	193b      	adds	r3, r7, r4
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e010      	b.n	800900c <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008fea:	233c      	movs	r3, #60	; 0x3c
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	781c      	ldrb	r4, [r3, #0]
 8008ff0:	2338      	movs	r3, #56	; 0x38
 8008ff2:	18fb      	adds	r3, r7, r3
 8008ff4:	881a      	ldrh	r2, [r3, #0]
 8008ff6:	2324      	movs	r3, #36	; 0x24
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	8819      	ldrh	r1, [r3, #0]
 8008ffc:	2326      	movs	r3, #38	; 0x26
 8008ffe:	18fb      	adds	r3, r7, r3
 8009000:	8818      	ldrh	r0, [r3, #0]
 8009002:	2301      	movs	r3, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	0023      	movs	r3, r4
 8009008:	f7ff fe72 	bl	8008cf0 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	429a      	cmp	r2, r3
 8009014:	dc11      	bgt.n	800903a <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 8009016:	2026      	movs	r0, #38	; 0x26
 8009018:	183a      	adds	r2, r7, r0
 800901a:	1cbb      	adds	r3, r7, #2
 800901c:	8812      	ldrh	r2, [r2, #0]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d022      	beq.n	800906a <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 8009024:	6a3a      	ldr	r2, [r7, #32]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	18d3      	adds	r3, r2, r3
 800902a:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	b299      	uxth	r1, r3
 8009030:	183b      	adds	r3, r7, r0
 8009032:	183a      	adds	r2, r7, r0
 8009034:	8812      	ldrh	r2, [r2, #0]
 8009036:	188a      	adds	r2, r1, r2
 8009038:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	429a      	cmp	r2, r3
 8009042:	dbaa      	blt.n	8008f9a <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 8009044:	2024      	movs	r0, #36	; 0x24
 8009046:	183a      	adds	r2, r7, r0
 8009048:	003b      	movs	r3, r7
 800904a:	8812      	ldrh	r2, [r2, #0]
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d00d      	beq.n	800906e <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 8009052:	6a3a      	ldr	r2, [r7, #32]
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	18d3      	adds	r3, r2, r3
 8009058:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	b299      	uxth	r1, r3
 800905e:	183b      	adds	r3, r7, r0
 8009060:	183a      	adds	r2, r7, r0
 8009062:	8812      	ldrh	r2, [r2, #0]
 8009064:	188a      	adds	r2, r1, r2
 8009066:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8009068:	e797      	b.n	8008f9a <Paint_DrawLine+0xd6>
				break;
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	e000      	b.n	8009070 <Paint_DrawLine+0x1ac>
				break;
 800906e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8009070:	46bd      	mov	sp, r7
 8009072:	b00a      	add	sp, #40	; 0x28
 8009074:	bdb0      	pop	{r4, r5, r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	200001d8 	.word	0x200001d8
 800907c:	0801604c 	.word	0x0801604c

08009080 <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	46ce      	mov	lr, r9
 8009084:	4647      	mov	r7, r8
 8009086:	b580      	push	{r7, lr}
 8009088:	b089      	sub	sp, #36	; 0x24
 800908a:	af04      	add	r7, sp, #16
 800908c:	0004      	movs	r4, r0
 800908e:	0008      	movs	r0, r1
 8009090:	60ba      	str	r2, [r7, #8]
 8009092:	0019      	movs	r1, r3
 8009094:	260e      	movs	r6, #14
 8009096:	19bb      	adds	r3, r7, r6
 8009098:	1c22      	adds	r2, r4, #0
 800909a:	801a      	strh	r2, [r3, #0]
 800909c:	230c      	movs	r3, #12
 800909e:	18fb      	adds	r3, r7, r3
 80090a0:	1c02      	adds	r2, r0, #0
 80090a2:	801a      	strh	r2, [r3, #0]
 80090a4:	1dbb      	adds	r3, r7, #6
 80090a6:	1c0a      	adds	r2, r1, #0
 80090a8:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80090aa:	68b8      	ldr	r0, [r7, #8]
 80090ac:	f7f9 ffc6 	bl	800303c <__aeabi_f2d>
 80090b0:	0002      	movs	r2, r0
 80090b2:	000b      	movs	r3, r1
 80090b4:	0010      	movs	r0, r2
 80090b6:	0019      	movs	r1, r3
 80090b8:	f00b fa2e 	bl	8014518 <cos>
 80090bc:	0004      	movs	r4, r0
 80090be:	000d      	movs	r5, r1
 80090c0:	2130      	movs	r1, #48	; 0x30
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7f9 ff62 	bl	8002f90 <__aeabi_i2d>
 80090cc:	0002      	movs	r2, r0
 80090ce:	000b      	movs	r3, r1
 80090d0:	0020      	movs	r0, r4
 80090d2:	0029      	movs	r1, r5
 80090d4:	f7f9 f90a 	bl	80022ec <__aeabi_dmul>
 80090d8:	0002      	movs	r2, r0
 80090da:	000b      	movs	r3, r1
 80090dc:	0014      	movs	r4, r2
 80090de:	001d      	movs	r5, r3
 80090e0:	19bb      	adds	r3, r7, r6
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7f9 ff53 	bl	8002f90 <__aeabi_i2d>
 80090ea:	0002      	movs	r2, r0
 80090ec:	000b      	movs	r3, r1
 80090ee:	0020      	movs	r0, r4
 80090f0:	0029      	movs	r1, r5
 80090f2:	f7f8 f98b 	bl	800140c <__aeabi_dadd>
 80090f6:	0002      	movs	r2, r0
 80090f8:	000b      	movs	r3, r1
 80090fa:	0010      	movs	r0, r2
 80090fc:	0019      	movs	r1, r3
 80090fe:	f7f7 fa5f 	bl	80005c0 <__aeabi_d2uiz>
 8009102:	0003      	movs	r3, r0
 8009104:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 8009106:	68b8      	ldr	r0, [r7, #8]
 8009108:	f7f9 ff98 	bl	800303c <__aeabi_f2d>
 800910c:	0002      	movs	r2, r0
 800910e:	000b      	movs	r3, r1
 8009110:	0010      	movs	r0, r2
 8009112:	0019      	movs	r1, r3
 8009114:	f00b fa42 	bl	801459c <sin>
 8009118:	0004      	movs	r4, r0
 800911a:	000d      	movs	r5, r1
 800911c:	2130      	movs	r1, #48	; 0x30
 800911e:	187b      	adds	r3, r7, r1
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	0018      	movs	r0, r3
 8009124:	f7f9 ff34 	bl	8002f90 <__aeabi_i2d>
 8009128:	0002      	movs	r2, r0
 800912a:	000b      	movs	r3, r1
 800912c:	0020      	movs	r0, r4
 800912e:	0029      	movs	r1, r5
 8009130:	f7f9 f8dc 	bl	80022ec <__aeabi_dmul>
 8009134:	0002      	movs	r2, r0
 8009136:	000b      	movs	r3, r1
 8009138:	0014      	movs	r4, r2
 800913a:	001d      	movs	r5, r3
 800913c:	220c      	movs	r2, #12
 800913e:	18bb      	adds	r3, r7, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	0018      	movs	r0, r3
 8009144:	f7f9 ff24 	bl	8002f90 <__aeabi_i2d>
 8009148:	0002      	movs	r2, r0
 800914a:	000b      	movs	r3, r1
 800914c:	0020      	movs	r0, r4
 800914e:	0029      	movs	r1, r5
 8009150:	f7f8 f95c 	bl	800140c <__aeabi_dadd>
 8009154:	0002      	movs	r2, r0
 8009156:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8009158:	0010      	movs	r0, r2
 800915a:	0019      	movs	r1, r3
 800915c:	f7f7 fa30 	bl	80005c0 <__aeabi_d2uiz>
 8009160:	0003      	movs	r3, r0
 8009162:	b299      	uxth	r1, r3
 8009164:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 8009166:	68b8      	ldr	r0, [r7, #8]
 8009168:	f7f9 ff68 	bl	800303c <__aeabi_f2d>
 800916c:	0002      	movs	r2, r0
 800916e:	000b      	movs	r3, r1
 8009170:	0010      	movs	r0, r2
 8009172:	0019      	movs	r1, r3
 8009174:	f00b f9d0 	bl	8014518 <cos>
 8009178:	0004      	movs	r4, r0
 800917a:	000d      	movs	r5, r1
 800917c:	1dbb      	adds	r3, r7, #6
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	0018      	movs	r0, r3
 8009182:	f7f9 ff05 	bl	8002f90 <__aeabi_i2d>
 8009186:	0002      	movs	r2, r0
 8009188:	000b      	movs	r3, r1
 800918a:	0020      	movs	r0, r4
 800918c:	0029      	movs	r1, r5
 800918e:	f7f9 f8ad 	bl	80022ec <__aeabi_dmul>
 8009192:	0002      	movs	r2, r0
 8009194:	000b      	movs	r3, r1
 8009196:	0014      	movs	r4, r2
 8009198:	001d      	movs	r5, r3
 800919a:	230e      	movs	r3, #14
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7f9 fef5 	bl	8002f90 <__aeabi_i2d>
 80091a6:	0002      	movs	r2, r0
 80091a8:	000b      	movs	r3, r1
 80091aa:	0020      	movs	r0, r4
 80091ac:	0029      	movs	r1, r5
 80091ae:	f7f8 f92d 	bl	800140c <__aeabi_dadd>
 80091b2:	0002      	movs	r2, r0
 80091b4:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80091b6:	0010      	movs	r0, r2
 80091b8:	0019      	movs	r1, r3
 80091ba:	f7f7 fa01 	bl	80005c0 <__aeabi_d2uiz>
 80091be:	0003      	movs	r3, r0
 80091c0:	b299      	uxth	r1, r3
 80091c2:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 80091c4:	68b8      	ldr	r0, [r7, #8]
 80091c6:	f7f9 ff39 	bl	800303c <__aeabi_f2d>
 80091ca:	0002      	movs	r2, r0
 80091cc:	000b      	movs	r3, r1
 80091ce:	0010      	movs	r0, r2
 80091d0:	0019      	movs	r1, r3
 80091d2:	f00b f9e3 	bl	801459c <sin>
 80091d6:	0004      	movs	r4, r0
 80091d8:	000d      	movs	r5, r1
 80091da:	1dbb      	adds	r3, r7, #6
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	0018      	movs	r0, r3
 80091e0:	f7f9 fed6 	bl	8002f90 <__aeabi_i2d>
 80091e4:	0002      	movs	r2, r0
 80091e6:	000b      	movs	r3, r1
 80091e8:	0020      	movs	r0, r4
 80091ea:	0029      	movs	r1, r5
 80091ec:	f7f9 f87e 	bl	80022ec <__aeabi_dmul>
 80091f0:	0002      	movs	r2, r0
 80091f2:	000b      	movs	r3, r1
 80091f4:	0014      	movs	r4, r2
 80091f6:	001d      	movs	r5, r3
 80091f8:	220c      	movs	r2, #12
 80091fa:	18bb      	adds	r3, r7, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	0018      	movs	r0, r3
 8009200:	f7f9 fec6 	bl	8002f90 <__aeabi_i2d>
 8009204:	0002      	movs	r2, r0
 8009206:	000b      	movs	r3, r1
 8009208:	0020      	movs	r0, r4
 800920a:	0029      	movs	r1, r5
 800920c:	f7f8 f8fe 	bl	800140c <__aeabi_dadd>
 8009210:	0002      	movs	r2, r0
 8009212:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8009214:	0010      	movs	r0, r2
 8009216:	0019      	movs	r1, r3
 8009218:	f7f7 f9d2 	bl	80005c0 <__aeabi_d2uiz>
 800921c:	0003      	movs	r3, r0
 800921e:	b29a      	uxth	r2, r3
 8009220:	233c      	movs	r3, #60	; 0x3c
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	2338      	movs	r3, #56	; 0x38
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	2334      	movs	r3, #52	; 0x34
 8009232:	18fb      	adds	r3, r7, r3
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	0013      	movs	r3, r2
 800923a:	464a      	mov	r2, r9
 800923c:	4641      	mov	r1, r8
 800923e:	0030      	movs	r0, r6
 8009240:	f7ff fe40 	bl	8008ec4 <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 8009244:	46c0      	nop			; (mov r8, r8)
 8009246:	46bd      	mov	sp, r7
 8009248:	b005      	add	sp, #20
 800924a:	bcc0      	pop	{r6, r7}
 800924c:	46b9      	mov	r9, r7
 800924e:	46b0      	mov	r8, r6
 8009250:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009254 <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009256:	b089      	sub	sp, #36	; 0x24
 8009258:	af04      	add	r7, sp, #16
 800925a:	0005      	movs	r5, r0
 800925c:	000c      	movs	r4, r1
 800925e:	0010      	movs	r0, r2
 8009260:	0019      	movs	r1, r3
 8009262:	1dbb      	adds	r3, r7, #6
 8009264:	1c2a      	adds	r2, r5, #0
 8009266:	801a      	strh	r2, [r3, #0]
 8009268:	1d3b      	adds	r3, r7, #4
 800926a:	1c22      	adds	r2, r4, #0
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	1cbb      	adds	r3, r7, #2
 8009270:	1c02      	adds	r2, r0, #0
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	003b      	movs	r3, r7
 8009276:	1c0a      	adds	r2, r1, #0
 8009278:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 800927a:	4b5a      	ldr	r3, [pc, #360]	; (80093e4 <Paint_DrawRectangle+0x190>)
 800927c:	889b      	ldrh	r3, [r3, #4]
 800927e:	1dba      	adds	r2, r7, #6
 8009280:	8812      	ldrh	r2, [r2, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d811      	bhi.n	80092aa <Paint_DrawRectangle+0x56>
 8009286:	4b57      	ldr	r3, [pc, #348]	; (80093e4 <Paint_DrawRectangle+0x190>)
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	1d3a      	adds	r2, r7, #4
 800928c:	8812      	ldrh	r2, [r2, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d80b      	bhi.n	80092aa <Paint_DrawRectangle+0x56>
 8009292:	4b54      	ldr	r3, [pc, #336]	; (80093e4 <Paint_DrawRectangle+0x190>)
 8009294:	889b      	ldrh	r3, [r3, #4]
 8009296:	1cba      	adds	r2, r7, #2
 8009298:	8812      	ldrh	r2, [r2, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d805      	bhi.n	80092aa <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 800929e:	4b51      	ldr	r3, [pc, #324]	; (80093e4 <Paint_DrawRectangle+0x190>)
 80092a0:	88db      	ldrh	r3, [r3, #6]
 80092a2:	003a      	movs	r2, r7
 80092a4:	8812      	ldrh	r2, [r2, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d904      	bls.n	80092b4 <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 80092aa:	4b4f      	ldr	r3, [pc, #316]	; (80093e8 <Paint_DrawRectangle+0x194>)
 80092ac:	0018      	movs	r0, r3
 80092ae:	f00a f881 	bl	80133b4 <puts>
		return;
 80092b2:	e094      	b.n	80093de <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 80092b4:	2328      	movs	r3, #40	; 0x28
 80092b6:	2208      	movs	r2, #8
 80092b8:	4694      	mov	ip, r2
 80092ba:	44bc      	add	ip, r7
 80092bc:	4463      	add	r3, ip
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d02e      	beq.n	8009322 <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80092c4:	230e      	movs	r3, #14
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	1d3a      	adds	r2, r7, #4
 80092ca:	8812      	ldrh	r2, [r2, #0]
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	e020      	b.n	8009312 <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 80092d0:	250e      	movs	r5, #14
 80092d2:	197b      	adds	r3, r7, r5
 80092d4:	881c      	ldrh	r4, [r3, #0]
 80092d6:	1cbb      	adds	r3, r7, #2
 80092d8:	881a      	ldrh	r2, [r3, #0]
 80092da:	197b      	adds	r3, r7, r5
 80092dc:	8819      	ldrh	r1, [r3, #0]
 80092de:	1dbb      	adds	r3, r7, #6
 80092e0:	8818      	ldrh	r0, [r3, #0]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	2324      	movs	r3, #36	; 0x24
 80092e8:	2608      	movs	r6, #8
 80092ea:	46b4      	mov	ip, r6
 80092ec:	44bc      	add	ip, r7
 80092ee:	4463      	add	r3, ip
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	2320      	movs	r3, #32
 80092f6:	2608      	movs	r6, #8
 80092f8:	46b4      	mov	ip, r6
 80092fa:	44bc      	add	ip, r7
 80092fc:	4463      	add	r3, ip
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	0023      	movs	r3, r4
 8009304:	f7ff fdde 	bl	8008ec4 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8009308:	197b      	adds	r3, r7, r5
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	197b      	adds	r3, r7, r5
 800930e:	3201      	adds	r2, #1
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	230e      	movs	r3, #14
 8009314:	18fa      	adds	r2, r7, r3
 8009316:	003b      	movs	r3, r7
 8009318:	8812      	ldrh	r2, [r2, #0]
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3d7      	bcc.n	80092d0 <Paint_DrawRectangle+0x7c>
 8009320:	e05d      	b.n	80093de <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	881c      	ldrh	r4, [r3, #0]
 8009326:	1cbb      	adds	r3, r7, #2
 8009328:	881a      	ldrh	r2, [r3, #0]
 800932a:	1d3b      	adds	r3, r7, #4
 800932c:	8819      	ldrh	r1, [r3, #0]
 800932e:	1dbb      	adds	r3, r7, #6
 8009330:	8818      	ldrh	r0, [r3, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	9302      	str	r3, [sp, #8]
 8009336:	2524      	movs	r5, #36	; 0x24
 8009338:	2308      	movs	r3, #8
 800933a:	18fe      	adds	r6, r7, r3
 800933c:	1973      	adds	r3, r6, r5
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	2620      	movs	r6, #32
 8009344:	2308      	movs	r3, #8
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	199b      	adds	r3, r3, r6
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	0023      	movs	r3, r4
 8009350:	f7ff fdb8 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 8009354:	003b      	movs	r3, r7
 8009356:	881c      	ldrh	r4, [r3, #0]
 8009358:	1dbb      	adds	r3, r7, #6
 800935a:	881a      	ldrh	r2, [r3, #0]
 800935c:	1d3b      	adds	r3, r7, #4
 800935e:	8819      	ldrh	r1, [r3, #0]
 8009360:	1dbb      	adds	r3, r7, #6
 8009362:	8818      	ldrh	r0, [r3, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	2308      	movs	r3, #8
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	195b      	adds	r3, r3, r5
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	2308      	movs	r3, #8
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	199b      	adds	r3, r3, r6
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	0023      	movs	r3, r4
 800937e:	f7ff fda1 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	881c      	ldrh	r4, [r3, #0]
 8009386:	1cbb      	adds	r3, r7, #2
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	003b      	movs	r3, r7
 800938c:	8819      	ldrh	r1, [r3, #0]
 800938e:	1cbb      	adds	r3, r7, #2
 8009390:	8818      	ldrh	r0, [r3, #0]
 8009392:	2300      	movs	r3, #0
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	2308      	movs	r3, #8
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	195b      	adds	r3, r3, r5
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	2308      	movs	r3, #8
 80093a2:	18fb      	adds	r3, r7, r3
 80093a4:	199b      	adds	r3, r3, r6
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	0023      	movs	r3, r4
 80093ac:	f7ff fd8a 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 80093b0:	003b      	movs	r3, r7
 80093b2:	881c      	ldrh	r4, [r3, #0]
 80093b4:	1dbb      	adds	r3, r7, #6
 80093b6:	881a      	ldrh	r2, [r3, #0]
 80093b8:	003b      	movs	r3, r7
 80093ba:	8819      	ldrh	r1, [r3, #0]
 80093bc:	1cbb      	adds	r3, r7, #2
 80093be:	8818      	ldrh	r0, [r3, #0]
 80093c0:	2300      	movs	r3, #0
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	2308      	movs	r3, #8
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	195b      	adds	r3, r3, r5
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	2308      	movs	r3, #8
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	199b      	adds	r3, r3, r6
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	0023      	movs	r3, r4
 80093da:	f7ff fd73 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 80093de:	46bd      	mov	sp, r7
 80093e0:	b005      	add	sp, #20
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e4:	200001d8 	.word	0x200001d8
 80093e8:	0801608c 	.word	0x0801608c

080093ec <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 80093ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	0005      	movs	r5, r0
 80093f4:	000c      	movs	r4, r1
 80093f6:	0010      	movs	r0, r2
 80093f8:	0019      	movs	r1, r3
 80093fa:	1dbb      	adds	r3, r7, #6
 80093fc:	1c2a      	adds	r2, r5, #0
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	1d3b      	adds	r3, r7, #4
 8009402:	1c22      	adds	r2, r4, #0
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	1cbb      	adds	r3, r7, #2
 8009408:	1c02      	adds	r2, r0, #0
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	003b      	movs	r3, r7
 800940e:	1c0a      	adds	r2, r1, #0
 8009410:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8009412:	4b94      	ldr	r3, [pc, #592]	; (8009664 <Paint_DrawCircle+0x278>)
 8009414:	889b      	ldrh	r3, [r3, #4]
 8009416:	1dba      	adds	r2, r7, #6
 8009418:	8812      	ldrh	r2, [r2, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d805      	bhi.n	800942a <Paint_DrawCircle+0x3e>
 800941e:	4b91      	ldr	r3, [pc, #580]	; (8009664 <Paint_DrawCircle+0x278>)
 8009420:	88db      	ldrh	r3, [r3, #6]
 8009422:	1d3a      	adds	r2, r7, #4
 8009424:	8812      	ldrh	r2, [r2, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d304      	bcc.n	8009434 <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800942a:	4b8f      	ldr	r3, [pc, #572]	; (8009668 <Paint_DrawCircle+0x27c>)
 800942c:	0018      	movs	r0, r3
 800942e:	f009 ffc1 	bl	80133b4 <puts>
		return;
 8009432:	e229      	b.n	8009888 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 8009434:	230e      	movs	r3, #14
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	2200      	movs	r2, #0
 800943a:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 800943c:	230c      	movs	r3, #12
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	1cba      	adds	r2, r7, #2
 8009442:	8812      	ldrh	r2, [r2, #0]
 8009444:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 8009446:	1cbb      	adds	r3, r7, #2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	18db      	adds	r3, r3, r3
 800944c:	b29b      	uxth	r3, r3
 800944e:	2203      	movs	r2, #3
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	b29a      	uxth	r2, r3
 8009454:	230a      	movs	r3, #10
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 800945a:	2324      	movs	r3, #36	; 0x24
 800945c:	2208      	movs	r2, #8
 800945e:	4694      	mov	ip, r2
 8009460:	44bc      	add	ip, r7
 8009462:	4463      	add	r3, ip
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d000      	beq.n	800946c <Paint_DrawCircle+0x80>
 800946a:	e202      	b.n	8009872 <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 800946c:	e0ed      	b.n	800964a <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 800946e:	2308      	movs	r3, #8
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	220e      	movs	r2, #14
 8009474:	18ba      	adds	r2, r7, r2
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	801a      	strh	r2, [r3, #0]
 800947a:	e0a1      	b.n	80095c0 <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 800947c:	250e      	movs	r5, #14
 800947e:	197b      	adds	r3, r7, r5
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	1dbb      	adds	r3, r7, #6
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	18d3      	adds	r3, r2, r3
 8009488:	b298      	uxth	r0, r3
 800948a:	2408      	movs	r4, #8
 800948c:	193b      	adds	r3, r7, r4
 800948e:	881a      	ldrh	r2, [r3, #0]
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	18d3      	adds	r3, r2, r3
 8009496:	b299      	uxth	r1, r3
 8009498:	003b      	movs	r3, r7
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	2301      	movs	r3, #1
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2301      	movs	r3, #1
 80094a2:	f7ff fc25 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 80094a6:	197b      	adds	r3, r7, r5
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	1dba      	adds	r2, r7, #6
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	b298      	uxth	r0, r3
 80094b2:	193b      	adds	r3, r7, r4
 80094b4:	881a      	ldrh	r2, [r3, #0]
 80094b6:	1d3b      	adds	r3, r7, #4
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	18d3      	adds	r3, r2, r3
 80094bc:	b299      	uxth	r1, r3
 80094be:	003b      	movs	r3, r7
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	2301      	movs	r3, #1
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	2301      	movs	r3, #1
 80094c8:	f7ff fc12 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 80094cc:	193b      	adds	r3, r7, r4
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	1dba      	adds	r2, r7, #6
 80094d2:	8812      	ldrh	r2, [r2, #0]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	b298      	uxth	r0, r3
 80094d8:	197b      	adds	r3, r7, r5
 80094da:	881a      	ldrh	r2, [r3, #0]
 80094dc:	1d3b      	adds	r3, r7, #4
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	18d3      	adds	r3, r2, r3
 80094e2:	b299      	uxth	r1, r3
 80094e4:	003b      	movs	r3, r7
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	2301      	movs	r3, #1
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	2301      	movs	r3, #1
 80094ee:	f7ff fbff 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 80094f2:	193b      	adds	r3, r7, r4
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	1dba      	adds	r2, r7, #6
 80094f8:	8812      	ldrh	r2, [r2, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	b298      	uxth	r0, r3
 80094fe:	197b      	adds	r3, r7, r5
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	1d3a      	adds	r2, r7, #4
 8009504:	8812      	ldrh	r2, [r2, #0]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b299      	uxth	r1, r3
 800950a:	003b      	movs	r3, r7
 800950c:	881a      	ldrh	r2, [r3, #0]
 800950e:	2301      	movs	r3, #1
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2301      	movs	r3, #1
 8009514:	f7ff fbec 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 8009518:	197b      	adds	r3, r7, r5
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	1dba      	adds	r2, r7, #6
 800951e:	8812      	ldrh	r2, [r2, #0]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	b298      	uxth	r0, r3
 8009524:	193b      	adds	r3, r7, r4
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	1d3a      	adds	r2, r7, #4
 800952a:	8812      	ldrh	r2, [r2, #0]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	b299      	uxth	r1, r3
 8009530:	003b      	movs	r3, r7
 8009532:	881a      	ldrh	r2, [r3, #0]
 8009534:	2301      	movs	r3, #1
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2301      	movs	r3, #1
 800953a:	f7ff fbd9 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 800953e:	197b      	adds	r3, r7, r5
 8009540:	881a      	ldrh	r2, [r3, #0]
 8009542:	1dbb      	adds	r3, r7, #6
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	18d3      	adds	r3, r2, r3
 8009548:	b298      	uxth	r0, r3
 800954a:	193b      	adds	r3, r7, r4
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	1d3a      	adds	r2, r7, #4
 8009550:	8812      	ldrh	r2, [r2, #0]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	b299      	uxth	r1, r3
 8009556:	003b      	movs	r3, r7
 8009558:	881a      	ldrh	r2, [r3, #0]
 800955a:	2301      	movs	r3, #1
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	2301      	movs	r3, #1
 8009560:	f7ff fbc6 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 8009564:	193b      	adds	r3, r7, r4
 8009566:	881a      	ldrh	r2, [r3, #0]
 8009568:	1dbb      	adds	r3, r7, #6
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	18d3      	adds	r3, r2, r3
 800956e:	b298      	uxth	r0, r3
 8009570:	197b      	adds	r3, r7, r5
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	1d3a      	adds	r2, r7, #4
 8009576:	8812      	ldrh	r2, [r2, #0]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	b299      	uxth	r1, r3
 800957c:	003b      	movs	r3, r7
 800957e:	881a      	ldrh	r2, [r3, #0]
 8009580:	2301      	movs	r3, #1
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	2301      	movs	r3, #1
 8009586:	f7ff fbb3 	bl	8008cf0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 800958a:	193b      	adds	r3, r7, r4
 800958c:	881a      	ldrh	r2, [r3, #0]
 800958e:	1dbb      	adds	r3, r7, #6
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	18d3      	adds	r3, r2, r3
 8009594:	b298      	uxth	r0, r3
 8009596:	197b      	adds	r3, r7, r5
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	18d3      	adds	r3, r2, r3
 80095a0:	b299      	uxth	r1, r3
 80095a2:	003b      	movs	r3, r7
 80095a4:	881a      	ldrh	r2, [r3, #0]
 80095a6:	2301      	movs	r3, #1
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	2301      	movs	r3, #1
 80095ac:	f7ff fba0 	bl	8008cf0 <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 80095b0:	193b      	adds	r3, r7, r4
 80095b2:	2200      	movs	r2, #0
 80095b4:	5e9b      	ldrsh	r3, [r3, r2]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3301      	adds	r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	193b      	adds	r3, r7, r4
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	2308      	movs	r3, #8
 80095c2:	18fa      	adds	r2, r7, r3
 80095c4:	230c      	movs	r3, #12
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	2100      	movs	r1, #0
 80095ca:	5e52      	ldrsh	r2, [r2, r1]
 80095cc:	2100      	movs	r1, #0
 80095ce:	5e5b      	ldrsh	r3, [r3, r1]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	dc00      	bgt.n	80095d6 <Paint_DrawCircle+0x1ea>
 80095d4:	e752      	b.n	800947c <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 80095d6:	210a      	movs	r1, #10
 80095d8:	187b      	adds	r3, r7, r1
 80095da:	2200      	movs	r2, #0
 80095dc:	5e9b      	ldrsh	r3, [r3, r2]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da0d      	bge.n	80095fe <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 80095e2:	230e      	movs	r3, #14
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	187b      	adds	r3, r7, r1
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	18d3      	adds	r3, r2, r3
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3306      	adds	r3, #6
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	187b      	adds	r3, r7, r1
 80095fa:	801a      	strh	r2, [r3, #0]
 80095fc:	e01c      	b.n	8009638 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80095fe:	230e      	movs	r3, #14
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	2200      	movs	r2, #0
 8009604:	5e9a      	ldrsh	r2, [r3, r2]
 8009606:	210c      	movs	r1, #12
 8009608:	187b      	adds	r3, r7, r1
 800960a:	2000      	movs	r0, #0
 800960c:	5e1b      	ldrsh	r3, [r3, r0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29b      	uxth	r3, r3
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	b29a      	uxth	r2, r3
 8009616:	200a      	movs	r0, #10
 8009618:	183b      	adds	r3, r7, r0
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	18d3      	adds	r3, r2, r3
 800961e:	b29b      	uxth	r3, r3
 8009620:	330a      	adds	r3, #10
 8009622:	b29a      	uxth	r2, r3
 8009624:	183b      	adds	r3, r7, r0
 8009626:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009628:	187b      	adds	r3, r7, r1
 800962a:	2200      	movs	r2, #0
 800962c:	5e9b      	ldrsh	r3, [r3, r2]
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	187b      	adds	r3, r7, r1
 8009636:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009638:	210e      	movs	r1, #14
 800963a:	187b      	adds	r3, r7, r1
 800963c:	2200      	movs	r2, #0
 800963e:	5e9b      	ldrsh	r3, [r3, r2]
 8009640:	b29b      	uxth	r3, r3
 8009642:	3301      	adds	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	187b      	adds	r3, r7, r1
 8009648:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 800964a:	230e      	movs	r3, #14
 800964c:	18fa      	adds	r2, r7, r3
 800964e:	230c      	movs	r3, #12
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	2100      	movs	r1, #0
 8009654:	5e52      	ldrsh	r2, [r2, r1]
 8009656:	2100      	movs	r1, #0
 8009658:	5e5b      	ldrsh	r3, [r3, r1]
 800965a:	429a      	cmp	r2, r3
 800965c:	dc00      	bgt.n	8009660 <Paint_DrawCircle+0x274>
 800965e:	e706      	b.n	800946e <Paint_DrawCircle+0x82>
 8009660:	e112      	b.n	8009888 <Paint_DrawCircle+0x49c>
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	200001d8 	.word	0x200001d8
 8009668:	080160bc 	.word	0x080160bc
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 800966c:	250e      	movs	r5, #14
 800966e:	197b      	adds	r3, r7, r5
 8009670:	881a      	ldrh	r2, [r3, #0]
 8009672:	1dbb      	adds	r3, r7, #6
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	18d3      	adds	r3, r2, r3
 8009678:	b298      	uxth	r0, r3
 800967a:	260c      	movs	r6, #12
 800967c:	19bb      	adds	r3, r7, r6
 800967e:	881a      	ldrh	r2, [r3, #0]
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	18d3      	adds	r3, r2, r3
 8009686:	b299      	uxth	r1, r3
 8009688:	2320      	movs	r3, #32
 800968a:	2208      	movs	r2, #8
 800968c:	4694      	mov	ip, r2
 800968e:	44bc      	add	ip, r7
 8009690:	4463      	add	r3, ip
 8009692:	781c      	ldrb	r4, [r3, #0]
 8009694:	003b      	movs	r3, r7
 8009696:	881a      	ldrh	r2, [r3, #0]
 8009698:	2301      	movs	r3, #1
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	0023      	movs	r3, r4
 800969e:	f7ff fb27 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	1dba      	adds	r2, r7, #6
 80096a8:	8812      	ldrh	r2, [r2, #0]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	b298      	uxth	r0, r3
 80096ae:	19bb      	adds	r3, r7, r6
 80096b0:	881a      	ldrh	r2, [r3, #0]
 80096b2:	1d3b      	adds	r3, r7, #4
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	18d3      	adds	r3, r2, r3
 80096b8:	b299      	uxth	r1, r3
 80096ba:	2320      	movs	r3, #32
 80096bc:	2208      	movs	r2, #8
 80096be:	4694      	mov	ip, r2
 80096c0:	44bc      	add	ip, r7
 80096c2:	4463      	add	r3, ip
 80096c4:	781c      	ldrb	r4, [r3, #0]
 80096c6:	003b      	movs	r3, r7
 80096c8:	881a      	ldrh	r2, [r3, #0]
 80096ca:	2301      	movs	r3, #1
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	0023      	movs	r3, r4
 80096d0:	f7ff fb0e 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 80096d4:	19bb      	adds	r3, r7, r6
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	1dba      	adds	r2, r7, #6
 80096da:	8812      	ldrh	r2, [r2, #0]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	b298      	uxth	r0, r3
 80096e0:	197b      	adds	r3, r7, r5
 80096e2:	881a      	ldrh	r2, [r3, #0]
 80096e4:	1d3b      	adds	r3, r7, #4
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	18d3      	adds	r3, r2, r3
 80096ea:	b299      	uxth	r1, r3
 80096ec:	2320      	movs	r3, #32
 80096ee:	2208      	movs	r2, #8
 80096f0:	4694      	mov	ip, r2
 80096f2:	44bc      	add	ip, r7
 80096f4:	4463      	add	r3, ip
 80096f6:	781c      	ldrb	r4, [r3, #0]
 80096f8:	003b      	movs	r3, r7
 80096fa:	881a      	ldrh	r2, [r3, #0]
 80096fc:	2301      	movs	r3, #1
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	0023      	movs	r3, r4
 8009702:	f7ff faf5 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 8009706:	19bb      	adds	r3, r7, r6
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	1dba      	adds	r2, r7, #6
 800970c:	8812      	ldrh	r2, [r2, #0]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	b298      	uxth	r0, r3
 8009712:	197b      	adds	r3, r7, r5
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	1d3a      	adds	r2, r7, #4
 8009718:	8812      	ldrh	r2, [r2, #0]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	b299      	uxth	r1, r3
 800971e:	2320      	movs	r3, #32
 8009720:	2208      	movs	r2, #8
 8009722:	4694      	mov	ip, r2
 8009724:	44bc      	add	ip, r7
 8009726:	4463      	add	r3, ip
 8009728:	781c      	ldrb	r4, [r3, #0]
 800972a:	003b      	movs	r3, r7
 800972c:	881a      	ldrh	r2, [r3, #0]
 800972e:	2301      	movs	r3, #1
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	0023      	movs	r3, r4
 8009734:	f7ff fadc 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 8009738:	197b      	adds	r3, r7, r5
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	1dba      	adds	r2, r7, #6
 800973e:	8812      	ldrh	r2, [r2, #0]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	b298      	uxth	r0, r3
 8009744:	19bb      	adds	r3, r7, r6
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	1d3a      	adds	r2, r7, #4
 800974a:	8812      	ldrh	r2, [r2, #0]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	b299      	uxth	r1, r3
 8009750:	2320      	movs	r3, #32
 8009752:	2208      	movs	r2, #8
 8009754:	4694      	mov	ip, r2
 8009756:	44bc      	add	ip, r7
 8009758:	4463      	add	r3, ip
 800975a:	781c      	ldrb	r4, [r3, #0]
 800975c:	003b      	movs	r3, r7
 800975e:	881a      	ldrh	r2, [r3, #0]
 8009760:	2301      	movs	r3, #1
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	0023      	movs	r3, r4
 8009766:	f7ff fac3 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 800976a:	197b      	adds	r3, r7, r5
 800976c:	881a      	ldrh	r2, [r3, #0]
 800976e:	1dbb      	adds	r3, r7, #6
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	18d3      	adds	r3, r2, r3
 8009774:	b298      	uxth	r0, r3
 8009776:	19bb      	adds	r3, r7, r6
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	1d3a      	adds	r2, r7, #4
 800977c:	8812      	ldrh	r2, [r2, #0]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	b299      	uxth	r1, r3
 8009782:	2320      	movs	r3, #32
 8009784:	2208      	movs	r2, #8
 8009786:	4694      	mov	ip, r2
 8009788:	44bc      	add	ip, r7
 800978a:	4463      	add	r3, ip
 800978c:	781c      	ldrb	r4, [r3, #0]
 800978e:	003b      	movs	r3, r7
 8009790:	881a      	ldrh	r2, [r3, #0]
 8009792:	2301      	movs	r3, #1
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	0023      	movs	r3, r4
 8009798:	f7ff faaa 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 800979c:	19bb      	adds	r3, r7, r6
 800979e:	881a      	ldrh	r2, [r3, #0]
 80097a0:	1dbb      	adds	r3, r7, #6
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	18d3      	adds	r3, r2, r3
 80097a6:	b298      	uxth	r0, r3
 80097a8:	197b      	adds	r3, r7, r5
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	1d3a      	adds	r2, r7, #4
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	b299      	uxth	r1, r3
 80097b4:	2320      	movs	r3, #32
 80097b6:	2208      	movs	r2, #8
 80097b8:	4694      	mov	ip, r2
 80097ba:	44bc      	add	ip, r7
 80097bc:	4463      	add	r3, ip
 80097be:	781c      	ldrb	r4, [r3, #0]
 80097c0:	003b      	movs	r3, r7
 80097c2:	881a      	ldrh	r2, [r3, #0]
 80097c4:	2301      	movs	r3, #1
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	0023      	movs	r3, r4
 80097ca:	f7ff fa91 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 80097ce:	19bb      	adds	r3, r7, r6
 80097d0:	881a      	ldrh	r2, [r3, #0]
 80097d2:	1dbb      	adds	r3, r7, #6
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	18d3      	adds	r3, r2, r3
 80097d8:	b298      	uxth	r0, r3
 80097da:	197b      	adds	r3, r7, r5
 80097dc:	881a      	ldrh	r2, [r3, #0]
 80097de:	1d3b      	adds	r3, r7, #4
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	18d3      	adds	r3, r2, r3
 80097e4:	b299      	uxth	r1, r3
 80097e6:	2320      	movs	r3, #32
 80097e8:	2208      	movs	r2, #8
 80097ea:	4694      	mov	ip, r2
 80097ec:	44bc      	add	ip, r7
 80097ee:	4463      	add	r3, ip
 80097f0:	781c      	ldrb	r4, [r3, #0]
 80097f2:	003b      	movs	r3, r7
 80097f4:	881a      	ldrh	r2, [r3, #0]
 80097f6:	2301      	movs	r3, #1
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	0023      	movs	r3, r4
 80097fc:	f7ff fa78 	bl	8008cf0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 8009800:	210a      	movs	r1, #10
 8009802:	187b      	adds	r3, r7, r1
 8009804:	2200      	movs	r2, #0
 8009806:	5e9b      	ldrsh	r3, [r3, r2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	da0c      	bge.n	8009826 <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 800980c:	197b      	adds	r3, r7, r5
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	b29a      	uxth	r2, r3
 8009814:	187b      	adds	r3, r7, r1
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	18d3      	adds	r3, r2, r3
 800981a:	b29b      	uxth	r3, r3
 800981c:	3306      	adds	r3, #6
 800981e:	b29a      	uxth	r2, r3
 8009820:	187b      	adds	r3, r7, r1
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e01c      	b.n	8009860 <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8009826:	230e      	movs	r3, #14
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	2200      	movs	r2, #0
 800982c:	5e9a      	ldrsh	r2, [r3, r2]
 800982e:	210c      	movs	r1, #12
 8009830:	187b      	adds	r3, r7, r1
 8009832:	2000      	movs	r0, #0
 8009834:	5e1b      	ldrsh	r3, [r3, r0]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	b29b      	uxth	r3, r3
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	b29a      	uxth	r2, r3
 800983e:	200a      	movs	r0, #10
 8009840:	183b      	adds	r3, r7, r0
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	18d3      	adds	r3, r2, r3
 8009846:	b29b      	uxth	r3, r3
 8009848:	330a      	adds	r3, #10
 800984a:	b29a      	uxth	r2, r3
 800984c:	183b      	adds	r3, r7, r0
 800984e:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009850:	187b      	adds	r3, r7, r1
 8009852:	2200      	movs	r2, #0
 8009854:	5e9b      	ldrsh	r3, [r3, r2]
 8009856:	b29b      	uxth	r3, r3
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	187b      	adds	r3, r7, r1
 800985e:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009860:	210e      	movs	r1, #14
 8009862:	187b      	adds	r3, r7, r1
 8009864:	2200      	movs	r2, #0
 8009866:	5e9b      	ldrsh	r3, [r3, r2]
 8009868:	b29b      	uxth	r3, r3
 800986a:	3301      	adds	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	187b      	adds	r3, r7, r1
 8009870:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 8009872:	230e      	movs	r3, #14
 8009874:	18fa      	adds	r2, r7, r3
 8009876:	230c      	movs	r3, #12
 8009878:	18fb      	adds	r3, r7, r3
 800987a:	2100      	movs	r1, #0
 800987c:	5e52      	ldrsh	r2, [r2, r1]
 800987e:	2100      	movs	r1, #0
 8009880:	5e5b      	ldrsh	r3, [r3, r1]
 8009882:	429a      	cmp	r2, r3
 8009884:	dc00      	bgt.n	8009888 <Paint_DrawCircle+0x49c>
 8009886:	e6f1      	b.n	800966c <Paint_DrawCircle+0x280>
		}
	}
}
 8009888:	46bd      	mov	sp, r7
 800988a:	b005      	add	sp, #20
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	46c0      	nop			; (mov r8, r8)

08009890 <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009890:	b5b0      	push	{r4, r5, r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	0004      	movs	r4, r0
 8009898:	0008      	movs	r0, r1
 800989a:	0011      	movs	r1, r2
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	250e      	movs	r5, #14
 80098a0:	197b      	adds	r3, r7, r5
 80098a2:	1c22      	adds	r2, r4, #0
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	240c      	movs	r4, #12
 80098a8:	193b      	adds	r3, r7, r4
 80098aa:	1c02      	adds	r2, r0, #0
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	230b      	movs	r3, #11
 80098b0:	18fb      	adds	r3, r7, r3
 80098b2:	1c0a      	adds	r2, r1, #0
 80098b4:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80098b6:	4b66      	ldr	r3, [pc, #408]	; (8009a50 <Paint_DrawChar+0x1c0>)
 80098b8:	889b      	ldrh	r3, [r3, #4]
 80098ba:	197a      	adds	r2, r7, r5
 80098bc:	8812      	ldrh	r2, [r2, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d805      	bhi.n	80098ce <Paint_DrawChar+0x3e>
 80098c2:	4b63      	ldr	r3, [pc, #396]	; (8009a50 <Paint_DrawChar+0x1c0>)
 80098c4:	88db      	ldrh	r3, [r3, #6]
 80098c6:	193a      	adds	r2, r7, r4
 80098c8:	8812      	ldrh	r2, [r2, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d904      	bls.n	80098d8 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80098ce:	4b61      	ldr	r3, [pc, #388]	; (8009a54 <Paint_DrawChar+0x1c4>)
 80098d0:	0018      	movs	r0, r3
 80098d2:	f009 fd6f 	bl	80133b4 <puts>
		return;
 80098d6:	e0b7      	b.n	8009a48 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80098d8:	230b      	movs	r3, #11
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	3b20      	subs	r3, #32
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	88d2      	ldrh	r2, [r2, #6]
 80098e4:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	8892      	ldrh	r2, [r2, #4]
 80098ea:	08d2      	lsrs	r2, r2, #3
 80098ec:	b292      	uxth	r2, r2
 80098ee:	0010      	movs	r0, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	8892      	ldrh	r2, [r2, #4]
 80098f4:	2107      	movs	r1, #7
 80098f6:	400a      	ands	r2, r1
 80098f8:	b292      	uxth	r2, r2
 80098fa:	1e51      	subs	r1, r2, #1
 80098fc:	418a      	sbcs	r2, r1
 80098fe:	b2d2      	uxtb	r2, r2
 8009900:	1882      	adds	r2, r0, r2
 8009902:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 8009904:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	18d3      	adds	r3, r2, r3
 800990e:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 8009910:	231e      	movs	r3, #30
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	2200      	movs	r2, #0
 8009916:	801a      	strh	r2, [r3, #0]
 8009918:	e08e      	b.n	8009a38 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 800991a:	231c      	movs	r3, #28
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	2200      	movs	r2, #0
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	e071      	b.n	8009a08 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8009924:	2334      	movs	r3, #52	; 0x34
 8009926:	18fb      	adds	r3, r7, r3
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	2bff      	cmp	r3, #255	; 0xff
 800992c:	d122      	bne.n	8009974 <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	0019      	movs	r1, r3
 8009934:	201c      	movs	r0, #28
 8009936:	183b      	adds	r3, r7, r0
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	2207      	movs	r2, #7
 800993c:	4013      	ands	r3, r2
 800993e:	2280      	movs	r2, #128	; 0x80
 8009940:	411a      	asrs	r2, r3
 8009942:	0013      	movs	r3, r2
 8009944:	400b      	ands	r3, r1
 8009946:	d04e      	beq.n	80099e6 <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009948:	230e      	movs	r3, #14
 800994a:	18fa      	adds	r2, r7, r3
 800994c:	183b      	adds	r3, r7, r0
 800994e:	8812      	ldrh	r2, [r2, #0]
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	18d3      	adds	r3, r2, r3
 8009954:	b298      	uxth	r0, r3
 8009956:	230c      	movs	r3, #12
 8009958:	18fa      	adds	r2, r7, r3
 800995a:	231e      	movs	r3, #30
 800995c:	18fb      	adds	r3, r7, r3
 800995e:	8812      	ldrh	r2, [r2, #0]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	18d3      	adds	r3, r2, r3
 8009964:	b299      	uxth	r1, r3
 8009966:	2330      	movs	r3, #48	; 0x30
 8009968:	18fb      	adds	r3, r7, r3
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	001a      	movs	r2, r3
 800996e:	f7fe ff8d 	bl	800888c <Paint_SetPixel>
 8009972:	e038      	b.n	80099e6 <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	0019      	movs	r1, r3
 800997a:	201c      	movs	r0, #28
 800997c:	183b      	adds	r3, r7, r0
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	2207      	movs	r2, #7
 8009982:	4013      	ands	r3, r2
 8009984:	2280      	movs	r2, #128	; 0x80
 8009986:	411a      	asrs	r2, r3
 8009988:	0013      	movs	r3, r2
 800998a:	400b      	ands	r3, r1
 800998c:	d015      	beq.n	80099ba <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800998e:	230e      	movs	r3, #14
 8009990:	18fa      	adds	r2, r7, r3
 8009992:	183b      	adds	r3, r7, r0
 8009994:	8812      	ldrh	r2, [r2, #0]
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	18d3      	adds	r3, r2, r3
 800999a:	b298      	uxth	r0, r3
 800999c:	230c      	movs	r3, #12
 800999e:	18fa      	adds	r2, r7, r3
 80099a0:	231e      	movs	r3, #30
 80099a2:	18fb      	adds	r3, r7, r3
 80099a4:	8812      	ldrh	r2, [r2, #0]
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	b299      	uxth	r1, r3
 80099ac:	2330      	movs	r3, #48	; 0x30
 80099ae:	18fb      	adds	r3, r7, r3
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	001a      	movs	r2, r3
 80099b4:	f7fe ff6a 	bl	800888c <Paint_SetPixel>
 80099b8:	e015      	b.n	80099e6 <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 80099ba:	230e      	movs	r3, #14
 80099bc:	18fa      	adds	r2, r7, r3
 80099be:	231c      	movs	r3, #28
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	8812      	ldrh	r2, [r2, #0]
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	18d3      	adds	r3, r2, r3
 80099c8:	b298      	uxth	r0, r3
 80099ca:	230c      	movs	r3, #12
 80099cc:	18fa      	adds	r2, r7, r3
 80099ce:	231e      	movs	r3, #30
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	8812      	ldrh	r2, [r2, #0]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	18d3      	adds	r3, r2, r3
 80099d8:	b299      	uxth	r1, r3
 80099da:	2334      	movs	r3, #52	; 0x34
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	001a      	movs	r2, r3
 80099e2:	f7fe ff53 	bl	800888c <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 80099e6:	231c      	movs	r3, #28
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	2207      	movs	r2, #7
 80099ee:	4013      	ands	r3, r2
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b07      	cmp	r3, #7
 80099f4:	d102      	bne.n	80099fc <Paint_DrawChar+0x16c>
				ptr++;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	3301      	adds	r3, #1
 80099fa:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 80099fc:	211c      	movs	r1, #28
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	187b      	adds	r3, r7, r1
 8009a04:	3201      	adds	r2, #1
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	889b      	ldrh	r3, [r3, #4]
 8009a0c:	221c      	movs	r2, #28
 8009a0e:	18ba      	adds	r2, r7, r2
 8009a10:	8812      	ldrh	r2, [r2, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d200      	bcs.n	8009a18 <Paint_DrawChar+0x188>
 8009a16:	e785      	b.n	8009924 <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	889b      	ldrh	r3, [r3, #4]
 8009a1c:	2207      	movs	r2, #7
 8009a1e:	4013      	ands	r3, r2
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <Paint_DrawChar+0x19c>
			ptr++;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8009a2c:	211e      	movs	r1, #30
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	881a      	ldrh	r2, [r3, #0]
 8009a32:	187b      	adds	r3, r7, r1
 8009a34:	3201      	adds	r2, #1
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	88db      	ldrh	r3, [r3, #6]
 8009a3c:	221e      	movs	r2, #30
 8009a3e:	18ba      	adds	r2, r7, r2
 8009a40:	8812      	ldrh	r2, [r2, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d200      	bcs.n	8009a48 <Paint_DrawChar+0x1b8>
 8009a46:	e768      	b.n	800991a <Paint_DrawChar+0x8a>
	} // Write all
}
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b008      	add	sp, #32
 8009a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	200001d8 	.word	0x200001d8
 8009a54:	080160fc 	.word	0x080160fc

08009a58 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009a58:	b5b0      	push	{r4, r5, r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	60ba      	str	r2, [r7, #8]
 8009a60:	607b      	str	r3, [r7, #4]
 8009a62:	240e      	movs	r4, #14
 8009a64:	193b      	adds	r3, r7, r4
 8009a66:	1c02      	adds	r2, r0, #0
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	200c      	movs	r0, #12
 8009a6c:	183b      	adds	r3, r7, r0
 8009a6e:	1c0a      	adds	r2, r1, #0
 8009a70:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 8009a72:	2316      	movs	r3, #22
 8009a74:	18fb      	adds	r3, r7, r3
 8009a76:	0021      	movs	r1, r4
 8009a78:	187a      	adds	r2, r7, r1
 8009a7a:	8812      	ldrh	r2, [r2, #0]
 8009a7c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 8009a7e:	2314      	movs	r3, #20
 8009a80:	18fb      	adds	r3, r7, r3
 8009a82:	183a      	adds	r2, r7, r0
 8009a84:	8812      	ldrh	r2, [r2, #0]
 8009a86:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8009a88:	4b30      	ldr	r3, [pc, #192]	; (8009b4c <Paint_DrawString_EN+0xf4>)
 8009a8a:	889b      	ldrh	r3, [r3, #4]
 8009a8c:	187a      	adds	r2, r7, r1
 8009a8e:	8812      	ldrh	r2, [r2, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d805      	bhi.n	8009aa0 <Paint_DrawString_EN+0x48>
 8009a94:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <Paint_DrawString_EN+0xf4>)
 8009a96:	88db      	ldrh	r3, [r3, #6]
 8009a98:	183a      	adds	r2, r7, r0
 8009a9a:	8812      	ldrh	r2, [r2, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d94e      	bls.n	8009b3e <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009aa0:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <Paint_DrawString_EN+0xf8>)
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f009 fc86 	bl	80133b4 <puts>
		return;
 8009aa8:	e04d      	b.n	8009b46 <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 8009aaa:	2116      	movs	r1, #22
 8009aac:	187b      	adds	r3, r7, r1
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	8892      	ldrh	r2, [r2, #4]
 8009ab4:	189b      	adds	r3, r3, r2
 8009ab6:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <Paint_DrawString_EN+0xf4>)
 8009ab8:	8892      	ldrh	r2, [r2, #4]
 8009aba:	4293      	cmp	r3, r2
 8009abc:	dd0c      	ble.n	8009ad8 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	220e      	movs	r2, #14
 8009ac2:	18ba      	adds	r2, r7, r2
 8009ac4:	8812      	ldrh	r2, [r2, #0]
 8009ac6:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	88d9      	ldrh	r1, [r3, #6]
 8009acc:	2214      	movs	r2, #20
 8009ace:	18bb      	adds	r3, r7, r2
 8009ad0:	18ba      	adds	r2, r7, r2
 8009ad2:	8812      	ldrh	r2, [r2, #0]
 8009ad4:	188a      	adds	r2, r1, r2
 8009ad6:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 8009ad8:	2114      	movs	r1, #20
 8009ada:	187b      	adds	r3, r7, r1
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	88d2      	ldrh	r2, [r2, #6]
 8009ae2:	189b      	adds	r3, r3, r2
 8009ae4:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <Paint_DrawString_EN+0xf4>)
 8009ae6:	88d2      	ldrh	r2, [r2, #6]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	dd0a      	ble.n	8009b02 <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 8009aec:	2316      	movs	r3, #22
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	220e      	movs	r2, #14
 8009af2:	18ba      	adds	r2, r7, r2
 8009af4:	8812      	ldrh	r2, [r2, #0]
 8009af6:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 8009af8:	187b      	adds	r3, r7, r1
 8009afa:	220c      	movs	r2, #12
 8009afc:	18ba      	adds	r2, r7, r2
 8009afe:	8812      	ldrh	r2, [r2, #0]
 8009b00:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	687c      	ldr	r4, [r7, #4]
 8009b08:	2314      	movs	r3, #20
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	8819      	ldrh	r1, [r3, #0]
 8009b0e:	2516      	movs	r5, #22
 8009b10:	197b      	adds	r3, r7, r5
 8009b12:	8818      	ldrh	r0, [r3, #0]
 8009b14:	232c      	movs	r3, #44	; 0x2c
 8009b16:	18fb      	adds	r3, r7, r3
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	2328      	movs	r3, #40	; 0x28
 8009b1e:	18fb      	adds	r3, r7, r3
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	0023      	movs	r3, r4
 8009b26:	f7ff feb3 	bl	8009890 <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8899      	ldrh	r1, [r3, #4]
 8009b34:	197b      	adds	r3, r7, r5
 8009b36:	197a      	adds	r2, r7, r5
 8009b38:	8812      	ldrh	r2, [r2, #0]
 8009b3a:	188a      	adds	r2, r1, r2
 8009b3c:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1b1      	bne.n	8009aaa <Paint_DrawString_EN+0x52>
	}
}
 8009b46:	46bd      	mov	sp, r7
 8009b48:	b006      	add	sp, #24
 8009b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4c:	200001d8 	.word	0x200001d8
 8009b50:	0801613c 	.word	0x0801613c

08009b54 <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8009b54:	b5b0      	push	{r4, r5, r7, lr}
 8009b56:	4c6b      	ldr	r4, [pc, #428]	; (8009d04 <Paint_DrawNum+0x1b0>)
 8009b58:	44a5      	add	sp, r4
 8009b5a:	af02      	add	r7, sp, #8
 8009b5c:	60ba      	str	r2, [r7, #8]
 8009b5e:	607b      	str	r3, [r7, #4]
 8009b60:	4b69      	ldr	r3, [pc, #420]	; (8009d08 <Paint_DrawNum+0x1b4>)
 8009b62:	2286      	movs	r2, #134	; 0x86
 8009b64:	0092      	lsls	r2, r2, #2
 8009b66:	4694      	mov	ip, r2
 8009b68:	44bc      	add	ip, r7
 8009b6a:	4463      	add	r3, ip
 8009b6c:	1c02      	adds	r2, r0, #0
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	4b66      	ldr	r3, [pc, #408]	; (8009d0c <Paint_DrawNum+0x1b8>)
 8009b72:	2286      	movs	r2, #134	; 0x86
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	4694      	mov	ip, r2
 8009b78:	44bc      	add	ip, r7
 8009b7a:	4463      	add	r3, ip
 8009b7c:	1c0a      	adds	r2, r1, #0
 8009b7e:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 8009b80:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <Paint_DrawNum+0x1bc>)
 8009b82:	18fb      	adds	r3, r7, r3
 8009b84:	2200      	movs	r2, #0
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	2385      	movs	r3, #133	; 0x85
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	18fb      	adds	r3, r7, r3
 8009b8e:	2200      	movs	r2, #0
 8009b90:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 8009b92:	4b60      	ldr	r3, [pc, #384]	; (8009d14 <Paint_DrawNum+0x1c0>)
 8009b94:	2286      	movs	r2, #134	; 0x86
 8009b96:	0092      	lsls	r2, r2, #2
 8009b98:	4694      	mov	ip, r2
 8009b9a:	44bc      	add	ip, r7
 8009b9c:	4463      	add	r3, ip
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	22fb      	movs	r2, #251	; 0xfb
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f009 fac7 	bl	801313c <memset>
 8009bae:	4b5a      	ldr	r3, [pc, #360]	; (8009d18 <Paint_DrawNum+0x1c4>)
 8009bb0:	2286      	movs	r2, #134	; 0x86
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	4694      	mov	ip, r2
 8009bb6:	44bc      	add	ip, r7
 8009bb8:	4463      	add	r3, ip
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	22fb      	movs	r2, #251	; 0xfb
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	f009 fab9 	bl	801313c <memset>
	uint8_t *pStr = Str_Array;
 8009bca:	2388      	movs	r3, #136	; 0x88
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	2284      	movs	r2, #132	; 0x84
 8009bd2:	0092      	lsls	r2, r2, #2
 8009bd4:	18ba      	adds	r2, r7, r2
 8009bd6:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009bd8:	4b50      	ldr	r3, [pc, #320]	; (8009d1c <Paint_DrawNum+0x1c8>)
 8009bda:	889b      	ldrh	r3, [r3, #4]
 8009bdc:	4a4a      	ldr	r2, [pc, #296]	; (8009d08 <Paint_DrawNum+0x1b4>)
 8009bde:	2186      	movs	r1, #134	; 0x86
 8009be0:	0089      	lsls	r1, r1, #2
 8009be2:	468c      	mov	ip, r1
 8009be4:	44bc      	add	ip, r7
 8009be6:	4462      	add	r2, ip
 8009be8:	8812      	ldrh	r2, [r2, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d80a      	bhi.n	8009c04 <Paint_DrawNum+0xb0>
 8009bee:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <Paint_DrawNum+0x1c8>)
 8009bf0:	88db      	ldrh	r3, [r3, #6]
 8009bf2:	4a46      	ldr	r2, [pc, #280]	; (8009d0c <Paint_DrawNum+0x1b8>)
 8009bf4:	2186      	movs	r1, #134	; 0x86
 8009bf6:	0089      	lsls	r1, r1, #2
 8009bf8:	468c      	mov	ip, r1
 8009bfa:	44bc      	add	ip, r7
 8009bfc:	4462      	add	r2, ip
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d927      	bls.n	8009c54 <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8009c04:	4b46      	ldr	r3, [pc, #280]	; (8009d20 <Paint_DrawNum+0x1cc>)
 8009c06:	0018      	movs	r0, r3
 8009c08:	f009 fbd4 	bl	80133b4 <puts>
 8009c0c:	e074      	b.n	8009cf8 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	210a      	movs	r1, #10
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7f6 fbf2 	bl	80003fc <__aeabi_idivmod>
 8009c18:	000b      	movs	r3, r1
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	483c      	ldr	r0, [pc, #240]	; (8009d10 <Paint_DrawNum+0x1bc>)
 8009c1e:	183b      	adds	r3, r7, r0
 8009c20:	2100      	movs	r1, #0
 8009c22:	5e5b      	ldrsh	r3, [r3, r1]
 8009c24:	3230      	adds	r2, #48	; 0x30
 8009c26:	b2d1      	uxtb	r1, r2
 8009c28:	4a3b      	ldr	r2, [pc, #236]	; (8009d18 <Paint_DrawNum+0x1c4>)
 8009c2a:	2486      	movs	r4, #134	; 0x86
 8009c2c:	00a4      	lsls	r4, r4, #2
 8009c2e:	46a4      	mov	ip, r4
 8009c30:	44bc      	add	ip, r7
 8009c32:	4462      	add	r2, ip
 8009c34:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8009c36:	183b      	adds	r3, r7, r0
 8009c38:	2200      	movs	r2, #0
 8009c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3301      	adds	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	183b      	adds	r3, r7, r0
 8009c44:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	210a      	movs	r1, #10
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f7f6 faf0 	bl	8000230 <__divsi3>
 8009c50:	0003      	movs	r3, r0
 8009c52:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d9      	bne.n	8009c0e <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 8009c5a:	e027      	b.n	8009cac <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8009c5c:	482c      	ldr	r0, [pc, #176]	; (8009d10 <Paint_DrawNum+0x1bc>)
 8009c5e:	183b      	adds	r3, r7, r0
 8009c60:	2200      	movs	r2, #0
 8009c62:	5e9b      	ldrsh	r3, [r3, r2]
 8009c64:	1e5a      	subs	r2, r3, #1
 8009c66:	2485      	movs	r4, #133	; 0x85
 8009c68:	00a4      	lsls	r4, r4, #2
 8009c6a:	193b      	adds	r3, r7, r4
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	5e5b      	ldrsh	r3, [r3, r1]
 8009c70:	4929      	ldr	r1, [pc, #164]	; (8009d18 <Paint_DrawNum+0x1c4>)
 8009c72:	2586      	movs	r5, #134	; 0x86
 8009c74:	00ad      	lsls	r5, r5, #2
 8009c76:	46ac      	mov	ip, r5
 8009c78:	44bc      	add	ip, r7
 8009c7a:	4461      	add	r1, ip
 8009c7c:	5c89      	ldrb	r1, [r1, r2]
 8009c7e:	4a25      	ldr	r2, [pc, #148]	; (8009d14 <Paint_DrawNum+0x1c0>)
 8009c80:	2586      	movs	r5, #134	; 0x86
 8009c82:	00ad      	lsls	r5, r5, #2
 8009c84:	46ac      	mov	ip, r5
 8009c86:	44bc      	add	ip, r7
 8009c88:	4462      	add	r2, ip
 8009c8a:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 8009c8c:	193b      	adds	r3, r7, r4
 8009c8e:	2200      	movs	r2, #0
 8009c90:	5e9b      	ldrsh	r3, [r3, r2]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3301      	adds	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	193b      	adds	r3, r7, r4
 8009c9a:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 8009c9c:	183b      	adds	r3, r7, r0
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	183b      	adds	r3, r7, r0
 8009caa:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 8009cac:	4b18      	ldr	r3, [pc, #96]	; (8009d10 <Paint_DrawNum+0x1bc>)
 8009cae:	18fb      	adds	r3, r7, r3
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	5e9b      	ldrsh	r3, [r3, r2]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dcd1      	bgt.n	8009c5c <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 8009cb8:	687c      	ldr	r4, [r7, #4]
 8009cba:	2384      	movs	r3, #132	; 0x84
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <Paint_DrawNum+0x1b8>)
 8009cc4:	2186      	movs	r1, #134	; 0x86
 8009cc6:	0089      	lsls	r1, r1, #2
 8009cc8:	468c      	mov	ip, r1
 8009cca:	44bc      	add	ip, r7
 8009ccc:	4463      	add	r3, ip
 8009cce:	8819      	ldrh	r1, [r3, #0]
 8009cd0:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <Paint_DrawNum+0x1b4>)
 8009cd2:	2086      	movs	r0, #134	; 0x86
 8009cd4:	0080      	lsls	r0, r0, #2
 8009cd6:	4684      	mov	ip, r0
 8009cd8:	44bc      	add	ip, r7
 8009cda:	4463      	add	r3, ip
 8009cdc:	8818      	ldrh	r0, [r3, #0]
 8009cde:	238b      	movs	r3, #139	; 0x8b
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	18fb      	adds	r3, r7, r3
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	238a      	movs	r3, #138	; 0x8a
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	18fb      	adds	r3, r7, r3
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	0023      	movs	r3, r4
 8009cf4:	f7ff feb0 	bl	8009a58 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	2386      	movs	r3, #134	; 0x86
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	449d      	add	sp, r3
 8009d00:	bdb0      	pop	{r4, r5, r7, pc}
 8009d02:	46c0      	nop			; (mov r8, r8)
 8009d04:	fffffde0 	.word	0xfffffde0
 8009d08:	fffffdf6 	.word	0xfffffdf6
 8009d0c:	fffffdf4 	.word	0xfffffdf4
 8009d10:	00000216 	.word	0x00000216
 8009d14:	fffffef8 	.word	0xfffffef8
 8009d18:	fffffdf8 	.word	0xfffffdf8
 8009d1c:	200001d8 	.word	0x200001d8
 8009d20:	08016180 	.word	0x08016180

08009d24 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	2201      	movs	r2, #1
 8009d32:	431a      	orrs	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	609a      	str	r2, [r3, #8]
}
 8009d38:	46c0      	nop			; (mov r8, r8)
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	b002      	add	sp, #8
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2218      	movs	r2, #24
 8009d50:	4393      	bics	r3, r2
 8009d52:	001a      	movs	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	609a      	str	r2, [r3, #8]
}
 8009d5c:	46c0      	nop			; (mov r8, r8)
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b002      	add	sp, #8
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	615a      	str	r2, [r3, #20]
}
 8009d74:	46c0      	nop			; (mov r8, r8)
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b002      	add	sp, #8
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	601a      	str	r2, [r3, #0]
}
 8009d8c:	46c0      	nop			; (mov r8, r8)
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b002      	add	sp, #8
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	000a      	movs	r2, r1
 8009d9e:	1cbb      	adds	r3, r7, #2
 8009da0:	801a      	strh	r2, [r3, #0]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	1cba      	adds	r2, r7, #2
 8009daa:	8812      	ldrh	r2, [r2, #0]
 8009dac:	801a      	strh	r2, [r3, #0]
}
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b004      	add	sp, #16
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	b29b      	uxth	r3, r3
}
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009dd4:	4b07      	ldr	r3, [pc, #28]	; (8009df4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009dd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4013      	ands	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dea:	68fb      	ldr	r3, [r7, #12]
}
 8009dec:	46c0      	nop			; (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b004      	add	sp, #16
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40021000 	.word	0x40021000

08009df8 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8009df8:	b5b0      	push	{r4, r5, r7, lr}
 8009dfa:	b090      	sub	sp, #64	; 0x40
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	0002      	movs	r2, r0
 8009e00:	1dfb      	adds	r3, r7, #7
 8009e02:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8009e04:	231a      	movs	r3, #26
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	2205      	movs	r2, #5
 8009e0a:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e10:	2300      	movs	r3, #0
 8009e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e14:	2300      	movs	r3, #0
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8009e18:	2300      	movs	r3, #0
 8009e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e20:	2300      	movs	r3, #0
 8009e22:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8009e24:	2300      	movs	r3, #0
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	2300      	movs	r3, #0
 8009e2a:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8009e30:	2200      	movs	r2, #0
 8009e32:	2300      	movs	r3, #0
 8009e34:	613a      	str	r2, [r7, #16]
 8009e36:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8009e38:	231b      	movs	r3, #27
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]

  EE_Status status = EE_OK;
 8009e40:	230e      	movs	r3, #14
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	2200      	movs	r2, #0
 8009e46:	801a      	strh	r2, [r3, #0]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8009e48:	f001 fe5d 	bl	800bb06 <FI_CheckBankConfig>
 8009e4c:	1e03      	subs	r3, r0, #0
 8009e4e:	d002      	beq.n	8009e56 <EE_Init+0x5e>
  {
    return EE_INVALID_BANK_CFG;
 8009e50:	230e      	movs	r3, #14
 8009e52:	f000 fd72 	bl	800a93a <EE_Init+0xb42>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8009e56:	f001 fdd7 	bl	800ba08 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8009e5a:	4baa      	ldr	r3, [pc, #680]	; (800a104 <EE_Init+0x30c>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009e60:	4ba9      	ldr	r3, [pc, #676]	; (800a108 <EE_Init+0x310>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	029a      	lsls	r2, r3, #10
 8009e66:	23ff      	movs	r3, #255	; 0xff
 8009e68:	029b      	lsls	r3, r3, #10
 8009e6a:	401a      	ands	r2, r3
 8009e6c:	23d4      	movs	r3, #212	; 0xd4
 8009e6e:	025b      	lsls	r3, r3, #9
 8009e70:	0011      	movs	r1, r2
 8009e72:	0018      	movs	r0, r3
 8009e74:	f7f6 f9d8 	bl	8000228 <__aeabi_uidivmod>
 8009e78:	000b      	movs	r3, r1
 8009e7a:	0adb      	lsrs	r3, r3, #11
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e7e:	e035      	b.n	8009eec <EE_Init+0xf4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e82:	2280      	movs	r2, #128	; 0x80
 8009e84:	0252      	lsls	r2, r2, #9
 8009e86:	4694      	mov	ip, r2
 8009e88:	4463      	add	r3, ip
 8009e8a:	02dc      	lsls	r4, r3, #11
 8009e8c:	4b9e      	ldr	r3, [pc, #632]	; (800a108 <EE_Init+0x310>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	029a      	lsls	r2, r3, #10
 8009e92:	23ff      	movs	r3, #255	; 0xff
 8009e94:	029b      	lsls	r3, r3, #10
 8009e96:	4013      	ands	r3, r2
 8009e98:	0019      	movs	r1, r3
 8009e9a:	23d4      	movs	r3, #212	; 0xd4
 8009e9c:	0258      	lsls	r0, r3, #9
 8009e9e:	f7f6 f93d 	bl	800011c <__udivsi3>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	0019      	movs	r1, r3
 8009ea6:	4b98      	ldr	r3, [pc, #608]	; (800a108 <EE_Init+0x310>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	029a      	lsls	r2, r3, #10
 8009eac:	23ff      	movs	r3, #255	; 0xff
 8009eae:	029b      	lsls	r3, r3, #10
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	434b      	muls	r3, r1
 8009eb4:	18e3      	adds	r3, r4, r3
 8009eb6:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34
 8009ebc:	e00e      	b.n	8009edc <EE_Init+0xe4>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8009ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	18d2      	adds	r2, r2, r3
 8009ec4:	4b91      	ldr	r3, [pc, #580]	; (800a10c <EE_Init+0x314>)
 8009ec6:	601a      	str	r2, [r3, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8009ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ecc:	18d3      	adds	r3, r2, r3
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	613a      	str	r2, [r7, #16]
 8009ed4:	617b      	str	r3, [r7, #20]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	3308      	adds	r3, #8
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
 8009edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ede:	2380      	movs	r3, #128	; 0x80
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d3eb      	bcc.n	8009ebe <EE_Init+0xc6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee8:	3301      	adds	r3, #1
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eec:	4b86      	ldr	r3, [pc, #536]	; (800a108 <EE_Init+0x310>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	029a      	lsls	r2, r3, #10
 8009ef2:	23ff      	movs	r3, #255	; 0xff
 8009ef4:	029b      	lsls	r3, r3, #10
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	23d4      	movs	r3, #212	; 0xd4
 8009efa:	025b      	lsls	r3, r3, #9
 8009efc:	0011      	movs	r1, r2
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7f6 f992 	bl	8000228 <__aeabi_uidivmod>
 8009f04:	000b      	movs	r3, r1
 8009f06:	0adb      	lsrs	r3, r3, #11
 8009f08:	330a      	adds	r3, #10
 8009f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d3b7      	bcc.n	8009e80 <EE_Init+0x88>
     Address=(0x8000000|(FLASH->ECCR & 0x000FFFFF)); //Recovery of address where ECC error occured
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8009f10:	4b7c      	ldr	r3, [pc, #496]	; (800a104 <EE_Init+0x30c>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009f16:	4b7c      	ldr	r3, [pc, #496]	; (800a108 <EE_Init+0x310>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	029a      	lsls	r2, r3, #10
 8009f1c:	23ff      	movs	r3, #255	; 0xff
 8009f1e:	029b      	lsls	r3, r3, #10
 8009f20:	401a      	ands	r2, r3
 8009f22:	23d4      	movs	r3, #212	; 0xd4
 8009f24:	025b      	lsls	r3, r3, #9
 8009f26:	0011      	movs	r1, r2
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f7f6 f97d 	bl	8000228 <__aeabi_uidivmod>
 8009f2e:	000b      	movs	r3, r1
 8009f30:	0adb      	lsrs	r3, r3, #11
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f34:	e041      	b.n	8009fba <EE_Init+0x1c2>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f38:	2280      	movs	r2, #128	; 0x80
 8009f3a:	0252      	lsls	r2, r2, #9
 8009f3c:	4694      	mov	ip, r2
 8009f3e:	4463      	add	r3, ip
 8009f40:	02dc      	lsls	r4, r3, #11
 8009f42:	4b71      	ldr	r3, [pc, #452]	; (800a108 <EE_Init+0x310>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	029a      	lsls	r2, r3, #10
 8009f48:	23ff      	movs	r3, #255	; 0xff
 8009f4a:	029b      	lsls	r3, r3, #10
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	0019      	movs	r1, r3
 8009f50:	23d4      	movs	r3, #212	; 0xd4
 8009f52:	0258      	lsls	r0, r3, #9
 8009f54:	f7f6 f8e2 	bl	800011c <__udivsi3>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	0019      	movs	r1, r3
 8009f5c:	4b6a      	ldr	r3, [pc, #424]	; (800a108 <EE_Init+0x310>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	029a      	lsls	r2, r3, #10
 8009f62:	23ff      	movs	r3, #255	; 0xff
 8009f64:	029b      	lsls	r3, r3, #10
 8009f66:	4013      	ands	r3, r2
 8009f68:	434b      	muls	r3, r1
 8009f6a:	18e3      	adds	r3, r4, r3
 8009f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8009f6e:	251a      	movs	r5, #26
 8009f70:	197c      	adds	r4, r7, r5
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	0018      	movs	r0, r3
 8009f76:	f001 fcf7 	bl	800b968 <GetPageState>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	7023      	strb	r3, [r4, #0]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8009f7e:	197b      	adds	r3, r7, r5
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d003      	beq.n	8009f8e <EE_Init+0x196>
 8009f86:	197b      	adds	r3, r7, r5
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d103      	bne.n	8009f96 <EE_Init+0x19e>
    {
      nbactivereceivepage++;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	3301      	adds	r3, #1
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f94:	e00e      	b.n	8009fb4 <EE_Init+0x1bc>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8009f96:	231a      	movs	r3, #26
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d109      	bne.n	8009fb4 <EE_Init+0x1bc>
    {
      if (nbvalidpage == 0U)
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <EE_Init+0x1b2>
      {
        firstvalidpage = page;
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa8:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8009faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fba:	4b53      	ldr	r3, [pc, #332]	; (800a108 <EE_Init+0x310>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	029a      	lsls	r2, r3, #10
 8009fc0:	23ff      	movs	r3, #255	; 0xff
 8009fc2:	029b      	lsls	r3, r3, #10
 8009fc4:	401a      	ands	r2, r3
 8009fc6:	23d4      	movs	r3, #212	; 0xd4
 8009fc8:	025b      	lsls	r3, r3, #9
 8009fca:	0011      	movs	r1, r2
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7f6 f92b 	bl	8000228 <__aeabi_uidivmod>
 8009fd2:	000b      	movs	r3, r1
 8009fd4:	0adb      	lsrs	r3, r3, #11
 8009fd6:	330a      	adds	r3, #10
 8009fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d3ab      	bcc.n	8009f36 <EE_Init+0x13e>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8009fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d000      	beq.n	8009fe6 <EE_Init+0x1ee>
 8009fe4:	e07d      	b.n	800a0e2 <EE_Init+0x2ea>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d074      	beq.n	800a0d6 <EE_Init+0x2de>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8009fec:	4b46      	ldr	r3, [pc, #280]	; (800a108 <EE_Init+0x310>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	029a      	lsls	r2, r3, #10
 8009ff2:	23ff      	movs	r3, #255	; 0xff
 8009ff4:	029b      	lsls	r3, r3, #10
 8009ff6:	401a      	ands	r2, r3
 8009ff8:	23d4      	movs	r3, #212	; 0xd4
 8009ffa:	025b      	lsls	r3, r3, #9
 8009ffc:	0011      	movs	r1, r2
 8009ffe:	0018      	movs	r0, r3
 800a000:	f7f6 f912 	bl	8000228 <__aeabi_uidivmod>
 800a004:	000b      	movs	r3, r1
 800a006:	0adb      	lsrs	r3, r3, #11
 800a008:	6a3a      	ldr	r2, [r7, #32]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	3309      	adds	r3, #9
 800a00e:	210a      	movs	r1, #10
 800a010:	0018      	movs	r0, r3
 800a012:	f7f6 f909 	bl	8000228 <__aeabi_uidivmod>
 800a016:	000b      	movs	r3, r1
 800a018:	001c      	movs	r4, r3
 800a01a:	4b3b      	ldr	r3, [pc, #236]	; (800a108 <EE_Init+0x310>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	029a      	lsls	r2, r3, #10
 800a020:	23ff      	movs	r3, #255	; 0xff
 800a022:	029b      	lsls	r3, r3, #10
 800a024:	401a      	ands	r2, r3
 800a026:	23d4      	movs	r3, #212	; 0xd4
 800a028:	025b      	lsls	r3, r3, #9
 800a02a:	0011      	movs	r1, r2
 800a02c:	0018      	movs	r0, r3
 800a02e:	f7f6 f8fb 	bl	8000228 <__aeabi_uidivmod>
 800a032:	000b      	movs	r3, r1
 800a034:	0adb      	lsrs	r3, r3, #11
 800a036:	18e3      	adds	r3, r4, r3
 800a038:	2280      	movs	r2, #128	; 0x80
 800a03a:	0252      	lsls	r2, r2, #9
 800a03c:	4694      	mov	ip, r2
 800a03e:	4463      	add	r3, ip
 800a040:	02dc      	lsls	r4, r3, #11
 800a042:	4b31      	ldr	r3, [pc, #196]	; (800a108 <EE_Init+0x310>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	029a      	lsls	r2, r3, #10
 800a048:	23ff      	movs	r3, #255	; 0xff
 800a04a:	029b      	lsls	r3, r3, #10
 800a04c:	4013      	ands	r3, r2
 800a04e:	0019      	movs	r1, r3
 800a050:	23d4      	movs	r3, #212	; 0xd4
 800a052:	0258      	lsls	r0, r3, #9
 800a054:	f7f6 f862 	bl	800011c <__udivsi3>
 800a058:	0003      	movs	r3, r0
 800a05a:	0019      	movs	r1, r3
 800a05c:	4b2a      	ldr	r3, [pc, #168]	; (800a108 <EE_Init+0x310>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	029a      	lsls	r2, r3, #10
 800a062:	23ff      	movs	r3, #255	; 0xff
 800a064:	029b      	lsls	r3, r3, #10
 800a066:	4013      	ands	r3, r2
 800a068:	434b      	muls	r3, r1
 800a06a:	18e3      	adds	r3, r4, r3
 800a06c:	0018      	movs	r0, r3
 800a06e:	f001 fc7b 	bl	800b968 <GetPageState>
 800a072:	0003      	movs	r3, r0
 800a074:	2b04      	cmp	r3, #4
 800a076:	d134      	bne.n	800a0e2 <EE_Init+0x2ea>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 800a078:	4b23      	ldr	r3, [pc, #140]	; (800a108 <EE_Init+0x310>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	029a      	lsls	r2, r3, #10
 800a07e:	23ff      	movs	r3, #255	; 0xff
 800a080:	029b      	lsls	r3, r3, #10
 800a082:	401a      	ands	r2, r3
 800a084:	23d4      	movs	r3, #212	; 0xd4
 800a086:	025b      	lsls	r3, r3, #9
 800a088:	0011      	movs	r1, r2
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7f6 f8cc 	bl	8000228 <__aeabi_uidivmod>
 800a090:	000b      	movs	r3, r1
 800a092:	0adb      	lsrs	r3, r3, #11
 800a094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	3301      	adds	r3, #1
 800a09a:	210a      	movs	r1, #10
 800a09c:	0018      	movs	r0, r3
 800a09e:	f7f6 f8c3 	bl	8000228 <__aeabi_uidivmod>
 800a0a2:	000b      	movs	r3, r1
 800a0a4:	001c      	movs	r4, r3
 800a0a6:	4b18      	ldr	r3, [pc, #96]	; (800a108 <EE_Init+0x310>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	029a      	lsls	r2, r3, #10
 800a0ac:	23ff      	movs	r3, #255	; 0xff
 800a0ae:	029b      	lsls	r3, r3, #10
 800a0b0:	401a      	ands	r2, r3
 800a0b2:	23d4      	movs	r3, #212	; 0xd4
 800a0b4:	025b      	lsls	r3, r3, #9
 800a0b6:	0011      	movs	r1, r2
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f7f6 f8b5 	bl	8000228 <__aeabi_uidivmod>
 800a0be:	000b      	movs	r3, r1
 800a0c0:	0adb      	lsrs	r3, r3, #11
 800a0c2:	18e3      	adds	r3, r4, r3
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	f001 fb7c 	bl	800b7c4 <SetPageState>
 800a0cc:	1e03      	subs	r3, r0, #0
 800a0ce:	d008      	beq.n	800a0e2 <EE_Init+0x2ea>
        {
          return EE_WRITE_ERROR;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	f000 fc32 	bl	800a93a <EE_Init+0xb42>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	f000 fc36 	bl	800a948 <EE_Format>
 800a0dc:	0003      	movs	r3, r0
 800a0de:	f000 fc2c 	bl	800a93a <EE_Init+0xb42>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <EE_Init+0x310>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	029a      	lsls	r2, r3, #10
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	029b      	lsls	r3, r3, #10
 800a0ec:	401a      	ands	r2, r3
 800a0ee:	23d4      	movs	r3, #212	; 0xd4
 800a0f0:	025b      	lsls	r3, r3, #9
 800a0f2:	0011      	movs	r1, r2
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f7f6 f897 	bl	8000228 <__aeabi_uidivmod>
 800a0fa:	000b      	movs	r3, r1
 800a0fc:	0adb      	lsrs	r3, r3, #11
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a100:	e10c      	b.n	800a31c <EE_Init+0x524>
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	200001bc 	.word	0x200001bc
 800a108:	1fff75e0 	.word	0x1fff75e0
 800a10c:	200001b8 	.word	0x200001b8
  {
    pageaddress = PAGE_ADDRESS(page);
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	2280      	movs	r2, #128	; 0x80
 800a114:	0252      	lsls	r2, r2, #9
 800a116:	4694      	mov	ip, r2
 800a118:	4463      	add	r3, ip
 800a11a:	02dc      	lsls	r4, r3, #11
 800a11c:	4be0      	ldr	r3, [pc, #896]	; (800a4a0 <EE_Init+0x6a8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	029a      	lsls	r2, r3, #10
 800a122:	23ff      	movs	r3, #255	; 0xff
 800a124:	029b      	lsls	r3, r3, #10
 800a126:	4013      	ands	r3, r2
 800a128:	0019      	movs	r1, r3
 800a12a:	23d4      	movs	r3, #212	; 0xd4
 800a12c:	0258      	lsls	r0, r3, #9
 800a12e:	f7f5 fff5 	bl	800011c <__udivsi3>
 800a132:	0003      	movs	r3, r0
 800a134:	0019      	movs	r1, r3
 800a136:	4bda      	ldr	r3, [pc, #872]	; (800a4a0 <EE_Init+0x6a8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	029a      	lsls	r2, r3, #10
 800a13c:	23ff      	movs	r3, #255	; 0xff
 800a13e:	029b      	lsls	r3, r3, #10
 800a140:	4013      	ands	r3, r2
 800a142:	434b      	muls	r3, r1
 800a144:	18e3      	adds	r3, r4, r3
 800a146:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a148:	251a      	movs	r5, #26
 800a14a:	197c      	adds	r4, r7, r5
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	0018      	movs	r0, r3
 800a150:	f001 fc0a 	bl	800b968 <GetPageState>
 800a154:	0003      	movs	r3, r0
 800a156:	7023      	strb	r3, [r4, #0]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 800a158:	197b      	adds	r3, r7, r5
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d000      	beq.n	800a162 <EE_Init+0x36a>
 800a160:	e0d9      	b.n	800a316 <EE_Init+0x51e>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a162:	4bcf      	ldr	r3, [pc, #828]	; (800a4a0 <EE_Init+0x6a8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	029a      	lsls	r2, r3, #10
 800a168:	23ff      	movs	r3, #255	; 0xff
 800a16a:	029b      	lsls	r3, r3, #10
 800a16c:	401a      	ands	r2, r3
 800a16e:	23d4      	movs	r3, #212	; 0xd4
 800a170:	025b      	lsls	r3, r3, #9
 800a172:	0011      	movs	r1, r2
 800a174:	0018      	movs	r0, r3
 800a176:	f7f6 f857 	bl	8000228 <__aeabi_uidivmod>
 800a17a:	000b      	movs	r3, r1
 800a17c:	0adb      	lsrs	r3, r3, #11
 800a17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a180:	429a      	cmp	r2, r3
 800a182:	d061      	beq.n	800a248 <EE_Init+0x450>
 800a184:	4bc6      	ldr	r3, [pc, #792]	; (800a4a0 <EE_Init+0x6a8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	029a      	lsls	r2, r3, #10
 800a18a:	23ff      	movs	r3, #255	; 0xff
 800a18c:	029b      	lsls	r3, r3, #10
 800a18e:	401a      	ands	r2, r3
 800a190:	23d4      	movs	r3, #212	; 0xd4
 800a192:	025b      	lsls	r3, r3, #9
 800a194:	0011      	movs	r1, r2
 800a196:	0018      	movs	r0, r3
 800a198:	f7f6 f846 	bl	8000228 <__aeabi_uidivmod>
 800a19c:	000b      	movs	r3, r1
 800a19e:	0adb      	lsrs	r3, r3, #11
 800a1a0:	3305      	adds	r3, #5
 800a1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d04f      	beq.n	800a248 <EE_Init+0x450>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a1a8:	4bbd      	ldr	r3, [pc, #756]	; (800a4a0 <EE_Init+0x6a8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	029a      	lsls	r2, r3, #10
 800a1ae:	23ff      	movs	r3, #255	; 0xff
 800a1b0:	029b      	lsls	r3, r3, #10
 800a1b2:	401a      	ands	r2, r3
 800a1b4:	23d4      	movs	r3, #212	; 0xd4
 800a1b6:	025b      	lsls	r3, r3, #9
 800a1b8:	0011      	movs	r1, r2
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7f6 f834 	bl	8000228 <__aeabi_uidivmod>
 800a1c0:	000b      	movs	r3, r1
 800a1c2:	0adb      	lsrs	r3, r3, #11
 800a1c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	3309      	adds	r3, #9
 800a1ca:	210a      	movs	r1, #10
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7f6 f82b 	bl	8000228 <__aeabi_uidivmod>
 800a1d2:	000b      	movs	r3, r1
 800a1d4:	001c      	movs	r4, r3
 800a1d6:	4bb2      	ldr	r3, [pc, #712]	; (800a4a0 <EE_Init+0x6a8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	029a      	lsls	r2, r3, #10
 800a1dc:	23ff      	movs	r3, #255	; 0xff
 800a1de:	029b      	lsls	r3, r3, #10
 800a1e0:	401a      	ands	r2, r3
 800a1e2:	23d4      	movs	r3, #212	; 0xd4
 800a1e4:	025b      	lsls	r3, r3, #9
 800a1e6:	0011      	movs	r1, r2
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7f6 f81d 	bl	8000228 <__aeabi_uidivmod>
 800a1ee:	000b      	movs	r3, r1
 800a1f0:	0adb      	lsrs	r3, r3, #11
 800a1f2:	18e3      	adds	r3, r4, r3
 800a1f4:	2280      	movs	r2, #128	; 0x80
 800a1f6:	0252      	lsls	r2, r2, #9
 800a1f8:	4694      	mov	ip, r2
 800a1fa:	4463      	add	r3, ip
 800a1fc:	02dc      	lsls	r4, r3, #11
 800a1fe:	4ba8      	ldr	r3, [pc, #672]	; (800a4a0 <EE_Init+0x6a8>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	029a      	lsls	r2, r3, #10
 800a204:	23ff      	movs	r3, #255	; 0xff
 800a206:	029b      	lsls	r3, r3, #10
 800a208:	4013      	ands	r3, r2
 800a20a:	0019      	movs	r1, r3
 800a20c:	23d4      	movs	r3, #212	; 0xd4
 800a20e:	0258      	lsls	r0, r3, #9
 800a210:	f7f5 ff84 	bl	800011c <__udivsi3>
 800a214:	0003      	movs	r3, r0
 800a216:	0019      	movs	r1, r3
 800a218:	4ba1      	ldr	r3, [pc, #644]	; (800a4a0 <EE_Init+0x6a8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	029a      	lsls	r2, r3, #10
 800a21e:	23ff      	movs	r3, #255	; 0xff
 800a220:	029b      	lsls	r3, r3, #10
 800a222:	4013      	ands	r3, r2
 800a224:	434b      	muls	r3, r1
 800a226:	18e3      	adds	r3, r4, r3
 800a228:	0018      	movs	r0, r3
 800a22a:	f001 fb9d 	bl	800b968 <GetPageState>
 800a22e:	0003      	movs	r3, r0
 800a230:	2b03      	cmp	r3, #3
 800a232:	d104      	bne.n	800a23e <EE_Init+0x446>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a234:	231b      	movs	r3, #27
 800a236:	18fb      	adds	r3, r7, r3
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a23c:	e052      	b.n	800a2e4 <EE_Init+0x4ec>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a23e:	231b      	movs	r3, #27
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a246:	e04d      	b.n	800a2e4 <EE_Init+0x4ec>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a248:	4b95      	ldr	r3, [pc, #596]	; (800a4a0 <EE_Init+0x6a8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	029a      	lsls	r2, r3, #10
 800a24e:	23ff      	movs	r3, #255	; 0xff
 800a250:	029b      	lsls	r3, r3, #10
 800a252:	401a      	ands	r2, r3
 800a254:	23d4      	movs	r3, #212	; 0xd4
 800a256:	025b      	lsls	r3, r3, #9
 800a258:	0011      	movs	r1, r2
 800a25a:	0018      	movs	r0, r3
 800a25c:	f7f5 ffe4 	bl	8000228 <__aeabi_uidivmod>
 800a260:	000b      	movs	r3, r1
 800a262:	0adb      	lsrs	r3, r3, #11
 800a264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	3301      	adds	r3, #1
 800a26a:	210a      	movs	r1, #10
 800a26c:	0018      	movs	r0, r3
 800a26e:	f7f5 ffdb 	bl	8000228 <__aeabi_uidivmod>
 800a272:	000b      	movs	r3, r1
 800a274:	001c      	movs	r4, r3
 800a276:	4b8a      	ldr	r3, [pc, #552]	; (800a4a0 <EE_Init+0x6a8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	029a      	lsls	r2, r3, #10
 800a27c:	23ff      	movs	r3, #255	; 0xff
 800a27e:	029b      	lsls	r3, r3, #10
 800a280:	401a      	ands	r2, r3
 800a282:	23d4      	movs	r3, #212	; 0xd4
 800a284:	025b      	lsls	r3, r3, #9
 800a286:	0011      	movs	r1, r2
 800a288:	0018      	movs	r0, r3
 800a28a:	f7f5 ffcd 	bl	8000228 <__aeabi_uidivmod>
 800a28e:	000b      	movs	r3, r1
 800a290:	0adb      	lsrs	r3, r3, #11
 800a292:	18e3      	adds	r3, r4, r3
 800a294:	2280      	movs	r2, #128	; 0x80
 800a296:	0252      	lsls	r2, r2, #9
 800a298:	4694      	mov	ip, r2
 800a29a:	4463      	add	r3, ip
 800a29c:	02dc      	lsls	r4, r3, #11
 800a29e:	4b80      	ldr	r3, [pc, #512]	; (800a4a0 <EE_Init+0x6a8>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	029a      	lsls	r2, r3, #10
 800a2a4:	23ff      	movs	r3, #255	; 0xff
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	0019      	movs	r1, r3
 800a2ac:	23d4      	movs	r3, #212	; 0xd4
 800a2ae:	0258      	lsls	r0, r3, #9
 800a2b0:	f7f5 ff34 	bl	800011c <__udivsi3>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	0019      	movs	r1, r3
 800a2b8:	4b79      	ldr	r3, [pc, #484]	; (800a4a0 <EE_Init+0x6a8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	029a      	lsls	r2, r3, #10
 800a2be:	23ff      	movs	r3, #255	; 0xff
 800a2c0:	029b      	lsls	r3, r3, #10
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	434b      	muls	r3, r1
 800a2c6:	18e3      	adds	r3, r4, r3
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f001 fb4d 	bl	800b968 <GetPageState>
 800a2ce:	1e03      	subs	r3, r0, #0
 800a2d0:	d104      	bne.n	800a2dc <EE_Init+0x4e4>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a2d2:	231b      	movs	r3, #27
 800a2d4:	18fb      	adds	r3, r7, r3
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	e003      	b.n	800a2e4 <EE_Init+0x4ec>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a2dc:	231b      	movs	r3, #27
 800a2de:	18fb      	adds	r3, r7, r3
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 800a2e4:	231b      	movs	r3, #27
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d113      	bne.n	800a316 <EE_Init+0x51e>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800a2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	4b6c      	ldr	r3, [pc, #432]	; (800a4a4 <EE_Init+0x6ac>)
 800a2f4:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f000 ff54 	bl	800b1a8 <PagesTransfer>
 800a300:	0003      	movs	r3, r0
 800a302:	001a      	movs	r2, r3
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	429a      	cmp	r2, r3
 800a30a:	d001      	beq.n	800a310 <EE_Init+0x518>
        {
          return EE_TRANSFER_ERROR;
 800a30c:	230c      	movs	r3, #12
 800a30e:	e314      	b.n	800a93a <EE_Init+0xb42>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 800a310:	2301      	movs	r3, #1
 800a312:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 800a314:	e015      	b.n	800a342 <EE_Init+0x54a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	3301      	adds	r3, #1
 800a31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a31c:	4b60      	ldr	r3, [pc, #384]	; (800a4a0 <EE_Init+0x6a8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	029a      	lsls	r2, r3, #10
 800a322:	23ff      	movs	r3, #255	; 0xff
 800a324:	029b      	lsls	r3, r3, #10
 800a326:	401a      	ands	r2, r3
 800a328:	23d4      	movs	r3, #212	; 0xd4
 800a32a:	025b      	lsls	r3, r3, #9
 800a32c:	0011      	movs	r1, r2
 800a32e:	0018      	movs	r0, r3
 800a330:	f7f5 ff7a 	bl	8000228 <__aeabi_uidivmod>
 800a334:	000b      	movs	r3, r1
 800a336:	0adb      	lsrs	r3, r3, #11
 800a338:	330a      	adds	r3, #10
 800a33a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d200      	bcs.n	800a342 <EE_Init+0x54a>
 800a340:	e6e6      	b.n	800a110 <EE_Init+0x318>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a346:	4b56      	ldr	r3, [pc, #344]	; (800a4a0 <EE_Init+0x6a8>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	029a      	lsls	r2, r3, #10
 800a34c:	23ff      	movs	r3, #255	; 0xff
 800a34e:	029b      	lsls	r3, r3, #10
 800a350:	401a      	ands	r2, r3
 800a352:	23d4      	movs	r3, #212	; 0xd4
 800a354:	025b      	lsls	r3, r3, #9
 800a356:	0011      	movs	r1, r2
 800a358:	0018      	movs	r0, r3
 800a35a:	f7f5 ff65 	bl	8000228 <__aeabi_uidivmod>
 800a35e:	000b      	movs	r3, r1
 800a360:	0adb      	lsrs	r3, r3, #11
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a364:	e10a      	b.n	800a57c <EE_Init+0x784>
  {
    pageaddress = PAGE_ADDRESS(page);
 800a366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a368:	2280      	movs	r2, #128	; 0x80
 800a36a:	0252      	lsls	r2, r2, #9
 800a36c:	4694      	mov	ip, r2
 800a36e:	4463      	add	r3, ip
 800a370:	02dc      	lsls	r4, r3, #11
 800a372:	4b4b      	ldr	r3, [pc, #300]	; (800a4a0 <EE_Init+0x6a8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	029a      	lsls	r2, r3, #10
 800a378:	23ff      	movs	r3, #255	; 0xff
 800a37a:	029b      	lsls	r3, r3, #10
 800a37c:	4013      	ands	r3, r2
 800a37e:	0019      	movs	r1, r3
 800a380:	23d4      	movs	r3, #212	; 0xd4
 800a382:	0258      	lsls	r0, r3, #9
 800a384:	f7f5 feca 	bl	800011c <__udivsi3>
 800a388:	0003      	movs	r3, r0
 800a38a:	0019      	movs	r1, r3
 800a38c:	4b44      	ldr	r3, [pc, #272]	; (800a4a0 <EE_Init+0x6a8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	029a      	lsls	r2, r3, #10
 800a392:	23ff      	movs	r3, #255	; 0xff
 800a394:	029b      	lsls	r3, r3, #10
 800a396:	4013      	ands	r3, r2
 800a398:	434b      	muls	r3, r1
 800a39a:	18e3      	adds	r3, r4, r3
 800a39c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a39e:	251a      	movs	r5, #26
 800a3a0:	197c      	adds	r4, r7, r5
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f001 fadf 	bl	800b968 <GetPageState>
 800a3aa:	0003      	movs	r3, r0
 800a3ac:	7023      	strb	r3, [r4, #0]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800a3ae:	197b      	adds	r3, r7, r5
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d000      	beq.n	800a3b8 <EE_Init+0x5c0>
 800a3b6:	e0d7      	b.n	800a568 <EE_Init+0x770>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a3b8:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <EE_Init+0x6a8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	029a      	lsls	r2, r3, #10
 800a3be:	23ff      	movs	r3, #255	; 0xff
 800a3c0:	029b      	lsls	r3, r3, #10
 800a3c2:	401a      	ands	r2, r3
 800a3c4:	23d4      	movs	r3, #212	; 0xd4
 800a3c6:	025b      	lsls	r3, r3, #9
 800a3c8:	0011      	movs	r1, r2
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f7f5 ff2c 	bl	8000228 <__aeabi_uidivmod>
 800a3d0:	000b      	movs	r3, r1
 800a3d2:	0adb      	lsrs	r3, r3, #11
 800a3d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d066      	beq.n	800a4a8 <EE_Init+0x6b0>
 800a3da:	4b31      	ldr	r3, [pc, #196]	; (800a4a0 <EE_Init+0x6a8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	029a      	lsls	r2, r3, #10
 800a3e0:	23ff      	movs	r3, #255	; 0xff
 800a3e2:	029b      	lsls	r3, r3, #10
 800a3e4:	401a      	ands	r2, r3
 800a3e6:	23d4      	movs	r3, #212	; 0xd4
 800a3e8:	025b      	lsls	r3, r3, #9
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f7f5 ff1b 	bl	8000228 <__aeabi_uidivmod>
 800a3f2:	000b      	movs	r3, r1
 800a3f4:	0adb      	lsrs	r3, r3, #11
 800a3f6:	3305      	adds	r3, #5
 800a3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d054      	beq.n	800a4a8 <EE_Init+0x6b0>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a3fe:	4b28      	ldr	r3, [pc, #160]	; (800a4a0 <EE_Init+0x6a8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	029a      	lsls	r2, r3, #10
 800a404:	23ff      	movs	r3, #255	; 0xff
 800a406:	029b      	lsls	r3, r3, #10
 800a408:	401a      	ands	r2, r3
 800a40a:	23d4      	movs	r3, #212	; 0xd4
 800a40c:	025b      	lsls	r3, r3, #9
 800a40e:	0011      	movs	r1, r2
 800a410:	0018      	movs	r0, r3
 800a412:	f7f5 ff09 	bl	8000228 <__aeabi_uidivmod>
 800a416:	000b      	movs	r3, r1
 800a418:	0adb      	lsrs	r3, r3, #11
 800a41a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	3309      	adds	r3, #9
 800a420:	210a      	movs	r1, #10
 800a422:	0018      	movs	r0, r3
 800a424:	f7f5 ff00 	bl	8000228 <__aeabi_uidivmod>
 800a428:	000b      	movs	r3, r1
 800a42a:	001c      	movs	r4, r3
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <EE_Init+0x6a8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	029a      	lsls	r2, r3, #10
 800a432:	23ff      	movs	r3, #255	; 0xff
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	401a      	ands	r2, r3
 800a438:	23d4      	movs	r3, #212	; 0xd4
 800a43a:	025b      	lsls	r3, r3, #9
 800a43c:	0011      	movs	r1, r2
 800a43e:	0018      	movs	r0, r3
 800a440:	f7f5 fef2 	bl	8000228 <__aeabi_uidivmod>
 800a444:	000b      	movs	r3, r1
 800a446:	0adb      	lsrs	r3, r3, #11
 800a448:	18e3      	adds	r3, r4, r3
 800a44a:	2280      	movs	r2, #128	; 0x80
 800a44c:	0252      	lsls	r2, r2, #9
 800a44e:	4694      	mov	ip, r2
 800a450:	4463      	add	r3, ip
 800a452:	02dc      	lsls	r4, r3, #11
 800a454:	4b12      	ldr	r3, [pc, #72]	; (800a4a0 <EE_Init+0x6a8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	029a      	lsls	r2, r3, #10
 800a45a:	23ff      	movs	r3, #255	; 0xff
 800a45c:	029b      	lsls	r3, r3, #10
 800a45e:	4013      	ands	r3, r2
 800a460:	0019      	movs	r1, r3
 800a462:	23d4      	movs	r3, #212	; 0xd4
 800a464:	0258      	lsls	r0, r3, #9
 800a466:	f7f5 fe59 	bl	800011c <__udivsi3>
 800a46a:	0003      	movs	r3, r0
 800a46c:	0019      	movs	r1, r3
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <EE_Init+0x6a8>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	029a      	lsls	r2, r3, #10
 800a474:	23ff      	movs	r3, #255	; 0xff
 800a476:	029b      	lsls	r3, r3, #10
 800a478:	4013      	ands	r3, r2
 800a47a:	434b      	muls	r3, r1
 800a47c:	18e3      	adds	r3, r4, r3
 800a47e:	0018      	movs	r0, r3
 800a480:	f001 fa72 	bl	800b968 <GetPageState>
 800a484:	0003      	movs	r3, r0
 800a486:	2b03      	cmp	r3, #3
 800a488:	d104      	bne.n	800a494 <EE_Init+0x69c>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a48a:	231b      	movs	r3, #27
 800a48c:	18fb      	adds	r3, r7, r3
 800a48e:	2200      	movs	r2, #0
 800a490:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a492:	e057      	b.n	800a544 <EE_Init+0x74c>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a494:	231b      	movs	r3, #27
 800a496:	18fb      	adds	r3, r7, r3
 800a498:	2201      	movs	r2, #1
 800a49a:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a49c:	e052      	b.n	800a544 <EE_Init+0x74c>
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	1fff75e0 	.word	0x1fff75e0
 800a4a4:	200001b6 	.word	0x200001b6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a4a8:	4be0      	ldr	r3, [pc, #896]	; (800a82c <EE_Init+0xa34>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	029a      	lsls	r2, r3, #10
 800a4ae:	23ff      	movs	r3, #255	; 0xff
 800a4b0:	029b      	lsls	r3, r3, #10
 800a4b2:	401a      	ands	r2, r3
 800a4b4:	23d4      	movs	r3, #212	; 0xd4
 800a4b6:	025b      	lsls	r3, r3, #9
 800a4b8:	0011      	movs	r1, r2
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f7f5 feb4 	bl	8000228 <__aeabi_uidivmod>
 800a4c0:	000b      	movs	r3, r1
 800a4c2:	0adb      	lsrs	r3, r3, #11
 800a4c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	210a      	movs	r1, #10
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f7f5 feab 	bl	8000228 <__aeabi_uidivmod>
 800a4d2:	000b      	movs	r3, r1
 800a4d4:	001c      	movs	r4, r3
 800a4d6:	4bd5      	ldr	r3, [pc, #852]	; (800a82c <EE_Init+0xa34>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	029a      	lsls	r2, r3, #10
 800a4dc:	23ff      	movs	r3, #255	; 0xff
 800a4de:	029b      	lsls	r3, r3, #10
 800a4e0:	401a      	ands	r2, r3
 800a4e2:	23d4      	movs	r3, #212	; 0xd4
 800a4e4:	025b      	lsls	r3, r3, #9
 800a4e6:	0011      	movs	r1, r2
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7f5 fe9d 	bl	8000228 <__aeabi_uidivmod>
 800a4ee:	000b      	movs	r3, r1
 800a4f0:	0adb      	lsrs	r3, r3, #11
 800a4f2:	18e3      	adds	r3, r4, r3
 800a4f4:	2280      	movs	r2, #128	; 0x80
 800a4f6:	0252      	lsls	r2, r2, #9
 800a4f8:	4694      	mov	ip, r2
 800a4fa:	4463      	add	r3, ip
 800a4fc:	02dc      	lsls	r4, r3, #11
 800a4fe:	4bcb      	ldr	r3, [pc, #812]	; (800a82c <EE_Init+0xa34>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	029a      	lsls	r2, r3, #10
 800a504:	23ff      	movs	r3, #255	; 0xff
 800a506:	029b      	lsls	r3, r3, #10
 800a508:	4013      	ands	r3, r2
 800a50a:	0019      	movs	r1, r3
 800a50c:	23d4      	movs	r3, #212	; 0xd4
 800a50e:	0258      	lsls	r0, r3, #9
 800a510:	f7f5 fe04 	bl	800011c <__udivsi3>
 800a514:	0003      	movs	r3, r0
 800a516:	0019      	movs	r1, r3
 800a518:	4bc4      	ldr	r3, [pc, #784]	; (800a82c <EE_Init+0xa34>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	029a      	lsls	r2, r3, #10
 800a51e:	23ff      	movs	r3, #255	; 0xff
 800a520:	029b      	lsls	r3, r3, #10
 800a522:	4013      	ands	r3, r2
 800a524:	434b      	muls	r3, r1
 800a526:	18e3      	adds	r3, r4, r3
 800a528:	0018      	movs	r0, r3
 800a52a:	f001 fa1d 	bl	800b968 <GetPageState>
 800a52e:	1e03      	subs	r3, r0, #0
 800a530:	d104      	bne.n	800a53c <EE_Init+0x744>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a532:	231b      	movs	r3, #27
 800a534:	18fb      	adds	r3, r7, r3
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	e003      	b.n	800a544 <EE_Init+0x74c>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a53c:	231b      	movs	r3, #27
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 800a544:	231b      	movs	r3, #27
 800a546:	18fb      	adds	r3, r7, r3
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d113      	bne.n	800a576 <EE_Init+0x77e>
      {
        if (nbactivepage == 0U)
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	2b00      	cmp	r3, #0
 800a552:	d107      	bne.n	800a564 <EE_Init+0x76c>
        {
          ubCurrentActivePage = page;
 800a554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a556:	b2da      	uxtb	r2, r3
 800a558:	4bb5      	ldr	r3, [pc, #724]	; (800a830 <EE_Init+0xa38>)
 800a55a:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	3301      	adds	r3, #1
 800a560:	633b      	str	r3, [r7, #48]	; 0x30
 800a562:	e008      	b.n	800a576 <EE_Init+0x77e>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800a564:	230a      	movs	r3, #10
 800a566:	e1e8      	b.n	800a93a <EE_Init+0xb42>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800a568:	231a      	movs	r3, #26
 800a56a:	18fb      	adds	r3, r7, r3
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d101      	bne.n	800a576 <EE_Init+0x77e>
    {
      lastvalidpage = page;
 800a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a578:	3301      	adds	r3, #1
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a57c:	4bab      	ldr	r3, [pc, #684]	; (800a82c <EE_Init+0xa34>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	029a      	lsls	r2, r3, #10
 800a582:	23ff      	movs	r3, #255	; 0xff
 800a584:	029b      	lsls	r3, r3, #10
 800a586:	401a      	ands	r2, r3
 800a588:	23d4      	movs	r3, #212	; 0xd4
 800a58a:	025b      	lsls	r3, r3, #9
 800a58c:	0011      	movs	r1, r2
 800a58e:	0018      	movs	r0, r3
 800a590:	f7f5 fe4a 	bl	8000228 <__aeabi_uidivmod>
 800a594:	000b      	movs	r3, r1
 800a596:	0adb      	lsrs	r3, r3, #11
 800a598:	330a      	adds	r3, #10
 800a59a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d200      	bcs.n	800a5a2 <EE_Init+0x7aa>
 800a5a0:	e6e1      	b.n	800a366 <EE_Init+0x56e>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d133      	bne.n	800a610 <EE_Init+0x818>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 800a5a8:	4ba0      	ldr	r3, [pc, #640]	; (800a82c <EE_Init+0xa34>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	029a      	lsls	r2, r3, #10
 800a5ae:	23ff      	movs	r3, #255	; 0xff
 800a5b0:	029b      	lsls	r3, r3, #10
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	23d4      	movs	r3, #212	; 0xd4
 800a5b6:	025b      	lsls	r3, r3, #9
 800a5b8:	0011      	movs	r1, r2
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f7f5 fe34 	bl	8000228 <__aeabi_uidivmod>
 800a5c0:	000b      	movs	r3, r1
 800a5c2:	0adb      	lsrs	r3, r3, #11
 800a5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	210a      	movs	r1, #10
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	f7f5 fe2b 	bl	8000228 <__aeabi_uidivmod>
 800a5d2:	000b      	movs	r3, r1
 800a5d4:	b2dc      	uxtb	r4, r3
 800a5d6:	4b95      	ldr	r3, [pc, #596]	; (800a82c <EE_Init+0xa34>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	029a      	lsls	r2, r3, #10
 800a5dc:	23ff      	movs	r3, #255	; 0xff
 800a5de:	029b      	lsls	r3, r3, #10
 800a5e0:	401a      	ands	r2, r3
 800a5e2:	23d4      	movs	r3, #212	; 0xd4
 800a5e4:	025b      	lsls	r3, r3, #9
 800a5e6:	0011      	movs	r1, r2
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f7f5 fe1d 	bl	8000228 <__aeabi_uidivmod>
 800a5ee:	000b      	movs	r3, r1
 800a5f0:	0adb      	lsrs	r3, r3, #11
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	18e3      	adds	r3, r4, r3
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b8d      	ldr	r3, [pc, #564]	; (800a830 <EE_Init+0xa38>)
 800a5fa:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800a5fc:	4b8c      	ldr	r3, [pc, #560]	; (800a830 <EE_Init+0xa38>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2102      	movs	r1, #2
 800a602:	0018      	movs	r0, r3
 800a604:	f001 f8de 	bl	800b7c4 <SetPageState>
 800a608:	1e03      	subs	r3, r0, #0
 800a60a:	d001      	beq.n	800a610 <EE_Init+0x818>
    {
      return EE_WRITE_ERROR;
 800a60c:	2302      	movs	r3, #2
 800a60e:	e194      	b.n	800a93a <EE_Init+0xb42>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800a610:	4b88      	ldr	r3, [pc, #544]	; (800a834 <EE_Init+0xa3c>)
 800a612:	2200      	movs	r2, #0
 800a614:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800a616:	4b88      	ldr	r3, [pc, #544]	; (800a838 <EE_Init+0xa40>)
 800a618:	2220      	movs	r2, #32
 800a61a:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a61c:	2320      	movs	r3, #32
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
 800a620:	e037      	b.n	800a692 <EE_Init+0x89a>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800a622:	4b83      	ldr	r3, [pc, #524]	; (800a830 <EE_Init+0xa38>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	0252      	lsls	r2, r2, #9
 800a62a:	4694      	mov	ip, r2
 800a62c:	4463      	add	r3, ip
 800a62e:	02dc      	lsls	r4, r3, #11
 800a630:	4b7e      	ldr	r3, [pc, #504]	; (800a82c <EE_Init+0xa34>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	029a      	lsls	r2, r3, #10
 800a636:	23ff      	movs	r3, #255	; 0xff
 800a638:	029b      	lsls	r3, r3, #10
 800a63a:	4013      	ands	r3, r2
 800a63c:	0019      	movs	r1, r3
 800a63e:	23d4      	movs	r3, #212	; 0xd4
 800a640:	0258      	lsls	r0, r3, #9
 800a642:	f7f5 fd6b 	bl	800011c <__udivsi3>
 800a646:	0003      	movs	r3, r0
 800a648:	0019      	movs	r1, r3
 800a64a:	4b78      	ldr	r3, [pc, #480]	; (800a82c <EE_Init+0xa34>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	029a      	lsls	r2, r3, #10
 800a650:	23ff      	movs	r3, #255	; 0xff
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	4013      	ands	r3, r2
 800a656:	434b      	muls	r3, r1
 800a658:	18e2      	adds	r2, r4, r3
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	18d3      	adds	r3, r2, r3
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	613a      	str	r2, [r7, #16]
 800a664:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) && (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	3301      	adds	r3, #1
 800a66a:	d103      	bne.n	800a674 <EE_Init+0x87c>
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	3301      	adds	r3, #1
 800a670:	d100      	bne.n	800a674 <EE_Init+0x87c>
      uhNbWrittenElements++;
      uwAddressNextWrite += EE_ELEMENT_SIZE;
    }
    else /* no more element in the page */
    {
      break;
 800a672:	e013      	b.n	800a69c <EE_Init+0x8a4>
      uhNbWrittenElements++;
 800a674:	4b6f      	ldr	r3, [pc, #444]	; (800a834 <EE_Init+0xa3c>)
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	3301      	adds	r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	4b6d      	ldr	r3, [pc, #436]	; (800a834 <EE_Init+0xa3c>)
 800a67e:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800a680:	4b6d      	ldr	r3, [pc, #436]	; (800a838 <EE_Init+0xa40>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3308      	adds	r3, #8
 800a686:	001a      	movs	r2, r3
 800a688:	4b6b      	ldr	r3, [pc, #428]	; (800a838 <EE_Init+0xa40>)
 800a68a:	601a      	str	r2, [r3, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	3308      	adds	r3, #8
 800a690:	637b      	str	r3, [r7, #52]	; 0x34
 800a692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	429a      	cmp	r2, r3
 800a69a:	d3c2      	bcc.n	800a622 <EE_Init+0x82a>
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800a69c:	4b64      	ldr	r3, [pc, #400]	; (800a830 <EE_Init+0xa38>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 800a6a2:	4b63      	ldr	r3, [pc, #396]	; (800a830 <EE_Init+0xa38>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a6a8:	e057      	b.n	800a75a <EE_Init+0x962>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800a6aa:	4b60      	ldr	r3, [pc, #384]	; (800a82c <EE_Init+0xa34>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	029a      	lsls	r2, r3, #10
 800a6b0:	23ff      	movs	r3, #255	; 0xff
 800a6b2:	029b      	lsls	r3, r3, #10
 800a6b4:	401a      	ands	r2, r3
 800a6b6:	23d4      	movs	r3, #212	; 0xd4
 800a6b8:	025b      	lsls	r3, r3, #9
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7f5 fdb3 	bl	8000228 <__aeabi_uidivmod>
 800a6c2:	000b      	movs	r3, r1
 800a6c4:	0adb      	lsrs	r3, r3, #11
 800a6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	3309      	adds	r3, #9
 800a6cc:	210a      	movs	r1, #10
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f7f5 fdaa 	bl	8000228 <__aeabi_uidivmod>
 800a6d4:	000b      	movs	r3, r1
 800a6d6:	001c      	movs	r4, r3
 800a6d8:	4b54      	ldr	r3, [pc, #336]	; (800a82c <EE_Init+0xa34>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	029a      	lsls	r2, r3, #10
 800a6de:	23ff      	movs	r3, #255	; 0xff
 800a6e0:	029b      	lsls	r3, r3, #10
 800a6e2:	401a      	ands	r2, r3
 800a6e4:	23d4      	movs	r3, #212	; 0xd4
 800a6e6:	025b      	lsls	r3, r3, #9
 800a6e8:	0011      	movs	r1, r2
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f7f5 fd9c 	bl	8000228 <__aeabi_uidivmod>
 800a6f0:	000b      	movs	r3, r1
 800a6f2:	0adb      	lsrs	r3, r3, #11
 800a6f4:	18e3      	adds	r3, r4, r3
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fa:	2280      	movs	r2, #128	; 0x80
 800a6fc:	0252      	lsls	r2, r2, #9
 800a6fe:	4694      	mov	ip, r2
 800a700:	4463      	add	r3, ip
 800a702:	02dc      	lsls	r4, r3, #11
 800a704:	4b49      	ldr	r3, [pc, #292]	; (800a82c <EE_Init+0xa34>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	029a      	lsls	r2, r3, #10
 800a70a:	23ff      	movs	r3, #255	; 0xff
 800a70c:	029b      	lsls	r3, r3, #10
 800a70e:	4013      	ands	r3, r2
 800a710:	0019      	movs	r1, r3
 800a712:	23d4      	movs	r3, #212	; 0xd4
 800a714:	0258      	lsls	r0, r3, #9
 800a716:	f7f5 fd01 	bl	800011c <__udivsi3>
 800a71a:	0003      	movs	r3, r0
 800a71c:	0019      	movs	r1, r3
 800a71e:	4b43      	ldr	r3, [pc, #268]	; (800a82c <EE_Init+0xa34>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	029a      	lsls	r2, r3, #10
 800a724:	23ff      	movs	r3, #255	; 0xff
 800a726:	029b      	lsls	r3, r3, #10
 800a728:	4013      	ands	r3, r2
 800a72a:	434b      	muls	r3, r1
 800a72c:	18e3      	adds	r3, r4, r3
 800a72e:	251a      	movs	r5, #26
 800a730:	197c      	adds	r4, r7, r5
 800a732:	0018      	movs	r0, r3
 800a734:	f001 f918 	bl	800b968 <GetPageState>
 800a738:	0003      	movs	r3, r0
 800a73a:	7023      	strb	r3, [r4, #0]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800a73c:	197b      	adds	r3, r7, r5
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b03      	cmp	r3, #3
 800a742:	d108      	bne.n	800a756 <EE_Init+0x95e>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800a744:	4b3b      	ldr	r3, [pc, #236]	; (800a834 <EE_Init+0xa3c>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	33fc      	adds	r3, #252	; 0xfc
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	4b39      	ldr	r3, [pc, #228]	; (800a834 <EE_Init+0xa3c>)
 800a74e:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800a750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a752:	623b      	str	r3, [r7, #32]
 800a754:	e001      	b.n	800a75a <EE_Init+0x962>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 800a756:	230a      	movs	r3, #10
 800a758:	e0ef      	b.n	800a93a <EE_Init+0xb42>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a75a:	4b34      	ldr	r3, [pc, #208]	; (800a82c <EE_Init+0xa34>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	029a      	lsls	r2, r3, #10
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	401a      	ands	r2, r3
 800a766:	23d4      	movs	r3, #212	; 0xd4
 800a768:	025b      	lsls	r3, r3, #9
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f7f5 fd5b 	bl	8000228 <__aeabi_uidivmod>
 800a772:	000b      	movs	r3, r1
 800a774:	0adb      	lsrs	r3, r3, #11
 800a776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a778:	429a      	cmp	r2, r3
 800a77a:	d011      	beq.n	800a7a0 <EE_Init+0x9a8>
 800a77c:	4b2b      	ldr	r3, [pc, #172]	; (800a82c <EE_Init+0xa34>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	029a      	lsls	r2, r3, #10
 800a782:	23ff      	movs	r3, #255	; 0xff
 800a784:	029b      	lsls	r3, r3, #10
 800a786:	401a      	ands	r2, r3
 800a788:	23d4      	movs	r3, #212	; 0xd4
 800a78a:	025b      	lsls	r3, r3, #9
 800a78c:	0011      	movs	r1, r2
 800a78e:	0018      	movs	r0, r3
 800a790:	f7f5 fd4a 	bl	8000228 <__aeabi_uidivmod>
 800a794:	000b      	movs	r3, r1
 800a796:	0adb      	lsrs	r3, r3, #11
 800a798:	3305      	adds	r3, #5
 800a79a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d184      	bne.n	800a6aa <EE_Init+0x8b2>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800a7a0:	4b23      	ldr	r3, [pc, #140]	; (800a830 <EE_Init+0xa38>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	001c      	movs	r4, r3
 800a7a6:	4b21      	ldr	r3, [pc, #132]	; (800a82c <EE_Init+0xa34>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	029a      	lsls	r2, r3, #10
 800a7ac:	23ff      	movs	r3, #255	; 0xff
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	401a      	ands	r2, r3
 800a7b2:	23d4      	movs	r3, #212	; 0xd4
 800a7b4:	025b      	lsls	r3, r3, #9
 800a7b6:	0011      	movs	r1, r2
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f7f5 fd35 	bl	8000228 <__aeabi_uidivmod>
 800a7be:	000b      	movs	r3, r1
 800a7c0:	0adb      	lsrs	r3, r3, #11
 800a7c2:	1ae3      	subs	r3, r4, r3
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	210a      	movs	r1, #10
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f7f5 fd2d 	bl	8000228 <__aeabi_uidivmod>
 800a7ce:	000b      	movs	r3, r1
 800a7d0:	001c      	movs	r4, r3
 800a7d2:	4b16      	ldr	r3, [pc, #88]	; (800a82c <EE_Init+0xa34>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	029a      	lsls	r2, r3, #10
 800a7d8:	23ff      	movs	r3, #255	; 0xff
 800a7da:	029b      	lsls	r3, r3, #10
 800a7dc:	401a      	ands	r2, r3
 800a7de:	23d4      	movs	r3, #212	; 0xd4
 800a7e0:	025b      	lsls	r3, r3, #9
 800a7e2:	0011      	movs	r1, r2
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f7f5 fd1f 	bl	8000228 <__aeabi_uidivmod>
 800a7ea:	000b      	movs	r3, r1
 800a7ec:	0adb      	lsrs	r3, r3, #11
 800a7ee:	18e3      	adds	r3, r4, r3
 800a7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800a7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f4:	2280      	movs	r2, #128	; 0x80
 800a7f6:	0252      	lsls	r2, r2, #9
 800a7f8:	4694      	mov	ip, r2
 800a7fa:	4463      	add	r3, ip
 800a7fc:	02dc      	lsls	r4, r3, #11
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <EE_Init+0xa34>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	029a      	lsls	r2, r3, #10
 800a804:	23ff      	movs	r3, #255	; 0xff
 800a806:	029b      	lsls	r3, r3, #10
 800a808:	4013      	ands	r3, r2
 800a80a:	0019      	movs	r1, r3
 800a80c:	23d4      	movs	r3, #212	; 0xd4
 800a80e:	0258      	lsls	r0, r3, #9
 800a810:	f7f5 fc84 	bl	800011c <__udivsi3>
 800a814:	0003      	movs	r3, r0
 800a816:	0019      	movs	r1, r3
 800a818:	4b04      	ldr	r3, [pc, #16]	; (800a82c <EE_Init+0xa34>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	029a      	lsls	r2, r3, #10
 800a81e:	23ff      	movs	r3, #255	; 0xff
 800a820:	029b      	lsls	r3, r3, #10
 800a822:	4013      	ands	r3, r2
 800a824:	434b      	muls	r3, r1
 800a826:	18e3      	adds	r3, r4, r3
 800a828:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 800a82a:	e06a      	b.n	800a902 <EE_Init+0xb0a>
 800a82c:	1fff75e0 	.word	0x1fff75e0
 800a830:	200001b6 	.word	0x200001b6
 800a834:	200001b4 	.word	0x200001b4
 800a838:	20000008 	.word	0x20000008
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a83c:	1dfb      	adds	r3, r7, #7
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d108      	bne.n	800a856 <EE_Init+0xa5e>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	2101      	movs	r1, #1
 800a848:	0018      	movs	r0, r3
 800a84a:	f001 f92c 	bl	800baa6 <FI_PageErase>
 800a84e:	1e03      	subs	r3, r0, #0
 800a850:	d014      	beq.n	800a87c <EE_Init+0xa84>
      {
        return EE_ERASE_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e071      	b.n	800a93a <EE_Init+0xb42>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a856:	2380      	movs	r3, #128	; 0x80
 800a858:	011a      	lsls	r2, r3, #4
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	0011      	movs	r1, r2
 800a85e:	0018      	movs	r0, r3
 800a860:	f000 fb39 	bl	800aed6 <VerifyPageFullyErased>
 800a864:	0003      	movs	r3, r0
 800a866:	2b10      	cmp	r3, #16
 800a868:	d108      	bne.n	800a87c <EE_Init+0xa84>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86c:	2101      	movs	r1, #1
 800a86e:	0018      	movs	r0, r3
 800a870:	f001 f919 	bl	800baa6 <FI_PageErase>
 800a874:	1e03      	subs	r3, r0, #0
 800a876:	d001      	beq.n	800a87c <EE_Init+0xa84>
        {
          return EE_ERASE_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e05e      	b.n	800a93a <EE_Init+0xb42>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 800a87c:	4b31      	ldr	r3, [pc, #196]	; (800a944 <EE_Init+0xb4c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	029a      	lsls	r2, r3, #10
 800a882:	23ff      	movs	r3, #255	; 0xff
 800a884:	029b      	lsls	r3, r3, #10
 800a886:	401a      	ands	r2, r3
 800a888:	23d4      	movs	r3, #212	; 0xd4
 800a88a:	025b      	lsls	r3, r3, #9
 800a88c:	0011      	movs	r1, r2
 800a88e:	0018      	movs	r0, r3
 800a890:	f7f5 fcca 	bl	8000228 <__aeabi_uidivmod>
 800a894:	000b      	movs	r3, r1
 800a896:	0adb      	lsrs	r3, r3, #11
 800a898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	3301      	adds	r3, #1
 800a89e:	210a      	movs	r1, #10
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f7f5 fcc1 	bl	8000228 <__aeabi_uidivmod>
 800a8a6:	000b      	movs	r3, r1
 800a8a8:	001c      	movs	r4, r3
 800a8aa:	4b26      	ldr	r3, [pc, #152]	; (800a944 <EE_Init+0xb4c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	029a      	lsls	r2, r3, #10
 800a8b0:	23ff      	movs	r3, #255	; 0xff
 800a8b2:	029b      	lsls	r3, r3, #10
 800a8b4:	401a      	ands	r2, r3
 800a8b6:	23d4      	movs	r3, #212	; 0xd4
 800a8b8:	025b      	lsls	r3, r3, #9
 800a8ba:	0011      	movs	r1, r2
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f7f5 fcb3 	bl	8000228 <__aeabi_uidivmod>
 800a8c2:	000b      	movs	r3, r1
 800a8c4:	0adb      	lsrs	r3, r3, #11
 800a8c6:	18e3      	adds	r3, r4, r3
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8cc:	2280      	movs	r2, #128	; 0x80
 800a8ce:	0252      	lsls	r2, r2, #9
 800a8d0:	4694      	mov	ip, r2
 800a8d2:	4463      	add	r3, ip
 800a8d4:	02dc      	lsls	r4, r3, #11
 800a8d6:	4b1b      	ldr	r3, [pc, #108]	; (800a944 <EE_Init+0xb4c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	029a      	lsls	r2, r3, #10
 800a8dc:	23ff      	movs	r3, #255	; 0xff
 800a8de:	029b      	lsls	r3, r3, #10
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	0019      	movs	r1, r3
 800a8e4:	23d4      	movs	r3, #212	; 0xd4
 800a8e6:	0258      	lsls	r0, r3, #9
 800a8e8:	f7f5 fc18 	bl	800011c <__udivsi3>
 800a8ec:	0003      	movs	r3, r0
 800a8ee:	0019      	movs	r1, r3
 800a8f0:	4b14      	ldr	r3, [pc, #80]	; (800a944 <EE_Init+0xb4c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	029a      	lsls	r2, r3, #10
 800a8f6:	23ff      	movs	r3, #255	; 0xff
 800a8f8:	029b      	lsls	r3, r3, #10
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	434b      	muls	r3, r1
 800a8fe:	18e3      	adds	r3, r4, r3
 800a900:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800a902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	429a      	cmp	r2, r3
 800a908:	d198      	bne.n	800a83c <EE_Init+0xa44>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a90a:	f001 f8f7 	bl	800bafc <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d111      	bne.n	800a938 <EE_Init+0xb40>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800a914:	250e      	movs	r5, #14
 800a916:	197c      	adds	r4, r7, r5
 800a918:	2100      	movs	r1, #0
 800a91a:	2000      	movs	r0, #0
 800a91c:	f000 feb8 	bl	800b690 <VerifyPagesFullWriteVariable>
 800a920:	0003      	movs	r3, r0
 800a922:	8023      	strh	r3, [r4, #0]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800a924:	197b      	adds	r3, r7, r5
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <EE_Init+0xb40>
 800a92c:	197b      	adds	r3, r7, r5
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	2b12      	cmp	r3, #18
 800a932:	d001      	beq.n	800a938 <EE_Init+0xb40>
    {
      return EE_WRITE_ERROR;
 800a934:	2302      	movs	r3, #2
 800a936:	e000      	b.n	800a93a <EE_Init+0xb42>
    }
#endif
  }

  return EE_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	0018      	movs	r0, r3
 800a93c:	46bd      	mov	sp, r7
 800a93e:	b010      	add	sp, #64	; 0x40
 800a940:	bdb0      	pop	{r4, r5, r7, pc}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	1fff75e0 	.word	0x1fff75e0

0800a948 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	0002      	movs	r2, r0
 800a950:	1dfb      	adds	r3, r7, #7
 800a952:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800a958:	f001 f8d5 	bl	800bb06 <FI_CheckBankConfig>
 800a95c:	1e03      	subs	r3, r0, #0
 800a95e:	d001      	beq.n	800a964 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800a960:	230e      	movs	r3, #14
 800a962:	e08e      	b.n	800aa82 <EE_Format+0x13a>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a964:	4b49      	ldr	r3, [pc, #292]	; (800aa8c <EE_Format+0x144>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	029a      	lsls	r2, r3, #10
 800a96a:	23ff      	movs	r3, #255	; 0xff
 800a96c:	029b      	lsls	r3, r3, #10
 800a96e:	401a      	ands	r2, r3
 800a970:	23d4      	movs	r3, #212	; 0xd4
 800a972:	025b      	lsls	r3, r3, #9
 800a974:	0011      	movs	r1, r2
 800a976:	0018      	movs	r0, r3
 800a978:	f7f5 fc56 	bl	8000228 <__aeabi_uidivmod>
 800a97c:	000b      	movs	r3, r1
 800a97e:	0adb      	lsrs	r3, r3, #11
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e03c      	b.n	800a9fe <EE_Format+0xb6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a984:	1dfb      	adds	r3, r7, #7
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d108      	bne.n	800a99e <EE_Format+0x56>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2101      	movs	r1, #1
 800a990:	0018      	movs	r0, r3
 800a992:	f001 f888 	bl	800baa6 <FI_PageErase>
 800a996:	1e03      	subs	r3, r0, #0
 800a998:	d02e      	beq.n	800a9f8 <EE_Format+0xb0>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e071      	b.n	800aa82 <EE_Format+0x13a>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2280      	movs	r2, #128	; 0x80
 800a9a2:	0252      	lsls	r2, r2, #9
 800a9a4:	4694      	mov	ip, r2
 800a9a6:	4463      	add	r3, ip
 800a9a8:	02dc      	lsls	r4, r3, #11
 800a9aa:	4b38      	ldr	r3, [pc, #224]	; (800aa8c <EE_Format+0x144>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	029a      	lsls	r2, r3, #10
 800a9b0:	23ff      	movs	r3, #255	; 0xff
 800a9b2:	029b      	lsls	r3, r3, #10
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	0019      	movs	r1, r3
 800a9b8:	23d4      	movs	r3, #212	; 0xd4
 800a9ba:	0258      	lsls	r0, r3, #9
 800a9bc:	f7f5 fbae 	bl	800011c <__udivsi3>
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	0019      	movs	r1, r3
 800a9c4:	4b31      	ldr	r3, [pc, #196]	; (800aa8c <EE_Format+0x144>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	029a      	lsls	r2, r3, #10
 800a9ca:	23ff      	movs	r3, #255	; 0xff
 800a9cc:	029b      	lsls	r3, r3, #10
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	434b      	muls	r3, r1
 800a9d2:	18e3      	adds	r3, r4, r3
 800a9d4:	2280      	movs	r2, #128	; 0x80
 800a9d6:	0112      	lsls	r2, r2, #4
 800a9d8:	0011      	movs	r1, r2
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f000 fa7b 	bl	800aed6 <VerifyPageFullyErased>
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	2b10      	cmp	r3, #16
 800a9e4:	d108      	bne.n	800a9f8 <EE_Format+0xb0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f001 f85b 	bl	800baa6 <FI_PageErase>
 800a9f0:	1e03      	subs	r3, r0, #0
 800a9f2:	d001      	beq.n	800a9f8 <EE_Format+0xb0>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e044      	b.n	800aa82 <EE_Format+0x13a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	60fb      	str	r3, [r7, #12]
 800a9fe:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <EE_Format+0x144>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	029a      	lsls	r2, r3, #10
 800aa04:	23ff      	movs	r3, #255	; 0xff
 800aa06:	029b      	lsls	r3, r3, #10
 800aa08:	401a      	ands	r2, r3
 800aa0a:	23d4      	movs	r3, #212	; 0xd4
 800aa0c:	025b      	lsls	r3, r3, #9
 800aa0e:	0011      	movs	r1, r2
 800aa10:	0018      	movs	r0, r3
 800aa12:	f7f5 fc09 	bl	8000228 <__aeabi_uidivmod>
 800aa16:	000b      	movs	r3, r1
 800aa18:	0adb      	lsrs	r3, r3, #11
 800aa1a:	330a      	adds	r3, #10
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d3b0      	bcc.n	800a984 <EE_Format+0x3c>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800aa22:	f001 f86b 	bl	800bafc <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <EE_Format+0x144>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	029a      	lsls	r2, r3, #10
 800aa2c:	23ff      	movs	r3, #255	; 0xff
 800aa2e:	029b      	lsls	r3, r3, #10
 800aa30:	401a      	ands	r2, r3
 800aa32:	23d4      	movs	r3, #212	; 0xd4
 800aa34:	025b      	lsls	r3, r3, #9
 800aa36:	0011      	movs	r1, r2
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f7f5 fbf5 	bl	8000228 <__aeabi_uidivmod>
 800aa3e:	000b      	movs	r3, r1
 800aa40:	0adb      	lsrs	r3, r3, #11
 800aa42:	2102      	movs	r1, #2
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 febd 	bl	800b7c4 <SetPageState>
 800aa4a:	1e03      	subs	r3, r0, #0
 800aa4c:	d001      	beq.n	800aa52 <EE_Format+0x10a>
  {
    return EE_WRITE_ERROR;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e017      	b.n	800aa82 <EE_Format+0x13a>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800aa52:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <EE_Format+0x148>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800aa58:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <EE_Format+0x144>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	029a      	lsls	r2, r3, #10
 800aa5e:	23ff      	movs	r3, #255	; 0xff
 800aa60:	029b      	lsls	r3, r3, #10
 800aa62:	401a      	ands	r2, r3
 800aa64:	23d4      	movs	r3, #212	; 0xd4
 800aa66:	025b      	lsls	r3, r3, #9
 800aa68:	0011      	movs	r1, r2
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f7f5 fbdc 	bl	8000228 <__aeabi_uidivmod>
 800aa70:	000b      	movs	r3, r1
 800aa72:	0adb      	lsrs	r3, r3, #11
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <EE_Format+0x14c>)
 800aa78:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <EE_Format+0x150>)
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	0018      	movs	r0, r3
 800aa84:	46bd      	mov	sp, r7
 800aa86:	b005      	add	sp, #20
 800aa88:	bd90      	pop	{r4, r7, pc}
 800aa8a:	46c0      	nop			; (mov r8, r8)
 800aa8c:	1fff75e0 	.word	0x1fff75e0
 800aa90:	200001b4 	.word	0x200001b4
 800aa94:	200001b6 	.word	0x200001b6
 800aa98:	20000008 	.word	0x20000008

0800aa9c <EE_ReadVariable16bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable16bits(uint16_t VirtAddress, uint16_t* pData)
{
 800aa9c:	b5b0      	push	{r4, r5, r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	0002      	movs	r2, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	1dbb      	adds	r3, r7, #6
 800aaa8:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800aaaa:	1dbb      	adds	r3, r7, #6
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d01c      	beq.n	800aaec <EE_ReadVariable16bits+0x50>
 800aab2:	1dbb      	adds	r3, r7, #6
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	4a10      	ldr	r2, [pc, #64]	; (800aaf8 <EE_ReadVariable16bits+0x5c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d017      	beq.n	800aaec <EE_ReadVariable16bits+0x50>
  {
    EE_DATA_TYPE datatmp = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800aac0:	250e      	movs	r5, #14
 800aac2:	197b      	adds	r3, r7, r5
 800aac4:	2200      	movs	r2, #0
 800aac6:	801a      	strh	r2, [r3, #0]

    /* Read variable of size EE_DATA_TYPE, then cast it to 16bits */
    status = ReadVariable(VirtAddress, &datatmp);
 800aac8:	197c      	adds	r4, r7, r5
 800aaca:	2308      	movs	r3, #8
 800aacc:	18fa      	adds	r2, r7, r3
 800aace:	1dbb      	adds	r3, r7, #6
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	0011      	movs	r1, r2
 800aad4:	0018      	movs	r0, r3
 800aad6:	f000 f8db 	bl	800ac90 <ReadVariable>
 800aada:	0003      	movs	r3, r0
 800aadc:	8023      	strh	r3, [r4, #0]
    *pData = (uint16_t) datatmp;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	801a      	strh	r2, [r3, #0]

    return status;
 800aae6:	197b      	adds	r3, r7, r5
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	e000      	b.n	800aaee <EE_ReadVariable16bits+0x52>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800aaec:	2308      	movs	r3, #8
  } 
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b004      	add	sp, #16
 800aaf4:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	0000ffff 	.word	0x0000ffff

0800aafc <EE_WriteVariable16bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable16bits(uint16_t VirtAddress, uint16_t Data)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	0002      	movs	r2, r0
 800ab04:	1dbb      	adds	r3, r7, #6
 800ab06:	801a      	strh	r2, [r3, #0]
 800ab08:	1d3b      	adds	r3, r7, #4
 800ab0a:	1c0a      	adds	r2, r1, #0
 800ab0c:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800ab0e:	1dbb      	adds	r3, r7, #6
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <EE_WriteVariable16bits+0x38>
 800ab16:	1dbb      	adds	r3, r7, #6
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <EE_WriteVariable16bits+0x44>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d009      	beq.n	800ab34 <EE_WriteVariable16bits+0x38>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	881a      	ldrh	r2, [r3, #0]
 800ab24:	1dbb      	adds	r3, r7, #6
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	0011      	movs	r1, r2
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	f000 f9aa 	bl	800ae84 <WriteVariable>
 800ab30:	0003      	movs	r3, r0
 800ab32:	e000      	b.n	800ab36 <EE_WriteVariable16bits+0x3a>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800ab34:	2308      	movs	r3, #8
  }    
}
 800ab36:	0018      	movs	r0, r3
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	0000ffff 	.word	0x0000ffff

0800ab44 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800ab5a:	1dfb      	adds	r3, r7, #7
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	1dbb      	adds	r3, r7, #6
 800ab62:	2205      	movs	r2, #5
 800ab64:	701a      	strb	r2, [r3, #0]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800ab66:	4b49      	ldr	r3, [pc, #292]	; (800ac8c <EE_CleanUp+0x148>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	029a      	lsls	r2, r3, #10
 800ab6c:	23ff      	movs	r3, #255	; 0xff
 800ab6e:	029b      	lsls	r3, r3, #10
 800ab70:	401a      	ands	r2, r3
 800ab72:	23d4      	movs	r3, #212	; 0xd4
 800ab74:	025b      	lsls	r3, r3, #9
 800ab76:	0011      	movs	r1, r2
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f7f5 fb55 	bl	8000228 <__aeabi_uidivmod>
 800ab7e:	000b      	movs	r3, r1
 800ab80:	0adb      	lsrs	r3, r3, #11
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e06b      	b.n	800ac5e <EE_CleanUp+0x11a>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2280      	movs	r2, #128	; 0x80
 800ab8a:	0252      	lsls	r2, r2, #9
 800ab8c:	4694      	mov	ip, r2
 800ab8e:	4463      	add	r3, ip
 800ab90:	02dc      	lsls	r4, r3, #11
 800ab92:	4b3e      	ldr	r3, [pc, #248]	; (800ac8c <EE_CleanUp+0x148>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	029a      	lsls	r2, r3, #10
 800ab98:	23ff      	movs	r3, #255	; 0xff
 800ab9a:	029b      	lsls	r3, r3, #10
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	0019      	movs	r1, r3
 800aba0:	23d4      	movs	r3, #212	; 0xd4
 800aba2:	0258      	lsls	r0, r3, #9
 800aba4:	f7f5 faba 	bl	800011c <__udivsi3>
 800aba8:	0003      	movs	r3, r0
 800abaa:	0019      	movs	r1, r3
 800abac:	4b37      	ldr	r3, [pc, #220]	; (800ac8c <EE_CleanUp+0x148>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	029a      	lsls	r2, r3, #10
 800abb2:	23ff      	movs	r3, #255	; 0xff
 800abb4:	029b      	lsls	r3, r3, #10
 800abb6:	4013      	ands	r3, r2
 800abb8:	434b      	muls	r3, r1
 800abba:	18e3      	adds	r3, r4, r3
 800abbc:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800abbe:	1dfc      	adds	r4, r7, #7
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	0018      	movs	r0, r3
 800abc4:	f000 fed0 	bl	800b968 <GetPageState>
 800abc8:	0003      	movs	r3, r0
 800abca:	7023      	strb	r3, [r4, #0]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800abcc:	1dfb      	adds	r3, r7, #7
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d141      	bne.n	800ac58 <EE_CleanUp+0x114>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	e02b      	b.n	800ac34 <EE_CleanUp+0xf0>
      {
        pageaddress = PAGE_ADDRESS(page);
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2280      	movs	r2, #128	; 0x80
 800abe0:	0252      	lsls	r2, r2, #9
 800abe2:	4694      	mov	ip, r2
 800abe4:	4463      	add	r3, ip
 800abe6:	02dc      	lsls	r4, r3, #11
 800abe8:	4b28      	ldr	r3, [pc, #160]	; (800ac8c <EE_CleanUp+0x148>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	029a      	lsls	r2, r3, #10
 800abee:	23ff      	movs	r3, #255	; 0xff
 800abf0:	029b      	lsls	r3, r3, #10
 800abf2:	4013      	ands	r3, r2
 800abf4:	0019      	movs	r1, r3
 800abf6:	23d4      	movs	r3, #212	; 0xd4
 800abf8:	0258      	lsls	r0, r3, #9
 800abfa:	f7f5 fa8f 	bl	800011c <__udivsi3>
 800abfe:	0003      	movs	r3, r0
 800ac00:	0019      	movs	r1, r3
 800ac02:	4b22      	ldr	r3, [pc, #136]	; (800ac8c <EE_CleanUp+0x148>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	029a      	lsls	r2, r3, #10
 800ac08:	23ff      	movs	r3, #255	; 0xff
 800ac0a:	029b      	lsls	r3, r3, #10
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	434b      	muls	r3, r1
 800ac10:	18e3      	adds	r3, r4, r3
 800ac12:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800ac14:	1dbc      	adds	r4, r7, #6
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f000 fea5 	bl	800b968 <GetPageState>
 800ac1e:	0003      	movs	r3, r0
 800ac20:	7023      	strb	r3, [r4, #0]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800ac22:	1dbb      	adds	r3, r7, #6
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d001      	beq.n	800ac2e <EE_CleanUp+0xea>
        {
          return EE_ERROR_NOERASING_PAGE;
 800ac2a:	2305      	movs	r3, #5
 800ac2c:	e02a      	b.n	800ac84 <EE_CleanUp+0x140>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	3305      	adds	r3, #5
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d3ce      	bcc.n	800abdc <EE_CleanUp+0x98>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2105      	movs	r1, #5
 800ac42:	0018      	movs	r0, r3
 800ac44:	f000 ff2f 	bl	800baa6 <FI_PageErase>
 800ac48:	1e03      	subs	r3, r0, #0
 800ac4a:	d001      	beq.n	800ac50 <EE_CleanUp+0x10c>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e019      	b.n	800ac84 <EE_CleanUp+0x140>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800ac50:	f000 ff54 	bl	800bafc <FI_CacheFlush>
        
        return EE_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	e015      	b.n	800ac84 <EE_CleanUp+0x140>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	3305      	adds	r3, #5
 800ac5c:	617b      	str	r3, [r7, #20]
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <EE_CleanUp+0x148>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	029a      	lsls	r2, r3, #10
 800ac64:	23ff      	movs	r3, #255	; 0xff
 800ac66:	029b      	lsls	r3, r3, #10
 800ac68:	401a      	ands	r2, r3
 800ac6a:	23d4      	movs	r3, #212	; 0xd4
 800ac6c:	025b      	lsls	r3, r3, #9
 800ac6e:	0011      	movs	r1, r2
 800ac70:	0018      	movs	r0, r3
 800ac72:	f7f5 fad9 	bl	8000228 <__aeabi_uidivmod>
 800ac76:	000b      	movs	r3, r1
 800ac78:	0adb      	lsrs	r3, r3, #11
 800ac7a:	330a      	adds	r3, #10
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d381      	bcc.n	800ab86 <EE_CleanUp+0x42>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800ac82:	2305      	movs	r3, #5
}
 800ac84:	0018      	movs	r0, r3
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b007      	add	sp, #28
 800ac8a:	bd90      	pop	{r4, r7, pc}
 800ac8c:	1fff75e0 	.word	0x1fff75e0

0800ac90 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	b08f      	sub	sp, #60	; 0x3c
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	0002      	movs	r2, r0
 800ac98:	6139      	str	r1, [r7, #16]
 800ac9a:	2316      	movs	r3, #22
 800ac9c:	18fb      	adds	r3, r7, r3
 800ac9e:	801a      	strh	r2, [r3, #0]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800aca0:	2200      	movs	r2, #0
 800aca2:	2300      	movs	r3, #0
 800aca4:	623a      	str	r2, [r7, #32]
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
 800acac:	2300      	movs	r3, #0
 800acae:	633b      	str	r3, [r7, #48]	; 0x30
 800acb0:	2300      	movs	r3, #0
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb4:	2300      	movs	r3, #0
 800acb6:	61fb      	str	r3, [r7, #28]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800acb8:	231b      	movs	r3, #27
 800acba:	2210      	movs	r2, #16
 800acbc:	4694      	mov	ip, r2
 800acbe:	44bc      	add	ip, r7
 800acc0:	4463      	add	r3, ip
 800acc2:	2205      	movs	r2, #5
 800acc4:	701a      	strb	r2, [r3, #0]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 800acc6:	2000      	movs	r0, #0
 800acc8:	f000 f92c 	bl	800af24 <FindPage>
 800accc:	0003      	movs	r3, r0
 800acce:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	3301      	adds	r3, #1
 800acd4:	d101      	bne.n	800acda <ReadVariable+0x4a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e0cd      	b.n	800ae76 <ReadVariable+0x1e6>
  }
  pageaddress = PAGE_ADDRESS(page);
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acdc:	2280      	movs	r2, #128	; 0x80
 800acde:	0252      	lsls	r2, r2, #9
 800ace0:	4694      	mov	ip, r2
 800ace2:	4463      	add	r3, ip
 800ace4:	02de      	lsls	r6, r3, #11
 800ace6:	4b66      	ldr	r3, [pc, #408]	; (800ae80 <ReadVariable+0x1f0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	029a      	lsls	r2, r3, #10
 800acec:	23ff      	movs	r3, #255	; 0xff
 800acee:	029b      	lsls	r3, r3, #10
 800acf0:	4013      	ands	r3, r2
 800acf2:	0019      	movs	r1, r3
 800acf4:	23d4      	movs	r3, #212	; 0xd4
 800acf6:	0258      	lsls	r0, r3, #9
 800acf8:	f7f5 fa10 	bl	800011c <__udivsi3>
 800acfc:	0003      	movs	r3, r0
 800acfe:	0019      	movs	r1, r3
 800ad00:	4b5f      	ldr	r3, [pc, #380]	; (800ae80 <ReadVariable+0x1f0>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	029a      	lsls	r2, r3, #10
 800ad06:	23ff      	movs	r3, #255	; 0xff
 800ad08:	029b      	lsls	r3, r3, #10
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	434b      	muls	r3, r1
 800ad0e:	18f3      	adds	r3, r6, r3
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30
  pagestate = GetPageState(pageaddress);
 800ad12:	231b      	movs	r3, #27
 800ad14:	2210      	movs	r2, #16
 800ad16:	18ba      	adds	r2, r7, r2
 800ad18:	18d6      	adds	r6, r2, r3
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f000 fe23 	bl	800b968 <GetPageState>
 800ad22:	0003      	movs	r3, r0
 800ad24:	7033      	strb	r3, [r6, #0]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800ad26:	e091      	b.n	800ae4c <ReadVariable+0x1bc>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800ad28:	23ff      	movs	r3, #255	; 0xff
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800ad2e:	e03d      	b.n	800adac <ReadVariable+0x11c>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	18d3      	adds	r3, r2, r3
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	623a      	str	r2, [r7, #32]
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	3301      	adds	r3, #1
 800ad42:	d102      	bne.n	800ad4a <ReadVariable+0xba>
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	3301      	adds	r3, #1
 800ad48:	d02d      	beq.n	800ada6 <ReadVariable+0x116>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	1c13      	adds	r3, r2, #0
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	2216      	movs	r2, #22
 800ad54:	18ba      	adds	r2, r7, r2
 800ad56:	8812      	ldrh	r2, [r2, #0]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d124      	bne.n	800ada6 <ReadVariable+0x116>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	001b      	movs	r3, r3
 800ad60:	60bb      	str	r3, [r7, #8]
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	68b8      	ldr	r0, [r7, #8]
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	1c13      	adds	r3, r2, #0
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	0019      	movs	r1, r3
 800ad72:	f000 fe63 	bl	800ba3c <CalculateCrc>
 800ad76:	0003      	movs	r3, r0
 800ad78:	61fb      	str	r3, [r7, #28]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	041b      	lsls	r3, r3, #16
 800ad7e:	6a3a      	ldr	r2, [r7, #32]
 800ad80:	0c14      	lsrs	r4, r2, #16
 800ad82:	431c      	orrs	r4, r3
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	0c1d      	lsrs	r5, r3, #16
 800ad88:	b2a3      	uxth	r3, r4
 800ad8a:	001a      	movs	r2, r3
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d109      	bne.n	800ada6 <ReadVariable+0x116>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	001b      	movs	r3, r3
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	607b      	str	r3, [r7, #4]
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e067      	b.n	800ae76 <ReadVariable+0x1e6>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	3b08      	subs	r3, #8
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (counter >= PAGE_HEADER_SIZE)
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	2b1f      	cmp	r3, #31
 800adb0:	d8be      	bhi.n	800ad30 <ReadVariable+0xa0>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800adb2:	4b33      	ldr	r3, [pc, #204]	; (800ae80 <ReadVariable+0x1f0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	029a      	lsls	r2, r3, #10
 800adb8:	23ff      	movs	r3, #255	; 0xff
 800adba:	029b      	lsls	r3, r3, #10
 800adbc:	401a      	ands	r2, r3
 800adbe:	23d4      	movs	r3, #212	; 0xd4
 800adc0:	025b      	lsls	r3, r3, #9
 800adc2:	0011      	movs	r1, r2
 800adc4:	0018      	movs	r0, r3
 800adc6:	f7f5 fa2f 	bl	8000228 <__aeabi_uidivmod>
 800adca:	000b      	movs	r3, r1
 800adcc:	0adb      	lsrs	r3, r3, #11
 800adce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	3309      	adds	r3, #9
 800add4:	210a      	movs	r1, #10
 800add6:	0018      	movs	r0, r3
 800add8:	f7f5 fa26 	bl	8000228 <__aeabi_uidivmod>
 800addc:	000b      	movs	r3, r1
 800adde:	001e      	movs	r6, r3
 800ade0:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <ReadVariable+0x1f0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	029a      	lsls	r2, r3, #10
 800ade6:	23ff      	movs	r3, #255	; 0xff
 800ade8:	029b      	lsls	r3, r3, #10
 800adea:	401a      	ands	r2, r3
 800adec:	23d4      	movs	r3, #212	; 0xd4
 800adee:	025b      	lsls	r3, r3, #9
 800adf0:	0011      	movs	r1, r2
 800adf2:	0018      	movs	r0, r3
 800adf4:	f7f5 fa18 	bl	8000228 <__aeabi_uidivmod>
 800adf8:	000b      	movs	r3, r1
 800adfa:	0adb      	lsrs	r3, r3, #11
 800adfc:	18f3      	adds	r3, r6, r3
 800adfe:	637b      	str	r3, [r7, #52]	; 0x34
    pageaddress = PAGE_ADDRESS(page);
 800ae00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae02:	2280      	movs	r2, #128	; 0x80
 800ae04:	0252      	lsls	r2, r2, #9
 800ae06:	4694      	mov	ip, r2
 800ae08:	4463      	add	r3, ip
 800ae0a:	02de      	lsls	r6, r3, #11
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <ReadVariable+0x1f0>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	029a      	lsls	r2, r3, #10
 800ae12:	23ff      	movs	r3, #255	; 0xff
 800ae14:	029b      	lsls	r3, r3, #10
 800ae16:	4013      	ands	r3, r2
 800ae18:	0019      	movs	r1, r3
 800ae1a:	23d4      	movs	r3, #212	; 0xd4
 800ae1c:	0258      	lsls	r0, r3, #9
 800ae1e:	f7f5 f97d 	bl	800011c <__udivsi3>
 800ae22:	0003      	movs	r3, r0
 800ae24:	0019      	movs	r1, r3
 800ae26:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <ReadVariable+0x1f0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	029a      	lsls	r2, r3, #10
 800ae2c:	23ff      	movs	r3, #255	; 0xff
 800ae2e:	029b      	lsls	r3, r3, #10
 800ae30:	4013      	ands	r3, r2
 800ae32:	434b      	muls	r3, r1
 800ae34:	18f3      	adds	r3, r6, r3
 800ae36:	633b      	str	r3, [r7, #48]	; 0x30
    pagestate = GetPageState(pageaddress);
 800ae38:	231b      	movs	r3, #27
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	18ba      	adds	r2, r7, r2
 800ae3e:	18d6      	adds	r6, r2, r3
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 fd90 	bl	800b968 <GetPageState>
 800ae48:	0003      	movs	r3, r0
 800ae4a:	7033      	strb	r3, [r6, #0]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800ae4c:	221b      	movs	r2, #27
 800ae4e:	2110      	movs	r1, #16
 800ae50:	187b      	adds	r3, r7, r1
 800ae52:	189b      	adds	r3, r3, r2
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d100      	bne.n	800ae5c <ReadVariable+0x1cc>
 800ae5a:	e765      	b.n	800ad28 <ReadVariable+0x98>
 800ae5c:	187b      	adds	r3, r7, r1
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d100      	bne.n	800ae68 <ReadVariable+0x1d8>
 800ae66:	e75f      	b.n	800ad28 <ReadVariable+0x98>
 800ae68:	187b      	adds	r3, r7, r1
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d100      	bne.n	800ae74 <ReadVariable+0x1e4>
 800ae72:	e759      	b.n	800ad28 <ReadVariable+0x98>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800ae74:	2307      	movs	r3, #7
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b00f      	add	sp, #60	; 0x3c
 800ae7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	1fff75e0 	.word	0x1fff75e0

0800ae84 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800ae84:	b5b0      	push	{r4, r5, r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	0002      	movs	r2, r0
 800ae8c:	6039      	str	r1, [r7, #0]
 800ae8e:	1dbb      	adds	r3, r7, #6
 800ae90:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800ae92:	250e      	movs	r5, #14
 800ae94:	197b      	adds	r3, r7, r5
 800ae96:	2200      	movs	r2, #0
 800ae98:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800ae9a:	197c      	adds	r4, r7, r5
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	1dbb      	adds	r3, r7, #6
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	0011      	movs	r1, r2
 800aea4:	0018      	movs	r0, r3
 800aea6:	f000 fbf3 	bl	800b690 <VerifyPagesFullWriteVariable>
 800aeaa:	0003      	movs	r3, r0
 800aeac:	8023      	strh	r3, [r4, #0]
#endif
  if (status == EE_PAGE_FULL)
 800aeae:	197b      	adds	r3, r7, r5
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	2b12      	cmp	r3, #18
 800aeb4:	d108      	bne.n	800aec8 <WriteVariable+0x44>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	1dbb      	adds	r3, r7, #6
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	2200      	movs	r2, #0
 800aebe:	0018      	movs	r0, r3
 800aec0:	f000 f972 	bl	800b1a8 <PagesTransfer>
 800aec4:	0003      	movs	r3, r0
 800aec6:	e002      	b.n	800aece <WriteVariable+0x4a>
  }

  /* Return last operation status */
  return status;
 800aec8:	230e      	movs	r3, #14
 800aeca:	18fb      	adds	r3, r7, r3
 800aecc:	881b      	ldrh	r3, [r3, #0]
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b004      	add	sp, #16
 800aed4:	bdb0      	pop	{r4, r5, r7, pc}

0800aed6 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800aee0:	230e      	movs	r3, #14
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	2211      	movs	r2, #17
 800aee6:	801a      	strh	r2, [r3, #0]
  uint32_t counter = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 800aeec:	e00f      	b.n	800af0e <VerifyPageFullyErased+0x38>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	18d3      	adds	r3, r2, r3
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	1c51      	adds	r1, r2, #1
 800aefa:	d101      	bne.n	800af00 <VerifyPageFullyErased+0x2a>
 800aefc:	3301      	adds	r3, #1
 800aefe:	d003      	beq.n	800af08 <VerifyPageFullyErased+0x32>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800af00:	230e      	movs	r3, #14
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	2210      	movs	r2, #16
 800af06:	801a      	strh	r2, [r3, #0]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	3308      	adds	r3, #8
 800af0c:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d3eb      	bcc.n	800aeee <VerifyPageFullyErased+0x18>
  }

  /* Return readstatus value */
  return readstatus;
 800af16:	230e      	movs	r3, #14
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	881b      	ldrh	r3, [r3, #0]
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b004      	add	sp, #16
 800af22:	bd80      	pop	{r7, pc}

0800af24 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	0002      	movs	r2, r0
 800af2c:	1dfb      	adds	r3, r7, #7
 800af2e:	701a      	strb	r2, [r3, #0]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 800af30:	2517      	movs	r5, #23
 800af32:	197b      	adds	r3, r7, r5
 800af34:	2205      	movs	r2, #5
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	2616      	movs	r6, #22
 800af3a:	19bb      	adds	r3, r7, r6
 800af3c:	2205      	movs	r2, #5
 800af3e:	701a      	strb	r2, [r3, #0]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	2300      	movs	r3, #0
 800af4a:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 800af4c:	4b93      	ldr	r3, [pc, #588]	; (800b19c <FindPage+0x278>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2280      	movs	r2, #128	; 0x80
 800af56:	0252      	lsls	r2, r2, #9
 800af58:	4694      	mov	ip, r2
 800af5a:	4463      	add	r3, ip
 800af5c:	02dc      	lsls	r4, r3, #11
 800af5e:	4b90      	ldr	r3, [pc, #576]	; (800b1a0 <FindPage+0x27c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	029a      	lsls	r2, r3, #10
 800af64:	23ff      	movs	r3, #255	; 0xff
 800af66:	029b      	lsls	r3, r3, #10
 800af68:	4013      	ands	r3, r2
 800af6a:	0019      	movs	r1, r3
 800af6c:	23d4      	movs	r3, #212	; 0xd4
 800af6e:	0258      	lsls	r0, r3, #9
 800af70:	f7f5 f8d4 	bl	800011c <__udivsi3>
 800af74:	0003      	movs	r3, r0
 800af76:	0019      	movs	r1, r3
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <FindPage+0x27c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	029a      	lsls	r2, r3, #10
 800af7e:	23ff      	movs	r3, #255	; 0xff
 800af80:	029b      	lsls	r3, r3, #10
 800af82:	4013      	ands	r3, r2
 800af84:	434b      	muls	r3, r1
 800af86:	18e3      	adds	r3, r4, r3
 800af88:	197c      	adds	r4, r7, r5
 800af8a:	0018      	movs	r0, r3
 800af8c:	f000 fcec 	bl	800b968 <GetPageState>
 800af90:	0003      	movs	r3, r0
 800af92:	7023      	strb	r3, [r4, #0]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800af94:	4b82      	ldr	r3, [pc, #520]	; (800b1a0 <FindPage+0x27c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	029a      	lsls	r2, r3, #10
 800af9a:	23ff      	movs	r3, #255	; 0xff
 800af9c:	029b      	lsls	r3, r3, #10
 800af9e:	401a      	ands	r2, r3
 800afa0:	23d4      	movs	r3, #212	; 0xd4
 800afa2:	025b      	lsls	r3, r3, #9
 800afa4:	0011      	movs	r1, r2
 800afa6:	0018      	movs	r0, r3
 800afa8:	f7f5 f93e 	bl	8000228 <__aeabi_uidivmod>
 800afac:	000b      	movs	r3, r1
 800afae:	0adb      	lsrs	r3, r3, #11
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	3301      	adds	r3, #1
 800afb6:	210a      	movs	r1, #10
 800afb8:	0018      	movs	r0, r3
 800afba:	f7f5 f935 	bl	8000228 <__aeabi_uidivmod>
 800afbe:	000b      	movs	r3, r1
 800afc0:	001c      	movs	r4, r3
 800afc2:	4b77      	ldr	r3, [pc, #476]	; (800b1a0 <FindPage+0x27c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	029a      	lsls	r2, r3, #10
 800afc8:	23ff      	movs	r3, #255	; 0xff
 800afca:	029b      	lsls	r3, r3, #10
 800afcc:	401a      	ands	r2, r3
 800afce:	23d4      	movs	r3, #212	; 0xd4
 800afd0:	025b      	lsls	r3, r3, #9
 800afd2:	0011      	movs	r1, r2
 800afd4:	0018      	movs	r0, r3
 800afd6:	f7f5 f927 	bl	8000228 <__aeabi_uidivmod>
 800afda:	000b      	movs	r3, r1
 800afdc:	0adb      	lsrs	r3, r3, #11
 800afde:	18e3      	adds	r3, r4, r3
 800afe0:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2280      	movs	r2, #128	; 0x80
 800afe6:	0252      	lsls	r2, r2, #9
 800afe8:	4694      	mov	ip, r2
 800afea:	4463      	add	r3, ip
 800afec:	02dc      	lsls	r4, r3, #11
 800afee:	4b6c      	ldr	r3, [pc, #432]	; (800b1a0 <FindPage+0x27c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	029a      	lsls	r2, r3, #10
 800aff4:	23ff      	movs	r3, #255	; 0xff
 800aff6:	029b      	lsls	r3, r3, #10
 800aff8:	4013      	ands	r3, r2
 800affa:	0019      	movs	r1, r3
 800affc:	23d4      	movs	r3, #212	; 0xd4
 800affe:	0258      	lsls	r0, r3, #9
 800b000:	f7f5 f88c 	bl	800011c <__udivsi3>
 800b004:	0003      	movs	r3, r0
 800b006:	0019      	movs	r1, r3
 800b008:	4b65      	ldr	r3, [pc, #404]	; (800b1a0 <FindPage+0x27c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	029a      	lsls	r2, r3, #10
 800b00e:	23ff      	movs	r3, #255	; 0xff
 800b010:	029b      	lsls	r3, r3, #10
 800b012:	4013      	ands	r3, r2
 800b014:	434b      	muls	r3, r1
 800b016:	18e3      	adds	r3, r4, r3
 800b018:	19bc      	adds	r4, r7, r6
 800b01a:	0018      	movs	r0, r3
 800b01c:	f000 fca4 	bl	800b968 <GetPageState>
 800b020:	0003      	movs	r3, r0
 800b022:	7023      	strb	r3, [r4, #0]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 800b024:	4b5e      	ldr	r3, [pc, #376]	; (800b1a0 <FindPage+0x27c>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	029a      	lsls	r2, r3, #10
 800b02a:	23ff      	movs	r3, #255	; 0xff
 800b02c:	029b      	lsls	r3, r3, #10
 800b02e:	401a      	ands	r2, r3
 800b030:	23d4      	movs	r3, #212	; 0xd4
 800b032:	025b      	lsls	r3, r3, #9
 800b034:	0011      	movs	r1, r2
 800b036:	0018      	movs	r0, r3
 800b038:	f7f5 f8f6 	bl	8000228 <__aeabi_uidivmod>
 800b03c:	000b      	movs	r3, r1
 800b03e:	0adb      	lsrs	r3, r3, #11
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	3309      	adds	r3, #9
 800b046:	210a      	movs	r1, #10
 800b048:	0018      	movs	r0, r3
 800b04a:	f7f5 f8ed 	bl	8000228 <__aeabi_uidivmod>
 800b04e:	000b      	movs	r3, r1
 800b050:	001c      	movs	r4, r3
 800b052:	4b53      	ldr	r3, [pc, #332]	; (800b1a0 <FindPage+0x27c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	029a      	lsls	r2, r3, #10
 800b058:	23ff      	movs	r3, #255	; 0xff
 800b05a:	029b      	lsls	r3, r3, #10
 800b05c:	401a      	ands	r2, r3
 800b05e:	23d4      	movs	r3, #212	; 0xd4
 800b060:	025b      	lsls	r3, r3, #9
 800b062:	0011      	movs	r1, r2
 800b064:	0018      	movs	r0, r3
 800b066:	f7f5 f8df 	bl	8000228 <__aeabi_uidivmod>
 800b06a:	000b      	movs	r3, r1
 800b06c:	0adb      	lsrs	r3, r3, #11
 800b06e:	18e3      	adds	r3, r4, r3
 800b070:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 800b072:	1dfb      	adds	r3, r7, #7
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d100      	bne.n	800b07c <FindPage+0x158>
 800b07a:	e07e      	b.n	800b17a <FindPage+0x256>
 800b07c:	dd00      	ble.n	800b080 <FindPage+0x15c>
 800b07e:	e086      	b.n	800b18e <FindPage+0x26a>
 800b080:	2b00      	cmp	r3, #0
 800b082:	d100      	bne.n	800b086 <FindPage+0x162>
 800b084:	e068      	b.n	800b158 <FindPage+0x234>
 800b086:	2b01      	cmp	r3, #1
 800b088:	d000      	beq.n	800b08c <FindPage+0x168>
 800b08a:	e080      	b.n	800b18e <FindPage+0x26a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800b08c:	197b      	adds	r3, r7, r5
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d12c      	bne.n	800b0ee <FindPage+0x1ca>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800b094:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <FindPage+0x280>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	2380      	movs	r3, #128	; 0x80
 800b09a:	011b      	lsls	r3, r3, #4
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d201      	bcs.n	800b0a4 <FindPage+0x180>
        {
          /* Return current Active page */
          return currentpage;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	e076      	b.n	800b192 <FindPage+0x26e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800b0a4:	2316      	movs	r3, #22
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	d106      	bne.n	800b0bc <FindPage+0x198>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 800b0ae:	f7ff fd49 	bl	800ab44 <EE_CleanUp>
 800b0b2:	1e03      	subs	r3, r0, #0
 800b0b4:	d002      	beq.n	800b0bc <FindPage+0x198>
            {
              return EE_NO_PAGE_FOUND;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	425b      	negs	r3, r3
 800b0ba:	e06a      	b.n	800b192 <FindPage+0x26e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2103      	movs	r1, #3
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f000 fb7f 	bl	800b7c4 <SetPageState>
 800b0c6:	1e03      	subs	r3, r0, #0
 800b0c8:	d002      	beq.n	800b0d0 <FindPage+0x1ac>
          {
            return EE_NO_PAGE_FOUND;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	425b      	negs	r3, r3
 800b0ce:	e060      	b.n	800b192 <FindPage+0x26e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2102      	movs	r1, #2
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f000 fb75 	bl	800b7c4 <SetPageState>
 800b0da:	1e03      	subs	r3, r0, #0
 800b0dc:	d002      	beq.n	800b0e4 <FindPage+0x1c0>
          {
            return EE_NO_PAGE_FOUND;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	425b      	negs	r3, r3
 800b0e2:	e056      	b.n	800b192 <FindPage+0x26e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800b0e4:	4b2f      	ldr	r3, [pc, #188]	; (800b1a4 <FindPage+0x280>)
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	e051      	b.n	800b192 <FindPage+0x26e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800b0ee:	2317      	movs	r3, #23
 800b0f0:	18fb      	adds	r3, r7, r3
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d12c      	bne.n	800b152 <FindPage+0x22e>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 800b0f8:	4b2a      	ldr	r3, [pc, #168]	; (800b1a4 <FindPage+0x280>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	2380      	movs	r3, #128	; 0x80
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	429a      	cmp	r2, r3
 800b102:	d201      	bcs.n	800b108 <FindPage+0x1e4>
          {
            /* Return current receive page */
            return currentpage;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	e044      	b.n	800b192 <FindPage+0x26e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 800b108:	2316      	movs	r3, #22
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d106      	bne.n	800b120 <FindPage+0x1fc>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800b112:	f7ff fd17 	bl	800ab44 <EE_CleanUp>
 800b116:	1e03      	subs	r3, r0, #0
 800b118:	d002      	beq.n	800b120 <FindPage+0x1fc>
              {
                return EE_NO_PAGE_FOUND;
 800b11a:	2301      	movs	r3, #1
 800b11c:	425b      	negs	r3, r3
 800b11e:	e038      	b.n	800b192 <FindPage+0x26e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	2103      	movs	r1, #3
 800b124:	0018      	movs	r0, r3
 800b126:	f000 fb4d 	bl	800b7c4 <SetPageState>
 800b12a:	1e03      	subs	r3, r0, #0
 800b12c:	d002      	beq.n	800b134 <FindPage+0x210>
            {
              return EE_NO_PAGE_FOUND;
 800b12e:	2301      	movs	r3, #1
 800b130:	425b      	negs	r3, r3
 800b132:	e02e      	b.n	800b192 <FindPage+0x26e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2101      	movs	r1, #1
 800b138:	0018      	movs	r0, r3
 800b13a:	f000 fb43 	bl	800b7c4 <SetPageState>
 800b13e:	1e03      	subs	r3, r0, #0
 800b140:	d002      	beq.n	800b148 <FindPage+0x224>
            {
              return EE_NO_PAGE_FOUND;
 800b142:	2301      	movs	r3, #1
 800b144:	425b      	negs	r3, r3
 800b146:	e024      	b.n	800b192 <FindPage+0x26e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800b148:	4b16      	ldr	r3, [pc, #88]	; (800b1a4 <FindPage+0x280>)
 800b14a:	2220      	movs	r2, #32
 800b14c:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	e01f      	b.n	800b192 <FindPage+0x26e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b152:	2301      	movs	r3, #1
 800b154:	425b      	negs	r3, r3
 800b156:	e01c      	b.n	800b192 <FindPage+0x26e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800b158:	2317      	movs	r3, #23
 800b15a:	18fb      	adds	r3, r7, r3
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d101      	bne.n	800b166 <FindPage+0x242>
      {
        return currentpage;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	e015      	b.n	800b192 <FindPage+0x26e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800b166:	2317      	movs	r3, #23
 800b168:	18fb      	adds	r3, r7, r3
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <FindPage+0x250>
        {
          return previouspage;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	e00e      	b.n	800b192 <FindPage+0x26e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b174:	2301      	movs	r3, #1
 800b176:	425b      	negs	r3, r3
 800b178:	e00b      	b.n	800b192 <FindPage+0x26e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 800b17a:	2316      	movs	r3, #22
 800b17c:	18fb      	adds	r3, r7, r3
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <FindPage+0x264>
      {
        return followingpage;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	e004      	b.n	800b192 <FindPage+0x26e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 800b188:	2301      	movs	r3, #1
 800b18a:	425b      	negs	r3, r3
 800b18c:	e001      	b.n	800b192 <FindPage+0x26e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 800b18e:	2301      	movs	r3, #1
 800b190:	425b      	negs	r3, r3
}
 800b192:	0018      	movs	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	b007      	add	sp, #28
 800b198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	200001b6 	.word	0x200001b6
 800b1a0:	1fff75e0 	.word	0x1fff75e0
 800b1a4:	20000008 	.word	0x20000008

0800b1a8 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b08a      	sub	sp, #40	; 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6039      	str	r1, [r7, #0]
 800b1b0:	0011      	movs	r1, r2
 800b1b2:	1dbb      	adds	r3, r7, #6
 800b1b4:	1c02      	adds	r2, r0, #0
 800b1b6:	801a      	strh	r2, [r3, #0]
 800b1b8:	1d7b      	adds	r3, r7, #5
 800b1ba:	1c0a      	adds	r2, r1, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800b1be:	2327      	movs	r3, #39	; 0x27
 800b1c0:	18fb      	adds	r3, r7, r3
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	701a      	strb	r2, [r3, #0]
  uint32_t pageaddress = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	613a      	str	r2, [r7, #16]
 800b1d8:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 800b1da:	230e      	movs	r3, #14
 800b1dc:	18fb      	adds	r3, r7, r3
 800b1de:	2200      	movs	r2, #0
 800b1e0:	801a      	strh	r2, [r3, #0]
  EE_DATA_TYPE DataValue = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 800b1e6:	1d7b      	adds	r3, r7, #5
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <PagesTransfer+0x4a>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e000      	b.n	800b1f4 <PagesTransfer+0x4c>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7ff fe95 	bl	800af24 <FindPage>
 800b1fa:	0003      	movs	r3, r0
 800b1fc:	623b      	str	r3, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	3301      	adds	r3, #1
 800b202:	d101      	bne.n	800b208 <PagesTransfer+0x60>
  {
    return EE_ERROR_NOERASE_PAGE;
 800b204:	2304      	movs	r3, #4
 800b206:	e238      	b.n	800b67a <PagesTransfer+0x4d2>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 800b208:	4bbe      	ldr	r3, [pc, #760]	; (800b504 <PagesTransfer+0x35c>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	4bbd      	ldr	r3, [pc, #756]	; (800b508 <PagesTransfer+0x360>)
 800b214:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800b216:	4bbd      	ldr	r3, [pc, #756]	; (800b50c <PagesTransfer+0x364>)
 800b218:	2220      	movs	r2, #32
 800b21a:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 800b21c:	1d7b      	adds	r3, r7, #5
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d108      	bne.n	800b236 <PagesTransfer+0x8e>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	2101      	movs	r1, #1
 800b228:	0018      	movs	r0, r3
 800b22a:	f000 facb 	bl	800b7c4 <SetPageState>
 800b22e:	1e03      	subs	r3, r0, #0
 800b230:	d001      	beq.n	800b236 <PagesTransfer+0x8e>
    {
      return EE_WRITE_ERROR;
 800b232:	2302      	movs	r3, #2
 800b234:	e221      	b.n	800b67a <PagesTransfer+0x4d2>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 800b236:	4bb6      	ldr	r3, [pc, #728]	; (800b510 <PagesTransfer+0x368>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	029a      	lsls	r2, r3, #10
 800b23c:	23ff      	movs	r3, #255	; 0xff
 800b23e:	029b      	lsls	r3, r3, #10
 800b240:	401a      	ands	r2, r3
 800b242:	23d4      	movs	r3, #212	; 0xd4
 800b244:	025b      	lsls	r3, r3, #9
 800b246:	0011      	movs	r1, r2
 800b248:	0018      	movs	r0, r3
 800b24a:	f7f4 ffed 	bl	8000228 <__aeabi_uidivmod>
 800b24e:	000b      	movs	r3, r1
 800b250:	0adb      	lsrs	r3, r3, #11
 800b252:	6a3a      	ldr	r2, [r7, #32]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	3309      	adds	r3, #9
 800b258:	210a      	movs	r1, #10
 800b25a:	0018      	movs	r0, r3
 800b25c:	f7f4 ffe4 	bl	8000228 <__aeabi_uidivmod>
 800b260:	000b      	movs	r3, r1
 800b262:	001c      	movs	r4, r3
 800b264:	4baa      	ldr	r3, [pc, #680]	; (800b510 <PagesTransfer+0x368>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	029a      	lsls	r2, r3, #10
 800b26a:	23ff      	movs	r3, #255	; 0xff
 800b26c:	029b      	lsls	r3, r3, #10
 800b26e:	401a      	ands	r2, r3
 800b270:	23d4      	movs	r3, #212	; 0xd4
 800b272:	025b      	lsls	r3, r3, #9
 800b274:	0011      	movs	r1, r2
 800b276:	0018      	movs	r0, r3
 800b278:	f7f4 ffd6 	bl	8000228 <__aeabi_uidivmod>
 800b27c:	000b      	movs	r3, r1
 800b27e:	0adb      	lsrs	r3, r3, #11
 800b280:	18e3      	adds	r3, r4, r3
 800b282:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	2280      	movs	r2, #128	; 0x80
 800b288:	0252      	lsls	r2, r2, #9
 800b28a:	4694      	mov	ip, r2
 800b28c:	4463      	add	r3, ip
 800b28e:	02dc      	lsls	r4, r3, #11
 800b290:	4b9f      	ldr	r3, [pc, #636]	; (800b510 <PagesTransfer+0x368>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	029a      	lsls	r2, r3, #10
 800b296:	23ff      	movs	r3, #255	; 0xff
 800b298:	029b      	lsls	r3, r3, #10
 800b29a:	4013      	ands	r3, r2
 800b29c:	0019      	movs	r1, r3
 800b29e:	23d4      	movs	r3, #212	; 0xd4
 800b2a0:	0258      	lsls	r0, r3, #9
 800b2a2:	f7f4 ff3b 	bl	800011c <__udivsi3>
 800b2a6:	0003      	movs	r3, r0
 800b2a8:	0019      	movs	r1, r3
 800b2aa:	4b99      	ldr	r3, [pc, #612]	; (800b510 <PagesTransfer+0x368>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	029a      	lsls	r2, r3, #10
 800b2b0:	23ff      	movs	r3, #255	; 0xff
 800b2b2:	029b      	lsls	r3, r3, #10
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	434b      	muls	r3, r1
 800b2b8:	18e3      	adds	r3, r4, r3
 800b2ba:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 800b2bc:	2527      	movs	r5, #39	; 0x27
 800b2be:	197c      	adds	r4, r7, r5
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f000 fb50 	bl	800b968 <GetPageState>
 800b2c8:	0003      	movs	r3, r0
 800b2ca:	7023      	strb	r3, [r4, #0]

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b2cc:	197b      	adds	r3, r7, r5
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d004      	beq.n	800b2de <PagesTransfer+0x136>
 800b2d4:	197b      	adds	r3, r7, r5
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	d000      	beq.n	800b2de <PagesTransfer+0x136>
 800b2dc:	e0bc      	b.n	800b458 <PagesTransfer+0x2b0>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800b2de:	2327      	movs	r3, #39	; 0x27
 800b2e0:	18fb      	adds	r3, r7, r3
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d108      	bne.n	800b2fa <PagesTransfer+0x152>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b2e8:	6a3b      	ldr	r3, [r7, #32]
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 fa69 	bl	800b7c4 <SetPageState>
 800b2f2:	1e03      	subs	r3, r0, #0
 800b2f4:	d001      	beq.n	800b2fa <PagesTransfer+0x152>
      {
        return EE_WRITE_ERROR;
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e1bf      	b.n	800b67a <PagesTransfer+0x4d2>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 800b2fa:	4b85      	ldr	r3, [pc, #532]	; (800b510 <PagesTransfer+0x368>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	029a      	lsls	r2, r3, #10
 800b300:	23ff      	movs	r3, #255	; 0xff
 800b302:	029b      	lsls	r3, r3, #10
 800b304:	401a      	ands	r2, r3
 800b306:	23d4      	movs	r3, #212	; 0xd4
 800b308:	025b      	lsls	r3, r3, #9
 800b30a:	0011      	movs	r1, r2
 800b30c:	0018      	movs	r0, r3
 800b30e:	f7f4 ff8b 	bl	8000228 <__aeabi_uidivmod>
 800b312:	000b      	movs	r3, r1
 800b314:	0adb      	lsrs	r3, r3, #11
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	3309      	adds	r3, #9
 800b31c:	210a      	movs	r1, #10
 800b31e:	0018      	movs	r0, r3
 800b320:	f7f4 ff82 	bl	8000228 <__aeabi_uidivmod>
 800b324:	000b      	movs	r3, r1
 800b326:	001c      	movs	r4, r3
 800b328:	4b79      	ldr	r3, [pc, #484]	; (800b510 <PagesTransfer+0x368>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	029a      	lsls	r2, r3, #10
 800b32e:	23ff      	movs	r3, #255	; 0xff
 800b330:	029b      	lsls	r3, r3, #10
 800b332:	401a      	ands	r2, r3
 800b334:	23d4      	movs	r3, #212	; 0xd4
 800b336:	025b      	lsls	r3, r3, #9
 800b338:	0011      	movs	r1, r2
 800b33a:	0018      	movs	r0, r3
 800b33c:	f7f4 ff74 	bl	8000228 <__aeabi_uidivmod>
 800b340:	000b      	movs	r3, r1
 800b342:	0adb      	lsrs	r3, r3, #11
 800b344:	18e3      	adds	r3, r4, r3
 800b346:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	2280      	movs	r2, #128	; 0x80
 800b34c:	0252      	lsls	r2, r2, #9
 800b34e:	4694      	mov	ip, r2
 800b350:	4463      	add	r3, ip
 800b352:	02dc      	lsls	r4, r3, #11
 800b354:	4b6e      	ldr	r3, [pc, #440]	; (800b510 <PagesTransfer+0x368>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	029a      	lsls	r2, r3, #10
 800b35a:	23ff      	movs	r3, #255	; 0xff
 800b35c:	029b      	lsls	r3, r3, #10
 800b35e:	4013      	ands	r3, r2
 800b360:	0019      	movs	r1, r3
 800b362:	23d4      	movs	r3, #212	; 0xd4
 800b364:	0258      	lsls	r0, r3, #9
 800b366:	f7f4 fed9 	bl	800011c <__udivsi3>
 800b36a:	0003      	movs	r3, r0
 800b36c:	0019      	movs	r1, r3
 800b36e:	4b68      	ldr	r3, [pc, #416]	; (800b510 <PagesTransfer+0x368>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	029a      	lsls	r2, r3, #10
 800b374:	23ff      	movs	r3, #255	; 0xff
 800b376:	029b      	lsls	r3, r3, #10
 800b378:	4013      	ands	r3, r2
 800b37a:	434b      	muls	r3, r1
 800b37c:	18e3      	adds	r3, r4, r3
 800b37e:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 800b380:	2327      	movs	r3, #39	; 0x27
 800b382:	18fc      	adds	r4, r7, r3
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	0018      	movs	r0, r3
 800b388:	f000 faee 	bl	800b968 <GetPageState>
 800b38c:	0003      	movs	r3, r0
 800b38e:	7023      	strb	r3, [r4, #0]

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b390:	e058      	b.n	800b444 <PagesTransfer+0x29c>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 800b392:	2327      	movs	r3, #39	; 0x27
 800b394:	18fb      	adds	r3, r7, r3
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d108      	bne.n	800b3ae <PagesTransfer+0x206>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	2104      	movs	r1, #4
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f000 fa0f 	bl	800b7c4 <SetPageState>
 800b3a6:	1e03      	subs	r3, r0, #0
 800b3a8:	d001      	beq.n	800b3ae <PagesTransfer+0x206>
        {
          return EE_WRITE_ERROR;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e165      	b.n	800b67a <PagesTransfer+0x4d2>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 800b3ae:	4b58      	ldr	r3, [pc, #352]	; (800b510 <PagesTransfer+0x368>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	029a      	lsls	r2, r3, #10
 800b3b4:	23ff      	movs	r3, #255	; 0xff
 800b3b6:	029b      	lsls	r3, r3, #10
 800b3b8:	401a      	ands	r2, r3
 800b3ba:	23d4      	movs	r3, #212	; 0xd4
 800b3bc:	025b      	lsls	r3, r3, #9
 800b3be:	0011      	movs	r1, r2
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f7f4 ff31 	bl	8000228 <__aeabi_uidivmod>
 800b3c6:	000b      	movs	r3, r1
 800b3c8:	0adb      	lsrs	r3, r3, #11
 800b3ca:	6a3a      	ldr	r2, [r7, #32]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	3309      	adds	r3, #9
 800b3d0:	210a      	movs	r1, #10
 800b3d2:	0018      	movs	r0, r3
 800b3d4:	f7f4 ff28 	bl	8000228 <__aeabi_uidivmod>
 800b3d8:	000b      	movs	r3, r1
 800b3da:	001c      	movs	r4, r3
 800b3dc:	4b4c      	ldr	r3, [pc, #304]	; (800b510 <PagesTransfer+0x368>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	029a      	lsls	r2, r3, #10
 800b3e2:	23ff      	movs	r3, #255	; 0xff
 800b3e4:	029b      	lsls	r3, r3, #10
 800b3e6:	401a      	ands	r2, r3
 800b3e8:	23d4      	movs	r3, #212	; 0xd4
 800b3ea:	025b      	lsls	r3, r3, #9
 800b3ec:	0011      	movs	r1, r2
 800b3ee:	0018      	movs	r0, r3
 800b3f0:	f7f4 ff1a 	bl	8000228 <__aeabi_uidivmod>
 800b3f4:	000b      	movs	r3, r1
 800b3f6:	0adb      	lsrs	r3, r3, #11
 800b3f8:	18e3      	adds	r3, r4, r3
 800b3fa:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	2280      	movs	r2, #128	; 0x80
 800b400:	0252      	lsls	r2, r2, #9
 800b402:	4694      	mov	ip, r2
 800b404:	4463      	add	r3, ip
 800b406:	02dc      	lsls	r4, r3, #11
 800b408:	4b41      	ldr	r3, [pc, #260]	; (800b510 <PagesTransfer+0x368>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	029a      	lsls	r2, r3, #10
 800b40e:	23ff      	movs	r3, #255	; 0xff
 800b410:	029b      	lsls	r3, r3, #10
 800b412:	4013      	ands	r3, r2
 800b414:	0019      	movs	r1, r3
 800b416:	23d4      	movs	r3, #212	; 0xd4
 800b418:	0258      	lsls	r0, r3, #9
 800b41a:	f7f4 fe7f 	bl	800011c <__udivsi3>
 800b41e:	0003      	movs	r3, r0
 800b420:	0019      	movs	r1, r3
 800b422:	4b3b      	ldr	r3, [pc, #236]	; (800b510 <PagesTransfer+0x368>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	029a      	lsls	r2, r3, #10
 800b428:	23ff      	movs	r3, #255	; 0xff
 800b42a:	029b      	lsls	r3, r3, #10
 800b42c:	4013      	ands	r3, r2
 800b42e:	434b      	muls	r3, r1
 800b430:	18e3      	adds	r3, r4, r3
 800b432:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 800b434:	2327      	movs	r3, #39	; 0x27
 800b436:	18fc      	adds	r4, r7, r3
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	0018      	movs	r0, r3
 800b43c:	f000 fa94 	bl	800b968 <GetPageState>
 800b440:	0003      	movs	r3, r0
 800b442:	7023      	strb	r3, [r4, #0]
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b444:	2227      	movs	r2, #39	; 0x27
 800b446:	18bb      	adds	r3, r7, r2
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d0a1      	beq.n	800b392 <PagesTransfer+0x1ea>
 800b44e:	18bb      	adds	r3, r7, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b04      	cmp	r3, #4
 800b454:	d09d      	beq.n	800b392 <PagesTransfer+0x1ea>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b456:	e00a      	b.n	800b46e <PagesTransfer+0x2c6>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 800b458:	1d7b      	adds	r3, r7, #5
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d104      	bne.n	800b46a <PagesTransfer+0x2c2>
 800b460:	2327      	movs	r3, #39	; 0x27
 800b462:	18fb      	adds	r3, r7, r3
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b03      	cmp	r3, #3
 800b468:	d001      	beq.n	800b46e <PagesTransfer+0x2c6>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 800b46a:	230a      	movs	r3, #10
 800b46c:	e105      	b.n	800b67a <PagesTransfer+0x4d2>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800b46e:	1d7b      	adds	r3, r7, #5
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d000      	beq.n	800b478 <PagesTransfer+0x2d0>
 800b476:	e0a8      	b.n	800b5ca <PagesTransfer+0x422>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b478:	2320      	movs	r3, #32
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e037      	b.n	800b4ee <PagesTransfer+0x346>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800b47e:	4b22      	ldr	r3, [pc, #136]	; (800b508 <PagesTransfer+0x360>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2280      	movs	r2, #128	; 0x80
 800b484:	0252      	lsls	r2, r2, #9
 800b486:	4694      	mov	ip, r2
 800b488:	4463      	add	r3, ip
 800b48a:	02dc      	lsls	r4, r3, #11
 800b48c:	4b20      	ldr	r3, [pc, #128]	; (800b510 <PagesTransfer+0x368>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	029a      	lsls	r2, r3, #10
 800b492:	23ff      	movs	r3, #255	; 0xff
 800b494:	029b      	lsls	r3, r3, #10
 800b496:	4013      	ands	r3, r2
 800b498:	0019      	movs	r1, r3
 800b49a:	23d4      	movs	r3, #212	; 0xd4
 800b49c:	0258      	lsls	r0, r3, #9
 800b49e:	f7f4 fe3d 	bl	800011c <__udivsi3>
 800b4a2:	0003      	movs	r3, r0
 800b4a4:	0019      	movs	r1, r3
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <PagesTransfer+0x368>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	029a      	lsls	r2, r3, #10
 800b4ac:	23ff      	movs	r3, #255	; 0xff
 800b4ae:	029b      	lsls	r3, r3, #10
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	434b      	muls	r3, r1
 800b4b4:	18e2      	adds	r2, r4, r3
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	18d3      	adds	r3, r2, r3
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	613a      	str	r2, [r7, #16]
 800b4c0:	617b      	str	r3, [r7, #20]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) && (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)&& (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	d103      	bne.n	800b4d0 <PagesTransfer+0x328>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	d100      	bne.n	800b4d0 <PagesTransfer+0x328>
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else
      {
        break;
 800b4ce:	e013      	b.n	800b4f8 <PagesTransfer+0x350>
        uhNbWrittenElements++;
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <PagesTransfer+0x35c>)
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <PagesTransfer+0x35c>)
 800b4da:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <PagesTransfer+0x364>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	001a      	movs	r2, r3
 800b4e4:	4b09      	ldr	r3, [pc, #36]	; (800b50c <PagesTransfer+0x364>)
 800b4e6:	601a      	str	r2, [r3, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	61fb      	str	r3, [r7, #28]
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	2380      	movs	r3, #128	; 0x80
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d3c2      	bcc.n	800b47e <PagesTransfer+0x2d6>
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800b4f8:	4b03      	ldr	r3, [pc, #12]	; (800b508 <PagesTransfer+0x360>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	e05d      	b.n	800b5c0 <PagesTransfer+0x418>
 800b504:	200001b4 	.word	0x200001b4
 800b508:	200001b6 	.word	0x200001b6
 800b50c:	20000008 	.word	0x20000008
 800b510:	1fff75e0 	.word	0x1fff75e0
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800b514:	4b5b      	ldr	r3, [pc, #364]	; (800b684 <PagesTransfer+0x4dc>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	029a      	lsls	r2, r3, #10
 800b51a:	23ff      	movs	r3, #255	; 0xff
 800b51c:	029b      	lsls	r3, r3, #10
 800b51e:	401a      	ands	r2, r3
 800b520:	23d4      	movs	r3, #212	; 0xd4
 800b522:	025b      	lsls	r3, r3, #9
 800b524:	0011      	movs	r1, r2
 800b526:	0018      	movs	r0, r3
 800b528:	f7f4 fe7e 	bl	8000228 <__aeabi_uidivmod>
 800b52c:	000b      	movs	r3, r1
 800b52e:	0adb      	lsrs	r3, r3, #11
 800b530:	6a3a      	ldr	r2, [r7, #32]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	3309      	adds	r3, #9
 800b536:	210a      	movs	r1, #10
 800b538:	0018      	movs	r0, r3
 800b53a:	f7f4 fe75 	bl	8000228 <__aeabi_uidivmod>
 800b53e:	000b      	movs	r3, r1
 800b540:	001c      	movs	r4, r3
 800b542:	4b50      	ldr	r3, [pc, #320]	; (800b684 <PagesTransfer+0x4dc>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	029a      	lsls	r2, r3, #10
 800b548:	23ff      	movs	r3, #255	; 0xff
 800b54a:	029b      	lsls	r3, r3, #10
 800b54c:	401a      	ands	r2, r3
 800b54e:	23d4      	movs	r3, #212	; 0xd4
 800b550:	025b      	lsls	r3, r3, #9
 800b552:	0011      	movs	r1, r2
 800b554:	0018      	movs	r0, r3
 800b556:	f7f4 fe67 	bl	8000228 <__aeabi_uidivmod>
 800b55a:	000b      	movs	r3, r1
 800b55c:	0adb      	lsrs	r3, r3, #11
 800b55e:	18e3      	adds	r3, r4, r3
 800b560:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	2280      	movs	r2, #128	; 0x80
 800b566:	0252      	lsls	r2, r2, #9
 800b568:	4694      	mov	ip, r2
 800b56a:	4463      	add	r3, ip
 800b56c:	02dc      	lsls	r4, r3, #11
 800b56e:	4b45      	ldr	r3, [pc, #276]	; (800b684 <PagesTransfer+0x4dc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	029a      	lsls	r2, r3, #10
 800b574:	23ff      	movs	r3, #255	; 0xff
 800b576:	029b      	lsls	r3, r3, #10
 800b578:	4013      	ands	r3, r2
 800b57a:	0019      	movs	r1, r3
 800b57c:	23d4      	movs	r3, #212	; 0xd4
 800b57e:	0258      	lsls	r0, r3, #9
 800b580:	f7f4 fdcc 	bl	800011c <__udivsi3>
 800b584:	0003      	movs	r3, r0
 800b586:	0019      	movs	r1, r3
 800b588:	4b3e      	ldr	r3, [pc, #248]	; (800b684 <PagesTransfer+0x4dc>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	029a      	lsls	r2, r3, #10
 800b58e:	23ff      	movs	r3, #255	; 0xff
 800b590:	029b      	lsls	r3, r3, #10
 800b592:	4013      	ands	r3, r2
 800b594:	434b      	muls	r3, r1
 800b596:	18e3      	adds	r3, r4, r3
 800b598:	2527      	movs	r5, #39	; 0x27
 800b59a:	197c      	adds	r4, r7, r5
 800b59c:	0018      	movs	r0, r3
 800b59e:	f000 f9e3 	bl	800b968 <GetPageState>
 800b5a2:	0003      	movs	r3, r0
 800b5a4:	7023      	strb	r3, [r4, #0]

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800b5a6:	197b      	adds	r3, r7, r5
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d10c      	bne.n	800b5c8 <PagesTransfer+0x420>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800b5ae:	4b36      	ldr	r3, [pc, #216]	; (800b688 <PagesTransfer+0x4e0>)
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	33fc      	adds	r3, #252	; 0xfc
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	4b34      	ldr	r3, [pc, #208]	; (800b688 <PagesTransfer+0x4e0>)
 800b5b8:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	2b09      	cmp	r3, #9
 800b5c4:	d9a6      	bls.n	800b514 <PagesTransfer+0x36c>
 800b5c6:	e000      	b.n	800b5ca <PagesTransfer+0x422>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 800b5c8:	46c0      	nop			; (mov r8, r8)
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	1dbb      	adds	r3, r7, #6
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	0011      	movs	r1, r2
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	f000 f85c 	bl	800b690 <VerifyPagesFullWriteVariable>
 800b5d8:	1e03      	subs	r3, r0, #0
 800b5da:	d001      	beq.n	800b5e0 <PagesTransfer+0x438>
  {
    return EE_WRITE_ERROR;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e04c      	b.n	800b67a <PagesTransfer+0x4d2>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b5e0:	4b29      	ldr	r3, [pc, #164]	; (800b688 <PagesTransfer+0x4e0>)
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d903      	bls.n	800b5f0 <PagesTransfer+0x448>
 800b5e8:	4b27      	ldr	r3, [pc, #156]	; (800b688 <PagesTransfer+0x4e0>)
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	3b02      	subs	r3, #2
 800b5ee:	e000      	b.n	800b5f2 <PagesTransfer+0x44a>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	e032      	b.n	800b65c <PagesTransfer+0x4b4>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 800b5f6:	1dbb      	adds	r3, r7, #6
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	69fa      	ldr	r2, [r7, #28]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d02a      	beq.n	800b656 <PagesTransfer+0x4ae>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	b29b      	uxth	r3, r3
 800b604:	250e      	movs	r5, #14
 800b606:	197c      	adds	r4, r7, r5
 800b608:	2208      	movs	r2, #8
 800b60a:	18ba      	adds	r2, r7, r2
 800b60c:	0011      	movs	r1, r2
 800b60e:	0018      	movs	r0, r3
 800b610:	f7ff fb3e 	bl	800ac90 <ReadVariable>
 800b614:	0003      	movs	r3, r0
 800b616:	8023      	strh	r3, [r4, #0]
      if (status == EE_OK)
 800b618:	0029      	movs	r1, r5
 800b61a:	187b      	adds	r3, r7, r1
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d111      	bne.n	800b646 <PagesTransfer+0x49e>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	b29b      	uxth	r3, r3
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	000d      	movs	r5, r1
 800b62a:	187c      	adds	r4, r7, r1
 800b62c:	0011      	movs	r1, r2
 800b62e:	0018      	movs	r0, r3
 800b630:	f000 f82e 	bl	800b690 <VerifyPagesFullWriteVariable>
 800b634:	0003      	movs	r3, r0
 800b636:	8023      	strh	r3, [r4, #0]
    #endif
        if (status != EE_OK)
 800b638:	197b      	adds	r3, r7, r5
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00a      	beq.n	800b656 <PagesTransfer+0x4ae>
        {
          return status;
 800b640:	197b      	adds	r3, r7, r5
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	e019      	b.n	800b67a <PagesTransfer+0x4d2>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 800b646:	220e      	movs	r2, #14
 800b648:	18bb      	adds	r3, r7, r2
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	2b07      	cmp	r3, #7
 800b64e:	d002      	beq.n	800b656 <PagesTransfer+0x4ae>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800b650:	18bb      	adds	r3, r7, r2
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	e011      	b.n	800b67a <PagesTransfer+0x4d2>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	3301      	adds	r3, #1
 800b65a:	61fb      	str	r3, [r7, #28]
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d9c9      	bls.n	800b5f6 <PagesTransfer+0x44e>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800b662:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <PagesTransfer+0x4e4>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2102      	movs	r1, #2
 800b668:	0018      	movs	r0, r3
 800b66a:	f000 f8ab 	bl	800b7c4 <SetPageState>
 800b66e:	1e03      	subs	r3, r0, #0
 800b670:	d001      	beq.n	800b676 <PagesTransfer+0x4ce>
  {
    return EE_WRITE_ERROR;
 800b672:	2302      	movs	r3, #2
 800b674:	e001      	b.n	800b67a <PagesTransfer+0x4d2>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800b676:	2380      	movs	r3, #128	; 0x80
 800b678:	005b      	lsls	r3, r3, #1
}
 800b67a:	0018      	movs	r0, r3
 800b67c:	46bd      	mov	sp, r7
 800b67e:	b00a      	add	sp, #40	; 0x28
 800b680:	bdb0      	pop	{r4, r5, r7, pc}
 800b682:	46c0      	nop			; (mov r8, r8)
 800b684:	1fff75e0 	.word	0x1fff75e0
 800b688:	200001b4 	.word	0x200001b4
 800b68c:	200001b6 	.word	0x200001b6

0800b690 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800b690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b692:	b091      	sub	sp, #68	; 0x44
 800b694:	af00      	add	r7, sp, #0
 800b696:	0003      	movs	r3, r0
 800b698:	62b9      	str	r1, [r7, #40]	; 0x28
 800b69a:	222e      	movs	r2, #46	; 0x2e
 800b69c:	18ba      	adds	r2, r7, r2
 800b69e:	8013      	strh	r3, [r2, #0]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800b6a4:	4b43      	ldr	r3, [pc, #268]	; (800b7b4 <VerifyPagesFullWriteVariable+0x124>)
 800b6a6:	881a      	ldrh	r2, [r3, #0]
 800b6a8:	4b43      	ldr	r3, [pc, #268]	; (800b7b8 <VerifyPagesFullWriteVariable+0x128>)
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d901      	bls.n	800b6b2 <VerifyPagesFullWriteVariable+0x22>
  {
    return EE_PAGE_FULL;
 800b6ae:	2312      	movs	r3, #18
 800b6b0:	e07b      	b.n	800b7aa <VerifyPagesFullWriteVariable+0x11a>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f7ff fc36 	bl	800af24 <FindPage>
 800b6b8:	0003      	movs	r3, r0
 800b6ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t activepageaddress = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	d101      	bne.n	800b6ca <VerifyPagesFullWriteVariable+0x3a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e06f      	b.n	800b7aa <VerifyPagesFullWriteVariable+0x11a>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6cc:	2280      	movs	r2, #128	; 0x80
 800b6ce:	0252      	lsls	r2, r2, #9
 800b6d0:	4694      	mov	ip, r2
 800b6d2:	4463      	add	r3, ip
 800b6d4:	02de      	lsls	r6, r3, #11
 800b6d6:	4b39      	ldr	r3, [pc, #228]	; (800b7bc <VerifyPagesFullWriteVariable+0x12c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	029a      	lsls	r2, r3, #10
 800b6dc:	23ff      	movs	r3, #255	; 0xff
 800b6de:	029b      	lsls	r3, r3, #10
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	0019      	movs	r1, r3
 800b6e4:	23d4      	movs	r3, #212	; 0xd4
 800b6e6:	0258      	lsls	r0, r3, #9
 800b6e8:	f7f4 fd18 	bl	800011c <__udivsi3>
 800b6ec:	0003      	movs	r3, r0
 800b6ee:	0019      	movs	r1, r3
 800b6f0:	4b32      	ldr	r3, [pc, #200]	; (800b7bc <VerifyPagesFullWriteVariable+0x12c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	029a      	lsls	r2, r3, #10
 800b6f6:	23ff      	movs	r3, #255	; 0xff
 800b6f8:	029b      	lsls	r3, r3, #10
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	434b      	muls	r3, r1
 800b6fe:	18f3      	adds	r3, r6, r3
 800b700:	637b      	str	r3, [r7, #52]	; 0x34

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	2b00      	cmp	r3, #0
 800b706:	d107      	bne.n	800b718 <VerifyPagesFullWriteVariable+0x88>
 800b708:	232e      	movs	r3, #46	; 0x2e
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <VerifyPagesFullWriteVariable+0x88>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 800b712:	2300      	movs	r3, #0
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b716:	e009      	b.n	800b72c <VerifyPagesFullWriteVariable+0x9c>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800b718:	232e      	movs	r3, #46	; 0x2e
 800b71a:	18fb      	adds	r3, r7, r3
 800b71c:	881a      	ldrh	r2, [r3, #0]
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	0011      	movs	r1, r2
 800b722:	0018      	movs	r0, r3
 800b724:	f000 f98a 	bl	800ba3c <CalculateCrc>
 800b728:	0003      	movs	r3, r0
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, pData64, Write_type);
  if (ee_status != EE_OK) return ee_status;
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800b72c:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <VerifyPagesFullWriteVariable+0x130>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	18d1      	adds	r1, r2, r3
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	61bb      	str	r3, [r7, #24]
 800b738:	2300      	movs	r3, #0
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	001b      	movs	r3, r3
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
 800b742:	2300      	movs	r3, #0
 800b744:	623b      	str	r3, [r7, #32]
 800b746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b748:	041b      	lsls	r3, r3, #16
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	6a38      	ldr	r0, [r7, #32]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	0016      	movs	r6, r2
 800b758:	4330      	orrs	r0, r6
 800b75a:	0004      	movs	r4, r0
 800b75c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b75e:	4318      	orrs	r0, r3
 800b760:	0005      	movs	r5, r0
 800b762:	232e      	movs	r3, #46	; 0x2e
 800b764:	18fb      	adds	r3, r7, r3
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	60bb      	str	r3, [r7, #8]
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	0010      	movs	r0, r2
 800b776:	4320      	orrs	r0, r4
 800b778:	6038      	str	r0, [r7, #0]
 800b77a:	432b      	orrs	r3, r5
 800b77c:	607b      	str	r3, [r7, #4]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0008      	movs	r0, r1
 800b784:	f000 f97e 	bl	800ba84 <FI_WriteDoubleWord>
 800b788:	1e03      	subs	r3, r0, #0
 800b78a:	d001      	beq.n	800b790 <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 800b78c:	2302      	movs	r3, #2
 800b78e:	e00c      	b.n	800b7aa <VerifyPagesFullWriteVariable+0x11a>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b790:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <VerifyPagesFullWriteVariable+0x130>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3308      	adds	r3, #8
 800b796:	001a      	movs	r2, r3
 800b798:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <VerifyPagesFullWriteVariable+0x130>)
 800b79a:	601a      	str	r2, [r3, #0]
  uhNbWrittenElements++;
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <VerifyPagesFullWriteVariable+0x124>)
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	4b03      	ldr	r3, [pc, #12]	; (800b7b4 <VerifyPagesFullWriteVariable+0x124>)
 800b7a6:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	b011      	add	sp, #68	; 0x44
 800b7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	200001b4 	.word	0x200001b4
 800b7b8:	000004eb 	.word	0x000004eb
 800b7bc:	1fff75e0 	.word	0x1fff75e0
 800b7c0:	20000008 	.word	0x20000008

0800b7c4 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800b7c4:	b590      	push	{r4, r7, lr}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	000a      	movs	r2, r1
 800b7ce:	1cfb      	adds	r3, r7, #3
 800b7d0:	701a      	strb	r2, [r3, #0]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2280      	movs	r2, #128	; 0x80
 800b7e6:	0252      	lsls	r2, r2, #9
 800b7e8:	4694      	mov	ip, r2
 800b7ea:	4463      	add	r3, ip
 800b7ec:	02dc      	lsls	r4, r3, #11
 800b7ee:	4b5b      	ldr	r3, [pc, #364]	; (800b95c <SetPageState+0x198>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	029a      	lsls	r2, r3, #10
 800b7f4:	23ff      	movs	r3, #255	; 0xff
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	0019      	movs	r1, r3
 800b7fc:	23d4      	movs	r3, #212	; 0xd4
 800b7fe:	0258      	lsls	r0, r3, #9
 800b800:	f7f4 fc8c 	bl	800011c <__udivsi3>
 800b804:	0003      	movs	r3, r0
 800b806:	0019      	movs	r1, r3
 800b808:	4b54      	ldr	r3, [pc, #336]	; (800b95c <SetPageState+0x198>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	029a      	lsls	r2, r3, #10
 800b80e:	23ff      	movs	r3, #255	; 0xff
 800b810:	029b      	lsls	r3, r3, #10
 800b812:	4013      	ands	r3, r2
 800b814:	434b      	muls	r3, r1
 800b816:	18e3      	adds	r3, r4, r3
 800b818:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2280      	movs	r2, #128	; 0x80
 800b81e:	0252      	lsls	r2, r2, #9
 800b820:	4694      	mov	ip, r2
 800b822:	4463      	add	r3, ip
 800b824:	02dc      	lsls	r4, r3, #11
 800b826:	4b4d      	ldr	r3, [pc, #308]	; (800b95c <SetPageState+0x198>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	029a      	lsls	r2, r3, #10
 800b82c:	23ff      	movs	r3, #255	; 0xff
 800b82e:	029b      	lsls	r3, r3, #10
 800b830:	4013      	ands	r3, r2
 800b832:	0019      	movs	r1, r3
 800b834:	23d4      	movs	r3, #212	; 0xd4
 800b836:	0258      	lsls	r0, r3, #9
 800b838:	f7f4 fc70 	bl	800011c <__udivsi3>
 800b83c:	0003      	movs	r3, r0
 800b83e:	0019      	movs	r1, r3
 800b840:	4b46      	ldr	r3, [pc, #280]	; (800b95c <SetPageState+0x198>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	029a      	lsls	r2, r3, #10
 800b846:	23ff      	movs	r3, #255	; 0xff
 800b848:	029b      	lsls	r3, r3, #10
 800b84a:	4013      	ands	r3, r2
 800b84c:	434b      	muls	r3, r1
 800b84e:	18e3      	adds	r3, r4, r3
 800b850:	3308      	adds	r3, #8
 800b852:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2280      	movs	r2, #128	; 0x80
 800b858:	0252      	lsls	r2, r2, #9
 800b85a:	4694      	mov	ip, r2
 800b85c:	4463      	add	r3, ip
 800b85e:	02dc      	lsls	r4, r3, #11
 800b860:	4b3e      	ldr	r3, [pc, #248]	; (800b95c <SetPageState+0x198>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	029a      	lsls	r2, r3, #10
 800b866:	23ff      	movs	r3, #255	; 0xff
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	4013      	ands	r3, r2
 800b86c:	0019      	movs	r1, r3
 800b86e:	23d4      	movs	r3, #212	; 0xd4
 800b870:	0258      	lsls	r0, r3, #9
 800b872:	f7f4 fc53 	bl	800011c <__udivsi3>
 800b876:	0003      	movs	r3, r0
 800b878:	0019      	movs	r1, r3
 800b87a:	4b38      	ldr	r3, [pc, #224]	; (800b95c <SetPageState+0x198>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	029a      	lsls	r2, r3, #10
 800b880:	23ff      	movs	r3, #255	; 0xff
 800b882:	029b      	lsls	r3, r3, #10
 800b884:	4013      	ands	r3, r2
 800b886:	434b      	muls	r3, r1
 800b888:	18e3      	adds	r3, r4, r3
 800b88a:	3310      	adds	r3, #16
 800b88c:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2280      	movs	r2, #128	; 0x80
 800b892:	0252      	lsls	r2, r2, #9
 800b894:	4694      	mov	ip, r2
 800b896:	4463      	add	r3, ip
 800b898:	02dc      	lsls	r4, r3, #11
 800b89a:	4b30      	ldr	r3, [pc, #192]	; (800b95c <SetPageState+0x198>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	029a      	lsls	r2, r3, #10
 800b8a0:	23ff      	movs	r3, #255	; 0xff
 800b8a2:	029b      	lsls	r3, r3, #10
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	0019      	movs	r1, r3
 800b8a8:	23d4      	movs	r3, #212	; 0xd4
 800b8aa:	0258      	lsls	r0, r3, #9
 800b8ac:	f7f4 fc36 	bl	800011c <__udivsi3>
 800b8b0:	0003      	movs	r3, r0
 800b8b2:	0019      	movs	r1, r3
 800b8b4:	4b29      	ldr	r3, [pc, #164]	; (800b95c <SetPageState+0x198>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	029a      	lsls	r2, r3, #10
 800b8ba:	23ff      	movs	r3, #255	; 0xff
 800b8bc:	029b      	lsls	r3, r3, #10
 800b8be:	4013      	ands	r3, r2
 800b8c0:	434b      	muls	r3, r1
 800b8c2:	18e3      	adds	r3, r4, r3
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 800b8c8:	1cfb      	adds	r3, r7, #3
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b04      	cmp	r3, #4
 800b8ce:	d030      	beq.n	800b932 <SetPageState+0x16e>
 800b8d0:	dc39      	bgt.n	800b946 <SetPageState+0x182>
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d023      	beq.n	800b91e <SetPageState+0x15a>
 800b8d6:	dc36      	bgt.n	800b946 <SetPageState+0x182>
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <SetPageState+0x11e>
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d00f      	beq.n	800b900 <SetPageState+0x13c>
        return EE_WRITE_ERROR;
      }
    }
    break;
  default:
    break;
 800b8e0:	e031      	b.n	800b946 <SetPageState+0x182>
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 800b8e2:	4a1f      	ldr	r2, [pc, #124]	; (800b960 <SetPageState+0x19c>)
 800b8e4:	4b1e      	ldr	r3, [pc, #120]	; (800b960 <SetPageState+0x19c>)
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	0008      	movs	r0, r1
 800b8ea:	f000 f8cb 	bl	800ba84 <FI_WriteDoubleWord>
 800b8ee:	1e03      	subs	r3, r0, #0
 800b8f0:	d001      	beq.n	800b8f6 <SetPageState+0x132>
        return EE_WRITE_ERROR;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e02d      	b.n	800b952 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	4b1a      	ldr	r3, [pc, #104]	; (800b964 <SetPageState+0x1a0>)
 800b8fc:	701a      	strb	r2, [r3, #0]
    break;
 800b8fe:	e027      	b.n	800b950 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800b900:	4a17      	ldr	r2, [pc, #92]	; (800b960 <SetPageState+0x19c>)
 800b902:	4b17      	ldr	r3, [pc, #92]	; (800b960 <SetPageState+0x19c>)
 800b904:	6939      	ldr	r1, [r7, #16]
 800b906:	0008      	movs	r0, r1
 800b908:	f000 f8bc 	bl	800ba84 <FI_WriteDoubleWord>
 800b90c:	1e03      	subs	r3, r0, #0
 800b90e:	d001      	beq.n	800b914 <SetPageState+0x150>
        return EE_WRITE_ERROR;
 800b910:	2302      	movs	r3, #2
 800b912:	e01e      	b.n	800b952 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	b2da      	uxtb	r2, r3
 800b918:	4b12      	ldr	r3, [pc, #72]	; (800b964 <SetPageState+0x1a0>)
 800b91a:	701a      	strb	r2, [r3, #0]
    break;
 800b91c:	e018      	b.n	800b950 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800b91e:	4a10      	ldr	r2, [pc, #64]	; (800b960 <SetPageState+0x19c>)
 800b920:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <SetPageState+0x19c>)
 800b922:	68f9      	ldr	r1, [r7, #12]
 800b924:	0008      	movs	r0, r1
 800b926:	f000 f8ad 	bl	800ba84 <FI_WriteDoubleWord>
 800b92a:	1e03      	subs	r3, r0, #0
 800b92c:	d00d      	beq.n	800b94a <SetPageState+0x186>
        return EE_WRITE_ERROR;
 800b92e:	2302      	movs	r3, #2
 800b930:	e00f      	b.n	800b952 <SetPageState+0x18e>
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800b932:	4a0b      	ldr	r2, [pc, #44]	; (800b960 <SetPageState+0x19c>)
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <SetPageState+0x19c>)
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	0008      	movs	r0, r1
 800b93a:	f000 f8a3 	bl	800ba84 <FI_WriteDoubleWord>
 800b93e:	1e03      	subs	r3, r0, #0
 800b940:	d005      	beq.n	800b94e <SetPageState+0x18a>
        return EE_WRITE_ERROR;
 800b942:	2302      	movs	r3, #2
 800b944:	e005      	b.n	800b952 <SetPageState+0x18e>
    break;
 800b946:	46c0      	nop			; (mov r8, r8)
 800b948:	e002      	b.n	800b950 <SetPageState+0x18c>
    break;
 800b94a:	46c0      	nop			; (mov r8, r8)
 800b94c:	e000      	b.n	800b950 <SetPageState+0x18c>
    break;
 800b94e:	46c0      	nop			; (mov r8, r8)
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	0018      	movs	r0, r3
 800b954:	46bd      	mov	sp, r7
 800b956:	b007      	add	sp, #28
 800b958:	bd90      	pop	{r4, r7, pc}
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	1fff75e0 	.word	0x1fff75e0
 800b960:	aaaaaaaa 	.word	0xaaaaaaaa
 800b964:	200001b6 	.word	0x200001b6

0800b968 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800b970:	2200      	movs	r2, #0
 800b972:	2300      	movs	r3, #0
 800b974:	623a      	str	r2, [r7, #32]
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
 800b978:	2200      	movs	r2, #0
 800b97a:	2300      	movs	r3, #0
 800b97c:	61ba      	str	r2, [r7, #24]
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	2200      	movs	r2, #0
 800b982:	2300      	movs	r3, #0
 800b984:	613a      	str	r2, [r7, #16]
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	2200      	movs	r2, #0
 800b98a:	2300      	movs	r3, #0
 800b98c:	60ba      	str	r2, [r7, #8]
 800b98e:	60fb      	str	r3, [r7, #12]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	623a      	str	r2, [r7, #32]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3308      	adds	r3, #8
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	61ba      	str	r2, [r7, #24]
 800b9a4:	61fb      	str	r3, [r7, #28]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3310      	adds	r3, #16
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	613a      	str	r2, [r7, #16]
 800b9b0:	617b      	str	r3, [r7, #20]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	60ba      	str	r2, [r7, #8]
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	d102      	bne.n	800b9ca <GetPageState+0x62>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	d001      	beq.n	800b9ce <GetPageState+0x66>
  {
    return STATE_PAGE_ERASING;
 800b9ca:	2304      	movs	r3, #4
 800b9cc:	e018      	b.n	800ba00 <GetPageState+0x98>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	d102      	bne.n	800b9da <GetPageState+0x72>
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	d001      	beq.n	800b9de <GetPageState+0x76>
  {
    return STATE_PAGE_VALID;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e010      	b.n	800ba00 <GetPageState+0x98>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	d102      	bne.n	800b9ea <GetPageState+0x82>
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	d001      	beq.n	800b9ee <GetPageState+0x86>
  {
    return STATE_PAGE_ACTIVE;
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e008      	b.n	800ba00 <GetPageState+0x98>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	d102      	bne.n	800b9fa <GetPageState+0x92>
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	d001      	beq.n	800b9fe <GetPageState+0x96>
  {
    return STATE_PAGE_RECEIVE;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <GetPageState+0x98>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	0018      	movs	r0, r3
 800ba02:	46bd      	mov	sp, r7
 800ba04:	b00a      	add	sp, #40	; 0x28
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800ba0c:	2380      	movs	r3, #128	; 0x80
 800ba0e:	015b      	lsls	r3, r3, #5
 800ba10:	0018      	movs	r0, r3
 800ba12:	f7fe f9db 	bl	8009dcc <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 800ba16:	4a07      	ldr	r2, [pc, #28]	; (800ba34 <ConfigureCrc+0x2c>)
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <ConfigureCrc+0x30>)
 800ba1a:	0011      	movs	r1, r2
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	f7fe f9a1 	bl	8009d64 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <ConfigureCrc+0x30>)
 800ba24:	2108      	movs	r1, #8
 800ba26:	0018      	movs	r0, r3
 800ba28:	f7fe f98a 	bl	8009d40 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800ba2c:	46c0      	nop			; (mov r8, r8)
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	46c0      	nop			; (mov r8, r8)
 800ba34:	00008005 	.word	0x00008005
 800ba38:	40023000 	.word	0x40023000

0800ba3c <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	000a      	movs	r2, r1
 800ba46:	1cbb      	adds	r3, r7, #2
 800ba48:	801a      	strh	r2, [r3, #0]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <CalculateCrc+0x44>)
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f7fe f969 	bl	8009d24 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a0a      	ldr	r2, [pc, #40]	; (800ba80 <CalculateCrc+0x44>)
 800ba56:	0019      	movs	r1, r3
 800ba58:	0010      	movs	r0, r2
 800ba5a:	f7fe f98f 	bl	8009d7c <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800ba5e:	1cbb      	adds	r3, r7, #2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	4a07      	ldr	r2, [pc, #28]	; (800ba80 <CalculateCrc+0x44>)
 800ba64:	0019      	movs	r1, r3
 800ba66:	0010      	movs	r0, r2
 800ba68:	f7fe f994 	bl	8009d94 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <CalculateCrc+0x44>)
 800ba6e:	0018      	movs	r0, r3
 800ba70:	f7fe f9a1 	bl	8009db6 <LL_CRC_ReadData16>
 800ba74:	0003      	movs	r3, r0
}
 800ba76:	0018      	movs	r0, r3
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	b002      	add	sp, #8
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	40023000 	.word	0x40023000

0800ba84 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	603a      	str	r2, [r7, #0]
 800ba8e:	607b      	str	r3, [r7, #4]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	2001      	movs	r0, #1
 800ba98:	f7f8 ff5c 	bl	8004954 <HAL_FLASH_Program>
 800ba9c:	0003      	movs	r3, r0
}
 800ba9e:	0018      	movs	r0, r3
 800baa0:	46bd      	mov	sp, r7
 800baa2:	b004      	add	sp, #16
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800baa6:	b590      	push	{r4, r7, lr}
 800baa8:	b089      	sub	sp, #36	; 0x24
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	000a      	movs	r2, r1
 800bab0:	1cbb      	adds	r3, r7, #2
 800bab2:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800bab4:	241e      	movs	r4, #30
 800bab6:	193b      	adds	r3, r7, r4
 800bab8:	2200      	movs	r2, #0
 800baba:	801a      	strh	r2, [r3, #0]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	60bb      	str	r3, [r7, #8]
#ifdef FLASH_BANK_2
  uint32_t bank = GetBankNumber(PAGE_ADDRESS(Page));
  s_eraseinit.Banks       = bank;
#endif  
  
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800bac0:	210c      	movs	r1, #12
 800bac2:	187b      	adds	r3, r7, r1
 800bac4:	2202      	movs	r2, #2
 800bac6:	601a      	str	r2, [r3, #0]
  s_eraseinit.NbPages     = NbPages;
 800bac8:	1cbb      	adds	r3, r7, #2
 800baca:	881a      	ldrh	r2, [r3, #0]
 800bacc:	187b      	adds	r3, r7, r1
 800bace:	60da      	str	r2, [r3, #12]
  s_eraseinit.Page        = Page;
 800bad0:	187b      	adds	r3, r7, r1
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	609a      	str	r2, [r3, #8]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800bad6:	2308      	movs	r3, #8
 800bad8:	18fa      	adds	r2, r7, r3
 800bada:	187b      	adds	r3, r7, r1
 800badc:	0011      	movs	r1, r2
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f9 f834 	bl	8004b4c <HAL_FLASHEx_Erase>
 800bae4:	1e03      	subs	r3, r0, #0
 800bae6:	d002      	beq.n	800baee <FI_PageErase+0x48>
  {
    status = EE_ERASE_ERROR;
 800bae8:	193b      	adds	r3, r7, r4
 800baea:	2201      	movs	r2, #1
 800baec:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800baee:	231e      	movs	r3, #30
 800baf0:	18fb      	adds	r3, r7, r3
 800baf2:	881b      	ldrh	r3, [r3, #0]
}
 800baf4:	0018      	movs	r0, r3
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b009      	add	sp, #36	; 0x24
 800bafa:	bd90      	pop	{r4, r7, pc}

0800bafc <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
  /* No flush needed. There is no D-Cache for the STM32G0x0 and STM32G0x1 products. */
  return;
 800bb00:	46c0      	nop			; (mov r8, r8)
}
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800bb0a:	2300      	movs	r3, #0
#endif
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
	...

0800bb14 <HAL_GPIO_EXTI_Falling_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	0002      	movs	r2, r0
 800bb1c:	1dbb      	adds	r3, r7, #6
 800bb1e:	801a      	strh	r2, [r3, #0]

	flagClockConfig = 1;
 800bb20:	4b7e      	ldr	r3, [pc, #504]	; (800bd1c <HAL_GPIO_EXTI_Falling_Callback+0x208>)
 800bb22:	2201      	movs	r2, #1
 800bb24:	701a      	strb	r2, [r3, #0]

	//reset settings counter
	if (flagSettings == FLAG_SETTINGS_ON) {
 800bb26:	4b7e      	ldr	r3, [pc, #504]	; (800bd20 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d102      	bne.n	800bb36 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counterSettings = SETTINGS_TIME;
 800bb30:	4b7c      	ldr	r3, [pc, #496]	; (800bd24 <HAL_GPIO_EXTI_Falling_Callback+0x210>)
 800bb32:	2205      	movs	r2, #5
 800bb34:	701a      	strb	r2, [r3, #0]
	}

	//set full update flag, when both reset and set pin was pressed

	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 800bb36:	23a0      	movs	r3, #160	; 0xa0
 800bb38:	05db      	lsls	r3, r3, #23
 800bb3a:	2110      	movs	r1, #16
 800bb3c:	0018      	movs	r0, r3
 800bb3e:	f7f9 fa0d 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bb42:	1e03      	subs	r3, r0, #0
 800bb44:	d11b      	bne.n	800bb7e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 800bb46:	23a0      	movs	r3, #160	; 0xa0
 800bb48:	05db      	lsls	r3, r3, #23
 800bb4a:	2108      	movs	r1, #8
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f7f9 fa05 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bb52:	1e03      	subs	r3, r0, #0
 800bb54:	d113      	bne.n	800bb7e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1
 800bb56:	23a0      	movs	r3, #160	; 0xa0
 800bb58:	05db      	lsls	r3, r3, #23
 800bb5a:	2104      	movs	r1, #4
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	f7f9 f9fd 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bb62:	0003      	movs	r3, r0
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d10a      	bne.n	800bb7e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& flagLocked == UNLOCKED) {
 800bb68:	4b6f      	ldr	r3, [pc, #444]	; (800bd28 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d105      	bne.n	800bb7e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		flagInterfaceFullUpdate = 1;
 800bb72:	4b6e      	ldr	r3, [pc, #440]	; (800bd2c <HAL_GPIO_EXTI_Falling_Callback+0x218>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
		flashWriteFlag = 1;
 800bb78:	4b6d      	ldr	r3, [pc, #436]	; (800bd30 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	701a      	strb	r2, [r3, #0]
	}

	//lock watch when underwater
	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 800bb7e:	23a0      	movs	r3, #160	; 0xa0
 800bb80:	05db      	lsls	r3, r3, #23
 800bb82:	2110      	movs	r1, #16
 800bb84:	0018      	movs	r0, r3
 800bb86:	f7f9 f9e9 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bb8a:	1e03      	subs	r3, r0, #0
 800bb8c:	d152      	bne.n	800bc34 <HAL_GPIO_EXTI_Falling_Callback+0x120>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 800bb8e:	23a0      	movs	r3, #160	; 0xa0
 800bb90:	05db      	lsls	r3, r3, #23
 800bb92:	2108      	movs	r1, #8
 800bb94:	0018      	movs	r0, r3
 800bb96:	f7f9 f9e1 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bb9a:	1e03      	subs	r3, r0, #0
 800bb9c:	d14a      	bne.n	800bc34 <HAL_GPIO_EXTI_Falling_Callback+0x120>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 0) {
 800bb9e:	23a0      	movs	r3, #160	; 0xa0
 800bba0:	05db      	lsls	r3, r3, #23
 800bba2:	2104      	movs	r1, #4
 800bba4:	0018      	movs	r0, r3
 800bba6:	f7f9 f9d9 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bbaa:	1e03      	subs	r3, r0, #0
 800bbac:	d142      	bne.n	800bc34 <HAL_GPIO_EXTI_Falling_Callback+0x120>
		flagLocked = LOCKED;
 800bbae:	4b5e      	ldr	r3, [pc, #376]	; (800bd28 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	701a      	strb	r2, [r3, #0]
		flagSettings = FLAG_SETTINGS_OFF;
 800bbb4:	4b5a      	ldr	r3, [pc, #360]	; (800bd20 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	701a      	strb	r2, [r3, #0]

		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800bbba:	4b5e      	ldr	r3, [pc, #376]	; (800bd34 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d006      	beq.n	800bbd2 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
 800bbc4:	4b5b      	ldr	r3, [pc, #364]	; (800bd34 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d001      	beq.n	800bbd2 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
 800bbce:	f000 fce9 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800bbd2:	4b59      	ldr	r3, [pc, #356]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b25b      	sxtb	r3, r3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <HAL_GPIO_EXTI_Falling_Callback+0xcc>
 800bbdc:	f000 fce2 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
				&& chrono.month == 0 && chrono.day == 0 && chrono.hour == 0
 800bbe0:	4b55      	ldr	r3, [pc, #340]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bbe2:	785b      	ldrb	r3, [r3, #1]
 800bbe4:	b25b      	sxtb	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <HAL_GPIO_EXTI_Falling_Callback+0xda>
 800bbea:	f000 fcdb 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800bbee:	4b52      	ldr	r3, [pc, #328]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bbf0:	789b      	ldrb	r3, [r3, #2]
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <HAL_GPIO_EXTI_Falling_Callback+0xe8>
 800bbf8:	f000 fcd4 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800bbfc:	4b4e      	ldr	r3, [pc, #312]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bbfe:	78db      	ldrb	r3, [r3, #3]
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <HAL_GPIO_EXTI_Falling_Callback+0xf6>
 800bc06:	f000 fccd 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
				&& chrono.minute == 0 && chrono.second < 5) {
 800bc0a:	4b4b      	ldr	r3, [pc, #300]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bc0c:	791b      	ldrb	r3, [r3, #4]
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <HAL_GPIO_EXTI_Falling_Callback+0x104>
 800bc14:	f000 fcc6 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800bc18:	4b47      	ldr	r3, [pc, #284]	; (800bd38 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800bc1a:	795b      	ldrb	r3, [r3, #5]
 800bc1c:	b25b      	sxtb	r3, r3
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	dd01      	ble.n	800bc26 <HAL_GPIO_EXTI_Falling_Callback+0x112>
 800bc22:	f000 fcbf 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
			mode = MODE_NORMAL;
 800bc26:	4b43      	ldr	r3, [pc, #268]	; (800bd34 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]
			rtcResetChrono();
 800bc2c:	f005 f8a2 	bl	8010d74 <rtcResetChrono>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800bc30:	f000 fcb8 	bl	800c5a4 <HAL_GPIO_EXTI_Falling_Callback+0xa90>

		}

	} else {

		flagDontSleep = 1;
 800bc34:	4b41      	ldr	r3, [pc, #260]	; (800bd3c <HAL_GPIO_EXTI_Falling_Callback+0x228>)
 800bc36:	2201      	movs	r2, #1
 800bc38:	701a      	strb	r2, [r3, #0]

		//										START BUTTON
		if (GPIO_Pin == START_Pin
 800bc3a:	1dbb      	adds	r3, r7, #6
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d001      	beq.n	800bc46 <HAL_GPIO_EXTI_Falling_Callback+0x132>
 800bc42:	f000 fbbd 	bl	800c3c0 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 800bc46:	23a0      	movs	r3, #160	; 0xa0
 800bc48:	05db      	lsls	r3, r3, #23
 800bc4a:	2104      	movs	r1, #4
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	f7f9 f985 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bc52:	1e03      	subs	r3, r0, #0
 800bc54:	d001      	beq.n	800bc5a <HAL_GPIO_EXTI_Falling_Callback+0x146>
 800bc56:	f000 fbb3 	bl	800c3c0 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800bc5a:	23a0      	movs	r3, #160	; 0xa0
 800bc5c:	05db      	lsls	r3, r3, #23
 800bc5e:	2110      	movs	r1, #16
 800bc60:	0018      	movs	r0, r3
 800bc62:	f7f9 f97b 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bc66:	0003      	movs	r3, r0
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d001      	beq.n	800bc70 <HAL_GPIO_EXTI_Falling_Callback+0x15c>
 800bc6c:	f000 fba8 	bl	800c3c0 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800bc70:	4b2d      	ldr	r3, [pc, #180]	; (800bd28 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <HAL_GPIO_EXTI_Falling_Callback+0x16a>
 800bc7a:	f000 fc95 	bl	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

				if (flagSettings == FLAG_SETTINGS_OFF) {
 800bc7e:	4b28      	ldr	r3, [pc, #160]	; (800bd20 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d000      	beq.n	800bc8a <HAL_GPIO_EXTI_Falling_Callback+0x176>
 800bc88:	e19e      	b.n	800bfc8 <HAL_GPIO_EXTI_Falling_Callback+0x4b4>

					if (mode == MODE_NORMAL) { // start chrono if mode is set as normal
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	; (800bd34 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d161      	bne.n	800bd58 <HAL_GPIO_EXTI_Falling_Callback+0x244>

						HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bc94:	492a      	ldr	r1, [pc, #168]	; (800bd40 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bc96:	4b2b      	ldr	r3, [pc, #172]	; (800bd44 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f7fa ffd4 	bl	8006c48 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bca0:	4929      	ldr	r1, [pc, #164]	; (800bd48 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bca2:	4b28      	ldr	r3, [pc, #160]	; (800bd44 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	0018      	movs	r0, r3
 800bca8:	f7fb f8bc 	bl	8006e24 <HAL_RTC_GetDate>

						chronoStart.second = Time.Seconds;
 800bcac:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bcae:	789b      	ldrb	r3, [r3, #2]
 800bcb0:	b25a      	sxtb	r2, r3
 800bcb2:	4b26      	ldr	r3, [pc, #152]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bcb4:	715a      	strb	r2, [r3, #5]
						chronoStart.minute = Time.Minutes;
 800bcb6:	4b22      	ldr	r3, [pc, #136]	; (800bd40 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	b25a      	sxtb	r2, r3
 800bcbc:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bcbe:	711a      	strb	r2, [r3, #4]
						chronoStart.decimal = (((255 - Time.SubSeconds) * 100)
 800bcc0:	4b1f      	ldr	r3, [pc, #124]	; (800bd40 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	0013      	movs	r3, r2
 800bcc6:	065b      	lsls	r3, r3, #25
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	189b      	adds	r3, r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4a1e      	ldr	r2, [pc, #120]	; (800bd50 <HAL_GPIO_EXTI_Falling_Callback+0x23c>)
 800bcd6:	4694      	mov	ip, r2
 800bcd8:	4463      	add	r3, ip
								/ 255) / 10;
 800bcda:	491e      	ldr	r1, [pc, #120]	; (800bd54 <HAL_GPIO_EXTI_Falling_Callback+0x240>)
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7f4 fa1d 	bl	800011c <__udivsi3>
 800bce2:	0003      	movs	r3, r0
						chronoStart.decimal = (((255 - Time.SubSeconds) * 100)
 800bce4:	b25a      	sxtb	r2, r3
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bce8:	719a      	strb	r2, [r3, #6]
						chronoStart.hour = Time.Hours;
 800bcea:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b25a      	sxtb	r2, r3
 800bcf0:	4b16      	ldr	r3, [pc, #88]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bcf2:	70da      	strb	r2, [r3, #3]
						chronoStart.day = Date.Date;
 800bcf4:	4b14      	ldr	r3, [pc, #80]	; (800bd48 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bcf6:	789b      	ldrb	r3, [r3, #2]
 800bcf8:	b25a      	sxtb	r2, r3
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bcfc:	709a      	strb	r2, [r3, #2]
						chronoStart.month = Date.Month;
 800bcfe:	4b12      	ldr	r3, [pc, #72]	; (800bd48 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bd00:	785b      	ldrb	r3, [r3, #1]
 800bd02:	b25a      	sxtb	r2, r3
 800bd04:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bd06:	705a      	strb	r2, [r3, #1]
						chronoStart.year = Date.Year;
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bd0a:	78db      	ldrb	r3, [r3, #3]
 800bd0c:	b25a      	sxtb	r2, r3
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bd10:	701a      	strb	r2, [r3, #0]

						mode = MODE_CHRONO;
 800bd12:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800bd18:	f000 fc46 	bl	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>
 800bd1c:	20000618 	.word	0x20000618
 800bd20:	2000058e 	.word	0x2000058e
 800bd24:	20000694 	.word	0x20000694
 800bd28:	200004c2 	.word	0x200004c2
 800bd2c:	2000069e 	.word	0x2000069e
 800bd30:	20000643 	.word	0x20000643
 800bd34:	200004c3 	.word	0x200004c3
 800bd38:	20000444 	.word	0x20000444
 800bd3c:	200006d9 	.word	0x200006d9
 800bd40:	200006c4 	.word	0x200006c4
 800bd44:	20000770 	.word	0x20000770
 800bd48:	2000044c 	.word	0x2000044c
 800bd4c:	200004b8 	.word	0x200004b8
 800bd50:	0000639c 	.word	0x0000639c
 800bd54:	000009f6 	.word	0x000009f6
					}

					else if (mode == MODE_CHRONO) { //stop chrono if chrono is working
 800bd58:	4bdf      	ldr	r3, [pc, #892]	; (800c0d8 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d000      	beq.n	800bd64 <HAL_GPIO_EXTI_Falling_Callback+0x250>
 800bd62:	e127      	b.n	800bfb4 <HAL_GPIO_EXTI_Falling_Callback+0x4a0>

						HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bd64:	49dd      	ldr	r1, [pc, #884]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bd66:	4bde      	ldr	r3, [pc, #888]	; (800c0e0 <HAL_GPIO_EXTI_Falling_Callback+0x5cc>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f7fa ff6c 	bl	8006c48 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bd70:	49dc      	ldr	r1, [pc, #880]	; (800c0e4 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bd72:	4bdb      	ldr	r3, [pc, #876]	; (800c0e0 <HAL_GPIO_EXTI_Falling_Callback+0x5cc>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	0018      	movs	r0, r3
 800bd78:	f7fb f854 	bl	8006e24 <HAL_RTC_GetDate>

						actual.minute = Time.Minutes;
 800bd7c:	4bd7      	ldr	r3, [pc, #860]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	b25a      	sxtb	r2, r3
 800bd82:	4bd9      	ldr	r3, [pc, #868]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bd84:	711a      	strb	r2, [r3, #4]
						actual.second = Time.Seconds;
 800bd86:	4bd5      	ldr	r3, [pc, #852]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bd88:	789b      	ldrb	r3, [r3, #2]
 800bd8a:	b25a      	sxtb	r2, r3
 800bd8c:	4bd6      	ldr	r3, [pc, #856]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bd8e:	715a      	strb	r2, [r3, #5]
						actual.decimal = (((255 - Time.SubSeconds) * 100) / 255)
 800bd90:	4bd2      	ldr	r3, [pc, #840]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	0013      	movs	r3, r2
 800bd96:	065b      	lsls	r3, r3, #25
 800bd98:	1a9b      	subs	r3, r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	189b      	adds	r3, r3, r2
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4ad1      	ldr	r2, [pc, #836]	; (800c0ec <HAL_GPIO_EXTI_Falling_Callback+0x5d8>)
 800bda6:	4694      	mov	ip, r2
 800bda8:	4463      	add	r3, ip
								/ 10;
 800bdaa:	49d1      	ldr	r1, [pc, #836]	; (800c0f0 <HAL_GPIO_EXTI_Falling_Callback+0x5dc>)
 800bdac:	0018      	movs	r0, r3
 800bdae:	f7f4 f9b5 	bl	800011c <__udivsi3>
 800bdb2:	0003      	movs	r3, r0
						actual.decimal = (((255 - Time.SubSeconds) * 100) / 255)
 800bdb4:	b25a      	sxtb	r2, r3
 800bdb6:	4bcc      	ldr	r3, [pc, #816]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bdb8:	719a      	strb	r2, [r3, #6]
						actual.hour = Time.Hours;
 800bdba:	4bc8      	ldr	r3, [pc, #800]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b25a      	sxtb	r2, r3
 800bdc0:	4bc9      	ldr	r3, [pc, #804]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bdc2:	70da      	strb	r2, [r3, #3]
						actual.day = Date.Date;
 800bdc4:	4bc7      	ldr	r3, [pc, #796]	; (800c0e4 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bdc6:	789b      	ldrb	r3, [r3, #2]
 800bdc8:	b25a      	sxtb	r2, r3
 800bdca:	4bc7      	ldr	r3, [pc, #796]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bdcc:	709a      	strb	r2, [r3, #2]
						actual.month = Date.Month;
 800bdce:	4bc5      	ldr	r3, [pc, #788]	; (800c0e4 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	b25a      	sxtb	r2, r3
 800bdd4:	4bc4      	ldr	r3, [pc, #784]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bdd6:	705a      	strb	r2, [r3, #1]
						actual.year = Date.Year;
 800bdd8:	4bc2      	ldr	r3, [pc, #776]	; (800c0e4 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bdda:	78db      	ldrb	r3, [r3, #3]
 800bddc:	b25a      	sxtb	r2, r3
 800bdde:	4bc2      	ldr	r3, [pc, #776]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bde0:	701a      	strb	r2, [r3, #0]

						chrono.decimal = actual.decimal - chronoStart.decimal;
 800bde2:	4bc1      	ldr	r3, [pc, #772]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bde4:	799b      	ldrb	r3, [r3, #6]
 800bde6:	b25b      	sxtb	r3, r3
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	4bc2      	ldr	r3, [pc, #776]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bdec:	799b      	ldrb	r3, [r3, #6]
 800bdee:	b25b      	sxtb	r3, r3
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	b25a      	sxtb	r2, r3
 800bdf8:	4bbf      	ldr	r3, [pc, #764]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdfa:	719a      	strb	r2, [r3, #6]
						chrono.second = actual.second - chronoStart.second;
 800bdfc:	4bba      	ldr	r3, [pc, #744]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bdfe:	795b      	ldrb	r3, [r3, #5]
 800be00:	b25b      	sxtb	r3, r3
 800be02:	b2da      	uxtb	r2, r3
 800be04:	4bbb      	ldr	r3, [pc, #748]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be06:	795b      	ldrb	r3, [r3, #5]
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	b25a      	sxtb	r2, r3
 800be12:	4bb9      	ldr	r3, [pc, #740]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be14:	715a      	strb	r2, [r3, #5]
						chrono.minute = actual.minute - chronoStart.minute;
 800be16:	4bb4      	ldr	r3, [pc, #720]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800be18:	791b      	ldrb	r3, [r3, #4]
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	4bb5      	ldr	r3, [pc, #724]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be20:	791b      	ldrb	r3, [r3, #4]
 800be22:	b25b      	sxtb	r3, r3
 800be24:	b2db      	uxtb	r3, r3
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	b25a      	sxtb	r2, r3
 800be2c:	4bb2      	ldr	r3, [pc, #712]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be2e:	711a      	strb	r2, [r3, #4]
						chrono.hour = actual.hour - chronoStart.hour;
 800be30:	4bad      	ldr	r3, [pc, #692]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800be32:	78db      	ldrb	r3, [r3, #3]
 800be34:	b25b      	sxtb	r3, r3
 800be36:	b2da      	uxtb	r2, r3
 800be38:	4bae      	ldr	r3, [pc, #696]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be3a:	78db      	ldrb	r3, [r3, #3]
 800be3c:	b25b      	sxtb	r3, r3
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	b2db      	uxtb	r3, r3
 800be44:	b25a      	sxtb	r2, r3
 800be46:	4bac      	ldr	r3, [pc, #688]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be48:	70da      	strb	r2, [r3, #3]
						chrono.day = actual.day - chronoStart.day;
 800be4a:	4ba7      	ldr	r3, [pc, #668]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800be4c:	789b      	ldrb	r3, [r3, #2]
 800be4e:	b25b      	sxtb	r3, r3
 800be50:	b2da      	uxtb	r2, r3
 800be52:	4ba8      	ldr	r3, [pc, #672]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be54:	789b      	ldrb	r3, [r3, #2]
 800be56:	b25b      	sxtb	r3, r3
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	b25a      	sxtb	r2, r3
 800be60:	4ba5      	ldr	r3, [pc, #660]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be62:	709a      	strb	r2, [r3, #2]
						chrono.month = actual.month - chronoStart.month;
 800be64:	4ba0      	ldr	r3, [pc, #640]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	4ba1      	ldr	r3, [pc, #644]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	b25b      	sxtb	r3, r3
 800be72:	b2db      	uxtb	r3, r3
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	b2db      	uxtb	r3, r3
 800be78:	b25a      	sxtb	r2, r3
 800be7a:	4b9f      	ldr	r3, [pc, #636]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be7c:	705a      	strb	r2, [r3, #1]
						chrono.year = actual.year - chronoStart.year;
 800be7e:	4b9a      	ldr	r3, [pc, #616]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	b25b      	sxtb	r3, r3
 800be84:	b2da      	uxtb	r2, r3
 800be86:	4b9b      	ldr	r3, [pc, #620]	; (800c0f4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b25b      	sxtb	r3, r3
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	b2db      	uxtb	r3, r3
 800be92:	b25a      	sxtb	r2, r3
 800be94:	4b98      	ldr	r3, [pc, #608]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be96:	701a      	strb	r2, [r3, #0]

						if (chrono.decimal < 0) {
 800be98:	4b97      	ldr	r3, [pc, #604]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be9a:	799b      	ldrb	r3, [r3, #6]
 800be9c:	b25b      	sxtb	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	da11      	bge.n	800bec6 <HAL_GPIO_EXTI_Falling_Callback+0x3b2>
							chrono.second--;
 800bea2:	4b95      	ldr	r3, [pc, #596]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bea4:	795b      	ldrb	r3, [r3, #5]
 800bea6:	b25b      	sxtb	r3, r3
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	3b01      	subs	r3, #1
 800beac:	b2db      	uxtb	r3, r3
 800beae:	b25a      	sxtb	r2, r3
 800beb0:	4b91      	ldr	r3, [pc, #580]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800beb2:	715a      	strb	r2, [r3, #5]
							chrono.decimal = chrono.decimal + 10;
 800beb4:	4b90      	ldr	r3, [pc, #576]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800beb6:	799b      	ldrb	r3, [r3, #6]
 800beb8:	b25b      	sxtb	r3, r3
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	330a      	adds	r3, #10
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	b25a      	sxtb	r2, r3
 800bec2:	4b8d      	ldr	r3, [pc, #564]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bec4:	719a      	strb	r2, [r3, #6]
						}

						if (chrono.second < 0) {
 800bec6:	4b8c      	ldr	r3, [pc, #560]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bec8:	795b      	ldrb	r3, [r3, #5]
 800beca:	b25b      	sxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	da11      	bge.n	800bef4 <HAL_GPIO_EXTI_Falling_Callback+0x3e0>
							chrono.minute--;
 800bed0:	4b89      	ldr	r3, [pc, #548]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bed2:	791b      	ldrb	r3, [r3, #4]
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	3b01      	subs	r3, #1
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	b25a      	sxtb	r2, r3
 800bede:	4b86      	ldr	r3, [pc, #536]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bee0:	711a      	strb	r2, [r3, #4]
							chrono.second = chrono.second + 60;
 800bee2:	4b85      	ldr	r3, [pc, #532]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bee4:	795b      	ldrb	r3, [r3, #5]
 800bee6:	b25b      	sxtb	r3, r3
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	333c      	adds	r3, #60	; 0x3c
 800beec:	b2db      	uxtb	r3, r3
 800beee:	b25a      	sxtb	r2, r3
 800bef0:	4b81      	ldr	r3, [pc, #516]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bef2:	715a      	strb	r2, [r3, #5]
						}

						if (chrono.minute < 0) {
 800bef4:	4b80      	ldr	r3, [pc, #512]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bef6:	791b      	ldrb	r3, [r3, #4]
 800bef8:	b25b      	sxtb	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	da11      	bge.n	800bf22 <HAL_GPIO_EXTI_Falling_Callback+0x40e>
							chrono.hour--;
 800befe:	4b7e      	ldr	r3, [pc, #504]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf00:	78db      	ldrb	r3, [r3, #3]
 800bf02:	b25b      	sxtb	r3, r3
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	b25a      	sxtb	r2, r3
 800bf0c:	4b7a      	ldr	r3, [pc, #488]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf0e:	70da      	strb	r2, [r3, #3]
							chrono.minute = chrono.minute + 60;
 800bf10:	4b79      	ldr	r3, [pc, #484]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf12:	791b      	ldrb	r3, [r3, #4]
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	333c      	adds	r3, #60	; 0x3c
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	b25a      	sxtb	r2, r3
 800bf1e:	4b76      	ldr	r3, [pc, #472]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf20:	711a      	strb	r2, [r3, #4]
						}

						if (chrono.hour < 0) {
 800bf22:	4b75      	ldr	r3, [pc, #468]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf24:	78db      	ldrb	r3, [r3, #3]
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	da11      	bge.n	800bf50 <HAL_GPIO_EXTI_Falling_Callback+0x43c>
							chrono.day--;
 800bf2c:	4b72      	ldr	r3, [pc, #456]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf2e:	789b      	ldrb	r3, [r3, #2]
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	3b01      	subs	r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	b25a      	sxtb	r2, r3
 800bf3a:	4b6f      	ldr	r3, [pc, #444]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf3c:	709a      	strb	r2, [r3, #2]
							chrono.hour = chrono.hour + 24;
 800bf3e:	4b6e      	ldr	r3, [pc, #440]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf40:	78db      	ldrb	r3, [r3, #3]
 800bf42:	b25b      	sxtb	r3, r3
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	3318      	adds	r3, #24
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	b25a      	sxtb	r2, r3
 800bf4c:	4b6a      	ldr	r3, [pc, #424]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf4e:	70da      	strb	r2, [r3, #3]
						}

						if (chrono.day < 0) {
 800bf50:	4b69      	ldr	r3, [pc, #420]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf52:	789b      	ldrb	r3, [r3, #2]
 800bf54:	b25b      	sxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da11      	bge.n	800bf7e <HAL_GPIO_EXTI_Falling_Callback+0x46a>
							chrono.month--;
 800bf5a:	4b67      	ldr	r3, [pc, #412]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf5c:	785b      	ldrb	r3, [r3, #1]
 800bf5e:	b25b      	sxtb	r3, r3
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	3b01      	subs	r3, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	b25a      	sxtb	r2, r3
 800bf68:	4b63      	ldr	r3, [pc, #396]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf6a:	705a      	strb	r2, [r3, #1]
							chrono.day = chrono.day + 30;
 800bf6c:	4b62      	ldr	r3, [pc, #392]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf6e:	789b      	ldrb	r3, [r3, #2]
 800bf70:	b25b      	sxtb	r3, r3
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	331e      	adds	r3, #30
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	b25a      	sxtb	r2, r3
 800bf7a:	4b5f      	ldr	r3, [pc, #380]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf7c:	709a      	strb	r2, [r3, #2]
						}

						if (chrono.month < 0) {
 800bf7e:	4b5e      	ldr	r3, [pc, #376]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	b25b      	sxtb	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	da11      	bge.n	800bfac <HAL_GPIO_EXTI_Falling_Callback+0x498>
							chrono.year--;
 800bf88:	4b5b      	ldr	r3, [pc, #364]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	b25b      	sxtb	r3, r3
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	3b01      	subs	r3, #1
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	b25a      	sxtb	r2, r3
 800bf96:	4b58      	ldr	r3, [pc, #352]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf98:	701a      	strb	r2, [r3, #0]
							chrono.month = chrono.month + 12;
 800bf9a:	4b57      	ldr	r3, [pc, #348]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bf9c:	785b      	ldrb	r3, [r3, #1]
 800bf9e:	b25b      	sxtb	r3, r3
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	330c      	adds	r3, #12
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	b25a      	sxtb	r2, r3
 800bfa8:	4b53      	ldr	r3, [pc, #332]	; (800c0f8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bfaa:	705a      	strb	r2, [r3, #1]
						}

						mode = MODE_STOP;
 800bfac:	4b4a      	ldr	r3, [pc, #296]	; (800c0d8 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800bfae:	2202      	movs	r2, #2
 800bfb0:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800bfb2:	e2f9      	b.n	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

					}

					else if (mode == MODE_STOP) { //start chrono if was stopped
 800bfb4:	4b48      	ldr	r3, [pc, #288]	; (800c0d8 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d000      	beq.n	800bfc0 <HAL_GPIO_EXTI_Falling_Callback+0x4ac>
 800bfbe:	e2f3      	b.n	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

						mode = MODE_CHRONO;
 800bfc0:	4b45      	ldr	r3, [pc, #276]	; (800c0d8 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800bfc6:	e2ef      	b.n	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

					}

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800bfc8:	4b4c      	ldr	r3, [pc, #304]	; (800c0fc <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d000      	beq.n	800bfd4 <HAL_GPIO_EXTI_Falling_Callback+0x4c0>
 800bfd2:	e2e9      	b.n	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>
					// if start was pressed in settings, add value
					switch (settingsPointer) {
 800bfd4:	4b4a      	ldr	r3, [pc, #296]	; (800c100 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b0a      	cmp	r3, #10
 800bfdc:	d900      	bls.n	800bfe0 <HAL_GPIO_EXTI_Falling_Callback+0x4cc>
 800bfde:	e1ec      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
 800bfe0:	009a      	lsls	r2, r3, #2
 800bfe2:	4b48      	ldr	r3, [pc, #288]	; (800c104 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800bfe4:	18d3      	adds	r3, r2, r3
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	469f      	mov	pc, r3
					case SETTINGS_HOURS:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800bfea:	23a0      	movs	r3, #160	; 0xa0
 800bfec:	05db      	lsls	r3, r3, #23
 800bfee:	2108      	movs	r1, #8
 800bff0:	0018      	movs	r0, r3
 800bff2:	f7f8 ffb3 	bl	8004f5c <HAL_GPIO_ReadPin>
 800bff6:	0003      	movs	r3, r0
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d112      	bne.n	800c022 <HAL_GPIO_EXTI_Falling_Callback+0x50e>
							actual.hour++;
 800bffc:	4b3a      	ldr	r3, [pc, #232]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bffe:	78db      	ldrb	r3, [r3, #3]
 800c000:	b25b      	sxtb	r3, r3
 800c002:	b2db      	uxtb	r3, r3
 800c004:	3301      	adds	r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	b25a      	sxtb	r2, r3
 800c00a:	4b37      	ldr	r3, [pc, #220]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c00c:	70da      	strb	r2, [r3, #3]
							if (actual.hour > 23)
 800c00e:	4b36      	ldr	r3, [pc, #216]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c010:	78db      	ldrb	r3, [r3, #3]
 800c012:	b25b      	sxtb	r3, r3
 800c014:	2b17      	cmp	r3, #23
 800c016:	dc00      	bgt.n	800c01a <HAL_GPIO_EXTI_Falling_Callback+0x506>
 800c018:	e1be      	b.n	800c398 <HAL_GPIO_EXTI_Falling_Callback+0x884>
								actual.hour = 0;
 800c01a:	4b33      	ldr	r3, [pc, #204]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	70da      	strb	r2, [r3, #3]
							if (actual.hour < 0)
								actual.hour = 23;

						}

						break;
 800c020:	e1ba      	b.n	800c398 <HAL_GPIO_EXTI_Falling_Callback+0x884>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c022:	23a0      	movs	r3, #160	; 0xa0
 800c024:	05db      	lsls	r3, r3, #23
 800c026:	2108      	movs	r1, #8
 800c028:	0018      	movs	r0, r3
 800c02a:	f7f8 ff97 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c02e:	1e03      	subs	r3, r0, #0
 800c030:	d000      	beq.n	800c034 <HAL_GPIO_EXTI_Falling_Callback+0x520>
 800c032:	e1b1      	b.n	800c398 <HAL_GPIO_EXTI_Falling_Callback+0x884>
							actual.hour--;
 800c034:	4b2c      	ldr	r3, [pc, #176]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c036:	78db      	ldrb	r3, [r3, #3]
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	3b01      	subs	r3, #1
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	b25a      	sxtb	r2, r3
 800c042:	4b29      	ldr	r3, [pc, #164]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c044:	70da      	strb	r2, [r3, #3]
							if (actual.hour < 0)
 800c046:	4b28      	ldr	r3, [pc, #160]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c048:	78db      	ldrb	r3, [r3, #3]
 800c04a:	b25b      	sxtb	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	db00      	blt.n	800c052 <HAL_GPIO_EXTI_Falling_Callback+0x53e>
 800c050:	e1a2      	b.n	800c398 <HAL_GPIO_EXTI_Falling_Callback+0x884>
								actual.hour = 23;
 800c052:	4b25      	ldr	r3, [pc, #148]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c054:	2217      	movs	r2, #23
 800c056:	70da      	strb	r2, [r3, #3]
						break;
 800c058:	e19e      	b.n	800c398 <HAL_GPIO_EXTI_Falling_Callback+0x884>

					case SETTINGS_MINUTES:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c05a:	23a0      	movs	r3, #160	; 0xa0
 800c05c:	05db      	lsls	r3, r3, #23
 800c05e:	2108      	movs	r1, #8
 800c060:	0018      	movs	r0, r3
 800c062:	f7f8 ff7b 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c066:	0003      	movs	r3, r0
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d112      	bne.n	800c092 <HAL_GPIO_EXTI_Falling_Callback+0x57e>
							actual.minute++;
 800c06c:	4b1e      	ldr	r3, [pc, #120]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c06e:	791b      	ldrb	r3, [r3, #4]
 800c070:	b25b      	sxtb	r3, r3
 800c072:	b2db      	uxtb	r3, r3
 800c074:	3301      	adds	r3, #1
 800c076:	b2db      	uxtb	r3, r3
 800c078:	b25a      	sxtb	r2, r3
 800c07a:	4b1b      	ldr	r3, [pc, #108]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c07c:	711a      	strb	r2, [r3, #4]
							if (actual.minute > 59)
 800c07e:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	b25b      	sxtb	r3, r3
 800c084:	2b3b      	cmp	r3, #59	; 0x3b
 800c086:	dc00      	bgt.n	800c08a <HAL_GPIO_EXTI_Falling_Callback+0x576>
 800c088:	e188      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x888>
								actual.minute = 0;
 800c08a:	4b17      	ldr	r3, [pc, #92]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	711a      	strb	r2, [r3, #4]
								== 0) {
							actual.minute--;
							if (actual.minute < 0)
								actual.minute = 59;
						}
						break;
 800c090:	e184      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x888>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c092:	23a0      	movs	r3, #160	; 0xa0
 800c094:	05db      	lsls	r3, r3, #23
 800c096:	2108      	movs	r1, #8
 800c098:	0018      	movs	r0, r3
 800c09a:	f7f8 ff5f 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c09e:	1e03      	subs	r3, r0, #0
 800c0a0:	d000      	beq.n	800c0a4 <HAL_GPIO_EXTI_Falling_Callback+0x590>
 800c0a2:	e17b      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x888>
							actual.minute--;
 800c0a4:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c0a6:	791b      	ldrb	r3, [r3, #4]
 800c0a8:	b25b      	sxtb	r3, r3
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	b25a      	sxtb	r2, r3
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c0b4:	711a      	strb	r2, [r3, #4]
							if (actual.minute < 0)
 800c0b6:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c0b8:	791b      	ldrb	r3, [r3, #4]
 800c0ba:	b25b      	sxtb	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	db00      	blt.n	800c0c2 <HAL_GPIO_EXTI_Falling_Callback+0x5ae>
 800c0c0:	e16c      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x888>
								actual.minute = 59;
 800c0c2:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c0c4:	223b      	movs	r2, #59	; 0x3b
 800c0c6:	711a      	strb	r2, [r3, #4]
						break;
 800c0c8:	e168      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x888>

					case SETTINGS_SECONDS:
						actual.second = 0;
 800c0ca:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	715a      	strb	r2, [r3, #5]
						Time.SubSeconds = 0;
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	605a      	str	r2, [r3, #4]
						break;
 800c0d6:	e170      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
 800c0d8:	200004c3 	.word	0x200004c3
 800c0dc:	200006c4 	.word	0x200006c4
 800c0e0:	20000770 	.word	0x20000770
 800c0e4:	2000044c 	.word	0x2000044c
 800c0e8:	200006ac 	.word	0x200006ac
 800c0ec:	0000639c 	.word	0x0000639c
 800c0f0:	000009f6 	.word	0x000009f6
 800c0f4:	200004b8 	.word	0x200004b8
 800c0f8:	20000444 	.word	0x20000444
 800c0fc:	2000058e 	.word	0x2000058e
 800c100:	200003b9 	.word	0x200003b9
 800c104:	08018648 	.word	0x08018648

					case SETTINGS_DAYS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c108:	23a0      	movs	r3, #160	; 0xa0
 800c10a:	05db      	lsls	r3, r3, #23
 800c10c:	2108      	movs	r1, #8
 800c10e:	0018      	movs	r0, r3
 800c110:	f7f8 ff24 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c114:	0003      	movs	r3, r0
 800c116:	2b01      	cmp	r3, #1
 800c118:	d112      	bne.n	800c140 <HAL_GPIO_EXTI_Falling_Callback+0x62c>
							actual.day++;
 800c11a:	4bc9      	ldr	r3, [pc, #804]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c11c:	789b      	ldrb	r3, [r3, #2]
 800c11e:	b25b      	sxtb	r3, r3
 800c120:	b2db      	uxtb	r3, r3
 800c122:	3301      	adds	r3, #1
 800c124:	b2db      	uxtb	r3, r3
 800c126:	b25a      	sxtb	r2, r3
 800c128:	4bc5      	ldr	r3, [pc, #788]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c12a:	709a      	strb	r2, [r3, #2]
							if (actual.day > 31)
 800c12c:	4bc4      	ldr	r3, [pc, #784]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c12e:	789b      	ldrb	r3, [r3, #2]
 800c130:	b25b      	sxtb	r3, r3
 800c132:	2b1f      	cmp	r3, #31
 800c134:	dc00      	bgt.n	800c138 <HAL_GPIO_EXTI_Falling_Callback+0x624>
 800c136:	e133      	b.n	800c3a0 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
								actual.day = 1;
 800c138:	4bc1      	ldr	r3, [pc, #772]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	709a      	strb	r2, [r3, #2]
							actual.day--;
							if (actual.day < 1)
								actual.day = 31;
						}

						break;
 800c13e:	e12f      	b.n	800c3a0 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c140:	23a0      	movs	r3, #160	; 0xa0
 800c142:	05db      	lsls	r3, r3, #23
 800c144:	2108      	movs	r1, #8
 800c146:	0018      	movs	r0, r3
 800c148:	f7f8 ff08 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c14c:	1e03      	subs	r3, r0, #0
 800c14e:	d000      	beq.n	800c152 <HAL_GPIO_EXTI_Falling_Callback+0x63e>
 800c150:	e126      	b.n	800c3a0 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
							actual.day--;
 800c152:	4bbb      	ldr	r3, [pc, #748]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c154:	789b      	ldrb	r3, [r3, #2]
 800c156:	b25b      	sxtb	r3, r3
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	3b01      	subs	r3, #1
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	b25a      	sxtb	r2, r3
 800c160:	4bb7      	ldr	r3, [pc, #732]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c162:	709a      	strb	r2, [r3, #2]
							if (actual.day < 1)
 800c164:	4bb6      	ldr	r3, [pc, #728]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c166:	789b      	ldrb	r3, [r3, #2]
 800c168:	b25b      	sxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd00      	ble.n	800c170 <HAL_GPIO_EXTI_Falling_Callback+0x65c>
 800c16e:	e117      	b.n	800c3a0 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
								actual.day = 31;
 800c170:	4bb3      	ldr	r3, [pc, #716]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c172:	221f      	movs	r2, #31
 800c174:	709a      	strb	r2, [r3, #2]
						break;
 800c176:	e113      	b.n	800c3a0 <HAL_GPIO_EXTI_Falling_Callback+0x88c>

					case SETTINGS_MONTHS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c178:	23a0      	movs	r3, #160	; 0xa0
 800c17a:	05db      	lsls	r3, r3, #23
 800c17c:	2108      	movs	r1, #8
 800c17e:	0018      	movs	r0, r3
 800c180:	f7f8 feec 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c184:	0003      	movs	r3, r0
 800c186:	2b01      	cmp	r3, #1
 800c188:	d112      	bne.n	800c1b0 <HAL_GPIO_EXTI_Falling_Callback+0x69c>
							actual.month++;
 800c18a:	4bad      	ldr	r3, [pc, #692]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c18c:	785b      	ldrb	r3, [r3, #1]
 800c18e:	b25b      	sxtb	r3, r3
 800c190:	b2db      	uxtb	r3, r3
 800c192:	3301      	adds	r3, #1
 800c194:	b2db      	uxtb	r3, r3
 800c196:	b25a      	sxtb	r2, r3
 800c198:	4ba9      	ldr	r3, [pc, #676]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c19a:	705a      	strb	r2, [r3, #1]
							if (actual.month > 12)
 800c19c:	4ba8      	ldr	r3, [pc, #672]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	b25b      	sxtb	r3, r3
 800c1a2:	2b0c      	cmp	r3, #12
 800c1a4:	dc00      	bgt.n	800c1a8 <HAL_GPIO_EXTI_Falling_Callback+0x694>
 800c1a6:	e0fd      	b.n	800c3a4 <HAL_GPIO_EXTI_Falling_Callback+0x890>
								actual.month = 1;
 800c1a8:	4ba5      	ldr	r3, [pc, #660]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	705a      	strb	r2, [r3, #1]
							actual.month--;
							if (actual.month < 1)
								actual.month = 12;
						}

						break;
 800c1ae:	e0f9      	b.n	800c3a4 <HAL_GPIO_EXTI_Falling_Callback+0x890>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c1b0:	23a0      	movs	r3, #160	; 0xa0
 800c1b2:	05db      	lsls	r3, r3, #23
 800c1b4:	2108      	movs	r1, #8
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	f7f8 fed0 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c1bc:	1e03      	subs	r3, r0, #0
 800c1be:	d000      	beq.n	800c1c2 <HAL_GPIO_EXTI_Falling_Callback+0x6ae>
 800c1c0:	e0f0      	b.n	800c3a4 <HAL_GPIO_EXTI_Falling_Callback+0x890>
							actual.month--;
 800c1c2:	4b9f      	ldr	r3, [pc, #636]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1c4:	785b      	ldrb	r3, [r3, #1]
 800c1c6:	b25b      	sxtb	r3, r3
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	b25a      	sxtb	r2, r3
 800c1d0:	4b9b      	ldr	r3, [pc, #620]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1d2:	705a      	strb	r2, [r3, #1]
							if (actual.month < 1)
 800c1d4:	4b9a      	ldr	r3, [pc, #616]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1d6:	785b      	ldrb	r3, [r3, #1]
 800c1d8:	b25b      	sxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dd00      	ble.n	800c1e0 <HAL_GPIO_EXTI_Falling_Callback+0x6cc>
 800c1de:	e0e1      	b.n	800c3a4 <HAL_GPIO_EXTI_Falling_Callback+0x890>
								actual.month = 12;
 800c1e0:	4b97      	ldr	r3, [pc, #604]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1e2:	220c      	movs	r2, #12
 800c1e4:	705a      	strb	r2, [r3, #1]
						break;
 800c1e6:	e0dd      	b.n	800c3a4 <HAL_GPIO_EXTI_Falling_Callback+0x890>

					case SETTINGS_YEARS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c1e8:	23a0      	movs	r3, #160	; 0xa0
 800c1ea:	05db      	lsls	r3, r3, #23
 800c1ec:	2108      	movs	r1, #8
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f7f8 feb4 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c1f4:	0003      	movs	r3, r0
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d112      	bne.n	800c220 <HAL_GPIO_EXTI_Falling_Callback+0x70c>
							actual.year++;
 800c1fa:	4b91      	ldr	r3, [pc, #580]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b25b      	sxtb	r3, r3
 800c200:	b2db      	uxtb	r3, r3
 800c202:	3301      	adds	r3, #1
 800c204:	b2db      	uxtb	r3, r3
 800c206:	b25a      	sxtb	r2, r3
 800c208:	4b8d      	ldr	r3, [pc, #564]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c20a:	701a      	strb	r2, [r3, #0]
							if (actual.year > 99)
 800c20c:	4b8c      	ldr	r3, [pc, #560]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	b25b      	sxtb	r3, r3
 800c212:	2b63      	cmp	r3, #99	; 0x63
 800c214:	dc00      	bgt.n	800c218 <HAL_GPIO_EXTI_Falling_Callback+0x704>
 800c216:	e0c7      	b.n	800c3a8 <HAL_GPIO_EXTI_Falling_Callback+0x894>
								actual.year = 1;
 800c218:	4b89      	ldr	r3, [pc, #548]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c21a:	2201      	movs	r2, #1
 800c21c:	701a      	strb	r2, [r3, #0]
							actual.year--;
							if (actual.year < 1)
								actual.year = 99;
						}

						break;
 800c21e:	e0c3      	b.n	800c3a8 <HAL_GPIO_EXTI_Falling_Callback+0x894>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c220:	23a0      	movs	r3, #160	; 0xa0
 800c222:	05db      	lsls	r3, r3, #23
 800c224:	2108      	movs	r1, #8
 800c226:	0018      	movs	r0, r3
 800c228:	f7f8 fe98 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c22c:	1e03      	subs	r3, r0, #0
 800c22e:	d000      	beq.n	800c232 <HAL_GPIO_EXTI_Falling_Callback+0x71e>
 800c230:	e0ba      	b.n	800c3a8 <HAL_GPIO_EXTI_Falling_Callback+0x894>
							actual.year--;
 800c232:	4b83      	ldr	r3, [pc, #524]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	b25b      	sxtb	r3, r3
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	3b01      	subs	r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	b25a      	sxtb	r2, r3
 800c240:	4b7f      	ldr	r3, [pc, #508]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c242:	701a      	strb	r2, [r3, #0]
							if (actual.year < 1)
 800c244:	4b7e      	ldr	r3, [pc, #504]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd00      	ble.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x73c>
 800c24e:	e0ab      	b.n	800c3a8 <HAL_GPIO_EXTI_Falling_Callback+0x894>
								actual.year = 99;
 800c250:	4b7b      	ldr	r3, [pc, #492]	; (800c440 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c252:	2263      	movs	r2, #99	; 0x63
 800c254:	701a      	strb	r2, [r3, #0]
						break;
 800c256:	e0a7      	b.n	800c3a8 <HAL_GPIO_EXTI_Falling_Callback+0x894>

					case SETTINGS_LAYOUT:
						if (layout < layoutsCounter)
 800c258:	4b7a      	ldr	r3, [pc, #488]	; (800c444 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	4b7a      	ldr	r3, [pc, #488]	; (800c448 <HAL_GPIO_EXTI_Falling_Callback+0x934>)
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d207      	bcs.n	800c276 <HAL_GPIO_EXTI_Falling_Callback+0x762>
							layout++;
 800c266:	4b77      	ldr	r3, [pc, #476]	; (800c444 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	3301      	adds	r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	4b74      	ldr	r3, [pc, #464]	; (800c444 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c272:	701a      	strb	r2, [r3, #0]
						else if (layout >= layoutsCounter)
							layout = 1;
						break;
 800c274:	e09a      	b.n	800c3ac <HAL_GPIO_EXTI_Falling_Callback+0x898>
						else if (layout >= layoutsCounter)
 800c276:	4b73      	ldr	r3, [pc, #460]	; (800c444 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	4b72      	ldr	r3, [pc, #456]	; (800c448 <HAL_GPIO_EXTI_Falling_Callback+0x934>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d200      	bcs.n	800c286 <HAL_GPIO_EXTI_Falling_Callback+0x772>
 800c284:	e092      	b.n	800c3ac <HAL_GPIO_EXTI_Falling_Callback+0x898>
							layout = 1;
 800c286:	4b6f      	ldr	r3, [pc, #444]	; (800c444 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c288:	2201      	movs	r2, #1
 800c28a:	701a      	strb	r2, [r3, #0]
						break;
 800c28c:	e08e      	b.n	800c3ac <HAL_GPIO_EXTI_Falling_Callback+0x898>

					case SETTINGS_COLOR:
						if (colorScheme < 2)
 800c28e:	4b6f      	ldr	r3, [pc, #444]	; (800c44c <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b01      	cmp	r3, #1
 800c296:	d807      	bhi.n	800c2a8 <HAL_GPIO_EXTI_Falling_Callback+0x794>
							colorScheme++;
 800c298:	4b6c      	ldr	r3, [pc, #432]	; (800c44c <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4b6a      	ldr	r3, [pc, #424]	; (800c44c <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c2a4:	701a      	strb	r2, [r3, #0]
						else if (colorScheme >= 2)
							colorScheme = 1;
						break;
 800c2a6:	e083      	b.n	800c3b0 <HAL_GPIO_EXTI_Falling_Callback+0x89c>
						else if (colorScheme >= 2)
 800c2a8:	4b68      	ldr	r3, [pc, #416]	; (800c44c <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d800      	bhi.n	800c2b4 <HAL_GPIO_EXTI_Falling_Callback+0x7a0>
 800c2b2:	e07d      	b.n	800c3b0 <HAL_GPIO_EXTI_Falling_Callback+0x89c>
							colorScheme = 1;
 800c2b4:	4b65      	ldr	r3, [pc, #404]	; (800c44c <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
						break;
 800c2ba:	e079      	b.n	800c3b0 <HAL_GPIO_EXTI_Falling_Callback+0x89c>

					case SETTINGS_PRESS_REF:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c2bc:	23a0      	movs	r3, #160	; 0xa0
 800c2be:	05db      	lsls	r3, r3, #23
 800c2c0:	2108      	movs	r1, #8
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f7f8 fe4a 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c2c8:	0003      	movs	r3, r0
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d113      	bne.n	800c2f6 <HAL_GPIO_EXTI_Falling_Callback+0x7e2>
							pressureReference++;
 800c2ce:	4b60      	ldr	r3, [pc, #384]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b21b      	sxth	r3, r3
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	b21a      	sxth	r2, r3
 800c2dc:	4b5c      	ldr	r3, [pc, #368]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c2de:	801a      	strh	r2, [r3, #0]
							if (pressureReference > 1300)
 800c2e0:	4b5b      	ldr	r3, [pc, #364]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b21b      	sxth	r3, r3
 800c2e6:	4a5b      	ldr	r2, [pc, #364]	; (800c454 <HAL_GPIO_EXTI_Falling_Callback+0x940>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	dd63      	ble.n	800c3b4 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
								pressureReference = 700;
 800c2ec:	4b58      	ldr	r3, [pc, #352]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c2ee:	22af      	movs	r2, #175	; 0xaf
 800c2f0:	0092      	lsls	r2, r2, #2
 800c2f2:	801a      	strh	r2, [r3, #0]
								== 0) {
							pressureReference--;
							if (pressureReference < 700)
								pressureReference = 1300;
						}
						break;
 800c2f4:	e05e      	b.n	800c3b4 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c2f6:	23a0      	movs	r3, #160	; 0xa0
 800c2f8:	05db      	lsls	r3, r3, #23
 800c2fa:	2108      	movs	r1, #8
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f7f8 fe2d 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c302:	1e03      	subs	r3, r0, #0
 800c304:	d156      	bne.n	800c3b4 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
							pressureReference--;
 800c306:	4b52      	ldr	r3, [pc, #328]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	b21b      	sxth	r3, r3
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	3b01      	subs	r3, #1
 800c310:	b29b      	uxth	r3, r3
 800c312:	b21a      	sxth	r2, r3
 800c314:	4b4e      	ldr	r3, [pc, #312]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c316:	801a      	strh	r2, [r3, #0]
							if (pressureReference < 700)
 800c318:	4b4d      	ldr	r3, [pc, #308]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	b21a      	sxth	r2, r3
 800c31e:	23af      	movs	r3, #175	; 0xaf
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	429a      	cmp	r2, r3
 800c324:	da46      	bge.n	800c3b4 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
								pressureReference = 1300;
 800c326:	4b4a      	ldr	r3, [pc, #296]	; (800c450 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c328:	4a4a      	ldr	r2, [pc, #296]	; (800c454 <HAL_GPIO_EXTI_Falling_Callback+0x940>)
 800c32a:	801a      	strh	r2, [r3, #0]
						break;
 800c32c:	e042      	b.n	800c3b4 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>

					case SETTINGS_TEMP_CMP:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c32e:	23a0      	movs	r3, #160	; 0xa0
 800c330:	05db      	lsls	r3, r3, #23
 800c332:	2108      	movs	r1, #8
 800c334:	0018      	movs	r0, r3
 800c336:	f7f8 fe11 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c33a:	0003      	movs	r3, r0
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d111      	bne.n	800c364 <HAL_GPIO_EXTI_Falling_Callback+0x850>
							temperatureCompensation++;
 800c340:	4b45      	ldr	r3, [pc, #276]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	b25b      	sxtb	r3, r3
 800c346:	b2db      	uxtb	r3, r3
 800c348:	3301      	adds	r3, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	b25a      	sxtb	r2, r3
 800c34e:	4b42      	ldr	r3, [pc, #264]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c350:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation > 20)
 800c352:	4b41      	ldr	r3, [pc, #260]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	b25b      	sxtb	r3, r3
 800c358:	2b14      	cmp	r3, #20
 800c35a:	dd2d      	ble.n	800c3b8 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
								temperatureCompensation = -20;
 800c35c:	4b3e      	ldr	r3, [pc, #248]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c35e:	22ec      	movs	r2, #236	; 0xec
 800c360:	701a      	strb	r2, [r3, #0]
							temperatureCompensation--;
							if (temperatureCompensation < -20)
								temperatureCompensation = 20;
						}

						break;
 800c362:	e029      	b.n	800c3b8 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c364:	23a0      	movs	r3, #160	; 0xa0
 800c366:	05db      	lsls	r3, r3, #23
 800c368:	2108      	movs	r1, #8
 800c36a:	0018      	movs	r0, r3
 800c36c:	f7f8 fdf6 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c370:	1e03      	subs	r3, r0, #0
 800c372:	d121      	bne.n	800c3b8 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
							temperatureCompensation--;
 800c374:	4b38      	ldr	r3, [pc, #224]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	b25b      	sxtb	r3, r3
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	3b01      	subs	r3, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	b25a      	sxtb	r2, r3
 800c382:	4b35      	ldr	r3, [pc, #212]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c384:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation < -20)
 800c386:	4b34      	ldr	r3, [pc, #208]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	b25b      	sxtb	r3, r3
 800c38c:	3314      	adds	r3, #20
 800c38e:	da13      	bge.n	800c3b8 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
								temperatureCompensation = 20;
 800c390:	4b31      	ldr	r3, [pc, #196]	; (800c458 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c392:	2214      	movs	r2, #20
 800c394:	701a      	strb	r2, [r3, #0]
						break;
 800c396:	e00f      	b.n	800c3b8 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
						break;
 800c398:	46c0      	nop			; (mov r8, r8)
 800c39a:	e00e      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c39c:	46c0      	nop			; (mov r8, r8)
 800c39e:	e00c      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3a0:	46c0      	nop			; (mov r8, r8)
 800c3a2:	e00a      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3a4:	46c0      	nop			; (mov r8, r8)
 800c3a6:	e008      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3a8:	46c0      	nop			; (mov r8, r8)
 800c3aa:	e006      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3ac:	46c0      	nop			; (mov r8, r8)
 800c3ae:	e004      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3b0:	46c0      	nop			; (mov r8, r8)
 800c3b2:	e002      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3b4:	46c0      	nop			; (mov r8, r8)
 800c3b6:	e000      	b.n	800c3ba <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c3b8:	46c0      	nop			; (mov r8, r8)

					}

					rtcSetTime();
 800c3ba:	f004 fc9d 	bl	8010cf8 <rtcSetTime>
			if (flagLocked == UNLOCKED) {
 800c3be:	e0f3      	b.n	800c5a8 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

				}
			}
			//										RESET BUTTON

		} else if (GPIO_Pin == RESET_Pin
 800c3c0:	1dbb      	adds	r3, r7, #6
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	2b10      	cmp	r3, #16
 800c3c6:	d000      	beq.n	800c3ca <HAL_GPIO_EXTI_Falling_Callback+0x8b6>
 800c3c8:	e090      	b.n	800c4ec <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800c3ca:	23a0      	movs	r3, #160	; 0xa0
 800c3cc:	05db      	lsls	r3, r3, #23
 800c3ce:	2110      	movs	r1, #16
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f7f8 fdc3 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c3d6:	1e03      	subs	r3, r0, #0
 800c3d8:	d000      	beq.n	800c3dc <HAL_GPIO_EXTI_Falling_Callback+0x8c8>
 800c3da:	e087      	b.n	800c4ec <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_SET
 800c3dc:	23a0      	movs	r3, #160	; 0xa0
 800c3de:	05db      	lsls	r3, r3, #23
 800c3e0:	2108      	movs	r1, #8
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f7f8 fdba 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c3e8:	0003      	movs	r3, r0
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d000      	beq.n	800c3f0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
 800c3ee:	e07d      	b.n	800c4ec <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 800c3f0:	23a0      	movs	r3, #160	; 0xa0
 800c3f2:	05db      	lsls	r3, r3, #23
 800c3f4:	2104      	movs	r1, #4
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f7f8 fdb0 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c3fc:	0003      	movs	r3, r0
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d000      	beq.n	800c404 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
 800c402:	e073      	b.n	800c4ec <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
						== GPIO_PIN_SET) {

			counterForce = 0;
 800c404:	4b15      	ldr	r3, [pc, #84]	; (800c45c <HAL_GPIO_EXTI_Falling_Callback+0x948>)
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
			counterMultiplePress++;
 800c40a:	4b15      	ldr	r3, [pc, #84]	; (800c460 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	3301      	adds	r3, #1
 800c412:	b2da      	uxtb	r2, r3
 800c414:	4b12      	ldr	r3, [pc, #72]	; (800c460 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c416:	701a      	strb	r2, [r3, #0]

			if (flagSettings == FLAG_SETTINGS_OFF) {
 800c418:	4b12      	ldr	r3, [pc, #72]	; (800c464 <HAL_GPIO_EXTI_Falling_Callback+0x950>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d127      	bne.n	800c472 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
				if (counterMultiplePress >= MULTIPLE_PRESS) {
 800c422:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d922      	bls.n	800c472 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
					if (flagLocked == LOCKED) {
 800c42c:	4b0e      	ldr	r3, [pc, #56]	; (800c468 <HAL_GPIO_EXTI_Falling_Callback+0x954>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b01      	cmp	r3, #1
 800c434:	d11a      	bne.n	800c46c <HAL_GPIO_EXTI_Falling_Callback+0x958>
						flagLocked = UNLOCKED;
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <HAL_GPIO_EXTI_Falling_Callback+0x954>)
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	e019      	b.n	800c472 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	200006ac 	.word	0x200006ac
 800c444:	200006f5 	.word	0x200006f5
 800c448:	2000002c 	.word	0x2000002c
 800c44c:	200006d8 	.word	0x200006d8
 800c450:	20000032 	.word	0x20000032
 800c454:	00000514 	.word	0x00000514
 800c458:	20000030 	.word	0x20000030
 800c45c:	200006da 	.word	0x200006da
 800c460:	200006e0 	.word	0x200006e0
 800c464:	2000058e 	.word	0x2000058e
 800c468:	200004c2 	.word	0x200004c2
					} else {
						flagLocked = LOCKED;
 800c46c:	4b52      	ldr	r3, [pc, #328]	; (800c5b8 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c46e:	2201      	movs	r2, #1
 800c470:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (flagLocked == UNLOCKED) {
 800c472:	4b51      	ldr	r3, [pc, #324]	; (800c5b8 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d000      	beq.n	800c47e <HAL_GPIO_EXTI_Falling_Callback+0x96a>
 800c47c:	e096      	b.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>

				if (mode == MODE_NORMAL && flagSettings == FLAG_SETTINGS_OFF) {
 800c47e:	4b4f      	ldr	r3, [pc, #316]	; (800c5bc <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d104      	bne.n	800c492 <HAL_GPIO_EXTI_Falling_Callback+0x97e>
 800c488:	4b4d      	ldr	r3, [pc, #308]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d02b      	beq.n	800c4ea <HAL_GPIO_EXTI_Falling_Callback+0x9d6>
//			interfaceFullUpdateFlag = 1; //legacy
				}

				else if (mode == MODE_STOP && flagSettings == FLAG_SETTINGS_OFF) {
 800c492:	4b4a      	ldr	r3, [pc, #296]	; (800c5bc <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d10a      	bne.n	800c4b2 <HAL_GPIO_EXTI_Falling_Callback+0x99e>
 800c49c:	4b48      	ldr	r3, [pc, #288]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d105      	bne.n	800c4b2 <HAL_GPIO_EXTI_Falling_Callback+0x99e>

					mode = MODE_NORMAL;
 800c4a6:	4b45      	ldr	r3, [pc, #276]	; (800c5bc <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
					rtcResetChrono();
 800c4ac:	f004 fc62 	bl	8010d74 <rtcResetChrono>
 800c4b0:	e01b      	b.n	800c4ea <HAL_GPIO_EXTI_Falling_Callback+0x9d6>

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800c4b2:	4b43      	ldr	r3, [pc, #268]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d000      	beq.n	800c4be <HAL_GPIO_EXTI_Falling_Callback+0x9aa>
 800c4bc:	e076      	b.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>

					if (settingsPointer < 10) {
 800c4be:	4b41      	ldr	r3, [pc, #260]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d807      	bhi.n	800c4d8 <HAL_GPIO_EXTI_Falling_Callback+0x9c4>
						settingsPointer++; // if reset was pressed in settings, forward pointer
 800c4c8:	4b3e      	ldr	r3, [pc, #248]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	4b3c      	ldr	r3, [pc, #240]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c4d4:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800c4d6:	e069      	b.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>
					} else if (settingsPointer >= 10) {
 800c4d8:	4b3a      	ldr	r3, [pc, #232]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d964      	bls.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>
						settingsPointer = 1;
 800c4e2:	4b38      	ldr	r3, [pc, #224]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800c4e8:	e060      	b.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>
 800c4ea:	e05f      	b.n	800c5ac <HAL_GPIO_EXTI_Falling_Callback+0xa98>

				}
			}
			//										SET BUTTON

		} else if (GPIO_Pin == SET_Pin
 800c4ec:	1dbb      	adds	r3, r7, #6
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	2b08      	cmp	r3, #8
 800c4f2:	d15c      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_RESET
 800c4f4:	23a0      	movs	r3, #160	; 0xa0
 800c4f6:	05db      	lsls	r3, r3, #23
 800c4f8:	2108      	movs	r1, #8
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	f7f8 fd2e 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c500:	1e03      	subs	r3, r0, #0
 800c502:	d154      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_SET
 800c504:	23a0      	movs	r3, #160	; 0xa0
 800c506:	05db      	lsls	r3, r3, #23
 800c508:	2104      	movs	r1, #4
 800c50a:	0018      	movs	r0, r3
 800c50c:	f7f8 fd26 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c510:	0003      	movs	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d14b      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800c516:	23a0      	movs	r3, #160	; 0xa0
 800c518:	05db      	lsls	r3, r3, #23
 800c51a:	2110      	movs	r1, #16
 800c51c:	0018      	movs	r0, r3
 800c51e:	f7f8 fd1d 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c522:	0003      	movs	r3, r0
 800c524:	2b01      	cmp	r3, #1
 800c526:	d142      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800c528:	4b23      	ldr	r3, [pc, #140]	; (800c5b8 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d13d      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

				if (flagSettings == FLAG_SETTINGS_OFF
 800c532:	4b23      	ldr	r3, [pc, #140]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d112      	bne.n	800c562 <HAL_GPIO_EXTI_Falling_Callback+0xa4e>
						&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) { //go to settings only when Reset button is released
 800c53c:	23a0      	movs	r3, #160	; 0xa0
 800c53e:	05db      	lsls	r3, r3, #23
 800c540:	2110      	movs	r1, #16
 800c542:	0018      	movs	r0, r3
 800c544:	f7f8 fd0a 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c548:	0003      	movs	r3, r0
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d109      	bne.n	800c562 <HAL_GPIO_EXTI_Falling_Callback+0xa4e>

					flagSettings = FLAG_SETTINGS_ON;
 800c54e:	4b1c      	ldr	r3, [pc, #112]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c550:	2201      	movs	r2, #1
 800c552:	701a      	strb	r2, [r3, #0]
					counterSettings = SETTINGS_TIME;
 800c554:	4b1c      	ldr	r3, [pc, #112]	; (800c5c8 <HAL_GPIO_EXTI_Falling_Callback+0xab4>)
 800c556:	2205      	movs	r2, #5
 800c558:	701a      	strb	r2, [r3, #0]
					settingsPointer = 7;
 800c55a:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c55c:	2207      	movs	r2, #7
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	e025      	b.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

				} else if (flagSettings == FLAG_SETTINGS_ON
 800c562:	4b17      	ldr	r3, [pc, #92]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d120      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
						&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1) {
 800c56c:	23a0      	movs	r3, #160	; 0xa0
 800c56e:	05db      	lsls	r3, r3, #23
 800c570:	2104      	movs	r1, #4
 800c572:	0018      	movs	r0, r3
 800c574:	f7f8 fcf2 	bl	8004f5c <HAL_GPIO_ReadPin>
 800c578:	0003      	movs	r3, r0
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d117      	bne.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

					flagSettings = FLAG_SETTINGS_OFF;
 800c57e:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
					counterSettings = 0;
 800c584:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <HAL_GPIO_EXTI_Falling_Callback+0xab4>)
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
					interfaceSelectColorScheme(colorScheme);
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <HAL_GPIO_EXTI_Falling_Callback+0xab8>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	0018      	movs	r0, r3
 800c592:	f000 fcc9 	bl	800cf28 <interfaceSelectColorScheme>
					interfaceSelectLayout(layout);
 800c596:	4b0e      	ldr	r3, [pc, #56]	; (800c5d0 <HAL_GPIO_EXTI_Falling_Callback+0xabc>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	0018      	movs	r0, r3
 800c59e:	f000 f819 	bl	800c5d4 <interfaceSelectLayout>
				}

			}
		}
	}
}
 800c5a2:	e004      	b.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800c5a4:	46c0      	nop			; (mov r8, r8)
 800c5a6:	e002      	b.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
			if (flagLocked == UNLOCKED) {
 800c5a8:	46c0      	nop			; (mov r8, r8)
 800c5aa:	e000      	b.n	800c5ae <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
			if (flagLocked == UNLOCKED) {
 800c5ac:	46c0      	nop			; (mov r8, r8)
}
 800c5ae:	46c0      	nop			; (mov r8, r8)
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	b002      	add	sp, #8
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	46c0      	nop			; (mov r8, r8)
 800c5b8:	200004c2 	.word	0x200004c2
 800c5bc:	200004c3 	.word	0x200004c3
 800c5c0:	2000058e 	.word	0x2000058e
 800c5c4:	200003b9 	.word	0x200003b9
 800c5c8:	20000694 	.word	0x20000694
 800c5cc:	200006d8 	.word	0x200006d8
 800c5d0:	200006f5 	.word	0x200006f5

0800c5d4 <interfaceSelectLayout>:
//#include <math.h>
#include <stdlib.h>

uint8_t layoutsCounter = 5; //how many layouts are programmed

void interfaceSelectLayout(uint8_t l) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	0002      	movs	r2, r0
 800c5dc:	1dfb      	adds	r3, r7, #7
 800c5de:	701a      	strb	r2, [r3, #0]

	if (l == 1) { //simple
 800c5e0:	1dfb      	adds	r3, r7, #7
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d000      	beq.n	800c5ea <interfaceSelectLayout+0x16>
 800c5e8:	e0a8      	b.n	800c73c <interfaceSelectLayout+0x168>

		showBarometer = 1;
 800c5ea:	4bab      	ldr	r3, [pc, #684]	; (800c898 <interfaceSelectLayout+0x2c4>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
		showBatteryState = 0;
 800c5f0:	4baa      	ldr	r3, [pc, #680]	; (800c89c <interfaceSelectLayout+0x2c8>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800c5f6:	4baa      	ldr	r3, [pc, #680]	; (800c8a0 <interfaceSelectLayout+0x2cc>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c5fc:	4ba9      	ldr	r3, [pc, #676]	; (800c8a4 <interfaceSelectLayout+0x2d0>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800c602:	4ba9      	ldr	r3, [pc, #676]	; (800c8a8 <interfaceSelectLayout+0x2d4>)
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c608:	4ba8      	ldr	r3, [pc, #672]	; (800c8ac <interfaceSelectLayout+0x2d8>)
 800c60a:	2201      	movs	r2, #1
 800c60c:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800c60e:	4ba8      	ldr	r3, [pc, #672]	; (800c8b0 <interfaceSelectLayout+0x2dc>)
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c614:	4ba7      	ldr	r3, [pc, #668]	; (800c8b4 <interfaceSelectLayout+0x2e0>)
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800c61a:	4ba7      	ldr	r3, [pc, #668]	; (800c8b8 <interfaceSelectLayout+0x2e4>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800c620:	4ba6      	ldr	r3, [pc, #664]	; (800c8bc <interfaceSelectLayout+0x2e8>)
 800c622:	2200      	movs	r2, #0
 800c624:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c626:	4ba6      	ldr	r3, [pc, #664]	; (800c8c0 <interfaceSelectLayout+0x2ec>)
 800c628:	2200      	movs	r2, #0
 800c62a:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800c62c:	4ba5      	ldr	r3, [pc, #660]	; (800c8c4 <interfaceSelectLayout+0x2f0>)
 800c62e:	2201      	movs	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c632:	4ba5      	ldr	r3, [pc, #660]	; (800c8c8 <interfaceSelectLayout+0x2f4>)
 800c634:	2201      	movs	r2, #1
 800c636:	701a      	strb	r2, [r3, #0]

		//sensor readings positions
		temperatureX = 38;
 800c638:	4ba4      	ldr	r3, [pc, #656]	; (800c8cc <interfaceSelectLayout+0x2f8>)
 800c63a:	2226      	movs	r2, #38	; 0x26
 800c63c:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800c63e:	4ba4      	ldr	r3, [pc, #656]	; (800c8d0 <interfaceSelectLayout+0x2fc>)
 800c640:	222c      	movs	r2, #44	; 0x2c
 800c642:	701a      	strb	r2, [r3, #0]

		humidityX = 130;
 800c644:	4ba3      	ldr	r3, [pc, #652]	; (800c8d4 <interfaceSelectLayout+0x300>)
 800c646:	2282      	movs	r2, #130	; 0x82
 800c648:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c64a:	4ba3      	ldr	r3, [pc, #652]	; (800c8d8 <interfaceSelectLayout+0x304>)
 800c64c:	224b      	movs	r2, #75	; 0x4b
 800c64e:	701a      	strb	r2, [r3, #0]

		pressureX = 17;
 800c650:	4ba2      	ldr	r3, [pc, #648]	; (800c8dc <interfaceSelectLayout+0x308>)
 800c652:	2211      	movs	r2, #17
 800c654:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c656:	4ba2      	ldr	r3, [pc, #648]	; (800c8e0 <interfaceSelectLayout+0x30c>)
 800c658:	2232      	movs	r2, #50	; 0x32
 800c65a:	701a      	strb	r2, [r3, #0]

		//compass and altitude
		compassX = 55;
 800c65c:	4ba1      	ldr	r3, [pc, #644]	; (800c8e4 <interfaceSelectLayout+0x310>)
 800c65e:	2237      	movs	r2, #55	; 0x37
 800c660:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800c662:	4ba1      	ldr	r3, [pc, #644]	; (800c8e8 <interfaceSelectLayout+0x314>)
 800c664:	2264      	movs	r2, #100	; 0x64
 800c666:	701a      	strb	r2, [r3, #0]

		//date position
		dateX = 153;
 800c668:	4ba0      	ldr	r3, [pc, #640]	; (800c8ec <interfaceSelectLayout+0x318>)
 800c66a:	2299      	movs	r2, #153	; 0x99
 800c66c:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c66e:	4ba0      	ldr	r3, [pc, #640]	; (800c8f0 <interfaceSelectLayout+0x31c>)
 800c670:	225f      	movs	r2, #95	; 0x5f
 800c672:	701a      	strb	r2, [r3, #0]

		batteryStateStartX = 135;
 800c674:	4b9f      	ldr	r3, [pc, #636]	; (800c8f4 <interfaceSelectLayout+0x320>)
 800c676:	2287      	movs	r2, #135	; 0x87
 800c678:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800c67a:	4b9f      	ldr	r3, [pc, #636]	; (800c8f8 <interfaceSelectLayout+0x324>)
 800c67c:	2287      	movs	r2, #135	; 0x87
 800c67e:	701a      	strb	r2, [r3, #0]

		pointerShadowShift = 2;
 800c680:	4b9e      	ldr	r3, [pc, #632]	; (800c8fc <interfaceSelectLayout+0x328>)
 800c682:	2202      	movs	r2, #2
 800c684:	701a      	strb	r2, [r3, #0]

		chronoDecimalsStartX = 100;
 800c686:	4b9e      	ldr	r3, [pc, #632]	; (800c900 <interfaceSelectLayout+0x32c>)
 800c688:	2264      	movs	r2, #100	; 0x64
 800c68a:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800c68c:	4b9d      	ldr	r3, [pc, #628]	; (800c904 <interfaceSelectLayout+0x330>)
 800c68e:	2232      	movs	r2, #50	; 0x32
 800c690:	701a      	strb	r2, [r3, #0]

		chronoMinutesStartX = 100;
 800c692:	4b9d      	ldr	r3, [pc, #628]	; (800c908 <interfaceSelectLayout+0x334>)
 800c694:	2264      	movs	r2, #100	; 0x64
 800c696:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800c698:	4b9c      	ldr	r3, [pc, #624]	; (800c90c <interfaceSelectLayout+0x338>)
 800c69a:	2296      	movs	r2, #150	; 0x96
 800c69c:	701a      	strb	r2, [r3, #0]

		secondsStartX = 100;
 800c69e:	4b9c      	ldr	r3, [pc, #624]	; (800c910 <interfaceSelectLayout+0x33c>)
 800c6a0:	2264      	movs	r2, #100	; 0x64
 800c6a2:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800c6a4:	4b9b      	ldr	r3, [pc, #620]	; (800c914 <interfaceSelectLayout+0x340>)
 800c6a6:	2296      	movs	r2, #150	; 0x96
 800c6a8:	701a      	strb	r2, [r3, #0]

		mainStartX = 100;
 800c6aa:	4b9b      	ldr	r3, [pc, #620]	; (800c918 <interfaceSelectLayout+0x344>)
 800c6ac:	2264      	movs	r2, #100	; 0x64
 800c6ae:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800c6b0:	4b9a      	ldr	r3, [pc, #616]	; (800c91c <interfaceSelectLayout+0x348>)
 800c6b2:	2264      	movs	r2, #100	; 0x64
 800c6b4:	701a      	strb	r2, [r3, #0]

		compassBoardRadius = 25;
 800c6b6:	4b9a      	ldr	r3, [pc, #616]	; (800c920 <interfaceSelectLayout+0x34c>)
 800c6b8:	2219      	movs	r2, #25
 800c6ba:	701a      	strb	r2, [r3, #0]

		mainBoardRadius = 97;
 800c6bc:	4b99      	ldr	r3, [pc, #612]	; (800c924 <interfaceSelectLayout+0x350>)
 800c6be:	2261      	movs	r2, #97	; 0x61
 800c6c0:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800c6c2:	4b99      	ldr	r3, [pc, #612]	; (800c928 <interfaceSelectLayout+0x354>)
 800c6c4:	221c      	movs	r2, #28
 800c6c6:	701a      	strb	r2, [r3, #0]

		//pointers lengths

		hourPointerLength = 55;
 800c6c8:	4b98      	ldr	r3, [pc, #608]	; (800c92c <interfaceSelectLayout+0x358>)
 800c6ca:	2237      	movs	r2, #55	; 0x37
 800c6cc:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800c6ce:	4b98      	ldr	r3, [pc, #608]	; (800c930 <interfaceSelectLayout+0x35c>)
 800c6d0:	2250      	movs	r2, #80	; 0x50
 800c6d2:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800c6d4:	4b97      	ldr	r3, [pc, #604]	; (800c934 <interfaceSelectLayout+0x360>)
 800c6d6:	2214      	movs	r2, #20
 800c6d8:	701a      	strb	r2, [r3, #0]

		chronoDecimalsPointerLength = 20;
 800c6da:	4b97      	ldr	r3, [pc, #604]	; (800c938 <interfaceSelectLayout+0x364>)
 800c6dc:	2214      	movs	r2, #20
 800c6de:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800c6e0:	4b96      	ldr	r3, [pc, #600]	; (800c93c <interfaceSelectLayout+0x368>)
 800c6e2:	2214      	movs	r2, #20
 800c6e4:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800c6e6:	4b96      	ldr	r3, [pc, #600]	; (800c940 <interfaceSelectLayout+0x36c>)
 800c6e8:	2250      	movs	r2, #80	; 0x50
 800c6ea:	701a      	strb	r2, [r3, #0]

		batteryStatePointerLength = 35;
 800c6ec:	4b95      	ldr	r3, [pc, #596]	; (800c944 <interfaceSelectLayout+0x370>)
 800c6ee:	2223      	movs	r2, #35	; 0x23
 800c6f0:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800c6f2:	4b95      	ldr	r3, [pc, #596]	; (800c948 <interfaceSelectLayout+0x374>)
 800c6f4:	2264      	movs	r2, #100	; 0x64
 800c6f6:	701a      	strb	r2, [r3, #0]

		compassPointerLength = 18;
 800c6f8:	4b94      	ldr	r3, [pc, #592]	; (800c94c <interfaceSelectLayout+0x378>)
 800c6fa:	2212      	movs	r2, #18
 800c6fc:	701a      	strb	r2, [r3, #0]

		//index lengths
		secondsIndexLength = 4;
 800c6fe:	4b94      	ldr	r3, [pc, #592]	; (800c950 <interfaceSelectLayout+0x37c>)
 800c700:	2204      	movs	r2, #4
 800c702:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800c704:	4b93      	ldr	r3, [pc, #588]	; (800c954 <interfaceSelectLayout+0x380>)
 800c706:	2202      	movs	r2, #2
 800c708:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800c70a:	4b93      	ldr	r3, [pc, #588]	; (800c958 <interfaceSelectLayout+0x384>)
 800c70c:	2204      	movs	r2, #4
 800c70e:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800c710:	4b92      	ldr	r3, [pc, #584]	; (800c95c <interfaceSelectLayout+0x388>)
 800c712:	220a      	movs	r2, #10
 800c714:	701a      	strb	r2, [r3, #0]

		batteryStateIndexLength = 15;
 800c716:	4b92      	ldr	r3, [pc, #584]	; (800c960 <interfaceSelectLayout+0x38c>)
 800c718:	220f      	movs	r2, #15
 800c71a:	701a      	strb	r2, [r3, #0]

		//pointer shifts
		batteryPointerShift = 20;
 800c71c:	4b91      	ldr	r3, [pc, #580]	; (800c964 <interfaceSelectLayout+0x390>)
 800c71e:	2214      	movs	r2, #20
 800c720:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800c722:	4b91      	ldr	r3, [pc, #580]	; (800c968 <interfaceSelectLayout+0x394>)
 800c724:	2255      	movs	r2, #85	; 0x55
 800c726:	701a      	strb	r2, [r3, #0]

		//moon Phase
		moonPhaseX = 100;
 800c728:	4b90      	ldr	r3, [pc, #576]	; (800c96c <interfaceSelectLayout+0x398>)
 800c72a:	2264      	movs	r2, #100	; 0x64
 800c72c:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800c72e:	4b90      	ldr	r3, [pc, #576]	; (800c970 <interfaceSelectLayout+0x39c>)
 800c730:	2232      	movs	r2, #50	; 0x32
 800c732:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 15;
 800c734:	4b8f      	ldr	r3, [pc, #572]	; (800c974 <interfaceSelectLayout+0x3a0>)
 800c736:	220f      	movs	r2, #15
 800c738:	701a      	strb	r2, [r3, #0]
		//pointer shifts
		batteryPointerShift = 20;
		pressurePointerShift = 85;
	}

}
 800c73a:	e384      	b.n	800ce46 <interfaceSelectLayout+0x872>
	else if (l == 2) { //navi
 800c73c:	1dfb      	adds	r3, r7, #7
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d000      	beq.n	800c746 <interfaceSelectLayout+0x172>
 800c744:	e118      	b.n	800c978 <interfaceSelectLayout+0x3a4>
		showBarometer = 1;
 800c746:	4b54      	ldr	r3, [pc, #336]	; (800c898 <interfaceSelectLayout+0x2c4>)
 800c748:	2201      	movs	r2, #1
 800c74a:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800c74c:	4b53      	ldr	r3, [pc, #332]	; (800c89c <interfaceSelectLayout+0x2c8>)
 800c74e:	2201      	movs	r2, #1
 800c750:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800c752:	4b53      	ldr	r3, [pc, #332]	; (800c8a0 <interfaceSelectLayout+0x2cc>)
 800c754:	2201      	movs	r2, #1
 800c756:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c758:	4b52      	ldr	r3, [pc, #328]	; (800c8a4 <interfaceSelectLayout+0x2d0>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 1;
 800c75e:	4b52      	ldr	r3, [pc, #328]	; (800c8a8 <interfaceSelectLayout+0x2d4>)
 800c760:	2201      	movs	r2, #1
 800c762:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c764:	4b51      	ldr	r3, [pc, #324]	; (800c8ac <interfaceSelectLayout+0x2d8>)
 800c766:	2201      	movs	r2, #1
 800c768:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800c76a:	4b51      	ldr	r3, [pc, #324]	; (800c8b0 <interfaceSelectLayout+0x2dc>)
 800c76c:	2201      	movs	r2, #1
 800c76e:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c770:	4b50      	ldr	r3, [pc, #320]	; (800c8b4 <interfaceSelectLayout+0x2e0>)
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800c776:	4b50      	ldr	r3, [pc, #320]	; (800c8b8 <interfaceSelectLayout+0x2e4>)
 800c778:	2201      	movs	r2, #1
 800c77a:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800c77c:	4b4f      	ldr	r3, [pc, #316]	; (800c8bc <interfaceSelectLayout+0x2e8>)
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c782:	4b4f      	ldr	r3, [pc, #316]	; (800c8c0 <interfaceSelectLayout+0x2ec>)
 800c784:	2200      	movs	r2, #0
 800c786:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800c788:	4b4e      	ldr	r3, [pc, #312]	; (800c8c4 <interfaceSelectLayout+0x2f0>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c78e:	4b4e      	ldr	r3, [pc, #312]	; (800c8c8 <interfaceSelectLayout+0x2f4>)
 800c790:	2201      	movs	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800c794:	4b4d      	ldr	r3, [pc, #308]	; (800c8cc <interfaceSelectLayout+0x2f8>)
 800c796:	2226      	movs	r2, #38	; 0x26
 800c798:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800c79a:	4b4d      	ldr	r3, [pc, #308]	; (800c8d0 <interfaceSelectLayout+0x2fc>)
 800c79c:	222c      	movs	r2, #44	; 0x2c
 800c79e:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800c7a0:	4b4c      	ldr	r3, [pc, #304]	; (800c8d4 <interfaceSelectLayout+0x300>)
 800c7a2:	2282      	movs	r2, #130	; 0x82
 800c7a4:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c7a6:	4b4c      	ldr	r3, [pc, #304]	; (800c8d8 <interfaceSelectLayout+0x304>)
 800c7a8:	224b      	movs	r2, #75	; 0x4b
 800c7aa:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800c7ac:	4b4b      	ldr	r3, [pc, #300]	; (800c8dc <interfaceSelectLayout+0x308>)
 800c7ae:	2211      	movs	r2, #17
 800c7b0:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c7b2:	4b4b      	ldr	r3, [pc, #300]	; (800c8e0 <interfaceSelectLayout+0x30c>)
 800c7b4:	2232      	movs	r2, #50	; 0x32
 800c7b6:	701a      	strb	r2, [r3, #0]
		compassX = 55;
 800c7b8:	4b4a      	ldr	r3, [pc, #296]	; (800c8e4 <interfaceSelectLayout+0x310>)
 800c7ba:	2237      	movs	r2, #55	; 0x37
 800c7bc:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800c7be:	4b4a      	ldr	r3, [pc, #296]	; (800c8e8 <interfaceSelectLayout+0x314>)
 800c7c0:	2264      	movs	r2, #100	; 0x64
 800c7c2:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800c7c4:	4b49      	ldr	r3, [pc, #292]	; (800c8ec <interfaceSelectLayout+0x318>)
 800c7c6:	2299      	movs	r2, #153	; 0x99
 800c7c8:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c7ca:	4b49      	ldr	r3, [pc, #292]	; (800c8f0 <interfaceSelectLayout+0x31c>)
 800c7cc:	225f      	movs	r2, #95	; 0x5f
 800c7ce:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800c7d0:	4b48      	ldr	r3, [pc, #288]	; (800c8f4 <interfaceSelectLayout+0x320>)
 800c7d2:	2287      	movs	r2, #135	; 0x87
 800c7d4:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800c7d6:	4b48      	ldr	r3, [pc, #288]	; (800c8f8 <interfaceSelectLayout+0x324>)
 800c7d8:	2287      	movs	r2, #135	; 0x87
 800c7da:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800c7dc:	4b47      	ldr	r3, [pc, #284]	; (800c8fc <interfaceSelectLayout+0x328>)
 800c7de:	2202      	movs	r2, #2
 800c7e0:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800c7e2:	4b47      	ldr	r3, [pc, #284]	; (800c900 <interfaceSelectLayout+0x32c>)
 800c7e4:	2264      	movs	r2, #100	; 0x64
 800c7e6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800c7e8:	4b46      	ldr	r3, [pc, #280]	; (800c904 <interfaceSelectLayout+0x330>)
 800c7ea:	2232      	movs	r2, #50	; 0x32
 800c7ec:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800c7ee:	4b46      	ldr	r3, [pc, #280]	; (800c908 <interfaceSelectLayout+0x334>)
 800c7f0:	2264      	movs	r2, #100	; 0x64
 800c7f2:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800c7f4:	4b45      	ldr	r3, [pc, #276]	; (800c90c <interfaceSelectLayout+0x338>)
 800c7f6:	2296      	movs	r2, #150	; 0x96
 800c7f8:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800c7fa:	4b45      	ldr	r3, [pc, #276]	; (800c910 <interfaceSelectLayout+0x33c>)
 800c7fc:	2264      	movs	r2, #100	; 0x64
 800c7fe:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800c800:	4b44      	ldr	r3, [pc, #272]	; (800c914 <interfaceSelectLayout+0x340>)
 800c802:	2296      	movs	r2, #150	; 0x96
 800c804:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800c806:	4b44      	ldr	r3, [pc, #272]	; (800c918 <interfaceSelectLayout+0x344>)
 800c808:	2264      	movs	r2, #100	; 0x64
 800c80a:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800c80c:	4b43      	ldr	r3, [pc, #268]	; (800c91c <interfaceSelectLayout+0x348>)
 800c80e:	2264      	movs	r2, #100	; 0x64
 800c810:	701a      	strb	r2, [r3, #0]
		compassBoardRadius = 25;
 800c812:	4b43      	ldr	r3, [pc, #268]	; (800c920 <interfaceSelectLayout+0x34c>)
 800c814:	2219      	movs	r2, #25
 800c816:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800c818:	4b42      	ldr	r3, [pc, #264]	; (800c924 <interfaceSelectLayout+0x350>)
 800c81a:	2261      	movs	r2, #97	; 0x61
 800c81c:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800c81e:	4b42      	ldr	r3, [pc, #264]	; (800c928 <interfaceSelectLayout+0x354>)
 800c820:	221c      	movs	r2, #28
 800c822:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800c824:	4b41      	ldr	r3, [pc, #260]	; (800c92c <interfaceSelectLayout+0x358>)
 800c826:	2237      	movs	r2, #55	; 0x37
 800c828:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800c82a:	4b41      	ldr	r3, [pc, #260]	; (800c930 <interfaceSelectLayout+0x35c>)
 800c82c:	2250      	movs	r2, #80	; 0x50
 800c82e:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800c830:	4b40      	ldr	r3, [pc, #256]	; (800c934 <interfaceSelectLayout+0x360>)
 800c832:	2214      	movs	r2, #20
 800c834:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800c836:	4b40      	ldr	r3, [pc, #256]	; (800c938 <interfaceSelectLayout+0x364>)
 800c838:	2214      	movs	r2, #20
 800c83a:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800c83c:	4b3f      	ldr	r3, [pc, #252]	; (800c93c <interfaceSelectLayout+0x368>)
 800c83e:	2214      	movs	r2, #20
 800c840:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800c842:	4b3f      	ldr	r3, [pc, #252]	; (800c940 <interfaceSelectLayout+0x36c>)
 800c844:	2250      	movs	r2, #80	; 0x50
 800c846:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800c848:	4b3e      	ldr	r3, [pc, #248]	; (800c944 <interfaceSelectLayout+0x370>)
 800c84a:	2223      	movs	r2, #35	; 0x23
 800c84c:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800c84e:	4b3e      	ldr	r3, [pc, #248]	; (800c948 <interfaceSelectLayout+0x374>)
 800c850:	2264      	movs	r2, #100	; 0x64
 800c852:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 18;
 800c854:	4b3d      	ldr	r3, [pc, #244]	; (800c94c <interfaceSelectLayout+0x378>)
 800c856:	2212      	movs	r2, #18
 800c858:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800c85a:	4b3d      	ldr	r3, [pc, #244]	; (800c950 <interfaceSelectLayout+0x37c>)
 800c85c:	2204      	movs	r2, #4
 800c85e:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800c860:	4b3c      	ldr	r3, [pc, #240]	; (800c954 <interfaceSelectLayout+0x380>)
 800c862:	2202      	movs	r2, #2
 800c864:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800c866:	4b3c      	ldr	r3, [pc, #240]	; (800c958 <interfaceSelectLayout+0x384>)
 800c868:	2204      	movs	r2, #4
 800c86a:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800c86c:	4b3b      	ldr	r3, [pc, #236]	; (800c95c <interfaceSelectLayout+0x388>)
 800c86e:	220a      	movs	r2, #10
 800c870:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800c872:	4b3b      	ldr	r3, [pc, #236]	; (800c960 <interfaceSelectLayout+0x38c>)
 800c874:	220f      	movs	r2, #15
 800c876:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800c878:	4b3a      	ldr	r3, [pc, #232]	; (800c964 <interfaceSelectLayout+0x390>)
 800c87a:	2214      	movs	r2, #20
 800c87c:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800c87e:	4b3a      	ldr	r3, [pc, #232]	; (800c968 <interfaceSelectLayout+0x394>)
 800c880:	2255      	movs	r2, #85	; 0x55
 800c882:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800c884:	4b39      	ldr	r3, [pc, #228]	; (800c96c <interfaceSelectLayout+0x398>)
 800c886:	2296      	movs	r2, #150	; 0x96
 800c888:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800c88a:	4b39      	ldr	r3, [pc, #228]	; (800c970 <interfaceSelectLayout+0x39c>)
 800c88c:	2232      	movs	r2, #50	; 0x32
 800c88e:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800c890:	4b38      	ldr	r3, [pc, #224]	; (800c974 <interfaceSelectLayout+0x3a0>)
 800c892:	220a      	movs	r2, #10
 800c894:	701a      	strb	r2, [r3, #0]
}
 800c896:	e2d6      	b.n	800ce46 <interfaceSelectLayout+0x872>
 800c898:	20000215 	.word	0x20000215
 800c89c:	200003b2 	.word	0x200003b2
 800c8a0:	200003ac 	.word	0x200003ac
 800c8a4:	20000614 	.word	0x20000614
 800c8a8:	20000208 	.word	0x20000208
 800c8ac:	20000212 	.word	0x20000212
 800c8b0:	20000642 	.word	0x20000642
 800c8b4:	200001ff 	.word	0x200001ff
 800c8b8:	20000697 	.word	0x20000697
 800c8bc:	200006fe 	.word	0x200006fe
 800c8c0:	200006e9 	.word	0x200006e9
 800c8c4:	200003b8 	.word	0x200003b8
 800c8c8:	20000619 	.word	0x20000619
 800c8cc:	2000062d 	.word	0x2000062d
 800c8d0:	2000036c 	.word	0x2000036c
 800c8d4:	2000070a 	.word	0x2000070a
 800c8d8:	20000442 	.word	0x20000442
 800c8dc:	200003bc 	.word	0x200003bc
 800c8e0:	20000216 	.word	0x20000216
 800c8e4:	200006e8 	.word	0x200006e8
 800c8e8:	20000450 	.word	0x20000450
 800c8ec:	200006fa 	.word	0x200006fa
 800c8f0:	20000268 	.word	0x20000268
 800c8f4:	2000069f 	.word	0x2000069f
 800c8f8:	20000710 	.word	0x20000710
 800c8fc:	20000211 	.word	0x20000211
 800c900:	20000645 	.word	0x20000645
 800c904:	20000646 	.word	0x20000646
 800c908:	200006f4 	.word	0x200006f4
 800c90c:	200006b4 	.word	0x200006b4
 800c910:	200006ea 	.word	0x200006ea
 800c914:	2000037b 	.word	0x2000037b
 800c918:	2000044b 	.word	0x2000044b
 800c91c:	20000209 	.word	0x20000209
 800c920:	20000640 	.word	0x20000640
 800c924:	20000628 	.word	0x20000628
 800c928:	200001f0 	.word	0x200001f0
 800c92c:	20000213 	.word	0x20000213
 800c930:	20000696 	.word	0x20000696
 800c934:	20000695 	.word	0x20000695
 800c938:	20000700 	.word	0x20000700
 800c93c:	20000210 	.word	0x20000210
 800c940:	200003b3 	.word	0x200003b3
 800c944:	200004c0 	.word	0x200004c0
 800c948:	200006bc 	.word	0x200006bc
 800c94c:	2000037a 	.word	0x2000037a
 800c950:	200001fa 	.word	0x200001fa
 800c954:	200003af 	.word	0x200003af
 800c958:	2000061a 	.word	0x2000061a
 800c95c:	2000043e 	.word	0x2000043e
 800c960:	20000644 	.word	0x20000644
 800c964:	20000214 	.word	0x20000214
 800c968:	2000062c 	.word	0x2000062c
 800c96c:	200006ff 	.word	0x200006ff
 800c970:	200006a8 	.word	0x200006a8
 800c974:	20000218 	.word	0x20000218
	else if (l == 3) { //digital
 800c978:	1dfb      	adds	r3, r7, #7
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d000      	beq.n	800c982 <interfaceSelectLayout+0x3ae>
 800c980:	e0a2      	b.n	800cac8 <interfaceSelectLayout+0x4f4>
		showBarometer = 0;
 800c982:	4ba4      	ldr	r3, [pc, #656]	; (800cc14 <interfaceSelectLayout+0x640>)
 800c984:	2200      	movs	r2, #0
 800c986:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800c988:	4ba3      	ldr	r3, [pc, #652]	; (800cc18 <interfaceSelectLayout+0x644>)
 800c98a:	2201      	movs	r2, #1
 800c98c:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800c98e:	4ba3      	ldr	r3, [pc, #652]	; (800cc1c <interfaceSelectLayout+0x648>)
 800c990:	2201      	movs	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c994:	4ba2      	ldr	r3, [pc, #648]	; (800cc20 <interfaceSelectLayout+0x64c>)
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800c99a:	4ba2      	ldr	r3, [pc, #648]	; (800cc24 <interfaceSelectLayout+0x650>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c9a0:	4ba1      	ldr	r3, [pc, #644]	; (800cc28 <interfaceSelectLayout+0x654>)
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800c9a6:	4ba1      	ldr	r3, [pc, #644]	; (800cc2c <interfaceSelectLayout+0x658>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c9ac:	4ba0      	ldr	r3, [pc, #640]	; (800cc30 <interfaceSelectLayout+0x65c>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800c9b2:	4ba0      	ldr	r3, [pc, #640]	; (800cc34 <interfaceSelectLayout+0x660>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 1;
 800c9b8:	4b9f      	ldr	r3, [pc, #636]	; (800cc38 <interfaceSelectLayout+0x664>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c9be:	4b9f      	ldr	r3, [pc, #636]	; (800cc3c <interfaceSelectLayout+0x668>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800c9c4:	4b9e      	ldr	r3, [pc, #632]	; (800cc40 <interfaceSelectLayout+0x66c>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c9ca:	4b9e      	ldr	r3, [pc, #632]	; (800cc44 <interfaceSelectLayout+0x670>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	701a      	strb	r2, [r3, #0]
		digitalX = 60;
 800c9d0:	4b9d      	ldr	r3, [pc, #628]	; (800cc48 <interfaceSelectLayout+0x674>)
 800c9d2:	223c      	movs	r2, #60	; 0x3c
 800c9d4:	701a      	strb	r2, [r3, #0]
		digitalY = 25;
 800c9d6:	4b9d      	ldr	r3, [pc, #628]	; (800cc4c <interfaceSelectLayout+0x678>)
 800c9d8:	2219      	movs	r2, #25
 800c9da:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800c9dc:	4b9c      	ldr	r3, [pc, #624]	; (800cc50 <interfaceSelectLayout+0x67c>)
 800c9de:	2255      	movs	r2, #85	; 0x55
 800c9e0:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800c9e2:	4b9c      	ldr	r3, [pc, #624]	; (800cc54 <interfaceSelectLayout+0x680>)
 800c9e4:	221e      	movs	r2, #30
 800c9e6:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800c9e8:	4b9b      	ldr	r3, [pc, #620]	; (800cc58 <interfaceSelectLayout+0x684>)
 800c9ea:	2282      	movs	r2, #130	; 0x82
 800c9ec:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c9ee:	4b9b      	ldr	r3, [pc, #620]	; (800cc5c <interfaceSelectLayout+0x688>)
 800c9f0:	224b      	movs	r2, #75	; 0x4b
 800c9f2:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800c9f4:	4b9a      	ldr	r3, [pc, #616]	; (800cc60 <interfaceSelectLayout+0x68c>)
 800c9f6:	2211      	movs	r2, #17
 800c9f8:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c9fa:	4b9a      	ldr	r3, [pc, #616]	; (800cc64 <interfaceSelectLayout+0x690>)
 800c9fc:	2232      	movs	r2, #50	; 0x32
 800c9fe:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800ca00:	4b99      	ldr	r3, [pc, #612]	; (800cc68 <interfaceSelectLayout+0x694>)
 800ca02:	221e      	movs	r2, #30
 800ca04:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800ca06:	4b99      	ldr	r3, [pc, #612]	; (800cc6c <interfaceSelectLayout+0x698>)
 800ca08:	224e      	movs	r2, #78	; 0x4e
 800ca0a:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800ca0c:	4b98      	ldr	r3, [pc, #608]	; (800cc70 <interfaceSelectLayout+0x69c>)
 800ca0e:	2299      	movs	r2, #153	; 0x99
 800ca10:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800ca12:	4b98      	ldr	r3, [pc, #608]	; (800cc74 <interfaceSelectLayout+0x6a0>)
 800ca14:	225f      	movs	r2, #95	; 0x5f
 800ca16:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800ca18:	4b97      	ldr	r3, [pc, #604]	; (800cc78 <interfaceSelectLayout+0x6a4>)
 800ca1a:	2287      	movs	r2, #135	; 0x87
 800ca1c:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800ca1e:	4b97      	ldr	r3, [pc, #604]	; (800cc7c <interfaceSelectLayout+0x6a8>)
 800ca20:	2287      	movs	r2, #135	; 0x87
 800ca22:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800ca24:	4b96      	ldr	r3, [pc, #600]	; (800cc80 <interfaceSelectLayout+0x6ac>)
 800ca26:	2202      	movs	r2, #2
 800ca28:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800ca2a:	4b96      	ldr	r3, [pc, #600]	; (800cc84 <interfaceSelectLayout+0x6b0>)
 800ca2c:	2232      	movs	r2, #50	; 0x32
 800ca2e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800ca30:	4b95      	ldr	r3, [pc, #596]	; (800cc88 <interfaceSelectLayout+0x6b4>)
 800ca32:	2264      	movs	r2, #100	; 0x64
 800ca34:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800ca36:	4b95      	ldr	r3, [pc, #596]	; (800cc8c <interfaceSelectLayout+0x6b8>)
 800ca38:	2264      	movs	r2, #100	; 0x64
 800ca3a:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800ca3c:	4b94      	ldr	r3, [pc, #592]	; (800cc90 <interfaceSelectLayout+0x6bc>)
 800ca3e:	2296      	movs	r2, #150	; 0x96
 800ca40:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800ca42:	4b94      	ldr	r3, [pc, #592]	; (800cc94 <interfaceSelectLayout+0x6c0>)
 800ca44:	2264      	movs	r2, #100	; 0x64
 800ca46:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800ca48:	4b93      	ldr	r3, [pc, #588]	; (800cc98 <interfaceSelectLayout+0x6c4>)
 800ca4a:	2296      	movs	r2, #150	; 0x96
 800ca4c:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800ca4e:	4b93      	ldr	r3, [pc, #588]	; (800cc9c <interfaceSelectLayout+0x6c8>)
 800ca50:	2264      	movs	r2, #100	; 0x64
 800ca52:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800ca54:	4b92      	ldr	r3, [pc, #584]	; (800cca0 <interfaceSelectLayout+0x6cc>)
 800ca56:	2264      	movs	r2, #100	; 0x64
 800ca58:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800ca5a:	4b92      	ldr	r3, [pc, #584]	; (800cca4 <interfaceSelectLayout+0x6d0>)
 800ca5c:	2261      	movs	r2, #97	; 0x61
 800ca5e:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800ca60:	4b91      	ldr	r3, [pc, #580]	; (800cca8 <interfaceSelectLayout+0x6d4>)
 800ca62:	221c      	movs	r2, #28
 800ca64:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800ca66:	4b91      	ldr	r3, [pc, #580]	; (800ccac <interfaceSelectLayout+0x6d8>)
 800ca68:	2237      	movs	r2, #55	; 0x37
 800ca6a:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800ca6c:	4b90      	ldr	r3, [pc, #576]	; (800ccb0 <interfaceSelectLayout+0x6dc>)
 800ca6e:	2250      	movs	r2, #80	; 0x50
 800ca70:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800ca72:	4b90      	ldr	r3, [pc, #576]	; (800ccb4 <interfaceSelectLayout+0x6e0>)
 800ca74:	2214      	movs	r2, #20
 800ca76:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800ca78:	4b8f      	ldr	r3, [pc, #572]	; (800ccb8 <interfaceSelectLayout+0x6e4>)
 800ca7a:	2214      	movs	r2, #20
 800ca7c:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800ca7e:	4b8f      	ldr	r3, [pc, #572]	; (800ccbc <interfaceSelectLayout+0x6e8>)
 800ca80:	2214      	movs	r2, #20
 800ca82:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800ca84:	4b8e      	ldr	r3, [pc, #568]	; (800ccc0 <interfaceSelectLayout+0x6ec>)
 800ca86:	2250      	movs	r2, #80	; 0x50
 800ca88:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800ca8a:	4b8e      	ldr	r3, [pc, #568]	; (800ccc4 <interfaceSelectLayout+0x6f0>)
 800ca8c:	2223      	movs	r2, #35	; 0x23
 800ca8e:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800ca90:	4b8d      	ldr	r3, [pc, #564]	; (800ccc8 <interfaceSelectLayout+0x6f4>)
 800ca92:	2264      	movs	r2, #100	; 0x64
 800ca94:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800ca96:	4b8d      	ldr	r3, [pc, #564]	; (800cccc <interfaceSelectLayout+0x6f8>)
 800ca98:	2214      	movs	r2, #20
 800ca9a:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800ca9c:	4b8c      	ldr	r3, [pc, #560]	; (800ccd0 <interfaceSelectLayout+0x6fc>)
 800ca9e:	2204      	movs	r2, #4
 800caa0:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800caa2:	4b8c      	ldr	r3, [pc, #560]	; (800ccd4 <interfaceSelectLayout+0x700>)
 800caa4:	2202      	movs	r2, #2
 800caa6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800caa8:	4b8b      	ldr	r3, [pc, #556]	; (800ccd8 <interfaceSelectLayout+0x704>)
 800caaa:	2204      	movs	r2, #4
 800caac:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800caae:	4b8b      	ldr	r3, [pc, #556]	; (800ccdc <interfaceSelectLayout+0x708>)
 800cab0:	220a      	movs	r2, #10
 800cab2:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800cab4:	4b8a      	ldr	r3, [pc, #552]	; (800cce0 <interfaceSelectLayout+0x70c>)
 800cab6:	220f      	movs	r2, #15
 800cab8:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800caba:	4b8a      	ldr	r3, [pc, #552]	; (800cce4 <interfaceSelectLayout+0x710>)
 800cabc:	2214      	movs	r2, #20
 800cabe:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800cac0:	4b89      	ldr	r3, [pc, #548]	; (800cce8 <interfaceSelectLayout+0x714>)
 800cac2:	2255      	movs	r2, #85	; 0x55
 800cac4:	701a      	strb	r2, [r3, #0]
}
 800cac6:	e1be      	b.n	800ce46 <interfaceSelectLayout+0x872>
	else if (l == 4) { //seconds
 800cac8:	1dfb      	adds	r3, r7, #7
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d000      	beq.n	800cad2 <interfaceSelectLayout+0x4fe>
 800cad0:	e112      	b.n	800ccf8 <interfaceSelectLayout+0x724>
		showBarometer = 1;
 800cad2:	4b50      	ldr	r3, [pc, #320]	; (800cc14 <interfaceSelectLayout+0x640>)
 800cad4:	2201      	movs	r2, #1
 800cad6:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800cad8:	4b4f      	ldr	r3, [pc, #316]	; (800cc18 <interfaceSelectLayout+0x644>)
 800cada:	2201      	movs	r2, #1
 800cadc:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800cade:	4b4f      	ldr	r3, [pc, #316]	; (800cc1c <interfaceSelectLayout+0x648>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800cae4:	4b4e      	ldr	r3, [pc, #312]	; (800cc20 <interfaceSelectLayout+0x64c>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800caea:	4b4e      	ldr	r3, [pc, #312]	; (800cc24 <interfaceSelectLayout+0x650>)
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800caf0:	4b4d      	ldr	r3, [pc, #308]	; (800cc28 <interfaceSelectLayout+0x654>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800caf6:	4b4d      	ldr	r3, [pc, #308]	; (800cc2c <interfaceSelectLayout+0x658>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	701a      	strb	r2, [r3, #0]
		showSeconds = 1;
 800cafc:	4b4c      	ldr	r3, [pc, #304]	; (800cc30 <interfaceSelectLayout+0x65c>)
 800cafe:	2201      	movs	r2, #1
 800cb00:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800cb02:	4b4c      	ldr	r3, [pc, #304]	; (800cc34 <interfaceSelectLayout+0x660>)
 800cb04:	2201      	movs	r2, #1
 800cb06:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800cb08:	4b4b      	ldr	r3, [pc, #300]	; (800cc38 <interfaceSelectLayout+0x664>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800cb0e:	4b4b      	ldr	r3, [pc, #300]	; (800cc3c <interfaceSelectLayout+0x668>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800cb14:	4b4a      	ldr	r3, [pc, #296]	; (800cc40 <interfaceSelectLayout+0x66c>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800cb1a:	4b4a      	ldr	r3, [pc, #296]	; (800cc44 <interfaceSelectLayout+0x670>)
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800cb20:	4b4b      	ldr	r3, [pc, #300]	; (800cc50 <interfaceSelectLayout+0x67c>)
 800cb22:	2226      	movs	r2, #38	; 0x26
 800cb24:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800cb26:	4b4b      	ldr	r3, [pc, #300]	; (800cc54 <interfaceSelectLayout+0x680>)
 800cb28:	222c      	movs	r2, #44	; 0x2c
 800cb2a:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800cb2c:	4b4a      	ldr	r3, [pc, #296]	; (800cc58 <interfaceSelectLayout+0x684>)
 800cb2e:	2282      	movs	r2, #130	; 0x82
 800cb30:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800cb32:	4b4a      	ldr	r3, [pc, #296]	; (800cc5c <interfaceSelectLayout+0x688>)
 800cb34:	224b      	movs	r2, #75	; 0x4b
 800cb36:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800cb38:	4b49      	ldr	r3, [pc, #292]	; (800cc60 <interfaceSelectLayout+0x68c>)
 800cb3a:	2211      	movs	r2, #17
 800cb3c:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800cb3e:	4b49      	ldr	r3, [pc, #292]	; (800cc64 <interfaceSelectLayout+0x690>)
 800cb40:	2232      	movs	r2, #50	; 0x32
 800cb42:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800cb44:	4b4a      	ldr	r3, [pc, #296]	; (800cc70 <interfaceSelectLayout+0x69c>)
 800cb46:	2299      	movs	r2, #153	; 0x99
 800cb48:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800cb4a:	4b4a      	ldr	r3, [pc, #296]	; (800cc74 <interfaceSelectLayout+0x6a0>)
 800cb4c:	225f      	movs	r2, #95	; 0x5f
 800cb4e:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800cb50:	4b49      	ldr	r3, [pc, #292]	; (800cc78 <interfaceSelectLayout+0x6a4>)
 800cb52:	2287      	movs	r2, #135	; 0x87
 800cb54:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800cb56:	4b49      	ldr	r3, [pc, #292]	; (800cc7c <interfaceSelectLayout+0x6a8>)
 800cb58:	2287      	movs	r2, #135	; 0x87
 800cb5a:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800cb5c:	4b48      	ldr	r3, [pc, #288]	; (800cc80 <interfaceSelectLayout+0x6ac>)
 800cb5e:	2202      	movs	r2, #2
 800cb60:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800cb62:	4b48      	ldr	r3, [pc, #288]	; (800cc84 <interfaceSelectLayout+0x6b0>)
 800cb64:	2264      	movs	r2, #100	; 0x64
 800cb66:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800cb68:	4b47      	ldr	r3, [pc, #284]	; (800cc88 <interfaceSelectLayout+0x6b4>)
 800cb6a:	2232      	movs	r2, #50	; 0x32
 800cb6c:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 55;
 800cb6e:	4b47      	ldr	r3, [pc, #284]	; (800cc8c <interfaceSelectLayout+0x6b8>)
 800cb70:	2237      	movs	r2, #55	; 0x37
 800cb72:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 100;
 800cb74:	4b46      	ldr	r3, [pc, #280]	; (800cc90 <interfaceSelectLayout+0x6bc>)
 800cb76:	2264      	movs	r2, #100	; 0x64
 800cb78:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800cb7a:	4b46      	ldr	r3, [pc, #280]	; (800cc94 <interfaceSelectLayout+0x6c0>)
 800cb7c:	2264      	movs	r2, #100	; 0x64
 800cb7e:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800cb80:	4b45      	ldr	r3, [pc, #276]	; (800cc98 <interfaceSelectLayout+0x6c4>)
 800cb82:	2296      	movs	r2, #150	; 0x96
 800cb84:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800cb86:	4b45      	ldr	r3, [pc, #276]	; (800cc9c <interfaceSelectLayout+0x6c8>)
 800cb88:	2264      	movs	r2, #100	; 0x64
 800cb8a:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800cb8c:	4b44      	ldr	r3, [pc, #272]	; (800cca0 <interfaceSelectLayout+0x6cc>)
 800cb8e:	2264      	movs	r2, #100	; 0x64
 800cb90:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800cb92:	4b44      	ldr	r3, [pc, #272]	; (800cca4 <interfaceSelectLayout+0x6d0>)
 800cb94:	2261      	movs	r2, #97	; 0x61
 800cb96:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800cb98:	4b43      	ldr	r3, [pc, #268]	; (800cca8 <interfaceSelectLayout+0x6d4>)
 800cb9a:	221c      	movs	r2, #28
 800cb9c:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800cb9e:	4b43      	ldr	r3, [pc, #268]	; (800ccac <interfaceSelectLayout+0x6d8>)
 800cba0:	2237      	movs	r2, #55	; 0x37
 800cba2:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800cba4:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <interfaceSelectLayout+0x6dc>)
 800cba6:	2250      	movs	r2, #80	; 0x50
 800cba8:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800cbaa:	4b42      	ldr	r3, [pc, #264]	; (800ccb4 <interfaceSelectLayout+0x6e0>)
 800cbac:	2214      	movs	r2, #20
 800cbae:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800cbb0:	4b41      	ldr	r3, [pc, #260]	; (800ccb8 <interfaceSelectLayout+0x6e4>)
 800cbb2:	2214      	movs	r2, #20
 800cbb4:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800cbb6:	4b41      	ldr	r3, [pc, #260]	; (800ccbc <interfaceSelectLayout+0x6e8>)
 800cbb8:	2214      	movs	r2, #20
 800cbba:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800cbbc:	4b40      	ldr	r3, [pc, #256]	; (800ccc0 <interfaceSelectLayout+0x6ec>)
 800cbbe:	2250      	movs	r2, #80	; 0x50
 800cbc0:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800cbc2:	4b40      	ldr	r3, [pc, #256]	; (800ccc4 <interfaceSelectLayout+0x6f0>)
 800cbc4:	2223      	movs	r2, #35	; 0x23
 800cbc6:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800cbc8:	4b3f      	ldr	r3, [pc, #252]	; (800ccc8 <interfaceSelectLayout+0x6f4>)
 800cbca:	2264      	movs	r2, #100	; 0x64
 800cbcc:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800cbce:	4b3f      	ldr	r3, [pc, #252]	; (800cccc <interfaceSelectLayout+0x6f8>)
 800cbd0:	2214      	movs	r2, #20
 800cbd2:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800cbd4:	4b3e      	ldr	r3, [pc, #248]	; (800ccd0 <interfaceSelectLayout+0x6fc>)
 800cbd6:	2204      	movs	r2, #4
 800cbd8:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800cbda:	4b3e      	ldr	r3, [pc, #248]	; (800ccd4 <interfaceSelectLayout+0x700>)
 800cbdc:	2202      	movs	r2, #2
 800cbde:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800cbe0:	4b3d      	ldr	r3, [pc, #244]	; (800ccd8 <interfaceSelectLayout+0x704>)
 800cbe2:	2204      	movs	r2, #4
 800cbe4:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800cbe6:	4b3d      	ldr	r3, [pc, #244]	; (800ccdc <interfaceSelectLayout+0x708>)
 800cbe8:	220a      	movs	r2, #10
 800cbea:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800cbec:	4b3c      	ldr	r3, [pc, #240]	; (800cce0 <interfaceSelectLayout+0x70c>)
 800cbee:	220f      	movs	r2, #15
 800cbf0:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800cbf2:	4b3c      	ldr	r3, [pc, #240]	; (800cce4 <interfaceSelectLayout+0x710>)
 800cbf4:	2214      	movs	r2, #20
 800cbf6:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800cbf8:	4b3b      	ldr	r3, [pc, #236]	; (800cce8 <interfaceSelectLayout+0x714>)
 800cbfa:	2255      	movs	r2, #85	; 0x55
 800cbfc:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800cbfe:	4b3b      	ldr	r3, [pc, #236]	; (800ccec <interfaceSelectLayout+0x718>)
 800cc00:	2296      	movs	r2, #150	; 0x96
 800cc02:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800cc04:	4b3a      	ldr	r3, [pc, #232]	; (800ccf0 <interfaceSelectLayout+0x71c>)
 800cc06:	2232      	movs	r2, #50	; 0x32
 800cc08:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800cc0a:	4b3a      	ldr	r3, [pc, #232]	; (800ccf4 <interfaceSelectLayout+0x720>)
 800cc0c:	220a      	movs	r2, #10
 800cc0e:	701a      	strb	r2, [r3, #0]
}
 800cc10:	e119      	b.n	800ce46 <interfaceSelectLayout+0x872>
 800cc12:	46c0      	nop			; (mov r8, r8)
 800cc14:	20000215 	.word	0x20000215
 800cc18:	200003b2 	.word	0x200003b2
 800cc1c:	200003ac 	.word	0x200003ac
 800cc20:	20000614 	.word	0x20000614
 800cc24:	20000208 	.word	0x20000208
 800cc28:	20000212 	.word	0x20000212
 800cc2c:	20000642 	.word	0x20000642
 800cc30:	200001ff 	.word	0x200001ff
 800cc34:	20000697 	.word	0x20000697
 800cc38:	200006fe 	.word	0x200006fe
 800cc3c:	200006e9 	.word	0x200006e9
 800cc40:	200003b8 	.word	0x200003b8
 800cc44:	20000619 	.word	0x20000619
 800cc48:	20000641 	.word	0x20000641
 800cc4c:	200003ad 	.word	0x200003ad
 800cc50:	2000062d 	.word	0x2000062d
 800cc54:	2000036c 	.word	0x2000036c
 800cc58:	2000070a 	.word	0x2000070a
 800cc5c:	20000442 	.word	0x20000442
 800cc60:	200003bc 	.word	0x200003bc
 800cc64:	20000216 	.word	0x20000216
 800cc68:	200006e8 	.word	0x200006e8
 800cc6c:	20000450 	.word	0x20000450
 800cc70:	200006fa 	.word	0x200006fa
 800cc74:	20000268 	.word	0x20000268
 800cc78:	2000069f 	.word	0x2000069f
 800cc7c:	20000710 	.word	0x20000710
 800cc80:	20000211 	.word	0x20000211
 800cc84:	20000645 	.word	0x20000645
 800cc88:	20000646 	.word	0x20000646
 800cc8c:	200006f4 	.word	0x200006f4
 800cc90:	200006b4 	.word	0x200006b4
 800cc94:	200006ea 	.word	0x200006ea
 800cc98:	2000037b 	.word	0x2000037b
 800cc9c:	2000044b 	.word	0x2000044b
 800cca0:	20000209 	.word	0x20000209
 800cca4:	20000628 	.word	0x20000628
 800cca8:	200001f0 	.word	0x200001f0
 800ccac:	20000213 	.word	0x20000213
 800ccb0:	20000696 	.word	0x20000696
 800ccb4:	20000695 	.word	0x20000695
 800ccb8:	20000700 	.word	0x20000700
 800ccbc:	20000210 	.word	0x20000210
 800ccc0:	200003b3 	.word	0x200003b3
 800ccc4:	200004c0 	.word	0x200004c0
 800ccc8:	200006bc 	.word	0x200006bc
 800cccc:	2000037a 	.word	0x2000037a
 800ccd0:	200001fa 	.word	0x200001fa
 800ccd4:	200003af 	.word	0x200003af
 800ccd8:	2000061a 	.word	0x2000061a
 800ccdc:	2000043e 	.word	0x2000043e
 800cce0:	20000644 	.word	0x20000644
 800cce4:	20000214 	.word	0x20000214
 800cce8:	2000062c 	.word	0x2000062c
 800ccec:	200006ff 	.word	0x200006ff
 800ccf0:	200006a8 	.word	0x200006a8
 800ccf4:	20000218 	.word	0x20000218
	else if (l == 5) { //meter
 800ccf8:	1dfb      	adds	r3, r7, #7
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b05      	cmp	r3, #5
 800ccfe:	d000      	beq.n	800cd02 <interfaceSelectLayout+0x72e>
 800cd00:	e0a1      	b.n	800ce46 <interfaceSelectLayout+0x872>
		showBarometer = 0;
 800cd02:	4b53      	ldr	r3, [pc, #332]	; (800ce50 <interfaceSelectLayout+0x87c>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800cd08:	4b52      	ldr	r3, [pc, #328]	; (800ce54 <interfaceSelectLayout+0x880>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800cd0e:	4b52      	ldr	r3, [pc, #328]	; (800ce58 <interfaceSelectLayout+0x884>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800cd14:	4b51      	ldr	r3, [pc, #324]	; (800ce5c <interfaceSelectLayout+0x888>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800cd1a:	4b51      	ldr	r3, [pc, #324]	; (800ce60 <interfaceSelectLayout+0x88c>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	701a      	strb	r2, [r3, #0]
		showDate = 0;
 800cd20:	4b50      	ldr	r3, [pc, #320]	; (800ce64 <interfaceSelectLayout+0x890>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800cd26:	4b50      	ldr	r3, [pc, #320]	; (800ce68 <interfaceSelectLayout+0x894>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800cd2c:	4b4f      	ldr	r3, [pc, #316]	; (800ce6c <interfaceSelectLayout+0x898>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800cd32:	4b4f      	ldr	r3, [pc, #316]	; (800ce70 <interfaceSelectLayout+0x89c>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800cd38:	4b4e      	ldr	r3, [pc, #312]	; (800ce74 <interfaceSelectLayout+0x8a0>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	701a      	strb	r2, [r3, #0]
		showMeter = 1;
 800cd3e:	4b4e      	ldr	r3, [pc, #312]	; (800ce78 <interfaceSelectLayout+0x8a4>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800cd44:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <interfaceSelectLayout+0x8a8>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	701a      	strb	r2, [r3, #0]
		LPMode = 0;
 800cd4a:	4b4d      	ldr	r3, [pc, #308]	; (800ce80 <interfaceSelectLayout+0x8ac>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	701a      	strb	r2, [r3, #0]
		meterX = 59;
 800cd50:	4b4c      	ldr	r3, [pc, #304]	; (800ce84 <interfaceSelectLayout+0x8b0>)
 800cd52:	223b      	movs	r2, #59	; 0x3b
 800cd54:	701a      	strb	r2, [r3, #0]
		meterY = 20;
 800cd56:	4b4c      	ldr	r3, [pc, #304]	; (800ce88 <interfaceSelectLayout+0x8b4>)
 800cd58:	2214      	movs	r2, #20
 800cd5a:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800cd5c:	4b4b      	ldr	r3, [pc, #300]	; (800ce8c <interfaceSelectLayout+0x8b8>)
 800cd5e:	2255      	movs	r2, #85	; 0x55
 800cd60:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800cd62:	4b4b      	ldr	r3, [pc, #300]	; (800ce90 <interfaceSelectLayout+0x8bc>)
 800cd64:	221e      	movs	r2, #30
 800cd66:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800cd68:	4b4a      	ldr	r3, [pc, #296]	; (800ce94 <interfaceSelectLayout+0x8c0>)
 800cd6a:	2282      	movs	r2, #130	; 0x82
 800cd6c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800cd6e:	4b4a      	ldr	r3, [pc, #296]	; (800ce98 <interfaceSelectLayout+0x8c4>)
 800cd70:	224b      	movs	r2, #75	; 0x4b
 800cd72:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800cd74:	4b49      	ldr	r3, [pc, #292]	; (800ce9c <interfaceSelectLayout+0x8c8>)
 800cd76:	2211      	movs	r2, #17
 800cd78:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800cd7a:	4b49      	ldr	r3, [pc, #292]	; (800cea0 <interfaceSelectLayout+0x8cc>)
 800cd7c:	2232      	movs	r2, #50	; 0x32
 800cd7e:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800cd80:	4b48      	ldr	r3, [pc, #288]	; (800cea4 <interfaceSelectLayout+0x8d0>)
 800cd82:	221e      	movs	r2, #30
 800cd84:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800cd86:	4b48      	ldr	r3, [pc, #288]	; (800cea8 <interfaceSelectLayout+0x8d4>)
 800cd88:	224e      	movs	r2, #78	; 0x4e
 800cd8a:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800cd8c:	4b47      	ldr	r3, [pc, #284]	; (800ceac <interfaceSelectLayout+0x8d8>)
 800cd8e:	2299      	movs	r2, #153	; 0x99
 800cd90:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800cd92:	4b47      	ldr	r3, [pc, #284]	; (800ceb0 <interfaceSelectLayout+0x8dc>)
 800cd94:	225f      	movs	r2, #95	; 0x5f
 800cd96:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800cd98:	4b46      	ldr	r3, [pc, #280]	; (800ceb4 <interfaceSelectLayout+0x8e0>)
 800cd9a:	2287      	movs	r2, #135	; 0x87
 800cd9c:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800cd9e:	4b46      	ldr	r3, [pc, #280]	; (800ceb8 <interfaceSelectLayout+0x8e4>)
 800cda0:	2287      	movs	r2, #135	; 0x87
 800cda2:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800cda4:	4b45      	ldr	r3, [pc, #276]	; (800cebc <interfaceSelectLayout+0x8e8>)
 800cda6:	2202      	movs	r2, #2
 800cda8:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800cdaa:	4b45      	ldr	r3, [pc, #276]	; (800cec0 <interfaceSelectLayout+0x8ec>)
 800cdac:	2232      	movs	r2, #50	; 0x32
 800cdae:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800cdb0:	4b44      	ldr	r3, [pc, #272]	; (800cec4 <interfaceSelectLayout+0x8f0>)
 800cdb2:	2264      	movs	r2, #100	; 0x64
 800cdb4:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800cdb6:	4b44      	ldr	r3, [pc, #272]	; (800cec8 <interfaceSelectLayout+0x8f4>)
 800cdb8:	2264      	movs	r2, #100	; 0x64
 800cdba:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800cdbc:	4b43      	ldr	r3, [pc, #268]	; (800cecc <interfaceSelectLayout+0x8f8>)
 800cdbe:	2296      	movs	r2, #150	; 0x96
 800cdc0:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800cdc2:	4b43      	ldr	r3, [pc, #268]	; (800ced0 <interfaceSelectLayout+0x8fc>)
 800cdc4:	2264      	movs	r2, #100	; 0x64
 800cdc6:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800cdc8:	4b42      	ldr	r3, [pc, #264]	; (800ced4 <interfaceSelectLayout+0x900>)
 800cdca:	2296      	movs	r2, #150	; 0x96
 800cdcc:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800cdce:	4b42      	ldr	r3, [pc, #264]	; (800ced8 <interfaceSelectLayout+0x904>)
 800cdd0:	2264      	movs	r2, #100	; 0x64
 800cdd2:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800cdd4:	4b41      	ldr	r3, [pc, #260]	; (800cedc <interfaceSelectLayout+0x908>)
 800cdd6:	2264      	movs	r2, #100	; 0x64
 800cdd8:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800cdda:	4b41      	ldr	r3, [pc, #260]	; (800cee0 <interfaceSelectLayout+0x90c>)
 800cddc:	2261      	movs	r2, #97	; 0x61
 800cdde:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800cde0:	4b40      	ldr	r3, [pc, #256]	; (800cee4 <interfaceSelectLayout+0x910>)
 800cde2:	221c      	movs	r2, #28
 800cde4:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800cde6:	4b40      	ldr	r3, [pc, #256]	; (800cee8 <interfaceSelectLayout+0x914>)
 800cde8:	2237      	movs	r2, #55	; 0x37
 800cdea:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800cdec:	4b3f      	ldr	r3, [pc, #252]	; (800ceec <interfaceSelectLayout+0x918>)
 800cdee:	2250      	movs	r2, #80	; 0x50
 800cdf0:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800cdf2:	4b3f      	ldr	r3, [pc, #252]	; (800cef0 <interfaceSelectLayout+0x91c>)
 800cdf4:	2214      	movs	r2, #20
 800cdf6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800cdf8:	4b3e      	ldr	r3, [pc, #248]	; (800cef4 <interfaceSelectLayout+0x920>)
 800cdfa:	2214      	movs	r2, #20
 800cdfc:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800cdfe:	4b3e      	ldr	r3, [pc, #248]	; (800cef8 <interfaceSelectLayout+0x924>)
 800ce00:	2214      	movs	r2, #20
 800ce02:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800ce04:	4b3d      	ldr	r3, [pc, #244]	; (800cefc <interfaceSelectLayout+0x928>)
 800ce06:	2250      	movs	r2, #80	; 0x50
 800ce08:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800ce0a:	4b3d      	ldr	r3, [pc, #244]	; (800cf00 <interfaceSelectLayout+0x92c>)
 800ce0c:	2223      	movs	r2, #35	; 0x23
 800ce0e:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800ce10:	4b3c      	ldr	r3, [pc, #240]	; (800cf04 <interfaceSelectLayout+0x930>)
 800ce12:	2264      	movs	r2, #100	; 0x64
 800ce14:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800ce16:	4b3c      	ldr	r3, [pc, #240]	; (800cf08 <interfaceSelectLayout+0x934>)
 800ce18:	2214      	movs	r2, #20
 800ce1a:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800ce1c:	4b3b      	ldr	r3, [pc, #236]	; (800cf0c <interfaceSelectLayout+0x938>)
 800ce1e:	2204      	movs	r2, #4
 800ce20:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800ce22:	4b3b      	ldr	r3, [pc, #236]	; (800cf10 <interfaceSelectLayout+0x93c>)
 800ce24:	2202      	movs	r2, #2
 800ce26:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800ce28:	4b3a      	ldr	r3, [pc, #232]	; (800cf14 <interfaceSelectLayout+0x940>)
 800ce2a:	2204      	movs	r2, #4
 800ce2c:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800ce2e:	4b3a      	ldr	r3, [pc, #232]	; (800cf18 <interfaceSelectLayout+0x944>)
 800ce30:	220a      	movs	r2, #10
 800ce32:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800ce34:	4b39      	ldr	r3, [pc, #228]	; (800cf1c <interfaceSelectLayout+0x948>)
 800ce36:	220f      	movs	r2, #15
 800ce38:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800ce3a:	4b39      	ldr	r3, [pc, #228]	; (800cf20 <interfaceSelectLayout+0x94c>)
 800ce3c:	2214      	movs	r2, #20
 800ce3e:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800ce40:	4b38      	ldr	r3, [pc, #224]	; (800cf24 <interfaceSelectLayout+0x950>)
 800ce42:	2255      	movs	r2, #85	; 0x55
 800ce44:	701a      	strb	r2, [r3, #0]
}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	b002      	add	sp, #8
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	20000215 	.word	0x20000215
 800ce54:	200003b2 	.word	0x200003b2
 800ce58:	200003ac 	.word	0x200003ac
 800ce5c:	20000614 	.word	0x20000614
 800ce60:	20000208 	.word	0x20000208
 800ce64:	20000212 	.word	0x20000212
 800ce68:	20000642 	.word	0x20000642
 800ce6c:	200001ff 	.word	0x200001ff
 800ce70:	20000697 	.word	0x20000697
 800ce74:	200006fe 	.word	0x200006fe
 800ce78:	200006e9 	.word	0x200006e9
 800ce7c:	200003b8 	.word	0x200003b8
 800ce80:	20000619 	.word	0x20000619
 800ce84:	200003b0 	.word	0x200003b0
 800ce88:	200004bf 	.word	0x200004bf
 800ce8c:	2000062d 	.word	0x2000062d
 800ce90:	2000036c 	.word	0x2000036c
 800ce94:	2000070a 	.word	0x2000070a
 800ce98:	20000442 	.word	0x20000442
 800ce9c:	200003bc 	.word	0x200003bc
 800cea0:	20000216 	.word	0x20000216
 800cea4:	200006e8 	.word	0x200006e8
 800cea8:	20000450 	.word	0x20000450
 800ceac:	200006fa 	.word	0x200006fa
 800ceb0:	20000268 	.word	0x20000268
 800ceb4:	2000069f 	.word	0x2000069f
 800ceb8:	20000710 	.word	0x20000710
 800cebc:	20000211 	.word	0x20000211
 800cec0:	20000645 	.word	0x20000645
 800cec4:	20000646 	.word	0x20000646
 800cec8:	200006f4 	.word	0x200006f4
 800cecc:	200006b4 	.word	0x200006b4
 800ced0:	200006ea 	.word	0x200006ea
 800ced4:	2000037b 	.word	0x2000037b
 800ced8:	2000044b 	.word	0x2000044b
 800cedc:	20000209 	.word	0x20000209
 800cee0:	20000628 	.word	0x20000628
 800cee4:	200001f0 	.word	0x200001f0
 800cee8:	20000213 	.word	0x20000213
 800ceec:	20000696 	.word	0x20000696
 800cef0:	20000695 	.word	0x20000695
 800cef4:	20000700 	.word	0x20000700
 800cef8:	20000210 	.word	0x20000210
 800cefc:	200003b3 	.word	0x200003b3
 800cf00:	200004c0 	.word	0x200004c0
 800cf04:	200006bc 	.word	0x200006bc
 800cf08:	2000037a 	.word	0x2000037a
 800cf0c:	200001fa 	.word	0x200001fa
 800cf10:	200003af 	.word	0x200003af
 800cf14:	2000061a 	.word	0x2000061a
 800cf18:	2000043e 	.word	0x2000043e
 800cf1c:	20000644 	.word	0x20000644
 800cf20:	20000214 	.word	0x20000214
 800cf24:	2000062c 	.word	0x2000062c

0800cf28 <interfaceSelectColorScheme>:

void interfaceSelectColorScheme(uint8_t cs) {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	0002      	movs	r2, r0
 800cf30:	1dfb      	adds	r3, r7, #7
 800cf32:	701a      	strb	r2, [r3, #0]
	if (cs == COLOR_SCHEME_BLACK) {
 800cf34:	1dfb      	adds	r3, r7, #7
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d106      	bne.n	800cf4a <interfaceSelectColorScheme+0x22>
		colorMain = BLACK;
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <interfaceSelectColorScheme+0x40>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	701a      	strb	r2, [r3, #0]
		colorSecond = WHITE;
 800cf42:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <interfaceSelectColorScheme+0x44>)
 800cf44:	22ff      	movs	r2, #255	; 0xff
 800cf46:	701a      	strb	r2, [r3, #0]
	} else if (cs == COLOR_SCHEME_WHITE) {
		colorMain = WHITE;
		colorSecond = BLACK;
	}
}
 800cf48:	e009      	b.n	800cf5e <interfaceSelectColorScheme+0x36>
	} else if (cs == COLOR_SCHEME_WHITE) {
 800cf4a:	1dfb      	adds	r3, r7, #7
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d105      	bne.n	800cf5e <interfaceSelectColorScheme+0x36>
		colorMain = WHITE;
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <interfaceSelectColorScheme+0x40>)
 800cf54:	22ff      	movs	r2, #255	; 0xff
 800cf56:	701a      	strb	r2, [r3, #0]
		colorSecond = BLACK;
 800cf58:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <interfaceSelectColorScheme+0x44>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
}
 800cf5e:	46c0      	nop			; (mov r8, r8)
 800cf60:	46bd      	mov	sp, r7
 800cf62:	b002      	add	sp, #8
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	46c0      	nop			; (mov r8, r8)
 800cf68:	2000033a 	.word	0x2000033a
 800cf6c:	200006b3 	.word	0x200006b3

0800cf70 <interfaceInit>:

void interfaceInit() {
 800cf70:	b590      	push	{r4, r7, lr}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af02      	add	r7, sp, #8

	//										COUNT INDEXES ANGLES

	for (uint8_t i = 0; i < 10; i++) {
 800cf76:	1dfb      	adds	r3, r7, #7
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	e021      	b.n	800cfc2 <interfaceInit+0x52>
		chronoDecimalsIndexAngle[i] = 2 * 3.14 / 10 * (i - 2.5);
 800cf7e:	1dfb      	adds	r3, r7, #7
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	0018      	movs	r0, r3
 800cf84:	f7f6 f804 	bl	8002f90 <__aeabi_i2d>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	4b77      	ldr	r3, [pc, #476]	; (800d168 <interfaceInit+0x1f8>)
 800cf8c:	f7f5 fc1a 	bl	80027c4 <__aeabi_dsub>
 800cf90:	0002      	movs	r2, r0
 800cf92:	000b      	movs	r3, r1
 800cf94:	0010      	movs	r0, r2
 800cf96:	0019      	movs	r1, r3
 800cf98:	4a74      	ldr	r2, [pc, #464]	; (800d16c <interfaceInit+0x1fc>)
 800cf9a:	4b75      	ldr	r3, [pc, #468]	; (800d170 <interfaceInit+0x200>)
 800cf9c:	f7f5 f9a6 	bl	80022ec <__aeabi_dmul>
 800cfa0:	0002      	movs	r2, r0
 800cfa2:	000b      	movs	r3, r1
 800cfa4:	1df9      	adds	r1, r7, #7
 800cfa6:	780c      	ldrb	r4, [r1, #0]
 800cfa8:	0010      	movs	r0, r2
 800cfaa:	0019      	movs	r1, r3
 800cfac:	f7f6 f88e 	bl	80030cc <__aeabi_d2f>
 800cfb0:	1c01      	adds	r1, r0, #0
 800cfb2:	4b70      	ldr	r3, [pc, #448]	; (800d174 <interfaceInit+0x204>)
 800cfb4:	00a2      	lsls	r2, r4, #2
 800cfb6:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; i++) {
 800cfb8:	1dfb      	adds	r3, r7, #7
 800cfba:	781a      	ldrb	r2, [r3, #0]
 800cfbc:	1dfb      	adds	r3, r7, #7
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	1dfb      	adds	r3, r7, #7
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b09      	cmp	r3, #9
 800cfc8:	d9d9      	bls.n	800cf7e <interfaceInit+0xe>
	}
	for (uint8_t i = 0; i < 30; i++) {
 800cfca:	1dbb      	adds	r3, r7, #6
 800cfcc:	2200      	movs	r2, #0
 800cfce:	701a      	strb	r2, [r3, #0]
 800cfd0:	e021      	b.n	800d016 <interfaceInit+0xa6>
		chronoMinutesIndexAngle[i] = 2 * 3.14 / 30 * (i - 7.5);
 800cfd2:	1dbb      	adds	r3, r7, #6
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	0018      	movs	r0, r3
 800cfd8:	f7f5 ffda 	bl	8002f90 <__aeabi_i2d>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4b66      	ldr	r3, [pc, #408]	; (800d178 <interfaceInit+0x208>)
 800cfe0:	f7f5 fbf0 	bl	80027c4 <__aeabi_dsub>
 800cfe4:	0002      	movs	r2, r0
 800cfe6:	000b      	movs	r3, r1
 800cfe8:	0010      	movs	r0, r2
 800cfea:	0019      	movs	r1, r3
 800cfec:	4a63      	ldr	r2, [pc, #396]	; (800d17c <interfaceInit+0x20c>)
 800cfee:	4b64      	ldr	r3, [pc, #400]	; (800d180 <interfaceInit+0x210>)
 800cff0:	f7f5 f97c 	bl	80022ec <__aeabi_dmul>
 800cff4:	0002      	movs	r2, r0
 800cff6:	000b      	movs	r3, r1
 800cff8:	1db9      	adds	r1, r7, #6
 800cffa:	780c      	ldrb	r4, [r1, #0]
 800cffc:	0010      	movs	r0, r2
 800cffe:	0019      	movs	r1, r3
 800d000:	f7f6 f864 	bl	80030cc <__aeabi_d2f>
 800d004:	1c01      	adds	r1, r0, #0
 800d006:	4b5f      	ldr	r3, [pc, #380]	; (800d184 <interfaceInit+0x214>)
 800d008:	00a2      	lsls	r2, r4, #2
 800d00a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 30; i++) {
 800d00c:	1dbb      	adds	r3, r7, #6
 800d00e:	781a      	ldrb	r2, [r3, #0]
 800d010:	1dbb      	adds	r3, r7, #6
 800d012:	3201      	adds	r2, #1
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	1dbb      	adds	r3, r7, #6
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b1d      	cmp	r3, #29
 800d01c:	d9d9      	bls.n	800cfd2 <interfaceInit+0x62>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800d01e:	1d7b      	adds	r3, r7, #5
 800d020:	2200      	movs	r2, #0
 800d022:	701a      	strb	r2, [r3, #0]
 800d024:	e01a      	b.n	800d05c <interfaceInit+0xec>
		secondsIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800d026:	1d7b      	adds	r3, r7, #5
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	3b03      	subs	r3, #3
 800d02c:	0018      	movs	r0, r3
 800d02e:	f7f5 ffaf 	bl	8002f90 <__aeabi_i2d>
 800d032:	4a55      	ldr	r2, [pc, #340]	; (800d188 <interfaceInit+0x218>)
 800d034:	4b55      	ldr	r3, [pc, #340]	; (800d18c <interfaceInit+0x21c>)
 800d036:	f7f5 f959 	bl	80022ec <__aeabi_dmul>
 800d03a:	0002      	movs	r2, r0
 800d03c:	000b      	movs	r3, r1
 800d03e:	1d79      	adds	r1, r7, #5
 800d040:	780c      	ldrb	r4, [r1, #0]
 800d042:	0010      	movs	r0, r2
 800d044:	0019      	movs	r1, r3
 800d046:	f7f6 f841 	bl	80030cc <__aeabi_d2f>
 800d04a:	1c01      	adds	r1, r0, #0
 800d04c:	4b50      	ldr	r3, [pc, #320]	; (800d190 <interfaceInit+0x220>)
 800d04e:	00a2      	lsls	r2, r4, #2
 800d050:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800d052:	1d7b      	adds	r3, r7, #5
 800d054:	781a      	ldrb	r2, [r3, #0]
 800d056:	1d7b      	adds	r3, r7, #5
 800d058:	3201      	adds	r2, #1
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	1d7b      	adds	r3, r7, #5
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b0b      	cmp	r3, #11
 800d062:	d9e0      	bls.n	800d026 <interfaceInit+0xb6>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800d064:	1d3b      	adds	r3, r7, #4
 800d066:	2200      	movs	r2, #0
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	e01a      	b.n	800d0a2 <interfaceInit+0x132>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800d06c:	1d3b      	adds	r3, r7, #4
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	3b03      	subs	r3, #3
 800d072:	0018      	movs	r0, r3
 800d074:	f7f5 ff8c 	bl	8002f90 <__aeabi_i2d>
 800d078:	4a43      	ldr	r2, [pc, #268]	; (800d188 <interfaceInit+0x218>)
 800d07a:	4b44      	ldr	r3, [pc, #272]	; (800d18c <interfaceInit+0x21c>)
 800d07c:	f7f5 f936 	bl	80022ec <__aeabi_dmul>
 800d080:	0002      	movs	r2, r0
 800d082:	000b      	movs	r3, r1
 800d084:	1d39      	adds	r1, r7, #4
 800d086:	780c      	ldrb	r4, [r1, #0]
 800d088:	0010      	movs	r0, r2
 800d08a:	0019      	movs	r1, r3
 800d08c:	f7f6 f81e 	bl	80030cc <__aeabi_d2f>
 800d090:	1c01      	adds	r1, r0, #0
 800d092:	4b40      	ldr	r3, [pc, #256]	; (800d194 <interfaceInit+0x224>)
 800d094:	00a2      	lsls	r2, r4, #2
 800d096:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800d098:	1d3b      	adds	r3, r7, #4
 800d09a:	781a      	ldrb	r2, [r3, #0]
 800d09c:	1d3b      	adds	r3, r7, #4
 800d09e:	3201      	adds	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
 800d0a2:	1d3b      	adds	r3, r7, #4
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2b0b      	cmp	r3, #11
 800d0a8:	d9e0      	bls.n	800d06c <interfaceInit+0xfc>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800d0aa:	1cfb      	adds	r3, r7, #3
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	701a      	strb	r2, [r3, #0]
 800d0b0:	e01a      	b.n	800d0e8 <interfaceInit+0x178>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800d0b2:	1cfb      	adds	r3, r7, #3
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	3b03      	subs	r3, #3
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f7f5 ff69 	bl	8002f90 <__aeabi_i2d>
 800d0be:	4a32      	ldr	r2, [pc, #200]	; (800d188 <interfaceInit+0x218>)
 800d0c0:	4b32      	ldr	r3, [pc, #200]	; (800d18c <interfaceInit+0x21c>)
 800d0c2:	f7f5 f913 	bl	80022ec <__aeabi_dmul>
 800d0c6:	0002      	movs	r2, r0
 800d0c8:	000b      	movs	r3, r1
 800d0ca:	1cf9      	adds	r1, r7, #3
 800d0cc:	780c      	ldrb	r4, [r1, #0]
 800d0ce:	0010      	movs	r0, r2
 800d0d0:	0019      	movs	r1, r3
 800d0d2:	f7f5 fffb 	bl	80030cc <__aeabi_d2f>
 800d0d6:	1c01      	adds	r1, r0, #0
 800d0d8:	4b2e      	ldr	r3, [pc, #184]	; (800d194 <interfaceInit+0x224>)
 800d0da:	00a2      	lsls	r2, r4, #2
 800d0dc:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800d0de:	1cfb      	adds	r3, r7, #3
 800d0e0:	781a      	ldrb	r2, [r3, #0]
 800d0e2:	1cfb      	adds	r3, r7, #3
 800d0e4:	3201      	adds	r2, #1
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	1cfb      	adds	r3, r7, #3
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b0b      	cmp	r3, #11
 800d0ee:	d9e0      	bls.n	800d0b2 <interfaceInit+0x142>
	}

	//										DISPLAY INITIALISATION

	printf("EPD_1in54_V2_test Demo\r\n");
 800d0f0:	4b29      	ldr	r3, [pc, #164]	; (800d198 <interfaceInit+0x228>)
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	f006 f95e 	bl	80133b4 <puts>
	DEV_Module_Init();
 800d0f8:	f7fb f8a4 	bl	8008244 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800d0fc:	4b27      	ldr	r3, [pc, #156]	; (800d19c <interfaceInit+0x22c>)
 800d0fe:	0018      	movs	r0, r3
 800d100:	f006 f958 	bl	80133b4 <puts>
	EPD_1IN54_V2_Init();
 800d104:	f7fb f970 	bl	80083e8 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800d108:	f7fb f9cc 	bl	80084a4 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800d10c:	23fa      	movs	r3, #250	; 0xfa
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	0018      	movs	r0, r3
 800d112:	f7f6 f9f9 	bl	8003508 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UWORD Imagesize = (
 800d116:	003b      	movs	r3, r7
 800d118:	4a21      	ldr	r2, [pc, #132]	; (800d1a0 <interfaceInit+0x230>)
 800d11a:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((BlackImage = (UBYTE*) malloc(Imagesize)) == NULL) {
 800d11c:	003b      	movs	r3, r7
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	0018      	movs	r0, r3
 800d122:	f006 f801 	bl	8013128 <malloc>
 800d126:	0003      	movs	r3, r0
 800d128:	001a      	movs	r2, r3
 800d12a:	4b1e      	ldr	r3, [pc, #120]	; (800d1a4 <interfaceInit+0x234>)
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	4b1d      	ldr	r3, [pc, #116]	; (800d1a4 <interfaceInit+0x234>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <interfaceInit+0x1ce>
		printf("Failed to apply for black memory...\r\n");
 800d136:	4b1c      	ldr	r3, [pc, #112]	; (800d1a8 <interfaceInit+0x238>)
 800d138:	0018      	movs	r0, r3
 800d13a:	f006 f93b 	bl	80133b4 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <interfaceInit+0x23c>)
 800d140:	0018      	movs	r0, r3
 800d142:	f006 f937 	bl	80133b4 <puts>
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0,
 800d146:	4b17      	ldr	r3, [pc, #92]	; (800d1a4 <interfaceInit+0x234>)
 800d148:	6818      	ldr	r0, [r3, #0]
 800d14a:	4b19      	ldr	r3, [pc, #100]	; (800d1b0 <interfaceInit+0x240>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	b29b      	uxth	r3, r3
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	2300      	movs	r3, #0
 800d156:	22c8      	movs	r2, #200	; 0xc8
 800d158:	21c8      	movs	r1, #200	; 0xc8
 800d15a:	f7fb fb1b 	bl	8008794 <Paint_NewImage>
//		//burn image
//		EPD_1IN54_V2_DisplayPart(BlackImage);
//		DEV_Delay_ms(50);
//	}

}
 800d15e:	46c0      	nop			; (mov r8, r8)
 800d160:	46bd      	mov	sp, r7
 800d162:	b003      	add	sp, #12
 800d164:	bd90      	pop	{r4, r7, pc}
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	40040000 	.word	0x40040000
 800d16c:	74bc6a7f 	.word	0x74bc6a7f
 800d170:	3fe41893 	.word	0x3fe41893
 800d174:	2000037c 	.word	0x2000037c
 800d178:	401e0000 	.word	0x401e0000
 800d17c:	46508dff 	.word	0x46508dff
 800d180:	3fcacb6f 	.word	0x3fcacb6f
 800d184:	2000059c 	.word	0x2000059c
 800d188:	8bf258bf 	.word	0x8bf258bf
 800d18c:	3fe0bf25 	.word	0x3fe0bf25
 800d190:	2000040c 	.word	0x2000040c
 800d194:	2000033c 	.word	0x2000033c
 800d198:	080161c8 	.word	0x080161c8
 800d19c:	080161e0 	.word	0x080161e0
 800d1a0:	00001388 	.word	0x00001388
 800d1a4:	20000630 	.word	0x20000630
 800d1a8:	080161fc 	.word	0x080161fc
 800d1ac:	08016224 	.word	0x08016224
 800d1b0:	2000033a 	.word	0x2000033a

0800d1b4 <interfaceUpdate>:

void interfaceUpdate(uint8_t mode) {
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	0002      	movs	r2, r0
 800d1bc:	1dfb      	adds	r3, r7, #7
 800d1be:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_FULL) {
 800d1c0:	1dfb      	adds	r3, r7, #7
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10a      	bne.n	800d1de <interfaceUpdate+0x2a>

		EPD_1IN54_V2_Init();
 800d1c8:	f7fb f90e 	bl	80083e8 <EPD_1IN54_V2_Init>
		Paint_SelectImage(BlackImage);
 800d1cc:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <interfaceUpdate+0x58>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f7fb fb4d 	bl	8008870 <Paint_SelectImage>

		interfaceUpdateMode = INTERFACE_UPDATE_FULL;
 800d1d6:	4b0e      	ldr	r3, [pc, #56]	; (800d210 <interfaceUpdate+0x5c>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]
		Paint_SelectImage(BlackImage);

		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
	}

}
 800d1dc:	e012      	b.n	800d204 <interfaceUpdate+0x50>
	} else if (mode == INTERFACE_UPDATE_PARTIAL) {
 800d1de:	1dfb      	adds	r3, r7, #7
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d10e      	bne.n	800d204 <interfaceUpdate+0x50>
		EPD_1IN54_V2_Init();
 800d1e6:	f7fb f8ff 	bl	80083e8 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800d1ea:	4b08      	ldr	r3, [pc, #32]	; (800d20c <interfaceUpdate+0x58>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	0018      	movs	r0, r3
 800d1f0:	f7fb f9da 	bl	80085a8 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(BlackImage);
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <interfaceUpdate+0x58>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f7fb fb39 	bl	8008870 <Paint_SelectImage>
		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
 800d1fe:	4b04      	ldr	r3, [pc, #16]	; (800d210 <interfaceUpdate+0x5c>)
 800d200:	2201      	movs	r2, #1
 800d202:	701a      	strb	r2, [r3, #0]
}
 800d204:	46c0      	nop			; (mov r8, r8)
 800d206:	46bd      	mov	sp, r7
 800d208:	b002      	add	sp, #8
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20000630 	.word	0x20000630
 800d210:	20000638 	.word	0x20000638

0800d214 <interfaceWrite>:

void interfaceWrite() {
 800d214:	b580      	push	{r7, lr}
 800d216:	af00      	add	r7, sp, #0

	if (interfaceUpdateMode == INTERFACE_UPDATE_PARTIAL) {
 800d218:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <interfaceWrite+0x34>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d105      	bne.n	800d22e <interfaceWrite+0x1a>

		EPD_1IN54_V2_DisplayPart(BlackImage);
 800d222:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <interfaceWrite+0x38>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	0018      	movs	r0, r3
 800d228:	f7fb fa48 	bl	80086bc <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(BlackImage);

	}

}
 800d22c:	e009      	b.n	800d242 <interfaceWrite+0x2e>
	} else if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {
 800d22e:	4b06      	ldr	r3, [pc, #24]	; (800d248 <interfaceWrite+0x34>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d104      	bne.n	800d242 <interfaceWrite+0x2e>
		EPD_1IN54_V2_Display(BlackImage);
 800d238:	4b04      	ldr	r3, [pc, #16]	; (800d24c <interfaceWrite+0x38>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	0018      	movs	r0, r3
 800d23e:	f7fb f964 	bl	800850a <EPD_1IN54_V2_Display>
}
 800d242:	46c0      	nop			; (mov r8, r8)
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20000638 	.word	0x20000638
 800d24c:	20000630 	.word	0x20000630

0800d250 <interfaceClear>:

void interfaceClear() {
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
	Paint_Clear(colorMain);
 800d254:	4b04      	ldr	r3, [pc, #16]	; (800d268 <interfaceClear+0x18>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	0018      	movs	r0, r3
 800d25e:	f7fb fcb9 	bl	8008bd4 <Paint_Clear>
}
 800d262:	46c0      	nop			; (mov r8, r8)
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	2000033a 	.word	0x2000033a

0800d26c <interfaceDrawLayer>:

void interfaceDrawLayer(uint8_t layer) {
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	46ce      	mov	lr, r9
 800d270:	4647      	mov	r7, r8
 800d272:	b580      	push	{r7, lr}
 800d274:	b08b      	sub	sp, #44	; 0x2c
 800d276:	af04      	add	r7, sp, #16
 800d278:	0002      	movs	r2, r0
 800d27a:	1dfb      	adds	r3, r7, #7
 800d27c:	701a      	strb	r2, [r3, #0]

	if (layer == 1) { //boards
 800d27e:	1dfb      	adds	r3, r7, #7
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d000      	beq.n	800d288 <interfaceDrawLayer+0x1c>
 800d286:	e2cb      	b.n	800d820 <interfaceDrawLayer+0x5b4>
		//										MOON PHASE

		if (showMoonPhase == 1) {
 800d288:	4b27      	ldr	r3, [pc, #156]	; (800d328 <interfaceDrawLayer+0xbc>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d000      	beq.n	800d292 <interfaceDrawLayer+0x26>
 800d290:	e096      	b.n	800d3c0 <interfaceDrawLayer+0x154>

			//		moonPhase = 51;

			Paint_DrawCircle(moonPhaseX, moonPhaseY, moonPhaseRadius,
 800d292:	4b26      	ldr	r3, [pc, #152]	; (800d32c <interfaceDrawLayer+0xc0>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	b298      	uxth	r0, r3
 800d298:	4b25      	ldr	r3, [pc, #148]	; (800d330 <interfaceDrawLayer+0xc4>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	b299      	uxth	r1, r3
 800d29e:	4b25      	ldr	r3, [pc, #148]	; (800d334 <interfaceDrawLayer+0xc8>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	4b24      	ldr	r3, [pc, #144]	; (800d338 <interfaceDrawLayer+0xcc>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	2401      	movs	r4, #1
 800d2ae:	9401      	str	r4, [sp, #4]
 800d2b0:	2401      	movs	r4, #1
 800d2b2:	9400      	str	r4, [sp, #0]
 800d2b4:	f7fc f89a 	bl	80093ec <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			float moonPhaseShift;

			if (moonPhase < 50) {
 800d2b8:	4b20      	ldr	r3, [pc, #128]	; (800d33c <interfaceDrawLayer+0xd0>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b31      	cmp	r3, #49	; 0x31
 800d2be:	d843      	bhi.n	800d348 <interfaceDrawLayer+0xdc>

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800d2c0:	4b1e      	ldr	r3, [pc, #120]	; (800d33c <interfaceDrawLayer+0xd0>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	f7f4 f865 	bl	8001394 <__aeabi_ui2f>
 800d2ca:	1c03      	adds	r3, r0, #0
 800d2cc:	491c      	ldr	r1, [pc, #112]	; (800d340 <interfaceDrawLayer+0xd4>)
 800d2ce:	1c18      	adds	r0, r3, #0
 800d2d0:	f7f3 fb4e 	bl	8000970 <__aeabi_fdiv>
 800d2d4:	1c03      	adds	r3, r0, #0
 800d2d6:	1c1c      	adds	r4, r3, #0
 800d2d8:	4b16      	ldr	r3, [pc, #88]	; (800d334 <interfaceDrawLayer+0xc8>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	0018      	movs	r0, r3
 800d2de:	f7f4 f813 	bl	8001308 <__aeabi_i2f>
 800d2e2:	1c03      	adds	r3, r0, #0
 800d2e4:	1c19      	adds	r1, r3, #0
 800d2e6:	1c20      	adds	r0, r4, #0
 800d2e8:	f7f3 fd0c 	bl	8000d04 <__aeabi_fmul>
 800d2ec:	1c03      	adds	r3, r0, #0
 800d2ee:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX - (uint32_t) moonPhaseShift,
 800d2f0:	4b0e      	ldr	r3, [pc, #56]	; (800d32c <interfaceDrawLayer+0xc0>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b29c      	uxth	r4, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7f3 f94a 	bl	8000590 <__aeabi_f2uiz>
 800d2fc:	0003      	movs	r3, r0
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	1ae3      	subs	r3, r4, r3
 800d302:	b298      	uxth	r0, r3
 800d304:	4b0a      	ldr	r3, [pc, #40]	; (800d330 <interfaceDrawLayer+0xc4>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b299      	uxth	r1, r3
 800d30a:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <interfaceDrawLayer+0xc8>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	b29a      	uxth	r2, r3
 800d310:	4b0c      	ldr	r3, [pc, #48]	; (800d344 <interfaceDrawLayer+0xd8>)
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	b2db      	uxtb	r3, r3
 800d316:	b29b      	uxth	r3, r3
 800d318:	2401      	movs	r4, #1
 800d31a:	9401      	str	r4, [sp, #4]
 800d31c:	2401      	movs	r4, #1
 800d31e:	9400      	str	r4, [sp, #0]
 800d320:	f7fc f864 	bl	80093ec <Paint_DrawCircle>
 800d324:	e04c      	b.n	800d3c0 <interfaceDrawLayer+0x154>
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	200003b8 	.word	0x200003b8
 800d32c:	200006ff 	.word	0x200006ff
 800d330:	200006a8 	.word	0x200006a8
 800d334:	20000218 	.word	0x20000218
 800d338:	200006b3 	.word	0x200006b3
 800d33c:	200003b4 	.word	0x200003b4
 800d340:	41c80000 	.word	0x41c80000
 800d344:	2000033a 	.word	0x2000033a
						moonPhaseY, moonPhaseRadius, colorMain, DOT_PIXEL_1X1,
						DRAW_FILL_FULL);

			} else if (moonPhase > 50) {
 800d348:	4bf3      	ldr	r3, [pc, #972]	; (800d718 <interfaceDrawLayer+0x4ac>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b32      	cmp	r3, #50	; 0x32
 800d34e:	d937      	bls.n	800d3c0 <interfaceDrawLayer+0x154>
				moonPhase = 100 - moonPhase;
 800d350:	4bf1      	ldr	r3, [pc, #964]	; (800d718 <interfaceDrawLayer+0x4ac>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2264      	movs	r2, #100	; 0x64
 800d356:	1ad2      	subs	r2, r2, r3
 800d358:	4bef      	ldr	r3, [pc, #956]	; (800d718 <interfaceDrawLayer+0x4ac>)
 800d35a:	601a      	str	r2, [r3, #0]

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800d35c:	4bee      	ldr	r3, [pc, #952]	; (800d718 <interfaceDrawLayer+0x4ac>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	0018      	movs	r0, r3
 800d362:	f7f4 f817 	bl	8001394 <__aeabi_ui2f>
 800d366:	1c03      	adds	r3, r0, #0
 800d368:	49ec      	ldr	r1, [pc, #944]	; (800d71c <interfaceDrawLayer+0x4b0>)
 800d36a:	1c18      	adds	r0, r3, #0
 800d36c:	f7f3 fb00 	bl	8000970 <__aeabi_fdiv>
 800d370:	1c03      	adds	r3, r0, #0
 800d372:	1c1c      	adds	r4, r3, #0
 800d374:	4bea      	ldr	r3, [pc, #936]	; (800d720 <interfaceDrawLayer+0x4b4>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	0018      	movs	r0, r3
 800d37a:	f7f3 ffc5 	bl	8001308 <__aeabi_i2f>
 800d37e:	1c03      	adds	r3, r0, #0
 800d380:	1c19      	adds	r1, r3, #0
 800d382:	1c20      	adds	r0, r4, #0
 800d384:	f7f3 fcbe 	bl	8000d04 <__aeabi_fmul>
 800d388:	1c03      	adds	r3, r0, #0
 800d38a:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX + (uint32_t) moonPhaseShift,
 800d38c:	4be5      	ldr	r3, [pc, #916]	; (800d724 <interfaceDrawLayer+0x4b8>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	b29c      	uxth	r4, r3
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7f3 f8fc 	bl	8000590 <__aeabi_f2uiz>
 800d398:	0003      	movs	r3, r0
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	18e3      	adds	r3, r4, r3
 800d39e:	b298      	uxth	r0, r3
 800d3a0:	4be1      	ldr	r3, [pc, #900]	; (800d728 <interfaceDrawLayer+0x4bc>)
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	b299      	uxth	r1, r3
 800d3a6:	4bde      	ldr	r3, [pc, #888]	; (800d720 <interfaceDrawLayer+0x4b4>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	4bdf      	ldr	r3, [pc, #892]	; (800d72c <interfaceDrawLayer+0x4c0>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	2401      	movs	r4, #1
 800d3b6:	9401      	str	r4, [sp, #4]
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	9400      	str	r4, [sp, #0]
 800d3bc:	f7fc f816 	bl	80093ec <Paint_DrawCircle>

		}

		//										METER

		if (showMeter == 1) {
 800d3c0:	4bdb      	ldr	r3, [pc, #876]	; (800d730 <interfaceDrawLayer+0x4c4>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d11b      	bne.n	800d400 <interfaceDrawLayer+0x194>
			Paint_DrawRectangle(meterX, meterY, meterX + 82, meterY + 52,
 800d3c8:	4bda      	ldr	r3, [pc, #872]	; (800d734 <interfaceDrawLayer+0x4c8>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	b298      	uxth	r0, r3
 800d3ce:	4bda      	ldr	r3, [pc, #872]	; (800d738 <interfaceDrawLayer+0x4cc>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	b299      	uxth	r1, r3
 800d3d4:	4bd7      	ldr	r3, [pc, #860]	; (800d734 <interfaceDrawLayer+0x4c8>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	3352      	adds	r3, #82	; 0x52
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	4bd6      	ldr	r3, [pc, #856]	; (800d738 <interfaceDrawLayer+0x4cc>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3334      	adds	r3, #52	; 0x34
 800d3e6:	b29c      	uxth	r4, r3
 800d3e8:	4bd4      	ldr	r3, [pc, #848]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	9502      	str	r5, [sp, #8]
 800d3f4:	2502      	movs	r5, #2
 800d3f6:	9501      	str	r5, [sp, #4]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	0023      	movs	r3, r4
 800d3fc:	f7fb ff2a 	bl	8009254 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

		//										DIGITAL INTERFACE FIELD

		if (showDigitalInterface == 1) {
 800d400:	4bcf      	ldr	r3, [pc, #828]	; (800d740 <interfaceDrawLayer+0x4d4>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d11b      	bne.n	800d440 <interfaceDrawLayer+0x1d4>
			Paint_DrawRectangle(digitalX, digitalY, digitalX + 80,
 800d408:	4bce      	ldr	r3, [pc, #824]	; (800d744 <interfaceDrawLayer+0x4d8>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	b298      	uxth	r0, r3
 800d40e:	4bce      	ldr	r3, [pc, #824]	; (800d748 <interfaceDrawLayer+0x4dc>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	b299      	uxth	r1, r3
 800d414:	4bcb      	ldr	r3, [pc, #812]	; (800d744 <interfaceDrawLayer+0x4d8>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	3350      	adds	r3, #80	; 0x50
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	4bca      	ldr	r3, [pc, #808]	; (800d748 <interfaceDrawLayer+0x4dc>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b29b      	uxth	r3, r3
 800d424:	3325      	adds	r3, #37	; 0x25
 800d426:	b29c      	uxth	r4, r3
 800d428:	4bc4      	ldr	r3, [pc, #784]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	b29b      	uxth	r3, r3
 800d430:	2501      	movs	r5, #1
 800d432:	9502      	str	r5, [sp, #8]
 800d434:	2501      	movs	r5, #1
 800d436:	9501      	str	r5, [sp, #4]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	0023      	movs	r3, r4
 800d43c:	f7fb ff0a 	bl	8009254 <Paint_DrawRectangle>

		}

		//										TEMPERATURE FIELD

		if (showThermometer == 1) {
 800d440:	4bc2      	ldr	r3, [pc, #776]	; (800d74c <interfaceDrawLayer+0x4e0>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d11d      	bne.n	800d484 <interfaceDrawLayer+0x218>
			Paint_DrawRectangle(temperatureX - 7, temperatureY,
 800d448:	4bc1      	ldr	r3, [pc, #772]	; (800d750 <interfaceDrawLayer+0x4e4>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	3b07      	subs	r3, #7
 800d450:	b298      	uxth	r0, r3
 800d452:	4bc0      	ldr	r3, [pc, #768]	; (800d754 <interfaceDrawLayer+0x4e8>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	b299      	uxth	r1, r3
 800d458:	4bbd      	ldr	r3, [pc, #756]	; (800d750 <interfaceDrawLayer+0x4e4>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	3322      	adds	r3, #34	; 0x22
 800d460:	b29a      	uxth	r2, r3
 800d462:	4bbc      	ldr	r3, [pc, #752]	; (800d754 <interfaceDrawLayer+0x4e8>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	b29b      	uxth	r3, r3
 800d468:	330c      	adds	r3, #12
 800d46a:	b29c      	uxth	r4, r3
 800d46c:	4bb3      	ldr	r3, [pc, #716]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b2db      	uxtb	r3, r3
 800d472:	b29b      	uxth	r3, r3
 800d474:	2501      	movs	r5, #1
 800d476:	9502      	str	r5, [sp, #8]
 800d478:	2502      	movs	r5, #2
 800d47a:	9501      	str	r5, [sp, #4]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	0023      	movs	r3, r4
 800d480:	f7fb fee8 	bl	8009254 <Paint_DrawRectangle>
					DOT_PIXEL_2X2, DRAW_FILL_FULL); // date window
		}

		//										HUMIDITY BAR FIELD

		if (showHigrometer == 1) {
 800d484:	4bb4      	ldr	r3, [pc, #720]	; (800d758 <interfaceDrawLayer+0x4ec>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d11b      	bne.n	800d4c4 <interfaceDrawLayer+0x258>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800d48c:	4bb3      	ldr	r3, [pc, #716]	; (800d75c <interfaceDrawLayer+0x4f0>)
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	b298      	uxth	r0, r3
 800d492:	4bb3      	ldr	r3, [pc, #716]	; (800d760 <interfaceDrawLayer+0x4f4>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	b299      	uxth	r1, r3
 800d498:	4bb0      	ldr	r3, [pc, #704]	; (800d75c <interfaceDrawLayer+0x4f0>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	3305      	adds	r3, #5
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	4baf      	ldr	r3, [pc, #700]	; (800d760 <interfaceDrawLayer+0x4f4>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	3332      	adds	r3, #50	; 0x32
 800d4aa:	b29c      	uxth	r4, r3
 800d4ac:	4ba3      	ldr	r3, [pc, #652]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	2500      	movs	r5, #0
 800d4b6:	9502      	str	r5, [sp, #8]
 800d4b8:	2501      	movs	r5, #1
 800d4ba:	9501      	str	r5, [sp, #4]
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	0023      	movs	r3, r4
 800d4c0:	f7fb fec8 	bl	8009254 <Paint_DrawRectangle>
					humidityY + 50, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
		}

		//										COMPASS DIGITAL
		if (showNaviDigital == 1) {
 800d4c4:	4ba7      	ldr	r3, [pc, #668]	; (800d764 <interfaceDrawLayer+0x4f8>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d139      	bne.n	800d540 <interfaceDrawLayer+0x2d4>
			Paint_DrawRectangle(compassX, compassY, compassX + 48,
 800d4cc:	4ba6      	ldr	r3, [pc, #664]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	b298      	uxth	r0, r3
 800d4d2:	4ba6      	ldr	r3, [pc, #664]	; (800d76c <interfaceDrawLayer+0x500>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	b299      	uxth	r1, r3
 800d4d8:	4ba3      	ldr	r3, [pc, #652]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	3330      	adds	r3, #48	; 0x30
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	4ba2      	ldr	r3, [pc, #648]	; (800d76c <interfaceDrawLayer+0x500>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	332c      	adds	r3, #44	; 0x2c
 800d4ea:	b29c      	uxth	r4, r3
 800d4ec:	4b93      	ldr	r3, [pc, #588]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	2500      	movs	r5, #0
 800d4f6:	9502      	str	r5, [sp, #8]
 800d4f8:	2501      	movs	r5, #1
 800d4fa:	9501      	str	r5, [sp, #4]
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	0023      	movs	r3, r4
 800d500:	f7fb fea8 	bl	8009254 <Paint_DrawRectangle>
					compassY + 44, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawLine(compassX, compassY + 29, compassX + 48,
 800d504:	4b98      	ldr	r3, [pc, #608]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	b298      	uxth	r0, r3
 800d50a:	4b98      	ldr	r3, [pc, #608]	; (800d76c <interfaceDrawLayer+0x500>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	331d      	adds	r3, #29
 800d512:	b299      	uxth	r1, r3
 800d514:	4b94      	ldr	r3, [pc, #592]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	3330      	adds	r3, #48	; 0x30
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	4b93      	ldr	r3, [pc, #588]	; (800d76c <interfaceDrawLayer+0x500>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	331d      	adds	r3, #29
 800d526:	b29c      	uxth	r4, r3
 800d528:	4b84      	ldr	r3, [pc, #528]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	b29b      	uxth	r3, r3
 800d530:	2500      	movs	r5, #0
 800d532:	9502      	str	r5, [sp, #8]
 800d534:	2501      	movs	r5, #1
 800d536:	9501      	str	r5, [sp, #4]
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	0023      	movs	r3, r4
 800d53c:	f7fb fcc2 	bl	8008ec4 <Paint_DrawLine>
					LINE_STYLE_SOLID);
		}

		//										COMPASS ANALOG

		if (showNaviAnalog == 1) {
 800d540:	4b8b      	ldr	r3, [pc, #556]	; (800d770 <interfaceDrawLayer+0x504>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d123      	bne.n	800d590 <interfaceDrawLayer+0x324>
			Paint_DrawCircle(compassX, compassY, compassBoardRadius,
 800d548:	4b87      	ldr	r3, [pc, #540]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	b298      	uxth	r0, r3
 800d54e:	4b87      	ldr	r3, [pc, #540]	; (800d76c <interfaceDrawLayer+0x500>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	b299      	uxth	r1, r3
 800d554:	4b87      	ldr	r3, [pc, #540]	; (800d774 <interfaceDrawLayer+0x508>)
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	b29a      	uxth	r2, r3
 800d55a:	4b78      	ldr	r3, [pc, #480]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	b29b      	uxth	r3, r3
 800d562:	2400      	movs	r4, #0
 800d564:	9401      	str	r4, [sp, #4]
 800d566:	2401      	movs	r4, #1
 800d568:	9400      	str	r4, [sp, #0]
 800d56a:	f7fb ff3f 	bl	80093ec <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(compassX, compassY, 2, colorSecond, DOT_PIXEL_1X1,
 800d56e:	4b7e      	ldr	r3, [pc, #504]	; (800d768 <interfaceDrawLayer+0x4fc>)
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	b298      	uxth	r0, r3
 800d574:	4b7d      	ldr	r3, [pc, #500]	; (800d76c <interfaceDrawLayer+0x500>)
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	b299      	uxth	r1, r3
 800d57a:	4b70      	ldr	r3, [pc, #448]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	b29b      	uxth	r3, r3
 800d582:	2201      	movs	r2, #1
 800d584:	9201      	str	r2, [sp, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	9200      	str	r2, [sp, #0]
 800d58a:	2202      	movs	r2, #2
 800d58c:	f7fb ff2e 	bl	80093ec <Paint_DrawCircle>

		}

		//										MAIN BOARD

		Paint_DrawCircle(100, 100, mainBoardRadius, colorSecond, DOT_PIXEL_1X1,
 800d590:	4b79      	ldr	r3, [pc, #484]	; (800d778 <interfaceDrawLayer+0x50c>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	b29a      	uxth	r2, r3
 800d596:	4b69      	ldr	r3, [pc, #420]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	2100      	movs	r1, #0
 800d5a0:	9101      	str	r1, [sp, #4]
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	9100      	str	r1, [sp, #0]
 800d5a6:	2164      	movs	r1, #100	; 0x64
 800d5a8:	2064      	movs	r0, #100	; 0x64
 800d5aa:	f7fb ff1f 	bl	80093ec <Paint_DrawCircle>
				DRAW_FILL_EMPTY); //main

		//										CHRONO DECIMALS BOARD

		if (showChrono == 1) {
 800d5ae:	4b73      	ldr	r3, [pc, #460]	; (800d77c <interfaceDrawLayer+0x510>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d14f      	bne.n	800d656 <interfaceDrawLayer+0x3ea>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800d5b6:	4b72      	ldr	r3, [pc, #456]	; (800d780 <interfaceDrawLayer+0x514>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	b298      	uxth	r0, r3
 800d5bc:	4b71      	ldr	r3, [pc, #452]	; (800d784 <interfaceDrawLayer+0x518>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	b299      	uxth	r1, r3
 800d5c2:	4b71      	ldr	r3, [pc, #452]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	3302      	adds	r3, #2
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	4b5b      	ldr	r3, [pc, #364]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	2400      	movs	r4, #0
 800d5d6:	9401      	str	r4, [sp, #4]
 800d5d8:	2401      	movs	r4, #1
 800d5da:	9400      	str	r4, [sp, #0]
 800d5dc:	f7fb ff06 	bl	80093ec <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800d5e0:	4b67      	ldr	r3, [pc, #412]	; (800d780 <interfaceDrawLayer+0x514>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	b298      	uxth	r0, r3
 800d5e6:	4b67      	ldr	r3, [pc, #412]	; (800d784 <interfaceDrawLayer+0x518>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b299      	uxth	r1, r3
 800d5ec:	4b66      	ldr	r3, [pc, #408]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	4b52      	ldr	r3, [pc, #328]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	2401      	movs	r4, #1
 800d5fc:	9401      	str	r4, [sp, #4]
 800d5fe:	2401      	movs	r4, #1
 800d600:	9400      	str	r4, [sp, #0]
 800d602:	f7fb fef3 	bl	80093ec <Paint_DrawCircle>
					smallBoardRadius, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_FULL); //chrono decimals

			//										CHRONO MINUTES BOARD

			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800d606:	4b61      	ldr	r3, [pc, #388]	; (800d78c <interfaceDrawLayer+0x520>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	b298      	uxth	r0, r3
 800d60c:	4b60      	ldr	r3, [pc, #384]	; (800d790 <interfaceDrawLayer+0x524>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	b299      	uxth	r1, r3
 800d612:	4b5d      	ldr	r3, [pc, #372]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	b29b      	uxth	r3, r3
 800d618:	3302      	adds	r3, #2
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	4b47      	ldr	r3, [pc, #284]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	b29b      	uxth	r3, r3
 800d624:	2400      	movs	r4, #0
 800d626:	9401      	str	r4, [sp, #4]
 800d628:	2401      	movs	r4, #1
 800d62a:	9400      	str	r4, [sp, #0]
 800d62c:	f7fb fede 	bl	80093ec <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800d630:	4b56      	ldr	r3, [pc, #344]	; (800d78c <interfaceDrawLayer+0x520>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	b298      	uxth	r0, r3
 800d636:	4b56      	ldr	r3, [pc, #344]	; (800d790 <interfaceDrawLayer+0x524>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	b299      	uxth	r1, r3
 800d63c:	4b52      	ldr	r3, [pc, #328]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	b29a      	uxth	r2, r3
 800d642:	4b3e      	ldr	r3, [pc, #248]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b2db      	uxtb	r3, r3
 800d648:	b29b      	uxth	r3, r3
 800d64a:	2401      	movs	r4, #1
 800d64c:	9401      	str	r4, [sp, #4]
 800d64e:	2401      	movs	r4, #1
 800d650:	9400      	str	r4, [sp, #0]
 800d652:	f7fb fecb 	bl	80093ec <Paint_DrawCircle>
					DRAW_FILL_FULL); //chrono minutes
		}

		//										SECONDS BOARD

		if (showSeconds == 1) {
 800d656:	4b4f      	ldr	r3, [pc, #316]	; (800d794 <interfaceDrawLayer+0x528>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d127      	bne.n	800d6ae <interfaceDrawLayer+0x442>
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius + 2,
 800d65e:	4b4e      	ldr	r3, [pc, #312]	; (800d798 <interfaceDrawLayer+0x52c>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b298      	uxth	r0, r3
 800d664:	4b4d      	ldr	r3, [pc, #308]	; (800d79c <interfaceDrawLayer+0x530>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	b299      	uxth	r1, r3
 800d66a:	4b47      	ldr	r3, [pc, #284]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	3302      	adds	r3, #2
 800d672:	b29a      	uxth	r2, r3
 800d674:	4b31      	ldr	r3, [pc, #196]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	2400      	movs	r4, #0
 800d67e:	9401      	str	r4, [sp, #4]
 800d680:	2401      	movs	r4, #1
 800d682:	9400      	str	r4, [sp, #0]
 800d684:	f7fb feb2 	bl	80093ec <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius,
 800d688:	4b43      	ldr	r3, [pc, #268]	; (800d798 <interfaceDrawLayer+0x52c>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	b298      	uxth	r0, r3
 800d68e:	4b43      	ldr	r3, [pc, #268]	; (800d79c <interfaceDrawLayer+0x530>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b299      	uxth	r1, r3
 800d694:	4b3c      	ldr	r3, [pc, #240]	; (800d788 <interfaceDrawLayer+0x51c>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	b29a      	uxth	r2, r3
 800d69a:	4b28      	ldr	r3, [pc, #160]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	2401      	movs	r4, #1
 800d6a4:	9401      	str	r4, [sp, #4]
 800d6a6:	2401      	movs	r4, #1
 800d6a8:	9400      	str	r4, [sp, #0]
 800d6aa:	f7fb fe9f 	bl	80093ec <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //seconds
		}

		//										DATE WINDOW
		if (showDate == 1) {
 800d6ae:	4b3c      	ldr	r3, [pc, #240]	; (800d7a0 <interfaceDrawLayer+0x534>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d11f      	bne.n	800d6f6 <interfaceDrawLayer+0x48a>
			Paint_DrawRectangle(dateX - 3, dateY - 3, dateX + 17, dateY + 14,
 800d6b6:	4b3b      	ldr	r3, [pc, #236]	; (800d7a4 <interfaceDrawLayer+0x538>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	3b03      	subs	r3, #3
 800d6be:	b298      	uxth	r0, r3
 800d6c0:	4b39      	ldr	r3, [pc, #228]	; (800d7a8 <interfaceDrawLayer+0x53c>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	3b03      	subs	r3, #3
 800d6c8:	b299      	uxth	r1, r3
 800d6ca:	4b36      	ldr	r3, [pc, #216]	; (800d7a4 <interfaceDrawLayer+0x538>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	3311      	adds	r3, #17
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	4b34      	ldr	r3, [pc, #208]	; (800d7a8 <interfaceDrawLayer+0x53c>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	330e      	adds	r3, #14
 800d6dc:	b29c      	uxth	r4, r3
 800d6de:	4b17      	ldr	r3, [pc, #92]	; (800d73c <interfaceDrawLayer+0x4d0>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	2500      	movs	r5, #0
 800d6e8:	9502      	str	r5, [sp, #8]
 800d6ea:	2502      	movs	r5, #2
 800d6ec:	9501      	str	r5, [sp, #4]
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	0023      	movs	r3, r4
 800d6f2:	f7fb fdaf 	bl	8009254 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window
		}

		//										DOTS

		if (showChrono == 1) {
 800d6f6:	4b21      	ldr	r3, [pc, #132]	; (800d77c <interfaceDrawLayer+0x510>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d000      	beq.n	800d700 <interfaceDrawLayer+0x494>
 800d6fe:	e07d      	b.n	800d7fc <interfaceDrawLayer+0x590>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY, 2,
 800d700:	4b1f      	ldr	r3, [pc, #124]	; (800d780 <interfaceDrawLayer+0x514>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b298      	uxth	r0, r3
 800d706:	4b1f      	ldr	r3, [pc, #124]	; (800d784 <interfaceDrawLayer+0x518>)
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	b299      	uxth	r1, r3
 800d70c:	4b07      	ldr	r3, [pc, #28]	; (800d72c <interfaceDrawLayer+0x4c0>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	b2db      	uxtb	r3, r3
 800d712:	b29b      	uxth	r3, r3
 800d714:	2201      	movs	r2, #1
 800d716:	e049      	b.n	800d7ac <interfaceDrawLayer+0x540>
 800d718:	200003b4 	.word	0x200003b4
 800d71c:	41c80000 	.word	0x41c80000
 800d720:	20000218 	.word	0x20000218
 800d724:	200006ff 	.word	0x200006ff
 800d728:	200006a8 	.word	0x200006a8
 800d72c:	2000033a 	.word	0x2000033a
 800d730:	200006e9 	.word	0x200006e9
 800d734:	200003b0 	.word	0x200003b0
 800d738:	200004bf 	.word	0x200004bf
 800d73c:	200006b3 	.word	0x200006b3
 800d740:	200006fe 	.word	0x200006fe
 800d744:	20000641 	.word	0x20000641
 800d748:	200003ad 	.word	0x200003ad
 800d74c:	20000697 	.word	0x20000697
 800d750:	2000062d 	.word	0x2000062d
 800d754:	2000036c 	.word	0x2000036c
 800d758:	20000642 	.word	0x20000642
 800d75c:	2000070a 	.word	0x2000070a
 800d760:	20000442 	.word	0x20000442
 800d764:	20000614 	.word	0x20000614
 800d768:	200006e8 	.word	0x200006e8
 800d76c:	20000450 	.word	0x20000450
 800d770:	20000208 	.word	0x20000208
 800d774:	20000640 	.word	0x20000640
 800d778:	20000628 	.word	0x20000628
 800d77c:	200003ac 	.word	0x200003ac
 800d780:	20000645 	.word	0x20000645
 800d784:	20000646 	.word	0x20000646
 800d788:	200001f0 	.word	0x200001f0
 800d78c:	200006f4 	.word	0x200006f4
 800d790:	200006b4 	.word	0x200006b4
 800d794:	200001ff 	.word	0x200001ff
 800d798:	200006ea 	.word	0x200006ea
 800d79c:	2000037b 	.word	0x2000037b
 800d7a0:	20000212 	.word	0x20000212
 800d7a4:	200006fa 	.word	0x200006fa
 800d7a8:	20000268 	.word	0x20000268
 800d7ac:	9201      	str	r2, [sp, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	9200      	str	r2, [sp, #0]
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	f7fb fe1a 	bl	80093ec <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY, 2,
 800d7b8:	4b99      	ldr	r3, [pc, #612]	; (800da20 <interfaceDrawLayer+0x7b4>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b298      	uxth	r0, r3
 800d7be:	4b99      	ldr	r3, [pc, #612]	; (800da24 <interfaceDrawLayer+0x7b8>)
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	b299      	uxth	r1, r3
 800d7c4:	4b98      	ldr	r3, [pc, #608]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	9201      	str	r2, [sp, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	9200      	str	r2, [sp, #0]
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	f7fb fe09 	bl	80093ec <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(secondsStartX, secondsStartY, 2, colorMain,
 800d7da:	4b94      	ldr	r3, [pc, #592]	; (800da2c <interfaceDrawLayer+0x7c0>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	b298      	uxth	r0, r3
 800d7e0:	4b93      	ldr	r3, [pc, #588]	; (800da30 <interfaceDrawLayer+0x7c4>)
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	b299      	uxth	r1, r3
 800d7e6:	4b90      	ldr	r3, [pc, #576]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	9201      	str	r2, [sp, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	9200      	str	r2, [sp, #0]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f7fb fdf8 	bl	80093ec <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);
		}

		Paint_DrawString_EN(82, 7, "libra", &Font12, colorSecond, colorMain);
 800d7fc:	4b8d      	ldr	r3, [pc, #564]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	b29b      	uxth	r3, r3
 800d804:	4a88      	ldr	r2, [pc, #544]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	b2d2      	uxtb	r2, r2
 800d80a:	b292      	uxth	r2, r2
 800d80c:	488a      	ldr	r0, [pc, #552]	; (800da38 <interfaceDrawLayer+0x7cc>)
 800d80e:	498b      	ldr	r1, [pc, #556]	; (800da3c <interfaceDrawLayer+0x7d0>)
 800d810:	9201      	str	r2, [sp, #4]
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	0003      	movs	r3, r0
 800d816:	000a      	movs	r2, r1
 800d818:	2107      	movs	r1, #7
 800d81a:	2052      	movs	r0, #82	; 0x52
 800d81c:	f7fc f91c 	bl	8009a58 <Paint_DrawString_EN>
		//^logo
	}

	if (layer == 2) { //indexes
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	2b02      	cmp	r3, #2
 800d826:	d001      	beq.n	800d82c <interfaceDrawLayer+0x5c0>
 800d828:	f001 fb06 	bl	800ee38 <interfaceDrawLayer+0x1bcc>
		//										METER INDEX

		if (showMeter == 1) {
 800d82c:	4b84      	ldr	r3, [pc, #528]	; (800da40 <interfaceDrawLayer+0x7d4>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d14d      	bne.n	800d8d0 <interfaceDrawLayer+0x664>
			Paint_DrawString_EN(meterX + 65, meterY + 2, "V", &Font16,
 800d834:	4b83      	ldr	r3, [pc, #524]	; (800da44 <interfaceDrawLayer+0x7d8>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	3341      	adds	r3, #65	; 0x41
 800d83c:	b298      	uxth	r0, r3
 800d83e:	4b82      	ldr	r3, [pc, #520]	; (800da48 <interfaceDrawLayer+0x7dc>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	b29b      	uxth	r3, r3
 800d844:	3302      	adds	r3, #2
 800d846:	b299      	uxth	r1, r3
 800d848:	4b7a      	ldr	r3, [pc, #488]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	b29b      	uxth	r3, r3
 800d850:	4a75      	ldr	r2, [pc, #468]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d852:	7812      	ldrb	r2, [r2, #0]
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	b292      	uxth	r2, r2
 800d858:	4d7c      	ldr	r5, [pc, #496]	; (800da4c <interfaceDrawLayer+0x7e0>)
 800d85a:	4c7d      	ldr	r4, [pc, #500]	; (800da50 <interfaceDrawLayer+0x7e4>)
 800d85c:	9201      	str	r2, [sp, #4]
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	002b      	movs	r3, r5
 800d862:	0022      	movs	r2, r4
 800d864:	f7fc f8f8 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 18, "Vd", &Font16,
 800d868:	4b76      	ldr	r3, [pc, #472]	; (800da44 <interfaceDrawLayer+0x7d8>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	3338      	adds	r3, #56	; 0x38
 800d870:	b298      	uxth	r0, r3
 800d872:	4b75      	ldr	r3, [pc, #468]	; (800da48 <interfaceDrawLayer+0x7dc>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	3312      	adds	r3, #18
 800d87a:	b299      	uxth	r1, r3
 800d87c:	4b6d      	ldr	r3, [pc, #436]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	b2db      	uxtb	r3, r3
 800d882:	b29b      	uxth	r3, r3
 800d884:	4a68      	ldr	r2, [pc, #416]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d886:	7812      	ldrb	r2, [r2, #0]
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	b292      	uxth	r2, r2
 800d88c:	4d6f      	ldr	r5, [pc, #444]	; (800da4c <interfaceDrawLayer+0x7e0>)
 800d88e:	4c71      	ldr	r4, [pc, #452]	; (800da54 <interfaceDrawLayer+0x7e8>)
 800d890:	9201      	str	r2, [sp, #4]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	002b      	movs	r3, r5
 800d896:	0022      	movs	r2, r4
 800d898:	f7fc f8de 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 34, "kR", &Font16,
 800d89c:	4b69      	ldr	r3, [pc, #420]	; (800da44 <interfaceDrawLayer+0x7d8>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	3338      	adds	r3, #56	; 0x38
 800d8a4:	b298      	uxth	r0, r3
 800d8a6:	4b68      	ldr	r3, [pc, #416]	; (800da48 <interfaceDrawLayer+0x7dc>)
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	3322      	adds	r3, #34	; 0x22
 800d8ae:	b299      	uxth	r1, r3
 800d8b0:	4b60      	ldr	r3, [pc, #384]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	4a5b      	ldr	r2, [pc, #364]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d8ba:	7812      	ldrb	r2, [r2, #0]
 800d8bc:	b2d2      	uxtb	r2, r2
 800d8be:	b292      	uxth	r2, r2
 800d8c0:	4d62      	ldr	r5, [pc, #392]	; (800da4c <interfaceDrawLayer+0x7e0>)
 800d8c2:	4c65      	ldr	r4, [pc, #404]	; (800da58 <interfaceDrawLayer+0x7ec>)
 800d8c4:	9201      	str	r2, [sp, #4]
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	002b      	movs	r3, r5
 800d8ca:	0022      	movs	r2, r4
 800d8cc:	f7fc f8c4 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}

		//										DIGITAL INTERFACE INDEX

		if (showDigitalInterface == 1) {
 800d8d0:	4b62      	ldr	r3, [pc, #392]	; (800da5c <interfaceDrawLayer+0x7f0>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d14b      	bne.n	800d970 <interfaceDrawLayer+0x704>
			Paint_DrawString_EN(digitalX + 55, digitalY, "hPa", &Font12,
 800d8d8:	4b61      	ldr	r3, [pc, #388]	; (800da60 <interfaceDrawLayer+0x7f4>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	3337      	adds	r3, #55	; 0x37
 800d8e0:	b298      	uxth	r0, r3
 800d8e2:	4b60      	ldr	r3, [pc, #384]	; (800da64 <interfaceDrawLayer+0x7f8>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	b299      	uxth	r1, r3
 800d8e8:	4b4f      	ldr	r3, [pc, #316]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4a50      	ldr	r2, [pc, #320]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d8f2:	7812      	ldrb	r2, [r2, #0]
 800d8f4:	b2d2      	uxtb	r2, r2
 800d8f6:	b292      	uxth	r2, r2
 800d8f8:	4d4f      	ldr	r5, [pc, #316]	; (800da38 <interfaceDrawLayer+0x7cc>)
 800d8fa:	4c5b      	ldr	r4, [pc, #364]	; (800da68 <interfaceDrawLayer+0x7fc>)
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	002b      	movs	r3, r5
 800d902:	0022      	movs	r2, r4
 800d904:	f7fc f8a8 	bl	8009a58 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 55, digitalY + 12, "%RH", &Font12,
 800d908:	4b55      	ldr	r3, [pc, #340]	; (800da60 <interfaceDrawLayer+0x7f4>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	3337      	adds	r3, #55	; 0x37
 800d910:	b298      	uxth	r0, r3
 800d912:	4b54      	ldr	r3, [pc, #336]	; (800da64 <interfaceDrawLayer+0x7f8>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	330c      	adds	r3, #12
 800d91a:	b299      	uxth	r1, r3
 800d91c:	4b42      	ldr	r3, [pc, #264]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	b2db      	uxtb	r3, r3
 800d922:	b29b      	uxth	r3, r3
 800d924:	4a43      	ldr	r2, [pc, #268]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d926:	7812      	ldrb	r2, [r2, #0]
 800d928:	b2d2      	uxtb	r2, r2
 800d92a:	b292      	uxth	r2, r2
 800d92c:	4d42      	ldr	r5, [pc, #264]	; (800da38 <interfaceDrawLayer+0x7cc>)
 800d92e:	4c4f      	ldr	r4, [pc, #316]	; (800da6c <interfaceDrawLayer+0x800>)
 800d930:	9201      	str	r2, [sp, #4]
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	002b      	movs	r3, r5
 800d936:	0022      	movs	r2, r4
 800d938:	f7fc f88e 	bl	8009a58 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 42, digitalY + 24, "deg C", &Font12,
 800d93c:	4b48      	ldr	r3, [pc, #288]	; (800da60 <interfaceDrawLayer+0x7f4>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b29b      	uxth	r3, r3
 800d942:	332a      	adds	r3, #42	; 0x2a
 800d944:	b298      	uxth	r0, r3
 800d946:	4b47      	ldr	r3, [pc, #284]	; (800da64 <interfaceDrawLayer+0x7f8>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	3318      	adds	r3, #24
 800d94e:	b299      	uxth	r1, r3
 800d950:	4b35      	ldr	r3, [pc, #212]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	b29b      	uxth	r3, r3
 800d958:	4a36      	ldr	r2, [pc, #216]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d95a:	7812      	ldrb	r2, [r2, #0]
 800d95c:	b2d2      	uxtb	r2, r2
 800d95e:	b292      	uxth	r2, r2
 800d960:	4d35      	ldr	r5, [pc, #212]	; (800da38 <interfaceDrawLayer+0x7cc>)
 800d962:	4c43      	ldr	r4, [pc, #268]	; (800da70 <interfaceDrawLayer+0x804>)
 800d964:	9201      	str	r2, [sp, #4]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	002b      	movs	r3, r5
 800d96a:	0022      	movs	r2, r4
 800d96c:	f7fc f874 	bl	8009a58 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										BAROMETER INDEX

		if (showBarometer == 1) {
 800d970:	4b40      	ldr	r3, [pc, #256]	; (800da74 <interfaceDrawLayer+0x808>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d148      	bne.n	800da0a <interfaceDrawLayer+0x79e>
			Paint_DrawNum(177, 102, 975, &Font8, colorSecond, colorMain);
 800d978:	4b2e      	ldr	r3, [pc, #184]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4a29      	ldr	r2, [pc, #164]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d982:	7812      	ldrb	r2, [r2, #0]
 800d984:	b2d2      	uxtb	r2, r2
 800d986:	b292      	uxth	r2, r2
 800d988:	493b      	ldr	r1, [pc, #236]	; (800da78 <interfaceDrawLayer+0x80c>)
 800d98a:	483c      	ldr	r0, [pc, #240]	; (800da7c <interfaceDrawLayer+0x810>)
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	000b      	movs	r3, r1
 800d992:	0002      	movs	r2, r0
 800d994:	2166      	movs	r1, #102	; 0x66
 800d996:	20b1      	movs	r0, #177	; 0xb1
 800d998:	f7fc f8dc 	bl	8009b54 <Paint_DrawNum>
			Paint_DrawString_EN(177, 111, "hPa", &Font8, colorSecond,
 800d99c:	4b25      	ldr	r3, [pc, #148]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	4a20      	ldr	r2, [pc, #128]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d9a6:	7812      	ldrb	r2, [r2, #0]
 800d9a8:	b2d2      	uxtb	r2, r2
 800d9aa:	b292      	uxth	r2, r2
 800d9ac:	4832      	ldr	r0, [pc, #200]	; (800da78 <interfaceDrawLayer+0x80c>)
 800d9ae:	492e      	ldr	r1, [pc, #184]	; (800da68 <interfaceDrawLayer+0x7fc>)
 800d9b0:	9201      	str	r2, [sp, #4]
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	0003      	movs	r3, r0
 800d9b6:	000a      	movs	r2, r1
 800d9b8:	216f      	movs	r1, #111	; 0x6f
 800d9ba:	20b1      	movs	r0, #177	; 0xb1
 800d9bc:	f7fc f84c 	bl	8009a58 <Paint_DrawString_EN>
					colorMain);
			Paint_DrawNum(102, 185, 1000, &Font8, colorSecond, colorMain);
 800d9c0:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	4a17      	ldr	r2, [pc, #92]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d9ca:	7812      	ldrb	r2, [r2, #0]
 800d9cc:	b2d2      	uxtb	r2, r2
 800d9ce:	b292      	uxth	r2, r2
 800d9d0:	4829      	ldr	r0, [pc, #164]	; (800da78 <interfaceDrawLayer+0x80c>)
 800d9d2:	21fa      	movs	r1, #250	; 0xfa
 800d9d4:	0089      	lsls	r1, r1, #2
 800d9d6:	9201      	str	r2, [sp, #4]
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	0003      	movs	r3, r0
 800d9dc:	000a      	movs	r2, r1
 800d9de:	21b9      	movs	r1, #185	; 0xb9
 800d9e0:	2066      	movs	r0, #102	; 0x66
 800d9e2:	f7fc f8b7 	bl	8009b54 <Paint_DrawNum>
			Paint_DrawNum(5, 102, 1025, &Font8, colorSecond, colorMain);
 800d9e6:	4b13      	ldr	r3, [pc, #76]	; (800da34 <interfaceDrawLayer+0x7c8>)
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4a0e      	ldr	r2, [pc, #56]	; (800da28 <interfaceDrawLayer+0x7bc>)
 800d9f0:	7812      	ldrb	r2, [r2, #0]
 800d9f2:	b2d2      	uxtb	r2, r2
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	4920      	ldr	r1, [pc, #128]	; (800da78 <interfaceDrawLayer+0x80c>)
 800d9f8:	4821      	ldr	r0, [pc, #132]	; (800da80 <interfaceDrawLayer+0x814>)
 800d9fa:	9201      	str	r2, [sp, #4]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	000b      	movs	r3, r1
 800da00:	0002      	movs	r2, r0
 800da02:	2166      	movs	r1, #102	; 0x66
 800da04:	2005      	movs	r0, #5
 800da06:	f7fc f8a5 	bl	8009b54 <Paint_DrawNum>
		}

		//										HUMIDITY INDEX

		if (showHigrometer == 1) {
 800da0a:	4b1e      	ldr	r3, [pc, #120]	; (800da84 <interfaceDrawLayer+0x818>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d000      	beq.n	800da14 <interfaceDrawLayer+0x7a8>
 800da12:	e09c      	b.n	800db4e <interfaceDrawLayer+0x8e2>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800da14:	2317      	movs	r3, #23
 800da16:	18fb      	adds	r3, r7, r3
 800da18:	2200      	movs	r2, #0
 800da1a:	701a      	strb	r2, [r3, #0]
 800da1c:	e060      	b.n	800dae0 <interfaceDrawLayer+0x874>
 800da1e:	46c0      	nop			; (mov r8, r8)
 800da20:	200006f4 	.word	0x200006f4
 800da24:	200006b4 	.word	0x200006b4
 800da28:	2000033a 	.word	0x2000033a
 800da2c:	200006ea 	.word	0x200006ea
 800da30:	2000037b 	.word	0x2000037b
 800da34:	200006b3 	.word	0x200006b3
 800da38:	2000000c 	.word	0x2000000c
 800da3c:	08016234 	.word	0x08016234
 800da40:	200006e9 	.word	0x200006e9
 800da44:	200003b0 	.word	0x200003b0
 800da48:	200004bf 	.word	0x200004bf
 800da4c:	20000014 	.word	0x20000014
 800da50:	0801623c 	.word	0x0801623c
 800da54:	08016240 	.word	0x08016240
 800da58:	08016244 	.word	0x08016244
 800da5c:	200006fe 	.word	0x200006fe
 800da60:	20000641 	.word	0x20000641
 800da64:	200003ad 	.word	0x200003ad
 800da68:	08016248 	.word	0x08016248
 800da6c:	0801624c 	.word	0x0801624c
 800da70:	08016250 	.word	0x08016250
 800da74:	20000215 	.word	0x20000215
 800da78:	20000024 	.word	0x20000024
 800da7c:	000003cf 	.word	0x000003cf
 800da80:	00000401 	.word	0x00000401
 800da84:	20000642 	.word	0x20000642
				Paint_DrawLine(humidityX, humidityY + i, humidityX - 2,
 800da88:	4bfa      	ldr	r3, [pc, #1000]	; (800de74 <interfaceDrawLayer+0xc08>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b298      	uxth	r0, r3
 800da8e:	4bfa      	ldr	r3, [pc, #1000]	; (800de78 <interfaceDrawLayer+0xc0c>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	b29a      	uxth	r2, r3
 800da94:	2517      	movs	r5, #23
 800da96:	197b      	adds	r3, r7, r5
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	18d3      	adds	r3, r2, r3
 800da9e:	b299      	uxth	r1, r3
 800daa0:	4bf4      	ldr	r3, [pc, #976]	; (800de74 <interfaceDrawLayer+0xc08>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	3b02      	subs	r3, #2
 800daa8:	b29c      	uxth	r4, r3
 800daaa:	4bf3      	ldr	r3, [pc, #972]	; (800de78 <interfaceDrawLayer+0xc0c>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b29a      	uxth	r2, r3
 800dab0:	002e      	movs	r6, r5
 800dab2:	197b      	adds	r3, r7, r5
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	18d3      	adds	r3, r2, r3
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4bef      	ldr	r3, [pc, #956]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	2500      	movs	r5, #0
 800dac6:	9502      	str	r5, [sp, #8]
 800dac8:	2501      	movs	r5, #1
 800daca:	9501      	str	r5, [sp, #4]
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	0013      	movs	r3, r2
 800dad0:	0022      	movs	r2, r4
 800dad2:	f7fb f9f7 	bl	8008ec4 <Paint_DrawLine>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800dad6:	19bb      	adds	r3, r7, r6
 800dad8:	19ba      	adds	r2, r7, r6
 800dada:	7812      	ldrb	r2, [r2, #0]
 800dadc:	3205      	adds	r2, #5
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	2317      	movs	r3, #23
 800dae2:	18fb      	adds	r3, r7, r3
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b32      	cmp	r3, #50	; 0x32
 800dae8:	d9ce      	bls.n	800da88 <interfaceDrawLayer+0x81c>
						humidityY + i, colorSecond, DOT_PIXEL_1X1,
						LINE_STYLE_SOLID);
			}

			Paint_DrawString_EN(humidityX + 6, humidityY, "0%RH", &Font8,
 800daea:	4be2      	ldr	r3, [pc, #904]	; (800de74 <interfaceDrawLayer+0xc08>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	b29b      	uxth	r3, r3
 800daf0:	3306      	adds	r3, #6
 800daf2:	b298      	uxth	r0, r3
 800daf4:	4be0      	ldr	r3, [pc, #896]	; (800de78 <interfaceDrawLayer+0xc0c>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	b299      	uxth	r1, r3
 800dafa:	4be0      	ldr	r3, [pc, #896]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	b29b      	uxth	r3, r3
 800db02:	4adf      	ldr	r2, [pc, #892]	; (800de80 <interfaceDrawLayer+0xc14>)
 800db04:	7812      	ldrb	r2, [r2, #0]
 800db06:	b2d2      	uxtb	r2, r2
 800db08:	b292      	uxth	r2, r2
 800db0a:	4dde      	ldr	r5, [pc, #888]	; (800de84 <interfaceDrawLayer+0xc18>)
 800db0c:	4cde      	ldr	r4, [pc, #888]	; (800de88 <interfaceDrawLayer+0xc1c>)
 800db0e:	9201      	str	r2, [sp, #4]
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	002b      	movs	r3, r5
 800db14:	0022      	movs	r2, r4
 800db16:	f7fb ff9f 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(humidityX + 6, humidityY + 43, "100", &Font8,
 800db1a:	4bd6      	ldr	r3, [pc, #856]	; (800de74 <interfaceDrawLayer+0xc08>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	3306      	adds	r3, #6
 800db22:	b298      	uxth	r0, r3
 800db24:	4bd4      	ldr	r3, [pc, #848]	; (800de78 <interfaceDrawLayer+0xc0c>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	332b      	adds	r3, #43	; 0x2b
 800db2c:	b299      	uxth	r1, r3
 800db2e:	4bd3      	ldr	r3, [pc, #844]	; (800de7c <interfaceDrawLayer+0xc10>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	b29b      	uxth	r3, r3
 800db36:	4ad2      	ldr	r2, [pc, #840]	; (800de80 <interfaceDrawLayer+0xc14>)
 800db38:	7812      	ldrb	r2, [r2, #0]
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	b292      	uxth	r2, r2
 800db3e:	4dd1      	ldr	r5, [pc, #836]	; (800de84 <interfaceDrawLayer+0xc18>)
 800db40:	4cd2      	ldr	r4, [pc, #840]	; (800de8c <interfaceDrawLayer+0xc20>)
 800db42:	9201      	str	r2, [sp, #4]
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	002b      	movs	r3, r5
 800db48:	0022      	movs	r2, r4
 800db4a:	f7fb ff85 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}



		if (showNaviAnalog) {
 800db4e:	4bd0      	ldr	r3, [pc, #832]	; (800de90 <interfaceDrawLayer+0xc24>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d100      	bne.n	800db58 <interfaceDrawLayer+0x8ec>
 800db56:	e0fc      	b.n	800dd52 <interfaceDrawLayer+0xae6>

			//										ANALOG COMPASS ALTIMETER UNIT
			Paint_DrawChar(compassX -4, compassY + 3, 'm', &Font12,
 800db58:	4bce      	ldr	r3, [pc, #824]	; (800de94 <interfaceDrawLayer+0xc28>)
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	3b04      	subs	r3, #4
 800db60:	b298      	uxth	r0, r3
 800db62:	4bcd      	ldr	r3, [pc, #820]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	b29b      	uxth	r3, r3
 800db68:	3303      	adds	r3, #3
 800db6a:	b299      	uxth	r1, r3
 800db6c:	4bc3      	ldr	r3, [pc, #780]	; (800de7c <interfaceDrawLayer+0xc10>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	b2db      	uxtb	r3, r3
 800db72:	b29b      	uxth	r3, r3
 800db74:	4ac2      	ldr	r2, [pc, #776]	; (800de80 <interfaceDrawLayer+0xc14>)
 800db76:	7812      	ldrb	r2, [r2, #0]
 800db78:	b2d2      	uxtb	r2, r2
 800db7a:	b292      	uxth	r2, r2
 800db7c:	4cc7      	ldr	r4, [pc, #796]	; (800de9c <interfaceDrawLayer+0xc30>)
 800db7e:	9201      	str	r2, [sp, #4]
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	0023      	movs	r3, r4
 800db84:	226d      	movs	r2, #109	; 0x6d
 800db86:	f7fb fe83 	bl	8009890 <Paint_DrawChar>



			//										ANALOG COMPASS INDEX
			//										BACKGROUD FOR COMPASS INDEX
			Paint_DrawRectangle(compassX-3, compassY-30, compassX-3+8, compassY-30+12,
 800db8a:	4bc2      	ldr	r3, [pc, #776]	; (800de94 <interfaceDrawLayer+0xc28>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3b03      	subs	r3, #3
 800db92:	b298      	uxth	r0, r3
 800db94:	4bc0      	ldr	r3, [pc, #768]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	3b1e      	subs	r3, #30
 800db9c:	b299      	uxth	r1, r3
 800db9e:	4bbd      	ldr	r3, [pc, #756]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3305      	adds	r3, #5
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	4bbb      	ldr	r3, [pc, #748]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	3b12      	subs	r3, #18
 800dbb0:	b29c      	uxth	r4, r3
 800dbb2:	4bb3      	ldr	r3, [pc, #716]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	2501      	movs	r5, #1
 800dbbc:	9502      	str	r5, [sp, #8]
 800dbbe:	2501      	movs	r5, #1
 800dbc0:	9501      	str	r5, [sp, #4]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	0023      	movs	r3, r4
 800dbc6:	f7fb fb45 	bl	8009254 <Paint_DrawRectangle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-3, compassY+19, compassX-3+8, compassY+19+12,
 800dbca:	4bb2      	ldr	r3, [pc, #712]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	3b03      	subs	r3, #3
 800dbd2:	b298      	uxth	r0, r3
 800dbd4:	4bb0      	ldr	r3, [pc, #704]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	3313      	adds	r3, #19
 800dbdc:	b299      	uxth	r1, r3
 800dbde:	4bad      	ldr	r3, [pc, #692]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	3305      	adds	r3, #5
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	4bab      	ldr	r3, [pc, #684]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	331f      	adds	r3, #31
 800dbf0:	b29c      	uxth	r4, r3
 800dbf2:	4ba3      	ldr	r3, [pc, #652]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	2501      	movs	r5, #1
 800dbfc:	9502      	str	r5, [sp, #8]
 800dbfe:	2501      	movs	r5, #1
 800dc00:	9501      	str	r5, [sp, #4]
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	0023      	movs	r3, r4
 800dc06:	f7fb fb25 	bl	8009254 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-28, compassY-5, compassX-28+8, compassY-5+12,
 800dc0a:	4ba2      	ldr	r3, [pc, #648]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3b1c      	subs	r3, #28
 800dc12:	b298      	uxth	r0, r3
 800dc14:	4ba0      	ldr	r3, [pc, #640]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	3b05      	subs	r3, #5
 800dc1c:	b299      	uxth	r1, r3
 800dc1e:	4b9d      	ldr	r3, [pc, #628]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	3b14      	subs	r3, #20
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	4b9b      	ldr	r3, [pc, #620]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	3307      	adds	r3, #7
 800dc30:	b29c      	uxth	r4, r3
 800dc32:	4b93      	ldr	r3, [pc, #588]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	2501      	movs	r5, #1
 800dc3c:	9502      	str	r5, [sp, #8]
 800dc3e:	2501      	movs	r5, #1
 800dc40:	9501      	str	r5, [sp, #4]
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	0023      	movs	r3, r4
 800dc46:	f7fb fb05 	bl	8009254 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX+20, compassY-5, compassX+20+8, compassY-5+12,
 800dc4a:	4b92      	ldr	r3, [pc, #584]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	3314      	adds	r3, #20
 800dc52:	b298      	uxth	r0, r3
 800dc54:	4b90      	ldr	r3, [pc, #576]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	3b05      	subs	r3, #5
 800dc5c:	b299      	uxth	r1, r3
 800dc5e:	4b8d      	ldr	r3, [pc, #564]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	331c      	adds	r3, #28
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	4b8b      	ldr	r3, [pc, #556]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	3307      	adds	r3, #7
 800dc70:	b29c      	uxth	r4, r3
 800dc72:	4b83      	ldr	r3, [pc, #524]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	2501      	movs	r5, #1
 800dc7c:	9502      	str	r5, [sp, #8]
 800dc7e:	2501      	movs	r5, #1
 800dc80:	9501      	str	r5, [sp, #4]
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	0023      	movs	r3, r4
 800dc86:	f7fb fae5 	bl	8009254 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			//										INDEX
			Paint_DrawChar(compassX - 3, compassY - 30, 'N', &Font12,
 800dc8a:	4b82      	ldr	r3, [pc, #520]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	3b03      	subs	r3, #3
 800dc92:	b298      	uxth	r0, r3
 800dc94:	4b80      	ldr	r3, [pc, #512]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b1e      	subs	r3, #30
 800dc9c:	b299      	uxth	r1, r3
 800dc9e:	4b77      	ldr	r3, [pc, #476]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	4a76      	ldr	r2, [pc, #472]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dca8:	7812      	ldrb	r2, [r2, #0]
 800dcaa:	b2d2      	uxtb	r2, r2
 800dcac:	b292      	uxth	r2, r2
 800dcae:	4c7b      	ldr	r4, [pc, #492]	; (800de9c <interfaceDrawLayer+0xc30>)
 800dcb0:	9201      	str	r2, [sp, #4]
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	0023      	movs	r3, r4
 800dcb6:	224e      	movs	r2, #78	; 0x4e
 800dcb8:	f7fb fdea 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 3, compassY + 19, 'S', &Font12,
 800dcbc:	4b75      	ldr	r3, [pc, #468]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	3b03      	subs	r3, #3
 800dcc4:	b298      	uxth	r0, r3
 800dcc6:	4b74      	ldr	r3, [pc, #464]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	3313      	adds	r3, #19
 800dcce:	b299      	uxth	r1, r3
 800dcd0:	4b6a      	ldr	r3, [pc, #424]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4a69      	ldr	r2, [pc, #420]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	b2d2      	uxtb	r2, r2
 800dcde:	b292      	uxth	r2, r2
 800dce0:	4c6e      	ldr	r4, [pc, #440]	; (800de9c <interfaceDrawLayer+0xc30>)
 800dce2:	9201      	str	r2, [sp, #4]
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	0023      	movs	r3, r4
 800dce8:	2253      	movs	r2, #83	; 0x53
 800dcea:	f7fb fdd1 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 28, compassY - 5, 'W', &Font12,
 800dcee:	4b69      	ldr	r3, [pc, #420]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	3b1c      	subs	r3, #28
 800dcf6:	b298      	uxth	r0, r3
 800dcf8:	4b67      	ldr	r3, [pc, #412]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	3b05      	subs	r3, #5
 800dd00:	b299      	uxth	r1, r3
 800dd02:	4b5e      	ldr	r3, [pc, #376]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	4a5d      	ldr	r2, [pc, #372]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dd0c:	7812      	ldrb	r2, [r2, #0]
 800dd0e:	b2d2      	uxtb	r2, r2
 800dd10:	b292      	uxth	r2, r2
 800dd12:	4c62      	ldr	r4, [pc, #392]	; (800de9c <interfaceDrawLayer+0xc30>)
 800dd14:	9201      	str	r2, [sp, #4]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	0023      	movs	r3, r4
 800dd1a:	2257      	movs	r2, #87	; 0x57
 800dd1c:	f7fb fdb8 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 20, compassY - 5, 'E', &Font12,
 800dd20:	4b5c      	ldr	r3, [pc, #368]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	3314      	adds	r3, #20
 800dd28:	b298      	uxth	r0, r3
 800dd2a:	4b5b      	ldr	r3, [pc, #364]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	3b05      	subs	r3, #5
 800dd32:	b299      	uxth	r1, r3
 800dd34:	4b51      	ldr	r3, [pc, #324]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	4a50      	ldr	r2, [pc, #320]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dd3e:	7812      	ldrb	r2, [r2, #0]
 800dd40:	b2d2      	uxtb	r2, r2
 800dd42:	b292      	uxth	r2, r2
 800dd44:	4c55      	ldr	r4, [pc, #340]	; (800de9c <interfaceDrawLayer+0xc30>)
 800dd46:	9201      	str	r2, [sp, #4]
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	0023      	movs	r3, r4
 800dd4c:	2245      	movs	r2, #69	; 0x45
 800dd4e:	f7fb fd9f 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);

		}

		//										DIGITAL ALTIMETER UNIT
		if (showNaviDigital == 1) {
 800dd52:	4b53      	ldr	r3, [pc, #332]	; (800dea0 <interfaceDrawLayer+0xc34>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d17c      	bne.n	800de54 <interfaceDrawLayer+0xbe8>
			Paint_DrawChar(compassX + 38, compassY + 31, 'm', &Font12,
 800dd5a:	4b4e      	ldr	r3, [pc, #312]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3326      	adds	r3, #38	; 0x26
 800dd62:	b298      	uxth	r0, r3
 800dd64:	4b4c      	ldr	r3, [pc, #304]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	331f      	adds	r3, #31
 800dd6c:	b299      	uxth	r1, r3
 800dd6e:	4b43      	ldr	r3, [pc, #268]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	4a42      	ldr	r2, [pc, #264]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dd78:	7812      	ldrb	r2, [r2, #0]
 800dd7a:	b2d2      	uxtb	r2, r2
 800dd7c:	b292      	uxth	r2, r2
 800dd7e:	4c47      	ldr	r4, [pc, #284]	; (800de9c <interfaceDrawLayer+0xc30>)
 800dd80:	9201      	str	r2, [sp, #4]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	0023      	movs	r3, r4
 800dd86:	226d      	movs	r2, #109	; 0x6d
 800dd88:	f7fb fd82 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);

			//										DIGITAL COMPASS INDEX

			Paint_DrawChar(compassX + 22, compassY + 1, 'N', &Font8,
 800dd8c:	4b41      	ldr	r3, [pc, #260]	; (800de94 <interfaceDrawLayer+0xc28>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3316      	adds	r3, #22
 800dd94:	b298      	uxth	r0, r3
 800dd96:	4b40      	ldr	r3, [pc, #256]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b299      	uxth	r1, r3
 800dda0:	4b36      	ldr	r3, [pc, #216]	; (800de7c <interfaceDrawLayer+0xc10>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4a35      	ldr	r2, [pc, #212]	; (800de80 <interfaceDrawLayer+0xc14>)
 800ddaa:	7812      	ldrb	r2, [r2, #0]
 800ddac:	b2d2      	uxtb	r2, r2
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	4c34      	ldr	r4, [pc, #208]	; (800de84 <interfaceDrawLayer+0xc18>)
 800ddb2:	9201      	str	r2, [sp, #4]
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	0023      	movs	r3, r4
 800ddb8:	224e      	movs	r2, #78	; 0x4e
 800ddba:	f7fb fd69 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 22, compassY + 20, 'S', &Font8,
 800ddbe:	4b35      	ldr	r3, [pc, #212]	; (800de94 <interfaceDrawLayer+0xc28>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	3316      	adds	r3, #22
 800ddc6:	b298      	uxth	r0, r3
 800ddc8:	4b33      	ldr	r3, [pc, #204]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	3314      	adds	r3, #20
 800ddd0:	b299      	uxth	r1, r3
 800ddd2:	4b2a      	ldr	r3, [pc, #168]	; (800de7c <interfaceDrawLayer+0xc10>)
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4a29      	ldr	r2, [pc, #164]	; (800de80 <interfaceDrawLayer+0xc14>)
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	b2d2      	uxtb	r2, r2
 800dde0:	b292      	uxth	r2, r2
 800dde2:	4c28      	ldr	r4, [pc, #160]	; (800de84 <interfaceDrawLayer+0xc18>)
 800dde4:	9201      	str	r2, [sp, #4]
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	0023      	movs	r3, r4
 800ddea:	2253      	movs	r2, #83	; 0x53
 800ddec:	f7fb fd50 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 2, compassY + 11, 'W', &Font8,
 800ddf0:	4b28      	ldr	r3, [pc, #160]	; (800de94 <interfaceDrawLayer+0xc28>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3302      	adds	r3, #2
 800ddf8:	b298      	uxth	r0, r3
 800ddfa:	4b27      	ldr	r3, [pc, #156]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	330b      	adds	r3, #11
 800de02:	b299      	uxth	r1, r3
 800de04:	4b1d      	ldr	r3, [pc, #116]	; (800de7c <interfaceDrawLayer+0xc10>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4a1c      	ldr	r2, [pc, #112]	; (800de80 <interfaceDrawLayer+0xc14>)
 800de0e:	7812      	ldrb	r2, [r2, #0]
 800de10:	b2d2      	uxtb	r2, r2
 800de12:	b292      	uxth	r2, r2
 800de14:	4c1b      	ldr	r4, [pc, #108]	; (800de84 <interfaceDrawLayer+0xc18>)
 800de16:	9201      	str	r2, [sp, #4]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	0023      	movs	r3, r4
 800de1c:	2257      	movs	r2, #87	; 0x57
 800de1e:	f7fb fd37 	bl	8009890 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 40, compassY + 11, 'E', &Font8,
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <interfaceDrawLayer+0xc28>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	3328      	adds	r3, #40	; 0x28
 800de2a:	b298      	uxth	r0, r3
 800de2c:	4b1a      	ldr	r3, [pc, #104]	; (800de98 <interfaceDrawLayer+0xc2c>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	b29b      	uxth	r3, r3
 800de32:	330b      	adds	r3, #11
 800de34:	b299      	uxth	r1, r3
 800de36:	4b11      	ldr	r3, [pc, #68]	; (800de7c <interfaceDrawLayer+0xc10>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	4a10      	ldr	r2, [pc, #64]	; (800de80 <interfaceDrawLayer+0xc14>)
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	b292      	uxth	r2, r2
 800de46:	4c0f      	ldr	r4, [pc, #60]	; (800de84 <interfaceDrawLayer+0xc18>)
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	0023      	movs	r3, r4
 800de4e:	2245      	movs	r2, #69	; 0x45
 800de50:	f7fb fd1e 	bl	8009890 <Paint_DrawChar>

		}

		//										BATTERY STATE INDEX

		if (showBatteryState == 1) {
 800de54:	4b13      	ldr	r3, [pc, #76]	; (800dea4 <interfaceDrawLayer+0xc38>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d16f      	bne.n	800df3c <interfaceDrawLayer+0xcd0>
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800de5c:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <interfaceDrawLayer+0xc3c>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	b29a      	uxth	r2, r3
 800de62:	4b12      	ldr	r3, [pc, #72]	; (800deac <interfaceDrawLayer+0xc40>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	b29b      	uxth	r3, r3
 800de68:	18d3      	adds	r3, r2, r3
 800de6a:	b298      	uxth	r0, r3
 800de6c:	4b10      	ldr	r3, [pc, #64]	; (800deb0 <interfaceDrawLayer+0xc44>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	b299      	uxth	r1, r3
 800de72:	e01f      	b.n	800deb4 <interfaceDrawLayer+0xc48>
 800de74:	2000070a 	.word	0x2000070a
 800de78:	20000442 	.word	0x20000442
 800de7c:	200006b3 	.word	0x200006b3
 800de80:	2000033a 	.word	0x2000033a
 800de84:	20000024 	.word	0x20000024
 800de88:	08016258 	.word	0x08016258
 800de8c:	08016260 	.word	0x08016260
 800de90:	20000208 	.word	0x20000208
 800de94:	200006e8 	.word	0x200006e8
 800de98:	20000450 	.word	0x20000450
 800de9c:	2000000c 	.word	0x2000000c
 800dea0:	20000614 	.word	0x20000614
 800dea4:	200003b2 	.word	0x200003b2
 800dea8:	2000069f 	.word	0x2000069f
 800deac:	20000214 	.word	0x20000214
 800deb0:	20000710 	.word	0x20000710
					batteryStateStartY,
					batteryStateStartX + batteryPointerShift
 800deb4:	4b3f      	ldr	r3, [pc, #252]	; (800dfb4 <interfaceDrawLayer+0xd48>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b3f      	ldr	r3, [pc, #252]	; (800dfb8 <interfaceDrawLayer+0xd4c>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	18d3      	adds	r3, r2, r3
 800dec2:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800dec4:	4b3d      	ldr	r3, [pc, #244]	; (800dfbc <interfaceDrawLayer+0xd50>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	b29b      	uxth	r3, r3
 800deca:	18d3      	adds	r3, r2, r3
 800decc:	b29a      	uxth	r2, r3
 800dece:	4b3c      	ldr	r3, [pc, #240]	; (800dfc0 <interfaceDrawLayer+0xd54>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	b29c      	uxth	r4, r3
 800ded4:	4b3b      	ldr	r3, [pc, #236]	; (800dfc4 <interfaceDrawLayer+0xd58>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	b29b      	uxth	r3, r3
 800dedc:	2500      	movs	r5, #0
 800dede:	9502      	str	r5, [sp, #8]
 800dee0:	2502      	movs	r5, #2
 800dee2:	9501      	str	r5, [sp, #4]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	0023      	movs	r3, r4
 800dee8:	f7fa ffec 	bl	8008ec4 <Paint_DrawLine>
							+ batteryStateIndexLength, batteryStateStartY,
					colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
			Paint_DrawLine(batteryStateStartX,
 800deec:	4b31      	ldr	r3, [pc, #196]	; (800dfb4 <interfaceDrawLayer+0xd48>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	b298      	uxth	r0, r3
 800def2:	4b33      	ldr	r3, [pc, #204]	; (800dfc0 <interfaceDrawLayer+0xd54>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	b29a      	uxth	r2, r3
 800def8:	4b2f      	ldr	r3, [pc, #188]	; (800dfb8 <interfaceDrawLayer+0xd4c>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	b29b      	uxth	r3, r3
 800defe:	18d3      	adds	r3, r2, r3
 800df00:	b299      	uxth	r1, r3
 800df02:	4b2c      	ldr	r3, [pc, #176]	; (800dfb4 <interfaceDrawLayer+0xd48>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	b29c      	uxth	r4, r3
					batteryStateStartY + batteryPointerShift,
					batteryStateStartX,
					batteryStateStartY + batteryPointerShift
 800df08:	4b2d      	ldr	r3, [pc, #180]	; (800dfc0 <interfaceDrawLayer+0xd54>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	4b2a      	ldr	r3, [pc, #168]	; (800dfb8 <interfaceDrawLayer+0xd4c>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	b29b      	uxth	r3, r3
 800df14:	18d3      	adds	r3, r2, r3
 800df16:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX,
 800df18:	4b28      	ldr	r3, [pc, #160]	; (800dfbc <interfaceDrawLayer+0xd50>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	18d3      	adds	r3, r2, r3
 800df20:	b29a      	uxth	r2, r3
 800df22:	4b28      	ldr	r3, [pc, #160]	; (800dfc4 <interfaceDrawLayer+0xd58>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	b29b      	uxth	r3, r3
 800df2a:	2500      	movs	r5, #0
 800df2c:	9502      	str	r5, [sp, #8]
 800df2e:	2502      	movs	r5, #2
 800df30:	9501      	str	r5, [sp, #4]
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	0013      	movs	r3, r2
 800df36:	0022      	movs	r2, r4
 800df38:	f7fa ffc4 	bl	8008ec4 <Paint_DrawLine>
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		}

		//										TEMPERATURE UNIT

		if (showThermometer == 1) {
 800df3c:	4b22      	ldr	r3, [pc, #136]	; (800dfc8 <interfaceDrawLayer+0xd5c>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d12c      	bne.n	800df9e <interfaceDrawLayer+0xd32>
			Paint_DrawCircle(temperatureX + 21, temperatureY + 4, 2, colorMain,
 800df44:	4b21      	ldr	r3, [pc, #132]	; (800dfcc <interfaceDrawLayer+0xd60>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	3315      	adds	r3, #21
 800df4c:	b298      	uxth	r0, r3
 800df4e:	4b20      	ldr	r3, [pc, #128]	; (800dfd0 <interfaceDrawLayer+0xd64>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	b29b      	uxth	r3, r3
 800df54:	3304      	adds	r3, #4
 800df56:	b299      	uxth	r1, r3
 800df58:	4b1e      	ldr	r3, [pc, #120]	; (800dfd4 <interfaceDrawLayer+0xd68>)
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	b29b      	uxth	r3, r3
 800df60:	2200      	movs	r2, #0
 800df62:	9201      	str	r2, [sp, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	9200      	str	r2, [sp, #0]
 800df68:	2202      	movs	r2, #2
 800df6a:	f7fb fa3f 	bl	80093ec <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawString_EN(temperatureX + 24, temperatureY, "C", &Font12,
 800df6e:	4b17      	ldr	r3, [pc, #92]	; (800dfcc <interfaceDrawLayer+0xd60>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b29b      	uxth	r3, r3
 800df74:	3318      	adds	r3, #24
 800df76:	b298      	uxth	r0, r3
 800df78:	4b15      	ldr	r3, [pc, #84]	; (800dfd0 <interfaceDrawLayer+0xd64>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	b299      	uxth	r1, r3
 800df7e:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <interfaceDrawLayer+0xd68>)
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	b29b      	uxth	r3, r3
 800df86:	4a0f      	ldr	r2, [pc, #60]	; (800dfc4 <interfaceDrawLayer+0xd58>)
 800df88:	7812      	ldrb	r2, [r2, #0]
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	b292      	uxth	r2, r2
 800df8e:	4d12      	ldr	r5, [pc, #72]	; (800dfd8 <interfaceDrawLayer+0xd6c>)
 800df90:	4c12      	ldr	r4, [pc, #72]	; (800dfdc <interfaceDrawLayer+0xd70>)
 800df92:	9201      	str	r2, [sp, #4]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	002b      	movs	r3, r5
 800df98:	0022      	movs	r2, r4
 800df9a:	f7fb fd5d 	bl	8009a58 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										CHRONO DECIMALS INDEX

		if (showChrono == 1) {
 800df9e:	4b10      	ldr	r3, [pc, #64]	; (800dfe0 <interfaceDrawLayer+0xd74>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d001      	beq.n	800dfaa <interfaceDrawLayer+0xd3e>
 800dfa6:	f000 fbf3 	bl	800e790 <interfaceDrawLayer+0x1524>
			for (uint8_t i = 0; i < 10; i++) {
 800dfaa:	2316      	movs	r3, #22
 800dfac:	18fb      	adds	r3, r7, r3
 800dfae:	2200      	movs	r2, #0
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	e102      	b.n	800e1ba <interfaceDrawLayer+0xf4e>
 800dfb4:	2000069f 	.word	0x2000069f
 800dfb8:	20000214 	.word	0x20000214
 800dfbc:	20000644 	.word	0x20000644
 800dfc0:	20000710 	.word	0x20000710
 800dfc4:	200006b3 	.word	0x200006b3
 800dfc8:	20000697 	.word	0x20000697
 800dfcc:	2000062d 	.word	0x2000062d
 800dfd0:	2000036c 	.word	0x2000036c
 800dfd4:	2000033a 	.word	0x2000033a
 800dfd8:	2000000c 	.word	0x2000000c
 800dfdc:	08016264 	.word	0x08016264
 800dfe0:	200003ac 	.word	0x200003ac

				Paint_DrawLine(
						cos(chronoDecimalsIndexAngle[i])
 800dfe4:	2316      	movs	r3, #22
 800dfe6:	18fb      	adds	r3, r7, r3
 800dfe8:	781a      	ldrb	r2, [r3, #0]
 800dfea:	4bba      	ldr	r3, [pc, #744]	; (800e2d4 <interfaceDrawLayer+0x1068>)
 800dfec:	0092      	lsls	r2, r2, #2
 800dfee:	58d3      	ldr	r3, [r2, r3]
 800dff0:	1c18      	adds	r0, r3, #0
 800dff2:	f7f5 f823 	bl	800303c <__aeabi_f2d>
 800dff6:	0002      	movs	r2, r0
 800dff8:	000b      	movs	r3, r1
 800dffa:	0010      	movs	r0, r2
 800dffc:	0019      	movs	r1, r3
 800dffe:	f006 fa8b 	bl	8014518 <cos>
 800e002:	0004      	movs	r4, r0
 800e004:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800e006:	4bb4      	ldr	r3, [pc, #720]	; (800e2d8 <interfaceDrawLayer+0x106c>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	001a      	movs	r2, r3
 800e00c:	4bb3      	ldr	r3, [pc, #716]	; (800e2dc <interfaceDrawLayer+0x1070>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	0018      	movs	r0, r3
 800e014:	f7f4 ffbc 	bl	8002f90 <__aeabi_i2d>
 800e018:	0002      	movs	r2, r0
 800e01a:	000b      	movs	r3, r1
 800e01c:	0020      	movs	r0, r4
 800e01e:	0029      	movs	r1, r5
 800e020:	f7f4 f964 	bl	80022ec <__aeabi_dmul>
 800e024:	0002      	movs	r2, r0
 800e026:	000b      	movs	r3, r1
 800e028:	0014      	movs	r4, r2
 800e02a:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800e02c:	4bac      	ldr	r3, [pc, #688]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	0018      	movs	r0, r3
 800e032:	f7f4 ffad 	bl	8002f90 <__aeabi_i2d>
 800e036:	0002      	movs	r2, r0
 800e038:	000b      	movs	r3, r1
 800e03a:	0020      	movs	r0, r4
 800e03c:	0029      	movs	r1, r5
 800e03e:	f7f3 f9e5 	bl	800140c <__aeabi_dadd>
 800e042:	0002      	movs	r2, r0
 800e044:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e046:	0010      	movs	r0, r2
 800e048:	0019      	movs	r1, r3
 800e04a:	f7f2 fab9 	bl	80005c0 <__aeabi_d2uiz>
 800e04e:	0003      	movs	r3, r0
 800e050:	b29e      	uxth	r6, r3
						sin(chronoDecimalsIndexAngle[i])
 800e052:	2316      	movs	r3, #22
 800e054:	18fb      	adds	r3, r7, r3
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	4b9e      	ldr	r3, [pc, #632]	; (800e2d4 <interfaceDrawLayer+0x1068>)
 800e05a:	0092      	lsls	r2, r2, #2
 800e05c:	58d3      	ldr	r3, [r2, r3]
 800e05e:	1c18      	adds	r0, r3, #0
 800e060:	f7f4 ffec 	bl	800303c <__aeabi_f2d>
 800e064:	0002      	movs	r2, r0
 800e066:	000b      	movs	r3, r1
 800e068:	0010      	movs	r0, r2
 800e06a:	0019      	movs	r1, r3
 800e06c:	f006 fa96 	bl	801459c <sin>
 800e070:	0004      	movs	r4, r0
 800e072:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800e074:	4b98      	ldr	r3, [pc, #608]	; (800e2d8 <interfaceDrawLayer+0x106c>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	001a      	movs	r2, r3
 800e07a:	4b98      	ldr	r3, [pc, #608]	; (800e2dc <interfaceDrawLayer+0x1070>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	0018      	movs	r0, r3
 800e082:	f7f4 ff85 	bl	8002f90 <__aeabi_i2d>
 800e086:	0002      	movs	r2, r0
 800e088:	000b      	movs	r3, r1
 800e08a:	0020      	movs	r0, r4
 800e08c:	0029      	movs	r1, r5
 800e08e:	f7f4 f92d 	bl	80022ec <__aeabi_dmul>
 800e092:	0002      	movs	r2, r0
 800e094:	000b      	movs	r3, r1
 800e096:	0014      	movs	r4, r2
 800e098:	001d      	movs	r5, r3
								+ chronoDecimalsStartY,
 800e09a:	4b92      	ldr	r3, [pc, #584]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f7f4 ff76 	bl	8002f90 <__aeabi_i2d>
 800e0a4:	0002      	movs	r2, r0
 800e0a6:	000b      	movs	r3, r1
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	0029      	movs	r1, r5
 800e0ac:	f7f3 f9ae 	bl	800140c <__aeabi_dadd>
 800e0b0:	0002      	movs	r2, r0
 800e0b2:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e0b4:	0010      	movs	r0, r2
 800e0b6:	0019      	movs	r1, r3
 800e0b8:	f7f2 fa82 	bl	80005c0 <__aeabi_d2uiz>
 800e0bc:	0003      	movs	r3, r0
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	4690      	mov	r8, r2

						cos(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800e0c2:	2316      	movs	r3, #22
 800e0c4:	18fb      	adds	r3, r7, r3
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	4b82      	ldr	r3, [pc, #520]	; (800e2d4 <interfaceDrawLayer+0x1068>)
 800e0ca:	0092      	lsls	r2, r2, #2
 800e0cc:	58d3      	ldr	r3, [r2, r3]
 800e0ce:	1c18      	adds	r0, r3, #0
 800e0d0:	f7f4 ffb4 	bl	800303c <__aeabi_f2d>
 800e0d4:	0002      	movs	r2, r0
 800e0d6:	000b      	movs	r3, r1
 800e0d8:	0010      	movs	r0, r2
 800e0da:	0019      	movs	r1, r3
 800e0dc:	f006 fa1c 	bl	8014518 <cos>
 800e0e0:	0004      	movs	r4, r0
 800e0e2:	000d      	movs	r5, r1
 800e0e4:	4b7c      	ldr	r3, [pc, #496]	; (800e2d8 <interfaceDrawLayer+0x106c>)
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f7f4 ff51 	bl	8002f90 <__aeabi_i2d>
 800e0ee:	0002      	movs	r2, r0
 800e0f0:	000b      	movs	r3, r1
 800e0f2:	0020      	movs	r0, r4
 800e0f4:	0029      	movs	r1, r5
 800e0f6:	f7f4 f8f9 	bl	80022ec <__aeabi_dmul>
 800e0fa:	0002      	movs	r2, r0
 800e0fc:	000b      	movs	r3, r1
 800e0fe:	0014      	movs	r4, r2
 800e100:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800e102:	4b77      	ldr	r3, [pc, #476]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	0018      	movs	r0, r3
 800e108:	f7f4 ff42 	bl	8002f90 <__aeabi_i2d>
 800e10c:	0002      	movs	r2, r0
 800e10e:	000b      	movs	r3, r1
 800e110:	0020      	movs	r0, r4
 800e112:	0029      	movs	r1, r5
 800e114:	f7f3 f97a 	bl	800140c <__aeabi_dadd>
 800e118:	0002      	movs	r2, r0
 800e11a:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e11c:	0010      	movs	r0, r2
 800e11e:	0019      	movs	r1, r3
 800e120:	f7f2 fa4e 	bl	80005c0 <__aeabi_d2uiz>
 800e124:	0003      	movs	r3, r0
 800e126:	b29a      	uxth	r2, r3
 800e128:	4691      	mov	r9, r2
						sin(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800e12a:	2316      	movs	r3, #22
 800e12c:	18fb      	adds	r3, r7, r3
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	4b68      	ldr	r3, [pc, #416]	; (800e2d4 <interfaceDrawLayer+0x1068>)
 800e132:	0092      	lsls	r2, r2, #2
 800e134:	58d3      	ldr	r3, [r2, r3]
 800e136:	1c18      	adds	r0, r3, #0
 800e138:	f7f4 ff80 	bl	800303c <__aeabi_f2d>
 800e13c:	0002      	movs	r2, r0
 800e13e:	000b      	movs	r3, r1
 800e140:	0010      	movs	r0, r2
 800e142:	0019      	movs	r1, r3
 800e144:	f006 fa2a 	bl	801459c <sin>
 800e148:	0004      	movs	r4, r0
 800e14a:	000d      	movs	r5, r1
 800e14c:	4b62      	ldr	r3, [pc, #392]	; (800e2d8 <interfaceDrawLayer+0x106c>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	0018      	movs	r0, r3
 800e152:	f7f4 ff1d 	bl	8002f90 <__aeabi_i2d>
 800e156:	0002      	movs	r2, r0
 800e158:	000b      	movs	r3, r1
 800e15a:	0020      	movs	r0, r4
 800e15c:	0029      	movs	r1, r5
 800e15e:	f7f4 f8c5 	bl	80022ec <__aeabi_dmul>
 800e162:	0002      	movs	r2, r0
 800e164:	000b      	movs	r3, r1
 800e166:	0014      	movs	r4, r2
 800e168:	001d      	movs	r5, r3
								+ chronoDecimalsStartY, colorMain,
 800e16a:	4b5e      	ldr	r3, [pc, #376]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	0018      	movs	r0, r3
 800e170:	f7f4 ff0e 	bl	8002f90 <__aeabi_i2d>
 800e174:	0002      	movs	r2, r0
 800e176:	000b      	movs	r3, r1
 800e178:	0020      	movs	r0, r4
 800e17a:	0029      	movs	r1, r5
 800e17c:	f7f3 f946 	bl	800140c <__aeabi_dadd>
 800e180:	0002      	movs	r2, r0
 800e182:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e184:	0010      	movs	r0, r2
 800e186:	0019      	movs	r1, r3
 800e188:	f7f2 fa1a 	bl	80005c0 <__aeabi_d2uiz>
 800e18c:	0003      	movs	r3, r0
 800e18e:	b29a      	uxth	r2, r3
 800e190:	4b55      	ldr	r3, [pc, #340]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	b2db      	uxtb	r3, r3
 800e196:	b29b      	uxth	r3, r3
 800e198:	2100      	movs	r1, #0
 800e19a:	9102      	str	r1, [sp, #8]
 800e19c:	2101      	movs	r1, #1
 800e19e:	9101      	str	r1, [sp, #4]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	0013      	movs	r3, r2
 800e1a4:	464a      	mov	r2, r9
 800e1a6:	4641      	mov	r1, r8
 800e1a8:	0030      	movs	r0, r6
 800e1aa:	f7fa fe8b 	bl	8008ec4 <Paint_DrawLine>
			for (uint8_t i = 0; i < 10; i++) {
 800e1ae:	2116      	movs	r1, #22
 800e1b0:	187b      	adds	r3, r7, r1
 800e1b2:	781a      	ldrb	r2, [r3, #0]
 800e1b4:	187b      	adds	r3, r7, r1
 800e1b6:	3201      	adds	r2, #1
 800e1b8:	701a      	strb	r2, [r3, #0]
 800e1ba:	2316      	movs	r3, #22
 800e1bc:	18fb      	adds	r3, r7, r3
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	2b09      	cmp	r3, #9
 800e1c2:	d800      	bhi.n	800e1c6 <interfaceDrawLayer+0xf5a>
 800e1c4:	e70e      	b.n	800dfe4 <interfaceDrawLayer+0xd78>
						DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			}

			//										CHRONO DECIMALS DIGITS
			Paint_DrawString_EN(chronoDecimalsStartX - 4,
 800e1c6:	4b46      	ldr	r3, [pc, #280]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3b04      	subs	r3, #4
 800e1ce:	b298      	uxth	r0, r3
 800e1d0:	4b44      	ldr	r3, [pc, #272]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3b18      	subs	r3, #24
 800e1d8:	b299      	uxth	r1, r3
 800e1da:	4b43      	ldr	r3, [pc, #268]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	4a42      	ldr	r2, [pc, #264]	; (800e2ec <interfaceDrawLayer+0x1080>)
 800e1e4:	7812      	ldrb	r2, [r2, #0]
 800e1e6:	b2d2      	uxtb	r2, r2
 800e1e8:	b292      	uxth	r2, r2
 800e1ea:	4d41      	ldr	r5, [pc, #260]	; (800e2f0 <interfaceDrawLayer+0x1084>)
 800e1ec:	4c41      	ldr	r4, [pc, #260]	; (800e2f4 <interfaceDrawLayer+0x1088>)
 800e1ee:	9201      	str	r2, [sp, #4]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	002b      	movs	r3, r5
 800e1f4:	0022      	movs	r2, r4
 800e1f6:	f7fb fc2f 	bl	8009a58 <Paint_DrawString_EN>
					chronoDecimalsStartY - 24, "0", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 12,
 800e1fa:	4b39      	ldr	r3, [pc, #228]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	330c      	adds	r3, #12
 800e202:	b298      	uxth	r0, r3
 800e204:	4b37      	ldr	r3, [pc, #220]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3b0c      	subs	r3, #12
 800e20c:	b299      	uxth	r1, r3
 800e20e:	4b36      	ldr	r3, [pc, #216]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	b2db      	uxtb	r3, r3
 800e214:	b29b      	uxth	r3, r3
 800e216:	4a35      	ldr	r2, [pc, #212]	; (800e2ec <interfaceDrawLayer+0x1080>)
 800e218:	7812      	ldrb	r2, [r2, #0]
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	b292      	uxth	r2, r2
 800e21e:	4d34      	ldr	r5, [pc, #208]	; (800e2f0 <interfaceDrawLayer+0x1084>)
 800e220:	4c35      	ldr	r4, [pc, #212]	; (800e2f8 <interfaceDrawLayer+0x108c>)
 800e222:	9201      	str	r2, [sp, #4]
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	002b      	movs	r3, r5
 800e228:	0022      	movs	r2, r4
 800e22a:	f7fb fc15 	bl	8009a58 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "2", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 6,
 800e22e:	4b2c      	ldr	r3, [pc, #176]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b29b      	uxth	r3, r3
 800e234:	3306      	adds	r3, #6
 800e236:	b298      	uxth	r0, r3
 800e238:	4b2a      	ldr	r3, [pc, #168]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	3306      	adds	r3, #6
 800e240:	b299      	uxth	r1, r3
 800e242:	4b29      	ldr	r3, [pc, #164]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	b2db      	uxtb	r3, r3
 800e248:	b29b      	uxth	r3, r3
 800e24a:	4a28      	ldr	r2, [pc, #160]	; (800e2ec <interfaceDrawLayer+0x1080>)
 800e24c:	7812      	ldrb	r2, [r2, #0]
 800e24e:	b2d2      	uxtb	r2, r2
 800e250:	b292      	uxth	r2, r2
 800e252:	4d27      	ldr	r5, [pc, #156]	; (800e2f0 <interfaceDrawLayer+0x1084>)
 800e254:	4c29      	ldr	r4, [pc, #164]	; (800e2fc <interfaceDrawLayer+0x1090>)
 800e256:	9201      	str	r2, [sp, #4]
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	002b      	movs	r3, r5
 800e25c:	0022      	movs	r2, r4
 800e25e:	f7fb fbfb 	bl	8009a58 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "4", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 14,
 800e262:	4b1f      	ldr	r3, [pc, #124]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	b29b      	uxth	r3, r3
 800e268:	3b0e      	subs	r3, #14
 800e26a:	b298      	uxth	r0, r3
 800e26c:	4b1d      	ldr	r3, [pc, #116]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	b29b      	uxth	r3, r3
 800e272:	3306      	adds	r3, #6
 800e274:	b299      	uxth	r1, r3
 800e276:	4b1c      	ldr	r3, [pc, #112]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4a1b      	ldr	r2, [pc, #108]	; (800e2ec <interfaceDrawLayer+0x1080>)
 800e280:	7812      	ldrb	r2, [r2, #0]
 800e282:	b2d2      	uxtb	r2, r2
 800e284:	b292      	uxth	r2, r2
 800e286:	4d1a      	ldr	r5, [pc, #104]	; (800e2f0 <interfaceDrawLayer+0x1084>)
 800e288:	4c1d      	ldr	r4, [pc, #116]	; (800e300 <interfaceDrawLayer+0x1094>)
 800e28a:	9201      	str	r2, [sp, #4]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	002b      	movs	r3, r5
 800e290:	0022      	movs	r2, r4
 800e292:	f7fb fbe1 	bl	8009a58 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "6", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 18,
 800e296:	4b12      	ldr	r3, [pc, #72]	; (800e2e0 <interfaceDrawLayer+0x1074>)
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	3b12      	subs	r3, #18
 800e29e:	b298      	uxth	r0, r3
 800e2a0:	4b10      	ldr	r3, [pc, #64]	; (800e2e4 <interfaceDrawLayer+0x1078>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	3b0c      	subs	r3, #12
 800e2a8:	b299      	uxth	r1, r3
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	; (800e2e8 <interfaceDrawLayer+0x107c>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	4a0e      	ldr	r2, [pc, #56]	; (800e2ec <interfaceDrawLayer+0x1080>)
 800e2b4:	7812      	ldrb	r2, [r2, #0]
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	b292      	uxth	r2, r2
 800e2ba:	4d0d      	ldr	r5, [pc, #52]	; (800e2f0 <interfaceDrawLayer+0x1084>)
 800e2bc:	4c11      	ldr	r4, [pc, #68]	; (800e304 <interfaceDrawLayer+0x1098>)
 800e2be:	9201      	str	r2, [sp, #4]
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	002b      	movs	r3, r5
 800e2c4:	0022      	movs	r2, r4
 800e2c6:	f7fb fbc7 	bl	8009a58 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "8", &Font12, colorMain,
					colorSecond);

			//										CHRONO MINUTES INDEX
			for (uint8_t i = 0; i < 30; i++) {
 800e2ca:	2315      	movs	r3, #21
 800e2cc:	18fb      	adds	r3, r7, r3
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	e1f6      	b.n	800e6c2 <interfaceDrawLayer+0x1456>
 800e2d4:	2000037c 	.word	0x2000037c
 800e2d8:	200001f0 	.word	0x200001f0
 800e2dc:	2000061a 	.word	0x2000061a
 800e2e0:	20000645 	.word	0x20000645
 800e2e4:	20000646 	.word	0x20000646
 800e2e8:	2000033a 	.word	0x2000033a
 800e2ec:	200006b3 	.word	0x200006b3
 800e2f0:	2000000c 	.word	0x2000000c
 800e2f4:	08016268 	.word	0x08016268
 800e2f8:	0801626c 	.word	0x0801626c
 800e2fc:	08016270 	.word	0x08016270
 800e300:	08016274 	.word	0x08016274
 800e304:	08016278 	.word	0x08016278

				Paint_DrawLine(
						cos(chronoMinutesIndexAngle[i])
 800e308:	2315      	movs	r3, #21
 800e30a:	18fb      	adds	r3, r7, r3
 800e30c:	781a      	ldrb	r2, [r3, #0]
 800e30e:	4bfd      	ldr	r3, [pc, #1012]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e310:	0092      	lsls	r2, r2, #2
 800e312:	58d3      	ldr	r3, [r2, r3]
 800e314:	1c18      	adds	r0, r3, #0
 800e316:	f7f4 fe91 	bl	800303c <__aeabi_f2d>
 800e31a:	0002      	movs	r2, r0
 800e31c:	000b      	movs	r3, r1
 800e31e:	0010      	movs	r0, r2
 800e320:	0019      	movs	r1, r3
 800e322:	f006 f8f9 	bl	8014518 <cos>
 800e326:	0004      	movs	r4, r0
 800e328:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800e32a:	4bf7      	ldr	r3, [pc, #988]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	001a      	movs	r2, r3
 800e330:	4bf6      	ldr	r3, [pc, #984]	; (800e70c <interfaceDrawLayer+0x14a0>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	0018      	movs	r0, r3
 800e338:	f7f4 fe2a 	bl	8002f90 <__aeabi_i2d>
 800e33c:	0002      	movs	r2, r0
 800e33e:	000b      	movs	r3, r1
 800e340:	0020      	movs	r0, r4
 800e342:	0029      	movs	r1, r5
 800e344:	f7f3 ffd2 	bl	80022ec <__aeabi_dmul>
 800e348:	0002      	movs	r2, r0
 800e34a:	000b      	movs	r3, r1
 800e34c:	0014      	movs	r4, r2
 800e34e:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800e350:	4bef      	ldr	r3, [pc, #956]	; (800e710 <interfaceDrawLayer+0x14a4>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	0018      	movs	r0, r3
 800e356:	f7f4 fe1b 	bl	8002f90 <__aeabi_i2d>
 800e35a:	0002      	movs	r2, r0
 800e35c:	000b      	movs	r3, r1
 800e35e:	0020      	movs	r0, r4
 800e360:	0029      	movs	r1, r5
 800e362:	f7f3 f853 	bl	800140c <__aeabi_dadd>
 800e366:	0002      	movs	r2, r0
 800e368:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e36a:	0010      	movs	r0, r2
 800e36c:	0019      	movs	r1, r3
 800e36e:	f7f2 f927 	bl	80005c0 <__aeabi_d2uiz>
 800e372:	0003      	movs	r3, r0
 800e374:	b29e      	uxth	r6, r3
						sin(chronoMinutesIndexAngle[i])
 800e376:	2315      	movs	r3, #21
 800e378:	18fb      	adds	r3, r7, r3
 800e37a:	781a      	ldrb	r2, [r3, #0]
 800e37c:	4be1      	ldr	r3, [pc, #900]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e37e:	0092      	lsls	r2, r2, #2
 800e380:	58d3      	ldr	r3, [r2, r3]
 800e382:	1c18      	adds	r0, r3, #0
 800e384:	f7f4 fe5a 	bl	800303c <__aeabi_f2d>
 800e388:	0002      	movs	r2, r0
 800e38a:	000b      	movs	r3, r1
 800e38c:	0010      	movs	r0, r2
 800e38e:	0019      	movs	r1, r3
 800e390:	f006 f904 	bl	801459c <sin>
 800e394:	0004      	movs	r4, r0
 800e396:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800e398:	4bdb      	ldr	r3, [pc, #876]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	001a      	movs	r2, r3
 800e39e:	4bdb      	ldr	r3, [pc, #876]	; (800e70c <interfaceDrawLayer+0x14a0>)
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	f7f4 fdf3 	bl	8002f90 <__aeabi_i2d>
 800e3aa:	0002      	movs	r2, r0
 800e3ac:	000b      	movs	r3, r1
 800e3ae:	0020      	movs	r0, r4
 800e3b0:	0029      	movs	r1, r5
 800e3b2:	f7f3 ff9b 	bl	80022ec <__aeabi_dmul>
 800e3b6:	0002      	movs	r2, r0
 800e3b8:	000b      	movs	r3, r1
 800e3ba:	0014      	movs	r4, r2
 800e3bc:	001d      	movs	r5, r3
								+ chronoMinutesStartY,
 800e3be:	4bd5      	ldr	r3, [pc, #852]	; (800e714 <interfaceDrawLayer+0x14a8>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	0018      	movs	r0, r3
 800e3c4:	f7f4 fde4 	bl	8002f90 <__aeabi_i2d>
 800e3c8:	0002      	movs	r2, r0
 800e3ca:	000b      	movs	r3, r1
 800e3cc:	0020      	movs	r0, r4
 800e3ce:	0029      	movs	r1, r5
 800e3d0:	f7f3 f81c 	bl	800140c <__aeabi_dadd>
 800e3d4:	0002      	movs	r2, r0
 800e3d6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e3d8:	0010      	movs	r0, r2
 800e3da:	0019      	movs	r1, r3
 800e3dc:	f7f2 f8f0 	bl	80005c0 <__aeabi_d2uiz>
 800e3e0:	0003      	movs	r3, r0
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	4690      	mov	r8, r2

						cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e3e6:	2315      	movs	r3, #21
 800e3e8:	18fb      	adds	r3, r7, r3
 800e3ea:	781a      	ldrb	r2, [r3, #0]
 800e3ec:	4bc5      	ldr	r3, [pc, #788]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e3ee:	0092      	lsls	r2, r2, #2
 800e3f0:	58d3      	ldr	r3, [r2, r3]
 800e3f2:	1c18      	adds	r0, r3, #0
 800e3f4:	f7f4 fe22 	bl	800303c <__aeabi_f2d>
 800e3f8:	0002      	movs	r2, r0
 800e3fa:	000b      	movs	r3, r1
 800e3fc:	0010      	movs	r0, r2
 800e3fe:	0019      	movs	r1, r3
 800e400:	f006 f88a 	bl	8014518 <cos>
 800e404:	0004      	movs	r4, r0
 800e406:	000d      	movs	r5, r1
 800e408:	4bbf      	ldr	r3, [pc, #764]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	0018      	movs	r0, r3
 800e40e:	f7f4 fdbf 	bl	8002f90 <__aeabi_i2d>
 800e412:	0002      	movs	r2, r0
 800e414:	000b      	movs	r3, r1
 800e416:	0020      	movs	r0, r4
 800e418:	0029      	movs	r1, r5
 800e41a:	f7f3 ff67 	bl	80022ec <__aeabi_dmul>
 800e41e:	0002      	movs	r2, r0
 800e420:	000b      	movs	r3, r1
 800e422:	0014      	movs	r4, r2
 800e424:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800e426:	4bba      	ldr	r3, [pc, #744]	; (800e710 <interfaceDrawLayer+0x14a4>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	0018      	movs	r0, r3
 800e42c:	f7f4 fdb0 	bl	8002f90 <__aeabi_i2d>
 800e430:	0002      	movs	r2, r0
 800e432:	000b      	movs	r3, r1
 800e434:	0020      	movs	r0, r4
 800e436:	0029      	movs	r1, r5
 800e438:	f7f2 ffe8 	bl	800140c <__aeabi_dadd>
 800e43c:	0002      	movs	r2, r0
 800e43e:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e440:	0010      	movs	r0, r2
 800e442:	0019      	movs	r1, r3
 800e444:	f7f2 f8bc 	bl	80005c0 <__aeabi_d2uiz>
 800e448:	0003      	movs	r3, r0
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	4691      	mov	r9, r2
						sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e44e:	2315      	movs	r3, #21
 800e450:	18fb      	adds	r3, r7, r3
 800e452:	781a      	ldrb	r2, [r3, #0]
 800e454:	4bab      	ldr	r3, [pc, #684]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e456:	0092      	lsls	r2, r2, #2
 800e458:	58d3      	ldr	r3, [r2, r3]
 800e45a:	1c18      	adds	r0, r3, #0
 800e45c:	f7f4 fdee 	bl	800303c <__aeabi_f2d>
 800e460:	0002      	movs	r2, r0
 800e462:	000b      	movs	r3, r1
 800e464:	0010      	movs	r0, r2
 800e466:	0019      	movs	r1, r3
 800e468:	f006 f898 	bl	801459c <sin>
 800e46c:	0004      	movs	r4, r0
 800e46e:	000d      	movs	r5, r1
 800e470:	4ba5      	ldr	r3, [pc, #660]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	0018      	movs	r0, r3
 800e476:	f7f4 fd8b 	bl	8002f90 <__aeabi_i2d>
 800e47a:	0002      	movs	r2, r0
 800e47c:	000b      	movs	r3, r1
 800e47e:	0020      	movs	r0, r4
 800e480:	0029      	movs	r1, r5
 800e482:	f7f3 ff33 	bl	80022ec <__aeabi_dmul>
 800e486:	0002      	movs	r2, r0
 800e488:	000b      	movs	r3, r1
 800e48a:	0014      	movs	r4, r2
 800e48c:	001d      	movs	r5, r3
								+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800e48e:	4ba1      	ldr	r3, [pc, #644]	; (800e714 <interfaceDrawLayer+0x14a8>)
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	0018      	movs	r0, r3
 800e494:	f7f4 fd7c 	bl	8002f90 <__aeabi_i2d>
 800e498:	0002      	movs	r2, r0
 800e49a:	000b      	movs	r3, r1
 800e49c:	0020      	movs	r0, r4
 800e49e:	0029      	movs	r1, r5
 800e4a0:	f7f2 ffb4 	bl	800140c <__aeabi_dadd>
 800e4a4:	0002      	movs	r2, r0
 800e4a6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e4a8:	0010      	movs	r0, r2
 800e4aa:	0019      	movs	r1, r3
 800e4ac:	f7f2 f888 	bl	80005c0 <__aeabi_d2uiz>
 800e4b0:	0003      	movs	r3, r0
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	4b98      	ldr	r3, [pc, #608]	; (800e718 <interfaceDrawLayer+0x14ac>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	2100      	movs	r1, #0
 800e4be:	9102      	str	r1, [sp, #8]
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	9101      	str	r1, [sp, #4]
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	0013      	movs	r3, r2
 800e4c8:	464a      	mov	r2, r9
 800e4ca:	4641      	mov	r1, r8
 800e4cc:	0030      	movs	r0, r6
 800e4ce:	f7fa fcf9 	bl	8008ec4 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 5 == 0) {
 800e4d2:	2415      	movs	r4, #21
 800e4d4:	193b      	adds	r3, r7, r4
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2105      	movs	r1, #5
 800e4da:	0018      	movs	r0, r3
 800e4dc:	f7f1 fea4 	bl	8000228 <__aeabi_uidivmod>
 800e4e0:	000b      	movs	r3, r1
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d000      	beq.n	800e4ea <interfaceDrawLayer+0x127e>
 800e4e8:	e0e5      	b.n	800e6b6 <interfaceDrawLayer+0x144a>
					Paint_DrawLine(
							cos(chronoMinutesIndexAngle[i])
 800e4ea:	193b      	adds	r3, r7, r4
 800e4ec:	781a      	ldrb	r2, [r3, #0]
 800e4ee:	4b85      	ldr	r3, [pc, #532]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e4f0:	0092      	lsls	r2, r2, #2
 800e4f2:	58d3      	ldr	r3, [r2, r3]
 800e4f4:	1c18      	adds	r0, r3, #0
 800e4f6:	f7f4 fda1 	bl	800303c <__aeabi_f2d>
 800e4fa:	0002      	movs	r2, r0
 800e4fc:	000b      	movs	r3, r1
 800e4fe:	0010      	movs	r0, r2
 800e500:	0019      	movs	r1, r3
 800e502:	f006 f809 	bl	8014518 <cos>
 800e506:	0004      	movs	r4, r0
 800e508:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800e50a:	4b7f      	ldr	r3, [pc, #508]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	001a      	movs	r2, r3
 800e510:	4b7e      	ldr	r3, [pc, #504]	; (800e70c <interfaceDrawLayer+0x14a0>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	3305      	adds	r3, #5
 800e516:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e518:	0018      	movs	r0, r3
 800e51a:	f7f4 fd39 	bl	8002f90 <__aeabi_i2d>
 800e51e:	0002      	movs	r2, r0
 800e520:	000b      	movs	r3, r1
 800e522:	0020      	movs	r0, r4
 800e524:	0029      	movs	r1, r5
 800e526:	f7f3 fee1 	bl	80022ec <__aeabi_dmul>
 800e52a:	0002      	movs	r2, r0
 800e52c:	000b      	movs	r3, r1
 800e52e:	0014      	movs	r4, r2
 800e530:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800e532:	4b77      	ldr	r3, [pc, #476]	; (800e710 <interfaceDrawLayer+0x14a4>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	0018      	movs	r0, r3
 800e538:	f7f4 fd2a 	bl	8002f90 <__aeabi_i2d>
 800e53c:	0002      	movs	r2, r0
 800e53e:	000b      	movs	r3, r1
 800e540:	0020      	movs	r0, r4
 800e542:	0029      	movs	r1, r5
 800e544:	f7f2 ff62 	bl	800140c <__aeabi_dadd>
 800e548:	0002      	movs	r2, r0
 800e54a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e54c:	0010      	movs	r0, r2
 800e54e:	0019      	movs	r1, r3
 800e550:	f7f2 f836 	bl	80005c0 <__aeabi_d2uiz>
 800e554:	0003      	movs	r3, r0
 800e556:	b29e      	uxth	r6, r3
							sin(chronoMinutesIndexAngle[i])
 800e558:	2415      	movs	r4, #21
 800e55a:	193b      	adds	r3, r7, r4
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	4b69      	ldr	r3, [pc, #420]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e560:	0092      	lsls	r2, r2, #2
 800e562:	58d3      	ldr	r3, [r2, r3]
 800e564:	1c18      	adds	r0, r3, #0
 800e566:	f7f4 fd69 	bl	800303c <__aeabi_f2d>
 800e56a:	0002      	movs	r2, r0
 800e56c:	000b      	movs	r3, r1
 800e56e:	0010      	movs	r0, r2
 800e570:	0019      	movs	r1, r3
 800e572:	f006 f813 	bl	801459c <sin>
 800e576:	0004      	movs	r4, r0
 800e578:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800e57a:	4b63      	ldr	r3, [pc, #396]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	001a      	movs	r2, r3
 800e580:	4b62      	ldr	r3, [pc, #392]	; (800e70c <interfaceDrawLayer+0x14a0>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	3305      	adds	r3, #5
 800e586:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e588:	0018      	movs	r0, r3
 800e58a:	f7f4 fd01 	bl	8002f90 <__aeabi_i2d>
 800e58e:	0002      	movs	r2, r0
 800e590:	000b      	movs	r3, r1
 800e592:	0020      	movs	r0, r4
 800e594:	0029      	movs	r1, r5
 800e596:	f7f3 fea9 	bl	80022ec <__aeabi_dmul>
 800e59a:	0002      	movs	r2, r0
 800e59c:	000b      	movs	r3, r1
 800e59e:	0014      	movs	r4, r2
 800e5a0:	001d      	movs	r5, r3
									+ chronoMinutesStartY,
 800e5a2:	4b5c      	ldr	r3, [pc, #368]	; (800e714 <interfaceDrawLayer+0x14a8>)
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	0018      	movs	r0, r3
 800e5a8:	f7f4 fcf2 	bl	8002f90 <__aeabi_i2d>
 800e5ac:	0002      	movs	r2, r0
 800e5ae:	000b      	movs	r3, r1
 800e5b0:	0020      	movs	r0, r4
 800e5b2:	0029      	movs	r1, r5
 800e5b4:	f7f2 ff2a 	bl	800140c <__aeabi_dadd>
 800e5b8:	0002      	movs	r2, r0
 800e5ba:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e5bc:	0010      	movs	r0, r2
 800e5be:	0019      	movs	r1, r3
 800e5c0:	f7f1 fffe 	bl	80005c0 <__aeabi_d2uiz>
 800e5c4:	0003      	movs	r3, r0
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	4698      	mov	r8, r3

							cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e5ca:	2415      	movs	r4, #21
 800e5cc:	193b      	adds	r3, r7, r4
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	4b4c      	ldr	r3, [pc, #304]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e5d2:	0092      	lsls	r2, r2, #2
 800e5d4:	58d3      	ldr	r3, [r2, r3]
 800e5d6:	1c18      	adds	r0, r3, #0
 800e5d8:	f7f4 fd30 	bl	800303c <__aeabi_f2d>
 800e5dc:	0002      	movs	r2, r0
 800e5de:	000b      	movs	r3, r1
 800e5e0:	0010      	movs	r0, r2
 800e5e2:	0019      	movs	r1, r3
 800e5e4:	f005 ff98 	bl	8014518 <cos>
 800e5e8:	0004      	movs	r4, r0
 800e5ea:	000d      	movs	r5, r1
 800e5ec:	4b46      	ldr	r3, [pc, #280]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	f7f4 fccd 	bl	8002f90 <__aeabi_i2d>
 800e5f6:	0002      	movs	r2, r0
 800e5f8:	000b      	movs	r3, r1
 800e5fa:	0020      	movs	r0, r4
 800e5fc:	0029      	movs	r1, r5
 800e5fe:	f7f3 fe75 	bl	80022ec <__aeabi_dmul>
 800e602:	0002      	movs	r2, r0
 800e604:	000b      	movs	r3, r1
 800e606:	0014      	movs	r4, r2
 800e608:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800e60a:	4b41      	ldr	r3, [pc, #260]	; (800e710 <interfaceDrawLayer+0x14a4>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	0018      	movs	r0, r3
 800e610:	f7f4 fcbe 	bl	8002f90 <__aeabi_i2d>
 800e614:	0002      	movs	r2, r0
 800e616:	000b      	movs	r3, r1
 800e618:	0020      	movs	r0, r4
 800e61a:	0029      	movs	r1, r5
 800e61c:	f7f2 fef6 	bl	800140c <__aeabi_dadd>
 800e620:	0002      	movs	r2, r0
 800e622:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e624:	0010      	movs	r0, r2
 800e626:	0019      	movs	r1, r3
 800e628:	f7f1 ffca 	bl	80005c0 <__aeabi_d2uiz>
 800e62c:	0003      	movs	r3, r0
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4699      	mov	r9, r3
							sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e632:	2415      	movs	r4, #21
 800e634:	193b      	adds	r3, r7, r4
 800e636:	781a      	ldrb	r2, [r3, #0]
 800e638:	4b32      	ldr	r3, [pc, #200]	; (800e704 <interfaceDrawLayer+0x1498>)
 800e63a:	0092      	lsls	r2, r2, #2
 800e63c:	58d3      	ldr	r3, [r2, r3]
 800e63e:	1c18      	adds	r0, r3, #0
 800e640:	f7f4 fcfc 	bl	800303c <__aeabi_f2d>
 800e644:	0002      	movs	r2, r0
 800e646:	000b      	movs	r3, r1
 800e648:	0010      	movs	r0, r2
 800e64a:	0019      	movs	r1, r3
 800e64c:	f005 ffa6 	bl	801459c <sin>
 800e650:	0004      	movs	r4, r0
 800e652:	000d      	movs	r5, r1
 800e654:	4b2c      	ldr	r3, [pc, #176]	; (800e708 <interfaceDrawLayer+0x149c>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	0018      	movs	r0, r3
 800e65a:	f7f4 fc99 	bl	8002f90 <__aeabi_i2d>
 800e65e:	0002      	movs	r2, r0
 800e660:	000b      	movs	r3, r1
 800e662:	0020      	movs	r0, r4
 800e664:	0029      	movs	r1, r5
 800e666:	f7f3 fe41 	bl	80022ec <__aeabi_dmul>
 800e66a:	0002      	movs	r2, r0
 800e66c:	000b      	movs	r3, r1
 800e66e:	0014      	movs	r4, r2
 800e670:	001d      	movs	r5, r3
									+ chronoMinutesStartY, colorMain,
 800e672:	4b28      	ldr	r3, [pc, #160]	; (800e714 <interfaceDrawLayer+0x14a8>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	0018      	movs	r0, r3
 800e678:	f7f4 fc8a 	bl	8002f90 <__aeabi_i2d>
 800e67c:	0002      	movs	r2, r0
 800e67e:	000b      	movs	r3, r1
 800e680:	0020      	movs	r0, r4
 800e682:	0029      	movs	r1, r5
 800e684:	f7f2 fec2 	bl	800140c <__aeabi_dadd>
 800e688:	0002      	movs	r2, r0
 800e68a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e68c:	0010      	movs	r0, r2
 800e68e:	0019      	movs	r1, r3
 800e690:	f7f1 ff96 	bl	80005c0 <__aeabi_d2uiz>
 800e694:	0003      	movs	r3, r0
 800e696:	b29a      	uxth	r2, r3
 800e698:	4b1f      	ldr	r3, [pc, #124]	; (800e718 <interfaceDrawLayer+0x14ac>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	9102      	str	r1, [sp, #8]
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	9101      	str	r1, [sp, #4]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	0013      	movs	r3, r2
 800e6ac:	464a      	mov	r2, r9
 800e6ae:	4641      	mov	r1, r8
 800e6b0:	0030      	movs	r0, r6
 800e6b2:	f7fa fc07 	bl	8008ec4 <Paint_DrawLine>
			for (uint8_t i = 0; i < 30; i++) {
 800e6b6:	2115      	movs	r1, #21
 800e6b8:	187b      	adds	r3, r7, r1
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	187b      	adds	r3, r7, r1
 800e6be:	3201      	adds	r2, #1
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	2315      	movs	r3, #21
 800e6c4:	18fb      	adds	r3, r7, r3
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2b1d      	cmp	r3, #29
 800e6ca:	d800      	bhi.n	800e6ce <interfaceDrawLayer+0x1462>
 800e6cc:	e61c      	b.n	800e308 <interfaceDrawLayer+0x109c>
				}
			}

			//										CHRONO MINUTES DIGITS

			Paint_DrawString_EN(chronoMinutesStartX - 8,
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <interfaceDrawLayer+0x14a4>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	3b08      	subs	r3, #8
 800e6d6:	b298      	uxth	r0, r3
 800e6d8:	4b0e      	ldr	r3, [pc, #56]	; (800e714 <interfaceDrawLayer+0x14a8>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b14      	subs	r3, #20
 800e6e0:	b299      	uxth	r1, r3
 800e6e2:	4b0d      	ldr	r3, [pc, #52]	; (800e718 <interfaceDrawLayer+0x14ac>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	4a0c      	ldr	r2, [pc, #48]	; (800e71c <interfaceDrawLayer+0x14b0>)
 800e6ec:	7812      	ldrb	r2, [r2, #0]
 800e6ee:	b2d2      	uxtb	r2, r2
 800e6f0:	b292      	uxth	r2, r2
 800e6f2:	4d0b      	ldr	r5, [pc, #44]	; (800e720 <interfaceDrawLayer+0x14b4>)
 800e6f4:	4c0b      	ldr	r4, [pc, #44]	; (800e724 <interfaceDrawLayer+0x14b8>)
 800e6f6:	9201      	str	r2, [sp, #4]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	002b      	movs	r3, r5
 800e6fc:	0022      	movs	r2, r4
 800e6fe:	f7fb f9ab 	bl	8009a58 <Paint_DrawString_EN>
 800e702:	e011      	b.n	800e728 <interfaceDrawLayer+0x14bc>
 800e704:	2000059c 	.word	0x2000059c
 800e708:	200001f0 	.word	0x200001f0
 800e70c:	200003af 	.word	0x200003af
 800e710:	200006f4 	.word	0x200006f4
 800e714:	200006b4 	.word	0x200006b4
 800e718:	2000033a 	.word	0x2000033a
 800e71c:	200006b3 	.word	0x200006b3
 800e720:	2000000c 	.word	0x2000000c
 800e724:	0801627c 	.word	0x0801627c
					chronoMinutesStartY - 20, "30", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX + 2,
 800e728:	4b1e      	ldr	r3, [pc, #120]	; (800e7a4 <interfaceDrawLayer+0x1538>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3302      	adds	r3, #2
 800e730:	b298      	uxth	r0, r3
 800e732:	4b1d      	ldr	r3, [pc, #116]	; (800e7a8 <interfaceDrawLayer+0x153c>)
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	b29b      	uxth	r3, r3
 800e738:	3302      	adds	r3, #2
 800e73a:	b299      	uxth	r1, r3
 800e73c:	4b1b      	ldr	r3, [pc, #108]	; (800e7ac <interfaceDrawLayer+0x1540>)
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	b2db      	uxtb	r3, r3
 800e742:	b29b      	uxth	r3, r3
 800e744:	4a1a      	ldr	r2, [pc, #104]	; (800e7b0 <interfaceDrawLayer+0x1544>)
 800e746:	7812      	ldrb	r2, [r2, #0]
 800e748:	b2d2      	uxtb	r2, r2
 800e74a:	b292      	uxth	r2, r2
 800e74c:	4d19      	ldr	r5, [pc, #100]	; (800e7b4 <interfaceDrawLayer+0x1548>)
 800e74e:	4c1a      	ldr	r4, [pc, #104]	; (800e7b8 <interfaceDrawLayer+0x154c>)
 800e750:	9201      	str	r2, [sp, #4]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	002b      	movs	r3, r5
 800e756:	0022      	movs	r2, r4
 800e758:	f7fb f97e 	bl	8009a58 <Paint_DrawString_EN>
					chronoMinutesStartY + 2, "10", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX - 18,
 800e75c:	4b11      	ldr	r3, [pc, #68]	; (800e7a4 <interfaceDrawLayer+0x1538>)
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	b29b      	uxth	r3, r3
 800e762:	3b12      	subs	r3, #18
 800e764:	b298      	uxth	r0, r3
 800e766:	4b10      	ldr	r3, [pc, #64]	; (800e7a8 <interfaceDrawLayer+0x153c>)
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	3302      	adds	r3, #2
 800e76e:	b299      	uxth	r1, r3
 800e770:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <interfaceDrawLayer+0x1540>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	b2db      	uxtb	r3, r3
 800e776:	b29b      	uxth	r3, r3
 800e778:	4a0d      	ldr	r2, [pc, #52]	; (800e7b0 <interfaceDrawLayer+0x1544>)
 800e77a:	7812      	ldrb	r2, [r2, #0]
 800e77c:	b2d2      	uxtb	r2, r2
 800e77e:	b292      	uxth	r2, r2
 800e780:	4d0c      	ldr	r5, [pc, #48]	; (800e7b4 <interfaceDrawLayer+0x1548>)
 800e782:	4c0e      	ldr	r4, [pc, #56]	; (800e7bc <interfaceDrawLayer+0x1550>)
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	002b      	movs	r3, r5
 800e78a:	0022      	movs	r2, r4
 800e78c:	f7fb f964 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond);
		}

		//										SECONDS INDEX

		if (showSeconds == 1) {
 800e790:	4b0b      	ldr	r3, [pc, #44]	; (800e7c0 <interfaceDrawLayer+0x1554>)
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d000      	beq.n	800e79a <interfaceDrawLayer+0x152e>
 800e798:	e258      	b.n	800ec4c <interfaceDrawLayer+0x19e0>
			for (uint8_t i = 0; i < 12; i++) {
 800e79a:	2314      	movs	r3, #20
 800e79c:	18fb      	adds	r3, r7, r3
 800e79e:	2200      	movs	r2, #0
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	e1ec      	b.n	800eb7e <interfaceDrawLayer+0x1912>
 800e7a4:	200006f4 	.word	0x200006f4
 800e7a8:	200006b4 	.word	0x200006b4
 800e7ac:	2000033a 	.word	0x2000033a
 800e7b0:	200006b3 	.word	0x200006b3
 800e7b4:	2000000c 	.word	0x2000000c
 800e7b8:	08016280 	.word	0x08016280
 800e7bc:	08016284 	.word	0x08016284
 800e7c0:	200001ff 	.word	0x200001ff

				Paint_DrawLine(
						cos(secondsIndexAngle[i])
 800e7c4:	2314      	movs	r3, #20
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	4bfd      	ldr	r3, [pc, #1012]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800e7cc:	0092      	lsls	r2, r2, #2
 800e7ce:	58d3      	ldr	r3, [r2, r3]
 800e7d0:	1c18      	adds	r0, r3, #0
 800e7d2:	f7f4 fc33 	bl	800303c <__aeabi_f2d>
 800e7d6:	0002      	movs	r2, r0
 800e7d8:	000b      	movs	r3, r1
 800e7da:	0010      	movs	r0, r2
 800e7dc:	0019      	movs	r1, r3
 800e7de:	f005 fe9b 	bl	8014518 <cos>
 800e7e2:	0004      	movs	r4, r0
 800e7e4:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800e7e6:	4bf7      	ldr	r3, [pc, #988]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	001a      	movs	r2, r3
 800e7ec:	4bf6      	ldr	r3, [pc, #984]	; (800ebc8 <interfaceDrawLayer+0x195c>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	0018      	movs	r0, r3
 800e7f4:	f7f4 fbcc 	bl	8002f90 <__aeabi_i2d>
 800e7f8:	0002      	movs	r2, r0
 800e7fa:	000b      	movs	r3, r1
 800e7fc:	0020      	movs	r0, r4
 800e7fe:	0029      	movs	r1, r5
 800e800:	f7f3 fd74 	bl	80022ec <__aeabi_dmul>
 800e804:	0002      	movs	r2, r0
 800e806:	000b      	movs	r3, r1
 800e808:	0014      	movs	r4, r2
 800e80a:	001d      	movs	r5, r3
								+ secondsStartX,
 800e80c:	4bef      	ldr	r3, [pc, #956]	; (800ebcc <interfaceDrawLayer+0x1960>)
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	0018      	movs	r0, r3
 800e812:	f7f4 fbbd 	bl	8002f90 <__aeabi_i2d>
 800e816:	0002      	movs	r2, r0
 800e818:	000b      	movs	r3, r1
 800e81a:	0020      	movs	r0, r4
 800e81c:	0029      	movs	r1, r5
 800e81e:	f7f2 fdf5 	bl	800140c <__aeabi_dadd>
 800e822:	0002      	movs	r2, r0
 800e824:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e826:	0010      	movs	r0, r2
 800e828:	0019      	movs	r1, r3
 800e82a:	f7f1 fec9 	bl	80005c0 <__aeabi_d2uiz>
 800e82e:	0003      	movs	r3, r0
 800e830:	b29e      	uxth	r6, r3
						sin(secondsIndexAngle[i])
 800e832:	2314      	movs	r3, #20
 800e834:	18fb      	adds	r3, r7, r3
 800e836:	781a      	ldrb	r2, [r3, #0]
 800e838:	4be1      	ldr	r3, [pc, #900]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800e83a:	0092      	lsls	r2, r2, #2
 800e83c:	58d3      	ldr	r3, [r2, r3]
 800e83e:	1c18      	adds	r0, r3, #0
 800e840:	f7f4 fbfc 	bl	800303c <__aeabi_f2d>
 800e844:	0002      	movs	r2, r0
 800e846:	000b      	movs	r3, r1
 800e848:	0010      	movs	r0, r2
 800e84a:	0019      	movs	r1, r3
 800e84c:	f005 fea6 	bl	801459c <sin>
 800e850:	0004      	movs	r4, r0
 800e852:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800e854:	4bdb      	ldr	r3, [pc, #876]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	001a      	movs	r2, r3
 800e85a:	4bdb      	ldr	r3, [pc, #876]	; (800ebc8 <interfaceDrawLayer+0x195c>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	0018      	movs	r0, r3
 800e862:	f7f4 fb95 	bl	8002f90 <__aeabi_i2d>
 800e866:	0002      	movs	r2, r0
 800e868:	000b      	movs	r3, r1
 800e86a:	0020      	movs	r0, r4
 800e86c:	0029      	movs	r1, r5
 800e86e:	f7f3 fd3d 	bl	80022ec <__aeabi_dmul>
 800e872:	0002      	movs	r2, r0
 800e874:	000b      	movs	r3, r1
 800e876:	0014      	movs	r4, r2
 800e878:	001d      	movs	r5, r3
								+ secondsStartY,
 800e87a:	4bd5      	ldr	r3, [pc, #852]	; (800ebd0 <interfaceDrawLayer+0x1964>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	0018      	movs	r0, r3
 800e880:	f7f4 fb86 	bl	8002f90 <__aeabi_i2d>
 800e884:	0002      	movs	r2, r0
 800e886:	000b      	movs	r3, r1
 800e888:	0020      	movs	r0, r4
 800e88a:	0029      	movs	r1, r5
 800e88c:	f7f2 fdbe 	bl	800140c <__aeabi_dadd>
 800e890:	0002      	movs	r2, r0
 800e892:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e894:	0010      	movs	r0, r2
 800e896:	0019      	movs	r1, r3
 800e898:	f7f1 fe92 	bl	80005c0 <__aeabi_d2uiz>
 800e89c:	0003      	movs	r3, r0
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	4690      	mov	r8, r2

						cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800e8a2:	2314      	movs	r3, #20
 800e8a4:	18fb      	adds	r3, r7, r3
 800e8a6:	781a      	ldrb	r2, [r3, #0]
 800e8a8:	4bc5      	ldr	r3, [pc, #788]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800e8aa:	0092      	lsls	r2, r2, #2
 800e8ac:	58d3      	ldr	r3, [r2, r3]
 800e8ae:	1c18      	adds	r0, r3, #0
 800e8b0:	f7f4 fbc4 	bl	800303c <__aeabi_f2d>
 800e8b4:	0002      	movs	r2, r0
 800e8b6:	000b      	movs	r3, r1
 800e8b8:	0010      	movs	r0, r2
 800e8ba:	0019      	movs	r1, r3
 800e8bc:	f005 fe2c 	bl	8014518 <cos>
 800e8c0:	0004      	movs	r4, r0
 800e8c2:	000d      	movs	r5, r1
 800e8c4:	4bbf      	ldr	r3, [pc, #764]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	0018      	movs	r0, r3
 800e8ca:	f7f4 fb61 	bl	8002f90 <__aeabi_i2d>
 800e8ce:	0002      	movs	r2, r0
 800e8d0:	000b      	movs	r3, r1
 800e8d2:	0020      	movs	r0, r4
 800e8d4:	0029      	movs	r1, r5
 800e8d6:	f7f3 fd09 	bl	80022ec <__aeabi_dmul>
 800e8da:	0002      	movs	r2, r0
 800e8dc:	000b      	movs	r3, r1
 800e8de:	0014      	movs	r4, r2
 800e8e0:	001d      	movs	r5, r3
								+ secondsStartX,
 800e8e2:	4bba      	ldr	r3, [pc, #744]	; (800ebcc <interfaceDrawLayer+0x1960>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	0018      	movs	r0, r3
 800e8e8:	f7f4 fb52 	bl	8002f90 <__aeabi_i2d>
 800e8ec:	0002      	movs	r2, r0
 800e8ee:	000b      	movs	r3, r1
 800e8f0:	0020      	movs	r0, r4
 800e8f2:	0029      	movs	r1, r5
 800e8f4:	f7f2 fd8a 	bl	800140c <__aeabi_dadd>
 800e8f8:	0002      	movs	r2, r0
 800e8fa:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e8fc:	0010      	movs	r0, r2
 800e8fe:	0019      	movs	r1, r3
 800e900:	f7f1 fe5e 	bl	80005c0 <__aeabi_d2uiz>
 800e904:	0003      	movs	r3, r0
 800e906:	b29a      	uxth	r2, r3
 800e908:	4691      	mov	r9, r2
						sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800e90a:	2314      	movs	r3, #20
 800e90c:	18fb      	adds	r3, r7, r3
 800e90e:	781a      	ldrb	r2, [r3, #0]
 800e910:	4bab      	ldr	r3, [pc, #684]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800e912:	0092      	lsls	r2, r2, #2
 800e914:	58d3      	ldr	r3, [r2, r3]
 800e916:	1c18      	adds	r0, r3, #0
 800e918:	f7f4 fb90 	bl	800303c <__aeabi_f2d>
 800e91c:	0002      	movs	r2, r0
 800e91e:	000b      	movs	r3, r1
 800e920:	0010      	movs	r0, r2
 800e922:	0019      	movs	r1, r3
 800e924:	f005 fe3a 	bl	801459c <sin>
 800e928:	0004      	movs	r4, r0
 800e92a:	000d      	movs	r5, r1
 800e92c:	4ba5      	ldr	r3, [pc, #660]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	0018      	movs	r0, r3
 800e932:	f7f4 fb2d 	bl	8002f90 <__aeabi_i2d>
 800e936:	0002      	movs	r2, r0
 800e938:	000b      	movs	r3, r1
 800e93a:	0020      	movs	r0, r4
 800e93c:	0029      	movs	r1, r5
 800e93e:	f7f3 fcd5 	bl	80022ec <__aeabi_dmul>
 800e942:	0002      	movs	r2, r0
 800e944:	000b      	movs	r3, r1
 800e946:	0014      	movs	r4, r2
 800e948:	001d      	movs	r5, r3
								+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800e94a:	4ba1      	ldr	r3, [pc, #644]	; (800ebd0 <interfaceDrawLayer+0x1964>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	0018      	movs	r0, r3
 800e950:	f7f4 fb1e 	bl	8002f90 <__aeabi_i2d>
 800e954:	0002      	movs	r2, r0
 800e956:	000b      	movs	r3, r1
 800e958:	0020      	movs	r0, r4
 800e95a:	0029      	movs	r1, r5
 800e95c:	f7f2 fd56 	bl	800140c <__aeabi_dadd>
 800e960:	0002      	movs	r2, r0
 800e962:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e964:	0010      	movs	r0, r2
 800e966:	0019      	movs	r1, r3
 800e968:	f7f1 fe2a 	bl	80005c0 <__aeabi_d2uiz>
 800e96c:	0003      	movs	r3, r0
 800e96e:	b29a      	uxth	r2, r3
 800e970:	4b98      	ldr	r3, [pc, #608]	; (800ebd4 <interfaceDrawLayer+0x1968>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	b2db      	uxtb	r3, r3
 800e976:	b29b      	uxth	r3, r3
 800e978:	2100      	movs	r1, #0
 800e97a:	9102      	str	r1, [sp, #8]
 800e97c:	2101      	movs	r1, #1
 800e97e:	9101      	str	r1, [sp, #4]
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	0013      	movs	r3, r2
 800e984:	464a      	mov	r2, r9
 800e986:	4641      	mov	r1, r8
 800e988:	0030      	movs	r0, r6
 800e98a:	f7fa fa9b 	bl	8008ec4 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 3 == 0) {
 800e98e:	2414      	movs	r4, #20
 800e990:	193b      	adds	r3, r7, r4
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2103      	movs	r1, #3
 800e996:	0018      	movs	r0, r3
 800e998:	f7f1 fc46 	bl	8000228 <__aeabi_uidivmod>
 800e99c:	000b      	movs	r3, r1
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d000      	beq.n	800e9a6 <interfaceDrawLayer+0x173a>
 800e9a4:	e0e5      	b.n	800eb72 <interfaceDrawLayer+0x1906>
					Paint_DrawLine(
							cos(secondsIndexAngle[i])
 800e9a6:	193b      	adds	r3, r7, r4
 800e9a8:	781a      	ldrb	r2, [r3, #0]
 800e9aa:	4b85      	ldr	r3, [pc, #532]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800e9ac:	0092      	lsls	r2, r2, #2
 800e9ae:	58d3      	ldr	r3, [r2, r3]
 800e9b0:	1c18      	adds	r0, r3, #0
 800e9b2:	f7f4 fb43 	bl	800303c <__aeabi_f2d>
 800e9b6:	0002      	movs	r2, r0
 800e9b8:	000b      	movs	r3, r1
 800e9ba:	0010      	movs	r0, r2
 800e9bc:	0019      	movs	r1, r3
 800e9be:	f005 fdab 	bl	8014518 <cos>
 800e9c2:	0004      	movs	r4, r0
 800e9c4:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800e9c6:	4b7f      	ldr	r3, [pc, #508]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	001a      	movs	r2, r3
 800e9cc:	4b7e      	ldr	r3, [pc, #504]	; (800ebc8 <interfaceDrawLayer+0x195c>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	3305      	adds	r3, #5
 800e9d2:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	f7f4 fadb 	bl	8002f90 <__aeabi_i2d>
 800e9da:	0002      	movs	r2, r0
 800e9dc:	000b      	movs	r3, r1
 800e9de:	0020      	movs	r0, r4
 800e9e0:	0029      	movs	r1, r5
 800e9e2:	f7f3 fc83 	bl	80022ec <__aeabi_dmul>
 800e9e6:	0002      	movs	r2, r0
 800e9e8:	000b      	movs	r3, r1
 800e9ea:	0014      	movs	r4, r2
 800e9ec:	001d      	movs	r5, r3
									+ secondsStartX,
 800e9ee:	4b77      	ldr	r3, [pc, #476]	; (800ebcc <interfaceDrawLayer+0x1960>)
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f7f4 facc 	bl	8002f90 <__aeabi_i2d>
 800e9f8:	0002      	movs	r2, r0
 800e9fa:	000b      	movs	r3, r1
 800e9fc:	0020      	movs	r0, r4
 800e9fe:	0029      	movs	r1, r5
 800ea00:	f7f2 fd04 	bl	800140c <__aeabi_dadd>
 800ea04:	0002      	movs	r2, r0
 800ea06:	000b      	movs	r3, r1
					Paint_DrawLine(
 800ea08:	0010      	movs	r0, r2
 800ea0a:	0019      	movs	r1, r3
 800ea0c:	f7f1 fdd8 	bl	80005c0 <__aeabi_d2uiz>
 800ea10:	0003      	movs	r3, r0
 800ea12:	b29e      	uxth	r6, r3
							sin(secondsIndexAngle[i])
 800ea14:	2414      	movs	r4, #20
 800ea16:	193b      	adds	r3, r7, r4
 800ea18:	781a      	ldrb	r2, [r3, #0]
 800ea1a:	4b69      	ldr	r3, [pc, #420]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800ea1c:	0092      	lsls	r2, r2, #2
 800ea1e:	58d3      	ldr	r3, [r2, r3]
 800ea20:	1c18      	adds	r0, r3, #0
 800ea22:	f7f4 fb0b 	bl	800303c <__aeabi_f2d>
 800ea26:	0002      	movs	r2, r0
 800ea28:	000b      	movs	r3, r1
 800ea2a:	0010      	movs	r0, r2
 800ea2c:	0019      	movs	r1, r3
 800ea2e:	f005 fdb5 	bl	801459c <sin>
 800ea32:	0004      	movs	r4, r0
 800ea34:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800ea36:	4b63      	ldr	r3, [pc, #396]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	001a      	movs	r2, r3
 800ea3c:	4b62      	ldr	r3, [pc, #392]	; (800ebc8 <interfaceDrawLayer+0x195c>)
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	3305      	adds	r3, #5
 800ea42:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800ea44:	0018      	movs	r0, r3
 800ea46:	f7f4 faa3 	bl	8002f90 <__aeabi_i2d>
 800ea4a:	0002      	movs	r2, r0
 800ea4c:	000b      	movs	r3, r1
 800ea4e:	0020      	movs	r0, r4
 800ea50:	0029      	movs	r1, r5
 800ea52:	f7f3 fc4b 	bl	80022ec <__aeabi_dmul>
 800ea56:	0002      	movs	r2, r0
 800ea58:	000b      	movs	r3, r1
 800ea5a:	0014      	movs	r4, r2
 800ea5c:	001d      	movs	r5, r3
									+ secondsStartY,
 800ea5e:	4b5c      	ldr	r3, [pc, #368]	; (800ebd0 <interfaceDrawLayer+0x1964>)
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	0018      	movs	r0, r3
 800ea64:	f7f4 fa94 	bl	8002f90 <__aeabi_i2d>
 800ea68:	0002      	movs	r2, r0
 800ea6a:	000b      	movs	r3, r1
 800ea6c:	0020      	movs	r0, r4
 800ea6e:	0029      	movs	r1, r5
 800ea70:	f7f2 fccc 	bl	800140c <__aeabi_dadd>
 800ea74:	0002      	movs	r2, r0
 800ea76:	000b      	movs	r3, r1
					Paint_DrawLine(
 800ea78:	0010      	movs	r0, r2
 800ea7a:	0019      	movs	r1, r3
 800ea7c:	f7f1 fda0 	bl	80005c0 <__aeabi_d2uiz>
 800ea80:	0003      	movs	r3, r0
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4698      	mov	r8, r3

							cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800ea86:	2414      	movs	r4, #20
 800ea88:	193b      	adds	r3, r7, r4
 800ea8a:	781a      	ldrb	r2, [r3, #0]
 800ea8c:	4b4c      	ldr	r3, [pc, #304]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800ea8e:	0092      	lsls	r2, r2, #2
 800ea90:	58d3      	ldr	r3, [r2, r3]
 800ea92:	1c18      	adds	r0, r3, #0
 800ea94:	f7f4 fad2 	bl	800303c <__aeabi_f2d>
 800ea98:	0002      	movs	r2, r0
 800ea9a:	000b      	movs	r3, r1
 800ea9c:	0010      	movs	r0, r2
 800ea9e:	0019      	movs	r1, r3
 800eaa0:	f005 fd3a 	bl	8014518 <cos>
 800eaa4:	0004      	movs	r4, r0
 800eaa6:	000d      	movs	r5, r1
 800eaa8:	4b46      	ldr	r3, [pc, #280]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	0018      	movs	r0, r3
 800eaae:	f7f4 fa6f 	bl	8002f90 <__aeabi_i2d>
 800eab2:	0002      	movs	r2, r0
 800eab4:	000b      	movs	r3, r1
 800eab6:	0020      	movs	r0, r4
 800eab8:	0029      	movs	r1, r5
 800eaba:	f7f3 fc17 	bl	80022ec <__aeabi_dmul>
 800eabe:	0002      	movs	r2, r0
 800eac0:	000b      	movs	r3, r1
 800eac2:	0014      	movs	r4, r2
 800eac4:	001d      	movs	r5, r3
									+ secondsStartX,
 800eac6:	4b41      	ldr	r3, [pc, #260]	; (800ebcc <interfaceDrawLayer+0x1960>)
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	0018      	movs	r0, r3
 800eacc:	f7f4 fa60 	bl	8002f90 <__aeabi_i2d>
 800ead0:	0002      	movs	r2, r0
 800ead2:	000b      	movs	r3, r1
 800ead4:	0020      	movs	r0, r4
 800ead6:	0029      	movs	r1, r5
 800ead8:	f7f2 fc98 	bl	800140c <__aeabi_dadd>
 800eadc:	0002      	movs	r2, r0
 800eade:	000b      	movs	r3, r1
					Paint_DrawLine(
 800eae0:	0010      	movs	r0, r2
 800eae2:	0019      	movs	r1, r3
 800eae4:	f7f1 fd6c 	bl	80005c0 <__aeabi_d2uiz>
 800eae8:	0003      	movs	r3, r0
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	4699      	mov	r9, r3
							sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800eaee:	2414      	movs	r4, #20
 800eaf0:	193b      	adds	r3, r7, r4
 800eaf2:	781a      	ldrb	r2, [r3, #0]
 800eaf4:	4b32      	ldr	r3, [pc, #200]	; (800ebc0 <interfaceDrawLayer+0x1954>)
 800eaf6:	0092      	lsls	r2, r2, #2
 800eaf8:	58d3      	ldr	r3, [r2, r3]
 800eafa:	1c18      	adds	r0, r3, #0
 800eafc:	f7f4 fa9e 	bl	800303c <__aeabi_f2d>
 800eb00:	0002      	movs	r2, r0
 800eb02:	000b      	movs	r3, r1
 800eb04:	0010      	movs	r0, r2
 800eb06:	0019      	movs	r1, r3
 800eb08:	f005 fd48 	bl	801459c <sin>
 800eb0c:	0004      	movs	r4, r0
 800eb0e:	000d      	movs	r5, r1
 800eb10:	4b2c      	ldr	r3, [pc, #176]	; (800ebc4 <interfaceDrawLayer+0x1958>)
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	0018      	movs	r0, r3
 800eb16:	f7f4 fa3b 	bl	8002f90 <__aeabi_i2d>
 800eb1a:	0002      	movs	r2, r0
 800eb1c:	000b      	movs	r3, r1
 800eb1e:	0020      	movs	r0, r4
 800eb20:	0029      	movs	r1, r5
 800eb22:	f7f3 fbe3 	bl	80022ec <__aeabi_dmul>
 800eb26:	0002      	movs	r2, r0
 800eb28:	000b      	movs	r3, r1
 800eb2a:	0014      	movs	r4, r2
 800eb2c:	001d      	movs	r5, r3
									+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800eb2e:	4b28      	ldr	r3, [pc, #160]	; (800ebd0 <interfaceDrawLayer+0x1964>)
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	0018      	movs	r0, r3
 800eb34:	f7f4 fa2c 	bl	8002f90 <__aeabi_i2d>
 800eb38:	0002      	movs	r2, r0
 800eb3a:	000b      	movs	r3, r1
 800eb3c:	0020      	movs	r0, r4
 800eb3e:	0029      	movs	r1, r5
 800eb40:	f7f2 fc64 	bl	800140c <__aeabi_dadd>
 800eb44:	0002      	movs	r2, r0
 800eb46:	000b      	movs	r3, r1
					Paint_DrawLine(
 800eb48:	0010      	movs	r0, r2
 800eb4a:	0019      	movs	r1, r3
 800eb4c:	f7f1 fd38 	bl	80005c0 <__aeabi_d2uiz>
 800eb50:	0003      	movs	r3, r0
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	4b1f      	ldr	r3, [pc, #124]	; (800ebd4 <interfaceDrawLayer+0x1968>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	9102      	str	r1, [sp, #8]
 800eb60:	2101      	movs	r1, #1
 800eb62:	9101      	str	r1, [sp, #4]
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	0013      	movs	r3, r2
 800eb68:	464a      	mov	r2, r9
 800eb6a:	4641      	mov	r1, r8
 800eb6c:	0030      	movs	r0, r6
 800eb6e:	f7fa f9a9 	bl	8008ec4 <Paint_DrawLine>
			for (uint8_t i = 0; i < 12; i++) {
 800eb72:	2114      	movs	r1, #20
 800eb74:	187b      	adds	r3, r7, r1
 800eb76:	781a      	ldrb	r2, [r3, #0]
 800eb78:	187b      	adds	r3, r7, r1
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	701a      	strb	r2, [r3, #0]
 800eb7e:	2314      	movs	r3, #20
 800eb80:	18fb      	adds	r3, r7, r3
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	2b0b      	cmp	r3, #11
 800eb86:	d800      	bhi.n	800eb8a <interfaceDrawLayer+0x191e>
 800eb88:	e61c      	b.n	800e7c4 <interfaceDrawLayer+0x1558>
				}
			}

			//										SECONDS DIGITS

			Paint_DrawString_EN(secondsStartX - 8, secondsStartY - 20, "60",
 800eb8a:	4b10      	ldr	r3, [pc, #64]	; (800ebcc <interfaceDrawLayer+0x1960>)
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	3b08      	subs	r3, #8
 800eb92:	b298      	uxth	r0, r3
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <interfaceDrawLayer+0x1964>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	3b14      	subs	r3, #20
 800eb9c:	b299      	uxth	r1, r3
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <interfaceDrawLayer+0x1968>)
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	4a0c      	ldr	r2, [pc, #48]	; (800ebd8 <interfaceDrawLayer+0x196c>)
 800eba8:	7812      	ldrb	r2, [r2, #0]
 800ebaa:	b2d2      	uxtb	r2, r2
 800ebac:	b292      	uxth	r2, r2
 800ebae:	4d0b      	ldr	r5, [pc, #44]	; (800ebdc <interfaceDrawLayer+0x1970>)
 800ebb0:	4c0b      	ldr	r4, [pc, #44]	; (800ebe0 <interfaceDrawLayer+0x1974>)
 800ebb2:	9201      	str	r2, [sp, #4]
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	002b      	movs	r3, r5
 800ebb8:	0022      	movs	r2, r4
 800ebba:	f7fa ff4d 	bl	8009a58 <Paint_DrawString_EN>
 800ebbe:	e011      	b.n	800ebe4 <interfaceDrawLayer+0x1978>
 800ebc0:	2000040c 	.word	0x2000040c
 800ebc4:	200001f0 	.word	0x200001f0
 800ebc8:	200001fa 	.word	0x200001fa
 800ebcc:	200006ea 	.word	0x200006ea
 800ebd0:	2000037b 	.word	0x2000037b
 800ebd4:	2000033a 	.word	0x2000033a
 800ebd8:	200006b3 	.word	0x200006b3
 800ebdc:	2000000c 	.word	0x2000000c
 800ebe0:	08016288 	.word	0x08016288
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX + 2, secondsStartY + 2, "20",
 800ebe4:	4bf9      	ldr	r3, [pc, #996]	; (800efcc <interfaceDrawLayer+0x1d60>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	3302      	adds	r3, #2
 800ebec:	b298      	uxth	r0, r3
 800ebee:	4bf8      	ldr	r3, [pc, #992]	; (800efd0 <interfaceDrawLayer+0x1d64>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	b299      	uxth	r1, r3
 800ebf8:	4bf6      	ldr	r3, [pc, #984]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	4af5      	ldr	r2, [pc, #980]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ec02:	7812      	ldrb	r2, [r2, #0]
 800ec04:	b2d2      	uxtb	r2, r2
 800ec06:	b292      	uxth	r2, r2
 800ec08:	4df4      	ldr	r5, [pc, #976]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800ec0a:	4cf5      	ldr	r4, [pc, #980]	; (800efe0 <interfaceDrawLayer+0x1d74>)
 800ec0c:	9201      	str	r2, [sp, #4]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	002b      	movs	r3, r5
 800ec12:	0022      	movs	r2, r4
 800ec14:	f7fa ff20 	bl	8009a58 <Paint_DrawString_EN>
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX - 18, secondsStartY + 2, "40",
 800ec18:	4bec      	ldr	r3, [pc, #944]	; (800efcc <interfaceDrawLayer+0x1d60>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	3b12      	subs	r3, #18
 800ec20:	b298      	uxth	r0, r3
 800ec22:	4beb      	ldr	r3, [pc, #940]	; (800efd0 <interfaceDrawLayer+0x1d64>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	3302      	adds	r3, #2
 800ec2a:	b299      	uxth	r1, r3
 800ec2c:	4be9      	ldr	r3, [pc, #932]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	4ae8      	ldr	r2, [pc, #928]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ec36:	7812      	ldrb	r2, [r2, #0]
 800ec38:	b2d2      	uxtb	r2, r2
 800ec3a:	b292      	uxth	r2, r2
 800ec3c:	4de7      	ldr	r5, [pc, #924]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800ec3e:	4ce9      	ldr	r4, [pc, #932]	; (800efe4 <interfaceDrawLayer+0x1d78>)
 800ec40:	9201      	str	r2, [sp, #4]
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	002b      	movs	r3, r5
 800ec46:	0022      	movs	r2, r4
 800ec48:	f7fa ff06 	bl	8009a58 <Paint_DrawString_EN>

		}

		//										MAIN INDEX

		for (uint8_t i = 1; i < 12; i++) {
 800ec4c:	2313      	movs	r3, #19
 800ec4e:	18fb      	adds	r3, r7, r3
 800ec50:	2201      	movs	r2, #1
 800ec52:	701a      	strb	r2, [r3, #0]
 800ec54:	e0ea      	b.n	800ee2c <interfaceDrawLayer+0x1bc0>

			Paint_DrawLine(
					cos(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800ec56:	2313      	movs	r3, #19
 800ec58:	18fb      	adds	r3, r7, r3
 800ec5a:	781a      	ldrb	r2, [r3, #0]
 800ec5c:	4be2      	ldr	r3, [pc, #904]	; (800efe8 <interfaceDrawLayer+0x1d7c>)
 800ec5e:	0092      	lsls	r2, r2, #2
 800ec60:	58d3      	ldr	r3, [r2, r3]
 800ec62:	1c18      	adds	r0, r3, #0
 800ec64:	f7f4 f9ea 	bl	800303c <__aeabi_f2d>
 800ec68:	0002      	movs	r2, r0
 800ec6a:	000b      	movs	r3, r1
 800ec6c:	0010      	movs	r0, r2
 800ec6e:	0019      	movs	r1, r3
 800ec70:	f005 fc52 	bl	8014518 <cos>
 800ec74:	0004      	movs	r4, r0
 800ec76:	000d      	movs	r5, r1
 800ec78:	4bdc      	ldr	r3, [pc, #880]	; (800efec <interfaceDrawLayer+0x1d80>)
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	001a      	movs	r2, r3
 800ec7e:	4bdc      	ldr	r3, [pc, #880]	; (800eff0 <interfaceDrawLayer+0x1d84>)
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	0018      	movs	r0, r3
 800ec86:	f7f4 f983 	bl	8002f90 <__aeabi_i2d>
 800ec8a:	0002      	movs	r2, r0
 800ec8c:	000b      	movs	r3, r1
 800ec8e:	0020      	movs	r0, r4
 800ec90:	0029      	movs	r1, r5
 800ec92:	f7f3 fb2b 	bl	80022ec <__aeabi_dmul>
 800ec96:	0002      	movs	r2, r0
 800ec98:	000b      	movs	r3, r1
 800ec9a:	0014      	movs	r4, r2
 800ec9c:	001d      	movs	r5, r3
							+ mainStartX,
 800ec9e:	4bd5      	ldr	r3, [pc, #852]	; (800eff4 <interfaceDrawLayer+0x1d88>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	0018      	movs	r0, r3
 800eca4:	f7f4 f974 	bl	8002f90 <__aeabi_i2d>
 800eca8:	0002      	movs	r2, r0
 800ecaa:	000b      	movs	r3, r1
 800ecac:	0020      	movs	r0, r4
 800ecae:	0029      	movs	r1, r5
 800ecb0:	f7f2 fbac 	bl	800140c <__aeabi_dadd>
 800ecb4:	0002      	movs	r2, r0
 800ecb6:	000b      	movs	r3, r1
			Paint_DrawLine(
 800ecb8:	0010      	movs	r0, r2
 800ecba:	0019      	movs	r1, r3
 800ecbc:	f7f1 fc80 	bl	80005c0 <__aeabi_d2uiz>
 800ecc0:	0003      	movs	r3, r0
 800ecc2:	b29e      	uxth	r6, r3
					sin(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800ecc4:	2313      	movs	r3, #19
 800ecc6:	18fb      	adds	r3, r7, r3
 800ecc8:	781a      	ldrb	r2, [r3, #0]
 800ecca:	4bc7      	ldr	r3, [pc, #796]	; (800efe8 <interfaceDrawLayer+0x1d7c>)
 800eccc:	0092      	lsls	r2, r2, #2
 800ecce:	58d3      	ldr	r3, [r2, r3]
 800ecd0:	1c18      	adds	r0, r3, #0
 800ecd2:	f7f4 f9b3 	bl	800303c <__aeabi_f2d>
 800ecd6:	0002      	movs	r2, r0
 800ecd8:	000b      	movs	r3, r1
 800ecda:	0010      	movs	r0, r2
 800ecdc:	0019      	movs	r1, r3
 800ecde:	f005 fc5d 	bl	801459c <sin>
 800ece2:	0004      	movs	r4, r0
 800ece4:	000d      	movs	r5, r1
 800ece6:	4bc1      	ldr	r3, [pc, #772]	; (800efec <interfaceDrawLayer+0x1d80>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	001a      	movs	r2, r3
 800ecec:	4bc0      	ldr	r3, [pc, #768]	; (800eff0 <interfaceDrawLayer+0x1d84>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	0018      	movs	r0, r3
 800ecf4:	f7f4 f94c 	bl	8002f90 <__aeabi_i2d>
 800ecf8:	0002      	movs	r2, r0
 800ecfa:	000b      	movs	r3, r1
 800ecfc:	0020      	movs	r0, r4
 800ecfe:	0029      	movs	r1, r5
 800ed00:	f7f3 faf4 	bl	80022ec <__aeabi_dmul>
 800ed04:	0002      	movs	r2, r0
 800ed06:	000b      	movs	r3, r1
 800ed08:	0014      	movs	r4, r2
 800ed0a:	001d      	movs	r5, r3
							+ mainStartY,
 800ed0c:	4bba      	ldr	r3, [pc, #744]	; (800eff8 <interfaceDrawLayer+0x1d8c>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	0018      	movs	r0, r3
 800ed12:	f7f4 f93d 	bl	8002f90 <__aeabi_i2d>
 800ed16:	0002      	movs	r2, r0
 800ed18:	000b      	movs	r3, r1
 800ed1a:	0020      	movs	r0, r4
 800ed1c:	0029      	movs	r1, r5
 800ed1e:	f7f2 fb75 	bl	800140c <__aeabi_dadd>
 800ed22:	0002      	movs	r2, r0
 800ed24:	000b      	movs	r3, r1
			Paint_DrawLine(
 800ed26:	0010      	movs	r0, r2
 800ed28:	0019      	movs	r1, r3
 800ed2a:	f7f1 fc49 	bl	80005c0 <__aeabi_d2uiz>
 800ed2e:	0003      	movs	r3, r0
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	4690      	mov	r8, r2

					cos(mainIndexAngle[i]) * (mainBoardRadius) + mainStartX,
 800ed34:	2313      	movs	r3, #19
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	781a      	ldrb	r2, [r3, #0]
 800ed3a:	4bab      	ldr	r3, [pc, #684]	; (800efe8 <interfaceDrawLayer+0x1d7c>)
 800ed3c:	0092      	lsls	r2, r2, #2
 800ed3e:	58d3      	ldr	r3, [r2, r3]
 800ed40:	1c18      	adds	r0, r3, #0
 800ed42:	f7f4 f97b 	bl	800303c <__aeabi_f2d>
 800ed46:	0002      	movs	r2, r0
 800ed48:	000b      	movs	r3, r1
 800ed4a:	0010      	movs	r0, r2
 800ed4c:	0019      	movs	r1, r3
 800ed4e:	f005 fbe3 	bl	8014518 <cos>
 800ed52:	0004      	movs	r4, r0
 800ed54:	000d      	movs	r5, r1
 800ed56:	4ba5      	ldr	r3, [pc, #660]	; (800efec <interfaceDrawLayer+0x1d80>)
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	f7f4 f918 	bl	8002f90 <__aeabi_i2d>
 800ed60:	0002      	movs	r2, r0
 800ed62:	000b      	movs	r3, r1
 800ed64:	0020      	movs	r0, r4
 800ed66:	0029      	movs	r1, r5
 800ed68:	f7f3 fac0 	bl	80022ec <__aeabi_dmul>
 800ed6c:	0002      	movs	r2, r0
 800ed6e:	000b      	movs	r3, r1
 800ed70:	0014      	movs	r4, r2
 800ed72:	001d      	movs	r5, r3
 800ed74:	4b9f      	ldr	r3, [pc, #636]	; (800eff4 <interfaceDrawLayer+0x1d88>)
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f7f4 f909 	bl	8002f90 <__aeabi_i2d>
 800ed7e:	0002      	movs	r2, r0
 800ed80:	000b      	movs	r3, r1
 800ed82:	0020      	movs	r0, r4
 800ed84:	0029      	movs	r1, r5
 800ed86:	f7f2 fb41 	bl	800140c <__aeabi_dadd>
 800ed8a:	0002      	movs	r2, r0
 800ed8c:	000b      	movs	r3, r1
			Paint_DrawLine(
 800ed8e:	0010      	movs	r0, r2
 800ed90:	0019      	movs	r1, r3
 800ed92:	f7f1 fc15 	bl	80005c0 <__aeabi_d2uiz>
 800ed96:	0003      	movs	r3, r0
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	4691      	mov	r9, r2
					sin(mainIndexAngle[i]) * (mainBoardRadius) + mainStartY,
 800ed9c:	2313      	movs	r3, #19
 800ed9e:	18fb      	adds	r3, r7, r3
 800eda0:	781a      	ldrb	r2, [r3, #0]
 800eda2:	4b91      	ldr	r3, [pc, #580]	; (800efe8 <interfaceDrawLayer+0x1d7c>)
 800eda4:	0092      	lsls	r2, r2, #2
 800eda6:	58d3      	ldr	r3, [r2, r3]
 800eda8:	1c18      	adds	r0, r3, #0
 800edaa:	f7f4 f947 	bl	800303c <__aeabi_f2d>
 800edae:	0002      	movs	r2, r0
 800edb0:	000b      	movs	r3, r1
 800edb2:	0010      	movs	r0, r2
 800edb4:	0019      	movs	r1, r3
 800edb6:	f005 fbf1 	bl	801459c <sin>
 800edba:	0004      	movs	r4, r0
 800edbc:	000d      	movs	r5, r1
 800edbe:	4b8b      	ldr	r3, [pc, #556]	; (800efec <interfaceDrawLayer+0x1d80>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	0018      	movs	r0, r3
 800edc4:	f7f4 f8e4 	bl	8002f90 <__aeabi_i2d>
 800edc8:	0002      	movs	r2, r0
 800edca:	000b      	movs	r3, r1
 800edcc:	0020      	movs	r0, r4
 800edce:	0029      	movs	r1, r5
 800edd0:	f7f3 fa8c 	bl	80022ec <__aeabi_dmul>
 800edd4:	0002      	movs	r2, r0
 800edd6:	000b      	movs	r3, r1
 800edd8:	0014      	movs	r4, r2
 800edda:	001d      	movs	r5, r3
 800eddc:	4b86      	ldr	r3, [pc, #536]	; (800eff8 <interfaceDrawLayer+0x1d8c>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	0018      	movs	r0, r3
 800ede2:	f7f4 f8d5 	bl	8002f90 <__aeabi_i2d>
 800ede6:	0002      	movs	r2, r0
 800ede8:	000b      	movs	r3, r1
 800edea:	0020      	movs	r0, r4
 800edec:	0029      	movs	r1, r5
 800edee:	f7f2 fb0d 	bl	800140c <__aeabi_dadd>
 800edf2:	0002      	movs	r2, r0
 800edf4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800edf6:	0010      	movs	r0, r2
 800edf8:	0019      	movs	r1, r3
 800edfa:	f7f1 fbe1 	bl	80005c0 <__aeabi_d2uiz>
 800edfe:	0003      	movs	r3, r0
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	4b75      	ldr	r3, [pc, #468]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	9102      	str	r1, [sp, #8]
 800ee0e:	2101      	movs	r1, #1
 800ee10:	9101      	str	r1, [sp, #4]
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	0013      	movs	r3, r2
 800ee16:	464a      	mov	r2, r9
 800ee18:	4641      	mov	r1, r8
 800ee1a:	0030      	movs	r0, r6
 800ee1c:	f7fa f852 	bl	8008ec4 <Paint_DrawLine>
		for (uint8_t i = 1; i < 12; i++) {
 800ee20:	2113      	movs	r1, #19
 800ee22:	187b      	adds	r3, r7, r1
 800ee24:	781a      	ldrb	r2, [r3, #0]
 800ee26:	187b      	adds	r3, r7, r1
 800ee28:	3201      	adds	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
 800ee2c:	2313      	movs	r3, #19
 800ee2e:	18fb      	adds	r3, r7, r3
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b0b      	cmp	r3, #11
 800ee34:	d800      	bhi.n	800ee38 <interfaceDrawLayer+0x1bcc>
 800ee36:	e70e      	b.n	800ec56 <interfaceDrawLayer+0x19ea>

		}

	}

	if (layer == 3) {		//pointers
 800ee38:	1dfb      	adds	r3, r7, #7
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	d001      	beq.n	800ee44 <interfaceDrawLayer+0x1bd8>
 800ee40:	f000 feaa 	bl	800fb98 <interfaceDrawLayer+0x292c>

		//										METER

		if (showMeter == 1) {
 800ee44:	4b6d      	ldr	r3, [pc, #436]	; (800effc <interfaceDrawLayer+0x1d90>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d14d      	bne.n	800eee8 <interfaceDrawLayer+0x1c7c>
			Paint_DrawString_EN(meterX + 2, meterY + 2, voltagePassive, &Font16,
 800ee4c:	4b6c      	ldr	r3, [pc, #432]	; (800f000 <interfaceDrawLayer+0x1d94>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	3302      	adds	r3, #2
 800ee54:	b298      	uxth	r0, r3
 800ee56:	4b6b      	ldr	r3, [pc, #428]	; (800f004 <interfaceDrawLayer+0x1d98>)
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	3302      	adds	r3, #2
 800ee5e:	b299      	uxth	r1, r3
 800ee60:	4b5d      	ldr	r3, [pc, #372]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4a5a      	ldr	r2, [pc, #360]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ee6a:	7812      	ldrb	r2, [r2, #0]
 800ee6c:	b2d2      	uxtb	r2, r2
 800ee6e:	b292      	uxth	r2, r2
 800ee70:	4d65      	ldr	r5, [pc, #404]	; (800f008 <interfaceDrawLayer+0x1d9c>)
 800ee72:	4c66      	ldr	r4, [pc, #408]	; (800f00c <interfaceDrawLayer+0x1da0>)
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	002b      	movs	r3, r5
 800ee7a:	0022      	movs	r2, r4
 800ee7c:	f7fa fdec 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 18, voltageDrop, &Font16,
 800ee80:	4b5f      	ldr	r3, [pc, #380]	; (800f000 <interfaceDrawLayer+0x1d94>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3302      	adds	r3, #2
 800ee88:	b298      	uxth	r0, r3
 800ee8a:	4b5e      	ldr	r3, [pc, #376]	; (800f004 <interfaceDrawLayer+0x1d98>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	3312      	adds	r3, #18
 800ee92:	b299      	uxth	r1, r3
 800ee94:	4b50      	ldr	r3, [pc, #320]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	4a4d      	ldr	r2, [pc, #308]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ee9e:	7812      	ldrb	r2, [r2, #0]
 800eea0:	b2d2      	uxtb	r2, r2
 800eea2:	b292      	uxth	r2, r2
 800eea4:	4d58      	ldr	r5, [pc, #352]	; (800f008 <interfaceDrawLayer+0x1d9c>)
 800eea6:	4c5a      	ldr	r4, [pc, #360]	; (800f010 <interfaceDrawLayer+0x1da4>)
 800eea8:	9201      	str	r2, [sp, #4]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	002b      	movs	r3, r5
 800eeae:	0022      	movs	r2, r4
 800eeb0:	f7fa fdd2 	bl	8009a58 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 34, resistance, &Font16,
 800eeb4:	4b52      	ldr	r3, [pc, #328]	; (800f000 <interfaceDrawLayer+0x1d94>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	3302      	adds	r3, #2
 800eebc:	b298      	uxth	r0, r3
 800eebe:	4b51      	ldr	r3, [pc, #324]	; (800f004 <interfaceDrawLayer+0x1d98>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	3322      	adds	r3, #34	; 0x22
 800eec6:	b299      	uxth	r1, r3
 800eec8:	4b43      	ldr	r3, [pc, #268]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	b29b      	uxth	r3, r3
 800eed0:	4a40      	ldr	r2, [pc, #256]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800eed2:	7812      	ldrb	r2, [r2, #0]
 800eed4:	b2d2      	uxtb	r2, r2
 800eed6:	b292      	uxth	r2, r2
 800eed8:	4d4b      	ldr	r5, [pc, #300]	; (800f008 <interfaceDrawLayer+0x1d9c>)
 800eeda:	4c4e      	ldr	r4, [pc, #312]	; (800f014 <interfaceDrawLayer+0x1da8>)
 800eedc:	9201      	str	r2, [sp, #4]
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	002b      	movs	r3, r5
 800eee2:	0022      	movs	r2, r4
 800eee4:	f7fa fdb8 	bl	8009a58 <Paint_DrawString_EN>

		}

		//										DIGITAL INTERFACE

		if (showDigitalInterface == 1) {
 800eee8:	4b4b      	ldr	r3, [pc, #300]	; (800f018 <interfaceDrawLayer+0x1dac>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d000      	beq.n	800eef2 <interfaceDrawLayer+0x1c86>
 800eef0:	e0b7      	b.n	800f062 <interfaceDrawLayer+0x1df6>
			Paint_DrawNum(digitalX, digitalY, pressureValue, &Font12, colorMain,
 800eef2:	4b4a      	ldr	r3, [pc, #296]	; (800f01c <interfaceDrawLayer+0x1db0>)
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	b298      	uxth	r0, r3
 800eef8:	4b49      	ldr	r3, [pc, #292]	; (800f020 <interfaceDrawLayer+0x1db4>)
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	b299      	uxth	r1, r3
 800eefe:	4b49      	ldr	r3, [pc, #292]	; (800f024 <interfaceDrawLayer+0x1db8>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	001d      	movs	r5, r3
 800ef04:	4b33      	ldr	r3, [pc, #204]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4a32      	ldr	r2, [pc, #200]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ef0e:	7812      	ldrb	r2, [r2, #0]
 800ef10:	b2d2      	uxtb	r2, r2
 800ef12:	b292      	uxth	r2, r2
 800ef14:	4c31      	ldr	r4, [pc, #196]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800ef16:	9201      	str	r2, [sp, #4]
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	0023      	movs	r3, r4
 800ef1c:	002a      	movs	r2, r5
 800ef1e:	f7fa fe19 	bl	8009b54 <Paint_DrawNum>
					colorSecond);
			Paint_DrawNum(digitalX, digitalY + 12, humidityValue, &Font12,
 800ef22:	4b3e      	ldr	r3, [pc, #248]	; (800f01c <interfaceDrawLayer+0x1db0>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	b298      	uxth	r0, r3
 800ef28:	4b3d      	ldr	r3, [pc, #244]	; (800f020 <interfaceDrawLayer+0x1db4>)
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	330c      	adds	r3, #12
 800ef30:	b299      	uxth	r1, r3
 800ef32:	4b3d      	ldr	r3, [pc, #244]	; (800f028 <interfaceDrawLayer+0x1dbc>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	001d      	movs	r5, r3
 800ef38:	4b26      	ldr	r3, [pc, #152]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	4a25      	ldr	r2, [pc, #148]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ef42:	7812      	ldrb	r2, [r2, #0]
 800ef44:	b2d2      	uxtb	r2, r2
 800ef46:	b292      	uxth	r2, r2
 800ef48:	4c24      	ldr	r4, [pc, #144]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800ef4a:	9201      	str	r2, [sp, #4]
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	0023      	movs	r3, r4
 800ef50:	002a      	movs	r2, r5
 800ef52:	f7fa fdff 	bl	8009b54 <Paint_DrawNum>
					colorMain, colorSecond);

			if (temperatureValue < 0) {
 800ef56:	4b35      	ldr	r3, [pc, #212]	; (800f02c <interfaceDrawLayer+0x1dc0>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	da68      	bge.n	800f030 <interfaceDrawLayer+0x1dc4>

				Paint_DrawChar(digitalX, digitalY + 24, '-', &Font12, colorMain,
 800ef5e:	4b2f      	ldr	r3, [pc, #188]	; (800f01c <interfaceDrawLayer+0x1db0>)
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	b298      	uxth	r0, r3
 800ef64:	4b2e      	ldr	r3, [pc, #184]	; (800f020 <interfaceDrawLayer+0x1db4>)
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3318      	adds	r3, #24
 800ef6c:	b299      	uxth	r1, r3
 800ef6e:	4b19      	ldr	r3, [pc, #100]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	4a18      	ldr	r2, [pc, #96]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800ef78:	7812      	ldrb	r2, [r2, #0]
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	b292      	uxth	r2, r2
 800ef7e:	4c17      	ldr	r4, [pc, #92]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800ef80:	9201      	str	r2, [sp, #4]
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	0023      	movs	r3, r4
 800ef86:	222d      	movs	r2, #45	; 0x2d
 800ef88:	f7fa fc82 	bl	8009890 <Paint_DrawChar>
						colorSecond);
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800ef8c:	4b23      	ldr	r3, [pc, #140]	; (800f01c <interfaceDrawLayer+0x1db0>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	3308      	adds	r3, #8
 800ef94:	b298      	uxth	r0, r3
 800ef96:	4b22      	ldr	r3, [pc, #136]	; (800f020 <interfaceDrawLayer+0x1db4>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	3318      	adds	r3, #24
 800ef9e:	b299      	uxth	r1, r3
 800efa0:	4b22      	ldr	r3, [pc, #136]	; (800f02c <interfaceDrawLayer+0x1dc0>)
 800efa2:	681b      	ldr	r3, [r3, #0]
						abs(temperatureValue), &Font12, colorMain, colorSecond);
 800efa4:	17da      	asrs	r2, r3, #31
 800efa6:	189c      	adds	r4, r3, r2
 800efa8:	4054      	eors	r4, r2
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800efaa:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <interfaceDrawLayer+0x1d68>)
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	4a09      	ldr	r2, [pc, #36]	; (800efd8 <interfaceDrawLayer+0x1d6c>)
 800efb4:	7812      	ldrb	r2, [r2, #0]
 800efb6:	b2d2      	uxtb	r2, r2
 800efb8:	b292      	uxth	r2, r2
 800efba:	4d08      	ldr	r5, [pc, #32]	; (800efdc <interfaceDrawLayer+0x1d70>)
 800efbc:	9201      	str	r2, [sp, #4]
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	002b      	movs	r3, r5
 800efc2:	0022      	movs	r2, r4
 800efc4:	f7fa fdc6 	bl	8009b54 <Paint_DrawNum>
 800efc8:	e04b      	b.n	800f062 <interfaceDrawLayer+0x1df6>
 800efca:	46c0      	nop			; (mov r8, r8)
 800efcc:	200006ea 	.word	0x200006ea
 800efd0:	2000037b 	.word	0x2000037b
 800efd4:	2000033a 	.word	0x2000033a
 800efd8:	200006b3 	.word	0x200006b3
 800efdc:	2000000c 	.word	0x2000000c
 800efe0:	08016284 	.word	0x08016284
 800efe4:	0801628c 	.word	0x0801628c
 800efe8:	2000033c 	.word	0x2000033c
 800efec:	20000628 	.word	0x20000628
 800eff0:	2000043e 	.word	0x2000043e
 800eff4:	2000044b 	.word	0x2000044b
 800eff8:	20000209 	.word	0x20000209
 800effc:	200006e9 	.word	0x200006e9
 800f000:	200003b0 	.word	0x200003b0
 800f004:	200004bf 	.word	0x200004bf
 800f008:	20000014 	.word	0x20000014
 800f00c:	20000594 	.word	0x20000594
 800f010:	20000620 	.word	0x20000620
 800f014:	200006a0 	.word	0x200006a0
 800f018:	200006fe 	.word	0x200006fe
 800f01c:	20000641 	.word	0x20000641
 800f020:	200003ad 	.word	0x200003ad
 800f024:	20000634 	.word	0x20000634
 800f028:	2000020c 	.word	0x2000020c
 800f02c:	200003a8 	.word	0x200003a8
			} else {
				Paint_DrawNum(digitalX, digitalY + 24, temperatureValue,
 800f030:	4bc4      	ldr	r3, [pc, #784]	; (800f344 <interfaceDrawLayer+0x20d8>)
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	b298      	uxth	r0, r3
 800f036:	4bc4      	ldr	r3, [pc, #784]	; (800f348 <interfaceDrawLayer+0x20dc>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	3318      	adds	r3, #24
 800f03e:	b299      	uxth	r1, r3
 800f040:	4bc2      	ldr	r3, [pc, #776]	; (800f34c <interfaceDrawLayer+0x20e0>)
 800f042:	681c      	ldr	r4, [r3, #0]
 800f044:	4bc2      	ldr	r3, [pc, #776]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4ac1      	ldr	r2, [pc, #772]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f04e:	7812      	ldrb	r2, [r2, #0]
 800f050:	b2d2      	uxtb	r2, r2
 800f052:	b292      	uxth	r2, r2
 800f054:	4dc0      	ldr	r5, [pc, #768]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f056:	9201      	str	r2, [sp, #4]
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	002b      	movs	r3, r5
 800f05c:	0022      	movs	r2, r4
 800f05e:	f7fa fd79 	bl	8009b54 <Paint_DrawNum>

		}

		//										TEMPERATURE READING

		if (showThermometer == 1) {
 800f062:	4bbe      	ldr	r3, [pc, #760]	; (800f35c <interfaceDrawLayer+0x20f0>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d14c      	bne.n	800f104 <interfaceDrawLayer+0x1e98>
			if (temperatureValue < 0) {
 800f06a:	4bb8      	ldr	r3, [pc, #736]	; (800f34c <interfaceDrawLayer+0x20e0>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	da31      	bge.n	800f0d6 <interfaceDrawLayer+0x1e6a>

				Paint_DrawChar(temperatureX - 8, temperatureY, '-', &Font12,
 800f072:	4bbb      	ldr	r3, [pc, #748]	; (800f360 <interfaceDrawLayer+0x20f4>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	b29b      	uxth	r3, r3
 800f078:	3b08      	subs	r3, #8
 800f07a:	b298      	uxth	r0, r3
 800f07c:	4bb9      	ldr	r3, [pc, #740]	; (800f364 <interfaceDrawLayer+0x20f8>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	b299      	uxth	r1, r3
 800f082:	4bb3      	ldr	r3, [pc, #716]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4ab2      	ldr	r2, [pc, #712]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	b292      	uxth	r2, r2
 800f092:	4cb1      	ldr	r4, [pc, #708]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f094:	9201      	str	r2, [sp, #4]
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	0023      	movs	r3, r4
 800f09a:	222d      	movs	r2, #45	; 0x2d
 800f09c:	f7fa fbf8 	bl	8009890 <Paint_DrawChar>
						colorMain, colorSecond);
				Paint_DrawNum(temperatureX, temperatureY, abs(temperatureValue),
 800f0a0:	4baf      	ldr	r3, [pc, #700]	; (800f360 <interfaceDrawLayer+0x20f4>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	b298      	uxth	r0, r3
 800f0a6:	4baf      	ldr	r3, [pc, #700]	; (800f364 <interfaceDrawLayer+0x20f8>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	b299      	uxth	r1, r3
 800f0ac:	4ba7      	ldr	r3, [pc, #668]	; (800f34c <interfaceDrawLayer+0x20e0>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	17da      	asrs	r2, r3, #31
 800f0b2:	189c      	adds	r4, r3, r2
 800f0b4:	4054      	eors	r4, r2
 800f0b6:	4ba6      	ldr	r3, [pc, #664]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	4aa5      	ldr	r2, [pc, #660]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f0c0:	7812      	ldrb	r2, [r2, #0]
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	b292      	uxth	r2, r2
 800f0c6:	4da4      	ldr	r5, [pc, #656]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f0c8:	9201      	str	r2, [sp, #4]
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	002b      	movs	r3, r5
 800f0ce:	0022      	movs	r2, r4
 800f0d0:	f7fa fd40 	bl	8009b54 <Paint_DrawNum>
 800f0d4:	e016      	b.n	800f104 <interfaceDrawLayer+0x1e98>
						&Font12, colorMain, colorSecond);
			} else {
				Paint_DrawNum(temperatureX, temperatureY, temperatureValue,
 800f0d6:	4ba2      	ldr	r3, [pc, #648]	; (800f360 <interfaceDrawLayer+0x20f4>)
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	b298      	uxth	r0, r3
 800f0dc:	4ba1      	ldr	r3, [pc, #644]	; (800f364 <interfaceDrawLayer+0x20f8>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	b299      	uxth	r1, r3
 800f0e2:	4b9a      	ldr	r3, [pc, #616]	; (800f34c <interfaceDrawLayer+0x20e0>)
 800f0e4:	681c      	ldr	r4, [r3, #0]
 800f0e6:	4b9a      	ldr	r3, [pc, #616]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	4a99      	ldr	r2, [pc, #612]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f0f0:	7812      	ldrb	r2, [r2, #0]
 800f0f2:	b2d2      	uxtb	r2, r2
 800f0f4:	b292      	uxth	r2, r2
 800f0f6:	4d98      	ldr	r5, [pc, #608]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f0f8:	9201      	str	r2, [sp, #4]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	002b      	movs	r3, r5
 800f0fe:	0022      	movs	r2, r4
 800f100:	f7fa fd28 	bl	8009b54 <Paint_DrawNum>
			}
		}

		//										HUMIDITY READING

		if (showHigrometer == 1) {
 800f104:	4b98      	ldr	r3, [pc, #608]	; (800f368 <interfaceDrawLayer+0x20fc>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d120      	bne.n	800f14e <interfaceDrawLayer+0x1ee2>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800f10c:	4b97      	ldr	r3, [pc, #604]	; (800f36c <interfaceDrawLayer+0x2100>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	b298      	uxth	r0, r3
 800f112:	4b97      	ldr	r3, [pc, #604]	; (800f370 <interfaceDrawLayer+0x2104>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	b299      	uxth	r1, r3
 800f118:	4b94      	ldr	r3, [pc, #592]	; (800f36c <interfaceDrawLayer+0x2100>)
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3305      	adds	r3, #5
 800f120:	b29c      	uxth	r4, r3
 800f122:	4b93      	ldr	r3, [pc, #588]	; (800f370 <interfaceDrawLayer+0x2104>)
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	b29a      	uxth	r2, r3
					humidityY + (humidityValue / 2), colorSecond, DOT_PIXEL_1X1,
 800f128:	4b92      	ldr	r3, [pc, #584]	; (800f374 <interfaceDrawLayer+0x2108>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	085b      	lsrs	r3, r3, #1
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800f12e:	b29b      	uxth	r3, r3
 800f130:	18d3      	adds	r3, r2, r3
 800f132:	b29a      	uxth	r2, r3
 800f134:	4b87      	ldr	r3, [pc, #540]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	2501      	movs	r5, #1
 800f13e:	9502      	str	r5, [sp, #8]
 800f140:	2501      	movs	r5, #1
 800f142:	9501      	str	r5, [sp, #4]
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	0013      	movs	r3, r2
 800f148:	0022      	movs	r2, r4
 800f14a:	f7fa f883 	bl	8009254 <Paint_DrawRectangle>
					DRAW_FILL_FULL);
		}

		//										ANALOG COMPASS

		if (showNaviAnalog == 1) {
 800f14e:	4b8a      	ldr	r3, [pc, #552]	; (800f378 <interfaceDrawLayer+0x210c>)
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	2b01      	cmp	r3, #1
 800f154:	d000      	beq.n	800f158 <interfaceDrawLayer+0x1eec>
 800f156:	e0b5      	b.n	800f2c4 <interfaceDrawLayer+0x2058>

			if (altitudeValue < 0) {
 800f158:	4b88      	ldr	r3, [pc, #544]	; (800f37c <interfaceDrawLayer+0x2110>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da37      	bge.n	800f1d0 <interfaceDrawLayer+0x1f64>
				Paint_DrawChar(compassX - 12, compassY - 14, '-', &Font12,
 800f160:	4b87      	ldr	r3, [pc, #540]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	b29b      	uxth	r3, r3
 800f166:	3b0c      	subs	r3, #12
 800f168:	b298      	uxth	r0, r3
 800f16a:	4b86      	ldr	r3, [pc, #536]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	3b0e      	subs	r3, #14
 800f172:	b299      	uxth	r1, r3
 800f174:	4b77      	ldr	r3, [pc, #476]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4a74      	ldr	r2, [pc, #464]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f17e:	7812      	ldrb	r2, [r2, #0]
 800f180:	b2d2      	uxtb	r2, r2
 800f182:	b292      	uxth	r2, r2
 800f184:	4c74      	ldr	r4, [pc, #464]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f186:	9201      	str	r2, [sp, #4]
 800f188:	9300      	str	r3, [sp, #0]
 800f18a:	0023      	movs	r3, r4
 800f18c:	222d      	movs	r2, #45	; 0x2d
 800f18e:	f7fa fb7f 	bl	8009890 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800f192:	4b7b      	ldr	r3, [pc, #492]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	b29b      	uxth	r3, r3
 800f198:	3b04      	subs	r3, #4
 800f19a:	b298      	uxth	r0, r3
 800f19c:	4b79      	ldr	r3, [pc, #484]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	3b0e      	subs	r3, #14
 800f1a4:	b299      	uxth	r1, r3
 800f1a6:	4b75      	ldr	r3, [pc, #468]	; (800f37c <interfaceDrawLayer+0x2110>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
						abs(altitudeValue), &Font12, colorSecond, colorMain);
 800f1aa:	17da      	asrs	r2, r3, #31
 800f1ac:	189c      	adds	r4, r3, r2
 800f1ae:	4054      	eors	r4, r2
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800f1b0:	4b68      	ldr	r3, [pc, #416]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	4a65      	ldr	r2, [pc, #404]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f1ba:	7812      	ldrb	r2, [r2, #0]
 800f1bc:	b2d2      	uxtb	r2, r2
 800f1be:	b292      	uxth	r2, r2
 800f1c0:	4d65      	ldr	r5, [pc, #404]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f1c2:	9201      	str	r2, [sp, #4]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	002b      	movs	r3, r5
 800f1c8:	0022      	movs	r2, r4
 800f1ca:	f7fa fcc3 	bl	8009b54 <Paint_DrawNum>
 800f1ce:	e01a      	b.n	800f206 <interfaceDrawLayer+0x1f9a>
			} else {
				Paint_DrawNum(compassX - 12, compassY - 14, altitudeValue,
 800f1d0:	4b6b      	ldr	r3, [pc, #428]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	3b0c      	subs	r3, #12
 800f1d8:	b298      	uxth	r0, r3
 800f1da:	4b6a      	ldr	r3, [pc, #424]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	3b0e      	subs	r3, #14
 800f1e2:	b299      	uxth	r1, r3
 800f1e4:	4b65      	ldr	r3, [pc, #404]	; (800f37c <interfaceDrawLayer+0x2110>)
 800f1e6:	681c      	ldr	r4, [r3, #0]
 800f1e8:	4b5a      	ldr	r3, [pc, #360]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	4a57      	ldr	r2, [pc, #348]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f1f2:	7812      	ldrb	r2, [r2, #0]
 800f1f4:	b2d2      	uxtb	r2, r2
 800f1f6:	b292      	uxth	r2, r2
 800f1f8:	4d57      	ldr	r5, [pc, #348]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f1fa:	9201      	str	r2, [sp, #4]
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	002b      	movs	r3, r5
 800f200:	0022      	movs	r2, r4
 800f202:	f7fa fca7 	bl	8009b54 <Paint_DrawNum>
						&Font12, colorSecond, colorMain);
			}

			compassAngle = atan2(magneticFieldY, magneticFieldX);
 800f206:	4b60      	ldr	r3, [pc, #384]	; (800f388 <interfaceDrawLayer+0x211c>)
 800f208:	2200      	movs	r2, #0
 800f20a:	5e9b      	ldrsh	r3, [r3, r2]
 800f20c:	0018      	movs	r0, r3
 800f20e:	f7f3 febf 	bl	8002f90 <__aeabi_i2d>
 800f212:	0004      	movs	r4, r0
 800f214:	000d      	movs	r5, r1
 800f216:	4b5d      	ldr	r3, [pc, #372]	; (800f38c <interfaceDrawLayer+0x2120>)
 800f218:	2200      	movs	r2, #0
 800f21a:	5e9b      	ldrsh	r3, [r3, r2]
 800f21c:	0018      	movs	r0, r3
 800f21e:	f7f3 feb7 	bl	8002f90 <__aeabi_i2d>
 800f222:	0002      	movs	r2, r0
 800f224:	000b      	movs	r3, r1
 800f226:	0020      	movs	r0, r4
 800f228:	0029      	movs	r1, r5
 800f22a:	f005 f9fd 	bl	8014628 <atan2>
 800f22e:	0002      	movs	r2, r0
 800f230:	000b      	movs	r3, r1
 800f232:	0010      	movs	r0, r2
 800f234:	0019      	movs	r1, r3
 800f236:	f7f3 ff49 	bl	80030cc <__aeabi_d2f>
 800f23a:	1c02      	adds	r2, r0, #0
 800f23c:	4b54      	ldr	r3, [pc, #336]	; (800f390 <interfaceDrawLayer+0x2124>)
 800f23e:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(compassX, compassY, compassAngle,
 800f240:	4b4f      	ldr	r3, [pc, #316]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	b298      	uxth	r0, r3
 800f246:	4b4f      	ldr	r3, [pc, #316]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	b299      	uxth	r1, r3
 800f24c:	4b50      	ldr	r3, [pc, #320]	; (800f390 <interfaceDrawLayer+0x2124>)
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	4b50      	ldr	r3, [pc, #320]	; (800f394 <interfaceDrawLayer+0x2128>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	b29c      	uxth	r4, r3
 800f256:	4b3f      	ldr	r3, [pc, #252]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	2500      	movs	r5, #0
 800f260:	9503      	str	r5, [sp, #12]
 800f262:	2502      	movs	r5, #2
 800f264:	9502      	str	r5, [sp, #8]
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	2300      	movs	r3, #0
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	0023      	movs	r3, r4
 800f26e:	f7f9 ff07 	bl	8009080 <Paint_DrawPointer>
					compassPointerLength, 0, colorSecond, DOT_PIXEL_2X2,
					LINE_STYLE_SOLID);
			Paint_DrawPointer(compassX, compassY, compassAngle + 3.14,
 800f272:	4b43      	ldr	r3, [pc, #268]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	b29c      	uxth	r4, r3
 800f278:	4b42      	ldr	r3, [pc, #264]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	b29d      	uxth	r5, r3
 800f27e:	4b44      	ldr	r3, [pc, #272]	; (800f390 <interfaceDrawLayer+0x2124>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	1c18      	adds	r0, r3, #0
 800f284:	f7f3 feda 	bl	800303c <__aeabi_f2d>
 800f288:	4a43      	ldr	r2, [pc, #268]	; (800f398 <interfaceDrawLayer+0x212c>)
 800f28a:	4b44      	ldr	r3, [pc, #272]	; (800f39c <interfaceDrawLayer+0x2130>)
 800f28c:	f7f2 f8be 	bl	800140c <__aeabi_dadd>
 800f290:	0002      	movs	r2, r0
 800f292:	000b      	movs	r3, r1
 800f294:	0010      	movs	r0, r2
 800f296:	0019      	movs	r1, r3
 800f298:	f7f3 ff18 	bl	80030cc <__aeabi_d2f>
 800f29c:	4b3d      	ldr	r3, [pc, #244]	; (800f394 <interfaceDrawLayer+0x2128>)
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	4b2c      	ldr	r3, [pc, #176]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	9103      	str	r1, [sp, #12]
 800f2ae:	2101      	movs	r1, #1
 800f2b0:	9102      	str	r1, [sp, #8]
 800f2b2:	9301      	str	r3, [sp, #4]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	0013      	movs	r3, r2
 800f2ba:	1c02      	adds	r2, r0, #0
 800f2bc:	0029      	movs	r1, r5
 800f2be:	0020      	movs	r0, r4
 800f2c0:	f7f9 fede 	bl	8009080 <Paint_DrawPointer>

		}

		//										DIGITAL COMPASS - ALT

		if (showNaviDigital == 1) {
 800f2c4:	4b36      	ldr	r3, [pc, #216]	; (800f3a0 <interfaceDrawLayer+0x2134>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d000      	beq.n	800f2ce <interfaceDrawLayer+0x2062>
 800f2cc:	e0f5      	b.n	800f4ba <interfaceDrawLayer+0x224e>
			if (altitudeValue < 0) {
 800f2ce:	4b2b      	ldr	r3, [pc, #172]	; (800f37c <interfaceDrawLayer+0x2110>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	da66      	bge.n	800f3a4 <interfaceDrawLayer+0x2138>
				Paint_DrawChar(compassX, compassY + 31, '-', &Font12,
 800f2d6:	4b2a      	ldr	r3, [pc, #168]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	b298      	uxth	r0, r3
 800f2dc:	4b29      	ldr	r3, [pc, #164]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	331f      	adds	r3, #31
 800f2e4:	b299      	uxth	r1, r3
 800f2e6:	4b1b      	ldr	r3, [pc, #108]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4a18      	ldr	r2, [pc, #96]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f2f0:	7812      	ldrb	r2, [r2, #0]
 800f2f2:	b2d2      	uxtb	r2, r2
 800f2f4:	b292      	uxth	r2, r2
 800f2f6:	4c18      	ldr	r4, [pc, #96]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f2f8:	9201      	str	r2, [sp, #4]
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	0023      	movs	r3, r4
 800f2fe:	222d      	movs	r2, #45	; 0x2d
 800f300:	f7fa fac6 	bl	8009890 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX + 8, compassY + 31, abs(altitudeValue),
 800f304:	4b1e      	ldr	r3, [pc, #120]	; (800f380 <interfaceDrawLayer+0x2114>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	b29b      	uxth	r3, r3
 800f30a:	3308      	adds	r3, #8
 800f30c:	b298      	uxth	r0, r3
 800f30e:	4b1d      	ldr	r3, [pc, #116]	; (800f384 <interfaceDrawLayer+0x2118>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	b29b      	uxth	r3, r3
 800f314:	331f      	adds	r3, #31
 800f316:	b299      	uxth	r1, r3
 800f318:	4b18      	ldr	r3, [pc, #96]	; (800f37c <interfaceDrawLayer+0x2110>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	17da      	asrs	r2, r3, #31
 800f31e:	189c      	adds	r4, r3, r2
 800f320:	4054      	eors	r4, r2
 800f322:	4b0c      	ldr	r3, [pc, #48]	; (800f354 <interfaceDrawLayer+0x20e8>)
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	b2db      	uxtb	r3, r3
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4a09      	ldr	r2, [pc, #36]	; (800f350 <interfaceDrawLayer+0x20e4>)
 800f32c:	7812      	ldrb	r2, [r2, #0]
 800f32e:	b2d2      	uxtb	r2, r2
 800f330:	b292      	uxth	r2, r2
 800f332:	4d09      	ldr	r5, [pc, #36]	; (800f358 <interfaceDrawLayer+0x20ec>)
 800f334:	9201      	str	r2, [sp, #4]
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	002b      	movs	r3, r5
 800f33a:	0022      	movs	r2, r4
 800f33c:	f7fa fc0a 	bl	8009b54 <Paint_DrawNum>
 800f340:	e049      	b.n	800f3d6 <interfaceDrawLayer+0x216a>
 800f342:	46c0      	nop			; (mov r8, r8)
 800f344:	20000641 	.word	0x20000641
 800f348:	200003ad 	.word	0x200003ad
 800f34c:	200003a8 	.word	0x200003a8
 800f350:	2000033a 	.word	0x2000033a
 800f354:	200006b3 	.word	0x200006b3
 800f358:	2000000c 	.word	0x2000000c
 800f35c:	20000697 	.word	0x20000697
 800f360:	2000062d 	.word	0x2000062d
 800f364:	2000036c 	.word	0x2000036c
 800f368:	20000642 	.word	0x20000642
 800f36c:	2000070a 	.word	0x2000070a
 800f370:	20000442 	.word	0x20000442
 800f374:	2000020c 	.word	0x2000020c
 800f378:	20000208 	.word	0x20000208
 800f37c:	2000063c 	.word	0x2000063c
 800f380:	200006e8 	.word	0x200006e8
 800f384:	20000450 	.word	0x20000450
 800f388:	20000590 	.word	0x20000590
 800f38c:	2000062a 	.word	0x2000062a
 800f390:	20000200 	.word	0x20000200
 800f394:	2000037a 	.word	0x2000037a
 800f398:	51eb851f 	.word	0x51eb851f
 800f39c:	40091eb8 	.word	0x40091eb8
 800f3a0:	20000614 	.word	0x20000614
						&Font12, colorSecond, colorMain);
			} else {
				Paint_DrawNum(compassX, compassY + 31, altitudeValue, &Font12,
 800f3a4:	4ba3      	ldr	r3, [pc, #652]	; (800f634 <interfaceDrawLayer+0x23c8>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b298      	uxth	r0, r3
 800f3aa:	4ba3      	ldr	r3, [pc, #652]	; (800f638 <interfaceDrawLayer+0x23cc>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	331f      	adds	r3, #31
 800f3b2:	b299      	uxth	r1, r3
 800f3b4:	4ba1      	ldr	r3, [pc, #644]	; (800f63c <interfaceDrawLayer+0x23d0>)
 800f3b6:	681c      	ldr	r4, [r3, #0]
 800f3b8:	4ba1      	ldr	r3, [pc, #644]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4aa0      	ldr	r2, [pc, #640]	; (800f644 <interfaceDrawLayer+0x23d8>)
 800f3c2:	7812      	ldrb	r2, [r2, #0]
 800f3c4:	b2d2      	uxtb	r2, r2
 800f3c6:	b292      	uxth	r2, r2
 800f3c8:	4d9f      	ldr	r5, [pc, #636]	; (800f648 <interfaceDrawLayer+0x23dc>)
 800f3ca:	9201      	str	r2, [sp, #4]
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	002b      	movs	r3, r5
 800f3d0:	0022      	movs	r2, r4
 800f3d2:	f7fa fbbf 	bl	8009b54 <Paint_DrawNum>
						colorSecond, colorMain);
			}

			//										DIGITAL COMPASS - COMPASS

			uint16_t compassCenterX = compassX + 24;
 800f3d6:	4b97      	ldr	r3, [pc, #604]	; (800f634 <interfaceDrawLayer+0x23c8>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	260a      	movs	r6, #10
 800f3de:	19bb      	adds	r3, r7, r6
 800f3e0:	3218      	adds	r2, #24
 800f3e2:	801a      	strh	r2, [r3, #0]
			uint16_t compassCenterY = compassY + 14;
 800f3e4:	4b94      	ldr	r3, [pc, #592]	; (800f638 <interfaceDrawLayer+0x23cc>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	2108      	movs	r1, #8
 800f3ec:	187b      	adds	r3, r7, r1
 800f3ee:	320e      	adds	r2, #14
 800f3f0:	801a      	strh	r2, [r3, #0]

			Paint_DrawPoint(compassCenterX + magneticFieldX,
 800f3f2:	4b96      	ldr	r3, [pc, #600]	; (800f64c <interfaceDrawLayer+0x23e0>)
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	5e9b      	ldrsh	r3, [r3, r2]
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	19bb      	adds	r3, r7, r6
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	18d3      	adds	r3, r2, r3
 800f400:	b298      	uxth	r0, r3
 800f402:	4b93      	ldr	r3, [pc, #588]	; (800f650 <interfaceDrawLayer+0x23e4>)
 800f404:	2200      	movs	r2, #0
 800f406:	5e9b      	ldrsh	r3, [r3, r2]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	000c      	movs	r4, r1
 800f40c:	187b      	adds	r3, r7, r1
 800f40e:	881b      	ldrh	r3, [r3, #0]
 800f410:	18d3      	adds	r3, r2, r3
 800f412:	b299      	uxth	r1, r3
 800f414:	4b8a      	ldr	r3, [pc, #552]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	2301      	movs	r3, #1
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	2303      	movs	r3, #3
 800f422:	f7f9 fc65 	bl	8008cf0 <Paint_DrawPoint>
					compassCenterY + magneticFieldY, colorSecond, DOT_PIXEL_3X3,
					DOT_STYLE_DFT);

			Paint_DrawLine(compassX, compassCenterY + magneticFieldY,
 800f426:	4b83      	ldr	r3, [pc, #524]	; (800f634 <interfaceDrawLayer+0x23c8>)
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	b298      	uxth	r0, r3
 800f42c:	4b88      	ldr	r3, [pc, #544]	; (800f650 <interfaceDrawLayer+0x23e4>)
 800f42e:	2200      	movs	r2, #0
 800f430:	5e9b      	ldrsh	r3, [r3, r2]
 800f432:	b29a      	uxth	r2, r3
 800f434:	0025      	movs	r5, r4
 800f436:	193b      	adds	r3, r7, r4
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	18d3      	adds	r3, r2, r3
 800f43c:	b299      	uxth	r1, r3
 800f43e:	4b7d      	ldr	r3, [pc, #500]	; (800f634 <interfaceDrawLayer+0x23c8>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	b29b      	uxth	r3, r3
 800f444:	3330      	adds	r3, #48	; 0x30
 800f446:	b29c      	uxth	r4, r3
 800f448:	4b81      	ldr	r3, [pc, #516]	; (800f650 <interfaceDrawLayer+0x23e4>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	5e9b      	ldrsh	r3, [r3, r2]
 800f44e:	b29a      	uxth	r2, r3
 800f450:	197b      	adds	r3, r7, r5
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	18d3      	adds	r3, r2, r3
 800f456:	b29a      	uxth	r2, r3
 800f458:	4b79      	ldr	r3, [pc, #484]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	b29b      	uxth	r3, r3
 800f460:	2500      	movs	r5, #0
 800f462:	9502      	str	r5, [sp, #8]
 800f464:	2501      	movs	r5, #1
 800f466:	9501      	str	r5, [sp, #4]
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	0013      	movs	r3, r2
 800f46c:	0022      	movs	r2, r4
 800f46e:	f7f9 fd29 	bl	8008ec4 <Paint_DrawLine>
					compassX + 48, compassCenterY + magneticFieldY, colorSecond,
					DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			Paint_DrawLine(compassCenterX + magneticFieldX, compassY,
 800f472:	4b76      	ldr	r3, [pc, #472]	; (800f64c <interfaceDrawLayer+0x23e0>)
 800f474:	2200      	movs	r2, #0
 800f476:	5e9b      	ldrsh	r3, [r3, r2]
 800f478:	b29a      	uxth	r2, r3
 800f47a:	19bb      	adds	r3, r7, r6
 800f47c:	881b      	ldrh	r3, [r3, #0]
 800f47e:	18d3      	adds	r3, r2, r3
 800f480:	b298      	uxth	r0, r3
 800f482:	4b6d      	ldr	r3, [pc, #436]	; (800f638 <interfaceDrawLayer+0x23cc>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	b299      	uxth	r1, r3
 800f488:	4b70      	ldr	r3, [pc, #448]	; (800f64c <interfaceDrawLayer+0x23e0>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	5e9b      	ldrsh	r3, [r3, r2]
 800f48e:	b29a      	uxth	r2, r3
 800f490:	19bb      	adds	r3, r7, r6
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	18d3      	adds	r3, r2, r3
 800f496:	b29a      	uxth	r2, r3
 800f498:	4b67      	ldr	r3, [pc, #412]	; (800f638 <interfaceDrawLayer+0x23cc>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	331d      	adds	r3, #29
 800f4a0:	b29c      	uxth	r4, r3
 800f4a2:	4b67      	ldr	r3, [pc, #412]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	2500      	movs	r5, #0
 800f4ac:	9502      	str	r5, [sp, #8]
 800f4ae:	2501      	movs	r5, #1
 800f4b0:	9501      	str	r5, [sp, #4]
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	0023      	movs	r3, r4
 800f4b6:	f7f9 fd05 	bl	8008ec4 <Paint_DrawLine>

		}

		//										PRESSURE POINTER

		if (showBarometer == 1) {
 800f4ba:	4b66      	ldr	r3, [pc, #408]	; (800f654 <interfaceDrawLayer+0x23e8>)
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d000      	beq.n	800f4c4 <interfaceDrawLayer+0x2258>
 800f4c2:	e09a      	b.n	800f5fa <interfaceDrawLayer+0x238e>

			pressureAngle = 2 * 3.14 / 100
					* ((int32_t) pressureValue - 950 - 25);
 800f4c4:	4b64      	ldr	r3, [pc, #400]	; (800f658 <interfaceDrawLayer+0x23ec>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a64      	ldr	r2, [pc, #400]	; (800f65c <interfaceDrawLayer+0x23f0>)
 800f4ca:	4694      	mov	ip, r2
 800f4cc:	4463      	add	r3, ip
 800f4ce:	0018      	movs	r0, r3
 800f4d0:	f7f3 fd5e 	bl	8002f90 <__aeabi_i2d>
 800f4d4:	4a62      	ldr	r2, [pc, #392]	; (800f660 <interfaceDrawLayer+0x23f4>)
 800f4d6:	4b63      	ldr	r3, [pc, #396]	; (800f664 <interfaceDrawLayer+0x23f8>)
 800f4d8:	f7f2 ff08 	bl	80022ec <__aeabi_dmul>
 800f4dc:	0002      	movs	r2, r0
 800f4de:	000b      	movs	r3, r1
 800f4e0:	0010      	movs	r0, r2
 800f4e2:	0019      	movs	r1, r3
 800f4e4:	f7f3 fdf2 	bl	80030cc <__aeabi_d2f>
 800f4e8:	1c02      	adds	r2, r0, #0
			pressureAngle = 2 * 3.14 / 100
 800f4ea:	4b5f      	ldr	r3, [pc, #380]	; (800f668 <interfaceDrawLayer+0x23fc>)
 800f4ec:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, pressureAngle,
 800f4ee:	4b5f      	ldr	r3, [pc, #380]	; (800f66c <interfaceDrawLayer+0x2400>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	b298      	uxth	r0, r3
 800f4f4:	4b5e      	ldr	r3, [pc, #376]	; (800f670 <interfaceDrawLayer+0x2404>)
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	b299      	uxth	r1, r3
 800f4fa:	4b5b      	ldr	r3, [pc, #364]	; (800f668 <interfaceDrawLayer+0x23fc>)
 800f4fc:	681c      	ldr	r4, [r3, #0]
 800f4fe:	4b5d      	ldr	r3, [pc, #372]	; (800f674 <interfaceDrawLayer+0x2408>)
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	b29d      	uxth	r5, r3
 800f504:	4b5c      	ldr	r3, [pc, #368]	; (800f678 <interfaceDrawLayer+0x240c>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	4a4d      	ldr	r2, [pc, #308]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f50c:	7812      	ldrb	r2, [r2, #0]
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	b292      	uxth	r2, r2
 800f512:	2600      	movs	r6, #0
 800f514:	9603      	str	r6, [sp, #12]
 800f516:	2602      	movs	r6, #2
 800f518:	9602      	str	r6, [sp, #8]
 800f51a:	9201      	str	r2, [sp, #4]
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	002b      	movs	r3, r5
 800f520:	1c22      	adds	r2, r4, #0
 800f522:	f7f9 fdad 	bl	8009080 <Paint_DrawPointer>
					pressurePointerLength, pressurePointerShift, colorSecond,
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);

			Paint_DrawCircle(
					(cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800f526:	4b50      	ldr	r3, [pc, #320]	; (800f668 <interfaceDrawLayer+0x23fc>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	1c18      	adds	r0, r3, #0
 800f52c:	f7f3 fd86 	bl	800303c <__aeabi_f2d>
 800f530:	0002      	movs	r2, r0
 800f532:	000b      	movs	r3, r1
 800f534:	0010      	movs	r0, r2
 800f536:	0019      	movs	r1, r3
 800f538:	f004 ffee 	bl	8014518 <cos>
 800f53c:	0004      	movs	r4, r0
 800f53e:	000d      	movs	r5, r1
 800f540:	4b4d      	ldr	r3, [pc, #308]	; (800f678 <interfaceDrawLayer+0x240c>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	0018      	movs	r0, r3
 800f546:	f7f3 fd23 	bl	8002f90 <__aeabi_i2d>
 800f54a:	0002      	movs	r2, r0
 800f54c:	000b      	movs	r3, r1
 800f54e:	0020      	movs	r0, r4
 800f550:	0029      	movs	r1, r5
 800f552:	f7f2 fecb 	bl	80022ec <__aeabi_dmul>
 800f556:	0002      	movs	r2, r0
 800f558:	000b      	movs	r3, r1
 800f55a:	0014      	movs	r4, r2
 800f55c:	001d      	movs	r5, r3
 800f55e:	4b43      	ldr	r3, [pc, #268]	; (800f66c <interfaceDrawLayer+0x2400>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	0018      	movs	r0, r3
 800f564:	f7f3 fd14 	bl	8002f90 <__aeabi_i2d>
 800f568:	0002      	movs	r2, r0
 800f56a:	000b      	movs	r3, r1
 800f56c:	0020      	movs	r0, r4
 800f56e:	0029      	movs	r1, r5
 800f570:	f7f1 ff4c 	bl	800140c <__aeabi_dadd>
 800f574:	0002      	movs	r2, r0
 800f576:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800f578:	0010      	movs	r0, r2
 800f57a:	0019      	movs	r1, r3
 800f57c:	f7f1 f820 	bl	80005c0 <__aeabi_d2uiz>
 800f580:	0003      	movs	r3, r0
 800f582:	b29e      	uxth	r6, r3
					(sin(pressureAngle) * pressurePointerShift) + mainStartY, 4,
 800f584:	4b38      	ldr	r3, [pc, #224]	; (800f668 <interfaceDrawLayer+0x23fc>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	1c18      	adds	r0, r3, #0
 800f58a:	f7f3 fd57 	bl	800303c <__aeabi_f2d>
 800f58e:	0002      	movs	r2, r0
 800f590:	000b      	movs	r3, r1
 800f592:	0010      	movs	r0, r2
 800f594:	0019      	movs	r1, r3
 800f596:	f005 f801 	bl	801459c <sin>
 800f59a:	0004      	movs	r4, r0
 800f59c:	000d      	movs	r5, r1
 800f59e:	4b36      	ldr	r3, [pc, #216]	; (800f678 <interfaceDrawLayer+0x240c>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	0018      	movs	r0, r3
 800f5a4:	f7f3 fcf4 	bl	8002f90 <__aeabi_i2d>
 800f5a8:	0002      	movs	r2, r0
 800f5aa:	000b      	movs	r3, r1
 800f5ac:	0020      	movs	r0, r4
 800f5ae:	0029      	movs	r1, r5
 800f5b0:	f7f2 fe9c 	bl	80022ec <__aeabi_dmul>
 800f5b4:	0002      	movs	r2, r0
 800f5b6:	000b      	movs	r3, r1
 800f5b8:	0014      	movs	r4, r2
 800f5ba:	001d      	movs	r5, r3
 800f5bc:	4b2c      	ldr	r3, [pc, #176]	; (800f670 <interfaceDrawLayer+0x2404>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	0018      	movs	r0, r3
 800f5c2:	f7f3 fce5 	bl	8002f90 <__aeabi_i2d>
 800f5c6:	0002      	movs	r2, r0
 800f5c8:	000b      	movs	r3, r1
 800f5ca:	0020      	movs	r0, r4
 800f5cc:	0029      	movs	r1, r5
 800f5ce:	f7f1 ff1d 	bl	800140c <__aeabi_dadd>
 800f5d2:	0002      	movs	r2, r0
 800f5d4:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800f5d6:	0010      	movs	r0, r2
 800f5d8:	0019      	movs	r1, r3
 800f5da:	f7f0 fff1 	bl	80005c0 <__aeabi_d2uiz>
 800f5de:	0003      	movs	r3, r0
 800f5e0:	b299      	uxth	r1, r3
 800f5e2:	4b17      	ldr	r3, [pc, #92]	; (800f640 <interfaceDrawLayer+0x23d4>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	9201      	str	r2, [sp, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	9200      	str	r2, [sp, #0]
 800f5f2:	2204      	movs	r2, #4
 800f5f4:	0030      	movs	r0, r6
 800f5f6:	f7f9 fef9 	bl	80093ec <Paint_DrawCircle>
			//^ pointer
		}

		//										BATTERY STATE POINTER

		batteryStateAngle = 2 * 3.14 / 28 * (batteryState);
 800f5fa:	4b20      	ldr	r3, [pc, #128]	; (800f67c <interfaceDrawLayer+0x2410>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	0018      	movs	r0, r3
 800f600:	f7f3 fcc6 	bl	8002f90 <__aeabi_i2d>
 800f604:	4a1e      	ldr	r2, [pc, #120]	; (800f680 <interfaceDrawLayer+0x2414>)
 800f606:	4b1f      	ldr	r3, [pc, #124]	; (800f684 <interfaceDrawLayer+0x2418>)
 800f608:	f7f2 fe70 	bl	80022ec <__aeabi_dmul>
 800f60c:	0002      	movs	r2, r0
 800f60e:	000b      	movs	r3, r1
 800f610:	0010      	movs	r0, r2
 800f612:	0019      	movs	r1, r3
 800f614:	f7f3 fd5a 	bl	80030cc <__aeabi_d2f>
 800f618:	1c02      	adds	r2, r0, #0
 800f61a:	4b1b      	ldr	r3, [pc, #108]	; (800f688 <interfaceDrawLayer+0x241c>)
 800f61c:	601a      	str	r2, [r3, #0]

		if (showBatteryState) {
 800f61e:	4b1b      	ldr	r3, [pc, #108]	; (800f68c <interfaceDrawLayer+0x2420>)
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d06e      	beq.n	800f704 <interfaceDrawLayer+0x2498>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800f626:	2312      	movs	r3, #18
 800f628:	18fb      	adds	r3, r7, r3
 800f62a:	4a14      	ldr	r2, [pc, #80]	; (800f67c <interfaceDrawLayer+0x2410>)
 800f62c:	7812      	ldrb	r2, [r2, #0]
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	e063      	b.n	800f6fa <interfaceDrawLayer+0x248e>
 800f632:	46c0      	nop			; (mov r8, r8)
 800f634:	200006e8 	.word	0x200006e8
 800f638:	20000450 	.word	0x20000450
 800f63c:	2000063c 	.word	0x2000063c
 800f640:	200006b3 	.word	0x200006b3
 800f644:	2000033a 	.word	0x2000033a
 800f648:	2000000c 	.word	0x2000000c
 800f64c:	2000062a 	.word	0x2000062a
 800f650:	20000590 	.word	0x20000590
 800f654:	20000215 	.word	0x20000215
 800f658:	20000634 	.word	0x20000634
 800f65c:	fffffc31 	.word	0xfffffc31
 800f660:	2a305533 	.word	0x2a305533
 800f664:	3fb013a9 	.word	0x3fb013a9
 800f668:	20000704 	.word	0x20000704
 800f66c:	2000044b 	.word	0x2000044b
 800f670:	20000209 	.word	0x20000209
 800f674:	200006bc 	.word	0x200006bc
 800f678:	2000062c 	.word	0x2000062c
 800f67c:	200003a5 	.word	0x200003a5
 800f680:	efe89823 	.word	0xefe89823
 800f684:	3fccb564 	.word	0x3fccb564
 800f688:	200001f4 	.word	0x200001f4
 800f68c:	200003b2 	.word	0x200003b2
				batteryStateAngle = 2 * 3.14 / 28 * (i);
 800f690:	2112      	movs	r1, #18
 800f692:	187b      	adds	r3, r7, r1
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	0018      	movs	r0, r3
 800f698:	f7f3 fc7a 	bl	8002f90 <__aeabi_i2d>
 800f69c:	4a97      	ldr	r2, [pc, #604]	; (800f8fc <interfaceDrawLayer+0x2690>)
 800f69e:	4b98      	ldr	r3, [pc, #608]	; (800f900 <interfaceDrawLayer+0x2694>)
 800f6a0:	f7f2 fe24 	bl	80022ec <__aeabi_dmul>
 800f6a4:	0002      	movs	r2, r0
 800f6a6:	000b      	movs	r3, r1
 800f6a8:	0010      	movs	r0, r2
 800f6aa:	0019      	movs	r1, r3
 800f6ac:	f7f3 fd0e 	bl	80030cc <__aeabi_d2f>
 800f6b0:	1c02      	adds	r2, r0, #0
 800f6b2:	4b94      	ldr	r3, [pc, #592]	; (800f904 <interfaceDrawLayer+0x2698>)
 800f6b4:	601a      	str	r2, [r3, #0]

				Paint_DrawPointer(batteryStateStartX, batteryStateStartY,
 800f6b6:	4b94      	ldr	r3, [pc, #592]	; (800f908 <interfaceDrawLayer+0x269c>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	b298      	uxth	r0, r3
 800f6bc:	4b93      	ldr	r3, [pc, #588]	; (800f90c <interfaceDrawLayer+0x26a0>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	b299      	uxth	r1, r3
 800f6c2:	4b90      	ldr	r3, [pc, #576]	; (800f904 <interfaceDrawLayer+0x2698>)
 800f6c4:	681c      	ldr	r4, [r3, #0]
 800f6c6:	4b92      	ldr	r3, [pc, #584]	; (800f910 <interfaceDrawLayer+0x26a4>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	b29d      	uxth	r5, r3
 800f6cc:	4b91      	ldr	r3, [pc, #580]	; (800f914 <interfaceDrawLayer+0x26a8>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	4a91      	ldr	r2, [pc, #580]	; (800f918 <interfaceDrawLayer+0x26ac>)
 800f6d4:	7812      	ldrb	r2, [r2, #0]
 800f6d6:	b2d2      	uxtb	r2, r2
 800f6d8:	b292      	uxth	r2, r2
 800f6da:	2600      	movs	r6, #0
 800f6dc:	9603      	str	r6, [sp, #12]
 800f6de:	2601      	movs	r6, #1
 800f6e0:	9602      	str	r6, [sp, #8]
 800f6e2:	9201      	str	r2, [sp, #4]
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	002b      	movs	r3, r5
 800f6e8:	1c22      	adds	r2, r4, #0
 800f6ea:	f7f9 fcc9 	bl	8009080 <Paint_DrawPointer>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800f6ee:	2112      	movs	r1, #18
 800f6f0:	187b      	adds	r3, r7, r1
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	187b      	adds	r3, r7, r1
 800f6f6:	3201      	adds	r2, #1
 800f6f8:	701a      	strb	r2, [r3, #0]
 800f6fa:	2312      	movs	r3, #18
 800f6fc:	18fb      	adds	r3, r7, r3
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b07      	cmp	r3, #7
 800f702:	d9c5      	bls.n	800f690 <interfaceDrawLayer+0x2424>

		}

		//										HOUR POINTER

		hourAngle = 2 * 3.14 / 60 * ((actual.hour * 5 + (actual.minute / 10)) - 15);
 800f704:	4b85      	ldr	r3, [pc, #532]	; (800f91c <interfaceDrawLayer+0x26b0>)
 800f706:	78db      	ldrb	r3, [r3, #3]
 800f708:	b25b      	sxtb	r3, r3
 800f70a:	001a      	movs	r2, r3
 800f70c:	0013      	movs	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	189c      	adds	r4, r3, r2
 800f712:	4b82      	ldr	r3, [pc, #520]	; (800f91c <interfaceDrawLayer+0x26b0>)
 800f714:	791b      	ldrb	r3, [r3, #4]
 800f716:	b25b      	sxtb	r3, r3
 800f718:	210a      	movs	r1, #10
 800f71a:	0018      	movs	r0, r3
 800f71c:	f7f0 fd88 	bl	8000230 <__divsi3>
 800f720:	0003      	movs	r3, r0
 800f722:	b25b      	sxtb	r3, r3
 800f724:	18e3      	adds	r3, r4, r3
 800f726:	3b0f      	subs	r3, #15
 800f728:	0018      	movs	r0, r3
 800f72a:	f7f3 fc31 	bl	8002f90 <__aeabi_i2d>
 800f72e:	4a7c      	ldr	r2, [pc, #496]	; (800f920 <interfaceDrawLayer+0x26b4>)
 800f730:	4b7c      	ldr	r3, [pc, #496]	; (800f924 <interfaceDrawLayer+0x26b8>)
 800f732:	f7f2 fddb 	bl	80022ec <__aeabi_dmul>
 800f736:	0002      	movs	r2, r0
 800f738:	000b      	movs	r3, r1
 800f73a:	0010      	movs	r0, r2
 800f73c:	0019      	movs	r1, r3
 800f73e:	f7f3 fcc5 	bl	80030cc <__aeabi_d2f>
 800f742:	1c02      	adds	r2, r0, #0
 800f744:	4b78      	ldr	r3, [pc, #480]	; (800f928 <interfaceDrawLayer+0x26bc>)
 800f746:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800f748:	4b78      	ldr	r3, [pc, #480]	; (800f92c <interfaceDrawLayer+0x26c0>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	4b78      	ldr	r3, [pc, #480]	; (800f930 <interfaceDrawLayer+0x26c4>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	b29b      	uxth	r3, r3
 800f754:	18d3      	adds	r3, r2, r3
 800f756:	b298      	uxth	r0, r3
 800f758:	4b76      	ldr	r3, [pc, #472]	; (800f934 <interfaceDrawLayer+0x26c8>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	4b74      	ldr	r3, [pc, #464]	; (800f930 <interfaceDrawLayer+0x26c4>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	b29b      	uxth	r3, r3
 800f764:	18d3      	adds	r3, r2, r3
 800f766:	b299      	uxth	r1, r3
 800f768:	4b6f      	ldr	r3, [pc, #444]	; (800f928 <interfaceDrawLayer+0x26bc>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	4b72      	ldr	r3, [pc, #456]	; (800f938 <interfaceDrawLayer+0x26cc>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	b29c      	uxth	r4, r3
 800f772:	4b72      	ldr	r3, [pc, #456]	; (800f93c <interfaceDrawLayer+0x26d0>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	b29b      	uxth	r3, r3
 800f77a:	2500      	movs	r5, #0
 800f77c:	9503      	str	r5, [sp, #12]
 800f77e:	2503      	movs	r5, #3
 800f780:	9502      	str	r5, [sp, #8]
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	230f      	movs	r3, #15
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	0023      	movs	r3, r4
 800f78a:	f7f9 fc79 	bl	8009080 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, hourAngle, hourPointerLength,
				15, colorMain, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, hourAngle, hourPointerLength,
 800f78e:	4b67      	ldr	r3, [pc, #412]	; (800f92c <interfaceDrawLayer+0x26c0>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	b298      	uxth	r0, r3
 800f794:	4b67      	ldr	r3, [pc, #412]	; (800f934 <interfaceDrawLayer+0x26c8>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	b299      	uxth	r1, r3
 800f79a:	4b63      	ldr	r3, [pc, #396]	; (800f928 <interfaceDrawLayer+0x26bc>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	4b66      	ldr	r3, [pc, #408]	; (800f938 <interfaceDrawLayer+0x26cc>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	b29c      	uxth	r4, r3
 800f7a4:	4b5c      	ldr	r3, [pc, #368]	; (800f918 <interfaceDrawLayer+0x26ac>)
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	2500      	movs	r5, #0
 800f7ae:	9503      	str	r5, [sp, #12]
 800f7b0:	2503      	movs	r5, #3
 800f7b2:	9502      	str	r5, [sp, #8]
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	230f      	movs	r3, #15
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	0023      	movs	r3, r4
 800f7bc:	f7f9 fc60 	bl	8009080 <Paint_DrawPointer>
				15, colorSecond, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^ pointer

		//										MINUTE POINTER

		minuteAngle = 2 * 3.14 / 60 * (actual.minute - 15);
 800f7c0:	4b56      	ldr	r3, [pc, #344]	; (800f91c <interfaceDrawLayer+0x26b0>)
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	b25b      	sxtb	r3, r3
 800f7c6:	3b0f      	subs	r3, #15
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	f7f3 fbe1 	bl	8002f90 <__aeabi_i2d>
 800f7ce:	4a54      	ldr	r2, [pc, #336]	; (800f920 <interfaceDrawLayer+0x26b4>)
 800f7d0:	4b54      	ldr	r3, [pc, #336]	; (800f924 <interfaceDrawLayer+0x26b8>)
 800f7d2:	f7f2 fd8b 	bl	80022ec <__aeabi_dmul>
 800f7d6:	0002      	movs	r2, r0
 800f7d8:	000b      	movs	r3, r1
 800f7da:	0010      	movs	r0, r2
 800f7dc:	0019      	movs	r1, r3
 800f7de:	f7f3 fc75 	bl	80030cc <__aeabi_d2f>
 800f7e2:	1c02      	adds	r2, r0, #0
 800f7e4:	4b56      	ldr	r3, [pc, #344]	; (800f940 <interfaceDrawLayer+0x26d4>)
 800f7e6:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800f7e8:	4b50      	ldr	r3, [pc, #320]	; (800f92c <interfaceDrawLayer+0x26c0>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	4b50      	ldr	r3, [pc, #320]	; (800f930 <interfaceDrawLayer+0x26c4>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	18d3      	adds	r3, r2, r3
 800f7f6:	b298      	uxth	r0, r3
 800f7f8:	4b4e      	ldr	r3, [pc, #312]	; (800f934 <interfaceDrawLayer+0x26c8>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	4b4c      	ldr	r3, [pc, #304]	; (800f930 <interfaceDrawLayer+0x26c4>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	b29b      	uxth	r3, r3
 800f804:	18d3      	adds	r3, r2, r3
 800f806:	b299      	uxth	r1, r3
 800f808:	4b4d      	ldr	r3, [pc, #308]	; (800f940 <interfaceDrawLayer+0x26d4>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	4b4d      	ldr	r3, [pc, #308]	; (800f944 <interfaceDrawLayer+0x26d8>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	b29c      	uxth	r4, r3
 800f812:	4b4a      	ldr	r3, [pc, #296]	; (800f93c <interfaceDrawLayer+0x26d0>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	b29b      	uxth	r3, r3
 800f81a:	2500      	movs	r5, #0
 800f81c:	9503      	str	r5, [sp, #12]
 800f81e:	2502      	movs	r5, #2
 800f820:	9502      	str	r5, [sp, #8]
 800f822:	9301      	str	r3, [sp, #4]
 800f824:	230f      	movs	r3, #15
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	0023      	movs	r3, r4
 800f82a:	f7f9 fc29 	bl	8009080 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, minuteAngle,
				minutePointerLength, 15, colorMain, DOT_PIXEL_2X2,
				LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, minuteAngle,
 800f82e:	4b3f      	ldr	r3, [pc, #252]	; (800f92c <interfaceDrawLayer+0x26c0>)
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	b298      	uxth	r0, r3
 800f834:	4b3f      	ldr	r3, [pc, #252]	; (800f934 <interfaceDrawLayer+0x26c8>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	b299      	uxth	r1, r3
 800f83a:	4b41      	ldr	r3, [pc, #260]	; (800f940 <interfaceDrawLayer+0x26d4>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	4b41      	ldr	r3, [pc, #260]	; (800f944 <interfaceDrawLayer+0x26d8>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	b29c      	uxth	r4, r3
 800f844:	4b34      	ldr	r3, [pc, #208]	; (800f918 <interfaceDrawLayer+0x26ac>)
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	2500      	movs	r5, #0
 800f84e:	9503      	str	r5, [sp, #12]
 800f850:	2502      	movs	r5, #2
 800f852:	9502      	str	r5, [sp, #8]
 800f854:	9301      	str	r3, [sp, #4]
 800f856:	230f      	movs	r3, #15
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	0023      	movs	r3, r4
 800f85c:	f7f9 fc10 	bl	8009080 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		//^ pointer

		//										CHRONO MINUTE POINTER

		if (showChrono == 1) {
 800f860:	4b39      	ldr	r3, [pc, #228]	; (800f948 <interfaceDrawLayer+0x26dc>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b01      	cmp	r3, #1
 800f866:	d000      	beq.n	800f86a <interfaceDrawLayer+0x25fe>
 800f868:	e0a6      	b.n	800f9b8 <interfaceDrawLayer+0x274c>

			chronoMinutesAngle = 2 * 3.14 / 30 * (chrono.minute - 7.5);
 800f86a:	4b38      	ldr	r3, [pc, #224]	; (800f94c <interfaceDrawLayer+0x26e0>)
 800f86c:	791b      	ldrb	r3, [r3, #4]
 800f86e:	b25b      	sxtb	r3, r3
 800f870:	0018      	movs	r0, r3
 800f872:	f7f3 fb8d 	bl	8002f90 <__aeabi_i2d>
 800f876:	2200      	movs	r2, #0
 800f878:	4b35      	ldr	r3, [pc, #212]	; (800f950 <interfaceDrawLayer+0x26e4>)
 800f87a:	f7f2 ffa3 	bl	80027c4 <__aeabi_dsub>
 800f87e:	0002      	movs	r2, r0
 800f880:	000b      	movs	r3, r1
 800f882:	0010      	movs	r0, r2
 800f884:	0019      	movs	r1, r3
 800f886:	4a26      	ldr	r2, [pc, #152]	; (800f920 <interfaceDrawLayer+0x26b4>)
 800f888:	4b32      	ldr	r3, [pc, #200]	; (800f954 <interfaceDrawLayer+0x26e8>)
 800f88a:	f7f2 fd2f 	bl	80022ec <__aeabi_dmul>
 800f88e:	0002      	movs	r2, r0
 800f890:	000b      	movs	r3, r1
 800f892:	0010      	movs	r0, r2
 800f894:	0019      	movs	r1, r3
 800f896:	f7f3 fc19 	bl	80030cc <__aeabi_d2f>
 800f89a:	1c02      	adds	r2, r0, #0
 800f89c:	4b2e      	ldr	r3, [pc, #184]	; (800f958 <interfaceDrawLayer+0x26ec>)
 800f89e:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoMinutesStartX, chronoMinutesStartY,
 800f8a0:	4b2e      	ldr	r3, [pc, #184]	; (800f95c <interfaceDrawLayer+0x26f0>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	b298      	uxth	r0, r3
 800f8a6:	4b2e      	ldr	r3, [pc, #184]	; (800f960 <interfaceDrawLayer+0x26f4>)
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	b299      	uxth	r1, r3
 800f8ac:	4b2a      	ldr	r3, [pc, #168]	; (800f958 <interfaceDrawLayer+0x26ec>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	4b2c      	ldr	r3, [pc, #176]	; (800f964 <interfaceDrawLayer+0x26f8>)
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	b29c      	uxth	r4, r3
 800f8b6:	4b21      	ldr	r3, [pc, #132]	; (800f93c <interfaceDrawLayer+0x26d0>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	2500      	movs	r5, #0
 800f8c0:	9503      	str	r5, [sp, #12]
 800f8c2:	2501      	movs	r5, #1
 800f8c4:	9502      	str	r5, [sp, #8]
 800f8c6:	9301      	str	r3, [sp, #4]
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	9300      	str	r3, [sp, #0]
 800f8cc:	0023      	movs	r3, r4
 800f8ce:	f7f9 fbd7 	bl	8009080 <Paint_DrawPointer>
					chronoMinutesAngle, chronoMinutesPointerLength, 0,
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			//										CHRONO HALF HOURS DOTS

			for (uint8_t halfHours = (chrono.hour * 2) + (chrono.minute / 30);
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <interfaceDrawLayer+0x26e0>)
 800f8d4:	78db      	ldrb	r3, [r3, #3]
 800f8d6:	b25b      	sxtb	r3, r3
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	18db      	adds	r3, r3, r3
 800f8dc:	b2dc      	uxtb	r4, r3
 800f8de:	4b1b      	ldr	r3, [pc, #108]	; (800f94c <interfaceDrawLayer+0x26e0>)
 800f8e0:	791b      	ldrb	r3, [r3, #4]
 800f8e2:	b25b      	sxtb	r3, r3
 800f8e4:	211e      	movs	r1, #30
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	f7f0 fca2 	bl	8000230 <__divsi3>
 800f8ec:	0003      	movs	r3, r0
 800f8ee:	b25b      	sxtb	r3, r3
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	2311      	movs	r3, #17
 800f8f4:	18fb      	adds	r3, r7, r3
 800f8f6:	18a2      	adds	r2, r4, r2
 800f8f8:	701a      	strb	r2, [r3, #0]
 800f8fa:	e058      	b.n	800f9ae <interfaceDrawLayer+0x2742>
 800f8fc:	efe89823 	.word	0xefe89823
 800f900:	3fccb564 	.word	0x3fccb564
 800f904:	200001f4 	.word	0x200001f4
 800f908:	2000069f 	.word	0x2000069f
 800f90c:	20000710 	.word	0x20000710
 800f910:	200004c0 	.word	0x200004c0
 800f914:	20000214 	.word	0x20000214
 800f918:	200006b3 	.word	0x200006b3
 800f91c:	200006ac 	.word	0x200006ac
 800f920:	46508dff 	.word	0x46508dff
 800f924:	3fbacb6f 	.word	0x3fbacb6f
 800f928:	200006dc 	.word	0x200006dc
 800f92c:	2000044b 	.word	0x2000044b
 800f930:	20000211 	.word	0x20000211
 800f934:	20000209 	.word	0x20000209
 800f938:	20000213 	.word	0x20000213
 800f93c:	2000033a 	.word	0x2000033a
 800f940:	2000061c 	.word	0x2000061c
 800f944:	20000696 	.word	0x20000696
 800f948:	200003ac 	.word	0x200003ac
 800f94c:	20000444 	.word	0x20000444
 800f950:	401e0000 	.word	0x401e0000
 800f954:	3fcacb6f 	.word	0x3fcacb6f
 800f958:	200006c0 	.word	0x200006c0
 800f95c:	200006f4 	.word	0x200006f4
 800f960:	200006b4 	.word	0x200006b4
 800f964:	20000210 	.word	0x20000210
					halfHours > 0; halfHours--) {
				Paint_DrawPoint(
						chronoMinutesStartX - chronoMinutesPointerLength
 800f968:	4b8f      	ldr	r3, [pc, #572]	; (800fba8 <interfaceDrawLayer+0x293c>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	4b8f      	ldr	r3, [pc, #572]	; (800fbac <interfaceDrawLayer+0x2940>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	b29b      	uxth	r3, r3
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	b29a      	uxth	r2, r3
				Paint_DrawPoint(
 800f978:	2411      	movs	r4, #17
 800f97a:	193b      	adds	r3, r7, r4
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	b29b      	uxth	r3, r3
 800f984:	18d3      	adds	r3, r2, r3
 800f986:	b298      	uxth	r0, r3
 800f988:	4b89      	ldr	r3, [pc, #548]	; (800fbb0 <interfaceDrawLayer+0x2944>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	3b05      	subs	r3, #5
 800f990:	b299      	uxth	r1, r3
 800f992:	4b88      	ldr	r3, [pc, #544]	; (800fbb4 <interfaceDrawLayer+0x2948>)
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	b2db      	uxtb	r3, r3
 800f998:	b29a      	uxth	r2, r3
 800f99a:	2301      	movs	r3, #1
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	2302      	movs	r3, #2
 800f9a0:	f7f9 f9a6 	bl	8008cf0 <Paint_DrawPoint>
					halfHours > 0; halfHours--) {
 800f9a4:	193b      	adds	r3, r7, r4
 800f9a6:	781a      	ldrb	r2, [r3, #0]
 800f9a8:	193b      	adds	r3, r7, r4
 800f9aa:	3a01      	subs	r2, #1
 800f9ac:	701a      	strb	r2, [r3, #0]
			for (uint8_t halfHours = (chrono.hour * 2) + (chrono.minute / 30);
 800f9ae:	2311      	movs	r3, #17
 800f9b0:	18fb      	adds	r3, r7, r3
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1d7      	bne.n	800f968 <interfaceDrawLayer+0x26fc>

		}

		//										SECONDS POINTER

		secondAngle = 2 * 3.14 / 60 * (actual.second - 15);
 800f9b8:	4b7f      	ldr	r3, [pc, #508]	; (800fbb8 <interfaceDrawLayer+0x294c>)
 800f9ba:	795b      	ldrb	r3, [r3, #5]
 800f9bc:	b25b      	sxtb	r3, r3
 800f9be:	3b0f      	subs	r3, #15
 800f9c0:	0018      	movs	r0, r3
 800f9c2:	f7f3 fae5 	bl	8002f90 <__aeabi_i2d>
 800f9c6:	4a7d      	ldr	r2, [pc, #500]	; (800fbbc <interfaceDrawLayer+0x2950>)
 800f9c8:	4b7d      	ldr	r3, [pc, #500]	; (800fbc0 <interfaceDrawLayer+0x2954>)
 800f9ca:	f7f2 fc8f 	bl	80022ec <__aeabi_dmul>
 800f9ce:	0002      	movs	r2, r0
 800f9d0:	000b      	movs	r3, r1
 800f9d2:	0010      	movs	r0, r2
 800f9d4:	0019      	movs	r1, r3
 800f9d6:	f7f3 fb79 	bl	80030cc <__aeabi_d2f>
 800f9da:	1c02      	adds	r2, r0, #0
 800f9dc:	4b79      	ldr	r3, [pc, #484]	; (800fbc4 <interfaceDrawLayer+0x2958>)
 800f9de:	601a      	str	r2, [r3, #0]

		if (showSeconds == 1) {
 800f9e0:	4b79      	ldr	r3, [pc, #484]	; (800fbc8 <interfaceDrawLayer+0x295c>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d118      	bne.n	800fa1a <interfaceDrawLayer+0x27ae>
			Paint_DrawPointer(secondsStartX, secondsStartY, secondAngle,
 800f9e8:	4b78      	ldr	r3, [pc, #480]	; (800fbcc <interfaceDrawLayer+0x2960>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	b298      	uxth	r0, r3
 800f9ee:	4b78      	ldr	r3, [pc, #480]	; (800fbd0 <interfaceDrawLayer+0x2964>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	b299      	uxth	r1, r3
 800f9f4:	4b73      	ldr	r3, [pc, #460]	; (800fbc4 <interfaceDrawLayer+0x2958>)
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	4b76      	ldr	r3, [pc, #472]	; (800fbd4 <interfaceDrawLayer+0x2968>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	b29c      	uxth	r4, r3
 800f9fe:	4b6d      	ldr	r3, [pc, #436]	; (800fbb4 <interfaceDrawLayer+0x2948>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	2500      	movs	r5, #0
 800fa08:	9503      	str	r5, [sp, #12]
 800fa0a:	2501      	movs	r5, #1
 800fa0c:	9502      	str	r5, [sp, #8]
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	2300      	movs	r3, #0
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	0023      	movs	r3, r4
 800fa16:	f7f9 fb33 	bl	8009080 <Paint_DrawPointer>
			//^pointer
		}

		//										CHRONO SECOND POINTER

		if (showChrono == 1) {
 800fa1a:	4b6f      	ldr	r3, [pc, #444]	; (800fbd8 <interfaceDrawLayer+0x296c>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d14f      	bne.n	800fac2 <interfaceDrawLayer+0x2856>

			chronoSecondsAngle = 2 * 3.14 / 60 * (chrono.second - 15);
 800fa22:	4b6e      	ldr	r3, [pc, #440]	; (800fbdc <interfaceDrawLayer+0x2970>)
 800fa24:	795b      	ldrb	r3, [r3, #5]
 800fa26:	b25b      	sxtb	r3, r3
 800fa28:	3b0f      	subs	r3, #15
 800fa2a:	0018      	movs	r0, r3
 800fa2c:	f7f3 fab0 	bl	8002f90 <__aeabi_i2d>
 800fa30:	4a62      	ldr	r2, [pc, #392]	; (800fbbc <interfaceDrawLayer+0x2950>)
 800fa32:	4b63      	ldr	r3, [pc, #396]	; (800fbc0 <interfaceDrawLayer+0x2954>)
 800fa34:	f7f2 fc5a 	bl	80022ec <__aeabi_dmul>
 800fa38:	0002      	movs	r2, r0
 800fa3a:	000b      	movs	r3, r1
 800fa3c:	0010      	movs	r0, r2
 800fa3e:	0019      	movs	r1, r3
 800fa40:	f7f3 fb44 	bl	80030cc <__aeabi_d2f>
 800fa44:	1c02      	adds	r2, r0, #0
 800fa46:	4b66      	ldr	r3, [pc, #408]	; (800fbe0 <interfaceDrawLayer+0x2974>)
 800fa48:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, chronoSecondsAngle,
 800fa4a:	4b66      	ldr	r3, [pc, #408]	; (800fbe4 <interfaceDrawLayer+0x2978>)
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	b298      	uxth	r0, r3
 800fa50:	4b65      	ldr	r3, [pc, #404]	; (800fbe8 <interfaceDrawLayer+0x297c>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	b299      	uxth	r1, r3
 800fa56:	4b62      	ldr	r3, [pc, #392]	; (800fbe0 <interfaceDrawLayer+0x2974>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	4b64      	ldr	r3, [pc, #400]	; (800fbec <interfaceDrawLayer+0x2980>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	b29c      	uxth	r4, r3
 800fa60:	4b63      	ldr	r3, [pc, #396]	; (800fbf0 <interfaceDrawLayer+0x2984>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	2500      	movs	r5, #0
 800fa6a:	9503      	str	r5, [sp, #12]
 800fa6c:	2501      	movs	r5, #1
 800fa6e:	9502      	str	r5, [sp, #8]
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	230f      	movs	r3, #15
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	0023      	movs	r3, r4
 800fa78:	f7f9 fb02 	bl	8009080 <Paint_DrawPointer>
					chronoSecondsPointerLength, 15, colorSecond, DOT_PIXEL_1X1,
					LINE_STYLE_SOLID);
			//^ pointer

			Paint_DrawPointer(mainStartX + pointerShadowShift,
 800fa7c:	4b59      	ldr	r3, [pc, #356]	; (800fbe4 <interfaceDrawLayer+0x2978>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	4b5c      	ldr	r3, [pc, #368]	; (800fbf4 <interfaceDrawLayer+0x2988>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	18d3      	adds	r3, r2, r3
 800fa8a:	b298      	uxth	r0, r3
 800fa8c:	4b56      	ldr	r3, [pc, #344]	; (800fbe8 <interfaceDrawLayer+0x297c>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	4b58      	ldr	r3, [pc, #352]	; (800fbf4 <interfaceDrawLayer+0x2988>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	18d3      	adds	r3, r2, r3
 800fa9a:	b299      	uxth	r1, r3
 800fa9c:	4b50      	ldr	r3, [pc, #320]	; (800fbe0 <interfaceDrawLayer+0x2974>)
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	4b52      	ldr	r3, [pc, #328]	; (800fbec <interfaceDrawLayer+0x2980>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	b29c      	uxth	r4, r3
 800faa6:	4b43      	ldr	r3, [pc, #268]	; (800fbb4 <interfaceDrawLayer+0x2948>)
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	b29b      	uxth	r3, r3
 800faae:	2500      	movs	r5, #0
 800fab0:	9503      	str	r5, [sp, #12]
 800fab2:	2501      	movs	r5, #1
 800fab4:	9502      	str	r5, [sp, #8]
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	230f      	movs	r3, #15
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	0023      	movs	r3, r4
 800fabe:	f7f9 fadf 	bl	8009080 <Paint_DrawPointer>
			//^shadow
		}

		//										CHRONO DECIMAL POINTER

		if (showChrono == 1) {
 800fac2:	4b45      	ldr	r3, [pc, #276]	; (800fbd8 <interfaceDrawLayer+0x296c>)
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d133      	bne.n	800fb32 <interfaceDrawLayer+0x28c6>

			chronoDecimalsAngle = 2 * 3.14 / 10 * (chrono.decimal - 2.5);
 800faca:	4b44      	ldr	r3, [pc, #272]	; (800fbdc <interfaceDrawLayer+0x2970>)
 800facc:	799b      	ldrb	r3, [r3, #6]
 800face:	b25b      	sxtb	r3, r3
 800fad0:	0018      	movs	r0, r3
 800fad2:	f7f3 fa5d 	bl	8002f90 <__aeabi_i2d>
 800fad6:	2200      	movs	r2, #0
 800fad8:	4b47      	ldr	r3, [pc, #284]	; (800fbf8 <interfaceDrawLayer+0x298c>)
 800fada:	f7f2 fe73 	bl	80027c4 <__aeabi_dsub>
 800fade:	0002      	movs	r2, r0
 800fae0:	000b      	movs	r3, r1
 800fae2:	0010      	movs	r0, r2
 800fae4:	0019      	movs	r1, r3
 800fae6:	4a45      	ldr	r2, [pc, #276]	; (800fbfc <interfaceDrawLayer+0x2990>)
 800fae8:	4b45      	ldr	r3, [pc, #276]	; (800fc00 <interfaceDrawLayer+0x2994>)
 800faea:	f7f2 fbff 	bl	80022ec <__aeabi_dmul>
 800faee:	0002      	movs	r2, r0
 800faf0:	000b      	movs	r3, r1
 800faf2:	0010      	movs	r0, r2
 800faf4:	0019      	movs	r1, r3
 800faf6:	f7f3 fae9 	bl	80030cc <__aeabi_d2f>
 800fafa:	1c02      	adds	r2, r0, #0
 800fafc:	4b41      	ldr	r3, [pc, #260]	; (800fc04 <interfaceDrawLayer+0x2998>)
 800fafe:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoDecimalsStartX, chronoDecimalsStartY,
 800fb00:	4b41      	ldr	r3, [pc, #260]	; (800fc08 <interfaceDrawLayer+0x299c>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	b298      	uxth	r0, r3
 800fb06:	4b41      	ldr	r3, [pc, #260]	; (800fc0c <interfaceDrawLayer+0x29a0>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	b299      	uxth	r1, r3
 800fb0c:	4b3d      	ldr	r3, [pc, #244]	; (800fc04 <interfaceDrawLayer+0x2998>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	4b3f      	ldr	r3, [pc, #252]	; (800fc10 <interfaceDrawLayer+0x29a4>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	b29c      	uxth	r4, r3
 800fb16:	4b27      	ldr	r3, [pc, #156]	; (800fbb4 <interfaceDrawLayer+0x2948>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	2500      	movs	r5, #0
 800fb20:	9503      	str	r5, [sp, #12]
 800fb22:	2501      	movs	r5, #1
 800fb24:	9502      	str	r5, [sp, #8]
 800fb26:	9301      	str	r3, [sp, #4]
 800fb28:	2300      	movs	r3, #0
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	0023      	movs	r3, r4
 800fb2e:	f7f9 faa7 	bl	8009080 <Paint_DrawPointer>
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
		}

		//										DATE

		if (showDate == 1) {
 800fb32:	4b38      	ldr	r3, [pc, #224]	; (800fc14 <interfaceDrawLayer+0x29a8>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d118      	bne.n	800fb6c <interfaceDrawLayer+0x2900>
			Paint_DrawNum(dateX, dateY, actual.day, &Font12, colorSecond, colorMain); //date
 800fb3a:	4b37      	ldr	r3, [pc, #220]	; (800fc18 <interfaceDrawLayer+0x29ac>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	b298      	uxth	r0, r3
 800fb40:	4b36      	ldr	r3, [pc, #216]	; (800fc1c <interfaceDrawLayer+0x29b0>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	b299      	uxth	r1, r3
 800fb46:	4b1c      	ldr	r3, [pc, #112]	; (800fbb8 <interfaceDrawLayer+0x294c>)
 800fb48:	789b      	ldrb	r3, [r3, #2]
 800fb4a:	b25b      	sxtb	r3, r3
 800fb4c:	001d      	movs	r5, r3
 800fb4e:	4b28      	ldr	r3, [pc, #160]	; (800fbf0 <interfaceDrawLayer+0x2984>)
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	4a17      	ldr	r2, [pc, #92]	; (800fbb4 <interfaceDrawLayer+0x2948>)
 800fb58:	7812      	ldrb	r2, [r2, #0]
 800fb5a:	b2d2      	uxtb	r2, r2
 800fb5c:	b292      	uxth	r2, r2
 800fb5e:	4c30      	ldr	r4, [pc, #192]	; (800fc20 <interfaceDrawLayer+0x29b4>)
 800fb60:	9201      	str	r2, [sp, #4]
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	0023      	movs	r3, r4
 800fb66:	002a      	movs	r2, r5
 800fb68:	f7f9 fff4 	bl	8009b54 <Paint_DrawNum>
		}

		//										LOCK INDICATOR
		if (flagLocked == LOCKED) {
 800fb6c:	4b2d      	ldr	r3, [pc, #180]	; (800fc24 <interfaceDrawLayer+0x29b8>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d010      	beq.n	800fb98 <interfaceDrawLayer+0x292c>
//			Paint_DrawCircle(mainStartX, mainStartY, 5, colorSecond,
//					DOT_PIXEL_2X2, DRAW_FILL_FULL);
//			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
//								DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		} else {
			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <interfaceDrawLayer+0x2978>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	b298      	uxth	r0, r3
 800fb7c:	4b1a      	ldr	r3, [pc, #104]	; (800fbe8 <interfaceDrawLayer+0x297c>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	b299      	uxth	r1, r3
 800fb82:	4b1b      	ldr	r3, [pc, #108]	; (800fbf0 <interfaceDrawLayer+0x2984>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	9201      	str	r2, [sp, #4]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	9200      	str	r2, [sp, #0]
 800fb92:	220e      	movs	r2, #14
 800fb94:	f7f9 fc2a 	bl	80093ec <Paint_DrawCircle>
					DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

	}

}
 800fb98:	46c0      	nop			; (mov r8, r8)
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	b007      	add	sp, #28
 800fb9e:	bcc0      	pop	{r6, r7}
 800fba0:	46b9      	mov	r9, r7
 800fba2:	46b0      	mov	r8, r6
 800fba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba6:	46c0      	nop			; (mov r8, r8)
 800fba8:	200006f4 	.word	0x200006f4
 800fbac:	20000210 	.word	0x20000210
 800fbb0:	200006b4 	.word	0x200006b4
 800fbb4:	2000033a 	.word	0x2000033a
 800fbb8:	200006ac 	.word	0x200006ac
 800fbbc:	46508dff 	.word	0x46508dff
 800fbc0:	3fbacb6f 	.word	0x3fbacb6f
 800fbc4:	200006e4 	.word	0x200006e4
 800fbc8:	200001ff 	.word	0x200001ff
 800fbcc:	200006ea 	.word	0x200006ea
 800fbd0:	2000037b 	.word	0x2000037b
 800fbd4:	20000695 	.word	0x20000695
 800fbd8:	200003ac 	.word	0x200003ac
 800fbdc:	20000444 	.word	0x20000444
 800fbe0:	200006b8 	.word	0x200006b8
 800fbe4:	2000044b 	.word	0x2000044b
 800fbe8:	20000209 	.word	0x20000209
 800fbec:	200003b3 	.word	0x200003b3
 800fbf0:	200006b3 	.word	0x200006b3
 800fbf4:	20000211 	.word	0x20000211
 800fbf8:	40040000 	.word	0x40040000
 800fbfc:	74bc6a7f 	.word	0x74bc6a7f
 800fc00:	3fe41893 	.word	0x3fe41893
 800fc04:	20000370 	.word	0x20000370
 800fc08:	20000645 	.word	0x20000645
 800fc0c:	20000646 	.word	0x20000646
 800fc10:	20000700 	.word	0x20000700
 800fc14:	20000212 	.word	0x20000212
 800fc18:	200006fa 	.word	0x200006fa
 800fc1c:	20000268 	.word	0x20000268
 800fc20:	2000000c 	.word	0x2000000c
 800fc24:	200004c2 	.word	0x200004c2

0800fc28 <interfaceDrawBatteryWarning>:

void interfaceDrawBatteryWarning() {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af02      	add	r7, sp, #8
	interfaceClear();
 800fc2e:	f7fd fb0f 	bl	800d250 <interfaceClear>
	Paint_DrawString_EN(105, 90, "CHARGE", &Font16, colorSecond, colorMain);
 800fc32:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <interfaceDrawBatteryWarning+0x38>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4a0a      	ldr	r2, [pc, #40]	; (800fc64 <interfaceDrawBatteryWarning+0x3c>)
 800fc3c:	7812      	ldrb	r2, [r2, #0]
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	b292      	uxth	r2, r2
 800fc42:	4809      	ldr	r0, [pc, #36]	; (800fc68 <interfaceDrawBatteryWarning+0x40>)
 800fc44:	4909      	ldr	r1, [pc, #36]	; (800fc6c <interfaceDrawBatteryWarning+0x44>)
 800fc46:	9201      	str	r2, [sp, #4]
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	0003      	movs	r3, r0
 800fc4c:	000a      	movs	r2, r1
 800fc4e:	215a      	movs	r1, #90	; 0x5a
 800fc50:	2069      	movs	r0, #105	; 0x69
 800fc52:	f7f9 ff01 	bl	8009a58 <Paint_DrawString_EN>
	interfaceWrite();	//burn framebuffer
 800fc56:	f7fd fadd 	bl	800d214 <interfaceWrite>
}
 800fc5a:	46c0      	nop			; (mov r8, r8)
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	200006b3 	.word	0x200006b3
 800fc64:	2000033a 	.word	0x2000033a
 800fc68:	20000014 	.word	0x20000014
 800fc6c:	08016290 	.word	0x08016290

0800fc70 <LL_CRC_SetPolynomialSize>:
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	2218      	movs	r2, #24
 800fc80:	4393      	bics	r3, r2
 800fc82:	001a      	movs	r2, r3
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	431a      	orrs	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	609a      	str	r2, [r3, #8]
}
 800fc8c:	46c0      	nop			; (mov r8, r8)
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	b002      	add	sp, #8
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <LL_CRC_SetInputDataReverseMode>:
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	2260      	movs	r2, #96	; 0x60
 800fca4:	4393      	bics	r3, r2
 800fca6:	001a      	movs	r2, r3
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	431a      	orrs	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	609a      	str	r2, [r3, #8]
}
 800fcb0:	46c0      	nop			; (mov r8, r8)
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <LL_CRC_SetOutputDataReverseMode>:
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	2280      	movs	r2, #128	; 0x80
 800fcc8:	4393      	bics	r3, r2
 800fcca:	001a      	movs	r2, r3
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	431a      	orrs	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	609a      	str	r2, [r3, #8]
}
 800fcd4:	46c0      	nop			; (mov r8, r8)
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	b002      	add	sp, #8
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <LL_CRC_SetInitialData>:
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	611a      	str	r2, [r3, #16]
}
 800fcec:	46c0      	nop			; (mov r8, r8)
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	b002      	add	sp, #8
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <LL_CRC_SetPolynomialCoef>:
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	683a      	ldr	r2, [r7, #0]
 800fd02:	615a      	str	r2, [r3, #20]
}
 800fd04:	46c0      	nop			; (mov r8, r8)
 800fd06:	46bd      	mov	sp, r7
 800fd08:	b002      	add	sp, #8
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <LL_AHB1_GRP1_EnableClock>:
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800fd14:	4b07      	ldr	r3, [pc, #28]	; (800fd34 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fd16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fd18:	4b06      	ldr	r3, [pc, #24]	; (800fd34 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	430a      	orrs	r2, r1
 800fd1e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800fd20:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	4013      	ands	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
}
 800fd2c:	46c0      	nop			; (mov r8, r8)
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	b004      	add	sp, #16
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	40021000 	.word	0x40021000

0800fd38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fd38:	b590      	push	{r4, r7, lr}
 800fd3a:	b087      	sub	sp, #28
 800fd3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fd3e:	f7f3 fb5d 	bl	80033fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fd42:	f000 fa17 	bl	8010174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fd46:	f000 fca5 	bl	8010694 <MX_GPIO_Init>
  MX_DMA_Init();
 800fd4a:	f000 fc85 	bl	8010658 <MX_DMA_Init>
  MX_I2C1_Init();
 800fd4e:	f000 fb37 	bl	80103c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800fd52:	f000 fa7b 	bl	801024c <MX_ADC1_Init>
  MX_RTC_Init();
 800fd56:	f000 fb73 	bl	8010440 <MX_RTC_Init>
  MX_SPI1_Init();
 800fd5a:	f000 fbe7 	bl	801052c <MX_SPI1_Init>
  MX_TIM3_Init();
 800fd5e:	f000 fc23 	bl	80105a8 <MX_TIM3_Init>
  MX_CRC_Init();
 800fd62:	f000 fb03 	bl	801036c <MX_CRC_Init>

	//EPD test
	//EPD_1in54_V2_test();
	//										INITIALISATION
	//										RTC INITIALISATION
	rtcInit();
 800fd66:	f000 fd63 	bl	8010830 <rtcInit>

	//										SENSORS INITIALISATION

	sensingInit();
 800fd6a:	f001 f853 	bl	8010e14 <sensingInit>

	//										TIMERS INITIALISATION
	timersInit();
 800fd6e:	f003 f917 	bl	8012fa0 <timersInit>

	//										INTERFACE

	while (flagBatteryLow) {
 800fd72:	e005      	b.n	800fd80 <main+0x48>
		onSleep();
 800fd74:	f000 fd2e 	bl	80107d4 <onSleep>
		onWakeUp();
 800fd78:	f000 fd42 	bl	8010800 <onWakeUp>

		sensingRead();
 800fd7c:	f001 f976 	bl	801106c <sensingRead>
	while (flagBatteryLow) {
 800fd80:	4bc9      	ldr	r3, [pc, #804]	; (80100a8 <main+0x370>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1f4      	bne.n	800fd74 <main+0x3c>
	}

	layout = 2;  //select startup layout and color
 800fd8a:	4bc8      	ldr	r3, [pc, #800]	; (80100ac <main+0x374>)
 800fd8c:	2202      	movs	r2, #2
 800fd8e:	701a      	strb	r2, [r3, #0]
	colorScheme = COLOR_SCHEME_BLACK;
 800fd90:	4bc7      	ldr	r3, [pc, #796]	; (80100b0 <main+0x378>)
 800fd92:	2202      	movs	r2, #2
 800fd94:	701a      	strb	r2, [r3, #0]

	flagClockConfig = 0;
 800fd96:	4bc7      	ldr	r3, [pc, #796]	; (80100b4 <main+0x37c>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]

	interfaceSelectLayout(layout);  //set layout and color
 800fd9c:	4bc3      	ldr	r3, [pc, #780]	; (80100ac <main+0x374>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	0018      	movs	r0, r3
 800fda4:	f7fc fc16 	bl	800c5d4 <interfaceSelectLayout>
	interfaceSelectColorScheme(colorScheme);
 800fda8:	4bc1      	ldr	r3, [pc, #772]	; (80100b0 <main+0x378>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	0018      	movs	r0, r3
 800fdb0:	f7fd f8ba 	bl	800cf28 <interfaceSelectColorScheme>
	interfaceInit();
 800fdb4:	f7fd f8dc 	bl	800cf70 <interfaceInit>

	interfaceClear();	//clear framebuffer
 800fdb8:	f7fd fa4a 	bl	800d250 <interfaceClear>

	interfaceUpdate(INTERFACE_UPDATE_FULL);	//change update mode
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	f7fd f9f9 	bl	800d1b4 <interfaceUpdate>

	interfaceDrawLayer(1);
 800fdc2:	2001      	movs	r0, #1
 800fdc4:	f7fd fa52 	bl	800d26c <interfaceDrawLayer>
	interfaceDrawLayer(2);
 800fdc8:	2002      	movs	r0, #2
 800fdca:	f7fd fa4f 	bl	800d26c <interfaceDrawLayer>
	interfaceDrawLayer(3);
 800fdce:	2003      	movs	r0, #3
 800fdd0:	f7fd fa4c 	bl	800d26c <interfaceDrawLayer>

	interfaceWrite();
 800fdd4:	f7fd fa1e 	bl	800d214 <interfaceWrite>

	//										FLASH RESTORE SECTION

	flashWriteFlag = 0;
 800fdd8:	4bb7      	ldr	r3, [pc, #732]	; (80100b8 <main+0x380>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
	uint16_t virtualAdress[NB_OF_VARIABLES];
	uint16_t timeBackup[3];

	for (uint8_t varIndex = 1; varIndex <= 3; varIndex++) {
 800fdde:	2317      	movs	r3, #23
 800fde0:	18fb      	adds	r3, r7, r3
 800fde2:	2201      	movs	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	e00f      	b.n	800fe08 <main+0xd0>
		virtualAdress[varIndex - 1] = varIndex;
 800fde8:	2017      	movs	r0, #23
 800fdea:	183b      	adds	r3, r7, r0
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	1e5a      	subs	r2, r3, #1
 800fdf0:	183b      	adds	r3, r7, r0
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	b299      	uxth	r1, r3
 800fdf6:	230c      	movs	r3, #12
 800fdf8:	18fb      	adds	r3, r7, r3
 800fdfa:	0052      	lsls	r2, r2, #1
 800fdfc:	52d1      	strh	r1, [r2, r3]
	for (uint8_t varIndex = 1; varIndex <= 3; varIndex++) {
 800fdfe:	183b      	adds	r3, r7, r0
 800fe00:	781a      	ldrb	r2, [r3, #0]
 800fe02:	183b      	adds	r3, r7, r0
 800fe04:	3201      	adds	r2, #1
 800fe06:	701a      	strb	r2, [r3, #0]
 800fe08:	2317      	movs	r3, #23
 800fe0a:	18fb      	adds	r3, r7, r3
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	2b03      	cmp	r3, #3
 800fe10:	d9ea      	bls.n	800fde8 <main+0xb0>
	}

	HAL_FLASH_Unlock();
 800fe12:	f7f4 fded 	bl	80049f0 <HAL_FLASH_Unlock>

	uint8_t flashStatus = EE_Init(EE_CONDITIONAL_ERASE);
 800fe16:	2001      	movs	r0, #1
 800fe18:	f7f9 ffee 	bl	8009df8 <EE_Init>
 800fe1c:	0003      	movs	r3, r0
 800fe1e:	001a      	movs	r2, r3
 800fe20:	2416      	movs	r4, #22
 800fe22:	193b      	adds	r3, r7, r4
 800fe24:	701a      	strb	r2, [r3, #0]

	if(flashStatus == EE_WRITE_ERROR){
 800fe26:	193b      	adds	r3, r7, r4
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d109      	bne.n	800fe42 <main+0x10a>
		EE_Format(EE_CONDITIONAL_ERASE);
 800fe2e:	2001      	movs	r0, #1
 800fe30:	f7fa fd8a 	bl	800a948 <EE_Format>
		flashStatus = EE_Init(EE_CONDITIONAL_ERASE);
 800fe34:	2001      	movs	r0, #1
 800fe36:	f7f9 ffdf 	bl	8009df8 <EE_Init>
 800fe3a:	0003      	movs	r3, r0
 800fe3c:	001a      	movs	r2, r3
 800fe3e:	193b      	adds	r3, r7, r4
 800fe40:	701a      	strb	r2, [r3, #0]
	}

	if (flashStatus != EE_OK) {
 800fe42:	2316      	movs	r3, #22
 800fe44:	18fb      	adds	r3, r7, r3
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d001      	beq.n	800fe50 <main+0x118>
		Error_Handler();
 800fe4c:	f000 fcea 	bl	8010824 <Error_Handler>
	}

	for (uint8_t i = 0; i < 3; i++) {
 800fe50:	2315      	movs	r3, #21
 800fe52:	18fb      	adds	r3, r7, r3
 800fe54:	2200      	movs	r2, #0
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	e014      	b.n	800fe84 <main+0x14c>
		if(EE_ReadVariable16bits(virtualAdress[i], &timeBackup[i])!= EE_OK){
 800fe5a:	2115      	movs	r1, #21
 800fe5c:	187b      	adds	r3, r7, r1
 800fe5e:	781a      	ldrb	r2, [r3, #0]
 800fe60:	230c      	movs	r3, #12
 800fe62:	18fb      	adds	r3, r7, r3
 800fe64:	0052      	lsls	r2, r2, #1
 800fe66:	5ad0      	ldrh	r0, [r2, r3]
 800fe68:	000c      	movs	r4, r1
 800fe6a:	187b      	adds	r3, r7, r1
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	1d3a      	adds	r2, r7, #4
 800fe70:	005b      	lsls	r3, r3, #1
 800fe72:	18d3      	adds	r3, r2, r3
 800fe74:	0019      	movs	r1, r3
 800fe76:	f7fa fe11 	bl	800aa9c <EE_ReadVariable16bits>
	for (uint8_t i = 0; i < 3; i++) {
 800fe7a:	193b      	adds	r3, r7, r4
 800fe7c:	781a      	ldrb	r2, [r3, #0]
 800fe7e:	193b      	adds	r3, r7, r4
 800fe80:	3201      	adds	r2, #1
 800fe82:	701a      	strb	r2, [r3, #0]
 800fe84:	2315      	movs	r3, #21
 800fe86:	18fb      	adds	r3, r7, r3
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d9e5      	bls.n	800fe5a <main+0x122>
//			Error_Handler();
		}
	}

	HAL_FLASH_Lock();
 800fe8e:	f7f4 fdd3 	bl	8004a38 <HAL_FLASH_Lock>

	actual.year = (uint8_t) (timeBackup[0] >> 8);
 800fe92:	1d3b      	adds	r3, r7, #4
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	0a1b      	lsrs	r3, r3, #8
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	b25a      	sxtb	r2, r3
 800fe9c:	4b87      	ldr	r3, [pc, #540]	; (80100bc <main+0x384>)
 800fe9e:	701a      	strb	r2, [r3, #0]
	actual.month = (uint8_t) (timeBackup[0]);
 800fea0:	1d3b      	adds	r3, r7, #4
 800fea2:	881b      	ldrh	r3, [r3, #0]
 800fea4:	b25a      	sxtb	r2, r3
 800fea6:	4b85      	ldr	r3, [pc, #532]	; (80100bc <main+0x384>)
 800fea8:	705a      	strb	r2, [r3, #1]

	actual.day = (uint8_t) (timeBackup[1] >> 8);
 800feaa:	1d3b      	adds	r3, r7, #4
 800feac:	885b      	ldrh	r3, [r3, #2]
 800feae:	0a1b      	lsrs	r3, r3, #8
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	b25a      	sxtb	r2, r3
 800feb4:	4b81      	ldr	r3, [pc, #516]	; (80100bc <main+0x384>)
 800feb6:	709a      	strb	r2, [r3, #2]
	actual.hour = (uint8_t) (timeBackup[1]);
 800feb8:	1d3b      	adds	r3, r7, #4
 800feba:	885b      	ldrh	r3, [r3, #2]
 800febc:	b25a      	sxtb	r2, r3
 800febe:	4b7f      	ldr	r3, [pc, #508]	; (80100bc <main+0x384>)
 800fec0:	70da      	strb	r2, [r3, #3]

	actual.minute = (uint8_t) (timeBackup[2] >> 8);
 800fec2:	1d3b      	adds	r3, r7, #4
 800fec4:	889b      	ldrh	r3, [r3, #4]
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	b29b      	uxth	r3, r3
 800feca:	b25a      	sxtb	r2, r3
 800fecc:	4b7b      	ldr	r3, [pc, #492]	; (80100bc <main+0x384>)
 800fece:	711a      	strb	r2, [r3, #4]
	actual.second = (uint8_t) (timeBackup[2]);
 800fed0:	1d3b      	adds	r3, r7, #4
 800fed2:	889b      	ldrh	r3, [r3, #4]
 800fed4:	b25a      	sxtb	r2, r3
 800fed6:	4b79      	ldr	r3, [pc, #484]	; (80100bc <main+0x384>)
 800fed8:	715a      	strb	r2, [r3, #5]

	if (actual.year > 100)
 800feda:	4b78      	ldr	r3, [pc, #480]	; (80100bc <main+0x384>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	b25b      	sxtb	r3, r3
 800fee0:	2b64      	cmp	r3, #100	; 0x64
 800fee2:	dd02      	ble.n	800feea <main+0x1b2>
		actual.year = 20;
 800fee4:	4b75      	ldr	r3, [pc, #468]	; (80100bc <main+0x384>)
 800fee6:	2214      	movs	r2, #20
 800fee8:	701a      	strb	r2, [r3, #0]
	if (actual.month > 12)
 800feea:	4b74      	ldr	r3, [pc, #464]	; (80100bc <main+0x384>)
 800feec:	785b      	ldrb	r3, [r3, #1]
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	2b0c      	cmp	r3, #12
 800fef2:	dd02      	ble.n	800fefa <main+0x1c2>
		actual.month = 4;
 800fef4:	4b71      	ldr	r3, [pc, #452]	; (80100bc <main+0x384>)
 800fef6:	2204      	movs	r2, #4
 800fef8:	705a      	strb	r2, [r3, #1]
	if (actual.day > 31)
 800fefa:	4b70      	ldr	r3, [pc, #448]	; (80100bc <main+0x384>)
 800fefc:	789b      	ldrb	r3, [r3, #2]
 800fefe:	b25b      	sxtb	r3, r3
 800ff00:	2b1f      	cmp	r3, #31
 800ff02:	dd02      	ble.n	800ff0a <main+0x1d2>
		actual.day = 20;
 800ff04:	4b6d      	ldr	r3, [pc, #436]	; (80100bc <main+0x384>)
 800ff06:	2214      	movs	r2, #20
 800ff08:	709a      	strb	r2, [r3, #2]
	if (actual.hour > 24)
 800ff0a:	4b6c      	ldr	r3, [pc, #432]	; (80100bc <main+0x384>)
 800ff0c:	78db      	ldrb	r3, [r3, #3]
 800ff0e:	b25b      	sxtb	r3, r3
 800ff10:	2b18      	cmp	r3, #24
 800ff12:	dd02      	ble.n	800ff1a <main+0x1e2>
		actual.hour = 10;
 800ff14:	4b69      	ldr	r3, [pc, #420]	; (80100bc <main+0x384>)
 800ff16:	220a      	movs	r2, #10
 800ff18:	70da      	strb	r2, [r3, #3]
	if (actual.minute > 59)
 800ff1a:	4b68      	ldr	r3, [pc, #416]	; (80100bc <main+0x384>)
 800ff1c:	791b      	ldrb	r3, [r3, #4]
 800ff1e:	b25b      	sxtb	r3, r3
 800ff20:	2b3b      	cmp	r3, #59	; 0x3b
 800ff22:	dd02      	ble.n	800ff2a <main+0x1f2>
		actual.minute = 0;
 800ff24:	4b65      	ldr	r3, [pc, #404]	; (80100bc <main+0x384>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	711a      	strb	r2, [r3, #4]
	if (actual.second > 59)
 800ff2a:	4b64      	ldr	r3, [pc, #400]	; (80100bc <main+0x384>)
 800ff2c:	795b      	ldrb	r3, [r3, #5]
 800ff2e:	b25b      	sxtb	r3, r3
 800ff30:	2b3b      	cmp	r3, #59	; 0x3b
 800ff32:	dd02      	ble.n	800ff3a <main+0x202>
		actual.second = 0;
 800ff34:	4b61      	ldr	r3, [pc, #388]	; (80100bc <main+0x384>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	715a      	strb	r2, [r3, #5]

	rtcSetTime();
 800ff3a:	f000 fedd 	bl	8010cf8 <rtcSetTime>
  while (1)
  {

	  //									MAIN LOOP

	  		if (flagClockConfig == 1) {
 800ff3e:	4b5d      	ldr	r3, [pc, #372]	; (80100b4 <main+0x37c>)
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d104      	bne.n	800ff52 <main+0x21a>
	  			SystemClock_Config();
 800ff48:	f000 f914 	bl	8010174 <SystemClock_Config>
	  			flagClockConfig = 0;
 800ff4c:	4b59      	ldr	r3, [pc, #356]	; (80100b4 <main+0x37c>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	701a      	strb	r2, [r3, #0]
	  		}

	  		//									SENSING SECTION
	  		sensingRead();
 800ff52:	f001 f88b 	bl	801106c <sensingRead>

	  		//									RTC SECTION
	  		rtcGetTime();
 800ff56:	f000 fc81 	bl	801085c <rtcGetTime>


	  		//									FLASH BACKUP SECTION
	  		if (flashWriteFlag == 1) {
 800ff5a:	4b57      	ldr	r3, [pc, #348]	; (80100b8 <main+0x380>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d171      	bne.n	8010046 <main+0x30e>

	  			timeBackup[0] = (((uint16_t) actual.year) << 8) | actual.month;
 800ff62:	4b56      	ldr	r3, [pc, #344]	; (80100bc <main+0x384>)
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	b25b      	sxtb	r3, r3
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	021b      	lsls	r3, r3, #8
 800ff6c:	b21a      	sxth	r2, r3
 800ff6e:	4b53      	ldr	r3, [pc, #332]	; (80100bc <main+0x384>)
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	b25b      	sxtb	r3, r3
 800ff74:	b21b      	sxth	r3, r3
 800ff76:	4313      	orrs	r3, r2
 800ff78:	b21b      	sxth	r3, r3
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	1d3b      	adds	r3, r7, #4
 800ff7e:	801a      	strh	r2, [r3, #0]
	  			timeBackup[1] = (((uint16_t) actual.day) << 8) | actual.hour;
 800ff80:	4b4e      	ldr	r3, [pc, #312]	; (80100bc <main+0x384>)
 800ff82:	789b      	ldrb	r3, [r3, #2]
 800ff84:	b25b      	sxtb	r3, r3
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	021b      	lsls	r3, r3, #8
 800ff8a:	b21a      	sxth	r2, r3
 800ff8c:	4b4b      	ldr	r3, [pc, #300]	; (80100bc <main+0x384>)
 800ff8e:	78db      	ldrb	r3, [r3, #3]
 800ff90:	b25b      	sxtb	r3, r3
 800ff92:	b21b      	sxth	r3, r3
 800ff94:	4313      	orrs	r3, r2
 800ff96:	b21b      	sxth	r3, r3
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	1d3b      	adds	r3, r7, #4
 800ff9c:	805a      	strh	r2, [r3, #2]
	  			timeBackup[2] = (((uint16_t) actual.minute) << 8)
 800ff9e:	4b47      	ldr	r3, [pc, #284]	; (80100bc <main+0x384>)
 800ffa0:	791b      	ldrb	r3, [r3, #4]
 800ffa2:	b25b      	sxtb	r3, r3
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	021b      	lsls	r3, r3, #8
	  					| actual.second;
 800ffa8:	b21a      	sxth	r2, r3
 800ffaa:	4b44      	ldr	r3, [pc, #272]	; (80100bc <main+0x384>)
 800ffac:	795b      	ldrb	r3, [r3, #5]
 800ffae:	b25b      	sxtb	r3, r3
 800ffb0:	b21b      	sxth	r3, r3
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	b21b      	sxth	r3, r3
 800ffb6:	b29a      	uxth	r2, r3
	  			timeBackup[2] = (((uint16_t) actual.minute) << 8)
 800ffb8:	1d3b      	adds	r3, r7, #4
 800ffba:	809a      	strh	r2, [r3, #4]

	  			HAL_FLASH_Unlock();
 800ffbc:	f7f4 fd18 	bl	80049f0 <HAL_FLASH_Unlock>

	  			if (EE_Init(EE_CONDITIONAL_ERASE) != EE_OK) {
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	f7f9 ff19 	bl	8009df8 <EE_Init>
 800ffc6:	1e03      	subs	r3, r0, #0
 800ffc8:	d001      	beq.n	800ffce <main+0x296>
	  				Error_Handler();
 800ffca:	f000 fc2b 	bl	8010824 <Error_Handler>
	  			}

	  			for (uint8_t i = 0; i < 3; i++) {
 800ffce:	2314      	movs	r3, #20
 800ffd0:	18fb      	adds	r3, r7, r3
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	701a      	strb	r2, [r3, #0]
 800ffd6:	e018      	b.n	801000a <main+0x2d2>
	  				if(EE_WriteVariable16bits(virtualAdress[i], timeBackup[i])!= EE_OK){
 800ffd8:	2114      	movs	r1, #20
 800ffda:	187b      	adds	r3, r7, r1
 800ffdc:	781a      	ldrb	r2, [r3, #0]
 800ffde:	230c      	movs	r3, #12
 800ffe0:	18fb      	adds	r3, r7, r3
 800ffe2:	0052      	lsls	r2, r2, #1
 800ffe4:	5ad0      	ldrh	r0, [r2, r3]
 800ffe6:	187b      	adds	r3, r7, r1
 800ffe8:	781a      	ldrb	r2, [r3, #0]
 800ffea:	1d3b      	adds	r3, r7, #4
 800ffec:	0052      	lsls	r2, r2, #1
 800ffee:	5ad3      	ldrh	r3, [r2, r3]
 800fff0:	0019      	movs	r1, r3
 800fff2:	f7fa fd83 	bl	800aafc <EE_WriteVariable16bits>
 800fff6:	1e03      	subs	r3, r0, #0
 800fff8:	d001      	beq.n	800fffe <main+0x2c6>
	  					Error_Handler();
 800fffa:	f000 fc13 	bl	8010824 <Error_Handler>
	  			for (uint8_t i = 0; i < 3; i++) {
 800fffe:	2114      	movs	r1, #20
 8010000:	187b      	adds	r3, r7, r1
 8010002:	781a      	ldrb	r2, [r3, #0]
 8010004:	187b      	adds	r3, r7, r1
 8010006:	3201      	adds	r2, #1
 8010008:	701a      	strb	r2, [r3, #0]
 801000a:	2314      	movs	r3, #20
 801000c:	18fb      	adds	r3, r7, r3
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	2b02      	cmp	r3, #2
 8010012:	d9e1      	bls.n	800ffd8 <main+0x2a0>
	  				}

	  			}

	  			HAL_FLASH_Lock();
 8010014:	f7f4 fd10 	bl	8004a38 <HAL_FLASH_Lock>

	  			flashWriteFlag = 0;
 8010018:	4b27      	ldr	r3, [pc, #156]	; (80100b8 <main+0x380>)
 801001a:	2200      	movs	r2, #0
 801001c:	701a      	strb	r2, [r3, #0]
	  		}

	  		//									BATTERY SECURE SECTION

	  		while (flagBatteryLow) {
 801001e:	e012      	b.n	8010046 <main+0x30e>

	  			if (!flagBatteryWarningPrinted) {
 8010020:	4b27      	ldr	r3, [pc, #156]	; (80100c0 <main+0x388>)
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	b2db      	uxtb	r3, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	d107      	bne.n	801003a <main+0x302>
	  				interfaceDrawBatteryWarning();
 801002a:	f7ff fdfd 	bl	800fc28 <interfaceDrawBatteryWarning>
	  				mode = MODE_NORMAL;
 801002e:	4b25      	ldr	r3, [pc, #148]	; (80100c4 <main+0x38c>)
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
	  				flagBatteryWarningPrinted = 1;
 8010034:	4b22      	ldr	r3, [pc, #136]	; (80100c0 <main+0x388>)
 8010036:	2201      	movs	r2, #1
 8010038:	701a      	strb	r2, [r3, #0]
	  			}

	  			onSleep();
 801003a:	f000 fbcb 	bl	80107d4 <onSleep>
	  			onWakeUp();
 801003e:	f000 fbdf 	bl	8010800 <onWakeUp>

	  			sensingRead();
 8010042:	f001 f813 	bl	801106c <sensingRead>
	  		while (flagBatteryLow) {
 8010046:	4b18      	ldr	r3, [pc, #96]	; (80100a8 <main+0x370>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1e7      	bne.n	8010020 <main+0x2e8>
	  		}

	  		//									DISPLAY REFRESH SECTION
	  		if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {	//switch to partial if full was selected
 8010050:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <main+0x390>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	d102      	bne.n	8010060 <main+0x328>
	  			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
 801005a:	2001      	movs	r0, #1
 801005c:	f7fd f8aa 	bl	800d1b4 <interfaceUpdate>
	  		}
	  		if (flagInterfaceFullUpdate == 1) {	//switch to full if flag are active. Flag can be set via RESET button
 8010060:	4b1a      	ldr	r3, [pc, #104]	; (80100cc <main+0x394>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b01      	cmp	r3, #1
 8010068:	d105      	bne.n	8010076 <main+0x33e>
	  			interfaceUpdate(INTERFACE_UPDATE_FULL);
 801006a:	2000      	movs	r0, #0
 801006c:	f7fd f8a2 	bl	800d1b4 <interfaceUpdate>
	  			flagInterfaceFullUpdate = 0;
 8010070:	4b16      	ldr	r3, [pc, #88]	; (80100cc <main+0x394>)
 8010072:	2200      	movs	r2, #0
 8010074:	701a      	strb	r2, [r3, #0]
	  		}

	  		//									NORMAL MODE
	  		if (flagSettings == FLAG_SETTINGS_OFF && !flagBatteryLow) {
 8010076:	4b16      	ldr	r3, [pc, #88]	; (80100d0 <main+0x398>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	d129      	bne.n	80100d4 <main+0x39c>
 8010080:	4b09      	ldr	r3, [pc, #36]	; (80100a8 <main+0x370>)
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	d124      	bne.n	80100d4 <main+0x39c>

	  			interfaceClear();	//clear framebuffer
 801008a:	f7fd f8e1 	bl	800d250 <interfaceClear>
	  			interfaceDrawLayer(1);
 801008e:	2001      	movs	r0, #1
 8010090:	f7fd f8ec 	bl	800d26c <interfaceDrawLayer>
	  			interfaceDrawLayer(2);
 8010094:	2002      	movs	r0, #2
 8010096:	f7fd f8e9 	bl	800d26c <interfaceDrawLayer>
	  			interfaceDrawLayer(3);
 801009a:	2003      	movs	r0, #3
 801009c:	f7fd f8e6 	bl	800d26c <interfaceDrawLayer>
	  			interfaceWrite();	//burn framebuffer
 80100a0:	f7fd f8b8 	bl	800d214 <interfaceWrite>
 80100a4:	e02a      	b.n	80100fc <main+0x3c4>
 80100a6:	46c0      	nop			; (mov r8, r8)
 80100a8:	200006ee 	.word	0x200006ee
 80100ac:	200006f5 	.word	0x200006f5
 80100b0:	200006d8 	.word	0x200006d8
 80100b4:	20000618 	.word	0x20000618
 80100b8:	20000643 	.word	0x20000643
 80100bc:	200006ac 	.word	0x200006ac
 80100c0:	200001fe 	.word	0x200001fe
 80100c4:	200004c3 	.word	0x200004c3
 80100c8:	20000638 	.word	0x20000638
 80100cc:	2000069e 	.word	0x2000069e
 80100d0:	2000058e 	.word	0x2000058e

	  			//								SETTINGS MODE

	  		} else if (flagSettings == FLAG_SETTINGS_ON && !flagBatteryLow) {
 80100d4:	4b20      	ldr	r3, [pc, #128]	; (8010158 <main+0x420>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d10e      	bne.n	80100fc <main+0x3c4>
 80100de:	4b1f      	ldr	r3, [pc, #124]	; (801015c <main+0x424>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d109      	bne.n	80100fc <main+0x3c4>

	  			interfaceClear();	//clear framebuffer
 80100e8:	f7fd f8b2 	bl	800d250 <interfaceClear>
	  			settingsDrawSubs(); //draw settings interface
 80100ec:	f002 fa9c 	bl	8012628 <settingsDrawSubs>
	  			settingsDrawData();
 80100f0:	f001 ff7c 	bl	8011fec <settingsDrawData>
	  			settingsDrawPointer();
 80100f4:	f002 fb08 	bl	8012708 <settingsDrawPointer>
	  			interfaceWrite();	//burn framebuffer
 80100f8:	f7fd f88c 	bl	800d214 <interfaceWrite>
	  		}

	  		//									LOW POWER SECTION-SLEEP

	  		//conditions for sleep mode
	  		if ((flagSettings == FLAG_SETTINGS_OFF //settings off
 80100fc:	4b16      	ldr	r3, [pc, #88]	; (8010158 <main+0x420>)
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	d124      	bne.n	8010150 <main+0x418>
	  		&& flagDontSleep != 1 //dont sleep flag inactive
 8010106:	4b16      	ldr	r3, [pc, #88]	; (8010160 <main+0x428>)
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b01      	cmp	r3, #1
 801010e:	d01f      	beq.n	8010150 <main+0x418>
	  		&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) //reset dont pressed
 8010110:	23a0      	movs	r3, #160	; 0xa0
 8010112:	05db      	lsls	r3, r3, #23
 8010114:	2110      	movs	r1, #16
 8010116:	0018      	movs	r0, r3
 8010118:	f7f4 ff20 	bl	8004f5c <HAL_GPIO_ReadPin>
 801011c:	0003      	movs	r3, r0
 801011e:	2b01      	cmp	r3, #1
 8010120:	d116      	bne.n	8010150 <main+0x418>
	  		&& !(mode == MODE_CHRONO && chrono.minute < 1) //if chrono counts more than 1 minute
 8010122:	4b10      	ldr	r3, [pc, #64]	; (8010164 <main+0x42c>)
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	b2db      	uxtb	r3, r3
 8010128:	2b01      	cmp	r3, #1
 801012a:	d104      	bne.n	8010136 <main+0x3fe>
 801012c:	4b0e      	ldr	r3, [pc, #56]	; (8010168 <main+0x430>)
 801012e:	791b      	ldrb	r3, [r3, #4]
 8010130:	b25b      	sxtb	r3, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	dd0c      	ble.n	8010150 <main+0x418>
	  				&& LPMode == 1 //if low power mode active
 8010136:	4b0d      	ldr	r3, [pc, #52]	; (801016c <main+0x434>)
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d108      	bne.n	8010150 <main+0x418>
	  				&& counterForce >= ON_TIME) { //force timer inactive
 801013e:	4b0c      	ldr	r3, [pc, #48]	; (8010170 <main+0x438>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b13      	cmp	r3, #19
 8010146:	d903      	bls.n	8010150 <main+0x418>

	  			//to do before sleep mode
	  			onSleep();
 8010148:	f000 fb44 	bl	80107d4 <onSleep>
	  			//to do after wake up
	  			onWakeUp();
 801014c:	f000 fb58 	bl	8010800 <onWakeUp>
	  		}

	  		flagDontSleep = 0; // is set via another button, for fast display refresh after pressing
 8010150:	4b03      	ldr	r3, [pc, #12]	; (8010160 <main+0x428>)
 8010152:	2200      	movs	r2, #0
 8010154:	701a      	strb	r2, [r3, #0]
	  		if (flagClockConfig == 1) {
 8010156:	e6f2      	b.n	800ff3e <main+0x206>
 8010158:	2000058e 	.word	0x2000058e
 801015c:	200006ee 	.word	0x200006ee
 8010160:	200006d9 	.word	0x200006d9
 8010164:	200004c3 	.word	0x200004c3
 8010168:	20000444 	.word	0x20000444
 801016c:	20000619 	.word	0x20000619
 8010170:	200006da 	.word	0x200006da

08010174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010174:	b590      	push	{r4, r7, lr}
 8010176:	b093      	sub	sp, #76	; 0x4c
 8010178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801017a:	2410      	movs	r4, #16
 801017c:	193b      	adds	r3, r7, r4
 801017e:	0018      	movs	r0, r3
 8010180:	2338      	movs	r3, #56	; 0x38
 8010182:	001a      	movs	r2, r3
 8010184:	2100      	movs	r1, #0
 8010186:	f002 ffd9 	bl	801313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801018a:	003b      	movs	r3, r7
 801018c:	0018      	movs	r0, r3
 801018e:	2310      	movs	r3, #16
 8010190:	001a      	movs	r2, r3
 8010192:	2100      	movs	r1, #0
 8010194:	f002 ffd2 	bl	801313c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010198:	2380      	movs	r3, #128	; 0x80
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	0018      	movs	r0, r3
 801019e:	f7f5 fd73 	bl	8005c88 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80101a2:	f7f5 fd2b 	bl	8005bfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80101a6:	4b28      	ldr	r3, [pc, #160]	; (8010248 <SystemClock_Config+0xd4>)
 80101a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101aa:	4b27      	ldr	r3, [pc, #156]	; (8010248 <SystemClock_Config+0xd4>)
 80101ac:	2118      	movs	r1, #24
 80101ae:	438a      	bics	r2, r1
 80101b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80101b2:	193b      	adds	r3, r7, r4
 80101b4:	2206      	movs	r2, #6
 80101b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80101b8:	193b      	adds	r3, r7, r4
 80101ba:	2201      	movs	r2, #1
 80101bc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80101be:	193b      	adds	r3, r7, r4
 80101c0:	2280      	movs	r2, #128	; 0x80
 80101c2:	0052      	lsls	r2, r2, #1
 80101c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80101c6:	0021      	movs	r1, r4
 80101c8:	187b      	adds	r3, r7, r1
 80101ca:	2200      	movs	r2, #0
 80101cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80101ce:	187b      	adds	r3, r7, r1
 80101d0:	2240      	movs	r2, #64	; 0x40
 80101d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80101d4:	187b      	adds	r3, r7, r1
 80101d6:	2202      	movs	r2, #2
 80101d8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80101da:	187b      	adds	r3, r7, r1
 80101dc:	2202      	movs	r2, #2
 80101de:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80101e0:	187b      	adds	r3, r7, r1
 80101e2:	2200      	movs	r2, #0
 80101e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80101e6:	187b      	adds	r3, r7, r1
 80101e8:	2208      	movs	r2, #8
 80101ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80101ec:	187b      	adds	r3, r7, r1
 80101ee:	2280      	movs	r2, #128	; 0x80
 80101f0:	0292      	lsls	r2, r2, #10
 80101f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80101f4:	187b      	adds	r3, r7, r1
 80101f6:	2280      	movs	r2, #128	; 0x80
 80101f8:	0492      	lsls	r2, r2, #18
 80101fa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80101fc:	187b      	adds	r3, r7, r1
 80101fe:	2280      	movs	r2, #128	; 0x80
 8010200:	0592      	lsls	r2, r2, #22
 8010202:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010204:	187b      	adds	r3, r7, r1
 8010206:	0018      	movs	r0, r3
 8010208:	f7f5 fd7e 	bl	8005d08 <HAL_RCC_OscConfig>
 801020c:	1e03      	subs	r3, r0, #0
 801020e:	d001      	beq.n	8010214 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8010210:	f000 fb08 	bl	8010824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010214:	003b      	movs	r3, r7
 8010216:	2207      	movs	r2, #7
 8010218:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801021a:	003b      	movs	r3, r7
 801021c:	2202      	movs	r2, #2
 801021e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010220:	003b      	movs	r3, r7
 8010222:	2200      	movs	r2, #0
 8010224:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010226:	003b      	movs	r3, r7
 8010228:	2200      	movs	r2, #0
 801022a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801022c:	003b      	movs	r3, r7
 801022e:	2102      	movs	r1, #2
 8010230:	0018      	movs	r0, r3
 8010232:	f7f6 f889 	bl	8006348 <HAL_RCC_ClockConfig>
 8010236:	1e03      	subs	r3, r0, #0
 8010238:	d001      	beq.n	801023e <SystemClock_Config+0xca>
  {
    Error_Handler();
 801023a:	f000 faf3 	bl	8010824 <Error_Handler>
  }
}
 801023e:	46c0      	nop			; (mov r8, r8)
 8010240:	46bd      	mov	sp, r7
 8010242:	b013      	add	sp, #76	; 0x4c
 8010244:	bd90      	pop	{r4, r7, pc}
 8010246:	46c0      	nop			; (mov r8, r8)
 8010248:	40021000 	.word	0x40021000

0801024c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010252:	1d3b      	adds	r3, r7, #4
 8010254:	0018      	movs	r0, r3
 8010256:	230c      	movs	r3, #12
 8010258:	001a      	movs	r2, r3
 801025a:	2100      	movs	r1, #0
 801025c:	f002 ff6e 	bl	801313c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8010260:	4b3e      	ldr	r3, [pc, #248]	; (801035c <MX_ADC1_Init+0x110>)
 8010262:	4a3f      	ldr	r2, [pc, #252]	; (8010360 <MX_ADC1_Init+0x114>)
 8010264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8010266:	4b3d      	ldr	r3, [pc, #244]	; (801035c <MX_ADC1_Init+0x110>)
 8010268:	2280      	movs	r2, #128	; 0x80
 801026a:	05d2      	lsls	r2, r2, #23
 801026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801026e:	4b3b      	ldr	r3, [pc, #236]	; (801035c <MX_ADC1_Init+0x110>)
 8010270:	2200      	movs	r2, #0
 8010272:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010274:	4b39      	ldr	r3, [pc, #228]	; (801035c <MX_ADC1_Init+0x110>)
 8010276:	2200      	movs	r2, #0
 8010278:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801027a:	4b38      	ldr	r3, [pc, #224]	; (801035c <MX_ADC1_Init+0x110>)
 801027c:	2280      	movs	r2, #128	; 0x80
 801027e:	0392      	lsls	r2, r2, #14
 8010280:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010282:	4b36      	ldr	r3, [pc, #216]	; (801035c <MX_ADC1_Init+0x110>)
 8010284:	2208      	movs	r2, #8
 8010286:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010288:	4b34      	ldr	r3, [pc, #208]	; (801035c <MX_ADC1_Init+0x110>)
 801028a:	2200      	movs	r2, #0
 801028c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 801028e:	4b33      	ldr	r3, [pc, #204]	; (801035c <MX_ADC1_Init+0x110>)
 8010290:	2200      	movs	r2, #0
 8010292:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010294:	4b31      	ldr	r3, [pc, #196]	; (801035c <MX_ADC1_Init+0x110>)
 8010296:	2200      	movs	r2, #0
 8010298:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 801029a:	4b30      	ldr	r3, [pc, #192]	; (801035c <MX_ADC1_Init+0x110>)
 801029c:	2203      	movs	r2, #3
 801029e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80102a0:	4b2e      	ldr	r3, [pc, #184]	; (801035c <MX_ADC1_Init+0x110>)
 80102a2:	2220      	movs	r2, #32
 80102a4:	2101      	movs	r1, #1
 80102a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80102a8:	4b2c      	ldr	r3, [pc, #176]	; (801035c <MX_ADC1_Init+0x110>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80102ae:	4b2b      	ldr	r3, [pc, #172]	; (801035c <MX_ADC1_Init+0x110>)
 80102b0:	2200      	movs	r2, #0
 80102b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80102b4:	4b29      	ldr	r3, [pc, #164]	; (801035c <MX_ADC1_Init+0x110>)
 80102b6:	222c      	movs	r2, #44	; 0x2c
 80102b8:	2100      	movs	r1, #0
 80102ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80102bc:	4b27      	ldr	r3, [pc, #156]	; (801035c <MX_ADC1_Init+0x110>)
 80102be:	2280      	movs	r2, #128	; 0x80
 80102c0:	0152      	lsls	r2, r2, #5
 80102c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80102c4:	4b25      	ldr	r3, [pc, #148]	; (801035c <MX_ADC1_Init+0x110>)
 80102c6:	2204      	movs	r2, #4
 80102c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 80102ca:	4b24      	ldr	r3, [pc, #144]	; (801035c <MX_ADC1_Init+0x110>)
 80102cc:	2204      	movs	r2, #4
 80102ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80102d0:	4b22      	ldr	r3, [pc, #136]	; (801035c <MX_ADC1_Init+0x110>)
 80102d2:	223c      	movs	r2, #60	; 0x3c
 80102d4:	2100      	movs	r1, #0
 80102d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80102d8:	4b20      	ldr	r3, [pc, #128]	; (801035c <MX_ADC1_Init+0x110>)
 80102da:	2200      	movs	r2, #0
 80102dc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80102de:	4b1f      	ldr	r3, [pc, #124]	; (801035c <MX_ADC1_Init+0x110>)
 80102e0:	0018      	movs	r0, r3
 80102e2:	f7f3 fa97 	bl	8003814 <HAL_ADC_Init>
 80102e6:	1e03      	subs	r3, r0, #0
 80102e8:	d001      	beq.n	80102ee <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80102ea:	f000 fa9b 	bl	8010824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80102ee:	1d3b      	adds	r3, r7, #4
 80102f0:	4a1c      	ldr	r2, [pc, #112]	; (8010364 <MX_ADC1_Init+0x118>)
 80102f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80102f4:	1d3b      	adds	r3, r7, #4
 80102f6:	2200      	movs	r2, #0
 80102f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80102fa:	1d3b      	adds	r3, r7, #4
 80102fc:	2200      	movs	r2, #0
 80102fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010300:	1d3a      	adds	r2, r7, #4
 8010302:	4b16      	ldr	r3, [pc, #88]	; (801035c <MX_ADC1_Init+0x110>)
 8010304:	0011      	movs	r1, r2
 8010306:	0018      	movs	r0, r3
 8010308:	f7f3 fd08 	bl	8003d1c <HAL_ADC_ConfigChannel>
 801030c:	1e03      	subs	r3, r0, #0
 801030e:	d001      	beq.n	8010314 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8010310:	f000 fa88 	bl	8010824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8010314:	1d3b      	adds	r3, r7, #4
 8010316:	2201      	movs	r2, #1
 8010318:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801031a:	1d3b      	adds	r3, r7, #4
 801031c:	2204      	movs	r2, #4
 801031e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010320:	1d3a      	adds	r2, r7, #4
 8010322:	4b0e      	ldr	r3, [pc, #56]	; (801035c <MX_ADC1_Init+0x110>)
 8010324:	0011      	movs	r1, r2
 8010326:	0018      	movs	r0, r3
 8010328:	f7f3 fcf8 	bl	8003d1c <HAL_ADC_ConfigChannel>
 801032c:	1e03      	subs	r3, r0, #0
 801032e:	d001      	beq.n	8010334 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8010330:	f000 fa78 	bl	8010824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8010334:	1d3b      	adds	r3, r7, #4
 8010336:	4a0c      	ldr	r2, [pc, #48]	; (8010368 <MX_ADC1_Init+0x11c>)
 8010338:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 801033a:	1d3b      	adds	r3, r7, #4
 801033c:	2208      	movs	r2, #8
 801033e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010340:	1d3a      	adds	r2, r7, #4
 8010342:	4b06      	ldr	r3, [pc, #24]	; (801035c <MX_ADC1_Init+0x110>)
 8010344:	0011      	movs	r1, r2
 8010346:	0018      	movs	r0, r3
 8010348:	f7f3 fce8 	bl	8003d1c <HAL_ADC_ConfigChannel>
 801034c:	1e03      	subs	r3, r0, #0
 801034e:	d001      	beq.n	8010354 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8010350:	f000 fa68 	bl	8010824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8010354:	46c0      	nop			; (mov r8, r8)
 8010356:	46bd      	mov	sp, r7
 8010358:	b004      	add	sp, #16
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20000454 	.word	0x20000454
 8010360:	40012400 	.word	0x40012400
 8010364:	04000002 	.word	0x04000002
 8010368:	14000020 	.word	0x14000020

0801036c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8010370:	2380      	movs	r3, #128	; 0x80
 8010372:	015b      	lsls	r3, r3, #5
 8010374:	0018      	movs	r0, r3
 8010376:	f7ff fcc9 	bl	800fd0c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 801037a:	4b0f      	ldr	r3, [pc, #60]	; (80103b8 <MX_CRC_Init+0x4c>)
 801037c:	2100      	movs	r1, #0
 801037e:	0018      	movs	r0, r3
 8010380:	f7ff fc88 	bl	800fc94 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 8010384:	4b0c      	ldr	r3, [pc, #48]	; (80103b8 <MX_CRC_Init+0x4c>)
 8010386:	2100      	movs	r1, #0
 8010388:	0018      	movs	r0, r3
 801038a:	f7ff fc95 	bl	800fcb8 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 801038e:	4a0b      	ldr	r2, [pc, #44]	; (80103bc <MX_CRC_Init+0x50>)
 8010390:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <MX_CRC_Init+0x4c>)
 8010392:	0011      	movs	r1, r2
 8010394:	0018      	movs	r0, r3
 8010396:	f7ff fcad 	bl	800fcf4 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 801039a:	4b07      	ldr	r3, [pc, #28]	; (80103b8 <MX_CRC_Init+0x4c>)
 801039c:	2100      	movs	r1, #0
 801039e:	0018      	movs	r0, r3
 80103a0:	f7ff fc66 	bl	800fc70 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 80103a4:	2301      	movs	r3, #1
 80103a6:	425b      	negs	r3, r3
 80103a8:	4a03      	ldr	r2, [pc, #12]	; (80103b8 <MX_CRC_Init+0x4c>)
 80103aa:	0019      	movs	r1, r3
 80103ac:	0010      	movs	r0, r2
 80103ae:	f7ff fc95 	bl	800fcdc <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80103b2:	46c0      	nop			; (mov r8, r8)
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	40023000 	.word	0x40023000
 80103bc:	04c11db7 	.word	0x04c11db7

080103c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80103c4:	4b1b      	ldr	r3, [pc, #108]	; (8010434 <MX_I2C1_Init+0x74>)
 80103c6:	4a1c      	ldr	r2, [pc, #112]	; (8010438 <MX_I2C1_Init+0x78>)
 80103c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80103ca:	4b1a      	ldr	r3, [pc, #104]	; (8010434 <MX_I2C1_Init+0x74>)
 80103cc:	4a1b      	ldr	r2, [pc, #108]	; (801043c <MX_I2C1_Init+0x7c>)
 80103ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80103d0:	4b18      	ldr	r3, [pc, #96]	; (8010434 <MX_I2C1_Init+0x74>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80103d6:	4b17      	ldr	r3, [pc, #92]	; (8010434 <MX_I2C1_Init+0x74>)
 80103d8:	2201      	movs	r2, #1
 80103da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80103dc:	4b15      	ldr	r3, [pc, #84]	; (8010434 <MX_I2C1_Init+0x74>)
 80103de:	2200      	movs	r2, #0
 80103e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80103e2:	4b14      	ldr	r3, [pc, #80]	; (8010434 <MX_I2C1_Init+0x74>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80103e8:	4b12      	ldr	r3, [pc, #72]	; (8010434 <MX_I2C1_Init+0x74>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80103ee:	4b11      	ldr	r3, [pc, #68]	; (8010434 <MX_I2C1_Init+0x74>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80103f4:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <MX_I2C1_Init+0x74>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80103fa:	4b0e      	ldr	r3, [pc, #56]	; (8010434 <MX_I2C1_Init+0x74>)
 80103fc:	0018      	movs	r0, r3
 80103fe:	f7f4 fe1b 	bl	8005038 <HAL_I2C_Init>
 8010402:	1e03      	subs	r3, r0, #0
 8010404:	d001      	beq.n	801040a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010406:	f000 fa0d 	bl	8010824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801040a:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <MX_I2C1_Init+0x74>)
 801040c:	2100      	movs	r1, #0
 801040e:	0018      	movs	r0, r3
 8010410:	f7f5 fb5c 	bl	8005acc <HAL_I2CEx_ConfigAnalogFilter>
 8010414:	1e03      	subs	r3, r0, #0
 8010416:	d001      	beq.n	801041c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8010418:	f000 fa04 	bl	8010824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801041c:	4b05      	ldr	r3, [pc, #20]	; (8010434 <MX_I2C1_Init+0x74>)
 801041e:	2100      	movs	r1, #0
 8010420:	0018      	movs	r0, r3
 8010422:	f7f5 fb9f 	bl	8005b64 <HAL_I2CEx_ConfigDigitalFilter>
 8010426:	1e03      	subs	r3, r0, #0
 8010428:	d001      	beq.n	801042e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801042a:	f000 f9fb 	bl	8010824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801042e:	46c0      	nop			; (mov r8, r8)
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	2000021c 	.word	0x2000021c
 8010438:	40005400 	.word	0x40005400
 801043c:	10707dbc 	.word	0x10707dbc

08010440 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8010446:	1d3b      	adds	r3, r7, #4
 8010448:	0018      	movs	r0, r3
 801044a:	2314      	movs	r3, #20
 801044c:	001a      	movs	r2, r3
 801044e:	2100      	movs	r1, #0
 8010450:	f002 fe74 	bl	801313c <memset>
  RTC_DateTypeDef sDate = {0};
 8010454:	003b      	movs	r3, r7
 8010456:	2200      	movs	r2, #0
 8010458:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 801045a:	4b32      	ldr	r3, [pc, #200]	; (8010524 <MX_RTC_Init+0xe4>)
 801045c:	4a32      	ldr	r2, [pc, #200]	; (8010528 <MX_RTC_Init+0xe8>)
 801045e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010460:	4b30      	ldr	r3, [pc, #192]	; (8010524 <MX_RTC_Init+0xe4>)
 8010462:	2200      	movs	r2, #0
 8010464:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8010466:	4b2f      	ldr	r3, [pc, #188]	; (8010524 <MX_RTC_Init+0xe4>)
 8010468:	227f      	movs	r2, #127	; 0x7f
 801046a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 801046c:	4b2d      	ldr	r3, [pc, #180]	; (8010524 <MX_RTC_Init+0xe4>)
 801046e:	22ff      	movs	r2, #255	; 0xff
 8010470:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010472:	4b2c      	ldr	r3, [pc, #176]	; (8010524 <MX_RTC_Init+0xe4>)
 8010474:	2200      	movs	r2, #0
 8010476:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010478:	4b2a      	ldr	r3, [pc, #168]	; (8010524 <MX_RTC_Init+0xe4>)
 801047a:	2200      	movs	r2, #0
 801047c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801047e:	4b29      	ldr	r3, [pc, #164]	; (8010524 <MX_RTC_Init+0xe4>)
 8010480:	2200      	movs	r2, #0
 8010482:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010484:	4b27      	ldr	r3, [pc, #156]	; (8010524 <MX_RTC_Init+0xe4>)
 8010486:	2280      	movs	r2, #128	; 0x80
 8010488:	05d2      	lsls	r2, r2, #23
 801048a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 801048c:	4b25      	ldr	r3, [pc, #148]	; (8010524 <MX_RTC_Init+0xe4>)
 801048e:	2200      	movs	r2, #0
 8010490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010492:	4b24      	ldr	r3, [pc, #144]	; (8010524 <MX_RTC_Init+0xe4>)
 8010494:	0018      	movs	r0, r3
 8010496:	f7f6 fa99 	bl	80069cc <HAL_RTC_Init>
 801049a:	1e03      	subs	r3, r0, #0
 801049c:	d001      	beq.n	80104a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 801049e:	f000 f9c1 	bl	8010824 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80104a2:	1d3b      	adds	r3, r7, #4
 80104a4:	220a      	movs	r2, #10
 80104a6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 80104a8:	1d3b      	adds	r3, r7, #4
 80104aa:	220a      	movs	r2, #10
 80104ac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80104ae:	1d3b      	adds	r3, r7, #4
 80104b0:	2200      	movs	r2, #0
 80104b2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80104b4:	1d3b      	adds	r3, r7, #4
 80104b6:	2200      	movs	r2, #0
 80104b8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80104ba:	1d3b      	adds	r3, r7, #4
 80104bc:	2200      	movs	r2, #0
 80104be:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80104c0:	1d3b      	adds	r3, r7, #4
 80104c2:	2200      	movs	r2, #0
 80104c4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80104c6:	1d39      	adds	r1, r7, #4
 80104c8:	4b16      	ldr	r3, [pc, #88]	; (8010524 <MX_RTC_Init+0xe4>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	0018      	movs	r0, r3
 80104ce:	f7f6 fb13 	bl	8006af8 <HAL_RTC_SetTime>
 80104d2:	1e03      	subs	r3, r0, #0
 80104d4:	d001      	beq.n	80104da <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80104d6:	f000 f9a5 	bl	8010824 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80104da:	003b      	movs	r3, r7
 80104dc:	2202      	movs	r2, #2
 80104de:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80104e0:	003b      	movs	r3, r7
 80104e2:	2204      	movs	r2, #4
 80104e4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 20;
 80104e6:	003b      	movs	r3, r7
 80104e8:	2214      	movs	r2, #20
 80104ea:	709a      	strb	r2, [r3, #2]
  sDate.Year = 20;
 80104ec:	003b      	movs	r3, r7
 80104ee:	2214      	movs	r2, #20
 80104f0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80104f2:	0039      	movs	r1, r7
 80104f4:	4b0b      	ldr	r3, [pc, #44]	; (8010524 <MX_RTC_Init+0xe4>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	0018      	movs	r0, r3
 80104fa:	f7f6 fc01 	bl	8006d00 <HAL_RTC_SetDate>
 80104fe:	1e03      	subs	r3, r0, #0
 8010500:	d001      	beq.n	8010506 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8010502:	f000 f98f 	bl	8010824 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8010506:	4b07      	ldr	r3, [pc, #28]	; (8010524 <MX_RTC_Init+0xe4>)
 8010508:	2204      	movs	r2, #4
 801050a:	213c      	movs	r1, #60	; 0x3c
 801050c:	0018      	movs	r0, r3
 801050e:	f7f6 fdcb 	bl	80070a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8010512:	1e03      	subs	r3, r0, #0
 8010514:	d001      	beq.n	801051a <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8010516:	f000 f985 	bl	8010824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801051a:	46c0      	nop			; (mov r8, r8)
 801051c:	46bd      	mov	sp, r7
 801051e:	b006      	add	sp, #24
 8010520:	bd80      	pop	{r7, pc}
 8010522:	46c0      	nop			; (mov r8, r8)
 8010524:	20000770 	.word	0x20000770
 8010528:	40002800 	.word	0x40002800

0801052c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8010530:	4b1b      	ldr	r3, [pc, #108]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010532:	4a1c      	ldr	r2, [pc, #112]	; (80105a4 <MX_SPI1_Init+0x78>)
 8010534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8010536:	4b1a      	ldr	r3, [pc, #104]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010538:	2282      	movs	r2, #130	; 0x82
 801053a:	0052      	lsls	r2, r2, #1
 801053c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801053e:	4b18      	ldr	r3, [pc, #96]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010540:	2200      	movs	r2, #0
 8010542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010544:	4b16      	ldr	r3, [pc, #88]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010546:	22e0      	movs	r2, #224	; 0xe0
 8010548:	00d2      	lsls	r2, r2, #3
 801054a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801054c:	4b14      	ldr	r3, [pc, #80]	; (80105a0 <MX_SPI1_Init+0x74>)
 801054e:	2200      	movs	r2, #0
 8010550:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010552:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010554:	2200      	movs	r2, #0
 8010556:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010558:	4b11      	ldr	r3, [pc, #68]	; (80105a0 <MX_SPI1_Init+0x74>)
 801055a:	2280      	movs	r2, #128	; 0x80
 801055c:	0092      	lsls	r2, r2, #2
 801055e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010560:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010562:	2218      	movs	r2, #24
 8010564:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010566:	4b0e      	ldr	r3, [pc, #56]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010568:	2200      	movs	r2, #0
 801056a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801056c:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <MX_SPI1_Init+0x74>)
 801056e:	2200      	movs	r2, #0
 8010570:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010572:	4b0b      	ldr	r3, [pc, #44]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010574:	2200      	movs	r2, #0
 8010576:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8010578:	4b09      	ldr	r3, [pc, #36]	; (80105a0 <MX_SPI1_Init+0x74>)
 801057a:	2207      	movs	r2, #7
 801057c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801057e:	4b08      	ldr	r3, [pc, #32]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010580:	2200      	movs	r2, #0
 8010582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010584:	4b06      	ldr	r3, [pc, #24]	; (80105a0 <MX_SPI1_Init+0x74>)
 8010586:	2208      	movs	r2, #8
 8010588:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801058a:	4b05      	ldr	r3, [pc, #20]	; (80105a0 <MX_SPI1_Init+0x74>)
 801058c:	0018      	movs	r0, r3
 801058e:	f7f6 fe4b 	bl	8007228 <HAL_SPI_Init>
 8010592:	1e03      	subs	r3, r0, #0
 8010594:	d001      	beq.n	801059a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8010596:	f000 f945 	bl	8010824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801059a:	46c0      	nop			; (mov r8, r8)
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	2000079c 	.word	0x2000079c
 80105a4:	40013000 	.word	0x40013000

080105a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b088      	sub	sp, #32
 80105ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80105ae:	2310      	movs	r3, #16
 80105b0:	18fb      	adds	r3, r7, r3
 80105b2:	0018      	movs	r0, r3
 80105b4:	2310      	movs	r3, #16
 80105b6:	001a      	movs	r2, r3
 80105b8:	2100      	movs	r1, #0
 80105ba:	f002 fdbf 	bl	801313c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80105be:	1d3b      	adds	r3, r7, #4
 80105c0:	0018      	movs	r0, r3
 80105c2:	230c      	movs	r3, #12
 80105c4:	001a      	movs	r2, r3
 80105c6:	2100      	movs	r1, #0
 80105c8:	f002 fdb8 	bl	801313c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80105cc:	4b1e      	ldr	r3, [pc, #120]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105ce:	4a1f      	ldr	r2, [pc, #124]	; (801064c <MX_TIM3_Init+0xa4>)
 80105d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 80105d2:	4b1d      	ldr	r3, [pc, #116]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105d4:	4a1e      	ldr	r2, [pc, #120]	; (8010650 <MX_TIM3_Init+0xa8>)
 80105d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80105d8:	4b1b      	ldr	r3, [pc, #108]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105da:	2200      	movs	r2, #0
 80105dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80105de:	4b1a      	ldr	r3, [pc, #104]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105e0:	4a1c      	ldr	r2, [pc, #112]	; (8010654 <MX_TIM3_Init+0xac>)
 80105e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80105e4:	4b18      	ldr	r3, [pc, #96]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80105ea:	4b17      	ldr	r3, [pc, #92]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80105f0:	4b15      	ldr	r3, [pc, #84]	; (8010648 <MX_TIM3_Init+0xa0>)
 80105f2:	0018      	movs	r0, r3
 80105f4:	f7f7 f99e 	bl	8007934 <HAL_TIM_Base_Init>
 80105f8:	1e03      	subs	r3, r0, #0
 80105fa:	d001      	beq.n	8010600 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80105fc:	f000 f912 	bl	8010824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010600:	2110      	movs	r1, #16
 8010602:	187b      	adds	r3, r7, r1
 8010604:	2280      	movs	r2, #128	; 0x80
 8010606:	0152      	lsls	r2, r2, #5
 8010608:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801060a:	187a      	adds	r2, r7, r1
 801060c:	4b0e      	ldr	r3, [pc, #56]	; (8010648 <MX_TIM3_Init+0xa0>)
 801060e:	0011      	movs	r1, r2
 8010610:	0018      	movs	r0, r3
 8010612:	f7f7 fb75 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 8010616:	1e03      	subs	r3, r0, #0
 8010618:	d001      	beq.n	801061e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 801061a:	f000 f903 	bl	8010824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801061e:	1d3b      	adds	r3, r7, #4
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010624:	1d3b      	adds	r3, r7, #4
 8010626:	2200      	movs	r2, #0
 8010628:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801062a:	1d3a      	adds	r2, r7, #4
 801062c:	4b06      	ldr	r3, [pc, #24]	; (8010648 <MX_TIM3_Init+0xa0>)
 801062e:	0011      	movs	r1, r2
 8010630:	0018      	movs	r0, r3
 8010632:	f7f7 fd6d 	bl	8008110 <HAL_TIMEx_MasterConfigSynchronization>
 8010636:	1e03      	subs	r3, r0, #0
 8010638:	d001      	beq.n	801063e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 801063a:	f000 f8f3 	bl	8010824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 801063e:	46c0      	nop			; (mov r8, r8)
 8010640:	46bd      	mov	sp, r7
 8010642:	b008      	add	sp, #32
 8010644:	bd80      	pop	{r7, pc}
 8010646:	46c0      	nop			; (mov r8, r8)
 8010648:	200003c0 	.word	0x200003c0
 801064c:	40000400 	.word	0x40000400
 8010650:	00000c7f 	.word	0x00000c7f
 8010654:	00004e1f 	.word	0x00004e1f

08010658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801065e:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <MX_DMA_Init+0x38>)
 8010660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010662:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <MX_DMA_Init+0x38>)
 8010664:	2101      	movs	r1, #1
 8010666:	430a      	orrs	r2, r1
 8010668:	639a      	str	r2, [r3, #56]	; 0x38
 801066a:	4b09      	ldr	r3, [pc, #36]	; (8010690 <MX_DMA_Init+0x38>)
 801066c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801066e:	2201      	movs	r2, #1
 8010670:	4013      	ands	r3, r2
 8010672:	607b      	str	r3, [r7, #4]
 8010674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8010676:	2200      	movs	r2, #0
 8010678:	2100      	movs	r1, #0
 801067a:	2009      	movs	r0, #9
 801067c:	f7f3 fee6 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8010680:	2009      	movs	r0, #9
 8010682:	f7f3 fef8 	bl	8004476 <HAL_NVIC_EnableIRQ>

}
 8010686:	46c0      	nop			; (mov r8, r8)
 8010688:	46bd      	mov	sp, r7
 801068a:	b002      	add	sp, #8
 801068c:	bd80      	pop	{r7, pc}
 801068e:	46c0      	nop			; (mov r8, r8)
 8010690:	40021000 	.word	0x40021000

08010694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010694:	b590      	push	{r4, r7, lr}
 8010696:	b089      	sub	sp, #36	; 0x24
 8010698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801069a:	240c      	movs	r4, #12
 801069c:	193b      	adds	r3, r7, r4
 801069e:	0018      	movs	r0, r3
 80106a0:	2314      	movs	r3, #20
 80106a2:	001a      	movs	r2, r3
 80106a4:	2100      	movs	r1, #0
 80106a6:	f002 fd49 	bl	801313c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80106aa:	4b48      	ldr	r3, [pc, #288]	; (80107cc <MX_GPIO_Init+0x138>)
 80106ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106ae:	4b47      	ldr	r3, [pc, #284]	; (80107cc <MX_GPIO_Init+0x138>)
 80106b0:	2104      	movs	r1, #4
 80106b2:	430a      	orrs	r2, r1
 80106b4:	635a      	str	r2, [r3, #52]	; 0x34
 80106b6:	4b45      	ldr	r3, [pc, #276]	; (80107cc <MX_GPIO_Init+0x138>)
 80106b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ba:	2204      	movs	r2, #4
 80106bc:	4013      	ands	r3, r2
 80106be:	60bb      	str	r3, [r7, #8]
 80106c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80106c2:	4b42      	ldr	r3, [pc, #264]	; (80107cc <MX_GPIO_Init+0x138>)
 80106c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106c6:	4b41      	ldr	r3, [pc, #260]	; (80107cc <MX_GPIO_Init+0x138>)
 80106c8:	2101      	movs	r1, #1
 80106ca:	430a      	orrs	r2, r1
 80106cc:	635a      	str	r2, [r3, #52]	; 0x34
 80106ce:	4b3f      	ldr	r3, [pc, #252]	; (80107cc <MX_GPIO_Init+0x138>)
 80106d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106d2:	2201      	movs	r2, #1
 80106d4:	4013      	ands	r3, r2
 80106d6:	607b      	str	r3, [r7, #4]
 80106d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80106da:	4b3c      	ldr	r3, [pc, #240]	; (80107cc <MX_GPIO_Init+0x138>)
 80106dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106de:	4b3b      	ldr	r3, [pc, #236]	; (80107cc <MX_GPIO_Init+0x138>)
 80106e0:	2102      	movs	r1, #2
 80106e2:	430a      	orrs	r2, r1
 80106e4:	635a      	str	r2, [r3, #52]	; 0x34
 80106e6:	4b39      	ldr	r3, [pc, #228]	; (80107cc <MX_GPIO_Init+0x138>)
 80106e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ea:	2202      	movs	r2, #2
 80106ec:	4013      	ands	r3, r2
 80106ee:	603b      	str	r3, [r7, #0]
 80106f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80106f2:	23e0      	movs	r3, #224	; 0xe0
 80106f4:	00d9      	lsls	r1, r3, #3
 80106f6:	23a0      	movs	r3, #160	; 0xa0
 80106f8:	05db      	lsls	r3, r3, #23
 80106fa:	2200      	movs	r2, #0
 80106fc:	0018      	movs	r0, r3
 80106fe:	f7f4 fc4a 	bl	8004f96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8010702:	4b33      	ldr	r3, [pc, #204]	; (80107d0 <MX_GPIO_Init+0x13c>)
 8010704:	2200      	movs	r2, #0
 8010706:	2140      	movs	r1, #64	; 0x40
 8010708:	0018      	movs	r0, r3
 801070a:	f7f4 fc44 	bl	8004f96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_Pin SET_Pin RESET_Pin */
  GPIO_InitStruct.Pin = START_Pin|SET_Pin|RESET_Pin;
 801070e:	193b      	adds	r3, r7, r4
 8010710:	221c      	movs	r2, #28
 8010712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010714:	193b      	adds	r3, r7, r4
 8010716:	2284      	movs	r2, #132	; 0x84
 8010718:	0392      	lsls	r2, r2, #14
 801071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801071c:	193b      	adds	r3, r7, r4
 801071e:	2201      	movs	r2, #1
 8010720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010722:	193a      	adds	r2, r7, r4
 8010724:	23a0      	movs	r3, #160	; 0xa0
 8010726:	05db      	lsls	r3, r3, #23
 8010728:	0011      	movs	r1, r2
 801072a:	0018      	movs	r0, r3
 801072c:	f7f4 fab2 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DC_Pin|RST_Pin;
 8010730:	0021      	movs	r1, r4
 8010732:	187b      	adds	r3, r7, r1
 8010734:	22e0      	movs	r2, #224	; 0xe0
 8010736:	00d2      	lsls	r2, r2, #3
 8010738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801073a:	000c      	movs	r4, r1
 801073c:	193b      	adds	r3, r7, r4
 801073e:	2201      	movs	r2, #1
 8010740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010742:	193b      	adds	r3, r7, r4
 8010744:	2200      	movs	r2, #0
 8010746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010748:	193b      	adds	r3, r7, r4
 801074a:	2200      	movs	r2, #0
 801074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801074e:	193a      	adds	r2, r7, r4
 8010750:	23a0      	movs	r3, #160	; 0xa0
 8010752:	05db      	lsls	r3, r3, #23
 8010754:	0011      	movs	r1, r2
 8010756:	0018      	movs	r0, r3
 8010758:	f7f4 fa9c 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 801075c:	193b      	adds	r3, r7, r4
 801075e:	2280      	movs	r2, #128	; 0x80
 8010760:	0152      	lsls	r2, r2, #5
 8010762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010764:	193b      	adds	r3, r7, r4
 8010766:	2200      	movs	r2, #0
 8010768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801076a:	193b      	adds	r3, r7, r4
 801076c:	2200      	movs	r2, #0
 801076e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8010770:	193a      	adds	r2, r7, r4
 8010772:	23a0      	movs	r3, #160	; 0xa0
 8010774:	05db      	lsls	r3, r3, #23
 8010776:	0011      	movs	r1, r2
 8010778:	0018      	movs	r0, r3
 801077a:	f7f4 fa8b 	bl	8004c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 801077e:	0021      	movs	r1, r4
 8010780:	187b      	adds	r3, r7, r1
 8010782:	2240      	movs	r2, #64	; 0x40
 8010784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010786:	187b      	adds	r3, r7, r1
 8010788:	2201      	movs	r2, #1
 801078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801078c:	187b      	adds	r3, r7, r1
 801078e:	2200      	movs	r2, #0
 8010790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010792:	187b      	adds	r3, r7, r1
 8010794:	2200      	movs	r2, #0
 8010796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8010798:	187b      	adds	r3, r7, r1
 801079a:	4a0d      	ldr	r2, [pc, #52]	; (80107d0 <MX_GPIO_Init+0x13c>)
 801079c:	0019      	movs	r1, r3
 801079e:	0010      	movs	r0, r2
 80107a0:	f7f4 fa78 	bl	8004c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 80107a4:	2200      	movs	r2, #0
 80107a6:	2102      	movs	r1, #2
 80107a8:	2006      	movs	r0, #6
 80107aa:	f7f3 fe4f 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80107ae:	2006      	movs	r0, #6
 80107b0:	f7f3 fe61 	bl	8004476 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80107b4:	2200      	movs	r2, #0
 80107b6:	2102      	movs	r1, #2
 80107b8:	2007      	movs	r0, #7
 80107ba:	f7f3 fe47 	bl	800444c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80107be:	2007      	movs	r0, #7
 80107c0:	f7f3 fe59 	bl	8004476 <HAL_NVIC_EnableIRQ>

}
 80107c4:	46c0      	nop			; (mov r8, r8)
 80107c6:	46bd      	mov	sp, r7
 80107c8:	b009      	add	sp, #36	; 0x24
 80107ca:	bd90      	pop	{r4, r7, pc}
 80107cc:	40021000 	.word	0x40021000
 80107d0:	50000400 	.word	0x50000400

080107d4 <onSleep>:

/* USER CODE BEGIN 4 */
void onSleep(void) {
 80107d4:	b580      	push	{r7, lr}
 80107d6:	af00      	add	r7, sp, #0
	//			EPD_1IN54_V2_Sleep();
	//			DEV_Module_Exit();
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 0);
 80107d8:	4b08      	ldr	r3, [pc, #32]	; (80107fc <onSleep+0x28>)
 80107da:	2200      	movs	r2, #0
 80107dc:	2140      	movs	r1, #64	; 0x40
 80107de:	0018      	movs	r0, r3
 80107e0:	f7f4 fbd9 	bl	8004f96 <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 80107e4:	f7f2 feb4 	bl	8003550 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80107e8:	2380      	movs	r3, #128	; 0x80
 80107ea:	01db      	lsls	r3, r3, #7
 80107ec:	2101      	movs	r1, #1
 80107ee:	0018      	movs	r0, r3
 80107f0:	f7f5 fa12 	bl	8005c18 <HAL_PWR_EnterSTOPMode>
	//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
}
 80107f4:	46c0      	nop			; (mov r8, r8)
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	46c0      	nop			; (mov r8, r8)
 80107fc:	50000400 	.word	0x50000400

08010800 <onWakeUp>:
void onWakeUp(void) {
 8010800:	b580      	push	{r7, lr}
 8010802:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 8010804:	f7f2 feb2 	bl	800356c <HAL_ResumeTick>
	SystemClock_Config();
 8010808:	f7ff fcb4 	bl	8010174 <SystemClock_Config>
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 1);
 801080c:	4b04      	ldr	r3, [pc, #16]	; (8010820 <onWakeUp+0x20>)
 801080e:	2201      	movs	r2, #1
 8010810:	2140      	movs	r1, #64	; 0x40
 8010812:	0018      	movs	r0, r3
 8010814:	f7f4 fbbf 	bl	8004f96 <HAL_GPIO_WritePin>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
	//			DEV_Module_Init();
	//			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
}
 8010818:	46c0      	nop			; (mov r8, r8)
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	50000400 	.word	0x50000400

08010824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010828:	b672      	cpsid	i
}
 801082a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801082c:	e7fe      	b.n	801082c <Error_Handler+0x8>
	...

08010830 <rtcInit>:
#include "main.h"
#include "rtc.h"
#include <stdint.h>

void rtcInit(void) {
 8010830:	b580      	push	{r7, lr}
 8010832:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 8010834:	4b07      	ldr	r3, [pc, #28]	; (8010854 <rtcInit+0x24>)
 8010836:	0018      	movs	r0, r3
 8010838:	f7f6 f8c8 	bl	80069cc <HAL_RTC_Init>
	mode = MODE_NORMAL
 801083c:	4b06      	ldr	r3, [pc, #24]	; (8010858 <rtcInit+0x28>)
 801083e:	2200      	movs	r2, #0
 8010840:	701a      	strb	r2, [r3, #0]
	;

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_ULTRA_LONG,
 8010842:	4b04      	ldr	r3, [pc, #16]	; (8010854 <rtcInit+0x24>)
 8010844:	2204      	movs	r2, #4
 8010846:	213c      	movs	r1, #60	; 0x3c
 8010848:	0018      	movs	r0, r3
 801084a:	f7f6 fc2d 	bl	80070a8 <HAL_RTCEx_SetWakeUpTimer_IT>
		RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

}
 801084e:	46c0      	nop			; (mov r8, r8)
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20000770 	.word	0x20000770
 8010858:	200004c3 	.word	0x200004c3

0801085c <rtcGetTime>:


void rtcGetTime() {
 801085c:	b5b0      	push	{r4, r5, r7, lr}
 801085e:	b08e      	sub	sp, #56	; 0x38
 8010860:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8010862:	49f7      	ldr	r1, [pc, #988]	; (8010c40 <rtcGetTime+0x3e4>)
 8010864:	4bf7      	ldr	r3, [pc, #988]	; (8010c44 <rtcGetTime+0x3e8>)
 8010866:	2200      	movs	r2, #0
 8010868:	0018      	movs	r0, r3
 801086a:	f7f6 f9ed 	bl	8006c48 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 801086e:	49f6      	ldr	r1, [pc, #984]	; (8010c48 <rtcGetTime+0x3ec>)
 8010870:	4bf4      	ldr	r3, [pc, #976]	; (8010c44 <rtcGetTime+0x3e8>)
 8010872:	2200      	movs	r2, #0
 8010874:	0018      	movs	r0, r3
 8010876:	f7f6 fad5 	bl	8006e24 <HAL_RTC_GetDate>

	actual.hour = Time.Hours;
 801087a:	4bf1      	ldr	r3, [pc, #964]	; (8010c40 <rtcGetTime+0x3e4>)
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	b25a      	sxtb	r2, r3
 8010880:	4bf2      	ldr	r3, [pc, #968]	; (8010c4c <rtcGetTime+0x3f0>)
 8010882:	70da      	strb	r2, [r3, #3]



	actual.minute = Time.Minutes;
 8010884:	4bee      	ldr	r3, [pc, #952]	; (8010c40 <rtcGetTime+0x3e4>)
 8010886:	785b      	ldrb	r3, [r3, #1]
 8010888:	b25a      	sxtb	r2, r3
 801088a:	4bf0      	ldr	r3, [pc, #960]	; (8010c4c <rtcGetTime+0x3f0>)
 801088c:	711a      	strb	r2, [r3, #4]
	actual.second = Time.Seconds;
 801088e:	4bec      	ldr	r3, [pc, #944]	; (8010c40 <rtcGetTime+0x3e4>)
 8010890:	789b      	ldrb	r3, [r3, #2]
 8010892:	b25a      	sxtb	r2, r3
 8010894:	4bed      	ldr	r3, [pc, #948]	; (8010c4c <rtcGetTime+0x3f0>)
 8010896:	715a      	strb	r2, [r3, #5]

	actual.decimal = (((255 - Time.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 8010898:	4be9      	ldr	r3, [pc, #932]	; (8010c40 <rtcGetTime+0x3e4>)
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	0013      	movs	r3, r2
 801089e:	065b      	lsls	r3, r3, #25
 80108a0:	1a9b      	subs	r3, r3, r2
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	189b      	adds	r3, r3, r2
 80108a6:	00db      	lsls	r3, r3, #3
 80108a8:	1a9b      	subs	r3, r3, r2
 80108aa:	009b      	lsls	r3, r3, #2
 80108ac:	4ae8      	ldr	r2, [pc, #928]	; (8010c50 <rtcGetTime+0x3f4>)
 80108ae:	4694      	mov	ip, r2
 80108b0:	4463      	add	r3, ip
 80108b2:	49e8      	ldr	r1, [pc, #928]	; (8010c54 <rtcGetTime+0x3f8>)
 80108b4:	0018      	movs	r0, r3
 80108b6:	f7ef fc31 	bl	800011c <__udivsi3>
 80108ba:	0003      	movs	r3, r0
 80108bc:	b25a      	sxtb	r2, r3
 80108be:	4be3      	ldr	r3, [pc, #908]	; (8010c4c <rtcGetTime+0x3f0>)
 80108c0:	719a      	strb	r2, [r3, #6]

	actual.day = Date.Date;
 80108c2:	4be1      	ldr	r3, [pc, #900]	; (8010c48 <rtcGetTime+0x3ec>)
 80108c4:	789b      	ldrb	r3, [r3, #2]
 80108c6:	b25a      	sxtb	r2, r3
 80108c8:	4be0      	ldr	r3, [pc, #896]	; (8010c4c <rtcGetTime+0x3f0>)
 80108ca:	709a      	strb	r2, [r3, #2]
	actual.month = Date.Month;
 80108cc:	4bde      	ldr	r3, [pc, #888]	; (8010c48 <rtcGetTime+0x3ec>)
 80108ce:	785b      	ldrb	r3, [r3, #1]
 80108d0:	b25a      	sxtb	r2, r3
 80108d2:	4bde      	ldr	r3, [pc, #888]	; (8010c4c <rtcGetTime+0x3f0>)
 80108d4:	705a      	strb	r2, [r3, #1]
	actual.year = Date.Year;
 80108d6:	4bdc      	ldr	r3, [pc, #880]	; (8010c48 <rtcGetTime+0x3ec>)
 80108d8:	78db      	ldrb	r3, [r3, #3]
 80108da:	b25a      	sxtb	r2, r3
 80108dc:	4bdb      	ldr	r3, [pc, #876]	; (8010c4c <rtcGetTime+0x3f0>)
 80108de:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (actual.month + 9) / 12;
 80108e0:	4bda      	ldr	r3, [pc, #872]	; (8010c4c <rtcGetTime+0x3f0>)
 80108e2:	785b      	ldrb	r3, [r3, #1]
 80108e4:	b25b      	sxtb	r3, r3
 80108e6:	3309      	adds	r3, #9
 80108e8:	210c      	movs	r1, #12
 80108ea:	0018      	movs	r0, r3
 80108ec:	f7ef fca0 	bl	8000230 <__divsi3>
 80108f0:	0003      	movs	r3, r0
 80108f2:	0018      	movs	r0, r3
 80108f4:	f7f0 fd08 	bl	8001308 <__aeabi_i2f>
 80108f8:	1c03      	adds	r3, r0, #0
 80108fa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t A = 4716 + (actual.year+2000) + (uint32_t) X;
 80108fc:	4bd3      	ldr	r3, [pc, #844]	; (8010c4c <rtcGetTime+0x3f0>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	b25b      	sxtb	r3, r3
 8010902:	001c      	movs	r4, r3
 8010904:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010906:	f7ef fe43 	bl	8000590 <__aeabi_f2uiz>
 801090a:	0003      	movs	r3, r0
 801090c:	18e3      	adds	r3, r4, r3
 801090e:	4ad2      	ldr	r2, [pc, #840]	; (8010c58 <rtcGetTime+0x3fc>)
 8010910:	4694      	mov	ip, r2
 8010912:	4463      	add	r3, ip
 8010914:	633b      	str	r3, [r7, #48]	; 0x30
	float Y = 275 * actual.month / 9;
 8010916:	4bcd      	ldr	r3, [pc, #820]	; (8010c4c <rtcGetTime+0x3f0>)
 8010918:	785b      	ldrb	r3, [r3, #1]
 801091a:	b25b      	sxtb	r3, r3
 801091c:	001a      	movs	r2, r3
 801091e:	0013      	movs	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	1a9b      	subs	r3, r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	1a9b      	subs	r3, r3, r2
 8010928:	009a      	lsls	r2, r3, #2
 801092a:	189b      	adds	r3, r3, r2
 801092c:	2109      	movs	r1, #9
 801092e:	0018      	movs	r0, r3
 8010930:	f7ef fc7e 	bl	8000230 <__divsi3>
 8010934:	0003      	movs	r3, r0
 8010936:	0018      	movs	r0, r3
 8010938:	f7f0 fce6 	bl	8001308 <__aeabi_i2f>
 801093c:	1c03      	adds	r3, r0, #0
 801093e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float V = 7 * A / 4;
 8010940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010942:	0013      	movs	r3, r2
 8010944:	00db      	lsls	r3, r3, #3
 8010946:	1a9b      	subs	r3, r3, r2
 8010948:	089b      	lsrs	r3, r3, #2
 801094a:	0018      	movs	r0, r3
 801094c:	f7f0 fd22 	bl	8001394 <__aeabi_ui2f>
 8010950:	1c03      	adds	r3, r0, #0
 8010952:	62bb      	str	r3, [r7, #40]	; 0x28
	float B = 1729279.5 + 367 * (actual.year+2000) + (uint32_t) Y - (uint32_t) V + actual.day;
 8010954:	4bbd      	ldr	r3, [pc, #756]	; (8010c4c <rtcGetTime+0x3f0>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	b25b      	sxtb	r3, r3
 801095a:	22fa      	movs	r2, #250	; 0xfa
 801095c:	00d2      	lsls	r2, r2, #3
 801095e:	189a      	adds	r2, r3, r2
 8010960:	0013      	movs	r3, r2
 8010962:	005b      	lsls	r3, r3, #1
 8010964:	189b      	adds	r3, r3, r2
 8010966:	00db      	lsls	r3, r3, #3
 8010968:	1a9b      	subs	r3, r3, r2
 801096a:	011b      	lsls	r3, r3, #4
 801096c:	1a9b      	subs	r3, r3, r2
 801096e:	0018      	movs	r0, r3
 8010970:	f7f2 fb0e 	bl	8002f90 <__aeabi_i2d>
 8010974:	2280      	movs	r2, #128	; 0x80
 8010976:	0612      	lsls	r2, r2, #24
 8010978:	4bb8      	ldr	r3, [pc, #736]	; (8010c5c <rtcGetTime+0x400>)
 801097a:	f7f0 fd47 	bl	800140c <__aeabi_dadd>
 801097e:	0002      	movs	r2, r0
 8010980:	000b      	movs	r3, r1
 8010982:	0014      	movs	r4, r2
 8010984:	001d      	movs	r5, r3
 8010986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010988:	f7ef fe02 	bl	8000590 <__aeabi_f2uiz>
 801098c:	0003      	movs	r3, r0
 801098e:	0018      	movs	r0, r3
 8010990:	f7f2 fb2e 	bl	8002ff0 <__aeabi_ui2d>
 8010994:	0002      	movs	r2, r0
 8010996:	000b      	movs	r3, r1
 8010998:	0020      	movs	r0, r4
 801099a:	0029      	movs	r1, r5
 801099c:	f7f0 fd36 	bl	800140c <__aeabi_dadd>
 80109a0:	0002      	movs	r2, r0
 80109a2:	000b      	movs	r3, r1
 80109a4:	0014      	movs	r4, r2
 80109a6:	001d      	movs	r5, r3
 80109a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109aa:	f7ef fdf1 	bl	8000590 <__aeabi_f2uiz>
 80109ae:	0003      	movs	r3, r0
 80109b0:	0018      	movs	r0, r3
 80109b2:	f7f2 fb1d 	bl	8002ff0 <__aeabi_ui2d>
 80109b6:	0002      	movs	r2, r0
 80109b8:	000b      	movs	r3, r1
 80109ba:	0020      	movs	r0, r4
 80109bc:	0029      	movs	r1, r5
 80109be:	f7f1 ff01 	bl	80027c4 <__aeabi_dsub>
 80109c2:	0002      	movs	r2, r0
 80109c4:	000b      	movs	r3, r1
 80109c6:	0014      	movs	r4, r2
 80109c8:	001d      	movs	r5, r3
 80109ca:	4ba0      	ldr	r3, [pc, #640]	; (8010c4c <rtcGetTime+0x3f0>)
 80109cc:	789b      	ldrb	r3, [r3, #2]
 80109ce:	b25b      	sxtb	r3, r3
 80109d0:	0018      	movs	r0, r3
 80109d2:	f7f2 fadd 	bl	8002f90 <__aeabi_i2d>
 80109d6:	0002      	movs	r2, r0
 80109d8:	000b      	movs	r3, r1
 80109da:	0020      	movs	r0, r4
 80109dc:	0029      	movs	r1, r5
 80109de:	f7f0 fd15 	bl	800140c <__aeabi_dadd>
 80109e2:	0002      	movs	r2, r0
 80109e4:	000b      	movs	r3, r1
 80109e6:	0010      	movs	r0, r2
 80109e8:	0019      	movs	r1, r3
 80109ea:	f7f2 fb6f 	bl	80030cc <__aeabi_d2f>
 80109ee:	1c03      	adds	r3, r0, #0
 80109f0:	627b      	str	r3, [r7, #36]	; 0x24
	float Q = (A + 83) / 100;
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	3353      	adds	r3, #83	; 0x53
 80109f6:	2164      	movs	r1, #100	; 0x64
 80109f8:	0018      	movs	r0, r3
 80109fa:	f7ef fb8f 	bl	800011c <__udivsi3>
 80109fe:	0003      	movs	r3, r0
 8010a00:	0018      	movs	r0, r3
 8010a02:	f7f0 fcc7 	bl	8001394 <__aeabi_ui2f>
 8010a06:	1c03      	adds	r3, r0, #0
 8010a08:	623b      	str	r3, [r7, #32]
	uint32_t C = (uint32_t) Q;
 8010a0a:	6a38      	ldr	r0, [r7, #32]
 8010a0c:	f7ef fdc0 	bl	8000590 <__aeabi_f2uiz>
 8010a10:	0003      	movs	r3, r0
 8010a12:	61fb      	str	r3, [r7, #28]
	float W = 3 * (C + 1) / 4;
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	1c5a      	adds	r2, r3, #1
 8010a18:	0013      	movs	r3, r2
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	189b      	adds	r3, r3, r2
 8010a1e:	089b      	lsrs	r3, r3, #2
 8010a20:	0018      	movs	r0, r3
 8010a22:	f7f0 fcb7 	bl	8001394 <__aeabi_ui2f>
 8010a26:	1c03      	adds	r3, r0, #0
 8010a28:	61bb      	str	r3, [r7, #24]
	uint32_t E = (uint32_t) W;
 8010a2a:	69b8      	ldr	r0, [r7, #24]
 8010a2c:	f7ef fdb0 	bl	8000590 <__aeabi_f2uiz>
 8010a30:	0003      	movs	r3, r0
 8010a32:	617b      	str	r3, [r7, #20]
	float JD = B + 38 - E; //julian day
 8010a34:	498a      	ldr	r1, [pc, #552]	; (8010c60 <rtcGetTime+0x404>)
 8010a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a38:	f7ef fdfe 	bl	8000638 <__aeabi_fadd>
 8010a3c:	1c03      	adds	r3, r0, #0
 8010a3e:	1c1c      	adds	r4, r3, #0
 8010a40:	6978      	ldr	r0, [r7, #20]
 8010a42:	f7f0 fca7 	bl	8001394 <__aeabi_ui2f>
 8010a46:	1c03      	adds	r3, r0, #0
 8010a48:	1c19      	adds	r1, r3, #0
 8010a4a:	1c20      	adds	r0, r4, #0
 8010a4c:	f7f0 fa74 	bl	8000f38 <__aeabi_fsub>
 8010a50:	1c03      	adds	r3, r0, #0
 8010a52:	613b      	str	r3, [r7, #16]
	float MS = 29.5305902778; //average value of synodic month
 8010a54:	4b83      	ldr	r3, [pc, #524]	; (8010c64 <rtcGetTime+0x408>)
 8010a56:	60fb      	str	r3, [r7, #12]
	float phasePrimary = ((JD / MS) - 0.3033);
 8010a58:	68f9      	ldr	r1, [r7, #12]
 8010a5a:	6938      	ldr	r0, [r7, #16]
 8010a5c:	f7ef ff88 	bl	8000970 <__aeabi_fdiv>
 8010a60:	1c03      	adds	r3, r0, #0
 8010a62:	1c18      	adds	r0, r3, #0
 8010a64:	f7f2 faea 	bl	800303c <__aeabi_f2d>
 8010a68:	4a7f      	ldr	r2, [pc, #508]	; (8010c68 <rtcGetTime+0x40c>)
 8010a6a:	4b80      	ldr	r3, [pc, #512]	; (8010c6c <rtcGetTime+0x410>)
 8010a6c:	f7f1 feaa 	bl	80027c4 <__aeabi_dsub>
 8010a70:	0002      	movs	r2, r0
 8010a72:	000b      	movs	r3, r1
 8010a74:	0010      	movs	r0, r2
 8010a76:	0019      	movs	r1, r3
 8010a78:	f7f2 fb28 	bl	80030cc <__aeabi_d2f>
 8010a7c:	1c03      	adds	r3, r0, #0
 8010a7e:	60bb      	str	r3, [r7, #8]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 8010a80:	68b8      	ldr	r0, [r7, #8]
 8010a82:	f7ef fd85 	bl	8000590 <__aeabi_f2uiz>
 8010a86:	0003      	movs	r3, r0
 8010a88:	607b      	str	r3, [r7, #4]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7f0 fc82 	bl	8001394 <__aeabi_ui2f>
 8010a90:	1c03      	adds	r3, r0, #0
 8010a92:	1c19      	adds	r1, r3, #0
 8010a94:	68b8      	ldr	r0, [r7, #8]
 8010a96:	f7f0 fa4f 	bl	8000f38 <__aeabi_fsub>
 8010a9a:	1c03      	adds	r3, r0, #0
 8010a9c:	4974      	ldr	r1, [pc, #464]	; (8010c70 <rtcGetTime+0x414>)
 8010a9e:	1c18      	adds	r0, r3, #0
 8010aa0:	f7f0 f930 	bl	8000d04 <__aeabi_fmul>
 8010aa4:	1c03      	adds	r3, r0, #0
 8010aa6:	603b      	str	r3, [r7, #0]
	moonPhase = (uint32_t) phaseFinal;
 8010aa8:	6838      	ldr	r0, [r7, #0]
 8010aaa:	f7ef fd71 	bl	8000590 <__aeabi_f2uiz>
 8010aae:	0002      	movs	r2, r0
 8010ab0:	4b70      	ldr	r3, [pc, #448]	; (8010c74 <rtcGetTime+0x418>)
 8010ab2:	601a      	str	r2, [r3, #0]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (mode == MODE_NORMAL) {
 8010ab4:	4b70      	ldr	r3, [pc, #448]	; (8010c78 <rtcGetTime+0x41c>)
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d114      	bne.n	8010ae8 <rtcGetTime+0x28c>
		chrono.minute = 0;
 8010abe:	4b6f      	ldr	r3, [pc, #444]	; (8010c7c <rtcGetTime+0x420>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	711a      	strb	r2, [r3, #4]
		chrono.second = 0;
 8010ac4:	4b6d      	ldr	r3, [pc, #436]	; (8010c7c <rtcGetTime+0x420>)
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	715a      	strb	r2, [r3, #5]
		chrono.decimal = 0;
 8010aca:	4b6c      	ldr	r3, [pc, #432]	; (8010c7c <rtcGetTime+0x420>)
 8010acc:	2200      	movs	r2, #0
 8010ace:	719a      	strb	r2, [r3, #6]
		chrono.hour = 0;
 8010ad0:	4b6a      	ldr	r3, [pc, #424]	; (8010c7c <rtcGetTime+0x420>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	70da      	strb	r2, [r3, #3]
		chrono.day = 0;
 8010ad6:	4b69      	ldr	r3, [pc, #420]	; (8010c7c <rtcGetTime+0x420>)
 8010ad8:	2200      	movs	r2, #0
 8010ada:	709a      	strb	r2, [r3, #2]
		chrono.month = 0;
 8010adc:	4b67      	ldr	r3, [pc, #412]	; (8010c7c <rtcGetTime+0x420>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	705a      	strb	r2, [r3, #1]
		chrono.year = 0;
 8010ae2:	4b66      	ldr	r3, [pc, #408]	; (8010c7c <rtcGetTime+0x420>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	701a      	strb	r2, [r3, #0]
	}
	if (mode == MODE_CHRONO) {
 8010ae8:	4b63      	ldr	r3, [pc, #396]	; (8010c78 <rtcGetTime+0x41c>)
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d000      	beq.n	8010af4 <rtcGetTime+0x298>
 8010af2:	e0f8      	b.n	8010ce6 <rtcGetTime+0x48a>

		chrono.decimal = 0;
 8010af4:	4b61      	ldr	r3, [pc, #388]	; (8010c7c <rtcGetTime+0x420>)
 8010af6:	2200      	movs	r2, #0
 8010af8:	719a      	strb	r2, [r3, #6]
		chrono.second = actual.second - chronoStart.second;
 8010afa:	4b54      	ldr	r3, [pc, #336]	; (8010c4c <rtcGetTime+0x3f0>)
 8010afc:	795b      	ldrb	r3, [r3, #5]
 8010afe:	b25b      	sxtb	r3, r3
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b5f      	ldr	r3, [pc, #380]	; (8010c80 <rtcGetTime+0x424>)
 8010b04:	795b      	ldrb	r3, [r3, #5]
 8010b06:	b25b      	sxtb	r3, r3
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	b25a      	sxtb	r2, r3
 8010b10:	4b5a      	ldr	r3, [pc, #360]	; (8010c7c <rtcGetTime+0x420>)
 8010b12:	715a      	strb	r2, [r3, #5]
		chrono.minute = actual.minute - chronoStart.minute;
 8010b14:	4b4d      	ldr	r3, [pc, #308]	; (8010c4c <rtcGetTime+0x3f0>)
 8010b16:	791b      	ldrb	r3, [r3, #4]
 8010b18:	b25b      	sxtb	r3, r3
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b58      	ldr	r3, [pc, #352]	; (8010c80 <rtcGetTime+0x424>)
 8010b1e:	791b      	ldrb	r3, [r3, #4]
 8010b20:	b25b      	sxtb	r3, r3
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	b25a      	sxtb	r2, r3
 8010b2a:	4b54      	ldr	r3, [pc, #336]	; (8010c7c <rtcGetTime+0x420>)
 8010b2c:	711a      	strb	r2, [r3, #4]
		chrono.hour = actual.hour - chronoStart.hour;
 8010b2e:	4b47      	ldr	r3, [pc, #284]	; (8010c4c <rtcGetTime+0x3f0>)
 8010b30:	78db      	ldrb	r3, [r3, #3]
 8010b32:	b25b      	sxtb	r3, r3
 8010b34:	b2da      	uxtb	r2, r3
 8010b36:	4b52      	ldr	r3, [pc, #328]	; (8010c80 <rtcGetTime+0x424>)
 8010b38:	78db      	ldrb	r3, [r3, #3]
 8010b3a:	b25b      	sxtb	r3, r3
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	b25a      	sxtb	r2, r3
 8010b44:	4b4d      	ldr	r3, [pc, #308]	; (8010c7c <rtcGetTime+0x420>)
 8010b46:	70da      	strb	r2, [r3, #3]
		chrono.day = actual.day - chronoStart.day;
 8010b48:	4b40      	ldr	r3, [pc, #256]	; (8010c4c <rtcGetTime+0x3f0>)
 8010b4a:	789b      	ldrb	r3, [r3, #2]
 8010b4c:	b25b      	sxtb	r3, r3
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	4b4b      	ldr	r3, [pc, #300]	; (8010c80 <rtcGetTime+0x424>)
 8010b52:	789b      	ldrb	r3, [r3, #2]
 8010b54:	b25b      	sxtb	r3, r3
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	b25a      	sxtb	r2, r3
 8010b5e:	4b47      	ldr	r3, [pc, #284]	; (8010c7c <rtcGetTime+0x420>)
 8010b60:	709a      	strb	r2, [r3, #2]
		chrono.month = actual.month - chronoStart.month;
 8010b62:	4b3a      	ldr	r3, [pc, #232]	; (8010c4c <rtcGetTime+0x3f0>)
 8010b64:	785b      	ldrb	r3, [r3, #1]
 8010b66:	b25b      	sxtb	r3, r3
 8010b68:	b2da      	uxtb	r2, r3
 8010b6a:	4b45      	ldr	r3, [pc, #276]	; (8010c80 <rtcGetTime+0x424>)
 8010b6c:	785b      	ldrb	r3, [r3, #1]
 8010b6e:	b25b      	sxtb	r3, r3
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	b25a      	sxtb	r2, r3
 8010b78:	4b40      	ldr	r3, [pc, #256]	; (8010c7c <rtcGetTime+0x420>)
 8010b7a:	705a      	strb	r2, [r3, #1]

		if (chrono.decimal < 0) {
 8010b7c:	4b3f      	ldr	r3, [pc, #252]	; (8010c7c <rtcGetTime+0x420>)
 8010b7e:	799b      	ldrb	r3, [r3, #6]
 8010b80:	b25b      	sxtb	r3, r3
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	da11      	bge.n	8010baa <rtcGetTime+0x34e>
			chrono.second--;
 8010b86:	4b3d      	ldr	r3, [pc, #244]	; (8010c7c <rtcGetTime+0x420>)
 8010b88:	795b      	ldrb	r3, [r3, #5]
 8010b8a:	b25b      	sxtb	r3, r3
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	b25a      	sxtb	r2, r3
 8010b94:	4b39      	ldr	r3, [pc, #228]	; (8010c7c <rtcGetTime+0x420>)
 8010b96:	715a      	strb	r2, [r3, #5]
			chrono.decimal = chrono.decimal + 10;
 8010b98:	4b38      	ldr	r3, [pc, #224]	; (8010c7c <rtcGetTime+0x420>)
 8010b9a:	799b      	ldrb	r3, [r3, #6]
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	330a      	adds	r3, #10
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	b25a      	sxtb	r2, r3
 8010ba6:	4b35      	ldr	r3, [pc, #212]	; (8010c7c <rtcGetTime+0x420>)
 8010ba8:	719a      	strb	r2, [r3, #6]
		}

		if (chrono.second < 0) {
 8010baa:	4b34      	ldr	r3, [pc, #208]	; (8010c7c <rtcGetTime+0x420>)
 8010bac:	795b      	ldrb	r3, [r3, #5]
 8010bae:	b25b      	sxtb	r3, r3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da11      	bge.n	8010bd8 <rtcGetTime+0x37c>
			chrono.minute--;
 8010bb4:	4b31      	ldr	r3, [pc, #196]	; (8010c7c <rtcGetTime+0x420>)
 8010bb6:	791b      	ldrb	r3, [r3, #4]
 8010bb8:	b25b      	sxtb	r3, r3
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	b25a      	sxtb	r2, r3
 8010bc2:	4b2e      	ldr	r3, [pc, #184]	; (8010c7c <rtcGetTime+0x420>)
 8010bc4:	711a      	strb	r2, [r3, #4]
			chrono.second = chrono.second + 60;
 8010bc6:	4b2d      	ldr	r3, [pc, #180]	; (8010c7c <rtcGetTime+0x420>)
 8010bc8:	795b      	ldrb	r3, [r3, #5]
 8010bca:	b25b      	sxtb	r3, r3
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	333c      	adds	r3, #60	; 0x3c
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	b25a      	sxtb	r2, r3
 8010bd4:	4b29      	ldr	r3, [pc, #164]	; (8010c7c <rtcGetTime+0x420>)
 8010bd6:	715a      	strb	r2, [r3, #5]
		}

		if (chrono.minute < 0) {
 8010bd8:	4b28      	ldr	r3, [pc, #160]	; (8010c7c <rtcGetTime+0x420>)
 8010bda:	791b      	ldrb	r3, [r3, #4]
 8010bdc:	b25b      	sxtb	r3, r3
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da11      	bge.n	8010c06 <rtcGetTime+0x3aa>
			chrono.hour--;
 8010be2:	4b26      	ldr	r3, [pc, #152]	; (8010c7c <rtcGetTime+0x420>)
 8010be4:	78db      	ldrb	r3, [r3, #3]
 8010be6:	b25b      	sxtb	r3, r3
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	3b01      	subs	r3, #1
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	b25a      	sxtb	r2, r3
 8010bf0:	4b22      	ldr	r3, [pc, #136]	; (8010c7c <rtcGetTime+0x420>)
 8010bf2:	70da      	strb	r2, [r3, #3]
			chrono.minute = chrono.minute + 60;
 8010bf4:	4b21      	ldr	r3, [pc, #132]	; (8010c7c <rtcGetTime+0x420>)
 8010bf6:	791b      	ldrb	r3, [r3, #4]
 8010bf8:	b25b      	sxtb	r3, r3
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	333c      	adds	r3, #60	; 0x3c
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	b25a      	sxtb	r2, r3
 8010c02:	4b1e      	ldr	r3, [pc, #120]	; (8010c7c <rtcGetTime+0x420>)
 8010c04:	711a      	strb	r2, [r3, #4]
		}

		if (chrono.hour < 0) {
 8010c06:	4b1d      	ldr	r3, [pc, #116]	; (8010c7c <rtcGetTime+0x420>)
 8010c08:	78db      	ldrb	r3, [r3, #3]
 8010c0a:	b25b      	sxtb	r3, r3
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	da11      	bge.n	8010c34 <rtcGetTime+0x3d8>
			chrono.day--;
 8010c10:	4b1a      	ldr	r3, [pc, #104]	; (8010c7c <rtcGetTime+0x420>)
 8010c12:	789b      	ldrb	r3, [r3, #2]
 8010c14:	b25b      	sxtb	r3, r3
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	b25a      	sxtb	r2, r3
 8010c1e:	4b17      	ldr	r3, [pc, #92]	; (8010c7c <rtcGetTime+0x420>)
 8010c20:	709a      	strb	r2, [r3, #2]
			chrono.hour = chrono.hour + 24;
 8010c22:	4b16      	ldr	r3, [pc, #88]	; (8010c7c <rtcGetTime+0x420>)
 8010c24:	78db      	ldrb	r3, [r3, #3]
 8010c26:	b25b      	sxtb	r3, r3
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	3318      	adds	r3, #24
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	b25a      	sxtb	r2, r3
 8010c30:	4b12      	ldr	r3, [pc, #72]	; (8010c7c <rtcGetTime+0x420>)
 8010c32:	70da      	strb	r2, [r3, #3]
		}

		if (chrono.day < 0) {
 8010c34:	4b11      	ldr	r3, [pc, #68]	; (8010c7c <rtcGetTime+0x420>)
 8010c36:	789b      	ldrb	r3, [r3, #2]
 8010c38:	b25b      	sxtb	r3, r3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	da34      	bge.n	8010ca8 <rtcGetTime+0x44c>
 8010c3e:	e021      	b.n	8010c84 <rtcGetTime+0x428>
 8010c40:	200006c4 	.word	0x200006c4
 8010c44:	20000770 	.word	0x20000770
 8010c48:	2000044c 	.word	0x2000044c
 8010c4c:	200006ac 	.word	0x200006ac
 8010c50:	0000639c 	.word	0x0000639c
 8010c54:	000009f6 	.word	0x000009f6
 8010c58:	00001a3c 	.word	0x00001a3c
 8010c5c:	413a62ff 	.word	0x413a62ff
 8010c60:	42180000 	.word	0x42180000
 8010c64:	41ec3ea6 	.word	0x41ec3ea6
 8010c68:	67381d7e 	.word	0x67381d7e
 8010c6c:	3fd36944 	.word	0x3fd36944
 8010c70:	42c80000 	.word	0x42c80000
 8010c74:	200003b4 	.word	0x200003b4
 8010c78:	200004c3 	.word	0x200004c3
 8010c7c:	20000444 	.word	0x20000444
 8010c80:	200004b8 	.word	0x200004b8
			chrono.month--;
 8010c84:	4b1a      	ldr	r3, [pc, #104]	; (8010cf0 <rtcGetTime+0x494>)
 8010c86:	785b      	ldrb	r3, [r3, #1]
 8010c88:	b25b      	sxtb	r3, r3
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	b25a      	sxtb	r2, r3
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <rtcGetTime+0x494>)
 8010c94:	705a      	strb	r2, [r3, #1]
			chrono.day = chrono.day + 30;
 8010c96:	4b16      	ldr	r3, [pc, #88]	; (8010cf0 <rtcGetTime+0x494>)
 8010c98:	789b      	ldrb	r3, [r3, #2]
 8010c9a:	b25b      	sxtb	r3, r3
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	331e      	adds	r3, #30
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	b25a      	sxtb	r2, r3
 8010ca4:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <rtcGetTime+0x494>)
 8010ca6:	709a      	strb	r2, [r3, #2]
		}

		if (chrono.month < 0) {
 8010ca8:	4b11      	ldr	r3, [pc, #68]	; (8010cf0 <rtcGetTime+0x494>)
 8010caa:	785b      	ldrb	r3, [r3, #1]
 8010cac:	b25b      	sxtb	r3, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	da11      	bge.n	8010cd6 <rtcGetTime+0x47a>
			chrono.year--;
 8010cb2:	4b0f      	ldr	r3, [pc, #60]	; (8010cf0 <rtcGetTime+0x494>)
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	b25b      	sxtb	r3, r3
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	b25a      	sxtb	r2, r3
 8010cc0:	4b0b      	ldr	r3, [pc, #44]	; (8010cf0 <rtcGetTime+0x494>)
 8010cc2:	701a      	strb	r2, [r3, #0]
			chrono.month = chrono.month + 12;
 8010cc4:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <rtcGetTime+0x494>)
 8010cc6:	785b      	ldrb	r3, [r3, #1]
 8010cc8:	b25b      	sxtb	r3, r3
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	330c      	adds	r3, #12
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	b25a      	sxtb	r2, r3
 8010cd2:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <rtcGetTime+0x494>)
 8010cd4:	705a      	strb	r2, [r3, #1]
		}

		//max chrono count
		if(chrono.hour >= 5){
 8010cd6:	4b06      	ldr	r3, [pc, #24]	; (8010cf0 <rtcGetTime+0x494>)
 8010cd8:	78db      	ldrb	r3, [r3, #3]
 8010cda:	b25b      	sxtb	r3, r3
 8010cdc:	2b04      	cmp	r3, #4
 8010cde:	dd02      	ble.n	8010ce6 <rtcGetTime+0x48a>
			mode = MODE_STOP;
 8010ce0:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <rtcGetTime+0x498>)
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8010ce6:	46c0      	nop			; (mov r8, r8)
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	b00e      	add	sp, #56	; 0x38
 8010cec:	bdb0      	pop	{r4, r5, r7, pc}
 8010cee:	46c0      	nop			; (mov r8, r8)
 8010cf0:	20000444 	.word	0x20000444
 8010cf4:	200004c3 	.word	0x200004c3

08010cf8 <rtcSetTime>:

void rtcSetTime() {
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0

	Time.Hours = actual.hour;
 8010cfc:	4b19      	ldr	r3, [pc, #100]	; (8010d64 <rtcSetTime+0x6c>)
 8010cfe:	78db      	ldrb	r3, [r3, #3]
 8010d00:	b25b      	sxtb	r3, r3
 8010d02:	b2da      	uxtb	r2, r3
 8010d04:	4b18      	ldr	r3, [pc, #96]	; (8010d68 <rtcSetTime+0x70>)
 8010d06:	701a      	strb	r2, [r3, #0]
	Time.Minutes = actual.minute;
 8010d08:	4b16      	ldr	r3, [pc, #88]	; (8010d64 <rtcSetTime+0x6c>)
 8010d0a:	791b      	ldrb	r3, [r3, #4]
 8010d0c:	b25b      	sxtb	r3, r3
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	4b15      	ldr	r3, [pc, #84]	; (8010d68 <rtcSetTime+0x70>)
 8010d12:	705a      	strb	r2, [r3, #1]
	Time.Seconds = actual.second;
 8010d14:	4b13      	ldr	r3, [pc, #76]	; (8010d64 <rtcSetTime+0x6c>)
 8010d16:	795b      	ldrb	r3, [r3, #5]
 8010d18:	b25b      	sxtb	r3, r3
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	4b12      	ldr	r3, [pc, #72]	; (8010d68 <rtcSetTime+0x70>)
 8010d1e:	709a      	strb	r2, [r3, #2]
	Date.Date = actual.day;
 8010d20:	4b10      	ldr	r3, [pc, #64]	; (8010d64 <rtcSetTime+0x6c>)
 8010d22:	789b      	ldrb	r3, [r3, #2]
 8010d24:	b25b      	sxtb	r3, r3
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	4b10      	ldr	r3, [pc, #64]	; (8010d6c <rtcSetTime+0x74>)
 8010d2a:	709a      	strb	r2, [r3, #2]
	Date.Month = actual.month;
 8010d2c:	4b0d      	ldr	r3, [pc, #52]	; (8010d64 <rtcSetTime+0x6c>)
 8010d2e:	785b      	ldrb	r3, [r3, #1]
 8010d30:	b25b      	sxtb	r3, r3
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	4b0d      	ldr	r3, [pc, #52]	; (8010d6c <rtcSetTime+0x74>)
 8010d36:	705a      	strb	r2, [r3, #1]
	Date.Year = actual.year;
 8010d38:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <rtcSetTime+0x6c>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	b25b      	sxtb	r3, r3
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <rtcSetTime+0x74>)
 8010d42:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8010d44:	4908      	ldr	r1, [pc, #32]	; (8010d68 <rtcSetTime+0x70>)
 8010d46:	4b0a      	ldr	r3, [pc, #40]	; (8010d70 <rtcSetTime+0x78>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	0018      	movs	r0, r3
 8010d4c:	f7f5 fed4 	bl	8006af8 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8010d50:	4906      	ldr	r1, [pc, #24]	; (8010d6c <rtcSetTime+0x74>)
 8010d52:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <rtcSetTime+0x78>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	0018      	movs	r0, r3
 8010d58:	f7f5 ffd2 	bl	8006d00 <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 8010d5c:	46c0      	nop			; (mov r8, r8)
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	46c0      	nop			; (mov r8, r8)
 8010d64:	200006ac 	.word	0x200006ac
 8010d68:	200006c4 	.word	0x200006c4
 8010d6c:	2000044c 	.word	0x2000044c
 8010d70:	20000770 	.word	0x20000770

08010d74 <rtcResetChrono>:

void rtcResetChrono(void) {
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0

	chrono.decimal = 0;
 8010d78:	4b0d      	ldr	r3, [pc, #52]	; (8010db0 <rtcResetChrono+0x3c>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	719a      	strb	r2, [r3, #6]
	chrono.minute = 0;
 8010d7e:	4b0c      	ldr	r3, [pc, #48]	; (8010db0 <rtcResetChrono+0x3c>)
 8010d80:	2200      	movs	r2, #0
 8010d82:	711a      	strb	r2, [r3, #4]
	chrono.second = 0;
 8010d84:	4b0a      	ldr	r3, [pc, #40]	; (8010db0 <rtcResetChrono+0x3c>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	715a      	strb	r2, [r3, #5]
	chrono.hour = 0;
 8010d8a:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <rtcResetChrono+0x3c>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	70da      	strb	r2, [r3, #3]

	chronoStart.second = 0;
 8010d90:	4b08      	ldr	r3, [pc, #32]	; (8010db4 <rtcResetChrono+0x40>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	715a      	strb	r2, [r3, #5]
	chronoStart.minute = 0;
 8010d96:	4b07      	ldr	r3, [pc, #28]	; (8010db4 <rtcResetChrono+0x40>)
 8010d98:	2200      	movs	r2, #0
 8010d9a:	711a      	strb	r2, [r3, #4]
	chronoStart.decimal = 0;
 8010d9c:	4b05      	ldr	r3, [pc, #20]	; (8010db4 <rtcResetChrono+0x40>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	719a      	strb	r2, [r3, #6]
	chronoStart.hour = 0;
 8010da2:	4b04      	ldr	r3, [pc, #16]	; (8010db4 <rtcResetChrono+0x40>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	70da      	strb	r2, [r3, #3]

}
 8010da8:	46c0      	nop			; (mov r8, r8)
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	46c0      	nop			; (mov r8, r8)
 8010db0:	20000444 	.word	0x20000444
 8010db4:	200004b8 	.word	0x200004b8

08010db8 <float2Text>:
int32_t offsetMagnetometerX = 0;
int32_t offsetMagnetometerY = 0;

float gainVoltagePassive = 1.06;

void float2Text(char *str, float input) {
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]

	int ones = (uint16_t) input;
 8010dc2:	6838      	ldr	r0, [r7, #0]
 8010dc4:	f7ef fbe4 	bl	8000590 <__aeabi_f2uiz>
 8010dc8:	0003      	movs	r3, r0
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	617b      	str	r3, [r7, #20]
	float hundreadths = input - ones;
 8010dce:	6978      	ldr	r0, [r7, #20]
 8010dd0:	f7f0 fa9a 	bl	8001308 <__aeabi_i2f>
 8010dd4:	1c03      	adds	r3, r0, #0
 8010dd6:	1c19      	adds	r1, r3, #0
 8010dd8:	6838      	ldr	r0, [r7, #0]
 8010dda:	f7f0 f8ad 	bl	8000f38 <__aeabi_fsub>
 8010dde:	1c03      	adds	r3, r0, #0
 8010de0:	613b      	str	r3, [r7, #16]
	int hundreadths2 = hundreadths * 100;
 8010de2:	490a      	ldr	r1, [pc, #40]	; (8010e0c <float2Text+0x54>)
 8010de4:	6938      	ldr	r0, [r7, #16]
 8010de6:	f7ef ff8d 	bl	8000d04 <__aeabi_fmul>
 8010dea:	1c03      	adds	r3, r0, #0
 8010dec:	1c18      	adds	r0, r3, #0
 8010dee:	f7f0 fa6b 	bl	80012c8 <__aeabi_f2iz>
 8010df2:	0003      	movs	r3, r0
 8010df4:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d.%d", ones, hundreadths2);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	4905      	ldr	r1, [pc, #20]	; (8010e10 <float2Text+0x58>)
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f002 faf5 	bl	80133ec <siprintf>

}
 8010e02:	46c0      	nop			; (mov r8, r8)
 8010e04:	46bd      	mov	sp, r7
 8010e06:	b006      	add	sp, #24
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	46c0      	nop			; (mov r8, r8)
 8010e0c:	42c80000 	.word	0x42c80000
 8010e10:	08016298 	.word	0x08016298

08010e14 <sensingInit>:

void sensingInit() {
 8010e14:	b590      	push	{r4, r7, lr}
 8010e16:	b08f      	sub	sp, #60	; 0x3c
 8010e18:	af04      	add	r7, sp, #16

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 8010e1a:	497e      	ldr	r1, [pc, #504]	; (8011014 <sensingInit+0x200>)
 8010e1c:	4b7e      	ldr	r3, [pc, #504]	; (8011018 <sensingInit+0x204>)
 8010e1e:	2203      	movs	r2, #3
 8010e20:	0018      	movs	r0, r3
 8010e22:	f7f2 fed5 	bl	8003bd0 <HAL_ADC_Start_DMA>
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								REDING CALIBRATION DATA

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_T1, 1, dig_T, 6,
 8010e26:	4b7d      	ldr	r3, [pc, #500]	; (801101c <sensingInit+0x208>)
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	487d      	ldr	r0, [pc, #500]	; (8011020 <sensingInit+0x20c>)
 8010e2c:	9302      	str	r3, [sp, #8]
 8010e2e:	2306      	movs	r3, #6
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	2420      	movs	r4, #32
 8010e34:	193b      	adds	r3, r7, r4
 8010e36:	9300      	str	r3, [sp, #0]
 8010e38:	2301      	movs	r3, #1
 8010e3a:	2288      	movs	r2, #136	; 0x88
 8010e3c:	21ee      	movs	r1, #238	; 0xee
 8010e3e:	f7f4 fabf 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 8010e42:	0021      	movs	r1, r4
 8010e44:	187b      	adds	r3, r7, r1
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	b21a      	sxth	r2, r3
 8010e4a:	187b      	adds	r3, r7, r1
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	021b      	lsls	r3, r3, #8
 8010e50:	b21b      	sxth	r3, r3
 8010e52:	4313      	orrs	r3, r2
 8010e54:	b21b      	sxth	r3, r3
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	4b72      	ldr	r3, [pc, #456]	; (8011024 <sensingInit+0x210>)
 8010e5a:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 8010e5c:	187b      	adds	r3, r7, r1
 8010e5e:	789b      	ldrb	r3, [r3, #2]
 8010e60:	b21a      	sxth	r2, r3
 8010e62:	187b      	adds	r3, r7, r1
 8010e64:	78db      	ldrb	r3, [r3, #3]
 8010e66:	021b      	lsls	r3, r3, #8
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	b21a      	sxth	r2, r3
 8010e6e:	4b6e      	ldr	r3, [pc, #440]	; (8011028 <sensingInit+0x214>)
 8010e70:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 8010e72:	187b      	adds	r3, r7, r1
 8010e74:	791b      	ldrb	r3, [r3, #4]
 8010e76:	b21a      	sxth	r2, r3
 8010e78:	187b      	adds	r3, r7, r1
 8010e7a:	791b      	ldrb	r3, [r3, #4]
 8010e7c:	021b      	lsls	r3, r3, #8
 8010e7e:	b21b      	sxth	r3, r3
 8010e80:	4313      	orrs	r3, r2
 8010e82:	b21a      	sxth	r2, r3
 8010e84:	4b69      	ldr	r3, [pc, #420]	; (801102c <sensingInit+0x218>)
 8010e86:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_P1, 1, dig_P, 18,
 8010e88:	4b64      	ldr	r3, [pc, #400]	; (801101c <sensingInit+0x208>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	4864      	ldr	r0, [pc, #400]	; (8011020 <sensingInit+0x20c>)
 8010e8e:	9302      	str	r3, [sp, #8]
 8010e90:	2312      	movs	r3, #18
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	240c      	movs	r4, #12
 8010e96:	193b      	adds	r3, r7, r4
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	228e      	movs	r2, #142	; 0x8e
 8010e9e:	21ee      	movs	r1, #238	; 0xee
 8010ea0:	f7f4 fa8e 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 8010ea4:	0021      	movs	r1, r4
 8010ea6:	187b      	adds	r3, r7, r1
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	b21a      	sxth	r2, r3
 8010eac:	187b      	adds	r3, r7, r1
 8010eae:	785b      	ldrb	r3, [r3, #1]
 8010eb0:	021b      	lsls	r3, r3, #8
 8010eb2:	b21b      	sxth	r3, r3
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	b21b      	sxth	r3, r3
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	4b5d      	ldr	r3, [pc, #372]	; (8011030 <sensingInit+0x21c>)
 8010ebc:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 8010ebe:	187b      	adds	r3, r7, r1
 8010ec0:	789b      	ldrb	r3, [r3, #2]
 8010ec2:	b21a      	sxth	r2, r3
 8010ec4:	187b      	adds	r3, r7, r1
 8010ec6:	78db      	ldrb	r3, [r3, #3]
 8010ec8:	021b      	lsls	r3, r3, #8
 8010eca:	b21b      	sxth	r3, r3
 8010ecc:	4313      	orrs	r3, r2
 8010ece:	b21a      	sxth	r2, r3
 8010ed0:	4b58      	ldr	r3, [pc, #352]	; (8011034 <sensingInit+0x220>)
 8010ed2:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 8010ed4:	187b      	adds	r3, r7, r1
 8010ed6:	791b      	ldrb	r3, [r3, #4]
 8010ed8:	b21a      	sxth	r2, r3
 8010eda:	187b      	adds	r3, r7, r1
 8010edc:	795b      	ldrb	r3, [r3, #5]
 8010ede:	021b      	lsls	r3, r3, #8
 8010ee0:	b21b      	sxth	r3, r3
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	b21a      	sxth	r2, r3
 8010ee6:	4b54      	ldr	r3, [pc, #336]	; (8011038 <sensingInit+0x224>)
 8010ee8:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 8010eea:	187b      	adds	r3, r7, r1
 8010eec:	799b      	ldrb	r3, [r3, #6]
 8010eee:	b21a      	sxth	r2, r3
 8010ef0:	187b      	adds	r3, r7, r1
 8010ef2:	79db      	ldrb	r3, [r3, #7]
 8010ef4:	021b      	lsls	r3, r3, #8
 8010ef6:	b21b      	sxth	r3, r3
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	b21a      	sxth	r2, r3
 8010efc:	4b4f      	ldr	r3, [pc, #316]	; (801103c <sensingInit+0x228>)
 8010efe:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 8010f00:	187b      	adds	r3, r7, r1
 8010f02:	7a1b      	ldrb	r3, [r3, #8]
 8010f04:	b21a      	sxth	r2, r3
 8010f06:	187b      	adds	r3, r7, r1
 8010f08:	7a5b      	ldrb	r3, [r3, #9]
 8010f0a:	021b      	lsls	r3, r3, #8
 8010f0c:	b21b      	sxth	r3, r3
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	b21a      	sxth	r2, r3
 8010f12:	4b4b      	ldr	r3, [pc, #300]	; (8011040 <sensingInit+0x22c>)
 8010f14:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 8010f16:	187b      	adds	r3, r7, r1
 8010f18:	7a9b      	ldrb	r3, [r3, #10]
 8010f1a:	b21a      	sxth	r2, r3
 8010f1c:	187b      	adds	r3, r7, r1
 8010f1e:	7adb      	ldrb	r3, [r3, #11]
 8010f20:	021b      	lsls	r3, r3, #8
 8010f22:	b21b      	sxth	r3, r3
 8010f24:	4313      	orrs	r3, r2
 8010f26:	b21a      	sxth	r2, r3
 8010f28:	4b46      	ldr	r3, [pc, #280]	; (8011044 <sensingInit+0x230>)
 8010f2a:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 8010f2c:	187b      	adds	r3, r7, r1
 8010f2e:	7b1b      	ldrb	r3, [r3, #12]
 8010f30:	b21a      	sxth	r2, r3
 8010f32:	187b      	adds	r3, r7, r1
 8010f34:	7b5b      	ldrb	r3, [r3, #13]
 8010f36:	021b      	lsls	r3, r3, #8
 8010f38:	b21b      	sxth	r3, r3
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	b21a      	sxth	r2, r3
 8010f3e:	4b42      	ldr	r3, [pc, #264]	; (8011048 <sensingInit+0x234>)
 8010f40:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 8010f42:	187b      	adds	r3, r7, r1
 8010f44:	7b9b      	ldrb	r3, [r3, #14]
 8010f46:	b21a      	sxth	r2, r3
 8010f48:	187b      	adds	r3, r7, r1
 8010f4a:	7bdb      	ldrb	r3, [r3, #15]
 8010f4c:	021b      	lsls	r3, r3, #8
 8010f4e:	b21b      	sxth	r3, r3
 8010f50:	4313      	orrs	r3, r2
 8010f52:	b21a      	sxth	r2, r3
 8010f54:	4b3d      	ldr	r3, [pc, #244]	; (801104c <sensingInit+0x238>)
 8010f56:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 8010f58:	187b      	adds	r3, r7, r1
 8010f5a:	7c1b      	ldrb	r3, [r3, #16]
 8010f5c:	b21a      	sxth	r2, r3
 8010f5e:	187b      	adds	r3, r7, r1
 8010f60:	7c5b      	ldrb	r3, [r3, #17]
 8010f62:	021b      	lsls	r3, r3, #8
 8010f64:	b21b      	sxth	r3, r3
 8010f66:	4313      	orrs	r3, r2
 8010f68:	b21a      	sxth	r2, r3
 8010f6a:	4b39      	ldr	r3, [pc, #228]	; (8011050 <sensingInit+0x23c>)
 8010f6c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H1, 1, &dig_H_1, 1,
 8010f6e:	4b2b      	ldr	r3, [pc, #172]	; (801101c <sensingInit+0x208>)
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	482b      	ldr	r0, [pc, #172]	; (8011020 <sensingInit+0x20c>)
 8010f74:	9302      	str	r3, [sp, #8]
 8010f76:	2301      	movs	r3, #1
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	240b      	movs	r4, #11
 8010f7c:	193b      	adds	r3, r7, r4
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	2301      	movs	r3, #1
 8010f82:	22a1      	movs	r2, #161	; 0xa1
 8010f84:	21ee      	movs	r1, #238	; 0xee
 8010f86:	f7f4 fa1b 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H1 = ((unsigned char) dig_H_1);
 8010f8a:	193b      	adds	r3, r7, r4
 8010f8c:	781a      	ldrb	r2, [r3, #0]
 8010f8e:	4b31      	ldr	r3, [pc, #196]	; (8011054 <sensingInit+0x240>)
 8010f90:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H2, 1, dig_H_2_6, 7,
 8010f92:	4b22      	ldr	r3, [pc, #136]	; (801101c <sensingInit+0x208>)
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	4822      	ldr	r0, [pc, #136]	; (8011020 <sensingInit+0x20c>)
 8010f98:	9302      	str	r3, [sp, #8]
 8010f9a:	2307      	movs	r3, #7
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	1d3b      	adds	r3, r7, #4
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	22e1      	movs	r2, #225	; 0xe1
 8010fa6:	21ee      	movs	r1, #238	; 0xee
 8010fa8:	f7f4 fa0a 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 8010fac:	1d3b      	adds	r3, r7, #4
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	b21a      	sxth	r2, r3
 8010fb2:	1d3b      	adds	r3, r7, #4
 8010fb4:	785b      	ldrb	r3, [r3, #1]
 8010fb6:	021b      	lsls	r3, r3, #8
 8010fb8:	b21b      	sxth	r3, r3
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	b21a      	sxth	r2, r3
 8010fbe:	4b26      	ldr	r3, [pc, #152]	; (8011058 <sensingInit+0x244>)
 8010fc0:	801a      	strh	r2, [r3, #0]
	dig_H3 = ((unsigned char) dig_H_2_6[2]);
 8010fc2:	1d3b      	adds	r3, r7, #4
 8010fc4:	789a      	ldrb	r2, [r3, #2]
 8010fc6:	4b25      	ldr	r3, [pc, #148]	; (801105c <sensingInit+0x248>)
 8010fc8:	701a      	strb	r2, [r3, #0]

	dig_H4 =
			(((int16_t) dig_H_2_6[3]) << 4 | (((int16_t) dig_H_2_6[4]) & 0x0f));
 8010fca:	1d3b      	adds	r3, r7, #4
 8010fcc:	78db      	ldrb	r3, [r3, #3]
 8010fce:	011b      	lsls	r3, r3, #4
 8010fd0:	b21a      	sxth	r2, r3
 8010fd2:	1d3b      	adds	r3, r7, #4
 8010fd4:	791b      	ldrb	r3, [r3, #4]
 8010fd6:	b21b      	sxth	r3, r3
 8010fd8:	210f      	movs	r1, #15
 8010fda:	400b      	ands	r3, r1
 8010fdc:	b21b      	sxth	r3, r3
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	b21a      	sxth	r2, r3
	dig_H4 =
 8010fe2:	4b1f      	ldr	r3, [pc, #124]	; (8011060 <sensingInit+0x24c>)
 8010fe4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4 | ((int16_t) dig_H_2_6[5]) << 4);
 8010fe6:	1d3b      	adds	r3, r7, #4
 8010fe8:	791b      	ldrb	r3, [r3, #4]
 8010fea:	091b      	lsrs	r3, r3, #4
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	1d3b      	adds	r3, r7, #4
 8010ff2:	795b      	ldrb	r3, [r3, #5]
 8010ff4:	011b      	lsls	r3, r3, #4
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	b21a      	sxth	r2, r3
 8010ffc:	4b19      	ldr	r3, [pc, #100]	; (8011064 <sensingInit+0x250>)
 8010ffe:	801a      	strh	r2, [r3, #0]
	dig_H6 = ((unsigned char) dig_H_2_6[6]);
 8011000:	1d3b      	adds	r3, r7, #4
 8011002:	799a      	ldrb	r2, [r3, #6]
 8011004:	4b18      	ldr	r3, [pc, #96]	; (8011068 <sensingInit+0x254>)
 8011006:	701a      	strb	r2, [r3, #0]

	sensingRead();
 8011008:	f000 f830 	bl	801106c <sensingRead>

}
 801100c:	46c0      	nop			; (mov r8, r8)
 801100e:	46bd      	mov	sp, r7
 8011010:	b00b      	add	sp, #44	; 0x2c
 8011012:	bd90      	pop	{r4, r7, pc}
 8011014:	20000334 	.word	0x20000334
 8011018:	20000454 	.word	0x20000454
 801101c:	20000042 	.word	0x20000042
 8011020:	2000021c 	.word	0x2000021c
 8011024:	20000204 	.word	0x20000204
 8011028:	20000378 	.word	0x20000378
 801102c:	200006f2 	.word	0x200006f2
 8011030:	20000698 	.word	0x20000698
 8011034:	2000043c 	.word	0x2000043c
 8011038:	2000069a 	.word	0x2000069a
 801103c:	20000440 	.word	0x20000440
 8011040:	20000626 	.word	0x20000626
 8011044:	200006fc 	.word	0x200006fc
 8011048:	200001fc 	.word	0x200001fc
 801104c:	2000069c 	.word	0x2000069c
 8011050:	200006f0 	.word	0x200006f0
 8011054:	200003ae 	.word	0x200003ae
 8011058:	20000708 	.word	0x20000708
 801105c:	200006e1 	.word	0x200006e1
 8011060:	20000376 	.word	0x20000376
 8011064:	200006a6 	.word	0x200006a6
 8011068:	200004c1 	.word	0x200004c1

0801106c <sensingRead>:

void sensingRead(void) {
 801106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801106e:	b095      	sub	sp, #84	; 0x54
 8011070:	af04      	add	r7, sp, #16

	//								ADC READINGS
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 8011072:	49b8      	ldr	r1, [pc, #736]	; (8011354 <sensingRead+0x2e8>)
 8011074:	4bb8      	ldr	r3, [pc, #736]	; (8011358 <sensingRead+0x2ec>)
 8011076:	2203      	movs	r2, #3
 8011078:	0018      	movs	r0, r3
 801107a:	f7f2 fda9 	bl	8003bd0 <HAL_ADC_Start_DMA>
	float voltagePassiveRaw;
	float voltageDropRaw;
	float currentRaw;
	float resistanceRaw;

	voltageBatteryRaw = ((3300 * adcReading[0]) / 4095) * 2;
 801107e:	4bb5      	ldr	r3, [pc, #724]	; (8011354 <sensingRead+0x2e8>)
 8011080:	881b      	ldrh	r3, [r3, #0]
 8011082:	b29b      	uxth	r3, r3
 8011084:	001a      	movs	r2, r3
 8011086:	4bb5      	ldr	r3, [pc, #724]	; (801135c <sensingRead+0x2f0>)
 8011088:	4353      	muls	r3, r2
 801108a:	49b5      	ldr	r1, [pc, #724]	; (8011360 <sensingRead+0x2f4>)
 801108c:	0018      	movs	r0, r3
 801108e:	f7ef f8cf 	bl	8000230 <__divsi3>
 8011092:	0003      	movs	r3, r0
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	637b      	str	r3, [r7, #52]	; 0x34

	if (voltageBatteryRaw < batteryLevels[0])
 8011098:	4bb2      	ldr	r3, [pc, #712]	; (8011364 <sensingRead+0x2f8>)
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	001a      	movs	r2, r3
 801109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d202      	bcs.n	80110aa <sensingRead+0x3e>
		batteryState = 8;
 80110a4:	4bb0      	ldr	r3, [pc, #704]	; (8011368 <sensingRead+0x2fc>)
 80110a6:	2208      	movs	r2, #8
 80110a8:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[0]
 80110aa:	4bae      	ldr	r3, [pc, #696]	; (8011364 <sensingRead+0x2f8>)
 80110ac:	881b      	ldrh	r3, [r3, #0]
 80110ae:	001a      	movs	r2, r3
 80110b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d308      	bcc.n	80110c8 <sensingRead+0x5c>
			&& voltageBatteryRaw < batteryLevels[1])
 80110b6:	4bab      	ldr	r3, [pc, #684]	; (8011364 <sensingRead+0x2f8>)
 80110b8:	885b      	ldrh	r3, [r3, #2]
 80110ba:	001a      	movs	r2, r3
 80110bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110be:	4293      	cmp	r3, r2
 80110c0:	d202      	bcs.n	80110c8 <sensingRead+0x5c>
		batteryState = 7;
 80110c2:	4ba9      	ldr	r3, [pc, #676]	; (8011368 <sensingRead+0x2fc>)
 80110c4:	2207      	movs	r2, #7
 80110c6:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[1]
 80110c8:	4ba6      	ldr	r3, [pc, #664]	; (8011364 <sensingRead+0x2f8>)
 80110ca:	885b      	ldrh	r3, [r3, #2]
 80110cc:	001a      	movs	r2, r3
 80110ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d308      	bcc.n	80110e6 <sensingRead+0x7a>
			&& voltageBatteryRaw < batteryLevels[2])
 80110d4:	4ba3      	ldr	r3, [pc, #652]	; (8011364 <sensingRead+0x2f8>)
 80110d6:	889b      	ldrh	r3, [r3, #4]
 80110d8:	001a      	movs	r2, r3
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	4293      	cmp	r3, r2
 80110de:	d202      	bcs.n	80110e6 <sensingRead+0x7a>
		batteryState = 6;
 80110e0:	4ba1      	ldr	r3, [pc, #644]	; (8011368 <sensingRead+0x2fc>)
 80110e2:	2206      	movs	r2, #6
 80110e4:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[2]
 80110e6:	4b9f      	ldr	r3, [pc, #636]	; (8011364 <sensingRead+0x2f8>)
 80110e8:	889b      	ldrh	r3, [r3, #4]
 80110ea:	001a      	movs	r2, r3
 80110ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d308      	bcc.n	8011104 <sensingRead+0x98>
			&& voltageBatteryRaw < batteryLevels[3])
 80110f2:	4b9c      	ldr	r3, [pc, #624]	; (8011364 <sensingRead+0x2f8>)
 80110f4:	88db      	ldrh	r3, [r3, #6]
 80110f6:	001a      	movs	r2, r3
 80110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d202      	bcs.n	8011104 <sensingRead+0x98>
		batteryState = 5;
 80110fe:	4b9a      	ldr	r3, [pc, #616]	; (8011368 <sensingRead+0x2fc>)
 8011100:	2205      	movs	r2, #5
 8011102:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[3]
 8011104:	4b97      	ldr	r3, [pc, #604]	; (8011364 <sensingRead+0x2f8>)
 8011106:	88db      	ldrh	r3, [r3, #6]
 8011108:	001a      	movs	r2, r3
 801110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110c:	4293      	cmp	r3, r2
 801110e:	d308      	bcc.n	8011122 <sensingRead+0xb6>
			&& voltageBatteryRaw < batteryLevels[4])
 8011110:	4b94      	ldr	r3, [pc, #592]	; (8011364 <sensingRead+0x2f8>)
 8011112:	891b      	ldrh	r3, [r3, #8]
 8011114:	001a      	movs	r2, r3
 8011116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011118:	4293      	cmp	r3, r2
 801111a:	d202      	bcs.n	8011122 <sensingRead+0xb6>
		batteryState = 4;
 801111c:	4b92      	ldr	r3, [pc, #584]	; (8011368 <sensingRead+0x2fc>)
 801111e:	2204      	movs	r2, #4
 8011120:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[4]
 8011122:	4b90      	ldr	r3, [pc, #576]	; (8011364 <sensingRead+0x2f8>)
 8011124:	891b      	ldrh	r3, [r3, #8]
 8011126:	001a      	movs	r2, r3
 8011128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112a:	4293      	cmp	r3, r2
 801112c:	d308      	bcc.n	8011140 <sensingRead+0xd4>
			&& voltageBatteryRaw < batteryLevels[5])
 801112e:	4b8d      	ldr	r3, [pc, #564]	; (8011364 <sensingRead+0x2f8>)
 8011130:	895b      	ldrh	r3, [r3, #10]
 8011132:	001a      	movs	r2, r3
 8011134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011136:	4293      	cmp	r3, r2
 8011138:	d202      	bcs.n	8011140 <sensingRead+0xd4>
		batteryState = 3;
 801113a:	4b8b      	ldr	r3, [pc, #556]	; (8011368 <sensingRead+0x2fc>)
 801113c:	2203      	movs	r2, #3
 801113e:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[5]
 8011140:	4b88      	ldr	r3, [pc, #544]	; (8011364 <sensingRead+0x2f8>)
 8011142:	895b      	ldrh	r3, [r3, #10]
 8011144:	001a      	movs	r2, r3
 8011146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011148:	4293      	cmp	r3, r2
 801114a:	d308      	bcc.n	801115e <sensingRead+0xf2>
			&& voltageBatteryRaw < batteryLevels[6])
 801114c:	4b85      	ldr	r3, [pc, #532]	; (8011364 <sensingRead+0x2f8>)
 801114e:	899b      	ldrh	r3, [r3, #12]
 8011150:	001a      	movs	r2, r3
 8011152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011154:	4293      	cmp	r3, r2
 8011156:	d202      	bcs.n	801115e <sensingRead+0xf2>
		batteryState = 2;
 8011158:	4b83      	ldr	r3, [pc, #524]	; (8011368 <sensingRead+0x2fc>)
 801115a:	2202      	movs	r2, #2
 801115c:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[6])
 801115e:	4b81      	ldr	r3, [pc, #516]	; (8011364 <sensingRead+0x2f8>)
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	001a      	movs	r2, r3
 8011164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011166:	4293      	cmp	r3, r2
 8011168:	d302      	bcc.n	8011170 <sensingRead+0x104>
		batteryState = 1;
 801116a:	4b7f      	ldr	r3, [pc, #508]	; (8011368 <sensingRead+0x2fc>)
 801116c:	2201      	movs	r2, #1
 801116e:	701a      	strb	r2, [r3, #0]

	memset(voltagePassive, 0, 5);
 8011170:	4b7e      	ldr	r3, [pc, #504]	; (801136c <sensingRead+0x300>)
 8011172:	2205      	movs	r2, #5
 8011174:	2100      	movs	r1, #0
 8011176:	0018      	movs	r0, r3
 8011178:	f001 ffe0 	bl	801313c <memset>
	if (adcReading[1] > 100) {
 801117c:	4b75      	ldr	r3, [pc, #468]	; (8011354 <sensingRead+0x2e8>)
 801117e:	885b      	ldrh	r3, [r3, #2]
 8011180:	b29b      	uxth	r3, r3
 8011182:	2b64      	cmp	r3, #100	; 0x64
 8011184:	d940      	bls.n	8011208 <sensingRead+0x19c>
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 8011186:	4b73      	ldr	r3, [pc, #460]	; (8011354 <sensingRead+0x2e8>)
 8011188:	885b      	ldrh	r3, [r3, #2]
 801118a:	b29b      	uxth	r3, r3
 801118c:	0018      	movs	r0, r3
 801118e:	f7f0 f901 	bl	8001394 <__aeabi_ui2f>
 8011192:	1c06      	adds	r6, r0, #0
 8011194:	4b76      	ldr	r3, [pc, #472]	; (8011370 <sensingRead+0x304>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	0018      	movs	r0, r3
 801119a:	f7f0 f8b5 	bl	8001308 <__aeabi_i2f>
 801119e:	1c03      	adds	r3, r0, #0
 80111a0:	1c19      	adds	r1, r3, #0
 80111a2:	1c30      	adds	r0, r6, #0
 80111a4:	f7ef fa48 	bl	8000638 <__aeabi_fadd>
 80111a8:	1c03      	adds	r3, r0, #0
 80111aa:	1c18      	adds	r0, r3, #0
 80111ac:	f7f1 ff46 	bl	800303c <__aeabi_f2d>
 80111b0:	4a70      	ldr	r2, [pc, #448]	; (8011374 <sensingRead+0x308>)
 80111b2:	4b71      	ldr	r3, [pc, #452]	; (8011378 <sensingRead+0x30c>)
 80111b4:	f7f1 f89a 	bl	80022ec <__aeabi_dmul>
 80111b8:	0002      	movs	r2, r0
 80111ba:	000b      	movs	r3, r1
 80111bc:	0010      	movs	r0, r2
 80111be:	0019      	movs	r1, r3
				/ 4095) * 40)) * gainVoltagePassive;
 80111c0:	2200      	movs	r2, #0
 80111c2:	4b6e      	ldr	r3, [pc, #440]	; (801137c <sensingRead+0x310>)
 80111c4:	f7f0 fc8c 	bl	8001ae0 <__aeabi_ddiv>
 80111c8:	0002      	movs	r2, r0
 80111ca:	000b      	movs	r3, r1
 80111cc:	0010      	movs	r0, r2
 80111ce:	0019      	movs	r1, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	4b6b      	ldr	r3, [pc, #428]	; (8011380 <sensingRead+0x314>)
 80111d4:	f7f1 f88a 	bl	80022ec <__aeabi_dmul>
 80111d8:	0002      	movs	r2, r0
 80111da:	000b      	movs	r3, r1
 80111dc:	603a      	str	r2, [r7, #0]
 80111de:	607b      	str	r3, [r7, #4]
 80111e0:	4b68      	ldr	r3, [pc, #416]	; (8011384 <sensingRead+0x318>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	1c18      	adds	r0, r3, #0
 80111e6:	f7f1 ff29 	bl	800303c <__aeabi_f2d>
 80111ea:	0002      	movs	r2, r0
 80111ec:	000b      	movs	r3, r1
 80111ee:	6838      	ldr	r0, [r7, #0]
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	f7f1 f87b 	bl	80022ec <__aeabi_dmul>
 80111f6:	0002      	movs	r2, r0
 80111f8:	000b      	movs	r3, r1
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 80111fa:	0010      	movs	r0, r2
 80111fc:	0019      	movs	r1, r3
 80111fe:	f7f1 ff65 	bl	80030cc <__aeabi_d2f>
 8011202:	1c03      	adds	r3, r0, #0
 8011204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011206:	e001      	b.n	801120c <sensingRead+0x1a0>
	} else {
		voltagePassiveRaw = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (voltagePassiveRaw == 0) {
 801120c:	2100      	movs	r1, #0
 801120e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011210:	f7ef f944 	bl	800049c <__aeabi_fcmpeq>
 8011214:	1e03      	subs	r3, r0, #0
 8011216:	d006      	beq.n	8011226 <sensingRead+0x1ba>
		sprintf(voltagePassive, "--");
 8011218:	4a5b      	ldr	r2, [pc, #364]	; (8011388 <sensingRead+0x31c>)
 801121a:	4b54      	ldr	r3, [pc, #336]	; (801136c <sensingRead+0x300>)
 801121c:	0011      	movs	r1, r2
 801121e:	0018      	movs	r0, r3
 8011220:	f002 f8e4 	bl	80133ec <siprintf>
 8011224:	e005      	b.n	8011232 <sensingRead+0x1c6>
	} else {
		float2Text(voltagePassive, voltagePassiveRaw);
 8011226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011228:	4b50      	ldr	r3, [pc, #320]	; (801136c <sensingRead+0x300>)
 801122a:	1c11      	adds	r1, r2, #0
 801122c:	0018      	movs	r0, r3
 801122e:	f7ff fdc3 	bl	8010db8 <float2Text>
	}

	memset(voltageDrop, 0, 5);
 8011232:	4b56      	ldr	r3, [pc, #344]	; (801138c <sensingRead+0x320>)
 8011234:	2205      	movs	r2, #5
 8011236:	2100      	movs	r1, #0
 8011238:	0018      	movs	r0, r3
 801123a:	f001 ff7f 	bl	801313c <memset>
	if (adcReading[2] < 3200) {
 801123e:	4b45      	ldr	r3, [pc, #276]	; (8011354 <sensingRead+0x2e8>)
 8011240:	889b      	ldrh	r3, [r3, #4]
 8011242:	b29a      	uxth	r2, r3
 8011244:	23c8      	movs	r3, #200	; 0xc8
 8011246:	011b      	lsls	r3, r3, #4
 8011248:	429a      	cmp	r2, r3
 801124a:	d229      	bcs.n	80112a0 <sensingRead+0x234>
		voltageDropRaw = ((3.3 * ((float) adcReading[2] + offsetADC)) / 4095);
 801124c:	4b41      	ldr	r3, [pc, #260]	; (8011354 <sensingRead+0x2e8>)
 801124e:	889b      	ldrh	r3, [r3, #4]
 8011250:	b29b      	uxth	r3, r3
 8011252:	0018      	movs	r0, r3
 8011254:	f7f0 f89e 	bl	8001394 <__aeabi_ui2f>
 8011258:	1c06      	adds	r6, r0, #0
 801125a:	4b45      	ldr	r3, [pc, #276]	; (8011370 <sensingRead+0x304>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	0018      	movs	r0, r3
 8011260:	f7f0 f852 	bl	8001308 <__aeabi_i2f>
 8011264:	1c03      	adds	r3, r0, #0
 8011266:	1c19      	adds	r1, r3, #0
 8011268:	1c30      	adds	r0, r6, #0
 801126a:	f7ef f9e5 	bl	8000638 <__aeabi_fadd>
 801126e:	1c03      	adds	r3, r0, #0
 8011270:	1c18      	adds	r0, r3, #0
 8011272:	f7f1 fee3 	bl	800303c <__aeabi_f2d>
 8011276:	4a3f      	ldr	r2, [pc, #252]	; (8011374 <sensingRead+0x308>)
 8011278:	4b3f      	ldr	r3, [pc, #252]	; (8011378 <sensingRead+0x30c>)
 801127a:	f7f1 f837 	bl	80022ec <__aeabi_dmul>
 801127e:	0002      	movs	r2, r0
 8011280:	000b      	movs	r3, r1
 8011282:	0010      	movs	r0, r2
 8011284:	0019      	movs	r1, r3
 8011286:	2200      	movs	r2, #0
 8011288:	4b3c      	ldr	r3, [pc, #240]	; (801137c <sensingRead+0x310>)
 801128a:	f7f0 fc29 	bl	8001ae0 <__aeabi_ddiv>
 801128e:	0002      	movs	r2, r0
 8011290:	000b      	movs	r3, r1
 8011292:	0010      	movs	r0, r2
 8011294:	0019      	movs	r1, r3
 8011296:	f7f1 ff19 	bl	80030cc <__aeabi_d2f>
 801129a:	1c03      	adds	r3, r0, #0
 801129c:	63bb      	str	r3, [r7, #56]	; 0x38
 801129e:	e001      	b.n	80112a4 <sensingRead+0x238>

//		voltageDropRaw = voltageDropRaw - 0.59; //offset correction

	} else {
		voltageDropRaw = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (voltageDropRaw == 0) {
 80112a4:	2100      	movs	r1, #0
 80112a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112a8:	f7ef f8f8 	bl	800049c <__aeabi_fcmpeq>
 80112ac:	1e03      	subs	r3, r0, #0
 80112ae:	d006      	beq.n	80112be <sensingRead+0x252>
		sprintf(voltageDrop, "--");
 80112b0:	4a35      	ldr	r2, [pc, #212]	; (8011388 <sensingRead+0x31c>)
 80112b2:	4b36      	ldr	r3, [pc, #216]	; (801138c <sensingRead+0x320>)
 80112b4:	0011      	movs	r1, r2
 80112b6:	0018      	movs	r0, r3
 80112b8:	f002 f898 	bl	80133ec <siprintf>
 80112bc:	e005      	b.n	80112ca <sensingRead+0x25e>
	} else {
		float2Text(voltageDrop, voltageDropRaw);
 80112be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112c0:	4b32      	ldr	r3, [pc, #200]	; (801138c <sensingRead+0x320>)
 80112c2:	1c11      	adds	r1, r2, #0
 80112c4:	0018      	movs	r0, r3
 80112c6:	f7ff fd77 	bl	8010db8 <float2Text>
	}

	memset(resistance, 0, 5);
 80112ca:	4b31      	ldr	r3, [pc, #196]	; (8011390 <sensingRead+0x324>)
 80112cc:	2205      	movs	r2, #5
 80112ce:	2100      	movs	r1, #0
 80112d0:	0018      	movs	r0, r3
 80112d2:	f001 ff33 	bl	801313c <memset>
	currentRaw = (3.3 - voltageDropRaw) / 10000;
 80112d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112d8:	f7f1 feb0 	bl	800303c <__aeabi_f2d>
 80112dc:	0002      	movs	r2, r0
 80112de:	000b      	movs	r3, r1
 80112e0:	4824      	ldr	r0, [pc, #144]	; (8011374 <sensingRead+0x308>)
 80112e2:	4925      	ldr	r1, [pc, #148]	; (8011378 <sensingRead+0x30c>)
 80112e4:	f7f1 fa6e 	bl	80027c4 <__aeabi_dsub>
 80112e8:	0002      	movs	r2, r0
 80112ea:	000b      	movs	r3, r1
 80112ec:	0010      	movs	r0, r2
 80112ee:	0019      	movs	r1, r3
 80112f0:	2200      	movs	r2, #0
 80112f2:	4b28      	ldr	r3, [pc, #160]	; (8011394 <sensingRead+0x328>)
 80112f4:	f7f0 fbf4 	bl	8001ae0 <__aeabi_ddiv>
 80112f8:	0002      	movs	r2, r0
 80112fa:	000b      	movs	r3, r1
 80112fc:	0010      	movs	r0, r2
 80112fe:	0019      	movs	r1, r3
 8011300:	f7f1 fee4 	bl	80030cc <__aeabi_d2f>
 8011304:	1c03      	adds	r3, r0, #0
 8011306:	633b      	str	r3, [r7, #48]	; 0x30
	resistanceRaw = (voltageDropRaw / currentRaw) / 1000;
 8011308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801130a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801130c:	f7ef fb30 	bl	8000970 <__aeabi_fdiv>
 8011310:	1c03      	adds	r3, r0, #0
 8011312:	4921      	ldr	r1, [pc, #132]	; (8011398 <sensingRead+0x32c>)
 8011314:	1c18      	adds	r0, r3, #0
 8011316:	f7ef fb2b 	bl	8000970 <__aeabi_fdiv>
 801131a:	1c03      	adds	r3, r0, #0
 801131c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (voltageDropRaw == 0) {
 801131e:	2100      	movs	r1, #0
 8011320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011322:	f7ef f8bb 	bl	800049c <__aeabi_fcmpeq>
 8011326:	1e03      	subs	r3, r0, #0
 8011328:	d006      	beq.n	8011338 <sensingRead+0x2cc>
		sprintf(resistance, "--");
 801132a:	4a17      	ldr	r2, [pc, #92]	; (8011388 <sensingRead+0x31c>)
 801132c:	4b18      	ldr	r3, [pc, #96]	; (8011390 <sensingRead+0x324>)
 801132e:	0011      	movs	r1, r2
 8011330:	0018      	movs	r0, r3
 8011332:	f002 f85b 	bl	80133ec <siprintf>
 8011336:	e005      	b.n	8011344 <sensingRead+0x2d8>
	} else {
		float2Text(resistance, resistanceRaw);
 8011338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801133a:	4b15      	ldr	r3, [pc, #84]	; (8011390 <sensingRead+0x324>)
 801133c:	1c11      	adds	r1, r2, #0
 801133e:	0018      	movs	r0, r3
 8011340:	f7ff fd3a 	bl	8010db8 <float2Text>
	}

	if (batteryState >= 8) {
 8011344:	4b08      	ldr	r3, [pc, #32]	; (8011368 <sensingRead+0x2fc>)
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	2b07      	cmp	r3, #7
 801134a:	d929      	bls.n	80113a0 <sensingRead+0x334>

		flagBatteryLow = 1;
 801134c:	4b13      	ldr	r3, [pc, #76]	; (801139c <sensingRead+0x330>)
 801134e:	2201      	movs	r2, #1
 8011350:	701a      	strb	r2, [r3, #0]
 8011352:	e02b      	b.n	80113ac <sensingRead+0x340>
 8011354:	20000334 	.word	0x20000334
 8011358:	20000454 	.word	0x20000454
 801135c:	00000ce4 	.word	0x00000ce4
 8011360:	00000fff 	.word	0x00000fff
 8011364:	20000034 	.word	0x20000034
 8011368:	200003a5 	.word	0x200003a5
 801136c:	20000594 	.word	0x20000594
 8011370:	20000044 	.word	0x20000044
 8011374:	66666666 	.word	0x66666666
 8011378:	400a6666 	.word	0x400a6666
 801137c:	40affe00 	.word	0x40affe00
 8011380:	40440000 	.word	0x40440000
 8011384:	20000048 	.word	0x20000048
 8011388:	080162a0 	.word	0x080162a0
 801138c:	20000620 	.word	0x20000620
 8011390:	200006a0 	.word	0x200006a0
 8011394:	40c38800 	.word	0x40c38800
 8011398:	447a0000 	.word	0x447a0000
 801139c:	200006ee 	.word	0x200006ee

	}else{
		flagBatteryLow = 0;
 80113a0:	4bf9      	ldr	r3, [pc, #996]	; (8011788 <sensingRead+0x71c>)
 80113a2:	2200      	movs	r2, #0
 80113a4:	701a      	strb	r2, [r3, #0]
		flagBatteryWarningPrinted = 0;
 80113a6:	4bf9      	ldr	r3, [pc, #996]	; (801178c <sensingRead+0x720>)
 80113a8:	2200      	movs	r2, #0
 80113aa:	701a      	strb	r2, [r3, #0]


//								BME280 READINGS

//I2C read data
	uint8_t temperatureMSB = 0;
 80113ac:	2311      	movs	r3, #17
 80113ae:	2208      	movs	r2, #8
 80113b0:	4694      	mov	ip, r2
 80113b2:	44bc      	add	ip, r7
 80113b4:	4463      	add	r3, ip
 80113b6:	2200      	movs	r2, #0
 80113b8:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 80113ba:	2310      	movs	r3, #16
 80113bc:	2208      	movs	r2, #8
 80113be:	4694      	mov	ip, r2
 80113c0:	44bc      	add	ip, r7
 80113c2:	4463      	add	r3, ip
 80113c4:	2200      	movs	r2, #0
 80113c6:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 80113c8:	230f      	movs	r3, #15
 80113ca:	2208      	movs	r2, #8
 80113cc:	4694      	mov	ip, r2
 80113ce:	44bc      	add	ip, r7
 80113d0:	4463      	add	r3, ip
 80113d2:	2200      	movs	r2, #0
 80113d4:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 80113d6:	230e      	movs	r3, #14
 80113d8:	2208      	movs	r2, #8
 80113da:	4694      	mov	ip, r2
 80113dc:	44bc      	add	ip, r7
 80113de:	4463      	add	r3, ip
 80113e0:	2200      	movs	r2, #0
 80113e2:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 80113e4:	230d      	movs	r3, #13
 80113e6:	2208      	movs	r2, #8
 80113e8:	4694      	mov	ip, r2
 80113ea:	44bc      	add	ip, r7
 80113ec:	4463      	add	r3, ip
 80113ee:	2200      	movs	r2, #0
 80113f0:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 80113f2:	230c      	movs	r3, #12
 80113f4:	2208      	movs	r2, #8
 80113f6:	4694      	mov	ip, r2
 80113f8:	44bc      	add	ip, r7
 80113fa:	4463      	add	r3, ip
 80113fc:	2200      	movs	r2, #0
 80113fe:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 8011400:	230b      	movs	r3, #11
 8011402:	2208      	movs	r2, #8
 8011404:	4694      	mov	ip, r2
 8011406:	44bc      	add	ip, r7
 8011408:	4463      	add	r3, ip
 801140a:	2200      	movs	r2, #0
 801140c:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 801140e:	230a      	movs	r3, #10
 8011410:	2208      	movs	r2, #8
 8011412:	4694      	mov	ip, r2
 8011414:	44bc      	add	ip, r7
 8011416:	4463      	add	r3, ip
 8011418:	2200      	movs	r2, #0
 801141a:	701a      	strb	r2, [r3, #0]

	//adc data
	BME280_S32_t temperatureADC = 0;
 801141c:	2300      	movs	r3, #0
 801141e:	62bb      	str	r3, [r7, #40]	; 0x28
	BME280_S32_t pressureADC = 0;
 8011420:	2300      	movs	r3, #0
 8011422:	627b      	str	r3, [r7, #36]	; 0x24
	BME280_S32_t humidityADC = 0;
 8011424:	2300      	movs	r3, #0
 8011426:	623b      	str	r3, [r7, #32]

	//configure oversampling for hum
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_HUM, 1, &ctrlHum, 1,
 8011428:	48d9      	ldr	r0, [pc, #868]	; (8011790 <sensingRead+0x724>)
 801142a:	2332      	movs	r3, #50	; 0x32
 801142c:	9302      	str	r3, [sp, #8]
 801142e:	2301      	movs	r3, #1
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	4bd8      	ldr	r3, [pc, #864]	; (8011794 <sensingRead+0x728>)
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	2301      	movs	r3, #1
 8011438:	22f2      	movs	r2, #242	; 0xf2
 801143a:	21ee      	movs	r1, #238	; 0xee
 801143c:	f7f3 fe92 	bl	8005164 <HAL_I2C_Mem_Write>
 8011440:	1e03      	subs	r3, r0, #0
 8011442:	d001      	beq.n	8011448 <sensingRead+0x3dc>
			50) != HAL_OK) {
		Error_Handler();
 8011444:	f7ff f9ee 	bl	8010824 <Error_Handler>
	};

	//configure oversampling for press, temp
	//configure mode as force
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_MEAS, 1, &ctrlMeas,
 8011448:	48d1      	ldr	r0, [pc, #836]	; (8011790 <sensingRead+0x724>)
 801144a:	2332      	movs	r3, #50	; 0x32
 801144c:	9302      	str	r3, [sp, #8]
 801144e:	2301      	movs	r3, #1
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	4bd1      	ldr	r3, [pc, #836]	; (8011798 <sensingRead+0x72c>)
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	2301      	movs	r3, #1
 8011458:	22f4      	movs	r2, #244	; 0xf4
 801145a:	21ee      	movs	r1, #238	; 0xee
 801145c:	f7f3 fe82 	bl	8005164 <HAL_I2C_Mem_Write>
 8011460:	1e03      	subs	r3, r0, #0
 8011462:	d001      	beq.n	8011468 <sensingRead+0x3fc>
			1, 50) != HAL_OK) {
		Error_Handler();
 8011464:	f7ff f9de 	bl	8010824 <Error_Handler>
		;
	}

//wait for end
	HAL_Delay(70);
 8011468:	2046      	movs	r0, #70	; 0x46
 801146a:	f7f2 f84d 	bl	8003508 <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_MSB, 1, &humidityMSB, 1,
 801146e:	4bcb      	ldr	r3, [pc, #812]	; (801179c <sensingRead+0x730>)
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	48c7      	ldr	r0, [pc, #796]	; (8011790 <sensingRead+0x724>)
 8011474:	9302      	str	r3, [sp, #8]
 8011476:	2301      	movs	r3, #1
 8011478:	9301      	str	r3, [sp, #4]
 801147a:	260b      	movs	r6, #11
 801147c:	2308      	movs	r3, #8
 801147e:	18fa      	adds	r2, r7, r3
 8011480:	1993      	adds	r3, r2, r6
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	2301      	movs	r3, #1
 8011486:	22fd      	movs	r2, #253	; 0xfd
 8011488:	21ee      	movs	r1, #238	; 0xee
 801148a:	f7f3 ff99 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_LSB, 1, &humidityLSB, 1,
 801148e:	4bc3      	ldr	r3, [pc, #780]	; (801179c <sensingRead+0x730>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	48bf      	ldr	r0, [pc, #764]	; (8011790 <sensingRead+0x724>)
 8011494:	9302      	str	r3, [sp, #8]
 8011496:	2301      	movs	r3, #1
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	230a      	movs	r3, #10
 801149c:	2208      	movs	r2, #8
 801149e:	4694      	mov	ip, r2
 80114a0:	44bc      	add	ip, r7
 80114a2:	4463      	add	r3, ip
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	2301      	movs	r3, #1
 80114a8:	22fe      	movs	r2, #254	; 0xfe
 80114aa:	21ee      	movs	r1, #238	; 0xee
 80114ac:	f7f3 ff88 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 80114b0:	2308      	movs	r3, #8
 80114b2:	18fa      	adds	r2, r7, r3
 80114b4:	1993      	adds	r3, r2, r6
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	021b      	lsls	r3, r3, #8
 80114ba:	220a      	movs	r2, #10
 80114bc:	2108      	movs	r1, #8
 80114be:	468c      	mov	ip, r1
 80114c0:	44bc      	add	ip, r7
 80114c2:	4462      	add	r2, ip
 80114c4:	7812      	ldrb	r2, [r2, #0]
 80114c6:	4313      	orrs	r3, r2
 80114c8:	623b      	str	r3, [r7, #32]

	humidityValue = BME280_compensate_H_int32(humidityADC) / 1024;
 80114ca:	6a3b      	ldr	r3, [r7, #32]
 80114cc:	0018      	movs	r0, r3
 80114ce:	f000 fcb7 	bl	8011e40 <BME280_compensate_H_int32>
 80114d2:	0003      	movs	r3, r0
 80114d4:	0a9a      	lsrs	r2, r3, #10
 80114d6:	4bb2      	ldr	r3, [pc, #712]	; (80117a0 <sensingRead+0x734>)
 80114d8:	601a      	str	r2, [r3, #0]

	//TEMPERATURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_MSB, 1, &temperatureMSB,
 80114da:	4bb0      	ldr	r3, [pc, #704]	; (801179c <sensingRead+0x730>)
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	48ac      	ldr	r0, [pc, #688]	; (8011790 <sensingRead+0x724>)
 80114e0:	9302      	str	r3, [sp, #8]
 80114e2:	2301      	movs	r3, #1
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	2611      	movs	r6, #17
 80114e8:	2308      	movs	r3, #8
 80114ea:	18fa      	adds	r2, r7, r3
 80114ec:	1993      	adds	r3, r2, r6
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	2301      	movs	r3, #1
 80114f2:	22fa      	movs	r2, #250	; 0xfa
 80114f4:	21ee      	movs	r1, #238	; 0xee
 80114f6:	f7f3 ff63 	bl	80053c0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_LSB, 1, &temperatureLSB,
 80114fa:	4ba8      	ldr	r3, [pc, #672]	; (801179c <sensingRead+0x730>)
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	48a4      	ldr	r0, [pc, #656]	; (8011790 <sensingRead+0x724>)
 8011500:	9302      	str	r3, [sp, #8]
 8011502:	2301      	movs	r3, #1
 8011504:	9301      	str	r3, [sp, #4]
 8011506:	2310      	movs	r3, #16
 8011508:	2208      	movs	r2, #8
 801150a:	4694      	mov	ip, r2
 801150c:	44bc      	add	ip, r7
 801150e:	4463      	add	r3, ip
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	2301      	movs	r3, #1
 8011514:	22fb      	movs	r2, #251	; 0xfb
 8011516:	21ee      	movs	r1, #238	; 0xee
 8011518:	f7f3 ff52 	bl	80053c0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_XLSB, 1, &temperatureXLSB,
 801151c:	4b9f      	ldr	r3, [pc, #636]	; (801179c <sensingRead+0x730>)
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	489b      	ldr	r0, [pc, #620]	; (8011790 <sensingRead+0x724>)
 8011522:	9302      	str	r3, [sp, #8]
 8011524:	2301      	movs	r3, #1
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	220f      	movs	r2, #15
 801152a:	2308      	movs	r3, #8
 801152c:	18f9      	adds	r1, r7, r3
 801152e:	188b      	adds	r3, r1, r2
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	2301      	movs	r3, #1
 8011534:	22fc      	movs	r2, #252	; 0xfc
 8011536:	21ee      	movs	r1, #238	; 0xee
 8011538:	f7f3 ff42 	bl	80053c0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 801153c:	2308      	movs	r3, #8
 801153e:	18fa      	adds	r2, r7, r3
 8011540:	1993      	adds	r3, r2, r6
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	031a      	lsls	r2, r3, #12
 8011546:	2310      	movs	r3, #16
 8011548:	2108      	movs	r1, #8
 801154a:	468c      	mov	ip, r1
 801154c:	44bc      	add	ip, r7
 801154e:	4463      	add	r3, ip
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	011b      	lsls	r3, r3, #4
 8011554:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 8011556:	220f      	movs	r2, #15
 8011558:	2108      	movs	r1, #8
 801155a:	468c      	mov	ip, r1
 801155c:	44bc      	add	ip, r7
 801155e:	4462      	add	r2, ip
 8011560:	7812      	ldrb	r2, [r2, #0]
 8011562:	0912      	lsrs	r2, r2, #4
 8011564:	b2d2      	uxtb	r2, r2
	temperatureADC =
 8011566:	4313      	orrs	r3, r2
 8011568:	62bb      	str	r3, [r7, #40]	; 0x28

	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 801156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156c:	0018      	movs	r0, r3
 801156e:	f000 fa7f 	bl	8011a70 <BME280_compensate_T_int32>
 8011572:	0003      	movs	r3, r0
 8011574:	2164      	movs	r1, #100	; 0x64
 8011576:	0018      	movs	r0, r3
 8011578:	f7ee fe5a 	bl	8000230 <__divsi3>
 801157c:	0003      	movs	r3, r0
 801157e:	001a      	movs	r2, r3
			+ temperatureCompensation;
 8011580:	4b88      	ldr	r3, [pc, #544]	; (80117a4 <sensingRead+0x738>)
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	b25b      	sxtb	r3, r3
 8011586:	18d2      	adds	r2, r2, r3
	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 8011588:	4b87      	ldr	r3, [pc, #540]	; (80117a8 <sensingRead+0x73c>)
 801158a:	601a      	str	r2, [r3, #0]

	//PRESSURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_MSB, 1, &pressureMSB, 1,
 801158c:	4b83      	ldr	r3, [pc, #524]	; (801179c <sensingRead+0x730>)
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	487f      	ldr	r0, [pc, #508]	; (8011790 <sensingRead+0x724>)
 8011592:	9302      	str	r3, [sp, #8]
 8011594:	2301      	movs	r3, #1
 8011596:	9301      	str	r3, [sp, #4]
 8011598:	260e      	movs	r6, #14
 801159a:	2308      	movs	r3, #8
 801159c:	18fa      	adds	r2, r7, r3
 801159e:	1993      	adds	r3, r2, r6
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	2301      	movs	r3, #1
 80115a4:	22f7      	movs	r2, #247	; 0xf7
 80115a6:	21ee      	movs	r1, #238	; 0xee
 80115a8:	f7f3 ff0a 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_LSB, 1, &pressureLSB, 1,
 80115ac:	4b7b      	ldr	r3, [pc, #492]	; (801179c <sensingRead+0x730>)
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	4877      	ldr	r0, [pc, #476]	; (8011790 <sensingRead+0x724>)
 80115b2:	9302      	str	r3, [sp, #8]
 80115b4:	2301      	movs	r3, #1
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	230d      	movs	r3, #13
 80115ba:	2208      	movs	r2, #8
 80115bc:	4694      	mov	ip, r2
 80115be:	44bc      	add	ip, r7
 80115c0:	4463      	add	r3, ip
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	2301      	movs	r3, #1
 80115c6:	22f8      	movs	r2, #248	; 0xf8
 80115c8:	21ee      	movs	r1, #238	; 0xee
 80115ca:	f7f3 fef9 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_XLSB, 1, &pressureXLSB,
 80115ce:	4b73      	ldr	r3, [pc, #460]	; (801179c <sensingRead+0x730>)
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	486f      	ldr	r0, [pc, #444]	; (8011790 <sensingRead+0x724>)
 80115d4:	9302      	str	r3, [sp, #8]
 80115d6:	2301      	movs	r3, #1
 80115d8:	9301      	str	r3, [sp, #4]
 80115da:	220c      	movs	r2, #12
 80115dc:	2308      	movs	r3, #8
 80115de:	18f9      	adds	r1, r7, r3
 80115e0:	188b      	adds	r3, r1, r2
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	2301      	movs	r3, #1
 80115e6:	22f9      	movs	r2, #249	; 0xf9
 80115e8:	21ee      	movs	r1, #238	; 0xee
 80115ea:	f7f3 fee9 	bl	80053c0 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 80115ee:	2308      	movs	r3, #8
 80115f0:	18fb      	adds	r3, r7, r3
 80115f2:	199b      	adds	r3, r3, r6
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	031a      	lsls	r2, r3, #12
 80115f8:	230d      	movs	r3, #13
 80115fa:	2108      	movs	r1, #8
 80115fc:	468c      	mov	ip, r1
 80115fe:	44bc      	add	ip, r7
 8011600:	4463      	add	r3, ip
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 8011608:	220c      	movs	r2, #12
 801160a:	2108      	movs	r1, #8
 801160c:	468c      	mov	ip, r1
 801160e:	44bc      	add	ip, r7
 8011610:	4462      	add	r2, ip
 8011612:	7812      	ldrb	r2, [r2, #0]
 8011614:	0912      	lsrs	r2, r2, #4
 8011616:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 8011618:	4313      	orrs	r3, r2
 801161a:	627b      	str	r3, [r7, #36]	; 0x24

	pressureValue = BME280_compensate_P_int64(pressureADC) / 256;
 801161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161e:	0018      	movs	r0, r3
 8011620:	f000 fa62 	bl	8011ae8 <BME280_compensate_P_int64>
 8011624:	0003      	movs	r3, r0
 8011626:	0a1a      	lsrs	r2, r3, #8
 8011628:	4b60      	ldr	r3, [pc, #384]	; (80117ac <sensingRead+0x740>)
 801162a:	601a      	str	r2, [r3, #0]
	 * R- gas constant[J/(mol*K)]
	 * T- air temperature[K]
	 *
	 */

	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 801162c:	4b5e      	ldr	r3, [pc, #376]	; (80117a8 <sensingRead+0x73c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	0018      	movs	r0, r3
 8011632:	f7ef fe69 	bl	8001308 <__aeabi_i2f>
 8011636:	1c03      	adds	r3, r0, #0
 8011638:	1c18      	adds	r0, r3, #0
 801163a:	f7f1 fcff 	bl	800303c <__aeabi_f2d>
 801163e:	4a5c      	ldr	r2, [pc, #368]	; (80117b0 <sensingRead+0x744>)
 8011640:	4b5c      	ldr	r3, [pc, #368]	; (80117b4 <sensingRead+0x748>)
 8011642:	f7ef fee3 	bl	800140c <__aeabi_dadd>
 8011646:	0002      	movs	r2, r0
 8011648:	000b      	movs	r3, r1
 801164a:	0010      	movs	r0, r2
 801164c:	0019      	movs	r1, r3
 801164e:	4a5a      	ldr	r2, [pc, #360]	; (80117b8 <sensingRead+0x74c>)
 8011650:	4b5a      	ldr	r3, [pc, #360]	; (80117bc <sensingRead+0x750>)
 8011652:	f7f0 fe4b 	bl	80022ec <__aeabi_dmul>
 8011656:	0002      	movs	r2, r0
 8011658:	000b      	movs	r3, r1
 801165a:	0010      	movs	r0, r2
 801165c:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 801165e:	4a58      	ldr	r2, [pc, #352]	; (80117c0 <sensingRead+0x754>)
 8011660:	4b58      	ldr	r3, [pc, #352]	; (80117c4 <sensingRead+0x758>)
 8011662:	f7f0 fa3d 	bl	8001ae0 <__aeabi_ddiv>
 8011666:	0002      	movs	r2, r0
 8011668:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 801166a:	0011      	movs	r1, r2
 801166c:	000c      	movs	r4, r1
 801166e:	2180      	movs	r1, #128	; 0x80
 8011670:	0609      	lsls	r1, r1, #24
 8011672:	4059      	eors	r1, r3
 8011674:	000d      	movs	r5, r1
			* log((float) pressureValue / ((float) pressureReference * 100));
 8011676:	4b4d      	ldr	r3, [pc, #308]	; (80117ac <sensingRead+0x740>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	0018      	movs	r0, r3
 801167c:	f7ef fe8a 	bl	8001394 <__aeabi_ui2f>
 8011680:	1c06      	adds	r6, r0, #0
 8011682:	4b51      	ldr	r3, [pc, #324]	; (80117c8 <sensingRead+0x75c>)
 8011684:	881b      	ldrh	r3, [r3, #0]
 8011686:	b21b      	sxth	r3, r3
 8011688:	0018      	movs	r0, r3
 801168a:	f7ef fe3d 	bl	8001308 <__aeabi_i2f>
 801168e:	1c03      	adds	r3, r0, #0
 8011690:	494e      	ldr	r1, [pc, #312]	; (80117cc <sensingRead+0x760>)
 8011692:	1c18      	adds	r0, r3, #0
 8011694:	f7ef fb36 	bl	8000d04 <__aeabi_fmul>
 8011698:	1c03      	adds	r3, r0, #0
 801169a:	1c19      	adds	r1, r3, #0
 801169c:	1c30      	adds	r0, r6, #0
 801169e:	f7ef f967 	bl	8000970 <__aeabi_fdiv>
 80116a2:	1c03      	adds	r3, r0, #0
 80116a4:	1c18      	adds	r0, r3, #0
 80116a6:	f7f1 fcc9 	bl	800303c <__aeabi_f2d>
 80116aa:	0002      	movs	r2, r0
 80116ac:	000b      	movs	r3, r1
 80116ae:	0010      	movs	r0, r2
 80116b0:	0019      	movs	r1, r3
 80116b2:	f002 ffbd 	bl	8014630 <log>
 80116b6:	0002      	movs	r2, r0
 80116b8:	000b      	movs	r3, r1
 80116ba:	0020      	movs	r0, r4
 80116bc:	0029      	movs	r1, r5
 80116be:	f7f0 fe15 	bl	80022ec <__aeabi_dmul>
 80116c2:	0002      	movs	r2, r0
 80116c4:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 80116c6:	0010      	movs	r0, r2
 80116c8:	0019      	movs	r1, r3
 80116ca:	f7f1 fc2b 	bl	8002f24 <__aeabi_d2iz>
 80116ce:	0002      	movs	r2, r0
 80116d0:	4b3f      	ldr	r3, [pc, #252]	; (80117d0 <sensingRead+0x764>)
 80116d2:	601a      	str	r2, [r3, #0]

	pressureValue = pressureValue / 100;
 80116d4:	4b35      	ldr	r3, [pc, #212]	; (80117ac <sensingRead+0x740>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2164      	movs	r1, #100	; 0x64
 80116da:	0018      	movs	r0, r3
 80116dc:	f7ee fd1e 	bl	800011c <__udivsi3>
 80116e0:	0003      	movs	r3, r0
 80116e2:	001a      	movs	r2, r3
 80116e4:	4b31      	ldr	r3, [pc, #196]	; (80117ac <sensingRead+0x740>)
 80116e6:	601a      	str	r2, [r3, #0]

	//								LIS3MDL READINGS

	//magnetometer data
	uint8_t magnetXLSB = 0;
 80116e8:	2309      	movs	r3, #9
 80116ea:	2208      	movs	r2, #8
 80116ec:	4694      	mov	ip, r2
 80116ee:	44bc      	add	ip, r7
 80116f0:	4463      	add	r3, ip
 80116f2:	2200      	movs	r2, #0
 80116f4:	701a      	strb	r2, [r3, #0]
	uint8_t magnetXMSB = 0;
 80116f6:	2308      	movs	r3, #8
 80116f8:	2208      	movs	r2, #8
 80116fa:	4694      	mov	ip, r2
 80116fc:	44bc      	add	ip, r7
 80116fe:	4463      	add	r3, ip
 8011700:	2200      	movs	r2, #0
 8011702:	701a      	strb	r2, [r3, #0]

	uint8_t magnetYLSB = 0;
 8011704:	230f      	movs	r3, #15
 8011706:	18fb      	adds	r3, r7, r3
 8011708:	2200      	movs	r2, #0
 801170a:	701a      	strb	r2, [r3, #0]
	uint8_t magnetYMSB = 0;
 801170c:	230e      	movs	r3, #14
 801170e:	18fb      	adds	r3, r7, r3
 8011710:	2200      	movs	r2, #0
 8011712:	701a      	strb	r2, [r3, #0]

	int16_t magneticFieldXADC;
	int16_t magneticFieldYADC;

	if (HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 8011714:	4b21      	ldr	r3, [pc, #132]	; (801179c <sensingRead+0x730>)
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	481d      	ldr	r0, [pc, #116]	; (8011790 <sensingRead+0x724>)
 801171a:	9302      	str	r3, [sp, #8]
 801171c:	2301      	movs	r3, #1
 801171e:	9301      	str	r3, [sp, #4]
 8011720:	4b2c      	ldr	r3, [pc, #176]	; (80117d4 <sensingRead+0x768>)
 8011722:	9300      	str	r3, [sp, #0]
 8011724:	2301      	movs	r3, #1
 8011726:	2222      	movs	r2, #34	; 0x22
 8011728:	2138      	movs	r1, #56	; 0x38
 801172a:	f7f3 fd1b 	bl	8005164 <HAL_I2C_Mem_Write>
 801172e:	1e03      	subs	r3, r0, #0
 8011730:	d001      	beq.n	8011736 <sensingRead+0x6ca>
			&ctrlMagnetometerContinous, 1, i2cTimeout) != HAL_OK) {
		Error_Handler();
 8011732:	f7ff f877 	bl	8010824 <Error_Handler>
	};

	HAL_Delay(20);
 8011736:	2014      	movs	r0, #20
 8011738:	f7f1 fee6 	bl	8003508 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_L, 1, &magnetXLSB, 1,
 801173c:	4b17      	ldr	r3, [pc, #92]	; (801179c <sensingRead+0x730>)
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	4813      	ldr	r0, [pc, #76]	; (8011790 <sensingRead+0x724>)
 8011742:	9302      	str	r3, [sp, #8]
 8011744:	2301      	movs	r3, #1
 8011746:	9301      	str	r3, [sp, #4]
 8011748:	2409      	movs	r4, #9
 801174a:	2608      	movs	r6, #8
 801174c:	19bb      	adds	r3, r7, r6
 801174e:	191b      	adds	r3, r3, r4
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	2301      	movs	r3, #1
 8011754:	2228      	movs	r2, #40	; 0x28
 8011756:	2138      	movs	r1, #56	; 0x38
 8011758:	f7f3 fe32 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1, &magnetXMSB, 1,
 801175c:	4b0f      	ldr	r3, [pc, #60]	; (801179c <sensingRead+0x730>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	480b      	ldr	r0, [pc, #44]	; (8011790 <sensingRead+0x724>)
 8011762:	9302      	str	r3, [sp, #8]
 8011764:	2301      	movs	r3, #1
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	2508      	movs	r5, #8
 801176a:	19bb      	adds	r3, r7, r6
 801176c:	195b      	adds	r3, r3, r5
 801176e:	9300      	str	r3, [sp, #0]
 8011770:	2301      	movs	r3, #1
 8011772:	2229      	movs	r2, #41	; 0x29
 8011774:	2138      	movs	r1, #56	; 0x38
 8011776:	f7f3 fe23 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_L, 1, &magnetYLSB, 1,
 801177a:	4b08      	ldr	r3, [pc, #32]	; (801179c <sensingRead+0x730>)
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	4804      	ldr	r0, [pc, #16]	; (8011790 <sensingRead+0x724>)
 8011780:	9302      	str	r3, [sp, #8]
 8011782:	2301      	movs	r3, #1
 8011784:	e028      	b.n	80117d8 <sensingRead+0x76c>
 8011786:	46c0      	nop			; (mov r8, r8)
 8011788:	200006ee 	.word	0x200006ee
 801178c:	200001fe 	.word	0x200001fe
 8011790:	2000021c 	.word	0x2000021c
 8011794:	2000002e 	.word	0x2000002e
 8011798:	2000002d 	.word	0x2000002d
 801179c:	20000042 	.word	0x20000042
 80117a0:	2000020c 	.word	0x2000020c
 80117a4:	20000030 	.word	0x20000030
 80117a8:	200003a8 	.word	0x200003a8
 80117ac:	20000634 	.word	0x20000634
 80117b0:	66666666 	.word	0x66666666
 80117b4:	40711266 	.word	0x40711266
 80117b8:	9ba5e354 	.word	0x9ba5e354
 80117bc:	4020a0c4 	.word	0x4020a0c4
 80117c0:	db22d0e5 	.word	0xdb22d0e5
 80117c4:	3fd27ef9 	.word	0x3fd27ef9
 80117c8:	20000032 	.word	0x20000032
 80117cc:	42c80000 	.word	0x42c80000
 80117d0:	2000063c 	.word	0x2000063c
 80117d4:	200001bd 	.word	0x200001bd
 80117d8:	9301      	str	r3, [sp, #4]
 80117da:	230f      	movs	r3, #15
 80117dc:	18fb      	adds	r3, r7, r3
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	2301      	movs	r3, #1
 80117e2:	222a      	movs	r2, #42	; 0x2a
 80117e4:	2138      	movs	r1, #56	; 0x38
 80117e6:	f7f3 fdeb 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_H, 1, &magnetYMSB, 1,
 80117ea:	4b91      	ldr	r3, [pc, #580]	; (8011a30 <sensingRead+0x9c4>)
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	4891      	ldr	r0, [pc, #580]	; (8011a34 <sensingRead+0x9c8>)
 80117f0:	9302      	str	r3, [sp, #8]
 80117f2:	2301      	movs	r3, #1
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	230e      	movs	r3, #14
 80117f8:	18fb      	adds	r3, r7, r3
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	2301      	movs	r3, #1
 80117fe:	222b      	movs	r2, #43	; 0x2b
 8011800:	2138      	movs	r1, #56	; 0x38
 8011802:	f7f3 fddd 	bl	80053c0 <HAL_I2C_Mem_Read>
			i2cTimeout);

	magneticFieldXADC = (int16_t) magnetXMSB << 8 | (int16_t) magnetXLSB;
 8011806:	19ba      	adds	r2, r7, r6
 8011808:	1953      	adds	r3, r2, r5
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	021b      	lsls	r3, r3, #8
 801180e:	b219      	sxth	r1, r3
 8011810:	19ba      	adds	r2, r7, r6
 8011812:	1913      	adds	r3, r2, r4
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	b21a      	sxth	r2, r3
 8011818:	2016      	movs	r0, #22
 801181a:	19bc      	adds	r4, r7, r6
 801181c:	1823      	adds	r3, r4, r0
 801181e:	430a      	orrs	r2, r1
 8011820:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = (int16_t) magnetYMSB << 8 | (int16_t) magnetYLSB;
 8011822:	230e      	movs	r3, #14
 8011824:	18fb      	adds	r3, r7, r3
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	021b      	lsls	r3, r3, #8
 801182a:	b219      	sxth	r1, r3
 801182c:	230f      	movs	r3, #15
 801182e:	18fb      	adds	r3, r7, r3
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	b21a      	sxth	r2, r3
 8011834:	2414      	movs	r4, #20
 8011836:	19bb      	adds	r3, r7, r6
 8011838:	191b      	adds	r3, r3, r4
 801183a:	430a      	orrs	r2, r1
 801183c:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL OFFSET CORRECTION

//	//for 4 Gs
	magneticFieldXADC = magneticFieldXADC + offsetMagnetometerX;
 801183e:	4b7e      	ldr	r3, [pc, #504]	; (8011a38 <sensingRead+0x9cc>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	b29a      	uxth	r2, r3
 8011844:	19bb      	adds	r3, r7, r6
 8011846:	181b      	adds	r3, r3, r0
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	18d3      	adds	r3, r2, r3
 801184c:	b29a      	uxth	r2, r3
 801184e:	19bb      	adds	r3, r7, r6
 8011850:	181b      	adds	r3, r3, r0
 8011852:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = magneticFieldYADC + offsetMagnetometerY;
 8011854:	4b79      	ldr	r3, [pc, #484]	; (8011a3c <sensingRead+0x9d0>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	b29a      	uxth	r2, r3
 801185a:	19bb      	adds	r3, r7, r6
 801185c:	191b      	adds	r3, r3, r4
 801185e:	881b      	ldrh	r3, [r3, #0]
 8011860:	18d3      	adds	r3, r2, r3
 8011862:	b29a      	uxth	r2, r3
 8011864:	19bb      	adds	r3, r7, r6
 8011866:	191b      	adds	r3, r3, r4
 8011868:	801a      	strh	r2, [r3, #0]
//	magneticFieldYADC = 0;

	//								LIS3MDL DECREASE VALUE

//	uint16_t magneticFieldDivider = 270;
	uint16_t magneticFieldDivider = 130;
 801186a:	2512      	movs	r5, #18
 801186c:	19bb      	adds	r3, r7, r6
 801186e:	195b      	adds	r3, r3, r5
 8011870:	2282      	movs	r2, #130	; 0x82
 8011872:	801a      	strh	r2, [r3, #0]
//	if (magneticFieldY < -12)
//		magneticFieldY = -12;

//	new method
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
			/ magneticFieldDivider;
 8011874:	19bb      	adds	r3, r7, r6
 8011876:	181b      	adds	r3, r3, r0
 8011878:	2200      	movs	r2, #0
 801187a:	5e9a      	ldrsh	r2, [r3, r2]
 801187c:	19bb      	adds	r3, r7, r6
 801187e:	195b      	adds	r3, r3, r5
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	0019      	movs	r1, r3
 8011884:	0010      	movs	r0, r2
 8011886:	f7ee fcd3 	bl	8000230 <__divsi3>
 801188a:	0003      	movs	r3, r0
 801188c:	0019      	movs	r1, r3
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
 801188e:	4b6c      	ldr	r3, [pc, #432]	; (8011a40 <sensingRead+0x9d4>)
 8011890:	2200      	movs	r2, #0
 8011892:	5e9b      	ldrsh	r3, [r3, r2]
 8011894:	001a      	movs	r2, r3
 8011896:	b209      	sxth	r1, r1
 8011898:	4b6a      	ldr	r3, [pc, #424]	; (8011a44 <sensingRead+0x9d8>)
 801189a:	0052      	lsls	r2, r2, #1
 801189c:	52d1      	strh	r1, [r2, r3]
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
			/ magneticFieldDivider;
 801189e:	19bb      	adds	r3, r7, r6
 80118a0:	191b      	adds	r3, r3, r4
 80118a2:	2200      	movs	r2, #0
 80118a4:	5e9a      	ldrsh	r2, [r3, r2]
 80118a6:	19bb      	adds	r3, r7, r6
 80118a8:	195b      	adds	r3, r3, r5
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	0019      	movs	r1, r3
 80118ae:	0010      	movs	r0, r2
 80118b0:	f7ee fcbe 	bl	8000230 <__divsi3>
 80118b4:	0003      	movs	r3, r0
 80118b6:	0019      	movs	r1, r3
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
 80118b8:	4b61      	ldr	r3, [pc, #388]	; (8011a40 <sensingRead+0x9d4>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	5e9b      	ldrsh	r3, [r3, r2]
 80118be:	001a      	movs	r2, r3
 80118c0:	b209      	sxth	r1, r1
 80118c2:	4b61      	ldr	r3, [pc, #388]	; (8011a48 <sensingRead+0x9dc>)
 80118c4:	0052      	lsls	r2, r2, #1
 80118c6:	52d1      	strh	r1, [r2, r3]

	magneticFieldMinX = 0;
 80118c8:	4b60      	ldr	r3, [pc, #384]	; (8011a4c <sensingRead+0x9e0>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxX = 0;
 80118ce:	4b60      	ldr	r3, [pc, #384]	; (8011a50 <sensingRead+0x9e4>)
 80118d0:	2200      	movs	r2, #0
 80118d2:	801a      	strh	r2, [r3, #0]
	magneticFieldMinY = 0;
 80118d4:	4b5f      	ldr	r3, [pc, #380]	; (8011a54 <sensingRead+0x9e8>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxY = 0;
 80118da:	4b5f      	ldr	r3, [pc, #380]	; (8011a58 <sensingRead+0x9ec>)
 80118dc:	2200      	movs	r2, #0
 80118de:	801a      	strh	r2, [r3, #0]

	//finx max and min value

	magneticFieldMaxX = findMax(magneticFieldContainerX,
 80118e0:	4b58      	ldr	r3, [pc, #352]	; (8011a44 <sensingRead+0x9d8>)
 80118e2:	2164      	movs	r1, #100	; 0x64
 80118e4:	0018      	movs	r0, r3
 80118e6:	f000 fb19 	bl	8011f1c <findMax>
 80118ea:	0003      	movs	r3, r0
 80118ec:	001a      	movs	r2, r3
 80118ee:	4b58      	ldr	r3, [pc, #352]	; (8011a50 <sensingRead+0x9e4>)
 80118f0:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinX = findMin(magneticFieldContainerX,
 80118f2:	4b54      	ldr	r3, [pc, #336]	; (8011a44 <sensingRead+0x9d8>)
 80118f4:	2164      	movs	r1, #100	; 0x64
 80118f6:	0018      	movs	r0, r3
 80118f8:	f000 fb44 	bl	8011f84 <findMin>
 80118fc:	0003      	movs	r3, r0
 80118fe:	001a      	movs	r2, r3
 8011900:	4b52      	ldr	r3, [pc, #328]	; (8011a4c <sensingRead+0x9e0>)
 8011902:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldMaxY = findMax(magneticFieldContainerY,
 8011904:	4b50      	ldr	r3, [pc, #320]	; (8011a48 <sensingRead+0x9dc>)
 8011906:	2164      	movs	r1, #100	; 0x64
 8011908:	0018      	movs	r0, r3
 801190a:	f000 fb07 	bl	8011f1c <findMax>
 801190e:	0003      	movs	r3, r0
 8011910:	001a      	movs	r2, r3
 8011912:	4b51      	ldr	r3, [pc, #324]	; (8011a58 <sensingRead+0x9ec>)
 8011914:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinY = findMin(magneticFieldContainerY,
 8011916:	4b4c      	ldr	r3, [pc, #304]	; (8011a48 <sensingRead+0x9dc>)
 8011918:	2164      	movs	r1, #100	; 0x64
 801191a:	0018      	movs	r0, r3
 801191c:	f000 fb32 	bl	8011f84 <findMin>
 8011920:	0003      	movs	r3, r0
 8011922:	001a      	movs	r2, r3
 8011924:	4b4b      	ldr	r3, [pc, #300]	; (8011a54 <sensingRead+0x9e8>)
 8011926:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldCenterX = (magneticFieldMaxX + magneticFieldMinX) / 2;
 8011928:	4b49      	ldr	r3, [pc, #292]	; (8011a50 <sensingRead+0x9e4>)
 801192a:	2200      	movs	r2, #0
 801192c:	5e9b      	ldrsh	r3, [r3, r2]
 801192e:	001a      	movs	r2, r3
 8011930:	4b46      	ldr	r3, [pc, #280]	; (8011a4c <sensingRead+0x9e0>)
 8011932:	2100      	movs	r1, #0
 8011934:	5e5b      	ldrsh	r3, [r3, r1]
 8011936:	18d3      	adds	r3, r2, r3
 8011938:	2b00      	cmp	r3, #0
 801193a:	da00      	bge.n	801193e <sensingRead+0x8d2>
 801193c:	3301      	adds	r3, #1
 801193e:	105b      	asrs	r3, r3, #1
 8011940:	b21a      	sxth	r2, r3
 8011942:	4b46      	ldr	r3, [pc, #280]	; (8011a5c <sensingRead+0x9f0>)
 8011944:	801a      	strh	r2, [r3, #0]
	magneticFieldCenterY = (magneticFieldMaxY + magneticFieldMinY) / 2;
 8011946:	4b44      	ldr	r3, [pc, #272]	; (8011a58 <sensingRead+0x9ec>)
 8011948:	2200      	movs	r2, #0
 801194a:	5e9b      	ldrsh	r3, [r3, r2]
 801194c:	001a      	movs	r2, r3
 801194e:	4b41      	ldr	r3, [pc, #260]	; (8011a54 <sensingRead+0x9e8>)
 8011950:	2100      	movs	r1, #0
 8011952:	5e5b      	ldrsh	r3, [r3, r1]
 8011954:	18d3      	adds	r3, r2, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	da00      	bge.n	801195c <sensingRead+0x8f0>
 801195a:	3301      	adds	r3, #1
 801195c:	105b      	asrs	r3, r3, #1
 801195e:	b21a      	sxth	r2, r3
 8011960:	4b3f      	ldr	r3, [pc, #252]	; (8011a60 <sensingRead+0x9f4>)
 8011962:	801a      	strh	r2, [r3, #0]

	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 8011964:	4b36      	ldr	r3, [pc, #216]	; (8011a40 <sensingRead+0x9d4>)
 8011966:	2200      	movs	r2, #0
 8011968:	5e9b      	ldrsh	r3, [r3, r2]
 801196a:	001a      	movs	r2, r3
 801196c:	4b35      	ldr	r3, [pc, #212]	; (8011a44 <sensingRead+0x9d8>)
 801196e:	0052      	lsls	r2, r2, #1
 8011970:	5ed3      	ldrsh	r3, [r2, r3]
 8011972:	b29a      	uxth	r2, r3
			- magneticFieldCenterX;
 8011974:	4b39      	ldr	r3, [pc, #228]	; (8011a5c <sensingRead+0x9f0>)
 8011976:	2100      	movs	r1, #0
 8011978:	5e5b      	ldrsh	r3, [r3, r1]
 801197a:	b29b      	uxth	r3, r3
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	b29b      	uxth	r3, r3
 8011980:	b21a      	sxth	r2, r3
	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 8011982:	4b38      	ldr	r3, [pc, #224]	; (8011a64 <sensingRead+0x9f8>)
 8011984:	801a      	strh	r2, [r3, #0]
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 8011986:	4b2e      	ldr	r3, [pc, #184]	; (8011a40 <sensingRead+0x9d4>)
 8011988:	2200      	movs	r2, #0
 801198a:	5e9b      	ldrsh	r3, [r3, r2]
 801198c:	001a      	movs	r2, r3
 801198e:	4b2e      	ldr	r3, [pc, #184]	; (8011a48 <sensingRead+0x9dc>)
 8011990:	0052      	lsls	r2, r2, #1
 8011992:	5ed3      	ldrsh	r3, [r2, r3]
 8011994:	b29a      	uxth	r2, r3
			- magneticFieldCenterY;
 8011996:	4b32      	ldr	r3, [pc, #200]	; (8011a60 <sensingRead+0x9f4>)
 8011998:	2100      	movs	r1, #0
 801199a:	5e5b      	ldrsh	r3, [r3, r1]
 801199c:	b29b      	uxth	r3, r3
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	b21a      	sxth	r2, r3
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 80119a4:	4b30      	ldr	r3, [pc, #192]	; (8011a68 <sensingRead+0x9fc>)
 80119a6:	801a      	strh	r2, [r3, #0]

	if (magneticFieldX > 18)
 80119a8:	4b2e      	ldr	r3, [pc, #184]	; (8011a64 <sensingRead+0x9f8>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	5e9b      	ldrsh	r3, [r3, r2]
 80119ae:	2b12      	cmp	r3, #18
 80119b0:	dd02      	ble.n	80119b8 <sensingRead+0x94c>
		magneticFieldX = 18;
 80119b2:	4b2c      	ldr	r3, [pc, #176]	; (8011a64 <sensingRead+0x9f8>)
 80119b4:	2212      	movs	r2, #18
 80119b6:	801a      	strh	r2, [r3, #0]
	if (magneticFieldX < -18)
 80119b8:	4b2a      	ldr	r3, [pc, #168]	; (8011a64 <sensingRead+0x9f8>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	5e9b      	ldrsh	r3, [r3, r2]
 80119be:	3312      	adds	r3, #18
 80119c0:	da03      	bge.n	80119ca <sensingRead+0x95e>
		magneticFieldX = -18;
 80119c2:	4b28      	ldr	r3, [pc, #160]	; (8011a64 <sensingRead+0x9f8>)
 80119c4:	2212      	movs	r2, #18
 80119c6:	4252      	negs	r2, r2
 80119c8:	801a      	strh	r2, [r3, #0]

	if (magneticFieldY > 12)
 80119ca:	4b27      	ldr	r3, [pc, #156]	; (8011a68 <sensingRead+0x9fc>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	5e9b      	ldrsh	r3, [r3, r2]
 80119d0:	2b0c      	cmp	r3, #12
 80119d2:	dd02      	ble.n	80119da <sensingRead+0x96e>
		magneticFieldY = 12;
 80119d4:	4b24      	ldr	r3, [pc, #144]	; (8011a68 <sensingRead+0x9fc>)
 80119d6:	220c      	movs	r2, #12
 80119d8:	801a      	strh	r2, [r3, #0]
	if (magneticFieldY < -12)
 80119da:	4b23      	ldr	r3, [pc, #140]	; (8011a68 <sensingRead+0x9fc>)
 80119dc:	2200      	movs	r2, #0
 80119de:	5e9b      	ldrsh	r3, [r3, r2]
 80119e0:	330c      	adds	r3, #12
 80119e2:	da03      	bge.n	80119ec <sensingRead+0x980>
		magneticFieldY = -12;
 80119e4:	4b20      	ldr	r3, [pc, #128]	; (8011a68 <sensingRead+0x9fc>)
 80119e6:	220c      	movs	r2, #12
 80119e8:	4252      	negs	r2, r2
 80119ea:	801a      	strh	r2, [r3, #0]

	magneticFieldCounter++;
 80119ec:	4b14      	ldr	r3, [pc, #80]	; (8011a40 <sensingRead+0x9d4>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	5e9b      	ldrsh	r3, [r3, r2]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	3301      	adds	r3, #1
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	b21a      	sxth	r2, r3
 80119fa:	4b11      	ldr	r3, [pc, #68]	; (8011a40 <sensingRead+0x9d4>)
 80119fc:	801a      	strh	r2, [r3, #0]
	if (magneticFieldCounter >= MAGNETIC_FIELD_MEASURES)
 80119fe:	4b10      	ldr	r3, [pc, #64]	; (8011a40 <sensingRead+0x9d4>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	5e9b      	ldrsh	r3, [r3, r2]
 8011a04:	2b63      	cmp	r3, #99	; 0x63
 8011a06:	dd02      	ble.n	8011a0e <sensingRead+0x9a2>
		magneticFieldCounter = 0;
 8011a08:	4b0d      	ldr	r3, [pc, #52]	; (8011a40 <sensingRead+0x9d4>)
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL SEND SLEEP COMMAND

	HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 8011a0e:	4b08      	ldr	r3, [pc, #32]	; (8011a30 <sensingRead+0x9c4>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	4808      	ldr	r0, [pc, #32]	; (8011a34 <sensingRead+0x9c8>)
 8011a14:	9302      	str	r3, [sp, #8]
 8011a16:	2301      	movs	r3, #1
 8011a18:	9301      	str	r3, [sp, #4]
 8011a1a:	4b14      	ldr	r3, [pc, #80]	; (8011a6c <sensingRead+0xa00>)
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	2301      	movs	r3, #1
 8011a20:	2222      	movs	r2, #34	; 0x22
 8011a22:	2138      	movs	r1, #56	; 0x38
 8011a24:	f7f3 fb9e 	bl	8005164 <HAL_I2C_Mem_Write>
			&ctrlMagnetometerPowerDown, 1, i2cTimeout);

}
 8011a28:	46c0      	nop			; (mov r8, r8)
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	b011      	add	sp, #68	; 0x44
 8011a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a30:	20000042 	.word	0x20000042
 8011a34:	2000021c 	.word	0x2000021c
 8011a38:	200001c0 	.word	0x200001c0
 8011a3c:	200001c4 	.word	0x200001c4
 8011a40:	200006ec 	.word	0x200006ec
 8011a44:	2000026c 	.word	0x2000026c
 8011a48:	200004c4 	.word	0x200004c4
 8011a4c:	200006f6 	.word	0x200006f6
 8011a50:	2000058c 	.word	0x2000058c
 8011a54:	200003ba 	.word	0x200003ba
 8011a58:	200001f8 	.word	0x200001f8
 8011a5c:	20000616 	.word	0x20000616
 8011a60:	200006f8 	.word	0x200006f8
 8011a64:	2000062a 	.word	0x2000062a
 8011a68:	20000590 	.word	0x20000590
 8011a6c:	2000002f 	.word	0x2000002f

08011a70 <BME280_compensate_T_int32>:

//compensation formulas from datasheet
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T) {
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	10da      	asrs	r2, r3, #3
 8011a7c:	4b16      	ldr	r3, [pc, #88]	; (8011ad8 <BME280_compensate_T_int32+0x68>)
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	005b      	lsls	r3, r3, #1
 8011a82:	1ad3      	subs	r3, r2, r3
			* ((BME280_S32_t) dig_T2)) >> 11;
 8011a84:	4a15      	ldr	r2, [pc, #84]	; (8011adc <BME280_compensate_T_int32+0x6c>)
 8011a86:	2100      	movs	r1, #0
 8011a88:	5e52      	ldrsh	r2, [r2, r1]
 8011a8a:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 8011a8c:	12db      	asrs	r3, r3, #11
 8011a8e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	111b      	asrs	r3, r3, #4
 8011a94:	4a10      	ldr	r2, [pc, #64]	; (8011ad8 <BME280_compensate_T_int32+0x68>)
 8011a96:	8812      	ldrh	r2, [r2, #0]
 8011a98:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BME280_S32_t) dig_T1))) >> 12)
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	1112      	asrs	r2, r2, #4
 8011a9e:	490e      	ldr	r1, [pc, #56]	; (8011ad8 <BME280_compensate_T_int32+0x68>)
 8011aa0:	8809      	ldrh	r1, [r1, #0]
 8011aa2:	1a52      	subs	r2, r2, r1
 8011aa4:	4353      	muls	r3, r2
 8011aa6:	131b      	asrs	r3, r3, #12
			* ((BME280_S32_t) dig_T3)) >> 14;
 8011aa8:	4a0d      	ldr	r2, [pc, #52]	; (8011ae0 <BME280_compensate_T_int32+0x70>)
 8011aaa:	2100      	movs	r1, #0
 8011aac:	5e52      	ldrsh	r2, [r2, r1]
 8011aae:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 8011ab0:	139b      	asrs	r3, r3, #14
 8011ab2:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8011ab4:	697a      	ldr	r2, [r7, #20]
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	18d2      	adds	r2, r2, r3
 8011aba:	4b0a      	ldr	r3, [pc, #40]	; (8011ae4 <BME280_compensate_T_int32+0x74>)
 8011abc:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8011abe:	4b09      	ldr	r3, [pc, #36]	; (8011ae4 <BME280_compensate_T_int32+0x74>)
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	0013      	movs	r3, r2
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	189b      	adds	r3, r3, r2
 8011ac8:	3380      	adds	r3, #128	; 0x80
 8011aca:	121b      	asrs	r3, r3, #8
 8011acc:	60fb      	str	r3, [r7, #12]
	return T;
 8011ace:	68fb      	ldr	r3, [r7, #12]
}
 8011ad0:	0018      	movs	r0, r3
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	b006      	add	sp, #24
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	20000204 	.word	0x20000204
 8011adc:	20000378 	.word	0x20000378
 8011ae0:	200006f2 	.word	0x200006f2
 8011ae4:	2000070c 	.word	0x2000070c

08011ae8 <BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P) {
 8011ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aea:	b0ad      	sub	sp, #180	; 0xb4
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	2394      	movs	r3, #148	; 0x94
 8011af0:	18fb      	adds	r3, r7, r3
 8011af2:	6018      	str	r0, [r3, #0]
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t) t_fine) - 128000;
 8011af4:	4bc6      	ldr	r3, [pc, #792]	; (8011e10 <BME280_compensate_P_int64+0x328>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	001c      	movs	r4, r3
 8011afa:	17db      	asrs	r3, r3, #31
 8011afc:	001d      	movs	r5, r3
 8011afe:	4ac5      	ldr	r2, [pc, #788]	; (8011e14 <BME280_compensate_P_int64+0x32c>)
 8011b00:	2301      	movs	r3, #1
 8011b02:	425b      	negs	r3, r3
 8011b04:	1912      	adds	r2, r2, r4
 8011b06:	416b      	adcs	r3, r5
 8011b08:	24a8      	movs	r4, #168	; 0xa8
 8011b0a:	1939      	adds	r1, r7, r4
 8011b0c:	600a      	str	r2, [r1, #0]
 8011b0e:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (BME280_S64_t) dig_P6;
 8011b10:	193b      	adds	r3, r7, r4
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	1939      	adds	r1, r7, r4
 8011b18:	6808      	ldr	r0, [r1, #0]
 8011b1a:	6849      	ldr	r1, [r1, #4]
 8011b1c:	f7ee fd10 	bl	8000540 <__aeabi_lmul>
 8011b20:	0002      	movs	r2, r0
 8011b22:	000b      	movs	r3, r1
 8011b24:	0010      	movs	r0, r2
 8011b26:	0019      	movs	r1, r3
 8011b28:	4bbb      	ldr	r3, [pc, #748]	; (8011e18 <BME280_compensate_P_int64+0x330>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8011b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8011b30:	17db      	asrs	r3, r3, #31
 8011b32:	657b      	str	r3, [r7, #84]	; 0x54
 8011b34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b38:	f7ee fd02 	bl	8000540 <__aeabi_lmul>
 8011b3c:	0002      	movs	r2, r0
 8011b3e:	000b      	movs	r3, r1
 8011b40:	25a0      	movs	r5, #160	; 0xa0
 8011b42:	1979      	adds	r1, r7, r5
 8011b44:	600a      	str	r2, [r1, #0]
 8011b46:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1 * (BME280_S64_t) dig_P5) << 17);
 8011b48:	4bb4      	ldr	r3, [pc, #720]	; (8011e1c <BME280_compensate_P_int64+0x334>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8011b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b50:	17db      	asrs	r3, r3, #31
 8011b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b54:	193b      	adds	r3, r7, r4
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011b5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011b5e:	f7ee fcef 	bl	8000540 <__aeabi_lmul>
 8011b62:	0002      	movs	r2, r0
 8011b64:	000b      	movs	r3, r1
 8011b66:	0bd1      	lsrs	r1, r2, #15
 8011b68:	468c      	mov	ip, r1
 8011b6a:	0458      	lsls	r0, r3, #17
 8011b6c:	268c      	movs	r6, #140	; 0x8c
 8011b6e:	19b9      	adds	r1, r7, r6
 8011b70:	6008      	str	r0, [r1, #0]
 8011b72:	19b8      	adds	r0, r7, r6
 8011b74:	6800      	ldr	r0, [r0, #0]
 8011b76:	4661      	mov	r1, ip
 8011b78:	4308      	orrs	r0, r1
 8011b7a:	19b9      	adds	r1, r7, r6
 8011b7c:	6008      	str	r0, [r1, #0]
 8011b7e:	0453      	lsls	r3, r2, #17
 8011b80:	2188      	movs	r1, #136	; 0x88
 8011b82:	187a      	adds	r2, r7, r1
 8011b84:	6013      	str	r3, [r2, #0]
 8011b86:	197b      	adds	r3, r7, r5
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	1879      	adds	r1, r7, r1
 8011b8e:	6808      	ldr	r0, [r1, #0]
 8011b90:	6849      	ldr	r1, [r1, #4]
 8011b92:	1812      	adds	r2, r2, r0
 8011b94:	414b      	adcs	r3, r1
 8011b96:	1979      	adds	r1, r7, r5
 8011b98:	600a      	str	r2, [r1, #0]
 8011b9a:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((BME280_S64_t) dig_P4) << 35);
 8011b9c:	4ba0      	ldr	r3, [pc, #640]	; (8011e20 <BME280_compensate_P_int64+0x338>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8011ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ba4:	17db      	asrs	r3, r3, #31
 8011ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011baa:	00db      	lsls	r3, r3, #3
 8011bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bae:	2300      	movs	r3, #0
 8011bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bb2:	197b      	adds	r3, r7, r5
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011bbc:	1812      	adds	r2, r2, r0
 8011bbe:	414b      	adcs	r3, r1
 8011bc0:	1979      	adds	r1, r7, r5
 8011bc2:	600a      	str	r2, [r1, #0]
 8011bc4:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 8011bc6:	193b      	adds	r3, r7, r4
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	1939      	adds	r1, r7, r4
 8011bce:	6808      	ldr	r0, [r1, #0]
 8011bd0:	6849      	ldr	r1, [r1, #4]
 8011bd2:	f7ee fcb5 	bl	8000540 <__aeabi_lmul>
 8011bd6:	0002      	movs	r2, r0
 8011bd8:	000b      	movs	r3, r1
 8011bda:	0010      	movs	r0, r2
 8011bdc:	0019      	movs	r1, r3
 8011bde:	4b91      	ldr	r3, [pc, #580]	; (8011e24 <BME280_compensate_P_int64+0x33c>)
 8011be0:	2200      	movs	r2, #0
 8011be2:	5e9b      	ldrsh	r3, [r3, r2]
 8011be4:	633b      	str	r3, [r7, #48]	; 0x30
 8011be6:	17db      	asrs	r3, r3, #31
 8011be8:	637b      	str	r3, [r7, #52]	; 0x34
 8011bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bee:	f7ee fca7 	bl	8000540 <__aeabi_lmul>
 8011bf2:	0002      	movs	r2, r0
 8011bf4:	000b      	movs	r3, r1
 8011bf6:	0619      	lsls	r1, r3, #24
 8011bf8:	0a10      	lsrs	r0, r2, #8
 8011bfa:	2580      	movs	r5, #128	; 0x80
 8011bfc:	197e      	adds	r6, r7, r5
 8011bfe:	6030      	str	r0, [r6, #0]
 8011c00:	1978      	adds	r0, r7, r5
 8011c02:	6800      	ldr	r0, [r0, #0]
 8011c04:	4308      	orrs	r0, r1
 8011c06:	1979      	adds	r1, r7, r5
 8011c08:	6008      	str	r0, [r1, #0]
 8011c0a:	121b      	asrs	r3, r3, #8
 8011c0c:	2284      	movs	r2, #132	; 0x84
 8011c0e:	18ba      	adds	r2, r7, r2
 8011c10:	6013      	str	r3, [r2, #0]
			+ ((var1 * (BME280_S64_t) dig_P2) << 12);
 8011c12:	4b85      	ldr	r3, [pc, #532]	; (8011e28 <BME280_compensate_P_int64+0x340>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	5e9b      	ldrsh	r3, [r3, r2]
 8011c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c1a:	17db      	asrs	r3, r3, #31
 8011c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c1e:	193b      	adds	r3, r7, r4
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c28:	f7ee fc8a 	bl	8000540 <__aeabi_lmul>
 8011c2c:	0002      	movs	r2, r0
 8011c2e:	000b      	movs	r3, r1
 8011c30:	0d11      	lsrs	r1, r2, #20
 8011c32:	0318      	lsls	r0, r3, #12
 8011c34:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011c36:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011c38:	4308      	orrs	r0, r1
 8011c3a:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011c3c:	0313      	lsls	r3, r2, #12
 8011c3e:	67bb      	str	r3, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 8011c40:	197b      	adds	r3, r7, r5
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011c4a:	1812      	adds	r2, r2, r0
 8011c4c:	414b      	adcs	r3, r1
 8011c4e:	1939      	adds	r1, r7, r4
 8011c50:	600a      	str	r2, [r1, #0]
 8011c52:	604b      	str	r3, [r1, #4]
	var1 = (((((BME280_S64_t) 1) << 47) + var1)) * ((BME280_S64_t) dig_P1)
 8011c54:	193b      	adds	r3, r7, r4
 8011c56:	6818      	ldr	r0, [r3, #0]
 8011c58:	6859      	ldr	r1, [r3, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	2380      	movs	r3, #128	; 0x80
 8011c5e:	021b      	lsls	r3, r3, #8
 8011c60:	1880      	adds	r0, r0, r2
 8011c62:	4159      	adcs	r1, r3
 8011c64:	4b71      	ldr	r3, [pc, #452]	; (8011e2c <BME280_compensate_P_int64+0x344>)
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	623b      	str	r3, [r7, #32]
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8011c6e:	6a3a      	ldr	r2, [r7, #32]
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	f7ee fc65 	bl	8000540 <__aeabi_lmul>
 8011c76:	0002      	movs	r2, r0
 8011c78:	000b      	movs	r3, r1
 8011c7a:	1059      	asrs	r1, r3, #1
 8011c7c:	1938      	adds	r0, r7, r4
 8011c7e:	6001      	str	r1, [r0, #0]
 8011c80:	17db      	asrs	r3, r3, #31
 8011c82:	21ac      	movs	r1, #172	; 0xac
 8011c84:	187a      	adds	r2, r7, r1
 8011c86:	6013      	str	r3, [r2, #0]
			>> 33;
	if (var1 == 0) {
 8011c88:	193b      	adds	r3, r7, r4
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	187b      	adds	r3, r7, r1
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	431a      	orrs	r2, r3
 8011c92:	d101      	bne.n	8011c98 <BME280_compensate_P_int64+0x1b0>
		return 0; // avoid exception caused by division by zero
 8011c94:	2300      	movs	r3, #0
 8011c96:	e0b6      	b.n	8011e06 <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576 - adc_P;
 8011c98:	2394      	movs	r3, #148	; 0x94
 8011c9a:	18fb      	adds	r3, r7, r3
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	2380      	movs	r3, #128	; 0x80
 8011ca0:	035b      	lsls	r3, r3, #13
 8011ca2:	1a9b      	subs	r3, r3, r2
 8011ca4:	2498      	movs	r4, #152	; 0x98
 8011ca6:	193a      	adds	r2, r7, r4
 8011ca8:	6013      	str	r3, [r2, #0]
 8011caa:	17db      	asrs	r3, r3, #31
 8011cac:	259c      	movs	r5, #156	; 0x9c
 8011cae:	197a      	adds	r2, r7, r5
 8011cb0:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8011cb2:	193b      	adds	r3, r7, r4
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	105b      	asrs	r3, r3, #1
 8011cb8:	61fb      	str	r3, [r7, #28]
 8011cba:	193b      	adds	r3, r7, r4
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	07db      	lsls	r3, r3, #31
 8011cc0:	61bb      	str	r3, [r7, #24]
 8011cc2:	23a0      	movs	r3, #160	; 0xa0
 8011cc4:	18fa      	adds	r2, r7, r3
 8011cc6:	6853      	ldr	r3, [r2, #4]
 8011cc8:	6812      	ldr	r2, [r2, #0]
 8011cca:	69b8      	ldr	r0, [r7, #24]
 8011ccc:	69f9      	ldr	r1, [r7, #28]
 8011cce:	1a80      	subs	r0, r0, r2
 8011cd0:	4199      	sbcs	r1, r3
 8011cd2:	4a57      	ldr	r2, [pc, #348]	; (8011e30 <BME280_compensate_P_int64+0x348>)
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f7ee fc33 	bl	8000540 <__aeabi_lmul>
 8011cda:	0002      	movs	r2, r0
 8011cdc:	000b      	movs	r3, r1
 8011cde:	0010      	movs	r0, r2
 8011ce0:	0019      	movs	r1, r3
 8011ce2:	26a8      	movs	r6, #168	; 0xa8
 8011ce4:	19ba      	adds	r2, r7, r6
 8011ce6:	6853      	ldr	r3, [r2, #4]
 8011ce8:	6812      	ldr	r2, [r2, #0]
 8011cea:	f7ee fc05 	bl	80004f8 <__aeabi_ldivmod>
 8011cee:	0002      	movs	r2, r0
 8011cf0:	000b      	movs	r3, r1
 8011cf2:	1939      	adds	r1, r7, r4
 8011cf4:	600a      	str	r2, [r1, #0]
 8011cf6:	604b      	str	r3, [r1, #4]
	var1 = (((BME280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8011cf8:	4b4e      	ldr	r3, [pc, #312]	; (8011e34 <BME280_compensate_P_int64+0x34c>)
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8011cfe:	613b      	str	r3, [r7, #16]
 8011d00:	17db      	asrs	r3, r3, #31
 8011d02:	617b      	str	r3, [r7, #20]
 8011d04:	197a      	adds	r2, r7, r5
 8011d06:	6813      	ldr	r3, [r2, #0]
 8011d08:	04da      	lsls	r2, r3, #19
 8011d0a:	1939      	adds	r1, r7, r4
 8011d0c:	680b      	ldr	r3, [r1, #0]
 8011d0e:	0b5b      	lsrs	r3, r3, #13
 8011d10:	673b      	str	r3, [r7, #112]	; 0x70
 8011d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d14:	4313      	orrs	r3, r2
 8011d16:	673b      	str	r3, [r7, #112]	; 0x70
 8011d18:	197a      	adds	r2, r7, r5
 8011d1a:	6813      	ldr	r3, [r2, #0]
 8011d1c:	135b      	asrs	r3, r3, #13
 8011d1e:	677b      	str	r3, [r7, #116]	; 0x74
 8011d20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d24:	6938      	ldr	r0, [r7, #16]
 8011d26:	6979      	ldr	r1, [r7, #20]
 8011d28:	f7ee fc0a 	bl	8000540 <__aeabi_lmul>
 8011d2c:	0002      	movs	r2, r0
 8011d2e:	000b      	movs	r3, r1
 8011d30:	0010      	movs	r0, r2
 8011d32:	0019      	movs	r1, r3
 8011d34:	197a      	adds	r2, r7, r5
 8011d36:	6813      	ldr	r3, [r2, #0]
 8011d38:	04da      	lsls	r2, r3, #19
 8011d3a:	193b      	adds	r3, r7, r4
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	0b5b      	lsrs	r3, r3, #13
 8011d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d44:	4313      	orrs	r3, r2
 8011d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d48:	197a      	adds	r2, r7, r5
 8011d4a:	6813      	ldr	r3, [r2, #0]
 8011d4c:	135b      	asrs	r3, r3, #13
 8011d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d54:	f7ee fbf4 	bl	8000540 <__aeabi_lmul>
 8011d58:	0002      	movs	r2, r0
 8011d5a:	000b      	movs	r3, r1
 8011d5c:	01d9      	lsls	r1, r3, #7
 8011d5e:	0e50      	lsrs	r0, r2, #25
 8011d60:	4301      	orrs	r1, r0
 8011d62:	19b8      	adds	r0, r7, r6
 8011d64:	6001      	str	r1, [r0, #0]
 8011d66:	165b      	asrs	r3, r3, #25
 8011d68:	22ac      	movs	r2, #172	; 0xac
 8011d6a:	18ba      	adds	r2, r7, r2
 8011d6c:	6013      	str	r3, [r2, #0]
	var2 = (((BME280_S64_t) dig_P8) * p) >> 19;
 8011d6e:	4b32      	ldr	r3, [pc, #200]	; (8011e38 <BME280_compensate_P_int64+0x350>)
 8011d70:	2200      	movs	r2, #0
 8011d72:	5e9b      	ldrsh	r3, [r3, r2]
 8011d74:	60bb      	str	r3, [r7, #8]
 8011d76:	17db      	asrs	r3, r3, #31
 8011d78:	60fb      	str	r3, [r7, #12]
 8011d7a:	193a      	adds	r2, r7, r4
 8011d7c:	6853      	ldr	r3, [r2, #4]
 8011d7e:	6812      	ldr	r2, [r2, #0]
 8011d80:	68b8      	ldr	r0, [r7, #8]
 8011d82:	68f9      	ldr	r1, [r7, #12]
 8011d84:	f7ee fbdc 	bl	8000540 <__aeabi_lmul>
 8011d88:	0002      	movs	r2, r0
 8011d8a:	000b      	movs	r3, r1
 8011d8c:	0359      	lsls	r1, r3, #13
 8011d8e:	0cd0      	lsrs	r0, r2, #19
 8011d90:	4301      	orrs	r1, r0
 8011d92:	25a0      	movs	r5, #160	; 0xa0
 8011d94:	1978      	adds	r0, r7, r5
 8011d96:	6001      	str	r1, [r0, #0]
 8011d98:	14db      	asrs	r3, r3, #19
 8011d9a:	22a4      	movs	r2, #164	; 0xa4
 8011d9c:	18ba      	adds	r2, r7, r2
 8011d9e:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t) dig_P7) << 4);
 8011da0:	193b      	adds	r3, r7, r4
 8011da2:	6818      	ldr	r0, [r3, #0]
 8011da4:	6859      	ldr	r1, [r3, #4]
 8011da6:	19bb      	adds	r3, r7, r6
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	1880      	adds	r0, r0, r2
 8011dae:	4159      	adcs	r1, r3
 8011db0:	197b      	adds	r3, r7, r5
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	1812      	adds	r2, r2, r0
 8011db8:	414b      	adcs	r3, r1
 8011dba:	0619      	lsls	r1, r3, #24
 8011dbc:	0a10      	lsrs	r0, r2, #8
 8011dbe:	6638      	str	r0, [r7, #96]	; 0x60
 8011dc0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011dc2:	4308      	orrs	r0, r1
 8011dc4:	6638      	str	r0, [r7, #96]	; 0x60
 8011dc6:	121b      	asrs	r3, r3, #8
 8011dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8011dca:	4b1c      	ldr	r3, [pc, #112]	; (8011e3c <BME280_compensate_P_int64+0x354>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	5e9b      	ldrsh	r3, [r3, r2]
 8011dd0:	603b      	str	r3, [r7, #0]
 8011dd2:	17db      	asrs	r3, r3, #31
 8011dd4:	607b      	str	r3, [r7, #4]
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	000b      	movs	r3, r1
 8011ddc:	0f1b      	lsrs	r3, r3, #28
 8011dde:	0010      	movs	r0, r2
 8011de0:	0100      	lsls	r0, r0, #4
 8011de2:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011de4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011de6:	4318      	orrs	r0, r3
 8011de8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011dea:	000b      	movs	r3, r1
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	65bb      	str	r3, [r7, #88]	; 0x58
 8011df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011df4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011df6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011df8:	1812      	adds	r2, r2, r0
 8011dfa:	414b      	adcs	r3, r1
 8011dfc:	1939      	adds	r1, r7, r4
 8011dfe:	600a      	str	r2, [r1, #0]
 8011e00:	604b      	str	r3, [r1, #4]
	return (BME280_U32_t) p;
 8011e02:	193b      	adds	r3, r7, r4
 8011e04:	681b      	ldr	r3, [r3, #0]
}
 8011e06:	0018      	movs	r0, r3
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	b02d      	add	sp, #180	; 0xb4
 8011e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e0e:	46c0      	nop			; (mov r8, r8)
 8011e10:	2000070c 	.word	0x2000070c
 8011e14:	fffe0c00 	.word	0xfffe0c00
 8011e18:	200006fc 	.word	0x200006fc
 8011e1c:	20000626 	.word	0x20000626
 8011e20:	20000440 	.word	0x20000440
 8011e24:	2000069a 	.word	0x2000069a
 8011e28:	2000043c 	.word	0x2000043c
 8011e2c:	20000698 	.word	0x20000698
 8011e30:	00000c35 	.word	0x00000c35
 8011e34:	200006f0 	.word	0x200006f0
 8011e38:	2000069c 	.word	0x2000069c
 8011e3c:	200001fc 	.word	0x200001fc

08011e40 <BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H) {
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t) 76800));
 8011e48:	4b2c      	ldr	r3, [pc, #176]	; (8011efc <BME280_compensate_H_int32+0xbc>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4a2c      	ldr	r2, [pc, #176]	; (8011f00 <BME280_compensate_H_int32+0xc0>)
 8011e4e:	4694      	mov	ip, r2
 8011e50:	4463      	add	r3, ip
 8011e52:	60fb      	str	r3, [r7, #12]

	v_x1_u32r =
			(((((adc_H << 14) - (((BME280_S32_t) dig_H4) << 20)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	039a      	lsls	r2, r3, #14
 8011e58:	4b2a      	ldr	r3, [pc, #168]	; (8011f04 <BME280_compensate_H_int32+0xc4>)
 8011e5a:	2100      	movs	r1, #0
 8011e5c:	5e5b      	ldrsh	r3, [r3, r1]
 8011e5e:	051b      	lsls	r3, r3, #20
 8011e60:	1ad2      	subs	r2, r2, r3
					- (((BME280_S32_t) dig_H5) * v_x1_u32r))
 8011e62:	4b29      	ldr	r3, [pc, #164]	; (8011f08 <BME280_compensate_H_int32+0xc8>)
 8011e64:	2100      	movs	r1, #0
 8011e66:	5e5b      	ldrsh	r3, [r3, r1]
 8011e68:	0019      	movs	r1, r3
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	434b      	muls	r3, r1
 8011e6e:	1ad3      	subs	r3, r2, r3
					+ ((BME280_S32_t) 16384)) >> 15)
 8011e70:	2280      	movs	r2, #128	; 0x80
 8011e72:	01d2      	lsls	r2, r2, #7
 8011e74:	4694      	mov	ip, r2
 8011e76:	4463      	add	r3, ip
 8011e78:	13db      	asrs	r3, r3, #15
					* (((((((v_x1_u32r * ((BME280_S32_t) dig_H6)) >> 10)
 8011e7a:	4a24      	ldr	r2, [pc, #144]	; (8011f0c <BME280_compensate_H_int32+0xcc>)
 8011e7c:	7812      	ldrb	r2, [r2, #0]
 8011e7e:	0011      	movs	r1, r2
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	434a      	muls	r2, r1
 8011e84:	1292      	asrs	r2, r2, #10
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 8011e86:	4922      	ldr	r1, [pc, #136]	; (8011f10 <BME280_compensate_H_int32+0xd0>)
 8011e88:	7809      	ldrb	r1, [r1, #0]
 8011e8a:	0008      	movs	r0, r1
 8011e8c:	68f9      	ldr	r1, [r7, #12]
 8011e8e:	4341      	muls	r1, r0
 8011e90:	12c9      	asrs	r1, r1, #11
									+ ((BME280_S32_t) 32768))) >> 10)
 8011e92:	2080      	movs	r0, #128	; 0x80
 8011e94:	0200      	lsls	r0, r0, #8
 8011e96:	4684      	mov	ip, r0
 8011e98:	4461      	add	r1, ip
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 8011e9a:	434a      	muls	r2, r1
									+ ((BME280_S32_t) 32768))) >> 10)
 8011e9c:	1292      	asrs	r2, r2, #10
							+ ((BME280_S32_t) 2097152))
 8011e9e:	2180      	movs	r1, #128	; 0x80
 8011ea0:	0389      	lsls	r1, r1, #14
 8011ea2:	468c      	mov	ip, r1
 8011ea4:	4462      	add	r2, ip
							* ((BME280_S32_t) dig_H2) + 8192) >> 14));
 8011ea6:	491b      	ldr	r1, [pc, #108]	; (8011f14 <BME280_compensate_H_int32+0xd4>)
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	5e09      	ldrsh	r1, [r1, r0]
 8011eac:	434a      	muls	r2, r1
 8011eae:	2180      	movs	r1, #128	; 0x80
 8011eb0:	0189      	lsls	r1, r1, #6
 8011eb2:	468c      	mov	ip, r1
 8011eb4:	4462      	add	r2, ip
 8011eb6:	1392      	asrs	r2, r2, #14
	v_x1_u32r =
 8011eb8:	4353      	muls	r3, r2
 8011eba:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	13db      	asrs	r3, r3, #15
 8011ec0:	68fa      	ldr	r2, [r7, #12]
 8011ec2:	13d2      	asrs	r2, r2, #15
 8011ec4:	4353      	muls	r3, r2
 8011ec6:	11db      	asrs	r3, r3, #7
					* ((BME280_S32_t) dig_H1)) >> 4));
 8011ec8:	4a13      	ldr	r2, [pc, #76]	; (8011f18 <BME280_compensate_H_int32+0xd8>)
 8011eca:	7812      	ldrb	r2, [r2, #0]
 8011ecc:	4353      	muls	r3, r2
 8011ece:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	1ad3      	subs	r3, r2, r3
 8011ed4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	da00      	bge.n	8011ede <BME280_compensate_H_int32+0x9e>
 8011edc:	2300      	movs	r3, #0
 8011ede:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	22c8      	movs	r2, #200	; 0xc8
 8011ee4:	0552      	lsls	r2, r2, #21
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	dd01      	ble.n	8011eee <BME280_compensate_H_int32+0xae>
 8011eea:	23c8      	movs	r3, #200	; 0xc8
 8011eec:	055b      	lsls	r3, r3, #21
 8011eee:	60fb      	str	r3, [r7, #12]
	return (BME280_U32_t) (v_x1_u32r >> 12);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	131b      	asrs	r3, r3, #12
}
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	b004      	add	sp, #16
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	2000070c 	.word	0x2000070c
 8011f00:	fffed400 	.word	0xfffed400
 8011f04:	20000376 	.word	0x20000376
 8011f08:	200006a6 	.word	0x200006a6
 8011f0c:	200004c1 	.word	0x200004c1
 8011f10:	200006e1 	.word	0x200006e1
 8011f14:	20000708 	.word	0x20000708
 8011f18:	200003ae 	.word	0x200003ae

08011f1c <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	000a      	movs	r2, r1
 8011f26:	1cbb      	adds	r3, r7, #2
 8011f28:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 8011f2a:	230e      	movs	r3, #14
 8011f2c:	18fb      	adds	r3, r7, r3
 8011f2e:	4a14      	ldr	r2, [pc, #80]	; (8011f80 <findMax+0x64>)
 8011f30:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011f32:	2300      	movs	r3, #0
 8011f34:	60bb      	str	r3, [r7, #8]
 8011f36:	e015      	b.n	8011f64 <findMax+0x48>
		if (data[i] > max)
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	18d3      	adds	r3, r2, r3
 8011f40:	2200      	movs	r2, #0
 8011f42:	5e9b      	ldrsh	r3, [r3, r2]
 8011f44:	210e      	movs	r1, #14
 8011f46:	187a      	adds	r2, r7, r1
 8011f48:	2000      	movs	r0, #0
 8011f4a:	5e12      	ldrsh	r2, [r2, r0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	da06      	bge.n	8011f5e <findMax+0x42>
			max = data[i];
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	18d2      	adds	r2, r2, r3
 8011f58:	187b      	adds	r3, r7, r1
 8011f5a:	8812      	ldrh	r2, [r2, #0]
 8011f5c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	3301      	adds	r3, #1
 8011f62:	60bb      	str	r3, [r7, #8]
 8011f64:	1cbb      	adds	r3, r7, #2
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	68ba      	ldr	r2, [r7, #8]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d3e4      	bcc.n	8011f38 <findMax+0x1c>
	}

	return max;
 8011f6e:	230e      	movs	r3, #14
 8011f70:	18fb      	adds	r3, r7, r3
 8011f72:	2200      	movs	r2, #0
 8011f74:	5e9b      	ldrsh	r3, [r3, r2]

}
 8011f76:	0018      	movs	r0, r3
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	b004      	add	sp, #16
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	46c0      	nop			; (mov r8, r8)
 8011f80:	ffff8000 	.word	0xffff8000

08011f84 <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	000a      	movs	r2, r1
 8011f8e:	1cbb      	adds	r3, r7, #2
 8011f90:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 8011f92:	230e      	movs	r3, #14
 8011f94:	18fb      	adds	r3, r7, r3
 8011f96:	4a14      	ldr	r2, [pc, #80]	; (8011fe8 <findMin+0x64>)
 8011f98:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	60bb      	str	r3, [r7, #8]
 8011f9e:	e015      	b.n	8011fcc <findMin+0x48>
		if (data[i] < min)
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	005b      	lsls	r3, r3, #1
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	18d3      	adds	r3, r2, r3
 8011fa8:	2200      	movs	r2, #0
 8011faa:	5e9b      	ldrsh	r3, [r3, r2]
 8011fac:	210e      	movs	r1, #14
 8011fae:	187a      	adds	r2, r7, r1
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	5e12      	ldrsh	r2, [r2, r0]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	dd06      	ble.n	8011fc6 <findMin+0x42>
			min = data[i];
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	005b      	lsls	r3, r3, #1
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	18d2      	adds	r2, r2, r3
 8011fc0:	187b      	adds	r3, r7, r1
 8011fc2:	8812      	ldrh	r2, [r2, #0]
 8011fc4:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	3301      	adds	r3, #1
 8011fca:	60bb      	str	r3, [r7, #8]
 8011fcc:	1cbb      	adds	r3, r7, #2
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	68ba      	ldr	r2, [r7, #8]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d3e4      	bcc.n	8011fa0 <findMin+0x1c>
	}

	return min;
 8011fd6:	230e      	movs	r3, #14
 8011fd8:	18fb      	adds	r3, r7, r3
 8011fda:	2200      	movs	r2, #0
 8011fdc:	5e9b      	ldrsh	r3, [r3, r2]
}
 8011fde:	0018      	movs	r0, r3
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	b004      	add	sp, #16
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	46c0      	nop			; (mov r8, r8)
 8011fe8:	00007fff 	.word	0x00007fff

08011fec <settingsDrawData>:
		80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150,
		155, 160, 165, 170, 175, 180, 185, 190, 195 };
uint8_t column[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,
		140, 150, 160, 170, 180, 190 };

void settingsDrawData(void) {
 8011fec:	b5b0      	push	{r4, r5, r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af02      	add	r7, sp, #8

	//										SENSOR READINGS

	if (temperatureValue < 0) {
 8011ff2:	4b59      	ldr	r3, [pc, #356]	; (8012158 <settingsDrawData+0x16c>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	da31      	bge.n	801205e <settingsDrawData+0x72>

		Paint_DrawChar(column[COLUMN_TEMP] - 8, line[LINE_TEMP], '-', &Font12,
 8011ffa:	4b58      	ldr	r3, [pc, #352]	; (801215c <settingsDrawData+0x170>)
 8011ffc:	799b      	ldrb	r3, [r3, #6]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	3b08      	subs	r3, #8
 8012002:	b298      	uxth	r0, r3
 8012004:	4b56      	ldr	r3, [pc, #344]	; (8012160 <settingsDrawData+0x174>)
 8012006:	789b      	ldrb	r3, [r3, #2]
 8012008:	b299      	uxth	r1, r3
 801200a:	4b56      	ldr	r3, [pc, #344]	; (8012164 <settingsDrawData+0x178>)
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	b29b      	uxth	r3, r3
 8012012:	4a55      	ldr	r2, [pc, #340]	; (8012168 <settingsDrawData+0x17c>)
 8012014:	7812      	ldrb	r2, [r2, #0]
 8012016:	b2d2      	uxtb	r2, r2
 8012018:	b292      	uxth	r2, r2
 801201a:	4c54      	ldr	r4, [pc, #336]	; (801216c <settingsDrawData+0x180>)
 801201c:	9201      	str	r2, [sp, #4]
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	0023      	movs	r3, r4
 8012022:	222d      	movs	r2, #45	; 0x2d
 8012024:	f7f7 fc34 	bl	8009890 <Paint_DrawChar>
				colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 8012028:	4b4c      	ldr	r3, [pc, #304]	; (801215c <settingsDrawData+0x170>)
 801202a:	799b      	ldrb	r3, [r3, #6]
 801202c:	b298      	uxth	r0, r3
 801202e:	4b4c      	ldr	r3, [pc, #304]	; (8012160 <settingsDrawData+0x174>)
 8012030:	789b      	ldrb	r3, [r3, #2]
 8012032:	b299      	uxth	r1, r3
 8012034:	4b48      	ldr	r3, [pc, #288]	; (8012158 <settingsDrawData+0x16c>)
 8012036:	681b      	ldr	r3, [r3, #0]
				abs(temperatureValue), &Font12, colorSecond, colorMain);
 8012038:	17da      	asrs	r2, r3, #31
 801203a:	189c      	adds	r4, r3, r2
 801203c:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 801203e:	4b49      	ldr	r3, [pc, #292]	; (8012164 <settingsDrawData+0x178>)
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	b2db      	uxtb	r3, r3
 8012044:	b29b      	uxth	r3, r3
 8012046:	4a48      	ldr	r2, [pc, #288]	; (8012168 <settingsDrawData+0x17c>)
 8012048:	7812      	ldrb	r2, [r2, #0]
 801204a:	b2d2      	uxtb	r2, r2
 801204c:	b292      	uxth	r2, r2
 801204e:	4d47      	ldr	r5, [pc, #284]	; (801216c <settingsDrawData+0x180>)
 8012050:	9201      	str	r2, [sp, #4]
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	002b      	movs	r3, r5
 8012056:	0022      	movs	r2, r4
 8012058:	f7f7 fd7c 	bl	8009b54 <Paint_DrawNum>
 801205c:	e016      	b.n	801208c <settingsDrawData+0xa0>

	} else {
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP], temperatureValue,
 801205e:	4b3f      	ldr	r3, [pc, #252]	; (801215c <settingsDrawData+0x170>)
 8012060:	799b      	ldrb	r3, [r3, #6]
 8012062:	b298      	uxth	r0, r3
 8012064:	4b3e      	ldr	r3, [pc, #248]	; (8012160 <settingsDrawData+0x174>)
 8012066:	789b      	ldrb	r3, [r3, #2]
 8012068:	b299      	uxth	r1, r3
 801206a:	4b3b      	ldr	r3, [pc, #236]	; (8012158 <settingsDrawData+0x16c>)
 801206c:	681c      	ldr	r4, [r3, #0]
 801206e:	4b3d      	ldr	r3, [pc, #244]	; (8012164 <settingsDrawData+0x178>)
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	b29b      	uxth	r3, r3
 8012076:	4a3c      	ldr	r2, [pc, #240]	; (8012168 <settingsDrawData+0x17c>)
 8012078:	7812      	ldrb	r2, [r2, #0]
 801207a:	b2d2      	uxtb	r2, r2
 801207c:	b292      	uxth	r2, r2
 801207e:	4d3b      	ldr	r5, [pc, #236]	; (801216c <settingsDrawData+0x180>)
 8012080:	9201      	str	r2, [sp, #4]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	002b      	movs	r3, r5
 8012086:	0022      	movs	r2, r4
 8012088:	f7f7 fd64 	bl	8009b54 <Paint_DrawNum>
				&Font12, colorSecond, colorMain);
	}

	Paint_DrawNum(column[COLUMN_HUM], line[LINE_HUM], humidityValue, &Font12,
 801208c:	4b33      	ldr	r3, [pc, #204]	; (801215c <settingsDrawData+0x170>)
 801208e:	791b      	ldrb	r3, [r3, #4]
 8012090:	b298      	uxth	r0, r3
 8012092:	4b33      	ldr	r3, [pc, #204]	; (8012160 <settingsDrawData+0x174>)
 8012094:	795b      	ldrb	r3, [r3, #5]
 8012096:	b299      	uxth	r1, r3
 8012098:	4b35      	ldr	r3, [pc, #212]	; (8012170 <settingsDrawData+0x184>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	001d      	movs	r5, r3
 801209e:	4b31      	ldr	r3, [pc, #196]	; (8012164 <settingsDrawData+0x178>)
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4a30      	ldr	r2, [pc, #192]	; (8012168 <settingsDrawData+0x17c>)
 80120a8:	7812      	ldrb	r2, [r2, #0]
 80120aa:	b2d2      	uxtb	r2, r2
 80120ac:	b292      	uxth	r2, r2
 80120ae:	4c2f      	ldr	r4, [pc, #188]	; (801216c <settingsDrawData+0x180>)
 80120b0:	9201      	str	r2, [sp, #4]
 80120b2:	9300      	str	r3, [sp, #0]
 80120b4:	0023      	movs	r3, r4
 80120b6:	002a      	movs	r2, r5
 80120b8:	f7f7 fd4c 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_PRESS], line[LINE_PRESS], pressureValue,
 80120bc:	4b27      	ldr	r3, [pc, #156]	; (801215c <settingsDrawData+0x170>)
 80120be:	78db      	ldrb	r3, [r3, #3]
 80120c0:	b298      	uxth	r0, r3
 80120c2:	4b27      	ldr	r3, [pc, #156]	; (8012160 <settingsDrawData+0x174>)
 80120c4:	7a1b      	ldrb	r3, [r3, #8]
 80120c6:	b299      	uxth	r1, r3
 80120c8:	4b2a      	ldr	r3, [pc, #168]	; (8012174 <settingsDrawData+0x188>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	001d      	movs	r5, r3
 80120ce:	4b25      	ldr	r3, [pc, #148]	; (8012164 <settingsDrawData+0x178>)
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	4a24      	ldr	r2, [pc, #144]	; (8012168 <settingsDrawData+0x17c>)
 80120d8:	7812      	ldrb	r2, [r2, #0]
 80120da:	b2d2      	uxtb	r2, r2
 80120dc:	b292      	uxth	r2, r2
 80120de:	4c23      	ldr	r4, [pc, #140]	; (801216c <settingsDrawData+0x180>)
 80120e0:	9201      	str	r2, [sp, #4]
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	0023      	movs	r3, r4
 80120e6:	002a      	movs	r2, r5
 80120e8:	f7f7 fd34 	bl	8009b54 <Paint_DrawNum>
			&Font12, colorSecond, colorMain);

	if (altitudeValue < 0) {
 80120ec:	4b22      	ldr	r3, [pc, #136]	; (8012178 <settingsDrawData+0x18c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	da43      	bge.n	801217c <settingsDrawData+0x190>
		Paint_DrawChar(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE], '-',
 80120f4:	4b19      	ldr	r3, [pc, #100]	; (801215c <settingsDrawData+0x170>)
 80120f6:	789b      	ldrb	r3, [r3, #2]
 80120f8:	b298      	uxth	r0, r3
 80120fa:	4b19      	ldr	r3, [pc, #100]	; (8012160 <settingsDrawData+0x174>)
 80120fc:	7adb      	ldrb	r3, [r3, #11]
 80120fe:	b299      	uxth	r1, r3
 8012100:	4b18      	ldr	r3, [pc, #96]	; (8012164 <settingsDrawData+0x178>)
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	b2db      	uxtb	r3, r3
 8012106:	b29b      	uxth	r3, r3
 8012108:	4a17      	ldr	r2, [pc, #92]	; (8012168 <settingsDrawData+0x17c>)
 801210a:	7812      	ldrb	r2, [r2, #0]
 801210c:	b2d2      	uxtb	r2, r2
 801210e:	b292      	uxth	r2, r2
 8012110:	4c16      	ldr	r4, [pc, #88]	; (801216c <settingsDrawData+0x180>)
 8012112:	9201      	str	r2, [sp, #4]
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	0023      	movs	r3, r4
 8012118:	222d      	movs	r2, #45	; 0x2d
 801211a:	f7f7 fbb9 	bl	8009890 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 801211e:	4b0f      	ldr	r3, [pc, #60]	; (801215c <settingsDrawData+0x170>)
 8012120:	789b      	ldrb	r3, [r3, #2]
 8012122:	b29b      	uxth	r3, r3
 8012124:	3308      	adds	r3, #8
 8012126:	b298      	uxth	r0, r3
 8012128:	4b0d      	ldr	r3, [pc, #52]	; (8012160 <settingsDrawData+0x174>)
 801212a:	7adb      	ldrb	r3, [r3, #11]
 801212c:	b299      	uxth	r1, r3
 801212e:	4b12      	ldr	r3, [pc, #72]	; (8012178 <settingsDrawData+0x18c>)
 8012130:	681b      	ldr	r3, [r3, #0]
				abs(altitudeValue), &Font12, colorSecond, colorMain);
 8012132:	17da      	asrs	r2, r3, #31
 8012134:	189c      	adds	r4, r3, r2
 8012136:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 8012138:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <settingsDrawData+0x178>)
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	b2db      	uxtb	r3, r3
 801213e:	b29b      	uxth	r3, r3
 8012140:	4a09      	ldr	r2, [pc, #36]	; (8012168 <settingsDrawData+0x17c>)
 8012142:	7812      	ldrb	r2, [r2, #0]
 8012144:	b2d2      	uxtb	r2, r2
 8012146:	b292      	uxth	r2, r2
 8012148:	4d08      	ldr	r5, [pc, #32]	; (801216c <settingsDrawData+0x180>)
 801214a:	9201      	str	r2, [sp, #4]
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	002b      	movs	r3, r5
 8012150:	0022      	movs	r2, r4
 8012152:	f7f7 fcff 	bl	8009b54 <Paint_DrawNum>
 8012156:	e028      	b.n	80121aa <settingsDrawData+0x1be>
 8012158:	200003a8 	.word	0x200003a8
 801215c:	20000074 	.word	0x20000074
 8012160:	2000004c 	.word	0x2000004c
 8012164:	200006b3 	.word	0x200006b3
 8012168:	2000033a 	.word	0x2000033a
 801216c:	2000000c 	.word	0x2000000c
 8012170:	2000020c 	.word	0x2000020c
 8012174:	20000634 	.word	0x20000634
 8012178:	2000063c 	.word	0x2000063c
	} else {
		Paint_DrawNum(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE],
 801217c:	4bc9      	ldr	r3, [pc, #804]	; (80124a4 <settingsDrawData+0x4b8>)
 801217e:	789b      	ldrb	r3, [r3, #2]
 8012180:	b298      	uxth	r0, r3
 8012182:	4bc9      	ldr	r3, [pc, #804]	; (80124a8 <settingsDrawData+0x4bc>)
 8012184:	7adb      	ldrb	r3, [r3, #11]
 8012186:	b299      	uxth	r1, r3
 8012188:	4bc8      	ldr	r3, [pc, #800]	; (80124ac <settingsDrawData+0x4c0>)
 801218a:	681c      	ldr	r4, [r3, #0]
 801218c:	4bc8      	ldr	r3, [pc, #800]	; (80124b0 <settingsDrawData+0x4c4>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	b2db      	uxtb	r3, r3
 8012192:	b29b      	uxth	r3, r3
 8012194:	4ac7      	ldr	r2, [pc, #796]	; (80124b4 <settingsDrawData+0x4c8>)
 8012196:	7812      	ldrb	r2, [r2, #0]
 8012198:	b2d2      	uxtb	r2, r2
 801219a:	b292      	uxth	r2, r2
 801219c:	4dc6      	ldr	r5, [pc, #792]	; (80124b8 <settingsDrawData+0x4cc>)
 801219e:	9201      	str	r2, [sp, #4]
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	002b      	movs	r3, r5
 80121a4:	0022      	movs	r2, r4
 80121a6:	f7f7 fcd5 	bl	8009b54 <Paint_DrawNum>
				altitudeValue, &Font12, colorSecond, colorMain);
	}

	//										SENSOR READINGS UNITS
	Paint_DrawString_EN(column[COLUMN_TEMP + 2], line[LINE_TEMP], "C", &Font12,
 80121aa:	4bbe      	ldr	r3, [pc, #760]	; (80124a4 <settingsDrawData+0x4b8>)
 80121ac:	7a1b      	ldrb	r3, [r3, #8]
 80121ae:	b298      	uxth	r0, r3
 80121b0:	4bbd      	ldr	r3, [pc, #756]	; (80124a8 <settingsDrawData+0x4bc>)
 80121b2:	789b      	ldrb	r3, [r3, #2]
 80121b4:	b299      	uxth	r1, r3
 80121b6:	4bbe      	ldr	r3, [pc, #760]	; (80124b0 <settingsDrawData+0x4c4>)
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4abd      	ldr	r2, [pc, #756]	; (80124b4 <settingsDrawData+0x4c8>)
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	b2d2      	uxtb	r2, r2
 80121c4:	b292      	uxth	r2, r2
 80121c6:	4dbc      	ldr	r5, [pc, #752]	; (80124b8 <settingsDrawData+0x4cc>)
 80121c8:	4cbc      	ldr	r4, [pc, #752]	; (80124bc <settingsDrawData+0x4d0>)
 80121ca:	9201      	str	r2, [sp, #4]
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	002b      	movs	r3, r5
 80121d0:	0022      	movs	r2, r4
 80121d2:	f7f7 fc41 	bl	8009a58 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_HUM + 2], line[LINE_HUM], "%", &Font12,
 80121d6:	4bb3      	ldr	r3, [pc, #716]	; (80124a4 <settingsDrawData+0x4b8>)
 80121d8:	799b      	ldrb	r3, [r3, #6]
 80121da:	b298      	uxth	r0, r3
 80121dc:	4bb2      	ldr	r3, [pc, #712]	; (80124a8 <settingsDrawData+0x4bc>)
 80121de:	795b      	ldrb	r3, [r3, #5]
 80121e0:	b299      	uxth	r1, r3
 80121e2:	4bb3      	ldr	r3, [pc, #716]	; (80124b0 <settingsDrawData+0x4c4>)
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	4ab2      	ldr	r2, [pc, #712]	; (80124b4 <settingsDrawData+0x4c8>)
 80121ec:	7812      	ldrb	r2, [r2, #0]
 80121ee:	b2d2      	uxtb	r2, r2
 80121f0:	b292      	uxth	r2, r2
 80121f2:	4db1      	ldr	r5, [pc, #708]	; (80124b8 <settingsDrawData+0x4cc>)
 80121f4:	4cb2      	ldr	r4, [pc, #712]	; (80124c0 <settingsDrawData+0x4d4>)
 80121f6:	9201      	str	r2, [sp, #4]
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	002b      	movs	r3, r5
 80121fc:	0022      	movs	r2, r4
 80121fe:	f7f7 fc2b 	bl	8009a58 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS + 4], line[LINE_PRESS], "hPa",
 8012202:	4ba8      	ldr	r3, [pc, #672]	; (80124a4 <settingsDrawData+0x4b8>)
 8012204:	79db      	ldrb	r3, [r3, #7]
 8012206:	b298      	uxth	r0, r3
 8012208:	4ba7      	ldr	r3, [pc, #668]	; (80124a8 <settingsDrawData+0x4bc>)
 801220a:	7a1b      	ldrb	r3, [r3, #8]
 801220c:	b299      	uxth	r1, r3
 801220e:	4ba8      	ldr	r3, [pc, #672]	; (80124b0 <settingsDrawData+0x4c4>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	b2db      	uxtb	r3, r3
 8012214:	b29b      	uxth	r3, r3
 8012216:	4aa7      	ldr	r2, [pc, #668]	; (80124b4 <settingsDrawData+0x4c8>)
 8012218:	7812      	ldrb	r2, [r2, #0]
 801221a:	b2d2      	uxtb	r2, r2
 801221c:	b292      	uxth	r2, r2
 801221e:	4da6      	ldr	r5, [pc, #664]	; (80124b8 <settingsDrawData+0x4cc>)
 8012220:	4ca8      	ldr	r4, [pc, #672]	; (80124c4 <settingsDrawData+0x4d8>)
 8012222:	9201      	str	r2, [sp, #4]
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	002b      	movs	r3, r5
 8012228:	0022      	movs	r2, r4
 801222a:	f7f7 fc15 	bl	8009a58 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_ALTITUDE + 5], line[LINE_ALTITUDE],
 801222e:	4b9d      	ldr	r3, [pc, #628]	; (80124a4 <settingsDrawData+0x4b8>)
 8012230:	79db      	ldrb	r3, [r3, #7]
 8012232:	b298      	uxth	r0, r3
 8012234:	4b9c      	ldr	r3, [pc, #624]	; (80124a8 <settingsDrawData+0x4bc>)
 8012236:	7adb      	ldrb	r3, [r3, #11]
 8012238:	b299      	uxth	r1, r3
 801223a:	4b9d      	ldr	r3, [pc, #628]	; (80124b0 <settingsDrawData+0x4c4>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	b2db      	uxtb	r3, r3
 8012240:	b29b      	uxth	r3, r3
 8012242:	4a9c      	ldr	r2, [pc, #624]	; (80124b4 <settingsDrawData+0x4c8>)
 8012244:	7812      	ldrb	r2, [r2, #0]
 8012246:	b2d2      	uxtb	r2, r2
 8012248:	b292      	uxth	r2, r2
 801224a:	4d9b      	ldr	r5, [pc, #620]	; (80124b8 <settingsDrawData+0x4cc>)
 801224c:	4c9e      	ldr	r4, [pc, #632]	; (80124c8 <settingsDrawData+0x4dc>)
 801224e:	9201      	str	r2, [sp, #4]
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	002b      	movs	r3, r5
 8012254:	0022      	movs	r2, r4
 8012256:	f7f7 fbff 	bl	8009a58 <Paint_DrawString_EN>
			"m a.s.l.", &Font12, colorSecond, colorMain);

	//										STRINGS
	Paint_DrawString_EN(column[COLUMN_LAYOUT], line[LINE_LAYOUT], "Layout:",
 801225a:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <settingsDrawData+0x4b8>)
 801225c:	785b      	ldrb	r3, [r3, #1]
 801225e:	b298      	uxth	r0, r3
 8012260:	4b91      	ldr	r3, [pc, #580]	; (80124a8 <settingsDrawData+0x4bc>)
 8012262:	7e1b      	ldrb	r3, [r3, #24]
 8012264:	b299      	uxth	r1, r3
 8012266:	4b92      	ldr	r3, [pc, #584]	; (80124b0 <settingsDrawData+0x4c4>)
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	b2db      	uxtb	r3, r3
 801226c:	b29b      	uxth	r3, r3
 801226e:	4a91      	ldr	r2, [pc, #580]	; (80124b4 <settingsDrawData+0x4c8>)
 8012270:	7812      	ldrb	r2, [r2, #0]
 8012272:	b2d2      	uxtb	r2, r2
 8012274:	b292      	uxth	r2, r2
 8012276:	4d90      	ldr	r5, [pc, #576]	; (80124b8 <settingsDrawData+0x4cc>)
 8012278:	4c94      	ldr	r4, [pc, #592]	; (80124cc <settingsDrawData+0x4e0>)
 801227a:	9201      	str	r2, [sp, #4]
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	002b      	movs	r3, r5
 8012280:	0022      	movs	r2, r4
 8012282:	f7f7 fbe9 	bl	8009a58 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_COLOR], line[LINE_COLOR], "Color:",
 8012286:	4b87      	ldr	r3, [pc, #540]	; (80124a4 <settingsDrawData+0x4b8>)
 8012288:	789b      	ldrb	r3, [r3, #2]
 801228a:	b298      	uxth	r0, r3
 801228c:	4b86      	ldr	r3, [pc, #536]	; (80124a8 <settingsDrawData+0x4bc>)
 801228e:	7f1b      	ldrb	r3, [r3, #28]
 8012290:	b299      	uxth	r1, r3
 8012292:	4b87      	ldr	r3, [pc, #540]	; (80124b0 <settingsDrawData+0x4c4>)
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	b2db      	uxtb	r3, r3
 8012298:	b29b      	uxth	r3, r3
 801229a:	4a86      	ldr	r2, [pc, #536]	; (80124b4 <settingsDrawData+0x4c8>)
 801229c:	7812      	ldrb	r2, [r2, #0]
 801229e:	b2d2      	uxtb	r2, r2
 80122a0:	b292      	uxth	r2, r2
 80122a2:	4d85      	ldr	r5, [pc, #532]	; (80124b8 <settingsDrawData+0x4cc>)
 80122a4:	4c8a      	ldr	r4, [pc, #552]	; (80124d0 <settingsDrawData+0x4e4>)
 80122a6:	9201      	str	r2, [sp, #4]
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	002b      	movs	r3, r5
 80122ac:	0022      	movs	r2, r4
 80122ae:	f7f7 fbd3 	bl	8009a58 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_TEMP_CMP], line[LINE_TEMP_CMP], "T.cmp:",
 80122b2:	4b7c      	ldr	r3, [pc, #496]	; (80124a4 <settingsDrawData+0x4b8>)
 80122b4:	79db      	ldrb	r3, [r3, #7]
 80122b6:	b298      	uxth	r0, r3
 80122b8:	4b7b      	ldr	r3, [pc, #492]	; (80124a8 <settingsDrawData+0x4bc>)
 80122ba:	2224      	movs	r2, #36	; 0x24
 80122bc:	5c9b      	ldrb	r3, [r3, r2]
 80122be:	b299      	uxth	r1, r3
 80122c0:	4b7b      	ldr	r3, [pc, #492]	; (80124b0 <settingsDrawData+0x4c4>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	4a7a      	ldr	r2, [pc, #488]	; (80124b4 <settingsDrawData+0x4c8>)
 80122ca:	7812      	ldrb	r2, [r2, #0]
 80122cc:	b2d2      	uxtb	r2, r2
 80122ce:	b292      	uxth	r2, r2
 80122d0:	4d79      	ldr	r5, [pc, #484]	; (80124b8 <settingsDrawData+0x4cc>)
 80122d2:	4c80      	ldr	r4, [pc, #512]	; (80124d4 <settingsDrawData+0x4e8>)
 80122d4:	9201      	str	r2, [sp, #4]
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	002b      	movs	r3, r5
 80122da:	0022      	movs	r2, r4
 80122dc:	f7f7 fbbc 	bl	8009a58 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS_REF], line[LINE_PRESS_REF],
 80122e0:	4b70      	ldr	r3, [pc, #448]	; (80124a4 <settingsDrawData+0x4b8>)
 80122e2:	791b      	ldrb	r3, [r3, #4]
 80122e4:	b298      	uxth	r0, r3
 80122e6:	4b70      	ldr	r3, [pc, #448]	; (80124a8 <settingsDrawData+0x4bc>)
 80122e8:	2220      	movs	r2, #32
 80122ea:	5c9b      	ldrb	r3, [r3, r2]
 80122ec:	b299      	uxth	r1, r3
 80122ee:	4b70      	ldr	r3, [pc, #448]	; (80124b0 <settingsDrawData+0x4c4>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	4a6f      	ldr	r2, [pc, #444]	; (80124b4 <settingsDrawData+0x4c8>)
 80122f8:	7812      	ldrb	r2, [r2, #0]
 80122fa:	b2d2      	uxtb	r2, r2
 80122fc:	b292      	uxth	r2, r2
 80122fe:	4d6e      	ldr	r5, [pc, #440]	; (80124b8 <settingsDrawData+0x4cc>)
 8012300:	4c75      	ldr	r4, [pc, #468]	; (80124d8 <settingsDrawData+0x4ec>)
 8012302:	9201      	str	r2, [sp, #4]
 8012304:	9300      	str	r3, [sp, #0]
 8012306:	002b      	movs	r3, r5
 8012308:	0022      	movs	r2, r4
 801230a:	f7f7 fba5 	bl	8009a58 <Paint_DrawString_EN>
			"P.ref:", &Font12, colorSecond, colorMain);

	//										CLOCK
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_CLOCK], actual.hour, &Font16,
 801230e:	4b65      	ldr	r3, [pc, #404]	; (80124a4 <settingsDrawData+0x4b8>)
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	b298      	uxth	r0, r3
 8012314:	4b64      	ldr	r3, [pc, #400]	; (80124a8 <settingsDrawData+0x4bc>)
 8012316:	7c1b      	ldrb	r3, [r3, #16]
 8012318:	b299      	uxth	r1, r3
 801231a:	4b70      	ldr	r3, [pc, #448]	; (80124dc <settingsDrawData+0x4f0>)
 801231c:	78db      	ldrb	r3, [r3, #3]
 801231e:	b25b      	sxtb	r3, r3
 8012320:	001d      	movs	r5, r3
 8012322:	4b63      	ldr	r3, [pc, #396]	; (80124b0 <settingsDrawData+0x4c4>)
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	b2db      	uxtb	r3, r3
 8012328:	b29b      	uxth	r3, r3
 801232a:	4a62      	ldr	r2, [pc, #392]	; (80124b4 <settingsDrawData+0x4c8>)
 801232c:	7812      	ldrb	r2, [r2, #0]
 801232e:	b2d2      	uxtb	r2, r2
 8012330:	b292      	uxth	r2, r2
 8012332:	4c6b      	ldr	r4, [pc, #428]	; (80124e0 <settingsDrawData+0x4f4>)
 8012334:	9201      	str	r2, [sp, #4]
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	0023      	movs	r3, r4
 801233a:	002a      	movs	r2, r5
 801233c:	f7f7 fc0a 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_CLOCK], actual.minute, &Font16,
 8012340:	4b58      	ldr	r3, [pc, #352]	; (80124a4 <settingsDrawData+0x4b8>)
 8012342:	78db      	ldrb	r3, [r3, #3]
 8012344:	b298      	uxth	r0, r3
 8012346:	4b58      	ldr	r3, [pc, #352]	; (80124a8 <settingsDrawData+0x4bc>)
 8012348:	7c1b      	ldrb	r3, [r3, #16]
 801234a:	b299      	uxth	r1, r3
 801234c:	4b63      	ldr	r3, [pc, #396]	; (80124dc <settingsDrawData+0x4f0>)
 801234e:	791b      	ldrb	r3, [r3, #4]
 8012350:	b25b      	sxtb	r3, r3
 8012352:	001d      	movs	r5, r3
 8012354:	4b56      	ldr	r3, [pc, #344]	; (80124b0 <settingsDrawData+0x4c4>)
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	b2db      	uxtb	r3, r3
 801235a:	b29b      	uxth	r3, r3
 801235c:	4a55      	ldr	r2, [pc, #340]	; (80124b4 <settingsDrawData+0x4c8>)
 801235e:	7812      	ldrb	r2, [r2, #0]
 8012360:	b2d2      	uxtb	r2, r2
 8012362:	b292      	uxth	r2, r2
 8012364:	4c5e      	ldr	r4, [pc, #376]	; (80124e0 <settingsDrawData+0x4f4>)
 8012366:	9201      	str	r2, [sp, #4]
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	0023      	movs	r3, r4
 801236c:	002a      	movs	r2, r5
 801236e:	f7f7 fbf1 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_CLOCK], actual.second, &Font16,
 8012372:	4b4c      	ldr	r3, [pc, #304]	; (80124a4 <settingsDrawData+0x4b8>)
 8012374:	799b      	ldrb	r3, [r3, #6]
 8012376:	b298      	uxth	r0, r3
 8012378:	4b4b      	ldr	r3, [pc, #300]	; (80124a8 <settingsDrawData+0x4bc>)
 801237a:	7c1b      	ldrb	r3, [r3, #16]
 801237c:	b299      	uxth	r1, r3
 801237e:	4b57      	ldr	r3, [pc, #348]	; (80124dc <settingsDrawData+0x4f0>)
 8012380:	795b      	ldrb	r3, [r3, #5]
 8012382:	b25b      	sxtb	r3, r3
 8012384:	001d      	movs	r5, r3
 8012386:	4b4a      	ldr	r3, [pc, #296]	; (80124b0 <settingsDrawData+0x4c4>)
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	b2db      	uxtb	r3, r3
 801238c:	b29b      	uxth	r3, r3
 801238e:	4a49      	ldr	r2, [pc, #292]	; (80124b4 <settingsDrawData+0x4c8>)
 8012390:	7812      	ldrb	r2, [r2, #0]
 8012392:	b2d2      	uxtb	r2, r2
 8012394:	b292      	uxth	r2, r2
 8012396:	4c52      	ldr	r4, [pc, #328]	; (80124e0 <settingsDrawData+0x4f4>)
 8012398:	9201      	str	r2, [sp, #4]
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	0023      	movs	r3, r4
 801239e:	002a      	movs	r2, r5
 80123a0:	f7f7 fbd8 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);

	//										DATE
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_DATE], actual.day, &Font16,
 80123a4:	4b3f      	ldr	r3, [pc, #252]	; (80124a4 <settingsDrawData+0x4b8>)
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	b298      	uxth	r0, r3
 80123aa:	4b3f      	ldr	r3, [pc, #252]	; (80124a8 <settingsDrawData+0x4bc>)
 80123ac:	7d1b      	ldrb	r3, [r3, #20]
 80123ae:	b299      	uxth	r1, r3
 80123b0:	4b4a      	ldr	r3, [pc, #296]	; (80124dc <settingsDrawData+0x4f0>)
 80123b2:	789b      	ldrb	r3, [r3, #2]
 80123b4:	b25b      	sxtb	r3, r3
 80123b6:	001d      	movs	r5, r3
 80123b8:	4b3d      	ldr	r3, [pc, #244]	; (80124b0 <settingsDrawData+0x4c4>)
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4a3c      	ldr	r2, [pc, #240]	; (80124b4 <settingsDrawData+0x4c8>)
 80123c2:	7812      	ldrb	r2, [r2, #0]
 80123c4:	b2d2      	uxtb	r2, r2
 80123c6:	b292      	uxth	r2, r2
 80123c8:	4c45      	ldr	r4, [pc, #276]	; (80124e0 <settingsDrawData+0x4f4>)
 80123ca:	9201      	str	r2, [sp, #4]
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	0023      	movs	r3, r4
 80123d0:	002a      	movs	r2, r5
 80123d2:	f7f7 fbbf 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_DATE], actual.month, &Font16,
 80123d6:	4b33      	ldr	r3, [pc, #204]	; (80124a4 <settingsDrawData+0x4b8>)
 80123d8:	78db      	ldrb	r3, [r3, #3]
 80123da:	b298      	uxth	r0, r3
 80123dc:	4b32      	ldr	r3, [pc, #200]	; (80124a8 <settingsDrawData+0x4bc>)
 80123de:	7d1b      	ldrb	r3, [r3, #20]
 80123e0:	b299      	uxth	r1, r3
 80123e2:	4b3e      	ldr	r3, [pc, #248]	; (80124dc <settingsDrawData+0x4f0>)
 80123e4:	785b      	ldrb	r3, [r3, #1]
 80123e6:	b25b      	sxtb	r3, r3
 80123e8:	001d      	movs	r5, r3
 80123ea:	4b31      	ldr	r3, [pc, #196]	; (80124b0 <settingsDrawData+0x4c4>)
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	4a30      	ldr	r2, [pc, #192]	; (80124b4 <settingsDrawData+0x4c8>)
 80123f4:	7812      	ldrb	r2, [r2, #0]
 80123f6:	b2d2      	uxtb	r2, r2
 80123f8:	b292      	uxth	r2, r2
 80123fa:	4c39      	ldr	r4, [pc, #228]	; (80124e0 <settingsDrawData+0x4f4>)
 80123fc:	9201      	str	r2, [sp, #4]
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	0023      	movs	r3, r4
 8012402:	002a      	movs	r2, r5
 8012404:	f7f7 fba6 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_DATE], actual.year, &Font16,
 8012408:	4b26      	ldr	r3, [pc, #152]	; (80124a4 <settingsDrawData+0x4b8>)
 801240a:	799b      	ldrb	r3, [r3, #6]
 801240c:	b298      	uxth	r0, r3
 801240e:	4b26      	ldr	r3, [pc, #152]	; (80124a8 <settingsDrawData+0x4bc>)
 8012410:	7d1b      	ldrb	r3, [r3, #20]
 8012412:	b299      	uxth	r1, r3
 8012414:	4b31      	ldr	r3, [pc, #196]	; (80124dc <settingsDrawData+0x4f0>)
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	b25b      	sxtb	r3, r3
 801241a:	001d      	movs	r5, r3
 801241c:	4b24      	ldr	r3, [pc, #144]	; (80124b0 <settingsDrawData+0x4c4>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	b2db      	uxtb	r3, r3
 8012422:	b29b      	uxth	r3, r3
 8012424:	4a23      	ldr	r2, [pc, #140]	; (80124b4 <settingsDrawData+0x4c8>)
 8012426:	7812      	ldrb	r2, [r2, #0]
 8012428:	b2d2      	uxtb	r2, r2
 801242a:	b292      	uxth	r2, r2
 801242c:	4c2c      	ldr	r4, [pc, #176]	; (80124e0 <settingsDrawData+0x4f4>)
 801242e:	9201      	str	r2, [sp, #4]
 8012430:	9300      	str	r3, [sp, #0]
 8012432:	0023      	movs	r3, r4
 8012434:	002a      	movs	r2, r5
 8012436:	f7f7 fb8d 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);

	//										LAYOUT
	Paint_DrawNum(column[COLUMN_LAYOUT + 6], line[LINE_LAYOUT], layout, &Font12,
 801243a:	4b1a      	ldr	r3, [pc, #104]	; (80124a4 <settingsDrawData+0x4b8>)
 801243c:	79db      	ldrb	r3, [r3, #7]
 801243e:	b298      	uxth	r0, r3
 8012440:	4b19      	ldr	r3, [pc, #100]	; (80124a8 <settingsDrawData+0x4bc>)
 8012442:	7e1b      	ldrb	r3, [r3, #24]
 8012444:	b299      	uxth	r1, r3
 8012446:	4b27      	ldr	r3, [pc, #156]	; (80124e4 <settingsDrawData+0x4f8>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	b2db      	uxtb	r3, r3
 801244c:	001d      	movs	r5, r3
 801244e:	4b18      	ldr	r3, [pc, #96]	; (80124b0 <settingsDrawData+0x4c4>)
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	b2db      	uxtb	r3, r3
 8012454:	b29b      	uxth	r3, r3
 8012456:	4a17      	ldr	r2, [pc, #92]	; (80124b4 <settingsDrawData+0x4c8>)
 8012458:	7812      	ldrb	r2, [r2, #0]
 801245a:	b2d2      	uxtb	r2, r2
 801245c:	b292      	uxth	r2, r2
 801245e:	4c16      	ldr	r4, [pc, #88]	; (80124b8 <settingsDrawData+0x4cc>)
 8012460:	9201      	str	r2, [sp, #4]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	0023      	movs	r3, r4
 8012466:	002a      	movs	r2, r5
 8012468:	f7f7 fb74 	bl	8009b54 <Paint_DrawNum>
			colorSecond, colorMain);

	//										COLOR
	if (colorScheme == COLOR_SCHEME_WHITE)
 801246c:	4b1e      	ldr	r3, [pc, #120]	; (80124e8 <settingsDrawData+0x4fc>)
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	2b01      	cmp	r3, #1
 8012474:	d13a      	bne.n	80124ec <settingsDrawData+0x500>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'W', &Font12,
 8012476:	4b0b      	ldr	r3, [pc, #44]	; (80124a4 <settingsDrawData+0x4b8>)
 8012478:	79db      	ldrb	r3, [r3, #7]
 801247a:	b298      	uxth	r0, r3
 801247c:	4b0a      	ldr	r3, [pc, #40]	; (80124a8 <settingsDrawData+0x4bc>)
 801247e:	7f1b      	ldrb	r3, [r3, #28]
 8012480:	b299      	uxth	r1, r3
 8012482:	4b0b      	ldr	r3, [pc, #44]	; (80124b0 <settingsDrawData+0x4c4>)
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	b2db      	uxtb	r3, r3
 8012488:	b29b      	uxth	r3, r3
 801248a:	4a0a      	ldr	r2, [pc, #40]	; (80124b4 <settingsDrawData+0x4c8>)
 801248c:	7812      	ldrb	r2, [r2, #0]
 801248e:	b2d2      	uxtb	r2, r2
 8012490:	b292      	uxth	r2, r2
 8012492:	4c09      	ldr	r4, [pc, #36]	; (80124b8 <settingsDrawData+0x4cc>)
 8012494:	9201      	str	r2, [sp, #4]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	0023      	movs	r3, r4
 801249a:	2257      	movs	r2, #87	; 0x57
 801249c:	f7f7 f9f8 	bl	8009890 <Paint_DrawChar>
 80124a0:	e03e      	b.n	8012520 <settingsDrawData+0x534>
 80124a2:	46c0      	nop			; (mov r8, r8)
 80124a4:	20000074 	.word	0x20000074
 80124a8:	2000004c 	.word	0x2000004c
 80124ac:	2000063c 	.word	0x2000063c
 80124b0:	200006b3 	.word	0x200006b3
 80124b4:	2000033a 	.word	0x2000033a
 80124b8:	2000000c 	.word	0x2000000c
 80124bc:	080162a4 	.word	0x080162a4
 80124c0:	080162a8 	.word	0x080162a8
 80124c4:	080162ac 	.word	0x080162ac
 80124c8:	080162b0 	.word	0x080162b0
 80124cc:	080162bc 	.word	0x080162bc
 80124d0:	080162c4 	.word	0x080162c4
 80124d4:	080162cc 	.word	0x080162cc
 80124d8:	080162d4 	.word	0x080162d4
 80124dc:	200006ac 	.word	0x200006ac
 80124e0:	20000014 	.word	0x20000014
 80124e4:	200006f5 	.word	0x200006f5
 80124e8:	200006d8 	.word	0x200006d8
				colorSecond, colorMain);
	else if (colorScheme == COLOR_SCHEME_BLACK)
 80124ec:	4b46      	ldr	r3, [pc, #280]	; (8012608 <settingsDrawData+0x61c>)
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b02      	cmp	r3, #2
 80124f4:	d114      	bne.n	8012520 <settingsDrawData+0x534>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'B', &Font12,
 80124f6:	4b45      	ldr	r3, [pc, #276]	; (801260c <settingsDrawData+0x620>)
 80124f8:	79db      	ldrb	r3, [r3, #7]
 80124fa:	b298      	uxth	r0, r3
 80124fc:	4b44      	ldr	r3, [pc, #272]	; (8012610 <settingsDrawData+0x624>)
 80124fe:	7f1b      	ldrb	r3, [r3, #28]
 8012500:	b299      	uxth	r1, r3
 8012502:	4b44      	ldr	r3, [pc, #272]	; (8012614 <settingsDrawData+0x628>)
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	b29b      	uxth	r3, r3
 801250a:	4a43      	ldr	r2, [pc, #268]	; (8012618 <settingsDrawData+0x62c>)
 801250c:	7812      	ldrb	r2, [r2, #0]
 801250e:	b2d2      	uxtb	r2, r2
 8012510:	b292      	uxth	r2, r2
 8012512:	4c42      	ldr	r4, [pc, #264]	; (801261c <settingsDrawData+0x630>)
 8012514:	9201      	str	r2, [sp, #4]
 8012516:	9300      	str	r3, [sp, #0]
 8012518:	0023      	movs	r3, r4
 801251a:	2242      	movs	r2, #66	; 0x42
 801251c:	f7f7 f9b8 	bl	8009890 <Paint_DrawChar>
				colorSecond, colorMain);

	//										PRESSURE REFERENCE
	Paint_DrawNum(column[COLUMN_PRESS_REF + 5], line[LINE_PRESS_REF],
 8012520:	4b3a      	ldr	r3, [pc, #232]	; (801260c <settingsDrawData+0x620>)
 8012522:	7a5b      	ldrb	r3, [r3, #9]
 8012524:	b298      	uxth	r0, r3
 8012526:	4b3a      	ldr	r3, [pc, #232]	; (8012610 <settingsDrawData+0x624>)
 8012528:	2220      	movs	r2, #32
 801252a:	5c9b      	ldrb	r3, [r3, r2]
 801252c:	b299      	uxth	r1, r3
 801252e:	4b3c      	ldr	r3, [pc, #240]	; (8012620 <settingsDrawData+0x634>)
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	b21b      	sxth	r3, r3
 8012534:	001d      	movs	r5, r3
 8012536:	4b37      	ldr	r3, [pc, #220]	; (8012614 <settingsDrawData+0x628>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	b2db      	uxtb	r3, r3
 801253c:	b29b      	uxth	r3, r3
 801253e:	4a36      	ldr	r2, [pc, #216]	; (8012618 <settingsDrawData+0x62c>)
 8012540:	7812      	ldrb	r2, [r2, #0]
 8012542:	b2d2      	uxtb	r2, r2
 8012544:	b292      	uxth	r2, r2
 8012546:	4c35      	ldr	r4, [pc, #212]	; (801261c <settingsDrawData+0x630>)
 8012548:	9201      	str	r2, [sp, #4]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	0023      	movs	r3, r4
 801254e:	002a      	movs	r2, r5
 8012550:	f7f7 fb00 	bl	8009b54 <Paint_DrawNum>
			pressureReference, &Font12, colorSecond, colorMain);

	//										TEMPERATURE COMPENSATION

	if (temperatureCompensation < 0) {
 8012554:	4b33      	ldr	r3, [pc, #204]	; (8012624 <settingsDrawData+0x638>)
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	b25b      	sxtb	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	da36      	bge.n	80125cc <settingsDrawData+0x5e0>

		Paint_DrawChar(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP], '-',
 801255e:	4b2b      	ldr	r3, [pc, #172]	; (801260c <settingsDrawData+0x620>)
 8012560:	7b1b      	ldrb	r3, [r3, #12]
 8012562:	b298      	uxth	r0, r3
 8012564:	4b2a      	ldr	r3, [pc, #168]	; (8012610 <settingsDrawData+0x624>)
 8012566:	2224      	movs	r2, #36	; 0x24
 8012568:	5c9b      	ldrb	r3, [r3, r2]
 801256a:	b299      	uxth	r1, r3
 801256c:	4b29      	ldr	r3, [pc, #164]	; (8012614 <settingsDrawData+0x628>)
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	b2db      	uxtb	r3, r3
 8012572:	b29b      	uxth	r3, r3
 8012574:	4a28      	ldr	r2, [pc, #160]	; (8012618 <settingsDrawData+0x62c>)
 8012576:	7812      	ldrb	r2, [r2, #0]
 8012578:	b2d2      	uxtb	r2, r2
 801257a:	b292      	uxth	r2, r2
 801257c:	4c27      	ldr	r4, [pc, #156]	; (801261c <settingsDrawData+0x630>)
 801257e:	9201      	str	r2, [sp, #4]
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	0023      	movs	r3, r4
 8012584:	222d      	movs	r2, #45	; 0x2d
 8012586:	f7f7 f983 	bl	8009890 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 801258a:	4b20      	ldr	r3, [pc, #128]	; (801260c <settingsDrawData+0x620>)
 801258c:	7b1b      	ldrb	r3, [r3, #12]
 801258e:	b29b      	uxth	r3, r3
 8012590:	3308      	adds	r3, #8
 8012592:	b298      	uxth	r0, r3
 8012594:	4b1e      	ldr	r3, [pc, #120]	; (8012610 <settingsDrawData+0x624>)
 8012596:	2224      	movs	r2, #36	; 0x24
 8012598:	5c9b      	ldrb	r3, [r3, r2]
 801259a:	b299      	uxth	r1, r3
				abs(temperatureCompensation), &Font12, colorSecond, colorMain);
 801259c:	4b21      	ldr	r3, [pc, #132]	; (8012624 <settingsDrawData+0x638>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	b25b      	sxtb	r3, r3
 80125a2:	17da      	asrs	r2, r3, #31
 80125a4:	189b      	adds	r3, r3, r2
 80125a6:	4053      	eors	r3, r2
 80125a8:	b2db      	uxtb	r3, r3
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 80125aa:	001d      	movs	r5, r3
 80125ac:	4b19      	ldr	r3, [pc, #100]	; (8012614 <settingsDrawData+0x628>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	4a18      	ldr	r2, [pc, #96]	; (8012618 <settingsDrawData+0x62c>)
 80125b6:	7812      	ldrb	r2, [r2, #0]
 80125b8:	b2d2      	uxtb	r2, r2
 80125ba:	b292      	uxth	r2, r2
 80125bc:	4c17      	ldr	r4, [pc, #92]	; (801261c <settingsDrawData+0x630>)
 80125be:	9201      	str	r2, [sp, #4]
 80125c0:	9300      	str	r3, [sp, #0]
 80125c2:	0023      	movs	r3, r4
 80125c4:	002a      	movs	r2, r5
 80125c6:	f7f7 fac5 	bl	8009b54 <Paint_DrawNum>
	}

//	Paint_DrawNum(column[COLUMN_COLOR+7], line[LINE_COLOR], colorScheme, &Font16, colorSecond,
//			colorMain);

}
 80125ca:	e019      	b.n	8012600 <settingsDrawData+0x614>
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP],
 80125cc:	4b0f      	ldr	r3, [pc, #60]	; (801260c <settingsDrawData+0x620>)
 80125ce:	7b1b      	ldrb	r3, [r3, #12]
 80125d0:	b298      	uxth	r0, r3
 80125d2:	4b0f      	ldr	r3, [pc, #60]	; (8012610 <settingsDrawData+0x624>)
 80125d4:	2224      	movs	r2, #36	; 0x24
 80125d6:	5c9b      	ldrb	r3, [r3, r2]
 80125d8:	b299      	uxth	r1, r3
 80125da:	4b12      	ldr	r3, [pc, #72]	; (8012624 <settingsDrawData+0x638>)
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	b25b      	sxtb	r3, r3
 80125e0:	001d      	movs	r5, r3
 80125e2:	4b0c      	ldr	r3, [pc, #48]	; (8012614 <settingsDrawData+0x628>)
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4a0b      	ldr	r2, [pc, #44]	; (8012618 <settingsDrawData+0x62c>)
 80125ec:	7812      	ldrb	r2, [r2, #0]
 80125ee:	b2d2      	uxtb	r2, r2
 80125f0:	b292      	uxth	r2, r2
 80125f2:	4c0a      	ldr	r4, [pc, #40]	; (801261c <settingsDrawData+0x630>)
 80125f4:	9201      	str	r2, [sp, #4]
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	0023      	movs	r3, r4
 80125fa:	002a      	movs	r2, r5
 80125fc:	f7f7 faaa 	bl	8009b54 <Paint_DrawNum>
}
 8012600:	46c0      	nop			; (mov r8, r8)
 8012602:	46bd      	mov	sp, r7
 8012604:	bdb0      	pop	{r4, r5, r7, pc}
 8012606:	46c0      	nop			; (mov r8, r8)
 8012608:	200006d8 	.word	0x200006d8
 801260c:	20000074 	.word	0x20000074
 8012610:	2000004c 	.word	0x2000004c
 8012614:	200006b3 	.word	0x200006b3
 8012618:	2000033a 	.word	0x2000033a
 801261c:	2000000c 	.word	0x2000000c
 8012620:	20000032 	.word	0x20000032
 8012624:	20000030 	.word	0x20000030

08012628 <settingsDrawSubs>:

void settingsDrawSubs(void) {
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af04      	add	r7, sp, #16

	Paint_DrawChar(160, 40, '+', &Font20, colorSecond, colorMain);
 801262e:	4b31      	ldr	r3, [pc, #196]	; (80126f4 <settingsDrawSubs+0xcc>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	b29b      	uxth	r3, r3
 8012636:	4a30      	ldr	r2, [pc, #192]	; (80126f8 <settingsDrawSubs+0xd0>)
 8012638:	7812      	ldrb	r2, [r2, #0]
 801263a:	b2d2      	uxtb	r2, r2
 801263c:	b292      	uxth	r2, r2
 801263e:	492f      	ldr	r1, [pc, #188]	; (80126fc <settingsDrawSubs+0xd4>)
 8012640:	9201      	str	r2, [sp, #4]
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	000b      	movs	r3, r1
 8012646:	222b      	movs	r2, #43	; 0x2b
 8012648:	2128      	movs	r1, #40	; 0x28
 801264a:	20a0      	movs	r0, #160	; 0xa0
 801264c:	f7f7 f920 	bl	8009890 <Paint_DrawChar>
	Paint_DrawChar(160, 140, '>', &Font20, colorSecond, colorMain);
 8012650:	4b28      	ldr	r3, [pc, #160]	; (80126f4 <settingsDrawSubs+0xcc>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	b2db      	uxtb	r3, r3
 8012656:	b29b      	uxth	r3, r3
 8012658:	4a27      	ldr	r2, [pc, #156]	; (80126f8 <settingsDrawSubs+0xd0>)
 801265a:	7812      	ldrb	r2, [r2, #0]
 801265c:	b2d2      	uxtb	r2, r2
 801265e:	b292      	uxth	r2, r2
 8012660:	4926      	ldr	r1, [pc, #152]	; (80126fc <settingsDrawSubs+0xd4>)
 8012662:	9201      	str	r2, [sp, #4]
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	000b      	movs	r3, r1
 8012668:	223e      	movs	r2, #62	; 0x3e
 801266a:	218c      	movs	r1, #140	; 0x8c
 801266c:	20a0      	movs	r0, #160	; 0xa0
 801266e:	f7f7 f90f 	bl	8009890 <Paint_DrawChar>
	Paint_DrawString_EN(132, 92, "libra", &Font16, colorSecond, colorMain);
 8012672:	4b20      	ldr	r3, [pc, #128]	; (80126f4 <settingsDrawSubs+0xcc>)
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	b2db      	uxtb	r3, r3
 8012678:	b29b      	uxth	r3, r3
 801267a:	4a1f      	ldr	r2, [pc, #124]	; (80126f8 <settingsDrawSubs+0xd0>)
 801267c:	7812      	ldrb	r2, [r2, #0]
 801267e:	b2d2      	uxtb	r2, r2
 8012680:	b292      	uxth	r2, r2
 8012682:	481f      	ldr	r0, [pc, #124]	; (8012700 <settingsDrawSubs+0xd8>)
 8012684:	491f      	ldr	r1, [pc, #124]	; (8012704 <settingsDrawSubs+0xdc>)
 8012686:	9201      	str	r2, [sp, #4]
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	0003      	movs	r3, r0
 801268c:	000a      	movs	r2, r1
 801268e:	215c      	movs	r1, #92	; 0x5c
 8012690:	2084      	movs	r0, #132	; 0x84
 8012692:	f7f7 f9e1 	bl	8009a58 <Paint_DrawString_EN>

	Paint_DrawLine(0, 75, 122, 75, colorSecond, DOT_PIXEL_1X1,
 8012696:	4b17      	ldr	r3, [pc, #92]	; (80126f4 <settingsDrawSubs+0xcc>)
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	b2db      	uxtb	r3, r3
 801269c:	b29b      	uxth	r3, r3
 801269e:	2200      	movs	r2, #0
 80126a0:	9202      	str	r2, [sp, #8]
 80126a2:	2201      	movs	r2, #1
 80126a4:	9201      	str	r2, [sp, #4]
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	234b      	movs	r3, #75	; 0x4b
 80126aa:	227a      	movs	r2, #122	; 0x7a
 80126ac:	214b      	movs	r1, #75	; 0x4b
 80126ae:	2000      	movs	r0, #0
 80126b0:	f7f6 fc08 	bl	8008ec4 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 118, 122, 118, colorSecond, DOT_PIXEL_1X1,
 80126b4:	4b0f      	ldr	r3, [pc, #60]	; (80126f4 <settingsDrawSubs+0xcc>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	2200      	movs	r2, #0
 80126be:	9202      	str	r2, [sp, #8]
 80126c0:	2201      	movs	r2, #1
 80126c2:	9201      	str	r2, [sp, #4]
 80126c4:	9300      	str	r3, [sp, #0]
 80126c6:	2376      	movs	r3, #118	; 0x76
 80126c8:	227a      	movs	r2, #122	; 0x7a
 80126ca:	2176      	movs	r1, #118	; 0x76
 80126cc:	2000      	movs	r0, #0
 80126ce:	f7f6 fbf9 	bl	8008ec4 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	Paint_DrawCircle(200, 100, 80, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 80126d2:	4b08      	ldr	r3, [pc, #32]	; (80126f4 <settingsDrawSubs+0xcc>)
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	b2db      	uxtb	r3, r3
 80126d8:	b29b      	uxth	r3, r3
 80126da:	2200      	movs	r2, #0
 80126dc:	9201      	str	r2, [sp, #4]
 80126de:	2202      	movs	r2, #2
 80126e0:	9200      	str	r2, [sp, #0]
 80126e2:	2250      	movs	r2, #80	; 0x50
 80126e4:	2164      	movs	r1, #100	; 0x64
 80126e6:	20c8      	movs	r0, #200	; 0xc8
 80126e8:	f7f6 fe80 	bl	80093ec <Paint_DrawCircle>

}
 80126ec:	46c0      	nop			; (mov r8, r8)
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	46c0      	nop			; (mov r8, r8)
 80126f4:	200006b3 	.word	0x200006b3
 80126f8:	2000033a 	.word	0x2000033a
 80126fc:	2000001c 	.word	0x2000001c
 8012700:	20000014 	.word	0x20000014
 8012704:	080162dc 	.word	0x080162dc

08012708 <settingsDrawPointer>:

void settingsDrawPointer(void) {
 8012708:	b5b0      	push	{r4, r5, r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af04      	add	r7, sp, #16
	if (settingsPointer == SETTINGS_HOURS) {
 801270e:	4baf      	ldr	r3, [pc, #700]	; (80129cc <settingsDrawPointer+0x2c4>)
 8012710:	781b      	ldrb	r3, [r3, #0]

	}

	switch (settingsPointer) {
 8012712:	4bae      	ldr	r3, [pc, #696]	; (80129cc <settingsDrawPointer+0x2c4>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	b2db      	uxtb	r3, r3
 8012718:	2b0a      	cmp	r3, #10
 801271a:	d900      	bls.n	801271e <settingsDrawPointer+0x16>
 801271c:	e152      	b.n	80129c4 <settingsDrawPointer+0x2bc>
 801271e:	009a      	lsls	r2, r3, #2
 8012720:	4bab      	ldr	r3, [pc, #684]	; (80129d0 <settingsDrawPointer+0x2c8>)
 8012722:	18d3      	adds	r3, r2, r3
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	469f      	mov	pc, r3
	case SETTINGS_HOURS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 8012728:	4baa      	ldr	r3, [pc, #680]	; (80129d4 <settingsDrawPointer+0x2cc>)
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	b29b      	uxth	r3, r3
 801272e:	3303      	adds	r3, #3
 8012730:	b298      	uxth	r0, r3
 8012732:	4ba9      	ldr	r3, [pc, #676]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012734:	7c1b      	ldrb	r3, [r3, #16]
 8012736:	b29b      	uxth	r3, r3
 8012738:	330f      	adds	r3, #15
 801273a:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 801273c:	4ba5      	ldr	r3, [pc, #660]	; (80129d4 <settingsDrawPointer+0x2cc>)
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 8012742:	3314      	adds	r3, #20
 8012744:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 8012746:	4ba4      	ldr	r3, [pc, #656]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012748:	7c1b      	ldrb	r3, [r3, #16]
 801274a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 801274c:	330f      	adds	r3, #15
 801274e:	b29c      	uxth	r4, r3
 8012750:	4ba2      	ldr	r3, [pc, #648]	; (80129dc <settingsDrawPointer+0x2d4>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	b2db      	uxtb	r3, r3
 8012756:	b29b      	uxth	r3, r3
 8012758:	2500      	movs	r5, #0
 801275a:	9502      	str	r5, [sp, #8]
 801275c:	2502      	movs	r5, #2
 801275e:	9501      	str	r5, [sp, #4]
 8012760:	9300      	str	r3, [sp, #0]
 8012762:	0023      	movs	r3, r4
 8012764:	f7f6 fbae 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // hour
		break;
 8012768:	e12c      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_MINUTES:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 801276a:	4b9a      	ldr	r3, [pc, #616]	; (80129d4 <settingsDrawPointer+0x2cc>)
 801276c:	78db      	ldrb	r3, [r3, #3]
 801276e:	b29b      	uxth	r3, r3
 8012770:	3303      	adds	r3, #3
 8012772:	b298      	uxth	r0, r3
 8012774:	4b98      	ldr	r3, [pc, #608]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012776:	7c1b      	ldrb	r3, [r3, #16]
 8012778:	b29b      	uxth	r3, r3
 801277a:	330f      	adds	r3, #15
 801277c:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 801277e:	4b95      	ldr	r3, [pc, #596]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012780:	78db      	ldrb	r3, [r3, #3]
 8012782:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 8012784:	3314      	adds	r3, #20
 8012786:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 8012788:	4b93      	ldr	r3, [pc, #588]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801278a:	7c1b      	ldrb	r3, [r3, #16]
 801278c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 801278e:	330f      	adds	r3, #15
 8012790:	b29c      	uxth	r4, r3
 8012792:	4b92      	ldr	r3, [pc, #584]	; (80129dc <settingsDrawPointer+0x2d4>)
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	b2db      	uxtb	r3, r3
 8012798:	b29b      	uxth	r3, r3
 801279a:	2500      	movs	r5, #0
 801279c:	9502      	str	r5, [sp, #8]
 801279e:	2502      	movs	r5, #2
 80127a0:	9501      	str	r5, [sp, #4]
 80127a2:	9300      	str	r3, [sp, #0]
 80127a4:	0023      	movs	r3, r4
 80127a6:	f7f6 fb8d 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // minute
		break;
 80127aa:	e10b      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_SECONDS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 80127ac:	4b89      	ldr	r3, [pc, #548]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80127ae:	799b      	ldrb	r3, [r3, #6]
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	3303      	adds	r3, #3
 80127b4:	b298      	uxth	r0, r3
 80127b6:	4b88      	ldr	r3, [pc, #544]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80127b8:	7c1b      	ldrb	r3, [r3, #16]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	330f      	adds	r3, #15
 80127be:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 80127c0:	4b84      	ldr	r3, [pc, #528]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80127c2:	799b      	ldrb	r3, [r3, #6]
 80127c4:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 80127c6:	3314      	adds	r3, #20
 80127c8:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 80127ca:	4b83      	ldr	r3, [pc, #524]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80127cc:	7c1b      	ldrb	r3, [r3, #16]
 80127ce:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 80127d0:	330f      	adds	r3, #15
 80127d2:	b29c      	uxth	r4, r3
 80127d4:	4b81      	ldr	r3, [pc, #516]	; (80129dc <settingsDrawPointer+0x2d4>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	b29b      	uxth	r3, r3
 80127dc:	2500      	movs	r5, #0
 80127de:	9502      	str	r5, [sp, #8]
 80127e0:	2502      	movs	r5, #2
 80127e2:	9501      	str	r5, [sp, #4]
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	0023      	movs	r3, r4
 80127e8:	f7f6 fb6c 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // second
		break;
 80127ec:	e0ea      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_DAYS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 80127ee:	4b79      	ldr	r3, [pc, #484]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	3303      	adds	r3, #3
 80127f6:	b298      	uxth	r0, r3
 80127f8:	4b77      	ldr	r3, [pc, #476]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80127fa:	7d1b      	ldrb	r3, [r3, #20]
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	330f      	adds	r3, #15
 8012800:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 8012802:	4b74      	ldr	r3, [pc, #464]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 8012808:	3314      	adds	r3, #20
 801280a:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 801280c:	4b72      	ldr	r3, [pc, #456]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801280e:	7d1b      	ldrb	r3, [r3, #20]
 8012810:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 8012812:	330f      	adds	r3, #15
 8012814:	b29c      	uxth	r4, r3
 8012816:	4b71      	ldr	r3, [pc, #452]	; (80129dc <settingsDrawPointer+0x2d4>)
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	b2db      	uxtb	r3, r3
 801281c:	b29b      	uxth	r3, r3
 801281e:	2500      	movs	r5, #0
 8012820:	9502      	str	r5, [sp, #8]
 8012822:	2502      	movs	r5, #2
 8012824:	9501      	str	r5, [sp, #4]
 8012826:	9300      	str	r3, [sp, #0]
 8012828:	0023      	movs	r3, r4
 801282a:	f7f6 fb4b 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // day
		break;
 801282e:	e0c9      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_MONTHS:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 8012830:	4b68      	ldr	r3, [pc, #416]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012832:	78db      	ldrb	r3, [r3, #3]
 8012834:	b29b      	uxth	r3, r3
 8012836:	3303      	adds	r3, #3
 8012838:	b298      	uxth	r0, r3
 801283a:	4b67      	ldr	r3, [pc, #412]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801283c:	7d1b      	ldrb	r3, [r3, #20]
 801283e:	b29b      	uxth	r3, r3
 8012840:	330f      	adds	r3, #15
 8012842:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 8012844:	4b63      	ldr	r3, [pc, #396]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012846:	78db      	ldrb	r3, [r3, #3]
 8012848:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 801284a:	3314      	adds	r3, #20
 801284c:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 801284e:	4b62      	ldr	r3, [pc, #392]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012850:	7d1b      	ldrb	r3, [r3, #20]
 8012852:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 8012854:	330f      	adds	r3, #15
 8012856:	b29c      	uxth	r4, r3
 8012858:	4b60      	ldr	r3, [pc, #384]	; (80129dc <settingsDrawPointer+0x2d4>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	b2db      	uxtb	r3, r3
 801285e:	b29b      	uxth	r3, r3
 8012860:	2500      	movs	r5, #0
 8012862:	9502      	str	r5, [sp, #8]
 8012864:	2502      	movs	r5, #2
 8012866:	9501      	str	r5, [sp, #4]
 8012868:	9300      	str	r3, [sp, #0]
 801286a:	0023      	movs	r3, r4
 801286c:	f7f6 fb2a 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // month
		break;
 8012870:	e0a8      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_YEARS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 8012872:	4b58      	ldr	r3, [pc, #352]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012874:	799b      	ldrb	r3, [r3, #6]
 8012876:	b29b      	uxth	r3, r3
 8012878:	3303      	adds	r3, #3
 801287a:	b298      	uxth	r0, r3
 801287c:	4b56      	ldr	r3, [pc, #344]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801287e:	7d1b      	ldrb	r3, [r3, #20]
 8012880:	b29b      	uxth	r3, r3
 8012882:	330f      	adds	r3, #15
 8012884:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 8012886:	4b53      	ldr	r3, [pc, #332]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012888:	799b      	ldrb	r3, [r3, #6]
 801288a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 801288c:	3314      	adds	r3, #20
 801288e:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 8012890:	4b51      	ldr	r3, [pc, #324]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 8012896:	330f      	adds	r3, #15
 8012898:	b29c      	uxth	r4, r3
 801289a:	4b50      	ldr	r3, [pc, #320]	; (80129dc <settingsDrawPointer+0x2d4>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	2500      	movs	r5, #0
 80128a4:	9502      	str	r5, [sp, #8]
 80128a6:	2502      	movs	r5, #2
 80128a8:	9501      	str	r5, [sp, #4]
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	0023      	movs	r3, r4
 80128ae:	f7f6 fb09 	bl	8008ec4 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 80128b2:	e087      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_LAYOUT:
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 80128b4:	4b47      	ldr	r3, [pc, #284]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80128b6:	79db      	ldrb	r3, [r3, #7]
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	3303      	adds	r3, #3
 80128bc:	b298      	uxth	r0, r3
 80128be:	4b46      	ldr	r3, [pc, #280]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80128c0:	7e1b      	ldrb	r3, [r3, #24]
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	330f      	adds	r3, #15
 80128c6:	b299      	uxth	r1, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 80128c8:	4b42      	ldr	r3, [pc, #264]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80128ca:	79db      	ldrb	r3, [r3, #7]
 80128cc:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 80128ce:	330f      	adds	r3, #15
 80128d0:	b29a      	uxth	r2, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 80128d2:	4b41      	ldr	r3, [pc, #260]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80128d4:	7e1b      	ldrb	r3, [r3, #24]
 80128d6:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 80128d8:	330f      	adds	r3, #15
 80128da:	b29c      	uxth	r4, r3
 80128dc:	4b3f      	ldr	r3, [pc, #252]	; (80129dc <settingsDrawPointer+0x2d4>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	2500      	movs	r5, #0
 80128e6:	9502      	str	r5, [sp, #8]
 80128e8:	2502      	movs	r5, #2
 80128ea:	9501      	str	r5, [sp, #4]
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	0023      	movs	r3, r4
 80128f0:	f7f6 fae8 	bl	8008ec4 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 80128f4:	e066      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_COLOR:
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 80128f6:	4b37      	ldr	r3, [pc, #220]	; (80129d4 <settingsDrawPointer+0x2cc>)
 80128f8:	79db      	ldrb	r3, [r3, #7]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	3303      	adds	r3, #3
 80128fe:	b298      	uxth	r0, r3
 8012900:	4b35      	ldr	r3, [pc, #212]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012902:	7f1b      	ldrb	r3, [r3, #28]
 8012904:	b29b      	uxth	r3, r3
 8012906:	330f      	adds	r3, #15
 8012908:	b299      	uxth	r1, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 801290a:	4b32      	ldr	r3, [pc, #200]	; (80129d4 <settingsDrawPointer+0x2cc>)
 801290c:	79db      	ldrb	r3, [r3, #7]
 801290e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 8012910:	330f      	adds	r3, #15
 8012912:	b29a      	uxth	r2, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 8012914:	4b30      	ldr	r3, [pc, #192]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012916:	7f1b      	ldrb	r3, [r3, #28]
 8012918:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 801291a:	330f      	adds	r3, #15
 801291c:	b29c      	uxth	r4, r3
 801291e:	4b2f      	ldr	r3, [pc, #188]	; (80129dc <settingsDrawPointer+0x2d4>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	b2db      	uxtb	r3, r3
 8012924:	b29b      	uxth	r3, r3
 8012926:	2500      	movs	r5, #0
 8012928:	9502      	str	r5, [sp, #8]
 801292a:	2502      	movs	r5, #2
 801292c:	9501      	str	r5, [sp, #4]
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	0023      	movs	r3, r4
 8012932:	f7f6 fac7 	bl	8008ec4 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 8012936:	e045      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_PRESS_REF:
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 8012938:	4b26      	ldr	r3, [pc, #152]	; (80129d4 <settingsDrawPointer+0x2cc>)
 801293a:	7a5b      	ldrb	r3, [r3, #9]
 801293c:	b29b      	uxth	r3, r3
 801293e:	3303      	adds	r3, #3
 8012940:	b298      	uxth	r0, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 8012942:	4b25      	ldr	r3, [pc, #148]	; (80129d8 <settingsDrawPointer+0x2d0>)
 8012944:	2220      	movs	r2, #32
 8012946:	5c9b      	ldrb	r3, [r3, r2]
 8012948:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 801294a:	330f      	adds	r3, #15
 801294c:	b299      	uxth	r1, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 801294e:	4b21      	ldr	r3, [pc, #132]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012950:	7a5b      	ldrb	r3, [r3, #9]
 8012952:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 8012954:	331e      	adds	r3, #30
 8012956:	b29a      	uxth	r2, r3
				line[LINE_PRESS_REF] + 15, colorSecond, DOT_PIXEL_2X2,
 8012958:	4b1f      	ldr	r3, [pc, #124]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801295a:	2420      	movs	r4, #32
 801295c:	5d1b      	ldrb	r3, [r3, r4]
 801295e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 8012960:	330f      	adds	r3, #15
 8012962:	b29c      	uxth	r4, r3
 8012964:	4b1d      	ldr	r3, [pc, #116]	; (80129dc <settingsDrawPointer+0x2d4>)
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	b2db      	uxtb	r3, r3
 801296a:	b29b      	uxth	r3, r3
 801296c:	2500      	movs	r5, #0
 801296e:	9502      	str	r5, [sp, #8]
 8012970:	2502      	movs	r5, #2
 8012972:	9501      	str	r5, [sp, #4]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	0023      	movs	r3, r4
 8012978:	f7f6 faa4 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 801297c:	e022      	b.n	80129c4 <settingsDrawPointer+0x2bc>

	case SETTINGS_TEMP_CMP:
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 801297e:	4b15      	ldr	r3, [pc, #84]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012980:	7b1b      	ldrb	r3, [r3, #12]
 8012982:	b29b      	uxth	r3, r3
 8012984:	3303      	adds	r3, #3
 8012986:	b298      	uxth	r0, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 8012988:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <settingsDrawPointer+0x2d0>)
 801298a:	2224      	movs	r2, #36	; 0x24
 801298c:	5c9b      	ldrb	r3, [r3, r2]
 801298e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 8012990:	330f      	adds	r3, #15
 8012992:	b299      	uxth	r1, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 8012994:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <settingsDrawPointer+0x2cc>)
 8012996:	7b1b      	ldrb	r3, [r3, #12]
 8012998:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 801299a:	330f      	adds	r3, #15
 801299c:	b29a      	uxth	r2, r3
				line[LINE_TEMP_CMP] + 15, colorSecond, DOT_PIXEL_2X2,
 801299e:	4b0e      	ldr	r3, [pc, #56]	; (80129d8 <settingsDrawPointer+0x2d0>)
 80129a0:	2424      	movs	r4, #36	; 0x24
 80129a2:	5d1b      	ldrb	r3, [r3, r4]
 80129a4:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 80129a6:	330f      	adds	r3, #15
 80129a8:	b29c      	uxth	r4, r3
 80129aa:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <settingsDrawPointer+0x2d4>)
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	2500      	movs	r5, #0
 80129b4:	9502      	str	r5, [sp, #8]
 80129b6:	2502      	movs	r5, #2
 80129b8:	9501      	str	r5, [sp, #4]
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	0023      	movs	r3, r4
 80129be:	f7f6 fa81 	bl	8008ec4 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 80129c2:	46c0      	nop			; (mov r8, r8)

	}

}
 80129c4:	46c0      	nop			; (mov r8, r8)
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bdb0      	pop	{r4, r5, r7, pc}
 80129ca:	46c0      	nop			; (mov r8, r8)
 80129cc:	200003b9 	.word	0x200003b9
 80129d0:	08018674 	.word	0x08018674
 80129d4:	20000074 	.word	0x20000074
 80129d8:	2000004c 	.word	0x2000004c
 80129dc:	200006b3 	.word	0x200006b3

080129e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80129e6:	4b11      	ldr	r3, [pc, #68]	; (8012a2c <HAL_MspInit+0x4c>)
 80129e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80129ea:	4b10      	ldr	r3, [pc, #64]	; (8012a2c <HAL_MspInit+0x4c>)
 80129ec:	2101      	movs	r1, #1
 80129ee:	430a      	orrs	r2, r1
 80129f0:	641a      	str	r2, [r3, #64]	; 0x40
 80129f2:	4b0e      	ldr	r3, [pc, #56]	; (8012a2c <HAL_MspInit+0x4c>)
 80129f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129f6:	2201      	movs	r2, #1
 80129f8:	4013      	ands	r3, r2
 80129fa:	607b      	str	r3, [r7, #4]
 80129fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80129fe:	4b0b      	ldr	r3, [pc, #44]	; (8012a2c <HAL_MspInit+0x4c>)
 8012a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a02:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <HAL_MspInit+0x4c>)
 8012a04:	2180      	movs	r1, #128	; 0x80
 8012a06:	0549      	lsls	r1, r1, #21
 8012a08:	430a      	orrs	r2, r1
 8012a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8012a0c:	4b07      	ldr	r3, [pc, #28]	; (8012a2c <HAL_MspInit+0x4c>)
 8012a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a10:	2380      	movs	r3, #128	; 0x80
 8012a12:	055b      	lsls	r3, r3, #21
 8012a14:	4013      	ands	r3, r2
 8012a16:	603b      	str	r3, [r7, #0]
 8012a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8012a1a:	2380      	movs	r3, #128	; 0x80
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	0018      	movs	r0, r3
 8012a20:	f7f0 fdb2 	bl	8003588 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012a24:	46c0      	nop			; (mov r8, r8)
 8012a26:	46bd      	mov	sp, r7
 8012a28:	b002      	add	sp, #8
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	40021000 	.word	0x40021000

08012a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b097      	sub	sp, #92	; 0x5c
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a38:	2344      	movs	r3, #68	; 0x44
 8012a3a:	18fb      	adds	r3, r7, r3
 8012a3c:	0018      	movs	r0, r3
 8012a3e:	2314      	movs	r3, #20
 8012a40:	001a      	movs	r2, r3
 8012a42:	2100      	movs	r1, #0
 8012a44:	f000 fb7a 	bl	801313c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012a48:	2410      	movs	r4, #16
 8012a4a:	193b      	adds	r3, r7, r4
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	2334      	movs	r3, #52	; 0x34
 8012a50:	001a      	movs	r2, r3
 8012a52:	2100      	movs	r1, #0
 8012a54:	f000 fb72 	bl	801313c <memset>
  if(hadc->Instance==ADC1)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a35      	ldr	r2, [pc, #212]	; (8012b34 <HAL_ADC_MspInit+0x104>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d164      	bne.n	8012b2c <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8012a62:	193b      	adds	r3, r7, r4
 8012a64:	2280      	movs	r2, #128	; 0x80
 8012a66:	01d2      	lsls	r2, r2, #7
 8012a68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8012a6a:	193b      	adds	r3, r7, r4
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012a70:	193b      	adds	r3, r7, r4
 8012a72:	0018      	movs	r0, r3
 8012a74:	f7f3 fdf2 	bl	800665c <HAL_RCCEx_PeriphCLKConfig>
 8012a78:	1e03      	subs	r3, r0, #0
 8012a7a:	d001      	beq.n	8012a80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8012a7c:	f7fd fed2 	bl	8010824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8012a80:	4b2d      	ldr	r3, [pc, #180]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a84:	4b2c      	ldr	r3, [pc, #176]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012a86:	2180      	movs	r1, #128	; 0x80
 8012a88:	0349      	lsls	r1, r1, #13
 8012a8a:	430a      	orrs	r2, r1
 8012a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8012a8e:	4b2a      	ldr	r3, [pc, #168]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a92:	2380      	movs	r3, #128	; 0x80
 8012a94:	035b      	lsls	r3, r3, #13
 8012a96:	4013      	ands	r3, r2
 8012a98:	60fb      	str	r3, [r7, #12]
 8012a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a9c:	4b26      	ldr	r3, [pc, #152]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012aa0:	4b25      	ldr	r3, [pc, #148]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012aa2:	2101      	movs	r1, #1
 8012aa4:	430a      	orrs	r2, r1
 8012aa6:	635a      	str	r2, [r3, #52]	; 0x34
 8012aa8:	4b23      	ldr	r3, [pc, #140]	; (8012b38 <HAL_ADC_MspInit+0x108>)
 8012aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aac:	2201      	movs	r2, #1
 8012aae:	4013      	ands	r3, r2
 8012ab0:	60bb      	str	r3, [r7, #8]
 8012ab2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PASSIVE_Pin|BATT_Pin|ACTIVE_Pin;
 8012ab4:	2144      	movs	r1, #68	; 0x44
 8012ab6:	187b      	adds	r3, r7, r1
 8012ab8:	2223      	movs	r2, #35	; 0x23
 8012aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012abc:	187b      	adds	r3, r7, r1
 8012abe:	2203      	movs	r2, #3
 8012ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ac2:	187b      	adds	r3, r7, r1
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ac8:	187a      	adds	r2, r7, r1
 8012aca:	23a0      	movs	r3, #160	; 0xa0
 8012acc:	05db      	lsls	r3, r3, #23
 8012ace:	0011      	movs	r1, r2
 8012ad0:	0018      	movs	r0, r3
 8012ad2:	f7f2 f8df 	bl	8004c94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8012ad6:	4b19      	ldr	r3, [pc, #100]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012ad8:	4a19      	ldr	r2, [pc, #100]	; (8012b40 <HAL_ADC_MspInit+0x110>)
 8012ada:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8012adc:	4b17      	ldr	r3, [pc, #92]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012ade:	2205      	movs	r2, #5
 8012ae0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012ae2:	4b16      	ldr	r3, [pc, #88]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8012ae8:	4b14      	ldr	r3, [pc, #80]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012aea:	2200      	movs	r2, #0
 8012aec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8012aee:	4b13      	ldr	r3, [pc, #76]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012af0:	2280      	movs	r2, #128	; 0x80
 8012af2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8012af4:	4b11      	ldr	r3, [pc, #68]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012af6:	2280      	movs	r2, #128	; 0x80
 8012af8:	0052      	lsls	r2, r2, #1
 8012afa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8012afc:	4b0f      	ldr	r3, [pc, #60]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012afe:	2280      	movs	r2, #128	; 0x80
 8012b00:	00d2      	lsls	r2, r2, #3
 8012b02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8012b04:	4b0d      	ldr	r3, [pc, #52]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012b06:	2220      	movs	r2, #32
 8012b08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8012b0a:	4b0c      	ldr	r3, [pc, #48]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8012b10:	4b0a      	ldr	r3, [pc, #40]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012b12:	0018      	movs	r0, r3
 8012b14:	f7f1 fccc 	bl	80044b0 <HAL_DMA_Init>
 8012b18:	1e03      	subs	r3, r0, #0
 8012b1a:	d001      	beq.n	8012b20 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8012b1c:	f7fd fe82 	bl	8010824 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4a06      	ldr	r2, [pc, #24]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012b24:	651a      	str	r2, [r3, #80]	; 0x50
 8012b26:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <HAL_ADC_MspInit+0x10c>)
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8012b2c:	46c0      	nop			; (mov r8, r8)
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	b017      	add	sp, #92	; 0x5c
 8012b32:	bd90      	pop	{r4, r7, pc}
 8012b34:	40012400 	.word	0x40012400
 8012b38:	40021000 	.word	0x40021000
 8012b3c:	20000714 	.word	0x20000714
 8012b40:	40020008 	.word	0x40020008

08012b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8012b44:	b590      	push	{r4, r7, lr}
 8012b46:	b097      	sub	sp, #92	; 0x5c
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b4c:	2344      	movs	r3, #68	; 0x44
 8012b4e:	18fb      	adds	r3, r7, r3
 8012b50:	0018      	movs	r0, r3
 8012b52:	2314      	movs	r3, #20
 8012b54:	001a      	movs	r2, r3
 8012b56:	2100      	movs	r1, #0
 8012b58:	f000 faf0 	bl	801313c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012b5c:	2410      	movs	r4, #16
 8012b5e:	193b      	adds	r3, r7, r4
 8012b60:	0018      	movs	r0, r3
 8012b62:	2334      	movs	r3, #52	; 0x34
 8012b64:	001a      	movs	r2, r3
 8012b66:	2100      	movs	r1, #0
 8012b68:	f000 fae8 	bl	801313c <memset>
  if(hi2c->Instance==I2C1)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	4a22      	ldr	r2, [pc, #136]	; (8012bfc <HAL_I2C_MspInit+0xb8>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d13e      	bne.n	8012bf4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012b76:	193b      	adds	r3, r7, r4
 8012b78:	2220      	movs	r2, #32
 8012b7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012b7c:	193b      	adds	r3, r7, r4
 8012b7e:	2200      	movs	r2, #0
 8012b80:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012b82:	193b      	adds	r3, r7, r4
 8012b84:	0018      	movs	r0, r3
 8012b86:	f7f3 fd69 	bl	800665c <HAL_RCCEx_PeriphCLKConfig>
 8012b8a:	1e03      	subs	r3, r0, #0
 8012b8c:	d001      	beq.n	8012b92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8012b8e:	f7fd fe49 	bl	8010824 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012b92:	4b1b      	ldr	r3, [pc, #108]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b96:	4b1a      	ldr	r3, [pc, #104]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012b98:	2102      	movs	r1, #2
 8012b9a:	430a      	orrs	r2, r1
 8012b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8012b9e:	4b18      	ldr	r3, [pc, #96]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ba2:	2202      	movs	r2, #2
 8012ba4:	4013      	ands	r3, r2
 8012ba6:	60fb      	str	r3, [r7, #12]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8012baa:	2144      	movs	r1, #68	; 0x44
 8012bac:	187b      	adds	r3, r7, r1
 8012bae:	22c0      	movs	r2, #192	; 0xc0
 8012bb0:	0052      	lsls	r2, r2, #1
 8012bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012bb4:	187b      	adds	r3, r7, r1
 8012bb6:	2212      	movs	r2, #18
 8012bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012bba:	187b      	adds	r3, r7, r1
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bc0:	187b      	adds	r3, r7, r1
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8012bc6:	187b      	adds	r3, r7, r1
 8012bc8:	2206      	movs	r2, #6
 8012bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012bcc:	187b      	adds	r3, r7, r1
 8012bce:	4a0d      	ldr	r2, [pc, #52]	; (8012c04 <HAL_I2C_MspInit+0xc0>)
 8012bd0:	0019      	movs	r1, r3
 8012bd2:	0010      	movs	r0, r2
 8012bd4:	f7f2 f85e 	bl	8004c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012bd8:	4b09      	ldr	r3, [pc, #36]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012bdc:	4b08      	ldr	r3, [pc, #32]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012bde:	2180      	movs	r1, #128	; 0x80
 8012be0:	0389      	lsls	r1, r1, #14
 8012be2:	430a      	orrs	r2, r1
 8012be4:	63da      	str	r2, [r3, #60]	; 0x3c
 8012be6:	4b06      	ldr	r3, [pc, #24]	; (8012c00 <HAL_I2C_MspInit+0xbc>)
 8012be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012bea:	2380      	movs	r3, #128	; 0x80
 8012bec:	039b      	lsls	r3, r3, #14
 8012bee:	4013      	ands	r3, r2
 8012bf0:	60bb      	str	r3, [r7, #8]
 8012bf2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8012bf4:	46c0      	nop			; (mov r8, r8)
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	b017      	add	sp, #92	; 0x5c
 8012bfa:	bd90      	pop	{r4, r7, pc}
 8012bfc:	40005400 	.word	0x40005400
 8012c00:	40021000 	.word	0x40021000
 8012c04:	50000400 	.word	0x50000400

08012c08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8012c08:	b590      	push	{r4, r7, lr}
 8012c0a:	b091      	sub	sp, #68	; 0x44
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012c10:	240c      	movs	r4, #12
 8012c12:	193b      	adds	r3, r7, r4
 8012c14:	0018      	movs	r0, r3
 8012c16:	2334      	movs	r3, #52	; 0x34
 8012c18:	001a      	movs	r2, r3
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	f000 fa8e 	bl	801313c <memset>
  if(hrtc->Instance==RTC)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a19      	ldr	r2, [pc, #100]	; (8012c8c <HAL_RTC_MspInit+0x84>)
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d12c      	bne.n	8012c84 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012c2a:	193b      	adds	r3, r7, r4
 8012c2c:	2280      	movs	r2, #128	; 0x80
 8012c2e:	0292      	lsls	r2, r2, #10
 8012c30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012c32:	193b      	adds	r3, r7, r4
 8012c34:	2280      	movs	r2, #128	; 0x80
 8012c36:	0052      	lsls	r2, r2, #1
 8012c38:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012c3a:	193b      	adds	r3, r7, r4
 8012c3c:	0018      	movs	r0, r3
 8012c3e:	f7f3 fd0d 	bl	800665c <HAL_RCCEx_PeriphCLKConfig>
 8012c42:	1e03      	subs	r3, r0, #0
 8012c44:	d001      	beq.n	8012c4a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8012c46:	f7fd fded 	bl	8010824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012c4a:	4b11      	ldr	r3, [pc, #68]	; (8012c90 <HAL_RTC_MspInit+0x88>)
 8012c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012c4e:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <HAL_RTC_MspInit+0x88>)
 8012c50:	2180      	movs	r1, #128	; 0x80
 8012c52:	0209      	lsls	r1, r1, #8
 8012c54:	430a      	orrs	r2, r1
 8012c56:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012c58:	4b0d      	ldr	r3, [pc, #52]	; (8012c90 <HAL_RTC_MspInit+0x88>)
 8012c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c5c:	4b0c      	ldr	r3, [pc, #48]	; (8012c90 <HAL_RTC_MspInit+0x88>)
 8012c5e:	2180      	movs	r1, #128	; 0x80
 8012c60:	00c9      	lsls	r1, r1, #3
 8012c62:	430a      	orrs	r2, r1
 8012c64:	63da      	str	r2, [r3, #60]	; 0x3c
 8012c66:	4b0a      	ldr	r3, [pc, #40]	; (8012c90 <HAL_RTC_MspInit+0x88>)
 8012c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c6a:	2380      	movs	r3, #128	; 0x80
 8012c6c:	00db      	lsls	r3, r3, #3
 8012c6e:	4013      	ands	r3, r2
 8012c70:	60bb      	str	r3, [r7, #8]
 8012c72:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 1, 0);
 8012c74:	2200      	movs	r2, #0
 8012c76:	2101      	movs	r1, #1
 8012c78:	2002      	movs	r0, #2
 8012c7a:	f7f1 fbe7 	bl	800444c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8012c7e:	2002      	movs	r0, #2
 8012c80:	f7f1 fbf9 	bl	8004476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012c84:	46c0      	nop			; (mov r8, r8)
 8012c86:	46bd      	mov	sp, r7
 8012c88:	b011      	add	sp, #68	; 0x44
 8012c8a:	bd90      	pop	{r4, r7, pc}
 8012c8c:	40002800 	.word	0x40002800
 8012c90:	40021000 	.word	0x40021000

08012c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012c94:	b590      	push	{r4, r7, lr}
 8012c96:	b08b      	sub	sp, #44	; 0x2c
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c9c:	2414      	movs	r4, #20
 8012c9e:	193b      	adds	r3, r7, r4
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	2314      	movs	r3, #20
 8012ca4:	001a      	movs	r2, r3
 8012ca6:	2100      	movs	r1, #0
 8012ca8:	f000 fa48 	bl	801313c <memset>
  if(hspi->Instance==SPI1)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a2c      	ldr	r2, [pc, #176]	; (8012d64 <HAL_SPI_MspInit+0xd0>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d151      	bne.n	8012d5a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012cb6:	4b2c      	ldr	r3, [pc, #176]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012cba:	4b2b      	ldr	r3, [pc, #172]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cbc:	2180      	movs	r1, #128	; 0x80
 8012cbe:	0149      	lsls	r1, r1, #5
 8012cc0:	430a      	orrs	r2, r1
 8012cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8012cc4:	4b28      	ldr	r3, [pc, #160]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012cc8:	2380      	movs	r3, #128	; 0x80
 8012cca:	015b      	lsls	r3, r3, #5
 8012ccc:	4013      	ands	r3, r2
 8012cce:	613b      	str	r3, [r7, #16]
 8012cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cd2:	4b25      	ldr	r3, [pc, #148]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cd6:	4b24      	ldr	r3, [pc, #144]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cd8:	2101      	movs	r1, #1
 8012cda:	430a      	orrs	r2, r1
 8012cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8012cde:	4b22      	ldr	r3, [pc, #136]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	4013      	ands	r3, r2
 8012ce6:	60fb      	str	r3, [r7, #12]
 8012ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cea:	4b1f      	ldr	r3, [pc, #124]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cee:	4b1e      	ldr	r3, [pc, #120]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cf0:	2102      	movs	r1, #2
 8012cf2:	430a      	orrs	r2, r1
 8012cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8012cf6:	4b1c      	ldr	r3, [pc, #112]	; (8012d68 <HAL_SPI_MspInit+0xd4>)
 8012cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cfa:	2202      	movs	r2, #2
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	60bb      	str	r3, [r7, #8]
 8012d00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8012d02:	193b      	adds	r3, r7, r4
 8012d04:	2280      	movs	r2, #128	; 0x80
 8012d06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d08:	193b      	adds	r3, r7, r4
 8012d0a:	2202      	movs	r2, #2
 8012d0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d0e:	193b      	adds	r3, r7, r4
 8012d10:	2200      	movs	r2, #0
 8012d12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012d14:	193b      	adds	r3, r7, r4
 8012d16:	2202      	movs	r2, #2
 8012d18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8012d1a:	193b      	adds	r3, r7, r4
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d20:	193a      	adds	r2, r7, r4
 8012d22:	23a0      	movs	r3, #160	; 0xa0
 8012d24:	05db      	lsls	r3, r3, #23
 8012d26:	0011      	movs	r1, r2
 8012d28:	0018      	movs	r0, r3
 8012d2a:	f7f1 ffb3 	bl	8004c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012d2e:	0021      	movs	r1, r4
 8012d30:	187b      	adds	r3, r7, r1
 8012d32:	2208      	movs	r2, #8
 8012d34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d36:	187b      	adds	r3, r7, r1
 8012d38:	2202      	movs	r2, #2
 8012d3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d3c:	187b      	adds	r3, r7, r1
 8012d3e:	2200      	movs	r2, #0
 8012d40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012d42:	187b      	adds	r3, r7, r1
 8012d44:	2202      	movs	r2, #2
 8012d46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8012d48:	187b      	adds	r3, r7, r1
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012d4e:	187b      	adds	r3, r7, r1
 8012d50:	4a06      	ldr	r2, [pc, #24]	; (8012d6c <HAL_SPI_MspInit+0xd8>)
 8012d52:	0019      	movs	r1, r3
 8012d54:	0010      	movs	r0, r2
 8012d56:	f7f1 ff9d 	bl	8004c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8012d5a:	46c0      	nop			; (mov r8, r8)
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	b00b      	add	sp, #44	; 0x2c
 8012d60:	bd90      	pop	{r4, r7, pc}
 8012d62:	46c0      	nop			; (mov r8, r8)
 8012d64:	40013000 	.word	0x40013000
 8012d68:	40021000 	.word	0x40021000
 8012d6c:	50000400 	.word	0x50000400

08012d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a0d      	ldr	r2, [pc, #52]	; (8012db4 <HAL_TIM_Base_MspInit+0x44>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d113      	bne.n	8012daa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012d82:	4b0d      	ldr	r3, [pc, #52]	; (8012db8 <HAL_TIM_Base_MspInit+0x48>)
 8012d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d86:	4b0c      	ldr	r3, [pc, #48]	; (8012db8 <HAL_TIM_Base_MspInit+0x48>)
 8012d88:	2102      	movs	r1, #2
 8012d8a:	430a      	orrs	r2, r1
 8012d8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8012d8e:	4b0a      	ldr	r3, [pc, #40]	; (8012db8 <HAL_TIM_Base_MspInit+0x48>)
 8012d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d92:	2202      	movs	r2, #2
 8012d94:	4013      	ands	r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	2010      	movs	r0, #16
 8012da0:	f7f1 fb54 	bl	800444c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012da4:	2010      	movs	r0, #16
 8012da6:	f7f1 fb66 	bl	8004476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012daa:	46c0      	nop			; (mov r8, r8)
 8012dac:	46bd      	mov	sp, r7
 8012dae:	b004      	add	sp, #16
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	46c0      	nop			; (mov r8, r8)
 8012db4:	40000400 	.word	0x40000400
 8012db8:	40021000 	.word	0x40021000

08012dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012dc0:	e7fe      	b.n	8012dc0 <NMI_Handler+0x4>

08012dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012dc6:	e7fe      	b.n	8012dc6 <HardFault_Handler+0x4>

08012dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8012dcc:	46c0      	nop			; (mov r8, r8)
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}

08012dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012dd2:	b580      	push	{r7, lr}
 8012dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012dd6:	46c0      	nop			; (mov r8, r8)
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012de0:	f7f0 fb76 	bl	80034d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012de4:	46c0      	nop			; (mov r8, r8)
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
	...

08012dec <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012df0:	4b03      	ldr	r3, [pc, #12]	; (8012e00 <RTC_TAMP_IRQHandler+0x14>)
 8012df2:	0018      	movs	r0, r3
 8012df4:	f7f4 f9f2 	bl	80071dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8012df8:	46c0      	nop			; (mov r8, r8)
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	46c0      	nop			; (mov r8, r8)
 8012e00:	20000770 	.word	0x20000770

08012e04 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8012e08:	2004      	movs	r0, #4
 8012e0a:	f7f2 f8e1 	bl	8004fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SET_Pin);
 8012e0e:	2008      	movs	r0, #8
 8012e10:	f7f2 f8de 	bl	8004fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8012e14:	46c0      	nop			; (mov r8, r8)
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8012e1e:	2010      	movs	r0, #16
 8012e20:	f7f2 f8d6 	bl	8004fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8012e24:	46c0      	nop			; (mov r8, r8)
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
	...

08012e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012e30:	4b03      	ldr	r3, [pc, #12]	; (8012e40 <DMA1_Channel1_IRQHandler+0x14>)
 8012e32:	0018      	movs	r0, r3
 8012e34:	f7f1 fc4c 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8012e38:	46c0      	nop			; (mov r8, r8)
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
 8012e3e:	46c0      	nop			; (mov r8, r8)
 8012e40:	20000714 	.word	0x20000714

08012e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8012e48:	4b03      	ldr	r3, [pc, #12]	; (8012e58 <TIM3_IRQHandler+0x14>)
 8012e4a:	0018      	movs	r0, r3
 8012e4c:	f7f4 fe26 	bl	8007a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012e50:	46c0      	nop			; (mov r8, r8)
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	46c0      	nop			; (mov r8, r8)
 8012e58:	200003c0 	.word	0x200003c0

08012e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	617b      	str	r3, [r7, #20]
 8012e6c:	e00a      	b.n	8012e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012e6e:	e000      	b.n	8012e72 <_read+0x16>
 8012e70:	bf00      	nop
 8012e72:	0001      	movs	r1, r0
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	1c5a      	adds	r2, r3, #1
 8012e78:	60ba      	str	r2, [r7, #8]
 8012e7a:	b2ca      	uxtb	r2, r1
 8012e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	3301      	adds	r3, #1
 8012e82:	617b      	str	r3, [r7, #20]
 8012e84:	697a      	ldr	r2, [r7, #20]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	dbf0      	blt.n	8012e6e <_read+0x12>
	}

return len;
 8012e8c:	687b      	ldr	r3, [r7, #4]
}
 8012e8e:	0018      	movs	r0, r3
 8012e90:	46bd      	mov	sp, r7
 8012e92:	b006      	add	sp, #24
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b086      	sub	sp, #24
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	60f8      	str	r0, [r7, #12]
 8012e9e:	60b9      	str	r1, [r7, #8]
 8012ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	617b      	str	r3, [r7, #20]
 8012ea6:	e009      	b.n	8012ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	1c5a      	adds	r2, r3, #1
 8012eac:	60ba      	str	r2, [r7, #8]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	0018      	movs	r0, r3
 8012eb2:	e000      	b.n	8012eb6 <_write+0x20>
 8012eb4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	617b      	str	r3, [r7, #20]
 8012ebc:	697a      	ldr	r2, [r7, #20]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	dbf1      	blt.n	8012ea8 <_write+0x12>
	}
	return len;
 8012ec4:	687b      	ldr	r3, [r7, #4]
}
 8012ec6:	0018      	movs	r0, r3
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	b006      	add	sp, #24
 8012ecc:	bd80      	pop	{r7, pc}

08012ece <_close>:

int _close(int file)
{
 8012ece:	b580      	push	{r7, lr}
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	425b      	negs	r3, r3
}
 8012eda:	0018      	movs	r0, r3
 8012edc:	46bd      	mov	sp, r7
 8012ede:	b002      	add	sp, #8
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b082      	sub	sp, #8
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
 8012eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2280      	movs	r2, #128	; 0x80
 8012ef0:	0192      	lsls	r2, r2, #6
 8012ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8012ef4:	2300      	movs	r3, #0
}
 8012ef6:	0018      	movs	r0, r3
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	b002      	add	sp, #8
 8012efc:	bd80      	pop	{r7, pc}

08012efe <_isatty>:

int _isatty(int file)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b082      	sub	sp, #8
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
	return 1;
 8012f06:	2301      	movs	r3, #1
}
 8012f08:	0018      	movs	r0, r3
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	b002      	add	sp, #8
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	0018      	movs	r0, r3
 8012f20:	46bd      	mov	sp, r7
 8012f22:	b004      	add	sp, #16
 8012f24:	bd80      	pop	{r7, pc}
	...

08012f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b086      	sub	sp, #24
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012f30:	4a14      	ldr	r2, [pc, #80]	; (8012f84 <_sbrk+0x5c>)
 8012f32:	4b15      	ldr	r3, [pc, #84]	; (8012f88 <_sbrk+0x60>)
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012f3c:	4b13      	ldr	r3, [pc, #76]	; (8012f8c <_sbrk+0x64>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d102      	bne.n	8012f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012f44:	4b11      	ldr	r3, [pc, #68]	; (8012f8c <_sbrk+0x64>)
 8012f46:	4a12      	ldr	r2, [pc, #72]	; (8012f90 <_sbrk+0x68>)
 8012f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012f4a:	4b10      	ldr	r3, [pc, #64]	; (8012f8c <_sbrk+0x64>)
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	18d3      	adds	r3, r2, r3
 8012f52:	693a      	ldr	r2, [r7, #16]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d207      	bcs.n	8012f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012f58:	f000 f8bc 	bl	80130d4 <__errno>
 8012f5c:	0003      	movs	r3, r0
 8012f5e:	220c      	movs	r2, #12
 8012f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012f62:	2301      	movs	r3, #1
 8012f64:	425b      	negs	r3, r3
 8012f66:	e009      	b.n	8012f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012f68:	4b08      	ldr	r3, [pc, #32]	; (8012f8c <_sbrk+0x64>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012f6e:	4b07      	ldr	r3, [pc, #28]	; (8012f8c <_sbrk+0x64>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	18d2      	adds	r2, r2, r3
 8012f76:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <_sbrk+0x64>)
 8012f78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
}
 8012f7c:	0018      	movs	r0, r3
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	b006      	add	sp, #24
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20009000 	.word	0x20009000
 8012f88:	00000400 	.word	0x00000400
 8012f8c:	200001c8 	.word	0x200001c8
 8012f90:	20000810 	.word	0x20000810

08012f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012f98:	46c0      	nop			; (mov r8, r8)
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
	...

08012fa0 <timersInit>:
#include "timers.h"

void timersInit(void) {
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8012fa4:	4b09      	ldr	r3, [pc, #36]	; (8012fcc <timersInit+0x2c>)
 8012fa6:	0018      	movs	r0, r3
 8012fa8:	f7f4 fd1c 	bl	80079e4 <HAL_TIM_Base_Start_IT>
	counterForce = 0;
 8012fac:	4b08      	ldr	r3, [pc, #32]	; (8012fd0 <timersInit+0x30>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	701a      	strb	r2, [r3, #0]
	counterMultiplePress = 0;
 8012fb2:	4b08      	ldr	r3, [pc, #32]	; (8012fd4 <timersInit+0x34>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	701a      	strb	r2, [r3, #0]
	flagLocked = UNLOCKED;
 8012fb8:	4b07      	ldr	r3, [pc, #28]	; (8012fd8 <timersInit+0x38>)
 8012fba:	2200      	movs	r2, #0
 8012fbc:	701a      	strb	r2, [r3, #0]
	counterSettings = 0;
 8012fbe:	4b07      	ldr	r3, [pc, #28]	; (8012fdc <timersInit+0x3c>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	701a      	strb	r2, [r3, #0]
}
 8012fc4:	46c0      	nop			; (mov r8, r8)
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	46c0      	nop			; (mov r8, r8)
 8012fcc:	200003c0 	.word	0x200003c0
 8012fd0:	200006da 	.word	0x200006da
 8012fd4:	200006e0 	.word	0x200006e0
 8012fd8:	200004c2 	.word	0x200004c2
 8012fdc:	20000694 	.word	0x20000694

08012fe0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4a1c      	ldr	r2, [pc, #112]	; (8013060 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d131      	bne.n	8013056 <HAL_TIM_PeriodElapsedCallback+0x76>
		if (counterForce < ON_TIME) {
 8012ff2:	4b1c      	ldr	r3, [pc, #112]	; (8013064 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	2b13      	cmp	r3, #19
 8012ffa:	d806      	bhi.n	801300a <HAL_TIM_PeriodElapsedCallback+0x2a>
			counterForce++;
 8012ffc:	4b19      	ldr	r3, [pc, #100]	; (8013064 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	b2db      	uxtb	r3, r3
 8013002:	3301      	adds	r3, #1
 8013004:	b2da      	uxtb	r2, r3
 8013006:	4b17      	ldr	r3, [pc, #92]	; (8013064 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8013008:	701a      	strb	r2, [r3, #0]
		}

		counterMultiplePress = 0;
 801300a:	4b17      	ldr	r3, [pc, #92]	; (8013068 <HAL_TIM_PeriodElapsedCallback+0x88>)
 801300c:	2200      	movs	r2, #0
 801300e:	701a      	strb	r2, [r3, #0]

		if (flagSettings == FLAG_SETTINGS_ON) {
 8013010:	4b16      	ldr	r3, [pc, #88]	; (801306c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	b2db      	uxtb	r3, r3
 8013016:	2b01      	cmp	r3, #1
 8013018:	d11d      	bne.n	8013056 <HAL_TIM_PeriodElapsedCallback+0x76>
			counterSettings--;
 801301a:	4b15      	ldr	r3, [pc, #84]	; (8013070 <HAL_TIM_PeriodElapsedCallback+0x90>)
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	b2db      	uxtb	r3, r3
 8013020:	3b01      	subs	r3, #1
 8013022:	b2da      	uxtb	r2, r3
 8013024:	4b12      	ldr	r3, [pc, #72]	; (8013070 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8013026:	701a      	strb	r2, [r3, #0]
			if (counterSettings <= 0) {
 8013028:	4b11      	ldr	r3, [pc, #68]	; (8013070 <HAL_TIM_PeriodElapsedCallback+0x90>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d111      	bne.n	8013056 <HAL_TIM_PeriodElapsedCallback+0x76>
				flagSettings = FLAG_SETTINGS_OFF;
 8013032:	4b0e      	ldr	r3, [pc, #56]	; (801306c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
				flagDontSleep = 1;
 8013038:	4b0e      	ldr	r3, [pc, #56]	; (8013074 <HAL_TIM_PeriodElapsedCallback+0x94>)
 801303a:	2201      	movs	r2, #1
 801303c:	701a      	strb	r2, [r3, #0]
				interfaceSelectColorScheme(colorScheme);
 801303e:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	b2db      	uxtb	r3, r3
 8013044:	0018      	movs	r0, r3
 8013046:	f7f9 ff6f 	bl	800cf28 <interfaceSelectColorScheme>
				interfaceSelectLayout(layout);
 801304a:	4b0c      	ldr	r3, [pc, #48]	; (801307c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	b2db      	uxtb	r3, r3
 8013050:	0018      	movs	r0, r3
 8013052:	f7f9 fabf 	bl	800c5d4 <interfaceSelectLayout>
			}
		}

	}
}
 8013056:	46c0      	nop			; (mov r8, r8)
 8013058:	46bd      	mov	sp, r7
 801305a:	b002      	add	sp, #8
 801305c:	bd80      	pop	{r7, pc}
 801305e:	46c0      	nop			; (mov r8, r8)
 8013060:	40000400 	.word	0x40000400
 8013064:	200006da 	.word	0x200006da
 8013068:	200006e0 	.word	0x200006e0
 801306c:	2000058e 	.word	0x2000058e
 8013070:	20000694 	.word	0x20000694
 8013074:	200006d9 	.word	0x200006d9
 8013078:	200006d8 	.word	0x200006d8
 801307c:	200006f5 	.word	0x200006f5

08013080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8013080:	480d      	ldr	r0, [pc, #52]	; (80130b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8013082:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8013084:	f7ff ff86 	bl	8012f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013088:	480c      	ldr	r0, [pc, #48]	; (80130bc <LoopForever+0x6>)
  ldr r1, =_edata
 801308a:	490d      	ldr	r1, [pc, #52]	; (80130c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 801308c:	4a0d      	ldr	r2, [pc, #52]	; (80130c4 <LoopForever+0xe>)
  movs r3, #0
 801308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013090:	e002      	b.n	8013098 <LoopCopyDataInit>

08013092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013096:	3304      	adds	r3, #4

08013098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801309c:	d3f9      	bcc.n	8013092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801309e:	4a0a      	ldr	r2, [pc, #40]	; (80130c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80130a0:	4c0a      	ldr	r4, [pc, #40]	; (80130cc <LoopForever+0x16>)
  movs r3, #0
 80130a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80130a4:	e001      	b.n	80130aa <LoopFillZerobss>

080130a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80130a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80130a8:	3204      	adds	r2, #4

080130aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80130aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80130ac:	d3fb      	bcc.n	80130a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80130ae:	f000 f817 	bl	80130e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80130b2:	f7fc fe41 	bl	800fd38 <main>

080130b6 <LoopForever>:

LoopForever:
  b LoopForever
 80130b6:	e7fe      	b.n	80130b6 <LoopForever>
  ldr   r0, =_estack
 80130b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80130bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80130c0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80130c4:	080189d0 	.word	0x080189d0
  ldr r2, =_sbss
 80130c8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80130cc:	20000810 	.word	0x20000810

080130d0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80130d0:	e7fe      	b.n	80130d0 <ADC1_COMP_IRQHandler>
	...

080130d4 <__errno>:
 80130d4:	4b01      	ldr	r3, [pc, #4]	; (80130dc <__errno+0x8>)
 80130d6:	6818      	ldr	r0, [r3, #0]
 80130d8:	4770      	bx	lr
 80130da:	46c0      	nop			; (mov r8, r8)
 80130dc:	2000008c 	.word	0x2000008c

080130e0 <__libc_init_array>:
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	2600      	movs	r6, #0
 80130e4:	4d0c      	ldr	r5, [pc, #48]	; (8013118 <__libc_init_array+0x38>)
 80130e6:	4c0d      	ldr	r4, [pc, #52]	; (801311c <__libc_init_array+0x3c>)
 80130e8:	1b64      	subs	r4, r4, r5
 80130ea:	10a4      	asrs	r4, r4, #2
 80130ec:	42a6      	cmp	r6, r4
 80130ee:	d109      	bne.n	8013104 <__libc_init_array+0x24>
 80130f0:	2600      	movs	r6, #0
 80130f2:	f002 fe8d 	bl	8015e10 <_init>
 80130f6:	4d0a      	ldr	r5, [pc, #40]	; (8013120 <__libc_init_array+0x40>)
 80130f8:	4c0a      	ldr	r4, [pc, #40]	; (8013124 <__libc_init_array+0x44>)
 80130fa:	1b64      	subs	r4, r4, r5
 80130fc:	10a4      	asrs	r4, r4, #2
 80130fe:	42a6      	cmp	r6, r4
 8013100:	d105      	bne.n	801310e <__libc_init_array+0x2e>
 8013102:	bd70      	pop	{r4, r5, r6, pc}
 8013104:	00b3      	lsls	r3, r6, #2
 8013106:	58eb      	ldr	r3, [r5, r3]
 8013108:	4798      	blx	r3
 801310a:	3601      	adds	r6, #1
 801310c:	e7ee      	b.n	80130ec <__libc_init_array+0xc>
 801310e:	00b3      	lsls	r3, r6, #2
 8013110:	58eb      	ldr	r3, [r5, r3]
 8013112:	4798      	blx	r3
 8013114:	3601      	adds	r6, #1
 8013116:	e7f2      	b.n	80130fe <__libc_init_array+0x1e>
 8013118:	080189c8 	.word	0x080189c8
 801311c:	080189c8 	.word	0x080189c8
 8013120:	080189c8 	.word	0x080189c8
 8013124:	080189cc 	.word	0x080189cc

08013128 <malloc>:
 8013128:	b510      	push	{r4, lr}
 801312a:	4b03      	ldr	r3, [pc, #12]	; (8013138 <malloc+0x10>)
 801312c:	0001      	movs	r1, r0
 801312e:	6818      	ldr	r0, [r3, #0]
 8013130:	f000 f856 	bl	80131e0 <_malloc_r>
 8013134:	bd10      	pop	{r4, pc}
 8013136:	46c0      	nop			; (mov r8, r8)
 8013138:	2000008c 	.word	0x2000008c

0801313c <memset>:
 801313c:	0003      	movs	r3, r0
 801313e:	1882      	adds	r2, r0, r2
 8013140:	4293      	cmp	r3, r2
 8013142:	d100      	bne.n	8013146 <memset+0xa>
 8013144:	4770      	bx	lr
 8013146:	7019      	strb	r1, [r3, #0]
 8013148:	3301      	adds	r3, #1
 801314a:	e7f9      	b.n	8013140 <memset+0x4>

0801314c <_free_r>:
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	0005      	movs	r5, r0
 8013150:	2900      	cmp	r1, #0
 8013152:	d010      	beq.n	8013176 <_free_r+0x2a>
 8013154:	1f0c      	subs	r4, r1, #4
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	da00      	bge.n	801315e <_free_r+0x12>
 801315c:	18e4      	adds	r4, r4, r3
 801315e:	0028      	movs	r0, r5
 8013160:	f000 fc70 	bl	8013a44 <__malloc_lock>
 8013164:	4a1d      	ldr	r2, [pc, #116]	; (80131dc <_free_r+0x90>)
 8013166:	6813      	ldr	r3, [r2, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d105      	bne.n	8013178 <_free_r+0x2c>
 801316c:	6063      	str	r3, [r4, #4]
 801316e:	6014      	str	r4, [r2, #0]
 8013170:	0028      	movs	r0, r5
 8013172:	f000 fc6f 	bl	8013a54 <__malloc_unlock>
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	42a3      	cmp	r3, r4
 801317a:	d908      	bls.n	801318e <_free_r+0x42>
 801317c:	6821      	ldr	r1, [r4, #0]
 801317e:	1860      	adds	r0, r4, r1
 8013180:	4283      	cmp	r3, r0
 8013182:	d1f3      	bne.n	801316c <_free_r+0x20>
 8013184:	6818      	ldr	r0, [r3, #0]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	1841      	adds	r1, r0, r1
 801318a:	6021      	str	r1, [r4, #0]
 801318c:	e7ee      	b.n	801316c <_free_r+0x20>
 801318e:	001a      	movs	r2, r3
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d001      	beq.n	801319a <_free_r+0x4e>
 8013196:	42a3      	cmp	r3, r4
 8013198:	d9f9      	bls.n	801318e <_free_r+0x42>
 801319a:	6811      	ldr	r1, [r2, #0]
 801319c:	1850      	adds	r0, r2, r1
 801319e:	42a0      	cmp	r0, r4
 80131a0:	d10b      	bne.n	80131ba <_free_r+0x6e>
 80131a2:	6820      	ldr	r0, [r4, #0]
 80131a4:	1809      	adds	r1, r1, r0
 80131a6:	1850      	adds	r0, r2, r1
 80131a8:	6011      	str	r1, [r2, #0]
 80131aa:	4283      	cmp	r3, r0
 80131ac:	d1e0      	bne.n	8013170 <_free_r+0x24>
 80131ae:	6818      	ldr	r0, [r3, #0]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	1841      	adds	r1, r0, r1
 80131b4:	6011      	str	r1, [r2, #0]
 80131b6:	6053      	str	r3, [r2, #4]
 80131b8:	e7da      	b.n	8013170 <_free_r+0x24>
 80131ba:	42a0      	cmp	r0, r4
 80131bc:	d902      	bls.n	80131c4 <_free_r+0x78>
 80131be:	230c      	movs	r3, #12
 80131c0:	602b      	str	r3, [r5, #0]
 80131c2:	e7d5      	b.n	8013170 <_free_r+0x24>
 80131c4:	6821      	ldr	r1, [r4, #0]
 80131c6:	1860      	adds	r0, r4, r1
 80131c8:	4283      	cmp	r3, r0
 80131ca:	d103      	bne.n	80131d4 <_free_r+0x88>
 80131cc:	6818      	ldr	r0, [r3, #0]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	1841      	adds	r1, r0, r1
 80131d2:	6021      	str	r1, [r4, #0]
 80131d4:	6063      	str	r3, [r4, #4]
 80131d6:	6054      	str	r4, [r2, #4]
 80131d8:	e7ca      	b.n	8013170 <_free_r+0x24>
 80131da:	46c0      	nop			; (mov r8, r8)
 80131dc:	200001cc 	.word	0x200001cc

080131e0 <_malloc_r>:
 80131e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131e2:	2303      	movs	r3, #3
 80131e4:	1ccd      	adds	r5, r1, #3
 80131e6:	439d      	bics	r5, r3
 80131e8:	3508      	adds	r5, #8
 80131ea:	0006      	movs	r6, r0
 80131ec:	2d0c      	cmp	r5, #12
 80131ee:	d21f      	bcs.n	8013230 <_malloc_r+0x50>
 80131f0:	250c      	movs	r5, #12
 80131f2:	42a9      	cmp	r1, r5
 80131f4:	d81e      	bhi.n	8013234 <_malloc_r+0x54>
 80131f6:	0030      	movs	r0, r6
 80131f8:	f000 fc24 	bl	8013a44 <__malloc_lock>
 80131fc:	4925      	ldr	r1, [pc, #148]	; (8013294 <_malloc_r+0xb4>)
 80131fe:	680a      	ldr	r2, [r1, #0]
 8013200:	0014      	movs	r4, r2
 8013202:	2c00      	cmp	r4, #0
 8013204:	d11a      	bne.n	801323c <_malloc_r+0x5c>
 8013206:	4f24      	ldr	r7, [pc, #144]	; (8013298 <_malloc_r+0xb8>)
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d104      	bne.n	8013218 <_malloc_r+0x38>
 801320e:	0021      	movs	r1, r4
 8013210:	0030      	movs	r0, r6
 8013212:	f000 f8d9 	bl	80133c8 <_sbrk_r>
 8013216:	6038      	str	r0, [r7, #0]
 8013218:	0029      	movs	r1, r5
 801321a:	0030      	movs	r0, r6
 801321c:	f000 f8d4 	bl	80133c8 <_sbrk_r>
 8013220:	1c43      	adds	r3, r0, #1
 8013222:	d12b      	bne.n	801327c <_malloc_r+0x9c>
 8013224:	230c      	movs	r3, #12
 8013226:	0030      	movs	r0, r6
 8013228:	6033      	str	r3, [r6, #0]
 801322a:	f000 fc13 	bl	8013a54 <__malloc_unlock>
 801322e:	e003      	b.n	8013238 <_malloc_r+0x58>
 8013230:	2d00      	cmp	r5, #0
 8013232:	dade      	bge.n	80131f2 <_malloc_r+0x12>
 8013234:	230c      	movs	r3, #12
 8013236:	6033      	str	r3, [r6, #0]
 8013238:	2000      	movs	r0, #0
 801323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801323c:	6823      	ldr	r3, [r4, #0]
 801323e:	1b5b      	subs	r3, r3, r5
 8013240:	d419      	bmi.n	8013276 <_malloc_r+0x96>
 8013242:	2b0b      	cmp	r3, #11
 8013244:	d903      	bls.n	801324e <_malloc_r+0x6e>
 8013246:	6023      	str	r3, [r4, #0]
 8013248:	18e4      	adds	r4, r4, r3
 801324a:	6025      	str	r5, [r4, #0]
 801324c:	e003      	b.n	8013256 <_malloc_r+0x76>
 801324e:	6863      	ldr	r3, [r4, #4]
 8013250:	42a2      	cmp	r2, r4
 8013252:	d10e      	bne.n	8013272 <_malloc_r+0x92>
 8013254:	600b      	str	r3, [r1, #0]
 8013256:	0030      	movs	r0, r6
 8013258:	f000 fbfc 	bl	8013a54 <__malloc_unlock>
 801325c:	0020      	movs	r0, r4
 801325e:	2207      	movs	r2, #7
 8013260:	300b      	adds	r0, #11
 8013262:	1d23      	adds	r3, r4, #4
 8013264:	4390      	bics	r0, r2
 8013266:	1ac2      	subs	r2, r0, r3
 8013268:	4298      	cmp	r0, r3
 801326a:	d0e6      	beq.n	801323a <_malloc_r+0x5a>
 801326c:	1a1b      	subs	r3, r3, r0
 801326e:	50a3      	str	r3, [r4, r2]
 8013270:	e7e3      	b.n	801323a <_malloc_r+0x5a>
 8013272:	6053      	str	r3, [r2, #4]
 8013274:	e7ef      	b.n	8013256 <_malloc_r+0x76>
 8013276:	0022      	movs	r2, r4
 8013278:	6864      	ldr	r4, [r4, #4]
 801327a:	e7c2      	b.n	8013202 <_malloc_r+0x22>
 801327c:	2303      	movs	r3, #3
 801327e:	1cc4      	adds	r4, r0, #3
 8013280:	439c      	bics	r4, r3
 8013282:	42a0      	cmp	r0, r4
 8013284:	d0e1      	beq.n	801324a <_malloc_r+0x6a>
 8013286:	1a21      	subs	r1, r4, r0
 8013288:	0030      	movs	r0, r6
 801328a:	f000 f89d 	bl	80133c8 <_sbrk_r>
 801328e:	1c43      	adds	r3, r0, #1
 8013290:	d1db      	bne.n	801324a <_malloc_r+0x6a>
 8013292:	e7c7      	b.n	8013224 <_malloc_r+0x44>
 8013294:	200001cc 	.word	0x200001cc
 8013298:	200001d0 	.word	0x200001d0

0801329c <iprintf>:
 801329c:	b40f      	push	{r0, r1, r2, r3}
 801329e:	4b0b      	ldr	r3, [pc, #44]	; (80132cc <iprintf+0x30>)
 80132a0:	b513      	push	{r0, r1, r4, lr}
 80132a2:	681c      	ldr	r4, [r3, #0]
 80132a4:	2c00      	cmp	r4, #0
 80132a6:	d005      	beq.n	80132b4 <iprintf+0x18>
 80132a8:	69a3      	ldr	r3, [r4, #24]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d102      	bne.n	80132b4 <iprintf+0x18>
 80132ae:	0020      	movs	r0, r4
 80132b0:	f000 fab8 	bl	8013824 <__sinit>
 80132b4:	ab05      	add	r3, sp, #20
 80132b6:	0020      	movs	r0, r4
 80132b8:	9a04      	ldr	r2, [sp, #16]
 80132ba:	68a1      	ldr	r1, [r4, #8]
 80132bc:	9301      	str	r3, [sp, #4]
 80132be:	f000 fd5b 	bl	8013d78 <_vfiprintf_r>
 80132c2:	bc16      	pop	{r1, r2, r4}
 80132c4:	bc08      	pop	{r3}
 80132c6:	b004      	add	sp, #16
 80132c8:	4718      	bx	r3
 80132ca:	46c0      	nop			; (mov r8, r8)
 80132cc:	2000008c 	.word	0x2000008c

080132d0 <_puts_r>:
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	0005      	movs	r5, r0
 80132d4:	000e      	movs	r6, r1
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d004      	beq.n	80132e4 <_puts_r+0x14>
 80132da:	6983      	ldr	r3, [r0, #24]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d101      	bne.n	80132e4 <_puts_r+0x14>
 80132e0:	f000 faa0 	bl	8013824 <__sinit>
 80132e4:	69ab      	ldr	r3, [r5, #24]
 80132e6:	68ac      	ldr	r4, [r5, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d102      	bne.n	80132f2 <_puts_r+0x22>
 80132ec:	0028      	movs	r0, r5
 80132ee:	f000 fa99 	bl	8013824 <__sinit>
 80132f2:	4b2d      	ldr	r3, [pc, #180]	; (80133a8 <_puts_r+0xd8>)
 80132f4:	429c      	cmp	r4, r3
 80132f6:	d122      	bne.n	801333e <_puts_r+0x6e>
 80132f8:	686c      	ldr	r4, [r5, #4]
 80132fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132fc:	07db      	lsls	r3, r3, #31
 80132fe:	d405      	bmi.n	801330c <_puts_r+0x3c>
 8013300:	89a3      	ldrh	r3, [r4, #12]
 8013302:	059b      	lsls	r3, r3, #22
 8013304:	d402      	bmi.n	801330c <_puts_r+0x3c>
 8013306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013308:	f000 fb2d 	bl	8013966 <__retarget_lock_acquire_recursive>
 801330c:	89a3      	ldrh	r3, [r4, #12]
 801330e:	071b      	lsls	r3, r3, #28
 8013310:	d502      	bpl.n	8013318 <_puts_r+0x48>
 8013312:	6923      	ldr	r3, [r4, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d129      	bne.n	801336c <_puts_r+0x9c>
 8013318:	0021      	movs	r1, r4
 801331a:	0028      	movs	r0, r5
 801331c:	f000 f8dc 	bl	80134d8 <__swsetup_r>
 8013320:	2800      	cmp	r0, #0
 8013322:	d023      	beq.n	801336c <_puts_r+0x9c>
 8013324:	2501      	movs	r5, #1
 8013326:	426d      	negs	r5, r5
 8013328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801332a:	07db      	lsls	r3, r3, #31
 801332c:	d405      	bmi.n	801333a <_puts_r+0x6a>
 801332e:	89a3      	ldrh	r3, [r4, #12]
 8013330:	059b      	lsls	r3, r3, #22
 8013332:	d402      	bmi.n	801333a <_puts_r+0x6a>
 8013334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013336:	f000 fb17 	bl	8013968 <__retarget_lock_release_recursive>
 801333a:	0028      	movs	r0, r5
 801333c:	bd70      	pop	{r4, r5, r6, pc}
 801333e:	4b1b      	ldr	r3, [pc, #108]	; (80133ac <_puts_r+0xdc>)
 8013340:	429c      	cmp	r4, r3
 8013342:	d101      	bne.n	8013348 <_puts_r+0x78>
 8013344:	68ac      	ldr	r4, [r5, #8]
 8013346:	e7d8      	b.n	80132fa <_puts_r+0x2a>
 8013348:	4b19      	ldr	r3, [pc, #100]	; (80133b0 <_puts_r+0xe0>)
 801334a:	429c      	cmp	r4, r3
 801334c:	d1d5      	bne.n	80132fa <_puts_r+0x2a>
 801334e:	68ec      	ldr	r4, [r5, #12]
 8013350:	e7d3      	b.n	80132fa <_puts_r+0x2a>
 8013352:	3601      	adds	r6, #1
 8013354:	60a3      	str	r3, [r4, #8]
 8013356:	2b00      	cmp	r3, #0
 8013358:	da04      	bge.n	8013364 <_puts_r+0x94>
 801335a:	69a2      	ldr	r2, [r4, #24]
 801335c:	429a      	cmp	r2, r3
 801335e:	dc16      	bgt.n	801338e <_puts_r+0xbe>
 8013360:	290a      	cmp	r1, #10
 8013362:	d014      	beq.n	801338e <_puts_r+0xbe>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	1c5a      	adds	r2, r3, #1
 8013368:	6022      	str	r2, [r4, #0]
 801336a:	7019      	strb	r1, [r3, #0]
 801336c:	68a3      	ldr	r3, [r4, #8]
 801336e:	7831      	ldrb	r1, [r6, #0]
 8013370:	3b01      	subs	r3, #1
 8013372:	2900      	cmp	r1, #0
 8013374:	d1ed      	bne.n	8013352 <_puts_r+0x82>
 8013376:	60a3      	str	r3, [r4, #8]
 8013378:	2b00      	cmp	r3, #0
 801337a:	da0f      	bge.n	801339c <_puts_r+0xcc>
 801337c:	0028      	movs	r0, r5
 801337e:	0022      	movs	r2, r4
 8013380:	310a      	adds	r1, #10
 8013382:	f000 f853 	bl	801342c <__swbuf_r>
 8013386:	250a      	movs	r5, #10
 8013388:	1c43      	adds	r3, r0, #1
 801338a:	d1cd      	bne.n	8013328 <_puts_r+0x58>
 801338c:	e7ca      	b.n	8013324 <_puts_r+0x54>
 801338e:	0022      	movs	r2, r4
 8013390:	0028      	movs	r0, r5
 8013392:	f000 f84b 	bl	801342c <__swbuf_r>
 8013396:	1c43      	adds	r3, r0, #1
 8013398:	d1e8      	bne.n	801336c <_puts_r+0x9c>
 801339a:	e7c3      	b.n	8013324 <_puts_r+0x54>
 801339c:	250a      	movs	r5, #10
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	1c5a      	adds	r2, r3, #1
 80133a2:	6022      	str	r2, [r4, #0]
 80133a4:	701d      	strb	r5, [r3, #0]
 80133a6:	e7bf      	b.n	8013328 <_puts_r+0x58>
 80133a8:	08018704 	.word	0x08018704
 80133ac:	08018724 	.word	0x08018724
 80133b0:	080186e4 	.word	0x080186e4

080133b4 <puts>:
 80133b4:	b510      	push	{r4, lr}
 80133b6:	4b03      	ldr	r3, [pc, #12]	; (80133c4 <puts+0x10>)
 80133b8:	0001      	movs	r1, r0
 80133ba:	6818      	ldr	r0, [r3, #0]
 80133bc:	f7ff ff88 	bl	80132d0 <_puts_r>
 80133c0:	bd10      	pop	{r4, pc}
 80133c2:	46c0      	nop			; (mov r8, r8)
 80133c4:	2000008c 	.word	0x2000008c

080133c8 <_sbrk_r>:
 80133c8:	2300      	movs	r3, #0
 80133ca:	b570      	push	{r4, r5, r6, lr}
 80133cc:	4d06      	ldr	r5, [pc, #24]	; (80133e8 <_sbrk_r+0x20>)
 80133ce:	0004      	movs	r4, r0
 80133d0:	0008      	movs	r0, r1
 80133d2:	602b      	str	r3, [r5, #0]
 80133d4:	f7ff fda8 	bl	8012f28 <_sbrk>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d103      	bne.n	80133e4 <_sbrk_r+0x1c>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d000      	beq.n	80133e4 <_sbrk_r+0x1c>
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	bd70      	pop	{r4, r5, r6, pc}
 80133e6:	46c0      	nop			; (mov r8, r8)
 80133e8:	2000080c 	.word	0x2000080c

080133ec <siprintf>:
 80133ec:	b40e      	push	{r1, r2, r3}
 80133ee:	b500      	push	{lr}
 80133f0:	490b      	ldr	r1, [pc, #44]	; (8013420 <siprintf+0x34>)
 80133f2:	b09c      	sub	sp, #112	; 0x70
 80133f4:	ab1d      	add	r3, sp, #116	; 0x74
 80133f6:	9002      	str	r0, [sp, #8]
 80133f8:	9006      	str	r0, [sp, #24]
 80133fa:	9107      	str	r1, [sp, #28]
 80133fc:	9104      	str	r1, [sp, #16]
 80133fe:	4809      	ldr	r0, [pc, #36]	; (8013424 <siprintf+0x38>)
 8013400:	4909      	ldr	r1, [pc, #36]	; (8013428 <siprintf+0x3c>)
 8013402:	cb04      	ldmia	r3!, {r2}
 8013404:	9105      	str	r1, [sp, #20]
 8013406:	6800      	ldr	r0, [r0, #0]
 8013408:	a902      	add	r1, sp, #8
 801340a:	9301      	str	r3, [sp, #4]
 801340c:	f000 fb8c 	bl	8013b28 <_svfiprintf_r>
 8013410:	2300      	movs	r3, #0
 8013412:	9a02      	ldr	r2, [sp, #8]
 8013414:	7013      	strb	r3, [r2, #0]
 8013416:	b01c      	add	sp, #112	; 0x70
 8013418:	bc08      	pop	{r3}
 801341a:	b003      	add	sp, #12
 801341c:	4718      	bx	r3
 801341e:	46c0      	nop			; (mov r8, r8)
 8013420:	7fffffff 	.word	0x7fffffff
 8013424:	2000008c 	.word	0x2000008c
 8013428:	ffff0208 	.word	0xffff0208

0801342c <__swbuf_r>:
 801342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801342e:	0005      	movs	r5, r0
 8013430:	000e      	movs	r6, r1
 8013432:	0014      	movs	r4, r2
 8013434:	2800      	cmp	r0, #0
 8013436:	d004      	beq.n	8013442 <__swbuf_r+0x16>
 8013438:	6983      	ldr	r3, [r0, #24]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d101      	bne.n	8013442 <__swbuf_r+0x16>
 801343e:	f000 f9f1 	bl	8013824 <__sinit>
 8013442:	4b22      	ldr	r3, [pc, #136]	; (80134cc <__swbuf_r+0xa0>)
 8013444:	429c      	cmp	r4, r3
 8013446:	d12e      	bne.n	80134a6 <__swbuf_r+0x7a>
 8013448:	686c      	ldr	r4, [r5, #4]
 801344a:	69a3      	ldr	r3, [r4, #24]
 801344c:	60a3      	str	r3, [r4, #8]
 801344e:	89a3      	ldrh	r3, [r4, #12]
 8013450:	071b      	lsls	r3, r3, #28
 8013452:	d532      	bpl.n	80134ba <__swbuf_r+0x8e>
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d02f      	beq.n	80134ba <__swbuf_r+0x8e>
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	6922      	ldr	r2, [r4, #16]
 801345e:	b2f7      	uxtb	r7, r6
 8013460:	1a98      	subs	r0, r3, r2
 8013462:	6963      	ldr	r3, [r4, #20]
 8013464:	b2f6      	uxtb	r6, r6
 8013466:	4283      	cmp	r3, r0
 8013468:	dc05      	bgt.n	8013476 <__swbuf_r+0x4a>
 801346a:	0021      	movs	r1, r4
 801346c:	0028      	movs	r0, r5
 801346e:	f000 f937 	bl	80136e0 <_fflush_r>
 8013472:	2800      	cmp	r0, #0
 8013474:	d127      	bne.n	80134c6 <__swbuf_r+0x9a>
 8013476:	68a3      	ldr	r3, [r4, #8]
 8013478:	3001      	adds	r0, #1
 801347a:	3b01      	subs	r3, #1
 801347c:	60a3      	str	r3, [r4, #8]
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	1c5a      	adds	r2, r3, #1
 8013482:	6022      	str	r2, [r4, #0]
 8013484:	701f      	strb	r7, [r3, #0]
 8013486:	6963      	ldr	r3, [r4, #20]
 8013488:	4283      	cmp	r3, r0
 801348a:	d004      	beq.n	8013496 <__swbuf_r+0x6a>
 801348c:	89a3      	ldrh	r3, [r4, #12]
 801348e:	07db      	lsls	r3, r3, #31
 8013490:	d507      	bpl.n	80134a2 <__swbuf_r+0x76>
 8013492:	2e0a      	cmp	r6, #10
 8013494:	d105      	bne.n	80134a2 <__swbuf_r+0x76>
 8013496:	0021      	movs	r1, r4
 8013498:	0028      	movs	r0, r5
 801349a:	f000 f921 	bl	80136e0 <_fflush_r>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d111      	bne.n	80134c6 <__swbuf_r+0x9a>
 80134a2:	0030      	movs	r0, r6
 80134a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134a6:	4b0a      	ldr	r3, [pc, #40]	; (80134d0 <__swbuf_r+0xa4>)
 80134a8:	429c      	cmp	r4, r3
 80134aa:	d101      	bne.n	80134b0 <__swbuf_r+0x84>
 80134ac:	68ac      	ldr	r4, [r5, #8]
 80134ae:	e7cc      	b.n	801344a <__swbuf_r+0x1e>
 80134b0:	4b08      	ldr	r3, [pc, #32]	; (80134d4 <__swbuf_r+0xa8>)
 80134b2:	429c      	cmp	r4, r3
 80134b4:	d1c9      	bne.n	801344a <__swbuf_r+0x1e>
 80134b6:	68ec      	ldr	r4, [r5, #12]
 80134b8:	e7c7      	b.n	801344a <__swbuf_r+0x1e>
 80134ba:	0021      	movs	r1, r4
 80134bc:	0028      	movs	r0, r5
 80134be:	f000 f80b 	bl	80134d8 <__swsetup_r>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d0c9      	beq.n	801345a <__swbuf_r+0x2e>
 80134c6:	2601      	movs	r6, #1
 80134c8:	4276      	negs	r6, r6
 80134ca:	e7ea      	b.n	80134a2 <__swbuf_r+0x76>
 80134cc:	08018704 	.word	0x08018704
 80134d0:	08018724 	.word	0x08018724
 80134d4:	080186e4 	.word	0x080186e4

080134d8 <__swsetup_r>:
 80134d8:	4b37      	ldr	r3, [pc, #220]	; (80135b8 <__swsetup_r+0xe0>)
 80134da:	b570      	push	{r4, r5, r6, lr}
 80134dc:	681d      	ldr	r5, [r3, #0]
 80134de:	0006      	movs	r6, r0
 80134e0:	000c      	movs	r4, r1
 80134e2:	2d00      	cmp	r5, #0
 80134e4:	d005      	beq.n	80134f2 <__swsetup_r+0x1a>
 80134e6:	69ab      	ldr	r3, [r5, #24]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d102      	bne.n	80134f2 <__swsetup_r+0x1a>
 80134ec:	0028      	movs	r0, r5
 80134ee:	f000 f999 	bl	8013824 <__sinit>
 80134f2:	4b32      	ldr	r3, [pc, #200]	; (80135bc <__swsetup_r+0xe4>)
 80134f4:	429c      	cmp	r4, r3
 80134f6:	d10f      	bne.n	8013518 <__swsetup_r+0x40>
 80134f8:	686c      	ldr	r4, [r5, #4]
 80134fa:	230c      	movs	r3, #12
 80134fc:	5ee2      	ldrsh	r2, [r4, r3]
 80134fe:	b293      	uxth	r3, r2
 8013500:	0711      	lsls	r1, r2, #28
 8013502:	d42d      	bmi.n	8013560 <__swsetup_r+0x88>
 8013504:	06d9      	lsls	r1, r3, #27
 8013506:	d411      	bmi.n	801352c <__swsetup_r+0x54>
 8013508:	2309      	movs	r3, #9
 801350a:	2001      	movs	r0, #1
 801350c:	6033      	str	r3, [r6, #0]
 801350e:	3337      	adds	r3, #55	; 0x37
 8013510:	4313      	orrs	r3, r2
 8013512:	81a3      	strh	r3, [r4, #12]
 8013514:	4240      	negs	r0, r0
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	4b29      	ldr	r3, [pc, #164]	; (80135c0 <__swsetup_r+0xe8>)
 801351a:	429c      	cmp	r4, r3
 801351c:	d101      	bne.n	8013522 <__swsetup_r+0x4a>
 801351e:	68ac      	ldr	r4, [r5, #8]
 8013520:	e7eb      	b.n	80134fa <__swsetup_r+0x22>
 8013522:	4b28      	ldr	r3, [pc, #160]	; (80135c4 <__swsetup_r+0xec>)
 8013524:	429c      	cmp	r4, r3
 8013526:	d1e8      	bne.n	80134fa <__swsetup_r+0x22>
 8013528:	68ec      	ldr	r4, [r5, #12]
 801352a:	e7e6      	b.n	80134fa <__swsetup_r+0x22>
 801352c:	075b      	lsls	r3, r3, #29
 801352e:	d513      	bpl.n	8013558 <__swsetup_r+0x80>
 8013530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013532:	2900      	cmp	r1, #0
 8013534:	d008      	beq.n	8013548 <__swsetup_r+0x70>
 8013536:	0023      	movs	r3, r4
 8013538:	3344      	adds	r3, #68	; 0x44
 801353a:	4299      	cmp	r1, r3
 801353c:	d002      	beq.n	8013544 <__swsetup_r+0x6c>
 801353e:	0030      	movs	r0, r6
 8013540:	f7ff fe04 	bl	801314c <_free_r>
 8013544:	2300      	movs	r3, #0
 8013546:	6363      	str	r3, [r4, #52]	; 0x34
 8013548:	2224      	movs	r2, #36	; 0x24
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	4393      	bics	r3, r2
 801354e:	81a3      	strh	r3, [r4, #12]
 8013550:	2300      	movs	r3, #0
 8013552:	6063      	str	r3, [r4, #4]
 8013554:	6923      	ldr	r3, [r4, #16]
 8013556:	6023      	str	r3, [r4, #0]
 8013558:	2308      	movs	r3, #8
 801355a:	89a2      	ldrh	r2, [r4, #12]
 801355c:	4313      	orrs	r3, r2
 801355e:	81a3      	strh	r3, [r4, #12]
 8013560:	6923      	ldr	r3, [r4, #16]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d10b      	bne.n	801357e <__swsetup_r+0xa6>
 8013566:	21a0      	movs	r1, #160	; 0xa0
 8013568:	2280      	movs	r2, #128	; 0x80
 801356a:	89a3      	ldrh	r3, [r4, #12]
 801356c:	0089      	lsls	r1, r1, #2
 801356e:	0092      	lsls	r2, r2, #2
 8013570:	400b      	ands	r3, r1
 8013572:	4293      	cmp	r3, r2
 8013574:	d003      	beq.n	801357e <__swsetup_r+0xa6>
 8013576:	0021      	movs	r1, r4
 8013578:	0030      	movs	r0, r6
 801357a:	f000 fa1f 	bl	80139bc <__smakebuf_r>
 801357e:	220c      	movs	r2, #12
 8013580:	5ea3      	ldrsh	r3, [r4, r2]
 8013582:	2001      	movs	r0, #1
 8013584:	001a      	movs	r2, r3
 8013586:	b299      	uxth	r1, r3
 8013588:	4002      	ands	r2, r0
 801358a:	4203      	tst	r3, r0
 801358c:	d00f      	beq.n	80135ae <__swsetup_r+0xd6>
 801358e:	2200      	movs	r2, #0
 8013590:	60a2      	str	r2, [r4, #8]
 8013592:	6962      	ldr	r2, [r4, #20]
 8013594:	4252      	negs	r2, r2
 8013596:	61a2      	str	r2, [r4, #24]
 8013598:	2000      	movs	r0, #0
 801359a:	6922      	ldr	r2, [r4, #16]
 801359c:	4282      	cmp	r2, r0
 801359e:	d1ba      	bne.n	8013516 <__swsetup_r+0x3e>
 80135a0:	060a      	lsls	r2, r1, #24
 80135a2:	d5b8      	bpl.n	8013516 <__swsetup_r+0x3e>
 80135a4:	2240      	movs	r2, #64	; 0x40
 80135a6:	4313      	orrs	r3, r2
 80135a8:	81a3      	strh	r3, [r4, #12]
 80135aa:	3801      	subs	r0, #1
 80135ac:	e7b3      	b.n	8013516 <__swsetup_r+0x3e>
 80135ae:	0788      	lsls	r0, r1, #30
 80135b0:	d400      	bmi.n	80135b4 <__swsetup_r+0xdc>
 80135b2:	6962      	ldr	r2, [r4, #20]
 80135b4:	60a2      	str	r2, [r4, #8]
 80135b6:	e7ef      	b.n	8013598 <__swsetup_r+0xc0>
 80135b8:	2000008c 	.word	0x2000008c
 80135bc:	08018704 	.word	0x08018704
 80135c0:	08018724 	.word	0x08018724
 80135c4:	080186e4 	.word	0x080186e4

080135c8 <__sflush_r>:
 80135c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ca:	898b      	ldrh	r3, [r1, #12]
 80135cc:	0005      	movs	r5, r0
 80135ce:	000c      	movs	r4, r1
 80135d0:	071a      	lsls	r2, r3, #28
 80135d2:	d45f      	bmi.n	8013694 <__sflush_r+0xcc>
 80135d4:	684a      	ldr	r2, [r1, #4]
 80135d6:	2a00      	cmp	r2, #0
 80135d8:	dc04      	bgt.n	80135e4 <__sflush_r+0x1c>
 80135da:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80135dc:	2a00      	cmp	r2, #0
 80135de:	dc01      	bgt.n	80135e4 <__sflush_r+0x1c>
 80135e0:	2000      	movs	r0, #0
 80135e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80135e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80135e6:	2f00      	cmp	r7, #0
 80135e8:	d0fa      	beq.n	80135e0 <__sflush_r+0x18>
 80135ea:	2200      	movs	r2, #0
 80135ec:	2180      	movs	r1, #128	; 0x80
 80135ee:	682e      	ldr	r6, [r5, #0]
 80135f0:	602a      	str	r2, [r5, #0]
 80135f2:	001a      	movs	r2, r3
 80135f4:	0149      	lsls	r1, r1, #5
 80135f6:	400a      	ands	r2, r1
 80135f8:	420b      	tst	r3, r1
 80135fa:	d034      	beq.n	8013666 <__sflush_r+0x9e>
 80135fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135fe:	89a3      	ldrh	r3, [r4, #12]
 8013600:	075b      	lsls	r3, r3, #29
 8013602:	d506      	bpl.n	8013612 <__sflush_r+0x4a>
 8013604:	6863      	ldr	r3, [r4, #4]
 8013606:	1ac0      	subs	r0, r0, r3
 8013608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <__sflush_r+0x4a>
 801360e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013610:	1ac0      	subs	r0, r0, r3
 8013612:	0002      	movs	r2, r0
 8013614:	6a21      	ldr	r1, [r4, #32]
 8013616:	2300      	movs	r3, #0
 8013618:	0028      	movs	r0, r5
 801361a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801361c:	47b8      	blx	r7
 801361e:	89a1      	ldrh	r1, [r4, #12]
 8013620:	1c43      	adds	r3, r0, #1
 8013622:	d106      	bne.n	8013632 <__sflush_r+0x6a>
 8013624:	682b      	ldr	r3, [r5, #0]
 8013626:	2b1d      	cmp	r3, #29
 8013628:	d831      	bhi.n	801368e <__sflush_r+0xc6>
 801362a:	4a2c      	ldr	r2, [pc, #176]	; (80136dc <__sflush_r+0x114>)
 801362c:	40da      	lsrs	r2, r3
 801362e:	07d3      	lsls	r3, r2, #31
 8013630:	d52d      	bpl.n	801368e <__sflush_r+0xc6>
 8013632:	2300      	movs	r3, #0
 8013634:	6063      	str	r3, [r4, #4]
 8013636:	6923      	ldr	r3, [r4, #16]
 8013638:	6023      	str	r3, [r4, #0]
 801363a:	04cb      	lsls	r3, r1, #19
 801363c:	d505      	bpl.n	801364a <__sflush_r+0x82>
 801363e:	1c43      	adds	r3, r0, #1
 8013640:	d102      	bne.n	8013648 <__sflush_r+0x80>
 8013642:	682b      	ldr	r3, [r5, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d100      	bne.n	801364a <__sflush_r+0x82>
 8013648:	6560      	str	r0, [r4, #84]	; 0x54
 801364a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801364c:	602e      	str	r6, [r5, #0]
 801364e:	2900      	cmp	r1, #0
 8013650:	d0c6      	beq.n	80135e0 <__sflush_r+0x18>
 8013652:	0023      	movs	r3, r4
 8013654:	3344      	adds	r3, #68	; 0x44
 8013656:	4299      	cmp	r1, r3
 8013658:	d002      	beq.n	8013660 <__sflush_r+0x98>
 801365a:	0028      	movs	r0, r5
 801365c:	f7ff fd76 	bl	801314c <_free_r>
 8013660:	2000      	movs	r0, #0
 8013662:	6360      	str	r0, [r4, #52]	; 0x34
 8013664:	e7bd      	b.n	80135e2 <__sflush_r+0x1a>
 8013666:	2301      	movs	r3, #1
 8013668:	0028      	movs	r0, r5
 801366a:	6a21      	ldr	r1, [r4, #32]
 801366c:	47b8      	blx	r7
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	d1c5      	bne.n	80135fe <__sflush_r+0x36>
 8013672:	682b      	ldr	r3, [r5, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d0c2      	beq.n	80135fe <__sflush_r+0x36>
 8013678:	2b1d      	cmp	r3, #29
 801367a:	d001      	beq.n	8013680 <__sflush_r+0xb8>
 801367c:	2b16      	cmp	r3, #22
 801367e:	d101      	bne.n	8013684 <__sflush_r+0xbc>
 8013680:	602e      	str	r6, [r5, #0]
 8013682:	e7ad      	b.n	80135e0 <__sflush_r+0x18>
 8013684:	2340      	movs	r3, #64	; 0x40
 8013686:	89a2      	ldrh	r2, [r4, #12]
 8013688:	4313      	orrs	r3, r2
 801368a:	81a3      	strh	r3, [r4, #12]
 801368c:	e7a9      	b.n	80135e2 <__sflush_r+0x1a>
 801368e:	2340      	movs	r3, #64	; 0x40
 8013690:	430b      	orrs	r3, r1
 8013692:	e7fa      	b.n	801368a <__sflush_r+0xc2>
 8013694:	690f      	ldr	r7, [r1, #16]
 8013696:	2f00      	cmp	r7, #0
 8013698:	d0a2      	beq.n	80135e0 <__sflush_r+0x18>
 801369a:	680a      	ldr	r2, [r1, #0]
 801369c:	600f      	str	r7, [r1, #0]
 801369e:	1bd2      	subs	r2, r2, r7
 80136a0:	9201      	str	r2, [sp, #4]
 80136a2:	2200      	movs	r2, #0
 80136a4:	079b      	lsls	r3, r3, #30
 80136a6:	d100      	bne.n	80136aa <__sflush_r+0xe2>
 80136a8:	694a      	ldr	r2, [r1, #20]
 80136aa:	60a2      	str	r2, [r4, #8]
 80136ac:	9b01      	ldr	r3, [sp, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	dc00      	bgt.n	80136b4 <__sflush_r+0xec>
 80136b2:	e795      	b.n	80135e0 <__sflush_r+0x18>
 80136b4:	003a      	movs	r2, r7
 80136b6:	0028      	movs	r0, r5
 80136b8:	9b01      	ldr	r3, [sp, #4]
 80136ba:	6a21      	ldr	r1, [r4, #32]
 80136bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136be:	47b0      	blx	r6
 80136c0:	2800      	cmp	r0, #0
 80136c2:	dc06      	bgt.n	80136d2 <__sflush_r+0x10a>
 80136c4:	2340      	movs	r3, #64	; 0x40
 80136c6:	2001      	movs	r0, #1
 80136c8:	89a2      	ldrh	r2, [r4, #12]
 80136ca:	4240      	negs	r0, r0
 80136cc:	4313      	orrs	r3, r2
 80136ce:	81a3      	strh	r3, [r4, #12]
 80136d0:	e787      	b.n	80135e2 <__sflush_r+0x1a>
 80136d2:	9b01      	ldr	r3, [sp, #4]
 80136d4:	183f      	adds	r7, r7, r0
 80136d6:	1a1b      	subs	r3, r3, r0
 80136d8:	9301      	str	r3, [sp, #4]
 80136da:	e7e7      	b.n	80136ac <__sflush_r+0xe4>
 80136dc:	20400001 	.word	0x20400001

080136e0 <_fflush_r>:
 80136e0:	690b      	ldr	r3, [r1, #16]
 80136e2:	b570      	push	{r4, r5, r6, lr}
 80136e4:	0005      	movs	r5, r0
 80136e6:	000c      	movs	r4, r1
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d102      	bne.n	80136f2 <_fflush_r+0x12>
 80136ec:	2500      	movs	r5, #0
 80136ee:	0028      	movs	r0, r5
 80136f0:	bd70      	pop	{r4, r5, r6, pc}
 80136f2:	2800      	cmp	r0, #0
 80136f4:	d004      	beq.n	8013700 <_fflush_r+0x20>
 80136f6:	6983      	ldr	r3, [r0, #24]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d101      	bne.n	8013700 <_fflush_r+0x20>
 80136fc:	f000 f892 	bl	8013824 <__sinit>
 8013700:	4b14      	ldr	r3, [pc, #80]	; (8013754 <_fflush_r+0x74>)
 8013702:	429c      	cmp	r4, r3
 8013704:	d11b      	bne.n	801373e <_fflush_r+0x5e>
 8013706:	686c      	ldr	r4, [r5, #4]
 8013708:	220c      	movs	r2, #12
 801370a:	5ea3      	ldrsh	r3, [r4, r2]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d0ed      	beq.n	80136ec <_fflush_r+0xc>
 8013710:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013712:	07d2      	lsls	r2, r2, #31
 8013714:	d404      	bmi.n	8013720 <_fflush_r+0x40>
 8013716:	059b      	lsls	r3, r3, #22
 8013718:	d402      	bmi.n	8013720 <_fflush_r+0x40>
 801371a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801371c:	f000 f923 	bl	8013966 <__retarget_lock_acquire_recursive>
 8013720:	0028      	movs	r0, r5
 8013722:	0021      	movs	r1, r4
 8013724:	f7ff ff50 	bl	80135c8 <__sflush_r>
 8013728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801372a:	0005      	movs	r5, r0
 801372c:	07db      	lsls	r3, r3, #31
 801372e:	d4de      	bmi.n	80136ee <_fflush_r+0xe>
 8013730:	89a3      	ldrh	r3, [r4, #12]
 8013732:	059b      	lsls	r3, r3, #22
 8013734:	d4db      	bmi.n	80136ee <_fflush_r+0xe>
 8013736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013738:	f000 f916 	bl	8013968 <__retarget_lock_release_recursive>
 801373c:	e7d7      	b.n	80136ee <_fflush_r+0xe>
 801373e:	4b06      	ldr	r3, [pc, #24]	; (8013758 <_fflush_r+0x78>)
 8013740:	429c      	cmp	r4, r3
 8013742:	d101      	bne.n	8013748 <_fflush_r+0x68>
 8013744:	68ac      	ldr	r4, [r5, #8]
 8013746:	e7df      	b.n	8013708 <_fflush_r+0x28>
 8013748:	4b04      	ldr	r3, [pc, #16]	; (801375c <_fflush_r+0x7c>)
 801374a:	429c      	cmp	r4, r3
 801374c:	d1dc      	bne.n	8013708 <_fflush_r+0x28>
 801374e:	68ec      	ldr	r4, [r5, #12]
 8013750:	e7da      	b.n	8013708 <_fflush_r+0x28>
 8013752:	46c0      	nop			; (mov r8, r8)
 8013754:	08018704 	.word	0x08018704
 8013758:	08018724 	.word	0x08018724
 801375c:	080186e4 	.word	0x080186e4

08013760 <std>:
 8013760:	2300      	movs	r3, #0
 8013762:	b510      	push	{r4, lr}
 8013764:	0004      	movs	r4, r0
 8013766:	6003      	str	r3, [r0, #0]
 8013768:	6043      	str	r3, [r0, #4]
 801376a:	6083      	str	r3, [r0, #8]
 801376c:	8181      	strh	r1, [r0, #12]
 801376e:	6643      	str	r3, [r0, #100]	; 0x64
 8013770:	0019      	movs	r1, r3
 8013772:	81c2      	strh	r2, [r0, #14]
 8013774:	6103      	str	r3, [r0, #16]
 8013776:	6143      	str	r3, [r0, #20]
 8013778:	6183      	str	r3, [r0, #24]
 801377a:	2208      	movs	r2, #8
 801377c:	305c      	adds	r0, #92	; 0x5c
 801377e:	f7ff fcdd 	bl	801313c <memset>
 8013782:	4b05      	ldr	r3, [pc, #20]	; (8013798 <std+0x38>)
 8013784:	6263      	str	r3, [r4, #36]	; 0x24
 8013786:	4b05      	ldr	r3, [pc, #20]	; (801379c <std+0x3c>)
 8013788:	6224      	str	r4, [r4, #32]
 801378a:	62a3      	str	r3, [r4, #40]	; 0x28
 801378c:	4b04      	ldr	r3, [pc, #16]	; (80137a0 <std+0x40>)
 801378e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013790:	4b04      	ldr	r3, [pc, #16]	; (80137a4 <std+0x44>)
 8013792:	6323      	str	r3, [r4, #48]	; 0x30
 8013794:	bd10      	pop	{r4, pc}
 8013796:	46c0      	nop			; (mov r8, r8)
 8013798:	080142f1 	.word	0x080142f1
 801379c:	08014319 	.word	0x08014319
 80137a0:	08014351 	.word	0x08014351
 80137a4:	0801437d 	.word	0x0801437d

080137a8 <_cleanup_r>:
 80137a8:	b510      	push	{r4, lr}
 80137aa:	4902      	ldr	r1, [pc, #8]	; (80137b4 <_cleanup_r+0xc>)
 80137ac:	f000 f8ba 	bl	8013924 <_fwalk_reent>
 80137b0:	bd10      	pop	{r4, pc}
 80137b2:	46c0      	nop			; (mov r8, r8)
 80137b4:	080136e1 	.word	0x080136e1

080137b8 <__sfmoreglue>:
 80137b8:	b570      	push	{r4, r5, r6, lr}
 80137ba:	2568      	movs	r5, #104	; 0x68
 80137bc:	1e4a      	subs	r2, r1, #1
 80137be:	4355      	muls	r5, r2
 80137c0:	000e      	movs	r6, r1
 80137c2:	0029      	movs	r1, r5
 80137c4:	3174      	adds	r1, #116	; 0x74
 80137c6:	f7ff fd0b 	bl	80131e0 <_malloc_r>
 80137ca:	1e04      	subs	r4, r0, #0
 80137cc:	d008      	beq.n	80137e0 <__sfmoreglue+0x28>
 80137ce:	2100      	movs	r1, #0
 80137d0:	002a      	movs	r2, r5
 80137d2:	6001      	str	r1, [r0, #0]
 80137d4:	6046      	str	r6, [r0, #4]
 80137d6:	300c      	adds	r0, #12
 80137d8:	60a0      	str	r0, [r4, #8]
 80137da:	3268      	adds	r2, #104	; 0x68
 80137dc:	f7ff fcae 	bl	801313c <memset>
 80137e0:	0020      	movs	r0, r4
 80137e2:	bd70      	pop	{r4, r5, r6, pc}

080137e4 <__sfp_lock_acquire>:
 80137e4:	b510      	push	{r4, lr}
 80137e6:	4802      	ldr	r0, [pc, #8]	; (80137f0 <__sfp_lock_acquire+0xc>)
 80137e8:	f000 f8bd 	bl	8013966 <__retarget_lock_acquire_recursive>
 80137ec:	bd10      	pop	{r4, pc}
 80137ee:	46c0      	nop			; (mov r8, r8)
 80137f0:	20000808 	.word	0x20000808

080137f4 <__sfp_lock_release>:
 80137f4:	b510      	push	{r4, lr}
 80137f6:	4802      	ldr	r0, [pc, #8]	; (8013800 <__sfp_lock_release+0xc>)
 80137f8:	f000 f8b6 	bl	8013968 <__retarget_lock_release_recursive>
 80137fc:	bd10      	pop	{r4, pc}
 80137fe:	46c0      	nop			; (mov r8, r8)
 8013800:	20000808 	.word	0x20000808

08013804 <__sinit_lock_acquire>:
 8013804:	b510      	push	{r4, lr}
 8013806:	4802      	ldr	r0, [pc, #8]	; (8013810 <__sinit_lock_acquire+0xc>)
 8013808:	f000 f8ad 	bl	8013966 <__retarget_lock_acquire_recursive>
 801380c:	bd10      	pop	{r4, pc}
 801380e:	46c0      	nop			; (mov r8, r8)
 8013810:	20000803 	.word	0x20000803

08013814 <__sinit_lock_release>:
 8013814:	b510      	push	{r4, lr}
 8013816:	4802      	ldr	r0, [pc, #8]	; (8013820 <__sinit_lock_release+0xc>)
 8013818:	f000 f8a6 	bl	8013968 <__retarget_lock_release_recursive>
 801381c:	bd10      	pop	{r4, pc}
 801381e:	46c0      	nop			; (mov r8, r8)
 8013820:	20000803 	.word	0x20000803

08013824 <__sinit>:
 8013824:	b513      	push	{r0, r1, r4, lr}
 8013826:	0004      	movs	r4, r0
 8013828:	f7ff ffec 	bl	8013804 <__sinit_lock_acquire>
 801382c:	69a3      	ldr	r3, [r4, #24]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d002      	beq.n	8013838 <__sinit+0x14>
 8013832:	f7ff ffef 	bl	8013814 <__sinit_lock_release>
 8013836:	bd13      	pop	{r0, r1, r4, pc}
 8013838:	64a3      	str	r3, [r4, #72]	; 0x48
 801383a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801383c:	6523      	str	r3, [r4, #80]	; 0x50
 801383e:	4b13      	ldr	r3, [pc, #76]	; (801388c <__sinit+0x68>)
 8013840:	4a13      	ldr	r2, [pc, #76]	; (8013890 <__sinit+0x6c>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	62a2      	str	r2, [r4, #40]	; 0x28
 8013846:	9301      	str	r3, [sp, #4]
 8013848:	42a3      	cmp	r3, r4
 801384a:	d101      	bne.n	8013850 <__sinit+0x2c>
 801384c:	2301      	movs	r3, #1
 801384e:	61a3      	str	r3, [r4, #24]
 8013850:	0020      	movs	r0, r4
 8013852:	f000 f81f 	bl	8013894 <__sfp>
 8013856:	6060      	str	r0, [r4, #4]
 8013858:	0020      	movs	r0, r4
 801385a:	f000 f81b 	bl	8013894 <__sfp>
 801385e:	60a0      	str	r0, [r4, #8]
 8013860:	0020      	movs	r0, r4
 8013862:	f000 f817 	bl	8013894 <__sfp>
 8013866:	2200      	movs	r2, #0
 8013868:	2104      	movs	r1, #4
 801386a:	60e0      	str	r0, [r4, #12]
 801386c:	6860      	ldr	r0, [r4, #4]
 801386e:	f7ff ff77 	bl	8013760 <std>
 8013872:	2201      	movs	r2, #1
 8013874:	2109      	movs	r1, #9
 8013876:	68a0      	ldr	r0, [r4, #8]
 8013878:	f7ff ff72 	bl	8013760 <std>
 801387c:	2202      	movs	r2, #2
 801387e:	2112      	movs	r1, #18
 8013880:	68e0      	ldr	r0, [r4, #12]
 8013882:	f7ff ff6d 	bl	8013760 <std>
 8013886:	2301      	movs	r3, #1
 8013888:	61a3      	str	r3, [r4, #24]
 801388a:	e7d2      	b.n	8013832 <__sinit+0xe>
 801388c:	080186e0 	.word	0x080186e0
 8013890:	080137a9 	.word	0x080137a9

08013894 <__sfp>:
 8013894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013896:	0007      	movs	r7, r0
 8013898:	f7ff ffa4 	bl	80137e4 <__sfp_lock_acquire>
 801389c:	4b1f      	ldr	r3, [pc, #124]	; (801391c <__sfp+0x88>)
 801389e:	681e      	ldr	r6, [r3, #0]
 80138a0:	69b3      	ldr	r3, [r6, #24]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d102      	bne.n	80138ac <__sfp+0x18>
 80138a6:	0030      	movs	r0, r6
 80138a8:	f7ff ffbc 	bl	8013824 <__sinit>
 80138ac:	3648      	adds	r6, #72	; 0x48
 80138ae:	68b4      	ldr	r4, [r6, #8]
 80138b0:	6873      	ldr	r3, [r6, #4]
 80138b2:	3b01      	subs	r3, #1
 80138b4:	d504      	bpl.n	80138c0 <__sfp+0x2c>
 80138b6:	6833      	ldr	r3, [r6, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d022      	beq.n	8013902 <__sfp+0x6e>
 80138bc:	6836      	ldr	r6, [r6, #0]
 80138be:	e7f6      	b.n	80138ae <__sfp+0x1a>
 80138c0:	220c      	movs	r2, #12
 80138c2:	5ea5      	ldrsh	r5, [r4, r2]
 80138c4:	2d00      	cmp	r5, #0
 80138c6:	d11a      	bne.n	80138fe <__sfp+0x6a>
 80138c8:	0020      	movs	r0, r4
 80138ca:	4b15      	ldr	r3, [pc, #84]	; (8013920 <__sfp+0x8c>)
 80138cc:	3058      	adds	r0, #88	; 0x58
 80138ce:	60e3      	str	r3, [r4, #12]
 80138d0:	6665      	str	r5, [r4, #100]	; 0x64
 80138d2:	f000 f847 	bl	8013964 <__retarget_lock_init_recursive>
 80138d6:	f7ff ff8d 	bl	80137f4 <__sfp_lock_release>
 80138da:	0020      	movs	r0, r4
 80138dc:	2208      	movs	r2, #8
 80138de:	0029      	movs	r1, r5
 80138e0:	6025      	str	r5, [r4, #0]
 80138e2:	60a5      	str	r5, [r4, #8]
 80138e4:	6065      	str	r5, [r4, #4]
 80138e6:	6125      	str	r5, [r4, #16]
 80138e8:	6165      	str	r5, [r4, #20]
 80138ea:	61a5      	str	r5, [r4, #24]
 80138ec:	305c      	adds	r0, #92	; 0x5c
 80138ee:	f7ff fc25 	bl	801313c <memset>
 80138f2:	6365      	str	r5, [r4, #52]	; 0x34
 80138f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80138f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80138f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80138fa:	0020      	movs	r0, r4
 80138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138fe:	3468      	adds	r4, #104	; 0x68
 8013900:	e7d7      	b.n	80138b2 <__sfp+0x1e>
 8013902:	2104      	movs	r1, #4
 8013904:	0038      	movs	r0, r7
 8013906:	f7ff ff57 	bl	80137b8 <__sfmoreglue>
 801390a:	1e04      	subs	r4, r0, #0
 801390c:	6030      	str	r0, [r6, #0]
 801390e:	d1d5      	bne.n	80138bc <__sfp+0x28>
 8013910:	f7ff ff70 	bl	80137f4 <__sfp_lock_release>
 8013914:	230c      	movs	r3, #12
 8013916:	603b      	str	r3, [r7, #0]
 8013918:	e7ef      	b.n	80138fa <__sfp+0x66>
 801391a:	46c0      	nop			; (mov r8, r8)
 801391c:	080186e0 	.word	0x080186e0
 8013920:	ffff0001 	.word	0xffff0001

08013924 <_fwalk_reent>:
 8013924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013926:	0004      	movs	r4, r0
 8013928:	0006      	movs	r6, r0
 801392a:	2700      	movs	r7, #0
 801392c:	9101      	str	r1, [sp, #4]
 801392e:	3448      	adds	r4, #72	; 0x48
 8013930:	6863      	ldr	r3, [r4, #4]
 8013932:	68a5      	ldr	r5, [r4, #8]
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	9b00      	ldr	r3, [sp, #0]
 8013938:	3b01      	subs	r3, #1
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	d504      	bpl.n	8013948 <_fwalk_reent+0x24>
 801393e:	6824      	ldr	r4, [r4, #0]
 8013940:	2c00      	cmp	r4, #0
 8013942:	d1f5      	bne.n	8013930 <_fwalk_reent+0xc>
 8013944:	0038      	movs	r0, r7
 8013946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013948:	89ab      	ldrh	r3, [r5, #12]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d908      	bls.n	8013960 <_fwalk_reent+0x3c>
 801394e:	220e      	movs	r2, #14
 8013950:	5eab      	ldrsh	r3, [r5, r2]
 8013952:	3301      	adds	r3, #1
 8013954:	d004      	beq.n	8013960 <_fwalk_reent+0x3c>
 8013956:	0029      	movs	r1, r5
 8013958:	0030      	movs	r0, r6
 801395a:	9b01      	ldr	r3, [sp, #4]
 801395c:	4798      	blx	r3
 801395e:	4307      	orrs	r7, r0
 8013960:	3568      	adds	r5, #104	; 0x68
 8013962:	e7e8      	b.n	8013936 <_fwalk_reent+0x12>

08013964 <__retarget_lock_init_recursive>:
 8013964:	4770      	bx	lr

08013966 <__retarget_lock_acquire_recursive>:
 8013966:	4770      	bx	lr

08013968 <__retarget_lock_release_recursive>:
 8013968:	4770      	bx	lr
	...

0801396c <__swhatbuf_r>:
 801396c:	b570      	push	{r4, r5, r6, lr}
 801396e:	000e      	movs	r6, r1
 8013970:	001d      	movs	r5, r3
 8013972:	230e      	movs	r3, #14
 8013974:	5ec9      	ldrsh	r1, [r1, r3]
 8013976:	0014      	movs	r4, r2
 8013978:	b096      	sub	sp, #88	; 0x58
 801397a:	2900      	cmp	r1, #0
 801397c:	da07      	bge.n	801398e <__swhatbuf_r+0x22>
 801397e:	2300      	movs	r3, #0
 8013980:	602b      	str	r3, [r5, #0]
 8013982:	89b3      	ldrh	r3, [r6, #12]
 8013984:	061b      	lsls	r3, r3, #24
 8013986:	d411      	bmi.n	80139ac <__swhatbuf_r+0x40>
 8013988:	2380      	movs	r3, #128	; 0x80
 801398a:	00db      	lsls	r3, r3, #3
 801398c:	e00f      	b.n	80139ae <__swhatbuf_r+0x42>
 801398e:	466a      	mov	r2, sp
 8013990:	f000 fd20 	bl	80143d4 <_fstat_r>
 8013994:	2800      	cmp	r0, #0
 8013996:	dbf2      	blt.n	801397e <__swhatbuf_r+0x12>
 8013998:	23f0      	movs	r3, #240	; 0xf0
 801399a:	9901      	ldr	r1, [sp, #4]
 801399c:	021b      	lsls	r3, r3, #8
 801399e:	4019      	ands	r1, r3
 80139a0:	4b05      	ldr	r3, [pc, #20]	; (80139b8 <__swhatbuf_r+0x4c>)
 80139a2:	18c9      	adds	r1, r1, r3
 80139a4:	424b      	negs	r3, r1
 80139a6:	4159      	adcs	r1, r3
 80139a8:	6029      	str	r1, [r5, #0]
 80139aa:	e7ed      	b.n	8013988 <__swhatbuf_r+0x1c>
 80139ac:	2340      	movs	r3, #64	; 0x40
 80139ae:	2000      	movs	r0, #0
 80139b0:	6023      	str	r3, [r4, #0]
 80139b2:	b016      	add	sp, #88	; 0x58
 80139b4:	bd70      	pop	{r4, r5, r6, pc}
 80139b6:	46c0      	nop			; (mov r8, r8)
 80139b8:	ffffe000 	.word	0xffffe000

080139bc <__smakebuf_r>:
 80139bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139be:	2602      	movs	r6, #2
 80139c0:	898b      	ldrh	r3, [r1, #12]
 80139c2:	0005      	movs	r5, r0
 80139c4:	000c      	movs	r4, r1
 80139c6:	4233      	tst	r3, r6
 80139c8:	d006      	beq.n	80139d8 <__smakebuf_r+0x1c>
 80139ca:	0023      	movs	r3, r4
 80139cc:	3347      	adds	r3, #71	; 0x47
 80139ce:	6023      	str	r3, [r4, #0]
 80139d0:	6123      	str	r3, [r4, #16]
 80139d2:	2301      	movs	r3, #1
 80139d4:	6163      	str	r3, [r4, #20]
 80139d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80139d8:	466a      	mov	r2, sp
 80139da:	ab01      	add	r3, sp, #4
 80139dc:	f7ff ffc6 	bl	801396c <__swhatbuf_r>
 80139e0:	9900      	ldr	r1, [sp, #0]
 80139e2:	0007      	movs	r7, r0
 80139e4:	0028      	movs	r0, r5
 80139e6:	f7ff fbfb 	bl	80131e0 <_malloc_r>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	d108      	bne.n	8013a00 <__smakebuf_r+0x44>
 80139ee:	220c      	movs	r2, #12
 80139f0:	5ea3      	ldrsh	r3, [r4, r2]
 80139f2:	059a      	lsls	r2, r3, #22
 80139f4:	d4ef      	bmi.n	80139d6 <__smakebuf_r+0x1a>
 80139f6:	2203      	movs	r2, #3
 80139f8:	4393      	bics	r3, r2
 80139fa:	431e      	orrs	r6, r3
 80139fc:	81a6      	strh	r6, [r4, #12]
 80139fe:	e7e4      	b.n	80139ca <__smakebuf_r+0xe>
 8013a00:	4b0f      	ldr	r3, [pc, #60]	; (8013a40 <__smakebuf_r+0x84>)
 8013a02:	62ab      	str	r3, [r5, #40]	; 0x28
 8013a04:	2380      	movs	r3, #128	; 0x80
 8013a06:	89a2      	ldrh	r2, [r4, #12]
 8013a08:	6020      	str	r0, [r4, #0]
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	81a3      	strh	r3, [r4, #12]
 8013a0e:	9b00      	ldr	r3, [sp, #0]
 8013a10:	6120      	str	r0, [r4, #16]
 8013a12:	6163      	str	r3, [r4, #20]
 8013a14:	9b01      	ldr	r3, [sp, #4]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00d      	beq.n	8013a36 <__smakebuf_r+0x7a>
 8013a1a:	0028      	movs	r0, r5
 8013a1c:	230e      	movs	r3, #14
 8013a1e:	5ee1      	ldrsh	r1, [r4, r3]
 8013a20:	f000 fcea 	bl	80143f8 <_isatty_r>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	d006      	beq.n	8013a36 <__smakebuf_r+0x7a>
 8013a28:	2203      	movs	r2, #3
 8013a2a:	89a3      	ldrh	r3, [r4, #12]
 8013a2c:	4393      	bics	r3, r2
 8013a2e:	001a      	movs	r2, r3
 8013a30:	2301      	movs	r3, #1
 8013a32:	4313      	orrs	r3, r2
 8013a34:	81a3      	strh	r3, [r4, #12]
 8013a36:	89a0      	ldrh	r0, [r4, #12]
 8013a38:	4307      	orrs	r7, r0
 8013a3a:	81a7      	strh	r7, [r4, #12]
 8013a3c:	e7cb      	b.n	80139d6 <__smakebuf_r+0x1a>
 8013a3e:	46c0      	nop			; (mov r8, r8)
 8013a40:	080137a9 	.word	0x080137a9

08013a44 <__malloc_lock>:
 8013a44:	b510      	push	{r4, lr}
 8013a46:	4802      	ldr	r0, [pc, #8]	; (8013a50 <__malloc_lock+0xc>)
 8013a48:	f7ff ff8d 	bl	8013966 <__retarget_lock_acquire_recursive>
 8013a4c:	bd10      	pop	{r4, pc}
 8013a4e:	46c0      	nop			; (mov r8, r8)
 8013a50:	20000804 	.word	0x20000804

08013a54 <__malloc_unlock>:
 8013a54:	b510      	push	{r4, lr}
 8013a56:	4802      	ldr	r0, [pc, #8]	; (8013a60 <__malloc_unlock+0xc>)
 8013a58:	f7ff ff86 	bl	8013968 <__retarget_lock_release_recursive>
 8013a5c:	bd10      	pop	{r4, pc}
 8013a5e:	46c0      	nop			; (mov r8, r8)
 8013a60:	20000804 	.word	0x20000804

08013a64 <__ssputs_r>:
 8013a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a66:	688e      	ldr	r6, [r1, #8]
 8013a68:	b085      	sub	sp, #20
 8013a6a:	0007      	movs	r7, r0
 8013a6c:	000c      	movs	r4, r1
 8013a6e:	9203      	str	r2, [sp, #12]
 8013a70:	9301      	str	r3, [sp, #4]
 8013a72:	429e      	cmp	r6, r3
 8013a74:	d83c      	bhi.n	8013af0 <__ssputs_r+0x8c>
 8013a76:	2390      	movs	r3, #144	; 0x90
 8013a78:	898a      	ldrh	r2, [r1, #12]
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	421a      	tst	r2, r3
 8013a7e:	d034      	beq.n	8013aea <__ssputs_r+0x86>
 8013a80:	2503      	movs	r5, #3
 8013a82:	6909      	ldr	r1, [r1, #16]
 8013a84:	6823      	ldr	r3, [r4, #0]
 8013a86:	1a5b      	subs	r3, r3, r1
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	6963      	ldr	r3, [r4, #20]
 8013a8c:	9802      	ldr	r0, [sp, #8]
 8013a8e:	435d      	muls	r5, r3
 8013a90:	0feb      	lsrs	r3, r5, #31
 8013a92:	195d      	adds	r5, r3, r5
 8013a94:	9b01      	ldr	r3, [sp, #4]
 8013a96:	106d      	asrs	r5, r5, #1
 8013a98:	3301      	adds	r3, #1
 8013a9a:	181b      	adds	r3, r3, r0
 8013a9c:	42ab      	cmp	r3, r5
 8013a9e:	d900      	bls.n	8013aa2 <__ssputs_r+0x3e>
 8013aa0:	001d      	movs	r5, r3
 8013aa2:	0553      	lsls	r3, r2, #21
 8013aa4:	d532      	bpl.n	8013b0c <__ssputs_r+0xa8>
 8013aa6:	0029      	movs	r1, r5
 8013aa8:	0038      	movs	r0, r7
 8013aaa:	f7ff fb99 	bl	80131e0 <_malloc_r>
 8013aae:	1e06      	subs	r6, r0, #0
 8013ab0:	d109      	bne.n	8013ac6 <__ssputs_r+0x62>
 8013ab2:	230c      	movs	r3, #12
 8013ab4:	603b      	str	r3, [r7, #0]
 8013ab6:	2340      	movs	r3, #64	; 0x40
 8013ab8:	2001      	movs	r0, #1
 8013aba:	89a2      	ldrh	r2, [r4, #12]
 8013abc:	4240      	negs	r0, r0
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	81a3      	strh	r3, [r4, #12]
 8013ac2:	b005      	add	sp, #20
 8013ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ac6:	9a02      	ldr	r2, [sp, #8]
 8013ac8:	6921      	ldr	r1, [r4, #16]
 8013aca:	f000 fcc6 	bl	801445a <memcpy>
 8013ace:	89a3      	ldrh	r3, [r4, #12]
 8013ad0:	4a14      	ldr	r2, [pc, #80]	; (8013b24 <__ssputs_r+0xc0>)
 8013ad2:	401a      	ands	r2, r3
 8013ad4:	2380      	movs	r3, #128	; 0x80
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	81a3      	strh	r3, [r4, #12]
 8013ada:	9b02      	ldr	r3, [sp, #8]
 8013adc:	6126      	str	r6, [r4, #16]
 8013ade:	18f6      	adds	r6, r6, r3
 8013ae0:	6026      	str	r6, [r4, #0]
 8013ae2:	6165      	str	r5, [r4, #20]
 8013ae4:	9e01      	ldr	r6, [sp, #4]
 8013ae6:	1aed      	subs	r5, r5, r3
 8013ae8:	60a5      	str	r5, [r4, #8]
 8013aea:	9b01      	ldr	r3, [sp, #4]
 8013aec:	429e      	cmp	r6, r3
 8013aee:	d900      	bls.n	8013af2 <__ssputs_r+0x8e>
 8013af0:	9e01      	ldr	r6, [sp, #4]
 8013af2:	0032      	movs	r2, r6
 8013af4:	9903      	ldr	r1, [sp, #12]
 8013af6:	6820      	ldr	r0, [r4, #0]
 8013af8:	f000 fcb8 	bl	801446c <memmove>
 8013afc:	68a3      	ldr	r3, [r4, #8]
 8013afe:	2000      	movs	r0, #0
 8013b00:	1b9b      	subs	r3, r3, r6
 8013b02:	60a3      	str	r3, [r4, #8]
 8013b04:	6823      	ldr	r3, [r4, #0]
 8013b06:	199e      	adds	r6, r3, r6
 8013b08:	6026      	str	r6, [r4, #0]
 8013b0a:	e7da      	b.n	8013ac2 <__ssputs_r+0x5e>
 8013b0c:	002a      	movs	r2, r5
 8013b0e:	0038      	movs	r0, r7
 8013b10:	f000 fcbf 	bl	8014492 <_realloc_r>
 8013b14:	1e06      	subs	r6, r0, #0
 8013b16:	d1e0      	bne.n	8013ada <__ssputs_r+0x76>
 8013b18:	0038      	movs	r0, r7
 8013b1a:	6921      	ldr	r1, [r4, #16]
 8013b1c:	f7ff fb16 	bl	801314c <_free_r>
 8013b20:	e7c7      	b.n	8013ab2 <__ssputs_r+0x4e>
 8013b22:	46c0      	nop			; (mov r8, r8)
 8013b24:	fffffb7f 	.word	0xfffffb7f

08013b28 <_svfiprintf_r>:
 8013b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b2a:	b0a1      	sub	sp, #132	; 0x84
 8013b2c:	9003      	str	r0, [sp, #12]
 8013b2e:	001d      	movs	r5, r3
 8013b30:	898b      	ldrh	r3, [r1, #12]
 8013b32:	000f      	movs	r7, r1
 8013b34:	0016      	movs	r6, r2
 8013b36:	061b      	lsls	r3, r3, #24
 8013b38:	d511      	bpl.n	8013b5e <_svfiprintf_r+0x36>
 8013b3a:	690b      	ldr	r3, [r1, #16]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d10e      	bne.n	8013b5e <_svfiprintf_r+0x36>
 8013b40:	2140      	movs	r1, #64	; 0x40
 8013b42:	f7ff fb4d 	bl	80131e0 <_malloc_r>
 8013b46:	6038      	str	r0, [r7, #0]
 8013b48:	6138      	str	r0, [r7, #16]
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	d105      	bne.n	8013b5a <_svfiprintf_r+0x32>
 8013b4e:	230c      	movs	r3, #12
 8013b50:	9a03      	ldr	r2, [sp, #12]
 8013b52:	3801      	subs	r0, #1
 8013b54:	6013      	str	r3, [r2, #0]
 8013b56:	b021      	add	sp, #132	; 0x84
 8013b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b5a:	2340      	movs	r3, #64	; 0x40
 8013b5c:	617b      	str	r3, [r7, #20]
 8013b5e:	2300      	movs	r3, #0
 8013b60:	ac08      	add	r4, sp, #32
 8013b62:	6163      	str	r3, [r4, #20]
 8013b64:	3320      	adds	r3, #32
 8013b66:	7663      	strb	r3, [r4, #25]
 8013b68:	3310      	adds	r3, #16
 8013b6a:	76a3      	strb	r3, [r4, #26]
 8013b6c:	9507      	str	r5, [sp, #28]
 8013b6e:	0035      	movs	r5, r6
 8013b70:	782b      	ldrb	r3, [r5, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d001      	beq.n	8013b7a <_svfiprintf_r+0x52>
 8013b76:	2b25      	cmp	r3, #37	; 0x25
 8013b78:	d147      	bne.n	8013c0a <_svfiprintf_r+0xe2>
 8013b7a:	1bab      	subs	r3, r5, r6
 8013b7c:	9305      	str	r3, [sp, #20]
 8013b7e:	42b5      	cmp	r5, r6
 8013b80:	d00c      	beq.n	8013b9c <_svfiprintf_r+0x74>
 8013b82:	0032      	movs	r2, r6
 8013b84:	0039      	movs	r1, r7
 8013b86:	9803      	ldr	r0, [sp, #12]
 8013b88:	f7ff ff6c 	bl	8013a64 <__ssputs_r>
 8013b8c:	1c43      	adds	r3, r0, #1
 8013b8e:	d100      	bne.n	8013b92 <_svfiprintf_r+0x6a>
 8013b90:	e0ae      	b.n	8013cf0 <_svfiprintf_r+0x1c8>
 8013b92:	6962      	ldr	r2, [r4, #20]
 8013b94:	9b05      	ldr	r3, [sp, #20]
 8013b96:	4694      	mov	ip, r2
 8013b98:	4463      	add	r3, ip
 8013b9a:	6163      	str	r3, [r4, #20]
 8013b9c:	782b      	ldrb	r3, [r5, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d100      	bne.n	8013ba4 <_svfiprintf_r+0x7c>
 8013ba2:	e0a5      	b.n	8013cf0 <_svfiprintf_r+0x1c8>
 8013ba4:	2201      	movs	r2, #1
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	4252      	negs	r2, r2
 8013baa:	6062      	str	r2, [r4, #4]
 8013bac:	a904      	add	r1, sp, #16
 8013bae:	3254      	adds	r2, #84	; 0x54
 8013bb0:	1852      	adds	r2, r2, r1
 8013bb2:	1c6e      	adds	r6, r5, #1
 8013bb4:	6023      	str	r3, [r4, #0]
 8013bb6:	60e3      	str	r3, [r4, #12]
 8013bb8:	60a3      	str	r3, [r4, #8]
 8013bba:	7013      	strb	r3, [r2, #0]
 8013bbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8013bbe:	2205      	movs	r2, #5
 8013bc0:	7831      	ldrb	r1, [r6, #0]
 8013bc2:	4854      	ldr	r0, [pc, #336]	; (8013d14 <_svfiprintf_r+0x1ec>)
 8013bc4:	f000 fc3e 	bl	8014444 <memchr>
 8013bc8:	1c75      	adds	r5, r6, #1
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	d11f      	bne.n	8013c0e <_svfiprintf_r+0xe6>
 8013bce:	6822      	ldr	r2, [r4, #0]
 8013bd0:	06d3      	lsls	r3, r2, #27
 8013bd2:	d504      	bpl.n	8013bde <_svfiprintf_r+0xb6>
 8013bd4:	2353      	movs	r3, #83	; 0x53
 8013bd6:	a904      	add	r1, sp, #16
 8013bd8:	185b      	adds	r3, r3, r1
 8013bda:	2120      	movs	r1, #32
 8013bdc:	7019      	strb	r1, [r3, #0]
 8013bde:	0713      	lsls	r3, r2, #28
 8013be0:	d504      	bpl.n	8013bec <_svfiprintf_r+0xc4>
 8013be2:	2353      	movs	r3, #83	; 0x53
 8013be4:	a904      	add	r1, sp, #16
 8013be6:	185b      	adds	r3, r3, r1
 8013be8:	212b      	movs	r1, #43	; 0x2b
 8013bea:	7019      	strb	r1, [r3, #0]
 8013bec:	7833      	ldrb	r3, [r6, #0]
 8013bee:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf0:	d016      	beq.n	8013c20 <_svfiprintf_r+0xf8>
 8013bf2:	0035      	movs	r5, r6
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	200a      	movs	r0, #10
 8013bf8:	68e3      	ldr	r3, [r4, #12]
 8013bfa:	782a      	ldrb	r2, [r5, #0]
 8013bfc:	1c6e      	adds	r6, r5, #1
 8013bfe:	3a30      	subs	r2, #48	; 0x30
 8013c00:	2a09      	cmp	r2, #9
 8013c02:	d94e      	bls.n	8013ca2 <_svfiprintf_r+0x17a>
 8013c04:	2900      	cmp	r1, #0
 8013c06:	d111      	bne.n	8013c2c <_svfiprintf_r+0x104>
 8013c08:	e017      	b.n	8013c3a <_svfiprintf_r+0x112>
 8013c0a:	3501      	adds	r5, #1
 8013c0c:	e7b0      	b.n	8013b70 <_svfiprintf_r+0x48>
 8013c0e:	4b41      	ldr	r3, [pc, #260]	; (8013d14 <_svfiprintf_r+0x1ec>)
 8013c10:	6822      	ldr	r2, [r4, #0]
 8013c12:	1ac0      	subs	r0, r0, r3
 8013c14:	2301      	movs	r3, #1
 8013c16:	4083      	lsls	r3, r0
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	002e      	movs	r6, r5
 8013c1c:	6023      	str	r3, [r4, #0]
 8013c1e:	e7ce      	b.n	8013bbe <_svfiprintf_r+0x96>
 8013c20:	9b07      	ldr	r3, [sp, #28]
 8013c22:	1d19      	adds	r1, r3, #4
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	9107      	str	r1, [sp, #28]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	db01      	blt.n	8013c30 <_svfiprintf_r+0x108>
 8013c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c2e:	e004      	b.n	8013c3a <_svfiprintf_r+0x112>
 8013c30:	425b      	negs	r3, r3
 8013c32:	60e3      	str	r3, [r4, #12]
 8013c34:	2302      	movs	r3, #2
 8013c36:	4313      	orrs	r3, r2
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	782b      	ldrb	r3, [r5, #0]
 8013c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013c3e:	d10a      	bne.n	8013c56 <_svfiprintf_r+0x12e>
 8013c40:	786b      	ldrb	r3, [r5, #1]
 8013c42:	2b2a      	cmp	r3, #42	; 0x2a
 8013c44:	d135      	bne.n	8013cb2 <_svfiprintf_r+0x18a>
 8013c46:	9b07      	ldr	r3, [sp, #28]
 8013c48:	3502      	adds	r5, #2
 8013c4a:	1d1a      	adds	r2, r3, #4
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	9207      	str	r2, [sp, #28]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	db2b      	blt.n	8013cac <_svfiprintf_r+0x184>
 8013c54:	9309      	str	r3, [sp, #36]	; 0x24
 8013c56:	4e30      	ldr	r6, [pc, #192]	; (8013d18 <_svfiprintf_r+0x1f0>)
 8013c58:	2203      	movs	r2, #3
 8013c5a:	0030      	movs	r0, r6
 8013c5c:	7829      	ldrb	r1, [r5, #0]
 8013c5e:	f000 fbf1 	bl	8014444 <memchr>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d006      	beq.n	8013c74 <_svfiprintf_r+0x14c>
 8013c66:	2340      	movs	r3, #64	; 0x40
 8013c68:	1b80      	subs	r0, r0, r6
 8013c6a:	4083      	lsls	r3, r0
 8013c6c:	6822      	ldr	r2, [r4, #0]
 8013c6e:	3501      	adds	r5, #1
 8013c70:	4313      	orrs	r3, r2
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	7829      	ldrb	r1, [r5, #0]
 8013c76:	2206      	movs	r2, #6
 8013c78:	4828      	ldr	r0, [pc, #160]	; (8013d1c <_svfiprintf_r+0x1f4>)
 8013c7a:	1c6e      	adds	r6, r5, #1
 8013c7c:	7621      	strb	r1, [r4, #24]
 8013c7e:	f000 fbe1 	bl	8014444 <memchr>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	d03c      	beq.n	8013d00 <_svfiprintf_r+0x1d8>
 8013c86:	4b26      	ldr	r3, [pc, #152]	; (8013d20 <_svfiprintf_r+0x1f8>)
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d125      	bne.n	8013cd8 <_svfiprintf_r+0x1b0>
 8013c8c:	2207      	movs	r2, #7
 8013c8e:	9b07      	ldr	r3, [sp, #28]
 8013c90:	3307      	adds	r3, #7
 8013c92:	4393      	bics	r3, r2
 8013c94:	3308      	adds	r3, #8
 8013c96:	9307      	str	r3, [sp, #28]
 8013c98:	6963      	ldr	r3, [r4, #20]
 8013c9a:	9a04      	ldr	r2, [sp, #16]
 8013c9c:	189b      	adds	r3, r3, r2
 8013c9e:	6163      	str	r3, [r4, #20]
 8013ca0:	e765      	b.n	8013b6e <_svfiprintf_r+0x46>
 8013ca2:	4343      	muls	r3, r0
 8013ca4:	0035      	movs	r5, r6
 8013ca6:	2101      	movs	r1, #1
 8013ca8:	189b      	adds	r3, r3, r2
 8013caa:	e7a6      	b.n	8013bfa <_svfiprintf_r+0xd2>
 8013cac:	2301      	movs	r3, #1
 8013cae:	425b      	negs	r3, r3
 8013cb0:	e7d0      	b.n	8013c54 <_svfiprintf_r+0x12c>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	200a      	movs	r0, #10
 8013cb6:	001a      	movs	r2, r3
 8013cb8:	3501      	adds	r5, #1
 8013cba:	6063      	str	r3, [r4, #4]
 8013cbc:	7829      	ldrb	r1, [r5, #0]
 8013cbe:	1c6e      	adds	r6, r5, #1
 8013cc0:	3930      	subs	r1, #48	; 0x30
 8013cc2:	2909      	cmp	r1, #9
 8013cc4:	d903      	bls.n	8013cce <_svfiprintf_r+0x1a6>
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d0c5      	beq.n	8013c56 <_svfiprintf_r+0x12e>
 8013cca:	9209      	str	r2, [sp, #36]	; 0x24
 8013ccc:	e7c3      	b.n	8013c56 <_svfiprintf_r+0x12e>
 8013cce:	4342      	muls	r2, r0
 8013cd0:	0035      	movs	r5, r6
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	1852      	adds	r2, r2, r1
 8013cd6:	e7f1      	b.n	8013cbc <_svfiprintf_r+0x194>
 8013cd8:	ab07      	add	r3, sp, #28
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	003a      	movs	r2, r7
 8013cde:	0021      	movs	r1, r4
 8013ce0:	4b10      	ldr	r3, [pc, #64]	; (8013d24 <_svfiprintf_r+0x1fc>)
 8013ce2:	9803      	ldr	r0, [sp, #12]
 8013ce4:	e000      	b.n	8013ce8 <_svfiprintf_r+0x1c0>
 8013ce6:	bf00      	nop
 8013ce8:	9004      	str	r0, [sp, #16]
 8013cea:	9b04      	ldr	r3, [sp, #16]
 8013cec:	3301      	adds	r3, #1
 8013cee:	d1d3      	bne.n	8013c98 <_svfiprintf_r+0x170>
 8013cf0:	89bb      	ldrh	r3, [r7, #12]
 8013cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013cf4:	065b      	lsls	r3, r3, #25
 8013cf6:	d400      	bmi.n	8013cfa <_svfiprintf_r+0x1d2>
 8013cf8:	e72d      	b.n	8013b56 <_svfiprintf_r+0x2e>
 8013cfa:	2001      	movs	r0, #1
 8013cfc:	4240      	negs	r0, r0
 8013cfe:	e72a      	b.n	8013b56 <_svfiprintf_r+0x2e>
 8013d00:	ab07      	add	r3, sp, #28
 8013d02:	9300      	str	r3, [sp, #0]
 8013d04:	003a      	movs	r2, r7
 8013d06:	0021      	movs	r1, r4
 8013d08:	4b06      	ldr	r3, [pc, #24]	; (8013d24 <_svfiprintf_r+0x1fc>)
 8013d0a:	9803      	ldr	r0, [sp, #12]
 8013d0c:	f000 f9de 	bl	80140cc <_printf_i>
 8013d10:	e7ea      	b.n	8013ce8 <_svfiprintf_r+0x1c0>
 8013d12:	46c0      	nop			; (mov r8, r8)
 8013d14:	08018744 	.word	0x08018744
 8013d18:	0801874a 	.word	0x0801874a
 8013d1c:	0801874e 	.word	0x0801874e
 8013d20:	00000000 	.word	0x00000000
 8013d24:	08013a65 	.word	0x08013a65

08013d28 <__sfputc_r>:
 8013d28:	6893      	ldr	r3, [r2, #8]
 8013d2a:	b510      	push	{r4, lr}
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	6093      	str	r3, [r2, #8]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	da04      	bge.n	8013d3e <__sfputc_r+0x16>
 8013d34:	6994      	ldr	r4, [r2, #24]
 8013d36:	42a3      	cmp	r3, r4
 8013d38:	db07      	blt.n	8013d4a <__sfputc_r+0x22>
 8013d3a:	290a      	cmp	r1, #10
 8013d3c:	d005      	beq.n	8013d4a <__sfputc_r+0x22>
 8013d3e:	6813      	ldr	r3, [r2, #0]
 8013d40:	1c58      	adds	r0, r3, #1
 8013d42:	6010      	str	r0, [r2, #0]
 8013d44:	7019      	strb	r1, [r3, #0]
 8013d46:	0008      	movs	r0, r1
 8013d48:	bd10      	pop	{r4, pc}
 8013d4a:	f7ff fb6f 	bl	801342c <__swbuf_r>
 8013d4e:	0001      	movs	r1, r0
 8013d50:	e7f9      	b.n	8013d46 <__sfputc_r+0x1e>

08013d52 <__sfputs_r>:
 8013d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d54:	0006      	movs	r6, r0
 8013d56:	000f      	movs	r7, r1
 8013d58:	0014      	movs	r4, r2
 8013d5a:	18d5      	adds	r5, r2, r3
 8013d5c:	42ac      	cmp	r4, r5
 8013d5e:	d101      	bne.n	8013d64 <__sfputs_r+0x12>
 8013d60:	2000      	movs	r0, #0
 8013d62:	e007      	b.n	8013d74 <__sfputs_r+0x22>
 8013d64:	7821      	ldrb	r1, [r4, #0]
 8013d66:	003a      	movs	r2, r7
 8013d68:	0030      	movs	r0, r6
 8013d6a:	f7ff ffdd 	bl	8013d28 <__sfputc_r>
 8013d6e:	3401      	adds	r4, #1
 8013d70:	1c43      	adds	r3, r0, #1
 8013d72:	d1f3      	bne.n	8013d5c <__sfputs_r+0xa>
 8013d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d78 <_vfiprintf_r>:
 8013d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d7a:	b0a1      	sub	sp, #132	; 0x84
 8013d7c:	0006      	movs	r6, r0
 8013d7e:	000c      	movs	r4, r1
 8013d80:	001f      	movs	r7, r3
 8013d82:	9203      	str	r2, [sp, #12]
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d004      	beq.n	8013d92 <_vfiprintf_r+0x1a>
 8013d88:	6983      	ldr	r3, [r0, #24]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d101      	bne.n	8013d92 <_vfiprintf_r+0x1a>
 8013d8e:	f7ff fd49 	bl	8013824 <__sinit>
 8013d92:	4b8e      	ldr	r3, [pc, #568]	; (8013fcc <_vfiprintf_r+0x254>)
 8013d94:	429c      	cmp	r4, r3
 8013d96:	d11c      	bne.n	8013dd2 <_vfiprintf_r+0x5a>
 8013d98:	6874      	ldr	r4, [r6, #4]
 8013d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d9c:	07db      	lsls	r3, r3, #31
 8013d9e:	d405      	bmi.n	8013dac <_vfiprintf_r+0x34>
 8013da0:	89a3      	ldrh	r3, [r4, #12]
 8013da2:	059b      	lsls	r3, r3, #22
 8013da4:	d402      	bmi.n	8013dac <_vfiprintf_r+0x34>
 8013da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013da8:	f7ff fddd 	bl	8013966 <__retarget_lock_acquire_recursive>
 8013dac:	89a3      	ldrh	r3, [r4, #12]
 8013dae:	071b      	lsls	r3, r3, #28
 8013db0:	d502      	bpl.n	8013db8 <_vfiprintf_r+0x40>
 8013db2:	6923      	ldr	r3, [r4, #16]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d11d      	bne.n	8013df4 <_vfiprintf_r+0x7c>
 8013db8:	0021      	movs	r1, r4
 8013dba:	0030      	movs	r0, r6
 8013dbc:	f7ff fb8c 	bl	80134d8 <__swsetup_r>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d017      	beq.n	8013df4 <_vfiprintf_r+0x7c>
 8013dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013dc6:	07db      	lsls	r3, r3, #31
 8013dc8:	d50d      	bpl.n	8013de6 <_vfiprintf_r+0x6e>
 8013dca:	2001      	movs	r0, #1
 8013dcc:	4240      	negs	r0, r0
 8013dce:	b021      	add	sp, #132	; 0x84
 8013dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dd2:	4b7f      	ldr	r3, [pc, #508]	; (8013fd0 <_vfiprintf_r+0x258>)
 8013dd4:	429c      	cmp	r4, r3
 8013dd6:	d101      	bne.n	8013ddc <_vfiprintf_r+0x64>
 8013dd8:	68b4      	ldr	r4, [r6, #8]
 8013dda:	e7de      	b.n	8013d9a <_vfiprintf_r+0x22>
 8013ddc:	4b7d      	ldr	r3, [pc, #500]	; (8013fd4 <_vfiprintf_r+0x25c>)
 8013dde:	429c      	cmp	r4, r3
 8013de0:	d1db      	bne.n	8013d9a <_vfiprintf_r+0x22>
 8013de2:	68f4      	ldr	r4, [r6, #12]
 8013de4:	e7d9      	b.n	8013d9a <_vfiprintf_r+0x22>
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	059b      	lsls	r3, r3, #22
 8013dea:	d4ee      	bmi.n	8013dca <_vfiprintf_r+0x52>
 8013dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dee:	f7ff fdbb 	bl	8013968 <__retarget_lock_release_recursive>
 8013df2:	e7ea      	b.n	8013dca <_vfiprintf_r+0x52>
 8013df4:	2300      	movs	r3, #0
 8013df6:	ad08      	add	r5, sp, #32
 8013df8:	616b      	str	r3, [r5, #20]
 8013dfa:	3320      	adds	r3, #32
 8013dfc:	766b      	strb	r3, [r5, #25]
 8013dfe:	3310      	adds	r3, #16
 8013e00:	76ab      	strb	r3, [r5, #26]
 8013e02:	9707      	str	r7, [sp, #28]
 8013e04:	9f03      	ldr	r7, [sp, #12]
 8013e06:	783b      	ldrb	r3, [r7, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <_vfiprintf_r+0x98>
 8013e0c:	2b25      	cmp	r3, #37	; 0x25
 8013e0e:	d14e      	bne.n	8013eae <_vfiprintf_r+0x136>
 8013e10:	9b03      	ldr	r3, [sp, #12]
 8013e12:	1afb      	subs	r3, r7, r3
 8013e14:	9305      	str	r3, [sp, #20]
 8013e16:	9b03      	ldr	r3, [sp, #12]
 8013e18:	429f      	cmp	r7, r3
 8013e1a:	d00d      	beq.n	8013e38 <_vfiprintf_r+0xc0>
 8013e1c:	9b05      	ldr	r3, [sp, #20]
 8013e1e:	0021      	movs	r1, r4
 8013e20:	0030      	movs	r0, r6
 8013e22:	9a03      	ldr	r2, [sp, #12]
 8013e24:	f7ff ff95 	bl	8013d52 <__sfputs_r>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d100      	bne.n	8013e2e <_vfiprintf_r+0xb6>
 8013e2c:	e0b5      	b.n	8013f9a <_vfiprintf_r+0x222>
 8013e2e:	696a      	ldr	r2, [r5, #20]
 8013e30:	9b05      	ldr	r3, [sp, #20]
 8013e32:	4694      	mov	ip, r2
 8013e34:	4463      	add	r3, ip
 8013e36:	616b      	str	r3, [r5, #20]
 8013e38:	783b      	ldrb	r3, [r7, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d100      	bne.n	8013e40 <_vfiprintf_r+0xc8>
 8013e3e:	e0ac      	b.n	8013f9a <_vfiprintf_r+0x222>
 8013e40:	2201      	movs	r2, #1
 8013e42:	1c7b      	adds	r3, r7, #1
 8013e44:	9303      	str	r3, [sp, #12]
 8013e46:	2300      	movs	r3, #0
 8013e48:	4252      	negs	r2, r2
 8013e4a:	606a      	str	r2, [r5, #4]
 8013e4c:	a904      	add	r1, sp, #16
 8013e4e:	3254      	adds	r2, #84	; 0x54
 8013e50:	1852      	adds	r2, r2, r1
 8013e52:	602b      	str	r3, [r5, #0]
 8013e54:	60eb      	str	r3, [r5, #12]
 8013e56:	60ab      	str	r3, [r5, #8]
 8013e58:	7013      	strb	r3, [r2, #0]
 8013e5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8013e5c:	9b03      	ldr	r3, [sp, #12]
 8013e5e:	2205      	movs	r2, #5
 8013e60:	7819      	ldrb	r1, [r3, #0]
 8013e62:	485d      	ldr	r0, [pc, #372]	; (8013fd8 <_vfiprintf_r+0x260>)
 8013e64:	f000 faee 	bl	8014444 <memchr>
 8013e68:	9b03      	ldr	r3, [sp, #12]
 8013e6a:	1c5f      	adds	r7, r3, #1
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d120      	bne.n	8013eb2 <_vfiprintf_r+0x13a>
 8013e70:	682a      	ldr	r2, [r5, #0]
 8013e72:	06d3      	lsls	r3, r2, #27
 8013e74:	d504      	bpl.n	8013e80 <_vfiprintf_r+0x108>
 8013e76:	2353      	movs	r3, #83	; 0x53
 8013e78:	a904      	add	r1, sp, #16
 8013e7a:	185b      	adds	r3, r3, r1
 8013e7c:	2120      	movs	r1, #32
 8013e7e:	7019      	strb	r1, [r3, #0]
 8013e80:	0713      	lsls	r3, r2, #28
 8013e82:	d504      	bpl.n	8013e8e <_vfiprintf_r+0x116>
 8013e84:	2353      	movs	r3, #83	; 0x53
 8013e86:	a904      	add	r1, sp, #16
 8013e88:	185b      	adds	r3, r3, r1
 8013e8a:	212b      	movs	r1, #43	; 0x2b
 8013e8c:	7019      	strb	r1, [r3, #0]
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	2b2a      	cmp	r3, #42	; 0x2a
 8013e94:	d016      	beq.n	8013ec4 <_vfiprintf_r+0x14c>
 8013e96:	2100      	movs	r1, #0
 8013e98:	68eb      	ldr	r3, [r5, #12]
 8013e9a:	9f03      	ldr	r7, [sp, #12]
 8013e9c:	783a      	ldrb	r2, [r7, #0]
 8013e9e:	1c78      	adds	r0, r7, #1
 8013ea0:	3a30      	subs	r2, #48	; 0x30
 8013ea2:	4684      	mov	ip, r0
 8013ea4:	2a09      	cmp	r2, #9
 8013ea6:	d94f      	bls.n	8013f48 <_vfiprintf_r+0x1d0>
 8013ea8:	2900      	cmp	r1, #0
 8013eaa:	d111      	bne.n	8013ed0 <_vfiprintf_r+0x158>
 8013eac:	e017      	b.n	8013ede <_vfiprintf_r+0x166>
 8013eae:	3701      	adds	r7, #1
 8013eb0:	e7a9      	b.n	8013e06 <_vfiprintf_r+0x8e>
 8013eb2:	4b49      	ldr	r3, [pc, #292]	; (8013fd8 <_vfiprintf_r+0x260>)
 8013eb4:	682a      	ldr	r2, [r5, #0]
 8013eb6:	1ac0      	subs	r0, r0, r3
 8013eb8:	2301      	movs	r3, #1
 8013eba:	4083      	lsls	r3, r0
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	602b      	str	r3, [r5, #0]
 8013ec0:	9703      	str	r7, [sp, #12]
 8013ec2:	e7cb      	b.n	8013e5c <_vfiprintf_r+0xe4>
 8013ec4:	9b07      	ldr	r3, [sp, #28]
 8013ec6:	1d19      	adds	r1, r3, #4
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	9107      	str	r1, [sp, #28]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	db01      	blt.n	8013ed4 <_vfiprintf_r+0x15c>
 8013ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ed2:	e004      	b.n	8013ede <_vfiprintf_r+0x166>
 8013ed4:	425b      	negs	r3, r3
 8013ed6:	60eb      	str	r3, [r5, #12]
 8013ed8:	2302      	movs	r3, #2
 8013eda:	4313      	orrs	r3, r2
 8013edc:	602b      	str	r3, [r5, #0]
 8013ede:	783b      	ldrb	r3, [r7, #0]
 8013ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8013ee2:	d10a      	bne.n	8013efa <_vfiprintf_r+0x182>
 8013ee4:	787b      	ldrb	r3, [r7, #1]
 8013ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ee8:	d137      	bne.n	8013f5a <_vfiprintf_r+0x1e2>
 8013eea:	9b07      	ldr	r3, [sp, #28]
 8013eec:	3702      	adds	r7, #2
 8013eee:	1d1a      	adds	r2, r3, #4
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	9207      	str	r2, [sp, #28]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	db2d      	blt.n	8013f54 <_vfiprintf_r+0x1dc>
 8013ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8013efa:	2203      	movs	r2, #3
 8013efc:	7839      	ldrb	r1, [r7, #0]
 8013efe:	4837      	ldr	r0, [pc, #220]	; (8013fdc <_vfiprintf_r+0x264>)
 8013f00:	f000 faa0 	bl	8014444 <memchr>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	d007      	beq.n	8013f18 <_vfiprintf_r+0x1a0>
 8013f08:	4b34      	ldr	r3, [pc, #208]	; (8013fdc <_vfiprintf_r+0x264>)
 8013f0a:	682a      	ldr	r2, [r5, #0]
 8013f0c:	1ac0      	subs	r0, r0, r3
 8013f0e:	2340      	movs	r3, #64	; 0x40
 8013f10:	4083      	lsls	r3, r0
 8013f12:	4313      	orrs	r3, r2
 8013f14:	3701      	adds	r7, #1
 8013f16:	602b      	str	r3, [r5, #0]
 8013f18:	7839      	ldrb	r1, [r7, #0]
 8013f1a:	1c7b      	adds	r3, r7, #1
 8013f1c:	2206      	movs	r2, #6
 8013f1e:	4830      	ldr	r0, [pc, #192]	; (8013fe0 <_vfiprintf_r+0x268>)
 8013f20:	9303      	str	r3, [sp, #12]
 8013f22:	7629      	strb	r1, [r5, #24]
 8013f24:	f000 fa8e 	bl	8014444 <memchr>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d045      	beq.n	8013fb8 <_vfiprintf_r+0x240>
 8013f2c:	4b2d      	ldr	r3, [pc, #180]	; (8013fe4 <_vfiprintf_r+0x26c>)
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d127      	bne.n	8013f82 <_vfiprintf_r+0x20a>
 8013f32:	2207      	movs	r2, #7
 8013f34:	9b07      	ldr	r3, [sp, #28]
 8013f36:	3307      	adds	r3, #7
 8013f38:	4393      	bics	r3, r2
 8013f3a:	3308      	adds	r3, #8
 8013f3c:	9307      	str	r3, [sp, #28]
 8013f3e:	696b      	ldr	r3, [r5, #20]
 8013f40:	9a04      	ldr	r2, [sp, #16]
 8013f42:	189b      	adds	r3, r3, r2
 8013f44:	616b      	str	r3, [r5, #20]
 8013f46:	e75d      	b.n	8013e04 <_vfiprintf_r+0x8c>
 8013f48:	210a      	movs	r1, #10
 8013f4a:	434b      	muls	r3, r1
 8013f4c:	4667      	mov	r7, ip
 8013f4e:	189b      	adds	r3, r3, r2
 8013f50:	3909      	subs	r1, #9
 8013f52:	e7a3      	b.n	8013e9c <_vfiprintf_r+0x124>
 8013f54:	2301      	movs	r3, #1
 8013f56:	425b      	negs	r3, r3
 8013f58:	e7ce      	b.n	8013ef8 <_vfiprintf_r+0x180>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	001a      	movs	r2, r3
 8013f5e:	3701      	adds	r7, #1
 8013f60:	606b      	str	r3, [r5, #4]
 8013f62:	7839      	ldrb	r1, [r7, #0]
 8013f64:	1c78      	adds	r0, r7, #1
 8013f66:	3930      	subs	r1, #48	; 0x30
 8013f68:	4684      	mov	ip, r0
 8013f6a:	2909      	cmp	r1, #9
 8013f6c:	d903      	bls.n	8013f76 <_vfiprintf_r+0x1fe>
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d0c3      	beq.n	8013efa <_vfiprintf_r+0x182>
 8013f72:	9209      	str	r2, [sp, #36]	; 0x24
 8013f74:	e7c1      	b.n	8013efa <_vfiprintf_r+0x182>
 8013f76:	230a      	movs	r3, #10
 8013f78:	435a      	muls	r2, r3
 8013f7a:	4667      	mov	r7, ip
 8013f7c:	1852      	adds	r2, r2, r1
 8013f7e:	3b09      	subs	r3, #9
 8013f80:	e7ef      	b.n	8013f62 <_vfiprintf_r+0x1ea>
 8013f82:	ab07      	add	r3, sp, #28
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	0022      	movs	r2, r4
 8013f88:	0029      	movs	r1, r5
 8013f8a:	0030      	movs	r0, r6
 8013f8c:	4b16      	ldr	r3, [pc, #88]	; (8013fe8 <_vfiprintf_r+0x270>)
 8013f8e:	e000      	b.n	8013f92 <_vfiprintf_r+0x21a>
 8013f90:	bf00      	nop
 8013f92:	9004      	str	r0, [sp, #16]
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	3301      	adds	r3, #1
 8013f98:	d1d1      	bne.n	8013f3e <_vfiprintf_r+0x1c6>
 8013f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f9c:	07db      	lsls	r3, r3, #31
 8013f9e:	d405      	bmi.n	8013fac <_vfiprintf_r+0x234>
 8013fa0:	89a3      	ldrh	r3, [r4, #12]
 8013fa2:	059b      	lsls	r3, r3, #22
 8013fa4:	d402      	bmi.n	8013fac <_vfiprintf_r+0x234>
 8013fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fa8:	f7ff fcde 	bl	8013968 <__retarget_lock_release_recursive>
 8013fac:	89a3      	ldrh	r3, [r4, #12]
 8013fae:	065b      	lsls	r3, r3, #25
 8013fb0:	d500      	bpl.n	8013fb4 <_vfiprintf_r+0x23c>
 8013fb2:	e70a      	b.n	8013dca <_vfiprintf_r+0x52>
 8013fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013fb6:	e70a      	b.n	8013dce <_vfiprintf_r+0x56>
 8013fb8:	ab07      	add	r3, sp, #28
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	0022      	movs	r2, r4
 8013fbe:	0029      	movs	r1, r5
 8013fc0:	0030      	movs	r0, r6
 8013fc2:	4b09      	ldr	r3, [pc, #36]	; (8013fe8 <_vfiprintf_r+0x270>)
 8013fc4:	f000 f882 	bl	80140cc <_printf_i>
 8013fc8:	e7e3      	b.n	8013f92 <_vfiprintf_r+0x21a>
 8013fca:	46c0      	nop			; (mov r8, r8)
 8013fcc:	08018704 	.word	0x08018704
 8013fd0:	08018724 	.word	0x08018724
 8013fd4:	080186e4 	.word	0x080186e4
 8013fd8:	08018744 	.word	0x08018744
 8013fdc:	0801874a 	.word	0x0801874a
 8013fe0:	0801874e 	.word	0x0801874e
 8013fe4:	00000000 	.word	0x00000000
 8013fe8:	08013d53 	.word	0x08013d53

08013fec <_printf_common>:
 8013fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fee:	0015      	movs	r5, r2
 8013ff0:	9301      	str	r3, [sp, #4]
 8013ff2:	688a      	ldr	r2, [r1, #8]
 8013ff4:	690b      	ldr	r3, [r1, #16]
 8013ff6:	000c      	movs	r4, r1
 8013ff8:	9000      	str	r0, [sp, #0]
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	da00      	bge.n	8014000 <_printf_common+0x14>
 8013ffe:	0013      	movs	r3, r2
 8014000:	0022      	movs	r2, r4
 8014002:	602b      	str	r3, [r5, #0]
 8014004:	3243      	adds	r2, #67	; 0x43
 8014006:	7812      	ldrb	r2, [r2, #0]
 8014008:	2a00      	cmp	r2, #0
 801400a:	d001      	beq.n	8014010 <_printf_common+0x24>
 801400c:	3301      	adds	r3, #1
 801400e:	602b      	str	r3, [r5, #0]
 8014010:	6823      	ldr	r3, [r4, #0]
 8014012:	069b      	lsls	r3, r3, #26
 8014014:	d502      	bpl.n	801401c <_printf_common+0x30>
 8014016:	682b      	ldr	r3, [r5, #0]
 8014018:	3302      	adds	r3, #2
 801401a:	602b      	str	r3, [r5, #0]
 801401c:	6822      	ldr	r2, [r4, #0]
 801401e:	2306      	movs	r3, #6
 8014020:	0017      	movs	r7, r2
 8014022:	401f      	ands	r7, r3
 8014024:	421a      	tst	r2, r3
 8014026:	d027      	beq.n	8014078 <_printf_common+0x8c>
 8014028:	0023      	movs	r3, r4
 801402a:	3343      	adds	r3, #67	; 0x43
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	1e5a      	subs	r2, r3, #1
 8014030:	4193      	sbcs	r3, r2
 8014032:	6822      	ldr	r2, [r4, #0]
 8014034:	0692      	lsls	r2, r2, #26
 8014036:	d430      	bmi.n	801409a <_printf_common+0xae>
 8014038:	0022      	movs	r2, r4
 801403a:	9901      	ldr	r1, [sp, #4]
 801403c:	9800      	ldr	r0, [sp, #0]
 801403e:	9e08      	ldr	r6, [sp, #32]
 8014040:	3243      	adds	r2, #67	; 0x43
 8014042:	47b0      	blx	r6
 8014044:	1c43      	adds	r3, r0, #1
 8014046:	d025      	beq.n	8014094 <_printf_common+0xa8>
 8014048:	2306      	movs	r3, #6
 801404a:	6820      	ldr	r0, [r4, #0]
 801404c:	682a      	ldr	r2, [r5, #0]
 801404e:	68e1      	ldr	r1, [r4, #12]
 8014050:	2500      	movs	r5, #0
 8014052:	4003      	ands	r3, r0
 8014054:	2b04      	cmp	r3, #4
 8014056:	d103      	bne.n	8014060 <_printf_common+0x74>
 8014058:	1a8d      	subs	r5, r1, r2
 801405a:	43eb      	mvns	r3, r5
 801405c:	17db      	asrs	r3, r3, #31
 801405e:	401d      	ands	r5, r3
 8014060:	68a3      	ldr	r3, [r4, #8]
 8014062:	6922      	ldr	r2, [r4, #16]
 8014064:	4293      	cmp	r3, r2
 8014066:	dd01      	ble.n	801406c <_printf_common+0x80>
 8014068:	1a9b      	subs	r3, r3, r2
 801406a:	18ed      	adds	r5, r5, r3
 801406c:	2700      	movs	r7, #0
 801406e:	42bd      	cmp	r5, r7
 8014070:	d120      	bne.n	80140b4 <_printf_common+0xc8>
 8014072:	2000      	movs	r0, #0
 8014074:	e010      	b.n	8014098 <_printf_common+0xac>
 8014076:	3701      	adds	r7, #1
 8014078:	68e3      	ldr	r3, [r4, #12]
 801407a:	682a      	ldr	r2, [r5, #0]
 801407c:	1a9b      	subs	r3, r3, r2
 801407e:	42bb      	cmp	r3, r7
 8014080:	ddd2      	ble.n	8014028 <_printf_common+0x3c>
 8014082:	0022      	movs	r2, r4
 8014084:	2301      	movs	r3, #1
 8014086:	9901      	ldr	r1, [sp, #4]
 8014088:	9800      	ldr	r0, [sp, #0]
 801408a:	9e08      	ldr	r6, [sp, #32]
 801408c:	3219      	adds	r2, #25
 801408e:	47b0      	blx	r6
 8014090:	1c43      	adds	r3, r0, #1
 8014092:	d1f0      	bne.n	8014076 <_printf_common+0x8a>
 8014094:	2001      	movs	r0, #1
 8014096:	4240      	negs	r0, r0
 8014098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801409a:	2030      	movs	r0, #48	; 0x30
 801409c:	18e1      	adds	r1, r4, r3
 801409e:	3143      	adds	r1, #67	; 0x43
 80140a0:	7008      	strb	r0, [r1, #0]
 80140a2:	0021      	movs	r1, r4
 80140a4:	1c5a      	adds	r2, r3, #1
 80140a6:	3145      	adds	r1, #69	; 0x45
 80140a8:	7809      	ldrb	r1, [r1, #0]
 80140aa:	18a2      	adds	r2, r4, r2
 80140ac:	3243      	adds	r2, #67	; 0x43
 80140ae:	3302      	adds	r3, #2
 80140b0:	7011      	strb	r1, [r2, #0]
 80140b2:	e7c1      	b.n	8014038 <_printf_common+0x4c>
 80140b4:	0022      	movs	r2, r4
 80140b6:	2301      	movs	r3, #1
 80140b8:	9901      	ldr	r1, [sp, #4]
 80140ba:	9800      	ldr	r0, [sp, #0]
 80140bc:	9e08      	ldr	r6, [sp, #32]
 80140be:	321a      	adds	r2, #26
 80140c0:	47b0      	blx	r6
 80140c2:	1c43      	adds	r3, r0, #1
 80140c4:	d0e6      	beq.n	8014094 <_printf_common+0xa8>
 80140c6:	3701      	adds	r7, #1
 80140c8:	e7d1      	b.n	801406e <_printf_common+0x82>
	...

080140cc <_printf_i>:
 80140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ce:	b08b      	sub	sp, #44	; 0x2c
 80140d0:	9206      	str	r2, [sp, #24]
 80140d2:	000a      	movs	r2, r1
 80140d4:	3243      	adds	r2, #67	; 0x43
 80140d6:	9307      	str	r3, [sp, #28]
 80140d8:	9005      	str	r0, [sp, #20]
 80140da:	9204      	str	r2, [sp, #16]
 80140dc:	7e0a      	ldrb	r2, [r1, #24]
 80140de:	000c      	movs	r4, r1
 80140e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140e2:	2a78      	cmp	r2, #120	; 0x78
 80140e4:	d806      	bhi.n	80140f4 <_printf_i+0x28>
 80140e6:	2a62      	cmp	r2, #98	; 0x62
 80140e8:	d808      	bhi.n	80140fc <_printf_i+0x30>
 80140ea:	2a00      	cmp	r2, #0
 80140ec:	d100      	bne.n	80140f0 <_printf_i+0x24>
 80140ee:	e0c0      	b.n	8014272 <_printf_i+0x1a6>
 80140f0:	2a58      	cmp	r2, #88	; 0x58
 80140f2:	d052      	beq.n	801419a <_printf_i+0xce>
 80140f4:	0026      	movs	r6, r4
 80140f6:	3642      	adds	r6, #66	; 0x42
 80140f8:	7032      	strb	r2, [r6, #0]
 80140fa:	e022      	b.n	8014142 <_printf_i+0x76>
 80140fc:	0010      	movs	r0, r2
 80140fe:	3863      	subs	r0, #99	; 0x63
 8014100:	2815      	cmp	r0, #21
 8014102:	d8f7      	bhi.n	80140f4 <_printf_i+0x28>
 8014104:	f7ec f800 	bl	8000108 <__gnu_thumb1_case_shi>
 8014108:	001f0016 	.word	0x001f0016
 801410c:	fff6fff6 	.word	0xfff6fff6
 8014110:	fff6fff6 	.word	0xfff6fff6
 8014114:	fff6001f 	.word	0xfff6001f
 8014118:	fff6fff6 	.word	0xfff6fff6
 801411c:	00a8fff6 	.word	0x00a8fff6
 8014120:	009a0036 	.word	0x009a0036
 8014124:	fff6fff6 	.word	0xfff6fff6
 8014128:	fff600b9 	.word	0xfff600b9
 801412c:	fff60036 	.word	0xfff60036
 8014130:	009efff6 	.word	0x009efff6
 8014134:	0026      	movs	r6, r4
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	3642      	adds	r6, #66	; 0x42
 801413a:	1d11      	adds	r1, r2, #4
 801413c:	6019      	str	r1, [r3, #0]
 801413e:	6813      	ldr	r3, [r2, #0]
 8014140:	7033      	strb	r3, [r6, #0]
 8014142:	2301      	movs	r3, #1
 8014144:	e0a7      	b.n	8014296 <_printf_i+0x1ca>
 8014146:	6808      	ldr	r0, [r1, #0]
 8014148:	6819      	ldr	r1, [r3, #0]
 801414a:	1d0a      	adds	r2, r1, #4
 801414c:	0605      	lsls	r5, r0, #24
 801414e:	d50b      	bpl.n	8014168 <_printf_i+0x9c>
 8014150:	680d      	ldr	r5, [r1, #0]
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	2d00      	cmp	r5, #0
 8014156:	da03      	bge.n	8014160 <_printf_i+0x94>
 8014158:	232d      	movs	r3, #45	; 0x2d
 801415a:	9a04      	ldr	r2, [sp, #16]
 801415c:	426d      	negs	r5, r5
 801415e:	7013      	strb	r3, [r2, #0]
 8014160:	4b61      	ldr	r3, [pc, #388]	; (80142e8 <_printf_i+0x21c>)
 8014162:	270a      	movs	r7, #10
 8014164:	9303      	str	r3, [sp, #12]
 8014166:	e032      	b.n	80141ce <_printf_i+0x102>
 8014168:	680d      	ldr	r5, [r1, #0]
 801416a:	601a      	str	r2, [r3, #0]
 801416c:	0641      	lsls	r1, r0, #25
 801416e:	d5f1      	bpl.n	8014154 <_printf_i+0x88>
 8014170:	b22d      	sxth	r5, r5
 8014172:	e7ef      	b.n	8014154 <_printf_i+0x88>
 8014174:	680d      	ldr	r5, [r1, #0]
 8014176:	6819      	ldr	r1, [r3, #0]
 8014178:	1d08      	adds	r0, r1, #4
 801417a:	6018      	str	r0, [r3, #0]
 801417c:	062e      	lsls	r6, r5, #24
 801417e:	d501      	bpl.n	8014184 <_printf_i+0xb8>
 8014180:	680d      	ldr	r5, [r1, #0]
 8014182:	e003      	b.n	801418c <_printf_i+0xc0>
 8014184:	066d      	lsls	r5, r5, #25
 8014186:	d5fb      	bpl.n	8014180 <_printf_i+0xb4>
 8014188:	680d      	ldr	r5, [r1, #0]
 801418a:	b2ad      	uxth	r5, r5
 801418c:	4b56      	ldr	r3, [pc, #344]	; (80142e8 <_printf_i+0x21c>)
 801418e:	270a      	movs	r7, #10
 8014190:	9303      	str	r3, [sp, #12]
 8014192:	2a6f      	cmp	r2, #111	; 0x6f
 8014194:	d117      	bne.n	80141c6 <_printf_i+0xfa>
 8014196:	2708      	movs	r7, #8
 8014198:	e015      	b.n	80141c6 <_printf_i+0xfa>
 801419a:	3145      	adds	r1, #69	; 0x45
 801419c:	700a      	strb	r2, [r1, #0]
 801419e:	4a52      	ldr	r2, [pc, #328]	; (80142e8 <_printf_i+0x21c>)
 80141a0:	9203      	str	r2, [sp, #12]
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	6821      	ldr	r1, [r4, #0]
 80141a6:	ca20      	ldmia	r2!, {r5}
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	0608      	lsls	r0, r1, #24
 80141ac:	d550      	bpl.n	8014250 <_printf_i+0x184>
 80141ae:	07cb      	lsls	r3, r1, #31
 80141b0:	d502      	bpl.n	80141b8 <_printf_i+0xec>
 80141b2:	2320      	movs	r3, #32
 80141b4:	4319      	orrs	r1, r3
 80141b6:	6021      	str	r1, [r4, #0]
 80141b8:	2710      	movs	r7, #16
 80141ba:	2d00      	cmp	r5, #0
 80141bc:	d103      	bne.n	80141c6 <_printf_i+0xfa>
 80141be:	2320      	movs	r3, #32
 80141c0:	6822      	ldr	r2, [r4, #0]
 80141c2:	439a      	bics	r2, r3
 80141c4:	6022      	str	r2, [r4, #0]
 80141c6:	0023      	movs	r3, r4
 80141c8:	2200      	movs	r2, #0
 80141ca:	3343      	adds	r3, #67	; 0x43
 80141cc:	701a      	strb	r2, [r3, #0]
 80141ce:	6863      	ldr	r3, [r4, #4]
 80141d0:	60a3      	str	r3, [r4, #8]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	db03      	blt.n	80141de <_printf_i+0x112>
 80141d6:	2204      	movs	r2, #4
 80141d8:	6821      	ldr	r1, [r4, #0]
 80141da:	4391      	bics	r1, r2
 80141dc:	6021      	str	r1, [r4, #0]
 80141de:	2d00      	cmp	r5, #0
 80141e0:	d102      	bne.n	80141e8 <_printf_i+0x11c>
 80141e2:	9e04      	ldr	r6, [sp, #16]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d00c      	beq.n	8014202 <_printf_i+0x136>
 80141e8:	9e04      	ldr	r6, [sp, #16]
 80141ea:	0028      	movs	r0, r5
 80141ec:	0039      	movs	r1, r7
 80141ee:	f7ec f81b 	bl	8000228 <__aeabi_uidivmod>
 80141f2:	9b03      	ldr	r3, [sp, #12]
 80141f4:	3e01      	subs	r6, #1
 80141f6:	5c5b      	ldrb	r3, [r3, r1]
 80141f8:	7033      	strb	r3, [r6, #0]
 80141fa:	002b      	movs	r3, r5
 80141fc:	0005      	movs	r5, r0
 80141fe:	429f      	cmp	r7, r3
 8014200:	d9f3      	bls.n	80141ea <_printf_i+0x11e>
 8014202:	2f08      	cmp	r7, #8
 8014204:	d109      	bne.n	801421a <_printf_i+0x14e>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	07db      	lsls	r3, r3, #31
 801420a:	d506      	bpl.n	801421a <_printf_i+0x14e>
 801420c:	6863      	ldr	r3, [r4, #4]
 801420e:	6922      	ldr	r2, [r4, #16]
 8014210:	4293      	cmp	r3, r2
 8014212:	dc02      	bgt.n	801421a <_printf_i+0x14e>
 8014214:	2330      	movs	r3, #48	; 0x30
 8014216:	3e01      	subs	r6, #1
 8014218:	7033      	strb	r3, [r6, #0]
 801421a:	9b04      	ldr	r3, [sp, #16]
 801421c:	1b9b      	subs	r3, r3, r6
 801421e:	6123      	str	r3, [r4, #16]
 8014220:	9b07      	ldr	r3, [sp, #28]
 8014222:	0021      	movs	r1, r4
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	9805      	ldr	r0, [sp, #20]
 8014228:	9b06      	ldr	r3, [sp, #24]
 801422a:	aa09      	add	r2, sp, #36	; 0x24
 801422c:	f7ff fede 	bl	8013fec <_printf_common>
 8014230:	1c43      	adds	r3, r0, #1
 8014232:	d135      	bne.n	80142a0 <_printf_i+0x1d4>
 8014234:	2001      	movs	r0, #1
 8014236:	4240      	negs	r0, r0
 8014238:	b00b      	add	sp, #44	; 0x2c
 801423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801423c:	2220      	movs	r2, #32
 801423e:	6809      	ldr	r1, [r1, #0]
 8014240:	430a      	orrs	r2, r1
 8014242:	6022      	str	r2, [r4, #0]
 8014244:	0022      	movs	r2, r4
 8014246:	2178      	movs	r1, #120	; 0x78
 8014248:	3245      	adds	r2, #69	; 0x45
 801424a:	7011      	strb	r1, [r2, #0]
 801424c:	4a27      	ldr	r2, [pc, #156]	; (80142ec <_printf_i+0x220>)
 801424e:	e7a7      	b.n	80141a0 <_printf_i+0xd4>
 8014250:	0648      	lsls	r0, r1, #25
 8014252:	d5ac      	bpl.n	80141ae <_printf_i+0xe2>
 8014254:	b2ad      	uxth	r5, r5
 8014256:	e7aa      	b.n	80141ae <_printf_i+0xe2>
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	680d      	ldr	r5, [r1, #0]
 801425c:	1d10      	adds	r0, r2, #4
 801425e:	6949      	ldr	r1, [r1, #20]
 8014260:	6018      	str	r0, [r3, #0]
 8014262:	6813      	ldr	r3, [r2, #0]
 8014264:	062e      	lsls	r6, r5, #24
 8014266:	d501      	bpl.n	801426c <_printf_i+0x1a0>
 8014268:	6019      	str	r1, [r3, #0]
 801426a:	e002      	b.n	8014272 <_printf_i+0x1a6>
 801426c:	066d      	lsls	r5, r5, #25
 801426e:	d5fb      	bpl.n	8014268 <_printf_i+0x19c>
 8014270:	8019      	strh	r1, [r3, #0]
 8014272:	2300      	movs	r3, #0
 8014274:	9e04      	ldr	r6, [sp, #16]
 8014276:	6123      	str	r3, [r4, #16]
 8014278:	e7d2      	b.n	8014220 <_printf_i+0x154>
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	1d11      	adds	r1, r2, #4
 801427e:	6019      	str	r1, [r3, #0]
 8014280:	6816      	ldr	r6, [r2, #0]
 8014282:	2100      	movs	r1, #0
 8014284:	0030      	movs	r0, r6
 8014286:	6862      	ldr	r2, [r4, #4]
 8014288:	f000 f8dc 	bl	8014444 <memchr>
 801428c:	2800      	cmp	r0, #0
 801428e:	d001      	beq.n	8014294 <_printf_i+0x1c8>
 8014290:	1b80      	subs	r0, r0, r6
 8014292:	6060      	str	r0, [r4, #4]
 8014294:	6863      	ldr	r3, [r4, #4]
 8014296:	6123      	str	r3, [r4, #16]
 8014298:	2300      	movs	r3, #0
 801429a:	9a04      	ldr	r2, [sp, #16]
 801429c:	7013      	strb	r3, [r2, #0]
 801429e:	e7bf      	b.n	8014220 <_printf_i+0x154>
 80142a0:	6923      	ldr	r3, [r4, #16]
 80142a2:	0032      	movs	r2, r6
 80142a4:	9906      	ldr	r1, [sp, #24]
 80142a6:	9805      	ldr	r0, [sp, #20]
 80142a8:	9d07      	ldr	r5, [sp, #28]
 80142aa:	47a8      	blx	r5
 80142ac:	1c43      	adds	r3, r0, #1
 80142ae:	d0c1      	beq.n	8014234 <_printf_i+0x168>
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	079b      	lsls	r3, r3, #30
 80142b4:	d415      	bmi.n	80142e2 <_printf_i+0x216>
 80142b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142b8:	68e0      	ldr	r0, [r4, #12]
 80142ba:	4298      	cmp	r0, r3
 80142bc:	dabc      	bge.n	8014238 <_printf_i+0x16c>
 80142be:	0018      	movs	r0, r3
 80142c0:	e7ba      	b.n	8014238 <_printf_i+0x16c>
 80142c2:	0022      	movs	r2, r4
 80142c4:	2301      	movs	r3, #1
 80142c6:	9906      	ldr	r1, [sp, #24]
 80142c8:	9805      	ldr	r0, [sp, #20]
 80142ca:	9e07      	ldr	r6, [sp, #28]
 80142cc:	3219      	adds	r2, #25
 80142ce:	47b0      	blx	r6
 80142d0:	1c43      	adds	r3, r0, #1
 80142d2:	d0af      	beq.n	8014234 <_printf_i+0x168>
 80142d4:	3501      	adds	r5, #1
 80142d6:	68e3      	ldr	r3, [r4, #12]
 80142d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142da:	1a9b      	subs	r3, r3, r2
 80142dc:	42ab      	cmp	r3, r5
 80142de:	dcf0      	bgt.n	80142c2 <_printf_i+0x1f6>
 80142e0:	e7e9      	b.n	80142b6 <_printf_i+0x1ea>
 80142e2:	2500      	movs	r5, #0
 80142e4:	e7f7      	b.n	80142d6 <_printf_i+0x20a>
 80142e6:	46c0      	nop			; (mov r8, r8)
 80142e8:	08018755 	.word	0x08018755
 80142ec:	08018766 	.word	0x08018766

080142f0 <__sread>:
 80142f0:	b570      	push	{r4, r5, r6, lr}
 80142f2:	000c      	movs	r4, r1
 80142f4:	250e      	movs	r5, #14
 80142f6:	5f49      	ldrsh	r1, [r1, r5]
 80142f8:	f000 f8f2 	bl	80144e0 <_read_r>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	db03      	blt.n	8014308 <__sread+0x18>
 8014300:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014302:	181b      	adds	r3, r3, r0
 8014304:	6563      	str	r3, [r4, #84]	; 0x54
 8014306:	bd70      	pop	{r4, r5, r6, pc}
 8014308:	89a3      	ldrh	r3, [r4, #12]
 801430a:	4a02      	ldr	r2, [pc, #8]	; (8014314 <__sread+0x24>)
 801430c:	4013      	ands	r3, r2
 801430e:	81a3      	strh	r3, [r4, #12]
 8014310:	e7f9      	b.n	8014306 <__sread+0x16>
 8014312:	46c0      	nop			; (mov r8, r8)
 8014314:	ffffefff 	.word	0xffffefff

08014318 <__swrite>:
 8014318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431a:	001f      	movs	r7, r3
 801431c:	898b      	ldrh	r3, [r1, #12]
 801431e:	0005      	movs	r5, r0
 8014320:	000c      	movs	r4, r1
 8014322:	0016      	movs	r6, r2
 8014324:	05db      	lsls	r3, r3, #23
 8014326:	d505      	bpl.n	8014334 <__swrite+0x1c>
 8014328:	230e      	movs	r3, #14
 801432a:	5ec9      	ldrsh	r1, [r1, r3]
 801432c:	2200      	movs	r2, #0
 801432e:	2302      	movs	r3, #2
 8014330:	f000 f874 	bl	801441c <_lseek_r>
 8014334:	89a3      	ldrh	r3, [r4, #12]
 8014336:	4a05      	ldr	r2, [pc, #20]	; (801434c <__swrite+0x34>)
 8014338:	0028      	movs	r0, r5
 801433a:	4013      	ands	r3, r2
 801433c:	81a3      	strh	r3, [r4, #12]
 801433e:	0032      	movs	r2, r6
 8014340:	230e      	movs	r3, #14
 8014342:	5ee1      	ldrsh	r1, [r4, r3]
 8014344:	003b      	movs	r3, r7
 8014346:	f000 f81f 	bl	8014388 <_write_r>
 801434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801434c:	ffffefff 	.word	0xffffefff

08014350 <__sseek>:
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	000c      	movs	r4, r1
 8014354:	250e      	movs	r5, #14
 8014356:	5f49      	ldrsh	r1, [r1, r5]
 8014358:	f000 f860 	bl	801441c <_lseek_r>
 801435c:	89a3      	ldrh	r3, [r4, #12]
 801435e:	1c42      	adds	r2, r0, #1
 8014360:	d103      	bne.n	801436a <__sseek+0x1a>
 8014362:	4a05      	ldr	r2, [pc, #20]	; (8014378 <__sseek+0x28>)
 8014364:	4013      	ands	r3, r2
 8014366:	81a3      	strh	r3, [r4, #12]
 8014368:	bd70      	pop	{r4, r5, r6, pc}
 801436a:	2280      	movs	r2, #128	; 0x80
 801436c:	0152      	lsls	r2, r2, #5
 801436e:	4313      	orrs	r3, r2
 8014370:	81a3      	strh	r3, [r4, #12]
 8014372:	6560      	str	r0, [r4, #84]	; 0x54
 8014374:	e7f8      	b.n	8014368 <__sseek+0x18>
 8014376:	46c0      	nop			; (mov r8, r8)
 8014378:	ffffefff 	.word	0xffffefff

0801437c <__sclose>:
 801437c:	b510      	push	{r4, lr}
 801437e:	230e      	movs	r3, #14
 8014380:	5ec9      	ldrsh	r1, [r1, r3]
 8014382:	f000 f815 	bl	80143b0 <_close_r>
 8014386:	bd10      	pop	{r4, pc}

08014388 <_write_r>:
 8014388:	b570      	push	{r4, r5, r6, lr}
 801438a:	0004      	movs	r4, r0
 801438c:	0008      	movs	r0, r1
 801438e:	0011      	movs	r1, r2
 8014390:	001a      	movs	r2, r3
 8014392:	2300      	movs	r3, #0
 8014394:	4d05      	ldr	r5, [pc, #20]	; (80143ac <_write_r+0x24>)
 8014396:	602b      	str	r3, [r5, #0]
 8014398:	f7fe fd7d 	bl	8012e96 <_write>
 801439c:	1c43      	adds	r3, r0, #1
 801439e:	d103      	bne.n	80143a8 <_write_r+0x20>
 80143a0:	682b      	ldr	r3, [r5, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d000      	beq.n	80143a8 <_write_r+0x20>
 80143a6:	6023      	str	r3, [r4, #0]
 80143a8:	bd70      	pop	{r4, r5, r6, pc}
 80143aa:	46c0      	nop			; (mov r8, r8)
 80143ac:	2000080c 	.word	0x2000080c

080143b0 <_close_r>:
 80143b0:	2300      	movs	r3, #0
 80143b2:	b570      	push	{r4, r5, r6, lr}
 80143b4:	4d06      	ldr	r5, [pc, #24]	; (80143d0 <_close_r+0x20>)
 80143b6:	0004      	movs	r4, r0
 80143b8:	0008      	movs	r0, r1
 80143ba:	602b      	str	r3, [r5, #0]
 80143bc:	f7fe fd87 	bl	8012ece <_close>
 80143c0:	1c43      	adds	r3, r0, #1
 80143c2:	d103      	bne.n	80143cc <_close_r+0x1c>
 80143c4:	682b      	ldr	r3, [r5, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d000      	beq.n	80143cc <_close_r+0x1c>
 80143ca:	6023      	str	r3, [r4, #0]
 80143cc:	bd70      	pop	{r4, r5, r6, pc}
 80143ce:	46c0      	nop			; (mov r8, r8)
 80143d0:	2000080c 	.word	0x2000080c

080143d4 <_fstat_r>:
 80143d4:	2300      	movs	r3, #0
 80143d6:	b570      	push	{r4, r5, r6, lr}
 80143d8:	4d06      	ldr	r5, [pc, #24]	; (80143f4 <_fstat_r+0x20>)
 80143da:	0004      	movs	r4, r0
 80143dc:	0008      	movs	r0, r1
 80143de:	0011      	movs	r1, r2
 80143e0:	602b      	str	r3, [r5, #0]
 80143e2:	f7fe fd7e 	bl	8012ee2 <_fstat>
 80143e6:	1c43      	adds	r3, r0, #1
 80143e8:	d103      	bne.n	80143f2 <_fstat_r+0x1e>
 80143ea:	682b      	ldr	r3, [r5, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d000      	beq.n	80143f2 <_fstat_r+0x1e>
 80143f0:	6023      	str	r3, [r4, #0]
 80143f2:	bd70      	pop	{r4, r5, r6, pc}
 80143f4:	2000080c 	.word	0x2000080c

080143f8 <_isatty_r>:
 80143f8:	2300      	movs	r3, #0
 80143fa:	b570      	push	{r4, r5, r6, lr}
 80143fc:	4d06      	ldr	r5, [pc, #24]	; (8014418 <_isatty_r+0x20>)
 80143fe:	0004      	movs	r4, r0
 8014400:	0008      	movs	r0, r1
 8014402:	602b      	str	r3, [r5, #0]
 8014404:	f7fe fd7b 	bl	8012efe <_isatty>
 8014408:	1c43      	adds	r3, r0, #1
 801440a:	d103      	bne.n	8014414 <_isatty_r+0x1c>
 801440c:	682b      	ldr	r3, [r5, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d000      	beq.n	8014414 <_isatty_r+0x1c>
 8014412:	6023      	str	r3, [r4, #0]
 8014414:	bd70      	pop	{r4, r5, r6, pc}
 8014416:	46c0      	nop			; (mov r8, r8)
 8014418:	2000080c 	.word	0x2000080c

0801441c <_lseek_r>:
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	0004      	movs	r4, r0
 8014420:	0008      	movs	r0, r1
 8014422:	0011      	movs	r1, r2
 8014424:	001a      	movs	r2, r3
 8014426:	2300      	movs	r3, #0
 8014428:	4d05      	ldr	r5, [pc, #20]	; (8014440 <_lseek_r+0x24>)
 801442a:	602b      	str	r3, [r5, #0]
 801442c:	f7fe fd70 	bl	8012f10 <_lseek>
 8014430:	1c43      	adds	r3, r0, #1
 8014432:	d103      	bne.n	801443c <_lseek_r+0x20>
 8014434:	682b      	ldr	r3, [r5, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d000      	beq.n	801443c <_lseek_r+0x20>
 801443a:	6023      	str	r3, [r4, #0]
 801443c:	bd70      	pop	{r4, r5, r6, pc}
 801443e:	46c0      	nop			; (mov r8, r8)
 8014440:	2000080c 	.word	0x2000080c

08014444 <memchr>:
 8014444:	b2c9      	uxtb	r1, r1
 8014446:	1882      	adds	r2, r0, r2
 8014448:	4290      	cmp	r0, r2
 801444a:	d101      	bne.n	8014450 <memchr+0xc>
 801444c:	2000      	movs	r0, #0
 801444e:	4770      	bx	lr
 8014450:	7803      	ldrb	r3, [r0, #0]
 8014452:	428b      	cmp	r3, r1
 8014454:	d0fb      	beq.n	801444e <memchr+0xa>
 8014456:	3001      	adds	r0, #1
 8014458:	e7f6      	b.n	8014448 <memchr+0x4>

0801445a <memcpy>:
 801445a:	2300      	movs	r3, #0
 801445c:	b510      	push	{r4, lr}
 801445e:	429a      	cmp	r2, r3
 8014460:	d100      	bne.n	8014464 <memcpy+0xa>
 8014462:	bd10      	pop	{r4, pc}
 8014464:	5ccc      	ldrb	r4, [r1, r3]
 8014466:	54c4      	strb	r4, [r0, r3]
 8014468:	3301      	adds	r3, #1
 801446a:	e7f8      	b.n	801445e <memcpy+0x4>

0801446c <memmove>:
 801446c:	b510      	push	{r4, lr}
 801446e:	4288      	cmp	r0, r1
 8014470:	d902      	bls.n	8014478 <memmove+0xc>
 8014472:	188b      	adds	r3, r1, r2
 8014474:	4298      	cmp	r0, r3
 8014476:	d303      	bcc.n	8014480 <memmove+0x14>
 8014478:	2300      	movs	r3, #0
 801447a:	e007      	b.n	801448c <memmove+0x20>
 801447c:	5c8b      	ldrb	r3, [r1, r2]
 801447e:	5483      	strb	r3, [r0, r2]
 8014480:	3a01      	subs	r2, #1
 8014482:	d2fb      	bcs.n	801447c <memmove+0x10>
 8014484:	bd10      	pop	{r4, pc}
 8014486:	5ccc      	ldrb	r4, [r1, r3]
 8014488:	54c4      	strb	r4, [r0, r3]
 801448a:	3301      	adds	r3, #1
 801448c:	429a      	cmp	r2, r3
 801448e:	d1fa      	bne.n	8014486 <memmove+0x1a>
 8014490:	e7f8      	b.n	8014484 <memmove+0x18>

08014492 <_realloc_r>:
 8014492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014494:	0007      	movs	r7, r0
 8014496:	000d      	movs	r5, r1
 8014498:	0016      	movs	r6, r2
 801449a:	2900      	cmp	r1, #0
 801449c:	d105      	bne.n	80144aa <_realloc_r+0x18>
 801449e:	0011      	movs	r1, r2
 80144a0:	f7fe fe9e 	bl	80131e0 <_malloc_r>
 80144a4:	0004      	movs	r4, r0
 80144a6:	0020      	movs	r0, r4
 80144a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144aa:	2a00      	cmp	r2, #0
 80144ac:	d103      	bne.n	80144b6 <_realloc_r+0x24>
 80144ae:	f7fe fe4d 	bl	801314c <_free_r>
 80144b2:	0034      	movs	r4, r6
 80144b4:	e7f7      	b.n	80144a6 <_realloc_r+0x14>
 80144b6:	f000 f827 	bl	8014508 <_malloc_usable_size_r>
 80144ba:	002c      	movs	r4, r5
 80144bc:	42b0      	cmp	r0, r6
 80144be:	d2f2      	bcs.n	80144a6 <_realloc_r+0x14>
 80144c0:	0031      	movs	r1, r6
 80144c2:	0038      	movs	r0, r7
 80144c4:	f7fe fe8c 	bl	80131e0 <_malloc_r>
 80144c8:	1e04      	subs	r4, r0, #0
 80144ca:	d0ec      	beq.n	80144a6 <_realloc_r+0x14>
 80144cc:	0029      	movs	r1, r5
 80144ce:	0032      	movs	r2, r6
 80144d0:	f7ff ffc3 	bl	801445a <memcpy>
 80144d4:	0029      	movs	r1, r5
 80144d6:	0038      	movs	r0, r7
 80144d8:	f7fe fe38 	bl	801314c <_free_r>
 80144dc:	e7e3      	b.n	80144a6 <_realloc_r+0x14>
	...

080144e0 <_read_r>:
 80144e0:	b570      	push	{r4, r5, r6, lr}
 80144e2:	0004      	movs	r4, r0
 80144e4:	0008      	movs	r0, r1
 80144e6:	0011      	movs	r1, r2
 80144e8:	001a      	movs	r2, r3
 80144ea:	2300      	movs	r3, #0
 80144ec:	4d05      	ldr	r5, [pc, #20]	; (8014504 <_read_r+0x24>)
 80144ee:	602b      	str	r3, [r5, #0]
 80144f0:	f7fe fcb4 	bl	8012e5c <_read>
 80144f4:	1c43      	adds	r3, r0, #1
 80144f6:	d103      	bne.n	8014500 <_read_r+0x20>
 80144f8:	682b      	ldr	r3, [r5, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d000      	beq.n	8014500 <_read_r+0x20>
 80144fe:	6023      	str	r3, [r4, #0]
 8014500:	bd70      	pop	{r4, r5, r6, pc}
 8014502:	46c0      	nop			; (mov r8, r8)
 8014504:	2000080c 	.word	0x2000080c

08014508 <_malloc_usable_size_r>:
 8014508:	1f0b      	subs	r3, r1, #4
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	1f18      	subs	r0, r3, #4
 801450e:	2b00      	cmp	r3, #0
 8014510:	da01      	bge.n	8014516 <_malloc_usable_size_r+0xe>
 8014512:	580b      	ldr	r3, [r1, r0]
 8014514:	18c0      	adds	r0, r0, r3
 8014516:	4770      	bx	lr

08014518 <cos>:
 8014518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801451a:	4a1e      	ldr	r2, [pc, #120]	; (8014594 <cos+0x7c>)
 801451c:	004b      	lsls	r3, r1, #1
 801451e:	b087      	sub	sp, #28
 8014520:	085b      	lsrs	r3, r3, #1
 8014522:	4293      	cmp	r3, r2
 8014524:	dc04      	bgt.n	8014530 <cos+0x18>
 8014526:	2200      	movs	r2, #0
 8014528:	2300      	movs	r3, #0
 801452a:	f000 fd07 	bl	8014f3c <__kernel_cos>
 801452e:	e006      	b.n	801453e <cos+0x26>
 8014530:	4a19      	ldr	r2, [pc, #100]	; (8014598 <cos+0x80>)
 8014532:	4293      	cmp	r3, r2
 8014534:	dd05      	ble.n	8014542 <cos+0x2a>
 8014536:	0002      	movs	r2, r0
 8014538:	000b      	movs	r3, r1
 801453a:	f7ee f943 	bl	80027c4 <__aeabi_dsub>
 801453e:	b007      	add	sp, #28
 8014540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014542:	aa02      	add	r2, sp, #8
 8014544:	f000 fb0e 	bl	8014b64 <__ieee754_rem_pio2>
 8014548:	9c04      	ldr	r4, [sp, #16]
 801454a:	9d05      	ldr	r5, [sp, #20]
 801454c:	2303      	movs	r3, #3
 801454e:	4003      	ands	r3, r0
 8014550:	2b01      	cmp	r3, #1
 8014552:	d008      	beq.n	8014566 <cos+0x4e>
 8014554:	9802      	ldr	r0, [sp, #8]
 8014556:	9903      	ldr	r1, [sp, #12]
 8014558:	2b02      	cmp	r3, #2
 801455a:	d00f      	beq.n	801457c <cos+0x64>
 801455c:	2b00      	cmp	r3, #0
 801455e:	d112      	bne.n	8014586 <cos+0x6e>
 8014560:	0022      	movs	r2, r4
 8014562:	002b      	movs	r3, r5
 8014564:	e7e1      	b.n	801452a <cos+0x12>
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	0022      	movs	r2, r4
 801456a:	9802      	ldr	r0, [sp, #8]
 801456c:	9903      	ldr	r1, [sp, #12]
 801456e:	002b      	movs	r3, r5
 8014570:	f001 f91a 	bl	80157a8 <__kernel_sin>
 8014574:	2380      	movs	r3, #128	; 0x80
 8014576:	061b      	lsls	r3, r3, #24
 8014578:	18c9      	adds	r1, r1, r3
 801457a:	e7e0      	b.n	801453e <cos+0x26>
 801457c:	0022      	movs	r2, r4
 801457e:	002b      	movs	r3, r5
 8014580:	f000 fcdc 	bl	8014f3c <__kernel_cos>
 8014584:	e7f6      	b.n	8014574 <cos+0x5c>
 8014586:	2301      	movs	r3, #1
 8014588:	0022      	movs	r2, r4
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	002b      	movs	r3, r5
 801458e:	f001 f90b 	bl	80157a8 <__kernel_sin>
 8014592:	e7d4      	b.n	801453e <cos+0x26>
 8014594:	3fe921fb 	.word	0x3fe921fb
 8014598:	7fefffff 	.word	0x7fefffff

0801459c <sin>:
 801459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801459e:	4a20      	ldr	r2, [pc, #128]	; (8014620 <sin+0x84>)
 80145a0:	004b      	lsls	r3, r1, #1
 80145a2:	b087      	sub	sp, #28
 80145a4:	085b      	lsrs	r3, r3, #1
 80145a6:	4293      	cmp	r3, r2
 80145a8:	dc06      	bgt.n	80145b8 <sin+0x1c>
 80145aa:	2300      	movs	r3, #0
 80145ac:	2200      	movs	r2, #0
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	2300      	movs	r3, #0
 80145b2:	f001 f8f9 	bl	80157a8 <__kernel_sin>
 80145b6:	e006      	b.n	80145c6 <sin+0x2a>
 80145b8:	4a1a      	ldr	r2, [pc, #104]	; (8014624 <sin+0x88>)
 80145ba:	4293      	cmp	r3, r2
 80145bc:	dd05      	ble.n	80145ca <sin+0x2e>
 80145be:	0002      	movs	r2, r0
 80145c0:	000b      	movs	r3, r1
 80145c2:	f7ee f8ff 	bl	80027c4 <__aeabi_dsub>
 80145c6:	b007      	add	sp, #28
 80145c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ca:	aa02      	add	r2, sp, #8
 80145cc:	f000 faca 	bl	8014b64 <__ieee754_rem_pio2>
 80145d0:	9c04      	ldr	r4, [sp, #16]
 80145d2:	9d05      	ldr	r5, [sp, #20]
 80145d4:	2303      	movs	r3, #3
 80145d6:	4003      	ands	r3, r0
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d00a      	beq.n	80145f2 <sin+0x56>
 80145dc:	9802      	ldr	r0, [sp, #8]
 80145de:	9903      	ldr	r1, [sp, #12]
 80145e0:	2b02      	cmp	r3, #2
 80145e2:	d00d      	beq.n	8014600 <sin+0x64>
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d115      	bne.n	8014614 <sin+0x78>
 80145e8:	3301      	adds	r3, #1
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	0022      	movs	r2, r4
 80145ee:	002b      	movs	r3, r5
 80145f0:	e7df      	b.n	80145b2 <sin+0x16>
 80145f2:	0022      	movs	r2, r4
 80145f4:	9802      	ldr	r0, [sp, #8]
 80145f6:	9903      	ldr	r1, [sp, #12]
 80145f8:	002b      	movs	r3, r5
 80145fa:	f000 fc9f 	bl	8014f3c <__kernel_cos>
 80145fe:	e7e2      	b.n	80145c6 <sin+0x2a>
 8014600:	2301      	movs	r3, #1
 8014602:	0022      	movs	r2, r4
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	002b      	movs	r3, r5
 8014608:	f001 f8ce 	bl	80157a8 <__kernel_sin>
 801460c:	2380      	movs	r3, #128	; 0x80
 801460e:	061b      	lsls	r3, r3, #24
 8014610:	18c9      	adds	r1, r1, r3
 8014612:	e7d8      	b.n	80145c6 <sin+0x2a>
 8014614:	0022      	movs	r2, r4
 8014616:	002b      	movs	r3, r5
 8014618:	f000 fc90 	bl	8014f3c <__kernel_cos>
 801461c:	e7f6      	b.n	801460c <sin+0x70>
 801461e:	46c0      	nop			; (mov r8, r8)
 8014620:	3fe921fb 	.word	0x3fe921fb
 8014624:	7fefffff 	.word	0x7fefffff

08014628 <atan2>:
 8014628:	b510      	push	{r4, lr}
 801462a:	f000 f83f 	bl	80146ac <__ieee754_atan2>
 801462e:	bd10      	pop	{r4, pc}

08014630 <log>:
 8014630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014632:	0004      	movs	r4, r0
 8014634:	000d      	movs	r5, r1
 8014636:	f000 f8e5 	bl	8014804 <__ieee754_log>
 801463a:	4b19      	ldr	r3, [pc, #100]	; (80146a0 <log+0x70>)
 801463c:	0006      	movs	r6, r0
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	000f      	movs	r7, r1
 8014642:	b25b      	sxtb	r3, r3
 8014644:	3301      	adds	r3, #1
 8014646:	d01d      	beq.n	8014684 <log+0x54>
 8014648:	0022      	movs	r2, r4
 801464a:	002b      	movs	r3, r5
 801464c:	0020      	movs	r0, r4
 801464e:	0029      	movs	r1, r5
 8014650:	f7ee fc4a 	bl	8002ee8 <__aeabi_dcmpun>
 8014654:	2800      	cmp	r0, #0
 8014656:	d115      	bne.n	8014684 <log+0x54>
 8014658:	2200      	movs	r2, #0
 801465a:	2300      	movs	r3, #0
 801465c:	0020      	movs	r0, r4
 801465e:	0029      	movs	r1, r5
 8014660:	f7eb fefc 	bl	800045c <__aeabi_dcmpgt>
 8014664:	2800      	cmp	r0, #0
 8014666:	d10d      	bne.n	8014684 <log+0x54>
 8014668:	2200      	movs	r2, #0
 801466a:	2300      	movs	r3, #0
 801466c:	0020      	movs	r0, r4
 801466e:	0029      	movs	r1, r5
 8014670:	f7eb feda 	bl	8000428 <__aeabi_dcmpeq>
 8014674:	2800      	cmp	r0, #0
 8014676:	d008      	beq.n	801468a <log+0x5a>
 8014678:	f7fe fd2c 	bl	80130d4 <__errno>
 801467c:	2322      	movs	r3, #34	; 0x22
 801467e:	2600      	movs	r6, #0
 8014680:	4f08      	ldr	r7, [pc, #32]	; (80146a4 <log+0x74>)
 8014682:	6003      	str	r3, [r0, #0]
 8014684:	0030      	movs	r0, r6
 8014686:	0039      	movs	r1, r7
 8014688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801468a:	f7fe fd23 	bl	80130d4 <__errno>
 801468e:	2321      	movs	r3, #33	; 0x21
 8014690:	6003      	str	r3, [r0, #0]
 8014692:	4805      	ldr	r0, [pc, #20]	; (80146a8 <log+0x78>)
 8014694:	f001 fb42 	bl	8015d1c <nan>
 8014698:	0006      	movs	r6, r0
 801469a:	000f      	movs	r7, r1
 801469c:	e7f2      	b.n	8014684 <log+0x54>
 801469e:	46c0      	nop			; (mov r8, r8)
 80146a0:	200000f0 	.word	0x200000f0
 80146a4:	fff00000 	.word	0xfff00000
 80146a8:	08018749 	.word	0x08018749

080146ac <__ieee754_atan2>:
 80146ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146ae:	0016      	movs	r6, r2
 80146b0:	001d      	movs	r5, r3
 80146b2:	005a      	lsls	r2, r3, #1
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	4273      	negs	r3, r6
 80146b8:	4333      	orrs	r3, r6
 80146ba:	4f46      	ldr	r7, [pc, #280]	; (80147d4 <__ieee754_atan2+0x128>)
 80146bc:	0852      	lsrs	r2, r2, #1
 80146be:	0fdb      	lsrs	r3, r3, #31
 80146c0:	4313      	orrs	r3, r2
 80146c2:	42bb      	cmp	r3, r7
 80146c4:	d809      	bhi.n	80146da <__ieee754_atan2+0x2e>
 80146c6:	4244      	negs	r4, r0
 80146c8:	004b      	lsls	r3, r1, #1
 80146ca:	4304      	orrs	r4, r0
 80146cc:	085b      	lsrs	r3, r3, #1
 80146ce:	0fe4      	lsrs	r4, r4, #31
 80146d0:	9100      	str	r1, [sp, #0]
 80146d2:	9001      	str	r0, [sp, #4]
 80146d4:	431c      	orrs	r4, r3
 80146d6:	42bc      	cmp	r4, r7
 80146d8:	d905      	bls.n	80146e6 <__ieee754_atan2+0x3a>
 80146da:	0032      	movs	r2, r6
 80146dc:	002b      	movs	r3, r5
 80146de:	f7ec fe95 	bl	800140c <__aeabi_dadd>
 80146e2:	b003      	add	sp, #12
 80146e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146e6:	4c3c      	ldr	r4, [pc, #240]	; (80147d8 <__ieee754_atan2+0x12c>)
 80146e8:	192c      	adds	r4, r5, r4
 80146ea:	4334      	orrs	r4, r6
 80146ec:	d102      	bne.n	80146f4 <__ieee754_atan2+0x48>
 80146ee:	f001 f907 	bl	8015900 <atan>
 80146f2:	e7f6      	b.n	80146e2 <__ieee754_atan2+0x36>
 80146f4:	17ac      	asrs	r4, r5, #30
 80146f6:	46a4      	mov	ip, r4
 80146f8:	2402      	movs	r4, #2
 80146fa:	4667      	mov	r7, ip
 80146fc:	403c      	ands	r4, r7
 80146fe:	9f00      	ldr	r7, [sp, #0]
 8014700:	0fff      	lsrs	r7, r7, #31
 8014702:	433c      	orrs	r4, r7
 8014704:	9f01      	ldr	r7, [sp, #4]
 8014706:	431f      	orrs	r7, r3
 8014708:	d106      	bne.n	8014718 <__ieee754_atan2+0x6c>
 801470a:	2c02      	cmp	r4, #2
 801470c:	d056      	beq.n	80147bc <__ieee754_atan2+0x110>
 801470e:	2c03      	cmp	r4, #3
 8014710:	d1e7      	bne.n	80146e2 <__ieee754_atan2+0x36>
 8014712:	4832      	ldr	r0, [pc, #200]	; (80147dc <__ieee754_atan2+0x130>)
 8014714:	4932      	ldr	r1, [pc, #200]	; (80147e0 <__ieee754_atan2+0x134>)
 8014716:	e7e4      	b.n	80146e2 <__ieee754_atan2+0x36>
 8014718:	0017      	movs	r7, r2
 801471a:	4337      	orrs	r7, r6
 801471c:	d105      	bne.n	801472a <__ieee754_atan2+0x7e>
 801471e:	9b00      	ldr	r3, [sp, #0]
 8014720:	482e      	ldr	r0, [pc, #184]	; (80147dc <__ieee754_atan2+0x130>)
 8014722:	2b00      	cmp	r3, #0
 8014724:	da53      	bge.n	80147ce <__ieee754_atan2+0x122>
 8014726:	492f      	ldr	r1, [pc, #188]	; (80147e4 <__ieee754_atan2+0x138>)
 8014728:	e7db      	b.n	80146e2 <__ieee754_atan2+0x36>
 801472a:	4f2a      	ldr	r7, [pc, #168]	; (80147d4 <__ieee754_atan2+0x128>)
 801472c:	42ba      	cmp	r2, r7
 801472e:	d10f      	bne.n	8014750 <__ieee754_atan2+0xa4>
 8014730:	3c01      	subs	r4, #1
 8014732:	4293      	cmp	r3, r2
 8014734:	d107      	bne.n	8014746 <__ieee754_atan2+0x9a>
 8014736:	2c02      	cmp	r4, #2
 8014738:	d843      	bhi.n	80147c2 <__ieee754_atan2+0x116>
 801473a:	4b2b      	ldr	r3, [pc, #172]	; (80147e8 <__ieee754_atan2+0x13c>)
 801473c:	00e4      	lsls	r4, r4, #3
 801473e:	191c      	adds	r4, r3, r4
 8014740:	6820      	ldr	r0, [r4, #0]
 8014742:	6861      	ldr	r1, [r4, #4]
 8014744:	e7cd      	b.n	80146e2 <__ieee754_atan2+0x36>
 8014746:	2c02      	cmp	r4, #2
 8014748:	d83e      	bhi.n	80147c8 <__ieee754_atan2+0x11c>
 801474a:	4b28      	ldr	r3, [pc, #160]	; (80147ec <__ieee754_atan2+0x140>)
 801474c:	00e4      	lsls	r4, r4, #3
 801474e:	e7f6      	b.n	801473e <__ieee754_atan2+0x92>
 8014750:	4f20      	ldr	r7, [pc, #128]	; (80147d4 <__ieee754_atan2+0x128>)
 8014752:	42bb      	cmp	r3, r7
 8014754:	d0e3      	beq.n	801471e <__ieee754_atan2+0x72>
 8014756:	1a9b      	subs	r3, r3, r2
 8014758:	151b      	asrs	r3, r3, #20
 801475a:	2b3c      	cmp	r3, #60	; 0x3c
 801475c:	dc18      	bgt.n	8014790 <__ieee754_atan2+0xe4>
 801475e:	2d00      	cmp	r5, #0
 8014760:	da01      	bge.n	8014766 <__ieee754_atan2+0xba>
 8014762:	333c      	adds	r3, #60	; 0x3c
 8014764:	db17      	blt.n	8014796 <__ieee754_atan2+0xea>
 8014766:	0032      	movs	r2, r6
 8014768:	002b      	movs	r3, r5
 801476a:	f7ed f9b9 	bl	8001ae0 <__aeabi_ddiv>
 801476e:	f001 fa47 	bl	8015c00 <fabs>
 8014772:	f001 f8c5 	bl	8015900 <atan>
 8014776:	2c01      	cmp	r4, #1
 8014778:	d010      	beq.n	801479c <__ieee754_atan2+0xf0>
 801477a:	2c02      	cmp	r4, #2
 801477c:	d013      	beq.n	80147a6 <__ieee754_atan2+0xfa>
 801477e:	2c00      	cmp	r4, #0
 8014780:	d0af      	beq.n	80146e2 <__ieee754_atan2+0x36>
 8014782:	4a1b      	ldr	r2, [pc, #108]	; (80147f0 <__ieee754_atan2+0x144>)
 8014784:	4b1b      	ldr	r3, [pc, #108]	; (80147f4 <__ieee754_atan2+0x148>)
 8014786:	f7ee f81d 	bl	80027c4 <__aeabi_dsub>
 801478a:	4a14      	ldr	r2, [pc, #80]	; (80147dc <__ieee754_atan2+0x130>)
 801478c:	4b1a      	ldr	r3, [pc, #104]	; (80147f8 <__ieee754_atan2+0x14c>)
 801478e:	e012      	b.n	80147b6 <__ieee754_atan2+0x10a>
 8014790:	4812      	ldr	r0, [pc, #72]	; (80147dc <__ieee754_atan2+0x130>)
 8014792:	491a      	ldr	r1, [pc, #104]	; (80147fc <__ieee754_atan2+0x150>)
 8014794:	e7ef      	b.n	8014776 <__ieee754_atan2+0xca>
 8014796:	2000      	movs	r0, #0
 8014798:	2100      	movs	r1, #0
 801479a:	e7ec      	b.n	8014776 <__ieee754_atan2+0xca>
 801479c:	2480      	movs	r4, #128	; 0x80
 801479e:	0624      	lsls	r4, r4, #24
 80147a0:	190b      	adds	r3, r1, r4
 80147a2:	0019      	movs	r1, r3
 80147a4:	e79d      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147a6:	4a12      	ldr	r2, [pc, #72]	; (80147f0 <__ieee754_atan2+0x144>)
 80147a8:	4b12      	ldr	r3, [pc, #72]	; (80147f4 <__ieee754_atan2+0x148>)
 80147aa:	f7ee f80b 	bl	80027c4 <__aeabi_dsub>
 80147ae:	0002      	movs	r2, r0
 80147b0:	000b      	movs	r3, r1
 80147b2:	480a      	ldr	r0, [pc, #40]	; (80147dc <__ieee754_atan2+0x130>)
 80147b4:	4910      	ldr	r1, [pc, #64]	; (80147f8 <__ieee754_atan2+0x14c>)
 80147b6:	f7ee f805 	bl	80027c4 <__aeabi_dsub>
 80147ba:	e792      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147bc:	4807      	ldr	r0, [pc, #28]	; (80147dc <__ieee754_atan2+0x130>)
 80147be:	490e      	ldr	r1, [pc, #56]	; (80147f8 <__ieee754_atan2+0x14c>)
 80147c0:	e78f      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147c2:	4806      	ldr	r0, [pc, #24]	; (80147dc <__ieee754_atan2+0x130>)
 80147c4:	490e      	ldr	r1, [pc, #56]	; (8014800 <__ieee754_atan2+0x154>)
 80147c6:	e78c      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147c8:	2000      	movs	r0, #0
 80147ca:	2100      	movs	r1, #0
 80147cc:	e789      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147ce:	490b      	ldr	r1, [pc, #44]	; (80147fc <__ieee754_atan2+0x150>)
 80147d0:	e787      	b.n	80146e2 <__ieee754_atan2+0x36>
 80147d2:	46c0      	nop			; (mov r8, r8)
 80147d4:	7ff00000 	.word	0x7ff00000
 80147d8:	c0100000 	.word	0xc0100000
 80147dc:	54442d18 	.word	0x54442d18
 80147e0:	c00921fb 	.word	0xc00921fb
 80147e4:	bff921fb 	.word	0xbff921fb
 80147e8:	08018778 	.word	0x08018778
 80147ec:	08018790 	.word	0x08018790
 80147f0:	33145c07 	.word	0x33145c07
 80147f4:	3ca1a626 	.word	0x3ca1a626
 80147f8:	400921fb 	.word	0x400921fb
 80147fc:	3ff921fb 	.word	0x3ff921fb
 8014800:	3fe921fb 	.word	0x3fe921fb

08014804 <__ieee754_log>:
 8014804:	2280      	movs	r2, #128	; 0x80
 8014806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014808:	000b      	movs	r3, r1
 801480a:	b08d      	sub	sp, #52	; 0x34
 801480c:	0352      	lsls	r2, r2, #13
 801480e:	4291      	cmp	r1, r2
 8014810:	da22      	bge.n	8014858 <__ieee754_log+0x54>
 8014812:	004a      	lsls	r2, r1, #1
 8014814:	0852      	lsrs	r2, r2, #1
 8014816:	4302      	orrs	r2, r0
 8014818:	d107      	bne.n	801482a <__ieee754_log+0x26>
 801481a:	2200      	movs	r2, #0
 801481c:	2300      	movs	r3, #0
 801481e:	2000      	movs	r0, #0
 8014820:	49b3      	ldr	r1, [pc, #716]	; (8014af0 <__ieee754_log+0x2ec>)
 8014822:	f7ed f95d 	bl	8001ae0 <__aeabi_ddiv>
 8014826:	b00d      	add	sp, #52	; 0x34
 8014828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801482a:	2900      	cmp	r1, #0
 801482c:	da05      	bge.n	801483a <__ieee754_log+0x36>
 801482e:	0002      	movs	r2, r0
 8014830:	f7ed ffc8 	bl	80027c4 <__aeabi_dsub>
 8014834:	2200      	movs	r2, #0
 8014836:	2300      	movs	r3, #0
 8014838:	e7f3      	b.n	8014822 <__ieee754_log+0x1e>
 801483a:	4bae      	ldr	r3, [pc, #696]	; (8014af4 <__ieee754_log+0x2f0>)
 801483c:	2200      	movs	r2, #0
 801483e:	f7ed fd55 	bl	80022ec <__aeabi_dmul>
 8014842:	2436      	movs	r4, #54	; 0x36
 8014844:	000b      	movs	r3, r1
 8014846:	4264      	negs	r4, r4
 8014848:	4aab      	ldr	r2, [pc, #684]	; (8014af8 <__ieee754_log+0x2f4>)
 801484a:	4293      	cmp	r3, r2
 801484c:	dd06      	ble.n	801485c <__ieee754_log+0x58>
 801484e:	0002      	movs	r2, r0
 8014850:	000b      	movs	r3, r1
 8014852:	f7ec fddb 	bl	800140c <__aeabi_dadd>
 8014856:	e7e6      	b.n	8014826 <__ieee754_log+0x22>
 8014858:	2400      	movs	r4, #0
 801485a:	e7f5      	b.n	8014848 <__ieee754_log+0x44>
 801485c:	4da7      	ldr	r5, [pc, #668]	; (8014afc <__ieee754_log+0x2f8>)
 801485e:	151a      	asrs	r2, r3, #20
 8014860:	1952      	adds	r2, r2, r5
 8014862:	1912      	adds	r2, r2, r4
 8014864:	031b      	lsls	r3, r3, #12
 8014866:	4ca6      	ldr	r4, [pc, #664]	; (8014b00 <__ieee754_log+0x2fc>)
 8014868:	0b1b      	lsrs	r3, r3, #12
 801486a:	9302      	str	r3, [sp, #8]
 801486c:	191c      	adds	r4, r3, r4
 801486e:	2380      	movs	r3, #128	; 0x80
 8014870:	035b      	lsls	r3, r3, #13
 8014872:	4023      	ands	r3, r4
 8014874:	4ca3      	ldr	r4, [pc, #652]	; (8014b04 <__ieee754_log+0x300>)
 8014876:	9d02      	ldr	r5, [sp, #8]
 8014878:	405c      	eors	r4, r3
 801487a:	151b      	asrs	r3, r3, #20
 801487c:	189b      	adds	r3, r3, r2
 801487e:	4325      	orrs	r5, r4
 8014880:	2200      	movs	r2, #0
 8014882:	9300      	str	r3, [sp, #0]
 8014884:	0029      	movs	r1, r5
 8014886:	4b9f      	ldr	r3, [pc, #636]	; (8014b04 <__ieee754_log+0x300>)
 8014888:	f7ed ff9c 	bl	80027c4 <__aeabi_dsub>
 801488c:	9b02      	ldr	r3, [sp, #8]
 801488e:	0006      	movs	r6, r0
 8014890:	3302      	adds	r3, #2
 8014892:	031b      	lsls	r3, r3, #12
 8014894:	000f      	movs	r7, r1
 8014896:	2200      	movs	r2, #0
 8014898:	0b1b      	lsrs	r3, r3, #12
 801489a:	2b02      	cmp	r3, #2
 801489c:	dc64      	bgt.n	8014968 <__ieee754_log+0x164>
 801489e:	2300      	movs	r3, #0
 80148a0:	f7eb fdc2 	bl	8000428 <__aeabi_dcmpeq>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	d019      	beq.n	80148dc <__ieee754_log+0xd8>
 80148a8:	9b00      	ldr	r3, [sp, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d100      	bne.n	80148b0 <__ieee754_log+0xac>
 80148ae:	e11c      	b.n	8014aea <__ieee754_log+0x2e6>
 80148b0:	0018      	movs	r0, r3
 80148b2:	f7ee fb6d 	bl	8002f90 <__aeabi_i2d>
 80148b6:	4a94      	ldr	r2, [pc, #592]	; (8014b08 <__ieee754_log+0x304>)
 80148b8:	4b94      	ldr	r3, [pc, #592]	; (8014b0c <__ieee754_log+0x308>)
 80148ba:	0004      	movs	r4, r0
 80148bc:	000d      	movs	r5, r1
 80148be:	f7ed fd15 	bl	80022ec <__aeabi_dmul>
 80148c2:	4a93      	ldr	r2, [pc, #588]	; (8014b10 <__ieee754_log+0x30c>)
 80148c4:	0006      	movs	r6, r0
 80148c6:	000f      	movs	r7, r1
 80148c8:	4b92      	ldr	r3, [pc, #584]	; (8014b14 <__ieee754_log+0x310>)
 80148ca:	0020      	movs	r0, r4
 80148cc:	0029      	movs	r1, r5
 80148ce:	f7ed fd0d 	bl	80022ec <__aeabi_dmul>
 80148d2:	0002      	movs	r2, r0
 80148d4:	000b      	movs	r3, r1
 80148d6:	0030      	movs	r0, r6
 80148d8:	0039      	movs	r1, r7
 80148da:	e7ba      	b.n	8014852 <__ieee754_log+0x4e>
 80148dc:	4a8e      	ldr	r2, [pc, #568]	; (8014b18 <__ieee754_log+0x314>)
 80148de:	4b8f      	ldr	r3, [pc, #572]	; (8014b1c <__ieee754_log+0x318>)
 80148e0:	0030      	movs	r0, r6
 80148e2:	0039      	movs	r1, r7
 80148e4:	f7ed fd02 	bl	80022ec <__aeabi_dmul>
 80148e8:	0002      	movs	r2, r0
 80148ea:	000b      	movs	r3, r1
 80148ec:	2000      	movs	r0, #0
 80148ee:	498c      	ldr	r1, [pc, #560]	; (8014b20 <__ieee754_log+0x31c>)
 80148f0:	f7ed ff68 	bl	80027c4 <__aeabi_dsub>
 80148f4:	0032      	movs	r2, r6
 80148f6:	0004      	movs	r4, r0
 80148f8:	000d      	movs	r5, r1
 80148fa:	003b      	movs	r3, r7
 80148fc:	0030      	movs	r0, r6
 80148fe:	0039      	movs	r1, r7
 8014900:	f7ed fcf4 	bl	80022ec <__aeabi_dmul>
 8014904:	000b      	movs	r3, r1
 8014906:	0002      	movs	r2, r0
 8014908:	0029      	movs	r1, r5
 801490a:	0020      	movs	r0, r4
 801490c:	f7ed fcee 	bl	80022ec <__aeabi_dmul>
 8014910:	9b00      	ldr	r3, [sp, #0]
 8014912:	9002      	str	r0, [sp, #8]
 8014914:	9103      	str	r1, [sp, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d106      	bne.n	8014928 <__ieee754_log+0x124>
 801491a:	0002      	movs	r2, r0
 801491c:	000b      	movs	r3, r1
 801491e:	0030      	movs	r0, r6
 8014920:	0039      	movs	r1, r7
 8014922:	f7ed ff4f 	bl	80027c4 <__aeabi_dsub>
 8014926:	e77e      	b.n	8014826 <__ieee754_log+0x22>
 8014928:	9800      	ldr	r0, [sp, #0]
 801492a:	f7ee fb31 	bl	8002f90 <__aeabi_i2d>
 801492e:	4a76      	ldr	r2, [pc, #472]	; (8014b08 <__ieee754_log+0x304>)
 8014930:	4b76      	ldr	r3, [pc, #472]	; (8014b0c <__ieee754_log+0x308>)
 8014932:	0004      	movs	r4, r0
 8014934:	000d      	movs	r5, r1
 8014936:	f7ed fcd9 	bl	80022ec <__aeabi_dmul>
 801493a:	4a75      	ldr	r2, [pc, #468]	; (8014b10 <__ieee754_log+0x30c>)
 801493c:	9000      	str	r0, [sp, #0]
 801493e:	9101      	str	r1, [sp, #4]
 8014940:	4b74      	ldr	r3, [pc, #464]	; (8014b14 <__ieee754_log+0x310>)
 8014942:	0020      	movs	r0, r4
 8014944:	0029      	movs	r1, r5
 8014946:	f7ed fcd1 	bl	80022ec <__aeabi_dmul>
 801494a:	0002      	movs	r2, r0
 801494c:	000b      	movs	r3, r1
 801494e:	9802      	ldr	r0, [sp, #8]
 8014950:	9903      	ldr	r1, [sp, #12]
 8014952:	f7ed ff37 	bl	80027c4 <__aeabi_dsub>
 8014956:	0032      	movs	r2, r6
 8014958:	003b      	movs	r3, r7
 801495a:	f7ed ff33 	bl	80027c4 <__aeabi_dsub>
 801495e:	0002      	movs	r2, r0
 8014960:	000b      	movs	r3, r1
 8014962:	9800      	ldr	r0, [sp, #0]
 8014964:	9901      	ldr	r1, [sp, #4]
 8014966:	e7dc      	b.n	8014922 <__ieee754_log+0x11e>
 8014968:	2380      	movs	r3, #128	; 0x80
 801496a:	05db      	lsls	r3, r3, #23
 801496c:	f7ec fd4e 	bl	800140c <__aeabi_dadd>
 8014970:	0002      	movs	r2, r0
 8014972:	000b      	movs	r3, r1
 8014974:	0030      	movs	r0, r6
 8014976:	0039      	movs	r1, r7
 8014978:	f7ed f8b2 	bl	8001ae0 <__aeabi_ddiv>
 801497c:	9004      	str	r0, [sp, #16]
 801497e:	9105      	str	r1, [sp, #20]
 8014980:	9800      	ldr	r0, [sp, #0]
 8014982:	f7ee fb05 	bl	8002f90 <__aeabi_i2d>
 8014986:	9a04      	ldr	r2, [sp, #16]
 8014988:	9b05      	ldr	r3, [sp, #20]
 801498a:	9006      	str	r0, [sp, #24]
 801498c:	9107      	str	r1, [sp, #28]
 801498e:	0010      	movs	r0, r2
 8014990:	0019      	movs	r1, r3
 8014992:	f7ed fcab 	bl	80022ec <__aeabi_dmul>
 8014996:	4a63      	ldr	r2, [pc, #396]	; (8014b24 <__ieee754_log+0x320>)
 8014998:	9b02      	ldr	r3, [sp, #8]
 801499a:	4694      	mov	ip, r2
 801499c:	4463      	add	r3, ip
 801499e:	0002      	movs	r2, r0
 80149a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80149a2:	000b      	movs	r3, r1
 80149a4:	9008      	str	r0, [sp, #32]
 80149a6:	9109      	str	r1, [sp, #36]	; 0x24
 80149a8:	f7ed fca0 	bl	80022ec <__aeabi_dmul>
 80149ac:	0004      	movs	r4, r0
 80149ae:	000d      	movs	r5, r1
 80149b0:	4a5d      	ldr	r2, [pc, #372]	; (8014b28 <__ieee754_log+0x324>)
 80149b2:	4b5e      	ldr	r3, [pc, #376]	; (8014b2c <__ieee754_log+0x328>)
 80149b4:	f7ed fc9a 	bl	80022ec <__aeabi_dmul>
 80149b8:	4a5d      	ldr	r2, [pc, #372]	; (8014b30 <__ieee754_log+0x32c>)
 80149ba:	4b5e      	ldr	r3, [pc, #376]	; (8014b34 <__ieee754_log+0x330>)
 80149bc:	f7ec fd26 	bl	800140c <__aeabi_dadd>
 80149c0:	0022      	movs	r2, r4
 80149c2:	002b      	movs	r3, r5
 80149c4:	f7ed fc92 	bl	80022ec <__aeabi_dmul>
 80149c8:	4a5b      	ldr	r2, [pc, #364]	; (8014b38 <__ieee754_log+0x334>)
 80149ca:	4b5c      	ldr	r3, [pc, #368]	; (8014b3c <__ieee754_log+0x338>)
 80149cc:	f7ec fd1e 	bl	800140c <__aeabi_dadd>
 80149d0:	0022      	movs	r2, r4
 80149d2:	002b      	movs	r3, r5
 80149d4:	f7ed fc8a 	bl	80022ec <__aeabi_dmul>
 80149d8:	4a59      	ldr	r2, [pc, #356]	; (8014b40 <__ieee754_log+0x33c>)
 80149da:	4b5a      	ldr	r3, [pc, #360]	; (8014b44 <__ieee754_log+0x340>)
 80149dc:	f7ec fd16 	bl	800140c <__aeabi_dadd>
 80149e0:	9a08      	ldr	r2, [sp, #32]
 80149e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e4:	f7ed fc82 	bl	80022ec <__aeabi_dmul>
 80149e8:	4a57      	ldr	r2, [pc, #348]	; (8014b48 <__ieee754_log+0x344>)
 80149ea:	9008      	str	r0, [sp, #32]
 80149ec:	9109      	str	r1, [sp, #36]	; 0x24
 80149ee:	4b57      	ldr	r3, [pc, #348]	; (8014b4c <__ieee754_log+0x348>)
 80149f0:	0020      	movs	r0, r4
 80149f2:	0029      	movs	r1, r5
 80149f4:	f7ed fc7a 	bl	80022ec <__aeabi_dmul>
 80149f8:	4a55      	ldr	r2, [pc, #340]	; (8014b50 <__ieee754_log+0x34c>)
 80149fa:	4b56      	ldr	r3, [pc, #344]	; (8014b54 <__ieee754_log+0x350>)
 80149fc:	f7ec fd06 	bl	800140c <__aeabi_dadd>
 8014a00:	0022      	movs	r2, r4
 8014a02:	002b      	movs	r3, r5
 8014a04:	f7ed fc72 	bl	80022ec <__aeabi_dmul>
 8014a08:	4a53      	ldr	r2, [pc, #332]	; (8014b58 <__ieee754_log+0x354>)
 8014a0a:	4b54      	ldr	r3, [pc, #336]	; (8014b5c <__ieee754_log+0x358>)
 8014a0c:	f7ec fcfe 	bl	800140c <__aeabi_dadd>
 8014a10:	0022      	movs	r2, r4
 8014a12:	002b      	movs	r3, r5
 8014a14:	f7ed fc6a 	bl	80022ec <__aeabi_dmul>
 8014a18:	0002      	movs	r2, r0
 8014a1a:	000b      	movs	r3, r1
 8014a1c:	9808      	ldr	r0, [sp, #32]
 8014a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a20:	f7ec fcf4 	bl	800140c <__aeabi_dadd>
 8014a24:	9a02      	ldr	r2, [sp, #8]
 8014a26:	4b4e      	ldr	r3, [pc, #312]	; (8014b60 <__ieee754_log+0x35c>)
 8014a28:	0004      	movs	r4, r0
 8014a2a:	1a9b      	subs	r3, r3, r2
 8014a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a2e:	000d      	movs	r5, r1
 8014a30:	4313      	orrs	r3, r2
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	dd34      	ble.n	8014aa0 <__ieee754_log+0x29c>
 8014a36:	2200      	movs	r2, #0
 8014a38:	4b39      	ldr	r3, [pc, #228]	; (8014b20 <__ieee754_log+0x31c>)
 8014a3a:	0030      	movs	r0, r6
 8014a3c:	0039      	movs	r1, r7
 8014a3e:	f7ed fc55 	bl	80022ec <__aeabi_dmul>
 8014a42:	0032      	movs	r2, r6
 8014a44:	003b      	movs	r3, r7
 8014a46:	f7ed fc51 	bl	80022ec <__aeabi_dmul>
 8014a4a:	0002      	movs	r2, r0
 8014a4c:	000b      	movs	r3, r1
 8014a4e:	9002      	str	r0, [sp, #8]
 8014a50:	9103      	str	r1, [sp, #12]
 8014a52:	0020      	movs	r0, r4
 8014a54:	0029      	movs	r1, r5
 8014a56:	f7ec fcd9 	bl	800140c <__aeabi_dadd>
 8014a5a:	9a04      	ldr	r2, [sp, #16]
 8014a5c:	9b05      	ldr	r3, [sp, #20]
 8014a5e:	f7ed fc45 	bl	80022ec <__aeabi_dmul>
 8014a62:	9b00      	ldr	r3, [sp, #0]
 8014a64:	0004      	movs	r4, r0
 8014a66:	000d      	movs	r5, r1
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d106      	bne.n	8014a7a <__ieee754_log+0x276>
 8014a6c:	0002      	movs	r2, r0
 8014a6e:	000b      	movs	r3, r1
 8014a70:	9802      	ldr	r0, [sp, #8]
 8014a72:	9903      	ldr	r1, [sp, #12]
 8014a74:	f7ed fea6 	bl	80027c4 <__aeabi_dsub>
 8014a78:	e74f      	b.n	801491a <__ieee754_log+0x116>
 8014a7a:	4a23      	ldr	r2, [pc, #140]	; (8014b08 <__ieee754_log+0x304>)
 8014a7c:	4b23      	ldr	r3, [pc, #140]	; (8014b0c <__ieee754_log+0x308>)
 8014a7e:	9806      	ldr	r0, [sp, #24]
 8014a80:	9907      	ldr	r1, [sp, #28]
 8014a82:	f7ed fc33 	bl	80022ec <__aeabi_dmul>
 8014a86:	4a22      	ldr	r2, [pc, #136]	; (8014b10 <__ieee754_log+0x30c>)
 8014a88:	9000      	str	r0, [sp, #0]
 8014a8a:	9101      	str	r1, [sp, #4]
 8014a8c:	9806      	ldr	r0, [sp, #24]
 8014a8e:	9907      	ldr	r1, [sp, #28]
 8014a90:	4b20      	ldr	r3, [pc, #128]	; (8014b14 <__ieee754_log+0x310>)
 8014a92:	f7ed fc2b 	bl	80022ec <__aeabi_dmul>
 8014a96:	0022      	movs	r2, r4
 8014a98:	002b      	movs	r3, r5
 8014a9a:	f7ec fcb7 	bl	800140c <__aeabi_dadd>
 8014a9e:	e754      	b.n	801494a <__ieee754_log+0x146>
 8014aa0:	0002      	movs	r2, r0
 8014aa2:	000b      	movs	r3, r1
 8014aa4:	0030      	movs	r0, r6
 8014aa6:	0039      	movs	r1, r7
 8014aa8:	f7ed fe8c 	bl	80027c4 <__aeabi_dsub>
 8014aac:	9a04      	ldr	r2, [sp, #16]
 8014aae:	9b05      	ldr	r3, [sp, #20]
 8014ab0:	f7ed fc1c 	bl	80022ec <__aeabi_dmul>
 8014ab4:	9b00      	ldr	r3, [sp, #0]
 8014ab6:	0004      	movs	r4, r0
 8014ab8:	000d      	movs	r5, r1
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d102      	bne.n	8014ac4 <__ieee754_log+0x2c0>
 8014abe:	0002      	movs	r2, r0
 8014ac0:	000b      	movs	r3, r1
 8014ac2:	e72c      	b.n	801491e <__ieee754_log+0x11a>
 8014ac4:	4a10      	ldr	r2, [pc, #64]	; (8014b08 <__ieee754_log+0x304>)
 8014ac6:	4b11      	ldr	r3, [pc, #68]	; (8014b0c <__ieee754_log+0x308>)
 8014ac8:	9806      	ldr	r0, [sp, #24]
 8014aca:	9907      	ldr	r1, [sp, #28]
 8014acc:	f7ed fc0e 	bl	80022ec <__aeabi_dmul>
 8014ad0:	4a0f      	ldr	r2, [pc, #60]	; (8014b10 <__ieee754_log+0x30c>)
 8014ad2:	9000      	str	r0, [sp, #0]
 8014ad4:	9101      	str	r1, [sp, #4]
 8014ad6:	9806      	ldr	r0, [sp, #24]
 8014ad8:	9907      	ldr	r1, [sp, #28]
 8014ada:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <__ieee754_log+0x310>)
 8014adc:	f7ed fc06 	bl	80022ec <__aeabi_dmul>
 8014ae0:	0002      	movs	r2, r0
 8014ae2:	000b      	movs	r3, r1
 8014ae4:	0020      	movs	r0, r4
 8014ae6:	0029      	movs	r1, r5
 8014ae8:	e733      	b.n	8014952 <__ieee754_log+0x14e>
 8014aea:	2000      	movs	r0, #0
 8014aec:	2100      	movs	r1, #0
 8014aee:	e69a      	b.n	8014826 <__ieee754_log+0x22>
 8014af0:	c3500000 	.word	0xc3500000
 8014af4:	43500000 	.word	0x43500000
 8014af8:	7fefffff 	.word	0x7fefffff
 8014afc:	fffffc01 	.word	0xfffffc01
 8014b00:	00095f64 	.word	0x00095f64
 8014b04:	3ff00000 	.word	0x3ff00000
 8014b08:	fee00000 	.word	0xfee00000
 8014b0c:	3fe62e42 	.word	0x3fe62e42
 8014b10:	35793c76 	.word	0x35793c76
 8014b14:	3dea39ef 	.word	0x3dea39ef
 8014b18:	55555555 	.word	0x55555555
 8014b1c:	3fd55555 	.word	0x3fd55555
 8014b20:	3fe00000 	.word	0x3fe00000
 8014b24:	fff9eb86 	.word	0xfff9eb86
 8014b28:	df3e5244 	.word	0xdf3e5244
 8014b2c:	3fc2f112 	.word	0x3fc2f112
 8014b30:	96cb03de 	.word	0x96cb03de
 8014b34:	3fc74664 	.word	0x3fc74664
 8014b38:	94229359 	.word	0x94229359
 8014b3c:	3fd24924 	.word	0x3fd24924
 8014b40:	55555593 	.word	0x55555593
 8014b44:	3fe55555 	.word	0x3fe55555
 8014b48:	d078c69f 	.word	0xd078c69f
 8014b4c:	3fc39a09 	.word	0x3fc39a09
 8014b50:	1d8e78af 	.word	0x1d8e78af
 8014b54:	3fcc71c5 	.word	0x3fcc71c5
 8014b58:	9997fa04 	.word	0x9997fa04
 8014b5c:	3fd99999 	.word	0x3fd99999
 8014b60:	0006b851 	.word	0x0006b851

08014b64 <__ieee754_rem_pio2>:
 8014b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b66:	004b      	lsls	r3, r1, #1
 8014b68:	b091      	sub	sp, #68	; 0x44
 8014b6a:	085b      	lsrs	r3, r3, #1
 8014b6c:	9302      	str	r3, [sp, #8]
 8014b6e:	0017      	movs	r7, r2
 8014b70:	4bb6      	ldr	r3, [pc, #728]	; (8014e4c <__ieee754_rem_pio2+0x2e8>)
 8014b72:	9a02      	ldr	r2, [sp, #8]
 8014b74:	0004      	movs	r4, r0
 8014b76:	000d      	movs	r5, r1
 8014b78:	9109      	str	r1, [sp, #36]	; 0x24
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	dc09      	bgt.n	8014b92 <__ieee754_rem_pio2+0x2e>
 8014b7e:	0002      	movs	r2, r0
 8014b80:	000b      	movs	r3, r1
 8014b82:	603a      	str	r2, [r7, #0]
 8014b84:	607b      	str	r3, [r7, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	2300      	movs	r3, #0
 8014b8a:	60ba      	str	r2, [r7, #8]
 8014b8c:	60fb      	str	r3, [r7, #12]
 8014b8e:	2600      	movs	r6, #0
 8014b90:	e025      	b.n	8014bde <__ieee754_rem_pio2+0x7a>
 8014b92:	4baf      	ldr	r3, [pc, #700]	; (8014e50 <__ieee754_rem_pio2+0x2ec>)
 8014b94:	9a02      	ldr	r2, [sp, #8]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	dd00      	ble.n	8014b9c <__ieee754_rem_pio2+0x38>
 8014b9a:	e06e      	b.n	8014c7a <__ieee754_rem_pio2+0x116>
 8014b9c:	4ead      	ldr	r6, [pc, #692]	; (8014e54 <__ieee754_rem_pio2+0x2f0>)
 8014b9e:	4aae      	ldr	r2, [pc, #696]	; (8014e58 <__ieee754_rem_pio2+0x2f4>)
 8014ba0:	2d00      	cmp	r5, #0
 8014ba2:	dd35      	ble.n	8014c10 <__ieee754_rem_pio2+0xac>
 8014ba4:	0020      	movs	r0, r4
 8014ba6:	0029      	movs	r1, r5
 8014ba8:	4baa      	ldr	r3, [pc, #680]	; (8014e54 <__ieee754_rem_pio2+0x2f0>)
 8014baa:	f7ed fe0b 	bl	80027c4 <__aeabi_dsub>
 8014bae:	9b02      	ldr	r3, [sp, #8]
 8014bb0:	0004      	movs	r4, r0
 8014bb2:	000d      	movs	r5, r1
 8014bb4:	42b3      	cmp	r3, r6
 8014bb6:	d015      	beq.n	8014be4 <__ieee754_rem_pio2+0x80>
 8014bb8:	4aa8      	ldr	r2, [pc, #672]	; (8014e5c <__ieee754_rem_pio2+0x2f8>)
 8014bba:	4ba9      	ldr	r3, [pc, #676]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014bbc:	f7ed fe02 	bl	80027c4 <__aeabi_dsub>
 8014bc0:	0002      	movs	r2, r0
 8014bc2:	000b      	movs	r3, r1
 8014bc4:	0020      	movs	r0, r4
 8014bc6:	603a      	str	r2, [r7, #0]
 8014bc8:	607b      	str	r3, [r7, #4]
 8014bca:	0029      	movs	r1, r5
 8014bcc:	f7ed fdfa 	bl	80027c4 <__aeabi_dsub>
 8014bd0:	4aa2      	ldr	r2, [pc, #648]	; (8014e5c <__ieee754_rem_pio2+0x2f8>)
 8014bd2:	4ba3      	ldr	r3, [pc, #652]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014bd4:	f7ed fdf6 	bl	80027c4 <__aeabi_dsub>
 8014bd8:	2601      	movs	r6, #1
 8014bda:	60b8      	str	r0, [r7, #8]
 8014bdc:	60f9      	str	r1, [r7, #12]
 8014bde:	0030      	movs	r0, r6
 8014be0:	b011      	add	sp, #68	; 0x44
 8014be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be4:	22d3      	movs	r2, #211	; 0xd3
 8014be6:	4b9e      	ldr	r3, [pc, #632]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014be8:	0552      	lsls	r2, r2, #21
 8014bea:	f7ed fdeb 	bl	80027c4 <__aeabi_dsub>
 8014bee:	4a9d      	ldr	r2, [pc, #628]	; (8014e64 <__ieee754_rem_pio2+0x300>)
 8014bf0:	4b9d      	ldr	r3, [pc, #628]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014bf2:	0004      	movs	r4, r0
 8014bf4:	000d      	movs	r5, r1
 8014bf6:	f7ed fde5 	bl	80027c4 <__aeabi_dsub>
 8014bfa:	0002      	movs	r2, r0
 8014bfc:	000b      	movs	r3, r1
 8014bfe:	0020      	movs	r0, r4
 8014c00:	603a      	str	r2, [r7, #0]
 8014c02:	607b      	str	r3, [r7, #4]
 8014c04:	0029      	movs	r1, r5
 8014c06:	f7ed fddd 	bl	80027c4 <__aeabi_dsub>
 8014c0a:	4a96      	ldr	r2, [pc, #600]	; (8014e64 <__ieee754_rem_pio2+0x300>)
 8014c0c:	4b96      	ldr	r3, [pc, #600]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014c0e:	e7e1      	b.n	8014bd4 <__ieee754_rem_pio2+0x70>
 8014c10:	0020      	movs	r0, r4
 8014c12:	0029      	movs	r1, r5
 8014c14:	4b8f      	ldr	r3, [pc, #572]	; (8014e54 <__ieee754_rem_pio2+0x2f0>)
 8014c16:	f7ec fbf9 	bl	800140c <__aeabi_dadd>
 8014c1a:	9b02      	ldr	r3, [sp, #8]
 8014c1c:	0004      	movs	r4, r0
 8014c1e:	000d      	movs	r5, r1
 8014c20:	42b3      	cmp	r3, r6
 8014c22:	d014      	beq.n	8014c4e <__ieee754_rem_pio2+0xea>
 8014c24:	4a8d      	ldr	r2, [pc, #564]	; (8014e5c <__ieee754_rem_pio2+0x2f8>)
 8014c26:	4b8e      	ldr	r3, [pc, #568]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014c28:	f7ec fbf0 	bl	800140c <__aeabi_dadd>
 8014c2c:	0002      	movs	r2, r0
 8014c2e:	000b      	movs	r3, r1
 8014c30:	0020      	movs	r0, r4
 8014c32:	603a      	str	r2, [r7, #0]
 8014c34:	607b      	str	r3, [r7, #4]
 8014c36:	0029      	movs	r1, r5
 8014c38:	f7ed fdc4 	bl	80027c4 <__aeabi_dsub>
 8014c3c:	4a87      	ldr	r2, [pc, #540]	; (8014e5c <__ieee754_rem_pio2+0x2f8>)
 8014c3e:	4b88      	ldr	r3, [pc, #544]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014c40:	f7ec fbe4 	bl	800140c <__aeabi_dadd>
 8014c44:	2601      	movs	r6, #1
 8014c46:	60b8      	str	r0, [r7, #8]
 8014c48:	60f9      	str	r1, [r7, #12]
 8014c4a:	4276      	negs	r6, r6
 8014c4c:	e7c7      	b.n	8014bde <__ieee754_rem_pio2+0x7a>
 8014c4e:	22d3      	movs	r2, #211	; 0xd3
 8014c50:	4b83      	ldr	r3, [pc, #524]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014c52:	0552      	lsls	r2, r2, #21
 8014c54:	f7ec fbda 	bl	800140c <__aeabi_dadd>
 8014c58:	4a82      	ldr	r2, [pc, #520]	; (8014e64 <__ieee754_rem_pio2+0x300>)
 8014c5a:	4b83      	ldr	r3, [pc, #524]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014c5c:	0004      	movs	r4, r0
 8014c5e:	000d      	movs	r5, r1
 8014c60:	f7ec fbd4 	bl	800140c <__aeabi_dadd>
 8014c64:	0002      	movs	r2, r0
 8014c66:	000b      	movs	r3, r1
 8014c68:	0020      	movs	r0, r4
 8014c6a:	603a      	str	r2, [r7, #0]
 8014c6c:	607b      	str	r3, [r7, #4]
 8014c6e:	0029      	movs	r1, r5
 8014c70:	f7ed fda8 	bl	80027c4 <__aeabi_dsub>
 8014c74:	4a7b      	ldr	r2, [pc, #492]	; (8014e64 <__ieee754_rem_pio2+0x300>)
 8014c76:	4b7c      	ldr	r3, [pc, #496]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014c78:	e7e2      	b.n	8014c40 <__ieee754_rem_pio2+0xdc>
 8014c7a:	4b7c      	ldr	r3, [pc, #496]	; (8014e6c <__ieee754_rem_pio2+0x308>)
 8014c7c:	9a02      	ldr	r2, [sp, #8]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	dd00      	ble.n	8014c84 <__ieee754_rem_pio2+0x120>
 8014c82:	e0d3      	b.n	8014e2c <__ieee754_rem_pio2+0x2c8>
 8014c84:	0020      	movs	r0, r4
 8014c86:	0029      	movs	r1, r5
 8014c88:	f000 ffba 	bl	8015c00 <fabs>
 8014c8c:	4a78      	ldr	r2, [pc, #480]	; (8014e70 <__ieee754_rem_pio2+0x30c>)
 8014c8e:	4b79      	ldr	r3, [pc, #484]	; (8014e74 <__ieee754_rem_pio2+0x310>)
 8014c90:	0004      	movs	r4, r0
 8014c92:	000d      	movs	r5, r1
 8014c94:	f7ed fb2a 	bl	80022ec <__aeabi_dmul>
 8014c98:	2200      	movs	r2, #0
 8014c9a:	4b77      	ldr	r3, [pc, #476]	; (8014e78 <__ieee754_rem_pio2+0x314>)
 8014c9c:	f7ec fbb6 	bl	800140c <__aeabi_dadd>
 8014ca0:	f7ee f940 	bl	8002f24 <__aeabi_d2iz>
 8014ca4:	0006      	movs	r6, r0
 8014ca6:	f7ee f973 	bl	8002f90 <__aeabi_i2d>
 8014caa:	4a6b      	ldr	r2, [pc, #428]	; (8014e58 <__ieee754_rem_pio2+0x2f4>)
 8014cac:	4b69      	ldr	r3, [pc, #420]	; (8014e54 <__ieee754_rem_pio2+0x2f0>)
 8014cae:	9006      	str	r0, [sp, #24]
 8014cb0:	9107      	str	r1, [sp, #28]
 8014cb2:	f7ed fb1b 	bl	80022ec <__aeabi_dmul>
 8014cb6:	0002      	movs	r2, r0
 8014cb8:	000b      	movs	r3, r1
 8014cba:	0020      	movs	r0, r4
 8014cbc:	0029      	movs	r1, r5
 8014cbe:	f7ed fd81 	bl	80027c4 <__aeabi_dsub>
 8014cc2:	4a66      	ldr	r2, [pc, #408]	; (8014e5c <__ieee754_rem_pio2+0x2f8>)
 8014cc4:	9004      	str	r0, [sp, #16]
 8014cc6:	9105      	str	r1, [sp, #20]
 8014cc8:	9806      	ldr	r0, [sp, #24]
 8014cca:	9907      	ldr	r1, [sp, #28]
 8014ccc:	4b64      	ldr	r3, [pc, #400]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014cce:	f7ed fb0d 	bl	80022ec <__aeabi_dmul>
 8014cd2:	0004      	movs	r4, r0
 8014cd4:	000d      	movs	r5, r1
 8014cd6:	2e1f      	cmp	r6, #31
 8014cd8:	dc0f      	bgt.n	8014cfa <__ieee754_rem_pio2+0x196>
 8014cda:	4a68      	ldr	r2, [pc, #416]	; (8014e7c <__ieee754_rem_pio2+0x318>)
 8014cdc:	1e73      	subs	r3, r6, #1
 8014cde:	009b      	lsls	r3, r3, #2
 8014ce0:	589b      	ldr	r3, [r3, r2]
 8014ce2:	9a02      	ldr	r2, [sp, #8]
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d008      	beq.n	8014cfa <__ieee754_rem_pio2+0x196>
 8014ce8:	9804      	ldr	r0, [sp, #16]
 8014cea:	9905      	ldr	r1, [sp, #20]
 8014cec:	0022      	movs	r2, r4
 8014cee:	002b      	movs	r3, r5
 8014cf0:	f7ed fd68 	bl	80027c4 <__aeabi_dsub>
 8014cf4:	6038      	str	r0, [r7, #0]
 8014cf6:	6079      	str	r1, [r7, #4]
 8014cf8:	e012      	b.n	8014d20 <__ieee754_rem_pio2+0x1bc>
 8014cfa:	0022      	movs	r2, r4
 8014cfc:	9804      	ldr	r0, [sp, #16]
 8014cfe:	9905      	ldr	r1, [sp, #20]
 8014d00:	002b      	movs	r3, r5
 8014d02:	f7ed fd5f 	bl	80027c4 <__aeabi_dsub>
 8014d06:	9b02      	ldr	r3, [sp, #8]
 8014d08:	151b      	asrs	r3, r3, #20
 8014d0a:	9308      	str	r3, [sp, #32]
 8014d0c:	9a08      	ldr	r2, [sp, #32]
 8014d0e:	004b      	lsls	r3, r1, #1
 8014d10:	0d5b      	lsrs	r3, r3, #21
 8014d12:	1ad3      	subs	r3, r2, r3
 8014d14:	2b10      	cmp	r3, #16
 8014d16:	dc21      	bgt.n	8014d5c <__ieee754_rem_pio2+0x1f8>
 8014d18:	0002      	movs	r2, r0
 8014d1a:	000b      	movs	r3, r1
 8014d1c:	603a      	str	r2, [r7, #0]
 8014d1e:	607b      	str	r3, [r7, #4]
 8014d20:	9804      	ldr	r0, [sp, #16]
 8014d22:	9905      	ldr	r1, [sp, #20]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	683a      	ldr	r2, [r7, #0]
 8014d28:	9302      	str	r3, [sp, #8]
 8014d2a:	9b02      	ldr	r3, [sp, #8]
 8014d2c:	f7ed fd4a 	bl	80027c4 <__aeabi_dsub>
 8014d30:	0022      	movs	r2, r4
 8014d32:	002b      	movs	r3, r5
 8014d34:	f7ed fd46 	bl	80027c4 <__aeabi_dsub>
 8014d38:	000b      	movs	r3, r1
 8014d3a:	0002      	movs	r2, r0
 8014d3c:	60ba      	str	r2, [r7, #8]
 8014d3e:	60fb      	str	r3, [r7, #12]
 8014d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	db00      	blt.n	8014d48 <__ieee754_rem_pio2+0x1e4>
 8014d46:	e74a      	b.n	8014bde <__ieee754_rem_pio2+0x7a>
 8014d48:	2280      	movs	r2, #128	; 0x80
 8014d4a:	0612      	lsls	r2, r2, #24
 8014d4c:	4694      	mov	ip, r2
 8014d4e:	9b02      	ldr	r3, [sp, #8]
 8014d50:	1889      	adds	r1, r1, r2
 8014d52:	4463      	add	r3, ip
 8014d54:	607b      	str	r3, [r7, #4]
 8014d56:	60b8      	str	r0, [r7, #8]
 8014d58:	60f9      	str	r1, [r7, #12]
 8014d5a:	e776      	b.n	8014c4a <__ieee754_rem_pio2+0xe6>
 8014d5c:	22d3      	movs	r2, #211	; 0xd3
 8014d5e:	9806      	ldr	r0, [sp, #24]
 8014d60:	9907      	ldr	r1, [sp, #28]
 8014d62:	4b3f      	ldr	r3, [pc, #252]	; (8014e60 <__ieee754_rem_pio2+0x2fc>)
 8014d64:	0552      	lsls	r2, r2, #21
 8014d66:	f7ed fac1 	bl	80022ec <__aeabi_dmul>
 8014d6a:	0004      	movs	r4, r0
 8014d6c:	000d      	movs	r5, r1
 8014d6e:	0002      	movs	r2, r0
 8014d70:	000b      	movs	r3, r1
 8014d72:	9804      	ldr	r0, [sp, #16]
 8014d74:	9905      	ldr	r1, [sp, #20]
 8014d76:	f7ed fd25 	bl	80027c4 <__aeabi_dsub>
 8014d7a:	0002      	movs	r2, r0
 8014d7c:	000b      	movs	r3, r1
 8014d7e:	9002      	str	r0, [sp, #8]
 8014d80:	9103      	str	r1, [sp, #12]
 8014d82:	9804      	ldr	r0, [sp, #16]
 8014d84:	9905      	ldr	r1, [sp, #20]
 8014d86:	f7ed fd1d 	bl	80027c4 <__aeabi_dsub>
 8014d8a:	0022      	movs	r2, r4
 8014d8c:	002b      	movs	r3, r5
 8014d8e:	f7ed fd19 	bl	80027c4 <__aeabi_dsub>
 8014d92:	0004      	movs	r4, r0
 8014d94:	000d      	movs	r5, r1
 8014d96:	9806      	ldr	r0, [sp, #24]
 8014d98:	9907      	ldr	r1, [sp, #28]
 8014d9a:	4a32      	ldr	r2, [pc, #200]	; (8014e64 <__ieee754_rem_pio2+0x300>)
 8014d9c:	4b32      	ldr	r3, [pc, #200]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014d9e:	f7ed faa5 	bl	80022ec <__aeabi_dmul>
 8014da2:	0022      	movs	r2, r4
 8014da4:	002b      	movs	r3, r5
 8014da6:	f7ed fd0d 	bl	80027c4 <__aeabi_dsub>
 8014daa:	0002      	movs	r2, r0
 8014dac:	000b      	movs	r3, r1
 8014dae:	0004      	movs	r4, r0
 8014db0:	000d      	movs	r5, r1
 8014db2:	9802      	ldr	r0, [sp, #8]
 8014db4:	9903      	ldr	r1, [sp, #12]
 8014db6:	f7ed fd05 	bl	80027c4 <__aeabi_dsub>
 8014dba:	9a08      	ldr	r2, [sp, #32]
 8014dbc:	004b      	lsls	r3, r1, #1
 8014dbe:	0d5b      	lsrs	r3, r3, #21
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	2b31      	cmp	r3, #49	; 0x31
 8014dc4:	dc08      	bgt.n	8014dd8 <__ieee754_rem_pio2+0x274>
 8014dc6:	0002      	movs	r2, r0
 8014dc8:	000b      	movs	r3, r1
 8014dca:	603a      	str	r2, [r7, #0]
 8014dcc:	607b      	str	r3, [r7, #4]
 8014dce:	9a02      	ldr	r2, [sp, #8]
 8014dd0:	9b03      	ldr	r3, [sp, #12]
 8014dd2:	9204      	str	r2, [sp, #16]
 8014dd4:	9305      	str	r3, [sp, #20]
 8014dd6:	e7a3      	b.n	8014d20 <__ieee754_rem_pio2+0x1bc>
 8014dd8:	22b8      	movs	r2, #184	; 0xb8
 8014dda:	9806      	ldr	r0, [sp, #24]
 8014ddc:	9907      	ldr	r1, [sp, #28]
 8014dde:	4b22      	ldr	r3, [pc, #136]	; (8014e68 <__ieee754_rem_pio2+0x304>)
 8014de0:	0592      	lsls	r2, r2, #22
 8014de2:	f7ed fa83 	bl	80022ec <__aeabi_dmul>
 8014de6:	0004      	movs	r4, r0
 8014de8:	000d      	movs	r5, r1
 8014dea:	0002      	movs	r2, r0
 8014dec:	000b      	movs	r3, r1
 8014dee:	9802      	ldr	r0, [sp, #8]
 8014df0:	9903      	ldr	r1, [sp, #12]
 8014df2:	f7ed fce7 	bl	80027c4 <__aeabi_dsub>
 8014df6:	0002      	movs	r2, r0
 8014df8:	000b      	movs	r3, r1
 8014dfa:	9004      	str	r0, [sp, #16]
 8014dfc:	9105      	str	r1, [sp, #20]
 8014dfe:	9802      	ldr	r0, [sp, #8]
 8014e00:	9903      	ldr	r1, [sp, #12]
 8014e02:	f7ed fcdf 	bl	80027c4 <__aeabi_dsub>
 8014e06:	0022      	movs	r2, r4
 8014e08:	002b      	movs	r3, r5
 8014e0a:	f7ed fcdb 	bl	80027c4 <__aeabi_dsub>
 8014e0e:	0004      	movs	r4, r0
 8014e10:	000d      	movs	r5, r1
 8014e12:	9806      	ldr	r0, [sp, #24]
 8014e14:	9907      	ldr	r1, [sp, #28]
 8014e16:	4a1a      	ldr	r2, [pc, #104]	; (8014e80 <__ieee754_rem_pio2+0x31c>)
 8014e18:	4b1a      	ldr	r3, [pc, #104]	; (8014e84 <__ieee754_rem_pio2+0x320>)
 8014e1a:	f7ed fa67 	bl	80022ec <__aeabi_dmul>
 8014e1e:	0022      	movs	r2, r4
 8014e20:	002b      	movs	r3, r5
 8014e22:	f7ed fccf 	bl	80027c4 <__aeabi_dsub>
 8014e26:	0004      	movs	r4, r0
 8014e28:	000d      	movs	r5, r1
 8014e2a:	e75d      	b.n	8014ce8 <__ieee754_rem_pio2+0x184>
 8014e2c:	4b16      	ldr	r3, [pc, #88]	; (8014e88 <__ieee754_rem_pio2+0x324>)
 8014e2e:	9a02      	ldr	r2, [sp, #8]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	dd2b      	ble.n	8014e8c <__ieee754_rem_pio2+0x328>
 8014e34:	0022      	movs	r2, r4
 8014e36:	002b      	movs	r3, r5
 8014e38:	0020      	movs	r0, r4
 8014e3a:	0029      	movs	r1, r5
 8014e3c:	f7ed fcc2 	bl	80027c4 <__aeabi_dsub>
 8014e40:	60b8      	str	r0, [r7, #8]
 8014e42:	60f9      	str	r1, [r7, #12]
 8014e44:	6038      	str	r0, [r7, #0]
 8014e46:	6079      	str	r1, [r7, #4]
 8014e48:	e6a1      	b.n	8014b8e <__ieee754_rem_pio2+0x2a>
 8014e4a:	46c0      	nop			; (mov r8, r8)
 8014e4c:	3fe921fb 	.word	0x3fe921fb
 8014e50:	4002d97b 	.word	0x4002d97b
 8014e54:	3ff921fb 	.word	0x3ff921fb
 8014e58:	54400000 	.word	0x54400000
 8014e5c:	1a626331 	.word	0x1a626331
 8014e60:	3dd0b461 	.word	0x3dd0b461
 8014e64:	2e037073 	.word	0x2e037073
 8014e68:	3ba3198a 	.word	0x3ba3198a
 8014e6c:	413921fb 	.word	0x413921fb
 8014e70:	6dc9c883 	.word	0x6dc9c883
 8014e74:	3fe45f30 	.word	0x3fe45f30
 8014e78:	3fe00000 	.word	0x3fe00000
 8014e7c:	080187a8 	.word	0x080187a8
 8014e80:	252049c1 	.word	0x252049c1
 8014e84:	397b839a 	.word	0x397b839a
 8014e88:	7fefffff 	.word	0x7fefffff
 8014e8c:	9a02      	ldr	r2, [sp, #8]
 8014e8e:	0020      	movs	r0, r4
 8014e90:	1516      	asrs	r6, r2, #20
 8014e92:	4a27      	ldr	r2, [pc, #156]	; (8014f30 <__ieee754_rem_pio2+0x3cc>)
 8014e94:	18b6      	adds	r6, r6, r2
 8014e96:	9a02      	ldr	r2, [sp, #8]
 8014e98:	0533      	lsls	r3, r6, #20
 8014e9a:	1ad5      	subs	r5, r2, r3
 8014e9c:	0029      	movs	r1, r5
 8014e9e:	f7ee f841 	bl	8002f24 <__aeabi_d2iz>
 8014ea2:	f7ee f875 	bl	8002f90 <__aeabi_i2d>
 8014ea6:	0002      	movs	r2, r0
 8014ea8:	000b      	movs	r3, r1
 8014eaa:	0020      	movs	r0, r4
 8014eac:	0029      	movs	r1, r5
 8014eae:	920a      	str	r2, [sp, #40]	; 0x28
 8014eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014eb2:	f7ed fc87 	bl	80027c4 <__aeabi_dsub>
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	4b1e      	ldr	r3, [pc, #120]	; (8014f34 <__ieee754_rem_pio2+0x3d0>)
 8014eba:	f7ed fa17 	bl	80022ec <__aeabi_dmul>
 8014ebe:	000d      	movs	r5, r1
 8014ec0:	0004      	movs	r4, r0
 8014ec2:	f7ee f82f 	bl	8002f24 <__aeabi_d2iz>
 8014ec6:	f7ee f863 	bl	8002f90 <__aeabi_i2d>
 8014eca:	0002      	movs	r2, r0
 8014ecc:	000b      	movs	r3, r1
 8014ece:	0020      	movs	r0, r4
 8014ed0:	0029      	movs	r1, r5
 8014ed2:	920c      	str	r2, [sp, #48]	; 0x30
 8014ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8014ed6:	f7ed fc75 	bl	80027c4 <__aeabi_dsub>
 8014eda:	2200      	movs	r2, #0
 8014edc:	4b15      	ldr	r3, [pc, #84]	; (8014f34 <__ieee754_rem_pio2+0x3d0>)
 8014ede:	f7ed fa05 	bl	80022ec <__aeabi_dmul>
 8014ee2:	2503      	movs	r5, #3
 8014ee4:	900e      	str	r0, [sp, #56]	; 0x38
 8014ee6:	910f      	str	r1, [sp, #60]	; 0x3c
 8014ee8:	ac0a      	add	r4, sp, #40	; 0x28
 8014eea:	2200      	movs	r2, #0
 8014eec:	6920      	ldr	r0, [r4, #16]
 8014eee:	6961      	ldr	r1, [r4, #20]
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	9502      	str	r5, [sp, #8]
 8014ef4:	3c08      	subs	r4, #8
 8014ef6:	3d01      	subs	r5, #1
 8014ef8:	f7eb fa96 	bl	8000428 <__aeabi_dcmpeq>
 8014efc:	2800      	cmp	r0, #0
 8014efe:	d1f4      	bne.n	8014eea <__ieee754_rem_pio2+0x386>
 8014f00:	4b0d      	ldr	r3, [pc, #52]	; (8014f38 <__ieee754_rem_pio2+0x3d4>)
 8014f02:	0032      	movs	r2, r6
 8014f04:	9301      	str	r3, [sp, #4]
 8014f06:	2302      	movs	r3, #2
 8014f08:	0039      	movs	r1, r7
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	a80a      	add	r0, sp, #40	; 0x28
 8014f0e:	9b02      	ldr	r3, [sp, #8]
 8014f10:	f000 f8d4 	bl	80150bc <__kernel_rem_pio2>
 8014f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f16:	0006      	movs	r6, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	db00      	blt.n	8014f1e <__ieee754_rem_pio2+0x3ba>
 8014f1c:	e65f      	b.n	8014bde <__ieee754_rem_pio2+0x7a>
 8014f1e:	2280      	movs	r2, #128	; 0x80
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	0612      	lsls	r2, r2, #24
 8014f24:	189b      	adds	r3, r3, r2
 8014f26:	607b      	str	r3, [r7, #4]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	189b      	adds	r3, r3, r2
 8014f2c:	60fb      	str	r3, [r7, #12]
 8014f2e:	e68c      	b.n	8014c4a <__ieee754_rem_pio2+0xe6>
 8014f30:	fffffbea 	.word	0xfffffbea
 8014f34:	41700000 	.word	0x41700000
 8014f38:	08018828 	.word	0x08018828

08014f3c <__kernel_cos>:
 8014f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f3e:	b087      	sub	sp, #28
 8014f40:	9204      	str	r2, [sp, #16]
 8014f42:	9305      	str	r3, [sp, #20]
 8014f44:	004b      	lsls	r3, r1, #1
 8014f46:	085b      	lsrs	r3, r3, #1
 8014f48:	9300      	str	r3, [sp, #0]
 8014f4a:	23f9      	movs	r3, #249	; 0xf9
 8014f4c:	9a00      	ldr	r2, [sp, #0]
 8014f4e:	0007      	movs	r7, r0
 8014f50:	000e      	movs	r6, r1
 8014f52:	059b      	lsls	r3, r3, #22
 8014f54:	429a      	cmp	r2, r3
 8014f56:	da04      	bge.n	8014f62 <__kernel_cos+0x26>
 8014f58:	f7ed ffe4 	bl	8002f24 <__aeabi_d2iz>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d100      	bne.n	8014f62 <__kernel_cos+0x26>
 8014f60:	e084      	b.n	801506c <__kernel_cos+0x130>
 8014f62:	003a      	movs	r2, r7
 8014f64:	0033      	movs	r3, r6
 8014f66:	0038      	movs	r0, r7
 8014f68:	0031      	movs	r1, r6
 8014f6a:	f7ed f9bf 	bl	80022ec <__aeabi_dmul>
 8014f6e:	2200      	movs	r2, #0
 8014f70:	4b40      	ldr	r3, [pc, #256]	; (8015074 <__kernel_cos+0x138>)
 8014f72:	0004      	movs	r4, r0
 8014f74:	000d      	movs	r5, r1
 8014f76:	f7ed f9b9 	bl	80022ec <__aeabi_dmul>
 8014f7a:	4a3f      	ldr	r2, [pc, #252]	; (8015078 <__kernel_cos+0x13c>)
 8014f7c:	9002      	str	r0, [sp, #8]
 8014f7e:	9103      	str	r1, [sp, #12]
 8014f80:	4b3e      	ldr	r3, [pc, #248]	; (801507c <__kernel_cos+0x140>)
 8014f82:	0020      	movs	r0, r4
 8014f84:	0029      	movs	r1, r5
 8014f86:	f7ed f9b1 	bl	80022ec <__aeabi_dmul>
 8014f8a:	4a3d      	ldr	r2, [pc, #244]	; (8015080 <__kernel_cos+0x144>)
 8014f8c:	4b3d      	ldr	r3, [pc, #244]	; (8015084 <__kernel_cos+0x148>)
 8014f8e:	f7ec fa3d 	bl	800140c <__aeabi_dadd>
 8014f92:	0022      	movs	r2, r4
 8014f94:	002b      	movs	r3, r5
 8014f96:	f7ed f9a9 	bl	80022ec <__aeabi_dmul>
 8014f9a:	4a3b      	ldr	r2, [pc, #236]	; (8015088 <__kernel_cos+0x14c>)
 8014f9c:	4b3b      	ldr	r3, [pc, #236]	; (801508c <__kernel_cos+0x150>)
 8014f9e:	f7ed fc11 	bl	80027c4 <__aeabi_dsub>
 8014fa2:	0022      	movs	r2, r4
 8014fa4:	002b      	movs	r3, r5
 8014fa6:	f7ed f9a1 	bl	80022ec <__aeabi_dmul>
 8014faa:	4a39      	ldr	r2, [pc, #228]	; (8015090 <__kernel_cos+0x154>)
 8014fac:	4b39      	ldr	r3, [pc, #228]	; (8015094 <__kernel_cos+0x158>)
 8014fae:	f7ec fa2d 	bl	800140c <__aeabi_dadd>
 8014fb2:	0022      	movs	r2, r4
 8014fb4:	002b      	movs	r3, r5
 8014fb6:	f7ed f999 	bl	80022ec <__aeabi_dmul>
 8014fba:	4a37      	ldr	r2, [pc, #220]	; (8015098 <__kernel_cos+0x15c>)
 8014fbc:	4b37      	ldr	r3, [pc, #220]	; (801509c <__kernel_cos+0x160>)
 8014fbe:	f7ed fc01 	bl	80027c4 <__aeabi_dsub>
 8014fc2:	0022      	movs	r2, r4
 8014fc4:	002b      	movs	r3, r5
 8014fc6:	f7ed f991 	bl	80022ec <__aeabi_dmul>
 8014fca:	4a35      	ldr	r2, [pc, #212]	; (80150a0 <__kernel_cos+0x164>)
 8014fcc:	4b35      	ldr	r3, [pc, #212]	; (80150a4 <__kernel_cos+0x168>)
 8014fce:	f7ec fa1d 	bl	800140c <__aeabi_dadd>
 8014fd2:	0022      	movs	r2, r4
 8014fd4:	002b      	movs	r3, r5
 8014fd6:	f7ed f989 	bl	80022ec <__aeabi_dmul>
 8014fda:	0022      	movs	r2, r4
 8014fdc:	002b      	movs	r3, r5
 8014fde:	f7ed f985 	bl	80022ec <__aeabi_dmul>
 8014fe2:	9a04      	ldr	r2, [sp, #16]
 8014fe4:	9b05      	ldr	r3, [sp, #20]
 8014fe6:	0004      	movs	r4, r0
 8014fe8:	000d      	movs	r5, r1
 8014fea:	0038      	movs	r0, r7
 8014fec:	0031      	movs	r1, r6
 8014fee:	f7ed f97d 	bl	80022ec <__aeabi_dmul>
 8014ff2:	0002      	movs	r2, r0
 8014ff4:	000b      	movs	r3, r1
 8014ff6:	0020      	movs	r0, r4
 8014ff8:	0029      	movs	r1, r5
 8014ffa:	f7ed fbe3 	bl	80027c4 <__aeabi_dsub>
 8014ffe:	4b2a      	ldr	r3, [pc, #168]	; (80150a8 <__kernel_cos+0x16c>)
 8015000:	9a00      	ldr	r2, [sp, #0]
 8015002:	0004      	movs	r4, r0
 8015004:	000d      	movs	r5, r1
 8015006:	429a      	cmp	r2, r3
 8015008:	dc0d      	bgt.n	8015026 <__kernel_cos+0xea>
 801500a:	0002      	movs	r2, r0
 801500c:	000b      	movs	r3, r1
 801500e:	9802      	ldr	r0, [sp, #8]
 8015010:	9903      	ldr	r1, [sp, #12]
 8015012:	f7ed fbd7 	bl	80027c4 <__aeabi_dsub>
 8015016:	0002      	movs	r2, r0
 8015018:	2000      	movs	r0, #0
 801501a:	000b      	movs	r3, r1
 801501c:	4923      	ldr	r1, [pc, #140]	; (80150ac <__kernel_cos+0x170>)
 801501e:	f7ed fbd1 	bl	80027c4 <__aeabi_dsub>
 8015022:	b007      	add	sp, #28
 8015024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015026:	4b22      	ldr	r3, [pc, #136]	; (80150b0 <__kernel_cos+0x174>)
 8015028:	9a00      	ldr	r2, [sp, #0]
 801502a:	2600      	movs	r6, #0
 801502c:	429a      	cmp	r2, r3
 801502e:	dc1b      	bgt.n	8015068 <__kernel_cos+0x12c>
 8015030:	0013      	movs	r3, r2
 8015032:	4a20      	ldr	r2, [pc, #128]	; (80150b4 <__kernel_cos+0x178>)
 8015034:	4694      	mov	ip, r2
 8015036:	4463      	add	r3, ip
 8015038:	001f      	movs	r7, r3
 801503a:	0032      	movs	r2, r6
 801503c:	003b      	movs	r3, r7
 801503e:	2000      	movs	r0, #0
 8015040:	491a      	ldr	r1, [pc, #104]	; (80150ac <__kernel_cos+0x170>)
 8015042:	f7ed fbbf 	bl	80027c4 <__aeabi_dsub>
 8015046:	0032      	movs	r2, r6
 8015048:	003b      	movs	r3, r7
 801504a:	9000      	str	r0, [sp, #0]
 801504c:	9101      	str	r1, [sp, #4]
 801504e:	9802      	ldr	r0, [sp, #8]
 8015050:	9903      	ldr	r1, [sp, #12]
 8015052:	f7ed fbb7 	bl	80027c4 <__aeabi_dsub>
 8015056:	0022      	movs	r2, r4
 8015058:	002b      	movs	r3, r5
 801505a:	f7ed fbb3 	bl	80027c4 <__aeabi_dsub>
 801505e:	0002      	movs	r2, r0
 8015060:	000b      	movs	r3, r1
 8015062:	9800      	ldr	r0, [sp, #0]
 8015064:	9901      	ldr	r1, [sp, #4]
 8015066:	e7da      	b.n	801501e <__kernel_cos+0xe2>
 8015068:	4f13      	ldr	r7, [pc, #76]	; (80150b8 <__kernel_cos+0x17c>)
 801506a:	e7e6      	b.n	801503a <__kernel_cos+0xfe>
 801506c:	2000      	movs	r0, #0
 801506e:	490f      	ldr	r1, [pc, #60]	; (80150ac <__kernel_cos+0x170>)
 8015070:	e7d7      	b.n	8015022 <__kernel_cos+0xe6>
 8015072:	46c0      	nop			; (mov r8, r8)
 8015074:	3fe00000 	.word	0x3fe00000
 8015078:	be8838d4 	.word	0xbe8838d4
 801507c:	bda8fae9 	.word	0xbda8fae9
 8015080:	bdb4b1c4 	.word	0xbdb4b1c4
 8015084:	3e21ee9e 	.word	0x3e21ee9e
 8015088:	809c52ad 	.word	0x809c52ad
 801508c:	3e927e4f 	.word	0x3e927e4f
 8015090:	19cb1590 	.word	0x19cb1590
 8015094:	3efa01a0 	.word	0x3efa01a0
 8015098:	16c15177 	.word	0x16c15177
 801509c:	3f56c16c 	.word	0x3f56c16c
 80150a0:	5555554c 	.word	0x5555554c
 80150a4:	3fa55555 	.word	0x3fa55555
 80150a8:	3fd33332 	.word	0x3fd33332
 80150ac:	3ff00000 	.word	0x3ff00000
 80150b0:	3fe90000 	.word	0x3fe90000
 80150b4:	ffe00000 	.word	0xffe00000
 80150b8:	3fd20000 	.word	0x3fd20000

080150bc <__kernel_rem_pio2>:
 80150bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150be:	4cd0      	ldr	r4, [pc, #832]	; (8015400 <__kernel_rem_pio2+0x344>)
 80150c0:	44a5      	add	sp, r4
 80150c2:	930d      	str	r3, [sp, #52]	; 0x34
 80150c4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80150c6:	0014      	movs	r4, r2
 80150c8:	009a      	lsls	r2, r3, #2
 80150ca:	4bce      	ldr	r3, [pc, #824]	; (8015404 <__kernel_rem_pio2+0x348>)
 80150cc:	900e      	str	r0, [sp, #56]	; 0x38
 80150ce:	58d3      	ldr	r3, [r2, r3]
 80150d0:	9107      	str	r1, [sp, #28]
 80150d2:	9308      	str	r3, [sp, #32]
 80150d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150d6:	3b01      	subs	r3, #1
 80150d8:	930c      	str	r3, [sp, #48]	; 0x30
 80150da:	2300      	movs	r3, #0
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	0023      	movs	r3, r4
 80150e0:	3314      	adds	r3, #20
 80150e2:	db04      	blt.n	80150ee <__kernel_rem_pio2+0x32>
 80150e4:	2118      	movs	r1, #24
 80150e6:	1ee0      	subs	r0, r4, #3
 80150e8:	f7eb f8a2 	bl	8000230 <__divsi3>
 80150ec:	9000      	str	r0, [sp, #0]
 80150ee:	2218      	movs	r2, #24
 80150f0:	9b00      	ldr	r3, [sp, #0]
 80150f2:	4252      	negs	r2, r2
 80150f4:	3301      	adds	r3, #1
 80150f6:	435a      	muls	r2, r3
 80150f8:	1913      	adds	r3, r2, r4
 80150fa:	9302      	str	r3, [sp, #8]
 80150fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150fe:	9b00      	ldr	r3, [sp, #0]
 8015100:	ae26      	add	r6, sp, #152	; 0x98
 8015102:	1a9d      	subs	r5, r3, r2
 8015104:	002c      	movs	r4, r5
 8015106:	9b08      	ldr	r3, [sp, #32]
 8015108:	189f      	adds	r7, r3, r2
 801510a:	1b63      	subs	r3, r4, r5
 801510c:	429f      	cmp	r7, r3
 801510e:	da17      	bge.n	8015140 <__kernel_rem_pio2+0x84>
 8015110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015114:	9304      	str	r3, [sp, #16]
 8015116:	ab76      	add	r3, sp, #472	; 0x1d8
 8015118:	930a      	str	r3, [sp, #40]	; 0x28
 801511a:	2301      	movs	r3, #1
 801511c:	1a9b      	subs	r3, r3, r2
 801511e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015120:	ab28      	add	r3, sp, #160	; 0xa0
 8015122:	930f      	str	r3, [sp, #60]	; 0x3c
 8015124:	9a04      	ldr	r2, [sp, #16]
 8015126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015128:	189b      	adds	r3, r3, r2
 801512a:	9a08      	ldr	r2, [sp, #32]
 801512c:	429a      	cmp	r2, r3
 801512e:	db31      	blt.n	8015194 <__kernel_rem_pio2+0xd8>
 8015130:	9b04      	ldr	r3, [sp, #16]
 8015132:	2400      	movs	r4, #0
 8015134:	00de      	lsls	r6, r3, #3
 8015136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015138:	2500      	movs	r5, #0
 801513a:	2700      	movs	r7, #0
 801513c:	199e      	adds	r6, r3, r6
 801513e:	e01e      	b.n	801517e <__kernel_rem_pio2+0xc2>
 8015140:	2c00      	cmp	r4, #0
 8015142:	db07      	blt.n	8015154 <__kernel_rem_pio2+0x98>
 8015144:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8015146:	00a3      	lsls	r3, r4, #2
 8015148:	58d0      	ldr	r0, [r2, r3]
 801514a:	f7ed ff21 	bl	8002f90 <__aeabi_i2d>
 801514e:	c603      	stmia	r6!, {r0, r1}
 8015150:	3401      	adds	r4, #1
 8015152:	e7da      	b.n	801510a <__kernel_rem_pio2+0x4e>
 8015154:	2000      	movs	r0, #0
 8015156:	2100      	movs	r1, #0
 8015158:	e7f9      	b.n	801514e <__kernel_rem_pio2+0x92>
 801515a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801515c:	00f9      	lsls	r1, r7, #3
 801515e:	1859      	adds	r1, r3, r1
 8015160:	6808      	ldr	r0, [r1, #0]
 8015162:	6849      	ldr	r1, [r1, #4]
 8015164:	6832      	ldr	r2, [r6, #0]
 8015166:	6873      	ldr	r3, [r6, #4]
 8015168:	f7ed f8c0 	bl	80022ec <__aeabi_dmul>
 801516c:	0002      	movs	r2, r0
 801516e:	000b      	movs	r3, r1
 8015170:	0020      	movs	r0, r4
 8015172:	0029      	movs	r1, r5
 8015174:	f7ec f94a 	bl	800140c <__aeabi_dadd>
 8015178:	0004      	movs	r4, r0
 801517a:	000d      	movs	r5, r1
 801517c:	3701      	adds	r7, #1
 801517e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015180:	3e08      	subs	r6, #8
 8015182:	429f      	cmp	r7, r3
 8015184:	dde9      	ble.n	801515a <__kernel_rem_pio2+0x9e>
 8015186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015188:	c330      	stmia	r3!, {r4, r5}
 801518a:	930a      	str	r3, [sp, #40]	; 0x28
 801518c:	9b04      	ldr	r3, [sp, #16]
 801518e:	3301      	adds	r3, #1
 8015190:	9304      	str	r3, [sp, #16]
 8015192:	e7c7      	b.n	8015124 <__kernel_rem_pio2+0x68>
 8015194:	9b08      	ldr	r3, [sp, #32]
 8015196:	aa12      	add	r2, sp, #72	; 0x48
 8015198:	009b      	lsls	r3, r3, #2
 801519a:	189b      	adds	r3, r3, r2
 801519c:	9310      	str	r3, [sp, #64]	; 0x40
 801519e:	9b00      	ldr	r3, [sp, #0]
 80151a0:	0098      	lsls	r0, r3, #2
 80151a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80151a4:	181b      	adds	r3, r3, r0
 80151a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80151a8:	9b08      	ldr	r3, [sp, #32]
 80151aa:	9304      	str	r3, [sp, #16]
 80151ac:	9b04      	ldr	r3, [sp, #16]
 80151ae:	aa76      	add	r2, sp, #472	; 0x1d8
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	18d3      	adds	r3, r2, r3
 80151b4:	681c      	ldr	r4, [r3, #0]
 80151b6:	685d      	ldr	r5, [r3, #4]
 80151b8:	ab12      	add	r3, sp, #72	; 0x48
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80151be:	9b04      	ldr	r3, [sp, #16]
 80151c0:	9211      	str	r2, [sp, #68]	; 0x44
 80151c2:	930a      	str	r3, [sp, #40]	; 0x28
 80151c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	dc74      	bgt.n	80152b4 <__kernel_rem_pio2+0x1f8>
 80151ca:	0020      	movs	r0, r4
 80151cc:	0029      	movs	r1, r5
 80151ce:	9a02      	ldr	r2, [sp, #8]
 80151d0:	f000 fdaa 	bl	8015d28 <scalbn>
 80151d4:	23ff      	movs	r3, #255	; 0xff
 80151d6:	2200      	movs	r2, #0
 80151d8:	059b      	lsls	r3, r3, #22
 80151da:	0004      	movs	r4, r0
 80151dc:	000d      	movs	r5, r1
 80151de:	f7ed f885 	bl	80022ec <__aeabi_dmul>
 80151e2:	f000 fd11 	bl	8015c08 <floor>
 80151e6:	2200      	movs	r2, #0
 80151e8:	4b87      	ldr	r3, [pc, #540]	; (8015408 <__kernel_rem_pio2+0x34c>)
 80151ea:	f7ed f87f 	bl	80022ec <__aeabi_dmul>
 80151ee:	0002      	movs	r2, r0
 80151f0:	000b      	movs	r3, r1
 80151f2:	0020      	movs	r0, r4
 80151f4:	0029      	movs	r1, r5
 80151f6:	f7ed fae5 	bl	80027c4 <__aeabi_dsub>
 80151fa:	000d      	movs	r5, r1
 80151fc:	0004      	movs	r4, r0
 80151fe:	f7ed fe91 	bl	8002f24 <__aeabi_d2iz>
 8015202:	900b      	str	r0, [sp, #44]	; 0x2c
 8015204:	f7ed fec4 	bl	8002f90 <__aeabi_i2d>
 8015208:	000b      	movs	r3, r1
 801520a:	0002      	movs	r2, r0
 801520c:	0029      	movs	r1, r5
 801520e:	0020      	movs	r0, r4
 8015210:	f7ed fad8 	bl	80027c4 <__aeabi_dsub>
 8015214:	9b02      	ldr	r3, [sp, #8]
 8015216:	0006      	movs	r6, r0
 8015218:	000f      	movs	r7, r1
 801521a:	2b00      	cmp	r3, #0
 801521c:	dd74      	ble.n	8015308 <__kernel_rem_pio2+0x24c>
 801521e:	2118      	movs	r1, #24
 8015220:	9b04      	ldr	r3, [sp, #16]
 8015222:	aa12      	add	r2, sp, #72	; 0x48
 8015224:	3b01      	subs	r3, #1
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	589a      	ldr	r2, [r3, r2]
 801522a:	9802      	ldr	r0, [sp, #8]
 801522c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801522e:	1a09      	subs	r1, r1, r0
 8015230:	0010      	movs	r0, r2
 8015232:	4108      	asrs	r0, r1
 8015234:	1824      	adds	r4, r4, r0
 8015236:	4088      	lsls	r0, r1
 8015238:	a912      	add	r1, sp, #72	; 0x48
 801523a:	1a12      	subs	r2, r2, r0
 801523c:	505a      	str	r2, [r3, r1]
 801523e:	2317      	movs	r3, #23
 8015240:	9902      	ldr	r1, [sp, #8]
 8015242:	940b      	str	r4, [sp, #44]	; 0x2c
 8015244:	1a5b      	subs	r3, r3, r1
 8015246:	411a      	asrs	r2, r3
 8015248:	920a      	str	r2, [sp, #40]	; 0x28
 801524a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801524c:	2b00      	cmp	r3, #0
 801524e:	dd6d      	ble.n	801532c <__kernel_rem_pio2+0x270>
 8015250:	2200      	movs	r2, #0
 8015252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015254:	2080      	movs	r0, #128	; 0x80
 8015256:	3301      	adds	r3, #1
 8015258:	930b      	str	r3, [sp, #44]	; 0x2c
 801525a:	4b6c      	ldr	r3, [pc, #432]	; (801540c <__kernel_rem_pio2+0x350>)
 801525c:	0014      	movs	r4, r2
 801525e:	469c      	mov	ip, r3
 8015260:	2501      	movs	r5, #1
 8015262:	0440      	lsls	r0, r0, #17
 8015264:	9b04      	ldr	r3, [sp, #16]
 8015266:	4293      	cmp	r3, r2
 8015268:	dd00      	ble.n	801526c <__kernel_rem_pio2+0x1b0>
 801526a:	e098      	b.n	801539e <__kernel_rem_pio2+0x2e2>
 801526c:	9b02      	ldr	r3, [sp, #8]
 801526e:	2b00      	cmp	r3, #0
 8015270:	dd05      	ble.n	801527e <__kernel_rem_pio2+0x1c2>
 8015272:	2b01      	cmp	r3, #1
 8015274:	d100      	bne.n	8015278 <__kernel_rem_pio2+0x1bc>
 8015276:	e0a8      	b.n	80153ca <__kernel_rem_pio2+0x30e>
 8015278:	2b02      	cmp	r3, #2
 801527a:	d100      	bne.n	801527e <__kernel_rem_pio2+0x1c2>
 801527c:	e0b0      	b.n	80153e0 <__kernel_rem_pio2+0x324>
 801527e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015280:	2b02      	cmp	r3, #2
 8015282:	d153      	bne.n	801532c <__kernel_rem_pio2+0x270>
 8015284:	0032      	movs	r2, r6
 8015286:	003b      	movs	r3, r7
 8015288:	2000      	movs	r0, #0
 801528a:	4961      	ldr	r1, [pc, #388]	; (8015410 <__kernel_rem_pio2+0x354>)
 801528c:	f7ed fa9a 	bl	80027c4 <__aeabi_dsub>
 8015290:	0006      	movs	r6, r0
 8015292:	000f      	movs	r7, r1
 8015294:	2c00      	cmp	r4, #0
 8015296:	d049      	beq.n	801532c <__kernel_rem_pio2+0x270>
 8015298:	9a02      	ldr	r2, [sp, #8]
 801529a:	2000      	movs	r0, #0
 801529c:	495c      	ldr	r1, [pc, #368]	; (8015410 <__kernel_rem_pio2+0x354>)
 801529e:	f000 fd43 	bl	8015d28 <scalbn>
 80152a2:	0002      	movs	r2, r0
 80152a4:	000b      	movs	r3, r1
 80152a6:	0030      	movs	r0, r6
 80152a8:	0039      	movs	r1, r7
 80152aa:	f7ed fa8b 	bl	80027c4 <__aeabi_dsub>
 80152ae:	0006      	movs	r6, r0
 80152b0:	000f      	movs	r7, r1
 80152b2:	e03b      	b.n	801532c <__kernel_rem_pio2+0x270>
 80152b4:	2200      	movs	r2, #0
 80152b6:	4b57      	ldr	r3, [pc, #348]	; (8015414 <__kernel_rem_pio2+0x358>)
 80152b8:	0020      	movs	r0, r4
 80152ba:	0029      	movs	r1, r5
 80152bc:	f7ed f816 	bl	80022ec <__aeabi_dmul>
 80152c0:	f7ed fe30 	bl	8002f24 <__aeabi_d2iz>
 80152c4:	f7ed fe64 	bl	8002f90 <__aeabi_i2d>
 80152c8:	2200      	movs	r2, #0
 80152ca:	4b53      	ldr	r3, [pc, #332]	; (8015418 <__kernel_rem_pio2+0x35c>)
 80152cc:	0006      	movs	r6, r0
 80152ce:	000f      	movs	r7, r1
 80152d0:	f7ed f80c 	bl	80022ec <__aeabi_dmul>
 80152d4:	0002      	movs	r2, r0
 80152d6:	000b      	movs	r3, r1
 80152d8:	0020      	movs	r0, r4
 80152da:	0029      	movs	r1, r5
 80152dc:	f7ed fa72 	bl	80027c4 <__aeabi_dsub>
 80152e0:	f7ed fe20 	bl	8002f24 <__aeabi_d2iz>
 80152e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152e8:	c301      	stmia	r3!, {r0}
 80152ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80152ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ee:	0030      	movs	r0, r6
 80152f0:	3b01      	subs	r3, #1
 80152f2:	930a      	str	r3, [sp, #40]	; 0x28
 80152f4:	00db      	lsls	r3, r3, #3
 80152f6:	18d3      	adds	r3, r2, r3
 80152f8:	0039      	movs	r1, r7
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	f7ec f885 	bl	800140c <__aeabi_dadd>
 8015302:	0004      	movs	r4, r0
 8015304:	000d      	movs	r5, r1
 8015306:	e75d      	b.n	80151c4 <__kernel_rem_pio2+0x108>
 8015308:	9b02      	ldr	r3, [sp, #8]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d107      	bne.n	801531e <__kernel_rem_pio2+0x262>
 801530e:	9b04      	ldr	r3, [sp, #16]
 8015310:	aa12      	add	r2, sp, #72	; 0x48
 8015312:	3b01      	subs	r3, #1
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	5898      	ldr	r0, [r3, r2]
 8015318:	15c3      	asrs	r3, r0, #23
 801531a:	930a      	str	r3, [sp, #40]	; 0x28
 801531c:	e795      	b.n	801524a <__kernel_rem_pio2+0x18e>
 801531e:	2200      	movs	r2, #0
 8015320:	4b3e      	ldr	r3, [pc, #248]	; (801541c <__kernel_rem_pio2+0x360>)
 8015322:	f7eb f8a5 	bl	8000470 <__aeabi_dcmpge>
 8015326:	2800      	cmp	r0, #0
 8015328:	d136      	bne.n	8015398 <__kernel_rem_pio2+0x2dc>
 801532a:	900a      	str	r0, [sp, #40]	; 0x28
 801532c:	2200      	movs	r2, #0
 801532e:	2300      	movs	r3, #0
 8015330:	0030      	movs	r0, r6
 8015332:	0039      	movs	r1, r7
 8015334:	f7eb f878 	bl	8000428 <__aeabi_dcmpeq>
 8015338:	2800      	cmp	r0, #0
 801533a:	d100      	bne.n	801533e <__kernel_rem_pio2+0x282>
 801533c:	e0b9      	b.n	80154b2 <__kernel_rem_pio2+0x3f6>
 801533e:	2200      	movs	r2, #0
 8015340:	9b04      	ldr	r3, [sp, #16]
 8015342:	3b01      	subs	r3, #1
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	9908      	ldr	r1, [sp, #32]
 8015348:	428b      	cmp	r3, r1
 801534a:	da52      	bge.n	80153f2 <__kernel_rem_pio2+0x336>
 801534c:	2a00      	cmp	r2, #0
 801534e:	d100      	bne.n	8015352 <__kernel_rem_pio2+0x296>
 8015350:	e095      	b.n	801547e <__kernel_rem_pio2+0x3c2>
 8015352:	9b02      	ldr	r3, [sp, #8]
 8015354:	aa12      	add	r2, sp, #72	; 0x48
 8015356:	3b18      	subs	r3, #24
 8015358:	9302      	str	r3, [sp, #8]
 801535a:	9b00      	ldr	r3, [sp, #0]
 801535c:	009b      	lsls	r3, r3, #2
 801535e:	589b      	ldr	r3, [r3, r2]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d100      	bne.n	8015366 <__kernel_rem_pio2+0x2aa>
 8015364:	e0a1      	b.n	80154aa <__kernel_rem_pio2+0x3ee>
 8015366:	2000      	movs	r0, #0
 8015368:	9a02      	ldr	r2, [sp, #8]
 801536a:	4929      	ldr	r1, [pc, #164]	; (8015410 <__kernel_rem_pio2+0x354>)
 801536c:	f000 fcdc 	bl	8015d28 <scalbn>
 8015370:	0006      	movs	r6, r0
 8015372:	000f      	movs	r7, r1
 8015374:	9c00      	ldr	r4, [sp, #0]
 8015376:	2c00      	cmp	r4, #0
 8015378:	db00      	blt.n	801537c <__kernel_rem_pio2+0x2c0>
 801537a:	e0d9      	b.n	8015530 <__kernel_rem_pio2+0x474>
 801537c:	2600      	movs	r6, #0
 801537e:	9d00      	ldr	r5, [sp, #0]
 8015380:	2d00      	cmp	r5, #0
 8015382:	da00      	bge.n	8015386 <__kernel_rem_pio2+0x2ca>
 8015384:	e10c      	b.n	80155a0 <__kernel_rem_pio2+0x4e4>
 8015386:	ab76      	add	r3, sp, #472	; 0x1d8
 8015388:	00ef      	lsls	r7, r5, #3
 801538a:	2400      	movs	r4, #0
 801538c:	18ff      	adds	r7, r7, r3
 801538e:	2300      	movs	r3, #0
 8015390:	9302      	str	r3, [sp, #8]
 8015392:	9403      	str	r4, [sp, #12]
 8015394:	2400      	movs	r4, #0
 8015396:	e0f4      	b.n	8015582 <__kernel_rem_pio2+0x4c6>
 8015398:	2302      	movs	r3, #2
 801539a:	930a      	str	r3, [sp, #40]	; 0x28
 801539c:	e758      	b.n	8015250 <__kernel_rem_pio2+0x194>
 801539e:	9b00      	ldr	r3, [sp, #0]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2c00      	cmp	r4, #0
 80153a4:	d10b      	bne.n	80153be <__kernel_rem_pio2+0x302>
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d003      	beq.n	80153b2 <__kernel_rem_pio2+0x2f6>
 80153aa:	9c00      	ldr	r4, [sp, #0]
 80153ac:	1ac3      	subs	r3, r0, r3
 80153ae:	6023      	str	r3, [r4, #0]
 80153b0:	002b      	movs	r3, r5
 80153b2:	9c00      	ldr	r4, [sp, #0]
 80153b4:	3201      	adds	r2, #1
 80153b6:	3404      	adds	r4, #4
 80153b8:	9400      	str	r4, [sp, #0]
 80153ba:	001c      	movs	r4, r3
 80153bc:	e752      	b.n	8015264 <__kernel_rem_pio2+0x1a8>
 80153be:	4661      	mov	r1, ip
 80153c0:	1acb      	subs	r3, r1, r3
 80153c2:	9900      	ldr	r1, [sp, #0]
 80153c4:	600b      	str	r3, [r1, #0]
 80153c6:	0023      	movs	r3, r4
 80153c8:	e7f3      	b.n	80153b2 <__kernel_rem_pio2+0x2f6>
 80153ca:	9b04      	ldr	r3, [sp, #16]
 80153cc:	aa12      	add	r2, sp, #72	; 0x48
 80153ce:	3b01      	subs	r3, #1
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	589a      	ldr	r2, [r3, r2]
 80153d4:	9200      	str	r2, [sp, #0]
 80153d6:	0252      	lsls	r2, r2, #9
 80153d8:	0a52      	lsrs	r2, r2, #9
 80153da:	a912      	add	r1, sp, #72	; 0x48
 80153dc:	505a      	str	r2, [r3, r1]
 80153de:	e74e      	b.n	801527e <__kernel_rem_pio2+0x1c2>
 80153e0:	9b04      	ldr	r3, [sp, #16]
 80153e2:	aa12      	add	r2, sp, #72	; 0x48
 80153e4:	3b01      	subs	r3, #1
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	589a      	ldr	r2, [r3, r2]
 80153ea:	9200      	str	r2, [sp, #0]
 80153ec:	0292      	lsls	r2, r2, #10
 80153ee:	0a92      	lsrs	r2, r2, #10
 80153f0:	e7f3      	b.n	80153da <__kernel_rem_pio2+0x31e>
 80153f2:	0099      	lsls	r1, r3, #2
 80153f4:	a812      	add	r0, sp, #72	; 0x48
 80153f6:	5809      	ldr	r1, [r1, r0]
 80153f8:	3b01      	subs	r3, #1
 80153fa:	430a      	orrs	r2, r1
 80153fc:	e7a3      	b.n	8015346 <__kernel_rem_pio2+0x28a>
 80153fe:	46c0      	nop			; (mov r8, r8)
 8015400:	fffffd84 	.word	0xfffffd84
 8015404:	08018970 	.word	0x08018970
 8015408:	40200000 	.word	0x40200000
 801540c:	00ffffff 	.word	0x00ffffff
 8015410:	3ff00000 	.word	0x3ff00000
 8015414:	3e700000 	.word	0x3e700000
 8015418:	41700000 	.word	0x41700000
 801541c:	3fe00000 	.word	0x3fe00000
 8015420:	3301      	adds	r3, #1
 8015422:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015424:	009a      	lsls	r2, r3, #2
 8015426:	4252      	negs	r2, r2
 8015428:	588a      	ldr	r2, [r1, r2]
 801542a:	2a00      	cmp	r2, #0
 801542c:	d0f8      	beq.n	8015420 <__kernel_rem_pio2+0x364>
 801542e:	9a04      	ldr	r2, [sp, #16]
 8015430:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015432:	1c57      	adds	r7, r2, #1
 8015434:	1854      	adds	r4, r2, r1
 8015436:	00e4      	lsls	r4, r4, #3
 8015438:	aa26      	add	r2, sp, #152	; 0x98
 801543a:	1914      	adds	r4, r2, r4
 801543c:	9a04      	ldr	r2, [sp, #16]
 801543e:	18d3      	adds	r3, r2, r3
 8015440:	9304      	str	r3, [sp, #16]
 8015442:	9b04      	ldr	r3, [sp, #16]
 8015444:	42bb      	cmp	r3, r7
 8015446:	da00      	bge.n	801544a <__kernel_rem_pio2+0x38e>
 8015448:	e6b0      	b.n	80151ac <__kernel_rem_pio2+0xf0>
 801544a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801544c:	00bb      	lsls	r3, r7, #2
 801544e:	58d0      	ldr	r0, [r2, r3]
 8015450:	f7ed fd9e 	bl	8002f90 <__aeabi_i2d>
 8015454:	2200      	movs	r2, #0
 8015456:	2300      	movs	r3, #0
 8015458:	0026      	movs	r6, r4
 801545a:	2500      	movs	r5, #0
 801545c:	6020      	str	r0, [r4, #0]
 801545e:	6061      	str	r1, [r4, #4]
 8015460:	9200      	str	r2, [sp, #0]
 8015462:	9301      	str	r3, [sp, #4]
 8015464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015466:	429d      	cmp	r5, r3
 8015468:	dd0b      	ble.n	8015482 <__kernel_rem_pio2+0x3c6>
 801546a:	00fb      	lsls	r3, r7, #3
 801546c:	aa76      	add	r2, sp, #472	; 0x1d8
 801546e:	18d3      	adds	r3, r2, r3
 8015470:	3701      	adds	r7, #1
 8015472:	9900      	ldr	r1, [sp, #0]
 8015474:	9a01      	ldr	r2, [sp, #4]
 8015476:	3408      	adds	r4, #8
 8015478:	6019      	str	r1, [r3, #0]
 801547a:	605a      	str	r2, [r3, #4]
 801547c:	e7e1      	b.n	8015442 <__kernel_rem_pio2+0x386>
 801547e:	2301      	movs	r3, #1
 8015480:	e7cf      	b.n	8015422 <__kernel_rem_pio2+0x366>
 8015482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015484:	00e9      	lsls	r1, r5, #3
 8015486:	1859      	adds	r1, r3, r1
 8015488:	6808      	ldr	r0, [r1, #0]
 801548a:	6849      	ldr	r1, [r1, #4]
 801548c:	6832      	ldr	r2, [r6, #0]
 801548e:	6873      	ldr	r3, [r6, #4]
 8015490:	f7ec ff2c 	bl	80022ec <__aeabi_dmul>
 8015494:	0002      	movs	r2, r0
 8015496:	000b      	movs	r3, r1
 8015498:	9800      	ldr	r0, [sp, #0]
 801549a:	9901      	ldr	r1, [sp, #4]
 801549c:	f7eb ffb6 	bl	800140c <__aeabi_dadd>
 80154a0:	3501      	adds	r5, #1
 80154a2:	9000      	str	r0, [sp, #0]
 80154a4:	9101      	str	r1, [sp, #4]
 80154a6:	3e08      	subs	r6, #8
 80154a8:	e7dc      	b.n	8015464 <__kernel_rem_pio2+0x3a8>
 80154aa:	9b00      	ldr	r3, [sp, #0]
 80154ac:	3b01      	subs	r3, #1
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	e74f      	b.n	8015352 <__kernel_rem_pio2+0x296>
 80154b2:	9b02      	ldr	r3, [sp, #8]
 80154b4:	0030      	movs	r0, r6
 80154b6:	425a      	negs	r2, r3
 80154b8:	0039      	movs	r1, r7
 80154ba:	f000 fc35 	bl	8015d28 <scalbn>
 80154be:	2200      	movs	r2, #0
 80154c0:	4bb6      	ldr	r3, [pc, #728]	; (801579c <__kernel_rem_pio2+0x6e0>)
 80154c2:	0004      	movs	r4, r0
 80154c4:	000d      	movs	r5, r1
 80154c6:	f7ea ffd3 	bl	8000470 <__aeabi_dcmpge>
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d025      	beq.n	801551a <__kernel_rem_pio2+0x45e>
 80154ce:	2200      	movs	r2, #0
 80154d0:	4bb3      	ldr	r3, [pc, #716]	; (80157a0 <__kernel_rem_pio2+0x6e4>)
 80154d2:	0020      	movs	r0, r4
 80154d4:	0029      	movs	r1, r5
 80154d6:	f7ec ff09 	bl	80022ec <__aeabi_dmul>
 80154da:	f7ed fd23 	bl	8002f24 <__aeabi_d2iz>
 80154de:	9b04      	ldr	r3, [sp, #16]
 80154e0:	0006      	movs	r6, r0
 80154e2:	009f      	lsls	r7, r3, #2
 80154e4:	f7ed fd54 	bl	8002f90 <__aeabi_i2d>
 80154e8:	2200      	movs	r2, #0
 80154ea:	4bac      	ldr	r3, [pc, #688]	; (801579c <__kernel_rem_pio2+0x6e0>)
 80154ec:	f7ec fefe 	bl	80022ec <__aeabi_dmul>
 80154f0:	0002      	movs	r2, r0
 80154f2:	000b      	movs	r3, r1
 80154f4:	0020      	movs	r0, r4
 80154f6:	0029      	movs	r1, r5
 80154f8:	f7ed f964 	bl	80027c4 <__aeabi_dsub>
 80154fc:	f7ed fd12 	bl	8002f24 <__aeabi_d2iz>
 8015500:	ab12      	add	r3, sp, #72	; 0x48
 8015502:	51d8      	str	r0, [r3, r7]
 8015504:	9b04      	ldr	r3, [sp, #16]
 8015506:	aa12      	add	r2, sp, #72	; 0x48
 8015508:	3301      	adds	r3, #1
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	9b02      	ldr	r3, [sp, #8]
 801550e:	3318      	adds	r3, #24
 8015510:	9302      	str	r3, [sp, #8]
 8015512:	9b00      	ldr	r3, [sp, #0]
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	509e      	str	r6, [r3, r2]
 8015518:	e725      	b.n	8015366 <__kernel_rem_pio2+0x2aa>
 801551a:	9b04      	ldr	r3, [sp, #16]
 801551c:	0020      	movs	r0, r4
 801551e:	0029      	movs	r1, r5
 8015520:	009e      	lsls	r6, r3, #2
 8015522:	f7ed fcff 	bl	8002f24 <__aeabi_d2iz>
 8015526:	ab12      	add	r3, sp, #72	; 0x48
 8015528:	5198      	str	r0, [r3, r6]
 801552a:	9b04      	ldr	r3, [sp, #16]
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	e71a      	b.n	8015366 <__kernel_rem_pio2+0x2aa>
 8015530:	00e5      	lsls	r5, r4, #3
 8015532:	ab76      	add	r3, sp, #472	; 0x1d8
 8015534:	aa12      	add	r2, sp, #72	; 0x48
 8015536:	195d      	adds	r5, r3, r5
 8015538:	00a3      	lsls	r3, r4, #2
 801553a:	5898      	ldr	r0, [r3, r2]
 801553c:	f7ed fd28 	bl	8002f90 <__aeabi_i2d>
 8015540:	0032      	movs	r2, r6
 8015542:	003b      	movs	r3, r7
 8015544:	f7ec fed2 	bl	80022ec <__aeabi_dmul>
 8015548:	2200      	movs	r2, #0
 801554a:	6028      	str	r0, [r5, #0]
 801554c:	6069      	str	r1, [r5, #4]
 801554e:	4b94      	ldr	r3, [pc, #592]	; (80157a0 <__kernel_rem_pio2+0x6e4>)
 8015550:	0030      	movs	r0, r6
 8015552:	0039      	movs	r1, r7
 8015554:	f7ec feca 	bl	80022ec <__aeabi_dmul>
 8015558:	3c01      	subs	r4, #1
 801555a:	0006      	movs	r6, r0
 801555c:	000f      	movs	r7, r1
 801555e:	e70a      	b.n	8015376 <__kernel_rem_pio2+0x2ba>
 8015560:	4b90      	ldr	r3, [pc, #576]	; (80157a4 <__kernel_rem_pio2+0x6e8>)
 8015562:	00e1      	lsls	r1, r4, #3
 8015564:	1859      	adds	r1, r3, r1
 8015566:	6808      	ldr	r0, [r1, #0]
 8015568:	6849      	ldr	r1, [r1, #4]
 801556a:	cf0c      	ldmia	r7!, {r2, r3}
 801556c:	f7ec febe 	bl	80022ec <__aeabi_dmul>
 8015570:	0002      	movs	r2, r0
 8015572:	000b      	movs	r3, r1
 8015574:	9802      	ldr	r0, [sp, #8]
 8015576:	9903      	ldr	r1, [sp, #12]
 8015578:	f7eb ff48 	bl	800140c <__aeabi_dadd>
 801557c:	9002      	str	r0, [sp, #8]
 801557e:	9103      	str	r1, [sp, #12]
 8015580:	3401      	adds	r4, #1
 8015582:	9b08      	ldr	r3, [sp, #32]
 8015584:	429c      	cmp	r4, r3
 8015586:	dc01      	bgt.n	801558c <__kernel_rem_pio2+0x4d0>
 8015588:	42a6      	cmp	r6, r4
 801558a:	dae9      	bge.n	8015560 <__kernel_rem_pio2+0x4a4>
 801558c:	00f3      	lsls	r3, r6, #3
 801558e:	aa4e      	add	r2, sp, #312	; 0x138
 8015590:	18d3      	adds	r3, r2, r3
 8015592:	3d01      	subs	r5, #1
 8015594:	9902      	ldr	r1, [sp, #8]
 8015596:	9a03      	ldr	r2, [sp, #12]
 8015598:	3601      	adds	r6, #1
 801559a:	6019      	str	r1, [r3, #0]
 801559c:	605a      	str	r2, [r3, #4]
 801559e:	e6ef      	b.n	8015380 <__kernel_rem_pio2+0x2c4>
 80155a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80155a2:	2b02      	cmp	r3, #2
 80155a4:	dc0b      	bgt.n	80155be <__kernel_rem_pio2+0x502>
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	dd00      	ble.n	80155ac <__kernel_rem_pio2+0x4f0>
 80155aa:	e08a      	b.n	80156c2 <__kernel_rem_pio2+0x606>
 80155ac:	d055      	beq.n	801565a <__kernel_rem_pio2+0x59e>
 80155ae:	2007      	movs	r0, #7
 80155b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155b2:	4003      	ands	r3, r0
 80155b4:	0018      	movs	r0, r3
 80155b6:	239f      	movs	r3, #159	; 0x9f
 80155b8:	009b      	lsls	r3, r3, #2
 80155ba:	449d      	add	sp, r3
 80155bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80155c0:	2b03      	cmp	r3, #3
 80155c2:	d1f4      	bne.n	80155ae <__kernel_rem_pio2+0x4f2>
 80155c4:	9b00      	ldr	r3, [sp, #0]
 80155c6:	00dc      	lsls	r4, r3, #3
 80155c8:	ab4e      	add	r3, sp, #312	; 0x138
 80155ca:	191c      	adds	r4, r3, r4
 80155cc:	0025      	movs	r5, r4
 80155ce:	9b00      	ldr	r3, [sp, #0]
 80155d0:	9302      	str	r3, [sp, #8]
 80155d2:	9b02      	ldr	r3, [sp, #8]
 80155d4:	3d08      	subs	r5, #8
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dd00      	ble.n	80155dc <__kernel_rem_pio2+0x520>
 80155da:	e083      	b.n	80156e4 <__kernel_rem_pio2+0x628>
 80155dc:	9d00      	ldr	r5, [sp, #0]
 80155de:	3c08      	subs	r4, #8
 80155e0:	2d01      	cmp	r5, #1
 80155e2:	dd00      	ble.n	80155e6 <__kernel_rem_pio2+0x52a>
 80155e4:	e0a0      	b.n	8015728 <__kernel_rem_pio2+0x66c>
 80155e6:	2400      	movs	r4, #0
 80155e8:	0021      	movs	r1, r4
 80155ea:	9b00      	ldr	r3, [sp, #0]
 80155ec:	2b01      	cmp	r3, #1
 80155ee:	dd00      	ble.n	80155f2 <__kernel_rem_pio2+0x536>
 80155f0:	e0b8      	b.n	8015764 <__kernel_rem_pio2+0x6a8>
 80155f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155f4:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 80155f6:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80155f8:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80155fa:	9851      	ldr	r0, [sp, #324]	; 0x144
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d000      	beq.n	8015602 <__kernel_rem_pio2+0x546>
 8015600:	e0be      	b.n	8015780 <__kernel_rem_pio2+0x6c4>
 8015602:	0033      	movs	r3, r6
 8015604:	003a      	movs	r2, r7
 8015606:	9e07      	ldr	r6, [sp, #28]
 8015608:	6032      	str	r2, [r6, #0]
 801560a:	6073      	str	r3, [r6, #4]
 801560c:	002a      	movs	r2, r5
 801560e:	0003      	movs	r3, r0
 8015610:	60b2      	str	r2, [r6, #8]
 8015612:	60f3      	str	r3, [r6, #12]
 8015614:	0022      	movs	r2, r4
 8015616:	000b      	movs	r3, r1
 8015618:	6132      	str	r2, [r6, #16]
 801561a:	6173      	str	r3, [r6, #20]
 801561c:	e7c7      	b.n	80155ae <__kernel_rem_pio2+0x4f2>
 801561e:	9b00      	ldr	r3, [sp, #0]
 8015620:	aa4e      	add	r2, sp, #312	; 0x138
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	18d3      	adds	r3, r2, r3
 8015626:	0028      	movs	r0, r5
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	0021      	movs	r1, r4
 801562e:	f7eb feed 	bl	800140c <__aeabi_dadd>
 8015632:	0005      	movs	r5, r0
 8015634:	000c      	movs	r4, r1
 8015636:	9b00      	ldr	r3, [sp, #0]
 8015638:	3b01      	subs	r3, #1
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	9b00      	ldr	r3, [sp, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	daed      	bge.n	801561e <__kernel_rem_pio2+0x562>
 8015642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015644:	2b00      	cmp	r3, #0
 8015646:	d002      	beq.n	801564e <__kernel_rem_pio2+0x592>
 8015648:	2380      	movs	r3, #128	; 0x80
 801564a:	061b      	lsls	r3, r3, #24
 801564c:	18e4      	adds	r4, r4, r3
 801564e:	002a      	movs	r2, r5
 8015650:	0023      	movs	r3, r4
 8015652:	9907      	ldr	r1, [sp, #28]
 8015654:	600a      	str	r2, [r1, #0]
 8015656:	604b      	str	r3, [r1, #4]
 8015658:	e7a9      	b.n	80155ae <__kernel_rem_pio2+0x4f2>
 801565a:	9da4      	ldr	r5, [sp, #656]	; 0x290
 801565c:	002c      	movs	r4, r5
 801565e:	e7ed      	b.n	801563c <__kernel_rem_pio2+0x580>
 8015660:	00e3      	lsls	r3, r4, #3
 8015662:	aa4e      	add	r2, sp, #312	; 0x138
 8015664:	18d3      	adds	r3, r2, r3
 8015666:	0030      	movs	r0, r6
 8015668:	681a      	ldr	r2, [r3, #0]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	0029      	movs	r1, r5
 801566e:	f7eb fecd 	bl	800140c <__aeabi_dadd>
 8015672:	0006      	movs	r6, r0
 8015674:	000d      	movs	r5, r1
 8015676:	3c01      	subs	r4, #1
 8015678:	2c00      	cmp	r4, #0
 801567a:	daf1      	bge.n	8015660 <__kernel_rem_pio2+0x5a4>
 801567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801567e:	0029      	movs	r1, r5
 8015680:	2b00      	cmp	r3, #0
 8015682:	d002      	beq.n	801568a <__kernel_rem_pio2+0x5ce>
 8015684:	2380      	movs	r3, #128	; 0x80
 8015686:	061b      	lsls	r3, r3, #24
 8015688:	18e9      	adds	r1, r5, r3
 801568a:	0032      	movs	r2, r6
 801568c:	000b      	movs	r3, r1
 801568e:	9907      	ldr	r1, [sp, #28]
 8015690:	2401      	movs	r4, #1
 8015692:	600a      	str	r2, [r1, #0]
 8015694:	604b      	str	r3, [r1, #4]
 8015696:	984e      	ldr	r0, [sp, #312]	; 0x138
 8015698:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801569a:	002b      	movs	r3, r5
 801569c:	f7ed f892 	bl	80027c4 <__aeabi_dsub>
 80156a0:	0006      	movs	r6, r0
 80156a2:	000d      	movs	r5, r1
 80156a4:	9b00      	ldr	r3, [sp, #0]
 80156a6:	42a3      	cmp	r3, r4
 80156a8:	da0f      	bge.n	80156ca <__kernel_rem_pio2+0x60e>
 80156aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d002      	beq.n	80156b6 <__kernel_rem_pio2+0x5fa>
 80156b0:	2380      	movs	r3, #128	; 0x80
 80156b2:	061b      	lsls	r3, r3, #24
 80156b4:	18ed      	adds	r5, r5, r3
 80156b6:	0032      	movs	r2, r6
 80156b8:	002b      	movs	r3, r5
 80156ba:	9907      	ldr	r1, [sp, #28]
 80156bc:	608a      	str	r2, [r1, #8]
 80156be:	60cb      	str	r3, [r1, #12]
 80156c0:	e775      	b.n	80155ae <__kernel_rem_pio2+0x4f2>
 80156c2:	2600      	movs	r6, #0
 80156c4:	9c00      	ldr	r4, [sp, #0]
 80156c6:	0035      	movs	r5, r6
 80156c8:	e7d6      	b.n	8015678 <__kernel_rem_pio2+0x5bc>
 80156ca:	00e3      	lsls	r3, r4, #3
 80156cc:	aa4e      	add	r2, sp, #312	; 0x138
 80156ce:	18d3      	adds	r3, r2, r3
 80156d0:	0030      	movs	r0, r6
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	0029      	movs	r1, r5
 80156d8:	f7eb fe98 	bl	800140c <__aeabi_dadd>
 80156dc:	3401      	adds	r4, #1
 80156de:	0006      	movs	r6, r0
 80156e0:	000d      	movs	r5, r1
 80156e2:	e7df      	b.n	80156a4 <__kernel_rem_pio2+0x5e8>
 80156e4:	9b02      	ldr	r3, [sp, #8]
 80156e6:	68ae      	ldr	r6, [r5, #8]
 80156e8:	68ef      	ldr	r7, [r5, #12]
 80156ea:	3b01      	subs	r3, #1
 80156ec:	9302      	str	r3, [sp, #8]
 80156ee:	682a      	ldr	r2, [r5, #0]
 80156f0:	686b      	ldr	r3, [r5, #4]
 80156f2:	9204      	str	r2, [sp, #16]
 80156f4:	9305      	str	r3, [sp, #20]
 80156f6:	9804      	ldr	r0, [sp, #16]
 80156f8:	9905      	ldr	r1, [sp, #20]
 80156fa:	0032      	movs	r2, r6
 80156fc:	003b      	movs	r3, r7
 80156fe:	f7eb fe85 	bl	800140c <__aeabi_dadd>
 8015702:	0002      	movs	r2, r0
 8015704:	000b      	movs	r3, r1
 8015706:	9008      	str	r0, [sp, #32]
 8015708:	9109      	str	r1, [sp, #36]	; 0x24
 801570a:	9804      	ldr	r0, [sp, #16]
 801570c:	9905      	ldr	r1, [sp, #20]
 801570e:	f7ed f859 	bl	80027c4 <__aeabi_dsub>
 8015712:	0032      	movs	r2, r6
 8015714:	003b      	movs	r3, r7
 8015716:	f7eb fe79 	bl	800140c <__aeabi_dadd>
 801571a:	9a08      	ldr	r2, [sp, #32]
 801571c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801571e:	60a8      	str	r0, [r5, #8]
 8015720:	60e9      	str	r1, [r5, #12]
 8015722:	602a      	str	r2, [r5, #0]
 8015724:	606b      	str	r3, [r5, #4]
 8015726:	e754      	b.n	80155d2 <__kernel_rem_pio2+0x516>
 8015728:	6826      	ldr	r6, [r4, #0]
 801572a:	6867      	ldr	r7, [r4, #4]
 801572c:	68a2      	ldr	r2, [r4, #8]
 801572e:	68e3      	ldr	r3, [r4, #12]
 8015730:	0030      	movs	r0, r6
 8015732:	0039      	movs	r1, r7
 8015734:	9202      	str	r2, [sp, #8]
 8015736:	9303      	str	r3, [sp, #12]
 8015738:	f7eb fe68 	bl	800140c <__aeabi_dadd>
 801573c:	0002      	movs	r2, r0
 801573e:	000b      	movs	r3, r1
 8015740:	9004      	str	r0, [sp, #16]
 8015742:	9105      	str	r1, [sp, #20]
 8015744:	0030      	movs	r0, r6
 8015746:	0039      	movs	r1, r7
 8015748:	f7ed f83c 	bl	80027c4 <__aeabi_dsub>
 801574c:	9a02      	ldr	r2, [sp, #8]
 801574e:	9b03      	ldr	r3, [sp, #12]
 8015750:	f7eb fe5c 	bl	800140c <__aeabi_dadd>
 8015754:	9a04      	ldr	r2, [sp, #16]
 8015756:	9b05      	ldr	r3, [sp, #20]
 8015758:	60a0      	str	r0, [r4, #8]
 801575a:	60e1      	str	r1, [r4, #12]
 801575c:	6022      	str	r2, [r4, #0]
 801575e:	6063      	str	r3, [r4, #4]
 8015760:	3d01      	subs	r5, #1
 8015762:	e73c      	b.n	80155de <__kernel_rem_pio2+0x522>
 8015764:	9b00      	ldr	r3, [sp, #0]
 8015766:	aa4e      	add	r2, sp, #312	; 0x138
 8015768:	00db      	lsls	r3, r3, #3
 801576a:	18d3      	adds	r3, r2, r3
 801576c:	0020      	movs	r0, r4
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	f7eb fe4b 	bl	800140c <__aeabi_dadd>
 8015776:	9b00      	ldr	r3, [sp, #0]
 8015778:	0004      	movs	r4, r0
 801577a:	3b01      	subs	r3, #1
 801577c:	9300      	str	r3, [sp, #0]
 801577e:	e734      	b.n	80155ea <__kernel_rem_pio2+0x52e>
 8015780:	9b07      	ldr	r3, [sp, #28]
 8015782:	9a07      	ldr	r2, [sp, #28]
 8015784:	601f      	str	r7, [r3, #0]
 8015786:	2380      	movs	r3, #128	; 0x80
 8015788:	061b      	lsls	r3, r3, #24
 801578a:	18f6      	adds	r6, r6, r3
 801578c:	18c0      	adds	r0, r0, r3
 801578e:	18c9      	adds	r1, r1, r3
 8015790:	6056      	str	r6, [r2, #4]
 8015792:	6095      	str	r5, [r2, #8]
 8015794:	60d0      	str	r0, [r2, #12]
 8015796:	6114      	str	r4, [r2, #16]
 8015798:	6151      	str	r1, [r2, #20]
 801579a:	e708      	b.n	80155ae <__kernel_rem_pio2+0x4f2>
 801579c:	41700000 	.word	0x41700000
 80157a0:	3e700000 	.word	0x3e700000
 80157a4:	08018930 	.word	0x08018930

080157a8 <__kernel_sin>:
 80157a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157aa:	b089      	sub	sp, #36	; 0x24
 80157ac:	9202      	str	r2, [sp, #8]
 80157ae:	9303      	str	r3, [sp, #12]
 80157b0:	22f9      	movs	r2, #249	; 0xf9
 80157b2:	004b      	lsls	r3, r1, #1
 80157b4:	0007      	movs	r7, r0
 80157b6:	000e      	movs	r6, r1
 80157b8:	085b      	lsrs	r3, r3, #1
 80157ba:	0592      	lsls	r2, r2, #22
 80157bc:	4293      	cmp	r3, r2
 80157be:	da03      	bge.n	80157c8 <__kernel_sin+0x20>
 80157c0:	f7ed fbb0 	bl	8002f24 <__aeabi_d2iz>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	d04c      	beq.n	8015862 <__kernel_sin+0xba>
 80157c8:	003a      	movs	r2, r7
 80157ca:	0033      	movs	r3, r6
 80157cc:	0038      	movs	r0, r7
 80157ce:	0031      	movs	r1, r6
 80157d0:	f7ec fd8c 	bl	80022ec <__aeabi_dmul>
 80157d4:	0004      	movs	r4, r0
 80157d6:	000d      	movs	r5, r1
 80157d8:	0002      	movs	r2, r0
 80157da:	000b      	movs	r3, r1
 80157dc:	0038      	movs	r0, r7
 80157de:	0031      	movs	r1, r6
 80157e0:	f7ec fd84 	bl	80022ec <__aeabi_dmul>
 80157e4:	4a39      	ldr	r2, [pc, #228]	; (80158cc <__kernel_sin+0x124>)
 80157e6:	9000      	str	r0, [sp, #0]
 80157e8:	9101      	str	r1, [sp, #4]
 80157ea:	4b39      	ldr	r3, [pc, #228]	; (80158d0 <__kernel_sin+0x128>)
 80157ec:	0020      	movs	r0, r4
 80157ee:	0029      	movs	r1, r5
 80157f0:	f7ec fd7c 	bl	80022ec <__aeabi_dmul>
 80157f4:	4a37      	ldr	r2, [pc, #220]	; (80158d4 <__kernel_sin+0x12c>)
 80157f6:	4b38      	ldr	r3, [pc, #224]	; (80158d8 <__kernel_sin+0x130>)
 80157f8:	f7ec ffe4 	bl	80027c4 <__aeabi_dsub>
 80157fc:	0022      	movs	r2, r4
 80157fe:	002b      	movs	r3, r5
 8015800:	f7ec fd74 	bl	80022ec <__aeabi_dmul>
 8015804:	4a35      	ldr	r2, [pc, #212]	; (80158dc <__kernel_sin+0x134>)
 8015806:	4b36      	ldr	r3, [pc, #216]	; (80158e0 <__kernel_sin+0x138>)
 8015808:	f7eb fe00 	bl	800140c <__aeabi_dadd>
 801580c:	0022      	movs	r2, r4
 801580e:	002b      	movs	r3, r5
 8015810:	f7ec fd6c 	bl	80022ec <__aeabi_dmul>
 8015814:	4a33      	ldr	r2, [pc, #204]	; (80158e4 <__kernel_sin+0x13c>)
 8015816:	4b34      	ldr	r3, [pc, #208]	; (80158e8 <__kernel_sin+0x140>)
 8015818:	f7ec ffd4 	bl	80027c4 <__aeabi_dsub>
 801581c:	0022      	movs	r2, r4
 801581e:	002b      	movs	r3, r5
 8015820:	f7ec fd64 	bl	80022ec <__aeabi_dmul>
 8015824:	4b31      	ldr	r3, [pc, #196]	; (80158ec <__kernel_sin+0x144>)
 8015826:	4a32      	ldr	r2, [pc, #200]	; (80158f0 <__kernel_sin+0x148>)
 8015828:	f7eb fdf0 	bl	800140c <__aeabi_dadd>
 801582c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801582e:	9004      	str	r0, [sp, #16]
 8015830:	9105      	str	r1, [sp, #20]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d119      	bne.n	801586a <__kernel_sin+0xc2>
 8015836:	0002      	movs	r2, r0
 8015838:	000b      	movs	r3, r1
 801583a:	0020      	movs	r0, r4
 801583c:	0029      	movs	r1, r5
 801583e:	f7ec fd55 	bl	80022ec <__aeabi_dmul>
 8015842:	4a2c      	ldr	r2, [pc, #176]	; (80158f4 <__kernel_sin+0x14c>)
 8015844:	4b2c      	ldr	r3, [pc, #176]	; (80158f8 <__kernel_sin+0x150>)
 8015846:	f7ec ffbd 	bl	80027c4 <__aeabi_dsub>
 801584a:	9a00      	ldr	r2, [sp, #0]
 801584c:	9b01      	ldr	r3, [sp, #4]
 801584e:	f7ec fd4d 	bl	80022ec <__aeabi_dmul>
 8015852:	0002      	movs	r2, r0
 8015854:	000b      	movs	r3, r1
 8015856:	0038      	movs	r0, r7
 8015858:	0031      	movs	r1, r6
 801585a:	f7eb fdd7 	bl	800140c <__aeabi_dadd>
 801585e:	0007      	movs	r7, r0
 8015860:	000e      	movs	r6, r1
 8015862:	0038      	movs	r0, r7
 8015864:	0031      	movs	r1, r6
 8015866:	b009      	add	sp, #36	; 0x24
 8015868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801586a:	2200      	movs	r2, #0
 801586c:	9802      	ldr	r0, [sp, #8]
 801586e:	9903      	ldr	r1, [sp, #12]
 8015870:	4b22      	ldr	r3, [pc, #136]	; (80158fc <__kernel_sin+0x154>)
 8015872:	f7ec fd3b 	bl	80022ec <__aeabi_dmul>
 8015876:	9a04      	ldr	r2, [sp, #16]
 8015878:	9b05      	ldr	r3, [sp, #20]
 801587a:	9006      	str	r0, [sp, #24]
 801587c:	9107      	str	r1, [sp, #28]
 801587e:	9800      	ldr	r0, [sp, #0]
 8015880:	9901      	ldr	r1, [sp, #4]
 8015882:	f7ec fd33 	bl	80022ec <__aeabi_dmul>
 8015886:	0002      	movs	r2, r0
 8015888:	000b      	movs	r3, r1
 801588a:	9806      	ldr	r0, [sp, #24]
 801588c:	9907      	ldr	r1, [sp, #28]
 801588e:	f7ec ff99 	bl	80027c4 <__aeabi_dsub>
 8015892:	0022      	movs	r2, r4
 8015894:	002b      	movs	r3, r5
 8015896:	f7ec fd29 	bl	80022ec <__aeabi_dmul>
 801589a:	9a02      	ldr	r2, [sp, #8]
 801589c:	9b03      	ldr	r3, [sp, #12]
 801589e:	f7ec ff91 	bl	80027c4 <__aeabi_dsub>
 80158a2:	4a14      	ldr	r2, [pc, #80]	; (80158f4 <__kernel_sin+0x14c>)
 80158a4:	0004      	movs	r4, r0
 80158a6:	000d      	movs	r5, r1
 80158a8:	9800      	ldr	r0, [sp, #0]
 80158aa:	9901      	ldr	r1, [sp, #4]
 80158ac:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <__kernel_sin+0x150>)
 80158ae:	f7ec fd1d 	bl	80022ec <__aeabi_dmul>
 80158b2:	0002      	movs	r2, r0
 80158b4:	000b      	movs	r3, r1
 80158b6:	0020      	movs	r0, r4
 80158b8:	0029      	movs	r1, r5
 80158ba:	f7eb fda7 	bl	800140c <__aeabi_dadd>
 80158be:	0002      	movs	r2, r0
 80158c0:	000b      	movs	r3, r1
 80158c2:	0038      	movs	r0, r7
 80158c4:	0031      	movs	r1, r6
 80158c6:	f7ec ff7d 	bl	80027c4 <__aeabi_dsub>
 80158ca:	e7c8      	b.n	801585e <__kernel_sin+0xb6>
 80158cc:	5acfd57c 	.word	0x5acfd57c
 80158d0:	3de5d93a 	.word	0x3de5d93a
 80158d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80158d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80158dc:	57b1fe7d 	.word	0x57b1fe7d
 80158e0:	3ec71de3 	.word	0x3ec71de3
 80158e4:	19c161d5 	.word	0x19c161d5
 80158e8:	3f2a01a0 	.word	0x3f2a01a0
 80158ec:	3f811111 	.word	0x3f811111
 80158f0:	1110f8a6 	.word	0x1110f8a6
 80158f4:	55555549 	.word	0x55555549
 80158f8:	3fc55555 	.word	0x3fc55555
 80158fc:	3fe00000 	.word	0x3fe00000

08015900 <atan>:
 8015900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015902:	4b98      	ldr	r3, [pc, #608]	; (8015b64 <atan+0x264>)
 8015904:	b085      	sub	sp, #20
 8015906:	004e      	lsls	r6, r1, #1
 8015908:	0004      	movs	r4, r0
 801590a:	000d      	movs	r5, r1
 801590c:	9103      	str	r1, [sp, #12]
 801590e:	0876      	lsrs	r6, r6, #1
 8015910:	429e      	cmp	r6, r3
 8015912:	dd18      	ble.n	8015946 <atan+0x46>
 8015914:	4b94      	ldr	r3, [pc, #592]	; (8015b68 <atan+0x268>)
 8015916:	429e      	cmp	r6, r3
 8015918:	dc02      	bgt.n	8015920 <atan+0x20>
 801591a:	d10a      	bne.n	8015932 <atan+0x32>
 801591c:	2800      	cmp	r0, #0
 801591e:	d008      	beq.n	8015932 <atan+0x32>
 8015920:	0022      	movs	r2, r4
 8015922:	002b      	movs	r3, r5
 8015924:	0020      	movs	r0, r4
 8015926:	0029      	movs	r1, r5
 8015928:	f7eb fd70 	bl	800140c <__aeabi_dadd>
 801592c:	0004      	movs	r4, r0
 801592e:	000d      	movs	r5, r1
 8015930:	e005      	b.n	801593e <atan+0x3e>
 8015932:	9b03      	ldr	r3, [sp, #12]
 8015934:	4c8d      	ldr	r4, [pc, #564]	; (8015b6c <atan+0x26c>)
 8015936:	2b00      	cmp	r3, #0
 8015938:	dd00      	ble.n	801593c <atan+0x3c>
 801593a:	e110      	b.n	8015b5e <atan+0x25e>
 801593c:	4d8c      	ldr	r5, [pc, #560]	; (8015b70 <atan+0x270>)
 801593e:	0020      	movs	r0, r4
 8015940:	0029      	movs	r1, r5
 8015942:	b005      	add	sp, #20
 8015944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015946:	4b8b      	ldr	r3, [pc, #556]	; (8015b74 <atan+0x274>)
 8015948:	429e      	cmp	r6, r3
 801594a:	dc0f      	bgt.n	801596c <atan+0x6c>
 801594c:	4b8a      	ldr	r3, [pc, #552]	; (8015b78 <atan+0x278>)
 801594e:	429e      	cmp	r6, r3
 8015950:	dc09      	bgt.n	8015966 <atan+0x66>
 8015952:	4a8a      	ldr	r2, [pc, #552]	; (8015b7c <atan+0x27c>)
 8015954:	4b8a      	ldr	r3, [pc, #552]	; (8015b80 <atan+0x280>)
 8015956:	f7eb fd59 	bl	800140c <__aeabi_dadd>
 801595a:	2200      	movs	r2, #0
 801595c:	4b89      	ldr	r3, [pc, #548]	; (8015b84 <atan+0x284>)
 801595e:	f7ea fd7d 	bl	800045c <__aeabi_dcmpgt>
 8015962:	2800      	cmp	r0, #0
 8015964:	d1eb      	bne.n	801593e <atan+0x3e>
 8015966:	2301      	movs	r3, #1
 8015968:	425b      	negs	r3, r3
 801596a:	e025      	b.n	80159b8 <atan+0xb8>
 801596c:	f000 f948 	bl	8015c00 <fabs>
 8015970:	4b85      	ldr	r3, [pc, #532]	; (8015b88 <atan+0x288>)
 8015972:	0004      	movs	r4, r0
 8015974:	000d      	movs	r5, r1
 8015976:	429e      	cmp	r6, r3
 8015978:	dd00      	ble.n	801597c <atan+0x7c>
 801597a:	e0aa      	b.n	8015ad2 <atan+0x1d2>
 801597c:	4b83      	ldr	r3, [pc, #524]	; (8015b8c <atan+0x28c>)
 801597e:	429e      	cmp	r6, r3
 8015980:	dd00      	ble.n	8015984 <atan+0x84>
 8015982:	e090      	b.n	8015aa6 <atan+0x1a6>
 8015984:	0002      	movs	r2, r0
 8015986:	000b      	movs	r3, r1
 8015988:	f7eb fd40 	bl	800140c <__aeabi_dadd>
 801598c:	2200      	movs	r2, #0
 801598e:	4b7d      	ldr	r3, [pc, #500]	; (8015b84 <atan+0x284>)
 8015990:	f7ec ff18 	bl	80027c4 <__aeabi_dsub>
 8015994:	2380      	movs	r3, #128	; 0x80
 8015996:	0006      	movs	r6, r0
 8015998:	000f      	movs	r7, r1
 801599a:	2200      	movs	r2, #0
 801599c:	0020      	movs	r0, r4
 801599e:	0029      	movs	r1, r5
 80159a0:	05db      	lsls	r3, r3, #23
 80159a2:	f7eb fd33 	bl	800140c <__aeabi_dadd>
 80159a6:	000b      	movs	r3, r1
 80159a8:	0002      	movs	r2, r0
 80159aa:	0039      	movs	r1, r7
 80159ac:	0030      	movs	r0, r6
 80159ae:	f7ec f897 	bl	8001ae0 <__aeabi_ddiv>
 80159b2:	2300      	movs	r3, #0
 80159b4:	0004      	movs	r4, r0
 80159b6:	000d      	movs	r5, r1
 80159b8:	0022      	movs	r2, r4
 80159ba:	9302      	str	r3, [sp, #8]
 80159bc:	0020      	movs	r0, r4
 80159be:	002b      	movs	r3, r5
 80159c0:	0029      	movs	r1, r5
 80159c2:	f7ec fc93 	bl	80022ec <__aeabi_dmul>
 80159c6:	0002      	movs	r2, r0
 80159c8:	000b      	movs	r3, r1
 80159ca:	9000      	str	r0, [sp, #0]
 80159cc:	9101      	str	r1, [sp, #4]
 80159ce:	f7ec fc8d 	bl	80022ec <__aeabi_dmul>
 80159d2:	0006      	movs	r6, r0
 80159d4:	000f      	movs	r7, r1
 80159d6:	4a6e      	ldr	r2, [pc, #440]	; (8015b90 <atan+0x290>)
 80159d8:	4b6e      	ldr	r3, [pc, #440]	; (8015b94 <atan+0x294>)
 80159da:	f7ec fc87 	bl	80022ec <__aeabi_dmul>
 80159de:	4a6e      	ldr	r2, [pc, #440]	; (8015b98 <atan+0x298>)
 80159e0:	4b6e      	ldr	r3, [pc, #440]	; (8015b9c <atan+0x29c>)
 80159e2:	f7eb fd13 	bl	800140c <__aeabi_dadd>
 80159e6:	0032      	movs	r2, r6
 80159e8:	003b      	movs	r3, r7
 80159ea:	f7ec fc7f 	bl	80022ec <__aeabi_dmul>
 80159ee:	4a6c      	ldr	r2, [pc, #432]	; (8015ba0 <atan+0x2a0>)
 80159f0:	4b6c      	ldr	r3, [pc, #432]	; (8015ba4 <atan+0x2a4>)
 80159f2:	f7eb fd0b 	bl	800140c <__aeabi_dadd>
 80159f6:	0032      	movs	r2, r6
 80159f8:	003b      	movs	r3, r7
 80159fa:	f7ec fc77 	bl	80022ec <__aeabi_dmul>
 80159fe:	4a6a      	ldr	r2, [pc, #424]	; (8015ba8 <atan+0x2a8>)
 8015a00:	4b6a      	ldr	r3, [pc, #424]	; (8015bac <atan+0x2ac>)
 8015a02:	f7eb fd03 	bl	800140c <__aeabi_dadd>
 8015a06:	0032      	movs	r2, r6
 8015a08:	003b      	movs	r3, r7
 8015a0a:	f7ec fc6f 	bl	80022ec <__aeabi_dmul>
 8015a0e:	4a68      	ldr	r2, [pc, #416]	; (8015bb0 <atan+0x2b0>)
 8015a10:	4b68      	ldr	r3, [pc, #416]	; (8015bb4 <atan+0x2b4>)
 8015a12:	f7eb fcfb 	bl	800140c <__aeabi_dadd>
 8015a16:	0032      	movs	r2, r6
 8015a18:	003b      	movs	r3, r7
 8015a1a:	f7ec fc67 	bl	80022ec <__aeabi_dmul>
 8015a1e:	4a66      	ldr	r2, [pc, #408]	; (8015bb8 <atan+0x2b8>)
 8015a20:	4b66      	ldr	r3, [pc, #408]	; (8015bbc <atan+0x2bc>)
 8015a22:	f7eb fcf3 	bl	800140c <__aeabi_dadd>
 8015a26:	9a00      	ldr	r2, [sp, #0]
 8015a28:	9b01      	ldr	r3, [sp, #4]
 8015a2a:	f7ec fc5f 	bl	80022ec <__aeabi_dmul>
 8015a2e:	4a64      	ldr	r2, [pc, #400]	; (8015bc0 <atan+0x2c0>)
 8015a30:	9000      	str	r0, [sp, #0]
 8015a32:	9101      	str	r1, [sp, #4]
 8015a34:	4b63      	ldr	r3, [pc, #396]	; (8015bc4 <atan+0x2c4>)
 8015a36:	0030      	movs	r0, r6
 8015a38:	0039      	movs	r1, r7
 8015a3a:	f7ec fc57 	bl	80022ec <__aeabi_dmul>
 8015a3e:	4a62      	ldr	r2, [pc, #392]	; (8015bc8 <atan+0x2c8>)
 8015a40:	4b62      	ldr	r3, [pc, #392]	; (8015bcc <atan+0x2cc>)
 8015a42:	f7ec febf 	bl	80027c4 <__aeabi_dsub>
 8015a46:	0032      	movs	r2, r6
 8015a48:	003b      	movs	r3, r7
 8015a4a:	f7ec fc4f 	bl	80022ec <__aeabi_dmul>
 8015a4e:	4a60      	ldr	r2, [pc, #384]	; (8015bd0 <atan+0x2d0>)
 8015a50:	4b60      	ldr	r3, [pc, #384]	; (8015bd4 <atan+0x2d4>)
 8015a52:	f7ec feb7 	bl	80027c4 <__aeabi_dsub>
 8015a56:	0032      	movs	r2, r6
 8015a58:	003b      	movs	r3, r7
 8015a5a:	f7ec fc47 	bl	80022ec <__aeabi_dmul>
 8015a5e:	4a5e      	ldr	r2, [pc, #376]	; (8015bd8 <atan+0x2d8>)
 8015a60:	4b5e      	ldr	r3, [pc, #376]	; (8015bdc <atan+0x2dc>)
 8015a62:	f7ec feaf 	bl	80027c4 <__aeabi_dsub>
 8015a66:	0032      	movs	r2, r6
 8015a68:	003b      	movs	r3, r7
 8015a6a:	f7ec fc3f 	bl	80022ec <__aeabi_dmul>
 8015a6e:	4a5c      	ldr	r2, [pc, #368]	; (8015be0 <atan+0x2e0>)
 8015a70:	4b5c      	ldr	r3, [pc, #368]	; (8015be4 <atan+0x2e4>)
 8015a72:	f7ec fea7 	bl	80027c4 <__aeabi_dsub>
 8015a76:	0032      	movs	r2, r6
 8015a78:	003b      	movs	r3, r7
 8015a7a:	f7ec fc37 	bl	80022ec <__aeabi_dmul>
 8015a7e:	0002      	movs	r2, r0
 8015a80:	000b      	movs	r3, r1
 8015a82:	9800      	ldr	r0, [sp, #0]
 8015a84:	9901      	ldr	r1, [sp, #4]
 8015a86:	f7eb fcc1 	bl	800140c <__aeabi_dadd>
 8015a8a:	002b      	movs	r3, r5
 8015a8c:	0022      	movs	r2, r4
 8015a8e:	f7ec fc2d 	bl	80022ec <__aeabi_dmul>
 8015a92:	9b02      	ldr	r3, [sp, #8]
 8015a94:	3301      	adds	r3, #1
 8015a96:	d143      	bne.n	8015b20 <atan+0x220>
 8015a98:	0002      	movs	r2, r0
 8015a9a:	000b      	movs	r3, r1
 8015a9c:	0020      	movs	r0, r4
 8015a9e:	0029      	movs	r1, r5
 8015aa0:	f7ec fe90 	bl	80027c4 <__aeabi_dsub>
 8015aa4:	e742      	b.n	801592c <atan+0x2c>
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	4b36      	ldr	r3, [pc, #216]	; (8015b84 <atan+0x284>)
 8015aaa:	f7ec fe8b 	bl	80027c4 <__aeabi_dsub>
 8015aae:	2200      	movs	r2, #0
 8015ab0:	0006      	movs	r6, r0
 8015ab2:	000f      	movs	r7, r1
 8015ab4:	0020      	movs	r0, r4
 8015ab6:	0029      	movs	r1, r5
 8015ab8:	4b32      	ldr	r3, [pc, #200]	; (8015b84 <atan+0x284>)
 8015aba:	f7eb fca7 	bl	800140c <__aeabi_dadd>
 8015abe:	000b      	movs	r3, r1
 8015ac0:	0002      	movs	r2, r0
 8015ac2:	0039      	movs	r1, r7
 8015ac4:	0030      	movs	r0, r6
 8015ac6:	f7ec f80b 	bl	8001ae0 <__aeabi_ddiv>
 8015aca:	2301      	movs	r3, #1
 8015acc:	0004      	movs	r4, r0
 8015ace:	000d      	movs	r5, r1
 8015ad0:	e772      	b.n	80159b8 <atan+0xb8>
 8015ad2:	4b45      	ldr	r3, [pc, #276]	; (8015be8 <atan+0x2e8>)
 8015ad4:	429e      	cmp	r6, r3
 8015ad6:	dc19      	bgt.n	8015b0c <atan+0x20c>
 8015ad8:	2200      	movs	r2, #0
 8015ada:	4b44      	ldr	r3, [pc, #272]	; (8015bec <atan+0x2ec>)
 8015adc:	f7ec fe72 	bl	80027c4 <__aeabi_dsub>
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	0006      	movs	r6, r0
 8015ae4:	000f      	movs	r7, r1
 8015ae6:	0020      	movs	r0, r4
 8015ae8:	0029      	movs	r1, r5
 8015aea:	4b40      	ldr	r3, [pc, #256]	; (8015bec <atan+0x2ec>)
 8015aec:	f7ec fbfe 	bl	80022ec <__aeabi_dmul>
 8015af0:	2200      	movs	r2, #0
 8015af2:	4b24      	ldr	r3, [pc, #144]	; (8015b84 <atan+0x284>)
 8015af4:	f7eb fc8a 	bl	800140c <__aeabi_dadd>
 8015af8:	000b      	movs	r3, r1
 8015afa:	0002      	movs	r2, r0
 8015afc:	0039      	movs	r1, r7
 8015afe:	0030      	movs	r0, r6
 8015b00:	f7eb ffee 	bl	8001ae0 <__aeabi_ddiv>
 8015b04:	2302      	movs	r3, #2
 8015b06:	0004      	movs	r4, r0
 8015b08:	000d      	movs	r5, r1
 8015b0a:	e755      	b.n	80159b8 <atan+0xb8>
 8015b0c:	000b      	movs	r3, r1
 8015b0e:	0002      	movs	r2, r0
 8015b10:	4937      	ldr	r1, [pc, #220]	; (8015bf0 <atan+0x2f0>)
 8015b12:	2000      	movs	r0, #0
 8015b14:	f7eb ffe4 	bl	8001ae0 <__aeabi_ddiv>
 8015b18:	2303      	movs	r3, #3
 8015b1a:	0004      	movs	r4, r0
 8015b1c:	000d      	movs	r5, r1
 8015b1e:	e74b      	b.n	80159b8 <atan+0xb8>
 8015b20:	9b02      	ldr	r3, [sp, #8]
 8015b22:	4f34      	ldr	r7, [pc, #208]	; (8015bf4 <atan+0x2f4>)
 8015b24:	00de      	lsls	r6, r3, #3
 8015b26:	4b34      	ldr	r3, [pc, #208]	; (8015bf8 <atan+0x2f8>)
 8015b28:	19bf      	adds	r7, r7, r6
 8015b2a:	199e      	adds	r6, r3, r6
 8015b2c:	6832      	ldr	r2, [r6, #0]
 8015b2e:	6873      	ldr	r3, [r6, #4]
 8015b30:	f7ec fe48 	bl	80027c4 <__aeabi_dsub>
 8015b34:	0022      	movs	r2, r4
 8015b36:	002b      	movs	r3, r5
 8015b38:	f7ec fe44 	bl	80027c4 <__aeabi_dsub>
 8015b3c:	000b      	movs	r3, r1
 8015b3e:	0002      	movs	r2, r0
 8015b40:	6838      	ldr	r0, [r7, #0]
 8015b42:	6879      	ldr	r1, [r7, #4]
 8015b44:	f7ec fe3e 	bl	80027c4 <__aeabi_dsub>
 8015b48:	9b03      	ldr	r3, [sp, #12]
 8015b4a:	0004      	movs	r4, r0
 8015b4c:	000d      	movs	r5, r1
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	db00      	blt.n	8015b54 <atan+0x254>
 8015b52:	e6f4      	b.n	801593e <atan+0x3e>
 8015b54:	2180      	movs	r1, #128	; 0x80
 8015b56:	0609      	lsls	r1, r1, #24
 8015b58:	186b      	adds	r3, r5, r1
 8015b5a:	001d      	movs	r5, r3
 8015b5c:	e6ef      	b.n	801593e <atan+0x3e>
 8015b5e:	4d27      	ldr	r5, [pc, #156]	; (8015bfc <atan+0x2fc>)
 8015b60:	e6ed      	b.n	801593e <atan+0x3e>
 8015b62:	46c0      	nop			; (mov r8, r8)
 8015b64:	440fffff 	.word	0x440fffff
 8015b68:	7ff00000 	.word	0x7ff00000
 8015b6c:	54442d18 	.word	0x54442d18
 8015b70:	bff921fb 	.word	0xbff921fb
 8015b74:	3fdbffff 	.word	0x3fdbffff
 8015b78:	3e1fffff 	.word	0x3e1fffff
 8015b7c:	8800759c 	.word	0x8800759c
 8015b80:	7e37e43c 	.word	0x7e37e43c
 8015b84:	3ff00000 	.word	0x3ff00000
 8015b88:	3ff2ffff 	.word	0x3ff2ffff
 8015b8c:	3fe5ffff 	.word	0x3fe5ffff
 8015b90:	e322da11 	.word	0xe322da11
 8015b94:	3f90ad3a 	.word	0x3f90ad3a
 8015b98:	24760deb 	.word	0x24760deb
 8015b9c:	3fa97b4b 	.word	0x3fa97b4b
 8015ba0:	a0d03d51 	.word	0xa0d03d51
 8015ba4:	3fb10d66 	.word	0x3fb10d66
 8015ba8:	c54c206e 	.word	0xc54c206e
 8015bac:	3fb745cd 	.word	0x3fb745cd
 8015bb0:	920083ff 	.word	0x920083ff
 8015bb4:	3fc24924 	.word	0x3fc24924
 8015bb8:	5555550d 	.word	0x5555550d
 8015bbc:	3fd55555 	.word	0x3fd55555
 8015bc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8015bc4:	bfa2b444 	.word	0xbfa2b444
 8015bc8:	52defd9a 	.word	0x52defd9a
 8015bcc:	3fadde2d 	.word	0x3fadde2d
 8015bd0:	af749a6d 	.word	0xaf749a6d
 8015bd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8015bd8:	fe231671 	.word	0xfe231671
 8015bdc:	3fbc71c6 	.word	0x3fbc71c6
 8015be0:	9998ebc4 	.word	0x9998ebc4
 8015be4:	3fc99999 	.word	0x3fc99999
 8015be8:	40037fff 	.word	0x40037fff
 8015bec:	3ff80000 	.word	0x3ff80000
 8015bf0:	bff00000 	.word	0xbff00000
 8015bf4:	08018980 	.word	0x08018980
 8015bf8:	080189a0 	.word	0x080189a0
 8015bfc:	3ff921fb 	.word	0x3ff921fb

08015c00 <fabs>:
 8015c00:	004b      	lsls	r3, r1, #1
 8015c02:	0859      	lsrs	r1, r3, #1
 8015c04:	4770      	bx	lr
	...

08015c08 <floor>:
 8015c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c0a:	004b      	lsls	r3, r1, #1
 8015c0c:	4a3d      	ldr	r2, [pc, #244]	; (8015d04 <floor+0xfc>)
 8015c0e:	0d5b      	lsrs	r3, r3, #21
 8015c10:	189f      	adds	r7, r3, r2
 8015c12:	4684      	mov	ip, r0
 8015c14:	000e      	movs	r6, r1
 8015c16:	000d      	movs	r5, r1
 8015c18:	0004      	movs	r4, r0
 8015c1a:	9001      	str	r0, [sp, #4]
 8015c1c:	2f13      	cmp	r7, #19
 8015c1e:	dc34      	bgt.n	8015c8a <floor+0x82>
 8015c20:	2f00      	cmp	r7, #0
 8015c22:	da16      	bge.n	8015c52 <floor+0x4a>
 8015c24:	4a38      	ldr	r2, [pc, #224]	; (8015d08 <floor+0x100>)
 8015c26:	4b39      	ldr	r3, [pc, #228]	; (8015d0c <floor+0x104>)
 8015c28:	4660      	mov	r0, ip
 8015c2a:	0031      	movs	r1, r6
 8015c2c:	f7eb fbee 	bl	800140c <__aeabi_dadd>
 8015c30:	2200      	movs	r2, #0
 8015c32:	2300      	movs	r3, #0
 8015c34:	f7ea fc12 	bl	800045c <__aeabi_dcmpgt>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d007      	beq.n	8015c4c <floor+0x44>
 8015c3c:	2e00      	cmp	r6, #0
 8015c3e:	da5d      	bge.n	8015cfc <floor+0xf4>
 8015c40:	0073      	lsls	r3, r6, #1
 8015c42:	085b      	lsrs	r3, r3, #1
 8015c44:	431c      	orrs	r4, r3
 8015c46:	d001      	beq.n	8015c4c <floor+0x44>
 8015c48:	2400      	movs	r4, #0
 8015c4a:	4d31      	ldr	r5, [pc, #196]	; (8015d10 <floor+0x108>)
 8015c4c:	46a4      	mov	ip, r4
 8015c4e:	002e      	movs	r6, r5
 8015c50:	e029      	b.n	8015ca6 <floor+0x9e>
 8015c52:	4b30      	ldr	r3, [pc, #192]	; (8015d14 <floor+0x10c>)
 8015c54:	413b      	asrs	r3, r7
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	400b      	ands	r3, r1
 8015c5a:	4303      	orrs	r3, r0
 8015c5c:	d023      	beq.n	8015ca6 <floor+0x9e>
 8015c5e:	4a2a      	ldr	r2, [pc, #168]	; (8015d08 <floor+0x100>)
 8015c60:	4b2a      	ldr	r3, [pc, #168]	; (8015d0c <floor+0x104>)
 8015c62:	4660      	mov	r0, ip
 8015c64:	0031      	movs	r1, r6
 8015c66:	f7eb fbd1 	bl	800140c <__aeabi_dadd>
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	f7ea fbf5 	bl	800045c <__aeabi_dcmpgt>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d0ea      	beq.n	8015c4c <floor+0x44>
 8015c76:	2e00      	cmp	r6, #0
 8015c78:	da03      	bge.n	8015c82 <floor+0x7a>
 8015c7a:	2380      	movs	r3, #128	; 0x80
 8015c7c:	035b      	lsls	r3, r3, #13
 8015c7e:	413b      	asrs	r3, r7
 8015c80:	18f5      	adds	r5, r6, r3
 8015c82:	9b00      	ldr	r3, [sp, #0]
 8015c84:	2400      	movs	r4, #0
 8015c86:	439d      	bics	r5, r3
 8015c88:	e7e0      	b.n	8015c4c <floor+0x44>
 8015c8a:	2f33      	cmp	r7, #51	; 0x33
 8015c8c:	dd0f      	ble.n	8015cae <floor+0xa6>
 8015c8e:	2380      	movs	r3, #128	; 0x80
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	429f      	cmp	r7, r3
 8015c94:	d107      	bne.n	8015ca6 <floor+0x9e>
 8015c96:	0002      	movs	r2, r0
 8015c98:	000b      	movs	r3, r1
 8015c9a:	4660      	mov	r0, ip
 8015c9c:	0031      	movs	r1, r6
 8015c9e:	f7eb fbb5 	bl	800140c <__aeabi_dadd>
 8015ca2:	4684      	mov	ip, r0
 8015ca4:	000e      	movs	r6, r1
 8015ca6:	4660      	mov	r0, ip
 8015ca8:	0031      	movs	r1, r6
 8015caa:	b003      	add	sp, #12
 8015cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cae:	4a1a      	ldr	r2, [pc, #104]	; (8015d18 <floor+0x110>)
 8015cb0:	189b      	adds	r3, r3, r2
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	4252      	negs	r2, r2
 8015cb6:	40da      	lsrs	r2, r3
 8015cb8:	9200      	str	r2, [sp, #0]
 8015cba:	4210      	tst	r0, r2
 8015cbc:	d0f3      	beq.n	8015ca6 <floor+0x9e>
 8015cbe:	4a12      	ldr	r2, [pc, #72]	; (8015d08 <floor+0x100>)
 8015cc0:	4b12      	ldr	r3, [pc, #72]	; (8015d0c <floor+0x104>)
 8015cc2:	4660      	mov	r0, ip
 8015cc4:	0031      	movs	r1, r6
 8015cc6:	f7eb fba1 	bl	800140c <__aeabi_dadd>
 8015cca:	2200      	movs	r2, #0
 8015ccc:	2300      	movs	r3, #0
 8015cce:	f7ea fbc5 	bl	800045c <__aeabi_dcmpgt>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d0ba      	beq.n	8015c4c <floor+0x44>
 8015cd6:	2e00      	cmp	r6, #0
 8015cd8:	da02      	bge.n	8015ce0 <floor+0xd8>
 8015cda:	2f14      	cmp	r7, #20
 8015cdc:	d103      	bne.n	8015ce6 <floor+0xde>
 8015cde:	3501      	adds	r5, #1
 8015ce0:	9b00      	ldr	r3, [sp, #0]
 8015ce2:	439c      	bics	r4, r3
 8015ce4:	e7b2      	b.n	8015c4c <floor+0x44>
 8015ce6:	2334      	movs	r3, #52	; 0x34
 8015ce8:	1bdf      	subs	r7, r3, r7
 8015cea:	3b33      	subs	r3, #51	; 0x33
 8015cec:	40bb      	lsls	r3, r7
 8015cee:	18e4      	adds	r4, r4, r3
 8015cf0:	9b01      	ldr	r3, [sp, #4]
 8015cf2:	429c      	cmp	r4, r3
 8015cf4:	419b      	sbcs	r3, r3
 8015cf6:	425b      	negs	r3, r3
 8015cf8:	18f5      	adds	r5, r6, r3
 8015cfa:	e7f1      	b.n	8015ce0 <floor+0xd8>
 8015cfc:	2400      	movs	r4, #0
 8015cfe:	0025      	movs	r5, r4
 8015d00:	e7a4      	b.n	8015c4c <floor+0x44>
 8015d02:	46c0      	nop			; (mov r8, r8)
 8015d04:	fffffc01 	.word	0xfffffc01
 8015d08:	8800759c 	.word	0x8800759c
 8015d0c:	7e37e43c 	.word	0x7e37e43c
 8015d10:	bff00000 	.word	0xbff00000
 8015d14:	000fffff 	.word	0x000fffff
 8015d18:	fffffbed 	.word	0xfffffbed

08015d1c <nan>:
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	4901      	ldr	r1, [pc, #4]	; (8015d24 <nan+0x8>)
 8015d20:	4770      	bx	lr
 8015d22:	46c0      	nop			; (mov r8, r8)
 8015d24:	7ff80000 	.word	0x7ff80000

08015d28 <scalbn>:
 8015d28:	004b      	lsls	r3, r1, #1
 8015d2a:	b570      	push	{r4, r5, r6, lr}
 8015d2c:	0d5b      	lsrs	r3, r3, #21
 8015d2e:	0014      	movs	r4, r2
 8015d30:	000a      	movs	r2, r1
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d10d      	bne.n	8015d52 <scalbn+0x2a>
 8015d36:	004b      	lsls	r3, r1, #1
 8015d38:	085b      	lsrs	r3, r3, #1
 8015d3a:	4303      	orrs	r3, r0
 8015d3c:	d010      	beq.n	8015d60 <scalbn+0x38>
 8015d3e:	4b27      	ldr	r3, [pc, #156]	; (8015ddc <scalbn+0xb4>)
 8015d40:	2200      	movs	r2, #0
 8015d42:	f7ec fad3 	bl	80022ec <__aeabi_dmul>
 8015d46:	4b26      	ldr	r3, [pc, #152]	; (8015de0 <scalbn+0xb8>)
 8015d48:	429c      	cmp	r4, r3
 8015d4a:	da0a      	bge.n	8015d62 <scalbn+0x3a>
 8015d4c:	4a25      	ldr	r2, [pc, #148]	; (8015de4 <scalbn+0xbc>)
 8015d4e:	4b26      	ldr	r3, [pc, #152]	; (8015de8 <scalbn+0xc0>)
 8015d50:	e019      	b.n	8015d86 <scalbn+0x5e>
 8015d52:	4d26      	ldr	r5, [pc, #152]	; (8015dec <scalbn+0xc4>)
 8015d54:	42ab      	cmp	r3, r5
 8015d56:	d108      	bne.n	8015d6a <scalbn+0x42>
 8015d58:	0002      	movs	r2, r0
 8015d5a:	000b      	movs	r3, r1
 8015d5c:	f7eb fb56 	bl	800140c <__aeabi_dadd>
 8015d60:	bd70      	pop	{r4, r5, r6, pc}
 8015d62:	000a      	movs	r2, r1
 8015d64:	004b      	lsls	r3, r1, #1
 8015d66:	0d5b      	lsrs	r3, r3, #21
 8015d68:	3b36      	subs	r3, #54	; 0x36
 8015d6a:	4d21      	ldr	r5, [pc, #132]	; (8015df0 <scalbn+0xc8>)
 8015d6c:	18e3      	adds	r3, r4, r3
 8015d6e:	42ab      	cmp	r3, r5
 8015d70:	dd0c      	ble.n	8015d8c <scalbn+0x64>
 8015d72:	4c20      	ldr	r4, [pc, #128]	; (8015df4 <scalbn+0xcc>)
 8015d74:	4d20      	ldr	r5, [pc, #128]	; (8015df8 <scalbn+0xd0>)
 8015d76:	2900      	cmp	r1, #0
 8015d78:	da01      	bge.n	8015d7e <scalbn+0x56>
 8015d7a:	4c1e      	ldr	r4, [pc, #120]	; (8015df4 <scalbn+0xcc>)
 8015d7c:	4d1f      	ldr	r5, [pc, #124]	; (8015dfc <scalbn+0xd4>)
 8015d7e:	0020      	movs	r0, r4
 8015d80:	0029      	movs	r1, r5
 8015d82:	4a1c      	ldr	r2, [pc, #112]	; (8015df4 <scalbn+0xcc>)
 8015d84:	4b1c      	ldr	r3, [pc, #112]	; (8015df8 <scalbn+0xd0>)
 8015d86:	f7ec fab1 	bl	80022ec <__aeabi_dmul>
 8015d8a:	e7e9      	b.n	8015d60 <scalbn+0x38>
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	dd05      	ble.n	8015d9c <scalbn+0x74>
 8015d90:	4c1b      	ldr	r4, [pc, #108]	; (8015e00 <scalbn+0xd8>)
 8015d92:	051b      	lsls	r3, r3, #20
 8015d94:	4022      	ands	r2, r4
 8015d96:	431a      	orrs	r2, r3
 8015d98:	0011      	movs	r1, r2
 8015d9a:	e7e1      	b.n	8015d60 <scalbn+0x38>
 8015d9c:	001d      	movs	r5, r3
 8015d9e:	3535      	adds	r5, #53	; 0x35
 8015da0:	da13      	bge.n	8015dca <scalbn+0xa2>
 8015da2:	4a18      	ldr	r2, [pc, #96]	; (8015e04 <scalbn+0xdc>)
 8015da4:	0fcb      	lsrs	r3, r1, #31
 8015da6:	4294      	cmp	r4, r2
 8015da8:	dd08      	ble.n	8015dbc <scalbn+0x94>
 8015daa:	4812      	ldr	r0, [pc, #72]	; (8015df4 <scalbn+0xcc>)
 8015dac:	4912      	ldr	r1, [pc, #72]	; (8015df8 <scalbn+0xd0>)
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d001      	beq.n	8015db6 <scalbn+0x8e>
 8015db2:	4810      	ldr	r0, [pc, #64]	; (8015df4 <scalbn+0xcc>)
 8015db4:	4911      	ldr	r1, [pc, #68]	; (8015dfc <scalbn+0xd4>)
 8015db6:	4a0f      	ldr	r2, [pc, #60]	; (8015df4 <scalbn+0xcc>)
 8015db8:	4b0f      	ldr	r3, [pc, #60]	; (8015df8 <scalbn+0xd0>)
 8015dba:	e7e4      	b.n	8015d86 <scalbn+0x5e>
 8015dbc:	4809      	ldr	r0, [pc, #36]	; (8015de4 <scalbn+0xbc>)
 8015dbe:	490a      	ldr	r1, [pc, #40]	; (8015de8 <scalbn+0xc0>)
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d0c3      	beq.n	8015d4c <scalbn+0x24>
 8015dc4:	4807      	ldr	r0, [pc, #28]	; (8015de4 <scalbn+0xbc>)
 8015dc6:	4910      	ldr	r1, [pc, #64]	; (8015e08 <scalbn+0xe0>)
 8015dc8:	e7c0      	b.n	8015d4c <scalbn+0x24>
 8015dca:	4c0d      	ldr	r4, [pc, #52]	; (8015e00 <scalbn+0xd8>)
 8015dcc:	3336      	adds	r3, #54	; 0x36
 8015dce:	4022      	ands	r2, r4
 8015dd0:	051b      	lsls	r3, r3, #20
 8015dd2:	4313      	orrs	r3, r2
 8015dd4:	0019      	movs	r1, r3
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	4b0c      	ldr	r3, [pc, #48]	; (8015e0c <scalbn+0xe4>)
 8015dda:	e7d4      	b.n	8015d86 <scalbn+0x5e>
 8015ddc:	43500000 	.word	0x43500000
 8015de0:	ffff3cb0 	.word	0xffff3cb0
 8015de4:	c2f8f359 	.word	0xc2f8f359
 8015de8:	01a56e1f 	.word	0x01a56e1f
 8015dec:	000007ff 	.word	0x000007ff
 8015df0:	000007fe 	.word	0x000007fe
 8015df4:	8800759c 	.word	0x8800759c
 8015df8:	7e37e43c 	.word	0x7e37e43c
 8015dfc:	fe37e43c 	.word	0xfe37e43c
 8015e00:	800fffff 	.word	0x800fffff
 8015e04:	0000c350 	.word	0x0000c350
 8015e08:	81a56e1f 	.word	0x81a56e1f
 8015e0c:	3c900000 	.word	0x3c900000

08015e10 <_init>:
 8015e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e12:	46c0      	nop			; (mov r8, r8)
 8015e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e16:	bc08      	pop	{r3}
 8015e18:	469e      	mov	lr, r3
 8015e1a:	4770      	bx	lr

08015e1c <_fini>:
 8015e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e1e:	46c0      	nop			; (mov r8, r8)
 8015e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e22:	bc08      	pop	{r3}
 8015e24:	469e      	mov	lr, r3
 8015e26:	4770      	bx	lr

08015e28 <__FLASH_Program_Fast_veneer>:
 8015e28:	b401      	push	{r0}
 8015e2a:	4802      	ldr	r0, [pc, #8]	; (8015e34 <__FLASH_Program_Fast_veneer+0xc>)
 8015e2c:	4684      	mov	ip, r0
 8015e2e:	bc01      	pop	{r0}
 8015e30:	4760      	bx	ip
 8015e32:	bf00      	nop
 8015e34:	200000f5 	.word	0x200000f5

Disassembly of section .data:

20000000 <uwTickPrio>:
20000000:	00000004                                ....

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <Font12>:
2000000c:	08016424 000c0007                       $d......

20000014 <Font16>:
20000014:	08016898 0010000b                       .h......

2000001c <Font20>:
2000001c:	08017478 0014000e                       xt......

20000024 <Font8>:
20000024:	08018350 00080005                       P.......

2000002c <layoutsCounter>:
2000002c:	                                         .

2000002d <ctrlMeas>:
2000002d:	                                         %

2000002e <ctrlHum>:
2000002e:	                                         .

2000002f <ctrlMagnetometerPowerDown>:
2000002f:	                                         .

20000030 <temperatureCompensation>:
20000030:	                                         ..

20000032 <pressureReference>:
20000032:	                                         ..

20000034 <batteryLevels>:
20000034:	0ea60e10 0f0a0ed8 0fb40f6e               ........n.....

20000042 <i2cTimeout>:
20000042:	                                         ..

20000044 <offsetADC>:
20000044:	ffffffb5                                ....

20000048 <gainVoltagePassive>:
20000048:	3f87ae14                                ...?

2000004c <line>:
2000004c:	0f0a0500 231e1914 37322d28 4b46413c     .......#(-27<AFK
2000005c:	5f5a5550 736e6964 87827d78 9b96918c     PUZ_dinsx}......
2000006c:	afaaa5a0 c3beb9b4                       ........

20000074 <column>:
20000074:	1e140a00 463c3228 6e645a50 968c8278     ....(2<FPZdnx...
20000084:	beb4aaa0                                ....

20000088 <SystemCoreClock>:
20000088:	00f42400                                .$..

2000008c <_impure_ptr>:
2000008c:	20000090                                ... 

20000090 <impure_data>:
20000090:	00000000 08018704 08018724 080186e4     ........$.......
	...

200000f0 <__fdlib_version>:
200000f0:	000000ff                                ....

200000f4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000f4:	b580      	push	{r7, lr}
200000f6:	b088      	sub	sp, #32
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]
200000fc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000fe:	231f      	movs	r3, #31
20000100:	18fb      	adds	r3, r7, r3
20000102:	2200      	movs	r2, #0
20000104:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000010a:	683b      	ldr	r3, [r7, #0]
2000010c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000010e:	4b1a      	ldr	r3, [pc, #104]	; (20000178 <FLASH_Program_Fast+0x84>)
20000110:	695a      	ldr	r2, [r3, #20]
20000112:	4b19      	ldr	r3, [pc, #100]	; (20000178 <FLASH_Program_Fast+0x84>)
20000114:	2180      	movs	r1, #128	; 0x80
20000116:	02c9      	lsls	r1, r1, #11
20000118:	430a      	orrs	r2, r1
2000011a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000011c:	f3ef 8310 	mrs	r3, PRIMASK
20000120:	60fb      	str	r3, [r7, #12]
  return(result);
20000122:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000126:	b672      	cpsid	i
}
20000128:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000012a:	e00f      	b.n	2000014c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000012c:	697a      	ldr	r2, [r7, #20]
2000012e:	69bb      	ldr	r3, [r7, #24]
20000130:	6812      	ldr	r2, [r2, #0]
20000132:	601a      	str	r2, [r3, #0]
    src += 4U;
20000134:	697b      	ldr	r3, [r7, #20]
20000136:	3304      	adds	r3, #4
20000138:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000013a:	69bb      	ldr	r3, [r7, #24]
2000013c:	3304      	adds	r3, #4
2000013e:	61bb      	str	r3, [r7, #24]
    index++;
20000140:	211f      	movs	r1, #31
20000142:	187b      	adds	r3, r7, r1
20000144:	781a      	ldrb	r2, [r3, #0]
20000146:	187b      	adds	r3, r7, r1
20000148:	3201      	adds	r2, #1
2000014a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000014c:	231f      	movs	r3, #31
2000014e:	18fb      	adds	r3, r7, r3
20000150:	781b      	ldrb	r3, [r3, #0]
20000152:	2b3f      	cmp	r3, #63	; 0x3f
20000154:	d9ea      	bls.n	2000012c <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	4b07      	ldr	r3, [pc, #28]	; (20000178 <FLASH_Program_Fast+0x84>)
2000015a:	691a      	ldr	r2, [r3, #16]
2000015c:	2380      	movs	r3, #128	; 0x80
2000015e:	025b      	lsls	r3, r3, #9
20000160:	4013      	ands	r3, r2
20000162:	d1f9      	bne.n	20000158 <FLASH_Program_Fast+0x64>
20000164:	693b      	ldr	r3, [r7, #16]
20000166:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000168:	68bb      	ldr	r3, [r7, #8]
2000016a:	f383 8810 	msr	PRIMASK, r3
}
2000016e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000170:	46c0      	nop			; (mov r8, r8)
20000172:	46bd      	mov	sp, r7
20000174:	b008      	add	sp, #32
20000176:	bd80      	pop	{r7, pc}
20000178:	40022000 	.word	0x40022000
