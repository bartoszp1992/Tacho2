
Tacho2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c48  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b88  08015d00  08015d00  00025d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018888  08018888  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  08018888  08018888  00028888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018890  08018890  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018890  08018890  00028890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018894  08018894  00028894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08018898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000694  2000017c  08018a14  0003017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  08018a14  00030810  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a08a  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005087  00000000  00000000  0005a22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  0005f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  00060de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4ed  00000000  00000000  00062680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025318  00000000  00000000  0007fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5adc  00000000  00000000  000a4e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d0  00000000  00000000  0014a9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000017c 	.word	0x2000017c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08015cd4 	.word	0x08015cd4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000180 	.word	0x20000180
 80000fc:	08015cd4 	.word	0x08015cd4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	1c10      	adds	r0, r2, #0
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	1c19      	adds	r1, r3, #0
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f001 fef7 	bl	8002204 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe41 	bl	80020a8 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fee9 	bl	8002204 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fedf 	bl	8002204 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe63 	bl	8002120 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe59 	bl	8002120 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	1c08      	adds	r0, r1, #0
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000486:	f000 fbef 	bl	8000c68 <__lesf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	d401      	bmi.n	8000492 <__aeabi_cfcmpeq+0xe>
 800048e:	2100      	movs	r1, #0
 8000490:	42c8      	cmn	r0, r1
 8000492:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb73 	bl	8000b80 <__eqsf2>
 800049a:	4240      	negs	r0, r0
 800049c:	3001      	adds	r0, #1
 800049e:	bd10      	pop	{r4, pc}

080004a0 <__aeabi_fcmplt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fbe1 	bl	8000c68 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fcmplt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmple>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fbd7 	bl	8000c68 <__lesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dd01      	ble.n	80004c2 <__aeabi_fcmple+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpgt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb81 	bl	8000bd0 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	dc01      	bgt.n	80004d6 <__aeabi_fcmpgt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmpge>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb77 	bl	8000bd0 <__gesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	da01      	bge.n	80004ea <__aeabi_fcmpge+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_ldivmod>:
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d113      	bne.n	8000520 <__aeabi_ldivmod+0x30>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	db06      	blt.n	800050a <__aeabi_ldivmod+0x1a>
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_ldivmod+0x12>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d006      	beq.n	8000510 <__aeabi_ldivmod+0x20>
 8000502:	2000      	movs	r0, #0
 8000504:	43c0      	mvns	r0, r0
 8000506:	0841      	lsrs	r1, r0, #1
 8000508:	e002      	b.n	8000510 <__aeabi_ldivmod+0x20>
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0609      	lsls	r1, r1, #24
 800050e:	2000      	movs	r0, #0
 8000510:	b407      	push	{r0, r1, r2}
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <__aeabi_ldivmod+0x2c>)
 8000514:	a101      	add	r1, pc, #4	; (adr r1, 800051c <__aeabi_ldivmod+0x2c>)
 8000516:	1840      	adds	r0, r0, r1
 8000518:	9002      	str	r0, [sp, #8]
 800051a:	bd03      	pop	{r0, r1, pc}
 800051c:	fffffee1 	.word	0xfffffee1
 8000520:	b403      	push	{r0, r1}
 8000522:	4668      	mov	r0, sp
 8000524:	b501      	push	{r0, lr}
 8000526:	9802      	ldr	r0, [sp, #8]
 8000528:	f000 f864 	bl	80005f4 <__gnu_ldivmod_helper>
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	469e      	mov	lr, r3
 8000530:	b002      	add	sp, #8
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4770      	bx	lr
 8000536:	46c0      	nop			; (mov r8, r8)

08000538 <__aeabi_lmul>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	0415      	lsls	r5, r2, #16
 800053c:	0c2d      	lsrs	r5, r5, #16
 800053e:	000f      	movs	r7, r1
 8000540:	0001      	movs	r1, r0
 8000542:	002e      	movs	r6, r5
 8000544:	46c6      	mov	lr, r8
 8000546:	4684      	mov	ip, r0
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	0c14      	lsrs	r4, r2, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	0c09      	lsrs	r1, r1, #16
 8000550:	4346      	muls	r6, r0
 8000552:	434d      	muls	r5, r1
 8000554:	4360      	muls	r0, r4
 8000556:	4361      	muls	r1, r4
 8000558:	1940      	adds	r0, r0, r5
 800055a:	0c34      	lsrs	r4, r6, #16
 800055c:	1824      	adds	r4, r4, r0
 800055e:	b500      	push	{lr}
 8000560:	42a5      	cmp	r5, r4
 8000562:	d903      	bls.n	800056c <__aeabi_lmul+0x34>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4680      	mov	r8, r0
 800056a:	4441      	add	r1, r8
 800056c:	0c25      	lsrs	r5, r4, #16
 800056e:	186d      	adds	r5, r5, r1
 8000570:	4661      	mov	r1, ip
 8000572:	4359      	muls	r1, r3
 8000574:	437a      	muls	r2, r7
 8000576:	0430      	lsls	r0, r6, #16
 8000578:	1949      	adds	r1, r1, r5
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	0c00      	lsrs	r0, r0, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	1889      	adds	r1, r1, r2
 8000582:	bc80      	pop	{r7}
 8000584:	46b8      	mov	r8, r7
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000588 <__aeabi_f2uiz>:
 8000588:	219e      	movs	r1, #158	; 0x9e
 800058a:	b510      	push	{r4, lr}
 800058c:	05c9      	lsls	r1, r1, #23
 800058e:	1c04      	adds	r4, r0, #0
 8000590:	f7ff ffa4 	bl	80004dc <__aeabi_fcmpge>
 8000594:	2800      	cmp	r0, #0
 8000596:	d103      	bne.n	80005a0 <__aeabi_f2uiz+0x18>
 8000598:	1c20      	adds	r0, r4, #0
 800059a:	f000 fe91 	bl	80012c0 <__aeabi_f2iz>
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	219e      	movs	r1, #158	; 0x9e
 80005a2:	1c20      	adds	r0, r4, #0
 80005a4:	05c9      	lsls	r1, r1, #23
 80005a6:	f000 fcc3 	bl	8000f30 <__aeabi_fsub>
 80005aa:	f000 fe89 	bl	80012c0 <__aeabi_f2iz>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	469c      	mov	ip, r3
 80005b4:	4460      	add	r0, ip
 80005b6:	e7f2      	b.n	800059e <__aeabi_f2uiz+0x16>

080005b8 <__aeabi_d2uiz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005be:	0004      	movs	r4, r0
 80005c0:	000d      	movs	r5, r1
 80005c2:	f7ff ff51 	bl	8000468 <__aeabi_dcmpge>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d104      	bne.n	80005d4 <__aeabi_d2uiz+0x1c>
 80005ca:	0020      	movs	r0, r4
 80005cc:	0029      	movs	r1, r5
 80005ce:	f002 fca5 	bl	8002f1c <__aeabi_d2iz>
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_d2uiz+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0020      	movs	r0, r4
 80005da:	0029      	movs	r1, r5
 80005dc:	f002 f8ee 	bl	80027bc <__aeabi_dsub>
 80005e0:	f002 fc9c 	bl	8002f1c <__aeabi_d2iz>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	469c      	mov	ip, r3
 80005ea:	4460      	add	r0, ip
 80005ec:	e7f1      	b.n	80005d2 <__aeabi_d2uiz+0x1a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41e00000 	.word	0x41e00000

080005f4 <__gnu_ldivmod_helper>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	46ce      	mov	lr, r9
 80005f8:	4647      	mov	r7, r8
 80005fa:	b580      	push	{r7, lr}
 80005fc:	4691      	mov	r9, r2
 80005fe:	4698      	mov	r8, r3
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	f002 fe04 	bl	8003210 <__divdi3>
 8000608:	0007      	movs	r7, r0
 800060a:	000e      	movs	r6, r1
 800060c:	0002      	movs	r2, r0
 800060e:	000b      	movs	r3, r1
 8000610:	4648      	mov	r0, r9
 8000612:	4641      	mov	r1, r8
 8000614:	f7ff ff90 	bl	8000538 <__aeabi_lmul>
 8000618:	1a24      	subs	r4, r4, r0
 800061a:	418d      	sbcs	r5, r1
 800061c:	9b08      	ldr	r3, [sp, #32]
 800061e:	0038      	movs	r0, r7
 8000620:	0031      	movs	r1, r6
 8000622:	601c      	str	r4, [r3, #0]
 8000624:	605d      	str	r5, [r3, #4]
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fadd>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4646      	mov	r6, r8
 8000634:	46d6      	mov	lr, sl
 8000636:	464f      	mov	r7, r9
 8000638:	024d      	lsls	r5, r1, #9
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	b5c0      	push	{r6, r7, lr}
 800063e:	0a52      	lsrs	r2, r2, #9
 8000640:	0a6e      	lsrs	r6, r5, #9
 8000642:	0047      	lsls	r7, r0, #1
 8000644:	46b0      	mov	r8, r6
 8000646:	0e3f      	lsrs	r7, r7, #24
 8000648:	004e      	lsls	r6, r1, #1
 800064a:	0fc4      	lsrs	r4, r0, #31
 800064c:	00d0      	lsls	r0, r2, #3
 800064e:	4694      	mov	ip, r2
 8000650:	003b      	movs	r3, r7
 8000652:	4682      	mov	sl, r0
 8000654:	0e36      	lsrs	r6, r6, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	09ad      	lsrs	r5, r5, #6
 800065a:	428c      	cmp	r4, r1
 800065c:	d06d      	beq.n	800073a <__aeabi_fadd+0x10a>
 800065e:	1bb8      	subs	r0, r7, r6
 8000660:	4681      	mov	r9, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	dd4d      	ble.n	8000702 <__aeabi_fadd+0xd2>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x3c>
 800066a:	e088      	b.n	800077e <__aeabi_fadd+0x14e>
 800066c:	2fff      	cmp	r7, #255	; 0xff
 800066e:	d05a      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	04db      	lsls	r3, r3, #19
 8000674:	431d      	orrs	r5, r3
 8000676:	464b      	mov	r3, r9
 8000678:	2201      	movs	r2, #1
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dc0a      	bgt.n	8000694 <__aeabi_fadd+0x64>
 800067e:	002b      	movs	r3, r5
 8000680:	464a      	mov	r2, r9
 8000682:	4649      	mov	r1, r9
 8000684:	40d3      	lsrs	r3, r2
 8000686:	2220      	movs	r2, #32
 8000688:	1a52      	subs	r2, r2, r1
 800068a:	4095      	lsls	r5, r2
 800068c:	002a      	movs	r2, r5
 800068e:	1e55      	subs	r5, r2, #1
 8000690:	41aa      	sbcs	r2, r5
 8000692:	431a      	orrs	r2, r3
 8000694:	4653      	mov	r3, sl
 8000696:	1a9a      	subs	r2, r3, r2
 8000698:	0153      	lsls	r3, r2, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x6e>
 800069c:	e0b9      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	0996      	lsrs	r6, r2, #6
 80006a2:	0030      	movs	r0, r6
 80006a4:	f002 fd96 	bl	80031d4 <__clzsi2>
 80006a8:	3805      	subs	r0, #5
 80006aa:	4086      	lsls	r6, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_fadd+0x82>
 80006b0:	e0d4      	b.n	800085c <__aeabi_fadd+0x22c>
 80006b2:	0033      	movs	r3, r6
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	2020      	movs	r0, #32
 80006b8:	3701      	adds	r7, #1
 80006ba:	40fb      	lsrs	r3, r7
 80006bc:	1bc7      	subs	r7, r0, r7
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1e56      	subs	r6, r2, #1
 80006c4:	41b2      	sbcs	r2, r6
 80006c6:	2700      	movs	r7, #0
 80006c8:	431a      	orrs	r2, r3
 80006ca:	0753      	lsls	r3, r2, #29
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006ce:	230f      	movs	r3, #15
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0xa8>
 80006d6:	3204      	adds	r2, #4
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fadd+0xae>
 80006dc:	e09c      	b.n	8000818 <__aeabi_fadd+0x1e8>
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	2ffe      	cmp	r7, #254	; 0xfe
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0xb6>
 80006e4:	e09a      	b.n	800081c <__aeabi_fadd+0x1ec>
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a52      	lsrs	r2, r2, #9
 80006ea:	4694      	mov	ip, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	05d8      	lsls	r0, r3, #23
 80006f0:	4663      	mov	r3, ip
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4318      	orrs	r0, r3
 80006f6:	4320      	orrs	r0, r4
 80006f8:	bce0      	pop	{r5, r6, r7}
 80006fa:	46ba      	mov	sl, r7
 80006fc:	46b1      	mov	r9, r6
 80006fe:	46a8      	mov	r8, r5
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	2800      	cmp	r0, #0
 8000704:	d049      	beq.n	800079a <__aeabi_fadd+0x16a>
 8000706:	1bf3      	subs	r3, r6, r7
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fadd+0x24c>
 800070e:	4652      	mov	r2, sl
 8000710:	2a00      	cmp	r2, #0
 8000712:	d060      	beq.n	80007d6 <__aeabi_fadd+0x1a6>
 8000714:	3b01      	subs	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0xec>
 800071a:	e0fc      	b.n	8000916 <__aeabi_fadd+0x2e6>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xf2>
 8000720:	e0b4      	b.n	800088c <__aeabi_fadd+0x25c>
 8000722:	000c      	movs	r4, r1
 8000724:	4642      	mov	r2, r8
 8000726:	2a00      	cmp	r2, #0
 8000728:	d078      	beq.n	800081c <__aeabi_fadd+0x1ec>
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	03c0      	lsls	r0, r0, #15
 800072e:	4310      	orrs	r0, r2
 8000730:	0242      	lsls	r2, r0, #9
 8000732:	0a53      	lsrs	r3, r2, #9
 8000734:	469c      	mov	ip, r3
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	e7d9      	b.n	80006ee <__aeabi_fadd+0xbe>
 800073a:	1bb9      	subs	r1, r7, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	dd71      	ble.n	8000824 <__aeabi_fadd+0x1f4>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d03f      	beq.n	80007c4 <__aeabi_fadd+0x194>
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d0ee      	beq.n	8000726 <__aeabi_fadd+0xf6>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431d      	orrs	r5, r3
 800074e:	2201      	movs	r2, #1
 8000750:	291b      	cmp	r1, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x134>
 8000754:	002a      	movs	r2, r5
 8000756:	2320      	movs	r3, #32
 8000758:	40ca      	lsrs	r2, r1
 800075a:	1a59      	subs	r1, r3, r1
 800075c:	408d      	lsls	r5, r1
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	432a      	orrs	r2, r5
 8000764:	4452      	add	r2, sl
 8000766:	0153      	lsls	r3, r2, #5
 8000768:	d553      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800076a:	3701      	adds	r7, #1
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d055      	beq.n	800081c <__aeabi_fadd+0x1ec>
 8000770:	2301      	movs	r3, #1
 8000772:	497b      	ldr	r1, [pc, #492]	; (8000960 <__aeabi_fadd+0x330>)
 8000774:	4013      	ands	r3, r2
 8000776:	0852      	lsrs	r2, r2, #1
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	e7a5      	b.n	80006ca <__aeabi_fadd+0x9a>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d02c      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	469c      	mov	ip, r3
 8000788:	44e1      	add	r9, ip
 800078a:	464b      	mov	r3, r9
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x162>
 8000790:	e0ad      	b.n	80008ee <__aeabi_fadd+0x2be>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x168>
 8000796:	e76e      	b.n	8000676 <__aeabi_fadd+0x46>
 8000798:	e7c5      	b.n	8000726 <__aeabi_fadd+0xf6>
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c7e      	adds	r6, r7, #1
 800079e:	4230      	tst	r0, r6
 80007a0:	d160      	bne.n	8000864 <__aeabi_fadd+0x234>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x178>
 80007a6:	e093      	b.n	80008d0 <__aeabi_fadd+0x2a0>
 80007a8:	4652      	mov	r2, sl
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x180>
 80007ae:	e0b6      	b.n	800091e <__aeabi_fadd+0x2ee>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d09c      	beq.n	80006ee <__aeabi_fadd+0xbe>
 80007b4:	1b52      	subs	r2, r2, r5
 80007b6:	0150      	lsls	r0, r2, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x18c>
 80007ba:	e0c3      	b.n	8000944 <__aeabi_fadd+0x314>
 80007bc:	4653      	mov	r3, sl
 80007be:	000c      	movs	r4, r1
 80007c0:	1aea      	subs	r2, r5, r3
 80007c2:	e782      	b.n	80006ca <__aeabi_fadd+0x9a>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d009      	beq.n	80007dc <__aeabi_fadd+0x1ac>
 80007c8:	3901      	subs	r1, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x1a0>
 80007ce:	e08b      	b.n	80008e8 <__aeabi_fadd+0x2b8>
 80007d0:	2fff      	cmp	r7, #255	; 0xff
 80007d2:	d1bc      	bne.n	800074e <__aeabi_fadd+0x11e>
 80007d4:	e7a7      	b.n	8000726 <__aeabi_fadd+0xf6>
 80007d6:	000c      	movs	r4, r1
 80007d8:	4642      	mov	r2, r8
 80007da:	0037      	movs	r7, r6
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d0a2      	beq.n	8000726 <__aeabi_fadd+0xf6>
 80007e0:	0252      	lsls	r2, r2, #9
 80007e2:	0a53      	lsrs	r3, r2, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2fb      	uxtb	r3, r7
 80007e8:	e781      	b.n	80006ee <__aeabi_fadd+0xbe>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	3701      	adds	r7, #1
 80007ee:	4239      	tst	r1, r7
 80007f0:	d165      	bne.n	80008be <__aeabi_fadd+0x28e>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d17e      	bne.n	80008f4 <__aeabi_fadd+0x2c4>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x1cc>
 80007fa:	e0aa      	b.n	8000952 <__aeabi_fadd+0x322>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x1d2>
 8000800:	e775      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000802:	002a      	movs	r2, r5
 8000804:	4452      	add	r2, sl
 8000806:	2700      	movs	r7, #0
 8000808:	0153      	lsls	r3, r2, #5
 800080a:	d502      	bpl.n	8000812 <__aeabi_fadd+0x1e2>
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <__aeabi_fadd+0x334>)
 800080e:	3701      	adds	r7, #1
 8000810:	401a      	ands	r2, r3
 8000812:	0753      	lsls	r3, r2, #29
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x1e8>
 8000816:	e75a      	b.n	80006ce <__aeabi_fadd+0x9e>
 8000818:	08d2      	lsrs	r2, r2, #3
 800081a:	e7df      	b.n	80007dc <__aeabi_fadd+0x1ac>
 800081c:	2200      	movs	r2, #0
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	4694      	mov	ip, r2
 8000822:	e764      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000824:	2900      	cmp	r1, #0
 8000826:	d0e0      	beq.n	80007ea <__aeabi_fadd+0x1ba>
 8000828:	1bf3      	subs	r3, r6, r7
 800082a:	2f00      	cmp	r7, #0
 800082c:	d03e      	beq.n	80008ac <__aeabi_fadd+0x27c>
 800082e:	2eff      	cmp	r6, #255	; 0xff
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x204>
 8000832:	e777      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0001      	movs	r1, r0
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4311      	orrs	r1, r2
 800083c:	468a      	mov	sl, r1
 800083e:	2201      	movs	r2, #1
 8000840:	2b1b      	cmp	r3, #27
 8000842:	dc08      	bgt.n	8000856 <__aeabi_fadd+0x226>
 8000844:	4652      	mov	r2, sl
 8000846:	2120      	movs	r1, #32
 8000848:	4650      	mov	r0, sl
 800084a:	40da      	lsrs	r2, r3
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	4098      	lsls	r0, r3
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4302      	orrs	r2, r0
 8000856:	0037      	movs	r7, r6
 8000858:	1952      	adds	r2, r2, r5
 800085a:	e784      	b.n	8000766 <__aeabi_fadd+0x136>
 800085c:	4a41      	ldr	r2, [pc, #260]	; (8000964 <__aeabi_fadd+0x334>)
 800085e:	1a3f      	subs	r7, r7, r0
 8000860:	4032      	ands	r2, r6
 8000862:	e732      	b.n	80006ca <__aeabi_fadd+0x9a>
 8000864:	4653      	mov	r3, sl
 8000866:	1b5e      	subs	r6, r3, r5
 8000868:	0173      	lsls	r3, r6, #5
 800086a:	d42d      	bmi.n	80008c8 <__aeabi_fadd+0x298>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fadd+0x242>
 8000870:	e717      	b.n	80006a2 <__aeabi_fadd+0x72>
 8000872:	2200      	movs	r2, #0
 8000874:	2400      	movs	r4, #0
 8000876:	2300      	movs	r3, #0
 8000878:	4694      	mov	ip, r2
 800087a:	e738      	b.n	80006ee <__aeabi_fadd+0xbe>
 800087c:	2eff      	cmp	r6, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x252>
 8000880:	e74f      	b.n	8000722 <__aeabi_fadd+0xf2>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4650      	mov	r0, sl
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	4310      	orrs	r0, r2
 800088a:	4682      	mov	sl, r0
 800088c:	2201      	movs	r2, #1
 800088e:	2b1b      	cmp	r3, #27
 8000890:	dc08      	bgt.n	80008a4 <__aeabi_fadd+0x274>
 8000892:	4652      	mov	r2, sl
 8000894:	2420      	movs	r4, #32
 8000896:	4650      	mov	r0, sl
 8000898:	40da      	lsrs	r2, r3
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	4098      	lsls	r0, r3
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4302      	orrs	r2, r0
 80008a4:	000c      	movs	r4, r1
 80008a6:	0037      	movs	r7, r6
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	e6f5      	b.n	8000698 <__aeabi_fadd+0x68>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d093      	beq.n	80007d8 <__aeabi_fadd+0x1a8>
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d04f      	beq.n	8000956 <__aeabi_fadd+0x326>
 80008b6:	2eff      	cmp	r6, #255	; 0xff
 80008b8:	d1c1      	bne.n	800083e <__aeabi_fadd+0x20e>
 80008ba:	4642      	mov	r2, r8
 80008bc:	e733      	b.n	8000726 <__aeabi_fadd+0xf6>
 80008be:	2fff      	cmp	r7, #255	; 0xff
 80008c0:	d0ac      	beq.n	800081c <__aeabi_fadd+0x1ec>
 80008c2:	4455      	add	r5, sl
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	e7a4      	b.n	8000812 <__aeabi_fadd+0x1e2>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aee      	subs	r6, r5, r3
 80008ce:	e6e8      	b.n	80006a2 <__aeabi_fadd+0x72>
 80008d0:	4653      	mov	r3, sl
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d128      	bne.n	8000928 <__aeabi_fadd+0x2f8>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x2ac>
 80008da:	e722      	b.n	8000722 <__aeabi_fadd+0xf2>
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	469c      	mov	ip, r3
 80008e2:	2400      	movs	r4, #0
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	e702      	b.n	80006ee <__aeabi_fadd+0xbe>
 80008e8:	002a      	movs	r2, r5
 80008ea:	4452      	add	r2, sl
 80008ec:	e73b      	b.n	8000766 <__aeabi_fadd+0x136>
 80008ee:	4653      	mov	r3, sl
 80008f0:	1b5a      	subs	r2, r3, r5
 80008f2:	e6d1      	b.n	8000698 <__aeabi_fadd+0x68>
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x2ca>
 80008f8:	e714      	b.n	8000724 <__aeabi_fadd+0xf4>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2d0>
 80008fe:	e712      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	03db      	lsls	r3, r3, #15
 8000904:	421a      	tst	r2, r3
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x2da>
 8000908:	e70d      	b.n	8000726 <__aeabi_fadd+0xf6>
 800090a:	4641      	mov	r1, r8
 800090c:	4219      	tst	r1, r3
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0x2e2>
 8000910:	e709      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000912:	4642      	mov	r2, r8
 8000914:	e707      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000916:	000c      	movs	r4, r1
 8000918:	0037      	movs	r7, r6
 800091a:	1aaa      	subs	r2, r5, r2
 800091c:	e6bc      	b.n	8000698 <__aeabi_fadd+0x68>
 800091e:	2d00      	cmp	r5, #0
 8000920:	d013      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000922:	000c      	movs	r4, r1
 8000924:	46c4      	mov	ip, r8
 8000926:	e6e2      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x2fe>
 800092c:	e6fb      	b.n	8000726 <__aeabi_fadd+0xf6>
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	03db      	lsls	r3, r3, #15
 8000932:	421a      	tst	r2, r3
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x308>
 8000936:	e6f6      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000938:	4640      	mov	r0, r8
 800093a:	4218      	tst	r0, r3
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x310>
 800093e:	e6f2      	b.n	8000726 <__aeabi_fadd+0xf6>
 8000940:	000c      	movs	r4, r1
 8000942:	e6ef      	b.n	8000724 <__aeabi_fadd+0xf4>
 8000944:	2a00      	cmp	r2, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x31a>
 8000948:	e763      	b.n	8000812 <__aeabi_fadd+0x1e2>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	4694      	mov	ip, r2
 8000950:	e6cd      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000952:	46c4      	mov	ip, r8
 8000954:	e6cb      	b.n	80006ee <__aeabi_fadd+0xbe>
 8000956:	002a      	movs	r2, r5
 8000958:	0037      	movs	r7, r6
 800095a:	4452      	add	r2, sl
 800095c:	e703      	b.n	8000766 <__aeabi_fadd+0x136>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fdiv>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	464f      	mov	r7, r9
 800096c:	4646      	mov	r6, r8
 800096e:	46d6      	mov	lr, sl
 8000970:	0245      	lsls	r5, r0, #9
 8000972:	b5c0      	push	{r6, r7, lr}
 8000974:	0047      	lsls	r7, r0, #1
 8000976:	1c0c      	adds	r4, r1, #0
 8000978:	0a6d      	lsrs	r5, r5, #9
 800097a:	0e3f      	lsrs	r7, r7, #24
 800097c:	0fc6      	lsrs	r6, r0, #31
 800097e:	2f00      	cmp	r7, #0
 8000980:	d066      	beq.n	8000a50 <__aeabi_fdiv+0xe8>
 8000982:	2fff      	cmp	r7, #255	; 0xff
 8000984:	d06c      	beq.n	8000a60 <__aeabi_fdiv+0xf8>
 8000986:	2300      	movs	r3, #0
 8000988:	00ea      	lsls	r2, r5, #3
 800098a:	2580      	movs	r5, #128	; 0x80
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	04ed      	lsls	r5, r5, #19
 8000992:	4315      	orrs	r5, r2
 8000994:	3f7f      	subs	r7, #127	; 0x7f
 8000996:	0260      	lsls	r0, r4, #9
 8000998:	0061      	lsls	r1, r4, #1
 800099a:	0a43      	lsrs	r3, r0, #9
 800099c:	4698      	mov	r8, r3
 800099e:	0e09      	lsrs	r1, r1, #24
 80009a0:	0fe4      	lsrs	r4, r4, #31
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d048      	beq.n	8000a38 <__aeabi_fdiv+0xd0>
 80009a6:	29ff      	cmp	r1, #255	; 0xff
 80009a8:	d010      	beq.n	80009cc <__aeabi_fdiv+0x64>
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	00d8      	lsls	r0, r3, #3
 80009ae:	04d2      	lsls	r2, r2, #19
 80009b0:	4302      	orrs	r2, r0
 80009b2:	4690      	mov	r8, r2
 80009b4:	2000      	movs	r0, #0
 80009b6:	397f      	subs	r1, #127	; 0x7f
 80009b8:	464a      	mov	r2, r9
 80009ba:	0033      	movs	r3, r6
 80009bc:	1a7f      	subs	r7, r7, r1
 80009be:	4302      	orrs	r2, r0
 80009c0:	496c      	ldr	r1, [pc, #432]	; (8000b74 <__aeabi_fdiv+0x20c>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	588a      	ldr	r2, [r1, r2]
 80009c6:	4063      	eors	r3, r4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4697      	mov	pc, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d16d      	bne.n	8000aac <__aeabi_fdiv+0x144>
 80009d0:	2002      	movs	r0, #2
 80009d2:	3fff      	subs	r7, #255	; 0xff
 80009d4:	e033      	b.n	8000a3e <__aeabi_fdiv+0xd6>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4698      	mov	r8, r3
 80009da:	0026      	movs	r6, r4
 80009dc:	4645      	mov	r5, r8
 80009de:	4682      	mov	sl, r0
 80009e0:	4653      	mov	r3, sl
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fdiv+0x80>
 80009e6:	e07f      	b.n	8000ae8 <__aeabi_fdiv+0x180>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d100      	bne.n	80009ee <__aeabi_fdiv+0x86>
 80009ec:	e094      	b.n	8000b18 <__aeabi_fdiv+0x1b0>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d017      	beq.n	8000a22 <__aeabi_fdiv+0xba>
 80009f2:	0038      	movs	r0, r7
 80009f4:	307f      	adds	r0, #127	; 0x7f
 80009f6:	2800      	cmp	r0, #0
 80009f8:	dd5f      	ble.n	8000aba <__aeabi_fdiv+0x152>
 80009fa:	076b      	lsls	r3, r5, #29
 80009fc:	d004      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 80009fe:	230f      	movs	r3, #15
 8000a00:	402b      	ands	r3, r5
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fdiv+0xa0>
 8000a06:	3504      	adds	r5, #4
 8000a08:	012b      	lsls	r3, r5, #4
 8000a0a:	d503      	bpl.n	8000a14 <__aeabi_fdiv+0xac>
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <__aeabi_fdiv+0x210>)
 8000a10:	3080      	adds	r0, #128	; 0x80
 8000a12:	401d      	ands	r5, r3
 8000a14:	28fe      	cmp	r0, #254	; 0xfe
 8000a16:	dc67      	bgt.n	8000ae8 <__aeabi_fdiv+0x180>
 8000a18:	01ad      	lsls	r5, r5, #6
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	b2c0      	uxtb	r0, r0
 8000a1e:	e002      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a20:	001e      	movs	r6, r3
 8000a22:	2000      	movs	r0, #0
 8000a24:	2500      	movs	r5, #0
 8000a26:	05c0      	lsls	r0, r0, #23
 8000a28:	4328      	orrs	r0, r5
 8000a2a:	07f6      	lsls	r6, r6, #31
 8000a2c:	4330      	orrs	r0, r6
 8000a2e:	bce0      	pop	{r5, r6, r7}
 8000a30:	46ba      	mov	sl, r7
 8000a32:	46b1      	mov	r9, r6
 8000a34:	46a8      	mov	r8, r5
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <__aeabi_fdiv+0x12c>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	464a      	mov	r2, r9
 8000a40:	0033      	movs	r3, r6
 8000a42:	494e      	ldr	r1, [pc, #312]	; (8000b7c <__aeabi_fdiv+0x214>)
 8000a44:	4302      	orrs	r2, r0
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	588a      	ldr	r2, [r1, r2]
 8000a4a:	4063      	eors	r3, r4
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4697      	mov	pc, r2
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d113      	bne.n	8000a7c <__aeabi_fdiv+0x114>
 8000a54:	2304      	movs	r3, #4
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e79a      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d105      	bne.n	8000a70 <__aeabi_fdiv+0x108>
 8000a64:	2308      	movs	r3, #8
 8000a66:	4699      	mov	r9, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	27ff      	movs	r7, #255	; 0xff
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	e792      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a70:	230c      	movs	r3, #12
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b09      	subs	r3, #9
 8000a76:	27ff      	movs	r7, #255	; 0xff
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e78c      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	f002 fba9 	bl	80031d4 <__clzsi2>
 8000a82:	2776      	movs	r7, #118	; 0x76
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409d      	lsls	r5, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	427f      	negs	r7, r7
 8000a8c:	4699      	mov	r9, r3
 8000a8e:	469a      	mov	sl, r3
 8000a90:	1a3f      	subs	r7, r7, r0
 8000a92:	e780      	b.n	8000996 <__aeabi_fdiv+0x2e>
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 fb9d 	bl	80031d4 <__clzsi2>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	1f43      	subs	r3, r0, #5
 8000a9e:	2176      	movs	r1, #118	; 0x76
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	4690      	mov	r8, r2
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e785      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000aac:	21ff      	movs	r1, #255	; 0xff
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fdiv+0x50>
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	20ff      	movs	r0, #255	; 0xff
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	e7b5      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aba:	2301      	movs	r3, #1
 8000abc:	1a1b      	subs	r3, r3, r0
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	dcaf      	bgt.n	8000a22 <__aeabi_fdiv+0xba>
 8000ac2:	379e      	adds	r7, #158	; 0x9e
 8000ac4:	0029      	movs	r1, r5
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	1e6a      	subs	r2, r5, #1
 8000acc:	4195      	sbcs	r5, r2
 8000ace:	430d      	orrs	r5, r1
 8000ad0:	076b      	lsls	r3, r5, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	402b      	ands	r3, r5
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fdiv+0x176>
 8000adc:	3504      	adds	r5, #4
 8000ade:	016b      	lsls	r3, r5, #5
 8000ae0:	d544      	bpl.n	8000b6c <__aeabi_fdiv+0x204>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e79e      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	2500      	movs	r5, #0
 8000aec:	e79b      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000aee:	2580      	movs	r5, #128	; 0x80
 8000af0:	2600      	movs	r6, #0
 8000af2:	20ff      	movs	r0, #255	; 0xff
 8000af4:	03ed      	lsls	r5, r5, #15
 8000af6:	e796      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000af8:	2300      	movs	r3, #0
 8000afa:	4698      	mov	r8, r3
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	03c0      	lsls	r0, r0, #15
 8000b00:	4205      	tst	r5, r0
 8000b02:	d009      	beq.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b04:	4643      	mov	r3, r8
 8000b06:	4203      	tst	r3, r0
 8000b08:	d106      	bne.n	8000b18 <__aeabi_fdiv+0x1b0>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	4305      	orrs	r5, r0
 8000b0e:	026d      	lsls	r5, r5, #9
 8000b10:	0026      	movs	r6, r4
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	e786      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b18:	2080      	movs	r0, #128	; 0x80
 8000b1a:	03c0      	lsls	r0, r0, #15
 8000b1c:	4305      	orrs	r5, r0
 8000b1e:	026d      	lsls	r5, r5, #9
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	0a6d      	lsrs	r5, r5, #9
 8000b24:	e77f      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b26:	4641      	mov	r1, r8
 8000b28:	016a      	lsls	r2, r5, #5
 8000b2a:	0148      	lsls	r0, r1, #5
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	d219      	bcs.n	8000b64 <__aeabi_fdiv+0x1fc>
 8000b30:	211b      	movs	r1, #27
 8000b32:	2500      	movs	r5, #0
 8000b34:	3f01      	subs	r7, #1
 8000b36:	2601      	movs	r6, #1
 8000b38:	0014      	movs	r4, r2
 8000b3a:	006d      	lsls	r5, r5, #1
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	db01      	blt.n	8000b46 <__aeabi_fdiv+0x1de>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d801      	bhi.n	8000b4a <__aeabi_fdiv+0x1e2>
 8000b46:	1a12      	subs	r2, r2, r0
 8000b48:	4335      	orrs	r5, r6
 8000b4a:	3901      	subs	r1, #1
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d1f3      	bne.n	8000b38 <__aeabi_fdiv+0x1d0>
 8000b50:	1e50      	subs	r0, r2, #1
 8000b52:	4182      	sbcs	r2, r0
 8000b54:	0038      	movs	r0, r7
 8000b56:	307f      	adds	r0, #127	; 0x7f
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4315      	orrs	r5, r2
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_fdiv+0x1fa>
 8000b60:	e74b      	b.n	80009fa <__aeabi_fdiv+0x92>
 8000b62:	e7aa      	b.n	8000aba <__aeabi_fdiv+0x152>
 8000b64:	211a      	movs	r1, #26
 8000b66:	2501      	movs	r5, #1
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	e7e4      	b.n	8000b36 <__aeabi_fdiv+0x1ce>
 8000b6c:	01ad      	lsls	r5, r5, #6
 8000b6e:	2000      	movs	r0, #0
 8000b70:	0a6d      	lsrs	r5, r5, #9
 8000b72:	e758      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b74:	080161ac 	.word	0x080161ac
 8000b78:	f7ffffff 	.word	0xf7ffffff
 8000b7c:	080161ec 	.word	0x080161ec

08000b80 <__eqsf2>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	024e      	lsls	r6, r1, #9
 8000b86:	004c      	lsls	r4, r1, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__eqsf2+0x3a>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d011      	beq.n	8000bc2 <__eqsf2+0x42>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	d000      	beq.n	8000ba6 <__eqsf2+0x26>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x24>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d00d      	beq.n	8000bca <__eqsf2+0x4a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1e45      	subs	r5, r0, #1
 8000bb6:	41a8      	sbcs	r0, r5
 8000bb8:	e7f4      	b.n	8000ba4 <__eqsf2+0x24>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc0:	e7eb      	b.n	8000b9a <__eqsf2+0x1a>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc8:	e7e9      	b.n	8000b9e <__eqsf2+0x1e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__eqsf2+0x24>
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__gesf2>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0246      	lsls	r6, r0, #9
 8000bd6:	024d      	lsls	r5, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01f      	beq.n	8000c2a <__gesf2+0x5a>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d010      	beq.n	8000c10 <__gesf2+0x40>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11f      	bne.n	8000c32 <__gesf2+0x62>
 8000bf2:	4271      	negs	r1, r6
 8000bf4:	4171      	adcs	r1, r6
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d101      	bne.n	8000bfe <__gesf2+0x2e>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d01e      	beq.n	8000c3c <__gesf2+0x6c>
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d10e      	bne.n	8000c20 <__gesf2+0x50>
 8000c02:	4283      	cmp	r3, r0
 8000c04:	d01e      	beq.n	8000c44 <__gesf2+0x74>
 8000c06:	2102      	movs	r1, #2
 8000c08:	1e58      	subs	r0, r3, #1
 8000c0a:	4008      	ands	r0, r1
 8000c0c:	3801      	subs	r0, #1
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d126      	bne.n	8000c62 <__gesf2+0x92>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f4      	bne.n	8000c02 <__gesf2+0x32>
 8000c18:	4271      	negs	r1, r6
 8000c1a:	4171      	adcs	r1, r6
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d0f0      	beq.n	8000c02 <__gesf2+0x32>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f4      	bne.n	8000c0e <__gesf2+0x3e>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f1      	b.n	8000c0e <__gesf2+0x3e>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d119      	bne.n	8000c62 <__gesf2+0x92>
 8000c2e:	2cff      	cmp	r4, #255	; 0xff
 8000c30:	d0ee      	beq.n	8000c10 <__gesf2+0x40>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d1e5      	bne.n	8000c02 <__gesf2+0x32>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d1e3      	bne.n	8000c02 <__gesf2+0x32>
 8000c3a:	e7e4      	b.n	8000c06 <__gesf2+0x36>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0e5      	beq.n	8000c0e <__gesf2+0x3e>
 8000c42:	e7e0      	b.n	8000c06 <__gesf2+0x36>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	dc05      	bgt.n	8000c54 <__gesf2+0x84>
 8000c48:	dbea      	blt.n	8000c20 <__gesf2+0x50>
 8000c4a:	42ae      	cmp	r6, r5
 8000c4c:	d802      	bhi.n	8000c54 <__gesf2+0x84>
 8000c4e:	d3e7      	bcc.n	8000c20 <__gesf2+0x50>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e7dc      	b.n	8000c0e <__gesf2+0x3e>
 8000c54:	4241      	negs	r1, r0
 8000c56:	4141      	adcs	r1, r0
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4008      	ands	r0, r1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7d5      	b.n	8000c0e <__gesf2+0x3e>
 8000c62:	2002      	movs	r0, #2
 8000c64:	4240      	negs	r0, r0
 8000c66:	e7d2      	b.n	8000c0e <__gesf2+0x3e>

08000c68 <__lesf2>:
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	0042      	lsls	r2, r0, #1
 8000c6c:	0246      	lsls	r6, r0, #9
 8000c6e:	024d      	lsls	r5, r1, #9
 8000c70:	004c      	lsls	r4, r1, #1
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e12      	lsrs	r2, r2, #24
 8000c78:	0a6d      	lsrs	r5, r5, #9
 8000c7a:	0e24      	lsrs	r4, r4, #24
 8000c7c:	0fc8      	lsrs	r0, r1, #31
 8000c7e:	2aff      	cmp	r2, #255	; 0xff
 8000c80:	d00d      	beq.n	8000c9e <__lesf2+0x36>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d00f      	beq.n	8000ca6 <__lesf2+0x3e>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d123      	bne.n	8000cd2 <__lesf2+0x6a>
 8000c8a:	4271      	negs	r1, r6
 8000c8c:	4171      	adcs	r1, r6
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d10f      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d10d      	bne.n	8000cb2 <__lesf2+0x4a>
 8000c96:	2000      	movs	r0, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d014      	beq.n	8000cc6 <__lesf2+0x5e>
 8000c9c:	e00d      	b.n	8000cba <__lesf2+0x52>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d110      	bne.n	8000cc4 <__lesf2+0x5c>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d115      	bne.n	8000cd2 <__lesf2+0x6a>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d10c      	bne.n	8000cc4 <__lesf2+0x5c>
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d103      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cae:	4271      	negs	r1, r6
 8000cb0:	4171      	adcs	r1, r6
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d108      	bne.n	8000cc8 <__lesf2+0x60>
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	d010      	beq.n	8000cdc <__lesf2+0x74>
 8000cba:	2102      	movs	r1, #2
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	4008      	ands	r0, r1
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e000      	b.n	8000cc6 <__lesf2+0x5e>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d1fc      	bne.n	8000cc6 <__lesf2+0x5e>
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4240      	negs	r0, r0
 8000cd0:	e7f9      	b.n	8000cc6 <__lesf2+0x5e>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d1ef      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d1ed      	bne.n	8000cb6 <__lesf2+0x4e>
 8000cda:	e7ee      	b.n	8000cba <__lesf2+0x52>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	dc05      	bgt.n	8000cec <__lesf2+0x84>
 8000ce0:	dbf2      	blt.n	8000cc8 <__lesf2+0x60>
 8000ce2:	42ae      	cmp	r6, r5
 8000ce4:	d802      	bhi.n	8000cec <__lesf2+0x84>
 8000ce6:	d3ef      	bcc.n	8000cc8 <__lesf2+0x60>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7ec      	b.n	8000cc6 <__lesf2+0x5e>
 8000cec:	4241      	negs	r1, r0
 8000cee:	4141      	adcs	r1, r0
 8000cf0:	4248      	negs	r0, r1
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4008      	ands	r0, r1
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	e7e5      	b.n	8000cc6 <__lesf2+0x5e>
 8000cfa:	46c0      	nop			; (mov r8, r8)

08000cfc <__aeabi_fmul>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4657      	mov	r7, sl
 8000d00:	464e      	mov	r6, r9
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	0244      	lsls	r4, r0, #9
 8000d08:	b5e0      	push	{r5, r6, r7, lr}
 8000d0a:	0045      	lsls	r5, r0, #1
 8000d0c:	1c0f      	adds	r7, r1, #0
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	0e2d      	lsrs	r5, r5, #24
 8000d12:	0fc6      	lsrs	r6, r0, #31
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d047      	beq.n	8000da8 <__aeabi_fmul+0xac>
 8000d18:	2dff      	cmp	r5, #255	; 0xff
 8000d1a:	d04d      	beq.n	8000db8 <__aeabi_fmul+0xbc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	469a      	mov	sl, r3
 8000d22:	469b      	mov	fp, r3
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	04c0      	lsls	r0, r0, #19
 8000d28:	4304      	orrs	r4, r0
 8000d2a:	3d7f      	subs	r5, #127	; 0x7f
 8000d2c:	0278      	lsls	r0, r7, #9
 8000d2e:	0a43      	lsrs	r3, r0, #9
 8000d30:	4699      	mov	r9, r3
 8000d32:	007a      	lsls	r2, r7, #1
 8000d34:	0ffb      	lsrs	r3, r7, #31
 8000d36:	4698      	mov	r8, r3
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	d044      	beq.n	8000dc8 <__aeabi_fmul+0xcc>
 8000d3e:	2aff      	cmp	r2, #255	; 0xff
 8000d40:	d011      	beq.n	8000d66 <__aeabi_fmul+0x6a>
 8000d42:	00d8      	lsls	r0, r3, #3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	04db      	lsls	r3, r3, #19
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	18ad      	adds	r5, r5, r2
 8000d52:	4647      	mov	r7, r8
 8000d54:	4653      	mov	r3, sl
 8000d56:	4077      	eors	r7, r6
 8000d58:	1c69      	adds	r1, r5, #1
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d83f      	bhi.n	8000dde <__aeabi_fmul+0xe2>
 8000d5e:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <__aeabi_fmul+0x22c>)
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	58d3      	ldr	r3, [r2, r3]
 8000d64:	469f      	mov	pc, r3
 8000d66:	35ff      	adds	r5, #255	; 0xff
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_fmul+0x72>
 8000d6c:	e079      	b.n	8000e62 <__aeabi_fmul+0x166>
 8000d6e:	4652      	mov	r2, sl
 8000d70:	2302      	movs	r3, #2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	4692      	mov	sl, r2
 8000d76:	2002      	movs	r0, #2
 8000d78:	e7eb      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000d7a:	4647      	mov	r7, r8
 8000d7c:	464c      	mov	r4, r9
 8000d7e:	4683      	mov	fp, r0
 8000d80:	465b      	mov	r3, fp
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d028      	beq.n	8000dd8 <__aeabi_fmul+0xdc>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x90>
 8000d8a:	e0c6      	b.n	8000f1a <__aeabi_fmul+0x21e>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d14f      	bne.n	8000e30 <__aeabi_fmul+0x134>
 8000d90:	2000      	movs	r0, #0
 8000d92:	2400      	movs	r4, #0
 8000d94:	05c0      	lsls	r0, r0, #23
 8000d96:	07ff      	lsls	r7, r7, #31
 8000d98:	4320      	orrs	r0, r4
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9e:	46bb      	mov	fp, r7
 8000da0:	46b2      	mov	sl, r6
 8000da2:	46a9      	mov	r9, r5
 8000da4:	46a0      	mov	r8, r4
 8000da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d171      	bne.n	8000e90 <__aeabi_fmul+0x194>
 8000dac:	2304      	movs	r3, #4
 8000dae:	469a      	mov	sl, r3
 8000db0:	3b03      	subs	r3, #3
 8000db2:	2500      	movs	r5, #0
 8000db4:	469b      	mov	fp, r3
 8000db6:	e7b9      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d163      	bne.n	8000e84 <__aeabi_fmul+0x188>
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	3b06      	subs	r3, #6
 8000dc2:	25ff      	movs	r5, #255	; 0xff
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e7b1      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d150      	bne.n	8000e6e <__aeabi_fmul+0x172>
 8000dcc:	4652      	mov	r2, sl
 8000dce:	3301      	adds	r3, #1
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7bc      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	2400      	movs	r4, #0
 8000ddc:	e7da      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000dde:	4648      	mov	r0, r9
 8000de0:	0c26      	lsrs	r6, r4, #16
 8000de2:	0424      	lsls	r4, r4, #16
 8000de4:	0c22      	lsrs	r2, r4, #16
 8000de6:	0404      	lsls	r4, r0, #16
 8000de8:	0c24      	lsrs	r4, r4, #16
 8000dea:	464b      	mov	r3, r9
 8000dec:	0020      	movs	r0, r4
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4350      	muls	r0, r2
 8000df2:	4374      	muls	r4, r6
 8000df4:	435a      	muls	r2, r3
 8000df6:	435e      	muls	r6, r3
 8000df8:	1912      	adds	r2, r2, r4
 8000dfa:	0c03      	lsrs	r3, r0, #16
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	d903      	bls.n	8000e0a <__aeabi_fmul+0x10e>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0252      	lsls	r2, r2, #9
 8000e06:	4694      	mov	ip, r2
 8000e08:	4466      	add	r6, ip
 8000e0a:	0400      	lsls	r0, r0, #16
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	0c00      	lsrs	r0, r0, #16
 8000e10:	1812      	adds	r2, r2, r0
 8000e12:	0194      	lsls	r4, r2, #6
 8000e14:	1e60      	subs	r0, r4, #1
 8000e16:	4184      	sbcs	r4, r0
 8000e18:	0c1b      	lsrs	r3, r3, #16
 8000e1a:	0e92      	lsrs	r2, r2, #26
 8000e1c:	199b      	adds	r3, r3, r6
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	d572      	bpl.n	8000f0e <__aeabi_fmul+0x212>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	0863      	lsrs	r3, r4, #1
 8000e2c:	4004      	ands	r4, r0
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0008      	movs	r0, r1
 8000e32:	307f      	adds	r0, #127	; 0x7f
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dd3c      	ble.n	8000eb2 <__aeabi_fmul+0x1b6>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x14a>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x156>
 8000e4a:	3180      	adds	r1, #128	; 0x80
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <__aeabi_fmul+0x230>)
 8000e50:	401c      	ands	r4, r3
 8000e52:	28fe      	cmp	r0, #254	; 0xfe
 8000e54:	dcc0      	bgt.n	8000dd8 <__aeabi_fmul+0xdc>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2c0      	uxtb	r0, r0
 8000e5c:	e79a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000e5e:	0037      	movs	r7, r6
 8000e60:	e78e      	b.n	8000d80 <__aeabi_fmul+0x84>
 8000e62:	4652      	mov	r2, sl
 8000e64:	2303      	movs	r3, #3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	4692      	mov	sl, r2
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e771      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e6e:	4648      	mov	r0, r9
 8000e70:	f002 f9b0 	bl	80031d4 <__clzsi2>
 8000e74:	464a      	mov	r2, r9
 8000e76:	1f43      	subs	r3, r0, #5
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	1a2d      	subs	r5, r5, r0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	2000      	movs	r0, #0
 8000e80:	3d76      	subs	r5, #118	; 0x76
 8000e82:	e766      	b.n	8000d52 <__aeabi_fmul+0x56>
 8000e84:	230c      	movs	r3, #12
 8000e86:	469a      	mov	sl, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000e90:	0020      	movs	r0, r4
 8000e92:	f002 f99f 	bl	80031d4 <__clzsi2>
 8000e96:	2576      	movs	r5, #118	; 0x76
 8000e98:	1f43      	subs	r3, r0, #5
 8000e9a:	409c      	lsls	r4, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	1a2d      	subs	r5, r5, r0
 8000ea6:	e741      	b.n	8000d2c <__aeabi_fmul+0x30>
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	2700      	movs	r7, #0
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	03e4      	lsls	r4, r4, #15
 8000eb0:	e770      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	1a1b      	subs	r3, r3, r0
 8000eb6:	2b1b      	cmp	r3, #27
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_fmul+0x1c0>
 8000eba:	e769      	b.n	8000d90 <__aeabi_fmul+0x94>
 8000ebc:	319e      	adds	r1, #158	; 0x9e
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	1e63      	subs	r3, r4, #1
 8000ec6:	419c      	sbcs	r4, r3
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	0763      	lsls	r3, r4, #29
 8000ecc:	d004      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ece:	230f      	movs	r3, #15
 8000ed0:	4023      	ands	r3, r4
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fmul+0x1dc>
 8000ed6:	3404      	adds	r4, #4
 8000ed8:	0163      	lsls	r3, r4, #5
 8000eda:	d51a      	bpl.n	8000f12 <__aeabi_fmul+0x216>
 8000edc:	2001      	movs	r0, #1
 8000ede:	2400      	movs	r4, #0
 8000ee0:	e758      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	03c0      	lsls	r0, r0, #15
 8000ee6:	4204      	tst	r4, r0
 8000ee8:	d009      	beq.n	8000efe <__aeabi_fmul+0x202>
 8000eea:	464b      	mov	r3, r9
 8000eec:	4203      	tst	r3, r0
 8000eee:	d106      	bne.n	8000efe <__aeabi_fmul+0x202>
 8000ef0:	464c      	mov	r4, r9
 8000ef2:	4304      	orrs	r4, r0
 8000ef4:	0264      	lsls	r4, r4, #9
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	20ff      	movs	r0, #255	; 0xff
 8000efa:	0a64      	lsrs	r4, r4, #9
 8000efc:	e74a      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	03c0      	lsls	r0, r0, #15
 8000f02:	4304      	orrs	r4, r0
 8000f04:	0264      	lsls	r4, r4, #9
 8000f06:	0037      	movs	r7, r6
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	0a64      	lsrs	r4, r4, #9
 8000f0c:	e742      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f0e:	0029      	movs	r1, r5
 8000f10:	e78e      	b.n	8000e30 <__aeabi_fmul+0x134>
 8000f12:	01a4      	lsls	r4, r4, #6
 8000f14:	2000      	movs	r0, #0
 8000f16:	0a64      	lsrs	r4, r4, #9
 8000f18:	e73c      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	03c0      	lsls	r0, r0, #15
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	0264      	lsls	r4, r4, #9
 8000f22:	20ff      	movs	r0, #255	; 0xff
 8000f24:	0a64      	lsrs	r4, r4, #9
 8000f26:	e735      	b.n	8000d94 <__aeabi_fmul+0x98>
 8000f28:	0801622c 	.word	0x0801622c
 8000f2c:	f7ffffff 	.word	0xf7ffffff

08000f30 <__aeabi_fsub>:
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	4646      	mov	r6, r8
 8000f34:	46d6      	mov	lr, sl
 8000f36:	464f      	mov	r7, r9
 8000f38:	0243      	lsls	r3, r0, #9
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4694      	mov	ip, r2
 8000f40:	024a      	lsls	r2, r1, #9
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	0044      	lsls	r4, r0, #1
 8000f46:	0a56      	lsrs	r6, r2, #9
 8000f48:	1c05      	adds	r5, r0, #0
 8000f4a:	46b0      	mov	r8, r6
 8000f4c:	0e24      	lsrs	r4, r4, #24
 8000f4e:	004e      	lsls	r6, r1, #1
 8000f50:	0992      	lsrs	r2, r2, #6
 8000f52:	001f      	movs	r7, r3
 8000f54:	0020      	movs	r0, r4
 8000f56:	4692      	mov	sl, r2
 8000f58:	0fed      	lsrs	r5, r5, #31
 8000f5a:	0e36      	lsrs	r6, r6, #24
 8000f5c:	0fc9      	lsrs	r1, r1, #31
 8000f5e:	2eff      	cmp	r6, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x34>
 8000f62:	e07f      	b.n	8001064 <__aeabi_fsub+0x134>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4051      	eors	r1, r2
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d051      	beq.n	8001010 <__aeabi_fsub+0xe0>
 8000f6c:	1ba2      	subs	r2, r4, r6
 8000f6e:	4691      	mov	r9, r2
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_fsub+0x46>
 8000f74:	e07e      	b.n	8001074 <__aeabi_fsub+0x144>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x4c>
 8000f7a:	e099      	b.n	80010b0 <__aeabi_fsub+0x180>
 8000f7c:	2cff      	cmp	r4, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x52>
 8000f80:	e08c      	b.n	800109c <__aeabi_fsub+0x16c>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4652      	mov	r2, sl
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4692      	mov	sl, r2
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2a1b      	cmp	r2, #27
 8000f92:	dc08      	bgt.n	8000fa6 <__aeabi_fsub+0x76>
 8000f94:	4653      	mov	r3, sl
 8000f96:	2120      	movs	r1, #32
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	408a      	lsls	r2, r1
 8000fa0:	1e51      	subs	r1, r2, #1
 8000fa2:	418a      	sbcs	r2, r1
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	d400      	bmi.n	8000fb0 <__aeabi_fsub+0x80>
 8000fae:	e0f3      	b.n	8001198 <__aeabi_fsub+0x268>
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	099e      	lsrs	r6, r3, #6
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	f002 f90d 	bl	80031d4 <__clzsi2>
 8000fba:	3805      	subs	r0, #5
 8000fbc:	4086      	lsls	r6, r0
 8000fbe:	4284      	cmp	r4, r0
 8000fc0:	dd00      	ble.n	8000fc4 <__aeabi_fsub+0x94>
 8000fc2:	e0f7      	b.n	80011b4 <__aeabi_fsub+0x284>
 8000fc4:	0032      	movs	r2, r6
 8000fc6:	1b04      	subs	r4, r0, r4
 8000fc8:	2020      	movs	r0, #32
 8000fca:	3401      	adds	r4, #1
 8000fcc:	40e2      	lsrs	r2, r4
 8000fce:	1b04      	subs	r4, r0, r4
 8000fd0:	40a6      	lsls	r6, r4
 8000fd2:	0033      	movs	r3, r6
 8000fd4:	1e5e      	subs	r6, r3, #1
 8000fd6:	41b3      	sbcs	r3, r6
 8000fd8:	2400      	movs	r4, #0
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	d004      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	2a04      	cmp	r2, #4
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0xba>
 8000fe8:	3304      	adds	r3, #4
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0xc0>
 8000fee:	e0d6      	b.n	800119e <__aeabi_fsub+0x26e>
 8000ff0:	1c62      	adds	r2, r4, #1
 8000ff2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0xc8>
 8000ff6:	e0da      	b.n	80011ae <__aeabi_fsub+0x27e>
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	0a5f      	lsrs	r7, r3, #9
 8000ffc:	b2d0      	uxtb	r0, r2
 8000ffe:	05c0      	lsls	r0, r0, #23
 8001000:	4338      	orrs	r0, r7
 8001002:	07ed      	lsls	r5, r5, #31
 8001004:	4328      	orrs	r0, r5
 8001006:	bce0      	pop	{r5, r6, r7}
 8001008:	46ba      	mov	sl, r7
 800100a:	46b1      	mov	r9, r6
 800100c:	46a8      	mov	r8, r5
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1ba2      	subs	r2, r4, r6
 8001012:	4691      	mov	r9, r2
 8001014:	2a00      	cmp	r2, #0
 8001016:	dd63      	ble.n	80010e0 <__aeabi_fsub+0x1b0>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0xee>
 800101c:	e099      	b.n	8001152 <__aeabi_fsub+0x222>
 800101e:	2cff      	cmp	r4, #255	; 0xff
 8001020:	d03c      	beq.n	800109c <__aeabi_fsub+0x16c>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4652      	mov	r2, sl
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	431a      	orrs	r2, r3
 800102a:	4692      	mov	sl, r2
 800102c:	464a      	mov	r2, r9
 800102e:	2301      	movs	r3, #1
 8001030:	2a1b      	cmp	r2, #27
 8001032:	dc08      	bgt.n	8001046 <__aeabi_fsub+0x116>
 8001034:	4653      	mov	r3, sl
 8001036:	2120      	movs	r1, #32
 8001038:	40d3      	lsrs	r3, r2
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4652      	mov	r2, sl
 800103e:	408a      	lsls	r2, r1
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	418a      	sbcs	r2, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	4463      	add	r3, ip
 8001048:	015a      	lsls	r2, r3, #5
 800104a:	d400      	bmi.n	800104e <__aeabi_fsub+0x11e>
 800104c:	e0a4      	b.n	8001198 <__aeabi_fsub+0x268>
 800104e:	3401      	adds	r4, #1
 8001050:	2cff      	cmp	r4, #255	; 0xff
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x126>
 8001054:	e0ab      	b.n	80011ae <__aeabi_fsub+0x27e>
 8001056:	2201      	movs	r2, #1
 8001058:	4997      	ldr	r1, [pc, #604]	; (80012b8 <__aeabi_fsub+0x388>)
 800105a:	401a      	ands	r2, r3
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	400b      	ands	r3, r1
 8001060:	4313      	orrs	r3, r2
 8001062:	e7bb      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d032      	beq.n	80010ce <__aeabi_fsub+0x19e>
 8001068:	428d      	cmp	r5, r1
 800106a:	d035      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	4252      	negs	r2, r2
 8001070:	4691      	mov	r9, r2
 8001072:	44a1      	add	r9, r4
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d051      	beq.n	800111e <__aeabi_fsub+0x1ee>
 800107a:	1b30      	subs	r0, r6, r4
 800107c:	2c00      	cmp	r4, #0
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x152>
 8001080:	e09c      	b.n	80011bc <__aeabi_fsub+0x28c>
 8001082:	4663      	mov	r3, ip
 8001084:	2b00      	cmp	r3, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x15a>
 8001088:	e0df      	b.n	800124a <__aeabi_fsub+0x31a>
 800108a:	3801      	subs	r0, #1
 800108c:	2800      	cmp	r0, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x162>
 8001090:	e0f7      	b.n	8001282 <__aeabi_fsub+0x352>
 8001092:	2eff      	cmp	r6, #255	; 0xff
 8001094:	d000      	beq.n	8001098 <__aeabi_fsub+0x168>
 8001096:	e099      	b.n	80011cc <__aeabi_fsub+0x29c>
 8001098:	000d      	movs	r5, r1
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_fsub+0x172>
 80010a0:	e085      	b.n	80011ae <__aeabi_fsub+0x27e>
 80010a2:	2780      	movs	r7, #128	; 0x80
 80010a4:	03ff      	lsls	r7, r7, #15
 80010a6:	431f      	orrs	r7, r3
 80010a8:	027f      	lsls	r7, r7, #9
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	0a7f      	lsrs	r7, r7, #9
 80010ae:	e7a6      	b.n	8000ffe <__aeabi_fsub+0xce>
 80010b0:	4652      	mov	r2, sl
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d074      	beq.n	80011a0 <__aeabi_fsub+0x270>
 80010b6:	2201      	movs	r2, #1
 80010b8:	4252      	negs	r2, r2
 80010ba:	4690      	mov	r8, r2
 80010bc:	44c1      	add	r9, r8
 80010be:	464a      	mov	r2, r9
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_fsub+0x196>
 80010c4:	e0c8      	b.n	8001258 <__aeabi_fsub+0x328>
 80010c6:	2cff      	cmp	r4, #255	; 0xff
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x19c>
 80010ca:	e75f      	b.n	8000f8c <__aeabi_fsub+0x5c>
 80010cc:	e7e6      	b.n	800109c <__aeabi_fsub+0x16c>
 80010ce:	2201      	movs	r2, #1
 80010d0:	4051      	eors	r1, r2
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x1a8>
 80010d6:	e749      	b.n	8000f6c <__aeabi_fsub+0x3c>
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	4252      	negs	r2, r2
 80010dc:	4691      	mov	r9, r2
 80010de:	44a1      	add	r9, r4
 80010e0:	464a      	mov	r2, r9
 80010e2:	2a00      	cmp	r2, #0
 80010e4:	d043      	beq.n	800116e <__aeabi_fsub+0x23e>
 80010e6:	1b31      	subs	r1, r6, r4
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x1be>
 80010ec:	e08c      	b.n	8001208 <__aeabi_fsub+0x2d8>
 80010ee:	2eff      	cmp	r6, #255	; 0xff
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1c4>
 80010f2:	e092      	b.n	800121a <__aeabi_fsub+0x2ea>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	4662      	mov	r2, ip
 80010f8:	04db      	lsls	r3, r3, #19
 80010fa:	431a      	orrs	r2, r3
 80010fc:	4694      	mov	ip, r2
 80010fe:	2301      	movs	r3, #1
 8001100:	291b      	cmp	r1, #27
 8001102:	dc09      	bgt.n	8001118 <__aeabi_fsub+0x1e8>
 8001104:	2020      	movs	r0, #32
 8001106:	4663      	mov	r3, ip
 8001108:	4662      	mov	r2, ip
 800110a:	40cb      	lsrs	r3, r1
 800110c:	1a41      	subs	r1, r0, r1
 800110e:	408a      	lsls	r2, r1
 8001110:	0011      	movs	r1, r2
 8001112:	1e48      	subs	r0, r1, #1
 8001114:	4181      	sbcs	r1, r0
 8001116:	430b      	orrs	r3, r1
 8001118:	0034      	movs	r4, r6
 800111a:	4453      	add	r3, sl
 800111c:	e794      	b.n	8001048 <__aeabi_fsub+0x118>
 800111e:	22fe      	movs	r2, #254	; 0xfe
 8001120:	1c66      	adds	r6, r4, #1
 8001122:	4232      	tst	r2, r6
 8001124:	d164      	bne.n	80011f0 <__aeabi_fsub+0x2c0>
 8001126:	2c00      	cmp	r4, #0
 8001128:	d000      	beq.n	800112c <__aeabi_fsub+0x1fc>
 800112a:	e082      	b.n	8001232 <__aeabi_fsub+0x302>
 800112c:	4663      	mov	r3, ip
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x204>
 8001132:	e0ab      	b.n	800128c <__aeabi_fsub+0x35c>
 8001134:	4653      	mov	r3, sl
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x20c>
 800113a:	e760      	b.n	8000ffe <__aeabi_fsub+0xce>
 800113c:	4663      	mov	r3, ip
 800113e:	4652      	mov	r2, sl
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	d400      	bmi.n	8001148 <__aeabi_fsub+0x218>
 8001146:	e0aa      	b.n	800129e <__aeabi_fsub+0x36e>
 8001148:	4663      	mov	r3, ip
 800114a:	4652      	mov	r2, sl
 800114c:	000d      	movs	r5, r1
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	e744      	b.n	8000fdc <__aeabi_fsub+0xac>
 8001152:	4652      	mov	r2, sl
 8001154:	2a00      	cmp	r2, #0
 8001156:	d023      	beq.n	80011a0 <__aeabi_fsub+0x270>
 8001158:	2201      	movs	r2, #1
 800115a:	4252      	negs	r2, r2
 800115c:	4690      	mov	r8, r2
 800115e:	44c1      	add	r9, r8
 8001160:	464a      	mov	r2, r9
 8001162:	2a00      	cmp	r2, #0
 8001164:	d075      	beq.n	8001252 <__aeabi_fsub+0x322>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x23c>
 800116a:	e75f      	b.n	800102c <__aeabi_fsub+0xfc>
 800116c:	e796      	b.n	800109c <__aeabi_fsub+0x16c>
 800116e:	26fe      	movs	r6, #254	; 0xfe
 8001170:	3401      	adds	r4, #1
 8001172:	4226      	tst	r6, r4
 8001174:	d153      	bne.n	800121e <__aeabi_fsub+0x2ee>
 8001176:	2800      	cmp	r0, #0
 8001178:	d172      	bne.n	8001260 <__aeabi_fsub+0x330>
 800117a:	4663      	mov	r3, ip
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x252>
 8001180:	e093      	b.n	80012aa <__aeabi_fsub+0x37a>
 8001182:	4653      	mov	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x25a>
 8001188:	e739      	b.n	8000ffe <__aeabi_fsub+0xce>
 800118a:	4463      	add	r3, ip
 800118c:	2400      	movs	r4, #0
 800118e:	015a      	lsls	r2, r3, #5
 8001190:	d502      	bpl.n	8001198 <__aeabi_fsub+0x268>
 8001192:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <__aeabi_fsub+0x38c>)
 8001194:	3401      	adds	r4, #1
 8001196:	4013      	ands	r3, r2
 8001198:	075a      	lsls	r2, r3, #29
 800119a:	d000      	beq.n	800119e <__aeabi_fsub+0x26e>
 800119c:	e720      	b.n	8000fe0 <__aeabi_fsub+0xb0>
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	2cff      	cmp	r4, #255	; 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x276>
 80011a4:	e77a      	b.n	800109c <__aeabi_fsub+0x16c>
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	0a5f      	lsrs	r7, r3, #9
 80011aa:	b2e0      	uxtb	r0, r4
 80011ac:	e727      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	2700      	movs	r7, #0
 80011b2:	e724      	b.n	8000ffe <__aeabi_fsub+0xce>
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <__aeabi_fsub+0x38c>)
 80011b6:	1a24      	subs	r4, r4, r0
 80011b8:	4033      	ands	r3, r6
 80011ba:	e70f      	b.n	8000fdc <__aeabi_fsub+0xac>
 80011bc:	2eff      	cmp	r6, #255	; 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x292>
 80011c0:	e76a      	b.n	8001098 <__aeabi_fsub+0x168>
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	4662      	mov	r2, ip
 80011c6:	04db      	lsls	r3, r3, #19
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4694      	mov	ip, r2
 80011cc:	2301      	movs	r3, #1
 80011ce:	281b      	cmp	r0, #27
 80011d0:	dc09      	bgt.n	80011e6 <__aeabi_fsub+0x2b6>
 80011d2:	2420      	movs	r4, #32
 80011d4:	4663      	mov	r3, ip
 80011d6:	4662      	mov	r2, ip
 80011d8:	40c3      	lsrs	r3, r0
 80011da:	1a20      	subs	r0, r4, r0
 80011dc:	4082      	lsls	r2, r0
 80011de:	0010      	movs	r0, r2
 80011e0:	1e44      	subs	r4, r0, #1
 80011e2:	41a0      	sbcs	r0, r4
 80011e4:	4303      	orrs	r3, r0
 80011e6:	4652      	mov	r2, sl
 80011e8:	000d      	movs	r5, r1
 80011ea:	0034      	movs	r4, r6
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	e6dc      	b.n	8000faa <__aeabi_fsub+0x7a>
 80011f0:	4663      	mov	r3, ip
 80011f2:	4652      	mov	r2, sl
 80011f4:	1a9e      	subs	r6, r3, r2
 80011f6:	0173      	lsls	r3, r6, #5
 80011f8:	d417      	bmi.n	800122a <__aeabi_fsub+0x2fa>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d000      	beq.n	8001200 <__aeabi_fsub+0x2d0>
 80011fe:	e6d9      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001200:	2500      	movs	r5, #0
 8001202:	2000      	movs	r0, #0
 8001204:	2700      	movs	r7, #0
 8001206:	e6fa      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001208:	4663      	mov	r3, ip
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <__aeabi_fsub+0x368>
 800120e:	3901      	subs	r1, #1
 8001210:	2900      	cmp	r1, #0
 8001212:	d04c      	beq.n	80012ae <__aeabi_fsub+0x37e>
 8001214:	2eff      	cmp	r6, #255	; 0xff
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001218:	e771      	b.n	80010fe <__aeabi_fsub+0x1ce>
 800121a:	4643      	mov	r3, r8
 800121c:	e73e      	b.n	800109c <__aeabi_fsub+0x16c>
 800121e:	2cff      	cmp	r4, #255	; 0xff
 8001220:	d0c5      	beq.n	80011ae <__aeabi_fsub+0x27e>
 8001222:	4652      	mov	r2, sl
 8001224:	4462      	add	r2, ip
 8001226:	0853      	lsrs	r3, r2, #1
 8001228:	e7b6      	b.n	8001198 <__aeabi_fsub+0x268>
 800122a:	4663      	mov	r3, ip
 800122c:	000d      	movs	r5, r1
 800122e:	1ad6      	subs	r6, r2, r3
 8001230:	e6c0      	b.n	8000fb4 <__aeabi_fsub+0x84>
 8001232:	4662      	mov	r2, ip
 8001234:	2a00      	cmp	r2, #0
 8001236:	d116      	bne.n	8001266 <__aeabi_fsub+0x336>
 8001238:	4653      	mov	r3, sl
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x310>
 800123e:	e72b      	b.n	8001098 <__aeabi_fsub+0x168>
 8001240:	2780      	movs	r7, #128	; 0x80
 8001242:	2500      	movs	r5, #0
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	03ff      	lsls	r7, r7, #15
 8001248:	e6d9      	b.n	8000ffe <__aeabi_fsub+0xce>
 800124a:	000d      	movs	r5, r1
 800124c:	4643      	mov	r3, r8
 800124e:	0034      	movs	r4, r6
 8001250:	e7a6      	b.n	80011a0 <__aeabi_fsub+0x270>
 8001252:	4653      	mov	r3, sl
 8001254:	4463      	add	r3, ip
 8001256:	e6f7      	b.n	8001048 <__aeabi_fsub+0x118>
 8001258:	4663      	mov	r3, ip
 800125a:	4652      	mov	r2, sl
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	e6a4      	b.n	8000faa <__aeabi_fsub+0x7a>
 8001260:	4662      	mov	r2, ip
 8001262:	2a00      	cmp	r2, #0
 8001264:	d0d9      	beq.n	800121a <__aeabi_fsub+0x2ea>
 8001266:	4652      	mov	r2, sl
 8001268:	2a00      	cmp	r2, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x33e>
 800126c:	e716      	b.n	800109c <__aeabi_fsub+0x16c>
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	03d2      	lsls	r2, r2, #15
 8001272:	4213      	tst	r3, r2
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x348>
 8001276:	e711      	b.n	800109c <__aeabi_fsub+0x16c>
 8001278:	4640      	mov	r0, r8
 800127a:	4210      	tst	r0, r2
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x350>
 800127e:	e70d      	b.n	800109c <__aeabi_fsub+0x16c>
 8001280:	e70a      	b.n	8001098 <__aeabi_fsub+0x168>
 8001282:	4652      	mov	r2, sl
 8001284:	000d      	movs	r5, r1
 8001286:	0034      	movs	r4, r6
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	e68e      	b.n	8000faa <__aeabi_fsub+0x7a>
 800128c:	4653      	mov	r3, sl
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <__aeabi_fsub+0x374>
 8001292:	000d      	movs	r5, r1
 8001294:	4647      	mov	r7, r8
 8001296:	e6b2      	b.n	8000ffe <__aeabi_fsub+0xce>
 8001298:	4643      	mov	r3, r8
 800129a:	0034      	movs	r4, r6
 800129c:	e780      	b.n	80011a0 <__aeabi_fsub+0x270>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d000      	beq.n	80012a4 <__aeabi_fsub+0x374>
 80012a2:	e779      	b.n	8001198 <__aeabi_fsub+0x268>
 80012a4:	2500      	movs	r5, #0
 80012a6:	2700      	movs	r7, #0
 80012a8:	e6a9      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012aa:	4647      	mov	r7, r8
 80012ac:	e6a7      	b.n	8000ffe <__aeabi_fsub+0xce>
 80012ae:	4653      	mov	r3, sl
 80012b0:	0034      	movs	r4, r6
 80012b2:	4463      	add	r3, ip
 80012b4:	e6c8      	b.n	8001048 <__aeabi_fsub+0x118>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	7dffffff 	.word	0x7dffffff
 80012bc:	fbffffff 	.word	0xfbffffff

080012c0 <__aeabi_f2iz>:
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	0042      	lsls	r2, r0, #1
 80012c4:	0fc3      	lsrs	r3, r0, #31
 80012c6:	0a49      	lsrs	r1, r1, #9
 80012c8:	2000      	movs	r0, #0
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	2a7e      	cmp	r2, #126	; 0x7e
 80012ce:	d903      	bls.n	80012d8 <__aeabi_f2iz+0x18>
 80012d0:	2a9d      	cmp	r2, #157	; 0x9d
 80012d2:	d902      	bls.n	80012da <__aeabi_f2iz+0x1a>
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <__aeabi_f2iz+0x3c>)
 80012d6:	1898      	adds	r0, r3, r2
 80012d8:	4770      	bx	lr
 80012da:	2080      	movs	r0, #128	; 0x80
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	4301      	orrs	r1, r0
 80012e0:	2a95      	cmp	r2, #149	; 0x95
 80012e2:	dc07      	bgt.n	80012f4 <__aeabi_f2iz+0x34>
 80012e4:	2096      	movs	r0, #150	; 0x96
 80012e6:	1a82      	subs	r2, r0, r2
 80012e8:	40d1      	lsrs	r1, r2
 80012ea:	4248      	negs	r0, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f3      	bne.n	80012d8 <__aeabi_f2iz+0x18>
 80012f0:	0008      	movs	r0, r1
 80012f2:	e7f1      	b.n	80012d8 <__aeabi_f2iz+0x18>
 80012f4:	3a96      	subs	r2, #150	; 0x96
 80012f6:	4091      	lsls	r1, r2
 80012f8:	e7f7      	b.n	80012ea <__aeabi_f2iz+0x2a>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	7fffffff 	.word	0x7fffffff

08001300 <__aeabi_i2f>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	2800      	cmp	r0, #0
 8001304:	d013      	beq.n	800132e <__aeabi_i2f+0x2e>
 8001306:	17c3      	asrs	r3, r0, #31
 8001308:	18c5      	adds	r5, r0, r3
 800130a:	405d      	eors	r5, r3
 800130c:	0fc4      	lsrs	r4, r0, #31
 800130e:	0028      	movs	r0, r5
 8001310:	f001 ff60 	bl	80031d4 <__clzsi2>
 8001314:	239e      	movs	r3, #158	; 0x9e
 8001316:	0001      	movs	r1, r0
 8001318:	1a1b      	subs	r3, r3, r0
 800131a:	2b96      	cmp	r3, #150	; 0x96
 800131c:	dc0f      	bgt.n	800133e <__aeabi_i2f+0x3e>
 800131e:	2808      	cmp	r0, #8
 8001320:	dd01      	ble.n	8001326 <__aeabi_i2f+0x26>
 8001322:	3908      	subs	r1, #8
 8001324:	408d      	lsls	r5, r1
 8001326:	026d      	lsls	r5, r5, #9
 8001328:	0a6d      	lsrs	r5, r5, #9
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	e002      	b.n	8001334 <__aeabi_i2f+0x34>
 800132e:	2400      	movs	r4, #0
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	07e4      	lsls	r4, r4, #31
 800133a:	4320      	orrs	r0, r4
 800133c:	bd70      	pop	{r4, r5, r6, pc}
 800133e:	2b99      	cmp	r3, #153	; 0x99
 8001340:	dd0b      	ble.n	800135a <__aeabi_i2f+0x5a>
 8001342:	2205      	movs	r2, #5
 8001344:	002e      	movs	r6, r5
 8001346:	1a12      	subs	r2, r2, r0
 8001348:	40d6      	lsrs	r6, r2
 800134a:	0002      	movs	r2, r0
 800134c:	321b      	adds	r2, #27
 800134e:	4095      	lsls	r5, r2
 8001350:	0028      	movs	r0, r5
 8001352:	1e45      	subs	r5, r0, #1
 8001354:	41a8      	sbcs	r0, r5
 8001356:	0035      	movs	r5, r6
 8001358:	4305      	orrs	r5, r0
 800135a:	2905      	cmp	r1, #5
 800135c:	dd01      	ble.n	8001362 <__aeabi_i2f+0x62>
 800135e:	1f4a      	subs	r2, r1, #5
 8001360:	4095      	lsls	r5, r2
 8001362:	002a      	movs	r2, r5
 8001364:	4e08      	ldr	r6, [pc, #32]	; (8001388 <__aeabi_i2f+0x88>)
 8001366:	4032      	ands	r2, r6
 8001368:	0768      	lsls	r0, r5, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_i2f+0x80>
 800136c:	200f      	movs	r0, #15
 800136e:	4028      	ands	r0, r5
 8001370:	2804      	cmp	r0, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_i2f+0x80>
 8001374:	3204      	adds	r2, #4
 8001376:	0150      	lsls	r0, r2, #5
 8001378:	d502      	bpl.n	8001380 <__aeabi_i2f+0x80>
 800137a:	239f      	movs	r3, #159	; 0x9f
 800137c:	4032      	ands	r2, r6
 800137e:	1a5b      	subs	r3, r3, r1
 8001380:	0192      	lsls	r2, r2, #6
 8001382:	0a55      	lsrs	r5, r2, #9
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	e7d5      	b.n	8001334 <__aeabi_i2f+0x34>
 8001388:	fbffffff 	.word	0xfbffffff

0800138c <__aeabi_ui2f>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	1e05      	subs	r5, r0, #0
 8001390:	d00e      	beq.n	80013b0 <__aeabi_ui2f+0x24>
 8001392:	f001 ff1f 	bl	80031d4 <__clzsi2>
 8001396:	239e      	movs	r3, #158	; 0x9e
 8001398:	0004      	movs	r4, r0
 800139a:	1a1b      	subs	r3, r3, r0
 800139c:	2b96      	cmp	r3, #150	; 0x96
 800139e:	dc0c      	bgt.n	80013ba <__aeabi_ui2f+0x2e>
 80013a0:	2808      	cmp	r0, #8
 80013a2:	dd01      	ble.n	80013a8 <__aeabi_ui2f+0x1c>
 80013a4:	3c08      	subs	r4, #8
 80013a6:	40a5      	lsls	r5, r4
 80013a8:	026d      	lsls	r5, r5, #9
 80013aa:	0a6d      	lsrs	r5, r5, #9
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	e001      	b.n	80013b4 <__aeabi_ui2f+0x28>
 80013b0:	2000      	movs	r0, #0
 80013b2:	2500      	movs	r5, #0
 80013b4:	05c0      	lsls	r0, r0, #23
 80013b6:	4328      	orrs	r0, r5
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	2b99      	cmp	r3, #153	; 0x99
 80013bc:	dd09      	ble.n	80013d2 <__aeabi_ui2f+0x46>
 80013be:	0002      	movs	r2, r0
 80013c0:	0029      	movs	r1, r5
 80013c2:	321b      	adds	r2, #27
 80013c4:	4091      	lsls	r1, r2
 80013c6:	1e4a      	subs	r2, r1, #1
 80013c8:	4191      	sbcs	r1, r2
 80013ca:	2205      	movs	r2, #5
 80013cc:	1a12      	subs	r2, r2, r0
 80013ce:	40d5      	lsrs	r5, r2
 80013d0:	430d      	orrs	r5, r1
 80013d2:	2c05      	cmp	r4, #5
 80013d4:	dd01      	ble.n	80013da <__aeabi_ui2f+0x4e>
 80013d6:	1f62      	subs	r2, r4, #5
 80013d8:	4095      	lsls	r5, r2
 80013da:	0029      	movs	r1, r5
 80013dc:	4e08      	ldr	r6, [pc, #32]	; (8001400 <__aeabi_ui2f+0x74>)
 80013de:	4031      	ands	r1, r6
 80013e0:	076a      	lsls	r2, r5, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013e4:	200f      	movs	r0, #15
 80013e6:	4028      	ands	r0, r5
 80013e8:	2804      	cmp	r0, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ui2f+0x6c>
 80013ec:	3104      	adds	r1, #4
 80013ee:	014a      	lsls	r2, r1, #5
 80013f0:	d502      	bpl.n	80013f8 <__aeabi_ui2f+0x6c>
 80013f2:	239f      	movs	r3, #159	; 0x9f
 80013f4:	4031      	ands	r1, r6
 80013f6:	1b1b      	subs	r3, r3, r4
 80013f8:	0189      	lsls	r1, r1, #6
 80013fa:	0a4d      	lsrs	r5, r1, #9
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	e7d9      	b.n	80013b4 <__aeabi_ui2f+0x28>
 8001400:	fbffffff 	.word	0xfbffffff

08001404 <__aeabi_dadd>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464f      	mov	r7, r9
 8001408:	46d6      	mov	lr, sl
 800140a:	4646      	mov	r6, r8
 800140c:	000d      	movs	r5, r1
 800140e:	0001      	movs	r1, r0
 8001410:	0018      	movs	r0, r3
 8001412:	b5c0      	push	{r6, r7, lr}
 8001414:	0017      	movs	r7, r2
 8001416:	032b      	lsls	r3, r5, #12
 8001418:	0a5a      	lsrs	r2, r3, #9
 800141a:	0f4b      	lsrs	r3, r1, #29
 800141c:	4313      	orrs	r3, r2
 800141e:	00ca      	lsls	r2, r1, #3
 8001420:	4691      	mov	r9, r2
 8001422:	0302      	lsls	r2, r0, #12
 8001424:	006e      	lsls	r6, r5, #1
 8001426:	0041      	lsls	r1, r0, #1
 8001428:	0a52      	lsrs	r2, r2, #9
 800142a:	0fec      	lsrs	r4, r5, #31
 800142c:	0f7d      	lsrs	r5, r7, #29
 800142e:	4315      	orrs	r5, r2
 8001430:	0d76      	lsrs	r6, r6, #21
 8001432:	0d49      	lsrs	r1, r1, #21
 8001434:	0fc0      	lsrs	r0, r0, #31
 8001436:	4682      	mov	sl, r0
 8001438:	46ac      	mov	ip, r5
 800143a:	00ff      	lsls	r7, r7, #3
 800143c:	1a72      	subs	r2, r6, r1
 800143e:	4284      	cmp	r4, r0
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x40>
 8001442:	e098      	b.n	8001576 <__aeabi_dadd+0x172>
 8001444:	2a00      	cmp	r2, #0
 8001446:	dc00      	bgt.n	800144a <__aeabi_dadd+0x46>
 8001448:	e081      	b.n	800154e <__aeabi_dadd+0x14a>
 800144a:	2900      	cmp	r1, #0
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x4c>
 800144e:	e0b6      	b.n	80015be <__aeabi_dadd+0x1ba>
 8001450:	49c9      	ldr	r1, [pc, #804]	; (8001778 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x54>
 8001456:	e172      	b.n	800173e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x64>
 8001466:	e15e      	b.n	8001726 <__aeabi_dadd+0x322>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dd00      	ble.n	800146e <__aeabi_dadd+0x6a>
 800146c:	e1ee      	b.n	800184c <__aeabi_dadd+0x448>
 800146e:	2020      	movs	r0, #32
 8001470:	0039      	movs	r1, r7
 8001472:	4665      	mov	r5, ip
 8001474:	1a80      	subs	r0, r0, r2
 8001476:	4087      	lsls	r7, r0
 8001478:	40d1      	lsrs	r1, r2
 800147a:	4085      	lsls	r5, r0
 800147c:	430d      	orrs	r5, r1
 800147e:	0039      	movs	r1, r7
 8001480:	1e4f      	subs	r7, r1, #1
 8001482:	41b9      	sbcs	r1, r7
 8001484:	4667      	mov	r7, ip
 8001486:	40d7      	lsrs	r7, r2
 8001488:	4329      	orrs	r1, r5
 800148a:	1bdb      	subs	r3, r3, r7
 800148c:	464a      	mov	r2, r9
 800148e:	1a55      	subs	r5, r2, r1
 8001490:	45a9      	cmp	r9, r5
 8001492:	4189      	sbcs	r1, r1
 8001494:	4249      	negs	r1, r1
 8001496:	1a5b      	subs	r3, r3, r1
 8001498:	4698      	mov	r8, r3
 800149a:	4643      	mov	r3, r8
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x9e>
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x238>
 80014a2:	4643      	mov	r3, r8
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	0a5b      	lsrs	r3, r3, #9
 80014a8:	4698      	mov	r8, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0xae>
 80014b0:	e12c      	b.n	800170c <__aeabi_dadd+0x308>
 80014b2:	4640      	mov	r0, r8
 80014b4:	f001 fe8e 	bl	80031d4 <__clzsi2>
 80014b8:	0001      	movs	r1, r0
 80014ba:	3908      	subs	r1, #8
 80014bc:	2220      	movs	r2, #32
 80014be:	0028      	movs	r0, r5
 80014c0:	4643      	mov	r3, r8
 80014c2:	1a52      	subs	r2, r2, r1
 80014c4:	408b      	lsls	r3, r1
 80014c6:	40d0      	lsrs	r0, r2
 80014c8:	408d      	lsls	r5, r1
 80014ca:	4303      	orrs	r3, r0
 80014cc:	428e      	cmp	r6, r1
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dadd+0xce>
 80014d0:	e117      	b.n	8001702 <__aeabi_dadd+0x2fe>
 80014d2:	1b8e      	subs	r6, r1, r6
 80014d4:	1c72      	adds	r2, r6, #1
 80014d6:	2a1f      	cmp	r2, #31
 80014d8:	dd00      	ble.n	80014dc <__aeabi_dadd+0xd8>
 80014da:	e1a7      	b.n	800182c <__aeabi_dadd+0x428>
 80014dc:	2120      	movs	r1, #32
 80014de:	0018      	movs	r0, r3
 80014e0:	002e      	movs	r6, r5
 80014e2:	1a89      	subs	r1, r1, r2
 80014e4:	408d      	lsls	r5, r1
 80014e6:	4088      	lsls	r0, r1
 80014e8:	40d6      	lsrs	r6, r2
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	1e69      	subs	r1, r5, #1
 80014ee:	418d      	sbcs	r5, r1
 80014f0:	4330      	orrs	r0, r6
 80014f2:	4698      	mov	r8, r3
 80014f4:	2600      	movs	r6, #0
 80014f6:	4305      	orrs	r5, r0
 80014f8:	076b      	lsls	r3, r5, #29
 80014fa:	d009      	beq.n	8001510 <__aeabi_dadd+0x10c>
 80014fc:	230f      	movs	r3, #15
 80014fe:	402b      	ands	r3, r5
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <__aeabi_dadd+0x10c>
 8001504:	1d2b      	adds	r3, r5, #4
 8001506:	42ab      	cmp	r3, r5
 8001508:	41ad      	sbcs	r5, r5
 800150a:	426d      	negs	r5, r5
 800150c:	44a8      	add	r8, r5
 800150e:	001d      	movs	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	d400      	bmi.n	8001518 <__aeabi_dadd+0x114>
 8001516:	e094      	b.n	8001642 <__aeabi_dadd+0x23e>
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <__aeabi_dadd+0x374>)
 800151a:	1c72      	adds	r2, r6, #1
 800151c:	429a      	cmp	r2, r3
 800151e:	d100      	bne.n	8001522 <__aeabi_dadd+0x11e>
 8001520:	e09d      	b.n	800165e <__aeabi_dadd+0x25a>
 8001522:	4641      	mov	r1, r8
 8001524:	4b95      	ldr	r3, [pc, #596]	; (800177c <__aeabi_dadd+0x378>)
 8001526:	08ed      	lsrs	r5, r5, #3
 8001528:	4019      	ands	r1, r3
 800152a:	000b      	movs	r3, r1
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	0749      	lsls	r1, r1, #29
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4329      	orrs	r1, r5
 8001534:	0b1b      	lsrs	r3, r3, #12
 8001536:	0d52      	lsrs	r2, r2, #21
 8001538:	0512      	lsls	r2, r2, #20
 800153a:	4313      	orrs	r3, r2
 800153c:	07e4      	lsls	r4, r4, #31
 800153e:	4323      	orrs	r3, r4
 8001540:	0008      	movs	r0, r1
 8001542:	0019      	movs	r1, r3
 8001544:	bce0      	pop	{r5, r6, r7}
 8001546:	46ba      	mov	sl, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	46a8      	mov	r8, r5
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	2a00      	cmp	r2, #0
 8001550:	d043      	beq.n	80015da <__aeabi_dadd+0x1d6>
 8001552:	1b8a      	subs	r2, r1, r6
 8001554:	2e00      	cmp	r6, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x156>
 8001558:	e12a      	b.n	80017b0 <__aeabi_dadd+0x3ac>
 800155a:	464c      	mov	r4, r9
 800155c:	431c      	orrs	r4, r3
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x15e>
 8001560:	e1d1      	b.n	8001906 <__aeabi_dadd+0x502>
 8001562:	1e54      	subs	r4, r2, #1
 8001564:	2a01      	cmp	r2, #1
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x166>
 8001568:	e21f      	b.n	80019aa <__aeabi_dadd+0x5a6>
 800156a:	4d83      	ldr	r5, [pc, #524]	; (8001778 <__aeabi_dadd+0x374>)
 800156c:	42aa      	cmp	r2, r5
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x16e>
 8001570:	e272      	b.n	8001a58 <__aeabi_dadd+0x654>
 8001572:	0022      	movs	r2, r4
 8001574:	e123      	b.n	80017be <__aeabi_dadd+0x3ba>
 8001576:	2a00      	cmp	r2, #0
 8001578:	dc00      	bgt.n	800157c <__aeabi_dadd+0x178>
 800157a:	e098      	b.n	80016ae <__aeabi_dadd+0x2aa>
 800157c:	2900      	cmp	r1, #0
 800157e:	d042      	beq.n	8001606 <__aeabi_dadd+0x202>
 8001580:	497d      	ldr	r1, [pc, #500]	; (8001778 <__aeabi_dadd+0x374>)
 8001582:	428e      	cmp	r6, r1
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x184>
 8001586:	e0da      	b.n	800173e <__aeabi_dadd+0x33a>
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0028      	movs	r0, r5
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	4308      	orrs	r0, r1
 8001590:	4684      	mov	ip, r0
 8001592:	2a38      	cmp	r2, #56	; 0x38
 8001594:	dd00      	ble.n	8001598 <__aeabi_dadd+0x194>
 8001596:	e129      	b.n	80017ec <__aeabi_dadd+0x3e8>
 8001598:	2a1f      	cmp	r2, #31
 800159a:	dc00      	bgt.n	800159e <__aeabi_dadd+0x19a>
 800159c:	e187      	b.n	80018ae <__aeabi_dadd+0x4aa>
 800159e:	0011      	movs	r1, r2
 80015a0:	4665      	mov	r5, ip
 80015a2:	3920      	subs	r1, #32
 80015a4:	40cd      	lsrs	r5, r1
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d004      	beq.n	80015b4 <__aeabi_dadd+0x1b0>
 80015aa:	2040      	movs	r0, #64	; 0x40
 80015ac:	4661      	mov	r1, ip
 80015ae:	1a82      	subs	r2, r0, r2
 80015b0:	4091      	lsls	r1, r2
 80015b2:	430f      	orrs	r7, r1
 80015b4:	0039      	movs	r1, r7
 80015b6:	1e4f      	subs	r7, r1, #1
 80015b8:	41b9      	sbcs	r1, r7
 80015ba:	430d      	orrs	r5, r1
 80015bc:	e11b      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80015be:	0029      	movs	r1, r5
 80015c0:	4339      	orrs	r1, r7
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x1c2>
 80015c4:	e0b5      	b.n	8001732 <__aeabi_dadd+0x32e>
 80015c6:	1e51      	subs	r1, r2, #1
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1ca>
 80015cc:	e1ab      	b.n	8001926 <__aeabi_dadd+0x522>
 80015ce:	486a      	ldr	r0, [pc, #424]	; (8001778 <__aeabi_dadd+0x374>)
 80015d0:	4282      	cmp	r2, r0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x1d2>
 80015d4:	e1b2      	b.n	800193c <__aeabi_dadd+0x538>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e743      	b.n	8001462 <__aeabi_dadd+0x5e>
 80015da:	4969      	ldr	r1, [pc, #420]	; (8001780 <__aeabi_dadd+0x37c>)
 80015dc:	1c75      	adds	r5, r6, #1
 80015de:	420d      	tst	r5, r1
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dadd+0x1e0>
 80015e2:	e0cf      	b.n	8001784 <__aeabi_dadd+0x380>
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d000      	beq.n	80015ea <__aeabi_dadd+0x1e6>
 80015e8:	e193      	b.n	8001912 <__aeabi_dadd+0x50e>
 80015ea:	4649      	mov	r1, r9
 80015ec:	4319      	orrs	r1, r3
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x1ee>
 80015f0:	e1d1      	b.n	8001996 <__aeabi_dadd+0x592>
 80015f2:	4661      	mov	r1, ip
 80015f4:	4339      	orrs	r1, r7
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x1f6>
 80015f8:	e1e3      	b.n	80019c2 <__aeabi_dadd+0x5be>
 80015fa:	4649      	mov	r1, r9
 80015fc:	0758      	lsls	r0, r3, #29
 80015fe:	08c9      	lsrs	r1, r1, #3
 8001600:	4301      	orrs	r1, r0
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	e026      	b.n	8001654 <__aeabi_dadd+0x250>
 8001606:	0029      	movs	r1, r5
 8001608:	4339      	orrs	r1, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x20a>
 800160c:	e091      	b.n	8001732 <__aeabi_dadd+0x32e>
 800160e:	1e51      	subs	r1, r2, #1
 8001610:	2a01      	cmp	r2, #1
 8001612:	d005      	beq.n	8001620 <__aeabi_dadd+0x21c>
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <__aeabi_dadd+0x374>)
 8001616:	4282      	cmp	r2, r0
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x218>
 800161a:	e18f      	b.n	800193c <__aeabi_dadd+0x538>
 800161c:	000a      	movs	r2, r1
 800161e:	e7b8      	b.n	8001592 <__aeabi_dadd+0x18e>
 8001620:	003d      	movs	r5, r7
 8001622:	444d      	add	r5, r9
 8001624:	454d      	cmp	r5, r9
 8001626:	4189      	sbcs	r1, r1
 8001628:	4463      	add	r3, ip
 800162a:	4698      	mov	r8, r3
 800162c:	4249      	negs	r1, r1
 800162e:	4488      	add	r8, r1
 8001630:	4643      	mov	r3, r8
 8001632:	2602      	movs	r6, #2
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	d500      	bpl.n	800163a <__aeabi_dadd+0x236>
 8001638:	e0eb      	b.n	8001812 <__aeabi_dadd+0x40e>
 800163a:	3e01      	subs	r6, #1
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x23e>
 8001640:	e75c      	b.n	80014fc <__aeabi_dadd+0xf8>
 8001642:	4643      	mov	r3, r8
 8001644:	08e9      	lsrs	r1, r5, #3
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	4311      	orrs	r1, r2
 800164a:	0032      	movs	r2, r6
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	484a      	ldr	r0, [pc, #296]	; (8001778 <__aeabi_dadd+0x374>)
 8001650:	4282      	cmp	r2, r0
 8001652:	d021      	beq.n	8001698 <__aeabi_dadd+0x294>
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	0552      	lsls	r2, r2, #21
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	e76c      	b.n	8001538 <__aeabi_dadd+0x134>
 800165e:	2300      	movs	r3, #0
 8001660:	2100      	movs	r1, #0
 8001662:	e769      	b.n	8001538 <__aeabi_dadd+0x134>
 8001664:	002a      	movs	r2, r5
 8001666:	433a      	orrs	r2, r7
 8001668:	d069      	beq.n	800173e <__aeabi_dadd+0x33a>
 800166a:	464a      	mov	r2, r9
 800166c:	0758      	lsls	r0, r3, #29
 800166e:	08d1      	lsrs	r1, r2, #3
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	4308      	orrs	r0, r1
 8001678:	421a      	tst	r2, r3
 800167a:	d007      	beq.n	800168c <__aeabi_dadd+0x288>
 800167c:	0029      	movs	r1, r5
 800167e:	08ed      	lsrs	r5, r5, #3
 8001680:	421d      	tst	r5, r3
 8001682:	d103      	bne.n	800168c <__aeabi_dadd+0x288>
 8001684:	002a      	movs	r2, r5
 8001686:	08ff      	lsrs	r7, r7, #3
 8001688:	0748      	lsls	r0, r1, #29
 800168a:	4338      	orrs	r0, r7
 800168c:	0f43      	lsrs	r3, r0, #29
 800168e:	00c1      	lsls	r1, r0, #3
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	08c9      	lsrs	r1, r1, #3
 8001694:	4319      	orrs	r1, r3
 8001696:	0013      	movs	r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	d100      	bne.n	80016a0 <__aeabi_dadd+0x29c>
 800169e:	e213      	b.n	8001ac8 <__aeabi_dadd+0x6c4>
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0312      	lsls	r2, r2, #12
 80016a4:	4313      	orrs	r3, r2
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <__aeabi_dadd+0x374>)
 80016aa:	0b1b      	lsrs	r3, r3, #12
 80016ac:	e744      	b.n	8001538 <__aeabi_dadd+0x134>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d04b      	beq.n	800174a <__aeabi_dadd+0x346>
 80016b2:	1b8a      	subs	r2, r1, r6
 80016b4:	2e00      	cmp	r6, #0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2b6>
 80016b8:	e0e7      	b.n	800188a <__aeabi_dadd+0x486>
 80016ba:	482f      	ldr	r0, [pc, #188]	; (8001778 <__aeabi_dadd+0x374>)
 80016bc:	4281      	cmp	r1, r0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x2be>
 80016c0:	e195      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80016c2:	2080      	movs	r0, #128	; 0x80
 80016c4:	0400      	lsls	r0, r0, #16
 80016c6:	4303      	orrs	r3, r0
 80016c8:	2a38      	cmp	r2, #56	; 0x38
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dadd+0x2ca>
 80016cc:	e143      	b.n	8001956 <__aeabi_dadd+0x552>
 80016ce:	2a1f      	cmp	r2, #31
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dadd+0x2d0>
 80016d2:	e1db      	b.n	8001a8c <__aeabi_dadd+0x688>
 80016d4:	2020      	movs	r0, #32
 80016d6:	001d      	movs	r5, r3
 80016d8:	464e      	mov	r6, r9
 80016da:	1a80      	subs	r0, r0, r2
 80016dc:	4085      	lsls	r5, r0
 80016de:	40d6      	lsrs	r6, r2
 80016e0:	4335      	orrs	r5, r6
 80016e2:	464e      	mov	r6, r9
 80016e4:	4086      	lsls	r6, r0
 80016e6:	0030      	movs	r0, r6
 80016e8:	40d3      	lsrs	r3, r2
 80016ea:	1e46      	subs	r6, r0, #1
 80016ec:	41b0      	sbcs	r0, r6
 80016ee:	449c      	add	ip, r3
 80016f0:	4305      	orrs	r5, r0
 80016f2:	19ed      	adds	r5, r5, r7
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	419b      	sbcs	r3, r3
 80016f8:	425b      	negs	r3, r3
 80016fa:	4463      	add	r3, ip
 80016fc:	4698      	mov	r8, r3
 80016fe:	000e      	movs	r6, r1
 8001700:	e07f      	b.n	8001802 <__aeabi_dadd+0x3fe>
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <__aeabi_dadd+0x378>)
 8001704:	1a76      	subs	r6, r6, r1
 8001706:	4013      	ands	r3, r2
 8001708:	4698      	mov	r8, r3
 800170a:	e6f5      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800170c:	0028      	movs	r0, r5
 800170e:	f001 fd61 	bl	80031d4 <__clzsi2>
 8001712:	0001      	movs	r1, r0
 8001714:	3118      	adds	r1, #24
 8001716:	291f      	cmp	r1, #31
 8001718:	dc00      	bgt.n	800171c <__aeabi_dadd+0x318>
 800171a:	e6cf      	b.n	80014bc <__aeabi_dadd+0xb8>
 800171c:	002b      	movs	r3, r5
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	e6d2      	b.n	80014cc <__aeabi_dadd+0xc8>
 8001726:	4662      	mov	r2, ip
 8001728:	433a      	orrs	r2, r7
 800172a:	0011      	movs	r1, r2
 800172c:	1e4f      	subs	r7, r1, #1
 800172e:	41b9      	sbcs	r1, r7
 8001730:	e6ac      	b.n	800148c <__aeabi_dadd+0x88>
 8001732:	4649      	mov	r1, r9
 8001734:	0758      	lsls	r0, r3, #29
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	4301      	orrs	r1, r0
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	e787      	b.n	800164e <__aeabi_dadd+0x24a>
 800173e:	4649      	mov	r1, r9
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	4311      	orrs	r1, r2
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	e7a6      	b.n	8001698 <__aeabi_dadd+0x294>
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <__aeabi_dadd+0x37c>)
 800174c:	1c70      	adds	r0, r6, #1
 800174e:	4208      	tst	r0, r1
 8001750:	d000      	beq.n	8001754 <__aeabi_dadd+0x350>
 8001752:	e0bb      	b.n	80018cc <__aeabi_dadd+0x4c8>
 8001754:	2e00      	cmp	r6, #0
 8001756:	d000      	beq.n	800175a <__aeabi_dadd+0x356>
 8001758:	e114      	b.n	8001984 <__aeabi_dadd+0x580>
 800175a:	4649      	mov	r1, r9
 800175c:	4319      	orrs	r1, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x35e>
 8001760:	e175      	b.n	8001a4e <__aeabi_dadd+0x64a>
 8001762:	0029      	movs	r1, r5
 8001764:	4339      	orrs	r1, r7
 8001766:	d000      	beq.n	800176a <__aeabi_dadd+0x366>
 8001768:	e17e      	b.n	8001a68 <__aeabi_dadd+0x664>
 800176a:	4649      	mov	r1, r9
 800176c:	0758      	lsls	r0, r3, #29
 800176e:	08c9      	lsrs	r1, r1, #3
 8001770:	4301      	orrs	r1, r0
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	e76e      	b.n	8001654 <__aeabi_dadd+0x250>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	000007ff 	.word	0x000007ff
 800177c:	ff7fffff 	.word	0xff7fffff
 8001780:	000007fe 	.word	0x000007fe
 8001784:	4649      	mov	r1, r9
 8001786:	1bcd      	subs	r5, r1, r7
 8001788:	4661      	mov	r1, ip
 800178a:	1a58      	subs	r0, r3, r1
 800178c:	45a9      	cmp	r9, r5
 800178e:	4189      	sbcs	r1, r1
 8001790:	4249      	negs	r1, r1
 8001792:	4688      	mov	r8, r1
 8001794:	0001      	movs	r1, r0
 8001796:	4640      	mov	r0, r8
 8001798:	1a09      	subs	r1, r1, r0
 800179a:	4688      	mov	r8, r1
 800179c:	0209      	lsls	r1, r1, #8
 800179e:	d500      	bpl.n	80017a2 <__aeabi_dadd+0x39e>
 80017a0:	e0a6      	b.n	80018f0 <__aeabi_dadd+0x4ec>
 80017a2:	4641      	mov	r1, r8
 80017a4:	4329      	orrs	r1, r5
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x3a6>
 80017a8:	e67f      	b.n	80014aa <__aeabi_dadd+0xa6>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2400      	movs	r4, #0
 80017ae:	e751      	b.n	8001654 <__aeabi_dadd+0x250>
 80017b0:	4cc7      	ldr	r4, [pc, #796]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80017b2:	42a1      	cmp	r1, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x3b4>
 80017b6:	e0c7      	b.n	8001948 <__aeabi_dadd+0x544>
 80017b8:	2480      	movs	r4, #128	; 0x80
 80017ba:	0424      	lsls	r4, r4, #16
 80017bc:	4323      	orrs	r3, r4
 80017be:	2a38      	cmp	r2, #56	; 0x38
 80017c0:	dc54      	bgt.n	800186c <__aeabi_dadd+0x468>
 80017c2:	2a1f      	cmp	r2, #31
 80017c4:	dd00      	ble.n	80017c8 <__aeabi_dadd+0x3c4>
 80017c6:	e0cc      	b.n	8001962 <__aeabi_dadd+0x55e>
 80017c8:	2420      	movs	r4, #32
 80017ca:	4648      	mov	r0, r9
 80017cc:	1aa4      	subs	r4, r4, r2
 80017ce:	001d      	movs	r5, r3
 80017d0:	464e      	mov	r6, r9
 80017d2:	40a0      	lsls	r0, r4
 80017d4:	40d6      	lsrs	r6, r2
 80017d6:	40a5      	lsls	r5, r4
 80017d8:	0004      	movs	r4, r0
 80017da:	40d3      	lsrs	r3, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	4335      	orrs	r5, r6
 80017e0:	1e66      	subs	r6, r4, #1
 80017e2:	41b4      	sbcs	r4, r6
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	469c      	mov	ip, r3
 80017e8:	4325      	orrs	r5, r4
 80017ea:	e044      	b.n	8001876 <__aeabi_dadd+0x472>
 80017ec:	4662      	mov	r2, ip
 80017ee:	433a      	orrs	r2, r7
 80017f0:	0015      	movs	r5, r2
 80017f2:	1e6f      	subs	r7, r5, #1
 80017f4:	41bd      	sbcs	r5, r7
 80017f6:	444d      	add	r5, r9
 80017f8:	454d      	cmp	r5, r9
 80017fa:	4189      	sbcs	r1, r1
 80017fc:	4249      	negs	r1, r1
 80017fe:	4688      	mov	r8, r1
 8001800:	4498      	add	r8, r3
 8001802:	4643      	mov	r3, r8
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	d400      	bmi.n	800180a <__aeabi_dadd+0x406>
 8001808:	e718      	b.n	800163c <__aeabi_dadd+0x238>
 800180a:	4bb1      	ldr	r3, [pc, #708]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800180c:	3601      	adds	r6, #1
 800180e:	429e      	cmp	r6, r3
 8001810:	d049      	beq.n	80018a6 <__aeabi_dadd+0x4a2>
 8001812:	4642      	mov	r2, r8
 8001814:	4baf      	ldr	r3, [pc, #700]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001816:	2101      	movs	r1, #1
 8001818:	401a      	ands	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	400d      	ands	r5, r1
 8001820:	4315      	orrs	r5, r2
 8001822:	07d9      	lsls	r1, r3, #31
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	4698      	mov	r8, r3
 8001828:	430d      	orrs	r5, r1
 800182a:	e665      	b.n	80014f8 <__aeabi_dadd+0xf4>
 800182c:	0018      	movs	r0, r3
 800182e:	3e1f      	subs	r6, #31
 8001830:	40f0      	lsrs	r0, r6
 8001832:	2a20      	cmp	r2, #32
 8001834:	d003      	beq.n	800183e <__aeabi_dadd+0x43a>
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	1a8a      	subs	r2, r1, r2
 800183a:	4093      	lsls	r3, r2
 800183c:	431d      	orrs	r5, r3
 800183e:	1e69      	subs	r1, r5, #1
 8001840:	418d      	sbcs	r5, r1
 8001842:	2300      	movs	r3, #0
 8001844:	2600      	movs	r6, #0
 8001846:	4698      	mov	r8, r3
 8001848:	4305      	orrs	r5, r0
 800184a:	e6f7      	b.n	800163c <__aeabi_dadd+0x238>
 800184c:	0011      	movs	r1, r2
 800184e:	4665      	mov	r5, ip
 8001850:	3920      	subs	r1, #32
 8001852:	40cd      	lsrs	r5, r1
 8001854:	2a20      	cmp	r2, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_dadd+0x45e>
 8001858:	2040      	movs	r0, #64	; 0x40
 800185a:	4661      	mov	r1, ip
 800185c:	1a82      	subs	r2, r0, r2
 800185e:	4091      	lsls	r1, r2
 8001860:	430f      	orrs	r7, r1
 8001862:	0039      	movs	r1, r7
 8001864:	1e4f      	subs	r7, r1, #1
 8001866:	41b9      	sbcs	r1, r7
 8001868:	4329      	orrs	r1, r5
 800186a:	e60f      	b.n	800148c <__aeabi_dadd+0x88>
 800186c:	464a      	mov	r2, r9
 800186e:	4313      	orrs	r3, r2
 8001870:	001d      	movs	r5, r3
 8001872:	1e6b      	subs	r3, r5, #1
 8001874:	419d      	sbcs	r5, r3
 8001876:	1b7d      	subs	r5, r7, r5
 8001878:	42af      	cmp	r7, r5
 800187a:	419b      	sbcs	r3, r3
 800187c:	4662      	mov	r2, ip
 800187e:	425b      	negs	r3, r3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4698      	mov	r8, r3
 8001884:	4654      	mov	r4, sl
 8001886:	000e      	movs	r6, r1
 8001888:	e607      	b.n	800149a <__aeabi_dadd+0x96>
 800188a:	4648      	mov	r0, r9
 800188c:	4318      	orrs	r0, r3
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x48e>
 8001890:	e0b3      	b.n	80019fa <__aeabi_dadd+0x5f6>
 8001892:	1e50      	subs	r0, r2, #1
 8001894:	2a01      	cmp	r2, #1
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x496>
 8001898:	e10d      	b.n	8001ab6 <__aeabi_dadd+0x6b2>
 800189a:	4d8d      	ldr	r5, [pc, #564]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 800189c:	42aa      	cmp	r2, r5
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x49e>
 80018a0:	e0a5      	b.n	80019ee <__aeabi_dadd+0x5ea>
 80018a2:	0002      	movs	r2, r0
 80018a4:	e710      	b.n	80016c8 <__aeabi_dadd+0x2c4>
 80018a6:	0032      	movs	r2, r6
 80018a8:	2300      	movs	r3, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	e644      	b.n	8001538 <__aeabi_dadd+0x134>
 80018ae:	2120      	movs	r1, #32
 80018b0:	0038      	movs	r0, r7
 80018b2:	1a89      	subs	r1, r1, r2
 80018b4:	4665      	mov	r5, ip
 80018b6:	408f      	lsls	r7, r1
 80018b8:	408d      	lsls	r5, r1
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	1e79      	subs	r1, r7, #1
 80018be:	418f      	sbcs	r7, r1
 80018c0:	4305      	orrs	r5, r0
 80018c2:	433d      	orrs	r5, r7
 80018c4:	4667      	mov	r7, ip
 80018c6:	40d7      	lsrs	r7, r2
 80018c8:	19db      	adds	r3, r3, r7
 80018ca:	e794      	b.n	80017f6 <__aeabi_dadd+0x3f2>
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 80018ce:	4290      	cmp	r0, r2
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x4d0>
 80018d2:	e0ec      	b.n	8001aae <__aeabi_dadd+0x6aa>
 80018d4:	0039      	movs	r1, r7
 80018d6:	4449      	add	r1, r9
 80018d8:	4549      	cmp	r1, r9
 80018da:	4192      	sbcs	r2, r2
 80018dc:	4463      	add	r3, ip
 80018de:	4252      	negs	r2, r2
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	07dd      	lsls	r5, r3, #31
 80018e4:	0849      	lsrs	r1, r1, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	4698      	mov	r8, r3
 80018ea:	0006      	movs	r6, r0
 80018ec:	430d      	orrs	r5, r1
 80018ee:	e6a5      	b.n	800163c <__aeabi_dadd+0x238>
 80018f0:	464a      	mov	r2, r9
 80018f2:	1abd      	subs	r5, r7, r2
 80018f4:	42af      	cmp	r7, r5
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	4662      	mov	r2, ip
 80018fa:	4249      	negs	r1, r1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	4698      	mov	r8, r3
 8001902:	4654      	mov	r4, sl
 8001904:	e5d1      	b.n	80014aa <__aeabi_dadd+0xa6>
 8001906:	076c      	lsls	r4, r5, #29
 8001908:	08f9      	lsrs	r1, r7, #3
 800190a:	4321      	orrs	r1, r4
 800190c:	08eb      	lsrs	r3, r5, #3
 800190e:	0004      	movs	r4, r0
 8001910:	e69d      	b.n	800164e <__aeabi_dadd+0x24a>
 8001912:	464a      	mov	r2, r9
 8001914:	431a      	orrs	r2, r3
 8001916:	d175      	bne.n	8001a04 <__aeabi_dadd+0x600>
 8001918:	4661      	mov	r1, ip
 800191a:	4339      	orrs	r1, r7
 800191c:	d114      	bne.n	8001948 <__aeabi_dadd+0x544>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	2400      	movs	r4, #0
 8001922:	031b      	lsls	r3, r3, #12
 8001924:	e6bc      	b.n	80016a0 <__aeabi_dadd+0x29c>
 8001926:	464a      	mov	r2, r9
 8001928:	1bd5      	subs	r5, r2, r7
 800192a:	45a9      	cmp	r9, r5
 800192c:	4189      	sbcs	r1, r1
 800192e:	4662      	mov	r2, ip
 8001930:	4249      	negs	r1, r1
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	1a5b      	subs	r3, r3, r1
 8001936:	4698      	mov	r8, r3
 8001938:	2601      	movs	r6, #1
 800193a:	e5ae      	b.n	800149a <__aeabi_dadd+0x96>
 800193c:	464a      	mov	r2, r9
 800193e:	08d1      	lsrs	r1, r2, #3
 8001940:	075a      	lsls	r2, r3, #29
 8001942:	4311      	orrs	r1, r2
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	e6a7      	b.n	8001698 <__aeabi_dadd+0x294>
 8001948:	4663      	mov	r3, ip
 800194a:	08f9      	lsrs	r1, r7, #3
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	4654      	mov	r4, sl
 8001950:	4311      	orrs	r1, r2
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	e6a0      	b.n	8001698 <__aeabi_dadd+0x294>
 8001956:	464a      	mov	r2, r9
 8001958:	4313      	orrs	r3, r2
 800195a:	001d      	movs	r5, r3
 800195c:	1e6b      	subs	r3, r5, #1
 800195e:	419d      	sbcs	r5, r3
 8001960:	e6c7      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001962:	0014      	movs	r4, r2
 8001964:	001e      	movs	r6, r3
 8001966:	3c20      	subs	r4, #32
 8001968:	40e6      	lsrs	r6, r4
 800196a:	2a20      	cmp	r2, #32
 800196c:	d005      	beq.n	800197a <__aeabi_dadd+0x576>
 800196e:	2440      	movs	r4, #64	; 0x40
 8001970:	1aa2      	subs	r2, r4, r2
 8001972:	4093      	lsls	r3, r2
 8001974:	464a      	mov	r2, r9
 8001976:	431a      	orrs	r2, r3
 8001978:	4691      	mov	r9, r2
 800197a:	464d      	mov	r5, r9
 800197c:	1e6b      	subs	r3, r5, #1
 800197e:	419d      	sbcs	r5, r3
 8001980:	4335      	orrs	r5, r6
 8001982:	e778      	b.n	8001876 <__aeabi_dadd+0x472>
 8001984:	464a      	mov	r2, r9
 8001986:	431a      	orrs	r2, r3
 8001988:	d000      	beq.n	800198c <__aeabi_dadd+0x588>
 800198a:	e66b      	b.n	8001664 <__aeabi_dadd+0x260>
 800198c:	076b      	lsls	r3, r5, #29
 800198e:	08f9      	lsrs	r1, r7, #3
 8001990:	4319      	orrs	r1, r3
 8001992:	08eb      	lsrs	r3, r5, #3
 8001994:	e680      	b.n	8001698 <__aeabi_dadd+0x294>
 8001996:	4661      	mov	r1, ip
 8001998:	4339      	orrs	r1, r7
 800199a:	d054      	beq.n	8001a46 <__aeabi_dadd+0x642>
 800199c:	4663      	mov	r3, ip
 800199e:	08f9      	lsrs	r1, r7, #3
 80019a0:	075c      	lsls	r4, r3, #29
 80019a2:	4321      	orrs	r1, r4
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	0004      	movs	r4, r0
 80019a8:	e654      	b.n	8001654 <__aeabi_dadd+0x250>
 80019aa:	464a      	mov	r2, r9
 80019ac:	1abd      	subs	r5, r7, r2
 80019ae:	42af      	cmp	r7, r5
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	4662      	mov	r2, ip
 80019b4:	4249      	negs	r1, r1
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	1a5b      	subs	r3, r3, r1
 80019ba:	4698      	mov	r8, r3
 80019bc:	0004      	movs	r4, r0
 80019be:	2601      	movs	r6, #1
 80019c0:	e56b      	b.n	800149a <__aeabi_dadd+0x96>
 80019c2:	464a      	mov	r2, r9
 80019c4:	1bd5      	subs	r5, r2, r7
 80019c6:	45a9      	cmp	r9, r5
 80019c8:	4189      	sbcs	r1, r1
 80019ca:	4662      	mov	r2, ip
 80019cc:	4249      	negs	r1, r1
 80019ce:	1a9a      	subs	r2, r3, r2
 80019d0:	1a52      	subs	r2, r2, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	0212      	lsls	r2, r2, #8
 80019d6:	d532      	bpl.n	8001a3e <__aeabi_dadd+0x63a>
 80019d8:	464a      	mov	r2, r9
 80019da:	1abd      	subs	r5, r7, r2
 80019dc:	42af      	cmp	r7, r5
 80019de:	4189      	sbcs	r1, r1
 80019e0:	4662      	mov	r2, ip
 80019e2:	4249      	negs	r1, r1
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	1a5b      	subs	r3, r3, r1
 80019e8:	4698      	mov	r8, r3
 80019ea:	0004      	movs	r4, r0
 80019ec:	e584      	b.n	80014f8 <__aeabi_dadd+0xf4>
 80019ee:	4663      	mov	r3, ip
 80019f0:	08f9      	lsrs	r1, r7, #3
 80019f2:	075a      	lsls	r2, r3, #29
 80019f4:	4311      	orrs	r1, r2
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	e64e      	b.n	8001698 <__aeabi_dadd+0x294>
 80019fa:	08f9      	lsrs	r1, r7, #3
 80019fc:	0768      	lsls	r0, r5, #29
 80019fe:	4301      	orrs	r1, r0
 8001a00:	08eb      	lsrs	r3, r5, #3
 8001a02:	e624      	b.n	800164e <__aeabi_dadd+0x24a>
 8001a04:	4662      	mov	r2, ip
 8001a06:	433a      	orrs	r2, r7
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dadd+0x608>
 8001a0a:	e698      	b.n	800173e <__aeabi_dadd+0x33a>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	08d1      	lsrs	r1, r2, #3
 8001a10:	075a      	lsls	r2, r3, #29
 8001a12:	4311      	orrs	r1, r2
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	421a      	tst	r2, r3
 8001a1c:	d008      	beq.n	8001a30 <__aeabi_dadd+0x62c>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	08c5      	lsrs	r5, r0, #3
 8001a22:	421d      	tst	r5, r3
 8001a24:	d104      	bne.n	8001a30 <__aeabi_dadd+0x62c>
 8001a26:	4654      	mov	r4, sl
 8001a28:	002a      	movs	r2, r5
 8001a2a:	08f9      	lsrs	r1, r7, #3
 8001a2c:	0743      	lsls	r3, r0, #29
 8001a2e:	4319      	orrs	r1, r3
 8001a30:	0f4b      	lsrs	r3, r1, #29
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	08c9      	lsrs	r1, r1, #3
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	e62c      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a3e:	4641      	mov	r1, r8
 8001a40:	4329      	orrs	r1, r5
 8001a42:	d000      	beq.n	8001a46 <__aeabi_dadd+0x642>
 8001a44:	e5fa      	b.n	800163c <__aeabi_dadd+0x238>
 8001a46:	2300      	movs	r3, #0
 8001a48:	000a      	movs	r2, r1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	e602      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a4e:	076b      	lsls	r3, r5, #29
 8001a50:	08f9      	lsrs	r1, r7, #3
 8001a52:	4319      	orrs	r1, r3
 8001a54:	08eb      	lsrs	r3, r5, #3
 8001a56:	e5fd      	b.n	8001654 <__aeabi_dadd+0x250>
 8001a58:	4663      	mov	r3, ip
 8001a5a:	08f9      	lsrs	r1, r7, #3
 8001a5c:	075b      	lsls	r3, r3, #29
 8001a5e:	4319      	orrs	r1, r3
 8001a60:	4663      	mov	r3, ip
 8001a62:	0004      	movs	r4, r0
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	e617      	b.n	8001698 <__aeabi_dadd+0x294>
 8001a68:	003d      	movs	r5, r7
 8001a6a:	444d      	add	r5, r9
 8001a6c:	4463      	add	r3, ip
 8001a6e:	454d      	cmp	r5, r9
 8001a70:	4189      	sbcs	r1, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	4249      	negs	r1, r1
 8001a76:	4488      	add	r8, r1
 8001a78:	4643      	mov	r3, r8
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dadd+0x67c>
 8001a7e:	e5dd      	b.n	800163c <__aeabi_dadd+0x238>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <__aeabi_dadd+0x6d0>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e5d7      	b.n	800163c <__aeabi_dadd+0x238>
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	001e      	movs	r6, r3
 8001a90:	3820      	subs	r0, #32
 8001a92:	40c6      	lsrs	r6, r0
 8001a94:	2a20      	cmp	r2, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dadd+0x6a0>
 8001a98:	2040      	movs	r0, #64	; 0x40
 8001a9a:	1a82      	subs	r2, r0, r2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	464d      	mov	r5, r9
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	419d      	sbcs	r5, r3
 8001aaa:	4335      	orrs	r5, r6
 8001aac:	e621      	b.n	80016f2 <__aeabi_dadd+0x2ee>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e540      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	19d5      	adds	r5, r2, r7
 8001aba:	42bd      	cmp	r5, r7
 8001abc:	4189      	sbcs	r1, r1
 8001abe:	4463      	add	r3, ip
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4249      	negs	r1, r1
 8001ac4:	4488      	add	r8, r1
 8001ac6:	e5b3      	b.n	8001630 <__aeabi_dadd+0x22c>
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_dadd+0x6cc>)
 8001acc:	000b      	movs	r3, r1
 8001ace:	e533      	b.n	8001538 <__aeabi_dadd+0x134>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff

08001ad8 <__aeabi_ddiv>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	4657      	mov	r7, sl
 8001adc:	464e      	mov	r6, r9
 8001ade:	4645      	mov	r5, r8
 8001ae0:	46de      	mov	lr, fp
 8001ae2:	b5e0      	push	{r5, r6, r7, lr}
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	0048      	lsls	r0, r1, #1
 8001aec:	4692      	mov	sl, r2
 8001aee:	001f      	movs	r7, r3
 8001af0:	b085      	sub	sp, #20
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d40      	lsrs	r0, r0, #21
 8001af6:	0fce      	lsrs	r6, r1, #31
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d059      	beq.n	8001bb0 <__aeabi_ddiv+0xd8>
 8001afc:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x2c>
 8001b02:	e098      	b.n	8001c36 <__aeabi_ddiv+0x15e>
 8001b04:	0f6b      	lsrs	r3, r5, #29
 8001b06:	00e4      	lsls	r4, r4, #3
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	4698      	mov	r8, r3
 8001b12:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b14:	00ed      	lsls	r5, r5, #3
 8001b16:	469b      	mov	fp, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	4483      	add	fp, r0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	033c      	lsls	r4, r7, #12
 8001b22:	007b      	lsls	r3, r7, #1
 8001b24:	4650      	mov	r0, sl
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	0d5b      	lsrs	r3, r3, #21
 8001b2a:	0fff      	lsrs	r7, r7, #31
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d067      	beq.n	8001c00 <__aeabi_ddiv+0x128>
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <__aeabi_ddiv+0x90>
 8001b36:	497a      	ldr	r1, [pc, #488]	; (8001d20 <__aeabi_ddiv+0x248>)
 8001b38:	0f42      	lsrs	r2, r0, #29
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	00e4      	lsls	r4, r4, #3
 8001b3e:	4659      	mov	r1, fp
 8001b40:	4314      	orrs	r4, r2
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4463      	add	r3, ip
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	00c2      	lsls	r2, r0, #3
 8001b50:	2000      	movs	r0, #0
 8001b52:	0033      	movs	r3, r6
 8001b54:	407b      	eors	r3, r7
 8001b56:	469a      	mov	sl, r3
 8001b58:	464b      	mov	r3, r9
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d900      	bls.n	8001b60 <__aeabi_ddiv+0x88>
 8001b5e:	e0ef      	b.n	8001d40 <__aeabi_ddiv+0x268>
 8001b60:	4970      	ldr	r1, [pc, #448]	; (8001d24 <__aeabi_ddiv+0x24c>)
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	58cb      	ldr	r3, [r1, r3]
 8001b66:	469f      	mov	pc, r3
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <__aeabi_ddiv+0x250>)
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	4322      	orrs	r2, r4
 8001b70:	44e3      	add	fp, ip
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0xa0>
 8001b76:	e095      	b.n	8001ca4 <__aeabi_ddiv+0x1cc>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2400      	movs	r4, #0
 8001b82:	2002      	movs	r0, #2
 8001b84:	e7e5      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4323      	orrs	r3, r4
 8001b92:	07d2      	lsls	r2, r2, #31
 8001b94:	4313      	orrs	r3, r2
 8001b96:	0028      	movs	r0, r5
 8001b98:	0019      	movs	r1, r3
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	2400      	movs	r4, #0
 8001baa:	2500      	movs	r5, #0
 8001bac:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001bae:	e7ed      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0xe2>
 8001bb8:	e089      	b.n	8001cce <__aeabi_ddiv+0x1f6>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_ddiv+0xe8>
 8001bbe:	e1e0      	b.n	8001f82 <__aeabi_ddiv+0x4aa>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	f001 fb07 	bl	80031d4 <__clzsi2>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	0002      	movs	r2, r0
 8001bca:	390b      	subs	r1, #11
 8001bcc:	231d      	movs	r3, #29
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	3808      	subs	r0, #8
 8001bd8:	4084      	lsls	r4, r0
 8001bda:	000b      	movs	r3, r1
 8001bdc:	464d      	mov	r5, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4698      	mov	r8, r3
 8001be2:	4085      	lsls	r5, r0
 8001be4:	4851      	ldr	r0, [pc, #324]	; (8001d2c <__aeabi_ddiv+0x254>)
 8001be6:	033c      	lsls	r4, r7, #12
 8001be8:	1a83      	subs	r3, r0, r2
 8001bea:	469b      	mov	fp, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	4699      	mov	r9, r3
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	007b      	lsls	r3, r7, #1
 8001bf4:	4650      	mov	r0, sl
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	0fff      	lsrs	r7, r7, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d197      	bne.n	8001b30 <__aeabi_ddiv+0x58>
 8001c00:	4652      	mov	r2, sl
 8001c02:	4322      	orrs	r2, r4
 8001c04:	d055      	beq.n	8001cb2 <__aeabi_ddiv+0x1da>
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x134>
 8001c0a:	e1ca      	b.n	8001fa2 <__aeabi_ddiv+0x4ca>
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f001 fae1 	bl	80031d4 <__clzsi2>
 8001c12:	0002      	movs	r2, r0
 8001c14:	3a0b      	subs	r2, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	0001      	movs	r1, r0
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	3908      	subs	r1, #8
 8001c20:	40da      	lsrs	r2, r3
 8001c22:	408c      	lsls	r4, r1
 8001c24:	4314      	orrs	r4, r2
 8001c26:	4652      	mov	r2, sl
 8001c28:	408a      	lsls	r2, r1
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <__aeabi_ddiv+0x258>)
 8001c2c:	4458      	add	r0, fp
 8001c2e:	469b      	mov	fp, r3
 8001c30:	4483      	add	fp, r0
 8001c32:	2000      	movs	r0, #0
 8001c34:	e78d      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001c36:	464b      	mov	r3, r9
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	d140      	bne.n	8001cc0 <__aeabi_ddiv+0x1e8>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	4699      	mov	r9, r3
 8001c42:	3b06      	subs	r3, #6
 8001c44:	2500      	movs	r5, #0
 8001c46:	4683      	mov	fp, r0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	e769      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001c4c:	46b2      	mov	sl, r6
 8001c4e:	9b00      	ldr	r3, [sp, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d0a9      	beq.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x182>
 8001c58:	e211      	b.n	800207e <__aeabi_ddiv+0x5a6>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d093      	beq.n	8001b86 <__aeabi_ddiv+0xae>
 8001c5e:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <__aeabi_ddiv+0x25c>)
 8001c60:	445a      	add	r2, fp
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_ddiv+0x190>
 8001c66:	e13c      	b.n	8001ee2 <__aeabi_ddiv+0x40a>
 8001c68:	076b      	lsls	r3, r5, #29
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_ddiv+0x196>
 8001c6c:	e1a7      	b.n	8001fbe <__aeabi_ddiv+0x4e6>
 8001c6e:	08ed      	lsrs	r5, r5, #3
 8001c70:	4643      	mov	r3, r8
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	d506      	bpl.n	8001c84 <__aeabi_ddiv+0x1ac>
 8001c76:	4642      	mov	r2, r8
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <__aeabi_ddiv+0x260>)
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	00d2      	lsls	r2, r2, #3
 8001c82:	445a      	add	r2, fp
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <__aeabi_ddiv+0x264>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dc8e      	bgt.n	8001ba8 <__aeabi_ddiv+0xd0>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	0552      	lsls	r2, r2, #21
 8001c8e:	0758      	lsls	r0, r3, #29
 8001c90:	025c      	lsls	r4, r3, #9
 8001c92:	4305      	orrs	r5, r0
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d53      	lsrs	r3, r2, #21
 8001c98:	e778      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001c9a:	46ba      	mov	sl, r7
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	0015      	movs	r5, r2
 8001ca0:	9000      	str	r0, [sp, #0]
 8001ca2:	e7d4      	b.n	8001c4e <__aeabi_ddiv+0x176>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4691      	mov	r9, r2
 8001cac:	2003      	movs	r0, #3
 8001cae:	4652      	mov	r2, sl
 8001cb0:	e74f      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	4689      	mov	r9, r1
 8001cba:	2400      	movs	r4, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e748      	b.n	8001b52 <__aeabi_ddiv+0x7a>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	3b09      	subs	r3, #9
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	4683      	mov	fp, r0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	e728      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2500      	movs	r5, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	e720      	b.n	8001b20 <__aeabi_ddiv+0x48>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	469a      	mov	sl, r3
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	e74f      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	4641      	mov	r1, r8
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	4219      	tst	r1, r3
 8001cf4:	d008      	beq.n	8001d08 <__aeabi_ddiv+0x230>
 8001cf6:	421c      	tst	r4, r3
 8001cf8:	d106      	bne.n	8001d08 <__aeabi_ddiv+0x230>
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	0324      	lsls	r4, r4, #12
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	0015      	movs	r5, r2
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d04:	0b24      	lsrs	r4, r4, #12
 8001d06:	e741      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	46b2      	mov	sl, r6
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__aeabi_ddiv+0x244>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e738      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	0801626c 	.word	0x0801626c
 8001d28:	fffff801 	.word	0xfffff801
 8001d2c:	fffffc0d 	.word	0xfffffc0d
 8001d30:	000003f3 	.word	0x000003f3
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	4544      	cmp	r4, r8
 8001d42:	d200      	bcs.n	8001d46 <__aeabi_ddiv+0x26e>
 8001d44:	e116      	b.n	8001f74 <__aeabi_ddiv+0x49c>
 8001d46:	d100      	bne.n	8001d4a <__aeabi_ddiv+0x272>
 8001d48:	e111      	b.n	8001f6e <__aeabi_ddiv+0x496>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	469c      	mov	ip, r3
 8001d50:	002e      	movs	r6, r5
 8001d52:	4640      	mov	r0, r8
 8001d54:	2500      	movs	r5, #0
 8001d56:	44e3      	add	fp, ip
 8001d58:	0223      	lsls	r3, r4, #8
 8001d5a:	0e14      	lsrs	r4, r2, #24
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	4699      	mov	r9, r3
 8001d62:	0423      	lsls	r3, r4, #16
 8001d64:	0c1f      	lsrs	r7, r3, #16
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	9701      	str	r7, [sp, #4]
 8001d6e:	f7fe fa57 	bl	8000220 <__aeabi_uidivmod>
 8001d72:	0002      	movs	r2, r0
 8001d74:	437a      	muls	r2, r7
 8001d76:	040b      	lsls	r3, r1, #16
 8001d78:	0c31      	lsrs	r1, r6, #16
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	d90b      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d82:	2301      	movs	r3, #1
 8001d84:	425b      	negs	r3, r3
 8001d86:	469c      	mov	ip, r3
 8001d88:	1909      	adds	r1, r1, r4
 8001d8a:	44e0      	add	r8, ip
 8001d8c:	428c      	cmp	r4, r1
 8001d8e:	d804      	bhi.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d902      	bls.n	8001d9a <__aeabi_ddiv+0x2c2>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	4698      	mov	r8, r3
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	1a88      	subs	r0, r1, r2
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	f7fe fa3f 	bl	8000220 <__aeabi_uidivmod>
 8001da2:	0409      	lsls	r1, r1, #16
 8001da4:	468c      	mov	ip, r1
 8001da6:	0431      	lsls	r1, r6, #16
 8001da8:	4666      	mov	r6, ip
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	0c09      	lsrs	r1, r1, #16
 8001dae:	4342      	muls	r2, r0
 8001db0:	0003      	movs	r3, r0
 8001db2:	4331      	orrs	r1, r6
 8001db4:	428a      	cmp	r2, r1
 8001db6:	d904      	bls.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001db8:	1909      	adds	r1, r1, r4
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	428c      	cmp	r4, r1
 8001dbe:	d800      	bhi.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001dc0:	e111      	b.n	8001fe6 <__aeabi_ddiv+0x50e>
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	9e00      	ldr	r6, [sp, #0]
 8001dc8:	0412      	lsls	r2, r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	0c33      	lsrs	r3, r6, #16
 8001dce:	001f      	movs	r7, r3
 8001dd0:	0c10      	lsrs	r0, r2, #16
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	0413      	lsls	r3, r2, #16
 8001dd8:	0432      	lsls	r2, r6, #16
 8001dda:	0c16      	lsrs	r6, r2, #16
 8001ddc:	0032      	movs	r2, r6
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	435a      	muls	r2, r3
 8001de2:	9603      	str	r6, [sp, #12]
 8001de4:	437b      	muls	r3, r7
 8001de6:	4346      	muls	r6, r0
 8001de8:	4378      	muls	r0, r7
 8001dea:	0c17      	lsrs	r7, r2, #16
 8001dec:	46bc      	mov	ip, r7
 8001dee:	199b      	adds	r3, r3, r6
 8001df0:	4463      	add	r3, ip
 8001df2:	429e      	cmp	r6, r3
 8001df4:	d903      	bls.n	8001dfe <__aeabi_ddiv+0x326>
 8001df6:	2680      	movs	r6, #128	; 0x80
 8001df8:	0276      	lsls	r6, r6, #9
 8001dfa:	46b4      	mov	ip, r6
 8001dfc:	4460      	add	r0, ip
 8001dfe:	0c1e      	lsrs	r6, r3, #16
 8001e00:	1830      	adds	r0, r6, r0
 8001e02:	0416      	lsls	r6, r2, #16
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	0c36      	lsrs	r6, r6, #16
 8001e08:	199e      	adds	r6, r3, r6
 8001e0a:	4281      	cmp	r1, r0
 8001e0c:	d200      	bcs.n	8001e10 <__aeabi_ddiv+0x338>
 8001e0e:	e09c      	b.n	8001f4a <__aeabi_ddiv+0x472>
 8001e10:	d100      	bne.n	8001e14 <__aeabi_ddiv+0x33c>
 8001e12:	e097      	b.n	8001f44 <__aeabi_ddiv+0x46c>
 8001e14:	1bae      	subs	r6, r5, r6
 8001e16:	1a09      	subs	r1, r1, r0
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	4180      	sbcs	r0, r0
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	1a08      	subs	r0, r1, r0
 8001e20:	4284      	cmp	r4, r0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x34e>
 8001e24:	e111      	b.n	800204a <__aeabi_ddiv+0x572>
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe f9fa 	bl	8000220 <__aeabi_uidivmod>
 8001e2c:	9a01      	ldr	r2, [sp, #4]
 8001e2e:	040b      	lsls	r3, r1, #16
 8001e30:	4342      	muls	r2, r0
 8001e32:	0c31      	lsrs	r1, r6, #16
 8001e34:	0005      	movs	r5, r0
 8001e36:	4319      	orrs	r1, r3
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d907      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e3c:	1909      	adds	r1, r1, r4
 8001e3e:	3d01      	subs	r5, #1
 8001e40:	428c      	cmp	r4, r1
 8001e42:	d803      	bhi.n	8001e4c <__aeabi_ddiv+0x374>
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d901      	bls.n	8001e4c <__aeabi_ddiv+0x374>
 8001e48:	1e85      	subs	r5, r0, #2
 8001e4a:	1909      	adds	r1, r1, r4
 8001e4c:	1a88      	subs	r0, r1, r2
 8001e4e:	4649      	mov	r1, r9
 8001e50:	f7fe f9e6 	bl	8000220 <__aeabi_uidivmod>
 8001e54:	0409      	lsls	r1, r1, #16
 8001e56:	468c      	mov	ip, r1
 8001e58:	0431      	lsls	r1, r6, #16
 8001e5a:	4666      	mov	r6, ip
 8001e5c:	9a01      	ldr	r2, [sp, #4]
 8001e5e:	0c09      	lsrs	r1, r1, #16
 8001e60:	4342      	muls	r2, r0
 8001e62:	0003      	movs	r3, r0
 8001e64:	4331      	orrs	r1, r6
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d907      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e6a:	1909      	adds	r1, r1, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	428c      	cmp	r4, r1
 8001e70:	d803      	bhi.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d901      	bls.n	8001e7a <__aeabi_ddiv+0x3a2>
 8001e76:	1e83      	subs	r3, r0, #2
 8001e78:	1909      	adds	r1, r1, r4
 8001e7a:	9e03      	ldr	r6, [sp, #12]
 8001e7c:	1a89      	subs	r1, r1, r2
 8001e7e:	0032      	movs	r2, r6
 8001e80:	042d      	lsls	r5, r5, #16
 8001e82:	431d      	orrs	r5, r3
 8001e84:	9f02      	ldr	r7, [sp, #8]
 8001e86:	042b      	lsls	r3, r5, #16
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	435a      	muls	r2, r3
 8001e8c:	437b      	muls	r3, r7
 8001e8e:	469c      	mov	ip, r3
 8001e90:	0c28      	lsrs	r0, r5, #16
 8001e92:	4346      	muls	r6, r0
 8001e94:	0c13      	lsrs	r3, r2, #16
 8001e96:	44b4      	add	ip, r6
 8001e98:	4463      	add	r3, ip
 8001e9a:	4378      	muls	r0, r7
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d903      	bls.n	8001ea8 <__aeabi_ddiv+0x3d0>
 8001ea0:	2680      	movs	r6, #128	; 0x80
 8001ea2:	0276      	lsls	r6, r6, #9
 8001ea4:	46b4      	mov	ip, r6
 8001ea6:	4460      	add	r0, ip
 8001ea8:	0c1e      	lsrs	r6, r3, #16
 8001eaa:	0412      	lsls	r2, r2, #16
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c12      	lsrs	r2, r2, #16
 8001eb0:	1830      	adds	r0, r6, r0
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	d306      	bcc.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001eb8:	d002      	beq.n	8001ec0 <__aeabi_ddiv+0x3e8>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	431d      	orrs	r5, r3
 8001ebe:	e6ce      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x3ee>
 8001ec4:	e6cb      	b.n	8001c5e <__aeabi_ddiv+0x186>
 8001ec6:	1861      	adds	r1, r4, r1
 8001ec8:	1e6e      	subs	r6, r5, #1
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	d200      	bcs.n	8001ed0 <__aeabi_ddiv+0x3f8>
 8001ece:	e0a4      	b.n	800201a <__aeabi_ddiv+0x542>
 8001ed0:	4281      	cmp	r1, r0
 8001ed2:	d200      	bcs.n	8001ed6 <__aeabi_ddiv+0x3fe>
 8001ed4:	e0c9      	b.n	800206a <__aeabi_ddiv+0x592>
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x402>
 8001ed8:	e0d9      	b.n	800208e <__aeabi_ddiv+0x5b6>
 8001eda:	0035      	movs	r5, r6
 8001edc:	e7ed      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8001ede:	2501      	movs	r5, #1
 8001ee0:	426d      	negs	r5, r5
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	1a89      	subs	r1, r1, r2
 8001ee6:	2938      	cmp	r1, #56	; 0x38
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_ddiv+0x414>
 8001eea:	e64c      	b.n	8001b86 <__aeabi_ddiv+0xae>
 8001eec:	291f      	cmp	r1, #31
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_ddiv+0x41a>
 8001ef0:	e07f      	b.n	8001ff2 <__aeabi_ddiv+0x51a>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	1a9a      	subs	r2, r3, r2
 8001ef8:	4643      	mov	r3, r8
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	2920      	cmp	r1, #32
 8001efe:	d004      	beq.n	8001f0a <__aeabi_ddiv+0x432>
 8001f00:	4644      	mov	r4, r8
 8001f02:	4a65      	ldr	r2, [pc, #404]	; (8002098 <__aeabi_ddiv+0x5c0>)
 8001f04:	445a      	add	r2, fp
 8001f06:	4094      	lsls	r4, r2
 8001f08:	4325      	orrs	r5, r4
 8001f0a:	1e6a      	subs	r2, r5, #1
 8001f0c:	4195      	sbcs	r5, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	432b      	orrs	r3, r5
 8001f12:	0015      	movs	r5, r2
 8001f14:	2400      	movs	r4, #0
 8001f16:	401d      	ands	r5, r3
 8001f18:	421a      	tst	r2, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x446>
 8001f1c:	e0a1      	b.n	8002062 <__aeabi_ddiv+0x58a>
 8001f1e:	220f      	movs	r2, #15
 8001f20:	2400      	movs	r4, #0
 8001f22:	401a      	ands	r2, r3
 8001f24:	2a04      	cmp	r2, #4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8001f28:	e098      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	425b      	negs	r3, r3
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	0222      	lsls	r2, r4, #8
 8001f38:	d400      	bmi.n	8001f3c <__aeabi_ddiv+0x464>
 8001f3a:	e08f      	b.n	800205c <__aeabi_ddiv+0x584>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2500      	movs	r5, #0
 8001f42:	e623      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 8001f44:	42b5      	cmp	r5, r6
 8001f46:	d300      	bcc.n	8001f4a <__aeabi_ddiv+0x472>
 8001f48:	e764      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	9b00      	ldr	r3, [sp, #0]
 8001f50:	469c      	mov	ip, r3
 8001f52:	4465      	add	r5, ip
 8001f54:	001f      	movs	r7, r3
 8001f56:	429d      	cmp	r5, r3
 8001f58:	419b      	sbcs	r3, r3
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	191b      	adds	r3, r3, r4
 8001f5e:	18c9      	adds	r1, r1, r3
 8001f60:	428c      	cmp	r4, r1
 8001f62:	d23a      	bcs.n	8001fda <__aeabi_ddiv+0x502>
 8001f64:	4288      	cmp	r0, r1
 8001f66:	d863      	bhi.n	8002030 <__aeabi_ddiv+0x558>
 8001f68:	d060      	beq.n	800202c <__aeabi_ddiv+0x554>
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	e752      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001f6e:	42aa      	cmp	r2, r5
 8001f70:	d900      	bls.n	8001f74 <__aeabi_ddiv+0x49c>
 8001f72:	e6ea      	b.n	8001d4a <__aeabi_ddiv+0x272>
 8001f74:	4643      	mov	r3, r8
 8001f76:	07de      	lsls	r6, r3, #31
 8001f78:	0858      	lsrs	r0, r3, #1
 8001f7a:	086b      	lsrs	r3, r5, #1
 8001f7c:	431e      	orrs	r6, r3
 8001f7e:	07ed      	lsls	r5, r5, #31
 8001f80:	e6ea      	b.n	8001d58 <__aeabi_ddiv+0x280>
 8001f82:	4648      	mov	r0, r9
 8001f84:	f001 f926 	bl	80031d4 <__clzsi2>
 8001f88:	0001      	movs	r1, r0
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	3115      	adds	r1, #21
 8001f8e:	3220      	adds	r2, #32
 8001f90:	291c      	cmp	r1, #28
 8001f92:	dc00      	bgt.n	8001f96 <__aeabi_ddiv+0x4be>
 8001f94:	e61a      	b.n	8001bcc <__aeabi_ddiv+0xf4>
 8001f96:	464b      	mov	r3, r9
 8001f98:	3808      	subs	r0, #8
 8001f9a:	4083      	lsls	r3, r0
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	e620      	b.n	8001be4 <__aeabi_ddiv+0x10c>
 8001fa2:	f001 f917 	bl	80031d4 <__clzsi2>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	001a      	movs	r2, r3
 8001faa:	3215      	adds	r2, #21
 8001fac:	3020      	adds	r0, #32
 8001fae:	2a1c      	cmp	r2, #28
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_ddiv+0x4dc>
 8001fb2:	e630      	b.n	8001c16 <__aeabi_ddiv+0x13e>
 8001fb4:	4654      	mov	r4, sl
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	2200      	movs	r2, #0
 8001fba:	409c      	lsls	r4, r3
 8001fbc:	e635      	b.n	8001c2a <__aeabi_ddiv+0x152>
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	402b      	ands	r3, r5
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_ddiv+0x4f0>
 8001fc6:	e652      	b.n	8001c6e <__aeabi_ddiv+0x196>
 8001fc8:	2305      	movs	r3, #5
 8001fca:	425b      	negs	r3, r3
 8001fcc:	42ab      	cmp	r3, r5
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	3504      	adds	r5, #4
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	08ed      	lsrs	r5, r5, #3
 8001fd6:	4498      	add	r8, r3
 8001fd8:	e64a      	b.n	8001c70 <__aeabi_ddiv+0x198>
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d1c5      	bne.n	8001f6a <__aeabi_ddiv+0x492>
 8001fde:	42af      	cmp	r7, r5
 8001fe0:	d9c0      	bls.n	8001f64 <__aeabi_ddiv+0x48c>
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	e716      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x514>
 8001fea:	e6ea      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001fec:	1e83      	subs	r3, r0, #2
 8001fee:	1909      	adds	r1, r1, r4
 8001ff0:	e6e7      	b.n	8001dc2 <__aeabi_ddiv+0x2ea>
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <__aeabi_ddiv+0x5c4>)
 8001ff4:	0028      	movs	r0, r5
 8001ff6:	445a      	add	r2, fp
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	4095      	lsls	r5, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	1e6a      	subs	r2, r5, #1
 8002002:	4195      	sbcs	r5, r2
 8002004:	4644      	mov	r4, r8
 8002006:	4303      	orrs	r3, r0
 8002008:	432b      	orrs	r3, r5
 800200a:	40cc      	lsrs	r4, r1
 800200c:	075a      	lsls	r2, r3, #29
 800200e:	d092      	beq.n	8001f36 <__aeabi_ddiv+0x45e>
 8002010:	220f      	movs	r2, #15
 8002012:	401a      	ands	r2, r3
 8002014:	2a04      	cmp	r2, #4
 8002016:	d188      	bne.n	8001f2a <__aeabi_ddiv+0x452>
 8002018:	e78d      	b.n	8001f36 <__aeabi_ddiv+0x45e>
 800201a:	0035      	movs	r5, r6
 800201c:	4281      	cmp	r1, r0
 800201e:	d000      	beq.n	8002022 <__aeabi_ddiv+0x54a>
 8002020:	e74b      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	4293      	cmp	r3, r2
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x552>
 8002028:	e747      	b.n	8001eba <__aeabi_ddiv+0x3e2>
 800202a:	e618      	b.n	8001c5e <__aeabi_ddiv+0x186>
 800202c:	42ae      	cmp	r6, r5
 800202e:	d99c      	bls.n	8001f6a <__aeabi_ddiv+0x492>
 8002030:	2302      	movs	r3, #2
 8002032:	425b      	negs	r3, r3
 8002034:	469c      	mov	ip, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	44e0      	add	r8, ip
 800203a:	469c      	mov	ip, r3
 800203c:	4465      	add	r5, ip
 800203e:	429d      	cmp	r5, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	425b      	negs	r3, r3
 8002044:	191b      	adds	r3, r3, r4
 8002046:	18c9      	adds	r1, r1, r3
 8002048:	e6e4      	b.n	8001e14 <__aeabi_ddiv+0x33c>
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <__aeabi_ddiv+0x5c8>)
 800204c:	445a      	add	r2, fp
 800204e:	2a00      	cmp	r2, #0
 8002050:	dc00      	bgt.n	8002054 <__aeabi_ddiv+0x57c>
 8002052:	e744      	b.n	8001ede <__aeabi_ddiv+0x406>
 8002054:	2301      	movs	r3, #1
 8002056:	2500      	movs	r5, #0
 8002058:	4498      	add	r8, r3
 800205a:	e609      	b.n	8001c70 <__aeabi_ddiv+0x198>
 800205c:	0765      	lsls	r5, r4, #29
 800205e:	0264      	lsls	r4, r4, #9
 8002060:	0b24      	lsrs	r4, r4, #12
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	431d      	orrs	r5, r3
 8002066:	2300      	movs	r3, #0
 8002068:	e590      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800206a:	9e00      	ldr	r6, [sp, #0]
 800206c:	3d02      	subs	r5, #2
 800206e:	0072      	lsls	r2, r6, #1
 8002070:	42b2      	cmp	r2, r6
 8002072:	41bf      	sbcs	r7, r7
 8002074:	427f      	negs	r7, r7
 8002076:	193c      	adds	r4, r7, r4
 8002078:	1909      	adds	r1, r1, r4
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	e7ce      	b.n	800201c <__aeabi_ddiv+0x544>
 800207e:	2480      	movs	r4, #128	; 0x80
 8002080:	4643      	mov	r3, r8
 8002082:	0324      	lsls	r4, r4, #12
 8002084:	431c      	orrs	r4, r3
 8002086:	0324      	lsls	r4, r4, #12
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__aeabi_ddiv+0x5cc>)
 800208a:	0b24      	lsrs	r4, r4, #12
 800208c:	e57e      	b.n	8001b8c <__aeabi_ddiv+0xb4>
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ea      	bcc.n	800206a <__aeabi_ddiv+0x592>
 8002094:	0035      	movs	r5, r6
 8002096:	e7c4      	b.n	8002022 <__aeabi_ddiv+0x54a>
 8002098:	0000043e 	.word	0x0000043e
 800209c:	0000041e 	.word	0x0000041e
 80020a0:	000003ff 	.word	0x000003ff
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__eqdf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	464f      	mov	r7, r9
 80020ac:	4646      	mov	r6, r8
 80020ae:	46d6      	mov	lr, sl
 80020b0:	4694      	mov	ip, r2
 80020b2:	4691      	mov	r9, r2
 80020b4:	031a      	lsls	r2, r3, #12
 80020b6:	0b12      	lsrs	r2, r2, #12
 80020b8:	4d18      	ldr	r5, [pc, #96]	; (800211c <__eqdf2+0x74>)
 80020ba:	b5c0      	push	{r6, r7, lr}
 80020bc:	004c      	lsls	r4, r1, #1
 80020be:	030f      	lsls	r7, r1, #12
 80020c0:	4692      	mov	sl, r2
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	0006      	movs	r6, r0
 80020c6:	4680      	mov	r8, r0
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	2001      	movs	r0, #1
 80020cc:	0d64      	lsrs	r4, r4, #21
 80020ce:	0fc9      	lsrs	r1, r1, #31
 80020d0:	0d52      	lsrs	r2, r2, #21
 80020d2:	0fdb      	lsrs	r3, r3, #31
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d00a      	beq.n	80020ee <__eqdf2+0x46>
 80020d8:	42aa      	cmp	r2, r5
 80020da:	d003      	beq.n	80020e4 <__eqdf2+0x3c>
 80020dc:	4294      	cmp	r4, r2
 80020de:	d101      	bne.n	80020e4 <__eqdf2+0x3c>
 80020e0:	4557      	cmp	r7, sl
 80020e2:	d00d      	beq.n	8002100 <__eqdf2+0x58>
 80020e4:	bce0      	pop	{r5, r6, r7}
 80020e6:	46ba      	mov	sl, r7
 80020e8:	46b1      	mov	r9, r6
 80020ea:	46a8      	mov	r8, r5
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	003d      	movs	r5, r7
 80020f0:	4335      	orrs	r5, r6
 80020f2:	d1f7      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f4:	42a2      	cmp	r2, r4
 80020f6:	d1f5      	bne.n	80020e4 <__eqdf2+0x3c>
 80020f8:	4652      	mov	r2, sl
 80020fa:	4665      	mov	r5, ip
 80020fc:	432a      	orrs	r2, r5
 80020fe:	d1f1      	bne.n	80020e4 <__eqdf2+0x3c>
 8002100:	2001      	movs	r0, #1
 8002102:	45c8      	cmp	r8, r9
 8002104:	d1ee      	bne.n	80020e4 <__eqdf2+0x3c>
 8002106:	4299      	cmp	r1, r3
 8002108:	d006      	beq.n	8002118 <__eqdf2+0x70>
 800210a:	2c00      	cmp	r4, #0
 800210c:	d1ea      	bne.n	80020e4 <__eqdf2+0x3c>
 800210e:	433e      	orrs	r6, r7
 8002110:	0030      	movs	r0, r6
 8002112:	1e46      	subs	r6, r0, #1
 8002114:	41b0      	sbcs	r0, r6
 8002116:	e7e5      	b.n	80020e4 <__eqdf2+0x3c>
 8002118:	2000      	movs	r0, #0
 800211a:	e7e3      	b.n	80020e4 <__eqdf2+0x3c>
 800211c:	000007ff 	.word	0x000007ff

08002120 <__gedf2>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	464e      	mov	r6, r9
 8002124:	4645      	mov	r5, r8
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	0004      	movs	r4, r0
 800212c:	0018      	movs	r0, r3
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0016      	movs	r6, r2
 8002132:	031b      	lsls	r3, r3, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	4d32      	ldr	r5, [pc, #200]	; (8002200 <__gedf2+0xe0>)
 8002138:	030f      	lsls	r7, r1, #12
 800213a:	004a      	lsls	r2, r1, #1
 800213c:	4699      	mov	r9, r3
 800213e:	0043      	lsls	r3, r0, #1
 8002140:	46a4      	mov	ip, r4
 8002142:	46b0      	mov	r8, r6
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	0d5b      	lsrs	r3, r3, #21
 800214c:	0fc0      	lsrs	r0, r0, #31
 800214e:	42aa      	cmp	r2, r5
 8002150:	d029      	beq.n	80021a6 <__gedf2+0x86>
 8002152:	42ab      	cmp	r3, r5
 8002154:	d018      	beq.n	8002188 <__gedf2+0x68>
 8002156:	2a00      	cmp	r2, #0
 8002158:	d12a      	bne.n	80021b0 <__gedf2+0x90>
 800215a:	433c      	orrs	r4, r7
 800215c:	46a3      	mov	fp, r4
 800215e:	4265      	negs	r5, r4
 8002160:	4165      	adcs	r5, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <__gedf2+0x4c>
 8002166:	464c      	mov	r4, r9
 8002168:	4326      	orrs	r6, r4
 800216a:	d027      	beq.n	80021bc <__gedf2+0x9c>
 800216c:	2d00      	cmp	r5, #0
 800216e:	d115      	bne.n	800219c <__gedf2+0x7c>
 8002170:	4281      	cmp	r1, r0
 8002172:	d028      	beq.n	80021c6 <__gedf2+0xa6>
 8002174:	2002      	movs	r0, #2
 8002176:	3901      	subs	r1, #1
 8002178:	4008      	ands	r0, r1
 800217a:	3801      	subs	r0, #1
 800217c:	bcf0      	pop	{r4, r5, r6, r7}
 800217e:	46bb      	mov	fp, r7
 8002180:	46b2      	mov	sl, r6
 8002182:	46a9      	mov	r9, r5
 8002184:	46a0      	mov	r8, r4
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d12f      	bne.n	80021ee <__gedf2+0xce>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ee      	bne.n	8002170 <__gedf2+0x50>
 8002192:	433c      	orrs	r4, r7
 8002194:	4265      	negs	r5, r4
 8002196:	4165      	adcs	r5, r4
 8002198:	2d00      	cmp	r5, #0
 800219a:	d0e9      	beq.n	8002170 <__gedf2+0x50>
 800219c:	2800      	cmp	r0, #0
 800219e:	d1ed      	bne.n	800217c <__gedf2+0x5c>
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7ea      	b.n	800217c <__gedf2+0x5c>
 80021a6:	003d      	movs	r5, r7
 80021a8:	4325      	orrs	r5, r4
 80021aa:	d120      	bne.n	80021ee <__gedf2+0xce>
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d0eb      	beq.n	8002188 <__gedf2+0x68>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1dd      	bne.n	8002170 <__gedf2+0x50>
 80021b4:	464c      	mov	r4, r9
 80021b6:	4326      	orrs	r6, r4
 80021b8:	d1da      	bne.n	8002170 <__gedf2+0x50>
 80021ba:	e7db      	b.n	8002174 <__gedf2+0x54>
 80021bc:	465b      	mov	r3, fp
 80021be:	2000      	movs	r0, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0db      	beq.n	800217c <__gedf2+0x5c>
 80021c4:	e7d6      	b.n	8002174 <__gedf2+0x54>
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dc0a      	bgt.n	80021e0 <__gedf2+0xc0>
 80021ca:	dbe7      	blt.n	800219c <__gedf2+0x7c>
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d8d1      	bhi.n	8002174 <__gedf2+0x54>
 80021d0:	d010      	beq.n	80021f4 <__gedf2+0xd4>
 80021d2:	2000      	movs	r0, #0
 80021d4:	454f      	cmp	r7, r9
 80021d6:	d2d1      	bcs.n	800217c <__gedf2+0x5c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	d0e1      	beq.n	80021a0 <__gedf2+0x80>
 80021dc:	0008      	movs	r0, r1
 80021de:	e7cd      	b.n	800217c <__gedf2+0x5c>
 80021e0:	4243      	negs	r3, r0
 80021e2:	4158      	adcs	r0, r3
 80021e4:	2302      	movs	r3, #2
 80021e6:	4240      	negs	r0, r0
 80021e8:	4018      	ands	r0, r3
 80021ea:	3801      	subs	r0, #1
 80021ec:	e7c6      	b.n	800217c <__gedf2+0x5c>
 80021ee:	2002      	movs	r0, #2
 80021f0:	4240      	negs	r0, r0
 80021f2:	e7c3      	b.n	800217c <__gedf2+0x5c>
 80021f4:	45c4      	cmp	ip, r8
 80021f6:	d8bd      	bhi.n	8002174 <__gedf2+0x54>
 80021f8:	2000      	movs	r0, #0
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d2be      	bcs.n	800217c <__gedf2+0x5c>
 80021fe:	e7eb      	b.n	80021d8 <__gedf2+0xb8>
 8002200:	000007ff 	.word	0x000007ff

08002204 <__ledf2>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	464e      	mov	r6, r9
 8002208:	4645      	mov	r5, r8
 800220a:	4657      	mov	r7, sl
 800220c:	46de      	mov	lr, fp
 800220e:	0004      	movs	r4, r0
 8002210:	0018      	movs	r0, r3
 8002212:	b5e0      	push	{r5, r6, r7, lr}
 8002214:	0016      	movs	r6, r2
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	0b1b      	lsrs	r3, r3, #12
 800221a:	4d31      	ldr	r5, [pc, #196]	; (80022e0 <__ledf2+0xdc>)
 800221c:	030f      	lsls	r7, r1, #12
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	0043      	lsls	r3, r0, #1
 8002224:	46a4      	mov	ip, r4
 8002226:	46b0      	mov	r8, r6
 8002228:	0b3f      	lsrs	r7, r7, #12
 800222a:	0d52      	lsrs	r2, r2, #21
 800222c:	0fc9      	lsrs	r1, r1, #31
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fc0      	lsrs	r0, r0, #31
 8002232:	42aa      	cmp	r2, r5
 8002234:	d011      	beq.n	800225a <__ledf2+0x56>
 8002236:	42ab      	cmp	r3, r5
 8002238:	d014      	beq.n	8002264 <__ledf2+0x60>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d12f      	bne.n	800229e <__ledf2+0x9a>
 800223e:	433c      	orrs	r4, r7
 8002240:	46a3      	mov	fp, r4
 8002242:	4265      	negs	r5, r4
 8002244:	4165      	adcs	r5, r4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__ledf2+0x70>
 800224a:	464c      	mov	r4, r9
 800224c:	4326      	orrs	r6, r4
 800224e:	d111      	bne.n	8002274 <__ledf2+0x70>
 8002250:	465b      	mov	r3, fp
 8002252:	2000      	movs	r0, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <__ledf2+0x84>
 8002258:	e010      	b.n	800227c <__ledf2+0x78>
 800225a:	003d      	movs	r5, r7
 800225c:	4325      	orrs	r5, r4
 800225e:	d112      	bne.n	8002286 <__ledf2+0x82>
 8002260:	4293      	cmp	r3, r2
 8002262:	d11c      	bne.n	800229e <__ledf2+0x9a>
 8002264:	464d      	mov	r5, r9
 8002266:	432e      	orrs	r6, r5
 8002268:	d10d      	bne.n	8002286 <__ledf2+0x82>
 800226a:	2a00      	cmp	r2, #0
 800226c:	d104      	bne.n	8002278 <__ledf2+0x74>
 800226e:	433c      	orrs	r4, r7
 8002270:	4265      	negs	r5, r4
 8002272:	4165      	adcs	r5, r4
 8002274:	2d00      	cmp	r5, #0
 8002276:	d10d      	bne.n	8002294 <__ledf2+0x90>
 8002278:	4281      	cmp	r1, r0
 800227a:	d016      	beq.n	80022aa <__ledf2+0xa6>
 800227c:	2002      	movs	r0, #2
 800227e:	3901      	subs	r1, #1
 8002280:	4008      	ands	r0, r1
 8002282:	3801      	subs	r0, #1
 8002284:	e000      	b.n	8002288 <__ledf2+0x84>
 8002286:	2002      	movs	r0, #2
 8002288:	bcf0      	pop	{r4, r5, r6, r7}
 800228a:	46bb      	mov	fp, r7
 800228c:	46b2      	mov	sl, r6
 800228e:	46a9      	mov	r9, r5
 8002290:	46a0      	mov	r8, r4
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f7      	bne.n	8002288 <__ledf2+0x84>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f4      	b.n	8002288 <__ledf2+0x84>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ea      	bne.n	8002278 <__ledf2+0x74>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e7      	bne.n	8002278 <__ledf2+0x74>
 80022a8:	e7e8      	b.n	800227c <__ledf2+0x78>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd06      	ble.n	80022bc <__ledf2+0xb8>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	2302      	movs	r3, #2
 80022b4:	4240      	negs	r0, r0
 80022b6:	4018      	ands	r0, r3
 80022b8:	3801      	subs	r0, #1
 80022ba:	e7e5      	b.n	8002288 <__ledf2+0x84>
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbe9      	blt.n	8002294 <__ledf2+0x90>
 80022c0:	454f      	cmp	r7, r9
 80022c2:	d8db      	bhi.n	800227c <__ledf2+0x78>
 80022c4:	d006      	beq.n	80022d4 <__ledf2+0xd0>
 80022c6:	2000      	movs	r0, #0
 80022c8:	454f      	cmp	r7, r9
 80022ca:	d2dd      	bcs.n	8002288 <__ledf2+0x84>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d0e3      	beq.n	8002298 <__ledf2+0x94>
 80022d0:	0008      	movs	r0, r1
 80022d2:	e7d9      	b.n	8002288 <__ledf2+0x84>
 80022d4:	45c4      	cmp	ip, r8
 80022d6:	d8d1      	bhi.n	800227c <__ledf2+0x78>
 80022d8:	2000      	movs	r0, #0
 80022da:	45c4      	cmp	ip, r8
 80022dc:	d2d4      	bcs.n	8002288 <__ledf2+0x84>
 80022de:	e7f5      	b.n	80022cc <__ledf2+0xc8>
 80022e0:	000007ff 	.word	0x000007ff

080022e4 <__aeabi_dmul>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	464e      	mov	r6, r9
 80022ea:	4645      	mov	r5, r8
 80022ec:	46de      	mov	lr, fp
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	4698      	mov	r8, r3
 80022f2:	030c      	lsls	r4, r1, #12
 80022f4:	004b      	lsls	r3, r1, #1
 80022f6:	0006      	movs	r6, r0
 80022f8:	4692      	mov	sl, r2
 80022fa:	b087      	sub	sp, #28
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d5b      	lsrs	r3, r3, #21
 8002300:	0fcf      	lsrs	r7, r1, #31
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <__aeabi_dmul+0xfc>
 8002306:	4add      	ldr	r2, [pc, #884]	; (800267c <__aeabi_dmul+0x398>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d100      	bne.n	800230e <__aeabi_dmul+0x2a>
 800230c:	e086      	b.n	800241c <__aeabi_dmul+0x138>
 800230e:	0f42      	lsrs	r2, r0, #29
 8002310:	00e4      	lsls	r4, r4, #3
 8002312:	4314      	orrs	r4, r2
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0412      	lsls	r2, r2, #16
 8002318:	4314      	orrs	r4, r2
 800231a:	4ad9      	ldr	r2, [pc, #868]	; (8002680 <__aeabi_dmul+0x39c>)
 800231c:	00c5      	lsls	r5, r0, #3
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	4699      	mov	r9, r3
 8002328:	469b      	mov	fp, r3
 800232a:	4643      	mov	r3, r8
 800232c:	4642      	mov	r2, r8
 800232e:	031e      	lsls	r6, r3, #12
 8002330:	0fd2      	lsrs	r2, r2, #31
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4650      	mov	r0, sl
 8002336:	4690      	mov	r8, r2
 8002338:	0b36      	lsrs	r6, r6, #12
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x5c>
 800233e:	e078      	b.n	8002432 <__aeabi_dmul+0x14e>
 8002340:	4ace      	ldr	r2, [pc, #824]	; (800267c <__aeabi_dmul+0x398>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <__aeabi_dmul+0x9e>
 8002346:	49ce      	ldr	r1, [pc, #824]	; (8002680 <__aeabi_dmul+0x39c>)
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	468c      	mov	ip, r1
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	4463      	add	r3, ip
 8002350:	00f6      	lsls	r6, r6, #3
 8002352:	468c      	mov	ip, r1
 8002354:	4316      	orrs	r6, r2
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	449c      	add	ip, r3
 800235a:	0412      	lsls	r2, r2, #16
 800235c:	4663      	mov	r3, ip
 800235e:	4316      	orrs	r6, r2
 8002360:	00c2      	lsls	r2, r0, #3
 8002362:	2000      	movs	r0, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	9900      	ldr	r1, [sp, #0]
 8002368:	4643      	mov	r3, r8
 800236a:	3101      	adds	r1, #1
 800236c:	468c      	mov	ip, r1
 800236e:	4649      	mov	r1, r9
 8002370:	407b      	eors	r3, r7
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	290f      	cmp	r1, #15
 8002376:	d900      	bls.n	800237a <__aeabi_dmul+0x96>
 8002378:	e07e      	b.n	8002478 <__aeabi_dmul+0x194>
 800237a:	4bc2      	ldr	r3, [pc, #776]	; (8002684 <__aeabi_dmul+0x3a0>)
 800237c:	0089      	lsls	r1, r1, #2
 800237e:	5859      	ldr	r1, [r3, r1]
 8002380:	468f      	mov	pc, r1
 8002382:	4652      	mov	r2, sl
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	4332      	orrs	r2, r6
 8002388:	d000      	beq.n	800238c <__aeabi_dmul+0xa8>
 800238a:	e156      	b.n	800263a <__aeabi_dmul+0x356>
 800238c:	49bb      	ldr	r1, [pc, #748]	; (800267c <__aeabi_dmul+0x398>)
 800238e:	2600      	movs	r6, #0
 8002390:	468c      	mov	ip, r1
 8002392:	4463      	add	r3, ip
 8002394:	4649      	mov	r1, r9
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	4319      	orrs	r1, r3
 800239c:	4689      	mov	r9, r1
 800239e:	2002      	movs	r0, #2
 80023a0:	e7e1      	b.n	8002366 <__aeabi_dmul+0x82>
 80023a2:	4643      	mov	r3, r8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	0034      	movs	r4, r6
 80023a8:	0015      	movs	r5, r2
 80023aa:	4683      	mov	fp, r0
 80023ac:	465b      	mov	r3, fp
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d05e      	beq.n	8002470 <__aeabi_dmul+0x18c>
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dmul+0xd4>
 80023b6:	e1f3      	b.n	80027a0 <__aeabi_dmul+0x4bc>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0xda>
 80023bc:	e118      	b.n	80025f0 <__aeabi_dmul+0x30c>
 80023be:	2200      	movs	r2, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2500      	movs	r5, #0
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	0512      	lsls	r2, r2, #20
 80023c8:	4322      	orrs	r2, r4
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0028      	movs	r0, r5
 80023d0:	0011      	movs	r1, r2
 80023d2:	b007      	add	sp, #28
 80023d4:	bcf0      	pop	{r4, r5, r6, r7}
 80023d6:	46bb      	mov	fp, r7
 80023d8:	46b2      	mov	sl, r6
 80023da:	46a9      	mov	r9, r5
 80023dc:	46a0      	mov	r8, r4
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e0:	0025      	movs	r5, r4
 80023e2:	4305      	orrs	r5, r0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dmul+0x104>
 80023e6:	e141      	b.n	800266c <__aeabi_dmul+0x388>
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x10a>
 80023ec:	e1ad      	b.n	800274a <__aeabi_dmul+0x466>
 80023ee:	0020      	movs	r0, r4
 80023f0:	f000 fef0 	bl	80031d4 <__clzsi2>
 80023f4:	0001      	movs	r1, r0
 80023f6:	0002      	movs	r2, r0
 80023f8:	390b      	subs	r1, #11
 80023fa:	231d      	movs	r3, #29
 80023fc:	0010      	movs	r0, r2
 80023fe:	1a5b      	subs	r3, r3, r1
 8002400:	0031      	movs	r1, r6
 8002402:	0035      	movs	r5, r6
 8002404:	3808      	subs	r0, #8
 8002406:	4084      	lsls	r4, r0
 8002408:	40d9      	lsrs	r1, r3
 800240a:	4085      	lsls	r5, r0
 800240c:	430c      	orrs	r4, r1
 800240e:	489e      	ldr	r0, [pc, #632]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002410:	1a83      	subs	r3, r0, r2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	4699      	mov	r9, r3
 8002418:	469b      	mov	fp, r3
 800241a:	e786      	b.n	800232a <__aeabi_dmul+0x46>
 800241c:	0005      	movs	r5, r0
 800241e:	4325      	orrs	r5, r4
 8002420:	d000      	beq.n	8002424 <__aeabi_dmul+0x140>
 8002422:	e11c      	b.n	800265e <__aeabi_dmul+0x37a>
 8002424:	2208      	movs	r2, #8
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	2400      	movs	r4, #0
 800242c:	4691      	mov	r9, r2
 800242e:	469b      	mov	fp, r3
 8002430:	e77b      	b.n	800232a <__aeabi_dmul+0x46>
 8002432:	4652      	mov	r2, sl
 8002434:	4332      	orrs	r2, r6
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x156>
 8002438:	e10a      	b.n	8002650 <__aeabi_dmul+0x36c>
 800243a:	2e00      	cmp	r6, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dmul+0x15c>
 800243e:	e176      	b.n	800272e <__aeabi_dmul+0x44a>
 8002440:	0030      	movs	r0, r6
 8002442:	f000 fec7 	bl	80031d4 <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	3a0b      	subs	r2, #11
 800244a:	231d      	movs	r3, #29
 800244c:	0001      	movs	r1, r0
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	4652      	mov	r2, sl
 8002452:	3908      	subs	r1, #8
 8002454:	40da      	lsrs	r2, r3
 8002456:	408e      	lsls	r6, r1
 8002458:	4316      	orrs	r6, r2
 800245a:	4652      	mov	r2, sl
 800245c:	408a      	lsls	r2, r1
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	4989      	ldr	r1, [pc, #548]	; (8002688 <__aeabi_dmul+0x3a4>)
 8002462:	1a18      	subs	r0, r3, r0
 8002464:	0003      	movs	r3, r0
 8002466:	468c      	mov	ip, r1
 8002468:	4463      	add	r3, ip
 800246a:	2000      	movs	r0, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	e77a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002470:	2400      	movs	r4, #0
 8002472:	2500      	movs	r5, #0
 8002474:	4a81      	ldr	r2, [pc, #516]	; (800267c <__aeabi_dmul+0x398>)
 8002476:	e7a5      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002478:	0c2f      	lsrs	r7, r5, #16
 800247a:	042d      	lsls	r5, r5, #16
 800247c:	0c2d      	lsrs	r5, r5, #16
 800247e:	002b      	movs	r3, r5
 8002480:	0c11      	lsrs	r1, r2, #16
 8002482:	0412      	lsls	r2, r2, #16
 8002484:	0c12      	lsrs	r2, r2, #16
 8002486:	4353      	muls	r3, r2
 8002488:	4698      	mov	r8, r3
 800248a:	0013      	movs	r3, r2
 800248c:	0028      	movs	r0, r5
 800248e:	437b      	muls	r3, r7
 8002490:	4699      	mov	r9, r3
 8002492:	4348      	muls	r0, r1
 8002494:	4448      	add	r0, r9
 8002496:	4683      	mov	fp, r0
 8002498:	4640      	mov	r0, r8
 800249a:	000b      	movs	r3, r1
 800249c:	0c00      	lsrs	r0, r0, #16
 800249e:	4682      	mov	sl, r0
 80024a0:	4658      	mov	r0, fp
 80024a2:	437b      	muls	r3, r7
 80024a4:	4450      	add	r0, sl
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	4581      	cmp	r9, r0
 80024aa:	d906      	bls.n	80024ba <__aeabi_dmul+0x1d6>
 80024ac:	469a      	mov	sl, r3
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4699      	mov	r9, r3
 80024b4:	44ca      	add	sl, r9
 80024b6:	4653      	mov	r3, sl
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	0c03      	lsrs	r3, r0, #16
 80024bc:	469b      	mov	fp, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0400      	lsls	r0, r0, #16
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	4698      	mov	r8, r3
 80024c8:	0003      	movs	r3, r0
 80024ca:	4443      	add	r3, r8
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	0c33      	lsrs	r3, r6, #16
 80024d0:	4699      	mov	r9, r3
 80024d2:	002b      	movs	r3, r5
 80024d4:	0436      	lsls	r6, r6, #16
 80024d6:	0c36      	lsrs	r6, r6, #16
 80024d8:	4373      	muls	r3, r6
 80024da:	4698      	mov	r8, r3
 80024dc:	0033      	movs	r3, r6
 80024de:	437b      	muls	r3, r7
 80024e0:	469a      	mov	sl, r3
 80024e2:	464b      	mov	r3, r9
 80024e4:	435d      	muls	r5, r3
 80024e6:	435f      	muls	r7, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	4455      	add	r5, sl
 80024ec:	0c18      	lsrs	r0, r3, #16
 80024ee:	1940      	adds	r0, r0, r5
 80024f0:	4582      	cmp	sl, r0
 80024f2:	d903      	bls.n	80024fc <__aeabi_dmul+0x218>
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	469a      	mov	sl, r3
 80024fa:	4457      	add	r7, sl
 80024fc:	0c05      	lsrs	r5, r0, #16
 80024fe:	19eb      	adds	r3, r5, r7
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	4643      	mov	r3, r8
 8002504:	041d      	lsls	r5, r3, #16
 8002506:	0c2d      	lsrs	r5, r5, #16
 8002508:	0400      	lsls	r0, r0, #16
 800250a:	1940      	adds	r0, r0, r5
 800250c:	0c25      	lsrs	r5, r4, #16
 800250e:	0424      	lsls	r4, r4, #16
 8002510:	0c24      	lsrs	r4, r4, #16
 8002512:	0027      	movs	r7, r4
 8002514:	4357      	muls	r7, r2
 8002516:	436a      	muls	r2, r5
 8002518:	4690      	mov	r8, r2
 800251a:	002a      	movs	r2, r5
 800251c:	0c3b      	lsrs	r3, r7, #16
 800251e:	469a      	mov	sl, r3
 8002520:	434a      	muls	r2, r1
 8002522:	4361      	muls	r1, r4
 8002524:	4441      	add	r1, r8
 8002526:	4451      	add	r1, sl
 8002528:	4483      	add	fp, r0
 800252a:	4588      	cmp	r8, r1
 800252c:	d903      	bls.n	8002536 <__aeabi_dmul+0x252>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	4698      	mov	r8, r3
 8002534:	4442      	add	r2, r8
 8002536:	043f      	lsls	r7, r7, #16
 8002538:	0c0b      	lsrs	r3, r1, #16
 800253a:	0c3f      	lsrs	r7, r7, #16
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	19c9      	adds	r1, r1, r7
 8002540:	0027      	movs	r7, r4
 8002542:	4698      	mov	r8, r3
 8002544:	464b      	mov	r3, r9
 8002546:	4377      	muls	r7, r6
 8002548:	435c      	muls	r4, r3
 800254a:	436e      	muls	r6, r5
 800254c:	435d      	muls	r5, r3
 800254e:	0c3b      	lsrs	r3, r7, #16
 8002550:	4699      	mov	r9, r3
 8002552:	19a4      	adds	r4, r4, r6
 8002554:	444c      	add	r4, r9
 8002556:	4442      	add	r2, r8
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	42a6      	cmp	r6, r4
 800255c:	d904      	bls.n	8002568 <__aeabi_dmul+0x284>
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4698      	mov	r8, r3
 8002564:	4445      	add	r5, r8
 8002566:	9503      	str	r5, [sp, #12]
 8002568:	9b02      	ldr	r3, [sp, #8]
 800256a:	043f      	lsls	r7, r7, #16
 800256c:	445b      	add	r3, fp
 800256e:	001e      	movs	r6, r3
 8002570:	4283      	cmp	r3, r0
 8002572:	4180      	sbcs	r0, r0
 8002574:	0423      	lsls	r3, r4, #16
 8002576:	4698      	mov	r8, r3
 8002578:	9b05      	ldr	r3, [sp, #20]
 800257a:	0c3f      	lsrs	r7, r7, #16
 800257c:	4447      	add	r7, r8
 800257e:	4698      	mov	r8, r3
 8002580:	1876      	adds	r6, r6, r1
 8002582:	428e      	cmp	r6, r1
 8002584:	4189      	sbcs	r1, r1
 8002586:	4447      	add	r7, r8
 8002588:	4240      	negs	r0, r0
 800258a:	183d      	adds	r5, r7, r0
 800258c:	46a8      	mov	r8, r5
 800258e:	4693      	mov	fp, r2
 8002590:	4249      	negs	r1, r1
 8002592:	468a      	mov	sl, r1
 8002594:	44c3      	add	fp, r8
 8002596:	429f      	cmp	r7, r3
 8002598:	41bf      	sbcs	r7, r7
 800259a:	4580      	cmp	r8, r0
 800259c:	4180      	sbcs	r0, r0
 800259e:	9b03      	ldr	r3, [sp, #12]
 80025a0:	44da      	add	sl, fp
 80025a2:	4698      	mov	r8, r3
 80025a4:	4653      	mov	r3, sl
 80025a6:	4240      	negs	r0, r0
 80025a8:	427f      	negs	r7, r7
 80025aa:	4307      	orrs	r7, r0
 80025ac:	0c24      	lsrs	r4, r4, #16
 80025ae:	4593      	cmp	fp, r2
 80025b0:	4192      	sbcs	r2, r2
 80025b2:	458a      	cmp	sl, r1
 80025b4:	4189      	sbcs	r1, r1
 80025b6:	193f      	adds	r7, r7, r4
 80025b8:	0ddc      	lsrs	r4, r3, #23
 80025ba:	9b04      	ldr	r3, [sp, #16]
 80025bc:	0275      	lsls	r5, r6, #9
 80025be:	431d      	orrs	r5, r3
 80025c0:	1e68      	subs	r0, r5, #1
 80025c2:	4185      	sbcs	r5, r0
 80025c4:	4653      	mov	r3, sl
 80025c6:	4252      	negs	r2, r2
 80025c8:	4249      	negs	r1, r1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	18bf      	adds	r7, r7, r2
 80025ce:	4447      	add	r7, r8
 80025d0:	0df6      	lsrs	r6, r6, #23
 80025d2:	027f      	lsls	r7, r7, #9
 80025d4:	4335      	orrs	r5, r6
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	433c      	orrs	r4, r7
 80025da:	4315      	orrs	r5, r2
 80025dc:	01fb      	lsls	r3, r7, #7
 80025de:	d400      	bmi.n	80025e2 <__aeabi_dmul+0x2fe>
 80025e0:	e0c1      	b.n	8002766 <__aeabi_dmul+0x482>
 80025e2:	2101      	movs	r1, #1
 80025e4:	086a      	lsrs	r2, r5, #1
 80025e6:	400d      	ands	r5, r1
 80025e8:	4315      	orrs	r5, r2
 80025ea:	07e2      	lsls	r2, r4, #31
 80025ec:	4315      	orrs	r5, r2
 80025ee:	0864      	lsrs	r4, r4, #1
 80025f0:	4926      	ldr	r1, [pc, #152]	; (800268c <__aeabi_dmul+0x3a8>)
 80025f2:	4461      	add	r1, ip
 80025f4:	2900      	cmp	r1, #0
 80025f6:	dd56      	ble.n	80026a6 <__aeabi_dmul+0x3c2>
 80025f8:	076b      	lsls	r3, r5, #29
 80025fa:	d009      	beq.n	8002610 <__aeabi_dmul+0x32c>
 80025fc:	220f      	movs	r2, #15
 80025fe:	402a      	ands	r2, r5
 8002600:	2a04      	cmp	r2, #4
 8002602:	d005      	beq.n	8002610 <__aeabi_dmul+0x32c>
 8002604:	1d2a      	adds	r2, r5, #4
 8002606:	42aa      	cmp	r2, r5
 8002608:	41ad      	sbcs	r5, r5
 800260a:	426d      	negs	r5, r5
 800260c:	1964      	adds	r4, r4, r5
 800260e:	0015      	movs	r5, r2
 8002610:	01e3      	lsls	r3, r4, #7
 8002612:	d504      	bpl.n	800261e <__aeabi_dmul+0x33a>
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <__aeabi_dmul+0x3ac>)
 8002618:	00c9      	lsls	r1, r1, #3
 800261a:	4014      	ands	r4, r2
 800261c:	4461      	add	r1, ip
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <__aeabi_dmul+0x3b0>)
 8002620:	4291      	cmp	r1, r2
 8002622:	dd00      	ble.n	8002626 <__aeabi_dmul+0x342>
 8002624:	e724      	b.n	8002470 <__aeabi_dmul+0x18c>
 8002626:	0762      	lsls	r2, r4, #29
 8002628:	08ed      	lsrs	r5, r5, #3
 800262a:	0264      	lsls	r4, r4, #9
 800262c:	0549      	lsls	r1, r1, #21
 800262e:	4315      	orrs	r5, r2
 8002630:	0b24      	lsrs	r4, r4, #12
 8002632:	0d4a      	lsrs	r2, r1, #21
 8002634:	e6c6      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002636:	9701      	str	r7, [sp, #4]
 8002638:	e6b8      	b.n	80023ac <__aeabi_dmul+0xc8>
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <__aeabi_dmul+0x398>)
 800263c:	2003      	movs	r0, #3
 800263e:	4694      	mov	ip, r2
 8002640:	4463      	add	r3, ip
 8002642:	464a      	mov	r2, r9
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2303      	movs	r3, #3
 8002648:	431a      	orrs	r2, r3
 800264a:	4691      	mov	r9, r2
 800264c:	4652      	mov	r2, sl
 800264e:	e68a      	b.n	8002366 <__aeabi_dmul+0x82>
 8002650:	4649      	mov	r1, r9
 8002652:	2301      	movs	r3, #1
 8002654:	4319      	orrs	r1, r3
 8002656:	4689      	mov	r9, r1
 8002658:	2600      	movs	r6, #0
 800265a:	2001      	movs	r0, #1
 800265c:	e683      	b.n	8002366 <__aeabi_dmul+0x82>
 800265e:	220c      	movs	r2, #12
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2303      	movs	r3, #3
 8002664:	0005      	movs	r5, r0
 8002666:	4691      	mov	r9, r2
 8002668:	469b      	mov	fp, r3
 800266a:	e65e      	b.n	800232a <__aeabi_dmul+0x46>
 800266c:	2304      	movs	r3, #4
 800266e:	4699      	mov	r9, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	2400      	movs	r4, #0
 8002678:	469b      	mov	fp, r3
 800267a:	e656      	b.n	800232a <__aeabi_dmul+0x46>
 800267c:	000007ff 	.word	0x000007ff
 8002680:	fffffc01 	.word	0xfffffc01
 8002684:	080162ac 	.word	0x080162ac
 8002688:	fffffc0d 	.word	0xfffffc0d
 800268c:	000003ff 	.word	0x000003ff
 8002690:	feffffff 	.word	0xfeffffff
 8002694:	000007fe 	.word	0x000007fe
 8002698:	2300      	movs	r3, #0
 800269a:	2480      	movs	r4, #128	; 0x80
 800269c:	2500      	movs	r5, #0
 800269e:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	0324      	lsls	r4, r4, #12
 80026a4:	e68e      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80026a6:	2001      	movs	r0, #1
 80026a8:	1a40      	subs	r0, r0, r1
 80026aa:	2838      	cmp	r0, #56	; 0x38
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x3cc>
 80026ae:	e686      	b.n	80023be <__aeabi_dmul+0xda>
 80026b0:	281f      	cmp	r0, #31
 80026b2:	dd5b      	ble.n	800276c <__aeabi_dmul+0x488>
 80026b4:	221f      	movs	r2, #31
 80026b6:	0023      	movs	r3, r4
 80026b8:	4252      	negs	r2, r2
 80026ba:	1a51      	subs	r1, r2, r1
 80026bc:	40cb      	lsrs	r3, r1
 80026be:	0019      	movs	r1, r3
 80026c0:	2820      	cmp	r0, #32
 80026c2:	d003      	beq.n	80026cc <__aeabi_dmul+0x3e8>
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <__aeabi_dmul+0x4d0>)
 80026c6:	4462      	add	r2, ip
 80026c8:	4094      	lsls	r4, r2
 80026ca:	4325      	orrs	r5, r4
 80026cc:	1e6a      	subs	r2, r5, #1
 80026ce:	4195      	sbcs	r5, r2
 80026d0:	002a      	movs	r2, r5
 80026d2:	430a      	orrs	r2, r1
 80026d4:	2107      	movs	r1, #7
 80026d6:	000d      	movs	r5, r1
 80026d8:	2400      	movs	r4, #0
 80026da:	4015      	ands	r5, r2
 80026dc:	4211      	tst	r1, r2
 80026de:	d05b      	beq.n	8002798 <__aeabi_dmul+0x4b4>
 80026e0:	210f      	movs	r1, #15
 80026e2:	2400      	movs	r4, #0
 80026e4:	4011      	ands	r1, r2
 80026e6:	2904      	cmp	r1, #4
 80026e8:	d053      	beq.n	8002792 <__aeabi_dmul+0x4ae>
 80026ea:	1d11      	adds	r1, r2, #4
 80026ec:	4291      	cmp	r1, r2
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	4252      	negs	r2, r2
 80026f2:	18a4      	adds	r4, r4, r2
 80026f4:	000a      	movs	r2, r1
 80026f6:	0223      	lsls	r3, r4, #8
 80026f8:	d54b      	bpl.n	8002792 <__aeabi_dmul+0x4ae>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2400      	movs	r4, #0
 80026fe:	2500      	movs	r5, #0
 8002700:	e660      	b.n	80023c4 <__aeabi_dmul+0xe0>
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	421c      	tst	r4, r3
 8002708:	d009      	beq.n	800271e <__aeabi_dmul+0x43a>
 800270a:	421e      	tst	r6, r3
 800270c:	d107      	bne.n	800271e <__aeabi_dmul+0x43a>
 800270e:	4333      	orrs	r3, r6
 8002710:	031c      	lsls	r4, r3, #12
 8002712:	4643      	mov	r3, r8
 8002714:	0015      	movs	r5, r2
 8002716:	0b24      	lsrs	r4, r4, #12
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <__aeabi_dmul+0x4cc>)
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	e652      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	4314      	orrs	r4, r2
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <__aeabi_dmul+0x4cc>)
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	9701      	str	r7, [sp, #4]
 800272c:	e64a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 800272e:	f000 fd51 	bl	80031d4 <__clzsi2>
 8002732:	0003      	movs	r3, r0
 8002734:	001a      	movs	r2, r3
 8002736:	3215      	adds	r2, #21
 8002738:	3020      	adds	r0, #32
 800273a:	2a1c      	cmp	r2, #28
 800273c:	dc00      	bgt.n	8002740 <__aeabi_dmul+0x45c>
 800273e:	e684      	b.n	800244a <__aeabi_dmul+0x166>
 8002740:	4656      	mov	r6, sl
 8002742:	3b08      	subs	r3, #8
 8002744:	2200      	movs	r2, #0
 8002746:	409e      	lsls	r6, r3
 8002748:	e689      	b.n	800245e <__aeabi_dmul+0x17a>
 800274a:	f000 fd43 	bl	80031d4 <__clzsi2>
 800274e:	0001      	movs	r1, r0
 8002750:	0002      	movs	r2, r0
 8002752:	3115      	adds	r1, #21
 8002754:	3220      	adds	r2, #32
 8002756:	291c      	cmp	r1, #28
 8002758:	dc00      	bgt.n	800275c <__aeabi_dmul+0x478>
 800275a:	e64e      	b.n	80023fa <__aeabi_dmul+0x116>
 800275c:	0034      	movs	r4, r6
 800275e:	3808      	subs	r0, #8
 8002760:	2500      	movs	r5, #0
 8002762:	4084      	lsls	r4, r0
 8002764:	e653      	b.n	800240e <__aeabi_dmul+0x12a>
 8002766:	9b00      	ldr	r3, [sp, #0]
 8002768:	469c      	mov	ip, r3
 800276a:	e741      	b.n	80025f0 <__aeabi_dmul+0x30c>
 800276c:	4912      	ldr	r1, [pc, #72]	; (80027b8 <__aeabi_dmul+0x4d4>)
 800276e:	0022      	movs	r2, r4
 8002770:	4461      	add	r1, ip
 8002772:	002e      	movs	r6, r5
 8002774:	408d      	lsls	r5, r1
 8002776:	408a      	lsls	r2, r1
 8002778:	40c6      	lsrs	r6, r0
 800277a:	1e69      	subs	r1, r5, #1
 800277c:	418d      	sbcs	r5, r1
 800277e:	4332      	orrs	r2, r6
 8002780:	432a      	orrs	r2, r5
 8002782:	40c4      	lsrs	r4, r0
 8002784:	0753      	lsls	r3, r2, #29
 8002786:	d0b6      	beq.n	80026f6 <__aeabi_dmul+0x412>
 8002788:	210f      	movs	r1, #15
 800278a:	4011      	ands	r1, r2
 800278c:	2904      	cmp	r1, #4
 800278e:	d1ac      	bne.n	80026ea <__aeabi_dmul+0x406>
 8002790:	e7b1      	b.n	80026f6 <__aeabi_dmul+0x412>
 8002792:	0765      	lsls	r5, r4, #29
 8002794:	0264      	lsls	r4, r4, #9
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	4315      	orrs	r5, r2
 800279c:	2200      	movs	r2, #0
 800279e:	e611      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	4314      	orrs	r4, r2
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4a01      	ldr	r2, [pc, #4]	; (80027b0 <__aeabi_dmul+0x4cc>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e60a      	b.n	80023c4 <__aeabi_dmul+0xe0>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007ff 	.word	0x000007ff
 80027b4:	0000043e 	.word	0x0000043e
 80027b8:	0000041e 	.word	0x0000041e

080027bc <__aeabi_dsub>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4657      	mov	r7, sl
 80027c0:	464e      	mov	r6, r9
 80027c2:	4645      	mov	r5, r8
 80027c4:	46de      	mov	lr, fp
 80027c6:	0004      	movs	r4, r0
 80027c8:	b5e0      	push	{r5, r6, r7, lr}
 80027ca:	001f      	movs	r7, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	030b      	lsls	r3, r1, #12
 80027d0:	0f62      	lsrs	r2, r4, #29
 80027d2:	004e      	lsls	r6, r1, #1
 80027d4:	0fcd      	lsrs	r5, r1, #31
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	0339      	lsls	r1, r7, #12
 80027da:	4313      	orrs	r3, r2
 80027dc:	0a49      	lsrs	r1, r1, #9
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	0f44      	lsrs	r4, r0, #29
 80027e2:	4321      	orrs	r1, r4
 80027e4:	4cc2      	ldr	r4, [pc, #776]	; (8002af0 <__aeabi_dsub+0x334>)
 80027e6:	4691      	mov	r9, r2
 80027e8:	4692      	mov	sl, r2
 80027ea:	00c0      	lsls	r0, r0, #3
 80027ec:	007a      	lsls	r2, r7, #1
 80027ee:	4680      	mov	r8, r0
 80027f0:	0d76      	lsrs	r6, r6, #21
 80027f2:	0d52      	lsrs	r2, r2, #21
 80027f4:	0fff      	lsrs	r7, r7, #31
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x40>
 80027fa:	e0b4      	b.n	8002966 <__aeabi_dsub+0x1aa>
 80027fc:	2401      	movs	r4, #1
 80027fe:	4067      	eors	r7, r4
 8002800:	46bb      	mov	fp, r7
 8002802:	42bd      	cmp	r5, r7
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x4c>
 8002806:	e088      	b.n	800291a <__aeabi_dsub+0x15e>
 8002808:	1ab4      	subs	r4, r6, r2
 800280a:	46a4      	mov	ip, r4
 800280c:	2c00      	cmp	r4, #0
 800280e:	dc00      	bgt.n	8002812 <__aeabi_dsub+0x56>
 8002810:	e0b2      	b.n	8002978 <__aeabi_dsub+0x1bc>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x5c>
 8002816:	e0c5      	b.n	80029a4 <__aeabi_dsub+0x1e8>
 8002818:	4ab5      	ldr	r2, [pc, #724]	; (8002af0 <__aeabi_dsub+0x334>)
 800281a:	4296      	cmp	r6, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x64>
 800281e:	e28b      	b.n	8002d38 <__aeabi_dsub+0x57c>
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	0412      	lsls	r2, r2, #16
 8002824:	4311      	orrs	r1, r2
 8002826:	4662      	mov	r2, ip
 8002828:	2a38      	cmp	r2, #56	; 0x38
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0x72>
 800282c:	e1a1      	b.n	8002b72 <__aeabi_dsub+0x3b6>
 800282e:	2a1f      	cmp	r2, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x78>
 8002832:	e216      	b.n	8002c62 <__aeabi_dsub+0x4a6>
 8002834:	2720      	movs	r7, #32
 8002836:	000c      	movs	r4, r1
 8002838:	1abf      	subs	r7, r7, r2
 800283a:	40bc      	lsls	r4, r7
 800283c:	0002      	movs	r2, r0
 800283e:	46a0      	mov	r8, r4
 8002840:	4664      	mov	r4, ip
 8002842:	40b8      	lsls	r0, r7
 8002844:	40e2      	lsrs	r2, r4
 8002846:	4644      	mov	r4, r8
 8002848:	4314      	orrs	r4, r2
 800284a:	0002      	movs	r2, r0
 800284c:	1e50      	subs	r0, r2, #1
 800284e:	4182      	sbcs	r2, r0
 8002850:	4660      	mov	r0, ip
 8002852:	40c1      	lsrs	r1, r0
 8002854:	4322      	orrs	r2, r4
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	4649      	mov	r1, r9
 800285a:	1a8c      	subs	r4, r1, r2
 800285c:	45a1      	cmp	r9, r4
 800285e:	4192      	sbcs	r2, r2
 8002860:	4252      	negs	r2, r2
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	4698      	mov	r8, r3
 8002866:	4643      	mov	r3, r8
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	d400      	bmi.n	800286e <__aeabi_dsub+0xb2>
 800286c:	e117      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 800286e:	4643      	mov	r3, r8
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	4698      	mov	r8, r3
 8002876:	4643      	mov	r3, r8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0xc2>
 800287c:	e16c      	b.n	8002b58 <__aeabi_dsub+0x39c>
 800287e:	4640      	mov	r0, r8
 8002880:	f000 fca8 	bl	80031d4 <__clzsi2>
 8002884:	0002      	movs	r2, r0
 8002886:	3a08      	subs	r2, #8
 8002888:	2120      	movs	r1, #32
 800288a:	0020      	movs	r0, r4
 800288c:	4643      	mov	r3, r8
 800288e:	1a89      	subs	r1, r1, r2
 8002890:	4093      	lsls	r3, r2
 8002892:	40c8      	lsrs	r0, r1
 8002894:	4094      	lsls	r4, r2
 8002896:	4303      	orrs	r3, r0
 8002898:	4296      	cmp	r6, r2
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0xe2>
 800289c:	e157      	b.n	8002b4e <__aeabi_dsub+0x392>
 800289e:	1b96      	subs	r6, r2, r6
 80028a0:	1c71      	adds	r1, r6, #1
 80028a2:	291f      	cmp	r1, #31
 80028a4:	dd00      	ble.n	80028a8 <__aeabi_dsub+0xec>
 80028a6:	e1cb      	b.n	8002c40 <__aeabi_dsub+0x484>
 80028a8:	2220      	movs	r2, #32
 80028aa:	0018      	movs	r0, r3
 80028ac:	0026      	movs	r6, r4
 80028ae:	1a52      	subs	r2, r2, r1
 80028b0:	4094      	lsls	r4, r2
 80028b2:	4090      	lsls	r0, r2
 80028b4:	40ce      	lsrs	r6, r1
 80028b6:	40cb      	lsrs	r3, r1
 80028b8:	1e62      	subs	r2, r4, #1
 80028ba:	4194      	sbcs	r4, r2
 80028bc:	4330      	orrs	r0, r6
 80028be:	4698      	mov	r8, r3
 80028c0:	2600      	movs	r6, #0
 80028c2:	4304      	orrs	r4, r0
 80028c4:	0763      	lsls	r3, r4, #29
 80028c6:	d009      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028c8:	230f      	movs	r3, #15
 80028ca:	4023      	ands	r3, r4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <__aeabi_dsub+0x120>
 80028d0:	1d23      	adds	r3, r4, #4
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	41a4      	sbcs	r4, r4
 80028d6:	4264      	negs	r4, r4
 80028d8:	44a0      	add	r8, r4
 80028da:	001c      	movs	r4, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	d400      	bmi.n	80028e4 <__aeabi_dsub+0x128>
 80028e2:	e0df      	b.n	8002aa4 <__aeabi_dsub+0x2e8>
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <__aeabi_dsub+0x334>)
 80028e6:	3601      	adds	r6, #1
 80028e8:	429e      	cmp	r6, r3
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x132>
 80028ec:	e0fb      	b.n	8002ae6 <__aeabi_dsub+0x32a>
 80028ee:	4642      	mov	r2, r8
 80028f0:	4b80      	ldr	r3, [pc, #512]	; (8002af4 <__aeabi_dsub+0x338>)
 80028f2:	08e4      	lsrs	r4, r4, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	0571      	lsls	r1, r6, #21
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4322      	orrs	r2, r4
 8002900:	0b1b      	lsrs	r3, r3, #12
 8002902:	0d49      	lsrs	r1, r1, #21
 8002904:	0509      	lsls	r1, r1, #20
 8002906:	07ed      	lsls	r5, r5, #31
 8002908:	4319      	orrs	r1, r3
 800290a:	4329      	orrs	r1, r5
 800290c:	0010      	movs	r0, r2
 800290e:	bcf0      	pop	{r4, r5, r6, r7}
 8002910:	46bb      	mov	fp, r7
 8002912:	46b2      	mov	sl, r6
 8002914:	46a9      	mov	r9, r5
 8002916:	46a0      	mov	r8, r4
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	1ab4      	subs	r4, r6, r2
 800291c:	46a4      	mov	ip, r4
 800291e:	2c00      	cmp	r4, #0
 8002920:	dd58      	ble.n	80029d4 <__aeabi_dsub+0x218>
 8002922:	2a00      	cmp	r2, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x16c>
 8002926:	e09e      	b.n	8002a66 <__aeabi_dsub+0x2aa>
 8002928:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <__aeabi_dsub+0x334>)
 800292a:	4296      	cmp	r6, r2
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x174>
 800292e:	e13b      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0412      	lsls	r2, r2, #16
 8002934:	4311      	orrs	r1, r2
 8002936:	4662      	mov	r2, ip
 8002938:	2a38      	cmp	r2, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x182>
 800293c:	e0c1      	b.n	8002ac2 <__aeabi_dsub+0x306>
 800293e:	2a1f      	cmp	r2, #31
 8002940:	dc00      	bgt.n	8002944 <__aeabi_dsub+0x188>
 8002942:	e1bb      	b.n	8002cbc <__aeabi_dsub+0x500>
 8002944:	000c      	movs	r4, r1
 8002946:	3a20      	subs	r2, #32
 8002948:	40d4      	lsrs	r4, r2
 800294a:	0022      	movs	r2, r4
 800294c:	4664      	mov	r4, ip
 800294e:	2c20      	cmp	r4, #32
 8002950:	d004      	beq.n	800295c <__aeabi_dsub+0x1a0>
 8002952:	2740      	movs	r7, #64	; 0x40
 8002954:	1b3f      	subs	r7, r7, r4
 8002956:	40b9      	lsls	r1, r7
 8002958:	4308      	orrs	r0, r1
 800295a:	4680      	mov	r8, r0
 800295c:	4644      	mov	r4, r8
 800295e:	1e61      	subs	r1, r4, #1
 8002960:	418c      	sbcs	r4, r1
 8002962:	4314      	orrs	r4, r2
 8002964:	e0b1      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002966:	000c      	movs	r4, r1
 8002968:	4304      	orrs	r4, r0
 800296a:	d02a      	beq.n	80029c2 <__aeabi_dsub+0x206>
 800296c:	46bb      	mov	fp, r7
 800296e:	42bd      	cmp	r5, r7
 8002970:	d02d      	beq.n	80029ce <__aeabi_dsub+0x212>
 8002972:	4c61      	ldr	r4, [pc, #388]	; (8002af8 <__aeabi_dsub+0x33c>)
 8002974:	46a4      	mov	ip, r4
 8002976:	44b4      	add	ip, r6
 8002978:	4664      	mov	r4, ip
 800297a:	2c00      	cmp	r4, #0
 800297c:	d05c      	beq.n	8002a38 <__aeabi_dsub+0x27c>
 800297e:	1b94      	subs	r4, r2, r6
 8002980:	46a4      	mov	ip, r4
 8002982:	2e00      	cmp	r6, #0
 8002984:	d000      	beq.n	8002988 <__aeabi_dsub+0x1cc>
 8002986:	e115      	b.n	8002bb4 <__aeabi_dsub+0x3f8>
 8002988:	464d      	mov	r5, r9
 800298a:	431d      	orrs	r5, r3
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x1d4>
 800298e:	e1c3      	b.n	8002d18 <__aeabi_dsub+0x55c>
 8002990:	1e65      	subs	r5, r4, #1
 8002992:	2c01      	cmp	r4, #1
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1dc>
 8002996:	e20c      	b.n	8002db2 <__aeabi_dsub+0x5f6>
 8002998:	4e55      	ldr	r6, [pc, #340]	; (8002af0 <__aeabi_dsub+0x334>)
 800299a:	42b4      	cmp	r4, r6
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1e4>
 800299e:	e1f8      	b.n	8002d92 <__aeabi_dsub+0x5d6>
 80029a0:	46ac      	mov	ip, r5
 80029a2:	e10e      	b.n	8002bc2 <__aeabi_dsub+0x406>
 80029a4:	000a      	movs	r2, r1
 80029a6:	4302      	orrs	r2, r0
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x1f0>
 80029aa:	e136      	b.n	8002c1a <__aeabi_dsub+0x45e>
 80029ac:	0022      	movs	r2, r4
 80029ae:	3a01      	subs	r2, #1
 80029b0:	2c01      	cmp	r4, #1
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x1fa>
 80029b4:	e1c6      	b.n	8002d44 <__aeabi_dsub+0x588>
 80029b6:	4c4e      	ldr	r4, [pc, #312]	; (8002af0 <__aeabi_dsub+0x334>)
 80029b8:	45a4      	cmp	ip, r4
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x202>
 80029bc:	e0f4      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 80029be:	4694      	mov	ip, r2
 80029c0:	e731      	b.n	8002826 <__aeabi_dsub+0x6a>
 80029c2:	2401      	movs	r4, #1
 80029c4:	4067      	eors	r7, r4
 80029c6:	46bb      	mov	fp, r7
 80029c8:	42bd      	cmp	r5, r7
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x212>
 80029cc:	e71c      	b.n	8002808 <__aeabi_dsub+0x4c>
 80029ce:	4c4a      	ldr	r4, [pc, #296]	; (8002af8 <__aeabi_dsub+0x33c>)
 80029d0:	46a4      	mov	ip, r4
 80029d2:	44b4      	add	ip, r6
 80029d4:	4664      	mov	r4, ip
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x220>
 80029da:	e0cf      	b.n	8002b7c <__aeabi_dsub+0x3c0>
 80029dc:	1b94      	subs	r4, r2, r6
 80029de:	46a4      	mov	ip, r4
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x22a>
 80029e4:	e15c      	b.n	8002ca0 <__aeabi_dsub+0x4e4>
 80029e6:	4e42      	ldr	r6, [pc, #264]	; (8002af0 <__aeabi_dsub+0x334>)
 80029e8:	42b2      	cmp	r2, r6
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x232>
 80029ec:	e1ec      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 80029ee:	2680      	movs	r6, #128	; 0x80
 80029f0:	0436      	lsls	r6, r6, #16
 80029f2:	4333      	orrs	r3, r6
 80029f4:	4664      	mov	r4, ip
 80029f6:	2c38      	cmp	r4, #56	; 0x38
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x240>
 80029fa:	e1b3      	b.n	8002d64 <__aeabi_dsub+0x5a8>
 80029fc:	2c1f      	cmp	r4, #31
 80029fe:	dd00      	ble.n	8002a02 <__aeabi_dsub+0x246>
 8002a00:	e238      	b.n	8002e74 <__aeabi_dsub+0x6b8>
 8002a02:	2620      	movs	r6, #32
 8002a04:	1b36      	subs	r6, r6, r4
 8002a06:	001c      	movs	r4, r3
 8002a08:	40b4      	lsls	r4, r6
 8002a0a:	464f      	mov	r7, r9
 8002a0c:	46a0      	mov	r8, r4
 8002a0e:	4664      	mov	r4, ip
 8002a10:	40e7      	lsrs	r7, r4
 8002a12:	4644      	mov	r4, r8
 8002a14:	433c      	orrs	r4, r7
 8002a16:	464f      	mov	r7, r9
 8002a18:	40b7      	lsls	r7, r6
 8002a1a:	003e      	movs	r6, r7
 8002a1c:	1e77      	subs	r7, r6, #1
 8002a1e:	41be      	sbcs	r6, r7
 8002a20:	4334      	orrs	r4, r6
 8002a22:	4666      	mov	r6, ip
 8002a24:	40f3      	lsrs	r3, r6
 8002a26:	18c9      	adds	r1, r1, r3
 8002a28:	1824      	adds	r4, r4, r0
 8002a2a:	4284      	cmp	r4, r0
 8002a2c:	419b      	sbcs	r3, r3
 8002a2e:	425b      	negs	r3, r3
 8002a30:	4698      	mov	r8, r3
 8002a32:	0016      	movs	r6, r2
 8002a34:	4488      	add	r8, r1
 8002a36:	e04e      	b.n	8002ad6 <__aeabi_dsub+0x31a>
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <__aeabi_dsub+0x340>)
 8002a3a:	1c74      	adds	r4, r6, #1
 8002a3c:	4214      	tst	r4, r2
 8002a3e:	d000      	beq.n	8002a42 <__aeabi_dsub+0x286>
 8002a40:	e0d6      	b.n	8002bf0 <__aeabi_dsub+0x434>
 8002a42:	464a      	mov	r2, r9
 8002a44:	431a      	orrs	r2, r3
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d000      	beq.n	8002a4c <__aeabi_dsub+0x290>
 8002a4a:	e15b      	b.n	8002d04 <__aeabi_dsub+0x548>
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d100      	bne.n	8002a52 <__aeabi_dsub+0x296>
 8002a50:	e1a5      	b.n	8002d9e <__aeabi_dsub+0x5e2>
 8002a52:	000a      	movs	r2, r1
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d000      	beq.n	8002a5a <__aeabi_dsub+0x29e>
 8002a58:	e1bb      	b.n	8002dd2 <__aeabi_dsub+0x616>
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	0759      	lsls	r1, r3, #29
 8002a5e:	08d2      	lsrs	r2, r2, #3
 8002a60:	430a      	orrs	r2, r1
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	e027      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002a66:	000a      	movs	r2, r1
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x2b2>
 8002a6c:	e174      	b.n	8002d58 <__aeabi_dsub+0x59c>
 8002a6e:	0022      	movs	r2, r4
 8002a70:	3a01      	subs	r2, #1
 8002a72:	2c01      	cmp	r4, #1
 8002a74:	d005      	beq.n	8002a82 <__aeabi_dsub+0x2c6>
 8002a76:	4c1e      	ldr	r4, [pc, #120]	; (8002af0 <__aeabi_dsub+0x334>)
 8002a78:	45a4      	cmp	ip, r4
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x2c2>
 8002a7c:	e094      	b.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002a7e:	4694      	mov	ip, r2
 8002a80:	e759      	b.n	8002936 <__aeabi_dsub+0x17a>
 8002a82:	4448      	add	r0, r9
 8002a84:	4548      	cmp	r0, r9
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	4252      	negs	r2, r2
 8002a90:	4490      	add	r8, r2
 8002a92:	4643      	mov	r3, r8
 8002a94:	2602      	movs	r6, #2
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	d500      	bpl.n	8002a9c <__aeabi_dsub+0x2e0>
 8002a9a:	e0c4      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002a9c:	3e01      	subs	r6, #1
 8002a9e:	0763      	lsls	r3, r4, #29
 8002aa0:	d000      	beq.n	8002aa4 <__aeabi_dsub+0x2e8>
 8002aa2:	e711      	b.n	80028c8 <__aeabi_dsub+0x10c>
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	46b4      	mov	ip, r6
 8002aa8:	0759      	lsls	r1, r3, #29
 8002aaa:	08e2      	lsrs	r2, r4, #3
 8002aac:	430a      	orrs	r2, r1
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ab2:	458c      	cmp	ip, r1
 8002ab4:	d040      	beq.n	8002b38 <__aeabi_dsub+0x37c>
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	0b1b      	lsrs	r3, r3, #12
 8002abe:	0d49      	lsrs	r1, r1, #21
 8002ac0:	e720      	b.n	8002904 <__aeabi_dsub+0x148>
 8002ac2:	4301      	orrs	r1, r0
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	1e61      	subs	r1, r4, #1
 8002ac8:	418c      	sbcs	r4, r1
 8002aca:	444c      	add	r4, r9
 8002acc:	454c      	cmp	r4, r9
 8002ace:	4192      	sbcs	r2, r2
 8002ad0:	4252      	negs	r2, r2
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4498      	add	r8, r3
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	d5e0      	bpl.n	8002a9e <__aeabi_dsub+0x2e2>
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__aeabi_dsub+0x334>)
 8002ade:	3601      	adds	r6, #1
 8002ae0:	429e      	cmp	r6, r3
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x32a>
 8002ae4:	e09f      	b.n	8002c26 <__aeabi_dsub+0x46a>
 8002ae6:	0031      	movs	r1, r6
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2200      	movs	r2, #0
 8002aec:	e70a      	b.n	8002904 <__aeabi_dsub+0x148>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x34a>
 8002b04:	e160      	b.n	8002dc8 <__aeabi_dsub+0x60c>
 8002b06:	000a      	movs	r2, r1
 8002b08:	4302      	orrs	r2, r0
 8002b0a:	d04d      	beq.n	8002ba8 <__aeabi_dsub+0x3ec>
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	075c      	lsls	r4, r3, #29
 8002b10:	08d2      	lsrs	r2, r2, #3
 8002b12:	4322      	orrs	r2, r4
 8002b14:	2480      	movs	r4, #128	; 0x80
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	0324      	lsls	r4, r4, #12
 8002b1a:	4223      	tst	r3, r4
 8002b1c:	d007      	beq.n	8002b2e <__aeabi_dsub+0x372>
 8002b1e:	08ce      	lsrs	r6, r1, #3
 8002b20:	4226      	tst	r6, r4
 8002b22:	d104      	bne.n	8002b2e <__aeabi_dsub+0x372>
 8002b24:	465d      	mov	r5, fp
 8002b26:	0033      	movs	r3, r6
 8002b28:	08c2      	lsrs	r2, r0, #3
 8002b2a:	0749      	lsls	r1, r1, #29
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	0f51      	lsrs	r1, r2, #29
 8002b30:	00d2      	lsls	r2, r2, #3
 8002b32:	08d2      	lsrs	r2, r2, #3
 8002b34:	0749      	lsls	r1, r1, #29
 8002b36:	430a      	orrs	r2, r1
 8002b38:	0011      	movs	r1, r2
 8002b3a:	4319      	orrs	r1, r3
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x384>
 8002b3e:	e1c8      	b.n	8002ed2 <__aeabi_dsub+0x716>
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0309      	lsls	r1, r1, #12
 8002b44:	430b      	orrs	r3, r1
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	49d5      	ldr	r1, [pc, #852]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002b4a:	0b1b      	lsrs	r3, r3, #12
 8002b4c:	e6da      	b.n	8002904 <__aeabi_dsub+0x148>
 8002b4e:	49d5      	ldr	r1, [pc, #852]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002b50:	1ab6      	subs	r6, r6, r2
 8002b52:	400b      	ands	r3, r1
 8002b54:	4698      	mov	r8, r3
 8002b56:	e6b5      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 fb3b 	bl	80031d4 <__clzsi2>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	3218      	adds	r2, #24
 8002b62:	2a1f      	cmp	r2, #31
 8002b64:	dc00      	bgt.n	8002b68 <__aeabi_dsub+0x3ac>
 8002b66:	e68f      	b.n	8002888 <__aeabi_dsub+0xcc>
 8002b68:	0023      	movs	r3, r4
 8002b6a:	3808      	subs	r0, #8
 8002b6c:	4083      	lsls	r3, r0
 8002b6e:	2400      	movs	r4, #0
 8002b70:	e692      	b.n	8002898 <__aeabi_dsub+0xdc>
 8002b72:	4308      	orrs	r0, r1
 8002b74:	0002      	movs	r2, r0
 8002b76:	1e50      	subs	r0, r2, #1
 8002b78:	4182      	sbcs	r2, r0
 8002b7a:	e66d      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002b7c:	4cca      	ldr	r4, [pc, #808]	; (8002ea8 <__aeabi_dsub+0x6ec>)
 8002b7e:	1c72      	adds	r2, r6, #1
 8002b80:	4222      	tst	r2, r4
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x3ca>
 8002b84:	e0ad      	b.n	8002ce2 <__aeabi_dsub+0x526>
 8002b86:	464a      	mov	r2, r9
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d1b8      	bne.n	8002b00 <__aeabi_dsub+0x344>
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x3d8>
 8002b92:	e158      	b.n	8002e46 <__aeabi_dsub+0x68a>
 8002b94:	000a      	movs	r2, r1
 8002b96:	4302      	orrs	r2, r0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x3e0>
 8002b9a:	e159      	b.n	8002e50 <__aeabi_dsub+0x694>
 8002b9c:	464a      	mov	r2, r9
 8002b9e:	0759      	lsls	r1, r3, #29
 8002ba0:	08d2      	lsrs	r2, r2, #3
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	e786      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002ba8:	464a      	mov	r2, r9
 8002baa:	0759      	lsls	r1, r3, #29
 8002bac:	08d2      	lsrs	r2, r2, #3
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	e7c1      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002bb4:	4dba      	ldr	r5, [pc, #744]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002bb6:	42aa      	cmp	r2, r5
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x400>
 8002bba:	e11e      	b.n	8002dfa <__aeabi_dsub+0x63e>
 8002bbc:	2580      	movs	r5, #128	; 0x80
 8002bbe:	042d      	lsls	r5, r5, #16
 8002bc0:	432b      	orrs	r3, r5
 8002bc2:	4664      	mov	r4, ip
 8002bc4:	2c38      	cmp	r4, #56	; 0x38
 8002bc6:	dc5d      	bgt.n	8002c84 <__aeabi_dsub+0x4c8>
 8002bc8:	2c1f      	cmp	r4, #31
 8002bca:	dd00      	ble.n	8002bce <__aeabi_dsub+0x412>
 8002bcc:	e0d0      	b.n	8002d70 <__aeabi_dsub+0x5b4>
 8002bce:	2520      	movs	r5, #32
 8002bd0:	4667      	mov	r7, ip
 8002bd2:	1b2d      	subs	r5, r5, r4
 8002bd4:	464e      	mov	r6, r9
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	40fe      	lsrs	r6, r7
 8002bda:	40ac      	lsls	r4, r5
 8002bdc:	4334      	orrs	r4, r6
 8002bde:	464e      	mov	r6, r9
 8002be0:	40ae      	lsls	r6, r5
 8002be2:	0035      	movs	r5, r6
 8002be4:	40fb      	lsrs	r3, r7
 8002be6:	1e6e      	subs	r6, r5, #1
 8002be8:	41b5      	sbcs	r5, r6
 8002bea:	1ac9      	subs	r1, r1, r3
 8002bec:	432c      	orrs	r4, r5
 8002bee:	e04e      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	1a14      	subs	r4, r2, r0
 8002bf4:	45a1      	cmp	r9, r4
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	4252      	negs	r2, r2
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	1a5f      	subs	r7, r3, r1
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4647      	mov	r7, r8
 8002c02:	1bd2      	subs	r2, r2, r7
 8002c04:	4690      	mov	r8, r2
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	d500      	bpl.n	8002c0c <__aeabi_dsub+0x450>
 8002c0a:	e08b      	b.n	8002d24 <__aeabi_dsub+0x568>
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	d000      	beq.n	8002c14 <__aeabi_dsub+0x458>
 8002c12:	e630      	b.n	8002876 <__aeabi_dsub+0xba>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2500      	movs	r5, #0
 8002c18:	e74d      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	0759      	lsls	r1, r3, #29
 8002c1e:	08d2      	lsrs	r2, r2, #3
 8002c20:	430a      	orrs	r2, r1
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	e744      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002c26:	4642      	mov	r2, r8
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002c2a:	0861      	lsrs	r1, r4, #1
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	0013      	movs	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	4014      	ands	r4, r2
 8002c34:	430c      	orrs	r4, r1
 8002c36:	07da      	lsls	r2, r3, #31
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	4314      	orrs	r4, r2
 8002c3e:	e641      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002c40:	001a      	movs	r2, r3
 8002c42:	3e1f      	subs	r6, #31
 8002c44:	40f2      	lsrs	r2, r6
 8002c46:	0016      	movs	r6, r2
 8002c48:	2920      	cmp	r1, #32
 8002c4a:	d003      	beq.n	8002c54 <__aeabi_dsub+0x498>
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	1a51      	subs	r1, r2, r1
 8002c50:	408b      	lsls	r3, r1
 8002c52:	431c      	orrs	r4, r3
 8002c54:	1e62      	subs	r2, r4, #1
 8002c56:	4194      	sbcs	r4, r2
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4334      	orrs	r4, r6
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	2600      	movs	r6, #0
 8002c60:	e71d      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002c62:	000c      	movs	r4, r1
 8002c64:	3a20      	subs	r2, #32
 8002c66:	40d4      	lsrs	r4, r2
 8002c68:	0022      	movs	r2, r4
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2c20      	cmp	r4, #32
 8002c6e:	d004      	beq.n	8002c7a <__aeabi_dsub+0x4be>
 8002c70:	2740      	movs	r7, #64	; 0x40
 8002c72:	1b3f      	subs	r7, r7, r4
 8002c74:	40b9      	lsls	r1, r7
 8002c76:	4308      	orrs	r0, r1
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4644      	mov	r4, r8
 8002c7c:	1e61      	subs	r1, r4, #1
 8002c7e:	418c      	sbcs	r4, r1
 8002c80:	4322      	orrs	r2, r4
 8002c82:	e5e9      	b.n	8002858 <__aeabi_dsub+0x9c>
 8002c84:	464c      	mov	r4, r9
 8002c86:	4323      	orrs	r3, r4
 8002c88:	001c      	movs	r4, r3
 8002c8a:	1e63      	subs	r3, r4, #1
 8002c8c:	419c      	sbcs	r4, r3
 8002c8e:	1b04      	subs	r4, r0, r4
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	419b      	sbcs	r3, r3
 8002c94:	425b      	negs	r3, r3
 8002c96:	1acb      	subs	r3, r1, r3
 8002c98:	4698      	mov	r8, r3
 8002c9a:	465d      	mov	r5, fp
 8002c9c:	0016      	movs	r6, r2
 8002c9e:	e5e2      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002ca0:	464e      	mov	r6, r9
 8002ca2:	431e      	orrs	r6, r3
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x4ec>
 8002ca6:	e0ae      	b.n	8002e06 <__aeabi_dsub+0x64a>
 8002ca8:	1e66      	subs	r6, r4, #1
 8002caa:	2c01      	cmp	r4, #1
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4f4>
 8002cae:	e0fd      	b.n	8002eac <__aeabi_dsub+0x6f0>
 8002cb0:	4f7b      	ldr	r7, [pc, #492]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002cb2:	42bc      	cmp	r4, r7
 8002cb4:	d100      	bne.n	8002cb8 <__aeabi_dsub+0x4fc>
 8002cb6:	e107      	b.n	8002ec8 <__aeabi_dsub+0x70c>
 8002cb8:	46b4      	mov	ip, r6
 8002cba:	e69b      	b.n	80029f4 <__aeabi_dsub+0x238>
 8002cbc:	4664      	mov	r4, ip
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	1b12      	subs	r2, r2, r4
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	4094      	lsls	r4, r2
 8002cc6:	0007      	movs	r7, r0
 8002cc8:	4090      	lsls	r0, r2
 8002cca:	46a0      	mov	r8, r4
 8002ccc:	4664      	mov	r4, ip
 8002cce:	1e42      	subs	r2, r0, #1
 8002cd0:	4190      	sbcs	r0, r2
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	40e7      	lsrs	r7, r4
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	40d1      	lsrs	r1, r2
 8002cda:	433c      	orrs	r4, r7
 8002cdc:	4304      	orrs	r4, r0
 8002cde:	185b      	adds	r3, r3, r1
 8002ce0:	e6f3      	b.n	8002aca <__aeabi_dsub+0x30e>
 8002ce2:	4c6f      	ldr	r4, [pc, #444]	; (8002ea0 <__aeabi_dsub+0x6e4>)
 8002ce4:	42a2      	cmp	r2, r4
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x52e>
 8002ce8:	e0d5      	b.n	8002e96 <__aeabi_dsub+0x6da>
 8002cea:	4448      	add	r0, r9
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	4548      	cmp	r0, r9
 8002cf0:	4189      	sbcs	r1, r1
 8002cf2:	4249      	negs	r1, r1
 8002cf4:	185b      	adds	r3, r3, r1
 8002cf6:	07dc      	lsls	r4, r3, #31
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	0016      	movs	r6, r2
 8002d00:	4304      	orrs	r4, r0
 8002d02:	e6cc      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x54e>
 8002d08:	e082      	b.n	8002e10 <__aeabi_dsub+0x654>
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	d140      	bne.n	8002d92 <__aeabi_dsub+0x5d6>
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	e713      	b.n	8002b40 <__aeabi_dsub+0x384>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08c2      	lsrs	r2, r0, #3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	465d      	mov	r5, fp
 8002d20:	08cb      	lsrs	r3, r1, #3
 8002d22:	e6c5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d24:	464a      	mov	r2, r9
 8002d26:	1a84      	subs	r4, r0, r2
 8002d28:	42a0      	cmp	r0, r4
 8002d2a:	4192      	sbcs	r2, r2
 8002d2c:	1acb      	subs	r3, r1, r3
 8002d2e:	4252      	negs	r2, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	4698      	mov	r8, r3
 8002d34:	465d      	mov	r5, fp
 8002d36:	e59e      	b.n	8002876 <__aeabi_dsub+0xba>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	0759      	lsls	r1, r3, #29
 8002d3c:	08d2      	lsrs	r2, r2, #3
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	e6f9      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d44:	464a      	mov	r2, r9
 8002d46:	1a14      	subs	r4, r2, r0
 8002d48:	45a1      	cmp	r9, r4
 8002d4a:	4192      	sbcs	r2, r2
 8002d4c:	1a5b      	subs	r3, r3, r1
 8002d4e:	4252      	negs	r2, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	4698      	mov	r8, r3
 8002d54:	2601      	movs	r6, #1
 8002d56:	e586      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	0759      	lsls	r1, r3, #29
 8002d5c:	08d2      	lsrs	r2, r2, #3
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	e6a5      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002d64:	464c      	mov	r4, r9
 8002d66:	4323      	orrs	r3, r4
 8002d68:	001c      	movs	r4, r3
 8002d6a:	1e63      	subs	r3, r4, #1
 8002d6c:	419c      	sbcs	r4, r3
 8002d6e:	e65b      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002d70:	4665      	mov	r5, ip
 8002d72:	001e      	movs	r6, r3
 8002d74:	3d20      	subs	r5, #32
 8002d76:	40ee      	lsrs	r6, r5
 8002d78:	2c20      	cmp	r4, #32
 8002d7a:	d005      	beq.n	8002d88 <__aeabi_dsub+0x5cc>
 8002d7c:	2540      	movs	r5, #64	; 0x40
 8002d7e:	1b2d      	subs	r5, r5, r4
 8002d80:	40ab      	lsls	r3, r5
 8002d82:	464c      	mov	r4, r9
 8002d84:	431c      	orrs	r4, r3
 8002d86:	46a2      	mov	sl, r4
 8002d88:	4654      	mov	r4, sl
 8002d8a:	1e63      	subs	r3, r4, #1
 8002d8c:	419c      	sbcs	r4, r3
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	e77d      	b.n	8002c8e <__aeabi_dsub+0x4d2>
 8002d92:	074b      	lsls	r3, r1, #29
 8002d94:	08c2      	lsrs	r2, r0, #3
 8002d96:	431a      	orrs	r2, r3
 8002d98:	465d      	mov	r5, fp
 8002d9a:	08cb      	lsrs	r3, r1, #3
 8002d9c:	e6cc      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002d9e:	000a      	movs	r2, r1
 8002da0:	4302      	orrs	r2, r0
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x5ea>
 8002da4:	e736      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002da6:	074b      	lsls	r3, r1, #29
 8002da8:	08c2      	lsrs	r2, r0, #3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	465d      	mov	r5, fp
 8002dae:	08cb      	lsrs	r3, r1, #3
 8002db0:	e681      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002db2:	464a      	mov	r2, r9
 8002db4:	1a84      	subs	r4, r0, r2
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	4192      	sbcs	r2, r2
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	4252      	negs	r2, r2
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	465d      	mov	r5, fp
 8002dc4:	2601      	movs	r6, #1
 8002dc6:	e54e      	b.n	8002866 <__aeabi_dsub+0xaa>
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	08c2      	lsrs	r2, r0, #3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	08cb      	lsrs	r3, r1, #3
 8002dd0:	e6b2      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	1a14      	subs	r4, r2, r0
 8002dd6:	45a1      	cmp	r9, r4
 8002dd8:	4192      	sbcs	r2, r2
 8002dda:	1a5f      	subs	r7, r3, r1
 8002ddc:	4252      	negs	r2, r2
 8002dde:	1aba      	subs	r2, r7, r2
 8002de0:	4690      	mov	r8, r2
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	d56b      	bpl.n	8002ebe <__aeabi_dsub+0x702>
 8002de6:	464a      	mov	r2, r9
 8002de8:	1a84      	subs	r4, r0, r2
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	4192      	sbcs	r2, r2
 8002dee:	1acb      	subs	r3, r1, r3
 8002df0:	4252      	negs	r2, r2
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	4698      	mov	r8, r3
 8002df6:	465d      	mov	r5, fp
 8002df8:	e564      	b.n	80028c4 <__aeabi_dsub+0x108>
 8002dfa:	074b      	lsls	r3, r1, #29
 8002dfc:	08c2      	lsrs	r2, r0, #3
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	465d      	mov	r5, fp
 8002e02:	08cb      	lsrs	r3, r1, #3
 8002e04:	e698      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e06:	074b      	lsls	r3, r1, #29
 8002e08:	08c2      	lsrs	r2, r0, #3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	08cb      	lsrs	r3, r1, #3
 8002e0e:	e64f      	b.n	8002ab0 <__aeabi_dsub+0x2f4>
 8002e10:	000a      	movs	r2, r1
 8002e12:	4302      	orrs	r2, r0
 8002e14:	d090      	beq.n	8002d38 <__aeabi_dsub+0x57c>
 8002e16:	464a      	mov	r2, r9
 8002e18:	075c      	lsls	r4, r3, #29
 8002e1a:	08d2      	lsrs	r2, r2, #3
 8002e1c:	4314      	orrs	r4, r2
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	0312      	lsls	r2, r2, #12
 8002e24:	4213      	tst	r3, r2
 8002e26:	d008      	beq.n	8002e3a <__aeabi_dsub+0x67e>
 8002e28:	08ce      	lsrs	r6, r1, #3
 8002e2a:	4216      	tst	r6, r2
 8002e2c:	d105      	bne.n	8002e3a <__aeabi_dsub+0x67e>
 8002e2e:	08c0      	lsrs	r0, r0, #3
 8002e30:	0749      	lsls	r1, r1, #29
 8002e32:	4308      	orrs	r0, r1
 8002e34:	0004      	movs	r4, r0
 8002e36:	465d      	mov	r5, fp
 8002e38:	0033      	movs	r3, r6
 8002e3a:	0f61      	lsrs	r1, r4, #29
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	0749      	lsls	r1, r1, #29
 8002e40:	08d2      	lsrs	r2, r2, #3
 8002e42:	430a      	orrs	r2, r1
 8002e44:	e678      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002e46:	074b      	lsls	r3, r1, #29
 8002e48:	08c2      	lsrs	r2, r0, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	08cb      	lsrs	r3, r1, #3
 8002e4e:	e632      	b.n	8002ab6 <__aeabi_dsub+0x2fa>
 8002e50:	4448      	add	r0, r9
 8002e52:	185b      	adds	r3, r3, r1
 8002e54:	4548      	cmp	r0, r9
 8002e56:	4192      	sbcs	r2, r2
 8002e58:	4698      	mov	r8, r3
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	4490      	add	r8, r2
 8002e5e:	4643      	mov	r3, r8
 8002e60:	0004      	movs	r4, r0
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	d400      	bmi.n	8002e68 <__aeabi_dsub+0x6ac>
 8002e66:	e61a      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e68:	4642      	mov	r2, r8
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <__aeabi_dsub+0x6e8>)
 8002e6c:	2601      	movs	r6, #1
 8002e6e:	401a      	ands	r2, r3
 8002e70:	4690      	mov	r8, r2
 8002e72:	e614      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002e74:	4666      	mov	r6, ip
 8002e76:	001f      	movs	r7, r3
 8002e78:	3e20      	subs	r6, #32
 8002e7a:	40f7      	lsrs	r7, r6
 8002e7c:	2c20      	cmp	r4, #32
 8002e7e:	d005      	beq.n	8002e8c <__aeabi_dsub+0x6d0>
 8002e80:	2640      	movs	r6, #64	; 0x40
 8002e82:	1b36      	subs	r6, r6, r4
 8002e84:	40b3      	lsls	r3, r6
 8002e86:	464c      	mov	r4, r9
 8002e88:	431c      	orrs	r4, r3
 8002e8a:	46a2      	mov	sl, r4
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	1e63      	subs	r3, r4, #1
 8002e90:	419c      	sbcs	r4, r3
 8002e92:	433c      	orrs	r4, r7
 8002e94:	e5c8      	b.n	8002a28 <__aeabi_dsub+0x26c>
 8002e96:	0011      	movs	r1, r2
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	e532      	b.n	8002904 <__aeabi_dsub+0x148>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	000007fe 	.word	0x000007fe
 8002eac:	464a      	mov	r2, r9
 8002eae:	1814      	adds	r4, r2, r0
 8002eb0:	4284      	cmp	r4, r0
 8002eb2:	4192      	sbcs	r2, r2
 8002eb4:	185b      	adds	r3, r3, r1
 8002eb6:	4698      	mov	r8, r3
 8002eb8:	4252      	negs	r2, r2
 8002eba:	4490      	add	r8, r2
 8002ebc:	e5e9      	b.n	8002a92 <__aeabi_dsub+0x2d6>
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	4322      	orrs	r2, r4
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x70a>
 8002ec4:	e6a6      	b.n	8002c14 <__aeabi_dsub+0x458>
 8002ec6:	e5ea      	b.n	8002a9e <__aeabi_dsub+0x2e2>
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	08c2      	lsrs	r2, r0, #3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	08cb      	lsrs	r3, r1, #3
 8002ed0:	e632      	b.n	8002b38 <__aeabi_dsub+0x37c>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <__aeabi_dsub+0x720>)
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	e514      	b.n	8002904 <__aeabi_dsub+0x148>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__aeabi_dcmpun>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002ee6:	030c      	lsls	r4, r1, #12
 8002ee8:	0016      	movs	r6, r2
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	031a      	lsls	r2, r3, #12
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b12      	lsrs	r2, r2, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	4281      	cmp	r1, r0
 8002efa:	d008      	beq.n	8002f0e <__aeabi_dcmpun+0x2e>
 8002efc:	4906      	ldr	r1, [pc, #24]	; (8002f18 <__aeabi_dcmpun+0x38>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d103      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f04:	4332      	orrs	r2, r6
 8002f06:	0010      	movs	r0, r2
 8002f08:	1e42      	subs	r2, r0, #1
 8002f0a:	4190      	sbcs	r0, r2
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	432c      	orrs	r4, r5
 8002f12:	d1fb      	bne.n	8002f0c <__aeabi_dcmpun+0x2c>
 8002f14:	e7f2      	b.n	8002efc <__aeabi_dcmpun+0x1c>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	000007ff 	.word	0x000007ff

08002f1c <__aeabi_d2iz>:
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	b530      	push	{r4, r5, lr}
 8002f20:	4c13      	ldr	r4, [pc, #76]	; (8002f70 <__aeabi_d2iz+0x54>)
 8002f22:	0053      	lsls	r3, r2, #1
 8002f24:	0309      	lsls	r1, r1, #12
 8002f26:	0005      	movs	r5, r0
 8002f28:	0b09      	lsrs	r1, r1, #12
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	0fd2      	lsrs	r2, r2, #31
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	dd04      	ble.n	8002f3e <__aeabi_d2iz+0x22>
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x58>)
 8002f36:	4283      	cmp	r3, r0
 8002f38:	dd02      	ble.n	8002f40 <__aeabi_d2iz+0x24>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x5c>)
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0340      	lsls	r0, r0, #13
 8002f44:	4301      	orrs	r1, r0
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <__aeabi_d2iz+0x60>)
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	281f      	cmp	r0, #31
 8002f4c:	dd08      	ble.n	8002f60 <__aeabi_d2iz+0x44>
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x64>)
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	40d9      	lsrs	r1, r3
 8002f54:	000b      	movs	r3, r1
 8002f56:	4258      	negs	r0, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d1f0      	bne.n	8002f3e <__aeabi_d2iz+0x22>
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	e7ee      	b.n	8002f3e <__aeabi_d2iz+0x22>
 8002f60:	4c08      	ldr	r4, [pc, #32]	; (8002f84 <__aeabi_d2iz+0x68>)
 8002f62:	40c5      	lsrs	r5, r0
 8002f64:	46a4      	mov	ip, r4
 8002f66:	4463      	add	r3, ip
 8002f68:	4099      	lsls	r1, r3
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	432b      	orrs	r3, r5
 8002f6e:	e7f2      	b.n	8002f56 <__aeabi_d2iz+0x3a>
 8002f70:	000003fe 	.word	0x000003fe
 8002f74:	0000041d 	.word	0x0000041d
 8002f78:	7fffffff 	.word	0x7fffffff
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	fffffbed 	.word	0xfffffbed

08002f88 <__aeabi_i2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d016      	beq.n	8002fbc <__aeabi_i2d+0x34>
 8002f8e:	17c3      	asrs	r3, r0, #31
 8002f90:	18c5      	adds	r5, r0, r3
 8002f92:	405d      	eors	r5, r3
 8002f94:	0fc4      	lsrs	r4, r0, #31
 8002f96:	0028      	movs	r0, r5
 8002f98:	f000 f91c 	bl	80031d4 <__clzsi2>
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <__aeabi_i2d+0x5c>)
 8002f9e:	1a12      	subs	r2, r2, r0
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc16      	bgt.n	8002fd2 <__aeabi_i2d+0x4a>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	3315      	adds	r3, #21
 8002faa:	409e      	lsls	r6, r3
 8002fac:	230b      	movs	r3, #11
 8002fae:	1a18      	subs	r0, r3, r0
 8002fb0:	40c5      	lsrs	r5, r0
 8002fb2:	0553      	lsls	r3, r2, #21
 8002fb4:	032d      	lsls	r5, r5, #12
 8002fb6:	0b2d      	lsrs	r5, r5, #12
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	e003      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	07e4      	lsls	r4, r4, #31
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	0030      	movs	r0, r6
 8002fce:	0019      	movs	r1, r3
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	380b      	subs	r0, #11
 8002fd4:	4085      	lsls	r5, r0
 8002fd6:	0553      	lsls	r3, r2, #21
 8002fd8:	032d      	lsls	r5, r5, #12
 8002fda:	2600      	movs	r6, #0
 8002fdc:	0b2d      	lsrs	r5, r5, #12
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	e7f0      	b.n	8002fc4 <__aeabi_i2d+0x3c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0000041e 	.word	0x0000041e

08002fe8 <__aeabi_ui2d>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e04      	subs	r4, r0, #0
 8002fec:	d010      	beq.n	8003010 <__aeabi_ui2d+0x28>
 8002fee:	f000 f8f1 	bl	80031d4 <__clzsi2>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__aeabi_ui2d+0x48>)
 8002ff4:	1a1b      	subs	r3, r3, r0
 8002ff6:	280a      	cmp	r0, #10
 8002ff8:	dc11      	bgt.n	800301e <__aeabi_ui2d+0x36>
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	40d1      	lsrs	r1, r2
 8003002:	3015      	adds	r0, #21
 8003004:	030a      	lsls	r2, r1, #12
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4084      	lsls	r4, r0
 800300a:	0b12      	lsrs	r2, r2, #12
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	e001      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	051b      	lsls	r3, r3, #20
 8003016:	4313      	orrs	r3, r2
 8003018:	0020      	movs	r0, r4
 800301a:	0019      	movs	r1, r3
 800301c:	bd10      	pop	{r4, pc}
 800301e:	0022      	movs	r2, r4
 8003020:	380b      	subs	r0, #11
 8003022:	4082      	lsls	r2, r0
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	2400      	movs	r4, #0
 800302a:	0b12      	lsrs	r2, r2, #12
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	e7f1      	b.n	8003014 <__aeabi_ui2d+0x2c>
 8003030:	0000041e 	.word	0x0000041e

08003034 <__aeabi_f2d>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0043      	lsls	r3, r0, #1
 8003038:	0246      	lsls	r6, r0, #9
 800303a:	0fc4      	lsrs	r4, r0, #31
 800303c:	20fe      	movs	r0, #254	; 0xfe
 800303e:	0e1b      	lsrs	r3, r3, #24
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	0a75      	lsrs	r5, r6, #9
 8003044:	4208      	tst	r0, r1
 8003046:	d00c      	beq.n	8003062 <__aeabi_f2d+0x2e>
 8003048:	22e0      	movs	r2, #224	; 0xe0
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4694      	mov	ip, r2
 800304e:	076d      	lsls	r5, r5, #29
 8003050:	0b36      	lsrs	r6, r6, #12
 8003052:	4463      	add	r3, ip
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	4333      	orrs	r3, r6
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0028      	movs	r0, r5
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <__aeabi_f2d+0x5c>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d01b      	beq.n	80030a2 <__aeabi_f2d+0x6e>
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8b2 	bl	80031d4 <__clzsi2>
 8003070:	280a      	cmp	r0, #10
 8003072:	dc1c      	bgt.n	80030ae <__aeabi_f2d+0x7a>
 8003074:	230b      	movs	r3, #11
 8003076:	002a      	movs	r2, r5
 8003078:	1a1b      	subs	r3, r3, r0
 800307a:	40da      	lsrs	r2, r3
 800307c:	0003      	movs	r3, r0
 800307e:	3315      	adds	r3, #21
 8003080:	409d      	lsls	r5, r3
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <__aeabi_f2d+0x88>)
 8003084:	0312      	lsls	r2, r2, #12
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	0b16      	lsrs	r6, r2, #12
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	e7e1      	b.n	8003054 <__aeabi_f2d+0x20>
 8003090:	2d00      	cmp	r5, #0
 8003092:	d009      	beq.n	80030a8 <__aeabi_f2d+0x74>
 8003094:	0b32      	lsrs	r2, r6, #12
 8003096:	2680      	movs	r6, #128	; 0x80
 8003098:	0336      	lsls	r6, r6, #12
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__aeabi_f2d+0x8c>)
 800309c:	076d      	lsls	r5, r5, #29
 800309e:	4316      	orrs	r6, r2
 80030a0:	e7d8      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2600      	movs	r6, #0
 80030a6:	e7d5      	b.n	8003054 <__aeabi_f2d+0x20>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <__aeabi_f2d+0x8c>)
 80030ac:	e7d2      	b.n	8003054 <__aeabi_f2d+0x20>
 80030ae:	0003      	movs	r3, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	3b0b      	subs	r3, #11
 80030b4:	409a      	lsls	r2, r3
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7e3      	b.n	8003082 <__aeabi_f2d+0x4e>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	00000389 	.word	0x00000389
 80030c0:	000007ff 	.word	0x000007ff

080030c4 <__aeabi_d2f>:
 80030c4:	0002      	movs	r2, r0
 80030c6:	004b      	lsls	r3, r1, #1
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	0308      	lsls	r0, r1, #12
 80030cc:	0d5b      	lsrs	r3, r3, #21
 80030ce:	4e3d      	ldr	r6, [pc, #244]	; (80031c4 <__aeabi_d2f+0x100>)
 80030d0:	0fcc      	lsrs	r4, r1, #31
 80030d2:	0a40      	lsrs	r0, r0, #9
 80030d4:	0f51      	lsrs	r1, r2, #29
 80030d6:	1c5f      	adds	r7, r3, #1
 80030d8:	4308      	orrs	r0, r1
 80030da:	00d5      	lsls	r5, r2, #3
 80030dc:	4237      	tst	r7, r6
 80030de:	d00a      	beq.n	80030f6 <__aeabi_d2f+0x32>
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <__aeabi_d2f+0x104>)
 80030e2:	185e      	adds	r6, r3, r1
 80030e4:	2efe      	cmp	r6, #254	; 0xfe
 80030e6:	dd16      	ble.n	8003116 <__aeabi_d2f+0x52>
 80030e8:	23ff      	movs	r3, #255	; 0xff
 80030ea:	2100      	movs	r1, #0
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	430b      	orrs	r3, r1
 80030f0:	07e0      	lsls	r0, r4, #31
 80030f2:	4318      	orrs	r0, r3
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <__aeabi_d2f+0x44>
 80030fa:	4328      	orrs	r0, r5
 80030fc:	d027      	beq.n	800314e <__aeabi_d2f+0x8a>
 80030fe:	2105      	movs	r1, #5
 8003100:	0189      	lsls	r1, r1, #6
 8003102:	0a49      	lsrs	r1, r1, #9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e7f1      	b.n	80030ec <__aeabi_d2f+0x28>
 8003108:	4305      	orrs	r5, r0
 800310a:	d0ed      	beq.n	80030e8 <__aeabi_d2f+0x24>
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	03c9      	lsls	r1, r1, #15
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	4301      	orrs	r1, r0
 8003114:	e7ea      	b.n	80030ec <__aeabi_d2f+0x28>
 8003116:	2e00      	cmp	r6, #0
 8003118:	dd1c      	ble.n	8003154 <__aeabi_d2f+0x90>
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	0011      	movs	r1, r2
 800311e:	1e4a      	subs	r2, r1, #1
 8003120:	4191      	sbcs	r1, r2
 8003122:	00c0      	lsls	r0, r0, #3
 8003124:	0f6d      	lsrs	r5, r5, #29
 8003126:	4301      	orrs	r1, r0
 8003128:	4329      	orrs	r1, r5
 800312a:	074b      	lsls	r3, r1, #29
 800312c:	d048      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 800312e:	230f      	movs	r3, #15
 8003130:	400b      	ands	r3, r1
 8003132:	2b04      	cmp	r3, #4
 8003134:	d000      	beq.n	8003138 <__aeabi_d2f+0x74>
 8003136:	3104      	adds	r1, #4
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	04db      	lsls	r3, r3, #19
 800313c:	400b      	ands	r3, r1
 800313e:	d03f      	beq.n	80031c0 <__aeabi_d2f+0xfc>
 8003140:	1c72      	adds	r2, r6, #1
 8003142:	2efe      	cmp	r6, #254	; 0xfe
 8003144:	d0d0      	beq.n	80030e8 <__aeabi_d2f+0x24>
 8003146:	0189      	lsls	r1, r1, #6
 8003148:	0a49      	lsrs	r1, r1, #9
 800314a:	b2d3      	uxtb	r3, r2
 800314c:	e7ce      	b.n	80030ec <__aeabi_d2f+0x28>
 800314e:	2300      	movs	r3, #0
 8003150:	2100      	movs	r1, #0
 8003152:	e7cb      	b.n	80030ec <__aeabi_d2f+0x28>
 8003154:	0032      	movs	r2, r6
 8003156:	3217      	adds	r2, #23
 8003158:	db22      	blt.n	80031a0 <__aeabi_d2f+0xdc>
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	221e      	movs	r2, #30
 800315e:	0409      	lsls	r1, r1, #16
 8003160:	4308      	orrs	r0, r1
 8003162:	1b92      	subs	r2, r2, r6
 8003164:	2a1f      	cmp	r2, #31
 8003166:	dd1d      	ble.n	80031a4 <__aeabi_d2f+0xe0>
 8003168:	2102      	movs	r1, #2
 800316a:	4249      	negs	r1, r1
 800316c:	1b8e      	subs	r6, r1, r6
 800316e:	0001      	movs	r1, r0
 8003170:	40f1      	lsrs	r1, r6
 8003172:	000e      	movs	r6, r1
 8003174:	2a20      	cmp	r2, #32
 8003176:	d004      	beq.n	8003182 <__aeabi_d2f+0xbe>
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <__aeabi_d2f+0x108>)
 800317a:	4694      	mov	ip, r2
 800317c:	4463      	add	r3, ip
 800317e:	4098      	lsls	r0, r3
 8003180:	4305      	orrs	r5, r0
 8003182:	0029      	movs	r1, r5
 8003184:	1e4d      	subs	r5, r1, #1
 8003186:	41a9      	sbcs	r1, r5
 8003188:	4331      	orrs	r1, r6
 800318a:	2600      	movs	r6, #0
 800318c:	074b      	lsls	r3, r1, #29
 800318e:	d1ce      	bne.n	800312e <__aeabi_d2f+0x6a>
 8003190:	2080      	movs	r0, #128	; 0x80
 8003192:	000b      	movs	r3, r1
 8003194:	04c0      	lsls	r0, r0, #19
 8003196:	2201      	movs	r2, #1
 8003198:	4003      	ands	r3, r0
 800319a:	4201      	tst	r1, r0
 800319c:	d1d3      	bne.n	8003146 <__aeabi_d2f+0x82>
 800319e:	e7af      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e7ac      	b.n	80030fe <__aeabi_d2f+0x3a>
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <__aeabi_d2f+0x10c>)
 80031a6:	468c      	mov	ip, r1
 80031a8:	0029      	movs	r1, r5
 80031aa:	4463      	add	r3, ip
 80031ac:	40d1      	lsrs	r1, r2
 80031ae:	409d      	lsls	r5, r3
 80031b0:	000a      	movs	r2, r1
 80031b2:	0029      	movs	r1, r5
 80031b4:	4098      	lsls	r0, r3
 80031b6:	1e4d      	subs	r5, r1, #1
 80031b8:	41a9      	sbcs	r1, r5
 80031ba:	4301      	orrs	r1, r0
 80031bc:	4311      	orrs	r1, r2
 80031be:	e7e4      	b.n	800318a <__aeabi_d2f+0xc6>
 80031c0:	0033      	movs	r3, r6
 80031c2:	e79d      	b.n	8003100 <__aeabi_d2f+0x3c>
 80031c4:	000007fe 	.word	0x000007fe
 80031c8:	fffffc80 	.word	0xfffffc80
 80031cc:	fffffca2 	.word	0xfffffca2
 80031d0:	fffffc82 	.word	0xfffffc82

080031d4 <__clzsi2>:
 80031d4:	211c      	movs	r1, #28
 80031d6:	2301      	movs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	4298      	cmp	r0, r3
 80031dc:	d301      	bcc.n	80031e2 <__clzsi2+0xe>
 80031de:	0c00      	lsrs	r0, r0, #16
 80031e0:	3910      	subs	r1, #16
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	4298      	cmp	r0, r3
 80031e6:	d301      	bcc.n	80031ec <__clzsi2+0x18>
 80031e8:	0a00      	lsrs	r0, r0, #8
 80031ea:	3908      	subs	r1, #8
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d301      	bcc.n	80031f6 <__clzsi2+0x22>
 80031f2:	0900      	lsrs	r0, r0, #4
 80031f4:	3904      	subs	r1, #4
 80031f6:	a202      	add	r2, pc, #8	; (adr r2, 8003200 <__clzsi2+0x2c>)
 80031f8:	5c10      	ldrb	r0, [r2, r0]
 80031fa:	1840      	adds	r0, r0, r1
 80031fc:	4770      	bx	lr
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	02020304 	.word	0x02020304
 8003204:	01010101 	.word	0x01010101
	...

08003210 <__divdi3>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	4657      	mov	r7, sl
 8003214:	464e      	mov	r6, r9
 8003216:	4645      	mov	r5, r8
 8003218:	46de      	mov	lr, fp
 800321a:	b5e0      	push	{r5, r6, r7, lr}
 800321c:	000f      	movs	r7, r1
 800321e:	0019      	movs	r1, r3
 8003220:	2300      	movs	r3, #0
 8003222:	0006      	movs	r6, r0
 8003224:	4698      	mov	r8, r3
 8003226:	0010      	movs	r0, r2
 8003228:	b083      	sub	sp, #12
 800322a:	2f00      	cmp	r7, #0
 800322c:	da07      	bge.n	800323e <__divdi3+0x2e>
 800322e:	0033      	movs	r3, r6
 8003230:	003c      	movs	r4, r7
 8003232:	2700      	movs	r7, #0
 8003234:	425e      	negs	r6, r3
 8003236:	41a7      	sbcs	r7, r4
 8003238:	2301      	movs	r3, #1
 800323a:	425b      	negs	r3, r3
 800323c:	4698      	mov	r8, r3
 800323e:	2900      	cmp	r1, #0
 8003240:	da07      	bge.n	8003252 <__divdi3+0x42>
 8003242:	4643      	mov	r3, r8
 8003244:	43db      	mvns	r3, r3
 8003246:	000c      	movs	r4, r1
 8003248:	4698      	mov	r8, r3
 800324a:	0003      	movs	r3, r0
 800324c:	2100      	movs	r1, #0
 800324e:	4258      	negs	r0, r3
 8003250:	41a1      	sbcs	r1, r4
 8003252:	0034      	movs	r4, r6
 8003254:	003d      	movs	r5, r7
 8003256:	4682      	mov	sl, r0
 8003258:	4689      	mov	r9, r1
 800325a:	42b9      	cmp	r1, r7
 800325c:	d86a      	bhi.n	8003334 <__divdi3+0x124>
 800325e:	d067      	beq.n	8003330 <__divdi3+0x120>
 8003260:	4649      	mov	r1, r9
 8003262:	4650      	mov	r0, sl
 8003264:	f000 f8ba 	bl	80033dc <__clzdi2>
 8003268:	4683      	mov	fp, r0
 800326a:	0039      	movs	r1, r7
 800326c:	0030      	movs	r0, r6
 800326e:	f000 f8b5 	bl	80033dc <__clzdi2>
 8003272:	465b      	mov	r3, fp
 8003274:	1a1b      	subs	r3, r3, r0
 8003276:	469c      	mov	ip, r3
 8003278:	3b20      	subs	r3, #32
 800327a:	469b      	mov	fp, r3
 800327c:	d46b      	bmi.n	8003356 <__divdi3+0x146>
 800327e:	4658      	mov	r0, fp
 8003280:	4651      	mov	r1, sl
 8003282:	4081      	lsls	r1, r0
 8003284:	4660      	mov	r0, ip
 8003286:	000b      	movs	r3, r1
 8003288:	4651      	mov	r1, sl
 800328a:	4081      	lsls	r1, r0
 800328c:	000a      	movs	r2, r1
 800328e:	42bb      	cmp	r3, r7
 8003290:	d900      	bls.n	8003294 <__divdi3+0x84>
 8003292:	e072      	b.n	800337a <__divdi3+0x16a>
 8003294:	42bb      	cmp	r3, r7
 8003296:	d100      	bne.n	800329a <__divdi3+0x8a>
 8003298:	e079      	b.n	800338e <__divdi3+0x17e>
 800329a:	0034      	movs	r4, r6
 800329c:	003d      	movs	r5, r7
 800329e:	4659      	mov	r1, fp
 80032a0:	1aa4      	subs	r4, r4, r2
 80032a2:	419d      	sbcs	r5, r3
 80032a4:	2900      	cmp	r1, #0
 80032a6:	da00      	bge.n	80032aa <__divdi3+0x9a>
 80032a8:	e074      	b.n	8003394 <__divdi3+0x184>
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	2601      	movs	r6, #1
 80032b0:	9000      	str	r0, [sp, #0]
 80032b2:	9101      	str	r1, [sp, #4]
 80032b4:	4659      	mov	r1, fp
 80032b6:	408e      	lsls	r6, r1
 80032b8:	9601      	str	r6, [sp, #4]
 80032ba:	4661      	mov	r1, ip
 80032bc:	2601      	movs	r6, #1
 80032be:	408e      	lsls	r6, r1
 80032c0:	4661      	mov	r1, ip
 80032c2:	9600      	str	r6, [sp, #0]
 80032c4:	2900      	cmp	r1, #0
 80032c6:	d05f      	beq.n	8003388 <__divdi3+0x178>
 80032c8:	07d9      	lsls	r1, r3, #31
 80032ca:	0856      	lsrs	r6, r2, #1
 80032cc:	430e      	orrs	r6, r1
 80032ce:	085f      	lsrs	r7, r3, #1
 80032d0:	4661      	mov	r1, ip
 80032d2:	2201      	movs	r2, #1
 80032d4:	2300      	movs	r3, #0
 80032d6:	e00c      	b.n	80032f2 <__divdi3+0xe2>
 80032d8:	42af      	cmp	r7, r5
 80032da:	d101      	bne.n	80032e0 <__divdi3+0xd0>
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d80a      	bhi.n	80032f6 <__divdi3+0xe6>
 80032e0:	1ba4      	subs	r4, r4, r6
 80032e2:	41bd      	sbcs	r5, r7
 80032e4:	1924      	adds	r4, r4, r4
 80032e6:	416d      	adcs	r5, r5
 80032e8:	3901      	subs	r1, #1
 80032ea:	18a4      	adds	r4, r4, r2
 80032ec:	415d      	adcs	r5, r3
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d006      	beq.n	8003300 <__divdi3+0xf0>
 80032f2:	42af      	cmp	r7, r5
 80032f4:	d9f0      	bls.n	80032d8 <__divdi3+0xc8>
 80032f6:	3901      	subs	r1, #1
 80032f8:	1924      	adds	r4, r4, r4
 80032fa:	416d      	adcs	r5, r5
 80032fc:	2900      	cmp	r1, #0
 80032fe:	d1f8      	bne.n	80032f2 <__divdi3+0xe2>
 8003300:	9800      	ldr	r0, [sp, #0]
 8003302:	9901      	ldr	r1, [sp, #4]
 8003304:	465b      	mov	r3, fp
 8003306:	1900      	adds	r0, r0, r4
 8003308:	4169      	adcs	r1, r5
 800330a:	2b00      	cmp	r3, #0
 800330c:	db4d      	blt.n	80033aa <__divdi3+0x19a>
 800330e:	002e      	movs	r6, r5
 8003310:	002c      	movs	r4, r5
 8003312:	40de      	lsrs	r6, r3
 8003314:	4663      	mov	r3, ip
 8003316:	40dc      	lsrs	r4, r3
 8003318:	465b      	mov	r3, fp
 800331a:	2b00      	cmp	r3, #0
 800331c:	db55      	blt.n	80033ca <__divdi3+0x1ba>
 800331e:	0034      	movs	r4, r6
 8003320:	409c      	lsls	r4, r3
 8003322:	0023      	movs	r3, r4
 8003324:	4664      	mov	r4, ip
 8003326:	40a6      	lsls	r6, r4
 8003328:	0032      	movs	r2, r6
 800332a:	1a80      	subs	r0, r0, r2
 800332c:	4199      	sbcs	r1, r3
 800332e:	e003      	b.n	8003338 <__divdi3+0x128>
 8003330:	42b0      	cmp	r0, r6
 8003332:	d995      	bls.n	8003260 <__divdi3+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	2100      	movs	r1, #0
 8003338:	4643      	mov	r3, r8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <__divdi3+0x138>
 800333e:	0003      	movs	r3, r0
 8003340:	000c      	movs	r4, r1
 8003342:	2100      	movs	r1, #0
 8003344:	4258      	negs	r0, r3
 8003346:	41a1      	sbcs	r1, r4
 8003348:	b003      	add	sp, #12
 800334a:	bcf0      	pop	{r4, r5, r6, r7}
 800334c:	46bb      	mov	fp, r7
 800334e:	46b2      	mov	sl, r6
 8003350:	46a9      	mov	r9, r5
 8003352:	46a0      	mov	r8, r4
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	4662      	mov	r2, ip
 8003358:	4648      	mov	r0, r9
 800335a:	2320      	movs	r3, #32
 800335c:	4651      	mov	r1, sl
 800335e:	4090      	lsls	r0, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	40d9      	lsrs	r1, r3
 8003364:	0003      	movs	r3, r0
 8003366:	9100      	str	r1, [sp, #0]
 8003368:	9900      	ldr	r1, [sp, #0]
 800336a:	4660      	mov	r0, ip
 800336c:	430b      	orrs	r3, r1
 800336e:	4651      	mov	r1, sl
 8003370:	4081      	lsls	r1, r0
 8003372:	000a      	movs	r2, r1
 8003374:	42bb      	cmp	r3, r7
 8003376:	d800      	bhi.n	800337a <__divdi3+0x16a>
 8003378:	e78c      	b.n	8003294 <__divdi3+0x84>
 800337a:	2100      	movs	r1, #0
 800337c:	2000      	movs	r0, #0
 800337e:	9000      	str	r0, [sp, #0]
 8003380:	9101      	str	r1, [sp, #4]
 8003382:	4661      	mov	r1, ip
 8003384:	2900      	cmp	r1, #0
 8003386:	d19f      	bne.n	80032c8 <__divdi3+0xb8>
 8003388:	9800      	ldr	r0, [sp, #0]
 800338a:	9901      	ldr	r1, [sp, #4]
 800338c:	e7d4      	b.n	8003338 <__divdi3+0x128>
 800338e:	42b1      	cmp	r1, r6
 8003390:	d8f3      	bhi.n	800337a <__divdi3+0x16a>
 8003392:	e782      	b.n	800329a <__divdi3+0x8a>
 8003394:	4661      	mov	r1, ip
 8003396:	2620      	movs	r6, #32
 8003398:	2701      	movs	r7, #1
 800339a:	1a76      	subs	r6, r6, r1
 800339c:	2000      	movs	r0, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	40f7      	lsrs	r7, r6
 80033a2:	9000      	str	r0, [sp, #0]
 80033a4:	9101      	str	r1, [sp, #4]
 80033a6:	9701      	str	r7, [sp, #4]
 80033a8:	e787      	b.n	80032ba <__divdi3+0xaa>
 80033aa:	4662      	mov	r2, ip
 80033ac:	2320      	movs	r3, #32
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	002a      	movs	r2, r5
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0026      	movs	r6, r4
 80033b6:	0013      	movs	r3, r2
 80033b8:	4662      	mov	r2, ip
 80033ba:	40d6      	lsrs	r6, r2
 80033bc:	002c      	movs	r4, r5
 80033be:	431e      	orrs	r6, r3
 80033c0:	4663      	mov	r3, ip
 80033c2:	40dc      	lsrs	r4, r3
 80033c4:	465b      	mov	r3, fp
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	daa9      	bge.n	800331e <__divdi3+0x10e>
 80033ca:	4662      	mov	r2, ip
 80033cc:	2320      	movs	r3, #32
 80033ce:	0035      	movs	r5, r6
 80033d0:	4094      	lsls	r4, r2
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	40dd      	lsrs	r5, r3
 80033d6:	0023      	movs	r3, r4
 80033d8:	432b      	orrs	r3, r5
 80033da:	e7a3      	b.n	8003324 <__divdi3+0x114>

080033dc <__clzdi2>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	2900      	cmp	r1, #0
 80033e0:	d103      	bne.n	80033ea <__clzdi2+0xe>
 80033e2:	f7ff fef7 	bl	80031d4 <__clzsi2>
 80033e6:	3020      	adds	r0, #32
 80033e8:	e002      	b.n	80033f0 <__clzdi2+0x14>
 80033ea:	1c08      	adds	r0, r1, #0
 80033ec:	f7ff fef2 	bl	80031d4 <__clzsi2>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)

080033f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_Init+0x3c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_Init+0x3c>)
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	0049      	lsls	r1, r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800340e:	2000      	movs	r0, #0
 8003410:	f000 f810 	bl	8003434 <HAL_InitTick>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d003      	beq.n	8003420 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e001      	b.n	8003424 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003420:	f00f fa36 	bl	8012890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000

08003434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_InitTick+0x88>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02b      	beq.n	80034a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_InitTick+0x8c>)
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_InitTick+0x88>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	0019      	movs	r1, r3
 8003456:	23fa      	movs	r3, #250	; 0xfa
 8003458:	0098      	lsls	r0, r3, #2
 800345a:	f7fc fe5b 	bl	8000114 <__udivsi3>
 800345e:	0003      	movs	r3, r0
 8003460:	0019      	movs	r1, r3
 8003462:	0020      	movs	r0, r4
 8003464:	f7fc fe56 	bl	8000114 <__udivsi3>
 8003468:	0003      	movs	r3, r0
 800346a:	0018      	movs	r0, r3
 800346c:	f001 f80f 	bl	800448e <HAL_SYSTICK_Config>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d112      	bne.n	800349a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d80a      	bhi.n	8003490 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	2301      	movs	r3, #1
 800347e:	425b      	negs	r3, r3
 8003480:	2200      	movs	r2, #0
 8003482:	0018      	movs	r0, r3
 8003484:	f000 ffde 	bl	8004444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_InitTick+0x90>)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e00d      	b.n	80034ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e008      	b.n	80034ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800349a:	230f      	movs	r3, #15
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e003      	b.n	80034ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034ac:	230f      	movs	r3, #15
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	781b      	ldrb	r3, [r3, #0]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b005      	add	sp, #20
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000004 	.word	0x20000004
 80034c0:	20000088 	.word	0x20000088
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_IncTick+0x1c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x20>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	18d2      	adds	r2, r2, r3
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_IncTick+0x20>)
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000004 	.word	0x20000004
 80034e8:	200001d4 	.word	0x200001d4

080034ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  return uwTick;
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <HAL_GetTick+0x10>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	200001d4 	.word	0x200001d4

08003500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fff0 	bl	80034ec <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_Delay+0x44>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	001a      	movs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	189b      	adds	r3, r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	f7ff ffe0 	bl	80034ec <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d8f7      	bhi.n	8003528 <HAL_Delay+0x28>
  {
  }
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_SuspendTick+0x18>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_SuspendTick+0x18>)
 8003552:	2102      	movs	r1, #2
 8003554:	438a      	bics	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <HAL_ResumeTick+0x18>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_ResumeTick+0x18>)
 800356e:	2102      	movs	r1, #2
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40010000 	.word	0x40010000
 80035a8:	fffff9ff 	.word	0xfffff9ff

080035ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035bc:	401a      	ands	r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fe3fffff 	.word	0xfe3fffff

080035d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	23e0      	movs	r3, #224	; 0xe0
 80035e2:	045b      	lsls	r3, r3, #17
 80035e4:	4013      	ands	r3, r2
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	2104      	movs	r1, #4
 8003602:	400a      	ands	r2, r1
 8003604:	2107      	movs	r1, #7
 8003606:	4091      	lsls	r1, r2
 8003608:	000a      	movs	r2, r1
 800360a:	43d2      	mvns	r2, r2
 800360c:	401a      	ands	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2104      	movs	r1, #4
 8003612:	400b      	ands	r3, r1
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4099      	lsls	r1, r3
 8003618:	000b      	movs	r3, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}

08003628 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	23c0      	movs	r3, #192	; 0xc0
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d101      	bne.n	8003640 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}

0800364a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	211f      	movs	r1, #31
 800365e:	400a      	ands	r2, r1
 8003660:	210f      	movs	r1, #15
 8003662:	4091      	lsls	r1, r2
 8003664:	000a      	movs	r2, r1
 8003666:	43d2      	mvns	r2, r2
 8003668:	401a      	ands	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	210f      	movs	r1, #15
 8003670:	4019      	ands	r1, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	201f      	movs	r0, #31
 8003676:	4003      	ands	r3, r0
 8003678:	4099      	lsls	r1, r3
 800367a:	000b      	movs	r3, r1
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}

0800368a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	035b      	lsls	r3, r3, #13
 800369c:	0b5b      	lsrs	r3, r3, #13
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	0352      	lsls	r2, r2, #13
 80036be:	0b52      	lsrs	r2, r2, #13
 80036c0:	43d2      	mvns	r2, r2
 80036c2:	401a      	ands	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	0212      	lsls	r2, r2, #8
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	400b      	ands	r3, r1
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <LL_ADC_SetChannelSamplingTime+0x34>)
 80036f2:	400b      	ands	r3, r1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	07ffff00 	.word	0x07ffff00

08003708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <LL_ADC_EnableInternalRegulator+0x24>)
 8003716:	4013      	ands	r3, r2
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	6fffffe8 	.word	0x6fffffe8

08003730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	055b      	lsls	r3, r3, #21
 8003740:	401a      	ands	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	429a      	cmp	r2, r3
 8003748:	d101      	bne.n	800374e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800374e:	2300      	movs	r3, #0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <LL_ADC_Enable+0x20>)
 8003766:	4013      	ands	r3, r2
 8003768:	2201      	movs	r2, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	7fffffe8 	.word	0x7fffffe8

0800377c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <LL_ADC_Disable+0x20>)
 800378a:	4013      	ands	r3, r2
 800378c:	2202      	movs	r2, #2
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	7fffffe8 	.word	0x7fffffe8

080037a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <LL_ADC_IsEnabled+0x18>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <LL_ADC_IsEnabled+0x1a>
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <LL_ADC_REG_StartConversion+0x20>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2204      	movs	r2, #4
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	7fffffe8 	.word	0x7fffffe8

080037e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2204      	movs	r2, #4
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d101      	bne.n	8003800 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1b1      	b.n	8003b96 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f00f f84f 	bl	80128e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2254      	movs	r2, #84	; 0x54
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff ff6b 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d115      	bne.n	800388a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0018      	movs	r0, r3
 8003864:	f7ff ff50 	bl	8003708 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003868:	4bcd      	ldr	r3, [pc, #820]	; (8003ba0 <HAL_ADC_Init+0x394>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	49cd      	ldr	r1, [pc, #820]	; (8003ba4 <HAL_ADC_Init+0x398>)
 800386e:	0018      	movs	r0, r3
 8003870:	f7fc fc50 	bl	8000114 <__udivsi3>
 8003874:	0003      	movs	r3, r0
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800387c:	e002      	b.n	8003884 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff ff4e 	bl	8003730 <LL_ADC_IsInternalRegulatorEnabled>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	2210      	movs	r2, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2201      	movs	r2, #1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff ff93 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 80038c2:	0003      	movs	r3, r0
 80038c4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	d000      	beq.n	80038d2 <HAL_ADC_Init+0xc6>
 80038d0:	e154      	b.n	8003b7c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d000      	beq.n	80038da <HAL_ADC_Init+0xce>
 80038d8:	e150      	b.n	8003b7c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4ab2      	ldr	r2, [pc, #712]	; (8003ba8 <HAL_ADC_Init+0x39c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	2202      	movs	r2, #2
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff ff56 	bl	80037a0 <LL_ADC_IsEnabled>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d156      	bne.n	80039a6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2218      	movs	r2, #24
 8003900:	4393      	bics	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	0f9b      	lsrs	r3, r3, #30
 8003916:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800391c:	4313      	orrs	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223c      	movs	r2, #60	; 0x3c
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d111      	bne.n	8003952 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0f9b      	lsrs	r3, r3, #30
 8003934:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800393a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003940:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003946:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	2201      	movs	r2, #1
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a94      	ldr	r2, [pc, #592]	; (8003bac <HAL_ADC_Init+0x3a0>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	430a      	orrs	r2, r1
 8003966:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	23c0      	movs	r3, #192	; 0xc0
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	429a      	cmp	r2, r3
 8003972:	d018      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	429a      	cmp	r2, r3
 800397e:	d012      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	429a      	cmp	r2, r3
 800398a:	d00c      	beq.n	80039a6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800398c:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_ADC_Init+0x3a4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <HAL_ADC_Init+0x3a8>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	23f0      	movs	r3, #240	; 0xf0
 800399c:	039b      	lsls	r3, r3, #14
 800399e:	401a      	ands	r2, r3
 80039a0:	4b83      	ldr	r3, [pc, #524]	; (8003bb0 <HAL_ADC_Init+0x3a4>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7e1b      	ldrb	r3, [r3, #24]
 80039aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7e5b      	ldrb	r3, [r3, #25]
 80039b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e9b      	ldrb	r3, [r3, #26]
 80039b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_Init+0x1be>
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	e000      	b.n	80039cc <HAL_ADC_Init+0x1c0>
 80039ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039d2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da04      	bge.n	80039e6 <HAL_ADC_Init+0x1da>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	e001      	b.n	80039ea <HAL_ADC_Init+0x1de>
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80039ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	5c5b      	ldrb	r3, [r3, r1]
 80039f2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d115      	bne.n	8003a32 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7e9b      	ldrb	r3, [r3, #26]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0252      	lsls	r2, r2, #9
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e00b      	b.n	8003a32 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	2220      	movs	r2, #32
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3e:	23e0      	movs	r3, #224	; 0xe0
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_ADC_Init+0x3ac>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	4a53      	ldr	r2, [pc, #332]	; (8003bbc <HAL_ADC_Init+0x3b0>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	001a      	movs	r2, r3
 8003a86:	2100      	movs	r1, #0
 8003a88:	f7ff fdb1 	bl	80035ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	494a      	ldr	r1, [pc, #296]	; (8003bc0 <HAL_ADC_Init+0x3b4>)
 8003a96:	001a      	movs	r2, r3
 8003a98:	f7ff fda9 	bl	80035ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2110      	movs	r1, #16
 8003ab0:	4249      	negs	r1, r1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab6:	e03a      	b.n	8003b2e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	039b      	lsls	r3, r3, #14
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d134      	bne.n	8003b2e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e00c      	b.n	8003ae4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	40da      	lsrs	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d006      	beq.n	8003aec <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b07      	cmp	r3, #7
 8003ae8:	d9ef      	bls.n	8003aca <HAL_ADC_Init+0x2be>
 8003aea:	e000      	b.n	8003aee <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003aec:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d109      	bne.n	8003b08 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2110      	movs	r1, #16
 8003b00:	4249      	negs	r1, r1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
 8003b06:	e012      	b.n	8003b2e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	221c      	movs	r2, #28
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	4252      	negs	r2, r2
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	0011      	movs	r1, r2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_ADC_Init+0x3b8>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b54:	e01c      	b.n	8003b90 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	2212      	movs	r2, #18
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	2210      	movs	r2, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b7a:	e009      	b.n	8003b90 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	2210      	movs	r2, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b88:	231f      	movs	r3, #31
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b008      	add	sp, #32
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	20000088 	.word	0x20000088
 8003ba4:	00030d40 	.word	0x00030d40
 8003ba8:	fffffefd 	.word	0xfffffefd
 8003bac:	1ffffc02 	.word	0x1ffffc02
 8003bb0:	40012708 	.word	0x40012708
 8003bb4:	ffc3ffff 	.word	0xffc3ffff
 8003bb8:	fffe0219 	.word	0xfffe0219
 8003bbc:	dffffc02 	.word	0xdffffc02
 8003bc0:	07ffff04 	.word	0x07ffff04
 8003bc4:	833fffe7 	.word	0x833fffe7

08003bc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fe05 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d16c      	bne.n	8003cbc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2254      	movs	r2, #84	; 0x54
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0x28>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e06c      	b.n	8003cca <HAL_ADC_Start_DMA+0x102>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2254      	movs	r2, #84	; 0x54
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d113      	bne.n	8003c2c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fdc9 	bl	80037a0 <LL_ADC_IsEnabled>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7ff fdb0 	bl	800377c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c2c:	2517      	movs	r5, #23
 8003c2e:	197c      	adds	r4, r7, r5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 fa46 	bl	80040c4 <ADC_Enable>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c3c:	002c      	movs	r4, r5
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13e      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_ADC_Start_DMA+0x10c>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	0052      	lsls	r2, r2, #1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_ADC_Start_DMA+0x110>)
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_ADC_Start_DMA+0x114>)
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_ADC_Start_DMA+0x118>)
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	221c      	movs	r2, #28
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2254      	movs	r2, #84	; 0x54
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2110      	movs	r1, #16
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3340      	adds	r3, #64	; 0x40
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	193c      	adds	r4, r7, r4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f000 fc88 	bl	80045bc <HAL_DMA_Start_IT>
 8003cac:	0003      	movs	r3, r0
 8003cae:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fd85 	bl	80037c4 <LL_ADC_REG_StartConversion>
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cbc:	2317      	movs	r3, #23
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cc4:	2317      	movs	r3, #23
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b006      	add	sp, #24
 8003cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fffff0fe 	.word	0xfffff0fe
 8003cd8:	080041d1 	.word	0x080041d1
 8003cdc:	08004299 	.word	0x08004299
 8003ce0:	080042b7 	.word	0x080042b7

08003ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2317      	movs	r3, #23
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2254      	movs	r2, #84	; 0x54
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x24>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e1c0      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3a6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2254      	movs	r2, #84	; 0x54
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff fd4f 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d000      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0x3c>
 8003d4e:	e1a3      	b.n	8004098 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d100      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x46>
 8003d58:	e143      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d004      	beq.n	8003d70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d6a:	4ac1      	ldr	r2, [pc, #772]	; (8004070 <HAL_ADC_ConfigChannel+0x35c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0019      	movs	r1, r3
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	f7ff fc85 	bl	800368a <LL_ADC_REG_SetSequencerChAdd>
 8003d80:	e0c9      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	211f      	movs	r1, #31
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	210f      	movs	r1, #15
 8003d90:	4099      	lsls	r1, r3
 8003d92:	000b      	movs	r3, r1
 8003d94:	43db      	mvns	r3, r3
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	035b      	lsls	r3, r3, #13
 8003da0:	0b5b      	lsrs	r3, r3, #13
 8003da2:	d105      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x9c>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	221f      	movs	r2, #31
 8003dac:	4013      	ands	r3, r2
 8003dae:	e098      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4013      	ands	r3, r2
 8003db8:	d000      	beq.n	8003dbc <HAL_ADC_ConfigChannel+0xa8>
 8003dba:	e091      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d000      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0xb4>
 8003dc6:	e089      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1c8>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d000      	beq.n	8003dd4 <HAL_ADC_ConfigChannel+0xc0>
 8003dd2:	e081      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x1c4>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d000      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0xcc>
 8003dde:	e079      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1c0>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2210      	movs	r2, #16
 8003de6:	4013      	ands	r3, r2
 8003de8:	d000      	beq.n	8003dec <HAL_ADC_ConfigChannel+0xd8>
 8003dea:	e071      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	4013      	ands	r3, r2
 8003df4:	d000      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0xe4>
 8003df6:	e069      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x1b8>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d000      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0xf0>
 8003e02:	e061      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1b4>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d000      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0xfc>
 8003e0e:	e059      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d151      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1ac>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4013      	ands	r3, r2
 8003e26:	d149      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x1a8>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4013      	ands	r3, r2
 8003e32:	d141      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d139      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x1a0>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d131      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x19c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	019b      	lsls	r3, r3, #6
 8003e54:	4013      	ands	r3, r2
 8003e56:	d129      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x198>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	01db      	lsls	r3, r3, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	d121      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x194>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d119      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x190>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	025b      	lsls	r3, r3, #9
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x18c>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	4013      	ands	r3, r2
 8003e86:	d109      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x188>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	02db      	lsls	r3, r3, #11
 8003e90:	4013      	ands	r3, r2
 8003e92:	d001      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x184>
 8003e94:	2312      	movs	r3, #18
 8003e96:	e024      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e022      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003e9c:	2311      	movs	r3, #17
 8003e9e:	e020      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	e01e      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	e01c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ea8:	230e      	movs	r3, #14
 8003eaa:	e01a      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eac:	230d      	movs	r3, #13
 8003eae:	e018      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	e016      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb4:	230b      	movs	r3, #11
 8003eb6:	e014      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003eb8:	230a      	movs	r3, #10
 8003eba:	e012      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	e010      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	e00e      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec4:	2307      	movs	r3, #7
 8003ec6:	e00c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e00a      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ecc:	2305      	movs	r3, #5
 8003ece:	e008      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e006      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e004      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	6852      	ldr	r2, [r2, #4]
 8003ee6:	201f      	movs	r0, #31
 8003ee8:	4002      	ands	r2, r0
 8003eea:	4093      	lsls	r3, r2
 8003eec:	000a      	movs	r2, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d808      	bhi.n	8003f16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	f7ff fb9a 	bl	800364a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	001a      	movs	r2, r3
 8003f24:	f7ff fbd4 	bl	80036d0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db00      	blt.n	8003f32 <HAL_ADC_ConfigChannel+0x21e>
 8003f30:	e0bc      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f32:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fb4d 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_ADC_ConfigChannel+0x364>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d122      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f50:	d11d      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	0412      	lsls	r2, r2, #16
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f7ff fb24 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_ADC_ConfigChannel+0x368>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4945      	ldr	r1, [pc, #276]	; (8004080 <HAL_ADC_ConfigChannel+0x36c>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fc f8d2 	bl	8000114 <__udivsi3>
 8003f70:	0003      	movs	r3, r0
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	0013      	movs	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f7e:	e002      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f9      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f8c:	e08e      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_ADC_ConfigChannel+0x370>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10e      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x2a2>
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	045b      	lsls	r3, r3, #17
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d109      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	0452      	lsls	r2, r2, #17
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003fac:	0019      	movs	r1, r3
 8003fae:	0010      	movs	r0, r2
 8003fb0:	f7ff fafc 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8003fb4:	e07a      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a33      	ldr	r2, [pc, #204]	; (8004088 <HAL_ADC_ConfigChannel+0x374>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d000      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8003fc0:	e074      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	03db      	lsls	r3, r3, #15
 8003fc8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fca:	d000      	beq.n	8003fce <HAL_ADC_ConfigChannel+0x2ba>
 8003fcc:	e06e      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	03d2      	lsls	r2, r2, #15
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8003fd8:	0019      	movs	r1, r3
 8003fda:	0010      	movs	r0, r2
 8003fdc:	f7ff fae6 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8003fe0:	e064      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d004      	beq.n	8003ff8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <HAL_ADC_ConfigChannel+0x35c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d107      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0019      	movs	r1, r3
 8004002:	0010      	movs	r0, r2
 8004004:	f7ff fb52 	bl	80036ac <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da4d      	bge.n	80040ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fade 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 8004018:	0003      	movs	r3, r0
 800401a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_ADC_ConfigChannel+0x364>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_ADC_ConfigChannel+0x378>)
 800402a:	4013      	ands	r3, r2
 800402c:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 800402e:	0019      	movs	r1, r3
 8004030:	0010      	movs	r0, r2
 8004032:	f7ff fabb 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8004036:	e039      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_ADC_ConfigChannel+0x370>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_ADC_ConfigChannel+0x37c>)
 8004046:	4013      	ands	r3, r2
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 800404a:	0019      	movs	r1, r3
 800404c:	0010      	movs	r0, r2
 800404e:	f7ff faad 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 8004052:	e02b      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <HAL_ADC_ConfigChannel+0x374>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d126      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_ADC_ConfigChannel+0x380>)
 8004062:	4013      	ands	r3, r2
 8004064:	4a03      	ldr	r2, [pc, #12]	; (8004074 <HAL_ADC_ConfigChannel+0x360>)
 8004066:	0019      	movs	r1, r3
 8004068:	0010      	movs	r0, r2
 800406a:	f7ff fa9f 	bl	80035ac <LL_ADC_SetCommonPathInternalCh>
 800406e:	e01d      	b.n	80040ac <HAL_ADC_ConfigChannel+0x398>
 8004070:	80000004 	.word	0x80000004
 8004074:	40012708 	.word	0x40012708
 8004078:	b0001000 	.word	0xb0001000
 800407c:	20000088 	.word	0x20000088
 8004080:	00030d40 	.word	0x00030d40
 8004084:	b8004000 	.word	0xb8004000
 8004088:	b4002000 	.word	0xb4002000
 800408c:	ff7fffff 	.word	0xff7fffff
 8004090:	feffffff 	.word	0xfeffffff
 8004094:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	2220      	movs	r2, #32
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040a4:	2317      	movs	r3, #23
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2254      	movs	r2, #84	; 0x54
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80040b4:	2317      	movs	r3, #23
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	781b      	ldrb	r3, [r3, #0]
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b006      	add	sp, #24
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)

080040c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fb63 	bl	80037a0 <LL_ADC_IsEnabled>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d000      	beq.n	80040e0 <ADC_Enable+0x1c>
 80040de:	e069      	b.n	80041b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a36      	ldr	r2, [pc, #216]	; (80041c0 <ADC_Enable+0xfc>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	d00d      	beq.n	8004108 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	2210      	movs	r2, #16
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2201      	movs	r2, #1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e056      	b.n	80041b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff fb23 	bl	8003758 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <ADC_Enable+0x100>)
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fa5d 	bl	80035d4 <LL_ADC_GetCommonPathInternalCh>
 800411a:	0002      	movs	r2, r0
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	4013      	ands	r3, r2
 8004122:	d00f      	beq.n	8004144 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <ADC_Enable+0x104>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4928      	ldr	r1, [pc, #160]	; (80041cc <ADC_Enable+0x108>)
 800412a:	0018      	movs	r0, r3
 800412c:	f7fb fff2 	bl	8000114 <__udivsi3>
 8004130:	0003      	movs	r3, r0
 8004132:	3301      	adds	r3, #1
 8004134:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004136:	e002      	b.n	800413e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3b01      	subs	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7e5b      	ldrb	r3, [r3, #25]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d033      	beq.n	80041b4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800414c:	f7ff f9ce 	bl	80034ec <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004154:	e027      	b.n	80041a6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fb20 	bl	80037a0 <LL_ADC_IsEnabled>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d104      	bne.n	800416e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff faf5 	bl	8003758 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800416e:	f7ff f9bd 	bl	80034ec <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d914      	bls.n	80041a6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00d      	beq.n	80041a6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	2210      	movs	r2, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2201      	movs	r2, #1
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e007      	b.n	80041b6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d1d0      	bne.n	8004156 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	80000017 	.word	0x80000017
 80041c4:	40012708 	.word	0x40012708
 80041c8:	20000088 	.word	0x20000088
 80041cc:	00030d40 	.word	0x00030d40

080041d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	2250      	movs	r2, #80	; 0x50
 80041e4:	4013      	ands	r3, r2
 80041e6:	d141      	bne.n	800426c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff fa14 	bl	8003628 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d02e      	beq.n	8004262 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	7e9b      	ldrb	r3, [r3, #26]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d12a      	bne.n	8004262 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2208      	movs	r2, #8
 8004214:	4013      	ands	r3, r2
 8004216:	2b08      	cmp	r3, #8
 8004218:	d123      	bne.n	8004262 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fae2 	bl	80037e8 <LL_ADC_REG_IsConversionOngoing>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d110      	bne.n	800424a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	210c      	movs	r1, #12
 8004234:	438a      	bics	r2, r1
 8004236:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <ADC_DMAConvCplt+0xc4>)
 800423e:	4013      	ands	r3, r2
 8004240:	2201      	movs	r2, #1
 8004242:	431a      	orrs	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	659a      	str	r2, [r3, #88]	; 0x58
 8004248:	e00b      	b.n	8004262 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	2220      	movs	r2, #32
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2201      	movs	r2, #1
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fd3d 	bl	8003ce4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800426a:	e00f      	b.n	800428c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	2210      	movs	r2, #16
 8004272:	4013      	ands	r3, r2
 8004274:	d004      	beq.n	8004280 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff fd43 	bl	8003d04 <HAL_ADC_ErrorCallback>
}
 800427e:	e005      	b.n	800428c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	0010      	movs	r0, r2
 800428a:	4798      	blx	r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	fffffefe 	.word	0xfffffefe

08004298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fd23 	bl	8003cf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	2204      	movs	r2, #4
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7ff fd10 	bl	8003d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}

080042ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	0002      	movs	r2, r0
 80042f4:	1dfb      	adds	r3, r7, #7
 80042f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	1dfb      	adds	r3, r7, #7
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b7f      	cmp	r3, #127	; 0x7f
 80042fe:	d809      	bhi.n	8004314 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	001a      	movs	r2, r3
 8004306:	231f      	movs	r3, #31
 8004308:	401a      	ands	r2, r3
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <__NVIC_EnableIRQ+0x30>)
 800430c:	2101      	movs	r1, #1
 800430e:	4091      	lsls	r1, r2
 8004310:	000a      	movs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}
 800431c:	e000e100 	.word	0xe000e100

08004320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	0002      	movs	r2, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b7f      	cmp	r3, #127	; 0x7f
 8004334:	d828      	bhi.n	8004388 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004336:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <__NVIC_SetPriority+0xd4>)
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b25b      	sxtb	r3, r3
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	33c0      	adds	r3, #192	; 0xc0
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	589b      	ldr	r3, [r3, r2]
 8004346:	1dfa      	adds	r2, r7, #7
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	0011      	movs	r1, r2
 800434c:	2203      	movs	r2, #3
 800434e:	400a      	ands	r2, r1
 8004350:	00d2      	lsls	r2, r2, #3
 8004352:	21ff      	movs	r1, #255	; 0xff
 8004354:	4091      	lsls	r1, r2
 8004356:	000a      	movs	r2, r1
 8004358:	43d2      	mvns	r2, r2
 800435a:	401a      	ands	r2, r3
 800435c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	401a      	ands	r2, r3
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	0018      	movs	r0, r3
 800436c:	2303      	movs	r3, #3
 800436e:	4003      	ands	r3, r0
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004374:	481f      	ldr	r0, [pc, #124]	; (80043f4 <__NVIC_SetPriority+0xd4>)
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b25b      	sxtb	r3, r3
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	430a      	orrs	r2, r1
 8004380:	33c0      	adds	r3, #192	; 0xc0
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004386:	e031      	b.n	80043ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <__NVIC_SetPriority+0xd8>)
 800438a:	1dfb      	adds	r3, r7, #7
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	0019      	movs	r1, r3
 8004390:	230f      	movs	r3, #15
 8004392:	400b      	ands	r3, r1
 8004394:	3b08      	subs	r3, #8
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3306      	adds	r3, #6
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	3304      	adds	r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1dfa      	adds	r2, r7, #7
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	0011      	movs	r1, r2
 80043a8:	2203      	movs	r2, #3
 80043aa:	400a      	ands	r2, r1
 80043ac:	00d2      	lsls	r2, r2, #3
 80043ae:	21ff      	movs	r1, #255	; 0xff
 80043b0:	4091      	lsls	r1, r2
 80043b2:	000a      	movs	r2, r1
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	401a      	ands	r2, r3
 80043b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	401a      	ands	r2, r3
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	4003      	ands	r3, r0
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d0:	4809      	ldr	r0, [pc, #36]	; (80043f8 <__NVIC_SetPriority+0xd8>)
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	001c      	movs	r4, r3
 80043d8:	230f      	movs	r3, #15
 80043da:	4023      	ands	r3, r4
 80043dc:	3b08      	subs	r3, #8
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	430a      	orrs	r2, r1
 80043e2:	3306      	adds	r3, #6
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	18c3      	adds	r3, r0, r3
 80043e8:	3304      	adds	r3, #4
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b003      	add	sp, #12
 80043f2:	bd90      	pop	{r4, r7, pc}
 80043f4:	e000e100 	.word	0xe000e100
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	045b      	lsls	r3, r3, #17
 800440c:	429a      	cmp	r2, r3
 800440e:	d301      	bcc.n	8004414 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004410:	2301      	movs	r3, #1
 8004412:	e010      	b.n	8004436 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <SysTick_Config+0x44>)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	3a01      	subs	r2, #1
 800441a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441c:	2301      	movs	r3, #1
 800441e:	425b      	negs	r3, r3
 8004420:	2103      	movs	r1, #3
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff ff7c 	bl	8004320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x44>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x44>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	210f      	movs	r1, #15
 8004450:	187b      	adds	r3, r7, r1
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	187b      	adds	r3, r7, r1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f7ff ff5d 	bl	8004320 <__NVIC_SetPriority>
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	0002      	movs	r2, r0
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800447a:	1dfb      	adds	r3, r7, #7
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	0018      	movs	r0, r3
 8004482:	f7ff ff33 	bl	80042ec <__NVIC_EnableIRQ>
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff ffaf 	bl	80043fc <SysTick_Config>
 800449e:	0003      	movs	r3, r0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e077      	b.n	80045aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_DMA_Init+0x10c>)
 80044c0:	4694      	mov	ip, r2
 80044c2:	4463      	add	r3, ip
 80044c4:	2114      	movs	r1, #20
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7fb fe24 	bl	8000114 <__udivsi3>
 80044cc:	0003      	movs	r3, r0
 80044ce:	009a      	lsls	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2225      	movs	r2, #37	; 0x25
 80044d8:	2102      	movs	r1, #2
 80044da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_DMA_Init+0x110>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f9c1 	bl	80048ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	01db      	lsls	r3, r3, #7
 8004532:	429a      	cmp	r2, r3
 8004534:	d102      	bne.n	800453c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	213f      	movs	r1, #63	; 0x3f
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004552:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d011      	beq.n	8004580 <HAL_DMA_Init+0xd8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d80d      	bhi.n	8004580 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f9cc 	bl	8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e008      	b.n	8004592 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2225      	movs	r2, #37	; 0x25
 800459c:	2101      	movs	r1, #1
 800459e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	bffdfff8 	.word	0xbffdfff8
 80045b8:	ffff800f 	.word	0xffff800f

080045bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2317      	movs	r3, #23
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2224      	movs	r2, #36	; 0x24
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_DMA_Start_IT+0x24>
 80045dc:	2302      	movs	r3, #2
 80045de:	e06f      	b.n	80046c0 <HAL_DMA_Start_IT+0x104>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2225      	movs	r2, #37	; 0x25
 80045ec:	5c9b      	ldrb	r3, [r3, r2]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d157      	bne.n	80046a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2225      	movs	r2, #37	; 0x25
 80045f8:	2102      	movs	r1, #2
 80045fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	438a      	bics	r2, r1
 8004610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f907 	bl	800482c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	210e      	movs	r1, #14
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e00f      	b.n	8004658 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2104      	movs	r1, #4
 8004644:	438a      	bics	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	210a      	movs	r1, #10
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	4013      	ands	r3, r2
 8004664:	d008      	beq.n	8004678 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	0049      	lsls	r1, r1, #1
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	0049      	lsls	r1, r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2101      	movs	r1, #1
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e00a      	b.n	80046ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80046b2:	2317      	movs	r3, #23
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80046ba:	2317      	movs	r3, #23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	781b      	ldrb	r3, [r3, #0]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b006      	add	sp, #24
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	221c      	movs	r2, #28
 80046e4:	4013      	ands	r3, r2
 80046e6:	2204      	movs	r2, #4
 80046e8:	409a      	lsls	r2, r3
 80046ea:	0013      	movs	r3, r2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4013      	ands	r3, r2
 80046f0:	d027      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2204      	movs	r2, #4
 80046f6:	4013      	ands	r3, r2
 80046f8:	d023      	beq.n	8004742 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2220      	movs	r2, #32
 8004702:	4013      	ands	r3, r2
 8004704:	d107      	bne.n	8004716 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2104      	movs	r1, #4
 8004712:	438a      	bics	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	221c      	movs	r2, #28
 8004720:	4013      	ands	r3, r2
 8004722:	2204      	movs	r2, #4
 8004724:	409a      	lsls	r2, r3
 8004726:	4b40      	ldr	r3, [pc, #256]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_DMA_IRQHandler+0x6e>
 8004734:	e073      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	0010      	movs	r0, r2
 800473e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004740:	e06d      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	221c      	movs	r2, #28
 8004748:	4013      	ands	r3, r2
 800474a:	2202      	movs	r2, #2
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	d02e      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d02a      	beq.n	80047b4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	4013      	ands	r3, r2
 8004768:	d10b      	bne.n	8004782 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	210a      	movs	r1, #10
 8004776:	438a      	bics	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2225      	movs	r2, #37	; 0x25
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	221c      	movs	r2, #28
 800478c:	4013      	ands	r3, r2
 800478e:	2202      	movs	r2, #2
 8004790:	409a      	lsls	r2, r3
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03a      	beq.n	800481e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	0010      	movs	r0, r2
 80047b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047b2:	e034      	b.n	800481e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	221c      	movs	r2, #28
 80047ba:	4013      	ands	r3, r2
 80047bc:	2208      	movs	r2, #8
 80047be:	409a      	lsls	r2, r3
 80047c0:	0013      	movs	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	d02b      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2208      	movs	r2, #8
 80047cc:	4013      	ands	r3, r2
 80047ce:	d027      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	210e      	movs	r1, #14
 80047dc:	438a      	bics	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	221c      	movs	r2, #28
 80047ea:	4013      	ands	r3, r2
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_DMA_IRQHandler+0x160>)
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2225      	movs	r2, #37	; 0x25
 8004800:	2101      	movs	r1, #1
 8004802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	2100      	movs	r1, #0
 800480a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	0010      	movs	r0, r2
 800481c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46c0      	nop			; (mov r8, r8)
}
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40020000 	.word	0x40020000

0800482c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004842:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004854:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <DMA_SetConfig+0x7c>)
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	221c      	movs	r2, #28
 8004860:	4013      	ands	r3, r2
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <DMA_SetConfig+0x7c>)
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d108      	bne.n	800488e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800488c:	e007      	b.n	800489e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	40020000 	.word	0x40020000

080048ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80048bc:	4694      	mov	ip, r2
 80048be:	4463      	add	r3, ip
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	001a      	movs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	001a      	movs	r2, r3
 80048ce:	23ff      	movs	r3, #255	; 0xff
 80048d0:	4013      	ands	r3, r2
 80048d2:	3b08      	subs	r3, #8
 80048d4:	2114      	movs	r1, #20
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7fb fc1c 	bl	8000114 <__udivsi3>
 80048dc:	0003      	movs	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a07      	ldr	r2, [pc, #28]	; (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80048e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	221f      	movs	r2, #31
 80048ea:	4013      	ands	r3, r2
 80048ec:	2201      	movs	r2, #1
 80048ee:	409a      	lsls	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b004      	add	sp, #16
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	10008200 	.word	0x10008200
 8004900:	40020880 	.word	0x40020880

08004904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800491a:	4694      	mov	ip, r2
 800491c:	4463      	add	r3, ip
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	001a      	movs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800492a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	4013      	ands	r3, r2
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}
 8004944:	1000823f 	.word	0x1000823f
 8004948:	40020940 	.word	0x40020940

0800494c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800494c:	b5b0      	push	{r4, r5, r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603a      	str	r2, [r7, #0]
 8004958:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_FLASH_Program+0x94>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_FLASH_Program+0x1a>
 8004962:	2302      	movs	r3, #2
 8004964:	e038      	b.n	80049d8 <HAL_FLASH_Program+0x8c>
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_FLASH_Program+0x94>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_FLASH_Program+0x94>)
 800496e:	2200      	movs	r2, #0
 8004970:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004972:	2517      	movs	r5, #23
 8004974:	197c      	adds	r4, r7, r5
 8004976:	23fa      	movs	r3, #250	; 0xfa
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	0018      	movs	r0, r3
 800497c:	f000 f874 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004980:	0003      	movs	r3, r0
 8004982:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004984:	197b      	adds	r3, r7, r5
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11f      	bne.n	80049cc <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d106      	bne.n	80049a0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	0008      	movs	r0, r1
 800499a:	f000 f8b3 	bl	8004b04 <FLASH_Program_DoubleWord>
 800499e:	e005      	b.n	80049ac <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f011 f9a2 	bl	8015cf0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ac:	2317      	movs	r3, #23
 80049ae:	18fc      	adds	r4, r7, r3
 80049b0:	23fa      	movs	r3, #250	; 0xfa
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 f857 	bl	8004a68 <FLASH_WaitForLastOperation>
 80049ba:	0003      	movs	r3, r0
 80049bc:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_FLASH_Program+0x98>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	43d9      	mvns	r1, r3
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_FLASH_Program+0x98>)
 80049c8:	400a      	ands	r2, r1
 80049ca:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_FLASH_Program+0x94>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80049d2:	2317      	movs	r3, #23
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	781b      	ldrb	r3, [r3, #0]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b006      	add	sp, #24
 80049de:	bdb0      	pop	{r4, r5, r7, pc}
 80049e0:	20000198 	.word	0x20000198
 80049e4:	40022000 	.word	0x40022000

080049e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_FLASH_Unlock+0x3c>)
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da0c      	bge.n	8004a16 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_FLASH_Unlock+0x3c>)
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_FLASH_Unlock+0x40>)
 8004a00:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_FLASH_Unlock+0x3c>)
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_FLASH_Unlock+0x44>)
 8004a06:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_FLASH_Unlock+0x3c>)
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da02      	bge.n	8004a16 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8004a10:	1dfb      	adds	r3, r7, #7
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	781b      	ldrb	r3, [r3, #0]
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	40022000 	.word	0x40022000
 8004a28:	45670123 	.word	0x45670123
 8004a2c:	cdef89ab 	.word	0xcdef89ab

08004a30 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_FLASH_Lock+0x34>)
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <HAL_FLASH_Lock+0x34>)
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	0609      	lsls	r1, r1, #24
 8004a46:	430a      	orrs	r2, r1
 8004a48:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_FLASH_Lock+0x34>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da02      	bge.n	8004a58 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8004a52:	1dfb      	adds	r3, r7, #7
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	781b      	ldrb	r3, [r3, #0]
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40022000 	.word	0x40022000

08004a68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8004a70:	f7fe fd3c 	bl	80034ec <HAL_GetTick>
 8004a74:	0002      	movs	r2, r0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8004a82:	e007      	b.n	8004a94 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8004a84:	f7fe fd32 	bl	80034ec <HAL_GetTick>
 8004a88:	0002      	movs	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d801      	bhi.n	8004a94 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e02a      	b.n	8004aea <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <FLASH_WaitForLastOperation+0x8c>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d1f2      	bne.n	8004a84 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <FLASH_WaitForLastOperation+0x8c>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <FLASH_WaitForLastOperation+0x90>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <FLASH_WaitForLastOperation+0x8c>)
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <FLASH_WaitForLastOperation+0x94>)
 8004aac:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <FLASH_WaitForLastOperation+0x98>)
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e015      	b.n	8004aea <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8004abe:	f7fe fd15 	bl	80034ec <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004aca:	e007      	b.n	8004adc <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8004acc:	f7fe fd0e 	bl	80034ec <HAL_GetTick>
 8004ad0:	0002      	movs	r2, r0
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d801      	bhi.n	8004adc <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e006      	b.n	8004aea <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <FLASH_WaitForLastOperation+0x8c>)
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	02db      	lsls	r3, r3, #11
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d1f1      	bne.n	8004acc <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b004      	add	sp, #16
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	40022000 	.word	0x40022000
 8004af8:	000083fa 	.word	0x000083fa
 8004afc:	000083fb 	.word	0x000083fb
 8004b00:	20000198 	.word	0x20000198

08004b04 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	603a      	str	r2, [r7, #0]
 8004b0e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <FLASH_Program_DoubleWord+0x3c>)
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <FLASH_Program_DoubleWord+0x3c>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004b22:	f3bf 8f6f 	isb	sy
}
 8004b26:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	001c      	movs	r4, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	001d      	movs	r5, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3304      	adds	r3, #4
 8004b34:	0022      	movs	r2, r4
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b40:	40022000 	.word	0x40022000

08004b44 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004b44:	b5b0      	push	{r4, r5, r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b4e:	4b35      	ldr	r3, [pc, #212]	; (8004c24 <HAL_FLASHEx_Erase+0xe0>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_FLASHEx_Erase+0x16>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e05f      	b.n	8004c1a <HAL_FLASHEx_Erase+0xd6>
 8004b5a:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_FLASHEx_Erase+0xe0>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b60:	4b30      	ldr	r3, [pc, #192]	; (8004c24 <HAL_FLASHEx_Erase+0xe0>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b66:	250f      	movs	r5, #15
 8004b68:	197c      	adds	r4, r7, r5
 8004b6a:	23fa      	movs	r3, #250	; 0xfa
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff ff7a 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004b78:	002c      	movs	r4, r5
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d145      	bne.n	8004c0e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2204      	movs	r2, #4
 8004b86:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d10d      	bne.n	8004bac <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f849 	bl	8004c2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b9a:	193c      	adds	r4, r7, r4
 8004b9c:	23fa      	movs	r3, #250	; 0xfa
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff ff61 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	7023      	strb	r3, [r4, #0]
 8004baa:	e030      	b.n	8004c0e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4252      	negs	r2, r2
 8004bb2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	e01a      	b.n	8004bf2 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f845 	bl	8004c54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bca:	250f      	movs	r5, #15
 8004bcc:	197c      	adds	r4, r7, r5
 8004bce:	23fa      	movs	r3, #250	; 0xfa
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7ff ff48 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8004bdc:	197b      	adds	r3, r7, r5
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	601a      	str	r2, [r3, #0]
          break;
 8004bea:	e00a      	b.n	8004c02 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3dc      	bcc.n	8004bbc <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_FLASHEx_Erase+0xe4>)
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <HAL_FLASHEx_Erase+0xe4>)
 8004c08:	2102      	movs	r1, #2
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_FLASHEx_Erase+0xe0>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c14:	230f      	movs	r3, #15
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	781b      	ldrb	r3, [r3, #0]
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bdb0      	pop	{r4, r5, r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	20000198 	.word	0x20000198
 8004c28:	40022000 	.word	0x40022000

08004c2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <FLASH_MassErase+0x24>)
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <FLASH_MassErase+0x24>)
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	0249      	lsls	r1, r1, #9
 8004c42:	430a      	orrs	r2, r1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	40022000 	.word	0x40022000

08004c54 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <FLASH_PageErase+0x2c>)
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <FLASH_PageErase+0x30>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <FLASH_PageErase+0x2c>)
 8004c72:	4905      	ldr	r1, [pc, #20]	; (8004c88 <FLASH_PageErase+0x34>)
 8004c74:	430a      	orrs	r2, r1
 8004c76:	615a      	str	r2, [r3, #20]
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b004      	add	sp, #16
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40022000 	.word	0x40022000
 8004c84:	fffffe07 	.word	0xfffffe07
 8004c88:	00010002 	.word	0x00010002

08004c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c9a:	e147      	b.n	8004f2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4091      	lsls	r1, r2
 8004ca6:	000a      	movs	r2, r1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <HAL_GPIO_Init+0x28>
 8004cb2:	e138      	b.n	8004f26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d005      	beq.n	8004ccc <HAL_GPIO_Init+0x40>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d130      	bne.n	8004d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	0013      	movs	r3, r2
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	0013      	movs	r3, r2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d02:	2201      	movs	r2, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
 8004d08:	0013      	movs	r3, r2
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	2201      	movs	r2, #1
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	0013      	movs	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d017      	beq.n	8004d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	409a      	lsls	r2, r3
 8004d48:	0013      	movs	r3, r2
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	0013      	movs	r3, r2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d123      	bne.n	8004dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	58d3      	ldr	r3, [r2, r3]
 8004d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2207      	movs	r2, #7
 8004d88:	4013      	ands	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	0013      	movs	r3, r2
 8004d92:	43da      	mvns	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2107      	movs	r1, #7
 8004da2:	400b      	ands	r3, r1
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	409a      	lsls	r2, r3
 8004da8:	0013      	movs	r3, r2
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	08da      	lsrs	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3208      	adds	r2, #8
 8004db8:	0092      	lsls	r2, r2, #2
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	0013      	movs	r3, r2
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	401a      	ands	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	409a      	lsls	r2, r3
 8004de4:	0013      	movs	r3, r2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	23c0      	movs	r3, #192	; 0xc0
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d100      	bne.n	8004e00 <HAL_GPIO_Init+0x174>
 8004dfe:	e092      	b.n	8004f26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004e00:	4a50      	ldr	r2, [pc, #320]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	3318      	adds	r3, #24
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	589b      	ldr	r3, [r3, r2]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2203      	movs	r2, #3
 8004e12:	4013      	ands	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	220f      	movs	r2, #15
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	0013      	movs	r3, r2
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4013      	ands	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	23a0      	movs	r3, #160	; 0xa0
 8004e28:	05db      	lsls	r3, r3, #23
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x1ca>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a45      	ldr	r2, [pc, #276]	; (8004f48 <HAL_GPIO_Init+0x2bc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x1c6>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a44      	ldr	r2, [pc, #272]	; (8004f4c <HAL_GPIO_Init+0x2c0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x1c2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a43      	ldr	r2, [pc, #268]	; (8004f50 <HAL_GPIO_Init+0x2c4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x1be>
 8004e46:	2303      	movs	r3, #3
 8004e48:	e006      	b.n	8004e58 <HAL_GPIO_Init+0x1cc>
 8004e4a:	2305      	movs	r3, #5
 8004e4c:	e004      	b.n	8004e58 <HAL_GPIO_Init+0x1cc>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_Init+0x1cc>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_GPIO_Init+0x1cc>
 8004e56:	2300      	movs	r3, #0
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	00d2      	lsls	r2, r2, #3
 8004e60:	4093      	lsls	r3, r2
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004e68:	4936      	ldr	r1, [pc, #216]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	3318      	adds	r3, #24
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e76:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	58d3      	ldr	r3, [r2, r3]
 8004e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	43da      	mvns	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	025b      	lsls	r3, r3, #9
 8004e90:	4013      	ands	r3, r2
 8004e92:	d003      	beq.n	8004e9c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e9c:	4929      	ldr	r1, [pc, #164]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004ea6:	2384      	movs	r3, #132	; 0x84
 8004ea8:	58d3      	ldr	r3, [r2, r3]
 8004eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eca:	491e      	ldr	r1, [pc, #120]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004ecc:	2284      	movs	r2, #132	; 0x84
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	43da      	mvns	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	035b      	lsls	r3, r3, #13
 8004eea:	4013      	ands	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	43da      	mvns	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	039b      	lsls	r3, r3, #14
 8004f14:	4013      	ands	r3, r2
 8004f16:	d003      	beq.n	8004f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_GPIO_Init+0x2b8>)
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	40da      	lsrs	r2, r3
 8004f34:	1e13      	subs	r3, r2, #0
 8004f36:	d000      	beq.n	8004f3a <HAL_GPIO_Init+0x2ae>
 8004f38:	e6b0      	b.n	8004c9c <HAL_GPIO_Init+0x10>
  }
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b006      	add	sp, #24
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021800 	.word	0x40021800
 8004f48:	50000400 	.word	0x50000400
 8004f4c:	50000800 	.word	0x50000800
 8004f50:	50000c00 	.word	0x50000c00

08004f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	000a      	movs	r2, r1
 8004f5e:	1cbb      	adds	r3, r7, #2
 8004f60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	1cba      	adds	r2, r7, #2
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004f6e:	230f      	movs	r3, #15
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e003      	b.n	8004f80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f78:	230f      	movs	r3, #15
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004f80:	230f      	movs	r3, #15
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	781b      	ldrb	r3, [r3, #0]
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b004      	add	sp, #16
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	0008      	movs	r0, r1
 8004f98:	0011      	movs	r1, r2
 8004f9a:	1cbb      	adds	r3, r7, #2
 8004f9c:	1c02      	adds	r2, r0, #0
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	1c7b      	adds	r3, r7, #1
 8004fa2:	1c0a      	adds	r2, r1, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fa6:	1c7b      	adds	r3, r7, #1
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fae:	1cbb      	adds	r3, r7, #2
 8004fb0:	881a      	ldrh	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb6:	e003      	b.n	8004fc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fb8:	1cbb      	adds	r3, r7, #2
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	0002      	movs	r2, r0
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	1dba      	adds	r2, r7, #6
 8004fda:	8812      	ldrh	r2, [r2, #0]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d008      	beq.n	8004ff2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004fe2:	1dba      	adds	r2, r7, #6
 8004fe4:	8812      	ldrh	r2, [r2, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004fe8:	1dbb      	adds	r3, r7, #6
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f000 f815 	bl	800501c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	1dba      	adds	r2, r7, #6
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d008      	beq.n	8005010 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005000:	1dba      	adds	r2, r7, #6
 8005002:	8812      	ldrh	r2, [r2, #0]
 8005004:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005006:	1dbb      	adds	r3, r7, #6
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	0018      	movs	r0, r3
 800500c:	f006 fcda 	bl	800b9c4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b002      	add	sp, #8
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021800 	.word	0x40021800

0800501c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	0002      	movs	r2, r0
 8005024:	1dbb      	adds	r3, r7, #6
 8005026:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	46bd      	mov	sp, r7
 800502c:	b002      	add	sp, #8
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e082      	b.n	8005148 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2241      	movs	r2, #65	; 0x41
 8005046:	5c9b      	ldrb	r3, [r3, r2]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f00d fccd 	bl	80129f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2241      	movs	r2, #65	; 0x41
 8005062:	2124      	movs	r1, #36	; 0x24
 8005064:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2101      	movs	r1, #1
 8005072:	438a      	bics	r2, r1
 8005074:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4934      	ldr	r1, [pc, #208]	; (8005150 <HAL_I2C_Init+0x120>)
 8005080:	400a      	ands	r2, r1
 8005082:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4931      	ldr	r1, [pc, #196]	; (8005154 <HAL_I2C_Init+0x124>)
 8005090:	400a      	ands	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	0209      	lsls	r1, r1, #8
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	e007      	b.n	80050be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2184      	movs	r1, #132	; 0x84
 80050b8:	0209      	lsls	r1, r1, #8
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d104      	bne.n	80050d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	491f      	ldr	r1, [pc, #124]	; (8005158 <HAL_I2C_Init+0x128>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	491a      	ldr	r1, [pc, #104]	; (8005154 <HAL_I2C_Init+0x124>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69d9      	ldr	r1, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1a      	ldr	r2, [r3, #32]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2101      	movs	r1, #1
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2241      	movs	r2, #65	; 0x41
 8005134:	2120      	movs	r1, #32
 8005136:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2242      	movs	r2, #66	; 0x42
 8005142:	2100      	movs	r1, #0
 8005144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}
 8005150:	f0ffffff 	.word	0xf0ffffff
 8005154:	ffff7fff 	.word	0xffff7fff
 8005158:	02008000 	.word	0x02008000

0800515c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	000c      	movs	r4, r1
 8005166:	0010      	movs	r0, r2
 8005168:	0019      	movs	r1, r3
 800516a:	230a      	movs	r3, #10
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	1c22      	adds	r2, r4, #0
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	2308      	movs	r3, #8
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1c02      	adds	r2, r0, #0
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	1dbb      	adds	r3, r7, #6
 800517c:	1c0a      	adds	r2, r1, #0
 800517e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2241      	movs	r2, #65	; 0x41
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d000      	beq.n	800518e <HAL_I2C_Mem_Write+0x32>
 800518c:	e10c      	b.n	80053a8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_I2C_Mem_Write+0x42>
 8005194:	232c      	movs	r3, #44	; 0x2c
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0ff      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2C_Mem_Write+0x5c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0f8      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051c0:	f7fe f994 	bl	80034ec <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	0219      	lsls	r1, r3, #8
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2319      	movs	r3, #25
 80051d4:	2201      	movs	r2, #1
 80051d6:	f000 fb0b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0e3      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2241      	movs	r2, #65	; 0x41
 80051e6:	2121      	movs	r1, #33	; 0x21
 80051e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2242      	movs	r2, #66	; 0x42
 80051ee:	2140      	movs	r1, #64	; 0x40
 80051f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	222c      	movs	r2, #44	; 0x2c
 8005202:	18ba      	adds	r2, r7, r2
 8005204:	8812      	ldrh	r2, [r2, #0]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800520e:	1dbb      	adds	r3, r7, #6
 8005210:	881c      	ldrh	r4, [r3, #0]
 8005212:	2308      	movs	r3, #8
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	230a      	movs	r3, #10
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	8819      	ldrh	r1, [r3, #0]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	0023      	movs	r3, r4
 800522a:	f000 f9f9 	bl	8005620 <I2C_RequestMemoryWrite>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d005      	beq.n	800523e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0b5      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2bff      	cmp	r3, #255	; 0xff
 8005246:	d911      	bls.n	800526c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	; 0xff
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	b2da      	uxtb	r2, r3
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	045c      	lsls	r4, r3, #17
 8005258:	230a      	movs	r3, #10
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	8819      	ldrh	r1, [r3, #0]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	0023      	movs	r3, r4
 8005266:	f000 fbf7 	bl	8005a58 <I2C_TransferConfig>
 800526a:	e012      	b.n	8005292 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	049c      	lsls	r4, r3, #18
 8005280:	230a      	movs	r3, #10
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	8819      	ldrh	r1, [r3, #0]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	2300      	movs	r3, #0
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	0023      	movs	r3, r4
 800528e:	f000 fbe3 	bl	8005a58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 fae8 	bl	800586e <I2C_WaitOnTXISFlagUntilTimeout>
 800529e:	1e03      	subs	r3, r0, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e081      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d03a      	beq.n	8005356 <HAL_I2C_Mem_Write+0x1fa>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d136      	bne.n	8005356 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	0013      	movs	r3, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	f000 fa7b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	1e03      	subs	r3, r0, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e053      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2bff      	cmp	r3, #255	; 0xff
 800530a:	d911      	bls.n	8005330 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	22ff      	movs	r2, #255	; 0xff
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	b2da      	uxtb	r2, r3
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	045c      	lsls	r4, r3, #17
 800531c:	230a      	movs	r3, #10
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	8819      	ldrh	r1, [r3, #0]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	2300      	movs	r3, #0
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	0023      	movs	r3, r4
 800532a:	f000 fb95 	bl	8005a58 <I2C_TransferConfig>
 800532e:	e012      	b.n	8005356 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533e:	b2da      	uxtb	r2, r3
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	049c      	lsls	r4, r3, #18
 8005344:	230a      	movs	r3, #10
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	8819      	ldrh	r1, [r3, #0]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	2300      	movs	r3, #0
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	0023      	movs	r3, r4
 8005352:	f000 fb81 	bl	8005a58 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d198      	bne.n	8005292 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 fac0 	bl	80058ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800536c:	1e03      	subs	r3, r0, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e01a      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2220      	movs	r2, #32
 800537a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	490b      	ldr	r1, [pc, #44]	; (80053b4 <HAL_I2C_Mem_Write+0x258>)
 8005388:	400a      	ands	r2, r1
 800538a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2241      	movs	r2, #65	; 0x41
 8005390:	2120      	movs	r1, #32
 8005392:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2242      	movs	r2, #66	; 0x42
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b007      	add	sp, #28
 80053b0:	bd90      	pop	{r4, r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	fe00e800 	.word	0xfe00e800

080053b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b089      	sub	sp, #36	; 0x24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	000c      	movs	r4, r1
 80053c2:	0010      	movs	r0, r2
 80053c4:	0019      	movs	r1, r3
 80053c6:	230a      	movs	r3, #10
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	1c22      	adds	r2, r4, #0
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	2308      	movs	r3, #8
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	1c02      	adds	r2, r0, #0
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	1dbb      	adds	r3, r7, #6
 80053d8:	1c0a      	adds	r2, r1, #0
 80053da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2241      	movs	r2, #65	; 0x41
 80053e0:	5c9b      	ldrb	r3, [r3, r2]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d000      	beq.n	80053ea <HAL_I2C_Mem_Read+0x32>
 80053e8:	e110      	b.n	800560c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_I2C_Mem_Read+0x42>
 80053f0:	232c      	movs	r3, #44	; 0x2c
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d105      	bne.n	8005406 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e103      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	5c9b      	ldrb	r3, [r3, r2]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_I2C_Mem_Read+0x5c>
 8005410:	2302      	movs	r3, #2
 8005412:	e0fc      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2240      	movs	r2, #64	; 0x40
 8005418:	2101      	movs	r1, #1
 800541a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800541c:	f7fe f866 	bl	80034ec <HAL_GetTick>
 8005420:	0003      	movs	r3, r0
 8005422:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	0219      	lsls	r1, r3, #8
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2319      	movs	r3, #25
 8005430:	2201      	movs	r2, #1
 8005432:	f000 f9dd 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005436:	1e03      	subs	r3, r0, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e0e7      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2241      	movs	r2, #65	; 0x41
 8005442:	2122      	movs	r1, #34	; 0x22
 8005444:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2242      	movs	r2, #66	; 0x42
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	222c      	movs	r2, #44	; 0x2c
 800545e:	18ba      	adds	r2, r7, r2
 8005460:	8812      	ldrh	r2, [r2, #0]
 8005462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546a:	1dbb      	adds	r3, r7, #6
 800546c:	881c      	ldrh	r4, [r3, #0]
 800546e:	2308      	movs	r3, #8
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	230a      	movs	r3, #10
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	8819      	ldrh	r1, [r3, #0]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	0023      	movs	r3, r4
 8005486:	f000 f92f 	bl	80056e8 <I2C_RequestMemoryRead>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d005      	beq.n	800549a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	2100      	movs	r1, #0
 8005494:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e0b9      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2bff      	cmp	r3, #255	; 0xff
 80054a2:	d911      	bls.n	80054c8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	22ff      	movs	r2, #255	; 0xff
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	045c      	lsls	r4, r3, #17
 80054b4:	230a      	movs	r3, #10
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	8819      	ldrh	r1, [r3, #0]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4b56      	ldr	r3, [pc, #344]	; (8005618 <HAL_I2C_Mem_Read+0x260>)
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	0023      	movs	r3, r4
 80054c2:	f000 fac9 	bl	8005a58 <I2C_TransferConfig>
 80054c6:	e012      	b.n	80054ee <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	049c      	lsls	r4, r3, #18
 80054dc:	230a      	movs	r3, #10
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	8819      	ldrh	r1, [r3, #0]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	4b4c      	ldr	r3, [pc, #304]	; (8005618 <HAL_I2C_Mem_Read+0x260>)
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	0023      	movs	r3, r4
 80054ea:	f000 fab5 	bl	8005a58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	0013      	movs	r3, r2
 80054f8:	2200      	movs	r2, #0
 80054fa:	2104      	movs	r1, #4
 80054fc:	f000 f978 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005500:	1e03      	subs	r3, r0, #0
 8005502:	d001      	beq.n	8005508 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e082      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03a      	beq.n	80055ba <HAL_I2C_Mem_Read+0x202>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d136      	bne.n	80055ba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800554c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	0013      	movs	r3, r2
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	f000 f949 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d001      	beq.n	8005566 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e053      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2bff      	cmp	r3, #255	; 0xff
 800556e:	d911      	bls.n	8005594 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557a:	b2da      	uxtb	r2, r3
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	045c      	lsls	r4, r3, #17
 8005580:	230a      	movs	r3, #10
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	8819      	ldrh	r1, [r3, #0]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	2300      	movs	r3, #0
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	0023      	movs	r3, r4
 800558e:	f000 fa63 	bl	8005a58 <I2C_TransferConfig>
 8005592:	e012      	b.n	80055ba <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	049c      	lsls	r4, r3, #18
 80055a8:	230a      	movs	r3, #10
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	8819      	ldrh	r1, [r3, #0]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	2300      	movs	r3, #0
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	0023      	movs	r3, r4
 80055b6:	f000 fa4f 	bl	8005a58 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d194      	bne.n	80054ee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 f98e 	bl	80058ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d0:	1e03      	subs	r3, r0, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e01a      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2220      	movs	r2, #32
 80055de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	490c      	ldr	r1, [pc, #48]	; (800561c <HAL_I2C_Mem_Read+0x264>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2241      	movs	r2, #65	; 0x41
 80055f4:	2120      	movs	r1, #32
 80055f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	; 0x42
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	0018      	movs	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	b007      	add	sp, #28
 8005614:	bd90      	pop	{r4, r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	80002400 	.word	0x80002400
 800561c:	fe00e800 	.word	0xfe00e800

08005620 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	000c      	movs	r4, r1
 800562a:	0010      	movs	r0, r2
 800562c:	0019      	movs	r1, r3
 800562e:	250a      	movs	r5, #10
 8005630:	197b      	adds	r3, r7, r5
 8005632:	1c22      	adds	r2, r4, #0
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	2308      	movs	r3, #8
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	1c02      	adds	r2, r0, #0
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	1dbb      	adds	r3, r7, #6
 8005640:	1c0a      	adds	r2, r1, #0
 8005642:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005644:	1dbb      	adds	r3, r7, #6
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	045c      	lsls	r4, r3, #17
 800564e:	197b      	adds	r3, r7, r5
 8005650:	8819      	ldrh	r1, [r3, #0]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <I2C_RequestMemoryWrite+0xc4>)
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	0023      	movs	r3, r4
 800565a:	f000 f9fd 	bl	8005a58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005660:	6a39      	ldr	r1, [r7, #32]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 f902 	bl	800586e <I2C_WaitOnTXISFlagUntilTimeout>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d001      	beq.n	8005672 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e033      	b.n	80056da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005672:	1dbb      	adds	r3, r7, #6
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800567a:	2308      	movs	r3, #8
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
 8005688:	e019      	b.n	80056be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800568a:	2308      	movs	r3, #8
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	b29b      	uxth	r3, r3
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6a39      	ldr	r1, [r7, #32]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f8e3 	bl	800586e <I2C_WaitOnTXISFlagUntilTimeout>
 80056a8:	1e03      	subs	r3, r0, #0
 80056aa:	d001      	beq.n	80056b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e014      	b.n	80056da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	2308      	movs	r3, #8
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	0013      	movs	r3, r2
 80056c8:	2200      	movs	r2, #0
 80056ca:	2180      	movs	r1, #128	; 0x80
 80056cc:	f000 f890 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80056d0:	1e03      	subs	r3, r0, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	80002000 	.word	0x80002000

080056e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80056e8:	b5b0      	push	{r4, r5, r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	000c      	movs	r4, r1
 80056f2:	0010      	movs	r0, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	250a      	movs	r5, #10
 80056f8:	197b      	adds	r3, r7, r5
 80056fa:	1c22      	adds	r2, r4, #0
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	2308      	movs	r3, #8
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	1c02      	adds	r2, r0, #0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	1dbb      	adds	r3, r7, #6
 8005708:	1c0a      	adds	r2, r1, #0
 800570a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	197b      	adds	r3, r7, r5
 8005714:	8819      	ldrh	r1, [r3, #0]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <I2C_RequestMemoryRead+0xc0>)
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2300      	movs	r3, #0
 800571e:	f000 f99b 	bl	8005a58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	6a39      	ldr	r1, [r7, #32]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 f8a0 	bl	800586e <I2C_WaitOnTXISFlagUntilTimeout>
 800572e:	1e03      	subs	r3, r0, #0
 8005730:	d001      	beq.n	8005736 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e033      	b.n	800579e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005736:	1dbb      	adds	r3, r7, #6
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d107      	bne.n	800574e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800573e:	2308      	movs	r3, #8
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28
 800574c:	e019      	b.n	8005782 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800574e:	2308      	movs	r3, #8
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b29b      	uxth	r3, r3
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	6a39      	ldr	r1, [r7, #32]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 f881 	bl	800586e <I2C_WaitOnTXISFlagUntilTimeout>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d001      	beq.n	8005774 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e014      	b.n	800579e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	2308      	movs	r3, #8
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	0013      	movs	r3, r2
 800578c:	2200      	movs	r2, #0
 800578e:	2140      	movs	r1, #64	; 0x40
 8005790:	f000 f82e 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005794:	1e03      	subs	r3, r0, #0
 8005796:	d001      	beq.n	800579c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bdb0      	pop	{r4, r5, r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	80002000 	.word	0x80002000

080057ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2202      	movs	r2, #2
 80057bc:	4013      	ands	r3, r2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d103      	bne.n	80057ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d007      	beq.n	80057e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2101      	movs	r1, #1
 80057e4:	430a      	orrs	r2, r1
 80057e6:	619a      	str	r2, [r3, #24]
  }
}
 80057e8:	46c0      	nop			; (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b002      	add	sp, #8
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	1dfb      	adds	r3, r7, #7
 80057fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e021      	b.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	d01e      	beq.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005808:	f7fd fe70 	bl	80034ec <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	2220      	movs	r2, #32
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2241      	movs	r2, #65	; 0x41
 800582e:	2120      	movs	r1, #32
 8005830:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2242      	movs	r2, #66	; 0x42
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e00f      	b.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	425a      	negs	r2, r3
 8005856:	4153      	adcs	r3, r2
 8005858:	b2db      	uxtb	r3, r3
 800585a:	001a      	movs	r2, r3
 800585c:	1dfb      	adds	r3, r7, #7
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d0ce      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bd80      	pop	{r7, pc}

0800586e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800587a:	e02b      	b.n	80058d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 f86e 	bl	8005964 <I2C_IsAcknowledgeFailed>
 8005888:	1e03      	subs	r3, r0, #0
 800588a:	d001      	beq.n	8005890 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e029      	b.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3301      	adds	r3, #1
 8005894:	d01e      	beq.n	80058d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fd fe29 	bl	80034ec <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b0:	2220      	movs	r2, #32
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2241      	movs	r2, #65	; 0x41
 80058bc:	2120      	movs	r1, #32
 80058be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2242      	movs	r2, #66	; 0x42
 80058c4:	2100      	movs	r1, #0
 80058c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	2100      	movs	r1, #0
 80058ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e007      	b.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2202      	movs	r2, #2
 80058dc:	4013      	ands	r3, r2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d1cc      	bne.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b004      	add	sp, #16
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f8:	e028      	b.n	800594c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 f82f 	bl	8005964 <I2C_IsAcknowledgeFailed>
 8005906:	1e03      	subs	r3, r0, #0
 8005908:	d001      	beq.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e026      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fd fded 	bl	80034ec <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d113      	bne.n	800594c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	2220      	movs	r2, #32
 800592a:	431a      	orrs	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2241      	movs	r2, #65	; 0x41
 8005934:	2120      	movs	r1, #32
 8005936:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2242      	movs	r2, #66	; 0x42
 800593c:	2100      	movs	r1, #0
 800593e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e007      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2220      	movs	r2, #32
 8005954:	4013      	ands	r3, r2
 8005956:	2b20      	cmp	r3, #32
 8005958:	d1cf      	bne.n	80058fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b004      	add	sp, #16
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2210      	movs	r2, #16
 8005978:	4013      	ands	r3, r2
 800597a:	2b10      	cmp	r3, #16
 800597c:	d164      	bne.n	8005a48 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	049b      	lsls	r3, r3, #18
 8005988:	401a      	ands	r2, r3
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	049b      	lsls	r3, r3, #18
 800598e:	429a      	cmp	r2, r3
 8005990:	d02b      	beq.n	80059ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	01c9      	lsls	r1, r1, #7
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059a4:	e021      	b.n	80059ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	3301      	adds	r3, #1
 80059aa:	d01e      	beq.n	80059ea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fd fd9e 	bl	80034ec <HAL_GetTick>
 80059b0:	0002      	movs	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <I2C_IsAcknowledgeFailed+0x5e>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d113      	bne.n	80059ea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	2220      	movs	r2, #32
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2241      	movs	r2, #65	; 0x41
 80059d2:	2120      	movs	r1, #32
 80059d4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2242      	movs	r2, #66	; 0x42
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2240      	movs	r2, #64	; 0x40
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e02f      	b.n	8005a4a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2220      	movs	r2, #32
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d1d6      	bne.n	80059a6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2210      	movs	r2, #16
 80059fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2220      	movs	r2, #32
 8005a06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7ff fece 	bl	80057ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	490e      	ldr	r1, [pc, #56]	; (8005a54 <I2C_IsAcknowledgeFailed+0xf0>)
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	2204      	movs	r2, #4
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2241      	movs	r2, #65	; 0x41
 8005a30:	2120      	movs	r1, #32
 8005a32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2242      	movs	r2, #66	; 0x42
 8005a38:	2100      	movs	r1, #0
 8005a3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b004      	add	sp, #16
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	fe00e800 	.word	0xfe00e800

08005a58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	0008      	movs	r0, r1
 8005a62:	0011      	movs	r1, r2
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	240a      	movs	r4, #10
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	1c02      	adds	r2, r0, #0
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	2009      	movs	r0, #9
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	1c0a      	adds	r2, r1, #0
 8005a74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	0d51      	lsrs	r1, r2, #21
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	00d2      	lsls	r2, r2, #3
 8005a84:	400a      	ands	r2, r1
 8005a86:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <I2C_TransferConfig+0x68>)
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	43d2      	mvns	r2, r2
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	0011      	movs	r1, r2
 8005a90:	193b      	adds	r3, r7, r4
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	059b      	lsls	r3, r3, #22
 8005a96:	0d9a      	lsrs	r2, r3, #22
 8005a98:	183b      	adds	r3, r7, r0
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	0418      	lsls	r0, r3, #16
 8005a9e:	23ff      	movs	r3, #255	; 0xff
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	4003      	ands	r3, r0
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b005      	add	sp, #20
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	03ff63ff 	.word	0x03ff63ff

08005ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2241      	movs	r2, #65	; 0x41
 8005ad2:	5c9b      	ldrb	r3, [r3, r2]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d138      	bne.n	8005b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2240      	movs	r2, #64	; 0x40
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e032      	b.n	8005b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2240      	movs	r2, #64	; 0x40
 8005aec:	2101      	movs	r1, #1
 8005aee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2241      	movs	r2, #65	; 0x41
 8005af4:	2124      	movs	r1, #36	; 0x24
 8005af6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2101      	movs	r1, #1
 8005b04:	438a      	bics	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4911      	ldr	r1, [pc, #68]	; (8005b58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b14:	400a      	ands	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2101      	movs	r1, #1
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2241      	movs	r2, #65	; 0x41
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2240      	movs	r2, #64	; 0x40
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b002      	add	sp, #8
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	ffffefff 	.word	0xffffefff

08005b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2241      	movs	r2, #65	; 0x41
 8005b6a:	5c9b      	ldrb	r3, [r3, r2]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d139      	bne.n	8005be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2240      	movs	r2, #64	; 0x40
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e033      	b.n	8005be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2240      	movs	r2, #64	; 0x40
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2241      	movs	r2, #65	; 0x41
 8005b8c:	2124      	movs	r1, #36	; 0x24
 8005b8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2241      	movs	r2, #65	; 0x41
 8005bd6:	2120      	movs	r1, #32
 8005bd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	2100      	movs	r1, #0
 8005be0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b004      	add	sp, #16
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	fffff0ff 	.word	0xfffff0ff

08005bf4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	0049      	lsls	r1, r1, #1
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40007000 	.word	0x40007000

08005c10 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	000a      	movs	r2, r1
 8005c1a:	1cfb      	adds	r3, r7, #3
 8005c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d009      	beq.n	8005c38 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2207      	movs	r2, #7
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c30:	2101      	movs	r1, #1
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e005      	b.n	8005c44 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <HAL_PWR_EnterSTOPMode+0x68>)
 8005c3e:	2107      	movs	r1, #7
 8005c40:	438a      	bics	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005c50:	1cfb      	adds	r3, r7, #3
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005c58:	bf30      	wfi
 8005c5a:	e002      	b.n	8005c62 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005c5c:	bf40      	sev
    __WFE();
 8005c5e:	bf20      	wfe
    __WFE();
 8005c60:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005c68:	2104      	movs	r1, #4
 8005c6a:	438a      	bics	r2, r1
 8005c6c:	611a      	str	r2, [r3, #16]
}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b002      	add	sp, #8
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	e000ed00 	.word	0xe000ed00

08005c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	4b17      	ldr	r3, [pc, #92]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d11f      	bne.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005ca4:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	0013      	movs	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	189b      	adds	r3, r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4912      	ldr	r1, [pc, #72]	; (8005cfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7fa fa2e 	bl	8000114 <__udivsi3>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cbe:	e008      	b.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e001      	b.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e009      	b.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d0ed      	beq.n	8005cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	fffff9ff 	.word	0xfffff9ff
 8005cf8:	20000088 	.word	0x20000088
 8005cfc:	000f4240 	.word	0x000f4240

08005d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e2f9      	b.n	8006306 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <HAL_RCC_OscConfig+0x1e>
 8005d1c:	e07c      	b.n	8005e18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1e:	4bc3      	ldr	r3, [pc, #780]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2238      	movs	r2, #56	; 0x38
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d28:	4bc0      	ldr	r3, [pc, #768]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	4013      	ands	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d102      	bne.n	8005d3e <HAL_RCC_OscConfig+0x3e>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	4bb9      	ldr	r3, [pc, #740]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d062      	beq.n	8005e16 <HAL_RCC_OscConfig+0x116>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15e      	bne.n	8005e16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e2d4      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	025b      	lsls	r3, r3, #9
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_OscConfig+0x78>
 8005d68:	4bb0      	ldr	r3, [pc, #704]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4baf      	ldr	r3, [pc, #700]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	0249      	lsls	r1, r1, #9
 8005d72:	430a      	orrs	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	e020      	b.n	8005dba <HAL_RCC_OscConfig+0xba>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	23a0      	movs	r3, #160	; 0xa0
 8005d7e:	02db      	lsls	r3, r3, #11
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d10e      	bne.n	8005da2 <HAL_RCC_OscConfig+0xa2>
 8005d84:	4ba9      	ldr	r3, [pc, #676]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4ba8      	ldr	r3, [pc, #672]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	02c9      	lsls	r1, r1, #11
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	4ba6      	ldr	r3, [pc, #664]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4ba5      	ldr	r3, [pc, #660]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005d98:	2180      	movs	r1, #128	; 0x80
 8005d9a:	0249      	lsls	r1, r1, #9
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e00b      	b.n	8005dba <HAL_RCC_OscConfig+0xba>
 8005da2:	4ba2      	ldr	r3, [pc, #648]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4ba1      	ldr	r3, [pc, #644]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005da8:	49a1      	ldr	r1, [pc, #644]	; (8006030 <HAL_RCC_OscConfig+0x330>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4b9f      	ldr	r3, [pc, #636]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b9e      	ldr	r3, [pc, #632]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005db4:	499f      	ldr	r1, [pc, #636]	; (8006034 <HAL_RCC_OscConfig+0x334>)
 8005db6:	400a      	ands	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d014      	beq.n	8005dec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fd fb93 	bl	80034ec <HAL_GetTick>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fd fb8e 	bl	80034ec <HAL_GetTick>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e293      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dde:	4b93      	ldr	r3, [pc, #588]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	2380      	movs	r3, #128	; 0x80
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	4013      	ands	r3, r2
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xcc>
 8005dea:	e015      	b.n	8005e18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fd fb7e 	bl	80034ec <HAL_GetTick>
 8005df0:	0003      	movs	r3, r0
 8005df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df6:	f7fd fb79 	bl	80034ec <HAL_GetTick>
 8005dfa:	0002      	movs	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	; 0x64
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e27e      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e08:	4b88      	ldr	r3, [pc, #544]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	4013      	ands	r3, r2
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCC_OscConfig+0xf6>
 8005e14:	e000      	b.n	8005e18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d100      	bne.n	8005e24 <HAL_RCC_OscConfig+0x124>
 8005e22:	e099      	b.n	8005f58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e24:	4b81      	ldr	r3, [pc, #516]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2238      	movs	r2, #56	; 0x38
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e2e:	4b7f      	ldr	r3, [pc, #508]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2203      	movs	r2, #3
 8005e34:	4013      	ands	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCC_OscConfig+0x144>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d002      	beq.n	8005e4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d135      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4a:	4b78      	ldr	r3, [pc, #480]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4013      	ands	r3, r2
 8005e54:	d005      	beq.n	8005e62 <HAL_RCC_OscConfig+0x162>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e251      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e62:	4b72      	ldr	r3, [pc, #456]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a74      	ldr	r2, [pc, #464]	; (8006038 <HAL_RCC_OscConfig+0x338>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	4b6e      	ldr	r3, [pc, #440]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d112      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005e7e:	4b6b      	ldr	r3, [pc, #428]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6e      	ldr	r2, [pc, #440]	; (800603c <HAL_RCC_OscConfig+0x33c>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	4b67      	ldr	r3, [pc, #412]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005e92:	4b66      	ldr	r3, [pc, #408]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	0adb      	lsrs	r3, r3, #11
 8005e98:	2207      	movs	r2, #7
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	4a68      	ldr	r2, [pc, #416]	; (8006040 <HAL_RCC_OscConfig+0x340>)
 8005e9e:	40da      	lsrs	r2, r3
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <HAL_RCC_OscConfig+0x344>)
 8005ea2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ea4:	4b68      	ldr	r3, [pc, #416]	; (8006048 <HAL_RCC_OscConfig+0x348>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7fd fac3 	bl	8003434 <HAL_InitTick>
 8005eae:	1e03      	subs	r3, r0, #0
 8005eb0:	d051      	beq.n	8005f56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e227      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d030      	beq.n	8005f20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ebe:	4b5b      	ldr	r3, [pc, #364]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5e      	ldr	r2, [pc, #376]	; (800603c <HAL_RCC_OscConfig+0x33c>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	0019      	movs	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	4b57      	ldr	r3, [pc, #348]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005ed2:	4b56      	ldr	r3, [pc, #344]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b55      	ldr	r3, [pc, #340]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	0049      	lsls	r1, r1, #1
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fb04 	bl	80034ec <HAL_GetTick>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eea:	f7fd faff 	bl	80034ec <HAL_GetTick>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e204      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005efc:	4b4b      	ldr	r3, [pc, #300]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4013      	ands	r3, r2
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f08:	4b48      	ldr	r3, [pc, #288]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a4a      	ldr	r2, [pc, #296]	; (8006038 <HAL_RCC_OscConfig+0x338>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	4b44      	ldr	r3, [pc, #272]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	e01b      	b.n	8005f58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005f20:	4b42      	ldr	r3, [pc, #264]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b41      	ldr	r3, [pc, #260]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f26:	4949      	ldr	r1, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x34c>)
 8005f28:	400a      	ands	r2, r1
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fd fade 	bl	80034ec <HAL_GetTick>
 8005f30:	0003      	movs	r3, r0
 8005f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fd fad9 	bl	80034ec <HAL_GetTick>
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1de      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f48:	4b38      	ldr	r3, [pc, #224]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4013      	ands	r3, r2
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x236>
 8005f54:	e000      	b.n	8005f58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d047      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005f62:	4b32      	ldr	r3, [pc, #200]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2238      	movs	r2, #56	; 0x38
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b18      	cmp	r3, #24
 8005f6c:	d10a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005f6e:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	2202      	movs	r2, #2
 8005f74:	4013      	ands	r3, r2
 8005f76:	d03c      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2f2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d138      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e1c0      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d019      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005f8c:	4b27      	ldr	r3, [pc, #156]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f90:	4b26      	ldr	r3, [pc, #152]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005f92:	2101      	movs	r1, #1
 8005f94:	430a      	orrs	r2, r1
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd faa8 	bl	80034ec <HAL_GetTick>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa2:	f7fd faa3 	bl	80034ec <HAL_GetTick>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e1a8      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb8:	2202      	movs	r2, #2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d0f1      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x2a2>
 8005fbe:	e018      	b.n	8005ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	438a      	bics	r2, r1
 8005fca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd fa8e 	bl	80034ec <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd6:	f7fd fa89 	bl	80034ec <HAL_GetTick>
 8005fda:	0002      	movs	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e18e      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	2202      	movs	r2, #2
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d1f1      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <HAL_RCC_OscConfig+0x2fe>
 8005ffc:	e0c6      	b.n	800618c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffe:	231f      	movs	r3, #31
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2238      	movs	r2, #56	; 0x38
 800600c:	4013      	ands	r3, r2
 800600e:	2b20      	cmp	r3, #32
 8006010:	d11e      	bne.n	8006050 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCC_OscConfig+0x32c>)
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	2202      	movs	r2, #2
 8006018:	4013      	ands	r3, r2
 800601a:	d100      	bne.n	800601e <HAL_RCC_OscConfig+0x31e>
 800601c:	e0b6      	b.n	800618c <HAL_RCC_OscConfig+0x48c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d000      	beq.n	8006028 <HAL_RCC_OscConfig+0x328>
 8006026:	e0b1      	b.n	800618c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e16c      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
 800602c:	40021000 	.word	0x40021000
 8006030:	fffeffff 	.word	0xfffeffff
 8006034:	fffbffff 	.word	0xfffbffff
 8006038:	ffff80ff 	.word	0xffff80ff
 800603c:	ffffc7ff 	.word	0xffffc7ff
 8006040:	00f42400 	.word	0x00f42400
 8006044:	20000088 	.word	0x20000088
 8006048:	20000000 	.word	0x20000000
 800604c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006050:	4baf      	ldr	r3, [pc, #700]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	055b      	lsls	r3, r3, #21
 8006058:	4013      	ands	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_RCC_OscConfig+0x360>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_RCC_OscConfig+0x362>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d011      	beq.n	800608a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006066:	4baa      	ldr	r3, [pc, #680]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800606a:	4ba9      	ldr	r3, [pc, #676]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	0549      	lsls	r1, r1, #21
 8006070:	430a      	orrs	r2, r1
 8006072:	63da      	str	r2, [r3, #60]	; 0x3c
 8006074:	4ba6      	ldr	r3, [pc, #664]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	055b      	lsls	r3, r3, #21
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006082:	231f      	movs	r3, #31
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	2201      	movs	r2, #1
 8006088:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800608a:	4ba2      	ldr	r3, [pc, #648]	; (8006314 <HAL_RCC_OscConfig+0x614>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4013      	ands	r3, r2
 8006094:	d11a      	bne.n	80060cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006096:	4b9f      	ldr	r3, [pc, #636]	; (8006314 <HAL_RCC_OscConfig+0x614>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b9e      	ldr	r3, [pc, #632]	; (8006314 <HAL_RCC_OscConfig+0x614>)
 800609c:	2180      	movs	r1, #128	; 0x80
 800609e:	0049      	lsls	r1, r1, #1
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80060a4:	f7fd fa22 	bl	80034ec <HAL_GetTick>
 80060a8:	0003      	movs	r3, r0
 80060aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ae:	f7fd fa1d 	bl	80034ec <HAL_GetTick>
 80060b2:	0002      	movs	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e122      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c0:	4b94      	ldr	r3, [pc, #592]	; (8006314 <HAL_RCC_OscConfig+0x614>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4013      	ands	r3, r2
 80060ca:	d0f0      	beq.n	80060ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d106      	bne.n	80060e2 <HAL_RCC_OscConfig+0x3e2>
 80060d4:	4b8e      	ldr	r3, [pc, #568]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060d8:	4b8d      	ldr	r3, [pc, #564]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060da:	2101      	movs	r1, #1
 80060dc:	430a      	orrs	r2, r1
 80060de:	65da      	str	r2, [r3, #92]	; 0x5c
 80060e0:	e01c      	b.n	800611c <HAL_RCC_OscConfig+0x41c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0x404>
 80060ea:	4b89      	ldr	r3, [pc, #548]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ee:	4b88      	ldr	r3, [pc, #544]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060f0:	2104      	movs	r1, #4
 80060f2:	430a      	orrs	r2, r1
 80060f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80060f6:	4b86      	ldr	r3, [pc, #536]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060fa:	4b85      	ldr	r3, [pc, #532]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80060fc:	2101      	movs	r1, #1
 80060fe:	430a      	orrs	r2, r1
 8006100:	65da      	str	r2, [r3, #92]	; 0x5c
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0x41c>
 8006104:	4b82      	ldr	r3, [pc, #520]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006108:	4b81      	ldr	r3, [pc, #516]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800610a:	2101      	movs	r1, #1
 800610c:	438a      	bics	r2, r1
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006110:	4b7f      	ldr	r3, [pc, #508]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006114:	4b7e      	ldr	r3, [pc, #504]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006116:	2104      	movs	r1, #4
 8006118:	438a      	bics	r2, r1
 800611a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d014      	beq.n	800614e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fd f9e2 	bl	80034ec <HAL_GetTick>
 8006128:	0003      	movs	r3, r0
 800612a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612c:	e009      	b.n	8006142 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fd f9dd 	bl	80034ec <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	4a77      	ldr	r2, [pc, #476]	; (8006318 <HAL_RCC_OscConfig+0x618>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0e1      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006142:	4b73      	ldr	r3, [pc, #460]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	2202      	movs	r2, #2
 8006148:	4013      	ands	r3, r2
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x42e>
 800614c:	e013      	b.n	8006176 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fd f9cd 	bl	80034ec <HAL_GetTick>
 8006152:	0003      	movs	r3, r0
 8006154:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006156:	e009      	b.n	800616c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006158:	f7fd f9c8 	bl	80034ec <HAL_GetTick>
 800615c:	0002      	movs	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	4a6d      	ldr	r2, [pc, #436]	; (8006318 <HAL_RCC_OscConfig+0x618>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0cc      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800616c:	4b68      	ldr	r3, [pc, #416]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	2202      	movs	r2, #2
 8006172:	4013      	ands	r3, r2
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006176:	231f      	movs	r3, #31
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d105      	bne.n	800618c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006180:	4b63      	ldr	r3, [pc, #396]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006184:	4b62      	ldr	r3, [pc, #392]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006186:	4965      	ldr	r1, [pc, #404]	; (800631c <HAL_RCC_OscConfig+0x61c>)
 8006188:	400a      	ands	r2, r1
 800618a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d100      	bne.n	8006196 <HAL_RCC_OscConfig+0x496>
 8006194:	e0b6      	b.n	8006304 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006196:	4b5e      	ldr	r3, [pc, #376]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2238      	movs	r2, #56	; 0x38
 800619c:	4013      	ands	r3, r2
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d100      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4a4>
 80061a2:	e07e      	b.n	80062a2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d153      	bne.n	8006254 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ac:	4b58      	ldr	r3, [pc, #352]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b57      	ldr	r3, [pc, #348]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80061b2:	495b      	ldr	r1, [pc, #364]	; (8006320 <HAL_RCC_OscConfig+0x620>)
 80061b4:	400a      	ands	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fd f998 	bl	80034ec <HAL_GetTick>
 80061bc:	0003      	movs	r3, r0
 80061be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c2:	f7fd f993 	bl	80034ec <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e098      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d4:	4b4e      	ldr	r3, [pc, #312]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	049b      	lsls	r3, r3, #18
 80061dc:	4013      	ands	r3, r2
 80061de:	d1f0      	bne.n	80061c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e0:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a4f      	ldr	r2, [pc, #316]	; (8006324 <HAL_RCC_OscConfig+0x624>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	0019      	movs	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1a      	ldr	r2, [r3, #32]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	431a      	orrs	r2, r3
 8006208:	4b41      	ldr	r3, [pc, #260]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800620a:	430a      	orrs	r2, r1
 800620c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800620e:	4b40      	ldr	r3, [pc, #256]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	0449      	lsls	r1, r1, #17
 8006218:	430a      	orrs	r2, r1
 800621a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800621c:	4b3c      	ldr	r3, [pc, #240]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	0549      	lsls	r1, r1, #21
 8006226:	430a      	orrs	r2, r1
 8006228:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fd f95f 	bl	80034ec <HAL_GetTick>
 800622e:	0003      	movs	r3, r0
 8006230:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fd f95a 	bl	80034ec <HAL_GetTick>
 8006238:	0002      	movs	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e05f      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006246:	4b32      	ldr	r3, [pc, #200]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	049b      	lsls	r3, r3, #18
 800624e:	4013      	ands	r3, r2
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x534>
 8006252:	e057      	b.n	8006304 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006254:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800625a:	4931      	ldr	r1, [pc, #196]	; (8006320 <HAL_RCC_OscConfig+0x620>)
 800625c:	400a      	ands	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006260:	4b2b      	ldr	r3, [pc, #172]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006266:	2103      	movs	r1, #3
 8006268:	438a      	bics	r2, r1
 800626a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	4b27      	ldr	r3, [pc, #156]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006272:	492d      	ldr	r1, [pc, #180]	; (8006328 <HAL_RCC_OscConfig+0x628>)
 8006274:	400a      	ands	r2, r1
 8006276:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fd f938 	bl	80034ec <HAL_GetTick>
 800627c:	0003      	movs	r3, r0
 800627e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006282:	f7fd f933 	bl	80034ec <HAL_GetTick>
 8006286:	0002      	movs	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e038      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006294:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	049b      	lsls	r3, r3, #18
 800629c:	4013      	ands	r3, r2
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x582>
 80062a0:	e030      	b.n	8006304 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e02b      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <HAL_RCC_OscConfig+0x610>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2203      	movs	r2, #3
 80062b8:	401a      	ands	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d11e      	bne.n	8006300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2270      	movs	r2, #112	; 0x70
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d117      	bne.n	8006300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	23fe      	movs	r3, #254	; 0xfe
 80062d4:	01db      	lsls	r3, r3, #7
 80062d6:	401a      	ands	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d10e      	bne.n	8006300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	23f8      	movs	r3, #248	; 0xf8
 80062e6:	039b      	lsls	r3, r3, #14
 80062e8:	401a      	ands	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	0f5b      	lsrs	r3, r3, #29
 80062f6:	075a      	lsls	r2, r3, #29
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b008      	add	sp, #32
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	40021000 	.word	0x40021000
 8006314:	40007000 	.word	0x40007000
 8006318:	00001388 	.word	0x00001388
 800631c:	efffffff 	.word	0xefffffff
 8006320:	feffffff 	.word	0xfeffffff
 8006324:	1fc1808c 	.word	0x1fc1808c
 8006328:	effeffff 	.word	0xeffeffff

0800632c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0e9      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006340:	4b76      	ldr	r3, [pc, #472]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2207      	movs	r2, #7
 8006346:	4013      	ands	r3, r2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d91e      	bls.n	800638c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b73      	ldr	r3, [pc, #460]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2207      	movs	r2, #7
 8006354:	4393      	bics	r3, r2
 8006356:	0019      	movs	r1, r3
 8006358:	4b70      	ldr	r3, [pc, #448]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006360:	f7fd f8c4 	bl	80034ec <HAL_GetTick>
 8006364:	0003      	movs	r3, r0
 8006366:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006368:	e009      	b.n	800637e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800636a:	f7fd f8bf 	bl	80034ec <HAL_GetTick>
 800636e:	0002      	movs	r2, r0
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	4a6a      	ldr	r2, [pc, #424]	; (8006520 <HAL_RCC_ClockConfig+0x1f4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e0ca      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800637e:	4b67      	ldr	r3, [pc, #412]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2207      	movs	r2, #7
 8006384:	4013      	ands	r3, r2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d1ee      	bne.n	800636a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2202      	movs	r2, #2
 8006392:	4013      	ands	r3, r2
 8006394:	d015      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2204      	movs	r2, #4
 800639c:	4013      	ands	r3, r2
 800639e:	d006      	beq.n	80063ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80063a0:	4b60      	ldr	r3, [pc, #384]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	4b5f      	ldr	r3, [pc, #380]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063a6:	21e0      	movs	r1, #224	; 0xe0
 80063a8:	01c9      	lsls	r1, r1, #7
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ae:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4a5d      	ldr	r2, [pc, #372]	; (8006528 <HAL_RCC_ClockConfig+0x1fc>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	0019      	movs	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	4b59      	ldr	r3, [pc, #356]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	4013      	ands	r3, r2
 80063ca:	d057      	beq.n	800647c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d4:	4b53      	ldr	r3, [pc, #332]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	029b      	lsls	r3, r3, #10
 80063dc:	4013      	ands	r3, r2
 80063de:	d12b      	bne.n	8006438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e097      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d107      	bne.n	80063fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ec:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	049b      	lsls	r3, r3, #18
 80063f4:	4013      	ands	r3, r2
 80063f6:	d11f      	bne.n	8006438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e08b      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006404:	4b47      	ldr	r3, [pc, #284]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4013      	ands	r3, r2
 800640e:	d113      	bne.n	8006438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e07f      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d106      	bne.n	800642a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800641c:	4b41      	ldr	r3, [pc, #260]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	2202      	movs	r2, #2
 8006422:	4013      	ands	r3, r2
 8006424:	d108      	bne.n	8006438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e074      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642a:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	2202      	movs	r2, #2
 8006430:	4013      	ands	r3, r2
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e06d      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006438:	4b3a      	ldr	r3, [pc, #232]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2207      	movs	r2, #7
 800643e:	4393      	bics	r3, r2
 8006440:	0019      	movs	r1, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644c:	f7fd f84e 	bl	80034ec <HAL_GetTick>
 8006450:	0003      	movs	r3, r0
 8006452:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006454:	e009      	b.n	800646a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006456:	f7fd f849 	bl	80034ec <HAL_GetTick>
 800645a:	0002      	movs	r2, r0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <HAL_RCC_ClockConfig+0x1f4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e054      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646a:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2238      	movs	r2, #56	; 0x38
 8006470:	401a      	ands	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	429a      	cmp	r2, r3
 800647a:	d1ec      	bne.n	8006456 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800647c:	4b27      	ldr	r3, [pc, #156]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2207      	movs	r2, #7
 8006482:	4013      	ands	r3, r2
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d21e      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2207      	movs	r2, #7
 8006490:	4393      	bics	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	4b21      	ldr	r3, [pc, #132]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800649c:	f7fd f826 	bl	80034ec <HAL_GetTick>
 80064a0:	0003      	movs	r3, r0
 80064a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064a4:	e009      	b.n	80064ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a6:	f7fd f821 	bl	80034ec <HAL_GetTick>
 80064aa:	0002      	movs	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <HAL_RCC_ClockConfig+0x1f4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e02c      	b.n	8006514 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <HAL_RCC_ClockConfig+0x1f0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2207      	movs	r2, #7
 80064c0:	4013      	ands	r3, r2
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1ee      	bne.n	80064a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2204      	movs	r2, #4
 80064ce:	4013      	ands	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4a15      	ldr	r2, [pc, #84]	; (800652c <HAL_RCC_ClockConfig+0x200>)
 80064d8:	4013      	ands	r3, r2
 80064da:	0019      	movs	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	4b10      	ldr	r3, [pc, #64]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80064e2:	430a      	orrs	r2, r1
 80064e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80064e6:	f000 f829 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80064ea:	0001      	movs	r1, r0
 80064ec:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <HAL_RCC_ClockConfig+0x1f8>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	220f      	movs	r2, #15
 80064f4:	401a      	ands	r2, r3
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <HAL_RCC_ClockConfig+0x204>)
 80064f8:	0092      	lsls	r2, r2, #2
 80064fa:	58d3      	ldr	r3, [r2, r3]
 80064fc:	221f      	movs	r2, #31
 80064fe:	4013      	ands	r3, r2
 8006500:	000a      	movs	r2, r1
 8006502:	40da      	lsrs	r2, r3
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_ClockConfig+0x208>)
 8006506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_RCC_ClockConfig+0x20c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	0018      	movs	r0, r3
 800650e:	f7fc ff91 	bl	8003434 <HAL_InitTick>
 8006512:	0003      	movs	r3, r0
}
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	b004      	add	sp, #16
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40022000 	.word	0x40022000
 8006520:	00001388 	.word	0x00001388
 8006524:	40021000 	.word	0x40021000
 8006528:	fffff0ff 	.word	0xfffff0ff
 800652c:	ffff8fff 	.word	0xffff8fff
 8006530:	08018568 	.word	0x08018568
 8006534:	20000088 	.word	0x20000088
 8006538:	20000000 	.word	0x20000000

0800653c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006542:	4b3c      	ldr	r3, [pc, #240]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2238      	movs	r2, #56	; 0x38
 8006548:	4013      	ands	r3, r2
 800654a:	d10f      	bne.n	800656c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800654c:	4b39      	ldr	r3, [pc, #228]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0adb      	lsrs	r3, r3, #11
 8006552:	2207      	movs	r2, #7
 8006554:	4013      	ands	r3, r2
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	0013      	movs	r3, r2
 800655c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	4835      	ldr	r0, [pc, #212]	; (8006638 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006562:	f7f9 fdd7 	bl	8000114 <__udivsi3>
 8006566:	0003      	movs	r3, r0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e05d      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800656c:	4b31      	ldr	r3, [pc, #196]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2238      	movs	r2, #56	; 0x38
 8006572:	4013      	ands	r3, r2
 8006574:	2b08      	cmp	r3, #8
 8006576:	d102      	bne.n	800657e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006578:	4b30      	ldr	r3, [pc, #192]	; (800663c <HAL_RCC_GetSysClockFreq+0x100>)
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	e054      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800657e:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2238      	movs	r2, #56	; 0x38
 8006584:	4013      	ands	r3, r2
 8006586:	2b10      	cmp	r3, #16
 8006588:	d138      	bne.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800658a:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2203      	movs	r2, #3
 8006590:	4013      	ands	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006594:	4b27      	ldr	r3, [pc, #156]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	2207      	movs	r2, #7
 800659c:	4013      	ands	r3, r2
 800659e:	3301      	adds	r3, #1
 80065a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d10d      	bne.n	80065c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4824      	ldr	r0, [pc, #144]	; (800663c <HAL_RCC_GetSysClockFreq+0x100>)
 80065ac:	f7f9 fdb2 	bl	8000114 <__udivsi3>
 80065b0:	0003      	movs	r3, r0
 80065b2:	0019      	movs	r1, r3
 80065b4:	4b1f      	ldr	r3, [pc, #124]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	0a1b      	lsrs	r3, r3, #8
 80065ba:	227f      	movs	r2, #127	; 0x7f
 80065bc:	4013      	ands	r3, r2
 80065be:	434b      	muls	r3, r1
 80065c0:	617b      	str	r3, [r7, #20]
        break;
 80065c2:	e00d      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	481c      	ldr	r0, [pc, #112]	; (8006638 <HAL_RCC_GetSysClockFreq+0xfc>)
 80065c8:	f7f9 fda4 	bl	8000114 <__udivsi3>
 80065cc:	0003      	movs	r3, r0
 80065ce:	0019      	movs	r1, r3
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	227f      	movs	r2, #127	; 0x7f
 80065d8:	4013      	ands	r3, r2
 80065da:	434b      	muls	r3, r1
 80065dc:	617b      	str	r3, [r7, #20]
        break;
 80065de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80065e0:	4b14      	ldr	r3, [pc, #80]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0f5b      	lsrs	r3, r3, #29
 80065e6:	2207      	movs	r2, #7
 80065e8:	4013      	ands	r3, r2
 80065ea:	3301      	adds	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	6978      	ldr	r0, [r7, #20]
 80065f2:	f7f9 fd8f 	bl	8000114 <__udivsi3>
 80065f6:	0003      	movs	r3, r0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e015      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2238      	movs	r2, #56	; 0x38
 8006602:	4013      	ands	r3, r2
 8006604:	2b20      	cmp	r3, #32
 8006606:	d103      	bne.n	8006610 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e00b      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2238      	movs	r2, #56	; 0x38
 8006616:	4013      	ands	r3, r2
 8006618:	2b18      	cmp	r3, #24
 800661a:	d103      	bne.n	8006624 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800661c:	23fa      	movs	r3, #250	; 0xfa
 800661e:	01db      	lsls	r3, r3, #7
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	e001      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006628:	693b      	ldr	r3, [r7, #16]
}
 800662a:	0018      	movs	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	b006      	add	sp, #24
 8006630:	bd80      	pop	{r7, pc}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	40021000 	.word	0x40021000
 8006638:	00f42400 	.word	0x00f42400
 800663c:	007a1200 	.word	0x007a1200

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006648:	2313      	movs	r3, #19
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006650:	2312      	movs	r3, #18
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	4013      	ands	r3, r2
 8006662:	d100      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006664:	e0a3      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006666:	2011      	movs	r0, #17
 8006668:	183b      	adds	r3, r7, r0
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800666e:	4b86      	ldr	r3, [pc, #536]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	055b      	lsls	r3, r3, #21
 8006676:	4013      	ands	r3, r2
 8006678:	d110      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667a:	4b83      	ldr	r3, [pc, #524]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800667c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667e:	4b82      	ldr	r3, [pc, #520]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006680:	2180      	movs	r1, #128	; 0x80
 8006682:	0549      	lsls	r1, r1, #21
 8006684:	430a      	orrs	r2, r1
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c
 8006688:	4b7f      	ldr	r3, [pc, #508]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800668a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	055b      	lsls	r3, r3, #21
 8006690:	4013      	ands	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006696:	183b      	adds	r3, r7, r0
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800669c:	4b7b      	ldr	r3, [pc, #492]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	4b7a      	ldr	r3, [pc, #488]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	0049      	lsls	r1, r1, #1
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066aa:	f7fc ff1f 	bl	80034ec <HAL_GetTick>
 80066ae:	0003      	movs	r3, r0
 80066b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	e00b      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fc ff1a 	bl	80034ec <HAL_GetTick>
 80066b8:	0002      	movs	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d904      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80066c2:	2313      	movs	r3, #19
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	2203      	movs	r2, #3
 80066c8:	701a      	strb	r2, [r3, #0]
        break;
 80066ca:	e005      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066cc:	4b6f      	ldr	r3, [pc, #444]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4013      	ands	r3, r2
 80066d6:	d0ed      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80066d8:	2313      	movs	r3, #19
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d154      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066e2:	4b69      	ldr	r3, [pc, #420]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80066e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066e6:	23c0      	movs	r3, #192	; 0xc0
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4013      	ands	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d014      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066fe:	4b62      	ldr	r3, [pc, #392]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	4a63      	ldr	r2, [pc, #396]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006704:	4013      	ands	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006708:	4b5f      	ldr	r3, [pc, #380]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800670a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800670c:	4b5e      	ldr	r3, [pc, #376]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	0249      	lsls	r1, r1, #9
 8006712:	430a      	orrs	r2, r1
 8006714:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006716:	4b5c      	ldr	r3, [pc, #368]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800671a:	4b5b      	ldr	r3, [pc, #364]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800671c:	495d      	ldr	r1, [pc, #372]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800671e:	400a      	ands	r2, r1
 8006720:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006722:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2201      	movs	r2, #1
 800672c:	4013      	ands	r3, r2
 800672e:	d016      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc fedc 	bl	80034ec <HAL_GetTick>
 8006734:	0003      	movs	r3, r0
 8006736:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006738:	e00c      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fc fed7 	bl	80034ec <HAL_GetTick>
 800673e:	0002      	movs	r2, r0
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	4a54      	ldr	r2, [pc, #336]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d904      	bls.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800674a:	2313      	movs	r3, #19
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	2203      	movs	r2, #3
 8006750:	701a      	strb	r2, [r3, #0]
            break;
 8006752:	e004      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006754:	4b4c      	ldr	r3, [pc, #304]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	2202      	movs	r2, #2
 800675a:	4013      	ands	r3, r2
 800675c:	d0ed      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800675e:	2313      	movs	r3, #19
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	4a48      	ldr	r2, [pc, #288]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800676e:	4013      	ands	r3, r2
 8006770:	0019      	movs	r1, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	4b44      	ldr	r3, [pc, #272]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006778:	430a      	orrs	r2, r1
 800677a:	65da      	str	r2, [r3, #92]	; 0x5c
 800677c:	e00c      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800677e:	2312      	movs	r3, #18
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	2213      	movs	r2, #19
 8006784:	18ba      	adds	r2, r7, r2
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e005      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	2312      	movs	r3, #18
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2213      	movs	r2, #19
 8006792:	18ba      	adds	r2, r7, r2
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006798:	2311      	movs	r3, #17
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d105      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a6:	4b38      	ldr	r3, [pc, #224]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067a8:	493c      	ldr	r1, [pc, #240]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80067aa:	400a      	ands	r2, r1
 80067ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	4013      	ands	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067b8:	4b33      	ldr	r3, [pc, #204]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	2203      	movs	r2, #3
 80067be:	4393      	bics	r3, r2
 80067c0:	0019      	movs	r1, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	4b30      	ldr	r3, [pc, #192]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067c8:	430a      	orrs	r2, r1
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2202      	movs	r2, #2
 80067d2:	4013      	ands	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d6:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	220c      	movs	r2, #12
 80067dc:	4393      	bics	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	4b28      	ldr	r3, [pc, #160]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067e6:	430a      	orrs	r2, r1
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2220      	movs	r2, #32
 80067f0:	4013      	ands	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	4a29      	ldr	r2, [pc, #164]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	0019      	movs	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	4b21      	ldr	r3, [pc, #132]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006804:	430a      	orrs	r2, r1
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	01db      	lsls	r3, r3, #7
 8006810:	4013      	ands	r3, r2
 8006812:	d015      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006814:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	0899      	lsrs	r1, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695a      	ldr	r2, [r3, #20]
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006822:	430a      	orrs	r2, r1
 8006824:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	2380      	movs	r3, #128	; 0x80
 800682c:	05db      	lsls	r3, r3, #23
 800682e:	429a      	cmp	r2, r3
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	0249      	lsls	r1, r1, #9
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	4013      	ands	r3, r2
 800684a:	d016      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800684c:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006852:	4013      	ands	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800685c:	430a      	orrs	r2, r1
 800685e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	2380      	movs	r3, #128	; 0x80
 8006866:	01db      	lsls	r3, r3, #7
 8006868:	429a      	cmp	r2, r3
 800686a:	d106      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	4b05      	ldr	r3, [pc, #20]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	0249      	lsls	r1, r1, #9
 8006876:	430a      	orrs	r2, r1
 8006878:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800687a:	2312      	movs	r3, #18
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	781b      	ldrb	r3, [r3, #0]
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b006      	add	sp, #24
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000
 800688c:	40007000 	.word	0x40007000
 8006890:	fffffcff 	.word	0xfffffcff
 8006894:	fffeffff 	.word	0xfffeffff
 8006898:	00001388 	.word	0x00001388
 800689c:	efffffff 	.word	0xefffffff
 80068a0:	ffffcfff 	.word	0xffffcfff
 80068a4:	ffff3fff 	.word	0xffff3fff

080068a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068a8:	b5b0      	push	{r4, r5, r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068b0:	230f      	movs	r3, #15
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d100      	bne.n	80068c0 <HAL_RTC_Init+0x18>
 80068be:	e080      	b.n	80069c2 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2229      	movs	r2, #41	; 0x29
 80068c4:	5c9b      	ldrb	r3, [r3, r2]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2228      	movs	r2, #40	; 0x28
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2288      	movs	r2, #136	; 0x88
 80068d8:	0212      	lsls	r2, r2, #8
 80068da:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f00c f8ee 	bl	8012ac0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2229      	movs	r2, #41	; 0x29
 80068e8:	2102      	movs	r1, #2
 80068ea:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	22ca      	movs	r2, #202	; 0xca
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2253      	movs	r2, #83	; 0x53
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80068fc:	250f      	movs	r5, #15
 80068fe:	197c      	adds	r4, r7, r5
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	0018      	movs	r0, r3
 8006904:	f000 fa71 	bl	8006dea <RTC_EnterInitMode>
 8006908:	0003      	movs	r3, r0
 800690a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800690c:	0028      	movs	r0, r5
 800690e:	183b      	adds	r3, r7, r0
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d148      	bne.n	80069a8 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	492b      	ldr	r1, [pc, #172]	; (80069d0 <HAL_RTC_Init+0x128>)
 8006922:	400a      	ands	r2, r1
 8006924:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6999      	ldr	r1, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6912      	ldr	r2, [r2, #16]
 800694c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6919      	ldr	r1, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	041a      	lsls	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006962:	0005      	movs	r5, r0
 8006964:	183c      	adds	r4, r7, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 fa81 	bl	8006e70 <RTC_ExitInitMode>
 800696e:	0003      	movs	r3, r0
 8006970:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006972:	197b      	adds	r3, r7, r5
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d116      	bne.n	80069a8 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	00d2      	lsls	r2, r2, #3
 8006986:	08d2      	lsrs	r2, r2, #3
 8006988:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6999      	ldr	r1, [r3, #24]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80069b0:	230f      	movs	r3, #15
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2229      	movs	r2, #41	; 0x29
 80069be:	2101      	movs	r1, #1
 80069c0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80069c2:	230f      	movs	r3, #15
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	781b      	ldrb	r3, [r3, #0]
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b004      	add	sp, #16
 80069ce:	bdb0      	pop	{r4, r5, r7, pc}
 80069d0:	fb8fffbf 	.word	0xfb8fffbf

080069d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069d4:	b5b0      	push	{r4, r5, r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2228      	movs	r2, #40	; 0x28
 80069e4:	5c9b      	ldrb	r3, [r3, r2]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_RTC_SetTime+0x1a>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e092      	b.n	8006b14 <HAL_RTC_SetTime+0x140>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2228      	movs	r2, #40	; 0x28
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2229      	movs	r2, #41	; 0x29
 80069fa:	2102      	movs	r1, #2
 80069fc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	22ca      	movs	r2, #202	; 0xca
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2253      	movs	r2, #83	; 0x53
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a0e:	2513      	movs	r5, #19
 8006a10:	197c      	adds	r4, r7, r5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 f9e8 	bl	8006dea <RTC_EnterInitMode>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006a1e:	197b      	adds	r3, r7, r5
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d162      	bne.n	8006aec <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d125      	bne.n	8006a78 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2240      	movs	r2, #64	; 0x40
 8006a34:	4013      	ands	r3, r2
 8006a36:	d102      	bne.n	8006a3e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	0018      	movs	r0, r3
 8006a44:	f000 fa58 	bl	8006ef8 <RTC_ByteToBcd2>
 8006a48:	0003      	movs	r3, r0
 8006a4a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 fa51 	bl	8006ef8 <RTC_ByteToBcd2>
 8006a56:	0003      	movs	r3, r0
 8006a58:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a5a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	789b      	ldrb	r3, [r3, #2]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 fa49 	bl	8006ef8 <RTC_ByteToBcd2>
 8006a66:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a68:	0022      	movs	r2, r4
 8006a6a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e017      	b.n	8006aa8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	4013      	ands	r3, r2
 8006a82:	d102      	bne.n	8006a8a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a96:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a9c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	78db      	ldrb	r3, [r3, #3]
 8006aa2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	491b      	ldr	r1, [pc, #108]	; (8006b1c <HAL_RTC_SetTime+0x148>)
 8006ab0:	400a      	ands	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4918      	ldr	r1, [pc, #96]	; (8006b20 <HAL_RTC_SetTime+0x14c>)
 8006ac0:	400a      	ands	r2, r1
 8006ac2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006adc:	2313      	movs	r3, #19
 8006ade:	18fc      	adds	r4, r7, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f000 f9c4 	bl	8006e70 <RTC_ExitInitMode>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	22ff      	movs	r2, #255	; 0xff
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8006af4:	2313      	movs	r3, #19
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2229      	movs	r2, #41	; 0x29
 8006b02:	2101      	movs	r1, #1
 8006b04:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2228      	movs	r2, #40	; 0x28
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	5499      	strb	r1, [r3, r2]

  return status;
 8006b0e:	2313      	movs	r3, #19
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	781b      	ldrb	r3, [r3, #0]
}
 8006b14:	0018      	movs	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b006      	add	sp, #24
 8006b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8006b1c:	007f7f7f 	.word	0x007f7f7f
 8006b20:	fffbffff 	.word	0xfffbffff

08006b24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	045b      	lsls	r3, r3, #17
 8006b42:	0c5a      	lsrs	r2, r3, #17
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <HAL_RTC_GetTime+0xb4>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	223f      	movs	r2, #63	; 0x3f
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	227f      	movs	r2, #127	; 0x7f
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	227f      	movs	r2, #127	; 0x7f
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	0d9b      	lsrs	r3, r3, #22
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11a      	bne.n	8006bce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f000 f9d3 	bl	8006f48 <RTC_Bcd2ToByte>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	001a      	movs	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f000 f9ca 	bl	8006f48 <RTC_Bcd2ToByte>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	001a      	movs	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 f9c1 	bl	8006f48 <RTC_Bcd2ToByte>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	001a      	movs	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b006      	add	sp, #24
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	007f7f7f 	.word	0x007f7f7f

08006bdc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bdc:	b5b0      	push	{r4, r5, r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2228      	movs	r2, #40	; 0x28
 8006bec:	5c9b      	ldrb	r3, [r3, r2]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RTC_SetDate+0x1a>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e07e      	b.n	8006cf4 <HAL_RTC_SetDate+0x118>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2228      	movs	r2, #40	; 0x28
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2229      	movs	r2, #41	; 0x29
 8006c02:	2102      	movs	r1, #2
 8006c04:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10e      	bne.n	8006c2a <HAL_RTC_SetDate+0x4e>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	001a      	movs	r2, r3
 8006c12:	2310      	movs	r3, #16
 8006c14:	4013      	ands	r3, r2
 8006c16:	d008      	beq.n	8006c2a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	4393      	bics	r3, r2
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	330a      	adds	r3, #10
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11c      	bne.n	8006c6a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f95f 	bl	8006ef8 <RTC_ByteToBcd2>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 f958 	bl	8006ef8 <RTC_ByteToBcd2>
 8006c48:	0003      	movs	r3, r0
 8006c4a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c4c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	789b      	ldrb	r3, [r3, #2]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f000 f950 	bl	8006ef8 <RTC_ByteToBcd2>
 8006c58:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c5a:	0022      	movs	r2, r4
 8006c5c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e00e      	b.n	8006c88 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	78db      	ldrb	r3, [r3, #3]
 8006c6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c76:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	22ca      	movs	r2, #202	; 0xca
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2253      	movs	r2, #83	; 0x53
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c98:	2513      	movs	r5, #19
 8006c9a:	197c      	adds	r4, r7, r5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 f8a3 	bl	8006dea <RTC_EnterInitMode>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006ca8:	0028      	movs	r0, r5
 8006caa:	183b      	adds	r3, r7, r0
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4910      	ldr	r1, [pc, #64]	; (8006cfc <HAL_RTC_SetDate+0x120>)
 8006cba:	400a      	ands	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cbe:	183c      	adds	r4, r7, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f000 f8d4 	bl	8006e70 <RTC_ExitInitMode>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006cd4:	2313      	movs	r3, #19
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2229      	movs	r2, #41	; 0x29
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2228      	movs	r2, #40	; 0x28
 8006cea:	2100      	movs	r1, #0
 8006cec:	5499      	strb	r1, [r3, r2]

  return status;
 8006cee:	2313      	movs	r3, #19
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781b      	ldrb	r3, [r3, #0]
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b006      	add	sp, #24
 8006cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8006cfc:	00ffff3f 	.word	0x00ffff3f

08006d00 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <HAL_RTC_GetDate+0x98>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	221f      	movs	r2, #31
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	223f      	movs	r2, #63	; 0x3f
 8006d38:	4013      	ands	r3, r2
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	0b5b      	lsrs	r3, r3, #13
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2207      	movs	r2, #7
 8006d48:	4013      	ands	r3, r2
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11a      	bne.n	8006d8c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f000 f8f4 	bl	8006f48 <RTC_Bcd2ToByte>
 8006d60:	0003      	movs	r3, r0
 8006d62:	001a      	movs	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f000 f8eb 	bl	8006f48 <RTC_Bcd2ToByte>
 8006d72:	0003      	movs	r3, r0
 8006d74:	001a      	movs	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	789b      	ldrb	r3, [r3, #2]
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 f8e2 	bl	8006f48 <RTC_Bcd2ToByte>
 8006d84:	0003      	movs	r3, r0
 8006d86:	001a      	movs	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b006      	add	sp, #24
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	00ffff3f 	.word	0x00ffff3f

08006d9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	21a0      	movs	r1, #160	; 0xa0
 8006db0:	438a      	bics	r2, r1
 8006db2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006db4:	f7fc fb9a 	bl	80034ec <HAL_GetTick>
 8006db8:	0003      	movs	r3, r0
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dbe:	f7fc fb95 	bl	80034ec <HAL_GetTick>
 8006dc2:	0002      	movs	r2, r0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	23fa      	movs	r3, #250	; 0xfa
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d901      	bls.n	8006dd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e006      	b.n	8006de2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d0ee      	beq.n	8006dbe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	0018      	movs	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b004      	add	sp, #16
 8006de8:	bd80      	pop	{r7, pc}

08006dea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006df2:	230f      	movs	r3, #15
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2240      	movs	r2, #64	; 0x40
 8006e02:	4013      	ands	r3, r2
 8006e04:	d12c      	bne.n	8006e60 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2180      	movs	r1, #128	; 0x80
 8006e12:	430a      	orrs	r2, r1
 8006e14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e16:	f7fc fb69 	bl	80034ec <HAL_GetTick>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e1e:	e014      	b.n	8006e4a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e20:	f7fc fb64 	bl	80034ec <HAL_GetTick>
 8006e24:	0002      	movs	r2, r0
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	200f      	movs	r0, #15
 8006e2c:	183b      	adds	r3, r7, r0
 8006e2e:	1839      	adds	r1, r7, r0
 8006e30:	7809      	ldrb	r1, [r1, #0]
 8006e32:	7019      	strb	r1, [r3, #0]
 8006e34:	23fa      	movs	r3, #250	; 0xfa
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d906      	bls.n	8006e4a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006e3c:	183b      	adds	r3, r7, r0
 8006e3e:	2203      	movs	r2, #3
 8006e40:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2229      	movs	r2, #41	; 0x29
 8006e46:	2103      	movs	r1, #3
 8006e48:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	4013      	ands	r3, r2
 8006e54:	d104      	bne.n	8006e60 <RTC_EnterInitMode+0x76>
 8006e56:	230f      	movs	r3, #15
 8006e58:	18fb      	adds	r3, r7, r3
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d1df      	bne.n	8006e20 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006e60:	230f      	movs	r3, #15
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	781b      	ldrb	r3, [r3, #0]
}
 8006e66:	0018      	movs	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b004      	add	sp, #16
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e78:	240f      	movs	r4, #15
 8006e7a:	193b      	adds	r3, r7, r4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	438a      	bics	r2, r1
 8006e8a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2220      	movs	r2, #32
 8006e92:	4013      	ands	r3, r2
 8006e94:	d10d      	bne.n	8006eb2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff ff7f 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d021      	beq.n	8006ee6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2229      	movs	r2, #41	; 0x29
 8006ea6:	2103      	movs	r1, #3
 8006ea8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006eaa:	193b      	adds	r3, r7, r4
 8006eac:	2203      	movs	r2, #3
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e019      	b.n	8006ee6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006eb2:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006eb8:	2120      	movs	r1, #32
 8006eba:	438a      	bics	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7ff ff6b 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 8006ec6:	1e03      	subs	r3, r0, #0
 8006ec8:	d007      	beq.n	8006eda <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2229      	movs	r2, #41	; 0x29
 8006ece:	2103      	movs	r1, #3
 8006ed0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006ed2:	230f      	movs	r3, #15
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006eda:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <RTC_ExitInitMode+0x84>)
 8006ee0:	2120      	movs	r1, #32
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006ee6:	230f      	movs	r3, #15
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	781b      	ldrb	r3, [r3, #0]
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b005      	add	sp, #20
 8006ef2:	bd90      	pop	{r4, r7, pc}
 8006ef4:	40002800 	.word	0x40002800

08006ef8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	0002      	movs	r2, r0
 8006f00:	1dfb      	adds	r3, r7, #7
 8006f02:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006f08:	230b      	movs	r3, #11
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	1dfa      	adds	r2, r7, #7
 8006f0e:	7812      	ldrb	r2, [r2, #0]
 8006f10:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006f12:	e008      	b.n	8006f26 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006f1a:	220b      	movs	r2, #11
 8006f1c:	18bb      	adds	r3, r7, r2
 8006f1e:	18ba      	adds	r2, r7, r2
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	3a0a      	subs	r2, #10
 8006f24:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006f26:	210b      	movs	r1, #11
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	d8f1      	bhi.n	8006f14 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	187b      	adds	r3, r7, r1
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b2db      	uxtb	r3, r3
}
 8006f40:	0018      	movs	r0, r3
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b004      	add	sp, #16
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	0002      	movs	r2, r0
 8006f50:	1dfb      	adds	r3, r7, #7
 8006f52:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006f54:	1dfb      	adds	r3, r7, #7
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	091b      	lsrs	r3, r3, #4
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	0013      	movs	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	1dfb      	adds	r3, r7, #7
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	210f      	movs	r1, #15
 8006f72:	400b      	ands	r3, r1
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	18d3      	adds	r3, r2, r3
 8006f78:	b2db      	uxtb	r3, r3
}
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b004      	add	sp, #16
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2228      	movs	r2, #40	; 0x28
 8006f94:	5c9b      	ldrb	r3, [r3, r2]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e082      	b.n	80070a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2228      	movs	r2, #40	; 0x28
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2229      	movs	r2, #41	; 0x29
 8006faa:	2102      	movs	r1, #2
 8006fac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	22ca      	movs	r2, #202	; 0xca
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2253      	movs	r2, #83	; 0x53
 8006fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4938      	ldr	r1, [pc, #224]	; (80070ac <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006fca:	400a      	ands	r2, r1
 8006fcc:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2104      	movs	r1, #4
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006fde:	4b34      	ldr	r3, [pc, #208]	; (80070b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2240      	movs	r2, #64	; 0x40
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d121      	bne.n	800702c <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8006fe8:	f7fc fa80 	bl	80034ec <HAL_GetTick>
 8006fec:	0003      	movs	r3, r0
 8006fee:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006ff0:	e016      	b.n	8007020 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ff2:	f7fc fa7b 	bl	80034ec <HAL_GetTick>
 8006ff6:	0002      	movs	r2, r0
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	23fa      	movs	r3, #250	; 0xfa
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	429a      	cmp	r2, r3
 8007002:	d90d      	bls.n	8007020 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	22ff      	movs	r2, #255	; 0xff
 800700a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2229      	movs	r2, #41	; 0x29
 8007010:	2103      	movs	r1, #3
 8007012:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2228      	movs	r2, #40	; 0x28
 8007018:	2100      	movs	r1, #0
 800701a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e041      	b.n	80070a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2204      	movs	r2, #4
 8007028:	4013      	ands	r3, r2
 800702a:	d0e2      	beq.n	8006ff2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2107      	movs	r1, #7
 8007040:	438a      	bics	r2, r1
 8007042:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6999      	ldr	r1, [r3, #24]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	430a      	orrs	r2, r1
 8007052:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007054:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	58d3      	ldr	r3, [r2, r3]
 800705a:	4916      	ldr	r1, [pc, #88]	; (80070b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800705c:	2280      	movs	r2, #128	; 0x80
 800705e:	0312      	lsls	r2, r2, #12
 8007060:	4313      	orrs	r3, r2
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	01c9      	lsls	r1, r1, #7
 8007074:	430a      	orrs	r2, r1
 8007076:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	00c9      	lsls	r1, r1, #3
 8007086:	430a      	orrs	r2, r1
 8007088:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2229      	movs	r2, #41	; 0x29
 8007096:	2101      	movs	r1, #1
 8007098:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2228      	movs	r2, #40	; 0x28
 800709e:	2100      	movs	r1, #0
 80070a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	fffffbff 	.word	0xfffffbff
 80070b0:	40002800 	.word	0x40002800
 80070b4:	40021800 	.word	0x40021800

080070b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c6:	2204      	movs	r2, #4
 80070c8:	4013      	ands	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2104      	movs	r1, #4
 80070d8:	430a      	orrs	r2, r1
 80070da:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0018      	movs	r0, r3
 80070e0:	f000 f808 	bl	80070f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2229      	movs	r2, #41	; 0x29
 80070e8:	2101      	movs	r1, #1
 80070ea:	5499      	strb	r1, [r3, r2]
}
 80070ec:	46c0      	nop			; (mov r8, r8)
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b002      	add	sp, #8
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e0a8      	b.n	8007268 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	2382      	movs	r3, #130	; 0x82
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	429a      	cmp	r2, r3
 8007128:	d009      	beq.n	800713e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
 8007130:	e005      	b.n	800713e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	225d      	movs	r2, #93	; 0x5d
 8007148:	5c9b      	ldrb	r3, [r3, r2]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	225c      	movs	r2, #92	; 0x5c
 8007154:	2100      	movs	r1, #0
 8007156:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	0018      	movs	r0, r3
 800715c:	f00b fcf6 	bl	8012b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	225d      	movs	r2, #93	; 0x5d
 8007164:	2102      	movs	r1, #2
 8007166:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2140      	movs	r1, #64	; 0x40
 8007174:	438a      	bics	r2, r1
 8007176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	23e0      	movs	r3, #224	; 0xe0
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	429a      	cmp	r2, r3
 8007182:	d902      	bls.n	800718a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e002      	b.n	8007190 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	015b      	lsls	r3, r3, #5
 800718e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	23f0      	movs	r3, #240	; 0xf0
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	429a      	cmp	r2, r3
 800719a:	d008      	beq.n	80071ae <HAL_SPI_Init+0xaa>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	23e0      	movs	r3, #224	; 0xe0
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d002      	beq.n	80071ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	2382      	movs	r3, #130	; 0x82
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	401a      	ands	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6899      	ldr	r1, [r3, #8]
 80071bc:	2384      	movs	r3, #132	; 0x84
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	400b      	ands	r3, r1
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2102      	movs	r1, #2
 80071ca:	400b      	ands	r3, r1
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2101      	movs	r1, #1
 80071d4:	400b      	ands	r3, r1
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6999      	ldr	r1, [r3, #24]
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	400b      	ands	r3, r1
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	2138      	movs	r1, #56	; 0x38
 80071ea:	400b      	ands	r3, r1
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	400b      	ands	r3, r1
 80071f6:	431a      	orrs	r2, r3
 80071f8:	0011      	movs	r1, r2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	019b      	lsls	r3, r3, #6
 8007202:	401a      	ands	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	2204      	movs	r2, #4
 8007214:	401a      	ands	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2110      	movs	r1, #16
 800721c:	400b      	ands	r3, r1
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	2108      	movs	r1, #8
 8007226:	400b      	ands	r3, r1
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	23f0      	movs	r3, #240	; 0xf0
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	400b      	ands	r3, r1
 8007234:	431a      	orrs	r2, r3
 8007236:	0011      	movs	r1, r2
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	2380      	movs	r3, #128	; 0x80
 800723c:	015b      	lsls	r3, r3, #5
 800723e:	401a      	ands	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4907      	ldr	r1, [pc, #28]	; (8007270 <HAL_SPI_Init+0x16c>)
 8007254:	400a      	ands	r2, r1
 8007256:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	225d      	movs	r2, #93	; 0x5d
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b004      	add	sp, #16
 800726e:	bd80      	pop	{r7, pc}
 8007270:	fffff7ff 	.word	0xfffff7ff

08007274 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	1dbb      	adds	r3, r7, #6
 8007282:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007284:	231f      	movs	r3, #31
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	225c      	movs	r2, #92	; 0x5c
 8007290:	5c9b      	ldrb	r3, [r3, r2]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_SPI_Transmit+0x26>
 8007296:	2302      	movs	r3, #2
 8007298:	e140      	b.n	800751c <HAL_SPI_Transmit+0x2a8>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	225c      	movs	r2, #92	; 0x5c
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a2:	f7fc f923 	bl	80034ec <HAL_GetTick>
 80072a6:	0003      	movs	r3, r0
 80072a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80072aa:	2316      	movs	r3, #22
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	1dba      	adds	r2, r7, #6
 80072b0:	8812      	ldrh	r2, [r2, #0]
 80072b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	225d      	movs	r2, #93	; 0x5d
 80072b8:	5c9b      	ldrb	r3, [r3, r2]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d004      	beq.n	80072ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80072c0:	231f      	movs	r3, #31
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	2202      	movs	r2, #2
 80072c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80072c8:	e11d      	b.n	8007506 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_SPI_Transmit+0x64>
 80072d0:	1dbb      	adds	r3, r7, #6
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80072d8:	231f      	movs	r3, #31
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	2201      	movs	r2, #1
 80072de:	701a      	strb	r2, [r3, #0]
    goto error;
 80072e0:	e111      	b.n	8007506 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	225d      	movs	r2, #93	; 0x5d
 80072e6:	2103      	movs	r1, #3
 80072e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1dba      	adds	r2, r7, #6
 80072fa:	8812      	ldrh	r2, [r2, #0]
 80072fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1dba      	adds	r2, r7, #6
 8007302:	8812      	ldrh	r2, [r2, #0]
 8007304:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2244      	movs	r2, #68	; 0x44
 8007310:	2100      	movs	r1, #0
 8007312:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2246      	movs	r2, #70	; 0x46
 8007318:	2100      	movs	r1, #0
 800731a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	429a      	cmp	r2, r3
 8007332:	d110      	bne.n	8007356 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2140      	movs	r1, #64	; 0x40
 8007340:	438a      	bics	r2, r1
 8007342:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2180      	movs	r1, #128	; 0x80
 8007350:	01c9      	lsls	r1, r1, #7
 8007352:	430a      	orrs	r2, r1
 8007354:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2240      	movs	r2, #64	; 0x40
 800735e:	4013      	ands	r3, r2
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d007      	beq.n	8007374 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2140      	movs	r1, #64	; 0x40
 8007370:	430a      	orrs	r2, r1
 8007372:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	23e0      	movs	r3, #224	; 0xe0
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	429a      	cmp	r2, r3
 800737e:	d94e      	bls.n	800741e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <HAL_SPI_Transmit+0x11e>
 8007388:	2316      	movs	r3, #22
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d13f      	bne.n	8007412 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	881a      	ldrh	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	1c9a      	adds	r2, r3, #2
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073b6:	e02c      	b.n	8007412 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2202      	movs	r2, #2
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d112      	bne.n	80073ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	881a      	ldrh	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	1c9a      	adds	r2, r3, #2
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073ea:	e012      	b.n	8007412 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ec:	f7fc f87e 	bl	80034ec <HAL_GetTick>
 80073f0:	0002      	movs	r2, r0
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d802      	bhi.n	8007402 <HAL_SPI_Transmit+0x18e>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	d102      	bne.n	8007408 <HAL_SPI_Transmit+0x194>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007408:	231f      	movs	r3, #31
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	2203      	movs	r2, #3
 800740e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007410:	e079      	b.n	8007506 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1cd      	bne.n	80073b8 <HAL_SPI_Transmit+0x144>
 800741c:	e04f      	b.n	80074be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_SPI_Transmit+0x1bc>
 8007426:	2316      	movs	r3, #22
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d141      	bne.n	80074b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007456:	e02d      	b.n	80074b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2202      	movs	r2, #2
 8007460:	4013      	ands	r3, r2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d113      	bne.n	800748e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800748c:	e012      	b.n	80074b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800748e:	f7fc f82d 	bl	80034ec <HAL_GetTick>
 8007492:	0002      	movs	r2, r0
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d802      	bhi.n	80074a4 <HAL_SPI_Transmit+0x230>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	d102      	bne.n	80074aa <HAL_SPI_Transmit+0x236>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80074aa:	231f      	movs	r3, #31
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	2203      	movs	r2, #3
 80074b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80074b2:	e028      	b.n	8007506 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1cc      	bne.n	8007458 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f000 f95d 	bl	8007784 <SPI_EndRxTxTransaction>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074dc:	2300      	movs	r3, #0
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80074fa:	231f      	movs	r3, #31
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	2201      	movs	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e000      	b.n	8007506 <HAL_SPI_Transmit+0x292>
  }

error:
 8007504:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	225d      	movs	r2, #93	; 0x5d
 800750a:	2101      	movs	r1, #1
 800750c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	225c      	movs	r2, #92	; 0x5c
 8007512:	2100      	movs	r1, #0
 8007514:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007516:	231f      	movs	r3, #31
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	781b      	ldrb	r3, [r3, #0]
}
 800751c:	0018      	movs	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	b008      	add	sp, #32
 8007522:	bd80      	pop	{r7, pc}

08007524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	1dfb      	adds	r3, r7, #7
 8007532:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007534:	f7fb ffda 	bl	80034ec <HAL_GetTick>
 8007538:	0002      	movs	r2, r0
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	18d3      	adds	r3, r2, r3
 8007542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007544:	f7fb ffd2 	bl	80034ec <HAL_GetTick>
 8007548:	0003      	movs	r3, r0
 800754a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800754c:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	015b      	lsls	r3, r3, #5
 8007552:	0d1b      	lsrs	r3, r3, #20
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	4353      	muls	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800755a:	e058      	b.n	800760e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	d055      	beq.n	800760e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007562:	f7fb ffc3 	bl	80034ec <HAL_GetTick>
 8007566:	0002      	movs	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	429a      	cmp	r2, r3
 8007570:	d902      	bls.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d142      	bne.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	21e0      	movs	r1, #224	; 0xe0
 8007584:	438a      	bics	r2, r1
 8007586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	2382      	movs	r3, #130	; 0x82
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	429a      	cmp	r2, r3
 8007592:	d113      	bne.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	429a      	cmp	r2, r3
 800759e:	d005      	beq.n	80075ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d107      	bne.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2140      	movs	r1, #64	; 0x40
 80075b8:	438a      	bics	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c0:	2380      	movs	r3, #128	; 0x80
 80075c2:	019b      	lsls	r3, r3, #6
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d110      	bne.n	80075ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	491a      	ldr	r1, [pc, #104]	; (800763c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	0189      	lsls	r1, r1, #6
 80075e6:	430a      	orrs	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	225d      	movs	r2, #93	; 0x5d
 80075ee:	2101      	movs	r1, #1
 80075f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	225c      	movs	r2, #92	; 0x5c
 80075f6:	2100      	movs	r1, #0
 80075f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e017      	b.n	800762e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3b01      	subs	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	425a      	negs	r2, r3
 800761e:	4153      	adcs	r3, r2
 8007620:	b2db      	uxtb	r3, r3
 8007622:	001a      	movs	r2, r3
 8007624:	1dfb      	adds	r3, r7, #7
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d197      	bne.n	800755c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	b008      	add	sp, #32
 8007634:	bd80      	pop	{r7, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	20000088 	.word	0x20000088
 800763c:	ffffdfff 	.word	0xffffdfff

08007640 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800764e:	2317      	movs	r3, #23
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007656:	f7fb ff49 	bl	80034ec <HAL_GetTick>
 800765a:	0002      	movs	r2, r0
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	18d3      	adds	r3, r2, r3
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007666:	f7fb ff41 	bl	80034ec <HAL_GetTick>
 800766a:	0003      	movs	r3, r0
 800766c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	330c      	adds	r3, #12
 8007674:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007676:	4b41      	ldr	r3, [pc, #260]	; (800777c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	0013      	movs	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	189b      	adds	r3, r3, r2
 8007680:	00da      	lsls	r2, r3, #3
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	0d1b      	lsrs	r3, r3, #20
 8007686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007688:	4353      	muls	r3, r2
 800768a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800768c:	e068      	b.n	8007760 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	23c0      	movs	r3, #192	; 0xc0
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	429a      	cmp	r2, r3
 8007696:	d10a      	bne.n	80076ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	2117      	movs	r1, #23
 80076a6:	187b      	adds	r3, r7, r1
 80076a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076aa:	187b      	adds	r3, r7, r1
 80076ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	d055      	beq.n	8007760 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076b4:	f7fb ff1a 	bl	80034ec <HAL_GetTick>
 80076b8:	0002      	movs	r2, r0
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d902      	bls.n	80076ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d142      	bne.n	8007750 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	21e0      	movs	r1, #224	; 0xe0
 80076d6:	438a      	bics	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	2382      	movs	r3, #130	; 0x82
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d113      	bne.n	800770e <SPI_WaitFifoStateUntilTimeout+0xce>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	2380      	movs	r3, #128	; 0x80
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d005      	beq.n	80076fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d107      	bne.n	800770e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2140      	movs	r1, #64	; 0x40
 800770a:	438a      	bics	r2, r1
 800770c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007712:	2380      	movs	r3, #128	; 0x80
 8007714:	019b      	lsls	r3, r3, #6
 8007716:	429a      	cmp	r2, r3
 8007718:	d110      	bne.n	800773c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4916      	ldr	r1, [pc, #88]	; (8007780 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007726:	400a      	ands	r2, r1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2180      	movs	r1, #128	; 0x80
 8007736:	0189      	lsls	r1, r1, #6
 8007738:	430a      	orrs	r2, r1
 800773a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	225d      	movs	r2, #93	; 0x5d
 8007740:	2101      	movs	r1, #1
 8007742:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	225c      	movs	r2, #92	; 0x5c
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e010      	b.n	8007772 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3b01      	subs	r3, #1
 800775e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4013      	ands	r3, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d18e      	bne.n	800768e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	0018      	movs	r0, r3
 8007774:	46bd      	mov	sp, r7
 8007776:	b00a      	add	sp, #40	; 0x28
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	20000088 	.word	0x20000088
 8007780:	ffffdfff 	.word	0xffffdfff

08007784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	23c0      	movs	r3, #192	; 0xc0
 8007794:	0159      	lsls	r1, r3, #5
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	0013      	movs	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	f7ff ff4e 	bl	8007640 <SPI_WaitFifoStateUntilTimeout>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d007      	beq.n	80077b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2220      	movs	r2, #32
 80077ae:	431a      	orrs	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e027      	b.n	8007808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	0013      	movs	r3, r2
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	f7ff fead 	bl	8007524 <SPI_WaitFlagStateUntilTimeout>
 80077ca:	1e03      	subs	r3, r0, #0
 80077cc:	d007      	beq.n	80077de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d2:	2220      	movs	r2, #32
 80077d4:	431a      	orrs	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e014      	b.n	8007808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	23c0      	movs	r3, #192	; 0xc0
 80077e2:	00d9      	lsls	r1, r3, #3
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	0013      	movs	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	f7ff ff27 	bl	8007640 <SPI_WaitFifoStateUntilTimeout>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d007      	beq.n	8007806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fa:	2220      	movs	r2, #32
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e000      	b.n	8007808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	0018      	movs	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	b004      	add	sp, #16
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e04a      	b.n	80078b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	223d      	movs	r2, #61	; 0x3d
 8007826:	5c9b      	ldrb	r3, [r3, r2]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d107      	bne.n	800783e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	223c      	movs	r2, #60	; 0x3c
 8007832:	2100      	movs	r1, #0
 8007834:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f00b f9f5 	bl	8012c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	223d      	movs	r2, #61	; 0x3d
 8007842:	2102      	movs	r1, #2
 8007844:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3304      	adds	r3, #4
 800784e:	0019      	movs	r1, r3
 8007850:	0010      	movs	r0, r2
 8007852:	f000 faa9 	bl	8007da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2248      	movs	r2, #72	; 0x48
 800785a:	2101      	movs	r1, #1
 800785c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	223e      	movs	r2, #62	; 0x3e
 8007862:	2101      	movs	r1, #1
 8007864:	5499      	strb	r1, [r3, r2]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	223f      	movs	r2, #63	; 0x3f
 800786a:	2101      	movs	r1, #1
 800786c:	5499      	strb	r1, [r3, r2]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2240      	movs	r2, #64	; 0x40
 8007872:	2101      	movs	r1, #1
 8007874:	5499      	strb	r1, [r3, r2]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2241      	movs	r2, #65	; 0x41
 800787a:	2101      	movs	r1, #1
 800787c:	5499      	strb	r1, [r3, r2]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2242      	movs	r2, #66	; 0x42
 8007882:	2101      	movs	r1, #1
 8007884:	5499      	strb	r1, [r3, r2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2243      	movs	r2, #67	; 0x43
 800788a:	2101      	movs	r1, #1
 800788c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2244      	movs	r2, #68	; 0x44
 8007892:	2101      	movs	r1, #1
 8007894:	5499      	strb	r1, [r3, r2]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2245      	movs	r2, #69	; 0x45
 800789a:	2101      	movs	r1, #1
 800789c:	5499      	strb	r1, [r3, r2]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2246      	movs	r2, #70	; 0x46
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2247      	movs	r2, #71	; 0x47
 80078aa:	2101      	movs	r1, #1
 80078ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	223d      	movs	r2, #61	; 0x3d
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b002      	add	sp, #8
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	223d      	movs	r2, #61	; 0x3d
 80078cc:	5c9b      	ldrb	r3, [r3, r2]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d001      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e03c      	b.n	8007952 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	223d      	movs	r2, #61	; 0x3d
 80078dc:	2102      	movs	r1, #2
 80078de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2101      	movs	r1, #1
 80078ec:	430a      	orrs	r2, r1
 80078ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a19      	ldr	r2, [pc, #100]	; (800795c <HAL_TIM_Base_Start_IT+0x9c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIM_Base_Start_IT+0x4e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a18      	ldr	r2, [pc, #96]	; (8007960 <HAL_TIM_Base_Start_IT+0xa0>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIM_Base_Start_IT+0x4e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_TIM_Base_Start_IT+0xa4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d116      	bne.n	800793c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	4a14      	ldr	r2, [pc, #80]	; (8007968 <HAL_TIM_Base_Start_IT+0xa8>)
 8007916:	4013      	ands	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b06      	cmp	r3, #6
 800791e:	d016      	beq.n	800794e <HAL_TIM_Base_Start_IT+0x8e>
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	2380      	movs	r3, #128	; 0x80
 8007924:	025b      	lsls	r3, r3, #9
 8007926:	429a      	cmp	r2, r3
 8007928:	d011      	beq.n	800794e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2101      	movs	r1, #1
 8007936:	430a      	orrs	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e008      	b.n	800794e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2101      	movs	r1, #1
 8007948:	430a      	orrs	r2, r1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e000      	b.n	8007950 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b004      	add	sp, #16
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40000400 	.word	0x40000400
 8007964:	40014000 	.word	0x40014000
 8007968:	00010007 	.word	0x00010007

0800796c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2202      	movs	r2, #2
 800797c:	4013      	ands	r3, r2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d124      	bne.n	80079cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	2202      	movs	r2, #2
 800798a:	4013      	ands	r3, r2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d11d      	bne.n	80079cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2203      	movs	r2, #3
 8007996:	4252      	negs	r2, r2
 8007998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2203      	movs	r2, #3
 80079a8:	4013      	ands	r3, r2
 80079aa:	d004      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 f9e2 	bl	8007d78 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e007      	b.n	80079c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 f9d5 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	0018      	movs	r0, r3
 80079c2:	f000 f9e1 	bl	8007d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2204      	movs	r2, #4
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d125      	bne.n	8007a26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2204      	movs	r2, #4
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d11e      	bne.n	8007a26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2205      	movs	r2, #5
 80079ee:	4252      	negs	r2, r2
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	23c0      	movs	r3, #192	; 0xc0
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4013      	ands	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f000 f9b5 	bl	8007d78 <HAL_TIM_IC_CaptureCallback>
 8007a0e:	e007      	b.n	8007a20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 f9a8 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f000 f9b4 	bl	8007d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d124      	bne.n	8007a7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d11d      	bne.n	8007a7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2209      	movs	r2, #9
 8007a48:	4252      	negs	r2, r2
 8007a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f989 	bl	8007d78 <HAL_TIM_IC_CaptureCallback>
 8007a66:	e007      	b.n	8007a78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f000 f97c 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	0018      	movs	r0, r3
 8007a74:	f000 f988 	bl	8007d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2210      	movs	r2, #16
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d125      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	2210      	movs	r2, #16
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d11e      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2211      	movs	r2, #17
 8007aa0:	4252      	negs	r2, r2
 8007aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	23c0      	movs	r3, #192	; 0xc0
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d004      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	0018      	movs	r0, r3
 8007abc:	f000 f95c 	bl	8007d78 <HAL_TIM_IC_CaptureCallback>
 8007ac0:	e007      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 f94f 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	0018      	movs	r0, r3
 8007ace:	f000 f95b 	bl	8007d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10f      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d108      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2202      	movs	r2, #2
 8007afa:	4252      	negs	r2, r2
 8007afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f00b f9cf 	bl	8012ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2280      	movs	r2, #128	; 0x80
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b80      	cmp	r3, #128	; 0x80
 8007b12:	d10f      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2280      	movs	r2, #128	; 0x80
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b80      	cmp	r3, #128	; 0x80
 8007b20:	d108      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2281      	movs	r2, #129	; 0x81
 8007b28:	4252      	negs	r2, r2
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f000 fabc 	bl	80080ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	2380      	movs	r3, #128	; 0x80
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	401a      	ands	r2, r3
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d10e      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2280      	movs	r2, #128	; 0x80
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b80      	cmp	r3, #128	; 0x80
 8007b54:	d107      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1c      	ldr	r2, [pc, #112]	; (8007bcc <HAL_TIM_IRQHandler+0x260>)
 8007b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 faab 	bl	80080bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2240      	movs	r2, #64	; 0x40
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b40      	cmp	r3, #64	; 0x40
 8007b72:	d10f      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2240      	movs	r2, #64	; 0x40
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d108      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2241      	movs	r2, #65	; 0x41
 8007b88:	4252      	negs	r2, r2
 8007b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f000 f902 	bl	8007d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d10f      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d108      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2221      	movs	r2, #33	; 0x21
 8007bb6:	4252      	negs	r2, r2
 8007bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f000 fa6d 	bl	800809c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	fffffeff 	.word	0xfffffeff

08007bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	223c      	movs	r2, #60	; 0x3c
 8007bde:	5c9b      	ldrb	r3, [r3, r2]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_ConfigClockSource+0x18>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e0b7      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x188>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	223c      	movs	r2, #60	; 0x3c
 8007bec:	2101      	movs	r1, #1
 8007bee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	223d      	movs	r2, #61	; 0x3d
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a57      	ldr	r2, [pc, #348]	; (8007d60 <HAL_TIM_ConfigClockSource+0x190>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a56      	ldr	r2, [pc, #344]	; (8007d64 <HAL_TIM_ConfigClockSource+0x194>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	0192      	lsls	r2, r2, #6
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d040      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0xd6>
 8007c24:	2280      	movs	r2, #128	; 0x80
 8007c26:	0192      	lsls	r2, r2, #6
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d900      	bls.n	8007c2e <HAL_TIM_ConfigClockSource+0x5e>
 8007c2c:	e088      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c2e:	2280      	movs	r2, #128	; 0x80
 8007c30:	0152      	lsls	r2, r2, #5
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d100      	bne.n	8007c38 <HAL_TIM_ConfigClockSource+0x68>
 8007c36:	e085      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
 8007c38:	2280      	movs	r2, #128	; 0x80
 8007c3a:	0152      	lsls	r2, r2, #5
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d900      	bls.n	8007c42 <HAL_TIM_ConfigClockSource+0x72>
 8007c40:	e07e      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c42:	2b70      	cmp	r3, #112	; 0x70
 8007c44:	d018      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0xa8>
 8007c46:	d900      	bls.n	8007c4a <HAL_TIM_ConfigClockSource+0x7a>
 8007c48:	e07a      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c4a:	2b60      	cmp	r3, #96	; 0x60
 8007c4c:	d04f      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x11e>
 8007c4e:	d900      	bls.n	8007c52 <HAL_TIM_ConfigClockSource+0x82>
 8007c50:	e076      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c52:	2b50      	cmp	r3, #80	; 0x50
 8007c54:	d03b      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0xfe>
 8007c56:	d900      	bls.n	8007c5a <HAL_TIM_ConfigClockSource+0x8a>
 8007c58:	e072      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d057      	beq.n	8007d0e <HAL_TIM_ConfigClockSource+0x13e>
 8007c5e:	d900      	bls.n	8007c62 <HAL_TIM_ConfigClockSource+0x92>
 8007c60:	e06e      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c62:	2b30      	cmp	r3, #48	; 0x30
 8007c64:	d063      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x15e>
 8007c66:	d86b      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d060      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x15e>
 8007c6c:	d868      	bhi.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d05d      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x15e>
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d05b      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c76:	e063      	b.n	8007d40 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	6899      	ldr	r1, [r3, #8]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f000 f980 	bl	8007f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2277      	movs	r2, #119	; 0x77
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	609a      	str	r2, [r3, #8]
      break;
 8007ca4:	e04f      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6899      	ldr	r1, [r3, #8]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f000 f969 	bl	8007f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2180      	movs	r1, #128	; 0x80
 8007cc6:	01c9      	lsls	r1, r1, #7
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
      break;
 8007ccc:	e03b      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6859      	ldr	r1, [r3, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	001a      	movs	r2, r3
 8007cdc:	f000 f8da 	bl	8007e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2150      	movs	r1, #80	; 0x50
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f000 f934 	bl	8007f54 <TIM_ITRx_SetConfig>
      break;
 8007cec:	e02b      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	6859      	ldr	r1, [r3, #4]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	f000 f8f8 	bl	8007ef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2160      	movs	r1, #96	; 0x60
 8007d06:	0018      	movs	r0, r3
 8007d08:	f000 f924 	bl	8007f54 <TIM_ITRx_SetConfig>
      break;
 8007d0c:	e01b      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6859      	ldr	r1, [r3, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	f000 f8ba 	bl	8007e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2140      	movs	r1, #64	; 0x40
 8007d26:	0018      	movs	r0, r3
 8007d28:	f000 f914 	bl	8007f54 <TIM_ITRx_SetConfig>
      break;
 8007d2c:	e00b      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	0019      	movs	r1, r3
 8007d38:	0010      	movs	r0, r2
 8007d3a:	f000 f90b 	bl	8007f54 <TIM_ITRx_SetConfig>
        break;
 8007d3e:	e002      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007d40:	46c0      	nop			; (mov r8, r8)
 8007d42:	e000      	b.n	8007d46 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007d44:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	223d      	movs	r2, #61	; 0x3d
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	223c      	movs	r2, #60	; 0x3c
 8007d52:	2100      	movs	r1, #0
 8007d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	0018      	movs	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b004      	add	sp, #16
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	ffceff88 	.word	0xffceff88
 8007d64:	ffff00ff 	.word	0xffff00ff

08007d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d70:	46c0      	nop			; (mov r8, r8)
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b002      	add	sp, #8
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d80:	46c0      	nop			; (mov r8, r8)
 8007d82:	46bd      	mov	sp, r7
 8007d84:	b002      	add	sp, #8
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d90:	46c0      	nop			; (mov r8, r8)
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007da0:	46c0      	nop			; (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b002      	add	sp, #8
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a2f      	ldr	r2, [pc, #188]	; (8007e78 <TIM_Base_SetConfig+0xd0>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_Base_SetConfig+0x20>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a2e      	ldr	r2, [pc, #184]	; (8007e7c <TIM_Base_SetConfig+0xd4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d108      	bne.n	8007dda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2270      	movs	r2, #112	; 0x70
 8007dcc:	4393      	bics	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a26      	ldr	r2, [pc, #152]	; (8007e78 <TIM_Base_SetConfig+0xd0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <TIM_Base_SetConfig+0x62>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a25      	ldr	r2, [pc, #148]	; (8007e7c <TIM_Base_SetConfig+0xd4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00f      	beq.n	8007e0a <TIM_Base_SetConfig+0x62>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <TIM_Base_SetConfig+0xd8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00b      	beq.n	8007e0a <TIM_Base_SetConfig+0x62>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a23      	ldr	r2, [pc, #140]	; (8007e84 <TIM_Base_SetConfig+0xdc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d007      	beq.n	8007e0a <TIM_Base_SetConfig+0x62>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a22      	ldr	r2, [pc, #136]	; (8007e88 <TIM_Base_SetConfig+0xe0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_Base_SetConfig+0x62>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <TIM_Base_SetConfig+0xe4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d108      	bne.n	8007e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <TIM_Base_SetConfig+0xe8>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2280      	movs	r2, #128	; 0x80
 8007e20:	4393      	bics	r3, r2
 8007e22:	001a      	movs	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <TIM_Base_SetConfig+0xd0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_Base_SetConfig+0xba>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a0d      	ldr	r2, [pc, #52]	; (8007e84 <TIM_Base_SetConfig+0xdc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_Base_SetConfig+0xba>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a0c      	ldr	r2, [pc, #48]	; (8007e88 <TIM_Base_SetConfig+0xe0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_Base_SetConfig+0xba>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <TIM_Base_SetConfig+0xe4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d103      	bne.n	8007e6a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	615a      	str	r2, [r3, #20]
}
 8007e70:	46c0      	nop			; (mov r8, r8)
 8007e72:	46bd      	mov	sp, r7
 8007e74:	b004      	add	sp, #16
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40000400 	.word	0x40000400
 8007e80:	40002000 	.word	0x40002000
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800
 8007e90:	fffffcff 	.word	0xfffffcff

08007e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4393      	bics	r3, r2
 8007eae:	001a      	movs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	22f0      	movs	r2, #240	; 0xf0
 8007ebe:	4393      	bics	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	220a      	movs	r2, #10
 8007ed0:	4393      	bics	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	621a      	str	r2, [r3, #32]
}
 8007ee8:	46c0      	nop			; (mov r8, r8)
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b006      	add	sp, #24
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	2210      	movs	r2, #16
 8007f02:	4393      	bics	r3, r2
 8007f04:	001a      	movs	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4a0d      	ldr	r2, [pc, #52]	; (8007f50 <TIM_TI2_ConfigInputStage+0x60>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	031b      	lsls	r3, r3, #12
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	22a0      	movs	r2, #160	; 0xa0
 8007f2c:	4393      	bics	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b006      	add	sp, #24
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	ffff0fff 	.word	0xffff0fff

08007f54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <TIM_ITRx_SetConfig+0x34>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	2207      	movs	r2, #7
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	609a      	str	r2, [r3, #8]
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b004      	add	sp, #16
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	ffcfff8f 	.word	0xffcfff8f

08007f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <TIM_ETR_SetConfig+0x3c>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	021a      	lsls	r2, r3, #8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	609a      	str	r2, [r3, #8]
}
 8007fc0:	46c0      	nop			; (mov r8, r8)
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b006      	add	sp, #24
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	ffff00ff 	.word	0xffff00ff

08007fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	223c      	movs	r2, #60	; 0x3c
 8007fda:	5c9b      	ldrb	r3, [r3, r2]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e04f      	b.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	223c      	movs	r2, #60	; 0x3c
 8007fe8:	2101      	movs	r1, #1
 8007fea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	223d      	movs	r2, #61	; 0x3d
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a20      	ldr	r2, [pc, #128]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d108      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008012:	4013      	ands	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2270      	movs	r2, #112	; 0x70
 8008024:	4393      	bics	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a13      	ldr	r2, [pc, #76]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d009      	beq.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a12      	ldr	r2, [pc, #72]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d004      	beq.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a11      	ldr	r2, [pc, #68]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d10c      	bne.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	4393      	bics	r3, r2
 800805e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	4313      	orrs	r3, r2
 8008068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	223d      	movs	r2, #61	; 0x3d
 8008076:	2101      	movs	r1, #1
 8008078:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	223c      	movs	r2, #60	; 0x3c
 800807e:	2100      	movs	r1, #0
 8008080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	0018      	movs	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	b004      	add	sp, #16
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40012c00 	.word	0x40012c00
 8008090:	ff0fffff 	.word	0xff0fffff
 8008094:	40000400 	.word	0x40000400
 8008098:	40014000 	.word	0x40014000

0800809c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080a4:	46c0      	nop			; (mov r8, r8)
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b002      	add	sp, #8
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080c4:	46c0      	nop			; (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b002      	add	sp, #8
 80080ca:	bd80      	pop	{r7, pc}

080080cc <DEV_SPI_WriteByte>:
#include "Display_Config/DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	0002      	movs	r2, r0
 80080d4:	1dfb      	adds	r3, r7, #7
 80080d6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80080d8:	23fa      	movs	r3, #250	; 0xfa
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	1df9      	adds	r1, r7, #7
 80080de:	4804      	ldr	r0, [pc, #16]	; (80080f0 <DEV_SPI_WriteByte+0x24>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	f7ff f8c7 	bl	8007274 <HAL_SPI_Transmit>
}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b002      	add	sp, #8
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	2000079c 	.word	0x2000079c

080080f4 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	0099      	lsls	r1, r3, #2
 80080fc:	23a0      	movs	r3, #160	; 0xa0
 80080fe:	05db      	lsls	r3, r3, #23
 8008100:	2200      	movs	r2, #0
 8008102:	0018      	movs	r0, r3
 8008104:	f7fc ff43 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	0059      	lsls	r1, r3, #1
 800810c:	23a0      	movs	r3, #160	; 0xa0
 800810e:	05db      	lsls	r3, r3, #23
 8008110:	2200      	movs	r2, #0
 8008112:	0018      	movs	r0, r3
 8008114:	f7fc ff3b 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008118:	2380      	movs	r3, #128	; 0x80
 800811a:	00d9      	lsls	r1, r3, #3
 800811c:	23a0      	movs	r3, #160	; 0xa0
 800811e:	05db      	lsls	r3, r3, #23
 8008120:	2201      	movs	r2, #1
 8008122:	0018      	movs	r0, r3
 8008124:	f7fc ff33 	bl	8004f8e <HAL_GPIO_WritePin>
		return 0;
 8008128:	2300      	movs	r3, #0
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008134:	2380      	movs	r3, #128	; 0x80
 8008136:	00d9      	lsls	r1, r3, #3
 8008138:	23a0      	movs	r3, #160	; 0xa0
 800813a:	05db      	lsls	r3, r3, #23
 800813c:	2201      	movs	r2, #1
 800813e:	0018      	movs	r0, r3
 8008140:	f7fc ff25 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8008144:	20c8      	movs	r0, #200	; 0xc8
 8008146:	f7fb f9db 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	00d9      	lsls	r1, r3, #3
 800814e:	23a0      	movs	r3, #160	; 0xa0
 8008150:	05db      	lsls	r3, r3, #23
 8008152:	2200      	movs	r2, #0
 8008154:	0018      	movs	r0, r3
 8008156:	f7fc ff1a 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800815a:	2002      	movs	r0, #2
 800815c:	f7fb f9d0 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8008160:	2380      	movs	r3, #128	; 0x80
 8008162:	00d9      	lsls	r1, r3, #3
 8008164:	23a0      	movs	r3, #160	; 0xa0
 8008166:	05db      	lsls	r3, r3, #23
 8008168:	2201      	movs	r2, #1
 800816a:	0018      	movs	r0, r3
 800816c:	f7fc ff0f 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8008170:	20c8      	movs	r0, #200	; 0xc8
 8008172:	f7fb f9c5 	bl	8003500 <HAL_Delay>
}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	0002      	movs	r2, r0
 8008184:	1dfb      	adds	r3, r7, #7
 8008186:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8008188:	2380      	movs	r3, #128	; 0x80
 800818a:	0099      	lsls	r1, r3, #2
 800818c:	23a0      	movs	r3, #160	; 0xa0
 800818e:	05db      	lsls	r3, r3, #23
 8008190:	2200      	movs	r2, #0
 8008192:	0018      	movs	r0, r3
 8008194:	f7fc fefb 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	0059      	lsls	r1, r3, #1
 800819c:	23a0      	movs	r3, #160	; 0xa0
 800819e:	05db      	lsls	r3, r3, #23
 80081a0:	2200      	movs	r2, #0
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7fc fef3 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80081a8:	1dfb      	adds	r3, r7, #7
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	0018      	movs	r0, r3
 80081ae:	f7ff ff8d 	bl	80080cc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	0059      	lsls	r1, r3, #1
 80081b6:	23a0      	movs	r3, #160	; 0xa0
 80081b8:	05db      	lsls	r3, r3, #23
 80081ba:	2201      	movs	r2, #1
 80081bc:	0018      	movs	r0, r3
 80081be:	f7fc fee6 	bl	8004f8e <HAL_GPIO_WritePin>
}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	46bd      	mov	sp, r7
 80081c6:	b002      	add	sp, #8
 80081c8:	bd80      	pop	{r7, pc}

080081ca <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	0002      	movs	r2, r0
 80081d2:	1dfb      	adds	r3, r7, #7
 80081d4:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80081d6:	2380      	movs	r3, #128	; 0x80
 80081d8:	0099      	lsls	r1, r3, #2
 80081da:	23a0      	movs	r3, #160	; 0xa0
 80081dc:	05db      	lsls	r3, r3, #23
 80081de:	2201      	movs	r2, #1
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7fc fed4 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80081e6:	2380      	movs	r3, #128	; 0x80
 80081e8:	0059      	lsls	r1, r3, #1
 80081ea:	23a0      	movs	r3, #160	; 0xa0
 80081ec:	05db      	lsls	r3, r3, #23
 80081ee:	2200      	movs	r2, #0
 80081f0:	0018      	movs	r0, r3
 80081f2:	f7fc fecc 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80081f6:	1dfb      	adds	r3, r7, #7
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7ff ff66 	bl	80080cc <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	0059      	lsls	r1, r3, #1
 8008204:	23a0      	movs	r3, #160	; 0xa0
 8008206:	05db      	lsls	r3, r3, #23
 8008208:	2201      	movs	r2, #1
 800820a:	0018      	movs	r0, r3
 800820c:	f7fc febf 	bl	8004f8e <HAL_GPIO_WritePin>
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}

08008218 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <EPD_1IN54_V2_ReadBusy+0x38>)
 800821e:	0018      	movs	r0, r3
 8008220:	f00b f82a 	bl	8013278 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8008224:	e002      	b.n	800822c <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8008226:	2064      	movs	r0, #100	; 0x64
 8008228:	f7fb f96a 	bl	8003500 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	23a0      	movs	r3, #160	; 0xa0
 8008232:	05db      	lsls	r3, r3, #23
 8008234:	0011      	movs	r1, r2
 8008236:	0018      	movs	r0, r3
 8008238:	f7fc fe8c 	bl	8004f54 <HAL_GPIO_ReadPin>
 800823c:	0003      	movs	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d0f1      	beq.n	8008226 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8008244:	0018      	movs	r0, r3
 8008246:	f00b f817 	bl	8013278 <puts>
}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	08015d00 	.word	0x08015d00
 8008254:	08015d18 	.word	0x08015d18

08008258 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800825c:	2022      	movs	r0, #34	; 0x22
 800825e:	f7ff ff8d 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 8008262:	20f7      	movs	r0, #247	; 0xf7
 8008264:	f7ff ffb1 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8008268:	2020      	movs	r0, #32
 800826a:	f7ff ff87 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800826e:	f7ff ffd3 	bl	8008218 <EPD_1IN54_V2_ReadBusy>
}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800827c:	2022      	movs	r0, #34	; 0x22
 800827e:	f7ff ff7d 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 8008282:	20ff      	movs	r0, #255	; 0xff
 8008284:	f7ff ffa1 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8008288:	2020      	movs	r0, #32
 800828a:	f7ff ff77 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800828e:	f7ff ffc3 	bl	8008218 <EPD_1IN54_V2_ReadBusy>
}
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800829c:	f7ff ff48 	bl	8008130 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 80082a0:	f7ff ffba 	bl	8008218 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 80082a4:	2012      	movs	r0, #18
 80082a6:	f7ff ff69 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80082aa:	f7ff ffb5 	bl	8008218 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 80082ae:	2001      	movs	r0, #1
 80082b0:	f7ff ff64 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 80082b4:	20c7      	movs	r0, #199	; 0xc7
 80082b6:	f7ff ff88 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80082ba:	2000      	movs	r0, #0
 80082bc:	f7ff ff85 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 80082c0:	2001      	movs	r0, #1
 80082c2:	f7ff ff82 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 80082c6:	2011      	movs	r0, #17
 80082c8:	f7ff ff58 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 80082cc:	2001      	movs	r0, #1
 80082ce:	f7ff ff7c 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 80082d2:	2044      	movs	r0, #68	; 0x44
 80082d4:	f7ff ff52 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 80082d8:	2000      	movs	r0, #0
 80082da:	f7ff ff76 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 80082de:	2018      	movs	r0, #24
 80082e0:	f7ff ff73 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 80082e4:	2045      	movs	r0, #69	; 0x45
 80082e6:	f7ff ff49 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 80082ea:	20c7      	movs	r0, #199	; 0xc7
 80082ec:	f7ff ff6d 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80082f0:	2000      	movs	r0, #0
 80082f2:	f7ff ff6a 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80082f6:	2000      	movs	r0, #0
 80082f8:	f7ff ff67 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7ff ff64 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8008302:	203c      	movs	r0, #60	; 0x3c
 8008304:	f7ff ff3a 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8008308:	2001      	movs	r0, #1
 800830a:	f7ff ff5e 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800830e:	2018      	movs	r0, #24
 8008310:	f7ff ff34 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8008314:	2080      	movs	r0, #128	; 0x80
 8008316:	f7ff ff58 	bl	80081ca <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800831a:	2022      	movs	r0, #34	; 0x22
 800831c:	f7ff ff2e 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 8008320:	20b1      	movs	r0, #177	; 0xb1
 8008322:	f7ff ff52 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8008326:	2020      	movs	r0, #32
 8008328:	f7ff ff28 	bl	800817c <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 800832c:	204e      	movs	r0, #78	; 0x4e
 800832e:	f7ff ff25 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8008332:	2000      	movs	r0, #0
 8008334:	f7ff ff49 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8008338:	204f      	movs	r0, #79	; 0x4f
 800833a:	f7ff ff1f 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800833e:	20c7      	movs	r0, #199	; 0xc7
 8008340:	f7ff ff43 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008344:	2000      	movs	r0, #0
 8008346:	f7ff ff40 	bl	80081ca <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 800834a:	f7ff ff65 	bl	8008218 <EPD_1IN54_V2_ReadBusy>
}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800835a:	1cbb      	adds	r3, r7, #2
 800835c:	2219      	movs	r2, #25
 800835e:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8008360:	003b      	movs	r3, r7
 8008362:	22c8      	movs	r2, #200	; 0xc8
 8008364:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 8008366:	2024      	movs	r0, #36	; 0x24
 8008368:	f7ff ff08 	bl	800817c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800836c:	1dbb      	adds	r3, r7, #6
 800836e:	2200      	movs	r2, #0
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e016      	b.n	80083a2 <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 8008374:	1d3b      	adds	r3, r7, #4
 8008376:	2200      	movs	r2, #0
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e007      	b.n	800838c <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 800837c:	20ff      	movs	r0, #255	; 0xff
 800837e:	f7ff ff24 	bl	80081ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	881a      	ldrh	r2, [r3, #0]
 8008386:	1d3b      	adds	r3, r7, #4
 8008388:	3201      	adds	r2, #1
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	1d3a      	adds	r2, r7, #4
 800838e:	1cbb      	adds	r3, r7, #2
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d3f1      	bcc.n	800837c <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 8008398:	1dbb      	adds	r3, r7, #6
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	1dbb      	adds	r3, r7, #6
 800839e:	3201      	adds	r2, #1
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	1dba      	adds	r2, r7, #6
 80083a4:	003b      	movs	r3, r7
 80083a6:	8812      	ldrh	r2, [r2, #0]
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d3e2      	bcc.n	8008374 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80083ae:	f7ff ff53 	bl	8008258 <EPD_1IN54_V2_TurnOnDisplay>
}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b002      	add	sp, #8
 80083b8:	bd80      	pop	{r7, pc}

080083ba <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80083ba:	b590      	push	{r4, r7, lr}
 80083bc:	b087      	sub	sp, #28
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80083c2:	2312      	movs	r3, #18
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2219      	movs	r2, #25
 80083c8:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80083ca:	2310      	movs	r3, #16
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	22c8      	movs	r2, #200	; 0xc8
 80083d0:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80083d6:	2024      	movs	r0, #36	; 0x24
 80083d8:	f7ff fed0 	bl	800817c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80083dc:	2316      	movs	r3, #22
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	2200      	movs	r2, #0
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	e02a      	b.n	800843c <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80083e6:	2314      	movs	r3, #20
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	2200      	movs	r2, #0
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e017      	b.n	8008420 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 80083f0:	2414      	movs	r4, #20
 80083f2:	193b      	adds	r3, r7, r4
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	2316      	movs	r3, #22
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	2112      	movs	r1, #18
 80083fe:	1879      	adds	r1, r7, r1
 8008400:	8809      	ldrh	r1, [r1, #0]
 8008402:	434b      	muls	r3, r1
 8008404:	18d3      	adds	r3, r2, r3
 8008406:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	18d3      	adds	r3, r2, r3
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff feda 	bl	80081ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008416:	193b      	adds	r3, r7, r4
 8008418:	881a      	ldrh	r2, [r3, #0]
 800841a:	193b      	adds	r3, r7, r4
 800841c:	3201      	adds	r2, #1
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	2314      	movs	r3, #20
 8008422:	18fa      	adds	r2, r7, r3
 8008424:	2312      	movs	r3, #18
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	8812      	ldrh	r2, [r2, #0]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d3df      	bcc.n	80083f0 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8008430:	2116      	movs	r1, #22
 8008432:	187b      	adds	r3, r7, r1
 8008434:	881a      	ldrh	r2, [r3, #0]
 8008436:	187b      	adds	r3, r7, r1
 8008438:	3201      	adds	r2, #1
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	2316      	movs	r3, #22
 800843e:	18fa      	adds	r2, r7, r3
 8008440:	2310      	movs	r3, #16
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	8812      	ldrh	r2, [r2, #0]
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d3cc      	bcc.n	80083e6 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800844c:	f7ff ff04 	bl	8008258 <EPD_1IN54_V2_TurnOnDisplay>
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b007      	add	sp, #28
 8008456:	bd90      	pop	{r4, r7, pc}

08008458 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8008460:	230e      	movs	r3, #14
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	2219      	movs	r2, #25
 8008466:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8008468:	230c      	movs	r3, #12
 800846a:	18fb      	adds	r3, r7, r3
 800846c:	22c8      	movs	r2, #200	; 0xc8
 800846e:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 8008474:	2024      	movs	r0, #36	; 0x24
 8008476:	f7ff fe81 	bl	800817c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800847a:	2316      	movs	r3, #22
 800847c:	18fb      	adds	r3, r7, r3
 800847e:	2200      	movs	r2, #0
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e02a      	b.n	80084da <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8008484:	2314      	movs	r3, #20
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	2200      	movs	r2, #0
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	e017      	b.n	80084be <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 800848e:	2414      	movs	r4, #20
 8008490:	193b      	adds	r3, r7, r4
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	2316      	movs	r3, #22
 8008496:	18fb      	adds	r3, r7, r3
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	210e      	movs	r1, #14
 800849c:	1879      	adds	r1, r7, r1
 800849e:	8809      	ldrh	r1, [r1, #0]
 80084a0:	434b      	muls	r3, r1
 80084a2:	18d3      	adds	r3, r2, r3
 80084a4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	18d3      	adds	r3, r2, r3
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7ff fe8b 	bl	80081ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80084b4:	193b      	adds	r3, r7, r4
 80084b6:	881a      	ldrh	r2, [r3, #0]
 80084b8:	193b      	adds	r3, r7, r4
 80084ba:	3201      	adds	r2, #1
 80084bc:	801a      	strh	r2, [r3, #0]
 80084be:	2314      	movs	r3, #20
 80084c0:	18fa      	adds	r2, r7, r3
 80084c2:	230e      	movs	r3, #14
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	8812      	ldrh	r2, [r2, #0]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d3df      	bcc.n	800848e <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 80084ce:	2116      	movs	r1, #22
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	187b      	adds	r3, r7, r1
 80084d6:	3201      	adds	r2, #1
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	2316      	movs	r3, #22
 80084dc:	18fa      	adds	r2, r7, r3
 80084de:	230c      	movs	r3, #12
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	8812      	ldrh	r2, [r2, #0]
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3cc      	bcc.n	8008484 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 80084ea:	2026      	movs	r0, #38	; 0x26
 80084ec:	f7ff fe46 	bl	800817c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80084f0:	2312      	movs	r3, #18
 80084f2:	18fb      	adds	r3, r7, r3
 80084f4:	2200      	movs	r2, #0
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	e02a      	b.n	8008550 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 80084fa:	2310      	movs	r3, #16
 80084fc:	18fb      	adds	r3, r7, r3
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	e017      	b.n	8008534 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8008504:	2410      	movs	r4, #16
 8008506:	193b      	adds	r3, r7, r4
 8008508:	881a      	ldrh	r2, [r3, #0]
 800850a:	2312      	movs	r3, #18
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	210e      	movs	r1, #14
 8008512:	1879      	adds	r1, r7, r1
 8008514:	8809      	ldrh	r1, [r1, #0]
 8008516:	434b      	muls	r3, r1
 8008518:	18d3      	adds	r3, r2, r3
 800851a:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	18d3      	adds	r3, r2, r3
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	0018      	movs	r0, r3
 8008526:	f7ff fe50 	bl	80081ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800852a:	193b      	adds	r3, r7, r4
 800852c:	881a      	ldrh	r2, [r3, #0]
 800852e:	193b      	adds	r3, r7, r4
 8008530:	3201      	adds	r2, #1
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	2310      	movs	r3, #16
 8008536:	18fa      	adds	r2, r7, r3
 8008538:	230e      	movs	r3, #14
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	8812      	ldrh	r2, [r2, #0]
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d3df      	bcc.n	8008504 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8008544:	2112      	movs	r1, #18
 8008546:	187b      	adds	r3, r7, r1
 8008548:	881a      	ldrh	r2, [r3, #0]
 800854a:	187b      	adds	r3, r7, r1
 800854c:	3201      	adds	r2, #1
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	2312      	movs	r3, #18
 8008552:	18fa      	adds	r2, r7, r3
 8008554:	230c      	movs	r3, #12
 8008556:	18fb      	adds	r3, r7, r3
 8008558:	8812      	ldrh	r2, [r2, #0]
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d3cc      	bcc.n	80084fa <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8008560:	f7ff fe8a 	bl	8008278 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	46bd      	mov	sp, r7
 8008568:	b007      	add	sp, #28
 800856a:	bd90      	pop	{r4, r7, pc}

0800856c <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800856c:	b590      	push	{r4, r7, lr}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8008574:	2312      	movs	r3, #18
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	2219      	movs	r2, #25
 800857a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800857c:	2310      	movs	r3, #16
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	22c8      	movs	r2, #200	; 0xc8
 8008582:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	00d9      	lsls	r1, r3, #3
 8008588:	23a0      	movs	r3, #160	; 0xa0
 800858a:	05db      	lsls	r3, r3, #23
 800858c:	2200      	movs	r2, #0
 800858e:	0018      	movs	r0, r3
 8008590:	f7fc fcfd 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8008594:	200a      	movs	r0, #10
 8008596:	f7fa ffb3 	bl	8003500 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800859a:	2380      	movs	r3, #128	; 0x80
 800859c:	00d9      	lsls	r1, r3, #3
 800859e:	23a0      	movs	r3, #160	; 0xa0
 80085a0:	05db      	lsls	r3, r3, #23
 80085a2:	2201      	movs	r2, #1
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7fc fcf2 	bl	8004f8e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80085aa:	200a      	movs	r0, #10
 80085ac:	f7fa ffa8 	bl	8003500 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80085b0:	203c      	movs	r0, #60	; 0x3c
 80085b2:	f7ff fde3 	bl	800817c <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80085b6:	2080      	movs	r0, #128	; 0x80
 80085b8:	f7ff fe07 	bl	80081ca <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80085c0:	2024      	movs	r0, #36	; 0x24
 80085c2:	f7ff fddb 	bl	800817c <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80085c6:	2316      	movs	r3, #22
 80085c8:	18fb      	adds	r3, r7, r3
 80085ca:	2200      	movs	r2, #0
 80085cc:	801a      	strh	r2, [r3, #0]
 80085ce:	e02a      	b.n	8008626 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 80085d0:	2314      	movs	r3, #20
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	2200      	movs	r2, #0
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e017      	b.n	800860a <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 80085da:	2414      	movs	r4, #20
 80085dc:	193b      	adds	r3, r7, r4
 80085de:	881a      	ldrh	r2, [r3, #0]
 80085e0:	2316      	movs	r3, #22
 80085e2:	18fb      	adds	r3, r7, r3
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	2112      	movs	r1, #18
 80085e8:	1879      	adds	r1, r7, r1
 80085ea:	8809      	ldrh	r1, [r1, #0]
 80085ec:	434b      	muls	r3, r1
 80085ee:	18d3      	adds	r3, r2, r3
 80085f0:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	18d3      	adds	r3, r2, r3
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	0018      	movs	r0, r3
 80085fc:	f7ff fde5 	bl	80081ca <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008600:	193b      	adds	r3, r7, r4
 8008602:	881a      	ldrh	r2, [r3, #0]
 8008604:	193b      	adds	r3, r7, r4
 8008606:	3201      	adds	r2, #1
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	2314      	movs	r3, #20
 800860c:	18fa      	adds	r2, r7, r3
 800860e:	2312      	movs	r3, #18
 8008610:	18fb      	adds	r3, r7, r3
 8008612:	8812      	ldrh	r2, [r2, #0]
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d3df      	bcc.n	80085da <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 800861a:	2116      	movs	r1, #22
 800861c:	187b      	adds	r3, r7, r1
 800861e:	881a      	ldrh	r2, [r3, #0]
 8008620:	187b      	adds	r3, r7, r1
 8008622:	3201      	adds	r2, #1
 8008624:	801a      	strh	r2, [r3, #0]
 8008626:	2316      	movs	r3, #22
 8008628:	18fa      	adds	r2, r7, r3
 800862a:	2310      	movs	r3, #16
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	8812      	ldrh	r2, [r2, #0]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d3cc      	bcc.n	80085d0 <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8008636:	f7ff fe1f 	bl	8008278 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b007      	add	sp, #28
 8008640:	bd90      	pop	{r4, r7, pc}
	...

08008644 <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 8008644:	b5b0      	push	{r4, r5, r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	000c      	movs	r4, r1
 800864e:	0010      	movs	r0, r2
 8008650:	0019      	movs	r1, r3
 8008652:	250a      	movs	r5, #10
 8008654:	197b      	adds	r3, r7, r5
 8008656:	1c22      	adds	r2, r4, #0
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	2408      	movs	r4, #8
 800865c:	193b      	adds	r3, r7, r4
 800865e:	1c02      	adds	r2, r0, #0
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	1dbb      	adds	r3, r7, #6
 8008664:	1c0a      	adds	r2, r1, #0
 8008666:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 8008668:	4b2c      	ldr	r3, [pc, #176]	; (800871c <Paint_NewImage+0xd8>)
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 800866e:	4b2b      	ldr	r3, [pc, #172]	; (800871c <Paint_NewImage+0xd8>)
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 8008674:	4b29      	ldr	r3, [pc, #164]	; (800871c <Paint_NewImage+0xd8>)
 8008676:	0029      	movs	r1, r5
 8008678:	187a      	adds	r2, r7, r1
 800867a:	8812      	ldrh	r2, [r2, #0]
 800867c:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 800867e:	4b27      	ldr	r3, [pc, #156]	; (800871c <Paint_NewImage+0xd8>)
 8008680:	193a      	adds	r2, r7, r4
 8008682:	8812      	ldrh	r2, [r2, #0]
 8008684:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 8008686:	4a25      	ldr	r2, [pc, #148]	; (800871c <Paint_NewImage+0xd8>)
 8008688:	2320      	movs	r3, #32
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8008690:	4b22      	ldr	r3, [pc, #136]	; (800871c <Paint_NewImage+0xd8>)
 8008692:	2202      	movs	r2, #2
 8008694:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8008696:	187b      	adds	r3, r7, r1
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	2207      	movs	r2, #7
 800869c:	4013      	ands	r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <Paint_NewImage+0x6a>
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	08db      	lsrs	r3, r3, #3
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	e006      	b.n	80086bc <Paint_NewImage+0x78>
 80086ae:	230a      	movs	r3, #10
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	08db      	lsrs	r3, r3, #3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3301      	adds	r3, #1
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4a17      	ldr	r2, [pc, #92]	; (800871c <Paint_NewImage+0xd8>)
 80086be:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 80086c0:	4b16      	ldr	r3, [pc, #88]	; (800871c <Paint_NewImage+0xd8>)
 80086c2:	2208      	movs	r2, #8
 80086c4:	18ba      	adds	r2, r7, r2
 80086c6:	8812      	ldrh	r2, [r2, #0]
 80086c8:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <Paint_NewImage+0xd8>)
 80086cc:	1dba      	adds	r2, r7, #6
 80086ce:	8812      	ldrh	r2, [r2, #0]
 80086d0:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <Paint_NewImage+0xd8>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80086d8:	1dbb      	adds	r3, r7, #6
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <Paint_NewImage+0xa4>
 80086e0:	1dbb      	adds	r3, r7, #6
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	2bb4      	cmp	r3, #180	; 0xb4
 80086e6:	d10a      	bne.n	80086fe <Paint_NewImage+0xba>
		Paint.Width = Width;
 80086e8:	4b0c      	ldr	r3, [pc, #48]	; (800871c <Paint_NewImage+0xd8>)
 80086ea:	220a      	movs	r2, #10
 80086ec:	18ba      	adds	r2, r7, r2
 80086ee:	8812      	ldrh	r2, [r2, #0]
 80086f0:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <Paint_NewImage+0xd8>)
 80086f4:	2208      	movs	r2, #8
 80086f6:	18ba      	adds	r2, r7, r2
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	80da      	strh	r2, [r3, #6]
 80086fc:	e00a      	b.n	8008714 <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <Paint_NewImage+0xd8>)
 8008700:	2208      	movs	r2, #8
 8008702:	18ba      	adds	r2, r7, r2
 8008704:	8812      	ldrh	r2, [r2, #0]
 8008706:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <Paint_NewImage+0xd8>)
 800870a:	220a      	movs	r2, #10
 800870c:	18ba      	adds	r2, r7, r2
 800870e:	8812      	ldrh	r2, [r2, #0]
 8008710:	80da      	strh	r2, [r3, #6]
	}
}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	46c0      	nop			; (mov r8, r8)
 8008716:	46bd      	mov	sp, r7
 8008718:	b004      	add	sp, #16
 800871a:	bdb0      	pop	{r4, r5, r7, pc}
 800871c:	200001d8 	.word	0x200001d8

08008720 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <Paint_SelectImage+0x18>)
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	b002      	add	sp, #8
 8008734:	bd80      	pop	{r7, pc}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	200001d8 	.word	0x200001d8

0800873c <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 800873c:	b590      	push	{r4, r7, lr}
 800873e:	b08b      	sub	sp, #44	; 0x2c
 8008740:	af00      	add	r7, sp, #0
 8008742:	0004      	movs	r4, r0
 8008744:	0008      	movs	r0, r1
 8008746:	0011      	movs	r1, r2
 8008748:	1dbb      	adds	r3, r7, #6
 800874a:	1c22      	adds	r2, r4, #0
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	1c02      	adds	r2, r0, #0
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	1cbb      	adds	r3, r7, #2
 8008756:	1c0a      	adds	r2, r1, #0
 8008758:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800875a:	4bc6      	ldr	r3, [pc, #792]	; (8008a74 <Paint_SetPixel+0x338>)
 800875c:	889b      	ldrh	r3, [r3, #4]
 800875e:	1dba      	adds	r2, r7, #6
 8008760:	8812      	ldrh	r2, [r2, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d805      	bhi.n	8008772 <Paint_SetPixel+0x36>
 8008766:	4bc3      	ldr	r3, [pc, #780]	; (8008a74 <Paint_SetPixel+0x338>)
 8008768:	88db      	ldrh	r3, [r3, #6]
 800876a:	1d3a      	adds	r2, r7, #4
 800876c:	8812      	ldrh	r2, [r2, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d904      	bls.n	800877c <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 8008772:	4bc1      	ldr	r3, [pc, #772]	; (8008a78 <Paint_SetPixel+0x33c>)
 8008774:	0018      	movs	r0, r3
 8008776:	f00a fd7f 	bl	8013278 <puts>
		return;
 800877a:	e180      	b.n	8008a7e <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 800877c:	4bbd      	ldr	r3, [pc, #756]	; (8008a74 <Paint_SetPixel+0x338>)
 800877e:	89db      	ldrh	r3, [r3, #14]
 8008780:	2287      	movs	r2, #135	; 0x87
 8008782:	0052      	lsls	r2, r2, #1
 8008784:	4293      	cmp	r3, r2
 8008786:	d03d      	beq.n	8008804 <Paint_SetPixel+0xc8>
 8008788:	2287      	movs	r2, #135	; 0x87
 800878a:	0052      	lsls	r2, r2, #1
 800878c:	4293      	cmp	r3, r2
 800878e:	dd00      	ble.n	8008792 <Paint_SetPixel+0x56>
 8008790:	e16e      	b.n	8008a70 <Paint_SetPixel+0x334>
 8008792:	2bb4      	cmp	r3, #180	; 0xb4
 8008794:	d021      	beq.n	80087da <Paint_SetPixel+0x9e>
 8008796:	dd00      	ble.n	800879a <Paint_SetPixel+0x5e>
 8008798:	e16a      	b.n	8008a70 <Paint_SetPixel+0x334>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <Paint_SetPixel+0x68>
 800879e:	2b5a      	cmp	r3, #90	; 0x5a
 80087a0:	d00b      	beq.n	80087ba <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80087a2:	e165      	b.n	8008a70 <Paint_SetPixel+0x334>
		X = Xpoint;
 80087a4:	2326      	movs	r3, #38	; 0x26
 80087a6:	18fb      	adds	r3, r7, r3
 80087a8:	1dba      	adds	r2, r7, #6
 80087aa:	8812      	ldrh	r2, [r2, #0]
 80087ac:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 80087ae:	2324      	movs	r3, #36	; 0x24
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	1d3a      	adds	r2, r7, #4
 80087b4:	8812      	ldrh	r2, [r2, #0]
 80087b6:	801a      	strh	r2, [r3, #0]
		break;
 80087b8:	e034      	b.n	8008824 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 80087ba:	4bae      	ldr	r3, [pc, #696]	; (8008a74 <Paint_SetPixel+0x338>)
 80087bc:	891a      	ldrh	r2, [r3, #8]
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	2326      	movs	r3, #38	; 0x26
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	3a01      	subs	r2, #1
 80087cc:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 80087ce:	2324      	movs	r3, #36	; 0x24
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	1dba      	adds	r2, r7, #6
 80087d4:	8812      	ldrh	r2, [r2, #0]
 80087d6:	801a      	strh	r2, [r3, #0]
		break;
 80087d8:	e024      	b.n	8008824 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 80087da:	4ba6      	ldr	r3, [pc, #664]	; (8008a74 <Paint_SetPixel+0x338>)
 80087dc:	891a      	ldrh	r2, [r3, #8]
 80087de:	1dbb      	adds	r3, r7, #6
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	2326      	movs	r3, #38	; 0x26
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	3a01      	subs	r2, #1
 80087ec:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 80087ee:	4ba1      	ldr	r3, [pc, #644]	; (8008a74 <Paint_SetPixel+0x338>)
 80087f0:	895a      	ldrh	r2, [r3, #10]
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	2324      	movs	r3, #36	; 0x24
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	3a01      	subs	r2, #1
 8008800:	801a      	strh	r2, [r3, #0]
		break;
 8008802:	e00f      	b.n	8008824 <Paint_SetPixel+0xe8>
		X = Ypoint;
 8008804:	2326      	movs	r3, #38	; 0x26
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	1d3a      	adds	r2, r7, #4
 800880a:	8812      	ldrh	r2, [r2, #0]
 800880c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 800880e:	4b99      	ldr	r3, [pc, #612]	; (8008a74 <Paint_SetPixel+0x338>)
 8008810:	895a      	ldrh	r2, [r3, #10]
 8008812:	1dbb      	adds	r3, r7, #6
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	b29a      	uxth	r2, r3
 800881a:	2324      	movs	r3, #36	; 0x24
 800881c:	18fb      	adds	r3, r7, r3
 800881e:	3a01      	subs	r2, #1
 8008820:	801a      	strh	r2, [r3, #0]
		break;
 8008822:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8008824:	4b93      	ldr	r3, [pc, #588]	; (8008a74 <Paint_SetPixel+0x338>)
 8008826:	8a1b      	ldrh	r3, [r3, #16]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d020      	beq.n	800886e <Paint_SetPixel+0x132>
 800882c:	dd00      	ble.n	8008830 <Paint_SetPixel+0xf4>
 800882e:	e125      	b.n	8008a7c <Paint_SetPixel+0x340>
 8008830:	2b02      	cmp	r3, #2
 8008832:	d011      	beq.n	8008858 <Paint_SetPixel+0x11c>
 8008834:	dd00      	ble.n	8008838 <Paint_SetPixel+0xfc>
 8008836:	e121      	b.n	8008a7c <Paint_SetPixel+0x340>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d02d      	beq.n	8008898 <Paint_SetPixel+0x15c>
 800883c:	2b01      	cmp	r3, #1
 800883e:	d000      	beq.n	8008842 <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 8008840:	e11c      	b.n	8008a7c <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 8008842:	4b8c      	ldr	r3, [pc, #560]	; (8008a74 <Paint_SetPixel+0x338>)
 8008844:	891a      	ldrh	r2, [r3, #8]
 8008846:	2126      	movs	r1, #38	; 0x26
 8008848:	187b      	adds	r3, r7, r1
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	b29a      	uxth	r2, r3
 8008850:	187b      	adds	r3, r7, r1
 8008852:	3a01      	subs	r2, #1
 8008854:	801a      	strh	r2, [r3, #0]
		break;
 8008856:	e020      	b.n	800889a <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 8008858:	4b86      	ldr	r3, [pc, #536]	; (8008a74 <Paint_SetPixel+0x338>)
 800885a:	895a      	ldrh	r2, [r3, #10]
 800885c:	2124      	movs	r1, #36	; 0x24
 800885e:	187b      	adds	r3, r7, r1
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	b29a      	uxth	r2, r3
 8008866:	187b      	adds	r3, r7, r1
 8008868:	3a01      	subs	r2, #1
 800886a:	801a      	strh	r2, [r3, #0]
		break;
 800886c:	e015      	b.n	800889a <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 800886e:	4b81      	ldr	r3, [pc, #516]	; (8008a74 <Paint_SetPixel+0x338>)
 8008870:	891a      	ldrh	r2, [r3, #8]
 8008872:	2126      	movs	r1, #38	; 0x26
 8008874:	187b      	adds	r3, r7, r1
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	b29a      	uxth	r2, r3
 800887c:	187b      	adds	r3, r7, r1
 800887e:	3a01      	subs	r2, #1
 8008880:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 8008882:	4b7c      	ldr	r3, [pc, #496]	; (8008a74 <Paint_SetPixel+0x338>)
 8008884:	895a      	ldrh	r2, [r3, #10]
 8008886:	2124      	movs	r1, #36	; 0x24
 8008888:	187b      	adds	r3, r7, r1
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	b29a      	uxth	r2, r3
 8008890:	187b      	adds	r3, r7, r1
 8008892:	3a01      	subs	r2, #1
 8008894:	801a      	strh	r2, [r3, #0]
		break;
 8008896:	e000      	b.n	800889a <Paint_SetPixel+0x15e>
		break;
 8008898:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 800889a:	4b76      	ldr	r3, [pc, #472]	; (8008a74 <Paint_SetPixel+0x338>)
 800889c:	891b      	ldrh	r3, [r3, #8]
 800889e:	2226      	movs	r2, #38	; 0x26
 80088a0:	18ba      	adds	r2, r7, r2
 80088a2:	8812      	ldrh	r2, [r2, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d806      	bhi.n	80088b6 <Paint_SetPixel+0x17a>
 80088a8:	4b72      	ldr	r3, [pc, #456]	; (8008a74 <Paint_SetPixel+0x338>)
 80088aa:	895b      	ldrh	r3, [r3, #10]
 80088ac:	2224      	movs	r2, #36	; 0x24
 80088ae:	18ba      	adds	r2, r7, r2
 80088b0:	8812      	ldrh	r2, [r2, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d904      	bls.n	80088c0 <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 80088b6:	4b70      	ldr	r3, [pc, #448]	; (8008a78 <Paint_SetPixel+0x33c>)
 80088b8:	0018      	movs	r0, r3
 80088ba:	f00a fcdd 	bl	8013278 <puts>
		return;
 80088be:	e0de      	b.n	8008a7e <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 80088c0:	4b6c      	ldr	r3, [pc, #432]	; (8008a74 <Paint_SetPixel+0x338>)
 80088c2:	8adb      	ldrh	r3, [r3, #22]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d145      	bne.n	8008954 <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80088c8:	2026      	movs	r0, #38	; 0x26
 80088ca:	183b      	adds	r3, r7, r0
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	0019      	movs	r1, r3
 80088d4:	2324      	movs	r3, #36	; 0x24
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	4a66      	ldr	r2, [pc, #408]	; (8008a74 <Paint_SetPixel+0x338>)
 80088dc:	8a52      	ldrh	r2, [r2, #18]
 80088de:	4353      	muls	r3, r2
 80088e0:	18cb      	adds	r3, r1, r3
 80088e2:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 80088e4:	4b63      	ldr	r3, [pc, #396]	; (8008a74 <Paint_SetPixel+0x338>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	18d2      	adds	r2, r2, r3
 80088ec:	210f      	movs	r1, #15
 80088ee:	187b      	adds	r3, r7, r1
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 80088f4:	1cbb      	adds	r3, r7, #2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d115      	bne.n	8008928 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80088fc:	183b      	adds	r3, r7, r0
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	2207      	movs	r2, #7
 8008902:	4013      	ands	r3, r2
 8008904:	2280      	movs	r2, #128	; 0x80
 8008906:	411a      	asrs	r2, r3
 8008908:	0013      	movs	r3, r2
 800890a:	b25b      	sxtb	r3, r3
 800890c:	43db      	mvns	r3, r3
 800890e:	b25b      	sxtb	r3, r3
 8008910:	187a      	adds	r2, r7, r1
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	b252      	sxtb	r2, r2
 8008916:	4013      	ands	r3, r2
 8008918:	b259      	sxtb	r1, r3
 800891a:	4b56      	ldr	r3, [pc, #344]	; (8008a74 <Paint_SetPixel+0x338>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	18d3      	adds	r3, r2, r3
 8008922:	b2ca      	uxtb	r2, r1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e0aa      	b.n	8008a7e <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8008928:	2326      	movs	r3, #38	; 0x26
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	2207      	movs	r2, #7
 8008930:	4013      	ands	r3, r2
 8008932:	2280      	movs	r2, #128	; 0x80
 8008934:	411a      	asrs	r2, r3
 8008936:	0013      	movs	r3, r2
 8008938:	b25a      	sxtb	r2, r3
 800893a:	230f      	movs	r3, #15
 800893c:	18fb      	adds	r3, r7, r3
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	b25b      	sxtb	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b259      	sxtb	r1, r3
 8008946:	4b4b      	ldr	r3, [pc, #300]	; (8008a74 <Paint_SetPixel+0x338>)
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	b2ca      	uxtb	r2, r1
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e094      	b.n	8008a7e <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 8008954:	4b47      	ldr	r3, [pc, #284]	; (8008a74 <Paint_SetPixel+0x338>)
 8008956:	8adb      	ldrh	r3, [r3, #22]
 8008958:	2b04      	cmp	r3, #4
 800895a:	d145      	bne.n	80089e8 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800895c:	2426      	movs	r4, #38	; 0x26
 800895e:	193b      	adds	r3, r7, r4
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	089b      	lsrs	r3, r3, #2
 8008964:	b29b      	uxth	r3, r3
 8008966:	0019      	movs	r1, r3
 8008968:	2324      	movs	r3, #36	; 0x24
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	4a41      	ldr	r2, [pc, #260]	; (8008a74 <Paint_SetPixel+0x338>)
 8008970:	8a52      	ldrh	r2, [r2, #18]
 8008972:	4353      	muls	r3, r2
 8008974:	18cb      	adds	r3, r1, r3
 8008976:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 8008978:	1cbb      	adds	r3, r7, #2
 800897a:	1cba      	adds	r2, r7, #2
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	2103      	movs	r1, #3
 8008980:	400a      	ands	r2, r1
 8008982:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 8008984:	4b3b      	ldr	r3, [pc, #236]	; (8008a74 <Paint_SetPixel+0x338>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	18d2      	adds	r2, r2, r3
 800898c:	2017      	movs	r0, #23
 800898e:	183b      	adds	r3, r7, r0
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8008994:	0021      	movs	r1, r4
 8008996:	187b      	adds	r3, r7, r1
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4013      	ands	r3, r2
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	22c0      	movs	r2, #192	; 0xc0
 80089a2:	411a      	asrs	r2, r3
 80089a4:	0013      	movs	r3, r2
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	43db      	mvns	r3, r3
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	183a      	adds	r2, r7, r0
 80089ae:	7812      	ldrb	r2, [r2, #0]
 80089b0:	b252      	sxtb	r2, r2
 80089b2:	4013      	ands	r3, r2
 80089b4:	b25a      	sxtb	r2, r3
 80089b6:	183b      	adds	r3, r7, r0
 80089b8:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 80089ba:	1cbb      	adds	r3, r7, #2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	019a      	lsls	r2, r3, #6
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	2103      	movs	r1, #3
 80089c6:	400b      	ands	r3, r1
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	411a      	asrs	r2, r3
 80089cc:	0013      	movs	r3, r2
 80089ce:	b25a      	sxtb	r2, r3
 80089d0:	183b      	adds	r3, r7, r0
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	4313      	orrs	r3, r2
 80089d8:	b259      	sxtb	r1, r3
 80089da:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <Paint_SetPixel+0x338>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	18d3      	adds	r3, r2, r3
 80089e2:	b2ca      	uxtb	r2, r1
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	e04a      	b.n	8008a7e <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 80089e8:	4b22      	ldr	r3, [pc, #136]	; (8008a74 <Paint_SetPixel+0x338>)
 80089ea:	8adb      	ldrh	r3, [r3, #22]
 80089ec:	2b07      	cmp	r3, #7
 80089ee:	d146      	bne.n	8008a7e <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 80089f0:	2426      	movs	r4, #38	; 0x26
 80089f2:	193b      	adds	r3, r7, r4
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	085b      	lsrs	r3, r3, #1
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	0019      	movs	r1, r3
 80089fc:	2324      	movs	r3, #36	; 0x24
 80089fe:	18fb      	adds	r3, r7, r3
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	4a1c      	ldr	r2, [pc, #112]	; (8008a74 <Paint_SetPixel+0x338>)
 8008a04:	8a52      	ldrh	r2, [r2, #18]
 8008a06:	4353      	muls	r3, r2
 8008a08:	18cb      	adds	r3, r1, r3
 8008a0a:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8008a0c:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <Paint_SetPixel+0x338>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	18d2      	adds	r2, r2, r3
 8008a14:	201f      	movs	r0, #31
 8008a16:	183b      	adds	r3, r7, r0
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 8008a1c:	0021      	movs	r1, r4
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	2201      	movs	r2, #1
 8008a24:	4013      	ands	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	22f0      	movs	r2, #240	; 0xf0
 8008a2a:	411a      	asrs	r2, r3
 8008a2c:	0013      	movs	r3, r2
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	43db      	mvns	r3, r3
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	183a      	adds	r2, r7, r0
 8008a36:	7812      	ldrb	r2, [r2, #0]
 8008a38:	b252      	sxtb	r2, r2
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	b25a      	sxtb	r2, r3
 8008a3e:	183b      	adds	r3, r7, r0
 8008a40:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8008a42:	1cbb      	adds	r3, r7, #2
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	011a      	lsls	r2, r3, #4
 8008a48:	187b      	adds	r3, r7, r1
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	400b      	ands	r3, r1
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	411a      	asrs	r2, r3
 8008a54:	0013      	movs	r3, r2
 8008a56:	b25a      	sxtb	r2, r3
 8008a58:	183b      	adds	r3, r7, r0
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b259      	sxtb	r1, r3
 8008a62:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <Paint_SetPixel+0x338>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	18d3      	adds	r3, r2, r3
 8008a6a:	b2ca      	uxtb	r2, r1
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e006      	b.n	8008a7e <Paint_SetPixel+0x342>
		return;
 8008a70:	46c0      	nop			; (mov r8, r8)
 8008a72:	e004      	b.n	8008a7e <Paint_SetPixel+0x342>
 8008a74:	200001d8 	.word	0x200001d8
 8008a78:	08015e60 	.word	0x08015e60
		return;
 8008a7c:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b00b      	add	sp, #44	; 0x2c
 8008a82:	bd90      	pop	{r4, r7, pc}

08008a84 <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	0002      	movs	r2, r0
 8008a8c:	1dbb      	adds	r3, r7, #6
 8008a8e:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 8008a90:	4b42      	ldr	r3, [pc, #264]	; (8008b9c <Paint_Clear+0x118>)
 8008a92:	8adb      	ldrh	r3, [r3, #22]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d003      	beq.n	8008aa0 <Paint_Clear+0x1c>
 8008a98:	4b40      	ldr	r3, [pc, #256]	; (8008b9c <Paint_Clear+0x118>)
 8008a9a:	8adb      	ldrh	r3, [r3, #22]
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d136      	bne.n	8008b0e <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008aa0:	2316      	movs	r3, #22
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e029      	b.n	8008afe <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008aaa:	2314      	movs	r3, #20
 8008aac:	18fb      	adds	r3, r7, r3
 8008aae:	2200      	movs	r2, #0
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e017      	b.n	8008ae4 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008ab4:	2014      	movs	r0, #20
 8008ab6:	183b      	adds	r3, r7, r0
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	2316      	movs	r3, #22
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	4936      	ldr	r1, [pc, #216]	; (8008b9c <Paint_Clear+0x118>)
 8008ac2:	8a49      	ldrh	r1, [r1, #18]
 8008ac4:	434b      	muls	r3, r1
 8008ac6:	18d3      	adds	r3, r2, r3
 8008ac8:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8008aca:	4b34      	ldr	r3, [pc, #208]	; (8008b9c <Paint_Clear+0x118>)
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	18d3      	adds	r3, r2, r3
 8008ad2:	1dba      	adds	r2, r7, #6
 8008ad4:	8812      	ldrh	r2, [r2, #0]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8008ada:	183b      	adds	r3, r7, r0
 8008adc:	881a      	ldrh	r2, [r3, #0]
 8008ade:	183b      	adds	r3, r7, r0
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	4b2d      	ldr	r3, [pc, #180]	; (8008b9c <Paint_Clear+0x118>)
 8008ae6:	8a5b      	ldrh	r3, [r3, #18]
 8008ae8:	2214      	movs	r2, #20
 8008aea:	18ba      	adds	r2, r7, r2
 8008aec:	8812      	ldrh	r2, [r2, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d3e0      	bcc.n	8008ab4 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008af2:	2116      	movs	r1, #22
 8008af4:	187b      	adds	r3, r7, r1
 8008af6:	881a      	ldrh	r2, [r3, #0]
 8008af8:	187b      	adds	r3, r7, r1
 8008afa:	3201      	adds	r2, #1
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	4b27      	ldr	r3, [pc, #156]	; (8008b9c <Paint_Clear+0x118>)
 8008b00:	8a9b      	ldrh	r3, [r3, #20]
 8008b02:	2216      	movs	r2, #22
 8008b04:	18ba      	adds	r2, r7, r2
 8008b06:	8812      	ldrh	r2, [r2, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d3ce      	bcc.n	8008aaa <Paint_Clear+0x26>
 8008b0c:	e041      	b.n	8008b92 <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 8008b0e:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <Paint_Clear+0x118>)
 8008b10:	8adb      	ldrh	r3, [r3, #22]
 8008b12:	2b07      	cmp	r3, #7
 8008b14:	d13d      	bne.n	8008b92 <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008b16:	2312      	movs	r3, #18
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	801a      	strh	r2, [r3, #0]
 8008b1e:	e030      	b.n	8008b82 <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008b20:	2310      	movs	r3, #16
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	2200      	movs	r2, #0
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e01e      	b.n	8008b68 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 8008b2a:	2010      	movs	r0, #16
 8008b2c:	183b      	adds	r3, r7, r0
 8008b2e:	881a      	ldrh	r2, [r3, #0]
 8008b30:	2312      	movs	r3, #18
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	4919      	ldr	r1, [pc, #100]	; (8008b9c <Paint_Clear+0x118>)
 8008b38:	8a49      	ldrh	r1, [r1, #18]
 8008b3a:	434b      	muls	r3, r1
 8008b3c:	18d3      	adds	r3, r2, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 8008b40:	1dbb      	adds	r3, r7, #6
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	b25a      	sxtb	r2, r3
 8008b48:	1dbb      	adds	r3, r7, #6
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b259      	sxtb	r1, r3
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <Paint_Clear+0x118>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	b2ca      	uxtb	r2, r1
 8008b5c:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008b5e:	183b      	adds	r3, r7, r0
 8008b60:	881a      	ldrh	r2, [r3, #0]
 8008b62:	183b      	adds	r3, r7, r0
 8008b64:	3201      	adds	r2, #1
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <Paint_Clear+0x118>)
 8008b6a:	8a5b      	ldrh	r3, [r3, #18]
 8008b6c:	2210      	movs	r2, #16
 8008b6e:	18ba      	adds	r2, r7, r2
 8008b70:	8812      	ldrh	r2, [r2, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d3d9      	bcc.n	8008b2a <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008b76:	2112      	movs	r1, #18
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	881a      	ldrh	r2, [r3, #0]
 8008b7c:	187b      	adds	r3, r7, r1
 8008b7e:	3201      	adds	r2, #1
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <Paint_Clear+0x118>)
 8008b84:	8a9b      	ldrh	r3, [r3, #20]
 8008b86:	2212      	movs	r2, #18
 8008b88:	18ba      	adds	r2, r7, r2
 8008b8a:	8812      	ldrh	r2, [r2, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3c7      	bcc.n	8008b20 <Paint_Clear+0x9c>
			}
		}
	}
}
 8008b90:	e7ff      	b.n	8008b92 <Paint_Clear+0x10e>
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b006      	add	sp, #24
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	200001d8 	.word	0x200001d8

08008ba0 <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 8008ba0:	b5b0      	push	{r4, r5, r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	0005      	movs	r5, r0
 8008ba8:	000c      	movs	r4, r1
 8008baa:	0010      	movs	r0, r2
 8008bac:	0019      	movs	r1, r3
 8008bae:	1dbb      	adds	r3, r7, #6
 8008bb0:	1c2a      	adds	r2, r5, #0
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	1d3b      	adds	r3, r7, #4
 8008bb6:	1c22      	adds	r2, r4, #0
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	1cbb      	adds	r3, r7, #2
 8008bbc:	1c02      	adds	r2, r0, #0
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	1c7b      	adds	r3, r7, #1
 8008bc2:	1c0a      	adds	r2, r1, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008bc6:	4b67      	ldr	r3, [pc, #412]	; (8008d64 <Paint_DrawPoint+0x1c4>)
 8008bc8:	889b      	ldrh	r3, [r3, #4]
 8008bca:	1dba      	adds	r2, r7, #6
 8008bcc:	8812      	ldrh	r2, [r2, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d805      	bhi.n	8008bde <Paint_DrawPoint+0x3e>
 8008bd2:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <Paint_DrawPoint+0x1c4>)
 8008bd4:	88db      	ldrh	r3, [r3, #6]
 8008bd6:	1d3a      	adds	r2, r7, #4
 8008bd8:	8812      	ldrh	r2, [r2, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d916      	bls.n	8008c0c <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8008bde:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <Paint_DrawPoint+0x1c8>)
 8008be0:	0018      	movs	r0, r3
 8008be2:	f00a fb49 	bl	8013278 <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8008be6:	1dbb      	adds	r3, r7, #6
 8008be8:	8819      	ldrh	r1, [r3, #0]
 8008bea:	4b5e      	ldr	r3, [pc, #376]	; (8008d64 <Paint_DrawPoint+0x1c4>)
 8008bec:	889b      	ldrh	r3, [r3, #4]
 8008bee:	001a      	movs	r2, r3
 8008bf0:	4b5e      	ldr	r3, [pc, #376]	; (8008d6c <Paint_DrawPoint+0x1cc>)
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f00a fab4 	bl	8013160 <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8008bf8:	1d3b      	adds	r3, r7, #4
 8008bfa:	8819      	ldrh	r1, [r3, #0]
 8008bfc:	4b59      	ldr	r3, [pc, #356]	; (8008d64 <Paint_DrawPoint+0x1c4>)
 8008bfe:	88db      	ldrh	r3, [r3, #6]
 8008c00:	001a      	movs	r2, r3
 8008c02:	4b5b      	ldr	r3, [pc, #364]	; (8008d70 <Paint_DrawPoint+0x1d0>)
 8008c04:	0018      	movs	r0, r3
 8008c06:	f00a faab 	bl	8013160 <iprintf>
		return;
 8008c0a:	e0a8      	b.n	8008d5e <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d161      	bne.n	8008cda <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008c16:	230e      	movs	r3, #14
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	801a      	strh	r2, [r3, #0]
 8008c1e:	e051      	b.n	8008cc4 <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008c20:	230c      	movs	r3, #12
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	2200      	movs	r2, #0
 8008c26:	801a      	strh	r2, [r3, #0]
 8008c28:	e039      	b.n	8008c9e <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 8008c2a:	1dbb      	adds	r3, r7, #6
 8008c2c:	881a      	ldrh	r2, [r3, #0]
 8008c2e:	200e      	movs	r0, #14
 8008c30:	183b      	adds	r3, r7, r0
 8008c32:	2100      	movs	r1, #0
 8008c34:	5e5b      	ldrsh	r3, [r3, r1]
 8008c36:	18d2      	adds	r2, r2, r3
 8008c38:	1c7b      	adds	r3, r7, #1
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	d438      	bmi.n	8008cb2 <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	210c      	movs	r1, #12
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	2400      	movs	r4, #0
 8008c4a:	5f1b      	ldrsh	r3, [r3, r4]
 8008c4c:	18d2      	adds	r2, r2, r3
 8008c4e:	1c7b      	adds	r3, r7, #1
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	d42d      	bmi.n	8008cb2 <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008c56:	183b      	adds	r3, r7, r0
 8008c58:	881a      	ldrh	r2, [r3, #0]
 8008c5a:	1dbb      	adds	r3, r7, #6
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	18d3      	adds	r3, r2, r3
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	1c7b      	adds	r3, r7, #1
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 8008c6c:	000c      	movs	r4, r1
 8008c6e:	187b      	adds	r3, r7, r1
 8008c70:	881a      	ldrh	r2, [r3, #0]
 8008c72:	1d3b      	adds	r3, r7, #4
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	18d3      	adds	r3, r2, r3
 8008c78:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008c7a:	1c7b      	adds	r3, r7, #1
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	b299      	uxth	r1, r3
 8008c84:	1cbb      	adds	r3, r7, #2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	001a      	movs	r2, r3
 8008c8a:	f7ff fd57 	bl	800873c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008c8e:	193b      	adds	r3, r7, r4
 8008c90:	2200      	movs	r2, #0
 8008c92:	5e9b      	ldrsh	r3, [r3, r2]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	193b      	adds	r3, r7, r4
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	18fb      	adds	r3, r7, r3
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	5e9a      	ldrsh	r2, [r3, r2]
 8008ca6:	1c7b      	adds	r3, r7, #1
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	3b01      	subs	r3, #1
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	dbbb      	blt.n	8008c2a <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008cb2:	210e      	movs	r1, #14
 8008cb4:	187b      	adds	r3, r7, r1
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	5e9b      	ldrsh	r3, [r3, r2]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	187b      	adds	r3, r7, r1
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	230e      	movs	r3, #14
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	2200      	movs	r2, #0
 8008cca:	5e9a      	ldrsh	r2, [r3, r2]
 8008ccc:	1c7b      	adds	r3, r7, #1
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	dba3      	blt.n	8008c20 <Paint_DrawPoint+0x80>
 8008cd8:	e041      	b.n	8008d5e <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008cda:	230e      	movs	r3, #14
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	2200      	movs	r2, #0
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	e034      	b.n	8008d4e <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	2200      	movs	r2, #0
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e01e      	b.n	8008d2c <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 8008cee:	230e      	movs	r3, #14
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	881a      	ldrh	r2, [r3, #0]
 8008cf4:	1dbb      	adds	r3, r7, #6
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	18d3      	adds	r3, r2, r3
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b298      	uxth	r0, r3
 8008d00:	240c      	movs	r4, #12
 8008d02:	193b      	adds	r3, r7, r4
 8008d04:	881a      	ldrh	r2, [r3, #0]
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	18d3      	adds	r3, r2, r3
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b299      	uxth	r1, r3
 8008d12:	1cbb      	adds	r3, r7, #2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	001a      	movs	r2, r3
 8008d18:	f7ff fd10 	bl	800873c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008d1c:	193b      	adds	r3, r7, r4
 8008d1e:	2200      	movs	r2, #0
 8008d20:	5e9b      	ldrsh	r3, [r3, r2]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3301      	adds	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	193b      	adds	r3, r7, r4
 8008d2a:	801a      	strh	r2, [r3, #0]
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	2200      	movs	r2, #0
 8008d32:	5e9a      	ldrsh	r2, [r3, r2]
 8008d34:	1c7b      	adds	r3, r7, #1
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	dbd8      	blt.n	8008cee <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008d3c:	210e      	movs	r1, #14
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	2200      	movs	r2, #0
 8008d42:	5e9b      	ldrsh	r3, [r3, r2]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3301      	adds	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	187b      	adds	r3, r7, r1
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	230e      	movs	r3, #14
 8008d50:	18fb      	adds	r3, r7, r3
 8008d52:	2200      	movs	r2, #0
 8008d54:	5e9a      	ldrsh	r2, [r3, r2]
 8008d56:	1c7b      	adds	r3, r7, #1
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	dbc2      	blt.n	8008ce4 <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b004      	add	sp, #16
 8008d62:	bdb0      	pop	{r4, r5, r7, pc}
 8008d64:	200001d8 	.word	0x200001d8
 8008d68:	08015e88 	.word	0x08015e88
 8008d6c:	08015ec8 	.word	0x08015ec8
 8008d70:	08015eec 	.word	0x08015eec

08008d74 <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008d74:	b5b0      	push	{r4, r5, r7, lr}
 8008d76:	b08c      	sub	sp, #48	; 0x30
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	0005      	movs	r5, r0
 8008d7c:	000c      	movs	r4, r1
 8008d7e:	0010      	movs	r0, r2
 8008d80:	0019      	movs	r1, r3
 8008d82:	1dbb      	adds	r3, r7, #6
 8008d84:	1c2a      	adds	r2, r5, #0
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	1d3b      	adds	r3, r7, #4
 8008d8a:	1c22      	adds	r2, r4, #0
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	1cbb      	adds	r3, r7, #2
 8008d90:	1c02      	adds	r2, r0, #0
 8008d92:	801a      	strh	r2, [r3, #0]
 8008d94:	003b      	movs	r3, r7
 8008d96:	1c0a      	adds	r2, r1, #0
 8008d98:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8008d9a:	4b63      	ldr	r3, [pc, #396]	; (8008f28 <Paint_DrawLine+0x1b4>)
 8008d9c:	889b      	ldrh	r3, [r3, #4]
 8008d9e:	1dba      	adds	r2, r7, #6
 8008da0:	8812      	ldrh	r2, [r2, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d811      	bhi.n	8008dca <Paint_DrawLine+0x56>
 8008da6:	4b60      	ldr	r3, [pc, #384]	; (8008f28 <Paint_DrawLine+0x1b4>)
 8008da8:	88db      	ldrh	r3, [r3, #6]
 8008daa:	1d3a      	adds	r2, r7, #4
 8008dac:	8812      	ldrh	r2, [r2, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d80b      	bhi.n	8008dca <Paint_DrawLine+0x56>
 8008db2:	4b5d      	ldr	r3, [pc, #372]	; (8008f28 <Paint_DrawLine+0x1b4>)
 8008db4:	889b      	ldrh	r3, [r3, #4]
 8008db6:	1cba      	adds	r2, r7, #2
 8008db8:	8812      	ldrh	r2, [r2, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d805      	bhi.n	8008dca <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 8008dbe:	4b5a      	ldr	r3, [pc, #360]	; (8008f28 <Paint_DrawLine+0x1b4>)
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	003a      	movs	r2, r7
 8008dc4:	8812      	ldrh	r2, [r2, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d904      	bls.n	8008dd4 <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008dca:	4b58      	ldr	r3, [pc, #352]	; (8008f2c <Paint_DrawLine+0x1b8>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f00a fa53 	bl	8013278 <puts>
		return;
 8008dd2:	e0a5      	b.n	8008f20 <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 8008dd4:	2326      	movs	r3, #38	; 0x26
 8008dd6:	18fb      	adds	r3, r7, r3
 8008dd8:	1dba      	adds	r2, r7, #6
 8008dda:	8812      	ldrh	r2, [r2, #0]
 8008ddc:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 8008dde:	2324      	movs	r3, #36	; 0x24
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	1d3a      	adds	r2, r7, #4
 8008de4:	8812      	ldrh	r2, [r2, #0]
 8008de6:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008de8:	1cbb      	adds	r3, r7, #2
 8008dea:	881a      	ldrh	r2, [r3, #0]
 8008dec:	1dbb      	adds	r3, r7, #6
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	17da      	asrs	r2, r3, #31
 8008df4:	189b      	adds	r3, r3, r2
 8008df6:	4053      	eors	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008dfa:	003b      	movs	r3, r7
 8008dfc:	881a      	ldrh	r2, [r3, #0]
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	17da      	asrs	r2, r3, #31
 8008e06:	189b      	adds	r3, r3, r2
 8008e08:	4053      	eors	r3, r2
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 8008e0e:	1dba      	adds	r2, r7, #6
 8008e10:	1cbb      	adds	r3, r7, #2
 8008e12:	8812      	ldrh	r2, [r2, #0]
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d201      	bcs.n	8008e1e <Paint_DrawLine+0xaa>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e001      	b.n	8008e22 <Paint_DrawLine+0xae>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	425b      	negs	r3, r3
 8008e22:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8008e24:	1d3a      	adds	r2, r7, #4
 8008e26:	003b      	movs	r3, r7
 8008e28:	8812      	ldrh	r2, [r2, #0]
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d201      	bcs.n	8008e34 <Paint_DrawLine+0xc0>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e001      	b.n	8008e38 <Paint_DrawLine+0xc4>
 8008e34:	2301      	movs	r3, #1
 8008e36:	425b      	negs	r3, r3
 8008e38:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	18d3      	adds	r3, r2, r3
 8008e40:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 8008e42:	231f      	movs	r3, #31
 8008e44:	18fb      	adds	r3, r7, r3
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 8008e4a:	241f      	movs	r4, #31
 8008e4c:	193b      	adds	r3, r7, r4
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	193b      	adds	r3, r7, r4
 8008e52:	3201      	adds	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	18fb      	adds	r3, r7, r3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d11c      	bne.n	8008e9a <Paint_DrawLine+0x126>
 8008e60:	193b      	adds	r3, r7, r4
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2103      	movs	r1, #3
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7f7 f9da 	bl	8000220 <__aeabi_uidivmod>
 8008e6c:	000b      	movs	r3, r1
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d112      	bne.n	8008e9a <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 8008e74:	233c      	movs	r3, #60	; 0x3c
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	2324      	movs	r3, #36	; 0x24
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	8819      	ldrh	r1, [r3, #0]
 8008e80:	2326      	movs	r3, #38	; 0x26
 8008e82:	18fb      	adds	r3, r7, r3
 8008e84:	8818      	ldrh	r0, [r3, #0]
 8008e86:	2301      	movs	r3, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	0013      	movs	r3, r2
 8008e8c:	22ff      	movs	r2, #255	; 0xff
 8008e8e:	f7ff fe87 	bl	8008ba0 <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 8008e92:	193b      	adds	r3, r7, r4
 8008e94:	2200      	movs	r2, #0
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e010      	b.n	8008ebc <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008e9a:	233c      	movs	r3, #60	; 0x3c
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	781c      	ldrb	r4, [r3, #0]
 8008ea0:	2338      	movs	r3, #56	; 0x38
 8008ea2:	18fb      	adds	r3, r7, r3
 8008ea4:	881a      	ldrh	r2, [r3, #0]
 8008ea6:	2324      	movs	r3, #36	; 0x24
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	8819      	ldrh	r1, [r3, #0]
 8008eac:	2326      	movs	r3, #38	; 0x26
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	8818      	ldrh	r0, [r3, #0]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	0023      	movs	r3, r4
 8008eb8:	f7ff fe72 	bl	8008ba0 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	dc11      	bgt.n	8008eea <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 8008ec6:	2026      	movs	r0, #38	; 0x26
 8008ec8:	183a      	adds	r2, r7, r0
 8008eca:	1cbb      	adds	r3, r7, #2
 8008ecc:	8812      	ldrh	r2, [r2, #0]
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d022      	beq.n	8008f1a <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 8008ed4:	6a3a      	ldr	r2, [r7, #32]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	18d3      	adds	r3, r2, r3
 8008eda:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	b299      	uxth	r1, r3
 8008ee0:	183b      	adds	r3, r7, r0
 8008ee2:	183a      	adds	r2, r7, r0
 8008ee4:	8812      	ldrh	r2, [r2, #0]
 8008ee6:	188a      	adds	r2, r1, r2
 8008ee8:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	dbaa      	blt.n	8008e4a <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 8008ef4:	2024      	movs	r0, #36	; 0x24
 8008ef6:	183a      	adds	r2, r7, r0
 8008ef8:	003b      	movs	r3, r7
 8008efa:	8812      	ldrh	r2, [r2, #0]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d00d      	beq.n	8008f1e <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 8008f02:	6a3a      	ldr	r2, [r7, #32]
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	18d3      	adds	r3, r2, r3
 8008f08:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	b299      	uxth	r1, r3
 8008f0e:	183b      	adds	r3, r7, r0
 8008f10:	183a      	adds	r2, r7, r0
 8008f12:	8812      	ldrh	r2, [r2, #0]
 8008f14:	188a      	adds	r2, r1, r2
 8008f16:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8008f18:	e797      	b.n	8008e4a <Paint_DrawLine+0xd6>
				break;
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	e000      	b.n	8008f20 <Paint_DrawLine+0x1ac>
				break;
 8008f1e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b00a      	add	sp, #40	; 0x28
 8008f24:	bdb0      	pop	{r4, r5, r7, pc}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	200001d8 	.word	0x200001d8
 8008f2c:	08015f14 	.word	0x08015f14

08008f30 <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f32:	46ce      	mov	lr, r9
 8008f34:	4647      	mov	r7, r8
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b089      	sub	sp, #36	; 0x24
 8008f3a:	af04      	add	r7, sp, #16
 8008f3c:	0004      	movs	r4, r0
 8008f3e:	0008      	movs	r0, r1
 8008f40:	60ba      	str	r2, [r7, #8]
 8008f42:	0019      	movs	r1, r3
 8008f44:	260e      	movs	r6, #14
 8008f46:	19bb      	adds	r3, r7, r6
 8008f48:	1c22      	adds	r2, r4, #0
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	18fb      	adds	r3, r7, r3
 8008f50:	1c02      	adds	r2, r0, #0
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	1dbb      	adds	r3, r7, #6
 8008f56:	1c0a      	adds	r2, r1, #0
 8008f58:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008f5a:	68b8      	ldr	r0, [r7, #8]
 8008f5c:	f7fa f86a 	bl	8003034 <__aeabi_f2d>
 8008f60:	0002      	movs	r2, r0
 8008f62:	000b      	movs	r3, r1
 8008f64:	0010      	movs	r0, r2
 8008f66:	0019      	movs	r1, r3
 8008f68:	f00b fa38 	bl	80143dc <cos>
 8008f6c:	0004      	movs	r4, r0
 8008f6e:	000d      	movs	r5, r1
 8008f70:	2130      	movs	r1, #48	; 0x30
 8008f72:	187b      	adds	r3, r7, r1
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	0018      	movs	r0, r3
 8008f78:	f7fa f806 	bl	8002f88 <__aeabi_i2d>
 8008f7c:	0002      	movs	r2, r0
 8008f7e:	000b      	movs	r3, r1
 8008f80:	0020      	movs	r0, r4
 8008f82:	0029      	movs	r1, r5
 8008f84:	f7f9 f9ae 	bl	80022e4 <__aeabi_dmul>
 8008f88:	0002      	movs	r2, r0
 8008f8a:	000b      	movs	r3, r1
 8008f8c:	0014      	movs	r4, r2
 8008f8e:	001d      	movs	r5, r3
 8008f90:	19bb      	adds	r3, r7, r6
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	0018      	movs	r0, r3
 8008f96:	f7f9 fff7 	bl	8002f88 <__aeabi_i2d>
 8008f9a:	0002      	movs	r2, r0
 8008f9c:	000b      	movs	r3, r1
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	0029      	movs	r1, r5
 8008fa2:	f7f8 fa2f 	bl	8001404 <__aeabi_dadd>
 8008fa6:	0002      	movs	r2, r0
 8008fa8:	000b      	movs	r3, r1
 8008faa:	0010      	movs	r0, r2
 8008fac:	0019      	movs	r1, r3
 8008fae:	f7f7 fb03 	bl	80005b8 <__aeabi_d2uiz>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 8008fb6:	68b8      	ldr	r0, [r7, #8]
 8008fb8:	f7fa f83c 	bl	8003034 <__aeabi_f2d>
 8008fbc:	0002      	movs	r2, r0
 8008fbe:	000b      	movs	r3, r1
 8008fc0:	0010      	movs	r0, r2
 8008fc2:	0019      	movs	r1, r3
 8008fc4:	f00b fa4c 	bl	8014460 <sin>
 8008fc8:	0004      	movs	r4, r0
 8008fca:	000d      	movs	r5, r1
 8008fcc:	2130      	movs	r1, #48	; 0x30
 8008fce:	187b      	adds	r3, r7, r1
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7f9 ffd8 	bl	8002f88 <__aeabi_i2d>
 8008fd8:	0002      	movs	r2, r0
 8008fda:	000b      	movs	r3, r1
 8008fdc:	0020      	movs	r0, r4
 8008fde:	0029      	movs	r1, r5
 8008fe0:	f7f9 f980 	bl	80022e4 <__aeabi_dmul>
 8008fe4:	0002      	movs	r2, r0
 8008fe6:	000b      	movs	r3, r1
 8008fe8:	0014      	movs	r4, r2
 8008fea:	001d      	movs	r5, r3
 8008fec:	220c      	movs	r2, #12
 8008fee:	18bb      	adds	r3, r7, r2
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7f9 ffc8 	bl	8002f88 <__aeabi_i2d>
 8008ff8:	0002      	movs	r2, r0
 8008ffa:	000b      	movs	r3, r1
 8008ffc:	0020      	movs	r0, r4
 8008ffe:	0029      	movs	r1, r5
 8009000:	f7f8 fa00 	bl	8001404 <__aeabi_dadd>
 8009004:	0002      	movs	r2, r0
 8009006:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8009008:	0010      	movs	r0, r2
 800900a:	0019      	movs	r1, r3
 800900c:	f7f7 fad4 	bl	80005b8 <__aeabi_d2uiz>
 8009010:	0003      	movs	r3, r0
 8009012:	b299      	uxth	r1, r3
 8009014:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 8009016:	68b8      	ldr	r0, [r7, #8]
 8009018:	f7fa f80c 	bl	8003034 <__aeabi_f2d>
 800901c:	0002      	movs	r2, r0
 800901e:	000b      	movs	r3, r1
 8009020:	0010      	movs	r0, r2
 8009022:	0019      	movs	r1, r3
 8009024:	f00b f9da 	bl	80143dc <cos>
 8009028:	0004      	movs	r4, r0
 800902a:	000d      	movs	r5, r1
 800902c:	1dbb      	adds	r3, r7, #6
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	0018      	movs	r0, r3
 8009032:	f7f9 ffa9 	bl	8002f88 <__aeabi_i2d>
 8009036:	0002      	movs	r2, r0
 8009038:	000b      	movs	r3, r1
 800903a:	0020      	movs	r0, r4
 800903c:	0029      	movs	r1, r5
 800903e:	f7f9 f951 	bl	80022e4 <__aeabi_dmul>
 8009042:	0002      	movs	r2, r0
 8009044:	000b      	movs	r3, r1
 8009046:	0014      	movs	r4, r2
 8009048:	001d      	movs	r5, r3
 800904a:	230e      	movs	r3, #14
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	0018      	movs	r0, r3
 8009052:	f7f9 ff99 	bl	8002f88 <__aeabi_i2d>
 8009056:	0002      	movs	r2, r0
 8009058:	000b      	movs	r3, r1
 800905a:	0020      	movs	r0, r4
 800905c:	0029      	movs	r1, r5
 800905e:	f7f8 f9d1 	bl	8001404 <__aeabi_dadd>
 8009062:	0002      	movs	r2, r0
 8009064:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8009066:	0010      	movs	r0, r2
 8009068:	0019      	movs	r1, r3
 800906a:	f7f7 faa5 	bl	80005b8 <__aeabi_d2uiz>
 800906e:	0003      	movs	r3, r0
 8009070:	b299      	uxth	r1, r3
 8009072:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f7f9 ffdd 	bl	8003034 <__aeabi_f2d>
 800907a:	0002      	movs	r2, r0
 800907c:	000b      	movs	r3, r1
 800907e:	0010      	movs	r0, r2
 8009080:	0019      	movs	r1, r3
 8009082:	f00b f9ed 	bl	8014460 <sin>
 8009086:	0004      	movs	r4, r0
 8009088:	000d      	movs	r5, r1
 800908a:	1dbb      	adds	r3, r7, #6
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	0018      	movs	r0, r3
 8009090:	f7f9 ff7a 	bl	8002f88 <__aeabi_i2d>
 8009094:	0002      	movs	r2, r0
 8009096:	000b      	movs	r3, r1
 8009098:	0020      	movs	r0, r4
 800909a:	0029      	movs	r1, r5
 800909c:	f7f9 f922 	bl	80022e4 <__aeabi_dmul>
 80090a0:	0002      	movs	r2, r0
 80090a2:	000b      	movs	r3, r1
 80090a4:	0014      	movs	r4, r2
 80090a6:	001d      	movs	r5, r3
 80090a8:	220c      	movs	r2, #12
 80090aa:	18bb      	adds	r3, r7, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7f9 ff6a 	bl	8002f88 <__aeabi_i2d>
 80090b4:	0002      	movs	r2, r0
 80090b6:	000b      	movs	r3, r1
 80090b8:	0020      	movs	r0, r4
 80090ba:	0029      	movs	r1, r5
 80090bc:	f7f8 f9a2 	bl	8001404 <__aeabi_dadd>
 80090c0:	0002      	movs	r2, r0
 80090c2:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 80090c4:	0010      	movs	r0, r2
 80090c6:	0019      	movs	r1, r3
 80090c8:	f7f7 fa76 	bl	80005b8 <__aeabi_d2uiz>
 80090cc:	0003      	movs	r3, r0
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	233c      	movs	r3, #60	; 0x3c
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	2338      	movs	r3, #56	; 0x38
 80090da:	18fb      	adds	r3, r7, r3
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	2334      	movs	r3, #52	; 0x34
 80090e2:	18fb      	adds	r3, r7, r3
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	0013      	movs	r3, r2
 80090ea:	464a      	mov	r2, r9
 80090ec:	4641      	mov	r1, r8
 80090ee:	0030      	movs	r0, r6
 80090f0:	f7ff fe40 	bl	8008d74 <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b005      	add	sp, #20
 80090fa:	bcc0      	pop	{r6, r7}
 80090fc:	46b9      	mov	r9, r7
 80090fe:	46b0      	mov	r8, r6
 8009100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009104 <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8009104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af04      	add	r7, sp, #16
 800910a:	0005      	movs	r5, r0
 800910c:	000c      	movs	r4, r1
 800910e:	0010      	movs	r0, r2
 8009110:	0019      	movs	r1, r3
 8009112:	1dbb      	adds	r3, r7, #6
 8009114:	1c2a      	adds	r2, r5, #0
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	1d3b      	adds	r3, r7, #4
 800911a:	1c22      	adds	r2, r4, #0
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	1cbb      	adds	r3, r7, #2
 8009120:	1c02      	adds	r2, r0, #0
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	003b      	movs	r3, r7
 8009126:	1c0a      	adds	r2, r1, #0
 8009128:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 800912a:	4b5a      	ldr	r3, [pc, #360]	; (8009294 <Paint_DrawRectangle+0x190>)
 800912c:	889b      	ldrh	r3, [r3, #4]
 800912e:	1dba      	adds	r2, r7, #6
 8009130:	8812      	ldrh	r2, [r2, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d811      	bhi.n	800915a <Paint_DrawRectangle+0x56>
 8009136:	4b57      	ldr	r3, [pc, #348]	; (8009294 <Paint_DrawRectangle+0x190>)
 8009138:	88db      	ldrh	r3, [r3, #6]
 800913a:	1d3a      	adds	r2, r7, #4
 800913c:	8812      	ldrh	r2, [r2, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d80b      	bhi.n	800915a <Paint_DrawRectangle+0x56>
 8009142:	4b54      	ldr	r3, [pc, #336]	; (8009294 <Paint_DrawRectangle+0x190>)
 8009144:	889b      	ldrh	r3, [r3, #4]
 8009146:	1cba      	adds	r2, r7, #2
 8009148:	8812      	ldrh	r2, [r2, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d805      	bhi.n	800915a <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 800914e:	4b51      	ldr	r3, [pc, #324]	; (8009294 <Paint_DrawRectangle+0x190>)
 8009150:	88db      	ldrh	r3, [r3, #6]
 8009152:	003a      	movs	r2, r7
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d904      	bls.n	8009164 <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 800915a:	4b4f      	ldr	r3, [pc, #316]	; (8009298 <Paint_DrawRectangle+0x194>)
 800915c:	0018      	movs	r0, r3
 800915e:	f00a f88b 	bl	8013278 <puts>
		return;
 8009162:	e094      	b.n	800928e <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 8009164:	2328      	movs	r3, #40	; 0x28
 8009166:	2208      	movs	r2, #8
 8009168:	4694      	mov	ip, r2
 800916a:	44bc      	add	ip, r7
 800916c:	4463      	add	r3, ip
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02e      	beq.n	80091d2 <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8009174:	230e      	movs	r3, #14
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	1d3a      	adds	r2, r7, #4
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	e020      	b.n	80091c2 <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 8009180:	250e      	movs	r5, #14
 8009182:	197b      	adds	r3, r7, r5
 8009184:	881c      	ldrh	r4, [r3, #0]
 8009186:	1cbb      	adds	r3, r7, #2
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	197b      	adds	r3, r7, r5
 800918c:	8819      	ldrh	r1, [r3, #0]
 800918e:	1dbb      	adds	r3, r7, #6
 8009190:	8818      	ldrh	r0, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	2324      	movs	r3, #36	; 0x24
 8009198:	2608      	movs	r6, #8
 800919a:	46b4      	mov	ip, r6
 800919c:	44bc      	add	ip, r7
 800919e:	4463      	add	r3, ip
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	2320      	movs	r3, #32
 80091a6:	2608      	movs	r6, #8
 80091a8:	46b4      	mov	ip, r6
 80091aa:	44bc      	add	ip, r7
 80091ac:	4463      	add	r3, ip
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	0023      	movs	r3, r4
 80091b4:	f7ff fdde 	bl	8008d74 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80091b8:	197b      	adds	r3, r7, r5
 80091ba:	881a      	ldrh	r2, [r3, #0]
 80091bc:	197b      	adds	r3, r7, r5
 80091be:	3201      	adds	r2, #1
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	230e      	movs	r3, #14
 80091c4:	18fa      	adds	r2, r7, r3
 80091c6:	003b      	movs	r3, r7
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d3d7      	bcc.n	8009180 <Paint_DrawRectangle+0x7c>
 80091d0:	e05d      	b.n	800928e <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 80091d2:	1d3b      	adds	r3, r7, #4
 80091d4:	881c      	ldrh	r4, [r3, #0]
 80091d6:	1cbb      	adds	r3, r7, #2
 80091d8:	881a      	ldrh	r2, [r3, #0]
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	8819      	ldrh	r1, [r3, #0]
 80091de:	1dbb      	adds	r3, r7, #6
 80091e0:	8818      	ldrh	r0, [r3, #0]
 80091e2:	2300      	movs	r3, #0
 80091e4:	9302      	str	r3, [sp, #8]
 80091e6:	2524      	movs	r5, #36	; 0x24
 80091e8:	2308      	movs	r3, #8
 80091ea:	18fe      	adds	r6, r7, r3
 80091ec:	1973      	adds	r3, r6, r5
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	2620      	movs	r6, #32
 80091f4:	2308      	movs	r3, #8
 80091f6:	18fb      	adds	r3, r7, r3
 80091f8:	199b      	adds	r3, r3, r6
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	0023      	movs	r3, r4
 8009200:	f7ff fdb8 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 8009204:	003b      	movs	r3, r7
 8009206:	881c      	ldrh	r4, [r3, #0]
 8009208:	1dbb      	adds	r3, r7, #6
 800920a:	881a      	ldrh	r2, [r3, #0]
 800920c:	1d3b      	adds	r3, r7, #4
 800920e:	8819      	ldrh	r1, [r3, #0]
 8009210:	1dbb      	adds	r3, r7, #6
 8009212:	8818      	ldrh	r0, [r3, #0]
 8009214:	2300      	movs	r3, #0
 8009216:	9302      	str	r3, [sp, #8]
 8009218:	2308      	movs	r3, #8
 800921a:	18fb      	adds	r3, r7, r3
 800921c:	195b      	adds	r3, r3, r5
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	2308      	movs	r3, #8
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	199b      	adds	r3, r3, r6
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	0023      	movs	r3, r4
 800922e:	f7ff fda1 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	881c      	ldrh	r4, [r3, #0]
 8009236:	1cbb      	adds	r3, r7, #2
 8009238:	881a      	ldrh	r2, [r3, #0]
 800923a:	003b      	movs	r3, r7
 800923c:	8819      	ldrh	r1, [r3, #0]
 800923e:	1cbb      	adds	r3, r7, #2
 8009240:	8818      	ldrh	r0, [r3, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	2308      	movs	r3, #8
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	195b      	adds	r3, r3, r5
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	2308      	movs	r3, #8
 8009252:	18fb      	adds	r3, r7, r3
 8009254:	199b      	adds	r3, r3, r6
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	0023      	movs	r3, r4
 800925c:	f7ff fd8a 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 8009260:	003b      	movs	r3, r7
 8009262:	881c      	ldrh	r4, [r3, #0]
 8009264:	1dbb      	adds	r3, r7, #6
 8009266:	881a      	ldrh	r2, [r3, #0]
 8009268:	003b      	movs	r3, r7
 800926a:	8819      	ldrh	r1, [r3, #0]
 800926c:	1cbb      	adds	r3, r7, #2
 800926e:	8818      	ldrh	r0, [r3, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	2308      	movs	r3, #8
 8009276:	18fb      	adds	r3, r7, r3
 8009278:	195b      	adds	r3, r3, r5
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	2308      	movs	r3, #8
 8009280:	18fb      	adds	r3, r7, r3
 8009282:	199b      	adds	r3, r3, r6
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	0023      	movs	r3, r4
 800928a:	f7ff fd73 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 800928e:	46bd      	mov	sp, r7
 8009290:	b005      	add	sp, #20
 8009292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009294:	200001d8 	.word	0x200001d8
 8009298:	08015f54 	.word	0x08015f54

0800929c <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 800929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929e:	b087      	sub	sp, #28
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	0005      	movs	r5, r0
 80092a4:	000c      	movs	r4, r1
 80092a6:	0010      	movs	r0, r2
 80092a8:	0019      	movs	r1, r3
 80092aa:	1dbb      	adds	r3, r7, #6
 80092ac:	1c2a      	adds	r2, r5, #0
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	1d3b      	adds	r3, r7, #4
 80092b2:	1c22      	adds	r2, r4, #0
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	1cbb      	adds	r3, r7, #2
 80092b8:	1c02      	adds	r2, r0, #0
 80092ba:	801a      	strh	r2, [r3, #0]
 80092bc:	003b      	movs	r3, r7
 80092be:	1c0a      	adds	r2, r1, #0
 80092c0:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80092c2:	4b94      	ldr	r3, [pc, #592]	; (8009514 <Paint_DrawCircle+0x278>)
 80092c4:	889b      	ldrh	r3, [r3, #4]
 80092c6:	1dba      	adds	r2, r7, #6
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d805      	bhi.n	80092da <Paint_DrawCircle+0x3e>
 80092ce:	4b91      	ldr	r3, [pc, #580]	; (8009514 <Paint_DrawCircle+0x278>)
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	1d3a      	adds	r2, r7, #4
 80092d4:	8812      	ldrh	r2, [r2, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d304      	bcc.n	80092e4 <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 80092da:	4b8f      	ldr	r3, [pc, #572]	; (8009518 <Paint_DrawCircle+0x27c>)
 80092dc:	0018      	movs	r0, r3
 80092de:	f009 ffcb 	bl	8013278 <puts>
		return;
 80092e2:	e229      	b.n	8009738 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 80092e4:	230e      	movs	r3, #14
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	2200      	movs	r2, #0
 80092ea:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 80092ec:	230c      	movs	r3, #12
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	1cba      	adds	r2, r7, #2
 80092f2:	8812      	ldrh	r2, [r2, #0]
 80092f4:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 80092f6:	1cbb      	adds	r3, r7, #2
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	18db      	adds	r3, r3, r3
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2203      	movs	r2, #3
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	b29a      	uxth	r2, r3
 8009304:	230a      	movs	r3, #10
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 800930a:	2324      	movs	r3, #36	; 0x24
 800930c:	2208      	movs	r2, #8
 800930e:	4694      	mov	ip, r2
 8009310:	44bc      	add	ip, r7
 8009312:	4463      	add	r3, ip
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d000      	beq.n	800931c <Paint_DrawCircle+0x80>
 800931a:	e202      	b.n	8009722 <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 800931c:	e0ed      	b.n	80094fa <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 800931e:	2308      	movs	r3, #8
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	220e      	movs	r2, #14
 8009324:	18ba      	adds	r2, r7, r2
 8009326:	8812      	ldrh	r2, [r2, #0]
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e0a1      	b.n	8009470 <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 800932c:	250e      	movs	r5, #14
 800932e:	197b      	adds	r3, r7, r5
 8009330:	881a      	ldrh	r2, [r3, #0]
 8009332:	1dbb      	adds	r3, r7, #6
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	b298      	uxth	r0, r3
 800933a:	2408      	movs	r4, #8
 800933c:	193b      	adds	r3, r7, r4
 800933e:	881a      	ldrh	r2, [r3, #0]
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	18d3      	adds	r3, r2, r3
 8009346:	b299      	uxth	r1, r3
 8009348:	003b      	movs	r3, r7
 800934a:	881a      	ldrh	r2, [r3, #0]
 800934c:	2301      	movs	r3, #1
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	2301      	movs	r3, #1
 8009352:	f7ff fc25 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 8009356:	197b      	adds	r3, r7, r5
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	1dba      	adds	r2, r7, #6
 800935c:	8812      	ldrh	r2, [r2, #0]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	b298      	uxth	r0, r3
 8009362:	193b      	adds	r3, r7, r4
 8009364:	881a      	ldrh	r2, [r3, #0]
 8009366:	1d3b      	adds	r3, r7, #4
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	18d3      	adds	r3, r2, r3
 800936c:	b299      	uxth	r1, r3
 800936e:	003b      	movs	r3, r7
 8009370:	881a      	ldrh	r2, [r3, #0]
 8009372:	2301      	movs	r3, #1
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	2301      	movs	r3, #1
 8009378:	f7ff fc12 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 800937c:	193b      	adds	r3, r7, r4
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	1dba      	adds	r2, r7, #6
 8009382:	8812      	ldrh	r2, [r2, #0]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	b298      	uxth	r0, r3
 8009388:	197b      	adds	r3, r7, r5
 800938a:	881a      	ldrh	r2, [r3, #0]
 800938c:	1d3b      	adds	r3, r7, #4
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	b299      	uxth	r1, r3
 8009394:	003b      	movs	r3, r7
 8009396:	881a      	ldrh	r2, [r3, #0]
 8009398:	2301      	movs	r3, #1
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2301      	movs	r3, #1
 800939e:	f7ff fbff 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 80093a2:	193b      	adds	r3, r7, r4
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	1dba      	adds	r2, r7, #6
 80093a8:	8812      	ldrh	r2, [r2, #0]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	b298      	uxth	r0, r3
 80093ae:	197b      	adds	r3, r7, r5
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	1d3a      	adds	r2, r7, #4
 80093b4:	8812      	ldrh	r2, [r2, #0]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	b299      	uxth	r1, r3
 80093ba:	003b      	movs	r3, r7
 80093bc:	881a      	ldrh	r2, [r3, #0]
 80093be:	2301      	movs	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2301      	movs	r3, #1
 80093c4:	f7ff fbec 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 80093c8:	197b      	adds	r3, r7, r5
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	1dba      	adds	r2, r7, #6
 80093ce:	8812      	ldrh	r2, [r2, #0]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	b298      	uxth	r0, r3
 80093d4:	193b      	adds	r3, r7, r4
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	1d3a      	adds	r2, r7, #4
 80093da:	8812      	ldrh	r2, [r2, #0]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	b299      	uxth	r1, r3
 80093e0:	003b      	movs	r3, r7
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	2301      	movs	r3, #1
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2301      	movs	r3, #1
 80093ea:	f7ff fbd9 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 80093ee:	197b      	adds	r3, r7, r5
 80093f0:	881a      	ldrh	r2, [r3, #0]
 80093f2:	1dbb      	adds	r3, r7, #6
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	18d3      	adds	r3, r2, r3
 80093f8:	b298      	uxth	r0, r3
 80093fa:	193b      	adds	r3, r7, r4
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	1d3a      	adds	r2, r7, #4
 8009400:	8812      	ldrh	r2, [r2, #0]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	b299      	uxth	r1, r3
 8009406:	003b      	movs	r3, r7
 8009408:	881a      	ldrh	r2, [r3, #0]
 800940a:	2301      	movs	r3, #1
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	2301      	movs	r3, #1
 8009410:	f7ff fbc6 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 8009414:	193b      	adds	r3, r7, r4
 8009416:	881a      	ldrh	r2, [r3, #0]
 8009418:	1dbb      	adds	r3, r7, #6
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	18d3      	adds	r3, r2, r3
 800941e:	b298      	uxth	r0, r3
 8009420:	197b      	adds	r3, r7, r5
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	1d3a      	adds	r2, r7, #4
 8009426:	8812      	ldrh	r2, [r2, #0]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	b299      	uxth	r1, r3
 800942c:	003b      	movs	r3, r7
 800942e:	881a      	ldrh	r2, [r3, #0]
 8009430:	2301      	movs	r3, #1
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	2301      	movs	r3, #1
 8009436:	f7ff fbb3 	bl	8008ba0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 800943a:	193b      	adds	r3, r7, r4
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	1dbb      	adds	r3, r7, #6
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	b298      	uxth	r0, r3
 8009446:	197b      	adds	r3, r7, r5
 8009448:	881a      	ldrh	r2, [r3, #0]
 800944a:	1d3b      	adds	r3, r7, #4
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	18d3      	adds	r3, r2, r3
 8009450:	b299      	uxth	r1, r3
 8009452:	003b      	movs	r3, r7
 8009454:	881a      	ldrh	r2, [r3, #0]
 8009456:	2301      	movs	r3, #1
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	2301      	movs	r3, #1
 800945c:	f7ff fba0 	bl	8008ba0 <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8009460:	193b      	adds	r3, r7, r4
 8009462:	2200      	movs	r2, #0
 8009464:	5e9b      	ldrsh	r3, [r3, r2]
 8009466:	b29b      	uxth	r3, r3
 8009468:	3301      	adds	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	193b      	adds	r3, r7, r4
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	2308      	movs	r3, #8
 8009472:	18fa      	adds	r2, r7, r3
 8009474:	230c      	movs	r3, #12
 8009476:	18fb      	adds	r3, r7, r3
 8009478:	2100      	movs	r1, #0
 800947a:	5e52      	ldrsh	r2, [r2, r1]
 800947c:	2100      	movs	r1, #0
 800947e:	5e5b      	ldrsh	r3, [r3, r1]
 8009480:	429a      	cmp	r2, r3
 8009482:	dc00      	bgt.n	8009486 <Paint_DrawCircle+0x1ea>
 8009484:	e752      	b.n	800932c <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 8009486:	210a      	movs	r1, #10
 8009488:	187b      	adds	r3, r7, r1
 800948a:	2200      	movs	r2, #0
 800948c:	5e9b      	ldrsh	r3, [r3, r2]
 800948e:	2b00      	cmp	r3, #0
 8009490:	da0d      	bge.n	80094ae <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 8009492:	230e      	movs	r3, #14
 8009494:	18fb      	adds	r3, r7, r3
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	b29a      	uxth	r2, r3
 800949c:	187b      	adds	r3, r7, r1
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	18d3      	adds	r3, r2, r3
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	3306      	adds	r3, #6
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	187b      	adds	r3, r7, r1
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e01c      	b.n	80094e8 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80094ae:	230e      	movs	r3, #14
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	2200      	movs	r2, #0
 80094b4:	5e9a      	ldrsh	r2, [r3, r2]
 80094b6:	210c      	movs	r1, #12
 80094b8:	187b      	adds	r3, r7, r1
 80094ba:	2000      	movs	r0, #0
 80094bc:	5e1b      	ldrsh	r3, [r3, r0]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	200a      	movs	r0, #10
 80094c8:	183b      	adds	r3, r7, r0
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	18d3      	adds	r3, r2, r3
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	330a      	adds	r3, #10
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	183b      	adds	r3, r7, r0
 80094d6:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 80094d8:	187b      	adds	r3, r7, r1
 80094da:	2200      	movs	r2, #0
 80094dc:	5e9b      	ldrsh	r3, [r3, r2]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	3b01      	subs	r3, #1
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	187b      	adds	r3, r7, r1
 80094e6:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 80094e8:	210e      	movs	r1, #14
 80094ea:	187b      	adds	r3, r7, r1
 80094ec:	2200      	movs	r2, #0
 80094ee:	5e9b      	ldrsh	r3, [r3, r2]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3301      	adds	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	187b      	adds	r3, r7, r1
 80094f8:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 80094fa:	230e      	movs	r3, #14
 80094fc:	18fa      	adds	r2, r7, r3
 80094fe:	230c      	movs	r3, #12
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	2100      	movs	r1, #0
 8009504:	5e52      	ldrsh	r2, [r2, r1]
 8009506:	2100      	movs	r1, #0
 8009508:	5e5b      	ldrsh	r3, [r3, r1]
 800950a:	429a      	cmp	r2, r3
 800950c:	dc00      	bgt.n	8009510 <Paint_DrawCircle+0x274>
 800950e:	e706      	b.n	800931e <Paint_DrawCircle+0x82>
 8009510:	e112      	b.n	8009738 <Paint_DrawCircle+0x49c>
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	200001d8 	.word	0x200001d8
 8009518:	08015f84 	.word	0x08015f84
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 800951c:	250e      	movs	r5, #14
 800951e:	197b      	adds	r3, r7, r5
 8009520:	881a      	ldrh	r2, [r3, #0]
 8009522:	1dbb      	adds	r3, r7, #6
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	18d3      	adds	r3, r2, r3
 8009528:	b298      	uxth	r0, r3
 800952a:	260c      	movs	r6, #12
 800952c:	19bb      	adds	r3, r7, r6
 800952e:	881a      	ldrh	r2, [r3, #0]
 8009530:	1d3b      	adds	r3, r7, #4
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	b299      	uxth	r1, r3
 8009538:	2320      	movs	r3, #32
 800953a:	2208      	movs	r2, #8
 800953c:	4694      	mov	ip, r2
 800953e:	44bc      	add	ip, r7
 8009540:	4463      	add	r3, ip
 8009542:	781c      	ldrb	r4, [r3, #0]
 8009544:	003b      	movs	r3, r7
 8009546:	881a      	ldrh	r2, [r3, #0]
 8009548:	2301      	movs	r3, #1
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	0023      	movs	r3, r4
 800954e:	f7ff fb27 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 8009552:	197b      	adds	r3, r7, r5
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	1dba      	adds	r2, r7, #6
 8009558:	8812      	ldrh	r2, [r2, #0]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	b298      	uxth	r0, r3
 800955e:	19bb      	adds	r3, r7, r6
 8009560:	881a      	ldrh	r2, [r3, #0]
 8009562:	1d3b      	adds	r3, r7, #4
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	18d3      	adds	r3, r2, r3
 8009568:	b299      	uxth	r1, r3
 800956a:	2320      	movs	r3, #32
 800956c:	2208      	movs	r2, #8
 800956e:	4694      	mov	ip, r2
 8009570:	44bc      	add	ip, r7
 8009572:	4463      	add	r3, ip
 8009574:	781c      	ldrb	r4, [r3, #0]
 8009576:	003b      	movs	r3, r7
 8009578:	881a      	ldrh	r2, [r3, #0]
 800957a:	2301      	movs	r3, #1
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	0023      	movs	r3, r4
 8009580:	f7ff fb0e 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 8009584:	19bb      	adds	r3, r7, r6
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	1dba      	adds	r2, r7, #6
 800958a:	8812      	ldrh	r2, [r2, #0]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	b298      	uxth	r0, r3
 8009590:	197b      	adds	r3, r7, r5
 8009592:	881a      	ldrh	r2, [r3, #0]
 8009594:	1d3b      	adds	r3, r7, #4
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	b299      	uxth	r1, r3
 800959c:	2320      	movs	r3, #32
 800959e:	2208      	movs	r2, #8
 80095a0:	4694      	mov	ip, r2
 80095a2:	44bc      	add	ip, r7
 80095a4:	4463      	add	r3, ip
 80095a6:	781c      	ldrb	r4, [r3, #0]
 80095a8:	003b      	movs	r3, r7
 80095aa:	881a      	ldrh	r2, [r3, #0]
 80095ac:	2301      	movs	r3, #1
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	0023      	movs	r3, r4
 80095b2:	f7ff faf5 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 80095b6:	19bb      	adds	r3, r7, r6
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	1dba      	adds	r2, r7, #6
 80095bc:	8812      	ldrh	r2, [r2, #0]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	b298      	uxth	r0, r3
 80095c2:	197b      	adds	r3, r7, r5
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	1d3a      	adds	r2, r7, #4
 80095c8:	8812      	ldrh	r2, [r2, #0]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	b299      	uxth	r1, r3
 80095ce:	2320      	movs	r3, #32
 80095d0:	2208      	movs	r2, #8
 80095d2:	4694      	mov	ip, r2
 80095d4:	44bc      	add	ip, r7
 80095d6:	4463      	add	r3, ip
 80095d8:	781c      	ldrb	r4, [r3, #0]
 80095da:	003b      	movs	r3, r7
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	2301      	movs	r3, #1
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	0023      	movs	r3, r4
 80095e4:	f7ff fadc 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 80095e8:	197b      	adds	r3, r7, r5
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	1dba      	adds	r2, r7, #6
 80095ee:	8812      	ldrh	r2, [r2, #0]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	b298      	uxth	r0, r3
 80095f4:	19bb      	adds	r3, r7, r6
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	1d3a      	adds	r2, r7, #4
 80095fa:	8812      	ldrh	r2, [r2, #0]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	b299      	uxth	r1, r3
 8009600:	2320      	movs	r3, #32
 8009602:	2208      	movs	r2, #8
 8009604:	4694      	mov	ip, r2
 8009606:	44bc      	add	ip, r7
 8009608:	4463      	add	r3, ip
 800960a:	781c      	ldrb	r4, [r3, #0]
 800960c:	003b      	movs	r3, r7
 800960e:	881a      	ldrh	r2, [r3, #0]
 8009610:	2301      	movs	r3, #1
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	0023      	movs	r3, r4
 8009616:	f7ff fac3 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 800961a:	197b      	adds	r3, r7, r5
 800961c:	881a      	ldrh	r2, [r3, #0]
 800961e:	1dbb      	adds	r3, r7, #6
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	18d3      	adds	r3, r2, r3
 8009624:	b298      	uxth	r0, r3
 8009626:	19bb      	adds	r3, r7, r6
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	1d3a      	adds	r2, r7, #4
 800962c:	8812      	ldrh	r2, [r2, #0]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	b299      	uxth	r1, r3
 8009632:	2320      	movs	r3, #32
 8009634:	2208      	movs	r2, #8
 8009636:	4694      	mov	ip, r2
 8009638:	44bc      	add	ip, r7
 800963a:	4463      	add	r3, ip
 800963c:	781c      	ldrb	r4, [r3, #0]
 800963e:	003b      	movs	r3, r7
 8009640:	881a      	ldrh	r2, [r3, #0]
 8009642:	2301      	movs	r3, #1
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	0023      	movs	r3, r4
 8009648:	f7ff faaa 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 800964c:	19bb      	adds	r3, r7, r6
 800964e:	881a      	ldrh	r2, [r3, #0]
 8009650:	1dbb      	adds	r3, r7, #6
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	b298      	uxth	r0, r3
 8009658:	197b      	adds	r3, r7, r5
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	1d3a      	adds	r2, r7, #4
 800965e:	8812      	ldrh	r2, [r2, #0]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	b299      	uxth	r1, r3
 8009664:	2320      	movs	r3, #32
 8009666:	2208      	movs	r2, #8
 8009668:	4694      	mov	ip, r2
 800966a:	44bc      	add	ip, r7
 800966c:	4463      	add	r3, ip
 800966e:	781c      	ldrb	r4, [r3, #0]
 8009670:	003b      	movs	r3, r7
 8009672:	881a      	ldrh	r2, [r3, #0]
 8009674:	2301      	movs	r3, #1
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	0023      	movs	r3, r4
 800967a:	f7ff fa91 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 800967e:	19bb      	adds	r3, r7, r6
 8009680:	881a      	ldrh	r2, [r3, #0]
 8009682:	1dbb      	adds	r3, r7, #6
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	18d3      	adds	r3, r2, r3
 8009688:	b298      	uxth	r0, r3
 800968a:	197b      	adds	r3, r7, r5
 800968c:	881a      	ldrh	r2, [r3, #0]
 800968e:	1d3b      	adds	r3, r7, #4
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	18d3      	adds	r3, r2, r3
 8009694:	b299      	uxth	r1, r3
 8009696:	2320      	movs	r3, #32
 8009698:	2208      	movs	r2, #8
 800969a:	4694      	mov	ip, r2
 800969c:	44bc      	add	ip, r7
 800969e:	4463      	add	r3, ip
 80096a0:	781c      	ldrb	r4, [r3, #0]
 80096a2:	003b      	movs	r3, r7
 80096a4:	881a      	ldrh	r2, [r3, #0]
 80096a6:	2301      	movs	r3, #1
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	0023      	movs	r3, r4
 80096ac:	f7ff fa78 	bl	8008ba0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 80096b0:	210a      	movs	r1, #10
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	2200      	movs	r2, #0
 80096b6:	5e9b      	ldrsh	r3, [r3, r2]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da0c      	bge.n	80096d6 <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 80096bc:	197b      	adds	r3, r7, r5
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	18d3      	adds	r3, r2, r3
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	3306      	adds	r3, #6
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	e01c      	b.n	8009710 <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80096d6:	230e      	movs	r3, #14
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	2200      	movs	r2, #0
 80096dc:	5e9a      	ldrsh	r2, [r3, r2]
 80096de:	210c      	movs	r1, #12
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	2000      	movs	r0, #0
 80096e4:	5e1b      	ldrsh	r3, [r3, r0]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	200a      	movs	r0, #10
 80096f0:	183b      	adds	r3, r7, r0
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	18d3      	adds	r3, r2, r3
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	330a      	adds	r3, #10
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	183b      	adds	r3, r7, r0
 80096fe:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009700:	187b      	adds	r3, r7, r1
 8009702:	2200      	movs	r2, #0
 8009704:	5e9b      	ldrsh	r3, [r3, r2]
 8009706:	b29b      	uxth	r3, r3
 8009708:	3b01      	subs	r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	187b      	adds	r3, r7, r1
 800970e:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009710:	210e      	movs	r1, #14
 8009712:	187b      	adds	r3, r7, r1
 8009714:	2200      	movs	r2, #0
 8009716:	5e9b      	ldrsh	r3, [r3, r2]
 8009718:	b29b      	uxth	r3, r3
 800971a:	3301      	adds	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	187b      	adds	r3, r7, r1
 8009720:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 8009722:	230e      	movs	r3, #14
 8009724:	18fa      	adds	r2, r7, r3
 8009726:	230c      	movs	r3, #12
 8009728:	18fb      	adds	r3, r7, r3
 800972a:	2100      	movs	r1, #0
 800972c:	5e52      	ldrsh	r2, [r2, r1]
 800972e:	2100      	movs	r1, #0
 8009730:	5e5b      	ldrsh	r3, [r3, r1]
 8009732:	429a      	cmp	r2, r3
 8009734:	dc00      	bgt.n	8009738 <Paint_DrawCircle+0x49c>
 8009736:	e6f1      	b.n	800951c <Paint_DrawCircle+0x280>
		}
	}
}
 8009738:	46bd      	mov	sp, r7
 800973a:	b005      	add	sp, #20
 800973c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973e:	46c0      	nop			; (mov r8, r8)

08009740 <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009740:	b5b0      	push	{r4, r5, r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	0004      	movs	r4, r0
 8009748:	0008      	movs	r0, r1
 800974a:	0011      	movs	r1, r2
 800974c:	607b      	str	r3, [r7, #4]
 800974e:	250e      	movs	r5, #14
 8009750:	197b      	adds	r3, r7, r5
 8009752:	1c22      	adds	r2, r4, #0
 8009754:	801a      	strh	r2, [r3, #0]
 8009756:	240c      	movs	r4, #12
 8009758:	193b      	adds	r3, r7, r4
 800975a:	1c02      	adds	r2, r0, #0
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	230b      	movs	r3, #11
 8009760:	18fb      	adds	r3, r7, r3
 8009762:	1c0a      	adds	r2, r1, #0
 8009764:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009766:	4b66      	ldr	r3, [pc, #408]	; (8009900 <Paint_DrawChar+0x1c0>)
 8009768:	889b      	ldrh	r3, [r3, #4]
 800976a:	197a      	adds	r2, r7, r5
 800976c:	8812      	ldrh	r2, [r2, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d805      	bhi.n	800977e <Paint_DrawChar+0x3e>
 8009772:	4b63      	ldr	r3, [pc, #396]	; (8009900 <Paint_DrawChar+0x1c0>)
 8009774:	88db      	ldrh	r3, [r3, #6]
 8009776:	193a      	adds	r2, r7, r4
 8009778:	8812      	ldrh	r2, [r2, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d904      	bls.n	8009788 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800977e:	4b61      	ldr	r3, [pc, #388]	; (8009904 <Paint_DrawChar+0x1c4>)
 8009780:	0018      	movs	r0, r3
 8009782:	f009 fd79 	bl	8013278 <puts>
		return;
 8009786:	e0b7      	b.n	80098f8 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 8009788:	230b      	movs	r3, #11
 800978a:	18fb      	adds	r3, r7, r3
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	3b20      	subs	r3, #32
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	88d2      	ldrh	r2, [r2, #6]
 8009794:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	8892      	ldrh	r2, [r2, #4]
 800979a:	08d2      	lsrs	r2, r2, #3
 800979c:	b292      	uxth	r2, r2
 800979e:	0010      	movs	r0, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	8892      	ldrh	r2, [r2, #4]
 80097a4:	2107      	movs	r1, #7
 80097a6:	400a      	ands	r2, r1
 80097a8:	b292      	uxth	r2, r2
 80097aa:	1e51      	subs	r1, r2, #1
 80097ac:	418a      	sbcs	r2, r1
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	1882      	adds	r2, r0, r2
 80097b2:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80097b4:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	18d3      	adds	r3, r2, r3
 80097be:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 80097c0:	231e      	movs	r3, #30
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	2200      	movs	r2, #0
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e08e      	b.n	80098e8 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 80097ca:	231c      	movs	r3, #28
 80097cc:	18fb      	adds	r3, r7, r3
 80097ce:	2200      	movs	r2, #0
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e071      	b.n	80098b8 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80097d4:	2334      	movs	r3, #52	; 0x34
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	2bff      	cmp	r3, #255	; 0xff
 80097dc:	d122      	bne.n	8009824 <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	0019      	movs	r1, r3
 80097e4:	201c      	movs	r0, #28
 80097e6:	183b      	adds	r3, r7, r0
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	2207      	movs	r2, #7
 80097ec:	4013      	ands	r3, r2
 80097ee:	2280      	movs	r2, #128	; 0x80
 80097f0:	411a      	asrs	r2, r3
 80097f2:	0013      	movs	r3, r2
 80097f4:	400b      	ands	r3, r1
 80097f6:	d04e      	beq.n	8009896 <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 80097f8:	230e      	movs	r3, #14
 80097fa:	18fa      	adds	r2, r7, r3
 80097fc:	183b      	adds	r3, r7, r0
 80097fe:	8812      	ldrh	r2, [r2, #0]
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	18d3      	adds	r3, r2, r3
 8009804:	b298      	uxth	r0, r3
 8009806:	230c      	movs	r3, #12
 8009808:	18fa      	adds	r2, r7, r3
 800980a:	231e      	movs	r3, #30
 800980c:	18fb      	adds	r3, r7, r3
 800980e:	8812      	ldrh	r2, [r2, #0]
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	18d3      	adds	r3, r2, r3
 8009814:	b299      	uxth	r1, r3
 8009816:	2330      	movs	r3, #48	; 0x30
 8009818:	18fb      	adds	r3, r7, r3
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	001a      	movs	r2, r3
 800981e:	f7fe ff8d 	bl	800873c <Paint_SetPixel>
 8009822:	e038      	b.n	8009896 <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	0019      	movs	r1, r3
 800982a:	201c      	movs	r0, #28
 800982c:	183b      	adds	r3, r7, r0
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	2207      	movs	r2, #7
 8009832:	4013      	ands	r3, r2
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	411a      	asrs	r2, r3
 8009838:	0013      	movs	r3, r2
 800983a:	400b      	ands	r3, r1
 800983c:	d015      	beq.n	800986a <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800983e:	230e      	movs	r3, #14
 8009840:	18fa      	adds	r2, r7, r3
 8009842:	183b      	adds	r3, r7, r0
 8009844:	8812      	ldrh	r2, [r2, #0]
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	18d3      	adds	r3, r2, r3
 800984a:	b298      	uxth	r0, r3
 800984c:	230c      	movs	r3, #12
 800984e:	18fa      	adds	r2, r7, r3
 8009850:	231e      	movs	r3, #30
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	8812      	ldrh	r2, [r2, #0]
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	18d3      	adds	r3, r2, r3
 800985a:	b299      	uxth	r1, r3
 800985c:	2330      	movs	r3, #48	; 0x30
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	001a      	movs	r2, r3
 8009864:	f7fe ff6a 	bl	800873c <Paint_SetPixel>
 8009868:	e015      	b.n	8009896 <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800986a:	230e      	movs	r3, #14
 800986c:	18fa      	adds	r2, r7, r3
 800986e:	231c      	movs	r3, #28
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	8812      	ldrh	r2, [r2, #0]
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	18d3      	adds	r3, r2, r3
 8009878:	b298      	uxth	r0, r3
 800987a:	230c      	movs	r3, #12
 800987c:	18fa      	adds	r2, r7, r3
 800987e:	231e      	movs	r3, #30
 8009880:	18fb      	adds	r3, r7, r3
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	18d3      	adds	r3, r2, r3
 8009888:	b299      	uxth	r1, r3
 800988a:	2334      	movs	r3, #52	; 0x34
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	001a      	movs	r2, r3
 8009892:	f7fe ff53 	bl	800873c <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 8009896:	231c      	movs	r3, #28
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	2207      	movs	r2, #7
 800989e:	4013      	ands	r3, r2
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b07      	cmp	r3, #7
 80098a4:	d102      	bne.n	80098ac <Paint_DrawChar+0x16c>
				ptr++;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	3301      	adds	r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 80098ac:	211c      	movs	r1, #28
 80098ae:	187b      	adds	r3, r7, r1
 80098b0:	881a      	ldrh	r2, [r3, #0]
 80098b2:	187b      	adds	r3, r7, r1
 80098b4:	3201      	adds	r2, #1
 80098b6:	801a      	strh	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	889b      	ldrh	r3, [r3, #4]
 80098bc:	221c      	movs	r2, #28
 80098be:	18ba      	adds	r2, r7, r2
 80098c0:	8812      	ldrh	r2, [r2, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d200      	bcs.n	80098c8 <Paint_DrawChar+0x188>
 80098c6:	e785      	b.n	80097d4 <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	889b      	ldrh	r3, [r3, #4]
 80098cc:	2207      	movs	r2, #7
 80098ce:	4013      	ands	r3, r2
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <Paint_DrawChar+0x19c>
			ptr++;
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	3301      	adds	r3, #1
 80098da:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 80098dc:	211e      	movs	r1, #30
 80098de:	187b      	adds	r3, r7, r1
 80098e0:	881a      	ldrh	r2, [r3, #0]
 80098e2:	187b      	adds	r3, r7, r1
 80098e4:	3201      	adds	r2, #1
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	88db      	ldrh	r3, [r3, #6]
 80098ec:	221e      	movs	r2, #30
 80098ee:	18ba      	adds	r2, r7, r2
 80098f0:	8812      	ldrh	r2, [r2, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d200      	bcs.n	80098f8 <Paint_DrawChar+0x1b8>
 80098f6:	e768      	b.n	80097ca <Paint_DrawChar+0x8a>
	} // Write all
}
 80098f8:	46bd      	mov	sp, r7
 80098fa:	b008      	add	sp, #32
 80098fc:	bdb0      	pop	{r4, r5, r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	200001d8 	.word	0x200001d8
 8009904:	08015fc4 	.word	0x08015fc4

08009908 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af02      	add	r7, sp, #8
 800990e:	60ba      	str	r2, [r7, #8]
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	240e      	movs	r4, #14
 8009914:	193b      	adds	r3, r7, r4
 8009916:	1c02      	adds	r2, r0, #0
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	200c      	movs	r0, #12
 800991c:	183b      	adds	r3, r7, r0
 800991e:	1c0a      	adds	r2, r1, #0
 8009920:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 8009922:	2316      	movs	r3, #22
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	0021      	movs	r1, r4
 8009928:	187a      	adds	r2, r7, r1
 800992a:	8812      	ldrh	r2, [r2, #0]
 800992c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 800992e:	2314      	movs	r3, #20
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	183a      	adds	r2, r7, r0
 8009934:	8812      	ldrh	r2, [r2, #0]
 8009936:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8009938:	4b30      	ldr	r3, [pc, #192]	; (80099fc <Paint_DrawString_EN+0xf4>)
 800993a:	889b      	ldrh	r3, [r3, #4]
 800993c:	187a      	adds	r2, r7, r1
 800993e:	8812      	ldrh	r2, [r2, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d805      	bhi.n	8009950 <Paint_DrawString_EN+0x48>
 8009944:	4b2d      	ldr	r3, [pc, #180]	; (80099fc <Paint_DrawString_EN+0xf4>)
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	183a      	adds	r2, r7, r0
 800994a:	8812      	ldrh	r2, [r2, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d94e      	bls.n	80099ee <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009950:	4b2b      	ldr	r3, [pc, #172]	; (8009a00 <Paint_DrawString_EN+0xf8>)
 8009952:	0018      	movs	r0, r3
 8009954:	f009 fc90 	bl	8013278 <puts>
		return;
 8009958:	e04d      	b.n	80099f6 <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 800995a:	2116      	movs	r1, #22
 800995c:	187b      	adds	r3, r7, r1
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	8892      	ldrh	r2, [r2, #4]
 8009964:	189b      	adds	r3, r3, r2
 8009966:	4a25      	ldr	r2, [pc, #148]	; (80099fc <Paint_DrawString_EN+0xf4>)
 8009968:	8892      	ldrh	r2, [r2, #4]
 800996a:	4293      	cmp	r3, r2
 800996c:	dd0c      	ble.n	8009988 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 800996e:	187b      	adds	r3, r7, r1
 8009970:	220e      	movs	r2, #14
 8009972:	18ba      	adds	r2, r7, r2
 8009974:	8812      	ldrh	r2, [r2, #0]
 8009976:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	88d9      	ldrh	r1, [r3, #6]
 800997c:	2214      	movs	r2, #20
 800997e:	18bb      	adds	r3, r7, r2
 8009980:	18ba      	adds	r2, r7, r2
 8009982:	8812      	ldrh	r2, [r2, #0]
 8009984:	188a      	adds	r2, r1, r2
 8009986:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 8009988:	2114      	movs	r1, #20
 800998a:	187b      	adds	r3, r7, r1
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	88d2      	ldrh	r2, [r2, #6]
 8009992:	189b      	adds	r3, r3, r2
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <Paint_DrawString_EN+0xf4>)
 8009996:	88d2      	ldrh	r2, [r2, #6]
 8009998:	4293      	cmp	r3, r2
 800999a:	dd0a      	ble.n	80099b2 <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 800999c:	2316      	movs	r3, #22
 800999e:	18fb      	adds	r3, r7, r3
 80099a0:	220e      	movs	r2, #14
 80099a2:	18ba      	adds	r2, r7, r2
 80099a4:	8812      	ldrh	r2, [r2, #0]
 80099a6:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	220c      	movs	r2, #12
 80099ac:	18ba      	adds	r2, r7, r2
 80099ae:	8812      	ldrh	r2, [r2, #0]
 80099b0:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	781a      	ldrb	r2, [r3, #0]
 80099b6:	687c      	ldr	r4, [r7, #4]
 80099b8:	2314      	movs	r3, #20
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	8819      	ldrh	r1, [r3, #0]
 80099be:	2516      	movs	r5, #22
 80099c0:	197b      	adds	r3, r7, r5
 80099c2:	8818      	ldrh	r0, [r3, #0]
 80099c4:	232c      	movs	r3, #44	; 0x2c
 80099c6:	18fb      	adds	r3, r7, r3
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	2328      	movs	r3, #40	; 0x28
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	0023      	movs	r3, r4
 80099d6:	f7ff feb3 	bl	8009740 <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3301      	adds	r3, #1
 80099de:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	8899      	ldrh	r1, [r3, #4]
 80099e4:	197b      	adds	r3, r7, r5
 80099e6:	197a      	adds	r2, r7, r5
 80099e8:	8812      	ldrh	r2, [r2, #0]
 80099ea:	188a      	adds	r2, r1, r2
 80099ec:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1b1      	bne.n	800995a <Paint_DrawString_EN+0x52>
	}
}
 80099f6:	46bd      	mov	sp, r7
 80099f8:	b006      	add	sp, #24
 80099fa:	bdb0      	pop	{r4, r5, r7, pc}
 80099fc:	200001d8 	.word	0x200001d8
 8009a00:	08016004 	.word	0x08016004

08009a04 <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8009a04:	b5b0      	push	{r4, r5, r7, lr}
 8009a06:	4c6b      	ldr	r4, [pc, #428]	; (8009bb4 <Paint_DrawNum+0x1b0>)
 8009a08:	44a5      	add	sp, r4
 8009a0a:	af02      	add	r7, sp, #8
 8009a0c:	60ba      	str	r2, [r7, #8]
 8009a0e:	607b      	str	r3, [r7, #4]
 8009a10:	4b69      	ldr	r3, [pc, #420]	; (8009bb8 <Paint_DrawNum+0x1b4>)
 8009a12:	2286      	movs	r2, #134	; 0x86
 8009a14:	0092      	lsls	r2, r2, #2
 8009a16:	4694      	mov	ip, r2
 8009a18:	44bc      	add	ip, r7
 8009a1a:	4463      	add	r3, ip
 8009a1c:	1c02      	adds	r2, r0, #0
 8009a1e:	801a      	strh	r2, [r3, #0]
 8009a20:	4b66      	ldr	r3, [pc, #408]	; (8009bbc <Paint_DrawNum+0x1b8>)
 8009a22:	2286      	movs	r2, #134	; 0x86
 8009a24:	0092      	lsls	r2, r2, #2
 8009a26:	4694      	mov	ip, r2
 8009a28:	44bc      	add	ip, r7
 8009a2a:	4463      	add	r3, ip
 8009a2c:	1c0a      	adds	r2, r1, #0
 8009a2e:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 8009a30:	4b63      	ldr	r3, [pc, #396]	; (8009bc0 <Paint_DrawNum+0x1bc>)
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	2200      	movs	r2, #0
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	2385      	movs	r3, #133	; 0x85
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	2200      	movs	r2, #0
 8009a40:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 8009a42:	4b60      	ldr	r3, [pc, #384]	; (8009bc4 <Paint_DrawNum+0x1c0>)
 8009a44:	2286      	movs	r2, #134	; 0x86
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	4694      	mov	ip, r2
 8009a4a:	44bc      	add	ip, r7
 8009a4c:	4463      	add	r3, ip
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	3304      	adds	r3, #4
 8009a54:	22fb      	movs	r2, #251	; 0xfb
 8009a56:	2100      	movs	r1, #0
 8009a58:	0018      	movs	r0, r3
 8009a5a:	f009 fad1 	bl	8013000 <memset>
 8009a5e:	4b5a      	ldr	r3, [pc, #360]	; (8009bc8 <Paint_DrawNum+0x1c4>)
 8009a60:	2286      	movs	r2, #134	; 0x86
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	4694      	mov	ip, r2
 8009a66:	44bc      	add	ip, r7
 8009a68:	4463      	add	r3, ip
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	22fb      	movs	r2, #251	; 0xfb
 8009a72:	2100      	movs	r1, #0
 8009a74:	0018      	movs	r0, r3
 8009a76:	f009 fac3 	bl	8013000 <memset>
	uint8_t *pStr = Str_Array;
 8009a7a:	2388      	movs	r3, #136	; 0x88
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	18fb      	adds	r3, r7, r3
 8009a80:	2284      	movs	r2, #132	; 0x84
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	18ba      	adds	r2, r7, r2
 8009a86:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009a88:	4b50      	ldr	r3, [pc, #320]	; (8009bcc <Paint_DrawNum+0x1c8>)
 8009a8a:	889b      	ldrh	r3, [r3, #4]
 8009a8c:	4a4a      	ldr	r2, [pc, #296]	; (8009bb8 <Paint_DrawNum+0x1b4>)
 8009a8e:	2186      	movs	r1, #134	; 0x86
 8009a90:	0089      	lsls	r1, r1, #2
 8009a92:	468c      	mov	ip, r1
 8009a94:	44bc      	add	ip, r7
 8009a96:	4462      	add	r2, ip
 8009a98:	8812      	ldrh	r2, [r2, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d80a      	bhi.n	8009ab4 <Paint_DrawNum+0xb0>
 8009a9e:	4b4b      	ldr	r3, [pc, #300]	; (8009bcc <Paint_DrawNum+0x1c8>)
 8009aa0:	88db      	ldrh	r3, [r3, #6]
 8009aa2:	4a46      	ldr	r2, [pc, #280]	; (8009bbc <Paint_DrawNum+0x1b8>)
 8009aa4:	2186      	movs	r1, #134	; 0x86
 8009aa6:	0089      	lsls	r1, r1, #2
 8009aa8:	468c      	mov	ip, r1
 8009aaa:	44bc      	add	ip, r7
 8009aac:	4462      	add	r2, ip
 8009aae:	8812      	ldrh	r2, [r2, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d927      	bls.n	8009b04 <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8009ab4:	4b46      	ldr	r3, [pc, #280]	; (8009bd0 <Paint_DrawNum+0x1cc>)
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f009 fbde 	bl	8013278 <puts>
 8009abc:	e074      	b.n	8009ba8 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	210a      	movs	r1, #10
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f7f6 fc96 	bl	80003f4 <__aeabi_idivmod>
 8009ac8:	000b      	movs	r3, r1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	483c      	ldr	r0, [pc, #240]	; (8009bc0 <Paint_DrawNum+0x1bc>)
 8009ace:	183b      	adds	r3, r7, r0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	5e5b      	ldrsh	r3, [r3, r1]
 8009ad4:	3230      	adds	r2, #48	; 0x30
 8009ad6:	b2d1      	uxtb	r1, r2
 8009ad8:	4a3b      	ldr	r2, [pc, #236]	; (8009bc8 <Paint_DrawNum+0x1c4>)
 8009ada:	2486      	movs	r4, #134	; 0x86
 8009adc:	00a4      	lsls	r4, r4, #2
 8009ade:	46a4      	mov	ip, r4
 8009ae0:	44bc      	add	ip, r7
 8009ae2:	4462      	add	r2, ip
 8009ae4:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8009ae6:	183b      	adds	r3, r7, r0
 8009ae8:	2200      	movs	r2, #0
 8009aea:	5e9b      	ldrsh	r3, [r3, r2]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3301      	adds	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	183b      	adds	r3, r7, r0
 8009af4:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	210a      	movs	r1, #10
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7f6 fb94 	bl	8000228 <__divsi3>
 8009b00:	0003      	movs	r3, r0
 8009b02:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1d9      	bne.n	8009abe <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 8009b0a:	e027      	b.n	8009b5c <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8009b0c:	482c      	ldr	r0, [pc, #176]	; (8009bc0 <Paint_DrawNum+0x1bc>)
 8009b0e:	183b      	adds	r3, r7, r0
 8009b10:	2200      	movs	r2, #0
 8009b12:	5e9b      	ldrsh	r3, [r3, r2]
 8009b14:	1e5a      	subs	r2, r3, #1
 8009b16:	2485      	movs	r4, #133	; 0x85
 8009b18:	00a4      	lsls	r4, r4, #2
 8009b1a:	193b      	adds	r3, r7, r4
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	5e5b      	ldrsh	r3, [r3, r1]
 8009b20:	4929      	ldr	r1, [pc, #164]	; (8009bc8 <Paint_DrawNum+0x1c4>)
 8009b22:	2586      	movs	r5, #134	; 0x86
 8009b24:	00ad      	lsls	r5, r5, #2
 8009b26:	46ac      	mov	ip, r5
 8009b28:	44bc      	add	ip, r7
 8009b2a:	4461      	add	r1, ip
 8009b2c:	5c89      	ldrb	r1, [r1, r2]
 8009b2e:	4a25      	ldr	r2, [pc, #148]	; (8009bc4 <Paint_DrawNum+0x1c0>)
 8009b30:	2586      	movs	r5, #134	; 0x86
 8009b32:	00ad      	lsls	r5, r5, #2
 8009b34:	46ac      	mov	ip, r5
 8009b36:	44bc      	add	ip, r7
 8009b38:	4462      	add	r2, ip
 8009b3a:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 8009b3c:	193b      	adds	r3, r7, r4
 8009b3e:	2200      	movs	r2, #0
 8009b40:	5e9b      	ldrsh	r3, [r3, r2]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3301      	adds	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	193b      	adds	r3, r7, r4
 8009b4a:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 8009b4c:	183b      	adds	r3, r7, r0
 8009b4e:	2200      	movs	r2, #0
 8009b50:	5e9b      	ldrsh	r3, [r3, r2]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	183b      	adds	r3, r7, r0
 8009b5a:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 8009b5c:	4b18      	ldr	r3, [pc, #96]	; (8009bc0 <Paint_DrawNum+0x1bc>)
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	2200      	movs	r2, #0
 8009b62:	5e9b      	ldrsh	r3, [r3, r2]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dcd1      	bgt.n	8009b0c <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 8009b68:	687c      	ldr	r4, [r7, #4]
 8009b6a:	2384      	movs	r3, #132	; 0x84
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <Paint_DrawNum+0x1b8>)
 8009b74:	2186      	movs	r1, #134	; 0x86
 8009b76:	0089      	lsls	r1, r1, #2
 8009b78:	468c      	mov	ip, r1
 8009b7a:	44bc      	add	ip, r7
 8009b7c:	4463      	add	r3, ip
 8009b7e:	8819      	ldrh	r1, [r3, #0]
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <Paint_DrawNum+0x1b4>)
 8009b82:	2086      	movs	r0, #134	; 0x86
 8009b84:	0080      	lsls	r0, r0, #2
 8009b86:	4684      	mov	ip, r0
 8009b88:	44bc      	add	ip, r7
 8009b8a:	4463      	add	r3, ip
 8009b8c:	8818      	ldrh	r0, [r3, #0]
 8009b8e:	238b      	movs	r3, #139	; 0x8b
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	18fb      	adds	r3, r7, r3
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	238a      	movs	r3, #138	; 0x8a
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	18fb      	adds	r3, r7, r3
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	0023      	movs	r3, r4
 8009ba4:	f7ff feb0 	bl	8009908 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	2386      	movs	r3, #134	; 0x86
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	449d      	add	sp, r3
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	fffffde0 	.word	0xfffffde0
 8009bb8:	fffffdf6 	.word	0xfffffdf6
 8009bbc:	fffffdf4 	.word	0xfffffdf4
 8009bc0:	00000216 	.word	0x00000216
 8009bc4:	fffffef8 	.word	0xfffffef8
 8009bc8:	fffffdf8 	.word	0xfffffdf8
 8009bcc:	200001d8 	.word	0x200001d8
 8009bd0:	08016048 	.word	0x08016048

08009bd4 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2201      	movs	r2, #1
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	609a      	str	r2, [r3, #8]
}
 8009be8:	46c0      	nop			; (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b002      	add	sp, #8
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2218      	movs	r2, #24
 8009c00:	4393      	bics	r3, r2
 8009c02:	001a      	movs	r2, r3
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
}
 8009c0c:	46c0      	nop			; (mov r8, r8)
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b002      	add	sp, #8
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	615a      	str	r2, [r3, #20]
}
 8009c24:	46c0      	nop			; (mov r8, r8)
 8009c26:	46bd      	mov	sp, r7
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	601a      	str	r2, [r3, #0]
}
 8009c3c:	46c0      	nop			; (mov r8, r8)
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b002      	add	sp, #8
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	000a      	movs	r2, r1
 8009c4e:	1cbb      	adds	r3, r7, #2
 8009c50:	801a      	strh	r2, [r3, #0]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	1cba      	adds	r2, r7, #2
 8009c5a:	8812      	ldrh	r2, [r2, #0]
 8009c5c:	801a      	strh	r2, [r3, #0]
}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	46bd      	mov	sp, r7
 8009c62:	b004      	add	sp, #16
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
}
 8009c74:	0018      	movs	r0, r3
 8009c76:	46bd      	mov	sp, r7
 8009c78:	b002      	add	sp, #8
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009c86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4013      	ands	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
}
 8009c9c:	46c0      	nop			; (mov r8, r8)
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b004      	add	sp, #16
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40021000 	.word	0x40021000

08009ca8 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8009ca8:	b5b0      	push	{r4, r5, r7, lr}
 8009caa:	b090      	sub	sp, #64	; 0x40
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	0002      	movs	r2, r0
 8009cb0:	1dfb      	adds	r3, r7, #7
 8009cb2:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8009cb4:	231a      	movs	r3, #26
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	2205      	movs	r2, #5
 8009cba:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8009cc8:	2300      	movs	r3, #0
 8009cca:	633b      	str	r3, [r7, #48]	; 0x30
 8009ccc:	2300      	movs	r3, #0
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cd8:	2300      	movs	r3, #0
 8009cda:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613a      	str	r2, [r7, #16]
 8009ce6:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8009ce8:	231b      	movs	r3, #27
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	701a      	strb	r2, [r3, #0]

  EE_Status status = EE_OK;
 8009cf0:	230e      	movs	r3, #14
 8009cf2:	18fb      	adds	r3, r7, r3
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	801a      	strh	r2, [r3, #0]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8009cf8:	f001 fe5d 	bl	800b9b6 <FI_CheckBankConfig>
 8009cfc:	1e03      	subs	r3, r0, #0
 8009cfe:	d002      	beq.n	8009d06 <EE_Init+0x5e>
  {
    return EE_INVALID_BANK_CFG;
 8009d00:	230e      	movs	r3, #14
 8009d02:	f000 fd72 	bl	800a7ea <EE_Init+0xb42>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8009d06:	f001 fdd7 	bl	800b8b8 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8009d0a:	4baa      	ldr	r3, [pc, #680]	; (8009fb4 <EE_Init+0x30c>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009d10:	4ba9      	ldr	r3, [pc, #676]	; (8009fb8 <EE_Init+0x310>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	029a      	lsls	r2, r3, #10
 8009d16:	23ff      	movs	r3, #255	; 0xff
 8009d18:	029b      	lsls	r3, r3, #10
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	23d4      	movs	r3, #212	; 0xd4
 8009d1e:	025b      	lsls	r3, r3, #9
 8009d20:	0011      	movs	r1, r2
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7f6 fa7c 	bl	8000220 <__aeabi_uidivmod>
 8009d28:	000b      	movs	r3, r1
 8009d2a:	0adb      	lsrs	r3, r3, #11
 8009d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2e:	e035      	b.n	8009d9c <EE_Init+0xf4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d32:	2280      	movs	r2, #128	; 0x80
 8009d34:	0252      	lsls	r2, r2, #9
 8009d36:	4694      	mov	ip, r2
 8009d38:	4463      	add	r3, ip
 8009d3a:	02dc      	lsls	r4, r3, #11
 8009d3c:	4b9e      	ldr	r3, [pc, #632]	; (8009fb8 <EE_Init+0x310>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	029a      	lsls	r2, r3, #10
 8009d42:	23ff      	movs	r3, #255	; 0xff
 8009d44:	029b      	lsls	r3, r3, #10
 8009d46:	4013      	ands	r3, r2
 8009d48:	0019      	movs	r1, r3
 8009d4a:	23d4      	movs	r3, #212	; 0xd4
 8009d4c:	0258      	lsls	r0, r3, #9
 8009d4e:	f7f6 f9e1 	bl	8000114 <__udivsi3>
 8009d52:	0003      	movs	r3, r0
 8009d54:	0019      	movs	r1, r3
 8009d56:	4b98      	ldr	r3, [pc, #608]	; (8009fb8 <EE_Init+0x310>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	029a      	lsls	r2, r3, #10
 8009d5c:	23ff      	movs	r3, #255	; 0xff
 8009d5e:	029b      	lsls	r3, r3, #10
 8009d60:	4013      	ands	r3, r2
 8009d62:	434b      	muls	r3, r1
 8009d64:	18e3      	adds	r3, r4, r3
 8009d66:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d6c:	e00e      	b.n	8009d8c <EE_Init+0xe4>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8009d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	18d2      	adds	r2, r2, r3
 8009d74:	4b91      	ldr	r3, [pc, #580]	; (8009fbc <EE_Init+0x314>)
 8009d76:	601a      	str	r2, [r3, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8009d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7c:	18d3      	adds	r3, r2, r3
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	613a      	str	r2, [r7, #16]
 8009d84:	617b      	str	r3, [r7, #20]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8009d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d88:	3308      	adds	r3, #8
 8009d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8e:	2380      	movs	r3, #128	; 0x80
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d3eb      	bcc.n	8009d6e <EE_Init+0xc6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d98:	3301      	adds	r3, #1
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d9c:	4b86      	ldr	r3, [pc, #536]	; (8009fb8 <EE_Init+0x310>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	029a      	lsls	r2, r3, #10
 8009da2:	23ff      	movs	r3, #255	; 0xff
 8009da4:	029b      	lsls	r3, r3, #10
 8009da6:	401a      	ands	r2, r3
 8009da8:	23d4      	movs	r3, #212	; 0xd4
 8009daa:	025b      	lsls	r3, r3, #9
 8009dac:	0011      	movs	r1, r2
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7f6 fa36 	bl	8000220 <__aeabi_uidivmod>
 8009db4:	000b      	movs	r3, r1
 8009db6:	0adb      	lsrs	r3, r3, #11
 8009db8:	330a      	adds	r3, #10
 8009dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d3b7      	bcc.n	8009d30 <EE_Init+0x88>
     Address=(0x8000000|(FLASH->ECCR & 0x000FFFFF)); //Recovery of address where ECC error occured
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8009dc0:	4b7c      	ldr	r3, [pc, #496]	; (8009fb4 <EE_Init+0x30c>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009dc6:	4b7c      	ldr	r3, [pc, #496]	; (8009fb8 <EE_Init+0x310>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	029a      	lsls	r2, r3, #10
 8009dcc:	23ff      	movs	r3, #255	; 0xff
 8009dce:	029b      	lsls	r3, r3, #10
 8009dd0:	401a      	ands	r2, r3
 8009dd2:	23d4      	movs	r3, #212	; 0xd4
 8009dd4:	025b      	lsls	r3, r3, #9
 8009dd6:	0011      	movs	r1, r2
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7f6 fa21 	bl	8000220 <__aeabi_uidivmod>
 8009dde:	000b      	movs	r3, r1
 8009de0:	0adb      	lsrs	r3, r3, #11
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de4:	e041      	b.n	8009e6a <EE_Init+0x1c2>
  {
    pageaddress = PAGE_ADDRESS(page);
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	2280      	movs	r2, #128	; 0x80
 8009dea:	0252      	lsls	r2, r2, #9
 8009dec:	4694      	mov	ip, r2
 8009dee:	4463      	add	r3, ip
 8009df0:	02dc      	lsls	r4, r3, #11
 8009df2:	4b71      	ldr	r3, [pc, #452]	; (8009fb8 <EE_Init+0x310>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	029a      	lsls	r2, r3, #10
 8009df8:	23ff      	movs	r3, #255	; 0xff
 8009dfa:	029b      	lsls	r3, r3, #10
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	0019      	movs	r1, r3
 8009e00:	23d4      	movs	r3, #212	; 0xd4
 8009e02:	0258      	lsls	r0, r3, #9
 8009e04:	f7f6 f986 	bl	8000114 <__udivsi3>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	0019      	movs	r1, r3
 8009e0c:	4b6a      	ldr	r3, [pc, #424]	; (8009fb8 <EE_Init+0x310>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	029a      	lsls	r2, r3, #10
 8009e12:	23ff      	movs	r3, #255	; 0xff
 8009e14:	029b      	lsls	r3, r3, #10
 8009e16:	4013      	ands	r3, r2
 8009e18:	434b      	muls	r3, r1
 8009e1a:	18e3      	adds	r3, r4, r3
 8009e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8009e1e:	251a      	movs	r5, #26
 8009e20:	197c      	adds	r4, r7, r5
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	0018      	movs	r0, r3
 8009e26:	f001 fcf7 	bl	800b818 <GetPageState>
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	7023      	strb	r3, [r4, #0]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8009e2e:	197b      	adds	r3, r7, r5
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d003      	beq.n	8009e3e <EE_Init+0x196>
 8009e36:	197b      	adds	r3, r7, r5
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d103      	bne.n	8009e46 <EE_Init+0x19e>
    {
      nbactivereceivepage++;
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	3301      	adds	r3, #1
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e44:	e00e      	b.n	8009e64 <EE_Init+0x1bc>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8009e46:	231a      	movs	r3, #26
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d109      	bne.n	8009e64 <EE_Init+0x1bc>
    {
      if (nbvalidpage == 0U)
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <EE_Init+0x1b2>
      {
        firstvalidpage = page;
 8009e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e58:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	3301      	adds	r3, #1
 8009e62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e66:	3301      	adds	r3, #1
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e6a:	4b53      	ldr	r3, [pc, #332]	; (8009fb8 <EE_Init+0x310>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	029a      	lsls	r2, r3, #10
 8009e70:	23ff      	movs	r3, #255	; 0xff
 8009e72:	029b      	lsls	r3, r3, #10
 8009e74:	401a      	ands	r2, r3
 8009e76:	23d4      	movs	r3, #212	; 0xd4
 8009e78:	025b      	lsls	r3, r3, #9
 8009e7a:	0011      	movs	r1, r2
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f7f6 f9cf 	bl	8000220 <__aeabi_uidivmod>
 8009e82:	000b      	movs	r3, r1
 8009e84:	0adb      	lsrs	r3, r3, #11
 8009e86:	330a      	adds	r3, #10
 8009e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d3ab      	bcc.n	8009de6 <EE_Init+0x13e>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d000      	beq.n	8009e96 <EE_Init+0x1ee>
 8009e94:	e07d      	b.n	8009f92 <EE_Init+0x2ea>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d074      	beq.n	8009f86 <EE_Init+0x2de>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8009e9c:	4b46      	ldr	r3, [pc, #280]	; (8009fb8 <EE_Init+0x310>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	029a      	lsls	r2, r3, #10
 8009ea2:	23ff      	movs	r3, #255	; 0xff
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	401a      	ands	r2, r3
 8009ea8:	23d4      	movs	r3, #212	; 0xd4
 8009eaa:	025b      	lsls	r3, r3, #9
 8009eac:	0011      	movs	r1, r2
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f7f6 f9b6 	bl	8000220 <__aeabi_uidivmod>
 8009eb4:	000b      	movs	r3, r1
 8009eb6:	0adb      	lsrs	r3, r3, #11
 8009eb8:	6a3a      	ldr	r2, [r7, #32]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	3309      	adds	r3, #9
 8009ebe:	210a      	movs	r1, #10
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f7f6 f9ad 	bl	8000220 <__aeabi_uidivmod>
 8009ec6:	000b      	movs	r3, r1
 8009ec8:	001c      	movs	r4, r3
 8009eca:	4b3b      	ldr	r3, [pc, #236]	; (8009fb8 <EE_Init+0x310>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	029a      	lsls	r2, r3, #10
 8009ed0:	23ff      	movs	r3, #255	; 0xff
 8009ed2:	029b      	lsls	r3, r3, #10
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	23d4      	movs	r3, #212	; 0xd4
 8009ed8:	025b      	lsls	r3, r3, #9
 8009eda:	0011      	movs	r1, r2
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7f6 f99f 	bl	8000220 <__aeabi_uidivmod>
 8009ee2:	000b      	movs	r3, r1
 8009ee4:	0adb      	lsrs	r3, r3, #11
 8009ee6:	18e3      	adds	r3, r4, r3
 8009ee8:	2280      	movs	r2, #128	; 0x80
 8009eea:	0252      	lsls	r2, r2, #9
 8009eec:	4694      	mov	ip, r2
 8009eee:	4463      	add	r3, ip
 8009ef0:	02dc      	lsls	r4, r3, #11
 8009ef2:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <EE_Init+0x310>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	029a      	lsls	r2, r3, #10
 8009ef8:	23ff      	movs	r3, #255	; 0xff
 8009efa:	029b      	lsls	r3, r3, #10
 8009efc:	4013      	ands	r3, r2
 8009efe:	0019      	movs	r1, r3
 8009f00:	23d4      	movs	r3, #212	; 0xd4
 8009f02:	0258      	lsls	r0, r3, #9
 8009f04:	f7f6 f906 	bl	8000114 <__udivsi3>
 8009f08:	0003      	movs	r3, r0
 8009f0a:	0019      	movs	r1, r3
 8009f0c:	4b2a      	ldr	r3, [pc, #168]	; (8009fb8 <EE_Init+0x310>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	029a      	lsls	r2, r3, #10
 8009f12:	23ff      	movs	r3, #255	; 0xff
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	4013      	ands	r3, r2
 8009f18:	434b      	muls	r3, r1
 8009f1a:	18e3      	adds	r3, r4, r3
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f001 fc7b 	bl	800b818 <GetPageState>
 8009f22:	0003      	movs	r3, r0
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d134      	bne.n	8009f92 <EE_Init+0x2ea>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8009f28:	4b23      	ldr	r3, [pc, #140]	; (8009fb8 <EE_Init+0x310>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	029a      	lsls	r2, r3, #10
 8009f2e:	23ff      	movs	r3, #255	; 0xff
 8009f30:	029b      	lsls	r3, r3, #10
 8009f32:	401a      	ands	r2, r3
 8009f34:	23d4      	movs	r3, #212	; 0xd4
 8009f36:	025b      	lsls	r3, r3, #9
 8009f38:	0011      	movs	r1, r2
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f7f6 f970 	bl	8000220 <__aeabi_uidivmod>
 8009f40:	000b      	movs	r3, r1
 8009f42:	0adb      	lsrs	r3, r3, #11
 8009f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	3301      	adds	r3, #1
 8009f4a:	210a      	movs	r1, #10
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f7f6 f967 	bl	8000220 <__aeabi_uidivmod>
 8009f52:	000b      	movs	r3, r1
 8009f54:	001c      	movs	r4, r3
 8009f56:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <EE_Init+0x310>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	029a      	lsls	r2, r3, #10
 8009f5c:	23ff      	movs	r3, #255	; 0xff
 8009f5e:	029b      	lsls	r3, r3, #10
 8009f60:	401a      	ands	r2, r3
 8009f62:	23d4      	movs	r3, #212	; 0xd4
 8009f64:	025b      	lsls	r3, r3, #9
 8009f66:	0011      	movs	r1, r2
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f7f6 f959 	bl	8000220 <__aeabi_uidivmod>
 8009f6e:	000b      	movs	r3, r1
 8009f70:	0adb      	lsrs	r3, r3, #11
 8009f72:	18e3      	adds	r3, r4, r3
 8009f74:	2101      	movs	r1, #1
 8009f76:	0018      	movs	r0, r3
 8009f78:	f001 fb7c 	bl	800b674 <SetPageState>
 8009f7c:	1e03      	subs	r3, r0, #0
 8009f7e:	d008      	beq.n	8009f92 <EE_Init+0x2ea>
        {
          return EE_WRITE_ERROR;
 8009f80:	2302      	movs	r3, #2
 8009f82:	f000 fc32 	bl	800a7ea <EE_Init+0xb42>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8009f86:	2000      	movs	r0, #0
 8009f88:	f000 fc36 	bl	800a7f8 <EE_Format>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	f000 fc2c 	bl	800a7ea <EE_Init+0xb42>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <EE_Init+0x310>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	029a      	lsls	r2, r3, #10
 8009f98:	23ff      	movs	r3, #255	; 0xff
 8009f9a:	029b      	lsls	r3, r3, #10
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	23d4      	movs	r3, #212	; 0xd4
 8009fa0:	025b      	lsls	r3, r3, #9
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f7f6 f93b 	bl	8000220 <__aeabi_uidivmod>
 8009faa:	000b      	movs	r3, r1
 8009fac:	0adb      	lsrs	r3, r3, #11
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb0:	e10c      	b.n	800a1cc <EE_Init+0x524>
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	200001bc 	.word	0x200001bc
 8009fb8:	1fff75e0 	.word	0x1fff75e0
 8009fbc:	200001b8 	.word	0x200001b8
  {
    pageaddress = PAGE_ADDRESS(page);
 8009fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc2:	2280      	movs	r2, #128	; 0x80
 8009fc4:	0252      	lsls	r2, r2, #9
 8009fc6:	4694      	mov	ip, r2
 8009fc8:	4463      	add	r3, ip
 8009fca:	02dc      	lsls	r4, r3, #11
 8009fcc:	4be0      	ldr	r3, [pc, #896]	; (800a350 <EE_Init+0x6a8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	029a      	lsls	r2, r3, #10
 8009fd2:	23ff      	movs	r3, #255	; 0xff
 8009fd4:	029b      	lsls	r3, r3, #10
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	0019      	movs	r1, r3
 8009fda:	23d4      	movs	r3, #212	; 0xd4
 8009fdc:	0258      	lsls	r0, r3, #9
 8009fde:	f7f6 f899 	bl	8000114 <__udivsi3>
 8009fe2:	0003      	movs	r3, r0
 8009fe4:	0019      	movs	r1, r3
 8009fe6:	4bda      	ldr	r3, [pc, #872]	; (800a350 <EE_Init+0x6a8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	029a      	lsls	r2, r3, #10
 8009fec:	23ff      	movs	r3, #255	; 0xff
 8009fee:	029b      	lsls	r3, r3, #10
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	434b      	muls	r3, r1
 8009ff4:	18e3      	adds	r3, r4, r3
 8009ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8009ff8:	251a      	movs	r5, #26
 8009ffa:	197c      	adds	r4, r7, r5
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	0018      	movs	r0, r3
 800a000:	f001 fc0a 	bl	800b818 <GetPageState>
 800a004:	0003      	movs	r3, r0
 800a006:	7023      	strb	r3, [r4, #0]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 800a008:	197b      	adds	r3, r7, r5
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d000      	beq.n	800a012 <EE_Init+0x36a>
 800a010:	e0d9      	b.n	800a1c6 <EE_Init+0x51e>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a012:	4bcf      	ldr	r3, [pc, #828]	; (800a350 <EE_Init+0x6a8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	029a      	lsls	r2, r3, #10
 800a018:	23ff      	movs	r3, #255	; 0xff
 800a01a:	029b      	lsls	r3, r3, #10
 800a01c:	401a      	ands	r2, r3
 800a01e:	23d4      	movs	r3, #212	; 0xd4
 800a020:	025b      	lsls	r3, r3, #9
 800a022:	0011      	movs	r1, r2
 800a024:	0018      	movs	r0, r3
 800a026:	f7f6 f8fb 	bl	8000220 <__aeabi_uidivmod>
 800a02a:	000b      	movs	r3, r1
 800a02c:	0adb      	lsrs	r3, r3, #11
 800a02e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a030:	429a      	cmp	r2, r3
 800a032:	d061      	beq.n	800a0f8 <EE_Init+0x450>
 800a034:	4bc6      	ldr	r3, [pc, #792]	; (800a350 <EE_Init+0x6a8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	029a      	lsls	r2, r3, #10
 800a03a:	23ff      	movs	r3, #255	; 0xff
 800a03c:	029b      	lsls	r3, r3, #10
 800a03e:	401a      	ands	r2, r3
 800a040:	23d4      	movs	r3, #212	; 0xd4
 800a042:	025b      	lsls	r3, r3, #9
 800a044:	0011      	movs	r1, r2
 800a046:	0018      	movs	r0, r3
 800a048:	f7f6 f8ea 	bl	8000220 <__aeabi_uidivmod>
 800a04c:	000b      	movs	r3, r1
 800a04e:	0adb      	lsrs	r3, r3, #11
 800a050:	3305      	adds	r3, #5
 800a052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a054:	429a      	cmp	r2, r3
 800a056:	d04f      	beq.n	800a0f8 <EE_Init+0x450>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a058:	4bbd      	ldr	r3, [pc, #756]	; (800a350 <EE_Init+0x6a8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	029a      	lsls	r2, r3, #10
 800a05e:	23ff      	movs	r3, #255	; 0xff
 800a060:	029b      	lsls	r3, r3, #10
 800a062:	401a      	ands	r2, r3
 800a064:	23d4      	movs	r3, #212	; 0xd4
 800a066:	025b      	lsls	r3, r3, #9
 800a068:	0011      	movs	r1, r2
 800a06a:	0018      	movs	r0, r3
 800a06c:	f7f6 f8d8 	bl	8000220 <__aeabi_uidivmod>
 800a070:	000b      	movs	r3, r1
 800a072:	0adb      	lsrs	r3, r3, #11
 800a074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	3309      	adds	r3, #9
 800a07a:	210a      	movs	r1, #10
 800a07c:	0018      	movs	r0, r3
 800a07e:	f7f6 f8cf 	bl	8000220 <__aeabi_uidivmod>
 800a082:	000b      	movs	r3, r1
 800a084:	001c      	movs	r4, r3
 800a086:	4bb2      	ldr	r3, [pc, #712]	; (800a350 <EE_Init+0x6a8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	029a      	lsls	r2, r3, #10
 800a08c:	23ff      	movs	r3, #255	; 0xff
 800a08e:	029b      	lsls	r3, r3, #10
 800a090:	401a      	ands	r2, r3
 800a092:	23d4      	movs	r3, #212	; 0xd4
 800a094:	025b      	lsls	r3, r3, #9
 800a096:	0011      	movs	r1, r2
 800a098:	0018      	movs	r0, r3
 800a09a:	f7f6 f8c1 	bl	8000220 <__aeabi_uidivmod>
 800a09e:	000b      	movs	r3, r1
 800a0a0:	0adb      	lsrs	r3, r3, #11
 800a0a2:	18e3      	adds	r3, r4, r3
 800a0a4:	2280      	movs	r2, #128	; 0x80
 800a0a6:	0252      	lsls	r2, r2, #9
 800a0a8:	4694      	mov	ip, r2
 800a0aa:	4463      	add	r3, ip
 800a0ac:	02dc      	lsls	r4, r3, #11
 800a0ae:	4ba8      	ldr	r3, [pc, #672]	; (800a350 <EE_Init+0x6a8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	029a      	lsls	r2, r3, #10
 800a0b4:	23ff      	movs	r3, #255	; 0xff
 800a0b6:	029b      	lsls	r3, r3, #10
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	0019      	movs	r1, r3
 800a0bc:	23d4      	movs	r3, #212	; 0xd4
 800a0be:	0258      	lsls	r0, r3, #9
 800a0c0:	f7f6 f828 	bl	8000114 <__udivsi3>
 800a0c4:	0003      	movs	r3, r0
 800a0c6:	0019      	movs	r1, r3
 800a0c8:	4ba1      	ldr	r3, [pc, #644]	; (800a350 <EE_Init+0x6a8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	029a      	lsls	r2, r3, #10
 800a0ce:	23ff      	movs	r3, #255	; 0xff
 800a0d0:	029b      	lsls	r3, r3, #10
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	434b      	muls	r3, r1
 800a0d6:	18e3      	adds	r3, r4, r3
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f001 fb9d 	bl	800b818 <GetPageState>
 800a0de:	0003      	movs	r3, r0
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d104      	bne.n	800a0ee <EE_Init+0x446>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a0e4:	231b      	movs	r3, #27
 800a0e6:	18fb      	adds	r3, r7, r3
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a0ec:	e052      	b.n	800a194 <EE_Init+0x4ec>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a0ee:	231b      	movs	r3, #27
 800a0f0:	18fb      	adds	r3, r7, r3
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a0f6:	e04d      	b.n	800a194 <EE_Init+0x4ec>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a0f8:	4b95      	ldr	r3, [pc, #596]	; (800a350 <EE_Init+0x6a8>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	029a      	lsls	r2, r3, #10
 800a0fe:	23ff      	movs	r3, #255	; 0xff
 800a100:	029b      	lsls	r3, r3, #10
 800a102:	401a      	ands	r2, r3
 800a104:	23d4      	movs	r3, #212	; 0xd4
 800a106:	025b      	lsls	r3, r3, #9
 800a108:	0011      	movs	r1, r2
 800a10a:	0018      	movs	r0, r3
 800a10c:	f7f6 f888 	bl	8000220 <__aeabi_uidivmod>
 800a110:	000b      	movs	r3, r1
 800a112:	0adb      	lsrs	r3, r3, #11
 800a114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	3301      	adds	r3, #1
 800a11a:	210a      	movs	r1, #10
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7f6 f87f 	bl	8000220 <__aeabi_uidivmod>
 800a122:	000b      	movs	r3, r1
 800a124:	001c      	movs	r4, r3
 800a126:	4b8a      	ldr	r3, [pc, #552]	; (800a350 <EE_Init+0x6a8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	029a      	lsls	r2, r3, #10
 800a12c:	23ff      	movs	r3, #255	; 0xff
 800a12e:	029b      	lsls	r3, r3, #10
 800a130:	401a      	ands	r2, r3
 800a132:	23d4      	movs	r3, #212	; 0xd4
 800a134:	025b      	lsls	r3, r3, #9
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f7f6 f871 	bl	8000220 <__aeabi_uidivmod>
 800a13e:	000b      	movs	r3, r1
 800a140:	0adb      	lsrs	r3, r3, #11
 800a142:	18e3      	adds	r3, r4, r3
 800a144:	2280      	movs	r2, #128	; 0x80
 800a146:	0252      	lsls	r2, r2, #9
 800a148:	4694      	mov	ip, r2
 800a14a:	4463      	add	r3, ip
 800a14c:	02dc      	lsls	r4, r3, #11
 800a14e:	4b80      	ldr	r3, [pc, #512]	; (800a350 <EE_Init+0x6a8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	029a      	lsls	r2, r3, #10
 800a154:	23ff      	movs	r3, #255	; 0xff
 800a156:	029b      	lsls	r3, r3, #10
 800a158:	4013      	ands	r3, r2
 800a15a:	0019      	movs	r1, r3
 800a15c:	23d4      	movs	r3, #212	; 0xd4
 800a15e:	0258      	lsls	r0, r3, #9
 800a160:	f7f5 ffd8 	bl	8000114 <__udivsi3>
 800a164:	0003      	movs	r3, r0
 800a166:	0019      	movs	r1, r3
 800a168:	4b79      	ldr	r3, [pc, #484]	; (800a350 <EE_Init+0x6a8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	029a      	lsls	r2, r3, #10
 800a16e:	23ff      	movs	r3, #255	; 0xff
 800a170:	029b      	lsls	r3, r3, #10
 800a172:	4013      	ands	r3, r2
 800a174:	434b      	muls	r3, r1
 800a176:	18e3      	adds	r3, r4, r3
 800a178:	0018      	movs	r0, r3
 800a17a:	f001 fb4d 	bl	800b818 <GetPageState>
 800a17e:	1e03      	subs	r3, r0, #0
 800a180:	d104      	bne.n	800a18c <EE_Init+0x4e4>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 800a182:	231b      	movs	r3, #27
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	e003      	b.n	800a194 <EE_Init+0x4ec>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a18c:	231b      	movs	r3, #27
 800a18e:	18fb      	adds	r3, r7, r3
 800a190:	2201      	movs	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 800a194:	231b      	movs	r3, #27
 800a196:	18fb      	adds	r3, r7, r3
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d113      	bne.n	800a1c6 <EE_Init+0x51e>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800a19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	4b6c      	ldr	r3, [pc, #432]	; (800a354 <EE_Init+0x6ac>)
 800a1a4:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f000 ff54 	bl	800b058 <PagesTransfer>
 800a1b0:	0003      	movs	r3, r0
 800a1b2:	001a      	movs	r2, r3
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <EE_Init+0x518>
        {
          return EE_TRANSFER_ERROR;
 800a1bc:	230c      	movs	r3, #12
 800a1be:	e314      	b.n	800a7ea <EE_Init+0xb42>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 800a1c4:	e015      	b.n	800a1f2 <EE_Init+0x54a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1cc:	4b60      	ldr	r3, [pc, #384]	; (800a350 <EE_Init+0x6a8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	029a      	lsls	r2, r3, #10
 800a1d2:	23ff      	movs	r3, #255	; 0xff
 800a1d4:	029b      	lsls	r3, r3, #10
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	23d4      	movs	r3, #212	; 0xd4
 800a1da:	025b      	lsls	r3, r3, #9
 800a1dc:	0011      	movs	r1, r2
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7f6 f81e 	bl	8000220 <__aeabi_uidivmod>
 800a1e4:	000b      	movs	r3, r1
 800a1e6:	0adb      	lsrs	r3, r3, #11
 800a1e8:	330a      	adds	r3, #10
 800a1ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d200      	bcs.n	800a1f2 <EE_Init+0x54a>
 800a1f0:	e6e6      	b.n	8009fc0 <EE_Init+0x318>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a1f6:	4b56      	ldr	r3, [pc, #344]	; (800a350 <EE_Init+0x6a8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	029a      	lsls	r2, r3, #10
 800a1fc:	23ff      	movs	r3, #255	; 0xff
 800a1fe:	029b      	lsls	r3, r3, #10
 800a200:	401a      	ands	r2, r3
 800a202:	23d4      	movs	r3, #212	; 0xd4
 800a204:	025b      	lsls	r3, r3, #9
 800a206:	0011      	movs	r1, r2
 800a208:	0018      	movs	r0, r3
 800a20a:	f7f6 f809 	bl	8000220 <__aeabi_uidivmod>
 800a20e:	000b      	movs	r3, r1
 800a210:	0adb      	lsrs	r3, r3, #11
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a214:	e10a      	b.n	800a42c <EE_Init+0x784>
  {
    pageaddress = PAGE_ADDRESS(page);
 800a216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a218:	2280      	movs	r2, #128	; 0x80
 800a21a:	0252      	lsls	r2, r2, #9
 800a21c:	4694      	mov	ip, r2
 800a21e:	4463      	add	r3, ip
 800a220:	02dc      	lsls	r4, r3, #11
 800a222:	4b4b      	ldr	r3, [pc, #300]	; (800a350 <EE_Init+0x6a8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	029a      	lsls	r2, r3, #10
 800a228:	23ff      	movs	r3, #255	; 0xff
 800a22a:	029b      	lsls	r3, r3, #10
 800a22c:	4013      	ands	r3, r2
 800a22e:	0019      	movs	r1, r3
 800a230:	23d4      	movs	r3, #212	; 0xd4
 800a232:	0258      	lsls	r0, r3, #9
 800a234:	f7f5 ff6e 	bl	8000114 <__udivsi3>
 800a238:	0003      	movs	r3, r0
 800a23a:	0019      	movs	r1, r3
 800a23c:	4b44      	ldr	r3, [pc, #272]	; (800a350 <EE_Init+0x6a8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	029a      	lsls	r2, r3, #10
 800a242:	23ff      	movs	r3, #255	; 0xff
 800a244:	029b      	lsls	r3, r3, #10
 800a246:	4013      	ands	r3, r2
 800a248:	434b      	muls	r3, r1
 800a24a:	18e3      	adds	r3, r4, r3
 800a24c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 800a24e:	251a      	movs	r5, #26
 800a250:	197c      	adds	r4, r7, r5
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	0018      	movs	r0, r3
 800a256:	f001 fadf 	bl	800b818 <GetPageState>
 800a25a:	0003      	movs	r3, r0
 800a25c:	7023      	strb	r3, [r4, #0]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800a25e:	197b      	adds	r3, r7, r5
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b02      	cmp	r3, #2
 800a264:	d000      	beq.n	800a268 <EE_Init+0x5c0>
 800a266:	e0d7      	b.n	800a418 <EE_Init+0x770>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a268:	4b39      	ldr	r3, [pc, #228]	; (800a350 <EE_Init+0x6a8>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	029a      	lsls	r2, r3, #10
 800a26e:	23ff      	movs	r3, #255	; 0xff
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	401a      	ands	r2, r3
 800a274:	23d4      	movs	r3, #212	; 0xd4
 800a276:	025b      	lsls	r3, r3, #9
 800a278:	0011      	movs	r1, r2
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7f5 ffd0 	bl	8000220 <__aeabi_uidivmod>
 800a280:	000b      	movs	r3, r1
 800a282:	0adb      	lsrs	r3, r3, #11
 800a284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a286:	429a      	cmp	r2, r3
 800a288:	d066      	beq.n	800a358 <EE_Init+0x6b0>
 800a28a:	4b31      	ldr	r3, [pc, #196]	; (800a350 <EE_Init+0x6a8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	029a      	lsls	r2, r3, #10
 800a290:	23ff      	movs	r3, #255	; 0xff
 800a292:	029b      	lsls	r3, r3, #10
 800a294:	401a      	ands	r2, r3
 800a296:	23d4      	movs	r3, #212	; 0xd4
 800a298:	025b      	lsls	r3, r3, #9
 800a29a:	0011      	movs	r1, r2
 800a29c:	0018      	movs	r0, r3
 800a29e:	f7f5 ffbf 	bl	8000220 <__aeabi_uidivmod>
 800a2a2:	000b      	movs	r3, r1
 800a2a4:	0adb      	lsrs	r3, r3, #11
 800a2a6:	3305      	adds	r3, #5
 800a2a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d054      	beq.n	800a358 <EE_Init+0x6b0>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <EE_Init+0x6a8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	029a      	lsls	r2, r3, #10
 800a2b4:	23ff      	movs	r3, #255	; 0xff
 800a2b6:	029b      	lsls	r3, r3, #10
 800a2b8:	401a      	ands	r2, r3
 800a2ba:	23d4      	movs	r3, #212	; 0xd4
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	0011      	movs	r1, r2
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f7f5 ffad 	bl	8000220 <__aeabi_uidivmod>
 800a2c6:	000b      	movs	r3, r1
 800a2c8:	0adb      	lsrs	r3, r3, #11
 800a2ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	3309      	adds	r3, #9
 800a2d0:	210a      	movs	r1, #10
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f7f5 ffa4 	bl	8000220 <__aeabi_uidivmod>
 800a2d8:	000b      	movs	r3, r1
 800a2da:	001c      	movs	r4, r3
 800a2dc:	4b1c      	ldr	r3, [pc, #112]	; (800a350 <EE_Init+0x6a8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	029a      	lsls	r2, r3, #10
 800a2e2:	23ff      	movs	r3, #255	; 0xff
 800a2e4:	029b      	lsls	r3, r3, #10
 800a2e6:	401a      	ands	r2, r3
 800a2e8:	23d4      	movs	r3, #212	; 0xd4
 800a2ea:	025b      	lsls	r3, r3, #9
 800a2ec:	0011      	movs	r1, r2
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7f5 ff96 	bl	8000220 <__aeabi_uidivmod>
 800a2f4:	000b      	movs	r3, r1
 800a2f6:	0adb      	lsrs	r3, r3, #11
 800a2f8:	18e3      	adds	r3, r4, r3
 800a2fa:	2280      	movs	r2, #128	; 0x80
 800a2fc:	0252      	lsls	r2, r2, #9
 800a2fe:	4694      	mov	ip, r2
 800a300:	4463      	add	r3, ip
 800a302:	02dc      	lsls	r4, r3, #11
 800a304:	4b12      	ldr	r3, [pc, #72]	; (800a350 <EE_Init+0x6a8>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	029a      	lsls	r2, r3, #10
 800a30a:	23ff      	movs	r3, #255	; 0xff
 800a30c:	029b      	lsls	r3, r3, #10
 800a30e:	4013      	ands	r3, r2
 800a310:	0019      	movs	r1, r3
 800a312:	23d4      	movs	r3, #212	; 0xd4
 800a314:	0258      	lsls	r0, r3, #9
 800a316:	f7f5 fefd 	bl	8000114 <__udivsi3>
 800a31a:	0003      	movs	r3, r0
 800a31c:	0019      	movs	r1, r3
 800a31e:	4b0c      	ldr	r3, [pc, #48]	; (800a350 <EE_Init+0x6a8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	029a      	lsls	r2, r3, #10
 800a324:	23ff      	movs	r3, #255	; 0xff
 800a326:	029b      	lsls	r3, r3, #10
 800a328:	4013      	ands	r3, r2
 800a32a:	434b      	muls	r3, r1
 800a32c:	18e3      	adds	r3, r4, r3
 800a32e:	0018      	movs	r0, r3
 800a330:	f001 fa72 	bl	800b818 <GetPageState>
 800a334:	0003      	movs	r3, r0
 800a336:	2b03      	cmp	r3, #3
 800a338:	d104      	bne.n	800a344 <EE_Init+0x69c>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a33a:	231b      	movs	r3, #27
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a342:	e057      	b.n	800a3f4 <EE_Init+0x74c>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a344:	231b      	movs	r3, #27
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	2201      	movs	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800a34c:	e052      	b.n	800a3f4 <EE_Init+0x74c>
 800a34e:	46c0      	nop			; (mov r8, r8)
 800a350:	1fff75e0 	.word	0x1fff75e0
 800a354:	200001b6 	.word	0x200001b6
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 800a358:	4be0      	ldr	r3, [pc, #896]	; (800a6dc <EE_Init+0xa34>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	029a      	lsls	r2, r3, #10
 800a35e:	23ff      	movs	r3, #255	; 0xff
 800a360:	029b      	lsls	r3, r3, #10
 800a362:	401a      	ands	r2, r3
 800a364:	23d4      	movs	r3, #212	; 0xd4
 800a366:	025b      	lsls	r3, r3, #9
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f7f5 ff58 	bl	8000220 <__aeabi_uidivmod>
 800a370:	000b      	movs	r3, r1
 800a372:	0adb      	lsrs	r3, r3, #11
 800a374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	3301      	adds	r3, #1
 800a37a:	210a      	movs	r1, #10
 800a37c:	0018      	movs	r0, r3
 800a37e:	f7f5 ff4f 	bl	8000220 <__aeabi_uidivmod>
 800a382:	000b      	movs	r3, r1
 800a384:	001c      	movs	r4, r3
 800a386:	4bd5      	ldr	r3, [pc, #852]	; (800a6dc <EE_Init+0xa34>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	029a      	lsls	r2, r3, #10
 800a38c:	23ff      	movs	r3, #255	; 0xff
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	401a      	ands	r2, r3
 800a392:	23d4      	movs	r3, #212	; 0xd4
 800a394:	025b      	lsls	r3, r3, #9
 800a396:	0011      	movs	r1, r2
 800a398:	0018      	movs	r0, r3
 800a39a:	f7f5 ff41 	bl	8000220 <__aeabi_uidivmod>
 800a39e:	000b      	movs	r3, r1
 800a3a0:	0adb      	lsrs	r3, r3, #11
 800a3a2:	18e3      	adds	r3, r4, r3
 800a3a4:	2280      	movs	r2, #128	; 0x80
 800a3a6:	0252      	lsls	r2, r2, #9
 800a3a8:	4694      	mov	ip, r2
 800a3aa:	4463      	add	r3, ip
 800a3ac:	02dc      	lsls	r4, r3, #11
 800a3ae:	4bcb      	ldr	r3, [pc, #812]	; (800a6dc <EE_Init+0xa34>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	029a      	lsls	r2, r3, #10
 800a3b4:	23ff      	movs	r3, #255	; 0xff
 800a3b6:	029b      	lsls	r3, r3, #10
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	0019      	movs	r1, r3
 800a3bc:	23d4      	movs	r3, #212	; 0xd4
 800a3be:	0258      	lsls	r0, r3, #9
 800a3c0:	f7f5 fea8 	bl	8000114 <__udivsi3>
 800a3c4:	0003      	movs	r3, r0
 800a3c6:	0019      	movs	r1, r3
 800a3c8:	4bc4      	ldr	r3, [pc, #784]	; (800a6dc <EE_Init+0xa34>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	029a      	lsls	r2, r3, #10
 800a3ce:	23ff      	movs	r3, #255	; 0xff
 800a3d0:	029b      	lsls	r3, r3, #10
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	434b      	muls	r3, r1
 800a3d6:	18e3      	adds	r3, r4, r3
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f001 fa1d 	bl	800b818 <GetPageState>
 800a3de:	1e03      	subs	r3, r0, #0
 800a3e0:	d104      	bne.n	800a3ec <EE_Init+0x744>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 800a3e2:	231b      	movs	r3, #27
 800a3e4:	18fb      	adds	r3, r7, r3
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	e003      	b.n	800a3f4 <EE_Init+0x74c>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800a3ec:	231b      	movs	r3, #27
 800a3ee:	18fb      	adds	r3, r7, r3
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 800a3f4:	231b      	movs	r3, #27
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d113      	bne.n	800a426 <EE_Init+0x77e>
      {
        if (nbactivepage == 0U)
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b00      	cmp	r3, #0
 800a402:	d107      	bne.n	800a414 <EE_Init+0x76c>
        {
          ubCurrentActivePage = page;
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	b2da      	uxtb	r2, r3
 800a408:	4bb5      	ldr	r3, [pc, #724]	; (800a6e0 <EE_Init+0xa38>)
 800a40a:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	3301      	adds	r3, #1
 800a410:	633b      	str	r3, [r7, #48]	; 0x30
 800a412:	e008      	b.n	800a426 <EE_Init+0x77e>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800a414:	230a      	movs	r3, #10
 800a416:	e1e8      	b.n	800a7ea <EE_Init+0xb42>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 800a418:	231a      	movs	r3, #26
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d101      	bne.n	800a426 <EE_Init+0x77e>
    {
      lastvalidpage = page;
 800a422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a428:	3301      	adds	r3, #1
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a42c:	4bab      	ldr	r3, [pc, #684]	; (800a6dc <EE_Init+0xa34>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	029a      	lsls	r2, r3, #10
 800a432:	23ff      	movs	r3, #255	; 0xff
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	401a      	ands	r2, r3
 800a438:	23d4      	movs	r3, #212	; 0xd4
 800a43a:	025b      	lsls	r3, r3, #9
 800a43c:	0011      	movs	r1, r2
 800a43e:	0018      	movs	r0, r3
 800a440:	f7f5 feee 	bl	8000220 <__aeabi_uidivmod>
 800a444:	000b      	movs	r3, r1
 800a446:	0adb      	lsrs	r3, r3, #11
 800a448:	330a      	adds	r3, #10
 800a44a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d200      	bcs.n	800a452 <EE_Init+0x7aa>
 800a450:	e6e1      	b.n	800a216 <EE_Init+0x56e>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d133      	bne.n	800a4c0 <EE_Init+0x818>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 800a458:	4ba0      	ldr	r3, [pc, #640]	; (800a6dc <EE_Init+0xa34>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	029a      	lsls	r2, r3, #10
 800a45e:	23ff      	movs	r3, #255	; 0xff
 800a460:	029b      	lsls	r3, r3, #10
 800a462:	401a      	ands	r2, r3
 800a464:	23d4      	movs	r3, #212	; 0xd4
 800a466:	025b      	lsls	r3, r3, #9
 800a468:	0011      	movs	r1, r2
 800a46a:	0018      	movs	r0, r3
 800a46c:	f7f5 fed8 	bl	8000220 <__aeabi_uidivmod>
 800a470:	000b      	movs	r3, r1
 800a472:	0adb      	lsrs	r3, r3, #11
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	3301      	adds	r3, #1
 800a47a:	210a      	movs	r1, #10
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7f5 fecf 	bl	8000220 <__aeabi_uidivmod>
 800a482:	000b      	movs	r3, r1
 800a484:	b2dc      	uxtb	r4, r3
 800a486:	4b95      	ldr	r3, [pc, #596]	; (800a6dc <EE_Init+0xa34>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	029a      	lsls	r2, r3, #10
 800a48c:	23ff      	movs	r3, #255	; 0xff
 800a48e:	029b      	lsls	r3, r3, #10
 800a490:	401a      	ands	r2, r3
 800a492:	23d4      	movs	r3, #212	; 0xd4
 800a494:	025b      	lsls	r3, r3, #9
 800a496:	0011      	movs	r1, r2
 800a498:	0018      	movs	r0, r3
 800a49a:	f7f5 fec1 	bl	8000220 <__aeabi_uidivmod>
 800a49e:	000b      	movs	r3, r1
 800a4a0:	0adb      	lsrs	r3, r3, #11
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	18e3      	adds	r3, r4, r3
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	4b8d      	ldr	r3, [pc, #564]	; (800a6e0 <EE_Init+0xa38>)
 800a4aa:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800a4ac:	4b8c      	ldr	r3, [pc, #560]	; (800a6e0 <EE_Init+0xa38>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f001 f8de 	bl	800b674 <SetPageState>
 800a4b8:	1e03      	subs	r3, r0, #0
 800a4ba:	d001      	beq.n	800a4c0 <EE_Init+0x818>
    {
      return EE_WRITE_ERROR;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e194      	b.n	800a7ea <EE_Init+0xb42>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800a4c0:	4b88      	ldr	r3, [pc, #544]	; (800a6e4 <EE_Init+0xa3c>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800a4c6:	4b88      	ldr	r3, [pc, #544]	; (800a6e8 <EE_Init+0xa40>)
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d0:	e037      	b.n	800a542 <EE_Init+0x89a>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800a4d2:	4b83      	ldr	r3, [pc, #524]	; (800a6e0 <EE_Init+0xa38>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	0252      	lsls	r2, r2, #9
 800a4da:	4694      	mov	ip, r2
 800a4dc:	4463      	add	r3, ip
 800a4de:	02dc      	lsls	r4, r3, #11
 800a4e0:	4b7e      	ldr	r3, [pc, #504]	; (800a6dc <EE_Init+0xa34>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	029a      	lsls	r2, r3, #10
 800a4e6:	23ff      	movs	r3, #255	; 0xff
 800a4e8:	029b      	lsls	r3, r3, #10
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	0019      	movs	r1, r3
 800a4ee:	23d4      	movs	r3, #212	; 0xd4
 800a4f0:	0258      	lsls	r0, r3, #9
 800a4f2:	f7f5 fe0f 	bl	8000114 <__udivsi3>
 800a4f6:	0003      	movs	r3, r0
 800a4f8:	0019      	movs	r1, r3
 800a4fa:	4b78      	ldr	r3, [pc, #480]	; (800a6dc <EE_Init+0xa34>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	029a      	lsls	r2, r3, #10
 800a500:	23ff      	movs	r3, #255	; 0xff
 800a502:	029b      	lsls	r3, r3, #10
 800a504:	4013      	ands	r3, r2
 800a506:	434b      	muls	r3, r1
 800a508:	18e2      	adds	r2, r4, r3
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	18d3      	adds	r3, r2, r3
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	613a      	str	r2, [r7, #16]
 800a514:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) && (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	3301      	adds	r3, #1
 800a51a:	d103      	bne.n	800a524 <EE_Init+0x87c>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3301      	adds	r3, #1
 800a520:	d100      	bne.n	800a524 <EE_Init+0x87c>
      uhNbWrittenElements++;
      uwAddressNextWrite += EE_ELEMENT_SIZE;
    }
    else /* no more element in the page */
    {
      break;
 800a522:	e013      	b.n	800a54c <EE_Init+0x8a4>
      uhNbWrittenElements++;
 800a524:	4b6f      	ldr	r3, [pc, #444]	; (800a6e4 <EE_Init+0xa3c>)
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	4b6d      	ldr	r3, [pc, #436]	; (800a6e4 <EE_Init+0xa3c>)
 800a52e:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800a530:	4b6d      	ldr	r3, [pc, #436]	; (800a6e8 <EE_Init+0xa40>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3308      	adds	r3, #8
 800a536:	001a      	movs	r2, r3
 800a538:	4b6b      	ldr	r3, [pc, #428]	; (800a6e8 <EE_Init+0xa40>)
 800a53a:	601a      	str	r2, [r3, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53e:	3308      	adds	r3, #8
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
 800a542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a544:	2380      	movs	r3, #128	; 0x80
 800a546:	011b      	lsls	r3, r3, #4
 800a548:	429a      	cmp	r2, r3
 800a54a:	d3c2      	bcc.n	800a4d2 <EE_Init+0x82a>
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 800a54c:	4b64      	ldr	r3, [pc, #400]	; (800a6e0 <EE_Init+0xa38>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 800a552:	4b63      	ldr	r3, [pc, #396]	; (800a6e0 <EE_Init+0xa38>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a558:	e057      	b.n	800a60a <EE_Init+0x962>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 800a55a:	4b60      	ldr	r3, [pc, #384]	; (800a6dc <EE_Init+0xa34>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	029a      	lsls	r2, r3, #10
 800a560:	23ff      	movs	r3, #255	; 0xff
 800a562:	029b      	lsls	r3, r3, #10
 800a564:	401a      	ands	r2, r3
 800a566:	23d4      	movs	r3, #212	; 0xd4
 800a568:	025b      	lsls	r3, r3, #9
 800a56a:	0011      	movs	r1, r2
 800a56c:	0018      	movs	r0, r3
 800a56e:	f7f5 fe57 	bl	8000220 <__aeabi_uidivmod>
 800a572:	000b      	movs	r3, r1
 800a574:	0adb      	lsrs	r3, r3, #11
 800a576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	3309      	adds	r3, #9
 800a57c:	210a      	movs	r1, #10
 800a57e:	0018      	movs	r0, r3
 800a580:	f7f5 fe4e 	bl	8000220 <__aeabi_uidivmod>
 800a584:	000b      	movs	r3, r1
 800a586:	001c      	movs	r4, r3
 800a588:	4b54      	ldr	r3, [pc, #336]	; (800a6dc <EE_Init+0xa34>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	029a      	lsls	r2, r3, #10
 800a58e:	23ff      	movs	r3, #255	; 0xff
 800a590:	029b      	lsls	r3, r3, #10
 800a592:	401a      	ands	r2, r3
 800a594:	23d4      	movs	r3, #212	; 0xd4
 800a596:	025b      	lsls	r3, r3, #9
 800a598:	0011      	movs	r1, r2
 800a59a:	0018      	movs	r0, r3
 800a59c:	f7f5 fe40 	bl	8000220 <__aeabi_uidivmod>
 800a5a0:	000b      	movs	r3, r1
 800a5a2:	0adb      	lsrs	r3, r3, #11
 800a5a4:	18e3      	adds	r3, r4, r3
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5aa:	2280      	movs	r2, #128	; 0x80
 800a5ac:	0252      	lsls	r2, r2, #9
 800a5ae:	4694      	mov	ip, r2
 800a5b0:	4463      	add	r3, ip
 800a5b2:	02dc      	lsls	r4, r3, #11
 800a5b4:	4b49      	ldr	r3, [pc, #292]	; (800a6dc <EE_Init+0xa34>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	029a      	lsls	r2, r3, #10
 800a5ba:	23ff      	movs	r3, #255	; 0xff
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	4013      	ands	r3, r2
 800a5c0:	0019      	movs	r1, r3
 800a5c2:	23d4      	movs	r3, #212	; 0xd4
 800a5c4:	0258      	lsls	r0, r3, #9
 800a5c6:	f7f5 fda5 	bl	8000114 <__udivsi3>
 800a5ca:	0003      	movs	r3, r0
 800a5cc:	0019      	movs	r1, r3
 800a5ce:	4b43      	ldr	r3, [pc, #268]	; (800a6dc <EE_Init+0xa34>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	029a      	lsls	r2, r3, #10
 800a5d4:	23ff      	movs	r3, #255	; 0xff
 800a5d6:	029b      	lsls	r3, r3, #10
 800a5d8:	4013      	ands	r3, r2
 800a5da:	434b      	muls	r3, r1
 800a5dc:	18e3      	adds	r3, r4, r3
 800a5de:	251a      	movs	r5, #26
 800a5e0:	197c      	adds	r4, r7, r5
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f001 f918 	bl	800b818 <GetPageState>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	7023      	strb	r3, [r4, #0]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800a5ec:	197b      	adds	r3, r7, r5
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d108      	bne.n	800a606 <EE_Init+0x95e>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800a5f4:	4b3b      	ldr	r3, [pc, #236]	; (800a6e4 <EE_Init+0xa3c>)
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	33fc      	adds	r3, #252	; 0xfc
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <EE_Init+0xa3c>)
 800a5fe:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a602:	623b      	str	r3, [r7, #32]
 800a604:	e001      	b.n	800a60a <EE_Init+0x962>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 800a606:	230a      	movs	r3, #10
 800a608:	e0ef      	b.n	800a7ea <EE_Init+0xb42>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800a60a:	4b34      	ldr	r3, [pc, #208]	; (800a6dc <EE_Init+0xa34>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	029a      	lsls	r2, r3, #10
 800a610:	23ff      	movs	r3, #255	; 0xff
 800a612:	029b      	lsls	r3, r3, #10
 800a614:	401a      	ands	r2, r3
 800a616:	23d4      	movs	r3, #212	; 0xd4
 800a618:	025b      	lsls	r3, r3, #9
 800a61a:	0011      	movs	r1, r2
 800a61c:	0018      	movs	r0, r3
 800a61e:	f7f5 fdff 	bl	8000220 <__aeabi_uidivmod>
 800a622:	000b      	movs	r3, r1
 800a624:	0adb      	lsrs	r3, r3, #11
 800a626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a628:	429a      	cmp	r2, r3
 800a62a:	d011      	beq.n	800a650 <EE_Init+0x9a8>
 800a62c:	4b2b      	ldr	r3, [pc, #172]	; (800a6dc <EE_Init+0xa34>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	029a      	lsls	r2, r3, #10
 800a632:	23ff      	movs	r3, #255	; 0xff
 800a634:	029b      	lsls	r3, r3, #10
 800a636:	401a      	ands	r2, r3
 800a638:	23d4      	movs	r3, #212	; 0xd4
 800a63a:	025b      	lsls	r3, r3, #9
 800a63c:	0011      	movs	r1, r2
 800a63e:	0018      	movs	r0, r3
 800a640:	f7f5 fdee 	bl	8000220 <__aeabi_uidivmod>
 800a644:	000b      	movs	r3, r1
 800a646:	0adb      	lsrs	r3, r3, #11
 800a648:	3305      	adds	r3, #5
 800a64a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d184      	bne.n	800a55a <EE_Init+0x8b2>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800a650:	4b23      	ldr	r3, [pc, #140]	; (800a6e0 <EE_Init+0xa38>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	001c      	movs	r4, r3
 800a656:	4b21      	ldr	r3, [pc, #132]	; (800a6dc <EE_Init+0xa34>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	029a      	lsls	r2, r3, #10
 800a65c:	23ff      	movs	r3, #255	; 0xff
 800a65e:	029b      	lsls	r3, r3, #10
 800a660:	401a      	ands	r2, r3
 800a662:	23d4      	movs	r3, #212	; 0xd4
 800a664:	025b      	lsls	r3, r3, #9
 800a666:	0011      	movs	r1, r2
 800a668:	0018      	movs	r0, r3
 800a66a:	f7f5 fdd9 	bl	8000220 <__aeabi_uidivmod>
 800a66e:	000b      	movs	r3, r1
 800a670:	0adb      	lsrs	r3, r3, #11
 800a672:	1ae3      	subs	r3, r4, r3
 800a674:	3301      	adds	r3, #1
 800a676:	210a      	movs	r1, #10
 800a678:	0018      	movs	r0, r3
 800a67a:	f7f5 fdd1 	bl	8000220 <__aeabi_uidivmod>
 800a67e:	000b      	movs	r3, r1
 800a680:	001c      	movs	r4, r3
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <EE_Init+0xa34>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	029a      	lsls	r2, r3, #10
 800a688:	23ff      	movs	r3, #255	; 0xff
 800a68a:	029b      	lsls	r3, r3, #10
 800a68c:	401a      	ands	r2, r3
 800a68e:	23d4      	movs	r3, #212	; 0xd4
 800a690:	025b      	lsls	r3, r3, #9
 800a692:	0011      	movs	r1, r2
 800a694:	0018      	movs	r0, r3
 800a696:	f7f5 fdc3 	bl	8000220 <__aeabi_uidivmod>
 800a69a:	000b      	movs	r3, r1
 800a69c:	0adb      	lsrs	r3, r3, #11
 800a69e:	18e3      	adds	r3, r4, r3
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800a6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a4:	2280      	movs	r2, #128	; 0x80
 800a6a6:	0252      	lsls	r2, r2, #9
 800a6a8:	4694      	mov	ip, r2
 800a6aa:	4463      	add	r3, ip
 800a6ac:	02dc      	lsls	r4, r3, #11
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <EE_Init+0xa34>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	029a      	lsls	r2, r3, #10
 800a6b4:	23ff      	movs	r3, #255	; 0xff
 800a6b6:	029b      	lsls	r3, r3, #10
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	0019      	movs	r1, r3
 800a6bc:	23d4      	movs	r3, #212	; 0xd4
 800a6be:	0258      	lsls	r0, r3, #9
 800a6c0:	f7f5 fd28 	bl	8000114 <__udivsi3>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	0019      	movs	r1, r3
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <EE_Init+0xa34>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	029a      	lsls	r2, r3, #10
 800a6ce:	23ff      	movs	r3, #255	; 0xff
 800a6d0:	029b      	lsls	r3, r3, #10
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	434b      	muls	r3, r1
 800a6d6:	18e3      	adds	r3, r4, r3
 800a6d8:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 800a6da:	e06a      	b.n	800a7b2 <EE_Init+0xb0a>
 800a6dc:	1fff75e0 	.word	0x1fff75e0
 800a6e0:	200001b6 	.word	0x200001b6
 800a6e4:	200001b4 	.word	0x200001b4
 800a6e8:	20000008 	.word	0x20000008
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a6ec:	1dfb      	adds	r3, r7, #7
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d108      	bne.n	800a706 <EE_Init+0xa5e>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f001 f92c 	bl	800b956 <FI_PageErase>
 800a6fe:	1e03      	subs	r3, r0, #0
 800a700:	d014      	beq.n	800a72c <EE_Init+0xa84>
      {
        return EE_ERASE_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e071      	b.n	800a7ea <EE_Init+0xb42>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	011a      	lsls	r2, r3, #4
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	0011      	movs	r1, r2
 800a70e:	0018      	movs	r0, r3
 800a710:	f000 fb39 	bl	800ad86 <VerifyPageFullyErased>
 800a714:	0003      	movs	r3, r0
 800a716:	2b10      	cmp	r3, #16
 800a718:	d108      	bne.n	800a72c <EE_Init+0xa84>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71c:	2101      	movs	r1, #1
 800a71e:	0018      	movs	r0, r3
 800a720:	f001 f919 	bl	800b956 <FI_PageErase>
 800a724:	1e03      	subs	r3, r0, #0
 800a726:	d001      	beq.n	800a72c <EE_Init+0xa84>
        {
          return EE_ERASE_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e05e      	b.n	800a7ea <EE_Init+0xb42>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 800a72c:	4b31      	ldr	r3, [pc, #196]	; (800a7f4 <EE_Init+0xb4c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	029a      	lsls	r2, r3, #10
 800a732:	23ff      	movs	r3, #255	; 0xff
 800a734:	029b      	lsls	r3, r3, #10
 800a736:	401a      	ands	r2, r3
 800a738:	23d4      	movs	r3, #212	; 0xd4
 800a73a:	025b      	lsls	r3, r3, #9
 800a73c:	0011      	movs	r1, r2
 800a73e:	0018      	movs	r0, r3
 800a740:	f7f5 fd6e 	bl	8000220 <__aeabi_uidivmod>
 800a744:	000b      	movs	r3, r1
 800a746:	0adb      	lsrs	r3, r3, #11
 800a748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	3301      	adds	r3, #1
 800a74e:	210a      	movs	r1, #10
 800a750:	0018      	movs	r0, r3
 800a752:	f7f5 fd65 	bl	8000220 <__aeabi_uidivmod>
 800a756:	000b      	movs	r3, r1
 800a758:	001c      	movs	r4, r3
 800a75a:	4b26      	ldr	r3, [pc, #152]	; (800a7f4 <EE_Init+0xb4c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	029a      	lsls	r2, r3, #10
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	401a      	ands	r2, r3
 800a766:	23d4      	movs	r3, #212	; 0xd4
 800a768:	025b      	lsls	r3, r3, #9
 800a76a:	0011      	movs	r1, r2
 800a76c:	0018      	movs	r0, r3
 800a76e:	f7f5 fd57 	bl	8000220 <__aeabi_uidivmod>
 800a772:	000b      	movs	r3, r1
 800a774:	0adb      	lsrs	r3, r3, #11
 800a776:	18e3      	adds	r3, r4, r3
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800a77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77c:	2280      	movs	r2, #128	; 0x80
 800a77e:	0252      	lsls	r2, r2, #9
 800a780:	4694      	mov	ip, r2
 800a782:	4463      	add	r3, ip
 800a784:	02dc      	lsls	r4, r3, #11
 800a786:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <EE_Init+0xb4c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	029a      	lsls	r2, r3, #10
 800a78c:	23ff      	movs	r3, #255	; 0xff
 800a78e:	029b      	lsls	r3, r3, #10
 800a790:	4013      	ands	r3, r2
 800a792:	0019      	movs	r1, r3
 800a794:	23d4      	movs	r3, #212	; 0xd4
 800a796:	0258      	lsls	r0, r3, #9
 800a798:	f7f5 fcbc 	bl	8000114 <__udivsi3>
 800a79c:	0003      	movs	r3, r0
 800a79e:	0019      	movs	r1, r3
 800a7a0:	4b14      	ldr	r3, [pc, #80]	; (800a7f4 <EE_Init+0xb4c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	029a      	lsls	r2, r3, #10
 800a7a6:	23ff      	movs	r3, #255	; 0xff
 800a7a8:	029b      	lsls	r3, r3, #10
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	434b      	muls	r3, r1
 800a7ae:	18e3      	adds	r3, r4, r3
 800a7b0:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800a7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d198      	bne.n	800a6ec <EE_Init+0xa44>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a7ba:	f001 f8f7 	bl	800b9ac <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d111      	bne.n	800a7e8 <EE_Init+0xb40>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800a7c4:	250e      	movs	r5, #14
 800a7c6:	197c      	adds	r4, r7, r5
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f000 feb8 	bl	800b540 <VerifyPagesFullWriteVariable>
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	8023      	strh	r3, [r4, #0]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800a7d4:	197b      	adds	r3, r7, r5
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <EE_Init+0xb40>
 800a7dc:	197b      	adds	r3, r7, r5
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	2b12      	cmp	r3, #18
 800a7e2:	d001      	beq.n	800a7e8 <EE_Init+0xb40>
    {
      return EE_WRITE_ERROR;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e000      	b.n	800a7ea <EE_Init+0xb42>
    }
#endif
  }

  return EE_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	b010      	add	sp, #64	; 0x40
 800a7f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	1fff75e0 	.word	0x1fff75e0

0800a7f8 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 800a7f8:	b590      	push	{r4, r7, lr}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	0002      	movs	r2, r0
 800a800:	1dfb      	adds	r3, r7, #7
 800a802:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800a808:	f001 f8d5 	bl	800b9b6 <FI_CheckBankConfig>
 800a80c:	1e03      	subs	r3, r0, #0
 800a80e:	d001      	beq.n	800a814 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800a810:	230e      	movs	r3, #14
 800a812:	e08e      	b.n	800a932 <EE_Format+0x13a>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a814:	4b49      	ldr	r3, [pc, #292]	; (800a93c <EE_Format+0x144>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	029a      	lsls	r2, r3, #10
 800a81a:	23ff      	movs	r3, #255	; 0xff
 800a81c:	029b      	lsls	r3, r3, #10
 800a81e:	401a      	ands	r2, r3
 800a820:	23d4      	movs	r3, #212	; 0xd4
 800a822:	025b      	lsls	r3, r3, #9
 800a824:	0011      	movs	r1, r2
 800a826:	0018      	movs	r0, r3
 800a828:	f7f5 fcfa 	bl	8000220 <__aeabi_uidivmod>
 800a82c:	000b      	movs	r3, r1
 800a82e:	0adb      	lsrs	r3, r3, #11
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	e03c      	b.n	800a8ae <EE_Format+0xb6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800a834:	1dfb      	adds	r3, r7, #7
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d108      	bne.n	800a84e <EE_Format+0x56>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2101      	movs	r1, #1
 800a840:	0018      	movs	r0, r3
 800a842:	f001 f888 	bl	800b956 <FI_PageErase>
 800a846:	1e03      	subs	r3, r0, #0
 800a848:	d02e      	beq.n	800a8a8 <EE_Format+0xb0>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e071      	b.n	800a932 <EE_Format+0x13a>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2280      	movs	r2, #128	; 0x80
 800a852:	0252      	lsls	r2, r2, #9
 800a854:	4694      	mov	ip, r2
 800a856:	4463      	add	r3, ip
 800a858:	02dc      	lsls	r4, r3, #11
 800a85a:	4b38      	ldr	r3, [pc, #224]	; (800a93c <EE_Format+0x144>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	029a      	lsls	r2, r3, #10
 800a860:	23ff      	movs	r3, #255	; 0xff
 800a862:	029b      	lsls	r3, r3, #10
 800a864:	4013      	ands	r3, r2
 800a866:	0019      	movs	r1, r3
 800a868:	23d4      	movs	r3, #212	; 0xd4
 800a86a:	0258      	lsls	r0, r3, #9
 800a86c:	f7f5 fc52 	bl	8000114 <__udivsi3>
 800a870:	0003      	movs	r3, r0
 800a872:	0019      	movs	r1, r3
 800a874:	4b31      	ldr	r3, [pc, #196]	; (800a93c <EE_Format+0x144>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	029a      	lsls	r2, r3, #10
 800a87a:	23ff      	movs	r3, #255	; 0xff
 800a87c:	029b      	lsls	r3, r3, #10
 800a87e:	4013      	ands	r3, r2
 800a880:	434b      	muls	r3, r1
 800a882:	18e3      	adds	r3, r4, r3
 800a884:	2280      	movs	r2, #128	; 0x80
 800a886:	0112      	lsls	r2, r2, #4
 800a888:	0011      	movs	r1, r2
 800a88a:	0018      	movs	r0, r3
 800a88c:	f000 fa7b 	bl	800ad86 <VerifyPageFullyErased>
 800a890:	0003      	movs	r3, r0
 800a892:	2b10      	cmp	r3, #16
 800a894:	d108      	bne.n	800a8a8 <EE_Format+0xb0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2101      	movs	r1, #1
 800a89a:	0018      	movs	r0, r3
 800a89c:	f001 f85b 	bl	800b956 <FI_PageErase>
 800a8a0:	1e03      	subs	r3, r0, #0
 800a8a2:	d001      	beq.n	800a8a8 <EE_Format+0xb0>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e044      	b.n	800a932 <EE_Format+0x13a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	4b23      	ldr	r3, [pc, #140]	; (800a93c <EE_Format+0x144>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	029a      	lsls	r2, r3, #10
 800a8b4:	23ff      	movs	r3, #255	; 0xff
 800a8b6:	029b      	lsls	r3, r3, #10
 800a8b8:	401a      	ands	r2, r3
 800a8ba:	23d4      	movs	r3, #212	; 0xd4
 800a8bc:	025b      	lsls	r3, r3, #9
 800a8be:	0011      	movs	r1, r2
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f7f5 fcad 	bl	8000220 <__aeabi_uidivmod>
 800a8c6:	000b      	movs	r3, r1
 800a8c8:	0adb      	lsrs	r3, r3, #11
 800a8ca:	330a      	adds	r3, #10
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3b0      	bcc.n	800a834 <EE_Format+0x3c>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800a8d2:	f001 f86b 	bl	800b9ac <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800a8d6:	4b19      	ldr	r3, [pc, #100]	; (800a93c <EE_Format+0x144>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	029a      	lsls	r2, r3, #10
 800a8dc:	23ff      	movs	r3, #255	; 0xff
 800a8de:	029b      	lsls	r3, r3, #10
 800a8e0:	401a      	ands	r2, r3
 800a8e2:	23d4      	movs	r3, #212	; 0xd4
 800a8e4:	025b      	lsls	r3, r3, #9
 800a8e6:	0011      	movs	r1, r2
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f7f5 fc99 	bl	8000220 <__aeabi_uidivmod>
 800a8ee:	000b      	movs	r3, r1
 800a8f0:	0adb      	lsrs	r3, r3, #11
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f000 febd 	bl	800b674 <SetPageState>
 800a8fa:	1e03      	subs	r3, r0, #0
 800a8fc:	d001      	beq.n	800a902 <EE_Format+0x10a>
  {
    return EE_WRITE_ERROR;
 800a8fe:	2302      	movs	r3, #2
 800a900:	e017      	b.n	800a932 <EE_Format+0x13a>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800a902:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <EE_Format+0x148>)
 800a904:	2200      	movs	r2, #0
 800a906:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800a908:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <EE_Format+0x144>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	029a      	lsls	r2, r3, #10
 800a90e:	23ff      	movs	r3, #255	; 0xff
 800a910:	029b      	lsls	r3, r3, #10
 800a912:	401a      	ands	r2, r3
 800a914:	23d4      	movs	r3, #212	; 0xd4
 800a916:	025b      	lsls	r3, r3, #9
 800a918:	0011      	movs	r1, r2
 800a91a:	0018      	movs	r0, r3
 800a91c:	f7f5 fc80 	bl	8000220 <__aeabi_uidivmod>
 800a920:	000b      	movs	r3, r1
 800a922:	0adb      	lsrs	r3, r3, #11
 800a924:	b2da      	uxtb	r2, r3
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <EE_Format+0x14c>)
 800a928:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800a92a:	4b07      	ldr	r3, [pc, #28]	; (800a948 <EE_Format+0x150>)
 800a92c:	2220      	movs	r2, #32
 800a92e:	601a      	str	r2, [r3, #0]

  return EE_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	0018      	movs	r0, r3
 800a934:	46bd      	mov	sp, r7
 800a936:	b005      	add	sp, #20
 800a938:	bd90      	pop	{r4, r7, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	1fff75e0 	.word	0x1fff75e0
 800a940:	200001b4 	.word	0x200001b4
 800a944:	200001b6 	.word	0x200001b6
 800a948:	20000008 	.word	0x20000008

0800a94c <EE_ReadVariable16bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable16bits(uint16_t VirtAddress, uint16_t* pData)
{
 800a94c:	b5b0      	push	{r4, r5, r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	0002      	movs	r2, r0
 800a954:	6039      	str	r1, [r7, #0]
 800a956:	1dbb      	adds	r3, r7, #6
 800a958:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800a95a:	1dbb      	adds	r3, r7, #6
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01c      	beq.n	800a99c <EE_ReadVariable16bits+0x50>
 800a962:	1dbb      	adds	r3, r7, #6
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	4a10      	ldr	r2, [pc, #64]	; (800a9a8 <EE_ReadVariable16bits+0x5c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d017      	beq.n	800a99c <EE_ReadVariable16bits+0x50>
  {
    EE_DATA_TYPE datatmp = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800a970:	250e      	movs	r5, #14
 800a972:	197b      	adds	r3, r7, r5
 800a974:	2200      	movs	r2, #0
 800a976:	801a      	strh	r2, [r3, #0]

    /* Read variable of size EE_DATA_TYPE, then cast it to 16bits */
    status = ReadVariable(VirtAddress, &datatmp);
 800a978:	197c      	adds	r4, r7, r5
 800a97a:	2308      	movs	r3, #8
 800a97c:	18fa      	adds	r2, r7, r3
 800a97e:	1dbb      	adds	r3, r7, #6
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	0011      	movs	r1, r2
 800a984:	0018      	movs	r0, r3
 800a986:	f000 f8db 	bl	800ab40 <ReadVariable>
 800a98a:	0003      	movs	r3, r0
 800a98c:	8023      	strh	r3, [r4, #0]
    *pData = (uint16_t) datatmp;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	b29a      	uxth	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	801a      	strh	r2, [r3, #0]

    return status;
 800a996:	197b      	adds	r3, r7, r5
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	e000      	b.n	800a99e <EE_ReadVariable16bits+0x52>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800a99c:	2308      	movs	r3, #8
  } 
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b004      	add	sp, #16
 800a9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	0000ffff 	.word	0x0000ffff

0800a9ac <EE_WriteVariable16bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable16bits(uint16_t VirtAddress, uint16_t Data)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	0002      	movs	r2, r0
 800a9b4:	1dbb      	adds	r3, r7, #6
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	1d3b      	adds	r3, r7, #4
 800a9ba:	1c0a      	adds	r2, r1, #0
 800a9bc:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800a9be:	1dbb      	adds	r3, r7, #6
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00e      	beq.n	800a9e4 <EE_WriteVariable16bits+0x38>
 800a9c6:	1dbb      	adds	r3, r7, #6
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	4a09      	ldr	r2, [pc, #36]	; (800a9f0 <EE_WriteVariable16bits+0x44>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d009      	beq.n	800a9e4 <EE_WriteVariable16bits+0x38>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800a9d0:	1d3b      	adds	r3, r7, #4
 800a9d2:	881a      	ldrh	r2, [r3, #0]
 800a9d4:	1dbb      	adds	r3, r7, #6
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	0011      	movs	r1, r2
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f000 f9aa 	bl	800ad34 <WriteVariable>
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	e000      	b.n	800a9e6 <EE_WriteVariable16bits+0x3a>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800a9e4:	2308      	movs	r3, #8
  }    
}
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	b002      	add	sp, #8
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	0000ffff 	.word	0x0000ffff

0800a9f4 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	617b      	str	r3, [r7, #20]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	2300      	movs	r3, #0
 800aa08:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800aa0a:	1dfb      	adds	r3, r7, #7
 800aa0c:	2205      	movs	r2, #5
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	1dbb      	adds	r3, r7, #6
 800aa12:	2205      	movs	r2, #5
 800aa14:	701a      	strb	r2, [r3, #0]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800aa16:	4b49      	ldr	r3, [pc, #292]	; (800ab3c <EE_CleanUp+0x148>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	029a      	lsls	r2, r3, #10
 800aa1c:	23ff      	movs	r3, #255	; 0xff
 800aa1e:	029b      	lsls	r3, r3, #10
 800aa20:	401a      	ands	r2, r3
 800aa22:	23d4      	movs	r3, #212	; 0xd4
 800aa24:	025b      	lsls	r3, r3, #9
 800aa26:	0011      	movs	r1, r2
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7f5 fbf9 	bl	8000220 <__aeabi_uidivmod>
 800aa2e:	000b      	movs	r3, r1
 800aa30:	0adb      	lsrs	r3, r3, #11
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	e06b      	b.n	800ab0e <EE_CleanUp+0x11a>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2280      	movs	r2, #128	; 0x80
 800aa3a:	0252      	lsls	r2, r2, #9
 800aa3c:	4694      	mov	ip, r2
 800aa3e:	4463      	add	r3, ip
 800aa40:	02dc      	lsls	r4, r3, #11
 800aa42:	4b3e      	ldr	r3, [pc, #248]	; (800ab3c <EE_CleanUp+0x148>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	029a      	lsls	r2, r3, #10
 800aa48:	23ff      	movs	r3, #255	; 0xff
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	0019      	movs	r1, r3
 800aa50:	23d4      	movs	r3, #212	; 0xd4
 800aa52:	0258      	lsls	r0, r3, #9
 800aa54:	f7f5 fb5e 	bl	8000114 <__udivsi3>
 800aa58:	0003      	movs	r3, r0
 800aa5a:	0019      	movs	r1, r3
 800aa5c:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <EE_CleanUp+0x148>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	029a      	lsls	r2, r3, #10
 800aa62:	23ff      	movs	r3, #255	; 0xff
 800aa64:	029b      	lsls	r3, r3, #10
 800aa66:	4013      	ands	r3, r2
 800aa68:	434b      	muls	r3, r1
 800aa6a:	18e3      	adds	r3, r4, r3
 800aa6c:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800aa6e:	1dfc      	adds	r4, r7, #7
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	0018      	movs	r0, r3
 800aa74:	f000 fed0 	bl	800b818 <GetPageState>
 800aa78:	0003      	movs	r3, r0
 800aa7a:	7023      	strb	r3, [r4, #0]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 800aa7c:	1dfb      	adds	r3, r7, #7
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d141      	bne.n	800ab08 <EE_CleanUp+0x114>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	3301      	adds	r3, #1
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	e02b      	b.n	800aae4 <EE_CleanUp+0xf0>
      {
        pageaddress = PAGE_ADDRESS(page);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	0252      	lsls	r2, r2, #9
 800aa92:	4694      	mov	ip, r2
 800aa94:	4463      	add	r3, ip
 800aa96:	02dc      	lsls	r4, r3, #11
 800aa98:	4b28      	ldr	r3, [pc, #160]	; (800ab3c <EE_CleanUp+0x148>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	029a      	lsls	r2, r3, #10
 800aa9e:	23ff      	movs	r3, #255	; 0xff
 800aaa0:	029b      	lsls	r3, r3, #10
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	0019      	movs	r1, r3
 800aaa6:	23d4      	movs	r3, #212	; 0xd4
 800aaa8:	0258      	lsls	r0, r3, #9
 800aaaa:	f7f5 fb33 	bl	8000114 <__udivsi3>
 800aaae:	0003      	movs	r3, r0
 800aab0:	0019      	movs	r1, r3
 800aab2:	4b22      	ldr	r3, [pc, #136]	; (800ab3c <EE_CleanUp+0x148>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	029a      	lsls	r2, r3, #10
 800aab8:	23ff      	movs	r3, #255	; 0xff
 800aaba:	029b      	lsls	r3, r3, #10
 800aabc:	4013      	ands	r3, r2
 800aabe:	434b      	muls	r3, r1
 800aac0:	18e3      	adds	r3, r4, r3
 800aac2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800aac4:	1dbc      	adds	r4, r7, #6
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f000 fea5 	bl	800b818 <GetPageState>
 800aace:	0003      	movs	r3, r0
 800aad0:	7023      	strb	r3, [r4, #0]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800aad2:	1dbb      	adds	r3, r7, #6
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d001      	beq.n	800aade <EE_CleanUp+0xea>
        {
          return EE_ERROR_NOERASING_PAGE;
 800aada:	2305      	movs	r3, #5
 800aadc:	e02a      	b.n	800ab34 <EE_CleanUp+0x140>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	3301      	adds	r3, #1
 800aae2:	613b      	str	r3, [r7, #16]
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	3305      	adds	r3, #5
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d3ce      	bcc.n	800aa8c <EE_CleanUp+0x98>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2105      	movs	r1, #5
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	f000 ff2f 	bl	800b956 <FI_PageErase>
 800aaf8:	1e03      	subs	r3, r0, #0
 800aafa:	d001      	beq.n	800ab00 <EE_CleanUp+0x10c>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e019      	b.n	800ab34 <EE_CleanUp+0x140>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800ab00:	f000 ff54 	bl	800b9ac <FI_CacheFlush>
        
        return EE_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e015      	b.n	800ab34 <EE_CleanUp+0x140>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	3305      	adds	r3, #5
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	4b0b      	ldr	r3, [pc, #44]	; (800ab3c <EE_CleanUp+0x148>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	029a      	lsls	r2, r3, #10
 800ab14:	23ff      	movs	r3, #255	; 0xff
 800ab16:	029b      	lsls	r3, r3, #10
 800ab18:	401a      	ands	r2, r3
 800ab1a:	23d4      	movs	r3, #212	; 0xd4
 800ab1c:	025b      	lsls	r3, r3, #9
 800ab1e:	0011      	movs	r1, r2
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7f5 fb7d 	bl	8000220 <__aeabi_uidivmod>
 800ab26:	000b      	movs	r3, r1
 800ab28:	0adb      	lsrs	r3, r3, #11
 800ab2a:	330a      	adds	r3, #10
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d381      	bcc.n	800aa36 <EE_CleanUp+0x42>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800ab32:	2305      	movs	r3, #5
}
 800ab34:	0018      	movs	r0, r3
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b007      	add	sp, #28
 800ab3a:	bd90      	pop	{r4, r7, pc}
 800ab3c:	1fff75e0 	.word	0x1fff75e0

0800ab40 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 800ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab42:	b08f      	sub	sp, #60	; 0x3c
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	0002      	movs	r2, r0
 800ab48:	6139      	str	r1, [r7, #16]
 800ab4a:	2316      	movs	r3, #22
 800ab4c:	18fb      	adds	r3, r7, r3
 800ab4e:	801a      	strh	r2, [r3, #0]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800ab50:	2200      	movs	r2, #0
 800ab52:	2300      	movs	r3, #0
 800ab54:	623a      	str	r2, [r7, #32]
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab60:	2300      	movs	r3, #0
 800ab62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab64:	2300      	movs	r3, #0
 800ab66:	61fb      	str	r3, [r7, #28]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 800ab68:	231b      	movs	r3, #27
 800ab6a:	2210      	movs	r2, #16
 800ab6c:	4694      	mov	ip, r2
 800ab6e:	44bc      	add	ip, r7
 800ab70:	4463      	add	r3, ip
 800ab72:	2205      	movs	r2, #5
 800ab74:	701a      	strb	r2, [r3, #0]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 800ab76:	2000      	movs	r0, #0
 800ab78:	f000 f92c 	bl	800add4 <FindPage>
 800ab7c:	0003      	movs	r3, r0
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800ab80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab82:	3301      	adds	r3, #1
 800ab84:	d101      	bne.n	800ab8a <ReadVariable+0x4a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e0cd      	b.n	800ad26 <ReadVariable+0x1e6>
  }
  pageaddress = PAGE_ADDRESS(page);
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	2280      	movs	r2, #128	; 0x80
 800ab8e:	0252      	lsls	r2, r2, #9
 800ab90:	4694      	mov	ip, r2
 800ab92:	4463      	add	r3, ip
 800ab94:	02de      	lsls	r6, r3, #11
 800ab96:	4b66      	ldr	r3, [pc, #408]	; (800ad30 <ReadVariable+0x1f0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	029a      	lsls	r2, r3, #10
 800ab9c:	23ff      	movs	r3, #255	; 0xff
 800ab9e:	029b      	lsls	r3, r3, #10
 800aba0:	4013      	ands	r3, r2
 800aba2:	0019      	movs	r1, r3
 800aba4:	23d4      	movs	r3, #212	; 0xd4
 800aba6:	0258      	lsls	r0, r3, #9
 800aba8:	f7f5 fab4 	bl	8000114 <__udivsi3>
 800abac:	0003      	movs	r3, r0
 800abae:	0019      	movs	r1, r3
 800abb0:	4b5f      	ldr	r3, [pc, #380]	; (800ad30 <ReadVariable+0x1f0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	029a      	lsls	r2, r3, #10
 800abb6:	23ff      	movs	r3, #255	; 0xff
 800abb8:	029b      	lsls	r3, r3, #10
 800abba:	4013      	ands	r3, r2
 800abbc:	434b      	muls	r3, r1
 800abbe:	18f3      	adds	r3, r6, r3
 800abc0:	633b      	str	r3, [r7, #48]	; 0x30
  pagestate = GetPageState(pageaddress);
 800abc2:	231b      	movs	r3, #27
 800abc4:	2210      	movs	r2, #16
 800abc6:	18ba      	adds	r2, r7, r2
 800abc8:	18d6      	adds	r6, r2, r3
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	0018      	movs	r0, r3
 800abce:	f000 fe23 	bl	800b818 <GetPageState>
 800abd2:	0003      	movs	r3, r0
 800abd4:	7033      	strb	r3, [r6, #0]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800abd6:	e091      	b.n	800acfc <ReadVariable+0x1bc>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800abd8:	23ff      	movs	r3, #255	; 0xff
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 800abde:	e03d      	b.n	800ac5c <ReadVariable+0x11c>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 800abe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	18d3      	adds	r3, r2, r3
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	623a      	str	r2, [r7, #32]
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	3301      	adds	r3, #1
 800abf2:	d102      	bne.n	800abfa <ReadVariable+0xba>
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	3301      	adds	r3, #1
 800abf8:	d02d      	beq.n	800ac56 <ReadVariable+0x116>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 800abfa:	6a3a      	ldr	r2, [r7, #32]
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	1c13      	adds	r3, r2, #0
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	2216      	movs	r2, #22
 800ac04:	18ba      	adds	r2, r7, r2
 800ac06:	8812      	ldrh	r2, [r2, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d124      	bne.n	800ac56 <ReadVariable+0x116>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	001b      	movs	r3, r3
 800ac10:	60bb      	str	r3, [r7, #8]
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	68b8      	ldr	r0, [r7, #8]
 800ac18:	6a3a      	ldr	r2, [r7, #32]
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	1c13      	adds	r3, r2, #0
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	0019      	movs	r1, r3
 800ac22:	f000 fe63 	bl	800b8ec <CalculateCrc>
 800ac26:	0003      	movs	r3, r0
 800ac28:	61fb      	str	r3, [r7, #28]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	041b      	lsls	r3, r3, #16
 800ac2e:	6a3a      	ldr	r2, [r7, #32]
 800ac30:	0c14      	lsrs	r4, r2, #16
 800ac32:	431c      	orrs	r4, r3
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	0c1d      	lsrs	r5, r3, #16
 800ac38:	b2a3      	uxth	r3, r4
 800ac3a:	001a      	movs	r2, r3
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d109      	bne.n	800ac56 <ReadVariable+0x116>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	001b      	movs	r3, r3
 800ac46:	603b      	str	r3, [r7, #0]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	607b      	str	r3, [r7, #4]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e067      	b.n	800ad26 <ReadVariable+0x1e6>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	3b08      	subs	r3, #8
 800ac5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (counter >= PAGE_HEADER_SIZE)
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	2b1f      	cmp	r3, #31
 800ac60:	d8be      	bhi.n	800abe0 <ReadVariable+0xa0>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800ac62:	4b33      	ldr	r3, [pc, #204]	; (800ad30 <ReadVariable+0x1f0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	029a      	lsls	r2, r3, #10
 800ac68:	23ff      	movs	r3, #255	; 0xff
 800ac6a:	029b      	lsls	r3, r3, #10
 800ac6c:	401a      	ands	r2, r3
 800ac6e:	23d4      	movs	r3, #212	; 0xd4
 800ac70:	025b      	lsls	r3, r3, #9
 800ac72:	0011      	movs	r1, r2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7f5 fad3 	bl	8000220 <__aeabi_uidivmod>
 800ac7a:	000b      	movs	r3, r1
 800ac7c:	0adb      	lsrs	r3, r3, #11
 800ac7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	3309      	adds	r3, #9
 800ac84:	210a      	movs	r1, #10
 800ac86:	0018      	movs	r0, r3
 800ac88:	f7f5 faca 	bl	8000220 <__aeabi_uidivmod>
 800ac8c:	000b      	movs	r3, r1
 800ac8e:	001e      	movs	r6, r3
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <ReadVariable+0x1f0>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	029a      	lsls	r2, r3, #10
 800ac96:	23ff      	movs	r3, #255	; 0xff
 800ac98:	029b      	lsls	r3, r3, #10
 800ac9a:	401a      	ands	r2, r3
 800ac9c:	23d4      	movs	r3, #212	; 0xd4
 800ac9e:	025b      	lsls	r3, r3, #9
 800aca0:	0011      	movs	r1, r2
 800aca2:	0018      	movs	r0, r3
 800aca4:	f7f5 fabc 	bl	8000220 <__aeabi_uidivmod>
 800aca8:	000b      	movs	r3, r1
 800acaa:	0adb      	lsrs	r3, r3, #11
 800acac:	18f3      	adds	r3, r6, r3
 800acae:	637b      	str	r3, [r7, #52]	; 0x34
    pageaddress = PAGE_ADDRESS(page);
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	2280      	movs	r2, #128	; 0x80
 800acb4:	0252      	lsls	r2, r2, #9
 800acb6:	4694      	mov	ip, r2
 800acb8:	4463      	add	r3, ip
 800acba:	02de      	lsls	r6, r3, #11
 800acbc:	4b1c      	ldr	r3, [pc, #112]	; (800ad30 <ReadVariable+0x1f0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	029a      	lsls	r2, r3, #10
 800acc2:	23ff      	movs	r3, #255	; 0xff
 800acc4:	029b      	lsls	r3, r3, #10
 800acc6:	4013      	ands	r3, r2
 800acc8:	0019      	movs	r1, r3
 800acca:	23d4      	movs	r3, #212	; 0xd4
 800accc:	0258      	lsls	r0, r3, #9
 800acce:	f7f5 fa21 	bl	8000114 <__udivsi3>
 800acd2:	0003      	movs	r3, r0
 800acd4:	0019      	movs	r1, r3
 800acd6:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <ReadVariable+0x1f0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	029a      	lsls	r2, r3, #10
 800acdc:	23ff      	movs	r3, #255	; 0xff
 800acde:	029b      	lsls	r3, r3, #10
 800ace0:	4013      	ands	r3, r2
 800ace2:	434b      	muls	r3, r1
 800ace4:	18f3      	adds	r3, r6, r3
 800ace6:	633b      	str	r3, [r7, #48]	; 0x30
    pagestate = GetPageState(pageaddress);
 800ace8:	231b      	movs	r3, #27
 800acea:	2210      	movs	r2, #16
 800acec:	18ba      	adds	r2, r7, r2
 800acee:	18d6      	adds	r6, r2, r3
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 fd90 	bl	800b818 <GetPageState>
 800acf8:	0003      	movs	r3, r0
 800acfa:	7033      	strb	r3, [r6, #0]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800acfc:	221b      	movs	r2, #27
 800acfe:	2110      	movs	r1, #16
 800ad00:	187b      	adds	r3, r7, r1
 800ad02:	189b      	adds	r3, r3, r2
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d100      	bne.n	800ad0c <ReadVariable+0x1cc>
 800ad0a:	e765      	b.n	800abd8 <ReadVariable+0x98>
 800ad0c:	187b      	adds	r3, r7, r1
 800ad0e:	189b      	adds	r3, r3, r2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d100      	bne.n	800ad18 <ReadVariable+0x1d8>
 800ad16:	e75f      	b.n	800abd8 <ReadVariable+0x98>
 800ad18:	187b      	adds	r3, r7, r1
 800ad1a:	189b      	adds	r3, r3, r2
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d100      	bne.n	800ad24 <ReadVariable+0x1e4>
 800ad22:	e759      	b.n	800abd8 <ReadVariable+0x98>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800ad24:	2307      	movs	r3, #7
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b00f      	add	sp, #60	; 0x3c
 800ad2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	1fff75e0 	.word	0x1fff75e0

0800ad34 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800ad34:	b5b0      	push	{r4, r5, r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	0002      	movs	r2, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	1dbb      	adds	r3, r7, #6
 800ad40:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800ad42:	250e      	movs	r5, #14
 800ad44:	197b      	adds	r3, r7, r5
 800ad46:	2200      	movs	r2, #0
 800ad48:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800ad4a:	197c      	adds	r4, r7, r5
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	1dbb      	adds	r3, r7, #6
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	0011      	movs	r1, r2
 800ad54:	0018      	movs	r0, r3
 800ad56:	f000 fbf3 	bl	800b540 <VerifyPagesFullWriteVariable>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	8023      	strh	r3, [r4, #0]
#endif
  if (status == EE_PAGE_FULL)
 800ad5e:	197b      	adds	r3, r7, r5
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	2b12      	cmp	r3, #18
 800ad64:	d108      	bne.n	800ad78 <WriteVariable+0x44>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	1dbb      	adds	r3, r7, #6
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f000 f972 	bl	800b058 <PagesTransfer>
 800ad74:	0003      	movs	r3, r0
 800ad76:	e002      	b.n	800ad7e <WriteVariable+0x4a>
  }

  /* Return last operation status */
  return status;
 800ad78:	230e      	movs	r3, #14
 800ad7a:	18fb      	adds	r3, r7, r3
 800ad7c:	881b      	ldrh	r3, [r3, #0]
}
 800ad7e:	0018      	movs	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b004      	add	sp, #16
 800ad84:	bdb0      	pop	{r4, r5, r7, pc}

0800ad86 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800ad90:	230e      	movs	r3, #14
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	2211      	movs	r2, #17
 800ad96:	801a      	strh	r2, [r3, #0]
  uint32_t counter = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 800ad9c:	e00f      	b.n	800adbe <VerifyPageFullyErased+0x38>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	18d3      	adds	r3, r2, r3
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	1c51      	adds	r1, r2, #1
 800adaa:	d101      	bne.n	800adb0 <VerifyPageFullyErased+0x2a>
 800adac:	3301      	adds	r3, #1
 800adae:	d003      	beq.n	800adb8 <VerifyPageFullyErased+0x32>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800adb0:	230e      	movs	r3, #14
 800adb2:	18fb      	adds	r3, r7, r3
 800adb4:	2210      	movs	r2, #16
 800adb6:	801a      	strh	r2, [r3, #0]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3308      	adds	r3, #8
 800adbc:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d3eb      	bcc.n	800ad9e <VerifyPageFullyErased+0x18>
  }

  /* Return readstatus value */
  return readstatus;
 800adc6:	230e      	movs	r3, #14
 800adc8:	18fb      	adds	r3, r7, r3
 800adca:	881b      	ldrh	r3, [r3, #0]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b004      	add	sp, #16
 800add2:	bd80      	pop	{r7, pc}

0800add4 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	0002      	movs	r2, r0
 800addc:	1dfb      	adds	r3, r7, #7
 800adde:	701a      	strb	r2, [r3, #0]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 800ade0:	2517      	movs	r5, #23
 800ade2:	197b      	adds	r3, r7, r5
 800ade4:	2205      	movs	r2, #5
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	2616      	movs	r6, #22
 800adea:	19bb      	adds	r3, r7, r6
 800adec:	2205      	movs	r2, #5
 800adee:	701a      	strb	r2, [r3, #0]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	2300      	movs	r3, #0
 800adfa:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 800adfc:	4b93      	ldr	r3, [pc, #588]	; (800b04c <FindPage+0x278>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2280      	movs	r2, #128	; 0x80
 800ae06:	0252      	lsls	r2, r2, #9
 800ae08:	4694      	mov	ip, r2
 800ae0a:	4463      	add	r3, ip
 800ae0c:	02dc      	lsls	r4, r3, #11
 800ae0e:	4b90      	ldr	r3, [pc, #576]	; (800b050 <FindPage+0x27c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	029a      	lsls	r2, r3, #10
 800ae14:	23ff      	movs	r3, #255	; 0xff
 800ae16:	029b      	lsls	r3, r3, #10
 800ae18:	4013      	ands	r3, r2
 800ae1a:	0019      	movs	r1, r3
 800ae1c:	23d4      	movs	r3, #212	; 0xd4
 800ae1e:	0258      	lsls	r0, r3, #9
 800ae20:	f7f5 f978 	bl	8000114 <__udivsi3>
 800ae24:	0003      	movs	r3, r0
 800ae26:	0019      	movs	r1, r3
 800ae28:	4b89      	ldr	r3, [pc, #548]	; (800b050 <FindPage+0x27c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	029a      	lsls	r2, r3, #10
 800ae2e:	23ff      	movs	r3, #255	; 0xff
 800ae30:	029b      	lsls	r3, r3, #10
 800ae32:	4013      	ands	r3, r2
 800ae34:	434b      	muls	r3, r1
 800ae36:	18e3      	adds	r3, r4, r3
 800ae38:	197c      	adds	r4, r7, r5
 800ae3a:	0018      	movs	r0, r3
 800ae3c:	f000 fcec 	bl	800b818 <GetPageState>
 800ae40:	0003      	movs	r3, r0
 800ae42:	7023      	strb	r3, [r4, #0]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800ae44:	4b82      	ldr	r3, [pc, #520]	; (800b050 <FindPage+0x27c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	029a      	lsls	r2, r3, #10
 800ae4a:	23ff      	movs	r3, #255	; 0xff
 800ae4c:	029b      	lsls	r3, r3, #10
 800ae4e:	401a      	ands	r2, r3
 800ae50:	23d4      	movs	r3, #212	; 0xd4
 800ae52:	025b      	lsls	r3, r3, #9
 800ae54:	0011      	movs	r1, r2
 800ae56:	0018      	movs	r0, r3
 800ae58:	f7f5 f9e2 	bl	8000220 <__aeabi_uidivmod>
 800ae5c:	000b      	movs	r3, r1
 800ae5e:	0adb      	lsrs	r3, r3, #11
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	3301      	adds	r3, #1
 800ae66:	210a      	movs	r1, #10
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f7f5 f9d9 	bl	8000220 <__aeabi_uidivmod>
 800ae6e:	000b      	movs	r3, r1
 800ae70:	001c      	movs	r4, r3
 800ae72:	4b77      	ldr	r3, [pc, #476]	; (800b050 <FindPage+0x27c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	029a      	lsls	r2, r3, #10
 800ae78:	23ff      	movs	r3, #255	; 0xff
 800ae7a:	029b      	lsls	r3, r3, #10
 800ae7c:	401a      	ands	r2, r3
 800ae7e:	23d4      	movs	r3, #212	; 0xd4
 800ae80:	025b      	lsls	r3, r3, #9
 800ae82:	0011      	movs	r1, r2
 800ae84:	0018      	movs	r0, r3
 800ae86:	f7f5 f9cb 	bl	8000220 <__aeabi_uidivmod>
 800ae8a:	000b      	movs	r3, r1
 800ae8c:	0adb      	lsrs	r3, r3, #11
 800ae8e:	18e3      	adds	r3, r4, r3
 800ae90:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2280      	movs	r2, #128	; 0x80
 800ae96:	0252      	lsls	r2, r2, #9
 800ae98:	4694      	mov	ip, r2
 800ae9a:	4463      	add	r3, ip
 800ae9c:	02dc      	lsls	r4, r3, #11
 800ae9e:	4b6c      	ldr	r3, [pc, #432]	; (800b050 <FindPage+0x27c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	029a      	lsls	r2, r3, #10
 800aea4:	23ff      	movs	r3, #255	; 0xff
 800aea6:	029b      	lsls	r3, r3, #10
 800aea8:	4013      	ands	r3, r2
 800aeaa:	0019      	movs	r1, r3
 800aeac:	23d4      	movs	r3, #212	; 0xd4
 800aeae:	0258      	lsls	r0, r3, #9
 800aeb0:	f7f5 f930 	bl	8000114 <__udivsi3>
 800aeb4:	0003      	movs	r3, r0
 800aeb6:	0019      	movs	r1, r3
 800aeb8:	4b65      	ldr	r3, [pc, #404]	; (800b050 <FindPage+0x27c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	029a      	lsls	r2, r3, #10
 800aebe:	23ff      	movs	r3, #255	; 0xff
 800aec0:	029b      	lsls	r3, r3, #10
 800aec2:	4013      	ands	r3, r2
 800aec4:	434b      	muls	r3, r1
 800aec6:	18e3      	adds	r3, r4, r3
 800aec8:	19bc      	adds	r4, r7, r6
 800aeca:	0018      	movs	r0, r3
 800aecc:	f000 fca4 	bl	800b818 <GetPageState>
 800aed0:	0003      	movs	r3, r0
 800aed2:	7023      	strb	r3, [r4, #0]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 800aed4:	4b5e      	ldr	r3, [pc, #376]	; (800b050 <FindPage+0x27c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	029a      	lsls	r2, r3, #10
 800aeda:	23ff      	movs	r3, #255	; 0xff
 800aedc:	029b      	lsls	r3, r3, #10
 800aede:	401a      	ands	r2, r3
 800aee0:	23d4      	movs	r3, #212	; 0xd4
 800aee2:	025b      	lsls	r3, r3, #9
 800aee4:	0011      	movs	r1, r2
 800aee6:	0018      	movs	r0, r3
 800aee8:	f7f5 f99a 	bl	8000220 <__aeabi_uidivmod>
 800aeec:	000b      	movs	r3, r1
 800aeee:	0adb      	lsrs	r3, r3, #11
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	3309      	adds	r3, #9
 800aef6:	210a      	movs	r1, #10
 800aef8:	0018      	movs	r0, r3
 800aefa:	f7f5 f991 	bl	8000220 <__aeabi_uidivmod>
 800aefe:	000b      	movs	r3, r1
 800af00:	001c      	movs	r4, r3
 800af02:	4b53      	ldr	r3, [pc, #332]	; (800b050 <FindPage+0x27c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	029a      	lsls	r2, r3, #10
 800af08:	23ff      	movs	r3, #255	; 0xff
 800af0a:	029b      	lsls	r3, r3, #10
 800af0c:	401a      	ands	r2, r3
 800af0e:	23d4      	movs	r3, #212	; 0xd4
 800af10:	025b      	lsls	r3, r3, #9
 800af12:	0011      	movs	r1, r2
 800af14:	0018      	movs	r0, r3
 800af16:	f7f5 f983 	bl	8000220 <__aeabi_uidivmod>
 800af1a:	000b      	movs	r3, r1
 800af1c:	0adb      	lsrs	r3, r3, #11
 800af1e:	18e3      	adds	r3, r4, r3
 800af20:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 800af22:	1dfb      	adds	r3, r7, #7
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d100      	bne.n	800af2c <FindPage+0x158>
 800af2a:	e07e      	b.n	800b02a <FindPage+0x256>
 800af2c:	dd00      	ble.n	800af30 <FindPage+0x15c>
 800af2e:	e086      	b.n	800b03e <FindPage+0x26a>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d100      	bne.n	800af36 <FindPage+0x162>
 800af34:	e068      	b.n	800b008 <FindPage+0x234>
 800af36:	2b01      	cmp	r3, #1
 800af38:	d000      	beq.n	800af3c <FindPage+0x168>
 800af3a:	e080      	b.n	800b03e <FindPage+0x26a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800af3c:	197b      	adds	r3, r7, r5
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d12c      	bne.n	800af9e <FindPage+0x1ca>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800af44:	4b43      	ldr	r3, [pc, #268]	; (800b054 <FindPage+0x280>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	2380      	movs	r3, #128	; 0x80
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d201      	bcs.n	800af54 <FindPage+0x180>
        {
          /* Return current Active page */
          return currentpage;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	e076      	b.n	800b042 <FindPage+0x26e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800af54:	2316      	movs	r3, #22
 800af56:	18fb      	adds	r3, r7, r3
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d106      	bne.n	800af6c <FindPage+0x198>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 800af5e:	f7ff fd49 	bl	800a9f4 <EE_CleanUp>
 800af62:	1e03      	subs	r3, r0, #0
 800af64:	d002      	beq.n	800af6c <FindPage+0x198>
            {
              return EE_NO_PAGE_FOUND;
 800af66:	2301      	movs	r3, #1
 800af68:	425b      	negs	r3, r3
 800af6a:	e06a      	b.n	800b042 <FindPage+0x26e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2103      	movs	r1, #3
 800af70:	0018      	movs	r0, r3
 800af72:	f000 fb7f 	bl	800b674 <SetPageState>
 800af76:	1e03      	subs	r3, r0, #0
 800af78:	d002      	beq.n	800af80 <FindPage+0x1ac>
          {
            return EE_NO_PAGE_FOUND;
 800af7a:	2301      	movs	r3, #1
 800af7c:	425b      	negs	r3, r3
 800af7e:	e060      	b.n	800b042 <FindPage+0x26e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2102      	movs	r1, #2
 800af84:	0018      	movs	r0, r3
 800af86:	f000 fb75 	bl	800b674 <SetPageState>
 800af8a:	1e03      	subs	r3, r0, #0
 800af8c:	d002      	beq.n	800af94 <FindPage+0x1c0>
          {
            return EE_NO_PAGE_FOUND;
 800af8e:	2301      	movs	r3, #1
 800af90:	425b      	negs	r3, r3
 800af92:	e056      	b.n	800b042 <FindPage+0x26e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800af94:	4b2f      	ldr	r3, [pc, #188]	; (800b054 <FindPage+0x280>)
 800af96:	2220      	movs	r2, #32
 800af98:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	e051      	b.n	800b042 <FindPage+0x26e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800af9e:	2317      	movs	r3, #23
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d12c      	bne.n	800b002 <FindPage+0x22e>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 800afa8:	4b2a      	ldr	r3, [pc, #168]	; (800b054 <FindPage+0x280>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d201      	bcs.n	800afb8 <FindPage+0x1e4>
          {
            /* Return current receive page */
            return currentpage;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	e044      	b.n	800b042 <FindPage+0x26e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 800afb8:	2316      	movs	r3, #22
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b04      	cmp	r3, #4
 800afc0:	d106      	bne.n	800afd0 <FindPage+0x1fc>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800afc2:	f7ff fd17 	bl	800a9f4 <EE_CleanUp>
 800afc6:	1e03      	subs	r3, r0, #0
 800afc8:	d002      	beq.n	800afd0 <FindPage+0x1fc>
              {
                return EE_NO_PAGE_FOUND;
 800afca:	2301      	movs	r3, #1
 800afcc:	425b      	negs	r3, r3
 800afce:	e038      	b.n	800b042 <FindPage+0x26e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2103      	movs	r1, #3
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 fb4d 	bl	800b674 <SetPageState>
 800afda:	1e03      	subs	r3, r0, #0
 800afdc:	d002      	beq.n	800afe4 <FindPage+0x210>
            {
              return EE_NO_PAGE_FOUND;
 800afde:	2301      	movs	r3, #1
 800afe0:	425b      	negs	r3, r3
 800afe2:	e02e      	b.n	800b042 <FindPage+0x26e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2101      	movs	r1, #1
 800afe8:	0018      	movs	r0, r3
 800afea:	f000 fb43 	bl	800b674 <SetPageState>
 800afee:	1e03      	subs	r3, r0, #0
 800aff0:	d002      	beq.n	800aff8 <FindPage+0x224>
            {
              return EE_NO_PAGE_FOUND;
 800aff2:	2301      	movs	r3, #1
 800aff4:	425b      	negs	r3, r3
 800aff6:	e024      	b.n	800b042 <FindPage+0x26e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 800aff8:	4b16      	ldr	r3, [pc, #88]	; (800b054 <FindPage+0x280>)
 800affa:	2220      	movs	r2, #32
 800affc:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	e01f      	b.n	800b042 <FindPage+0x26e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b002:	2301      	movs	r3, #1
 800b004:	425b      	negs	r3, r3
 800b006:	e01c      	b.n	800b042 <FindPage+0x26e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 800b008:	2317      	movs	r3, #23
 800b00a:	18fb      	adds	r3, r7, r3
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d101      	bne.n	800b016 <FindPage+0x242>
      {
        return currentpage;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	e015      	b.n	800b042 <FindPage+0x26e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800b016:	2317      	movs	r3, #23
 800b018:	18fb      	adds	r3, r7, r3
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <FindPage+0x250>
        {
          return previouspage;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	e00e      	b.n	800b042 <FindPage+0x26e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800b024:	2301      	movs	r3, #1
 800b026:	425b      	negs	r3, r3
 800b028:	e00b      	b.n	800b042 <FindPage+0x26e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 800b02a:	2316      	movs	r3, #22
 800b02c:	18fb      	adds	r3, r7, r3
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <FindPage+0x264>
      {
        return followingpage;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e004      	b.n	800b042 <FindPage+0x26e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 800b038:	2301      	movs	r3, #1
 800b03a:	425b      	negs	r3, r3
 800b03c:	e001      	b.n	800b042 <FindPage+0x26e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 800b03e:	2301      	movs	r3, #1
 800b040:	425b      	negs	r3, r3
}
 800b042:	0018      	movs	r0, r3
 800b044:	46bd      	mov	sp, r7
 800b046:	b007      	add	sp, #28
 800b048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	200001b6 	.word	0x200001b6
 800b050:	1fff75e0 	.word	0x1fff75e0
 800b054:	20000008 	.word	0x20000008

0800b058 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 800b058:	b5b0      	push	{r4, r5, r7, lr}
 800b05a:	b08a      	sub	sp, #40	; 0x28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6039      	str	r1, [r7, #0]
 800b060:	0011      	movs	r1, r2
 800b062:	1dbb      	adds	r3, r7, #6
 800b064:	1c02      	adds	r2, r0, #0
 800b066:	801a      	strh	r2, [r3, #0]
 800b068:	1d7b      	adds	r3, r7, #5
 800b06a:	1c0a      	adds	r2, r1, #0
 800b06c:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 800b06e:	2327      	movs	r3, #39	; 0x27
 800b070:	18fb      	adds	r3, r7, r3
 800b072:	2205      	movs	r2, #5
 800b074:	701a      	strb	r2, [r3, #0]
  uint32_t pageaddress = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800b082:	2200      	movs	r2, #0
 800b084:	2300      	movs	r3, #0
 800b086:	613a      	str	r2, [r7, #16]
 800b088:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 800b08a:	230e      	movs	r3, #14
 800b08c:	18fb      	adds	r3, r7, r3
 800b08e:	2200      	movs	r2, #0
 800b090:	801a      	strh	r2, [r3, #0]
  EE_DATA_TYPE DataValue = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 800b096:	1d7b      	adds	r3, r7, #5
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <PagesTransfer+0x4a>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e000      	b.n	800b0a4 <PagesTransfer+0x4c>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7ff fe95 	bl	800add4 <FindPage>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	623b      	str	r3, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <PagesTransfer+0x60>
  {
    return EE_ERROR_NOERASE_PAGE;
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	e238      	b.n	800b52a <PagesTransfer+0x4d2>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 800b0b8:	4bbe      	ldr	r3, [pc, #760]	; (800b3b4 <PagesTransfer+0x35c>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	4bbd      	ldr	r3, [pc, #756]	; (800b3b8 <PagesTransfer+0x360>)
 800b0c4:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800b0c6:	4bbd      	ldr	r3, [pc, #756]	; (800b3bc <PagesTransfer+0x364>)
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 800b0cc:	1d7b      	adds	r3, r7, #5
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d108      	bne.n	800b0e6 <PagesTransfer+0x8e>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f000 facb 	bl	800b674 <SetPageState>
 800b0de:	1e03      	subs	r3, r0, #0
 800b0e0:	d001      	beq.n	800b0e6 <PagesTransfer+0x8e>
    {
      return EE_WRITE_ERROR;
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e221      	b.n	800b52a <PagesTransfer+0x4d2>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 800b0e6:	4bb6      	ldr	r3, [pc, #728]	; (800b3c0 <PagesTransfer+0x368>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	029a      	lsls	r2, r3, #10
 800b0ec:	23ff      	movs	r3, #255	; 0xff
 800b0ee:	029b      	lsls	r3, r3, #10
 800b0f0:	401a      	ands	r2, r3
 800b0f2:	23d4      	movs	r3, #212	; 0xd4
 800b0f4:	025b      	lsls	r3, r3, #9
 800b0f6:	0011      	movs	r1, r2
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f7f5 f891 	bl	8000220 <__aeabi_uidivmod>
 800b0fe:	000b      	movs	r3, r1
 800b100:	0adb      	lsrs	r3, r3, #11
 800b102:	6a3a      	ldr	r2, [r7, #32]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	3309      	adds	r3, #9
 800b108:	210a      	movs	r1, #10
 800b10a:	0018      	movs	r0, r3
 800b10c:	f7f5 f888 	bl	8000220 <__aeabi_uidivmod>
 800b110:	000b      	movs	r3, r1
 800b112:	001c      	movs	r4, r3
 800b114:	4baa      	ldr	r3, [pc, #680]	; (800b3c0 <PagesTransfer+0x368>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	029a      	lsls	r2, r3, #10
 800b11a:	23ff      	movs	r3, #255	; 0xff
 800b11c:	029b      	lsls	r3, r3, #10
 800b11e:	401a      	ands	r2, r3
 800b120:	23d4      	movs	r3, #212	; 0xd4
 800b122:	025b      	lsls	r3, r3, #9
 800b124:	0011      	movs	r1, r2
 800b126:	0018      	movs	r0, r3
 800b128:	f7f5 f87a 	bl	8000220 <__aeabi_uidivmod>
 800b12c:	000b      	movs	r3, r1
 800b12e:	0adb      	lsrs	r3, r3, #11
 800b130:	18e3      	adds	r3, r4, r3
 800b132:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	2280      	movs	r2, #128	; 0x80
 800b138:	0252      	lsls	r2, r2, #9
 800b13a:	4694      	mov	ip, r2
 800b13c:	4463      	add	r3, ip
 800b13e:	02dc      	lsls	r4, r3, #11
 800b140:	4b9f      	ldr	r3, [pc, #636]	; (800b3c0 <PagesTransfer+0x368>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	029a      	lsls	r2, r3, #10
 800b146:	23ff      	movs	r3, #255	; 0xff
 800b148:	029b      	lsls	r3, r3, #10
 800b14a:	4013      	ands	r3, r2
 800b14c:	0019      	movs	r1, r3
 800b14e:	23d4      	movs	r3, #212	; 0xd4
 800b150:	0258      	lsls	r0, r3, #9
 800b152:	f7f4 ffdf 	bl	8000114 <__udivsi3>
 800b156:	0003      	movs	r3, r0
 800b158:	0019      	movs	r1, r3
 800b15a:	4b99      	ldr	r3, [pc, #612]	; (800b3c0 <PagesTransfer+0x368>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	029a      	lsls	r2, r3, #10
 800b160:	23ff      	movs	r3, #255	; 0xff
 800b162:	029b      	lsls	r3, r3, #10
 800b164:	4013      	ands	r3, r2
 800b166:	434b      	muls	r3, r1
 800b168:	18e3      	adds	r3, r4, r3
 800b16a:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 800b16c:	2527      	movs	r5, #39	; 0x27
 800b16e:	197c      	adds	r4, r7, r5
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	0018      	movs	r0, r3
 800b174:	f000 fb50 	bl	800b818 <GetPageState>
 800b178:	0003      	movs	r3, r0
 800b17a:	7023      	strb	r3, [r4, #0]

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b17c:	197b      	adds	r3, r7, r5
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d004      	beq.n	800b18e <PagesTransfer+0x136>
 800b184:	197b      	adds	r3, r7, r5
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d000      	beq.n	800b18e <PagesTransfer+0x136>
 800b18c:	e0bc      	b.n	800b308 <PagesTransfer+0x2b0>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800b18e:	2327      	movs	r3, #39	; 0x27
 800b190:	18fb      	adds	r3, r7, r3
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d108      	bne.n	800b1aa <PagesTransfer+0x152>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	2104      	movs	r1, #4
 800b19c:	0018      	movs	r0, r3
 800b19e:	f000 fa69 	bl	800b674 <SetPageState>
 800b1a2:	1e03      	subs	r3, r0, #0
 800b1a4:	d001      	beq.n	800b1aa <PagesTransfer+0x152>
      {
        return EE_WRITE_ERROR;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e1bf      	b.n	800b52a <PagesTransfer+0x4d2>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 800b1aa:	4b85      	ldr	r3, [pc, #532]	; (800b3c0 <PagesTransfer+0x368>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	029a      	lsls	r2, r3, #10
 800b1b0:	23ff      	movs	r3, #255	; 0xff
 800b1b2:	029b      	lsls	r3, r3, #10
 800b1b4:	401a      	ands	r2, r3
 800b1b6:	23d4      	movs	r3, #212	; 0xd4
 800b1b8:	025b      	lsls	r3, r3, #9
 800b1ba:	0011      	movs	r1, r2
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f7f5 f82f 	bl	8000220 <__aeabi_uidivmod>
 800b1c2:	000b      	movs	r3, r1
 800b1c4:	0adb      	lsrs	r3, r3, #11
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	3309      	adds	r3, #9
 800b1cc:	210a      	movs	r1, #10
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f7f5 f826 	bl	8000220 <__aeabi_uidivmod>
 800b1d4:	000b      	movs	r3, r1
 800b1d6:	001c      	movs	r4, r3
 800b1d8:	4b79      	ldr	r3, [pc, #484]	; (800b3c0 <PagesTransfer+0x368>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	029a      	lsls	r2, r3, #10
 800b1de:	23ff      	movs	r3, #255	; 0xff
 800b1e0:	029b      	lsls	r3, r3, #10
 800b1e2:	401a      	ands	r2, r3
 800b1e4:	23d4      	movs	r3, #212	; 0xd4
 800b1e6:	025b      	lsls	r3, r3, #9
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7f5 f818 	bl	8000220 <__aeabi_uidivmod>
 800b1f0:	000b      	movs	r3, r1
 800b1f2:	0adb      	lsrs	r3, r3, #11
 800b1f4:	18e3      	adds	r3, r4, r3
 800b1f6:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	2280      	movs	r2, #128	; 0x80
 800b1fc:	0252      	lsls	r2, r2, #9
 800b1fe:	4694      	mov	ip, r2
 800b200:	4463      	add	r3, ip
 800b202:	02dc      	lsls	r4, r3, #11
 800b204:	4b6e      	ldr	r3, [pc, #440]	; (800b3c0 <PagesTransfer+0x368>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	029a      	lsls	r2, r3, #10
 800b20a:	23ff      	movs	r3, #255	; 0xff
 800b20c:	029b      	lsls	r3, r3, #10
 800b20e:	4013      	ands	r3, r2
 800b210:	0019      	movs	r1, r3
 800b212:	23d4      	movs	r3, #212	; 0xd4
 800b214:	0258      	lsls	r0, r3, #9
 800b216:	f7f4 ff7d 	bl	8000114 <__udivsi3>
 800b21a:	0003      	movs	r3, r0
 800b21c:	0019      	movs	r1, r3
 800b21e:	4b68      	ldr	r3, [pc, #416]	; (800b3c0 <PagesTransfer+0x368>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	029a      	lsls	r2, r3, #10
 800b224:	23ff      	movs	r3, #255	; 0xff
 800b226:	029b      	lsls	r3, r3, #10
 800b228:	4013      	ands	r3, r2
 800b22a:	434b      	muls	r3, r1
 800b22c:	18e3      	adds	r3, r4, r3
 800b22e:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 800b230:	2327      	movs	r3, #39	; 0x27
 800b232:	18fc      	adds	r4, r7, r3
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	0018      	movs	r0, r3
 800b238:	f000 faee 	bl	800b818 <GetPageState>
 800b23c:	0003      	movs	r3, r0
 800b23e:	7023      	strb	r3, [r4, #0]

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b240:	e058      	b.n	800b2f4 <PagesTransfer+0x29c>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 800b242:	2327      	movs	r3, #39	; 0x27
 800b244:	18fb      	adds	r3, r7, r3
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d108      	bne.n	800b25e <PagesTransfer+0x206>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	2104      	movs	r1, #4
 800b250:	0018      	movs	r0, r3
 800b252:	f000 fa0f 	bl	800b674 <SetPageState>
 800b256:	1e03      	subs	r3, r0, #0
 800b258:	d001      	beq.n	800b25e <PagesTransfer+0x206>
        {
          return EE_WRITE_ERROR;
 800b25a:	2302      	movs	r3, #2
 800b25c:	e165      	b.n	800b52a <PagesTransfer+0x4d2>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 800b25e:	4b58      	ldr	r3, [pc, #352]	; (800b3c0 <PagesTransfer+0x368>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	029a      	lsls	r2, r3, #10
 800b264:	23ff      	movs	r3, #255	; 0xff
 800b266:	029b      	lsls	r3, r3, #10
 800b268:	401a      	ands	r2, r3
 800b26a:	23d4      	movs	r3, #212	; 0xd4
 800b26c:	025b      	lsls	r3, r3, #9
 800b26e:	0011      	movs	r1, r2
 800b270:	0018      	movs	r0, r3
 800b272:	f7f4 ffd5 	bl	8000220 <__aeabi_uidivmod>
 800b276:	000b      	movs	r3, r1
 800b278:	0adb      	lsrs	r3, r3, #11
 800b27a:	6a3a      	ldr	r2, [r7, #32]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	3309      	adds	r3, #9
 800b280:	210a      	movs	r1, #10
 800b282:	0018      	movs	r0, r3
 800b284:	f7f4 ffcc 	bl	8000220 <__aeabi_uidivmod>
 800b288:	000b      	movs	r3, r1
 800b28a:	001c      	movs	r4, r3
 800b28c:	4b4c      	ldr	r3, [pc, #304]	; (800b3c0 <PagesTransfer+0x368>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	029a      	lsls	r2, r3, #10
 800b292:	23ff      	movs	r3, #255	; 0xff
 800b294:	029b      	lsls	r3, r3, #10
 800b296:	401a      	ands	r2, r3
 800b298:	23d4      	movs	r3, #212	; 0xd4
 800b29a:	025b      	lsls	r3, r3, #9
 800b29c:	0011      	movs	r1, r2
 800b29e:	0018      	movs	r0, r3
 800b2a0:	f7f4 ffbe 	bl	8000220 <__aeabi_uidivmod>
 800b2a4:	000b      	movs	r3, r1
 800b2a6:	0adb      	lsrs	r3, r3, #11
 800b2a8:	18e3      	adds	r3, r4, r3
 800b2aa:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2280      	movs	r2, #128	; 0x80
 800b2b0:	0252      	lsls	r2, r2, #9
 800b2b2:	4694      	mov	ip, r2
 800b2b4:	4463      	add	r3, ip
 800b2b6:	02dc      	lsls	r4, r3, #11
 800b2b8:	4b41      	ldr	r3, [pc, #260]	; (800b3c0 <PagesTransfer+0x368>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	029a      	lsls	r2, r3, #10
 800b2be:	23ff      	movs	r3, #255	; 0xff
 800b2c0:	029b      	lsls	r3, r3, #10
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	0019      	movs	r1, r3
 800b2c6:	23d4      	movs	r3, #212	; 0xd4
 800b2c8:	0258      	lsls	r0, r3, #9
 800b2ca:	f7f4 ff23 	bl	8000114 <__udivsi3>
 800b2ce:	0003      	movs	r3, r0
 800b2d0:	0019      	movs	r1, r3
 800b2d2:	4b3b      	ldr	r3, [pc, #236]	; (800b3c0 <PagesTransfer+0x368>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	029a      	lsls	r2, r3, #10
 800b2d8:	23ff      	movs	r3, #255	; 0xff
 800b2da:	029b      	lsls	r3, r3, #10
 800b2dc:	4013      	ands	r3, r2
 800b2de:	434b      	muls	r3, r1
 800b2e0:	18e3      	adds	r3, r4, r3
 800b2e2:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 800b2e4:	2327      	movs	r3, #39	; 0x27
 800b2e6:	18fc      	adds	r4, r7, r3
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f000 fa94 	bl	800b818 <GetPageState>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	7023      	strb	r3, [r4, #0]
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 800b2f4:	2227      	movs	r2, #39	; 0x27
 800b2f6:	18bb      	adds	r3, r7, r2
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d0a1      	beq.n	800b242 <PagesTransfer+0x1ea>
 800b2fe:	18bb      	adds	r3, r7, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	2b04      	cmp	r3, #4
 800b304:	d09d      	beq.n	800b242 <PagesTransfer+0x1ea>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 800b306:	e00a      	b.n	800b31e <PagesTransfer+0x2c6>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 800b308:	1d7b      	adds	r3, r7, #5
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d104      	bne.n	800b31a <PagesTransfer+0x2c2>
 800b310:	2327      	movs	r3, #39	; 0x27
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b03      	cmp	r3, #3
 800b318:	d001      	beq.n	800b31e <PagesTransfer+0x2c6>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 800b31a:	230a      	movs	r3, #10
 800b31c:	e105      	b.n	800b52a <PagesTransfer+0x4d2>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800b31e:	1d7b      	adds	r3, r7, #5
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d000      	beq.n	800b328 <PagesTransfer+0x2d0>
 800b326:	e0a8      	b.n	800b47a <PagesTransfer+0x422>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b328:	2320      	movs	r3, #32
 800b32a:	61fb      	str	r3, [r7, #28]
 800b32c:	e037      	b.n	800b39e <PagesTransfer+0x346>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800b32e:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <PagesTransfer+0x360>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2280      	movs	r2, #128	; 0x80
 800b334:	0252      	lsls	r2, r2, #9
 800b336:	4694      	mov	ip, r2
 800b338:	4463      	add	r3, ip
 800b33a:	02dc      	lsls	r4, r3, #11
 800b33c:	4b20      	ldr	r3, [pc, #128]	; (800b3c0 <PagesTransfer+0x368>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	029a      	lsls	r2, r3, #10
 800b342:	23ff      	movs	r3, #255	; 0xff
 800b344:	029b      	lsls	r3, r3, #10
 800b346:	4013      	ands	r3, r2
 800b348:	0019      	movs	r1, r3
 800b34a:	23d4      	movs	r3, #212	; 0xd4
 800b34c:	0258      	lsls	r0, r3, #9
 800b34e:	f7f4 fee1 	bl	8000114 <__udivsi3>
 800b352:	0003      	movs	r3, r0
 800b354:	0019      	movs	r1, r3
 800b356:	4b1a      	ldr	r3, [pc, #104]	; (800b3c0 <PagesTransfer+0x368>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	029a      	lsls	r2, r3, #10
 800b35c:	23ff      	movs	r3, #255	; 0xff
 800b35e:	029b      	lsls	r3, r3, #10
 800b360:	4013      	ands	r3, r2
 800b362:	434b      	muls	r3, r1
 800b364:	18e2      	adds	r2, r4, r3
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	18d3      	adds	r3, r2, r3
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	613a      	str	r2, [r7, #16]
 800b370:	617b      	str	r3, [r7, #20]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) && (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)&& (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	3301      	adds	r3, #1
 800b376:	d103      	bne.n	800b380 <PagesTransfer+0x328>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	3301      	adds	r3, #1
 800b37c:	d100      	bne.n	800b380 <PagesTransfer+0x328>
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else
      {
        break;
 800b37e:	e013      	b.n	800b3a8 <PagesTransfer+0x350>
        uhNbWrittenElements++;
 800b380:	4b0c      	ldr	r3, [pc, #48]	; (800b3b4 <PagesTransfer+0x35c>)
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	b29a      	uxth	r2, r3
 800b388:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <PagesTransfer+0x35c>)
 800b38a:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b38c:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <PagesTransfer+0x364>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	001a      	movs	r2, r3
 800b394:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <PagesTransfer+0x364>)
 800b396:	601a      	str	r2, [r3, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	3308      	adds	r3, #8
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	2380      	movs	r3, #128	; 0x80
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d3c2      	bcc.n	800b32e <PagesTransfer+0x2d6>
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800b3a8:	4b03      	ldr	r3, [pc, #12]	; (800b3b8 <PagesTransfer+0x360>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e05d      	b.n	800b470 <PagesTransfer+0x418>
 800b3b4:	200001b4 	.word	0x200001b4
 800b3b8:	200001b6 	.word	0x200001b6
 800b3bc:	20000008 	.word	0x20000008
 800b3c0:	1fff75e0 	.word	0x1fff75e0
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800b3c4:	4b5b      	ldr	r3, [pc, #364]	; (800b534 <PagesTransfer+0x4dc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	029a      	lsls	r2, r3, #10
 800b3ca:	23ff      	movs	r3, #255	; 0xff
 800b3cc:	029b      	lsls	r3, r3, #10
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	23d4      	movs	r3, #212	; 0xd4
 800b3d2:	025b      	lsls	r3, r3, #9
 800b3d4:	0011      	movs	r1, r2
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f7f4 ff22 	bl	8000220 <__aeabi_uidivmod>
 800b3dc:	000b      	movs	r3, r1
 800b3de:	0adb      	lsrs	r3, r3, #11
 800b3e0:	6a3a      	ldr	r2, [r7, #32]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	3309      	adds	r3, #9
 800b3e6:	210a      	movs	r1, #10
 800b3e8:	0018      	movs	r0, r3
 800b3ea:	f7f4 ff19 	bl	8000220 <__aeabi_uidivmod>
 800b3ee:	000b      	movs	r3, r1
 800b3f0:	001c      	movs	r4, r3
 800b3f2:	4b50      	ldr	r3, [pc, #320]	; (800b534 <PagesTransfer+0x4dc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	029a      	lsls	r2, r3, #10
 800b3f8:	23ff      	movs	r3, #255	; 0xff
 800b3fa:	029b      	lsls	r3, r3, #10
 800b3fc:	401a      	ands	r2, r3
 800b3fe:	23d4      	movs	r3, #212	; 0xd4
 800b400:	025b      	lsls	r3, r3, #9
 800b402:	0011      	movs	r1, r2
 800b404:	0018      	movs	r0, r3
 800b406:	f7f4 ff0b 	bl	8000220 <__aeabi_uidivmod>
 800b40a:	000b      	movs	r3, r1
 800b40c:	0adb      	lsrs	r3, r3, #11
 800b40e:	18e3      	adds	r3, r4, r3
 800b410:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2280      	movs	r2, #128	; 0x80
 800b416:	0252      	lsls	r2, r2, #9
 800b418:	4694      	mov	ip, r2
 800b41a:	4463      	add	r3, ip
 800b41c:	02dc      	lsls	r4, r3, #11
 800b41e:	4b45      	ldr	r3, [pc, #276]	; (800b534 <PagesTransfer+0x4dc>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	029a      	lsls	r2, r3, #10
 800b424:	23ff      	movs	r3, #255	; 0xff
 800b426:	029b      	lsls	r3, r3, #10
 800b428:	4013      	ands	r3, r2
 800b42a:	0019      	movs	r1, r3
 800b42c:	23d4      	movs	r3, #212	; 0xd4
 800b42e:	0258      	lsls	r0, r3, #9
 800b430:	f7f4 fe70 	bl	8000114 <__udivsi3>
 800b434:	0003      	movs	r3, r0
 800b436:	0019      	movs	r1, r3
 800b438:	4b3e      	ldr	r3, [pc, #248]	; (800b534 <PagesTransfer+0x4dc>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	029a      	lsls	r2, r3, #10
 800b43e:	23ff      	movs	r3, #255	; 0xff
 800b440:	029b      	lsls	r3, r3, #10
 800b442:	4013      	ands	r3, r2
 800b444:	434b      	muls	r3, r1
 800b446:	18e3      	adds	r3, r4, r3
 800b448:	2527      	movs	r5, #39	; 0x27
 800b44a:	197c      	adds	r4, r7, r5
 800b44c:	0018      	movs	r0, r3
 800b44e:	f000 f9e3 	bl	800b818 <GetPageState>
 800b452:	0003      	movs	r3, r0
 800b454:	7023      	strb	r3, [r4, #0]

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 800b456:	197b      	adds	r3, r7, r5
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d10c      	bne.n	800b478 <PagesTransfer+0x420>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800b45e:	4b36      	ldr	r3, [pc, #216]	; (800b538 <PagesTransfer+0x4e0>)
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	33fc      	adds	r3, #252	; 0xfc
 800b464:	b29a      	uxth	r2, r3
 800b466:	4b34      	ldr	r3, [pc, #208]	; (800b538 <PagesTransfer+0x4e0>)
 800b468:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b09      	cmp	r3, #9
 800b474:	d9a6      	bls.n	800b3c4 <PagesTransfer+0x36c>
 800b476:	e000      	b.n	800b47a <PagesTransfer+0x422>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 800b478:	46c0      	nop			; (mov r8, r8)
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	1dbb      	adds	r3, r7, #6
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	0011      	movs	r1, r2
 800b482:	0018      	movs	r0, r3
 800b484:	f000 f85c 	bl	800b540 <VerifyPagesFullWriteVariable>
 800b488:	1e03      	subs	r3, r0, #0
 800b48a:	d001      	beq.n	800b490 <PagesTransfer+0x438>
  {
    return EE_WRITE_ERROR;
 800b48c:	2302      	movs	r3, #2
 800b48e:	e04c      	b.n	800b52a <PagesTransfer+0x4d2>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b490:	4b29      	ldr	r3, [pc, #164]	; (800b538 <PagesTransfer+0x4e0>)
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d903      	bls.n	800b4a0 <PagesTransfer+0x448>
 800b498:	4b27      	ldr	r3, [pc, #156]	; (800b538 <PagesTransfer+0x4e0>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	3b02      	subs	r3, #2
 800b49e:	e000      	b.n	800b4a2 <PagesTransfer+0x44a>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	61fb      	str	r3, [r7, #28]
 800b4a4:	e032      	b.n	800b50c <PagesTransfer+0x4b4>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 800b4a6:	1dbb      	adds	r3, r7, #6
 800b4a8:	881b      	ldrh	r3, [r3, #0]
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d02a      	beq.n	800b506 <PagesTransfer+0x4ae>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	250e      	movs	r5, #14
 800b4b6:	197c      	adds	r4, r7, r5
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	18ba      	adds	r2, r7, r2
 800b4bc:	0011      	movs	r1, r2
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f7ff fb3e 	bl	800ab40 <ReadVariable>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	8023      	strh	r3, [r4, #0]
      if (status == EE_OK)
 800b4c8:	0029      	movs	r1, r5
 800b4ca:	187b      	adds	r3, r7, r1
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d111      	bne.n	800b4f6 <PagesTransfer+0x49e>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	000d      	movs	r5, r1
 800b4da:	187c      	adds	r4, r7, r1
 800b4dc:	0011      	movs	r1, r2
 800b4de:	0018      	movs	r0, r3
 800b4e0:	f000 f82e 	bl	800b540 <VerifyPagesFullWriteVariable>
 800b4e4:	0003      	movs	r3, r0
 800b4e6:	8023      	strh	r3, [r4, #0]
    #endif
        if (status != EE_OK)
 800b4e8:	197b      	adds	r3, r7, r5
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <PagesTransfer+0x4ae>
        {
          return status;
 800b4f0:	197b      	adds	r3, r7, r5
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	e019      	b.n	800b52a <PagesTransfer+0x4d2>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 800b4f6:	220e      	movs	r2, #14
 800b4f8:	18bb      	adds	r3, r7, r2
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	2b07      	cmp	r3, #7
 800b4fe:	d002      	beq.n	800b506 <PagesTransfer+0x4ae>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800b500:	18bb      	adds	r3, r7, r2
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	e011      	b.n	800b52a <PagesTransfer+0x4d2>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	3301      	adds	r3, #1
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d9c9      	bls.n	800b4a6 <PagesTransfer+0x44e>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800b512:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <PagesTransfer+0x4e4>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2102      	movs	r1, #2
 800b518:	0018      	movs	r0, r3
 800b51a:	f000 f8ab 	bl	800b674 <SetPageState>
 800b51e:	1e03      	subs	r3, r0, #0
 800b520:	d001      	beq.n	800b526 <PagesTransfer+0x4ce>
  {
    return EE_WRITE_ERROR;
 800b522:	2302      	movs	r3, #2
 800b524:	e001      	b.n	800b52a <PagesTransfer+0x4d2>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800b526:	2380      	movs	r3, #128	; 0x80
 800b528:	005b      	lsls	r3, r3, #1
}
 800b52a:	0018      	movs	r0, r3
 800b52c:	46bd      	mov	sp, r7
 800b52e:	b00a      	add	sp, #40	; 0x28
 800b530:	bdb0      	pop	{r4, r5, r7, pc}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	1fff75e0 	.word	0x1fff75e0
 800b538:	200001b4 	.word	0x200001b4
 800b53c:	200001b6 	.word	0x200001b6

0800b540 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800b540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b542:	b091      	sub	sp, #68	; 0x44
 800b544:	af00      	add	r7, sp, #0
 800b546:	0003      	movs	r3, r0
 800b548:	62b9      	str	r1, [r7, #40]	; 0x28
 800b54a:	222e      	movs	r2, #46	; 0x2e
 800b54c:	18ba      	adds	r2, r7, r2
 800b54e:	8013      	strh	r3, [r2, #0]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800b554:	4b43      	ldr	r3, [pc, #268]	; (800b664 <VerifyPagesFullWriteVariable+0x124>)
 800b556:	881a      	ldrh	r2, [r3, #0]
 800b558:	4b43      	ldr	r3, [pc, #268]	; (800b668 <VerifyPagesFullWriteVariable+0x128>)
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d901      	bls.n	800b562 <VerifyPagesFullWriteVariable+0x22>
  {
    return EE_PAGE_FULL;
 800b55e:	2312      	movs	r3, #18
 800b560:	e07b      	b.n	800b65a <VerifyPagesFullWriteVariable+0x11a>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800b562:	2001      	movs	r0, #1
 800b564:	f7ff fc36 	bl	800add4 <FindPage>
 800b568:	0003      	movs	r3, r0
 800b56a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t activepageaddress = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	3301      	adds	r3, #1
 800b574:	d101      	bne.n	800b57a <VerifyPagesFullWriteVariable+0x3a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800b576:	2303      	movs	r3, #3
 800b578:	e06f      	b.n	800b65a <VerifyPagesFullWriteVariable+0x11a>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	2280      	movs	r2, #128	; 0x80
 800b57e:	0252      	lsls	r2, r2, #9
 800b580:	4694      	mov	ip, r2
 800b582:	4463      	add	r3, ip
 800b584:	02de      	lsls	r6, r3, #11
 800b586:	4b39      	ldr	r3, [pc, #228]	; (800b66c <VerifyPagesFullWriteVariable+0x12c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	029a      	lsls	r2, r3, #10
 800b58c:	23ff      	movs	r3, #255	; 0xff
 800b58e:	029b      	lsls	r3, r3, #10
 800b590:	4013      	ands	r3, r2
 800b592:	0019      	movs	r1, r3
 800b594:	23d4      	movs	r3, #212	; 0xd4
 800b596:	0258      	lsls	r0, r3, #9
 800b598:	f7f4 fdbc 	bl	8000114 <__udivsi3>
 800b59c:	0003      	movs	r3, r0
 800b59e:	0019      	movs	r1, r3
 800b5a0:	4b32      	ldr	r3, [pc, #200]	; (800b66c <VerifyPagesFullWriteVariable+0x12c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	029a      	lsls	r2, r3, #10
 800b5a6:	23ff      	movs	r3, #255	; 0xff
 800b5a8:	029b      	lsls	r3, r3, #10
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	434b      	muls	r3, r1
 800b5ae:	18f3      	adds	r3, r6, r3
 800b5b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d107      	bne.n	800b5c8 <VerifyPagesFullWriteVariable+0x88>
 800b5b8:	232e      	movs	r3, #46	; 0x2e
 800b5ba:	18fb      	adds	r3, r7, r3
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d102      	bne.n	800b5c8 <VerifyPagesFullWriteVariable+0x88>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c6:	e009      	b.n	800b5dc <VerifyPagesFullWriteVariable+0x9c>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 800b5c8:	232e      	movs	r3, #46	; 0x2e
 800b5ca:	18fb      	adds	r3, r7, r3
 800b5cc:	881a      	ldrh	r2, [r3, #0]
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	0011      	movs	r1, r2
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	f000 f98a 	bl	800b8ec <CalculateCrc>
 800b5d8:	0003      	movs	r3, r0
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, pData64, Write_type);
  if (ee_status != EE_OK) return ee_status;
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800b5dc:	4b24      	ldr	r3, [pc, #144]	; (800b670 <VerifyPagesFullWriteVariable+0x130>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e2:	18d1      	adds	r1, r2, r3
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	61bb      	str	r3, [r7, #24]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	001b      	movs	r3, r3
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	623b      	str	r3, [r7, #32]
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f8:	041b      	lsls	r3, r3, #16
 800b5fa:	613b      	str	r3, [r7, #16]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	6a38      	ldr	r0, [r7, #32]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	0016      	movs	r6, r2
 800b608:	4330      	orrs	r0, r6
 800b60a:	0004      	movs	r4, r0
 800b60c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b60e:	4318      	orrs	r0, r3
 800b610:	0005      	movs	r5, r0
 800b612:	232e      	movs	r3, #46	; 0x2e
 800b614:	18fb      	adds	r3, r7, r3
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	60bb      	str	r3, [r7, #8]
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	0010      	movs	r0, r2
 800b626:	4320      	orrs	r0, r4
 800b628:	6038      	str	r0, [r7, #0]
 800b62a:	432b      	orrs	r3, r5
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	0008      	movs	r0, r1
 800b634:	f000 f97e 	bl	800b934 <FI_WriteDoubleWord>
 800b638:	1e03      	subs	r3, r0, #0
 800b63a:	d001      	beq.n	800b640 <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 800b63c:	2302      	movs	r3, #2
 800b63e:	e00c      	b.n	800b65a <VerifyPagesFullWriteVariable+0x11a>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <VerifyPagesFullWriteVariable+0x130>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3308      	adds	r3, #8
 800b646:	001a      	movs	r2, r3
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <VerifyPagesFullWriteVariable+0x130>)
 800b64a:	601a      	str	r2, [r3, #0]
  uhNbWrittenElements++;
 800b64c:	4b05      	ldr	r3, [pc, #20]	; (800b664 <VerifyPagesFullWriteVariable+0x124>)
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	3301      	adds	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	4b03      	ldr	r3, [pc, #12]	; (800b664 <VerifyPagesFullWriteVariable+0x124>)
 800b656:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	0018      	movs	r0, r3
 800b65c:	46bd      	mov	sp, r7
 800b65e:	b011      	add	sp, #68	; 0x44
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	200001b4 	.word	0x200001b4
 800b668:	000004eb 	.word	0x000004eb
 800b66c:	1fff75e0 	.word	0x1fff75e0
 800b670:	20000008 	.word	0x20000008

0800b674 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	000a      	movs	r2, r1
 800b67e:	1cfb      	adds	r3, r7, #3
 800b680:	701a      	strb	r2, [r3, #0]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	2300      	movs	r3, #0
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	2300      	movs	r3, #0
 800b690:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2280      	movs	r2, #128	; 0x80
 800b696:	0252      	lsls	r2, r2, #9
 800b698:	4694      	mov	ip, r2
 800b69a:	4463      	add	r3, ip
 800b69c:	02dc      	lsls	r4, r3, #11
 800b69e:	4b5b      	ldr	r3, [pc, #364]	; (800b80c <SetPageState+0x198>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	029a      	lsls	r2, r3, #10
 800b6a4:	23ff      	movs	r3, #255	; 0xff
 800b6a6:	029b      	lsls	r3, r3, #10
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	0019      	movs	r1, r3
 800b6ac:	23d4      	movs	r3, #212	; 0xd4
 800b6ae:	0258      	lsls	r0, r3, #9
 800b6b0:	f7f4 fd30 	bl	8000114 <__udivsi3>
 800b6b4:	0003      	movs	r3, r0
 800b6b6:	0019      	movs	r1, r3
 800b6b8:	4b54      	ldr	r3, [pc, #336]	; (800b80c <SetPageState+0x198>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	029a      	lsls	r2, r3, #10
 800b6be:	23ff      	movs	r3, #255	; 0xff
 800b6c0:	029b      	lsls	r3, r3, #10
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	434b      	muls	r3, r1
 800b6c6:	18e3      	adds	r3, r4, r3
 800b6c8:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2280      	movs	r2, #128	; 0x80
 800b6ce:	0252      	lsls	r2, r2, #9
 800b6d0:	4694      	mov	ip, r2
 800b6d2:	4463      	add	r3, ip
 800b6d4:	02dc      	lsls	r4, r3, #11
 800b6d6:	4b4d      	ldr	r3, [pc, #308]	; (800b80c <SetPageState+0x198>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	029a      	lsls	r2, r3, #10
 800b6dc:	23ff      	movs	r3, #255	; 0xff
 800b6de:	029b      	lsls	r3, r3, #10
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	0019      	movs	r1, r3
 800b6e4:	23d4      	movs	r3, #212	; 0xd4
 800b6e6:	0258      	lsls	r0, r3, #9
 800b6e8:	f7f4 fd14 	bl	8000114 <__udivsi3>
 800b6ec:	0003      	movs	r3, r0
 800b6ee:	0019      	movs	r1, r3
 800b6f0:	4b46      	ldr	r3, [pc, #280]	; (800b80c <SetPageState+0x198>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	029a      	lsls	r2, r3, #10
 800b6f6:	23ff      	movs	r3, #255	; 0xff
 800b6f8:	029b      	lsls	r3, r3, #10
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	434b      	muls	r3, r1
 800b6fe:	18e3      	adds	r3, r4, r3
 800b700:	3308      	adds	r3, #8
 800b702:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2280      	movs	r2, #128	; 0x80
 800b708:	0252      	lsls	r2, r2, #9
 800b70a:	4694      	mov	ip, r2
 800b70c:	4463      	add	r3, ip
 800b70e:	02dc      	lsls	r4, r3, #11
 800b710:	4b3e      	ldr	r3, [pc, #248]	; (800b80c <SetPageState+0x198>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	029a      	lsls	r2, r3, #10
 800b716:	23ff      	movs	r3, #255	; 0xff
 800b718:	029b      	lsls	r3, r3, #10
 800b71a:	4013      	ands	r3, r2
 800b71c:	0019      	movs	r1, r3
 800b71e:	23d4      	movs	r3, #212	; 0xd4
 800b720:	0258      	lsls	r0, r3, #9
 800b722:	f7f4 fcf7 	bl	8000114 <__udivsi3>
 800b726:	0003      	movs	r3, r0
 800b728:	0019      	movs	r1, r3
 800b72a:	4b38      	ldr	r3, [pc, #224]	; (800b80c <SetPageState+0x198>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	029a      	lsls	r2, r3, #10
 800b730:	23ff      	movs	r3, #255	; 0xff
 800b732:	029b      	lsls	r3, r3, #10
 800b734:	4013      	ands	r3, r2
 800b736:	434b      	muls	r3, r1
 800b738:	18e3      	adds	r3, r4, r3
 800b73a:	3310      	adds	r3, #16
 800b73c:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2280      	movs	r2, #128	; 0x80
 800b742:	0252      	lsls	r2, r2, #9
 800b744:	4694      	mov	ip, r2
 800b746:	4463      	add	r3, ip
 800b748:	02dc      	lsls	r4, r3, #11
 800b74a:	4b30      	ldr	r3, [pc, #192]	; (800b80c <SetPageState+0x198>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	029a      	lsls	r2, r3, #10
 800b750:	23ff      	movs	r3, #255	; 0xff
 800b752:	029b      	lsls	r3, r3, #10
 800b754:	4013      	ands	r3, r2
 800b756:	0019      	movs	r1, r3
 800b758:	23d4      	movs	r3, #212	; 0xd4
 800b75a:	0258      	lsls	r0, r3, #9
 800b75c:	f7f4 fcda 	bl	8000114 <__udivsi3>
 800b760:	0003      	movs	r3, r0
 800b762:	0019      	movs	r1, r3
 800b764:	4b29      	ldr	r3, [pc, #164]	; (800b80c <SetPageState+0x198>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	029a      	lsls	r2, r3, #10
 800b76a:	23ff      	movs	r3, #255	; 0xff
 800b76c:	029b      	lsls	r3, r3, #10
 800b76e:	4013      	ands	r3, r2
 800b770:	434b      	muls	r3, r1
 800b772:	18e3      	adds	r3, r4, r3
 800b774:	3318      	adds	r3, #24
 800b776:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 800b778:	1cfb      	adds	r3, r7, #3
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d030      	beq.n	800b7e2 <SetPageState+0x16e>
 800b780:	dc39      	bgt.n	800b7f6 <SetPageState+0x182>
 800b782:	2b03      	cmp	r3, #3
 800b784:	d023      	beq.n	800b7ce <SetPageState+0x15a>
 800b786:	dc36      	bgt.n	800b7f6 <SetPageState+0x182>
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d002      	beq.n	800b792 <SetPageState+0x11e>
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d00f      	beq.n	800b7b0 <SetPageState+0x13c>
        return EE_WRITE_ERROR;
      }
    }
    break;
  default:
    break;
 800b790:	e031      	b.n	800b7f6 <SetPageState+0x182>
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 800b792:	4a1f      	ldr	r2, [pc, #124]	; (800b810 <SetPageState+0x19c>)
 800b794:	4b1e      	ldr	r3, [pc, #120]	; (800b810 <SetPageState+0x19c>)
 800b796:	6979      	ldr	r1, [r7, #20]
 800b798:	0008      	movs	r0, r1
 800b79a:	f000 f8cb 	bl	800b934 <FI_WriteDoubleWord>
 800b79e:	1e03      	subs	r3, r0, #0
 800b7a0:	d001      	beq.n	800b7a6 <SetPageState+0x132>
        return EE_WRITE_ERROR;
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e02d      	b.n	800b802 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b1a      	ldr	r3, [pc, #104]	; (800b814 <SetPageState+0x1a0>)
 800b7ac:	701a      	strb	r2, [r3, #0]
    break;
 800b7ae:	e027      	b.n	800b800 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800b7b0:	4a17      	ldr	r2, [pc, #92]	; (800b810 <SetPageState+0x19c>)
 800b7b2:	4b17      	ldr	r3, [pc, #92]	; (800b810 <SetPageState+0x19c>)
 800b7b4:	6939      	ldr	r1, [r7, #16]
 800b7b6:	0008      	movs	r0, r1
 800b7b8:	f000 f8bc 	bl	800b934 <FI_WriteDoubleWord>
 800b7bc:	1e03      	subs	r3, r0, #0
 800b7be:	d001      	beq.n	800b7c4 <SetPageState+0x150>
        return EE_WRITE_ERROR;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e01e      	b.n	800b802 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	4b12      	ldr	r3, [pc, #72]	; (800b814 <SetPageState+0x1a0>)
 800b7ca:	701a      	strb	r2, [r3, #0]
    break;
 800b7cc:	e018      	b.n	800b800 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800b7ce:	4a10      	ldr	r2, [pc, #64]	; (800b810 <SetPageState+0x19c>)
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <SetPageState+0x19c>)
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	0008      	movs	r0, r1
 800b7d6:	f000 f8ad 	bl	800b934 <FI_WriteDoubleWord>
 800b7da:	1e03      	subs	r3, r0, #0
 800b7dc:	d00d      	beq.n	800b7fa <SetPageState+0x186>
        return EE_WRITE_ERROR;
 800b7de:	2302      	movs	r3, #2
 800b7e0:	e00f      	b.n	800b802 <SetPageState+0x18e>
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800b7e2:	4a0b      	ldr	r2, [pc, #44]	; (800b810 <SetPageState+0x19c>)
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <SetPageState+0x19c>)
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	0008      	movs	r0, r1
 800b7ea:	f000 f8a3 	bl	800b934 <FI_WriteDoubleWord>
 800b7ee:	1e03      	subs	r3, r0, #0
 800b7f0:	d005      	beq.n	800b7fe <SetPageState+0x18a>
        return EE_WRITE_ERROR;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	e005      	b.n	800b802 <SetPageState+0x18e>
    break;
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	e002      	b.n	800b800 <SetPageState+0x18c>
    break;
 800b7fa:	46c0      	nop			; (mov r8, r8)
 800b7fc:	e000      	b.n	800b800 <SetPageState+0x18c>
    break;
 800b7fe:	46c0      	nop			; (mov r8, r8)
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b007      	add	sp, #28
 800b808:	bd90      	pop	{r4, r7, pc}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	1fff75e0 	.word	0x1fff75e0
 800b810:	aaaaaaaa 	.word	0xaaaaaaaa
 800b814:	200001b6 	.word	0x200001b6

0800b818 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	623a      	str	r2, [r7, #32]
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	61ba      	str	r2, [r7, #24]
 800b82e:	61fb      	str	r3, [r7, #28]
 800b830:	2200      	movs	r2, #0
 800b832:	2300      	movs	r3, #0
 800b834:	613a      	str	r2, [r7, #16]
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	2200      	movs	r2, #0
 800b83a:	2300      	movs	r3, #0
 800b83c:	60ba      	str	r2, [r7, #8]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	623a      	str	r2, [r7, #32]
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3308      	adds	r3, #8
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	61ba      	str	r2, [r7, #24]
 800b854:	61fb      	str	r3, [r7, #28]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3310      	adds	r3, #16
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	613a      	str	r2, [r7, #16]
 800b860:	617b      	str	r3, [r7, #20]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3318      	adds	r3, #24
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	60ba      	str	r2, [r7, #8]
 800b86c:	60fb      	str	r3, [r7, #12]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	3301      	adds	r3, #1
 800b872:	d102      	bne.n	800b87a <GetPageState+0x62>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	d001      	beq.n	800b87e <GetPageState+0x66>
  {
    return STATE_PAGE_ERASING;
 800b87a:	2304      	movs	r3, #4
 800b87c:	e018      	b.n	800b8b0 <GetPageState+0x98>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	3301      	adds	r3, #1
 800b882:	d102      	bne.n	800b88a <GetPageState+0x72>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	3301      	adds	r3, #1
 800b888:	d001      	beq.n	800b88e <GetPageState+0x76>
  {
    return STATE_PAGE_VALID;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e010      	b.n	800b8b0 <GetPageState+0x98>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	3301      	adds	r3, #1
 800b892:	d102      	bne.n	800b89a <GetPageState+0x82>
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	3301      	adds	r3, #1
 800b898:	d001      	beq.n	800b89e <GetPageState+0x86>
  {
    return STATE_PAGE_ACTIVE;
 800b89a:	2302      	movs	r3, #2
 800b89c:	e008      	b.n	800b8b0 <GetPageState+0x98>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	d102      	bne.n	800b8aa <GetPageState+0x92>
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	d001      	beq.n	800b8ae <GetPageState+0x96>
  {
    return STATE_PAGE_RECEIVE;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <GetPageState+0x98>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	b00a      	add	sp, #40	; 0x28
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	015b      	lsls	r3, r3, #5
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f7fe f9db 	bl	8009c7c <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 800b8c6:	4a07      	ldr	r2, [pc, #28]	; (800b8e4 <ConfigureCrc+0x2c>)
 800b8c8:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <ConfigureCrc+0x30>)
 800b8ca:	0011      	movs	r1, r2
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f7fe f9a1 	bl	8009c14 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <ConfigureCrc+0x30>)
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	f7fe f98a 	bl	8009bf0 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800b8dc:	46c0      	nop			; (mov r8, r8)
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	46c0      	nop			; (mov r8, r8)
 800b8e4:	00008005 	.word	0x00008005
 800b8e8:	40023000 	.word	0x40023000

0800b8ec <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	000a      	movs	r2, r1
 800b8f6:	1cbb      	adds	r3, r7, #2
 800b8f8:	801a      	strh	r2, [r3, #0]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <CalculateCrc+0x44>)
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7fe f969 	bl	8009bd4 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <CalculateCrc+0x44>)
 800b906:	0019      	movs	r1, r3
 800b908:	0010      	movs	r0, r2
 800b90a:	f7fe f98f 	bl	8009c2c <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800b90e:	1cbb      	adds	r3, r7, #2
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	4a07      	ldr	r2, [pc, #28]	; (800b930 <CalculateCrc+0x44>)
 800b914:	0019      	movs	r1, r3
 800b916:	0010      	movs	r0, r2
 800b918:	f7fe f994 	bl	8009c44 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800b91c:	4b04      	ldr	r3, [pc, #16]	; (800b930 <CalculateCrc+0x44>)
 800b91e:	0018      	movs	r0, r3
 800b920:	f7fe f9a1 	bl	8009c66 <LL_CRC_ReadData16>
 800b924:	0003      	movs	r3, r0
}
 800b926:	0018      	movs	r0, r3
 800b928:	46bd      	mov	sp, r7
 800b92a:	b002      	add	sp, #8
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	40023000 	.word	0x40023000

0800b934 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	603a      	str	r2, [r7, #0]
 800b93e:	607b      	str	r3, [r7, #4]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	2001      	movs	r0, #1
 800b948:	f7f9 f800 	bl	800494c <HAL_FLASH_Program>
 800b94c:	0003      	movs	r3, r0
}
 800b94e:	0018      	movs	r0, r3
 800b950:	46bd      	mov	sp, r7
 800b952:	b004      	add	sp, #16
 800b954:	bd80      	pop	{r7, pc}

0800b956 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800b956:	b590      	push	{r4, r7, lr}
 800b958:	b089      	sub	sp, #36	; 0x24
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	000a      	movs	r2, r1
 800b960:	1cbb      	adds	r3, r7, #2
 800b962:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 800b964:	241e      	movs	r4, #30
 800b966:	193b      	adds	r3, r7, r4
 800b968:	2200      	movs	r2, #0
 800b96a:	801a      	strh	r2, [r3, #0]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	60bb      	str	r3, [r7, #8]
#ifdef FLASH_BANK_2
  uint32_t bank = GetBankNumber(PAGE_ADDRESS(Page));
  s_eraseinit.Banks       = bank;
#endif  
  
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800b970:	210c      	movs	r1, #12
 800b972:	187b      	adds	r3, r7, r1
 800b974:	2202      	movs	r2, #2
 800b976:	601a      	str	r2, [r3, #0]
  s_eraseinit.NbPages     = NbPages;
 800b978:	1cbb      	adds	r3, r7, #2
 800b97a:	881a      	ldrh	r2, [r3, #0]
 800b97c:	187b      	adds	r3, r7, r1
 800b97e:	60da      	str	r2, [r3, #12]
  s_eraseinit.Page        = Page;
 800b980:	187b      	adds	r3, r7, r1
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	609a      	str	r2, [r3, #8]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800b986:	2308      	movs	r3, #8
 800b988:	18fa      	adds	r2, r7, r3
 800b98a:	187b      	adds	r3, r7, r1
 800b98c:	0011      	movs	r1, r2
 800b98e:	0018      	movs	r0, r3
 800b990:	f7f9 f8d8 	bl	8004b44 <HAL_FLASHEx_Erase>
 800b994:	1e03      	subs	r3, r0, #0
 800b996:	d002      	beq.n	800b99e <FI_PageErase+0x48>
  {
    status = EE_ERASE_ERROR;
 800b998:	193b      	adds	r3, r7, r4
 800b99a:	2201      	movs	r2, #1
 800b99c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800b99e:	231e      	movs	r3, #30
 800b9a0:	18fb      	adds	r3, r7, r3
 800b9a2:	881b      	ldrh	r3, [r3, #0]
}
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b009      	add	sp, #36	; 0x24
 800b9aa:	bd90      	pop	{r4, r7, pc}

0800b9ac <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  /* No flush needed. There is no D-Cache for the STM32G0x0 and STM32G0x1 products. */
  return;
 800b9b0:	46c0      	nop			; (mov r8, r8)
}
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800b9ba:	2300      	movs	r3, #0
#endif
}
 800b9bc:	0018      	movs	r0, r3
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <HAL_GPIO_EXTI_Falling_Callback>:
#include "buttons.h"

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	0002      	movs	r2, r0
 800b9cc:	1dbb      	adds	r3, r7, #6
 800b9ce:	801a      	strh	r2, [r3, #0]

	flagClockConfig = 1;
 800b9d0:	4b7e      	ldr	r3, [pc, #504]	; (800bbcc <HAL_GPIO_EXTI_Falling_Callback+0x208>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	701a      	strb	r2, [r3, #0]

	//reset settings counter
	if (flagSettings == FLAG_SETTINGS_ON) {
 800b9d6:	4b7e      	ldr	r3, [pc, #504]	; (800bbd0 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d102      	bne.n	800b9e6 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counterSettings = SETTINGS_TIME;
 800b9e0:	4b7c      	ldr	r3, [pc, #496]	; (800bbd4 <HAL_GPIO_EXTI_Falling_Callback+0x210>)
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	701a      	strb	r2, [r3, #0]
	}

	//set full update flag, when both reset and set pin was pressed

	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 800b9e6:	23a0      	movs	r3, #160	; 0xa0
 800b9e8:	05db      	lsls	r3, r3, #23
 800b9ea:	2110      	movs	r1, #16
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f7f9 fab1 	bl	8004f54 <HAL_GPIO_ReadPin>
 800b9f2:	1e03      	subs	r3, r0, #0
 800b9f4:	d11b      	bne.n	800ba2e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 800b9f6:	23a0      	movs	r3, #160	; 0xa0
 800b9f8:	05db      	lsls	r3, r3, #23
 800b9fa:	2108      	movs	r1, #8
 800b9fc:	0018      	movs	r0, r3
 800b9fe:	f7f9 faa9 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ba02:	1e03      	subs	r3, r0, #0
 800ba04:	d113      	bne.n	800ba2e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1
 800ba06:	23a0      	movs	r3, #160	; 0xa0
 800ba08:	05db      	lsls	r3, r3, #23
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f7f9 faa1 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ba12:	0003      	movs	r3, r0
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d10a      	bne.n	800ba2e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
			&& flagLocked == UNLOCKED) {
 800ba18:	4b6f      	ldr	r3, [pc, #444]	; (800bbd8 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d105      	bne.n	800ba2e <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		flagInterfaceFullUpdate = 1;
 800ba22:	4b6e      	ldr	r3, [pc, #440]	; (800bbdc <HAL_GPIO_EXTI_Falling_Callback+0x218>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
		flashWriteFlag = 1;
 800ba28:	4b6d      	ldr	r3, [pc, #436]	; (800bbe0 <HAL_GPIO_EXTI_Falling_Callback+0x21c>)
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
	}

	//lock watch when underwater
	if (HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0
 800ba2e:	23a0      	movs	r3, #160	; 0xa0
 800ba30:	05db      	lsls	r3, r3, #23
 800ba32:	2110      	movs	r1, #16
 800ba34:	0018      	movs	r0, r3
 800ba36:	f7f9 fa8d 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ba3a:	1e03      	subs	r3, r0, #0
 800ba3c:	d152      	bne.n	800bae4 <HAL_GPIO_EXTI_Falling_Callback+0x120>
			&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 0
 800ba3e:	23a0      	movs	r3, #160	; 0xa0
 800ba40:	05db      	lsls	r3, r3, #23
 800ba42:	2108      	movs	r1, #8
 800ba44:	0018      	movs	r0, r3
 800ba46:	f7f9 fa85 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ba4a:	1e03      	subs	r3, r0, #0
 800ba4c:	d14a      	bne.n	800bae4 <HAL_GPIO_EXTI_Falling_Callback+0x120>
			&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 0) {
 800ba4e:	23a0      	movs	r3, #160	; 0xa0
 800ba50:	05db      	lsls	r3, r3, #23
 800ba52:	2104      	movs	r1, #4
 800ba54:	0018      	movs	r0, r3
 800ba56:	f7f9 fa7d 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ba5a:	1e03      	subs	r3, r0, #0
 800ba5c:	d142      	bne.n	800bae4 <HAL_GPIO_EXTI_Falling_Callback+0x120>
		flagLocked = LOCKED;
 800ba5e:	4b5e      	ldr	r3, [pc, #376]	; (800bbd8 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	701a      	strb	r2, [r3, #0]
		flagSettings = FLAG_SETTINGS_OFF;
 800ba64:	4b5a      	ldr	r3, [pc, #360]	; (800bbd0 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]

		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800ba6a:	4b5e      	ldr	r3, [pc, #376]	; (800bbe4 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d006      	beq.n	800ba82 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
 800ba74:	4b5b      	ldr	r3, [pc, #364]	; (800bbe4 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d001      	beq.n	800ba82 <HAL_GPIO_EXTI_Falling_Callback+0xbe>
 800ba7e:	f000 fce9 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800ba82:	4b59      	ldr	r3, [pc, #356]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_GPIO_EXTI_Falling_Callback+0xcc>
 800ba8c:	f000 fce2 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
				&& chrono.month == 0 && chrono.day == 0 && chrono.hour == 0
 800ba90:	4b55      	ldr	r3, [pc, #340]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	b25b      	sxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <HAL_GPIO_EXTI_Falling_Callback+0xda>
 800ba9a:	f000 fcdb 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800ba9e:	4b52      	ldr	r3, [pc, #328]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800baa0:	789b      	ldrb	r3, [r3, #2]
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <HAL_GPIO_EXTI_Falling_Callback+0xe8>
 800baa8:	f000 fcd4 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800baac:	4b4e      	ldr	r3, [pc, #312]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800baae:	78db      	ldrb	r3, [r3, #3]
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <HAL_GPIO_EXTI_Falling_Callback+0xf6>
 800bab6:	f000 fccd 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
				&& chrono.minute == 0 && chrono.second < 5) {
 800baba:	4b4b      	ldr	r3, [pc, #300]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800babc:	791b      	ldrb	r3, [r3, #4]
 800babe:	b25b      	sxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <HAL_GPIO_EXTI_Falling_Callback+0x104>
 800bac4:	f000 fcc6 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
 800bac8:	4b47      	ldr	r3, [pc, #284]	; (800bbe8 <HAL_GPIO_EXTI_Falling_Callback+0x224>)
 800baca:	795b      	ldrb	r3, [r3, #5]
 800bacc:	b25b      	sxtb	r3, r3
 800bace:	2b04      	cmp	r3, #4
 800bad0:	dd01      	ble.n	800bad6 <HAL_GPIO_EXTI_Falling_Callback+0x112>
 800bad2:	f000 fcbf 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>
			mode = MODE_NORMAL;
 800bad6:	4b43      	ldr	r3, [pc, #268]	; (800bbe4 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
			rtcResetChrono();
 800badc:	f005 f8a2 	bl	8010c24 <rtcResetChrono>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800bae0:	f000 fcb8 	bl	800c454 <HAL_GPIO_EXTI_Falling_Callback+0xa90>

		}

	} else {

		flagDontSleep = 1;
 800bae4:	4b41      	ldr	r3, [pc, #260]	; (800bbec <HAL_GPIO_EXTI_Falling_Callback+0x228>)
 800bae6:	2201      	movs	r2, #1
 800bae8:	701a      	strb	r2, [r3, #0]

		//										START BUTTON
		if (GPIO_Pin == START_Pin
 800baea:	1dbb      	adds	r3, r7, #6
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d001      	beq.n	800baf6 <HAL_GPIO_EXTI_Falling_Callback+0x132>
 800baf2:	f000 fbbd 	bl	800c270 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 800baf6:	23a0      	movs	r3, #160	; 0xa0
 800baf8:	05db      	lsls	r3, r3, #23
 800bafa:	2104      	movs	r1, #4
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7f9 fa29 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bb02:	1e03      	subs	r3, r0, #0
 800bb04:	d001      	beq.n	800bb0a <HAL_GPIO_EXTI_Falling_Callback+0x146>
 800bb06:	f000 fbb3 	bl	800c270 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800bb0a:	23a0      	movs	r3, #160	; 0xa0
 800bb0c:	05db      	lsls	r3, r3, #23
 800bb0e:	2110      	movs	r1, #16
 800bb10:	0018      	movs	r0, r3
 800bb12:	f7f9 fa1f 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bb16:	0003      	movs	r3, r0
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d001      	beq.n	800bb20 <HAL_GPIO_EXTI_Falling_Callback+0x15c>
 800bb1c:	f000 fba8 	bl	800c270 <HAL_GPIO_EXTI_Falling_Callback+0x8ac>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800bb20:	4b2d      	ldr	r3, [pc, #180]	; (800bbd8 <HAL_GPIO_EXTI_Falling_Callback+0x214>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <HAL_GPIO_EXTI_Falling_Callback+0x16a>
 800bb2a:	f000 fc95 	bl	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

				if (flagSettings == FLAG_SETTINGS_OFF) {
 800bb2e:	4b28      	ldr	r3, [pc, #160]	; (800bbd0 <HAL_GPIO_EXTI_Falling_Callback+0x20c>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d000      	beq.n	800bb3a <HAL_GPIO_EXTI_Falling_Callback+0x176>
 800bb38:	e19e      	b.n	800be78 <HAL_GPIO_EXTI_Falling_Callback+0x4b4>

					if (mode == MODE_NORMAL) { // start chrono if mode is set as normal
 800bb3a:	4b2a      	ldr	r3, [pc, #168]	; (800bbe4 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d161      	bne.n	800bc08 <HAL_GPIO_EXTI_Falling_Callback+0x244>

						HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bb44:	492a      	ldr	r1, [pc, #168]	; (800bbf0 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bb46:	4b2b      	ldr	r3, [pc, #172]	; (800bbf4 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	0018      	movs	r0, r3
 800bb4c:	f7fa ffea 	bl	8006b24 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bb50:	4929      	ldr	r1, [pc, #164]	; (800bbf8 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bb52:	4b28      	ldr	r3, [pc, #160]	; (800bbf4 <HAL_GPIO_EXTI_Falling_Callback+0x230>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	0018      	movs	r0, r3
 800bb58:	f7fb f8d2 	bl	8006d00 <HAL_RTC_GetDate>

						chronoStart.second = Time.Seconds;
 800bb5c:	4b24      	ldr	r3, [pc, #144]	; (800bbf0 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bb5e:	789b      	ldrb	r3, [r3, #2]
 800bb60:	b25a      	sxtb	r2, r3
 800bb62:	4b26      	ldr	r3, [pc, #152]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bb64:	715a      	strb	r2, [r3, #5]
						chronoStart.minute = Time.Minutes;
 800bb66:	4b22      	ldr	r3, [pc, #136]	; (800bbf0 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bb68:	785b      	ldrb	r3, [r3, #1]
 800bb6a:	b25a      	sxtb	r2, r3
 800bb6c:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bb6e:	711a      	strb	r2, [r3, #4]
						chronoStart.decimal = (((255 - Time.SubSeconds) * 100)
 800bb70:	4b1f      	ldr	r3, [pc, #124]	; (800bbf0 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	0013      	movs	r3, r2
 800bb76:	065b      	lsls	r3, r3, #25
 800bb78:	1a9b      	subs	r3, r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	189b      	adds	r3, r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	1a9b      	subs	r3, r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4a1e      	ldr	r2, [pc, #120]	; (800bc00 <HAL_GPIO_EXTI_Falling_Callback+0x23c>)
 800bb86:	4694      	mov	ip, r2
 800bb88:	4463      	add	r3, ip
								/ 255) / 10;
 800bb8a:	491e      	ldr	r1, [pc, #120]	; (800bc04 <HAL_GPIO_EXTI_Falling_Callback+0x240>)
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f7f4 fac1 	bl	8000114 <__udivsi3>
 800bb92:	0003      	movs	r3, r0
						chronoStart.decimal = (((255 - Time.SubSeconds) * 100)
 800bb94:	b25a      	sxtb	r2, r3
 800bb96:	4b19      	ldr	r3, [pc, #100]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bb98:	719a      	strb	r2, [r3, #6]
						chronoStart.hour = Time.Hours;
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <HAL_GPIO_EXTI_Falling_Callback+0x22c>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	b25a      	sxtb	r2, r3
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bba2:	70da      	strb	r2, [r3, #3]
						chronoStart.day = Date.Date;
 800bba4:	4b14      	ldr	r3, [pc, #80]	; (800bbf8 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bba6:	789b      	ldrb	r3, [r3, #2]
 800bba8:	b25a      	sxtb	r2, r3
 800bbaa:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bbac:	709a      	strb	r2, [r3, #2]
						chronoStart.month = Date.Month;
 800bbae:	4b12      	ldr	r3, [pc, #72]	; (800bbf8 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	b25a      	sxtb	r2, r3
 800bbb4:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bbb6:	705a      	strb	r2, [r3, #1]
						chronoStart.year = Date.Year;
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <HAL_GPIO_EXTI_Falling_Callback+0x234>)
 800bbba:	78db      	ldrb	r3, [r3, #3]
 800bbbc:	b25a      	sxtb	r2, r3
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <HAL_GPIO_EXTI_Falling_Callback+0x238>)
 800bbc0:	701a      	strb	r2, [r3, #0]

						mode = MODE_CHRONO;
 800bbc2:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <HAL_GPIO_EXTI_Falling_Callback+0x220>)
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800bbc8:	f000 fc46 	bl	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>
 800bbcc:	20000618 	.word	0x20000618
 800bbd0:	2000058e 	.word	0x2000058e
 800bbd4:	20000694 	.word	0x20000694
 800bbd8:	200004c2 	.word	0x200004c2
 800bbdc:	2000069e 	.word	0x2000069e
 800bbe0:	20000643 	.word	0x20000643
 800bbe4:	200004c3 	.word	0x200004c3
 800bbe8:	20000444 	.word	0x20000444
 800bbec:	200006d9 	.word	0x200006d9
 800bbf0:	200006c4 	.word	0x200006c4
 800bbf4:	20000770 	.word	0x20000770
 800bbf8:	2000044c 	.word	0x2000044c
 800bbfc:	200004b8 	.word	0x200004b8
 800bc00:	0000639c 	.word	0x0000639c
 800bc04:	000009f6 	.word	0x000009f6
					}

					else if (mode == MODE_CHRONO) { //stop chrono if chrono is working
 800bc08:	4bdf      	ldr	r3, [pc, #892]	; (800bf88 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d000      	beq.n	800bc14 <HAL_GPIO_EXTI_Falling_Callback+0x250>
 800bc12:	e127      	b.n	800be64 <HAL_GPIO_EXTI_Falling_Callback+0x4a0>

						HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bc14:	49dd      	ldr	r1, [pc, #884]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bc16:	4bde      	ldr	r3, [pc, #888]	; (800bf90 <HAL_GPIO_EXTI_Falling_Callback+0x5cc>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	f7fa ff82 	bl	8006b24 <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bc20:	49dc      	ldr	r1, [pc, #880]	; (800bf94 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bc22:	4bdb      	ldr	r3, [pc, #876]	; (800bf90 <HAL_GPIO_EXTI_Falling_Callback+0x5cc>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	0018      	movs	r0, r3
 800bc28:	f7fb f86a 	bl	8006d00 <HAL_RTC_GetDate>

						actual.minute = Time.Minutes;
 800bc2c:	4bd7      	ldr	r3, [pc, #860]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bc2e:	785b      	ldrb	r3, [r3, #1]
 800bc30:	b25a      	sxtb	r2, r3
 800bc32:	4bd9      	ldr	r3, [pc, #868]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc34:	711a      	strb	r2, [r3, #4]
						actual.second = Time.Seconds;
 800bc36:	4bd5      	ldr	r3, [pc, #852]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bc38:	789b      	ldrb	r3, [r3, #2]
 800bc3a:	b25a      	sxtb	r2, r3
 800bc3c:	4bd6      	ldr	r3, [pc, #856]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc3e:	715a      	strb	r2, [r3, #5]
						actual.decimal = (((255 - Time.SubSeconds) * 100) / 255)
 800bc40:	4bd2      	ldr	r3, [pc, #840]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	0013      	movs	r3, r2
 800bc46:	065b      	lsls	r3, r3, #25
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	189b      	adds	r3, r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	1a9b      	subs	r3, r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4ad1      	ldr	r2, [pc, #836]	; (800bf9c <HAL_GPIO_EXTI_Falling_Callback+0x5d8>)
 800bc56:	4694      	mov	ip, r2
 800bc58:	4463      	add	r3, ip
								/ 10;
 800bc5a:	49d1      	ldr	r1, [pc, #836]	; (800bfa0 <HAL_GPIO_EXTI_Falling_Callback+0x5dc>)
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f7f4 fa59 	bl	8000114 <__udivsi3>
 800bc62:	0003      	movs	r3, r0
						actual.decimal = (((255 - Time.SubSeconds) * 100) / 255)
 800bc64:	b25a      	sxtb	r2, r3
 800bc66:	4bcc      	ldr	r3, [pc, #816]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc68:	719a      	strb	r2, [r3, #6]
						actual.hour = Time.Hours;
 800bc6a:	4bc8      	ldr	r3, [pc, #800]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b25a      	sxtb	r2, r3
 800bc70:	4bc9      	ldr	r3, [pc, #804]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc72:	70da      	strb	r2, [r3, #3]
						actual.day = Date.Date;
 800bc74:	4bc7      	ldr	r3, [pc, #796]	; (800bf94 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bc76:	789b      	ldrb	r3, [r3, #2]
 800bc78:	b25a      	sxtb	r2, r3
 800bc7a:	4bc7      	ldr	r3, [pc, #796]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc7c:	709a      	strb	r2, [r3, #2]
						actual.month = Date.Month;
 800bc7e:	4bc5      	ldr	r3, [pc, #788]	; (800bf94 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bc80:	785b      	ldrb	r3, [r3, #1]
 800bc82:	b25a      	sxtb	r2, r3
 800bc84:	4bc4      	ldr	r3, [pc, #784]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc86:	705a      	strb	r2, [r3, #1]
						actual.year = Date.Year;
 800bc88:	4bc2      	ldr	r3, [pc, #776]	; (800bf94 <HAL_GPIO_EXTI_Falling_Callback+0x5d0>)
 800bc8a:	78db      	ldrb	r3, [r3, #3]
 800bc8c:	b25a      	sxtb	r2, r3
 800bc8e:	4bc2      	ldr	r3, [pc, #776]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc90:	701a      	strb	r2, [r3, #0]

						chrono.decimal = actual.decimal - chronoStart.decimal;
 800bc92:	4bc1      	ldr	r3, [pc, #772]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bc94:	799b      	ldrb	r3, [r3, #6]
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	4bc2      	ldr	r3, [pc, #776]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bc9c:	799b      	ldrb	r3, [r3, #6]
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	b25a      	sxtb	r2, r3
 800bca8:	4bbf      	ldr	r3, [pc, #764]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bcaa:	719a      	strb	r2, [r3, #6]
						chrono.second = actual.second - chronoStart.second;
 800bcac:	4bba      	ldr	r3, [pc, #744]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bcae:	795b      	ldrb	r3, [r3, #5]
 800bcb0:	b25b      	sxtb	r3, r3
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	4bbb      	ldr	r3, [pc, #748]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bcb6:	795b      	ldrb	r3, [r3, #5]
 800bcb8:	b25b      	sxtb	r3, r3
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	b25a      	sxtb	r2, r3
 800bcc2:	4bb9      	ldr	r3, [pc, #740]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bcc4:	715a      	strb	r2, [r3, #5]
						chrono.minute = actual.minute - chronoStart.minute;
 800bcc6:	4bb4      	ldr	r3, [pc, #720]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bcc8:	791b      	ldrb	r3, [r3, #4]
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	4bb5      	ldr	r3, [pc, #724]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bcd0:	791b      	ldrb	r3, [r3, #4]
 800bcd2:	b25b      	sxtb	r3, r3
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	b25a      	sxtb	r2, r3
 800bcdc:	4bb2      	ldr	r3, [pc, #712]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bcde:	711a      	strb	r2, [r3, #4]
						chrono.hour = actual.hour - chronoStart.hour;
 800bce0:	4bad      	ldr	r3, [pc, #692]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bce2:	78db      	ldrb	r3, [r3, #3]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	4bae      	ldr	r3, [pc, #696]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bcea:	78db      	ldrb	r3, [r3, #3]
 800bcec:	b25b      	sxtb	r3, r3
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	b25a      	sxtb	r2, r3
 800bcf6:	4bac      	ldr	r3, [pc, #688]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bcf8:	70da      	strb	r2, [r3, #3]
						chrono.day = actual.day - chronoStart.day;
 800bcfa:	4ba7      	ldr	r3, [pc, #668]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bcfc:	789b      	ldrb	r3, [r3, #2]
 800bcfe:	b25b      	sxtb	r3, r3
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	4ba8      	ldr	r3, [pc, #672]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bd04:	789b      	ldrb	r3, [r3, #2]
 800bd06:	b25b      	sxtb	r3, r3
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	b25a      	sxtb	r2, r3
 800bd10:	4ba5      	ldr	r3, [pc, #660]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd12:	709a      	strb	r2, [r3, #2]
						chrono.month = actual.month - chronoStart.month;
 800bd14:	4ba0      	ldr	r3, [pc, #640]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bd16:	785b      	ldrb	r3, [r3, #1]
 800bd18:	b25b      	sxtb	r3, r3
 800bd1a:	b2da      	uxtb	r2, r3
 800bd1c:	4ba1      	ldr	r3, [pc, #644]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bd1e:	785b      	ldrb	r3, [r3, #1]
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	b25a      	sxtb	r2, r3
 800bd2a:	4b9f      	ldr	r3, [pc, #636]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd2c:	705a      	strb	r2, [r3, #1]
						chrono.year = actual.year - chronoStart.year;
 800bd2e:	4b9a      	ldr	r3, [pc, #616]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	4b9b      	ldr	r3, [pc, #620]	; (800bfa4 <HAL_GPIO_EXTI_Falling_Callback+0x5e0>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	b25b      	sxtb	r3, r3
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	b25a      	sxtb	r2, r3
 800bd44:	4b98      	ldr	r3, [pc, #608]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd46:	701a      	strb	r2, [r3, #0]

						if (chrono.decimal < 0) {
 800bd48:	4b97      	ldr	r3, [pc, #604]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd4a:	799b      	ldrb	r3, [r3, #6]
 800bd4c:	b25b      	sxtb	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	da11      	bge.n	800bd76 <HAL_GPIO_EXTI_Falling_Callback+0x3b2>
							chrono.second--;
 800bd52:	4b95      	ldr	r3, [pc, #596]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd54:	795b      	ldrb	r3, [r3, #5]
 800bd56:	b25b      	sxtb	r3, r3
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	b25a      	sxtb	r2, r3
 800bd60:	4b91      	ldr	r3, [pc, #580]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd62:	715a      	strb	r2, [r3, #5]
							chrono.decimal = chrono.decimal + 10;
 800bd64:	4b90      	ldr	r3, [pc, #576]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd66:	799b      	ldrb	r3, [r3, #6]
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	330a      	adds	r3, #10
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	b25a      	sxtb	r2, r3
 800bd72:	4b8d      	ldr	r3, [pc, #564]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd74:	719a      	strb	r2, [r3, #6]
						}

						if (chrono.second < 0) {
 800bd76:	4b8c      	ldr	r3, [pc, #560]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd78:	795b      	ldrb	r3, [r3, #5]
 800bd7a:	b25b      	sxtb	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	da11      	bge.n	800bda4 <HAL_GPIO_EXTI_Falling_Callback+0x3e0>
							chrono.minute--;
 800bd80:	4b89      	ldr	r3, [pc, #548]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	b25b      	sxtb	r3, r3
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	b25a      	sxtb	r2, r3
 800bd8e:	4b86      	ldr	r3, [pc, #536]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd90:	711a      	strb	r2, [r3, #4]
							chrono.second = chrono.second + 60;
 800bd92:	4b85      	ldr	r3, [pc, #532]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bd94:	795b      	ldrb	r3, [r3, #5]
 800bd96:	b25b      	sxtb	r3, r3
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	333c      	adds	r3, #60	; 0x3c
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	b25a      	sxtb	r2, r3
 800bda0:	4b81      	ldr	r3, [pc, #516]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bda2:	715a      	strb	r2, [r3, #5]
						}

						if (chrono.minute < 0) {
 800bda4:	4b80      	ldr	r3, [pc, #512]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bda6:	791b      	ldrb	r3, [r3, #4]
 800bda8:	b25b      	sxtb	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da11      	bge.n	800bdd2 <HAL_GPIO_EXTI_Falling_Callback+0x40e>
							chrono.hour--;
 800bdae:	4b7e      	ldr	r3, [pc, #504]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdb0:	78db      	ldrb	r3, [r3, #3]
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	b25a      	sxtb	r2, r3
 800bdbc:	4b7a      	ldr	r3, [pc, #488]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdbe:	70da      	strb	r2, [r3, #3]
							chrono.minute = chrono.minute + 60;
 800bdc0:	4b79      	ldr	r3, [pc, #484]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdc2:	791b      	ldrb	r3, [r3, #4]
 800bdc4:	b25b      	sxtb	r3, r3
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	333c      	adds	r3, #60	; 0x3c
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	b25a      	sxtb	r2, r3
 800bdce:	4b76      	ldr	r3, [pc, #472]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdd0:	711a      	strb	r2, [r3, #4]
						}

						if (chrono.hour < 0) {
 800bdd2:	4b75      	ldr	r3, [pc, #468]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdd4:	78db      	ldrb	r3, [r3, #3]
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	da11      	bge.n	800be00 <HAL_GPIO_EXTI_Falling_Callback+0x43c>
							chrono.day--;
 800bddc:	4b72      	ldr	r3, [pc, #456]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdde:	789b      	ldrb	r3, [r3, #2]
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	3b01      	subs	r3, #1
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	b25a      	sxtb	r2, r3
 800bdea:	4b6f      	ldr	r3, [pc, #444]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdec:	709a      	strb	r2, [r3, #2]
							chrono.hour = chrono.hour + 24;
 800bdee:	4b6e      	ldr	r3, [pc, #440]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdf0:	78db      	ldrb	r3, [r3, #3]
 800bdf2:	b25b      	sxtb	r3, r3
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	3318      	adds	r3, #24
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	b25a      	sxtb	r2, r3
 800bdfc:	4b6a      	ldr	r3, [pc, #424]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800bdfe:	70da      	strb	r2, [r3, #3]
						}

						if (chrono.day < 0) {
 800be00:	4b69      	ldr	r3, [pc, #420]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be02:	789b      	ldrb	r3, [r3, #2]
 800be04:	b25b      	sxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	da11      	bge.n	800be2e <HAL_GPIO_EXTI_Falling_Callback+0x46a>
							chrono.month--;
 800be0a:	4b67      	ldr	r3, [pc, #412]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	b25b      	sxtb	r3, r3
 800be10:	b2db      	uxtb	r3, r3
 800be12:	3b01      	subs	r3, #1
 800be14:	b2db      	uxtb	r3, r3
 800be16:	b25a      	sxtb	r2, r3
 800be18:	4b63      	ldr	r3, [pc, #396]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be1a:	705a      	strb	r2, [r3, #1]
							chrono.day = chrono.day + 30;
 800be1c:	4b62      	ldr	r3, [pc, #392]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be1e:	789b      	ldrb	r3, [r3, #2]
 800be20:	b25b      	sxtb	r3, r3
 800be22:	b2db      	uxtb	r3, r3
 800be24:	331e      	adds	r3, #30
 800be26:	b2db      	uxtb	r3, r3
 800be28:	b25a      	sxtb	r2, r3
 800be2a:	4b5f      	ldr	r3, [pc, #380]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be2c:	709a      	strb	r2, [r3, #2]
						}

						if (chrono.month < 0) {
 800be2e:	4b5e      	ldr	r3, [pc, #376]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be30:	785b      	ldrb	r3, [r3, #1]
 800be32:	b25b      	sxtb	r3, r3
 800be34:	2b00      	cmp	r3, #0
 800be36:	da11      	bge.n	800be5c <HAL_GPIO_EXTI_Falling_Callback+0x498>
							chrono.year--;
 800be38:	4b5b      	ldr	r3, [pc, #364]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	b25b      	sxtb	r3, r3
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	3b01      	subs	r3, #1
 800be42:	b2db      	uxtb	r3, r3
 800be44:	b25a      	sxtb	r2, r3
 800be46:	4b58      	ldr	r3, [pc, #352]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be48:	701a      	strb	r2, [r3, #0]
							chrono.month = chrono.month + 12;
 800be4a:	4b57      	ldr	r3, [pc, #348]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	b25b      	sxtb	r3, r3
 800be50:	b2db      	uxtb	r3, r3
 800be52:	330c      	adds	r3, #12
 800be54:	b2db      	uxtb	r3, r3
 800be56:	b25a      	sxtb	r2, r3
 800be58:	4b53      	ldr	r3, [pc, #332]	; (800bfa8 <HAL_GPIO_EXTI_Falling_Callback+0x5e4>)
 800be5a:	705a      	strb	r2, [r3, #1]
						}

						mode = MODE_STOP;
 800be5c:	4b4a      	ldr	r3, [pc, #296]	; (800bf88 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800be5e:	2202      	movs	r2, #2
 800be60:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800be62:	e2f9      	b.n	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

					}

					else if (mode == MODE_STOP) { //start chrono if was stopped
 800be64:	4b48      	ldr	r3, [pc, #288]	; (800bf88 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d000      	beq.n	800be70 <HAL_GPIO_EXTI_Falling_Callback+0x4ac>
 800be6e:	e2f3      	b.n	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

						mode = MODE_CHRONO;
 800be70:	4b45      	ldr	r3, [pc, #276]	; (800bf88 <HAL_GPIO_EXTI_Falling_Callback+0x5c4>)
 800be72:	2201      	movs	r2, #1
 800be74:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800be76:	e2ef      	b.n	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

					}

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800be78:	4b4c      	ldr	r3, [pc, #304]	; (800bfac <HAL_GPIO_EXTI_Falling_Callback+0x5e8>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d000      	beq.n	800be84 <HAL_GPIO_EXTI_Falling_Callback+0x4c0>
 800be82:	e2e9      	b.n	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>
					// if start was pressed in settings, add value
					switch (settingsPointer) {
 800be84:	4b4a      	ldr	r3, [pc, #296]	; (800bfb0 <HAL_GPIO_EXTI_Falling_Callback+0x5ec>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b0a      	cmp	r3, #10
 800be8c:	d900      	bls.n	800be90 <HAL_GPIO_EXTI_Falling_Callback+0x4cc>
 800be8e:	e1ec      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
 800be90:	009a      	lsls	r2, r3, #2
 800be92:	4b48      	ldr	r3, [pc, #288]	; (800bfb4 <HAL_GPIO_EXTI_Falling_Callback+0x5f0>)
 800be94:	18d3      	adds	r3, r2, r3
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	469f      	mov	pc, r3
					case SETTINGS_HOURS:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800be9a:	23a0      	movs	r3, #160	; 0xa0
 800be9c:	05db      	lsls	r3, r3, #23
 800be9e:	2108      	movs	r1, #8
 800bea0:	0018      	movs	r0, r3
 800bea2:	f7f9 f857 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bea6:	0003      	movs	r3, r0
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d112      	bne.n	800bed2 <HAL_GPIO_EXTI_Falling_Callback+0x50e>
							actual.hour++;
 800beac:	4b3a      	ldr	r3, [pc, #232]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800beae:	78db      	ldrb	r3, [r3, #3]
 800beb0:	b25b      	sxtb	r3, r3
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	3301      	adds	r3, #1
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	b25a      	sxtb	r2, r3
 800beba:	4b37      	ldr	r3, [pc, #220]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bebc:	70da      	strb	r2, [r3, #3]
							if (actual.hour > 23)
 800bebe:	4b36      	ldr	r3, [pc, #216]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bec0:	78db      	ldrb	r3, [r3, #3]
 800bec2:	b25b      	sxtb	r3, r3
 800bec4:	2b17      	cmp	r3, #23
 800bec6:	dc00      	bgt.n	800beca <HAL_GPIO_EXTI_Falling_Callback+0x506>
 800bec8:	e1be      	b.n	800c248 <HAL_GPIO_EXTI_Falling_Callback+0x884>
								actual.hour = 0;
 800beca:	4b33      	ldr	r3, [pc, #204]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800becc:	2200      	movs	r2, #0
 800bece:	70da      	strb	r2, [r3, #3]
							if (actual.hour < 0)
								actual.hour = 23;

						}

						break;
 800bed0:	e1ba      	b.n	800c248 <HAL_GPIO_EXTI_Falling_Callback+0x884>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800bed2:	23a0      	movs	r3, #160	; 0xa0
 800bed4:	05db      	lsls	r3, r3, #23
 800bed6:	2108      	movs	r1, #8
 800bed8:	0018      	movs	r0, r3
 800beda:	f7f9 f83b 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bede:	1e03      	subs	r3, r0, #0
 800bee0:	d000      	beq.n	800bee4 <HAL_GPIO_EXTI_Falling_Callback+0x520>
 800bee2:	e1b1      	b.n	800c248 <HAL_GPIO_EXTI_Falling_Callback+0x884>
							actual.hour--;
 800bee4:	4b2c      	ldr	r3, [pc, #176]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bee6:	78db      	ldrb	r3, [r3, #3]
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	b2db      	uxtb	r3, r3
 800beec:	3b01      	subs	r3, #1
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	b25a      	sxtb	r2, r3
 800bef2:	4b29      	ldr	r3, [pc, #164]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bef4:	70da      	strb	r2, [r3, #3]
							if (actual.hour < 0)
 800bef6:	4b28      	ldr	r3, [pc, #160]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bef8:	78db      	ldrb	r3, [r3, #3]
 800befa:	b25b      	sxtb	r3, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	db00      	blt.n	800bf02 <HAL_GPIO_EXTI_Falling_Callback+0x53e>
 800bf00:	e1a2      	b.n	800c248 <HAL_GPIO_EXTI_Falling_Callback+0x884>
								actual.hour = 23;
 800bf02:	4b25      	ldr	r3, [pc, #148]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf04:	2217      	movs	r2, #23
 800bf06:	70da      	strb	r2, [r3, #3]
						break;
 800bf08:	e19e      	b.n	800c248 <HAL_GPIO_EXTI_Falling_Callback+0x884>

					case SETTINGS_MINUTES:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800bf0a:	23a0      	movs	r3, #160	; 0xa0
 800bf0c:	05db      	lsls	r3, r3, #23
 800bf0e:	2108      	movs	r1, #8
 800bf10:	0018      	movs	r0, r3
 800bf12:	f7f9 f81f 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bf16:	0003      	movs	r3, r0
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d112      	bne.n	800bf42 <HAL_GPIO_EXTI_Falling_Callback+0x57e>
							actual.minute++;
 800bf1c:	4b1e      	ldr	r3, [pc, #120]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf1e:	791b      	ldrb	r3, [r3, #4]
 800bf20:	b25b      	sxtb	r3, r3
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	3301      	adds	r3, #1
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	b25a      	sxtb	r2, r3
 800bf2a:	4b1b      	ldr	r3, [pc, #108]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf2c:	711a      	strb	r2, [r3, #4]
							if (actual.minute > 59)
 800bf2e:	4b1a      	ldr	r3, [pc, #104]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf30:	791b      	ldrb	r3, [r3, #4]
 800bf32:	b25b      	sxtb	r3, r3
 800bf34:	2b3b      	cmp	r3, #59	; 0x3b
 800bf36:	dc00      	bgt.n	800bf3a <HAL_GPIO_EXTI_Falling_Callback+0x576>
 800bf38:	e188      	b.n	800c24c <HAL_GPIO_EXTI_Falling_Callback+0x888>
								actual.minute = 0;
 800bf3a:	4b17      	ldr	r3, [pc, #92]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	711a      	strb	r2, [r3, #4]
								== 0) {
							actual.minute--;
							if (actual.minute < 0)
								actual.minute = 59;
						}
						break;
 800bf40:	e184      	b.n	800c24c <HAL_GPIO_EXTI_Falling_Callback+0x888>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800bf42:	23a0      	movs	r3, #160	; 0xa0
 800bf44:	05db      	lsls	r3, r3, #23
 800bf46:	2108      	movs	r1, #8
 800bf48:	0018      	movs	r0, r3
 800bf4a:	f7f9 f803 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bf4e:	1e03      	subs	r3, r0, #0
 800bf50:	d000      	beq.n	800bf54 <HAL_GPIO_EXTI_Falling_Callback+0x590>
 800bf52:	e17b      	b.n	800c24c <HAL_GPIO_EXTI_Falling_Callback+0x888>
							actual.minute--;
 800bf54:	4b10      	ldr	r3, [pc, #64]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf56:	791b      	ldrb	r3, [r3, #4]
 800bf58:	b25b      	sxtb	r3, r3
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	b25a      	sxtb	r2, r3
 800bf62:	4b0d      	ldr	r3, [pc, #52]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf64:	711a      	strb	r2, [r3, #4]
							if (actual.minute < 0)
 800bf66:	4b0c      	ldr	r3, [pc, #48]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf68:	791b      	ldrb	r3, [r3, #4]
 800bf6a:	b25b      	sxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	db00      	blt.n	800bf72 <HAL_GPIO_EXTI_Falling_Callback+0x5ae>
 800bf70:	e16c      	b.n	800c24c <HAL_GPIO_EXTI_Falling_Callback+0x888>
								actual.minute = 59;
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf74:	223b      	movs	r2, #59	; 0x3b
 800bf76:	711a      	strb	r2, [r3, #4]
						break;
 800bf78:	e168      	b.n	800c24c <HAL_GPIO_EXTI_Falling_Callback+0x888>

					case SETTINGS_SECONDS:
						actual.second = 0;
 800bf7a:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x5d4>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	715a      	strb	r2, [r3, #5]
						Time.SubSeconds = 0;
 800bf80:	4b02      	ldr	r3, [pc, #8]	; (800bf8c <HAL_GPIO_EXTI_Falling_Callback+0x5c8>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	605a      	str	r2, [r3, #4]
						break;
 800bf86:	e170      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
 800bf88:	200004c3 	.word	0x200004c3
 800bf8c:	200006c4 	.word	0x200006c4
 800bf90:	20000770 	.word	0x20000770
 800bf94:	2000044c 	.word	0x2000044c
 800bf98:	200006ac 	.word	0x200006ac
 800bf9c:	0000639c 	.word	0x0000639c
 800bfa0:	000009f6 	.word	0x000009f6
 800bfa4:	200004b8 	.word	0x200004b8
 800bfa8:	20000444 	.word	0x20000444
 800bfac:	2000058e 	.word	0x2000058e
 800bfb0:	200003b9 	.word	0x200003b9
 800bfb4:	08018510 	.word	0x08018510

					case SETTINGS_DAYS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800bfb8:	23a0      	movs	r3, #160	; 0xa0
 800bfba:	05db      	lsls	r3, r3, #23
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	f7f8 ffc8 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d112      	bne.n	800bff0 <HAL_GPIO_EXTI_Falling_Callback+0x62c>
							actual.day++;
 800bfca:	4bc9      	ldr	r3, [pc, #804]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800bfcc:	789b      	ldrb	r3, [r3, #2]
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	b25a      	sxtb	r2, r3
 800bfd8:	4bc5      	ldr	r3, [pc, #788]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800bfda:	709a      	strb	r2, [r3, #2]
							if (actual.day > 31)
 800bfdc:	4bc4      	ldr	r3, [pc, #784]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800bfde:	789b      	ldrb	r3, [r3, #2]
 800bfe0:	b25b      	sxtb	r3, r3
 800bfe2:	2b1f      	cmp	r3, #31
 800bfe4:	dc00      	bgt.n	800bfe8 <HAL_GPIO_EXTI_Falling_Callback+0x624>
 800bfe6:	e133      	b.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
								actual.day = 1;
 800bfe8:	4bc1      	ldr	r3, [pc, #772]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800bfea:	2201      	movs	r2, #1
 800bfec:	709a      	strb	r2, [r3, #2]
							actual.day--;
							if (actual.day < 1)
								actual.day = 31;
						}

						break;
 800bfee:	e12f      	b.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800bff0:	23a0      	movs	r3, #160	; 0xa0
 800bff2:	05db      	lsls	r3, r3, #23
 800bff4:	2108      	movs	r1, #8
 800bff6:	0018      	movs	r0, r3
 800bff8:	f7f8 ffac 	bl	8004f54 <HAL_GPIO_ReadPin>
 800bffc:	1e03      	subs	r3, r0, #0
 800bffe:	d000      	beq.n	800c002 <HAL_GPIO_EXTI_Falling_Callback+0x63e>
 800c000:	e126      	b.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
							actual.day--;
 800c002:	4bbb      	ldr	r3, [pc, #748]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c004:	789b      	ldrb	r3, [r3, #2]
 800c006:	b25b      	sxtb	r3, r3
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	b25a      	sxtb	r2, r3
 800c010:	4bb7      	ldr	r3, [pc, #732]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c012:	709a      	strb	r2, [r3, #2]
							if (actual.day < 1)
 800c014:	4bb6      	ldr	r3, [pc, #728]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c016:	789b      	ldrb	r3, [r3, #2]
 800c018:	b25b      	sxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dd00      	ble.n	800c020 <HAL_GPIO_EXTI_Falling_Callback+0x65c>
 800c01e:	e117      	b.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x88c>
								actual.day = 31;
 800c020:	4bb3      	ldr	r3, [pc, #716]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c022:	221f      	movs	r2, #31
 800c024:	709a      	strb	r2, [r3, #2]
						break;
 800c026:	e113      	b.n	800c250 <HAL_GPIO_EXTI_Falling_Callback+0x88c>

					case SETTINGS_MONTHS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c028:	23a0      	movs	r3, #160	; 0xa0
 800c02a:	05db      	lsls	r3, r3, #23
 800c02c:	2108      	movs	r1, #8
 800c02e:	0018      	movs	r0, r3
 800c030:	f7f8 ff90 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c034:	0003      	movs	r3, r0
 800c036:	2b01      	cmp	r3, #1
 800c038:	d112      	bne.n	800c060 <HAL_GPIO_EXTI_Falling_Callback+0x69c>
							actual.month++;
 800c03a:	4bad      	ldr	r3, [pc, #692]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	b2db      	uxtb	r3, r3
 800c042:	3301      	adds	r3, #1
 800c044:	b2db      	uxtb	r3, r3
 800c046:	b25a      	sxtb	r2, r3
 800c048:	4ba9      	ldr	r3, [pc, #676]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c04a:	705a      	strb	r2, [r3, #1]
							if (actual.month > 12)
 800c04c:	4ba8      	ldr	r3, [pc, #672]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	b25b      	sxtb	r3, r3
 800c052:	2b0c      	cmp	r3, #12
 800c054:	dc00      	bgt.n	800c058 <HAL_GPIO_EXTI_Falling_Callback+0x694>
 800c056:	e0fd      	b.n	800c254 <HAL_GPIO_EXTI_Falling_Callback+0x890>
								actual.month = 1;
 800c058:	4ba5      	ldr	r3, [pc, #660]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c05a:	2201      	movs	r2, #1
 800c05c:	705a      	strb	r2, [r3, #1]
							actual.month--;
							if (actual.month < 1)
								actual.month = 12;
						}

						break;
 800c05e:	e0f9      	b.n	800c254 <HAL_GPIO_EXTI_Falling_Callback+0x890>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c060:	23a0      	movs	r3, #160	; 0xa0
 800c062:	05db      	lsls	r3, r3, #23
 800c064:	2108      	movs	r1, #8
 800c066:	0018      	movs	r0, r3
 800c068:	f7f8 ff74 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c06c:	1e03      	subs	r3, r0, #0
 800c06e:	d000      	beq.n	800c072 <HAL_GPIO_EXTI_Falling_Callback+0x6ae>
 800c070:	e0f0      	b.n	800c254 <HAL_GPIO_EXTI_Falling_Callback+0x890>
							actual.month--;
 800c072:	4b9f      	ldr	r3, [pc, #636]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	b25b      	sxtb	r3, r3
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	3b01      	subs	r3, #1
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	b25a      	sxtb	r2, r3
 800c080:	4b9b      	ldr	r3, [pc, #620]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c082:	705a      	strb	r2, [r3, #1]
							if (actual.month < 1)
 800c084:	4b9a      	ldr	r3, [pc, #616]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	b25b      	sxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	dd00      	ble.n	800c090 <HAL_GPIO_EXTI_Falling_Callback+0x6cc>
 800c08e:	e0e1      	b.n	800c254 <HAL_GPIO_EXTI_Falling_Callback+0x890>
								actual.month = 12;
 800c090:	4b97      	ldr	r3, [pc, #604]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c092:	220c      	movs	r2, #12
 800c094:	705a      	strb	r2, [r3, #1]
						break;
 800c096:	e0dd      	b.n	800c254 <HAL_GPIO_EXTI_Falling_Callback+0x890>

					case SETTINGS_YEARS:
						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c098:	23a0      	movs	r3, #160	; 0xa0
 800c09a:	05db      	lsls	r3, r3, #23
 800c09c:	2108      	movs	r1, #8
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f7f8 ff58 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c0a4:	0003      	movs	r3, r0
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d112      	bne.n	800c0d0 <HAL_GPIO_EXTI_Falling_Callback+0x70c>
							actual.year++;
 800c0aa:	4b91      	ldr	r3, [pc, #580]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	b25b      	sxtb	r3, r3
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	b25a      	sxtb	r2, r3
 800c0b8:	4b8d      	ldr	r3, [pc, #564]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0ba:	701a      	strb	r2, [r3, #0]
							if (actual.year > 99)
 800c0bc:	4b8c      	ldr	r3, [pc, #560]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	b25b      	sxtb	r3, r3
 800c0c2:	2b63      	cmp	r3, #99	; 0x63
 800c0c4:	dc00      	bgt.n	800c0c8 <HAL_GPIO_EXTI_Falling_Callback+0x704>
 800c0c6:	e0c7      	b.n	800c258 <HAL_GPIO_EXTI_Falling_Callback+0x894>
								actual.year = 1;
 800c0c8:	4b89      	ldr	r3, [pc, #548]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	701a      	strb	r2, [r3, #0]
							actual.year--;
							if (actual.year < 1)
								actual.year = 99;
						}

						break;
 800c0ce:	e0c3      	b.n	800c258 <HAL_GPIO_EXTI_Falling_Callback+0x894>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c0d0:	23a0      	movs	r3, #160	; 0xa0
 800c0d2:	05db      	lsls	r3, r3, #23
 800c0d4:	2108      	movs	r1, #8
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	f7f8 ff3c 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c0dc:	1e03      	subs	r3, r0, #0
 800c0de:	d000      	beq.n	800c0e2 <HAL_GPIO_EXTI_Falling_Callback+0x71e>
 800c0e0:	e0ba      	b.n	800c258 <HAL_GPIO_EXTI_Falling_Callback+0x894>
							actual.year--;
 800c0e2:	4b83      	ldr	r3, [pc, #524]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	b25b      	sxtb	r3, r3
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	b25a      	sxtb	r2, r3
 800c0f0:	4b7f      	ldr	r3, [pc, #508]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0f2:	701a      	strb	r2, [r3, #0]
							if (actual.year < 1)
 800c0f4:	4b7e      	ldr	r3, [pc, #504]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	b25b      	sxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd00      	ble.n	800c100 <HAL_GPIO_EXTI_Falling_Callback+0x73c>
 800c0fe:	e0ab      	b.n	800c258 <HAL_GPIO_EXTI_Falling_Callback+0x894>
								actual.year = 99;
 800c100:	4b7b      	ldr	r3, [pc, #492]	; (800c2f0 <HAL_GPIO_EXTI_Falling_Callback+0x92c>)
 800c102:	2263      	movs	r2, #99	; 0x63
 800c104:	701a      	strb	r2, [r3, #0]
						break;
 800c106:	e0a7      	b.n	800c258 <HAL_GPIO_EXTI_Falling_Callback+0x894>

					case SETTINGS_LAYOUT:
						if (layout < layoutsCounter)
 800c108:	4b7a      	ldr	r3, [pc, #488]	; (800c2f4 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b7a      	ldr	r3, [pc, #488]	; (800c2f8 <HAL_GPIO_EXTI_Falling_Callback+0x934>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d207      	bcs.n	800c126 <HAL_GPIO_EXTI_Falling_Callback+0x762>
							layout++;
 800c116:	4b77      	ldr	r3, [pc, #476]	; (800c2f4 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	3301      	adds	r3, #1
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	4b74      	ldr	r3, [pc, #464]	; (800c2f4 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c122:	701a      	strb	r2, [r3, #0]
						else if (layout >= layoutsCounter)
							layout = 1;
						break;
 800c124:	e09a      	b.n	800c25c <HAL_GPIO_EXTI_Falling_Callback+0x898>
						else if (layout >= layoutsCounter)
 800c126:	4b73      	ldr	r3, [pc, #460]	; (800c2f4 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b72      	ldr	r3, [pc, #456]	; (800c2f8 <HAL_GPIO_EXTI_Falling_Callback+0x934>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d200      	bcs.n	800c136 <HAL_GPIO_EXTI_Falling_Callback+0x772>
 800c134:	e092      	b.n	800c25c <HAL_GPIO_EXTI_Falling_Callback+0x898>
							layout = 1;
 800c136:	4b6f      	ldr	r3, [pc, #444]	; (800c2f4 <HAL_GPIO_EXTI_Falling_Callback+0x930>)
 800c138:	2201      	movs	r2, #1
 800c13a:	701a      	strb	r2, [r3, #0]
						break;
 800c13c:	e08e      	b.n	800c25c <HAL_GPIO_EXTI_Falling_Callback+0x898>

					case SETTINGS_COLOR:
						if (colorScheme < 2)
 800c13e:	4b6f      	ldr	r3, [pc, #444]	; (800c2fc <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d807      	bhi.n	800c158 <HAL_GPIO_EXTI_Falling_Callback+0x794>
							colorScheme++;
 800c148:	4b6c      	ldr	r3, [pc, #432]	; (800c2fc <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	3301      	adds	r3, #1
 800c150:	b2da      	uxtb	r2, r3
 800c152:	4b6a      	ldr	r3, [pc, #424]	; (800c2fc <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c154:	701a      	strb	r2, [r3, #0]
						else if (colorScheme >= 2)
							colorScheme = 1;
						break;
 800c156:	e083      	b.n	800c260 <HAL_GPIO_EXTI_Falling_Callback+0x89c>
						else if (colorScheme >= 2)
 800c158:	4b68      	ldr	r3, [pc, #416]	; (800c2fc <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d800      	bhi.n	800c164 <HAL_GPIO_EXTI_Falling_Callback+0x7a0>
 800c162:	e07d      	b.n	800c260 <HAL_GPIO_EXTI_Falling_Callback+0x89c>
							colorScheme = 1;
 800c164:	4b65      	ldr	r3, [pc, #404]	; (800c2fc <HAL_GPIO_EXTI_Falling_Callback+0x938>)
 800c166:	2201      	movs	r2, #1
 800c168:	701a      	strb	r2, [r3, #0]
						break;
 800c16a:	e079      	b.n	800c260 <HAL_GPIO_EXTI_Falling_Callback+0x89c>

					case SETTINGS_PRESS_REF:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c16c:	23a0      	movs	r3, #160	; 0xa0
 800c16e:	05db      	lsls	r3, r3, #23
 800c170:	2108      	movs	r1, #8
 800c172:	0018      	movs	r0, r3
 800c174:	f7f8 feee 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c178:	0003      	movs	r3, r0
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d113      	bne.n	800c1a6 <HAL_GPIO_EXTI_Falling_Callback+0x7e2>
							pressureReference++;
 800c17e:	4b60      	ldr	r3, [pc, #384]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	b21b      	sxth	r3, r3
 800c184:	b29b      	uxth	r3, r3
 800c186:	3301      	adds	r3, #1
 800c188:	b29b      	uxth	r3, r3
 800c18a:	b21a      	sxth	r2, r3
 800c18c:	4b5c      	ldr	r3, [pc, #368]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c18e:	801a      	strh	r2, [r3, #0]
							if (pressureReference > 1300)
 800c190:	4b5b      	ldr	r3, [pc, #364]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	b21b      	sxth	r3, r3
 800c196:	4a5b      	ldr	r2, [pc, #364]	; (800c304 <HAL_GPIO_EXTI_Falling_Callback+0x940>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	dd63      	ble.n	800c264 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
								pressureReference = 700;
 800c19c:	4b58      	ldr	r3, [pc, #352]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c19e:	22af      	movs	r2, #175	; 0xaf
 800c1a0:	0092      	lsls	r2, r2, #2
 800c1a2:	801a      	strh	r2, [r3, #0]
								== 0) {
							pressureReference--;
							if (pressureReference < 700)
								pressureReference = 1300;
						}
						break;
 800c1a4:	e05e      	b.n	800c264 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c1a6:	23a0      	movs	r3, #160	; 0xa0
 800c1a8:	05db      	lsls	r3, r3, #23
 800c1aa:	2108      	movs	r1, #8
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f7f8 fed1 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c1b2:	1e03      	subs	r3, r0, #0
 800c1b4:	d156      	bne.n	800c264 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
							pressureReference--;
 800c1b6:	4b52      	ldr	r3, [pc, #328]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	b21a      	sxth	r2, r3
 800c1c4:	4b4e      	ldr	r3, [pc, #312]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c1c6:	801a      	strh	r2, [r3, #0]
							if (pressureReference < 700)
 800c1c8:	4b4d      	ldr	r3, [pc, #308]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	b21a      	sxth	r2, r3
 800c1ce:	23af      	movs	r3, #175	; 0xaf
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	da46      	bge.n	800c264 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>
								pressureReference = 1300;
 800c1d6:	4b4a      	ldr	r3, [pc, #296]	; (800c300 <HAL_GPIO_EXTI_Falling_Callback+0x93c>)
 800c1d8:	4a4a      	ldr	r2, [pc, #296]	; (800c304 <HAL_GPIO_EXTI_Falling_Callback+0x940>)
 800c1da:	801a      	strh	r2, [r3, #0]
						break;
 800c1dc:	e042      	b.n	800c264 <HAL_GPIO_EXTI_Falling_Callback+0x8a0>

					case SETTINGS_TEMP_CMP:

						if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1) {
 800c1de:	23a0      	movs	r3, #160	; 0xa0
 800c1e0:	05db      	lsls	r3, r3, #23
 800c1e2:	2108      	movs	r1, #8
 800c1e4:	0018      	movs	r0, r3
 800c1e6:	f7f8 feb5 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c1ea:	0003      	movs	r3, r0
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d111      	bne.n	800c214 <HAL_GPIO_EXTI_Falling_Callback+0x850>
							temperatureCompensation++;
 800c1f0:	4b45      	ldr	r3, [pc, #276]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	b25b      	sxtb	r3, r3
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	b25a      	sxtb	r2, r3
 800c1fe:	4b42      	ldr	r3, [pc, #264]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c200:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation > 20)
 800c202:	4b41      	ldr	r3, [pc, #260]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	b25b      	sxtb	r3, r3
 800c208:	2b14      	cmp	r3, #20
 800c20a:	dd2d      	ble.n	800c268 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
								temperatureCompensation = -20;
 800c20c:	4b3e      	ldr	r3, [pc, #248]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c20e:	22ec      	movs	r2, #236	; 0xec
 800c210:	701a      	strb	r2, [r3, #0]
							temperatureCompensation--;
							if (temperatureCompensation < -20)
								temperatureCompensation = 20;
						}

						break;
 800c212:	e029      	b.n	800c268 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
						} else if (HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin)
 800c214:	23a0      	movs	r3, #160	; 0xa0
 800c216:	05db      	lsls	r3, r3, #23
 800c218:	2108      	movs	r1, #8
 800c21a:	0018      	movs	r0, r3
 800c21c:	f7f8 fe9a 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c220:	1e03      	subs	r3, r0, #0
 800c222:	d121      	bne.n	800c268 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
							temperatureCompensation--;
 800c224:	4b38      	ldr	r3, [pc, #224]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	b25b      	sxtb	r3, r3
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	3b01      	subs	r3, #1
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	b25a      	sxtb	r2, r3
 800c232:	4b35      	ldr	r3, [pc, #212]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c234:	701a      	strb	r2, [r3, #0]
							if (temperatureCompensation < -20)
 800c236:	4b34      	ldr	r3, [pc, #208]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	b25b      	sxtb	r3, r3
 800c23c:	3314      	adds	r3, #20
 800c23e:	da13      	bge.n	800c268 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
								temperatureCompensation = 20;
 800c240:	4b31      	ldr	r3, [pc, #196]	; (800c308 <HAL_GPIO_EXTI_Falling_Callback+0x944>)
 800c242:	2214      	movs	r2, #20
 800c244:	701a      	strb	r2, [r3, #0]
						break;
 800c246:	e00f      	b.n	800c268 <HAL_GPIO_EXTI_Falling_Callback+0x8a4>
						break;
 800c248:	46c0      	nop			; (mov r8, r8)
 800c24a:	e00e      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c24c:	46c0      	nop			; (mov r8, r8)
 800c24e:	e00c      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c250:	46c0      	nop			; (mov r8, r8)
 800c252:	e00a      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c254:	46c0      	nop			; (mov r8, r8)
 800c256:	e008      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c258:	46c0      	nop			; (mov r8, r8)
 800c25a:	e006      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c25c:	46c0      	nop			; (mov r8, r8)
 800c25e:	e004      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c260:	46c0      	nop			; (mov r8, r8)
 800c262:	e002      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c264:	46c0      	nop			; (mov r8, r8)
 800c266:	e000      	b.n	800c26a <HAL_GPIO_EXTI_Falling_Callback+0x8a6>
						break;
 800c268:	46c0      	nop			; (mov r8, r8)

					}

					rtcSetTime();
 800c26a:	f004 fc9d 	bl	8010ba8 <rtcSetTime>
			if (flagLocked == UNLOCKED) {
 800c26e:	e0f3      	b.n	800c458 <HAL_GPIO_EXTI_Falling_Callback+0xa94>

				}
			}
			//										RESET BUTTON

		} else if (GPIO_Pin == RESET_Pin
 800c270:	1dbb      	adds	r3, r7, #6
 800c272:	881b      	ldrh	r3, [r3, #0]
 800c274:	2b10      	cmp	r3, #16
 800c276:	d000      	beq.n	800c27a <HAL_GPIO_EXTI_Falling_Callback+0x8b6>
 800c278:	e090      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800c27a:	23a0      	movs	r3, #160	; 0xa0
 800c27c:	05db      	lsls	r3, r3, #23
 800c27e:	2110      	movs	r1, #16
 800c280:	0018      	movs	r0, r3
 800c282:	f7f8 fe67 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c286:	1e03      	subs	r3, r0, #0
 800c288:	d000      	beq.n	800c28c <HAL_GPIO_EXTI_Falling_Callback+0x8c8>
 800c28a:	e087      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
						== GPIO_PIN_RESET
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_SET
 800c28c:	23a0      	movs	r3, #160	; 0xa0
 800c28e:	05db      	lsls	r3, r3, #23
 800c290:	2108      	movs	r1, #8
 800c292:	0018      	movs	r0, r3
 800c294:	f7f8 fe5e 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c298:	0003      	movs	r3, r0
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d000      	beq.n	800c2a0 <HAL_GPIO_EXTI_Falling_Callback+0x8dc>
 800c29e:	e07d      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)
 800c2a0:	23a0      	movs	r3, #160	; 0xa0
 800c2a2:	05db      	lsls	r3, r3, #23
 800c2a4:	2104      	movs	r1, #4
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f7f8 fe54 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c2ac:	0003      	movs	r3, r0
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d000      	beq.n	800c2b4 <HAL_GPIO_EXTI_Falling_Callback+0x8f0>
 800c2b2:	e073      	b.n	800c39c <HAL_GPIO_EXTI_Falling_Callback+0x9d8>
						== GPIO_PIN_SET) {

			counterForce = 0;
 800c2b4:	4b15      	ldr	r3, [pc, #84]	; (800c30c <HAL_GPIO_EXTI_Falling_Callback+0x948>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	701a      	strb	r2, [r3, #0]
			counterMultiplePress++;
 800c2ba:	4b15      	ldr	r3, [pc, #84]	; (800c310 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	4b12      	ldr	r3, [pc, #72]	; (800c310 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c2c6:	701a      	strb	r2, [r3, #0]

			if (flagSettings == FLAG_SETTINGS_OFF) {
 800c2c8:	4b12      	ldr	r3, [pc, #72]	; (800c314 <HAL_GPIO_EXTI_Falling_Callback+0x950>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d127      	bne.n	800c322 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
				if (counterMultiplePress >= MULTIPLE_PRESS) {
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <HAL_GPIO_EXTI_Falling_Callback+0x94c>)
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d922      	bls.n	800c322 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
					if (flagLocked == LOCKED) {
 800c2dc:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <HAL_GPIO_EXTI_Falling_Callback+0x954>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d11a      	bne.n	800c31c <HAL_GPIO_EXTI_Falling_Callback+0x958>
						flagLocked = UNLOCKED;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <HAL_GPIO_EXTI_Falling_Callback+0x954>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e019      	b.n	800c322 <HAL_GPIO_EXTI_Falling_Callback+0x95e>
 800c2ee:	46c0      	nop			; (mov r8, r8)
 800c2f0:	200006ac 	.word	0x200006ac
 800c2f4:	200006f5 	.word	0x200006f5
 800c2f8:	2000002c 	.word	0x2000002c
 800c2fc:	200006d8 	.word	0x200006d8
 800c300:	20000032 	.word	0x20000032
 800c304:	00000514 	.word	0x00000514
 800c308:	20000030 	.word	0x20000030
 800c30c:	200006da 	.word	0x200006da
 800c310:	200006e0 	.word	0x200006e0
 800c314:	2000058e 	.word	0x2000058e
 800c318:	200004c2 	.word	0x200004c2
					} else {
						flagLocked = LOCKED;
 800c31c:	4b52      	ldr	r3, [pc, #328]	; (800c468 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c31e:	2201      	movs	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (flagLocked == UNLOCKED) {
 800c322:	4b51      	ldr	r3, [pc, #324]	; (800c468 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d000      	beq.n	800c32e <HAL_GPIO_EXTI_Falling_Callback+0x96a>
 800c32c:	e096      	b.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>

				if (mode == MODE_NORMAL && flagSettings == FLAG_SETTINGS_OFF) {
 800c32e:	4b4f      	ldr	r3, [pc, #316]	; (800c46c <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <HAL_GPIO_EXTI_Falling_Callback+0x97e>
 800c338:	4b4d      	ldr	r3, [pc, #308]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d02b      	beq.n	800c39a <HAL_GPIO_EXTI_Falling_Callback+0x9d6>
//			interfaceFullUpdateFlag = 1; //legacy
				}

				else if (mode == MODE_STOP && flagSettings == FLAG_SETTINGS_OFF) {
 800c342:	4b4a      	ldr	r3, [pc, #296]	; (800c46c <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d10a      	bne.n	800c362 <HAL_GPIO_EXTI_Falling_Callback+0x99e>
 800c34c:	4b48      	ldr	r3, [pc, #288]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d105      	bne.n	800c362 <HAL_GPIO_EXTI_Falling_Callback+0x99e>

					mode = MODE_NORMAL;
 800c356:	4b45      	ldr	r3, [pc, #276]	; (800c46c <HAL_GPIO_EXTI_Falling_Callback+0xaa8>)
 800c358:	2200      	movs	r2, #0
 800c35a:	701a      	strb	r2, [r3, #0]
					rtcResetChrono();
 800c35c:	f004 fc62 	bl	8010c24 <rtcResetChrono>
 800c360:	e01b      	b.n	800c39a <HAL_GPIO_EXTI_Falling_Callback+0x9d6>

				}

				else if (flagSettings == FLAG_SETTINGS_ON) {
 800c362:	4b43      	ldr	r3, [pc, #268]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d000      	beq.n	800c36e <HAL_GPIO_EXTI_Falling_Callback+0x9aa>
 800c36c:	e076      	b.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>

					if (settingsPointer < 10) {
 800c36e:	4b41      	ldr	r3, [pc, #260]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b09      	cmp	r3, #9
 800c376:	d807      	bhi.n	800c388 <HAL_GPIO_EXTI_Falling_Callback+0x9c4>
						settingsPointer++; // if reset was pressed in settings, forward pointer
 800c378:	4b3e      	ldr	r3, [pc, #248]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	3301      	adds	r3, #1
 800c380:	b2da      	uxtb	r2, r3
 800c382:	4b3c      	ldr	r3, [pc, #240]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c384:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800c386:	e069      	b.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>
					} else if (settingsPointer >= 10) {
 800c388:	4b3a      	ldr	r3, [pc, #232]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d964      	bls.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>
						settingsPointer = 1;
 800c392:	4b38      	ldr	r3, [pc, #224]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c394:	2201      	movs	r2, #1
 800c396:	701a      	strb	r2, [r3, #0]
			if (flagLocked == UNLOCKED) {
 800c398:	e060      	b.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>
 800c39a:	e05f      	b.n	800c45c <HAL_GPIO_EXTI_Falling_Callback+0xa98>

				}
			}
			//										SET BUTTON

		} else if (GPIO_Pin == SET_Pin
 800c39c:	1dbb      	adds	r3, r7, #6
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	2b08      	cmp	r3, #8
 800c3a2:	d15c      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == GPIO_PIN_RESET
 800c3a4:	23a0      	movs	r3, #160	; 0xa0
 800c3a6:	05db      	lsls	r3, r3, #23
 800c3a8:	2108      	movs	r1, #8
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f7f8 fdd2 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c3b0:	1e03      	subs	r3, r0, #0
 800c3b2:	d154      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == GPIO_PIN_SET
 800c3b4:	23a0      	movs	r3, #160	; 0xa0
 800c3b6:	05db      	lsls	r3, r3, #23
 800c3b8:	2104      	movs	r1, #4
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f7f8 fdca 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c3c0:	0003      	movs	r3, r0
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d14b      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
				&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin)
 800c3c6:	23a0      	movs	r3, #160	; 0xa0
 800c3c8:	05db      	lsls	r3, r3, #23
 800c3ca:	2110      	movs	r1, #16
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	f7f8 fdc1 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c3d2:	0003      	movs	r3, r0
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d142      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
						== GPIO_PIN_SET) {

			if (flagLocked == UNLOCKED) {
 800c3d8:	4b23      	ldr	r3, [pc, #140]	; (800c468 <HAL_GPIO_EXTI_Falling_Callback+0xaa4>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d13d      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

				if (flagSettings == FLAG_SETTINGS_OFF
 800c3e2:	4b23      	ldr	r3, [pc, #140]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d112      	bne.n	800c412 <HAL_GPIO_EXTI_Falling_Callback+0xa4e>
						&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) { //go to settings only when Reset button is released
 800c3ec:	23a0      	movs	r3, #160	; 0xa0
 800c3ee:	05db      	lsls	r3, r3, #23
 800c3f0:	2110      	movs	r1, #16
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f7f8 fdae 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c3f8:	0003      	movs	r3, r0
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d109      	bne.n	800c412 <HAL_GPIO_EXTI_Falling_Callback+0xa4e>

					flagSettings = FLAG_SETTINGS_ON;
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c400:	2201      	movs	r2, #1
 800c402:	701a      	strb	r2, [r3, #0]
					counterSettings = SETTINGS_TIME;
 800c404:	4b1c      	ldr	r3, [pc, #112]	; (800c478 <HAL_GPIO_EXTI_Falling_Callback+0xab4>)
 800c406:	2205      	movs	r2, #5
 800c408:	701a      	strb	r2, [r3, #0]
					settingsPointer = 7;
 800c40a:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <HAL_GPIO_EXTI_Falling_Callback+0xab0>)
 800c40c:	2207      	movs	r2, #7
 800c40e:	701a      	strb	r2, [r3, #0]
 800c410:	e025      	b.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

				} else if (flagSettings == FLAG_SETTINGS_ON
 800c412:	4b17      	ldr	r3, [pc, #92]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d120      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
						&& HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin) == 1) {
 800c41c:	23a0      	movs	r3, #160	; 0xa0
 800c41e:	05db      	lsls	r3, r3, #23
 800c420:	2104      	movs	r1, #4
 800c422:	0018      	movs	r0, r3
 800c424:	f7f8 fd96 	bl	8004f54 <HAL_GPIO_ReadPin>
 800c428:	0003      	movs	r3, r0
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d117      	bne.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>

					flagSettings = FLAG_SETTINGS_OFF;
 800c42e:	4b10      	ldr	r3, [pc, #64]	; (800c470 <HAL_GPIO_EXTI_Falling_Callback+0xaac>)
 800c430:	2200      	movs	r2, #0
 800c432:	701a      	strb	r2, [r3, #0]
					counterSettings = 0;
 800c434:	4b10      	ldr	r3, [pc, #64]	; (800c478 <HAL_GPIO_EXTI_Falling_Callback+0xab4>)
 800c436:	2200      	movs	r2, #0
 800c438:	701a      	strb	r2, [r3, #0]
					interfaceSelectColorScheme(colorScheme);
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <HAL_GPIO_EXTI_Falling_Callback+0xab8>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	0018      	movs	r0, r3
 800c442:	f000 fcc9 	bl	800cdd8 <interfaceSelectColorScheme>
					interfaceSelectLayout(layout);
 800c446:	4b0e      	ldr	r3, [pc, #56]	; (800c480 <HAL_GPIO_EXTI_Falling_Callback+0xabc>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	0018      	movs	r0, r3
 800c44e:	f000 f819 	bl	800c484 <interfaceSelectLayout>
				}

			}
		}
	}
}
 800c452:	e004      	b.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
		if ((mode == MODE_CHRONO || mode == MODE_STOP) && chrono.year == 0
 800c454:	46c0      	nop			; (mov r8, r8)
 800c456:	e002      	b.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
			if (flagLocked == UNLOCKED) {
 800c458:	46c0      	nop			; (mov r8, r8)
 800c45a:	e000      	b.n	800c45e <HAL_GPIO_EXTI_Falling_Callback+0xa9a>
			if (flagLocked == UNLOCKED) {
 800c45c:	46c0      	nop			; (mov r8, r8)
}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	46bd      	mov	sp, r7
 800c462:	b002      	add	sp, #8
 800c464:	bd80      	pop	{r7, pc}
 800c466:	46c0      	nop			; (mov r8, r8)
 800c468:	200004c2 	.word	0x200004c2
 800c46c:	200004c3 	.word	0x200004c3
 800c470:	2000058e 	.word	0x2000058e
 800c474:	200003b9 	.word	0x200003b9
 800c478:	20000694 	.word	0x20000694
 800c47c:	200006d8 	.word	0x200006d8
 800c480:	200006f5 	.word	0x200006f5

0800c484 <interfaceSelectLayout>:
//#include <math.h>
#include <stdlib.h>

uint8_t layoutsCounter = 5; //how many layouts are programmed

void interfaceSelectLayout(uint8_t l) {
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	0002      	movs	r2, r0
 800c48c:	1dfb      	adds	r3, r7, #7
 800c48e:	701a      	strb	r2, [r3, #0]

	if (l == 1) { //simple
 800c490:	1dfb      	adds	r3, r7, #7
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d000      	beq.n	800c49a <interfaceSelectLayout+0x16>
 800c498:	e0a8      	b.n	800c5ec <interfaceSelectLayout+0x168>

		showBarometer = 1;
 800c49a:	4bab      	ldr	r3, [pc, #684]	; (800c748 <interfaceSelectLayout+0x2c4>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]
		showBatteryState = 0;
 800c4a0:	4baa      	ldr	r3, [pc, #680]	; (800c74c <interfaceSelectLayout+0x2c8>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800c4a6:	4baa      	ldr	r3, [pc, #680]	; (800c750 <interfaceSelectLayout+0x2cc>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c4ac:	4ba9      	ldr	r3, [pc, #676]	; (800c754 <interfaceSelectLayout+0x2d0>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800c4b2:	4ba9      	ldr	r3, [pc, #676]	; (800c758 <interfaceSelectLayout+0x2d4>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c4b8:	4ba8      	ldr	r3, [pc, #672]	; (800c75c <interfaceSelectLayout+0x2d8>)
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800c4be:	4ba8      	ldr	r3, [pc, #672]	; (800c760 <interfaceSelectLayout+0x2dc>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c4c4:	4ba7      	ldr	r3, [pc, #668]	; (800c764 <interfaceSelectLayout+0x2e0>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800c4ca:	4ba7      	ldr	r3, [pc, #668]	; (800c768 <interfaceSelectLayout+0x2e4>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800c4d0:	4ba6      	ldr	r3, [pc, #664]	; (800c76c <interfaceSelectLayout+0x2e8>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c4d6:	4ba6      	ldr	r3, [pc, #664]	; (800c770 <interfaceSelectLayout+0x2ec>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800c4dc:	4ba5      	ldr	r3, [pc, #660]	; (800c774 <interfaceSelectLayout+0x2f0>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c4e2:	4ba5      	ldr	r3, [pc, #660]	; (800c778 <interfaceSelectLayout+0x2f4>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	701a      	strb	r2, [r3, #0]

		//sensor readings positions
		temperatureX = 38;
 800c4e8:	4ba4      	ldr	r3, [pc, #656]	; (800c77c <interfaceSelectLayout+0x2f8>)
 800c4ea:	2226      	movs	r2, #38	; 0x26
 800c4ec:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800c4ee:	4ba4      	ldr	r3, [pc, #656]	; (800c780 <interfaceSelectLayout+0x2fc>)
 800c4f0:	222c      	movs	r2, #44	; 0x2c
 800c4f2:	701a      	strb	r2, [r3, #0]

		humidityX = 130;
 800c4f4:	4ba3      	ldr	r3, [pc, #652]	; (800c784 <interfaceSelectLayout+0x300>)
 800c4f6:	2282      	movs	r2, #130	; 0x82
 800c4f8:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c4fa:	4ba3      	ldr	r3, [pc, #652]	; (800c788 <interfaceSelectLayout+0x304>)
 800c4fc:	224b      	movs	r2, #75	; 0x4b
 800c4fe:	701a      	strb	r2, [r3, #0]

		pressureX = 17;
 800c500:	4ba2      	ldr	r3, [pc, #648]	; (800c78c <interfaceSelectLayout+0x308>)
 800c502:	2211      	movs	r2, #17
 800c504:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c506:	4ba2      	ldr	r3, [pc, #648]	; (800c790 <interfaceSelectLayout+0x30c>)
 800c508:	2232      	movs	r2, #50	; 0x32
 800c50a:	701a      	strb	r2, [r3, #0]

		//compass and altitude
		compassX = 55;
 800c50c:	4ba1      	ldr	r3, [pc, #644]	; (800c794 <interfaceSelectLayout+0x310>)
 800c50e:	2237      	movs	r2, #55	; 0x37
 800c510:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800c512:	4ba1      	ldr	r3, [pc, #644]	; (800c798 <interfaceSelectLayout+0x314>)
 800c514:	2264      	movs	r2, #100	; 0x64
 800c516:	701a      	strb	r2, [r3, #0]

		//date position
		dateX = 153;
 800c518:	4ba0      	ldr	r3, [pc, #640]	; (800c79c <interfaceSelectLayout+0x318>)
 800c51a:	2299      	movs	r2, #153	; 0x99
 800c51c:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c51e:	4ba0      	ldr	r3, [pc, #640]	; (800c7a0 <interfaceSelectLayout+0x31c>)
 800c520:	225f      	movs	r2, #95	; 0x5f
 800c522:	701a      	strb	r2, [r3, #0]

		batteryStateStartX = 135;
 800c524:	4b9f      	ldr	r3, [pc, #636]	; (800c7a4 <interfaceSelectLayout+0x320>)
 800c526:	2287      	movs	r2, #135	; 0x87
 800c528:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800c52a:	4b9f      	ldr	r3, [pc, #636]	; (800c7a8 <interfaceSelectLayout+0x324>)
 800c52c:	2287      	movs	r2, #135	; 0x87
 800c52e:	701a      	strb	r2, [r3, #0]

		pointerShadowShift = 2;
 800c530:	4b9e      	ldr	r3, [pc, #632]	; (800c7ac <interfaceSelectLayout+0x328>)
 800c532:	2202      	movs	r2, #2
 800c534:	701a      	strb	r2, [r3, #0]

		chronoDecimalsStartX = 100;
 800c536:	4b9e      	ldr	r3, [pc, #632]	; (800c7b0 <interfaceSelectLayout+0x32c>)
 800c538:	2264      	movs	r2, #100	; 0x64
 800c53a:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800c53c:	4b9d      	ldr	r3, [pc, #628]	; (800c7b4 <interfaceSelectLayout+0x330>)
 800c53e:	2232      	movs	r2, #50	; 0x32
 800c540:	701a      	strb	r2, [r3, #0]

		chronoMinutesStartX = 100;
 800c542:	4b9d      	ldr	r3, [pc, #628]	; (800c7b8 <interfaceSelectLayout+0x334>)
 800c544:	2264      	movs	r2, #100	; 0x64
 800c546:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800c548:	4b9c      	ldr	r3, [pc, #624]	; (800c7bc <interfaceSelectLayout+0x338>)
 800c54a:	2296      	movs	r2, #150	; 0x96
 800c54c:	701a      	strb	r2, [r3, #0]

		secondsStartX = 100;
 800c54e:	4b9c      	ldr	r3, [pc, #624]	; (800c7c0 <interfaceSelectLayout+0x33c>)
 800c550:	2264      	movs	r2, #100	; 0x64
 800c552:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800c554:	4b9b      	ldr	r3, [pc, #620]	; (800c7c4 <interfaceSelectLayout+0x340>)
 800c556:	2296      	movs	r2, #150	; 0x96
 800c558:	701a      	strb	r2, [r3, #0]

		mainStartX = 100;
 800c55a:	4b9b      	ldr	r3, [pc, #620]	; (800c7c8 <interfaceSelectLayout+0x344>)
 800c55c:	2264      	movs	r2, #100	; 0x64
 800c55e:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800c560:	4b9a      	ldr	r3, [pc, #616]	; (800c7cc <interfaceSelectLayout+0x348>)
 800c562:	2264      	movs	r2, #100	; 0x64
 800c564:	701a      	strb	r2, [r3, #0]

		compassBoardRadius = 25;
 800c566:	4b9a      	ldr	r3, [pc, #616]	; (800c7d0 <interfaceSelectLayout+0x34c>)
 800c568:	2219      	movs	r2, #25
 800c56a:	701a      	strb	r2, [r3, #0]

		mainBoardRadius = 97;
 800c56c:	4b99      	ldr	r3, [pc, #612]	; (800c7d4 <interfaceSelectLayout+0x350>)
 800c56e:	2261      	movs	r2, #97	; 0x61
 800c570:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800c572:	4b99      	ldr	r3, [pc, #612]	; (800c7d8 <interfaceSelectLayout+0x354>)
 800c574:	221c      	movs	r2, #28
 800c576:	701a      	strb	r2, [r3, #0]

		//pointers lengths

		hourPointerLength = 55;
 800c578:	4b98      	ldr	r3, [pc, #608]	; (800c7dc <interfaceSelectLayout+0x358>)
 800c57a:	2237      	movs	r2, #55	; 0x37
 800c57c:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800c57e:	4b98      	ldr	r3, [pc, #608]	; (800c7e0 <interfaceSelectLayout+0x35c>)
 800c580:	2250      	movs	r2, #80	; 0x50
 800c582:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800c584:	4b97      	ldr	r3, [pc, #604]	; (800c7e4 <interfaceSelectLayout+0x360>)
 800c586:	2214      	movs	r2, #20
 800c588:	701a      	strb	r2, [r3, #0]

		chronoDecimalsPointerLength = 20;
 800c58a:	4b97      	ldr	r3, [pc, #604]	; (800c7e8 <interfaceSelectLayout+0x364>)
 800c58c:	2214      	movs	r2, #20
 800c58e:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800c590:	4b96      	ldr	r3, [pc, #600]	; (800c7ec <interfaceSelectLayout+0x368>)
 800c592:	2214      	movs	r2, #20
 800c594:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800c596:	4b96      	ldr	r3, [pc, #600]	; (800c7f0 <interfaceSelectLayout+0x36c>)
 800c598:	2250      	movs	r2, #80	; 0x50
 800c59a:	701a      	strb	r2, [r3, #0]

		batteryStatePointerLength = 35;
 800c59c:	4b95      	ldr	r3, [pc, #596]	; (800c7f4 <interfaceSelectLayout+0x370>)
 800c59e:	2223      	movs	r2, #35	; 0x23
 800c5a0:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800c5a2:	4b95      	ldr	r3, [pc, #596]	; (800c7f8 <interfaceSelectLayout+0x374>)
 800c5a4:	2264      	movs	r2, #100	; 0x64
 800c5a6:	701a      	strb	r2, [r3, #0]

		compassPointerLength = 18;
 800c5a8:	4b94      	ldr	r3, [pc, #592]	; (800c7fc <interfaceSelectLayout+0x378>)
 800c5aa:	2212      	movs	r2, #18
 800c5ac:	701a      	strb	r2, [r3, #0]

		//index lengths
		secondsIndexLength = 4;
 800c5ae:	4b94      	ldr	r3, [pc, #592]	; (800c800 <interfaceSelectLayout+0x37c>)
 800c5b0:	2204      	movs	r2, #4
 800c5b2:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800c5b4:	4b93      	ldr	r3, [pc, #588]	; (800c804 <interfaceSelectLayout+0x380>)
 800c5b6:	2202      	movs	r2, #2
 800c5b8:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800c5ba:	4b93      	ldr	r3, [pc, #588]	; (800c808 <interfaceSelectLayout+0x384>)
 800c5bc:	2204      	movs	r2, #4
 800c5be:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800c5c0:	4b92      	ldr	r3, [pc, #584]	; (800c80c <interfaceSelectLayout+0x388>)
 800c5c2:	220a      	movs	r2, #10
 800c5c4:	701a      	strb	r2, [r3, #0]

		batteryStateIndexLength = 15;
 800c5c6:	4b92      	ldr	r3, [pc, #584]	; (800c810 <interfaceSelectLayout+0x38c>)
 800c5c8:	220f      	movs	r2, #15
 800c5ca:	701a      	strb	r2, [r3, #0]

		//pointer shifts
		batteryPointerShift = 20;
 800c5cc:	4b91      	ldr	r3, [pc, #580]	; (800c814 <interfaceSelectLayout+0x390>)
 800c5ce:	2214      	movs	r2, #20
 800c5d0:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800c5d2:	4b91      	ldr	r3, [pc, #580]	; (800c818 <interfaceSelectLayout+0x394>)
 800c5d4:	2255      	movs	r2, #85	; 0x55
 800c5d6:	701a      	strb	r2, [r3, #0]

		//moon Phase
		moonPhaseX = 100;
 800c5d8:	4b90      	ldr	r3, [pc, #576]	; (800c81c <interfaceSelectLayout+0x398>)
 800c5da:	2264      	movs	r2, #100	; 0x64
 800c5dc:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800c5de:	4b90      	ldr	r3, [pc, #576]	; (800c820 <interfaceSelectLayout+0x39c>)
 800c5e0:	2232      	movs	r2, #50	; 0x32
 800c5e2:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 15;
 800c5e4:	4b8f      	ldr	r3, [pc, #572]	; (800c824 <interfaceSelectLayout+0x3a0>)
 800c5e6:	220f      	movs	r2, #15
 800c5e8:	701a      	strb	r2, [r3, #0]
		//pointer shifts
		batteryPointerShift = 20;
		pressurePointerShift = 85;
	}

}
 800c5ea:	e384      	b.n	800ccf6 <interfaceSelectLayout+0x872>
	else if (l == 2) { //navi
 800c5ec:	1dfb      	adds	r3, r7, #7
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d000      	beq.n	800c5f6 <interfaceSelectLayout+0x172>
 800c5f4:	e118      	b.n	800c828 <interfaceSelectLayout+0x3a4>
		showBarometer = 1;
 800c5f6:	4b54      	ldr	r3, [pc, #336]	; (800c748 <interfaceSelectLayout+0x2c4>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800c5fc:	4b53      	ldr	r3, [pc, #332]	; (800c74c <interfaceSelectLayout+0x2c8>)
 800c5fe:	2201      	movs	r2, #1
 800c600:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800c602:	4b53      	ldr	r3, [pc, #332]	; (800c750 <interfaceSelectLayout+0x2cc>)
 800c604:	2201      	movs	r2, #1
 800c606:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c608:	4b52      	ldr	r3, [pc, #328]	; (800c754 <interfaceSelectLayout+0x2d0>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 1;
 800c60e:	4b52      	ldr	r3, [pc, #328]	; (800c758 <interfaceSelectLayout+0x2d4>)
 800c610:	2201      	movs	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c614:	4b51      	ldr	r3, [pc, #324]	; (800c75c <interfaceSelectLayout+0x2d8>)
 800c616:	2201      	movs	r2, #1
 800c618:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800c61a:	4b51      	ldr	r3, [pc, #324]	; (800c760 <interfaceSelectLayout+0x2dc>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c620:	4b50      	ldr	r3, [pc, #320]	; (800c764 <interfaceSelectLayout+0x2e0>)
 800c622:	2200      	movs	r2, #0
 800c624:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800c626:	4b50      	ldr	r3, [pc, #320]	; (800c768 <interfaceSelectLayout+0x2e4>)
 800c628:	2201      	movs	r2, #1
 800c62a:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800c62c:	4b4f      	ldr	r3, [pc, #316]	; (800c76c <interfaceSelectLayout+0x2e8>)
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c632:	4b4f      	ldr	r3, [pc, #316]	; (800c770 <interfaceSelectLayout+0x2ec>)
 800c634:	2200      	movs	r2, #0
 800c636:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800c638:	4b4e      	ldr	r3, [pc, #312]	; (800c774 <interfaceSelectLayout+0x2f0>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c63e:	4b4e      	ldr	r3, [pc, #312]	; (800c778 <interfaceSelectLayout+0x2f4>)
 800c640:	2201      	movs	r2, #1
 800c642:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800c644:	4b4d      	ldr	r3, [pc, #308]	; (800c77c <interfaceSelectLayout+0x2f8>)
 800c646:	2226      	movs	r2, #38	; 0x26
 800c648:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800c64a:	4b4d      	ldr	r3, [pc, #308]	; (800c780 <interfaceSelectLayout+0x2fc>)
 800c64c:	222c      	movs	r2, #44	; 0x2c
 800c64e:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800c650:	4b4c      	ldr	r3, [pc, #304]	; (800c784 <interfaceSelectLayout+0x300>)
 800c652:	2282      	movs	r2, #130	; 0x82
 800c654:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c656:	4b4c      	ldr	r3, [pc, #304]	; (800c788 <interfaceSelectLayout+0x304>)
 800c658:	224b      	movs	r2, #75	; 0x4b
 800c65a:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800c65c:	4b4b      	ldr	r3, [pc, #300]	; (800c78c <interfaceSelectLayout+0x308>)
 800c65e:	2211      	movs	r2, #17
 800c660:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c662:	4b4b      	ldr	r3, [pc, #300]	; (800c790 <interfaceSelectLayout+0x30c>)
 800c664:	2232      	movs	r2, #50	; 0x32
 800c666:	701a      	strb	r2, [r3, #0]
		compassX = 55;
 800c668:	4b4a      	ldr	r3, [pc, #296]	; (800c794 <interfaceSelectLayout+0x310>)
 800c66a:	2237      	movs	r2, #55	; 0x37
 800c66c:	701a      	strb	r2, [r3, #0]
		compassY = 100;
 800c66e:	4b4a      	ldr	r3, [pc, #296]	; (800c798 <interfaceSelectLayout+0x314>)
 800c670:	2264      	movs	r2, #100	; 0x64
 800c672:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800c674:	4b49      	ldr	r3, [pc, #292]	; (800c79c <interfaceSelectLayout+0x318>)
 800c676:	2299      	movs	r2, #153	; 0x99
 800c678:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c67a:	4b49      	ldr	r3, [pc, #292]	; (800c7a0 <interfaceSelectLayout+0x31c>)
 800c67c:	225f      	movs	r2, #95	; 0x5f
 800c67e:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800c680:	4b48      	ldr	r3, [pc, #288]	; (800c7a4 <interfaceSelectLayout+0x320>)
 800c682:	2287      	movs	r2, #135	; 0x87
 800c684:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800c686:	4b48      	ldr	r3, [pc, #288]	; (800c7a8 <interfaceSelectLayout+0x324>)
 800c688:	2287      	movs	r2, #135	; 0x87
 800c68a:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800c68c:	4b47      	ldr	r3, [pc, #284]	; (800c7ac <interfaceSelectLayout+0x328>)
 800c68e:	2202      	movs	r2, #2
 800c690:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800c692:	4b47      	ldr	r3, [pc, #284]	; (800c7b0 <interfaceSelectLayout+0x32c>)
 800c694:	2264      	movs	r2, #100	; 0x64
 800c696:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800c698:	4b46      	ldr	r3, [pc, #280]	; (800c7b4 <interfaceSelectLayout+0x330>)
 800c69a:	2232      	movs	r2, #50	; 0x32
 800c69c:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800c69e:	4b46      	ldr	r3, [pc, #280]	; (800c7b8 <interfaceSelectLayout+0x334>)
 800c6a0:	2264      	movs	r2, #100	; 0x64
 800c6a2:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800c6a4:	4b45      	ldr	r3, [pc, #276]	; (800c7bc <interfaceSelectLayout+0x338>)
 800c6a6:	2296      	movs	r2, #150	; 0x96
 800c6a8:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800c6aa:	4b45      	ldr	r3, [pc, #276]	; (800c7c0 <interfaceSelectLayout+0x33c>)
 800c6ac:	2264      	movs	r2, #100	; 0x64
 800c6ae:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800c6b0:	4b44      	ldr	r3, [pc, #272]	; (800c7c4 <interfaceSelectLayout+0x340>)
 800c6b2:	2296      	movs	r2, #150	; 0x96
 800c6b4:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800c6b6:	4b44      	ldr	r3, [pc, #272]	; (800c7c8 <interfaceSelectLayout+0x344>)
 800c6b8:	2264      	movs	r2, #100	; 0x64
 800c6ba:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800c6bc:	4b43      	ldr	r3, [pc, #268]	; (800c7cc <interfaceSelectLayout+0x348>)
 800c6be:	2264      	movs	r2, #100	; 0x64
 800c6c0:	701a      	strb	r2, [r3, #0]
		compassBoardRadius = 25;
 800c6c2:	4b43      	ldr	r3, [pc, #268]	; (800c7d0 <interfaceSelectLayout+0x34c>)
 800c6c4:	2219      	movs	r2, #25
 800c6c6:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800c6c8:	4b42      	ldr	r3, [pc, #264]	; (800c7d4 <interfaceSelectLayout+0x350>)
 800c6ca:	2261      	movs	r2, #97	; 0x61
 800c6cc:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800c6ce:	4b42      	ldr	r3, [pc, #264]	; (800c7d8 <interfaceSelectLayout+0x354>)
 800c6d0:	221c      	movs	r2, #28
 800c6d2:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800c6d4:	4b41      	ldr	r3, [pc, #260]	; (800c7dc <interfaceSelectLayout+0x358>)
 800c6d6:	2237      	movs	r2, #55	; 0x37
 800c6d8:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800c6da:	4b41      	ldr	r3, [pc, #260]	; (800c7e0 <interfaceSelectLayout+0x35c>)
 800c6dc:	2250      	movs	r2, #80	; 0x50
 800c6de:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800c6e0:	4b40      	ldr	r3, [pc, #256]	; (800c7e4 <interfaceSelectLayout+0x360>)
 800c6e2:	2214      	movs	r2, #20
 800c6e4:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800c6e6:	4b40      	ldr	r3, [pc, #256]	; (800c7e8 <interfaceSelectLayout+0x364>)
 800c6e8:	2214      	movs	r2, #20
 800c6ea:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800c6ec:	4b3f      	ldr	r3, [pc, #252]	; (800c7ec <interfaceSelectLayout+0x368>)
 800c6ee:	2214      	movs	r2, #20
 800c6f0:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800c6f2:	4b3f      	ldr	r3, [pc, #252]	; (800c7f0 <interfaceSelectLayout+0x36c>)
 800c6f4:	2250      	movs	r2, #80	; 0x50
 800c6f6:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800c6f8:	4b3e      	ldr	r3, [pc, #248]	; (800c7f4 <interfaceSelectLayout+0x370>)
 800c6fa:	2223      	movs	r2, #35	; 0x23
 800c6fc:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800c6fe:	4b3e      	ldr	r3, [pc, #248]	; (800c7f8 <interfaceSelectLayout+0x374>)
 800c700:	2264      	movs	r2, #100	; 0x64
 800c702:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 18;
 800c704:	4b3d      	ldr	r3, [pc, #244]	; (800c7fc <interfaceSelectLayout+0x378>)
 800c706:	2212      	movs	r2, #18
 800c708:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800c70a:	4b3d      	ldr	r3, [pc, #244]	; (800c800 <interfaceSelectLayout+0x37c>)
 800c70c:	2204      	movs	r2, #4
 800c70e:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800c710:	4b3c      	ldr	r3, [pc, #240]	; (800c804 <interfaceSelectLayout+0x380>)
 800c712:	2202      	movs	r2, #2
 800c714:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800c716:	4b3c      	ldr	r3, [pc, #240]	; (800c808 <interfaceSelectLayout+0x384>)
 800c718:	2204      	movs	r2, #4
 800c71a:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800c71c:	4b3b      	ldr	r3, [pc, #236]	; (800c80c <interfaceSelectLayout+0x388>)
 800c71e:	220a      	movs	r2, #10
 800c720:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800c722:	4b3b      	ldr	r3, [pc, #236]	; (800c810 <interfaceSelectLayout+0x38c>)
 800c724:	220f      	movs	r2, #15
 800c726:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800c728:	4b3a      	ldr	r3, [pc, #232]	; (800c814 <interfaceSelectLayout+0x390>)
 800c72a:	2214      	movs	r2, #20
 800c72c:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800c72e:	4b3a      	ldr	r3, [pc, #232]	; (800c818 <interfaceSelectLayout+0x394>)
 800c730:	2255      	movs	r2, #85	; 0x55
 800c732:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800c734:	4b39      	ldr	r3, [pc, #228]	; (800c81c <interfaceSelectLayout+0x398>)
 800c736:	2296      	movs	r2, #150	; 0x96
 800c738:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800c73a:	4b39      	ldr	r3, [pc, #228]	; (800c820 <interfaceSelectLayout+0x39c>)
 800c73c:	2232      	movs	r2, #50	; 0x32
 800c73e:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800c740:	4b38      	ldr	r3, [pc, #224]	; (800c824 <interfaceSelectLayout+0x3a0>)
 800c742:	220a      	movs	r2, #10
 800c744:	701a      	strb	r2, [r3, #0]
}
 800c746:	e2d6      	b.n	800ccf6 <interfaceSelectLayout+0x872>
 800c748:	20000215 	.word	0x20000215
 800c74c:	200003b2 	.word	0x200003b2
 800c750:	200003ac 	.word	0x200003ac
 800c754:	20000614 	.word	0x20000614
 800c758:	20000208 	.word	0x20000208
 800c75c:	20000212 	.word	0x20000212
 800c760:	20000642 	.word	0x20000642
 800c764:	200001ff 	.word	0x200001ff
 800c768:	20000697 	.word	0x20000697
 800c76c:	200006fe 	.word	0x200006fe
 800c770:	200006e9 	.word	0x200006e9
 800c774:	200003b8 	.word	0x200003b8
 800c778:	20000619 	.word	0x20000619
 800c77c:	2000062d 	.word	0x2000062d
 800c780:	2000036c 	.word	0x2000036c
 800c784:	2000070a 	.word	0x2000070a
 800c788:	20000442 	.word	0x20000442
 800c78c:	200003bc 	.word	0x200003bc
 800c790:	20000216 	.word	0x20000216
 800c794:	200006e8 	.word	0x200006e8
 800c798:	20000450 	.word	0x20000450
 800c79c:	200006fa 	.word	0x200006fa
 800c7a0:	20000268 	.word	0x20000268
 800c7a4:	2000069f 	.word	0x2000069f
 800c7a8:	20000710 	.word	0x20000710
 800c7ac:	20000211 	.word	0x20000211
 800c7b0:	20000645 	.word	0x20000645
 800c7b4:	20000646 	.word	0x20000646
 800c7b8:	200006f4 	.word	0x200006f4
 800c7bc:	200006b4 	.word	0x200006b4
 800c7c0:	200006ea 	.word	0x200006ea
 800c7c4:	2000037b 	.word	0x2000037b
 800c7c8:	2000044b 	.word	0x2000044b
 800c7cc:	20000209 	.word	0x20000209
 800c7d0:	20000640 	.word	0x20000640
 800c7d4:	20000628 	.word	0x20000628
 800c7d8:	200001f0 	.word	0x200001f0
 800c7dc:	20000213 	.word	0x20000213
 800c7e0:	20000696 	.word	0x20000696
 800c7e4:	20000695 	.word	0x20000695
 800c7e8:	20000700 	.word	0x20000700
 800c7ec:	20000210 	.word	0x20000210
 800c7f0:	200003b3 	.word	0x200003b3
 800c7f4:	200004c0 	.word	0x200004c0
 800c7f8:	200006bc 	.word	0x200006bc
 800c7fc:	2000037a 	.word	0x2000037a
 800c800:	200001fa 	.word	0x200001fa
 800c804:	200003af 	.word	0x200003af
 800c808:	2000061a 	.word	0x2000061a
 800c80c:	2000043e 	.word	0x2000043e
 800c810:	20000644 	.word	0x20000644
 800c814:	20000214 	.word	0x20000214
 800c818:	2000062c 	.word	0x2000062c
 800c81c:	200006ff 	.word	0x200006ff
 800c820:	200006a8 	.word	0x200006a8
 800c824:	20000218 	.word	0x20000218
	else if (l == 3) { //digital
 800c828:	1dfb      	adds	r3, r7, #7
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	d000      	beq.n	800c832 <interfaceSelectLayout+0x3ae>
 800c830:	e0a2      	b.n	800c978 <interfaceSelectLayout+0x4f4>
		showBarometer = 0;
 800c832:	4ba4      	ldr	r3, [pc, #656]	; (800cac4 <interfaceSelectLayout+0x640>)
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800c838:	4ba3      	ldr	r3, [pc, #652]	; (800cac8 <interfaceSelectLayout+0x644>)
 800c83a:	2201      	movs	r2, #1
 800c83c:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800c83e:	4ba3      	ldr	r3, [pc, #652]	; (800cacc <interfaceSelectLayout+0x648>)
 800c840:	2201      	movs	r2, #1
 800c842:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c844:	4ba2      	ldr	r3, [pc, #648]	; (800cad0 <interfaceSelectLayout+0x64c>)
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800c84a:	4ba2      	ldr	r3, [pc, #648]	; (800cad4 <interfaceSelectLayout+0x650>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c850:	4ba1      	ldr	r3, [pc, #644]	; (800cad8 <interfaceSelectLayout+0x654>)
 800c852:	2201      	movs	r2, #1
 800c854:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800c856:	4ba1      	ldr	r3, [pc, #644]	; (800cadc <interfaceSelectLayout+0x658>)
 800c858:	2200      	movs	r2, #0
 800c85a:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800c85c:	4ba0      	ldr	r3, [pc, #640]	; (800cae0 <interfaceSelectLayout+0x65c>)
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800c862:	4ba0      	ldr	r3, [pc, #640]	; (800cae4 <interfaceSelectLayout+0x660>)
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 1;
 800c868:	4b9f      	ldr	r3, [pc, #636]	; (800cae8 <interfaceSelectLayout+0x664>)
 800c86a:	2201      	movs	r2, #1
 800c86c:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c86e:	4b9f      	ldr	r3, [pc, #636]	; (800caec <interfaceSelectLayout+0x668>)
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800c874:	4b9e      	ldr	r3, [pc, #632]	; (800caf0 <interfaceSelectLayout+0x66c>)
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c87a:	4b9e      	ldr	r3, [pc, #632]	; (800caf4 <interfaceSelectLayout+0x670>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	701a      	strb	r2, [r3, #0]
		digitalX = 60;
 800c880:	4b9d      	ldr	r3, [pc, #628]	; (800caf8 <interfaceSelectLayout+0x674>)
 800c882:	223c      	movs	r2, #60	; 0x3c
 800c884:	701a      	strb	r2, [r3, #0]
		digitalY = 25;
 800c886:	4b9d      	ldr	r3, [pc, #628]	; (800cafc <interfaceSelectLayout+0x678>)
 800c888:	2219      	movs	r2, #25
 800c88a:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800c88c:	4b9c      	ldr	r3, [pc, #624]	; (800cb00 <interfaceSelectLayout+0x67c>)
 800c88e:	2255      	movs	r2, #85	; 0x55
 800c890:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800c892:	4b9c      	ldr	r3, [pc, #624]	; (800cb04 <interfaceSelectLayout+0x680>)
 800c894:	221e      	movs	r2, #30
 800c896:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800c898:	4b9b      	ldr	r3, [pc, #620]	; (800cb08 <interfaceSelectLayout+0x684>)
 800c89a:	2282      	movs	r2, #130	; 0x82
 800c89c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c89e:	4b9b      	ldr	r3, [pc, #620]	; (800cb0c <interfaceSelectLayout+0x688>)
 800c8a0:	224b      	movs	r2, #75	; 0x4b
 800c8a2:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800c8a4:	4b9a      	ldr	r3, [pc, #616]	; (800cb10 <interfaceSelectLayout+0x68c>)
 800c8a6:	2211      	movs	r2, #17
 800c8a8:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c8aa:	4b9a      	ldr	r3, [pc, #616]	; (800cb14 <interfaceSelectLayout+0x690>)
 800c8ac:	2232      	movs	r2, #50	; 0x32
 800c8ae:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800c8b0:	4b99      	ldr	r3, [pc, #612]	; (800cb18 <interfaceSelectLayout+0x694>)
 800c8b2:	221e      	movs	r2, #30
 800c8b4:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800c8b6:	4b99      	ldr	r3, [pc, #612]	; (800cb1c <interfaceSelectLayout+0x698>)
 800c8b8:	224e      	movs	r2, #78	; 0x4e
 800c8ba:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800c8bc:	4b98      	ldr	r3, [pc, #608]	; (800cb20 <interfaceSelectLayout+0x69c>)
 800c8be:	2299      	movs	r2, #153	; 0x99
 800c8c0:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c8c2:	4b98      	ldr	r3, [pc, #608]	; (800cb24 <interfaceSelectLayout+0x6a0>)
 800c8c4:	225f      	movs	r2, #95	; 0x5f
 800c8c6:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800c8c8:	4b97      	ldr	r3, [pc, #604]	; (800cb28 <interfaceSelectLayout+0x6a4>)
 800c8ca:	2287      	movs	r2, #135	; 0x87
 800c8cc:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800c8ce:	4b97      	ldr	r3, [pc, #604]	; (800cb2c <interfaceSelectLayout+0x6a8>)
 800c8d0:	2287      	movs	r2, #135	; 0x87
 800c8d2:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800c8d4:	4b96      	ldr	r3, [pc, #600]	; (800cb30 <interfaceSelectLayout+0x6ac>)
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800c8da:	4b96      	ldr	r3, [pc, #600]	; (800cb34 <interfaceSelectLayout+0x6b0>)
 800c8dc:	2232      	movs	r2, #50	; 0x32
 800c8de:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800c8e0:	4b95      	ldr	r3, [pc, #596]	; (800cb38 <interfaceSelectLayout+0x6b4>)
 800c8e2:	2264      	movs	r2, #100	; 0x64
 800c8e4:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800c8e6:	4b95      	ldr	r3, [pc, #596]	; (800cb3c <interfaceSelectLayout+0x6b8>)
 800c8e8:	2264      	movs	r2, #100	; 0x64
 800c8ea:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800c8ec:	4b94      	ldr	r3, [pc, #592]	; (800cb40 <interfaceSelectLayout+0x6bc>)
 800c8ee:	2296      	movs	r2, #150	; 0x96
 800c8f0:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800c8f2:	4b94      	ldr	r3, [pc, #592]	; (800cb44 <interfaceSelectLayout+0x6c0>)
 800c8f4:	2264      	movs	r2, #100	; 0x64
 800c8f6:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800c8f8:	4b93      	ldr	r3, [pc, #588]	; (800cb48 <interfaceSelectLayout+0x6c4>)
 800c8fa:	2296      	movs	r2, #150	; 0x96
 800c8fc:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800c8fe:	4b93      	ldr	r3, [pc, #588]	; (800cb4c <interfaceSelectLayout+0x6c8>)
 800c900:	2264      	movs	r2, #100	; 0x64
 800c902:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800c904:	4b92      	ldr	r3, [pc, #584]	; (800cb50 <interfaceSelectLayout+0x6cc>)
 800c906:	2264      	movs	r2, #100	; 0x64
 800c908:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800c90a:	4b92      	ldr	r3, [pc, #584]	; (800cb54 <interfaceSelectLayout+0x6d0>)
 800c90c:	2261      	movs	r2, #97	; 0x61
 800c90e:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800c910:	4b91      	ldr	r3, [pc, #580]	; (800cb58 <interfaceSelectLayout+0x6d4>)
 800c912:	221c      	movs	r2, #28
 800c914:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800c916:	4b91      	ldr	r3, [pc, #580]	; (800cb5c <interfaceSelectLayout+0x6d8>)
 800c918:	2237      	movs	r2, #55	; 0x37
 800c91a:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800c91c:	4b90      	ldr	r3, [pc, #576]	; (800cb60 <interfaceSelectLayout+0x6dc>)
 800c91e:	2250      	movs	r2, #80	; 0x50
 800c920:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800c922:	4b90      	ldr	r3, [pc, #576]	; (800cb64 <interfaceSelectLayout+0x6e0>)
 800c924:	2214      	movs	r2, #20
 800c926:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800c928:	4b8f      	ldr	r3, [pc, #572]	; (800cb68 <interfaceSelectLayout+0x6e4>)
 800c92a:	2214      	movs	r2, #20
 800c92c:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800c92e:	4b8f      	ldr	r3, [pc, #572]	; (800cb6c <interfaceSelectLayout+0x6e8>)
 800c930:	2214      	movs	r2, #20
 800c932:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800c934:	4b8e      	ldr	r3, [pc, #568]	; (800cb70 <interfaceSelectLayout+0x6ec>)
 800c936:	2250      	movs	r2, #80	; 0x50
 800c938:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800c93a:	4b8e      	ldr	r3, [pc, #568]	; (800cb74 <interfaceSelectLayout+0x6f0>)
 800c93c:	2223      	movs	r2, #35	; 0x23
 800c93e:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800c940:	4b8d      	ldr	r3, [pc, #564]	; (800cb78 <interfaceSelectLayout+0x6f4>)
 800c942:	2264      	movs	r2, #100	; 0x64
 800c944:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800c946:	4b8d      	ldr	r3, [pc, #564]	; (800cb7c <interfaceSelectLayout+0x6f8>)
 800c948:	2214      	movs	r2, #20
 800c94a:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800c94c:	4b8c      	ldr	r3, [pc, #560]	; (800cb80 <interfaceSelectLayout+0x6fc>)
 800c94e:	2204      	movs	r2, #4
 800c950:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800c952:	4b8c      	ldr	r3, [pc, #560]	; (800cb84 <interfaceSelectLayout+0x700>)
 800c954:	2202      	movs	r2, #2
 800c956:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800c958:	4b8b      	ldr	r3, [pc, #556]	; (800cb88 <interfaceSelectLayout+0x704>)
 800c95a:	2204      	movs	r2, #4
 800c95c:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800c95e:	4b8b      	ldr	r3, [pc, #556]	; (800cb8c <interfaceSelectLayout+0x708>)
 800c960:	220a      	movs	r2, #10
 800c962:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800c964:	4b8a      	ldr	r3, [pc, #552]	; (800cb90 <interfaceSelectLayout+0x70c>)
 800c966:	220f      	movs	r2, #15
 800c968:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800c96a:	4b8a      	ldr	r3, [pc, #552]	; (800cb94 <interfaceSelectLayout+0x710>)
 800c96c:	2214      	movs	r2, #20
 800c96e:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800c970:	4b89      	ldr	r3, [pc, #548]	; (800cb98 <interfaceSelectLayout+0x714>)
 800c972:	2255      	movs	r2, #85	; 0x55
 800c974:	701a      	strb	r2, [r3, #0]
}
 800c976:	e1be      	b.n	800ccf6 <interfaceSelectLayout+0x872>
	else if (l == 4) { //seconds
 800c978:	1dfb      	adds	r3, r7, #7
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d000      	beq.n	800c982 <interfaceSelectLayout+0x4fe>
 800c980:	e112      	b.n	800cba8 <interfaceSelectLayout+0x724>
		showBarometer = 1;
 800c982:	4b50      	ldr	r3, [pc, #320]	; (800cac4 <interfaceSelectLayout+0x640>)
 800c984:	2201      	movs	r2, #1
 800c986:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800c988:	4b4f      	ldr	r3, [pc, #316]	; (800cac8 <interfaceSelectLayout+0x644>)
 800c98a:	2201      	movs	r2, #1
 800c98c:	701a      	strb	r2, [r3, #0]
		showChrono = 1;
 800c98e:	4b4f      	ldr	r3, [pc, #316]	; (800cacc <interfaceSelectLayout+0x648>)
 800c990:	2201      	movs	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800c994:	4b4e      	ldr	r3, [pc, #312]	; (800cad0 <interfaceSelectLayout+0x64c>)
 800c996:	2200      	movs	r2, #0
 800c998:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800c99a:	4b4e      	ldr	r3, [pc, #312]	; (800cad4 <interfaceSelectLayout+0x650>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
		showDate = 1;
 800c9a0:	4b4d      	ldr	r3, [pc, #308]	; (800cad8 <interfaceSelectLayout+0x654>)
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	701a      	strb	r2, [r3, #0]
		showHigrometer = 1;
 800c9a6:	4b4d      	ldr	r3, [pc, #308]	; (800cadc <interfaceSelectLayout+0x658>)
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	701a      	strb	r2, [r3, #0]
		showSeconds = 1;
 800c9ac:	4b4c      	ldr	r3, [pc, #304]	; (800cae0 <interfaceSelectLayout+0x65c>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	701a      	strb	r2, [r3, #0]
		showThermometer = 1;
 800c9b2:	4b4c      	ldr	r3, [pc, #304]	; (800cae4 <interfaceSelectLayout+0x660>)
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800c9b8:	4b4b      	ldr	r3, [pc, #300]	; (800cae8 <interfaceSelectLayout+0x664>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	701a      	strb	r2, [r3, #0]
		showMeter = 0;
 800c9be:	4b4b      	ldr	r3, [pc, #300]	; (800caec <interfaceSelectLayout+0x668>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 1;
 800c9c4:	4b4a      	ldr	r3, [pc, #296]	; (800caf0 <interfaceSelectLayout+0x66c>)
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	701a      	strb	r2, [r3, #0]
		LPMode = 1;
 800c9ca:	4b4a      	ldr	r3, [pc, #296]	; (800caf4 <interfaceSelectLayout+0x670>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	701a      	strb	r2, [r3, #0]
		temperatureX = 38;
 800c9d0:	4b4b      	ldr	r3, [pc, #300]	; (800cb00 <interfaceSelectLayout+0x67c>)
 800c9d2:	2226      	movs	r2, #38	; 0x26
 800c9d4:	701a      	strb	r2, [r3, #0]
		temperatureY = 44;
 800c9d6:	4b4b      	ldr	r3, [pc, #300]	; (800cb04 <interfaceSelectLayout+0x680>)
 800c9d8:	222c      	movs	r2, #44	; 0x2c
 800c9da:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800c9dc:	4b4a      	ldr	r3, [pc, #296]	; (800cb08 <interfaceSelectLayout+0x684>)
 800c9de:	2282      	movs	r2, #130	; 0x82
 800c9e0:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800c9e2:	4b4a      	ldr	r3, [pc, #296]	; (800cb0c <interfaceSelectLayout+0x688>)
 800c9e4:	224b      	movs	r2, #75	; 0x4b
 800c9e6:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800c9e8:	4b49      	ldr	r3, [pc, #292]	; (800cb10 <interfaceSelectLayout+0x68c>)
 800c9ea:	2211      	movs	r2, #17
 800c9ec:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800c9ee:	4b49      	ldr	r3, [pc, #292]	; (800cb14 <interfaceSelectLayout+0x690>)
 800c9f0:	2232      	movs	r2, #50	; 0x32
 800c9f2:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800c9f4:	4b4a      	ldr	r3, [pc, #296]	; (800cb20 <interfaceSelectLayout+0x69c>)
 800c9f6:	2299      	movs	r2, #153	; 0x99
 800c9f8:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800c9fa:	4b4a      	ldr	r3, [pc, #296]	; (800cb24 <interfaceSelectLayout+0x6a0>)
 800c9fc:	225f      	movs	r2, #95	; 0x5f
 800c9fe:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800ca00:	4b49      	ldr	r3, [pc, #292]	; (800cb28 <interfaceSelectLayout+0x6a4>)
 800ca02:	2287      	movs	r2, #135	; 0x87
 800ca04:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800ca06:	4b49      	ldr	r3, [pc, #292]	; (800cb2c <interfaceSelectLayout+0x6a8>)
 800ca08:	2287      	movs	r2, #135	; 0x87
 800ca0a:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800ca0c:	4b48      	ldr	r3, [pc, #288]	; (800cb30 <interfaceSelectLayout+0x6ac>)
 800ca0e:	2202      	movs	r2, #2
 800ca10:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 100;
 800ca12:	4b48      	ldr	r3, [pc, #288]	; (800cb34 <interfaceSelectLayout+0x6b0>)
 800ca14:	2264      	movs	r2, #100	; 0x64
 800ca16:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 50;
 800ca18:	4b47      	ldr	r3, [pc, #284]	; (800cb38 <interfaceSelectLayout+0x6b4>)
 800ca1a:	2232      	movs	r2, #50	; 0x32
 800ca1c:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 55;
 800ca1e:	4b47      	ldr	r3, [pc, #284]	; (800cb3c <interfaceSelectLayout+0x6b8>)
 800ca20:	2237      	movs	r2, #55	; 0x37
 800ca22:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 100;
 800ca24:	4b46      	ldr	r3, [pc, #280]	; (800cb40 <interfaceSelectLayout+0x6bc>)
 800ca26:	2264      	movs	r2, #100	; 0x64
 800ca28:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800ca2a:	4b46      	ldr	r3, [pc, #280]	; (800cb44 <interfaceSelectLayout+0x6c0>)
 800ca2c:	2264      	movs	r2, #100	; 0x64
 800ca2e:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800ca30:	4b45      	ldr	r3, [pc, #276]	; (800cb48 <interfaceSelectLayout+0x6c4>)
 800ca32:	2296      	movs	r2, #150	; 0x96
 800ca34:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800ca36:	4b45      	ldr	r3, [pc, #276]	; (800cb4c <interfaceSelectLayout+0x6c8>)
 800ca38:	2264      	movs	r2, #100	; 0x64
 800ca3a:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800ca3c:	4b44      	ldr	r3, [pc, #272]	; (800cb50 <interfaceSelectLayout+0x6cc>)
 800ca3e:	2264      	movs	r2, #100	; 0x64
 800ca40:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800ca42:	4b44      	ldr	r3, [pc, #272]	; (800cb54 <interfaceSelectLayout+0x6d0>)
 800ca44:	2261      	movs	r2, #97	; 0x61
 800ca46:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800ca48:	4b43      	ldr	r3, [pc, #268]	; (800cb58 <interfaceSelectLayout+0x6d4>)
 800ca4a:	221c      	movs	r2, #28
 800ca4c:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800ca4e:	4b43      	ldr	r3, [pc, #268]	; (800cb5c <interfaceSelectLayout+0x6d8>)
 800ca50:	2237      	movs	r2, #55	; 0x37
 800ca52:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800ca54:	4b42      	ldr	r3, [pc, #264]	; (800cb60 <interfaceSelectLayout+0x6dc>)
 800ca56:	2250      	movs	r2, #80	; 0x50
 800ca58:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800ca5a:	4b42      	ldr	r3, [pc, #264]	; (800cb64 <interfaceSelectLayout+0x6e0>)
 800ca5c:	2214      	movs	r2, #20
 800ca5e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800ca60:	4b41      	ldr	r3, [pc, #260]	; (800cb68 <interfaceSelectLayout+0x6e4>)
 800ca62:	2214      	movs	r2, #20
 800ca64:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800ca66:	4b41      	ldr	r3, [pc, #260]	; (800cb6c <interfaceSelectLayout+0x6e8>)
 800ca68:	2214      	movs	r2, #20
 800ca6a:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800ca6c:	4b40      	ldr	r3, [pc, #256]	; (800cb70 <interfaceSelectLayout+0x6ec>)
 800ca6e:	2250      	movs	r2, #80	; 0x50
 800ca70:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800ca72:	4b40      	ldr	r3, [pc, #256]	; (800cb74 <interfaceSelectLayout+0x6f0>)
 800ca74:	2223      	movs	r2, #35	; 0x23
 800ca76:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800ca78:	4b3f      	ldr	r3, [pc, #252]	; (800cb78 <interfaceSelectLayout+0x6f4>)
 800ca7a:	2264      	movs	r2, #100	; 0x64
 800ca7c:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800ca7e:	4b3f      	ldr	r3, [pc, #252]	; (800cb7c <interfaceSelectLayout+0x6f8>)
 800ca80:	2214      	movs	r2, #20
 800ca82:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800ca84:	4b3e      	ldr	r3, [pc, #248]	; (800cb80 <interfaceSelectLayout+0x6fc>)
 800ca86:	2204      	movs	r2, #4
 800ca88:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800ca8a:	4b3e      	ldr	r3, [pc, #248]	; (800cb84 <interfaceSelectLayout+0x700>)
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800ca90:	4b3d      	ldr	r3, [pc, #244]	; (800cb88 <interfaceSelectLayout+0x704>)
 800ca92:	2204      	movs	r2, #4
 800ca94:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800ca96:	4b3d      	ldr	r3, [pc, #244]	; (800cb8c <interfaceSelectLayout+0x708>)
 800ca98:	220a      	movs	r2, #10
 800ca9a:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800ca9c:	4b3c      	ldr	r3, [pc, #240]	; (800cb90 <interfaceSelectLayout+0x70c>)
 800ca9e:	220f      	movs	r2, #15
 800caa0:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800caa2:	4b3c      	ldr	r3, [pc, #240]	; (800cb94 <interfaceSelectLayout+0x710>)
 800caa4:	2214      	movs	r2, #20
 800caa6:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800caa8:	4b3b      	ldr	r3, [pc, #236]	; (800cb98 <interfaceSelectLayout+0x714>)
 800caaa:	2255      	movs	r2, #85	; 0x55
 800caac:	701a      	strb	r2, [r3, #0]
		moonPhaseX = 150;
 800caae:	4b3b      	ldr	r3, [pc, #236]	; (800cb9c <interfaceSelectLayout+0x718>)
 800cab0:	2296      	movs	r2, #150	; 0x96
 800cab2:	701a      	strb	r2, [r3, #0]
		moonPhaseY = 50;
 800cab4:	4b3a      	ldr	r3, [pc, #232]	; (800cba0 <interfaceSelectLayout+0x71c>)
 800cab6:	2232      	movs	r2, #50	; 0x32
 800cab8:	701a      	strb	r2, [r3, #0]
		moonPhaseRadius = 10;
 800caba:	4b3a      	ldr	r3, [pc, #232]	; (800cba4 <interfaceSelectLayout+0x720>)
 800cabc:	220a      	movs	r2, #10
 800cabe:	701a      	strb	r2, [r3, #0]
}
 800cac0:	e119      	b.n	800ccf6 <interfaceSelectLayout+0x872>
 800cac2:	46c0      	nop			; (mov r8, r8)
 800cac4:	20000215 	.word	0x20000215
 800cac8:	200003b2 	.word	0x200003b2
 800cacc:	200003ac 	.word	0x200003ac
 800cad0:	20000614 	.word	0x20000614
 800cad4:	20000208 	.word	0x20000208
 800cad8:	20000212 	.word	0x20000212
 800cadc:	20000642 	.word	0x20000642
 800cae0:	200001ff 	.word	0x200001ff
 800cae4:	20000697 	.word	0x20000697
 800cae8:	200006fe 	.word	0x200006fe
 800caec:	200006e9 	.word	0x200006e9
 800caf0:	200003b8 	.word	0x200003b8
 800caf4:	20000619 	.word	0x20000619
 800caf8:	20000641 	.word	0x20000641
 800cafc:	200003ad 	.word	0x200003ad
 800cb00:	2000062d 	.word	0x2000062d
 800cb04:	2000036c 	.word	0x2000036c
 800cb08:	2000070a 	.word	0x2000070a
 800cb0c:	20000442 	.word	0x20000442
 800cb10:	200003bc 	.word	0x200003bc
 800cb14:	20000216 	.word	0x20000216
 800cb18:	200006e8 	.word	0x200006e8
 800cb1c:	20000450 	.word	0x20000450
 800cb20:	200006fa 	.word	0x200006fa
 800cb24:	20000268 	.word	0x20000268
 800cb28:	2000069f 	.word	0x2000069f
 800cb2c:	20000710 	.word	0x20000710
 800cb30:	20000211 	.word	0x20000211
 800cb34:	20000645 	.word	0x20000645
 800cb38:	20000646 	.word	0x20000646
 800cb3c:	200006f4 	.word	0x200006f4
 800cb40:	200006b4 	.word	0x200006b4
 800cb44:	200006ea 	.word	0x200006ea
 800cb48:	2000037b 	.word	0x2000037b
 800cb4c:	2000044b 	.word	0x2000044b
 800cb50:	20000209 	.word	0x20000209
 800cb54:	20000628 	.word	0x20000628
 800cb58:	200001f0 	.word	0x200001f0
 800cb5c:	20000213 	.word	0x20000213
 800cb60:	20000696 	.word	0x20000696
 800cb64:	20000695 	.word	0x20000695
 800cb68:	20000700 	.word	0x20000700
 800cb6c:	20000210 	.word	0x20000210
 800cb70:	200003b3 	.word	0x200003b3
 800cb74:	200004c0 	.word	0x200004c0
 800cb78:	200006bc 	.word	0x200006bc
 800cb7c:	2000037a 	.word	0x2000037a
 800cb80:	200001fa 	.word	0x200001fa
 800cb84:	200003af 	.word	0x200003af
 800cb88:	2000061a 	.word	0x2000061a
 800cb8c:	2000043e 	.word	0x2000043e
 800cb90:	20000644 	.word	0x20000644
 800cb94:	20000214 	.word	0x20000214
 800cb98:	2000062c 	.word	0x2000062c
 800cb9c:	200006ff 	.word	0x200006ff
 800cba0:	200006a8 	.word	0x200006a8
 800cba4:	20000218 	.word	0x20000218
	else if (l == 5) { //meter
 800cba8:	1dfb      	adds	r3, r7, #7
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b05      	cmp	r3, #5
 800cbae:	d000      	beq.n	800cbb2 <interfaceSelectLayout+0x72e>
 800cbb0:	e0a1      	b.n	800ccf6 <interfaceSelectLayout+0x872>
		showBarometer = 0;
 800cbb2:	4b53      	ldr	r3, [pc, #332]	; (800cd00 <interfaceSelectLayout+0x87c>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
		showBatteryState = 1;
 800cbb8:	4b52      	ldr	r3, [pc, #328]	; (800cd04 <interfaceSelectLayout+0x880>)
 800cbba:	2201      	movs	r2, #1
 800cbbc:	701a      	strb	r2, [r3, #0]
		showChrono = 0;
 800cbbe:	4b52      	ldr	r3, [pc, #328]	; (800cd08 <interfaceSelectLayout+0x884>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
		showNaviDigital = 0;
 800cbc4:	4b51      	ldr	r3, [pc, #324]	; (800cd0c <interfaceSelectLayout+0x888>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
		showNaviAnalog = 0;
 800cbca:	4b51      	ldr	r3, [pc, #324]	; (800cd10 <interfaceSelectLayout+0x88c>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	701a      	strb	r2, [r3, #0]
		showDate = 0;
 800cbd0:	4b50      	ldr	r3, [pc, #320]	; (800cd14 <interfaceSelectLayout+0x890>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
		showHigrometer = 0;
 800cbd6:	4b50      	ldr	r3, [pc, #320]	; (800cd18 <interfaceSelectLayout+0x894>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	701a      	strb	r2, [r3, #0]
		showSeconds = 0;
 800cbdc:	4b4f      	ldr	r3, [pc, #316]	; (800cd1c <interfaceSelectLayout+0x898>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	701a      	strb	r2, [r3, #0]
		showThermometer = 0;
 800cbe2:	4b4f      	ldr	r3, [pc, #316]	; (800cd20 <interfaceSelectLayout+0x89c>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	701a      	strb	r2, [r3, #0]
		showDigitalInterface = 0;
 800cbe8:	4b4e      	ldr	r3, [pc, #312]	; (800cd24 <interfaceSelectLayout+0x8a0>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	701a      	strb	r2, [r3, #0]
		showMeter = 1;
 800cbee:	4b4e      	ldr	r3, [pc, #312]	; (800cd28 <interfaceSelectLayout+0x8a4>)
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	701a      	strb	r2, [r3, #0]
		showMoonPhase = 0;
 800cbf4:	4b4d      	ldr	r3, [pc, #308]	; (800cd2c <interfaceSelectLayout+0x8a8>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	701a      	strb	r2, [r3, #0]
		LPMode = 0;
 800cbfa:	4b4d      	ldr	r3, [pc, #308]	; (800cd30 <interfaceSelectLayout+0x8ac>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	701a      	strb	r2, [r3, #0]
		meterX = 59;
 800cc00:	4b4c      	ldr	r3, [pc, #304]	; (800cd34 <interfaceSelectLayout+0x8b0>)
 800cc02:	223b      	movs	r2, #59	; 0x3b
 800cc04:	701a      	strb	r2, [r3, #0]
		meterY = 20;
 800cc06:	4b4c      	ldr	r3, [pc, #304]	; (800cd38 <interfaceSelectLayout+0x8b4>)
 800cc08:	2214      	movs	r2, #20
 800cc0a:	701a      	strb	r2, [r3, #0]
		temperatureX = 85;
 800cc0c:	4b4b      	ldr	r3, [pc, #300]	; (800cd3c <interfaceSelectLayout+0x8b8>)
 800cc0e:	2255      	movs	r2, #85	; 0x55
 800cc10:	701a      	strb	r2, [r3, #0]
		temperatureY = 30;
 800cc12:	4b4b      	ldr	r3, [pc, #300]	; (800cd40 <interfaceSelectLayout+0x8bc>)
 800cc14:	221e      	movs	r2, #30
 800cc16:	701a      	strb	r2, [r3, #0]
		humidityX = 130;
 800cc18:	4b4a      	ldr	r3, [pc, #296]	; (800cd44 <interfaceSelectLayout+0x8c0>)
 800cc1a:	2282      	movs	r2, #130	; 0x82
 800cc1c:	701a      	strb	r2, [r3, #0]
		humidityY = 75;
 800cc1e:	4b4a      	ldr	r3, [pc, #296]	; (800cd48 <interfaceSelectLayout+0x8c4>)
 800cc20:	224b      	movs	r2, #75	; 0x4b
 800cc22:	701a      	strb	r2, [r3, #0]
		pressureX = 17;
 800cc24:	4b49      	ldr	r3, [pc, #292]	; (800cd4c <interfaceSelectLayout+0x8c8>)
 800cc26:	2211      	movs	r2, #17
 800cc28:	701a      	strb	r2, [r3, #0]
		pressureY = 50;
 800cc2a:	4b49      	ldr	r3, [pc, #292]	; (800cd50 <interfaceSelectLayout+0x8cc>)
 800cc2c:	2232      	movs	r2, #50	; 0x32
 800cc2e:	701a      	strb	r2, [r3, #0]
		compassX = 30;
 800cc30:	4b48      	ldr	r3, [pc, #288]	; (800cd54 <interfaceSelectLayout+0x8d0>)
 800cc32:	221e      	movs	r2, #30
 800cc34:	701a      	strb	r2, [r3, #0]
		compassY = 78;
 800cc36:	4b48      	ldr	r3, [pc, #288]	; (800cd58 <interfaceSelectLayout+0x8d4>)
 800cc38:	224e      	movs	r2, #78	; 0x4e
 800cc3a:	701a      	strb	r2, [r3, #0]
		dateX = 153;
 800cc3c:	4b47      	ldr	r3, [pc, #284]	; (800cd5c <interfaceSelectLayout+0x8d8>)
 800cc3e:	2299      	movs	r2, #153	; 0x99
 800cc40:	701a      	strb	r2, [r3, #0]
		dateY = 95;
 800cc42:	4b47      	ldr	r3, [pc, #284]	; (800cd60 <interfaceSelectLayout+0x8dc>)
 800cc44:	225f      	movs	r2, #95	; 0x5f
 800cc46:	701a      	strb	r2, [r3, #0]
		batteryStateStartX = 135;
 800cc48:	4b46      	ldr	r3, [pc, #280]	; (800cd64 <interfaceSelectLayout+0x8e0>)
 800cc4a:	2287      	movs	r2, #135	; 0x87
 800cc4c:	701a      	strb	r2, [r3, #0]
		batteryStateStartY = 135;
 800cc4e:	4b46      	ldr	r3, [pc, #280]	; (800cd68 <interfaceSelectLayout+0x8e4>)
 800cc50:	2287      	movs	r2, #135	; 0x87
 800cc52:	701a      	strb	r2, [r3, #0]
		pointerShadowShift = 2;
 800cc54:	4b45      	ldr	r3, [pc, #276]	; (800cd6c <interfaceSelectLayout+0x8e8>)
 800cc56:	2202      	movs	r2, #2
 800cc58:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartX = 50;
 800cc5a:	4b45      	ldr	r3, [pc, #276]	; (800cd70 <interfaceSelectLayout+0x8ec>)
 800cc5c:	2232      	movs	r2, #50	; 0x32
 800cc5e:	701a      	strb	r2, [r3, #0]
		chronoDecimalsStartY = 100;
 800cc60:	4b44      	ldr	r3, [pc, #272]	; (800cd74 <interfaceSelectLayout+0x8f0>)
 800cc62:	2264      	movs	r2, #100	; 0x64
 800cc64:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartX = 100;
 800cc66:	4b44      	ldr	r3, [pc, #272]	; (800cd78 <interfaceSelectLayout+0x8f4>)
 800cc68:	2264      	movs	r2, #100	; 0x64
 800cc6a:	701a      	strb	r2, [r3, #0]
		chronoMinutesStartY = 150;
 800cc6c:	4b43      	ldr	r3, [pc, #268]	; (800cd7c <interfaceSelectLayout+0x8f8>)
 800cc6e:	2296      	movs	r2, #150	; 0x96
 800cc70:	701a      	strb	r2, [r3, #0]
		secondsStartX = 100;
 800cc72:	4b43      	ldr	r3, [pc, #268]	; (800cd80 <interfaceSelectLayout+0x8fc>)
 800cc74:	2264      	movs	r2, #100	; 0x64
 800cc76:	701a      	strb	r2, [r3, #0]
		secondsStartY = 150;
 800cc78:	4b42      	ldr	r3, [pc, #264]	; (800cd84 <interfaceSelectLayout+0x900>)
 800cc7a:	2296      	movs	r2, #150	; 0x96
 800cc7c:	701a      	strb	r2, [r3, #0]
		mainStartX = 100;
 800cc7e:	4b42      	ldr	r3, [pc, #264]	; (800cd88 <interfaceSelectLayout+0x904>)
 800cc80:	2264      	movs	r2, #100	; 0x64
 800cc82:	701a      	strb	r2, [r3, #0]
		mainStartY = 100;
 800cc84:	4b41      	ldr	r3, [pc, #260]	; (800cd8c <interfaceSelectLayout+0x908>)
 800cc86:	2264      	movs	r2, #100	; 0x64
 800cc88:	701a      	strb	r2, [r3, #0]
		mainBoardRadius = 97;
 800cc8a:	4b41      	ldr	r3, [pc, #260]	; (800cd90 <interfaceSelectLayout+0x90c>)
 800cc8c:	2261      	movs	r2, #97	; 0x61
 800cc8e:	701a      	strb	r2, [r3, #0]
		smallBoardRadius = 28;
 800cc90:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <interfaceSelectLayout+0x910>)
 800cc92:	221c      	movs	r2, #28
 800cc94:	701a      	strb	r2, [r3, #0]
		hourPointerLength = 55;
 800cc96:	4b40      	ldr	r3, [pc, #256]	; (800cd98 <interfaceSelectLayout+0x914>)
 800cc98:	2237      	movs	r2, #55	; 0x37
 800cc9a:	701a      	strb	r2, [r3, #0]
		minutePointerLength = 80;
 800cc9c:	4b3f      	ldr	r3, [pc, #252]	; (800cd9c <interfaceSelectLayout+0x918>)
 800cc9e:	2250      	movs	r2, #80	; 0x50
 800cca0:	701a      	strb	r2, [r3, #0]
		secondPointerLength = 20;
 800cca2:	4b3f      	ldr	r3, [pc, #252]	; (800cda0 <interfaceSelectLayout+0x91c>)
 800cca4:	2214      	movs	r2, #20
 800cca6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsPointerLength = 20;
 800cca8:	4b3e      	ldr	r3, [pc, #248]	; (800cda4 <interfaceSelectLayout+0x920>)
 800ccaa:	2214      	movs	r2, #20
 800ccac:	701a      	strb	r2, [r3, #0]
		chronoMinutesPointerLength = 20;
 800ccae:	4b3e      	ldr	r3, [pc, #248]	; (800cda8 <interfaceSelectLayout+0x924>)
 800ccb0:	2214      	movs	r2, #20
 800ccb2:	701a      	strb	r2, [r3, #0]
		chronoSecondsPointerLength = 80;
 800ccb4:	4b3d      	ldr	r3, [pc, #244]	; (800cdac <interfaceSelectLayout+0x928>)
 800ccb6:	2250      	movs	r2, #80	; 0x50
 800ccb8:	701a      	strb	r2, [r3, #0]
		batteryStatePointerLength = 35;
 800ccba:	4b3d      	ldr	r3, [pc, #244]	; (800cdb0 <interfaceSelectLayout+0x92c>)
 800ccbc:	2223      	movs	r2, #35	; 0x23
 800ccbe:	701a      	strb	r2, [r3, #0]
		pressurePointerLength = 100;
 800ccc0:	4b3c      	ldr	r3, [pc, #240]	; (800cdb4 <interfaceSelectLayout+0x930>)
 800ccc2:	2264      	movs	r2, #100	; 0x64
 800ccc4:	701a      	strb	r2, [r3, #0]
		compassPointerLength = 20;
 800ccc6:	4b3c      	ldr	r3, [pc, #240]	; (800cdb8 <interfaceSelectLayout+0x934>)
 800ccc8:	2214      	movs	r2, #20
 800ccca:	701a      	strb	r2, [r3, #0]
		secondsIndexLength = 4;
 800cccc:	4b3b      	ldr	r3, [pc, #236]	; (800cdbc <interfaceSelectLayout+0x938>)
 800ccce:	2204      	movs	r2, #4
 800ccd0:	701a      	strb	r2, [r3, #0]
		chronoMinutesIndexLength = 2;
 800ccd2:	4b3b      	ldr	r3, [pc, #236]	; (800cdc0 <interfaceSelectLayout+0x93c>)
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	701a      	strb	r2, [r3, #0]
		chronoDecimalsIndexLength = 4;
 800ccd8:	4b3a      	ldr	r3, [pc, #232]	; (800cdc4 <interfaceSelectLayout+0x940>)
 800ccda:	2204      	movs	r2, #4
 800ccdc:	701a      	strb	r2, [r3, #0]
		mainIndexLength = 10;
 800ccde:	4b3a      	ldr	r3, [pc, #232]	; (800cdc8 <interfaceSelectLayout+0x944>)
 800cce0:	220a      	movs	r2, #10
 800cce2:	701a      	strb	r2, [r3, #0]
		batteryStateIndexLength = 15;
 800cce4:	4b39      	ldr	r3, [pc, #228]	; (800cdcc <interfaceSelectLayout+0x948>)
 800cce6:	220f      	movs	r2, #15
 800cce8:	701a      	strb	r2, [r3, #0]
		batteryPointerShift = 20;
 800ccea:	4b39      	ldr	r3, [pc, #228]	; (800cdd0 <interfaceSelectLayout+0x94c>)
 800ccec:	2214      	movs	r2, #20
 800ccee:	701a      	strb	r2, [r3, #0]
		pressurePointerShift = 85;
 800ccf0:	4b38      	ldr	r3, [pc, #224]	; (800cdd4 <interfaceSelectLayout+0x950>)
 800ccf2:	2255      	movs	r2, #85	; 0x55
 800ccf4:	701a      	strb	r2, [r3, #0]
}
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	b002      	add	sp, #8
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	20000215 	.word	0x20000215
 800cd04:	200003b2 	.word	0x200003b2
 800cd08:	200003ac 	.word	0x200003ac
 800cd0c:	20000614 	.word	0x20000614
 800cd10:	20000208 	.word	0x20000208
 800cd14:	20000212 	.word	0x20000212
 800cd18:	20000642 	.word	0x20000642
 800cd1c:	200001ff 	.word	0x200001ff
 800cd20:	20000697 	.word	0x20000697
 800cd24:	200006fe 	.word	0x200006fe
 800cd28:	200006e9 	.word	0x200006e9
 800cd2c:	200003b8 	.word	0x200003b8
 800cd30:	20000619 	.word	0x20000619
 800cd34:	200003b0 	.word	0x200003b0
 800cd38:	200004bf 	.word	0x200004bf
 800cd3c:	2000062d 	.word	0x2000062d
 800cd40:	2000036c 	.word	0x2000036c
 800cd44:	2000070a 	.word	0x2000070a
 800cd48:	20000442 	.word	0x20000442
 800cd4c:	200003bc 	.word	0x200003bc
 800cd50:	20000216 	.word	0x20000216
 800cd54:	200006e8 	.word	0x200006e8
 800cd58:	20000450 	.word	0x20000450
 800cd5c:	200006fa 	.word	0x200006fa
 800cd60:	20000268 	.word	0x20000268
 800cd64:	2000069f 	.word	0x2000069f
 800cd68:	20000710 	.word	0x20000710
 800cd6c:	20000211 	.word	0x20000211
 800cd70:	20000645 	.word	0x20000645
 800cd74:	20000646 	.word	0x20000646
 800cd78:	200006f4 	.word	0x200006f4
 800cd7c:	200006b4 	.word	0x200006b4
 800cd80:	200006ea 	.word	0x200006ea
 800cd84:	2000037b 	.word	0x2000037b
 800cd88:	2000044b 	.word	0x2000044b
 800cd8c:	20000209 	.word	0x20000209
 800cd90:	20000628 	.word	0x20000628
 800cd94:	200001f0 	.word	0x200001f0
 800cd98:	20000213 	.word	0x20000213
 800cd9c:	20000696 	.word	0x20000696
 800cda0:	20000695 	.word	0x20000695
 800cda4:	20000700 	.word	0x20000700
 800cda8:	20000210 	.word	0x20000210
 800cdac:	200003b3 	.word	0x200003b3
 800cdb0:	200004c0 	.word	0x200004c0
 800cdb4:	200006bc 	.word	0x200006bc
 800cdb8:	2000037a 	.word	0x2000037a
 800cdbc:	200001fa 	.word	0x200001fa
 800cdc0:	200003af 	.word	0x200003af
 800cdc4:	2000061a 	.word	0x2000061a
 800cdc8:	2000043e 	.word	0x2000043e
 800cdcc:	20000644 	.word	0x20000644
 800cdd0:	20000214 	.word	0x20000214
 800cdd4:	2000062c 	.word	0x2000062c

0800cdd8 <interfaceSelectColorScheme>:

void interfaceSelectColorScheme(uint8_t cs) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	0002      	movs	r2, r0
 800cde0:	1dfb      	adds	r3, r7, #7
 800cde2:	701a      	strb	r2, [r3, #0]
	if (cs == COLOR_SCHEME_BLACK) {
 800cde4:	1dfb      	adds	r3, r7, #7
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d106      	bne.n	800cdfa <interfaceSelectColorScheme+0x22>
		colorMain = BLACK;
 800cdec:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <interfaceSelectColorScheme+0x40>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
		colorSecond = WHITE;
 800cdf2:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <interfaceSelectColorScheme+0x44>)
 800cdf4:	22ff      	movs	r2, #255	; 0xff
 800cdf6:	701a      	strb	r2, [r3, #0]
	} else if (cs == COLOR_SCHEME_WHITE) {
		colorMain = WHITE;
		colorSecond = BLACK;
	}
}
 800cdf8:	e009      	b.n	800ce0e <interfaceSelectColorScheme+0x36>
	} else if (cs == COLOR_SCHEME_WHITE) {
 800cdfa:	1dfb      	adds	r3, r7, #7
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d105      	bne.n	800ce0e <interfaceSelectColorScheme+0x36>
		colorMain = WHITE;
 800ce02:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <interfaceSelectColorScheme+0x40>)
 800ce04:	22ff      	movs	r2, #255	; 0xff
 800ce06:	701a      	strb	r2, [r3, #0]
		colorSecond = BLACK;
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <interfaceSelectColorScheme+0x44>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	46bd      	mov	sp, r7
 800ce12:	b002      	add	sp, #8
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	46c0      	nop			; (mov r8, r8)
 800ce18:	2000033a 	.word	0x2000033a
 800ce1c:	200006b3 	.word	0x200006b3

0800ce20 <interfaceInit>:

void interfaceInit() {
 800ce20:	b590      	push	{r4, r7, lr}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af02      	add	r7, sp, #8

	//										COUNT INDEXES ANGLES

	for (uint8_t i = 0; i < 10; i++) {
 800ce26:	1dfb      	adds	r3, r7, #7
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	e021      	b.n	800ce72 <interfaceInit+0x52>
		chronoDecimalsIndexAngle[i] = 2 * 3.14 / 10 * (i - 2.5);
 800ce2e:	1dfb      	adds	r3, r7, #7
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	0018      	movs	r0, r3
 800ce34:	f7f6 f8a8 	bl	8002f88 <__aeabi_i2d>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4b77      	ldr	r3, [pc, #476]	; (800d018 <interfaceInit+0x1f8>)
 800ce3c:	f7f5 fcbe 	bl	80027bc <__aeabi_dsub>
 800ce40:	0002      	movs	r2, r0
 800ce42:	000b      	movs	r3, r1
 800ce44:	0010      	movs	r0, r2
 800ce46:	0019      	movs	r1, r3
 800ce48:	4a74      	ldr	r2, [pc, #464]	; (800d01c <interfaceInit+0x1fc>)
 800ce4a:	4b75      	ldr	r3, [pc, #468]	; (800d020 <interfaceInit+0x200>)
 800ce4c:	f7f5 fa4a 	bl	80022e4 <__aeabi_dmul>
 800ce50:	0002      	movs	r2, r0
 800ce52:	000b      	movs	r3, r1
 800ce54:	1df9      	adds	r1, r7, #7
 800ce56:	780c      	ldrb	r4, [r1, #0]
 800ce58:	0010      	movs	r0, r2
 800ce5a:	0019      	movs	r1, r3
 800ce5c:	f7f6 f932 	bl	80030c4 <__aeabi_d2f>
 800ce60:	1c01      	adds	r1, r0, #0
 800ce62:	4b70      	ldr	r3, [pc, #448]	; (800d024 <interfaceInit+0x204>)
 800ce64:	00a2      	lsls	r2, r4, #2
 800ce66:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; i++) {
 800ce68:	1dfb      	adds	r3, r7, #7
 800ce6a:	781a      	ldrb	r2, [r3, #0]
 800ce6c:	1dfb      	adds	r3, r7, #7
 800ce6e:	3201      	adds	r2, #1
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	1dfb      	adds	r3, r7, #7
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	2b09      	cmp	r3, #9
 800ce78:	d9d9      	bls.n	800ce2e <interfaceInit+0xe>
	}
	for (uint8_t i = 0; i < 30; i++) {
 800ce7a:	1dbb      	adds	r3, r7, #6
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	701a      	strb	r2, [r3, #0]
 800ce80:	e021      	b.n	800cec6 <interfaceInit+0xa6>
		chronoMinutesIndexAngle[i] = 2 * 3.14 / 30 * (i - 7.5);
 800ce82:	1dbb      	adds	r3, r7, #6
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	0018      	movs	r0, r3
 800ce88:	f7f6 f87e 	bl	8002f88 <__aeabi_i2d>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4b66      	ldr	r3, [pc, #408]	; (800d028 <interfaceInit+0x208>)
 800ce90:	f7f5 fc94 	bl	80027bc <__aeabi_dsub>
 800ce94:	0002      	movs	r2, r0
 800ce96:	000b      	movs	r3, r1
 800ce98:	0010      	movs	r0, r2
 800ce9a:	0019      	movs	r1, r3
 800ce9c:	4a63      	ldr	r2, [pc, #396]	; (800d02c <interfaceInit+0x20c>)
 800ce9e:	4b64      	ldr	r3, [pc, #400]	; (800d030 <interfaceInit+0x210>)
 800cea0:	f7f5 fa20 	bl	80022e4 <__aeabi_dmul>
 800cea4:	0002      	movs	r2, r0
 800cea6:	000b      	movs	r3, r1
 800cea8:	1db9      	adds	r1, r7, #6
 800ceaa:	780c      	ldrb	r4, [r1, #0]
 800ceac:	0010      	movs	r0, r2
 800ceae:	0019      	movs	r1, r3
 800ceb0:	f7f6 f908 	bl	80030c4 <__aeabi_d2f>
 800ceb4:	1c01      	adds	r1, r0, #0
 800ceb6:	4b5f      	ldr	r3, [pc, #380]	; (800d034 <interfaceInit+0x214>)
 800ceb8:	00a2      	lsls	r2, r4, #2
 800ceba:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 30; i++) {
 800cebc:	1dbb      	adds	r3, r7, #6
 800cebe:	781a      	ldrb	r2, [r3, #0]
 800cec0:	1dbb      	adds	r3, r7, #6
 800cec2:	3201      	adds	r2, #1
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	1dbb      	adds	r3, r7, #6
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b1d      	cmp	r3, #29
 800cecc:	d9d9      	bls.n	800ce82 <interfaceInit+0x62>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800cece:	1d7b      	adds	r3, r7, #5
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
 800ced4:	e01a      	b.n	800cf0c <interfaceInit+0xec>
		secondsIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800ced6:	1d7b      	adds	r3, r7, #5
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	3b03      	subs	r3, #3
 800cedc:	0018      	movs	r0, r3
 800cede:	f7f6 f853 	bl	8002f88 <__aeabi_i2d>
 800cee2:	4a55      	ldr	r2, [pc, #340]	; (800d038 <interfaceInit+0x218>)
 800cee4:	4b55      	ldr	r3, [pc, #340]	; (800d03c <interfaceInit+0x21c>)
 800cee6:	f7f5 f9fd 	bl	80022e4 <__aeabi_dmul>
 800ceea:	0002      	movs	r2, r0
 800ceec:	000b      	movs	r3, r1
 800ceee:	1d79      	adds	r1, r7, #5
 800cef0:	780c      	ldrb	r4, [r1, #0]
 800cef2:	0010      	movs	r0, r2
 800cef4:	0019      	movs	r1, r3
 800cef6:	f7f6 f8e5 	bl	80030c4 <__aeabi_d2f>
 800cefa:	1c01      	adds	r1, r0, #0
 800cefc:	4b50      	ldr	r3, [pc, #320]	; (800d040 <interfaceInit+0x220>)
 800cefe:	00a2      	lsls	r2, r4, #2
 800cf00:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800cf02:	1d7b      	adds	r3, r7, #5
 800cf04:	781a      	ldrb	r2, [r3, #0]
 800cf06:	1d7b      	adds	r3, r7, #5
 800cf08:	3201      	adds	r2, #1
 800cf0a:	701a      	strb	r2, [r3, #0]
 800cf0c:	1d7b      	adds	r3, r7, #5
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b0b      	cmp	r3, #11
 800cf12:	d9e0      	bls.n	800ced6 <interfaceInit+0xb6>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800cf14:	1d3b      	adds	r3, r7, #4
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	e01a      	b.n	800cf52 <interfaceInit+0x132>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800cf1c:	1d3b      	adds	r3, r7, #4
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	3b03      	subs	r3, #3
 800cf22:	0018      	movs	r0, r3
 800cf24:	f7f6 f830 	bl	8002f88 <__aeabi_i2d>
 800cf28:	4a43      	ldr	r2, [pc, #268]	; (800d038 <interfaceInit+0x218>)
 800cf2a:	4b44      	ldr	r3, [pc, #272]	; (800d03c <interfaceInit+0x21c>)
 800cf2c:	f7f5 f9da 	bl	80022e4 <__aeabi_dmul>
 800cf30:	0002      	movs	r2, r0
 800cf32:	000b      	movs	r3, r1
 800cf34:	1d39      	adds	r1, r7, #4
 800cf36:	780c      	ldrb	r4, [r1, #0]
 800cf38:	0010      	movs	r0, r2
 800cf3a:	0019      	movs	r1, r3
 800cf3c:	f7f6 f8c2 	bl	80030c4 <__aeabi_d2f>
 800cf40:	1c01      	adds	r1, r0, #0
 800cf42:	4b40      	ldr	r3, [pc, #256]	; (800d044 <interfaceInit+0x224>)
 800cf44:	00a2      	lsls	r2, r4, #2
 800cf46:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800cf48:	1d3b      	adds	r3, r7, #4
 800cf4a:	781a      	ldrb	r2, [r3, #0]
 800cf4c:	1d3b      	adds	r3, r7, #4
 800cf4e:	3201      	adds	r2, #1
 800cf50:	701a      	strb	r2, [r3, #0]
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b0b      	cmp	r3, #11
 800cf58:	d9e0      	bls.n	800cf1c <interfaceInit+0xfc>
	}
	for (uint8_t i = 0; i < 12; i++) {
 800cf5a:	1cfb      	adds	r3, r7, #3
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	e01a      	b.n	800cf98 <interfaceInit+0x178>
		mainIndexAngle[i] = 2 * 3.14 / 12 * (i - 3);
 800cf62:	1cfb      	adds	r3, r7, #3
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	3b03      	subs	r3, #3
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f7f6 f80d 	bl	8002f88 <__aeabi_i2d>
 800cf6e:	4a32      	ldr	r2, [pc, #200]	; (800d038 <interfaceInit+0x218>)
 800cf70:	4b32      	ldr	r3, [pc, #200]	; (800d03c <interfaceInit+0x21c>)
 800cf72:	f7f5 f9b7 	bl	80022e4 <__aeabi_dmul>
 800cf76:	0002      	movs	r2, r0
 800cf78:	000b      	movs	r3, r1
 800cf7a:	1cf9      	adds	r1, r7, #3
 800cf7c:	780c      	ldrb	r4, [r1, #0]
 800cf7e:	0010      	movs	r0, r2
 800cf80:	0019      	movs	r1, r3
 800cf82:	f7f6 f89f 	bl	80030c4 <__aeabi_d2f>
 800cf86:	1c01      	adds	r1, r0, #0
 800cf88:	4b2e      	ldr	r3, [pc, #184]	; (800d044 <interfaceInit+0x224>)
 800cf8a:	00a2      	lsls	r2, r4, #2
 800cf8c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 12; i++) {
 800cf8e:	1cfb      	adds	r3, r7, #3
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	1cfb      	adds	r3, r7, #3
 800cf94:	3201      	adds	r2, #1
 800cf96:	701a      	strb	r2, [r3, #0]
 800cf98:	1cfb      	adds	r3, r7, #3
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b0b      	cmp	r3, #11
 800cf9e:	d9e0      	bls.n	800cf62 <interfaceInit+0x142>
	}

	//										DISPLAY INITIALISATION

	printf("EPD_1in54_V2_test Demo\r\n");
 800cfa0:	4b29      	ldr	r3, [pc, #164]	; (800d048 <interfaceInit+0x228>)
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f006 f968 	bl	8013278 <puts>
	DEV_Module_Init();
 800cfa8:	f7fb f8a4 	bl	80080f4 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800cfac:	4b27      	ldr	r3, [pc, #156]	; (800d04c <interfaceInit+0x22c>)
 800cfae:	0018      	movs	r0, r3
 800cfb0:	f006 f962 	bl	8013278 <puts>
	EPD_1IN54_V2_Init();
 800cfb4:	f7fb f970 	bl	8008298 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800cfb8:	f7fb f9cc 	bl	8008354 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800cfbc:	23fa      	movs	r3, #250	; 0xfa
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7f6 fa9d 	bl	8003500 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UWORD Imagesize = (
 800cfc6:	003b      	movs	r3, r7
 800cfc8:	4a21      	ldr	r2, [pc, #132]	; (800d050 <interfaceInit+0x230>)
 800cfca:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((BlackImage = (UBYTE*) malloc(Imagesize)) == NULL) {
 800cfcc:	003b      	movs	r3, r7
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f006 f80b 	bl	8012fec <malloc>
 800cfd6:	0003      	movs	r3, r0
 800cfd8:	001a      	movs	r2, r3
 800cfda:	4b1e      	ldr	r3, [pc, #120]	; (800d054 <interfaceInit+0x234>)
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	4b1d      	ldr	r3, [pc, #116]	; (800d054 <interfaceInit+0x234>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d103      	bne.n	800cfee <interfaceInit+0x1ce>
		printf("Failed to apply for black memory...\r\n");
 800cfe6:	4b1c      	ldr	r3, [pc, #112]	; (800d058 <interfaceInit+0x238>)
 800cfe8:	0018      	movs	r0, r3
 800cfea:	f006 f945 	bl	8013278 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800cfee:	4b1b      	ldr	r3, [pc, #108]	; (800d05c <interfaceInit+0x23c>)
 800cff0:	0018      	movs	r0, r3
 800cff2:	f006 f941 	bl	8013278 <puts>
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0,
 800cff6:	4b17      	ldr	r3, [pc, #92]	; (800d054 <interfaceInit+0x234>)
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	4b19      	ldr	r3, [pc, #100]	; (800d060 <interfaceInit+0x240>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	b29b      	uxth	r3, r3
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	2300      	movs	r3, #0
 800d006:	22c8      	movs	r2, #200	; 0xc8
 800d008:	21c8      	movs	r1, #200	; 0xc8
 800d00a:	f7fb fb1b 	bl	8008644 <Paint_NewImage>
//		//burn image
//		EPD_1IN54_V2_DisplayPart(BlackImage);
//		DEV_Delay_ms(50);
//	}

}
 800d00e:	46c0      	nop			; (mov r8, r8)
 800d010:	46bd      	mov	sp, r7
 800d012:	b003      	add	sp, #12
 800d014:	bd90      	pop	{r4, r7, pc}
 800d016:	46c0      	nop			; (mov r8, r8)
 800d018:	40040000 	.word	0x40040000
 800d01c:	74bc6a7f 	.word	0x74bc6a7f
 800d020:	3fe41893 	.word	0x3fe41893
 800d024:	2000037c 	.word	0x2000037c
 800d028:	401e0000 	.word	0x401e0000
 800d02c:	46508dff 	.word	0x46508dff
 800d030:	3fcacb6f 	.word	0x3fcacb6f
 800d034:	2000059c 	.word	0x2000059c
 800d038:	8bf258bf 	.word	0x8bf258bf
 800d03c:	3fe0bf25 	.word	0x3fe0bf25
 800d040:	2000040c 	.word	0x2000040c
 800d044:	2000033c 	.word	0x2000033c
 800d048:	08016090 	.word	0x08016090
 800d04c:	080160a8 	.word	0x080160a8
 800d050:	00001388 	.word	0x00001388
 800d054:	20000630 	.word	0x20000630
 800d058:	080160c4 	.word	0x080160c4
 800d05c:	080160ec 	.word	0x080160ec
 800d060:	2000033a 	.word	0x2000033a

0800d064 <interfaceUpdate>:

void interfaceUpdate(uint8_t mode) {
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	0002      	movs	r2, r0
 800d06c:	1dfb      	adds	r3, r7, #7
 800d06e:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_FULL) {
 800d070:	1dfb      	adds	r3, r7, #7
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10a      	bne.n	800d08e <interfaceUpdate+0x2a>

		EPD_1IN54_V2_Init();
 800d078:	f7fb f90e 	bl	8008298 <EPD_1IN54_V2_Init>
		Paint_SelectImage(BlackImage);
 800d07c:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <interfaceUpdate+0x58>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	0018      	movs	r0, r3
 800d082:	f7fb fb4d 	bl	8008720 <Paint_SelectImage>

		interfaceUpdateMode = INTERFACE_UPDATE_FULL;
 800d086:	4b0e      	ldr	r3, [pc, #56]	; (800d0c0 <interfaceUpdate+0x5c>)
 800d088:	2200      	movs	r2, #0
 800d08a:	701a      	strb	r2, [r3, #0]
		Paint_SelectImage(BlackImage);

		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
	}

}
 800d08c:	e012      	b.n	800d0b4 <interfaceUpdate+0x50>
	} else if (mode == INTERFACE_UPDATE_PARTIAL) {
 800d08e:	1dfb      	adds	r3, r7, #7
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d10e      	bne.n	800d0b4 <interfaceUpdate+0x50>
		EPD_1IN54_V2_Init();
 800d096:	f7fb f8ff 	bl	8008298 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800d09a:	4b08      	ldr	r3, [pc, #32]	; (800d0bc <interfaceUpdate+0x58>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f7fb f9da 	bl	8008458 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(BlackImage);
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <interfaceUpdate+0x58>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	0018      	movs	r0, r3
 800d0aa:	f7fb fb39 	bl	8008720 <Paint_SelectImage>
		interfaceUpdateMode = INTERFACE_UPDATE_PARTIAL;
 800d0ae:	4b04      	ldr	r3, [pc, #16]	; (800d0c0 <interfaceUpdate+0x5c>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
}
 800d0b4:	46c0      	nop			; (mov r8, r8)
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	b002      	add	sp, #8
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	20000630 	.word	0x20000630
 800d0c0:	20000638 	.word	0x20000638

0800d0c4 <interfaceWrite>:

void interfaceWrite() {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0

	if (interfaceUpdateMode == INTERFACE_UPDATE_PARTIAL) {
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <interfaceWrite+0x34>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d105      	bne.n	800d0de <interfaceWrite+0x1a>

		EPD_1IN54_V2_DisplayPart(BlackImage);
 800d0d2:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <interfaceWrite+0x38>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	0018      	movs	r0, r3
 800d0d8:	f7fb fa48 	bl	800856c <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(BlackImage);

	}

}
 800d0dc:	e009      	b.n	800d0f2 <interfaceWrite+0x2e>
	} else if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {
 800d0de:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <interfaceWrite+0x34>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <interfaceWrite+0x2e>
		EPD_1IN54_V2_Display(BlackImage);
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <interfaceWrite+0x38>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	f7fb f964 	bl	80083ba <EPD_1IN54_V2_Display>
}
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20000638 	.word	0x20000638
 800d0fc:	20000630 	.word	0x20000630

0800d100 <interfaceClear>:

void interfaceClear() {
 800d100:	b580      	push	{r7, lr}
 800d102:	af00      	add	r7, sp, #0
	Paint_Clear(colorMain);
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <interfaceClear+0x18>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	0018      	movs	r0, r3
 800d10e:	f7fb fcb9 	bl	8008a84 <Paint_Clear>
}
 800d112:	46c0      	nop			; (mov r8, r8)
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000033a 	.word	0x2000033a

0800d11c <interfaceDrawLayer>:

void interfaceDrawLayer(uint8_t layer) {
 800d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11e:	46ce      	mov	lr, r9
 800d120:	4647      	mov	r7, r8
 800d122:	b580      	push	{r7, lr}
 800d124:	b08b      	sub	sp, #44	; 0x2c
 800d126:	af04      	add	r7, sp, #16
 800d128:	0002      	movs	r2, r0
 800d12a:	1dfb      	adds	r3, r7, #7
 800d12c:	701a      	strb	r2, [r3, #0]

	if (layer == 1) { //boards
 800d12e:	1dfb      	adds	r3, r7, #7
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d000      	beq.n	800d138 <interfaceDrawLayer+0x1c>
 800d136:	e2cb      	b.n	800d6d0 <interfaceDrawLayer+0x5b4>
		//										MOON PHASE

		if (showMoonPhase == 1) {
 800d138:	4b27      	ldr	r3, [pc, #156]	; (800d1d8 <interfaceDrawLayer+0xbc>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d000      	beq.n	800d142 <interfaceDrawLayer+0x26>
 800d140:	e096      	b.n	800d270 <interfaceDrawLayer+0x154>

			//		moonPhase = 51;

			Paint_DrawCircle(moonPhaseX, moonPhaseY, moonPhaseRadius,
 800d142:	4b26      	ldr	r3, [pc, #152]	; (800d1dc <interfaceDrawLayer+0xc0>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	b298      	uxth	r0, r3
 800d148:	4b25      	ldr	r3, [pc, #148]	; (800d1e0 <interfaceDrawLayer+0xc4>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	b299      	uxth	r1, r3
 800d14e:	4b25      	ldr	r3, [pc, #148]	; (800d1e4 <interfaceDrawLayer+0xc8>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	b29a      	uxth	r2, r3
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <interfaceDrawLayer+0xcc>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	2401      	movs	r4, #1
 800d15e:	9401      	str	r4, [sp, #4]
 800d160:	2401      	movs	r4, #1
 800d162:	9400      	str	r4, [sp, #0]
 800d164:	f7fc f89a 	bl	800929c <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			float moonPhaseShift;

			if (moonPhase < 50) {
 800d168:	4b20      	ldr	r3, [pc, #128]	; (800d1ec <interfaceDrawLayer+0xd0>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b31      	cmp	r3, #49	; 0x31
 800d16e:	d843      	bhi.n	800d1f8 <interfaceDrawLayer+0xdc>

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800d170:	4b1e      	ldr	r3, [pc, #120]	; (800d1ec <interfaceDrawLayer+0xd0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	0018      	movs	r0, r3
 800d176:	f7f4 f909 	bl	800138c <__aeabi_ui2f>
 800d17a:	1c03      	adds	r3, r0, #0
 800d17c:	491c      	ldr	r1, [pc, #112]	; (800d1f0 <interfaceDrawLayer+0xd4>)
 800d17e:	1c18      	adds	r0, r3, #0
 800d180:	f7f3 fbf2 	bl	8000968 <__aeabi_fdiv>
 800d184:	1c03      	adds	r3, r0, #0
 800d186:	1c1c      	adds	r4, r3, #0
 800d188:	4b16      	ldr	r3, [pc, #88]	; (800d1e4 <interfaceDrawLayer+0xc8>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	0018      	movs	r0, r3
 800d18e:	f7f4 f8b7 	bl	8001300 <__aeabi_i2f>
 800d192:	1c03      	adds	r3, r0, #0
 800d194:	1c19      	adds	r1, r3, #0
 800d196:	1c20      	adds	r0, r4, #0
 800d198:	f7f3 fdb0 	bl	8000cfc <__aeabi_fmul>
 800d19c:	1c03      	adds	r3, r0, #0
 800d19e:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX - (uint32_t) moonPhaseShift,
 800d1a0:	4b0e      	ldr	r3, [pc, #56]	; (800d1dc <interfaceDrawLayer+0xc0>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	b29c      	uxth	r4, r3
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7f3 f9ee 	bl	8000588 <__aeabi_f2uiz>
 800d1ac:	0003      	movs	r3, r0
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	1ae3      	subs	r3, r4, r3
 800d1b2:	b298      	uxth	r0, r3
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <interfaceDrawLayer+0xc4>)
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	b299      	uxth	r1, r3
 800d1ba:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <interfaceDrawLayer+0xc8>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	4b0c      	ldr	r3, [pc, #48]	; (800d1f4 <interfaceDrawLayer+0xd8>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	2401      	movs	r4, #1
 800d1ca:	9401      	str	r4, [sp, #4]
 800d1cc:	2401      	movs	r4, #1
 800d1ce:	9400      	str	r4, [sp, #0]
 800d1d0:	f7fc f864 	bl	800929c <Paint_DrawCircle>
 800d1d4:	e04c      	b.n	800d270 <interfaceDrawLayer+0x154>
 800d1d6:	46c0      	nop			; (mov r8, r8)
 800d1d8:	200003b8 	.word	0x200003b8
 800d1dc:	200006ff 	.word	0x200006ff
 800d1e0:	200006a8 	.word	0x200006a8
 800d1e4:	20000218 	.word	0x20000218
 800d1e8:	200006b3 	.word	0x200006b3
 800d1ec:	200003b4 	.word	0x200003b4
 800d1f0:	41c80000 	.word	0x41c80000
 800d1f4:	2000033a 	.word	0x2000033a
						moonPhaseY, moonPhaseRadius, colorMain, DOT_PIXEL_1X1,
						DRAW_FILL_FULL);

			} else if (moonPhase > 50) {
 800d1f8:	4bf3      	ldr	r3, [pc, #972]	; (800d5c8 <interfaceDrawLayer+0x4ac>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b32      	cmp	r3, #50	; 0x32
 800d1fe:	d937      	bls.n	800d270 <interfaceDrawLayer+0x154>
				moonPhase = 100 - moonPhase;
 800d200:	4bf1      	ldr	r3, [pc, #964]	; (800d5c8 <interfaceDrawLayer+0x4ac>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2264      	movs	r2, #100	; 0x64
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	4bef      	ldr	r3, [pc, #956]	; (800d5c8 <interfaceDrawLayer+0x4ac>)
 800d20a:	601a      	str	r2, [r3, #0]

				moonPhaseShift = ((float) moonPhase / 25) * moonPhaseRadius;
 800d20c:	4bee      	ldr	r3, [pc, #952]	; (800d5c8 <interfaceDrawLayer+0x4ac>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	0018      	movs	r0, r3
 800d212:	f7f4 f8bb 	bl	800138c <__aeabi_ui2f>
 800d216:	1c03      	adds	r3, r0, #0
 800d218:	49ec      	ldr	r1, [pc, #944]	; (800d5cc <interfaceDrawLayer+0x4b0>)
 800d21a:	1c18      	adds	r0, r3, #0
 800d21c:	f7f3 fba4 	bl	8000968 <__aeabi_fdiv>
 800d220:	1c03      	adds	r3, r0, #0
 800d222:	1c1c      	adds	r4, r3, #0
 800d224:	4bea      	ldr	r3, [pc, #936]	; (800d5d0 <interfaceDrawLayer+0x4b4>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	0018      	movs	r0, r3
 800d22a:	f7f4 f869 	bl	8001300 <__aeabi_i2f>
 800d22e:	1c03      	adds	r3, r0, #0
 800d230:	1c19      	adds	r1, r3, #0
 800d232:	1c20      	adds	r0, r4, #0
 800d234:	f7f3 fd62 	bl	8000cfc <__aeabi_fmul>
 800d238:	1c03      	adds	r3, r0, #0
 800d23a:	60fb      	str	r3, [r7, #12]
				Paint_DrawCircle(moonPhaseX + (uint32_t) moonPhaseShift,
 800d23c:	4be5      	ldr	r3, [pc, #916]	; (800d5d4 <interfaceDrawLayer+0x4b8>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	b29c      	uxth	r4, r3
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f7f3 f9a0 	bl	8000588 <__aeabi_f2uiz>
 800d248:	0003      	movs	r3, r0
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	18e3      	adds	r3, r4, r3
 800d24e:	b298      	uxth	r0, r3
 800d250:	4be1      	ldr	r3, [pc, #900]	; (800d5d8 <interfaceDrawLayer+0x4bc>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	b299      	uxth	r1, r3
 800d256:	4bde      	ldr	r3, [pc, #888]	; (800d5d0 <interfaceDrawLayer+0x4b4>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	4bdf      	ldr	r3, [pc, #892]	; (800d5dc <interfaceDrawLayer+0x4c0>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	b29b      	uxth	r3, r3
 800d264:	2401      	movs	r4, #1
 800d266:	9401      	str	r4, [sp, #4]
 800d268:	2401      	movs	r4, #1
 800d26a:	9400      	str	r4, [sp, #0]
 800d26c:	f7fc f816 	bl	800929c <Paint_DrawCircle>

		}

		//										METER

		if (showMeter == 1) {
 800d270:	4bdb      	ldr	r3, [pc, #876]	; (800d5e0 <interfaceDrawLayer+0x4c4>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b01      	cmp	r3, #1
 800d276:	d11b      	bne.n	800d2b0 <interfaceDrawLayer+0x194>
			Paint_DrawRectangle(meterX, meterY, meterX + 82, meterY + 52,
 800d278:	4bda      	ldr	r3, [pc, #872]	; (800d5e4 <interfaceDrawLayer+0x4c8>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b298      	uxth	r0, r3
 800d27e:	4bda      	ldr	r3, [pc, #872]	; (800d5e8 <interfaceDrawLayer+0x4cc>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	b299      	uxth	r1, r3
 800d284:	4bd7      	ldr	r3, [pc, #860]	; (800d5e4 <interfaceDrawLayer+0x4c8>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	b29b      	uxth	r3, r3
 800d28a:	3352      	adds	r3, #82	; 0x52
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	4bd6      	ldr	r3, [pc, #856]	; (800d5e8 <interfaceDrawLayer+0x4cc>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	b29b      	uxth	r3, r3
 800d294:	3334      	adds	r3, #52	; 0x34
 800d296:	b29c      	uxth	r4, r3
 800d298:	4bd4      	ldr	r3, [pc, #848]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	2500      	movs	r5, #0
 800d2a2:	9502      	str	r5, [sp, #8]
 800d2a4:	2502      	movs	r5, #2
 800d2a6:	9501      	str	r5, [sp, #4]
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	0023      	movs	r3, r4
 800d2ac:	f7fb ff2a 	bl	8009104 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

		//										DIGITAL INTERFACE FIELD

		if (showDigitalInterface == 1) {
 800d2b0:	4bcf      	ldr	r3, [pc, #828]	; (800d5f0 <interfaceDrawLayer+0x4d4>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d11b      	bne.n	800d2f0 <interfaceDrawLayer+0x1d4>
			Paint_DrawRectangle(digitalX, digitalY, digitalX + 80,
 800d2b8:	4bce      	ldr	r3, [pc, #824]	; (800d5f4 <interfaceDrawLayer+0x4d8>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	b298      	uxth	r0, r3
 800d2be:	4bce      	ldr	r3, [pc, #824]	; (800d5f8 <interfaceDrawLayer+0x4dc>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	b299      	uxth	r1, r3
 800d2c4:	4bcb      	ldr	r3, [pc, #812]	; (800d5f4 <interfaceDrawLayer+0x4d8>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	3350      	adds	r3, #80	; 0x50
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	4bca      	ldr	r3, [pc, #808]	; (800d5f8 <interfaceDrawLayer+0x4dc>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	3325      	adds	r3, #37	; 0x25
 800d2d6:	b29c      	uxth	r4, r3
 800d2d8:	4bc4      	ldr	r3, [pc, #784]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2501      	movs	r5, #1
 800d2e2:	9502      	str	r5, [sp, #8]
 800d2e4:	2501      	movs	r5, #1
 800d2e6:	9501      	str	r5, [sp, #4]
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	0023      	movs	r3, r4
 800d2ec:	f7fb ff0a 	bl	8009104 <Paint_DrawRectangle>

		}

		//										TEMPERATURE FIELD

		if (showThermometer == 1) {
 800d2f0:	4bc2      	ldr	r3, [pc, #776]	; (800d5fc <interfaceDrawLayer+0x4e0>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d11d      	bne.n	800d334 <interfaceDrawLayer+0x218>
			Paint_DrawRectangle(temperatureX - 7, temperatureY,
 800d2f8:	4bc1      	ldr	r3, [pc, #772]	; (800d600 <interfaceDrawLayer+0x4e4>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	3b07      	subs	r3, #7
 800d300:	b298      	uxth	r0, r3
 800d302:	4bc0      	ldr	r3, [pc, #768]	; (800d604 <interfaceDrawLayer+0x4e8>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	b299      	uxth	r1, r3
 800d308:	4bbd      	ldr	r3, [pc, #756]	; (800d600 <interfaceDrawLayer+0x4e4>)
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3322      	adds	r3, #34	; 0x22
 800d310:	b29a      	uxth	r2, r3
 800d312:	4bbc      	ldr	r3, [pc, #752]	; (800d604 <interfaceDrawLayer+0x4e8>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	330c      	adds	r3, #12
 800d31a:	b29c      	uxth	r4, r3
 800d31c:	4bb3      	ldr	r3, [pc, #716]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	b2db      	uxtb	r3, r3
 800d322:	b29b      	uxth	r3, r3
 800d324:	2501      	movs	r5, #1
 800d326:	9502      	str	r5, [sp, #8]
 800d328:	2502      	movs	r5, #2
 800d32a:	9501      	str	r5, [sp, #4]
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	0023      	movs	r3, r4
 800d330:	f7fb fee8 	bl	8009104 <Paint_DrawRectangle>
					DOT_PIXEL_2X2, DRAW_FILL_FULL); // date window
		}

		//										HUMIDITY BAR FIELD

		if (showHigrometer == 1) {
 800d334:	4bb4      	ldr	r3, [pc, #720]	; (800d608 <interfaceDrawLayer+0x4ec>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d11b      	bne.n	800d374 <interfaceDrawLayer+0x258>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800d33c:	4bb3      	ldr	r3, [pc, #716]	; (800d60c <interfaceDrawLayer+0x4f0>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	b298      	uxth	r0, r3
 800d342:	4bb3      	ldr	r3, [pc, #716]	; (800d610 <interfaceDrawLayer+0x4f4>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	b299      	uxth	r1, r3
 800d348:	4bb0      	ldr	r3, [pc, #704]	; (800d60c <interfaceDrawLayer+0x4f0>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3305      	adds	r3, #5
 800d350:	b29a      	uxth	r2, r3
 800d352:	4baf      	ldr	r3, [pc, #700]	; (800d610 <interfaceDrawLayer+0x4f4>)
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	b29b      	uxth	r3, r3
 800d358:	3332      	adds	r3, #50	; 0x32
 800d35a:	b29c      	uxth	r4, r3
 800d35c:	4ba3      	ldr	r3, [pc, #652]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	b2db      	uxtb	r3, r3
 800d362:	b29b      	uxth	r3, r3
 800d364:	2500      	movs	r5, #0
 800d366:	9502      	str	r5, [sp, #8]
 800d368:	2501      	movs	r5, #1
 800d36a:	9501      	str	r5, [sp, #4]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	0023      	movs	r3, r4
 800d370:	f7fb fec8 	bl	8009104 <Paint_DrawRectangle>
					humidityY + 50, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
		}

		//										COMPASS DIGITAL
		if (showNaviDigital == 1) {
 800d374:	4ba7      	ldr	r3, [pc, #668]	; (800d614 <interfaceDrawLayer+0x4f8>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d139      	bne.n	800d3f0 <interfaceDrawLayer+0x2d4>
			Paint_DrawRectangle(compassX, compassY, compassX + 48,
 800d37c:	4ba6      	ldr	r3, [pc, #664]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	b298      	uxth	r0, r3
 800d382:	4ba6      	ldr	r3, [pc, #664]	; (800d61c <interfaceDrawLayer+0x500>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	b299      	uxth	r1, r3
 800d388:	4ba3      	ldr	r3, [pc, #652]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3330      	adds	r3, #48	; 0x30
 800d390:	b29a      	uxth	r2, r3
 800d392:	4ba2      	ldr	r3, [pc, #648]	; (800d61c <interfaceDrawLayer+0x500>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	332c      	adds	r3, #44	; 0x2c
 800d39a:	b29c      	uxth	r4, r3
 800d39c:	4b93      	ldr	r3, [pc, #588]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	9502      	str	r5, [sp, #8]
 800d3a8:	2501      	movs	r5, #1
 800d3aa:	9501      	str	r5, [sp, #4]
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	0023      	movs	r3, r4
 800d3b0:	f7fb fea8 	bl	8009104 <Paint_DrawRectangle>
					compassY + 44, colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawLine(compassX, compassY + 29, compassX + 48,
 800d3b4:	4b98      	ldr	r3, [pc, #608]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	b298      	uxth	r0, r3
 800d3ba:	4b98      	ldr	r3, [pc, #608]	; (800d61c <interfaceDrawLayer+0x500>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	331d      	adds	r3, #29
 800d3c2:	b299      	uxth	r1, r3
 800d3c4:	4b94      	ldr	r3, [pc, #592]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	3330      	adds	r3, #48	; 0x30
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	4b93      	ldr	r3, [pc, #588]	; (800d61c <interfaceDrawLayer+0x500>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	331d      	adds	r3, #29
 800d3d6:	b29c      	uxth	r4, r3
 800d3d8:	4b84      	ldr	r3, [pc, #528]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	9502      	str	r5, [sp, #8]
 800d3e4:	2501      	movs	r5, #1
 800d3e6:	9501      	str	r5, [sp, #4]
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	0023      	movs	r3, r4
 800d3ec:	f7fb fcc2 	bl	8008d74 <Paint_DrawLine>
					LINE_STYLE_SOLID);
		}

		//										COMPASS ANALOG

		if (showNaviAnalog == 1) {
 800d3f0:	4b8b      	ldr	r3, [pc, #556]	; (800d620 <interfaceDrawLayer+0x504>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d123      	bne.n	800d440 <interfaceDrawLayer+0x324>
			Paint_DrawCircle(compassX, compassY, compassBoardRadius,
 800d3f8:	4b87      	ldr	r3, [pc, #540]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b298      	uxth	r0, r3
 800d3fe:	4b87      	ldr	r3, [pc, #540]	; (800d61c <interfaceDrawLayer+0x500>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	b299      	uxth	r1, r3
 800d404:	4b87      	ldr	r3, [pc, #540]	; (800d624 <interfaceDrawLayer+0x508>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	b29a      	uxth	r2, r3
 800d40a:	4b78      	ldr	r3, [pc, #480]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	b29b      	uxth	r3, r3
 800d412:	2400      	movs	r4, #0
 800d414:	9401      	str	r4, [sp, #4]
 800d416:	2401      	movs	r4, #1
 800d418:	9400      	str	r4, [sp, #0]
 800d41a:	f7fb ff3f 	bl	800929c <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(compassX, compassY, 2, colorSecond, DOT_PIXEL_1X1,
 800d41e:	4b7e      	ldr	r3, [pc, #504]	; (800d618 <interfaceDrawLayer+0x4fc>)
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b298      	uxth	r0, r3
 800d424:	4b7d      	ldr	r3, [pc, #500]	; (800d61c <interfaceDrawLayer+0x500>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	b299      	uxth	r1, r3
 800d42a:	4b70      	ldr	r3, [pc, #448]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	b29b      	uxth	r3, r3
 800d432:	2201      	movs	r2, #1
 800d434:	9201      	str	r2, [sp, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	9200      	str	r2, [sp, #0]
 800d43a:	2202      	movs	r2, #2
 800d43c:	f7fb ff2e 	bl	800929c <Paint_DrawCircle>

		}

		//										MAIN BOARD

		Paint_DrawCircle(100, 100, mainBoardRadius, colorSecond, DOT_PIXEL_1X1,
 800d440:	4b79      	ldr	r3, [pc, #484]	; (800d628 <interfaceDrawLayer+0x50c>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	b29a      	uxth	r2, r3
 800d446:	4b69      	ldr	r3, [pc, #420]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	2100      	movs	r1, #0
 800d450:	9101      	str	r1, [sp, #4]
 800d452:	2101      	movs	r1, #1
 800d454:	9100      	str	r1, [sp, #0]
 800d456:	2164      	movs	r1, #100	; 0x64
 800d458:	2064      	movs	r0, #100	; 0x64
 800d45a:	f7fb ff1f 	bl	800929c <Paint_DrawCircle>
				DRAW_FILL_EMPTY); //main

		//										CHRONO DECIMALS BOARD

		if (showChrono == 1) {
 800d45e:	4b73      	ldr	r3, [pc, #460]	; (800d62c <interfaceDrawLayer+0x510>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d14f      	bne.n	800d506 <interfaceDrawLayer+0x3ea>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800d466:	4b72      	ldr	r3, [pc, #456]	; (800d630 <interfaceDrawLayer+0x514>)
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	b298      	uxth	r0, r3
 800d46c:	4b71      	ldr	r3, [pc, #452]	; (800d634 <interfaceDrawLayer+0x518>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b299      	uxth	r1, r3
 800d472:	4b71      	ldr	r3, [pc, #452]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b29b      	uxth	r3, r3
 800d478:	3302      	adds	r3, #2
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	4b5b      	ldr	r3, [pc, #364]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	b29b      	uxth	r3, r3
 800d484:	2400      	movs	r4, #0
 800d486:	9401      	str	r4, [sp, #4]
 800d488:	2401      	movs	r4, #1
 800d48a:	9400      	str	r4, [sp, #0]
 800d48c:	f7fb ff06 	bl	800929c <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY,
 800d490:	4b67      	ldr	r3, [pc, #412]	; (800d630 <interfaceDrawLayer+0x514>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	b298      	uxth	r0, r3
 800d496:	4b67      	ldr	r3, [pc, #412]	; (800d634 <interfaceDrawLayer+0x518>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b299      	uxth	r1, r3
 800d49c:	4b66      	ldr	r3, [pc, #408]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	4b52      	ldr	r3, [pc, #328]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	2401      	movs	r4, #1
 800d4ac:	9401      	str	r4, [sp, #4]
 800d4ae:	2401      	movs	r4, #1
 800d4b0:	9400      	str	r4, [sp, #0]
 800d4b2:	f7fb fef3 	bl	800929c <Paint_DrawCircle>
					smallBoardRadius, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_FULL); //chrono decimals

			//										CHRONO MINUTES BOARD

			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800d4b6:	4b61      	ldr	r3, [pc, #388]	; (800d63c <interfaceDrawLayer+0x520>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	b298      	uxth	r0, r3
 800d4bc:	4b60      	ldr	r3, [pc, #384]	; (800d640 <interfaceDrawLayer+0x524>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	b299      	uxth	r1, r3
 800d4c2:	4b5d      	ldr	r3, [pc, #372]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	4b47      	ldr	r3, [pc, #284]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	2400      	movs	r4, #0
 800d4d6:	9401      	str	r4, [sp, #4]
 800d4d8:	2401      	movs	r4, #1
 800d4da:	9400      	str	r4, [sp, #0]
 800d4dc:	f7fb fede 	bl	800929c <Paint_DrawCircle>
					smallBoardRadius + 2, colorSecond, DOT_PIXEL_1X1,
					DRAW_FILL_EMPTY);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY,
 800d4e0:	4b56      	ldr	r3, [pc, #344]	; (800d63c <interfaceDrawLayer+0x520>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	b298      	uxth	r0, r3
 800d4e6:	4b56      	ldr	r3, [pc, #344]	; (800d640 <interfaceDrawLayer+0x524>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b299      	uxth	r1, r3
 800d4ec:	4b52      	ldr	r3, [pc, #328]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	4b3e      	ldr	r3, [pc, #248]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	2401      	movs	r4, #1
 800d4fc:	9401      	str	r4, [sp, #4]
 800d4fe:	2401      	movs	r4, #1
 800d500:	9400      	str	r4, [sp, #0]
 800d502:	f7fb fecb 	bl	800929c <Paint_DrawCircle>
					DRAW_FILL_FULL); //chrono minutes
		}

		//										SECONDS BOARD

		if (showSeconds == 1) {
 800d506:	4b4f      	ldr	r3, [pc, #316]	; (800d644 <interfaceDrawLayer+0x528>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d127      	bne.n	800d55e <interfaceDrawLayer+0x442>
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius + 2,
 800d50e:	4b4e      	ldr	r3, [pc, #312]	; (800d648 <interfaceDrawLayer+0x52c>)
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	b298      	uxth	r0, r3
 800d514:	4b4d      	ldr	r3, [pc, #308]	; (800d64c <interfaceDrawLayer+0x530>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	b299      	uxth	r1, r3
 800d51a:	4b47      	ldr	r3, [pc, #284]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3302      	adds	r3, #2
 800d522:	b29a      	uxth	r2, r3
 800d524:	4b31      	ldr	r3, [pc, #196]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	2400      	movs	r4, #0
 800d52e:	9401      	str	r4, [sp, #4]
 800d530:	2401      	movs	r4, #1
 800d532:	9400      	str	r4, [sp, #0]
 800d534:	f7fb feb2 	bl	800929c <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawCircle(secondsStartX, secondsStartY, smallBoardRadius,
 800d538:	4b43      	ldr	r3, [pc, #268]	; (800d648 <interfaceDrawLayer+0x52c>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b298      	uxth	r0, r3
 800d53e:	4b43      	ldr	r3, [pc, #268]	; (800d64c <interfaceDrawLayer+0x530>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	b299      	uxth	r1, r3
 800d544:	4b3c      	ldr	r3, [pc, #240]	; (800d638 <interfaceDrawLayer+0x51c>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b28      	ldr	r3, [pc, #160]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	b29b      	uxth	r3, r3
 800d552:	2401      	movs	r4, #1
 800d554:	9401      	str	r4, [sp, #4]
 800d556:	2401      	movs	r4, #1
 800d558:	9400      	str	r4, [sp, #0]
 800d55a:	f7fb fe9f 	bl	800929c <Paint_DrawCircle>
					colorSecond, DOT_PIXEL_1X1, DRAW_FILL_FULL); //seconds
		}

		//										DATE WINDOW
		if (showDate == 1) {
 800d55e:	4b3c      	ldr	r3, [pc, #240]	; (800d650 <interfaceDrawLayer+0x534>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d11f      	bne.n	800d5a6 <interfaceDrawLayer+0x48a>
			Paint_DrawRectangle(dateX - 3, dateY - 3, dateX + 17, dateY + 14,
 800d566:	4b3b      	ldr	r3, [pc, #236]	; (800d654 <interfaceDrawLayer+0x538>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	3b03      	subs	r3, #3
 800d56e:	b298      	uxth	r0, r3
 800d570:	4b39      	ldr	r3, [pc, #228]	; (800d658 <interfaceDrawLayer+0x53c>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	b29b      	uxth	r3, r3
 800d576:	3b03      	subs	r3, #3
 800d578:	b299      	uxth	r1, r3
 800d57a:	4b36      	ldr	r3, [pc, #216]	; (800d654 <interfaceDrawLayer+0x538>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	3311      	adds	r3, #17
 800d582:	b29a      	uxth	r2, r3
 800d584:	4b34      	ldr	r3, [pc, #208]	; (800d658 <interfaceDrawLayer+0x53c>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	b29b      	uxth	r3, r3
 800d58a:	330e      	adds	r3, #14
 800d58c:	b29c      	uxth	r4, r3
 800d58e:	4b17      	ldr	r3, [pc, #92]	; (800d5ec <interfaceDrawLayer+0x4d0>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	b2db      	uxtb	r3, r3
 800d594:	b29b      	uxth	r3, r3
 800d596:	2500      	movs	r5, #0
 800d598:	9502      	str	r5, [sp, #8]
 800d59a:	2502      	movs	r5, #2
 800d59c:	9501      	str	r5, [sp, #4]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	0023      	movs	r3, r4
 800d5a2:	f7fb fdaf 	bl	8009104 <Paint_DrawRectangle>
					colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window
		}

		//										DOTS

		if (showChrono == 1) {
 800d5a6:	4b21      	ldr	r3, [pc, #132]	; (800d62c <interfaceDrawLayer+0x510>)
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d000      	beq.n	800d5b0 <interfaceDrawLayer+0x494>
 800d5ae:	e07d      	b.n	800d6ac <interfaceDrawLayer+0x590>
			Paint_DrawCircle(chronoDecimalsStartX, chronoDecimalsStartY, 2,
 800d5b0:	4b1f      	ldr	r3, [pc, #124]	; (800d630 <interfaceDrawLayer+0x514>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	b298      	uxth	r0, r3
 800d5b6:	4b1f      	ldr	r3, [pc, #124]	; (800d634 <interfaceDrawLayer+0x518>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	b299      	uxth	r1, r3
 800d5bc:	4b07      	ldr	r3, [pc, #28]	; (800d5dc <interfaceDrawLayer+0x4c0>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	e049      	b.n	800d65c <interfaceDrawLayer+0x540>
 800d5c8:	200003b4 	.word	0x200003b4
 800d5cc:	41c80000 	.word	0x41c80000
 800d5d0:	20000218 	.word	0x20000218
 800d5d4:	200006ff 	.word	0x200006ff
 800d5d8:	200006a8 	.word	0x200006a8
 800d5dc:	2000033a 	.word	0x2000033a
 800d5e0:	200006e9 	.word	0x200006e9
 800d5e4:	200003b0 	.word	0x200003b0
 800d5e8:	200004bf 	.word	0x200004bf
 800d5ec:	200006b3 	.word	0x200006b3
 800d5f0:	200006fe 	.word	0x200006fe
 800d5f4:	20000641 	.word	0x20000641
 800d5f8:	200003ad 	.word	0x200003ad
 800d5fc:	20000697 	.word	0x20000697
 800d600:	2000062d 	.word	0x2000062d
 800d604:	2000036c 	.word	0x2000036c
 800d608:	20000642 	.word	0x20000642
 800d60c:	2000070a 	.word	0x2000070a
 800d610:	20000442 	.word	0x20000442
 800d614:	20000614 	.word	0x20000614
 800d618:	200006e8 	.word	0x200006e8
 800d61c:	20000450 	.word	0x20000450
 800d620:	20000208 	.word	0x20000208
 800d624:	20000640 	.word	0x20000640
 800d628:	20000628 	.word	0x20000628
 800d62c:	200003ac 	.word	0x200003ac
 800d630:	20000645 	.word	0x20000645
 800d634:	20000646 	.word	0x20000646
 800d638:	200001f0 	.word	0x200001f0
 800d63c:	200006f4 	.word	0x200006f4
 800d640:	200006b4 	.word	0x200006b4
 800d644:	200001ff 	.word	0x200001ff
 800d648:	200006ea 	.word	0x200006ea
 800d64c:	2000037b 	.word	0x2000037b
 800d650:	20000212 	.word	0x20000212
 800d654:	200006fa 	.word	0x200006fa
 800d658:	20000268 	.word	0x20000268
 800d65c:	9201      	str	r2, [sp, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	9200      	str	r2, [sp, #0]
 800d662:	2202      	movs	r2, #2
 800d664:	f7fb fe1a 	bl	800929c <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(chronoMinutesStartX, chronoMinutesStartY, 2,
 800d668:	4b99      	ldr	r3, [pc, #612]	; (800d8d0 <interfaceDrawLayer+0x7b4>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	b298      	uxth	r0, r3
 800d66e:	4b99      	ldr	r3, [pc, #612]	; (800d8d4 <interfaceDrawLayer+0x7b8>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	b299      	uxth	r1, r3
 800d674:	4b98      	ldr	r3, [pc, #608]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	2201      	movs	r2, #1
 800d67e:	9201      	str	r2, [sp, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	9200      	str	r2, [sp, #0]
 800d684:	2202      	movs	r2, #2
 800d686:	f7fb fe09 	bl	800929c <Paint_DrawCircle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawCircle(secondsStartX, secondsStartY, 2, colorMain,
 800d68a:	4b94      	ldr	r3, [pc, #592]	; (800d8dc <interfaceDrawLayer+0x7c0>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	b298      	uxth	r0, r3
 800d690:	4b93      	ldr	r3, [pc, #588]	; (800d8e0 <interfaceDrawLayer+0x7c4>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	b299      	uxth	r1, r3
 800d696:	4b90      	ldr	r3, [pc, #576]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	2201      	movs	r2, #1
 800d6a0:	9201      	str	r2, [sp, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	9200      	str	r2, [sp, #0]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f7fb fdf8 	bl	800929c <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);
		}

		Paint_DrawString_EN(82, 7, "libra", &Font12, colorSecond, colorMain);
 800d6ac:	4b8d      	ldr	r3, [pc, #564]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	4a88      	ldr	r2, [pc, #544]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d6b6:	7812      	ldrb	r2, [r2, #0]
 800d6b8:	b2d2      	uxtb	r2, r2
 800d6ba:	b292      	uxth	r2, r2
 800d6bc:	488a      	ldr	r0, [pc, #552]	; (800d8e8 <interfaceDrawLayer+0x7cc>)
 800d6be:	498b      	ldr	r1, [pc, #556]	; (800d8ec <interfaceDrawLayer+0x7d0>)
 800d6c0:	9201      	str	r2, [sp, #4]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	0003      	movs	r3, r0
 800d6c6:	000a      	movs	r2, r1
 800d6c8:	2107      	movs	r1, #7
 800d6ca:	2052      	movs	r0, #82	; 0x52
 800d6cc:	f7fc f91c 	bl	8009908 <Paint_DrawString_EN>
		//^logo
	}

	if (layer == 2) { //indexes
 800d6d0:	1dfb      	adds	r3, r7, #7
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	d001      	beq.n	800d6dc <interfaceDrawLayer+0x5c0>
 800d6d8:	f001 fb06 	bl	800ece8 <interfaceDrawLayer+0x1bcc>
		//										METER INDEX

		if (showMeter == 1) {
 800d6dc:	4b84      	ldr	r3, [pc, #528]	; (800d8f0 <interfaceDrawLayer+0x7d4>)
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d14d      	bne.n	800d780 <interfaceDrawLayer+0x664>
			Paint_DrawString_EN(meterX + 65, meterY + 2, "V", &Font16,
 800d6e4:	4b83      	ldr	r3, [pc, #524]	; (800d8f4 <interfaceDrawLayer+0x7d8>)
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3341      	adds	r3, #65	; 0x41
 800d6ec:	b298      	uxth	r0, r3
 800d6ee:	4b82      	ldr	r3, [pc, #520]	; (800d8f8 <interfaceDrawLayer+0x7dc>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3302      	adds	r3, #2
 800d6f6:	b299      	uxth	r1, r3
 800d6f8:	4b7a      	ldr	r3, [pc, #488]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4a75      	ldr	r2, [pc, #468]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	b2d2      	uxtb	r2, r2
 800d706:	b292      	uxth	r2, r2
 800d708:	4d7c      	ldr	r5, [pc, #496]	; (800d8fc <interfaceDrawLayer+0x7e0>)
 800d70a:	4c7d      	ldr	r4, [pc, #500]	; (800d900 <interfaceDrawLayer+0x7e4>)
 800d70c:	9201      	str	r2, [sp, #4]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	002b      	movs	r3, r5
 800d712:	0022      	movs	r2, r4
 800d714:	f7fc f8f8 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 18, "Vd", &Font16,
 800d718:	4b76      	ldr	r3, [pc, #472]	; (800d8f4 <interfaceDrawLayer+0x7d8>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3338      	adds	r3, #56	; 0x38
 800d720:	b298      	uxth	r0, r3
 800d722:	4b75      	ldr	r3, [pc, #468]	; (800d8f8 <interfaceDrawLayer+0x7dc>)
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	b29b      	uxth	r3, r3
 800d728:	3312      	adds	r3, #18
 800d72a:	b299      	uxth	r1, r3
 800d72c:	4b6d      	ldr	r3, [pc, #436]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	b2db      	uxtb	r3, r3
 800d732:	b29b      	uxth	r3, r3
 800d734:	4a68      	ldr	r2, [pc, #416]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d736:	7812      	ldrb	r2, [r2, #0]
 800d738:	b2d2      	uxtb	r2, r2
 800d73a:	b292      	uxth	r2, r2
 800d73c:	4d6f      	ldr	r5, [pc, #444]	; (800d8fc <interfaceDrawLayer+0x7e0>)
 800d73e:	4c71      	ldr	r4, [pc, #452]	; (800d904 <interfaceDrawLayer+0x7e8>)
 800d740:	9201      	str	r2, [sp, #4]
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	002b      	movs	r3, r5
 800d746:	0022      	movs	r2, r4
 800d748:	f7fc f8de 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(meterX + 56, meterY + 34, "kR", &Font16,
 800d74c:	4b69      	ldr	r3, [pc, #420]	; (800d8f4 <interfaceDrawLayer+0x7d8>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	b29b      	uxth	r3, r3
 800d752:	3338      	adds	r3, #56	; 0x38
 800d754:	b298      	uxth	r0, r3
 800d756:	4b68      	ldr	r3, [pc, #416]	; (800d8f8 <interfaceDrawLayer+0x7dc>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	3322      	adds	r3, #34	; 0x22
 800d75e:	b299      	uxth	r1, r3
 800d760:	4b60      	ldr	r3, [pc, #384]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	b2db      	uxtb	r3, r3
 800d766:	b29b      	uxth	r3, r3
 800d768:	4a5b      	ldr	r2, [pc, #364]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d76a:	7812      	ldrb	r2, [r2, #0]
 800d76c:	b2d2      	uxtb	r2, r2
 800d76e:	b292      	uxth	r2, r2
 800d770:	4d62      	ldr	r5, [pc, #392]	; (800d8fc <interfaceDrawLayer+0x7e0>)
 800d772:	4c65      	ldr	r4, [pc, #404]	; (800d908 <interfaceDrawLayer+0x7ec>)
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	002b      	movs	r3, r5
 800d77a:	0022      	movs	r2, r4
 800d77c:	f7fc f8c4 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}

		//										DIGITAL INTERFACE INDEX

		if (showDigitalInterface == 1) {
 800d780:	4b62      	ldr	r3, [pc, #392]	; (800d90c <interfaceDrawLayer+0x7f0>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d14b      	bne.n	800d820 <interfaceDrawLayer+0x704>
			Paint_DrawString_EN(digitalX + 55, digitalY, "hPa", &Font12,
 800d788:	4b61      	ldr	r3, [pc, #388]	; (800d910 <interfaceDrawLayer+0x7f4>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	3337      	adds	r3, #55	; 0x37
 800d790:	b298      	uxth	r0, r3
 800d792:	4b60      	ldr	r3, [pc, #384]	; (800d914 <interfaceDrawLayer+0x7f8>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	b299      	uxth	r1, r3
 800d798:	4b4f      	ldr	r3, [pc, #316]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	4a50      	ldr	r2, [pc, #320]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d7a2:	7812      	ldrb	r2, [r2, #0]
 800d7a4:	b2d2      	uxtb	r2, r2
 800d7a6:	b292      	uxth	r2, r2
 800d7a8:	4d4f      	ldr	r5, [pc, #316]	; (800d8e8 <interfaceDrawLayer+0x7cc>)
 800d7aa:	4c5b      	ldr	r4, [pc, #364]	; (800d918 <interfaceDrawLayer+0x7fc>)
 800d7ac:	9201      	str	r2, [sp, #4]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	002b      	movs	r3, r5
 800d7b2:	0022      	movs	r2, r4
 800d7b4:	f7fc f8a8 	bl	8009908 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 55, digitalY + 12, "%RH", &Font12,
 800d7b8:	4b55      	ldr	r3, [pc, #340]	; (800d910 <interfaceDrawLayer+0x7f4>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	3337      	adds	r3, #55	; 0x37
 800d7c0:	b298      	uxth	r0, r3
 800d7c2:	4b54      	ldr	r3, [pc, #336]	; (800d914 <interfaceDrawLayer+0x7f8>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	330c      	adds	r3, #12
 800d7ca:	b299      	uxth	r1, r3
 800d7cc:	4b42      	ldr	r3, [pc, #264]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4a43      	ldr	r2, [pc, #268]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d7d6:	7812      	ldrb	r2, [r2, #0]
 800d7d8:	b2d2      	uxtb	r2, r2
 800d7da:	b292      	uxth	r2, r2
 800d7dc:	4d42      	ldr	r5, [pc, #264]	; (800d8e8 <interfaceDrawLayer+0x7cc>)
 800d7de:	4c4f      	ldr	r4, [pc, #316]	; (800d91c <interfaceDrawLayer+0x800>)
 800d7e0:	9201      	str	r2, [sp, #4]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	002b      	movs	r3, r5
 800d7e6:	0022      	movs	r2, r4
 800d7e8:	f7fc f88e 	bl	8009908 <Paint_DrawString_EN>
					colorMain, colorSecond);
			Paint_DrawString_EN(digitalX + 42, digitalY + 24, "deg C", &Font12,
 800d7ec:	4b48      	ldr	r3, [pc, #288]	; (800d910 <interfaceDrawLayer+0x7f4>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	332a      	adds	r3, #42	; 0x2a
 800d7f4:	b298      	uxth	r0, r3
 800d7f6:	4b47      	ldr	r3, [pc, #284]	; (800d914 <interfaceDrawLayer+0x7f8>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	b299      	uxth	r1, r3
 800d800:	4b35      	ldr	r3, [pc, #212]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	b2db      	uxtb	r3, r3
 800d806:	b29b      	uxth	r3, r3
 800d808:	4a36      	ldr	r2, [pc, #216]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d80a:	7812      	ldrb	r2, [r2, #0]
 800d80c:	b2d2      	uxtb	r2, r2
 800d80e:	b292      	uxth	r2, r2
 800d810:	4d35      	ldr	r5, [pc, #212]	; (800d8e8 <interfaceDrawLayer+0x7cc>)
 800d812:	4c43      	ldr	r4, [pc, #268]	; (800d920 <interfaceDrawLayer+0x804>)
 800d814:	9201      	str	r2, [sp, #4]
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	002b      	movs	r3, r5
 800d81a:	0022      	movs	r2, r4
 800d81c:	f7fc f874 	bl	8009908 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										BAROMETER INDEX

		if (showBarometer == 1) {
 800d820:	4b40      	ldr	r3, [pc, #256]	; (800d924 <interfaceDrawLayer+0x808>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d148      	bne.n	800d8ba <interfaceDrawLayer+0x79e>
			Paint_DrawNum(177, 102, 975, &Font8, colorSecond, colorMain);
 800d828:	4b2e      	ldr	r3, [pc, #184]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4a29      	ldr	r2, [pc, #164]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d832:	7812      	ldrb	r2, [r2, #0]
 800d834:	b2d2      	uxtb	r2, r2
 800d836:	b292      	uxth	r2, r2
 800d838:	493b      	ldr	r1, [pc, #236]	; (800d928 <interfaceDrawLayer+0x80c>)
 800d83a:	483c      	ldr	r0, [pc, #240]	; (800d92c <interfaceDrawLayer+0x810>)
 800d83c:	9201      	str	r2, [sp, #4]
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	000b      	movs	r3, r1
 800d842:	0002      	movs	r2, r0
 800d844:	2166      	movs	r1, #102	; 0x66
 800d846:	20b1      	movs	r0, #177	; 0xb1
 800d848:	f7fc f8dc 	bl	8009a04 <Paint_DrawNum>
			Paint_DrawString_EN(177, 111, "hPa", &Font8, colorSecond,
 800d84c:	4b25      	ldr	r3, [pc, #148]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	b2db      	uxtb	r3, r3
 800d852:	b29b      	uxth	r3, r3
 800d854:	4a20      	ldr	r2, [pc, #128]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d856:	7812      	ldrb	r2, [r2, #0]
 800d858:	b2d2      	uxtb	r2, r2
 800d85a:	b292      	uxth	r2, r2
 800d85c:	4832      	ldr	r0, [pc, #200]	; (800d928 <interfaceDrawLayer+0x80c>)
 800d85e:	492e      	ldr	r1, [pc, #184]	; (800d918 <interfaceDrawLayer+0x7fc>)
 800d860:	9201      	str	r2, [sp, #4]
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	0003      	movs	r3, r0
 800d866:	000a      	movs	r2, r1
 800d868:	216f      	movs	r1, #111	; 0x6f
 800d86a:	20b1      	movs	r0, #177	; 0xb1
 800d86c:	f7fc f84c 	bl	8009908 <Paint_DrawString_EN>
					colorMain);
			Paint_DrawNum(102, 185, 1000, &Font8, colorSecond, colorMain);
 800d870:	4b1c      	ldr	r3, [pc, #112]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	b29b      	uxth	r3, r3
 800d878:	4a17      	ldr	r2, [pc, #92]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d87a:	7812      	ldrb	r2, [r2, #0]
 800d87c:	b2d2      	uxtb	r2, r2
 800d87e:	b292      	uxth	r2, r2
 800d880:	4829      	ldr	r0, [pc, #164]	; (800d928 <interfaceDrawLayer+0x80c>)
 800d882:	21fa      	movs	r1, #250	; 0xfa
 800d884:	0089      	lsls	r1, r1, #2
 800d886:	9201      	str	r2, [sp, #4]
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	0003      	movs	r3, r0
 800d88c:	000a      	movs	r2, r1
 800d88e:	21b9      	movs	r1, #185	; 0xb9
 800d890:	2066      	movs	r0, #102	; 0x66
 800d892:	f7fc f8b7 	bl	8009a04 <Paint_DrawNum>
			Paint_DrawNum(5, 102, 1025, &Font8, colorSecond, colorMain);
 800d896:	4b13      	ldr	r3, [pc, #76]	; (800d8e4 <interfaceDrawLayer+0x7c8>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	4a0e      	ldr	r2, [pc, #56]	; (800d8d8 <interfaceDrawLayer+0x7bc>)
 800d8a0:	7812      	ldrb	r2, [r2, #0]
 800d8a2:	b2d2      	uxtb	r2, r2
 800d8a4:	b292      	uxth	r2, r2
 800d8a6:	4920      	ldr	r1, [pc, #128]	; (800d928 <interfaceDrawLayer+0x80c>)
 800d8a8:	4821      	ldr	r0, [pc, #132]	; (800d930 <interfaceDrawLayer+0x814>)
 800d8aa:	9201      	str	r2, [sp, #4]
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	000b      	movs	r3, r1
 800d8b0:	0002      	movs	r2, r0
 800d8b2:	2166      	movs	r1, #102	; 0x66
 800d8b4:	2005      	movs	r0, #5
 800d8b6:	f7fc f8a5 	bl	8009a04 <Paint_DrawNum>
		}

		//										HUMIDITY INDEX

		if (showHigrometer == 1) {
 800d8ba:	4b1e      	ldr	r3, [pc, #120]	; (800d934 <interfaceDrawLayer+0x818>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d000      	beq.n	800d8c4 <interfaceDrawLayer+0x7a8>
 800d8c2:	e09c      	b.n	800d9fe <interfaceDrawLayer+0x8e2>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800d8c4:	2317      	movs	r3, #23
 800d8c6:	18fb      	adds	r3, r7, r3
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	e060      	b.n	800d990 <interfaceDrawLayer+0x874>
 800d8ce:	46c0      	nop			; (mov r8, r8)
 800d8d0:	200006f4 	.word	0x200006f4
 800d8d4:	200006b4 	.word	0x200006b4
 800d8d8:	2000033a 	.word	0x2000033a
 800d8dc:	200006ea 	.word	0x200006ea
 800d8e0:	2000037b 	.word	0x2000037b
 800d8e4:	200006b3 	.word	0x200006b3
 800d8e8:	2000000c 	.word	0x2000000c
 800d8ec:	080160fc 	.word	0x080160fc
 800d8f0:	200006e9 	.word	0x200006e9
 800d8f4:	200003b0 	.word	0x200003b0
 800d8f8:	200004bf 	.word	0x200004bf
 800d8fc:	20000014 	.word	0x20000014
 800d900:	08016104 	.word	0x08016104
 800d904:	08016108 	.word	0x08016108
 800d908:	0801610c 	.word	0x0801610c
 800d90c:	200006fe 	.word	0x200006fe
 800d910:	20000641 	.word	0x20000641
 800d914:	200003ad 	.word	0x200003ad
 800d918:	08016110 	.word	0x08016110
 800d91c:	08016114 	.word	0x08016114
 800d920:	08016118 	.word	0x08016118
 800d924:	20000215 	.word	0x20000215
 800d928:	20000024 	.word	0x20000024
 800d92c:	000003cf 	.word	0x000003cf
 800d930:	00000401 	.word	0x00000401
 800d934:	20000642 	.word	0x20000642
				Paint_DrawLine(humidityX, humidityY + i, humidityX - 2,
 800d938:	4bfa      	ldr	r3, [pc, #1000]	; (800dd24 <interfaceDrawLayer+0xc08>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	b298      	uxth	r0, r3
 800d93e:	4bfa      	ldr	r3, [pc, #1000]	; (800dd28 <interfaceDrawLayer+0xc0c>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	b29a      	uxth	r2, r3
 800d944:	2517      	movs	r5, #23
 800d946:	197b      	adds	r3, r7, r5
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	18d3      	adds	r3, r2, r3
 800d94e:	b299      	uxth	r1, r3
 800d950:	4bf4      	ldr	r3, [pc, #976]	; (800dd24 <interfaceDrawLayer+0xc08>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	b29b      	uxth	r3, r3
 800d956:	3b02      	subs	r3, #2
 800d958:	b29c      	uxth	r4, r3
 800d95a:	4bf3      	ldr	r3, [pc, #972]	; (800dd28 <interfaceDrawLayer+0xc0c>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	b29a      	uxth	r2, r3
 800d960:	002e      	movs	r6, r5
 800d962:	197b      	adds	r3, r7, r5
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	18d3      	adds	r3, r2, r3
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	4bef      	ldr	r3, [pc, #956]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	b29b      	uxth	r3, r3
 800d974:	2500      	movs	r5, #0
 800d976:	9502      	str	r5, [sp, #8]
 800d978:	2501      	movs	r5, #1
 800d97a:	9501      	str	r5, [sp, #4]
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	0013      	movs	r3, r2
 800d980:	0022      	movs	r2, r4
 800d982:	f7fb f9f7 	bl	8008d74 <Paint_DrawLine>
			for (uint8_t i = 0; i <= 50; i = i + 5) {
 800d986:	19bb      	adds	r3, r7, r6
 800d988:	19ba      	adds	r2, r7, r6
 800d98a:	7812      	ldrb	r2, [r2, #0]
 800d98c:	3205      	adds	r2, #5
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	2317      	movs	r3, #23
 800d992:	18fb      	adds	r3, r7, r3
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	2b32      	cmp	r3, #50	; 0x32
 800d998:	d9ce      	bls.n	800d938 <interfaceDrawLayer+0x81c>
						humidityY + i, colorSecond, DOT_PIXEL_1X1,
						LINE_STYLE_SOLID);
			}

			Paint_DrawString_EN(humidityX + 6, humidityY, "0%RH", &Font8,
 800d99a:	4be2      	ldr	r3, [pc, #904]	; (800dd24 <interfaceDrawLayer+0xc08>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	3306      	adds	r3, #6
 800d9a2:	b298      	uxth	r0, r3
 800d9a4:	4be0      	ldr	r3, [pc, #896]	; (800dd28 <interfaceDrawLayer+0xc0c>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	b299      	uxth	r1, r3
 800d9aa:	4be0      	ldr	r3, [pc, #896]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4adf      	ldr	r2, [pc, #892]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800d9b4:	7812      	ldrb	r2, [r2, #0]
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	b292      	uxth	r2, r2
 800d9ba:	4dde      	ldr	r5, [pc, #888]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800d9bc:	4cde      	ldr	r4, [pc, #888]	; (800dd38 <interfaceDrawLayer+0xc1c>)
 800d9be:	9201      	str	r2, [sp, #4]
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	002b      	movs	r3, r5
 800d9c4:	0022      	movs	r2, r4
 800d9c6:	f7fb ff9f 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);
			Paint_DrawString_EN(humidityX + 6, humidityY + 43, "100", &Font8,
 800d9ca:	4bd6      	ldr	r3, [pc, #856]	; (800dd24 <interfaceDrawLayer+0xc08>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	3306      	adds	r3, #6
 800d9d2:	b298      	uxth	r0, r3
 800d9d4:	4bd4      	ldr	r3, [pc, #848]	; (800dd28 <interfaceDrawLayer+0xc0c>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	332b      	adds	r3, #43	; 0x2b
 800d9dc:	b299      	uxth	r1, r3
 800d9de:	4bd3      	ldr	r3, [pc, #844]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4ad2      	ldr	r2, [pc, #840]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	b2d2      	uxtb	r2, r2
 800d9ec:	b292      	uxth	r2, r2
 800d9ee:	4dd1      	ldr	r5, [pc, #836]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800d9f0:	4cd2      	ldr	r4, [pc, #840]	; (800dd3c <interfaceDrawLayer+0xc20>)
 800d9f2:	9201      	str	r2, [sp, #4]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	002b      	movs	r3, r5
 800d9f8:	0022      	movs	r2, r4
 800d9fa:	f7fb ff85 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);
		}



		if (showNaviAnalog) {
 800d9fe:	4bd0      	ldr	r3, [pc, #832]	; (800dd40 <interfaceDrawLayer+0xc24>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d100      	bne.n	800da08 <interfaceDrawLayer+0x8ec>
 800da06:	e0fc      	b.n	800dc02 <interfaceDrawLayer+0xae6>

			//										ANALOG COMPASS ALTIMETER UNIT
			Paint_DrawChar(compassX -4, compassY + 3, 'm', &Font12,
 800da08:	4bce      	ldr	r3, [pc, #824]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	3b04      	subs	r3, #4
 800da10:	b298      	uxth	r0, r3
 800da12:	4bcd      	ldr	r3, [pc, #820]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	b29b      	uxth	r3, r3
 800da18:	3303      	adds	r3, #3
 800da1a:	b299      	uxth	r1, r3
 800da1c:	4bc3      	ldr	r3, [pc, #780]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	b29b      	uxth	r3, r3
 800da24:	4ac2      	ldr	r2, [pc, #776]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	b2d2      	uxtb	r2, r2
 800da2a:	b292      	uxth	r2, r2
 800da2c:	4cc7      	ldr	r4, [pc, #796]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800da2e:	9201      	str	r2, [sp, #4]
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	0023      	movs	r3, r4
 800da34:	226d      	movs	r2, #109	; 0x6d
 800da36:	f7fb fe83 	bl	8009740 <Paint_DrawChar>



			//										ANALOG COMPASS INDEX
			//										BACKGROUD FOR COMPASS INDEX
			Paint_DrawRectangle(compassX-3, compassY-30, compassX-3+8, compassY-30+12,
 800da3a:	4bc2      	ldr	r3, [pc, #776]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	3b03      	subs	r3, #3
 800da42:	b298      	uxth	r0, r3
 800da44:	4bc0      	ldr	r3, [pc, #768]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	b29b      	uxth	r3, r3
 800da4a:	3b1e      	subs	r3, #30
 800da4c:	b299      	uxth	r1, r3
 800da4e:	4bbd      	ldr	r3, [pc, #756]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	b29b      	uxth	r3, r3
 800da54:	3305      	adds	r3, #5
 800da56:	b29a      	uxth	r2, r3
 800da58:	4bbb      	ldr	r3, [pc, #748]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3b12      	subs	r3, #18
 800da60:	b29c      	uxth	r4, r3
 800da62:	4bb3      	ldr	r3, [pc, #716]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	b2db      	uxtb	r3, r3
 800da68:	b29b      	uxth	r3, r3
 800da6a:	2501      	movs	r5, #1
 800da6c:	9502      	str	r5, [sp, #8]
 800da6e:	2501      	movs	r5, #1
 800da70:	9501      	str	r5, [sp, #4]
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	0023      	movs	r3, r4
 800da76:	f7fb fb45 	bl	8009104 <Paint_DrawRectangle>
					colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-3, compassY+19, compassX-3+8, compassY+19+12,
 800da7a:	4bb2      	ldr	r3, [pc, #712]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	3b03      	subs	r3, #3
 800da82:	b298      	uxth	r0, r3
 800da84:	4bb0      	ldr	r3, [pc, #704]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	3313      	adds	r3, #19
 800da8c:	b299      	uxth	r1, r3
 800da8e:	4bad      	ldr	r3, [pc, #692]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	b29b      	uxth	r3, r3
 800da94:	3305      	adds	r3, #5
 800da96:	b29a      	uxth	r2, r3
 800da98:	4bab      	ldr	r3, [pc, #684]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	331f      	adds	r3, #31
 800daa0:	b29c      	uxth	r4, r3
 800daa2:	4ba3      	ldr	r3, [pc, #652]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	2501      	movs	r5, #1
 800daac:	9502      	str	r5, [sp, #8]
 800daae:	2501      	movs	r5, #1
 800dab0:	9501      	str	r5, [sp, #4]
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	0023      	movs	r3, r4
 800dab6:	f7fb fb25 	bl	8009104 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX-28, compassY-5, compassX-28+8, compassY-5+12,
 800daba:	4ba2      	ldr	r3, [pc, #648]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	3b1c      	subs	r3, #28
 800dac2:	b298      	uxth	r0, r3
 800dac4:	4ba0      	ldr	r3, [pc, #640]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	3b05      	subs	r3, #5
 800dacc:	b299      	uxth	r1, r3
 800dace:	4b9d      	ldr	r3, [pc, #628]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3b14      	subs	r3, #20
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	4b9b      	ldr	r3, [pc, #620]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	3307      	adds	r3, #7
 800dae0:	b29c      	uxth	r4, r3
 800dae2:	4b93      	ldr	r3, [pc, #588]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	b29b      	uxth	r3, r3
 800daea:	2501      	movs	r5, #1
 800daec:	9502      	str	r5, [sp, #8]
 800daee:	2501      	movs	r5, #1
 800daf0:	9501      	str	r5, [sp, #4]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	0023      	movs	r3, r4
 800daf6:	f7fb fb05 	bl	8009104 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);
			Paint_DrawRectangle(compassX+20, compassY-5, compassX+20+8, compassY-5+12,
 800dafa:	4b92      	ldr	r3, [pc, #584]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3314      	adds	r3, #20
 800db02:	b298      	uxth	r0, r3
 800db04:	4b90      	ldr	r3, [pc, #576]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	3b05      	subs	r3, #5
 800db0c:	b299      	uxth	r1, r3
 800db0e:	4b8d      	ldr	r3, [pc, #564]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	b29b      	uxth	r3, r3
 800db14:	331c      	adds	r3, #28
 800db16:	b29a      	uxth	r2, r3
 800db18:	4b8b      	ldr	r3, [pc, #556]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	3307      	adds	r3, #7
 800db20:	b29c      	uxth	r4, r3
 800db22:	4b83      	ldr	r3, [pc, #524]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	b2db      	uxtb	r3, r3
 800db28:	b29b      	uxth	r3, r3
 800db2a:	2501      	movs	r5, #1
 800db2c:	9502      	str	r5, [sp, #8]
 800db2e:	2501      	movs	r5, #1
 800db30:	9501      	str	r5, [sp, #4]
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	0023      	movs	r3, r4
 800db36:	f7fb fae5 	bl	8009104 <Paint_DrawRectangle>
								colorMain, DOT_PIXEL_1X1, DRAW_FILL_FULL);

			//										INDEX
			Paint_DrawChar(compassX - 3, compassY - 30, 'N', &Font12,
 800db3a:	4b82      	ldr	r3, [pc, #520]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	3b03      	subs	r3, #3
 800db42:	b298      	uxth	r0, r3
 800db44:	4b80      	ldr	r3, [pc, #512]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	3b1e      	subs	r3, #30
 800db4c:	b299      	uxth	r1, r3
 800db4e:	4b77      	ldr	r3, [pc, #476]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	b2db      	uxtb	r3, r3
 800db54:	b29b      	uxth	r3, r3
 800db56:	4a76      	ldr	r2, [pc, #472]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800db58:	7812      	ldrb	r2, [r2, #0]
 800db5a:	b2d2      	uxtb	r2, r2
 800db5c:	b292      	uxth	r2, r2
 800db5e:	4c7b      	ldr	r4, [pc, #492]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	0023      	movs	r3, r4
 800db66:	224e      	movs	r2, #78	; 0x4e
 800db68:	f7fb fdea 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 3, compassY + 19, 'S', &Font12,
 800db6c:	4b75      	ldr	r3, [pc, #468]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	b29b      	uxth	r3, r3
 800db72:	3b03      	subs	r3, #3
 800db74:	b298      	uxth	r0, r3
 800db76:	4b74      	ldr	r3, [pc, #464]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	3313      	adds	r3, #19
 800db7e:	b299      	uxth	r1, r3
 800db80:	4b6a      	ldr	r3, [pc, #424]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	b29b      	uxth	r3, r3
 800db88:	4a69      	ldr	r2, [pc, #420]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800db8a:	7812      	ldrb	r2, [r2, #0]
 800db8c:	b2d2      	uxtb	r2, r2
 800db8e:	b292      	uxth	r2, r2
 800db90:	4c6e      	ldr	r4, [pc, #440]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800db92:	9201      	str	r2, [sp, #4]
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	0023      	movs	r3, r4
 800db98:	2253      	movs	r2, #83	; 0x53
 800db9a:	f7fb fdd1 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX - 28, compassY - 5, 'W', &Font12,
 800db9e:	4b69      	ldr	r3, [pc, #420]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3b1c      	subs	r3, #28
 800dba6:	b298      	uxth	r0, r3
 800dba8:	4b67      	ldr	r3, [pc, #412]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	3b05      	subs	r3, #5
 800dbb0:	b299      	uxth	r1, r3
 800dbb2:	4b5e      	ldr	r3, [pc, #376]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	4a5d      	ldr	r2, [pc, #372]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dbbc:	7812      	ldrb	r2, [r2, #0]
 800dbbe:	b2d2      	uxtb	r2, r2
 800dbc0:	b292      	uxth	r2, r2
 800dbc2:	4c62      	ldr	r4, [pc, #392]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800dbc4:	9201      	str	r2, [sp, #4]
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	0023      	movs	r3, r4
 800dbca:	2257      	movs	r2, #87	; 0x57
 800dbcc:	f7fb fdb8 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 20, compassY - 5, 'E', &Font12,
 800dbd0:	4b5c      	ldr	r3, [pc, #368]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	3314      	adds	r3, #20
 800dbd8:	b298      	uxth	r0, r3
 800dbda:	4b5b      	ldr	r3, [pc, #364]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	3b05      	subs	r3, #5
 800dbe2:	b299      	uxth	r1, r3
 800dbe4:	4b51      	ldr	r3, [pc, #324]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	4a50      	ldr	r2, [pc, #320]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dbee:	7812      	ldrb	r2, [r2, #0]
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	b292      	uxth	r2, r2
 800dbf4:	4c55      	ldr	r4, [pc, #340]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800dbf6:	9201      	str	r2, [sp, #4]
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	0023      	movs	r3, r4
 800dbfc:	2245      	movs	r2, #69	; 0x45
 800dbfe:	f7fb fd9f 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);

		}

		//										DIGITAL ALTIMETER UNIT
		if (showNaviDigital == 1) {
 800dc02:	4b53      	ldr	r3, [pc, #332]	; (800dd50 <interfaceDrawLayer+0xc34>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d17c      	bne.n	800dd04 <interfaceDrawLayer+0xbe8>
			Paint_DrawChar(compassX + 38, compassY + 31, 'm', &Font12,
 800dc0a:	4b4e      	ldr	r3, [pc, #312]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3326      	adds	r3, #38	; 0x26
 800dc12:	b298      	uxth	r0, r3
 800dc14:	4b4c      	ldr	r3, [pc, #304]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	331f      	adds	r3, #31
 800dc1c:	b299      	uxth	r1, r3
 800dc1e:	4b43      	ldr	r3, [pc, #268]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	4a42      	ldr	r2, [pc, #264]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dc28:	7812      	ldrb	r2, [r2, #0]
 800dc2a:	b2d2      	uxtb	r2, r2
 800dc2c:	b292      	uxth	r2, r2
 800dc2e:	4c47      	ldr	r4, [pc, #284]	; (800dd4c <interfaceDrawLayer+0xc30>)
 800dc30:	9201      	str	r2, [sp, #4]
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	0023      	movs	r3, r4
 800dc36:	226d      	movs	r2, #109	; 0x6d
 800dc38:	f7fb fd82 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);

			//										DIGITAL COMPASS INDEX

			Paint_DrawChar(compassX + 22, compassY + 1, 'N', &Font8,
 800dc3c:	4b41      	ldr	r3, [pc, #260]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	3316      	adds	r3, #22
 800dc44:	b298      	uxth	r0, r3
 800dc46:	4b40      	ldr	r3, [pc, #256]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	b299      	uxth	r1, r3
 800dc50:	4b36      	ldr	r3, [pc, #216]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4a35      	ldr	r2, [pc, #212]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dc5a:	7812      	ldrb	r2, [r2, #0]
 800dc5c:	b2d2      	uxtb	r2, r2
 800dc5e:	b292      	uxth	r2, r2
 800dc60:	4c34      	ldr	r4, [pc, #208]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800dc62:	9201      	str	r2, [sp, #4]
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	0023      	movs	r3, r4
 800dc68:	224e      	movs	r2, #78	; 0x4e
 800dc6a:	f7fb fd69 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 22, compassY + 20, 'S', &Font8,
 800dc6e:	4b35      	ldr	r3, [pc, #212]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	3316      	adds	r3, #22
 800dc76:	b298      	uxth	r0, r3
 800dc78:	4b33      	ldr	r3, [pc, #204]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	3314      	adds	r3, #20
 800dc80:	b299      	uxth	r1, r3
 800dc82:	4b2a      	ldr	r3, [pc, #168]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4a29      	ldr	r2, [pc, #164]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dc8c:	7812      	ldrb	r2, [r2, #0]
 800dc8e:	b2d2      	uxtb	r2, r2
 800dc90:	b292      	uxth	r2, r2
 800dc92:	4c28      	ldr	r4, [pc, #160]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800dc94:	9201      	str	r2, [sp, #4]
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	0023      	movs	r3, r4
 800dc9a:	2253      	movs	r2, #83	; 0x53
 800dc9c:	f7fb fd50 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 2, compassY + 11, 'W', &Font8,
 800dca0:	4b28      	ldr	r3, [pc, #160]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	3302      	adds	r3, #2
 800dca8:	b298      	uxth	r0, r3
 800dcaa:	4b27      	ldr	r3, [pc, #156]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	330b      	adds	r3, #11
 800dcb2:	b299      	uxth	r1, r3
 800dcb4:	4b1d      	ldr	r3, [pc, #116]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	4a1c      	ldr	r2, [pc, #112]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dcbe:	7812      	ldrb	r2, [r2, #0]
 800dcc0:	b2d2      	uxtb	r2, r2
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	4c1b      	ldr	r4, [pc, #108]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800dcc6:	9201      	str	r2, [sp, #4]
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	0023      	movs	r3, r4
 800dccc:	2257      	movs	r2, #87	; 0x57
 800dcce:	f7fb fd37 	bl	8009740 <Paint_DrawChar>
					colorSecond, colorMain);
			Paint_DrawChar(compassX + 40, compassY + 11, 'E', &Font8,
 800dcd2:	4b1c      	ldr	r3, [pc, #112]	; (800dd44 <interfaceDrawLayer+0xc28>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	3328      	adds	r3, #40	; 0x28
 800dcda:	b298      	uxth	r0, r3
 800dcdc:	4b1a      	ldr	r3, [pc, #104]	; (800dd48 <interfaceDrawLayer+0xc2c>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	330b      	adds	r3, #11
 800dce4:	b299      	uxth	r1, r3
 800dce6:	4b11      	ldr	r3, [pc, #68]	; (800dd2c <interfaceDrawLayer+0xc10>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	4a10      	ldr	r2, [pc, #64]	; (800dd30 <interfaceDrawLayer+0xc14>)
 800dcf0:	7812      	ldrb	r2, [r2, #0]
 800dcf2:	b2d2      	uxtb	r2, r2
 800dcf4:	b292      	uxth	r2, r2
 800dcf6:	4c0f      	ldr	r4, [pc, #60]	; (800dd34 <interfaceDrawLayer+0xc18>)
 800dcf8:	9201      	str	r2, [sp, #4]
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	0023      	movs	r3, r4
 800dcfe:	2245      	movs	r2, #69	; 0x45
 800dd00:	f7fb fd1e 	bl	8009740 <Paint_DrawChar>

		}

		//										BATTERY STATE INDEX

		if (showBatteryState == 1) {
 800dd04:	4b13      	ldr	r3, [pc, #76]	; (800dd54 <interfaceDrawLayer+0xc38>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d16f      	bne.n	800ddec <interfaceDrawLayer+0xcd0>
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800dd0c:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <interfaceDrawLayer+0xc3c>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <interfaceDrawLayer+0xc40>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	18d3      	adds	r3, r2, r3
 800dd1a:	b298      	uxth	r0, r3
 800dd1c:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <interfaceDrawLayer+0xc44>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	b299      	uxth	r1, r3
 800dd22:	e01f      	b.n	800dd64 <interfaceDrawLayer+0xc48>
 800dd24:	2000070a 	.word	0x2000070a
 800dd28:	20000442 	.word	0x20000442
 800dd2c:	200006b3 	.word	0x200006b3
 800dd30:	2000033a 	.word	0x2000033a
 800dd34:	20000024 	.word	0x20000024
 800dd38:	08016120 	.word	0x08016120
 800dd3c:	08016128 	.word	0x08016128
 800dd40:	20000208 	.word	0x20000208
 800dd44:	200006e8 	.word	0x200006e8
 800dd48:	20000450 	.word	0x20000450
 800dd4c:	2000000c 	.word	0x2000000c
 800dd50:	20000614 	.word	0x20000614
 800dd54:	200003b2 	.word	0x200003b2
 800dd58:	2000069f 	.word	0x2000069f
 800dd5c:	20000214 	.word	0x20000214
 800dd60:	20000710 	.word	0x20000710
					batteryStateStartY,
					batteryStateStartX + batteryPointerShift
 800dd64:	4b3f      	ldr	r3, [pc, #252]	; (800de64 <interfaceDrawLayer+0xd48>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	4b3f      	ldr	r3, [pc, #252]	; (800de68 <interfaceDrawLayer+0xd4c>)
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	18d3      	adds	r3, r2, r3
 800dd72:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX + batteryPointerShift,
 800dd74:	4b3d      	ldr	r3, [pc, #244]	; (800de6c <interfaceDrawLayer+0xd50>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	18d3      	adds	r3, r2, r3
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	4b3c      	ldr	r3, [pc, #240]	; (800de70 <interfaceDrawLayer+0xd54>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b29c      	uxth	r4, r3
 800dd84:	4b3b      	ldr	r3, [pc, #236]	; (800de74 <interfaceDrawLayer+0xd58>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	9502      	str	r5, [sp, #8]
 800dd90:	2502      	movs	r5, #2
 800dd92:	9501      	str	r5, [sp, #4]
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	0023      	movs	r3, r4
 800dd98:	f7fa ffec 	bl	8008d74 <Paint_DrawLine>
							+ batteryStateIndexLength, batteryStateStartY,
					colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
			Paint_DrawLine(batteryStateStartX,
 800dd9c:	4b31      	ldr	r3, [pc, #196]	; (800de64 <interfaceDrawLayer+0xd48>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	b298      	uxth	r0, r3
 800dda2:	4b33      	ldr	r3, [pc, #204]	; (800de70 <interfaceDrawLayer+0xd54>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	4b2f      	ldr	r3, [pc, #188]	; (800de68 <interfaceDrawLayer+0xd4c>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	18d3      	adds	r3, r2, r3
 800ddb0:	b299      	uxth	r1, r3
 800ddb2:	4b2c      	ldr	r3, [pc, #176]	; (800de64 <interfaceDrawLayer+0xd48>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	b29c      	uxth	r4, r3
					batteryStateStartY + batteryPointerShift,
					batteryStateStartX,
					batteryStateStartY + batteryPointerShift
 800ddb8:	4b2d      	ldr	r3, [pc, #180]	; (800de70 <interfaceDrawLayer+0xd54>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	4b2a      	ldr	r3, [pc, #168]	; (800de68 <interfaceDrawLayer+0xd4c>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	18d3      	adds	r3, r2, r3
 800ddc6:	b29a      	uxth	r2, r3
			Paint_DrawLine(batteryStateStartX,
 800ddc8:	4b28      	ldr	r3, [pc, #160]	; (800de6c <interfaceDrawLayer+0xd50>)
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	18d3      	adds	r3, r2, r3
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	4b28      	ldr	r3, [pc, #160]	; (800de74 <interfaceDrawLayer+0xd58>)
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	2500      	movs	r5, #0
 800dddc:	9502      	str	r5, [sp, #8]
 800ddde:	2502      	movs	r5, #2
 800dde0:	9501      	str	r5, [sp, #4]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	0013      	movs	r3, r2
 800dde6:	0022      	movs	r2, r4
 800dde8:	f7fa ffc4 	bl	8008d74 <Paint_DrawLine>
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		}

		//										TEMPERATURE UNIT

		if (showThermometer == 1) {
 800ddec:	4b22      	ldr	r3, [pc, #136]	; (800de78 <interfaceDrawLayer+0xd5c>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d12c      	bne.n	800de4e <interfaceDrawLayer+0xd32>
			Paint_DrawCircle(temperatureX + 21, temperatureY + 4, 2, colorMain,
 800ddf4:	4b21      	ldr	r3, [pc, #132]	; (800de7c <interfaceDrawLayer+0xd60>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	3315      	adds	r3, #21
 800ddfc:	b298      	uxth	r0, r3
 800ddfe:	4b20      	ldr	r3, [pc, #128]	; (800de80 <interfaceDrawLayer+0xd64>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	b29b      	uxth	r3, r3
 800de04:	3304      	adds	r3, #4
 800de06:	b299      	uxth	r1, r3
 800de08:	4b1e      	ldr	r3, [pc, #120]	; (800de84 <interfaceDrawLayer+0xd68>)
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	b29b      	uxth	r3, r3
 800de10:	2200      	movs	r2, #0
 800de12:	9201      	str	r2, [sp, #4]
 800de14:	2201      	movs	r2, #1
 800de16:	9200      	str	r2, [sp, #0]
 800de18:	2202      	movs	r2, #2
 800de1a:	f7fb fa3f 	bl	800929c <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
			Paint_DrawString_EN(temperatureX + 24, temperatureY, "C", &Font12,
 800de1e:	4b17      	ldr	r3, [pc, #92]	; (800de7c <interfaceDrawLayer+0xd60>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b29b      	uxth	r3, r3
 800de24:	3318      	adds	r3, #24
 800de26:	b298      	uxth	r0, r3
 800de28:	4b15      	ldr	r3, [pc, #84]	; (800de80 <interfaceDrawLayer+0xd64>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b299      	uxth	r1, r3
 800de2e:	4b15      	ldr	r3, [pc, #84]	; (800de84 <interfaceDrawLayer+0xd68>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b2db      	uxtb	r3, r3
 800de34:	b29b      	uxth	r3, r3
 800de36:	4a0f      	ldr	r2, [pc, #60]	; (800de74 <interfaceDrawLayer+0xd58>)
 800de38:	7812      	ldrb	r2, [r2, #0]
 800de3a:	b2d2      	uxtb	r2, r2
 800de3c:	b292      	uxth	r2, r2
 800de3e:	4d12      	ldr	r5, [pc, #72]	; (800de88 <interfaceDrawLayer+0xd6c>)
 800de40:	4c12      	ldr	r4, [pc, #72]	; (800de8c <interfaceDrawLayer+0xd70>)
 800de42:	9201      	str	r2, [sp, #4]
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	002b      	movs	r3, r5
 800de48:	0022      	movs	r2, r4
 800de4a:	f7fb fd5d 	bl	8009908 <Paint_DrawString_EN>
					colorMain, colorSecond);
		}

		//										CHRONO DECIMALS INDEX

		if (showChrono == 1) {
 800de4e:	4b10      	ldr	r3, [pc, #64]	; (800de90 <interfaceDrawLayer+0xd74>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d001      	beq.n	800de5a <interfaceDrawLayer+0xd3e>
 800de56:	f000 fbf3 	bl	800e640 <interfaceDrawLayer+0x1524>
			for (uint8_t i = 0; i < 10; i++) {
 800de5a:	2316      	movs	r3, #22
 800de5c:	18fb      	adds	r3, r7, r3
 800de5e:	2200      	movs	r2, #0
 800de60:	701a      	strb	r2, [r3, #0]
 800de62:	e102      	b.n	800e06a <interfaceDrawLayer+0xf4e>
 800de64:	2000069f 	.word	0x2000069f
 800de68:	20000214 	.word	0x20000214
 800de6c:	20000644 	.word	0x20000644
 800de70:	20000710 	.word	0x20000710
 800de74:	200006b3 	.word	0x200006b3
 800de78:	20000697 	.word	0x20000697
 800de7c:	2000062d 	.word	0x2000062d
 800de80:	2000036c 	.word	0x2000036c
 800de84:	2000033a 	.word	0x2000033a
 800de88:	2000000c 	.word	0x2000000c
 800de8c:	0801612c 	.word	0x0801612c
 800de90:	200003ac 	.word	0x200003ac

				Paint_DrawLine(
						cos(chronoDecimalsIndexAngle[i])
 800de94:	2316      	movs	r3, #22
 800de96:	18fb      	adds	r3, r7, r3
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	4bba      	ldr	r3, [pc, #744]	; (800e184 <interfaceDrawLayer+0x1068>)
 800de9c:	0092      	lsls	r2, r2, #2
 800de9e:	58d3      	ldr	r3, [r2, r3]
 800dea0:	1c18      	adds	r0, r3, #0
 800dea2:	f7f5 f8c7 	bl	8003034 <__aeabi_f2d>
 800dea6:	0002      	movs	r2, r0
 800dea8:	000b      	movs	r3, r1
 800deaa:	0010      	movs	r0, r2
 800deac:	0019      	movs	r1, r3
 800deae:	f006 fa95 	bl	80143dc <cos>
 800deb2:	0004      	movs	r4, r0
 800deb4:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800deb6:	4bb4      	ldr	r3, [pc, #720]	; (800e188 <interfaceDrawLayer+0x106c>)
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	001a      	movs	r2, r3
 800debc:	4bb3      	ldr	r3, [pc, #716]	; (800e18c <interfaceDrawLayer+0x1070>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	0018      	movs	r0, r3
 800dec4:	f7f5 f860 	bl	8002f88 <__aeabi_i2d>
 800dec8:	0002      	movs	r2, r0
 800deca:	000b      	movs	r3, r1
 800decc:	0020      	movs	r0, r4
 800dece:	0029      	movs	r1, r5
 800ded0:	f7f4 fa08 	bl	80022e4 <__aeabi_dmul>
 800ded4:	0002      	movs	r2, r0
 800ded6:	000b      	movs	r3, r1
 800ded8:	0014      	movs	r4, r2
 800deda:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800dedc:	4bac      	ldr	r3, [pc, #688]	; (800e190 <interfaceDrawLayer+0x1074>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	0018      	movs	r0, r3
 800dee2:	f7f5 f851 	bl	8002f88 <__aeabi_i2d>
 800dee6:	0002      	movs	r2, r0
 800dee8:	000b      	movs	r3, r1
 800deea:	0020      	movs	r0, r4
 800deec:	0029      	movs	r1, r5
 800deee:	f7f3 fa89 	bl	8001404 <__aeabi_dadd>
 800def2:	0002      	movs	r2, r0
 800def4:	000b      	movs	r3, r1
				Paint_DrawLine(
 800def6:	0010      	movs	r0, r2
 800def8:	0019      	movs	r1, r3
 800defa:	f7f2 fb5d 	bl	80005b8 <__aeabi_d2uiz>
 800defe:	0003      	movs	r3, r0
 800df00:	b29e      	uxth	r6, r3
						sin(chronoDecimalsIndexAngle[i])
 800df02:	2316      	movs	r3, #22
 800df04:	18fb      	adds	r3, r7, r3
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	4b9e      	ldr	r3, [pc, #632]	; (800e184 <interfaceDrawLayer+0x1068>)
 800df0a:	0092      	lsls	r2, r2, #2
 800df0c:	58d3      	ldr	r3, [r2, r3]
 800df0e:	1c18      	adds	r0, r3, #0
 800df10:	f7f5 f890 	bl	8003034 <__aeabi_f2d>
 800df14:	0002      	movs	r2, r0
 800df16:	000b      	movs	r3, r1
 800df18:	0010      	movs	r0, r2
 800df1a:	0019      	movs	r1, r3
 800df1c:	f006 faa0 	bl	8014460 <sin>
 800df20:	0004      	movs	r4, r0
 800df22:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoDecimalsIndexLength)
 800df24:	4b98      	ldr	r3, [pc, #608]	; (800e188 <interfaceDrawLayer+0x106c>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	001a      	movs	r2, r3
 800df2a:	4b98      	ldr	r3, [pc, #608]	; (800e18c <interfaceDrawLayer+0x1070>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	0018      	movs	r0, r3
 800df32:	f7f5 f829 	bl	8002f88 <__aeabi_i2d>
 800df36:	0002      	movs	r2, r0
 800df38:	000b      	movs	r3, r1
 800df3a:	0020      	movs	r0, r4
 800df3c:	0029      	movs	r1, r5
 800df3e:	f7f4 f9d1 	bl	80022e4 <__aeabi_dmul>
 800df42:	0002      	movs	r2, r0
 800df44:	000b      	movs	r3, r1
 800df46:	0014      	movs	r4, r2
 800df48:	001d      	movs	r5, r3
								+ chronoDecimalsStartY,
 800df4a:	4b92      	ldr	r3, [pc, #584]	; (800e194 <interfaceDrawLayer+0x1078>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	0018      	movs	r0, r3
 800df50:	f7f5 f81a 	bl	8002f88 <__aeabi_i2d>
 800df54:	0002      	movs	r2, r0
 800df56:	000b      	movs	r3, r1
 800df58:	0020      	movs	r0, r4
 800df5a:	0029      	movs	r1, r5
 800df5c:	f7f3 fa52 	bl	8001404 <__aeabi_dadd>
 800df60:	0002      	movs	r2, r0
 800df62:	000b      	movs	r3, r1
				Paint_DrawLine(
 800df64:	0010      	movs	r0, r2
 800df66:	0019      	movs	r1, r3
 800df68:	f7f2 fb26 	bl	80005b8 <__aeabi_d2uiz>
 800df6c:	0003      	movs	r3, r0
 800df6e:	b29a      	uxth	r2, r3
 800df70:	4690      	mov	r8, r2

						cos(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800df72:	2316      	movs	r3, #22
 800df74:	18fb      	adds	r3, r7, r3
 800df76:	781a      	ldrb	r2, [r3, #0]
 800df78:	4b82      	ldr	r3, [pc, #520]	; (800e184 <interfaceDrawLayer+0x1068>)
 800df7a:	0092      	lsls	r2, r2, #2
 800df7c:	58d3      	ldr	r3, [r2, r3]
 800df7e:	1c18      	adds	r0, r3, #0
 800df80:	f7f5 f858 	bl	8003034 <__aeabi_f2d>
 800df84:	0002      	movs	r2, r0
 800df86:	000b      	movs	r3, r1
 800df88:	0010      	movs	r0, r2
 800df8a:	0019      	movs	r1, r3
 800df8c:	f006 fa26 	bl	80143dc <cos>
 800df90:	0004      	movs	r4, r0
 800df92:	000d      	movs	r5, r1
 800df94:	4b7c      	ldr	r3, [pc, #496]	; (800e188 <interfaceDrawLayer+0x106c>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	0018      	movs	r0, r3
 800df9a:	f7f4 fff5 	bl	8002f88 <__aeabi_i2d>
 800df9e:	0002      	movs	r2, r0
 800dfa0:	000b      	movs	r3, r1
 800dfa2:	0020      	movs	r0, r4
 800dfa4:	0029      	movs	r1, r5
 800dfa6:	f7f4 f99d 	bl	80022e4 <__aeabi_dmul>
 800dfaa:	0002      	movs	r2, r0
 800dfac:	000b      	movs	r3, r1
 800dfae:	0014      	movs	r4, r2
 800dfb0:	001d      	movs	r5, r3
								+ chronoDecimalsStartX,
 800dfb2:	4b77      	ldr	r3, [pc, #476]	; (800e190 <interfaceDrawLayer+0x1074>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	f7f4 ffe6 	bl	8002f88 <__aeabi_i2d>
 800dfbc:	0002      	movs	r2, r0
 800dfbe:	000b      	movs	r3, r1
 800dfc0:	0020      	movs	r0, r4
 800dfc2:	0029      	movs	r1, r5
 800dfc4:	f7f3 fa1e 	bl	8001404 <__aeabi_dadd>
 800dfc8:	0002      	movs	r2, r0
 800dfca:	000b      	movs	r3, r1
				Paint_DrawLine(
 800dfcc:	0010      	movs	r0, r2
 800dfce:	0019      	movs	r1, r3
 800dfd0:	f7f2 faf2 	bl	80005b8 <__aeabi_d2uiz>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4691      	mov	r9, r2
						sin(chronoDecimalsIndexAngle[i]) * (smallBoardRadius)
 800dfda:	2316      	movs	r3, #22
 800dfdc:	18fb      	adds	r3, r7, r3
 800dfde:	781a      	ldrb	r2, [r3, #0]
 800dfe0:	4b68      	ldr	r3, [pc, #416]	; (800e184 <interfaceDrawLayer+0x1068>)
 800dfe2:	0092      	lsls	r2, r2, #2
 800dfe4:	58d3      	ldr	r3, [r2, r3]
 800dfe6:	1c18      	adds	r0, r3, #0
 800dfe8:	f7f5 f824 	bl	8003034 <__aeabi_f2d>
 800dfec:	0002      	movs	r2, r0
 800dfee:	000b      	movs	r3, r1
 800dff0:	0010      	movs	r0, r2
 800dff2:	0019      	movs	r1, r3
 800dff4:	f006 fa34 	bl	8014460 <sin>
 800dff8:	0004      	movs	r4, r0
 800dffa:	000d      	movs	r5, r1
 800dffc:	4b62      	ldr	r3, [pc, #392]	; (800e188 <interfaceDrawLayer+0x106c>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	0018      	movs	r0, r3
 800e002:	f7f4 ffc1 	bl	8002f88 <__aeabi_i2d>
 800e006:	0002      	movs	r2, r0
 800e008:	000b      	movs	r3, r1
 800e00a:	0020      	movs	r0, r4
 800e00c:	0029      	movs	r1, r5
 800e00e:	f7f4 f969 	bl	80022e4 <__aeabi_dmul>
 800e012:	0002      	movs	r2, r0
 800e014:	000b      	movs	r3, r1
 800e016:	0014      	movs	r4, r2
 800e018:	001d      	movs	r5, r3
								+ chronoDecimalsStartY, colorMain,
 800e01a:	4b5e      	ldr	r3, [pc, #376]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	0018      	movs	r0, r3
 800e020:	f7f4 ffb2 	bl	8002f88 <__aeabi_i2d>
 800e024:	0002      	movs	r2, r0
 800e026:	000b      	movs	r3, r1
 800e028:	0020      	movs	r0, r4
 800e02a:	0029      	movs	r1, r5
 800e02c:	f7f3 f9ea 	bl	8001404 <__aeabi_dadd>
 800e030:	0002      	movs	r2, r0
 800e032:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e034:	0010      	movs	r0, r2
 800e036:	0019      	movs	r1, r3
 800e038:	f7f2 fabe 	bl	80005b8 <__aeabi_d2uiz>
 800e03c:	0003      	movs	r3, r0
 800e03e:	b29a      	uxth	r2, r3
 800e040:	4b55      	ldr	r3, [pc, #340]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	b2db      	uxtb	r3, r3
 800e046:	b29b      	uxth	r3, r3
 800e048:	2100      	movs	r1, #0
 800e04a:	9102      	str	r1, [sp, #8]
 800e04c:	2101      	movs	r1, #1
 800e04e:	9101      	str	r1, [sp, #4]
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	0013      	movs	r3, r2
 800e054:	464a      	mov	r2, r9
 800e056:	4641      	mov	r1, r8
 800e058:	0030      	movs	r0, r6
 800e05a:	f7fa fe8b 	bl	8008d74 <Paint_DrawLine>
			for (uint8_t i = 0; i < 10; i++) {
 800e05e:	2116      	movs	r1, #22
 800e060:	187b      	adds	r3, r7, r1
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	187b      	adds	r3, r7, r1
 800e066:	3201      	adds	r2, #1
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	2316      	movs	r3, #22
 800e06c:	18fb      	adds	r3, r7, r3
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2b09      	cmp	r3, #9
 800e072:	d800      	bhi.n	800e076 <interfaceDrawLayer+0xf5a>
 800e074:	e70e      	b.n	800de94 <interfaceDrawLayer+0xd78>
						DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			}

			//										CHRONO DECIMALS DIGITS
			Paint_DrawString_EN(chronoDecimalsStartX - 4,
 800e076:	4b46      	ldr	r3, [pc, #280]	; (800e190 <interfaceDrawLayer+0x1074>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b04      	subs	r3, #4
 800e07e:	b298      	uxth	r0, r3
 800e080:	4b44      	ldr	r3, [pc, #272]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	b29b      	uxth	r3, r3
 800e086:	3b18      	subs	r3, #24
 800e088:	b299      	uxth	r1, r3
 800e08a:	4b43      	ldr	r3, [pc, #268]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	b29b      	uxth	r3, r3
 800e092:	4a42      	ldr	r2, [pc, #264]	; (800e19c <interfaceDrawLayer+0x1080>)
 800e094:	7812      	ldrb	r2, [r2, #0]
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	b292      	uxth	r2, r2
 800e09a:	4d41      	ldr	r5, [pc, #260]	; (800e1a0 <interfaceDrawLayer+0x1084>)
 800e09c:	4c41      	ldr	r4, [pc, #260]	; (800e1a4 <interfaceDrawLayer+0x1088>)
 800e09e:	9201      	str	r2, [sp, #4]
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	002b      	movs	r3, r5
 800e0a4:	0022      	movs	r2, r4
 800e0a6:	f7fb fc2f 	bl	8009908 <Paint_DrawString_EN>
					chronoDecimalsStartY - 24, "0", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 12,
 800e0aa:	4b39      	ldr	r3, [pc, #228]	; (800e190 <interfaceDrawLayer+0x1074>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	330c      	adds	r3, #12
 800e0b2:	b298      	uxth	r0, r3
 800e0b4:	4b37      	ldr	r3, [pc, #220]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3b0c      	subs	r3, #12
 800e0bc:	b299      	uxth	r1, r3
 800e0be:	4b36      	ldr	r3, [pc, #216]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	4a35      	ldr	r2, [pc, #212]	; (800e19c <interfaceDrawLayer+0x1080>)
 800e0c8:	7812      	ldrb	r2, [r2, #0]
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	b292      	uxth	r2, r2
 800e0ce:	4d34      	ldr	r5, [pc, #208]	; (800e1a0 <interfaceDrawLayer+0x1084>)
 800e0d0:	4c35      	ldr	r4, [pc, #212]	; (800e1a8 <interfaceDrawLayer+0x108c>)
 800e0d2:	9201      	str	r2, [sp, #4]
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	002b      	movs	r3, r5
 800e0d8:	0022      	movs	r2, r4
 800e0da:	f7fb fc15 	bl	8009908 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "2", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX + 6,
 800e0de:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <interfaceDrawLayer+0x1074>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3306      	adds	r3, #6
 800e0e6:	b298      	uxth	r0, r3
 800e0e8:	4b2a      	ldr	r3, [pc, #168]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3306      	adds	r3, #6
 800e0f0:	b299      	uxth	r1, r3
 800e0f2:	4b29      	ldr	r3, [pc, #164]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	4a28      	ldr	r2, [pc, #160]	; (800e19c <interfaceDrawLayer+0x1080>)
 800e0fc:	7812      	ldrb	r2, [r2, #0]
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	b292      	uxth	r2, r2
 800e102:	4d27      	ldr	r5, [pc, #156]	; (800e1a0 <interfaceDrawLayer+0x1084>)
 800e104:	4c29      	ldr	r4, [pc, #164]	; (800e1ac <interfaceDrawLayer+0x1090>)
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	002b      	movs	r3, r5
 800e10c:	0022      	movs	r2, r4
 800e10e:	f7fb fbfb 	bl	8009908 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "4", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 14,
 800e112:	4b1f      	ldr	r3, [pc, #124]	; (800e190 <interfaceDrawLayer+0x1074>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	b29b      	uxth	r3, r3
 800e118:	3b0e      	subs	r3, #14
 800e11a:	b298      	uxth	r0, r3
 800e11c:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	b29b      	uxth	r3, r3
 800e122:	3306      	adds	r3, #6
 800e124:	b299      	uxth	r1, r3
 800e126:	4b1c      	ldr	r3, [pc, #112]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	4a1b      	ldr	r2, [pc, #108]	; (800e19c <interfaceDrawLayer+0x1080>)
 800e130:	7812      	ldrb	r2, [r2, #0]
 800e132:	b2d2      	uxtb	r2, r2
 800e134:	b292      	uxth	r2, r2
 800e136:	4d1a      	ldr	r5, [pc, #104]	; (800e1a0 <interfaceDrawLayer+0x1084>)
 800e138:	4c1d      	ldr	r4, [pc, #116]	; (800e1b0 <interfaceDrawLayer+0x1094>)
 800e13a:	9201      	str	r2, [sp, #4]
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	002b      	movs	r3, r5
 800e140:	0022      	movs	r2, r4
 800e142:	f7fb fbe1 	bl	8009908 <Paint_DrawString_EN>
					chronoDecimalsStartY + 6, "6", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoDecimalsStartX - 18,
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <interfaceDrawLayer+0x1074>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	3b12      	subs	r3, #18
 800e14e:	b298      	uxth	r0, r3
 800e150:	4b10      	ldr	r3, [pc, #64]	; (800e194 <interfaceDrawLayer+0x1078>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b0c      	subs	r3, #12
 800e158:	b299      	uxth	r1, r3
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <interfaceDrawLayer+0x107c>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	b29b      	uxth	r3, r3
 800e162:	4a0e      	ldr	r2, [pc, #56]	; (800e19c <interfaceDrawLayer+0x1080>)
 800e164:	7812      	ldrb	r2, [r2, #0]
 800e166:	b2d2      	uxtb	r2, r2
 800e168:	b292      	uxth	r2, r2
 800e16a:	4d0d      	ldr	r5, [pc, #52]	; (800e1a0 <interfaceDrawLayer+0x1084>)
 800e16c:	4c11      	ldr	r4, [pc, #68]	; (800e1b4 <interfaceDrawLayer+0x1098>)
 800e16e:	9201      	str	r2, [sp, #4]
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	002b      	movs	r3, r5
 800e174:	0022      	movs	r2, r4
 800e176:	f7fb fbc7 	bl	8009908 <Paint_DrawString_EN>
					chronoDecimalsStartY - 12, "8", &Font12, colorMain,
					colorSecond);

			//										CHRONO MINUTES INDEX
			for (uint8_t i = 0; i < 30; i++) {
 800e17a:	2315      	movs	r3, #21
 800e17c:	18fb      	adds	r3, r7, r3
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	e1f6      	b.n	800e572 <interfaceDrawLayer+0x1456>
 800e184:	2000037c 	.word	0x2000037c
 800e188:	200001f0 	.word	0x200001f0
 800e18c:	2000061a 	.word	0x2000061a
 800e190:	20000645 	.word	0x20000645
 800e194:	20000646 	.word	0x20000646
 800e198:	2000033a 	.word	0x2000033a
 800e19c:	200006b3 	.word	0x200006b3
 800e1a0:	2000000c 	.word	0x2000000c
 800e1a4:	08016130 	.word	0x08016130
 800e1a8:	08016134 	.word	0x08016134
 800e1ac:	08016138 	.word	0x08016138
 800e1b0:	0801613c 	.word	0x0801613c
 800e1b4:	08016140 	.word	0x08016140

				Paint_DrawLine(
						cos(chronoMinutesIndexAngle[i])
 800e1b8:	2315      	movs	r3, #21
 800e1ba:	18fb      	adds	r3, r7, r3
 800e1bc:	781a      	ldrb	r2, [r3, #0]
 800e1be:	4bfd      	ldr	r3, [pc, #1012]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e1c0:	0092      	lsls	r2, r2, #2
 800e1c2:	58d3      	ldr	r3, [r2, r3]
 800e1c4:	1c18      	adds	r0, r3, #0
 800e1c6:	f7f4 ff35 	bl	8003034 <__aeabi_f2d>
 800e1ca:	0002      	movs	r2, r0
 800e1cc:	000b      	movs	r3, r1
 800e1ce:	0010      	movs	r0, r2
 800e1d0:	0019      	movs	r1, r3
 800e1d2:	f006 f903 	bl	80143dc <cos>
 800e1d6:	0004      	movs	r4, r0
 800e1d8:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800e1da:	4bf7      	ldr	r3, [pc, #988]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	001a      	movs	r2, r3
 800e1e0:	4bf6      	ldr	r3, [pc, #984]	; (800e5bc <interfaceDrawLayer+0x14a0>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	f7f4 fece 	bl	8002f88 <__aeabi_i2d>
 800e1ec:	0002      	movs	r2, r0
 800e1ee:	000b      	movs	r3, r1
 800e1f0:	0020      	movs	r0, r4
 800e1f2:	0029      	movs	r1, r5
 800e1f4:	f7f4 f876 	bl	80022e4 <__aeabi_dmul>
 800e1f8:	0002      	movs	r2, r0
 800e1fa:	000b      	movs	r3, r1
 800e1fc:	0014      	movs	r4, r2
 800e1fe:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800e200:	4bef      	ldr	r3, [pc, #956]	; (800e5c0 <interfaceDrawLayer+0x14a4>)
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	0018      	movs	r0, r3
 800e206:	f7f4 febf 	bl	8002f88 <__aeabi_i2d>
 800e20a:	0002      	movs	r2, r0
 800e20c:	000b      	movs	r3, r1
 800e20e:	0020      	movs	r0, r4
 800e210:	0029      	movs	r1, r5
 800e212:	f7f3 f8f7 	bl	8001404 <__aeabi_dadd>
 800e216:	0002      	movs	r2, r0
 800e218:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e21a:	0010      	movs	r0, r2
 800e21c:	0019      	movs	r1, r3
 800e21e:	f7f2 f9cb 	bl	80005b8 <__aeabi_d2uiz>
 800e222:	0003      	movs	r3, r0
 800e224:	b29e      	uxth	r6, r3
						sin(chronoMinutesIndexAngle[i])
 800e226:	2315      	movs	r3, #21
 800e228:	18fb      	adds	r3, r7, r3
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	4be1      	ldr	r3, [pc, #900]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e22e:	0092      	lsls	r2, r2, #2
 800e230:	58d3      	ldr	r3, [r2, r3]
 800e232:	1c18      	adds	r0, r3, #0
 800e234:	f7f4 fefe 	bl	8003034 <__aeabi_f2d>
 800e238:	0002      	movs	r2, r0
 800e23a:	000b      	movs	r3, r1
 800e23c:	0010      	movs	r0, r2
 800e23e:	0019      	movs	r1, r3
 800e240:	f006 f90e 	bl	8014460 <sin>
 800e244:	0004      	movs	r4, r0
 800e246:	000d      	movs	r5, r1
								* (smallBoardRadius - chronoMinutesIndexLength)
 800e248:	4bdb      	ldr	r3, [pc, #876]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	001a      	movs	r2, r3
 800e24e:	4bdb      	ldr	r3, [pc, #876]	; (800e5bc <interfaceDrawLayer+0x14a0>)
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	0018      	movs	r0, r3
 800e256:	f7f4 fe97 	bl	8002f88 <__aeabi_i2d>
 800e25a:	0002      	movs	r2, r0
 800e25c:	000b      	movs	r3, r1
 800e25e:	0020      	movs	r0, r4
 800e260:	0029      	movs	r1, r5
 800e262:	f7f4 f83f 	bl	80022e4 <__aeabi_dmul>
 800e266:	0002      	movs	r2, r0
 800e268:	000b      	movs	r3, r1
 800e26a:	0014      	movs	r4, r2
 800e26c:	001d      	movs	r5, r3
								+ chronoMinutesStartY,
 800e26e:	4bd5      	ldr	r3, [pc, #852]	; (800e5c4 <interfaceDrawLayer+0x14a8>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	0018      	movs	r0, r3
 800e274:	f7f4 fe88 	bl	8002f88 <__aeabi_i2d>
 800e278:	0002      	movs	r2, r0
 800e27a:	000b      	movs	r3, r1
 800e27c:	0020      	movs	r0, r4
 800e27e:	0029      	movs	r1, r5
 800e280:	f7f3 f8c0 	bl	8001404 <__aeabi_dadd>
 800e284:	0002      	movs	r2, r0
 800e286:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e288:	0010      	movs	r0, r2
 800e28a:	0019      	movs	r1, r3
 800e28c:	f7f2 f994 	bl	80005b8 <__aeabi_d2uiz>
 800e290:	0003      	movs	r3, r0
 800e292:	b29a      	uxth	r2, r3
 800e294:	4690      	mov	r8, r2

						cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e296:	2315      	movs	r3, #21
 800e298:	18fb      	adds	r3, r7, r3
 800e29a:	781a      	ldrb	r2, [r3, #0]
 800e29c:	4bc5      	ldr	r3, [pc, #788]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e29e:	0092      	lsls	r2, r2, #2
 800e2a0:	58d3      	ldr	r3, [r2, r3]
 800e2a2:	1c18      	adds	r0, r3, #0
 800e2a4:	f7f4 fec6 	bl	8003034 <__aeabi_f2d>
 800e2a8:	0002      	movs	r2, r0
 800e2aa:	000b      	movs	r3, r1
 800e2ac:	0010      	movs	r0, r2
 800e2ae:	0019      	movs	r1, r3
 800e2b0:	f006 f894 	bl	80143dc <cos>
 800e2b4:	0004      	movs	r4, r0
 800e2b6:	000d      	movs	r5, r1
 800e2b8:	4bbf      	ldr	r3, [pc, #764]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	0018      	movs	r0, r3
 800e2be:	f7f4 fe63 	bl	8002f88 <__aeabi_i2d>
 800e2c2:	0002      	movs	r2, r0
 800e2c4:	000b      	movs	r3, r1
 800e2c6:	0020      	movs	r0, r4
 800e2c8:	0029      	movs	r1, r5
 800e2ca:	f7f4 f80b 	bl	80022e4 <__aeabi_dmul>
 800e2ce:	0002      	movs	r2, r0
 800e2d0:	000b      	movs	r3, r1
 800e2d2:	0014      	movs	r4, r2
 800e2d4:	001d      	movs	r5, r3
								+ chronoMinutesStartX,
 800e2d6:	4bba      	ldr	r3, [pc, #744]	; (800e5c0 <interfaceDrawLayer+0x14a4>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	0018      	movs	r0, r3
 800e2dc:	f7f4 fe54 	bl	8002f88 <__aeabi_i2d>
 800e2e0:	0002      	movs	r2, r0
 800e2e2:	000b      	movs	r3, r1
 800e2e4:	0020      	movs	r0, r4
 800e2e6:	0029      	movs	r1, r5
 800e2e8:	f7f3 f88c 	bl	8001404 <__aeabi_dadd>
 800e2ec:	0002      	movs	r2, r0
 800e2ee:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e2f0:	0010      	movs	r0, r2
 800e2f2:	0019      	movs	r1, r3
 800e2f4:	f7f2 f960 	bl	80005b8 <__aeabi_d2uiz>
 800e2f8:	0003      	movs	r3, r0
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	4691      	mov	r9, r2
						sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e2fe:	2315      	movs	r3, #21
 800e300:	18fb      	adds	r3, r7, r3
 800e302:	781a      	ldrb	r2, [r3, #0]
 800e304:	4bab      	ldr	r3, [pc, #684]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e306:	0092      	lsls	r2, r2, #2
 800e308:	58d3      	ldr	r3, [r2, r3]
 800e30a:	1c18      	adds	r0, r3, #0
 800e30c:	f7f4 fe92 	bl	8003034 <__aeabi_f2d>
 800e310:	0002      	movs	r2, r0
 800e312:	000b      	movs	r3, r1
 800e314:	0010      	movs	r0, r2
 800e316:	0019      	movs	r1, r3
 800e318:	f006 f8a2 	bl	8014460 <sin>
 800e31c:	0004      	movs	r4, r0
 800e31e:	000d      	movs	r5, r1
 800e320:	4ba5      	ldr	r3, [pc, #660]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	0018      	movs	r0, r3
 800e326:	f7f4 fe2f 	bl	8002f88 <__aeabi_i2d>
 800e32a:	0002      	movs	r2, r0
 800e32c:	000b      	movs	r3, r1
 800e32e:	0020      	movs	r0, r4
 800e330:	0029      	movs	r1, r5
 800e332:	f7f3 ffd7 	bl	80022e4 <__aeabi_dmul>
 800e336:	0002      	movs	r2, r0
 800e338:	000b      	movs	r3, r1
 800e33a:	0014      	movs	r4, r2
 800e33c:	001d      	movs	r5, r3
								+ chronoMinutesStartY, colorMain, DOT_PIXEL_1X1,
 800e33e:	4ba1      	ldr	r3, [pc, #644]	; (800e5c4 <interfaceDrawLayer+0x14a8>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	0018      	movs	r0, r3
 800e344:	f7f4 fe20 	bl	8002f88 <__aeabi_i2d>
 800e348:	0002      	movs	r2, r0
 800e34a:	000b      	movs	r3, r1
 800e34c:	0020      	movs	r0, r4
 800e34e:	0029      	movs	r1, r5
 800e350:	f7f3 f858 	bl	8001404 <__aeabi_dadd>
 800e354:	0002      	movs	r2, r0
 800e356:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e358:	0010      	movs	r0, r2
 800e35a:	0019      	movs	r1, r3
 800e35c:	f7f2 f92c 	bl	80005b8 <__aeabi_d2uiz>
 800e360:	0003      	movs	r3, r0
 800e362:	b29a      	uxth	r2, r3
 800e364:	4b98      	ldr	r3, [pc, #608]	; (800e5c8 <interfaceDrawLayer+0x14ac>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	2100      	movs	r1, #0
 800e36e:	9102      	str	r1, [sp, #8]
 800e370:	2101      	movs	r1, #1
 800e372:	9101      	str	r1, [sp, #4]
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	0013      	movs	r3, r2
 800e378:	464a      	mov	r2, r9
 800e37a:	4641      	mov	r1, r8
 800e37c:	0030      	movs	r0, r6
 800e37e:	f7fa fcf9 	bl	8008d74 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 5 == 0) {
 800e382:	2415      	movs	r4, #21
 800e384:	193b      	adds	r3, r7, r4
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2105      	movs	r1, #5
 800e38a:	0018      	movs	r0, r3
 800e38c:	f7f1 ff48 	bl	8000220 <__aeabi_uidivmod>
 800e390:	000b      	movs	r3, r1
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d000      	beq.n	800e39a <interfaceDrawLayer+0x127e>
 800e398:	e0e5      	b.n	800e566 <interfaceDrawLayer+0x144a>
					Paint_DrawLine(
							cos(chronoMinutesIndexAngle[i])
 800e39a:	193b      	adds	r3, r7, r4
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	4b85      	ldr	r3, [pc, #532]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e3a0:	0092      	lsls	r2, r2, #2
 800e3a2:	58d3      	ldr	r3, [r2, r3]
 800e3a4:	1c18      	adds	r0, r3, #0
 800e3a6:	f7f4 fe45 	bl	8003034 <__aeabi_f2d>
 800e3aa:	0002      	movs	r2, r0
 800e3ac:	000b      	movs	r3, r1
 800e3ae:	0010      	movs	r0, r2
 800e3b0:	0019      	movs	r1, r3
 800e3b2:	f006 f813 	bl	80143dc <cos>
 800e3b6:	0004      	movs	r4, r0
 800e3b8:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800e3ba:	4b7f      	ldr	r3, [pc, #508]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	001a      	movs	r2, r3
 800e3c0:	4b7e      	ldr	r3, [pc, #504]	; (800e5bc <interfaceDrawLayer+0x14a0>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	3305      	adds	r3, #5
 800e3c6:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7f4 fddd 	bl	8002f88 <__aeabi_i2d>
 800e3ce:	0002      	movs	r2, r0
 800e3d0:	000b      	movs	r3, r1
 800e3d2:	0020      	movs	r0, r4
 800e3d4:	0029      	movs	r1, r5
 800e3d6:	f7f3 ff85 	bl	80022e4 <__aeabi_dmul>
 800e3da:	0002      	movs	r2, r0
 800e3dc:	000b      	movs	r3, r1
 800e3de:	0014      	movs	r4, r2
 800e3e0:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800e3e2:	4b77      	ldr	r3, [pc, #476]	; (800e5c0 <interfaceDrawLayer+0x14a4>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	f7f4 fdce 	bl	8002f88 <__aeabi_i2d>
 800e3ec:	0002      	movs	r2, r0
 800e3ee:	000b      	movs	r3, r1
 800e3f0:	0020      	movs	r0, r4
 800e3f2:	0029      	movs	r1, r5
 800e3f4:	f7f3 f806 	bl	8001404 <__aeabi_dadd>
 800e3f8:	0002      	movs	r2, r0
 800e3fa:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e3fc:	0010      	movs	r0, r2
 800e3fe:	0019      	movs	r1, r3
 800e400:	f7f2 f8da 	bl	80005b8 <__aeabi_d2uiz>
 800e404:	0003      	movs	r3, r0
 800e406:	b29e      	uxth	r6, r3
							sin(chronoMinutesIndexAngle[i])
 800e408:	2415      	movs	r4, #21
 800e40a:	193b      	adds	r3, r7, r4
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	4b69      	ldr	r3, [pc, #420]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e410:	0092      	lsls	r2, r2, #2
 800e412:	58d3      	ldr	r3, [r2, r3]
 800e414:	1c18      	adds	r0, r3, #0
 800e416:	f7f4 fe0d 	bl	8003034 <__aeabi_f2d>
 800e41a:	0002      	movs	r2, r0
 800e41c:	000b      	movs	r3, r1
 800e41e:	0010      	movs	r0, r2
 800e420:	0019      	movs	r1, r3
 800e422:	f006 f81d 	bl	8014460 <sin>
 800e426:	0004      	movs	r4, r0
 800e428:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (chronoMinutesIndexLength + 5))
 800e42a:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	001a      	movs	r2, r3
 800e430:	4b62      	ldr	r3, [pc, #392]	; (800e5bc <interfaceDrawLayer+0x14a0>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	3305      	adds	r3, #5
 800e436:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e438:	0018      	movs	r0, r3
 800e43a:	f7f4 fda5 	bl	8002f88 <__aeabi_i2d>
 800e43e:	0002      	movs	r2, r0
 800e440:	000b      	movs	r3, r1
 800e442:	0020      	movs	r0, r4
 800e444:	0029      	movs	r1, r5
 800e446:	f7f3 ff4d 	bl	80022e4 <__aeabi_dmul>
 800e44a:	0002      	movs	r2, r0
 800e44c:	000b      	movs	r3, r1
 800e44e:	0014      	movs	r4, r2
 800e450:	001d      	movs	r5, r3
									+ chronoMinutesStartY,
 800e452:	4b5c      	ldr	r3, [pc, #368]	; (800e5c4 <interfaceDrawLayer+0x14a8>)
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	0018      	movs	r0, r3
 800e458:	f7f4 fd96 	bl	8002f88 <__aeabi_i2d>
 800e45c:	0002      	movs	r2, r0
 800e45e:	000b      	movs	r3, r1
 800e460:	0020      	movs	r0, r4
 800e462:	0029      	movs	r1, r5
 800e464:	f7f2 ffce 	bl	8001404 <__aeabi_dadd>
 800e468:	0002      	movs	r2, r0
 800e46a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e46c:	0010      	movs	r0, r2
 800e46e:	0019      	movs	r1, r3
 800e470:	f7f2 f8a2 	bl	80005b8 <__aeabi_d2uiz>
 800e474:	0003      	movs	r3, r0
 800e476:	b29b      	uxth	r3, r3
 800e478:	4698      	mov	r8, r3

							cos(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e47a:	2415      	movs	r4, #21
 800e47c:	193b      	adds	r3, r7, r4
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	4b4c      	ldr	r3, [pc, #304]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e482:	0092      	lsls	r2, r2, #2
 800e484:	58d3      	ldr	r3, [r2, r3]
 800e486:	1c18      	adds	r0, r3, #0
 800e488:	f7f4 fdd4 	bl	8003034 <__aeabi_f2d>
 800e48c:	0002      	movs	r2, r0
 800e48e:	000b      	movs	r3, r1
 800e490:	0010      	movs	r0, r2
 800e492:	0019      	movs	r1, r3
 800e494:	f005 ffa2 	bl	80143dc <cos>
 800e498:	0004      	movs	r4, r0
 800e49a:	000d      	movs	r5, r1
 800e49c:	4b46      	ldr	r3, [pc, #280]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	0018      	movs	r0, r3
 800e4a2:	f7f4 fd71 	bl	8002f88 <__aeabi_i2d>
 800e4a6:	0002      	movs	r2, r0
 800e4a8:	000b      	movs	r3, r1
 800e4aa:	0020      	movs	r0, r4
 800e4ac:	0029      	movs	r1, r5
 800e4ae:	f7f3 ff19 	bl	80022e4 <__aeabi_dmul>
 800e4b2:	0002      	movs	r2, r0
 800e4b4:	000b      	movs	r3, r1
 800e4b6:	0014      	movs	r4, r2
 800e4b8:	001d      	movs	r5, r3
									+ chronoMinutesStartX,
 800e4ba:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <interfaceDrawLayer+0x14a4>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f7f4 fd62 	bl	8002f88 <__aeabi_i2d>
 800e4c4:	0002      	movs	r2, r0
 800e4c6:	000b      	movs	r3, r1
 800e4c8:	0020      	movs	r0, r4
 800e4ca:	0029      	movs	r1, r5
 800e4cc:	f7f2 ff9a 	bl	8001404 <__aeabi_dadd>
 800e4d0:	0002      	movs	r2, r0
 800e4d2:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e4d4:	0010      	movs	r0, r2
 800e4d6:	0019      	movs	r1, r3
 800e4d8:	f7f2 f86e 	bl	80005b8 <__aeabi_d2uiz>
 800e4dc:	0003      	movs	r3, r0
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4699      	mov	r9, r3
							sin(chronoMinutesIndexAngle[i]) * (smallBoardRadius)
 800e4e2:	2415      	movs	r4, #21
 800e4e4:	193b      	adds	r3, r7, r4
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	4b32      	ldr	r3, [pc, #200]	; (800e5b4 <interfaceDrawLayer+0x1498>)
 800e4ea:	0092      	lsls	r2, r2, #2
 800e4ec:	58d3      	ldr	r3, [r2, r3]
 800e4ee:	1c18      	adds	r0, r3, #0
 800e4f0:	f7f4 fda0 	bl	8003034 <__aeabi_f2d>
 800e4f4:	0002      	movs	r2, r0
 800e4f6:	000b      	movs	r3, r1
 800e4f8:	0010      	movs	r0, r2
 800e4fa:	0019      	movs	r1, r3
 800e4fc:	f005 ffb0 	bl	8014460 <sin>
 800e500:	0004      	movs	r4, r0
 800e502:	000d      	movs	r5, r1
 800e504:	4b2c      	ldr	r3, [pc, #176]	; (800e5b8 <interfaceDrawLayer+0x149c>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	0018      	movs	r0, r3
 800e50a:	f7f4 fd3d 	bl	8002f88 <__aeabi_i2d>
 800e50e:	0002      	movs	r2, r0
 800e510:	000b      	movs	r3, r1
 800e512:	0020      	movs	r0, r4
 800e514:	0029      	movs	r1, r5
 800e516:	f7f3 fee5 	bl	80022e4 <__aeabi_dmul>
 800e51a:	0002      	movs	r2, r0
 800e51c:	000b      	movs	r3, r1
 800e51e:	0014      	movs	r4, r2
 800e520:	001d      	movs	r5, r3
									+ chronoMinutesStartY, colorMain,
 800e522:	4b28      	ldr	r3, [pc, #160]	; (800e5c4 <interfaceDrawLayer+0x14a8>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	0018      	movs	r0, r3
 800e528:	f7f4 fd2e 	bl	8002f88 <__aeabi_i2d>
 800e52c:	0002      	movs	r2, r0
 800e52e:	000b      	movs	r3, r1
 800e530:	0020      	movs	r0, r4
 800e532:	0029      	movs	r1, r5
 800e534:	f7f2 ff66 	bl	8001404 <__aeabi_dadd>
 800e538:	0002      	movs	r2, r0
 800e53a:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e53c:	0010      	movs	r0, r2
 800e53e:	0019      	movs	r1, r3
 800e540:	f7f2 f83a 	bl	80005b8 <__aeabi_d2uiz>
 800e544:	0003      	movs	r3, r0
 800e546:	b29a      	uxth	r2, r3
 800e548:	4b1f      	ldr	r3, [pc, #124]	; (800e5c8 <interfaceDrawLayer+0x14ac>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	b29b      	uxth	r3, r3
 800e550:	2100      	movs	r1, #0
 800e552:	9102      	str	r1, [sp, #8]
 800e554:	2101      	movs	r1, #1
 800e556:	9101      	str	r1, [sp, #4]
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	0013      	movs	r3, r2
 800e55c:	464a      	mov	r2, r9
 800e55e:	4641      	mov	r1, r8
 800e560:	0030      	movs	r0, r6
 800e562:	f7fa fc07 	bl	8008d74 <Paint_DrawLine>
			for (uint8_t i = 0; i < 30; i++) {
 800e566:	2115      	movs	r1, #21
 800e568:	187b      	adds	r3, r7, r1
 800e56a:	781a      	ldrb	r2, [r3, #0]
 800e56c:	187b      	adds	r3, r7, r1
 800e56e:	3201      	adds	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	2315      	movs	r3, #21
 800e574:	18fb      	adds	r3, r7, r3
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b1d      	cmp	r3, #29
 800e57a:	d800      	bhi.n	800e57e <interfaceDrawLayer+0x1462>
 800e57c:	e61c      	b.n	800e1b8 <interfaceDrawLayer+0x109c>
				}
			}

			//										CHRONO MINUTES DIGITS

			Paint_DrawString_EN(chronoMinutesStartX - 8,
 800e57e:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <interfaceDrawLayer+0x14a4>)
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	b29b      	uxth	r3, r3
 800e584:	3b08      	subs	r3, #8
 800e586:	b298      	uxth	r0, r3
 800e588:	4b0e      	ldr	r3, [pc, #56]	; (800e5c4 <interfaceDrawLayer+0x14a8>)
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	3b14      	subs	r3, #20
 800e590:	b299      	uxth	r1, r3
 800e592:	4b0d      	ldr	r3, [pc, #52]	; (800e5c8 <interfaceDrawLayer+0x14ac>)
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	b2db      	uxtb	r3, r3
 800e598:	b29b      	uxth	r3, r3
 800e59a:	4a0c      	ldr	r2, [pc, #48]	; (800e5cc <interfaceDrawLayer+0x14b0>)
 800e59c:	7812      	ldrb	r2, [r2, #0]
 800e59e:	b2d2      	uxtb	r2, r2
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	4d0b      	ldr	r5, [pc, #44]	; (800e5d0 <interfaceDrawLayer+0x14b4>)
 800e5a4:	4c0b      	ldr	r4, [pc, #44]	; (800e5d4 <interfaceDrawLayer+0x14b8>)
 800e5a6:	9201      	str	r2, [sp, #4]
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	002b      	movs	r3, r5
 800e5ac:	0022      	movs	r2, r4
 800e5ae:	f7fb f9ab 	bl	8009908 <Paint_DrawString_EN>
 800e5b2:	e011      	b.n	800e5d8 <interfaceDrawLayer+0x14bc>
 800e5b4:	2000059c 	.word	0x2000059c
 800e5b8:	200001f0 	.word	0x200001f0
 800e5bc:	200003af 	.word	0x200003af
 800e5c0:	200006f4 	.word	0x200006f4
 800e5c4:	200006b4 	.word	0x200006b4
 800e5c8:	2000033a 	.word	0x2000033a
 800e5cc:	200006b3 	.word	0x200006b3
 800e5d0:	2000000c 	.word	0x2000000c
 800e5d4:	08016144 	.word	0x08016144
					chronoMinutesStartY - 20, "30", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX + 2,
 800e5d8:	4b1e      	ldr	r3, [pc, #120]	; (800e654 <interfaceDrawLayer+0x1538>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3302      	adds	r3, #2
 800e5e0:	b298      	uxth	r0, r3
 800e5e2:	4b1d      	ldr	r3, [pc, #116]	; (800e658 <interfaceDrawLayer+0x153c>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	3302      	adds	r3, #2
 800e5ea:	b299      	uxth	r1, r3
 800e5ec:	4b1b      	ldr	r3, [pc, #108]	; (800e65c <interfaceDrawLayer+0x1540>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	4a1a      	ldr	r2, [pc, #104]	; (800e660 <interfaceDrawLayer+0x1544>)
 800e5f6:	7812      	ldrb	r2, [r2, #0]
 800e5f8:	b2d2      	uxtb	r2, r2
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	4d19      	ldr	r5, [pc, #100]	; (800e664 <interfaceDrawLayer+0x1548>)
 800e5fe:	4c1a      	ldr	r4, [pc, #104]	; (800e668 <interfaceDrawLayer+0x154c>)
 800e600:	9201      	str	r2, [sp, #4]
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	002b      	movs	r3, r5
 800e606:	0022      	movs	r2, r4
 800e608:	f7fb f97e 	bl	8009908 <Paint_DrawString_EN>
					chronoMinutesStartY + 2, "10", &Font12, colorMain,
					colorSecond);
			Paint_DrawString_EN(chronoMinutesStartX - 18,
 800e60c:	4b11      	ldr	r3, [pc, #68]	; (800e654 <interfaceDrawLayer+0x1538>)
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	b29b      	uxth	r3, r3
 800e612:	3b12      	subs	r3, #18
 800e614:	b298      	uxth	r0, r3
 800e616:	4b10      	ldr	r3, [pc, #64]	; (800e658 <interfaceDrawLayer+0x153c>)
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	3302      	adds	r3, #2
 800e61e:	b299      	uxth	r1, r3
 800e620:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <interfaceDrawLayer+0x1540>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	b2db      	uxtb	r3, r3
 800e626:	b29b      	uxth	r3, r3
 800e628:	4a0d      	ldr	r2, [pc, #52]	; (800e660 <interfaceDrawLayer+0x1544>)
 800e62a:	7812      	ldrb	r2, [r2, #0]
 800e62c:	b2d2      	uxtb	r2, r2
 800e62e:	b292      	uxth	r2, r2
 800e630:	4d0c      	ldr	r5, [pc, #48]	; (800e664 <interfaceDrawLayer+0x1548>)
 800e632:	4c0e      	ldr	r4, [pc, #56]	; (800e66c <interfaceDrawLayer+0x1550>)
 800e634:	9201      	str	r2, [sp, #4]
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	002b      	movs	r3, r5
 800e63a:	0022      	movs	r2, r4
 800e63c:	f7fb f964 	bl	8009908 <Paint_DrawString_EN>
					colorSecond);
		}

		//										SECONDS INDEX

		if (showSeconds == 1) {
 800e640:	4b0b      	ldr	r3, [pc, #44]	; (800e670 <interfaceDrawLayer+0x1554>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d000      	beq.n	800e64a <interfaceDrawLayer+0x152e>
 800e648:	e258      	b.n	800eafc <interfaceDrawLayer+0x19e0>
			for (uint8_t i = 0; i < 12; i++) {
 800e64a:	2314      	movs	r3, #20
 800e64c:	18fb      	adds	r3, r7, r3
 800e64e:	2200      	movs	r2, #0
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	e1ec      	b.n	800ea2e <interfaceDrawLayer+0x1912>
 800e654:	200006f4 	.word	0x200006f4
 800e658:	200006b4 	.word	0x200006b4
 800e65c:	2000033a 	.word	0x2000033a
 800e660:	200006b3 	.word	0x200006b3
 800e664:	2000000c 	.word	0x2000000c
 800e668:	08016148 	.word	0x08016148
 800e66c:	0801614c 	.word	0x0801614c
 800e670:	200001ff 	.word	0x200001ff

				Paint_DrawLine(
						cos(secondsIndexAngle[i])
 800e674:	2314      	movs	r3, #20
 800e676:	18fb      	adds	r3, r7, r3
 800e678:	781a      	ldrb	r2, [r3, #0]
 800e67a:	4bfd      	ldr	r3, [pc, #1012]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e67c:	0092      	lsls	r2, r2, #2
 800e67e:	58d3      	ldr	r3, [r2, r3]
 800e680:	1c18      	adds	r0, r3, #0
 800e682:	f7f4 fcd7 	bl	8003034 <__aeabi_f2d>
 800e686:	0002      	movs	r2, r0
 800e688:	000b      	movs	r3, r1
 800e68a:	0010      	movs	r0, r2
 800e68c:	0019      	movs	r1, r3
 800e68e:	f005 fea5 	bl	80143dc <cos>
 800e692:	0004      	movs	r4, r0
 800e694:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800e696:	4bf7      	ldr	r3, [pc, #988]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	001a      	movs	r2, r3
 800e69c:	4bf6      	ldr	r3, [pc, #984]	; (800ea78 <interfaceDrawLayer+0x195c>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f7f4 fc70 	bl	8002f88 <__aeabi_i2d>
 800e6a8:	0002      	movs	r2, r0
 800e6aa:	000b      	movs	r3, r1
 800e6ac:	0020      	movs	r0, r4
 800e6ae:	0029      	movs	r1, r5
 800e6b0:	f7f3 fe18 	bl	80022e4 <__aeabi_dmul>
 800e6b4:	0002      	movs	r2, r0
 800e6b6:	000b      	movs	r3, r1
 800e6b8:	0014      	movs	r4, r2
 800e6ba:	001d      	movs	r5, r3
								+ secondsStartX,
 800e6bc:	4bef      	ldr	r3, [pc, #956]	; (800ea7c <interfaceDrawLayer+0x1960>)
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	f7f4 fc61 	bl	8002f88 <__aeabi_i2d>
 800e6c6:	0002      	movs	r2, r0
 800e6c8:	000b      	movs	r3, r1
 800e6ca:	0020      	movs	r0, r4
 800e6cc:	0029      	movs	r1, r5
 800e6ce:	f7f2 fe99 	bl	8001404 <__aeabi_dadd>
 800e6d2:	0002      	movs	r2, r0
 800e6d4:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e6d6:	0010      	movs	r0, r2
 800e6d8:	0019      	movs	r1, r3
 800e6da:	f7f1 ff6d 	bl	80005b8 <__aeabi_d2uiz>
 800e6de:	0003      	movs	r3, r0
 800e6e0:	b29e      	uxth	r6, r3
						sin(secondsIndexAngle[i])
 800e6e2:	2314      	movs	r3, #20
 800e6e4:	18fb      	adds	r3, r7, r3
 800e6e6:	781a      	ldrb	r2, [r3, #0]
 800e6e8:	4be1      	ldr	r3, [pc, #900]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e6ea:	0092      	lsls	r2, r2, #2
 800e6ec:	58d3      	ldr	r3, [r2, r3]
 800e6ee:	1c18      	adds	r0, r3, #0
 800e6f0:	f7f4 fca0 	bl	8003034 <__aeabi_f2d>
 800e6f4:	0002      	movs	r2, r0
 800e6f6:	000b      	movs	r3, r1
 800e6f8:	0010      	movs	r0, r2
 800e6fa:	0019      	movs	r1, r3
 800e6fc:	f005 feb0 	bl	8014460 <sin>
 800e700:	0004      	movs	r4, r0
 800e702:	000d      	movs	r5, r1
								* (smallBoardRadius - secondsIndexLength)
 800e704:	4bdb      	ldr	r3, [pc, #876]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	001a      	movs	r2, r3
 800e70a:	4bdb      	ldr	r3, [pc, #876]	; (800ea78 <interfaceDrawLayer+0x195c>)
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	0018      	movs	r0, r3
 800e712:	f7f4 fc39 	bl	8002f88 <__aeabi_i2d>
 800e716:	0002      	movs	r2, r0
 800e718:	000b      	movs	r3, r1
 800e71a:	0020      	movs	r0, r4
 800e71c:	0029      	movs	r1, r5
 800e71e:	f7f3 fde1 	bl	80022e4 <__aeabi_dmul>
 800e722:	0002      	movs	r2, r0
 800e724:	000b      	movs	r3, r1
 800e726:	0014      	movs	r4, r2
 800e728:	001d      	movs	r5, r3
								+ secondsStartY,
 800e72a:	4bd5      	ldr	r3, [pc, #852]	; (800ea80 <interfaceDrawLayer+0x1964>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	0018      	movs	r0, r3
 800e730:	f7f4 fc2a 	bl	8002f88 <__aeabi_i2d>
 800e734:	0002      	movs	r2, r0
 800e736:	000b      	movs	r3, r1
 800e738:	0020      	movs	r0, r4
 800e73a:	0029      	movs	r1, r5
 800e73c:	f7f2 fe62 	bl	8001404 <__aeabi_dadd>
 800e740:	0002      	movs	r2, r0
 800e742:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e744:	0010      	movs	r0, r2
 800e746:	0019      	movs	r1, r3
 800e748:	f7f1 ff36 	bl	80005b8 <__aeabi_d2uiz>
 800e74c:	0003      	movs	r3, r0
 800e74e:	b29a      	uxth	r2, r3
 800e750:	4690      	mov	r8, r2

						cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800e752:	2314      	movs	r3, #20
 800e754:	18fb      	adds	r3, r7, r3
 800e756:	781a      	ldrb	r2, [r3, #0]
 800e758:	4bc5      	ldr	r3, [pc, #788]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e75a:	0092      	lsls	r2, r2, #2
 800e75c:	58d3      	ldr	r3, [r2, r3]
 800e75e:	1c18      	adds	r0, r3, #0
 800e760:	f7f4 fc68 	bl	8003034 <__aeabi_f2d>
 800e764:	0002      	movs	r2, r0
 800e766:	000b      	movs	r3, r1
 800e768:	0010      	movs	r0, r2
 800e76a:	0019      	movs	r1, r3
 800e76c:	f005 fe36 	bl	80143dc <cos>
 800e770:	0004      	movs	r4, r0
 800e772:	000d      	movs	r5, r1
 800e774:	4bbf      	ldr	r3, [pc, #764]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	0018      	movs	r0, r3
 800e77a:	f7f4 fc05 	bl	8002f88 <__aeabi_i2d>
 800e77e:	0002      	movs	r2, r0
 800e780:	000b      	movs	r3, r1
 800e782:	0020      	movs	r0, r4
 800e784:	0029      	movs	r1, r5
 800e786:	f7f3 fdad 	bl	80022e4 <__aeabi_dmul>
 800e78a:	0002      	movs	r2, r0
 800e78c:	000b      	movs	r3, r1
 800e78e:	0014      	movs	r4, r2
 800e790:	001d      	movs	r5, r3
								+ secondsStartX,
 800e792:	4bba      	ldr	r3, [pc, #744]	; (800ea7c <interfaceDrawLayer+0x1960>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	0018      	movs	r0, r3
 800e798:	f7f4 fbf6 	bl	8002f88 <__aeabi_i2d>
 800e79c:	0002      	movs	r2, r0
 800e79e:	000b      	movs	r3, r1
 800e7a0:	0020      	movs	r0, r4
 800e7a2:	0029      	movs	r1, r5
 800e7a4:	f7f2 fe2e 	bl	8001404 <__aeabi_dadd>
 800e7a8:	0002      	movs	r2, r0
 800e7aa:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e7ac:	0010      	movs	r0, r2
 800e7ae:	0019      	movs	r1, r3
 800e7b0:	f7f1 ff02 	bl	80005b8 <__aeabi_d2uiz>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	4691      	mov	r9, r2
						sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800e7ba:	2314      	movs	r3, #20
 800e7bc:	18fb      	adds	r3, r7, r3
 800e7be:	781a      	ldrb	r2, [r3, #0]
 800e7c0:	4bab      	ldr	r3, [pc, #684]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e7c2:	0092      	lsls	r2, r2, #2
 800e7c4:	58d3      	ldr	r3, [r2, r3]
 800e7c6:	1c18      	adds	r0, r3, #0
 800e7c8:	f7f4 fc34 	bl	8003034 <__aeabi_f2d>
 800e7cc:	0002      	movs	r2, r0
 800e7ce:	000b      	movs	r3, r1
 800e7d0:	0010      	movs	r0, r2
 800e7d2:	0019      	movs	r1, r3
 800e7d4:	f005 fe44 	bl	8014460 <sin>
 800e7d8:	0004      	movs	r4, r0
 800e7da:	000d      	movs	r5, r1
 800e7dc:	4ba5      	ldr	r3, [pc, #660]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	0018      	movs	r0, r3
 800e7e2:	f7f4 fbd1 	bl	8002f88 <__aeabi_i2d>
 800e7e6:	0002      	movs	r2, r0
 800e7e8:	000b      	movs	r3, r1
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	0029      	movs	r1, r5
 800e7ee:	f7f3 fd79 	bl	80022e4 <__aeabi_dmul>
 800e7f2:	0002      	movs	r2, r0
 800e7f4:	000b      	movs	r3, r1
 800e7f6:	0014      	movs	r4, r2
 800e7f8:	001d      	movs	r5, r3
								+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800e7fa:	4ba1      	ldr	r3, [pc, #644]	; (800ea80 <interfaceDrawLayer+0x1964>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	0018      	movs	r0, r3
 800e800:	f7f4 fbc2 	bl	8002f88 <__aeabi_i2d>
 800e804:	0002      	movs	r2, r0
 800e806:	000b      	movs	r3, r1
 800e808:	0020      	movs	r0, r4
 800e80a:	0029      	movs	r1, r5
 800e80c:	f7f2 fdfa 	bl	8001404 <__aeabi_dadd>
 800e810:	0002      	movs	r2, r0
 800e812:	000b      	movs	r3, r1
				Paint_DrawLine(
 800e814:	0010      	movs	r0, r2
 800e816:	0019      	movs	r1, r3
 800e818:	f7f1 fece 	bl	80005b8 <__aeabi_d2uiz>
 800e81c:	0003      	movs	r3, r0
 800e81e:	b29a      	uxth	r2, r3
 800e820:	4b98      	ldr	r3, [pc, #608]	; (800ea84 <interfaceDrawLayer+0x1968>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	b2db      	uxtb	r3, r3
 800e826:	b29b      	uxth	r3, r3
 800e828:	2100      	movs	r1, #0
 800e82a:	9102      	str	r1, [sp, #8]
 800e82c:	2101      	movs	r1, #1
 800e82e:	9101      	str	r1, [sp, #4]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	0013      	movs	r3, r2
 800e834:	464a      	mov	r2, r9
 800e836:	4641      	mov	r1, r8
 800e838:	0030      	movs	r0, r6
 800e83a:	f7fa fa9b 	bl	8008d74 <Paint_DrawLine>
						LINE_STYLE_SOLID);

				if (i % 3 == 0) {
 800e83e:	2414      	movs	r4, #20
 800e840:	193b      	adds	r3, r7, r4
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2103      	movs	r1, #3
 800e846:	0018      	movs	r0, r3
 800e848:	f7f1 fcea 	bl	8000220 <__aeabi_uidivmod>
 800e84c:	000b      	movs	r3, r1
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b00      	cmp	r3, #0
 800e852:	d000      	beq.n	800e856 <interfaceDrawLayer+0x173a>
 800e854:	e0e5      	b.n	800ea22 <interfaceDrawLayer+0x1906>
					Paint_DrawLine(
							cos(secondsIndexAngle[i])
 800e856:	193b      	adds	r3, r7, r4
 800e858:	781a      	ldrb	r2, [r3, #0]
 800e85a:	4b85      	ldr	r3, [pc, #532]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e85c:	0092      	lsls	r2, r2, #2
 800e85e:	58d3      	ldr	r3, [r2, r3]
 800e860:	1c18      	adds	r0, r3, #0
 800e862:	f7f4 fbe7 	bl	8003034 <__aeabi_f2d>
 800e866:	0002      	movs	r2, r0
 800e868:	000b      	movs	r3, r1
 800e86a:	0010      	movs	r0, r2
 800e86c:	0019      	movs	r1, r3
 800e86e:	f005 fdb5 	bl	80143dc <cos>
 800e872:	0004      	movs	r4, r0
 800e874:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800e876:	4b7f      	ldr	r3, [pc, #508]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	001a      	movs	r2, r3
 800e87c:	4b7e      	ldr	r3, [pc, #504]	; (800ea78 <interfaceDrawLayer+0x195c>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	3305      	adds	r3, #5
 800e882:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e884:	0018      	movs	r0, r3
 800e886:	f7f4 fb7f 	bl	8002f88 <__aeabi_i2d>
 800e88a:	0002      	movs	r2, r0
 800e88c:	000b      	movs	r3, r1
 800e88e:	0020      	movs	r0, r4
 800e890:	0029      	movs	r1, r5
 800e892:	f7f3 fd27 	bl	80022e4 <__aeabi_dmul>
 800e896:	0002      	movs	r2, r0
 800e898:	000b      	movs	r3, r1
 800e89a:	0014      	movs	r4, r2
 800e89c:	001d      	movs	r5, r3
									+ secondsStartX,
 800e89e:	4b77      	ldr	r3, [pc, #476]	; (800ea7c <interfaceDrawLayer+0x1960>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	0018      	movs	r0, r3
 800e8a4:	f7f4 fb70 	bl	8002f88 <__aeabi_i2d>
 800e8a8:	0002      	movs	r2, r0
 800e8aa:	000b      	movs	r3, r1
 800e8ac:	0020      	movs	r0, r4
 800e8ae:	0029      	movs	r1, r5
 800e8b0:	f7f2 fda8 	bl	8001404 <__aeabi_dadd>
 800e8b4:	0002      	movs	r2, r0
 800e8b6:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e8b8:	0010      	movs	r0, r2
 800e8ba:	0019      	movs	r1, r3
 800e8bc:	f7f1 fe7c 	bl	80005b8 <__aeabi_d2uiz>
 800e8c0:	0003      	movs	r3, r0
 800e8c2:	b29e      	uxth	r6, r3
							sin(secondsIndexAngle[i])
 800e8c4:	2414      	movs	r4, #20
 800e8c6:	193b      	adds	r3, r7, r4
 800e8c8:	781a      	ldrb	r2, [r3, #0]
 800e8ca:	4b69      	ldr	r3, [pc, #420]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e8cc:	0092      	lsls	r2, r2, #2
 800e8ce:	58d3      	ldr	r3, [r2, r3]
 800e8d0:	1c18      	adds	r0, r3, #0
 800e8d2:	f7f4 fbaf 	bl	8003034 <__aeabi_f2d>
 800e8d6:	0002      	movs	r2, r0
 800e8d8:	000b      	movs	r3, r1
 800e8da:	0010      	movs	r0, r2
 800e8dc:	0019      	movs	r1, r3
 800e8de:	f005 fdbf 	bl	8014460 <sin>
 800e8e2:	0004      	movs	r4, r0
 800e8e4:	000d      	movs	r5, r1
									* (smallBoardRadius
											- (secondsIndexLength + 5))
 800e8e6:	4b63      	ldr	r3, [pc, #396]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	001a      	movs	r2, r3
 800e8ec:	4b62      	ldr	r3, [pc, #392]	; (800ea78 <interfaceDrawLayer+0x195c>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	3305      	adds	r3, #5
 800e8f2:	1ad3      	subs	r3, r2, r3
									* (smallBoardRadius
 800e8f4:	0018      	movs	r0, r3
 800e8f6:	f7f4 fb47 	bl	8002f88 <__aeabi_i2d>
 800e8fa:	0002      	movs	r2, r0
 800e8fc:	000b      	movs	r3, r1
 800e8fe:	0020      	movs	r0, r4
 800e900:	0029      	movs	r1, r5
 800e902:	f7f3 fcef 	bl	80022e4 <__aeabi_dmul>
 800e906:	0002      	movs	r2, r0
 800e908:	000b      	movs	r3, r1
 800e90a:	0014      	movs	r4, r2
 800e90c:	001d      	movs	r5, r3
									+ secondsStartY,
 800e90e:	4b5c      	ldr	r3, [pc, #368]	; (800ea80 <interfaceDrawLayer+0x1964>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	0018      	movs	r0, r3
 800e914:	f7f4 fb38 	bl	8002f88 <__aeabi_i2d>
 800e918:	0002      	movs	r2, r0
 800e91a:	000b      	movs	r3, r1
 800e91c:	0020      	movs	r0, r4
 800e91e:	0029      	movs	r1, r5
 800e920:	f7f2 fd70 	bl	8001404 <__aeabi_dadd>
 800e924:	0002      	movs	r2, r0
 800e926:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e928:	0010      	movs	r0, r2
 800e92a:	0019      	movs	r1, r3
 800e92c:	f7f1 fe44 	bl	80005b8 <__aeabi_d2uiz>
 800e930:	0003      	movs	r3, r0
 800e932:	b29b      	uxth	r3, r3
 800e934:	4698      	mov	r8, r3

							cos(secondsIndexAngle[i]) * (smallBoardRadius)
 800e936:	2414      	movs	r4, #20
 800e938:	193b      	adds	r3, r7, r4
 800e93a:	781a      	ldrb	r2, [r3, #0]
 800e93c:	4b4c      	ldr	r3, [pc, #304]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e93e:	0092      	lsls	r2, r2, #2
 800e940:	58d3      	ldr	r3, [r2, r3]
 800e942:	1c18      	adds	r0, r3, #0
 800e944:	f7f4 fb76 	bl	8003034 <__aeabi_f2d>
 800e948:	0002      	movs	r2, r0
 800e94a:	000b      	movs	r3, r1
 800e94c:	0010      	movs	r0, r2
 800e94e:	0019      	movs	r1, r3
 800e950:	f005 fd44 	bl	80143dc <cos>
 800e954:	0004      	movs	r4, r0
 800e956:	000d      	movs	r5, r1
 800e958:	4b46      	ldr	r3, [pc, #280]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	0018      	movs	r0, r3
 800e95e:	f7f4 fb13 	bl	8002f88 <__aeabi_i2d>
 800e962:	0002      	movs	r2, r0
 800e964:	000b      	movs	r3, r1
 800e966:	0020      	movs	r0, r4
 800e968:	0029      	movs	r1, r5
 800e96a:	f7f3 fcbb 	bl	80022e4 <__aeabi_dmul>
 800e96e:	0002      	movs	r2, r0
 800e970:	000b      	movs	r3, r1
 800e972:	0014      	movs	r4, r2
 800e974:	001d      	movs	r5, r3
									+ secondsStartX,
 800e976:	4b41      	ldr	r3, [pc, #260]	; (800ea7c <interfaceDrawLayer+0x1960>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	0018      	movs	r0, r3
 800e97c:	f7f4 fb04 	bl	8002f88 <__aeabi_i2d>
 800e980:	0002      	movs	r2, r0
 800e982:	000b      	movs	r3, r1
 800e984:	0020      	movs	r0, r4
 800e986:	0029      	movs	r1, r5
 800e988:	f7f2 fd3c 	bl	8001404 <__aeabi_dadd>
 800e98c:	0002      	movs	r2, r0
 800e98e:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e990:	0010      	movs	r0, r2
 800e992:	0019      	movs	r1, r3
 800e994:	f7f1 fe10 	bl	80005b8 <__aeabi_d2uiz>
 800e998:	0003      	movs	r3, r0
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	4699      	mov	r9, r3
							sin(secondsIndexAngle[i]) * (smallBoardRadius)
 800e99e:	2414      	movs	r4, #20
 800e9a0:	193b      	adds	r3, r7, r4
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	4b32      	ldr	r3, [pc, #200]	; (800ea70 <interfaceDrawLayer+0x1954>)
 800e9a6:	0092      	lsls	r2, r2, #2
 800e9a8:	58d3      	ldr	r3, [r2, r3]
 800e9aa:	1c18      	adds	r0, r3, #0
 800e9ac:	f7f4 fb42 	bl	8003034 <__aeabi_f2d>
 800e9b0:	0002      	movs	r2, r0
 800e9b2:	000b      	movs	r3, r1
 800e9b4:	0010      	movs	r0, r2
 800e9b6:	0019      	movs	r1, r3
 800e9b8:	f005 fd52 	bl	8014460 <sin>
 800e9bc:	0004      	movs	r4, r0
 800e9be:	000d      	movs	r5, r1
 800e9c0:	4b2c      	ldr	r3, [pc, #176]	; (800ea74 <interfaceDrawLayer+0x1958>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	0018      	movs	r0, r3
 800e9c6:	f7f4 fadf 	bl	8002f88 <__aeabi_i2d>
 800e9ca:	0002      	movs	r2, r0
 800e9cc:	000b      	movs	r3, r1
 800e9ce:	0020      	movs	r0, r4
 800e9d0:	0029      	movs	r1, r5
 800e9d2:	f7f3 fc87 	bl	80022e4 <__aeabi_dmul>
 800e9d6:	0002      	movs	r2, r0
 800e9d8:	000b      	movs	r3, r1
 800e9da:	0014      	movs	r4, r2
 800e9dc:	001d      	movs	r5, r3
									+ secondsStartY, colorMain, DOT_PIXEL_1X1,
 800e9de:	4b28      	ldr	r3, [pc, #160]	; (800ea80 <interfaceDrawLayer+0x1964>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	0018      	movs	r0, r3
 800e9e4:	f7f4 fad0 	bl	8002f88 <__aeabi_i2d>
 800e9e8:	0002      	movs	r2, r0
 800e9ea:	000b      	movs	r3, r1
 800e9ec:	0020      	movs	r0, r4
 800e9ee:	0029      	movs	r1, r5
 800e9f0:	f7f2 fd08 	bl	8001404 <__aeabi_dadd>
 800e9f4:	0002      	movs	r2, r0
 800e9f6:	000b      	movs	r3, r1
					Paint_DrawLine(
 800e9f8:	0010      	movs	r0, r2
 800e9fa:	0019      	movs	r1, r3
 800e9fc:	f7f1 fddc 	bl	80005b8 <__aeabi_d2uiz>
 800ea00:	0003      	movs	r3, r0
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	4b1f      	ldr	r3, [pc, #124]	; (800ea84 <interfaceDrawLayer+0x1968>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	9102      	str	r1, [sp, #8]
 800ea10:	2101      	movs	r1, #1
 800ea12:	9101      	str	r1, [sp, #4]
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	0013      	movs	r3, r2
 800ea18:	464a      	mov	r2, r9
 800ea1a:	4641      	mov	r1, r8
 800ea1c:	0030      	movs	r0, r6
 800ea1e:	f7fa f9a9 	bl	8008d74 <Paint_DrawLine>
			for (uint8_t i = 0; i < 12; i++) {
 800ea22:	2114      	movs	r1, #20
 800ea24:	187b      	adds	r3, r7, r1
 800ea26:	781a      	ldrb	r2, [r3, #0]
 800ea28:	187b      	adds	r3, r7, r1
 800ea2a:	3201      	adds	r2, #1
 800ea2c:	701a      	strb	r2, [r3, #0]
 800ea2e:	2314      	movs	r3, #20
 800ea30:	18fb      	adds	r3, r7, r3
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b0b      	cmp	r3, #11
 800ea36:	d800      	bhi.n	800ea3a <interfaceDrawLayer+0x191e>
 800ea38:	e61c      	b.n	800e674 <interfaceDrawLayer+0x1558>
				}
			}

			//										SECONDS DIGITS

			Paint_DrawString_EN(secondsStartX - 8, secondsStartY - 20, "60",
 800ea3a:	4b10      	ldr	r3, [pc, #64]	; (800ea7c <interfaceDrawLayer+0x1960>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	3b08      	subs	r3, #8
 800ea42:	b298      	uxth	r0, r3
 800ea44:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <interfaceDrawLayer+0x1964>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	3b14      	subs	r3, #20
 800ea4c:	b299      	uxth	r1, r3
 800ea4e:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <interfaceDrawLayer+0x1968>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	4a0c      	ldr	r2, [pc, #48]	; (800ea88 <interfaceDrawLayer+0x196c>)
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	b2d2      	uxtb	r2, r2
 800ea5c:	b292      	uxth	r2, r2
 800ea5e:	4d0b      	ldr	r5, [pc, #44]	; (800ea8c <interfaceDrawLayer+0x1970>)
 800ea60:	4c0b      	ldr	r4, [pc, #44]	; (800ea90 <interfaceDrawLayer+0x1974>)
 800ea62:	9201      	str	r2, [sp, #4]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	002b      	movs	r3, r5
 800ea68:	0022      	movs	r2, r4
 800ea6a:	f7fa ff4d 	bl	8009908 <Paint_DrawString_EN>
 800ea6e:	e011      	b.n	800ea94 <interfaceDrawLayer+0x1978>
 800ea70:	2000040c 	.word	0x2000040c
 800ea74:	200001f0 	.word	0x200001f0
 800ea78:	200001fa 	.word	0x200001fa
 800ea7c:	200006ea 	.word	0x200006ea
 800ea80:	2000037b 	.word	0x2000037b
 800ea84:	2000033a 	.word	0x2000033a
 800ea88:	200006b3 	.word	0x200006b3
 800ea8c:	2000000c 	.word	0x2000000c
 800ea90:	08016150 	.word	0x08016150
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX + 2, secondsStartY + 2, "20",
 800ea94:	4bf9      	ldr	r3, [pc, #996]	; (800ee7c <interfaceDrawLayer+0x1d60>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	3302      	adds	r3, #2
 800ea9c:	b298      	uxth	r0, r3
 800ea9e:	4bf8      	ldr	r3, [pc, #992]	; (800ee80 <interfaceDrawLayer+0x1d64>)
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	b299      	uxth	r1, r3
 800eaa8:	4bf6      	ldr	r3, [pc, #984]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	4af5      	ldr	r2, [pc, #980]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800eab2:	7812      	ldrb	r2, [r2, #0]
 800eab4:	b2d2      	uxtb	r2, r2
 800eab6:	b292      	uxth	r2, r2
 800eab8:	4df4      	ldr	r5, [pc, #976]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800eaba:	4cf5      	ldr	r4, [pc, #980]	; (800ee90 <interfaceDrawLayer+0x1d74>)
 800eabc:	9201      	str	r2, [sp, #4]
 800eabe:	9300      	str	r3, [sp, #0]
 800eac0:	002b      	movs	r3, r5
 800eac2:	0022      	movs	r2, r4
 800eac4:	f7fa ff20 	bl	8009908 <Paint_DrawString_EN>
					&Font12, colorMain, colorSecond);
			Paint_DrawString_EN(secondsStartX - 18, secondsStartY + 2, "40",
 800eac8:	4bec      	ldr	r3, [pc, #944]	; (800ee7c <interfaceDrawLayer+0x1d60>)
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	3b12      	subs	r3, #18
 800ead0:	b298      	uxth	r0, r3
 800ead2:	4beb      	ldr	r3, [pc, #940]	; (800ee80 <interfaceDrawLayer+0x1d64>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	3302      	adds	r3, #2
 800eada:	b299      	uxth	r1, r3
 800eadc:	4be9      	ldr	r3, [pc, #932]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	4ae8      	ldr	r2, [pc, #928]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800eae6:	7812      	ldrb	r2, [r2, #0]
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	b292      	uxth	r2, r2
 800eaec:	4de7      	ldr	r5, [pc, #924]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800eaee:	4ce9      	ldr	r4, [pc, #932]	; (800ee94 <interfaceDrawLayer+0x1d78>)
 800eaf0:	9201      	str	r2, [sp, #4]
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	002b      	movs	r3, r5
 800eaf6:	0022      	movs	r2, r4
 800eaf8:	f7fa ff06 	bl	8009908 <Paint_DrawString_EN>

		}

		//										MAIN INDEX

		for (uint8_t i = 1; i < 12; i++) {
 800eafc:	2313      	movs	r3, #19
 800eafe:	18fb      	adds	r3, r7, r3
 800eb00:	2201      	movs	r2, #1
 800eb02:	701a      	strb	r2, [r3, #0]
 800eb04:	e0ea      	b.n	800ecdc <interfaceDrawLayer+0x1bc0>

			Paint_DrawLine(
					cos(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800eb06:	2313      	movs	r3, #19
 800eb08:	18fb      	adds	r3, r7, r3
 800eb0a:	781a      	ldrb	r2, [r3, #0]
 800eb0c:	4be2      	ldr	r3, [pc, #904]	; (800ee98 <interfaceDrawLayer+0x1d7c>)
 800eb0e:	0092      	lsls	r2, r2, #2
 800eb10:	58d3      	ldr	r3, [r2, r3]
 800eb12:	1c18      	adds	r0, r3, #0
 800eb14:	f7f4 fa8e 	bl	8003034 <__aeabi_f2d>
 800eb18:	0002      	movs	r2, r0
 800eb1a:	000b      	movs	r3, r1
 800eb1c:	0010      	movs	r0, r2
 800eb1e:	0019      	movs	r1, r3
 800eb20:	f005 fc5c 	bl	80143dc <cos>
 800eb24:	0004      	movs	r4, r0
 800eb26:	000d      	movs	r5, r1
 800eb28:	4bdc      	ldr	r3, [pc, #880]	; (800ee9c <interfaceDrawLayer+0x1d80>)
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	001a      	movs	r2, r3
 800eb2e:	4bdc      	ldr	r3, [pc, #880]	; (800eea0 <interfaceDrawLayer+0x1d84>)
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	0018      	movs	r0, r3
 800eb36:	f7f4 fa27 	bl	8002f88 <__aeabi_i2d>
 800eb3a:	0002      	movs	r2, r0
 800eb3c:	000b      	movs	r3, r1
 800eb3e:	0020      	movs	r0, r4
 800eb40:	0029      	movs	r1, r5
 800eb42:	f7f3 fbcf 	bl	80022e4 <__aeabi_dmul>
 800eb46:	0002      	movs	r2, r0
 800eb48:	000b      	movs	r3, r1
 800eb4a:	0014      	movs	r4, r2
 800eb4c:	001d      	movs	r5, r3
							+ mainStartX,
 800eb4e:	4bd5      	ldr	r3, [pc, #852]	; (800eea4 <interfaceDrawLayer+0x1d88>)
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	0018      	movs	r0, r3
 800eb54:	f7f4 fa18 	bl	8002f88 <__aeabi_i2d>
 800eb58:	0002      	movs	r2, r0
 800eb5a:	000b      	movs	r3, r1
 800eb5c:	0020      	movs	r0, r4
 800eb5e:	0029      	movs	r1, r5
 800eb60:	f7f2 fc50 	bl	8001404 <__aeabi_dadd>
 800eb64:	0002      	movs	r2, r0
 800eb66:	000b      	movs	r3, r1
			Paint_DrawLine(
 800eb68:	0010      	movs	r0, r2
 800eb6a:	0019      	movs	r1, r3
 800eb6c:	f7f1 fd24 	bl	80005b8 <__aeabi_d2uiz>
 800eb70:	0003      	movs	r3, r0
 800eb72:	b29e      	uxth	r6, r3
					sin(mainIndexAngle[i]) * (mainBoardRadius - mainIndexLength)
 800eb74:	2313      	movs	r3, #19
 800eb76:	18fb      	adds	r3, r7, r3
 800eb78:	781a      	ldrb	r2, [r3, #0]
 800eb7a:	4bc7      	ldr	r3, [pc, #796]	; (800ee98 <interfaceDrawLayer+0x1d7c>)
 800eb7c:	0092      	lsls	r2, r2, #2
 800eb7e:	58d3      	ldr	r3, [r2, r3]
 800eb80:	1c18      	adds	r0, r3, #0
 800eb82:	f7f4 fa57 	bl	8003034 <__aeabi_f2d>
 800eb86:	0002      	movs	r2, r0
 800eb88:	000b      	movs	r3, r1
 800eb8a:	0010      	movs	r0, r2
 800eb8c:	0019      	movs	r1, r3
 800eb8e:	f005 fc67 	bl	8014460 <sin>
 800eb92:	0004      	movs	r4, r0
 800eb94:	000d      	movs	r5, r1
 800eb96:	4bc1      	ldr	r3, [pc, #772]	; (800ee9c <interfaceDrawLayer+0x1d80>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	001a      	movs	r2, r3
 800eb9c:	4bc0      	ldr	r3, [pc, #768]	; (800eea0 <interfaceDrawLayer+0x1d84>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	0018      	movs	r0, r3
 800eba4:	f7f4 f9f0 	bl	8002f88 <__aeabi_i2d>
 800eba8:	0002      	movs	r2, r0
 800ebaa:	000b      	movs	r3, r1
 800ebac:	0020      	movs	r0, r4
 800ebae:	0029      	movs	r1, r5
 800ebb0:	f7f3 fb98 	bl	80022e4 <__aeabi_dmul>
 800ebb4:	0002      	movs	r2, r0
 800ebb6:	000b      	movs	r3, r1
 800ebb8:	0014      	movs	r4, r2
 800ebba:	001d      	movs	r5, r3
							+ mainStartY,
 800ebbc:	4bba      	ldr	r3, [pc, #744]	; (800eea8 <interfaceDrawLayer+0x1d8c>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	f7f4 f9e1 	bl	8002f88 <__aeabi_i2d>
 800ebc6:	0002      	movs	r2, r0
 800ebc8:	000b      	movs	r3, r1
 800ebca:	0020      	movs	r0, r4
 800ebcc:	0029      	movs	r1, r5
 800ebce:	f7f2 fc19 	bl	8001404 <__aeabi_dadd>
 800ebd2:	0002      	movs	r2, r0
 800ebd4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800ebd6:	0010      	movs	r0, r2
 800ebd8:	0019      	movs	r1, r3
 800ebda:	f7f1 fced 	bl	80005b8 <__aeabi_d2uiz>
 800ebde:	0003      	movs	r3, r0
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	4690      	mov	r8, r2

					cos(mainIndexAngle[i]) * (mainBoardRadius) + mainStartX,
 800ebe4:	2313      	movs	r3, #19
 800ebe6:	18fb      	adds	r3, r7, r3
 800ebe8:	781a      	ldrb	r2, [r3, #0]
 800ebea:	4bab      	ldr	r3, [pc, #684]	; (800ee98 <interfaceDrawLayer+0x1d7c>)
 800ebec:	0092      	lsls	r2, r2, #2
 800ebee:	58d3      	ldr	r3, [r2, r3]
 800ebf0:	1c18      	adds	r0, r3, #0
 800ebf2:	f7f4 fa1f 	bl	8003034 <__aeabi_f2d>
 800ebf6:	0002      	movs	r2, r0
 800ebf8:	000b      	movs	r3, r1
 800ebfa:	0010      	movs	r0, r2
 800ebfc:	0019      	movs	r1, r3
 800ebfe:	f005 fbed 	bl	80143dc <cos>
 800ec02:	0004      	movs	r4, r0
 800ec04:	000d      	movs	r5, r1
 800ec06:	4ba5      	ldr	r3, [pc, #660]	; (800ee9c <interfaceDrawLayer+0x1d80>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f7f4 f9bc 	bl	8002f88 <__aeabi_i2d>
 800ec10:	0002      	movs	r2, r0
 800ec12:	000b      	movs	r3, r1
 800ec14:	0020      	movs	r0, r4
 800ec16:	0029      	movs	r1, r5
 800ec18:	f7f3 fb64 	bl	80022e4 <__aeabi_dmul>
 800ec1c:	0002      	movs	r2, r0
 800ec1e:	000b      	movs	r3, r1
 800ec20:	0014      	movs	r4, r2
 800ec22:	001d      	movs	r5, r3
 800ec24:	4b9f      	ldr	r3, [pc, #636]	; (800eea4 <interfaceDrawLayer+0x1d88>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	0018      	movs	r0, r3
 800ec2a:	f7f4 f9ad 	bl	8002f88 <__aeabi_i2d>
 800ec2e:	0002      	movs	r2, r0
 800ec30:	000b      	movs	r3, r1
 800ec32:	0020      	movs	r0, r4
 800ec34:	0029      	movs	r1, r5
 800ec36:	f7f2 fbe5 	bl	8001404 <__aeabi_dadd>
 800ec3a:	0002      	movs	r2, r0
 800ec3c:	000b      	movs	r3, r1
			Paint_DrawLine(
 800ec3e:	0010      	movs	r0, r2
 800ec40:	0019      	movs	r1, r3
 800ec42:	f7f1 fcb9 	bl	80005b8 <__aeabi_d2uiz>
 800ec46:	0003      	movs	r3, r0
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	4691      	mov	r9, r2
					sin(mainIndexAngle[i]) * (mainBoardRadius) + mainStartY,
 800ec4c:	2313      	movs	r3, #19
 800ec4e:	18fb      	adds	r3, r7, r3
 800ec50:	781a      	ldrb	r2, [r3, #0]
 800ec52:	4b91      	ldr	r3, [pc, #580]	; (800ee98 <interfaceDrawLayer+0x1d7c>)
 800ec54:	0092      	lsls	r2, r2, #2
 800ec56:	58d3      	ldr	r3, [r2, r3]
 800ec58:	1c18      	adds	r0, r3, #0
 800ec5a:	f7f4 f9eb 	bl	8003034 <__aeabi_f2d>
 800ec5e:	0002      	movs	r2, r0
 800ec60:	000b      	movs	r3, r1
 800ec62:	0010      	movs	r0, r2
 800ec64:	0019      	movs	r1, r3
 800ec66:	f005 fbfb 	bl	8014460 <sin>
 800ec6a:	0004      	movs	r4, r0
 800ec6c:	000d      	movs	r5, r1
 800ec6e:	4b8b      	ldr	r3, [pc, #556]	; (800ee9c <interfaceDrawLayer+0x1d80>)
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	0018      	movs	r0, r3
 800ec74:	f7f4 f988 	bl	8002f88 <__aeabi_i2d>
 800ec78:	0002      	movs	r2, r0
 800ec7a:	000b      	movs	r3, r1
 800ec7c:	0020      	movs	r0, r4
 800ec7e:	0029      	movs	r1, r5
 800ec80:	f7f3 fb30 	bl	80022e4 <__aeabi_dmul>
 800ec84:	0002      	movs	r2, r0
 800ec86:	000b      	movs	r3, r1
 800ec88:	0014      	movs	r4, r2
 800ec8a:	001d      	movs	r5, r3
 800ec8c:	4b86      	ldr	r3, [pc, #536]	; (800eea8 <interfaceDrawLayer+0x1d8c>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	0018      	movs	r0, r3
 800ec92:	f7f4 f979 	bl	8002f88 <__aeabi_i2d>
 800ec96:	0002      	movs	r2, r0
 800ec98:	000b      	movs	r3, r1
 800ec9a:	0020      	movs	r0, r4
 800ec9c:	0029      	movs	r1, r5
 800ec9e:	f7f2 fbb1 	bl	8001404 <__aeabi_dadd>
 800eca2:	0002      	movs	r2, r0
 800eca4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800eca6:	0010      	movs	r0, r2
 800eca8:	0019      	movs	r1, r3
 800ecaa:	f7f1 fc85 	bl	80005b8 <__aeabi_d2uiz>
 800ecae:	0003      	movs	r3, r0
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	4b75      	ldr	r3, [pc, #468]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	2100      	movs	r1, #0
 800ecbc:	9102      	str	r1, [sp, #8]
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	9101      	str	r1, [sp, #4]
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	0013      	movs	r3, r2
 800ecc6:	464a      	mov	r2, r9
 800ecc8:	4641      	mov	r1, r8
 800ecca:	0030      	movs	r0, r6
 800eccc:	f7fa f852 	bl	8008d74 <Paint_DrawLine>
		for (uint8_t i = 1; i < 12; i++) {
 800ecd0:	2113      	movs	r1, #19
 800ecd2:	187b      	adds	r3, r7, r1
 800ecd4:	781a      	ldrb	r2, [r3, #0]
 800ecd6:	187b      	adds	r3, r7, r1
 800ecd8:	3201      	adds	r2, #1
 800ecda:	701a      	strb	r2, [r3, #0]
 800ecdc:	2313      	movs	r3, #19
 800ecde:	18fb      	adds	r3, r7, r3
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b0b      	cmp	r3, #11
 800ece4:	d800      	bhi.n	800ece8 <interfaceDrawLayer+0x1bcc>
 800ece6:	e70e      	b.n	800eb06 <interfaceDrawLayer+0x19ea>

		}

	}

	if (layer == 3) {		//pointers
 800ece8:	1dfb      	adds	r3, r7, #7
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	d001      	beq.n	800ecf4 <interfaceDrawLayer+0x1bd8>
 800ecf0:	f000 feaa 	bl	800fa48 <interfaceDrawLayer+0x292c>

		//										METER

		if (showMeter == 1) {
 800ecf4:	4b6d      	ldr	r3, [pc, #436]	; (800eeac <interfaceDrawLayer+0x1d90>)
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d14d      	bne.n	800ed98 <interfaceDrawLayer+0x1c7c>
			Paint_DrawString_EN(meterX + 2, meterY + 2, voltagePassive, &Font16,
 800ecfc:	4b6c      	ldr	r3, [pc, #432]	; (800eeb0 <interfaceDrawLayer+0x1d94>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	3302      	adds	r3, #2
 800ed04:	b298      	uxth	r0, r3
 800ed06:	4b6b      	ldr	r3, [pc, #428]	; (800eeb4 <interfaceDrawLayer+0x1d98>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	3302      	adds	r3, #2
 800ed0e:	b299      	uxth	r1, r3
 800ed10:	4b5d      	ldr	r3, [pc, #372]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	4a5a      	ldr	r2, [pc, #360]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800ed1a:	7812      	ldrb	r2, [r2, #0]
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	b292      	uxth	r2, r2
 800ed20:	4d65      	ldr	r5, [pc, #404]	; (800eeb8 <interfaceDrawLayer+0x1d9c>)
 800ed22:	4c66      	ldr	r4, [pc, #408]	; (800eebc <interfaceDrawLayer+0x1da0>)
 800ed24:	9201      	str	r2, [sp, #4]
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	002b      	movs	r3, r5
 800ed2a:	0022      	movs	r2, r4
 800ed2c:	f7fa fdec 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 18, voltageDrop, &Font16,
 800ed30:	4b5f      	ldr	r3, [pc, #380]	; (800eeb0 <interfaceDrawLayer+0x1d94>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	3302      	adds	r3, #2
 800ed38:	b298      	uxth	r0, r3
 800ed3a:	4b5e      	ldr	r3, [pc, #376]	; (800eeb4 <interfaceDrawLayer+0x1d98>)
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	3312      	adds	r3, #18
 800ed42:	b299      	uxth	r1, r3
 800ed44:	4b50      	ldr	r3, [pc, #320]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	4a4d      	ldr	r2, [pc, #308]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800ed4e:	7812      	ldrb	r2, [r2, #0]
 800ed50:	b2d2      	uxtb	r2, r2
 800ed52:	b292      	uxth	r2, r2
 800ed54:	4d58      	ldr	r5, [pc, #352]	; (800eeb8 <interfaceDrawLayer+0x1d9c>)
 800ed56:	4c5a      	ldr	r4, [pc, #360]	; (800eec0 <interfaceDrawLayer+0x1da4>)
 800ed58:	9201      	str	r2, [sp, #4]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	002b      	movs	r3, r5
 800ed5e:	0022      	movs	r2, r4
 800ed60:	f7fa fdd2 	bl	8009908 <Paint_DrawString_EN>
					colorSecond, colorMain);

			Paint_DrawString_EN(meterX + 2, meterY + 34, resistance, &Font16,
 800ed64:	4b52      	ldr	r3, [pc, #328]	; (800eeb0 <interfaceDrawLayer+0x1d94>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	b298      	uxth	r0, r3
 800ed6e:	4b51      	ldr	r3, [pc, #324]	; (800eeb4 <interfaceDrawLayer+0x1d98>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	3322      	adds	r3, #34	; 0x22
 800ed76:	b299      	uxth	r1, r3
 800ed78:	4b43      	ldr	r3, [pc, #268]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4a40      	ldr	r2, [pc, #256]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800ed82:	7812      	ldrb	r2, [r2, #0]
 800ed84:	b2d2      	uxtb	r2, r2
 800ed86:	b292      	uxth	r2, r2
 800ed88:	4d4b      	ldr	r5, [pc, #300]	; (800eeb8 <interfaceDrawLayer+0x1d9c>)
 800ed8a:	4c4e      	ldr	r4, [pc, #312]	; (800eec4 <interfaceDrawLayer+0x1da8>)
 800ed8c:	9201      	str	r2, [sp, #4]
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	002b      	movs	r3, r5
 800ed92:	0022      	movs	r2, r4
 800ed94:	f7fa fdb8 	bl	8009908 <Paint_DrawString_EN>

		}

		//										DIGITAL INTERFACE

		if (showDigitalInterface == 1) {
 800ed98:	4b4b      	ldr	r3, [pc, #300]	; (800eec8 <interfaceDrawLayer+0x1dac>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d000      	beq.n	800eda2 <interfaceDrawLayer+0x1c86>
 800eda0:	e0b7      	b.n	800ef12 <interfaceDrawLayer+0x1df6>
			Paint_DrawNum(digitalX, digitalY, pressureValue, &Font12, colorMain,
 800eda2:	4b4a      	ldr	r3, [pc, #296]	; (800eecc <interfaceDrawLayer+0x1db0>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	b298      	uxth	r0, r3
 800eda8:	4b49      	ldr	r3, [pc, #292]	; (800eed0 <interfaceDrawLayer+0x1db4>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	b299      	uxth	r1, r3
 800edae:	4b49      	ldr	r3, [pc, #292]	; (800eed4 <interfaceDrawLayer+0x1db8>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	001d      	movs	r5, r3
 800edb4:	4b33      	ldr	r3, [pc, #204]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4a32      	ldr	r2, [pc, #200]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800edbe:	7812      	ldrb	r2, [r2, #0]
 800edc0:	b2d2      	uxtb	r2, r2
 800edc2:	b292      	uxth	r2, r2
 800edc4:	4c31      	ldr	r4, [pc, #196]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800edc6:	9201      	str	r2, [sp, #4]
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	0023      	movs	r3, r4
 800edcc:	002a      	movs	r2, r5
 800edce:	f7fa fe19 	bl	8009a04 <Paint_DrawNum>
					colorSecond);
			Paint_DrawNum(digitalX, digitalY + 12, humidityValue, &Font12,
 800edd2:	4b3e      	ldr	r3, [pc, #248]	; (800eecc <interfaceDrawLayer+0x1db0>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	b298      	uxth	r0, r3
 800edd8:	4b3d      	ldr	r3, [pc, #244]	; (800eed0 <interfaceDrawLayer+0x1db4>)
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	330c      	adds	r3, #12
 800ede0:	b299      	uxth	r1, r3
 800ede2:	4b3d      	ldr	r3, [pc, #244]	; (800eed8 <interfaceDrawLayer+0x1dbc>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	001d      	movs	r5, r3
 800ede8:	4b26      	ldr	r3, [pc, #152]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b2db      	uxtb	r3, r3
 800edee:	b29b      	uxth	r3, r3
 800edf0:	4a25      	ldr	r2, [pc, #148]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800edf2:	7812      	ldrb	r2, [r2, #0]
 800edf4:	b2d2      	uxtb	r2, r2
 800edf6:	b292      	uxth	r2, r2
 800edf8:	4c24      	ldr	r4, [pc, #144]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800edfa:	9201      	str	r2, [sp, #4]
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	0023      	movs	r3, r4
 800ee00:	002a      	movs	r2, r5
 800ee02:	f7fa fdff 	bl	8009a04 <Paint_DrawNum>
					colorMain, colorSecond);

			if (temperatureValue < 0) {
 800ee06:	4b35      	ldr	r3, [pc, #212]	; (800eedc <interfaceDrawLayer+0x1dc0>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	da68      	bge.n	800eee0 <interfaceDrawLayer+0x1dc4>

				Paint_DrawChar(digitalX, digitalY + 24, '-', &Font12, colorMain,
 800ee0e:	4b2f      	ldr	r3, [pc, #188]	; (800eecc <interfaceDrawLayer+0x1db0>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	b298      	uxth	r0, r3
 800ee14:	4b2e      	ldr	r3, [pc, #184]	; (800eed0 <interfaceDrawLayer+0x1db4>)
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	3318      	adds	r3, #24
 800ee1c:	b299      	uxth	r1, r3
 800ee1e:	4b19      	ldr	r3, [pc, #100]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	4a18      	ldr	r2, [pc, #96]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ee28:	7812      	ldrb	r2, [r2, #0]
 800ee2a:	b2d2      	uxtb	r2, r2
 800ee2c:	b292      	uxth	r2, r2
 800ee2e:	4c17      	ldr	r4, [pc, #92]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800ee30:	9201      	str	r2, [sp, #4]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	0023      	movs	r3, r4
 800ee36:	222d      	movs	r2, #45	; 0x2d
 800ee38:	f7fa fc82 	bl	8009740 <Paint_DrawChar>
						colorSecond);
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800ee3c:	4b23      	ldr	r3, [pc, #140]	; (800eecc <interfaceDrawLayer+0x1db0>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	3308      	adds	r3, #8
 800ee44:	b298      	uxth	r0, r3
 800ee46:	4b22      	ldr	r3, [pc, #136]	; (800eed0 <interfaceDrawLayer+0x1db4>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	3318      	adds	r3, #24
 800ee4e:	b299      	uxth	r1, r3
 800ee50:	4b22      	ldr	r3, [pc, #136]	; (800eedc <interfaceDrawLayer+0x1dc0>)
 800ee52:	681b      	ldr	r3, [r3, #0]
						abs(temperatureValue), &Font12, colorMain, colorSecond);
 800ee54:	17da      	asrs	r2, r3, #31
 800ee56:	189c      	adds	r4, r3, r2
 800ee58:	4054      	eors	r4, r2
				Paint_DrawNum(digitalX + 8, digitalY + 24,
 800ee5a:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <interfaceDrawLayer+0x1d68>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	4a09      	ldr	r2, [pc, #36]	; (800ee88 <interfaceDrawLayer+0x1d6c>)
 800ee64:	7812      	ldrb	r2, [r2, #0]
 800ee66:	b2d2      	uxtb	r2, r2
 800ee68:	b292      	uxth	r2, r2
 800ee6a:	4d08      	ldr	r5, [pc, #32]	; (800ee8c <interfaceDrawLayer+0x1d70>)
 800ee6c:	9201      	str	r2, [sp, #4]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	002b      	movs	r3, r5
 800ee72:	0022      	movs	r2, r4
 800ee74:	f7fa fdc6 	bl	8009a04 <Paint_DrawNum>
 800ee78:	e04b      	b.n	800ef12 <interfaceDrawLayer+0x1df6>
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	200006ea 	.word	0x200006ea
 800ee80:	2000037b 	.word	0x2000037b
 800ee84:	2000033a 	.word	0x2000033a
 800ee88:	200006b3 	.word	0x200006b3
 800ee8c:	2000000c 	.word	0x2000000c
 800ee90:	0801614c 	.word	0x0801614c
 800ee94:	08016154 	.word	0x08016154
 800ee98:	2000033c 	.word	0x2000033c
 800ee9c:	20000628 	.word	0x20000628
 800eea0:	2000043e 	.word	0x2000043e
 800eea4:	2000044b 	.word	0x2000044b
 800eea8:	20000209 	.word	0x20000209
 800eeac:	200006e9 	.word	0x200006e9
 800eeb0:	200003b0 	.word	0x200003b0
 800eeb4:	200004bf 	.word	0x200004bf
 800eeb8:	20000014 	.word	0x20000014
 800eebc:	20000594 	.word	0x20000594
 800eec0:	20000620 	.word	0x20000620
 800eec4:	200006a0 	.word	0x200006a0
 800eec8:	200006fe 	.word	0x200006fe
 800eecc:	20000641 	.word	0x20000641
 800eed0:	200003ad 	.word	0x200003ad
 800eed4:	20000634 	.word	0x20000634
 800eed8:	2000020c 	.word	0x2000020c
 800eedc:	200003a8 	.word	0x200003a8
			} else {
				Paint_DrawNum(digitalX, digitalY + 24, temperatureValue,
 800eee0:	4bc4      	ldr	r3, [pc, #784]	; (800f1f4 <interfaceDrawLayer+0x20d8>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	b298      	uxth	r0, r3
 800eee6:	4bc4      	ldr	r3, [pc, #784]	; (800f1f8 <interfaceDrawLayer+0x20dc>)
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	3318      	adds	r3, #24
 800eeee:	b299      	uxth	r1, r3
 800eef0:	4bc2      	ldr	r3, [pc, #776]	; (800f1fc <interfaceDrawLayer+0x20e0>)
 800eef2:	681c      	ldr	r4, [r3, #0]
 800eef4:	4bc2      	ldr	r3, [pc, #776]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	4ac1      	ldr	r2, [pc, #772]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800eefe:	7812      	ldrb	r2, [r2, #0]
 800ef00:	b2d2      	uxtb	r2, r2
 800ef02:	b292      	uxth	r2, r2
 800ef04:	4dc0      	ldr	r5, [pc, #768]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800ef06:	9201      	str	r2, [sp, #4]
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	002b      	movs	r3, r5
 800ef0c:	0022      	movs	r2, r4
 800ef0e:	f7fa fd79 	bl	8009a04 <Paint_DrawNum>

		}

		//										TEMPERATURE READING

		if (showThermometer == 1) {
 800ef12:	4bbe      	ldr	r3, [pc, #760]	; (800f20c <interfaceDrawLayer+0x20f0>)
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d14c      	bne.n	800efb4 <interfaceDrawLayer+0x1e98>
			if (temperatureValue < 0) {
 800ef1a:	4bb8      	ldr	r3, [pc, #736]	; (800f1fc <interfaceDrawLayer+0x20e0>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	da31      	bge.n	800ef86 <interfaceDrawLayer+0x1e6a>

				Paint_DrawChar(temperatureX - 8, temperatureY, '-', &Font12,
 800ef22:	4bbb      	ldr	r3, [pc, #748]	; (800f210 <interfaceDrawLayer+0x20f4>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	3b08      	subs	r3, #8
 800ef2a:	b298      	uxth	r0, r3
 800ef2c:	4bb9      	ldr	r3, [pc, #740]	; (800f214 <interfaceDrawLayer+0x20f8>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	b299      	uxth	r1, r3
 800ef32:	4bb3      	ldr	r3, [pc, #716]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	4ab2      	ldr	r2, [pc, #712]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	b2d2      	uxtb	r2, r2
 800ef40:	b292      	uxth	r2, r2
 800ef42:	4cb1      	ldr	r4, [pc, #708]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800ef44:	9201      	str	r2, [sp, #4]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	0023      	movs	r3, r4
 800ef4a:	222d      	movs	r2, #45	; 0x2d
 800ef4c:	f7fa fbf8 	bl	8009740 <Paint_DrawChar>
						colorMain, colorSecond);
				Paint_DrawNum(temperatureX, temperatureY, abs(temperatureValue),
 800ef50:	4baf      	ldr	r3, [pc, #700]	; (800f210 <interfaceDrawLayer+0x20f4>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	b298      	uxth	r0, r3
 800ef56:	4baf      	ldr	r3, [pc, #700]	; (800f214 <interfaceDrawLayer+0x20f8>)
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	b299      	uxth	r1, r3
 800ef5c:	4ba7      	ldr	r3, [pc, #668]	; (800f1fc <interfaceDrawLayer+0x20e0>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	17da      	asrs	r2, r3, #31
 800ef62:	189c      	adds	r4, r3, r2
 800ef64:	4054      	eors	r4, r2
 800ef66:	4ba6      	ldr	r3, [pc, #664]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	4aa5      	ldr	r2, [pc, #660]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800ef70:	7812      	ldrb	r2, [r2, #0]
 800ef72:	b2d2      	uxtb	r2, r2
 800ef74:	b292      	uxth	r2, r2
 800ef76:	4da4      	ldr	r5, [pc, #656]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800ef78:	9201      	str	r2, [sp, #4]
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	002b      	movs	r3, r5
 800ef7e:	0022      	movs	r2, r4
 800ef80:	f7fa fd40 	bl	8009a04 <Paint_DrawNum>
 800ef84:	e016      	b.n	800efb4 <interfaceDrawLayer+0x1e98>
						&Font12, colorMain, colorSecond);
			} else {
				Paint_DrawNum(temperatureX, temperatureY, temperatureValue,
 800ef86:	4ba2      	ldr	r3, [pc, #648]	; (800f210 <interfaceDrawLayer+0x20f4>)
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	b298      	uxth	r0, r3
 800ef8c:	4ba1      	ldr	r3, [pc, #644]	; (800f214 <interfaceDrawLayer+0x20f8>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	b299      	uxth	r1, r3
 800ef92:	4b9a      	ldr	r3, [pc, #616]	; (800f1fc <interfaceDrawLayer+0x20e0>)
 800ef94:	681c      	ldr	r4, [r3, #0]
 800ef96:	4b9a      	ldr	r3, [pc, #616]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	4a99      	ldr	r2, [pc, #612]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800efa0:	7812      	ldrb	r2, [r2, #0]
 800efa2:	b2d2      	uxtb	r2, r2
 800efa4:	b292      	uxth	r2, r2
 800efa6:	4d98      	ldr	r5, [pc, #608]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800efa8:	9201      	str	r2, [sp, #4]
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	002b      	movs	r3, r5
 800efae:	0022      	movs	r2, r4
 800efb0:	f7fa fd28 	bl	8009a04 <Paint_DrawNum>
			}
		}

		//										HUMIDITY READING

		if (showHigrometer == 1) {
 800efb4:	4b98      	ldr	r3, [pc, #608]	; (800f218 <interfaceDrawLayer+0x20fc>)
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d120      	bne.n	800effe <interfaceDrawLayer+0x1ee2>
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800efbc:	4b97      	ldr	r3, [pc, #604]	; (800f21c <interfaceDrawLayer+0x2100>)
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	b298      	uxth	r0, r3
 800efc2:	4b97      	ldr	r3, [pc, #604]	; (800f220 <interfaceDrawLayer+0x2104>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b299      	uxth	r1, r3
 800efc8:	4b94      	ldr	r3, [pc, #592]	; (800f21c <interfaceDrawLayer+0x2100>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	b29b      	uxth	r3, r3
 800efce:	3305      	adds	r3, #5
 800efd0:	b29c      	uxth	r4, r3
 800efd2:	4b93      	ldr	r3, [pc, #588]	; (800f220 <interfaceDrawLayer+0x2104>)
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	b29a      	uxth	r2, r3
					humidityY + (humidityValue / 2), colorSecond, DOT_PIXEL_1X1,
 800efd8:	4b92      	ldr	r3, [pc, #584]	; (800f224 <interfaceDrawLayer+0x2108>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	085b      	lsrs	r3, r3, #1
			Paint_DrawRectangle(humidityX, humidityY, humidityX + 5,
 800efde:	b29b      	uxth	r3, r3
 800efe0:	18d3      	adds	r3, r2, r3
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	4b87      	ldr	r3, [pc, #540]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	b29b      	uxth	r3, r3
 800efec:	2501      	movs	r5, #1
 800efee:	9502      	str	r5, [sp, #8]
 800eff0:	2501      	movs	r5, #1
 800eff2:	9501      	str	r5, [sp, #4]
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	0013      	movs	r3, r2
 800eff8:	0022      	movs	r2, r4
 800effa:	f7fa f883 	bl	8009104 <Paint_DrawRectangle>
					DRAW_FILL_FULL);
		}

		//										ANALOG COMPASS

		if (showNaviAnalog == 1) {
 800effe:	4b8a      	ldr	r3, [pc, #552]	; (800f228 <interfaceDrawLayer+0x210c>)
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d000      	beq.n	800f008 <interfaceDrawLayer+0x1eec>
 800f006:	e0b5      	b.n	800f174 <interfaceDrawLayer+0x2058>

			if (altitudeValue < 0) {
 800f008:	4b88      	ldr	r3, [pc, #544]	; (800f22c <interfaceDrawLayer+0x2110>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	da37      	bge.n	800f080 <interfaceDrawLayer+0x1f64>
				Paint_DrawChar(compassX - 12, compassY - 14, '-', &Font12,
 800f010:	4b87      	ldr	r3, [pc, #540]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	b29b      	uxth	r3, r3
 800f016:	3b0c      	subs	r3, #12
 800f018:	b298      	uxth	r0, r3
 800f01a:	4b86      	ldr	r3, [pc, #536]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	3b0e      	subs	r3, #14
 800f022:	b299      	uxth	r1, r3
 800f024:	4b77      	ldr	r3, [pc, #476]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	4a74      	ldr	r2, [pc, #464]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800f02e:	7812      	ldrb	r2, [r2, #0]
 800f030:	b2d2      	uxtb	r2, r2
 800f032:	b292      	uxth	r2, r2
 800f034:	4c74      	ldr	r4, [pc, #464]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800f036:	9201      	str	r2, [sp, #4]
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	0023      	movs	r3, r4
 800f03c:	222d      	movs	r2, #45	; 0x2d
 800f03e:	f7fa fb7f 	bl	8009740 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800f042:	4b7b      	ldr	r3, [pc, #492]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b29b      	uxth	r3, r3
 800f048:	3b04      	subs	r3, #4
 800f04a:	b298      	uxth	r0, r3
 800f04c:	4b79      	ldr	r3, [pc, #484]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	b29b      	uxth	r3, r3
 800f052:	3b0e      	subs	r3, #14
 800f054:	b299      	uxth	r1, r3
 800f056:	4b75      	ldr	r3, [pc, #468]	; (800f22c <interfaceDrawLayer+0x2110>)
 800f058:	681b      	ldr	r3, [r3, #0]
						abs(altitudeValue), &Font12, colorSecond, colorMain);
 800f05a:	17da      	asrs	r2, r3, #31
 800f05c:	189c      	adds	r4, r3, r2
 800f05e:	4054      	eors	r4, r2
				Paint_DrawNum(compassX - 12 + 8, compassY - 14,
 800f060:	4b68      	ldr	r3, [pc, #416]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	b29b      	uxth	r3, r3
 800f068:	4a65      	ldr	r2, [pc, #404]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800f06a:	7812      	ldrb	r2, [r2, #0]
 800f06c:	b2d2      	uxtb	r2, r2
 800f06e:	b292      	uxth	r2, r2
 800f070:	4d65      	ldr	r5, [pc, #404]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800f072:	9201      	str	r2, [sp, #4]
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	002b      	movs	r3, r5
 800f078:	0022      	movs	r2, r4
 800f07a:	f7fa fcc3 	bl	8009a04 <Paint_DrawNum>
 800f07e:	e01a      	b.n	800f0b6 <interfaceDrawLayer+0x1f9a>
			} else {
				Paint_DrawNum(compassX - 12, compassY - 14, altitudeValue,
 800f080:	4b6b      	ldr	r3, [pc, #428]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	b29b      	uxth	r3, r3
 800f086:	3b0c      	subs	r3, #12
 800f088:	b298      	uxth	r0, r3
 800f08a:	4b6a      	ldr	r3, [pc, #424]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	b29b      	uxth	r3, r3
 800f090:	3b0e      	subs	r3, #14
 800f092:	b299      	uxth	r1, r3
 800f094:	4b65      	ldr	r3, [pc, #404]	; (800f22c <interfaceDrawLayer+0x2110>)
 800f096:	681c      	ldr	r4, [r3, #0]
 800f098:	4b5a      	ldr	r3, [pc, #360]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4a57      	ldr	r2, [pc, #348]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800f0a2:	7812      	ldrb	r2, [r2, #0]
 800f0a4:	b2d2      	uxtb	r2, r2
 800f0a6:	b292      	uxth	r2, r2
 800f0a8:	4d57      	ldr	r5, [pc, #348]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800f0aa:	9201      	str	r2, [sp, #4]
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	002b      	movs	r3, r5
 800f0b0:	0022      	movs	r2, r4
 800f0b2:	f7fa fca7 	bl	8009a04 <Paint_DrawNum>
						&Font12, colorSecond, colorMain);
			}

			compassAngle = atan2(magneticFieldY, magneticFieldX);
 800f0b6:	4b60      	ldr	r3, [pc, #384]	; (800f238 <interfaceDrawLayer+0x211c>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	5e9b      	ldrsh	r3, [r3, r2]
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f7f3 ff63 	bl	8002f88 <__aeabi_i2d>
 800f0c2:	0004      	movs	r4, r0
 800f0c4:	000d      	movs	r5, r1
 800f0c6:	4b5d      	ldr	r3, [pc, #372]	; (800f23c <interfaceDrawLayer+0x2120>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	5e9b      	ldrsh	r3, [r3, r2]
 800f0cc:	0018      	movs	r0, r3
 800f0ce:	f7f3 ff5b 	bl	8002f88 <__aeabi_i2d>
 800f0d2:	0002      	movs	r2, r0
 800f0d4:	000b      	movs	r3, r1
 800f0d6:	0020      	movs	r0, r4
 800f0d8:	0029      	movs	r1, r5
 800f0da:	f005 fa07 	bl	80144ec <atan2>
 800f0de:	0002      	movs	r2, r0
 800f0e0:	000b      	movs	r3, r1
 800f0e2:	0010      	movs	r0, r2
 800f0e4:	0019      	movs	r1, r3
 800f0e6:	f7f3 ffed 	bl	80030c4 <__aeabi_d2f>
 800f0ea:	1c02      	adds	r2, r0, #0
 800f0ec:	4b54      	ldr	r3, [pc, #336]	; (800f240 <interfaceDrawLayer+0x2124>)
 800f0ee:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(compassX, compassY, compassAngle,
 800f0f0:	4b4f      	ldr	r3, [pc, #316]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	b298      	uxth	r0, r3
 800f0f6:	4b4f      	ldr	r3, [pc, #316]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	b299      	uxth	r1, r3
 800f0fc:	4b50      	ldr	r3, [pc, #320]	; (800f240 <interfaceDrawLayer+0x2124>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	4b50      	ldr	r3, [pc, #320]	; (800f244 <interfaceDrawLayer+0x2128>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	b29c      	uxth	r4, r3
 800f106:	4b3f      	ldr	r3, [pc, #252]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	2500      	movs	r5, #0
 800f110:	9503      	str	r5, [sp, #12]
 800f112:	2502      	movs	r5, #2
 800f114:	9502      	str	r5, [sp, #8]
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	2300      	movs	r3, #0
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	0023      	movs	r3, r4
 800f11e:	f7f9 ff07 	bl	8008f30 <Paint_DrawPointer>
					compassPointerLength, 0, colorSecond, DOT_PIXEL_2X2,
					LINE_STYLE_SOLID);
			Paint_DrawPointer(compassX, compassY, compassAngle + 3.14,
 800f122:	4b43      	ldr	r3, [pc, #268]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	b29c      	uxth	r4, r3
 800f128:	4b42      	ldr	r3, [pc, #264]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	b29d      	uxth	r5, r3
 800f12e:	4b44      	ldr	r3, [pc, #272]	; (800f240 <interfaceDrawLayer+0x2124>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	1c18      	adds	r0, r3, #0
 800f134:	f7f3 ff7e 	bl	8003034 <__aeabi_f2d>
 800f138:	4a43      	ldr	r2, [pc, #268]	; (800f248 <interfaceDrawLayer+0x212c>)
 800f13a:	4b44      	ldr	r3, [pc, #272]	; (800f24c <interfaceDrawLayer+0x2130>)
 800f13c:	f7f2 f962 	bl	8001404 <__aeabi_dadd>
 800f140:	0002      	movs	r2, r0
 800f142:	000b      	movs	r3, r1
 800f144:	0010      	movs	r0, r2
 800f146:	0019      	movs	r1, r3
 800f148:	f7f3 ffbc 	bl	80030c4 <__aeabi_d2f>
 800f14c:	4b3d      	ldr	r3, [pc, #244]	; (800f244 <interfaceDrawLayer+0x2128>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b29a      	uxth	r2, r3
 800f152:	4b2c      	ldr	r3, [pc, #176]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	b2db      	uxtb	r3, r3
 800f158:	b29b      	uxth	r3, r3
 800f15a:	2100      	movs	r1, #0
 800f15c:	9103      	str	r1, [sp, #12]
 800f15e:	2101      	movs	r1, #1
 800f160:	9102      	str	r1, [sp, #8]
 800f162:	9301      	str	r3, [sp, #4]
 800f164:	2300      	movs	r3, #0
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	0013      	movs	r3, r2
 800f16a:	1c02      	adds	r2, r0, #0
 800f16c:	0029      	movs	r1, r5
 800f16e:	0020      	movs	r0, r4
 800f170:	f7f9 fede 	bl	8008f30 <Paint_DrawPointer>

		}

		//										DIGITAL COMPASS - ALT

		if (showNaviDigital == 1) {
 800f174:	4b36      	ldr	r3, [pc, #216]	; (800f250 <interfaceDrawLayer+0x2134>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d000      	beq.n	800f17e <interfaceDrawLayer+0x2062>
 800f17c:	e0f5      	b.n	800f36a <interfaceDrawLayer+0x224e>
			if (altitudeValue < 0) {
 800f17e:	4b2b      	ldr	r3, [pc, #172]	; (800f22c <interfaceDrawLayer+0x2110>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	da66      	bge.n	800f254 <interfaceDrawLayer+0x2138>
				Paint_DrawChar(compassX, compassY + 31, '-', &Font12,
 800f186:	4b2a      	ldr	r3, [pc, #168]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	b298      	uxth	r0, r3
 800f18c:	4b29      	ldr	r3, [pc, #164]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	b29b      	uxth	r3, r3
 800f192:	331f      	adds	r3, #31
 800f194:	b299      	uxth	r1, r3
 800f196:	4b1b      	ldr	r3, [pc, #108]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	4a18      	ldr	r2, [pc, #96]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800f1a0:	7812      	ldrb	r2, [r2, #0]
 800f1a2:	b2d2      	uxtb	r2, r2
 800f1a4:	b292      	uxth	r2, r2
 800f1a6:	4c18      	ldr	r4, [pc, #96]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800f1a8:	9201      	str	r2, [sp, #4]
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	0023      	movs	r3, r4
 800f1ae:	222d      	movs	r2, #45	; 0x2d
 800f1b0:	f7fa fac6 	bl	8009740 <Paint_DrawChar>
						colorSecond, colorMain);
				Paint_DrawNum(compassX + 8, compassY + 31, abs(altitudeValue),
 800f1b4:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <interfaceDrawLayer+0x2114>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	b298      	uxth	r0, r3
 800f1be:	4b1d      	ldr	r3, [pc, #116]	; (800f234 <interfaceDrawLayer+0x2118>)
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	331f      	adds	r3, #31
 800f1c6:	b299      	uxth	r1, r3
 800f1c8:	4b18      	ldr	r3, [pc, #96]	; (800f22c <interfaceDrawLayer+0x2110>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	17da      	asrs	r2, r3, #31
 800f1ce:	189c      	adds	r4, r3, r2
 800f1d0:	4054      	eors	r4, r2
 800f1d2:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <interfaceDrawLayer+0x20e8>)
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	4a09      	ldr	r2, [pc, #36]	; (800f200 <interfaceDrawLayer+0x20e4>)
 800f1dc:	7812      	ldrb	r2, [r2, #0]
 800f1de:	b2d2      	uxtb	r2, r2
 800f1e0:	b292      	uxth	r2, r2
 800f1e2:	4d09      	ldr	r5, [pc, #36]	; (800f208 <interfaceDrawLayer+0x20ec>)
 800f1e4:	9201      	str	r2, [sp, #4]
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	002b      	movs	r3, r5
 800f1ea:	0022      	movs	r2, r4
 800f1ec:	f7fa fc0a 	bl	8009a04 <Paint_DrawNum>
 800f1f0:	e049      	b.n	800f286 <interfaceDrawLayer+0x216a>
 800f1f2:	46c0      	nop			; (mov r8, r8)
 800f1f4:	20000641 	.word	0x20000641
 800f1f8:	200003ad 	.word	0x200003ad
 800f1fc:	200003a8 	.word	0x200003a8
 800f200:	2000033a 	.word	0x2000033a
 800f204:	200006b3 	.word	0x200006b3
 800f208:	2000000c 	.word	0x2000000c
 800f20c:	20000697 	.word	0x20000697
 800f210:	2000062d 	.word	0x2000062d
 800f214:	2000036c 	.word	0x2000036c
 800f218:	20000642 	.word	0x20000642
 800f21c:	2000070a 	.word	0x2000070a
 800f220:	20000442 	.word	0x20000442
 800f224:	2000020c 	.word	0x2000020c
 800f228:	20000208 	.word	0x20000208
 800f22c:	2000063c 	.word	0x2000063c
 800f230:	200006e8 	.word	0x200006e8
 800f234:	20000450 	.word	0x20000450
 800f238:	20000590 	.word	0x20000590
 800f23c:	2000062a 	.word	0x2000062a
 800f240:	20000200 	.word	0x20000200
 800f244:	2000037a 	.word	0x2000037a
 800f248:	51eb851f 	.word	0x51eb851f
 800f24c:	40091eb8 	.word	0x40091eb8
 800f250:	20000614 	.word	0x20000614
						&Font12, colorSecond, colorMain);
			} else {
				Paint_DrawNum(compassX, compassY + 31, altitudeValue, &Font12,
 800f254:	4ba3      	ldr	r3, [pc, #652]	; (800f4e4 <interfaceDrawLayer+0x23c8>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	b298      	uxth	r0, r3
 800f25a:	4ba3      	ldr	r3, [pc, #652]	; (800f4e8 <interfaceDrawLayer+0x23cc>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	331f      	adds	r3, #31
 800f262:	b299      	uxth	r1, r3
 800f264:	4ba1      	ldr	r3, [pc, #644]	; (800f4ec <interfaceDrawLayer+0x23d0>)
 800f266:	681c      	ldr	r4, [r3, #0]
 800f268:	4ba1      	ldr	r3, [pc, #644]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	b29b      	uxth	r3, r3
 800f270:	4aa0      	ldr	r2, [pc, #640]	; (800f4f4 <interfaceDrawLayer+0x23d8>)
 800f272:	7812      	ldrb	r2, [r2, #0]
 800f274:	b2d2      	uxtb	r2, r2
 800f276:	b292      	uxth	r2, r2
 800f278:	4d9f      	ldr	r5, [pc, #636]	; (800f4f8 <interfaceDrawLayer+0x23dc>)
 800f27a:	9201      	str	r2, [sp, #4]
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	002b      	movs	r3, r5
 800f280:	0022      	movs	r2, r4
 800f282:	f7fa fbbf 	bl	8009a04 <Paint_DrawNum>
						colorSecond, colorMain);
			}

			//										DIGITAL COMPASS - COMPASS

			uint16_t compassCenterX = compassX + 24;
 800f286:	4b97      	ldr	r3, [pc, #604]	; (800f4e4 <interfaceDrawLayer+0x23c8>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	260a      	movs	r6, #10
 800f28e:	19bb      	adds	r3, r7, r6
 800f290:	3218      	adds	r2, #24
 800f292:	801a      	strh	r2, [r3, #0]
			uint16_t compassCenterY = compassY + 14;
 800f294:	4b94      	ldr	r3, [pc, #592]	; (800f4e8 <interfaceDrawLayer+0x23cc>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	b29a      	uxth	r2, r3
 800f29a:	2108      	movs	r1, #8
 800f29c:	187b      	adds	r3, r7, r1
 800f29e:	320e      	adds	r2, #14
 800f2a0:	801a      	strh	r2, [r3, #0]

			Paint_DrawPoint(compassCenterX + magneticFieldX,
 800f2a2:	4b96      	ldr	r3, [pc, #600]	; (800f4fc <interfaceDrawLayer+0x23e0>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	5e9b      	ldrsh	r3, [r3, r2]
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	19bb      	adds	r3, r7, r6
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	18d3      	adds	r3, r2, r3
 800f2b0:	b298      	uxth	r0, r3
 800f2b2:	4b93      	ldr	r3, [pc, #588]	; (800f500 <interfaceDrawLayer+0x23e4>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	000c      	movs	r4, r1
 800f2bc:	187b      	adds	r3, r7, r1
 800f2be:	881b      	ldrh	r3, [r3, #0]
 800f2c0:	18d3      	adds	r3, r2, r3
 800f2c2:	b299      	uxth	r1, r3
 800f2c4:	4b8a      	ldr	r3, [pc, #552]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	2303      	movs	r3, #3
 800f2d2:	f7f9 fc65 	bl	8008ba0 <Paint_DrawPoint>
					compassCenterY + magneticFieldY, colorSecond, DOT_PIXEL_3X3,
					DOT_STYLE_DFT);

			Paint_DrawLine(compassX, compassCenterY + magneticFieldY,
 800f2d6:	4b83      	ldr	r3, [pc, #524]	; (800f4e4 <interfaceDrawLayer+0x23c8>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	b298      	uxth	r0, r3
 800f2dc:	4b88      	ldr	r3, [pc, #544]	; (800f500 <interfaceDrawLayer+0x23e4>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	5e9b      	ldrsh	r3, [r3, r2]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	0025      	movs	r5, r4
 800f2e6:	193b      	adds	r3, r7, r4
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	18d3      	adds	r3, r2, r3
 800f2ec:	b299      	uxth	r1, r3
 800f2ee:	4b7d      	ldr	r3, [pc, #500]	; (800f4e4 <interfaceDrawLayer+0x23c8>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	3330      	adds	r3, #48	; 0x30
 800f2f6:	b29c      	uxth	r4, r3
 800f2f8:	4b81      	ldr	r3, [pc, #516]	; (800f500 <interfaceDrawLayer+0x23e4>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	5e9b      	ldrsh	r3, [r3, r2]
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	197b      	adds	r3, r7, r5
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	18d3      	adds	r3, r2, r3
 800f306:	b29a      	uxth	r2, r3
 800f308:	4b79      	ldr	r3, [pc, #484]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	b29b      	uxth	r3, r3
 800f310:	2500      	movs	r5, #0
 800f312:	9502      	str	r5, [sp, #8]
 800f314:	2501      	movs	r5, #1
 800f316:	9501      	str	r5, [sp, #4]
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	0013      	movs	r3, r2
 800f31c:	0022      	movs	r2, r4
 800f31e:	f7f9 fd29 	bl	8008d74 <Paint_DrawLine>
					compassX + 48, compassCenterY + magneticFieldY, colorSecond,
					DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			Paint_DrawLine(compassCenterX + magneticFieldX, compassY,
 800f322:	4b76      	ldr	r3, [pc, #472]	; (800f4fc <interfaceDrawLayer+0x23e0>)
 800f324:	2200      	movs	r2, #0
 800f326:	5e9b      	ldrsh	r3, [r3, r2]
 800f328:	b29a      	uxth	r2, r3
 800f32a:	19bb      	adds	r3, r7, r6
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	18d3      	adds	r3, r2, r3
 800f330:	b298      	uxth	r0, r3
 800f332:	4b6d      	ldr	r3, [pc, #436]	; (800f4e8 <interfaceDrawLayer+0x23cc>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	b299      	uxth	r1, r3
 800f338:	4b70      	ldr	r3, [pc, #448]	; (800f4fc <interfaceDrawLayer+0x23e0>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	5e9b      	ldrsh	r3, [r3, r2]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	19bb      	adds	r3, r7, r6
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	18d3      	adds	r3, r2, r3
 800f346:	b29a      	uxth	r2, r3
 800f348:	4b67      	ldr	r3, [pc, #412]	; (800f4e8 <interfaceDrawLayer+0x23cc>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	331d      	adds	r3, #29
 800f350:	b29c      	uxth	r4, r3
 800f352:	4b67      	ldr	r3, [pc, #412]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	b29b      	uxth	r3, r3
 800f35a:	2500      	movs	r5, #0
 800f35c:	9502      	str	r5, [sp, #8]
 800f35e:	2501      	movs	r5, #1
 800f360:	9501      	str	r5, [sp, #4]
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	0023      	movs	r3, r4
 800f366:	f7f9 fd05 	bl	8008d74 <Paint_DrawLine>

		}

		//										PRESSURE POINTER

		if (showBarometer == 1) {
 800f36a:	4b66      	ldr	r3, [pc, #408]	; (800f504 <interfaceDrawLayer+0x23e8>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d000      	beq.n	800f374 <interfaceDrawLayer+0x2258>
 800f372:	e09a      	b.n	800f4aa <interfaceDrawLayer+0x238e>

			pressureAngle = 2 * 3.14 / 100
					* ((int32_t) pressureValue - 950 - 25);
 800f374:	4b64      	ldr	r3, [pc, #400]	; (800f508 <interfaceDrawLayer+0x23ec>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a64      	ldr	r2, [pc, #400]	; (800f50c <interfaceDrawLayer+0x23f0>)
 800f37a:	4694      	mov	ip, r2
 800f37c:	4463      	add	r3, ip
 800f37e:	0018      	movs	r0, r3
 800f380:	f7f3 fe02 	bl	8002f88 <__aeabi_i2d>
 800f384:	4a62      	ldr	r2, [pc, #392]	; (800f510 <interfaceDrawLayer+0x23f4>)
 800f386:	4b63      	ldr	r3, [pc, #396]	; (800f514 <interfaceDrawLayer+0x23f8>)
 800f388:	f7f2 ffac 	bl	80022e4 <__aeabi_dmul>
 800f38c:	0002      	movs	r2, r0
 800f38e:	000b      	movs	r3, r1
 800f390:	0010      	movs	r0, r2
 800f392:	0019      	movs	r1, r3
 800f394:	f7f3 fe96 	bl	80030c4 <__aeabi_d2f>
 800f398:	1c02      	adds	r2, r0, #0
			pressureAngle = 2 * 3.14 / 100
 800f39a:	4b5f      	ldr	r3, [pc, #380]	; (800f518 <interfaceDrawLayer+0x23fc>)
 800f39c:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, pressureAngle,
 800f39e:	4b5f      	ldr	r3, [pc, #380]	; (800f51c <interfaceDrawLayer+0x2400>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	b298      	uxth	r0, r3
 800f3a4:	4b5e      	ldr	r3, [pc, #376]	; (800f520 <interfaceDrawLayer+0x2404>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b299      	uxth	r1, r3
 800f3aa:	4b5b      	ldr	r3, [pc, #364]	; (800f518 <interfaceDrawLayer+0x23fc>)
 800f3ac:	681c      	ldr	r4, [r3, #0]
 800f3ae:	4b5d      	ldr	r3, [pc, #372]	; (800f524 <interfaceDrawLayer+0x2408>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	b29d      	uxth	r5, r3
 800f3b4:	4b5c      	ldr	r3, [pc, #368]	; (800f528 <interfaceDrawLayer+0x240c>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	4a4d      	ldr	r2, [pc, #308]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f3bc:	7812      	ldrb	r2, [r2, #0]
 800f3be:	b2d2      	uxtb	r2, r2
 800f3c0:	b292      	uxth	r2, r2
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	9603      	str	r6, [sp, #12]
 800f3c6:	2602      	movs	r6, #2
 800f3c8:	9602      	str	r6, [sp, #8]
 800f3ca:	9201      	str	r2, [sp, #4]
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	002b      	movs	r3, r5
 800f3d0:	1c22      	adds	r2, r4, #0
 800f3d2:	f7f9 fdad 	bl	8008f30 <Paint_DrawPointer>
					pressurePointerLength, pressurePointerShift, colorSecond,
					DOT_PIXEL_2X2, LINE_STYLE_SOLID);

			Paint_DrawCircle(
					(cos(pressureAngle) * pressurePointerShift) + mainStartX,
 800f3d6:	4b50      	ldr	r3, [pc, #320]	; (800f518 <interfaceDrawLayer+0x23fc>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	1c18      	adds	r0, r3, #0
 800f3dc:	f7f3 fe2a 	bl	8003034 <__aeabi_f2d>
 800f3e0:	0002      	movs	r2, r0
 800f3e2:	000b      	movs	r3, r1
 800f3e4:	0010      	movs	r0, r2
 800f3e6:	0019      	movs	r1, r3
 800f3e8:	f004 fff8 	bl	80143dc <cos>
 800f3ec:	0004      	movs	r4, r0
 800f3ee:	000d      	movs	r5, r1
 800f3f0:	4b4d      	ldr	r3, [pc, #308]	; (800f528 <interfaceDrawLayer+0x240c>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	0018      	movs	r0, r3
 800f3f6:	f7f3 fdc7 	bl	8002f88 <__aeabi_i2d>
 800f3fa:	0002      	movs	r2, r0
 800f3fc:	000b      	movs	r3, r1
 800f3fe:	0020      	movs	r0, r4
 800f400:	0029      	movs	r1, r5
 800f402:	f7f2 ff6f 	bl	80022e4 <__aeabi_dmul>
 800f406:	0002      	movs	r2, r0
 800f408:	000b      	movs	r3, r1
 800f40a:	0014      	movs	r4, r2
 800f40c:	001d      	movs	r5, r3
 800f40e:	4b43      	ldr	r3, [pc, #268]	; (800f51c <interfaceDrawLayer+0x2400>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	0018      	movs	r0, r3
 800f414:	f7f3 fdb8 	bl	8002f88 <__aeabi_i2d>
 800f418:	0002      	movs	r2, r0
 800f41a:	000b      	movs	r3, r1
 800f41c:	0020      	movs	r0, r4
 800f41e:	0029      	movs	r1, r5
 800f420:	f7f1 fff0 	bl	8001404 <__aeabi_dadd>
 800f424:	0002      	movs	r2, r0
 800f426:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800f428:	0010      	movs	r0, r2
 800f42a:	0019      	movs	r1, r3
 800f42c:	f7f1 f8c4 	bl	80005b8 <__aeabi_d2uiz>
 800f430:	0003      	movs	r3, r0
 800f432:	b29e      	uxth	r6, r3
					(sin(pressureAngle) * pressurePointerShift) + mainStartY, 4,
 800f434:	4b38      	ldr	r3, [pc, #224]	; (800f518 <interfaceDrawLayer+0x23fc>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	1c18      	adds	r0, r3, #0
 800f43a:	f7f3 fdfb 	bl	8003034 <__aeabi_f2d>
 800f43e:	0002      	movs	r2, r0
 800f440:	000b      	movs	r3, r1
 800f442:	0010      	movs	r0, r2
 800f444:	0019      	movs	r1, r3
 800f446:	f005 f80b 	bl	8014460 <sin>
 800f44a:	0004      	movs	r4, r0
 800f44c:	000d      	movs	r5, r1
 800f44e:	4b36      	ldr	r3, [pc, #216]	; (800f528 <interfaceDrawLayer+0x240c>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	0018      	movs	r0, r3
 800f454:	f7f3 fd98 	bl	8002f88 <__aeabi_i2d>
 800f458:	0002      	movs	r2, r0
 800f45a:	000b      	movs	r3, r1
 800f45c:	0020      	movs	r0, r4
 800f45e:	0029      	movs	r1, r5
 800f460:	f7f2 ff40 	bl	80022e4 <__aeabi_dmul>
 800f464:	0002      	movs	r2, r0
 800f466:	000b      	movs	r3, r1
 800f468:	0014      	movs	r4, r2
 800f46a:	001d      	movs	r5, r3
 800f46c:	4b2c      	ldr	r3, [pc, #176]	; (800f520 <interfaceDrawLayer+0x2404>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	0018      	movs	r0, r3
 800f472:	f7f3 fd89 	bl	8002f88 <__aeabi_i2d>
 800f476:	0002      	movs	r2, r0
 800f478:	000b      	movs	r3, r1
 800f47a:	0020      	movs	r0, r4
 800f47c:	0029      	movs	r1, r5
 800f47e:	f7f1 ffc1 	bl	8001404 <__aeabi_dadd>
 800f482:	0002      	movs	r2, r0
 800f484:	000b      	movs	r3, r1
			Paint_DrawCircle(
 800f486:	0010      	movs	r0, r2
 800f488:	0019      	movs	r1, r3
 800f48a:	f7f1 f895 	bl	80005b8 <__aeabi_d2uiz>
 800f48e:	0003      	movs	r3, r0
 800f490:	b299      	uxth	r1, r3
 800f492:	4b17      	ldr	r3, [pc, #92]	; (800f4f0 <interfaceDrawLayer+0x23d4>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	b2db      	uxtb	r3, r3
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2200      	movs	r2, #0
 800f49c:	9201      	str	r2, [sp, #4]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	9200      	str	r2, [sp, #0]
 800f4a2:	2204      	movs	r2, #4
 800f4a4:	0030      	movs	r0, r6
 800f4a6:	f7f9 fef9 	bl	800929c <Paint_DrawCircle>
			//^ pointer
		}

		//										BATTERY STATE POINTER

		batteryStateAngle = 2 * 3.14 / 28 * (batteryState);
 800f4aa:	4b20      	ldr	r3, [pc, #128]	; (800f52c <interfaceDrawLayer+0x2410>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	0018      	movs	r0, r3
 800f4b0:	f7f3 fd6a 	bl	8002f88 <__aeabi_i2d>
 800f4b4:	4a1e      	ldr	r2, [pc, #120]	; (800f530 <interfaceDrawLayer+0x2414>)
 800f4b6:	4b1f      	ldr	r3, [pc, #124]	; (800f534 <interfaceDrawLayer+0x2418>)
 800f4b8:	f7f2 ff14 	bl	80022e4 <__aeabi_dmul>
 800f4bc:	0002      	movs	r2, r0
 800f4be:	000b      	movs	r3, r1
 800f4c0:	0010      	movs	r0, r2
 800f4c2:	0019      	movs	r1, r3
 800f4c4:	f7f3 fdfe 	bl	80030c4 <__aeabi_d2f>
 800f4c8:	1c02      	adds	r2, r0, #0
 800f4ca:	4b1b      	ldr	r3, [pc, #108]	; (800f538 <interfaceDrawLayer+0x241c>)
 800f4cc:	601a      	str	r2, [r3, #0]

		if (showBatteryState) {
 800f4ce:	4b1b      	ldr	r3, [pc, #108]	; (800f53c <interfaceDrawLayer+0x2420>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d06e      	beq.n	800f5b4 <interfaceDrawLayer+0x2498>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800f4d6:	2312      	movs	r3, #18
 800f4d8:	18fb      	adds	r3, r7, r3
 800f4da:	4a14      	ldr	r2, [pc, #80]	; (800f52c <interfaceDrawLayer+0x2410>)
 800f4dc:	7812      	ldrb	r2, [r2, #0]
 800f4de:	701a      	strb	r2, [r3, #0]
 800f4e0:	e063      	b.n	800f5aa <interfaceDrawLayer+0x248e>
 800f4e2:	46c0      	nop			; (mov r8, r8)
 800f4e4:	200006e8 	.word	0x200006e8
 800f4e8:	20000450 	.word	0x20000450
 800f4ec:	2000063c 	.word	0x2000063c
 800f4f0:	200006b3 	.word	0x200006b3
 800f4f4:	2000033a 	.word	0x2000033a
 800f4f8:	2000000c 	.word	0x2000000c
 800f4fc:	2000062a 	.word	0x2000062a
 800f500:	20000590 	.word	0x20000590
 800f504:	20000215 	.word	0x20000215
 800f508:	20000634 	.word	0x20000634
 800f50c:	fffffc31 	.word	0xfffffc31
 800f510:	2a305533 	.word	0x2a305533
 800f514:	3fb013a9 	.word	0x3fb013a9
 800f518:	20000704 	.word	0x20000704
 800f51c:	2000044b 	.word	0x2000044b
 800f520:	20000209 	.word	0x20000209
 800f524:	200006bc 	.word	0x200006bc
 800f528:	2000062c 	.word	0x2000062c
 800f52c:	200003a5 	.word	0x200003a5
 800f530:	efe89823 	.word	0xefe89823
 800f534:	3fccb564 	.word	0x3fccb564
 800f538:	200001f4 	.word	0x200001f4
 800f53c:	200003b2 	.word	0x200003b2
				batteryStateAngle = 2 * 3.14 / 28 * (i);
 800f540:	2112      	movs	r1, #18
 800f542:	187b      	adds	r3, r7, r1
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	0018      	movs	r0, r3
 800f548:	f7f3 fd1e 	bl	8002f88 <__aeabi_i2d>
 800f54c:	4a97      	ldr	r2, [pc, #604]	; (800f7ac <interfaceDrawLayer+0x2690>)
 800f54e:	4b98      	ldr	r3, [pc, #608]	; (800f7b0 <interfaceDrawLayer+0x2694>)
 800f550:	f7f2 fec8 	bl	80022e4 <__aeabi_dmul>
 800f554:	0002      	movs	r2, r0
 800f556:	000b      	movs	r3, r1
 800f558:	0010      	movs	r0, r2
 800f55a:	0019      	movs	r1, r3
 800f55c:	f7f3 fdb2 	bl	80030c4 <__aeabi_d2f>
 800f560:	1c02      	adds	r2, r0, #0
 800f562:	4b94      	ldr	r3, [pc, #592]	; (800f7b4 <interfaceDrawLayer+0x2698>)
 800f564:	601a      	str	r2, [r3, #0]

				Paint_DrawPointer(batteryStateStartX, batteryStateStartY,
 800f566:	4b94      	ldr	r3, [pc, #592]	; (800f7b8 <interfaceDrawLayer+0x269c>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b298      	uxth	r0, r3
 800f56c:	4b93      	ldr	r3, [pc, #588]	; (800f7bc <interfaceDrawLayer+0x26a0>)
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	b299      	uxth	r1, r3
 800f572:	4b90      	ldr	r3, [pc, #576]	; (800f7b4 <interfaceDrawLayer+0x2698>)
 800f574:	681c      	ldr	r4, [r3, #0]
 800f576:	4b92      	ldr	r3, [pc, #584]	; (800f7c0 <interfaceDrawLayer+0x26a4>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	b29d      	uxth	r5, r3
 800f57c:	4b91      	ldr	r3, [pc, #580]	; (800f7c4 <interfaceDrawLayer+0x26a8>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	b29b      	uxth	r3, r3
 800f582:	4a91      	ldr	r2, [pc, #580]	; (800f7c8 <interfaceDrawLayer+0x26ac>)
 800f584:	7812      	ldrb	r2, [r2, #0]
 800f586:	b2d2      	uxtb	r2, r2
 800f588:	b292      	uxth	r2, r2
 800f58a:	2600      	movs	r6, #0
 800f58c:	9603      	str	r6, [sp, #12]
 800f58e:	2601      	movs	r6, #1
 800f590:	9602      	str	r6, [sp, #8]
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	002b      	movs	r3, r5
 800f598:	1c22      	adds	r2, r4, #0
 800f59a:	f7f9 fcc9 	bl	8008f30 <Paint_DrawPointer>
			for (uint8_t i = batteryState; i <= 7; i++) {
 800f59e:	2112      	movs	r1, #18
 800f5a0:	187b      	adds	r3, r7, r1
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	187b      	adds	r3, r7, r1
 800f5a6:	3201      	adds	r2, #1
 800f5a8:	701a      	strb	r2, [r3, #0]
 800f5aa:	2312      	movs	r3, #18
 800f5ac:	18fb      	adds	r3, r7, r3
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	2b07      	cmp	r3, #7
 800f5b2:	d9c5      	bls.n	800f540 <interfaceDrawLayer+0x2424>

		}

		//										HOUR POINTER

		hourAngle = 2 * 3.14 / 60 * ((actual.hour * 5 + (actual.minute / 10)) - 15);
 800f5b4:	4b85      	ldr	r3, [pc, #532]	; (800f7cc <interfaceDrawLayer+0x26b0>)
 800f5b6:	78db      	ldrb	r3, [r3, #3]
 800f5b8:	b25b      	sxtb	r3, r3
 800f5ba:	001a      	movs	r2, r3
 800f5bc:	0013      	movs	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	189c      	adds	r4, r3, r2
 800f5c2:	4b82      	ldr	r3, [pc, #520]	; (800f7cc <interfaceDrawLayer+0x26b0>)
 800f5c4:	791b      	ldrb	r3, [r3, #4]
 800f5c6:	b25b      	sxtb	r3, r3
 800f5c8:	210a      	movs	r1, #10
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f7f0 fe2c 	bl	8000228 <__divsi3>
 800f5d0:	0003      	movs	r3, r0
 800f5d2:	b25b      	sxtb	r3, r3
 800f5d4:	18e3      	adds	r3, r4, r3
 800f5d6:	3b0f      	subs	r3, #15
 800f5d8:	0018      	movs	r0, r3
 800f5da:	f7f3 fcd5 	bl	8002f88 <__aeabi_i2d>
 800f5de:	4a7c      	ldr	r2, [pc, #496]	; (800f7d0 <interfaceDrawLayer+0x26b4>)
 800f5e0:	4b7c      	ldr	r3, [pc, #496]	; (800f7d4 <interfaceDrawLayer+0x26b8>)
 800f5e2:	f7f2 fe7f 	bl	80022e4 <__aeabi_dmul>
 800f5e6:	0002      	movs	r2, r0
 800f5e8:	000b      	movs	r3, r1
 800f5ea:	0010      	movs	r0, r2
 800f5ec:	0019      	movs	r1, r3
 800f5ee:	f7f3 fd69 	bl	80030c4 <__aeabi_d2f>
 800f5f2:	1c02      	adds	r2, r0, #0
 800f5f4:	4b78      	ldr	r3, [pc, #480]	; (800f7d8 <interfaceDrawLayer+0x26bc>)
 800f5f6:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800f5f8:	4b78      	ldr	r3, [pc, #480]	; (800f7dc <interfaceDrawLayer+0x26c0>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	4b78      	ldr	r3, [pc, #480]	; (800f7e0 <interfaceDrawLayer+0x26c4>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	b29b      	uxth	r3, r3
 800f604:	18d3      	adds	r3, r2, r3
 800f606:	b298      	uxth	r0, r3
 800f608:	4b76      	ldr	r3, [pc, #472]	; (800f7e4 <interfaceDrawLayer+0x26c8>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	4b74      	ldr	r3, [pc, #464]	; (800f7e0 <interfaceDrawLayer+0x26c4>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	b29b      	uxth	r3, r3
 800f614:	18d3      	adds	r3, r2, r3
 800f616:	b299      	uxth	r1, r3
 800f618:	4b6f      	ldr	r3, [pc, #444]	; (800f7d8 <interfaceDrawLayer+0x26bc>)
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	4b72      	ldr	r3, [pc, #456]	; (800f7e8 <interfaceDrawLayer+0x26cc>)
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	b29c      	uxth	r4, r3
 800f622:	4b72      	ldr	r3, [pc, #456]	; (800f7ec <interfaceDrawLayer+0x26d0>)
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	b2db      	uxtb	r3, r3
 800f628:	b29b      	uxth	r3, r3
 800f62a:	2500      	movs	r5, #0
 800f62c:	9503      	str	r5, [sp, #12]
 800f62e:	2503      	movs	r5, #3
 800f630:	9502      	str	r5, [sp, #8]
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	230f      	movs	r3, #15
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	0023      	movs	r3, r4
 800f63a:	f7f9 fc79 	bl	8008f30 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, hourAngle, hourPointerLength,
				15, colorMain, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, hourAngle, hourPointerLength,
 800f63e:	4b67      	ldr	r3, [pc, #412]	; (800f7dc <interfaceDrawLayer+0x26c0>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	b298      	uxth	r0, r3
 800f644:	4b67      	ldr	r3, [pc, #412]	; (800f7e4 <interfaceDrawLayer+0x26c8>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	b299      	uxth	r1, r3
 800f64a:	4b63      	ldr	r3, [pc, #396]	; (800f7d8 <interfaceDrawLayer+0x26bc>)
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	4b66      	ldr	r3, [pc, #408]	; (800f7e8 <interfaceDrawLayer+0x26cc>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	b29c      	uxth	r4, r3
 800f654:	4b5c      	ldr	r3, [pc, #368]	; (800f7c8 <interfaceDrawLayer+0x26ac>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2500      	movs	r5, #0
 800f65e:	9503      	str	r5, [sp, #12]
 800f660:	2503      	movs	r5, #3
 800f662:	9502      	str	r5, [sp, #8]
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	230f      	movs	r3, #15
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	0023      	movs	r3, r4
 800f66c:	f7f9 fc60 	bl	8008f30 <Paint_DrawPointer>
				15, colorSecond, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
		//^ pointer

		//										MINUTE POINTER

		minuteAngle = 2 * 3.14 / 60 * (actual.minute - 15);
 800f670:	4b56      	ldr	r3, [pc, #344]	; (800f7cc <interfaceDrawLayer+0x26b0>)
 800f672:	791b      	ldrb	r3, [r3, #4]
 800f674:	b25b      	sxtb	r3, r3
 800f676:	3b0f      	subs	r3, #15
 800f678:	0018      	movs	r0, r3
 800f67a:	f7f3 fc85 	bl	8002f88 <__aeabi_i2d>
 800f67e:	4a54      	ldr	r2, [pc, #336]	; (800f7d0 <interfaceDrawLayer+0x26b4>)
 800f680:	4b54      	ldr	r3, [pc, #336]	; (800f7d4 <interfaceDrawLayer+0x26b8>)
 800f682:	f7f2 fe2f 	bl	80022e4 <__aeabi_dmul>
 800f686:	0002      	movs	r2, r0
 800f688:	000b      	movs	r3, r1
 800f68a:	0010      	movs	r0, r2
 800f68c:	0019      	movs	r1, r3
 800f68e:	f7f3 fd19 	bl	80030c4 <__aeabi_d2f>
 800f692:	1c02      	adds	r2, r0, #0
 800f694:	4b56      	ldr	r3, [pc, #344]	; (800f7f0 <interfaceDrawLayer+0x26d4>)
 800f696:	601a      	str	r2, [r3, #0]

		Paint_DrawPointer(mainStartX + pointerShadowShift,
 800f698:	4b50      	ldr	r3, [pc, #320]	; (800f7dc <interfaceDrawLayer+0x26c0>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	4b50      	ldr	r3, [pc, #320]	; (800f7e0 <interfaceDrawLayer+0x26c4>)
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	18d3      	adds	r3, r2, r3
 800f6a6:	b298      	uxth	r0, r3
 800f6a8:	4b4e      	ldr	r3, [pc, #312]	; (800f7e4 <interfaceDrawLayer+0x26c8>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	4b4c      	ldr	r3, [pc, #304]	; (800f7e0 <interfaceDrawLayer+0x26c4>)
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	18d3      	adds	r3, r2, r3
 800f6b6:	b299      	uxth	r1, r3
 800f6b8:	4b4d      	ldr	r3, [pc, #308]	; (800f7f0 <interfaceDrawLayer+0x26d4>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	4b4d      	ldr	r3, [pc, #308]	; (800f7f4 <interfaceDrawLayer+0x26d8>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	b29c      	uxth	r4, r3
 800f6c2:	4b4a      	ldr	r3, [pc, #296]	; (800f7ec <interfaceDrawLayer+0x26d0>)
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	9503      	str	r5, [sp, #12]
 800f6ce:	2502      	movs	r5, #2
 800f6d0:	9502      	str	r5, [sp, #8]
 800f6d2:	9301      	str	r3, [sp, #4]
 800f6d4:	230f      	movs	r3, #15
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	0023      	movs	r3, r4
 800f6da:	f7f9 fc29 	bl	8008f30 <Paint_DrawPointer>
				mainStartY + pointerShadowShift, minuteAngle,
				minutePointerLength, 15, colorMain, DOT_PIXEL_2X2,
				LINE_STYLE_SOLID);
		//^shadow

		Paint_DrawPointer(mainStartX, mainStartY, minuteAngle,
 800f6de:	4b3f      	ldr	r3, [pc, #252]	; (800f7dc <interfaceDrawLayer+0x26c0>)
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	b298      	uxth	r0, r3
 800f6e4:	4b3f      	ldr	r3, [pc, #252]	; (800f7e4 <interfaceDrawLayer+0x26c8>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	b299      	uxth	r1, r3
 800f6ea:	4b41      	ldr	r3, [pc, #260]	; (800f7f0 <interfaceDrawLayer+0x26d4>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	4b41      	ldr	r3, [pc, #260]	; (800f7f4 <interfaceDrawLayer+0x26d8>)
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	b29c      	uxth	r4, r3
 800f6f4:	4b34      	ldr	r3, [pc, #208]	; (800f7c8 <interfaceDrawLayer+0x26ac>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	2500      	movs	r5, #0
 800f6fe:	9503      	str	r5, [sp, #12]
 800f700:	2502      	movs	r5, #2
 800f702:	9502      	str	r5, [sp, #8]
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	230f      	movs	r3, #15
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	0023      	movs	r3, r4
 800f70c:	f7f9 fc10 	bl	8008f30 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		//^ pointer

		//										CHRONO MINUTE POINTER

		if (showChrono == 1) {
 800f710:	4b39      	ldr	r3, [pc, #228]	; (800f7f8 <interfaceDrawLayer+0x26dc>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d000      	beq.n	800f71a <interfaceDrawLayer+0x25fe>
 800f718:	e0a6      	b.n	800f868 <interfaceDrawLayer+0x274c>

			chronoMinutesAngle = 2 * 3.14 / 30 * (chrono.minute - 7.5);
 800f71a:	4b38      	ldr	r3, [pc, #224]	; (800f7fc <interfaceDrawLayer+0x26e0>)
 800f71c:	791b      	ldrb	r3, [r3, #4]
 800f71e:	b25b      	sxtb	r3, r3
 800f720:	0018      	movs	r0, r3
 800f722:	f7f3 fc31 	bl	8002f88 <__aeabi_i2d>
 800f726:	2200      	movs	r2, #0
 800f728:	4b35      	ldr	r3, [pc, #212]	; (800f800 <interfaceDrawLayer+0x26e4>)
 800f72a:	f7f3 f847 	bl	80027bc <__aeabi_dsub>
 800f72e:	0002      	movs	r2, r0
 800f730:	000b      	movs	r3, r1
 800f732:	0010      	movs	r0, r2
 800f734:	0019      	movs	r1, r3
 800f736:	4a26      	ldr	r2, [pc, #152]	; (800f7d0 <interfaceDrawLayer+0x26b4>)
 800f738:	4b32      	ldr	r3, [pc, #200]	; (800f804 <interfaceDrawLayer+0x26e8>)
 800f73a:	f7f2 fdd3 	bl	80022e4 <__aeabi_dmul>
 800f73e:	0002      	movs	r2, r0
 800f740:	000b      	movs	r3, r1
 800f742:	0010      	movs	r0, r2
 800f744:	0019      	movs	r1, r3
 800f746:	f7f3 fcbd 	bl	80030c4 <__aeabi_d2f>
 800f74a:	1c02      	adds	r2, r0, #0
 800f74c:	4b2e      	ldr	r3, [pc, #184]	; (800f808 <interfaceDrawLayer+0x26ec>)
 800f74e:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoMinutesStartX, chronoMinutesStartY,
 800f750:	4b2e      	ldr	r3, [pc, #184]	; (800f80c <interfaceDrawLayer+0x26f0>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	b298      	uxth	r0, r3
 800f756:	4b2e      	ldr	r3, [pc, #184]	; (800f810 <interfaceDrawLayer+0x26f4>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	b299      	uxth	r1, r3
 800f75c:	4b2a      	ldr	r3, [pc, #168]	; (800f808 <interfaceDrawLayer+0x26ec>)
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	4b2c      	ldr	r3, [pc, #176]	; (800f814 <interfaceDrawLayer+0x26f8>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	b29c      	uxth	r4, r3
 800f766:	4b21      	ldr	r3, [pc, #132]	; (800f7ec <interfaceDrawLayer+0x26d0>)
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	2500      	movs	r5, #0
 800f770:	9503      	str	r5, [sp, #12]
 800f772:	2501      	movs	r5, #1
 800f774:	9502      	str	r5, [sp, #8]
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	2300      	movs	r3, #0
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	0023      	movs	r3, r4
 800f77e:	f7f9 fbd7 	bl	8008f30 <Paint_DrawPointer>
					chronoMinutesAngle, chronoMinutesPointerLength, 0,
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

			//										CHRONO HALF HOURS DOTS

			for (uint8_t halfHours = (chrono.hour * 2) + (chrono.minute / 30);
 800f782:	4b1e      	ldr	r3, [pc, #120]	; (800f7fc <interfaceDrawLayer+0x26e0>)
 800f784:	78db      	ldrb	r3, [r3, #3]
 800f786:	b25b      	sxtb	r3, r3
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	18db      	adds	r3, r3, r3
 800f78c:	b2dc      	uxtb	r4, r3
 800f78e:	4b1b      	ldr	r3, [pc, #108]	; (800f7fc <interfaceDrawLayer+0x26e0>)
 800f790:	791b      	ldrb	r3, [r3, #4]
 800f792:	b25b      	sxtb	r3, r3
 800f794:	211e      	movs	r1, #30
 800f796:	0018      	movs	r0, r3
 800f798:	f7f0 fd46 	bl	8000228 <__divsi3>
 800f79c:	0003      	movs	r3, r0
 800f79e:	b25b      	sxtb	r3, r3
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	2311      	movs	r3, #17
 800f7a4:	18fb      	adds	r3, r7, r3
 800f7a6:	18a2      	adds	r2, r4, r2
 800f7a8:	701a      	strb	r2, [r3, #0]
 800f7aa:	e058      	b.n	800f85e <interfaceDrawLayer+0x2742>
 800f7ac:	efe89823 	.word	0xefe89823
 800f7b0:	3fccb564 	.word	0x3fccb564
 800f7b4:	200001f4 	.word	0x200001f4
 800f7b8:	2000069f 	.word	0x2000069f
 800f7bc:	20000710 	.word	0x20000710
 800f7c0:	200004c0 	.word	0x200004c0
 800f7c4:	20000214 	.word	0x20000214
 800f7c8:	200006b3 	.word	0x200006b3
 800f7cc:	200006ac 	.word	0x200006ac
 800f7d0:	46508dff 	.word	0x46508dff
 800f7d4:	3fbacb6f 	.word	0x3fbacb6f
 800f7d8:	200006dc 	.word	0x200006dc
 800f7dc:	2000044b 	.word	0x2000044b
 800f7e0:	20000211 	.word	0x20000211
 800f7e4:	20000209 	.word	0x20000209
 800f7e8:	20000213 	.word	0x20000213
 800f7ec:	2000033a 	.word	0x2000033a
 800f7f0:	2000061c 	.word	0x2000061c
 800f7f4:	20000696 	.word	0x20000696
 800f7f8:	200003ac 	.word	0x200003ac
 800f7fc:	20000444 	.word	0x20000444
 800f800:	401e0000 	.word	0x401e0000
 800f804:	3fcacb6f 	.word	0x3fcacb6f
 800f808:	200006c0 	.word	0x200006c0
 800f80c:	200006f4 	.word	0x200006f4
 800f810:	200006b4 	.word	0x200006b4
 800f814:	20000210 	.word	0x20000210
					halfHours > 0; halfHours--) {
				Paint_DrawPoint(
						chronoMinutesStartX - chronoMinutesPointerLength
 800f818:	4b8f      	ldr	r3, [pc, #572]	; (800fa58 <interfaceDrawLayer+0x293c>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	4b8f      	ldr	r3, [pc, #572]	; (800fa5c <interfaceDrawLayer+0x2940>)
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	b29b      	uxth	r3, r3
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	b29a      	uxth	r2, r3
				Paint_DrawPoint(
 800f828:	2411      	movs	r4, #17
 800f82a:	193b      	adds	r3, r7, r4
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	b29b      	uxth	r3, r3
 800f834:	18d3      	adds	r3, r2, r3
 800f836:	b298      	uxth	r0, r3
 800f838:	4b89      	ldr	r3, [pc, #548]	; (800fa60 <interfaceDrawLayer+0x2944>)
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	3b05      	subs	r3, #5
 800f840:	b299      	uxth	r1, r3
 800f842:	4b88      	ldr	r3, [pc, #544]	; (800fa64 <interfaceDrawLayer+0x2948>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	b2db      	uxtb	r3, r3
 800f848:	b29a      	uxth	r2, r3
 800f84a:	2301      	movs	r3, #1
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	2302      	movs	r3, #2
 800f850:	f7f9 f9a6 	bl	8008ba0 <Paint_DrawPoint>
					halfHours > 0; halfHours--) {
 800f854:	193b      	adds	r3, r7, r4
 800f856:	781a      	ldrb	r2, [r3, #0]
 800f858:	193b      	adds	r3, r7, r4
 800f85a:	3a01      	subs	r2, #1
 800f85c:	701a      	strb	r2, [r3, #0]
			for (uint8_t halfHours = (chrono.hour * 2) + (chrono.minute / 30);
 800f85e:	2311      	movs	r3, #17
 800f860:	18fb      	adds	r3, r7, r3
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1d7      	bne.n	800f818 <interfaceDrawLayer+0x26fc>

		}

		//										SECONDS POINTER

		secondAngle = 2 * 3.14 / 60 * (actual.second - 15);
 800f868:	4b7f      	ldr	r3, [pc, #508]	; (800fa68 <interfaceDrawLayer+0x294c>)
 800f86a:	795b      	ldrb	r3, [r3, #5]
 800f86c:	b25b      	sxtb	r3, r3
 800f86e:	3b0f      	subs	r3, #15
 800f870:	0018      	movs	r0, r3
 800f872:	f7f3 fb89 	bl	8002f88 <__aeabi_i2d>
 800f876:	4a7d      	ldr	r2, [pc, #500]	; (800fa6c <interfaceDrawLayer+0x2950>)
 800f878:	4b7d      	ldr	r3, [pc, #500]	; (800fa70 <interfaceDrawLayer+0x2954>)
 800f87a:	f7f2 fd33 	bl	80022e4 <__aeabi_dmul>
 800f87e:	0002      	movs	r2, r0
 800f880:	000b      	movs	r3, r1
 800f882:	0010      	movs	r0, r2
 800f884:	0019      	movs	r1, r3
 800f886:	f7f3 fc1d 	bl	80030c4 <__aeabi_d2f>
 800f88a:	1c02      	adds	r2, r0, #0
 800f88c:	4b79      	ldr	r3, [pc, #484]	; (800fa74 <interfaceDrawLayer+0x2958>)
 800f88e:	601a      	str	r2, [r3, #0]

		if (showSeconds == 1) {
 800f890:	4b79      	ldr	r3, [pc, #484]	; (800fa78 <interfaceDrawLayer+0x295c>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d118      	bne.n	800f8ca <interfaceDrawLayer+0x27ae>
			Paint_DrawPointer(secondsStartX, secondsStartY, secondAngle,
 800f898:	4b78      	ldr	r3, [pc, #480]	; (800fa7c <interfaceDrawLayer+0x2960>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	b298      	uxth	r0, r3
 800f89e:	4b78      	ldr	r3, [pc, #480]	; (800fa80 <interfaceDrawLayer+0x2964>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	b299      	uxth	r1, r3
 800f8a4:	4b73      	ldr	r3, [pc, #460]	; (800fa74 <interfaceDrawLayer+0x2958>)
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	4b76      	ldr	r3, [pc, #472]	; (800fa84 <interfaceDrawLayer+0x2968>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	b29c      	uxth	r4, r3
 800f8ae:	4b6d      	ldr	r3, [pc, #436]	; (800fa64 <interfaceDrawLayer+0x2948>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	2500      	movs	r5, #0
 800f8b8:	9503      	str	r5, [sp, #12]
 800f8ba:	2501      	movs	r5, #1
 800f8bc:	9502      	str	r5, [sp, #8]
 800f8be:	9301      	str	r3, [sp, #4]
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	0023      	movs	r3, r4
 800f8c6:	f7f9 fb33 	bl	8008f30 <Paint_DrawPointer>
			//^pointer
		}

		//										CHRONO SECOND POINTER

		if (showChrono == 1) {
 800f8ca:	4b6f      	ldr	r3, [pc, #444]	; (800fa88 <interfaceDrawLayer+0x296c>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d14f      	bne.n	800f972 <interfaceDrawLayer+0x2856>

			chronoSecondsAngle = 2 * 3.14 / 60 * (chrono.second - 15);
 800f8d2:	4b6e      	ldr	r3, [pc, #440]	; (800fa8c <interfaceDrawLayer+0x2970>)
 800f8d4:	795b      	ldrb	r3, [r3, #5]
 800f8d6:	b25b      	sxtb	r3, r3
 800f8d8:	3b0f      	subs	r3, #15
 800f8da:	0018      	movs	r0, r3
 800f8dc:	f7f3 fb54 	bl	8002f88 <__aeabi_i2d>
 800f8e0:	4a62      	ldr	r2, [pc, #392]	; (800fa6c <interfaceDrawLayer+0x2950>)
 800f8e2:	4b63      	ldr	r3, [pc, #396]	; (800fa70 <interfaceDrawLayer+0x2954>)
 800f8e4:	f7f2 fcfe 	bl	80022e4 <__aeabi_dmul>
 800f8e8:	0002      	movs	r2, r0
 800f8ea:	000b      	movs	r3, r1
 800f8ec:	0010      	movs	r0, r2
 800f8ee:	0019      	movs	r1, r3
 800f8f0:	f7f3 fbe8 	bl	80030c4 <__aeabi_d2f>
 800f8f4:	1c02      	adds	r2, r0, #0
 800f8f6:	4b66      	ldr	r3, [pc, #408]	; (800fa90 <interfaceDrawLayer+0x2974>)
 800f8f8:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(mainStartX, mainStartY, chronoSecondsAngle,
 800f8fa:	4b66      	ldr	r3, [pc, #408]	; (800fa94 <interfaceDrawLayer+0x2978>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	b298      	uxth	r0, r3
 800f900:	4b65      	ldr	r3, [pc, #404]	; (800fa98 <interfaceDrawLayer+0x297c>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	b299      	uxth	r1, r3
 800f906:	4b62      	ldr	r3, [pc, #392]	; (800fa90 <interfaceDrawLayer+0x2974>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	4b64      	ldr	r3, [pc, #400]	; (800fa9c <interfaceDrawLayer+0x2980>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b29c      	uxth	r4, r3
 800f910:	4b63      	ldr	r3, [pc, #396]	; (800faa0 <interfaceDrawLayer+0x2984>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	b2db      	uxtb	r3, r3
 800f916:	b29b      	uxth	r3, r3
 800f918:	2500      	movs	r5, #0
 800f91a:	9503      	str	r5, [sp, #12]
 800f91c:	2501      	movs	r5, #1
 800f91e:	9502      	str	r5, [sp, #8]
 800f920:	9301      	str	r3, [sp, #4]
 800f922:	230f      	movs	r3, #15
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	0023      	movs	r3, r4
 800f928:	f7f9 fb02 	bl	8008f30 <Paint_DrawPointer>
					chronoSecondsPointerLength, 15, colorSecond, DOT_PIXEL_1X1,
					LINE_STYLE_SOLID);
			//^ pointer

			Paint_DrawPointer(mainStartX + pointerShadowShift,
 800f92c:	4b59      	ldr	r3, [pc, #356]	; (800fa94 <interfaceDrawLayer+0x2978>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	b29a      	uxth	r2, r3
 800f932:	4b5c      	ldr	r3, [pc, #368]	; (800faa4 <interfaceDrawLayer+0x2988>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b29b      	uxth	r3, r3
 800f938:	18d3      	adds	r3, r2, r3
 800f93a:	b298      	uxth	r0, r3
 800f93c:	4b56      	ldr	r3, [pc, #344]	; (800fa98 <interfaceDrawLayer+0x297c>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	b29a      	uxth	r2, r3
 800f942:	4b58      	ldr	r3, [pc, #352]	; (800faa4 <interfaceDrawLayer+0x2988>)
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	b29b      	uxth	r3, r3
 800f948:	18d3      	adds	r3, r2, r3
 800f94a:	b299      	uxth	r1, r3
 800f94c:	4b50      	ldr	r3, [pc, #320]	; (800fa90 <interfaceDrawLayer+0x2974>)
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	4b52      	ldr	r3, [pc, #328]	; (800fa9c <interfaceDrawLayer+0x2980>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	b29c      	uxth	r4, r3
 800f956:	4b43      	ldr	r3, [pc, #268]	; (800fa64 <interfaceDrawLayer+0x2948>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	2500      	movs	r5, #0
 800f960:	9503      	str	r5, [sp, #12]
 800f962:	2501      	movs	r5, #1
 800f964:	9502      	str	r5, [sp, #8]
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	230f      	movs	r3, #15
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	0023      	movs	r3, r4
 800f96e:	f7f9 fadf 	bl	8008f30 <Paint_DrawPointer>
			//^shadow
		}

		//										CHRONO DECIMAL POINTER

		if (showChrono == 1) {
 800f972:	4b45      	ldr	r3, [pc, #276]	; (800fa88 <interfaceDrawLayer+0x296c>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b01      	cmp	r3, #1
 800f978:	d133      	bne.n	800f9e2 <interfaceDrawLayer+0x28c6>

			chronoDecimalsAngle = 2 * 3.14 / 10 * (chrono.decimal - 2.5);
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <interfaceDrawLayer+0x2970>)
 800f97c:	799b      	ldrb	r3, [r3, #6]
 800f97e:	b25b      	sxtb	r3, r3
 800f980:	0018      	movs	r0, r3
 800f982:	f7f3 fb01 	bl	8002f88 <__aeabi_i2d>
 800f986:	2200      	movs	r2, #0
 800f988:	4b47      	ldr	r3, [pc, #284]	; (800faa8 <interfaceDrawLayer+0x298c>)
 800f98a:	f7f2 ff17 	bl	80027bc <__aeabi_dsub>
 800f98e:	0002      	movs	r2, r0
 800f990:	000b      	movs	r3, r1
 800f992:	0010      	movs	r0, r2
 800f994:	0019      	movs	r1, r3
 800f996:	4a45      	ldr	r2, [pc, #276]	; (800faac <interfaceDrawLayer+0x2990>)
 800f998:	4b45      	ldr	r3, [pc, #276]	; (800fab0 <interfaceDrawLayer+0x2994>)
 800f99a:	f7f2 fca3 	bl	80022e4 <__aeabi_dmul>
 800f99e:	0002      	movs	r2, r0
 800f9a0:	000b      	movs	r3, r1
 800f9a2:	0010      	movs	r0, r2
 800f9a4:	0019      	movs	r1, r3
 800f9a6:	f7f3 fb8d 	bl	80030c4 <__aeabi_d2f>
 800f9aa:	1c02      	adds	r2, r0, #0
 800f9ac:	4b41      	ldr	r3, [pc, #260]	; (800fab4 <interfaceDrawLayer+0x2998>)
 800f9ae:	601a      	str	r2, [r3, #0]

			Paint_DrawPointer(chronoDecimalsStartX, chronoDecimalsStartY,
 800f9b0:	4b41      	ldr	r3, [pc, #260]	; (800fab8 <interfaceDrawLayer+0x299c>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	b298      	uxth	r0, r3
 800f9b6:	4b41      	ldr	r3, [pc, #260]	; (800fabc <interfaceDrawLayer+0x29a0>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	b299      	uxth	r1, r3
 800f9bc:	4b3d      	ldr	r3, [pc, #244]	; (800fab4 <interfaceDrawLayer+0x2998>)
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	4b3f      	ldr	r3, [pc, #252]	; (800fac0 <interfaceDrawLayer+0x29a4>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	b29c      	uxth	r4, r3
 800f9c6:	4b27      	ldr	r3, [pc, #156]	; (800fa64 <interfaceDrawLayer+0x2948>)
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2500      	movs	r5, #0
 800f9d0:	9503      	str	r5, [sp, #12]
 800f9d2:	2501      	movs	r5, #1
 800f9d4:	9502      	str	r5, [sp, #8]
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	2300      	movs	r3, #0
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	0023      	movs	r3, r4
 800f9de:	f7f9 faa7 	bl	8008f30 <Paint_DrawPointer>
					colorMain, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
		}

		//										DATE

		if (showDate == 1) {
 800f9e2:	4b38      	ldr	r3, [pc, #224]	; (800fac4 <interfaceDrawLayer+0x29a8>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d118      	bne.n	800fa1c <interfaceDrawLayer+0x2900>
			Paint_DrawNum(dateX, dateY, actual.day, &Font12, colorSecond, colorMain); //date
 800f9ea:	4b37      	ldr	r3, [pc, #220]	; (800fac8 <interfaceDrawLayer+0x29ac>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	b298      	uxth	r0, r3
 800f9f0:	4b36      	ldr	r3, [pc, #216]	; (800facc <interfaceDrawLayer+0x29b0>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	b299      	uxth	r1, r3
 800f9f6:	4b1c      	ldr	r3, [pc, #112]	; (800fa68 <interfaceDrawLayer+0x294c>)
 800f9f8:	789b      	ldrb	r3, [r3, #2]
 800f9fa:	b25b      	sxtb	r3, r3
 800f9fc:	001d      	movs	r5, r3
 800f9fe:	4b28      	ldr	r3, [pc, #160]	; (800faa0 <interfaceDrawLayer+0x2984>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	4a17      	ldr	r2, [pc, #92]	; (800fa64 <interfaceDrawLayer+0x2948>)
 800fa08:	7812      	ldrb	r2, [r2, #0]
 800fa0a:	b2d2      	uxtb	r2, r2
 800fa0c:	b292      	uxth	r2, r2
 800fa0e:	4c30      	ldr	r4, [pc, #192]	; (800fad0 <interfaceDrawLayer+0x29b4>)
 800fa10:	9201      	str	r2, [sp, #4]
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	0023      	movs	r3, r4
 800fa16:	002a      	movs	r2, r5
 800fa18:	f7f9 fff4 	bl	8009a04 <Paint_DrawNum>
		}

		//										LOCK INDICATOR
		if (flagLocked == LOCKED) {
 800fa1c:	4b2d      	ldr	r3, [pc, #180]	; (800fad4 <interfaceDrawLayer+0x29b8>)
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d010      	beq.n	800fa48 <interfaceDrawLayer+0x292c>
//			Paint_DrawCircle(mainStartX, mainStartY, 5, colorSecond,
//					DOT_PIXEL_2X2, DRAW_FILL_FULL);
//			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
//								DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		} else {
			Paint_DrawCircle(mainStartX, mainStartY, 14, colorSecond,
 800fa26:	4b1b      	ldr	r3, [pc, #108]	; (800fa94 <interfaceDrawLayer+0x2978>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b298      	uxth	r0, r3
 800fa2c:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <interfaceDrawLayer+0x297c>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	b299      	uxth	r1, r3
 800fa32:	4b1b      	ldr	r3, [pc, #108]	; (800faa0 <interfaceDrawLayer+0x2984>)
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	9201      	str	r2, [sp, #4]
 800fa3e:	2202      	movs	r2, #2
 800fa40:	9200      	str	r2, [sp, #0]
 800fa42:	220e      	movs	r2, #14
 800fa44:	f7f9 fc2a 	bl	800929c <Paint_DrawCircle>
					DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
		}

	}

}
 800fa48:	46c0      	nop			; (mov r8, r8)
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	b007      	add	sp, #28
 800fa4e:	bcc0      	pop	{r6, r7}
 800fa50:	46b9      	mov	r9, r7
 800fa52:	46b0      	mov	r8, r6
 800fa54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa56:	46c0      	nop			; (mov r8, r8)
 800fa58:	200006f4 	.word	0x200006f4
 800fa5c:	20000210 	.word	0x20000210
 800fa60:	200006b4 	.word	0x200006b4
 800fa64:	2000033a 	.word	0x2000033a
 800fa68:	200006ac 	.word	0x200006ac
 800fa6c:	46508dff 	.word	0x46508dff
 800fa70:	3fbacb6f 	.word	0x3fbacb6f
 800fa74:	200006e4 	.word	0x200006e4
 800fa78:	200001ff 	.word	0x200001ff
 800fa7c:	200006ea 	.word	0x200006ea
 800fa80:	2000037b 	.word	0x2000037b
 800fa84:	20000695 	.word	0x20000695
 800fa88:	200003ac 	.word	0x200003ac
 800fa8c:	20000444 	.word	0x20000444
 800fa90:	200006b8 	.word	0x200006b8
 800fa94:	2000044b 	.word	0x2000044b
 800fa98:	20000209 	.word	0x20000209
 800fa9c:	200003b3 	.word	0x200003b3
 800faa0:	200006b3 	.word	0x200006b3
 800faa4:	20000211 	.word	0x20000211
 800faa8:	40040000 	.word	0x40040000
 800faac:	74bc6a7f 	.word	0x74bc6a7f
 800fab0:	3fe41893 	.word	0x3fe41893
 800fab4:	20000370 	.word	0x20000370
 800fab8:	20000645 	.word	0x20000645
 800fabc:	20000646 	.word	0x20000646
 800fac0:	20000700 	.word	0x20000700
 800fac4:	20000212 	.word	0x20000212
 800fac8:	200006fa 	.word	0x200006fa
 800facc:	20000268 	.word	0x20000268
 800fad0:	2000000c 	.word	0x2000000c
 800fad4:	200004c2 	.word	0x200004c2

0800fad8 <interfaceDrawBatteryWarning>:

void interfaceDrawBatteryWarning() {
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af02      	add	r7, sp, #8
	interfaceClear();
 800fade:	f7fd fb0f 	bl	800d100 <interfaceClear>
	Paint_DrawString_EN(105, 90, "CHARGE", &Font16, colorSecond, colorMain);
 800fae2:	4b0b      	ldr	r3, [pc, #44]	; (800fb10 <interfaceDrawBatteryWarning+0x38>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	b29b      	uxth	r3, r3
 800faea:	4a0a      	ldr	r2, [pc, #40]	; (800fb14 <interfaceDrawBatteryWarning+0x3c>)
 800faec:	7812      	ldrb	r2, [r2, #0]
 800faee:	b2d2      	uxtb	r2, r2
 800faf0:	b292      	uxth	r2, r2
 800faf2:	4809      	ldr	r0, [pc, #36]	; (800fb18 <interfaceDrawBatteryWarning+0x40>)
 800faf4:	4909      	ldr	r1, [pc, #36]	; (800fb1c <interfaceDrawBatteryWarning+0x44>)
 800faf6:	9201      	str	r2, [sp, #4]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	0003      	movs	r3, r0
 800fafc:	000a      	movs	r2, r1
 800fafe:	215a      	movs	r1, #90	; 0x5a
 800fb00:	2069      	movs	r0, #105	; 0x69
 800fb02:	f7f9 ff01 	bl	8009908 <Paint_DrawString_EN>
	interfaceWrite();	//burn framebuffer
 800fb06:	f7fd fadd 	bl	800d0c4 <interfaceWrite>
}
 800fb0a:	46c0      	nop			; (mov r8, r8)
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	200006b3 	.word	0x200006b3
 800fb14:	2000033a 	.word	0x2000033a
 800fb18:	20000014 	.word	0x20000014
 800fb1c:	08016158 	.word	0x08016158

0800fb20 <LL_CRC_SetPolynomialSize>:
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	2218      	movs	r2, #24
 800fb30:	4393      	bics	r3, r2
 800fb32:	001a      	movs	r2, r3
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	431a      	orrs	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	609a      	str	r2, [r3, #8]
}
 800fb3c:	46c0      	nop			; (mov r8, r8)
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	b002      	add	sp, #8
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <LL_CRC_SetInputDataReverseMode>:
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	2260      	movs	r2, #96	; 0x60
 800fb54:	4393      	bics	r3, r2
 800fb56:	001a      	movs	r2, r3
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	431a      	orrs	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	609a      	str	r2, [r3, #8]
}
 800fb60:	46c0      	nop			; (mov r8, r8)
 800fb62:	46bd      	mov	sp, r7
 800fb64:	b002      	add	sp, #8
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <LL_CRC_SetOutputDataReverseMode>:
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2280      	movs	r2, #128	; 0x80
 800fb78:	4393      	bics	r3, r2
 800fb7a:	001a      	movs	r2, r3
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	431a      	orrs	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	609a      	str	r2, [r3, #8]
}
 800fb84:	46c0      	nop			; (mov r8, r8)
 800fb86:	46bd      	mov	sp, r7
 800fb88:	b002      	add	sp, #8
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <LL_CRC_SetInitialData>:
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	683a      	ldr	r2, [r7, #0]
 800fb9a:	611a      	str	r2, [r3, #16]
}
 800fb9c:	46c0      	nop			; (mov r8, r8)
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	b002      	add	sp, #8
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <LL_CRC_SetPolynomialCoef>:
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	615a      	str	r2, [r3, #20]
}
 800fbb4:	46c0      	nop			; (mov r8, r8)
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	b002      	add	sp, #8
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <LL_AHB1_GRP1_EnableClock>:
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800fbc4:	4b07      	ldr	r3, [pc, #28]	; (800fbe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fbc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800fbc8:	4b06      	ldr	r3, [pc, #24]	; (800fbe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	430a      	orrs	r2, r1
 800fbce:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800fbd0:	4b04      	ldr	r3, [pc, #16]	; (800fbe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800fbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fbda:	68fb      	ldr	r3, [r7, #12]
}
 800fbdc:	46c0      	nop			; (mov r8, r8)
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	b004      	add	sp, #16
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	40021000 	.word	0x40021000

0800fbe8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800fbee:	f7f3 fc01 	bl	80033f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800fbf2:	f000 fa1b 	bl	801002c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800fbf6:	f000 fca5 	bl	8010544 <MX_GPIO_Init>
	MX_DMA_Init();
 800fbfa:	f000 fc85 	bl	8010508 <MX_DMA_Init>
	MX_I2C1_Init();
 800fbfe:	f000 fb37 	bl	8010270 <MX_I2C1_Init>
	MX_ADC1_Init();
 800fc02:	f000 fa7b 	bl	80100fc <MX_ADC1_Init>
	MX_RTC_Init();
 800fc06:	f000 fb73 	bl	80102f0 <MX_RTC_Init>
	MX_SPI1_Init();
 800fc0a:	f000 fbe7 	bl	80103dc <MX_SPI1_Init>
	MX_TIM3_Init();
 800fc0e:	f000 fc23 	bl	8010458 <MX_TIM3_Init>
	MX_CRC_Init();
 800fc12:	f000 fb03 	bl	801021c <MX_CRC_Init>

	//EPD test
	//EPD_1in54_V2_test();
	//										INITIALISATION
	//										RTC INITIALISATION
	rtcInit();
 800fc16:	f000 fd63 	bl	80106e0 <rtcInit>

	//										SENSORS INITIALISATION

	sensingInit();
 800fc1a:	f001 f853 	bl	8010cc4 <sensingInit>

	//										TIMERS INITIALISATION
	timersInit();
 800fc1e:	f003 f921 	bl	8012e64 <timersInit>

	//										INTERFACE

	while (flagBatteryLow) {
 800fc22:	e005      	b.n	800fc30 <main+0x48>
		onSleep();
 800fc24:	f000 fd2e 	bl	8010684 <onSleep>
		onWakeUp();
 800fc28:	f000 fd42 	bl	80106b0 <onWakeUp>

		sensingRead();
 800fc2c:	f001 f976 	bl	8010f1c <sensingRead>
	while (flagBatteryLow) {
 800fc30:	4bcb      	ldr	r3, [pc, #812]	; (800ff60 <main+0x378>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1f4      	bne.n	800fc24 <main+0x3c>
	}

	layout = 2;  //select startup layout and color
 800fc3a:	4bca      	ldr	r3, [pc, #808]	; (800ff64 <main+0x37c>)
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	701a      	strb	r2, [r3, #0]
	colorScheme = COLOR_SCHEME_BLACK;
 800fc40:	4bc9      	ldr	r3, [pc, #804]	; (800ff68 <main+0x380>)
 800fc42:	2202      	movs	r2, #2
 800fc44:	701a      	strb	r2, [r3, #0]

	flagClockConfig = 0;
 800fc46:	4bc9      	ldr	r3, [pc, #804]	; (800ff6c <main+0x384>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]

	interfaceSelectLayout(layout);  //set layout and color
 800fc4c:	4bc5      	ldr	r3, [pc, #788]	; (800ff64 <main+0x37c>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	0018      	movs	r0, r3
 800fc54:	f7fc fc16 	bl	800c484 <interfaceSelectLayout>
	interfaceSelectColorScheme(colorScheme);
 800fc58:	4bc3      	ldr	r3, [pc, #780]	; (800ff68 <main+0x380>)
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	0018      	movs	r0, r3
 800fc60:	f7fd f8ba 	bl	800cdd8 <interfaceSelectColorScheme>
	interfaceInit();
 800fc64:	f7fd f8dc 	bl	800ce20 <interfaceInit>

	interfaceClear();	//clear framebuffer
 800fc68:	f7fd fa4a 	bl	800d100 <interfaceClear>

	interfaceUpdate(INTERFACE_UPDATE_FULL);	//change update mode
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	f7fd f9f9 	bl	800d064 <interfaceUpdate>

	interfaceDrawLayer(1);
 800fc72:	2001      	movs	r0, #1
 800fc74:	f7fd fa52 	bl	800d11c <interfaceDrawLayer>
	interfaceDrawLayer(2);
 800fc78:	2002      	movs	r0, #2
 800fc7a:	f7fd fa4f 	bl	800d11c <interfaceDrawLayer>
	interfaceDrawLayer(3);
 800fc7e:	2003      	movs	r0, #3
 800fc80:	f7fd fa4c 	bl	800d11c <interfaceDrawLayer>

	interfaceWrite();
 800fc84:	f7fd fa1e 	bl	800d0c4 <interfaceWrite>

	//										FLASH RESTORE SECTION

	flashWriteFlag = 0;
 800fc88:	4bb9      	ldr	r3, [pc, #740]	; (800ff70 <main+0x388>)
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	701a      	strb	r2, [r3, #0]
	uint16_t virtualAdress[NB_OF_VARIABLES];
	uint16_t timeBackup[3];

	for (uint8_t varIndex = 1; varIndex <= 3; varIndex++) {
 800fc8e:	2317      	movs	r3, #23
 800fc90:	18fb      	adds	r3, r7, r3
 800fc92:	2201      	movs	r2, #1
 800fc94:	701a      	strb	r2, [r3, #0]
 800fc96:	e00f      	b.n	800fcb8 <main+0xd0>
		virtualAdress[varIndex - 1] = varIndex;
 800fc98:	2017      	movs	r0, #23
 800fc9a:	183b      	adds	r3, r7, r0
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	1e5a      	subs	r2, r3, #1
 800fca0:	183b      	adds	r3, r7, r0
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	b299      	uxth	r1, r3
 800fca6:	230c      	movs	r3, #12
 800fca8:	18fb      	adds	r3, r7, r3
 800fcaa:	0052      	lsls	r2, r2, #1
 800fcac:	52d1      	strh	r1, [r2, r3]
	for (uint8_t varIndex = 1; varIndex <= 3; varIndex++) {
 800fcae:	183b      	adds	r3, r7, r0
 800fcb0:	781a      	ldrb	r2, [r3, #0]
 800fcb2:	183b      	adds	r3, r7, r0
 800fcb4:	3201      	adds	r2, #1
 800fcb6:	701a      	strb	r2, [r3, #0]
 800fcb8:	2317      	movs	r3, #23
 800fcba:	18fb      	adds	r3, r7, r3
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d9ea      	bls.n	800fc98 <main+0xb0>
	}

	HAL_FLASH_Unlock();
 800fcc2:	f7f4 fe91 	bl	80049e8 <HAL_FLASH_Unlock>

	uint8_t flashStatus = EE_Init(EE_CONDITIONAL_ERASE);
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	f7f9 ffee 	bl	8009ca8 <EE_Init>
 800fccc:	0003      	movs	r3, r0
 800fcce:	001a      	movs	r2, r3
 800fcd0:	2416      	movs	r4, #22
 800fcd2:	193b      	adds	r3, r7, r4
 800fcd4:	701a      	strb	r2, [r3, #0]

	if(flashStatus == EE_WRITE_ERROR){
 800fcd6:	193b      	adds	r3, r7, r4
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d109      	bne.n	800fcf2 <main+0x10a>
		EE_Format(EE_CONDITIONAL_ERASE);
 800fcde:	2001      	movs	r0, #1
 800fce0:	f7fa fd8a 	bl	800a7f8 <EE_Format>
		flashStatus = EE_Init(EE_CONDITIONAL_ERASE);
 800fce4:	2001      	movs	r0, #1
 800fce6:	f7f9 ffdf 	bl	8009ca8 <EE_Init>
 800fcea:	0003      	movs	r3, r0
 800fcec:	001a      	movs	r2, r3
 800fcee:	193b      	adds	r3, r7, r4
 800fcf0:	701a      	strb	r2, [r3, #0]
	}

	if (flashStatus != EE_OK) {
 800fcf2:	2316      	movs	r3, #22
 800fcf4:	18fb      	adds	r3, r7, r3
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <main+0x118>
		Error_Handler();
 800fcfc:	f000 fcea 	bl	80106d4 <Error_Handler>
	}

	for (uint8_t i = 0; i < 3; i++) {
 800fd00:	2315      	movs	r3, #21
 800fd02:	18fb      	adds	r3, r7, r3
 800fd04:	2200      	movs	r2, #0
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	e018      	b.n	800fd3c <main+0x154>
		if(EE_ReadVariable16bits(virtualAdress[i], &timeBackup[i])!= EE_OK){
 800fd0a:	2115      	movs	r1, #21
 800fd0c:	187b      	adds	r3, r7, r1
 800fd0e:	781a      	ldrb	r2, [r3, #0]
 800fd10:	230c      	movs	r3, #12
 800fd12:	18fb      	adds	r3, r7, r3
 800fd14:	0052      	lsls	r2, r2, #1
 800fd16:	5ad0      	ldrh	r0, [r2, r3]
 800fd18:	187b      	adds	r3, r7, r1
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	1d3a      	adds	r2, r7, #4
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	18d3      	adds	r3, r2, r3
 800fd22:	0019      	movs	r1, r3
 800fd24:	f7fa fe12 	bl	800a94c <EE_ReadVariable16bits>
 800fd28:	1e03      	subs	r3, r0, #0
 800fd2a:	d001      	beq.n	800fd30 <main+0x148>
			Error_Handler();
 800fd2c:	f000 fcd2 	bl	80106d4 <Error_Handler>
	for (uint8_t i = 0; i < 3; i++) {
 800fd30:	2115      	movs	r1, #21
 800fd32:	187b      	adds	r3, r7, r1
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	187b      	adds	r3, r7, r1
 800fd38:	3201      	adds	r2, #1
 800fd3a:	701a      	strb	r2, [r3, #0]
 800fd3c:	2315      	movs	r3, #21
 800fd3e:	18fb      	adds	r3, r7, r3
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d9e1      	bls.n	800fd0a <main+0x122>
		}
	}

	HAL_FLASH_Lock();
 800fd46:	f7f4 fe73 	bl	8004a30 <HAL_FLASH_Lock>

	actual.year = (uint8_t) (timeBackup[0] >> 8);
 800fd4a:	1d3b      	adds	r3, r7, #4
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	0a1b      	lsrs	r3, r3, #8
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	b25a      	sxtb	r2, r3
 800fd54:	4b87      	ldr	r3, [pc, #540]	; (800ff74 <main+0x38c>)
 800fd56:	701a      	strb	r2, [r3, #0]
	actual.month = (uint8_t) (timeBackup[0]);
 800fd58:	1d3b      	adds	r3, r7, #4
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	b25a      	sxtb	r2, r3
 800fd5e:	4b85      	ldr	r3, [pc, #532]	; (800ff74 <main+0x38c>)
 800fd60:	705a      	strb	r2, [r3, #1]

	actual.day = (uint8_t) (timeBackup[1] >> 8);
 800fd62:	1d3b      	adds	r3, r7, #4
 800fd64:	885b      	ldrh	r3, [r3, #2]
 800fd66:	0a1b      	lsrs	r3, r3, #8
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	b25a      	sxtb	r2, r3
 800fd6c:	4b81      	ldr	r3, [pc, #516]	; (800ff74 <main+0x38c>)
 800fd6e:	709a      	strb	r2, [r3, #2]
	actual.hour = (uint8_t) (timeBackup[1]);
 800fd70:	1d3b      	adds	r3, r7, #4
 800fd72:	885b      	ldrh	r3, [r3, #2]
 800fd74:	b25a      	sxtb	r2, r3
 800fd76:	4b7f      	ldr	r3, [pc, #508]	; (800ff74 <main+0x38c>)
 800fd78:	70da      	strb	r2, [r3, #3]

	actual.minute = (uint8_t) (timeBackup[2] >> 8);
 800fd7a:	1d3b      	adds	r3, r7, #4
 800fd7c:	889b      	ldrh	r3, [r3, #4]
 800fd7e:	0a1b      	lsrs	r3, r3, #8
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	b25a      	sxtb	r2, r3
 800fd84:	4b7b      	ldr	r3, [pc, #492]	; (800ff74 <main+0x38c>)
 800fd86:	711a      	strb	r2, [r3, #4]
	actual.second = (uint8_t) (timeBackup[2]);
 800fd88:	1d3b      	adds	r3, r7, #4
 800fd8a:	889b      	ldrh	r3, [r3, #4]
 800fd8c:	b25a      	sxtb	r2, r3
 800fd8e:	4b79      	ldr	r3, [pc, #484]	; (800ff74 <main+0x38c>)
 800fd90:	715a      	strb	r2, [r3, #5]

	if (actual.year > 100)
 800fd92:	4b78      	ldr	r3, [pc, #480]	; (800ff74 <main+0x38c>)
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	b25b      	sxtb	r3, r3
 800fd98:	2b64      	cmp	r3, #100	; 0x64
 800fd9a:	dd02      	ble.n	800fda2 <main+0x1ba>
		actual.year = 20;
 800fd9c:	4b75      	ldr	r3, [pc, #468]	; (800ff74 <main+0x38c>)
 800fd9e:	2214      	movs	r2, #20
 800fda0:	701a      	strb	r2, [r3, #0]
	if (actual.month > 12)
 800fda2:	4b74      	ldr	r3, [pc, #464]	; (800ff74 <main+0x38c>)
 800fda4:	785b      	ldrb	r3, [r3, #1]
 800fda6:	b25b      	sxtb	r3, r3
 800fda8:	2b0c      	cmp	r3, #12
 800fdaa:	dd02      	ble.n	800fdb2 <main+0x1ca>
		actual.month = 4;
 800fdac:	4b71      	ldr	r3, [pc, #452]	; (800ff74 <main+0x38c>)
 800fdae:	2204      	movs	r2, #4
 800fdb0:	705a      	strb	r2, [r3, #1]
	if (actual.day > 31)
 800fdb2:	4b70      	ldr	r3, [pc, #448]	; (800ff74 <main+0x38c>)
 800fdb4:	789b      	ldrb	r3, [r3, #2]
 800fdb6:	b25b      	sxtb	r3, r3
 800fdb8:	2b1f      	cmp	r3, #31
 800fdba:	dd02      	ble.n	800fdc2 <main+0x1da>
		actual.day = 20;
 800fdbc:	4b6d      	ldr	r3, [pc, #436]	; (800ff74 <main+0x38c>)
 800fdbe:	2214      	movs	r2, #20
 800fdc0:	709a      	strb	r2, [r3, #2]
	if (actual.hour > 24)
 800fdc2:	4b6c      	ldr	r3, [pc, #432]	; (800ff74 <main+0x38c>)
 800fdc4:	78db      	ldrb	r3, [r3, #3]
 800fdc6:	b25b      	sxtb	r3, r3
 800fdc8:	2b18      	cmp	r3, #24
 800fdca:	dd02      	ble.n	800fdd2 <main+0x1ea>
		actual.hour = 10;
 800fdcc:	4b69      	ldr	r3, [pc, #420]	; (800ff74 <main+0x38c>)
 800fdce:	220a      	movs	r2, #10
 800fdd0:	70da      	strb	r2, [r3, #3]
	if (actual.minute > 59)
 800fdd2:	4b68      	ldr	r3, [pc, #416]	; (800ff74 <main+0x38c>)
 800fdd4:	791b      	ldrb	r3, [r3, #4]
 800fdd6:	b25b      	sxtb	r3, r3
 800fdd8:	2b3b      	cmp	r3, #59	; 0x3b
 800fdda:	dd02      	ble.n	800fde2 <main+0x1fa>
		actual.minute = 0;
 800fddc:	4b65      	ldr	r3, [pc, #404]	; (800ff74 <main+0x38c>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	711a      	strb	r2, [r3, #4]
	if (actual.second > 59)
 800fde2:	4b64      	ldr	r3, [pc, #400]	; (800ff74 <main+0x38c>)
 800fde4:	795b      	ldrb	r3, [r3, #5]
 800fde6:	b25b      	sxtb	r3, r3
 800fde8:	2b3b      	cmp	r3, #59	; 0x3b
 800fdea:	dd02      	ble.n	800fdf2 <main+0x20a>
		actual.second = 0;
 800fdec:	4b61      	ldr	r3, [pc, #388]	; (800ff74 <main+0x38c>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	715a      	strb	r2, [r3, #5]

	rtcSetTime();
 800fdf2:	f000 fed9 	bl	8010ba8 <rtcSetTime>

	while (1) {

		//									MAIN LOOP

		if (flagClockConfig == 1) {
 800fdf6:	4b5d      	ldr	r3, [pc, #372]	; (800ff6c <main+0x384>)
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d104      	bne.n	800fe0a <main+0x222>
			SystemClock_Config();
 800fe00:	f000 f914 	bl	801002c <SystemClock_Config>
			flagClockConfig = 0;
 800fe04:	4b59      	ldr	r3, [pc, #356]	; (800ff6c <main+0x384>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	701a      	strb	r2, [r3, #0]
		}

		//									SENSING SECTION
		sensingRead();
 800fe0a:	f001 f887 	bl	8010f1c <sensingRead>

		//									RTC SECTION
		rtcGetTime();
 800fe0e:	f000 fc7d 	bl	801070c <rtcGetTime>


		//									FLASH BACKUP SECTION
		if (flashWriteFlag == 1) {
 800fe12:	4b57      	ldr	r3, [pc, #348]	; (800ff70 <main+0x388>)
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d171      	bne.n	800fefe <main+0x316>

			timeBackup[0] = (((uint16_t) actual.year) << 8) | actual.month;
 800fe1a:	4b56      	ldr	r3, [pc, #344]	; (800ff74 <main+0x38c>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	b25b      	sxtb	r3, r3
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	021b      	lsls	r3, r3, #8
 800fe24:	b21a      	sxth	r2, r3
 800fe26:	4b53      	ldr	r3, [pc, #332]	; (800ff74 <main+0x38c>)
 800fe28:	785b      	ldrb	r3, [r3, #1]
 800fe2a:	b25b      	sxtb	r3, r3
 800fe2c:	b21b      	sxth	r3, r3
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	b21b      	sxth	r3, r3
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	1d3b      	adds	r3, r7, #4
 800fe36:	801a      	strh	r2, [r3, #0]
			timeBackup[1] = (((uint16_t) actual.day) << 8) | actual.hour;
 800fe38:	4b4e      	ldr	r3, [pc, #312]	; (800ff74 <main+0x38c>)
 800fe3a:	789b      	ldrb	r3, [r3, #2]
 800fe3c:	b25b      	sxtb	r3, r3
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	021b      	lsls	r3, r3, #8
 800fe42:	b21a      	sxth	r2, r3
 800fe44:	4b4b      	ldr	r3, [pc, #300]	; (800ff74 <main+0x38c>)
 800fe46:	78db      	ldrb	r3, [r3, #3]
 800fe48:	b25b      	sxtb	r3, r3
 800fe4a:	b21b      	sxth	r3, r3
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	b21b      	sxth	r3, r3
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	1d3b      	adds	r3, r7, #4
 800fe54:	805a      	strh	r2, [r3, #2]
			timeBackup[2] = (((uint16_t) actual.minute) << 8)
 800fe56:	4b47      	ldr	r3, [pc, #284]	; (800ff74 <main+0x38c>)
 800fe58:	791b      	ldrb	r3, [r3, #4]
 800fe5a:	b25b      	sxtb	r3, r3
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	021b      	lsls	r3, r3, #8
					| actual.second;
 800fe60:	b21a      	sxth	r2, r3
 800fe62:	4b44      	ldr	r3, [pc, #272]	; (800ff74 <main+0x38c>)
 800fe64:	795b      	ldrb	r3, [r3, #5]
 800fe66:	b25b      	sxtb	r3, r3
 800fe68:	b21b      	sxth	r3, r3
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	b21b      	sxth	r3, r3
 800fe6e:	b29a      	uxth	r2, r3
			timeBackup[2] = (((uint16_t) actual.minute) << 8)
 800fe70:	1d3b      	adds	r3, r7, #4
 800fe72:	809a      	strh	r2, [r3, #4]

			HAL_FLASH_Unlock();
 800fe74:	f7f4 fdb8 	bl	80049e8 <HAL_FLASH_Unlock>

			if (EE_Init(EE_CONDITIONAL_ERASE) != EE_OK) {
 800fe78:	2001      	movs	r0, #1
 800fe7a:	f7f9 ff15 	bl	8009ca8 <EE_Init>
 800fe7e:	1e03      	subs	r3, r0, #0
 800fe80:	d001      	beq.n	800fe86 <main+0x29e>
				Error_Handler();
 800fe82:	f000 fc27 	bl	80106d4 <Error_Handler>
			}

			for (uint8_t i = 0; i < 3; i++) {
 800fe86:	2314      	movs	r3, #20
 800fe88:	18fb      	adds	r3, r7, r3
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
 800fe8e:	e018      	b.n	800fec2 <main+0x2da>
				if(EE_WriteVariable16bits(virtualAdress[i], timeBackup[i])!= EE_OK){
 800fe90:	2114      	movs	r1, #20
 800fe92:	187b      	adds	r3, r7, r1
 800fe94:	781a      	ldrb	r2, [r3, #0]
 800fe96:	230c      	movs	r3, #12
 800fe98:	18fb      	adds	r3, r7, r3
 800fe9a:	0052      	lsls	r2, r2, #1
 800fe9c:	5ad0      	ldrh	r0, [r2, r3]
 800fe9e:	187b      	adds	r3, r7, r1
 800fea0:	781a      	ldrb	r2, [r3, #0]
 800fea2:	1d3b      	adds	r3, r7, #4
 800fea4:	0052      	lsls	r2, r2, #1
 800fea6:	5ad3      	ldrh	r3, [r2, r3]
 800fea8:	0019      	movs	r1, r3
 800feaa:	f7fa fd7f 	bl	800a9ac <EE_WriteVariable16bits>
 800feae:	1e03      	subs	r3, r0, #0
 800feb0:	d001      	beq.n	800feb6 <main+0x2ce>
					Error_Handler();
 800feb2:	f000 fc0f 	bl	80106d4 <Error_Handler>
			for (uint8_t i = 0; i < 3; i++) {
 800feb6:	2114      	movs	r1, #20
 800feb8:	187b      	adds	r3, r7, r1
 800feba:	781a      	ldrb	r2, [r3, #0]
 800febc:	187b      	adds	r3, r7, r1
 800febe:	3201      	adds	r2, #1
 800fec0:	701a      	strb	r2, [r3, #0]
 800fec2:	2314      	movs	r3, #20
 800fec4:	18fb      	adds	r3, r7, r3
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d9e1      	bls.n	800fe90 <main+0x2a8>
				}

			}

			HAL_FLASH_Lock();
 800fecc:	f7f4 fdb0 	bl	8004a30 <HAL_FLASH_Lock>

			flashWriteFlag = 0;
 800fed0:	4b27      	ldr	r3, [pc, #156]	; (800ff70 <main+0x388>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	701a      	strb	r2, [r3, #0]
		}

		//									BATTERY SECURE SECTION

		while (flagBatteryLow) {
 800fed6:	e012      	b.n	800fefe <main+0x316>

			if (!flagBatteryWarningPrinted) {
 800fed8:	4b27      	ldr	r3, [pc, #156]	; (800ff78 <main+0x390>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d107      	bne.n	800fef2 <main+0x30a>
				interfaceDrawBatteryWarning();
 800fee2:	f7ff fdf9 	bl	800fad8 <interfaceDrawBatteryWarning>
				mode = MODE_NORMAL;
 800fee6:	4b25      	ldr	r3, [pc, #148]	; (800ff7c <main+0x394>)
 800fee8:	2200      	movs	r2, #0
 800feea:	701a      	strb	r2, [r3, #0]
				flagBatteryWarningPrinted = 1;
 800feec:	4b22      	ldr	r3, [pc, #136]	; (800ff78 <main+0x390>)
 800feee:	2201      	movs	r2, #1
 800fef0:	701a      	strb	r2, [r3, #0]
			}

			onSleep();
 800fef2:	f000 fbc7 	bl	8010684 <onSleep>
			onWakeUp();
 800fef6:	f000 fbdb 	bl	80106b0 <onWakeUp>

			sensingRead();
 800fefa:	f001 f80f 	bl	8010f1c <sensingRead>
		while (flagBatteryLow) {
 800fefe:	4b18      	ldr	r3, [pc, #96]	; (800ff60 <main+0x378>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1e7      	bne.n	800fed8 <main+0x2f0>
		}

		//									DISPLAY REFRESH SECTION
		if (interfaceUpdateMode == INTERFACE_UPDATE_FULL) {	//switch to partial if full was selected
 800ff08:	4b1d      	ldr	r3, [pc, #116]	; (800ff80 <main+0x398>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <main+0x330>
			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
 800ff12:	2001      	movs	r0, #1
 800ff14:	f7fd f8a6 	bl	800d064 <interfaceUpdate>
		}
		if (flagInterfaceFullUpdate == 1) {	//switch to full if flag are active. Flag can be set via RESET button
 800ff18:	4b1a      	ldr	r3, [pc, #104]	; (800ff84 <main+0x39c>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d105      	bne.n	800ff2e <main+0x346>
			interfaceUpdate(INTERFACE_UPDATE_FULL);
 800ff22:	2000      	movs	r0, #0
 800ff24:	f7fd f89e 	bl	800d064 <interfaceUpdate>
			flagInterfaceFullUpdate = 0;
 800ff28:	4b16      	ldr	r3, [pc, #88]	; (800ff84 <main+0x39c>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	701a      	strb	r2, [r3, #0]
		}

		//									NORMAL MODE
		if (flagSettings == FLAG_SETTINGS_OFF && !flagBatteryLow) {
 800ff2e:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <main+0x3a0>)
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d129      	bne.n	800ff8c <main+0x3a4>
 800ff38:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <main+0x378>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d124      	bne.n	800ff8c <main+0x3a4>

			interfaceClear();	//clear framebuffer
 800ff42:	f7fd f8dd 	bl	800d100 <interfaceClear>
			interfaceDrawLayer(1);
 800ff46:	2001      	movs	r0, #1
 800ff48:	f7fd f8e8 	bl	800d11c <interfaceDrawLayer>
			interfaceDrawLayer(2);
 800ff4c:	2002      	movs	r0, #2
 800ff4e:	f7fd f8e5 	bl	800d11c <interfaceDrawLayer>
			interfaceDrawLayer(3);
 800ff52:	2003      	movs	r0, #3
 800ff54:	f7fd f8e2 	bl	800d11c <interfaceDrawLayer>
			interfaceWrite();	//burn framebuffer
 800ff58:	f7fd f8b4 	bl	800d0c4 <interfaceWrite>
 800ff5c:	e02a      	b.n	800ffb4 <main+0x3cc>
 800ff5e:	46c0      	nop			; (mov r8, r8)
 800ff60:	200006ee 	.word	0x200006ee
 800ff64:	200006f5 	.word	0x200006f5
 800ff68:	200006d8 	.word	0x200006d8
 800ff6c:	20000618 	.word	0x20000618
 800ff70:	20000643 	.word	0x20000643
 800ff74:	200006ac 	.word	0x200006ac
 800ff78:	200001fe 	.word	0x200001fe
 800ff7c:	200004c3 	.word	0x200004c3
 800ff80:	20000638 	.word	0x20000638
 800ff84:	2000069e 	.word	0x2000069e
 800ff88:	2000058e 	.word	0x2000058e

			//								SETTINGS MODE

		} else if (flagSettings == FLAG_SETTINGS_ON && !flagBatteryLow) {
 800ff8c:	4b20      	ldr	r3, [pc, #128]	; (8010010 <main+0x428>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d10e      	bne.n	800ffb4 <main+0x3cc>
 800ff96:	4b1f      	ldr	r3, [pc, #124]	; (8010014 <main+0x42c>)
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d109      	bne.n	800ffb4 <main+0x3cc>

			interfaceClear();	//clear framebuffer
 800ffa0:	f7fd f8ae 	bl	800d100 <interfaceClear>
			settingsDrawSubs(); //draw settings interface
 800ffa4:	f002 fa98 	bl	80124d8 <settingsDrawSubs>
			settingsDrawData();
 800ffa8:	f001 ff78 	bl	8011e9c <settingsDrawData>
			settingsDrawPointer();
 800ffac:	f002 fb04 	bl	80125b8 <settingsDrawPointer>
			interfaceWrite();	//burn framebuffer
 800ffb0:	f7fd f888 	bl	800d0c4 <interfaceWrite>
		}

		//									LOW POWER SECTION-SLEEP

		//conditions for sleep mode
		if ((flagSettings == FLAG_SETTINGS_OFF //settings off
 800ffb4:	4b16      	ldr	r3, [pc, #88]	; (8010010 <main+0x428>)
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d124      	bne.n	8010008 <main+0x420>
		&& flagDontSleep != 1 //dont sleep flag inactive
 800ffbe:	4b16      	ldr	r3, [pc, #88]	; (8010018 <main+0x430>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d01f      	beq.n	8010008 <main+0x420>
		&& HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 1) //reset dont pressed
 800ffc8:	23a0      	movs	r3, #160	; 0xa0
 800ffca:	05db      	lsls	r3, r3, #23
 800ffcc:	2110      	movs	r1, #16
 800ffce:	0018      	movs	r0, r3
 800ffd0:	f7f4 ffc0 	bl	8004f54 <HAL_GPIO_ReadPin>
 800ffd4:	0003      	movs	r3, r0
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d116      	bne.n	8010008 <main+0x420>
		&& !(mode == MODE_CHRONO && chrono.minute < 1) //if chrono counts more than 1 minute
 800ffda:	4b10      	ldr	r3, [pc, #64]	; (801001c <main+0x434>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d104      	bne.n	800ffee <main+0x406>
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	; (8010020 <main+0x438>)
 800ffe6:	791b      	ldrb	r3, [r3, #4]
 800ffe8:	b25b      	sxtb	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dd0c      	ble.n	8010008 <main+0x420>
				&& LPMode == 1 //if low power mode active
 800ffee:	4b0d      	ldr	r3, [pc, #52]	; (8010024 <main+0x43c>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d108      	bne.n	8010008 <main+0x420>
				&& counterForce >= ON_TIME) { //force timer inactive
 800fff6:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <main+0x440>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	2b13      	cmp	r3, #19
 800fffe:	d903      	bls.n	8010008 <main+0x420>

			//to do before sleep mode
			onSleep();
 8010000:	f000 fb40 	bl	8010684 <onSleep>
			//to do after wake up
			onWakeUp();
 8010004:	f000 fb54 	bl	80106b0 <onWakeUp>
		}

		flagDontSleep = 0; // is set via another button, for fast display refresh after pressing
 8010008:	4b03      	ldr	r3, [pc, #12]	; (8010018 <main+0x430>)
 801000a:	2200      	movs	r2, #0
 801000c:	701a      	strb	r2, [r3, #0]
		if (flagClockConfig == 1) {
 801000e:	e6f2      	b.n	800fdf6 <main+0x20e>
 8010010:	2000058e 	.word	0x2000058e
 8010014:	200006ee 	.word	0x200006ee
 8010018:	200006d9 	.word	0x200006d9
 801001c:	200004c3 	.word	0x200004c3
 8010020:	20000444 	.word	0x20000444
 8010024:	20000619 	.word	0x20000619
 8010028:	200006da 	.word	0x200006da

0801002c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 801002c:	b590      	push	{r4, r7, lr}
 801002e:	b093      	sub	sp, #76	; 0x4c
 8010030:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8010032:	2414      	movs	r4, #20
 8010034:	193b      	adds	r3, r7, r4
 8010036:	0018      	movs	r0, r3
 8010038:	2334      	movs	r3, #52	; 0x34
 801003a:	001a      	movs	r2, r3
 801003c:	2100      	movs	r1, #0
 801003e:	f002 ffdf 	bl	8013000 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8010042:	1d3b      	adds	r3, r7, #4
 8010044:	0018      	movs	r0, r3
 8010046:	2310      	movs	r3, #16
 8010048:	001a      	movs	r2, r3
 801004a:	2100      	movs	r1, #0
 801004c:	f002 ffd8 	bl	8013000 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010050:	2380      	movs	r3, #128	; 0x80
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	0018      	movs	r0, r3
 8010056:	f7f5 fe13 	bl	8005c80 <HAL_PWREx_ControlVoltageScaling>
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801005a:	f7f5 fdcb 	bl	8005bf4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801005e:	4b26      	ldr	r3, [pc, #152]	; (80100f8 <SystemClock_Config+0xcc>)
 8010060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010062:	4b25      	ldr	r3, [pc, #148]	; (80100f8 <SystemClock_Config+0xcc>)
 8010064:	2118      	movs	r1, #24
 8010066:	438a      	bics	r2, r1
 8010068:	65da      	str	r2, [r3, #92]	; 0x5c
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 801006a:	193b      	adds	r3, r7, r4
 801006c:	2206      	movs	r2, #6
 801006e:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8010070:	193b      	adds	r3, r7, r4
 8010072:	2201      	movs	r2, #1
 8010074:	609a      	str	r2, [r3, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010076:	193b      	adds	r3, r7, r4
 8010078:	2280      	movs	r2, #128	; 0x80
 801007a:	0052      	lsls	r2, r2, #1
 801007c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 801007e:	0021      	movs	r1, r4
 8010080:	187b      	adds	r3, r7, r1
 8010082:	2200      	movs	r2, #0
 8010084:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010086:	187b      	adds	r3, r7, r1
 8010088:	2240      	movs	r2, #64	; 0x40
 801008a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801008c:	187b      	adds	r3, r7, r1
 801008e:	2202      	movs	r2, #2
 8010090:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010092:	187b      	adds	r3, r7, r1
 8010094:	2202      	movs	r2, #2
 8010096:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8010098:	187b      	adds	r3, r7, r1
 801009a:	2200      	movs	r2, #0
 801009c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 801009e:	187b      	adds	r3, r7, r1
 80100a0:	2208      	movs	r2, #8
 80100a2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80100a4:	187b      	adds	r3, r7, r1
 80100a6:	2280      	movs	r2, #128	; 0x80
 80100a8:	0292      	lsls	r2, r2, #10
 80100aa:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80100ac:	187b      	adds	r3, r7, r1
 80100ae:	2280      	movs	r2, #128	; 0x80
 80100b0:	0592      	lsls	r2, r2, #22
 80100b2:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	0018      	movs	r0, r3
 80100b8:	f7f5 fe22 	bl	8005d00 <HAL_RCC_OscConfig>
 80100bc:	1e03      	subs	r3, r0, #0
 80100be:	d001      	beq.n	80100c4 <SystemClock_Config+0x98>
		Error_Handler();
 80100c0:	f000 fb08 	bl	80106d4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80100c4:	1d3b      	adds	r3, r7, #4
 80100c6:	2207      	movs	r2, #7
 80100c8:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80100ca:	1d3b      	adds	r3, r7, #4
 80100cc:	2202      	movs	r2, #2
 80100ce:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80100d0:	1d3b      	adds	r3, r7, #4
 80100d2:	2200      	movs	r2, #0
 80100d4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80100d6:	1d3b      	adds	r3, r7, #4
 80100d8:	2200      	movs	r2, #0
 80100da:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80100dc:	1d3b      	adds	r3, r7, #4
 80100de:	2102      	movs	r1, #2
 80100e0:	0018      	movs	r0, r3
 80100e2:	f7f6 f923 	bl	800632c <HAL_RCC_ClockConfig>
 80100e6:	1e03      	subs	r3, r0, #0
 80100e8:	d001      	beq.n	80100ee <SystemClock_Config+0xc2>
		Error_Handler();
 80100ea:	f000 faf3 	bl	80106d4 <Error_Handler>
	}
}
 80100ee:	46c0      	nop			; (mov r8, r8)
 80100f0:	46bd      	mov	sp, r7
 80100f2:	b013      	add	sp, #76	; 0x4c
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	46c0      	nop			; (mov r8, r8)
 80100f8:	40021000 	.word	0x40021000

080100fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8010102:	1d3b      	adds	r3, r7, #4
 8010104:	0018      	movs	r0, r3
 8010106:	230c      	movs	r3, #12
 8010108:	001a      	movs	r2, r3
 801010a:	2100      	movs	r1, #0
 801010c:	f002 ff78 	bl	8013000 <memset>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8010110:	4b3e      	ldr	r3, [pc, #248]	; (801020c <MX_ADC1_Init+0x110>)
 8010112:	4a3f      	ldr	r2, [pc, #252]	; (8010210 <MX_ADC1_Init+0x114>)
 8010114:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8010116:	4b3d      	ldr	r3, [pc, #244]	; (801020c <MX_ADC1_Init+0x110>)
 8010118:	2280      	movs	r2, #128	; 0x80
 801011a:	05d2      	lsls	r2, r2, #23
 801011c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801011e:	4b3b      	ldr	r3, [pc, #236]	; (801020c <MX_ADC1_Init+0x110>)
 8010120:	2200      	movs	r2, #0
 8010122:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010124:	4b39      	ldr	r3, [pc, #228]	; (801020c <MX_ADC1_Init+0x110>)
 8010126:	2200      	movs	r2, #0
 8010128:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801012a:	4b38      	ldr	r3, [pc, #224]	; (801020c <MX_ADC1_Init+0x110>)
 801012c:	2280      	movs	r2, #128	; 0x80
 801012e:	0392      	lsls	r2, r2, #14
 8010130:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010132:	4b36      	ldr	r3, [pc, #216]	; (801020c <MX_ADC1_Init+0x110>)
 8010134:	2208      	movs	r2, #8
 8010136:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8010138:	4b34      	ldr	r3, [pc, #208]	; (801020c <MX_ADC1_Init+0x110>)
 801013a:	2200      	movs	r2, #0
 801013c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 801013e:	4b33      	ldr	r3, [pc, #204]	; (801020c <MX_ADC1_Init+0x110>)
 8010140:	2200      	movs	r2, #0
 8010142:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8010144:	4b31      	ldr	r3, [pc, #196]	; (801020c <MX_ADC1_Init+0x110>)
 8010146:	2201      	movs	r2, #1
 8010148:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 3;
 801014a:	4b30      	ldr	r3, [pc, #192]	; (801020c <MX_ADC1_Init+0x110>)
 801014c:	2203      	movs	r2, #3
 801014e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010150:	4b2e      	ldr	r3, [pc, #184]	; (801020c <MX_ADC1_Init+0x110>)
 8010152:	2220      	movs	r2, #32
 8010154:	2100      	movs	r1, #0
 8010156:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010158:	4b2c      	ldr	r3, [pc, #176]	; (801020c <MX_ADC1_Init+0x110>)
 801015a:	2200      	movs	r2, #0
 801015c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801015e:	4b2b      	ldr	r3, [pc, #172]	; (801020c <MX_ADC1_Init+0x110>)
 8010160:	2200      	movs	r2, #0
 8010162:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8010164:	4b29      	ldr	r3, [pc, #164]	; (801020c <MX_ADC1_Init+0x110>)
 8010166:	222c      	movs	r2, #44	; 0x2c
 8010168:	2100      	movs	r1, #0
 801016a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801016c:	4b27      	ldr	r3, [pc, #156]	; (801020c <MX_ADC1_Init+0x110>)
 801016e:	2280      	movs	r2, #128	; 0x80
 8010170:	0152      	lsls	r2, r2, #5
 8010172:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8010174:	4b25      	ldr	r3, [pc, #148]	; (801020c <MX_ADC1_Init+0x110>)
 8010176:	2204      	movs	r2, #4
 8010178:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 801017a:	4b24      	ldr	r3, [pc, #144]	; (801020c <MX_ADC1_Init+0x110>)
 801017c:	2204      	movs	r2, #4
 801017e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8010180:	4b22      	ldr	r3, [pc, #136]	; (801020c <MX_ADC1_Init+0x110>)
 8010182:	223c      	movs	r2, #60	; 0x3c
 8010184:	2100      	movs	r1, #0
 8010186:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8010188:	4b20      	ldr	r3, [pc, #128]	; (801020c <MX_ADC1_Init+0x110>)
 801018a:	2200      	movs	r2, #0
 801018c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 801018e:	4b1f      	ldr	r3, [pc, #124]	; (801020c <MX_ADC1_Init+0x110>)
 8010190:	0018      	movs	r0, r3
 8010192:	f7f3 fb3b 	bl	800380c <HAL_ADC_Init>
 8010196:	1e03      	subs	r3, r0, #0
 8010198:	d001      	beq.n	801019e <MX_ADC1_Init+0xa2>
		Error_Handler();
 801019a:	f000 fa9b 	bl	80106d4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 801019e:	1d3b      	adds	r3, r7, #4
 80101a0:	4a1c      	ldr	r2, [pc, #112]	; (8010214 <MX_ADC1_Init+0x118>)
 80101a2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80101a4:	1d3b      	adds	r3, r7, #4
 80101a6:	2200      	movs	r2, #0
 80101a8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80101aa:	1d3b      	adds	r3, r7, #4
 80101ac:	2200      	movs	r2, #0
 80101ae:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80101b0:	1d3a      	adds	r2, r7, #4
 80101b2:	4b16      	ldr	r3, [pc, #88]	; (801020c <MX_ADC1_Init+0x110>)
 80101b4:	0011      	movs	r1, r2
 80101b6:	0018      	movs	r0, r3
 80101b8:	f7f3 fdac 	bl	8003d14 <HAL_ADC_ConfigChannel>
 80101bc:	1e03      	subs	r3, r0, #0
 80101be:	d001      	beq.n	80101c4 <MX_ADC1_Init+0xc8>
		Error_Handler();
 80101c0:	f000 fa88 	bl	80106d4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80101c4:	1d3b      	adds	r3, r7, #4
 80101c6:	2201      	movs	r2, #1
 80101c8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80101ca:	1d3b      	adds	r3, r7, #4
 80101cc:	2204      	movs	r2, #4
 80101ce:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80101d0:	1d3a      	adds	r2, r7, #4
 80101d2:	4b0e      	ldr	r3, [pc, #56]	; (801020c <MX_ADC1_Init+0x110>)
 80101d4:	0011      	movs	r1, r2
 80101d6:	0018      	movs	r0, r3
 80101d8:	f7f3 fd9c 	bl	8003d14 <HAL_ADC_ConfigChannel>
 80101dc:	1e03      	subs	r3, r0, #0
 80101de:	d001      	beq.n	80101e4 <MX_ADC1_Init+0xe8>
		Error_Handler();
 80101e0:	f000 fa78 	bl	80106d4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80101e4:	1d3b      	adds	r3, r7, #4
 80101e6:	4a0c      	ldr	r2, [pc, #48]	; (8010218 <MX_ADC1_Init+0x11c>)
 80101e8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80101ea:	1d3b      	adds	r3, r7, #4
 80101ec:	2208      	movs	r2, #8
 80101ee:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80101f0:	1d3a      	adds	r2, r7, #4
 80101f2:	4b06      	ldr	r3, [pc, #24]	; (801020c <MX_ADC1_Init+0x110>)
 80101f4:	0011      	movs	r1, r2
 80101f6:	0018      	movs	r0, r3
 80101f8:	f7f3 fd8c 	bl	8003d14 <HAL_ADC_ConfigChannel>
 80101fc:	1e03      	subs	r3, r0, #0
 80101fe:	d001      	beq.n	8010204 <MX_ADC1_Init+0x108>
		Error_Handler();
 8010200:	f000 fa68 	bl	80106d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8010204:	46c0      	nop			; (mov r8, r8)
 8010206:	46bd      	mov	sp, r7
 8010208:	b004      	add	sp, #16
 801020a:	bd80      	pop	{r7, pc}
 801020c:	20000454 	.word	0x20000454
 8010210:	40012400 	.word	0x40012400
 8010214:	04000002 	.word	0x04000002
 8010218:	14000020 	.word	0x14000020

0801021c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 801021c:	b580      	push	{r7, lr}
 801021e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CRC_Init 0 */

	/* USER CODE END CRC_Init 0 */

	/* Peripheral clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8010220:	2380      	movs	r3, #128	; 0x80
 8010222:	015b      	lsls	r3, r3, #5
 8010224:	0018      	movs	r0, r3
 8010226:	f7ff fcc9 	bl	800fbbc <LL_AHB1_GRP1_EnableClock>

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 801022a:	4b0f      	ldr	r3, [pc, #60]	; (8010268 <MX_CRC_Init+0x4c>)
 801022c:	2100      	movs	r1, #0
 801022e:	0018      	movs	r0, r3
 8010230:	f7ff fc88 	bl	800fb44 <LL_CRC_SetInputDataReverseMode>
	LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 8010234:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <MX_CRC_Init+0x4c>)
 8010236:	2100      	movs	r1, #0
 8010238:	0018      	movs	r0, r3
 801023a:	f7ff fc95 	bl	800fb68 <LL_CRC_SetOutputDataReverseMode>
	LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 801023e:	4a0b      	ldr	r2, [pc, #44]	; (801026c <MX_CRC_Init+0x50>)
 8010240:	4b09      	ldr	r3, [pc, #36]	; (8010268 <MX_CRC_Init+0x4c>)
 8010242:	0011      	movs	r1, r2
 8010244:	0018      	movs	r0, r3
 8010246:	f7ff fcad 	bl	800fba4 <LL_CRC_SetPolynomialCoef>
	LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 801024a:	4b07      	ldr	r3, [pc, #28]	; (8010268 <MX_CRC_Init+0x4c>)
 801024c:	2100      	movs	r1, #0
 801024e:	0018      	movs	r0, r3
 8010250:	f7ff fc66 	bl	800fb20 <LL_CRC_SetPolynomialSize>
	LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8010254:	2301      	movs	r3, #1
 8010256:	425b      	negs	r3, r3
 8010258:	4a03      	ldr	r2, [pc, #12]	; (8010268 <MX_CRC_Init+0x4c>)
 801025a:	0019      	movs	r1, r3
 801025c:	0010      	movs	r0, r2
 801025e:	f7ff fc95 	bl	800fb8c <LL_CRC_SetInitialData>
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8010262:	46c0      	nop			; (mov r8, r8)
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	40023000 	.word	0x40023000
 801026c:	04c11db7 	.word	0x04c11db7

08010270 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8010270:	b580      	push	{r7, lr}
 8010272:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8010274:	4b1b      	ldr	r3, [pc, #108]	; (80102e4 <MX_I2C1_Init+0x74>)
 8010276:	4a1c      	ldr	r2, [pc, #112]	; (80102e8 <MX_I2C1_Init+0x78>)
 8010278:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 801027a:	4b1a      	ldr	r3, [pc, #104]	; (80102e4 <MX_I2C1_Init+0x74>)
 801027c:	4a1b      	ldr	r2, [pc, #108]	; (80102ec <MX_I2C1_Init+0x7c>)
 801027e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8010280:	4b18      	ldr	r3, [pc, #96]	; (80102e4 <MX_I2C1_Init+0x74>)
 8010282:	2200      	movs	r2, #0
 8010284:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010286:	4b17      	ldr	r3, [pc, #92]	; (80102e4 <MX_I2C1_Init+0x74>)
 8010288:	2201      	movs	r2, #1
 801028a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801028c:	4b15      	ldr	r3, [pc, #84]	; (80102e4 <MX_I2C1_Init+0x74>)
 801028e:	2200      	movs	r2, #0
 8010290:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8010292:	4b14      	ldr	r3, [pc, #80]	; (80102e4 <MX_I2C1_Init+0x74>)
 8010294:	2200      	movs	r2, #0
 8010296:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010298:	4b12      	ldr	r3, [pc, #72]	; (80102e4 <MX_I2C1_Init+0x74>)
 801029a:	2200      	movs	r2, #0
 801029c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801029e:	4b11      	ldr	r3, [pc, #68]	; (80102e4 <MX_I2C1_Init+0x74>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80102a4:	4b0f      	ldr	r3, [pc, #60]	; (80102e4 <MX_I2C1_Init+0x74>)
 80102a6:	2200      	movs	r2, #0
 80102a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80102aa:	4b0e      	ldr	r3, [pc, #56]	; (80102e4 <MX_I2C1_Init+0x74>)
 80102ac:	0018      	movs	r0, r3
 80102ae:	f7f4 febf 	bl	8005030 <HAL_I2C_Init>
 80102b2:	1e03      	subs	r3, r0, #0
 80102b4:	d001      	beq.n	80102ba <MX_I2C1_Init+0x4a>
		Error_Handler();
 80102b6:	f000 fa0d 	bl	80106d4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80102ba:	4b0a      	ldr	r3, [pc, #40]	; (80102e4 <MX_I2C1_Init+0x74>)
 80102bc:	2100      	movs	r1, #0
 80102be:	0018      	movs	r0, r3
 80102c0:	f7f5 fc00 	bl	8005ac4 <HAL_I2CEx_ConfigAnalogFilter>
 80102c4:	1e03      	subs	r3, r0, #0
 80102c6:	d001      	beq.n	80102cc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80102c8:	f000 fa04 	bl	80106d4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80102cc:	4b05      	ldr	r3, [pc, #20]	; (80102e4 <MX_I2C1_Init+0x74>)
 80102ce:	2100      	movs	r1, #0
 80102d0:	0018      	movs	r0, r3
 80102d2:	f7f5 fc43 	bl	8005b5c <HAL_I2CEx_ConfigDigitalFilter>
 80102d6:	1e03      	subs	r3, r0, #0
 80102d8:	d001      	beq.n	80102de <MX_I2C1_Init+0x6e>
		Error_Handler();
 80102da:	f000 f9fb 	bl	80106d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80102de:	46c0      	nop			; (mov r8, r8)
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	2000021c 	.word	0x2000021c
 80102e8:	40005400 	.word	0x40005400
 80102ec:	00303d5b 	.word	0x00303d5b

080102f0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b086      	sub	sp, #24
 80102f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80102f6:	1d3b      	adds	r3, r7, #4
 80102f8:	0018      	movs	r0, r3
 80102fa:	2314      	movs	r3, #20
 80102fc:	001a      	movs	r2, r3
 80102fe:	2100      	movs	r1, #0
 8010300:	f002 fe7e 	bl	8013000 <memset>
	RTC_DateTypeDef sDate = { 0 };
 8010304:	003b      	movs	r3, r7
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801030a:	4b32      	ldr	r3, [pc, #200]	; (80103d4 <MX_RTC_Init+0xe4>)
 801030c:	4a32      	ldr	r2, [pc, #200]	; (80103d8 <MX_RTC_Init+0xe8>)
 801030e:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010310:	4b30      	ldr	r3, [pc, #192]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010312:	2200      	movs	r2, #0
 8010314:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8010316:	4b2f      	ldr	r3, [pc, #188]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010318:	227f      	movs	r2, #127	; 0x7f
 801031a:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 801031c:	4b2d      	ldr	r3, [pc, #180]	; (80103d4 <MX_RTC_Init+0xe4>)
 801031e:	22ff      	movs	r2, #255	; 0xff
 8010320:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010322:	4b2c      	ldr	r3, [pc, #176]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010324:	2200      	movs	r2, #0
 8010326:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010328:	4b2a      	ldr	r3, [pc, #168]	; (80103d4 <MX_RTC_Init+0xe4>)
 801032a:	2200      	movs	r2, #0
 801032c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801032e:	4b29      	ldr	r3, [pc, #164]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010330:	2200      	movs	r2, #0
 8010332:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010334:	4b27      	ldr	r3, [pc, #156]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010336:	2280      	movs	r2, #128	; 0x80
 8010338:	05d2      	lsls	r2, r2, #23
 801033a:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 801033c:	4b25      	ldr	r3, [pc, #148]	; (80103d4 <MX_RTC_Init+0xe4>)
 801033e:	2200      	movs	r2, #0
 8010340:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8010342:	4b24      	ldr	r3, [pc, #144]	; (80103d4 <MX_RTC_Init+0xe4>)
 8010344:	0018      	movs	r0, r3
 8010346:	f7f6 faaf 	bl	80068a8 <HAL_RTC_Init>
 801034a:	1e03      	subs	r3, r0, #0
 801034c:	d001      	beq.n	8010352 <MX_RTC_Init+0x62>
		Error_Handler();
 801034e:	f000 f9c1 	bl	80106d4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 10;
 8010352:	1d3b      	adds	r3, r7, #4
 8010354:	220a      	movs	r2, #10
 8010356:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 10;
 8010358:	1d3b      	adds	r3, r7, #4
 801035a:	220a      	movs	r2, #10
 801035c:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 801035e:	1d3b      	adds	r3, r7, #4
 8010360:	2200      	movs	r2, #0
 8010362:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 8010364:	1d3b      	adds	r3, r7, #4
 8010366:	2200      	movs	r2, #0
 8010368:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801036a:	1d3b      	adds	r3, r7, #4
 801036c:	2200      	movs	r2, #0
 801036e:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010370:	1d3b      	adds	r3, r7, #4
 8010372:	2200      	movs	r2, #0
 8010374:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8010376:	1d39      	adds	r1, r7, #4
 8010378:	4b16      	ldr	r3, [pc, #88]	; (80103d4 <MX_RTC_Init+0xe4>)
 801037a:	2200      	movs	r2, #0
 801037c:	0018      	movs	r0, r3
 801037e:	f7f6 fb29 	bl	80069d4 <HAL_RTC_SetTime>
 8010382:	1e03      	subs	r3, r0, #0
 8010384:	d001      	beq.n	801038a <MX_RTC_Init+0x9a>
		Error_Handler();
 8010386:	f000 f9a5 	bl	80106d4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 801038a:	003b      	movs	r3, r7
 801038c:	2202      	movs	r2, #2
 801038e:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8010390:	003b      	movs	r3, r7
 8010392:	2204      	movs	r2, #4
 8010394:	705a      	strb	r2, [r3, #1]
	sDate.Date = 20;
 8010396:	003b      	movs	r3, r7
 8010398:	2214      	movs	r2, #20
 801039a:	709a      	strb	r2, [r3, #2]
	sDate.Year = 20;
 801039c:	003b      	movs	r3, r7
 801039e:	2214      	movs	r2, #20
 80103a0:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80103a2:	0039      	movs	r1, r7
 80103a4:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <MX_RTC_Init+0xe4>)
 80103a6:	2200      	movs	r2, #0
 80103a8:	0018      	movs	r0, r3
 80103aa:	f7f6 fc17 	bl	8006bdc <HAL_RTC_SetDate>
 80103ae:	1e03      	subs	r3, r0, #0
 80103b0:	d001      	beq.n	80103b6 <MX_RTC_Init+0xc6>
		Error_Handler();
 80103b2:	f000 f98f 	bl	80106d4 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS)
 80103b6:	4b07      	ldr	r3, [pc, #28]	; (80103d4 <MX_RTC_Init+0xe4>)
 80103b8:	2204      	movs	r2, #4
 80103ba:	213c      	movs	r1, #60	; 0x3c
 80103bc:	0018      	movs	r0, r3
 80103be:	f7f6 fde1 	bl	8006f84 <HAL_RTCEx_SetWakeUpTimer_IT>
 80103c2:	1e03      	subs	r3, r0, #0
 80103c4:	d001      	beq.n	80103ca <MX_RTC_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80103c6:	f000 f985 	bl	80106d4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80103ca:	46c0      	nop			; (mov r8, r8)
 80103cc:	46bd      	mov	sp, r7
 80103ce:	b006      	add	sp, #24
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	46c0      	nop			; (mov r8, r8)
 80103d4:	20000770 	.word	0x20000770
 80103d8:	40002800 	.word	0x40002800

080103dc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80103e0:	4b1b      	ldr	r3, [pc, #108]	; (8010450 <MX_SPI1_Init+0x74>)
 80103e2:	4a1c      	ldr	r2, [pc, #112]	; (8010454 <MX_SPI1_Init+0x78>)
 80103e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80103e6:	4b1a      	ldr	r3, [pc, #104]	; (8010450 <MX_SPI1_Init+0x74>)
 80103e8:	2282      	movs	r2, #130	; 0x82
 80103ea:	0052      	lsls	r2, r2, #1
 80103ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80103ee:	4b18      	ldr	r3, [pc, #96]	; (8010450 <MX_SPI1_Init+0x74>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80103f4:	4b16      	ldr	r3, [pc, #88]	; (8010450 <MX_SPI1_Init+0x74>)
 80103f6:	22e0      	movs	r2, #224	; 0xe0
 80103f8:	00d2      	lsls	r2, r2, #3
 80103fa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80103fc:	4b14      	ldr	r3, [pc, #80]	; (8010450 <MX_SPI1_Init+0x74>)
 80103fe:	2200      	movs	r2, #0
 8010400:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010402:	4b13      	ldr	r3, [pc, #76]	; (8010450 <MX_SPI1_Init+0x74>)
 8010404:	2200      	movs	r2, #0
 8010406:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8010408:	4b11      	ldr	r3, [pc, #68]	; (8010450 <MX_SPI1_Init+0x74>)
 801040a:	2280      	movs	r2, #128	; 0x80
 801040c:	0092      	lsls	r2, r2, #2
 801040e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010410:	4b0f      	ldr	r3, [pc, #60]	; (8010450 <MX_SPI1_Init+0x74>)
 8010412:	2218      	movs	r2, #24
 8010414:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010416:	4b0e      	ldr	r3, [pc, #56]	; (8010450 <MX_SPI1_Init+0x74>)
 8010418:	2200      	movs	r2, #0
 801041a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801041c:	4b0c      	ldr	r3, [pc, #48]	; (8010450 <MX_SPI1_Init+0x74>)
 801041e:	2200      	movs	r2, #0
 8010420:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010422:	4b0b      	ldr	r3, [pc, #44]	; (8010450 <MX_SPI1_Init+0x74>)
 8010424:	2200      	movs	r2, #0
 8010426:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8010428:	4b09      	ldr	r3, [pc, #36]	; (8010450 <MX_SPI1_Init+0x74>)
 801042a:	2207      	movs	r2, #7
 801042c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801042e:	4b08      	ldr	r3, [pc, #32]	; (8010450 <MX_SPI1_Init+0x74>)
 8010430:	2200      	movs	r2, #0
 8010432:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010434:	4b06      	ldr	r3, [pc, #24]	; (8010450 <MX_SPI1_Init+0x74>)
 8010436:	2208      	movs	r2, #8
 8010438:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <MX_SPI1_Init+0x74>)
 801043c:	0018      	movs	r0, r3
 801043e:	f7f6 fe61 	bl	8007104 <HAL_SPI_Init>
 8010442:	1e03      	subs	r3, r0, #0
 8010444:	d001      	beq.n	801044a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8010446:	f000 f945 	bl	80106d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 801044a:	46c0      	nop			; (mov r8, r8)
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	2000079c 	.word	0x2000079c
 8010454:	40013000 	.word	0x40013000

08010458 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b088      	sub	sp, #32
 801045c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 801045e:	2310      	movs	r3, #16
 8010460:	18fb      	adds	r3, r7, r3
 8010462:	0018      	movs	r0, r3
 8010464:	2310      	movs	r3, #16
 8010466:	001a      	movs	r2, r3
 8010468:	2100      	movs	r1, #0
 801046a:	f002 fdc9 	bl	8013000 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 801046e:	1d3b      	adds	r3, r7, #4
 8010470:	0018      	movs	r0, r3
 8010472:	230c      	movs	r3, #12
 8010474:	001a      	movs	r2, r3
 8010476:	2100      	movs	r1, #0
 8010478:	f002 fdc2 	bl	8013000 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 801047c:	4b1e      	ldr	r3, [pc, #120]	; (80104f8 <MX_TIM3_Init+0xa0>)
 801047e:	4a1f      	ldr	r2, [pc, #124]	; (80104fc <MX_TIM3_Init+0xa4>)
 8010480:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3199;
 8010482:	4b1d      	ldr	r3, [pc, #116]	; (80104f8 <MX_TIM3_Init+0xa0>)
 8010484:	4a1e      	ldr	r2, [pc, #120]	; (8010500 <MX_TIM3_Init+0xa8>)
 8010486:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010488:	4b1b      	ldr	r3, [pc, #108]	; (80104f8 <MX_TIM3_Init+0xa0>)
 801048a:	2200      	movs	r2, #0
 801048c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 801048e:	4b1a      	ldr	r3, [pc, #104]	; (80104f8 <MX_TIM3_Init+0xa0>)
 8010490:	4a1c      	ldr	r2, [pc, #112]	; (8010504 <MX_TIM3_Init+0xac>)
 8010492:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010494:	4b18      	ldr	r3, [pc, #96]	; (80104f8 <MX_TIM3_Init+0xa0>)
 8010496:	2200      	movs	r2, #0
 8010498:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801049a:	4b17      	ldr	r3, [pc, #92]	; (80104f8 <MX_TIM3_Init+0xa0>)
 801049c:	2200      	movs	r2, #0
 801049e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80104a0:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <MX_TIM3_Init+0xa0>)
 80104a2:	0018      	movs	r0, r3
 80104a4:	f7f7 f9b4 	bl	8007810 <HAL_TIM_Base_Init>
 80104a8:	1e03      	subs	r3, r0, #0
 80104aa:	d001      	beq.n	80104b0 <MX_TIM3_Init+0x58>
		Error_Handler();
 80104ac:	f000 f912 	bl	80106d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80104b0:	2110      	movs	r1, #16
 80104b2:	187b      	adds	r3, r7, r1
 80104b4:	2280      	movs	r2, #128	; 0x80
 80104b6:	0152      	lsls	r2, r2, #5
 80104b8:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80104ba:	187a      	adds	r2, r7, r1
 80104bc:	4b0e      	ldr	r3, [pc, #56]	; (80104f8 <MX_TIM3_Init+0xa0>)
 80104be:	0011      	movs	r1, r2
 80104c0:	0018      	movs	r0, r3
 80104c2:	f7f7 fb85 	bl	8007bd0 <HAL_TIM_ConfigClockSource>
 80104c6:	1e03      	subs	r3, r0, #0
 80104c8:	d001      	beq.n	80104ce <MX_TIM3_Init+0x76>
		Error_Handler();
 80104ca:	f000 f903 	bl	80106d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80104ce:	1d3b      	adds	r3, r7, #4
 80104d0:	2200      	movs	r2, #0
 80104d2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80104d4:	1d3b      	adds	r3, r7, #4
 80104d6:	2200      	movs	r2, #0
 80104d8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80104da:	1d3a      	adds	r2, r7, #4
 80104dc:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <MX_TIM3_Init+0xa0>)
 80104de:	0011      	movs	r1, r2
 80104e0:	0018      	movs	r0, r3
 80104e2:	f7f7 fd73 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 80104e6:	1e03      	subs	r3, r0, #0
 80104e8:	d001      	beq.n	80104ee <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80104ea:	f000 f8f3 	bl	80106d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	46bd      	mov	sp, r7
 80104f2:	b008      	add	sp, #32
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	46c0      	nop			; (mov r8, r8)
 80104f8:	200003c0 	.word	0x200003c0
 80104fc:	40000400 	.word	0x40000400
 8010500:	00000c7f 	.word	0x00000c7f
 8010504:	00004e1f 	.word	0x00004e1f

08010508 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 801050e:	4b0c      	ldr	r3, [pc, #48]	; (8010540 <MX_DMA_Init+0x38>)
 8010510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010512:	4b0b      	ldr	r3, [pc, #44]	; (8010540 <MX_DMA_Init+0x38>)
 8010514:	2101      	movs	r1, #1
 8010516:	430a      	orrs	r2, r1
 8010518:	639a      	str	r2, [r3, #56]	; 0x38
 801051a:	4b09      	ldr	r3, [pc, #36]	; (8010540 <MX_DMA_Init+0x38>)
 801051c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801051e:	2201      	movs	r2, #1
 8010520:	4013      	ands	r3, r2
 8010522:	607b      	str	r3, [r7, #4]
 8010524:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8010526:	2200      	movs	r2, #0
 8010528:	2100      	movs	r1, #0
 801052a:	2009      	movs	r0, #9
 801052c:	f7f3 ff8a 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8010530:	2009      	movs	r0, #9
 8010532:	f7f3 ff9c 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8010536:	46c0      	nop			; (mov r8, r8)
 8010538:	46bd      	mov	sp, r7
 801053a:	b002      	add	sp, #8
 801053c:	bd80      	pop	{r7, pc}
 801053e:	46c0      	nop			; (mov r8, r8)
 8010540:	40021000 	.word	0x40021000

08010544 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8010544:	b590      	push	{r4, r7, lr}
 8010546:	b089      	sub	sp, #36	; 0x24
 8010548:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 801054a:	240c      	movs	r4, #12
 801054c:	193b      	adds	r3, r7, r4
 801054e:	0018      	movs	r0, r3
 8010550:	2314      	movs	r3, #20
 8010552:	001a      	movs	r2, r3
 8010554:	2100      	movs	r1, #0
 8010556:	f002 fd53 	bl	8013000 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801055a:	4b48      	ldr	r3, [pc, #288]	; (801067c <MX_GPIO_Init+0x138>)
 801055c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801055e:	4b47      	ldr	r3, [pc, #284]	; (801067c <MX_GPIO_Init+0x138>)
 8010560:	2104      	movs	r1, #4
 8010562:	430a      	orrs	r2, r1
 8010564:	635a      	str	r2, [r3, #52]	; 0x34
 8010566:	4b45      	ldr	r3, [pc, #276]	; (801067c <MX_GPIO_Init+0x138>)
 8010568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056a:	2204      	movs	r2, #4
 801056c:	4013      	ands	r3, r2
 801056e:	60bb      	str	r3, [r7, #8]
 8010570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8010572:	4b42      	ldr	r3, [pc, #264]	; (801067c <MX_GPIO_Init+0x138>)
 8010574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010576:	4b41      	ldr	r3, [pc, #260]	; (801067c <MX_GPIO_Init+0x138>)
 8010578:	2101      	movs	r1, #1
 801057a:	430a      	orrs	r2, r1
 801057c:	635a      	str	r2, [r3, #52]	; 0x34
 801057e:	4b3f      	ldr	r3, [pc, #252]	; (801067c <MX_GPIO_Init+0x138>)
 8010580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010582:	2201      	movs	r2, #1
 8010584:	4013      	ands	r3, r2
 8010586:	607b      	str	r3, [r7, #4]
 8010588:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801058a:	4b3c      	ldr	r3, [pc, #240]	; (801067c <MX_GPIO_Init+0x138>)
 801058c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801058e:	4b3b      	ldr	r3, [pc, #236]	; (801067c <MX_GPIO_Init+0x138>)
 8010590:	2102      	movs	r1, #2
 8010592:	430a      	orrs	r2, r1
 8010594:	635a      	str	r2, [r3, #52]	; 0x34
 8010596:	4b39      	ldr	r3, [pc, #228]	; (801067c <MX_GPIO_Init+0x138>)
 8010598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801059a:	2202      	movs	r2, #2
 801059c:	4013      	ands	r3, r2
 801059e:	603b      	str	r3, [r7, #0]
 80105a0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 80105a2:	23e0      	movs	r3, #224	; 0xe0
 80105a4:	00d9      	lsls	r1, r3, #3
 80105a6:	23a0      	movs	r3, #160	; 0xa0
 80105a8:	05db      	lsls	r3, r3, #23
 80105aa:	2200      	movs	r2, #0
 80105ac:	0018      	movs	r0, r3
 80105ae:	f7f4 fcee 	bl	8004f8e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80105b2:	4b33      	ldr	r3, [pc, #204]	; (8010680 <MX_GPIO_Init+0x13c>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	2140      	movs	r1, #64	; 0x40
 80105b8:	0018      	movs	r0, r3
 80105ba:	f7f4 fce8 	bl	8004f8e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_Pin SET_Pin RESET_Pin */
	GPIO_InitStruct.Pin = START_Pin | SET_Pin | RESET_Pin;
 80105be:	193b      	adds	r3, r7, r4
 80105c0:	221c      	movs	r2, #28
 80105c2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80105c4:	193b      	adds	r3, r7, r4
 80105c6:	2284      	movs	r2, #132	; 0x84
 80105c8:	0392      	lsls	r2, r2, #14
 80105ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80105cc:	193b      	adds	r3, r7, r4
 80105ce:	2201      	movs	r2, #1
 80105d0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105d2:	193a      	adds	r2, r7, r4
 80105d4:	23a0      	movs	r3, #160	; 0xa0
 80105d6:	05db      	lsls	r3, r3, #23
 80105d8:	0011      	movs	r1, r2
 80105da:	0018      	movs	r0, r3
 80105dc:	f7f4 fb56 	bl	8004c8c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI_CS_Pin DC_Pin RST_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin | DC_Pin | RST_Pin;
 80105e0:	0021      	movs	r1, r4
 80105e2:	187b      	adds	r3, r7, r1
 80105e4:	22e0      	movs	r2, #224	; 0xe0
 80105e6:	00d2      	lsls	r2, r2, #3
 80105e8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105ea:	000c      	movs	r4, r1
 80105ec:	193b      	adds	r3, r7, r4
 80105ee:	2201      	movs	r2, #1
 80105f0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105f2:	193b      	adds	r3, r7, r4
 80105f4:	2200      	movs	r2, #0
 80105f6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105f8:	193b      	adds	r3, r7, r4
 80105fa:	2200      	movs	r2, #0
 80105fc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105fe:	193a      	adds	r2, r7, r4
 8010600:	23a0      	movs	r3, #160	; 0xa0
 8010602:	05db      	lsls	r3, r3, #23
 8010604:	0011      	movs	r1, r2
 8010606:	0018      	movs	r0, r3
 8010608:	f7f4 fb40 	bl	8004c8c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSY_Pin */
	GPIO_InitStruct.Pin = BUSY_Pin;
 801060c:	193b      	adds	r3, r7, r4
 801060e:	2280      	movs	r2, #128	; 0x80
 8010610:	0152      	lsls	r2, r2, #5
 8010612:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010614:	193b      	adds	r3, r7, r4
 8010616:	2200      	movs	r2, #0
 8010618:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801061a:	193b      	adds	r3, r7, r4
 801061c:	2200      	movs	r2, #0
 801061e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8010620:	193a      	adds	r2, r7, r4
 8010622:	23a0      	movs	r3, #160	; 0xa0
 8010624:	05db      	lsls	r3, r3, #23
 8010626:	0011      	movs	r1, r2
 8010628:	0018      	movs	r0, r3
 801062a:	f7f4 fb2f 	bl	8004c8c <HAL_GPIO_Init>

	/*Configure GPIO pin : STATUS_Pin */
	GPIO_InitStruct.Pin = STATUS_Pin;
 801062e:	0021      	movs	r1, r4
 8010630:	187b      	adds	r3, r7, r1
 8010632:	2240      	movs	r2, #64	; 0x40
 8010634:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010636:	187b      	adds	r3, r7, r1
 8010638:	2201      	movs	r2, #1
 801063a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801063c:	187b      	adds	r3, r7, r1
 801063e:	2200      	movs	r2, #0
 8010640:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010642:	187b      	adds	r3, r7, r1
 8010644:	2200      	movs	r2, #0
 8010646:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8010648:	187b      	adds	r3, r7, r1
 801064a:	4a0d      	ldr	r2, [pc, #52]	; (8010680 <MX_GPIO_Init+0x13c>)
 801064c:	0019      	movs	r1, r3
 801064e:	0010      	movs	r0, r2
 8010650:	f7f4 fb1c 	bl	8004c8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8010654:	2200      	movs	r2, #0
 8010656:	2102      	movs	r1, #2
 8010658:	2006      	movs	r0, #6
 801065a:	f7f3 fef3 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 801065e:	2006      	movs	r0, #6
 8010660:	f7f3 ff05 	bl	800446e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8010664:	2200      	movs	r2, #0
 8010666:	2102      	movs	r1, #2
 8010668:	2007      	movs	r0, #7
 801066a:	f7f3 feeb 	bl	8004444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 801066e:	2007      	movs	r0, #7
 8010670:	f7f3 fefd 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8010674:	46c0      	nop			; (mov r8, r8)
 8010676:	46bd      	mov	sp, r7
 8010678:	b009      	add	sp, #36	; 0x24
 801067a:	bd90      	pop	{r4, r7, pc}
 801067c:	40021000 	.word	0x40021000
 8010680:	50000400 	.word	0x50000400

08010684 <onSleep>:

/* USER CODE BEGIN 4 */
void onSleep(void) {
 8010684:	b580      	push	{r7, lr}
 8010686:	af00      	add	r7, sp, #0
	//			EPD_1IN54_V2_Sleep();
	//			DEV_Module_Exit();
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 0);
 8010688:	4b08      	ldr	r3, [pc, #32]	; (80106ac <onSleep+0x28>)
 801068a:	2200      	movs	r2, #0
 801068c:	2140      	movs	r1, #64	; 0x40
 801068e:	0018      	movs	r0, r3
 8010690:	f7f4 fc7d 	bl	8004f8e <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 8010694:	f7f2 ff58 	bl	8003548 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8010698:	2380      	movs	r3, #128	; 0x80
 801069a:	01db      	lsls	r3, r3, #7
 801069c:	2101      	movs	r1, #1
 801069e:	0018      	movs	r0, r3
 80106a0:	f7f5 fab6 	bl	8005c10 <HAL_PWR_EnterSTOPMode>
	//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
}
 80106a4:	46c0      	nop			; (mov r8, r8)
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	46c0      	nop			; (mov r8, r8)
 80106ac:	50000400 	.word	0x50000400

080106b0 <onWakeUp>:
void onWakeUp(void) {
 80106b0:	b580      	push	{r7, lr}
 80106b2:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 80106b4:	f7f2 ff56 	bl	8003564 <HAL_ResumeTick>
	SystemClock_Config();
 80106b8:	f7ff fcb8 	bl	801002c <SystemClock_Config>
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, 1);
 80106bc:	4b04      	ldr	r3, [pc, #16]	; (80106d0 <onWakeUp+0x20>)
 80106be:	2201      	movs	r2, #1
 80106c0:	2140      	movs	r1, #64	; 0x40
 80106c2:	0018      	movs	r0, r3
 80106c4:	f7f4 fc63 	bl	8004f8e <HAL_GPIO_WritePin>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
	//			DEV_Module_Init();
	//			interfaceUpdate(INTERFACE_UPDATE_PARTIAL);
}
 80106c8:	46c0      	nop			; (mov r8, r8)
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	46c0      	nop			; (mov r8, r8)
 80106d0:	50000400 	.word	0x50000400

080106d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80106d4:	b580      	push	{r7, lr}
 80106d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80106d8:	46c0      	nop			; (mov r8, r8)
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
	...

080106e0 <rtcInit>:
#include "main.h"
#include "rtc.h"
#include <stdint.h>

void rtcInit(void) {
 80106e0:	b580      	push	{r7, lr}
 80106e2:	af00      	add	r7, sp, #0
	HAL_RTC_Init(&hrtc);
 80106e4:	4b07      	ldr	r3, [pc, #28]	; (8010704 <rtcInit+0x24>)
 80106e6:	0018      	movs	r0, r3
 80106e8:	f7f6 f8de 	bl	80068a8 <HAL_RTC_Init>
	mode = MODE_NORMAL
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <rtcInit+0x28>)
 80106ee:	2200      	movs	r2, #0
 80106f0:	701a      	strb	r2, [r3, #0]
	;

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WAKE_UP_ULTRA_LONG,
 80106f2:	4b04      	ldr	r3, [pc, #16]	; (8010704 <rtcInit+0x24>)
 80106f4:	2204      	movs	r2, #4
 80106f6:	213c      	movs	r1, #60	; 0x3c
 80106f8:	0018      	movs	r0, r3
 80106fa:	f7f6 fc43 	bl	8006f84 <HAL_RTCEx_SetWakeUpTimer_IT>
		RTC_WAKEUPCLOCK_CK_SPRE_16BITS);

}
 80106fe:	46c0      	nop			; (mov r8, r8)
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20000770 	.word	0x20000770
 8010708:	200004c3 	.word	0x200004c3

0801070c <rtcGetTime>:


void rtcGetTime() {
 801070c:	b5b0      	push	{r4, r5, r7, lr}
 801070e:	b08e      	sub	sp, #56	; 0x38
 8010710:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8010712:	49f7      	ldr	r1, [pc, #988]	; (8010af0 <rtcGetTime+0x3e4>)
 8010714:	4bf7      	ldr	r3, [pc, #988]	; (8010af4 <rtcGetTime+0x3e8>)
 8010716:	2200      	movs	r2, #0
 8010718:	0018      	movs	r0, r3
 801071a:	f7f6 fa03 	bl	8006b24 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 801071e:	49f6      	ldr	r1, [pc, #984]	; (8010af8 <rtcGetTime+0x3ec>)
 8010720:	4bf4      	ldr	r3, [pc, #976]	; (8010af4 <rtcGetTime+0x3e8>)
 8010722:	2200      	movs	r2, #0
 8010724:	0018      	movs	r0, r3
 8010726:	f7f6 faeb 	bl	8006d00 <HAL_RTC_GetDate>

	actual.hour = Time.Hours;
 801072a:	4bf1      	ldr	r3, [pc, #964]	; (8010af0 <rtcGetTime+0x3e4>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	b25a      	sxtb	r2, r3
 8010730:	4bf2      	ldr	r3, [pc, #968]	; (8010afc <rtcGetTime+0x3f0>)
 8010732:	70da      	strb	r2, [r3, #3]



	actual.minute = Time.Minutes;
 8010734:	4bee      	ldr	r3, [pc, #952]	; (8010af0 <rtcGetTime+0x3e4>)
 8010736:	785b      	ldrb	r3, [r3, #1]
 8010738:	b25a      	sxtb	r2, r3
 801073a:	4bf0      	ldr	r3, [pc, #960]	; (8010afc <rtcGetTime+0x3f0>)
 801073c:	711a      	strb	r2, [r3, #4]
	actual.second = Time.Seconds;
 801073e:	4bec      	ldr	r3, [pc, #944]	; (8010af0 <rtcGetTime+0x3e4>)
 8010740:	789b      	ldrb	r3, [r3, #2]
 8010742:	b25a      	sxtb	r2, r3
 8010744:	4bed      	ldr	r3, [pc, #948]	; (8010afc <rtcGetTime+0x3f0>)
 8010746:	715a      	strb	r2, [r3, #5]

	actual.decimal = (((255 - Time.SubSeconds) * 100) / 255) / 10; //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 8010748:	4be9      	ldr	r3, [pc, #932]	; (8010af0 <rtcGetTime+0x3e4>)
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	0013      	movs	r3, r2
 801074e:	065b      	lsls	r3, r3, #25
 8010750:	1a9b      	subs	r3, r3, r2
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	189b      	adds	r3, r3, r2
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	1a9b      	subs	r3, r3, r2
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4ae8      	ldr	r2, [pc, #928]	; (8010b00 <rtcGetTime+0x3f4>)
 801075e:	4694      	mov	ip, r2
 8010760:	4463      	add	r3, ip
 8010762:	49e8      	ldr	r1, [pc, #928]	; (8010b04 <rtcGetTime+0x3f8>)
 8010764:	0018      	movs	r0, r3
 8010766:	f7ef fcd5 	bl	8000114 <__udivsi3>
 801076a:	0003      	movs	r3, r0
 801076c:	b25a      	sxtb	r2, r3
 801076e:	4be3      	ldr	r3, [pc, #908]	; (8010afc <rtcGetTime+0x3f0>)
 8010770:	719a      	strb	r2, [r3, #6]

	actual.day = Date.Date;
 8010772:	4be1      	ldr	r3, [pc, #900]	; (8010af8 <rtcGetTime+0x3ec>)
 8010774:	789b      	ldrb	r3, [r3, #2]
 8010776:	b25a      	sxtb	r2, r3
 8010778:	4be0      	ldr	r3, [pc, #896]	; (8010afc <rtcGetTime+0x3f0>)
 801077a:	709a      	strb	r2, [r3, #2]
	actual.month = Date.Month;
 801077c:	4bde      	ldr	r3, [pc, #888]	; (8010af8 <rtcGetTime+0x3ec>)
 801077e:	785b      	ldrb	r3, [r3, #1]
 8010780:	b25a      	sxtb	r2, r3
 8010782:	4bde      	ldr	r3, [pc, #888]	; (8010afc <rtcGetTime+0x3f0>)
 8010784:	705a      	strb	r2, [r3, #1]
	actual.year = Date.Year;
 8010786:	4bdc      	ldr	r3, [pc, #880]	; (8010af8 <rtcGetTime+0x3ec>)
 8010788:	78db      	ldrb	r3, [r3, #3]
 801078a:	b25a      	sxtb	r2, r3
 801078c:	4bdb      	ldr	r3, [pc, #876]	; (8010afc <rtcGetTime+0x3f0>)
 801078e:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (actual.month + 9) / 12;
 8010790:	4bda      	ldr	r3, [pc, #872]	; (8010afc <rtcGetTime+0x3f0>)
 8010792:	785b      	ldrb	r3, [r3, #1]
 8010794:	b25b      	sxtb	r3, r3
 8010796:	3309      	adds	r3, #9
 8010798:	210c      	movs	r1, #12
 801079a:	0018      	movs	r0, r3
 801079c:	f7ef fd44 	bl	8000228 <__divsi3>
 80107a0:	0003      	movs	r3, r0
 80107a2:	0018      	movs	r0, r3
 80107a4:	f7f0 fdac 	bl	8001300 <__aeabi_i2f>
 80107a8:	1c03      	adds	r3, r0, #0
 80107aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t A = 4716 + (actual.year+2000) + (uint32_t) X;
 80107ac:	4bd3      	ldr	r3, [pc, #844]	; (8010afc <rtcGetTime+0x3f0>)
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	b25b      	sxtb	r3, r3
 80107b2:	001c      	movs	r4, r3
 80107b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107b6:	f7ef fee7 	bl	8000588 <__aeabi_f2uiz>
 80107ba:	0003      	movs	r3, r0
 80107bc:	18e3      	adds	r3, r4, r3
 80107be:	4ad2      	ldr	r2, [pc, #840]	; (8010b08 <rtcGetTime+0x3fc>)
 80107c0:	4694      	mov	ip, r2
 80107c2:	4463      	add	r3, ip
 80107c4:	633b      	str	r3, [r7, #48]	; 0x30
	float Y = 275 * actual.month / 9;
 80107c6:	4bcd      	ldr	r3, [pc, #820]	; (8010afc <rtcGetTime+0x3f0>)
 80107c8:	785b      	ldrb	r3, [r3, #1]
 80107ca:	b25b      	sxtb	r3, r3
 80107cc:	001a      	movs	r2, r3
 80107ce:	0013      	movs	r3, r2
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	1a9b      	subs	r3, r3, r2
 80107d8:	009a      	lsls	r2, r3, #2
 80107da:	189b      	adds	r3, r3, r2
 80107dc:	2109      	movs	r1, #9
 80107de:	0018      	movs	r0, r3
 80107e0:	f7ef fd22 	bl	8000228 <__divsi3>
 80107e4:	0003      	movs	r3, r0
 80107e6:	0018      	movs	r0, r3
 80107e8:	f7f0 fd8a 	bl	8001300 <__aeabi_i2f>
 80107ec:	1c03      	adds	r3, r0, #0
 80107ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	float V = 7 * A / 4;
 80107f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107f2:	0013      	movs	r3, r2
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	1a9b      	subs	r3, r3, r2
 80107f8:	089b      	lsrs	r3, r3, #2
 80107fa:	0018      	movs	r0, r3
 80107fc:	f7f0 fdc6 	bl	800138c <__aeabi_ui2f>
 8010800:	1c03      	adds	r3, r0, #0
 8010802:	62bb      	str	r3, [r7, #40]	; 0x28
	float B = 1729279.5 + 367 * (actual.year+2000) + (uint32_t) Y - (uint32_t) V + actual.day;
 8010804:	4bbd      	ldr	r3, [pc, #756]	; (8010afc <rtcGetTime+0x3f0>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	b25b      	sxtb	r3, r3
 801080a:	22fa      	movs	r2, #250	; 0xfa
 801080c:	00d2      	lsls	r2, r2, #3
 801080e:	189a      	adds	r2, r3, r2
 8010810:	0013      	movs	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	189b      	adds	r3, r3, r2
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	1a9b      	subs	r3, r3, r2
 801081a:	011b      	lsls	r3, r3, #4
 801081c:	1a9b      	subs	r3, r3, r2
 801081e:	0018      	movs	r0, r3
 8010820:	f7f2 fbb2 	bl	8002f88 <__aeabi_i2d>
 8010824:	2280      	movs	r2, #128	; 0x80
 8010826:	0612      	lsls	r2, r2, #24
 8010828:	4bb8      	ldr	r3, [pc, #736]	; (8010b0c <rtcGetTime+0x400>)
 801082a:	f7f0 fdeb 	bl	8001404 <__aeabi_dadd>
 801082e:	0002      	movs	r2, r0
 8010830:	000b      	movs	r3, r1
 8010832:	0014      	movs	r4, r2
 8010834:	001d      	movs	r5, r3
 8010836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010838:	f7ef fea6 	bl	8000588 <__aeabi_f2uiz>
 801083c:	0003      	movs	r3, r0
 801083e:	0018      	movs	r0, r3
 8010840:	f7f2 fbd2 	bl	8002fe8 <__aeabi_ui2d>
 8010844:	0002      	movs	r2, r0
 8010846:	000b      	movs	r3, r1
 8010848:	0020      	movs	r0, r4
 801084a:	0029      	movs	r1, r5
 801084c:	f7f0 fdda 	bl	8001404 <__aeabi_dadd>
 8010850:	0002      	movs	r2, r0
 8010852:	000b      	movs	r3, r1
 8010854:	0014      	movs	r4, r2
 8010856:	001d      	movs	r5, r3
 8010858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801085a:	f7ef fe95 	bl	8000588 <__aeabi_f2uiz>
 801085e:	0003      	movs	r3, r0
 8010860:	0018      	movs	r0, r3
 8010862:	f7f2 fbc1 	bl	8002fe8 <__aeabi_ui2d>
 8010866:	0002      	movs	r2, r0
 8010868:	000b      	movs	r3, r1
 801086a:	0020      	movs	r0, r4
 801086c:	0029      	movs	r1, r5
 801086e:	f7f1 ffa5 	bl	80027bc <__aeabi_dsub>
 8010872:	0002      	movs	r2, r0
 8010874:	000b      	movs	r3, r1
 8010876:	0014      	movs	r4, r2
 8010878:	001d      	movs	r5, r3
 801087a:	4ba0      	ldr	r3, [pc, #640]	; (8010afc <rtcGetTime+0x3f0>)
 801087c:	789b      	ldrb	r3, [r3, #2]
 801087e:	b25b      	sxtb	r3, r3
 8010880:	0018      	movs	r0, r3
 8010882:	f7f2 fb81 	bl	8002f88 <__aeabi_i2d>
 8010886:	0002      	movs	r2, r0
 8010888:	000b      	movs	r3, r1
 801088a:	0020      	movs	r0, r4
 801088c:	0029      	movs	r1, r5
 801088e:	f7f0 fdb9 	bl	8001404 <__aeabi_dadd>
 8010892:	0002      	movs	r2, r0
 8010894:	000b      	movs	r3, r1
 8010896:	0010      	movs	r0, r2
 8010898:	0019      	movs	r1, r3
 801089a:	f7f2 fc13 	bl	80030c4 <__aeabi_d2f>
 801089e:	1c03      	adds	r3, r0, #0
 80108a0:	627b      	str	r3, [r7, #36]	; 0x24
	float Q = (A + 83) / 100;
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	3353      	adds	r3, #83	; 0x53
 80108a6:	2164      	movs	r1, #100	; 0x64
 80108a8:	0018      	movs	r0, r3
 80108aa:	f7ef fc33 	bl	8000114 <__udivsi3>
 80108ae:	0003      	movs	r3, r0
 80108b0:	0018      	movs	r0, r3
 80108b2:	f7f0 fd6b 	bl	800138c <__aeabi_ui2f>
 80108b6:	1c03      	adds	r3, r0, #0
 80108b8:	623b      	str	r3, [r7, #32]
	uint32_t C = (uint32_t) Q;
 80108ba:	6a38      	ldr	r0, [r7, #32]
 80108bc:	f7ef fe64 	bl	8000588 <__aeabi_f2uiz>
 80108c0:	0003      	movs	r3, r0
 80108c2:	61fb      	str	r3, [r7, #28]
	float W = 3 * (C + 1) / 4;
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	0013      	movs	r3, r2
 80108ca:	005b      	lsls	r3, r3, #1
 80108cc:	189b      	adds	r3, r3, r2
 80108ce:	089b      	lsrs	r3, r3, #2
 80108d0:	0018      	movs	r0, r3
 80108d2:	f7f0 fd5b 	bl	800138c <__aeabi_ui2f>
 80108d6:	1c03      	adds	r3, r0, #0
 80108d8:	61bb      	str	r3, [r7, #24]
	uint32_t E = (uint32_t) W;
 80108da:	69b8      	ldr	r0, [r7, #24]
 80108dc:	f7ef fe54 	bl	8000588 <__aeabi_f2uiz>
 80108e0:	0003      	movs	r3, r0
 80108e2:	617b      	str	r3, [r7, #20]
	float JD = B + 38 - E; //julian day
 80108e4:	498a      	ldr	r1, [pc, #552]	; (8010b10 <rtcGetTime+0x404>)
 80108e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108e8:	f7ef fea2 	bl	8000630 <__aeabi_fadd>
 80108ec:	1c03      	adds	r3, r0, #0
 80108ee:	1c1c      	adds	r4, r3, #0
 80108f0:	6978      	ldr	r0, [r7, #20]
 80108f2:	f7f0 fd4b 	bl	800138c <__aeabi_ui2f>
 80108f6:	1c03      	adds	r3, r0, #0
 80108f8:	1c19      	adds	r1, r3, #0
 80108fa:	1c20      	adds	r0, r4, #0
 80108fc:	f7f0 fb18 	bl	8000f30 <__aeabi_fsub>
 8010900:	1c03      	adds	r3, r0, #0
 8010902:	613b      	str	r3, [r7, #16]
	float MS = 29.5305902778; //average value of synodic month
 8010904:	4b83      	ldr	r3, [pc, #524]	; (8010b14 <rtcGetTime+0x408>)
 8010906:	60fb      	str	r3, [r7, #12]
	float phasePrimary = ((JD / MS) - 0.3033);
 8010908:	68f9      	ldr	r1, [r7, #12]
 801090a:	6938      	ldr	r0, [r7, #16]
 801090c:	f7f0 f82c 	bl	8000968 <__aeabi_fdiv>
 8010910:	1c03      	adds	r3, r0, #0
 8010912:	1c18      	adds	r0, r3, #0
 8010914:	f7f2 fb8e 	bl	8003034 <__aeabi_f2d>
 8010918:	4a7f      	ldr	r2, [pc, #508]	; (8010b18 <rtcGetTime+0x40c>)
 801091a:	4b80      	ldr	r3, [pc, #512]	; (8010b1c <rtcGetTime+0x410>)
 801091c:	f7f1 ff4e 	bl	80027bc <__aeabi_dsub>
 8010920:	0002      	movs	r2, r0
 8010922:	000b      	movs	r3, r1
 8010924:	0010      	movs	r0, r2
 8010926:	0019      	movs	r1, r3
 8010928:	f7f2 fbcc 	bl	80030c4 <__aeabi_d2f>
 801092c:	1c03      	adds	r3, r0, #0
 801092e:	60bb      	str	r3, [r7, #8]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 8010930:	68b8      	ldr	r0, [r7, #8]
 8010932:	f7ef fe29 	bl	8000588 <__aeabi_f2uiz>
 8010936:	0003      	movs	r3, r0
 8010938:	607b      	str	r3, [r7, #4]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7f0 fd26 	bl	800138c <__aeabi_ui2f>
 8010940:	1c03      	adds	r3, r0, #0
 8010942:	1c19      	adds	r1, r3, #0
 8010944:	68b8      	ldr	r0, [r7, #8]
 8010946:	f7f0 faf3 	bl	8000f30 <__aeabi_fsub>
 801094a:	1c03      	adds	r3, r0, #0
 801094c:	4974      	ldr	r1, [pc, #464]	; (8010b20 <rtcGetTime+0x414>)
 801094e:	1c18      	adds	r0, r3, #0
 8010950:	f7f0 f9d4 	bl	8000cfc <__aeabi_fmul>
 8010954:	1c03      	adds	r3, r0, #0
 8010956:	603b      	str	r3, [r7, #0]
	moonPhase = (uint32_t) phaseFinal;
 8010958:	6838      	ldr	r0, [r7, #0]
 801095a:	f7ef fe15 	bl	8000588 <__aeabi_f2uiz>
 801095e:	0002      	movs	r2, r0
 8010960:	4b70      	ldr	r3, [pc, #448]	; (8010b24 <rtcGetTime+0x418>)
 8010962:	601a      	str	r2, [r3, #0]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (mode == MODE_NORMAL) {
 8010964:	4b70      	ldr	r3, [pc, #448]	; (8010b28 <rtcGetTime+0x41c>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	b2db      	uxtb	r3, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d114      	bne.n	8010998 <rtcGetTime+0x28c>
		chrono.minute = 0;
 801096e:	4b6f      	ldr	r3, [pc, #444]	; (8010b2c <rtcGetTime+0x420>)
 8010970:	2200      	movs	r2, #0
 8010972:	711a      	strb	r2, [r3, #4]
		chrono.second = 0;
 8010974:	4b6d      	ldr	r3, [pc, #436]	; (8010b2c <rtcGetTime+0x420>)
 8010976:	2200      	movs	r2, #0
 8010978:	715a      	strb	r2, [r3, #5]
		chrono.decimal = 0;
 801097a:	4b6c      	ldr	r3, [pc, #432]	; (8010b2c <rtcGetTime+0x420>)
 801097c:	2200      	movs	r2, #0
 801097e:	719a      	strb	r2, [r3, #6]
		chrono.hour = 0;
 8010980:	4b6a      	ldr	r3, [pc, #424]	; (8010b2c <rtcGetTime+0x420>)
 8010982:	2200      	movs	r2, #0
 8010984:	70da      	strb	r2, [r3, #3]
		chrono.day = 0;
 8010986:	4b69      	ldr	r3, [pc, #420]	; (8010b2c <rtcGetTime+0x420>)
 8010988:	2200      	movs	r2, #0
 801098a:	709a      	strb	r2, [r3, #2]
		chrono.month = 0;
 801098c:	4b67      	ldr	r3, [pc, #412]	; (8010b2c <rtcGetTime+0x420>)
 801098e:	2200      	movs	r2, #0
 8010990:	705a      	strb	r2, [r3, #1]
		chrono.year = 0;
 8010992:	4b66      	ldr	r3, [pc, #408]	; (8010b2c <rtcGetTime+0x420>)
 8010994:	2200      	movs	r2, #0
 8010996:	701a      	strb	r2, [r3, #0]
	}
	if (mode == MODE_CHRONO) {
 8010998:	4b63      	ldr	r3, [pc, #396]	; (8010b28 <rtcGetTime+0x41c>)
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	b2db      	uxtb	r3, r3
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d000      	beq.n	80109a4 <rtcGetTime+0x298>
 80109a2:	e0f8      	b.n	8010b96 <rtcGetTime+0x48a>

		chrono.decimal = 0;
 80109a4:	4b61      	ldr	r3, [pc, #388]	; (8010b2c <rtcGetTime+0x420>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	719a      	strb	r2, [r3, #6]
		chrono.second = actual.second - chronoStart.second;
 80109aa:	4b54      	ldr	r3, [pc, #336]	; (8010afc <rtcGetTime+0x3f0>)
 80109ac:	795b      	ldrb	r3, [r3, #5]
 80109ae:	b25b      	sxtb	r3, r3
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	4b5f      	ldr	r3, [pc, #380]	; (8010b30 <rtcGetTime+0x424>)
 80109b4:	795b      	ldrb	r3, [r3, #5]
 80109b6:	b25b      	sxtb	r3, r3
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	b25a      	sxtb	r2, r3
 80109c0:	4b5a      	ldr	r3, [pc, #360]	; (8010b2c <rtcGetTime+0x420>)
 80109c2:	715a      	strb	r2, [r3, #5]
		chrono.minute = actual.minute - chronoStart.minute;
 80109c4:	4b4d      	ldr	r3, [pc, #308]	; (8010afc <rtcGetTime+0x3f0>)
 80109c6:	791b      	ldrb	r3, [r3, #4]
 80109c8:	b25b      	sxtb	r3, r3
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	4b58      	ldr	r3, [pc, #352]	; (8010b30 <rtcGetTime+0x424>)
 80109ce:	791b      	ldrb	r3, [r3, #4]
 80109d0:	b25b      	sxtb	r3, r3
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	b25a      	sxtb	r2, r3
 80109da:	4b54      	ldr	r3, [pc, #336]	; (8010b2c <rtcGetTime+0x420>)
 80109dc:	711a      	strb	r2, [r3, #4]
		chrono.hour = actual.hour - chronoStart.hour;
 80109de:	4b47      	ldr	r3, [pc, #284]	; (8010afc <rtcGetTime+0x3f0>)
 80109e0:	78db      	ldrb	r3, [r3, #3]
 80109e2:	b25b      	sxtb	r3, r3
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	4b52      	ldr	r3, [pc, #328]	; (8010b30 <rtcGetTime+0x424>)
 80109e8:	78db      	ldrb	r3, [r3, #3]
 80109ea:	b25b      	sxtb	r3, r3
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	b25a      	sxtb	r2, r3
 80109f4:	4b4d      	ldr	r3, [pc, #308]	; (8010b2c <rtcGetTime+0x420>)
 80109f6:	70da      	strb	r2, [r3, #3]
		chrono.day = actual.day - chronoStart.day;
 80109f8:	4b40      	ldr	r3, [pc, #256]	; (8010afc <rtcGetTime+0x3f0>)
 80109fa:	789b      	ldrb	r3, [r3, #2]
 80109fc:	b25b      	sxtb	r3, r3
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	4b4b      	ldr	r3, [pc, #300]	; (8010b30 <rtcGetTime+0x424>)
 8010a02:	789b      	ldrb	r3, [r3, #2]
 8010a04:	b25b      	sxtb	r3, r3
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	b25a      	sxtb	r2, r3
 8010a0e:	4b47      	ldr	r3, [pc, #284]	; (8010b2c <rtcGetTime+0x420>)
 8010a10:	709a      	strb	r2, [r3, #2]
		chrono.month = actual.month - chronoStart.month;
 8010a12:	4b3a      	ldr	r3, [pc, #232]	; (8010afc <rtcGetTime+0x3f0>)
 8010a14:	785b      	ldrb	r3, [r3, #1]
 8010a16:	b25b      	sxtb	r3, r3
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	4b45      	ldr	r3, [pc, #276]	; (8010b30 <rtcGetTime+0x424>)
 8010a1c:	785b      	ldrb	r3, [r3, #1]
 8010a1e:	b25b      	sxtb	r3, r3
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	b25a      	sxtb	r2, r3
 8010a28:	4b40      	ldr	r3, [pc, #256]	; (8010b2c <rtcGetTime+0x420>)
 8010a2a:	705a      	strb	r2, [r3, #1]

		if (chrono.decimal < 0) {
 8010a2c:	4b3f      	ldr	r3, [pc, #252]	; (8010b2c <rtcGetTime+0x420>)
 8010a2e:	799b      	ldrb	r3, [r3, #6]
 8010a30:	b25b      	sxtb	r3, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	da11      	bge.n	8010a5a <rtcGetTime+0x34e>
			chrono.second--;
 8010a36:	4b3d      	ldr	r3, [pc, #244]	; (8010b2c <rtcGetTime+0x420>)
 8010a38:	795b      	ldrb	r3, [r3, #5]
 8010a3a:	b25b      	sxtb	r3, r3
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	b25a      	sxtb	r2, r3
 8010a44:	4b39      	ldr	r3, [pc, #228]	; (8010b2c <rtcGetTime+0x420>)
 8010a46:	715a      	strb	r2, [r3, #5]
			chrono.decimal = chrono.decimal + 10;
 8010a48:	4b38      	ldr	r3, [pc, #224]	; (8010b2c <rtcGetTime+0x420>)
 8010a4a:	799b      	ldrb	r3, [r3, #6]
 8010a4c:	b25b      	sxtb	r3, r3
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	330a      	adds	r3, #10
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	b25a      	sxtb	r2, r3
 8010a56:	4b35      	ldr	r3, [pc, #212]	; (8010b2c <rtcGetTime+0x420>)
 8010a58:	719a      	strb	r2, [r3, #6]
		}

		if (chrono.second < 0) {
 8010a5a:	4b34      	ldr	r3, [pc, #208]	; (8010b2c <rtcGetTime+0x420>)
 8010a5c:	795b      	ldrb	r3, [r3, #5]
 8010a5e:	b25b      	sxtb	r3, r3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da11      	bge.n	8010a88 <rtcGetTime+0x37c>
			chrono.minute--;
 8010a64:	4b31      	ldr	r3, [pc, #196]	; (8010b2c <rtcGetTime+0x420>)
 8010a66:	791b      	ldrb	r3, [r3, #4]
 8010a68:	b25b      	sxtb	r3, r3
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	b25a      	sxtb	r2, r3
 8010a72:	4b2e      	ldr	r3, [pc, #184]	; (8010b2c <rtcGetTime+0x420>)
 8010a74:	711a      	strb	r2, [r3, #4]
			chrono.second = chrono.second + 60;
 8010a76:	4b2d      	ldr	r3, [pc, #180]	; (8010b2c <rtcGetTime+0x420>)
 8010a78:	795b      	ldrb	r3, [r3, #5]
 8010a7a:	b25b      	sxtb	r3, r3
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	333c      	adds	r3, #60	; 0x3c
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	b25a      	sxtb	r2, r3
 8010a84:	4b29      	ldr	r3, [pc, #164]	; (8010b2c <rtcGetTime+0x420>)
 8010a86:	715a      	strb	r2, [r3, #5]
		}

		if (chrono.minute < 0) {
 8010a88:	4b28      	ldr	r3, [pc, #160]	; (8010b2c <rtcGetTime+0x420>)
 8010a8a:	791b      	ldrb	r3, [r3, #4]
 8010a8c:	b25b      	sxtb	r3, r3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	da11      	bge.n	8010ab6 <rtcGetTime+0x3aa>
			chrono.hour--;
 8010a92:	4b26      	ldr	r3, [pc, #152]	; (8010b2c <rtcGetTime+0x420>)
 8010a94:	78db      	ldrb	r3, [r3, #3]
 8010a96:	b25b      	sxtb	r3, r3
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	b25a      	sxtb	r2, r3
 8010aa0:	4b22      	ldr	r3, [pc, #136]	; (8010b2c <rtcGetTime+0x420>)
 8010aa2:	70da      	strb	r2, [r3, #3]
			chrono.minute = chrono.minute + 60;
 8010aa4:	4b21      	ldr	r3, [pc, #132]	; (8010b2c <rtcGetTime+0x420>)
 8010aa6:	791b      	ldrb	r3, [r3, #4]
 8010aa8:	b25b      	sxtb	r3, r3
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	333c      	adds	r3, #60	; 0x3c
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	b25a      	sxtb	r2, r3
 8010ab2:	4b1e      	ldr	r3, [pc, #120]	; (8010b2c <rtcGetTime+0x420>)
 8010ab4:	711a      	strb	r2, [r3, #4]
		}

		if (chrono.hour < 0) {
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <rtcGetTime+0x420>)
 8010ab8:	78db      	ldrb	r3, [r3, #3]
 8010aba:	b25b      	sxtb	r3, r3
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	da11      	bge.n	8010ae4 <rtcGetTime+0x3d8>
			chrono.day--;
 8010ac0:	4b1a      	ldr	r3, [pc, #104]	; (8010b2c <rtcGetTime+0x420>)
 8010ac2:	789b      	ldrb	r3, [r3, #2]
 8010ac4:	b25b      	sxtb	r3, r3
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	3b01      	subs	r3, #1
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	b25a      	sxtb	r2, r3
 8010ace:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <rtcGetTime+0x420>)
 8010ad0:	709a      	strb	r2, [r3, #2]
			chrono.hour = chrono.hour + 24;
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <rtcGetTime+0x420>)
 8010ad4:	78db      	ldrb	r3, [r3, #3]
 8010ad6:	b25b      	sxtb	r3, r3
 8010ad8:	b2db      	uxtb	r3, r3
 8010ada:	3318      	adds	r3, #24
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	b25a      	sxtb	r2, r3
 8010ae0:	4b12      	ldr	r3, [pc, #72]	; (8010b2c <rtcGetTime+0x420>)
 8010ae2:	70da      	strb	r2, [r3, #3]
		}

		if (chrono.day < 0) {
 8010ae4:	4b11      	ldr	r3, [pc, #68]	; (8010b2c <rtcGetTime+0x420>)
 8010ae6:	789b      	ldrb	r3, [r3, #2]
 8010ae8:	b25b      	sxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	da34      	bge.n	8010b58 <rtcGetTime+0x44c>
 8010aee:	e021      	b.n	8010b34 <rtcGetTime+0x428>
 8010af0:	200006c4 	.word	0x200006c4
 8010af4:	20000770 	.word	0x20000770
 8010af8:	2000044c 	.word	0x2000044c
 8010afc:	200006ac 	.word	0x200006ac
 8010b00:	0000639c 	.word	0x0000639c
 8010b04:	000009f6 	.word	0x000009f6
 8010b08:	00001a3c 	.word	0x00001a3c
 8010b0c:	413a62ff 	.word	0x413a62ff
 8010b10:	42180000 	.word	0x42180000
 8010b14:	41ec3ea6 	.word	0x41ec3ea6
 8010b18:	67381d7e 	.word	0x67381d7e
 8010b1c:	3fd36944 	.word	0x3fd36944
 8010b20:	42c80000 	.word	0x42c80000
 8010b24:	200003b4 	.word	0x200003b4
 8010b28:	200004c3 	.word	0x200004c3
 8010b2c:	20000444 	.word	0x20000444
 8010b30:	200004b8 	.word	0x200004b8
			chrono.month--;
 8010b34:	4b1a      	ldr	r3, [pc, #104]	; (8010ba0 <rtcGetTime+0x494>)
 8010b36:	785b      	ldrb	r3, [r3, #1]
 8010b38:	b25b      	sxtb	r3, r3
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	b25a      	sxtb	r2, r3
 8010b42:	4b17      	ldr	r3, [pc, #92]	; (8010ba0 <rtcGetTime+0x494>)
 8010b44:	705a      	strb	r2, [r3, #1]
			chrono.day = chrono.day + 30;
 8010b46:	4b16      	ldr	r3, [pc, #88]	; (8010ba0 <rtcGetTime+0x494>)
 8010b48:	789b      	ldrb	r3, [r3, #2]
 8010b4a:	b25b      	sxtb	r3, r3
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	331e      	adds	r3, #30
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	b25a      	sxtb	r2, r3
 8010b54:	4b12      	ldr	r3, [pc, #72]	; (8010ba0 <rtcGetTime+0x494>)
 8010b56:	709a      	strb	r2, [r3, #2]
		}

		if (chrono.month < 0) {
 8010b58:	4b11      	ldr	r3, [pc, #68]	; (8010ba0 <rtcGetTime+0x494>)
 8010b5a:	785b      	ldrb	r3, [r3, #1]
 8010b5c:	b25b      	sxtb	r3, r3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	da11      	bge.n	8010b86 <rtcGetTime+0x47a>
			chrono.year--;
 8010b62:	4b0f      	ldr	r3, [pc, #60]	; (8010ba0 <rtcGetTime+0x494>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	b25b      	sxtb	r3, r3
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	3b01      	subs	r3, #1
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	b25a      	sxtb	r2, r3
 8010b70:	4b0b      	ldr	r3, [pc, #44]	; (8010ba0 <rtcGetTime+0x494>)
 8010b72:	701a      	strb	r2, [r3, #0]
			chrono.month = chrono.month + 12;
 8010b74:	4b0a      	ldr	r3, [pc, #40]	; (8010ba0 <rtcGetTime+0x494>)
 8010b76:	785b      	ldrb	r3, [r3, #1]
 8010b78:	b25b      	sxtb	r3, r3
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	330c      	adds	r3, #12
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	b25a      	sxtb	r2, r3
 8010b82:	4b07      	ldr	r3, [pc, #28]	; (8010ba0 <rtcGetTime+0x494>)
 8010b84:	705a      	strb	r2, [r3, #1]
		}

		//max chrono count
		if(chrono.hour >= 5){
 8010b86:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <rtcGetTime+0x494>)
 8010b88:	78db      	ldrb	r3, [r3, #3]
 8010b8a:	b25b      	sxtb	r3, r3
 8010b8c:	2b04      	cmp	r3, #4
 8010b8e:	dd02      	ble.n	8010b96 <rtcGetTime+0x48a>
			mode = MODE_STOP;
 8010b90:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <rtcGetTime+0x498>)
 8010b92:	2202      	movs	r2, #2
 8010b94:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8010b96:	46c0      	nop			; (mov r8, r8)
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	b00e      	add	sp, #56	; 0x38
 8010b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b9e:	46c0      	nop			; (mov r8, r8)
 8010ba0:	20000444 	.word	0x20000444
 8010ba4:	200004c3 	.word	0x200004c3

08010ba8 <rtcSetTime>:

void rtcSetTime() {
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	af00      	add	r7, sp, #0

	Time.Hours = actual.hour;
 8010bac:	4b19      	ldr	r3, [pc, #100]	; (8010c14 <rtcSetTime+0x6c>)
 8010bae:	78db      	ldrb	r3, [r3, #3]
 8010bb0:	b25b      	sxtb	r3, r3
 8010bb2:	b2da      	uxtb	r2, r3
 8010bb4:	4b18      	ldr	r3, [pc, #96]	; (8010c18 <rtcSetTime+0x70>)
 8010bb6:	701a      	strb	r2, [r3, #0]
	Time.Minutes = actual.minute;
 8010bb8:	4b16      	ldr	r3, [pc, #88]	; (8010c14 <rtcSetTime+0x6c>)
 8010bba:	791b      	ldrb	r3, [r3, #4]
 8010bbc:	b25b      	sxtb	r3, r3
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <rtcSetTime+0x70>)
 8010bc2:	705a      	strb	r2, [r3, #1]
	Time.Seconds = actual.second;
 8010bc4:	4b13      	ldr	r3, [pc, #76]	; (8010c14 <rtcSetTime+0x6c>)
 8010bc6:	795b      	ldrb	r3, [r3, #5]
 8010bc8:	b25b      	sxtb	r3, r3
 8010bca:	b2da      	uxtb	r2, r3
 8010bcc:	4b12      	ldr	r3, [pc, #72]	; (8010c18 <rtcSetTime+0x70>)
 8010bce:	709a      	strb	r2, [r3, #2]
	Date.Date = actual.day;
 8010bd0:	4b10      	ldr	r3, [pc, #64]	; (8010c14 <rtcSetTime+0x6c>)
 8010bd2:	789b      	ldrb	r3, [r3, #2]
 8010bd4:	b25b      	sxtb	r3, r3
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	4b10      	ldr	r3, [pc, #64]	; (8010c1c <rtcSetTime+0x74>)
 8010bda:	709a      	strb	r2, [r3, #2]
	Date.Month = actual.month;
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	; (8010c14 <rtcSetTime+0x6c>)
 8010bde:	785b      	ldrb	r3, [r3, #1]
 8010be0:	b25b      	sxtb	r3, r3
 8010be2:	b2da      	uxtb	r2, r3
 8010be4:	4b0d      	ldr	r3, [pc, #52]	; (8010c1c <rtcSetTime+0x74>)
 8010be6:	705a      	strb	r2, [r3, #1]
	Date.Year = actual.year;
 8010be8:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <rtcSetTime+0x6c>)
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	b25b      	sxtb	r3, r3
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4b0a      	ldr	r3, [pc, #40]	; (8010c1c <rtcSetTime+0x74>)
 8010bf2:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8010bf4:	4908      	ldr	r1, [pc, #32]	; (8010c18 <rtcSetTime+0x70>)
 8010bf6:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <rtcSetTime+0x78>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	0018      	movs	r0, r3
 8010bfc:	f7f5 feea 	bl	80069d4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8010c00:	4906      	ldr	r1, [pc, #24]	; (8010c1c <rtcSetTime+0x74>)
 8010c02:	4b07      	ldr	r3, [pc, #28]	; (8010c20 <rtcSetTime+0x78>)
 8010c04:	2200      	movs	r2, #0
 8010c06:	0018      	movs	r0, r3
 8010c08:	f7f5 ffe8 	bl	8006bdc <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 8010c0c:	46c0      	nop			; (mov r8, r8)
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	46c0      	nop			; (mov r8, r8)
 8010c14:	200006ac 	.word	0x200006ac
 8010c18:	200006c4 	.word	0x200006c4
 8010c1c:	2000044c 	.word	0x2000044c
 8010c20:	20000770 	.word	0x20000770

08010c24 <rtcResetChrono>:

void rtcResetChrono(void) {
 8010c24:	b580      	push	{r7, lr}
 8010c26:	af00      	add	r7, sp, #0

	chrono.decimal = 0;
 8010c28:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <rtcResetChrono+0x3c>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	719a      	strb	r2, [r3, #6]
	chrono.minute = 0;
 8010c2e:	4b0c      	ldr	r3, [pc, #48]	; (8010c60 <rtcResetChrono+0x3c>)
 8010c30:	2200      	movs	r2, #0
 8010c32:	711a      	strb	r2, [r3, #4]
	chrono.second = 0;
 8010c34:	4b0a      	ldr	r3, [pc, #40]	; (8010c60 <rtcResetChrono+0x3c>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	715a      	strb	r2, [r3, #5]
	chrono.hour = 0;
 8010c3a:	4b09      	ldr	r3, [pc, #36]	; (8010c60 <rtcResetChrono+0x3c>)
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	70da      	strb	r2, [r3, #3]

	chronoStart.second = 0;
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <rtcResetChrono+0x40>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	715a      	strb	r2, [r3, #5]
	chronoStart.minute = 0;
 8010c46:	4b07      	ldr	r3, [pc, #28]	; (8010c64 <rtcResetChrono+0x40>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	711a      	strb	r2, [r3, #4]
	chronoStart.decimal = 0;
 8010c4c:	4b05      	ldr	r3, [pc, #20]	; (8010c64 <rtcResetChrono+0x40>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	719a      	strb	r2, [r3, #6]
	chronoStart.hour = 0;
 8010c52:	4b04      	ldr	r3, [pc, #16]	; (8010c64 <rtcResetChrono+0x40>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	70da      	strb	r2, [r3, #3]

}
 8010c58:	46c0      	nop			; (mov r8, r8)
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	46c0      	nop			; (mov r8, r8)
 8010c60:	20000444 	.word	0x20000444
 8010c64:	200004b8 	.word	0x200004b8

08010c68 <float2Text>:
int32_t offsetMagnetometerX = 0;
int32_t offsetMagnetometerY = 0;

float gainVoltagePassive = 1.06;

void float2Text(char *str, float input) {
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]

	int ones = (uint16_t) input;
 8010c72:	6838      	ldr	r0, [r7, #0]
 8010c74:	f7ef fc88 	bl	8000588 <__aeabi_f2uiz>
 8010c78:	0003      	movs	r3, r0
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	617b      	str	r3, [r7, #20]
	float hundreadths = input - ones;
 8010c7e:	6978      	ldr	r0, [r7, #20]
 8010c80:	f7f0 fb3e 	bl	8001300 <__aeabi_i2f>
 8010c84:	1c03      	adds	r3, r0, #0
 8010c86:	1c19      	adds	r1, r3, #0
 8010c88:	6838      	ldr	r0, [r7, #0]
 8010c8a:	f7f0 f951 	bl	8000f30 <__aeabi_fsub>
 8010c8e:	1c03      	adds	r3, r0, #0
 8010c90:	613b      	str	r3, [r7, #16]
	int hundreadths2 = hundreadths * 100;
 8010c92:	490a      	ldr	r1, [pc, #40]	; (8010cbc <float2Text+0x54>)
 8010c94:	6938      	ldr	r0, [r7, #16]
 8010c96:	f7f0 f831 	bl	8000cfc <__aeabi_fmul>
 8010c9a:	1c03      	adds	r3, r0, #0
 8010c9c:	1c18      	adds	r0, r3, #0
 8010c9e:	f7f0 fb0f 	bl	80012c0 <__aeabi_f2iz>
 8010ca2:	0003      	movs	r3, r0
 8010ca4:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%d.%d", ones, hundreadths2);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	697a      	ldr	r2, [r7, #20]
 8010caa:	4905      	ldr	r1, [pc, #20]	; (8010cc0 <float2Text+0x58>)
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f002 faff 	bl	80132b0 <siprintf>

}
 8010cb2:	46c0      	nop			; (mov r8, r8)
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	b006      	add	sp, #24
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	46c0      	nop			; (mov r8, r8)
 8010cbc:	42c80000 	.word	0x42c80000
 8010cc0:	08016160 	.word	0x08016160

08010cc4 <sensingInit>:

void sensingInit() {
 8010cc4:	b590      	push	{r4, r7, lr}
 8010cc6:	b08f      	sub	sp, #60	; 0x3c
 8010cc8:	af04      	add	r7, sp, #16

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 8010cca:	497e      	ldr	r1, [pc, #504]	; (8010ec4 <sensingInit+0x200>)
 8010ccc:	4b7e      	ldr	r3, [pc, #504]	; (8010ec8 <sensingInit+0x204>)
 8010cce:	2203      	movs	r2, #3
 8010cd0:	0018      	movs	r0, r3
 8010cd2:	f7f2 ff79 	bl	8003bc8 <HAL_ADC_Start_DMA>
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								REDING CALIBRATION DATA

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_T1, 1, dig_T, 6,
 8010cd6:	4b7d      	ldr	r3, [pc, #500]	; (8010ecc <sensingInit+0x208>)
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	487d      	ldr	r0, [pc, #500]	; (8010ed0 <sensingInit+0x20c>)
 8010cdc:	9302      	str	r3, [sp, #8]
 8010cde:	2306      	movs	r3, #6
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	2420      	movs	r4, #32
 8010ce4:	193b      	adds	r3, r7, r4
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	2301      	movs	r3, #1
 8010cea:	2288      	movs	r2, #136	; 0x88
 8010cec:	21ee      	movs	r1, #238	; 0xee
 8010cee:	f7f4 fb63 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 8010cf2:	0021      	movs	r1, r4
 8010cf4:	187b      	adds	r3, r7, r1
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	b21a      	sxth	r2, r3
 8010cfa:	187b      	adds	r3, r7, r1
 8010cfc:	785b      	ldrb	r3, [r3, #1]
 8010cfe:	021b      	lsls	r3, r3, #8
 8010d00:	b21b      	sxth	r3, r3
 8010d02:	4313      	orrs	r3, r2
 8010d04:	b21b      	sxth	r3, r3
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	4b72      	ldr	r3, [pc, #456]	; (8010ed4 <sensingInit+0x210>)
 8010d0a:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 8010d0c:	187b      	adds	r3, r7, r1
 8010d0e:	789b      	ldrb	r3, [r3, #2]
 8010d10:	b21a      	sxth	r2, r3
 8010d12:	187b      	adds	r3, r7, r1
 8010d14:	78db      	ldrb	r3, [r3, #3]
 8010d16:	021b      	lsls	r3, r3, #8
 8010d18:	b21b      	sxth	r3, r3
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	b21a      	sxth	r2, r3
 8010d1e:	4b6e      	ldr	r3, [pc, #440]	; (8010ed8 <sensingInit+0x214>)
 8010d20:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 8010d22:	187b      	adds	r3, r7, r1
 8010d24:	791b      	ldrb	r3, [r3, #4]
 8010d26:	b21a      	sxth	r2, r3
 8010d28:	187b      	adds	r3, r7, r1
 8010d2a:	791b      	ldrb	r3, [r3, #4]
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	b21b      	sxth	r3, r3
 8010d30:	4313      	orrs	r3, r2
 8010d32:	b21a      	sxth	r2, r3
 8010d34:	4b69      	ldr	r3, [pc, #420]	; (8010edc <sensingInit+0x218>)
 8010d36:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_P1, 1, dig_P, 18,
 8010d38:	4b64      	ldr	r3, [pc, #400]	; (8010ecc <sensingInit+0x208>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	4864      	ldr	r0, [pc, #400]	; (8010ed0 <sensingInit+0x20c>)
 8010d3e:	9302      	str	r3, [sp, #8]
 8010d40:	2312      	movs	r3, #18
 8010d42:	9301      	str	r3, [sp, #4]
 8010d44:	240c      	movs	r4, #12
 8010d46:	193b      	adds	r3, r7, r4
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	228e      	movs	r2, #142	; 0x8e
 8010d4e:	21ee      	movs	r1, #238	; 0xee
 8010d50:	f7f4 fb32 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 8010d54:	0021      	movs	r1, r4
 8010d56:	187b      	adds	r3, r7, r1
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	b21a      	sxth	r2, r3
 8010d5c:	187b      	adds	r3, r7, r1
 8010d5e:	785b      	ldrb	r3, [r3, #1]
 8010d60:	021b      	lsls	r3, r3, #8
 8010d62:	b21b      	sxth	r3, r3
 8010d64:	4313      	orrs	r3, r2
 8010d66:	b21b      	sxth	r3, r3
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	4b5d      	ldr	r3, [pc, #372]	; (8010ee0 <sensingInit+0x21c>)
 8010d6c:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 8010d6e:	187b      	adds	r3, r7, r1
 8010d70:	789b      	ldrb	r3, [r3, #2]
 8010d72:	b21a      	sxth	r2, r3
 8010d74:	187b      	adds	r3, r7, r1
 8010d76:	78db      	ldrb	r3, [r3, #3]
 8010d78:	021b      	lsls	r3, r3, #8
 8010d7a:	b21b      	sxth	r3, r3
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	b21a      	sxth	r2, r3
 8010d80:	4b58      	ldr	r3, [pc, #352]	; (8010ee4 <sensingInit+0x220>)
 8010d82:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 8010d84:	187b      	adds	r3, r7, r1
 8010d86:	791b      	ldrb	r3, [r3, #4]
 8010d88:	b21a      	sxth	r2, r3
 8010d8a:	187b      	adds	r3, r7, r1
 8010d8c:	795b      	ldrb	r3, [r3, #5]
 8010d8e:	021b      	lsls	r3, r3, #8
 8010d90:	b21b      	sxth	r3, r3
 8010d92:	4313      	orrs	r3, r2
 8010d94:	b21a      	sxth	r2, r3
 8010d96:	4b54      	ldr	r3, [pc, #336]	; (8010ee8 <sensingInit+0x224>)
 8010d98:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 8010d9a:	187b      	adds	r3, r7, r1
 8010d9c:	799b      	ldrb	r3, [r3, #6]
 8010d9e:	b21a      	sxth	r2, r3
 8010da0:	187b      	adds	r3, r7, r1
 8010da2:	79db      	ldrb	r3, [r3, #7]
 8010da4:	021b      	lsls	r3, r3, #8
 8010da6:	b21b      	sxth	r3, r3
 8010da8:	4313      	orrs	r3, r2
 8010daa:	b21a      	sxth	r2, r3
 8010dac:	4b4f      	ldr	r3, [pc, #316]	; (8010eec <sensingInit+0x228>)
 8010dae:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 8010db0:	187b      	adds	r3, r7, r1
 8010db2:	7a1b      	ldrb	r3, [r3, #8]
 8010db4:	b21a      	sxth	r2, r3
 8010db6:	187b      	adds	r3, r7, r1
 8010db8:	7a5b      	ldrb	r3, [r3, #9]
 8010dba:	021b      	lsls	r3, r3, #8
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	b21a      	sxth	r2, r3
 8010dc2:	4b4b      	ldr	r3, [pc, #300]	; (8010ef0 <sensingInit+0x22c>)
 8010dc4:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 8010dc6:	187b      	adds	r3, r7, r1
 8010dc8:	7a9b      	ldrb	r3, [r3, #10]
 8010dca:	b21a      	sxth	r2, r3
 8010dcc:	187b      	adds	r3, r7, r1
 8010dce:	7adb      	ldrb	r3, [r3, #11]
 8010dd0:	021b      	lsls	r3, r3, #8
 8010dd2:	b21b      	sxth	r3, r3
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	b21a      	sxth	r2, r3
 8010dd8:	4b46      	ldr	r3, [pc, #280]	; (8010ef4 <sensingInit+0x230>)
 8010dda:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 8010ddc:	187b      	adds	r3, r7, r1
 8010dde:	7b1b      	ldrb	r3, [r3, #12]
 8010de0:	b21a      	sxth	r2, r3
 8010de2:	187b      	adds	r3, r7, r1
 8010de4:	7b5b      	ldrb	r3, [r3, #13]
 8010de6:	021b      	lsls	r3, r3, #8
 8010de8:	b21b      	sxth	r3, r3
 8010dea:	4313      	orrs	r3, r2
 8010dec:	b21a      	sxth	r2, r3
 8010dee:	4b42      	ldr	r3, [pc, #264]	; (8010ef8 <sensingInit+0x234>)
 8010df0:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 8010df2:	187b      	adds	r3, r7, r1
 8010df4:	7b9b      	ldrb	r3, [r3, #14]
 8010df6:	b21a      	sxth	r2, r3
 8010df8:	187b      	adds	r3, r7, r1
 8010dfa:	7bdb      	ldrb	r3, [r3, #15]
 8010dfc:	021b      	lsls	r3, r3, #8
 8010dfe:	b21b      	sxth	r3, r3
 8010e00:	4313      	orrs	r3, r2
 8010e02:	b21a      	sxth	r2, r3
 8010e04:	4b3d      	ldr	r3, [pc, #244]	; (8010efc <sensingInit+0x238>)
 8010e06:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 8010e08:	187b      	adds	r3, r7, r1
 8010e0a:	7c1b      	ldrb	r3, [r3, #16]
 8010e0c:	b21a      	sxth	r2, r3
 8010e0e:	187b      	adds	r3, r7, r1
 8010e10:	7c5b      	ldrb	r3, [r3, #17]
 8010e12:	021b      	lsls	r3, r3, #8
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	4313      	orrs	r3, r2
 8010e18:	b21a      	sxth	r2, r3
 8010e1a:	4b39      	ldr	r3, [pc, #228]	; (8010f00 <sensingInit+0x23c>)
 8010e1c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H1, 1, &dig_H_1, 1,
 8010e1e:	4b2b      	ldr	r3, [pc, #172]	; (8010ecc <sensingInit+0x208>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	482b      	ldr	r0, [pc, #172]	; (8010ed0 <sensingInit+0x20c>)
 8010e24:	9302      	str	r3, [sp, #8]
 8010e26:	2301      	movs	r3, #1
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	240b      	movs	r4, #11
 8010e2c:	193b      	adds	r3, r7, r4
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	2301      	movs	r3, #1
 8010e32:	22a1      	movs	r2, #161	; 0xa1
 8010e34:	21ee      	movs	r1, #238	; 0xee
 8010e36:	f7f4 fabf 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H1 = ((unsigned char) dig_H_1);
 8010e3a:	193b      	adds	r3, r7, r4
 8010e3c:	781a      	ldrb	r2, [r3, #0]
 8010e3e:	4b31      	ldr	r3, [pc, #196]	; (8010f04 <sensingInit+0x240>)
 8010e40:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_DIG_H2, 1, dig_H_2_6, 7,
 8010e42:	4b22      	ldr	r3, [pc, #136]	; (8010ecc <sensingInit+0x208>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	4822      	ldr	r0, [pc, #136]	; (8010ed0 <sensingInit+0x20c>)
 8010e48:	9302      	str	r3, [sp, #8]
 8010e4a:	2307      	movs	r3, #7
 8010e4c:	9301      	str	r3, [sp, #4]
 8010e4e:	1d3b      	adds	r3, r7, #4
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	2301      	movs	r3, #1
 8010e54:	22e1      	movs	r2, #225	; 0xe1
 8010e56:	21ee      	movs	r1, #238	; 0xee
 8010e58:	f7f4 faae 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 8010e5c:	1d3b      	adds	r3, r7, #4
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	b21a      	sxth	r2, r3
 8010e62:	1d3b      	adds	r3, r7, #4
 8010e64:	785b      	ldrb	r3, [r3, #1]
 8010e66:	021b      	lsls	r3, r3, #8
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	b21a      	sxth	r2, r3
 8010e6e:	4b26      	ldr	r3, [pc, #152]	; (8010f08 <sensingInit+0x244>)
 8010e70:	801a      	strh	r2, [r3, #0]
	dig_H3 = ((unsigned char) dig_H_2_6[2]);
 8010e72:	1d3b      	adds	r3, r7, #4
 8010e74:	789a      	ldrb	r2, [r3, #2]
 8010e76:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <sensingInit+0x248>)
 8010e78:	701a      	strb	r2, [r3, #0]

	dig_H4 =
			(((int16_t) dig_H_2_6[3]) << 4 | (((int16_t) dig_H_2_6[4]) & 0x0f));
 8010e7a:	1d3b      	adds	r3, r7, #4
 8010e7c:	78db      	ldrb	r3, [r3, #3]
 8010e7e:	011b      	lsls	r3, r3, #4
 8010e80:	b21a      	sxth	r2, r3
 8010e82:	1d3b      	adds	r3, r7, #4
 8010e84:	791b      	ldrb	r3, [r3, #4]
 8010e86:	b21b      	sxth	r3, r3
 8010e88:	210f      	movs	r1, #15
 8010e8a:	400b      	ands	r3, r1
 8010e8c:	b21b      	sxth	r3, r3
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	b21a      	sxth	r2, r3
	dig_H4 =
 8010e92:	4b1f      	ldr	r3, [pc, #124]	; (8010f10 <sensingInit+0x24c>)
 8010e94:	801a      	strh	r2, [r3, #0]
	dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4 | ((int16_t) dig_H_2_6[5]) << 4);
 8010e96:	1d3b      	adds	r3, r7, #4
 8010e98:	791b      	ldrb	r3, [r3, #4]
 8010e9a:	091b      	lsrs	r3, r3, #4
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	b21a      	sxth	r2, r3
 8010ea0:	1d3b      	adds	r3, r7, #4
 8010ea2:	795b      	ldrb	r3, [r3, #5]
 8010ea4:	011b      	lsls	r3, r3, #4
 8010ea6:	b21b      	sxth	r3, r3
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	b21a      	sxth	r2, r3
 8010eac:	4b19      	ldr	r3, [pc, #100]	; (8010f14 <sensingInit+0x250>)
 8010eae:	801a      	strh	r2, [r3, #0]
	dig_H6 = ((unsigned char) dig_H_2_6[6]);
 8010eb0:	1d3b      	adds	r3, r7, #4
 8010eb2:	799a      	ldrb	r2, [r3, #6]
 8010eb4:	4b18      	ldr	r3, [pc, #96]	; (8010f18 <sensingInit+0x254>)
 8010eb6:	701a      	strb	r2, [r3, #0]

	sensingRead();
 8010eb8:	f000 f830 	bl	8010f1c <sensingRead>

}
 8010ebc:	46c0      	nop			; (mov r8, r8)
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	b00b      	add	sp, #44	; 0x2c
 8010ec2:	bd90      	pop	{r4, r7, pc}
 8010ec4:	20000334 	.word	0x20000334
 8010ec8:	20000454 	.word	0x20000454
 8010ecc:	20000042 	.word	0x20000042
 8010ed0:	2000021c 	.word	0x2000021c
 8010ed4:	20000204 	.word	0x20000204
 8010ed8:	20000378 	.word	0x20000378
 8010edc:	200006f2 	.word	0x200006f2
 8010ee0:	20000698 	.word	0x20000698
 8010ee4:	2000043c 	.word	0x2000043c
 8010ee8:	2000069a 	.word	0x2000069a
 8010eec:	20000440 	.word	0x20000440
 8010ef0:	20000626 	.word	0x20000626
 8010ef4:	200006fc 	.word	0x200006fc
 8010ef8:	200001fc 	.word	0x200001fc
 8010efc:	2000069c 	.word	0x2000069c
 8010f00:	200006f0 	.word	0x200006f0
 8010f04:	200003ae 	.word	0x200003ae
 8010f08:	20000708 	.word	0x20000708
 8010f0c:	200006e1 	.word	0x200006e1
 8010f10:	20000376 	.word	0x20000376
 8010f14:	200006a6 	.word	0x200006a6
 8010f18:	200004c1 	.word	0x200004c1

08010f1c <sensingRead>:

void sensingRead(void) {
 8010f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f1e:	b095      	sub	sp, #84	; 0x54
 8010f20:	af04      	add	r7, sp, #16

	//								ADC READINGS
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcReading, 3);
 8010f22:	49b8      	ldr	r1, [pc, #736]	; (8011204 <sensingRead+0x2e8>)
 8010f24:	4bb8      	ldr	r3, [pc, #736]	; (8011208 <sensingRead+0x2ec>)
 8010f26:	2203      	movs	r2, #3
 8010f28:	0018      	movs	r0, r3
 8010f2a:	f7f2 fe4d 	bl	8003bc8 <HAL_ADC_Start_DMA>
	float voltagePassiveRaw;
	float voltageDropRaw;
	float currentRaw;
	float resistanceRaw;

	voltageBatteryRaw = ((3300 * adcReading[0]) / 4095) * 2;
 8010f2e:	4bb5      	ldr	r3, [pc, #724]	; (8011204 <sensingRead+0x2e8>)
 8010f30:	881b      	ldrh	r3, [r3, #0]
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	001a      	movs	r2, r3
 8010f36:	4bb5      	ldr	r3, [pc, #724]	; (801120c <sensingRead+0x2f0>)
 8010f38:	4353      	muls	r3, r2
 8010f3a:	49b5      	ldr	r1, [pc, #724]	; (8011210 <sensingRead+0x2f4>)
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	f7ef f973 	bl	8000228 <__divsi3>
 8010f42:	0003      	movs	r3, r0
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	637b      	str	r3, [r7, #52]	; 0x34

	if (voltageBatteryRaw < batteryLevels[0])
 8010f48:	4bb2      	ldr	r3, [pc, #712]	; (8011214 <sensingRead+0x2f8>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	001a      	movs	r2, r3
 8010f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d202      	bcs.n	8010f5a <sensingRead+0x3e>
		batteryState = 8;
 8010f54:	4bb0      	ldr	r3, [pc, #704]	; (8011218 <sensingRead+0x2fc>)
 8010f56:	2208      	movs	r2, #8
 8010f58:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[0]
 8010f5a:	4bae      	ldr	r3, [pc, #696]	; (8011214 <sensingRead+0x2f8>)
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	001a      	movs	r2, r3
 8010f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d308      	bcc.n	8010f78 <sensingRead+0x5c>
			&& voltageBatteryRaw < batteryLevels[1])
 8010f66:	4bab      	ldr	r3, [pc, #684]	; (8011214 <sensingRead+0x2f8>)
 8010f68:	885b      	ldrh	r3, [r3, #2]
 8010f6a:	001a      	movs	r2, r3
 8010f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d202      	bcs.n	8010f78 <sensingRead+0x5c>
		batteryState = 7;
 8010f72:	4ba9      	ldr	r3, [pc, #676]	; (8011218 <sensingRead+0x2fc>)
 8010f74:	2207      	movs	r2, #7
 8010f76:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[1]
 8010f78:	4ba6      	ldr	r3, [pc, #664]	; (8011214 <sensingRead+0x2f8>)
 8010f7a:	885b      	ldrh	r3, [r3, #2]
 8010f7c:	001a      	movs	r2, r3
 8010f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d308      	bcc.n	8010f96 <sensingRead+0x7a>
			&& voltageBatteryRaw < batteryLevels[2])
 8010f84:	4ba3      	ldr	r3, [pc, #652]	; (8011214 <sensingRead+0x2f8>)
 8010f86:	889b      	ldrh	r3, [r3, #4]
 8010f88:	001a      	movs	r2, r3
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	d202      	bcs.n	8010f96 <sensingRead+0x7a>
		batteryState = 6;
 8010f90:	4ba1      	ldr	r3, [pc, #644]	; (8011218 <sensingRead+0x2fc>)
 8010f92:	2206      	movs	r2, #6
 8010f94:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[2]
 8010f96:	4b9f      	ldr	r3, [pc, #636]	; (8011214 <sensingRead+0x2f8>)
 8010f98:	889b      	ldrh	r3, [r3, #4]
 8010f9a:	001a      	movs	r2, r3
 8010f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d308      	bcc.n	8010fb4 <sensingRead+0x98>
			&& voltageBatteryRaw < batteryLevels[3])
 8010fa2:	4b9c      	ldr	r3, [pc, #624]	; (8011214 <sensingRead+0x2f8>)
 8010fa4:	88db      	ldrh	r3, [r3, #6]
 8010fa6:	001a      	movs	r2, r3
 8010fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d202      	bcs.n	8010fb4 <sensingRead+0x98>
		batteryState = 5;
 8010fae:	4b9a      	ldr	r3, [pc, #616]	; (8011218 <sensingRead+0x2fc>)
 8010fb0:	2205      	movs	r2, #5
 8010fb2:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[3]
 8010fb4:	4b97      	ldr	r3, [pc, #604]	; (8011214 <sensingRead+0x2f8>)
 8010fb6:	88db      	ldrh	r3, [r3, #6]
 8010fb8:	001a      	movs	r2, r3
 8010fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d308      	bcc.n	8010fd2 <sensingRead+0xb6>
			&& voltageBatteryRaw < batteryLevels[4])
 8010fc0:	4b94      	ldr	r3, [pc, #592]	; (8011214 <sensingRead+0x2f8>)
 8010fc2:	891b      	ldrh	r3, [r3, #8]
 8010fc4:	001a      	movs	r2, r3
 8010fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d202      	bcs.n	8010fd2 <sensingRead+0xb6>
		batteryState = 4;
 8010fcc:	4b92      	ldr	r3, [pc, #584]	; (8011218 <sensingRead+0x2fc>)
 8010fce:	2204      	movs	r2, #4
 8010fd0:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[4]
 8010fd2:	4b90      	ldr	r3, [pc, #576]	; (8011214 <sensingRead+0x2f8>)
 8010fd4:	891b      	ldrh	r3, [r3, #8]
 8010fd6:	001a      	movs	r2, r3
 8010fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d308      	bcc.n	8010ff0 <sensingRead+0xd4>
			&& voltageBatteryRaw < batteryLevels[5])
 8010fde:	4b8d      	ldr	r3, [pc, #564]	; (8011214 <sensingRead+0x2f8>)
 8010fe0:	895b      	ldrh	r3, [r3, #10]
 8010fe2:	001a      	movs	r2, r3
 8010fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d202      	bcs.n	8010ff0 <sensingRead+0xd4>
		batteryState = 3;
 8010fea:	4b8b      	ldr	r3, [pc, #556]	; (8011218 <sensingRead+0x2fc>)
 8010fec:	2203      	movs	r2, #3
 8010fee:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[5]
 8010ff0:	4b88      	ldr	r3, [pc, #544]	; (8011214 <sensingRead+0x2f8>)
 8010ff2:	895b      	ldrh	r3, [r3, #10]
 8010ff4:	001a      	movs	r2, r3
 8010ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d308      	bcc.n	801100e <sensingRead+0xf2>
			&& voltageBatteryRaw < batteryLevels[6])
 8010ffc:	4b85      	ldr	r3, [pc, #532]	; (8011214 <sensingRead+0x2f8>)
 8010ffe:	899b      	ldrh	r3, [r3, #12]
 8011000:	001a      	movs	r2, r3
 8011002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011004:	4293      	cmp	r3, r2
 8011006:	d202      	bcs.n	801100e <sensingRead+0xf2>
		batteryState = 2;
 8011008:	4b83      	ldr	r3, [pc, #524]	; (8011218 <sensingRead+0x2fc>)
 801100a:	2202      	movs	r2, #2
 801100c:	701a      	strb	r2, [r3, #0]
	if (voltageBatteryRaw >= batteryLevels[6])
 801100e:	4b81      	ldr	r3, [pc, #516]	; (8011214 <sensingRead+0x2f8>)
 8011010:	899b      	ldrh	r3, [r3, #12]
 8011012:	001a      	movs	r2, r3
 8011014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011016:	4293      	cmp	r3, r2
 8011018:	d302      	bcc.n	8011020 <sensingRead+0x104>
		batteryState = 1;
 801101a:	4b7f      	ldr	r3, [pc, #508]	; (8011218 <sensingRead+0x2fc>)
 801101c:	2201      	movs	r2, #1
 801101e:	701a      	strb	r2, [r3, #0]

	memset(voltagePassive, 0, 5);
 8011020:	4b7e      	ldr	r3, [pc, #504]	; (801121c <sensingRead+0x300>)
 8011022:	2205      	movs	r2, #5
 8011024:	2100      	movs	r1, #0
 8011026:	0018      	movs	r0, r3
 8011028:	f001 ffea 	bl	8013000 <memset>
	if (adcReading[1] > 100) {
 801102c:	4b75      	ldr	r3, [pc, #468]	; (8011204 <sensingRead+0x2e8>)
 801102e:	885b      	ldrh	r3, [r3, #2]
 8011030:	b29b      	uxth	r3, r3
 8011032:	2b64      	cmp	r3, #100	; 0x64
 8011034:	d940      	bls.n	80110b8 <sensingRead+0x19c>
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 8011036:	4b73      	ldr	r3, [pc, #460]	; (8011204 <sensingRead+0x2e8>)
 8011038:	885b      	ldrh	r3, [r3, #2]
 801103a:	b29b      	uxth	r3, r3
 801103c:	0018      	movs	r0, r3
 801103e:	f7f0 f9a5 	bl	800138c <__aeabi_ui2f>
 8011042:	1c06      	adds	r6, r0, #0
 8011044:	4b76      	ldr	r3, [pc, #472]	; (8011220 <sensingRead+0x304>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	0018      	movs	r0, r3
 801104a:	f7f0 f959 	bl	8001300 <__aeabi_i2f>
 801104e:	1c03      	adds	r3, r0, #0
 8011050:	1c19      	adds	r1, r3, #0
 8011052:	1c30      	adds	r0, r6, #0
 8011054:	f7ef faec 	bl	8000630 <__aeabi_fadd>
 8011058:	1c03      	adds	r3, r0, #0
 801105a:	1c18      	adds	r0, r3, #0
 801105c:	f7f1 ffea 	bl	8003034 <__aeabi_f2d>
 8011060:	4a70      	ldr	r2, [pc, #448]	; (8011224 <sensingRead+0x308>)
 8011062:	4b71      	ldr	r3, [pc, #452]	; (8011228 <sensingRead+0x30c>)
 8011064:	f7f1 f93e 	bl	80022e4 <__aeabi_dmul>
 8011068:	0002      	movs	r2, r0
 801106a:	000b      	movs	r3, r1
 801106c:	0010      	movs	r0, r2
 801106e:	0019      	movs	r1, r3
				/ 4095) * 40)) * gainVoltagePassive;
 8011070:	2200      	movs	r2, #0
 8011072:	4b6e      	ldr	r3, [pc, #440]	; (801122c <sensingRead+0x310>)
 8011074:	f7f0 fd30 	bl	8001ad8 <__aeabi_ddiv>
 8011078:	0002      	movs	r2, r0
 801107a:	000b      	movs	r3, r1
 801107c:	0010      	movs	r0, r2
 801107e:	0019      	movs	r1, r3
 8011080:	2200      	movs	r2, #0
 8011082:	4b6b      	ldr	r3, [pc, #428]	; (8011230 <sensingRead+0x314>)
 8011084:	f7f1 f92e 	bl	80022e4 <__aeabi_dmul>
 8011088:	0002      	movs	r2, r0
 801108a:	000b      	movs	r3, r1
 801108c:	603a      	str	r2, [r7, #0]
 801108e:	607b      	str	r3, [r7, #4]
 8011090:	4b68      	ldr	r3, [pc, #416]	; (8011234 <sensingRead+0x318>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	1c18      	adds	r0, r3, #0
 8011096:	f7f1 ffcd 	bl	8003034 <__aeabi_f2d>
 801109a:	0002      	movs	r2, r0
 801109c:	000b      	movs	r3, r1
 801109e:	6838      	ldr	r0, [r7, #0]
 80110a0:	6879      	ldr	r1, [r7, #4]
 80110a2:	f7f1 f91f 	bl	80022e4 <__aeabi_dmul>
 80110a6:	0002      	movs	r2, r0
 80110a8:	000b      	movs	r3, r1
		voltagePassiveRaw = ((((3.3 * ((float) adcReading[1] + offsetADC))
 80110aa:	0010      	movs	r0, r2
 80110ac:	0019      	movs	r1, r3
 80110ae:	f7f2 f809 	bl	80030c4 <__aeabi_d2f>
 80110b2:	1c03      	adds	r3, r0, #0
 80110b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b6:	e001      	b.n	80110bc <sensingRead+0x1a0>
	} else {
		voltagePassiveRaw = 0;
 80110b8:	2300      	movs	r3, #0
 80110ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (voltagePassiveRaw == 0) {
 80110bc:	2100      	movs	r1, #0
 80110be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110c0:	f7ef f9e8 	bl	8000494 <__aeabi_fcmpeq>
 80110c4:	1e03      	subs	r3, r0, #0
 80110c6:	d006      	beq.n	80110d6 <sensingRead+0x1ba>
		sprintf(voltagePassive, "--");
 80110c8:	4a5b      	ldr	r2, [pc, #364]	; (8011238 <sensingRead+0x31c>)
 80110ca:	4b54      	ldr	r3, [pc, #336]	; (801121c <sensingRead+0x300>)
 80110cc:	0011      	movs	r1, r2
 80110ce:	0018      	movs	r0, r3
 80110d0:	f002 f8ee 	bl	80132b0 <siprintf>
 80110d4:	e005      	b.n	80110e2 <sensingRead+0x1c6>
	} else {
		float2Text(voltagePassive, voltagePassiveRaw);
 80110d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110d8:	4b50      	ldr	r3, [pc, #320]	; (801121c <sensingRead+0x300>)
 80110da:	1c11      	adds	r1, r2, #0
 80110dc:	0018      	movs	r0, r3
 80110de:	f7ff fdc3 	bl	8010c68 <float2Text>
	}

	memset(voltageDrop, 0, 5);
 80110e2:	4b56      	ldr	r3, [pc, #344]	; (801123c <sensingRead+0x320>)
 80110e4:	2205      	movs	r2, #5
 80110e6:	2100      	movs	r1, #0
 80110e8:	0018      	movs	r0, r3
 80110ea:	f001 ff89 	bl	8013000 <memset>
	if (adcReading[2] < 3200) {
 80110ee:	4b45      	ldr	r3, [pc, #276]	; (8011204 <sensingRead+0x2e8>)
 80110f0:	889b      	ldrh	r3, [r3, #4]
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	23c8      	movs	r3, #200	; 0xc8
 80110f6:	011b      	lsls	r3, r3, #4
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d229      	bcs.n	8011150 <sensingRead+0x234>
		voltageDropRaw = ((3.3 * ((float) adcReading[2] + offsetADC)) / 4095);
 80110fc:	4b41      	ldr	r3, [pc, #260]	; (8011204 <sensingRead+0x2e8>)
 80110fe:	889b      	ldrh	r3, [r3, #4]
 8011100:	b29b      	uxth	r3, r3
 8011102:	0018      	movs	r0, r3
 8011104:	f7f0 f942 	bl	800138c <__aeabi_ui2f>
 8011108:	1c06      	adds	r6, r0, #0
 801110a:	4b45      	ldr	r3, [pc, #276]	; (8011220 <sensingRead+0x304>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	0018      	movs	r0, r3
 8011110:	f7f0 f8f6 	bl	8001300 <__aeabi_i2f>
 8011114:	1c03      	adds	r3, r0, #0
 8011116:	1c19      	adds	r1, r3, #0
 8011118:	1c30      	adds	r0, r6, #0
 801111a:	f7ef fa89 	bl	8000630 <__aeabi_fadd>
 801111e:	1c03      	adds	r3, r0, #0
 8011120:	1c18      	adds	r0, r3, #0
 8011122:	f7f1 ff87 	bl	8003034 <__aeabi_f2d>
 8011126:	4a3f      	ldr	r2, [pc, #252]	; (8011224 <sensingRead+0x308>)
 8011128:	4b3f      	ldr	r3, [pc, #252]	; (8011228 <sensingRead+0x30c>)
 801112a:	f7f1 f8db 	bl	80022e4 <__aeabi_dmul>
 801112e:	0002      	movs	r2, r0
 8011130:	000b      	movs	r3, r1
 8011132:	0010      	movs	r0, r2
 8011134:	0019      	movs	r1, r3
 8011136:	2200      	movs	r2, #0
 8011138:	4b3c      	ldr	r3, [pc, #240]	; (801122c <sensingRead+0x310>)
 801113a:	f7f0 fccd 	bl	8001ad8 <__aeabi_ddiv>
 801113e:	0002      	movs	r2, r0
 8011140:	000b      	movs	r3, r1
 8011142:	0010      	movs	r0, r2
 8011144:	0019      	movs	r1, r3
 8011146:	f7f1 ffbd 	bl	80030c4 <__aeabi_d2f>
 801114a:	1c03      	adds	r3, r0, #0
 801114c:	63bb      	str	r3, [r7, #56]	; 0x38
 801114e:	e001      	b.n	8011154 <sensingRead+0x238>

//		voltageDropRaw = voltageDropRaw - 0.59; //offset correction

	} else {
		voltageDropRaw = 0;
 8011150:	2300      	movs	r3, #0
 8011152:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if (voltageDropRaw == 0) {
 8011154:	2100      	movs	r1, #0
 8011156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011158:	f7ef f99c 	bl	8000494 <__aeabi_fcmpeq>
 801115c:	1e03      	subs	r3, r0, #0
 801115e:	d006      	beq.n	801116e <sensingRead+0x252>
		sprintf(voltageDrop, "--");
 8011160:	4a35      	ldr	r2, [pc, #212]	; (8011238 <sensingRead+0x31c>)
 8011162:	4b36      	ldr	r3, [pc, #216]	; (801123c <sensingRead+0x320>)
 8011164:	0011      	movs	r1, r2
 8011166:	0018      	movs	r0, r3
 8011168:	f002 f8a2 	bl	80132b0 <siprintf>
 801116c:	e005      	b.n	801117a <sensingRead+0x25e>
	} else {
		float2Text(voltageDrop, voltageDropRaw);
 801116e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011170:	4b32      	ldr	r3, [pc, #200]	; (801123c <sensingRead+0x320>)
 8011172:	1c11      	adds	r1, r2, #0
 8011174:	0018      	movs	r0, r3
 8011176:	f7ff fd77 	bl	8010c68 <float2Text>
	}

	memset(resistance, 0, 5);
 801117a:	4b31      	ldr	r3, [pc, #196]	; (8011240 <sensingRead+0x324>)
 801117c:	2205      	movs	r2, #5
 801117e:	2100      	movs	r1, #0
 8011180:	0018      	movs	r0, r3
 8011182:	f001 ff3d 	bl	8013000 <memset>
	currentRaw = (3.3 - voltageDropRaw) / 10000;
 8011186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011188:	f7f1 ff54 	bl	8003034 <__aeabi_f2d>
 801118c:	0002      	movs	r2, r0
 801118e:	000b      	movs	r3, r1
 8011190:	4824      	ldr	r0, [pc, #144]	; (8011224 <sensingRead+0x308>)
 8011192:	4925      	ldr	r1, [pc, #148]	; (8011228 <sensingRead+0x30c>)
 8011194:	f7f1 fb12 	bl	80027bc <__aeabi_dsub>
 8011198:	0002      	movs	r2, r0
 801119a:	000b      	movs	r3, r1
 801119c:	0010      	movs	r0, r2
 801119e:	0019      	movs	r1, r3
 80111a0:	2200      	movs	r2, #0
 80111a2:	4b28      	ldr	r3, [pc, #160]	; (8011244 <sensingRead+0x328>)
 80111a4:	f7f0 fc98 	bl	8001ad8 <__aeabi_ddiv>
 80111a8:	0002      	movs	r2, r0
 80111aa:	000b      	movs	r3, r1
 80111ac:	0010      	movs	r0, r2
 80111ae:	0019      	movs	r1, r3
 80111b0:	f7f1 ff88 	bl	80030c4 <__aeabi_d2f>
 80111b4:	1c03      	adds	r3, r0, #0
 80111b6:	633b      	str	r3, [r7, #48]	; 0x30
	resistanceRaw = (voltageDropRaw / currentRaw) / 1000;
 80111b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111bc:	f7ef fbd4 	bl	8000968 <__aeabi_fdiv>
 80111c0:	1c03      	adds	r3, r0, #0
 80111c2:	4921      	ldr	r1, [pc, #132]	; (8011248 <sensingRead+0x32c>)
 80111c4:	1c18      	adds	r0, r3, #0
 80111c6:	f7ef fbcf 	bl	8000968 <__aeabi_fdiv>
 80111ca:	1c03      	adds	r3, r0, #0
 80111cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (voltageDropRaw == 0) {
 80111ce:	2100      	movs	r1, #0
 80111d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111d2:	f7ef f95f 	bl	8000494 <__aeabi_fcmpeq>
 80111d6:	1e03      	subs	r3, r0, #0
 80111d8:	d006      	beq.n	80111e8 <sensingRead+0x2cc>
		sprintf(resistance, "--");
 80111da:	4a17      	ldr	r2, [pc, #92]	; (8011238 <sensingRead+0x31c>)
 80111dc:	4b18      	ldr	r3, [pc, #96]	; (8011240 <sensingRead+0x324>)
 80111de:	0011      	movs	r1, r2
 80111e0:	0018      	movs	r0, r3
 80111e2:	f002 f865 	bl	80132b0 <siprintf>
 80111e6:	e005      	b.n	80111f4 <sensingRead+0x2d8>
	} else {
		float2Text(resistance, resistanceRaw);
 80111e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ea:	4b15      	ldr	r3, [pc, #84]	; (8011240 <sensingRead+0x324>)
 80111ec:	1c11      	adds	r1, r2, #0
 80111ee:	0018      	movs	r0, r3
 80111f0:	f7ff fd3a 	bl	8010c68 <float2Text>
	}

	if (batteryState >= 8) {
 80111f4:	4b08      	ldr	r3, [pc, #32]	; (8011218 <sensingRead+0x2fc>)
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b07      	cmp	r3, #7
 80111fa:	d929      	bls.n	8011250 <sensingRead+0x334>

		flagBatteryLow = 1;
 80111fc:	4b13      	ldr	r3, [pc, #76]	; (801124c <sensingRead+0x330>)
 80111fe:	2201      	movs	r2, #1
 8011200:	701a      	strb	r2, [r3, #0]
 8011202:	e02b      	b.n	801125c <sensingRead+0x340>
 8011204:	20000334 	.word	0x20000334
 8011208:	20000454 	.word	0x20000454
 801120c:	00000ce4 	.word	0x00000ce4
 8011210:	00000fff 	.word	0x00000fff
 8011214:	20000034 	.word	0x20000034
 8011218:	200003a5 	.word	0x200003a5
 801121c:	20000594 	.word	0x20000594
 8011220:	20000044 	.word	0x20000044
 8011224:	66666666 	.word	0x66666666
 8011228:	400a6666 	.word	0x400a6666
 801122c:	40affe00 	.word	0x40affe00
 8011230:	40440000 	.word	0x40440000
 8011234:	20000048 	.word	0x20000048
 8011238:	08016168 	.word	0x08016168
 801123c:	20000620 	.word	0x20000620
 8011240:	200006a0 	.word	0x200006a0
 8011244:	40c38800 	.word	0x40c38800
 8011248:	447a0000 	.word	0x447a0000
 801124c:	200006ee 	.word	0x200006ee

	}else{
		flagBatteryLow = 0;
 8011250:	4bf9      	ldr	r3, [pc, #996]	; (8011638 <sensingRead+0x71c>)
 8011252:	2200      	movs	r2, #0
 8011254:	701a      	strb	r2, [r3, #0]
		flagBatteryWarningPrinted = 0;
 8011256:	4bf9      	ldr	r3, [pc, #996]	; (801163c <sensingRead+0x720>)
 8011258:	2200      	movs	r2, #0
 801125a:	701a      	strb	r2, [r3, #0]


//								BME280 READINGS

//I2C read data
	uint8_t temperatureMSB = 0;
 801125c:	2311      	movs	r3, #17
 801125e:	2208      	movs	r2, #8
 8011260:	4694      	mov	ip, r2
 8011262:	44bc      	add	ip, r7
 8011264:	4463      	add	r3, ip
 8011266:	2200      	movs	r2, #0
 8011268:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureLSB = 0;
 801126a:	2310      	movs	r3, #16
 801126c:	2208      	movs	r2, #8
 801126e:	4694      	mov	ip, r2
 8011270:	44bc      	add	ip, r7
 8011272:	4463      	add	r3, ip
 8011274:	2200      	movs	r2, #0
 8011276:	701a      	strb	r2, [r3, #0]
	uint8_t temperatureXLSB = 0;
 8011278:	230f      	movs	r3, #15
 801127a:	2208      	movs	r2, #8
 801127c:	4694      	mov	ip, r2
 801127e:	44bc      	add	ip, r7
 8011280:	4463      	add	r3, ip
 8011282:	2200      	movs	r2, #0
 8011284:	701a      	strb	r2, [r3, #0]

	uint8_t pressureMSB = 0;
 8011286:	230e      	movs	r3, #14
 8011288:	2208      	movs	r2, #8
 801128a:	4694      	mov	ip, r2
 801128c:	44bc      	add	ip, r7
 801128e:	4463      	add	r3, ip
 8011290:	2200      	movs	r2, #0
 8011292:	701a      	strb	r2, [r3, #0]
	uint8_t pressureLSB = 0;
 8011294:	230d      	movs	r3, #13
 8011296:	2208      	movs	r2, #8
 8011298:	4694      	mov	ip, r2
 801129a:	44bc      	add	ip, r7
 801129c:	4463      	add	r3, ip
 801129e:	2200      	movs	r2, #0
 80112a0:	701a      	strb	r2, [r3, #0]
	uint8_t pressureXLSB = 0;
 80112a2:	230c      	movs	r3, #12
 80112a4:	2208      	movs	r2, #8
 80112a6:	4694      	mov	ip, r2
 80112a8:	44bc      	add	ip, r7
 80112aa:	4463      	add	r3, ip
 80112ac:	2200      	movs	r2, #0
 80112ae:	701a      	strb	r2, [r3, #0]

	uint8_t humidityMSB = 0;
 80112b0:	230b      	movs	r3, #11
 80112b2:	2208      	movs	r2, #8
 80112b4:	4694      	mov	ip, r2
 80112b6:	44bc      	add	ip, r7
 80112b8:	4463      	add	r3, ip
 80112ba:	2200      	movs	r2, #0
 80112bc:	701a      	strb	r2, [r3, #0]
	uint8_t humidityLSB = 0;
 80112be:	230a      	movs	r3, #10
 80112c0:	2208      	movs	r2, #8
 80112c2:	4694      	mov	ip, r2
 80112c4:	44bc      	add	ip, r7
 80112c6:	4463      	add	r3, ip
 80112c8:	2200      	movs	r2, #0
 80112ca:	701a      	strb	r2, [r3, #0]

	//adc data
	BME280_S32_t temperatureADC = 0;
 80112cc:	2300      	movs	r3, #0
 80112ce:	62bb      	str	r3, [r7, #40]	; 0x28
	BME280_S32_t pressureADC = 0;
 80112d0:	2300      	movs	r3, #0
 80112d2:	627b      	str	r3, [r7, #36]	; 0x24
	BME280_S32_t humidityADC = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	623b      	str	r3, [r7, #32]

	//configure oversampling for hum
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_HUM, 1, &ctrlHum, 1,
 80112d8:	48d9      	ldr	r0, [pc, #868]	; (8011640 <sensingRead+0x724>)
 80112da:	2332      	movs	r3, #50	; 0x32
 80112dc:	9302      	str	r3, [sp, #8]
 80112de:	2301      	movs	r3, #1
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	4bd8      	ldr	r3, [pc, #864]	; (8011644 <sensingRead+0x728>)
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	2301      	movs	r3, #1
 80112e8:	22f2      	movs	r2, #242	; 0xf2
 80112ea:	21ee      	movs	r1, #238	; 0xee
 80112ec:	f7f3 ff36 	bl	800515c <HAL_I2C_Mem_Write>
 80112f0:	1e03      	subs	r3, r0, #0
 80112f2:	d001      	beq.n	80112f8 <sensingRead+0x3dc>
			50) != HAL_OK) {
		Error_Handler();
 80112f4:	f7ff f9ee 	bl	80106d4 <Error_Handler>
	};

	//configure oversampling for press, temp
	//configure mode as force
	if (HAL_I2C_Mem_Write(&hi2c1, BME280_ADDR, BME280_CTRL_MEAS, 1, &ctrlMeas,
 80112f8:	48d1      	ldr	r0, [pc, #836]	; (8011640 <sensingRead+0x724>)
 80112fa:	2332      	movs	r3, #50	; 0x32
 80112fc:	9302      	str	r3, [sp, #8]
 80112fe:	2301      	movs	r3, #1
 8011300:	9301      	str	r3, [sp, #4]
 8011302:	4bd1      	ldr	r3, [pc, #836]	; (8011648 <sensingRead+0x72c>)
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	2301      	movs	r3, #1
 8011308:	22f4      	movs	r2, #244	; 0xf4
 801130a:	21ee      	movs	r1, #238	; 0xee
 801130c:	f7f3 ff26 	bl	800515c <HAL_I2C_Mem_Write>
 8011310:	1e03      	subs	r3, r0, #0
 8011312:	d001      	beq.n	8011318 <sensingRead+0x3fc>
			1, 50) != HAL_OK) {
		Error_Handler();
 8011314:	f7ff f9de 	bl	80106d4 <Error_Handler>
		;
	}

//wait for end
	HAL_Delay(70);
 8011318:	2046      	movs	r0, #70	; 0x46
 801131a:	f7f2 f8f1 	bl	8003500 <HAL_Delay>

	//HUMIDITY

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_MSB, 1, &humidityMSB, 1,
 801131e:	4bcb      	ldr	r3, [pc, #812]	; (801164c <sensingRead+0x730>)
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	48c7      	ldr	r0, [pc, #796]	; (8011640 <sensingRead+0x724>)
 8011324:	9302      	str	r3, [sp, #8]
 8011326:	2301      	movs	r3, #1
 8011328:	9301      	str	r3, [sp, #4]
 801132a:	260b      	movs	r6, #11
 801132c:	2308      	movs	r3, #8
 801132e:	18fa      	adds	r2, r7, r3
 8011330:	1993      	adds	r3, r2, r6
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	2301      	movs	r3, #1
 8011336:	22fd      	movs	r2, #253	; 0xfd
 8011338:	21ee      	movs	r1, #238	; 0xee
 801133a:	f7f4 f83d 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_HUM_LSB, 1, &humidityLSB, 1,
 801133e:	4bc3      	ldr	r3, [pc, #780]	; (801164c <sensingRead+0x730>)
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	48bf      	ldr	r0, [pc, #764]	; (8011640 <sensingRead+0x724>)
 8011344:	9302      	str	r3, [sp, #8]
 8011346:	2301      	movs	r3, #1
 8011348:	9301      	str	r3, [sp, #4]
 801134a:	230a      	movs	r3, #10
 801134c:	2208      	movs	r2, #8
 801134e:	4694      	mov	ip, r2
 8011350:	44bc      	add	ip, r7
 8011352:	4463      	add	r3, ip
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	2301      	movs	r3, #1
 8011358:	22fe      	movs	r2, #254	; 0xfe
 801135a:	21ee      	movs	r1, #238	; 0xee
 801135c:	f7f4 f82c 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);

	humidityADC = (((int32_t) humidityMSB << 8) | (int32_t) humidityLSB);
 8011360:	2308      	movs	r3, #8
 8011362:	18fa      	adds	r2, r7, r3
 8011364:	1993      	adds	r3, r2, r6
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	021b      	lsls	r3, r3, #8
 801136a:	220a      	movs	r2, #10
 801136c:	2108      	movs	r1, #8
 801136e:	468c      	mov	ip, r1
 8011370:	44bc      	add	ip, r7
 8011372:	4462      	add	r2, ip
 8011374:	7812      	ldrb	r2, [r2, #0]
 8011376:	4313      	orrs	r3, r2
 8011378:	623b      	str	r3, [r7, #32]

	humidityValue = BME280_compensate_H_int32(humidityADC) / 1024;
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	0018      	movs	r0, r3
 801137e:	f000 fcb7 	bl	8011cf0 <BME280_compensate_H_int32>
 8011382:	0003      	movs	r3, r0
 8011384:	0a9a      	lsrs	r2, r3, #10
 8011386:	4bb2      	ldr	r3, [pc, #712]	; (8011650 <sensingRead+0x734>)
 8011388:	601a      	str	r2, [r3, #0]

	//TEMPERATURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_MSB, 1, &temperatureMSB,
 801138a:	4bb0      	ldr	r3, [pc, #704]	; (801164c <sensingRead+0x730>)
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	48ac      	ldr	r0, [pc, #688]	; (8011640 <sensingRead+0x724>)
 8011390:	9302      	str	r3, [sp, #8]
 8011392:	2301      	movs	r3, #1
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	2611      	movs	r6, #17
 8011398:	2308      	movs	r3, #8
 801139a:	18fa      	adds	r2, r7, r3
 801139c:	1993      	adds	r3, r2, r6
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	2301      	movs	r3, #1
 80113a2:	22fa      	movs	r2, #250	; 0xfa
 80113a4:	21ee      	movs	r1, #238	; 0xee
 80113a6:	f7f4 f807 	bl	80053b8 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_LSB, 1, &temperatureLSB,
 80113aa:	4ba8      	ldr	r3, [pc, #672]	; (801164c <sensingRead+0x730>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	48a4      	ldr	r0, [pc, #656]	; (8011640 <sensingRead+0x724>)
 80113b0:	9302      	str	r3, [sp, #8]
 80113b2:	2301      	movs	r3, #1
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	2310      	movs	r3, #16
 80113b8:	2208      	movs	r2, #8
 80113ba:	4694      	mov	ip, r2
 80113bc:	44bc      	add	ip, r7
 80113be:	4463      	add	r3, ip
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	2301      	movs	r3, #1
 80113c4:	22fb      	movs	r2, #251	; 0xfb
 80113c6:	21ee      	movs	r1, #238	; 0xee
 80113c8:	f7f3 fff6 	bl	80053b8 <HAL_I2C_Mem_Read>
			1, i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_TEMP_XLSB, 1, &temperatureXLSB,
 80113cc:	4b9f      	ldr	r3, [pc, #636]	; (801164c <sensingRead+0x730>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	489b      	ldr	r0, [pc, #620]	; (8011640 <sensingRead+0x724>)
 80113d2:	9302      	str	r3, [sp, #8]
 80113d4:	2301      	movs	r3, #1
 80113d6:	9301      	str	r3, [sp, #4]
 80113d8:	220f      	movs	r2, #15
 80113da:	2308      	movs	r3, #8
 80113dc:	18f9      	adds	r1, r7, r3
 80113de:	188b      	adds	r3, r1, r2
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	2301      	movs	r3, #1
 80113e4:	22fc      	movs	r2, #252	; 0xfc
 80113e6:	21ee      	movs	r1, #238	; 0xee
 80113e8:	f7f3 ffe6 	bl	80053b8 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	temperatureADC =
			((((int32_t) temperatureMSB << 12) | ((int32_t) temperatureLSB << 4)
 80113ec:	2308      	movs	r3, #8
 80113ee:	18fa      	adds	r2, r7, r3
 80113f0:	1993      	adds	r3, r2, r6
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	031a      	lsls	r2, r3, #12
 80113f6:	2310      	movs	r3, #16
 80113f8:	2108      	movs	r1, #8
 80113fa:	468c      	mov	ip, r1
 80113fc:	44bc      	add	ip, r7
 80113fe:	4463      	add	r3, ip
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	011b      	lsls	r3, r3, #4
 8011404:	4313      	orrs	r3, r2
					| ((int32_t) temperatureXLSB >> 4)));
 8011406:	220f      	movs	r2, #15
 8011408:	2108      	movs	r1, #8
 801140a:	468c      	mov	ip, r1
 801140c:	44bc      	add	ip, r7
 801140e:	4462      	add	r2, ip
 8011410:	7812      	ldrb	r2, [r2, #0]
 8011412:	0912      	lsrs	r2, r2, #4
 8011414:	b2d2      	uxtb	r2, r2
	temperatureADC =
 8011416:	4313      	orrs	r3, r2
 8011418:	62bb      	str	r3, [r7, #40]	; 0x28

	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 801141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141c:	0018      	movs	r0, r3
 801141e:	f000 fa7f 	bl	8011920 <BME280_compensate_T_int32>
 8011422:	0003      	movs	r3, r0
 8011424:	2164      	movs	r1, #100	; 0x64
 8011426:	0018      	movs	r0, r3
 8011428:	f7ee fefe 	bl	8000228 <__divsi3>
 801142c:	0003      	movs	r3, r0
 801142e:	001a      	movs	r2, r3
			+ temperatureCompensation;
 8011430:	4b88      	ldr	r3, [pc, #544]	; (8011654 <sensingRead+0x738>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	b25b      	sxtb	r3, r3
 8011436:	18d2      	adds	r2, r2, r3
	temperatureValue = (BME280_compensate_T_int32(temperatureADC) / 100)
 8011438:	4b87      	ldr	r3, [pc, #540]	; (8011658 <sensingRead+0x73c>)
 801143a:	601a      	str	r2, [r3, #0]

	//PRESSURE

	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_MSB, 1, &pressureMSB, 1,
 801143c:	4b83      	ldr	r3, [pc, #524]	; (801164c <sensingRead+0x730>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	487f      	ldr	r0, [pc, #508]	; (8011640 <sensingRead+0x724>)
 8011442:	9302      	str	r3, [sp, #8]
 8011444:	2301      	movs	r3, #1
 8011446:	9301      	str	r3, [sp, #4]
 8011448:	260e      	movs	r6, #14
 801144a:	2308      	movs	r3, #8
 801144c:	18fa      	adds	r2, r7, r3
 801144e:	1993      	adds	r3, r2, r6
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	2301      	movs	r3, #1
 8011454:	22f7      	movs	r2, #247	; 0xf7
 8011456:	21ee      	movs	r1, #238	; 0xee
 8011458:	f7f3 ffae 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_LSB, 1, &pressureLSB, 1,
 801145c:	4b7b      	ldr	r3, [pc, #492]	; (801164c <sensingRead+0x730>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	4877      	ldr	r0, [pc, #476]	; (8011640 <sensingRead+0x724>)
 8011462:	9302      	str	r3, [sp, #8]
 8011464:	2301      	movs	r3, #1
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	230d      	movs	r3, #13
 801146a:	2208      	movs	r2, #8
 801146c:	4694      	mov	ip, r2
 801146e:	44bc      	add	ip, r7
 8011470:	4463      	add	r3, ip
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	2301      	movs	r3, #1
 8011476:	22f8      	movs	r2, #248	; 0xf8
 8011478:	21ee      	movs	r1, #238	; 0xee
 801147a:	f7f3 ff9d 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDR, BME280_PRESS_XLSB, 1, &pressureXLSB,
 801147e:	4b73      	ldr	r3, [pc, #460]	; (801164c <sensingRead+0x730>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	486f      	ldr	r0, [pc, #444]	; (8011640 <sensingRead+0x724>)
 8011484:	9302      	str	r3, [sp, #8]
 8011486:	2301      	movs	r3, #1
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	220c      	movs	r2, #12
 801148c:	2308      	movs	r3, #8
 801148e:	18f9      	adds	r1, r7, r3
 8011490:	188b      	adds	r3, r1, r2
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	2301      	movs	r3, #1
 8011496:	22f9      	movs	r2, #249	; 0xf9
 8011498:	21ee      	movs	r1, #238	; 0xee
 801149a:	f7f3 ff8d 	bl	80053b8 <HAL_I2C_Mem_Read>
			1, i2cTimeout);

	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 801149e:	2308      	movs	r3, #8
 80114a0:	18fb      	adds	r3, r7, r3
 80114a2:	199b      	adds	r3, r3, r6
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	031a      	lsls	r2, r3, #12
 80114a8:	230d      	movs	r3, #13
 80114aa:	2108      	movs	r1, #8
 80114ac:	468c      	mov	ip, r1
 80114ae:	44bc      	add	ip, r7
 80114b0:	4463      	add	r3, ip
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	011b      	lsls	r3, r3, #4
 80114b6:	4313      	orrs	r3, r2
			| ((int32_t) pressureXLSB >> 4)));
 80114b8:	220c      	movs	r2, #12
 80114ba:	2108      	movs	r1, #8
 80114bc:	468c      	mov	ip, r1
 80114be:	44bc      	add	ip, r7
 80114c0:	4462      	add	r2, ip
 80114c2:	7812      	ldrb	r2, [r2, #0]
 80114c4:	0912      	lsrs	r2, r2, #4
 80114c6:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) pressureMSB << 12) | ((int32_t) pressureLSB << 4)
 80114c8:	4313      	orrs	r3, r2
 80114ca:	627b      	str	r3, [r7, #36]	; 0x24

	pressureValue = BME280_compensate_P_int64(pressureADC) / 256;
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	0018      	movs	r0, r3
 80114d0:	f000 fa62 	bl	8011998 <BME280_compensate_P_int64>
 80114d4:	0003      	movs	r3, r0
 80114d6:	0a1a      	lsrs	r2, r3, #8
 80114d8:	4b60      	ldr	r3, [pc, #384]	; (801165c <sensingRead+0x740>)
 80114da:	601a      	str	r2, [r3, #0]
	 * R- gas constant[J/(mol*K)]
	 * T- air temperature[K]
	 *
	 */

	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 80114dc:	4b5e      	ldr	r3, [pc, #376]	; (8011658 <sensingRead+0x73c>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	0018      	movs	r0, r3
 80114e2:	f7ef ff0d 	bl	8001300 <__aeabi_i2f>
 80114e6:	1c03      	adds	r3, r0, #0
 80114e8:	1c18      	adds	r0, r3, #0
 80114ea:	f7f1 fda3 	bl	8003034 <__aeabi_f2d>
 80114ee:	4a5c      	ldr	r2, [pc, #368]	; (8011660 <sensingRead+0x744>)
 80114f0:	4b5c      	ldr	r3, [pc, #368]	; (8011664 <sensingRead+0x748>)
 80114f2:	f7ef ff87 	bl	8001404 <__aeabi_dadd>
 80114f6:	0002      	movs	r2, r0
 80114f8:	000b      	movs	r3, r1
 80114fa:	0010      	movs	r0, r2
 80114fc:	0019      	movs	r1, r3
 80114fe:	4a5a      	ldr	r2, [pc, #360]	; (8011668 <sensingRead+0x74c>)
 8011500:	4b5a      	ldr	r3, [pc, #360]	; (801166c <sensingRead+0x750>)
 8011502:	f7f0 feef 	bl	80022e4 <__aeabi_dmul>
 8011506:	0002      	movs	r2, r0
 8011508:	000b      	movs	r3, r1
 801150a:	0010      	movs	r0, r2
 801150c:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 801150e:	4a58      	ldr	r2, [pc, #352]	; (8011670 <sensingRead+0x754>)
 8011510:	4b58      	ldr	r3, [pc, #352]	; (8011674 <sensingRead+0x758>)
 8011512:	f7f0 fae1 	bl	8001ad8 <__aeabi_ddiv>
 8011516:	0002      	movs	r2, r0
 8011518:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 801151a:	0011      	movs	r1, r2
 801151c:	000c      	movs	r4, r1
 801151e:	2180      	movs	r1, #128	; 0x80
 8011520:	0609      	lsls	r1, r1, #24
 8011522:	4059      	eors	r1, r3
 8011524:	000d      	movs	r5, r1
			* log((float) pressureValue / ((float) pressureReference * 100));
 8011526:	4b4d      	ldr	r3, [pc, #308]	; (801165c <sensingRead+0x740>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	0018      	movs	r0, r3
 801152c:	f7ef ff2e 	bl	800138c <__aeabi_ui2f>
 8011530:	1c06      	adds	r6, r0, #0
 8011532:	4b51      	ldr	r3, [pc, #324]	; (8011678 <sensingRead+0x75c>)
 8011534:	881b      	ldrh	r3, [r3, #0]
 8011536:	b21b      	sxth	r3, r3
 8011538:	0018      	movs	r0, r3
 801153a:	f7ef fee1 	bl	8001300 <__aeabi_i2f>
 801153e:	1c03      	adds	r3, r0, #0
 8011540:	494e      	ldr	r1, [pc, #312]	; (801167c <sensingRead+0x760>)
 8011542:	1c18      	adds	r0, r3, #0
 8011544:	f7ef fbda 	bl	8000cfc <__aeabi_fmul>
 8011548:	1c03      	adds	r3, r0, #0
 801154a:	1c19      	adds	r1, r3, #0
 801154c:	1c30      	adds	r0, r6, #0
 801154e:	f7ef fa0b 	bl	8000968 <__aeabi_fdiv>
 8011552:	1c03      	adds	r3, r0, #0
 8011554:	1c18      	adds	r0, r3, #0
 8011556:	f7f1 fd6d 	bl	8003034 <__aeabi_f2d>
 801155a:	0002      	movs	r2, r0
 801155c:	000b      	movs	r3, r1
 801155e:	0010      	movs	r0, r2
 8011560:	0019      	movs	r1, r3
 8011562:	f002 ffc7 	bl	80144f4 <log>
 8011566:	0002      	movs	r2, r0
 8011568:	000b      	movs	r3, r1
 801156a:	0020      	movs	r0, r4
 801156c:	0029      	movs	r1, r5
 801156e:	f7f0 feb9 	bl	80022e4 <__aeabi_dmul>
 8011572:	0002      	movs	r2, r0
 8011574:	000b      	movs	r3, r1
	altitudeValue = -((8.314 * ((float) temperatureValue + 273.15))
 8011576:	0010      	movs	r0, r2
 8011578:	0019      	movs	r1, r3
 801157a:	f7f1 fccf 	bl	8002f1c <__aeabi_d2iz>
 801157e:	0002      	movs	r2, r0
 8011580:	4b3f      	ldr	r3, [pc, #252]	; (8011680 <sensingRead+0x764>)
 8011582:	601a      	str	r2, [r3, #0]

	pressureValue = pressureValue / 100;
 8011584:	4b35      	ldr	r3, [pc, #212]	; (801165c <sensingRead+0x740>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2164      	movs	r1, #100	; 0x64
 801158a:	0018      	movs	r0, r3
 801158c:	f7ee fdc2 	bl	8000114 <__udivsi3>
 8011590:	0003      	movs	r3, r0
 8011592:	001a      	movs	r2, r3
 8011594:	4b31      	ldr	r3, [pc, #196]	; (801165c <sensingRead+0x740>)
 8011596:	601a      	str	r2, [r3, #0]

	//								LIS3MDL READINGS

	//magnetometer data
	uint8_t magnetXLSB = 0;
 8011598:	2309      	movs	r3, #9
 801159a:	2208      	movs	r2, #8
 801159c:	4694      	mov	ip, r2
 801159e:	44bc      	add	ip, r7
 80115a0:	4463      	add	r3, ip
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
	uint8_t magnetXMSB = 0;
 80115a6:	2308      	movs	r3, #8
 80115a8:	2208      	movs	r2, #8
 80115aa:	4694      	mov	ip, r2
 80115ac:	44bc      	add	ip, r7
 80115ae:	4463      	add	r3, ip
 80115b0:	2200      	movs	r2, #0
 80115b2:	701a      	strb	r2, [r3, #0]

	uint8_t magnetYLSB = 0;
 80115b4:	230f      	movs	r3, #15
 80115b6:	18fb      	adds	r3, r7, r3
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
	uint8_t magnetYMSB = 0;
 80115bc:	230e      	movs	r3, #14
 80115be:	18fb      	adds	r3, r7, r3
 80115c0:	2200      	movs	r2, #0
 80115c2:	701a      	strb	r2, [r3, #0]

	int16_t magneticFieldXADC;
	int16_t magneticFieldYADC;

	if (HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 80115c4:	4b21      	ldr	r3, [pc, #132]	; (801164c <sensingRead+0x730>)
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	481d      	ldr	r0, [pc, #116]	; (8011640 <sensingRead+0x724>)
 80115ca:	9302      	str	r3, [sp, #8]
 80115cc:	2301      	movs	r3, #1
 80115ce:	9301      	str	r3, [sp, #4]
 80115d0:	4b2c      	ldr	r3, [pc, #176]	; (8011684 <sensingRead+0x768>)
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	2301      	movs	r3, #1
 80115d6:	2222      	movs	r2, #34	; 0x22
 80115d8:	2138      	movs	r1, #56	; 0x38
 80115da:	f7f3 fdbf 	bl	800515c <HAL_I2C_Mem_Write>
 80115de:	1e03      	subs	r3, r0, #0
 80115e0:	d001      	beq.n	80115e6 <sensingRead+0x6ca>
			&ctrlMagnetometerContinous, 1, i2cTimeout) != HAL_OK) {
		Error_Handler();
 80115e2:	f7ff f877 	bl	80106d4 <Error_Handler>
	};

	HAL_Delay(20);
 80115e6:	2014      	movs	r0, #20
 80115e8:	f7f1 ff8a 	bl	8003500 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_L, 1, &magnetXLSB, 1,
 80115ec:	4b17      	ldr	r3, [pc, #92]	; (801164c <sensingRead+0x730>)
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	4813      	ldr	r0, [pc, #76]	; (8011640 <sensingRead+0x724>)
 80115f2:	9302      	str	r3, [sp, #8]
 80115f4:	2301      	movs	r3, #1
 80115f6:	9301      	str	r3, [sp, #4]
 80115f8:	2409      	movs	r4, #9
 80115fa:	2608      	movs	r6, #8
 80115fc:	19bb      	adds	r3, r7, r6
 80115fe:	191b      	adds	r3, r3, r4
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	2301      	movs	r3, #1
 8011604:	2228      	movs	r2, #40	; 0x28
 8011606:	2138      	movs	r1, #56	; 0x38
 8011608:	f7f3 fed6 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1, &magnetXMSB, 1,
 801160c:	4b0f      	ldr	r3, [pc, #60]	; (801164c <sensingRead+0x730>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	480b      	ldr	r0, [pc, #44]	; (8011640 <sensingRead+0x724>)
 8011612:	9302      	str	r3, [sp, #8]
 8011614:	2301      	movs	r3, #1
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	2508      	movs	r5, #8
 801161a:	19bb      	adds	r3, r7, r6
 801161c:	195b      	adds	r3, r3, r5
 801161e:	9300      	str	r3, [sp, #0]
 8011620:	2301      	movs	r3, #1
 8011622:	2229      	movs	r2, #41	; 0x29
 8011624:	2138      	movs	r1, #56	; 0x38
 8011626:	f7f3 fec7 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_L, 1, &magnetYLSB, 1,
 801162a:	4b08      	ldr	r3, [pc, #32]	; (801164c <sensingRead+0x730>)
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	4804      	ldr	r0, [pc, #16]	; (8011640 <sensingRead+0x724>)
 8011630:	9302      	str	r3, [sp, #8]
 8011632:	2301      	movs	r3, #1
 8011634:	e028      	b.n	8011688 <sensingRead+0x76c>
 8011636:	46c0      	nop			; (mov r8, r8)
 8011638:	200006ee 	.word	0x200006ee
 801163c:	200001fe 	.word	0x200001fe
 8011640:	2000021c 	.word	0x2000021c
 8011644:	2000002e 	.word	0x2000002e
 8011648:	2000002d 	.word	0x2000002d
 801164c:	20000042 	.word	0x20000042
 8011650:	2000020c 	.word	0x2000020c
 8011654:	20000030 	.word	0x20000030
 8011658:	200003a8 	.word	0x200003a8
 801165c:	20000634 	.word	0x20000634
 8011660:	66666666 	.word	0x66666666
 8011664:	40711266 	.word	0x40711266
 8011668:	9ba5e354 	.word	0x9ba5e354
 801166c:	4020a0c4 	.word	0x4020a0c4
 8011670:	db22d0e5 	.word	0xdb22d0e5
 8011674:	3fd27ef9 	.word	0x3fd27ef9
 8011678:	20000032 	.word	0x20000032
 801167c:	42c80000 	.word	0x42c80000
 8011680:	2000063c 	.word	0x2000063c
 8011684:	200001bd 	.word	0x200001bd
 8011688:	9301      	str	r3, [sp, #4]
 801168a:	230f      	movs	r3, #15
 801168c:	18fb      	adds	r3, r7, r3
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	2301      	movs	r3, #1
 8011692:	222a      	movs	r2, #42	; 0x2a
 8011694:	2138      	movs	r1, #56	; 0x38
 8011696:	f7f3 fe8f 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);
	HAL_I2C_Mem_Read(&hi2c1, LIS3MDL_ADDR, LIS3MDL_OUT_Y_H, 1, &magnetYMSB, 1,
 801169a:	4b91      	ldr	r3, [pc, #580]	; (80118e0 <sensingRead+0x9c4>)
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	4891      	ldr	r0, [pc, #580]	; (80118e4 <sensingRead+0x9c8>)
 80116a0:	9302      	str	r3, [sp, #8]
 80116a2:	2301      	movs	r3, #1
 80116a4:	9301      	str	r3, [sp, #4]
 80116a6:	230e      	movs	r3, #14
 80116a8:	18fb      	adds	r3, r7, r3
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	2301      	movs	r3, #1
 80116ae:	222b      	movs	r2, #43	; 0x2b
 80116b0:	2138      	movs	r1, #56	; 0x38
 80116b2:	f7f3 fe81 	bl	80053b8 <HAL_I2C_Mem_Read>
			i2cTimeout);

	magneticFieldXADC = (int16_t) magnetXMSB << 8 | (int16_t) magnetXLSB;
 80116b6:	19ba      	adds	r2, r7, r6
 80116b8:	1953      	adds	r3, r2, r5
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	021b      	lsls	r3, r3, #8
 80116be:	b219      	sxth	r1, r3
 80116c0:	19ba      	adds	r2, r7, r6
 80116c2:	1913      	adds	r3, r2, r4
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	b21a      	sxth	r2, r3
 80116c8:	2016      	movs	r0, #22
 80116ca:	19bc      	adds	r4, r7, r6
 80116cc:	1823      	adds	r3, r4, r0
 80116ce:	430a      	orrs	r2, r1
 80116d0:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = (int16_t) magnetYMSB << 8 | (int16_t) magnetYLSB;
 80116d2:	230e      	movs	r3, #14
 80116d4:	18fb      	adds	r3, r7, r3
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	021b      	lsls	r3, r3, #8
 80116da:	b219      	sxth	r1, r3
 80116dc:	230f      	movs	r3, #15
 80116de:	18fb      	adds	r3, r7, r3
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	b21a      	sxth	r2, r3
 80116e4:	2414      	movs	r4, #20
 80116e6:	19bb      	adds	r3, r7, r6
 80116e8:	191b      	adds	r3, r3, r4
 80116ea:	430a      	orrs	r2, r1
 80116ec:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL OFFSET CORRECTION

//	//for 4 Gs
	magneticFieldXADC = magneticFieldXADC + offsetMagnetometerX;
 80116ee:	4b7e      	ldr	r3, [pc, #504]	; (80118e8 <sensingRead+0x9cc>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	19bb      	adds	r3, r7, r6
 80116f6:	181b      	adds	r3, r3, r0
 80116f8:	881b      	ldrh	r3, [r3, #0]
 80116fa:	18d3      	adds	r3, r2, r3
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	19bb      	adds	r3, r7, r6
 8011700:	181b      	adds	r3, r3, r0
 8011702:	801a      	strh	r2, [r3, #0]
	magneticFieldYADC = magneticFieldYADC + offsetMagnetometerY;
 8011704:	4b79      	ldr	r3, [pc, #484]	; (80118ec <sensingRead+0x9d0>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	b29a      	uxth	r2, r3
 801170a:	19bb      	adds	r3, r7, r6
 801170c:	191b      	adds	r3, r3, r4
 801170e:	881b      	ldrh	r3, [r3, #0]
 8011710:	18d3      	adds	r3, r2, r3
 8011712:	b29a      	uxth	r2, r3
 8011714:	19bb      	adds	r3, r7, r6
 8011716:	191b      	adds	r3, r3, r4
 8011718:	801a      	strh	r2, [r3, #0]
//	magneticFieldYADC = 0;

	//								LIS3MDL DECREASE VALUE

//	uint16_t magneticFieldDivider = 270;
	uint16_t magneticFieldDivider = 130;
 801171a:	2512      	movs	r5, #18
 801171c:	19bb      	adds	r3, r7, r6
 801171e:	195b      	adds	r3, r3, r5
 8011720:	2282      	movs	r2, #130	; 0x82
 8011722:	801a      	strh	r2, [r3, #0]
//	if (magneticFieldY < -12)
//		magneticFieldY = -12;

//	new method
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
			/ magneticFieldDivider;
 8011724:	19bb      	adds	r3, r7, r6
 8011726:	181b      	adds	r3, r3, r0
 8011728:	2200      	movs	r2, #0
 801172a:	5e9a      	ldrsh	r2, [r3, r2]
 801172c:	19bb      	adds	r3, r7, r6
 801172e:	195b      	adds	r3, r3, r5
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	0019      	movs	r1, r3
 8011734:	0010      	movs	r0, r2
 8011736:	f7ee fd77 	bl	8000228 <__divsi3>
 801173a:	0003      	movs	r3, r0
 801173c:	0019      	movs	r1, r3
	magneticFieldContainerX[magneticFieldCounter] = magneticFieldXADC
 801173e:	4b6c      	ldr	r3, [pc, #432]	; (80118f0 <sensingRead+0x9d4>)
 8011740:	2200      	movs	r2, #0
 8011742:	5e9b      	ldrsh	r3, [r3, r2]
 8011744:	001a      	movs	r2, r3
 8011746:	b209      	sxth	r1, r1
 8011748:	4b6a      	ldr	r3, [pc, #424]	; (80118f4 <sensingRead+0x9d8>)
 801174a:	0052      	lsls	r2, r2, #1
 801174c:	52d1      	strh	r1, [r2, r3]
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
			/ magneticFieldDivider;
 801174e:	19bb      	adds	r3, r7, r6
 8011750:	191b      	adds	r3, r3, r4
 8011752:	2200      	movs	r2, #0
 8011754:	5e9a      	ldrsh	r2, [r3, r2]
 8011756:	19bb      	adds	r3, r7, r6
 8011758:	195b      	adds	r3, r3, r5
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	0019      	movs	r1, r3
 801175e:	0010      	movs	r0, r2
 8011760:	f7ee fd62 	bl	8000228 <__divsi3>
 8011764:	0003      	movs	r3, r0
 8011766:	0019      	movs	r1, r3
	magneticFieldContainerY[magneticFieldCounter] = magneticFieldYADC
 8011768:	4b61      	ldr	r3, [pc, #388]	; (80118f0 <sensingRead+0x9d4>)
 801176a:	2200      	movs	r2, #0
 801176c:	5e9b      	ldrsh	r3, [r3, r2]
 801176e:	001a      	movs	r2, r3
 8011770:	b209      	sxth	r1, r1
 8011772:	4b61      	ldr	r3, [pc, #388]	; (80118f8 <sensingRead+0x9dc>)
 8011774:	0052      	lsls	r2, r2, #1
 8011776:	52d1      	strh	r1, [r2, r3]

	magneticFieldMinX = 0;
 8011778:	4b60      	ldr	r3, [pc, #384]	; (80118fc <sensingRead+0x9e0>)
 801177a:	2200      	movs	r2, #0
 801177c:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxX = 0;
 801177e:	4b60      	ldr	r3, [pc, #384]	; (8011900 <sensingRead+0x9e4>)
 8011780:	2200      	movs	r2, #0
 8011782:	801a      	strh	r2, [r3, #0]
	magneticFieldMinY = 0;
 8011784:	4b5f      	ldr	r3, [pc, #380]	; (8011904 <sensingRead+0x9e8>)
 8011786:	2200      	movs	r2, #0
 8011788:	801a      	strh	r2, [r3, #0]
	magneticFieldMaxY = 0;
 801178a:	4b5f      	ldr	r3, [pc, #380]	; (8011908 <sensingRead+0x9ec>)
 801178c:	2200      	movs	r2, #0
 801178e:	801a      	strh	r2, [r3, #0]

	//finx max and min value

	magneticFieldMaxX = findMax(magneticFieldContainerX,
 8011790:	4b58      	ldr	r3, [pc, #352]	; (80118f4 <sensingRead+0x9d8>)
 8011792:	2164      	movs	r1, #100	; 0x64
 8011794:	0018      	movs	r0, r3
 8011796:	f000 fb19 	bl	8011dcc <findMax>
 801179a:	0003      	movs	r3, r0
 801179c:	001a      	movs	r2, r3
 801179e:	4b58      	ldr	r3, [pc, #352]	; (8011900 <sensingRead+0x9e4>)
 80117a0:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinX = findMin(magneticFieldContainerX,
 80117a2:	4b54      	ldr	r3, [pc, #336]	; (80118f4 <sensingRead+0x9d8>)
 80117a4:	2164      	movs	r1, #100	; 0x64
 80117a6:	0018      	movs	r0, r3
 80117a8:	f000 fb44 	bl	8011e34 <findMin>
 80117ac:	0003      	movs	r3, r0
 80117ae:	001a      	movs	r2, r3
 80117b0:	4b52      	ldr	r3, [pc, #328]	; (80118fc <sensingRead+0x9e0>)
 80117b2:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldMaxY = findMax(magneticFieldContainerY,
 80117b4:	4b50      	ldr	r3, [pc, #320]	; (80118f8 <sensingRead+0x9dc>)
 80117b6:	2164      	movs	r1, #100	; 0x64
 80117b8:	0018      	movs	r0, r3
 80117ba:	f000 fb07 	bl	8011dcc <findMax>
 80117be:	0003      	movs	r3, r0
 80117c0:	001a      	movs	r2, r3
 80117c2:	4b51      	ldr	r3, [pc, #324]	; (8011908 <sensingRead+0x9ec>)
 80117c4:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);
	magneticFieldMinY = findMin(magneticFieldContainerY,
 80117c6:	4b4c      	ldr	r3, [pc, #304]	; (80118f8 <sensingRead+0x9dc>)
 80117c8:	2164      	movs	r1, #100	; 0x64
 80117ca:	0018      	movs	r0, r3
 80117cc:	f000 fb32 	bl	8011e34 <findMin>
 80117d0:	0003      	movs	r3, r0
 80117d2:	001a      	movs	r2, r3
 80117d4:	4b4b      	ldr	r3, [pc, #300]	; (8011904 <sensingRead+0x9e8>)
 80117d6:	801a      	strh	r2, [r3, #0]
	MAGNETIC_FIELD_MEASURES);

	magneticFieldCenterX = (magneticFieldMaxX + magneticFieldMinX) / 2;
 80117d8:	4b49      	ldr	r3, [pc, #292]	; (8011900 <sensingRead+0x9e4>)
 80117da:	2200      	movs	r2, #0
 80117dc:	5e9b      	ldrsh	r3, [r3, r2]
 80117de:	001a      	movs	r2, r3
 80117e0:	4b46      	ldr	r3, [pc, #280]	; (80118fc <sensingRead+0x9e0>)
 80117e2:	2100      	movs	r1, #0
 80117e4:	5e5b      	ldrsh	r3, [r3, r1]
 80117e6:	18d3      	adds	r3, r2, r3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	da00      	bge.n	80117ee <sensingRead+0x8d2>
 80117ec:	3301      	adds	r3, #1
 80117ee:	105b      	asrs	r3, r3, #1
 80117f0:	b21a      	sxth	r2, r3
 80117f2:	4b46      	ldr	r3, [pc, #280]	; (801190c <sensingRead+0x9f0>)
 80117f4:	801a      	strh	r2, [r3, #0]
	magneticFieldCenterY = (magneticFieldMaxY + magneticFieldMinY) / 2;
 80117f6:	4b44      	ldr	r3, [pc, #272]	; (8011908 <sensingRead+0x9ec>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	5e9b      	ldrsh	r3, [r3, r2]
 80117fc:	001a      	movs	r2, r3
 80117fe:	4b41      	ldr	r3, [pc, #260]	; (8011904 <sensingRead+0x9e8>)
 8011800:	2100      	movs	r1, #0
 8011802:	5e5b      	ldrsh	r3, [r3, r1]
 8011804:	18d3      	adds	r3, r2, r3
 8011806:	2b00      	cmp	r3, #0
 8011808:	da00      	bge.n	801180c <sensingRead+0x8f0>
 801180a:	3301      	adds	r3, #1
 801180c:	105b      	asrs	r3, r3, #1
 801180e:	b21a      	sxth	r2, r3
 8011810:	4b3f      	ldr	r3, [pc, #252]	; (8011910 <sensingRead+0x9f4>)
 8011812:	801a      	strh	r2, [r3, #0]

	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 8011814:	4b36      	ldr	r3, [pc, #216]	; (80118f0 <sensingRead+0x9d4>)
 8011816:	2200      	movs	r2, #0
 8011818:	5e9b      	ldrsh	r3, [r3, r2]
 801181a:	001a      	movs	r2, r3
 801181c:	4b35      	ldr	r3, [pc, #212]	; (80118f4 <sensingRead+0x9d8>)
 801181e:	0052      	lsls	r2, r2, #1
 8011820:	5ed3      	ldrsh	r3, [r2, r3]
 8011822:	b29a      	uxth	r2, r3
			- magneticFieldCenterX;
 8011824:	4b39      	ldr	r3, [pc, #228]	; (801190c <sensingRead+0x9f0>)
 8011826:	2100      	movs	r1, #0
 8011828:	5e5b      	ldrsh	r3, [r3, r1]
 801182a:	b29b      	uxth	r3, r3
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	b29b      	uxth	r3, r3
 8011830:	b21a      	sxth	r2, r3
	magneticFieldX = magneticFieldContainerX[magneticFieldCounter]
 8011832:	4b38      	ldr	r3, [pc, #224]	; (8011914 <sensingRead+0x9f8>)
 8011834:	801a      	strh	r2, [r3, #0]
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 8011836:	4b2e      	ldr	r3, [pc, #184]	; (80118f0 <sensingRead+0x9d4>)
 8011838:	2200      	movs	r2, #0
 801183a:	5e9b      	ldrsh	r3, [r3, r2]
 801183c:	001a      	movs	r2, r3
 801183e:	4b2e      	ldr	r3, [pc, #184]	; (80118f8 <sensingRead+0x9dc>)
 8011840:	0052      	lsls	r2, r2, #1
 8011842:	5ed3      	ldrsh	r3, [r2, r3]
 8011844:	b29a      	uxth	r2, r3
			- magneticFieldCenterY;
 8011846:	4b32      	ldr	r3, [pc, #200]	; (8011910 <sensingRead+0x9f4>)
 8011848:	2100      	movs	r1, #0
 801184a:	5e5b      	ldrsh	r3, [r3, r1]
 801184c:	b29b      	uxth	r3, r3
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	b29b      	uxth	r3, r3
 8011852:	b21a      	sxth	r2, r3
	magneticFieldY = magneticFieldContainerY[magneticFieldCounter]
 8011854:	4b30      	ldr	r3, [pc, #192]	; (8011918 <sensingRead+0x9fc>)
 8011856:	801a      	strh	r2, [r3, #0]

	if (magneticFieldX > 18)
 8011858:	4b2e      	ldr	r3, [pc, #184]	; (8011914 <sensingRead+0x9f8>)
 801185a:	2200      	movs	r2, #0
 801185c:	5e9b      	ldrsh	r3, [r3, r2]
 801185e:	2b12      	cmp	r3, #18
 8011860:	dd02      	ble.n	8011868 <sensingRead+0x94c>
		magneticFieldX = 18;
 8011862:	4b2c      	ldr	r3, [pc, #176]	; (8011914 <sensingRead+0x9f8>)
 8011864:	2212      	movs	r2, #18
 8011866:	801a      	strh	r2, [r3, #0]
	if (magneticFieldX < -18)
 8011868:	4b2a      	ldr	r3, [pc, #168]	; (8011914 <sensingRead+0x9f8>)
 801186a:	2200      	movs	r2, #0
 801186c:	5e9b      	ldrsh	r3, [r3, r2]
 801186e:	3312      	adds	r3, #18
 8011870:	da03      	bge.n	801187a <sensingRead+0x95e>
		magneticFieldX = -18;
 8011872:	4b28      	ldr	r3, [pc, #160]	; (8011914 <sensingRead+0x9f8>)
 8011874:	2212      	movs	r2, #18
 8011876:	4252      	negs	r2, r2
 8011878:	801a      	strh	r2, [r3, #0]

	if (magneticFieldY > 12)
 801187a:	4b27      	ldr	r3, [pc, #156]	; (8011918 <sensingRead+0x9fc>)
 801187c:	2200      	movs	r2, #0
 801187e:	5e9b      	ldrsh	r3, [r3, r2]
 8011880:	2b0c      	cmp	r3, #12
 8011882:	dd02      	ble.n	801188a <sensingRead+0x96e>
		magneticFieldY = 12;
 8011884:	4b24      	ldr	r3, [pc, #144]	; (8011918 <sensingRead+0x9fc>)
 8011886:	220c      	movs	r2, #12
 8011888:	801a      	strh	r2, [r3, #0]
	if (magneticFieldY < -12)
 801188a:	4b23      	ldr	r3, [pc, #140]	; (8011918 <sensingRead+0x9fc>)
 801188c:	2200      	movs	r2, #0
 801188e:	5e9b      	ldrsh	r3, [r3, r2]
 8011890:	330c      	adds	r3, #12
 8011892:	da03      	bge.n	801189c <sensingRead+0x980>
		magneticFieldY = -12;
 8011894:	4b20      	ldr	r3, [pc, #128]	; (8011918 <sensingRead+0x9fc>)
 8011896:	220c      	movs	r2, #12
 8011898:	4252      	negs	r2, r2
 801189a:	801a      	strh	r2, [r3, #0]

	magneticFieldCounter++;
 801189c:	4b14      	ldr	r3, [pc, #80]	; (80118f0 <sensingRead+0x9d4>)
 801189e:	2200      	movs	r2, #0
 80118a0:	5e9b      	ldrsh	r3, [r3, r2]
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	3301      	adds	r3, #1
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	b21a      	sxth	r2, r3
 80118aa:	4b11      	ldr	r3, [pc, #68]	; (80118f0 <sensingRead+0x9d4>)
 80118ac:	801a      	strh	r2, [r3, #0]
	if (magneticFieldCounter >= MAGNETIC_FIELD_MEASURES)
 80118ae:	4b10      	ldr	r3, [pc, #64]	; (80118f0 <sensingRead+0x9d4>)
 80118b0:	2200      	movs	r2, #0
 80118b2:	5e9b      	ldrsh	r3, [r3, r2]
 80118b4:	2b63      	cmp	r3, #99	; 0x63
 80118b6:	dd02      	ble.n	80118be <sensingRead+0x9a2>
		magneticFieldCounter = 0;
 80118b8:	4b0d      	ldr	r3, [pc, #52]	; (80118f0 <sensingRead+0x9d4>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	801a      	strh	r2, [r3, #0]

	//								LIS3MDL SEND SLEEP COMMAND

	HAL_I2C_Mem_Write(&hi2c1, LIS3MDL_ADDR, LIS3MDL_CTRL_REG_3, 1,
 80118be:	4b08      	ldr	r3, [pc, #32]	; (80118e0 <sensingRead+0x9c4>)
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	4808      	ldr	r0, [pc, #32]	; (80118e4 <sensingRead+0x9c8>)
 80118c4:	9302      	str	r3, [sp, #8]
 80118c6:	2301      	movs	r3, #1
 80118c8:	9301      	str	r3, [sp, #4]
 80118ca:	4b14      	ldr	r3, [pc, #80]	; (801191c <sensingRead+0xa00>)
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	2301      	movs	r3, #1
 80118d0:	2222      	movs	r2, #34	; 0x22
 80118d2:	2138      	movs	r1, #56	; 0x38
 80118d4:	f7f3 fc42 	bl	800515c <HAL_I2C_Mem_Write>
			&ctrlMagnetometerPowerDown, 1, i2cTimeout);

}
 80118d8:	46c0      	nop			; (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	b011      	add	sp, #68	; 0x44
 80118de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e0:	20000042 	.word	0x20000042
 80118e4:	2000021c 	.word	0x2000021c
 80118e8:	200001c0 	.word	0x200001c0
 80118ec:	200001c4 	.word	0x200001c4
 80118f0:	200006ec 	.word	0x200006ec
 80118f4:	2000026c 	.word	0x2000026c
 80118f8:	200004c4 	.word	0x200004c4
 80118fc:	200006f6 	.word	0x200006f6
 8011900:	2000058c 	.word	0x2000058c
 8011904:	200003ba 	.word	0x200003ba
 8011908:	200001f8 	.word	0x200001f8
 801190c:	20000616 	.word	0x20000616
 8011910:	200006f8 	.word	0x200006f8
 8011914:	2000062a 	.word	0x2000062a
 8011918:	20000590 	.word	0x20000590
 801191c:	2000002f 	.word	0x2000002f

08011920 <BME280_compensate_T_int32>:

//compensation formulas from datasheet
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T) {
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
	BME280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	10da      	asrs	r2, r3, #3
 801192c:	4b16      	ldr	r3, [pc, #88]	; (8011988 <BME280_compensate_T_int32+0x68>)
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	1ad3      	subs	r3, r2, r3
			* ((BME280_S32_t) dig_T2)) >> 11;
 8011934:	4a15      	ldr	r2, [pc, #84]	; (801198c <BME280_compensate_T_int32+0x6c>)
 8011936:	2100      	movs	r1, #0
 8011938:	5e52      	ldrsh	r2, [r2, r1]
 801193a:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((BME280_S32_t) dig_T1 << 1)))
 801193c:	12db      	asrs	r3, r3, #11
 801193e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	111b      	asrs	r3, r3, #4
 8011944:	4a10      	ldr	r2, [pc, #64]	; (8011988 <BME280_compensate_T_int32+0x68>)
 8011946:	8812      	ldrh	r2, [r2, #0]
 8011948:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BME280_S32_t) dig_T1))) >> 12)
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	1112      	asrs	r2, r2, #4
 801194e:	490e      	ldr	r1, [pc, #56]	; (8011988 <BME280_compensate_T_int32+0x68>)
 8011950:	8809      	ldrh	r1, [r1, #0]
 8011952:	1a52      	subs	r2, r2, r1
 8011954:	4353      	muls	r3, r2
 8011956:	131b      	asrs	r3, r3, #12
			* ((BME280_S32_t) dig_T3)) >> 14;
 8011958:	4a0d      	ldr	r2, [pc, #52]	; (8011990 <BME280_compensate_T_int32+0x70>)
 801195a:	2100      	movs	r1, #0
 801195c:	5e52      	ldrsh	r2, [r2, r1]
 801195e:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((BME280_S32_t) dig_T1))
 8011960:	139b      	asrs	r3, r3, #14
 8011962:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8011964:	697a      	ldr	r2, [r7, #20]
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	18d2      	adds	r2, r2, r3
 801196a:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <BME280_compensate_T_int32+0x74>)
 801196c:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 801196e:	4b09      	ldr	r3, [pc, #36]	; (8011994 <BME280_compensate_T_int32+0x74>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	0013      	movs	r3, r2
 8011974:	009b      	lsls	r3, r3, #2
 8011976:	189b      	adds	r3, r3, r2
 8011978:	3380      	adds	r3, #128	; 0x80
 801197a:	121b      	asrs	r3, r3, #8
 801197c:	60fb      	str	r3, [r7, #12]
	return T;
 801197e:	68fb      	ldr	r3, [r7, #12]
}
 8011980:	0018      	movs	r0, r3
 8011982:	46bd      	mov	sp, r7
 8011984:	b006      	add	sp, #24
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20000204 	.word	0x20000204
 801198c:	20000378 	.word	0x20000378
 8011990:	200006f2 	.word	0x200006f2
 8011994:	2000070c 	.word	0x2000070c

08011998 <BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BME280_U32_t BME280_compensate_P_int64(BME280_S32_t adc_P) {
 8011998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801199a:	b0ad      	sub	sp, #180	; 0xb4
 801199c:	af00      	add	r7, sp, #0
 801199e:	2394      	movs	r3, #148	; 0x94
 80119a0:	18fb      	adds	r3, r7, r3
 80119a2:	6018      	str	r0, [r3, #0]
	BME280_S64_t var1, var2, p;
	var1 = ((BME280_S64_t) t_fine) - 128000;
 80119a4:	4bc6      	ldr	r3, [pc, #792]	; (8011cc0 <BME280_compensate_P_int64+0x328>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	001c      	movs	r4, r3
 80119aa:	17db      	asrs	r3, r3, #31
 80119ac:	001d      	movs	r5, r3
 80119ae:	4ac5      	ldr	r2, [pc, #788]	; (8011cc4 <BME280_compensate_P_int64+0x32c>)
 80119b0:	2301      	movs	r3, #1
 80119b2:	425b      	negs	r3, r3
 80119b4:	1912      	adds	r2, r2, r4
 80119b6:	416b      	adcs	r3, r5
 80119b8:	24a8      	movs	r4, #168	; 0xa8
 80119ba:	1939      	adds	r1, r7, r4
 80119bc:	600a      	str	r2, [r1, #0]
 80119be:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (BME280_S64_t) dig_P6;
 80119c0:	193b      	adds	r3, r7, r4
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	1939      	adds	r1, r7, r4
 80119c8:	6808      	ldr	r0, [r1, #0]
 80119ca:	6849      	ldr	r1, [r1, #4]
 80119cc:	f7ee fdb4 	bl	8000538 <__aeabi_lmul>
 80119d0:	0002      	movs	r2, r0
 80119d2:	000b      	movs	r3, r1
 80119d4:	0010      	movs	r0, r2
 80119d6:	0019      	movs	r1, r3
 80119d8:	4bbb      	ldr	r3, [pc, #748]	; (8011cc8 <BME280_compensate_P_int64+0x330>)
 80119da:	2200      	movs	r2, #0
 80119dc:	5e9b      	ldrsh	r3, [r3, r2]
 80119de:	653b      	str	r3, [r7, #80]	; 0x50
 80119e0:	17db      	asrs	r3, r3, #31
 80119e2:	657b      	str	r3, [r7, #84]	; 0x54
 80119e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119e8:	f7ee fda6 	bl	8000538 <__aeabi_lmul>
 80119ec:	0002      	movs	r2, r0
 80119ee:	000b      	movs	r3, r1
 80119f0:	25a0      	movs	r5, #160	; 0xa0
 80119f2:	1979      	adds	r1, r7, r5
 80119f4:	600a      	str	r2, [r1, #0]
 80119f6:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1 * (BME280_S64_t) dig_P5) << 17);
 80119f8:	4bb4      	ldr	r3, [pc, #720]	; (8011ccc <BME280_compensate_P_int64+0x334>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	5e9b      	ldrsh	r3, [r3, r2]
 80119fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a00:	17db      	asrs	r3, r3, #31
 8011a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a04:	193b      	adds	r3, r7, r4
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011a0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011a0e:	f7ee fd93 	bl	8000538 <__aeabi_lmul>
 8011a12:	0002      	movs	r2, r0
 8011a14:	000b      	movs	r3, r1
 8011a16:	0bd1      	lsrs	r1, r2, #15
 8011a18:	468c      	mov	ip, r1
 8011a1a:	0458      	lsls	r0, r3, #17
 8011a1c:	268c      	movs	r6, #140	; 0x8c
 8011a1e:	19b9      	adds	r1, r7, r6
 8011a20:	6008      	str	r0, [r1, #0]
 8011a22:	19b8      	adds	r0, r7, r6
 8011a24:	6800      	ldr	r0, [r0, #0]
 8011a26:	4661      	mov	r1, ip
 8011a28:	4308      	orrs	r0, r1
 8011a2a:	19b9      	adds	r1, r7, r6
 8011a2c:	6008      	str	r0, [r1, #0]
 8011a2e:	0453      	lsls	r3, r2, #17
 8011a30:	2188      	movs	r1, #136	; 0x88
 8011a32:	187a      	adds	r2, r7, r1
 8011a34:	6013      	str	r3, [r2, #0]
 8011a36:	197b      	adds	r3, r7, r5
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	1879      	adds	r1, r7, r1
 8011a3e:	6808      	ldr	r0, [r1, #0]
 8011a40:	6849      	ldr	r1, [r1, #4]
 8011a42:	1812      	adds	r2, r2, r0
 8011a44:	414b      	adcs	r3, r1
 8011a46:	1979      	adds	r1, r7, r5
 8011a48:	600a      	str	r2, [r1, #0]
 8011a4a:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((BME280_S64_t) dig_P4) << 35);
 8011a4c:	4ba0      	ldr	r3, [pc, #640]	; (8011cd0 <BME280_compensate_P_int64+0x338>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	5e9b      	ldrsh	r3, [r3, r2]
 8011a52:	643b      	str	r3, [r7, #64]	; 0x40
 8011a54:	17db      	asrs	r3, r3, #31
 8011a56:	647b      	str	r3, [r7, #68]	; 0x44
 8011a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a5a:	00db      	lsls	r3, r3, #3
 8011a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a5e:	2300      	movs	r3, #0
 8011a60:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a62:	197b      	adds	r3, r7, r5
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a6c:	1812      	adds	r2, r2, r0
 8011a6e:	414b      	adcs	r3, r1
 8011a70:	1979      	adds	r1, r7, r5
 8011a72:	600a      	str	r2, [r1, #0]
 8011a74:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 8011a76:	193b      	adds	r3, r7, r4
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	1939      	adds	r1, r7, r4
 8011a7e:	6808      	ldr	r0, [r1, #0]
 8011a80:	6849      	ldr	r1, [r1, #4]
 8011a82:	f7ee fd59 	bl	8000538 <__aeabi_lmul>
 8011a86:	0002      	movs	r2, r0
 8011a88:	000b      	movs	r3, r1
 8011a8a:	0010      	movs	r0, r2
 8011a8c:	0019      	movs	r1, r3
 8011a8e:	4b91      	ldr	r3, [pc, #580]	; (8011cd4 <BME280_compensate_P_int64+0x33c>)
 8011a90:	2200      	movs	r2, #0
 8011a92:	5e9b      	ldrsh	r3, [r3, r2]
 8011a94:	633b      	str	r3, [r7, #48]	; 0x30
 8011a96:	17db      	asrs	r3, r3, #31
 8011a98:	637b      	str	r3, [r7, #52]	; 0x34
 8011a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a9e:	f7ee fd4b 	bl	8000538 <__aeabi_lmul>
 8011aa2:	0002      	movs	r2, r0
 8011aa4:	000b      	movs	r3, r1
 8011aa6:	0619      	lsls	r1, r3, #24
 8011aa8:	0a10      	lsrs	r0, r2, #8
 8011aaa:	2580      	movs	r5, #128	; 0x80
 8011aac:	197e      	adds	r6, r7, r5
 8011aae:	6030      	str	r0, [r6, #0]
 8011ab0:	1978      	adds	r0, r7, r5
 8011ab2:	6800      	ldr	r0, [r0, #0]
 8011ab4:	4308      	orrs	r0, r1
 8011ab6:	1979      	adds	r1, r7, r5
 8011ab8:	6008      	str	r0, [r1, #0]
 8011aba:	121b      	asrs	r3, r3, #8
 8011abc:	2284      	movs	r2, #132	; 0x84
 8011abe:	18ba      	adds	r2, r7, r2
 8011ac0:	6013      	str	r3, [r2, #0]
			+ ((var1 * (BME280_S64_t) dig_P2) << 12);
 8011ac2:	4b85      	ldr	r3, [pc, #532]	; (8011cd8 <BME280_compensate_P_int64+0x340>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	5e9b      	ldrsh	r3, [r3, r2]
 8011ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8011aca:	17db      	asrs	r3, r3, #31
 8011acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ace:	193b      	adds	r3, r7, r4
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ad8:	f7ee fd2e 	bl	8000538 <__aeabi_lmul>
 8011adc:	0002      	movs	r2, r0
 8011ade:	000b      	movs	r3, r1
 8011ae0:	0d11      	lsrs	r1, r2, #20
 8011ae2:	0318      	lsls	r0, r3, #12
 8011ae4:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011ae6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011ae8:	4308      	orrs	r0, r1
 8011aea:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011aec:	0313      	lsls	r3, r2, #12
 8011aee:	67bb      	str	r3, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (BME280_S64_t) dig_P3) >> 8)
 8011af0:	197b      	adds	r3, r7, r5
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011afa:	1812      	adds	r2, r2, r0
 8011afc:	414b      	adcs	r3, r1
 8011afe:	1939      	adds	r1, r7, r4
 8011b00:	600a      	str	r2, [r1, #0]
 8011b02:	604b      	str	r3, [r1, #4]
	var1 = (((((BME280_S64_t) 1) << 47) + var1)) * ((BME280_S64_t) dig_P1)
 8011b04:	193b      	adds	r3, r7, r4
 8011b06:	6818      	ldr	r0, [r3, #0]
 8011b08:	6859      	ldr	r1, [r3, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	2380      	movs	r3, #128	; 0x80
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	1880      	adds	r0, r0, r2
 8011b12:	4159      	adcs	r1, r3
 8011b14:	4b71      	ldr	r3, [pc, #452]	; (8011cdc <BME280_compensate_P_int64+0x344>)
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	623b      	str	r3, [r7, #32]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8011b1e:	6a3a      	ldr	r2, [r7, #32]
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	f7ee fd09 	bl	8000538 <__aeabi_lmul>
 8011b26:	0002      	movs	r2, r0
 8011b28:	000b      	movs	r3, r1
 8011b2a:	1059      	asrs	r1, r3, #1
 8011b2c:	1938      	adds	r0, r7, r4
 8011b2e:	6001      	str	r1, [r0, #0]
 8011b30:	17db      	asrs	r3, r3, #31
 8011b32:	21ac      	movs	r1, #172	; 0xac
 8011b34:	187a      	adds	r2, r7, r1
 8011b36:	6013      	str	r3, [r2, #0]
			>> 33;
	if (var1 == 0) {
 8011b38:	193b      	adds	r3, r7, r4
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	187b      	adds	r3, r7, r1
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	431a      	orrs	r2, r3
 8011b42:	d101      	bne.n	8011b48 <BME280_compensate_P_int64+0x1b0>
		return 0; // avoid exception caused by division by zero
 8011b44:	2300      	movs	r3, #0
 8011b46:	e0b6      	b.n	8011cb6 <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576 - adc_P;
 8011b48:	2394      	movs	r3, #148	; 0x94
 8011b4a:	18fb      	adds	r3, r7, r3
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	2380      	movs	r3, #128	; 0x80
 8011b50:	035b      	lsls	r3, r3, #13
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	2498      	movs	r4, #152	; 0x98
 8011b56:	193a      	adds	r2, r7, r4
 8011b58:	6013      	str	r3, [r2, #0]
 8011b5a:	17db      	asrs	r3, r3, #31
 8011b5c:	259c      	movs	r5, #156	; 0x9c
 8011b5e:	197a      	adds	r2, r7, r5
 8011b60:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8011b62:	193b      	adds	r3, r7, r4
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	105b      	asrs	r3, r3, #1
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	193b      	adds	r3, r7, r4
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	07db      	lsls	r3, r3, #31
 8011b70:	61bb      	str	r3, [r7, #24]
 8011b72:	23a0      	movs	r3, #160	; 0xa0
 8011b74:	18fa      	adds	r2, r7, r3
 8011b76:	6853      	ldr	r3, [r2, #4]
 8011b78:	6812      	ldr	r2, [r2, #0]
 8011b7a:	69b8      	ldr	r0, [r7, #24]
 8011b7c:	69f9      	ldr	r1, [r7, #28]
 8011b7e:	1a80      	subs	r0, r0, r2
 8011b80:	4199      	sbcs	r1, r3
 8011b82:	4a57      	ldr	r2, [pc, #348]	; (8011ce0 <BME280_compensate_P_int64+0x348>)
 8011b84:	2300      	movs	r3, #0
 8011b86:	f7ee fcd7 	bl	8000538 <__aeabi_lmul>
 8011b8a:	0002      	movs	r2, r0
 8011b8c:	000b      	movs	r3, r1
 8011b8e:	0010      	movs	r0, r2
 8011b90:	0019      	movs	r1, r3
 8011b92:	26a8      	movs	r6, #168	; 0xa8
 8011b94:	19ba      	adds	r2, r7, r6
 8011b96:	6853      	ldr	r3, [r2, #4]
 8011b98:	6812      	ldr	r2, [r2, #0]
 8011b9a:	f7ee fca9 	bl	80004f0 <__aeabi_ldivmod>
 8011b9e:	0002      	movs	r2, r0
 8011ba0:	000b      	movs	r3, r1
 8011ba2:	1939      	adds	r1, r7, r4
 8011ba4:	600a      	str	r2, [r1, #0]
 8011ba6:	604b      	str	r3, [r1, #4]
	var1 = (((BME280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8011ba8:	4b4e      	ldr	r3, [pc, #312]	; (8011ce4 <BME280_compensate_P_int64+0x34c>)
 8011baa:	2200      	movs	r2, #0
 8011bac:	5e9b      	ldrsh	r3, [r3, r2]
 8011bae:	613b      	str	r3, [r7, #16]
 8011bb0:	17db      	asrs	r3, r3, #31
 8011bb2:	617b      	str	r3, [r7, #20]
 8011bb4:	197a      	adds	r2, r7, r5
 8011bb6:	6813      	ldr	r3, [r2, #0]
 8011bb8:	04da      	lsls	r2, r3, #19
 8011bba:	1939      	adds	r1, r7, r4
 8011bbc:	680b      	ldr	r3, [r1, #0]
 8011bbe:	0b5b      	lsrs	r3, r3, #13
 8011bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8011bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8011bc8:	197a      	adds	r2, r7, r5
 8011bca:	6813      	ldr	r3, [r2, #0]
 8011bcc:	135b      	asrs	r3, r3, #13
 8011bce:	677b      	str	r3, [r7, #116]	; 0x74
 8011bd0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bd4:	6938      	ldr	r0, [r7, #16]
 8011bd6:	6979      	ldr	r1, [r7, #20]
 8011bd8:	f7ee fcae 	bl	8000538 <__aeabi_lmul>
 8011bdc:	0002      	movs	r2, r0
 8011bde:	000b      	movs	r3, r1
 8011be0:	0010      	movs	r0, r2
 8011be2:	0019      	movs	r1, r3
 8011be4:	197a      	adds	r2, r7, r5
 8011be6:	6813      	ldr	r3, [r2, #0]
 8011be8:	04da      	lsls	r2, r3, #19
 8011bea:	193b      	adds	r3, r7, r4
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	0b5b      	lsrs	r3, r3, #13
 8011bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8011bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8011bf8:	197a      	adds	r2, r7, r5
 8011bfa:	6813      	ldr	r3, [r2, #0]
 8011bfc:	135b      	asrs	r3, r3, #13
 8011bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c04:	f7ee fc98 	bl	8000538 <__aeabi_lmul>
 8011c08:	0002      	movs	r2, r0
 8011c0a:	000b      	movs	r3, r1
 8011c0c:	01d9      	lsls	r1, r3, #7
 8011c0e:	0e50      	lsrs	r0, r2, #25
 8011c10:	4301      	orrs	r1, r0
 8011c12:	19b8      	adds	r0, r7, r6
 8011c14:	6001      	str	r1, [r0, #0]
 8011c16:	165b      	asrs	r3, r3, #25
 8011c18:	22ac      	movs	r2, #172	; 0xac
 8011c1a:	18ba      	adds	r2, r7, r2
 8011c1c:	6013      	str	r3, [r2, #0]
	var2 = (((BME280_S64_t) dig_P8) * p) >> 19;
 8011c1e:	4b32      	ldr	r3, [pc, #200]	; (8011ce8 <BME280_compensate_P_int64+0x350>)
 8011c20:	2200      	movs	r2, #0
 8011c22:	5e9b      	ldrsh	r3, [r3, r2]
 8011c24:	60bb      	str	r3, [r7, #8]
 8011c26:	17db      	asrs	r3, r3, #31
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	193a      	adds	r2, r7, r4
 8011c2c:	6853      	ldr	r3, [r2, #4]
 8011c2e:	6812      	ldr	r2, [r2, #0]
 8011c30:	68b8      	ldr	r0, [r7, #8]
 8011c32:	68f9      	ldr	r1, [r7, #12]
 8011c34:	f7ee fc80 	bl	8000538 <__aeabi_lmul>
 8011c38:	0002      	movs	r2, r0
 8011c3a:	000b      	movs	r3, r1
 8011c3c:	0359      	lsls	r1, r3, #13
 8011c3e:	0cd0      	lsrs	r0, r2, #19
 8011c40:	4301      	orrs	r1, r0
 8011c42:	25a0      	movs	r5, #160	; 0xa0
 8011c44:	1978      	adds	r0, r7, r5
 8011c46:	6001      	str	r1, [r0, #0]
 8011c48:	14db      	asrs	r3, r3, #19
 8011c4a:	22a4      	movs	r2, #164	; 0xa4
 8011c4c:	18ba      	adds	r2, r7, r2
 8011c4e:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((BME280_S64_t) dig_P7) << 4);
 8011c50:	193b      	adds	r3, r7, r4
 8011c52:	6818      	ldr	r0, [r3, #0]
 8011c54:	6859      	ldr	r1, [r3, #4]
 8011c56:	19bb      	adds	r3, r7, r6
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	1880      	adds	r0, r0, r2
 8011c5e:	4159      	adcs	r1, r3
 8011c60:	197b      	adds	r3, r7, r5
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	1812      	adds	r2, r2, r0
 8011c68:	414b      	adcs	r3, r1
 8011c6a:	0619      	lsls	r1, r3, #24
 8011c6c:	0a10      	lsrs	r0, r2, #8
 8011c6e:	6638      	str	r0, [r7, #96]	; 0x60
 8011c70:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011c72:	4308      	orrs	r0, r1
 8011c74:	6638      	str	r0, [r7, #96]	; 0x60
 8011c76:	121b      	asrs	r3, r3, #8
 8011c78:	667b      	str	r3, [r7, #100]	; 0x64
 8011c7a:	4b1c      	ldr	r3, [pc, #112]	; (8011cec <BME280_compensate_P_int64+0x354>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	5e9b      	ldrsh	r3, [r3, r2]
 8011c80:	603b      	str	r3, [r7, #0]
 8011c82:	17db      	asrs	r3, r3, #31
 8011c84:	607b      	str	r3, [r7, #4]
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	000b      	movs	r3, r1
 8011c8c:	0f1b      	lsrs	r3, r3, #28
 8011c8e:	0010      	movs	r0, r2
 8011c90:	0100      	lsls	r0, r0, #4
 8011c92:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011c94:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011c96:	4318      	orrs	r0, r3
 8011c98:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011c9a:	000b      	movs	r3, r1
 8011c9c:	011b      	lsls	r3, r3, #4
 8011c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ca4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011ca6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011ca8:	1812      	adds	r2, r2, r0
 8011caa:	414b      	adcs	r3, r1
 8011cac:	1939      	adds	r1, r7, r4
 8011cae:	600a      	str	r2, [r1, #0]
 8011cb0:	604b      	str	r3, [r1, #4]
	return (BME280_U32_t) p;
 8011cb2:	193b      	adds	r3, r7, r4
 8011cb4:	681b      	ldr	r3, [r3, #0]
}
 8011cb6:	0018      	movs	r0, r3
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	b02d      	add	sp, #180	; 0xb4
 8011cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbe:	46c0      	nop			; (mov r8, r8)
 8011cc0:	2000070c 	.word	0x2000070c
 8011cc4:	fffe0c00 	.word	0xfffe0c00
 8011cc8:	200006fc 	.word	0x200006fc
 8011ccc:	20000626 	.word	0x20000626
 8011cd0:	20000440 	.word	0x20000440
 8011cd4:	2000069a 	.word	0x2000069a
 8011cd8:	2000043c 	.word	0x2000043c
 8011cdc:	20000698 	.word	0x20000698
 8011ce0:	00000c35 	.word	0x00000c35
 8011ce4:	200006f0 	.word	0x200006f0
 8011ce8:	2000069c 	.word	0x2000069c
 8011cec:	200001fc 	.word	0x200001fc

08011cf0 <BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H) {
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
	BME280_S32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((BME280_S32_t) 76800));
 8011cf8:	4b2c      	ldr	r3, [pc, #176]	; (8011dac <BME280_compensate_H_int32+0xbc>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4a2c      	ldr	r2, [pc, #176]	; (8011db0 <BME280_compensate_H_int32+0xc0>)
 8011cfe:	4694      	mov	ip, r2
 8011d00:	4463      	add	r3, ip
 8011d02:	60fb      	str	r3, [r7, #12]

	v_x1_u32r =
			(((((adc_H << 14) - (((BME280_S32_t) dig_H4) << 20)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	039a      	lsls	r2, r3, #14
 8011d08:	4b2a      	ldr	r3, [pc, #168]	; (8011db4 <BME280_compensate_H_int32+0xc4>)
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	5e5b      	ldrsh	r3, [r3, r1]
 8011d0e:	051b      	lsls	r3, r3, #20
 8011d10:	1ad2      	subs	r2, r2, r3
					- (((BME280_S32_t) dig_H5) * v_x1_u32r))
 8011d12:	4b29      	ldr	r3, [pc, #164]	; (8011db8 <BME280_compensate_H_int32+0xc8>)
 8011d14:	2100      	movs	r1, #0
 8011d16:	5e5b      	ldrsh	r3, [r3, r1]
 8011d18:	0019      	movs	r1, r3
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	434b      	muls	r3, r1
 8011d1e:	1ad3      	subs	r3, r2, r3
					+ ((BME280_S32_t) 16384)) >> 15)
 8011d20:	2280      	movs	r2, #128	; 0x80
 8011d22:	01d2      	lsls	r2, r2, #7
 8011d24:	4694      	mov	ip, r2
 8011d26:	4463      	add	r3, ip
 8011d28:	13db      	asrs	r3, r3, #15
					* (((((((v_x1_u32r * ((BME280_S32_t) dig_H6)) >> 10)
 8011d2a:	4a24      	ldr	r2, [pc, #144]	; (8011dbc <BME280_compensate_H_int32+0xcc>)
 8011d2c:	7812      	ldrb	r2, [r2, #0]
 8011d2e:	0011      	movs	r1, r2
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	434a      	muls	r2, r1
 8011d34:	1292      	asrs	r2, r2, #10
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 8011d36:	4922      	ldr	r1, [pc, #136]	; (8011dc0 <BME280_compensate_H_int32+0xd0>)
 8011d38:	7809      	ldrb	r1, [r1, #0]
 8011d3a:	0008      	movs	r0, r1
 8011d3c:	68f9      	ldr	r1, [r7, #12]
 8011d3e:	4341      	muls	r1, r0
 8011d40:	12c9      	asrs	r1, r1, #11
									+ ((BME280_S32_t) 32768))) >> 10)
 8011d42:	2080      	movs	r0, #128	; 0x80
 8011d44:	0200      	lsls	r0, r0, #8
 8011d46:	4684      	mov	ip, r0
 8011d48:	4461      	add	r1, ip
							* (((v_x1_u32r * ((BME280_S32_t) dig_H3)) >> 11)
 8011d4a:	434a      	muls	r2, r1
									+ ((BME280_S32_t) 32768))) >> 10)
 8011d4c:	1292      	asrs	r2, r2, #10
							+ ((BME280_S32_t) 2097152))
 8011d4e:	2180      	movs	r1, #128	; 0x80
 8011d50:	0389      	lsls	r1, r1, #14
 8011d52:	468c      	mov	ip, r1
 8011d54:	4462      	add	r2, ip
							* ((BME280_S32_t) dig_H2) + 8192) >> 14));
 8011d56:	491b      	ldr	r1, [pc, #108]	; (8011dc4 <BME280_compensate_H_int32+0xd4>)
 8011d58:	2000      	movs	r0, #0
 8011d5a:	5e09      	ldrsh	r1, [r1, r0]
 8011d5c:	434a      	muls	r2, r1
 8011d5e:	2180      	movs	r1, #128	; 0x80
 8011d60:	0189      	lsls	r1, r1, #6
 8011d62:	468c      	mov	ip, r1
 8011d64:	4462      	add	r2, ip
 8011d66:	1392      	asrs	r2, r2, #14
	v_x1_u32r =
 8011d68:	4353      	muls	r3, r2
 8011d6a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	13db      	asrs	r3, r3, #15
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	13d2      	asrs	r2, r2, #15
 8011d74:	4353      	muls	r3, r2
 8011d76:	11db      	asrs	r3, r3, #7
					* ((BME280_S32_t) dig_H1)) >> 4));
 8011d78:	4a13      	ldr	r2, [pc, #76]	; (8011dc8 <BME280_compensate_H_int32+0xd8>)
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	4353      	muls	r3, r2
 8011d7e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	da00      	bge.n	8011d8e <BME280_compensate_H_int32+0x9e>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	22c8      	movs	r2, #200	; 0xc8
 8011d94:	0552      	lsls	r2, r2, #21
 8011d96:	4293      	cmp	r3, r2
 8011d98:	dd01      	ble.n	8011d9e <BME280_compensate_H_int32+0xae>
 8011d9a:	23c8      	movs	r3, #200	; 0xc8
 8011d9c:	055b      	lsls	r3, r3, #21
 8011d9e:	60fb      	str	r3, [r7, #12]
	return (BME280_U32_t) (v_x1_u32r >> 12);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	131b      	asrs	r3, r3, #12
}
 8011da4:	0018      	movs	r0, r3
 8011da6:	46bd      	mov	sp, r7
 8011da8:	b004      	add	sp, #16
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	2000070c 	.word	0x2000070c
 8011db0:	fffed400 	.word	0xfffed400
 8011db4:	20000376 	.word	0x20000376
 8011db8:	200006a6 	.word	0x200006a6
 8011dbc:	200004c1 	.word	0x200004c1
 8011dc0:	200006e1 	.word	0x200006e1
 8011dc4:	20000708 	.word	0x20000708
 8011dc8:	200003ae 	.word	0x200003ae

08011dcc <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	000a      	movs	r2, r1
 8011dd6:	1cbb      	adds	r3, r7, #2
 8011dd8:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 8011dda:	230e      	movs	r3, #14
 8011ddc:	18fb      	adds	r3, r7, r3
 8011dde:	4a14      	ldr	r2, [pc, #80]	; (8011e30 <findMax+0x64>)
 8011de0:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011de2:	2300      	movs	r3, #0
 8011de4:	60bb      	str	r3, [r7, #8]
 8011de6:	e015      	b.n	8011e14 <findMax+0x48>
		if (data[i] > max)
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	18d3      	adds	r3, r2, r3
 8011df0:	2200      	movs	r2, #0
 8011df2:	5e9b      	ldrsh	r3, [r3, r2]
 8011df4:	210e      	movs	r1, #14
 8011df6:	187a      	adds	r2, r7, r1
 8011df8:	2000      	movs	r0, #0
 8011dfa:	5e12      	ldrsh	r2, [r2, r0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	da06      	bge.n	8011e0e <findMax+0x42>
			max = data[i];
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	18d2      	adds	r2, r2, r3
 8011e08:	187b      	adds	r3, r7, r1
 8011e0a:	8812      	ldrh	r2, [r2, #0]
 8011e0c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	3301      	adds	r3, #1
 8011e12:	60bb      	str	r3, [r7, #8]
 8011e14:	1cbb      	adds	r3, r7, #2
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d3e4      	bcc.n	8011de8 <findMax+0x1c>
	}

	return max;
 8011e1e:	230e      	movs	r3, #14
 8011e20:	18fb      	adds	r3, r7, r3
 8011e22:	2200      	movs	r2, #0
 8011e24:	5e9b      	ldrsh	r3, [r3, r2]

}
 8011e26:	0018      	movs	r0, r3
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	b004      	add	sp, #16
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	46c0      	nop			; (mov r8, r8)
 8011e30:	ffff8000 	.word	0xffff8000

08011e34 <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	000a      	movs	r2, r1
 8011e3e:	1cbb      	adds	r3, r7, #2
 8011e40:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 8011e42:	230e      	movs	r3, #14
 8011e44:	18fb      	adds	r3, r7, r3
 8011e46:	4a14      	ldr	r2, [pc, #80]	; (8011e98 <findMin+0x64>)
 8011e48:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	60bb      	str	r3, [r7, #8]
 8011e4e:	e015      	b.n	8011e7c <findMin+0x48>
		if (data[i] < min)
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	18d3      	adds	r3, r2, r3
 8011e58:	2200      	movs	r2, #0
 8011e5a:	5e9b      	ldrsh	r3, [r3, r2]
 8011e5c:	210e      	movs	r1, #14
 8011e5e:	187a      	adds	r2, r7, r1
 8011e60:	2000      	movs	r0, #0
 8011e62:	5e12      	ldrsh	r2, [r2, r0]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	dd06      	ble.n	8011e76 <findMin+0x42>
			min = data[i];
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	18d2      	adds	r2, r2, r3
 8011e70:	187b      	adds	r3, r7, r1
 8011e72:	8812      	ldrh	r2, [r2, #0]
 8011e74:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	60bb      	str	r3, [r7, #8]
 8011e7c:	1cbb      	adds	r3, r7, #2
 8011e7e:	881b      	ldrh	r3, [r3, #0]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d3e4      	bcc.n	8011e50 <findMin+0x1c>
	}

	return min;
 8011e86:	230e      	movs	r3, #14
 8011e88:	18fb      	adds	r3, r7, r3
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8011e8e:	0018      	movs	r0, r3
 8011e90:	46bd      	mov	sp, r7
 8011e92:	b004      	add	sp, #16
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	46c0      	nop			; (mov r8, r8)
 8011e98:	00007fff 	.word	0x00007fff

08011e9c <settingsDrawData>:
		80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150,
		155, 160, 165, 170, 175, 180, 185, 190, 195 };
uint8_t column[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130,
		140, 150, 160, 170, 180, 190 };

void settingsDrawData(void) {
 8011e9c:	b5b0      	push	{r4, r5, r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af02      	add	r7, sp, #8

	//										SENSOR READINGS

	if (temperatureValue < 0) {
 8011ea2:	4b59      	ldr	r3, [pc, #356]	; (8012008 <settingsDrawData+0x16c>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da31      	bge.n	8011f0e <settingsDrawData+0x72>

		Paint_DrawChar(column[COLUMN_TEMP] - 8, line[LINE_TEMP], '-', &Font12,
 8011eaa:	4b58      	ldr	r3, [pc, #352]	; (801200c <settingsDrawData+0x170>)
 8011eac:	799b      	ldrb	r3, [r3, #6]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	3b08      	subs	r3, #8
 8011eb2:	b298      	uxth	r0, r3
 8011eb4:	4b56      	ldr	r3, [pc, #344]	; (8012010 <settingsDrawData+0x174>)
 8011eb6:	789b      	ldrb	r3, [r3, #2]
 8011eb8:	b299      	uxth	r1, r3
 8011eba:	4b56      	ldr	r3, [pc, #344]	; (8012014 <settingsDrawData+0x178>)
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	4a55      	ldr	r2, [pc, #340]	; (8012018 <settingsDrawData+0x17c>)
 8011ec4:	7812      	ldrb	r2, [r2, #0]
 8011ec6:	b2d2      	uxtb	r2, r2
 8011ec8:	b292      	uxth	r2, r2
 8011eca:	4c54      	ldr	r4, [pc, #336]	; (801201c <settingsDrawData+0x180>)
 8011ecc:	9201      	str	r2, [sp, #4]
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	0023      	movs	r3, r4
 8011ed2:	222d      	movs	r2, #45	; 0x2d
 8011ed4:	f7f7 fc34 	bl	8009740 <Paint_DrawChar>
				colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 8011ed8:	4b4c      	ldr	r3, [pc, #304]	; (801200c <settingsDrawData+0x170>)
 8011eda:	799b      	ldrb	r3, [r3, #6]
 8011edc:	b298      	uxth	r0, r3
 8011ede:	4b4c      	ldr	r3, [pc, #304]	; (8012010 <settingsDrawData+0x174>)
 8011ee0:	789b      	ldrb	r3, [r3, #2]
 8011ee2:	b299      	uxth	r1, r3
 8011ee4:	4b48      	ldr	r3, [pc, #288]	; (8012008 <settingsDrawData+0x16c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
				abs(temperatureValue), &Font12, colorSecond, colorMain);
 8011ee8:	17da      	asrs	r2, r3, #31
 8011eea:	189c      	adds	r4, r3, r2
 8011eec:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP],
 8011eee:	4b49      	ldr	r3, [pc, #292]	; (8012014 <settingsDrawData+0x178>)
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	4a48      	ldr	r2, [pc, #288]	; (8012018 <settingsDrawData+0x17c>)
 8011ef8:	7812      	ldrb	r2, [r2, #0]
 8011efa:	b2d2      	uxtb	r2, r2
 8011efc:	b292      	uxth	r2, r2
 8011efe:	4d47      	ldr	r5, [pc, #284]	; (801201c <settingsDrawData+0x180>)
 8011f00:	9201      	str	r2, [sp, #4]
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	002b      	movs	r3, r5
 8011f06:	0022      	movs	r2, r4
 8011f08:	f7f7 fd7c 	bl	8009a04 <Paint_DrawNum>
 8011f0c:	e016      	b.n	8011f3c <settingsDrawData+0xa0>

	} else {
		Paint_DrawNum(column[COLUMN_TEMP], line[LINE_TEMP], temperatureValue,
 8011f0e:	4b3f      	ldr	r3, [pc, #252]	; (801200c <settingsDrawData+0x170>)
 8011f10:	799b      	ldrb	r3, [r3, #6]
 8011f12:	b298      	uxth	r0, r3
 8011f14:	4b3e      	ldr	r3, [pc, #248]	; (8012010 <settingsDrawData+0x174>)
 8011f16:	789b      	ldrb	r3, [r3, #2]
 8011f18:	b299      	uxth	r1, r3
 8011f1a:	4b3b      	ldr	r3, [pc, #236]	; (8012008 <settingsDrawData+0x16c>)
 8011f1c:	681c      	ldr	r4, [r3, #0]
 8011f1e:	4b3d      	ldr	r3, [pc, #244]	; (8012014 <settingsDrawData+0x178>)
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	4a3c      	ldr	r2, [pc, #240]	; (8012018 <settingsDrawData+0x17c>)
 8011f28:	7812      	ldrb	r2, [r2, #0]
 8011f2a:	b2d2      	uxtb	r2, r2
 8011f2c:	b292      	uxth	r2, r2
 8011f2e:	4d3b      	ldr	r5, [pc, #236]	; (801201c <settingsDrawData+0x180>)
 8011f30:	9201      	str	r2, [sp, #4]
 8011f32:	9300      	str	r3, [sp, #0]
 8011f34:	002b      	movs	r3, r5
 8011f36:	0022      	movs	r2, r4
 8011f38:	f7f7 fd64 	bl	8009a04 <Paint_DrawNum>
				&Font12, colorSecond, colorMain);
	}

	Paint_DrawNum(column[COLUMN_HUM], line[LINE_HUM], humidityValue, &Font12,
 8011f3c:	4b33      	ldr	r3, [pc, #204]	; (801200c <settingsDrawData+0x170>)
 8011f3e:	791b      	ldrb	r3, [r3, #4]
 8011f40:	b298      	uxth	r0, r3
 8011f42:	4b33      	ldr	r3, [pc, #204]	; (8012010 <settingsDrawData+0x174>)
 8011f44:	795b      	ldrb	r3, [r3, #5]
 8011f46:	b299      	uxth	r1, r3
 8011f48:	4b35      	ldr	r3, [pc, #212]	; (8012020 <settingsDrawData+0x184>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	001d      	movs	r5, r3
 8011f4e:	4b31      	ldr	r3, [pc, #196]	; (8012014 <settingsDrawData+0x178>)
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	4a30      	ldr	r2, [pc, #192]	; (8012018 <settingsDrawData+0x17c>)
 8011f58:	7812      	ldrb	r2, [r2, #0]
 8011f5a:	b2d2      	uxtb	r2, r2
 8011f5c:	b292      	uxth	r2, r2
 8011f5e:	4c2f      	ldr	r4, [pc, #188]	; (801201c <settingsDrawData+0x180>)
 8011f60:	9201      	str	r2, [sp, #4]
 8011f62:	9300      	str	r3, [sp, #0]
 8011f64:	0023      	movs	r3, r4
 8011f66:	002a      	movs	r2, r5
 8011f68:	f7f7 fd4c 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_PRESS], line[LINE_PRESS], pressureValue,
 8011f6c:	4b27      	ldr	r3, [pc, #156]	; (801200c <settingsDrawData+0x170>)
 8011f6e:	78db      	ldrb	r3, [r3, #3]
 8011f70:	b298      	uxth	r0, r3
 8011f72:	4b27      	ldr	r3, [pc, #156]	; (8012010 <settingsDrawData+0x174>)
 8011f74:	7a1b      	ldrb	r3, [r3, #8]
 8011f76:	b299      	uxth	r1, r3
 8011f78:	4b2a      	ldr	r3, [pc, #168]	; (8012024 <settingsDrawData+0x188>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	001d      	movs	r5, r3
 8011f7e:	4b25      	ldr	r3, [pc, #148]	; (8012014 <settingsDrawData+0x178>)
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	b2db      	uxtb	r3, r3
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	4a24      	ldr	r2, [pc, #144]	; (8012018 <settingsDrawData+0x17c>)
 8011f88:	7812      	ldrb	r2, [r2, #0]
 8011f8a:	b2d2      	uxtb	r2, r2
 8011f8c:	b292      	uxth	r2, r2
 8011f8e:	4c23      	ldr	r4, [pc, #140]	; (801201c <settingsDrawData+0x180>)
 8011f90:	9201      	str	r2, [sp, #4]
 8011f92:	9300      	str	r3, [sp, #0]
 8011f94:	0023      	movs	r3, r4
 8011f96:	002a      	movs	r2, r5
 8011f98:	f7f7 fd34 	bl	8009a04 <Paint_DrawNum>
			&Font12, colorSecond, colorMain);

	if (altitudeValue < 0) {
 8011f9c:	4b22      	ldr	r3, [pc, #136]	; (8012028 <settingsDrawData+0x18c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	da43      	bge.n	801202c <settingsDrawData+0x190>
		Paint_DrawChar(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE], '-',
 8011fa4:	4b19      	ldr	r3, [pc, #100]	; (801200c <settingsDrawData+0x170>)
 8011fa6:	789b      	ldrb	r3, [r3, #2]
 8011fa8:	b298      	uxth	r0, r3
 8011faa:	4b19      	ldr	r3, [pc, #100]	; (8012010 <settingsDrawData+0x174>)
 8011fac:	7adb      	ldrb	r3, [r3, #11]
 8011fae:	b299      	uxth	r1, r3
 8011fb0:	4b18      	ldr	r3, [pc, #96]	; (8012014 <settingsDrawData+0x178>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	4a17      	ldr	r2, [pc, #92]	; (8012018 <settingsDrawData+0x17c>)
 8011fba:	7812      	ldrb	r2, [r2, #0]
 8011fbc:	b2d2      	uxtb	r2, r2
 8011fbe:	b292      	uxth	r2, r2
 8011fc0:	4c16      	ldr	r4, [pc, #88]	; (801201c <settingsDrawData+0x180>)
 8011fc2:	9201      	str	r2, [sp, #4]
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	0023      	movs	r3, r4
 8011fc8:	222d      	movs	r2, #45	; 0x2d
 8011fca:	f7f7 fbb9 	bl	8009740 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 8011fce:	4b0f      	ldr	r3, [pc, #60]	; (801200c <settingsDrawData+0x170>)
 8011fd0:	789b      	ldrb	r3, [r3, #2]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	3308      	adds	r3, #8
 8011fd6:	b298      	uxth	r0, r3
 8011fd8:	4b0d      	ldr	r3, [pc, #52]	; (8012010 <settingsDrawData+0x174>)
 8011fda:	7adb      	ldrb	r3, [r3, #11]
 8011fdc:	b299      	uxth	r1, r3
 8011fde:	4b12      	ldr	r3, [pc, #72]	; (8012028 <settingsDrawData+0x18c>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
				abs(altitudeValue), &Font12, colorSecond, colorMain);
 8011fe2:	17da      	asrs	r2, r3, #31
 8011fe4:	189c      	adds	r4, r3, r2
 8011fe6:	4054      	eors	r4, r2
		Paint_DrawNum(column[COLUMN_ALTITUDE] + 8, line[LINE_ALTITUDE],
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	; (8012014 <settingsDrawData+0x178>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	4a09      	ldr	r2, [pc, #36]	; (8012018 <settingsDrawData+0x17c>)
 8011ff2:	7812      	ldrb	r2, [r2, #0]
 8011ff4:	b2d2      	uxtb	r2, r2
 8011ff6:	b292      	uxth	r2, r2
 8011ff8:	4d08      	ldr	r5, [pc, #32]	; (801201c <settingsDrawData+0x180>)
 8011ffa:	9201      	str	r2, [sp, #4]
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	002b      	movs	r3, r5
 8012000:	0022      	movs	r2, r4
 8012002:	f7f7 fcff 	bl	8009a04 <Paint_DrawNum>
 8012006:	e028      	b.n	801205a <settingsDrawData+0x1be>
 8012008:	200003a8 	.word	0x200003a8
 801200c:	20000074 	.word	0x20000074
 8012010:	2000004c 	.word	0x2000004c
 8012014:	200006b3 	.word	0x200006b3
 8012018:	2000033a 	.word	0x2000033a
 801201c:	2000000c 	.word	0x2000000c
 8012020:	2000020c 	.word	0x2000020c
 8012024:	20000634 	.word	0x20000634
 8012028:	2000063c 	.word	0x2000063c
	} else {
		Paint_DrawNum(column[COLUMN_ALTITUDE], line[LINE_ALTITUDE],
 801202c:	4bc9      	ldr	r3, [pc, #804]	; (8012354 <settingsDrawData+0x4b8>)
 801202e:	789b      	ldrb	r3, [r3, #2]
 8012030:	b298      	uxth	r0, r3
 8012032:	4bc9      	ldr	r3, [pc, #804]	; (8012358 <settingsDrawData+0x4bc>)
 8012034:	7adb      	ldrb	r3, [r3, #11]
 8012036:	b299      	uxth	r1, r3
 8012038:	4bc8      	ldr	r3, [pc, #800]	; (801235c <settingsDrawData+0x4c0>)
 801203a:	681c      	ldr	r4, [r3, #0]
 801203c:	4bc8      	ldr	r3, [pc, #800]	; (8012360 <settingsDrawData+0x4c4>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	b2db      	uxtb	r3, r3
 8012042:	b29b      	uxth	r3, r3
 8012044:	4ac7      	ldr	r2, [pc, #796]	; (8012364 <settingsDrawData+0x4c8>)
 8012046:	7812      	ldrb	r2, [r2, #0]
 8012048:	b2d2      	uxtb	r2, r2
 801204a:	b292      	uxth	r2, r2
 801204c:	4dc6      	ldr	r5, [pc, #792]	; (8012368 <settingsDrawData+0x4cc>)
 801204e:	9201      	str	r2, [sp, #4]
 8012050:	9300      	str	r3, [sp, #0]
 8012052:	002b      	movs	r3, r5
 8012054:	0022      	movs	r2, r4
 8012056:	f7f7 fcd5 	bl	8009a04 <Paint_DrawNum>
				altitudeValue, &Font12, colorSecond, colorMain);
	}

	//										SENSOR READINGS UNITS
	Paint_DrawString_EN(column[COLUMN_TEMP + 2], line[LINE_TEMP], "C", &Font12,
 801205a:	4bbe      	ldr	r3, [pc, #760]	; (8012354 <settingsDrawData+0x4b8>)
 801205c:	7a1b      	ldrb	r3, [r3, #8]
 801205e:	b298      	uxth	r0, r3
 8012060:	4bbd      	ldr	r3, [pc, #756]	; (8012358 <settingsDrawData+0x4bc>)
 8012062:	789b      	ldrb	r3, [r3, #2]
 8012064:	b299      	uxth	r1, r3
 8012066:	4bbe      	ldr	r3, [pc, #760]	; (8012360 <settingsDrawData+0x4c4>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	b2db      	uxtb	r3, r3
 801206c:	b29b      	uxth	r3, r3
 801206e:	4abd      	ldr	r2, [pc, #756]	; (8012364 <settingsDrawData+0x4c8>)
 8012070:	7812      	ldrb	r2, [r2, #0]
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	b292      	uxth	r2, r2
 8012076:	4dbc      	ldr	r5, [pc, #752]	; (8012368 <settingsDrawData+0x4cc>)
 8012078:	4cbc      	ldr	r4, [pc, #752]	; (801236c <settingsDrawData+0x4d0>)
 801207a:	9201      	str	r2, [sp, #4]
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	002b      	movs	r3, r5
 8012080:	0022      	movs	r2, r4
 8012082:	f7f7 fc41 	bl	8009908 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_HUM + 2], line[LINE_HUM], "%", &Font12,
 8012086:	4bb3      	ldr	r3, [pc, #716]	; (8012354 <settingsDrawData+0x4b8>)
 8012088:	799b      	ldrb	r3, [r3, #6]
 801208a:	b298      	uxth	r0, r3
 801208c:	4bb2      	ldr	r3, [pc, #712]	; (8012358 <settingsDrawData+0x4bc>)
 801208e:	795b      	ldrb	r3, [r3, #5]
 8012090:	b299      	uxth	r1, r3
 8012092:	4bb3      	ldr	r3, [pc, #716]	; (8012360 <settingsDrawData+0x4c4>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	b29b      	uxth	r3, r3
 801209a:	4ab2      	ldr	r2, [pc, #712]	; (8012364 <settingsDrawData+0x4c8>)
 801209c:	7812      	ldrb	r2, [r2, #0]
 801209e:	b2d2      	uxtb	r2, r2
 80120a0:	b292      	uxth	r2, r2
 80120a2:	4db1      	ldr	r5, [pc, #708]	; (8012368 <settingsDrawData+0x4cc>)
 80120a4:	4cb2      	ldr	r4, [pc, #712]	; (8012370 <settingsDrawData+0x4d4>)
 80120a6:	9201      	str	r2, [sp, #4]
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	002b      	movs	r3, r5
 80120ac:	0022      	movs	r2, r4
 80120ae:	f7f7 fc2b 	bl	8009908 <Paint_DrawString_EN>
			colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS + 4], line[LINE_PRESS], "hPa",
 80120b2:	4ba8      	ldr	r3, [pc, #672]	; (8012354 <settingsDrawData+0x4b8>)
 80120b4:	79db      	ldrb	r3, [r3, #7]
 80120b6:	b298      	uxth	r0, r3
 80120b8:	4ba7      	ldr	r3, [pc, #668]	; (8012358 <settingsDrawData+0x4bc>)
 80120ba:	7a1b      	ldrb	r3, [r3, #8]
 80120bc:	b299      	uxth	r1, r3
 80120be:	4ba8      	ldr	r3, [pc, #672]	; (8012360 <settingsDrawData+0x4c4>)
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	4aa7      	ldr	r2, [pc, #668]	; (8012364 <settingsDrawData+0x4c8>)
 80120c8:	7812      	ldrb	r2, [r2, #0]
 80120ca:	b2d2      	uxtb	r2, r2
 80120cc:	b292      	uxth	r2, r2
 80120ce:	4da6      	ldr	r5, [pc, #664]	; (8012368 <settingsDrawData+0x4cc>)
 80120d0:	4ca8      	ldr	r4, [pc, #672]	; (8012374 <settingsDrawData+0x4d8>)
 80120d2:	9201      	str	r2, [sp, #4]
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	002b      	movs	r3, r5
 80120d8:	0022      	movs	r2, r4
 80120da:	f7f7 fc15 	bl	8009908 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_ALTITUDE + 5], line[LINE_ALTITUDE],
 80120de:	4b9d      	ldr	r3, [pc, #628]	; (8012354 <settingsDrawData+0x4b8>)
 80120e0:	79db      	ldrb	r3, [r3, #7]
 80120e2:	b298      	uxth	r0, r3
 80120e4:	4b9c      	ldr	r3, [pc, #624]	; (8012358 <settingsDrawData+0x4bc>)
 80120e6:	7adb      	ldrb	r3, [r3, #11]
 80120e8:	b299      	uxth	r1, r3
 80120ea:	4b9d      	ldr	r3, [pc, #628]	; (8012360 <settingsDrawData+0x4c4>)
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	4a9c      	ldr	r2, [pc, #624]	; (8012364 <settingsDrawData+0x4c8>)
 80120f4:	7812      	ldrb	r2, [r2, #0]
 80120f6:	b2d2      	uxtb	r2, r2
 80120f8:	b292      	uxth	r2, r2
 80120fa:	4d9b      	ldr	r5, [pc, #620]	; (8012368 <settingsDrawData+0x4cc>)
 80120fc:	4c9e      	ldr	r4, [pc, #632]	; (8012378 <settingsDrawData+0x4dc>)
 80120fe:	9201      	str	r2, [sp, #4]
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	002b      	movs	r3, r5
 8012104:	0022      	movs	r2, r4
 8012106:	f7f7 fbff 	bl	8009908 <Paint_DrawString_EN>
			"m a.s.l.", &Font12, colorSecond, colorMain);

	//										STRINGS
	Paint_DrawString_EN(column[COLUMN_LAYOUT], line[LINE_LAYOUT], "Layout:",
 801210a:	4b92      	ldr	r3, [pc, #584]	; (8012354 <settingsDrawData+0x4b8>)
 801210c:	785b      	ldrb	r3, [r3, #1]
 801210e:	b298      	uxth	r0, r3
 8012110:	4b91      	ldr	r3, [pc, #580]	; (8012358 <settingsDrawData+0x4bc>)
 8012112:	7e1b      	ldrb	r3, [r3, #24]
 8012114:	b299      	uxth	r1, r3
 8012116:	4b92      	ldr	r3, [pc, #584]	; (8012360 <settingsDrawData+0x4c4>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	b2db      	uxtb	r3, r3
 801211c:	b29b      	uxth	r3, r3
 801211e:	4a91      	ldr	r2, [pc, #580]	; (8012364 <settingsDrawData+0x4c8>)
 8012120:	7812      	ldrb	r2, [r2, #0]
 8012122:	b2d2      	uxtb	r2, r2
 8012124:	b292      	uxth	r2, r2
 8012126:	4d90      	ldr	r5, [pc, #576]	; (8012368 <settingsDrawData+0x4cc>)
 8012128:	4c94      	ldr	r4, [pc, #592]	; (801237c <settingsDrawData+0x4e0>)
 801212a:	9201      	str	r2, [sp, #4]
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	002b      	movs	r3, r5
 8012130:	0022      	movs	r2, r4
 8012132:	f7f7 fbe9 	bl	8009908 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_COLOR], line[LINE_COLOR], "Color:",
 8012136:	4b87      	ldr	r3, [pc, #540]	; (8012354 <settingsDrawData+0x4b8>)
 8012138:	789b      	ldrb	r3, [r3, #2]
 801213a:	b298      	uxth	r0, r3
 801213c:	4b86      	ldr	r3, [pc, #536]	; (8012358 <settingsDrawData+0x4bc>)
 801213e:	7f1b      	ldrb	r3, [r3, #28]
 8012140:	b299      	uxth	r1, r3
 8012142:	4b87      	ldr	r3, [pc, #540]	; (8012360 <settingsDrawData+0x4c4>)
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	b2db      	uxtb	r3, r3
 8012148:	b29b      	uxth	r3, r3
 801214a:	4a86      	ldr	r2, [pc, #536]	; (8012364 <settingsDrawData+0x4c8>)
 801214c:	7812      	ldrb	r2, [r2, #0]
 801214e:	b2d2      	uxtb	r2, r2
 8012150:	b292      	uxth	r2, r2
 8012152:	4d85      	ldr	r5, [pc, #532]	; (8012368 <settingsDrawData+0x4cc>)
 8012154:	4c8a      	ldr	r4, [pc, #552]	; (8012380 <settingsDrawData+0x4e4>)
 8012156:	9201      	str	r2, [sp, #4]
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	002b      	movs	r3, r5
 801215c:	0022      	movs	r2, r4
 801215e:	f7f7 fbd3 	bl	8009908 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_TEMP_CMP], line[LINE_TEMP_CMP], "T.cmp:",
 8012162:	4b7c      	ldr	r3, [pc, #496]	; (8012354 <settingsDrawData+0x4b8>)
 8012164:	79db      	ldrb	r3, [r3, #7]
 8012166:	b298      	uxth	r0, r3
 8012168:	4b7b      	ldr	r3, [pc, #492]	; (8012358 <settingsDrawData+0x4bc>)
 801216a:	2224      	movs	r2, #36	; 0x24
 801216c:	5c9b      	ldrb	r3, [r3, r2]
 801216e:	b299      	uxth	r1, r3
 8012170:	4b7b      	ldr	r3, [pc, #492]	; (8012360 <settingsDrawData+0x4c4>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	b2db      	uxtb	r3, r3
 8012176:	b29b      	uxth	r3, r3
 8012178:	4a7a      	ldr	r2, [pc, #488]	; (8012364 <settingsDrawData+0x4c8>)
 801217a:	7812      	ldrb	r2, [r2, #0]
 801217c:	b2d2      	uxtb	r2, r2
 801217e:	b292      	uxth	r2, r2
 8012180:	4d79      	ldr	r5, [pc, #484]	; (8012368 <settingsDrawData+0x4cc>)
 8012182:	4c80      	ldr	r4, [pc, #512]	; (8012384 <settingsDrawData+0x4e8>)
 8012184:	9201      	str	r2, [sp, #4]
 8012186:	9300      	str	r3, [sp, #0]
 8012188:	002b      	movs	r3, r5
 801218a:	0022      	movs	r2, r4
 801218c:	f7f7 fbbc 	bl	8009908 <Paint_DrawString_EN>
			&Font12, colorSecond, colorMain);
	Paint_DrawString_EN(column[COLUMN_PRESS_REF], line[LINE_PRESS_REF],
 8012190:	4b70      	ldr	r3, [pc, #448]	; (8012354 <settingsDrawData+0x4b8>)
 8012192:	791b      	ldrb	r3, [r3, #4]
 8012194:	b298      	uxth	r0, r3
 8012196:	4b70      	ldr	r3, [pc, #448]	; (8012358 <settingsDrawData+0x4bc>)
 8012198:	2220      	movs	r2, #32
 801219a:	5c9b      	ldrb	r3, [r3, r2]
 801219c:	b299      	uxth	r1, r3
 801219e:	4b70      	ldr	r3, [pc, #448]	; (8012360 <settingsDrawData+0x4c4>)
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	4a6f      	ldr	r2, [pc, #444]	; (8012364 <settingsDrawData+0x4c8>)
 80121a8:	7812      	ldrb	r2, [r2, #0]
 80121aa:	b2d2      	uxtb	r2, r2
 80121ac:	b292      	uxth	r2, r2
 80121ae:	4d6e      	ldr	r5, [pc, #440]	; (8012368 <settingsDrawData+0x4cc>)
 80121b0:	4c75      	ldr	r4, [pc, #468]	; (8012388 <settingsDrawData+0x4ec>)
 80121b2:	9201      	str	r2, [sp, #4]
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	002b      	movs	r3, r5
 80121b8:	0022      	movs	r2, r4
 80121ba:	f7f7 fba5 	bl	8009908 <Paint_DrawString_EN>
			"P.ref:", &Font12, colorSecond, colorMain);

	//										CLOCK
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_CLOCK], actual.hour, &Font16,
 80121be:	4b65      	ldr	r3, [pc, #404]	; (8012354 <settingsDrawData+0x4b8>)
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	b298      	uxth	r0, r3
 80121c4:	4b64      	ldr	r3, [pc, #400]	; (8012358 <settingsDrawData+0x4bc>)
 80121c6:	7c1b      	ldrb	r3, [r3, #16]
 80121c8:	b299      	uxth	r1, r3
 80121ca:	4b70      	ldr	r3, [pc, #448]	; (801238c <settingsDrawData+0x4f0>)
 80121cc:	78db      	ldrb	r3, [r3, #3]
 80121ce:	b25b      	sxtb	r3, r3
 80121d0:	001d      	movs	r5, r3
 80121d2:	4b63      	ldr	r3, [pc, #396]	; (8012360 <settingsDrawData+0x4c4>)
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	b29b      	uxth	r3, r3
 80121da:	4a62      	ldr	r2, [pc, #392]	; (8012364 <settingsDrawData+0x4c8>)
 80121dc:	7812      	ldrb	r2, [r2, #0]
 80121de:	b2d2      	uxtb	r2, r2
 80121e0:	b292      	uxth	r2, r2
 80121e2:	4c6b      	ldr	r4, [pc, #428]	; (8012390 <settingsDrawData+0x4f4>)
 80121e4:	9201      	str	r2, [sp, #4]
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	0023      	movs	r3, r4
 80121ea:	002a      	movs	r2, r5
 80121ec:	f7f7 fc0a 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_CLOCK], actual.minute, &Font16,
 80121f0:	4b58      	ldr	r3, [pc, #352]	; (8012354 <settingsDrawData+0x4b8>)
 80121f2:	78db      	ldrb	r3, [r3, #3]
 80121f4:	b298      	uxth	r0, r3
 80121f6:	4b58      	ldr	r3, [pc, #352]	; (8012358 <settingsDrawData+0x4bc>)
 80121f8:	7c1b      	ldrb	r3, [r3, #16]
 80121fa:	b299      	uxth	r1, r3
 80121fc:	4b63      	ldr	r3, [pc, #396]	; (801238c <settingsDrawData+0x4f0>)
 80121fe:	791b      	ldrb	r3, [r3, #4]
 8012200:	b25b      	sxtb	r3, r3
 8012202:	001d      	movs	r5, r3
 8012204:	4b56      	ldr	r3, [pc, #344]	; (8012360 <settingsDrawData+0x4c4>)
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	b2db      	uxtb	r3, r3
 801220a:	b29b      	uxth	r3, r3
 801220c:	4a55      	ldr	r2, [pc, #340]	; (8012364 <settingsDrawData+0x4c8>)
 801220e:	7812      	ldrb	r2, [r2, #0]
 8012210:	b2d2      	uxtb	r2, r2
 8012212:	b292      	uxth	r2, r2
 8012214:	4c5e      	ldr	r4, [pc, #376]	; (8012390 <settingsDrawData+0x4f4>)
 8012216:	9201      	str	r2, [sp, #4]
 8012218:	9300      	str	r3, [sp, #0]
 801221a:	0023      	movs	r3, r4
 801221c:	002a      	movs	r2, r5
 801221e:	f7f7 fbf1 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_CLOCK], actual.second, &Font16,
 8012222:	4b4c      	ldr	r3, [pc, #304]	; (8012354 <settingsDrawData+0x4b8>)
 8012224:	799b      	ldrb	r3, [r3, #6]
 8012226:	b298      	uxth	r0, r3
 8012228:	4b4b      	ldr	r3, [pc, #300]	; (8012358 <settingsDrawData+0x4bc>)
 801222a:	7c1b      	ldrb	r3, [r3, #16]
 801222c:	b299      	uxth	r1, r3
 801222e:	4b57      	ldr	r3, [pc, #348]	; (801238c <settingsDrawData+0x4f0>)
 8012230:	795b      	ldrb	r3, [r3, #5]
 8012232:	b25b      	sxtb	r3, r3
 8012234:	001d      	movs	r5, r3
 8012236:	4b4a      	ldr	r3, [pc, #296]	; (8012360 <settingsDrawData+0x4c4>)
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	b2db      	uxtb	r3, r3
 801223c:	b29b      	uxth	r3, r3
 801223e:	4a49      	ldr	r2, [pc, #292]	; (8012364 <settingsDrawData+0x4c8>)
 8012240:	7812      	ldrb	r2, [r2, #0]
 8012242:	b2d2      	uxtb	r2, r2
 8012244:	b292      	uxth	r2, r2
 8012246:	4c52      	ldr	r4, [pc, #328]	; (8012390 <settingsDrawData+0x4f4>)
 8012248:	9201      	str	r2, [sp, #4]
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	0023      	movs	r3, r4
 801224e:	002a      	movs	r2, r5
 8012250:	f7f7 fbd8 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);

	//										DATE
	Paint_DrawNum(column[COLUMN_HOUR], line[LINE_DATE], actual.day, &Font16,
 8012254:	4b3f      	ldr	r3, [pc, #252]	; (8012354 <settingsDrawData+0x4b8>)
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	b298      	uxth	r0, r3
 801225a:	4b3f      	ldr	r3, [pc, #252]	; (8012358 <settingsDrawData+0x4bc>)
 801225c:	7d1b      	ldrb	r3, [r3, #20]
 801225e:	b299      	uxth	r1, r3
 8012260:	4b4a      	ldr	r3, [pc, #296]	; (801238c <settingsDrawData+0x4f0>)
 8012262:	789b      	ldrb	r3, [r3, #2]
 8012264:	b25b      	sxtb	r3, r3
 8012266:	001d      	movs	r5, r3
 8012268:	4b3d      	ldr	r3, [pc, #244]	; (8012360 <settingsDrawData+0x4c4>)
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	b2db      	uxtb	r3, r3
 801226e:	b29b      	uxth	r3, r3
 8012270:	4a3c      	ldr	r2, [pc, #240]	; (8012364 <settingsDrawData+0x4c8>)
 8012272:	7812      	ldrb	r2, [r2, #0]
 8012274:	b2d2      	uxtb	r2, r2
 8012276:	b292      	uxth	r2, r2
 8012278:	4c45      	ldr	r4, [pc, #276]	; (8012390 <settingsDrawData+0x4f4>)
 801227a:	9201      	str	r2, [sp, #4]
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	0023      	movs	r3, r4
 8012280:	002a      	movs	r2, r5
 8012282:	f7f7 fbbf 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_MIN], line[LINE_DATE], actual.month, &Font16,
 8012286:	4b33      	ldr	r3, [pc, #204]	; (8012354 <settingsDrawData+0x4b8>)
 8012288:	78db      	ldrb	r3, [r3, #3]
 801228a:	b298      	uxth	r0, r3
 801228c:	4b32      	ldr	r3, [pc, #200]	; (8012358 <settingsDrawData+0x4bc>)
 801228e:	7d1b      	ldrb	r3, [r3, #20]
 8012290:	b299      	uxth	r1, r3
 8012292:	4b3e      	ldr	r3, [pc, #248]	; (801238c <settingsDrawData+0x4f0>)
 8012294:	785b      	ldrb	r3, [r3, #1]
 8012296:	b25b      	sxtb	r3, r3
 8012298:	001d      	movs	r5, r3
 801229a:	4b31      	ldr	r3, [pc, #196]	; (8012360 <settingsDrawData+0x4c4>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	4a30      	ldr	r2, [pc, #192]	; (8012364 <settingsDrawData+0x4c8>)
 80122a4:	7812      	ldrb	r2, [r2, #0]
 80122a6:	b2d2      	uxtb	r2, r2
 80122a8:	b292      	uxth	r2, r2
 80122aa:	4c39      	ldr	r4, [pc, #228]	; (8012390 <settingsDrawData+0x4f4>)
 80122ac:	9201      	str	r2, [sp, #4]
 80122ae:	9300      	str	r3, [sp, #0]
 80122b0:	0023      	movs	r3, r4
 80122b2:	002a      	movs	r2, r5
 80122b4:	f7f7 fba6 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);
	Paint_DrawNum(column[COLUMN_SEC], line[LINE_DATE], actual.year, &Font16,
 80122b8:	4b26      	ldr	r3, [pc, #152]	; (8012354 <settingsDrawData+0x4b8>)
 80122ba:	799b      	ldrb	r3, [r3, #6]
 80122bc:	b298      	uxth	r0, r3
 80122be:	4b26      	ldr	r3, [pc, #152]	; (8012358 <settingsDrawData+0x4bc>)
 80122c0:	7d1b      	ldrb	r3, [r3, #20]
 80122c2:	b299      	uxth	r1, r3
 80122c4:	4b31      	ldr	r3, [pc, #196]	; (801238c <settingsDrawData+0x4f0>)
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	b25b      	sxtb	r3, r3
 80122ca:	001d      	movs	r5, r3
 80122cc:	4b24      	ldr	r3, [pc, #144]	; (8012360 <settingsDrawData+0x4c4>)
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	4a23      	ldr	r2, [pc, #140]	; (8012364 <settingsDrawData+0x4c8>)
 80122d6:	7812      	ldrb	r2, [r2, #0]
 80122d8:	b2d2      	uxtb	r2, r2
 80122da:	b292      	uxth	r2, r2
 80122dc:	4c2c      	ldr	r4, [pc, #176]	; (8012390 <settingsDrawData+0x4f4>)
 80122de:	9201      	str	r2, [sp, #4]
 80122e0:	9300      	str	r3, [sp, #0]
 80122e2:	0023      	movs	r3, r4
 80122e4:	002a      	movs	r2, r5
 80122e6:	f7f7 fb8d 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);

	//										LAYOUT
	Paint_DrawNum(column[COLUMN_LAYOUT + 6], line[LINE_LAYOUT], layout, &Font12,
 80122ea:	4b1a      	ldr	r3, [pc, #104]	; (8012354 <settingsDrawData+0x4b8>)
 80122ec:	79db      	ldrb	r3, [r3, #7]
 80122ee:	b298      	uxth	r0, r3
 80122f0:	4b19      	ldr	r3, [pc, #100]	; (8012358 <settingsDrawData+0x4bc>)
 80122f2:	7e1b      	ldrb	r3, [r3, #24]
 80122f4:	b299      	uxth	r1, r3
 80122f6:	4b27      	ldr	r3, [pc, #156]	; (8012394 <settingsDrawData+0x4f8>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	001d      	movs	r5, r3
 80122fe:	4b18      	ldr	r3, [pc, #96]	; (8012360 <settingsDrawData+0x4c4>)
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	b2db      	uxtb	r3, r3
 8012304:	b29b      	uxth	r3, r3
 8012306:	4a17      	ldr	r2, [pc, #92]	; (8012364 <settingsDrawData+0x4c8>)
 8012308:	7812      	ldrb	r2, [r2, #0]
 801230a:	b2d2      	uxtb	r2, r2
 801230c:	b292      	uxth	r2, r2
 801230e:	4c16      	ldr	r4, [pc, #88]	; (8012368 <settingsDrawData+0x4cc>)
 8012310:	9201      	str	r2, [sp, #4]
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	0023      	movs	r3, r4
 8012316:	002a      	movs	r2, r5
 8012318:	f7f7 fb74 	bl	8009a04 <Paint_DrawNum>
			colorSecond, colorMain);

	//										COLOR
	if (colorScheme == COLOR_SCHEME_WHITE)
 801231c:	4b1e      	ldr	r3, [pc, #120]	; (8012398 <settingsDrawData+0x4fc>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	b2db      	uxtb	r3, r3
 8012322:	2b01      	cmp	r3, #1
 8012324:	d13a      	bne.n	801239c <settingsDrawData+0x500>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'W', &Font12,
 8012326:	4b0b      	ldr	r3, [pc, #44]	; (8012354 <settingsDrawData+0x4b8>)
 8012328:	79db      	ldrb	r3, [r3, #7]
 801232a:	b298      	uxth	r0, r3
 801232c:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <settingsDrawData+0x4bc>)
 801232e:	7f1b      	ldrb	r3, [r3, #28]
 8012330:	b299      	uxth	r1, r3
 8012332:	4b0b      	ldr	r3, [pc, #44]	; (8012360 <settingsDrawData+0x4c4>)
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	b2db      	uxtb	r3, r3
 8012338:	b29b      	uxth	r3, r3
 801233a:	4a0a      	ldr	r2, [pc, #40]	; (8012364 <settingsDrawData+0x4c8>)
 801233c:	7812      	ldrb	r2, [r2, #0]
 801233e:	b2d2      	uxtb	r2, r2
 8012340:	b292      	uxth	r2, r2
 8012342:	4c09      	ldr	r4, [pc, #36]	; (8012368 <settingsDrawData+0x4cc>)
 8012344:	9201      	str	r2, [sp, #4]
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	0023      	movs	r3, r4
 801234a:	2257      	movs	r2, #87	; 0x57
 801234c:	f7f7 f9f8 	bl	8009740 <Paint_DrawChar>
 8012350:	e03e      	b.n	80123d0 <settingsDrawData+0x534>
 8012352:	46c0      	nop			; (mov r8, r8)
 8012354:	20000074 	.word	0x20000074
 8012358:	2000004c 	.word	0x2000004c
 801235c:	2000063c 	.word	0x2000063c
 8012360:	200006b3 	.word	0x200006b3
 8012364:	2000033a 	.word	0x2000033a
 8012368:	2000000c 	.word	0x2000000c
 801236c:	0801616c 	.word	0x0801616c
 8012370:	08016170 	.word	0x08016170
 8012374:	08016174 	.word	0x08016174
 8012378:	08016178 	.word	0x08016178
 801237c:	08016184 	.word	0x08016184
 8012380:	0801618c 	.word	0x0801618c
 8012384:	08016194 	.word	0x08016194
 8012388:	0801619c 	.word	0x0801619c
 801238c:	200006ac 	.word	0x200006ac
 8012390:	20000014 	.word	0x20000014
 8012394:	200006f5 	.word	0x200006f5
 8012398:	200006d8 	.word	0x200006d8
				colorSecond, colorMain);
	else if (colorScheme == COLOR_SCHEME_BLACK)
 801239c:	4b46      	ldr	r3, [pc, #280]	; (80124b8 <settingsDrawData+0x61c>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d114      	bne.n	80123d0 <settingsDrawData+0x534>
		Paint_DrawChar(column[COLUMN_COLOR + 5], line[LINE_COLOR], 'B', &Font12,
 80123a6:	4b45      	ldr	r3, [pc, #276]	; (80124bc <settingsDrawData+0x620>)
 80123a8:	79db      	ldrb	r3, [r3, #7]
 80123aa:	b298      	uxth	r0, r3
 80123ac:	4b44      	ldr	r3, [pc, #272]	; (80124c0 <settingsDrawData+0x624>)
 80123ae:	7f1b      	ldrb	r3, [r3, #28]
 80123b0:	b299      	uxth	r1, r3
 80123b2:	4b44      	ldr	r3, [pc, #272]	; (80124c4 <settingsDrawData+0x628>)
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	4a43      	ldr	r2, [pc, #268]	; (80124c8 <settingsDrawData+0x62c>)
 80123bc:	7812      	ldrb	r2, [r2, #0]
 80123be:	b2d2      	uxtb	r2, r2
 80123c0:	b292      	uxth	r2, r2
 80123c2:	4c42      	ldr	r4, [pc, #264]	; (80124cc <settingsDrawData+0x630>)
 80123c4:	9201      	str	r2, [sp, #4]
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	0023      	movs	r3, r4
 80123ca:	2242      	movs	r2, #66	; 0x42
 80123cc:	f7f7 f9b8 	bl	8009740 <Paint_DrawChar>
				colorSecond, colorMain);

	//										PRESSURE REFERENCE
	Paint_DrawNum(column[COLUMN_PRESS_REF + 5], line[LINE_PRESS_REF],
 80123d0:	4b3a      	ldr	r3, [pc, #232]	; (80124bc <settingsDrawData+0x620>)
 80123d2:	7a5b      	ldrb	r3, [r3, #9]
 80123d4:	b298      	uxth	r0, r3
 80123d6:	4b3a      	ldr	r3, [pc, #232]	; (80124c0 <settingsDrawData+0x624>)
 80123d8:	2220      	movs	r2, #32
 80123da:	5c9b      	ldrb	r3, [r3, r2]
 80123dc:	b299      	uxth	r1, r3
 80123de:	4b3c      	ldr	r3, [pc, #240]	; (80124d0 <settingsDrawData+0x634>)
 80123e0:	881b      	ldrh	r3, [r3, #0]
 80123e2:	b21b      	sxth	r3, r3
 80123e4:	001d      	movs	r5, r3
 80123e6:	4b37      	ldr	r3, [pc, #220]	; (80124c4 <settingsDrawData+0x628>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	4a36      	ldr	r2, [pc, #216]	; (80124c8 <settingsDrawData+0x62c>)
 80123f0:	7812      	ldrb	r2, [r2, #0]
 80123f2:	b2d2      	uxtb	r2, r2
 80123f4:	b292      	uxth	r2, r2
 80123f6:	4c35      	ldr	r4, [pc, #212]	; (80124cc <settingsDrawData+0x630>)
 80123f8:	9201      	str	r2, [sp, #4]
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	0023      	movs	r3, r4
 80123fe:	002a      	movs	r2, r5
 8012400:	f7f7 fb00 	bl	8009a04 <Paint_DrawNum>
			pressureReference, &Font12, colorSecond, colorMain);

	//										TEMPERATURE COMPENSATION

	if (temperatureCompensation < 0) {
 8012404:	4b33      	ldr	r3, [pc, #204]	; (80124d4 <settingsDrawData+0x638>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	b25b      	sxtb	r3, r3
 801240a:	2b00      	cmp	r3, #0
 801240c:	da36      	bge.n	801247c <settingsDrawData+0x5e0>

		Paint_DrawChar(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP], '-',
 801240e:	4b2b      	ldr	r3, [pc, #172]	; (80124bc <settingsDrawData+0x620>)
 8012410:	7b1b      	ldrb	r3, [r3, #12]
 8012412:	b298      	uxth	r0, r3
 8012414:	4b2a      	ldr	r3, [pc, #168]	; (80124c0 <settingsDrawData+0x624>)
 8012416:	2224      	movs	r2, #36	; 0x24
 8012418:	5c9b      	ldrb	r3, [r3, r2]
 801241a:	b299      	uxth	r1, r3
 801241c:	4b29      	ldr	r3, [pc, #164]	; (80124c4 <settingsDrawData+0x628>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	b2db      	uxtb	r3, r3
 8012422:	b29b      	uxth	r3, r3
 8012424:	4a28      	ldr	r2, [pc, #160]	; (80124c8 <settingsDrawData+0x62c>)
 8012426:	7812      	ldrb	r2, [r2, #0]
 8012428:	b2d2      	uxtb	r2, r2
 801242a:	b292      	uxth	r2, r2
 801242c:	4c27      	ldr	r4, [pc, #156]	; (80124cc <settingsDrawData+0x630>)
 801242e:	9201      	str	r2, [sp, #4]
 8012430:	9300      	str	r3, [sp, #0]
 8012432:	0023      	movs	r3, r4
 8012434:	222d      	movs	r2, #45	; 0x2d
 8012436:	f7f7 f983 	bl	8009740 <Paint_DrawChar>
				&Font12, colorSecond, colorMain);
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 801243a:	4b20      	ldr	r3, [pc, #128]	; (80124bc <settingsDrawData+0x620>)
 801243c:	7b1b      	ldrb	r3, [r3, #12]
 801243e:	b29b      	uxth	r3, r3
 8012440:	3308      	adds	r3, #8
 8012442:	b298      	uxth	r0, r3
 8012444:	4b1e      	ldr	r3, [pc, #120]	; (80124c0 <settingsDrawData+0x624>)
 8012446:	2224      	movs	r2, #36	; 0x24
 8012448:	5c9b      	ldrb	r3, [r3, r2]
 801244a:	b299      	uxth	r1, r3
				abs(temperatureCompensation), &Font12, colorSecond, colorMain);
 801244c:	4b21      	ldr	r3, [pc, #132]	; (80124d4 <settingsDrawData+0x638>)
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	b25b      	sxtb	r3, r3
 8012452:	17da      	asrs	r2, r3, #31
 8012454:	189b      	adds	r3, r3, r2
 8012456:	4053      	eors	r3, r2
 8012458:	b2db      	uxtb	r3, r3
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5] + 8, line[LINE_TEMP_CMP],
 801245a:	001d      	movs	r5, r3
 801245c:	4b19      	ldr	r3, [pc, #100]	; (80124c4 <settingsDrawData+0x628>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	b2db      	uxtb	r3, r3
 8012462:	b29b      	uxth	r3, r3
 8012464:	4a18      	ldr	r2, [pc, #96]	; (80124c8 <settingsDrawData+0x62c>)
 8012466:	7812      	ldrb	r2, [r2, #0]
 8012468:	b2d2      	uxtb	r2, r2
 801246a:	b292      	uxth	r2, r2
 801246c:	4c17      	ldr	r4, [pc, #92]	; (80124cc <settingsDrawData+0x630>)
 801246e:	9201      	str	r2, [sp, #4]
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	0023      	movs	r3, r4
 8012474:	002a      	movs	r2, r5
 8012476:	f7f7 fac5 	bl	8009a04 <Paint_DrawNum>
	}

//	Paint_DrawNum(column[COLUMN_COLOR+7], line[LINE_COLOR], colorScheme, &Font16, colorSecond,
//			colorMain);

}
 801247a:	e019      	b.n	80124b0 <settingsDrawData+0x614>
		Paint_DrawNum(column[COLUMN_TEMP_CMP + 5], line[LINE_TEMP_CMP],
 801247c:	4b0f      	ldr	r3, [pc, #60]	; (80124bc <settingsDrawData+0x620>)
 801247e:	7b1b      	ldrb	r3, [r3, #12]
 8012480:	b298      	uxth	r0, r3
 8012482:	4b0f      	ldr	r3, [pc, #60]	; (80124c0 <settingsDrawData+0x624>)
 8012484:	2224      	movs	r2, #36	; 0x24
 8012486:	5c9b      	ldrb	r3, [r3, r2]
 8012488:	b299      	uxth	r1, r3
 801248a:	4b12      	ldr	r3, [pc, #72]	; (80124d4 <settingsDrawData+0x638>)
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	b25b      	sxtb	r3, r3
 8012490:	001d      	movs	r5, r3
 8012492:	4b0c      	ldr	r3, [pc, #48]	; (80124c4 <settingsDrawData+0x628>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	b2db      	uxtb	r3, r3
 8012498:	b29b      	uxth	r3, r3
 801249a:	4a0b      	ldr	r2, [pc, #44]	; (80124c8 <settingsDrawData+0x62c>)
 801249c:	7812      	ldrb	r2, [r2, #0]
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	b292      	uxth	r2, r2
 80124a2:	4c0a      	ldr	r4, [pc, #40]	; (80124cc <settingsDrawData+0x630>)
 80124a4:	9201      	str	r2, [sp, #4]
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	0023      	movs	r3, r4
 80124aa:	002a      	movs	r2, r5
 80124ac:	f7f7 faaa 	bl	8009a04 <Paint_DrawNum>
}
 80124b0:	46c0      	nop			; (mov r8, r8)
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bdb0      	pop	{r4, r5, r7, pc}
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	200006d8 	.word	0x200006d8
 80124bc:	20000074 	.word	0x20000074
 80124c0:	2000004c 	.word	0x2000004c
 80124c4:	200006b3 	.word	0x200006b3
 80124c8:	2000033a 	.word	0x2000033a
 80124cc:	2000000c 	.word	0x2000000c
 80124d0:	20000032 	.word	0x20000032
 80124d4:	20000030 	.word	0x20000030

080124d8 <settingsDrawSubs>:

void settingsDrawSubs(void) {
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af04      	add	r7, sp, #16

	Paint_DrawChar(160, 40, '+', &Font20, colorSecond, colorMain);
 80124de:	4b31      	ldr	r3, [pc, #196]	; (80125a4 <settingsDrawSubs+0xcc>)
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	4a30      	ldr	r2, [pc, #192]	; (80125a8 <settingsDrawSubs+0xd0>)
 80124e8:	7812      	ldrb	r2, [r2, #0]
 80124ea:	b2d2      	uxtb	r2, r2
 80124ec:	b292      	uxth	r2, r2
 80124ee:	492f      	ldr	r1, [pc, #188]	; (80125ac <settingsDrawSubs+0xd4>)
 80124f0:	9201      	str	r2, [sp, #4]
 80124f2:	9300      	str	r3, [sp, #0]
 80124f4:	000b      	movs	r3, r1
 80124f6:	222b      	movs	r2, #43	; 0x2b
 80124f8:	2128      	movs	r1, #40	; 0x28
 80124fa:	20a0      	movs	r0, #160	; 0xa0
 80124fc:	f7f7 f920 	bl	8009740 <Paint_DrawChar>
	Paint_DrawChar(160, 140, '>', &Font20, colorSecond, colorMain);
 8012500:	4b28      	ldr	r3, [pc, #160]	; (80125a4 <settingsDrawSubs+0xcc>)
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	b2db      	uxtb	r3, r3
 8012506:	b29b      	uxth	r3, r3
 8012508:	4a27      	ldr	r2, [pc, #156]	; (80125a8 <settingsDrawSubs+0xd0>)
 801250a:	7812      	ldrb	r2, [r2, #0]
 801250c:	b2d2      	uxtb	r2, r2
 801250e:	b292      	uxth	r2, r2
 8012510:	4926      	ldr	r1, [pc, #152]	; (80125ac <settingsDrawSubs+0xd4>)
 8012512:	9201      	str	r2, [sp, #4]
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	000b      	movs	r3, r1
 8012518:	223e      	movs	r2, #62	; 0x3e
 801251a:	218c      	movs	r1, #140	; 0x8c
 801251c:	20a0      	movs	r0, #160	; 0xa0
 801251e:	f7f7 f90f 	bl	8009740 <Paint_DrawChar>
	Paint_DrawString_EN(132, 92, "libra", &Font16, colorSecond, colorMain);
 8012522:	4b20      	ldr	r3, [pc, #128]	; (80125a4 <settingsDrawSubs+0xcc>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	b2db      	uxtb	r3, r3
 8012528:	b29b      	uxth	r3, r3
 801252a:	4a1f      	ldr	r2, [pc, #124]	; (80125a8 <settingsDrawSubs+0xd0>)
 801252c:	7812      	ldrb	r2, [r2, #0]
 801252e:	b2d2      	uxtb	r2, r2
 8012530:	b292      	uxth	r2, r2
 8012532:	481f      	ldr	r0, [pc, #124]	; (80125b0 <settingsDrawSubs+0xd8>)
 8012534:	491f      	ldr	r1, [pc, #124]	; (80125b4 <settingsDrawSubs+0xdc>)
 8012536:	9201      	str	r2, [sp, #4]
 8012538:	9300      	str	r3, [sp, #0]
 801253a:	0003      	movs	r3, r0
 801253c:	000a      	movs	r2, r1
 801253e:	215c      	movs	r1, #92	; 0x5c
 8012540:	2084      	movs	r0, #132	; 0x84
 8012542:	f7f7 f9e1 	bl	8009908 <Paint_DrawString_EN>

	Paint_DrawLine(0, 75, 122, 75, colorSecond, DOT_PIXEL_1X1,
 8012546:	4b17      	ldr	r3, [pc, #92]	; (80125a4 <settingsDrawSubs+0xcc>)
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	b2db      	uxtb	r3, r3
 801254c:	b29b      	uxth	r3, r3
 801254e:	2200      	movs	r2, #0
 8012550:	9202      	str	r2, [sp, #8]
 8012552:	2201      	movs	r2, #1
 8012554:	9201      	str	r2, [sp, #4]
 8012556:	9300      	str	r3, [sp, #0]
 8012558:	234b      	movs	r3, #75	; 0x4b
 801255a:	227a      	movs	r2, #122	; 0x7a
 801255c:	214b      	movs	r1, #75	; 0x4b
 801255e:	2000      	movs	r0, #0
 8012560:	f7f6 fc08 	bl	8008d74 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 118, 122, 118, colorSecond, DOT_PIXEL_1X1,
 8012564:	4b0f      	ldr	r3, [pc, #60]	; (80125a4 <settingsDrawSubs+0xcc>)
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	b2db      	uxtb	r3, r3
 801256a:	b29b      	uxth	r3, r3
 801256c:	2200      	movs	r2, #0
 801256e:	9202      	str	r2, [sp, #8]
 8012570:	2201      	movs	r2, #1
 8012572:	9201      	str	r2, [sp, #4]
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	2376      	movs	r3, #118	; 0x76
 8012578:	227a      	movs	r2, #122	; 0x7a
 801257a:	2176      	movs	r1, #118	; 0x76
 801257c:	2000      	movs	r0, #0
 801257e:	f7f6 fbf9 	bl	8008d74 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	Paint_DrawCircle(200, 100, 80, colorSecond, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 8012582:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <settingsDrawSubs+0xcc>)
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	b2db      	uxtb	r3, r3
 8012588:	b29b      	uxth	r3, r3
 801258a:	2200      	movs	r2, #0
 801258c:	9201      	str	r2, [sp, #4]
 801258e:	2202      	movs	r2, #2
 8012590:	9200      	str	r2, [sp, #0]
 8012592:	2250      	movs	r2, #80	; 0x50
 8012594:	2164      	movs	r1, #100	; 0x64
 8012596:	20c8      	movs	r0, #200	; 0xc8
 8012598:	f7f6 fe80 	bl	800929c <Paint_DrawCircle>

}
 801259c:	46c0      	nop			; (mov r8, r8)
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	46c0      	nop			; (mov r8, r8)
 80125a4:	200006b3 	.word	0x200006b3
 80125a8:	2000033a 	.word	0x2000033a
 80125ac:	2000001c 	.word	0x2000001c
 80125b0:	20000014 	.word	0x20000014
 80125b4:	080161a4 	.word	0x080161a4

080125b8 <settingsDrawPointer>:

void settingsDrawPointer(void) {
 80125b8:	b5b0      	push	{r4, r5, r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af04      	add	r7, sp, #16
	if (settingsPointer == SETTINGS_HOURS) {
 80125be:	4baf      	ldr	r3, [pc, #700]	; (801287c <settingsDrawPointer+0x2c4>)
 80125c0:	781b      	ldrb	r3, [r3, #0]

	}

	switch (settingsPointer) {
 80125c2:	4bae      	ldr	r3, [pc, #696]	; (801287c <settingsDrawPointer+0x2c4>)
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b0a      	cmp	r3, #10
 80125ca:	d900      	bls.n	80125ce <settingsDrawPointer+0x16>
 80125cc:	e152      	b.n	8012874 <settingsDrawPointer+0x2bc>
 80125ce:	009a      	lsls	r2, r3, #2
 80125d0:	4bab      	ldr	r3, [pc, #684]	; (8012880 <settingsDrawPointer+0x2c8>)
 80125d2:	18d3      	adds	r3, r2, r3
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	469f      	mov	pc, r3
	case SETTINGS_HOURS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 80125d8:	4baa      	ldr	r3, [pc, #680]	; (8012884 <settingsDrawPointer+0x2cc>)
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	3303      	adds	r3, #3
 80125e0:	b298      	uxth	r0, r3
 80125e2:	4ba9      	ldr	r3, [pc, #676]	; (8012888 <settingsDrawPointer+0x2d0>)
 80125e4:	7c1b      	ldrb	r3, [r3, #16]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	330f      	adds	r3, #15
 80125ea:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 80125ec:	4ba5      	ldr	r3, [pc, #660]	; (8012884 <settingsDrawPointer+0x2cc>)
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 80125f2:	3314      	adds	r3, #20
 80125f4:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_CLOCK] + 15, colorSecond,
 80125f6:	4ba4      	ldr	r3, [pc, #656]	; (8012888 <settingsDrawPointer+0x2d0>)
 80125f8:	7c1b      	ldrb	r3, [r3, #16]
 80125fa:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_CLOCK] + 15,
 80125fc:	330f      	adds	r3, #15
 80125fe:	b29c      	uxth	r4, r3
 8012600:	4ba2      	ldr	r3, [pc, #648]	; (801288c <settingsDrawPointer+0x2d4>)
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	b29b      	uxth	r3, r3
 8012608:	2500      	movs	r5, #0
 801260a:	9502      	str	r5, [sp, #8]
 801260c:	2502      	movs	r5, #2
 801260e:	9501      	str	r5, [sp, #4]
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	0023      	movs	r3, r4
 8012614:	f7f6 fbae 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // hour
		break;
 8012618:	e12c      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_MINUTES:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 801261a:	4b9a      	ldr	r3, [pc, #616]	; (8012884 <settingsDrawPointer+0x2cc>)
 801261c:	78db      	ldrb	r3, [r3, #3]
 801261e:	b29b      	uxth	r3, r3
 8012620:	3303      	adds	r3, #3
 8012622:	b298      	uxth	r0, r3
 8012624:	4b98      	ldr	r3, [pc, #608]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012626:	7c1b      	ldrb	r3, [r3, #16]
 8012628:	b29b      	uxth	r3, r3
 801262a:	330f      	adds	r3, #15
 801262c:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 801262e:	4b95      	ldr	r3, [pc, #596]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012630:	78db      	ldrb	r3, [r3, #3]
 8012632:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 8012634:	3314      	adds	r3, #20
 8012636:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_CLOCK] + 15, colorSecond,
 8012638:	4b93      	ldr	r3, [pc, #588]	; (8012888 <settingsDrawPointer+0x2d0>)
 801263a:	7c1b      	ldrb	r3, [r3, #16]
 801263c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_CLOCK] + 15,
 801263e:	330f      	adds	r3, #15
 8012640:	b29c      	uxth	r4, r3
 8012642:	4b92      	ldr	r3, [pc, #584]	; (801288c <settingsDrawPointer+0x2d4>)
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	b2db      	uxtb	r3, r3
 8012648:	b29b      	uxth	r3, r3
 801264a:	2500      	movs	r5, #0
 801264c:	9502      	str	r5, [sp, #8]
 801264e:	2502      	movs	r5, #2
 8012650:	9501      	str	r5, [sp, #4]
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	0023      	movs	r3, r4
 8012656:	f7f6 fb8d 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // minute
		break;
 801265a:	e10b      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_SECONDS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 801265c:	4b89      	ldr	r3, [pc, #548]	; (8012884 <settingsDrawPointer+0x2cc>)
 801265e:	799b      	ldrb	r3, [r3, #6]
 8012660:	b29b      	uxth	r3, r3
 8012662:	3303      	adds	r3, #3
 8012664:	b298      	uxth	r0, r3
 8012666:	4b88      	ldr	r3, [pc, #544]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012668:	7c1b      	ldrb	r3, [r3, #16]
 801266a:	b29b      	uxth	r3, r3
 801266c:	330f      	adds	r3, #15
 801266e:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 8012670:	4b84      	ldr	r3, [pc, #528]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012672:	799b      	ldrb	r3, [r3, #6]
 8012674:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 8012676:	3314      	adds	r3, #20
 8012678:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_CLOCK] + 15, colorSecond,
 801267a:	4b83      	ldr	r3, [pc, #524]	; (8012888 <settingsDrawPointer+0x2d0>)
 801267c:	7c1b      	ldrb	r3, [r3, #16]
 801267e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_CLOCK] + 15,
 8012680:	330f      	adds	r3, #15
 8012682:	b29c      	uxth	r4, r3
 8012684:	4b81      	ldr	r3, [pc, #516]	; (801288c <settingsDrawPointer+0x2d4>)
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	b2db      	uxtb	r3, r3
 801268a:	b29b      	uxth	r3, r3
 801268c:	2500      	movs	r5, #0
 801268e:	9502      	str	r5, [sp, #8]
 8012690:	2502      	movs	r5, #2
 8012692:	9501      	str	r5, [sp, #4]
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	0023      	movs	r3, r4
 8012698:	f7f6 fb6c 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // second
		break;
 801269c:	e0ea      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_DAYS:
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 801269e:	4b79      	ldr	r3, [pc, #484]	; (8012884 <settingsDrawPointer+0x2cc>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	3303      	adds	r3, #3
 80126a6:	b298      	uxth	r0, r3
 80126a8:	4b77      	ldr	r3, [pc, #476]	; (8012888 <settingsDrawPointer+0x2d0>)
 80126aa:	7d1b      	ldrb	r3, [r3, #20]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	330f      	adds	r3, #15
 80126b0:	b299      	uxth	r1, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 80126b2:	4b74      	ldr	r3, [pc, #464]	; (8012884 <settingsDrawPointer+0x2cc>)
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 80126b8:	3314      	adds	r3, #20
 80126ba:	b29a      	uxth	r2, r3
				column[COLUMN_HOUR] + 20, line[LINE_DATE] + 15, colorSecond,
 80126bc:	4b72      	ldr	r3, [pc, #456]	; (8012888 <settingsDrawPointer+0x2d0>)
 80126be:	7d1b      	ldrb	r3, [r3, #20]
 80126c0:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_HOUR] + 3, line[LINE_DATE] + 15,
 80126c2:	330f      	adds	r3, #15
 80126c4:	b29c      	uxth	r4, r3
 80126c6:	4b71      	ldr	r3, [pc, #452]	; (801288c <settingsDrawPointer+0x2d4>)
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	2500      	movs	r5, #0
 80126d0:	9502      	str	r5, [sp, #8]
 80126d2:	2502      	movs	r5, #2
 80126d4:	9501      	str	r5, [sp, #4]
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	0023      	movs	r3, r4
 80126da:	f7f6 fb4b 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // day
		break;
 80126de:	e0c9      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_MONTHS:
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 80126e0:	4b68      	ldr	r3, [pc, #416]	; (8012884 <settingsDrawPointer+0x2cc>)
 80126e2:	78db      	ldrb	r3, [r3, #3]
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	3303      	adds	r3, #3
 80126e8:	b298      	uxth	r0, r3
 80126ea:	4b67      	ldr	r3, [pc, #412]	; (8012888 <settingsDrawPointer+0x2d0>)
 80126ec:	7d1b      	ldrb	r3, [r3, #20]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	330f      	adds	r3, #15
 80126f2:	b299      	uxth	r1, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 80126f4:	4b63      	ldr	r3, [pc, #396]	; (8012884 <settingsDrawPointer+0x2cc>)
 80126f6:	78db      	ldrb	r3, [r3, #3]
 80126f8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 80126fa:	3314      	adds	r3, #20
 80126fc:	b29a      	uxth	r2, r3
				column[COLUMN_MIN] + 20, line[LINE_DATE] + 15, colorSecond,
 80126fe:	4b62      	ldr	r3, [pc, #392]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012700:	7d1b      	ldrb	r3, [r3, #20]
 8012702:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_MIN] + 3, line[LINE_DATE] + 15,
 8012704:	330f      	adds	r3, #15
 8012706:	b29c      	uxth	r4, r3
 8012708:	4b60      	ldr	r3, [pc, #384]	; (801288c <settingsDrawPointer+0x2d4>)
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	b2db      	uxtb	r3, r3
 801270e:	b29b      	uxth	r3, r3
 8012710:	2500      	movs	r5, #0
 8012712:	9502      	str	r5, [sp, #8]
 8012714:	2502      	movs	r5, #2
 8012716:	9501      	str	r5, [sp, #4]
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	0023      	movs	r3, r4
 801271c:	f7f6 fb2a 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // month
		break;
 8012720:	e0a8      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_YEARS:
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 8012722:	4b58      	ldr	r3, [pc, #352]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012724:	799b      	ldrb	r3, [r3, #6]
 8012726:	b29b      	uxth	r3, r3
 8012728:	3303      	adds	r3, #3
 801272a:	b298      	uxth	r0, r3
 801272c:	4b56      	ldr	r3, [pc, #344]	; (8012888 <settingsDrawPointer+0x2d0>)
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	b29b      	uxth	r3, r3
 8012732:	330f      	adds	r3, #15
 8012734:	b299      	uxth	r1, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 8012736:	4b53      	ldr	r3, [pc, #332]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012738:	799b      	ldrb	r3, [r3, #6]
 801273a:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 801273c:	3314      	adds	r3, #20
 801273e:	b29a      	uxth	r2, r3
				column[COLUMN_SEC] + 20, line[LINE_DATE] + 15, colorSecond,
 8012740:	4b51      	ldr	r3, [pc, #324]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012742:	7d1b      	ldrb	r3, [r3, #20]
 8012744:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_SEC] + 3, line[LINE_DATE] + 15,
 8012746:	330f      	adds	r3, #15
 8012748:	b29c      	uxth	r4, r3
 801274a:	4b50      	ldr	r3, [pc, #320]	; (801288c <settingsDrawPointer+0x2d4>)
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	b2db      	uxtb	r3, r3
 8012750:	b29b      	uxth	r3, r3
 8012752:	2500      	movs	r5, #0
 8012754:	9502      	str	r5, [sp, #8]
 8012756:	2502      	movs	r5, #2
 8012758:	9501      	str	r5, [sp, #4]
 801275a:	9300      	str	r3, [sp, #0]
 801275c:	0023      	movs	r3, r4
 801275e:	f7f6 fb09 	bl	8008d74 <Paint_DrawLine>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 8012762:	e087      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_LAYOUT:
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 8012764:	4b47      	ldr	r3, [pc, #284]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012766:	79db      	ldrb	r3, [r3, #7]
 8012768:	b29b      	uxth	r3, r3
 801276a:	3303      	adds	r3, #3
 801276c:	b298      	uxth	r0, r3
 801276e:	4b46      	ldr	r3, [pc, #280]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012770:	7e1b      	ldrb	r3, [r3, #24]
 8012772:	b29b      	uxth	r3, r3
 8012774:	330f      	adds	r3, #15
 8012776:	b299      	uxth	r1, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 8012778:	4b42      	ldr	r3, [pc, #264]	; (8012884 <settingsDrawPointer+0x2cc>)
 801277a:	79db      	ldrb	r3, [r3, #7]
 801277c:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 801277e:	330f      	adds	r3, #15
 8012780:	b29a      	uxth	r2, r3
				column[COLUMN_LAYOUT + 6] + 15, line[LINE_LAYOUT] + 15,
 8012782:	4b41      	ldr	r3, [pc, #260]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012784:	7e1b      	ldrb	r3, [r3, #24]
 8012786:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_LAYOUT + 6] + 3, line[LINE_LAYOUT] + 15,
 8012788:	330f      	adds	r3, #15
 801278a:	b29c      	uxth	r4, r3
 801278c:	4b3f      	ldr	r3, [pc, #252]	; (801288c <settingsDrawPointer+0x2d4>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	b2db      	uxtb	r3, r3
 8012792:	b29b      	uxth	r3, r3
 8012794:	2500      	movs	r5, #0
 8012796:	9502      	str	r5, [sp, #8]
 8012798:	2502      	movs	r5, #2
 801279a:	9501      	str	r5, [sp, #4]
 801279c:	9300      	str	r3, [sp, #0]
 801279e:	0023      	movs	r3, r4
 80127a0:	f7f6 fae8 	bl	8008d74 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 80127a4:	e066      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_COLOR:
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 80127a6:	4b37      	ldr	r3, [pc, #220]	; (8012884 <settingsDrawPointer+0x2cc>)
 80127a8:	79db      	ldrb	r3, [r3, #7]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	3303      	adds	r3, #3
 80127ae:	b298      	uxth	r0, r3
 80127b0:	4b35      	ldr	r3, [pc, #212]	; (8012888 <settingsDrawPointer+0x2d0>)
 80127b2:	7f1b      	ldrb	r3, [r3, #28]
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	330f      	adds	r3, #15
 80127b8:	b299      	uxth	r1, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 80127ba:	4b32      	ldr	r3, [pc, #200]	; (8012884 <settingsDrawPointer+0x2cc>)
 80127bc:	79db      	ldrb	r3, [r3, #7]
 80127be:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 80127c0:	330f      	adds	r3, #15
 80127c2:	b29a      	uxth	r2, r3
				column[COLUMN_COLOR + 5] + 15, line[LINE_COLOR] + 15,
 80127c4:	4b30      	ldr	r3, [pc, #192]	; (8012888 <settingsDrawPointer+0x2d0>)
 80127c6:	7f1b      	ldrb	r3, [r3, #28]
 80127c8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_COLOR + 5] + 3, line[LINE_COLOR] + 15,
 80127ca:	330f      	adds	r3, #15
 80127cc:	b29c      	uxth	r4, r3
 80127ce:	4b2f      	ldr	r3, [pc, #188]	; (801288c <settingsDrawPointer+0x2d4>)
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	2500      	movs	r5, #0
 80127d8:	9502      	str	r5, [sp, #8]
 80127da:	2502      	movs	r5, #2
 80127dc:	9501      	str	r5, [sp, #4]
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	0023      	movs	r3, r4
 80127e2:	f7f6 fac7 	bl	8008d74 <Paint_DrawLine>
				colorSecond, DOT_PIXEL_2X2, LINE_STYLE_SOLID); // year
		break;
 80127e6:	e045      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_PRESS_REF:
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 80127e8:	4b26      	ldr	r3, [pc, #152]	; (8012884 <settingsDrawPointer+0x2cc>)
 80127ea:	7a5b      	ldrb	r3, [r3, #9]
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	3303      	adds	r3, #3
 80127f0:	b298      	uxth	r0, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 80127f2:	4b25      	ldr	r3, [pc, #148]	; (8012888 <settingsDrawPointer+0x2d0>)
 80127f4:	2220      	movs	r2, #32
 80127f6:	5c9b      	ldrb	r3, [r3, r2]
 80127f8:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 80127fa:	330f      	adds	r3, #15
 80127fc:	b299      	uxth	r1, r3
				line[LINE_PRESS_REF] + 15, column[COLUMN_PRESS_REF + 5] + 30,
 80127fe:	4b21      	ldr	r3, [pc, #132]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012800:	7a5b      	ldrb	r3, [r3, #9]
 8012802:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 8012804:	331e      	adds	r3, #30
 8012806:	b29a      	uxth	r2, r3
				line[LINE_PRESS_REF] + 15, colorSecond, DOT_PIXEL_2X2,
 8012808:	4b1f      	ldr	r3, [pc, #124]	; (8012888 <settingsDrawPointer+0x2d0>)
 801280a:	2420      	movs	r4, #32
 801280c:	5d1b      	ldrb	r3, [r3, r4]
 801280e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_PRESS_REF + 5] + 3,
 8012810:	330f      	adds	r3, #15
 8012812:	b29c      	uxth	r4, r3
 8012814:	4b1d      	ldr	r3, [pc, #116]	; (801288c <settingsDrawPointer+0x2d4>)
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	b2db      	uxtb	r3, r3
 801281a:	b29b      	uxth	r3, r3
 801281c:	2500      	movs	r5, #0
 801281e:	9502      	str	r5, [sp, #8]
 8012820:	2502      	movs	r5, #2
 8012822:	9501      	str	r5, [sp, #4]
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	0023      	movs	r3, r4
 8012828:	f7f6 faa4 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 801282c:	e022      	b.n	8012874 <settingsDrawPointer+0x2bc>

	case SETTINGS_TEMP_CMP:
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 801282e:	4b15      	ldr	r3, [pc, #84]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012830:	7b1b      	ldrb	r3, [r3, #12]
 8012832:	b29b      	uxth	r3, r3
 8012834:	3303      	adds	r3, #3
 8012836:	b298      	uxth	r0, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 8012838:	4b13      	ldr	r3, [pc, #76]	; (8012888 <settingsDrawPointer+0x2d0>)
 801283a:	2224      	movs	r2, #36	; 0x24
 801283c:	5c9b      	ldrb	r3, [r3, r2]
 801283e:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 8012840:	330f      	adds	r3, #15
 8012842:	b299      	uxth	r1, r3
				line[LINE_TEMP_CMP] + 15, column[COLUMN_TEMP_CMP + 5] + 15,
 8012844:	4b0f      	ldr	r3, [pc, #60]	; (8012884 <settingsDrawPointer+0x2cc>)
 8012846:	7b1b      	ldrb	r3, [r3, #12]
 8012848:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 801284a:	330f      	adds	r3, #15
 801284c:	b29a      	uxth	r2, r3
				line[LINE_TEMP_CMP] + 15, colorSecond, DOT_PIXEL_2X2,
 801284e:	4b0e      	ldr	r3, [pc, #56]	; (8012888 <settingsDrawPointer+0x2d0>)
 8012850:	2424      	movs	r4, #36	; 0x24
 8012852:	5d1b      	ldrb	r3, [r3, r4]
 8012854:	b29b      	uxth	r3, r3
		Paint_DrawLine(column[COLUMN_TEMP_CMP + 5] + 3,
 8012856:	330f      	adds	r3, #15
 8012858:	b29c      	uxth	r4, r3
 801285a:	4b0c      	ldr	r3, [pc, #48]	; (801288c <settingsDrawPointer+0x2d4>)
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	b2db      	uxtb	r3, r3
 8012860:	b29b      	uxth	r3, r3
 8012862:	2500      	movs	r5, #0
 8012864:	9502      	str	r5, [sp, #8]
 8012866:	2502      	movs	r5, #2
 8012868:	9501      	str	r5, [sp, #4]
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	0023      	movs	r3, r4
 801286e:	f7f6 fa81 	bl	8008d74 <Paint_DrawLine>
				LINE_STYLE_SOLID); // year
		break;
 8012872:	46c0      	nop			; (mov r8, r8)

	}

}
 8012874:	46c0      	nop			; (mov r8, r8)
 8012876:	46bd      	mov	sp, r7
 8012878:	bdb0      	pop	{r4, r5, r7, pc}
 801287a:	46c0      	nop			; (mov r8, r8)
 801287c:	200003b9 	.word	0x200003b9
 8012880:	0801853c 	.word	0x0801853c
 8012884:	20000074 	.word	0x20000074
 8012888:	2000004c 	.word	0x2000004c
 801288c:	200006b3 	.word	0x200006b3

08012890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012896:	4b11      	ldr	r3, [pc, #68]	; (80128dc <HAL_MspInit+0x4c>)
 8012898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801289a:	4b10      	ldr	r3, [pc, #64]	; (80128dc <HAL_MspInit+0x4c>)
 801289c:	2101      	movs	r1, #1
 801289e:	430a      	orrs	r2, r1
 80128a0:	641a      	str	r2, [r3, #64]	; 0x40
 80128a2:	4b0e      	ldr	r3, [pc, #56]	; (80128dc <HAL_MspInit+0x4c>)
 80128a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a6:	2201      	movs	r2, #1
 80128a8:	4013      	ands	r3, r2
 80128aa:	607b      	str	r3, [r7, #4]
 80128ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80128ae:	4b0b      	ldr	r3, [pc, #44]	; (80128dc <HAL_MspInit+0x4c>)
 80128b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128b2:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <HAL_MspInit+0x4c>)
 80128b4:	2180      	movs	r1, #128	; 0x80
 80128b6:	0549      	lsls	r1, r1, #21
 80128b8:	430a      	orrs	r2, r1
 80128ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80128bc:	4b07      	ldr	r3, [pc, #28]	; (80128dc <HAL_MspInit+0x4c>)
 80128be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128c0:	2380      	movs	r3, #128	; 0x80
 80128c2:	055b      	lsls	r3, r3, #21
 80128c4:	4013      	ands	r3, r2
 80128c6:	603b      	str	r3, [r7, #0]
 80128c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80128ca:	23c0      	movs	r3, #192	; 0xc0
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	0018      	movs	r0, r3
 80128d0:	f7f0 fe56 	bl	8003580 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80128d4:	46c0      	nop			; (mov r8, r8)
 80128d6:	46bd      	mov	sp, r7
 80128d8:	b002      	add	sp, #8
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	40021000 	.word	0x40021000

080128e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b091      	sub	sp, #68	; 0x44
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128e8:	232c      	movs	r3, #44	; 0x2c
 80128ea:	18fb      	adds	r3, r7, r3
 80128ec:	0018      	movs	r0, r3
 80128ee:	2314      	movs	r3, #20
 80128f0:	001a      	movs	r2, r3
 80128f2:	2100      	movs	r1, #0
 80128f4:	f000 fb84 	bl	8013000 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80128f8:	2410      	movs	r4, #16
 80128fa:	193b      	adds	r3, r7, r4
 80128fc:	0018      	movs	r0, r3
 80128fe:	231c      	movs	r3, #28
 8012900:	001a      	movs	r2, r3
 8012902:	2100      	movs	r1, #0
 8012904:	f000 fb7c 	bl	8013000 <memset>
  if(hadc->Instance==ADC1)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	4a36      	ldr	r2, [pc, #216]	; (80129e8 <HAL_ADC_MspInit+0x108>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d165      	bne.n	80129de <HAL_ADC_MspInit+0xfe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8012912:	193b      	adds	r3, r7, r4
 8012914:	2280      	movs	r2, #128	; 0x80
 8012916:	01d2      	lsls	r2, r2, #7
 8012918:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 801291a:	193b      	adds	r3, r7, r4
 801291c:	2280      	movs	r2, #128	; 0x80
 801291e:	0612      	lsls	r2, r2, #24
 8012920:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012922:	193b      	adds	r3, r7, r4
 8012924:	0018      	movs	r0, r3
 8012926:	f7f3 fe8b 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 801292a:	1e03      	subs	r3, r0, #0
 801292c:	d001      	beq.n	8012932 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 801292e:	f7fd fed1 	bl	80106d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8012932:	4b2e      	ldr	r3, [pc, #184]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 8012934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012936:	4b2d      	ldr	r3, [pc, #180]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 8012938:	2180      	movs	r1, #128	; 0x80
 801293a:	0349      	lsls	r1, r1, #13
 801293c:	430a      	orrs	r2, r1
 801293e:	641a      	str	r2, [r3, #64]	; 0x40
 8012940:	4b2a      	ldr	r3, [pc, #168]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 8012942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012944:	2380      	movs	r3, #128	; 0x80
 8012946:	035b      	lsls	r3, r3, #13
 8012948:	4013      	ands	r3, r2
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801294e:	4b27      	ldr	r3, [pc, #156]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 8012950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012952:	4b26      	ldr	r3, [pc, #152]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 8012954:	2101      	movs	r1, #1
 8012956:	430a      	orrs	r2, r1
 8012958:	635a      	str	r2, [r3, #52]	; 0x34
 801295a:	4b24      	ldr	r3, [pc, #144]	; (80129ec <HAL_ADC_MspInit+0x10c>)
 801295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801295e:	2201      	movs	r2, #1
 8012960:	4013      	ands	r3, r2
 8012962:	60bb      	str	r3, [r7, #8]
 8012964:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PASSIVE_Pin|BATT_Pin|ACTIVE_Pin;
 8012966:	212c      	movs	r1, #44	; 0x2c
 8012968:	187b      	adds	r3, r7, r1
 801296a:	2223      	movs	r2, #35	; 0x23
 801296c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801296e:	187b      	adds	r3, r7, r1
 8012970:	2203      	movs	r2, #3
 8012972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012974:	187b      	adds	r3, r7, r1
 8012976:	2200      	movs	r2, #0
 8012978:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801297a:	187a      	adds	r2, r7, r1
 801297c:	23a0      	movs	r3, #160	; 0xa0
 801297e:	05db      	lsls	r3, r3, #23
 8012980:	0011      	movs	r1, r2
 8012982:	0018      	movs	r0, r3
 8012984:	f7f2 f982 	bl	8004c8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8012988:	4b19      	ldr	r3, [pc, #100]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 801298a:	4a1a      	ldr	r2, [pc, #104]	; (80129f4 <HAL_ADC_MspInit+0x114>)
 801298c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801298e:	4b18      	ldr	r3, [pc, #96]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 8012990:	2205      	movs	r2, #5
 8012992:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012994:	4b16      	ldr	r3, [pc, #88]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 8012996:	2200      	movs	r2, #0
 8012998:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 801299a:	4b15      	ldr	r3, [pc, #84]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 801299c:	2200      	movs	r2, #0
 801299e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80129a0:	4b13      	ldr	r3, [pc, #76]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129a2:	2280      	movs	r2, #128	; 0x80
 80129a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80129a6:	4b12      	ldr	r3, [pc, #72]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129a8:	2280      	movs	r2, #128	; 0x80
 80129aa:	0052      	lsls	r2, r2, #1
 80129ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80129ae:	4b10      	ldr	r3, [pc, #64]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129b0:	2280      	movs	r2, #128	; 0x80
 80129b2:	00d2      	lsls	r2, r2, #3
 80129b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80129b6:	4b0e      	ldr	r3, [pc, #56]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129b8:	2220      	movs	r2, #32
 80129ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80129bc:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129be:	2200      	movs	r2, #0
 80129c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80129c2:	4b0b      	ldr	r3, [pc, #44]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129c4:	0018      	movs	r0, r3
 80129c6:	f7f1 fd6f 	bl	80044a8 <HAL_DMA_Init>
 80129ca:	1e03      	subs	r3, r0, #0
 80129cc:	d001      	beq.n	80129d2 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80129ce:	f7fd fe81 	bl	80106d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4a06      	ldr	r2, [pc, #24]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129d6:	651a      	str	r2, [r3, #80]	; 0x50
 80129d8:	4b05      	ldr	r3, [pc, #20]	; (80129f0 <HAL_ADC_MspInit+0x110>)
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80129de:	46c0      	nop			; (mov r8, r8)
 80129e0:	46bd      	mov	sp, r7
 80129e2:	b011      	add	sp, #68	; 0x44
 80129e4:	bd90      	pop	{r4, r7, pc}
 80129e6:	46c0      	nop			; (mov r8, r8)
 80129e8:	40012400 	.word	0x40012400
 80129ec:	40021000 	.word	0x40021000
 80129f0:	20000714 	.word	0x20000714
 80129f4:	40020008 	.word	0x40020008

080129f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80129f8:	b590      	push	{r4, r7, lr}
 80129fa:	b091      	sub	sp, #68	; 0x44
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a00:	232c      	movs	r3, #44	; 0x2c
 8012a02:	18fb      	adds	r3, r7, r3
 8012a04:	0018      	movs	r0, r3
 8012a06:	2314      	movs	r3, #20
 8012a08:	001a      	movs	r2, r3
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	f000 faf8 	bl	8013000 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012a10:	2410      	movs	r4, #16
 8012a12:	193b      	adds	r3, r7, r4
 8012a14:	0018      	movs	r0, r3
 8012a16:	231c      	movs	r3, #28
 8012a18:	001a      	movs	r2, r3
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	f000 faf0 	bl	8013000 <memset>
  if(hi2c->Instance==I2C1)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a23      	ldr	r2, [pc, #140]	; (8012ab4 <HAL_I2C_MspInit+0xbc>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d13f      	bne.n	8012aaa <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012a2a:	193b      	adds	r3, r7, r4
 8012a2c:	2220      	movs	r2, #32
 8012a2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8012a30:	193b      	adds	r3, r7, r4
 8012a32:	2280      	movs	r2, #128	; 0x80
 8012a34:	0192      	lsls	r2, r2, #6
 8012a36:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012a38:	193b      	adds	r3, r7, r4
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f7f3 fe00 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8012a40:	1e03      	subs	r3, r0, #0
 8012a42:	d001      	beq.n	8012a48 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8012a44:	f7fd fe46 	bl	80106d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a48:	4b1b      	ldr	r3, [pc, #108]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a4c:	4b1a      	ldr	r3, [pc, #104]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a4e:	2102      	movs	r1, #2
 8012a50:	430a      	orrs	r2, r1
 8012a52:	635a      	str	r2, [r3, #52]	; 0x34
 8012a54:	4b18      	ldr	r3, [pc, #96]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a58:	2202      	movs	r2, #2
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	60fb      	str	r3, [r7, #12]
 8012a5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8012a60:	212c      	movs	r1, #44	; 0x2c
 8012a62:	187b      	adds	r3, r7, r1
 8012a64:	22c0      	movs	r2, #192	; 0xc0
 8012a66:	0052      	lsls	r2, r2, #1
 8012a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012a6a:	187b      	adds	r3, r7, r1
 8012a6c:	2212      	movs	r2, #18
 8012a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012a70:	187b      	adds	r3, r7, r1
 8012a72:	2201      	movs	r2, #1
 8012a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a76:	187b      	adds	r3, r7, r1
 8012a78:	2200      	movs	r2, #0
 8012a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8012a7c:	187b      	adds	r3, r7, r1
 8012a7e:	2206      	movs	r2, #6
 8012a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a82:	187b      	adds	r3, r7, r1
 8012a84:	4a0d      	ldr	r2, [pc, #52]	; (8012abc <HAL_I2C_MspInit+0xc4>)
 8012a86:	0019      	movs	r1, r3
 8012a88:	0010      	movs	r0, r2
 8012a8a:	f7f2 f8ff 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012a8e:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a92:	4b09      	ldr	r3, [pc, #36]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a94:	2180      	movs	r1, #128	; 0x80
 8012a96:	0389      	lsls	r1, r1, #14
 8012a98:	430a      	orrs	r2, r1
 8012a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8012a9c:	4b06      	ldr	r3, [pc, #24]	; (8012ab8 <HAL_I2C_MspInit+0xc0>)
 8012a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012aa0:	2380      	movs	r3, #128	; 0x80
 8012aa2:	039b      	lsls	r3, r3, #14
 8012aa4:	4013      	ands	r3, r2
 8012aa6:	60bb      	str	r3, [r7, #8]
 8012aa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8012aaa:	46c0      	nop			; (mov r8, r8)
 8012aac:	46bd      	mov	sp, r7
 8012aae:	b011      	add	sp, #68	; 0x44
 8012ab0:	bd90      	pop	{r4, r7, pc}
 8012ab2:	46c0      	nop			; (mov r8, r8)
 8012ab4:	40005400 	.word	0x40005400
 8012ab8:	40021000 	.word	0x40021000
 8012abc:	50000400 	.word	0x50000400

08012ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8012ac0:	b590      	push	{r4, r7, lr}
 8012ac2:	b08b      	sub	sp, #44	; 0x2c
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012ac8:	240c      	movs	r4, #12
 8012aca:	193b      	adds	r3, r7, r4
 8012acc:	0018      	movs	r0, r3
 8012ace:	231c      	movs	r3, #28
 8012ad0:	001a      	movs	r2, r3
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	f000 fa94 	bl	8013000 <memset>
  if(hrtc->Instance==RTC)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a19      	ldr	r2, [pc, #100]	; (8012b44 <HAL_RTC_MspInit+0x84>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d12c      	bne.n	8012b3c <HAL_RTC_MspInit+0x7c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012ae2:	193b      	adds	r3, r7, r4
 8012ae4:	2280      	movs	r2, #128	; 0x80
 8012ae6:	0292      	lsls	r2, r2, #10
 8012ae8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012aea:	193b      	adds	r3, r7, r4
 8012aec:	2280      	movs	r2, #128	; 0x80
 8012aee:	0052      	lsls	r2, r2, #1
 8012af0:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012af2:	193b      	adds	r3, r7, r4
 8012af4:	0018      	movs	r0, r3
 8012af6:	f7f3 fda3 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8012afa:	1e03      	subs	r3, r0, #0
 8012afc:	d001      	beq.n	8012b02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8012afe:	f7fd fde9 	bl	80106d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012b02:	4b11      	ldr	r3, [pc, #68]	; (8012b48 <HAL_RTC_MspInit+0x88>)
 8012b04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b06:	4b10      	ldr	r3, [pc, #64]	; (8012b48 <HAL_RTC_MspInit+0x88>)
 8012b08:	2180      	movs	r1, #128	; 0x80
 8012b0a:	0209      	lsls	r1, r1, #8
 8012b0c:	430a      	orrs	r2, r1
 8012b0e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012b10:	4b0d      	ldr	r3, [pc, #52]	; (8012b48 <HAL_RTC_MspInit+0x88>)
 8012b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b14:	4b0c      	ldr	r3, [pc, #48]	; (8012b48 <HAL_RTC_MspInit+0x88>)
 8012b16:	2180      	movs	r1, #128	; 0x80
 8012b18:	00c9      	lsls	r1, r1, #3
 8012b1a:	430a      	orrs	r2, r1
 8012b1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b1e:	4b0a      	ldr	r3, [pc, #40]	; (8012b48 <HAL_RTC_MspInit+0x88>)
 8012b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b22:	2380      	movs	r3, #128	; 0x80
 8012b24:	00db      	lsls	r3, r3, #3
 8012b26:	4013      	ands	r3, r2
 8012b28:	60bb      	str	r3, [r7, #8]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 1, 0);
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	2101      	movs	r1, #1
 8012b30:	2002      	movs	r0, #2
 8012b32:	f7f1 fc87 	bl	8004444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8012b36:	2002      	movs	r0, #2
 8012b38:	f7f1 fc99 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012b3c:	46c0      	nop			; (mov r8, r8)
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	b00b      	add	sp, #44	; 0x2c
 8012b42:	bd90      	pop	{r4, r7, pc}
 8012b44:	40002800 	.word	0x40002800
 8012b48:	40021000 	.word	0x40021000

08012b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012b4c:	b590      	push	{r4, r7, lr}
 8012b4e:	b08b      	sub	sp, #44	; 0x2c
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b54:	2414      	movs	r4, #20
 8012b56:	193b      	adds	r3, r7, r4
 8012b58:	0018      	movs	r0, r3
 8012b5a:	2314      	movs	r3, #20
 8012b5c:	001a      	movs	r2, r3
 8012b5e:	2100      	movs	r1, #0
 8012b60:	f000 fa4e 	bl	8013000 <memset>
  if(hspi->Instance==SPI1)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	4a2c      	ldr	r2, [pc, #176]	; (8012c1c <HAL_SPI_MspInit+0xd0>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d151      	bne.n	8012c12 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012b6e:	4b2c      	ldr	r3, [pc, #176]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012b72:	4b2b      	ldr	r3, [pc, #172]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b74:	2180      	movs	r1, #128	; 0x80
 8012b76:	0149      	lsls	r1, r1, #5
 8012b78:	430a      	orrs	r2, r1
 8012b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8012b7c:	4b28      	ldr	r3, [pc, #160]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012b80:	2380      	movs	r3, #128	; 0x80
 8012b82:	015b      	lsls	r3, r3, #5
 8012b84:	4013      	ands	r3, r2
 8012b86:	613b      	str	r3, [r7, #16]
 8012b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b8a:	4b25      	ldr	r3, [pc, #148]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b8e:	4b24      	ldr	r3, [pc, #144]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b90:	2101      	movs	r1, #1
 8012b92:	430a      	orrs	r2, r1
 8012b94:	635a      	str	r2, [r3, #52]	; 0x34
 8012b96:	4b22      	ldr	r3, [pc, #136]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	4013      	ands	r3, r2
 8012b9e:	60fb      	str	r3, [r7, #12]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012ba2:	4b1f      	ldr	r3, [pc, #124]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ba6:	4b1e      	ldr	r3, [pc, #120]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012ba8:	2102      	movs	r1, #2
 8012baa:	430a      	orrs	r2, r1
 8012bac:	635a      	str	r2, [r3, #52]	; 0x34
 8012bae:	4b1c      	ldr	r3, [pc, #112]	; (8012c20 <HAL_SPI_MspInit+0xd4>)
 8012bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bb2:	2202      	movs	r2, #2
 8012bb4:	4013      	ands	r3, r2
 8012bb6:	60bb      	str	r3, [r7, #8]
 8012bb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8012bba:	193b      	adds	r3, r7, r4
 8012bbc:	2280      	movs	r2, #128	; 0x80
 8012bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bc0:	193b      	adds	r3, r7, r4
 8012bc2:	2202      	movs	r2, #2
 8012bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bc6:	193b      	adds	r3, r7, r4
 8012bc8:	2200      	movs	r2, #0
 8012bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012bcc:	193b      	adds	r3, r7, r4
 8012bce:	2202      	movs	r2, #2
 8012bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8012bd2:	193b      	adds	r3, r7, r4
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bd8:	193a      	adds	r2, r7, r4
 8012bda:	23a0      	movs	r3, #160	; 0xa0
 8012bdc:	05db      	lsls	r3, r3, #23
 8012bde:	0011      	movs	r1, r2
 8012be0:	0018      	movs	r0, r3
 8012be2:	f7f2 f853 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012be6:	0021      	movs	r1, r4
 8012be8:	187b      	adds	r3, r7, r1
 8012bea:	2208      	movs	r2, #8
 8012bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bee:	187b      	adds	r3, r7, r1
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bf4:	187b      	adds	r3, r7, r1
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012bfa:	187b      	adds	r3, r7, r1
 8012bfc:	2202      	movs	r2, #2
 8012bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8012c00:	187b      	adds	r3, r7, r1
 8012c02:	2200      	movs	r2, #0
 8012c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012c06:	187b      	adds	r3, r7, r1
 8012c08:	4a06      	ldr	r2, [pc, #24]	; (8012c24 <HAL_SPI_MspInit+0xd8>)
 8012c0a:	0019      	movs	r1, r3
 8012c0c:	0010      	movs	r0, r2
 8012c0e:	f7f2 f83d 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8012c12:	46c0      	nop			; (mov r8, r8)
 8012c14:	46bd      	mov	sp, r7
 8012c16:	b00b      	add	sp, #44	; 0x2c
 8012c18:	bd90      	pop	{r4, r7, pc}
 8012c1a:	46c0      	nop			; (mov r8, r8)
 8012c1c:	40013000 	.word	0x40013000
 8012c20:	40021000 	.word	0x40021000
 8012c24:	50000400 	.word	0x50000400

08012c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a0d      	ldr	r2, [pc, #52]	; (8012c6c <HAL_TIM_Base_MspInit+0x44>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d113      	bne.n	8012c62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012c3a:	4b0d      	ldr	r3, [pc, #52]	; (8012c70 <HAL_TIM_Base_MspInit+0x48>)
 8012c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c3e:	4b0c      	ldr	r3, [pc, #48]	; (8012c70 <HAL_TIM_Base_MspInit+0x48>)
 8012c40:	2102      	movs	r1, #2
 8012c42:	430a      	orrs	r2, r1
 8012c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8012c46:	4b0a      	ldr	r3, [pc, #40]	; (8012c70 <HAL_TIM_Base_MspInit+0x48>)
 8012c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c4a:	2202      	movs	r2, #2
 8012c4c:	4013      	ands	r3, r2
 8012c4e:	60fb      	str	r3, [r7, #12]
 8012c50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8012c52:	2200      	movs	r2, #0
 8012c54:	2100      	movs	r1, #0
 8012c56:	2010      	movs	r0, #16
 8012c58:	f7f1 fbf4 	bl	8004444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012c5c:	2010      	movs	r0, #16
 8012c5e:	f7f1 fc06 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012c62:	46c0      	nop			; (mov r8, r8)
 8012c64:	46bd      	mov	sp, r7
 8012c66:	b004      	add	sp, #16
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	46c0      	nop			; (mov r8, r8)
 8012c6c:	40000400 	.word	0x40000400
 8012c70:	40021000 	.word	0x40021000

08012c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012c78:	e7fe      	b.n	8012c78 <NMI_Handler+0x4>

08012c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012c7e:	e7fe      	b.n	8012c7e <HardFault_Handler+0x4>

08012c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8012c84:	46c0      	nop			; (mov r8, r8)
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012c8e:	46c0      	nop			; (mov r8, r8)
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012c98:	f7f0 fc16 	bl	80034c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012c9c:	46c0      	nop			; (mov r8, r8)
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
	...

08012ca4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012ca8:	4b03      	ldr	r3, [pc, #12]	; (8012cb8 <RTC_TAMP_IRQHandler+0x14>)
 8012caa:	0018      	movs	r0, r3
 8012cac:	f7f4 fa04 	bl	80070b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8012cb0:	46c0      	nop			; (mov r8, r8)
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	46c0      	nop			; (mov r8, r8)
 8012cb8:	20000770 	.word	0x20000770

08012cbc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8012cc0:	2004      	movs	r0, #4
 8012cc2:	f7f2 f981 	bl	8004fc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SET_Pin);
 8012cc6:	2008      	movs	r0, #8
 8012cc8:	f7f2 f97e 	bl	8004fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8012ccc:	46c0      	nop			; (mov r8, r8)
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8012cd6:	2010      	movs	r0, #16
 8012cd8:	f7f2 f976 	bl	8004fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8012cdc:	46c0      	nop			; (mov r8, r8)
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
	...

08012ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012ce8:	4b03      	ldr	r3, [pc, #12]	; (8012cf8 <DMA1_Channel1_IRQHandler+0x14>)
 8012cea:	0018      	movs	r0, r3
 8012cec:	f7f1 fcec 	bl	80046c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8012cf0:	46c0      	nop			; (mov r8, r8)
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	46c0      	nop			; (mov r8, r8)
 8012cf8:	20000714 	.word	0x20000714

08012cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8012d00:	4b03      	ldr	r3, [pc, #12]	; (8012d10 <TIM3_IRQHandler+0x14>)
 8012d02:	0018      	movs	r0, r3
 8012d04:	f7f4 fe32 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012d08:	46c0      	nop			; (mov r8, r8)
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	46c0      	nop			; (mov r8, r8)
 8012d10:	200003c0 	.word	0x200003c0

08012d14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012d20:	2300      	movs	r3, #0
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	e00a      	b.n	8012d3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012d26:	e000      	b.n	8012d2a <_read+0x16>
 8012d28:	bf00      	nop
 8012d2a:	0001      	movs	r1, r0
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	1c5a      	adds	r2, r3, #1
 8012d30:	60ba      	str	r2, [r7, #8]
 8012d32:	b2ca      	uxtb	r2, r1
 8012d34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	617b      	str	r3, [r7, #20]
 8012d3c:	697a      	ldr	r2, [r7, #20]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	dbf0      	blt.n	8012d26 <_read+0x12>
	}

return len;
 8012d44:	687b      	ldr	r3, [r7, #4]
}
 8012d46:	0018      	movs	r0, r3
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	b006      	add	sp, #24
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b086      	sub	sp, #24
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	60f8      	str	r0, [r7, #12]
 8012d56:	60b9      	str	r1, [r7, #8]
 8012d58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	617b      	str	r3, [r7, #20]
 8012d5e:	e009      	b.n	8012d74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	1c5a      	adds	r2, r3, #1
 8012d64:	60ba      	str	r2, [r7, #8]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	0018      	movs	r0, r3
 8012d6a:	e000      	b.n	8012d6e <_write+0x20>
 8012d6c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	3301      	adds	r3, #1
 8012d72:	617b      	str	r3, [r7, #20]
 8012d74:	697a      	ldr	r2, [r7, #20]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	dbf1      	blt.n	8012d60 <_write+0x12>
	}
	return len;
 8012d7c:	687b      	ldr	r3, [r7, #4]
}
 8012d7e:	0018      	movs	r0, r3
 8012d80:	46bd      	mov	sp, r7
 8012d82:	b006      	add	sp, #24
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <_close>:

int _close(int file)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b082      	sub	sp, #8
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
	return -1;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	425b      	negs	r3, r3
}
 8012d92:	0018      	movs	r0, r3
 8012d94:	46bd      	mov	sp, r7
 8012d96:	b002      	add	sp, #8
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b082      	sub	sp, #8
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
 8012da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	2280      	movs	r2, #128	; 0x80
 8012da8:	0192      	lsls	r2, r2, #6
 8012daa:	605a      	str	r2, [r3, #4]
	return 0;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	0018      	movs	r0, r3
 8012db0:	46bd      	mov	sp, r7
 8012db2:	b002      	add	sp, #8
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <_isatty>:

int _isatty(int file)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b082      	sub	sp, #8
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
	return 1;
 8012dbe:	2301      	movs	r3, #1
}
 8012dc0:	0018      	movs	r0, r3
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	b002      	add	sp, #8
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8012dd4:	2300      	movs	r3, #0
}
 8012dd6:	0018      	movs	r0, r3
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	b004      	add	sp, #16
 8012ddc:	bd80      	pop	{r7, pc}
	...

08012de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012de8:	4a14      	ldr	r2, [pc, #80]	; (8012e3c <_sbrk+0x5c>)
 8012dea:	4b15      	ldr	r3, [pc, #84]	; (8012e40 <_sbrk+0x60>)
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012df4:	4b13      	ldr	r3, [pc, #76]	; (8012e44 <_sbrk+0x64>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d102      	bne.n	8012e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012dfc:	4b11      	ldr	r3, [pc, #68]	; (8012e44 <_sbrk+0x64>)
 8012dfe:	4a12      	ldr	r2, [pc, #72]	; (8012e48 <_sbrk+0x68>)
 8012e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012e02:	4b10      	ldr	r3, [pc, #64]	; (8012e44 <_sbrk+0x64>)
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	18d3      	adds	r3, r2, r3
 8012e0a:	693a      	ldr	r2, [r7, #16]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d207      	bcs.n	8012e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012e10:	f000 f8c2 	bl	8012f98 <__errno>
 8012e14:	0003      	movs	r3, r0
 8012e16:	220c      	movs	r2, #12
 8012e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	425b      	negs	r3, r3
 8012e1e:	e009      	b.n	8012e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012e20:	4b08      	ldr	r3, [pc, #32]	; (8012e44 <_sbrk+0x64>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012e26:	4b07      	ldr	r3, [pc, #28]	; (8012e44 <_sbrk+0x64>)
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	18d2      	adds	r2, r2, r3
 8012e2e:	4b05      	ldr	r3, [pc, #20]	; (8012e44 <_sbrk+0x64>)
 8012e30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012e32:	68fb      	ldr	r3, [r7, #12]
}
 8012e34:	0018      	movs	r0, r3
 8012e36:	46bd      	mov	sp, r7
 8012e38:	b006      	add	sp, #24
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	20009000 	.word	0x20009000
 8012e40:	00000400 	.word	0x00000400
 8012e44:	200001c8 	.word	0x200001c8
 8012e48:	20000810 	.word	0x20000810

08012e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012e50:	4b03      	ldr	r3, [pc, #12]	; (8012e60 <SystemInit+0x14>)
 8012e52:	2280      	movs	r2, #128	; 0x80
 8012e54:	0512      	lsls	r2, r2, #20
 8012e56:	609a      	str	r2, [r3, #8]
#endif
}
 8012e58:	46c0      	nop			; (mov r8, r8)
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	46c0      	nop			; (mov r8, r8)
 8012e60:	e000ed00 	.word	0xe000ed00

08012e64 <timersInit>:
#include "timers.h"

void timersInit(void) {
 8012e64:	b580      	push	{r7, lr}
 8012e66:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8012e68:	4b09      	ldr	r3, [pc, #36]	; (8012e90 <timersInit+0x2c>)
 8012e6a:	0018      	movs	r0, r3
 8012e6c:	f7f4 fd28 	bl	80078c0 <HAL_TIM_Base_Start_IT>
	counterForce = 0;
 8012e70:	4b08      	ldr	r3, [pc, #32]	; (8012e94 <timersInit+0x30>)
 8012e72:	2200      	movs	r2, #0
 8012e74:	701a      	strb	r2, [r3, #0]
	counterMultiplePress = 0;
 8012e76:	4b08      	ldr	r3, [pc, #32]	; (8012e98 <timersInit+0x34>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	701a      	strb	r2, [r3, #0]
	flagLocked = UNLOCKED;
 8012e7c:	4b07      	ldr	r3, [pc, #28]	; (8012e9c <timersInit+0x38>)
 8012e7e:	2200      	movs	r2, #0
 8012e80:	701a      	strb	r2, [r3, #0]
	counterSettings = 0;
 8012e82:	4b07      	ldr	r3, [pc, #28]	; (8012ea0 <timersInit+0x3c>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	701a      	strb	r2, [r3, #0]
}
 8012e88:	46c0      	nop			; (mov r8, r8)
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	46c0      	nop			; (mov r8, r8)
 8012e90:	200003c0 	.word	0x200003c0
 8012e94:	200006da 	.word	0x200006da
 8012e98:	200006e0 	.word	0x200006e0
 8012e9c:	200004c2 	.word	0x200004c2
 8012ea0:	20000694 	.word	0x20000694

08012ea4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4a1c      	ldr	r2, [pc, #112]	; (8012f24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d131      	bne.n	8012f1a <HAL_TIM_PeriodElapsedCallback+0x76>
		if (counterForce < ON_TIME) {
 8012eb6:	4b1c      	ldr	r3, [pc, #112]	; (8012f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b13      	cmp	r3, #19
 8012ebe:	d806      	bhi.n	8012ece <HAL_TIM_PeriodElapsedCallback+0x2a>
			counterForce++;
 8012ec0:	4b19      	ldr	r3, [pc, #100]	; (8012f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	4b17      	ldr	r3, [pc, #92]	; (8012f28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8012ecc:	701a      	strb	r2, [r3, #0]
		}

		counterMultiplePress = 0;
 8012ece:	4b17      	ldr	r3, [pc, #92]	; (8012f2c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	701a      	strb	r2, [r3, #0]

		if (flagSettings == FLAG_SETTINGS_ON) {
 8012ed4:	4b16      	ldr	r3, [pc, #88]	; (8012f30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d11d      	bne.n	8012f1a <HAL_TIM_PeriodElapsedCallback+0x76>
			counterSettings--;
 8012ede:	4b15      	ldr	r3, [pc, #84]	; (8012f34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	4b12      	ldr	r3, [pc, #72]	; (8012f34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8012eea:	701a      	strb	r2, [r3, #0]
			if (counterSettings <= 0) {
 8012eec:	4b11      	ldr	r3, [pc, #68]	; (8012f34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d111      	bne.n	8012f1a <HAL_TIM_PeriodElapsedCallback+0x76>
				flagSettings = FLAG_SETTINGS_OFF;
 8012ef6:	4b0e      	ldr	r3, [pc, #56]	; (8012f30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	701a      	strb	r2, [r3, #0]
				flagDontSleep = 1;
 8012efc:	4b0e      	ldr	r3, [pc, #56]	; (8012f38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8012efe:	2201      	movs	r2, #1
 8012f00:	701a      	strb	r2, [r3, #0]
				interfaceSelectColorScheme(colorScheme);
 8012f02:	4b0e      	ldr	r3, [pc, #56]	; (8012f3c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	0018      	movs	r0, r3
 8012f0a:	f7f9 ff65 	bl	800cdd8 <interfaceSelectColorScheme>
				interfaceSelectLayout(layout);
 8012f0e:	4b0c      	ldr	r3, [pc, #48]	; (8012f40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	0018      	movs	r0, r3
 8012f16:	f7f9 fab5 	bl	800c484 <interfaceSelectLayout>
			}
		}

	}
}
 8012f1a:	46c0      	nop			; (mov r8, r8)
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	b002      	add	sp, #8
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	46c0      	nop			; (mov r8, r8)
 8012f24:	40000400 	.word	0x40000400
 8012f28:	200006da 	.word	0x200006da
 8012f2c:	200006e0 	.word	0x200006e0
 8012f30:	2000058e 	.word	0x2000058e
 8012f34:	20000694 	.word	0x20000694
 8012f38:	200006d9 	.word	0x200006d9
 8012f3c:	200006d8 	.word	0x200006d8
 8012f40:	200006f5 	.word	0x200006f5

08012f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8012f44:	480d      	ldr	r0, [pc, #52]	; (8012f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8012f46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8012f48:	f7ff ff80 	bl	8012e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012f4c:	480c      	ldr	r0, [pc, #48]	; (8012f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8012f4e:	490d      	ldr	r1, [pc, #52]	; (8012f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8012f50:	4a0d      	ldr	r2, [pc, #52]	; (8012f88 <LoopForever+0xe>)
  movs r3, #0
 8012f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012f54:	e002      	b.n	8012f5c <LoopCopyDataInit>

08012f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012f5a:	3304      	adds	r3, #4

08012f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012f60:	d3f9      	bcc.n	8012f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012f62:	4a0a      	ldr	r2, [pc, #40]	; (8012f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8012f64:	4c0a      	ldr	r4, [pc, #40]	; (8012f90 <LoopForever+0x16>)
  movs r3, #0
 8012f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012f68:	e001      	b.n	8012f6e <LoopFillZerobss>

08012f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012f6c:	3204      	adds	r2, #4

08012f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012f70:	d3fb      	bcc.n	8012f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8012f72:	f000 f817 	bl	8012fa4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8012f76:	f7fc fe37 	bl	800fbe8 <main>

08012f7a <LoopForever>:

LoopForever:
  b LoopForever
 8012f7a:	e7fe      	b.n	8012f7a <LoopForever>
  ldr   r0, =_estack
 8012f7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8012f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012f84:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8012f88:	08018898 	.word	0x08018898
  ldr r2, =_sbss
 8012f8c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8012f90:	20000810 	.word	0x20000810

08012f94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012f94:	e7fe      	b.n	8012f94 <ADC1_IRQHandler>
	...

08012f98 <__errno>:
 8012f98:	4b01      	ldr	r3, [pc, #4]	; (8012fa0 <__errno+0x8>)
 8012f9a:	6818      	ldr	r0, [r3, #0]
 8012f9c:	4770      	bx	lr
 8012f9e:	46c0      	nop			; (mov r8, r8)
 8012fa0:	2000008c 	.word	0x2000008c

08012fa4 <__libc_init_array>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	2600      	movs	r6, #0
 8012fa8:	4d0c      	ldr	r5, [pc, #48]	; (8012fdc <__libc_init_array+0x38>)
 8012faa:	4c0d      	ldr	r4, [pc, #52]	; (8012fe0 <__libc_init_array+0x3c>)
 8012fac:	1b64      	subs	r4, r4, r5
 8012fae:	10a4      	asrs	r4, r4, #2
 8012fb0:	42a6      	cmp	r6, r4
 8012fb2:	d109      	bne.n	8012fc8 <__libc_init_array+0x24>
 8012fb4:	2600      	movs	r6, #0
 8012fb6:	f002 fe8d 	bl	8015cd4 <_init>
 8012fba:	4d0a      	ldr	r5, [pc, #40]	; (8012fe4 <__libc_init_array+0x40>)
 8012fbc:	4c0a      	ldr	r4, [pc, #40]	; (8012fe8 <__libc_init_array+0x44>)
 8012fbe:	1b64      	subs	r4, r4, r5
 8012fc0:	10a4      	asrs	r4, r4, #2
 8012fc2:	42a6      	cmp	r6, r4
 8012fc4:	d105      	bne.n	8012fd2 <__libc_init_array+0x2e>
 8012fc6:	bd70      	pop	{r4, r5, r6, pc}
 8012fc8:	00b3      	lsls	r3, r6, #2
 8012fca:	58eb      	ldr	r3, [r5, r3]
 8012fcc:	4798      	blx	r3
 8012fce:	3601      	adds	r6, #1
 8012fd0:	e7ee      	b.n	8012fb0 <__libc_init_array+0xc>
 8012fd2:	00b3      	lsls	r3, r6, #2
 8012fd4:	58eb      	ldr	r3, [r5, r3]
 8012fd6:	4798      	blx	r3
 8012fd8:	3601      	adds	r6, #1
 8012fda:	e7f2      	b.n	8012fc2 <__libc_init_array+0x1e>
 8012fdc:	08018890 	.word	0x08018890
 8012fe0:	08018890 	.word	0x08018890
 8012fe4:	08018890 	.word	0x08018890
 8012fe8:	08018894 	.word	0x08018894

08012fec <malloc>:
 8012fec:	b510      	push	{r4, lr}
 8012fee:	4b03      	ldr	r3, [pc, #12]	; (8012ffc <malloc+0x10>)
 8012ff0:	0001      	movs	r1, r0
 8012ff2:	6818      	ldr	r0, [r3, #0]
 8012ff4:	f000 f856 	bl	80130a4 <_malloc_r>
 8012ff8:	bd10      	pop	{r4, pc}
 8012ffa:	46c0      	nop			; (mov r8, r8)
 8012ffc:	2000008c 	.word	0x2000008c

08013000 <memset>:
 8013000:	0003      	movs	r3, r0
 8013002:	1882      	adds	r2, r0, r2
 8013004:	4293      	cmp	r3, r2
 8013006:	d100      	bne.n	801300a <memset+0xa>
 8013008:	4770      	bx	lr
 801300a:	7019      	strb	r1, [r3, #0]
 801300c:	3301      	adds	r3, #1
 801300e:	e7f9      	b.n	8013004 <memset+0x4>

08013010 <_free_r>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	0005      	movs	r5, r0
 8013014:	2900      	cmp	r1, #0
 8013016:	d010      	beq.n	801303a <_free_r+0x2a>
 8013018:	1f0c      	subs	r4, r1, #4
 801301a:	6823      	ldr	r3, [r4, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	da00      	bge.n	8013022 <_free_r+0x12>
 8013020:	18e4      	adds	r4, r4, r3
 8013022:	0028      	movs	r0, r5
 8013024:	f000 fc70 	bl	8013908 <__malloc_lock>
 8013028:	4a1d      	ldr	r2, [pc, #116]	; (80130a0 <_free_r+0x90>)
 801302a:	6813      	ldr	r3, [r2, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d105      	bne.n	801303c <_free_r+0x2c>
 8013030:	6063      	str	r3, [r4, #4]
 8013032:	6014      	str	r4, [r2, #0]
 8013034:	0028      	movs	r0, r5
 8013036:	f000 fc6f 	bl	8013918 <__malloc_unlock>
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	42a3      	cmp	r3, r4
 801303e:	d908      	bls.n	8013052 <_free_r+0x42>
 8013040:	6821      	ldr	r1, [r4, #0]
 8013042:	1860      	adds	r0, r4, r1
 8013044:	4283      	cmp	r3, r0
 8013046:	d1f3      	bne.n	8013030 <_free_r+0x20>
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	1841      	adds	r1, r0, r1
 801304e:	6021      	str	r1, [r4, #0]
 8013050:	e7ee      	b.n	8013030 <_free_r+0x20>
 8013052:	001a      	movs	r2, r3
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d001      	beq.n	801305e <_free_r+0x4e>
 801305a:	42a3      	cmp	r3, r4
 801305c:	d9f9      	bls.n	8013052 <_free_r+0x42>
 801305e:	6811      	ldr	r1, [r2, #0]
 8013060:	1850      	adds	r0, r2, r1
 8013062:	42a0      	cmp	r0, r4
 8013064:	d10b      	bne.n	801307e <_free_r+0x6e>
 8013066:	6820      	ldr	r0, [r4, #0]
 8013068:	1809      	adds	r1, r1, r0
 801306a:	1850      	adds	r0, r2, r1
 801306c:	6011      	str	r1, [r2, #0]
 801306e:	4283      	cmp	r3, r0
 8013070:	d1e0      	bne.n	8013034 <_free_r+0x24>
 8013072:	6818      	ldr	r0, [r3, #0]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	1841      	adds	r1, r0, r1
 8013078:	6011      	str	r1, [r2, #0]
 801307a:	6053      	str	r3, [r2, #4]
 801307c:	e7da      	b.n	8013034 <_free_r+0x24>
 801307e:	42a0      	cmp	r0, r4
 8013080:	d902      	bls.n	8013088 <_free_r+0x78>
 8013082:	230c      	movs	r3, #12
 8013084:	602b      	str	r3, [r5, #0]
 8013086:	e7d5      	b.n	8013034 <_free_r+0x24>
 8013088:	6821      	ldr	r1, [r4, #0]
 801308a:	1860      	adds	r0, r4, r1
 801308c:	4283      	cmp	r3, r0
 801308e:	d103      	bne.n	8013098 <_free_r+0x88>
 8013090:	6818      	ldr	r0, [r3, #0]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	1841      	adds	r1, r0, r1
 8013096:	6021      	str	r1, [r4, #0]
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	6054      	str	r4, [r2, #4]
 801309c:	e7ca      	b.n	8013034 <_free_r+0x24>
 801309e:	46c0      	nop			; (mov r8, r8)
 80130a0:	200001cc 	.word	0x200001cc

080130a4 <_malloc_r>:
 80130a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130a6:	2303      	movs	r3, #3
 80130a8:	1ccd      	adds	r5, r1, #3
 80130aa:	439d      	bics	r5, r3
 80130ac:	3508      	adds	r5, #8
 80130ae:	0006      	movs	r6, r0
 80130b0:	2d0c      	cmp	r5, #12
 80130b2:	d21f      	bcs.n	80130f4 <_malloc_r+0x50>
 80130b4:	250c      	movs	r5, #12
 80130b6:	42a9      	cmp	r1, r5
 80130b8:	d81e      	bhi.n	80130f8 <_malloc_r+0x54>
 80130ba:	0030      	movs	r0, r6
 80130bc:	f000 fc24 	bl	8013908 <__malloc_lock>
 80130c0:	4925      	ldr	r1, [pc, #148]	; (8013158 <_malloc_r+0xb4>)
 80130c2:	680a      	ldr	r2, [r1, #0]
 80130c4:	0014      	movs	r4, r2
 80130c6:	2c00      	cmp	r4, #0
 80130c8:	d11a      	bne.n	8013100 <_malloc_r+0x5c>
 80130ca:	4f24      	ldr	r7, [pc, #144]	; (801315c <_malloc_r+0xb8>)
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d104      	bne.n	80130dc <_malloc_r+0x38>
 80130d2:	0021      	movs	r1, r4
 80130d4:	0030      	movs	r0, r6
 80130d6:	f000 f8d9 	bl	801328c <_sbrk_r>
 80130da:	6038      	str	r0, [r7, #0]
 80130dc:	0029      	movs	r1, r5
 80130de:	0030      	movs	r0, r6
 80130e0:	f000 f8d4 	bl	801328c <_sbrk_r>
 80130e4:	1c43      	adds	r3, r0, #1
 80130e6:	d12b      	bne.n	8013140 <_malloc_r+0x9c>
 80130e8:	230c      	movs	r3, #12
 80130ea:	0030      	movs	r0, r6
 80130ec:	6033      	str	r3, [r6, #0]
 80130ee:	f000 fc13 	bl	8013918 <__malloc_unlock>
 80130f2:	e003      	b.n	80130fc <_malloc_r+0x58>
 80130f4:	2d00      	cmp	r5, #0
 80130f6:	dade      	bge.n	80130b6 <_malloc_r+0x12>
 80130f8:	230c      	movs	r3, #12
 80130fa:	6033      	str	r3, [r6, #0]
 80130fc:	2000      	movs	r0, #0
 80130fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	1b5b      	subs	r3, r3, r5
 8013104:	d419      	bmi.n	801313a <_malloc_r+0x96>
 8013106:	2b0b      	cmp	r3, #11
 8013108:	d903      	bls.n	8013112 <_malloc_r+0x6e>
 801310a:	6023      	str	r3, [r4, #0]
 801310c:	18e4      	adds	r4, r4, r3
 801310e:	6025      	str	r5, [r4, #0]
 8013110:	e003      	b.n	801311a <_malloc_r+0x76>
 8013112:	6863      	ldr	r3, [r4, #4]
 8013114:	42a2      	cmp	r2, r4
 8013116:	d10e      	bne.n	8013136 <_malloc_r+0x92>
 8013118:	600b      	str	r3, [r1, #0]
 801311a:	0030      	movs	r0, r6
 801311c:	f000 fbfc 	bl	8013918 <__malloc_unlock>
 8013120:	0020      	movs	r0, r4
 8013122:	2207      	movs	r2, #7
 8013124:	300b      	adds	r0, #11
 8013126:	1d23      	adds	r3, r4, #4
 8013128:	4390      	bics	r0, r2
 801312a:	1ac2      	subs	r2, r0, r3
 801312c:	4298      	cmp	r0, r3
 801312e:	d0e6      	beq.n	80130fe <_malloc_r+0x5a>
 8013130:	1a1b      	subs	r3, r3, r0
 8013132:	50a3      	str	r3, [r4, r2]
 8013134:	e7e3      	b.n	80130fe <_malloc_r+0x5a>
 8013136:	6053      	str	r3, [r2, #4]
 8013138:	e7ef      	b.n	801311a <_malloc_r+0x76>
 801313a:	0022      	movs	r2, r4
 801313c:	6864      	ldr	r4, [r4, #4]
 801313e:	e7c2      	b.n	80130c6 <_malloc_r+0x22>
 8013140:	2303      	movs	r3, #3
 8013142:	1cc4      	adds	r4, r0, #3
 8013144:	439c      	bics	r4, r3
 8013146:	42a0      	cmp	r0, r4
 8013148:	d0e1      	beq.n	801310e <_malloc_r+0x6a>
 801314a:	1a21      	subs	r1, r4, r0
 801314c:	0030      	movs	r0, r6
 801314e:	f000 f89d 	bl	801328c <_sbrk_r>
 8013152:	1c43      	adds	r3, r0, #1
 8013154:	d1db      	bne.n	801310e <_malloc_r+0x6a>
 8013156:	e7c7      	b.n	80130e8 <_malloc_r+0x44>
 8013158:	200001cc 	.word	0x200001cc
 801315c:	200001d0 	.word	0x200001d0

08013160 <iprintf>:
 8013160:	b40f      	push	{r0, r1, r2, r3}
 8013162:	4b0b      	ldr	r3, [pc, #44]	; (8013190 <iprintf+0x30>)
 8013164:	b513      	push	{r0, r1, r4, lr}
 8013166:	681c      	ldr	r4, [r3, #0]
 8013168:	2c00      	cmp	r4, #0
 801316a:	d005      	beq.n	8013178 <iprintf+0x18>
 801316c:	69a3      	ldr	r3, [r4, #24]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d102      	bne.n	8013178 <iprintf+0x18>
 8013172:	0020      	movs	r0, r4
 8013174:	f000 fab8 	bl	80136e8 <__sinit>
 8013178:	ab05      	add	r3, sp, #20
 801317a:	0020      	movs	r0, r4
 801317c:	9a04      	ldr	r2, [sp, #16]
 801317e:	68a1      	ldr	r1, [r4, #8]
 8013180:	9301      	str	r3, [sp, #4]
 8013182:	f000 fd5b 	bl	8013c3c <_vfiprintf_r>
 8013186:	bc16      	pop	{r1, r2, r4}
 8013188:	bc08      	pop	{r3}
 801318a:	b004      	add	sp, #16
 801318c:	4718      	bx	r3
 801318e:	46c0      	nop			; (mov r8, r8)
 8013190:	2000008c 	.word	0x2000008c

08013194 <_puts_r>:
 8013194:	b570      	push	{r4, r5, r6, lr}
 8013196:	0005      	movs	r5, r0
 8013198:	000e      	movs	r6, r1
 801319a:	2800      	cmp	r0, #0
 801319c:	d004      	beq.n	80131a8 <_puts_r+0x14>
 801319e:	6983      	ldr	r3, [r0, #24]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d101      	bne.n	80131a8 <_puts_r+0x14>
 80131a4:	f000 faa0 	bl	80136e8 <__sinit>
 80131a8:	69ab      	ldr	r3, [r5, #24]
 80131aa:	68ac      	ldr	r4, [r5, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <_puts_r+0x22>
 80131b0:	0028      	movs	r0, r5
 80131b2:	f000 fa99 	bl	80136e8 <__sinit>
 80131b6:	4b2d      	ldr	r3, [pc, #180]	; (801326c <_puts_r+0xd8>)
 80131b8:	429c      	cmp	r4, r3
 80131ba:	d122      	bne.n	8013202 <_puts_r+0x6e>
 80131bc:	686c      	ldr	r4, [r5, #4]
 80131be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131c0:	07db      	lsls	r3, r3, #31
 80131c2:	d405      	bmi.n	80131d0 <_puts_r+0x3c>
 80131c4:	89a3      	ldrh	r3, [r4, #12]
 80131c6:	059b      	lsls	r3, r3, #22
 80131c8:	d402      	bmi.n	80131d0 <_puts_r+0x3c>
 80131ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131cc:	f000 fb2d 	bl	801382a <__retarget_lock_acquire_recursive>
 80131d0:	89a3      	ldrh	r3, [r4, #12]
 80131d2:	071b      	lsls	r3, r3, #28
 80131d4:	d502      	bpl.n	80131dc <_puts_r+0x48>
 80131d6:	6923      	ldr	r3, [r4, #16]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d129      	bne.n	8013230 <_puts_r+0x9c>
 80131dc:	0021      	movs	r1, r4
 80131de:	0028      	movs	r0, r5
 80131e0:	f000 f8dc 	bl	801339c <__swsetup_r>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d023      	beq.n	8013230 <_puts_r+0x9c>
 80131e8:	2501      	movs	r5, #1
 80131ea:	426d      	negs	r5, r5
 80131ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131ee:	07db      	lsls	r3, r3, #31
 80131f0:	d405      	bmi.n	80131fe <_puts_r+0x6a>
 80131f2:	89a3      	ldrh	r3, [r4, #12]
 80131f4:	059b      	lsls	r3, r3, #22
 80131f6:	d402      	bmi.n	80131fe <_puts_r+0x6a>
 80131f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131fa:	f000 fb17 	bl	801382c <__retarget_lock_release_recursive>
 80131fe:	0028      	movs	r0, r5
 8013200:	bd70      	pop	{r4, r5, r6, pc}
 8013202:	4b1b      	ldr	r3, [pc, #108]	; (8013270 <_puts_r+0xdc>)
 8013204:	429c      	cmp	r4, r3
 8013206:	d101      	bne.n	801320c <_puts_r+0x78>
 8013208:	68ac      	ldr	r4, [r5, #8]
 801320a:	e7d8      	b.n	80131be <_puts_r+0x2a>
 801320c:	4b19      	ldr	r3, [pc, #100]	; (8013274 <_puts_r+0xe0>)
 801320e:	429c      	cmp	r4, r3
 8013210:	d1d5      	bne.n	80131be <_puts_r+0x2a>
 8013212:	68ec      	ldr	r4, [r5, #12]
 8013214:	e7d3      	b.n	80131be <_puts_r+0x2a>
 8013216:	3601      	adds	r6, #1
 8013218:	60a3      	str	r3, [r4, #8]
 801321a:	2b00      	cmp	r3, #0
 801321c:	da04      	bge.n	8013228 <_puts_r+0x94>
 801321e:	69a2      	ldr	r2, [r4, #24]
 8013220:	429a      	cmp	r2, r3
 8013222:	dc16      	bgt.n	8013252 <_puts_r+0xbe>
 8013224:	290a      	cmp	r1, #10
 8013226:	d014      	beq.n	8013252 <_puts_r+0xbe>
 8013228:	6823      	ldr	r3, [r4, #0]
 801322a:	1c5a      	adds	r2, r3, #1
 801322c:	6022      	str	r2, [r4, #0]
 801322e:	7019      	strb	r1, [r3, #0]
 8013230:	68a3      	ldr	r3, [r4, #8]
 8013232:	7831      	ldrb	r1, [r6, #0]
 8013234:	3b01      	subs	r3, #1
 8013236:	2900      	cmp	r1, #0
 8013238:	d1ed      	bne.n	8013216 <_puts_r+0x82>
 801323a:	60a3      	str	r3, [r4, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	da0f      	bge.n	8013260 <_puts_r+0xcc>
 8013240:	0028      	movs	r0, r5
 8013242:	0022      	movs	r2, r4
 8013244:	310a      	adds	r1, #10
 8013246:	f000 f853 	bl	80132f0 <__swbuf_r>
 801324a:	250a      	movs	r5, #10
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	d1cd      	bne.n	80131ec <_puts_r+0x58>
 8013250:	e7ca      	b.n	80131e8 <_puts_r+0x54>
 8013252:	0022      	movs	r2, r4
 8013254:	0028      	movs	r0, r5
 8013256:	f000 f84b 	bl	80132f0 <__swbuf_r>
 801325a:	1c43      	adds	r3, r0, #1
 801325c:	d1e8      	bne.n	8013230 <_puts_r+0x9c>
 801325e:	e7c3      	b.n	80131e8 <_puts_r+0x54>
 8013260:	250a      	movs	r5, #10
 8013262:	6823      	ldr	r3, [r4, #0]
 8013264:	1c5a      	adds	r2, r3, #1
 8013266:	6022      	str	r2, [r4, #0]
 8013268:	701d      	strb	r5, [r3, #0]
 801326a:	e7bf      	b.n	80131ec <_puts_r+0x58>
 801326c:	080185cc 	.word	0x080185cc
 8013270:	080185ec 	.word	0x080185ec
 8013274:	080185ac 	.word	0x080185ac

08013278 <puts>:
 8013278:	b510      	push	{r4, lr}
 801327a:	4b03      	ldr	r3, [pc, #12]	; (8013288 <puts+0x10>)
 801327c:	0001      	movs	r1, r0
 801327e:	6818      	ldr	r0, [r3, #0]
 8013280:	f7ff ff88 	bl	8013194 <_puts_r>
 8013284:	bd10      	pop	{r4, pc}
 8013286:	46c0      	nop			; (mov r8, r8)
 8013288:	2000008c 	.word	0x2000008c

0801328c <_sbrk_r>:
 801328c:	2300      	movs	r3, #0
 801328e:	b570      	push	{r4, r5, r6, lr}
 8013290:	4d06      	ldr	r5, [pc, #24]	; (80132ac <_sbrk_r+0x20>)
 8013292:	0004      	movs	r4, r0
 8013294:	0008      	movs	r0, r1
 8013296:	602b      	str	r3, [r5, #0]
 8013298:	f7ff fda2 	bl	8012de0 <_sbrk>
 801329c:	1c43      	adds	r3, r0, #1
 801329e:	d103      	bne.n	80132a8 <_sbrk_r+0x1c>
 80132a0:	682b      	ldr	r3, [r5, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d000      	beq.n	80132a8 <_sbrk_r+0x1c>
 80132a6:	6023      	str	r3, [r4, #0]
 80132a8:	bd70      	pop	{r4, r5, r6, pc}
 80132aa:	46c0      	nop			; (mov r8, r8)
 80132ac:	2000080c 	.word	0x2000080c

080132b0 <siprintf>:
 80132b0:	b40e      	push	{r1, r2, r3}
 80132b2:	b500      	push	{lr}
 80132b4:	490b      	ldr	r1, [pc, #44]	; (80132e4 <siprintf+0x34>)
 80132b6:	b09c      	sub	sp, #112	; 0x70
 80132b8:	ab1d      	add	r3, sp, #116	; 0x74
 80132ba:	9002      	str	r0, [sp, #8]
 80132bc:	9006      	str	r0, [sp, #24]
 80132be:	9107      	str	r1, [sp, #28]
 80132c0:	9104      	str	r1, [sp, #16]
 80132c2:	4809      	ldr	r0, [pc, #36]	; (80132e8 <siprintf+0x38>)
 80132c4:	4909      	ldr	r1, [pc, #36]	; (80132ec <siprintf+0x3c>)
 80132c6:	cb04      	ldmia	r3!, {r2}
 80132c8:	9105      	str	r1, [sp, #20]
 80132ca:	6800      	ldr	r0, [r0, #0]
 80132cc:	a902      	add	r1, sp, #8
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	f000 fb8c 	bl	80139ec <_svfiprintf_r>
 80132d4:	2300      	movs	r3, #0
 80132d6:	9a02      	ldr	r2, [sp, #8]
 80132d8:	7013      	strb	r3, [r2, #0]
 80132da:	b01c      	add	sp, #112	; 0x70
 80132dc:	bc08      	pop	{r3}
 80132de:	b003      	add	sp, #12
 80132e0:	4718      	bx	r3
 80132e2:	46c0      	nop			; (mov r8, r8)
 80132e4:	7fffffff 	.word	0x7fffffff
 80132e8:	2000008c 	.word	0x2000008c
 80132ec:	ffff0208 	.word	0xffff0208

080132f0 <__swbuf_r>:
 80132f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f2:	0005      	movs	r5, r0
 80132f4:	000e      	movs	r6, r1
 80132f6:	0014      	movs	r4, r2
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d004      	beq.n	8013306 <__swbuf_r+0x16>
 80132fc:	6983      	ldr	r3, [r0, #24]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <__swbuf_r+0x16>
 8013302:	f000 f9f1 	bl	80136e8 <__sinit>
 8013306:	4b22      	ldr	r3, [pc, #136]	; (8013390 <__swbuf_r+0xa0>)
 8013308:	429c      	cmp	r4, r3
 801330a:	d12e      	bne.n	801336a <__swbuf_r+0x7a>
 801330c:	686c      	ldr	r4, [r5, #4]
 801330e:	69a3      	ldr	r3, [r4, #24]
 8013310:	60a3      	str	r3, [r4, #8]
 8013312:	89a3      	ldrh	r3, [r4, #12]
 8013314:	071b      	lsls	r3, r3, #28
 8013316:	d532      	bpl.n	801337e <__swbuf_r+0x8e>
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d02f      	beq.n	801337e <__swbuf_r+0x8e>
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	6922      	ldr	r2, [r4, #16]
 8013322:	b2f7      	uxtb	r7, r6
 8013324:	1a98      	subs	r0, r3, r2
 8013326:	6963      	ldr	r3, [r4, #20]
 8013328:	b2f6      	uxtb	r6, r6
 801332a:	4283      	cmp	r3, r0
 801332c:	dc05      	bgt.n	801333a <__swbuf_r+0x4a>
 801332e:	0021      	movs	r1, r4
 8013330:	0028      	movs	r0, r5
 8013332:	f000 f937 	bl	80135a4 <_fflush_r>
 8013336:	2800      	cmp	r0, #0
 8013338:	d127      	bne.n	801338a <__swbuf_r+0x9a>
 801333a:	68a3      	ldr	r3, [r4, #8]
 801333c:	3001      	adds	r0, #1
 801333e:	3b01      	subs	r3, #1
 8013340:	60a3      	str	r3, [r4, #8]
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	6022      	str	r2, [r4, #0]
 8013348:	701f      	strb	r7, [r3, #0]
 801334a:	6963      	ldr	r3, [r4, #20]
 801334c:	4283      	cmp	r3, r0
 801334e:	d004      	beq.n	801335a <__swbuf_r+0x6a>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	07db      	lsls	r3, r3, #31
 8013354:	d507      	bpl.n	8013366 <__swbuf_r+0x76>
 8013356:	2e0a      	cmp	r6, #10
 8013358:	d105      	bne.n	8013366 <__swbuf_r+0x76>
 801335a:	0021      	movs	r1, r4
 801335c:	0028      	movs	r0, r5
 801335e:	f000 f921 	bl	80135a4 <_fflush_r>
 8013362:	2800      	cmp	r0, #0
 8013364:	d111      	bne.n	801338a <__swbuf_r+0x9a>
 8013366:	0030      	movs	r0, r6
 8013368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801336a:	4b0a      	ldr	r3, [pc, #40]	; (8013394 <__swbuf_r+0xa4>)
 801336c:	429c      	cmp	r4, r3
 801336e:	d101      	bne.n	8013374 <__swbuf_r+0x84>
 8013370:	68ac      	ldr	r4, [r5, #8]
 8013372:	e7cc      	b.n	801330e <__swbuf_r+0x1e>
 8013374:	4b08      	ldr	r3, [pc, #32]	; (8013398 <__swbuf_r+0xa8>)
 8013376:	429c      	cmp	r4, r3
 8013378:	d1c9      	bne.n	801330e <__swbuf_r+0x1e>
 801337a:	68ec      	ldr	r4, [r5, #12]
 801337c:	e7c7      	b.n	801330e <__swbuf_r+0x1e>
 801337e:	0021      	movs	r1, r4
 8013380:	0028      	movs	r0, r5
 8013382:	f000 f80b 	bl	801339c <__swsetup_r>
 8013386:	2800      	cmp	r0, #0
 8013388:	d0c9      	beq.n	801331e <__swbuf_r+0x2e>
 801338a:	2601      	movs	r6, #1
 801338c:	4276      	negs	r6, r6
 801338e:	e7ea      	b.n	8013366 <__swbuf_r+0x76>
 8013390:	080185cc 	.word	0x080185cc
 8013394:	080185ec 	.word	0x080185ec
 8013398:	080185ac 	.word	0x080185ac

0801339c <__swsetup_r>:
 801339c:	4b37      	ldr	r3, [pc, #220]	; (801347c <__swsetup_r+0xe0>)
 801339e:	b570      	push	{r4, r5, r6, lr}
 80133a0:	681d      	ldr	r5, [r3, #0]
 80133a2:	0006      	movs	r6, r0
 80133a4:	000c      	movs	r4, r1
 80133a6:	2d00      	cmp	r5, #0
 80133a8:	d005      	beq.n	80133b6 <__swsetup_r+0x1a>
 80133aa:	69ab      	ldr	r3, [r5, #24]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d102      	bne.n	80133b6 <__swsetup_r+0x1a>
 80133b0:	0028      	movs	r0, r5
 80133b2:	f000 f999 	bl	80136e8 <__sinit>
 80133b6:	4b32      	ldr	r3, [pc, #200]	; (8013480 <__swsetup_r+0xe4>)
 80133b8:	429c      	cmp	r4, r3
 80133ba:	d10f      	bne.n	80133dc <__swsetup_r+0x40>
 80133bc:	686c      	ldr	r4, [r5, #4]
 80133be:	230c      	movs	r3, #12
 80133c0:	5ee2      	ldrsh	r2, [r4, r3]
 80133c2:	b293      	uxth	r3, r2
 80133c4:	0711      	lsls	r1, r2, #28
 80133c6:	d42d      	bmi.n	8013424 <__swsetup_r+0x88>
 80133c8:	06d9      	lsls	r1, r3, #27
 80133ca:	d411      	bmi.n	80133f0 <__swsetup_r+0x54>
 80133cc:	2309      	movs	r3, #9
 80133ce:	2001      	movs	r0, #1
 80133d0:	6033      	str	r3, [r6, #0]
 80133d2:	3337      	adds	r3, #55	; 0x37
 80133d4:	4313      	orrs	r3, r2
 80133d6:	81a3      	strh	r3, [r4, #12]
 80133d8:	4240      	negs	r0, r0
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	4b29      	ldr	r3, [pc, #164]	; (8013484 <__swsetup_r+0xe8>)
 80133de:	429c      	cmp	r4, r3
 80133e0:	d101      	bne.n	80133e6 <__swsetup_r+0x4a>
 80133e2:	68ac      	ldr	r4, [r5, #8]
 80133e4:	e7eb      	b.n	80133be <__swsetup_r+0x22>
 80133e6:	4b28      	ldr	r3, [pc, #160]	; (8013488 <__swsetup_r+0xec>)
 80133e8:	429c      	cmp	r4, r3
 80133ea:	d1e8      	bne.n	80133be <__swsetup_r+0x22>
 80133ec:	68ec      	ldr	r4, [r5, #12]
 80133ee:	e7e6      	b.n	80133be <__swsetup_r+0x22>
 80133f0:	075b      	lsls	r3, r3, #29
 80133f2:	d513      	bpl.n	801341c <__swsetup_r+0x80>
 80133f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133f6:	2900      	cmp	r1, #0
 80133f8:	d008      	beq.n	801340c <__swsetup_r+0x70>
 80133fa:	0023      	movs	r3, r4
 80133fc:	3344      	adds	r3, #68	; 0x44
 80133fe:	4299      	cmp	r1, r3
 8013400:	d002      	beq.n	8013408 <__swsetup_r+0x6c>
 8013402:	0030      	movs	r0, r6
 8013404:	f7ff fe04 	bl	8013010 <_free_r>
 8013408:	2300      	movs	r3, #0
 801340a:	6363      	str	r3, [r4, #52]	; 0x34
 801340c:	2224      	movs	r2, #36	; 0x24
 801340e:	89a3      	ldrh	r3, [r4, #12]
 8013410:	4393      	bics	r3, r2
 8013412:	81a3      	strh	r3, [r4, #12]
 8013414:	2300      	movs	r3, #0
 8013416:	6063      	str	r3, [r4, #4]
 8013418:	6923      	ldr	r3, [r4, #16]
 801341a:	6023      	str	r3, [r4, #0]
 801341c:	2308      	movs	r3, #8
 801341e:	89a2      	ldrh	r2, [r4, #12]
 8013420:	4313      	orrs	r3, r2
 8013422:	81a3      	strh	r3, [r4, #12]
 8013424:	6923      	ldr	r3, [r4, #16]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d10b      	bne.n	8013442 <__swsetup_r+0xa6>
 801342a:	21a0      	movs	r1, #160	; 0xa0
 801342c:	2280      	movs	r2, #128	; 0x80
 801342e:	89a3      	ldrh	r3, [r4, #12]
 8013430:	0089      	lsls	r1, r1, #2
 8013432:	0092      	lsls	r2, r2, #2
 8013434:	400b      	ands	r3, r1
 8013436:	4293      	cmp	r3, r2
 8013438:	d003      	beq.n	8013442 <__swsetup_r+0xa6>
 801343a:	0021      	movs	r1, r4
 801343c:	0030      	movs	r0, r6
 801343e:	f000 fa1f 	bl	8013880 <__smakebuf_r>
 8013442:	220c      	movs	r2, #12
 8013444:	5ea3      	ldrsh	r3, [r4, r2]
 8013446:	2001      	movs	r0, #1
 8013448:	001a      	movs	r2, r3
 801344a:	b299      	uxth	r1, r3
 801344c:	4002      	ands	r2, r0
 801344e:	4203      	tst	r3, r0
 8013450:	d00f      	beq.n	8013472 <__swsetup_r+0xd6>
 8013452:	2200      	movs	r2, #0
 8013454:	60a2      	str	r2, [r4, #8]
 8013456:	6962      	ldr	r2, [r4, #20]
 8013458:	4252      	negs	r2, r2
 801345a:	61a2      	str	r2, [r4, #24]
 801345c:	2000      	movs	r0, #0
 801345e:	6922      	ldr	r2, [r4, #16]
 8013460:	4282      	cmp	r2, r0
 8013462:	d1ba      	bne.n	80133da <__swsetup_r+0x3e>
 8013464:	060a      	lsls	r2, r1, #24
 8013466:	d5b8      	bpl.n	80133da <__swsetup_r+0x3e>
 8013468:	2240      	movs	r2, #64	; 0x40
 801346a:	4313      	orrs	r3, r2
 801346c:	81a3      	strh	r3, [r4, #12]
 801346e:	3801      	subs	r0, #1
 8013470:	e7b3      	b.n	80133da <__swsetup_r+0x3e>
 8013472:	0788      	lsls	r0, r1, #30
 8013474:	d400      	bmi.n	8013478 <__swsetup_r+0xdc>
 8013476:	6962      	ldr	r2, [r4, #20]
 8013478:	60a2      	str	r2, [r4, #8]
 801347a:	e7ef      	b.n	801345c <__swsetup_r+0xc0>
 801347c:	2000008c 	.word	0x2000008c
 8013480:	080185cc 	.word	0x080185cc
 8013484:	080185ec 	.word	0x080185ec
 8013488:	080185ac 	.word	0x080185ac

0801348c <__sflush_r>:
 801348c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801348e:	898b      	ldrh	r3, [r1, #12]
 8013490:	0005      	movs	r5, r0
 8013492:	000c      	movs	r4, r1
 8013494:	071a      	lsls	r2, r3, #28
 8013496:	d45f      	bmi.n	8013558 <__sflush_r+0xcc>
 8013498:	684a      	ldr	r2, [r1, #4]
 801349a:	2a00      	cmp	r2, #0
 801349c:	dc04      	bgt.n	80134a8 <__sflush_r+0x1c>
 801349e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80134a0:	2a00      	cmp	r2, #0
 80134a2:	dc01      	bgt.n	80134a8 <__sflush_r+0x1c>
 80134a4:	2000      	movs	r0, #0
 80134a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80134a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80134aa:	2f00      	cmp	r7, #0
 80134ac:	d0fa      	beq.n	80134a4 <__sflush_r+0x18>
 80134ae:	2200      	movs	r2, #0
 80134b0:	2180      	movs	r1, #128	; 0x80
 80134b2:	682e      	ldr	r6, [r5, #0]
 80134b4:	602a      	str	r2, [r5, #0]
 80134b6:	001a      	movs	r2, r3
 80134b8:	0149      	lsls	r1, r1, #5
 80134ba:	400a      	ands	r2, r1
 80134bc:	420b      	tst	r3, r1
 80134be:	d034      	beq.n	801352a <__sflush_r+0x9e>
 80134c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134c2:	89a3      	ldrh	r3, [r4, #12]
 80134c4:	075b      	lsls	r3, r3, #29
 80134c6:	d506      	bpl.n	80134d6 <__sflush_r+0x4a>
 80134c8:	6863      	ldr	r3, [r4, #4]
 80134ca:	1ac0      	subs	r0, r0, r3
 80134cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d001      	beq.n	80134d6 <__sflush_r+0x4a>
 80134d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134d4:	1ac0      	subs	r0, r0, r3
 80134d6:	0002      	movs	r2, r0
 80134d8:	6a21      	ldr	r1, [r4, #32]
 80134da:	2300      	movs	r3, #0
 80134dc:	0028      	movs	r0, r5
 80134de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80134e0:	47b8      	blx	r7
 80134e2:	89a1      	ldrh	r1, [r4, #12]
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	d106      	bne.n	80134f6 <__sflush_r+0x6a>
 80134e8:	682b      	ldr	r3, [r5, #0]
 80134ea:	2b1d      	cmp	r3, #29
 80134ec:	d831      	bhi.n	8013552 <__sflush_r+0xc6>
 80134ee:	4a2c      	ldr	r2, [pc, #176]	; (80135a0 <__sflush_r+0x114>)
 80134f0:	40da      	lsrs	r2, r3
 80134f2:	07d3      	lsls	r3, r2, #31
 80134f4:	d52d      	bpl.n	8013552 <__sflush_r+0xc6>
 80134f6:	2300      	movs	r3, #0
 80134f8:	6063      	str	r3, [r4, #4]
 80134fa:	6923      	ldr	r3, [r4, #16]
 80134fc:	6023      	str	r3, [r4, #0]
 80134fe:	04cb      	lsls	r3, r1, #19
 8013500:	d505      	bpl.n	801350e <__sflush_r+0x82>
 8013502:	1c43      	adds	r3, r0, #1
 8013504:	d102      	bne.n	801350c <__sflush_r+0x80>
 8013506:	682b      	ldr	r3, [r5, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d100      	bne.n	801350e <__sflush_r+0x82>
 801350c:	6560      	str	r0, [r4, #84]	; 0x54
 801350e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013510:	602e      	str	r6, [r5, #0]
 8013512:	2900      	cmp	r1, #0
 8013514:	d0c6      	beq.n	80134a4 <__sflush_r+0x18>
 8013516:	0023      	movs	r3, r4
 8013518:	3344      	adds	r3, #68	; 0x44
 801351a:	4299      	cmp	r1, r3
 801351c:	d002      	beq.n	8013524 <__sflush_r+0x98>
 801351e:	0028      	movs	r0, r5
 8013520:	f7ff fd76 	bl	8013010 <_free_r>
 8013524:	2000      	movs	r0, #0
 8013526:	6360      	str	r0, [r4, #52]	; 0x34
 8013528:	e7bd      	b.n	80134a6 <__sflush_r+0x1a>
 801352a:	2301      	movs	r3, #1
 801352c:	0028      	movs	r0, r5
 801352e:	6a21      	ldr	r1, [r4, #32]
 8013530:	47b8      	blx	r7
 8013532:	1c43      	adds	r3, r0, #1
 8013534:	d1c5      	bne.n	80134c2 <__sflush_r+0x36>
 8013536:	682b      	ldr	r3, [r5, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d0c2      	beq.n	80134c2 <__sflush_r+0x36>
 801353c:	2b1d      	cmp	r3, #29
 801353e:	d001      	beq.n	8013544 <__sflush_r+0xb8>
 8013540:	2b16      	cmp	r3, #22
 8013542:	d101      	bne.n	8013548 <__sflush_r+0xbc>
 8013544:	602e      	str	r6, [r5, #0]
 8013546:	e7ad      	b.n	80134a4 <__sflush_r+0x18>
 8013548:	2340      	movs	r3, #64	; 0x40
 801354a:	89a2      	ldrh	r2, [r4, #12]
 801354c:	4313      	orrs	r3, r2
 801354e:	81a3      	strh	r3, [r4, #12]
 8013550:	e7a9      	b.n	80134a6 <__sflush_r+0x1a>
 8013552:	2340      	movs	r3, #64	; 0x40
 8013554:	430b      	orrs	r3, r1
 8013556:	e7fa      	b.n	801354e <__sflush_r+0xc2>
 8013558:	690f      	ldr	r7, [r1, #16]
 801355a:	2f00      	cmp	r7, #0
 801355c:	d0a2      	beq.n	80134a4 <__sflush_r+0x18>
 801355e:	680a      	ldr	r2, [r1, #0]
 8013560:	600f      	str	r7, [r1, #0]
 8013562:	1bd2      	subs	r2, r2, r7
 8013564:	9201      	str	r2, [sp, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	079b      	lsls	r3, r3, #30
 801356a:	d100      	bne.n	801356e <__sflush_r+0xe2>
 801356c:	694a      	ldr	r2, [r1, #20]
 801356e:	60a2      	str	r2, [r4, #8]
 8013570:	9b01      	ldr	r3, [sp, #4]
 8013572:	2b00      	cmp	r3, #0
 8013574:	dc00      	bgt.n	8013578 <__sflush_r+0xec>
 8013576:	e795      	b.n	80134a4 <__sflush_r+0x18>
 8013578:	003a      	movs	r2, r7
 801357a:	0028      	movs	r0, r5
 801357c:	9b01      	ldr	r3, [sp, #4]
 801357e:	6a21      	ldr	r1, [r4, #32]
 8013580:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013582:	47b0      	blx	r6
 8013584:	2800      	cmp	r0, #0
 8013586:	dc06      	bgt.n	8013596 <__sflush_r+0x10a>
 8013588:	2340      	movs	r3, #64	; 0x40
 801358a:	2001      	movs	r0, #1
 801358c:	89a2      	ldrh	r2, [r4, #12]
 801358e:	4240      	negs	r0, r0
 8013590:	4313      	orrs	r3, r2
 8013592:	81a3      	strh	r3, [r4, #12]
 8013594:	e787      	b.n	80134a6 <__sflush_r+0x1a>
 8013596:	9b01      	ldr	r3, [sp, #4]
 8013598:	183f      	adds	r7, r7, r0
 801359a:	1a1b      	subs	r3, r3, r0
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	e7e7      	b.n	8013570 <__sflush_r+0xe4>
 80135a0:	20400001 	.word	0x20400001

080135a4 <_fflush_r>:
 80135a4:	690b      	ldr	r3, [r1, #16]
 80135a6:	b570      	push	{r4, r5, r6, lr}
 80135a8:	0005      	movs	r5, r0
 80135aa:	000c      	movs	r4, r1
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <_fflush_r+0x12>
 80135b0:	2500      	movs	r5, #0
 80135b2:	0028      	movs	r0, r5
 80135b4:	bd70      	pop	{r4, r5, r6, pc}
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d004      	beq.n	80135c4 <_fflush_r+0x20>
 80135ba:	6983      	ldr	r3, [r0, #24]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d101      	bne.n	80135c4 <_fflush_r+0x20>
 80135c0:	f000 f892 	bl	80136e8 <__sinit>
 80135c4:	4b14      	ldr	r3, [pc, #80]	; (8013618 <_fflush_r+0x74>)
 80135c6:	429c      	cmp	r4, r3
 80135c8:	d11b      	bne.n	8013602 <_fflush_r+0x5e>
 80135ca:	686c      	ldr	r4, [r5, #4]
 80135cc:	220c      	movs	r2, #12
 80135ce:	5ea3      	ldrsh	r3, [r4, r2]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d0ed      	beq.n	80135b0 <_fflush_r+0xc>
 80135d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135d6:	07d2      	lsls	r2, r2, #31
 80135d8:	d404      	bmi.n	80135e4 <_fflush_r+0x40>
 80135da:	059b      	lsls	r3, r3, #22
 80135dc:	d402      	bmi.n	80135e4 <_fflush_r+0x40>
 80135de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135e0:	f000 f923 	bl	801382a <__retarget_lock_acquire_recursive>
 80135e4:	0028      	movs	r0, r5
 80135e6:	0021      	movs	r1, r4
 80135e8:	f7ff ff50 	bl	801348c <__sflush_r>
 80135ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135ee:	0005      	movs	r5, r0
 80135f0:	07db      	lsls	r3, r3, #31
 80135f2:	d4de      	bmi.n	80135b2 <_fflush_r+0xe>
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	059b      	lsls	r3, r3, #22
 80135f8:	d4db      	bmi.n	80135b2 <_fflush_r+0xe>
 80135fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135fc:	f000 f916 	bl	801382c <__retarget_lock_release_recursive>
 8013600:	e7d7      	b.n	80135b2 <_fflush_r+0xe>
 8013602:	4b06      	ldr	r3, [pc, #24]	; (801361c <_fflush_r+0x78>)
 8013604:	429c      	cmp	r4, r3
 8013606:	d101      	bne.n	801360c <_fflush_r+0x68>
 8013608:	68ac      	ldr	r4, [r5, #8]
 801360a:	e7df      	b.n	80135cc <_fflush_r+0x28>
 801360c:	4b04      	ldr	r3, [pc, #16]	; (8013620 <_fflush_r+0x7c>)
 801360e:	429c      	cmp	r4, r3
 8013610:	d1dc      	bne.n	80135cc <_fflush_r+0x28>
 8013612:	68ec      	ldr	r4, [r5, #12]
 8013614:	e7da      	b.n	80135cc <_fflush_r+0x28>
 8013616:	46c0      	nop			; (mov r8, r8)
 8013618:	080185cc 	.word	0x080185cc
 801361c:	080185ec 	.word	0x080185ec
 8013620:	080185ac 	.word	0x080185ac

08013624 <std>:
 8013624:	2300      	movs	r3, #0
 8013626:	b510      	push	{r4, lr}
 8013628:	0004      	movs	r4, r0
 801362a:	6003      	str	r3, [r0, #0]
 801362c:	6043      	str	r3, [r0, #4]
 801362e:	6083      	str	r3, [r0, #8]
 8013630:	8181      	strh	r1, [r0, #12]
 8013632:	6643      	str	r3, [r0, #100]	; 0x64
 8013634:	0019      	movs	r1, r3
 8013636:	81c2      	strh	r2, [r0, #14]
 8013638:	6103      	str	r3, [r0, #16]
 801363a:	6143      	str	r3, [r0, #20]
 801363c:	6183      	str	r3, [r0, #24]
 801363e:	2208      	movs	r2, #8
 8013640:	305c      	adds	r0, #92	; 0x5c
 8013642:	f7ff fcdd 	bl	8013000 <memset>
 8013646:	4b05      	ldr	r3, [pc, #20]	; (801365c <std+0x38>)
 8013648:	6263      	str	r3, [r4, #36]	; 0x24
 801364a:	4b05      	ldr	r3, [pc, #20]	; (8013660 <std+0x3c>)
 801364c:	6224      	str	r4, [r4, #32]
 801364e:	62a3      	str	r3, [r4, #40]	; 0x28
 8013650:	4b04      	ldr	r3, [pc, #16]	; (8013664 <std+0x40>)
 8013652:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013654:	4b04      	ldr	r3, [pc, #16]	; (8013668 <std+0x44>)
 8013656:	6323      	str	r3, [r4, #48]	; 0x30
 8013658:	bd10      	pop	{r4, pc}
 801365a:	46c0      	nop			; (mov r8, r8)
 801365c:	080141b5 	.word	0x080141b5
 8013660:	080141dd 	.word	0x080141dd
 8013664:	08014215 	.word	0x08014215
 8013668:	08014241 	.word	0x08014241

0801366c <_cleanup_r>:
 801366c:	b510      	push	{r4, lr}
 801366e:	4902      	ldr	r1, [pc, #8]	; (8013678 <_cleanup_r+0xc>)
 8013670:	f000 f8ba 	bl	80137e8 <_fwalk_reent>
 8013674:	bd10      	pop	{r4, pc}
 8013676:	46c0      	nop			; (mov r8, r8)
 8013678:	080135a5 	.word	0x080135a5

0801367c <__sfmoreglue>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	2568      	movs	r5, #104	; 0x68
 8013680:	1e4a      	subs	r2, r1, #1
 8013682:	4355      	muls	r5, r2
 8013684:	000e      	movs	r6, r1
 8013686:	0029      	movs	r1, r5
 8013688:	3174      	adds	r1, #116	; 0x74
 801368a:	f7ff fd0b 	bl	80130a4 <_malloc_r>
 801368e:	1e04      	subs	r4, r0, #0
 8013690:	d008      	beq.n	80136a4 <__sfmoreglue+0x28>
 8013692:	2100      	movs	r1, #0
 8013694:	002a      	movs	r2, r5
 8013696:	6001      	str	r1, [r0, #0]
 8013698:	6046      	str	r6, [r0, #4]
 801369a:	300c      	adds	r0, #12
 801369c:	60a0      	str	r0, [r4, #8]
 801369e:	3268      	adds	r2, #104	; 0x68
 80136a0:	f7ff fcae 	bl	8013000 <memset>
 80136a4:	0020      	movs	r0, r4
 80136a6:	bd70      	pop	{r4, r5, r6, pc}

080136a8 <__sfp_lock_acquire>:
 80136a8:	b510      	push	{r4, lr}
 80136aa:	4802      	ldr	r0, [pc, #8]	; (80136b4 <__sfp_lock_acquire+0xc>)
 80136ac:	f000 f8bd 	bl	801382a <__retarget_lock_acquire_recursive>
 80136b0:	bd10      	pop	{r4, pc}
 80136b2:	46c0      	nop			; (mov r8, r8)
 80136b4:	20000808 	.word	0x20000808

080136b8 <__sfp_lock_release>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4802      	ldr	r0, [pc, #8]	; (80136c4 <__sfp_lock_release+0xc>)
 80136bc:	f000 f8b6 	bl	801382c <__retarget_lock_release_recursive>
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	46c0      	nop			; (mov r8, r8)
 80136c4:	20000808 	.word	0x20000808

080136c8 <__sinit_lock_acquire>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	4802      	ldr	r0, [pc, #8]	; (80136d4 <__sinit_lock_acquire+0xc>)
 80136cc:	f000 f8ad 	bl	801382a <__retarget_lock_acquire_recursive>
 80136d0:	bd10      	pop	{r4, pc}
 80136d2:	46c0      	nop			; (mov r8, r8)
 80136d4:	20000803 	.word	0x20000803

080136d8 <__sinit_lock_release>:
 80136d8:	b510      	push	{r4, lr}
 80136da:	4802      	ldr	r0, [pc, #8]	; (80136e4 <__sinit_lock_release+0xc>)
 80136dc:	f000 f8a6 	bl	801382c <__retarget_lock_release_recursive>
 80136e0:	bd10      	pop	{r4, pc}
 80136e2:	46c0      	nop			; (mov r8, r8)
 80136e4:	20000803 	.word	0x20000803

080136e8 <__sinit>:
 80136e8:	b513      	push	{r0, r1, r4, lr}
 80136ea:	0004      	movs	r4, r0
 80136ec:	f7ff ffec 	bl	80136c8 <__sinit_lock_acquire>
 80136f0:	69a3      	ldr	r3, [r4, #24]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <__sinit+0x14>
 80136f6:	f7ff ffef 	bl	80136d8 <__sinit_lock_release>
 80136fa:	bd13      	pop	{r0, r1, r4, pc}
 80136fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80136fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013700:	6523      	str	r3, [r4, #80]	; 0x50
 8013702:	4b13      	ldr	r3, [pc, #76]	; (8013750 <__sinit+0x68>)
 8013704:	4a13      	ldr	r2, [pc, #76]	; (8013754 <__sinit+0x6c>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	62a2      	str	r2, [r4, #40]	; 0x28
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	42a3      	cmp	r3, r4
 801370e:	d101      	bne.n	8013714 <__sinit+0x2c>
 8013710:	2301      	movs	r3, #1
 8013712:	61a3      	str	r3, [r4, #24]
 8013714:	0020      	movs	r0, r4
 8013716:	f000 f81f 	bl	8013758 <__sfp>
 801371a:	6060      	str	r0, [r4, #4]
 801371c:	0020      	movs	r0, r4
 801371e:	f000 f81b 	bl	8013758 <__sfp>
 8013722:	60a0      	str	r0, [r4, #8]
 8013724:	0020      	movs	r0, r4
 8013726:	f000 f817 	bl	8013758 <__sfp>
 801372a:	2200      	movs	r2, #0
 801372c:	2104      	movs	r1, #4
 801372e:	60e0      	str	r0, [r4, #12]
 8013730:	6860      	ldr	r0, [r4, #4]
 8013732:	f7ff ff77 	bl	8013624 <std>
 8013736:	2201      	movs	r2, #1
 8013738:	2109      	movs	r1, #9
 801373a:	68a0      	ldr	r0, [r4, #8]
 801373c:	f7ff ff72 	bl	8013624 <std>
 8013740:	2202      	movs	r2, #2
 8013742:	2112      	movs	r1, #18
 8013744:	68e0      	ldr	r0, [r4, #12]
 8013746:	f7ff ff6d 	bl	8013624 <std>
 801374a:	2301      	movs	r3, #1
 801374c:	61a3      	str	r3, [r4, #24]
 801374e:	e7d2      	b.n	80136f6 <__sinit+0xe>
 8013750:	080185a8 	.word	0x080185a8
 8013754:	0801366d 	.word	0x0801366d

08013758 <__sfp>:
 8013758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801375a:	0007      	movs	r7, r0
 801375c:	f7ff ffa4 	bl	80136a8 <__sfp_lock_acquire>
 8013760:	4b1f      	ldr	r3, [pc, #124]	; (80137e0 <__sfp+0x88>)
 8013762:	681e      	ldr	r6, [r3, #0]
 8013764:	69b3      	ldr	r3, [r6, #24]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <__sfp+0x18>
 801376a:	0030      	movs	r0, r6
 801376c:	f7ff ffbc 	bl	80136e8 <__sinit>
 8013770:	3648      	adds	r6, #72	; 0x48
 8013772:	68b4      	ldr	r4, [r6, #8]
 8013774:	6873      	ldr	r3, [r6, #4]
 8013776:	3b01      	subs	r3, #1
 8013778:	d504      	bpl.n	8013784 <__sfp+0x2c>
 801377a:	6833      	ldr	r3, [r6, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d022      	beq.n	80137c6 <__sfp+0x6e>
 8013780:	6836      	ldr	r6, [r6, #0]
 8013782:	e7f6      	b.n	8013772 <__sfp+0x1a>
 8013784:	220c      	movs	r2, #12
 8013786:	5ea5      	ldrsh	r5, [r4, r2]
 8013788:	2d00      	cmp	r5, #0
 801378a:	d11a      	bne.n	80137c2 <__sfp+0x6a>
 801378c:	0020      	movs	r0, r4
 801378e:	4b15      	ldr	r3, [pc, #84]	; (80137e4 <__sfp+0x8c>)
 8013790:	3058      	adds	r0, #88	; 0x58
 8013792:	60e3      	str	r3, [r4, #12]
 8013794:	6665      	str	r5, [r4, #100]	; 0x64
 8013796:	f000 f847 	bl	8013828 <__retarget_lock_init_recursive>
 801379a:	f7ff ff8d 	bl	80136b8 <__sfp_lock_release>
 801379e:	0020      	movs	r0, r4
 80137a0:	2208      	movs	r2, #8
 80137a2:	0029      	movs	r1, r5
 80137a4:	6025      	str	r5, [r4, #0]
 80137a6:	60a5      	str	r5, [r4, #8]
 80137a8:	6065      	str	r5, [r4, #4]
 80137aa:	6125      	str	r5, [r4, #16]
 80137ac:	6165      	str	r5, [r4, #20]
 80137ae:	61a5      	str	r5, [r4, #24]
 80137b0:	305c      	adds	r0, #92	; 0x5c
 80137b2:	f7ff fc25 	bl	8013000 <memset>
 80137b6:	6365      	str	r5, [r4, #52]	; 0x34
 80137b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80137ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80137bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80137be:	0020      	movs	r0, r4
 80137c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137c2:	3468      	adds	r4, #104	; 0x68
 80137c4:	e7d7      	b.n	8013776 <__sfp+0x1e>
 80137c6:	2104      	movs	r1, #4
 80137c8:	0038      	movs	r0, r7
 80137ca:	f7ff ff57 	bl	801367c <__sfmoreglue>
 80137ce:	1e04      	subs	r4, r0, #0
 80137d0:	6030      	str	r0, [r6, #0]
 80137d2:	d1d5      	bne.n	8013780 <__sfp+0x28>
 80137d4:	f7ff ff70 	bl	80136b8 <__sfp_lock_release>
 80137d8:	230c      	movs	r3, #12
 80137da:	603b      	str	r3, [r7, #0]
 80137dc:	e7ef      	b.n	80137be <__sfp+0x66>
 80137de:	46c0      	nop			; (mov r8, r8)
 80137e0:	080185a8 	.word	0x080185a8
 80137e4:	ffff0001 	.word	0xffff0001

080137e8 <_fwalk_reent>:
 80137e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137ea:	0004      	movs	r4, r0
 80137ec:	0006      	movs	r6, r0
 80137ee:	2700      	movs	r7, #0
 80137f0:	9101      	str	r1, [sp, #4]
 80137f2:	3448      	adds	r4, #72	; 0x48
 80137f4:	6863      	ldr	r3, [r4, #4]
 80137f6:	68a5      	ldr	r5, [r4, #8]
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	9b00      	ldr	r3, [sp, #0]
 80137fc:	3b01      	subs	r3, #1
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	d504      	bpl.n	801380c <_fwalk_reent+0x24>
 8013802:	6824      	ldr	r4, [r4, #0]
 8013804:	2c00      	cmp	r4, #0
 8013806:	d1f5      	bne.n	80137f4 <_fwalk_reent+0xc>
 8013808:	0038      	movs	r0, r7
 801380a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801380c:	89ab      	ldrh	r3, [r5, #12]
 801380e:	2b01      	cmp	r3, #1
 8013810:	d908      	bls.n	8013824 <_fwalk_reent+0x3c>
 8013812:	220e      	movs	r2, #14
 8013814:	5eab      	ldrsh	r3, [r5, r2]
 8013816:	3301      	adds	r3, #1
 8013818:	d004      	beq.n	8013824 <_fwalk_reent+0x3c>
 801381a:	0029      	movs	r1, r5
 801381c:	0030      	movs	r0, r6
 801381e:	9b01      	ldr	r3, [sp, #4]
 8013820:	4798      	blx	r3
 8013822:	4307      	orrs	r7, r0
 8013824:	3568      	adds	r5, #104	; 0x68
 8013826:	e7e8      	b.n	80137fa <_fwalk_reent+0x12>

08013828 <__retarget_lock_init_recursive>:
 8013828:	4770      	bx	lr

0801382a <__retarget_lock_acquire_recursive>:
 801382a:	4770      	bx	lr

0801382c <__retarget_lock_release_recursive>:
 801382c:	4770      	bx	lr
	...

08013830 <__swhatbuf_r>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	000e      	movs	r6, r1
 8013834:	001d      	movs	r5, r3
 8013836:	230e      	movs	r3, #14
 8013838:	5ec9      	ldrsh	r1, [r1, r3]
 801383a:	0014      	movs	r4, r2
 801383c:	b096      	sub	sp, #88	; 0x58
 801383e:	2900      	cmp	r1, #0
 8013840:	da07      	bge.n	8013852 <__swhatbuf_r+0x22>
 8013842:	2300      	movs	r3, #0
 8013844:	602b      	str	r3, [r5, #0]
 8013846:	89b3      	ldrh	r3, [r6, #12]
 8013848:	061b      	lsls	r3, r3, #24
 801384a:	d411      	bmi.n	8013870 <__swhatbuf_r+0x40>
 801384c:	2380      	movs	r3, #128	; 0x80
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	e00f      	b.n	8013872 <__swhatbuf_r+0x42>
 8013852:	466a      	mov	r2, sp
 8013854:	f000 fd20 	bl	8014298 <_fstat_r>
 8013858:	2800      	cmp	r0, #0
 801385a:	dbf2      	blt.n	8013842 <__swhatbuf_r+0x12>
 801385c:	23f0      	movs	r3, #240	; 0xf0
 801385e:	9901      	ldr	r1, [sp, #4]
 8013860:	021b      	lsls	r3, r3, #8
 8013862:	4019      	ands	r1, r3
 8013864:	4b05      	ldr	r3, [pc, #20]	; (801387c <__swhatbuf_r+0x4c>)
 8013866:	18c9      	adds	r1, r1, r3
 8013868:	424b      	negs	r3, r1
 801386a:	4159      	adcs	r1, r3
 801386c:	6029      	str	r1, [r5, #0]
 801386e:	e7ed      	b.n	801384c <__swhatbuf_r+0x1c>
 8013870:	2340      	movs	r3, #64	; 0x40
 8013872:	2000      	movs	r0, #0
 8013874:	6023      	str	r3, [r4, #0]
 8013876:	b016      	add	sp, #88	; 0x58
 8013878:	bd70      	pop	{r4, r5, r6, pc}
 801387a:	46c0      	nop			; (mov r8, r8)
 801387c:	ffffe000 	.word	0xffffe000

08013880 <__smakebuf_r>:
 8013880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013882:	2602      	movs	r6, #2
 8013884:	898b      	ldrh	r3, [r1, #12]
 8013886:	0005      	movs	r5, r0
 8013888:	000c      	movs	r4, r1
 801388a:	4233      	tst	r3, r6
 801388c:	d006      	beq.n	801389c <__smakebuf_r+0x1c>
 801388e:	0023      	movs	r3, r4
 8013890:	3347      	adds	r3, #71	; 0x47
 8013892:	6023      	str	r3, [r4, #0]
 8013894:	6123      	str	r3, [r4, #16]
 8013896:	2301      	movs	r3, #1
 8013898:	6163      	str	r3, [r4, #20]
 801389a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801389c:	466a      	mov	r2, sp
 801389e:	ab01      	add	r3, sp, #4
 80138a0:	f7ff ffc6 	bl	8013830 <__swhatbuf_r>
 80138a4:	9900      	ldr	r1, [sp, #0]
 80138a6:	0007      	movs	r7, r0
 80138a8:	0028      	movs	r0, r5
 80138aa:	f7ff fbfb 	bl	80130a4 <_malloc_r>
 80138ae:	2800      	cmp	r0, #0
 80138b0:	d108      	bne.n	80138c4 <__smakebuf_r+0x44>
 80138b2:	220c      	movs	r2, #12
 80138b4:	5ea3      	ldrsh	r3, [r4, r2]
 80138b6:	059a      	lsls	r2, r3, #22
 80138b8:	d4ef      	bmi.n	801389a <__smakebuf_r+0x1a>
 80138ba:	2203      	movs	r2, #3
 80138bc:	4393      	bics	r3, r2
 80138be:	431e      	orrs	r6, r3
 80138c0:	81a6      	strh	r6, [r4, #12]
 80138c2:	e7e4      	b.n	801388e <__smakebuf_r+0xe>
 80138c4:	4b0f      	ldr	r3, [pc, #60]	; (8013904 <__smakebuf_r+0x84>)
 80138c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80138c8:	2380      	movs	r3, #128	; 0x80
 80138ca:	89a2      	ldrh	r2, [r4, #12]
 80138cc:	6020      	str	r0, [r4, #0]
 80138ce:	4313      	orrs	r3, r2
 80138d0:	81a3      	strh	r3, [r4, #12]
 80138d2:	9b00      	ldr	r3, [sp, #0]
 80138d4:	6120      	str	r0, [r4, #16]
 80138d6:	6163      	str	r3, [r4, #20]
 80138d8:	9b01      	ldr	r3, [sp, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d00d      	beq.n	80138fa <__smakebuf_r+0x7a>
 80138de:	0028      	movs	r0, r5
 80138e0:	230e      	movs	r3, #14
 80138e2:	5ee1      	ldrsh	r1, [r4, r3]
 80138e4:	f000 fcea 	bl	80142bc <_isatty_r>
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d006      	beq.n	80138fa <__smakebuf_r+0x7a>
 80138ec:	2203      	movs	r2, #3
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	4393      	bics	r3, r2
 80138f2:	001a      	movs	r2, r3
 80138f4:	2301      	movs	r3, #1
 80138f6:	4313      	orrs	r3, r2
 80138f8:	81a3      	strh	r3, [r4, #12]
 80138fa:	89a0      	ldrh	r0, [r4, #12]
 80138fc:	4307      	orrs	r7, r0
 80138fe:	81a7      	strh	r7, [r4, #12]
 8013900:	e7cb      	b.n	801389a <__smakebuf_r+0x1a>
 8013902:	46c0      	nop			; (mov r8, r8)
 8013904:	0801366d 	.word	0x0801366d

08013908 <__malloc_lock>:
 8013908:	b510      	push	{r4, lr}
 801390a:	4802      	ldr	r0, [pc, #8]	; (8013914 <__malloc_lock+0xc>)
 801390c:	f7ff ff8d 	bl	801382a <__retarget_lock_acquire_recursive>
 8013910:	bd10      	pop	{r4, pc}
 8013912:	46c0      	nop			; (mov r8, r8)
 8013914:	20000804 	.word	0x20000804

08013918 <__malloc_unlock>:
 8013918:	b510      	push	{r4, lr}
 801391a:	4802      	ldr	r0, [pc, #8]	; (8013924 <__malloc_unlock+0xc>)
 801391c:	f7ff ff86 	bl	801382c <__retarget_lock_release_recursive>
 8013920:	bd10      	pop	{r4, pc}
 8013922:	46c0      	nop			; (mov r8, r8)
 8013924:	20000804 	.word	0x20000804

08013928 <__ssputs_r>:
 8013928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392a:	688e      	ldr	r6, [r1, #8]
 801392c:	b085      	sub	sp, #20
 801392e:	0007      	movs	r7, r0
 8013930:	000c      	movs	r4, r1
 8013932:	9203      	str	r2, [sp, #12]
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	429e      	cmp	r6, r3
 8013938:	d83c      	bhi.n	80139b4 <__ssputs_r+0x8c>
 801393a:	2390      	movs	r3, #144	; 0x90
 801393c:	898a      	ldrh	r2, [r1, #12]
 801393e:	00db      	lsls	r3, r3, #3
 8013940:	421a      	tst	r2, r3
 8013942:	d034      	beq.n	80139ae <__ssputs_r+0x86>
 8013944:	2503      	movs	r5, #3
 8013946:	6909      	ldr	r1, [r1, #16]
 8013948:	6823      	ldr	r3, [r4, #0]
 801394a:	1a5b      	subs	r3, r3, r1
 801394c:	9302      	str	r3, [sp, #8]
 801394e:	6963      	ldr	r3, [r4, #20]
 8013950:	9802      	ldr	r0, [sp, #8]
 8013952:	435d      	muls	r5, r3
 8013954:	0feb      	lsrs	r3, r5, #31
 8013956:	195d      	adds	r5, r3, r5
 8013958:	9b01      	ldr	r3, [sp, #4]
 801395a:	106d      	asrs	r5, r5, #1
 801395c:	3301      	adds	r3, #1
 801395e:	181b      	adds	r3, r3, r0
 8013960:	42ab      	cmp	r3, r5
 8013962:	d900      	bls.n	8013966 <__ssputs_r+0x3e>
 8013964:	001d      	movs	r5, r3
 8013966:	0553      	lsls	r3, r2, #21
 8013968:	d532      	bpl.n	80139d0 <__ssputs_r+0xa8>
 801396a:	0029      	movs	r1, r5
 801396c:	0038      	movs	r0, r7
 801396e:	f7ff fb99 	bl	80130a4 <_malloc_r>
 8013972:	1e06      	subs	r6, r0, #0
 8013974:	d109      	bne.n	801398a <__ssputs_r+0x62>
 8013976:	230c      	movs	r3, #12
 8013978:	603b      	str	r3, [r7, #0]
 801397a:	2340      	movs	r3, #64	; 0x40
 801397c:	2001      	movs	r0, #1
 801397e:	89a2      	ldrh	r2, [r4, #12]
 8013980:	4240      	negs	r0, r0
 8013982:	4313      	orrs	r3, r2
 8013984:	81a3      	strh	r3, [r4, #12]
 8013986:	b005      	add	sp, #20
 8013988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801398a:	9a02      	ldr	r2, [sp, #8]
 801398c:	6921      	ldr	r1, [r4, #16]
 801398e:	f000 fcc6 	bl	801431e <memcpy>
 8013992:	89a3      	ldrh	r3, [r4, #12]
 8013994:	4a14      	ldr	r2, [pc, #80]	; (80139e8 <__ssputs_r+0xc0>)
 8013996:	401a      	ands	r2, r3
 8013998:	2380      	movs	r3, #128	; 0x80
 801399a:	4313      	orrs	r3, r2
 801399c:	81a3      	strh	r3, [r4, #12]
 801399e:	9b02      	ldr	r3, [sp, #8]
 80139a0:	6126      	str	r6, [r4, #16]
 80139a2:	18f6      	adds	r6, r6, r3
 80139a4:	6026      	str	r6, [r4, #0]
 80139a6:	6165      	str	r5, [r4, #20]
 80139a8:	9e01      	ldr	r6, [sp, #4]
 80139aa:	1aed      	subs	r5, r5, r3
 80139ac:	60a5      	str	r5, [r4, #8]
 80139ae:	9b01      	ldr	r3, [sp, #4]
 80139b0:	429e      	cmp	r6, r3
 80139b2:	d900      	bls.n	80139b6 <__ssputs_r+0x8e>
 80139b4:	9e01      	ldr	r6, [sp, #4]
 80139b6:	0032      	movs	r2, r6
 80139b8:	9903      	ldr	r1, [sp, #12]
 80139ba:	6820      	ldr	r0, [r4, #0]
 80139bc:	f000 fcb8 	bl	8014330 <memmove>
 80139c0:	68a3      	ldr	r3, [r4, #8]
 80139c2:	2000      	movs	r0, #0
 80139c4:	1b9b      	subs	r3, r3, r6
 80139c6:	60a3      	str	r3, [r4, #8]
 80139c8:	6823      	ldr	r3, [r4, #0]
 80139ca:	199e      	adds	r6, r3, r6
 80139cc:	6026      	str	r6, [r4, #0]
 80139ce:	e7da      	b.n	8013986 <__ssputs_r+0x5e>
 80139d0:	002a      	movs	r2, r5
 80139d2:	0038      	movs	r0, r7
 80139d4:	f000 fcbf 	bl	8014356 <_realloc_r>
 80139d8:	1e06      	subs	r6, r0, #0
 80139da:	d1e0      	bne.n	801399e <__ssputs_r+0x76>
 80139dc:	0038      	movs	r0, r7
 80139de:	6921      	ldr	r1, [r4, #16]
 80139e0:	f7ff fb16 	bl	8013010 <_free_r>
 80139e4:	e7c7      	b.n	8013976 <__ssputs_r+0x4e>
 80139e6:	46c0      	nop			; (mov r8, r8)
 80139e8:	fffffb7f 	.word	0xfffffb7f

080139ec <_svfiprintf_r>:
 80139ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ee:	b0a1      	sub	sp, #132	; 0x84
 80139f0:	9003      	str	r0, [sp, #12]
 80139f2:	001d      	movs	r5, r3
 80139f4:	898b      	ldrh	r3, [r1, #12]
 80139f6:	000f      	movs	r7, r1
 80139f8:	0016      	movs	r6, r2
 80139fa:	061b      	lsls	r3, r3, #24
 80139fc:	d511      	bpl.n	8013a22 <_svfiprintf_r+0x36>
 80139fe:	690b      	ldr	r3, [r1, #16]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10e      	bne.n	8013a22 <_svfiprintf_r+0x36>
 8013a04:	2140      	movs	r1, #64	; 0x40
 8013a06:	f7ff fb4d 	bl	80130a4 <_malloc_r>
 8013a0a:	6038      	str	r0, [r7, #0]
 8013a0c:	6138      	str	r0, [r7, #16]
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d105      	bne.n	8013a1e <_svfiprintf_r+0x32>
 8013a12:	230c      	movs	r3, #12
 8013a14:	9a03      	ldr	r2, [sp, #12]
 8013a16:	3801      	subs	r0, #1
 8013a18:	6013      	str	r3, [r2, #0]
 8013a1a:	b021      	add	sp, #132	; 0x84
 8013a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a1e:	2340      	movs	r3, #64	; 0x40
 8013a20:	617b      	str	r3, [r7, #20]
 8013a22:	2300      	movs	r3, #0
 8013a24:	ac08      	add	r4, sp, #32
 8013a26:	6163      	str	r3, [r4, #20]
 8013a28:	3320      	adds	r3, #32
 8013a2a:	7663      	strb	r3, [r4, #25]
 8013a2c:	3310      	adds	r3, #16
 8013a2e:	76a3      	strb	r3, [r4, #26]
 8013a30:	9507      	str	r5, [sp, #28]
 8013a32:	0035      	movs	r5, r6
 8013a34:	782b      	ldrb	r3, [r5, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d001      	beq.n	8013a3e <_svfiprintf_r+0x52>
 8013a3a:	2b25      	cmp	r3, #37	; 0x25
 8013a3c:	d147      	bne.n	8013ace <_svfiprintf_r+0xe2>
 8013a3e:	1bab      	subs	r3, r5, r6
 8013a40:	9305      	str	r3, [sp, #20]
 8013a42:	42b5      	cmp	r5, r6
 8013a44:	d00c      	beq.n	8013a60 <_svfiprintf_r+0x74>
 8013a46:	0032      	movs	r2, r6
 8013a48:	0039      	movs	r1, r7
 8013a4a:	9803      	ldr	r0, [sp, #12]
 8013a4c:	f7ff ff6c 	bl	8013928 <__ssputs_r>
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	d100      	bne.n	8013a56 <_svfiprintf_r+0x6a>
 8013a54:	e0ae      	b.n	8013bb4 <_svfiprintf_r+0x1c8>
 8013a56:	6962      	ldr	r2, [r4, #20]
 8013a58:	9b05      	ldr	r3, [sp, #20]
 8013a5a:	4694      	mov	ip, r2
 8013a5c:	4463      	add	r3, ip
 8013a5e:	6163      	str	r3, [r4, #20]
 8013a60:	782b      	ldrb	r3, [r5, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d100      	bne.n	8013a68 <_svfiprintf_r+0x7c>
 8013a66:	e0a5      	b.n	8013bb4 <_svfiprintf_r+0x1c8>
 8013a68:	2201      	movs	r2, #1
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	4252      	negs	r2, r2
 8013a6e:	6062      	str	r2, [r4, #4]
 8013a70:	a904      	add	r1, sp, #16
 8013a72:	3254      	adds	r2, #84	; 0x54
 8013a74:	1852      	adds	r2, r2, r1
 8013a76:	1c6e      	adds	r6, r5, #1
 8013a78:	6023      	str	r3, [r4, #0]
 8013a7a:	60e3      	str	r3, [r4, #12]
 8013a7c:	60a3      	str	r3, [r4, #8]
 8013a7e:	7013      	strb	r3, [r2, #0]
 8013a80:	65a3      	str	r3, [r4, #88]	; 0x58
 8013a82:	2205      	movs	r2, #5
 8013a84:	7831      	ldrb	r1, [r6, #0]
 8013a86:	4854      	ldr	r0, [pc, #336]	; (8013bd8 <_svfiprintf_r+0x1ec>)
 8013a88:	f000 fc3e 	bl	8014308 <memchr>
 8013a8c:	1c75      	adds	r5, r6, #1
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d11f      	bne.n	8013ad2 <_svfiprintf_r+0xe6>
 8013a92:	6822      	ldr	r2, [r4, #0]
 8013a94:	06d3      	lsls	r3, r2, #27
 8013a96:	d504      	bpl.n	8013aa2 <_svfiprintf_r+0xb6>
 8013a98:	2353      	movs	r3, #83	; 0x53
 8013a9a:	a904      	add	r1, sp, #16
 8013a9c:	185b      	adds	r3, r3, r1
 8013a9e:	2120      	movs	r1, #32
 8013aa0:	7019      	strb	r1, [r3, #0]
 8013aa2:	0713      	lsls	r3, r2, #28
 8013aa4:	d504      	bpl.n	8013ab0 <_svfiprintf_r+0xc4>
 8013aa6:	2353      	movs	r3, #83	; 0x53
 8013aa8:	a904      	add	r1, sp, #16
 8013aaa:	185b      	adds	r3, r3, r1
 8013aac:	212b      	movs	r1, #43	; 0x2b
 8013aae:	7019      	strb	r1, [r3, #0]
 8013ab0:	7833      	ldrb	r3, [r6, #0]
 8013ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ab4:	d016      	beq.n	8013ae4 <_svfiprintf_r+0xf8>
 8013ab6:	0035      	movs	r5, r6
 8013ab8:	2100      	movs	r1, #0
 8013aba:	200a      	movs	r0, #10
 8013abc:	68e3      	ldr	r3, [r4, #12]
 8013abe:	782a      	ldrb	r2, [r5, #0]
 8013ac0:	1c6e      	adds	r6, r5, #1
 8013ac2:	3a30      	subs	r2, #48	; 0x30
 8013ac4:	2a09      	cmp	r2, #9
 8013ac6:	d94e      	bls.n	8013b66 <_svfiprintf_r+0x17a>
 8013ac8:	2900      	cmp	r1, #0
 8013aca:	d111      	bne.n	8013af0 <_svfiprintf_r+0x104>
 8013acc:	e017      	b.n	8013afe <_svfiprintf_r+0x112>
 8013ace:	3501      	adds	r5, #1
 8013ad0:	e7b0      	b.n	8013a34 <_svfiprintf_r+0x48>
 8013ad2:	4b41      	ldr	r3, [pc, #260]	; (8013bd8 <_svfiprintf_r+0x1ec>)
 8013ad4:	6822      	ldr	r2, [r4, #0]
 8013ad6:	1ac0      	subs	r0, r0, r3
 8013ad8:	2301      	movs	r3, #1
 8013ada:	4083      	lsls	r3, r0
 8013adc:	4313      	orrs	r3, r2
 8013ade:	002e      	movs	r6, r5
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	e7ce      	b.n	8013a82 <_svfiprintf_r+0x96>
 8013ae4:	9b07      	ldr	r3, [sp, #28]
 8013ae6:	1d19      	adds	r1, r3, #4
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	9107      	str	r1, [sp, #28]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	db01      	blt.n	8013af4 <_svfiprintf_r+0x108>
 8013af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013af2:	e004      	b.n	8013afe <_svfiprintf_r+0x112>
 8013af4:	425b      	negs	r3, r3
 8013af6:	60e3      	str	r3, [r4, #12]
 8013af8:	2302      	movs	r3, #2
 8013afa:	4313      	orrs	r3, r2
 8013afc:	6023      	str	r3, [r4, #0]
 8013afe:	782b      	ldrb	r3, [r5, #0]
 8013b00:	2b2e      	cmp	r3, #46	; 0x2e
 8013b02:	d10a      	bne.n	8013b1a <_svfiprintf_r+0x12e>
 8013b04:	786b      	ldrb	r3, [r5, #1]
 8013b06:	2b2a      	cmp	r3, #42	; 0x2a
 8013b08:	d135      	bne.n	8013b76 <_svfiprintf_r+0x18a>
 8013b0a:	9b07      	ldr	r3, [sp, #28]
 8013b0c:	3502      	adds	r5, #2
 8013b0e:	1d1a      	adds	r2, r3, #4
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	9207      	str	r2, [sp, #28]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	db2b      	blt.n	8013b70 <_svfiprintf_r+0x184>
 8013b18:	9309      	str	r3, [sp, #36]	; 0x24
 8013b1a:	4e30      	ldr	r6, [pc, #192]	; (8013bdc <_svfiprintf_r+0x1f0>)
 8013b1c:	2203      	movs	r2, #3
 8013b1e:	0030      	movs	r0, r6
 8013b20:	7829      	ldrb	r1, [r5, #0]
 8013b22:	f000 fbf1 	bl	8014308 <memchr>
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d006      	beq.n	8013b38 <_svfiprintf_r+0x14c>
 8013b2a:	2340      	movs	r3, #64	; 0x40
 8013b2c:	1b80      	subs	r0, r0, r6
 8013b2e:	4083      	lsls	r3, r0
 8013b30:	6822      	ldr	r2, [r4, #0]
 8013b32:	3501      	adds	r5, #1
 8013b34:	4313      	orrs	r3, r2
 8013b36:	6023      	str	r3, [r4, #0]
 8013b38:	7829      	ldrb	r1, [r5, #0]
 8013b3a:	2206      	movs	r2, #6
 8013b3c:	4828      	ldr	r0, [pc, #160]	; (8013be0 <_svfiprintf_r+0x1f4>)
 8013b3e:	1c6e      	adds	r6, r5, #1
 8013b40:	7621      	strb	r1, [r4, #24]
 8013b42:	f000 fbe1 	bl	8014308 <memchr>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d03c      	beq.n	8013bc4 <_svfiprintf_r+0x1d8>
 8013b4a:	4b26      	ldr	r3, [pc, #152]	; (8013be4 <_svfiprintf_r+0x1f8>)
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d125      	bne.n	8013b9c <_svfiprintf_r+0x1b0>
 8013b50:	2207      	movs	r2, #7
 8013b52:	9b07      	ldr	r3, [sp, #28]
 8013b54:	3307      	adds	r3, #7
 8013b56:	4393      	bics	r3, r2
 8013b58:	3308      	adds	r3, #8
 8013b5a:	9307      	str	r3, [sp, #28]
 8013b5c:	6963      	ldr	r3, [r4, #20]
 8013b5e:	9a04      	ldr	r2, [sp, #16]
 8013b60:	189b      	adds	r3, r3, r2
 8013b62:	6163      	str	r3, [r4, #20]
 8013b64:	e765      	b.n	8013a32 <_svfiprintf_r+0x46>
 8013b66:	4343      	muls	r3, r0
 8013b68:	0035      	movs	r5, r6
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	189b      	adds	r3, r3, r2
 8013b6e:	e7a6      	b.n	8013abe <_svfiprintf_r+0xd2>
 8013b70:	2301      	movs	r3, #1
 8013b72:	425b      	negs	r3, r3
 8013b74:	e7d0      	b.n	8013b18 <_svfiprintf_r+0x12c>
 8013b76:	2300      	movs	r3, #0
 8013b78:	200a      	movs	r0, #10
 8013b7a:	001a      	movs	r2, r3
 8013b7c:	3501      	adds	r5, #1
 8013b7e:	6063      	str	r3, [r4, #4]
 8013b80:	7829      	ldrb	r1, [r5, #0]
 8013b82:	1c6e      	adds	r6, r5, #1
 8013b84:	3930      	subs	r1, #48	; 0x30
 8013b86:	2909      	cmp	r1, #9
 8013b88:	d903      	bls.n	8013b92 <_svfiprintf_r+0x1a6>
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d0c5      	beq.n	8013b1a <_svfiprintf_r+0x12e>
 8013b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8013b90:	e7c3      	b.n	8013b1a <_svfiprintf_r+0x12e>
 8013b92:	4342      	muls	r2, r0
 8013b94:	0035      	movs	r5, r6
 8013b96:	2301      	movs	r3, #1
 8013b98:	1852      	adds	r2, r2, r1
 8013b9a:	e7f1      	b.n	8013b80 <_svfiprintf_r+0x194>
 8013b9c:	ab07      	add	r3, sp, #28
 8013b9e:	9300      	str	r3, [sp, #0]
 8013ba0:	003a      	movs	r2, r7
 8013ba2:	0021      	movs	r1, r4
 8013ba4:	4b10      	ldr	r3, [pc, #64]	; (8013be8 <_svfiprintf_r+0x1fc>)
 8013ba6:	9803      	ldr	r0, [sp, #12]
 8013ba8:	e000      	b.n	8013bac <_svfiprintf_r+0x1c0>
 8013baa:	bf00      	nop
 8013bac:	9004      	str	r0, [sp, #16]
 8013bae:	9b04      	ldr	r3, [sp, #16]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	d1d3      	bne.n	8013b5c <_svfiprintf_r+0x170>
 8013bb4:	89bb      	ldrh	r3, [r7, #12]
 8013bb6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013bb8:	065b      	lsls	r3, r3, #25
 8013bba:	d400      	bmi.n	8013bbe <_svfiprintf_r+0x1d2>
 8013bbc:	e72d      	b.n	8013a1a <_svfiprintf_r+0x2e>
 8013bbe:	2001      	movs	r0, #1
 8013bc0:	4240      	negs	r0, r0
 8013bc2:	e72a      	b.n	8013a1a <_svfiprintf_r+0x2e>
 8013bc4:	ab07      	add	r3, sp, #28
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	003a      	movs	r2, r7
 8013bca:	0021      	movs	r1, r4
 8013bcc:	4b06      	ldr	r3, [pc, #24]	; (8013be8 <_svfiprintf_r+0x1fc>)
 8013bce:	9803      	ldr	r0, [sp, #12]
 8013bd0:	f000 f9de 	bl	8013f90 <_printf_i>
 8013bd4:	e7ea      	b.n	8013bac <_svfiprintf_r+0x1c0>
 8013bd6:	46c0      	nop			; (mov r8, r8)
 8013bd8:	0801860c 	.word	0x0801860c
 8013bdc:	08018612 	.word	0x08018612
 8013be0:	08018616 	.word	0x08018616
 8013be4:	00000000 	.word	0x00000000
 8013be8:	08013929 	.word	0x08013929

08013bec <__sfputc_r>:
 8013bec:	6893      	ldr	r3, [r2, #8]
 8013bee:	b510      	push	{r4, lr}
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	6093      	str	r3, [r2, #8]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	da04      	bge.n	8013c02 <__sfputc_r+0x16>
 8013bf8:	6994      	ldr	r4, [r2, #24]
 8013bfa:	42a3      	cmp	r3, r4
 8013bfc:	db07      	blt.n	8013c0e <__sfputc_r+0x22>
 8013bfe:	290a      	cmp	r1, #10
 8013c00:	d005      	beq.n	8013c0e <__sfputc_r+0x22>
 8013c02:	6813      	ldr	r3, [r2, #0]
 8013c04:	1c58      	adds	r0, r3, #1
 8013c06:	6010      	str	r0, [r2, #0]
 8013c08:	7019      	strb	r1, [r3, #0]
 8013c0a:	0008      	movs	r0, r1
 8013c0c:	bd10      	pop	{r4, pc}
 8013c0e:	f7ff fb6f 	bl	80132f0 <__swbuf_r>
 8013c12:	0001      	movs	r1, r0
 8013c14:	e7f9      	b.n	8013c0a <__sfputc_r+0x1e>

08013c16 <__sfputs_r>:
 8013c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c18:	0006      	movs	r6, r0
 8013c1a:	000f      	movs	r7, r1
 8013c1c:	0014      	movs	r4, r2
 8013c1e:	18d5      	adds	r5, r2, r3
 8013c20:	42ac      	cmp	r4, r5
 8013c22:	d101      	bne.n	8013c28 <__sfputs_r+0x12>
 8013c24:	2000      	movs	r0, #0
 8013c26:	e007      	b.n	8013c38 <__sfputs_r+0x22>
 8013c28:	7821      	ldrb	r1, [r4, #0]
 8013c2a:	003a      	movs	r2, r7
 8013c2c:	0030      	movs	r0, r6
 8013c2e:	f7ff ffdd 	bl	8013bec <__sfputc_r>
 8013c32:	3401      	adds	r4, #1
 8013c34:	1c43      	adds	r3, r0, #1
 8013c36:	d1f3      	bne.n	8013c20 <__sfputs_r+0xa>
 8013c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c3c <_vfiprintf_r>:
 8013c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c3e:	b0a1      	sub	sp, #132	; 0x84
 8013c40:	0006      	movs	r6, r0
 8013c42:	000c      	movs	r4, r1
 8013c44:	001f      	movs	r7, r3
 8013c46:	9203      	str	r2, [sp, #12]
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d004      	beq.n	8013c56 <_vfiprintf_r+0x1a>
 8013c4c:	6983      	ldr	r3, [r0, #24]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d101      	bne.n	8013c56 <_vfiprintf_r+0x1a>
 8013c52:	f7ff fd49 	bl	80136e8 <__sinit>
 8013c56:	4b8e      	ldr	r3, [pc, #568]	; (8013e90 <_vfiprintf_r+0x254>)
 8013c58:	429c      	cmp	r4, r3
 8013c5a:	d11c      	bne.n	8013c96 <_vfiprintf_r+0x5a>
 8013c5c:	6874      	ldr	r4, [r6, #4]
 8013c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c60:	07db      	lsls	r3, r3, #31
 8013c62:	d405      	bmi.n	8013c70 <_vfiprintf_r+0x34>
 8013c64:	89a3      	ldrh	r3, [r4, #12]
 8013c66:	059b      	lsls	r3, r3, #22
 8013c68:	d402      	bmi.n	8013c70 <_vfiprintf_r+0x34>
 8013c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c6c:	f7ff fddd 	bl	801382a <__retarget_lock_acquire_recursive>
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	071b      	lsls	r3, r3, #28
 8013c74:	d502      	bpl.n	8013c7c <_vfiprintf_r+0x40>
 8013c76:	6923      	ldr	r3, [r4, #16]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d11d      	bne.n	8013cb8 <_vfiprintf_r+0x7c>
 8013c7c:	0021      	movs	r1, r4
 8013c7e:	0030      	movs	r0, r6
 8013c80:	f7ff fb8c 	bl	801339c <__swsetup_r>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d017      	beq.n	8013cb8 <_vfiprintf_r+0x7c>
 8013c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c8a:	07db      	lsls	r3, r3, #31
 8013c8c:	d50d      	bpl.n	8013caa <_vfiprintf_r+0x6e>
 8013c8e:	2001      	movs	r0, #1
 8013c90:	4240      	negs	r0, r0
 8013c92:	b021      	add	sp, #132	; 0x84
 8013c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c96:	4b7f      	ldr	r3, [pc, #508]	; (8013e94 <_vfiprintf_r+0x258>)
 8013c98:	429c      	cmp	r4, r3
 8013c9a:	d101      	bne.n	8013ca0 <_vfiprintf_r+0x64>
 8013c9c:	68b4      	ldr	r4, [r6, #8]
 8013c9e:	e7de      	b.n	8013c5e <_vfiprintf_r+0x22>
 8013ca0:	4b7d      	ldr	r3, [pc, #500]	; (8013e98 <_vfiprintf_r+0x25c>)
 8013ca2:	429c      	cmp	r4, r3
 8013ca4:	d1db      	bne.n	8013c5e <_vfiprintf_r+0x22>
 8013ca6:	68f4      	ldr	r4, [r6, #12]
 8013ca8:	e7d9      	b.n	8013c5e <_vfiprintf_r+0x22>
 8013caa:	89a3      	ldrh	r3, [r4, #12]
 8013cac:	059b      	lsls	r3, r3, #22
 8013cae:	d4ee      	bmi.n	8013c8e <_vfiprintf_r+0x52>
 8013cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cb2:	f7ff fdbb 	bl	801382c <__retarget_lock_release_recursive>
 8013cb6:	e7ea      	b.n	8013c8e <_vfiprintf_r+0x52>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	ad08      	add	r5, sp, #32
 8013cbc:	616b      	str	r3, [r5, #20]
 8013cbe:	3320      	adds	r3, #32
 8013cc0:	766b      	strb	r3, [r5, #25]
 8013cc2:	3310      	adds	r3, #16
 8013cc4:	76ab      	strb	r3, [r5, #26]
 8013cc6:	9707      	str	r7, [sp, #28]
 8013cc8:	9f03      	ldr	r7, [sp, #12]
 8013cca:	783b      	ldrb	r3, [r7, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <_vfiprintf_r+0x98>
 8013cd0:	2b25      	cmp	r3, #37	; 0x25
 8013cd2:	d14e      	bne.n	8013d72 <_vfiprintf_r+0x136>
 8013cd4:	9b03      	ldr	r3, [sp, #12]
 8013cd6:	1afb      	subs	r3, r7, r3
 8013cd8:	9305      	str	r3, [sp, #20]
 8013cda:	9b03      	ldr	r3, [sp, #12]
 8013cdc:	429f      	cmp	r7, r3
 8013cde:	d00d      	beq.n	8013cfc <_vfiprintf_r+0xc0>
 8013ce0:	9b05      	ldr	r3, [sp, #20]
 8013ce2:	0021      	movs	r1, r4
 8013ce4:	0030      	movs	r0, r6
 8013ce6:	9a03      	ldr	r2, [sp, #12]
 8013ce8:	f7ff ff95 	bl	8013c16 <__sfputs_r>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d100      	bne.n	8013cf2 <_vfiprintf_r+0xb6>
 8013cf0:	e0b5      	b.n	8013e5e <_vfiprintf_r+0x222>
 8013cf2:	696a      	ldr	r2, [r5, #20]
 8013cf4:	9b05      	ldr	r3, [sp, #20]
 8013cf6:	4694      	mov	ip, r2
 8013cf8:	4463      	add	r3, ip
 8013cfa:	616b      	str	r3, [r5, #20]
 8013cfc:	783b      	ldrb	r3, [r7, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d100      	bne.n	8013d04 <_vfiprintf_r+0xc8>
 8013d02:	e0ac      	b.n	8013e5e <_vfiprintf_r+0x222>
 8013d04:	2201      	movs	r2, #1
 8013d06:	1c7b      	adds	r3, r7, #1
 8013d08:	9303      	str	r3, [sp, #12]
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	4252      	negs	r2, r2
 8013d0e:	606a      	str	r2, [r5, #4]
 8013d10:	a904      	add	r1, sp, #16
 8013d12:	3254      	adds	r2, #84	; 0x54
 8013d14:	1852      	adds	r2, r2, r1
 8013d16:	602b      	str	r3, [r5, #0]
 8013d18:	60eb      	str	r3, [r5, #12]
 8013d1a:	60ab      	str	r3, [r5, #8]
 8013d1c:	7013      	strb	r3, [r2, #0]
 8013d1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8013d20:	9b03      	ldr	r3, [sp, #12]
 8013d22:	2205      	movs	r2, #5
 8013d24:	7819      	ldrb	r1, [r3, #0]
 8013d26:	485d      	ldr	r0, [pc, #372]	; (8013e9c <_vfiprintf_r+0x260>)
 8013d28:	f000 faee 	bl	8014308 <memchr>
 8013d2c:	9b03      	ldr	r3, [sp, #12]
 8013d2e:	1c5f      	adds	r7, r3, #1
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d120      	bne.n	8013d76 <_vfiprintf_r+0x13a>
 8013d34:	682a      	ldr	r2, [r5, #0]
 8013d36:	06d3      	lsls	r3, r2, #27
 8013d38:	d504      	bpl.n	8013d44 <_vfiprintf_r+0x108>
 8013d3a:	2353      	movs	r3, #83	; 0x53
 8013d3c:	a904      	add	r1, sp, #16
 8013d3e:	185b      	adds	r3, r3, r1
 8013d40:	2120      	movs	r1, #32
 8013d42:	7019      	strb	r1, [r3, #0]
 8013d44:	0713      	lsls	r3, r2, #28
 8013d46:	d504      	bpl.n	8013d52 <_vfiprintf_r+0x116>
 8013d48:	2353      	movs	r3, #83	; 0x53
 8013d4a:	a904      	add	r1, sp, #16
 8013d4c:	185b      	adds	r3, r3, r1
 8013d4e:	212b      	movs	r1, #43	; 0x2b
 8013d50:	7019      	strb	r1, [r3, #0]
 8013d52:	9b03      	ldr	r3, [sp, #12]
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	2b2a      	cmp	r3, #42	; 0x2a
 8013d58:	d016      	beq.n	8013d88 <_vfiprintf_r+0x14c>
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	68eb      	ldr	r3, [r5, #12]
 8013d5e:	9f03      	ldr	r7, [sp, #12]
 8013d60:	783a      	ldrb	r2, [r7, #0]
 8013d62:	1c78      	adds	r0, r7, #1
 8013d64:	3a30      	subs	r2, #48	; 0x30
 8013d66:	4684      	mov	ip, r0
 8013d68:	2a09      	cmp	r2, #9
 8013d6a:	d94f      	bls.n	8013e0c <_vfiprintf_r+0x1d0>
 8013d6c:	2900      	cmp	r1, #0
 8013d6e:	d111      	bne.n	8013d94 <_vfiprintf_r+0x158>
 8013d70:	e017      	b.n	8013da2 <_vfiprintf_r+0x166>
 8013d72:	3701      	adds	r7, #1
 8013d74:	e7a9      	b.n	8013cca <_vfiprintf_r+0x8e>
 8013d76:	4b49      	ldr	r3, [pc, #292]	; (8013e9c <_vfiprintf_r+0x260>)
 8013d78:	682a      	ldr	r2, [r5, #0]
 8013d7a:	1ac0      	subs	r0, r0, r3
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	4083      	lsls	r3, r0
 8013d80:	4313      	orrs	r3, r2
 8013d82:	602b      	str	r3, [r5, #0]
 8013d84:	9703      	str	r7, [sp, #12]
 8013d86:	e7cb      	b.n	8013d20 <_vfiprintf_r+0xe4>
 8013d88:	9b07      	ldr	r3, [sp, #28]
 8013d8a:	1d19      	adds	r1, r3, #4
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	9107      	str	r1, [sp, #28]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	db01      	blt.n	8013d98 <_vfiprintf_r+0x15c>
 8013d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d96:	e004      	b.n	8013da2 <_vfiprintf_r+0x166>
 8013d98:	425b      	negs	r3, r3
 8013d9a:	60eb      	str	r3, [r5, #12]
 8013d9c:	2302      	movs	r3, #2
 8013d9e:	4313      	orrs	r3, r2
 8013da0:	602b      	str	r3, [r5, #0]
 8013da2:	783b      	ldrb	r3, [r7, #0]
 8013da4:	2b2e      	cmp	r3, #46	; 0x2e
 8013da6:	d10a      	bne.n	8013dbe <_vfiprintf_r+0x182>
 8013da8:	787b      	ldrb	r3, [r7, #1]
 8013daa:	2b2a      	cmp	r3, #42	; 0x2a
 8013dac:	d137      	bne.n	8013e1e <_vfiprintf_r+0x1e2>
 8013dae:	9b07      	ldr	r3, [sp, #28]
 8013db0:	3702      	adds	r7, #2
 8013db2:	1d1a      	adds	r2, r3, #4
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	9207      	str	r2, [sp, #28]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	db2d      	blt.n	8013e18 <_vfiprintf_r+0x1dc>
 8013dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dbe:	2203      	movs	r2, #3
 8013dc0:	7839      	ldrb	r1, [r7, #0]
 8013dc2:	4837      	ldr	r0, [pc, #220]	; (8013ea0 <_vfiprintf_r+0x264>)
 8013dc4:	f000 faa0 	bl	8014308 <memchr>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d007      	beq.n	8013ddc <_vfiprintf_r+0x1a0>
 8013dcc:	4b34      	ldr	r3, [pc, #208]	; (8013ea0 <_vfiprintf_r+0x264>)
 8013dce:	682a      	ldr	r2, [r5, #0]
 8013dd0:	1ac0      	subs	r0, r0, r3
 8013dd2:	2340      	movs	r3, #64	; 0x40
 8013dd4:	4083      	lsls	r3, r0
 8013dd6:	4313      	orrs	r3, r2
 8013dd8:	3701      	adds	r7, #1
 8013dda:	602b      	str	r3, [r5, #0]
 8013ddc:	7839      	ldrb	r1, [r7, #0]
 8013dde:	1c7b      	adds	r3, r7, #1
 8013de0:	2206      	movs	r2, #6
 8013de2:	4830      	ldr	r0, [pc, #192]	; (8013ea4 <_vfiprintf_r+0x268>)
 8013de4:	9303      	str	r3, [sp, #12]
 8013de6:	7629      	strb	r1, [r5, #24]
 8013de8:	f000 fa8e 	bl	8014308 <memchr>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d045      	beq.n	8013e7c <_vfiprintf_r+0x240>
 8013df0:	4b2d      	ldr	r3, [pc, #180]	; (8013ea8 <_vfiprintf_r+0x26c>)
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d127      	bne.n	8013e46 <_vfiprintf_r+0x20a>
 8013df6:	2207      	movs	r2, #7
 8013df8:	9b07      	ldr	r3, [sp, #28]
 8013dfa:	3307      	adds	r3, #7
 8013dfc:	4393      	bics	r3, r2
 8013dfe:	3308      	adds	r3, #8
 8013e00:	9307      	str	r3, [sp, #28]
 8013e02:	696b      	ldr	r3, [r5, #20]
 8013e04:	9a04      	ldr	r2, [sp, #16]
 8013e06:	189b      	adds	r3, r3, r2
 8013e08:	616b      	str	r3, [r5, #20]
 8013e0a:	e75d      	b.n	8013cc8 <_vfiprintf_r+0x8c>
 8013e0c:	210a      	movs	r1, #10
 8013e0e:	434b      	muls	r3, r1
 8013e10:	4667      	mov	r7, ip
 8013e12:	189b      	adds	r3, r3, r2
 8013e14:	3909      	subs	r1, #9
 8013e16:	e7a3      	b.n	8013d60 <_vfiprintf_r+0x124>
 8013e18:	2301      	movs	r3, #1
 8013e1a:	425b      	negs	r3, r3
 8013e1c:	e7ce      	b.n	8013dbc <_vfiprintf_r+0x180>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	001a      	movs	r2, r3
 8013e22:	3701      	adds	r7, #1
 8013e24:	606b      	str	r3, [r5, #4]
 8013e26:	7839      	ldrb	r1, [r7, #0]
 8013e28:	1c78      	adds	r0, r7, #1
 8013e2a:	3930      	subs	r1, #48	; 0x30
 8013e2c:	4684      	mov	ip, r0
 8013e2e:	2909      	cmp	r1, #9
 8013e30:	d903      	bls.n	8013e3a <_vfiprintf_r+0x1fe>
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d0c3      	beq.n	8013dbe <_vfiprintf_r+0x182>
 8013e36:	9209      	str	r2, [sp, #36]	; 0x24
 8013e38:	e7c1      	b.n	8013dbe <_vfiprintf_r+0x182>
 8013e3a:	230a      	movs	r3, #10
 8013e3c:	435a      	muls	r2, r3
 8013e3e:	4667      	mov	r7, ip
 8013e40:	1852      	adds	r2, r2, r1
 8013e42:	3b09      	subs	r3, #9
 8013e44:	e7ef      	b.n	8013e26 <_vfiprintf_r+0x1ea>
 8013e46:	ab07      	add	r3, sp, #28
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	0022      	movs	r2, r4
 8013e4c:	0029      	movs	r1, r5
 8013e4e:	0030      	movs	r0, r6
 8013e50:	4b16      	ldr	r3, [pc, #88]	; (8013eac <_vfiprintf_r+0x270>)
 8013e52:	e000      	b.n	8013e56 <_vfiprintf_r+0x21a>
 8013e54:	bf00      	nop
 8013e56:	9004      	str	r0, [sp, #16]
 8013e58:	9b04      	ldr	r3, [sp, #16]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	d1d1      	bne.n	8013e02 <_vfiprintf_r+0x1c6>
 8013e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e60:	07db      	lsls	r3, r3, #31
 8013e62:	d405      	bmi.n	8013e70 <_vfiprintf_r+0x234>
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	059b      	lsls	r3, r3, #22
 8013e68:	d402      	bmi.n	8013e70 <_vfiprintf_r+0x234>
 8013e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e6c:	f7ff fcde 	bl	801382c <__retarget_lock_release_recursive>
 8013e70:	89a3      	ldrh	r3, [r4, #12]
 8013e72:	065b      	lsls	r3, r3, #25
 8013e74:	d500      	bpl.n	8013e78 <_vfiprintf_r+0x23c>
 8013e76:	e70a      	b.n	8013c8e <_vfiprintf_r+0x52>
 8013e78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013e7a:	e70a      	b.n	8013c92 <_vfiprintf_r+0x56>
 8013e7c:	ab07      	add	r3, sp, #28
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	0022      	movs	r2, r4
 8013e82:	0029      	movs	r1, r5
 8013e84:	0030      	movs	r0, r6
 8013e86:	4b09      	ldr	r3, [pc, #36]	; (8013eac <_vfiprintf_r+0x270>)
 8013e88:	f000 f882 	bl	8013f90 <_printf_i>
 8013e8c:	e7e3      	b.n	8013e56 <_vfiprintf_r+0x21a>
 8013e8e:	46c0      	nop			; (mov r8, r8)
 8013e90:	080185cc 	.word	0x080185cc
 8013e94:	080185ec 	.word	0x080185ec
 8013e98:	080185ac 	.word	0x080185ac
 8013e9c:	0801860c 	.word	0x0801860c
 8013ea0:	08018612 	.word	0x08018612
 8013ea4:	08018616 	.word	0x08018616
 8013ea8:	00000000 	.word	0x00000000
 8013eac:	08013c17 	.word	0x08013c17

08013eb0 <_printf_common>:
 8013eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eb2:	0015      	movs	r5, r2
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	688a      	ldr	r2, [r1, #8]
 8013eb8:	690b      	ldr	r3, [r1, #16]
 8013eba:	000c      	movs	r4, r1
 8013ebc:	9000      	str	r0, [sp, #0]
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	da00      	bge.n	8013ec4 <_printf_common+0x14>
 8013ec2:	0013      	movs	r3, r2
 8013ec4:	0022      	movs	r2, r4
 8013ec6:	602b      	str	r3, [r5, #0]
 8013ec8:	3243      	adds	r2, #67	; 0x43
 8013eca:	7812      	ldrb	r2, [r2, #0]
 8013ecc:	2a00      	cmp	r2, #0
 8013ece:	d001      	beq.n	8013ed4 <_printf_common+0x24>
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	602b      	str	r3, [r5, #0]
 8013ed4:	6823      	ldr	r3, [r4, #0]
 8013ed6:	069b      	lsls	r3, r3, #26
 8013ed8:	d502      	bpl.n	8013ee0 <_printf_common+0x30>
 8013eda:	682b      	ldr	r3, [r5, #0]
 8013edc:	3302      	adds	r3, #2
 8013ede:	602b      	str	r3, [r5, #0]
 8013ee0:	6822      	ldr	r2, [r4, #0]
 8013ee2:	2306      	movs	r3, #6
 8013ee4:	0017      	movs	r7, r2
 8013ee6:	401f      	ands	r7, r3
 8013ee8:	421a      	tst	r2, r3
 8013eea:	d027      	beq.n	8013f3c <_printf_common+0x8c>
 8013eec:	0023      	movs	r3, r4
 8013eee:	3343      	adds	r3, #67	; 0x43
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	1e5a      	subs	r2, r3, #1
 8013ef4:	4193      	sbcs	r3, r2
 8013ef6:	6822      	ldr	r2, [r4, #0]
 8013ef8:	0692      	lsls	r2, r2, #26
 8013efa:	d430      	bmi.n	8013f5e <_printf_common+0xae>
 8013efc:	0022      	movs	r2, r4
 8013efe:	9901      	ldr	r1, [sp, #4]
 8013f00:	9800      	ldr	r0, [sp, #0]
 8013f02:	9e08      	ldr	r6, [sp, #32]
 8013f04:	3243      	adds	r2, #67	; 0x43
 8013f06:	47b0      	blx	r6
 8013f08:	1c43      	adds	r3, r0, #1
 8013f0a:	d025      	beq.n	8013f58 <_printf_common+0xa8>
 8013f0c:	2306      	movs	r3, #6
 8013f0e:	6820      	ldr	r0, [r4, #0]
 8013f10:	682a      	ldr	r2, [r5, #0]
 8013f12:	68e1      	ldr	r1, [r4, #12]
 8013f14:	2500      	movs	r5, #0
 8013f16:	4003      	ands	r3, r0
 8013f18:	2b04      	cmp	r3, #4
 8013f1a:	d103      	bne.n	8013f24 <_printf_common+0x74>
 8013f1c:	1a8d      	subs	r5, r1, r2
 8013f1e:	43eb      	mvns	r3, r5
 8013f20:	17db      	asrs	r3, r3, #31
 8013f22:	401d      	ands	r5, r3
 8013f24:	68a3      	ldr	r3, [r4, #8]
 8013f26:	6922      	ldr	r2, [r4, #16]
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	dd01      	ble.n	8013f30 <_printf_common+0x80>
 8013f2c:	1a9b      	subs	r3, r3, r2
 8013f2e:	18ed      	adds	r5, r5, r3
 8013f30:	2700      	movs	r7, #0
 8013f32:	42bd      	cmp	r5, r7
 8013f34:	d120      	bne.n	8013f78 <_printf_common+0xc8>
 8013f36:	2000      	movs	r0, #0
 8013f38:	e010      	b.n	8013f5c <_printf_common+0xac>
 8013f3a:	3701      	adds	r7, #1
 8013f3c:	68e3      	ldr	r3, [r4, #12]
 8013f3e:	682a      	ldr	r2, [r5, #0]
 8013f40:	1a9b      	subs	r3, r3, r2
 8013f42:	42bb      	cmp	r3, r7
 8013f44:	ddd2      	ble.n	8013eec <_printf_common+0x3c>
 8013f46:	0022      	movs	r2, r4
 8013f48:	2301      	movs	r3, #1
 8013f4a:	9901      	ldr	r1, [sp, #4]
 8013f4c:	9800      	ldr	r0, [sp, #0]
 8013f4e:	9e08      	ldr	r6, [sp, #32]
 8013f50:	3219      	adds	r2, #25
 8013f52:	47b0      	blx	r6
 8013f54:	1c43      	adds	r3, r0, #1
 8013f56:	d1f0      	bne.n	8013f3a <_printf_common+0x8a>
 8013f58:	2001      	movs	r0, #1
 8013f5a:	4240      	negs	r0, r0
 8013f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f5e:	2030      	movs	r0, #48	; 0x30
 8013f60:	18e1      	adds	r1, r4, r3
 8013f62:	3143      	adds	r1, #67	; 0x43
 8013f64:	7008      	strb	r0, [r1, #0]
 8013f66:	0021      	movs	r1, r4
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	3145      	adds	r1, #69	; 0x45
 8013f6c:	7809      	ldrb	r1, [r1, #0]
 8013f6e:	18a2      	adds	r2, r4, r2
 8013f70:	3243      	adds	r2, #67	; 0x43
 8013f72:	3302      	adds	r3, #2
 8013f74:	7011      	strb	r1, [r2, #0]
 8013f76:	e7c1      	b.n	8013efc <_printf_common+0x4c>
 8013f78:	0022      	movs	r2, r4
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	9901      	ldr	r1, [sp, #4]
 8013f7e:	9800      	ldr	r0, [sp, #0]
 8013f80:	9e08      	ldr	r6, [sp, #32]
 8013f82:	321a      	adds	r2, #26
 8013f84:	47b0      	blx	r6
 8013f86:	1c43      	adds	r3, r0, #1
 8013f88:	d0e6      	beq.n	8013f58 <_printf_common+0xa8>
 8013f8a:	3701      	adds	r7, #1
 8013f8c:	e7d1      	b.n	8013f32 <_printf_common+0x82>
	...

08013f90 <_printf_i>:
 8013f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f92:	b08b      	sub	sp, #44	; 0x2c
 8013f94:	9206      	str	r2, [sp, #24]
 8013f96:	000a      	movs	r2, r1
 8013f98:	3243      	adds	r2, #67	; 0x43
 8013f9a:	9307      	str	r3, [sp, #28]
 8013f9c:	9005      	str	r0, [sp, #20]
 8013f9e:	9204      	str	r2, [sp, #16]
 8013fa0:	7e0a      	ldrb	r2, [r1, #24]
 8013fa2:	000c      	movs	r4, r1
 8013fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fa6:	2a78      	cmp	r2, #120	; 0x78
 8013fa8:	d806      	bhi.n	8013fb8 <_printf_i+0x28>
 8013faa:	2a62      	cmp	r2, #98	; 0x62
 8013fac:	d808      	bhi.n	8013fc0 <_printf_i+0x30>
 8013fae:	2a00      	cmp	r2, #0
 8013fb0:	d100      	bne.n	8013fb4 <_printf_i+0x24>
 8013fb2:	e0c0      	b.n	8014136 <_printf_i+0x1a6>
 8013fb4:	2a58      	cmp	r2, #88	; 0x58
 8013fb6:	d052      	beq.n	801405e <_printf_i+0xce>
 8013fb8:	0026      	movs	r6, r4
 8013fba:	3642      	adds	r6, #66	; 0x42
 8013fbc:	7032      	strb	r2, [r6, #0]
 8013fbe:	e022      	b.n	8014006 <_printf_i+0x76>
 8013fc0:	0010      	movs	r0, r2
 8013fc2:	3863      	subs	r0, #99	; 0x63
 8013fc4:	2815      	cmp	r0, #21
 8013fc6:	d8f7      	bhi.n	8013fb8 <_printf_i+0x28>
 8013fc8:	f7ec f89a 	bl	8000100 <__gnu_thumb1_case_shi>
 8013fcc:	001f0016 	.word	0x001f0016
 8013fd0:	fff6fff6 	.word	0xfff6fff6
 8013fd4:	fff6fff6 	.word	0xfff6fff6
 8013fd8:	fff6001f 	.word	0xfff6001f
 8013fdc:	fff6fff6 	.word	0xfff6fff6
 8013fe0:	00a8fff6 	.word	0x00a8fff6
 8013fe4:	009a0036 	.word	0x009a0036
 8013fe8:	fff6fff6 	.word	0xfff6fff6
 8013fec:	fff600b9 	.word	0xfff600b9
 8013ff0:	fff60036 	.word	0xfff60036
 8013ff4:	009efff6 	.word	0x009efff6
 8013ff8:	0026      	movs	r6, r4
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	3642      	adds	r6, #66	; 0x42
 8013ffe:	1d11      	adds	r1, r2, #4
 8014000:	6019      	str	r1, [r3, #0]
 8014002:	6813      	ldr	r3, [r2, #0]
 8014004:	7033      	strb	r3, [r6, #0]
 8014006:	2301      	movs	r3, #1
 8014008:	e0a7      	b.n	801415a <_printf_i+0x1ca>
 801400a:	6808      	ldr	r0, [r1, #0]
 801400c:	6819      	ldr	r1, [r3, #0]
 801400e:	1d0a      	adds	r2, r1, #4
 8014010:	0605      	lsls	r5, r0, #24
 8014012:	d50b      	bpl.n	801402c <_printf_i+0x9c>
 8014014:	680d      	ldr	r5, [r1, #0]
 8014016:	601a      	str	r2, [r3, #0]
 8014018:	2d00      	cmp	r5, #0
 801401a:	da03      	bge.n	8014024 <_printf_i+0x94>
 801401c:	232d      	movs	r3, #45	; 0x2d
 801401e:	9a04      	ldr	r2, [sp, #16]
 8014020:	426d      	negs	r5, r5
 8014022:	7013      	strb	r3, [r2, #0]
 8014024:	4b61      	ldr	r3, [pc, #388]	; (80141ac <_printf_i+0x21c>)
 8014026:	270a      	movs	r7, #10
 8014028:	9303      	str	r3, [sp, #12]
 801402a:	e032      	b.n	8014092 <_printf_i+0x102>
 801402c:	680d      	ldr	r5, [r1, #0]
 801402e:	601a      	str	r2, [r3, #0]
 8014030:	0641      	lsls	r1, r0, #25
 8014032:	d5f1      	bpl.n	8014018 <_printf_i+0x88>
 8014034:	b22d      	sxth	r5, r5
 8014036:	e7ef      	b.n	8014018 <_printf_i+0x88>
 8014038:	680d      	ldr	r5, [r1, #0]
 801403a:	6819      	ldr	r1, [r3, #0]
 801403c:	1d08      	adds	r0, r1, #4
 801403e:	6018      	str	r0, [r3, #0]
 8014040:	062e      	lsls	r6, r5, #24
 8014042:	d501      	bpl.n	8014048 <_printf_i+0xb8>
 8014044:	680d      	ldr	r5, [r1, #0]
 8014046:	e003      	b.n	8014050 <_printf_i+0xc0>
 8014048:	066d      	lsls	r5, r5, #25
 801404a:	d5fb      	bpl.n	8014044 <_printf_i+0xb4>
 801404c:	680d      	ldr	r5, [r1, #0]
 801404e:	b2ad      	uxth	r5, r5
 8014050:	4b56      	ldr	r3, [pc, #344]	; (80141ac <_printf_i+0x21c>)
 8014052:	270a      	movs	r7, #10
 8014054:	9303      	str	r3, [sp, #12]
 8014056:	2a6f      	cmp	r2, #111	; 0x6f
 8014058:	d117      	bne.n	801408a <_printf_i+0xfa>
 801405a:	2708      	movs	r7, #8
 801405c:	e015      	b.n	801408a <_printf_i+0xfa>
 801405e:	3145      	adds	r1, #69	; 0x45
 8014060:	700a      	strb	r2, [r1, #0]
 8014062:	4a52      	ldr	r2, [pc, #328]	; (80141ac <_printf_i+0x21c>)
 8014064:	9203      	str	r2, [sp, #12]
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	6821      	ldr	r1, [r4, #0]
 801406a:	ca20      	ldmia	r2!, {r5}
 801406c:	601a      	str	r2, [r3, #0]
 801406e:	0608      	lsls	r0, r1, #24
 8014070:	d550      	bpl.n	8014114 <_printf_i+0x184>
 8014072:	07cb      	lsls	r3, r1, #31
 8014074:	d502      	bpl.n	801407c <_printf_i+0xec>
 8014076:	2320      	movs	r3, #32
 8014078:	4319      	orrs	r1, r3
 801407a:	6021      	str	r1, [r4, #0]
 801407c:	2710      	movs	r7, #16
 801407e:	2d00      	cmp	r5, #0
 8014080:	d103      	bne.n	801408a <_printf_i+0xfa>
 8014082:	2320      	movs	r3, #32
 8014084:	6822      	ldr	r2, [r4, #0]
 8014086:	439a      	bics	r2, r3
 8014088:	6022      	str	r2, [r4, #0]
 801408a:	0023      	movs	r3, r4
 801408c:	2200      	movs	r2, #0
 801408e:	3343      	adds	r3, #67	; 0x43
 8014090:	701a      	strb	r2, [r3, #0]
 8014092:	6863      	ldr	r3, [r4, #4]
 8014094:	60a3      	str	r3, [r4, #8]
 8014096:	2b00      	cmp	r3, #0
 8014098:	db03      	blt.n	80140a2 <_printf_i+0x112>
 801409a:	2204      	movs	r2, #4
 801409c:	6821      	ldr	r1, [r4, #0]
 801409e:	4391      	bics	r1, r2
 80140a0:	6021      	str	r1, [r4, #0]
 80140a2:	2d00      	cmp	r5, #0
 80140a4:	d102      	bne.n	80140ac <_printf_i+0x11c>
 80140a6:	9e04      	ldr	r6, [sp, #16]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d00c      	beq.n	80140c6 <_printf_i+0x136>
 80140ac:	9e04      	ldr	r6, [sp, #16]
 80140ae:	0028      	movs	r0, r5
 80140b0:	0039      	movs	r1, r7
 80140b2:	f7ec f8b5 	bl	8000220 <__aeabi_uidivmod>
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	3e01      	subs	r6, #1
 80140ba:	5c5b      	ldrb	r3, [r3, r1]
 80140bc:	7033      	strb	r3, [r6, #0]
 80140be:	002b      	movs	r3, r5
 80140c0:	0005      	movs	r5, r0
 80140c2:	429f      	cmp	r7, r3
 80140c4:	d9f3      	bls.n	80140ae <_printf_i+0x11e>
 80140c6:	2f08      	cmp	r7, #8
 80140c8:	d109      	bne.n	80140de <_printf_i+0x14e>
 80140ca:	6823      	ldr	r3, [r4, #0]
 80140cc:	07db      	lsls	r3, r3, #31
 80140ce:	d506      	bpl.n	80140de <_printf_i+0x14e>
 80140d0:	6863      	ldr	r3, [r4, #4]
 80140d2:	6922      	ldr	r2, [r4, #16]
 80140d4:	4293      	cmp	r3, r2
 80140d6:	dc02      	bgt.n	80140de <_printf_i+0x14e>
 80140d8:	2330      	movs	r3, #48	; 0x30
 80140da:	3e01      	subs	r6, #1
 80140dc:	7033      	strb	r3, [r6, #0]
 80140de:	9b04      	ldr	r3, [sp, #16]
 80140e0:	1b9b      	subs	r3, r3, r6
 80140e2:	6123      	str	r3, [r4, #16]
 80140e4:	9b07      	ldr	r3, [sp, #28]
 80140e6:	0021      	movs	r1, r4
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	9805      	ldr	r0, [sp, #20]
 80140ec:	9b06      	ldr	r3, [sp, #24]
 80140ee:	aa09      	add	r2, sp, #36	; 0x24
 80140f0:	f7ff fede 	bl	8013eb0 <_printf_common>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d135      	bne.n	8014164 <_printf_i+0x1d4>
 80140f8:	2001      	movs	r0, #1
 80140fa:	4240      	negs	r0, r0
 80140fc:	b00b      	add	sp, #44	; 0x2c
 80140fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014100:	2220      	movs	r2, #32
 8014102:	6809      	ldr	r1, [r1, #0]
 8014104:	430a      	orrs	r2, r1
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	0022      	movs	r2, r4
 801410a:	2178      	movs	r1, #120	; 0x78
 801410c:	3245      	adds	r2, #69	; 0x45
 801410e:	7011      	strb	r1, [r2, #0]
 8014110:	4a27      	ldr	r2, [pc, #156]	; (80141b0 <_printf_i+0x220>)
 8014112:	e7a7      	b.n	8014064 <_printf_i+0xd4>
 8014114:	0648      	lsls	r0, r1, #25
 8014116:	d5ac      	bpl.n	8014072 <_printf_i+0xe2>
 8014118:	b2ad      	uxth	r5, r5
 801411a:	e7aa      	b.n	8014072 <_printf_i+0xe2>
 801411c:	681a      	ldr	r2, [r3, #0]
 801411e:	680d      	ldr	r5, [r1, #0]
 8014120:	1d10      	adds	r0, r2, #4
 8014122:	6949      	ldr	r1, [r1, #20]
 8014124:	6018      	str	r0, [r3, #0]
 8014126:	6813      	ldr	r3, [r2, #0]
 8014128:	062e      	lsls	r6, r5, #24
 801412a:	d501      	bpl.n	8014130 <_printf_i+0x1a0>
 801412c:	6019      	str	r1, [r3, #0]
 801412e:	e002      	b.n	8014136 <_printf_i+0x1a6>
 8014130:	066d      	lsls	r5, r5, #25
 8014132:	d5fb      	bpl.n	801412c <_printf_i+0x19c>
 8014134:	8019      	strh	r1, [r3, #0]
 8014136:	2300      	movs	r3, #0
 8014138:	9e04      	ldr	r6, [sp, #16]
 801413a:	6123      	str	r3, [r4, #16]
 801413c:	e7d2      	b.n	80140e4 <_printf_i+0x154>
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	1d11      	adds	r1, r2, #4
 8014142:	6019      	str	r1, [r3, #0]
 8014144:	6816      	ldr	r6, [r2, #0]
 8014146:	2100      	movs	r1, #0
 8014148:	0030      	movs	r0, r6
 801414a:	6862      	ldr	r2, [r4, #4]
 801414c:	f000 f8dc 	bl	8014308 <memchr>
 8014150:	2800      	cmp	r0, #0
 8014152:	d001      	beq.n	8014158 <_printf_i+0x1c8>
 8014154:	1b80      	subs	r0, r0, r6
 8014156:	6060      	str	r0, [r4, #4]
 8014158:	6863      	ldr	r3, [r4, #4]
 801415a:	6123      	str	r3, [r4, #16]
 801415c:	2300      	movs	r3, #0
 801415e:	9a04      	ldr	r2, [sp, #16]
 8014160:	7013      	strb	r3, [r2, #0]
 8014162:	e7bf      	b.n	80140e4 <_printf_i+0x154>
 8014164:	6923      	ldr	r3, [r4, #16]
 8014166:	0032      	movs	r2, r6
 8014168:	9906      	ldr	r1, [sp, #24]
 801416a:	9805      	ldr	r0, [sp, #20]
 801416c:	9d07      	ldr	r5, [sp, #28]
 801416e:	47a8      	blx	r5
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	d0c1      	beq.n	80140f8 <_printf_i+0x168>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	079b      	lsls	r3, r3, #30
 8014178:	d415      	bmi.n	80141a6 <_printf_i+0x216>
 801417a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801417c:	68e0      	ldr	r0, [r4, #12]
 801417e:	4298      	cmp	r0, r3
 8014180:	dabc      	bge.n	80140fc <_printf_i+0x16c>
 8014182:	0018      	movs	r0, r3
 8014184:	e7ba      	b.n	80140fc <_printf_i+0x16c>
 8014186:	0022      	movs	r2, r4
 8014188:	2301      	movs	r3, #1
 801418a:	9906      	ldr	r1, [sp, #24]
 801418c:	9805      	ldr	r0, [sp, #20]
 801418e:	9e07      	ldr	r6, [sp, #28]
 8014190:	3219      	adds	r2, #25
 8014192:	47b0      	blx	r6
 8014194:	1c43      	adds	r3, r0, #1
 8014196:	d0af      	beq.n	80140f8 <_printf_i+0x168>
 8014198:	3501      	adds	r5, #1
 801419a:	68e3      	ldr	r3, [r4, #12]
 801419c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801419e:	1a9b      	subs	r3, r3, r2
 80141a0:	42ab      	cmp	r3, r5
 80141a2:	dcf0      	bgt.n	8014186 <_printf_i+0x1f6>
 80141a4:	e7e9      	b.n	801417a <_printf_i+0x1ea>
 80141a6:	2500      	movs	r5, #0
 80141a8:	e7f7      	b.n	801419a <_printf_i+0x20a>
 80141aa:	46c0      	nop			; (mov r8, r8)
 80141ac:	0801861d 	.word	0x0801861d
 80141b0:	0801862e 	.word	0x0801862e

080141b4 <__sread>:
 80141b4:	b570      	push	{r4, r5, r6, lr}
 80141b6:	000c      	movs	r4, r1
 80141b8:	250e      	movs	r5, #14
 80141ba:	5f49      	ldrsh	r1, [r1, r5]
 80141bc:	f000 f8f2 	bl	80143a4 <_read_r>
 80141c0:	2800      	cmp	r0, #0
 80141c2:	db03      	blt.n	80141cc <__sread+0x18>
 80141c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80141c6:	181b      	adds	r3, r3, r0
 80141c8:	6563      	str	r3, [r4, #84]	; 0x54
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	89a3      	ldrh	r3, [r4, #12]
 80141ce:	4a02      	ldr	r2, [pc, #8]	; (80141d8 <__sread+0x24>)
 80141d0:	4013      	ands	r3, r2
 80141d2:	81a3      	strh	r3, [r4, #12]
 80141d4:	e7f9      	b.n	80141ca <__sread+0x16>
 80141d6:	46c0      	nop			; (mov r8, r8)
 80141d8:	ffffefff 	.word	0xffffefff

080141dc <__swrite>:
 80141dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141de:	001f      	movs	r7, r3
 80141e0:	898b      	ldrh	r3, [r1, #12]
 80141e2:	0005      	movs	r5, r0
 80141e4:	000c      	movs	r4, r1
 80141e6:	0016      	movs	r6, r2
 80141e8:	05db      	lsls	r3, r3, #23
 80141ea:	d505      	bpl.n	80141f8 <__swrite+0x1c>
 80141ec:	230e      	movs	r3, #14
 80141ee:	5ec9      	ldrsh	r1, [r1, r3]
 80141f0:	2200      	movs	r2, #0
 80141f2:	2302      	movs	r3, #2
 80141f4:	f000 f874 	bl	80142e0 <_lseek_r>
 80141f8:	89a3      	ldrh	r3, [r4, #12]
 80141fa:	4a05      	ldr	r2, [pc, #20]	; (8014210 <__swrite+0x34>)
 80141fc:	0028      	movs	r0, r5
 80141fe:	4013      	ands	r3, r2
 8014200:	81a3      	strh	r3, [r4, #12]
 8014202:	0032      	movs	r2, r6
 8014204:	230e      	movs	r3, #14
 8014206:	5ee1      	ldrsh	r1, [r4, r3]
 8014208:	003b      	movs	r3, r7
 801420a:	f000 f81f 	bl	801424c <_write_r>
 801420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014210:	ffffefff 	.word	0xffffefff

08014214 <__sseek>:
 8014214:	b570      	push	{r4, r5, r6, lr}
 8014216:	000c      	movs	r4, r1
 8014218:	250e      	movs	r5, #14
 801421a:	5f49      	ldrsh	r1, [r1, r5]
 801421c:	f000 f860 	bl	80142e0 <_lseek_r>
 8014220:	89a3      	ldrh	r3, [r4, #12]
 8014222:	1c42      	adds	r2, r0, #1
 8014224:	d103      	bne.n	801422e <__sseek+0x1a>
 8014226:	4a05      	ldr	r2, [pc, #20]	; (801423c <__sseek+0x28>)
 8014228:	4013      	ands	r3, r2
 801422a:	81a3      	strh	r3, [r4, #12]
 801422c:	bd70      	pop	{r4, r5, r6, pc}
 801422e:	2280      	movs	r2, #128	; 0x80
 8014230:	0152      	lsls	r2, r2, #5
 8014232:	4313      	orrs	r3, r2
 8014234:	81a3      	strh	r3, [r4, #12]
 8014236:	6560      	str	r0, [r4, #84]	; 0x54
 8014238:	e7f8      	b.n	801422c <__sseek+0x18>
 801423a:	46c0      	nop			; (mov r8, r8)
 801423c:	ffffefff 	.word	0xffffefff

08014240 <__sclose>:
 8014240:	b510      	push	{r4, lr}
 8014242:	230e      	movs	r3, #14
 8014244:	5ec9      	ldrsh	r1, [r1, r3]
 8014246:	f000 f815 	bl	8014274 <_close_r>
 801424a:	bd10      	pop	{r4, pc}

0801424c <_write_r>:
 801424c:	b570      	push	{r4, r5, r6, lr}
 801424e:	0004      	movs	r4, r0
 8014250:	0008      	movs	r0, r1
 8014252:	0011      	movs	r1, r2
 8014254:	001a      	movs	r2, r3
 8014256:	2300      	movs	r3, #0
 8014258:	4d05      	ldr	r5, [pc, #20]	; (8014270 <_write_r+0x24>)
 801425a:	602b      	str	r3, [r5, #0]
 801425c:	f7fe fd77 	bl	8012d4e <_write>
 8014260:	1c43      	adds	r3, r0, #1
 8014262:	d103      	bne.n	801426c <_write_r+0x20>
 8014264:	682b      	ldr	r3, [r5, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d000      	beq.n	801426c <_write_r+0x20>
 801426a:	6023      	str	r3, [r4, #0]
 801426c:	bd70      	pop	{r4, r5, r6, pc}
 801426e:	46c0      	nop			; (mov r8, r8)
 8014270:	2000080c 	.word	0x2000080c

08014274 <_close_r>:
 8014274:	2300      	movs	r3, #0
 8014276:	b570      	push	{r4, r5, r6, lr}
 8014278:	4d06      	ldr	r5, [pc, #24]	; (8014294 <_close_r+0x20>)
 801427a:	0004      	movs	r4, r0
 801427c:	0008      	movs	r0, r1
 801427e:	602b      	str	r3, [r5, #0]
 8014280:	f7fe fd81 	bl	8012d86 <_close>
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	d103      	bne.n	8014290 <_close_r+0x1c>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d000      	beq.n	8014290 <_close_r+0x1c>
 801428e:	6023      	str	r3, [r4, #0]
 8014290:	bd70      	pop	{r4, r5, r6, pc}
 8014292:	46c0      	nop			; (mov r8, r8)
 8014294:	2000080c 	.word	0x2000080c

08014298 <_fstat_r>:
 8014298:	2300      	movs	r3, #0
 801429a:	b570      	push	{r4, r5, r6, lr}
 801429c:	4d06      	ldr	r5, [pc, #24]	; (80142b8 <_fstat_r+0x20>)
 801429e:	0004      	movs	r4, r0
 80142a0:	0008      	movs	r0, r1
 80142a2:	0011      	movs	r1, r2
 80142a4:	602b      	str	r3, [r5, #0]
 80142a6:	f7fe fd78 	bl	8012d9a <_fstat>
 80142aa:	1c43      	adds	r3, r0, #1
 80142ac:	d103      	bne.n	80142b6 <_fstat_r+0x1e>
 80142ae:	682b      	ldr	r3, [r5, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d000      	beq.n	80142b6 <_fstat_r+0x1e>
 80142b4:	6023      	str	r3, [r4, #0]
 80142b6:	bd70      	pop	{r4, r5, r6, pc}
 80142b8:	2000080c 	.word	0x2000080c

080142bc <_isatty_r>:
 80142bc:	2300      	movs	r3, #0
 80142be:	b570      	push	{r4, r5, r6, lr}
 80142c0:	4d06      	ldr	r5, [pc, #24]	; (80142dc <_isatty_r+0x20>)
 80142c2:	0004      	movs	r4, r0
 80142c4:	0008      	movs	r0, r1
 80142c6:	602b      	str	r3, [r5, #0]
 80142c8:	f7fe fd75 	bl	8012db6 <_isatty>
 80142cc:	1c43      	adds	r3, r0, #1
 80142ce:	d103      	bne.n	80142d8 <_isatty_r+0x1c>
 80142d0:	682b      	ldr	r3, [r5, #0]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d000      	beq.n	80142d8 <_isatty_r+0x1c>
 80142d6:	6023      	str	r3, [r4, #0]
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
 80142da:	46c0      	nop			; (mov r8, r8)
 80142dc:	2000080c 	.word	0x2000080c

080142e0 <_lseek_r>:
 80142e0:	b570      	push	{r4, r5, r6, lr}
 80142e2:	0004      	movs	r4, r0
 80142e4:	0008      	movs	r0, r1
 80142e6:	0011      	movs	r1, r2
 80142e8:	001a      	movs	r2, r3
 80142ea:	2300      	movs	r3, #0
 80142ec:	4d05      	ldr	r5, [pc, #20]	; (8014304 <_lseek_r+0x24>)
 80142ee:	602b      	str	r3, [r5, #0]
 80142f0:	f7fe fd6a 	bl	8012dc8 <_lseek>
 80142f4:	1c43      	adds	r3, r0, #1
 80142f6:	d103      	bne.n	8014300 <_lseek_r+0x20>
 80142f8:	682b      	ldr	r3, [r5, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d000      	beq.n	8014300 <_lseek_r+0x20>
 80142fe:	6023      	str	r3, [r4, #0]
 8014300:	bd70      	pop	{r4, r5, r6, pc}
 8014302:	46c0      	nop			; (mov r8, r8)
 8014304:	2000080c 	.word	0x2000080c

08014308 <memchr>:
 8014308:	b2c9      	uxtb	r1, r1
 801430a:	1882      	adds	r2, r0, r2
 801430c:	4290      	cmp	r0, r2
 801430e:	d101      	bne.n	8014314 <memchr+0xc>
 8014310:	2000      	movs	r0, #0
 8014312:	4770      	bx	lr
 8014314:	7803      	ldrb	r3, [r0, #0]
 8014316:	428b      	cmp	r3, r1
 8014318:	d0fb      	beq.n	8014312 <memchr+0xa>
 801431a:	3001      	adds	r0, #1
 801431c:	e7f6      	b.n	801430c <memchr+0x4>

0801431e <memcpy>:
 801431e:	2300      	movs	r3, #0
 8014320:	b510      	push	{r4, lr}
 8014322:	429a      	cmp	r2, r3
 8014324:	d100      	bne.n	8014328 <memcpy+0xa>
 8014326:	bd10      	pop	{r4, pc}
 8014328:	5ccc      	ldrb	r4, [r1, r3]
 801432a:	54c4      	strb	r4, [r0, r3]
 801432c:	3301      	adds	r3, #1
 801432e:	e7f8      	b.n	8014322 <memcpy+0x4>

08014330 <memmove>:
 8014330:	b510      	push	{r4, lr}
 8014332:	4288      	cmp	r0, r1
 8014334:	d902      	bls.n	801433c <memmove+0xc>
 8014336:	188b      	adds	r3, r1, r2
 8014338:	4298      	cmp	r0, r3
 801433a:	d303      	bcc.n	8014344 <memmove+0x14>
 801433c:	2300      	movs	r3, #0
 801433e:	e007      	b.n	8014350 <memmove+0x20>
 8014340:	5c8b      	ldrb	r3, [r1, r2]
 8014342:	5483      	strb	r3, [r0, r2]
 8014344:	3a01      	subs	r2, #1
 8014346:	d2fb      	bcs.n	8014340 <memmove+0x10>
 8014348:	bd10      	pop	{r4, pc}
 801434a:	5ccc      	ldrb	r4, [r1, r3]
 801434c:	54c4      	strb	r4, [r0, r3]
 801434e:	3301      	adds	r3, #1
 8014350:	429a      	cmp	r2, r3
 8014352:	d1fa      	bne.n	801434a <memmove+0x1a>
 8014354:	e7f8      	b.n	8014348 <memmove+0x18>

08014356 <_realloc_r>:
 8014356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014358:	0007      	movs	r7, r0
 801435a:	000d      	movs	r5, r1
 801435c:	0016      	movs	r6, r2
 801435e:	2900      	cmp	r1, #0
 8014360:	d105      	bne.n	801436e <_realloc_r+0x18>
 8014362:	0011      	movs	r1, r2
 8014364:	f7fe fe9e 	bl	80130a4 <_malloc_r>
 8014368:	0004      	movs	r4, r0
 801436a:	0020      	movs	r0, r4
 801436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801436e:	2a00      	cmp	r2, #0
 8014370:	d103      	bne.n	801437a <_realloc_r+0x24>
 8014372:	f7fe fe4d 	bl	8013010 <_free_r>
 8014376:	0034      	movs	r4, r6
 8014378:	e7f7      	b.n	801436a <_realloc_r+0x14>
 801437a:	f000 f827 	bl	80143cc <_malloc_usable_size_r>
 801437e:	002c      	movs	r4, r5
 8014380:	42b0      	cmp	r0, r6
 8014382:	d2f2      	bcs.n	801436a <_realloc_r+0x14>
 8014384:	0031      	movs	r1, r6
 8014386:	0038      	movs	r0, r7
 8014388:	f7fe fe8c 	bl	80130a4 <_malloc_r>
 801438c:	1e04      	subs	r4, r0, #0
 801438e:	d0ec      	beq.n	801436a <_realloc_r+0x14>
 8014390:	0029      	movs	r1, r5
 8014392:	0032      	movs	r2, r6
 8014394:	f7ff ffc3 	bl	801431e <memcpy>
 8014398:	0029      	movs	r1, r5
 801439a:	0038      	movs	r0, r7
 801439c:	f7fe fe38 	bl	8013010 <_free_r>
 80143a0:	e7e3      	b.n	801436a <_realloc_r+0x14>
	...

080143a4 <_read_r>:
 80143a4:	b570      	push	{r4, r5, r6, lr}
 80143a6:	0004      	movs	r4, r0
 80143a8:	0008      	movs	r0, r1
 80143aa:	0011      	movs	r1, r2
 80143ac:	001a      	movs	r2, r3
 80143ae:	2300      	movs	r3, #0
 80143b0:	4d05      	ldr	r5, [pc, #20]	; (80143c8 <_read_r+0x24>)
 80143b2:	602b      	str	r3, [r5, #0]
 80143b4:	f7fe fcae 	bl	8012d14 <_read>
 80143b8:	1c43      	adds	r3, r0, #1
 80143ba:	d103      	bne.n	80143c4 <_read_r+0x20>
 80143bc:	682b      	ldr	r3, [r5, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d000      	beq.n	80143c4 <_read_r+0x20>
 80143c2:	6023      	str	r3, [r4, #0]
 80143c4:	bd70      	pop	{r4, r5, r6, pc}
 80143c6:	46c0      	nop			; (mov r8, r8)
 80143c8:	2000080c 	.word	0x2000080c

080143cc <_malloc_usable_size_r>:
 80143cc:	1f0b      	subs	r3, r1, #4
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	1f18      	subs	r0, r3, #4
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	da01      	bge.n	80143da <_malloc_usable_size_r+0xe>
 80143d6:	580b      	ldr	r3, [r1, r0]
 80143d8:	18c0      	adds	r0, r0, r3
 80143da:	4770      	bx	lr

080143dc <cos>:
 80143dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143de:	4a1e      	ldr	r2, [pc, #120]	; (8014458 <cos+0x7c>)
 80143e0:	004b      	lsls	r3, r1, #1
 80143e2:	b087      	sub	sp, #28
 80143e4:	085b      	lsrs	r3, r3, #1
 80143e6:	4293      	cmp	r3, r2
 80143e8:	dc04      	bgt.n	80143f4 <cos+0x18>
 80143ea:	2200      	movs	r2, #0
 80143ec:	2300      	movs	r3, #0
 80143ee:	f000 fd07 	bl	8014e00 <__kernel_cos>
 80143f2:	e006      	b.n	8014402 <cos+0x26>
 80143f4:	4a19      	ldr	r2, [pc, #100]	; (801445c <cos+0x80>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	dd05      	ble.n	8014406 <cos+0x2a>
 80143fa:	0002      	movs	r2, r0
 80143fc:	000b      	movs	r3, r1
 80143fe:	f7ee f9dd 	bl	80027bc <__aeabi_dsub>
 8014402:	b007      	add	sp, #28
 8014404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014406:	aa02      	add	r2, sp, #8
 8014408:	f000 fb0e 	bl	8014a28 <__ieee754_rem_pio2>
 801440c:	9c04      	ldr	r4, [sp, #16]
 801440e:	9d05      	ldr	r5, [sp, #20]
 8014410:	2303      	movs	r3, #3
 8014412:	4003      	ands	r3, r0
 8014414:	2b01      	cmp	r3, #1
 8014416:	d008      	beq.n	801442a <cos+0x4e>
 8014418:	9802      	ldr	r0, [sp, #8]
 801441a:	9903      	ldr	r1, [sp, #12]
 801441c:	2b02      	cmp	r3, #2
 801441e:	d00f      	beq.n	8014440 <cos+0x64>
 8014420:	2b00      	cmp	r3, #0
 8014422:	d112      	bne.n	801444a <cos+0x6e>
 8014424:	0022      	movs	r2, r4
 8014426:	002b      	movs	r3, r5
 8014428:	e7e1      	b.n	80143ee <cos+0x12>
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	0022      	movs	r2, r4
 801442e:	9802      	ldr	r0, [sp, #8]
 8014430:	9903      	ldr	r1, [sp, #12]
 8014432:	002b      	movs	r3, r5
 8014434:	f001 f91a 	bl	801566c <__kernel_sin>
 8014438:	2380      	movs	r3, #128	; 0x80
 801443a:	061b      	lsls	r3, r3, #24
 801443c:	18c9      	adds	r1, r1, r3
 801443e:	e7e0      	b.n	8014402 <cos+0x26>
 8014440:	0022      	movs	r2, r4
 8014442:	002b      	movs	r3, r5
 8014444:	f000 fcdc 	bl	8014e00 <__kernel_cos>
 8014448:	e7f6      	b.n	8014438 <cos+0x5c>
 801444a:	2301      	movs	r3, #1
 801444c:	0022      	movs	r2, r4
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	002b      	movs	r3, r5
 8014452:	f001 f90b 	bl	801566c <__kernel_sin>
 8014456:	e7d4      	b.n	8014402 <cos+0x26>
 8014458:	3fe921fb 	.word	0x3fe921fb
 801445c:	7fefffff 	.word	0x7fefffff

08014460 <sin>:
 8014460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014462:	4a20      	ldr	r2, [pc, #128]	; (80144e4 <sin+0x84>)
 8014464:	004b      	lsls	r3, r1, #1
 8014466:	b087      	sub	sp, #28
 8014468:	085b      	lsrs	r3, r3, #1
 801446a:	4293      	cmp	r3, r2
 801446c:	dc06      	bgt.n	801447c <sin+0x1c>
 801446e:	2300      	movs	r3, #0
 8014470:	2200      	movs	r2, #0
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	2300      	movs	r3, #0
 8014476:	f001 f8f9 	bl	801566c <__kernel_sin>
 801447a:	e006      	b.n	801448a <sin+0x2a>
 801447c:	4a1a      	ldr	r2, [pc, #104]	; (80144e8 <sin+0x88>)
 801447e:	4293      	cmp	r3, r2
 8014480:	dd05      	ble.n	801448e <sin+0x2e>
 8014482:	0002      	movs	r2, r0
 8014484:	000b      	movs	r3, r1
 8014486:	f7ee f999 	bl	80027bc <__aeabi_dsub>
 801448a:	b007      	add	sp, #28
 801448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801448e:	aa02      	add	r2, sp, #8
 8014490:	f000 faca 	bl	8014a28 <__ieee754_rem_pio2>
 8014494:	9c04      	ldr	r4, [sp, #16]
 8014496:	9d05      	ldr	r5, [sp, #20]
 8014498:	2303      	movs	r3, #3
 801449a:	4003      	ands	r3, r0
 801449c:	2b01      	cmp	r3, #1
 801449e:	d00a      	beq.n	80144b6 <sin+0x56>
 80144a0:	9802      	ldr	r0, [sp, #8]
 80144a2:	9903      	ldr	r1, [sp, #12]
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d00d      	beq.n	80144c4 <sin+0x64>
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d115      	bne.n	80144d8 <sin+0x78>
 80144ac:	3301      	adds	r3, #1
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	0022      	movs	r2, r4
 80144b2:	002b      	movs	r3, r5
 80144b4:	e7df      	b.n	8014476 <sin+0x16>
 80144b6:	0022      	movs	r2, r4
 80144b8:	9802      	ldr	r0, [sp, #8]
 80144ba:	9903      	ldr	r1, [sp, #12]
 80144bc:	002b      	movs	r3, r5
 80144be:	f000 fc9f 	bl	8014e00 <__kernel_cos>
 80144c2:	e7e2      	b.n	801448a <sin+0x2a>
 80144c4:	2301      	movs	r3, #1
 80144c6:	0022      	movs	r2, r4
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	002b      	movs	r3, r5
 80144cc:	f001 f8ce 	bl	801566c <__kernel_sin>
 80144d0:	2380      	movs	r3, #128	; 0x80
 80144d2:	061b      	lsls	r3, r3, #24
 80144d4:	18c9      	adds	r1, r1, r3
 80144d6:	e7d8      	b.n	801448a <sin+0x2a>
 80144d8:	0022      	movs	r2, r4
 80144da:	002b      	movs	r3, r5
 80144dc:	f000 fc90 	bl	8014e00 <__kernel_cos>
 80144e0:	e7f6      	b.n	80144d0 <sin+0x70>
 80144e2:	46c0      	nop			; (mov r8, r8)
 80144e4:	3fe921fb 	.word	0x3fe921fb
 80144e8:	7fefffff 	.word	0x7fefffff

080144ec <atan2>:
 80144ec:	b510      	push	{r4, lr}
 80144ee:	f000 f83f 	bl	8014570 <__ieee754_atan2>
 80144f2:	bd10      	pop	{r4, pc}

080144f4 <log>:
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	0004      	movs	r4, r0
 80144f8:	000d      	movs	r5, r1
 80144fa:	f000 f8e5 	bl	80146c8 <__ieee754_log>
 80144fe:	4b19      	ldr	r3, [pc, #100]	; (8014564 <log+0x70>)
 8014500:	0006      	movs	r6, r0
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	000f      	movs	r7, r1
 8014506:	b25b      	sxtb	r3, r3
 8014508:	3301      	adds	r3, #1
 801450a:	d01d      	beq.n	8014548 <log+0x54>
 801450c:	0022      	movs	r2, r4
 801450e:	002b      	movs	r3, r5
 8014510:	0020      	movs	r0, r4
 8014512:	0029      	movs	r1, r5
 8014514:	f7ee fce4 	bl	8002ee0 <__aeabi_dcmpun>
 8014518:	2800      	cmp	r0, #0
 801451a:	d115      	bne.n	8014548 <log+0x54>
 801451c:	2200      	movs	r2, #0
 801451e:	2300      	movs	r3, #0
 8014520:	0020      	movs	r0, r4
 8014522:	0029      	movs	r1, r5
 8014524:	f7eb ff96 	bl	8000454 <__aeabi_dcmpgt>
 8014528:	2800      	cmp	r0, #0
 801452a:	d10d      	bne.n	8014548 <log+0x54>
 801452c:	2200      	movs	r2, #0
 801452e:	2300      	movs	r3, #0
 8014530:	0020      	movs	r0, r4
 8014532:	0029      	movs	r1, r5
 8014534:	f7eb ff74 	bl	8000420 <__aeabi_dcmpeq>
 8014538:	2800      	cmp	r0, #0
 801453a:	d008      	beq.n	801454e <log+0x5a>
 801453c:	f7fe fd2c 	bl	8012f98 <__errno>
 8014540:	2322      	movs	r3, #34	; 0x22
 8014542:	2600      	movs	r6, #0
 8014544:	4f08      	ldr	r7, [pc, #32]	; (8014568 <log+0x74>)
 8014546:	6003      	str	r3, [r0, #0]
 8014548:	0030      	movs	r0, r6
 801454a:	0039      	movs	r1, r7
 801454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801454e:	f7fe fd23 	bl	8012f98 <__errno>
 8014552:	2321      	movs	r3, #33	; 0x21
 8014554:	6003      	str	r3, [r0, #0]
 8014556:	4805      	ldr	r0, [pc, #20]	; (801456c <log+0x78>)
 8014558:	f001 fb42 	bl	8015be0 <nan>
 801455c:	0006      	movs	r6, r0
 801455e:	000f      	movs	r7, r1
 8014560:	e7f2      	b.n	8014548 <log+0x54>
 8014562:	46c0      	nop			; (mov r8, r8)
 8014564:	200000f0 	.word	0x200000f0
 8014568:	fff00000 	.word	0xfff00000
 801456c:	08018611 	.word	0x08018611

08014570 <__ieee754_atan2>:
 8014570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014572:	0016      	movs	r6, r2
 8014574:	001d      	movs	r5, r3
 8014576:	005a      	lsls	r2, r3, #1
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	4273      	negs	r3, r6
 801457c:	4333      	orrs	r3, r6
 801457e:	4f46      	ldr	r7, [pc, #280]	; (8014698 <__ieee754_atan2+0x128>)
 8014580:	0852      	lsrs	r2, r2, #1
 8014582:	0fdb      	lsrs	r3, r3, #31
 8014584:	4313      	orrs	r3, r2
 8014586:	42bb      	cmp	r3, r7
 8014588:	d809      	bhi.n	801459e <__ieee754_atan2+0x2e>
 801458a:	4244      	negs	r4, r0
 801458c:	004b      	lsls	r3, r1, #1
 801458e:	4304      	orrs	r4, r0
 8014590:	085b      	lsrs	r3, r3, #1
 8014592:	0fe4      	lsrs	r4, r4, #31
 8014594:	9100      	str	r1, [sp, #0]
 8014596:	9001      	str	r0, [sp, #4]
 8014598:	431c      	orrs	r4, r3
 801459a:	42bc      	cmp	r4, r7
 801459c:	d905      	bls.n	80145aa <__ieee754_atan2+0x3a>
 801459e:	0032      	movs	r2, r6
 80145a0:	002b      	movs	r3, r5
 80145a2:	f7ec ff2f 	bl	8001404 <__aeabi_dadd>
 80145a6:	b003      	add	sp, #12
 80145a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145aa:	4c3c      	ldr	r4, [pc, #240]	; (801469c <__ieee754_atan2+0x12c>)
 80145ac:	192c      	adds	r4, r5, r4
 80145ae:	4334      	orrs	r4, r6
 80145b0:	d102      	bne.n	80145b8 <__ieee754_atan2+0x48>
 80145b2:	f001 f907 	bl	80157c4 <atan>
 80145b6:	e7f6      	b.n	80145a6 <__ieee754_atan2+0x36>
 80145b8:	17ac      	asrs	r4, r5, #30
 80145ba:	46a4      	mov	ip, r4
 80145bc:	2402      	movs	r4, #2
 80145be:	4667      	mov	r7, ip
 80145c0:	403c      	ands	r4, r7
 80145c2:	9f00      	ldr	r7, [sp, #0]
 80145c4:	0fff      	lsrs	r7, r7, #31
 80145c6:	433c      	orrs	r4, r7
 80145c8:	9f01      	ldr	r7, [sp, #4]
 80145ca:	431f      	orrs	r7, r3
 80145cc:	d106      	bne.n	80145dc <__ieee754_atan2+0x6c>
 80145ce:	2c02      	cmp	r4, #2
 80145d0:	d056      	beq.n	8014680 <__ieee754_atan2+0x110>
 80145d2:	2c03      	cmp	r4, #3
 80145d4:	d1e7      	bne.n	80145a6 <__ieee754_atan2+0x36>
 80145d6:	4832      	ldr	r0, [pc, #200]	; (80146a0 <__ieee754_atan2+0x130>)
 80145d8:	4932      	ldr	r1, [pc, #200]	; (80146a4 <__ieee754_atan2+0x134>)
 80145da:	e7e4      	b.n	80145a6 <__ieee754_atan2+0x36>
 80145dc:	0017      	movs	r7, r2
 80145de:	4337      	orrs	r7, r6
 80145e0:	d105      	bne.n	80145ee <__ieee754_atan2+0x7e>
 80145e2:	9b00      	ldr	r3, [sp, #0]
 80145e4:	482e      	ldr	r0, [pc, #184]	; (80146a0 <__ieee754_atan2+0x130>)
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	da53      	bge.n	8014692 <__ieee754_atan2+0x122>
 80145ea:	492f      	ldr	r1, [pc, #188]	; (80146a8 <__ieee754_atan2+0x138>)
 80145ec:	e7db      	b.n	80145a6 <__ieee754_atan2+0x36>
 80145ee:	4f2a      	ldr	r7, [pc, #168]	; (8014698 <__ieee754_atan2+0x128>)
 80145f0:	42ba      	cmp	r2, r7
 80145f2:	d10f      	bne.n	8014614 <__ieee754_atan2+0xa4>
 80145f4:	3c01      	subs	r4, #1
 80145f6:	4293      	cmp	r3, r2
 80145f8:	d107      	bne.n	801460a <__ieee754_atan2+0x9a>
 80145fa:	2c02      	cmp	r4, #2
 80145fc:	d843      	bhi.n	8014686 <__ieee754_atan2+0x116>
 80145fe:	4b2b      	ldr	r3, [pc, #172]	; (80146ac <__ieee754_atan2+0x13c>)
 8014600:	00e4      	lsls	r4, r4, #3
 8014602:	191c      	adds	r4, r3, r4
 8014604:	6820      	ldr	r0, [r4, #0]
 8014606:	6861      	ldr	r1, [r4, #4]
 8014608:	e7cd      	b.n	80145a6 <__ieee754_atan2+0x36>
 801460a:	2c02      	cmp	r4, #2
 801460c:	d83e      	bhi.n	801468c <__ieee754_atan2+0x11c>
 801460e:	4b28      	ldr	r3, [pc, #160]	; (80146b0 <__ieee754_atan2+0x140>)
 8014610:	00e4      	lsls	r4, r4, #3
 8014612:	e7f6      	b.n	8014602 <__ieee754_atan2+0x92>
 8014614:	4f20      	ldr	r7, [pc, #128]	; (8014698 <__ieee754_atan2+0x128>)
 8014616:	42bb      	cmp	r3, r7
 8014618:	d0e3      	beq.n	80145e2 <__ieee754_atan2+0x72>
 801461a:	1a9b      	subs	r3, r3, r2
 801461c:	151b      	asrs	r3, r3, #20
 801461e:	2b3c      	cmp	r3, #60	; 0x3c
 8014620:	dc18      	bgt.n	8014654 <__ieee754_atan2+0xe4>
 8014622:	2d00      	cmp	r5, #0
 8014624:	da01      	bge.n	801462a <__ieee754_atan2+0xba>
 8014626:	333c      	adds	r3, #60	; 0x3c
 8014628:	db17      	blt.n	801465a <__ieee754_atan2+0xea>
 801462a:	0032      	movs	r2, r6
 801462c:	002b      	movs	r3, r5
 801462e:	f7ed fa53 	bl	8001ad8 <__aeabi_ddiv>
 8014632:	f001 fa47 	bl	8015ac4 <fabs>
 8014636:	f001 f8c5 	bl	80157c4 <atan>
 801463a:	2c01      	cmp	r4, #1
 801463c:	d010      	beq.n	8014660 <__ieee754_atan2+0xf0>
 801463e:	2c02      	cmp	r4, #2
 8014640:	d013      	beq.n	801466a <__ieee754_atan2+0xfa>
 8014642:	2c00      	cmp	r4, #0
 8014644:	d0af      	beq.n	80145a6 <__ieee754_atan2+0x36>
 8014646:	4a1b      	ldr	r2, [pc, #108]	; (80146b4 <__ieee754_atan2+0x144>)
 8014648:	4b1b      	ldr	r3, [pc, #108]	; (80146b8 <__ieee754_atan2+0x148>)
 801464a:	f7ee f8b7 	bl	80027bc <__aeabi_dsub>
 801464e:	4a14      	ldr	r2, [pc, #80]	; (80146a0 <__ieee754_atan2+0x130>)
 8014650:	4b1a      	ldr	r3, [pc, #104]	; (80146bc <__ieee754_atan2+0x14c>)
 8014652:	e012      	b.n	801467a <__ieee754_atan2+0x10a>
 8014654:	4812      	ldr	r0, [pc, #72]	; (80146a0 <__ieee754_atan2+0x130>)
 8014656:	491a      	ldr	r1, [pc, #104]	; (80146c0 <__ieee754_atan2+0x150>)
 8014658:	e7ef      	b.n	801463a <__ieee754_atan2+0xca>
 801465a:	2000      	movs	r0, #0
 801465c:	2100      	movs	r1, #0
 801465e:	e7ec      	b.n	801463a <__ieee754_atan2+0xca>
 8014660:	2480      	movs	r4, #128	; 0x80
 8014662:	0624      	lsls	r4, r4, #24
 8014664:	190b      	adds	r3, r1, r4
 8014666:	0019      	movs	r1, r3
 8014668:	e79d      	b.n	80145a6 <__ieee754_atan2+0x36>
 801466a:	4a12      	ldr	r2, [pc, #72]	; (80146b4 <__ieee754_atan2+0x144>)
 801466c:	4b12      	ldr	r3, [pc, #72]	; (80146b8 <__ieee754_atan2+0x148>)
 801466e:	f7ee f8a5 	bl	80027bc <__aeabi_dsub>
 8014672:	0002      	movs	r2, r0
 8014674:	000b      	movs	r3, r1
 8014676:	480a      	ldr	r0, [pc, #40]	; (80146a0 <__ieee754_atan2+0x130>)
 8014678:	4910      	ldr	r1, [pc, #64]	; (80146bc <__ieee754_atan2+0x14c>)
 801467a:	f7ee f89f 	bl	80027bc <__aeabi_dsub>
 801467e:	e792      	b.n	80145a6 <__ieee754_atan2+0x36>
 8014680:	4807      	ldr	r0, [pc, #28]	; (80146a0 <__ieee754_atan2+0x130>)
 8014682:	490e      	ldr	r1, [pc, #56]	; (80146bc <__ieee754_atan2+0x14c>)
 8014684:	e78f      	b.n	80145a6 <__ieee754_atan2+0x36>
 8014686:	4806      	ldr	r0, [pc, #24]	; (80146a0 <__ieee754_atan2+0x130>)
 8014688:	490e      	ldr	r1, [pc, #56]	; (80146c4 <__ieee754_atan2+0x154>)
 801468a:	e78c      	b.n	80145a6 <__ieee754_atan2+0x36>
 801468c:	2000      	movs	r0, #0
 801468e:	2100      	movs	r1, #0
 8014690:	e789      	b.n	80145a6 <__ieee754_atan2+0x36>
 8014692:	490b      	ldr	r1, [pc, #44]	; (80146c0 <__ieee754_atan2+0x150>)
 8014694:	e787      	b.n	80145a6 <__ieee754_atan2+0x36>
 8014696:	46c0      	nop			; (mov r8, r8)
 8014698:	7ff00000 	.word	0x7ff00000
 801469c:	c0100000 	.word	0xc0100000
 80146a0:	54442d18 	.word	0x54442d18
 80146a4:	c00921fb 	.word	0xc00921fb
 80146a8:	bff921fb 	.word	0xbff921fb
 80146ac:	08018640 	.word	0x08018640
 80146b0:	08018658 	.word	0x08018658
 80146b4:	33145c07 	.word	0x33145c07
 80146b8:	3ca1a626 	.word	0x3ca1a626
 80146bc:	400921fb 	.word	0x400921fb
 80146c0:	3ff921fb 	.word	0x3ff921fb
 80146c4:	3fe921fb 	.word	0x3fe921fb

080146c8 <__ieee754_log>:
 80146c8:	2280      	movs	r2, #128	; 0x80
 80146ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146cc:	000b      	movs	r3, r1
 80146ce:	b08d      	sub	sp, #52	; 0x34
 80146d0:	0352      	lsls	r2, r2, #13
 80146d2:	4291      	cmp	r1, r2
 80146d4:	da22      	bge.n	801471c <__ieee754_log+0x54>
 80146d6:	004a      	lsls	r2, r1, #1
 80146d8:	0852      	lsrs	r2, r2, #1
 80146da:	4302      	orrs	r2, r0
 80146dc:	d107      	bne.n	80146ee <__ieee754_log+0x26>
 80146de:	2200      	movs	r2, #0
 80146e0:	2300      	movs	r3, #0
 80146e2:	2000      	movs	r0, #0
 80146e4:	49b3      	ldr	r1, [pc, #716]	; (80149b4 <__ieee754_log+0x2ec>)
 80146e6:	f7ed f9f7 	bl	8001ad8 <__aeabi_ddiv>
 80146ea:	b00d      	add	sp, #52	; 0x34
 80146ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ee:	2900      	cmp	r1, #0
 80146f0:	da05      	bge.n	80146fe <__ieee754_log+0x36>
 80146f2:	0002      	movs	r2, r0
 80146f4:	f7ee f862 	bl	80027bc <__aeabi_dsub>
 80146f8:	2200      	movs	r2, #0
 80146fa:	2300      	movs	r3, #0
 80146fc:	e7f3      	b.n	80146e6 <__ieee754_log+0x1e>
 80146fe:	4bae      	ldr	r3, [pc, #696]	; (80149b8 <__ieee754_log+0x2f0>)
 8014700:	2200      	movs	r2, #0
 8014702:	f7ed fdef 	bl	80022e4 <__aeabi_dmul>
 8014706:	2436      	movs	r4, #54	; 0x36
 8014708:	000b      	movs	r3, r1
 801470a:	4264      	negs	r4, r4
 801470c:	4aab      	ldr	r2, [pc, #684]	; (80149bc <__ieee754_log+0x2f4>)
 801470e:	4293      	cmp	r3, r2
 8014710:	dd06      	ble.n	8014720 <__ieee754_log+0x58>
 8014712:	0002      	movs	r2, r0
 8014714:	000b      	movs	r3, r1
 8014716:	f7ec fe75 	bl	8001404 <__aeabi_dadd>
 801471a:	e7e6      	b.n	80146ea <__ieee754_log+0x22>
 801471c:	2400      	movs	r4, #0
 801471e:	e7f5      	b.n	801470c <__ieee754_log+0x44>
 8014720:	4da7      	ldr	r5, [pc, #668]	; (80149c0 <__ieee754_log+0x2f8>)
 8014722:	151a      	asrs	r2, r3, #20
 8014724:	1952      	adds	r2, r2, r5
 8014726:	1912      	adds	r2, r2, r4
 8014728:	031b      	lsls	r3, r3, #12
 801472a:	4ca6      	ldr	r4, [pc, #664]	; (80149c4 <__ieee754_log+0x2fc>)
 801472c:	0b1b      	lsrs	r3, r3, #12
 801472e:	9302      	str	r3, [sp, #8]
 8014730:	191c      	adds	r4, r3, r4
 8014732:	2380      	movs	r3, #128	; 0x80
 8014734:	035b      	lsls	r3, r3, #13
 8014736:	4023      	ands	r3, r4
 8014738:	4ca3      	ldr	r4, [pc, #652]	; (80149c8 <__ieee754_log+0x300>)
 801473a:	9d02      	ldr	r5, [sp, #8]
 801473c:	405c      	eors	r4, r3
 801473e:	151b      	asrs	r3, r3, #20
 8014740:	189b      	adds	r3, r3, r2
 8014742:	4325      	orrs	r5, r4
 8014744:	2200      	movs	r2, #0
 8014746:	9300      	str	r3, [sp, #0]
 8014748:	0029      	movs	r1, r5
 801474a:	4b9f      	ldr	r3, [pc, #636]	; (80149c8 <__ieee754_log+0x300>)
 801474c:	f7ee f836 	bl	80027bc <__aeabi_dsub>
 8014750:	9b02      	ldr	r3, [sp, #8]
 8014752:	0006      	movs	r6, r0
 8014754:	3302      	adds	r3, #2
 8014756:	031b      	lsls	r3, r3, #12
 8014758:	000f      	movs	r7, r1
 801475a:	2200      	movs	r2, #0
 801475c:	0b1b      	lsrs	r3, r3, #12
 801475e:	2b02      	cmp	r3, #2
 8014760:	dc64      	bgt.n	801482c <__ieee754_log+0x164>
 8014762:	2300      	movs	r3, #0
 8014764:	f7eb fe5c 	bl	8000420 <__aeabi_dcmpeq>
 8014768:	2800      	cmp	r0, #0
 801476a:	d019      	beq.n	80147a0 <__ieee754_log+0xd8>
 801476c:	9b00      	ldr	r3, [sp, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d100      	bne.n	8014774 <__ieee754_log+0xac>
 8014772:	e11c      	b.n	80149ae <__ieee754_log+0x2e6>
 8014774:	0018      	movs	r0, r3
 8014776:	f7ee fc07 	bl	8002f88 <__aeabi_i2d>
 801477a:	4a94      	ldr	r2, [pc, #592]	; (80149cc <__ieee754_log+0x304>)
 801477c:	4b94      	ldr	r3, [pc, #592]	; (80149d0 <__ieee754_log+0x308>)
 801477e:	0004      	movs	r4, r0
 8014780:	000d      	movs	r5, r1
 8014782:	f7ed fdaf 	bl	80022e4 <__aeabi_dmul>
 8014786:	4a93      	ldr	r2, [pc, #588]	; (80149d4 <__ieee754_log+0x30c>)
 8014788:	0006      	movs	r6, r0
 801478a:	000f      	movs	r7, r1
 801478c:	4b92      	ldr	r3, [pc, #584]	; (80149d8 <__ieee754_log+0x310>)
 801478e:	0020      	movs	r0, r4
 8014790:	0029      	movs	r1, r5
 8014792:	f7ed fda7 	bl	80022e4 <__aeabi_dmul>
 8014796:	0002      	movs	r2, r0
 8014798:	000b      	movs	r3, r1
 801479a:	0030      	movs	r0, r6
 801479c:	0039      	movs	r1, r7
 801479e:	e7ba      	b.n	8014716 <__ieee754_log+0x4e>
 80147a0:	4a8e      	ldr	r2, [pc, #568]	; (80149dc <__ieee754_log+0x314>)
 80147a2:	4b8f      	ldr	r3, [pc, #572]	; (80149e0 <__ieee754_log+0x318>)
 80147a4:	0030      	movs	r0, r6
 80147a6:	0039      	movs	r1, r7
 80147a8:	f7ed fd9c 	bl	80022e4 <__aeabi_dmul>
 80147ac:	0002      	movs	r2, r0
 80147ae:	000b      	movs	r3, r1
 80147b0:	2000      	movs	r0, #0
 80147b2:	498c      	ldr	r1, [pc, #560]	; (80149e4 <__ieee754_log+0x31c>)
 80147b4:	f7ee f802 	bl	80027bc <__aeabi_dsub>
 80147b8:	0032      	movs	r2, r6
 80147ba:	0004      	movs	r4, r0
 80147bc:	000d      	movs	r5, r1
 80147be:	003b      	movs	r3, r7
 80147c0:	0030      	movs	r0, r6
 80147c2:	0039      	movs	r1, r7
 80147c4:	f7ed fd8e 	bl	80022e4 <__aeabi_dmul>
 80147c8:	000b      	movs	r3, r1
 80147ca:	0002      	movs	r2, r0
 80147cc:	0029      	movs	r1, r5
 80147ce:	0020      	movs	r0, r4
 80147d0:	f7ed fd88 	bl	80022e4 <__aeabi_dmul>
 80147d4:	9b00      	ldr	r3, [sp, #0]
 80147d6:	9002      	str	r0, [sp, #8]
 80147d8:	9103      	str	r1, [sp, #12]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d106      	bne.n	80147ec <__ieee754_log+0x124>
 80147de:	0002      	movs	r2, r0
 80147e0:	000b      	movs	r3, r1
 80147e2:	0030      	movs	r0, r6
 80147e4:	0039      	movs	r1, r7
 80147e6:	f7ed ffe9 	bl	80027bc <__aeabi_dsub>
 80147ea:	e77e      	b.n	80146ea <__ieee754_log+0x22>
 80147ec:	9800      	ldr	r0, [sp, #0]
 80147ee:	f7ee fbcb 	bl	8002f88 <__aeabi_i2d>
 80147f2:	4a76      	ldr	r2, [pc, #472]	; (80149cc <__ieee754_log+0x304>)
 80147f4:	4b76      	ldr	r3, [pc, #472]	; (80149d0 <__ieee754_log+0x308>)
 80147f6:	0004      	movs	r4, r0
 80147f8:	000d      	movs	r5, r1
 80147fa:	f7ed fd73 	bl	80022e4 <__aeabi_dmul>
 80147fe:	4a75      	ldr	r2, [pc, #468]	; (80149d4 <__ieee754_log+0x30c>)
 8014800:	9000      	str	r0, [sp, #0]
 8014802:	9101      	str	r1, [sp, #4]
 8014804:	4b74      	ldr	r3, [pc, #464]	; (80149d8 <__ieee754_log+0x310>)
 8014806:	0020      	movs	r0, r4
 8014808:	0029      	movs	r1, r5
 801480a:	f7ed fd6b 	bl	80022e4 <__aeabi_dmul>
 801480e:	0002      	movs	r2, r0
 8014810:	000b      	movs	r3, r1
 8014812:	9802      	ldr	r0, [sp, #8]
 8014814:	9903      	ldr	r1, [sp, #12]
 8014816:	f7ed ffd1 	bl	80027bc <__aeabi_dsub>
 801481a:	0032      	movs	r2, r6
 801481c:	003b      	movs	r3, r7
 801481e:	f7ed ffcd 	bl	80027bc <__aeabi_dsub>
 8014822:	0002      	movs	r2, r0
 8014824:	000b      	movs	r3, r1
 8014826:	9800      	ldr	r0, [sp, #0]
 8014828:	9901      	ldr	r1, [sp, #4]
 801482a:	e7dc      	b.n	80147e6 <__ieee754_log+0x11e>
 801482c:	2380      	movs	r3, #128	; 0x80
 801482e:	05db      	lsls	r3, r3, #23
 8014830:	f7ec fde8 	bl	8001404 <__aeabi_dadd>
 8014834:	0002      	movs	r2, r0
 8014836:	000b      	movs	r3, r1
 8014838:	0030      	movs	r0, r6
 801483a:	0039      	movs	r1, r7
 801483c:	f7ed f94c 	bl	8001ad8 <__aeabi_ddiv>
 8014840:	9004      	str	r0, [sp, #16]
 8014842:	9105      	str	r1, [sp, #20]
 8014844:	9800      	ldr	r0, [sp, #0]
 8014846:	f7ee fb9f 	bl	8002f88 <__aeabi_i2d>
 801484a:	9a04      	ldr	r2, [sp, #16]
 801484c:	9b05      	ldr	r3, [sp, #20]
 801484e:	9006      	str	r0, [sp, #24]
 8014850:	9107      	str	r1, [sp, #28]
 8014852:	0010      	movs	r0, r2
 8014854:	0019      	movs	r1, r3
 8014856:	f7ed fd45 	bl	80022e4 <__aeabi_dmul>
 801485a:	4a63      	ldr	r2, [pc, #396]	; (80149e8 <__ieee754_log+0x320>)
 801485c:	9b02      	ldr	r3, [sp, #8]
 801485e:	4694      	mov	ip, r2
 8014860:	4463      	add	r3, ip
 8014862:	0002      	movs	r2, r0
 8014864:	930b      	str	r3, [sp, #44]	; 0x2c
 8014866:	000b      	movs	r3, r1
 8014868:	9008      	str	r0, [sp, #32]
 801486a:	9109      	str	r1, [sp, #36]	; 0x24
 801486c:	f7ed fd3a 	bl	80022e4 <__aeabi_dmul>
 8014870:	0004      	movs	r4, r0
 8014872:	000d      	movs	r5, r1
 8014874:	4a5d      	ldr	r2, [pc, #372]	; (80149ec <__ieee754_log+0x324>)
 8014876:	4b5e      	ldr	r3, [pc, #376]	; (80149f0 <__ieee754_log+0x328>)
 8014878:	f7ed fd34 	bl	80022e4 <__aeabi_dmul>
 801487c:	4a5d      	ldr	r2, [pc, #372]	; (80149f4 <__ieee754_log+0x32c>)
 801487e:	4b5e      	ldr	r3, [pc, #376]	; (80149f8 <__ieee754_log+0x330>)
 8014880:	f7ec fdc0 	bl	8001404 <__aeabi_dadd>
 8014884:	0022      	movs	r2, r4
 8014886:	002b      	movs	r3, r5
 8014888:	f7ed fd2c 	bl	80022e4 <__aeabi_dmul>
 801488c:	4a5b      	ldr	r2, [pc, #364]	; (80149fc <__ieee754_log+0x334>)
 801488e:	4b5c      	ldr	r3, [pc, #368]	; (8014a00 <__ieee754_log+0x338>)
 8014890:	f7ec fdb8 	bl	8001404 <__aeabi_dadd>
 8014894:	0022      	movs	r2, r4
 8014896:	002b      	movs	r3, r5
 8014898:	f7ed fd24 	bl	80022e4 <__aeabi_dmul>
 801489c:	4a59      	ldr	r2, [pc, #356]	; (8014a04 <__ieee754_log+0x33c>)
 801489e:	4b5a      	ldr	r3, [pc, #360]	; (8014a08 <__ieee754_log+0x340>)
 80148a0:	f7ec fdb0 	bl	8001404 <__aeabi_dadd>
 80148a4:	9a08      	ldr	r2, [sp, #32]
 80148a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a8:	f7ed fd1c 	bl	80022e4 <__aeabi_dmul>
 80148ac:	4a57      	ldr	r2, [pc, #348]	; (8014a0c <__ieee754_log+0x344>)
 80148ae:	9008      	str	r0, [sp, #32]
 80148b0:	9109      	str	r1, [sp, #36]	; 0x24
 80148b2:	4b57      	ldr	r3, [pc, #348]	; (8014a10 <__ieee754_log+0x348>)
 80148b4:	0020      	movs	r0, r4
 80148b6:	0029      	movs	r1, r5
 80148b8:	f7ed fd14 	bl	80022e4 <__aeabi_dmul>
 80148bc:	4a55      	ldr	r2, [pc, #340]	; (8014a14 <__ieee754_log+0x34c>)
 80148be:	4b56      	ldr	r3, [pc, #344]	; (8014a18 <__ieee754_log+0x350>)
 80148c0:	f7ec fda0 	bl	8001404 <__aeabi_dadd>
 80148c4:	0022      	movs	r2, r4
 80148c6:	002b      	movs	r3, r5
 80148c8:	f7ed fd0c 	bl	80022e4 <__aeabi_dmul>
 80148cc:	4a53      	ldr	r2, [pc, #332]	; (8014a1c <__ieee754_log+0x354>)
 80148ce:	4b54      	ldr	r3, [pc, #336]	; (8014a20 <__ieee754_log+0x358>)
 80148d0:	f7ec fd98 	bl	8001404 <__aeabi_dadd>
 80148d4:	0022      	movs	r2, r4
 80148d6:	002b      	movs	r3, r5
 80148d8:	f7ed fd04 	bl	80022e4 <__aeabi_dmul>
 80148dc:	0002      	movs	r2, r0
 80148de:	000b      	movs	r3, r1
 80148e0:	9808      	ldr	r0, [sp, #32]
 80148e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148e4:	f7ec fd8e 	bl	8001404 <__aeabi_dadd>
 80148e8:	9a02      	ldr	r2, [sp, #8]
 80148ea:	4b4e      	ldr	r3, [pc, #312]	; (8014a24 <__ieee754_log+0x35c>)
 80148ec:	0004      	movs	r4, r0
 80148ee:	1a9b      	subs	r3, r3, r2
 80148f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80148f2:	000d      	movs	r5, r1
 80148f4:	4313      	orrs	r3, r2
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	dd34      	ble.n	8014964 <__ieee754_log+0x29c>
 80148fa:	2200      	movs	r2, #0
 80148fc:	4b39      	ldr	r3, [pc, #228]	; (80149e4 <__ieee754_log+0x31c>)
 80148fe:	0030      	movs	r0, r6
 8014900:	0039      	movs	r1, r7
 8014902:	f7ed fcef 	bl	80022e4 <__aeabi_dmul>
 8014906:	0032      	movs	r2, r6
 8014908:	003b      	movs	r3, r7
 801490a:	f7ed fceb 	bl	80022e4 <__aeabi_dmul>
 801490e:	0002      	movs	r2, r0
 8014910:	000b      	movs	r3, r1
 8014912:	9002      	str	r0, [sp, #8]
 8014914:	9103      	str	r1, [sp, #12]
 8014916:	0020      	movs	r0, r4
 8014918:	0029      	movs	r1, r5
 801491a:	f7ec fd73 	bl	8001404 <__aeabi_dadd>
 801491e:	9a04      	ldr	r2, [sp, #16]
 8014920:	9b05      	ldr	r3, [sp, #20]
 8014922:	f7ed fcdf 	bl	80022e4 <__aeabi_dmul>
 8014926:	9b00      	ldr	r3, [sp, #0]
 8014928:	0004      	movs	r4, r0
 801492a:	000d      	movs	r5, r1
 801492c:	2b00      	cmp	r3, #0
 801492e:	d106      	bne.n	801493e <__ieee754_log+0x276>
 8014930:	0002      	movs	r2, r0
 8014932:	000b      	movs	r3, r1
 8014934:	9802      	ldr	r0, [sp, #8]
 8014936:	9903      	ldr	r1, [sp, #12]
 8014938:	f7ed ff40 	bl	80027bc <__aeabi_dsub>
 801493c:	e74f      	b.n	80147de <__ieee754_log+0x116>
 801493e:	4a23      	ldr	r2, [pc, #140]	; (80149cc <__ieee754_log+0x304>)
 8014940:	4b23      	ldr	r3, [pc, #140]	; (80149d0 <__ieee754_log+0x308>)
 8014942:	9806      	ldr	r0, [sp, #24]
 8014944:	9907      	ldr	r1, [sp, #28]
 8014946:	f7ed fccd 	bl	80022e4 <__aeabi_dmul>
 801494a:	4a22      	ldr	r2, [pc, #136]	; (80149d4 <__ieee754_log+0x30c>)
 801494c:	9000      	str	r0, [sp, #0]
 801494e:	9101      	str	r1, [sp, #4]
 8014950:	9806      	ldr	r0, [sp, #24]
 8014952:	9907      	ldr	r1, [sp, #28]
 8014954:	4b20      	ldr	r3, [pc, #128]	; (80149d8 <__ieee754_log+0x310>)
 8014956:	f7ed fcc5 	bl	80022e4 <__aeabi_dmul>
 801495a:	0022      	movs	r2, r4
 801495c:	002b      	movs	r3, r5
 801495e:	f7ec fd51 	bl	8001404 <__aeabi_dadd>
 8014962:	e754      	b.n	801480e <__ieee754_log+0x146>
 8014964:	0002      	movs	r2, r0
 8014966:	000b      	movs	r3, r1
 8014968:	0030      	movs	r0, r6
 801496a:	0039      	movs	r1, r7
 801496c:	f7ed ff26 	bl	80027bc <__aeabi_dsub>
 8014970:	9a04      	ldr	r2, [sp, #16]
 8014972:	9b05      	ldr	r3, [sp, #20]
 8014974:	f7ed fcb6 	bl	80022e4 <__aeabi_dmul>
 8014978:	9b00      	ldr	r3, [sp, #0]
 801497a:	0004      	movs	r4, r0
 801497c:	000d      	movs	r5, r1
 801497e:	2b00      	cmp	r3, #0
 8014980:	d102      	bne.n	8014988 <__ieee754_log+0x2c0>
 8014982:	0002      	movs	r2, r0
 8014984:	000b      	movs	r3, r1
 8014986:	e72c      	b.n	80147e2 <__ieee754_log+0x11a>
 8014988:	4a10      	ldr	r2, [pc, #64]	; (80149cc <__ieee754_log+0x304>)
 801498a:	4b11      	ldr	r3, [pc, #68]	; (80149d0 <__ieee754_log+0x308>)
 801498c:	9806      	ldr	r0, [sp, #24]
 801498e:	9907      	ldr	r1, [sp, #28]
 8014990:	f7ed fca8 	bl	80022e4 <__aeabi_dmul>
 8014994:	4a0f      	ldr	r2, [pc, #60]	; (80149d4 <__ieee754_log+0x30c>)
 8014996:	9000      	str	r0, [sp, #0]
 8014998:	9101      	str	r1, [sp, #4]
 801499a:	9806      	ldr	r0, [sp, #24]
 801499c:	9907      	ldr	r1, [sp, #28]
 801499e:	4b0e      	ldr	r3, [pc, #56]	; (80149d8 <__ieee754_log+0x310>)
 80149a0:	f7ed fca0 	bl	80022e4 <__aeabi_dmul>
 80149a4:	0002      	movs	r2, r0
 80149a6:	000b      	movs	r3, r1
 80149a8:	0020      	movs	r0, r4
 80149aa:	0029      	movs	r1, r5
 80149ac:	e733      	b.n	8014816 <__ieee754_log+0x14e>
 80149ae:	2000      	movs	r0, #0
 80149b0:	2100      	movs	r1, #0
 80149b2:	e69a      	b.n	80146ea <__ieee754_log+0x22>
 80149b4:	c3500000 	.word	0xc3500000
 80149b8:	43500000 	.word	0x43500000
 80149bc:	7fefffff 	.word	0x7fefffff
 80149c0:	fffffc01 	.word	0xfffffc01
 80149c4:	00095f64 	.word	0x00095f64
 80149c8:	3ff00000 	.word	0x3ff00000
 80149cc:	fee00000 	.word	0xfee00000
 80149d0:	3fe62e42 	.word	0x3fe62e42
 80149d4:	35793c76 	.word	0x35793c76
 80149d8:	3dea39ef 	.word	0x3dea39ef
 80149dc:	55555555 	.word	0x55555555
 80149e0:	3fd55555 	.word	0x3fd55555
 80149e4:	3fe00000 	.word	0x3fe00000
 80149e8:	fff9eb86 	.word	0xfff9eb86
 80149ec:	df3e5244 	.word	0xdf3e5244
 80149f0:	3fc2f112 	.word	0x3fc2f112
 80149f4:	96cb03de 	.word	0x96cb03de
 80149f8:	3fc74664 	.word	0x3fc74664
 80149fc:	94229359 	.word	0x94229359
 8014a00:	3fd24924 	.word	0x3fd24924
 8014a04:	55555593 	.word	0x55555593
 8014a08:	3fe55555 	.word	0x3fe55555
 8014a0c:	d078c69f 	.word	0xd078c69f
 8014a10:	3fc39a09 	.word	0x3fc39a09
 8014a14:	1d8e78af 	.word	0x1d8e78af
 8014a18:	3fcc71c5 	.word	0x3fcc71c5
 8014a1c:	9997fa04 	.word	0x9997fa04
 8014a20:	3fd99999 	.word	0x3fd99999
 8014a24:	0006b851 	.word	0x0006b851

08014a28 <__ieee754_rem_pio2>:
 8014a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a2a:	004b      	lsls	r3, r1, #1
 8014a2c:	b091      	sub	sp, #68	; 0x44
 8014a2e:	085b      	lsrs	r3, r3, #1
 8014a30:	9302      	str	r3, [sp, #8]
 8014a32:	0017      	movs	r7, r2
 8014a34:	4bb6      	ldr	r3, [pc, #728]	; (8014d10 <__ieee754_rem_pio2+0x2e8>)
 8014a36:	9a02      	ldr	r2, [sp, #8]
 8014a38:	0004      	movs	r4, r0
 8014a3a:	000d      	movs	r5, r1
 8014a3c:	9109      	str	r1, [sp, #36]	; 0x24
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	dc09      	bgt.n	8014a56 <__ieee754_rem_pio2+0x2e>
 8014a42:	0002      	movs	r2, r0
 8014a44:	000b      	movs	r3, r1
 8014a46:	603a      	str	r2, [r7, #0]
 8014a48:	607b      	str	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	60ba      	str	r2, [r7, #8]
 8014a50:	60fb      	str	r3, [r7, #12]
 8014a52:	2600      	movs	r6, #0
 8014a54:	e025      	b.n	8014aa2 <__ieee754_rem_pio2+0x7a>
 8014a56:	4baf      	ldr	r3, [pc, #700]	; (8014d14 <__ieee754_rem_pio2+0x2ec>)
 8014a58:	9a02      	ldr	r2, [sp, #8]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	dd00      	ble.n	8014a60 <__ieee754_rem_pio2+0x38>
 8014a5e:	e06e      	b.n	8014b3e <__ieee754_rem_pio2+0x116>
 8014a60:	4ead      	ldr	r6, [pc, #692]	; (8014d18 <__ieee754_rem_pio2+0x2f0>)
 8014a62:	4aae      	ldr	r2, [pc, #696]	; (8014d1c <__ieee754_rem_pio2+0x2f4>)
 8014a64:	2d00      	cmp	r5, #0
 8014a66:	dd35      	ble.n	8014ad4 <__ieee754_rem_pio2+0xac>
 8014a68:	0020      	movs	r0, r4
 8014a6a:	0029      	movs	r1, r5
 8014a6c:	4baa      	ldr	r3, [pc, #680]	; (8014d18 <__ieee754_rem_pio2+0x2f0>)
 8014a6e:	f7ed fea5 	bl	80027bc <__aeabi_dsub>
 8014a72:	9b02      	ldr	r3, [sp, #8]
 8014a74:	0004      	movs	r4, r0
 8014a76:	000d      	movs	r5, r1
 8014a78:	42b3      	cmp	r3, r6
 8014a7a:	d015      	beq.n	8014aa8 <__ieee754_rem_pio2+0x80>
 8014a7c:	4aa8      	ldr	r2, [pc, #672]	; (8014d20 <__ieee754_rem_pio2+0x2f8>)
 8014a7e:	4ba9      	ldr	r3, [pc, #676]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014a80:	f7ed fe9c 	bl	80027bc <__aeabi_dsub>
 8014a84:	0002      	movs	r2, r0
 8014a86:	000b      	movs	r3, r1
 8014a88:	0020      	movs	r0, r4
 8014a8a:	603a      	str	r2, [r7, #0]
 8014a8c:	607b      	str	r3, [r7, #4]
 8014a8e:	0029      	movs	r1, r5
 8014a90:	f7ed fe94 	bl	80027bc <__aeabi_dsub>
 8014a94:	4aa2      	ldr	r2, [pc, #648]	; (8014d20 <__ieee754_rem_pio2+0x2f8>)
 8014a96:	4ba3      	ldr	r3, [pc, #652]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014a98:	f7ed fe90 	bl	80027bc <__aeabi_dsub>
 8014a9c:	2601      	movs	r6, #1
 8014a9e:	60b8      	str	r0, [r7, #8]
 8014aa0:	60f9      	str	r1, [r7, #12]
 8014aa2:	0030      	movs	r0, r6
 8014aa4:	b011      	add	sp, #68	; 0x44
 8014aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aa8:	22d3      	movs	r2, #211	; 0xd3
 8014aaa:	4b9e      	ldr	r3, [pc, #632]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014aac:	0552      	lsls	r2, r2, #21
 8014aae:	f7ed fe85 	bl	80027bc <__aeabi_dsub>
 8014ab2:	4a9d      	ldr	r2, [pc, #628]	; (8014d28 <__ieee754_rem_pio2+0x300>)
 8014ab4:	4b9d      	ldr	r3, [pc, #628]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014ab6:	0004      	movs	r4, r0
 8014ab8:	000d      	movs	r5, r1
 8014aba:	f7ed fe7f 	bl	80027bc <__aeabi_dsub>
 8014abe:	0002      	movs	r2, r0
 8014ac0:	000b      	movs	r3, r1
 8014ac2:	0020      	movs	r0, r4
 8014ac4:	603a      	str	r2, [r7, #0]
 8014ac6:	607b      	str	r3, [r7, #4]
 8014ac8:	0029      	movs	r1, r5
 8014aca:	f7ed fe77 	bl	80027bc <__aeabi_dsub>
 8014ace:	4a96      	ldr	r2, [pc, #600]	; (8014d28 <__ieee754_rem_pio2+0x300>)
 8014ad0:	4b96      	ldr	r3, [pc, #600]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014ad2:	e7e1      	b.n	8014a98 <__ieee754_rem_pio2+0x70>
 8014ad4:	0020      	movs	r0, r4
 8014ad6:	0029      	movs	r1, r5
 8014ad8:	4b8f      	ldr	r3, [pc, #572]	; (8014d18 <__ieee754_rem_pio2+0x2f0>)
 8014ada:	f7ec fc93 	bl	8001404 <__aeabi_dadd>
 8014ade:	9b02      	ldr	r3, [sp, #8]
 8014ae0:	0004      	movs	r4, r0
 8014ae2:	000d      	movs	r5, r1
 8014ae4:	42b3      	cmp	r3, r6
 8014ae6:	d014      	beq.n	8014b12 <__ieee754_rem_pio2+0xea>
 8014ae8:	4a8d      	ldr	r2, [pc, #564]	; (8014d20 <__ieee754_rem_pio2+0x2f8>)
 8014aea:	4b8e      	ldr	r3, [pc, #568]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014aec:	f7ec fc8a 	bl	8001404 <__aeabi_dadd>
 8014af0:	0002      	movs	r2, r0
 8014af2:	000b      	movs	r3, r1
 8014af4:	0020      	movs	r0, r4
 8014af6:	603a      	str	r2, [r7, #0]
 8014af8:	607b      	str	r3, [r7, #4]
 8014afa:	0029      	movs	r1, r5
 8014afc:	f7ed fe5e 	bl	80027bc <__aeabi_dsub>
 8014b00:	4a87      	ldr	r2, [pc, #540]	; (8014d20 <__ieee754_rem_pio2+0x2f8>)
 8014b02:	4b88      	ldr	r3, [pc, #544]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014b04:	f7ec fc7e 	bl	8001404 <__aeabi_dadd>
 8014b08:	2601      	movs	r6, #1
 8014b0a:	60b8      	str	r0, [r7, #8]
 8014b0c:	60f9      	str	r1, [r7, #12]
 8014b0e:	4276      	negs	r6, r6
 8014b10:	e7c7      	b.n	8014aa2 <__ieee754_rem_pio2+0x7a>
 8014b12:	22d3      	movs	r2, #211	; 0xd3
 8014b14:	4b83      	ldr	r3, [pc, #524]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014b16:	0552      	lsls	r2, r2, #21
 8014b18:	f7ec fc74 	bl	8001404 <__aeabi_dadd>
 8014b1c:	4a82      	ldr	r2, [pc, #520]	; (8014d28 <__ieee754_rem_pio2+0x300>)
 8014b1e:	4b83      	ldr	r3, [pc, #524]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014b20:	0004      	movs	r4, r0
 8014b22:	000d      	movs	r5, r1
 8014b24:	f7ec fc6e 	bl	8001404 <__aeabi_dadd>
 8014b28:	0002      	movs	r2, r0
 8014b2a:	000b      	movs	r3, r1
 8014b2c:	0020      	movs	r0, r4
 8014b2e:	603a      	str	r2, [r7, #0]
 8014b30:	607b      	str	r3, [r7, #4]
 8014b32:	0029      	movs	r1, r5
 8014b34:	f7ed fe42 	bl	80027bc <__aeabi_dsub>
 8014b38:	4a7b      	ldr	r2, [pc, #492]	; (8014d28 <__ieee754_rem_pio2+0x300>)
 8014b3a:	4b7c      	ldr	r3, [pc, #496]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014b3c:	e7e2      	b.n	8014b04 <__ieee754_rem_pio2+0xdc>
 8014b3e:	4b7c      	ldr	r3, [pc, #496]	; (8014d30 <__ieee754_rem_pio2+0x308>)
 8014b40:	9a02      	ldr	r2, [sp, #8]
 8014b42:	429a      	cmp	r2, r3
 8014b44:	dd00      	ble.n	8014b48 <__ieee754_rem_pio2+0x120>
 8014b46:	e0d3      	b.n	8014cf0 <__ieee754_rem_pio2+0x2c8>
 8014b48:	0020      	movs	r0, r4
 8014b4a:	0029      	movs	r1, r5
 8014b4c:	f000 ffba 	bl	8015ac4 <fabs>
 8014b50:	4a78      	ldr	r2, [pc, #480]	; (8014d34 <__ieee754_rem_pio2+0x30c>)
 8014b52:	4b79      	ldr	r3, [pc, #484]	; (8014d38 <__ieee754_rem_pio2+0x310>)
 8014b54:	0004      	movs	r4, r0
 8014b56:	000d      	movs	r5, r1
 8014b58:	f7ed fbc4 	bl	80022e4 <__aeabi_dmul>
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	4b77      	ldr	r3, [pc, #476]	; (8014d3c <__ieee754_rem_pio2+0x314>)
 8014b60:	f7ec fc50 	bl	8001404 <__aeabi_dadd>
 8014b64:	f7ee f9da 	bl	8002f1c <__aeabi_d2iz>
 8014b68:	0006      	movs	r6, r0
 8014b6a:	f7ee fa0d 	bl	8002f88 <__aeabi_i2d>
 8014b6e:	4a6b      	ldr	r2, [pc, #428]	; (8014d1c <__ieee754_rem_pio2+0x2f4>)
 8014b70:	4b69      	ldr	r3, [pc, #420]	; (8014d18 <__ieee754_rem_pio2+0x2f0>)
 8014b72:	9006      	str	r0, [sp, #24]
 8014b74:	9107      	str	r1, [sp, #28]
 8014b76:	f7ed fbb5 	bl	80022e4 <__aeabi_dmul>
 8014b7a:	0002      	movs	r2, r0
 8014b7c:	000b      	movs	r3, r1
 8014b7e:	0020      	movs	r0, r4
 8014b80:	0029      	movs	r1, r5
 8014b82:	f7ed fe1b 	bl	80027bc <__aeabi_dsub>
 8014b86:	4a66      	ldr	r2, [pc, #408]	; (8014d20 <__ieee754_rem_pio2+0x2f8>)
 8014b88:	9004      	str	r0, [sp, #16]
 8014b8a:	9105      	str	r1, [sp, #20]
 8014b8c:	9806      	ldr	r0, [sp, #24]
 8014b8e:	9907      	ldr	r1, [sp, #28]
 8014b90:	4b64      	ldr	r3, [pc, #400]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014b92:	f7ed fba7 	bl	80022e4 <__aeabi_dmul>
 8014b96:	0004      	movs	r4, r0
 8014b98:	000d      	movs	r5, r1
 8014b9a:	2e1f      	cmp	r6, #31
 8014b9c:	dc0f      	bgt.n	8014bbe <__ieee754_rem_pio2+0x196>
 8014b9e:	4a68      	ldr	r2, [pc, #416]	; (8014d40 <__ieee754_rem_pio2+0x318>)
 8014ba0:	1e73      	subs	r3, r6, #1
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	589b      	ldr	r3, [r3, r2]
 8014ba6:	9a02      	ldr	r2, [sp, #8]
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d008      	beq.n	8014bbe <__ieee754_rem_pio2+0x196>
 8014bac:	9804      	ldr	r0, [sp, #16]
 8014bae:	9905      	ldr	r1, [sp, #20]
 8014bb0:	0022      	movs	r2, r4
 8014bb2:	002b      	movs	r3, r5
 8014bb4:	f7ed fe02 	bl	80027bc <__aeabi_dsub>
 8014bb8:	6038      	str	r0, [r7, #0]
 8014bba:	6079      	str	r1, [r7, #4]
 8014bbc:	e012      	b.n	8014be4 <__ieee754_rem_pio2+0x1bc>
 8014bbe:	0022      	movs	r2, r4
 8014bc0:	9804      	ldr	r0, [sp, #16]
 8014bc2:	9905      	ldr	r1, [sp, #20]
 8014bc4:	002b      	movs	r3, r5
 8014bc6:	f7ed fdf9 	bl	80027bc <__aeabi_dsub>
 8014bca:	9b02      	ldr	r3, [sp, #8]
 8014bcc:	151b      	asrs	r3, r3, #20
 8014bce:	9308      	str	r3, [sp, #32]
 8014bd0:	9a08      	ldr	r2, [sp, #32]
 8014bd2:	004b      	lsls	r3, r1, #1
 8014bd4:	0d5b      	lsrs	r3, r3, #21
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	2b10      	cmp	r3, #16
 8014bda:	dc21      	bgt.n	8014c20 <__ieee754_rem_pio2+0x1f8>
 8014bdc:	0002      	movs	r2, r0
 8014bde:	000b      	movs	r3, r1
 8014be0:	603a      	str	r2, [r7, #0]
 8014be2:	607b      	str	r3, [r7, #4]
 8014be4:	9804      	ldr	r0, [sp, #16]
 8014be6:	9905      	ldr	r1, [sp, #20]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	683a      	ldr	r2, [r7, #0]
 8014bec:	9302      	str	r3, [sp, #8]
 8014bee:	9b02      	ldr	r3, [sp, #8]
 8014bf0:	f7ed fde4 	bl	80027bc <__aeabi_dsub>
 8014bf4:	0022      	movs	r2, r4
 8014bf6:	002b      	movs	r3, r5
 8014bf8:	f7ed fde0 	bl	80027bc <__aeabi_dsub>
 8014bfc:	000b      	movs	r3, r1
 8014bfe:	0002      	movs	r2, r0
 8014c00:	60ba      	str	r2, [r7, #8]
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	db00      	blt.n	8014c0c <__ieee754_rem_pio2+0x1e4>
 8014c0a:	e74a      	b.n	8014aa2 <__ieee754_rem_pio2+0x7a>
 8014c0c:	2280      	movs	r2, #128	; 0x80
 8014c0e:	0612      	lsls	r2, r2, #24
 8014c10:	4694      	mov	ip, r2
 8014c12:	9b02      	ldr	r3, [sp, #8]
 8014c14:	1889      	adds	r1, r1, r2
 8014c16:	4463      	add	r3, ip
 8014c18:	607b      	str	r3, [r7, #4]
 8014c1a:	60b8      	str	r0, [r7, #8]
 8014c1c:	60f9      	str	r1, [r7, #12]
 8014c1e:	e776      	b.n	8014b0e <__ieee754_rem_pio2+0xe6>
 8014c20:	22d3      	movs	r2, #211	; 0xd3
 8014c22:	9806      	ldr	r0, [sp, #24]
 8014c24:	9907      	ldr	r1, [sp, #28]
 8014c26:	4b3f      	ldr	r3, [pc, #252]	; (8014d24 <__ieee754_rem_pio2+0x2fc>)
 8014c28:	0552      	lsls	r2, r2, #21
 8014c2a:	f7ed fb5b 	bl	80022e4 <__aeabi_dmul>
 8014c2e:	0004      	movs	r4, r0
 8014c30:	000d      	movs	r5, r1
 8014c32:	0002      	movs	r2, r0
 8014c34:	000b      	movs	r3, r1
 8014c36:	9804      	ldr	r0, [sp, #16]
 8014c38:	9905      	ldr	r1, [sp, #20]
 8014c3a:	f7ed fdbf 	bl	80027bc <__aeabi_dsub>
 8014c3e:	0002      	movs	r2, r0
 8014c40:	000b      	movs	r3, r1
 8014c42:	9002      	str	r0, [sp, #8]
 8014c44:	9103      	str	r1, [sp, #12]
 8014c46:	9804      	ldr	r0, [sp, #16]
 8014c48:	9905      	ldr	r1, [sp, #20]
 8014c4a:	f7ed fdb7 	bl	80027bc <__aeabi_dsub>
 8014c4e:	0022      	movs	r2, r4
 8014c50:	002b      	movs	r3, r5
 8014c52:	f7ed fdb3 	bl	80027bc <__aeabi_dsub>
 8014c56:	0004      	movs	r4, r0
 8014c58:	000d      	movs	r5, r1
 8014c5a:	9806      	ldr	r0, [sp, #24]
 8014c5c:	9907      	ldr	r1, [sp, #28]
 8014c5e:	4a32      	ldr	r2, [pc, #200]	; (8014d28 <__ieee754_rem_pio2+0x300>)
 8014c60:	4b32      	ldr	r3, [pc, #200]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014c62:	f7ed fb3f 	bl	80022e4 <__aeabi_dmul>
 8014c66:	0022      	movs	r2, r4
 8014c68:	002b      	movs	r3, r5
 8014c6a:	f7ed fda7 	bl	80027bc <__aeabi_dsub>
 8014c6e:	0002      	movs	r2, r0
 8014c70:	000b      	movs	r3, r1
 8014c72:	0004      	movs	r4, r0
 8014c74:	000d      	movs	r5, r1
 8014c76:	9802      	ldr	r0, [sp, #8]
 8014c78:	9903      	ldr	r1, [sp, #12]
 8014c7a:	f7ed fd9f 	bl	80027bc <__aeabi_dsub>
 8014c7e:	9a08      	ldr	r2, [sp, #32]
 8014c80:	004b      	lsls	r3, r1, #1
 8014c82:	0d5b      	lsrs	r3, r3, #21
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	2b31      	cmp	r3, #49	; 0x31
 8014c88:	dc08      	bgt.n	8014c9c <__ieee754_rem_pio2+0x274>
 8014c8a:	0002      	movs	r2, r0
 8014c8c:	000b      	movs	r3, r1
 8014c8e:	603a      	str	r2, [r7, #0]
 8014c90:	607b      	str	r3, [r7, #4]
 8014c92:	9a02      	ldr	r2, [sp, #8]
 8014c94:	9b03      	ldr	r3, [sp, #12]
 8014c96:	9204      	str	r2, [sp, #16]
 8014c98:	9305      	str	r3, [sp, #20]
 8014c9a:	e7a3      	b.n	8014be4 <__ieee754_rem_pio2+0x1bc>
 8014c9c:	22b8      	movs	r2, #184	; 0xb8
 8014c9e:	9806      	ldr	r0, [sp, #24]
 8014ca0:	9907      	ldr	r1, [sp, #28]
 8014ca2:	4b22      	ldr	r3, [pc, #136]	; (8014d2c <__ieee754_rem_pio2+0x304>)
 8014ca4:	0592      	lsls	r2, r2, #22
 8014ca6:	f7ed fb1d 	bl	80022e4 <__aeabi_dmul>
 8014caa:	0004      	movs	r4, r0
 8014cac:	000d      	movs	r5, r1
 8014cae:	0002      	movs	r2, r0
 8014cb0:	000b      	movs	r3, r1
 8014cb2:	9802      	ldr	r0, [sp, #8]
 8014cb4:	9903      	ldr	r1, [sp, #12]
 8014cb6:	f7ed fd81 	bl	80027bc <__aeabi_dsub>
 8014cba:	0002      	movs	r2, r0
 8014cbc:	000b      	movs	r3, r1
 8014cbe:	9004      	str	r0, [sp, #16]
 8014cc0:	9105      	str	r1, [sp, #20]
 8014cc2:	9802      	ldr	r0, [sp, #8]
 8014cc4:	9903      	ldr	r1, [sp, #12]
 8014cc6:	f7ed fd79 	bl	80027bc <__aeabi_dsub>
 8014cca:	0022      	movs	r2, r4
 8014ccc:	002b      	movs	r3, r5
 8014cce:	f7ed fd75 	bl	80027bc <__aeabi_dsub>
 8014cd2:	0004      	movs	r4, r0
 8014cd4:	000d      	movs	r5, r1
 8014cd6:	9806      	ldr	r0, [sp, #24]
 8014cd8:	9907      	ldr	r1, [sp, #28]
 8014cda:	4a1a      	ldr	r2, [pc, #104]	; (8014d44 <__ieee754_rem_pio2+0x31c>)
 8014cdc:	4b1a      	ldr	r3, [pc, #104]	; (8014d48 <__ieee754_rem_pio2+0x320>)
 8014cde:	f7ed fb01 	bl	80022e4 <__aeabi_dmul>
 8014ce2:	0022      	movs	r2, r4
 8014ce4:	002b      	movs	r3, r5
 8014ce6:	f7ed fd69 	bl	80027bc <__aeabi_dsub>
 8014cea:	0004      	movs	r4, r0
 8014cec:	000d      	movs	r5, r1
 8014cee:	e75d      	b.n	8014bac <__ieee754_rem_pio2+0x184>
 8014cf0:	4b16      	ldr	r3, [pc, #88]	; (8014d4c <__ieee754_rem_pio2+0x324>)
 8014cf2:	9a02      	ldr	r2, [sp, #8]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	dd2b      	ble.n	8014d50 <__ieee754_rem_pio2+0x328>
 8014cf8:	0022      	movs	r2, r4
 8014cfa:	002b      	movs	r3, r5
 8014cfc:	0020      	movs	r0, r4
 8014cfe:	0029      	movs	r1, r5
 8014d00:	f7ed fd5c 	bl	80027bc <__aeabi_dsub>
 8014d04:	60b8      	str	r0, [r7, #8]
 8014d06:	60f9      	str	r1, [r7, #12]
 8014d08:	6038      	str	r0, [r7, #0]
 8014d0a:	6079      	str	r1, [r7, #4]
 8014d0c:	e6a1      	b.n	8014a52 <__ieee754_rem_pio2+0x2a>
 8014d0e:	46c0      	nop			; (mov r8, r8)
 8014d10:	3fe921fb 	.word	0x3fe921fb
 8014d14:	4002d97b 	.word	0x4002d97b
 8014d18:	3ff921fb 	.word	0x3ff921fb
 8014d1c:	54400000 	.word	0x54400000
 8014d20:	1a626331 	.word	0x1a626331
 8014d24:	3dd0b461 	.word	0x3dd0b461
 8014d28:	2e037073 	.word	0x2e037073
 8014d2c:	3ba3198a 	.word	0x3ba3198a
 8014d30:	413921fb 	.word	0x413921fb
 8014d34:	6dc9c883 	.word	0x6dc9c883
 8014d38:	3fe45f30 	.word	0x3fe45f30
 8014d3c:	3fe00000 	.word	0x3fe00000
 8014d40:	08018670 	.word	0x08018670
 8014d44:	252049c1 	.word	0x252049c1
 8014d48:	397b839a 	.word	0x397b839a
 8014d4c:	7fefffff 	.word	0x7fefffff
 8014d50:	9a02      	ldr	r2, [sp, #8]
 8014d52:	0020      	movs	r0, r4
 8014d54:	1516      	asrs	r6, r2, #20
 8014d56:	4a27      	ldr	r2, [pc, #156]	; (8014df4 <__ieee754_rem_pio2+0x3cc>)
 8014d58:	18b6      	adds	r6, r6, r2
 8014d5a:	9a02      	ldr	r2, [sp, #8]
 8014d5c:	0533      	lsls	r3, r6, #20
 8014d5e:	1ad5      	subs	r5, r2, r3
 8014d60:	0029      	movs	r1, r5
 8014d62:	f7ee f8db 	bl	8002f1c <__aeabi_d2iz>
 8014d66:	f7ee f90f 	bl	8002f88 <__aeabi_i2d>
 8014d6a:	0002      	movs	r2, r0
 8014d6c:	000b      	movs	r3, r1
 8014d6e:	0020      	movs	r0, r4
 8014d70:	0029      	movs	r1, r5
 8014d72:	920a      	str	r2, [sp, #40]	; 0x28
 8014d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d76:	f7ed fd21 	bl	80027bc <__aeabi_dsub>
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	4b1e      	ldr	r3, [pc, #120]	; (8014df8 <__ieee754_rem_pio2+0x3d0>)
 8014d7e:	f7ed fab1 	bl	80022e4 <__aeabi_dmul>
 8014d82:	000d      	movs	r5, r1
 8014d84:	0004      	movs	r4, r0
 8014d86:	f7ee f8c9 	bl	8002f1c <__aeabi_d2iz>
 8014d8a:	f7ee f8fd 	bl	8002f88 <__aeabi_i2d>
 8014d8e:	0002      	movs	r2, r0
 8014d90:	000b      	movs	r3, r1
 8014d92:	0020      	movs	r0, r4
 8014d94:	0029      	movs	r1, r5
 8014d96:	920c      	str	r2, [sp, #48]	; 0x30
 8014d98:	930d      	str	r3, [sp, #52]	; 0x34
 8014d9a:	f7ed fd0f 	bl	80027bc <__aeabi_dsub>
 8014d9e:	2200      	movs	r2, #0
 8014da0:	4b15      	ldr	r3, [pc, #84]	; (8014df8 <__ieee754_rem_pio2+0x3d0>)
 8014da2:	f7ed fa9f 	bl	80022e4 <__aeabi_dmul>
 8014da6:	2503      	movs	r5, #3
 8014da8:	900e      	str	r0, [sp, #56]	; 0x38
 8014daa:	910f      	str	r1, [sp, #60]	; 0x3c
 8014dac:	ac0a      	add	r4, sp, #40	; 0x28
 8014dae:	2200      	movs	r2, #0
 8014db0:	6920      	ldr	r0, [r4, #16]
 8014db2:	6961      	ldr	r1, [r4, #20]
 8014db4:	2300      	movs	r3, #0
 8014db6:	9502      	str	r5, [sp, #8]
 8014db8:	3c08      	subs	r4, #8
 8014dba:	3d01      	subs	r5, #1
 8014dbc:	f7eb fb30 	bl	8000420 <__aeabi_dcmpeq>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d1f4      	bne.n	8014dae <__ieee754_rem_pio2+0x386>
 8014dc4:	4b0d      	ldr	r3, [pc, #52]	; (8014dfc <__ieee754_rem_pio2+0x3d4>)
 8014dc6:	0032      	movs	r2, r6
 8014dc8:	9301      	str	r3, [sp, #4]
 8014dca:	2302      	movs	r3, #2
 8014dcc:	0039      	movs	r1, r7
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	a80a      	add	r0, sp, #40	; 0x28
 8014dd2:	9b02      	ldr	r3, [sp, #8]
 8014dd4:	f000 f8d4 	bl	8014f80 <__kernel_rem_pio2>
 8014dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dda:	0006      	movs	r6, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	db00      	blt.n	8014de2 <__ieee754_rem_pio2+0x3ba>
 8014de0:	e65f      	b.n	8014aa2 <__ieee754_rem_pio2+0x7a>
 8014de2:	2280      	movs	r2, #128	; 0x80
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	0612      	lsls	r2, r2, #24
 8014de8:	189b      	adds	r3, r3, r2
 8014dea:	607b      	str	r3, [r7, #4]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	189b      	adds	r3, r3, r2
 8014df0:	60fb      	str	r3, [r7, #12]
 8014df2:	e68c      	b.n	8014b0e <__ieee754_rem_pio2+0xe6>
 8014df4:	fffffbea 	.word	0xfffffbea
 8014df8:	41700000 	.word	0x41700000
 8014dfc:	080186f0 	.word	0x080186f0

08014e00 <__kernel_cos>:
 8014e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e02:	b087      	sub	sp, #28
 8014e04:	9204      	str	r2, [sp, #16]
 8014e06:	9305      	str	r3, [sp, #20]
 8014e08:	004b      	lsls	r3, r1, #1
 8014e0a:	085b      	lsrs	r3, r3, #1
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	23f9      	movs	r3, #249	; 0xf9
 8014e10:	9a00      	ldr	r2, [sp, #0]
 8014e12:	0007      	movs	r7, r0
 8014e14:	000e      	movs	r6, r1
 8014e16:	059b      	lsls	r3, r3, #22
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	da04      	bge.n	8014e26 <__kernel_cos+0x26>
 8014e1c:	f7ee f87e 	bl	8002f1c <__aeabi_d2iz>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	d100      	bne.n	8014e26 <__kernel_cos+0x26>
 8014e24:	e084      	b.n	8014f30 <__kernel_cos+0x130>
 8014e26:	003a      	movs	r2, r7
 8014e28:	0033      	movs	r3, r6
 8014e2a:	0038      	movs	r0, r7
 8014e2c:	0031      	movs	r1, r6
 8014e2e:	f7ed fa59 	bl	80022e4 <__aeabi_dmul>
 8014e32:	2200      	movs	r2, #0
 8014e34:	4b40      	ldr	r3, [pc, #256]	; (8014f38 <__kernel_cos+0x138>)
 8014e36:	0004      	movs	r4, r0
 8014e38:	000d      	movs	r5, r1
 8014e3a:	f7ed fa53 	bl	80022e4 <__aeabi_dmul>
 8014e3e:	4a3f      	ldr	r2, [pc, #252]	; (8014f3c <__kernel_cos+0x13c>)
 8014e40:	9002      	str	r0, [sp, #8]
 8014e42:	9103      	str	r1, [sp, #12]
 8014e44:	4b3e      	ldr	r3, [pc, #248]	; (8014f40 <__kernel_cos+0x140>)
 8014e46:	0020      	movs	r0, r4
 8014e48:	0029      	movs	r1, r5
 8014e4a:	f7ed fa4b 	bl	80022e4 <__aeabi_dmul>
 8014e4e:	4a3d      	ldr	r2, [pc, #244]	; (8014f44 <__kernel_cos+0x144>)
 8014e50:	4b3d      	ldr	r3, [pc, #244]	; (8014f48 <__kernel_cos+0x148>)
 8014e52:	f7ec fad7 	bl	8001404 <__aeabi_dadd>
 8014e56:	0022      	movs	r2, r4
 8014e58:	002b      	movs	r3, r5
 8014e5a:	f7ed fa43 	bl	80022e4 <__aeabi_dmul>
 8014e5e:	4a3b      	ldr	r2, [pc, #236]	; (8014f4c <__kernel_cos+0x14c>)
 8014e60:	4b3b      	ldr	r3, [pc, #236]	; (8014f50 <__kernel_cos+0x150>)
 8014e62:	f7ed fcab 	bl	80027bc <__aeabi_dsub>
 8014e66:	0022      	movs	r2, r4
 8014e68:	002b      	movs	r3, r5
 8014e6a:	f7ed fa3b 	bl	80022e4 <__aeabi_dmul>
 8014e6e:	4a39      	ldr	r2, [pc, #228]	; (8014f54 <__kernel_cos+0x154>)
 8014e70:	4b39      	ldr	r3, [pc, #228]	; (8014f58 <__kernel_cos+0x158>)
 8014e72:	f7ec fac7 	bl	8001404 <__aeabi_dadd>
 8014e76:	0022      	movs	r2, r4
 8014e78:	002b      	movs	r3, r5
 8014e7a:	f7ed fa33 	bl	80022e4 <__aeabi_dmul>
 8014e7e:	4a37      	ldr	r2, [pc, #220]	; (8014f5c <__kernel_cos+0x15c>)
 8014e80:	4b37      	ldr	r3, [pc, #220]	; (8014f60 <__kernel_cos+0x160>)
 8014e82:	f7ed fc9b 	bl	80027bc <__aeabi_dsub>
 8014e86:	0022      	movs	r2, r4
 8014e88:	002b      	movs	r3, r5
 8014e8a:	f7ed fa2b 	bl	80022e4 <__aeabi_dmul>
 8014e8e:	4a35      	ldr	r2, [pc, #212]	; (8014f64 <__kernel_cos+0x164>)
 8014e90:	4b35      	ldr	r3, [pc, #212]	; (8014f68 <__kernel_cos+0x168>)
 8014e92:	f7ec fab7 	bl	8001404 <__aeabi_dadd>
 8014e96:	0022      	movs	r2, r4
 8014e98:	002b      	movs	r3, r5
 8014e9a:	f7ed fa23 	bl	80022e4 <__aeabi_dmul>
 8014e9e:	0022      	movs	r2, r4
 8014ea0:	002b      	movs	r3, r5
 8014ea2:	f7ed fa1f 	bl	80022e4 <__aeabi_dmul>
 8014ea6:	9a04      	ldr	r2, [sp, #16]
 8014ea8:	9b05      	ldr	r3, [sp, #20]
 8014eaa:	0004      	movs	r4, r0
 8014eac:	000d      	movs	r5, r1
 8014eae:	0038      	movs	r0, r7
 8014eb0:	0031      	movs	r1, r6
 8014eb2:	f7ed fa17 	bl	80022e4 <__aeabi_dmul>
 8014eb6:	0002      	movs	r2, r0
 8014eb8:	000b      	movs	r3, r1
 8014eba:	0020      	movs	r0, r4
 8014ebc:	0029      	movs	r1, r5
 8014ebe:	f7ed fc7d 	bl	80027bc <__aeabi_dsub>
 8014ec2:	4b2a      	ldr	r3, [pc, #168]	; (8014f6c <__kernel_cos+0x16c>)
 8014ec4:	9a00      	ldr	r2, [sp, #0]
 8014ec6:	0004      	movs	r4, r0
 8014ec8:	000d      	movs	r5, r1
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	dc0d      	bgt.n	8014eea <__kernel_cos+0xea>
 8014ece:	0002      	movs	r2, r0
 8014ed0:	000b      	movs	r3, r1
 8014ed2:	9802      	ldr	r0, [sp, #8]
 8014ed4:	9903      	ldr	r1, [sp, #12]
 8014ed6:	f7ed fc71 	bl	80027bc <__aeabi_dsub>
 8014eda:	0002      	movs	r2, r0
 8014edc:	2000      	movs	r0, #0
 8014ede:	000b      	movs	r3, r1
 8014ee0:	4923      	ldr	r1, [pc, #140]	; (8014f70 <__kernel_cos+0x170>)
 8014ee2:	f7ed fc6b 	bl	80027bc <__aeabi_dsub>
 8014ee6:	b007      	add	sp, #28
 8014ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eea:	4b22      	ldr	r3, [pc, #136]	; (8014f74 <__kernel_cos+0x174>)
 8014eec:	9a00      	ldr	r2, [sp, #0]
 8014eee:	2600      	movs	r6, #0
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	dc1b      	bgt.n	8014f2c <__kernel_cos+0x12c>
 8014ef4:	0013      	movs	r3, r2
 8014ef6:	4a20      	ldr	r2, [pc, #128]	; (8014f78 <__kernel_cos+0x178>)
 8014ef8:	4694      	mov	ip, r2
 8014efa:	4463      	add	r3, ip
 8014efc:	001f      	movs	r7, r3
 8014efe:	0032      	movs	r2, r6
 8014f00:	003b      	movs	r3, r7
 8014f02:	2000      	movs	r0, #0
 8014f04:	491a      	ldr	r1, [pc, #104]	; (8014f70 <__kernel_cos+0x170>)
 8014f06:	f7ed fc59 	bl	80027bc <__aeabi_dsub>
 8014f0a:	0032      	movs	r2, r6
 8014f0c:	003b      	movs	r3, r7
 8014f0e:	9000      	str	r0, [sp, #0]
 8014f10:	9101      	str	r1, [sp, #4]
 8014f12:	9802      	ldr	r0, [sp, #8]
 8014f14:	9903      	ldr	r1, [sp, #12]
 8014f16:	f7ed fc51 	bl	80027bc <__aeabi_dsub>
 8014f1a:	0022      	movs	r2, r4
 8014f1c:	002b      	movs	r3, r5
 8014f1e:	f7ed fc4d 	bl	80027bc <__aeabi_dsub>
 8014f22:	0002      	movs	r2, r0
 8014f24:	000b      	movs	r3, r1
 8014f26:	9800      	ldr	r0, [sp, #0]
 8014f28:	9901      	ldr	r1, [sp, #4]
 8014f2a:	e7da      	b.n	8014ee2 <__kernel_cos+0xe2>
 8014f2c:	4f13      	ldr	r7, [pc, #76]	; (8014f7c <__kernel_cos+0x17c>)
 8014f2e:	e7e6      	b.n	8014efe <__kernel_cos+0xfe>
 8014f30:	2000      	movs	r0, #0
 8014f32:	490f      	ldr	r1, [pc, #60]	; (8014f70 <__kernel_cos+0x170>)
 8014f34:	e7d7      	b.n	8014ee6 <__kernel_cos+0xe6>
 8014f36:	46c0      	nop			; (mov r8, r8)
 8014f38:	3fe00000 	.word	0x3fe00000
 8014f3c:	be8838d4 	.word	0xbe8838d4
 8014f40:	bda8fae9 	.word	0xbda8fae9
 8014f44:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f48:	3e21ee9e 	.word	0x3e21ee9e
 8014f4c:	809c52ad 	.word	0x809c52ad
 8014f50:	3e927e4f 	.word	0x3e927e4f
 8014f54:	19cb1590 	.word	0x19cb1590
 8014f58:	3efa01a0 	.word	0x3efa01a0
 8014f5c:	16c15177 	.word	0x16c15177
 8014f60:	3f56c16c 	.word	0x3f56c16c
 8014f64:	5555554c 	.word	0x5555554c
 8014f68:	3fa55555 	.word	0x3fa55555
 8014f6c:	3fd33332 	.word	0x3fd33332
 8014f70:	3ff00000 	.word	0x3ff00000
 8014f74:	3fe90000 	.word	0x3fe90000
 8014f78:	ffe00000 	.word	0xffe00000
 8014f7c:	3fd20000 	.word	0x3fd20000

08014f80 <__kernel_rem_pio2>:
 8014f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f82:	4cd0      	ldr	r4, [pc, #832]	; (80152c4 <__kernel_rem_pio2+0x344>)
 8014f84:	44a5      	add	sp, r4
 8014f86:	930d      	str	r3, [sp, #52]	; 0x34
 8014f88:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014f8a:	0014      	movs	r4, r2
 8014f8c:	009a      	lsls	r2, r3, #2
 8014f8e:	4bce      	ldr	r3, [pc, #824]	; (80152c8 <__kernel_rem_pio2+0x348>)
 8014f90:	900e      	str	r0, [sp, #56]	; 0x38
 8014f92:	58d3      	ldr	r3, [r2, r3]
 8014f94:	9107      	str	r1, [sp, #28]
 8014f96:	9308      	str	r3, [sp, #32]
 8014f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f9a:	3b01      	subs	r3, #1
 8014f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	9300      	str	r3, [sp, #0]
 8014fa2:	0023      	movs	r3, r4
 8014fa4:	3314      	adds	r3, #20
 8014fa6:	db04      	blt.n	8014fb2 <__kernel_rem_pio2+0x32>
 8014fa8:	2118      	movs	r1, #24
 8014faa:	1ee0      	subs	r0, r4, #3
 8014fac:	f7eb f93c 	bl	8000228 <__divsi3>
 8014fb0:	9000      	str	r0, [sp, #0]
 8014fb2:	2218      	movs	r2, #24
 8014fb4:	9b00      	ldr	r3, [sp, #0]
 8014fb6:	4252      	negs	r2, r2
 8014fb8:	3301      	adds	r3, #1
 8014fba:	435a      	muls	r2, r3
 8014fbc:	1913      	adds	r3, r2, r4
 8014fbe:	9302      	str	r3, [sp, #8]
 8014fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fc2:	9b00      	ldr	r3, [sp, #0]
 8014fc4:	ae26      	add	r6, sp, #152	; 0x98
 8014fc6:	1a9d      	subs	r5, r3, r2
 8014fc8:	002c      	movs	r4, r5
 8014fca:	9b08      	ldr	r3, [sp, #32]
 8014fcc:	189f      	adds	r7, r3, r2
 8014fce:	1b63      	subs	r3, r4, r5
 8014fd0:	429f      	cmp	r7, r3
 8014fd2:	da17      	bge.n	8015004 <__kernel_rem_pio2+0x84>
 8014fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fd8:	9304      	str	r3, [sp, #16]
 8014fda:	ab76      	add	r3, sp, #472	; 0x1d8
 8014fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8014fde:	2301      	movs	r3, #1
 8014fe0:	1a9b      	subs	r3, r3, r2
 8014fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fe4:	ab28      	add	r3, sp, #160	; 0xa0
 8014fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fe8:	9a04      	ldr	r2, [sp, #16]
 8014fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fec:	189b      	adds	r3, r3, r2
 8014fee:	9a08      	ldr	r2, [sp, #32]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	db31      	blt.n	8015058 <__kernel_rem_pio2+0xd8>
 8014ff4:	9b04      	ldr	r3, [sp, #16]
 8014ff6:	2400      	movs	r4, #0
 8014ff8:	00de      	lsls	r6, r3, #3
 8014ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ffc:	2500      	movs	r5, #0
 8014ffe:	2700      	movs	r7, #0
 8015000:	199e      	adds	r6, r3, r6
 8015002:	e01e      	b.n	8015042 <__kernel_rem_pio2+0xc2>
 8015004:	2c00      	cmp	r4, #0
 8015006:	db07      	blt.n	8015018 <__kernel_rem_pio2+0x98>
 8015008:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 801500a:	00a3      	lsls	r3, r4, #2
 801500c:	58d0      	ldr	r0, [r2, r3]
 801500e:	f7ed ffbb 	bl	8002f88 <__aeabi_i2d>
 8015012:	c603      	stmia	r6!, {r0, r1}
 8015014:	3401      	adds	r4, #1
 8015016:	e7da      	b.n	8014fce <__kernel_rem_pio2+0x4e>
 8015018:	2000      	movs	r0, #0
 801501a:	2100      	movs	r1, #0
 801501c:	e7f9      	b.n	8015012 <__kernel_rem_pio2+0x92>
 801501e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015020:	00f9      	lsls	r1, r7, #3
 8015022:	1859      	adds	r1, r3, r1
 8015024:	6808      	ldr	r0, [r1, #0]
 8015026:	6849      	ldr	r1, [r1, #4]
 8015028:	6832      	ldr	r2, [r6, #0]
 801502a:	6873      	ldr	r3, [r6, #4]
 801502c:	f7ed f95a 	bl	80022e4 <__aeabi_dmul>
 8015030:	0002      	movs	r2, r0
 8015032:	000b      	movs	r3, r1
 8015034:	0020      	movs	r0, r4
 8015036:	0029      	movs	r1, r5
 8015038:	f7ec f9e4 	bl	8001404 <__aeabi_dadd>
 801503c:	0004      	movs	r4, r0
 801503e:	000d      	movs	r5, r1
 8015040:	3701      	adds	r7, #1
 8015042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015044:	3e08      	subs	r6, #8
 8015046:	429f      	cmp	r7, r3
 8015048:	dde9      	ble.n	801501e <__kernel_rem_pio2+0x9e>
 801504a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801504c:	c330      	stmia	r3!, {r4, r5}
 801504e:	930a      	str	r3, [sp, #40]	; 0x28
 8015050:	9b04      	ldr	r3, [sp, #16]
 8015052:	3301      	adds	r3, #1
 8015054:	9304      	str	r3, [sp, #16]
 8015056:	e7c7      	b.n	8014fe8 <__kernel_rem_pio2+0x68>
 8015058:	9b08      	ldr	r3, [sp, #32]
 801505a:	aa12      	add	r2, sp, #72	; 0x48
 801505c:	009b      	lsls	r3, r3, #2
 801505e:	189b      	adds	r3, r3, r2
 8015060:	9310      	str	r3, [sp, #64]	; 0x40
 8015062:	9b00      	ldr	r3, [sp, #0]
 8015064:	0098      	lsls	r0, r3, #2
 8015066:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015068:	181b      	adds	r3, r3, r0
 801506a:	930f      	str	r3, [sp, #60]	; 0x3c
 801506c:	9b08      	ldr	r3, [sp, #32]
 801506e:	9304      	str	r3, [sp, #16]
 8015070:	9b04      	ldr	r3, [sp, #16]
 8015072:	aa76      	add	r2, sp, #472	; 0x1d8
 8015074:	00db      	lsls	r3, r3, #3
 8015076:	18d3      	adds	r3, r2, r3
 8015078:	681c      	ldr	r4, [r3, #0]
 801507a:	685d      	ldr	r5, [r3, #4]
 801507c:	ab12      	add	r3, sp, #72	; 0x48
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	930b      	str	r3, [sp, #44]	; 0x2c
 8015082:	9b04      	ldr	r3, [sp, #16]
 8015084:	9211      	str	r2, [sp, #68]	; 0x44
 8015086:	930a      	str	r3, [sp, #40]	; 0x28
 8015088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801508a:	2b00      	cmp	r3, #0
 801508c:	dc74      	bgt.n	8015178 <__kernel_rem_pio2+0x1f8>
 801508e:	0020      	movs	r0, r4
 8015090:	0029      	movs	r1, r5
 8015092:	9a02      	ldr	r2, [sp, #8]
 8015094:	f000 fdaa 	bl	8015bec <scalbn>
 8015098:	23ff      	movs	r3, #255	; 0xff
 801509a:	2200      	movs	r2, #0
 801509c:	059b      	lsls	r3, r3, #22
 801509e:	0004      	movs	r4, r0
 80150a0:	000d      	movs	r5, r1
 80150a2:	f7ed f91f 	bl	80022e4 <__aeabi_dmul>
 80150a6:	f000 fd11 	bl	8015acc <floor>
 80150aa:	2200      	movs	r2, #0
 80150ac:	4b87      	ldr	r3, [pc, #540]	; (80152cc <__kernel_rem_pio2+0x34c>)
 80150ae:	f7ed f919 	bl	80022e4 <__aeabi_dmul>
 80150b2:	0002      	movs	r2, r0
 80150b4:	000b      	movs	r3, r1
 80150b6:	0020      	movs	r0, r4
 80150b8:	0029      	movs	r1, r5
 80150ba:	f7ed fb7f 	bl	80027bc <__aeabi_dsub>
 80150be:	000d      	movs	r5, r1
 80150c0:	0004      	movs	r4, r0
 80150c2:	f7ed ff2b 	bl	8002f1c <__aeabi_d2iz>
 80150c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80150c8:	f7ed ff5e 	bl	8002f88 <__aeabi_i2d>
 80150cc:	000b      	movs	r3, r1
 80150ce:	0002      	movs	r2, r0
 80150d0:	0029      	movs	r1, r5
 80150d2:	0020      	movs	r0, r4
 80150d4:	f7ed fb72 	bl	80027bc <__aeabi_dsub>
 80150d8:	9b02      	ldr	r3, [sp, #8]
 80150da:	0006      	movs	r6, r0
 80150dc:	000f      	movs	r7, r1
 80150de:	2b00      	cmp	r3, #0
 80150e0:	dd74      	ble.n	80151cc <__kernel_rem_pio2+0x24c>
 80150e2:	2118      	movs	r1, #24
 80150e4:	9b04      	ldr	r3, [sp, #16]
 80150e6:	aa12      	add	r2, sp, #72	; 0x48
 80150e8:	3b01      	subs	r3, #1
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	589a      	ldr	r2, [r3, r2]
 80150ee:	9802      	ldr	r0, [sp, #8]
 80150f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80150f2:	1a09      	subs	r1, r1, r0
 80150f4:	0010      	movs	r0, r2
 80150f6:	4108      	asrs	r0, r1
 80150f8:	1824      	adds	r4, r4, r0
 80150fa:	4088      	lsls	r0, r1
 80150fc:	a912      	add	r1, sp, #72	; 0x48
 80150fe:	1a12      	subs	r2, r2, r0
 8015100:	505a      	str	r2, [r3, r1]
 8015102:	2317      	movs	r3, #23
 8015104:	9902      	ldr	r1, [sp, #8]
 8015106:	940b      	str	r4, [sp, #44]	; 0x2c
 8015108:	1a5b      	subs	r3, r3, r1
 801510a:	411a      	asrs	r2, r3
 801510c:	920a      	str	r2, [sp, #40]	; 0x28
 801510e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015110:	2b00      	cmp	r3, #0
 8015112:	dd6d      	ble.n	80151f0 <__kernel_rem_pio2+0x270>
 8015114:	2200      	movs	r2, #0
 8015116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015118:	2080      	movs	r0, #128	; 0x80
 801511a:	3301      	adds	r3, #1
 801511c:	930b      	str	r3, [sp, #44]	; 0x2c
 801511e:	4b6c      	ldr	r3, [pc, #432]	; (80152d0 <__kernel_rem_pio2+0x350>)
 8015120:	0014      	movs	r4, r2
 8015122:	469c      	mov	ip, r3
 8015124:	2501      	movs	r5, #1
 8015126:	0440      	lsls	r0, r0, #17
 8015128:	9b04      	ldr	r3, [sp, #16]
 801512a:	4293      	cmp	r3, r2
 801512c:	dd00      	ble.n	8015130 <__kernel_rem_pio2+0x1b0>
 801512e:	e098      	b.n	8015262 <__kernel_rem_pio2+0x2e2>
 8015130:	9b02      	ldr	r3, [sp, #8]
 8015132:	2b00      	cmp	r3, #0
 8015134:	dd05      	ble.n	8015142 <__kernel_rem_pio2+0x1c2>
 8015136:	2b01      	cmp	r3, #1
 8015138:	d100      	bne.n	801513c <__kernel_rem_pio2+0x1bc>
 801513a:	e0a8      	b.n	801528e <__kernel_rem_pio2+0x30e>
 801513c:	2b02      	cmp	r3, #2
 801513e:	d100      	bne.n	8015142 <__kernel_rem_pio2+0x1c2>
 8015140:	e0b0      	b.n	80152a4 <__kernel_rem_pio2+0x324>
 8015142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015144:	2b02      	cmp	r3, #2
 8015146:	d153      	bne.n	80151f0 <__kernel_rem_pio2+0x270>
 8015148:	0032      	movs	r2, r6
 801514a:	003b      	movs	r3, r7
 801514c:	2000      	movs	r0, #0
 801514e:	4961      	ldr	r1, [pc, #388]	; (80152d4 <__kernel_rem_pio2+0x354>)
 8015150:	f7ed fb34 	bl	80027bc <__aeabi_dsub>
 8015154:	0006      	movs	r6, r0
 8015156:	000f      	movs	r7, r1
 8015158:	2c00      	cmp	r4, #0
 801515a:	d049      	beq.n	80151f0 <__kernel_rem_pio2+0x270>
 801515c:	9a02      	ldr	r2, [sp, #8]
 801515e:	2000      	movs	r0, #0
 8015160:	495c      	ldr	r1, [pc, #368]	; (80152d4 <__kernel_rem_pio2+0x354>)
 8015162:	f000 fd43 	bl	8015bec <scalbn>
 8015166:	0002      	movs	r2, r0
 8015168:	000b      	movs	r3, r1
 801516a:	0030      	movs	r0, r6
 801516c:	0039      	movs	r1, r7
 801516e:	f7ed fb25 	bl	80027bc <__aeabi_dsub>
 8015172:	0006      	movs	r6, r0
 8015174:	000f      	movs	r7, r1
 8015176:	e03b      	b.n	80151f0 <__kernel_rem_pio2+0x270>
 8015178:	2200      	movs	r2, #0
 801517a:	4b57      	ldr	r3, [pc, #348]	; (80152d8 <__kernel_rem_pio2+0x358>)
 801517c:	0020      	movs	r0, r4
 801517e:	0029      	movs	r1, r5
 8015180:	f7ed f8b0 	bl	80022e4 <__aeabi_dmul>
 8015184:	f7ed feca 	bl	8002f1c <__aeabi_d2iz>
 8015188:	f7ed fefe 	bl	8002f88 <__aeabi_i2d>
 801518c:	2200      	movs	r2, #0
 801518e:	4b53      	ldr	r3, [pc, #332]	; (80152dc <__kernel_rem_pio2+0x35c>)
 8015190:	0006      	movs	r6, r0
 8015192:	000f      	movs	r7, r1
 8015194:	f7ed f8a6 	bl	80022e4 <__aeabi_dmul>
 8015198:	0002      	movs	r2, r0
 801519a:	000b      	movs	r3, r1
 801519c:	0020      	movs	r0, r4
 801519e:	0029      	movs	r1, r5
 80151a0:	f7ed fb0c 	bl	80027bc <__aeabi_dsub>
 80151a4:	f7ed feba 	bl	8002f1c <__aeabi_d2iz>
 80151a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80151ac:	c301      	stmia	r3!, {r0}
 80151ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151b2:	0030      	movs	r0, r6
 80151b4:	3b01      	subs	r3, #1
 80151b6:	930a      	str	r3, [sp, #40]	; 0x28
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	18d3      	adds	r3, r2, r3
 80151bc:	0039      	movs	r1, r7
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	f7ec f91f 	bl	8001404 <__aeabi_dadd>
 80151c6:	0004      	movs	r4, r0
 80151c8:	000d      	movs	r5, r1
 80151ca:	e75d      	b.n	8015088 <__kernel_rem_pio2+0x108>
 80151cc:	9b02      	ldr	r3, [sp, #8]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d107      	bne.n	80151e2 <__kernel_rem_pio2+0x262>
 80151d2:	9b04      	ldr	r3, [sp, #16]
 80151d4:	aa12      	add	r2, sp, #72	; 0x48
 80151d6:	3b01      	subs	r3, #1
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	5898      	ldr	r0, [r3, r2]
 80151dc:	15c3      	asrs	r3, r0, #23
 80151de:	930a      	str	r3, [sp, #40]	; 0x28
 80151e0:	e795      	b.n	801510e <__kernel_rem_pio2+0x18e>
 80151e2:	2200      	movs	r2, #0
 80151e4:	4b3e      	ldr	r3, [pc, #248]	; (80152e0 <__kernel_rem_pio2+0x360>)
 80151e6:	f7eb f93f 	bl	8000468 <__aeabi_dcmpge>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d136      	bne.n	801525c <__kernel_rem_pio2+0x2dc>
 80151ee:	900a      	str	r0, [sp, #40]	; 0x28
 80151f0:	2200      	movs	r2, #0
 80151f2:	2300      	movs	r3, #0
 80151f4:	0030      	movs	r0, r6
 80151f6:	0039      	movs	r1, r7
 80151f8:	f7eb f912 	bl	8000420 <__aeabi_dcmpeq>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	d100      	bne.n	8015202 <__kernel_rem_pio2+0x282>
 8015200:	e0b9      	b.n	8015376 <__kernel_rem_pio2+0x3f6>
 8015202:	2200      	movs	r2, #0
 8015204:	9b04      	ldr	r3, [sp, #16]
 8015206:	3b01      	subs	r3, #1
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	9908      	ldr	r1, [sp, #32]
 801520c:	428b      	cmp	r3, r1
 801520e:	da52      	bge.n	80152b6 <__kernel_rem_pio2+0x336>
 8015210:	2a00      	cmp	r2, #0
 8015212:	d100      	bne.n	8015216 <__kernel_rem_pio2+0x296>
 8015214:	e095      	b.n	8015342 <__kernel_rem_pio2+0x3c2>
 8015216:	9b02      	ldr	r3, [sp, #8]
 8015218:	aa12      	add	r2, sp, #72	; 0x48
 801521a:	3b18      	subs	r3, #24
 801521c:	9302      	str	r3, [sp, #8]
 801521e:	9b00      	ldr	r3, [sp, #0]
 8015220:	009b      	lsls	r3, r3, #2
 8015222:	589b      	ldr	r3, [r3, r2]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d100      	bne.n	801522a <__kernel_rem_pio2+0x2aa>
 8015228:	e0a1      	b.n	801536e <__kernel_rem_pio2+0x3ee>
 801522a:	2000      	movs	r0, #0
 801522c:	9a02      	ldr	r2, [sp, #8]
 801522e:	4929      	ldr	r1, [pc, #164]	; (80152d4 <__kernel_rem_pio2+0x354>)
 8015230:	f000 fcdc 	bl	8015bec <scalbn>
 8015234:	0006      	movs	r6, r0
 8015236:	000f      	movs	r7, r1
 8015238:	9c00      	ldr	r4, [sp, #0]
 801523a:	2c00      	cmp	r4, #0
 801523c:	db00      	blt.n	8015240 <__kernel_rem_pio2+0x2c0>
 801523e:	e0d9      	b.n	80153f4 <__kernel_rem_pio2+0x474>
 8015240:	2600      	movs	r6, #0
 8015242:	9d00      	ldr	r5, [sp, #0]
 8015244:	2d00      	cmp	r5, #0
 8015246:	da00      	bge.n	801524a <__kernel_rem_pio2+0x2ca>
 8015248:	e10c      	b.n	8015464 <__kernel_rem_pio2+0x4e4>
 801524a:	ab76      	add	r3, sp, #472	; 0x1d8
 801524c:	00ef      	lsls	r7, r5, #3
 801524e:	2400      	movs	r4, #0
 8015250:	18ff      	adds	r7, r7, r3
 8015252:	2300      	movs	r3, #0
 8015254:	9302      	str	r3, [sp, #8]
 8015256:	9403      	str	r4, [sp, #12]
 8015258:	2400      	movs	r4, #0
 801525a:	e0f4      	b.n	8015446 <__kernel_rem_pio2+0x4c6>
 801525c:	2302      	movs	r3, #2
 801525e:	930a      	str	r3, [sp, #40]	; 0x28
 8015260:	e758      	b.n	8015114 <__kernel_rem_pio2+0x194>
 8015262:	9b00      	ldr	r3, [sp, #0]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	2c00      	cmp	r4, #0
 8015268:	d10b      	bne.n	8015282 <__kernel_rem_pio2+0x302>
 801526a:	2b00      	cmp	r3, #0
 801526c:	d003      	beq.n	8015276 <__kernel_rem_pio2+0x2f6>
 801526e:	9c00      	ldr	r4, [sp, #0]
 8015270:	1ac3      	subs	r3, r0, r3
 8015272:	6023      	str	r3, [r4, #0]
 8015274:	002b      	movs	r3, r5
 8015276:	9c00      	ldr	r4, [sp, #0]
 8015278:	3201      	adds	r2, #1
 801527a:	3404      	adds	r4, #4
 801527c:	9400      	str	r4, [sp, #0]
 801527e:	001c      	movs	r4, r3
 8015280:	e752      	b.n	8015128 <__kernel_rem_pio2+0x1a8>
 8015282:	4661      	mov	r1, ip
 8015284:	1acb      	subs	r3, r1, r3
 8015286:	9900      	ldr	r1, [sp, #0]
 8015288:	600b      	str	r3, [r1, #0]
 801528a:	0023      	movs	r3, r4
 801528c:	e7f3      	b.n	8015276 <__kernel_rem_pio2+0x2f6>
 801528e:	9b04      	ldr	r3, [sp, #16]
 8015290:	aa12      	add	r2, sp, #72	; 0x48
 8015292:	3b01      	subs	r3, #1
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	589a      	ldr	r2, [r3, r2]
 8015298:	9200      	str	r2, [sp, #0]
 801529a:	0252      	lsls	r2, r2, #9
 801529c:	0a52      	lsrs	r2, r2, #9
 801529e:	a912      	add	r1, sp, #72	; 0x48
 80152a0:	505a      	str	r2, [r3, r1]
 80152a2:	e74e      	b.n	8015142 <__kernel_rem_pio2+0x1c2>
 80152a4:	9b04      	ldr	r3, [sp, #16]
 80152a6:	aa12      	add	r2, sp, #72	; 0x48
 80152a8:	3b01      	subs	r3, #1
 80152aa:	009b      	lsls	r3, r3, #2
 80152ac:	589a      	ldr	r2, [r3, r2]
 80152ae:	9200      	str	r2, [sp, #0]
 80152b0:	0292      	lsls	r2, r2, #10
 80152b2:	0a92      	lsrs	r2, r2, #10
 80152b4:	e7f3      	b.n	801529e <__kernel_rem_pio2+0x31e>
 80152b6:	0099      	lsls	r1, r3, #2
 80152b8:	a812      	add	r0, sp, #72	; 0x48
 80152ba:	5809      	ldr	r1, [r1, r0]
 80152bc:	3b01      	subs	r3, #1
 80152be:	430a      	orrs	r2, r1
 80152c0:	e7a3      	b.n	801520a <__kernel_rem_pio2+0x28a>
 80152c2:	46c0      	nop			; (mov r8, r8)
 80152c4:	fffffd84 	.word	0xfffffd84
 80152c8:	08018838 	.word	0x08018838
 80152cc:	40200000 	.word	0x40200000
 80152d0:	00ffffff 	.word	0x00ffffff
 80152d4:	3ff00000 	.word	0x3ff00000
 80152d8:	3e700000 	.word	0x3e700000
 80152dc:	41700000 	.word	0x41700000
 80152e0:	3fe00000 	.word	0x3fe00000
 80152e4:	3301      	adds	r3, #1
 80152e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80152e8:	009a      	lsls	r2, r3, #2
 80152ea:	4252      	negs	r2, r2
 80152ec:	588a      	ldr	r2, [r1, r2]
 80152ee:	2a00      	cmp	r2, #0
 80152f0:	d0f8      	beq.n	80152e4 <__kernel_rem_pio2+0x364>
 80152f2:	9a04      	ldr	r2, [sp, #16]
 80152f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152f6:	1c57      	adds	r7, r2, #1
 80152f8:	1854      	adds	r4, r2, r1
 80152fa:	00e4      	lsls	r4, r4, #3
 80152fc:	aa26      	add	r2, sp, #152	; 0x98
 80152fe:	1914      	adds	r4, r2, r4
 8015300:	9a04      	ldr	r2, [sp, #16]
 8015302:	18d3      	adds	r3, r2, r3
 8015304:	9304      	str	r3, [sp, #16]
 8015306:	9b04      	ldr	r3, [sp, #16]
 8015308:	42bb      	cmp	r3, r7
 801530a:	da00      	bge.n	801530e <__kernel_rem_pio2+0x38e>
 801530c:	e6b0      	b.n	8015070 <__kernel_rem_pio2+0xf0>
 801530e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015310:	00bb      	lsls	r3, r7, #2
 8015312:	58d0      	ldr	r0, [r2, r3]
 8015314:	f7ed fe38 	bl	8002f88 <__aeabi_i2d>
 8015318:	2200      	movs	r2, #0
 801531a:	2300      	movs	r3, #0
 801531c:	0026      	movs	r6, r4
 801531e:	2500      	movs	r5, #0
 8015320:	6020      	str	r0, [r4, #0]
 8015322:	6061      	str	r1, [r4, #4]
 8015324:	9200      	str	r2, [sp, #0]
 8015326:	9301      	str	r3, [sp, #4]
 8015328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801532a:	429d      	cmp	r5, r3
 801532c:	dd0b      	ble.n	8015346 <__kernel_rem_pio2+0x3c6>
 801532e:	00fb      	lsls	r3, r7, #3
 8015330:	aa76      	add	r2, sp, #472	; 0x1d8
 8015332:	18d3      	adds	r3, r2, r3
 8015334:	3701      	adds	r7, #1
 8015336:	9900      	ldr	r1, [sp, #0]
 8015338:	9a01      	ldr	r2, [sp, #4]
 801533a:	3408      	adds	r4, #8
 801533c:	6019      	str	r1, [r3, #0]
 801533e:	605a      	str	r2, [r3, #4]
 8015340:	e7e1      	b.n	8015306 <__kernel_rem_pio2+0x386>
 8015342:	2301      	movs	r3, #1
 8015344:	e7cf      	b.n	80152e6 <__kernel_rem_pio2+0x366>
 8015346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015348:	00e9      	lsls	r1, r5, #3
 801534a:	1859      	adds	r1, r3, r1
 801534c:	6808      	ldr	r0, [r1, #0]
 801534e:	6849      	ldr	r1, [r1, #4]
 8015350:	6832      	ldr	r2, [r6, #0]
 8015352:	6873      	ldr	r3, [r6, #4]
 8015354:	f7ec ffc6 	bl	80022e4 <__aeabi_dmul>
 8015358:	0002      	movs	r2, r0
 801535a:	000b      	movs	r3, r1
 801535c:	9800      	ldr	r0, [sp, #0]
 801535e:	9901      	ldr	r1, [sp, #4]
 8015360:	f7ec f850 	bl	8001404 <__aeabi_dadd>
 8015364:	3501      	adds	r5, #1
 8015366:	9000      	str	r0, [sp, #0]
 8015368:	9101      	str	r1, [sp, #4]
 801536a:	3e08      	subs	r6, #8
 801536c:	e7dc      	b.n	8015328 <__kernel_rem_pio2+0x3a8>
 801536e:	9b00      	ldr	r3, [sp, #0]
 8015370:	3b01      	subs	r3, #1
 8015372:	9300      	str	r3, [sp, #0]
 8015374:	e74f      	b.n	8015216 <__kernel_rem_pio2+0x296>
 8015376:	9b02      	ldr	r3, [sp, #8]
 8015378:	0030      	movs	r0, r6
 801537a:	425a      	negs	r2, r3
 801537c:	0039      	movs	r1, r7
 801537e:	f000 fc35 	bl	8015bec <scalbn>
 8015382:	2200      	movs	r2, #0
 8015384:	4bb6      	ldr	r3, [pc, #728]	; (8015660 <__kernel_rem_pio2+0x6e0>)
 8015386:	0004      	movs	r4, r0
 8015388:	000d      	movs	r5, r1
 801538a:	f7eb f86d 	bl	8000468 <__aeabi_dcmpge>
 801538e:	2800      	cmp	r0, #0
 8015390:	d025      	beq.n	80153de <__kernel_rem_pio2+0x45e>
 8015392:	2200      	movs	r2, #0
 8015394:	4bb3      	ldr	r3, [pc, #716]	; (8015664 <__kernel_rem_pio2+0x6e4>)
 8015396:	0020      	movs	r0, r4
 8015398:	0029      	movs	r1, r5
 801539a:	f7ec ffa3 	bl	80022e4 <__aeabi_dmul>
 801539e:	f7ed fdbd 	bl	8002f1c <__aeabi_d2iz>
 80153a2:	9b04      	ldr	r3, [sp, #16]
 80153a4:	0006      	movs	r6, r0
 80153a6:	009f      	lsls	r7, r3, #2
 80153a8:	f7ed fdee 	bl	8002f88 <__aeabi_i2d>
 80153ac:	2200      	movs	r2, #0
 80153ae:	4bac      	ldr	r3, [pc, #688]	; (8015660 <__kernel_rem_pio2+0x6e0>)
 80153b0:	f7ec ff98 	bl	80022e4 <__aeabi_dmul>
 80153b4:	0002      	movs	r2, r0
 80153b6:	000b      	movs	r3, r1
 80153b8:	0020      	movs	r0, r4
 80153ba:	0029      	movs	r1, r5
 80153bc:	f7ed f9fe 	bl	80027bc <__aeabi_dsub>
 80153c0:	f7ed fdac 	bl	8002f1c <__aeabi_d2iz>
 80153c4:	ab12      	add	r3, sp, #72	; 0x48
 80153c6:	51d8      	str	r0, [r3, r7]
 80153c8:	9b04      	ldr	r3, [sp, #16]
 80153ca:	aa12      	add	r2, sp, #72	; 0x48
 80153cc:	3301      	adds	r3, #1
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	9b02      	ldr	r3, [sp, #8]
 80153d2:	3318      	adds	r3, #24
 80153d4:	9302      	str	r3, [sp, #8]
 80153d6:	9b00      	ldr	r3, [sp, #0]
 80153d8:	009b      	lsls	r3, r3, #2
 80153da:	509e      	str	r6, [r3, r2]
 80153dc:	e725      	b.n	801522a <__kernel_rem_pio2+0x2aa>
 80153de:	9b04      	ldr	r3, [sp, #16]
 80153e0:	0020      	movs	r0, r4
 80153e2:	0029      	movs	r1, r5
 80153e4:	009e      	lsls	r6, r3, #2
 80153e6:	f7ed fd99 	bl	8002f1c <__aeabi_d2iz>
 80153ea:	ab12      	add	r3, sp, #72	; 0x48
 80153ec:	5198      	str	r0, [r3, r6]
 80153ee:	9b04      	ldr	r3, [sp, #16]
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	e71a      	b.n	801522a <__kernel_rem_pio2+0x2aa>
 80153f4:	00e5      	lsls	r5, r4, #3
 80153f6:	ab76      	add	r3, sp, #472	; 0x1d8
 80153f8:	aa12      	add	r2, sp, #72	; 0x48
 80153fa:	195d      	adds	r5, r3, r5
 80153fc:	00a3      	lsls	r3, r4, #2
 80153fe:	5898      	ldr	r0, [r3, r2]
 8015400:	f7ed fdc2 	bl	8002f88 <__aeabi_i2d>
 8015404:	0032      	movs	r2, r6
 8015406:	003b      	movs	r3, r7
 8015408:	f7ec ff6c 	bl	80022e4 <__aeabi_dmul>
 801540c:	2200      	movs	r2, #0
 801540e:	6028      	str	r0, [r5, #0]
 8015410:	6069      	str	r1, [r5, #4]
 8015412:	4b94      	ldr	r3, [pc, #592]	; (8015664 <__kernel_rem_pio2+0x6e4>)
 8015414:	0030      	movs	r0, r6
 8015416:	0039      	movs	r1, r7
 8015418:	f7ec ff64 	bl	80022e4 <__aeabi_dmul>
 801541c:	3c01      	subs	r4, #1
 801541e:	0006      	movs	r6, r0
 8015420:	000f      	movs	r7, r1
 8015422:	e70a      	b.n	801523a <__kernel_rem_pio2+0x2ba>
 8015424:	4b90      	ldr	r3, [pc, #576]	; (8015668 <__kernel_rem_pio2+0x6e8>)
 8015426:	00e1      	lsls	r1, r4, #3
 8015428:	1859      	adds	r1, r3, r1
 801542a:	6808      	ldr	r0, [r1, #0]
 801542c:	6849      	ldr	r1, [r1, #4]
 801542e:	cf0c      	ldmia	r7!, {r2, r3}
 8015430:	f7ec ff58 	bl	80022e4 <__aeabi_dmul>
 8015434:	0002      	movs	r2, r0
 8015436:	000b      	movs	r3, r1
 8015438:	9802      	ldr	r0, [sp, #8]
 801543a:	9903      	ldr	r1, [sp, #12]
 801543c:	f7eb ffe2 	bl	8001404 <__aeabi_dadd>
 8015440:	9002      	str	r0, [sp, #8]
 8015442:	9103      	str	r1, [sp, #12]
 8015444:	3401      	adds	r4, #1
 8015446:	9b08      	ldr	r3, [sp, #32]
 8015448:	429c      	cmp	r4, r3
 801544a:	dc01      	bgt.n	8015450 <__kernel_rem_pio2+0x4d0>
 801544c:	42a6      	cmp	r6, r4
 801544e:	dae9      	bge.n	8015424 <__kernel_rem_pio2+0x4a4>
 8015450:	00f3      	lsls	r3, r6, #3
 8015452:	aa4e      	add	r2, sp, #312	; 0x138
 8015454:	18d3      	adds	r3, r2, r3
 8015456:	3d01      	subs	r5, #1
 8015458:	9902      	ldr	r1, [sp, #8]
 801545a:	9a03      	ldr	r2, [sp, #12]
 801545c:	3601      	adds	r6, #1
 801545e:	6019      	str	r1, [r3, #0]
 8015460:	605a      	str	r2, [r3, #4]
 8015462:	e6ef      	b.n	8015244 <__kernel_rem_pio2+0x2c4>
 8015464:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015466:	2b02      	cmp	r3, #2
 8015468:	dc0b      	bgt.n	8015482 <__kernel_rem_pio2+0x502>
 801546a:	2b00      	cmp	r3, #0
 801546c:	dd00      	ble.n	8015470 <__kernel_rem_pio2+0x4f0>
 801546e:	e08a      	b.n	8015586 <__kernel_rem_pio2+0x606>
 8015470:	d055      	beq.n	801551e <__kernel_rem_pio2+0x59e>
 8015472:	2007      	movs	r0, #7
 8015474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015476:	4003      	ands	r3, r0
 8015478:	0018      	movs	r0, r3
 801547a:	239f      	movs	r3, #159	; 0x9f
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	449d      	add	sp, r3
 8015480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015482:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015484:	2b03      	cmp	r3, #3
 8015486:	d1f4      	bne.n	8015472 <__kernel_rem_pio2+0x4f2>
 8015488:	9b00      	ldr	r3, [sp, #0]
 801548a:	00dc      	lsls	r4, r3, #3
 801548c:	ab4e      	add	r3, sp, #312	; 0x138
 801548e:	191c      	adds	r4, r3, r4
 8015490:	0025      	movs	r5, r4
 8015492:	9b00      	ldr	r3, [sp, #0]
 8015494:	9302      	str	r3, [sp, #8]
 8015496:	9b02      	ldr	r3, [sp, #8]
 8015498:	3d08      	subs	r5, #8
 801549a:	2b00      	cmp	r3, #0
 801549c:	dd00      	ble.n	80154a0 <__kernel_rem_pio2+0x520>
 801549e:	e083      	b.n	80155a8 <__kernel_rem_pio2+0x628>
 80154a0:	9d00      	ldr	r5, [sp, #0]
 80154a2:	3c08      	subs	r4, #8
 80154a4:	2d01      	cmp	r5, #1
 80154a6:	dd00      	ble.n	80154aa <__kernel_rem_pio2+0x52a>
 80154a8:	e0a0      	b.n	80155ec <__kernel_rem_pio2+0x66c>
 80154aa:	2400      	movs	r4, #0
 80154ac:	0021      	movs	r1, r4
 80154ae:	9b00      	ldr	r3, [sp, #0]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	dd00      	ble.n	80154b6 <__kernel_rem_pio2+0x536>
 80154b4:	e0b8      	b.n	8015628 <__kernel_rem_pio2+0x6a8>
 80154b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154b8:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 80154ba:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80154bc:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80154be:	9851      	ldr	r0, [sp, #324]	; 0x144
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d000      	beq.n	80154c6 <__kernel_rem_pio2+0x546>
 80154c4:	e0be      	b.n	8015644 <__kernel_rem_pio2+0x6c4>
 80154c6:	0033      	movs	r3, r6
 80154c8:	003a      	movs	r2, r7
 80154ca:	9e07      	ldr	r6, [sp, #28]
 80154cc:	6032      	str	r2, [r6, #0]
 80154ce:	6073      	str	r3, [r6, #4]
 80154d0:	002a      	movs	r2, r5
 80154d2:	0003      	movs	r3, r0
 80154d4:	60b2      	str	r2, [r6, #8]
 80154d6:	60f3      	str	r3, [r6, #12]
 80154d8:	0022      	movs	r2, r4
 80154da:	000b      	movs	r3, r1
 80154dc:	6132      	str	r2, [r6, #16]
 80154de:	6173      	str	r3, [r6, #20]
 80154e0:	e7c7      	b.n	8015472 <__kernel_rem_pio2+0x4f2>
 80154e2:	9b00      	ldr	r3, [sp, #0]
 80154e4:	aa4e      	add	r2, sp, #312	; 0x138
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	18d3      	adds	r3, r2, r3
 80154ea:	0028      	movs	r0, r5
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	0021      	movs	r1, r4
 80154f2:	f7eb ff87 	bl	8001404 <__aeabi_dadd>
 80154f6:	0005      	movs	r5, r0
 80154f8:	000c      	movs	r4, r1
 80154fa:	9b00      	ldr	r3, [sp, #0]
 80154fc:	3b01      	subs	r3, #1
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	9b00      	ldr	r3, [sp, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	daed      	bge.n	80154e2 <__kernel_rem_pio2+0x562>
 8015506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015508:	2b00      	cmp	r3, #0
 801550a:	d002      	beq.n	8015512 <__kernel_rem_pio2+0x592>
 801550c:	2380      	movs	r3, #128	; 0x80
 801550e:	061b      	lsls	r3, r3, #24
 8015510:	18e4      	adds	r4, r4, r3
 8015512:	002a      	movs	r2, r5
 8015514:	0023      	movs	r3, r4
 8015516:	9907      	ldr	r1, [sp, #28]
 8015518:	600a      	str	r2, [r1, #0]
 801551a:	604b      	str	r3, [r1, #4]
 801551c:	e7a9      	b.n	8015472 <__kernel_rem_pio2+0x4f2>
 801551e:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8015520:	002c      	movs	r4, r5
 8015522:	e7ed      	b.n	8015500 <__kernel_rem_pio2+0x580>
 8015524:	00e3      	lsls	r3, r4, #3
 8015526:	aa4e      	add	r2, sp, #312	; 0x138
 8015528:	18d3      	adds	r3, r2, r3
 801552a:	0030      	movs	r0, r6
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	0029      	movs	r1, r5
 8015532:	f7eb ff67 	bl	8001404 <__aeabi_dadd>
 8015536:	0006      	movs	r6, r0
 8015538:	000d      	movs	r5, r1
 801553a:	3c01      	subs	r4, #1
 801553c:	2c00      	cmp	r4, #0
 801553e:	daf1      	bge.n	8015524 <__kernel_rem_pio2+0x5a4>
 8015540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015542:	0029      	movs	r1, r5
 8015544:	2b00      	cmp	r3, #0
 8015546:	d002      	beq.n	801554e <__kernel_rem_pio2+0x5ce>
 8015548:	2380      	movs	r3, #128	; 0x80
 801554a:	061b      	lsls	r3, r3, #24
 801554c:	18e9      	adds	r1, r5, r3
 801554e:	0032      	movs	r2, r6
 8015550:	000b      	movs	r3, r1
 8015552:	9907      	ldr	r1, [sp, #28]
 8015554:	2401      	movs	r4, #1
 8015556:	600a      	str	r2, [r1, #0]
 8015558:	604b      	str	r3, [r1, #4]
 801555a:	984e      	ldr	r0, [sp, #312]	; 0x138
 801555c:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801555e:	002b      	movs	r3, r5
 8015560:	f7ed f92c 	bl	80027bc <__aeabi_dsub>
 8015564:	0006      	movs	r6, r0
 8015566:	000d      	movs	r5, r1
 8015568:	9b00      	ldr	r3, [sp, #0]
 801556a:	42a3      	cmp	r3, r4
 801556c:	da0f      	bge.n	801558e <__kernel_rem_pio2+0x60e>
 801556e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015570:	2b00      	cmp	r3, #0
 8015572:	d002      	beq.n	801557a <__kernel_rem_pio2+0x5fa>
 8015574:	2380      	movs	r3, #128	; 0x80
 8015576:	061b      	lsls	r3, r3, #24
 8015578:	18ed      	adds	r5, r5, r3
 801557a:	0032      	movs	r2, r6
 801557c:	002b      	movs	r3, r5
 801557e:	9907      	ldr	r1, [sp, #28]
 8015580:	608a      	str	r2, [r1, #8]
 8015582:	60cb      	str	r3, [r1, #12]
 8015584:	e775      	b.n	8015472 <__kernel_rem_pio2+0x4f2>
 8015586:	2600      	movs	r6, #0
 8015588:	9c00      	ldr	r4, [sp, #0]
 801558a:	0035      	movs	r5, r6
 801558c:	e7d6      	b.n	801553c <__kernel_rem_pio2+0x5bc>
 801558e:	00e3      	lsls	r3, r4, #3
 8015590:	aa4e      	add	r2, sp, #312	; 0x138
 8015592:	18d3      	adds	r3, r2, r3
 8015594:	0030      	movs	r0, r6
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	0029      	movs	r1, r5
 801559c:	f7eb ff32 	bl	8001404 <__aeabi_dadd>
 80155a0:	3401      	adds	r4, #1
 80155a2:	0006      	movs	r6, r0
 80155a4:	000d      	movs	r5, r1
 80155a6:	e7df      	b.n	8015568 <__kernel_rem_pio2+0x5e8>
 80155a8:	9b02      	ldr	r3, [sp, #8]
 80155aa:	68ae      	ldr	r6, [r5, #8]
 80155ac:	68ef      	ldr	r7, [r5, #12]
 80155ae:	3b01      	subs	r3, #1
 80155b0:	9302      	str	r3, [sp, #8]
 80155b2:	682a      	ldr	r2, [r5, #0]
 80155b4:	686b      	ldr	r3, [r5, #4]
 80155b6:	9204      	str	r2, [sp, #16]
 80155b8:	9305      	str	r3, [sp, #20]
 80155ba:	9804      	ldr	r0, [sp, #16]
 80155bc:	9905      	ldr	r1, [sp, #20]
 80155be:	0032      	movs	r2, r6
 80155c0:	003b      	movs	r3, r7
 80155c2:	f7eb ff1f 	bl	8001404 <__aeabi_dadd>
 80155c6:	0002      	movs	r2, r0
 80155c8:	000b      	movs	r3, r1
 80155ca:	9008      	str	r0, [sp, #32]
 80155cc:	9109      	str	r1, [sp, #36]	; 0x24
 80155ce:	9804      	ldr	r0, [sp, #16]
 80155d0:	9905      	ldr	r1, [sp, #20]
 80155d2:	f7ed f8f3 	bl	80027bc <__aeabi_dsub>
 80155d6:	0032      	movs	r2, r6
 80155d8:	003b      	movs	r3, r7
 80155da:	f7eb ff13 	bl	8001404 <__aeabi_dadd>
 80155de:	9a08      	ldr	r2, [sp, #32]
 80155e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155e2:	60a8      	str	r0, [r5, #8]
 80155e4:	60e9      	str	r1, [r5, #12]
 80155e6:	602a      	str	r2, [r5, #0]
 80155e8:	606b      	str	r3, [r5, #4]
 80155ea:	e754      	b.n	8015496 <__kernel_rem_pio2+0x516>
 80155ec:	6826      	ldr	r6, [r4, #0]
 80155ee:	6867      	ldr	r7, [r4, #4]
 80155f0:	68a2      	ldr	r2, [r4, #8]
 80155f2:	68e3      	ldr	r3, [r4, #12]
 80155f4:	0030      	movs	r0, r6
 80155f6:	0039      	movs	r1, r7
 80155f8:	9202      	str	r2, [sp, #8]
 80155fa:	9303      	str	r3, [sp, #12]
 80155fc:	f7eb ff02 	bl	8001404 <__aeabi_dadd>
 8015600:	0002      	movs	r2, r0
 8015602:	000b      	movs	r3, r1
 8015604:	9004      	str	r0, [sp, #16]
 8015606:	9105      	str	r1, [sp, #20]
 8015608:	0030      	movs	r0, r6
 801560a:	0039      	movs	r1, r7
 801560c:	f7ed f8d6 	bl	80027bc <__aeabi_dsub>
 8015610:	9a02      	ldr	r2, [sp, #8]
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	f7eb fef6 	bl	8001404 <__aeabi_dadd>
 8015618:	9a04      	ldr	r2, [sp, #16]
 801561a:	9b05      	ldr	r3, [sp, #20]
 801561c:	60a0      	str	r0, [r4, #8]
 801561e:	60e1      	str	r1, [r4, #12]
 8015620:	6022      	str	r2, [r4, #0]
 8015622:	6063      	str	r3, [r4, #4]
 8015624:	3d01      	subs	r5, #1
 8015626:	e73c      	b.n	80154a2 <__kernel_rem_pio2+0x522>
 8015628:	9b00      	ldr	r3, [sp, #0]
 801562a:	aa4e      	add	r2, sp, #312	; 0x138
 801562c:	00db      	lsls	r3, r3, #3
 801562e:	18d3      	adds	r3, r2, r3
 8015630:	0020      	movs	r0, r4
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	f7eb fee5 	bl	8001404 <__aeabi_dadd>
 801563a:	9b00      	ldr	r3, [sp, #0]
 801563c:	0004      	movs	r4, r0
 801563e:	3b01      	subs	r3, #1
 8015640:	9300      	str	r3, [sp, #0]
 8015642:	e734      	b.n	80154ae <__kernel_rem_pio2+0x52e>
 8015644:	9b07      	ldr	r3, [sp, #28]
 8015646:	9a07      	ldr	r2, [sp, #28]
 8015648:	601f      	str	r7, [r3, #0]
 801564a:	2380      	movs	r3, #128	; 0x80
 801564c:	061b      	lsls	r3, r3, #24
 801564e:	18f6      	adds	r6, r6, r3
 8015650:	18c0      	adds	r0, r0, r3
 8015652:	18c9      	adds	r1, r1, r3
 8015654:	6056      	str	r6, [r2, #4]
 8015656:	6095      	str	r5, [r2, #8]
 8015658:	60d0      	str	r0, [r2, #12]
 801565a:	6114      	str	r4, [r2, #16]
 801565c:	6151      	str	r1, [r2, #20]
 801565e:	e708      	b.n	8015472 <__kernel_rem_pio2+0x4f2>
 8015660:	41700000 	.word	0x41700000
 8015664:	3e700000 	.word	0x3e700000
 8015668:	080187f8 	.word	0x080187f8

0801566c <__kernel_sin>:
 801566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801566e:	b089      	sub	sp, #36	; 0x24
 8015670:	9202      	str	r2, [sp, #8]
 8015672:	9303      	str	r3, [sp, #12]
 8015674:	22f9      	movs	r2, #249	; 0xf9
 8015676:	004b      	lsls	r3, r1, #1
 8015678:	0007      	movs	r7, r0
 801567a:	000e      	movs	r6, r1
 801567c:	085b      	lsrs	r3, r3, #1
 801567e:	0592      	lsls	r2, r2, #22
 8015680:	4293      	cmp	r3, r2
 8015682:	da03      	bge.n	801568c <__kernel_sin+0x20>
 8015684:	f7ed fc4a 	bl	8002f1c <__aeabi_d2iz>
 8015688:	2800      	cmp	r0, #0
 801568a:	d04c      	beq.n	8015726 <__kernel_sin+0xba>
 801568c:	003a      	movs	r2, r7
 801568e:	0033      	movs	r3, r6
 8015690:	0038      	movs	r0, r7
 8015692:	0031      	movs	r1, r6
 8015694:	f7ec fe26 	bl	80022e4 <__aeabi_dmul>
 8015698:	0004      	movs	r4, r0
 801569a:	000d      	movs	r5, r1
 801569c:	0002      	movs	r2, r0
 801569e:	000b      	movs	r3, r1
 80156a0:	0038      	movs	r0, r7
 80156a2:	0031      	movs	r1, r6
 80156a4:	f7ec fe1e 	bl	80022e4 <__aeabi_dmul>
 80156a8:	4a39      	ldr	r2, [pc, #228]	; (8015790 <__kernel_sin+0x124>)
 80156aa:	9000      	str	r0, [sp, #0]
 80156ac:	9101      	str	r1, [sp, #4]
 80156ae:	4b39      	ldr	r3, [pc, #228]	; (8015794 <__kernel_sin+0x128>)
 80156b0:	0020      	movs	r0, r4
 80156b2:	0029      	movs	r1, r5
 80156b4:	f7ec fe16 	bl	80022e4 <__aeabi_dmul>
 80156b8:	4a37      	ldr	r2, [pc, #220]	; (8015798 <__kernel_sin+0x12c>)
 80156ba:	4b38      	ldr	r3, [pc, #224]	; (801579c <__kernel_sin+0x130>)
 80156bc:	f7ed f87e 	bl	80027bc <__aeabi_dsub>
 80156c0:	0022      	movs	r2, r4
 80156c2:	002b      	movs	r3, r5
 80156c4:	f7ec fe0e 	bl	80022e4 <__aeabi_dmul>
 80156c8:	4a35      	ldr	r2, [pc, #212]	; (80157a0 <__kernel_sin+0x134>)
 80156ca:	4b36      	ldr	r3, [pc, #216]	; (80157a4 <__kernel_sin+0x138>)
 80156cc:	f7eb fe9a 	bl	8001404 <__aeabi_dadd>
 80156d0:	0022      	movs	r2, r4
 80156d2:	002b      	movs	r3, r5
 80156d4:	f7ec fe06 	bl	80022e4 <__aeabi_dmul>
 80156d8:	4a33      	ldr	r2, [pc, #204]	; (80157a8 <__kernel_sin+0x13c>)
 80156da:	4b34      	ldr	r3, [pc, #208]	; (80157ac <__kernel_sin+0x140>)
 80156dc:	f7ed f86e 	bl	80027bc <__aeabi_dsub>
 80156e0:	0022      	movs	r2, r4
 80156e2:	002b      	movs	r3, r5
 80156e4:	f7ec fdfe 	bl	80022e4 <__aeabi_dmul>
 80156e8:	4b31      	ldr	r3, [pc, #196]	; (80157b0 <__kernel_sin+0x144>)
 80156ea:	4a32      	ldr	r2, [pc, #200]	; (80157b4 <__kernel_sin+0x148>)
 80156ec:	f7eb fe8a 	bl	8001404 <__aeabi_dadd>
 80156f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156f2:	9004      	str	r0, [sp, #16]
 80156f4:	9105      	str	r1, [sp, #20]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d119      	bne.n	801572e <__kernel_sin+0xc2>
 80156fa:	0002      	movs	r2, r0
 80156fc:	000b      	movs	r3, r1
 80156fe:	0020      	movs	r0, r4
 8015700:	0029      	movs	r1, r5
 8015702:	f7ec fdef 	bl	80022e4 <__aeabi_dmul>
 8015706:	4a2c      	ldr	r2, [pc, #176]	; (80157b8 <__kernel_sin+0x14c>)
 8015708:	4b2c      	ldr	r3, [pc, #176]	; (80157bc <__kernel_sin+0x150>)
 801570a:	f7ed f857 	bl	80027bc <__aeabi_dsub>
 801570e:	9a00      	ldr	r2, [sp, #0]
 8015710:	9b01      	ldr	r3, [sp, #4]
 8015712:	f7ec fde7 	bl	80022e4 <__aeabi_dmul>
 8015716:	0002      	movs	r2, r0
 8015718:	000b      	movs	r3, r1
 801571a:	0038      	movs	r0, r7
 801571c:	0031      	movs	r1, r6
 801571e:	f7eb fe71 	bl	8001404 <__aeabi_dadd>
 8015722:	0007      	movs	r7, r0
 8015724:	000e      	movs	r6, r1
 8015726:	0038      	movs	r0, r7
 8015728:	0031      	movs	r1, r6
 801572a:	b009      	add	sp, #36	; 0x24
 801572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801572e:	2200      	movs	r2, #0
 8015730:	9802      	ldr	r0, [sp, #8]
 8015732:	9903      	ldr	r1, [sp, #12]
 8015734:	4b22      	ldr	r3, [pc, #136]	; (80157c0 <__kernel_sin+0x154>)
 8015736:	f7ec fdd5 	bl	80022e4 <__aeabi_dmul>
 801573a:	9a04      	ldr	r2, [sp, #16]
 801573c:	9b05      	ldr	r3, [sp, #20]
 801573e:	9006      	str	r0, [sp, #24]
 8015740:	9107      	str	r1, [sp, #28]
 8015742:	9800      	ldr	r0, [sp, #0]
 8015744:	9901      	ldr	r1, [sp, #4]
 8015746:	f7ec fdcd 	bl	80022e4 <__aeabi_dmul>
 801574a:	0002      	movs	r2, r0
 801574c:	000b      	movs	r3, r1
 801574e:	9806      	ldr	r0, [sp, #24]
 8015750:	9907      	ldr	r1, [sp, #28]
 8015752:	f7ed f833 	bl	80027bc <__aeabi_dsub>
 8015756:	0022      	movs	r2, r4
 8015758:	002b      	movs	r3, r5
 801575a:	f7ec fdc3 	bl	80022e4 <__aeabi_dmul>
 801575e:	9a02      	ldr	r2, [sp, #8]
 8015760:	9b03      	ldr	r3, [sp, #12]
 8015762:	f7ed f82b 	bl	80027bc <__aeabi_dsub>
 8015766:	4a14      	ldr	r2, [pc, #80]	; (80157b8 <__kernel_sin+0x14c>)
 8015768:	0004      	movs	r4, r0
 801576a:	000d      	movs	r5, r1
 801576c:	9800      	ldr	r0, [sp, #0]
 801576e:	9901      	ldr	r1, [sp, #4]
 8015770:	4b12      	ldr	r3, [pc, #72]	; (80157bc <__kernel_sin+0x150>)
 8015772:	f7ec fdb7 	bl	80022e4 <__aeabi_dmul>
 8015776:	0002      	movs	r2, r0
 8015778:	000b      	movs	r3, r1
 801577a:	0020      	movs	r0, r4
 801577c:	0029      	movs	r1, r5
 801577e:	f7eb fe41 	bl	8001404 <__aeabi_dadd>
 8015782:	0002      	movs	r2, r0
 8015784:	000b      	movs	r3, r1
 8015786:	0038      	movs	r0, r7
 8015788:	0031      	movs	r1, r6
 801578a:	f7ed f817 	bl	80027bc <__aeabi_dsub>
 801578e:	e7c8      	b.n	8015722 <__kernel_sin+0xb6>
 8015790:	5acfd57c 	.word	0x5acfd57c
 8015794:	3de5d93a 	.word	0x3de5d93a
 8015798:	8a2b9ceb 	.word	0x8a2b9ceb
 801579c:	3e5ae5e6 	.word	0x3e5ae5e6
 80157a0:	57b1fe7d 	.word	0x57b1fe7d
 80157a4:	3ec71de3 	.word	0x3ec71de3
 80157a8:	19c161d5 	.word	0x19c161d5
 80157ac:	3f2a01a0 	.word	0x3f2a01a0
 80157b0:	3f811111 	.word	0x3f811111
 80157b4:	1110f8a6 	.word	0x1110f8a6
 80157b8:	55555549 	.word	0x55555549
 80157bc:	3fc55555 	.word	0x3fc55555
 80157c0:	3fe00000 	.word	0x3fe00000

080157c4 <atan>:
 80157c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157c6:	4b98      	ldr	r3, [pc, #608]	; (8015a28 <atan+0x264>)
 80157c8:	b085      	sub	sp, #20
 80157ca:	004e      	lsls	r6, r1, #1
 80157cc:	0004      	movs	r4, r0
 80157ce:	000d      	movs	r5, r1
 80157d0:	9103      	str	r1, [sp, #12]
 80157d2:	0876      	lsrs	r6, r6, #1
 80157d4:	429e      	cmp	r6, r3
 80157d6:	dd18      	ble.n	801580a <atan+0x46>
 80157d8:	4b94      	ldr	r3, [pc, #592]	; (8015a2c <atan+0x268>)
 80157da:	429e      	cmp	r6, r3
 80157dc:	dc02      	bgt.n	80157e4 <atan+0x20>
 80157de:	d10a      	bne.n	80157f6 <atan+0x32>
 80157e0:	2800      	cmp	r0, #0
 80157e2:	d008      	beq.n	80157f6 <atan+0x32>
 80157e4:	0022      	movs	r2, r4
 80157e6:	002b      	movs	r3, r5
 80157e8:	0020      	movs	r0, r4
 80157ea:	0029      	movs	r1, r5
 80157ec:	f7eb fe0a 	bl	8001404 <__aeabi_dadd>
 80157f0:	0004      	movs	r4, r0
 80157f2:	000d      	movs	r5, r1
 80157f4:	e005      	b.n	8015802 <atan+0x3e>
 80157f6:	9b03      	ldr	r3, [sp, #12]
 80157f8:	4c8d      	ldr	r4, [pc, #564]	; (8015a30 <atan+0x26c>)
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	dd00      	ble.n	8015800 <atan+0x3c>
 80157fe:	e110      	b.n	8015a22 <atan+0x25e>
 8015800:	4d8c      	ldr	r5, [pc, #560]	; (8015a34 <atan+0x270>)
 8015802:	0020      	movs	r0, r4
 8015804:	0029      	movs	r1, r5
 8015806:	b005      	add	sp, #20
 8015808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801580a:	4b8b      	ldr	r3, [pc, #556]	; (8015a38 <atan+0x274>)
 801580c:	429e      	cmp	r6, r3
 801580e:	dc0f      	bgt.n	8015830 <atan+0x6c>
 8015810:	4b8a      	ldr	r3, [pc, #552]	; (8015a3c <atan+0x278>)
 8015812:	429e      	cmp	r6, r3
 8015814:	dc09      	bgt.n	801582a <atan+0x66>
 8015816:	4a8a      	ldr	r2, [pc, #552]	; (8015a40 <atan+0x27c>)
 8015818:	4b8a      	ldr	r3, [pc, #552]	; (8015a44 <atan+0x280>)
 801581a:	f7eb fdf3 	bl	8001404 <__aeabi_dadd>
 801581e:	2200      	movs	r2, #0
 8015820:	4b89      	ldr	r3, [pc, #548]	; (8015a48 <atan+0x284>)
 8015822:	f7ea fe17 	bl	8000454 <__aeabi_dcmpgt>
 8015826:	2800      	cmp	r0, #0
 8015828:	d1eb      	bne.n	8015802 <atan+0x3e>
 801582a:	2301      	movs	r3, #1
 801582c:	425b      	negs	r3, r3
 801582e:	e025      	b.n	801587c <atan+0xb8>
 8015830:	f000 f948 	bl	8015ac4 <fabs>
 8015834:	4b85      	ldr	r3, [pc, #532]	; (8015a4c <atan+0x288>)
 8015836:	0004      	movs	r4, r0
 8015838:	000d      	movs	r5, r1
 801583a:	429e      	cmp	r6, r3
 801583c:	dd00      	ble.n	8015840 <atan+0x7c>
 801583e:	e0aa      	b.n	8015996 <atan+0x1d2>
 8015840:	4b83      	ldr	r3, [pc, #524]	; (8015a50 <atan+0x28c>)
 8015842:	429e      	cmp	r6, r3
 8015844:	dd00      	ble.n	8015848 <atan+0x84>
 8015846:	e090      	b.n	801596a <atan+0x1a6>
 8015848:	0002      	movs	r2, r0
 801584a:	000b      	movs	r3, r1
 801584c:	f7eb fdda 	bl	8001404 <__aeabi_dadd>
 8015850:	2200      	movs	r2, #0
 8015852:	4b7d      	ldr	r3, [pc, #500]	; (8015a48 <atan+0x284>)
 8015854:	f7ec ffb2 	bl	80027bc <__aeabi_dsub>
 8015858:	2380      	movs	r3, #128	; 0x80
 801585a:	0006      	movs	r6, r0
 801585c:	000f      	movs	r7, r1
 801585e:	2200      	movs	r2, #0
 8015860:	0020      	movs	r0, r4
 8015862:	0029      	movs	r1, r5
 8015864:	05db      	lsls	r3, r3, #23
 8015866:	f7eb fdcd 	bl	8001404 <__aeabi_dadd>
 801586a:	000b      	movs	r3, r1
 801586c:	0002      	movs	r2, r0
 801586e:	0039      	movs	r1, r7
 8015870:	0030      	movs	r0, r6
 8015872:	f7ec f931 	bl	8001ad8 <__aeabi_ddiv>
 8015876:	2300      	movs	r3, #0
 8015878:	0004      	movs	r4, r0
 801587a:	000d      	movs	r5, r1
 801587c:	0022      	movs	r2, r4
 801587e:	9302      	str	r3, [sp, #8]
 8015880:	0020      	movs	r0, r4
 8015882:	002b      	movs	r3, r5
 8015884:	0029      	movs	r1, r5
 8015886:	f7ec fd2d 	bl	80022e4 <__aeabi_dmul>
 801588a:	0002      	movs	r2, r0
 801588c:	000b      	movs	r3, r1
 801588e:	9000      	str	r0, [sp, #0]
 8015890:	9101      	str	r1, [sp, #4]
 8015892:	f7ec fd27 	bl	80022e4 <__aeabi_dmul>
 8015896:	0006      	movs	r6, r0
 8015898:	000f      	movs	r7, r1
 801589a:	4a6e      	ldr	r2, [pc, #440]	; (8015a54 <atan+0x290>)
 801589c:	4b6e      	ldr	r3, [pc, #440]	; (8015a58 <atan+0x294>)
 801589e:	f7ec fd21 	bl	80022e4 <__aeabi_dmul>
 80158a2:	4a6e      	ldr	r2, [pc, #440]	; (8015a5c <atan+0x298>)
 80158a4:	4b6e      	ldr	r3, [pc, #440]	; (8015a60 <atan+0x29c>)
 80158a6:	f7eb fdad 	bl	8001404 <__aeabi_dadd>
 80158aa:	0032      	movs	r2, r6
 80158ac:	003b      	movs	r3, r7
 80158ae:	f7ec fd19 	bl	80022e4 <__aeabi_dmul>
 80158b2:	4a6c      	ldr	r2, [pc, #432]	; (8015a64 <atan+0x2a0>)
 80158b4:	4b6c      	ldr	r3, [pc, #432]	; (8015a68 <atan+0x2a4>)
 80158b6:	f7eb fda5 	bl	8001404 <__aeabi_dadd>
 80158ba:	0032      	movs	r2, r6
 80158bc:	003b      	movs	r3, r7
 80158be:	f7ec fd11 	bl	80022e4 <__aeabi_dmul>
 80158c2:	4a6a      	ldr	r2, [pc, #424]	; (8015a6c <atan+0x2a8>)
 80158c4:	4b6a      	ldr	r3, [pc, #424]	; (8015a70 <atan+0x2ac>)
 80158c6:	f7eb fd9d 	bl	8001404 <__aeabi_dadd>
 80158ca:	0032      	movs	r2, r6
 80158cc:	003b      	movs	r3, r7
 80158ce:	f7ec fd09 	bl	80022e4 <__aeabi_dmul>
 80158d2:	4a68      	ldr	r2, [pc, #416]	; (8015a74 <atan+0x2b0>)
 80158d4:	4b68      	ldr	r3, [pc, #416]	; (8015a78 <atan+0x2b4>)
 80158d6:	f7eb fd95 	bl	8001404 <__aeabi_dadd>
 80158da:	0032      	movs	r2, r6
 80158dc:	003b      	movs	r3, r7
 80158de:	f7ec fd01 	bl	80022e4 <__aeabi_dmul>
 80158e2:	4a66      	ldr	r2, [pc, #408]	; (8015a7c <atan+0x2b8>)
 80158e4:	4b66      	ldr	r3, [pc, #408]	; (8015a80 <atan+0x2bc>)
 80158e6:	f7eb fd8d 	bl	8001404 <__aeabi_dadd>
 80158ea:	9a00      	ldr	r2, [sp, #0]
 80158ec:	9b01      	ldr	r3, [sp, #4]
 80158ee:	f7ec fcf9 	bl	80022e4 <__aeabi_dmul>
 80158f2:	4a64      	ldr	r2, [pc, #400]	; (8015a84 <atan+0x2c0>)
 80158f4:	9000      	str	r0, [sp, #0]
 80158f6:	9101      	str	r1, [sp, #4]
 80158f8:	4b63      	ldr	r3, [pc, #396]	; (8015a88 <atan+0x2c4>)
 80158fa:	0030      	movs	r0, r6
 80158fc:	0039      	movs	r1, r7
 80158fe:	f7ec fcf1 	bl	80022e4 <__aeabi_dmul>
 8015902:	4a62      	ldr	r2, [pc, #392]	; (8015a8c <atan+0x2c8>)
 8015904:	4b62      	ldr	r3, [pc, #392]	; (8015a90 <atan+0x2cc>)
 8015906:	f7ec ff59 	bl	80027bc <__aeabi_dsub>
 801590a:	0032      	movs	r2, r6
 801590c:	003b      	movs	r3, r7
 801590e:	f7ec fce9 	bl	80022e4 <__aeabi_dmul>
 8015912:	4a60      	ldr	r2, [pc, #384]	; (8015a94 <atan+0x2d0>)
 8015914:	4b60      	ldr	r3, [pc, #384]	; (8015a98 <atan+0x2d4>)
 8015916:	f7ec ff51 	bl	80027bc <__aeabi_dsub>
 801591a:	0032      	movs	r2, r6
 801591c:	003b      	movs	r3, r7
 801591e:	f7ec fce1 	bl	80022e4 <__aeabi_dmul>
 8015922:	4a5e      	ldr	r2, [pc, #376]	; (8015a9c <atan+0x2d8>)
 8015924:	4b5e      	ldr	r3, [pc, #376]	; (8015aa0 <atan+0x2dc>)
 8015926:	f7ec ff49 	bl	80027bc <__aeabi_dsub>
 801592a:	0032      	movs	r2, r6
 801592c:	003b      	movs	r3, r7
 801592e:	f7ec fcd9 	bl	80022e4 <__aeabi_dmul>
 8015932:	4a5c      	ldr	r2, [pc, #368]	; (8015aa4 <atan+0x2e0>)
 8015934:	4b5c      	ldr	r3, [pc, #368]	; (8015aa8 <atan+0x2e4>)
 8015936:	f7ec ff41 	bl	80027bc <__aeabi_dsub>
 801593a:	0032      	movs	r2, r6
 801593c:	003b      	movs	r3, r7
 801593e:	f7ec fcd1 	bl	80022e4 <__aeabi_dmul>
 8015942:	0002      	movs	r2, r0
 8015944:	000b      	movs	r3, r1
 8015946:	9800      	ldr	r0, [sp, #0]
 8015948:	9901      	ldr	r1, [sp, #4]
 801594a:	f7eb fd5b 	bl	8001404 <__aeabi_dadd>
 801594e:	002b      	movs	r3, r5
 8015950:	0022      	movs	r2, r4
 8015952:	f7ec fcc7 	bl	80022e4 <__aeabi_dmul>
 8015956:	9b02      	ldr	r3, [sp, #8]
 8015958:	3301      	adds	r3, #1
 801595a:	d143      	bne.n	80159e4 <atan+0x220>
 801595c:	0002      	movs	r2, r0
 801595e:	000b      	movs	r3, r1
 8015960:	0020      	movs	r0, r4
 8015962:	0029      	movs	r1, r5
 8015964:	f7ec ff2a 	bl	80027bc <__aeabi_dsub>
 8015968:	e742      	b.n	80157f0 <atan+0x2c>
 801596a:	2200      	movs	r2, #0
 801596c:	4b36      	ldr	r3, [pc, #216]	; (8015a48 <atan+0x284>)
 801596e:	f7ec ff25 	bl	80027bc <__aeabi_dsub>
 8015972:	2200      	movs	r2, #0
 8015974:	0006      	movs	r6, r0
 8015976:	000f      	movs	r7, r1
 8015978:	0020      	movs	r0, r4
 801597a:	0029      	movs	r1, r5
 801597c:	4b32      	ldr	r3, [pc, #200]	; (8015a48 <atan+0x284>)
 801597e:	f7eb fd41 	bl	8001404 <__aeabi_dadd>
 8015982:	000b      	movs	r3, r1
 8015984:	0002      	movs	r2, r0
 8015986:	0039      	movs	r1, r7
 8015988:	0030      	movs	r0, r6
 801598a:	f7ec f8a5 	bl	8001ad8 <__aeabi_ddiv>
 801598e:	2301      	movs	r3, #1
 8015990:	0004      	movs	r4, r0
 8015992:	000d      	movs	r5, r1
 8015994:	e772      	b.n	801587c <atan+0xb8>
 8015996:	4b45      	ldr	r3, [pc, #276]	; (8015aac <atan+0x2e8>)
 8015998:	429e      	cmp	r6, r3
 801599a:	dc19      	bgt.n	80159d0 <atan+0x20c>
 801599c:	2200      	movs	r2, #0
 801599e:	4b44      	ldr	r3, [pc, #272]	; (8015ab0 <atan+0x2ec>)
 80159a0:	f7ec ff0c 	bl	80027bc <__aeabi_dsub>
 80159a4:	2200      	movs	r2, #0
 80159a6:	0006      	movs	r6, r0
 80159a8:	000f      	movs	r7, r1
 80159aa:	0020      	movs	r0, r4
 80159ac:	0029      	movs	r1, r5
 80159ae:	4b40      	ldr	r3, [pc, #256]	; (8015ab0 <atan+0x2ec>)
 80159b0:	f7ec fc98 	bl	80022e4 <__aeabi_dmul>
 80159b4:	2200      	movs	r2, #0
 80159b6:	4b24      	ldr	r3, [pc, #144]	; (8015a48 <atan+0x284>)
 80159b8:	f7eb fd24 	bl	8001404 <__aeabi_dadd>
 80159bc:	000b      	movs	r3, r1
 80159be:	0002      	movs	r2, r0
 80159c0:	0039      	movs	r1, r7
 80159c2:	0030      	movs	r0, r6
 80159c4:	f7ec f888 	bl	8001ad8 <__aeabi_ddiv>
 80159c8:	2302      	movs	r3, #2
 80159ca:	0004      	movs	r4, r0
 80159cc:	000d      	movs	r5, r1
 80159ce:	e755      	b.n	801587c <atan+0xb8>
 80159d0:	000b      	movs	r3, r1
 80159d2:	0002      	movs	r2, r0
 80159d4:	4937      	ldr	r1, [pc, #220]	; (8015ab4 <atan+0x2f0>)
 80159d6:	2000      	movs	r0, #0
 80159d8:	f7ec f87e 	bl	8001ad8 <__aeabi_ddiv>
 80159dc:	2303      	movs	r3, #3
 80159de:	0004      	movs	r4, r0
 80159e0:	000d      	movs	r5, r1
 80159e2:	e74b      	b.n	801587c <atan+0xb8>
 80159e4:	9b02      	ldr	r3, [sp, #8]
 80159e6:	4f34      	ldr	r7, [pc, #208]	; (8015ab8 <atan+0x2f4>)
 80159e8:	00de      	lsls	r6, r3, #3
 80159ea:	4b34      	ldr	r3, [pc, #208]	; (8015abc <atan+0x2f8>)
 80159ec:	19bf      	adds	r7, r7, r6
 80159ee:	199e      	adds	r6, r3, r6
 80159f0:	6832      	ldr	r2, [r6, #0]
 80159f2:	6873      	ldr	r3, [r6, #4]
 80159f4:	f7ec fee2 	bl	80027bc <__aeabi_dsub>
 80159f8:	0022      	movs	r2, r4
 80159fa:	002b      	movs	r3, r5
 80159fc:	f7ec fede 	bl	80027bc <__aeabi_dsub>
 8015a00:	000b      	movs	r3, r1
 8015a02:	0002      	movs	r2, r0
 8015a04:	6838      	ldr	r0, [r7, #0]
 8015a06:	6879      	ldr	r1, [r7, #4]
 8015a08:	f7ec fed8 	bl	80027bc <__aeabi_dsub>
 8015a0c:	9b03      	ldr	r3, [sp, #12]
 8015a0e:	0004      	movs	r4, r0
 8015a10:	000d      	movs	r5, r1
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	db00      	blt.n	8015a18 <atan+0x254>
 8015a16:	e6f4      	b.n	8015802 <atan+0x3e>
 8015a18:	2180      	movs	r1, #128	; 0x80
 8015a1a:	0609      	lsls	r1, r1, #24
 8015a1c:	186b      	adds	r3, r5, r1
 8015a1e:	001d      	movs	r5, r3
 8015a20:	e6ef      	b.n	8015802 <atan+0x3e>
 8015a22:	4d27      	ldr	r5, [pc, #156]	; (8015ac0 <atan+0x2fc>)
 8015a24:	e6ed      	b.n	8015802 <atan+0x3e>
 8015a26:	46c0      	nop			; (mov r8, r8)
 8015a28:	440fffff 	.word	0x440fffff
 8015a2c:	7ff00000 	.word	0x7ff00000
 8015a30:	54442d18 	.word	0x54442d18
 8015a34:	bff921fb 	.word	0xbff921fb
 8015a38:	3fdbffff 	.word	0x3fdbffff
 8015a3c:	3e1fffff 	.word	0x3e1fffff
 8015a40:	8800759c 	.word	0x8800759c
 8015a44:	7e37e43c 	.word	0x7e37e43c
 8015a48:	3ff00000 	.word	0x3ff00000
 8015a4c:	3ff2ffff 	.word	0x3ff2ffff
 8015a50:	3fe5ffff 	.word	0x3fe5ffff
 8015a54:	e322da11 	.word	0xe322da11
 8015a58:	3f90ad3a 	.word	0x3f90ad3a
 8015a5c:	24760deb 	.word	0x24760deb
 8015a60:	3fa97b4b 	.word	0x3fa97b4b
 8015a64:	a0d03d51 	.word	0xa0d03d51
 8015a68:	3fb10d66 	.word	0x3fb10d66
 8015a6c:	c54c206e 	.word	0xc54c206e
 8015a70:	3fb745cd 	.word	0x3fb745cd
 8015a74:	920083ff 	.word	0x920083ff
 8015a78:	3fc24924 	.word	0x3fc24924
 8015a7c:	5555550d 	.word	0x5555550d
 8015a80:	3fd55555 	.word	0x3fd55555
 8015a84:	2c6a6c2f 	.word	0x2c6a6c2f
 8015a88:	bfa2b444 	.word	0xbfa2b444
 8015a8c:	52defd9a 	.word	0x52defd9a
 8015a90:	3fadde2d 	.word	0x3fadde2d
 8015a94:	af749a6d 	.word	0xaf749a6d
 8015a98:	3fb3b0f2 	.word	0x3fb3b0f2
 8015a9c:	fe231671 	.word	0xfe231671
 8015aa0:	3fbc71c6 	.word	0x3fbc71c6
 8015aa4:	9998ebc4 	.word	0x9998ebc4
 8015aa8:	3fc99999 	.word	0x3fc99999
 8015aac:	40037fff 	.word	0x40037fff
 8015ab0:	3ff80000 	.word	0x3ff80000
 8015ab4:	bff00000 	.word	0xbff00000
 8015ab8:	08018848 	.word	0x08018848
 8015abc:	08018868 	.word	0x08018868
 8015ac0:	3ff921fb 	.word	0x3ff921fb

08015ac4 <fabs>:
 8015ac4:	004b      	lsls	r3, r1, #1
 8015ac6:	0859      	lsrs	r1, r3, #1
 8015ac8:	4770      	bx	lr
	...

08015acc <floor>:
 8015acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ace:	004b      	lsls	r3, r1, #1
 8015ad0:	4a3d      	ldr	r2, [pc, #244]	; (8015bc8 <floor+0xfc>)
 8015ad2:	0d5b      	lsrs	r3, r3, #21
 8015ad4:	189f      	adds	r7, r3, r2
 8015ad6:	4684      	mov	ip, r0
 8015ad8:	000e      	movs	r6, r1
 8015ada:	000d      	movs	r5, r1
 8015adc:	0004      	movs	r4, r0
 8015ade:	9001      	str	r0, [sp, #4]
 8015ae0:	2f13      	cmp	r7, #19
 8015ae2:	dc34      	bgt.n	8015b4e <floor+0x82>
 8015ae4:	2f00      	cmp	r7, #0
 8015ae6:	da16      	bge.n	8015b16 <floor+0x4a>
 8015ae8:	4a38      	ldr	r2, [pc, #224]	; (8015bcc <floor+0x100>)
 8015aea:	4b39      	ldr	r3, [pc, #228]	; (8015bd0 <floor+0x104>)
 8015aec:	4660      	mov	r0, ip
 8015aee:	0031      	movs	r1, r6
 8015af0:	f7eb fc88 	bl	8001404 <__aeabi_dadd>
 8015af4:	2200      	movs	r2, #0
 8015af6:	2300      	movs	r3, #0
 8015af8:	f7ea fcac 	bl	8000454 <__aeabi_dcmpgt>
 8015afc:	2800      	cmp	r0, #0
 8015afe:	d007      	beq.n	8015b10 <floor+0x44>
 8015b00:	2e00      	cmp	r6, #0
 8015b02:	da5d      	bge.n	8015bc0 <floor+0xf4>
 8015b04:	0073      	lsls	r3, r6, #1
 8015b06:	085b      	lsrs	r3, r3, #1
 8015b08:	431c      	orrs	r4, r3
 8015b0a:	d001      	beq.n	8015b10 <floor+0x44>
 8015b0c:	2400      	movs	r4, #0
 8015b0e:	4d31      	ldr	r5, [pc, #196]	; (8015bd4 <floor+0x108>)
 8015b10:	46a4      	mov	ip, r4
 8015b12:	002e      	movs	r6, r5
 8015b14:	e029      	b.n	8015b6a <floor+0x9e>
 8015b16:	4b30      	ldr	r3, [pc, #192]	; (8015bd8 <floor+0x10c>)
 8015b18:	413b      	asrs	r3, r7
 8015b1a:	9300      	str	r3, [sp, #0]
 8015b1c:	400b      	ands	r3, r1
 8015b1e:	4303      	orrs	r3, r0
 8015b20:	d023      	beq.n	8015b6a <floor+0x9e>
 8015b22:	4a2a      	ldr	r2, [pc, #168]	; (8015bcc <floor+0x100>)
 8015b24:	4b2a      	ldr	r3, [pc, #168]	; (8015bd0 <floor+0x104>)
 8015b26:	4660      	mov	r0, ip
 8015b28:	0031      	movs	r1, r6
 8015b2a:	f7eb fc6b 	bl	8001404 <__aeabi_dadd>
 8015b2e:	2200      	movs	r2, #0
 8015b30:	2300      	movs	r3, #0
 8015b32:	f7ea fc8f 	bl	8000454 <__aeabi_dcmpgt>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d0ea      	beq.n	8015b10 <floor+0x44>
 8015b3a:	2e00      	cmp	r6, #0
 8015b3c:	da03      	bge.n	8015b46 <floor+0x7a>
 8015b3e:	2380      	movs	r3, #128	; 0x80
 8015b40:	035b      	lsls	r3, r3, #13
 8015b42:	413b      	asrs	r3, r7
 8015b44:	18f5      	adds	r5, r6, r3
 8015b46:	9b00      	ldr	r3, [sp, #0]
 8015b48:	2400      	movs	r4, #0
 8015b4a:	439d      	bics	r5, r3
 8015b4c:	e7e0      	b.n	8015b10 <floor+0x44>
 8015b4e:	2f33      	cmp	r7, #51	; 0x33
 8015b50:	dd0f      	ble.n	8015b72 <floor+0xa6>
 8015b52:	2380      	movs	r3, #128	; 0x80
 8015b54:	00db      	lsls	r3, r3, #3
 8015b56:	429f      	cmp	r7, r3
 8015b58:	d107      	bne.n	8015b6a <floor+0x9e>
 8015b5a:	0002      	movs	r2, r0
 8015b5c:	000b      	movs	r3, r1
 8015b5e:	4660      	mov	r0, ip
 8015b60:	0031      	movs	r1, r6
 8015b62:	f7eb fc4f 	bl	8001404 <__aeabi_dadd>
 8015b66:	4684      	mov	ip, r0
 8015b68:	000e      	movs	r6, r1
 8015b6a:	4660      	mov	r0, ip
 8015b6c:	0031      	movs	r1, r6
 8015b6e:	b003      	add	sp, #12
 8015b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b72:	4a1a      	ldr	r2, [pc, #104]	; (8015bdc <floor+0x110>)
 8015b74:	189b      	adds	r3, r3, r2
 8015b76:	2201      	movs	r2, #1
 8015b78:	4252      	negs	r2, r2
 8015b7a:	40da      	lsrs	r2, r3
 8015b7c:	9200      	str	r2, [sp, #0]
 8015b7e:	4210      	tst	r0, r2
 8015b80:	d0f3      	beq.n	8015b6a <floor+0x9e>
 8015b82:	4a12      	ldr	r2, [pc, #72]	; (8015bcc <floor+0x100>)
 8015b84:	4b12      	ldr	r3, [pc, #72]	; (8015bd0 <floor+0x104>)
 8015b86:	4660      	mov	r0, ip
 8015b88:	0031      	movs	r1, r6
 8015b8a:	f7eb fc3b 	bl	8001404 <__aeabi_dadd>
 8015b8e:	2200      	movs	r2, #0
 8015b90:	2300      	movs	r3, #0
 8015b92:	f7ea fc5f 	bl	8000454 <__aeabi_dcmpgt>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	d0ba      	beq.n	8015b10 <floor+0x44>
 8015b9a:	2e00      	cmp	r6, #0
 8015b9c:	da02      	bge.n	8015ba4 <floor+0xd8>
 8015b9e:	2f14      	cmp	r7, #20
 8015ba0:	d103      	bne.n	8015baa <floor+0xde>
 8015ba2:	3501      	adds	r5, #1
 8015ba4:	9b00      	ldr	r3, [sp, #0]
 8015ba6:	439c      	bics	r4, r3
 8015ba8:	e7b2      	b.n	8015b10 <floor+0x44>
 8015baa:	2334      	movs	r3, #52	; 0x34
 8015bac:	1bdf      	subs	r7, r3, r7
 8015bae:	3b33      	subs	r3, #51	; 0x33
 8015bb0:	40bb      	lsls	r3, r7
 8015bb2:	18e4      	adds	r4, r4, r3
 8015bb4:	9b01      	ldr	r3, [sp, #4]
 8015bb6:	429c      	cmp	r4, r3
 8015bb8:	419b      	sbcs	r3, r3
 8015bba:	425b      	negs	r3, r3
 8015bbc:	18f5      	adds	r5, r6, r3
 8015bbe:	e7f1      	b.n	8015ba4 <floor+0xd8>
 8015bc0:	2400      	movs	r4, #0
 8015bc2:	0025      	movs	r5, r4
 8015bc4:	e7a4      	b.n	8015b10 <floor+0x44>
 8015bc6:	46c0      	nop			; (mov r8, r8)
 8015bc8:	fffffc01 	.word	0xfffffc01
 8015bcc:	8800759c 	.word	0x8800759c
 8015bd0:	7e37e43c 	.word	0x7e37e43c
 8015bd4:	bff00000 	.word	0xbff00000
 8015bd8:	000fffff 	.word	0x000fffff
 8015bdc:	fffffbed 	.word	0xfffffbed

08015be0 <nan>:
 8015be0:	2000      	movs	r0, #0
 8015be2:	4901      	ldr	r1, [pc, #4]	; (8015be8 <nan+0x8>)
 8015be4:	4770      	bx	lr
 8015be6:	46c0      	nop			; (mov r8, r8)
 8015be8:	7ff80000 	.word	0x7ff80000

08015bec <scalbn>:
 8015bec:	004b      	lsls	r3, r1, #1
 8015bee:	b570      	push	{r4, r5, r6, lr}
 8015bf0:	0d5b      	lsrs	r3, r3, #21
 8015bf2:	0014      	movs	r4, r2
 8015bf4:	000a      	movs	r2, r1
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d10d      	bne.n	8015c16 <scalbn+0x2a>
 8015bfa:	004b      	lsls	r3, r1, #1
 8015bfc:	085b      	lsrs	r3, r3, #1
 8015bfe:	4303      	orrs	r3, r0
 8015c00:	d010      	beq.n	8015c24 <scalbn+0x38>
 8015c02:	4b27      	ldr	r3, [pc, #156]	; (8015ca0 <scalbn+0xb4>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	f7ec fb6d 	bl	80022e4 <__aeabi_dmul>
 8015c0a:	4b26      	ldr	r3, [pc, #152]	; (8015ca4 <scalbn+0xb8>)
 8015c0c:	429c      	cmp	r4, r3
 8015c0e:	da0a      	bge.n	8015c26 <scalbn+0x3a>
 8015c10:	4a25      	ldr	r2, [pc, #148]	; (8015ca8 <scalbn+0xbc>)
 8015c12:	4b26      	ldr	r3, [pc, #152]	; (8015cac <scalbn+0xc0>)
 8015c14:	e019      	b.n	8015c4a <scalbn+0x5e>
 8015c16:	4d26      	ldr	r5, [pc, #152]	; (8015cb0 <scalbn+0xc4>)
 8015c18:	42ab      	cmp	r3, r5
 8015c1a:	d108      	bne.n	8015c2e <scalbn+0x42>
 8015c1c:	0002      	movs	r2, r0
 8015c1e:	000b      	movs	r3, r1
 8015c20:	f7eb fbf0 	bl	8001404 <__aeabi_dadd>
 8015c24:	bd70      	pop	{r4, r5, r6, pc}
 8015c26:	000a      	movs	r2, r1
 8015c28:	004b      	lsls	r3, r1, #1
 8015c2a:	0d5b      	lsrs	r3, r3, #21
 8015c2c:	3b36      	subs	r3, #54	; 0x36
 8015c2e:	4d21      	ldr	r5, [pc, #132]	; (8015cb4 <scalbn+0xc8>)
 8015c30:	18e3      	adds	r3, r4, r3
 8015c32:	42ab      	cmp	r3, r5
 8015c34:	dd0c      	ble.n	8015c50 <scalbn+0x64>
 8015c36:	4c20      	ldr	r4, [pc, #128]	; (8015cb8 <scalbn+0xcc>)
 8015c38:	4d20      	ldr	r5, [pc, #128]	; (8015cbc <scalbn+0xd0>)
 8015c3a:	2900      	cmp	r1, #0
 8015c3c:	da01      	bge.n	8015c42 <scalbn+0x56>
 8015c3e:	4c1e      	ldr	r4, [pc, #120]	; (8015cb8 <scalbn+0xcc>)
 8015c40:	4d1f      	ldr	r5, [pc, #124]	; (8015cc0 <scalbn+0xd4>)
 8015c42:	0020      	movs	r0, r4
 8015c44:	0029      	movs	r1, r5
 8015c46:	4a1c      	ldr	r2, [pc, #112]	; (8015cb8 <scalbn+0xcc>)
 8015c48:	4b1c      	ldr	r3, [pc, #112]	; (8015cbc <scalbn+0xd0>)
 8015c4a:	f7ec fb4b 	bl	80022e4 <__aeabi_dmul>
 8015c4e:	e7e9      	b.n	8015c24 <scalbn+0x38>
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	dd05      	ble.n	8015c60 <scalbn+0x74>
 8015c54:	4c1b      	ldr	r4, [pc, #108]	; (8015cc4 <scalbn+0xd8>)
 8015c56:	051b      	lsls	r3, r3, #20
 8015c58:	4022      	ands	r2, r4
 8015c5a:	431a      	orrs	r2, r3
 8015c5c:	0011      	movs	r1, r2
 8015c5e:	e7e1      	b.n	8015c24 <scalbn+0x38>
 8015c60:	001d      	movs	r5, r3
 8015c62:	3535      	adds	r5, #53	; 0x35
 8015c64:	da13      	bge.n	8015c8e <scalbn+0xa2>
 8015c66:	4a18      	ldr	r2, [pc, #96]	; (8015cc8 <scalbn+0xdc>)
 8015c68:	0fcb      	lsrs	r3, r1, #31
 8015c6a:	4294      	cmp	r4, r2
 8015c6c:	dd08      	ble.n	8015c80 <scalbn+0x94>
 8015c6e:	4812      	ldr	r0, [pc, #72]	; (8015cb8 <scalbn+0xcc>)
 8015c70:	4912      	ldr	r1, [pc, #72]	; (8015cbc <scalbn+0xd0>)
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d001      	beq.n	8015c7a <scalbn+0x8e>
 8015c76:	4810      	ldr	r0, [pc, #64]	; (8015cb8 <scalbn+0xcc>)
 8015c78:	4911      	ldr	r1, [pc, #68]	; (8015cc0 <scalbn+0xd4>)
 8015c7a:	4a0f      	ldr	r2, [pc, #60]	; (8015cb8 <scalbn+0xcc>)
 8015c7c:	4b0f      	ldr	r3, [pc, #60]	; (8015cbc <scalbn+0xd0>)
 8015c7e:	e7e4      	b.n	8015c4a <scalbn+0x5e>
 8015c80:	4809      	ldr	r0, [pc, #36]	; (8015ca8 <scalbn+0xbc>)
 8015c82:	490a      	ldr	r1, [pc, #40]	; (8015cac <scalbn+0xc0>)
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d0c3      	beq.n	8015c10 <scalbn+0x24>
 8015c88:	4807      	ldr	r0, [pc, #28]	; (8015ca8 <scalbn+0xbc>)
 8015c8a:	4910      	ldr	r1, [pc, #64]	; (8015ccc <scalbn+0xe0>)
 8015c8c:	e7c0      	b.n	8015c10 <scalbn+0x24>
 8015c8e:	4c0d      	ldr	r4, [pc, #52]	; (8015cc4 <scalbn+0xd8>)
 8015c90:	3336      	adds	r3, #54	; 0x36
 8015c92:	4022      	ands	r2, r4
 8015c94:	051b      	lsls	r3, r3, #20
 8015c96:	4313      	orrs	r3, r2
 8015c98:	0019      	movs	r1, r3
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	4b0c      	ldr	r3, [pc, #48]	; (8015cd0 <scalbn+0xe4>)
 8015c9e:	e7d4      	b.n	8015c4a <scalbn+0x5e>
 8015ca0:	43500000 	.word	0x43500000
 8015ca4:	ffff3cb0 	.word	0xffff3cb0
 8015ca8:	c2f8f359 	.word	0xc2f8f359
 8015cac:	01a56e1f 	.word	0x01a56e1f
 8015cb0:	000007ff 	.word	0x000007ff
 8015cb4:	000007fe 	.word	0x000007fe
 8015cb8:	8800759c 	.word	0x8800759c
 8015cbc:	7e37e43c 	.word	0x7e37e43c
 8015cc0:	fe37e43c 	.word	0xfe37e43c
 8015cc4:	800fffff 	.word	0x800fffff
 8015cc8:	0000c350 	.word	0x0000c350
 8015ccc:	81a56e1f 	.word	0x81a56e1f
 8015cd0:	3c900000 	.word	0x3c900000

08015cd4 <_init>:
 8015cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cd6:	46c0      	nop			; (mov r8, r8)
 8015cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cda:	bc08      	pop	{r3}
 8015cdc:	469e      	mov	lr, r3
 8015cde:	4770      	bx	lr

08015ce0 <_fini>:
 8015ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce2:	46c0      	nop			; (mov r8, r8)
 8015ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ce6:	bc08      	pop	{r3}
 8015ce8:	469e      	mov	lr, r3
 8015cea:	4770      	bx	lr
 8015cec:	0000      	movs	r0, r0
	...

08015cf0 <__FLASH_Program_Fast_veneer>:
 8015cf0:	b401      	push	{r0}
 8015cf2:	4802      	ldr	r0, [pc, #8]	; (8015cfc <__FLASH_Program_Fast_veneer+0xc>)
 8015cf4:	4684      	mov	ip, r0
 8015cf6:	bc01      	pop	{r0}
 8015cf8:	4760      	bx	ip
 8015cfa:	bf00      	nop
 8015cfc:	200000f5 	.word	0x200000f5

Disassembly of section .data:

20000000 <uwTickPrio>:
20000000:	00000004                                ....

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <Font12>:
2000000c:	080162ec 000c0007                       .b......

20000014 <Font16>:
20000014:	08016760 0010000b                       `g......

2000001c <Font20>:
2000001c:	08017340 0014000e                       @s......

20000024 <Font8>:
20000024:	08018218 00080005                       ........

2000002c <layoutsCounter>:
2000002c:	                                         .

2000002d <ctrlMeas>:
2000002d:	                                         %

2000002e <ctrlHum>:
2000002e:	                                         .

2000002f <ctrlMagnetometerPowerDown>:
2000002f:	                                         .

20000030 <temperatureCompensation>:
20000030:	                                         ..

20000032 <pressureReference>:
20000032:	                                         ..

20000034 <batteryLevels>:
20000034:	0ea60e10 0f0a0ed8 0fb40f6e               ........n.....

20000042 <i2cTimeout>:
20000042:	                                         ..

20000044 <offsetADC>:
20000044:	ffffffb5                                ....

20000048 <gainVoltagePassive>:
20000048:	3f87ae14                                ...?

2000004c <line>:
2000004c:	0f0a0500 231e1914 37322d28 4b46413c     .......#(-27<AFK
2000005c:	5f5a5550 736e6964 87827d78 9b96918c     PUZ_dinsx}......
2000006c:	afaaa5a0 c3beb9b4                       ........

20000074 <column>:
20000074:	1e140a00 463c3228 6e645a50 968c8278     ....(2<FPZdnx...
20000084:	beb4aaa0                                ....

20000088 <SystemCoreClock>:
20000088:	00f42400                                .$..

2000008c <_impure_ptr>:
2000008c:	20000090                                ... 

20000090 <impure_data>:
20000090:	00000000 080185cc 080185ec 080185ac     ................
	...

200000f0 <__fdlib_version>:
200000f0:	000000ff                                ....

200000f4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000f4:	b580      	push	{r7, lr}
200000f6:	b088      	sub	sp, #32
200000f8:	af00      	add	r7, sp, #0
200000fa:	6078      	str	r0, [r7, #4]
200000fc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000fe:	231f      	movs	r3, #31
20000100:	18fb      	adds	r3, r7, r3
20000102:	2200      	movs	r2, #0
20000104:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000010a:	683b      	ldr	r3, [r7, #0]
2000010c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000010e:	4b1a      	ldr	r3, [pc, #104]	; (20000178 <FLASH_Program_Fast+0x84>)
20000110:	695a      	ldr	r2, [r3, #20]
20000112:	4b19      	ldr	r3, [pc, #100]	; (20000178 <FLASH_Program_Fast+0x84>)
20000114:	2180      	movs	r1, #128	; 0x80
20000116:	02c9      	lsls	r1, r1, #11
20000118:	430a      	orrs	r2, r1
2000011a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000011c:	f3ef 8310 	mrs	r3, PRIMASK
20000120:	60fb      	str	r3, [r7, #12]
  return(result);
20000122:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000126:	b672      	cpsid	i
}
20000128:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000012a:	e00f      	b.n	2000014c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000012c:	697a      	ldr	r2, [r7, #20]
2000012e:	69bb      	ldr	r3, [r7, #24]
20000130:	6812      	ldr	r2, [r2, #0]
20000132:	601a      	str	r2, [r3, #0]
    src += 4U;
20000134:	697b      	ldr	r3, [r7, #20]
20000136:	3304      	adds	r3, #4
20000138:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000013a:	69bb      	ldr	r3, [r7, #24]
2000013c:	3304      	adds	r3, #4
2000013e:	61bb      	str	r3, [r7, #24]
    index++;
20000140:	211f      	movs	r1, #31
20000142:	187b      	adds	r3, r7, r1
20000144:	781a      	ldrb	r2, [r3, #0]
20000146:	187b      	adds	r3, r7, r1
20000148:	3201      	adds	r2, #1
2000014a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000014c:	231f      	movs	r3, #31
2000014e:	18fb      	adds	r3, r7, r3
20000150:	781b      	ldrb	r3, [r3, #0]
20000152:	2b3f      	cmp	r3, #63	; 0x3f
20000154:	d9ea      	bls.n	2000012c <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	4b07      	ldr	r3, [pc, #28]	; (20000178 <FLASH_Program_Fast+0x84>)
2000015a:	691a      	ldr	r2, [r3, #16]
2000015c:	2380      	movs	r3, #128	; 0x80
2000015e:	025b      	lsls	r3, r3, #9
20000160:	4013      	ands	r3, r2
20000162:	d1f9      	bne.n	20000158 <FLASH_Program_Fast+0x64>
20000164:	693b      	ldr	r3, [r7, #16]
20000166:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000168:	68bb      	ldr	r3, [r7, #8]
2000016a:	f383 8810 	msr	PRIMASK, r3
}
2000016e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000170:	46c0      	nop			; (mov r8, r8)
20000172:	46bd      	mov	sp, r7
20000174:	b008      	add	sp, #32
20000176:	bd80      	pop	{r7, pc}
20000178:	40022000 	.word	0x40022000
